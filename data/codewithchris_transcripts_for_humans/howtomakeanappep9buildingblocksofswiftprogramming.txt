With timestamps:

00:05 - hey guys in the last lesson we built our
00:08 - user interface in the storyboard and we
00:11 - learned all about Auto layout before we
00:14 - expose those elements to code I wanted
00:17 - to go through the basic building blocks
00:18 - of the Swift programming language so
00:21 - that when we do look at code you can
00:23 - understand what's going on and what the
00:25 - various lines of code mean so in this
00:28 - lesson we're going to go over some
00:29 - concepts that may be difficult for you
00:32 - to understand if this is the first time
00:34 - you've ever seen or heard about them
00:37 - we're going to go through classes and
00:39 - objects we're going to go through
00:41 - methods and we're going to go through
00:43 - properties okay so let's jump right in
00:46 - the first concept is a class a class is
00:49 - a blueprint that we can create to
00:51 - describe a component of our app when
00:54 - we're making an app in Xcode really all
00:56 - we're doing is creating classes to
00:58 - describe the various components in our
01:00 - app and how they interact with each
01:02 - other for example in that MVC diagram I
01:06 - showed you before describing the various
01:08 - components of an app the behavior of the
01:10 - model will be described by a class the
01:13 - view controller is described by a class
01:15 - and the view as well in each of those
01:18 - classes we write code to give it
01:20 - instructions on what to do and how to
01:21 - act so in the view controller class I
01:24 - might write some code to tell it to ask
01:26 - the model for the data and then display
01:29 - it to the view and then in the model
01:31 - class I might write code to say if the
01:34 - view controller asks you for data then
01:36 - go fetch the data and then return it are
01:38 - you with me so far
01:40 - so a class contains instructions written
01:44 - in code to describe how a component is
01:47 - supposed to act and how it's supposed to
01:49 - interact with the other components
01:51 - another thing to realize is that it's
01:53 - not the classes themselves that are
01:55 - doing the interacting the classes are
01:58 - merely blueprints that we're creating
02:00 - what happens is that these blueprints
02:03 - also known as classes are turned into
02:05 - what's called objects so from the model
02:09 - class a model object is created
02:12 - from the viewcontroller class a view
02:14 - controller object is created and from
02:16 - the view class a view object is created
02:18 - and it's these objects that interact
02:20 - with each other and carry out the
02:22 - functions of our app furthermore from
02:25 - one class or one blueprint you can
02:28 - create multiple objects in the same
02:30 - likeness and behavior that the class
02:32 - describes and this makes sense because
02:34 - imagine if you had two components in
02:37 - your app that did the same thing but in
02:38 - two different places you can code up one
02:41 - class and create two objects from it
02:44 - another example would be say in a game
02:48 - where you spawn multiple enemies of the
02:50 - same type you shouldn't need to create a
02:52 - class for each enemy that appears on the
02:54 - screen
02:54 - you only need to create a single class
02:56 - that describes the enemy's behavior and
02:59 - then use that class to create multiple
03:03 - enemy objects to throw at the player so
03:06 - the key takeaway at this point is that
03:09 - the components in our app are described
03:11 - by classes classes are like blueprints
03:14 - that are used to produce objects that
03:16 - act and behave as described in the class
03:19 - and it's these objects that interact
03:22 - with each other to perform the duties of
03:24 - our app now let's try creating some
03:26 - classes in the playground and in lesson
03:29 - 2 we learned how to start and create a
03:31 - new playground from Xcode open up a new
03:34 - playground and we're going to type out
03:36 - some code so to create a class simply
03:39 - use the class keyword and then give your
03:43 - class a name so for example I'm going to
03:45 - call my class person and then all you're
03:48 - going to do is open up a set of curly
03:51 - braces inside the curly braces you're
03:56 - going to type in it and then to round
04:02 - braces like that and then another set of
04:05 - curly braces so when I type out this
04:09 - left-side curly brace and I just hit
04:12 - enter Xcode will automatically fill in
04:14 - the second one so that's just a little
04:18 - shortcut and then just like that you've
04:19 - created a new class to describe a
04:22 - component of your app so what is this
04:24 - init here well
04:26 - any code that you put in between these
04:28 - curly braces right here gets executed
04:31 - when a new object of this class gets
04:34 - created so when a new person object is
04:37 - created the code inside the anit is run
04:40 - and that code can be used to set up or
04:43 - initialize anything that you need for
04:46 - the personal objective function properly
04:48 - so let's try that let's create a new
04:51 - object of our new person class so you
04:55 - can do that very simply just by typing
04:58 - the class name followed by 2 round
05:03 - braces like that and just like that
05:05 - we've created a new object however what
05:09 - we want to do is create a variable just
05:13 - so that we can reference our object
05:15 - later so I'm going to create a new
05:19 - variable just I'll just name it a so now
05:26 - I've created a new person object and
05:28 - I've assigned it to the variable a so
05:30 - now when I want to reference that object
05:34 - I can use the variable a and I can do
05:40 - stuff to it as we'll see soon so I'm
05:42 - just going to erase that line and let's
05:46 - put a print statement in the init just
05:48 - so we can see that it gets called when
05:50 - we create a new object so let's say new
05:57 - person initialized okay so now when I
06:06 - create a new person you can see that the
06:12 - print statement is run and you can see
06:15 - that that's the output
06:20 - okay so this is great we've created a
06:23 - new class to describe a component in our
06:25 - app but we need to give it instructions
06:28 - to do something to describe its behavior
06:31 - and how do we do that we do that through
06:34 - something called methods and properties
06:36 - those are two different things that
06:38 - we're going to go through them
06:38 - individually so let's talk about methods
06:40 - first a method is a named set of
06:43 - instructions that will be executed when
06:46 - called
06:46 - additionally methods can accept some
06:49 - data as input and return some data as
06:51 - output back to the caller of the method
06:53 - and finally methods are associated with
06:56 - the class so let's try to create a
06:58 - method for our new person class so what
07:01 - I'm going to do is just create some
07:02 - space here right below the closing curly
07:06 - brace of our class and in order to
07:08 - create a method you start with the func
07:11 - keyword stands for function and you give
07:15 - your method a name so I'm going to call
07:17 - it say cheese
07:20 - so that's my method name give it a set
07:23 - of round braces followed by a set of
07:27 - curly braces and inside this set of
07:30 - curly braces you write the code to
07:33 - execute when this method is called so
07:39 - inside my say cheese method I'm going to
07:43 - just at this point here print cheese
07:49 - okay so as you can see going back to it
07:54 - when we create a new object right here
07:57 - cheese doesn't get printed out because
08:01 - this line of code only gets executed if
08:04 - this method is called and it's not being
08:06 - called right now
08:07 - right so what I can do in order to call
08:10 - the method is just type since I've got a
08:13 - new person object assigned to my
08:16 - variable B I type in B dot say cheese
08:23 - with the brackets when I do that you can
08:28 - see that this line is printed out so
08:32 - when I write this code statement it
08:34 - actually runs this code in here okay so
08:39 - let's look at this method call what is B
08:44 - dot say cheese well method calls take
08:47 - the format of the object that you want
08:50 - to call the method on dot method name so
08:55 - that's why because my person object is
08:58 - in the variable B when I write B that
09:01 - refers to that object and I write dot to
09:04 - look at all of its properties and
09:06 - methods at this point it's only got to
09:08 - say cheese method and then you write the
09:10 - method name to call this objects
09:13 - say cheese method okay so let's say we
09:16 - don't do that let's try to call that
09:19 - method as part of the initializer and
09:21 - you might notice at this point that this
09:24 - initializer kind of looks like a method
09:27 - except that it doesn't have this func
09:30 - keyword well you're right the
09:32 - initializer is basically a method but
09:34 - it's a special type of method because
09:37 - all classes need to have an initializer
09:40 - so anyways I'm going to erase this print
09:43 - line here and instead I'm going to call
09:46 - the say cheese method from in here so
09:49 - that whenever we create a new person
09:51 - object this initializer method is run
09:54 - and inside this initializer method it's
09:57 - going to call its own say cheese method
10:00 - so the way I do that
10:02 - as I write self dot say cheese now as
10:10 - you can see when I create this new
10:13 - person object cheese is printed out even
10:15 - though I didn't call the method
10:17 - explicitly here because the initializer
10:19 - method calls the say cheese method now
10:23 - you might be wondering you know what is
10:24 - self mean well self means call a method
10:28 - that you own yourself so to help you
10:32 - understand the self keyword take a look
10:34 - at this slide imagine that we're writing
10:37 - a set of instructions for the created
10:39 - object to read itself so each object is
10:43 - created in the likeness of the class and
10:45 - when they read that line of code they're
10:48 - like saying to themselves call my own
10:51 - method say cheese
10:54 - so if you think about it that way it may
10:57 - be more intuitive to understand why the
11:00 - keyword is named self okay next we're
11:02 - ready to look at properties a property
11:05 - is something that we can create for a
11:07 - class in order to allow it to store a
11:09 - value or keep track of another object
11:11 - let's go back to our playground and see
11:13 - how to declare a property for our class
11:16 - so I'm going to find a space here right
11:19 - below the opening person bracket
11:23 - properties are declared at the very top
11:26 - so you start with the keyword var
11:29 - followed by the property name so I'm
11:33 - going to say name followed by colon
11:37 - followed by the type of data that that
11:40 - property is going to store or track in
11:43 - this case I'm going to write string
11:46 - remember string is just a piece of text
11:48 - and next we also have to give it an
11:50 - initial value so I'm going to use the
11:53 - equal symbol to assign something to it
11:56 - I'm going to sign a piece of text into
11:58 - this property as an initial value I'm
12:01 - just going to give it a piece of string
12:04 - that says initial name and just like
12:08 - that we've declared a property for our
12:10 - person class and gave it an initial
12:12 - value with this piece of text now you
12:15 - may notice
12:16 - a property declaration sort of looks
12:18 - like a variable declaration if you
12:21 - remember in lesson two when we did
12:23 - something like let me just erase this
12:26 - line for a second when we did something
12:29 - like this where we created three
12:41 - variables with the third one being the
12:43 - sum of the first two well this almost
12:46 - looks like a property declaration you
12:48 - have the VAR keyword and you have a name
12:50 - for your variable and you know what
12:52 - you're right because even with the
12:54 - variable declaration we can put that Col
12:58 - in there and then put the type of data
13:00 - that that variable is going to hold and
13:02 - for numbers we use int stands for
13:06 - integer so we could have done this and
13:14 - now it looks even more of like a proper
13:17 - declaration okay so then what aren't the
13:19 - difference between variables and
13:21 - properties well it depends where it's
13:23 - declared when it's declared here inside
13:26 - the person class at the top it becomes a
13:30 - property of that class and it's
13:32 - associated with the class while
13:34 - variables are declared and used within
13:37 - methods okay now let's look at how to
13:40 - access a property so I'm going to erase
13:44 - this now I'm going to declare a new
13:46 - variable
13:50 - now I just realized that I just said
13:52 - that variables are declared within class
13:55 - within methods and they normally are but
13:58 - because this is a playground we're kind
14:00 - of it's just a place to test code that
14:02 - rule is kind of out the window here but
14:04 - you'll notice when we write code inside
14:06 - Xcode we will be following those rules
14:08 - where most of the variables that we
14:10 - declare will be inside methods and
14:12 - anything that we declare outside our
14:15 - properties so I'm going to create a
14:17 - variable called first person and I'm
14:20 - going to create a new person object so
14:22 - in order to access that property it
14:25 - follows the same format as a method call
14:27 - I reference the object that I want to
14:32 - call it's property on I hit dot and then
14:38 - now I can either you know right say
14:41 - cheese they call its method or write the
14:45 - property name to call its property and
14:48 - you can see there it's accessed initial
14:50 - name now if I want to change the
14:52 - property I can just go like that and I
15:00 - can assign it a different piece of text
15:02 - now if I access that property again you
15:07 - can see that it's changed and now it
15:09 - says Alice I'm going to create a second
15:14 - person I'm going to create a second
15:18 - variable and create a new person object
15:20 - inside and assign it to that second
15:23 - variable and I'm going to change its
15:29 - name property okay so take a look at
15:36 - this I've created another person object
15:40 - assigned it to the variable second
15:42 - person and I just changed its name to
15:44 - Bob well what would you expect first
15:47 - person their name to be let's find out
15:55 - well the first person's name is still
15:57 - Alice and that illustrates a very
15:59 - important point although each object is
16:03 - created in the likeness of the class
16:05 - there are actually independent instances
16:08 - of each other remember you can use one
16:11 - class to create multiple objects of that
16:14 - class but each of them are independent
16:16 - instances so what you do to one object
16:22 - does not automatically apply to all of
16:24 - the other objects they're independent
16:28 - okay so that's where we're going to end
16:30 - off this lesson this was just an
16:32 - introduction to classes methods and
16:34 - properties there's actually more
16:36 - complicated things that you can do with
16:38 - them but we'll look at that when we need
16:40 - to if this was your first time learning
16:42 - about classes and objects then welcome
16:44 - to the world of object-oriented
16:46 - programming languages you'll probably
16:48 - need to watch this video again or maybe
16:50 - even a couple of times to wrap your head
16:52 - around it
16:53 - Swift along with many other programming
16:56 - languages are object-oriented so in the
16:59 - future when you've mastered Swift and
17:01 - you decide to learn Java for Android
17:03 - apps c-sharp for Windows Phone apps or
17:06 - perhaps even objective-c you'll have a
17:09 - head start because they use the same
17:11 - concepts that have been presented in
17:12 - this lesson today and on a closing note
17:14 - if you've watched this video a couple of
17:17 - times and you're still a bit confused
17:18 - don't worry about it too much because
17:20 - we're going to be putting this stuff
17:21 - into practice and you'll start to click
17:23 - when we do it in the next lesson we're
17:26 - going to go over a couple more Swift
17:29 - programming language concepts before we
17:31 - actually dive in our card game app

Cleaned transcript:

hey guys in the last lesson we built our user interface in the storyboard and we learned all about Auto layout before we expose those elements to code I wanted to go through the basic building blocks of the Swift programming language so that when we do look at code you can understand what's going on and what the various lines of code mean so in this lesson we're going to go over some concepts that may be difficult for you to understand if this is the first time you've ever seen or heard about them we're going to go through classes and objects we're going to go through methods and we're going to go through properties okay so let's jump right in the first concept is a class a class is a blueprint that we can create to describe a component of our app when we're making an app in Xcode really all we're doing is creating classes to describe the various components in our app and how they interact with each other for example in that MVC diagram I showed you before describing the various components of an app the behavior of the model will be described by a class the view controller is described by a class and the view as well in each of those classes we write code to give it instructions on what to do and how to act so in the view controller class I might write some code to tell it to ask the model for the data and then display it to the view and then in the model class I might write code to say if the view controller asks you for data then go fetch the data and then return it are you with me so far so a class contains instructions written in code to describe how a component is supposed to act and how it's supposed to interact with the other components another thing to realize is that it's not the classes themselves that are doing the interacting the classes are merely blueprints that we're creating what happens is that these blueprints also known as classes are turned into what's called objects so from the model class a model object is created from the viewcontroller class a view controller object is created and from the view class a view object is created and it's these objects that interact with each other and carry out the functions of our app furthermore from one class or one blueprint you can create multiple objects in the same likeness and behavior that the class describes and this makes sense because imagine if you had two components in your app that did the same thing but in two different places you can code up one class and create two objects from it another example would be say in a game where you spawn multiple enemies of the same type you shouldn't need to create a class for each enemy that appears on the screen you only need to create a single class that describes the enemy's behavior and then use that class to create multiple enemy objects to throw at the player so the key takeaway at this point is that the components in our app are described by classes classes are like blueprints that are used to produce objects that act and behave as described in the class and it's these objects that interact with each other to perform the duties of our app now let's try creating some classes in the playground and in lesson 2 we learned how to start and create a new playground from Xcode open up a new playground and we're going to type out some code so to create a class simply use the class keyword and then give your class a name so for example I'm going to call my class person and then all you're going to do is open up a set of curly braces inside the curly braces you're going to type in it and then to round braces like that and then another set of curly braces so when I type out this leftside curly brace and I just hit enter Xcode will automatically fill in the second one so that's just a little shortcut and then just like that you've created a new class to describe a component of your app so what is this init here well any code that you put in between these curly braces right here gets executed when a new object of this class gets created so when a new person object is created the code inside the anit is run and that code can be used to set up or initialize anything that you need for the personal objective function properly so let's try that let's create a new object of our new person class so you can do that very simply just by typing the class name followed by 2 round braces like that and just like that we've created a new object however what we want to do is create a variable just so that we can reference our object later so I'm going to create a new variable just I'll just name it a so now I've created a new person object and I've assigned it to the variable a so now when I want to reference that object I can use the variable a and I can do stuff to it as we'll see soon so I'm just going to erase that line and let's put a print statement in the init just so we can see that it gets called when we create a new object so let's say new person initialized okay so now when I create a new person you can see that the print statement is run and you can see that that's the output okay so this is great we've created a new class to describe a component in our app but we need to give it instructions to do something to describe its behavior and how do we do that we do that through something called methods and properties those are two different things that we're going to go through them individually so let's talk about methods first a method is a named set of instructions that will be executed when called additionally methods can accept some data as input and return some data as output back to the caller of the method and finally methods are associated with the class so let's try to create a method for our new person class so what I'm going to do is just create some space here right below the closing curly brace of our class and in order to create a method you start with the func keyword stands for function and you give your method a name so I'm going to call it say cheese so that's my method name give it a set of round braces followed by a set of curly braces and inside this set of curly braces you write the code to execute when this method is called so inside my say cheese method I'm going to just at this point here print cheese okay so as you can see going back to it when we create a new object right here cheese doesn't get printed out because this line of code only gets executed if this method is called and it's not being called right now right so what I can do in order to call the method is just type since I've got a new person object assigned to my variable B I type in B dot say cheese with the brackets when I do that you can see that this line is printed out so when I write this code statement it actually runs this code in here okay so let's look at this method call what is B dot say cheese well method calls take the format of the object that you want to call the method on dot method name so that's why because my person object is in the variable B when I write B that refers to that object and I write dot to look at all of its properties and methods at this point it's only got to say cheese method and then you write the method name to call this objects say cheese method okay so let's say we don't do that let's try to call that method as part of the initializer and you might notice at this point that this initializer kind of looks like a method except that it doesn't have this func keyword well you're right the initializer is basically a method but it's a special type of method because all classes need to have an initializer so anyways I'm going to erase this print line here and instead I'm going to call the say cheese method from in here so that whenever we create a new person object this initializer method is run and inside this initializer method it's going to call its own say cheese method so the way I do that as I write self dot say cheese now as you can see when I create this new person object cheese is printed out even though I didn't call the method explicitly here because the initializer method calls the say cheese method now you might be wondering you know what is self mean well self means call a method that you own yourself so to help you understand the self keyword take a look at this slide imagine that we're writing a set of instructions for the created object to read itself so each object is created in the likeness of the class and when they read that line of code they're like saying to themselves call my own method say cheese so if you think about it that way it may be more intuitive to understand why the keyword is named self okay next we're ready to look at properties a property is something that we can create for a class in order to allow it to store a value or keep track of another object let's go back to our playground and see how to declare a property for our class so I'm going to find a space here right below the opening person bracket properties are declared at the very top so you start with the keyword var followed by the property name so I'm going to say name followed by colon followed by the type of data that that property is going to store or track in this case I'm going to write string remember string is just a piece of text and next we also have to give it an initial value so I'm going to use the equal symbol to assign something to it I'm going to sign a piece of text into this property as an initial value I'm just going to give it a piece of string that says initial name and just like that we've declared a property for our person class and gave it an initial value with this piece of text now you may notice a property declaration sort of looks like a variable declaration if you remember in lesson two when we did something like let me just erase this line for a second when we did something like this where we created three variables with the third one being the sum of the first two well this almost looks like a property declaration you have the VAR keyword and you have a name for your variable and you know what you're right because even with the variable declaration we can put that Col in there and then put the type of data that that variable is going to hold and for numbers we use int stands for integer so we could have done this and now it looks even more of like a proper declaration okay so then what aren't the difference between variables and properties well it depends where it's declared when it's declared here inside the person class at the top it becomes a property of that class and it's associated with the class while variables are declared and used within methods okay now let's look at how to access a property so I'm going to erase this now I'm going to declare a new variable now I just realized that I just said that variables are declared within class within methods and they normally are but because this is a playground we're kind of it's just a place to test code that rule is kind of out the window here but you'll notice when we write code inside Xcode we will be following those rules where most of the variables that we declare will be inside methods and anything that we declare outside our properties so I'm going to create a variable called first person and I'm going to create a new person object so in order to access that property it follows the same format as a method call I reference the object that I want to call it's property on I hit dot and then now I can either you know right say cheese they call its method or write the property name to call its property and you can see there it's accessed initial name now if I want to change the property I can just go like that and I can assign it a different piece of text now if I access that property again you can see that it's changed and now it says Alice I'm going to create a second person I'm going to create a second variable and create a new person object inside and assign it to that second variable and I'm going to change its name property okay so take a look at this I've created another person object assigned it to the variable second person and I just changed its name to Bob well what would you expect first person their name to be let's find out well the first person's name is still Alice and that illustrates a very important point although each object is created in the likeness of the class there are actually independent instances of each other remember you can use one class to create multiple objects of that class but each of them are independent instances so what you do to one object does not automatically apply to all of the other objects they're independent okay so that's where we're going to end off this lesson this was just an introduction to classes methods and properties there's actually more complicated things that you can do with them but we'll look at that when we need to if this was your first time learning about classes and objects then welcome to the world of objectoriented programming languages you'll probably need to watch this video again or maybe even a couple of times to wrap your head around it Swift along with many other programming languages are objectoriented so in the future when you've mastered Swift and you decide to learn Java for Android apps csharp for Windows Phone apps or perhaps even objectivec you'll have a head start because they use the same concepts that have been presented in this lesson today and on a closing note if you've watched this video a couple of times and you're still a bit confused don't worry about it too much because we're going to be putting this stuff into practice and you'll start to click when we do it in the next lesson we're going to go over a couple more Swift programming language concepts before we actually dive in our card game app
