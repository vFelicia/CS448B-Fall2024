With timestamps:

00:02 - hey coders what's up it's Chris here
00:05 - with episode 13 of how to make a YouTube
00:07 - video app in the previous lesson we had
00:10 - parsed the response of this data request
00:13 - that we made to retrieve all of the
00:15 - video items and off of that response we
00:18 - created all of these video objects and
00:20 - then we put it into an array called self
00:23 - dot video array now the next step is
00:26 - somehow for us to notify the view
00:28 - controller that the data is ready
00:29 - because remember we're doing this a
00:31 - synchronously in the background and if
00:33 - you don't know what that means check out
00:35 - the previous lesson so let's take a look
00:37 - at view controller dot Swift we can see
00:39 - here in the viewdidload method we are
00:41 - creating an instance of the video model
00:43 - and then we're calling the get feed
00:45 - videos method to kick off that request
00:47 - now somehow it's gotta get notified that
00:50 - the data is ready so it can access that
00:52 - video array retrieve that video data and
00:55 - then update the table view with it and
00:57 - the way we're going to do that is using
00:59 - the delegate pattern kind of like this
01:01 - table view right here you see self table
01:04 - view delegate equals self what we're
01:05 - doing here is setting the view
01:07 - controller as the delegate of the table
01:09 - view so when events happen so if events
01:12 - happen with the table view like the user
01:14 - tapping a cell the table view is going
01:16 - to notify the view controller so we're
01:18 - gonna use that same exact pattern to let
01:21 - the video model notify the view
01:22 - controller that the data is ready let's
01:24 - go back to the video model dot Swift and
01:26 - I'll show you how we can do that first
01:28 - we have to create a custom protocol so
01:30 - up here above the class declaration of
01:34 - the video model we're gonna write
01:35 - protocol video model delegate and we're
01:39 - going to open up a set of curly braces
01:42 - and inside we're going to declare a
01:44 - method called
01:45 - data ready okay so just the round
01:50 - brackets like that we're just writing
01:51 - the method signature and we're not
01:53 - implementing it here inside the video
01:56 - model class we're going to declare a
01:58 - delegate property that is of the type
02:01 - video model delegate like that and it's
02:05 - going to be optional because it could be
02:06 - nil now the next step is to assign the
02:09 - view controller to that delegate
02:11 - property we're going to go back to view
02:13 - controller
02:13 - Swift and in the viewdidload you see how
02:16 - we're creating the video model here
02:18 - inside the viewdidload and then we're
02:20 - assigning it into a constant called
02:23 - model that is also declared in the
02:26 - viewdidload method now that's not going
02:28 - to be good because when the view did
02:30 - load method has finished executing we're
02:33 - going to lose that constant and we're
02:34 - also going to lose that object so what
02:37 - we need to do is declare this video
02:39 - model object and instantiate it outside
02:42 - of this method so that it can survive
02:45 - even after the viewdidload method has
02:47 - finished and it can finish downloading
02:49 - those videos and then notify the view
02:51 - controller the way we're going to do
02:53 - that is just to clear it up here so
02:55 - we're going to write far model is a type
02:58 - of video model equals new video model
03:04 - object we can even use let because this
03:06 - isn't going to change so make that a
03:09 - constant so in here instead of declaring
03:12 - this constant and declaring a new video
03:14 - model object we're going to say self dot
03:17 - model dot delegate you can see it's a
03:21 - type of video model delegate write
03:23 - equals self so we're assigning the view
03:27 - controller ask the delegate Xcode isn't
03:29 - going to like that though because it's
03:31 - saying that the view controller doesn't
03:33 - conform to the video model delegate
03:35 - protocol and let's change it so that it
03:39 - does in the view controller class
03:41 - declaration up here we can write video
03:44 - model delegate and this tells Xcode that
03:49 - view controller conforms to that
03:51 - protocol if we go back to video model
03:53 - dot Swift in order to conform to that
03:55 - protocol we must implement the data
03:57 - ready method let's go to view controller
03:59 - Swift and let's do that right here but
04:03 - before we do that let's declare a new
04:05 - section let's call it video model
04:08 - delegate methods and then here we're
04:11 - going to implement that data ready
04:13 - method and right below that let's create
04:16 - another section and call that table view
04:19 - delegate methods okay in the data ready
04:23 - method we're going to access the video
04:26 - object
04:27 - that have been downloaded and then tell
04:33 - the tableview to reload now how do we
04:37 - access those video objects well if we go
04:40 - back to video model swift we assign
04:42 - those video objects the self dot video
04:45 - array so we can access it through that
04:49 - so let's say self thought videos and
04:52 - that is an array we created up here that
04:55 - is equal to self thought model dot video
05:00 - array and now those downloaded video
05:03 - objects have been assigned to the self
05:06 - taught videos property and the table
05:08 - view is going to read the data from that
05:11 - array we just have to tell it to reload
05:14 - by writing self thought table view dot
05:18 - reload data and that's gonna cause the
05:21 - table view to go through these delegate
05:23 - methods again ask for the count and
05:25 - reload each cell and then each cell
05:28 - we're going to grab the video it's
05:31 - asking for set the video title actually
05:34 - some of this has got to change because
05:36 - here let's see we're grabbing the label
05:39 - for the cell and then we're constructing
05:42 - the video thumbnail URL we actually have
05:44 - that as a property now in the previous
05:47 - lesson we had added this video thumbnail
05:48 - URL and instead of constructing it like
05:53 - this we can actually just say that video
05:57 - thumbnail URL string equals videos index
06:04 - path dot Rho dot video thumbnail URL
06:11 - okay and that should be it
06:13 - oh one more thing back in the video
06:16 - model dot Swift let's take a look at
06:19 - what has happened so we declared this
06:22 - delegate property and the view
06:23 - controller has assigned itself as the
06:26 - delegate so when the videos have
06:29 - finished downloading and we have set
06:32 - those objects to self that video array
06:34 - here we have to notify the delegate that
06:39 - the data is ready so first let's check
06:44 - if delegate is not equal to nil delegate
06:51 - dot data ready so only if somebody is
06:55 - assigned to delegate are we going to
06:58 - call that method let's say self-thought
07:00 - delegate like that okay so now we should
07:05 - be able to run it it's going to download
07:07 - the data and then it's going to notify
07:09 - the view controller and the view
07:12 - controller should update the table view
07:14 - in the front all right there we go
07:17 - let's click into one of these cells and
07:20 - it should still behave as it did before
07:26 - yep so we can see the thumbnail we can
07:28 - see the title in the description
07:30 - although the description is quite a bit
07:32 - longer than this text label has room for
07:34 - right now so as a extra feature you
07:37 - should probably make this a scroll view
07:39 - so that you can actually scroll the
07:41 - description but for this demo I think
07:44 - that is fine
07:45 - where we are I just wanted to introduce
07:47 - you guys to the YouTube data API and
07:50 - there's lots more to explore with that
07:53 - YouTube data API we've only kind of
07:55 - scratched the surface by hitting it to
07:57 - grab the playlist videos right now it's
08:01 - only showing five videos and I think
08:03 - that's the default number of results
08:06 - that it returns but I did remember
08:08 - seeing in the documentation that you can
08:11 - specify you know as part of the request
08:13 - you can specify another parameter called
08:16 - Max results and you can set the value of
08:19 - that key to something like 50 or 10 or
08:21 - whatever you want to return so by
08:23 - default I think it's just returning five
08:25 - but the cool thing is that your app now
08:28 - is reaching out hitting the YouTube data
08:31 - API dynamically loading the video
08:34 - playlist and so whenever I upload new
08:38 - videos to my YouTube channel this is
08:40 - going to get updated by itself versus
08:42 - the simple version we did a couple
08:44 - lessons ago which has hard-coded data
08:46 - and those videos are always going to be
08:48 - those videos I hope you guys have
08:50 - enjoyed creating this app with me if you
08:52 - could do me a favor
08:53 - please share the video share the
08:55 - playlist give it a thumbs up and
08:56 - subscribe to the channel I'd really
08:58 - appreciate it and I'll see you guys next
09:00 - time
09:00 - talk to you later bye

Cleaned transcript:

hey coders what's up it's Chris here with episode 13 of how to make a YouTube video app in the previous lesson we had parsed the response of this data request that we made to retrieve all of the video items and off of that response we created all of these video objects and then we put it into an array called self dot video array now the next step is somehow for us to notify the view controller that the data is ready because remember we're doing this a synchronously in the background and if you don't know what that means check out the previous lesson so let's take a look at view controller dot Swift we can see here in the viewdidload method we are creating an instance of the video model and then we're calling the get feed videos method to kick off that request now somehow it's gotta get notified that the data is ready so it can access that video array retrieve that video data and then update the table view with it and the way we're going to do that is using the delegate pattern kind of like this table view right here you see self table view delegate equals self what we're doing here is setting the view controller as the delegate of the table view so when events happen so if events happen with the table view like the user tapping a cell the table view is going to notify the view controller so we're gonna use that same exact pattern to let the video model notify the view controller that the data is ready let's go back to the video model dot Swift and I'll show you how we can do that first we have to create a custom protocol so up here above the class declaration of the video model we're gonna write protocol video model delegate and we're going to open up a set of curly braces and inside we're going to declare a method called data ready okay so just the round brackets like that we're just writing the method signature and we're not implementing it here inside the video model class we're going to declare a delegate property that is of the type video model delegate like that and it's going to be optional because it could be nil now the next step is to assign the view controller to that delegate property we're going to go back to view controller Swift and in the viewdidload you see how we're creating the video model here inside the viewdidload and then we're assigning it into a constant called model that is also declared in the viewdidload method now that's not going to be good because when the view did load method has finished executing we're going to lose that constant and we're also going to lose that object so what we need to do is declare this video model object and instantiate it outside of this method so that it can survive even after the viewdidload method has finished and it can finish downloading those videos and then notify the view controller the way we're going to do that is just to clear it up here so we're going to write far model is a type of video model equals new video model object we can even use let because this isn't going to change so make that a constant so in here instead of declaring this constant and declaring a new video model object we're going to say self dot model dot delegate you can see it's a type of video model delegate write equals self so we're assigning the view controller ask the delegate Xcode isn't going to like that though because it's saying that the view controller doesn't conform to the video model delegate protocol and let's change it so that it does in the view controller class declaration up here we can write video model delegate and this tells Xcode that view controller conforms to that protocol if we go back to video model dot Swift in order to conform to that protocol we must implement the data ready method let's go to view controller Swift and let's do that right here but before we do that let's declare a new section let's call it video model delegate methods and then here we're going to implement that data ready method and right below that let's create another section and call that table view delegate methods okay in the data ready method we're going to access the video object that have been downloaded and then tell the tableview to reload now how do we access those video objects well if we go back to video model swift we assign those video objects the self dot video array so we can access it through that so let's say self thought videos and that is an array we created up here that is equal to self thought model dot video array and now those downloaded video objects have been assigned to the self taught videos property and the table view is going to read the data from that array we just have to tell it to reload by writing self thought table view dot reload data and that's gonna cause the table view to go through these delegate methods again ask for the count and reload each cell and then each cell we're going to grab the video it's asking for set the video title actually some of this has got to change because here let's see we're grabbing the label for the cell and then we're constructing the video thumbnail URL we actually have that as a property now in the previous lesson we had added this video thumbnail URL and instead of constructing it like this we can actually just say that video thumbnail URL string equals videos index path dot Rho dot video thumbnail URL okay and that should be it oh one more thing back in the video model dot Swift let's take a look at what has happened so we declared this delegate property and the view controller has assigned itself as the delegate so when the videos have finished downloading and we have set those objects to self that video array here we have to notify the delegate that the data is ready so first let's check if delegate is not equal to nil delegate dot data ready so only if somebody is assigned to delegate are we going to call that method let's say selfthought delegate like that okay so now we should be able to run it it's going to download the data and then it's going to notify the view controller and the view controller should update the table view in the front all right there we go let's click into one of these cells and it should still behave as it did before yep so we can see the thumbnail we can see the title in the description although the description is quite a bit longer than this text label has room for right now so as a extra feature you should probably make this a scroll view so that you can actually scroll the description but for this demo I think that is fine where we are I just wanted to introduce you guys to the YouTube data API and there's lots more to explore with that YouTube data API we've only kind of scratched the surface by hitting it to grab the playlist videos right now it's only showing five videos and I think that's the default number of results that it returns but I did remember seeing in the documentation that you can specify you know as part of the request you can specify another parameter called Max results and you can set the value of that key to something like 50 or 10 or whatever you want to return so by default I think it's just returning five but the cool thing is that your app now is reaching out hitting the YouTube data API dynamically loading the video playlist and so whenever I upload new videos to my YouTube channel this is going to get updated by itself versus the simple version we did a couple lessons ago which has hardcoded data and those videos are always going to be those videos I hope you guys have enjoyed creating this app with me if you could do me a favor please share the video share the playlist give it a thumbs up and subscribe to the channel I'd really appreciate it and I'll see you guys next time talk to you later bye
