With timestamps:

00:00 - hello Kaku welcome to the core data
00:02 - series in this lesson we're going to go
00:04 - through what core data is its benefits
00:06 - and how you're going to use it with
00:08 - Xcode first of all what is it core data
00:11 - is Apple's local object graph
00:13 - persistence framework now before I scare
00:16 - you away in simple terms it's a way for
00:18 - you to store data on your device locally
00:21 - and then retrieve it later for use the
00:23 - data stays locally on the device so it's
00:25 - not a solution for sharing data with
00:27 - other users and it's not a solution for
00:29 - syncing data across multiple devices
00:31 - although some of that can be done when
00:34 - you combine core data with cloud kit
00:36 - next why should we even use core data
00:38 - well assuming you need to store data in
00:40 - your app some benefits of using core
00:42 - data include number one it's a first
00:44 - party apple framework so it placed
00:46 - nicely and has a tighter integration
00:48 - with other apple api's and frameworks
00:50 - number two being a first party framework
00:53 - means that apple is going to make sure
00:55 - that any new technology it releases will
00:58 - work with it at least I'd like to think
01:00 - that Apple would make a bigger effort to
01:01 - make sure that core data plays nicely
01:03 - with anything that they release number
01:06 - three you don't have to install any
01:07 - third-party SDKs which means you don't
01:09 - have to work with cocoa pods or trying
01:11 - to keep third-party code libraries up to
01:13 - date all right now for some drawbacks of
01:17 - using core data number one it's not a
01:19 - remote database solution although
01:21 - syncing across devices should be able to
01:23 - be done with cloud kit to be honest I
01:25 - haven't looked into this very much
01:27 - myself yet
01:28 - number two the classes and methods to
01:30 - work with core data may be confusing at
01:33 - first so there's a little bit of a
01:34 - learning curve but I hope in this video
01:36 - series I can simplify that for you
01:38 - number three you have to retrain your
01:41 - brain to think of core data as an object
01:42 - graph persistence framework object graph
01:46 - persistence framework let's take a look
01:49 - at what that means it all has to do with
01:51 - how you interact with core data you see
01:54 - with traditional databases you
01:56 - explicitly insert create update and
01:58 - delete data from the database now even
02:01 - though under the hood core data is using
02:04 - an SQLite database you don't have to
02:06 - explicitly tell core data to insert
02:08 - create update or delete you just create
02:11 - and work with objects in your app
02:13 - like normal and behind-the-scenes core
02:14 - data we'll manage the data persistence
02:16 - for you let's take a look at a diagram
02:19 - to see how this works okay so let's say
02:22 - you have two classes family and person
02:24 - the person class contains some
02:26 - properties and the family class has a
02:28 - property storing the person objects for
02:31 - that family you create a family object
02:33 - in several person objects and then you
02:36 - relate those person objects to the
02:38 - family object now you want to store it
02:40 - in core data how do you do that well
02:43 - there are a few core data components
02:45 - that are needed one is the persistent
02:47 - container you can think of this as a
02:49 - representation of the core data store or
02:52 - database however your objects don't
02:55 - interact with the persistent container
02:57 - directly there's a layer on top of the
03:00 - persistent container called the managed
03:02 - object context think of this as sort of
03:05 - a Data Manager layer your objects will
03:08 - go through the managed object context to
03:11 - be stored or retrieved from the
03:13 - persistent store now these objects in
03:16 - memory along with how they relate to
03:18 - each other is called an object graph
03:20 - when you store the objects into core
03:23 - data all of the data in the properties
03:26 - along with the relationships are
03:28 - preserved in other words the object
03:30 - graph when you retrieve them from core
03:32 - data back into memory you can get them
03:34 - back in the same state they were in
03:35 - before so that's why they call core data
03:38 - an object graph persistence framework
03:41 - now to complete our understanding of how
03:43 - core data works let's revisit our
03:45 - diagram in previous lessons I've shown
03:48 - you how to work with json and decode
03:50 - them into useable objects in our app
03:52 - this process of changing the data into a
03:55 - different format and back is known as
03:57 - encoding and decoding or serializing and
04:00 - deserializing while core data needs to
04:02 - do the same thing here it serializes the
04:05 - object into a format that can be stored
04:07 - in the underlying SQLite database and
04:09 - then it'll deserialize it back into the
04:12 - objects of memory the code or
04:14 - functionality to do that serializing and
04:17 - deserializing process is with a class
04:19 - called ns-managed object so if you want
04:23 - your class to be able to be captured in
04:25 - core data
04:26 - the subclass ns-managed object that
04:28 - gives objects of your custom class the
04:31 - ability to be stored with core data okay
04:34 - so now your objects can be serialized
04:35 - and stored with core data however when
04:38 - you want to bring that object back from
04:40 - core data how does it know what format
04:42 - to deserialize that data back into in
04:45 - other words if you're trying to bring
04:47 - your person back how does it know about
04:49 - your person class and what properties
04:51 - your person class contains well here's
04:54 - the final piece of the core data puzzle
04:56 - in this example we use the person class
04:58 - that subclasses and s managed object
05:01 - well you don't actually create and write
05:03 - this person class yourself instead
05:05 - there's a visual editor where you have
05:07 - to define the class in the core data
05:09 - model they call the class an entity in
05:11 - the properties of your class are called
05:13 - attributes of that entity then after you
05:17 - define the entity and attributes in
05:19 - other words your class and its
05:20 - properties you generate the Swift
05:23 - classes from this core data model file
05:25 - it's just the command you run from an
05:28 - xcode menu and they'll generate the
05:30 - class files for what you've defined in
05:32 - the core data model the generated class
05:34 - will automatically be a subclass of NS
05:37 - managed object so that core data can
05:40 - serialize and deserialize it then you
05:43 - use that generator to class like you
05:44 - would any other class and core data can
05:47 - now store objects of that class and
05:49 - bring them back when needed so let's do
05:51 - a quick recap of how we're going to work
05:53 - with core data you define your entities
05:55 - and attributes in the core data model
05:57 - then you generate your classes from the
06:00 - core data model then you get a reference
06:02 - to the core data persistent container
06:04 - from the persistent container you get a
06:07 - managed object context and through that
06:10 - managed object context you can create
06:12 - objects and store them in core data for
06:15 - retrieval for later use now core data
06:18 - has a stigma of being hard to understand
06:20 - and use I hope I've missed a fight it at
06:23 - least a little bit for you in this video
06:24 - if you are able to follow this video and
06:27 - understand how core data works please
06:29 - confirm with me by leaving a quick
06:31 - comment below lastly if you enjoyed this
06:33 - video please give it a thumbs up it lets
06:35 - YouTube know that this is a great video
06:37 - and it will help the video get more
06:38 - Bossier so thank you for that in the
06:41 - next lesson we'll do a real example of
06:43 - using core data in Xcode alright I'll
06:45 - see you there

Cleaned transcript:

hello Kaku welcome to the core data series in this lesson we're going to go through what core data is its benefits and how you're going to use it with Xcode first of all what is it core data is Apple's local object graph persistence framework now before I scare you away in simple terms it's a way for you to store data on your device locally and then retrieve it later for use the data stays locally on the device so it's not a solution for sharing data with other users and it's not a solution for syncing data across multiple devices although some of that can be done when you combine core data with cloud kit next why should we even use core data well assuming you need to store data in your app some benefits of using core data include number one it's a first party apple framework so it placed nicely and has a tighter integration with other apple api's and frameworks number two being a first party framework means that apple is going to make sure that any new technology it releases will work with it at least I'd like to think that Apple would make a bigger effort to make sure that core data plays nicely with anything that they release number three you don't have to install any thirdparty SDKs which means you don't have to work with cocoa pods or trying to keep thirdparty code libraries up to date all right now for some drawbacks of using core data number one it's not a remote database solution although syncing across devices should be able to be done with cloud kit to be honest I haven't looked into this very much myself yet number two the classes and methods to work with core data may be confusing at first so there's a little bit of a learning curve but I hope in this video series I can simplify that for you number three you have to retrain your brain to think of core data as an object graph persistence framework object graph persistence framework let's take a look at what that means it all has to do with how you interact with core data you see with traditional databases you explicitly insert create update and delete data from the database now even though under the hood core data is using an SQLite database you don't have to explicitly tell core data to insert create update or delete you just create and work with objects in your app like normal and behindthescenes core data we'll manage the data persistence for you let's take a look at a diagram to see how this works okay so let's say you have two classes family and person the person class contains some properties and the family class has a property storing the person objects for that family you create a family object in several person objects and then you relate those person objects to the family object now you want to store it in core data how do you do that well there are a few core data components that are needed one is the persistent container you can think of this as a representation of the core data store or database however your objects don't interact with the persistent container directly there's a layer on top of the persistent container called the managed object context think of this as sort of a Data Manager layer your objects will go through the managed object context to be stored or retrieved from the persistent store now these objects in memory along with how they relate to each other is called an object graph when you store the objects into core data all of the data in the properties along with the relationships are preserved in other words the object graph when you retrieve them from core data back into memory you can get them back in the same state they were in before so that's why they call core data an object graph persistence framework now to complete our understanding of how core data works let's revisit our diagram in previous lessons I've shown you how to work with json and decode them into useable objects in our app this process of changing the data into a different format and back is known as encoding and decoding or serializing and deserializing while core data needs to do the same thing here it serializes the object into a format that can be stored in the underlying SQLite database and then it'll deserialize it back into the objects of memory the code or functionality to do that serializing and deserializing process is with a class called nsmanaged object so if you want your class to be able to be captured in core data the subclass nsmanaged object that gives objects of your custom class the ability to be stored with core data okay so now your objects can be serialized and stored with core data however when you want to bring that object back from core data how does it know what format to deserialize that data back into in other words if you're trying to bring your person back how does it know about your person class and what properties your person class contains well here's the final piece of the core data puzzle in this example we use the person class that subclasses and s managed object well you don't actually create and write this person class yourself instead there's a visual editor where you have to define the class in the core data model they call the class an entity in the properties of your class are called attributes of that entity then after you define the entity and attributes in other words your class and its properties you generate the Swift classes from this core data model file it's just the command you run from an xcode menu and they'll generate the class files for what you've defined in the core data model the generated class will automatically be a subclass of NS managed object so that core data can serialize and deserialize it then you use that generator to class like you would any other class and core data can now store objects of that class and bring them back when needed so let's do a quick recap of how we're going to work with core data you define your entities and attributes in the core data model then you generate your classes from the core data model then you get a reference to the core data persistent container from the persistent container you get a managed object context and through that managed object context you can create objects and store them in core data for retrieval for later use now core data has a stigma of being hard to understand and use I hope I've missed a fight it at least a little bit for you in this video if you are able to follow this video and understand how core data works please confirm with me by leaving a quick comment below lastly if you enjoyed this video please give it a thumbs up it lets YouTube know that this is a great video and it will help the video get more Bossier so thank you for that in the next lesson we'll do a real example of using core data in Xcode alright I'll see you there
