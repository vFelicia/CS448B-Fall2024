With timestamps:

00:00 - hello everyone i'm frances
00:03 - and today i will be showing you how to
00:05 - perform web scraping with swift ui
00:09 - now what is web scraping well it
00:11 - basically means that extracting data
00:14 - from a website this is important because
00:17 - it allows us to gather data from certain
00:19 - sites even if they don't have an api to
00:22 - interact with
00:23 - thankfully there's a third party library
00:26 - called swift soup and it is a powerful
00:28 - tool that will help us perform web
00:31 - scraping using swift
00:34 - so without further ado let's get started
00:38 - okay so let's start off with creating
00:40 - our basic project
00:42 - so let's select ios and app
00:48 - next
00:49 - let's try web scraping
00:53 - select the theme which is your apple
00:55 - account and organization identifier
00:59 - you can change this if you want
01:01 - interfaces with ui languages with and
01:05 - next
01:09 - okay so we created our first basic
01:12 - project
01:13 - we can now add swift soup to it
01:16 - so we will do that using swift package
01:18 - manager which is just file
01:22 - and add packages
01:25 - now just input your
01:27 - package url or the github page here
01:30 - usually
01:32 - and up next major version we should it
01:35 - should be 2 since
01:37 - 2f5 is version two point something so
01:40 - just do that add package
01:44 - add the package
01:46 - to our target which is web scraping
01:49 - swift swift ui project
01:53 - add that
01:55 - and as you can see here and below in our
01:58 - project dependencies
02:00 - we have swiftsuit
02:02 - 2.3.4 installed
02:05 - usually there's a
02:06 - readme and you'll be able to
02:11 - to have a
02:12 - short glimpse of
02:15 - what this
02:17 - what this third party library has to
02:19 - offer and let's start our tutorial
02:23 - if we look at the first entry of the
02:25 - documentation there's a
02:27 - sweep soup test site here
02:30 - and
02:30 - basically this is a visual
02:33 - representation of how
02:35 - the third party library works and
02:39 - and i'll show you so
02:42 - here we have our basic html
02:46 - and
02:47 - let's just
02:49 - parse it for b
02:52 - so we will scrape all the p
02:56 - or paragraphs
02:58 - from this html
03:00 - and as you can see here at the result
03:03 - took this paragraph called this is uh
03:07 - with the data this is a swift soup test
03:10 - page
03:11 - of course we can get
03:13 - the title just click title
03:17 - parse
03:19 - and as you can see
03:21 - we got triswip soup as the title here
03:26 - so that's basically how web scraping
03:28 - works and how easy it is
03:32 - to do when using this third-party
03:35 - library called swipsu
03:38 - so let's actually try doing it on a
03:41 - website
03:43 - okay so to start off with let's
03:46 - just try making a button so we can
03:49 - work with i our a
03:51 - our third party library basically
03:54 - so just
03:56 - change this to button
04:01 - maybe name the button like
04:07 - run
04:08 - swip suit okay
04:12 - add an action
04:16 - let's just say
04:19 - rest
04:23 - should be good and let's try
04:25 - compiling
04:29 - this if our button works
04:33 - and click it
04:35 - as you can see it's pressed so
04:39 - let's start using swip soup now
04:42 - okay so let's start by importing our
04:45 - third party library
04:47 - which is
04:48 - called sweep soup right here so sweep
04:52 - soup
04:55 - and
04:57 - let me just
04:58 - paste my
05:00 - sample html here
05:03 - okay
05:06 - now that we have our html we
05:08 - need we need swept soup to
05:12 - parse it so
05:14 - we will know if it's a valid html or not
05:17 - so let's
05:18 - first
05:23 - let's do
05:25 - let's
05:26 - do a do patch basically
05:31 - so let's do let document
05:40 - to
05:41 - a document
05:43 - let's go to try
05:49 - sweep soup
05:51 - oops sorry
05:53 - rip soup dot bars
05:57 - and html
06:04 - if there's no problem that will run
06:09 - of course let's do a catch
06:13 - so we won't crash our app
06:17 - let's just print error
06:30 - and that should be good so
06:37 - if it's
06:39 - after trying let's try and just
06:44 - print the document
06:51 - let's try running that
06:55 - oh sorry should be documented
07:06 - it should be actually return
07:10 - try
07:11 - okay
07:14 - of course because it's inside a do we
07:16 - need to
07:18 - try it first
07:23 - let's run that
07:27 - so as you can see it
07:30 - we took the text of the document from
07:34 - this
07:36 - sweep soup
07:38 - i mean from this html
07:42 - html
07:44 - string
07:47 - and
07:50 - we can
07:51 - of course check
07:53 - document here again
07:56 - on what's available so
07:59 - there's head
08:02 - there's outer html
08:06 - there's the text of course the title
08:10 - so basically document here is like
08:15 - it contains what
08:19 - uh
08:19 - it converted basically the this
08:22 - this whole html
08:25 - converted it and
08:28 - just
08:29 - it now it can now give us just the text
08:31 - if you want
08:33 - we can get the title from it you can get
08:37 - you know the
08:39 - body from it
08:41 - you can see here
08:43 - or the head which is usually just the
08:45 - title or some other menus
08:50 - and
08:52 - basically that's a that's the basic
08:54 - usage of parsing on html and strip soup
09:00 - so let's just
09:02 - print out html
09:06 - let's see how that goes
09:11 - sorry
09:12 - let's run it
09:23 - okay as you can see the outer html this
09:26 - is actually what
09:28 - we
09:30 - fed the parser
09:33 - so you can look at the
09:35 - html in its raw form
09:37 - so that's the outer html
09:40 - of course we can change that into title
09:43 - and it will print out
09:45 - the title
09:47 - of the
09:48 - html cnc first parse
09:53 - which is this one
09:55 - or we can do the body of course
10:00 - as you can see the
10:02 - what it what's what's returned is an
10:05 - element
10:06 - because
10:08 - it has a paragraph inside here
10:12 - so
10:13 - that's
10:14 - basically that's the document body
10:17 - and of course at as
10:19 - as the example earlier
10:22 - the text
10:23 - it's just a
10:25 - text version of
10:27 - everything that's inside
10:29 - the html or that's readable basically
10:32 - okay so let's do some further testing or
10:35 - further usage of swift soup
10:38 - so let's
10:40 - let's just add uh
10:43 - another element here inside our body
10:46 - let's add another paragraph
10:50 - which now has an
10:53 - a or a link
10:55 - and it's
10:58 - parsed there let's print the body
11:01 - let's see what happens
11:05 - okay as you can see there's now two
11:07 - elements here in our body
11:11 - and
11:12 - we have two paragraphs
11:16 - and
11:17 - there's also an a
11:20 - or a link
11:21 - so
11:24 - what if we want to
11:25 - [Music]
11:27 - select right the
11:29 - we
11:30 - we just want the link
11:32 - so
11:33 - [Music]
11:36 - like for like here for example in in
11:38 - their sample
11:40 - let me just open the site
11:44 - the test site
11:49 - so if you remember in this test site we
11:51 - can there's a css selector
11:53 - another p
11:55 - which results in
11:58 - the return of all the elements of that
12:01 - selector
12:03 - so
12:04 - to do that here
12:06 - we just actually need to do
12:10 - just
12:13 - let's do
12:16 - let's do a left
12:18 - let's say let's get the link
12:21 - which is an element
12:25 - and let's try
12:28 - try
12:30 - the document
12:32 - and do a dot select
12:36 - so we're selecting for a which is for
12:38 - links
12:48 - and let's do the first one
12:53 - document select
12:55 - oh you need to
12:59 - unwrap it
13:02 - there we go
13:05 - and let's try printing that shall we
13:09 - so let's print the link
13:14 - as you can see now it
13:16 - it
13:17 - it's it just selected here our first
13:22 - instance of the
13:24 - open a
13:25 - of a link
13:27 - so now what if you want to
13:29 - get the
13:30 - like the attribute here let's say the
13:34 - example.com or maybe just the text of
13:37 - the link right
13:40 - so what you do
13:46 - is
13:48 - using this link
13:50 - element that we have let's do left
13:54 - let's say let's get the
13:57 - text of the link so let's just
14:00 - just do link text
14:03 - which is a string basically
14:06 - so let's try
14:08 - to get the link
14:10 - element
14:12 - text
14:15 - so this
14:17 - actually gets this the example
14:23 - let's print the link text
14:28 - you can see example printed just the
14:31 - example
14:32 - the text
14:33 - [Music]
14:35 - so if we want an attribute it's actually
14:38 - just
14:40 - let's just do atr yes
14:44 - should be good
14:46 - it's actually link
14:48 - dot
14:51 - attribute
14:52 - and the key of the attribute which is
14:55 - an href
15:00 - and
15:01 - that's basically it
15:03 - i'm sorry
15:05 - let's just print the link attribute
15:12 - let's run
15:13 - and as you can see it
15:15 - took the value of the attribute here
15:18 - of course we can
15:20 - it's possible to have different
15:22 - attributes right so
15:26 - let's just do a dummy attribute
15:28 - just call it like that
15:33 - do a dummy value you know
15:35 - of course there's a there's a lot of
15:37 - other attributes
15:38 - it's just it's just i'm just doing this
15:40 - for an example
15:43 - so
15:46 - let's just print that
15:52 - and run and of course it took the dummy
15:56 - value
15:57 - from our dummy attribute
16:04 - so
16:05 - that's basically it that's how you
16:07 - select
16:11 - select from
16:13 - select an element from the document
16:16 - then you can manipulate that element to
16:19 - get
16:20 - attributes values from attributes or get
16:23 - the text even get the outer html of this
16:27 - this particular link or a particular
16:31 - element
16:33 - you can also get
16:35 - inner htmls so
16:38 - let's say you
16:40 - so here here the outer html is this one
16:45 - and
16:47 - the inner html basically is
16:51 - something like
16:54 - like here
16:58 - the example that
17:00 - because it's inside
17:03 - the the link
17:05 - so this is the inner html
17:07 - because we use the bold attribute right
17:10 - so that's it
17:11 - okay so let's do another example
17:15 - so
17:15 - [Music]
17:17 - there's actually
17:18 - what you call a
17:20 - link cleaner
17:22 - and swift sweep soup
17:25 - so
17:26 - let's just
17:29 - paste this
17:31 - html i prepared
17:34 - and as you can see it's just a paragraph
17:39 - with oh sorry forgot let
17:43 - on save html
17:47 - as you can see it's just a paragraph
17:49 - with a link
17:51 - but the link
17:52 - has an on click event called still
17:54 - cookies so it's a bit suspect right so
17:58 - why does your link
18:01 - have an on click event
18:04 - so
18:05 - [Music]
18:07 - we can try cleaning this
18:10 - this and save
18:11 - html here
18:14 - by
18:15 - basically let's do
18:19 - just remove this for now
18:23 - and just do
18:25 - let
18:26 - save html
18:29 - let's go to
18:31 - try
18:33 - sweep soup
18:37 - dot clean
18:39 - put the body which is the unsafe html
18:44 - and a white list
18:46 - so there's a few options the basic basic
18:49 - with images
18:51 - none
18:52 - on all html strip relaxed
18:56 - simple text let's just do basic for now
19:02 - unwrap that
19:06 - and that's
19:09 - it's basically let's print let's see
19:11 - what happens
19:14 - let's run it
19:18 - as you can see it
19:20 - changed absolutely it cleaned
19:23 - the on click event
19:26 - change it to something else
19:29 - so
19:31 - the link or the html is now much safer
19:35 - so it might be a good idea to
19:38 - of course when you're running
19:40 - an html
19:43 - um it might be a good idea to first run
19:46 - it
19:47 - in the clean
19:48 - sweep soup and then
19:51 - before doing the parsing
19:54 - that's basically it that's the point of
19:56 - this clean feature
19:58 - to make it
20:00 - safer
20:01 - to work with this
20:02 - the htmls
20:05 - of course since we all we already have
20:07 - like
20:08 - you know getter
20:10 - attributes i
20:11 - get their functions from sweet soup
20:14 - there's also actually manipulation or
20:18 - setter attributes
20:20 - so we can actually
20:22 - set some attributes like let's say here
20:26 - let's do let's just do try document
20:30 - let's say let's select all the
20:34 - all the a's
20:35 - right all the links
20:38 - and
20:40 - we want to change the
20:41 - attribute
20:43 - you can see there's two
20:45 - this one is the getter this app this one
20:47 - is actually the setter
20:52 - so let's do
20:54 - dummy
20:56 - and let's change the value
20:59 - like
21:00 - new value let's do that
21:05 - let's try printing the document after
21:07 - that
21:10 - let's run it
21:12 - and as you can see
21:15 - when we printed our document
21:18 - here in the
21:19 - link
21:20 - we will see that the dummy
21:23 - is now
21:24 - new value
21:26 - of course this applies to all a elements
21:29 - so if you do a
21:32 - all
21:32 - paragraph elements
21:34 - like let's say
21:35 - [Music]
21:37 - let's call it new dummy
21:41 - and maybe do another value
21:47 - let's run that
21:49 - and as you can see in our
21:51 - paragraph
21:52 - there's now an attribute called new
21:54 - dummy with another value
21:57 - here
21:59 - you can also actually add classes so add
22:02 - this one add class name
22:05 - let's say maybe you want to add
22:09 - a rounded corner you know
22:13 - same as the attribute of course it will
22:15 - add a new class
22:19 - as you can see here it added a class
22:21 - rounded corner
22:25 - and that's basically it we
22:27 - that's the getters and of course setters
22:31 - of swift soup
22:33 - so this ends our session with sweep soup
22:37 - hopefully i was able to show you how
22:39 - easy it was to do some web scraping
22:42 - using third-party solutions or libraries
22:46 - what could have been a quite complicated
22:48 - task of like getting and
22:51 - being able to manipulate this html
22:54 - elements data
22:57 - has now been simplified
22:59 - and it's all thanks to the power of
23:01 - third-party libraries like soup
23:04 - now if you want to dive deeper into this
23:06 - i suggest checking out the documentation
23:09 - there are still lots of functionalities
23:11 - but that we didn't cover
23:13 - like
23:15 - this topic about
23:17 - dom like functionalities you know get
23:19 - element by id by tag by class
23:24 - or
23:25 - you know being able to
23:28 - manipulate html and text
23:32 - append element append text
23:36 - so you can also do that and just
23:39 - check the documentation there's a lot of
23:42 - stuff here
23:43 - well documented so to all contributors
23:46 - of swift soup of this library
23:50 - thank you
23:52 - now if you have any specific questions
23:54 - about this
23:56 - definitely post it on our code group
23:58 - forum and someone from the team will
24:00 - jump in to help
24:02 - remember to also use the ideas board to
24:04 - submit new topics or vote on the ones
24:07 - you'd like to see next
24:09 - again this is francis and thanks for
24:11 - watching i'll see you next time

Cleaned transcript:

hello everyone i'm frances and today i will be showing you how to perform web scraping with swift ui now what is web scraping well it basically means that extracting data from a website this is important because it allows us to gather data from certain sites even if they don't have an api to interact with thankfully there's a third party library called swift soup and it is a powerful tool that will help us perform web scraping using swift so without further ado let's get started okay so let's start off with creating our basic project so let's select ios and app next let's try web scraping select the theme which is your apple account and organization identifier you can change this if you want interfaces with ui languages with and next okay so we created our first basic project we can now add swift soup to it so we will do that using swift package manager which is just file and add packages now just input your package url or the github page here usually and up next major version we should it should be 2 since 2f5 is version two point something so just do that add package add the package to our target which is web scraping swift swift ui project add that and as you can see here and below in our project dependencies we have swiftsuit 2.3.4 installed usually there's a readme and you'll be able to to have a short glimpse of what this what this third party library has to offer and let's start our tutorial if we look at the first entry of the documentation there's a sweep soup test site here and basically this is a visual representation of how the third party library works and and i'll show you so here we have our basic html and let's just parse it for b so we will scrape all the p or paragraphs from this html and as you can see here at the result took this paragraph called this is uh with the data this is a swift soup test page of course we can get the title just click title parse and as you can see we got triswip soup as the title here so that's basically how web scraping works and how easy it is to do when using this thirdparty library called swipsu so let's actually try doing it on a website okay so to start off with let's just try making a button so we can work with i our a our third party library basically so just change this to button maybe name the button like run swip suit okay add an action let's just say rest should be good and let's try compiling this if our button works and click it as you can see it's pressed so let's start using swip soup now okay so let's start by importing our third party library which is called sweep soup right here so sweep soup and let me just paste my sample html here okay now that we have our html we need we need swept soup to parse it so we will know if it's a valid html or not so let's first let's do let's do a do patch basically so let's do let document to a document let's go to try sweep soup oops sorry rip soup dot bars and html if there's no problem that will run of course let's do a catch so we won't crash our app let's just print error and that should be good so if it's after trying let's try and just print the document let's try running that oh sorry should be documented it should be actually return try okay of course because it's inside a do we need to try it first let's run that so as you can see it we took the text of the document from this sweep soup i mean from this html html string and we can of course check document here again on what's available so there's head there's outer html there's the text of course the title so basically document here is like it contains what uh it converted basically the this this whole html converted it and just it now it can now give us just the text if you want we can get the title from it you can get you know the body from it you can see here or the head which is usually just the title or some other menus and basically that's a that's the basic usage of parsing on html and strip soup so let's just print out html let's see how that goes sorry let's run it okay as you can see the outer html this is actually what we fed the parser so you can look at the html in its raw form so that's the outer html of course we can change that into title and it will print out the title of the html cnc first parse which is this one or we can do the body of course as you can see the what it what's what's returned is an element because it has a paragraph inside here so that's basically that's the document body and of course at as as the example earlier the text it's just a text version of everything that's inside the html or that's readable basically okay so let's do some further testing or further usage of swift soup so let's let's just add uh another element here inside our body let's add another paragraph which now has an a or a link and it's parsed there let's print the body let's see what happens okay as you can see there's now two elements here in our body and we have two paragraphs and there's also an a or a link so what if we want to select right the we we just want the link so like for like here for example in in their sample let me just open the site the test site so if you remember in this test site we can there's a css selector another p which results in the return of all the elements of that selector so to do that here we just actually need to do just let's do let's do a left let's say let's get the link which is an element and let's try try the document and do a dot select so we're selecting for a which is for links and let's do the first one document select oh you need to unwrap it there we go and let's try printing that shall we so let's print the link as you can see now it it it's it just selected here our first instance of the open a of a link so now what if you want to get the like the attribute here let's say the example.com or maybe just the text of the link right so what you do is using this link element that we have let's do left let's say let's get the text of the link so let's just just do link text which is a string basically so let's try to get the link element text so this actually gets this the example let's print the link text you can see example printed just the example the text so if we want an attribute it's actually just let's just do atr yes should be good it's actually link dot attribute and the key of the attribute which is an href and that's basically it i'm sorry let's just print the link attribute let's run and as you can see it took the value of the attribute here of course we can it's possible to have different attributes right so let's just do a dummy attribute just call it like that do a dummy value you know of course there's a there's a lot of other attributes it's just it's just i'm just doing this for an example so let's just print that and run and of course it took the dummy value from our dummy attribute so that's basically it that's how you select select from select an element from the document then you can manipulate that element to get attributes values from attributes or get the text even get the outer html of this this particular link or a particular element you can also get inner htmls so let's say you so here here the outer html is this one and the inner html basically is something like like here the example that because it's inside the the link so this is the inner html because we use the bold attribute right so that's it okay so let's do another example so there's actually what you call a link cleaner and swift sweep soup so let's just paste this html i prepared and as you can see it's just a paragraph with oh sorry forgot let on save html as you can see it's just a paragraph with a link but the link has an on click event called still cookies so it's a bit suspect right so why does your link have an on click event so we can try cleaning this this and save html here by basically let's do just remove this for now and just do let save html let's go to try sweep soup dot clean put the body which is the unsafe html and a white list so there's a few options the basic basic with images none on all html strip relaxed simple text let's just do basic for now unwrap that and that's it's basically let's print let's see what happens let's run it as you can see it changed absolutely it cleaned the on click event change it to something else so the link or the html is now much safer so it might be a good idea to of course when you're running an html um it might be a good idea to first run it in the clean sweep soup and then before doing the parsing that's basically it that's the point of this clean feature to make it safer to work with this the htmls of course since we all we already have like you know getter attributes i get their functions from sweet soup there's also actually manipulation or setter attributes so we can actually set some attributes like let's say here let's do let's just do try document let's say let's select all the all the a's right all the links and we want to change the attribute you can see there's two this one is the getter this app this one is actually the setter so let's do dummy and let's change the value like new value let's do that let's try printing the document after that let's run it and as you can see when we printed our document here in the link we will see that the dummy is now new value of course this applies to all a elements so if you do a all paragraph elements like let's say let's call it new dummy and maybe do another value let's run that and as you can see in our paragraph there's now an attribute called new dummy with another value here you can also actually add classes so add this one add class name let's say maybe you want to add a rounded corner you know same as the attribute of course it will add a new class as you can see here it added a class rounded corner and that's basically it we that's the getters and of course setters of swift soup so this ends our session with sweep soup hopefully i was able to show you how easy it was to do some web scraping using thirdparty solutions or libraries what could have been a quite complicated task of like getting and being able to manipulate this html elements data has now been simplified and it's all thanks to the power of thirdparty libraries like soup now if you want to dive deeper into this i suggest checking out the documentation there are still lots of functionalities but that we didn't cover like this topic about dom like functionalities you know get element by id by tag by class or you know being able to manipulate html and text append element append text so you can also do that and just check the documentation there's a lot of stuff here well documented so to all contributors of swift soup of this library thank you now if you have any specific questions about this definitely post it on our code group forum and someone from the team will jump in to help remember to also use the ideas board to submit new topics or vote on the ones you'd like to see next again this is francis and thanks for watching i'll see you next time
