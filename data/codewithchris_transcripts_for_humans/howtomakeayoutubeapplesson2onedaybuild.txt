With timestamps:

00:00 - hey code crew in this lesson we're going
00:02 - to set up github and bit rise in
00:03 - preparation to build our YouTube app now
00:06 - both of these tools you can use for free
00:08 - but first of all why are we even using
00:10 - these tools there are two reasons
00:11 - actually number one these types of tools
00:14 - are used in team environments at the
00:15 - workplace so if you want to get an iOS
00:17 - developer job then it's good to know
00:19 - number two even as a solo developer
00:22 - source control helps you manage your
00:24 - code and continuous integration helps
00:26 - you automate some routine tasks
00:28 - therefore freeing up your time which is
00:30 - even more important as a solo okay so
00:33 - here's what we're out to accomplish
00:35 - first we're going to create a remote git
00:37 - repository on github to store our code
00:39 - then on our own computer we're going to
00:42 - create our Xcode project we're going to
00:44 - create a local git repository and then
00:47 - point it to the remote one on github
00:49 - this will allow us to push our newly
00:51 - created Xcode project to github as well
00:53 - as any future code changes next we're
00:56 - going to point bit rise to our github
00:58 - repo so that each time we push code from
01:00 - our local computer to github bit rise is
01:03 - going to get notified it's gonna grab
01:05 - the code from github and run it to make
01:07 - sure nothing's broken and in the future
01:09 - we can also add additional steps for bit
01:11 - rise to automate such as running tests
01:13 - notifying team members making App Store
01:15 - built and so on everything in this
01:17 - workflow is free which is a huge plus in
01:20 - my books now first we're gonna set up
01:22 - our github repository if you don't have
01:24 - an account just go to github calm and
01:26 - create a free one you're gonna be able
01:27 - to create private and public
01:29 - repositories unlimited ones so why not I
01:33 - also want to point out that we have a
01:35 - github tutorial on the site and I'll
01:38 - link to this below which so it's kind of
01:39 - go through a lot of the steps we're
01:41 - going to go through today so I just
01:42 - wanted you to be aware that we have this
01:44 - lastly this page is very useful if this
01:47 - is the first time you're setting up
01:48 - github again I'll link to it below it's
01:50 - going to tell you how to install git if
01:53 - you don't have it on your local machine
01:54 - how to add your username and password if
01:57 - you're going to be connecting over HTTP
01:59 - which is what we're gonna be doing today
02:01 - and also how to connect over SSH
02:04 - alright so if you either have an account
02:06 - or you just signed up for one you'll see
02:08 - something like this you can go into the
02:10 - plus symbol right here and go new
02:12 - repository we're gonna set
02:13 - a new code repo for our YouTube one day
02:17 - build and you can name this anything
02:19 - you'd like I'm gonna make it public so
02:21 - that anyone can see the code but I
02:24 - choose who can submit code to the repo
02:27 - so that's important for your own
02:30 - personal projects you can obviously make
02:31 - it private I'm also going to initialize
02:34 - that this repository with that readme
02:36 - and I'm gonna add a git ignore file if
02:39 - you're not sure what this is it's
02:41 - basically a file that dictates which
02:43 - files will get ignored and it won't
02:46 - track changes on these files now why is
02:48 - that important because with different
02:50 - languages sometimes there are personal
02:53 - configuration files that don't really
02:54 - belong in a team source code repository
02:57 - so if we're talking we're talking about
03:00 - Swift for example Xcode will have a lot
03:03 - of user settings personal user settings
03:05 - to see which panels you had open you
03:10 - know what state Xcode was in when you
03:12 - last launched it so it can launch it in
03:14 - the same state next time those are
03:16 - settings don't belong in on github so
03:20 - that's why I adding a get ignore for
03:22 - Swift it's not gonna upload those sorts
03:25 - of files and it's going to completely
03:26 - ignore them let's create the repository
03:29 - now alright so we've got our brand new
03:32 - repo so the next thing we're going to do
03:35 - if you remember that diagram we're going
03:36 - to create the Xcode project so let's go
03:39 - ahead and launch Xcode here I'm going to
03:43 - create a brand new Xcode project I'm
03:47 - gonna choose single View application and
03:49 - I'm gonna call this the same thing I
03:51 - named my repository so YouTube - when
03:55 - they build these settings should be
03:56 - familiar if you've been through the 29
03:58 - day beginner lessons language a swift
04:01 - user interfaces storyboard and I'm gonna
04:04 - leave all this stuff unchecked down
04:05 - there so click on next I'm gonna save
04:08 - this on my desktop and source control
04:11 - I'm gonna leave it unchecked because
04:12 - we're gonna go through command line and
04:15 - initialize the git repo and set the
04:17 - remote repository URL and that sort of
04:21 - stuff I don't want to do it through this
04:22 - user interface because I feel like it's
04:24 - important for you to know how to you
04:25 - the command-line especially I think that
04:28 - in a lot of professional team settings
04:30 - the command line is used at least that's
04:33 - been my experience in either case it's
04:36 - good to know all right so we've got our
04:39 - project right here there's one thing I
04:41 - want to double check because I have the
04:44 - foresight to know if we're gonna use bit
04:47 - rise it needs to know sort of the
04:51 - configuration on what to run what to
04:55 - test and that sort of stuff and all of
04:57 - that information is detailed in what's
05:01 - called an Xcode scheme so if you click
05:04 - this button you can see and click manage
05:06 - schemes you can see that you know by
05:10 - default there's one scheme and if you
05:12 - click Edit on it you'll see that you
05:15 - know for the different things that you
05:17 - can do with the project building it
05:18 - running it testing it profiling it and
05:20 - all that sorts that thing all those
05:22 - sorts of things there are options that
05:24 - you can configure so this scheme is what
05:28 - bit rise is going to read in order to
05:30 - know what to do with the project and how
05:34 - you want to maybe automatically run your
05:36 - tests or or how you want it to be built
05:39 - for what sorts of targets and that sort
05:41 - of stuff without diving in to it too
05:44 - much the only thing you really need to
05:45 - do here is make sure that it's shared so
05:48 - go back to manage schemes if you scroll
05:50 - all the way to the right there's this
05:52 - shared checkbox here so just uncheck it
05:56 - and check it because sometimes the
05:59 - scheme doesn't get generated like the
06:01 - file doesn't show up in your file
06:04 - directory until you do that for some
06:05 - reason so I'm gonna hit close it might
06:07 - be an Xcode bug but here's how you check
06:09 - so open up your project directory and
06:13 - you can either right-click or hold down
06:15 - ctrl and click on your Xcode project
06:17 - file and then choose show package
06:21 - contents and you're gonna you should
06:24 - have this XE shared data folder if you
06:27 - go into that there's this schemes folder
06:30 - and then there is your scheme so this
06:32 - file needs to get put under source
06:33 - control so when bit rice grabs the the
06:36 - code from github it has access to
06:39 - scheme and can build and test your app
06:41 - accordingly so that's why I just want to
06:43 - point it out right now and just so
06:45 - you're aware of it and later when we put
06:47 - it on github we could just double check
06:48 - it's there all right so yep
06:53 - so now after we've double-checked that
06:56 - we can just close the project for now
06:57 - and now we're going on a launch terminal
06:59 - to create a local git repository and
07:03 - then we're going to point it to the
07:04 - remote one on github so let's open up
07:07 - spotlight search and open up terminal
07:10 - and just in case you don't know you can
07:14 - also use your application launcher and
07:16 - look for terminal as well alright so
07:17 - there are a couple of commands here that
07:19 - may be new to you I have shown them in
07:22 - previous videos before but just in case
07:25 - you're not aware of them let's go to
07:27 - this github retort tutorial that I have
07:29 - on my site and under step 3 I list some
07:32 - of these common ones that we're going to
07:34 - use so essentially we have to navigate
07:37 - to the project directory I saved it on
07:41 - my desktop so that's where I need to
07:43 - navigate to so PWD is going to tell you
07:45 - where or which directory you are at
07:48 - currently LS is going to tell you or
07:51 - list out all of the files and
07:53 - directories in your current directory so
07:56 - I see desktop right there CD space
07:59 - folder name is going to move into that
08:01 - folder so CD space desktop and I can hit
08:05 - tab to just autocomplete it so I don't
08:09 - have to type out the whole thing now
08:11 - let's do PWD as you can see I am in my
08:14 - desktop and I know my project folder is
08:18 - called YouTube but I don't need to type
08:21 - it all out so in a hit tab to
08:24 - autocomplete it hit enter and now I'm in
08:26 - my project directory PWD you can see
08:29 - that I am there LS just double checked I
08:33 - have my Xcode project and this this
08:37 - other folder containing all the Swift
08:38 - files okay now you're gonna hit get
08:41 - space in it and this is going to
08:44 - initialize a git repository locally if
08:47 - this command gives you an error then
08:49 - what you need to do is go to this page
08:53 - showed you before and make sure you have
08:55 - the latest version of get installed it
08:57 - should be installed on your on your
08:58 - system by default so there shouldn't be
09:01 - a problem there all right so after we
09:03 - specified get in it what we want to do
09:06 - is use this other command called git
09:11 - remote add origin pointing to our remote
09:16 - repository on github so if you go back
09:18 - to github and you click this green
09:20 - button clone our download you'll see
09:23 - this is the URL the HTTP URL to point to
09:28 - this directory sorry this repository so
09:32 - we're gonna click this button to copy
09:33 - this URL and just to point out this if
09:37 - you hit use SSH here's the other URL you
09:41 - would use if you are using SSH so the
09:45 - difference between HTTP or SSH those are
09:49 - just two different ways you can access
09:51 - your repository and again in this
09:53 - awesome document it will tell you the
09:55 - two different ways connecting over HTTP
09:58 - or SSH for this one you have to generate
10:01 - these keys which you have to upload to
10:04 - github so that it can identify your
10:06 - machine so you never have to enter your
10:09 - username your password
10:10 - whereas this method you do have to enter
10:13 - in in your username and password and
10:16 - that's how you authenticate yourself but
10:17 - you can cache your password so you only
10:19 - need to do that once so since this is
10:22 - the recommended way let's do this way
10:24 - for now so going back to here click the
10:27 - screen button clone with HTTP copy that
10:30 - URL and let's go back to terminal here
10:33 - and do get remote add origin and just
10:37 - paste that HTTP URL there you shouldn't
10:42 - get any errors which is great now if you
10:46 - type git space status you'll see that
10:50 - there are no commits yet and these red
10:55 - files here these untracked files means
10:57 - that these files have not been added to
11:01 - the repository yet now would be a great
11:04 - time to explain some of this terminology
11:06 - so what's a commit think of a commit
11:08 - like a package of code changes that you
11:10 - want to deliver to github first you have
11:13 - to use the add command to manually add
11:15 - the code changes you want to the package
11:17 - aka the commit then when you're all done
11:21 - you use the commit command to tie up the
11:24 - package and give it a meaningful message
11:26 - to describe what's inside
11:27 - now that package is ready to be sent to
11:30 - github however you don't have to send it
11:33 - right away
11:33 - you can start another package of changes
11:35 - first and then you know you can save up
11:37 - as many commits as you want before
11:39 - pushing them to github now when you're
11:42 - ready and you finally want to push all
11:44 - of those commits or those packages to
11:47 - github you can use the push command
11:49 - which will send all your commits to the
11:51 - remote repository on github now let's
11:54 - take a look at this in action so based
11:56 - on what you just saw what we would need
11:58 - to do is basically add these red files
12:00 - into a commit right but before we do
12:04 - that a good practice especially when
12:06 - you're working with other people is to
12:07 - make sure that you have the latest
12:08 - version first so you want to pull all of
12:12 - the latest code from the remote
12:14 - repository merge it with the changes
12:18 - that you've made and make sure that
12:19 - everything works properly before
12:21 - repackaging it up and sending it over so
12:25 - what we're going to do is we're gonna
12:28 - say git pull which is going to pull the
12:32 - latest from from the repository and
12:36 - we're going to specify that we want to
12:38 - point to origin which we set to you know
12:41 - this repository up here right and we're
12:46 - gonna specify the master branch this is
12:48 - the branch of code that we want to pull
12:50 - from as you can see by default you only
12:52 - have one branch which is the master
12:54 - branch in the future you can create
12:57 - different branches of code if you want
12:58 - to you know try different things but you
13:02 - don't want to pollute the main master
13:04 - branch you can create a separate branch
13:06 - just to test out a feature or to see if
13:08 - you can get something working and then
13:09 - merge it back to the master branch the
13:11 - master branch is supposed to be you know
13:14 - like the gold standard or the source of
13:16 - truth you know the the best version of
13:19 - the code I guess you could say
13:20 - so anyways git pull origin master and
13:24 - we're gonna grab all of the latest code
13:26 - from the repository and essentially what
13:30 - we don't have now is this getting nor
13:32 - file in this readme file because when
13:34 - you go into our folder you can see we
13:37 - don't have that git ignore file or the
13:38 - readme file okay so anyways let's
13:41 - execute this command all right so let's
13:43 - fetch that and you can see now in our
13:45 - project directory locally we have the
13:47 - readme and this get ignore and these
13:50 - this is slightly greyed out because I
13:53 - have hidden files and folders showing if
13:56 - you don't then you probably won't see
13:58 - these two essentially this is the git
14:00 - ignore file and this contains all of the
14:02 - configuration for our the git repo that
14:05 - we've been setting okay so now we can do
14:10 - get status again and you can see these
14:13 - files are still untracked so let's go
14:16 - ahead and add them into a commit package
14:19 - it up and send it over to github so
14:22 - we're gonna do get space add space dot
14:26 - and this is going to add all of the
14:28 - untracked files to our commits click
14:31 - that or enter that and let's do get
14:34 - status again and you can see all of the
14:36 - stuff is in green now
14:37 - alright changes to be committed these
14:40 - are all the code changes in our commit
14:41 - right now let's wrap this guy up so
14:45 - let's use the commit command and dash M
14:48 - is gonna allow us to specify a message
14:50 - describing what this commit is about so
14:53 - let's say this is the initial Xcode
14:58 - project creation hit enter boom now we
15:05 - have our commit now we we can start a
15:08 - new commit or we can push it to get hub
15:10 - I feel like pushing it so let's go ahead
15:12 - and do git push and where do we want to
15:15 - push it to the origin to which branch to
15:18 - the master let's a hit enter it's gonna
15:21 - do its thing and then now we can come
15:25 - back here hit refresh and you'll see
15:28 - that here's our commit message
15:31 - and here is all of the new code our
15:34 - Xcode project here you can see two
15:38 - commits you can see there it is
15:40 - the commit that we just pushed and if
15:42 - you click into the commit you can see
15:44 - what files were committed and also what
15:46 - changes were made see all these green
15:48 - green means you've added it all right
15:50 - red will mean delete and you know you'll
15:52 - get it used to this sort of these
15:54 - symbols what else that I wanted to show
15:58 - you here oh yes I wanted to dive into
16:00 - this Xcode project file if you click
16:03 - into it remember Xcode schemes you
16:05 - should have this here there is our
16:08 - scheme so bit rise is going to be able
16:10 - to pick up that file and one thing to
16:12 - mention before moving on to bit rise if
16:14 - any of this feels kind of shaky don't
16:17 - worry because over the course of
16:18 - building this YouTube app you will see
16:20 - me use these tools over and over again
16:22 - and just through osmosis and paying
16:24 - attention I'm sure you're going to be
16:27 - able to learn how to use it at first
16:29 - that seems complicated but honestly it
16:31 - really isn't that complicated once you
16:34 - kind of get the hang of it all right now
16:36 - time for a bit rise so again this is a
16:40 - tool which has a very generous free tier
16:43 - and you can ill build up to 200 times
16:47 - per month it doesn't list that here it's
16:49 - saying that each build can take up to 30
16:51 - minutes which which is actually a huge
16:54 - amount of time I think each build should
16:55 - probably only take one or two minutes so
16:57 - I don't think you'll ever hit the
16:58 - ceiling unless it's a massive app and
17:01 - then 200 200 builds per month is also a
17:05 - lot if you're not coding every day even
17:08 - if you are there's 30 days in a month
17:10 - 200 builds per month you can do the math
17:13 - it's quite a bit for free so I think
17:16 - it's great so once you sign up and you
17:19 - get in this will be what you see this is
17:21 - a fresh account so I can walk through
17:23 - this with you click on add your first
17:26 - app and you're going to choose your
17:29 - account so for me it's code with Chris
17:31 - I'm gonna set the privacy to private now
17:34 - this doesn't have to be the same as what
17:37 - you've set here right this is different
17:39 - your code repository can be public or
17:41 - private this is your bit rise
17:44 - configuration
17:46 - workflow which you probably don't want
17:48 - to publicize so you would most likely
17:51 - make this private so let's go ahead and
17:53 - click Next now we have to connect it to
17:55 - our code repo I've already connected it
17:57 - to my github account if you haven't
17:59 - there's just a couple buttons you have
18:01 - to click here to authenticate and grab
18:03 - your repos so you can see here this is
18:06 - the repo we've been working on YouTube
18:07 - one day builds so let's go ahead and do
18:10 - that now you can configure some more
18:12 - complicated access if it needs access to
18:15 - more things but I don't think this is us
18:19 - let's click no auto add SSH key so this
18:25 - is going to basically allow bit rise to
18:28 - go and fetch the code from github it's
18:30 - adding its own SSH key if I go back to
18:35 - this that's that's this right bit rise
18:38 - has added its own SSH key to your github
18:41 - account specifically for that repository
18:43 - so that it can go and grab it
18:47 - okay now let's choose which branch we
18:49 - only have the default master branch so
18:51 - let's go ahead and hit master ok so it's
18:56 - gonna do some scanning a house doing
19:00 - some testing earlier so right you're so
19:03 - smart I give it a few minutes
19:11 - all right in a couple of minutes time it
19:13 - should automatically detect that this is
19:15 - an iOS app and you can select the export
19:20 - method so if it's going to basically
19:23 - build your project and create a
19:26 - downloadable or an IPA so if you don't
19:29 - know this IPA file is basically the
19:30 - archive which you either send to the App
19:33 - Store or send it to TestFlight for your
19:35 - beta testers or send it to someone and
19:38 - there are different types that you can
19:40 - create so for the App Store obviously is
19:43 - to submit to the App Store ad hoc is
19:45 - just to give to someone to install and
19:48 - we're going to choose development
19:50 - enterprises if you want to distribute
19:51 - your app to like all of your employees
19:54 - and your company type of thing so let's
19:56 - choose development and this this is
20:01 - actually I don't know why I fell to this
20:03 - old one but for the iOS stack you should
20:06 - basically choose what your own system is
20:09 - so if I take a look at the Xcode version
20:14 - that I'm running right now it's 11.4
20:16 - this is you know it's saying that it's
20:19 - going to build your project on Xcode
20:21 - 11.1 on Mac OS Mojave but I'm going to
20:26 - change it to Catalina so I'm gonna click
20:28 - Edit and I'm actually on this one right
20:30 - here that's my version of Mac OS and
20:32 - that's my version of Xcode so I'm going
20:35 - to choose that and doing that it's just
20:38 - going to ensure that it's building it
20:42 - the same way you would build it on your
20:44 - system all right app icon we're gonna
20:48 - skip this for now and this webhook is
20:52 - really important because doing this step
20:55 - is going to allow bit rise to get
20:57 - notified when you push new code into
21:00 - your github repository so go ahead and
21:02 - click this purple button and we're all
21:06 - done now if it's kicked off our first
21:09 - test build so let's click here and go
21:12 - check it out and actually this is
21:16 - expected to fail unfortunately and I'll
21:20 - tell you why in a second so we'll just
21:22 - give it a few minutes
21:25 - actually we are not going to give it a
21:27 - few minutes I'm just gonna keep going
21:30 - we'll let this run in the background so
21:31 - let me click into the dashboard and show
21:33 - you some cool stuff so here's the here's
21:38 - the build that's happening this is the
21:39 - test build that they're running for us
21:41 - this is our app that we've just set up
21:43 - if you click into this app um you can
21:47 - see different cool things here so
21:50 - workflow is basically a workflow is
21:54 - something that gets run on your coat
21:57 - this is a default workflow and the
21:59 - reason I said it would fail is because
22:01 - at this point you can see these are all
22:03 - the steps that it's going to go through
22:05 - so here it's gonna grab the code from
22:07 - github
22:09 - but at this point when it gets to this
22:11 - step it's actually gonna fail because
22:13 - this step archiving it and exporting it
22:16 - exporting in IPA a little executable
22:19 - archive not an executable an archive
22:22 - this is gonna fail because we haven't
22:25 - set up our provisioning profile we
22:27 - haven't added our you know our private
22:31 - keys and stuff like that so this is
22:32 - actually not the right step for us but
22:36 - the good thing is that we can change it
22:38 - so we'll get to that in a second and
22:40 - that's why it's gonna fail I want to
22:43 - show you this other thing right here
22:45 - called triggers so what triggers the
22:47 - workflow that I just showed you you can
22:49 - manually trigger it but that's not
22:51 - really fun all right here you can see
22:53 - that it's actually triggered by us
22:57 - pushing code to the master branch right
23:00 - and then it's gonna run this workflow
23:01 - called primary so you can have multiple
23:04 - workflows for different purposes maybe
23:06 - one will send up the build to the App
23:08 - Store one will send it to your friend
23:10 - maybe one will like run tests or
23:12 - whatever so you have you can have
23:13 - different workflows and you can add
23:15 - different triggers to trigger different
23:17 - workflows right now we just have
23:20 - whenever we push code to our github
23:22 - repository it's gonna run the primary
23:24 - workflow alright now let's go back to
23:27 - our dashboard and as you can see it's
23:29 - failed if I click into this and we can
23:34 - see you know why it's failed here
23:39 - see no profiles it can basically it
23:43 - doesn't have some sort of without diving
23:45 - too much into it doesn't have our
23:47 - credentials to create that build it
23:49 - needs to but that's that's not the thing
23:52 - we want anyways we just want it to run
23:54 - and build our code to make sure that it
23:56 - doesn't have any errors it doesn't crash
23:59 - when you try to compile it so let's go
24:03 - into our workflows and modify that
24:05 - primary workflow a little bit so it's
24:07 - helpful to us so click on this step X
24:09 - code archive and export and let's go
24:13 - ahead and click this trash can to delete
24:15 - it and let's click on this purple button
24:19 - or press come in s to save it and you
24:22 - can see that step is gone now we're
24:25 - going to add a new step click this plus
24:27 - and we are going to search for build and
24:34 - we're gonna choose this one X code build
24:37 - for simulator so it's gonna take our
24:40 - project and build it and try to run it
24:42 - on a simulator which is exactly what we
24:44 - need for now as we're going through
24:46 - development we can configure some of
24:49 - these things for this step one of the
24:52 - things I'd like to configure is which
24:54 - simulator we want to run it on I don't
24:56 - want to run it on the iPhone 8 plus I
24:58 - want to run it on iphone 11 so let's do
25:01 - that make sure you're typing it in
25:02 - exactly as it should be though for the
25:05 - simulator name otherwise it's not going
25:07 - to find it all right let's hit command S
25:09 - or click this purple button to save it
25:11 - and then what we're going to do is I
25:15 - could manually trigger it if we go back
25:18 - to the dashboard I can just click on our
25:22 - app here and then start a build
25:24 - automatically but that's no fun so why
25:27 - don't we try something here why don't we
25:34 - start our Xcode project
25:38 - and we're gonna run a build here I'm
25:42 - just gonna do VAR I equals zero and I'm
25:46 - gonna save it this code is basically not
25:49 - does nothing and then I'm gonna go into
25:52 - terminal if I didn't get status you'll
25:56 - see that there's a change in
25:58 - viewcontroller.swift
25:59 - so let's add it to a commit now let's
26:02 - wrap that commit up added a innocent
26:10 - line of code to test bit rise okay
26:16 - now we need to push it get push origin
26:19 - master and when you try to push it it
26:25 - might ask you for your credentials but
26:29 - if you want to save your credentials
26:30 - again refer to that document I showed
26:33 - you earlier on how to cache your
26:34 - password and stuff like that alright so
26:36 - anyways it's pushed our code here and if
26:40 - I just reload this you can see here
26:43 - added an innocent line of code to test
26:45 - bit rise cool now if you go back to bit
26:48 - rise and you go back to dashboard you
26:51 - can see that it detected it picked up
26:53 - that that push and now it's building our
26:57 - code so you can even see here that it's
26:59 - running this latest commit added an
27:01 - innocent line of code to test and this
27:03 - one should actually succeed at least I
27:06 - hope otherwise this would be a terrible
27:08 - demo
27:10 - anyways let's click into this and see I
27:12 - think it should be nearly done anyways
27:15 - just going through this stuff and see
27:19 - you later similar for iPhone 11 it's
27:21 - it's doing it compiling
27:23 - viewcontroller.swift it's doing it and
27:27 - doing it and the cool thing is that you
27:29 - don't have to have this dashboard open
27:32 - you just you know push your code when
27:34 - you want to push your code and if it
27:36 - succeeds it's going to send you an email
27:39 - if it fails they'll also send you an
27:41 - email and you can configure those
27:42 - notifications but this way you know you
27:45 - you can be you can rest assure that your
27:48 - code base is always
27:50 - running so you can see it's nearly done
27:55 - success all right so that's really cool
27:58 - and I'm not gonna you know for the
28:00 - interest of time I'm not going to show
28:01 - you a breaking build but I'll just
28:03 - describe what would happen if I were to
28:04 - let's say write a line of code like this
28:07 - and then accidentally you know without
28:09 - testing it sort of push it to github and
28:12 - then bit rise would pick up that change
28:15 - and it would grab the latest and and run
28:18 - it it wouldn't be able to compile this
28:21 - build because as you can see this is an
28:23 - error and it's not going to run but bit
28:25 - rise is gonna catch that error and it's
28:27 - gonna send me an email and tell me hey
28:29 - the build is broken because sometimes
28:32 - the danger is that you know you don't
28:34 - know you broke the build and then you
28:35 - keep adding code on top of code on top
28:37 - of code and then it gets really hard to
28:39 - unravel so you kind of do want to know
28:42 - as soon as the build is not in a good
28:46 - place and especially if multiple people
28:48 - are working on the same project you have
28:50 - multiple people adding code on top of
28:52 - each other this becomes really helpful
28:54 - so that's the continuous integration
28:56 - part of it in the future when your
28:59 - workflow gets more complicated and you
29:01 - add it you're gonna add tests you're
29:03 - gonna add different sorts of steps to
29:06 - your workflow bit rise can help you
29:09 - automate a lot of that and all you need
29:11 - to do is just go here go to workflow and
29:18 - then you can just you know build out
29:20 - your workflow for all the steps that you
29:22 - need you know you can see that there's a
29:25 - whole bunch of different tasks that you
29:28 - can automate so if I you know just lists
29:30 - it out yeah and we'll get deeper into
29:33 - this as our apps get more complicated
29:35 - we'll probably use along different steps
29:38 - like that but being you know being free
29:41 - being a free tier I think this is pretty
29:43 - cool for both github and bid rise all
29:46 - right this is great now that we have our
29:48 - project under source control we can
29:49 - track our code changes we can roll back
29:51 - if we need to add collaborators and so
29:53 - much more
29:54 - also by hooking it up to bit Ryze we can
29:57 - make sure that our code in source
29:58 - control is working at all times and to
30:00 - also immediately get alerted whenever
30:02 - someone
30:03 - most likely myself checks and code that
30:06 - breaks the bill because hey I'm human
30:08 - you're human we're all human and we're
30:10 - gonna make mistakes now if you want to
30:12 - check out either of these tools there
30:13 - are links in the description below I
30:15 - will mention bit Rises our partner but
30:17 - they are a leader in the space for
30:19 - continuous integration and you can't go
30:20 - wrong by using them and both of these
30:22 - tools have free tiers which are
30:24 - perfectly fine and that's what I'm using
30:26 - as well now I want to turn over to you
30:28 - have you used tools like this before if
30:30 - so which ones let me know by leaving a
30:32 - quick comment below if you haven't done
30:33 - so already in the next lesson we're
30:36 - going to check out the YouTube data API
30:37 - and how to extract information from it
30:39 - kind of like in the Tara Gator but also
30:43 - the API is kind of like a willing
30:45 - subject mmm bad example anyways if
30:47 - you've watched to this point thank you
30:49 - so much I really appreciate you I'll see
30:52 - you in the next lesson

Cleaned transcript:

hey code crew in this lesson we're going to set up github and bit rise in preparation to build our YouTube app now both of these tools you can use for free but first of all why are we even using these tools there are two reasons actually number one these types of tools are used in team environments at the workplace so if you want to get an iOS developer job then it's good to know number two even as a solo developer source control helps you manage your code and continuous integration helps you automate some routine tasks therefore freeing up your time which is even more important as a solo okay so here's what we're out to accomplish first we're going to create a remote git repository on github to store our code then on our own computer we're going to create our Xcode project we're going to create a local git repository and then point it to the remote one on github this will allow us to push our newly created Xcode project to github as well as any future code changes next we're going to point bit rise to our github repo so that each time we push code from our local computer to github bit rise is going to get notified it's gonna grab the code from github and run it to make sure nothing's broken and in the future we can also add additional steps for bit rise to automate such as running tests notifying team members making App Store built and so on everything in this workflow is free which is a huge plus in my books now first we're gonna set up our github repository if you don't have an account just go to github calm and create a free one you're gonna be able to create private and public repositories unlimited ones so why not I also want to point out that we have a github tutorial on the site and I'll link to this below which so it's kind of go through a lot of the steps we're going to go through today so I just wanted you to be aware that we have this lastly this page is very useful if this is the first time you're setting up github again I'll link to it below it's going to tell you how to install git if you don't have it on your local machine how to add your username and password if you're going to be connecting over HTTP which is what we're gonna be doing today and also how to connect over SSH alright so if you either have an account or you just signed up for one you'll see something like this you can go into the plus symbol right here and go new repository we're gonna set a new code repo for our YouTube one day build and you can name this anything you'd like I'm gonna make it public so that anyone can see the code but I choose who can submit code to the repo so that's important for your own personal projects you can obviously make it private I'm also going to initialize that this repository with that readme and I'm gonna add a git ignore file if you're not sure what this is it's basically a file that dictates which files will get ignored and it won't track changes on these files now why is that important because with different languages sometimes there are personal configuration files that don't really belong in a team source code repository so if we're talking we're talking about Swift for example Xcode will have a lot of user settings personal user settings to see which panels you had open you know what state Xcode was in when you last launched it so it can launch it in the same state next time those are settings don't belong in on github so that's why I adding a get ignore for Swift it's not gonna upload those sorts of files and it's going to completely ignore them let's create the repository now alright so we've got our brand new repo so the next thing we're going to do if you remember that diagram we're going to create the Xcode project so let's go ahead and launch Xcode here I'm going to create a brand new Xcode project I'm gonna choose single View application and I'm gonna call this the same thing I named my repository so YouTube when they build these settings should be familiar if you've been through the 29 day beginner lessons language a swift user interfaces storyboard and I'm gonna leave all this stuff unchecked down there so click on next I'm gonna save this on my desktop and source control I'm gonna leave it unchecked because we're gonna go through command line and initialize the git repo and set the remote repository URL and that sort of stuff I don't want to do it through this user interface because I feel like it's important for you to know how to you the commandline especially I think that in a lot of professional team settings the command line is used at least that's been my experience in either case it's good to know all right so we've got our project right here there's one thing I want to double check because I have the foresight to know if we're gonna use bit rise it needs to know sort of the configuration on what to run what to test and that sort of stuff and all of that information is detailed in what's called an Xcode scheme so if you click this button you can see and click manage schemes you can see that you know by default there's one scheme and if you click Edit on it you'll see that you know for the different things that you can do with the project building it running it testing it profiling it and all that sorts that thing all those sorts of things there are options that you can configure so this scheme is what bit rise is going to read in order to know what to do with the project and how you want to maybe automatically run your tests or or how you want it to be built for what sorts of targets and that sort of stuff without diving in to it too much the only thing you really need to do here is make sure that it's shared so go back to manage schemes if you scroll all the way to the right there's this shared checkbox here so just uncheck it and check it because sometimes the scheme doesn't get generated like the file doesn't show up in your file directory until you do that for some reason so I'm gonna hit close it might be an Xcode bug but here's how you check so open up your project directory and you can either rightclick or hold down ctrl and click on your Xcode project file and then choose show package contents and you're gonna you should have this XE shared data folder if you go into that there's this schemes folder and then there is your scheme so this file needs to get put under source control so when bit rice grabs the the code from github it has access to scheme and can build and test your app accordingly so that's why I just want to point it out right now and just so you're aware of it and later when we put it on github we could just double check it's there all right so yep so now after we've doublechecked that we can just close the project for now and now we're going on a launch terminal to create a local git repository and then we're going to point it to the remote one on github so let's open up spotlight search and open up terminal and just in case you don't know you can also use your application launcher and look for terminal as well alright so there are a couple of commands here that may be new to you I have shown them in previous videos before but just in case you're not aware of them let's go to this github retort tutorial that I have on my site and under step 3 I list some of these common ones that we're going to use so essentially we have to navigate to the project directory I saved it on my desktop so that's where I need to navigate to so PWD is going to tell you where or which directory you are at currently LS is going to tell you or list out all of the files and directories in your current directory so I see desktop right there CD space folder name is going to move into that folder so CD space desktop and I can hit tab to just autocomplete it so I don't have to type out the whole thing now let's do PWD as you can see I am in my desktop and I know my project folder is called YouTube but I don't need to type it all out so in a hit tab to autocomplete it hit enter and now I'm in my project directory PWD you can see that I am there LS just double checked I have my Xcode project and this this other folder containing all the Swift files okay now you're gonna hit get space in it and this is going to initialize a git repository locally if this command gives you an error then what you need to do is go to this page showed you before and make sure you have the latest version of get installed it should be installed on your on your system by default so there shouldn't be a problem there all right so after we specified get in it what we want to do is use this other command called git remote add origin pointing to our remote repository on github so if you go back to github and you click this green button clone our download you'll see this is the URL the HTTP URL to point to this directory sorry this repository so we're gonna click this button to copy this URL and just to point out this if you hit use SSH here's the other URL you would use if you are using SSH so the difference between HTTP or SSH those are just two different ways you can access your repository and again in this awesome document it will tell you the two different ways connecting over HTTP or SSH for this one you have to generate these keys which you have to upload to github so that it can identify your machine so you never have to enter your username your password whereas this method you do have to enter in in your username and password and that's how you authenticate yourself but you can cache your password so you only need to do that once so since this is the recommended way let's do this way for now so going back to here click the screen button clone with HTTP copy that URL and let's go back to terminal here and do get remote add origin and just paste that HTTP URL there you shouldn't get any errors which is great now if you type git space status you'll see that there are no commits yet and these red files here these untracked files means that these files have not been added to the repository yet now would be a great time to explain some of this terminology so what's a commit think of a commit like a package of code changes that you want to deliver to github first you have to use the add command to manually add the code changes you want to the package aka the commit then when you're all done you use the commit command to tie up the package and give it a meaningful message to describe what's inside now that package is ready to be sent to github however you don't have to send it right away you can start another package of changes first and then you know you can save up as many commits as you want before pushing them to github now when you're ready and you finally want to push all of those commits or those packages to github you can use the push command which will send all your commits to the remote repository on github now let's take a look at this in action so based on what you just saw what we would need to do is basically add these red files into a commit right but before we do that a good practice especially when you're working with other people is to make sure that you have the latest version first so you want to pull all of the latest code from the remote repository merge it with the changes that you've made and make sure that everything works properly before repackaging it up and sending it over so what we're going to do is we're gonna say git pull which is going to pull the latest from from the repository and we're going to specify that we want to point to origin which we set to you know this repository up here right and we're gonna specify the master branch this is the branch of code that we want to pull from as you can see by default you only have one branch which is the master branch in the future you can create different branches of code if you want to you know try different things but you don't want to pollute the main master branch you can create a separate branch just to test out a feature or to see if you can get something working and then merge it back to the master branch the master branch is supposed to be you know like the gold standard or the source of truth you know the the best version of the code I guess you could say so anyways git pull origin master and we're gonna grab all of the latest code from the repository and essentially what we don't have now is this getting nor file in this readme file because when you go into our folder you can see we don't have that git ignore file or the readme file okay so anyways let's execute this command all right so let's fetch that and you can see now in our project directory locally we have the readme and this get ignore and these this is slightly greyed out because I have hidden files and folders showing if you don't then you probably won't see these two essentially this is the git ignore file and this contains all of the configuration for our the git repo that we've been setting okay so now we can do get status again and you can see these files are still untracked so let's go ahead and add them into a commit package it up and send it over to github so we're gonna do get space add space dot and this is going to add all of the untracked files to our commits click that or enter that and let's do get status again and you can see all of the stuff is in green now alright changes to be committed these are all the code changes in our commit right now let's wrap this guy up so let's use the commit command and dash M is gonna allow us to specify a message describing what this commit is about so let's say this is the initial Xcode project creation hit enter boom now we have our commit now we we can start a new commit or we can push it to get hub I feel like pushing it so let's go ahead and do git push and where do we want to push it to the origin to which branch to the master let's a hit enter it's gonna do its thing and then now we can come back here hit refresh and you'll see that here's our commit message and here is all of the new code our Xcode project here you can see two commits you can see there it is the commit that we just pushed and if you click into the commit you can see what files were committed and also what changes were made see all these green green means you've added it all right red will mean delete and you know you'll get it used to this sort of these symbols what else that I wanted to show you here oh yes I wanted to dive into this Xcode project file if you click into it remember Xcode schemes you should have this here there is our scheme so bit rise is going to be able to pick up that file and one thing to mention before moving on to bit rise if any of this feels kind of shaky don't worry because over the course of building this YouTube app you will see me use these tools over and over again and just through osmosis and paying attention I'm sure you're going to be able to learn how to use it at first that seems complicated but honestly it really isn't that complicated once you kind of get the hang of it all right now time for a bit rise so again this is a tool which has a very generous free tier and you can ill build up to 200 times per month it doesn't list that here it's saying that each build can take up to 30 minutes which which is actually a huge amount of time I think each build should probably only take one or two minutes so I don't think you'll ever hit the ceiling unless it's a massive app and then 200 200 builds per month is also a lot if you're not coding every day even if you are there's 30 days in a month 200 builds per month you can do the math it's quite a bit for free so I think it's great so once you sign up and you get in this will be what you see this is a fresh account so I can walk through this with you click on add your first app and you're going to choose your account so for me it's code with Chris I'm gonna set the privacy to private now this doesn't have to be the same as what you've set here right this is different your code repository can be public or private this is your bit rise configuration workflow which you probably don't want to publicize so you would most likely make this private so let's go ahead and click Next now we have to connect it to our code repo I've already connected it to my github account if you haven't there's just a couple buttons you have to click here to authenticate and grab your repos so you can see here this is the repo we've been working on YouTube one day builds so let's go ahead and do that now you can configure some more complicated access if it needs access to more things but I don't think this is us let's click no auto add SSH key so this is going to basically allow bit rise to go and fetch the code from github it's adding its own SSH key if I go back to this that's that's this right bit rise has added its own SSH key to your github account specifically for that repository so that it can go and grab it okay now let's choose which branch we only have the default master branch so let's go ahead and hit master ok so it's gonna do some scanning a house doing some testing earlier so right you're so smart I give it a few minutes all right in a couple of minutes time it should automatically detect that this is an iOS app and you can select the export method so if it's going to basically build your project and create a downloadable or an IPA so if you don't know this IPA file is basically the archive which you either send to the App Store or send it to TestFlight for your beta testers or send it to someone and there are different types that you can create so for the App Store obviously is to submit to the App Store ad hoc is just to give to someone to install and we're going to choose development enterprises if you want to distribute your app to like all of your employees and your company type of thing so let's choose development and this this is actually I don't know why I fell to this old one but for the iOS stack you should basically choose what your own system is so if I take a look at the Xcode version that I'm running right now it's 11.4 this is you know it's saying that it's going to build your project on Xcode 11.1 on Mac OS Mojave but I'm going to change it to Catalina so I'm gonna click Edit and I'm actually on this one right here that's my version of Mac OS and that's my version of Xcode so I'm going to choose that and doing that it's just going to ensure that it's building it the same way you would build it on your system all right app icon we're gonna skip this for now and this webhook is really important because doing this step is going to allow bit rise to get notified when you push new code into your github repository so go ahead and click this purple button and we're all done now if it's kicked off our first test build so let's click here and go check it out and actually this is expected to fail unfortunately and I'll tell you why in a second so we'll just give it a few minutes actually we are not going to give it a few minutes I'm just gonna keep going we'll let this run in the background so let me click into the dashboard and show you some cool stuff so here's the here's the build that's happening this is the test build that they're running for us this is our app that we've just set up if you click into this app um you can see different cool things here so workflow is basically a workflow is something that gets run on your coat this is a default workflow and the reason I said it would fail is because at this point you can see these are all the steps that it's going to go through so here it's gonna grab the code from github but at this point when it gets to this step it's actually gonna fail because this step archiving it and exporting it exporting in IPA a little executable archive not an executable an archive this is gonna fail because we haven't set up our provisioning profile we haven't added our you know our private keys and stuff like that so this is actually not the right step for us but the good thing is that we can change it so we'll get to that in a second and that's why it's gonna fail I want to show you this other thing right here called triggers so what triggers the workflow that I just showed you you can manually trigger it but that's not really fun all right here you can see that it's actually triggered by us pushing code to the master branch right and then it's gonna run this workflow called primary so you can have multiple workflows for different purposes maybe one will send up the build to the App Store one will send it to your friend maybe one will like run tests or whatever so you have you can have different workflows and you can add different triggers to trigger different workflows right now we just have whenever we push code to our github repository it's gonna run the primary workflow alright now let's go back to our dashboard and as you can see it's failed if I click into this and we can see you know why it's failed here see no profiles it can basically it doesn't have some sort of without diving too much into it doesn't have our credentials to create that build it needs to but that's that's not the thing we want anyways we just want it to run and build our code to make sure that it doesn't have any errors it doesn't crash when you try to compile it so let's go into our workflows and modify that primary workflow a little bit so it's helpful to us so click on this step X code archive and export and let's go ahead and click this trash can to delete it and let's click on this purple button or press come in s to save it and you can see that step is gone now we're going to add a new step click this plus and we are going to search for build and we're gonna choose this one X code build for simulator so it's gonna take our project and build it and try to run it on a simulator which is exactly what we need for now as we're going through development we can configure some of these things for this step one of the things I'd like to configure is which simulator we want to run it on I don't want to run it on the iPhone 8 plus I want to run it on iphone 11 so let's do that make sure you're typing it in exactly as it should be though for the simulator name otherwise it's not going to find it all right let's hit command S or click this purple button to save it and then what we're going to do is I could manually trigger it if we go back to the dashboard I can just click on our app here and then start a build automatically but that's no fun so why don't we try something here why don't we start our Xcode project and we're gonna run a build here I'm just gonna do VAR I equals zero and I'm gonna save it this code is basically not does nothing and then I'm gonna go into terminal if I didn't get status you'll see that there's a change in viewcontroller.swift so let's add it to a commit now let's wrap that commit up added a innocent line of code to test bit rise okay now we need to push it get push origin master and when you try to push it it might ask you for your credentials but if you want to save your credentials again refer to that document I showed you earlier on how to cache your password and stuff like that alright so anyways it's pushed our code here and if I just reload this you can see here added an innocent line of code to test bit rise cool now if you go back to bit rise and you go back to dashboard you can see that it detected it picked up that that push and now it's building our code so you can even see here that it's running this latest commit added an innocent line of code to test and this one should actually succeed at least I hope otherwise this would be a terrible demo anyways let's click into this and see I think it should be nearly done anyways just going through this stuff and see you later similar for iPhone 11 it's it's doing it compiling viewcontroller.swift it's doing it and doing it and the cool thing is that you don't have to have this dashboard open you just you know push your code when you want to push your code and if it succeeds it's going to send you an email if it fails they'll also send you an email and you can configure those notifications but this way you know you you can be you can rest assure that your code base is always running so you can see it's nearly done success all right so that's really cool and I'm not gonna you know for the interest of time I'm not going to show you a breaking build but I'll just describe what would happen if I were to let's say write a line of code like this and then accidentally you know without testing it sort of push it to github and then bit rise would pick up that change and it would grab the latest and and run it it wouldn't be able to compile this build because as you can see this is an error and it's not going to run but bit rise is gonna catch that error and it's gonna send me an email and tell me hey the build is broken because sometimes the danger is that you know you don't know you broke the build and then you keep adding code on top of code on top of code and then it gets really hard to unravel so you kind of do want to know as soon as the build is not in a good place and especially if multiple people are working on the same project you have multiple people adding code on top of each other this becomes really helpful so that's the continuous integration part of it in the future when your workflow gets more complicated and you add it you're gonna add tests you're gonna add different sorts of steps to your workflow bit rise can help you automate a lot of that and all you need to do is just go here go to workflow and then you can just you know build out your workflow for all the steps that you need you know you can see that there's a whole bunch of different tasks that you can automate so if I you know just lists it out yeah and we'll get deeper into this as our apps get more complicated we'll probably use along different steps like that but being you know being free being a free tier I think this is pretty cool for both github and bid rise all right this is great now that we have our project under source control we can track our code changes we can roll back if we need to add collaborators and so much more also by hooking it up to bit Ryze we can make sure that our code in source control is working at all times and to also immediately get alerted whenever someone most likely myself checks and code that breaks the bill because hey I'm human you're human we're all human and we're gonna make mistakes now if you want to check out either of these tools there are links in the description below I will mention bit Rises our partner but they are a leader in the space for continuous integration and you can't go wrong by using them and both of these tools have free tiers which are perfectly fine and that's what I'm using as well now I want to turn over to you have you used tools like this before if so which ones let me know by leaving a quick comment below if you haven't done so already in the next lesson we're going to check out the YouTube data API and how to extract information from it kind of like in the Tara Gator but also the API is kind of like a willing subject mmm bad example anyways if you've watched to this point thank you so much I really appreciate you I'll see you in the next lesson
