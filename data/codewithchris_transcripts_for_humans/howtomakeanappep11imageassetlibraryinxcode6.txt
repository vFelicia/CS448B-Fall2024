With timestamps:

00:04 - hey guys welcome to lesson 11 of how to
00:07 - make iphone apps with no programming
00:09 - experience and in this lesson we are
00:12 - going to take a look at the asset
00:14 - library in your Xcode project and how to
00:16 - add images into the project so that you
00:19 - can use them so I've got some beautiful
00:21 - card images here and let me just show
00:24 - some of them to you guys here's the
00:32 - Queen and there's a king now I'm not the
00:36 - original creator of these images I'll
00:39 - link and provide credit to the original
00:41 - author of these images below but he
00:45 - released them under the Creative Commons
00:46 - license so we're able to use them for
00:49 - our demo here and I don't have all of
00:51 - the cards for each suit I picked a
00:54 - couple from each suit just to make sure
00:56 - that we have ace all the way up to King
01:00 - so we have what is that 14 cards so for
01:04 - the purpose of our war card game I'm not
01:07 - going to use all 52 cards now before we
01:10 - add these images into our Xcode project
01:13 - for use take a look at these file names
01:16 - so I have for example I have the King
01:20 - card which is right here and then I have
01:23 - another one with then at 2 X suffix and
01:28 - then I have a third one with an at 3 X
01:30 - suffix well what are those let me just
01:34 - open them up and you can see so the app
01:36 - 2 X is literally just 2 times as large
01:39 - and 3x is 3 times as large and the
01:44 - reason that I have this is because we
01:46 - have a couple of different iPhones with
01:48 - different resolutions so we have the
01:51 - original iPhones which would use these
01:53 - ones and we have the retina iPhones
01:57 - which would use the at 2x and then now
02:00 - we have the iPhone 6 iPhone 6 plus which
02:03 - at the larger screen sizes use the at 3x
02:07 - the beautiful thing is that we don't
02:09 - have to manage which version to display
02:12 - as
02:13 - as we add all three versions and we name
02:15 - it according to this sort of
02:18 - nomenclature
02:19 - so at 2x4 the double the size and at 3x
02:23 - with three times the size as long as we
02:25 - name it like that and we add all three
02:27 - versions to our Xcode project the app is
02:29 - going to pick the appropriate version to
02:32 - display to the user depending on what
02:34 - sort of screen resolution that they have
02:36 - although creating graphics is beyond the
02:38 - scope of this course what you want to do
02:41 - is create your graphic asset at the
02:44 - largest size so whatever size you're
02:46 - thinking of create it at three times the
02:48 - size and then you want to take that
02:50 - larger size and scale it down to create
02:52 - the other two otherwise if you start
02:55 - with creating your graphic at this size
02:58 - and then you enlarge it to two X and
03:01 - then you enlarge up to 3x the 2x and 3x
03:04 - versions won't look very good and it may
03:06 - actually be blurry because you're
03:08 - scaling the image up so you actually
03:11 - want to work at this largest resolution
03:13 - and you want to scale it down to produce
03:15 - your other two copies in your graphic
03:18 - software such as Photoshop or sketch
03:20 - where you're creating your art assets
03:23 - you'll have the ability to scale it down
03:26 - and create these two versions manually
03:28 - but actually there's an app that can
03:31 - help you do that really easily and it's
03:33 - called prep oh it's available in the Mac
03:35 - App Store for free so let me show you
03:37 - guys how it works so here I have the app
03:41 - store listing for prep oh if you just
03:43 - open up Mac App Store on your computer
03:46 - and search for peple you'll find this
03:49 - app and it's again it's free and it's a
03:51 - handy little tool to help you create the
03:53 - at 2x and the 1x versions so let me
03:57 - demonstrate how it works very quickly
03:59 - this is what prepa looks like and I'm
04:03 - gonna go back to my finder for my king
04:07 - I'm going to delete the at 2x and the 1x
04:12 - versions
04:12 - okay so that just leaves me with this
04:15 - remember you want to create your artwork
04:16 - at the largest size right so when we
04:20 - create our art asset we're gonna name it
04:22 - whatever at 3x okay and then very simply
04:28 - you just drag this guy and drop it into
04:32 - here and then once you drag in all of
04:36 - the images that you want to convert or
04:38 - create the smaller versions of you just
04:41 - click export and you choose a location
04:46 - so I'm just gonna choose this and then
04:51 - if I go back to my finder you'll see
04:53 - that it's created the app 2 X version
04:56 - and the 1 X version so when you're
05:00 - working with a lot of art assets this
05:02 - can be a real time saver because you
05:05 - don't have to manually create the
05:06 - smaller versions in your graphics
05:08 - editing software instead you can just
05:10 - drag all of them in here and then do a
05:12 - single export to create all of those
05:14 - different versions ok so now let's go
05:16 - into our Xcode project and see how we
05:18 - can add the art assets into the project
05:21 - okay so right here I'm looking at the
05:23 - storyboard of our war card game Xcode
05:27 - project and you'll notice in the file
05:29 - navigator that we have this entry called
05:32 - images thought x.c assets and here
05:35 - there's a single entry for your default
05:39 - project and we close this pane so
05:42 - there's a lot more to look at and this
05:44 - is where you're going to add your app
05:46 - icons but we're not gonna do that right
05:48 - now this is called your asset library
05:51 - and this is where you're going to put
05:53 - all of the images for your app and it
05:56 - helps you manage your different versions
05:58 - so you can see that there's spaces for
06:00 - the 2x and the 3x versions so what we
06:03 - want to do when we add an image asset
06:06 - we're gonna right click here or if you
06:08 - have a single button Mouse you hold down
06:11 - ctrl and click you can get this menu as
06:14 - well and we'll hit new image set ok and
06:18 - then you just want to highlight that by
06:21 - default it's going to name it image and
06:23 - you can press ENTER to rename it or you
06:25 - can just click it once and then wait for
06:28 - the text box to pop up so I'm gonna name
06:31 - this card one OK and this is going to be
06:36 - my ace so let me open up
06:40 - find her again and grab my images so you
06:43 - can see here in the image asset library
06:47 - this is card one is the new image set
06:49 - that I created and on the right hand
06:51 - side there are three spots for each of
06:54 - the different resolutions that I need to
06:56 - add for this single image so I'm going
06:59 - to go back to my finder scroll down for
07:03 - my ace and then I can drag the 3x into
07:07 - the 3x slot and the 2x to the 2x slot
07:11 - and then this one into the One X so just
07:16 - like that whenever I want to use this
07:19 - image I can refer to it by this name
07:21 - card one and it's going to use the
07:24 - appropriate size depending on what type
07:28 - of screen the user is using my app on
07:30 - now here's a tip if your file name is
07:35 - not going to be different from what you
07:38 - want to name your image set you can
07:41 - actually just drag it on so let me
07:46 - demonstrate
07:47 - so for card - I'm going to grab these
07:51 - three and then I'm just going to click
07:54 - and I'm gonna drag it here and just like
07:57 - that it creates an entry based on the
08:01 - file name and I'll add all of the
08:04 - different resolutions based on your at
08:07 - 3x in your at 2x suffixes or
08:11 - alternatively we can go like this again
08:14 - and create car 3 and you can come here
08:19 - you can highlight all three resolutions
08:21 - and you can click and you can drag it
08:24 - here as well it's going to be smart
08:26 - enough to add card three dot PNG to the
08:29 - One X card 3 at 2x dot PNG to the the
08:33 - second one and the last one to the
08:35 - highest resolution so it's not going to
08:37 - switch it around and mess up your
08:39 - resolutions so I'm just gonna go ahead
08:42 - and do that for cards 4 to 10 just drag
08:49 - it into our image asset library
08:53 - okay so now I've got one to ten I want
08:56 - to add my Jack Queen and King as well
08:59 - but I don't want to just drag it into my
09:01 - asset library because I actually want to
09:03 - name it well I suppose we can name it
09:07 - afterwards so let me just drag it on
09:12 - like that and then I can rename my jack
09:16 - to card eleven and you'll see why I want
09:19 - to name it this way a little later card
09:22 - 13 because we're going to be randomizing
09:24 - a number from 1 to 13 and then referring
09:27 - to the card by the number instead of
09:29 - Jack queen or king I have a couple more
09:33 - image assets here I have a background
09:35 - and I have a card backing so I'm going
09:37 - to drag these guys in here as well so
09:39 - this is just a card back and the green
09:42 - felt is the background we're gonna use
09:44 - okay so now we actually have some great
09:48 - image assets for our app now let's take
09:53 - a look at how we can actually add these
09:56 - images to our UI image views so I'm
10:00 - going to go into our storyboard I'm
10:02 - gonna open the inspector pane again
10:04 - because we're going to be modifying some
10:06 - of the properties the first thing I'm
10:08 - going to do is click the UI image view
10:13 - that's supposed to represent our
10:14 - background so I have this guy
10:16 - highlighted so its properties are going
10:18 - to show up in the inspector pane on the
10:20 - right hand side I'm going to flip these
10:22 - tabs up here till I get to this tab
10:25 - where you can set the image for this guy
10:28 - and if you hit the drop down you'll
10:30 - actually see all of our different image
10:34 - assets in here so I'm going to select
10:36 - background which is the green felt
10:38 - background and you can instantly see
10:40 - that it set that image as the image for
10:45 - our UI image view I'm going to do the
10:47 - same thing for the cards just as a
10:50 - demonstration but I'm gonna remove it
10:53 - after because we actually you know we
10:55 - don't want the cards to be hard-coded or
10:58 - rather we want the cards to dynamically
11:00 - change depending on when we click the
11:04 - play round button we want to randomize
11:05 - which cards to show
11:07 - okay so I'm just gonna choose let's say
11:09 - car ten here and let's say card 12 card
11:19 - 12 card 13 I mixed it up a little bit so
11:25 - let's go to image assets here the King
11:29 - should actually be card 13 and the Queen
11:32 - should be card 12 so I'm just gonna
11:35 - change that quickly okay so now this is
11:42 - better car 12 is Queen and card 13 is
11:46 - king so going back to our storyboard so
11:50 - you can see how easy it is to add images
11:53 - to your Xcode project and then set the
11:55 - images in your UI image views but
11:57 - obviously we don't want to leave our app
12:00 - like this so let's modify the button tap
12:04 - method to dynamically change these
12:08 - images when the button is clicked okay
12:11 - so let's go into our view controller dot
12:13 - Swift file because that's where the play
12:17 - round tapped method is located and in
12:20 - this method the code gets executed when
12:23 - the button is tapped so right now this
12:26 - line of code we had set just to test
12:28 - things out and it changes the button
12:31 - title to play round so we don't want to
12:33 - do this anymore instead we want to set
12:36 - the two UI image views to a different
12:40 - card actually let's make things more
12:43 - interesting let's go back to here and
12:45 - let's change these to the card backs and
12:53 - then I'm gonna save it go back to view
12:55 - controller dot Swift and then in here we
12:59 - want to manipulate those two UI image
13:02 - views and set the image property of them
13:04 - how do we do that well we exposed those
13:08 - two UI image views here as iboutlet
13:10 - properties remember so we can refer to
13:13 - these guys using these properties so I'm
13:16 - going to say self dot first
13:20 - card image view and Xcode autocompletes
13:22 - it after I type a couple letters I just
13:24 - thought the press Enter so now this is
13:28 - referring to the uiimageview object for
13:32 - the first card view I'm gonna press dot
13:34 - because I want to access one of the
13:37 - properties and image is the property
13:41 - that I want to access so let me step
13:44 - back for a second when I press dot and I
13:47 - press I here it goes to image so that's
13:51 - the property name but on the left hand
13:54 - side here you can see that this is the
13:56 - type of object that this property needs
13:59 - or expects so I know that it needs a UI
14:04 - image object so what I'm gonna do is
14:07 - create a new UI image object and UI
14:10 - image is one of those UI kit classes
14:14 - okay so I can do that very simply
14:18 - remember that in order to create a new
14:20 - object of a class you just write class
14:24 - name and write these two brackets so
14:26 - what happens when we create a new object
14:29 - well the anit method gets fired right
14:31 - let's pull up the documentation for the
14:34 - UI image class so here I've got the UI
14:40 - kit framework reference which I showed
14:42 - you guys in a previous lesson and I told
14:44 - you guys we're gonna use this a lot so
14:46 - I'm going to search here for UI image
14:50 - and there it is a UI image object is a
14:53 - high level way to display image data so
14:55 - let me click into that class and you can
14:59 - see here that it's got a special init
15:02 - method called well it's called an it but
15:05 - it accepts one parameter called named so
15:07 - let's click that and let's see what that
15:09 - does
15:11 - so it tells us that the method is in it
15:15 - and this is a parameter that is of type
15:19 - string so we can pass in a string in
15:22 - here and it returns a UI image object
15:26 - for us so let's see the name parameter
15:29 - name of the file
15:31 - okay the method looks for an image with
15:33 - specified name in the applications main
15:35 - bundle all of the images that we added
15:38 - into the asset library are in the
15:40 - applications main bundle so all we need
15:42 - to do if we go back into our Xcode
15:44 - project is specify one of the names in
15:50 - here okay
15:52 - so let's call that special initializer
15:56 - method and if I just open up a bracket
15:59 - in here Xcode will instantly tell you
16:02 - you know what sorts of things are
16:04 - available and here is the method that
16:07 - we're looking for so I'm going to click
16:09 - that and now we can just specify a name
16:13 - let's say card one okay and basically
16:17 - what's going to happen is a new UI image
16:20 - object is going to be created using its
16:24 - custom special initializer method that
16:28 - accepts a string parameter it's going to
16:31 - look for card one in the asset library
16:33 - and it's going to basically create a UI
16:36 - image object that is initialized for
16:39 - this image asset and it's going to
16:41 - assign that UI image object into the
16:45 - image property of our UI image view okay
16:49 - so let's run it and see what happens
17:01 - okay so here we see all of the image
17:04 - assets which we set in the storyboard so
17:07 - when I click play it's going to execute
17:09 - that code which will change the image
17:11 - that's set in this card so you see it's
17:16 - set it to card 1 when I click play
17:19 - because this is the line of code see
17:22 - self thought first card image view is
17:25 - the iboutlet property which refers to
17:28 - this UI image object right and the image
17:33 - property of that object is what we must
17:36 - set in order to change the image so we
17:40 - did that in this line and we're setting
17:43 - that image property to a new UI image
17:46 - object which using this custom
17:50 - initializer method we can pass in the
17:52 - name of an arc asset to use and so
17:56 - that's how that works so let's do it
18:01 - with the second one self thought second
18:03 - card image view dot image equals UI
18:07 - image named let's say card 11 gonna run
18:18 - it again
18:23 - so I click play both cards are going to
18:27 - get the image property updated see so
18:32 - the next step in the next lesson is
18:33 - going to just randomize it instead of
18:36 - setting it right now we're hard-coding
18:38 - it to the ace and the Jack I just want
18:43 - to point out one thing is that when
18:45 - we're in the storyboard and we're
18:48 - changing the image for the uiimageview
18:51 - through this inspector pane you can see
18:54 - here this is the image property we're
18:56 - just setting it visually here versus
19:00 - doing it through code and setting it
19:02 - here by passing it a new UI image object
19:06 - the great thing is that by doing it
19:08 - through code it kind of gives us the
19:10 - flexibility to dynamically change the
19:14 - image if we want okay so I'll see you in
19:16 - the next lesson where we learn about how
19:18 - to randomize a number and then set the
19:21 - corresponding image

Cleaned transcript:

hey guys welcome to lesson 11 of how to make iphone apps with no programming experience and in this lesson we are going to take a look at the asset library in your Xcode project and how to add images into the project so that you can use them so I've got some beautiful card images here and let me just show some of them to you guys here's the Queen and there's a king now I'm not the original creator of these images I'll link and provide credit to the original author of these images below but he released them under the Creative Commons license so we're able to use them for our demo here and I don't have all of the cards for each suit I picked a couple from each suit just to make sure that we have ace all the way up to King so we have what is that 14 cards so for the purpose of our war card game I'm not going to use all 52 cards now before we add these images into our Xcode project for use take a look at these file names so I have for example I have the King card which is right here and then I have another one with then at 2 X suffix and then I have a third one with an at 3 X suffix well what are those let me just open them up and you can see so the app 2 X is literally just 2 times as large and 3x is 3 times as large and the reason that I have this is because we have a couple of different iPhones with different resolutions so we have the original iPhones which would use these ones and we have the retina iPhones which would use the at 2x and then now we have the iPhone 6 iPhone 6 plus which at the larger screen sizes use the at 3x the beautiful thing is that we don't have to manage which version to display as as we add all three versions and we name it according to this sort of nomenclature so at 2x4 the double the size and at 3x with three times the size as long as we name it like that and we add all three versions to our Xcode project the app is going to pick the appropriate version to display to the user depending on what sort of screen resolution that they have although creating graphics is beyond the scope of this course what you want to do is create your graphic asset at the largest size so whatever size you're thinking of create it at three times the size and then you want to take that larger size and scale it down to create the other two otherwise if you start with creating your graphic at this size and then you enlarge it to two X and then you enlarge up to 3x the 2x and 3x versions won't look very good and it may actually be blurry because you're scaling the image up so you actually want to work at this largest resolution and you want to scale it down to produce your other two copies in your graphic software such as Photoshop or sketch where you're creating your art assets you'll have the ability to scale it down and create these two versions manually but actually there's an app that can help you do that really easily and it's called prep oh it's available in the Mac App Store for free so let me show you guys how it works so here I have the app store listing for prep oh if you just open up Mac App Store on your computer and search for peple you'll find this app and it's again it's free and it's a handy little tool to help you create the at 2x and the 1x versions so let me demonstrate how it works very quickly this is what prepa looks like and I'm gonna go back to my finder for my king I'm going to delete the at 2x and the 1x versions okay so that just leaves me with this remember you want to create your artwork at the largest size right so when we create our art asset we're gonna name it whatever at 3x okay and then very simply you just drag this guy and drop it into here and then once you drag in all of the images that you want to convert or create the smaller versions of you just click export and you choose a location so I'm just gonna choose this and then if I go back to my finder you'll see that it's created the app 2 X version and the 1 X version so when you're working with a lot of art assets this can be a real time saver because you don't have to manually create the smaller versions in your graphics editing software instead you can just drag all of them in here and then do a single export to create all of those different versions ok so now let's go into our Xcode project and see how we can add the art assets into the project okay so right here I'm looking at the storyboard of our war card game Xcode project and you'll notice in the file navigator that we have this entry called images thought x.c assets and here there's a single entry for your default project and we close this pane so there's a lot more to look at and this is where you're going to add your app icons but we're not gonna do that right now this is called your asset library and this is where you're going to put all of the images for your app and it helps you manage your different versions so you can see that there's spaces for the 2x and the 3x versions so what we want to do when we add an image asset we're gonna right click here or if you have a single button Mouse you hold down ctrl and click you can get this menu as well and we'll hit new image set ok and then you just want to highlight that by default it's going to name it image and you can press ENTER to rename it or you can just click it once and then wait for the text box to pop up so I'm gonna name this card one OK and this is going to be my ace so let me open up find her again and grab my images so you can see here in the image asset library this is card one is the new image set that I created and on the right hand side there are three spots for each of the different resolutions that I need to add for this single image so I'm going to go back to my finder scroll down for my ace and then I can drag the 3x into the 3x slot and the 2x to the 2x slot and then this one into the One X so just like that whenever I want to use this image I can refer to it by this name card one and it's going to use the appropriate size depending on what type of screen the user is using my app on now here's a tip if your file name is not going to be different from what you want to name your image set you can actually just drag it on so let me demonstrate so for card I'm going to grab these three and then I'm just going to click and I'm gonna drag it here and just like that it creates an entry based on the file name and I'll add all of the different resolutions based on your at 3x in your at 2x suffixes or alternatively we can go like this again and create car 3 and you can come here you can highlight all three resolutions and you can click and you can drag it here as well it's going to be smart enough to add card three dot PNG to the One X card 3 at 2x dot PNG to the the second one and the last one to the highest resolution so it's not going to switch it around and mess up your resolutions so I'm just gonna go ahead and do that for cards 4 to 10 just drag it into our image asset library okay so now I've got one to ten I want to add my Jack Queen and King as well but I don't want to just drag it into my asset library because I actually want to name it well I suppose we can name it afterwards so let me just drag it on like that and then I can rename my jack to card eleven and you'll see why I want to name it this way a little later card 13 because we're going to be randomizing a number from 1 to 13 and then referring to the card by the number instead of Jack queen or king I have a couple more image assets here I have a background and I have a card backing so I'm going to drag these guys in here as well so this is just a card back and the green felt is the background we're gonna use okay so now we actually have some great image assets for our app now let's take a look at how we can actually add these images to our UI image views so I'm going to go into our storyboard I'm gonna open the inspector pane again because we're going to be modifying some of the properties the first thing I'm going to do is click the UI image view that's supposed to represent our background so I have this guy highlighted so its properties are going to show up in the inspector pane on the right hand side I'm going to flip these tabs up here till I get to this tab where you can set the image for this guy and if you hit the drop down you'll actually see all of our different image assets in here so I'm going to select background which is the green felt background and you can instantly see that it set that image as the image for our UI image view I'm going to do the same thing for the cards just as a demonstration but I'm gonna remove it after because we actually you know we don't want the cards to be hardcoded or rather we want the cards to dynamically change depending on when we click the play round button we want to randomize which cards to show okay so I'm just gonna choose let's say car ten here and let's say card 12 card 12 card 13 I mixed it up a little bit so let's go to image assets here the King should actually be card 13 and the Queen should be card 12 so I'm just gonna change that quickly okay so now this is better car 12 is Queen and card 13 is king so going back to our storyboard so you can see how easy it is to add images to your Xcode project and then set the images in your UI image views but obviously we don't want to leave our app like this so let's modify the button tap method to dynamically change these images when the button is clicked okay so let's go into our view controller dot Swift file because that's where the play round tapped method is located and in this method the code gets executed when the button is tapped so right now this line of code we had set just to test things out and it changes the button title to play round so we don't want to do this anymore instead we want to set the two UI image views to a different card actually let's make things more interesting let's go back to here and let's change these to the card backs and then I'm gonna save it go back to view controller dot Swift and then in here we want to manipulate those two UI image views and set the image property of them how do we do that well we exposed those two UI image views here as iboutlet properties remember so we can refer to these guys using these properties so I'm going to say self dot first card image view and Xcode autocompletes it after I type a couple letters I just thought the press Enter so now this is referring to the uiimageview object for the first card view I'm gonna press dot because I want to access one of the properties and image is the property that I want to access so let me step back for a second when I press dot and I press I here it goes to image so that's the property name but on the left hand side here you can see that this is the type of object that this property needs or expects so I know that it needs a UI image object so what I'm gonna do is create a new UI image object and UI image is one of those UI kit classes okay so I can do that very simply remember that in order to create a new object of a class you just write class name and write these two brackets so what happens when we create a new object well the anit method gets fired right let's pull up the documentation for the UI image class so here I've got the UI kit framework reference which I showed you guys in a previous lesson and I told you guys we're gonna use this a lot so I'm going to search here for UI image and there it is a UI image object is a high level way to display image data so let me click into that class and you can see here that it's got a special init method called well it's called an it but it accepts one parameter called named so let's click that and let's see what that does so it tells us that the method is in it and this is a parameter that is of type string so we can pass in a string in here and it returns a UI image object for us so let's see the name parameter name of the file okay the method looks for an image with specified name in the applications main bundle all of the images that we added into the asset library are in the applications main bundle so all we need to do if we go back into our Xcode project is specify one of the names in here okay so let's call that special initializer method and if I just open up a bracket in here Xcode will instantly tell you you know what sorts of things are available and here is the method that we're looking for so I'm going to click that and now we can just specify a name let's say card one okay and basically what's going to happen is a new UI image object is going to be created using its custom special initializer method that accepts a string parameter it's going to look for card one in the asset library and it's going to basically create a UI image object that is initialized for this image asset and it's going to assign that UI image object into the image property of our UI image view okay so let's run it and see what happens okay so here we see all of the image assets which we set in the storyboard so when I click play it's going to execute that code which will change the image that's set in this card so you see it's set it to card 1 when I click play because this is the line of code see self thought first card image view is the iboutlet property which refers to this UI image object right and the image property of that object is what we must set in order to change the image so we did that in this line and we're setting that image property to a new UI image object which using this custom initializer method we can pass in the name of an arc asset to use and so that's how that works so let's do it with the second one self thought second card image view dot image equals UI image named let's say card 11 gonna run it again so I click play both cards are going to get the image property updated see so the next step in the next lesson is going to just randomize it instead of setting it right now we're hardcoding it to the ace and the Jack I just want to point out one thing is that when we're in the storyboard and we're changing the image for the uiimageview through this inspector pane you can see here this is the image property we're just setting it visually here versus doing it through code and setting it here by passing it a new UI image object the great thing is that by doing it through code it kind of gives us the flexibility to dynamically change the image if we want okay so I'll see you in the next lesson where we learn about how to randomize a number and then set the corresponding image
