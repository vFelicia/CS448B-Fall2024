With timestamps:

00:05 - hey guys welcome to lesson 11 of how to
00:08 - make iphone apps with no programming
00:10 - experience and in this lesson we are
00:13 - going to look at iboutlet properties and
00:16 - how to expose all of the elements we
00:19 - added to the storyboard to the view
00:21 - controller for manipulation in the last
00:24 - two lessons you learned a lot about
00:25 - swift classes and you learned about
00:28 - UIKit so let me point out to you how
00:32 - we've been using uikit all along so in
00:36 - building this storyboard we were looking
00:38 - through this objects library in the
00:41 - lower right hand corner here while all
00:43 - of these elements are actually part of
00:47 - UIKit these are all classes in kind of
00:51 - like a visual form so when we drag it on
00:54 - to the storyboard just to remind you we
00:57 - added a button here we added two UI
01:00 - image views we added a big UI in image
01:03 - view at the back and the button is a UI
01:06 - button and these image views are UI
01:08 - image views so if you bring up the UI
01:11 - kit reference and you search for it
01:15 - you'll actually find the UI button class
01:18 - here and if you search for the UI image
01:22 - view you'll find it as well you know
01:26 - these two classes are pre-built by Apple
01:29 - for us to use so that we can basically
01:32 - create buttons and display images very
01:35 - easily in our apps without having to
01:37 - code any of that behavior or ourselves
01:39 - and when we're setting the attributes
01:43 - let's say I'm gonna click this element
01:45 - here and in the inspector view right
01:48 - here you know you can set the background
01:50 - color you can set the alpha you can set
01:53 - the text that what the image is all of
01:55 - the stuff that you're configuring here
01:57 - you're actually setting properties of
01:59 - that object when you run the app the
02:03 - information in this storyboard is going
02:06 - to be used to create objects that the
02:09 - storyboard specifies so in this example
02:12 - when we run the app
02:13 - it's gonna take a look at this
02:15 - storyboard and this itself is a uiview
02:19 - object first of all and we've got a
02:22 - background uiimageview object it's gonna
02:25 - create two more uiimageview objects to
02:28 - display the cards it's gonna create a
02:30 - uibutton object and when the app is run
02:33 - this information is gonna get turned
02:36 - into objects of those classes along with
02:39 - all of the configured properties here
02:42 - the objects that are created will have
02:44 - the property set according to what we've
02:47 - configured here in interface builder
02:50 - okay so this is consistent with what we
02:53 - talked about in the classes lesson when
02:56 - I said that X and X Co project is just a
02:59 - writing a bunch of classes which gets
03:01 - turned into objects which does the
03:04 - interacting with each other it's just
03:06 - that for the view instead of writing
03:09 - code in a class you are visually doing
03:12 - it in a storyboard which gets turned
03:14 - into objects and you know what you can
03:16 - actually just forego the storyboard
03:18 - later when you get more familiar and you
03:21 - get more advanced with things you can
03:23 - forego the storyboard completely and you
03:26 - can use Swift code to create all of
03:29 - these classes sorry create all of these
03:32 - objects and add them to the view instead
03:34 - of describing it with a storyboard okay
03:37 - so now let's take a look at the view
03:38 - controller class view controller dot
03:41 - Swift and now you will understand what
03:45 - all of this code means because we went
03:47 - over it in the last two lessons so the
03:49 - first line is import uikit so import is
03:54 - a keyword which allows us to use all of
03:56 - the classes in UIKit so that's why this
04:00 - import statement is here and you can see
04:03 - here that this is a class declaration
04:05 - for a class called view controller and
04:07 - it's subclasses UI view controller UI
04:11 - view controller is actually a class from
04:14 - UI kit so we can search for it
04:19 - in here so there you go and this is a
04:24 - class that apple provides for us to use
04:27 - to manage the UI view so we don't
04:30 - actually have to code up the UI view
04:33 - controller or the UID those classes are
04:35 - provided for us and in this view
04:37 - controller class we can see that there's
04:39 - our two methods you both are overridden
04:43 - from the super class and that's
04:45 - viewdidload in here it calls the super
04:49 - classes viewdidload
04:50 - and here we can provide any custom
04:54 - functionality and this method is
04:57 - automatically triggered when this view
05:00 - is created and attached to the view
05:04 - controller for management and then
05:06 - there's another overridden method did
05:09 - receive memory warning and then it also
05:12 - calls the super classes did receive
05:15 - memory warning we most likely don't have
05:17 - to worry about this too much but we can
05:19 - manually free up memory here if we need
05:21 - and that's basically it this is kind of
05:25 - like your base view controller so we
05:28 - kind of have a divide because our view
05:32 - is specified through this visual
05:35 - interface builder and the view
05:39 - controller is described with Swift code
05:41 - here so how do we emerge how do we
05:43 - connect the two so that the view
05:46 - controller can actually manage these
05:48 - objects that will be created by the
05:51 - storyboard so we can do that using
05:54 - iboutlet properties we've talked about
05:57 - properties before in a previous lesson
05:59 - iboutlet properties are nothing more
06:02 - than regular properties except that they
06:04 - refer to elements that you have declared
06:09 - in the storyboard so there's a very easy
06:12 - way to declare an iboutlet property and
06:15 - connect it to one of these elements that
06:18 - are in the storyboard so all we need to
06:20 - do is go up here to these view buttons
06:24 - right now we're looking at the standard
06:26 - editor you can actually change it to
06:28 - something called the assistant editor
06:30 - and I'm gonna click that when you do
06:32 - that it changes the view into two
06:35 - different panes I'm just gonna close
06:37 - this document outline so we get a little
06:40 - more space I'm going to close this tab
06:42 - as well just give ourselves a little
06:45 - more space here and what we want to do
06:48 - is on the left side we want to look at
06:51 - our view in the storyboard and on the
06:53 - right-hand side we want to look at the
06:55 - view controller class and all you have
06:59 - to do is let's say if we want to create
07:02 - an iboutlet property for this first
07:06 - image view all you have to do is hold
07:10 - down control on your keyboard and then
07:12 - click and drag and this blue line will
07:16 - form and you want to drag it right
07:18 - underneath this class declaration where
07:21 - you would normally declare your
07:22 - properties for that class anyways
07:24 - so when you drop it or you let go of the
07:27 - mouse button it'll pop up a little
07:28 - window and you can see that we can
07:32 - specify a name and we can specify a type
07:36 - because with property declarations you
07:39 - have to declare what type of data it'll
07:41 - hold right and this type uiimageview
07:43 - specifies that that property is going to
07:46 - be referring to a uiimageview object so
07:50 - I'm gonna give it a name I'm gonna call
07:52 - it first card image of you and for the
08:00 - storage type you can just leave it as we
08:03 - there's another option for strong but
08:06 - we're not going to go through that now
08:08 - because it will require a more advanced
08:12 - understanding of how the memory
08:14 - management works behind the scenes and
08:16 - we're gonna go through that later on
08:18 - however if you want to read about it now
08:21 - I'll provide links in the bottom so that
08:24 - you can do further research into that if
08:27 - you would like but for now you're not
08:29 - going to need to know the difference
08:31 - then you want to click connect so what
08:34 - happens is this keyword iboutlet is
08:38 - created and then week is referring to
08:42 - that storage type we talked about
08:44 - and then this bar is starting the
08:48 - property declaration that you know and
08:50 - that we've done in the previous lesson
08:52 - this is the property name you know
08:54 - followed by colon and then the type of
08:56 - data that it's gonna hold and this
08:58 - exclamation mark is something that we
09:00 - haven't gone through yet but we also
09:03 - will not go through that in this video
09:06 - and again I'll provide a link at the
09:08 - bottom if you want to do further
09:10 - research into that but it's probably
09:11 - going to confuse you more than it's
09:13 - going to help right now okay next I'm
09:16 - going to do the same thing with the
09:18 - second image view I'm just going to drag
09:22 - it right below this one I'm gonna call
09:24 - this one second card image view what
09:30 - else will the view controller need to
09:32 - manage it's going to manage the button
09:36 - so I'm gonna click and drag it there I'm
09:42 - gonna call this the play round button
09:46 - oops
09:47 - I called it a burr on accidentally and
09:50 - now I'm actually going to show you
09:52 - something that a lot of beginners do by
09:56 - accident and it ends up crashing their
09:58 - app so I made a typo so naturally you'll
10:03 - want to delete this right and you'll
10:06 - want to try it again right and this time
10:12 - you're gonna call it play round button
10:18 - however what actually is happening
10:22 - behind the scenes is that now your play
10:24 - button is connected to two properties
10:26 - it's connected to this play round button
10:30 - but it's also connected to the typo
10:34 - property that you just deleted and if we
10:37 - don't disconnect it from that deleted
10:40 - property when you run your app it's
10:42 - going to crash because it can't find
10:44 - that property so what you want to do is
10:46 - go back to your storyboard and if you
10:50 - have a mouse with two buttons you can
10:52 - just right click or if you don't have if
10:56 - you have a single mouse button you can
10:58 - down control and single click it and
11:01 - then you'll get this menu as well so if
11:03 - we scroll down to referencing outlets
11:06 - you'll see that it's connected still to
11:09 - play around brawn which no longer exists
11:14 - so we have to click this X to break the
11:16 - connection and now it's only connected
11:18 - to play around button okay so that's
11:21 - really important because I see that
11:22 - mistake being made a lot and people
11:26 - don't know why their app is crashing ok
11:30 - the last thing we want to connect is
11:32 - this big background this big uiimageview
11:35 - so I'm just going to do what we've been
11:38 - doing here background image view ok and
11:46 - you can see also that here these little
11:50 - grey circles indicate that these outlet
11:55 - properties are connected to elements if
11:57 - we broke off the connection you would
11:59 - see a circle with an empty center it
12:03 - doesn't have the grace filled in and
12:05 - that means that this outlet property is
12:08 - not connected to any element in your
12:10 - storyboard ok and just like that we've
12:14 - created 4 ID outlet properties all of
12:17 - which are connected to the elements in
12:19 - our storyboard in our view so now from
12:23 - the view controller we can write Swift
12:26 - code just like we've done in the
12:27 - previous lessons when we were doing it
12:29 - in the playground how we were accessing
12:32 - the properties for our classes and
12:35 - assigning things in to it and changing
12:37 - changing things we could do the same
12:39 - thing here so for example in my
12:42 - viewdidload now I can type self dot you
12:47 - know first card image view like that so
12:51 - now I'm actually referring to this
12:54 - property but this property is referring
12:56 - to this element in my view this object
12:59 - and I can go dot and I can access all of
13:02 - its methods and properties and I can
13:05 - configure them and change them through
13:07 - code and if you want to find out what
13:11 - kind of
13:11 - these or methods they have you can
13:14 - always refer back to the uikit
13:16 - documentation and just look up
13:19 - uiimageview right here if you click that
13:24 - you can toggle it to swift and then on
13:30 - the left upper hand side usually Apple
13:34 - will have some common tasks that you do
13:37 - with this object or this class and when
13:40 - you click it it's going to show you how
13:42 - to use it so that's really helpful to
13:44 - know at first you won't know many of the
13:48 - properties and methods of these uikit
13:50 - classes uikit is just so huge and
13:53 - there's so many different properties and
13:56 - methods in each class so my advice is
13:58 - that you don't have to go and start
14:00 - memorizing anything as long as you are
14:02 - following the videos and we're going to
14:04 - be working with these UIKit classes
14:06 - you're gonna see me use properties and
14:07 - methods of these classes so you're gonna
14:10 - know it exists and a lot of a lot of the
14:13 - times when i'm using brand new uikit
14:15 - class that I've never used before I will
14:18 - have to refer to the documentation to
14:20 - look at what properties and methods are
14:22 - available with it so that's very common
14:24 - as well and that's why the documentation
14:26 - is there so right now I am just going to
14:29 - very simply I'm gonna change the title
14:32 - of the button just to demonstrate a
14:34 - simple configuration
14:36 - I'm gonna go self-thought play round
14:39 - button and the UI button class has a
14:42 - method called set title and this is the
14:47 - method that we're going to use to change
14:49 - the text in the button here so you're
14:53 - gonna see that even though in the
14:54 - storyboard we specified the title to be
14:57 - deal after the storyboard gets turned
14:59 - into a view object and all of these guys
15:02 - into their own objects when it gets
15:04 - connected to the UI view controller this
15:07 - viewdidload function is going to get
15:09 - called and then this line that we're
15:12 - writing now this line of Swift code is
15:14 - going to access that UI button object
15:17 - that is created and it's gonna call this
15:20 - method set title and then it's gonna
15:22 - change the text to
15:25 - play and here the next thing we have to
15:29 - specify for this method is a UI control
15:32 - state the button has a couple of
15:35 - different states we want to set it for
15:37 - the normal state so all we have to do is
15:39 - type UI control state dot normal when we
15:49 - were working in the playground we were
15:51 - calling methods that had no input in
15:54 - them so normally those methods just
15:56 - looked like this the method name
16:00 - followed by two brackets but the more
16:03 - complicated methods actually have
16:06 - parameters that you need to provide in
16:07 - this is one of those methods so in this
16:13 - one we pass in two parameters so I'm
16:16 - gonna run it now and you're gonna see
16:18 - that the button has changed to play just
16:22 - like that so in this lesson I just
16:24 - wanted to demonstrate how we were using
16:26 - the UI cube classes in our Xcode project
16:28 - and I wanted to show you guys how to
16:31 - connect those elements that we added
16:33 - into the storyboard to the view
16:35 - controller

Cleaned transcript:

hey guys welcome to lesson 11 of how to make iphone apps with no programming experience and in this lesson we are going to look at iboutlet properties and how to expose all of the elements we added to the storyboard to the view controller for manipulation in the last two lessons you learned a lot about swift classes and you learned about UIKit so let me point out to you how we've been using uikit all along so in building this storyboard we were looking through this objects library in the lower right hand corner here while all of these elements are actually part of UIKit these are all classes in kind of like a visual form so when we drag it on to the storyboard just to remind you we added a button here we added two UI image views we added a big UI in image view at the back and the button is a UI button and these image views are UI image views so if you bring up the UI kit reference and you search for it you'll actually find the UI button class here and if you search for the UI image view you'll find it as well you know these two classes are prebuilt by Apple for us to use so that we can basically create buttons and display images very easily in our apps without having to code any of that behavior or ourselves and when we're setting the attributes let's say I'm gonna click this element here and in the inspector view right here you know you can set the background color you can set the alpha you can set the text that what the image is all of the stuff that you're configuring here you're actually setting properties of that object when you run the app the information in this storyboard is going to be used to create objects that the storyboard specifies so in this example when we run the app it's gonna take a look at this storyboard and this itself is a uiview object first of all and we've got a background uiimageview object it's gonna create two more uiimageview objects to display the cards it's gonna create a uibutton object and when the app is run this information is gonna get turned into objects of those classes along with all of the configured properties here the objects that are created will have the property set according to what we've configured here in interface builder okay so this is consistent with what we talked about in the classes lesson when I said that X and X Co project is just a writing a bunch of classes which gets turned into objects which does the interacting with each other it's just that for the view instead of writing code in a class you are visually doing it in a storyboard which gets turned into objects and you know what you can actually just forego the storyboard later when you get more familiar and you get more advanced with things you can forego the storyboard completely and you can use Swift code to create all of these classes sorry create all of these objects and add them to the view instead of describing it with a storyboard okay so now let's take a look at the view controller class view controller dot Swift and now you will understand what all of this code means because we went over it in the last two lessons so the first line is import uikit so import is a keyword which allows us to use all of the classes in UIKit so that's why this import statement is here and you can see here that this is a class declaration for a class called view controller and it's subclasses UI view controller UI view controller is actually a class from UI kit so we can search for it in here so there you go and this is a class that apple provides for us to use to manage the UI view so we don't actually have to code up the UI view controller or the UID those classes are provided for us and in this view controller class we can see that there's our two methods you both are overridden from the super class and that's viewdidload in here it calls the super classes viewdidload and here we can provide any custom functionality and this method is automatically triggered when this view is created and attached to the view controller for management and then there's another overridden method did receive memory warning and then it also calls the super classes did receive memory warning we most likely don't have to worry about this too much but we can manually free up memory here if we need and that's basically it this is kind of like your base view controller so we kind of have a divide because our view is specified through this visual interface builder and the view controller is described with Swift code here so how do we emerge how do we connect the two so that the view controller can actually manage these objects that will be created by the storyboard so we can do that using iboutlet properties we've talked about properties before in a previous lesson iboutlet properties are nothing more than regular properties except that they refer to elements that you have declared in the storyboard so there's a very easy way to declare an iboutlet property and connect it to one of these elements that are in the storyboard so all we need to do is go up here to these view buttons right now we're looking at the standard editor you can actually change it to something called the assistant editor and I'm gonna click that when you do that it changes the view into two different panes I'm just gonna close this document outline so we get a little more space I'm going to close this tab as well just give ourselves a little more space here and what we want to do is on the left side we want to look at our view in the storyboard and on the righthand side we want to look at the view controller class and all you have to do is let's say if we want to create an iboutlet property for this first image view all you have to do is hold down control on your keyboard and then click and drag and this blue line will form and you want to drag it right underneath this class declaration where you would normally declare your properties for that class anyways so when you drop it or you let go of the mouse button it'll pop up a little window and you can see that we can specify a name and we can specify a type because with property declarations you have to declare what type of data it'll hold right and this type uiimageview specifies that that property is going to be referring to a uiimageview object so I'm gonna give it a name I'm gonna call it first card image of you and for the storage type you can just leave it as we there's another option for strong but we're not going to go through that now because it will require a more advanced understanding of how the memory management works behind the scenes and we're gonna go through that later on however if you want to read about it now I'll provide links in the bottom so that you can do further research into that if you would like but for now you're not going to need to know the difference then you want to click connect so what happens is this keyword iboutlet is created and then week is referring to that storage type we talked about and then this bar is starting the property declaration that you know and that we've done in the previous lesson this is the property name you know followed by colon and then the type of data that it's gonna hold and this exclamation mark is something that we haven't gone through yet but we also will not go through that in this video and again I'll provide a link at the bottom if you want to do further research into that but it's probably going to confuse you more than it's going to help right now okay next I'm going to do the same thing with the second image view I'm just going to drag it right below this one I'm gonna call this one second card image view what else will the view controller need to manage it's going to manage the button so I'm gonna click and drag it there I'm gonna call this the play round button oops I called it a burr on accidentally and now I'm actually going to show you something that a lot of beginners do by accident and it ends up crashing their app so I made a typo so naturally you'll want to delete this right and you'll want to try it again right and this time you're gonna call it play round button however what actually is happening behind the scenes is that now your play button is connected to two properties it's connected to this play round button but it's also connected to the typo property that you just deleted and if we don't disconnect it from that deleted property when you run your app it's going to crash because it can't find that property so what you want to do is go back to your storyboard and if you have a mouse with two buttons you can just right click or if you don't have if you have a single mouse button you can down control and single click it and then you'll get this menu as well so if we scroll down to referencing outlets you'll see that it's connected still to play around brawn which no longer exists so we have to click this X to break the connection and now it's only connected to play around button okay so that's really important because I see that mistake being made a lot and people don't know why their app is crashing ok the last thing we want to connect is this big background this big uiimageview so I'm just going to do what we've been doing here background image view ok and you can see also that here these little grey circles indicate that these outlet properties are connected to elements if we broke off the connection you would see a circle with an empty center it doesn't have the grace filled in and that means that this outlet property is not connected to any element in your storyboard ok and just like that we've created 4 ID outlet properties all of which are connected to the elements in our storyboard in our view so now from the view controller we can write Swift code just like we've done in the previous lessons when we were doing it in the playground how we were accessing the properties for our classes and assigning things in to it and changing changing things we could do the same thing here so for example in my viewdidload now I can type self dot you know first card image view like that so now I'm actually referring to this property but this property is referring to this element in my view this object and I can go dot and I can access all of its methods and properties and I can configure them and change them through code and if you want to find out what kind of these or methods they have you can always refer back to the uikit documentation and just look up uiimageview right here if you click that you can toggle it to swift and then on the left upper hand side usually Apple will have some common tasks that you do with this object or this class and when you click it it's going to show you how to use it so that's really helpful to know at first you won't know many of the properties and methods of these uikit classes uikit is just so huge and there's so many different properties and methods in each class so my advice is that you don't have to go and start memorizing anything as long as you are following the videos and we're going to be working with these UIKit classes you're gonna see me use properties and methods of these classes so you're gonna know it exists and a lot of a lot of the times when i'm using brand new uikit class that I've never used before I will have to refer to the documentation to look at what properties and methods are available with it so that's very common as well and that's why the documentation is there so right now I am just going to very simply I'm gonna change the title of the button just to demonstrate a simple configuration I'm gonna go selfthought play round button and the UI button class has a method called set title and this is the method that we're going to use to change the text in the button here so you're gonna see that even though in the storyboard we specified the title to be deal after the storyboard gets turned into a view object and all of these guys into their own objects when it gets connected to the UI view controller this viewdidload function is going to get called and then this line that we're writing now this line of Swift code is going to access that UI button object that is created and it's gonna call this method set title and then it's gonna change the text to play and here the next thing we have to specify for this method is a UI control state the button has a couple of different states we want to set it for the normal state so all we have to do is type UI control state dot normal when we were working in the playground we were calling methods that had no input in them so normally those methods just looked like this the method name followed by two brackets but the more complicated methods actually have parameters that you need to provide in this is one of those methods so in this one we pass in two parameters so I'm gonna run it now and you're gonna see that the button has changed to play just like that so in this lesson I just wanted to demonstrate how we were using the UI cube classes in our Xcode project and I wanted to show you guys how to connect those elements that we added into the storyboard to the view controller
