With timestamps:

00:00 - hi welcome to lesson six in the last
00:02 - lesson you learned some basic Swift code
00:04 - let me ask you something how does the
00:07 - user interact with an app usually it's
00:09 - something like the user takes an action
00:11 - such as tapping a news headline and the
00:13 - app reacts by displaying that article
00:16 - action reaction well that implies that
00:19 - when the user takes an action we need to
00:22 - be able to run some specific pieces of
00:24 - code in that case we need a way to
00:26 - organize our code into bite-sized chunks
00:28 - so that when the user takes this action
00:30 - we run this block of code and when the
00:33 - user takes that action we run another
00:35 - block of code while Swift has something
00:37 - called functions and this is basically
00:39 - wrapping up a block of code and giving
00:42 - it a name so that when we need to
00:43 - execute that code we just call it by its
00:45 - name so let's dive into a playground and
00:48 - see how we use functions we're gonna
00:50 - start by creating a brand new playground
00:52 - so go ahead and get started with the
00:55 - playground under iOS
00:56 - let's choose blank playground and I'm
00:59 - gonna call this the functions playground
01:01 - and just save it on the desktop so in
01:03 - order to declare a function we use the
01:06 - keyword fu NC and then we type a space
01:08 - and then we type in the name of the
01:10 - function now the name that we give the
01:12 - function is the same name that we're
01:14 - going to call the function with to
01:16 - execute the code inside the function so
01:18 - I'm gonna call this one to say hello the
01:21 - next thing we do is open up a pair of
01:23 - rounded brackets like that
01:25 - now inside those brackets there can be
01:27 - things called parameters which we're
01:30 - gonna cover later on in this lesson but
01:32 - for now we're going to just leave it as
01:34 - an empty set of rounded brackets next
01:36 - we're gonna hit space and find the curly
01:39 - brackets on your keyboard and we're
01:41 - going to open up a pair of those just
01:43 - like that an opening one and a closing
01:46 - one and inside of those curly brackets
01:50 - that's where the code for our function
01:52 - goes so let's hit enter a couple of
01:54 - times to create some space and inside
01:57 - this function I'm going to have only a
01:59 - single line of code I'm just gonna print
02:01 - something into the console so I'm gonna
02:03 - print out hello just like that now
02:05 - notice that in the console nothing gets
02:08 - output because the code inside my
02:10 - function is not going to be run until I
02:13 - actually
02:14 - call that a function by its name now
02:16 - let's go down here and line 12 and I'll
02:18 - demonstrate how to call it all you have
02:21 - to do is type the name of the function
02:23 - followed by those rounded brackets like
02:27 - that and then you're going to see the
02:29 - output because it's running this line of
02:31 - code when you write a function you
02:33 - usually think about performing a
02:35 - specific task in our earlier use case
02:37 - you might write a function to display an
02:39 - article so that when the user taps on
02:42 - the nice headline you can run that
02:43 - function to display that article now
02:45 - sometimes a function may require some
02:47 - sort of input to perform its task for
02:50 - example what happens when the user taps
02:53 - on headline number one versus news
02:55 - headline number two are you going to
02:57 - write a different function for every
02:59 - single news headline of course you're
03:01 - not and furthermore the news changes
03:02 - every day so you can't write a function
03:05 - for a piece of news that hasn't come out
03:07 - yet
03:07 - instead you write a function that
03:09 - displays an article but it doesn't know
03:12 - or care which one it is you have to
03:14 - specify which article it should show
03:16 - when you call that function by passing
03:19 - that article into the function and then
03:21 - your function will take that input and
03:22 - display that article you can do this
03:25 - with function parameters
03:26 - remember those rounded brackets in the
03:29 - function call well inside of those
03:31 - brackets you can specify what sort of
03:33 - data you want to be passed into the
03:34 - function when it's called in the example
03:37 - below we declare a function called say
03:39 - hello to in between the brackets you
03:41 - have a parameter called name that is of
03:43 - the data type string that kind of looks
03:45 - like a variable declaration but without
03:47 - the VAR keyword right whenever you call
03:49 - the say hello to function you're going
03:51 - to have to supply a piece of text with
03:53 - that function call now let's go into the
03:55 - playground and see how we can work with
03:56 - function parameters now as you were
03:59 - typing that a function name you might
04:01 - have noticed Xcode try to autocomplete
04:03 - it for you so let me demonstrate just in
04:06 - case that didn't happen for you let me
04:07 - erase this function call
04:09 - let me start typing the names more
04:11 - slowly s a Y as you can see it pops up
04:14 - this autocomplete menu trying to help
04:18 - you out so if you see what you want to
04:20 - type out already you can simply hit
04:23 - enter because it's already highlighted
04:25 - the function call I want it to type
04:27 - out or if it's not this particular one
04:29 - but you see it somewhere down here you
04:30 - can hit the up or down arrow keys on
04:32 - your keyboard to select it and then hit
04:34 - enter so we're gonna select this one
04:36 - because that's what we're intending to
04:38 - call and it will complete that function
04:41 - call for you all right so now before I
04:43 - demonstrate the function with the
04:45 - parameters why don't we go ahead and add
04:48 - a comment here and just call this one
04:49 - the basic function because we're going
04:52 - to have a couple of different things in
04:54 - here so this one's a function with a
04:56 - width parameter so I'm going to say all
05:00 - right so let's write out our function
05:02 - say hello to and then we're going to
05:05 - open up our pair of round brackets but
05:09 - this time inside there we are going to
05:12 - put a parameter now this parameter is
05:14 - going to dictate that when you call this
05:17 - function say hello to you're gonna have
05:19 - to pass in some data and this parameter
05:21 - basically dictates what sort of data
05:23 - you're supposed to pass in so I'm gonna
05:25 - call my parameter name and then colon
05:28 - followed by the type of data that I want
05:32 - to be passed in and there you go that's
05:34 - one parameter that needs to be passed in
05:36 - space open up a pair of curly brackets
05:40 - in between there we're going to hit
05:43 - enter a couple of times where we are
05:45 - going to write our code now in here I
05:48 - want to print out the name that gets
05:49 - passed in well how do I access that data
05:52 - that gets passed in well this parameter
05:54 - here actually has a parameter name and
05:57 - conveniently we called it name so this
05:59 - is how we access that data that gets
06:02 - passed in by referencing this parameter
06:05 - name so all I need to do is say print
06:07 - name like that and down here of course
06:11 - nothing gets output until we call the
06:14 - function now watch this I'm going to
06:17 - start typing s a Y and now Xcode will
06:22 - show me there are a couple of different
06:24 - function calls I can make this one was
06:26 - our basic function and this one is our
06:29 - new one that includes a parameter so I'm
06:31 - going to go ahead and press the down key
06:32 - and then press ENTER and it's going to
06:35 - basically autocomplete that function and
06:38 - it's going to highlight the parameter
06:40 - we need to specify in order to complete
06:42 - the function call so I'm gonna pass in a
06:45 - string piece of data in there open up a
06:47 - pair of quotation marks and let's put in
06:51 - Tom and this actually completes the
06:53 - function call and you can see here down
06:56 - here it says prints out Tom and this
06:59 - piece of text gets passed in to the
07:01 - function call through this parameter and
07:03 - then this line of code basically just
07:05 - takes that parameter and prints it out
07:07 - into the console notice that in here I
07:11 - have to specify that parameter name
07:13 - followed by colon and followed by the
07:15 - actual piece of data that I want passed
07:17 - in now what if I want to print out hello
07:21 - Tom instead of just the name well I'm
07:23 - gonna show you something cool where you
07:25 - can actually insert a variable or a
07:27 - parameter your parameter is basically a
07:29 - variable you don't insert that variable
07:31 - into a string or a piece of text so
07:34 - let's write a piece of text here let's
07:38 - say hello and space and then in order to
07:42 - insert name dynamically into this piece
07:45 - of text you do backslash open up a pair
07:48 - of rounded brackets like that and in
07:51 - between those rounded brackets you put
07:53 - the name of your variable in our case it
07:55 - would be just name and so now you can
07:57 - see down here it says hello space Tom
08:00 - don't worry about this if you you know
08:02 - don't remember how to do that we're
08:04 - going to actually use this again in a
08:06 - couple of lessons now I want to show you
08:08 - how you can specify a function that has
08:10 - more than one parameter so wrap right up
08:13 - here we have name colon string if we
08:16 - want it to specify a second parameter
08:18 - all we need to do is just hit comma and
08:20 - space and we're gonna add another
08:22 - parameter this time I'm going to call it
08:25 - h colon int it's gonna be int datatype
08:29 - and so now xcode to text because we've
08:32 - changed it so that calling this function
08:34 - requires two data inputs now Xcode
08:37 - notices that hey we're not doing that
08:39 - here and that's an error so I'm just
08:41 - going to erase this line of code say now
08:46 - I can actually just select it from this
08:48 - autocomplete menu and hit enter as you
08:51 - can see
08:53 - structure kind of coincides with what's
08:56 - up here right I have named : and then I
08:59 - have to specify the string data to pass
09:01 - in followed by a comma and then age
09:04 - which is the second parameter name :
09:07 - followed by the actual int data that I
09:10 - want Hostin so let's pass in Tom and I
09:13 - press tab allows me to just jump
09:15 - straight to specifying the second
09:17 - parameter there and let me just put 35
09:20 - and of course it still says hello Tom
09:23 - because we haven't incorporated this
09:25 - second parameter so in this statement
09:27 - here hello name let's put comma you are
09:32 - I want to insert the age at this point
09:36 - age space years old now what's output
09:42 - down here just give a moment for X go to
09:44 - process the new code hello Tom you're 35
09:48 - years old and that's just based on what
09:50 - we type in here you know I can say 45
09:53 - and that's gonna turn into 45 years old
09:56 - so you can expand on this and you can do
09:58 - three parameters or four parameters but
10:00 - I wouldn't go crazy with this in the
10:03 - future you're gonna learn about how you
10:05 - can actually collect pieces of data
10:07 - together and specify them in a single
10:09 - parameter but for now you know you're
10:11 - passing simple values around and so if
10:13 - you need to pass in three or four or
10:15 - five you know or eight parameters then
10:17 - go ahead and do that one thing I do want
10:19 - to point out though is that in your
10:21 - function call you can actually make it
10:24 - so that you can omit these parameter
10:30 - names here so I could call my function
10:32 - like this alright right now this is
10:39 - going to be an error right but let me
10:41 - show you how to make it so that you can
10:42 - omit these parameter names and that kind
10:44 - of saves you some typing so here up here
10:47 - you can specify underscore and then
10:50 - space right in front of that parameter
10:52 - name same with the second parameter
10:55 - underscore and in space when you do that
10:58 - let's just erase this function call
11:00 - because this is now incorrect I'm going
11:02 - to use autocomplete again say hello to
11:05 - now you can see this entire thing is
11:08 - highlighted if I specify my parameter
11:11 - you can see now I don't need to put
11:14 - those labels in there what you're
11:15 - actually doing with this underscore is
11:18 - you're omitting the argument label for
11:21 - that parameter but I'm not going to go
11:23 - into that now because I don't want to
11:25 - confuse you if you do want to learn
11:26 - about that I'll link to something in the
11:29 - description below and you can look into
11:31 - it if you're curious but down the line
11:32 - once you learn more about Swift you're
11:35 - going to learn about it anyways
11:36 - for now all you need to know is that
11:39 - underscore space in front of your
11:42 - parameter name allows you to omit it
11:44 - from the function call like this now you
11:46 - know how to write functions which expect
11:48 - some sort of input to work with another
11:50 - great use of functions is to take some
11:52 - data input transform it and then return
11:55 - that result functions can do this by
11:57 - using the return keyword in the function
11:59 - below it takes an integer input and then
12:02 - it adds 4 to it and then it gives it
12:03 - back to us
12:04 - notice in this function declaration that
12:06 - after the rounded brackets we have an
12:08 - arrow and then we have a data type int
12:10 - this indicates the type of data that the
12:12 - function will give back when you call it
12:14 - let's go back to our playground and try
12:16 - it out alright so now let's create
12:18 - another section down here and let's
12:20 - create some space here so we can look at
12:23 - the middle of the screen and I'm going
12:25 - to call this function with return value
12:29 - okay so let's type out our function that
12:31 - we demonstrated add 4 to that's capital
12:36 - T and open up a bracket we're gonna type
12:40 - in X colon int that's going to be the
12:45 - data that needs to be passed in an
12:46 - integer and this time we are going to
12:49 - type - make sure you've got a space here
12:52 - - greater than symbol and then space and
12:56 - now we specify the type of the data that
13:00 - this function will return so I'm
13:02 - actually going to return in int data
13:05 - type let's open up a pair of curly
13:08 - brackets and let's create some space
13:10 - down here so what I'm going to do here I
13:13 - am going to create a variable let's say
13:16 - I recall this the sum
13:19 - equals and we're going to take the
13:21 - parameter that gets passed in which is X
13:23 - and I'm going to add 4 to it so the
13:28 - variable sum contains X plus 4 now since
13:33 - we specified that this function actually
13:35 - returns a value we need to somehow get
13:38 - this sum to be returned and we use a
13:40 - keyword called return
13:43 - that's exactly how it sounds and we are
13:46 - going to return this sum just like that
13:48 - and in fact if you forget the return
13:49 - keyword but you have specified up here
13:51 - that this function returns something
13:53 - Xcode isn't gonna like that it's gonna
13:55 - spit out an error actually and it's
13:58 - telling you that it's missing a return
13:59 - statement so you're gonna have to return
14:02 - the sum now what happens with a function
14:07 - that returns a value how do you call it
14:09 - and how do you get that value that it
14:11 - returned well let's first start by
14:14 - calling the function so add 4 and
14:17 - autocomplete pops up just gonna hit
14:19 - enter actually I want to point out
14:20 - something special here you can see here
14:23 - in this autocomplete menu on this left
14:26 - column you can see int this tells you
14:29 - that it returns an int datatype
14:31 - okay hit enter and now we have to
14:34 - specify the data input so let's put 10
14:37 - in there so the actual function code
14:40 - will add 4 to it and then it's going to
14:43 - return 14 oh where where did that 14 go
14:47 - well we actually have to keep track of
14:50 - it by assigning it to a variable so
14:53 - let's create a new variable let's called
14:55 - result equals add 4 2 and then we pass
15:00 - in 10 so this function is gonna take our
15:03 - 10 add 4 to it it's gonna spit out 14
15:06 - and we are going to assign that data to
15:09 - our result variable and now down here
15:12 - let's try printing out the contents of
15:15 - result and we're gonna see that it is 14
15:19 - now you might ask me why do I have to
15:22 - use this return value why do I have to
15:25 - create a function that uses this return
15:27 - keyword and I have to specify the data
15:29 - type that it returns can't digest see
15:32 - people refer to this variable sum
15:34 - because doesn't it contain my X plus 4
15:37 - well that brings me to my next topic
15:39 - variable scope I want you to try down
15:42 - here to print out the variable sum
15:46 - you're gonna get an error once Xcode
15:48 - gets around to processing the code and
15:50 - it's saying that use of unresolved I
15:53 - tend to fire some which basically means
15:55 - that it can't find this keyword can't
15:57 - find what some is and the reason for
16:00 - that is because all of the code in
16:02 - between these two curly brackets you
16:05 - know the code that's inside this
16:06 - function is inside of its own scope it's
16:10 - kind of like its own little bubble so
16:12 - any data that you have in here the
16:14 - variables that you declare and stuff
16:15 - like that you can't access it from
16:17 - outside of this scope so that's why even
16:20 - though I've declared some in here this
16:23 - variable I can't access it from outside
16:26 - of the function I can access it from
16:29 - inside this function you know because
16:31 - it's in the same scope so I can actually
16:33 - print out some right there and that
16:36 - would be fine as soon as Xcode finishes
16:39 - processing it so now we actually see two
16:42 - 14s because the first one is from this
16:45 - statement printing it out and then the
16:47 - second 14 is from printing out the
16:50 - result of calling out that function but
16:52 - anyways my point is that from inside the
16:55 - function you can reference that variable
16:57 - that you declare in there because when
16:59 - you declare that variable in here it
17:00 - only exists in this scope within this
17:03 - function you can't access it from
17:05 - outside that function which would be not
17:07 - in this scope again it helps to think of
17:10 - the code inside the function as in its
17:12 - own little bubble so that's why if you
17:14 - want to get the data out you use the
17:15 - return keyword right there and you also
17:17 - have to specify up here that this
17:19 - function returns some sort of data and
17:22 - in case it wasn't clear it's actually
17:24 - each function has its own scope so let
17:27 - me declare another function here I'm
17:28 - just gonna call it function C from
17:31 - within this function it's got its own
17:33 - scope so I can't access some because
17:37 - that's in this functions little bubble
17:41 - and you can see here that Xcode doesn't
17:43 - know what some is and if I declared a
17:45 - variable
17:45 - inside function see I wouldn't be able
17:48 - to access that from outside that
17:50 - function or from within another function
17:52 - either so you can think of each function
17:55 - the code inside of it is in its own
17:57 - little world and what you do in there is
17:59 - kind of invisible to the outside unless
18:01 - you start returning the data all right
18:03 - so let's erase this test function here
18:07 - and I guess one last thing before we
18:08 - move on is this yellow line is called a
18:11 - warning and Xcode is just trying to
18:14 - optimize things here it's saying that
18:16 - some after we assigned something to it
18:18 - it wasn't never changed again so why
18:21 - don't we use a constant instead of a
18:23 - variable so we can actually use let
18:25 - instead of var which is something you
18:27 - learned about a couple of lessons ago
18:29 - all right today you learn about how you
18:31 - can organize your code into functions
18:33 - you learned about function parameters
18:35 - where you can pass data into functions
18:37 - for them to work with we also covered
18:39 - return values where functions can return
18:41 - data back to us and finally we covered
18:44 - variable scope where the variables and
18:46 - data inside of a function only exists
18:48 - within the scope of that function
18:50 - believe it or not there's still more two
18:53 - functions that you can learn about but
18:55 - what we've covered in this lesson is
18:56 - more than sufficient for what you need
18:58 - right now if you do want to learn more
19:00 - about functions right now I'll add some
19:02 - links into the description to additional
19:05 - videos that I have as well as the
19:07 - official Apple documentation for
19:09 - functions and don't forget to download
19:10 - my handy cheat sheet as well as the
19:12 - lesson worksheet so that you can
19:14 - practice working with functions some
19:15 - more if you like this video please
19:17 - subscribe to my channel by hitting that
19:18 - subscribe button below and if you don't
19:20 - want to miss a video make sure you click
19:22 - on that bell icon as well now I want to
19:24 - turn it over to you we are two lessons
19:26 - in two Swift programming with one more
19:28 - left to go do you feel like you've got a
19:30 - grip on it so far yes or no let me know
19:33 - by leaving a comment below and lastly to
19:36 - get the worksheet for this lesson and
19:37 - the cheat sheet if you haven't
19:39 - downloaded in the previous lesson
19:40 - already just follow the URL in the
19:42 - description below
19:43 - or on the screen right now thanks for
19:45 - watching and I'll see you guys in the
19:46 - next lesson

Cleaned transcript:

hi welcome to lesson six in the last lesson you learned some basic Swift code let me ask you something how does the user interact with an app usually it's something like the user takes an action such as tapping a news headline and the app reacts by displaying that article action reaction well that implies that when the user takes an action we need to be able to run some specific pieces of code in that case we need a way to organize our code into bitesized chunks so that when the user takes this action we run this block of code and when the user takes that action we run another block of code while Swift has something called functions and this is basically wrapping up a block of code and giving it a name so that when we need to execute that code we just call it by its name so let's dive into a playground and see how we use functions we're gonna start by creating a brand new playground so go ahead and get started with the playground under iOS let's choose blank playground and I'm gonna call this the functions playground and just save it on the desktop so in order to declare a function we use the keyword fu NC and then we type a space and then we type in the name of the function now the name that we give the function is the same name that we're going to call the function with to execute the code inside the function so I'm gonna call this one to say hello the next thing we do is open up a pair of rounded brackets like that now inside those brackets there can be things called parameters which we're gonna cover later on in this lesson but for now we're going to just leave it as an empty set of rounded brackets next we're gonna hit space and find the curly brackets on your keyboard and we're going to open up a pair of those just like that an opening one and a closing one and inside of those curly brackets that's where the code for our function goes so let's hit enter a couple of times to create some space and inside this function I'm going to have only a single line of code I'm just gonna print something into the console so I'm gonna print out hello just like that now notice that in the console nothing gets output because the code inside my function is not going to be run until I actually call that a function by its name now let's go down here and line 12 and I'll demonstrate how to call it all you have to do is type the name of the function followed by those rounded brackets like that and then you're going to see the output because it's running this line of code when you write a function you usually think about performing a specific task in our earlier use case you might write a function to display an article so that when the user taps on the nice headline you can run that function to display that article now sometimes a function may require some sort of input to perform its task for example what happens when the user taps on headline number one versus news headline number two are you going to write a different function for every single news headline of course you're not and furthermore the news changes every day so you can't write a function for a piece of news that hasn't come out yet instead you write a function that displays an article but it doesn't know or care which one it is you have to specify which article it should show when you call that function by passing that article into the function and then your function will take that input and display that article you can do this with function parameters remember those rounded brackets in the function call well inside of those brackets you can specify what sort of data you want to be passed into the function when it's called in the example below we declare a function called say hello to in between the brackets you have a parameter called name that is of the data type string that kind of looks like a variable declaration but without the VAR keyword right whenever you call the say hello to function you're going to have to supply a piece of text with that function call now let's go into the playground and see how we can work with function parameters now as you were typing that a function name you might have noticed Xcode try to autocomplete it for you so let me demonstrate just in case that didn't happen for you let me erase this function call let me start typing the names more slowly s a Y as you can see it pops up this autocomplete menu trying to help you out so if you see what you want to type out already you can simply hit enter because it's already highlighted the function call I want it to type out or if it's not this particular one but you see it somewhere down here you can hit the up or down arrow keys on your keyboard to select it and then hit enter so we're gonna select this one because that's what we're intending to call and it will complete that function call for you all right so now before I demonstrate the function with the parameters why don't we go ahead and add a comment here and just call this one the basic function because we're going to have a couple of different things in here so this one's a function with a width parameter so I'm going to say all right so let's write out our function say hello to and then we're going to open up our pair of round brackets but this time inside there we are going to put a parameter now this parameter is going to dictate that when you call this function say hello to you're gonna have to pass in some data and this parameter basically dictates what sort of data you're supposed to pass in so I'm gonna call my parameter name and then colon followed by the type of data that I want to be passed in and there you go that's one parameter that needs to be passed in space open up a pair of curly brackets in between there we're going to hit enter a couple of times where we are going to write our code now in here I want to print out the name that gets passed in well how do I access that data that gets passed in well this parameter here actually has a parameter name and conveniently we called it name so this is how we access that data that gets passed in by referencing this parameter name so all I need to do is say print name like that and down here of course nothing gets output until we call the function now watch this I'm going to start typing s a Y and now Xcode will show me there are a couple of different function calls I can make this one was our basic function and this one is our new one that includes a parameter so I'm going to go ahead and press the down key and then press ENTER and it's going to basically autocomplete that function and it's going to highlight the parameter we need to specify in order to complete the function call so I'm gonna pass in a string piece of data in there open up a pair of quotation marks and let's put in Tom and this actually completes the function call and you can see here down here it says prints out Tom and this piece of text gets passed in to the function call through this parameter and then this line of code basically just takes that parameter and prints it out into the console notice that in here I have to specify that parameter name followed by colon and followed by the actual piece of data that I want passed in now what if I want to print out hello Tom instead of just the name well I'm gonna show you something cool where you can actually insert a variable or a parameter your parameter is basically a variable you don't insert that variable into a string or a piece of text so let's write a piece of text here let's say hello and space and then in order to insert name dynamically into this piece of text you do backslash open up a pair of rounded brackets like that and in between those rounded brackets you put the name of your variable in our case it would be just name and so now you can see down here it says hello space Tom don't worry about this if you you know don't remember how to do that we're going to actually use this again in a couple of lessons now I want to show you how you can specify a function that has more than one parameter so wrap right up here we have name colon string if we want it to specify a second parameter all we need to do is just hit comma and space and we're gonna add another parameter this time I'm going to call it h colon int it's gonna be int datatype and so now xcode to text because we've changed it so that calling this function requires two data inputs now Xcode notices that hey we're not doing that here and that's an error so I'm just going to erase this line of code say now I can actually just select it from this autocomplete menu and hit enter as you can see structure kind of coincides with what's up here right I have named and then I have to specify the string data to pass in followed by a comma and then age which is the second parameter name followed by the actual int data that I want Hostin so let's pass in Tom and I press tab allows me to just jump straight to specifying the second parameter there and let me just put 35 and of course it still says hello Tom because we haven't incorporated this second parameter so in this statement here hello name let's put comma you are I want to insert the age at this point age space years old now what's output down here just give a moment for X go to process the new code hello Tom you're 35 years old and that's just based on what we type in here you know I can say 45 and that's gonna turn into 45 years old so you can expand on this and you can do three parameters or four parameters but I wouldn't go crazy with this in the future you're gonna learn about how you can actually collect pieces of data together and specify them in a single parameter but for now you know you're passing simple values around and so if you need to pass in three or four or five you know or eight parameters then go ahead and do that one thing I do want to point out though is that in your function call you can actually make it so that you can omit these parameter names here so I could call my function like this alright right now this is going to be an error right but let me show you how to make it so that you can omit these parameter names and that kind of saves you some typing so here up here you can specify underscore and then space right in front of that parameter name same with the second parameter underscore and in space when you do that let's just erase this function call because this is now incorrect I'm going to use autocomplete again say hello to now you can see this entire thing is highlighted if I specify my parameter you can see now I don't need to put those labels in there what you're actually doing with this underscore is you're omitting the argument label for that parameter but I'm not going to go into that now because I don't want to confuse you if you do want to learn about that I'll link to something in the description below and you can look into it if you're curious but down the line once you learn more about Swift you're going to learn about it anyways for now all you need to know is that underscore space in front of your parameter name allows you to omit it from the function call like this now you know how to write functions which expect some sort of input to work with another great use of functions is to take some data input transform it and then return that result functions can do this by using the return keyword in the function below it takes an integer input and then it adds 4 to it and then it gives it back to us notice in this function declaration that after the rounded brackets we have an arrow and then we have a data type int this indicates the type of data that the function will give back when you call it let's go back to our playground and try it out alright so now let's create another section down here and let's create some space here so we can look at the middle of the screen and I'm going to call this function with return value okay so let's type out our function that we demonstrated add 4 to that's capital T and open up a bracket we're gonna type in X colon int that's going to be the data that needs to be passed in an integer and this time we are going to type make sure you've got a space here greater than symbol and then space and now we specify the type of the data that this function will return so I'm actually going to return in int data type let's open up a pair of curly brackets and let's create some space down here so what I'm going to do here I am going to create a variable let's say I recall this the sum equals and we're going to take the parameter that gets passed in which is X and I'm going to add 4 to it so the variable sum contains X plus 4 now since we specified that this function actually returns a value we need to somehow get this sum to be returned and we use a keyword called return that's exactly how it sounds and we are going to return this sum just like that and in fact if you forget the return keyword but you have specified up here that this function returns something Xcode isn't gonna like that it's gonna spit out an error actually and it's telling you that it's missing a return statement so you're gonna have to return the sum now what happens with a function that returns a value how do you call it and how do you get that value that it returned well let's first start by calling the function so add 4 and autocomplete pops up just gonna hit enter actually I want to point out something special here you can see here in this autocomplete menu on this left column you can see int this tells you that it returns an int datatype okay hit enter and now we have to specify the data input so let's put 10 in there so the actual function code will add 4 to it and then it's going to return 14 oh where where did that 14 go well we actually have to keep track of it by assigning it to a variable so let's create a new variable let's called result equals add 4 2 and then we pass in 10 so this function is gonna take our 10 add 4 to it it's gonna spit out 14 and we are going to assign that data to our result variable and now down here let's try printing out the contents of result and we're gonna see that it is 14 now you might ask me why do I have to use this return value why do I have to create a function that uses this return keyword and I have to specify the data type that it returns can't digest see people refer to this variable sum because doesn't it contain my X plus 4 well that brings me to my next topic variable scope I want you to try down here to print out the variable sum you're gonna get an error once Xcode gets around to processing the code and it's saying that use of unresolved I tend to fire some which basically means that it can't find this keyword can't find what some is and the reason for that is because all of the code in between these two curly brackets you know the code that's inside this function is inside of its own scope it's kind of like its own little bubble so any data that you have in here the variables that you declare and stuff like that you can't access it from outside of this scope so that's why even though I've declared some in here this variable I can't access it from outside of the function I can access it from inside this function you know because it's in the same scope so I can actually print out some right there and that would be fine as soon as Xcode finishes processing it so now we actually see two 14s because the first one is from this statement printing it out and then the second 14 is from printing out the result of calling out that function but anyways my point is that from inside the function you can reference that variable that you declare in there because when you declare that variable in here it only exists in this scope within this function you can't access it from outside that function which would be not in this scope again it helps to think of the code inside the function as in its own little bubble so that's why if you want to get the data out you use the return keyword right there and you also have to specify up here that this function returns some sort of data and in case it wasn't clear it's actually each function has its own scope so let me declare another function here I'm just gonna call it function C from within this function it's got its own scope so I can't access some because that's in this functions little bubble and you can see here that Xcode doesn't know what some is and if I declared a variable inside function see I wouldn't be able to access that from outside that function or from within another function either so you can think of each function the code inside of it is in its own little world and what you do in there is kind of invisible to the outside unless you start returning the data all right so let's erase this test function here and I guess one last thing before we move on is this yellow line is called a warning and Xcode is just trying to optimize things here it's saying that some after we assigned something to it it wasn't never changed again so why don't we use a constant instead of a variable so we can actually use let instead of var which is something you learned about a couple of lessons ago all right today you learn about how you can organize your code into functions you learned about function parameters where you can pass data into functions for them to work with we also covered return values where functions can return data back to us and finally we covered variable scope where the variables and data inside of a function only exists within the scope of that function believe it or not there's still more two functions that you can learn about but what we've covered in this lesson is more than sufficient for what you need right now if you do want to learn more about functions right now I'll add some links into the description to additional videos that I have as well as the official Apple documentation for functions and don't forget to download my handy cheat sheet as well as the lesson worksheet so that you can practice working with functions some more if you like this video please subscribe to my channel by hitting that subscribe button below and if you don't want to miss a video make sure you click on that bell icon as well now I want to turn it over to you we are two lessons in two Swift programming with one more left to go do you feel like you've got a grip on it so far yes or no let me know by leaving a comment below and lastly to get the worksheet for this lesson and the cheat sheet if you haven't downloaded in the previous lesson already just follow the URL in the description below or on the screen right now thanks for watching and I'll see you guys in the next lesson
