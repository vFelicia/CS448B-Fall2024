With timestamps:

00:00 - hello welcome to lesson 13 of the learn
00:03 - Swift for beginners series in this video
00:06 - you're going to learn about optional and
00:08 - it's probably one of the most confusing
00:09 - things for beginners if you've ever
00:12 - looked at Swift code and you've noticed
00:13 - exclamation marks or question marks in
00:15 - the code then you've come across
00:17 - optionals so let's get started and find
00:20 - out what it's all about so right here I
00:25 - have a playground and I have declared a
00:28 - class blog post in fact if you've seen
00:31 - episode 9 on the first lesson on classes
00:34 - then this is going to look familiar
00:36 - because this is the example that we used
00:39 - for lesson 9 when I first talked to you
00:42 - about classes now we declared a couple
00:45 - of properties up here for our blog post
00:48 - class and these properties they
00:51 - represent certain things about what a
00:53 - blog post might have so for example the
00:56 - title the body is the author number of
00:58 - comments and you can actually safely
01:00 - ignore this function so I'm just going
01:02 - to remove it because we're going to
01:03 - focus on this stuff up here you'll
01:05 - notice that each time I declare a
01:08 - property right here I immediately
01:09 - initialize it to a value so title body
01:13 - author are all initialized to an empty
01:18 - string right when they're declared and
01:20 - comments is set to zero right right when
01:24 - it's declared now this is all fine and
01:27 - dandy but what you actually want some of
01:31 - these properties to be empty for example
01:34 - what if I want to tell if the blog post
01:37 - has an author or it doesn't have any
01:40 - author you might argue that well I can
01:43 - just check if author is equal to an
01:46 - empty string and if it's equal to an
01:48 - empty string then maybe there's no
01:49 - author well what if the author isn't
01:53 - actually a string what if it's actually
01:56 - you know we have another class here and
01:58 - we call it person and let's say that
02:01 - there's a name and we'll initialize the
02:04 - empty string but you know okay so in
02:06 - this case person is assigned to author
02:10 - so
02:11 - you know blog post has an has an author
02:14 - because it has this person object so how
02:17 - do we distinguish there being no author
02:20 - for a blog post well you have to be able
02:23 - to declare an author property and leave
02:26 - it empty because some blog posts may not
02:29 - have an author so the way to do this is
02:31 - if you remember from way way back then
02:34 - maybe lesson lesson 2 on datatypes I
02:39 - think you can actually specify for your
02:42 - variables the specific data type that it
02:44 - can store if you don't specify it
02:46 - basically the data type is inferred from
02:49 - what you assigned into it okay so for
02:52 - example if I wanted the title to be able
02:55 - to be empty
02:57 - I would craft it equipped type I'd get
03:01 - rid of this equals empty string because
03:04 - we don't want to sign in anything to it
03:06 - right we wanted a clear this property
03:07 - but leave it empty I would do it like
03:10 - that I would you know did : specify the
03:13 - specific type and then I would put
03:15 - question work and that is an optional
03:17 - right there so when I declare this title
03:21 - is empty and this part basically tells
03:25 - us that the data type of title is string
03:29 - and this question mark attached to the
03:32 - string data type tells us that it could
03:35 - be nil which means nothing or empty it
03:39 - could be nil or it could actually
03:41 - contain a string so contrast this with
03:46 - the body property here this when it is
03:49 - declared is assigned this MD string so
03:52 - it's always going to have a value right
03:55 - whether it's empty string or maybe in
03:57 - the future we assign some text into it
03:59 - it's going to have some text but you
04:02 - know this title property could be empty
04:07 - in fact it is empty right now as we
04:09 - declare it so going back to this example
04:13 - with the author potentially some blog
04:16 - posts may not have an author so we can't
04:19 - just you know initialize the author
04:22 - property to a person object because that
04:24 - would mean all blog posts at
04:25 - have a person attached to the author
04:28 - right we want to make this properly able
04:30 - to be empty right so the way we do that
04:33 - again is we specify the specific data
04:36 - type put the question mark there next to
04:39 - the data type and we get rid of that
04:41 - part because you don't actually want to
04:42 - assign anything to it okay so in this
04:45 - way we have a blog post class which has
04:49 - an optional title property has a body
04:52 - which is initialized to an empty string
04:55 - so it at least always has a value and it
04:59 - may or may not have a person you know
05:02 - could have nobody assigned as the author
05:04 - or can actually have a person object to
05:06 - find out the author and number of
05:08 - comments will always have a value and
05:10 - starting at zero so you're going to want
05:13 - to pay attention now because I'm going
05:15 - to tell you how you should think of
05:16 - these optional properties that we have
05:19 - here and this is sort of metaphor or
05:21 - visual that you can think of that I was
05:25 - taught when I was learning this stuff
05:26 - and that is to think of the title
05:30 - property this optional string it could
05:33 - optionally contain a value or not think
05:36 - of it like a box it's labeled string but
05:40 - you can't see what's inside the box you
05:42 - don't know if there's actually a string
05:45 - object inside or it could just be an
05:47 - empty box it could be an empty gift box
05:50 - of someone you've been really bad in
05:52 - someone gives you an empty gift for
05:54 - Christmas that's never happened to me
05:57 - but if it has to you let me know in the
05:58 - comment section below but anyways you
06:01 - can think of an optional property like a
06:04 - box
06:05 - that may contain the actual object or it
06:09 - may not so how can you find out if
06:12 - there's actually the string object
06:15 - inside or not well you have to unwrap
06:17 - that box right you have to unwrap that
06:19 - gift in order to look inside and see and
06:22 - get at the actual object and that's
06:26 - exactly what we have to do in code now
06:28 - with our optional properties so let me
06:31 - let me create a new blog post object
06:33 - here let me say
06:35 - post equals blog post like that and what
06:41 - we're going to do here is we're going to
06:43 - say hey print out post dot body plus I
06:50 - don't know plus hello something like
06:53 - that okay so it basically just prints
06:56 - out hello because body is empty but
06:57 - let's just assign it to something like
06:59 - that so then we have something like hey
07:03 - hello write that totally makes sense
07:05 - because body we've initialized it to hey
07:08 - right when we create the blog post
07:12 - object it's already set to hey and then
07:14 - we concatenate hello to it so when we
07:16 - print post body plus hello you know
07:20 - you're accessing that property and in
07:22 - your pending hello
07:23 - anyways that makes sense so we can no
07:26 - longer do that with something like the
07:28 - title right because that's an optional
07:31 - it's it's wrapped up in a gift box and
07:34 - you don't know if it's empty inside or
07:36 - if there's actually a string object
07:38 - inside so you can't blindly use it you
07:40 - have to unwrap that gift box in and
07:42 - check if there's a value or not and then
07:44 - use it so now before we use title we
07:47 - have to check if there's actually a
07:50 - string object or if there's actually a
07:52 - value inside that optional and the way
07:54 - we do that is we do something called
07:56 - optional binding okay so it's kind of
08:00 - like an if statement so you say if but
08:03 - then you use the word let and if you
08:05 - remember using the keyword lettuce
08:08 - declaring a constant right and in fact
08:11 - that's exactly what this is you are
08:13 - declaring a constant here if let actual
08:18 - title equals title and then you open up
08:22 - these curly brackets so what you're
08:25 - doing here is you're testing sorry not
08:27 - title I meant post dot title because
08:30 - this is the optional property here what
08:33 - you're doing here is you're saying that
08:35 - you're testing you're unwrapping this
08:38 - this title property this optional and
08:41 - you're saying if there is a value in
08:45 - there then assign it to this constant
08:47 - called actual
08:48 - idle and then inside here you can use
08:51 - actual title as the value but if there
08:55 - is nothing inside this optional and if
08:58 - you unwrap it and it's empty its nil
09:01 - then don't execute this code inside so
09:05 - that's why it has an if statement here
09:09 - you're basically testing to see if
09:13 - there's a value inside this optional if
09:15 - there is you assign it to this constant
09:17 - and then you use this constant inside
09:19 - here if there isn't then it's just going
09:23 - to skip over this whole statement so in
09:25 - here we can safely now we can say you
09:28 - know print actual title plus and solute
09:37 - so there is no value in title so it
09:42 - actually skipped all this but let's say
09:44 - for instance we say here posts are title
09:47 - equals yo like that so now you can see
09:53 - when it does this optional binding and
09:55 - it unwraps this title because we have
09:58 - assigned something into it here it finds
10:01 - that hey I unwrapped the optional there
10:04 - is a value I'm going to assign it to
10:06 - actual title so inside this if statement
10:08 - we can use actual title and do this but
10:13 - if I didn't have this line here let's
10:15 - comment this out you can see that it
10:17 - completely skipped this and it doesn't
10:19 - crash or do anything like that because
10:22 - we're safely you know checking if
10:25 - there's a value inside the optional
10:26 - first and then we're using it now
10:30 - there's always different ways of doing
10:32 - things
10:32 - so in this programming language there's
10:36 - actually a way to be a cowboy and skip
10:40 - all this if you don't want to check it
10:41 - and you just want to use the value you
10:44 - know you know there's something inside
10:47 - what you can do is you can use you know
10:53 - you're going to not check it you're just
10:55 - going to use it you can
10:57 - it wouldn't be that it was a post
11:00 - thought title and you put this
11:02 - exclamation mark and this is called
11:04 - force unwrapping so what you're telling
11:07 - Xcode is you're saying that hey you know
11:10 - I know there's a value in here I don't
11:12 - need to check it
11:13 - I just want to unwrap it right away
11:16 - using this exclamation mark and I want
11:18 - to use whatever is inside of there right
11:21 - in this case it's yo so here we're you
11:25 - know we're accessing post title it's an
11:28 - optional property we don't care we're
11:30 - going to force unwrap that and we're
11:33 - going to take out that value and use it
11:34 - you know and so if you know there is a
11:38 - value inside you can do that but it gets
11:40 - a little dangerous because for example
11:42 - if there happens to not be a value in
11:45 - there and you're forced on wrapping it
11:47 - and you're trying to you know use the
11:49 - value well there's an error because and
11:53 - this is the error you get fatal error
11:55 - unexpectedly right because when you use
11:58 - this exclamation mark you're expecting
12:00 - that there is a value unexpectedly found
12:03 - nil when unwrapping and optional value
12:07 - right that exactly what I was telling
12:10 - you you're forcing wrapping the title
12:12 - and you're trying to use it but it was
12:14 - actually nil so you actually get a crash
12:16 - and in your career of building apps you
12:19 - probably will see this error
12:21 - unexpectedly found nil so now you know
12:24 - why
12:24 - so the safer way to go would be actually
12:28 - to use optional bindings so I'm going to
12:30 - press command set now command V for the
12:33 - Americans I'm going to undo undo all
12:37 - right do something like that and this is
12:40 - optional binding so another way where
12:43 - you can test before using is just it's
12:49 - just with good old-fashioned if
12:51 - statement and testing if it's nil so you
12:53 - can say something like testing for nil
12:56 - you can take if post sought title is not
13:01 - equal nil then print post title and
13:06 - because you have tested it that it's not
13:09 - nil in this if statement you can go
13:10 - ahead and force on
13:11 - wrap that and use it right so that work
13:17 - you can safely use force unwrapping
13:19 - because in this if statement you just
13:21 - tested that it's not no okay now the
13:26 - reverse if you want to check that it is
13:28 - nil is post title equals equals nil okay
13:32 - it's not equals no a lot of beginners
13:35 - make this mistake and they use one equal
13:37 - sign but one equal sign is for
13:39 - assignment remember that so if we're
13:41 - going to test for now you're going to
13:43 - use two equal signs like that and this
13:45 - is like optional contains no value okay
13:53 - optional contains value and then here
13:57 - for optional binding optional contains
14:01 - value so as with all of the other things
14:05 - we're learning with Swift we can go
14:08 - deeper there's additional things to
14:10 - learn about optionals like optional
14:12 - chaining and other ways of using
14:14 - optionals but this is your introduction
14:16 - I want it to tell you about what the
14:18 - question mark means and what the
14:20 - exclamation mark force unwrapping and
14:23 - how to check an optional before using it
14:25 - I wanted to introduce you to these kind
14:28 - of high-level concepts and practically
14:31 - speaking you'll be using them most of
14:32 - the time like this and then in the
14:35 - future we'll touch upon the more complex
14:37 - things about optionals also you might be
14:39 - wondering why why and when you would
14:42 - ever use optionals but let me tell you
14:44 - you definitely will use it when you're
14:46 - building apps and when we do build our
14:49 - apps together you'll know what they are
14:50 - and you'll know how to declare options
14:53 - and how to unwrap them and how to check
14:55 - if they're no because you've watched
14:57 - this lesson okay so thanks for watching
15:00 - and please subscribe and thumbs up and
15:03 - share the video with other people you
15:05 - know who want to learn Swift 212 I'll
15:07 - see you in the next lesson bye for now
15:11 - you
15:11 - [Music]

Cleaned transcript:

hello welcome to lesson 13 of the learn Swift for beginners series in this video you're going to learn about optional and it's probably one of the most confusing things for beginners if you've ever looked at Swift code and you've noticed exclamation marks or question marks in the code then you've come across optionals so let's get started and find out what it's all about so right here I have a playground and I have declared a class blog post in fact if you've seen episode 9 on the first lesson on classes then this is going to look familiar because this is the example that we used for lesson 9 when I first talked to you about classes now we declared a couple of properties up here for our blog post class and these properties they represent certain things about what a blog post might have so for example the title the body is the author number of comments and you can actually safely ignore this function so I'm just going to remove it because we're going to focus on this stuff up here you'll notice that each time I declare a property right here I immediately initialize it to a value so title body author are all initialized to an empty string right when they're declared and comments is set to zero right right when it's declared now this is all fine and dandy but what you actually want some of these properties to be empty for example what if I want to tell if the blog post has an author or it doesn't have any author you might argue that well I can just check if author is equal to an empty string and if it's equal to an empty string then maybe there's no author well what if the author isn't actually a string what if it's actually you know we have another class here and we call it person and let's say that there's a name and we'll initialize the empty string but you know okay so in this case person is assigned to author so you know blog post has an has an author because it has this person object so how do we distinguish there being no author for a blog post well you have to be able to declare an author property and leave it empty because some blog posts may not have an author so the way to do this is if you remember from way way back then maybe lesson lesson 2 on datatypes I think you can actually specify for your variables the specific data type that it can store if you don't specify it basically the data type is inferred from what you assigned into it okay so for example if I wanted the title to be able to be empty I would craft it equipped type I'd get rid of this equals empty string because we don't want to sign in anything to it right we wanted a clear this property but leave it empty I would do it like that I would you know did specify the specific type and then I would put question work and that is an optional right there so when I declare this title is empty and this part basically tells us that the data type of title is string and this question mark attached to the string data type tells us that it could be nil which means nothing or empty it could be nil or it could actually contain a string so contrast this with the body property here this when it is declared is assigned this MD string so it's always going to have a value right whether it's empty string or maybe in the future we assign some text into it it's going to have some text but you know this title property could be empty in fact it is empty right now as we declare it so going back to this example with the author potentially some blog posts may not have an author so we can't just you know initialize the author property to a person object because that would mean all blog posts at have a person attached to the author right we want to make this properly able to be empty right so the way we do that again is we specify the specific data type put the question mark there next to the data type and we get rid of that part because you don't actually want to assign anything to it okay so in this way we have a blog post class which has an optional title property has a body which is initialized to an empty string so it at least always has a value and it may or may not have a person you know could have nobody assigned as the author or can actually have a person object to find out the author and number of comments will always have a value and starting at zero so you're going to want to pay attention now because I'm going to tell you how you should think of these optional properties that we have here and this is sort of metaphor or visual that you can think of that I was taught when I was learning this stuff and that is to think of the title property this optional string it could optionally contain a value or not think of it like a box it's labeled string but you can't see what's inside the box you don't know if there's actually a string object inside or it could just be an empty box it could be an empty gift box of someone you've been really bad in someone gives you an empty gift for Christmas that's never happened to me but if it has to you let me know in the comment section below but anyways you can think of an optional property like a box that may contain the actual object or it may not so how can you find out if there's actually the string object inside or not well you have to unwrap that box right you have to unwrap that gift in order to look inside and see and get at the actual object and that's exactly what we have to do in code now with our optional properties so let me let me create a new blog post object here let me say post equals blog post like that and what we're going to do here is we're going to say hey print out post dot body plus I don't know plus hello something like that okay so it basically just prints out hello because body is empty but let's just assign it to something like that so then we have something like hey hello write that totally makes sense because body we've initialized it to hey right when we create the blog post object it's already set to hey and then we concatenate hello to it so when we print post body plus hello you know you're accessing that property and in your pending hello anyways that makes sense so we can no longer do that with something like the title right because that's an optional it's it's wrapped up in a gift box and you don't know if it's empty inside or if there's actually a string object inside so you can't blindly use it you have to unwrap that gift box in and check if there's a value or not and then use it so now before we use title we have to check if there's actually a string object or if there's actually a value inside that optional and the way we do that is we do something called optional binding okay so it's kind of like an if statement so you say if but then you use the word let and if you remember using the keyword lettuce declaring a constant right and in fact that's exactly what this is you are declaring a constant here if let actual title equals title and then you open up these curly brackets so what you're doing here is you're testing sorry not title I meant post dot title because this is the optional property here what you're doing here is you're saying that you're testing you're unwrapping this this title property this optional and you're saying if there is a value in there then assign it to this constant called actual idle and then inside here you can use actual title as the value but if there is nothing inside this optional and if you unwrap it and it's empty its nil then don't execute this code inside so that's why it has an if statement here you're basically testing to see if there's a value inside this optional if there is you assign it to this constant and then you use this constant inside here if there isn't then it's just going to skip over this whole statement so in here we can safely now we can say you know print actual title plus and solute so there is no value in title so it actually skipped all this but let's say for instance we say here posts are title equals yo like that so now you can see when it does this optional binding and it unwraps this title because we have assigned something into it here it finds that hey I unwrapped the optional there is a value I'm going to assign it to actual title so inside this if statement we can use actual title and do this but if I didn't have this line here let's comment this out you can see that it completely skipped this and it doesn't crash or do anything like that because we're safely you know checking if there's a value inside the optional first and then we're using it now there's always different ways of doing things so in this programming language there's actually a way to be a cowboy and skip all this if you don't want to check it and you just want to use the value you know you know there's something inside what you can do is you can use you know you're going to not check it you're just going to use it you can it wouldn't be that it was a post thought title and you put this exclamation mark and this is called force unwrapping so what you're telling Xcode is you're saying that hey you know I know there's a value in here I don't need to check it I just want to unwrap it right away using this exclamation mark and I want to use whatever is inside of there right in this case it's yo so here we're you know we're accessing post title it's an optional property we don't care we're going to force unwrap that and we're going to take out that value and use it you know and so if you know there is a value inside you can do that but it gets a little dangerous because for example if there happens to not be a value in there and you're forced on wrapping it and you're trying to you know use the value well there's an error because and this is the error you get fatal error unexpectedly right because when you use this exclamation mark you're expecting that there is a value unexpectedly found nil when unwrapping and optional value right that exactly what I was telling you you're forcing wrapping the title and you're trying to use it but it was actually nil so you actually get a crash and in your career of building apps you probably will see this error unexpectedly found nil so now you know why so the safer way to go would be actually to use optional bindings so I'm going to press command set now command V for the Americans I'm going to undo undo all right do something like that and this is optional binding so another way where you can test before using is just it's just with good oldfashioned if statement and testing if it's nil so you can say something like testing for nil you can take if post sought title is not equal nil then print post title and because you have tested it that it's not nil in this if statement you can go ahead and force on wrap that and use it right so that work you can safely use force unwrapping because in this if statement you just tested that it's not no okay now the reverse if you want to check that it is nil is post title equals equals nil okay it's not equals no a lot of beginners make this mistake and they use one equal sign but one equal sign is for assignment remember that so if we're going to test for now you're going to use two equal signs like that and this is like optional contains no value okay optional contains value and then here for optional binding optional contains value so as with all of the other things we're learning with Swift we can go deeper there's additional things to learn about optionals like optional chaining and other ways of using optionals but this is your introduction I want it to tell you about what the question mark means and what the exclamation mark force unwrapping and how to check an optional before using it I wanted to introduce you to these kind of highlevel concepts and practically speaking you'll be using them most of the time like this and then in the future we'll touch upon the more complex things about optionals also you might be wondering why why and when you would ever use optionals but let me tell you you definitely will use it when you're building apps and when we do build our apps together you'll know what they are and you'll know how to declare options and how to unwrap them and how to check if they're no because you've watched this lesson okay so thanks for watching and please subscribe and thumbs up and share the video with other people you know who want to learn Swift 212 I'll see you in the next lesson bye for now you
