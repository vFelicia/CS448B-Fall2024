With timestamps:

00:01 - [Music]
00:05 - hello welcome to the next lesson of the
00:08 - iOS to MySQL series in this video we are
00:12 - going to create the user interface so
00:13 - we're going to create the table view in
00:15 - the map view and then we're going to
00:16 - display the data in those two views now
00:19 - in the previous lesson just to do a
00:21 - quick recap we had downloaded the data
00:23 - that our web service provided by
00:25 - implementing the whole model and then we
00:29 - had to implemented the delegation the
00:31 - protocol and delegation pattern to
00:33 - return that data to the view controller
00:35 - now from the view controller we're going
00:37 - to be able to display that data on to
00:39 - the screen first of all however we need
00:42 - to add a table view to the zoom
00:44 - controller so that it can display that
00:46 - data onto that table view let's go over
00:50 - to the main storyboard and we're simply
00:53 - going to down here search for table view
00:57 - let's move that here drag that into here
01:01 - and basically while it's highlighted
01:05 - we're going to tap this icon here to add
01:07 - some constraints let's add all four
01:10 - enabling them change them all to zero
01:14 - and it's going to put them according to
01:18 - the top layout guide and the bottom
01:20 - layout guide but that's fine because
01:24 - there's going to be you know the status
01:26 - bar up here so that's going to make sure
01:30 - that it doesn't you can see here the
01:32 - table view ends right here doesn't block
01:33 - that status bar now we're going to have
01:37 - to connect this table view not as an IPL
01:39 - that property so that we can access it
01:41 - through the code let's go ahead open up
01:44 - a system editor hold down ctrl click and
01:48 - drag this guy over here where we have
01:51 - the other property and the connection
01:54 - type is outlet I'm going to call this
01:56 - just the table view like that I'm going
01:59 - to connect it I'm going to have a table
02:02 - view here the next step
02:05 - now that we've connected the table view
02:07 - is to display the data in that table
02:09 - view let's go back to the view
02:11 - controller and in order to display data
02:14 - in the table view we have to say that
02:17 - the view controller conforms to the UI
02:19 - tableview to our table view datasource
02:26 - and the UI table view delegate those are
02:32 - two protocols just like how we created
02:34 - this home model delegate one inside here
02:39 - the viewdidload function we need to set
02:42 - self as the table views datasource and
02:49 - delegate so table view dot Douga equals
02:58 - self in table view dot data source this
03:03 - is a lowercase V you change that to an
03:05 - uppercase because that's what we called
03:08 - this outlet there call self okay and
03:13 - just like how we set ourselves as the
03:16 - delegate for the home model and so when
03:18 - the whole model calls the delegate
03:20 - function it calls back to here on the
03:23 - table view does the same thing because
03:25 - we set this view controller as the
03:28 - delegate in the data source for the
03:29 - table view the table view is going to
03:31 - ask us for data to power the table view
03:34 - as well as when the user interacts to
03:36 - the table view to call functions that we
03:39 - have in here let's create a special
03:42 - section here we're going to use this
03:45 - special notation
03:51 - and by using this special notation it's
03:55 - going to create a new kind of divider
03:57 - here in this list of functions so the
04:01 - ones we need to implement our table view
04:05 - we're going to need to select row but
04:07 - let's not add that first we need number
04:09 - of rows and in here we're going to
04:12 - return we haven't we haven't declared a
04:17 - property to hold our data so let's say
04:23 - locations up here and declare a new
04:26 - property and I'm just going to assign
04:28 - this as an optional location all right
04:38 - all right so here we're going to say
04:41 - return locations dot count now this this
04:52 - might not work because if locations is
04:54 - nil we're not going to be able to get a
04:56 - count from it and it's not it's
04:58 - expecting a an actual number all right
05:02 - so we can do something like this where
05:04 - we say we can say you know if let
05:10 - locations not equal no then return
05:16 - locations count but if it is no then
05:21 - return 0 so we can do something like
05:23 - that just to test if it's empty first or
05:27 - no you know before doing this code
05:30 - however this wouldn't be if it was just
05:35 - be if locations not equal no however
05:37 - instead of doing this I'm just going to
05:42 - assign an empty array to it instead of
05:49 - making it an optional so right when this
05:53 - class or this object gets initialized
05:55 - this property is going to be set to a
05:58 - location array that has zero elements so
06:00 - this way I can simply say return
06:03 - locations
06:05 - count so if there's nothing in it then
06:08 - it's going to return zero okay next one
06:12 - we have to implement is table view table
06:18 - view cell actually let's just type cell
06:21 - for row at and in this delegate function
06:26 - the table view asks us for the cell the
06:30 - table view cell for a specific index
06:34 - path and that's just a row and a section
06:38 - if you have multiple sections but we
06:39 - only have one section so it's just going
06:42 - to be the row so here we're going to
06:44 - first we need to get a table view cell
06:47 - and then we need to assign some data
06:49 - into the label of that cell and then
06:52 - return that cell for display so let's go
06:57 - back to our storyboard here in this
07:00 - table view in the right hand side here
07:03 - we're going to say probe type cells
07:05 - there's one of them and then we're going
07:08 - to click that table view cell you can
07:10 - click it here from the document outline
07:11 - and there's going to be an identifier
07:14 - here that we can specify let's just call
07:17 - it basic cell with capital B and capital
07:19 - C because here in the view controller
07:23 - we're going to be able to get a basic
07:25 - cell by saying let's cell equals table
07:29 - view dot DQ reusable table cell and I'm
07:35 - going to use this one where we pass in
07:37 - the identifier basic cell for index path
07:41 - and this is going to be the index path
07:44 - passed into this parameter so the string
07:47 - only the identifier of the cell we want
07:50 - to fetch is basic cell and the index
07:54 - path is simply the parameter that gets
07:57 - passed in here so now you can say cell
08:00 - dot the prototype cell comes with a
08:06 - basic label and so I can access that
08:09 - property here text label dot text equals
08:14 - and we are going to
08:17 - set that text to locations this is the
08:22 - locations rate so we're going to access
08:25 - the index path row in order to determine
08:29 - which location to pick up and then we're
08:32 - going to choose a property so let's
08:35 - choose name and then lastly we're going
08:38 - to return the cell so let's run this and
08:41 - we should be able to see our locations
08:43 - in the table view okay there was one
08:50 - missing there was one missing thing here
08:52 - so we we do see a table view here but we
08:54 - don't see any data and that's because
08:57 - after the items have come back from the
08:59 - home model we actually need to reload
09:01 - the table view to tell it to grab data
09:03 - again before we do that the table view
09:08 - is looking at this property for its list
09:10 - of locations to display right so we have
09:12 - to set self dot locations equals the
09:18 - locations that got passed back from the
09:21 - whole model with that and I'm using self
09:25 - here just to specify that this is
09:28 - referring to the property up here
09:29 - because otherwise it would be in
09:32 - locations equal locations and that is a
09:34 - little bit confusing for everyone
09:36 - including Xcode so it doesn't understand
09:38 - what we're trying to do but if we use
09:40 - self Stahl locations we're able to
09:42 - distinguish that we're referring to this
09:44 - property here of the view controller
09:47 - okay so self dot locations equals the
09:51 - locations that are passed in and then we
09:53 - we don't need self here because there's
09:55 - only one table view dot reload data so
09:59 - that's going to cause the table view
10:01 - again to trigger these two delegate
10:04 - functions see that the reason why it was
10:07 - empty before was because when the view
10:10 - controller initially loaded that's when
10:12 - the table view asked for data to display
10:15 - and at that point this locations array
10:18 - was empty so it didn't display any data
10:20 - however after the whole model returned
10:23 - all of the location data we we never
10:25 - told the table view to refresh
10:27 - essentially
10:34 - okay so now you can see the data here
10:37 - are two locations when you tap on them
10:39 - nothing happens because we haven't
10:40 - implemented that delegate function yet
10:43 - let's go ahead and add it table view did
10:50 - select row make sure you don't
10:52 - accidentally select deselect row or else
10:55 - you'll get some weird behavior so use
10:57 - this one did select row at and when the
11:00 - user selects location it's going to come
11:04 - into here so at this point I'm going to
11:07 - save the Xcode project and in the next
11:10 - lesson we're going to implement the map
11:12 - view so when the user is going to tap on
11:15 - the location and the table view we're
11:17 - going to bring them over to the next
11:19 - view and display it on the pin so thanks
11:23 - for watching you can download the source
11:25 - code in the description and make sure
11:28 - you subscribe so you don't miss the next
11:29 - lesson thanks for watching I'll see you
11:31 - guys later
11:34 - [Music]

Cleaned transcript:

hello welcome to the next lesson of the iOS to MySQL series in this video we are going to create the user interface so we're going to create the table view in the map view and then we're going to display the data in those two views now in the previous lesson just to do a quick recap we had downloaded the data that our web service provided by implementing the whole model and then we had to implemented the delegation the protocol and delegation pattern to return that data to the view controller now from the view controller we're going to be able to display that data on to the screen first of all however we need to add a table view to the zoom controller so that it can display that data onto that table view let's go over to the main storyboard and we're simply going to down here search for table view let's move that here drag that into here and basically while it's highlighted we're going to tap this icon here to add some constraints let's add all four enabling them change them all to zero and it's going to put them according to the top layout guide and the bottom layout guide but that's fine because there's going to be you know the status bar up here so that's going to make sure that it doesn't you can see here the table view ends right here doesn't block that status bar now we're going to have to connect this table view not as an IPL that property so that we can access it through the code let's go ahead open up a system editor hold down ctrl click and drag this guy over here where we have the other property and the connection type is outlet I'm going to call this just the table view like that I'm going to connect it I'm going to have a table view here the next step now that we've connected the table view is to display the data in that table view let's go back to the view controller and in order to display data in the table view we have to say that the view controller conforms to the UI tableview to our table view datasource and the UI table view delegate those are two protocols just like how we created this home model delegate one inside here the viewdidload function we need to set self as the table views datasource and delegate so table view dot Douga equals self in table view dot data source this is a lowercase V you change that to an uppercase because that's what we called this outlet there call self okay and just like how we set ourselves as the delegate for the home model and so when the whole model calls the delegate function it calls back to here on the table view does the same thing because we set this view controller as the delegate in the data source for the table view the table view is going to ask us for data to power the table view as well as when the user interacts to the table view to call functions that we have in here let's create a special section here we're going to use this special notation and by using this special notation it's going to create a new kind of divider here in this list of functions so the ones we need to implement our table view we're going to need to select row but let's not add that first we need number of rows and in here we're going to return we haven't we haven't declared a property to hold our data so let's say locations up here and declare a new property and I'm just going to assign this as an optional location all right all right so here we're going to say return locations dot count now this this might not work because if locations is nil we're not going to be able to get a count from it and it's not it's expecting a an actual number all right so we can do something like this where we say we can say you know if let locations not equal no then return locations count but if it is no then return 0 so we can do something like that just to test if it's empty first or no you know before doing this code however this wouldn't be if it was just be if locations not equal no however instead of doing this I'm just going to assign an empty array to it instead of making it an optional so right when this class or this object gets initialized this property is going to be set to a location array that has zero elements so this way I can simply say return locations count so if there's nothing in it then it's going to return zero okay next one we have to implement is table view table view cell actually let's just type cell for row at and in this delegate function the table view asks us for the cell the table view cell for a specific index path and that's just a row and a section if you have multiple sections but we only have one section so it's just going to be the row so here we're going to first we need to get a table view cell and then we need to assign some data into the label of that cell and then return that cell for display so let's go back to our storyboard here in this table view in the right hand side here we're going to say probe type cells there's one of them and then we're going to click that table view cell you can click it here from the document outline and there's going to be an identifier here that we can specify let's just call it basic cell with capital B and capital C because here in the view controller we're going to be able to get a basic cell by saying let's cell equals table view dot DQ reusable table cell and I'm going to use this one where we pass in the identifier basic cell for index path and this is going to be the index path passed into this parameter so the string only the identifier of the cell we want to fetch is basic cell and the index path is simply the parameter that gets passed in here so now you can say cell dot the prototype cell comes with a basic label and so I can access that property here text label dot text equals and we are going to set that text to locations this is the locations rate so we're going to access the index path row in order to determine which location to pick up and then we're going to choose a property so let's choose name and then lastly we're going to return the cell so let's run this and we should be able to see our locations in the table view okay there was one missing there was one missing thing here so we we do see a table view here but we don't see any data and that's because after the items have come back from the home model we actually need to reload the table view to tell it to grab data again before we do that the table view is looking at this property for its list of locations to display right so we have to set self dot locations equals the locations that got passed back from the whole model with that and I'm using self here just to specify that this is referring to the property up here because otherwise it would be in locations equal locations and that is a little bit confusing for everyone including Xcode so it doesn't understand what we're trying to do but if we use self Stahl locations we're able to distinguish that we're referring to this property here of the view controller okay so self dot locations equals the locations that are passed in and then we we don't need self here because there's only one table view dot reload data so that's going to cause the table view again to trigger these two delegate functions see that the reason why it was empty before was because when the view controller initially loaded that's when the table view asked for data to display and at that point this locations array was empty so it didn't display any data however after the whole model returned all of the location data we we never told the table view to refresh essentially okay so now you can see the data here are two locations when you tap on them nothing happens because we haven't implemented that delegate function yet let's go ahead and add it table view did select row make sure you don't accidentally select deselect row or else you'll get some weird behavior so use this one did select row at and when the user selects location it's going to come into here so at this point I'm going to save the Xcode project and in the next lesson we're going to implement the map view so when the user is going to tap on the location and the table view we're going to bring them over to the next view and display it on the pin so thanks for watching you can download the source code in the description and make sure you subscribe so you don't miss the next lesson thanks for watching I'll see you guys later
