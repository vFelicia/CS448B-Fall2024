With timestamps:

00:00 - hello and welcome it's chris here this is part 
two of the three-part video series where flow  
00:05 - talks about mac os development versus ios 
app development and gives you a basic intro  
00:12 - into building mac os apps so if you missed part 
one just go ahead and click right there on that  
00:18 - card otherwise i hope you enjoy part two and stay 
tuned next week for part three and if you enjoy  
00:23 - flow's teaching style make sure you check out his 
youtube channel flow rights code alright enjoy  
00:28 - some aspects of swift ui are really different 
on mac os so let's dive straight into them  
00:35 - hey code crew this is floor in this second lesson 
of the macos mini course you will learn about  
00:40 - what's different in swift ui regarding the mac he 
will learn about a few new views that you might  
00:46 - not have seen before and how a few things just 
behave differently compared to ios the lesson  
00:53 - is structured in three segments first of all i 
will be talking about window and window sizes  
01:00 - next i will be talking about the navigation view 
and navigation links and then lastly i will show  
01:06 - you a few new views that you might not have seen 
before and also some view modifiers that are just  
01:11 - very specific to macos development as always 
i have already prepared an example project  
01:16 - and in this case there are just a bunch of 
different screens for us to look at all the things  
01:21 - that are in this lesson let me just run 
the project and show you how it looks  
01:26 - so it's a single window with a navigation view  
01:30 - a sidebar on the left so we can navigate to 
other detail views and then like a basic hello  
01:36 - world and a navigation link in the right hand 
side in the main panel of the navigation view  
01:43 - if you move your mouse to the edge of the window 
you will see it can't be resized and that's  
01:49 - because it has a fixed frame now this is a very 
important concept on mac os because you actually  
01:56 - need to specify the frame of your windows if i 
just comment out this frame and run the app again  
02:04 - then you will see it already has a different 
size and now i can make it really small  
02:10 - and also really big so you will have 
to yeah specify a frame for your app  
02:20 - now sometimes you want to have a specified size 
or for example a width of 800 points and a height  
02:27 - of 500 points but other times you might also want 
your user to be able to make it larger to do that  
02:34 - we can add a second frame with for example a max 
width of infinity and a max height of infinity  
02:43 - now let's run this app again and you will see 
there might be some issues here so we can make it  
02:51 - as small as possible and then that's basically our 
800 by 500 size but now we also have the option  
03:00 - to make it bigger in order for all of this to work 
you really need to think about your views that are  
03:07 - displayed inside of the window now for example 
here the navigation view just doesn't fit or fill  
03:13 - the entire window and in order for that to work 
you would also need to give it a frame with a max  
03:18 - width of infinity and a max height of infinity 
i'm not going to dive into too many details  
03:24 - regarding the window sizes i just want you to 
know that you definitely need to specify them  
03:29 - if you can choose a fixed size and if you want 
to also allow the user to make your app larger  
03:36 - then you should also add a max width and 
a max height but you should always always  
03:41 - always have a minimum size so that the window 
can't get too small and all of your content is  
03:48 - just gone next let's talk about the navigation 
view and navigation links on the mac  
03:54 - as i've already told you in the first lesson 
the navigation view basically behaves the  
04:00 - same way as it would on the ipad so you always 
have a sidebar on the left which the user can  
04:07 - drag to make smaller or larger they 
can also just completely dismiss it  
04:12 - and then you always have this detail pane on the 
right hand side which basically is yeah shows  
04:19 - the view where you have navigated to using the 
sidebar or just an initial view in your navigation  
04:24 - view let's have a look at the code for this so 
in our app struct i just have the content view  
04:32 - and then in the content view there is a navigation 
view with two children first of all a list  
04:40 - that's the sidebar on the left hand side here and 
then also a v stack with a text of hello world  
04:49 - and a navigation link with the title navigation 
link below it so that's the v6 here on the right  
04:55 - hand side this will only be shown in the very 
beginning until the user clicks on one of the  
05:00 - navigation links here in the sidebar and then 
that view will be shown but let's stay here for  
05:06 - a second because there's one very very important 
concept on mac os personally i hope that this will  
05:11 - get changed on wdc this year because i just 
really don't understand their decision here  
05:17 - but if you have a navigation link in the detail 
panel and if you click that the first time you  
05:23 - click it some weird pop over opens with your 
destination view inside of it but in subsequent  
05:31 - clicks nothing happens so your navigation on mac 
os really needs to live in that sidebar over here  
05:41 - now for example we could click on any of 
these and then the navigation would work  
05:46 - it even supports keyboards like currently i'm 
pressing the up and down arrows on my keyboard  
05:52 - all of this happens automatically but it's just a 
very important content that you need to understand  
05:58 - a navigation link in the detailed panel might not 
always and probably will never work on mac os as  
06:05 - of switch ui version 3. as we are already here on 
this split view screen we can get started with the  
06:11 - first new views that you probably have never 
seen before because they only exist on mac os  
06:16 - and that's the h split view and the v 
split view in your code you use them  
06:21 - the same way as you would use a v-stack or 
an h-stack with the only difference being  
06:26 - that the user can actually drag to resize this 
view so in this example i have one h split view  
06:35 - with a leading text on the left hand side and 
a v split view on the right hand side with the  
06:41 - top text and a bottom text so now i can drag 
to resize the age split view and then i can  
06:49 - also drag to resize the v split view on the right 
hand side let's have a look at the code for this
07:00 - so as you can see it's really basic i already told 
you it's pretty similar to the v stack and h stack  
07:07 - and yeah that's basically the case just use an 
h split view instead of an h stack and a v split  
07:13 - view instead of a v stack but as always on mac 
os you really need to care about the views frames  
07:20 - now in this example i just gave every view a frame 
with a max width of infinity and a max height of  
07:27 - infinity because of that the background always 
fills the entire left section or in this v-split  
07:34 - view the entire up and bottom section now this 
is really important you will have weird behavior  
07:41 - in your app if you don't specify infinite frames 
for example you could the user could drag around  
07:48 - this h split view and then parts of the left hand 
side will just be empty and your view will stay  
07:54 - the same size so you really need to pay attention 
to give your view the correct max width and max  
08:00 - height if you want to use a split view next up are 
two very interesting approaches that are not 100  
08:08 - specific to mac os but they just feel at home 
at mac as compared to ios and those are the ways  
08:14 - to interact with the file system so oftentimes 
you might want your user to open an image file  
08:21 - or a text file or anything alike and 
there are basically two different options  
08:26 - on the mac for the user to do that the first one 
is to use an ns panel which is an app kit api  
08:35 - or the second option would be using a view 
modifier like file importer or file exporter  
08:41 - now in this example i've implemented both versions 
first of all i have the ns open panel which gets  
08:48 - created programmatically when i click this 
button and then secondly i have the view  
08:53 - modifier file importer which gets presented 
when i click this button let me show both of  
08:59 - them to you so you can have a look at how they 
compare okay so first of all the n is open panel  
09:06 - it just opens this file dialog here that you 
have probably seen a thousand times before  
09:14 - you can select files and yada yada yada 
and then in the end click open or cancel  
09:19 - there's basically the same api for nsafe 
panel as well if you want to save a new file  
09:24 - and then the file importer basically the 
exact same thing except for you cannot  
09:30 - drag around this file importer whereas 
you can drag around in ns open panel  
09:36 - okay enough theory let's have a look at 
the code how both of them are implemented  
09:42 - okay so as i as you've already seen we have two 
buttons one for the ns open panel one for the  
09:48 - file importer let's go over the and this open 
panel first because that's the old apkid api  
09:54 - you probably won't use this in your code but 
there are some cases where you might prefer the  
09:59 - open panel over the file importer for example when 
you're using mvvm and you want to show the panel  
10:05 - from your view model then you can't just use a 
view modifier like the file importer for that  
10:10 - it might be easier in some cases to just use the 
ns open panel to do that you create an open panel  
10:18 - you can set its different properties like the 
title or the allowed content type so the types of  
10:25 - files that your user can choose and open through 
this panel in our case the user can only open  
10:31 - text files and then there is a very weird api 
here that app kit devs might know but swift ui  
10:37 - desktop we have never seen this this all happens 
on the main thread so it blocks your entire app  
10:43 - while the ns open panel is running and in order 
to present a panel you just say panel.run mode  
10:52 - this call will block the main thread and it will 
return once the user has either opened a file  
10:59 - or selected and open the file or press the 
cancel button when they have opened a file  
11:05 - it will return the enum case ok which is what 
this check here checks for so if we run the panel  
11:14 - we present it to the user and the user has 
selected a file then this code will get executed  
11:22 - now what the ns open panel gives you back is a 
property called urls which is just an array of  
11:29 - urls local file urls of course not web urls and 
then you can just do whatever you want with them  
11:36 - of course now you could use these urls to 
read the data into a string or into a data  
11:40 - object or into an image or whatever it is that 
you're doing this is just the api to do that  
11:47 - then the file importer actually is pretty 
similar so it's just a view modifier and as  
11:53 - always with swift ui view modifiers they 
have an is presented property which is  
11:58 - just a binding to a boolean state variable in 
this case could also live in your view model  
12:04 - via a publish property once that value is true 
then the file importer will get presented we once  
12:10 - again have the allowed content types array here so 
the user can only select text files and then i've  
12:17 - also said allows multiple selection to true so the 
user can select multiple files at the same time  
12:24 - in this case we get back a result enum which can 
either be of case success and then it contains  
12:30 - the urls of the files that the user have selected 
or it has the case failure and then it contains  
12:37 - a simple error which you can then handle on your 
site one important thing that i also want to  
12:43 - mention here is that mac os apps live in a sandbox 
environment and you always have to pay attention  
12:51 - to which sandbox entitlements your app needs so 
in this case we want to open user selected files  
12:58 - so you will have to set that 
entitlement in your project  
13:02 - select your target signing and capabilities 
and then in your app sandbox section here  
13:08 - under user selected file read only would be 
sufficient in this case if you also want to save  
13:14 - or edit the files you of course need to select 
read and write as you've probably already noticed  
13:21 - the sidebar here in the navigation view window 
has a very subtle blur effect and blurs everything  
13:27 - that happens behind the window so if i move it 
around you then you will see its color change  
13:32 - slightly depending on what's behind it this is 
done automatically if you have a navigation view  
13:40 - with a sidebar but if you also want to have it 
in any other view like i have in this case then  
13:46 - there is no native swifty eye solution for 
that but i think that this is something that  
13:50 - you actually want to do pretty often so i just 
want to quickly show you how that is done as well  
13:56 - under the hood this uses an ns visual 
effect view which is an app kit api
14:05 - and to use this app kit api you have to do 
basically the same approach than you would  
14:10 - have for a ui kit api on ios so you create a ns 
view representable like a ui view representable  
14:20 - you make your ns view and then you can also 
update your ns view for this visual effect you  
14:27 - there is nothing to update so that's just an empty 
function here and to make this view we just create  
14:33 - an ns visual effect view and then we can set the 
blending mode to behind window and this way the  
14:39 - colors that are behind this apps window will be 
blended and blurred into the background and then  
14:45 - you can just set this background effect as what 
i call the view representable as the background  
14:52 - of any other view just like that i think this is a 
nice little touch that makes your mac os apps feel  
14:59 - at home at macos now there is two more very small 
modifiers that are also at home on mac os that you  
15:07 - probably want to add to basically every input 
element of your swift ui app and the first one  
15:14 - is the help modifier which displays a little 
tooltip when the user hovers over a view so in  
15:21 - this case when the yuva user hovers over the hello 
world text view it displays this is a help popup  
15:29 - in code this is just a single line just add the 
help modifier to your view and then insert a  
15:35 - string now this is a localized string so if your 
app is localized and supports different languages  
15:41 - then this will get automatically translated as 
well and next up there are also keyboard shortcuts  
15:47 - which are very vital on mac os because people 
usually use their mac because they want to be  
15:52 - faster than for example on their ipad or iphone 
and keyboard shortcuts are just one way to make  
15:57 - the experience faster and more fluid now in this 
case i have a simple button that you can click to  
16:03 - change the foreground color or actually toggle 
between green and blue and when i click command  
16:08 - shift and u the button action is also fired 
let's have a look at how that's implemented  
16:15 - also very simple so i just have this button 
here with a regular action that just changes  
16:23 - its own foreground color which is stored in a 
variable this is actually not really important the  
16:29 - important part is this keyboard shortcut modifier 
here you can apply that to any button for example  
16:37 - and then when the button representing the letter 
u is pressed together with the modifiers that are  
16:45 - specified in the second half of this view modifier 
now in this case that would be command and shift  
16:52 - together with you then the action of the button 
will also be fired something that you should keep  
16:57 - in mind for your pro users to have a very nice and 
fluid workflow that's already it with this lesson  
17:05 - we have covered window sizes how the navigation 
view and navigation links behave on mac os  
17:11 - how you can have resizable views via 
the age split view and vsplit view  
17:16 - how you can open and save files on mac 
os via either the ns open panel or the  
17:24 - file importer view modifier we have discussed 
how to add that blur background view how to add  
17:31 - a little tooltip when hovering over a view and how 
to add a keyboard shortcut to a swift ui button

Cleaned transcript:

hello and welcome it's chris here this is part two of the threepart video series where flow talks about mac os development versus ios app development and gives you a basic intro into building mac os apps so if you missed part one just go ahead and click right there on that card otherwise i hope you enjoy part two and stay tuned next week for part three and if you enjoy flow's teaching style make sure you check out his youtube channel flow rights code alright enjoy some aspects of swift ui are really different on mac os so let's dive straight into them hey code crew this is floor in this second lesson of the macos mini course you will learn about what's different in swift ui regarding the mac he will learn about a few new views that you might not have seen before and how a few things just behave differently compared to ios the lesson is structured in three segments first of all i will be talking about window and window sizes next i will be talking about the navigation view and navigation links and then lastly i will show you a few new views that you might not have seen before and also some view modifiers that are just very specific to macos development as always i have already prepared an example project and in this case there are just a bunch of different screens for us to look at all the things that are in this lesson let me just run the project and show you how it looks so it's a single window with a navigation view a sidebar on the left so we can navigate to other detail views and then like a basic hello world and a navigation link in the right hand side in the main panel of the navigation view if you move your mouse to the edge of the window you will see it can't be resized and that's because it has a fixed frame now this is a very important concept on mac os because you actually need to specify the frame of your windows if i just comment out this frame and run the app again then you will see it already has a different size and now i can make it really small and also really big so you will have to yeah specify a frame for your app now sometimes you want to have a specified size or for example a width of 800 points and a height of 500 points but other times you might also want your user to be able to make it larger to do that we can add a second frame with for example a max width of infinity and a max height of infinity now let's run this app again and you will see there might be some issues here so we can make it as small as possible and then that's basically our 800 by 500 size but now we also have the option to make it bigger in order for all of this to work you really need to think about your views that are displayed inside of the window now for example here the navigation view just doesn't fit or fill the entire window and in order for that to work you would also need to give it a frame with a max width of infinity and a max height of infinity i'm not going to dive into too many details regarding the window sizes i just want you to know that you definitely need to specify them if you can choose a fixed size and if you want to also allow the user to make your app larger then you should also add a max width and a max height but you should always always always have a minimum size so that the window can't get too small and all of your content is just gone next let's talk about the navigation view and navigation links on the mac as i've already told you in the first lesson the navigation view basically behaves the same way as it would on the ipad so you always have a sidebar on the left which the user can drag to make smaller or larger they can also just completely dismiss it and then you always have this detail pane on the right hand side which basically is yeah shows the view where you have navigated to using the sidebar or just an initial view in your navigation view let's have a look at the code for this so in our app struct i just have the content view and then in the content view there is a navigation view with two children first of all a list that's the sidebar on the left hand side here and then also a v stack with a text of hello world and a navigation link with the title navigation link below it so that's the v6 here on the right hand side this will only be shown in the very beginning until the user clicks on one of the navigation links here in the sidebar and then that view will be shown but let's stay here for a second because there's one very very important concept on mac os personally i hope that this will get changed on wdc this year because i just really don't understand their decision here but if you have a navigation link in the detail panel and if you click that the first time you click it some weird pop over opens with your destination view inside of it but in subsequent clicks nothing happens so your navigation on mac os really needs to live in that sidebar over here now for example we could click on any of these and then the navigation would work it even supports keyboards like currently i'm pressing the up and down arrows on my keyboard all of this happens automatically but it's just a very important content that you need to understand a navigation link in the detailed panel might not always and probably will never work on mac os as of switch ui version 3. as we are already here on this split view screen we can get started with the first new views that you probably have never seen before because they only exist on mac os and that's the h split view and the v split view in your code you use them the same way as you would use a vstack or an hstack with the only difference being that the user can actually drag to resize this view so in this example i have one h split view with a leading text on the left hand side and a v split view on the right hand side with the top text and a bottom text so now i can drag to resize the age split view and then i can also drag to resize the v split view on the right hand side let's have a look at the code for this so as you can see it's really basic i already told you it's pretty similar to the v stack and h stack and yeah that's basically the case just use an h split view instead of an h stack and a v split view instead of a v stack but as always on mac os you really need to care about the views frames now in this example i just gave every view a frame with a max width of infinity and a max height of infinity because of that the background always fills the entire left section or in this vsplit view the entire up and bottom section now this is really important you will have weird behavior in your app if you don't specify infinite frames for example you could the user could drag around this h split view and then parts of the left hand side will just be empty and your view will stay the same size so you really need to pay attention to give your view the correct max width and max height if you want to use a split view next up are two very interesting approaches that are not 100 specific to mac os but they just feel at home at mac as compared to ios and those are the ways to interact with the file system so oftentimes you might want your user to open an image file or a text file or anything alike and there are basically two different options on the mac for the user to do that the first one is to use an ns panel which is an app kit api or the second option would be using a view modifier like file importer or file exporter now in this example i've implemented both versions first of all i have the ns open panel which gets created programmatically when i click this button and then secondly i have the view modifier file importer which gets presented when i click this button let me show both of them to you so you can have a look at how they compare okay so first of all the n is open panel it just opens this file dialog here that you have probably seen a thousand times before you can select files and yada yada yada and then in the end click open or cancel there's basically the same api for nsafe panel as well if you want to save a new file and then the file importer basically the exact same thing except for you cannot drag around this file importer whereas you can drag around in ns open panel okay enough theory let's have a look at the code how both of them are implemented okay so as i as you've already seen we have two buttons one for the ns open panel one for the file importer let's go over the and this open panel first because that's the old apkid api you probably won't use this in your code but there are some cases where you might prefer the open panel over the file importer for example when you're using mvvm and you want to show the panel from your view model then you can't just use a view modifier like the file importer for that it might be easier in some cases to just use the ns open panel to do that you create an open panel you can set its different properties like the title or the allowed content type so the types of files that your user can choose and open through this panel in our case the user can only open text files and then there is a very weird api here that app kit devs might know but swift ui desktop we have never seen this this all happens on the main thread so it blocks your entire app while the ns open panel is running and in order to present a panel you just say panel.run mode this call will block the main thread and it will return once the user has either opened a file or selected and open the file or press the cancel button when they have opened a file it will return the enum case ok which is what this check here checks for so if we run the panel we present it to the user and the user has selected a file then this code will get executed now what the ns open panel gives you back is a property called urls which is just an array of urls local file urls of course not web urls and then you can just do whatever you want with them of course now you could use these urls to read the data into a string or into a data object or into an image or whatever it is that you're doing this is just the api to do that then the file importer actually is pretty similar so it's just a view modifier and as always with swift ui view modifiers they have an is presented property which is just a binding to a boolean state variable in this case could also live in your view model via a publish property once that value is true then the file importer will get presented we once again have the allowed content types array here so the user can only select text files and then i've also said allows multiple selection to true so the user can select multiple files at the same time in this case we get back a result enum which can either be of case success and then it contains the urls of the files that the user have selected or it has the case failure and then it contains a simple error which you can then handle on your site one important thing that i also want to mention here is that mac os apps live in a sandbox environment and you always have to pay attention to which sandbox entitlements your app needs so in this case we want to open user selected files so you will have to set that entitlement in your project select your target signing and capabilities and then in your app sandbox section here under user selected file read only would be sufficient in this case if you also want to save or edit the files you of course need to select read and write as you've probably already noticed the sidebar here in the navigation view window has a very subtle blur effect and blurs everything that happens behind the window so if i move it around you then you will see its color change slightly depending on what's behind it this is done automatically if you have a navigation view with a sidebar but if you also want to have it in any other view like i have in this case then there is no native swifty eye solution for that but i think that this is something that you actually want to do pretty often so i just want to quickly show you how that is done as well under the hood this uses an ns visual effect view which is an app kit api and to use this app kit api you have to do basically the same approach than you would have for a ui kit api on ios so you create a ns view representable like a ui view representable you make your ns view and then you can also update your ns view for this visual effect you there is nothing to update so that's just an empty function here and to make this view we just create an ns visual effect view and then we can set the blending mode to behind window and this way the colors that are behind this apps window will be blended and blurred into the background and then you can just set this background effect as what i call the view representable as the background of any other view just like that i think this is a nice little touch that makes your mac os apps feel at home at macos now there is two more very small modifiers that are also at home on mac os that you probably want to add to basically every input element of your swift ui app and the first one is the help modifier which displays a little tooltip when the user hovers over a view so in this case when the yuva user hovers over the hello world text view it displays this is a help popup in code this is just a single line just add the help modifier to your view and then insert a string now this is a localized string so if your app is localized and supports different languages then this will get automatically translated as well and next up there are also keyboard shortcuts which are very vital on mac os because people usually use their mac because they want to be faster than for example on their ipad or iphone and keyboard shortcuts are just one way to make the experience faster and more fluid now in this case i have a simple button that you can click to change the foreground color or actually toggle between green and blue and when i click command shift and u the button action is also fired let's have a look at how that's implemented also very simple so i just have this button here with a regular action that just changes its own foreground color which is stored in a variable this is actually not really important the important part is this keyboard shortcut modifier here you can apply that to any button for example and then when the button representing the letter u is pressed together with the modifiers that are specified in the second half of this view modifier now in this case that would be command and shift together with you then the action of the button will also be fired something that you should keep in mind for your pro users to have a very nice and fluid workflow that's already it with this lesson we have covered window sizes how the navigation view and navigation links behave on mac os how you can have resizable views via the age split view and vsplit view how you can open and save files on mac os via either the ns open panel or the file importer view modifier we have discussed how to add that blur background view how to add a little tooltip when hovering over a view and how to add a keyboard shortcut to a swift ui button
