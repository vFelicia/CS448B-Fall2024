With timestamps:

00:00 - hey guys welcome to lesson three of
00:02 - module three in this video we're going
00:03 - to start working on our Xcode project as
00:06 - you can see the goals for this lesson is
00:08 - to finish setting up our Xcode project
00:10 - and UI we're going to add the assets to
00:13 - our project we're going to set up the
00:15 - background we're going to set up the
00:17 - project so that it's in landscape
00:18 - orientation we're going to add the
00:20 - collection view and we'll get to what
00:21 - that looks like in a second and finally
00:24 - we're going to add a collection view
00:26 - cell all right so let's dive into Xcode
00:28 - we're going to create a brand new Xcode
00:31 - project and it's going to be the single
00:34 - view app template under the iOS tab
00:36 - let's click Next and for the product
00:39 - name I'm going to call it the match app
00:42 - and the rest of the details should be
00:45 - left the same and just make sure that
00:48 - language is Swift and you can leave all
00:50 - of these things unchecked go ahead and
00:53 - click Next and I'm just going to save
00:56 - this project on my desktop for now but
00:58 - you can save it anywhere you'd like and
01:00 - we're not going to have a source control
01:03 - checked there just click create and the
01:07 - first thing we're going to do is
01:08 - actually add the assets into our asset
01:11 - library so below this video you're going
01:14 - to find a link to download the zip file
01:16 - containing all of the images go ahead
01:17 - and download that now and save it
01:20 - somewhere I've got mine saved on the
01:22 - desktop right here I'm going to unzip
01:24 - this file by double clicking it and it's
01:28 - going to pop out a folder inside that
01:30 - folder is going to contain a series of
01:32 - images for this project
01:34 - now it's also going to contain the icon
01:37 - in this icon folder but you don't need
01:39 - to add that for now so just highlight
01:41 - everything else all of these images
01:45 - right here except for the icon folder
01:48 - and then you can go ahead and drag that
01:50 - into your asset library like that and
01:53 - what you should get is you should get
01:56 - back background and you should have
01:58 - cards one all the way to 13 next we're
02:01 - going to go into our main storyboard and
02:04 - we're going to set up the background
02:07 - since this app primarily is going to be
02:10 - in the landscape orientation we can take
02:12 - this opportunity
02:13 - now to restrict this app to only
02:17 - displaying in landscape orientations the
02:19 - way you do that is actually in here in
02:22 - the project settings under the general
02:25 - tab if you scroll down a little bit and
02:27 - under deployment info you're gonna find
02:30 - device orientation you can uncheck
02:32 - portrait and you can leave upside-down
02:34 - unchecked and just leave landscape left
02:36 - and landscape right checked on and
02:39 - that's going to limit the orientations
02:42 - for this app to just the landscape
02:43 - orientations going back into our main
02:46 - dot storyboard it still shows us this
02:49 - portrait orientation but as you know
02:52 - this is only how we are viewing the
02:54 - layout it's not actually how the app is
02:57 - going to look on a device because
02:59 - remember we can click this view as part
03:02 - and we can view it under any sort of
03:05 - device or orientation so to make things
03:08 - easier for us when we're laying the
03:09 - elements out let's just switch it to
03:11 - landscape orientation like this so that
03:14 - what we see as we're laying the elements
03:17 - out and as we're designing our user
03:18 - interface is also going to match up with
03:22 - how it's going to look when it's
03:24 - launched in the simulator all right so
03:26 - now in the lower right hand corner in
03:28 - this object library make sure you're
03:30 - looking at this object tab we're going
03:32 - to type in UI image view or just the
03:36 - image view and we're going to add this
03:38 - element into our view like that and next
03:42 - we're going to put some constraints for
03:45 - it so make sure your image view is
03:47 - highlighted and click this button here
03:50 - to add new constraints we are going to
03:53 - uncheck constraint margins ok and we're
03:55 - just going to change click this little
03:59 - drop down for the top constraint and
04:00 - change it from safe area to view because
04:03 - we really want this to go the full edge
04:05 - and we're going to do the same thing
04:07 - down here change that to view and we're
04:11 - going to do that for all of these four
04:14 - sides and then just change all of these
04:16 - values to zero
04:20 - like that we're gonna add these four
04:22 - constraints and now we can go up here in
04:27 - the inspector pane for the image view
04:29 - change the image property to the
04:32 - background now that our background is
04:35 - done we can think about how we're going
04:37 - to lay out the cards and as you saw from
04:40 - the app preview the cards are laid out
04:42 - in this sort of grid like fashion well
04:45 - UIKit actually has an element to display
04:48 - collections of data like that in that
04:51 - sort of grid like fashion and that is
04:53 - called the collection view let's take a
04:55 - look at some examples of the collection
04:57 - view in action if you've ever used an
04:59 - iPhone you have probably used a
05:01 - collection view before here are just a
05:04 - few examples of collection views and if
05:07 - you've ever used the Photos app on your
05:09 - iPhone that is a collection view as well
05:12 - anytime you need to display sort of a
05:14 - grid-like layout of elements then
05:18 - chances our collection view is going to
05:20 - fit the bill when you're using a
05:22 - collection view the part I've
05:23 - highlighted on the screen is actually
05:25 - the whole collection view but each item
05:28 - inside the collection view is a cell and
05:30 - that cell is basically just repeated for
05:33 - every single item that you want to
05:35 - display in your collection so in our
05:37 - example our collection view would also
05:39 - fill up the whole screen but each cell
05:42 - would be one of the cards so let's go
05:45 - back to Xcode now and let's add the
05:46 - collection view to our storyboard let's
05:49 - go down to the object library and look
05:52 - up the collection view this is also a UI
05:56 - kit class so there are a couple things
05:59 - that pop up you want to choose
06:01 - collection view here not the collection
06:03 - view controller not the collection view
06:05 - cell not any of these things you want
06:08 - the collection view let's click and drag
06:11 - that over here and what we're going to
06:13 - do is just stretch it so that it covers
06:16 - the entire screen pretty much so have
06:19 - that collection you highlighted and just
06:22 - enable all four this time we are going
06:24 - to leave it as constraint margins and we
06:27 - are also just going to leave it set to
06:29 - the safe area because we don't want any
06:31 - of our collection view covered up so
06:33 - it's best to play within that safe area
06:35 - and we are just going to set zeros for
06:39 - all of that and just to mention the
06:41 - reason why we didn't do the safe area
06:44 - for the background it was because the
06:46 - background is not typically something
06:48 - that the user will interact with so it's
06:49 - okay if part of the background is
06:51 - covered up or a bit of it is obscure all
06:53 - right so the collection view right now
06:55 - we have set it to be pretty much full
06:58 - screen and if you expand it in the
07:00 - document outline like this you're going
07:02 - to see a single collection view cell now
07:05 - in this video we're simply going to set
07:07 - up some of the elements in that
07:09 - collection view cell but I'm not gonna
07:11 - go into the details about how you use
07:14 - the collection view because I'm going to
07:15 - do that in the next video so for now we
07:18 - are just going to add some of the
07:19 - elements which we need into this
07:21 - collection view cell so right now this
07:23 - cell doesn't really have a size and
07:25 - we're going to set a temporary size for
07:27 - it I'm just because we know what size
07:30 - this image is going to be now just keep
07:33 - in mind that even though we are kind of
07:34 - setting a temporary size now so it makes
07:38 - it a little easier to customize the cell
07:39 - it isn't going to be the final size when
07:43 - the app actually runs because through
07:44 - Swift code we are going to dynamically
07:47 - take a look at what sort of device the
07:49 - user is using how much space in terms of
07:52 - the width they have got and then we are
07:54 - going to programmatically divide that
07:56 - space up so that it fits four cards
07:59 - nicely and then we are going to set the
08:02 - actual size of the cell through code but
08:04 - for now we are going to set this cell
08:06 - size a little larger so it doesn't look
08:08 - like this tiny square it's a little hard
08:10 - to work with so we're going to go into
08:13 - the asset library click on any one of
08:14 - the cards choose this tab in the
08:17 - inspector view and I just want to take a
08:18 - look at the size of the image so I'm
08:21 - actually gonna have to select the 1x1
08:23 - as well don't select the 2 X or the 3 X
08:27 - because that will actually give you a
08:29 - larger size then the image actually is
08:31 - because after all this is two times the
08:33 - size and this is three times the size so
08:35 - let's take a look at the One X and if we
08:38 - are on the correct tab and you scroll
08:40 - down you're going to see the image size
08:41 - 158 by 2 2 4
08:44 - we're going to go back to the storyboard
08:45 - here and let us highlight the collection
08:50 - view itself go under the size inspector
08:52 - and we can specify the cell size so that
08:55 - was one fifty eight five two two four
08:59 - like that and you can see that cell size
09:02 - change so now it's the size of a single
09:04 - card again it's not going to be the
09:06 - final size because we're going to do
09:08 - that programmatically okay the next
09:10 - thing we want to do is let's add two
09:13 - image views to this cell so down here
09:17 - let's choose type an image view and then
09:21 - let's drag the image view into the cell
09:23 - just like that and in your document
09:26 - outline you should see that this image
09:28 - view is actually underneath you know
09:30 - this cell and when you collapse it that
09:33 - image view should be tucked into that
09:34 - cell so that tells you it's actually
09:36 - inside the cell and not outside of it so
09:39 - now let's add some constraints to that
09:40 - image view make sure you have it
09:41 - highlighted by selecting it and then
09:43 - down here under add new constraints we
09:45 - are going to just go like that all four
09:49 - and just make them all zeros for them
09:54 - and that is going to make the image view
09:56 - stick to all four sides one more thing
09:58 - we want to do just right now is if you
10:01 - still have the image view highlighted
10:03 - and you go into this attributes
10:04 - inspector change the content mode to
10:07 - aspect fit and that is going to make
10:10 - sure that the image displayed and that
10:11 - image view is not stretched and it's
10:14 - going to be the size that fits within
10:16 - that cell all right now we are going to
10:18 - add another image view into our
10:20 - collection view cell because the trick
10:22 - here is we're going to have one image
10:24 - view displaying the back of the card and
10:26 - the other image view displaying the
10:28 - front of the card and we're just going
10:30 - to transition between those two image
10:32 - views to simulate the flipping of the
10:35 - card and so now while we still have
10:38 - image view selected in this object
10:40 - library let's drag it into the
10:42 - collection view cell again so there it
10:46 - is in here you should see that there are
10:49 - two image views underneath the
10:51 - collection view cell and when you
10:52 - collapse the cell both of them should be
10:54 - tucked in
10:55 - alright so let's highlight this one
10:57 - which we just added and we're going to
10:59 - add the same constraints to it just like
11:05 - that add four constraints and we are
11:08 - also going to set the content mode to
11:10 - aspect fit okay so in this collection
11:14 - view cell right here the one that is in
11:17 - front or closest to the user is actually
11:20 - this one so this image view is
11:24 - underneath this one if we want the cards
11:28 - to start off face down let's say then we
11:30 - are going to select this image view
11:32 - which is closer to the user and we are
11:35 - going to change the image to the back of
11:37 - the card as for the front right now
11:41 - we're not going to set it because we
11:44 - need to randomly generate the cards
11:46 - through code and then we're going to set
11:47 - it through code but I mean even if you
11:49 - chose card one or car 10 right now it
11:52 - wouldn't be visible right because this
11:54 - back of the card is covering that front
11:57 - of the card I mean you can might as well
12:00 - select card one I guess just to see okay
12:04 - so one more thing that we need to do is
12:06 - if you highlight this collection view
12:09 - cell here and you take a look at this
12:11 - tab right here you'll see that there is
12:14 - this part that says identifier and it
12:18 - this is called the reuse identifier for
12:21 - the cell because what you're doing here
12:24 - is you are basically designing a
12:26 - prototype cell for the collection view
12:28 - and this cell is going to be essentially
12:31 - a template you know it's a prototype for
12:34 - how all of the cells in this collection
12:36 - view are going to look like so the
12:38 - reason we need to give this prototype
12:40 - cell an identifier here is because you
12:44 - can have different types of prototype
12:47 - cells in your collection view if your
12:49 - collection view shows different types of
12:51 - data each grid item might not be the
12:54 - same and so you might have different
12:56 - types of cells in your collection view
12:58 - so right here all of our cards look the
13:01 - same and all of the cells look the same
13:03 - so we're only specifying one prototype
13:06 - cell but we still have to give it an
13:07 - ident
13:08 - I'm just telling you that the reason why
13:10 - we have an identifier is because
13:12 - potentially there could be multiple
13:14 - types of cells in a collection view so
13:16 - each of those prototypes that you design
13:19 - you would give it a different identifier
13:21 - and then Plus as you'll learn in the
13:23 - next video when we learn how to use the
13:25 - collection view through the swift code
13:27 - when you want to grab one of these
13:30 - prototype cells that you designed you
13:32 - would indicate it by the identifier that
13:35 - you give it here so we're going to just
13:37 - call this card a cell now to type that
13:41 - into the identifier press ENTER that's a
13:45 - great start to our card matching game
13:47 - let's recap what we've learned in this
13:49 - lesson you learn how to limit your app
13:51 - to specific orientations you learned
13:53 - about the collection view and how to
13:55 - specify prototype cells don't forget
13:57 - that you can download my Xcode project
13:59 - from the link below now I want to ask
14:01 - you a question and please be honest as
14:03 - you're watching this video series
14:05 - are you following along and building
14:07 - this project on your own computer let me
14:09 - know by commenting below yes or no
14:11 - lastly if you liked this video and you
14:13 - want to see more please consider
14:15 - subscribing by hitting that red button
14:16 - below and if you don't want to miss a
14:18 - single video make sure you hit that Bell
14:20 - icon as well so thanks for watching and
14:22 - I'll see you guys in the next video

Cleaned transcript:

hey guys welcome to lesson three of module three in this video we're going to start working on our Xcode project as you can see the goals for this lesson is to finish setting up our Xcode project and UI we're going to add the assets to our project we're going to set up the background we're going to set up the project so that it's in landscape orientation we're going to add the collection view and we'll get to what that looks like in a second and finally we're going to add a collection view cell all right so let's dive into Xcode we're going to create a brand new Xcode project and it's going to be the single view app template under the iOS tab let's click Next and for the product name I'm going to call it the match app and the rest of the details should be left the same and just make sure that language is Swift and you can leave all of these things unchecked go ahead and click Next and I'm just going to save this project on my desktop for now but you can save it anywhere you'd like and we're not going to have a source control checked there just click create and the first thing we're going to do is actually add the assets into our asset library so below this video you're going to find a link to download the zip file containing all of the images go ahead and download that now and save it somewhere I've got mine saved on the desktop right here I'm going to unzip this file by double clicking it and it's going to pop out a folder inside that folder is going to contain a series of images for this project now it's also going to contain the icon in this icon folder but you don't need to add that for now so just highlight everything else all of these images right here except for the icon folder and then you can go ahead and drag that into your asset library like that and what you should get is you should get back background and you should have cards one all the way to 13 next we're going to go into our main storyboard and we're going to set up the background since this app primarily is going to be in the landscape orientation we can take this opportunity now to restrict this app to only displaying in landscape orientations the way you do that is actually in here in the project settings under the general tab if you scroll down a little bit and under deployment info you're gonna find device orientation you can uncheck portrait and you can leave upsidedown unchecked and just leave landscape left and landscape right checked on and that's going to limit the orientations for this app to just the landscape orientations going back into our main dot storyboard it still shows us this portrait orientation but as you know this is only how we are viewing the layout it's not actually how the app is going to look on a device because remember we can click this view as part and we can view it under any sort of device or orientation so to make things easier for us when we're laying the elements out let's just switch it to landscape orientation like this so that what we see as we're laying the elements out and as we're designing our user interface is also going to match up with how it's going to look when it's launched in the simulator all right so now in the lower right hand corner in this object library make sure you're looking at this object tab we're going to type in UI image view or just the image view and we're going to add this element into our view like that and next we're going to put some constraints for it so make sure your image view is highlighted and click this button here to add new constraints we are going to uncheck constraint margins ok and we're just going to change click this little drop down for the top constraint and change it from safe area to view because we really want this to go the full edge and we're going to do the same thing down here change that to view and we're going to do that for all of these four sides and then just change all of these values to zero like that we're gonna add these four constraints and now we can go up here in the inspector pane for the image view change the image property to the background now that our background is done we can think about how we're going to lay out the cards and as you saw from the app preview the cards are laid out in this sort of grid like fashion well UIKit actually has an element to display collections of data like that in that sort of grid like fashion and that is called the collection view let's take a look at some examples of the collection view in action if you've ever used an iPhone you have probably used a collection view before here are just a few examples of collection views and if you've ever used the Photos app on your iPhone that is a collection view as well anytime you need to display sort of a gridlike layout of elements then chances our collection view is going to fit the bill when you're using a collection view the part I've highlighted on the screen is actually the whole collection view but each item inside the collection view is a cell and that cell is basically just repeated for every single item that you want to display in your collection so in our example our collection view would also fill up the whole screen but each cell would be one of the cards so let's go back to Xcode now and let's add the collection view to our storyboard let's go down to the object library and look up the collection view this is also a UI kit class so there are a couple things that pop up you want to choose collection view here not the collection view controller not the collection view cell not any of these things you want the collection view let's click and drag that over here and what we're going to do is just stretch it so that it covers the entire screen pretty much so have that collection you highlighted and just enable all four this time we are going to leave it as constraint margins and we are also just going to leave it set to the safe area because we don't want any of our collection view covered up so it's best to play within that safe area and we are just going to set zeros for all of that and just to mention the reason why we didn't do the safe area for the background it was because the background is not typically something that the user will interact with so it's okay if part of the background is covered up or a bit of it is obscure all right so the collection view right now we have set it to be pretty much full screen and if you expand it in the document outline like this you're going to see a single collection view cell now in this video we're simply going to set up some of the elements in that collection view cell but I'm not gonna go into the details about how you use the collection view because I'm going to do that in the next video so for now we are just going to add some of the elements which we need into this collection view cell so right now this cell doesn't really have a size and we're going to set a temporary size for it I'm just because we know what size this image is going to be now just keep in mind that even though we are kind of setting a temporary size now so it makes it a little easier to customize the cell it isn't going to be the final size when the app actually runs because through Swift code we are going to dynamically take a look at what sort of device the user is using how much space in terms of the width they have got and then we are going to programmatically divide that space up so that it fits four cards nicely and then we are going to set the actual size of the cell through code but for now we are going to set this cell size a little larger so it doesn't look like this tiny square it's a little hard to work with so we're going to go into the asset library click on any one of the cards choose this tab in the inspector view and I just want to take a look at the size of the image so I'm actually gonna have to select the 1x1 as well don't select the 2 X or the 3 X because that will actually give you a larger size then the image actually is because after all this is two times the size and this is three times the size so let's take a look at the One X and if we are on the correct tab and you scroll down you're going to see the image size 158 by 2 2 4 we're going to go back to the storyboard here and let us highlight the collection view itself go under the size inspector and we can specify the cell size so that was one fifty eight five two two four like that and you can see that cell size change so now it's the size of a single card again it's not going to be the final size because we're going to do that programmatically okay the next thing we want to do is let's add two image views to this cell so down here let's choose type an image view and then let's drag the image view into the cell just like that and in your document outline you should see that this image view is actually underneath you know this cell and when you collapse it that image view should be tucked into that cell so that tells you it's actually inside the cell and not outside of it so now let's add some constraints to that image view make sure you have it highlighted by selecting it and then down here under add new constraints we are going to just go like that all four and just make them all zeros for them and that is going to make the image view stick to all four sides one more thing we want to do just right now is if you still have the image view highlighted and you go into this attributes inspector change the content mode to aspect fit and that is going to make sure that the image displayed and that image view is not stretched and it's going to be the size that fits within that cell all right now we are going to add another image view into our collection view cell because the trick here is we're going to have one image view displaying the back of the card and the other image view displaying the front of the card and we're just going to transition between those two image views to simulate the flipping of the card and so now while we still have image view selected in this object library let's drag it into the collection view cell again so there it is in here you should see that there are two image views underneath the collection view cell and when you collapse the cell both of them should be tucked in alright so let's highlight this one which we just added and we're going to add the same constraints to it just like that add four constraints and we are also going to set the content mode to aspect fit okay so in this collection view cell right here the one that is in front or closest to the user is actually this one so this image view is underneath this one if we want the cards to start off face down let's say then we are going to select this image view which is closer to the user and we are going to change the image to the back of the card as for the front right now we're not going to set it because we need to randomly generate the cards through code and then we're going to set it through code but I mean even if you chose card one or car 10 right now it wouldn't be visible right because this back of the card is covering that front of the card I mean you can might as well select card one I guess just to see okay so one more thing that we need to do is if you highlight this collection view cell here and you take a look at this tab right here you'll see that there is this part that says identifier and it this is called the reuse identifier for the cell because what you're doing here is you are basically designing a prototype cell for the collection view and this cell is going to be essentially a template you know it's a prototype for how all of the cells in this collection view are going to look like so the reason we need to give this prototype cell an identifier here is because you can have different types of prototype cells in your collection view if your collection view shows different types of data each grid item might not be the same and so you might have different types of cells in your collection view so right here all of our cards look the same and all of the cells look the same so we're only specifying one prototype cell but we still have to give it an ident I'm just telling you that the reason why we have an identifier is because potentially there could be multiple types of cells in a collection view so each of those prototypes that you design you would give it a different identifier and then Plus as you'll learn in the next video when we learn how to use the collection view through the swift code when you want to grab one of these prototype cells that you designed you would indicate it by the identifier that you give it here so we're going to just call this card a cell now to type that into the identifier press ENTER that's a great start to our card matching game let's recap what we've learned in this lesson you learn how to limit your app to specific orientations you learned about the collection view and how to specify prototype cells don't forget that you can download my Xcode project from the link below now I want to ask you a question and please be honest as you're watching this video series are you following along and building this project on your own computer let me know by commenting below yes or no lastly if you liked this video and you want to see more please consider subscribing by hitting that red button below and if you don't want to miss a single video make sure you hit that Bell icon as well so thanks for watching and I'll see you guys in the next video
