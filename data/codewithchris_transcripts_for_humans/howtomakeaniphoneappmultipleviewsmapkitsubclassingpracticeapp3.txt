With timestamps:

00:05 - now in all the demos that we've done so
00:07 - far they've all been single view
00:09 - applications and in fact when you start
00:11 - an EXO project it just gives you one
00:13 - default view um we're going to take a
00:16 - look at how we can add uh a second view
00:19 - so that you can navigate between the two
00:21 - uh iPhone applications uh you usually
00:24 - have more than one View and we're going
00:26 - to take a look at how what code you need
00:28 - to write in order to navigate between
00:30 - the two views okay let's do it you
00:33 - notice that we're using xcode 5 in this
00:36 - demo and if you're still using xcode 4
00:39 - don't worry you'll still be able to
00:40 - follow along and I'll point out along
00:42 - the way what the differences are for
00:44 - xcode 4 if there are any and I'll show
00:47 - you what to do so don't worry if you're
00:49 - using exod 4 you'll still be able to
00:51 - follow this tutorial 100% okay so we'll
00:53 - start off by creating a new
00:56 - project and let's create a single View
00:59 - application and we'll add a second view
01:01 - to that if you're using xcode 4 you'll
01:03 - want to make sure that used storyboards
01:05 - is checked because we want to use them
01:07 - in this demo and use automatic reference
01:10 - counting should also be checked and
01:11 - include unit tests you can leave them as
01:13 - default and devices we want build for
01:16 - iPhone right now so make sure it's set
01:18 - to iPhone now give your project a
01:23 - name and then choose a place to save
01:28 - it all right now the first thing I want
01:30 - you to go to is your storyboard file
01:33 - click
01:34 - this and then go up to editor and then
01:36 - go Ed in and hit navigation controller
01:40 - select
01:42 - that now with storyboards you can
01:45 - actually double click here uh on an
01:47 - empty area on the storyboard to zoom out
01:49 - but keep in mind that in zoomed out view
01:51 - you can't drag UI elements onto the view
01:53 - so you can double click again to go into
01:55 - zoomed into view to add UI elements but
01:57 - zoomed out view is good because it
01:59 - allows you to to get an overall view of
02:02 - your project in your app flow and
02:04 - reposition the views and if I haven't
02:06 - explained what a storyboard is already
02:08 - it's essentially like in xcode 4 when
02:10 - you were working with zip files views
02:12 - for your view controllers except that in
02:14 - a storyboard you're able to see the app
02:16 - flow and you're able to make connections
02:18 - between the view controllers so that you
02:20 - can navigate between views so it's
02:22 - essentially you're still using interface
02:23 - Builder to put UI elements onto the
02:25 - views but it's more of a a bigger
02:27 - picture view of the app flow if you will
02:31 - now the next thing we'll want to do is
02:33 - add a second view controller as our
02:34 - second view so in this demo the first
02:37 - view is going to display the address and
02:40 - an image of a physical location and the
02:42 - second view is going to be a map about
02:45 - that area if your library pane is not
02:47 - looking at the objects tab switch to
02:49 - that see there are a couple of tabs here
02:51 - so make sure you're on the objects Tab
02:52 - and if you don't see view controller you
02:54 - can just type it in here and then it'll
02:57 - filter it in you filter it out it
02:59 - doesn't look like it but it filtered out
03:01 - the rest of the stuff I got a basic view
03:03 - controller
03:05 - here so see it's a little messy again so
03:08 - I'm just going
03:12 - to now the thing I want to show you here
03:15 - is that remember with our uh view
03:17 - controllers in the past when you click
03:18 - assistant editor it would show up the
03:21 - corresponding view controller code file
03:24 - whether it's it was the M or theh and
03:27 - then we uh create Outlets or actions
03:29 - into these files but with the new view
03:32 - controller that we just created it
03:34 - autogenerated a view controller file for
03:36 - us so instead we want to create our own
03:39 - view controller class and attach it to
03:42 - this view so right now the initial view
03:44 - controller that was created with our
03:46 - project right here that manages this
03:49 - first view right here the fact that we
03:50 - dragged a second view controller
03:52 - essentially it's a it's just a view uh
03:54 - onto the storyboard it autogenerated a
03:57 - view controller class to manage that
04:00 - view for us so right now we're going to
04:02 - go to this folder here create a new file
04:05 - new objective cclass and we're going to
04:08 - type in map view
04:10 - controller and for subass we're going to
04:13 - make sure that says UI view controller
04:14 - and you can leave these two options
04:16 - unchecked and that's the same for xcode
04:18 - 4 just going to save
04:21 - it so I want this map view controller
04:25 - class to be the class that manages this
04:28 - view so what you can can do actually
04:30 - here is in your storyboard click the
04:32 - second view controller that we added and
04:34 - then up here in the inspector view in
04:36 - this tab there are a couple of tabs
04:38 - switch the tab where you see custom
04:40 - class and then in the class right here
04:42 - you can actually type in map view
04:44 - controller and just by doing that you
04:47 - can see that when you click this view
04:49 - now on the assistant editor view it
04:50 - shows you the map view controller and
04:53 - that's specifying that this map view
04:55 - controller manages this view now let's
04:57 - add a button on the first View view to
05:00 - travel to the second view all right so
05:02 - get into zoomed in view so we can add UI
05:05 - elements these buttons here you can
05:08 - shift your view so that you get more
05:10 - space if you need it I need the object
05:12 - Library okay search for UI
05:16 - button and this stuff that you guys did
05:19 - before so shouldn't come as anything new
05:21 - I'm going to go into the properties
05:22 - inspector and change this button text to
05:27 - map okay now all you have to do is hold
05:30 - down control and click your new button
05:33 - and then drag a blue line into your
05:36 - second view controller and then a little
05:38 - modal will pop out asking what type of
05:40 - segue do you want choose
05:42 - push and in the recap video we'll
05:45 - explain we'll go more in depth into what
05:48 - a navigation controller is and what
05:50 - actually is happening behind the scenes
05:52 - and don't worry too much about that for
05:54 - now I just want you guys to follow along
05:56 - and practice these actions okay so in
05:58 - the last video we introduced the model
06:00 - view controller pattern and in the past
06:02 - in our previous two practices we didn't
06:04 - have a model class to represent the
06:07 - model in the MVC pattern so in in this
06:09 - one we're actually going to uh create a
06:11 - class to represent our model and that
06:14 - model is going to basically uh feed the
06:17 - location that we're going to display now
06:19 - before we even create the model we need
06:21 - to create a class that represents the
06:23 - location so that the model has you know
06:25 - an object to pass to the view controller
06:28 - so we're going to create a new class
06:30 - called location a new objective
06:33 - cclass called location and it's a subass
06:36 - of NS
06:40 - object and our model is going to pass
06:43 - back an instance of location to the view
06:45 - controller and the view controller is
06:47 - going to take those properties of our
06:49 - location object and it's going to feed
06:51 - it to the view so the view can display
06:53 - that information so let's create our
06:55 - model class it's going to be another
06:58 - Objective C Class going to call this
07:00 - location data
07:03 - controller and it's also a subass of NS
07:06 - object just in case you guys missed
07:11 - that okay so let's work on our location
07:13 - class first we're going to want to have
07:15 - a couple of properties on our
07:18 - location for instance we're going to
07:22 - want an
07:24 - address which will be of type NS string
07:30 - an NS string is considered a object so
07:34 - it's going to need a star to denote that
07:35 - this is a
07:37 - pointer I'll show you in a second when
07:40 - you don't need it we're going to
07:43 - want the file name of the photo that
07:46 - we're going to display so I'm just going
07:48 - to make it a string as
07:51 - well and then we're going to also want
07:53 - to store the latitude and
07:55 - longitude oops
08:02 - now this doesn't need a star because
08:04 - it's not a pointer to an
08:09 - object float is a numerical value uh
08:13 - it's essentially a floating Point
08:15 - decimal okay so our location class is
08:17 - going to represent a physical location
08:19 - with these properties now our model or
08:22 - our location data controller we'll need
08:24 - a method that the view controller can
08:26 - call to retrieve an instance of location
08:29 - so we're going to create a method that
08:30 - will return a location object we need
08:34 - the star because essentially it's a
08:36 - pointer to where the object
08:41 - is and if it's confusing right now
08:44 - you're going to get the hang of when you
08:45 - need to put that star and when you don't
08:47 - need to essentially you know you'll get
08:48 - used to it when we work with objects and
08:51 - we're we're passing variables that
08:53 - reference objects we're going to need
08:54 - the star to denote that that variable is
08:57 - a pointer don't worry if you you get get
08:59 - confused now the more you do it the more
09:01 - you'll understand so xcode is
09:03 - complaining right now that in location
09:06 - data controller it doesn't know what
09:07 - location is it doesn't know what about
09:10 - this class so we got to import that
09:11 - class the header file specifically so
09:14 - that it will know about it okay so we've
09:15 - done two things right now that we talked
09:18 - about in the last recap we've manually
09:20 - declared properties and we've also
09:22 - manually typed out a method signature in
09:24 - the header file so you'll know that this
09:26 - method is a public method that other
09:28 - classes will be able see so let's
09:30 - implement this method now in the
09:32 - implementation file of the location data
09:34 - controller so just copy the method
09:37 - signature and add curly braces and
09:41 - normally in a model you will probably
09:43 - get your data from an external Source
09:45 - either from a like a feed an RSS feed a
09:48 - Json feed or a database in a remote
09:51 - server somewhere it connect to through
09:53 - an API and grab that data but for this
09:56 - demo we're just going to manually create
09:58 - a location object object and hardcode
10:00 - some values and return that so our model
10:02 - is always going to return the same
10:04 - location over and over again so once
10:07 - again I'm going to declare a variable to
10:09 - hold our location object which means
10:11 - that we're going to need a
10:14 - star is equal to and I'm going to
10:17 - allocate a new instance of the location
10:20 - class and call a knit on that object to
10:24 - initialize it so now I've got a new
10:26 - instance of location and I'm going to
10:28 - start setting its
10:32 - properties place that I really liked in
10:35 - San Francisco is called Phils
10:38 - coffee and it's a really cool coffee
10:41 - place with lots of different types of
10:50 - coffee I like this so much in fact I
10:52 - bought a couple of bags
10:57 - home okay so
11:00 - the photo name is going to be coffee
11:03 - beans although we haven't added that
11:06 - image to the project yet but we will
11:08 - just after this and the next thing I
11:10 - want to do is add the latitude and
11:13 - longitude now the next thing I want to
11:15 - do is input the latitude and longitude
11:17 - for the location and there's a ton of
11:20 - websites out there if you just Google a
11:22 - convert address to lat long there are
11:24 - websites where you can just punch in the
11:26 - address and it'll spit out the latitude
11:28 - and longitude for you
11:35 - 37.78
11:37 - 453 and the longitude
11:41 - is -1
11:45 - 122.4
11:47 - 7158 and then I'm going to return
11:51 - this return this object remember that
11:54 - means that because we specified the
11:56 - return type as a location object I'm
11:59 - going to going to have to actually
12:00 - return something and so in this method
12:02 - what happens is it creates a new
12:03 - instance of the location class sets all
12:05 - these properties and then returns it to
12:08 - whoever is calling it so now let's add
12:10 - the coffee beans image so you can click
12:12 - the link on the screen or in the
12:14 - description below to go to a page uh
12:16 - where you can download the scource code
12:17 - for this project as well as the coffee
12:19 - beans image and you're going to have to
12:21 - sign up for a free code with Chris
12:23 - account and then after that you'll be
12:25 - able to download it so I'm going to give
12:26 - you a minute to download that okay so
12:28 - now that you've got the coffee beans
12:30 - image we have to add it to the project
12:32 - it's going to differ a little bit
12:33 - between xcode 4 and 5 in xcode 4 you can
12:36 - just drag it into your project like this
12:38 - and then you can have this checked off
12:40 - if it's not in your project folder and
12:42 - it'll copy it there and then click
12:44 - finish and you've added it in xcode 5 we
12:46 - can use our asset catalog and so choose
12:49 - the asset catalog from the project
12:51 - Navigator and then you can write click
12:53 - here go import and then you can choose
12:55 - your coffee beans image and that's the
12:58 - catalog just allows you to manage uh
13:00 - different versions of your assets easily
13:03 - so for example if you you know choose
13:05 - which devices this is going to work for
13:07 - like iPad then it'll tell you that
13:09 - you're going to need you know retina one
13:11 - and a non-retina one and it'll just help
13:13 - you manage
13:15 - that and I just realized that our image
13:18 - is a PNG so we need to go back to our
13:22 - model and change that file extension
13:25 - that file name to PNG all right now
13:28 - let's add add some UI elements to our
13:31 - first view in order to show that data so
13:33 - I'm going to start by searching for UI
13:36 - image view in the lower right I'm going
13:38 - to drag this guy here okay remember you
13:41 - can add elements in zoomed out view so
13:43 - make sure you're in the zoomed in view
13:46 - next I'm going to add a UI
13:50 - label okay I'm just going to stretch it
13:52 - out
13:59 - and you can make sure that in the
14:01 - properties inspector set lines to zero
14:04 - to ensure that it will uh wrap it will
14:07 - be multi-line okay so that's sufficient
14:09 - for now so remember that the view
14:11 - controller is going to get the location
14:13 - object from our model which is the
14:15 - location data controller and then it's
14:17 - going to take that location object and
14:19 - update these UI elements with the
14:21 - location properties so in order to do
14:23 - that the view controller needs a
14:25 - reference to these two elements so now
14:28 - let's do that let's go to the header
14:30 - file and do what you've done before in
14:32 - previous practices by control holding
14:35 - the control and clicking and dragging
14:37 - here and creating a property to expose
14:40 - these UI elements to the view controller
14:42 - I'm going to call this one photo image
14:45 - View and for the label I'm going to call
14:49 - that address
14:57 - label okay now go to the implementation
15:00 - file of the view
15:02 - controller and then underneath view did
15:04 - load underneath that method I want you
15:06 - to add a new method called view did
15:09 - appear and you'll notice that as soon as
15:11 - you start typing it xcode will detect
15:13 - that that's the method you want and this
15:15 - is because you're actually overriding
15:17 - the view did appear method of the UI
15:20 - view controller class and in the recap
15:22 - we'll go into what subclassing is so for
15:26 - now press enter and you can add that
15:28 - method and then in this method
15:30 - essentially it gets triggered right
15:32 - after the view has appeared to the user
15:34 - and we
15:36 - can oh we need to
15:39 - import the header file for the location
15:43 - data controller
15:45 - and as well as the
15:47 - location or else view controller doesn't
15:50 - know about
15:53 - them so I'm just going to create a
15:56 - variable called Model to hold our
15:59 - instance of the location data controller
16:01 - and then I'm going to create and to
16:03 - allocate it initialize
16:06 - it and then I'm also going to create a
16:08 - variable to hold our
16:14 - location and this variable is going to
16:17 - hold the location that the model passes
16:19 - back so I'm going to call that method
16:21 - that we created in our model called get
16:23 - point of
16:25 - interest and it's going to return that
16:27 - location and assign it to this POI
16:30 - variable now I can access the properties
16:32 - that we just created on our view in our
16:35 - storyboard and go self. address label.
16:39 - text equals POI do address and
16:44 - furthermore I can say
16:47 - self. photo image view there's a method
16:50 - called set image of the UI image view
16:53 - which will take in a UI image so I need
16:57 - to somehow convert that file that we
16:59 - added the coffee beans. PNG to a UI
17:02 - image class well the UI image class
17:04 - actually has a class
17:07 - method and we'll get into that in the
17:09 - future called image named so where you
17:12 - can pass in a string for the file name
17:15 - as long as it's in your project and
17:16 - it'll convert it into it'll create a UI
17:18 - image pointing to that file so so
17:22 - actually we can set it to the property
17:26 - of our
17:27 - location photo file name that's why we
17:29 - created that property okay so now you
17:32 - can run your application and see what
17:34 - happens but essentially in this method
17:36 - it's getting the location from the model
17:38 - and then it's updating the address and
17:40 - the UI image view with the
17:43 - properties okay so this is great because
17:45 - we see our properties showing up and if
17:48 - you click the map button you actually
17:49 - get to navigate to the other View Press
17:52 - back to get
17:53 - back now let's add a map to the second
17:57 - view so go back to the storyboard and go
17:59 - to the second View and then search for
18:03 - map view you can drag
18:05 - it plop it on there now in assistant
18:08 - editor you want to go to the header file
18:10 - we want to expose this map as a property
18:13 - to the map view controller so hold down
18:15 - control drag it
18:17 - over let go I'm going to call this map
18:20 - view and right now our project doesn't
18:23 - know what this class is MK map view so
18:26 - it actually exists in another framework
18:29 - which we have to add by default xcode
18:31 - doesn't include all the Frameworks for
18:33 - all the functionality because then your
18:35 - app would be incredibly bloated and
18:37 - you'd have all this code and all these
18:38 - Frameworks for stuff you don't need so
18:40 - you just add what you need alak cart
18:42 - style so go here and click this root
18:45 - node in your project Navigator and
18:47 - actually you could do it right here in
18:48 - next code 5 you can just click uh
18:52 - plus and then you search for a map kit
18:54 - and then just double click that to add
18:57 - it and so now now you've added map kit
18:59 - framework and that will give you the
19:01 - functionality for maps in xcode 4
19:03 - however you go to build settings sorry
19:05 - you go to build phases and then you
19:07 - click this tab link library with
19:09 - libraries and then you'll find that
19:11 - section here where you can add
19:15 - it okay now if you run it oh so now
19:18 - let's go back to the map
19:20 - viewcontroller.h and we need to import
19:22 - that
19:27 - framework so Now map view controller
19:29 - will know about that and it'll know
19:31 - about what Mk map view is so now you can
19:34 - run
19:35 - it and when you click map you will
19:39 - actually see you'll get a map so we'll
19:42 - want to switch the region of the map to
19:45 - our coffee shop location so stop the
19:47 - project and then go to the
19:49 - implementation file I'm going to go to
19:50 - the single view now go to the
19:53 - implementation file of the map view
19:54 - controller and we're also going to use
19:56 - the view did appear method again so
20:00 - overwrite
20:03 - that essentially what we're going to do
20:05 - in this method is ask our model for the
20:08 - location and then we're going to grab
20:09 - the latitude and longitude of that
20:11 - location and we're going to make the map
20:14 - view go to that region so we have to
20:17 - import the location data controller
20:20 - header file as well as the location
20:25 - header file so that this class knows
20:27 - about it
20:29 - just like last time I'm going to create
20:32 - a new instance
20:34 - of
20:41 - that I need create a variable to hold
20:44 - the
20:47 - location calling the get point of
20:50 - Interest method again and then in order
20:52 - to set the map to a specific region you
20:55 - use a method of the map view called set
20:58 - region
20:59 - however set region takes a as you can
21:02 - see from here an MK coordinate region
21:05 - and then for animated you can specify
21:07 - yes or no Boolean is a yes or no
21:09 - variable so in order to use this method
21:11 - we're going to have to create a
21:12 - coordinate
21:14 - region so let me set that to yes first
21:16 - and then up here we'll create our
21:19 - coordinate
21:21 - region we'll call that uh view
21:25 - region and there's a convenience method
21:28 - called
21:31 - MK
21:34 - coordinate region make with distance so
21:37 - you can see from this documentation that
21:39 - it needs a center coordinate to Center
21:41 - the region around and then you need to
21:43 - specify meters but basically how large
21:46 - that area that region you want it to be
21:48 - so before we can even use this method we
21:50 - need to create a coordinate
22:06 - so I'm going to create a coordinate with
22:10 - the coordinates of our uh location our
22:14 - point of
22:15 - interest and then I'm going to go back
22:17 - to this
22:18 - method and I'm going to put in I'm going
22:22 - to pass in the coordinates of our
22:24 - location we'll just say
22:27 - 750 and 7 50 and now that we have this
22:30 - region we can finally use the set region
22:33 - method so I'm going to pass it into
22:35 - there so essentially what's happening is
22:37 - that creating a coordinate with the same
22:39 - latitude and longitude as our coffee
22:41 - shop and then creating a region around
22:43 - that point spanning 750 m x 750 m with
22:47 - the center being our coffee shop and
22:49 - then we're we're setting the region of
22:51 - our map to that region so now let's run
22:53 - it and see what
22:55 - happens so when you click map it should
22:58 - should zoom in and yeah it shows that
23:01 - region where the coffee shop is so
23:02 - that's kind of cool and you can press
23:04 - back and navigate back and
23:06 - forth and it does it again because every
23:09 - time the view
23:10 - appears this method gets called and
23:12 - triggered okay so that's where we're
23:14 - going to end off in this demo in the
23:16 - next video we're going to do a recap and
23:19 - we're going to look at what we've done
23:21 - in this video as well as introduce some
23:22 - new Concepts like subclassing so I hope
23:25 - you guys enjoyed this video as always
23:28 - the notes are in the description below
23:30 - there's a link to it to go to my site
23:32 - and if you have any questions you can
23:35 - ask here or ask on that article and
23:38 - don't forget if you found this lesson
23:40 - helpful and you know anybody friends or
23:42 - colleagues or family who want to learn
23:44 - about iOS programming please share this
23:46 - video with them I really appreciate it
23:48 - there's a share button below the video
23:51 - which you can use to share it on
23:52 - Facebook or Twitter all right until next
23:54 - time see you guys later bye

Cleaned transcript:

now in all the demos that we've done so far they've all been single view applications and in fact when you start an EXO project it just gives you one default view um we're going to take a look at how we can add uh a second view so that you can navigate between the two uh iPhone applications uh you usually have more than one View and we're going to take a look at how what code you need to write in order to navigate between the two views okay let's do it you notice that we're using xcode 5 in this demo and if you're still using xcode 4 don't worry you'll still be able to follow along and I'll point out along the way what the differences are for xcode 4 if there are any and I'll show you what to do so don't worry if you're using exod 4 you'll still be able to follow this tutorial 100% okay so we'll start off by creating a new project and let's create a single View application and we'll add a second view to that if you're using xcode 4 you'll want to make sure that used storyboards is checked because we want to use them in this demo and use automatic reference counting should also be checked and include unit tests you can leave them as default and devices we want build for iPhone right now so make sure it's set to iPhone now give your project a name and then choose a place to save it all right now the first thing I want you to go to is your storyboard file click this and then go up to editor and then go Ed in and hit navigation controller select that now with storyboards you can actually double click here uh on an empty area on the storyboard to zoom out but keep in mind that in zoomed out view you can't drag UI elements onto the view so you can double click again to go into zoomed into view to add UI elements but zoomed out view is good because it allows you to to get an overall view of your project in your app flow and reposition the views and if I haven't explained what a storyboard is already it's essentially like in xcode 4 when you were working with zip files views for your view controllers except that in a storyboard you're able to see the app flow and you're able to make connections between the view controllers so that you can navigate between views so it's essentially you're still using interface Builder to put UI elements onto the views but it's more of a a bigger picture view of the app flow if you will now the next thing we'll want to do is add a second view controller as our second view so in this demo the first view is going to display the address and an image of a physical location and the second view is going to be a map about that area if your library pane is not looking at the objects tab switch to that see there are a couple of tabs here so make sure you're on the objects Tab and if you don't see view controller you can just type it in here and then it'll filter it in you filter it out it doesn't look like it but it filtered out the rest of the stuff I got a basic view controller here so see it's a little messy again so I'm just going to now the thing I want to show you here is that remember with our uh view controllers in the past when you click assistant editor it would show up the corresponding view controller code file whether it's it was the M or theh and then we uh create Outlets or actions into these files but with the new view controller that we just created it autogenerated a view controller file for us so instead we want to create our own view controller class and attach it to this view so right now the initial view controller that was created with our project right here that manages this first view right here the fact that we dragged a second view controller essentially it's a it's just a view uh onto the storyboard it autogenerated a view controller class to manage that view for us so right now we're going to go to this folder here create a new file new objective cclass and we're going to type in map view controller and for subass we're going to make sure that says UI view controller and you can leave these two options unchecked and that's the same for xcode 4 just going to save it so I want this map view controller class to be the class that manages this view so what you can can do actually here is in your storyboard click the second view controller that we added and then up here in the inspector view in this tab there are a couple of tabs switch the tab where you see custom class and then in the class right here you can actually type in map view controller and just by doing that you can see that when you click this view now on the assistant editor view it shows you the map view controller and that's specifying that this map view controller manages this view now let's add a button on the first View view to travel to the second view all right so get into zoomed in view so we can add UI elements these buttons here you can shift your view so that you get more space if you need it I need the object Library okay search for UI button and this stuff that you guys did before so shouldn't come as anything new I'm going to go into the properties inspector and change this button text to map okay now all you have to do is hold down control and click your new button and then drag a blue line into your second view controller and then a little modal will pop out asking what type of segue do you want choose push and in the recap video we'll explain we'll go more in depth into what a navigation controller is and what actually is happening behind the scenes and don't worry too much about that for now I just want you guys to follow along and practice these actions okay so in the last video we introduced the model view controller pattern and in the past in our previous two practices we didn't have a model class to represent the model in the MVC pattern so in in this one we're actually going to uh create a class to represent our model and that model is going to basically uh feed the location that we're going to display now before we even create the model we need to create a class that represents the location so that the model has you know an object to pass to the view controller so we're going to create a new class called location a new objective cclass called location and it's a subass of NS object and our model is going to pass back an instance of location to the view controller and the view controller is going to take those properties of our location object and it's going to feed it to the view so the view can display that information so let's create our model class it's going to be another Objective C Class going to call this location data controller and it's also a subass of NS object just in case you guys missed that okay so let's work on our location class first we're going to want to have a couple of properties on our location for instance we're going to want an address which will be of type NS string an NS string is considered a object so it's going to need a star to denote that this is a pointer I'll show you in a second when you don't need it we're going to want the file name of the photo that we're going to display so I'm just going to make it a string as well and then we're going to also want to store the latitude and longitude oops now this doesn't need a star because it's not a pointer to an object float is a numerical value uh it's essentially a floating Point decimal okay so our location class is going to represent a physical location with these properties now our model or our location data controller we'll need a method that the view controller can call to retrieve an instance of location so we're going to create a method that will return a location object we need the star because essentially it's a pointer to where the object is and if it's confusing right now you're going to get the hang of when you need to put that star and when you don't need to essentially you know you'll get used to it when we work with objects and we're we're passing variables that reference objects we're going to need the star to denote that that variable is a pointer don't worry if you you get get confused now the more you do it the more you'll understand so xcode is complaining right now that in location data controller it doesn't know what location is it doesn't know what about this class so we got to import that class the header file specifically so that it will know about it okay so we've done two things right now that we talked about in the last recap we've manually declared properties and we've also manually typed out a method signature in the header file so you'll know that this method is a public method that other classes will be able see so let's implement this method now in the implementation file of the location data controller so just copy the method signature and add curly braces and normally in a model you will probably get your data from an external Source either from a like a feed an RSS feed a Json feed or a database in a remote server somewhere it connect to through an API and grab that data but for this demo we're just going to manually create a location object object and hardcode some values and return that so our model is always going to return the same location over and over again so once again I'm going to declare a variable to hold our location object which means that we're going to need a star is equal to and I'm going to allocate a new instance of the location class and call a knit on that object to initialize it so now I've got a new instance of location and I'm going to start setting its properties place that I really liked in San Francisco is called Phils coffee and it's a really cool coffee place with lots of different types of coffee I like this so much in fact I bought a couple of bags home okay so the photo name is going to be coffee beans although we haven't added that image to the project yet but we will just after this and the next thing I want to do is add the latitude and longitude now the next thing I want to do is input the latitude and longitude for the location and there's a ton of websites out there if you just Google a convert address to lat long there are websites where you can just punch in the address and it'll spit out the latitude and longitude for you 37.78 453 and the longitude is 1 122.4 7158 and then I'm going to return this return this object remember that means that because we specified the return type as a location object I'm going to going to have to actually return something and so in this method what happens is it creates a new instance of the location class sets all these properties and then returns it to whoever is calling it so now let's add the coffee beans image so you can click the link on the screen or in the description below to go to a page uh where you can download the scource code for this project as well as the coffee beans image and you're going to have to sign up for a free code with Chris account and then after that you'll be able to download it so I'm going to give you a minute to download that okay so now that you've got the coffee beans image we have to add it to the project it's going to differ a little bit between xcode 4 and 5 in xcode 4 you can just drag it into your project like this and then you can have this checked off if it's not in your project folder and it'll copy it there and then click finish and you've added it in xcode 5 we can use our asset catalog and so choose the asset catalog from the project Navigator and then you can write click here go import and then you can choose your coffee beans image and that's the catalog just allows you to manage uh different versions of your assets easily so for example if you you know choose which devices this is going to work for like iPad then it'll tell you that you're going to need you know retina one and a nonretina one and it'll just help you manage that and I just realized that our image is a PNG so we need to go back to our model and change that file extension that file name to PNG all right now let's add add some UI elements to our first view in order to show that data so I'm going to start by searching for UI image view in the lower right I'm going to drag this guy here okay remember you can add elements in zoomed out view so make sure you're in the zoomed in view next I'm going to add a UI label okay I'm just going to stretch it out and you can make sure that in the properties inspector set lines to zero to ensure that it will uh wrap it will be multiline okay so that's sufficient for now so remember that the view controller is going to get the location object from our model which is the location data controller and then it's going to take that location object and update these UI elements with the location properties so in order to do that the view controller needs a reference to these two elements so now let's do that let's go to the header file and do what you've done before in previous practices by control holding the control and clicking and dragging here and creating a property to expose these UI elements to the view controller I'm going to call this one photo image View and for the label I'm going to call that address label okay now go to the implementation file of the view controller and then underneath view did load underneath that method I want you to add a new method called view did appear and you'll notice that as soon as you start typing it xcode will detect that that's the method you want and this is because you're actually overriding the view did appear method of the UI view controller class and in the recap we'll go into what subclassing is so for now press enter and you can add that method and then in this method essentially it gets triggered right after the view has appeared to the user and we can oh we need to import the header file for the location data controller and as well as the location or else view controller doesn't know about them so I'm just going to create a variable called Model to hold our instance of the location data controller and then I'm going to create and to allocate it initialize it and then I'm also going to create a variable to hold our location and this variable is going to hold the location that the model passes back so I'm going to call that method that we created in our model called get point of interest and it's going to return that location and assign it to this POI variable now I can access the properties that we just created on our view in our storyboard and go self. address label. text equals POI do address and furthermore I can say self. photo image view there's a method called set image of the UI image view which will take in a UI image so I need to somehow convert that file that we added the coffee beans. PNG to a UI image class well the UI image class actually has a class method and we'll get into that in the future called image named so where you can pass in a string for the file name as long as it's in your project and it'll convert it into it'll create a UI image pointing to that file so so actually we can set it to the property of our location photo file name that's why we created that property okay so now you can run your application and see what happens but essentially in this method it's getting the location from the model and then it's updating the address and the UI image view with the properties okay so this is great because we see our properties showing up and if you click the map button you actually get to navigate to the other View Press back to get back now let's add a map to the second view so go back to the storyboard and go to the second View and then search for map view you can drag it plop it on there now in assistant editor you want to go to the header file we want to expose this map as a property to the map view controller so hold down control drag it over let go I'm going to call this map view and right now our project doesn't know what this class is MK map view so it actually exists in another framework which we have to add by default xcode doesn't include all the Frameworks for all the functionality because then your app would be incredibly bloated and you'd have all this code and all these Frameworks for stuff you don't need so you just add what you need alak cart style so go here and click this root node in your project Navigator and actually you could do it right here in next code 5 you can just click uh plus and then you search for a map kit and then just double click that to add it and so now now you've added map kit framework and that will give you the functionality for maps in xcode 4 however you go to build settings sorry you go to build phases and then you click this tab link library with libraries and then you'll find that section here where you can add it okay now if you run it oh so now let's go back to the map viewcontroller.h and we need to import that framework so Now map view controller will know about that and it'll know about what Mk map view is so now you can run it and when you click map you will actually see you'll get a map so we'll want to switch the region of the map to our coffee shop location so stop the project and then go to the implementation file I'm going to go to the single view now go to the implementation file of the map view controller and we're also going to use the view did appear method again so overwrite that essentially what we're going to do in this method is ask our model for the location and then we're going to grab the latitude and longitude of that location and we're going to make the map view go to that region so we have to import the location data controller header file as well as the location header file so that this class knows about it just like last time I'm going to create a new instance of that I need create a variable to hold the location calling the get point of Interest method again and then in order to set the map to a specific region you use a method of the map view called set region however set region takes a as you can see from here an MK coordinate region and then for animated you can specify yes or no Boolean is a yes or no variable so in order to use this method we're going to have to create a coordinate region so let me set that to yes first and then up here we'll create our coordinate region we'll call that uh view region and there's a convenience method called MK coordinate region make with distance so you can see from this documentation that it needs a center coordinate to Center the region around and then you need to specify meters but basically how large that area that region you want it to be so before we can even use this method we need to create a coordinate so I'm going to create a coordinate with the coordinates of our uh location our point of interest and then I'm going to go back to this method and I'm going to put in I'm going to pass in the coordinates of our location we'll just say 750 and 7 50 and now that we have this region we can finally use the set region method so I'm going to pass it into there so essentially what's happening is that creating a coordinate with the same latitude and longitude as our coffee shop and then creating a region around that point spanning 750 m x 750 m with the center being our coffee shop and then we're we're setting the region of our map to that region so now let's run it and see what happens so when you click map it should should zoom in and yeah it shows that region where the coffee shop is so that's kind of cool and you can press back and navigate back and forth and it does it again because every time the view appears this method gets called and triggered okay so that's where we're going to end off in this demo in the next video we're going to do a recap and we're going to look at what we've done in this video as well as introduce some new Concepts like subclassing so I hope you guys enjoyed this video as always the notes are in the description below there's a link to it to go to my site and if you have any questions you can ask here or ask on that article and don't forget if you found this lesson helpful and you know anybody friends or colleagues or family who want to learn about iOS programming please share this video with them I really appreciate it there's a share button below the video which you can use to share it on Facebook or Twitter all right until next time see you guys later bye
