With timestamps:

00:00 - now you guys are ready to learn about
00:01 - dictionaries and no I'm not talking
00:04 - about those physical dictionaries where
00:05 - you look up the definition of words
00:09 - actually that's a pretty good analogy
00:11 - you know what I'm gonna use that one
00:13 - take a dictionary what does it contain
00:16 - well words and the definition for each
00:19 - of those words when you want to know the
00:21 - definition of a word what do you do you
00:23 - look up the word in the dictionary and
00:25 - you read its definition this is exactly
00:28 - how a dictionary works in Swift when you
00:30 - store data in a Swift dictionary you
00:33 - need to give it an Associated key
00:35 - usually this is just a string but it
00:37 - doesn't have to be in order to access
00:40 - that data you look in the dictionary for
00:42 - that key and then you get back the value
00:45 - or the data these pairs of data and keys
00:48 - are called key value pairs when you
00:51 - compare this to a physical dictionary
00:53 - it's very similar in that example the
00:55 - word would be the key and the definition
00:57 - would be the value or data another
01:00 - analogy would be a coat check or a
01:03 - dry-cleaning service you drop off your
01:05 - jacket this is your data and the person
01:09 - gives you back a ticket that ticket is
01:11 - the key later and when you give the
01:13 - ticket back you get your jacket or your
01:16 - clothing back this is exactly how a
01:18 - swift dictionary works now let's jump
01:20 - into a playground and see how the Swift
01:22 - syntax for a dictionary looks like so
01:25 - here we've got a brand-new playground
01:26 - and all I did was write a few comments
01:29 - here for the things that we are going to
01:31 - cover how to do with the dictionary
01:33 - first things first how to declare a
01:35 - dictionary in Swift so similar to
01:38 - another we are first going to declare a
01:40 - variable like that and we are going to
01:44 - assign it a dictionary just like an
01:47 - array you start with two square brackets
01:49 - like that and then inside all of your
01:53 - key value pairs are separated by a comma
01:55 - so right now our dictionary will contain
01:58 - two key value pairs because I have this
02:00 - one comma that is going to separate
02:02 - those two key value pairs on the
02:04 - left-hand side of the comma I am going
02:06 - to put my first key so as I said keys
02:10 - are usually strings but they don't have
02:11 - to be so I'm just
02:13 - to have my first key be the string key
02:16 - and then you use : like that and on the
02:20 - right hand side of the colon you put the
02:22 - value for that key and let's just put
02:26 - data like that and this part this
02:30 - represents my first key value pair all
02:33 - right the key and the value is separated
02:37 - by this colon right here okay and this
02:40 - comma is going to separate my key value
02:42 - pairs so here I'm just gonna put a
02:44 - second one and this key might be
02:47 - something like ABC I'm just making
02:48 - things up and I don't know let's just
02:52 - put value this time so my dictionary now
02:55 - contains two key value pairs the first
02:59 - key value pair has this key and this
03:02 - data and the second key value pair has
03:04 - this key and this data right here of
03:08 - course I can start my dictionary off
03:10 - with as many key value pairs as I want
03:12 - in fact I could even do it like that and
03:15 - just have a single key value pair to
03:17 - start off by dictionary or I could put
03:19 - more now if you wanted to declare an
03:21 - empty dictionary let's try that I'm
03:24 - gonna declare a new variable here and
03:26 - let's just call it empty dictionary and
03:28 - in order to do that you start with the
03:31 - square brackets again but instead of
03:33 - putting key value pairs inside we are
03:35 - going to put the data types of the key
03:38 - and value so if we kind of take this
03:41 - first dictionary as an example my key
03:45 - data type would be a string and then I
03:47 - would put colon to separate the key and
03:50 - the value and the data type for my value
03:53 - is also a string like that and then
03:56 - outside of those angle brackets I would
03:58 - put these two round brackets to create a
04:02 - new dictionary object that has the data
04:05 - type of string for the keys and has a
04:08 - data type of also string for the values
04:11 - when I declare my dictionary like this
04:14 - right having strings for keys and
04:17 - strings for values I cannot put a key
04:19 - value pair into this dictionary where
04:22 - the key might be an integer or that
04:25 - value might be you know
04:27 - boolean or something like that I have to
04:28 - stick to these data types that I have
04:30 - set out here same thing goes for this
04:32 - when I declare a dictionary like this
04:34 - and I start it off with some key value
04:37 - pairs inside it's going to take those
04:39 - data types of this data here and it's
04:42 - just going to assume that my dictionary
04:45 - is going to be a dictionary that
04:47 - contains key value pairs where the keys
04:48 - are strings and the data is also
04:50 - straights as well okay so let's take a
04:53 - look at accessing an item in the
04:55 - dictionary like we said earlier in this
04:59 - video all you have to do is give it the
05:01 - key and it's gonna pass back the data so
05:03 - you put two square brackets beside the
05:07 - name and you're gonna pass in a key so
05:10 - for example let's pass in that and what
05:12 - you get back is data because that is the
05:16 - value for this key that we passed in
05:20 - here and you can kind of see it in the
05:22 - preview here but this is a little
05:23 - misleading because what you get back is
05:25 - not actually the string data what it is
05:28 - is it is an optional string and as you
05:32 - learned in the previous lesson an
05:34 - optional may contain a value or it may
05:37 - just contain nil so why does accessing
05:41 - your dictionary with a key return an
05:43 - optional well the reason is because we
05:45 - don't know if that key exists in the
05:48 - dictionary right what if I try to pass
05:52 - in a key that is like this for example
05:56 - you can see in the preview that it's nil
05:58 - and that is because this key actually
06:02 - does not exist in the dictionary and so
06:04 - that's why when you pass in a key into
06:07 - your dictionary with the intention to
06:09 - get back a value it's gonna give you
06:11 - back an optional right so that optional
06:15 - could be an actual value or it could
06:18 - just be nil so when we pass in key it's
06:24 - gonna pass us back an optional string
06:26 - and if we want to let's say print that
06:30 - value out Xcode is going to warn us that
06:35 - we're trying to print out an optional it
06:37 - could be nil and as you learned in the
06:39 - previous lesson we
06:40 - have to unwrap that optional to get the
06:43 - value and so I can put exclamation mark
06:46 - like that and unwrap the optional to get
06:50 - the data out and just print it out you
06:51 - can see that it printed out our value
06:54 - right there in the console but the safer
06:57 - way would be actually to check it first
06:59 - because for example if I passed in the
07:02 - key that doesn't exist and it returns an
07:04 - optional and I force unwrap it with this
07:06 - exclamation mark here and I try to print
07:08 - that out I'm going to be printing out
07:10 - nil which is going to cause a crash so
07:12 - let's try that out if I pass in a key
07:14 - that doesn't exist it's gonna pass back
07:16 - an optional and then I'm going to just
07:19 - try to unwrap it to get the value but
07:21 - there is no value and I'm trying to
07:22 - print out nil and then you can see this
07:25 - error message kind of makes sense
07:27 - unexpectedly found nil while unwrapping
07:30 - an optional value because that's exactly
07:32 - what we did when you call this part of
07:36 - the code you pass in this key it's going
07:38 - to return back an optional and then this
07:41 - exclamation mark unwraps that optional
07:43 - to try to get the value and we found nil
07:46 - right and we're trying to print nil
07:47 - which doesn't work you can't do that so
07:50 - the safer way to do things would
07:52 - actually be to use an if statement like
07:55 - you learned in module one so you could
07:58 - do something like this you can say if my
08:03 - dictionary is not equal nil then I want
08:11 - to print out my dictionary and I can
08:18 - force unwrap it here because this code
08:21 - will only execute if the value for this
08:23 - key exists all right this is what we're
08:25 - checking with this if statement right
08:27 - here so as you can see nothing gets
08:29 - printed out into the console but if I
08:31 - change this key to something that
08:33 - actually exists let's just change this
08:35 - one first
08:37 - like that then you can see that it
08:41 - executes to the line in here and prints
08:42 - out that value and actually I think we
08:46 - have covered this next point checking
08:47 - for an item in the dictionary so I'm
08:49 - going to cut this code and paste it down
08:53 - here and
08:53 - under this comment and up here I am just
08:56 - going to leave it like that okay and let
09:03 - us go down to here adding an item to the
09:07 - dictionary well to add an item you can
09:09 - simply use the square brackets beside
09:14 - the dictionary name again and you can
09:16 - just type in the key that you want to
09:19 - add let's say this is my new key and
09:23 - then you can assign to that key a piece
09:26 - of data so let's just call this some
09:30 - more data like that so now you can print
09:37 - out just to show you that this works I'm
09:40 - just going to pass in new key and unwrap
09:45 - it there you can see some more data and
09:50 - actually if I don't force and wrap it
09:53 - you can see down here it said that it's
09:57 - an optional you know that is wrapping up
09:59 - that string right there okay so updating
10:04 - items in the dictionary I can go my
10:07 - dictionary and let's say I wanted to
10:10 - update the value for this key here I can
10:16 - see my dictionary key and I just assign
10:21 - it something else
10:25 - just like call it new data like that and
10:28 - let's print that out so you can see okay
10:39 - and removing items from the dictionary
10:41 - so let's say I wanted to remove the data
10:45 - for this key you can do my dictionary
10:52 - key and then all you need to do is
10:56 - assign it nil that and that is going to
10:59 - get rid of the data for this key I
11:01 - wanted to take a moment to discuss the
11:04 - differences between arrays and
11:05 - dictionaries and when you would use each
11:07 - of them I'm going to use three different
11:10 - criteria ordering finding items and the
11:14 - purpose so the first criteria is
11:16 - ordering when you store your collection
11:18 - of data if the ordering matters that you
11:21 - definitely want to use an array this is
11:23 - because the array is arranged in a
11:25 - series of slots each with an index
11:27 - number so it's perfect for data that
11:30 - needs to maintain a specific sequence
11:33 - this is different from a swift
11:35 - dictionary where there really is no
11:37 - concept of ordering you're just putting
11:39 - all of your key value pairs inside of it
11:41 - and then you pass in the key to get the
11:43 - data back the second criteria is finding
11:46 - items in that collection if you need to
11:48 - access specific items out of your
11:50 - collection of data a dictionary is
11:52 - intended to help you with that give it a
11:54 - key and out pops the data you can still
11:57 - do this with an array but it's not as
11:59 - efficient because it needs to go through
12:01 - each slot and look for the item that you
12:03 - want now the last thing to consider is
12:06 - your intention or purpose when you need
12:09 - to store a collection of data
12:10 - I would default to just using a raise
12:12 - here for general purpose use of storing
12:15 - collections of data a dictionary is more
12:18 - specialized for the purpose of storing
12:20 - data with the intention of looking up a
12:22 - specific piece of data later on for
12:25 - example you just retrieved a bunch of
12:27 - employees from the database well put
12:29 - them in an array even if you don't care
12:32 - about the ordering however let's say
12:34 - that my app is a photo gallery up
12:37 - and it displays tons of images if the
12:39 - user visits the same screen several
12:42 - times I wouldn't want to download the
12:44 - same image data many times what can I do
12:47 - well each time you download an image you
12:50 - can actually store it in a dictionary
12:52 - with the key being the image name and
12:55 - the data obviously being the image data
12:57 - then the next time you're going to
13:00 - download an image before you download it
13:01 - check the dictionary first by passing it
13:04 - the image name as the key and see if
13:06 - you've already downloaded it before if
13:08 - you have then you're gonna get that
13:10 - image data back and then you can just
13:12 - display that image without having to
13:13 - download it again this is a great
13:15 - scenario to use a dictionary my last
13:18 - thought for you guys is in a race like a
13:21 - photo album where you start from page
13:23 - one and you kind of flip through it and
13:25 - get to the end you can also go to a
13:27 - specific page number in a photo album a
13:30 - swift dictionary however is like a
13:32 - physical dictionary where you look at
13:34 - words to find their definition it's not
13:36 - usually a book you want to read front to
13:39 - back so in this lesson you'll learn
13:40 - about dictionaries you'll learn how to
13:42 - declare them how to put key value pairs
13:45 - into them how to access that data how to
13:47 - remove it you also learned about when to
13:50 - use arrays versus dictionaries to get
13:52 - more practice with dictionaries I highly
13:54 - recommend that you check out the
13:55 - worksheet below and if you want to read
13:58 - the official documentation from the
14:00 - Apple Swift language guide I'm going to
14:03 - link to that below as well now that
14:05 - you've learned about to collection types
14:07 - you are well-equipped to keep track of
14:09 - collections of data in the next lesson
14:11 - you're going to learn how you can go
14:13 - through each item in your array or
14:15 - dictionary and process it and do
14:17 - something with that piece of data this
14:19 - is useful in so many ways and I'm going
14:21 - to explain it all in the next video if
14:23 - you like this video please subscribe to
14:25 - my channel by hitting the subscribe
14:26 - button below and if you don't want to
14:28 - miss a single video make sure you tap on
14:30 - that Bell icon as well thanks for
14:32 - watching and I'll see you guys in the
14:33 - next lesson

Cleaned transcript:

now you guys are ready to learn about dictionaries and no I'm not talking about those physical dictionaries where you look up the definition of words actually that's a pretty good analogy you know what I'm gonna use that one take a dictionary what does it contain well words and the definition for each of those words when you want to know the definition of a word what do you do you look up the word in the dictionary and you read its definition this is exactly how a dictionary works in Swift when you store data in a Swift dictionary you need to give it an Associated key usually this is just a string but it doesn't have to be in order to access that data you look in the dictionary for that key and then you get back the value or the data these pairs of data and keys are called key value pairs when you compare this to a physical dictionary it's very similar in that example the word would be the key and the definition would be the value or data another analogy would be a coat check or a drycleaning service you drop off your jacket this is your data and the person gives you back a ticket that ticket is the key later and when you give the ticket back you get your jacket or your clothing back this is exactly how a swift dictionary works now let's jump into a playground and see how the Swift syntax for a dictionary looks like so here we've got a brandnew playground and all I did was write a few comments here for the things that we are going to cover how to do with the dictionary first things first how to declare a dictionary in Swift so similar to another we are first going to declare a variable like that and we are going to assign it a dictionary just like an array you start with two square brackets like that and then inside all of your key value pairs are separated by a comma so right now our dictionary will contain two key value pairs because I have this one comma that is going to separate those two key value pairs on the lefthand side of the comma I am going to put my first key so as I said keys are usually strings but they don't have to be so I'm just to have my first key be the string key and then you use like that and on the right hand side of the colon you put the value for that key and let's just put data like that and this part this represents my first key value pair all right the key and the value is separated by this colon right here okay and this comma is going to separate my key value pairs so here I'm just gonna put a second one and this key might be something like ABC I'm just making things up and I don't know let's just put value this time so my dictionary now contains two key value pairs the first key value pair has this key and this data and the second key value pair has this key and this data right here of course I can start my dictionary off with as many key value pairs as I want in fact I could even do it like that and just have a single key value pair to start off by dictionary or I could put more now if you wanted to declare an empty dictionary let's try that I'm gonna declare a new variable here and let's just call it empty dictionary and in order to do that you start with the square brackets again but instead of putting key value pairs inside we are going to put the data types of the key and value so if we kind of take this first dictionary as an example my key data type would be a string and then I would put colon to separate the key and the value and the data type for my value is also a string like that and then outside of those angle brackets I would put these two round brackets to create a new dictionary object that has the data type of string for the keys and has a data type of also string for the values when I declare my dictionary like this right having strings for keys and strings for values I cannot put a key value pair into this dictionary where the key might be an integer or that value might be you know boolean or something like that I have to stick to these data types that I have set out here same thing goes for this when I declare a dictionary like this and I start it off with some key value pairs inside it's going to take those data types of this data here and it's just going to assume that my dictionary is going to be a dictionary that contains key value pairs where the keys are strings and the data is also straights as well okay so let's take a look at accessing an item in the dictionary like we said earlier in this video all you have to do is give it the key and it's gonna pass back the data so you put two square brackets beside the name and you're gonna pass in a key so for example let's pass in that and what you get back is data because that is the value for this key that we passed in here and you can kind of see it in the preview here but this is a little misleading because what you get back is not actually the string data what it is is it is an optional string and as you learned in the previous lesson an optional may contain a value or it may just contain nil so why does accessing your dictionary with a key return an optional well the reason is because we don't know if that key exists in the dictionary right what if I try to pass in a key that is like this for example you can see in the preview that it's nil and that is because this key actually does not exist in the dictionary and so that's why when you pass in a key into your dictionary with the intention to get back a value it's gonna give you back an optional right so that optional could be an actual value or it could just be nil so when we pass in key it's gonna pass us back an optional string and if we want to let's say print that value out Xcode is going to warn us that we're trying to print out an optional it could be nil and as you learned in the previous lesson we have to unwrap that optional to get the value and so I can put exclamation mark like that and unwrap the optional to get the data out and just print it out you can see that it printed out our value right there in the console but the safer way would be actually to check it first because for example if I passed in the key that doesn't exist and it returns an optional and I force unwrap it with this exclamation mark here and I try to print that out I'm going to be printing out nil which is going to cause a crash so let's try that out if I pass in a key that doesn't exist it's gonna pass back an optional and then I'm going to just try to unwrap it to get the value but there is no value and I'm trying to print out nil and then you can see this error message kind of makes sense unexpectedly found nil while unwrapping an optional value because that's exactly what we did when you call this part of the code you pass in this key it's going to return back an optional and then this exclamation mark unwraps that optional to try to get the value and we found nil right and we're trying to print nil which doesn't work you can't do that so the safer way to do things would actually be to use an if statement like you learned in module one so you could do something like this you can say if my dictionary is not equal nil then I want to print out my dictionary and I can force unwrap it here because this code will only execute if the value for this key exists all right this is what we're checking with this if statement right here so as you can see nothing gets printed out into the console but if I change this key to something that actually exists let's just change this one first like that then you can see that it executes to the line in here and prints out that value and actually I think we have covered this next point checking for an item in the dictionary so I'm going to cut this code and paste it down here and under this comment and up here I am just going to leave it like that okay and let us go down to here adding an item to the dictionary well to add an item you can simply use the square brackets beside the dictionary name again and you can just type in the key that you want to add let's say this is my new key and then you can assign to that key a piece of data so let's just call this some more data like that so now you can print out just to show you that this works I'm just going to pass in new key and unwrap it there you can see some more data and actually if I don't force and wrap it you can see down here it said that it's an optional you know that is wrapping up that string right there okay so updating items in the dictionary I can go my dictionary and let's say I wanted to update the value for this key here I can see my dictionary key and I just assign it something else just like call it new data like that and let's print that out so you can see okay and removing items from the dictionary so let's say I wanted to remove the data for this key you can do my dictionary key and then all you need to do is assign it nil that and that is going to get rid of the data for this key I wanted to take a moment to discuss the differences between arrays and dictionaries and when you would use each of them I'm going to use three different criteria ordering finding items and the purpose so the first criteria is ordering when you store your collection of data if the ordering matters that you definitely want to use an array this is because the array is arranged in a series of slots each with an index number so it's perfect for data that needs to maintain a specific sequence this is different from a swift dictionary where there really is no concept of ordering you're just putting all of your key value pairs inside of it and then you pass in the key to get the data back the second criteria is finding items in that collection if you need to access specific items out of your collection of data a dictionary is intended to help you with that give it a key and out pops the data you can still do this with an array but it's not as efficient because it needs to go through each slot and look for the item that you want now the last thing to consider is your intention or purpose when you need to store a collection of data I would default to just using a raise here for general purpose use of storing collections of data a dictionary is more specialized for the purpose of storing data with the intention of looking up a specific piece of data later on for example you just retrieved a bunch of employees from the database well put them in an array even if you don't care about the ordering however let's say that my app is a photo gallery up and it displays tons of images if the user visits the same screen several times I wouldn't want to download the same image data many times what can I do well each time you download an image you can actually store it in a dictionary with the key being the image name and the data obviously being the image data then the next time you're going to download an image before you download it check the dictionary first by passing it the image name as the key and see if you've already downloaded it before if you have then you're gonna get that image data back and then you can just display that image without having to download it again this is a great scenario to use a dictionary my last thought for you guys is in a race like a photo album where you start from page one and you kind of flip through it and get to the end you can also go to a specific page number in a photo album a swift dictionary however is like a physical dictionary where you look at words to find their definition it's not usually a book you want to read front to back so in this lesson you'll learn about dictionaries you'll learn how to declare them how to put key value pairs into them how to access that data how to remove it you also learned about when to use arrays versus dictionaries to get more practice with dictionaries I highly recommend that you check out the worksheet below and if you want to read the official documentation from the Apple Swift language guide I'm going to link to that below as well now that you've learned about to collection types you are wellequipped to keep track of collections of data in the next lesson you're going to learn how you can go through each item in your array or dictionary and process it and do something with that piece of data this is useful in so many ways and I'm going to explain it all in the next video if you like this video please subscribe to my channel by hitting the subscribe button below and if you don't want to miss a single video make sure you tap on that Bell icon as well thanks for watching and I'll see you guys in the next lesson
