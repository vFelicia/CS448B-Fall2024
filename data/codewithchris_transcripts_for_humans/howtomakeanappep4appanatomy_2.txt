With timestamps:

00:04 - hey guys welcome to lesson 4 of how to
00:07 - make iphone apps with no programming
00:09 - experience in this lesson we're going to
00:12 - talk about the anatomy of an iPhone app
00:14 - we're going to go over the major
00:16 - components that all iPhone apps have in
00:18 - common so before we dive into Xcode and
00:21 - show you how the app project represents
00:23 - those different components we're going
00:25 - to go over the different parts of an
00:27 - iPhone app first the first component is
00:31 - the view and this is what the user sees
00:33 - and interacts with on their phone the
00:37 - second component is the view controller
00:39 - and the view controller manages the view
00:42 - we're going to go into what that means a
00:44 - little later in this lesson the third
00:47 - component is the model and the model
00:49 - manages the data for your app okay so
00:53 - how do these three components work
00:55 - together to form a functioning app well
00:59 - the view controller sits in between the
01:01 - model and the view and manages the
01:04 - communication between the two so for
01:07 - example the view controller may ask the
01:10 - model for some data for example a list
01:13 - of contacts and then the view controller
01:16 - will pass that data to the view to
01:18 - render it to the user now similarly if
01:21 - the user interacts with the view and
01:24 - let's say delete the contact then the
01:26 - view controller gets that interaction or
01:29 - gets that message and passes it to the
01:32 - model to tell it to remove a contact
01:36 - because the model manages the data so as
01:38 - you can see each component has its own
01:41 - set of responsibilities and a role
01:44 - within the app and they must work
01:46 - together to form a functioning app now
01:49 - this division of labor and the way that
01:51 - the communication happens between each
01:53 - component is a well-known design pattern
01:56 - in programming called Model View
01:58 - controller pattern or MVC for short and
02:01 - a design pattern is simply a best
02:04 - practice pattern or way to solve a
02:06 - common problem iOS development makes use
02:09 - of this design pattern heavily to
02:11 - structure the way that apps are
02:13 - by following this design pattern it's
02:16 - easier to maintain and change the code
02:18 - in the future if necessary because each
02:20 - component has a well-defined and
02:22 - contained set of responsibilities it's
02:25 - easy to swap in and out the components
02:28 - in the future if you need to make an
02:30 - update and it also helps with
02:32 - troubleshooting your code if you have a
02:34 - bug in your code depending on what sort
02:36 - of bug it is if it's a display issue or
02:39 - a data issue you'd know where to look
02:42 - instead of if all of the
02:44 - responsibilities were merged or melded
02:46 - together you would have to look at the
02:49 - overall project instead of just a single
02:52 - component in the next lesson when we
02:55 - build our first app I'll point out to
02:57 - you where these different components
02:59 - exist in the app project

Cleaned transcript:

hey guys welcome to lesson 4 of how to make iphone apps with no programming experience in this lesson we're going to talk about the anatomy of an iPhone app we're going to go over the major components that all iPhone apps have in common so before we dive into Xcode and show you how the app project represents those different components we're going to go over the different parts of an iPhone app first the first component is the view and this is what the user sees and interacts with on their phone the second component is the view controller and the view controller manages the view we're going to go into what that means a little later in this lesson the third component is the model and the model manages the data for your app okay so how do these three components work together to form a functioning app well the view controller sits in between the model and the view and manages the communication between the two so for example the view controller may ask the model for some data for example a list of contacts and then the view controller will pass that data to the view to render it to the user now similarly if the user interacts with the view and let's say delete the contact then the view controller gets that interaction or gets that message and passes it to the model to tell it to remove a contact because the model manages the data so as you can see each component has its own set of responsibilities and a role within the app and they must work together to form a functioning app now this division of labor and the way that the communication happens between each component is a wellknown design pattern in programming called Model View controller pattern or MVC for short and a design pattern is simply a best practice pattern or way to solve a common problem iOS development makes use of this design pattern heavily to structure the way that apps are by following this design pattern it's easier to maintain and change the code in the future if necessary because each component has a welldefined and contained set of responsibilities it's easy to swap in and out the components in the future if you need to make an update and it also helps with troubleshooting your code if you have a bug in your code depending on what sort of bug it is if it's a display issue or a data issue you'd know where to look instead of if all of the responsibilities were merged or melded together you would have to look at the overall project instead of just a single component in the next lesson when we build our first app I'll point out to you where these different components exist in the app project
