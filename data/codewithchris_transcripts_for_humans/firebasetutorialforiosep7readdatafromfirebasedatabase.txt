With timestamps:

00:00 - [Music]
00:04 - hello welcome to lesson seven of the
00:07 - firebase tutorial video series in this
00:10 - lesson we're going to take a look at
00:12 - retrieving the data that we've set right
00:15 - here in our firebase real time database
00:18 - we've just got three messages right now
00:21 - but we're going to retrieve those and
00:23 - display them in our table view so one
00:26 - thing I should mention that's really
00:28 - cool about this real time database is
00:30 - that rather than just querying the data
00:33 - and grabbing all three of these posts
00:36 - what you can do is also listen for
00:39 - updates to a particular node so for
00:41 - example if we attach a listener let's
00:45 - say to this node here posts then every
00:49 - time there's activity in this node let's
00:51 - say a new message gets added our app
00:55 - will get notified and then we can grab
00:56 - that new data and display that in the
00:59 - table view so that's why it's called a
01:02 - real-time database so in this lesson
01:04 - you're going to see how that works as
01:06 - well okay so let's start by going into
01:09 - the documentation for the database
01:12 - portion and just to remind you up here
01:15 - you can click go to Doc's and then on
01:18 - the left-hand side
01:19 - well actually click on guides up here
01:21 - and then on the left-hand side go down
01:24 - to real time database and then under iOS
01:26 - read and write data so where are we here
01:31 - okay
01:31 - scroll down this is listen for value
01:36 - events and here is a code sample of that
01:40 - it's probably easier if I just show you
01:43 - in Xcode but notice that the function we
01:46 - use on the reference is observe so let's
01:49 - go back to our Xcode project and use
01:52 - that function let me show you how to do
01:54 - that in our execute project in
01:57 - viewcontroller.swift we have this post
01:59 - data this is just hard-coded dummy data
02:01 - here I'm going to get rid of this and
02:06 - I'm just going to make it an empty
02:08 - string array like that and then we are
02:12 - going to have to do the same thing that
02:13 - we
02:13 - in the composed view controller we're
02:16 - going to have to create a reference to
02:17 - that database so VAR reference
02:20 - fire database or fire oh that's right I
02:27 - forgot to import firebase database so fi
02:34 - our database dot sorry database
02:39 - reference that's what that is just lost
02:42 - my train of thought
02:43 - this property is going to hold a fire
02:47 - database reference and we're going to
02:49 - set it right here
02:51 - set the firebase reference so ref equals
02:58 - here we go like that so now we have a
03:06 - reference to our firebase real time
03:09 - database retrieve the posts and listen
03:15 - for changes so now that we have the
03:19 - reference to the database we can
03:21 - retrieve our posts so we go ref dot
03:24 - child and we have to specify the path to
03:28 - the data we want to retrieve and that is
03:31 - posts because that is this node right
03:34 - here and I'm just saying that I want to
03:36 - retrieve all of this data and I want to
03:40 - use that function that I mentioned
03:43 - observe there is a couple of different
03:46 - ones you'll notice that some say observe
03:49 - only and some say observe single event
03:51 - so I'm going to explain to you what
03:53 - single event is in a short while after
03:56 - we implement this but for now let's use
03:58 - observe event type and with a block of
04:02 - code that we can put in to handle when
04:05 - that event happens I'm going to double
04:07 - click that and oh one thing I wanted to
04:11 - make sure you notice
04:13 - let's press observe again this function
04:18 - here returns this you int okay that's
04:21 - going to be important in a second okay
04:25 - so the event type let's specify that
04:27 - let's see what
04:27 - sort of event types that we can specify
04:29 - press dot autocomplete should pop up
04:32 - okay and the one we want to use is child
04:36 - added because I'm interested in all of
04:40 - the new posts I get added when a new
04:43 - post gets added I want the code to
04:45 - execute so I'm going to pick child added
04:47 - if you pick something like you know
04:49 - these are pretty self explanatory value
04:51 - it's kind of the general one if anything
04:53 - changes with any of the data below this
04:55 - note then if you're interested in that
04:57 - that's the one you want to handle but I
05:00 - only care if new posts get added so I'm
05:02 - going to choose that and for the block
05:05 - of code for this closure you can just
05:07 - double click it to expand it in here
05:09 - we're going to put the code to execute
05:13 - when a child is added under posts and it
05:20 - has a single parameter which contains
05:22 - that data
05:22 - it's a fire data snapshot so I'm going
05:25 - to call this parameter snapshot so we're
05:28 - going to refer to it by that name
05:30 - okay so I've told it to observe this
05:34 - node posts and for the event child added
05:37 - how this works is it's going to
05:40 - initially go through all of the children
05:43 - of posts and it's going to fire that
05:45 - code once for each child so in my code
05:49 - in this closure here I basically want to
05:53 - take that data that it passes me back
05:56 - and add that to my messages data right
05:59 - that I have up here which I called post
06:02 - data let's write a comment so we know
06:05 - what we're doing take the value from the
06:09 - snapshot and add it to the post data
06:14 - array and after it goes through each of
06:20 - these pieces of data under post it's
06:23 - only going to fire again when a new post
06:25 - gets added so that connection is open to
06:28 - the database and it's going to keep
06:30 - listening for that data we are
06:33 - responsible for stopping that in other
06:36 - words detaching that listener and the
06:39 - way we do that is rumor
06:41 - I said this function observe returns a
06:43 - you int well that UN is the reference to
06:46 - that specific listener or this
06:48 - connection that we have open here that's
06:51 - feeding us all of these updates under
06:52 - posts so we want to keep a reference to
06:55 - that because later on we can use that
06:57 - reference to close or detach that
06:59 - listener so I know that from reading the
07:02 - documentation that what it is is a
07:06 - database handle and the class is an F I
07:10 - our database handle so I'm going to
07:13 - create a property for it up here and I'm
07:16 - going to set database handle equal to
07:23 - that call to the observe function
07:26 - because that is going to return that you
07:29 - end and I'm going to keep track of it
07:30 - using this property here so now that we
07:32 - have this set up we are going to right
07:36 - now post data is an empty string array
07:38 - right this code is going to fire for
07:41 - each piece of data under posts and for
07:43 - each piece of new data so whenever I get
07:46 - a piece of new data I basically want to
07:49 - take post data and I probably have to
07:53 - refer to it using self because we're
07:55 - doing this inside a closure self thought
07:59 - post dot append and I have to append a
08:03 - new element which is going to be a
08:07 - string because post data is a string
08:10 - array so before we do that I want to see
08:13 - how snapshot this fire data snapshot
08:16 - class is structured and how the data is
08:20 - returned so I'm going to set a
08:21 - breakpoint right here just so we can
08:23 - take a look inside snapshot and run the
08:26 - app so hopefully if it connects to the
08:28 - firebase database it's going to hit this
08:30 - breakpoint all right looks like it has
08:34 - and under here in the console there's
08:38 - all of these warnings and things like
08:40 - that that's happening behind the scenes
08:42 - I won't worry too much about that
08:43 - until we're actually running it on a
08:45 - device and not a simulator because
08:47 - things can be different so I'm going to
08:51 - use peel for print object I'm going to
08:53 - in snapshot and just to see what is
08:57 - returned so that looks to be the key
09:02 - right that's this guy right here right
09:05 - yes and the value is that hello
09:09 - firebase so what I'm going to do is we
09:16 - can't just append snapshot as is dot so
09:21 - there's a property for the key which is
09:23 - string and for the value it's any
09:26 - because and it could be nil as well so
09:28 - take note of that it's an optional any
09:31 - so we need to take this value and we
09:34 - need to change it into a string first
09:35 - before we actually append it so let's
09:37 - say let let's say let's say the post
09:41 - equals snapshot dot value string and if
09:50 - let actual post equals post so we're
09:53 - using conditional binding here so if
09:56 - there actually is data in there because
09:58 - we're trying to turn it into a string if
09:59 - for some reason it's nil or it fails
10:02 - then it's not going to execute like it's
10:05 - going to fail this condition so this the
10:08 - if statement here this conditional
10:10 - binding here is testing if there's data
10:13 - inside here and if there is it's going
10:15 - to assign it to actual post as a string
10:17 - so we're just going to append actual
10:22 - post into post data like that into our
10:25 - right and we're going to call reload on
10:29 - the table view to refresh the data so
10:32 - let's say table view dot reload data so
10:36 - let's write some comments so we know so
10:40 - it's clear what we're doing here so
10:42 - append the data to our post data array
10:49 - reload the table view try to convert
10:57 - the value of the data to a string okay
11:03 - so I'm going to remove the break point
11:05 - is youself here and okay let's run it
11:11 - again so now you see our data from the
11:19 - firebase database and what's happening
11:22 - is basically when we use this observe
11:25 - function right here it's looking for
11:27 - this event child added on this posts
11:31 - node and every time this event happens
11:34 - it's going to run this code down here
11:36 - and when it runs this code it passes us
11:40 - the data that's associated with this
11:44 - event so we can actually try this out
11:46 - here right here in our simulator right
11:49 - now in our database we have three items
11:51 - so if I had another device and I was
11:54 - running it and I added a message it
11:56 - should instantly show up here but I'm
11:59 - going to do it through here and it
12:01 - should happen as well so I'm just going
12:02 - to add a post in this database and
12:04 - because we have this observed function
12:08 - listening to this note posts it's going
12:11 - to pick up that a new child was added
12:12 - and then it's going to run this code and
12:14 - append that new data to our post data
12:17 - array and then reload the table view so
12:20 - let's see if that happens just put that
12:22 - right there
12:23 - I'll shrink this a little bit so so Auto
12:29 - ID I wonder if I can actually do that
12:32 - from here I'm not sure about that
12:35 - so I'm just going to put in some ID like
12:38 - that and this should show up so you see
12:46 - how fast that happened that is really
12:49 - cool
12:49 - now what if you didn't want to listen
12:52 - for any sort of event you just want it
12:55 - to retrieve the data and not have an
12:58 - open connection you can do that using if
13:01 - we scroll back up here instead of using
13:04 - the observe function we use the observe
13:08 - single event of
13:10 - and using this one we can read the data
13:13 - once and then it won't keep an open
13:16 - connection and be listening for any sort
13:18 - of events on that node so that pretty
13:21 - much sums it up for our messaging app so
13:24 - now you know how to create your firebase
13:26 - app how to add the SDK into your Xcode
13:29 - project how data is stored in your
13:32 - firebase real time database and
13:34 - furthermore how to read and write data
13:36 - to it and from it oh yeah not to mention
13:39 - how data is stored in that firebase
13:41 - database in the future we'll work more
13:44 - with the firebase real time database as
13:47 - well as potentially other features of
13:49 - firebase thanks for watching and I'll
13:52 - see you in the next lesson
13:57 - [Music]

Cleaned transcript:

hello welcome to lesson seven of the firebase tutorial video series in this lesson we're going to take a look at retrieving the data that we've set right here in our firebase real time database we've just got three messages right now but we're going to retrieve those and display them in our table view so one thing I should mention that's really cool about this real time database is that rather than just querying the data and grabbing all three of these posts what you can do is also listen for updates to a particular node so for example if we attach a listener let's say to this node here posts then every time there's activity in this node let's say a new message gets added our app will get notified and then we can grab that new data and display that in the table view so that's why it's called a realtime database so in this lesson you're going to see how that works as well okay so let's start by going into the documentation for the database portion and just to remind you up here you can click go to Doc's and then on the lefthand side well actually click on guides up here and then on the lefthand side go down to real time database and then under iOS read and write data so where are we here okay scroll down this is listen for value events and here is a code sample of that it's probably easier if I just show you in Xcode but notice that the function we use on the reference is observe so let's go back to our Xcode project and use that function let me show you how to do that in our execute project in viewcontroller.swift we have this post data this is just hardcoded dummy data here I'm going to get rid of this and I'm just going to make it an empty string array like that and then we are going to have to do the same thing that we in the composed view controller we're going to have to create a reference to that database so VAR reference fire database or fire oh that's right I forgot to import firebase database so fi our database dot sorry database reference that's what that is just lost my train of thought this property is going to hold a fire database reference and we're going to set it right here set the firebase reference so ref equals here we go like that so now we have a reference to our firebase real time database retrieve the posts and listen for changes so now that we have the reference to the database we can retrieve our posts so we go ref dot child and we have to specify the path to the data we want to retrieve and that is posts because that is this node right here and I'm just saying that I want to retrieve all of this data and I want to use that function that I mentioned observe there is a couple of different ones you'll notice that some say observe only and some say observe single event so I'm going to explain to you what single event is in a short while after we implement this but for now let's use observe event type and with a block of code that we can put in to handle when that event happens I'm going to double click that and oh one thing I wanted to make sure you notice let's press observe again this function here returns this you int okay that's going to be important in a second okay so the event type let's specify that let's see what sort of event types that we can specify press dot autocomplete should pop up okay and the one we want to use is child added because I'm interested in all of the new posts I get added when a new post gets added I want the code to execute so I'm going to pick child added if you pick something like you know these are pretty self explanatory value it's kind of the general one if anything changes with any of the data below this note then if you're interested in that that's the one you want to handle but I only care if new posts get added so I'm going to choose that and for the block of code for this closure you can just double click it to expand it in here we're going to put the code to execute when a child is added under posts and it has a single parameter which contains that data it's a fire data snapshot so I'm going to call this parameter snapshot so we're going to refer to it by that name okay so I've told it to observe this node posts and for the event child added how this works is it's going to initially go through all of the children of posts and it's going to fire that code once for each child so in my code in this closure here I basically want to take that data that it passes me back and add that to my messages data right that I have up here which I called post data let's write a comment so we know what we're doing take the value from the snapshot and add it to the post data array and after it goes through each of these pieces of data under post it's only going to fire again when a new post gets added so that connection is open to the database and it's going to keep listening for that data we are responsible for stopping that in other words detaching that listener and the way we do that is rumor I said this function observe returns a you int well that UN is the reference to that specific listener or this connection that we have open here that's feeding us all of these updates under posts so we want to keep a reference to that because later on we can use that reference to close or detach that listener so I know that from reading the documentation that what it is is a database handle and the class is an F I our database handle so I'm going to create a property for it up here and I'm going to set database handle equal to that call to the observe function because that is going to return that you end and I'm going to keep track of it using this property here so now that we have this set up we are going to right now post data is an empty string array right this code is going to fire for each piece of data under posts and for each piece of new data so whenever I get a piece of new data I basically want to take post data and I probably have to refer to it using self because we're doing this inside a closure self thought post dot append and I have to append a new element which is going to be a string because post data is a string array so before we do that I want to see how snapshot this fire data snapshot class is structured and how the data is returned so I'm going to set a breakpoint right here just so we can take a look inside snapshot and run the app so hopefully if it connects to the firebase database it's going to hit this breakpoint all right looks like it has and under here in the console there's all of these warnings and things like that that's happening behind the scenes I won't worry too much about that until we're actually running it on a device and not a simulator because things can be different so I'm going to use peel for print object I'm going to in snapshot and just to see what is returned so that looks to be the key right that's this guy right here right yes and the value is that hello firebase so what I'm going to do is we can't just append snapshot as is dot so there's a property for the key which is string and for the value it's any because and it could be nil as well so take note of that it's an optional any so we need to take this value and we need to change it into a string first before we actually append it so let's say let let's say let's say the post equals snapshot dot value string and if let actual post equals post so we're using conditional binding here so if there actually is data in there because we're trying to turn it into a string if for some reason it's nil or it fails then it's not going to execute like it's going to fail this condition so this the if statement here this conditional binding here is testing if there's data inside here and if there is it's going to assign it to actual post as a string so we're just going to append actual post into post data like that into our right and we're going to call reload on the table view to refresh the data so let's say table view dot reload data so let's write some comments so we know so it's clear what we're doing here so append the data to our post data array reload the table view try to convert the value of the data to a string okay so I'm going to remove the break point is youself here and okay let's run it again so now you see our data from the firebase database and what's happening is basically when we use this observe function right here it's looking for this event child added on this posts node and every time this event happens it's going to run this code down here and when it runs this code it passes us the data that's associated with this event so we can actually try this out here right here in our simulator right now in our database we have three items so if I had another device and I was running it and I added a message it should instantly show up here but I'm going to do it through here and it should happen as well so I'm just going to add a post in this database and because we have this observed function listening to this note posts it's going to pick up that a new child was added and then it's going to run this code and append that new data to our post data array and then reload the table view so let's see if that happens just put that right there I'll shrink this a little bit so so Auto ID I wonder if I can actually do that from here I'm not sure about that so I'm just going to put in some ID like that and this should show up so you see how fast that happened that is really cool now what if you didn't want to listen for any sort of event you just want it to retrieve the data and not have an open connection you can do that using if we scroll back up here instead of using the observe function we use the observe single event of and using this one we can read the data once and then it won't keep an open connection and be listening for any sort of events on that node so that pretty much sums it up for our messaging app so now you know how to create your firebase app how to add the SDK into your Xcode project how data is stored in your firebase real time database and furthermore how to read and write data to it and from it oh yeah not to mention how data is stored in that firebase database in the future we'll work more with the firebase real time database as well as potentially other features of firebase thanks for watching and I'll see you in the next lesson
