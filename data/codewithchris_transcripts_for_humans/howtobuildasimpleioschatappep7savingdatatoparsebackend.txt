With timestamps:

00:05 - hello welcome youtubers in this lesson
00:08 - we're going to implement the saving
00:11 - method of our chat app so that it saves
00:14 - the message into our parse back-end and
00:16 - right now I'm looking at my parse
00:18 - dashboard which we created this chat app
00:21 - in lesson I think it was two or
00:24 - something like that but log in to your
00:27 - parse account and you should see what
00:29 - you created back in lesson two or maybe
00:32 - it was lesson 3 but go down here go to
00:36 - core ok so here we have the data for our
00:42 - chat app we have one single test class
00:46 - with one rope and this was just the test
00:50 - to make sure that we had integrated the
00:52 - parse framework correctly we can go
00:55 - ahead and get rid of that we don't
00:56 - really need this so I'm just gonna say
01:00 - drop class type in the name of the class
01:02 - to confirm and instead we're going to
01:08 - add a class we're going to call it
01:13 - message and there's our message class
01:18 - there's no rows in here we're gonna add
01:21 - a column and we're gonna make it type
01:25 - string and we're just gonna call it text
01:29 - so in this column it's going to contain
01:33 - the text for that message now I'm going
01:38 - to open up the documentation in a new
01:42 - tab it's really important to understand
01:45 - how to read documentation because new
01:48 - things are coming out all the time and
01:50 - there may not be tutorials for it as
01:52 - soon as it comes out it's very important
01:54 - to be able to look at the documentation
01:56 - and figure things out so that's how
01:59 - we're going to approach it and I'll show
02:02 - you guys where to look so here we're
02:04 - looking at the iOS guide documentation
02:09 - for parse scroll down
02:12 - so everything all the records are PF
02:16 - objects okay and in here here's a sample
02:21 - of saving an object which is what we
02:23 - would want to do to save a row in our
02:27 - message table here and in this sample
02:32 - code you can switch between Objective C
02:34 - and Swift so switch the Swift and here
02:38 - you can see what's happening we're
02:40 - creating a new PF object of class game
02:45 - score although ours is going to be
02:47 - message and it's assigning it to this
02:50 - game score variable right here and then
02:54 - it's set it's setting one three three
02:57 - seven this value into the key score so
03:02 - we don't have a key named score and the
03:06 - key is basically to column we have a
03:08 - column named text so in here we're going
03:12 - to put text and instead of assigning one
03:16 - three three seven we're going to assign
03:18 - whatever the user entered into the text
03:20 - field in our app and then we're gonna
03:22 - call this method Save in background with
03:25 - block and this block of code is going to
03:30 - get executed after the saving has
03:33 - occurred now if you had more columns
03:36 - that you wanted to set values for you
03:38 - could you know add a couple more lines
03:40 - here as in this example sets the player
03:43 - name and the cheat mode and stuff like
03:45 - that but all we're interested in for our
03:48 - particular case is setting this text
03:51 - field okay so let's go ahead and do that
03:54 - so going back into our Xcode project we
04:00 - have an action method send button tapped
04:04 - and this occurs when the user taps the
04:07 - send button
04:10 - so here let's say create a PF object set
04:18 - the text key to the text of the message
04:28 - text field save the PF object okay so
04:35 - great a new let's create a variable and
04:38 - say new message object equals and we can
04:46 - even put the type what it is that this
04:49 - variable contains new PF object
04:53 - class-name message right that's what we
04:59 - created here in our parse back end all
05:04 - right so now we can say new message
05:07 - object key which is the column that we
05:13 - created called text we're going to make
05:15 - it equal to self dot message text field
05:20 - dot txt and actually this line we're
05:27 - going to move it under this comment and
05:30 - lastly we save the PF object so new
05:34 - message object dot save we want to do
05:40 - this one save in background with block
05:42 - okay so press ENTER and then in here you
05:46 - can double click that to open up that
05:49 - closure and the closure is essentially
05:53 - just a block of code that we're going to
05:54 - run that you can pass in as a parameter
05:56 - here so the parameters for that closure
06:01 - is a boolean and an NS error if we go
06:06 - into the documentation you take a look
06:10 - so see here's the boolean here's the
06:14 - boolean and here's the error they give
06:16 - it to labels success and error so you
06:19 - can check this success boolean it's
06:21 - going to be true or false
06:23 - whether the save was successful or
06:26 - unsuccessful so here you see this if
06:28 - statement it's checking this success
06:31 - label it's a boolean value right so if
06:36 - success is true then object has been
06:39 - saved else there was a problem
06:41 - check error dot description which is
06:43 - this guy right here so let's give it the
06:47 - same label so you can double click that
06:49 - as well
06:50 - so let's say success right error like
06:56 - that and here we put in some code we can
07:01 - put in the same type of code if success
07:05 - is true and I type out equals equals
07:10 - true just so it's more explicit for
07:12 - beginners oftentimes that is easier to
07:15 - understand then just that this is also
07:18 - okay because if success if this boolean
07:21 - is true then this if statement is true
07:23 - as well but I'm just gonna make it more
07:26 - more wordy but more clear for beginners
07:29 - so if success equals equals true then
07:32 - the message has been saved
07:37 - yay else something bad happened and we
07:46 - can do something like NS log error dot
07:52 - description and just log that out to the
07:55 - console to see what has happened ok so
08:00 - right now we're going to write a to do
08:04 - here retrieve the latest messages and
08:13 - reload the table
08:16 - so we're gonna do that in the next
08:18 - lesson in this lesson I just want to
08:20 - make sure that when the user hits the
08:23 - send button that this PF object gets
08:26 - created the message the text field text
08:31 - gets assigned to this key and then this
08:35 - object actually gets saved into our
08:38 - parse back end and then we should be
08:40 - able to see a new row here
08:42 - okay so let's hit run see what we get
08:52 - alright so let's send hello okay so I
09:03 - didn't put any breakpoints there but so
09:06 - I'm actually not sure if it happened or
09:07 - not but we can refresh it here and we
09:09 - can see there's a refresh button here I
09:12 - should have outputted a log statement
09:15 - just so we could see it in the console
09:18 - should I log something upon success but
09:22 - sure enough in our parse back-end we see
09:24 - our new row see hello that's what I
09:27 - typed and it was just sent right now but
09:34 - what I what I probably should do is
09:36 - let's end this log message saved
09:44 - successfully and furthermore when the
09:50 - send button is tapped I probably want to
09:53 - disable let's do that after did end
09:59 - editing disable the send button and text
10:03 - field so we can say self thought message
10:07 - text field dot enabled is false and the
10:15 - send button dot enabled is false and
10:19 - what this does is it just it Gray's out
10:23 - the text field in the button so that as
10:25 - this is happening the user can't change
10:27 - the text or hit Send again and make it
10:30 - save multiple times or something like
10:32 - that ok and what we want to do after the
10:38 - save and background with block whether
10:41 - it's successful or not we want to enable
10:45 - the text field and send button so here
10:53 - we say self dot send button dot enabled
10:57 - equals true self dot message text field
11:03 - dot enabled equals true and let's run it
11:06 - again
11:17 - okay the keyboard didn't pop up this
11:19 - time but sometimes that just happens in
11:22 - the simulator but I can still type it
11:24 - with my bluetooth keyboard right here if
11:27 - you want you can actually in the
11:32 - simulator up here you can just go to
11:34 - keyboard under hardware and you can you
11:38 - can either disconnect the hardware
11:40 - keyboard so you can uncheck this and
11:42 - then you will see that but then you
11:44 - won't be able to use your keyboard to
11:45 - type any text so sometimes you know just
11:48 - having your Bluetooth keyboard
11:49 - interferes with the simulator like that
11:52 - but I I would rather connect my hardware
11:56 - keyboard in and use that so don't worry
11:59 - if your keyboard doesn't pop up on the
12:01 - phone it actually will when I hit Send
12:03 - you can see everything's disabled I
12:05 - can't click that I can't I can't click
12:08 - the send button and then voila
12:11 - you can see here in the console that
12:13 - message saved successfully and in my
12:16 - simulator I can now again yeah
12:20 - tap the send button or the text field
12:22 - one thing we forgot though is probably
12:24 - we want to clear the text field after
12:27 - the message is saved successfully so
12:29 - here I'm going to say self-thought
12:32 - message text field dot text is just
12:36 - equal to an empty string like that and
12:39 - then back in our parse back end if we
12:42 - click refresh up here in the upper right
12:45 - hand corner we're going to see two rows
12:47 - of data for the two messages that I sent
12:49 - right there alright so that does it for
12:53 - this lesson in the next one we're going
12:56 - to retrieve the data from parse so we're
13:01 - gonna display these two messages instead
13:03 - of test1 test2 and test3 alright thanks
13:07 - for watching and I'll see you guys next
13:08 - time

Cleaned transcript:

hello welcome youtubers in this lesson we're going to implement the saving method of our chat app so that it saves the message into our parse backend and right now I'm looking at my parse dashboard which we created this chat app in lesson I think it was two or something like that but log in to your parse account and you should see what you created back in lesson two or maybe it was lesson 3 but go down here go to core ok so here we have the data for our chat app we have one single test class with one rope and this was just the test to make sure that we had integrated the parse framework correctly we can go ahead and get rid of that we don't really need this so I'm just gonna say drop class type in the name of the class to confirm and instead we're going to add a class we're going to call it message and there's our message class there's no rows in here we're gonna add a column and we're gonna make it type string and we're just gonna call it text so in this column it's going to contain the text for that message now I'm going to open up the documentation in a new tab it's really important to understand how to read documentation because new things are coming out all the time and there may not be tutorials for it as soon as it comes out it's very important to be able to look at the documentation and figure things out so that's how we're going to approach it and I'll show you guys where to look so here we're looking at the iOS guide documentation for parse scroll down so everything all the records are PF objects okay and in here here's a sample of saving an object which is what we would want to do to save a row in our message table here and in this sample code you can switch between Objective C and Swift so switch the Swift and here you can see what's happening we're creating a new PF object of class game score although ours is going to be message and it's assigning it to this game score variable right here and then it's set it's setting one three three seven this value into the key score so we don't have a key named score and the key is basically to column we have a column named text so in here we're going to put text and instead of assigning one three three seven we're going to assign whatever the user entered into the text field in our app and then we're gonna call this method Save in background with block and this block of code is going to get executed after the saving has occurred now if you had more columns that you wanted to set values for you could you know add a couple more lines here as in this example sets the player name and the cheat mode and stuff like that but all we're interested in for our particular case is setting this text field okay so let's go ahead and do that so going back into our Xcode project we have an action method send button tapped and this occurs when the user taps the send button so here let's say create a PF object set the text key to the text of the message text field save the PF object okay so great a new let's create a variable and say new message object equals and we can even put the type what it is that this variable contains new PF object classname message right that's what we created here in our parse back end all right so now we can say new message object key which is the column that we created called text we're going to make it equal to self dot message text field dot txt and actually this line we're going to move it under this comment and lastly we save the PF object so new message object dot save we want to do this one save in background with block okay so press ENTER and then in here you can double click that to open up that closure and the closure is essentially just a block of code that we're going to run that you can pass in as a parameter here so the parameters for that closure is a boolean and an NS error if we go into the documentation you take a look so see here's the boolean here's the boolean and here's the error they give it to labels success and error so you can check this success boolean it's going to be true or false whether the save was successful or unsuccessful so here you see this if statement it's checking this success label it's a boolean value right so if success is true then object has been saved else there was a problem check error dot description which is this guy right here so let's give it the same label so you can double click that as well so let's say success right error like that and here we put in some code we can put in the same type of code if success is true and I type out equals equals true just so it's more explicit for beginners oftentimes that is easier to understand then just that this is also okay because if success if this boolean is true then this if statement is true as well but I'm just gonna make it more more wordy but more clear for beginners so if success equals equals true then the message has been saved yay else something bad happened and we can do something like NS log error dot description and just log that out to the console to see what has happened ok so right now we're going to write a to do here retrieve the latest messages and reload the table so we're gonna do that in the next lesson in this lesson I just want to make sure that when the user hits the send button that this PF object gets created the message the text field text gets assigned to this key and then this object actually gets saved into our parse back end and then we should be able to see a new row here okay so let's hit run see what we get alright so let's send hello okay so I didn't put any breakpoints there but so I'm actually not sure if it happened or not but we can refresh it here and we can see there's a refresh button here I should have outputted a log statement just so we could see it in the console should I log something upon success but sure enough in our parse backend we see our new row see hello that's what I typed and it was just sent right now but what I what I probably should do is let's end this log message saved successfully and furthermore when the send button is tapped I probably want to disable let's do that after did end editing disable the send button and text field so we can say self thought message text field dot enabled is false and the send button dot enabled is false and what this does is it just it Gray's out the text field in the button so that as this is happening the user can't change the text or hit Send again and make it save multiple times or something like that ok and what we want to do after the save and background with block whether it's successful or not we want to enable the text field and send button so here we say self dot send button dot enabled equals true self dot message text field dot enabled equals true and let's run it again okay the keyboard didn't pop up this time but sometimes that just happens in the simulator but I can still type it with my bluetooth keyboard right here if you want you can actually in the simulator up here you can just go to keyboard under hardware and you can you can either disconnect the hardware keyboard so you can uncheck this and then you will see that but then you won't be able to use your keyboard to type any text so sometimes you know just having your Bluetooth keyboard interferes with the simulator like that but I I would rather connect my hardware keyboard in and use that so don't worry if your keyboard doesn't pop up on the phone it actually will when I hit Send you can see everything's disabled I can't click that I can't I can't click the send button and then voila you can see here in the console that message saved successfully and in my simulator I can now again yeah tap the send button or the text field one thing we forgot though is probably we want to clear the text field after the message is saved successfully so here I'm going to say selfthought message text field dot text is just equal to an empty string like that and then back in our parse back end if we click refresh up here in the upper right hand corner we're going to see two rows of data for the two messages that I sent right there alright so that does it for this lesson in the next one we're going to retrieve the data from parse so we're gonna display these two messages instead of test1 test2 and test3 alright thanks for watching and I'll see you guys next time
