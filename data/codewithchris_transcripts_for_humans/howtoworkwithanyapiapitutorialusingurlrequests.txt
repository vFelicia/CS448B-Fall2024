With timestamps:

00:00 - hey code crew thank you so much for your
00:02 - comments in my last two videos telling
00:04 - me which api's you'd like to see me work
00:06 - with here's a short list of api's that
00:08 - i've gathered from your comments if I've
00:10 - missed any please let me know now over
00:12 - time I'm gonna cover all of them but in
00:14 - this video I'd like to teach you guys
00:16 - the skills to work with any sort of API
00:18 - you'll learn how to work with SDKs as
00:20 - well as how to manually roll your own
00:22 - request to send to API endpoints hi I'm
00:25 - Chris and if this is your first time
00:27 - here welcome to code with Chris where
00:28 - we'll teach you how to build an app even
00:30 - if you've never coded before now before
00:33 - we dive into the wonderful world of
00:35 - api's I highly encourage you to comment
00:38 - below with what specific API you're
00:40 - looking to work with because if you're
00:42 - watching this video then that's your
00:43 - goal right tell me what that lucky API
00:46 - is and on your way down there if you
00:48 - wouldn't mind giving that thumbs up
00:49 - button just a little tap that really
00:51 - helps the channel and I really really
00:53 - appreciate it
00:54 - alright so let's talk about api's when
00:56 - you're working with an API you will
00:57 - encounter one of two things either they
01:00 - have an SDK for the platform you're
01:02 - working with or they don't for us
01:04 - building iOS apps we're looking for an
01:06 - iOS SDK now if you're not familiar with
01:09 - what an SDK is check out this video
01:12 - it stands for software development kit
01:14 - and it's basically a library of code
01:16 - that is going to make our life easier
01:18 - working with that specific API you pop
01:21 - the SDK into your Xcode project and you
01:23 - use the provided classes and methods to
01:25 - interact with that API all the
01:28 - nitty-gritty details are abstracted from
01:30 - you let's take a look at an SDK example
01:33 - from one of the api's that you guys
01:34 - suggested the Spotify API one quick
01:37 - thing before we dive in support for this
01:39 - video comes from atlanticnet a hosting
01:42 - solution provider of healthcare HIPAA
01:44 - and PCI compliance whether you're
01:46 - starting fresh or need a new provider
01:48 - atlantic dotnet can help you succeed
01:50 - with fully audited solutions and 25
01:53 - years of experience try atlanta net to
01:56 - develop test or launch your next project
01:58 - these guys won't let you down right now
02:01 - they're offering a free one gig virtual
02:03 - server with SSDs and block storage for
02:06 - free for a year and free snapshots for
02:08 - one year two plus twenty-five dollars in
02:10 - free credits to use on any other
02:13 - services they offer ease-of-use -
02:15 - something that I like as it frees up my
02:17 - mind to focus on coding I also like that
02:19 - they have round-the-clock phone support
02:21 - so if I happen to get stuck I can
02:23 - contact them easily so visit Atlantic
02:26 - dotnet slash code with Chris and enter
02:28 - the code Chris they get your twenty five
02:31 - dollars free credit to give them a try
02:33 - simply visit Atlantic dotnet slash code
02:35 - with Chris and after you sign up use the
02:38 - code Chris to get $25 free credit
02:41 - alright now let's go back to a Spotify
02:43 - API so here we have the Spotify iOS SDK
02:47 - but for the API that you want to work
02:49 - with just double check if they have an
02:51 - iOS SDK or an SDK for the platform that
02:54 - you're building for in the case of
02:56 - Spotify they do have SDKs for several
03:00 - different platforms and they also have
03:01 - their Web API so if there is no SDK for
03:04 - your platform you can always manually
03:06 - create requests and send it to these API
03:09 - endpoints and parse the response and
03:12 - this is something I'm going to show you
03:13 - a step by step example with later in
03:16 - this video for this example for Spotify
03:19 - I wanted to run through their SDK
03:21 - because I want to show you an example of
03:23 - what you might encounter for the API
03:26 - that you want to work with what do you
03:28 - do when you find out that they do have
03:30 - an SDK so for the Spotify iOS SDK
03:33 - usually with any platform if they do
03:36 - have an escape they're gonna have tons
03:38 - of documentation for you as is this case
03:40 - if you take a look down the side here
03:42 - you'll see tons of great stuff scroll
03:45 - down a little bit this just tells you
03:47 - what it's about and what I can do but I
03:49 - usually look for tutorials and examples
03:52 - and QuickStart any code samples that's
03:55 - always good so if you take a look at
03:57 - this QuickStart here are the steps that
03:59 - you need to do so register your
04:01 - developer app and this is common for
04:03 - most API so I would say you have to
04:06 - register for an API key that you pass in
04:09 - along with your API calls so that they
04:11 - can identify who is making those API
04:14 - calls and they will also rate limit you
04:17 - so if your app is making too many API
04:20 - calls too often then they can
04:22 - temporarily either rate limit or D act
04:26 - your API key to prevent that abuse
04:28 - that's what it's for
04:30 - also the next step they tell you here is
04:33 - to install the Spotify app now I thought
04:36 - this was really strange to begin with
04:37 - because why would I need this Spotify
04:39 - app and it turns out that one of the
04:41 - features of this iOS SDK for Spotify is
04:44 - to have your app be a remote control I
04:48 - guess for the playback that is happening
04:50 - in the actual Spotify app on your
04:53 - computer so you can kind of stay in sync
04:55 - with what's playing on the Spotify app
04:58 - next is to download the iOS SDK and this
05:02 - is this is what we're after right so it
05:04 - is hosted on the github repository and
05:07 - this actually leads to the changelog
05:11 - page okay so this is the main page of
05:13 - the iOS SDK where the code is hosted and
05:16 - stuff notice that there is a demo
05:18 - projects folder and if you check in here
05:20 - there's a ton of samples that you'll
05:21 - probably want to browse through if
05:23 - you're using this SDK now typically on
05:26 - the front page of the github repository
05:29 - they'll have kind of the key information
05:32 - for how to install the SDK and how to
05:35 - use it as well in the past I've done
05:38 - videos where we integrate SDKs using
05:41 - cocoapods but sometimes that won't be
05:43 - available so you're gonna have to
05:44 - manually integrate this SDK into your
05:48 - Xcode project cocoapods makes it really
05:50 - easy if you want an example of that
05:52 - check out my video here where I
05:53 - integrate the firebase SDK into Xcode
05:56 - with cocoa pods so in this case the
05:59 - Spotify iOS SDK doesn't have a cocoa pod
06:02 - so we're gonna have to do it according
06:04 - to their instructions if we take a look
06:07 - at under the tutorial section you're
06:10 - going to see just how to do that so here
06:12 - it says download the framework from the
06:15 - top of the page install the Spotify app
06:17 - which we already know about register
06:19 - your your application so get an API key
06:22 - or a client ID they call it here and
06:25 - then you're gonna add the Spotify iOS
06:28 - dot framework to your Xcode project so
06:30 - you literally just drag it and drop it
06:32 - in there and this is the thing that you
06:33 - you got in step one up here
06:36 - and then you're gonna have to set some
06:37 - values in your pee list and then you can
06:41 - do some of the setup code that's
06:43 - outlined here but in general just as
06:45 - some general advice working with an SDK
06:48 - is going to be mostly reading
06:50 - documentation and being able to follow
06:52 - instructions so your experience is
06:55 - really going to be dependent on how
06:57 - up-to-date this documentation is you
06:59 - know and how accurate is it let's go
07:02 - back to the Quick Start for a second
07:04 - so after you've integrated the SDK into
07:07 - your Xcode project usually they'll give
07:10 - you some QuickStart or sample code to
07:12 - get you up and running with using their
07:14 - SDK and API so what I would do is follow
07:18 - some of these directions and kind of see
07:20 - if you get the result that's expected
07:22 - now hopefully they have a lot of code
07:23 - samples and explanations on how to use
07:26 - the various features of the SDK but if
07:29 - they don't what I would do is look for a
07:33 - reference of their classes and methods
07:37 - in their SDK because remember it's just
07:39 - a library of classes right so if you
07:42 - take a look at what the classes are dive
07:44 - into these references take a look at
07:46 - what methods what properties are
07:47 - available and then you know read the
07:50 - descriptions there you'll also get a
07:52 - really good idea of what's available
07:54 - inside this SDK so actually integrating
07:59 - this Spotify SDK and diving into it is
08:01 - beyond the scope of this video I mainly
08:04 - wanted to show you kind of what you
08:07 - would do if you encountered an iOS SDK
08:10 - for the API virchow's now if the API
08:12 - that you want to work with doesn't have
08:14 - an SDK for your platform then let's take
08:17 - a look at what we do now if there's no
08:19 - SDK for your platform don't freak out we
08:21 - can still work with the API the manual
08:23 - way using iOS networking classes that
08:26 - means we're going to create our own URL
08:28 - request specifying our API key the
08:31 - header parameters the data in the body
08:33 - and we're going to send that request off
08:34 - to the API endpoint and when we get the
08:36 - response back from the API we're gonna
08:38 - have to manually parse that data to use
08:40 - it let's take a look at an example of
08:42 - manually hitting an API using one of the
08:44 - pS that you guys suggested rapid API so
08:48 - one of you guys mentioned rapid API in
08:50 - one of the comments you left for me and
08:52 - I thought it was interesting so I
08:54 - checked it out it turns out that it's an
08:55 - API marketplace one SDK one API key one
08:59 - dashboard so that sounds really cool but
09:01 - the thing is most of these api's are
09:05 - basically they have a free tier but then
09:07 - there are paid tiers for more access so
09:10 - the free tier gives you you know an X
09:13 - number of calls per month and then if
09:15 - you're serious about it and you want to
09:16 - use more of that API then you have to
09:18 - start paying the cool thing is that the
09:21 - data is really good I mean I recognize a
09:24 - lot of these platforms and api's and if
09:27 - you're serious about the app that you're
09:29 - building you need to get your data from
09:31 - somewhere and the data needs to be good
09:33 - right so it really depends what you're
09:35 - looking for but even if you don't want
09:37 - to pay for API usage this is still a
09:40 - really good place to kind of learn the
09:42 - ropes with working with the API because
09:43 - the documentation is really good and
09:45 - there's a lot of sample code and so I
09:47 - decided to pick one of the api's here
09:50 - from Rapid API and show you guys how to
09:52 - make a manual API call so the API that
09:55 - I've chosen to work with is an OCR text
09:58 - extractor API because I'm actually
10:01 - really bad with receipts I lose them in
10:03 - random pockets and when I do remember to
10:05 - take an image of it to later upload to
10:07 - Dropbox I still have to remember to name
10:10 - it properly put it in the right folder
10:12 - and it's just the hassle so one of my
10:15 - dreams has been to create an app that's
10:17 - specifically just for me and for my
10:20 - situation where I can take a picture of
10:22 - the receipt have it extract the location
10:24 - and the date and time and all that stuff
10:27 - and then just put it into Dropbox for me
10:29 - without me lifting a single finger just
10:32 - having taken the image and you know that
10:35 - would be a perfect use case so that's
10:37 - why I'm interested in this particular
10:38 - API now what we're gonna do here with
10:41 - this API is to manually make an API call
10:44 - from Xcode or from Swift so just taking
10:48 - a look at what we have here we have four
10:50 - endpoints
10:51 - two of them are get which is to retrieve
10:55 - some data here we listing out
10:57 - the OCR engine options language options
11:00 - not really interesting this is more
11:03 - interesting here we're posting this is
11:05 - usually submitting data so this one is
11:07 - extracting text from an image URL as you
11:11 - can see here this is a code snippet and
11:13 - see this is the cool thing here you can
11:15 - choose Swift as your language or you can
11:17 - take a look at how to perform this API
11:20 - call in Swift you can see here one of
11:23 - their parameters is actually the image
11:24 - URL now this end point here is
11:27 - extracting text from an image file so
11:29 - you're actually going to be passing in
11:31 - the entire image data so I'm going to be
11:34 - showing you how to use this one this
11:36 - image is actually just the Google logo
11:38 - right here so it should be pretty easy
11:40 - for their engine to extract but rather
11:43 - than taking this snippet we're going to
11:46 - just manually type it out so I can
11:48 - explain things along the way
11:50 - the documentation here on this column
11:53 - these are the parameters that you're
11:55 - going to need to specify and yeah but
11:59 - before we dive in and write this in
12:01 - Xcode I need to do a high-level
12:02 - explanation of what's going on just in
12:04 - case you're brand new to iOS networking
12:07 - so first we're going to create a URL
12:09 - object pointing to the API endpoint that
12:12 - we want to hit and then we're going to
12:14 - create a request object passing in that
12:17 - URL but we can't send the request off
12:20 - just yet we have to specify those header
12:23 - parameters and that body data that's
12:25 - required by the API in order for our
12:27 - request to be accepted and actually do
12:30 - something so we're going to refer to the
12:32 - documentation and pass in all the
12:34 - required parameters and the data and
12:37 - then we're going to set that in our
12:40 - request object and then we're going to
12:42 - use the URL session class and we're
12:45 - going to fire off that request and
12:47 - capture the response from the API
12:50 - alright with that said let's jump into
12:52 - Xcode and do this so I've got an Xcode
12:55 - project open right here and I'm just
12:59 - gonna write some high-level comments
13:01 - just to keep track of what we're doing
13:03 - so we're gonna have our URL
13:05 - we're gonna have
13:06 - URL requests oops requests we're going
13:11 - to specify the header specify the body
13:21 - set the request type and we are going to
13:27 - get your session we're going to create
13:36 - the data task and finally fire off the
13:42 - data task which is essentially making
13:45 - the API call so first let us create a
13:49 - URL object we're gonna have a string URL
13:55 - the funny thing is that the endpoint is
13:58 - not really specified here I had to check
14:02 - the sample code to actually see that the
14:06 - endpoint is this right here so that's
14:09 - the endpoint that we're gonna hit oops
14:12 - as a string and when you create a URL
14:15 - object like this it could be nil and so
14:20 - no we're just gonna guard your L not
14:23 - equal nil else just print you're
14:28 - creating a URL object and then now we're
14:32 - gonna create a request actually this
14:34 - one's gonna be a bar because we're gonna
14:37 - have to modify it it's not gonna be a
14:39 - constant so URL
14:40 - sorry request from a URL now you can
14:47 - just use this one where you pass in the
14:48 - URL or you can have this one where you
14:51 - can specify a cache policy and timeout
14:53 - interval in here in the documentation it
14:56 - doesn't really tell you what sorts of
14:59 - things to set for that but taking a look
15:01 - at their sample code I can I can see
15:04 - that they when they create their request
15:06 - that use a time interval of 10 and they
15:08 - use this sort of cache policy right here
15:11 - so I'm just going to mimic that so for
15:14 - this cache policy use protocol cache
15:18 - policy and the timeout
15:19 - Phil is 10 and I'm gonna pass in the URL
15:22 - and force unwrap it because we've
15:24 - already checked that it's not nil so
15:26 - there's our request but it's not ready
15:29 - to go yet we have to specify the header
15:31 - now if you take a look at the property
15:36 - for specifying or adding the headers to
15:39 - the request it's an optional dictionary
15:42 - of string where the keys are strings in
15:45 - the value are strings all right so
15:47 - that's what we're going to need to
15:48 - specify let headers equal so that's
15:52 - gonna be our dictionary let's take a
15:53 - look at what keys we need so this is
15:56 - going to be a key this is going to be
15:57 - the value this is going to be a key this
15:59 - is going to be the value and this is my
16:00 - API key right here and also this one in
16:03 - this one right here so this one I'm just
16:07 - gonna copy and paste from here to save
16:09 - myself some typing but as you can see
16:12 - this is the key for that parameter and
16:15 - this is the value for that right and
16:19 - then you have comma and because because
16:22 - this is one key value pair in your
16:23 - dictionary right and here's the second
16:26 - key value pair there's the key for that
16:28 - guy and there's my API key you know
16:30 - don't try and use it because I'm I'm
16:31 - gonna cancel my subscription here so
16:34 - it's not going to be valid anyways but
16:36 - that's the value that's sort of that
16:38 - that's the value for this parameter and
16:41 - then we have a cept string just like
16:43 - done here but there's also this content
16:46 - type application for it / JSON and that
16:49 - basically indicates what data type the
16:52 - body is of the request so I'm gonna copy
16:57 - that and I find it funny that they
16:59 - didn't have it here because I mean it's
17:01 - not immediately obvious for everybody
17:03 - especially people who haven't really
17:05 - worked with manually creating their
17:08 - requests before alright so those are our
17:10 - headers right and we can set it request
17:14 - thought all HTTP header fields and
17:19 - headers
17:22 - I'm actually gonna call it just header
17:25 - ok now specify the body so the request
17:29 - HTTP body expects an optional and data
17:34 - object so what needs to happen is down
17:41 - here in the documentation it tells us
17:42 - what sort of data it needs in the body
17:45 - but we need to turn this JSON object
17:49 - into a data object so what we do is we
17:54 - start specifying the body as a JSON body
18:01 - JSON object like that
18:05 - so in Swift that would be a dictionary
18:09 - right and you would have key value pairs
18:15 - representing that now obviously you
18:18 - would put your own like whatever URL
18:20 - that you want to hit and extract text
18:23 - from let's take a look at what this
18:25 - error is specifying here
18:27 - insert as string any yes so for this
18:30 - JSON object here we have all of the keys
18:33 - are strings as you can see here but the
18:35 - value is mixed like we have strings here
18:38 - we have boolean here we have string here
18:40 - so this is going to be as a type of
18:45 - dictionary where the keys are strings
18:48 - and the values are any right so that's
18:52 - our JSON object that represents our body
18:54 - but remember we need to turn it into a
18:56 - data object so we're gonna try to turn
19:00 - it into a piece of data I'm gonna call
19:06 - this request body so we're gonna use
19:10 - JSON serialization dot data and we're
19:14 - gonna pass in our JSON object here
19:19 - alright and take a look at this it
19:22 - throws so we're gonna have to wrap this
19:24 - in a do catch block and use the try
19:27 - keyword
19:29 - and so we're gonna pass in the JSON
19:31 - object here and the options is going to
19:35 - be fragments allowed and we got to put
19:43 - the try here and I'm gonna do do all
19:50 - right so put that in a do block catch
19:53 - any potential errors error creating the
20:00 - data object from the JSON all right so
20:08 - we have our and then here we are going
20:13 - to then set the request HTT body equals
20:21 - request body okay so now we've specified
20:24 - our header parameters and we've also
20:26 - specified our request body right we've
20:31 - taken this JSON object turned it into a
20:33 - data object and assigned it to HTTP body
20:37 - now we have to set the request type or
20:42 - HTTP method because you take a look at
20:45 - these endpoints here you'll notice that
20:47 - these are get you see this get in this
20:50 - post here
20:51 - well that indicates the HTTP method of
20:55 - your request if you're not familiar with
20:58 - what these are just know that when
21:01 - you're sending off these web requests
21:03 - there is a type that you can specify you
21:06 - put get usually to represent requests to
21:10 - retrieve data whereas post is usually
21:13 - for submitting data so if we take a look
21:16 - at here well actually it tells you right
21:19 - here that this endpoint is going to be a
21:21 - post request and so that's what we're
21:23 - gonna set here and there is a property
21:27 - for that HTTP method we're gonna set
21:32 - this to post I think if I remember
21:37 - correctly yeah it's all caps like that
21:39 - so we've got all of this
21:42 - next up is the URL session stuff so
21:46 - we're gonna get a shared session and
21:55 - we're gonna create the data task from
21:57 - that where we pass in the request that
22:04 - we've created we've worked so hard to
22:06 - create this and we're gonna be able to
22:08 - specify a completion handler which is
22:10 - going to capture the response from the
22:12 - API and then we're going to take a look
22:13 - at what's inside the data so let's
22:15 - choose that and before we forget let's
22:18 - assign it to its own constant data task
22:22 - e equals because this is going to return
22:24 - a data task for us so let's pass in the
22:27 - request let's open up a closure for this
22:30 - completion handler by double clicking it
22:33 - and keep in mind all of these parameters
22:36 - are optional so there's data there's
22:39 - response and there's error so I'm going
22:43 - to do a quick check in here check for
22:46 - errors and say if error is nil meaning
22:51 - there was no error then I'm going to try
22:54 - to parse the data actually I'm gonna do
22:56 - one more thing and data is not nil so we
23:00 - do have some data in there they're gonna
23:03 - try to parse out the data and I'm gonna
23:09 - say let well first let's use JSON
23:14 - serialization to parse our data into a
23:18 - dictionary since we're using it up there
23:20 - already so JSON serialization dot JSON
23:24 - object with data so we're gonna grab the
23:28 - data in here we're going to pass it into
23:29 - there we're gonna specify reading
23:32 - options and we're gonna have to capture
23:34 - any errors that happen and it says any
23:36 - right here but the return type is going
23:39 - to be here's at a sample of the response
23:41 - it's basically going to be a dictionary
23:44 - and we're gonna be able to check this
23:45 - dictionary so we can see that all the
23:48 - keys are strings and the response could
23:50 - be boolean or string
23:53 - so we're gonna specify any so let's go
24:01 - ahead and use that JSON object for data
24:06 - I'm gonna force unwrap it because we've
24:08 - already checked I'm gonna choose mutable
24:11 - containers and I'm gonna say as string
24:17 - any you know try to do that
24:23 - let the dictionary equals that alright
24:28 - we're gonna have to wrap it in a do
24:30 - catch block response data all right so
24:42 - we're gonna try to just see what we get
24:47 - here so I'm going to set a breakpoint
24:48 - there and then we can go take a look at
24:50 - what we have all right I'm gonna do that
24:58 - all right moment of truth so this is how
25:03 - you specify your own request oh I always
25:06 - forget this one more thing fire off the
25:09 - data task data task dot resume so this
25:15 - is how we create our own request
25:19 - let's return there if there's an error
25:23 - all right so this is how we create our
25:27 - own request fire it off to the API and
25:30 - capture the response it's a lot more
25:32 - involved versus having an SDK and just
25:36 - simply calling a method and you know
25:38 - specifying a closure because we're you
25:41 - know doing all of this manually so let's
25:44 - take a look I'll tell you I am actually
25:46 - doing this for the first time I don't
25:48 - know what this API is gonna return
25:51 - because I just signed up for the free
25:54 - plan here the thing is you have to
25:56 - specify a credit card which I'm not that
25:58 - happy about but I understand because
25:59 - they're gonna start charging you after
26:01 - 50 right so I kind of get that
26:05 - so the anyways this is the first
26:07 - let me see this oh so we did get
26:09 - something back right so this is really
26:11 - cool
26:12 - error message okay so we don't have an
26:17 - error processing time exit code parsed
26:25 - results one element oh look at that
26:33 - the parsed text is Google isn't that so
26:36 - cool all right
26:38 - our job is done now you can work with
26:40 - any API remember though each API has its
26:43 - own specific documentation on how to
26:45 - work with that API if there's an API
26:48 - that you'd like me to do a specific
26:50 - demonstration of just simply leave a
26:53 - comment below and if you learned
26:55 - something in this video please please
26:56 - give it a thumbs up subscribe if you
26:58 - haven't already and make sure you turn
27:00 - on Bell notifications so you don't miss
27:02 - the next video thank you so much for
27:04 - watching and I'll see you in the next
27:05 - video

Cleaned transcript:

hey code crew thank you so much for your comments in my last two videos telling me which api's you'd like to see me work with here's a short list of api's that i've gathered from your comments if I've missed any please let me know now over time I'm gonna cover all of them but in this video I'd like to teach you guys the skills to work with any sort of API you'll learn how to work with SDKs as well as how to manually roll your own request to send to API endpoints hi I'm Chris and if this is your first time here welcome to code with Chris where we'll teach you how to build an app even if you've never coded before now before we dive into the wonderful world of api's I highly encourage you to comment below with what specific API you're looking to work with because if you're watching this video then that's your goal right tell me what that lucky API is and on your way down there if you wouldn't mind giving that thumbs up button just a little tap that really helps the channel and I really really appreciate it alright so let's talk about api's when you're working with an API you will encounter one of two things either they have an SDK for the platform you're working with or they don't for us building iOS apps we're looking for an iOS SDK now if you're not familiar with what an SDK is check out this video it stands for software development kit and it's basically a library of code that is going to make our life easier working with that specific API you pop the SDK into your Xcode project and you use the provided classes and methods to interact with that API all the nittygritty details are abstracted from you let's take a look at an SDK example from one of the api's that you guys suggested the Spotify API one quick thing before we dive in support for this video comes from atlanticnet a hosting solution provider of healthcare HIPAA and PCI compliance whether you're starting fresh or need a new provider atlantic dotnet can help you succeed with fully audited solutions and 25 years of experience try atlanta net to develop test or launch your next project these guys won't let you down right now they're offering a free one gig virtual server with SSDs and block storage for free for a year and free snapshots for one year two plus twentyfive dollars in free credits to use on any other services they offer easeofuse something that I like as it frees up my mind to focus on coding I also like that they have roundtheclock phone support so if I happen to get stuck I can contact them easily so visit Atlantic dotnet slash code with Chris and enter the code Chris they get your twenty five dollars free credit to give them a try simply visit Atlantic dotnet slash code with Chris and after you sign up use the code Chris to get $25 free credit alright now let's go back to a Spotify API so here we have the Spotify iOS SDK but for the API that you want to work with just double check if they have an iOS SDK or an SDK for the platform that you're building for in the case of Spotify they do have SDKs for several different platforms and they also have their Web API so if there is no SDK for your platform you can always manually create requests and send it to these API endpoints and parse the response and this is something I'm going to show you a step by step example with later in this video for this example for Spotify I wanted to run through their SDK because I want to show you an example of what you might encounter for the API that you want to work with what do you do when you find out that they do have an SDK so for the Spotify iOS SDK usually with any platform if they do have an escape they're gonna have tons of documentation for you as is this case if you take a look down the side here you'll see tons of great stuff scroll down a little bit this just tells you what it's about and what I can do but I usually look for tutorials and examples and QuickStart any code samples that's always good so if you take a look at this QuickStart here are the steps that you need to do so register your developer app and this is common for most API so I would say you have to register for an API key that you pass in along with your API calls so that they can identify who is making those API calls and they will also rate limit you so if your app is making too many API calls too often then they can temporarily either rate limit or D act your API key to prevent that abuse that's what it's for also the next step they tell you here is to install the Spotify app now I thought this was really strange to begin with because why would I need this Spotify app and it turns out that one of the features of this iOS SDK for Spotify is to have your app be a remote control I guess for the playback that is happening in the actual Spotify app on your computer so you can kind of stay in sync with what's playing on the Spotify app next is to download the iOS SDK and this is this is what we're after right so it is hosted on the github repository and this actually leads to the changelog page okay so this is the main page of the iOS SDK where the code is hosted and stuff notice that there is a demo projects folder and if you check in here there's a ton of samples that you'll probably want to browse through if you're using this SDK now typically on the front page of the github repository they'll have kind of the key information for how to install the SDK and how to use it as well in the past I've done videos where we integrate SDKs using cocoapods but sometimes that won't be available so you're gonna have to manually integrate this SDK into your Xcode project cocoapods makes it really easy if you want an example of that check out my video here where I integrate the firebase SDK into Xcode with cocoa pods so in this case the Spotify iOS SDK doesn't have a cocoa pod so we're gonna have to do it according to their instructions if we take a look at under the tutorial section you're going to see just how to do that so here it says download the framework from the top of the page install the Spotify app which we already know about register your your application so get an API key or a client ID they call it here and then you're gonna add the Spotify iOS dot framework to your Xcode project so you literally just drag it and drop it in there and this is the thing that you you got in step one up here and then you're gonna have to set some values in your pee list and then you can do some of the setup code that's outlined here but in general just as some general advice working with an SDK is going to be mostly reading documentation and being able to follow instructions so your experience is really going to be dependent on how uptodate this documentation is you know and how accurate is it let's go back to the Quick Start for a second so after you've integrated the SDK into your Xcode project usually they'll give you some QuickStart or sample code to get you up and running with using their SDK and API so what I would do is follow some of these directions and kind of see if you get the result that's expected now hopefully they have a lot of code samples and explanations on how to use the various features of the SDK but if they don't what I would do is look for a reference of their classes and methods in their SDK because remember it's just a library of classes right so if you take a look at what the classes are dive into these references take a look at what methods what properties are available and then you know read the descriptions there you'll also get a really good idea of what's available inside this SDK so actually integrating this Spotify SDK and diving into it is beyond the scope of this video I mainly wanted to show you kind of what you would do if you encountered an iOS SDK for the API virchow's now if the API that you want to work with doesn't have an SDK for your platform then let's take a look at what we do now if there's no SDK for your platform don't freak out we can still work with the API the manual way using iOS networking classes that means we're going to create our own URL request specifying our API key the header parameters the data in the body and we're going to send that request off to the API endpoint and when we get the response back from the API we're gonna have to manually parse that data to use it let's take a look at an example of manually hitting an API using one of the pS that you guys suggested rapid API so one of you guys mentioned rapid API in one of the comments you left for me and I thought it was interesting so I checked it out it turns out that it's an API marketplace one SDK one API key one dashboard so that sounds really cool but the thing is most of these api's are basically they have a free tier but then there are paid tiers for more access so the free tier gives you you know an X number of calls per month and then if you're serious about it and you want to use more of that API then you have to start paying the cool thing is that the data is really good I mean I recognize a lot of these platforms and api's and if you're serious about the app that you're building you need to get your data from somewhere and the data needs to be good right so it really depends what you're looking for but even if you don't want to pay for API usage this is still a really good place to kind of learn the ropes with working with the API because the documentation is really good and there's a lot of sample code and so I decided to pick one of the api's here from Rapid API and show you guys how to make a manual API call so the API that I've chosen to work with is an OCR text extractor API because I'm actually really bad with receipts I lose them in random pockets and when I do remember to take an image of it to later upload to Dropbox I still have to remember to name it properly put it in the right folder and it's just the hassle so one of my dreams has been to create an app that's specifically just for me and for my situation where I can take a picture of the receipt have it extract the location and the date and time and all that stuff and then just put it into Dropbox for me without me lifting a single finger just having taken the image and you know that would be a perfect use case so that's why I'm interested in this particular API now what we're gonna do here with this API is to manually make an API call from Xcode or from Swift so just taking a look at what we have here we have four endpoints two of them are get which is to retrieve some data here we listing out the OCR engine options language options not really interesting this is more interesting here we're posting this is usually submitting data so this one is extracting text from an image URL as you can see here this is a code snippet and see this is the cool thing here you can choose Swift as your language or you can take a look at how to perform this API call in Swift you can see here one of their parameters is actually the image URL now this end point here is extracting text from an image file so you're actually going to be passing in the entire image data so I'm going to be showing you how to use this one this image is actually just the Google logo right here so it should be pretty easy for their engine to extract but rather than taking this snippet we're going to just manually type it out so I can explain things along the way the documentation here on this column these are the parameters that you're going to need to specify and yeah but before we dive in and write this in Xcode I need to do a highlevel explanation of what's going on just in case you're brand new to iOS networking so first we're going to create a URL object pointing to the API endpoint that we want to hit and then we're going to create a request object passing in that URL but we can't send the request off just yet we have to specify those header parameters and that body data that's required by the API in order for our request to be accepted and actually do something so we're going to refer to the documentation and pass in all the required parameters and the data and then we're going to set that in our request object and then we're going to use the URL session class and we're going to fire off that request and capture the response from the API alright with that said let's jump into Xcode and do this so I've got an Xcode project open right here and I'm just gonna write some highlevel comments just to keep track of what we're doing so we're gonna have our URL we're gonna have URL requests oops requests we're going to specify the header specify the body set the request type and we are going to get your session we're going to create the data task and finally fire off the data task which is essentially making the API call so first let us create a URL object we're gonna have a string URL the funny thing is that the endpoint is not really specified here I had to check the sample code to actually see that the endpoint is this right here so that's the endpoint that we're gonna hit oops as a string and when you create a URL object like this it could be nil and so no we're just gonna guard your L not equal nil else just print you're creating a URL object and then now we're gonna create a request actually this one's gonna be a bar because we're gonna have to modify it it's not gonna be a constant so URL sorry request from a URL now you can just use this one where you pass in the URL or you can have this one where you can specify a cache policy and timeout interval in here in the documentation it doesn't really tell you what sorts of things to set for that but taking a look at their sample code I can I can see that they when they create their request that use a time interval of 10 and they use this sort of cache policy right here so I'm just going to mimic that so for this cache policy use protocol cache policy and the timeout Phil is 10 and I'm gonna pass in the URL and force unwrap it because we've already checked that it's not nil so there's our request but it's not ready to go yet we have to specify the header now if you take a look at the property for specifying or adding the headers to the request it's an optional dictionary of string where the keys are strings in the value are strings all right so that's what we're going to need to specify let headers equal so that's gonna be our dictionary let's take a look at what keys we need so this is going to be a key this is going to be the value this is going to be a key this is going to be the value and this is my API key right here and also this one in this one right here so this one I'm just gonna copy and paste from here to save myself some typing but as you can see this is the key for that parameter and this is the value for that right and then you have comma and because because this is one key value pair in your dictionary right and here's the second key value pair there's the key for that guy and there's my API key you know don't try and use it because I'm I'm gonna cancel my subscription here so it's not going to be valid anyways but that's the value that's sort of that that's the value for this parameter and then we have a cept string just like done here but there's also this content type application for it / JSON and that basically indicates what data type the body is of the request so I'm gonna copy that and I find it funny that they didn't have it here because I mean it's not immediately obvious for everybody especially people who haven't really worked with manually creating their requests before alright so those are our headers right and we can set it request thought all HTTP header fields and headers I'm actually gonna call it just header ok now specify the body so the request HTTP body expects an optional and data object so what needs to happen is down here in the documentation it tells us what sort of data it needs in the body but we need to turn this JSON object into a data object so what we do is we start specifying the body as a JSON body JSON object like that so in Swift that would be a dictionary right and you would have key value pairs representing that now obviously you would put your own like whatever URL that you want to hit and extract text from let's take a look at what this error is specifying here insert as string any yes so for this JSON object here we have all of the keys are strings as you can see here but the value is mixed like we have strings here we have boolean here we have string here so this is going to be as a type of dictionary where the keys are strings and the values are any right so that's our JSON object that represents our body but remember we need to turn it into a data object so we're gonna try to turn it into a piece of data I'm gonna call this request body so we're gonna use JSON serialization dot data and we're gonna pass in our JSON object here alright and take a look at this it throws so we're gonna have to wrap this in a do catch block and use the try keyword and so we're gonna pass in the JSON object here and the options is going to be fragments allowed and we got to put the try here and I'm gonna do do all right so put that in a do block catch any potential errors error creating the data object from the JSON all right so we have our and then here we are going to then set the request HTT body equals request body okay so now we've specified our header parameters and we've also specified our request body right we've taken this JSON object turned it into a data object and assigned it to HTTP body now we have to set the request type or HTTP method because you take a look at these endpoints here you'll notice that these are get you see this get in this post here well that indicates the HTTP method of your request if you're not familiar with what these are just know that when you're sending off these web requests there is a type that you can specify you put get usually to represent requests to retrieve data whereas post is usually for submitting data so if we take a look at here well actually it tells you right here that this endpoint is going to be a post request and so that's what we're gonna set here and there is a property for that HTTP method we're gonna set this to post I think if I remember correctly yeah it's all caps like that so we've got all of this next up is the URL session stuff so we're gonna get a shared session and we're gonna create the data task from that where we pass in the request that we've created we've worked so hard to create this and we're gonna be able to specify a completion handler which is going to capture the response from the API and then we're going to take a look at what's inside the data so let's choose that and before we forget let's assign it to its own constant data task e equals because this is going to return a data task for us so let's pass in the request let's open up a closure for this completion handler by double clicking it and keep in mind all of these parameters are optional so there's data there's response and there's error so I'm going to do a quick check in here check for errors and say if error is nil meaning there was no error then I'm going to try to parse the data actually I'm gonna do one more thing and data is not nil so we do have some data in there they're gonna try to parse out the data and I'm gonna say let well first let's use JSON serialization to parse our data into a dictionary since we're using it up there already so JSON serialization dot JSON object with data so we're gonna grab the data in here we're going to pass it into there we're gonna specify reading options and we're gonna have to capture any errors that happen and it says any right here but the return type is going to be here's at a sample of the response it's basically going to be a dictionary and we're gonna be able to check this dictionary so we can see that all the keys are strings and the response could be boolean or string so we're gonna specify any so let's go ahead and use that JSON object for data I'm gonna force unwrap it because we've already checked I'm gonna choose mutable containers and I'm gonna say as string any you know try to do that let the dictionary equals that alright we're gonna have to wrap it in a do catch block response data all right so we're gonna try to just see what we get here so I'm going to set a breakpoint there and then we can go take a look at what we have all right I'm gonna do that all right moment of truth so this is how you specify your own request oh I always forget this one more thing fire off the data task data task dot resume so this is how we create our own request let's return there if there's an error all right so this is how we create our own request fire it off to the API and capture the response it's a lot more involved versus having an SDK and just simply calling a method and you know specifying a closure because we're you know doing all of this manually so let's take a look I'll tell you I am actually doing this for the first time I don't know what this API is gonna return because I just signed up for the free plan here the thing is you have to specify a credit card which I'm not that happy about but I understand because they're gonna start charging you after 50 right so I kind of get that so the anyways this is the first let me see this oh so we did get something back right so this is really cool error message okay so we don't have an error processing time exit code parsed results one element oh look at that the parsed text is Google isn't that so cool all right our job is done now you can work with any API remember though each API has its own specific documentation on how to work with that API if there's an API that you'd like me to do a specific demonstration of just simply leave a comment below and if you learned something in this video please please give it a thumbs up subscribe if you haven't already and make sure you turn on Bell notifications so you don't miss the next video thank you so much for watching and I'll see you in the next video
