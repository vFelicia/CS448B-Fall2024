With timestamps:

00:00 - hey code crew in this lesson we're going
00:02 - to do a real example of using core data
00:04 - inside xcode
00:05 - i'll go through two different scenarios
00:07 - number one how to start your xcode
00:09 - project with core data enabled
00:11 - and number two how to add core data
00:14 - functionality to an existing
00:16 - xcode project now even if you're only
00:18 - interested in number two
00:20 - i would still highly recommend that you
00:21 - watch through part one because in part
00:23 - one
00:24 - i'm going to be highlighting the
00:25 - different core data components that are
00:27 - needed
00:28 - now just a quick recap of the previous
00:30 - lesson in case you didn't see it
00:32 - to work with core data we need four
00:33 - things number one is to
00:36 - define our entities and attributes in
00:38 - the core data model
00:39 - number two is to generate the classes
00:41 - from the core data model
00:43 - number three get a reference to the core
00:45 - data persistent container
00:47 - and then number four get the managed
00:49 - object context
00:50 - through which we save and retrieve our
00:52 - objects
00:53 - all right let's jump into xcode and do
00:55 - this all right first we're going to talk
00:57 - about
00:58 - setting up core data with a brand new
00:59 - xcode project and then
01:01 - afterwards we're going to talk about how
01:02 - to add core data to an existing xcode
01:05 - project
01:05 - so here i'm going to set up a brand new
01:07 - xcode project here
01:09 - and i'm going to choose single view
01:11 - application and all you need to do
01:14 - to set up core data is to make sure this
01:17 - checkbox is enabled
01:19 - so let's call this our core data demo
01:23 - and just make sure that's enabled and
01:26 - let's hit next oh by the way i am still
01:29 - using
01:30 - storyboards ui kit here so if you're
01:33 - following this demo you can select the
01:34 - same thing
01:36 - let's click next and i'm going to save
01:38 - this on my desktop
01:40 - now the first thing you'll notice is
01:42 - that enabling that
01:43 - use core data option gave you this file
01:47 - along with your new project this xc data
01:50 - model
01:51 - file and when you click that you get
01:53 - this visual editor to define your
01:55 - entities and attributes
01:56 - if you remember from the slide we just
01:58 - saw the first step
02:00 - is to define our entities and attributes
02:02 - so let's go ahead and do that through
02:03 - this visual interface
02:05 - down here click add entity and you're
02:07 - going to see
02:08 - your new entity here now you can either
02:11 - edit the name by
02:12 - clicking it once so you make it editable
02:15 - or you can come in here
02:16 - and just change the name of the entity
02:19 - so i'm going to use the same example
02:20 - as we did in lesson one of this core
02:22 - data series which is
02:24 - to use the person and family analogy
02:26 - we're only going to start with person
02:28 - for now later when we talk about
02:30 - relationships in core data then we're
02:32 - going to
02:33 - define our family entity as well all
02:36 - right so before we move on to attributes
02:38 - there are a couple of things i want to
02:40 - point out in terms of the attributes for
02:42 - the entity
02:43 - number one is the name which we've just
02:45 - defined number two
02:47 - is this this module or namespace
02:50 - if you have an xcode project which
02:52 - houses multiple modules or xcode
02:55 - or other projects i mean then you can
02:57 - define
02:58 - which namespace you want this entity to
03:01 - be a part of
03:02 - by default it's global so for
03:05 - i think for most of us who are just
03:07 - creating an xcode project for a single
03:08 - app
03:09 - that has one module you don't have to
03:11 - worry about this
03:12 - but just in case your project has
03:15 - multiple modules
03:16 - and you don't want this person class
03:17 - name to clash with some
03:20 - other person class name in another
03:21 - module then you can definitely define
03:24 - uh the name space here or rather which
03:26 - namespace
03:27 - this person is part of the next part is
03:30 - code codegen now after we define our
03:34 - entities
03:34 - and attributes when we generate the
03:36 - classes
03:37 - you can actually do that either manually
03:39 - or have xcode do that for you when you
03:42 - build and run the app
03:43 - by default xcode will do it for you
03:46 - automatically
03:46 - but for now i want you to change this
03:48 - option to manual
03:50 - none because i want to show you how to
03:51 - do it manually and then i will also
03:53 - tell you about the other two options
03:55 - because there are trade-offs to be made
03:58 - so let's go ahead and select manual none
04:00 - for now all right now we're ready to add
04:02 - our attributes
04:03 - so under here you can click this plus
04:05 - symbol to add a
04:07 - new attribute or you can click this
04:10 - add attribute icon down here which i
04:12 - think is not as intuitive
04:13 - as this guy so go ahead and click add
04:16 - item
04:16 - and then you can give it a name so our
04:19 - first one was
04:20 - just name so let's just name it that and
04:23 - then the type
04:24 - let's choose string so we're going to
04:26 - add another one
04:29 - we had gender here and again this was a
04:31 - string
04:32 - now the next one was age
04:35 - and the type was actually an int
04:39 - now you'll see in the type here there's
04:42 - integer 16 32
04:44 - and 64. if you're not familiar with what
04:47 - those are
04:48 - basically they define the size of the
04:51 - integer
04:52 - now i'm going to pull up a web page here
04:55 - that
04:56 - shows you the differences with the
04:58 - different uh
04:59 - integer types so you'll notice that
05:01 - there's different types of
05:02 - ins there's 8 32 64. and you can see
05:05 - that the ranges
05:06 - go up as this number goes up
05:09 - and there's also a u int version of each
05:12 - of these sizes
05:13 - u stands for unsigned which means that
05:16 - there's no
05:17 - negative range so as you can see in 64
05:20 - gives you the largest range
05:22 - but we don't usually have to select
05:24 - which type of in we use right
05:27 - when you define in swift of a new
05:29 - variable of the
05:30 - int type you don't have to specify any
05:33 - of these
05:33 - well under the hood that int type that
05:36 - you specified
05:37 - is one of these types and it really
05:39 - depends on
05:40 - what platform your code is running on
05:43 - because different cpu architectures
05:46 - store data differently some are 32-bit
05:48 - some are 64-bit and some as you can see
05:50 - might be 8 or 16.
05:52 - there's this website here that i found
05:55 - specifying the different architectures
05:57 - of the ios platforms and
06:00 - you can see in here sort of what
06:04 - cpu architecture it's using and whether
06:06 - it's 32-bit or not
06:08 - and as you can see as we scroll down
06:09 - this list these are the older iphones
06:12 - and ipods and ipads and as you scroll
06:14 - down to the newer ones
06:15 - at this point you know in
06:19 - 2015 it looks like everything starts to
06:22 - be 64-bit
06:24 - so as you can see here down to you know
06:27 - the latest ones down here
06:28 - it's all 64-bit so it's safe to say when
06:31 - you're declaring a swift int
06:33 - and your app is going to be running on
06:35 - one of the newer devices
06:37 - 2015 and above that it's going to be
06:39 - 64-bit architecture
06:41 - so your int is actually an int 64
06:44 - with this range so going back to the
06:46 - core data now
06:48 - what should you specify here well don't
06:50 - get the wrong idea
06:51 - just because for the age you won't need
06:53 - such a big range
06:55 - thinking specifying n16 might save you
06:58 - some memory or save you some space it
07:00 - doesn't work like that
07:01 - the memory allocated for that h variable
07:03 - will still be 64-bit so you might as
07:06 - well
07:06 - just choose 64-bit so that's kind of
07:09 - a long explanation about those
07:12 - about what those differences are now you
07:15 - might also notice on this list
07:16 - that we don't have array types
07:20 - or you know object types or anything
07:23 - like that
07:24 - well if you wanted to specify let's say
07:26 - an array of
07:28 - let's say for name for example and we
07:31 - wanted to specify an array of names
07:33 - instead you choose transformable and
07:36 - then
07:37 - over here on the right hand side for the
07:39 - name attribute
07:41 - you can set a custom class and we can
07:44 - set this to be a type of
07:45 - string array or if it's maybe
07:49 - referencing another custom class that
07:51 - you have you can
07:53 - put the class name there and when this
07:56 - entity gets generated this
08:00 - name attribute will be transformed into
08:03 - a name
08:03 - property of that type so i'm just going
08:06 - to set it back to string for now
08:09 - so if you want to learn more about
08:10 - configuring entities
08:12 - there is apple documentation for that
08:15 - talking about the different attributes
08:16 - and the different things you can
08:18 - specify i'll link this page in the
08:20 - description below the video
08:22 - now i want to talk about generating code
08:25 - from this entity
08:26 - generating the classes i mean now
08:28 - earlier i mentioned that there are a
08:30 - couple ways to do it
08:31 - manual class definition and category
08:34 - extension
08:35 - let's start by manually generating this
08:38 - so go ahead to editor click create
08:41 - ns manage object subclass make sure that
08:44 - there's a check mark beside your data
08:46 - model
08:46 - and a check mark beside your entity
08:48 - click next and you can just save it
08:50 - anywhere
08:51 - it's going to create two files here and
08:53 - typically what i'll do is create
08:55 - a model group and move that in there so
08:59 - things are a little more organized
09:01 - so you'll notice that there are two
09:02 - files for your one entity
09:05 - and it's person plus coordinated class
09:07 - and person plus core data properties
09:09 - let's start with this one now this one
09:11 - is the class declaration
09:13 - for person or your entity you know and
09:17 - it's subclassing ns managed object which
09:20 - i told you before that your entity or
09:22 - your class
09:23 - needs to do in order to be saved and
09:25 - retrieved and basically work with core
09:27 - data
09:28 - now the second file is an extension of
09:31 - your class
09:32 - so if that's new to you just think of
09:34 - these two files combined together is
09:36 - your complete person
09:38 - class this extension
09:41 - contains all of your attributes
09:44 - as properties and you can see the data
09:46 - types are exactly what we specified
09:49 - notice that there's also this type
09:51 - method here called fetch request
09:53 - so later on we're going to be able to
09:55 - generate
09:56 - a query or a fetch request simply by
09:59 - typing
10:00 - person the class name dot fetch request
10:03 - but we'll get into that part later for
10:05 - now the key thing i want to mention
10:07 - is why this is split into two classes
10:10 - the reason is because for this class
10:13 - definition or declaration here
10:16 - this is where you want to put all of
10:17 - your custom code if there are custom
10:19 - methods you want to put into this class
10:21 - this is where you would do it this one
10:25 - i would try not to modify because when
10:27 - you regenerate these classes
10:30 - maybe you've made a change to your model
10:32 - and you regenerate these classes
10:33 - whatever changes you've done here are
10:35 - going to be overwritten
10:37 - so speaking of which whenever you make a
10:41 - change
10:42 - to any of the attribute names or the
10:44 - types or maybe you add a new attribute
10:46 - or something like that you're going to
10:48 - want to regenerate those classes
10:50 - so then you can go ahead and delete your
10:53 - classes
10:53 - if you've if you've made changes here
10:56 - definitely don't delete this file only
10:58 - the only delete this one right here
11:00 - right because this is the one that just
11:02 - defines all of your
11:04 - properties but
11:07 - this is what manually generating your
11:09 - classes entails
11:11 - you're going to have to manually make
11:13 - sure that
11:14 - this extension this property extension
11:17 - here
11:19 - is up to date with what you've defined
11:21 - here now let's talk about
11:23 - having xcode automatically generate
11:25 - these classes for you
11:27 - so if we click on the entity and we go
11:30 - under code gen
11:31 - by default if you remember earlier
11:34 - by default it was set to class
11:36 - definition when it's set to this
11:38 - you don't have to manually generate the
11:40 - classes so you wouldn't have these
11:43 - these would you would basically delete
11:45 - these you wouldn't have you wouldn't
11:46 - have done this
11:47 - what happens instead is that when you
11:50 - build your xcode project
11:52 - those two files right there they
11:54 - automatically get generated
11:56 - for you behind the scenes you'll never
11:58 - see them that means you cannot edit them
12:00 - so a drawback with having xcode
12:03 - automatically
12:04 - do this for you is that if you wanted to
12:06 - put some
12:07 - like custom logic or custom methods in
12:10 - your person class you can't because you
12:11 - won't have these two files to modify
12:15 - but the advantage is that you don't have
12:17 - to manually
12:18 - make sure that these this file is up to
12:21 - date
12:22 - with whatever you've defined here
12:24 - because every time you build your xcode
12:25 - project
12:26 - those two classes will get regenerated
12:28 - behind the scenes
12:30 - so what we've done here is we've
12:32 - manually generated these
12:34 - and i have the entity set to
12:36 - automatically generate it on build
12:39 - what's going to happen if i build the
12:40 - project now well
12:42 - i'm going to get an error because what's
12:45 - happening
12:45 - is when i hit build on xcode it's trying
12:49 - to generate
12:50 - those two files for the entity because
12:52 - i've set it to that
12:54 - but it also recognizes that i have these
12:57 - two files here in my project so it's
12:59 - clashing if you look at the error
13:01 - it's going to say you know multiple
13:03 - commands produce that file
13:05 - so this is what you don't want in order
13:07 - to fix a problem like this
13:08 - you can simply go ahead and delete these
13:11 - move these to the trash if you want to
13:13 - ultimately have xcode automatically
13:15 - generate them to you
13:17 - for you i mean you move these two files
13:19 - to trash
13:20 - go to product and then clean build
13:22 - folder make sure you remove
13:24 - any artifacts and then you can rebuild
13:25 - your project
13:27 - or if you want x if you want to manually
13:30 - do it
13:31 - just set this to manual none but you
13:33 - cannot have a combination of
13:35 - having xcode automatically generated for
13:37 - you and
13:38 - have these existing in your xhoop
13:39 - project all right so now for the last
13:42 - codegen option which is category
13:44 - extension
13:45 - when you have it set to this xcode is
13:49 - only going to generate this
13:52 - extension file for you automatically
13:54 - which means you can go ahead
13:55 - and delete this now this is sort of like
13:58 - a happy medium
14:00 - you can just straight up move it to the
14:01 - trash
14:04 - um this is a happy medium because you
14:06 - still get this one file
14:07 - which you have to manually generate
14:09 - initially and then you go ahead and
14:10 - delete that category
14:12 - extension file but now you can add your
14:14 - custom logic in your custom
14:16 - methods and you don't have to make sure
14:19 - that
14:19 - the extension
14:22 - containing all of the properties is up
14:24 - to date with the model because
14:27 - having it set to a category extension
14:30 - for the code gen
14:31 - every time you build your xcode project
14:34 - it's going to
14:35 - generate that half of the class for you
14:39 - and right now i have an error probably
14:41 - because i didn't
14:42 - build my build sorry clean my build
14:45 - folder
14:46 - as you can see it's still complaining
14:48 - multiple commands produce
14:50 - so i'm going to go back to product clean
14:52 - build folder
14:54 - and i know that having this code
14:58 - gen set to category extension and having
15:01 - this other half here if i press command
15:03 - b i'm going to get the full
15:06 - definition of my entity so i guess to
15:09 - sum it up
15:13 - manual is full control right you have to
15:15 - generate two files
15:16 - but you have to just make sure that it's
15:20 - like congruent with what you've defined
15:22 - here
15:23 - class definition is no control you don't
15:26 - get to add
15:26 - you don't get to modify the classes at
15:28 - all it gets generated behind the scenes
15:30 - when you build the xcode project
15:31 - and category extension is it
15:33 - automatically generates
15:35 - half of it for you and the other half
15:37 - you can
15:38 - customize the code okay so now we've
15:40 - defined our entities and attributes
15:42 - we've generated the classes
15:44 - now we need a reference to the core data
15:45 - persistent store
15:47 - well when you created this xcode project
15:49 - and you enabled use core data
15:52 - in the app delegate it's actually set up
15:55 - something additional for you
15:56 - down here you can see that now we have
15:59 - this
16:00 - persistent container property
16:04 - and this lazy keyword just means that
16:06 - it's not going to
16:07 - run all this code and create that
16:10 - container
16:11 - until you access it for the first time
16:15 - but this is your core data persistent
16:17 - container and it's
16:18 - a property in your app delegate so
16:21 - that's how you're going to access this
16:22 - persistent container
16:24 - as you can see here this name here maps
16:28 - to this
16:29 - core data this data model file right
16:32 - here
16:33 - all right so because this property is in
16:36 - the app delegate
16:37 - we can access it from any view
16:39 - controller or any other class
16:41 - in our entire project all right now
16:43 - let's go into the view controller and
16:45 - let me show you how to access the
16:46 - persistent container from there
16:50 - so we need a reference to the persistent
16:52 - container you can
16:53 - access the app delegate first by typing
16:56 - ui
16:56 - application i don't know about this one
17:01 - but this is how i would normally do it
17:06 - uiapplication.shared.delegate
17:08 - and you can see that it's optional here
17:10 - but the type is ui application delegate
17:12 - but we got to cast it as
17:14 - our app delegate right and then
17:18 - now that it's our app delegate you can
17:21 - access
17:22 - the persistent container property right
17:25 - so this gives us access to that core
17:27 - data
17:28 - persistent container but if you remember
17:30 - from lesson one we don't interact with
17:32 - the core data persistent container
17:33 - directly
17:34 - we use the managed object context and in
17:37 - order to get a reference to that
17:39 - so that we can use the manage object
17:42 - context
17:43 - we just have to access a property on the
17:45 - persistent container
17:47 - called the view context you can see the
17:49 - data type for this is
17:50 - ns managed object context so this is
17:53 - actually what we need
17:54 - in order to store our data retrieve our
17:56 - data from
17:57 - core data and all of that but don't
18:00 - worry i'm getting a little ahead of
18:01 - myself
18:02 - because in the next lesson we're going
18:04 - to look at creating retrieving updating
18:06 - and deleting data
18:07 - through the managed object context for
18:09 - now i just wanted to show you how
18:11 - we can access the persistent container
18:14 - and also the managed object context
18:17 - now before we go into adding core data
18:19 - to an existing project i just want to
18:21 - show you one more thing
18:22 - in app delegate because aside from this
18:24 - persistent container property there was
18:26 - also another thing down
18:28 - here called it also added this save
18:31 - context method
18:32 - and as you can see all this method is
18:34 - helping you do
18:36 - is it's getting a reference to the
18:40 - managed object context and then
18:42 - detecting if there has been any changes
18:45 - to the data
18:46 - and then saving right so it's
18:49 - just an easy way for you to save changes
18:53 - to your persistent container so you can
18:56 - do it by simply calling the save context
18:58 - method
18:59 - of the app delegate okay so when you
19:02 - start a new xcode project and you enable
19:05 - core data right off the bat
19:06 - you get the core data model file
19:08 - included and in the app delegate you
19:11 - have methods to access the core data
19:13 - persistent container
19:14 - and manage the object context now if you
19:17 - have an existing xcode project that you
19:19 - want to convert to using core data you
19:21 - won't have these things currently in
19:23 - your xcode project
19:24 - now let me show you how to add them so
19:26 - that you can use core data
19:28 - all right so now let's say you have an
19:29 - existing project that you didn't set up
19:31 - with core data so i'm just going to
19:33 - create
19:34 - a test project here and i'm gonna
19:38 - i'm not gonna enable use core data
19:43 - let's create that there and so
19:47 - let's say this is your existing project
19:48 - well all you have to do
19:50 - number one is add that data model file
19:53 - so go ahead and add a new file
19:58 - and under core data choose data model
20:02 - right and you can save this with
20:05 - whatever your name of your project is so
20:08 - i guess i'll call this testproject.xc
20:11 - data model and here you know you have
20:13 - your entities you're going to define
20:14 - your
20:15 - entities and attributes as normal um
20:19 - also in appdelegate you'll notice that
20:21 - you do not have that persistent
20:23 - container property that i showed you and
20:25 - we don't have that save context method
20:27 - as well
20:28 - so you would just essentially add that
20:31 - code here
20:32 - but i don't really know that code by
20:35 - heart
20:36 - and i don't expect many people will so
20:39 - what i usually do
20:41 - is i create a brand new xcode project
20:44 - with core data enabled just to get that
20:46 - code and i'll copy and paste it in here
20:49 - so i can take that demo that we were
20:51 - just working on
20:53 - and i can copy this
20:57 - right that's the persistent container
21:02 - property but you have to make sure that
21:04 - this name right here
21:06 - matches that right so test
21:09 - project and that's the that's the
21:12 - core data data model file that you added
21:16 - and you also have to import core data at
21:18 - the top because
21:19 - otherwise the classes wouldn't be
21:21 - recognized
21:23 - right and then you can go back to your
21:24 - other project and just copy the saved
21:27 - context
21:27 - code over as well
21:32 - and it's as simple as that now the other
21:34 - thing is
21:35 - in an existing project you probably have
21:38 - your own
21:38 - model files already or your own model
21:41 - classes i mean
21:43 - you would have to redefine them as
21:45 - entities here
21:46 - along with their attributes and all of
21:48 - the relationships which
21:50 - a couple lessons later we'll talk about
21:52 - but you'd have to redefine all of those
21:54 - things
21:54 - and then regenerate the classes to
21:57 - replace
21:58 - your current model classes and then you
22:01 - would also have to alter the way
22:04 - that you get the data and in the next
22:06 - lesson you'll learn how to create
22:07 - retrieve update and delete data
22:09 - from core data so you're going to have
22:11 - to modify your existing project a little
22:13 - bit
22:13 - so that it uses that managed object
22:16 - context
22:17 - to fetch the data save the data and all
22:20 - of that stuff
22:21 - all right so in this lesson you learned
22:23 - how to set up your xcode project to use
22:24 - core data
22:26 - now i want to turn over to you have you
22:28 - used any other database
22:29 - solution before aside from core data let
22:31 - me know by leaving a quick comment below
22:33 - and lastly if you learned something new
22:35 - in this video please give it a thumbs up
22:37 - it's going to help youtube give this
22:38 - video more exposure and i highly
22:40 - appreciate it so thank you so much
22:42 - in the next lesson you'll learn how to
22:43 - create retrieve update and delete data
22:45 - from core data so i'll see you there
22:48 - number three is get a reference to our
22:50 - core data persistence
22:52 - container let me try that last again
22:54 - last sentence again
22:56 - no what the
23:02 - oh man this is dying on me let me see
23:08 - [Music]
23:16 - [Music]
23:17 - oh damn it okay

Cleaned transcript:

hey code crew in this lesson we're going to do a real example of using core data inside xcode i'll go through two different scenarios number one how to start your xcode project with core data enabled and number two how to add core data functionality to an existing xcode project now even if you're only interested in number two i would still highly recommend that you watch through part one because in part one i'm going to be highlighting the different core data components that are needed now just a quick recap of the previous lesson in case you didn't see it to work with core data we need four things number one is to define our entities and attributes in the core data model number two is to generate the classes from the core data model number three get a reference to the core data persistent container and then number four get the managed object context through which we save and retrieve our objects all right let's jump into xcode and do this all right first we're going to talk about setting up core data with a brand new xcode project and then afterwards we're going to talk about how to add core data to an existing xcode project so here i'm going to set up a brand new xcode project here and i'm going to choose single view application and all you need to do to set up core data is to make sure this checkbox is enabled so let's call this our core data demo and just make sure that's enabled and let's hit next oh by the way i am still using storyboards ui kit here so if you're following this demo you can select the same thing let's click next and i'm going to save this on my desktop now the first thing you'll notice is that enabling that use core data option gave you this file along with your new project this xc data model file and when you click that you get this visual editor to define your entities and attributes if you remember from the slide we just saw the first step is to define our entities and attributes so let's go ahead and do that through this visual interface down here click add entity and you're going to see your new entity here now you can either edit the name by clicking it once so you make it editable or you can come in here and just change the name of the entity so i'm going to use the same example as we did in lesson one of this core data series which is to use the person and family analogy we're only going to start with person for now later when we talk about relationships in core data then we're going to define our family entity as well all right so before we move on to attributes there are a couple of things i want to point out in terms of the attributes for the entity number one is the name which we've just defined number two is this this module or namespace if you have an xcode project which houses multiple modules or xcode or other projects i mean then you can define which namespace you want this entity to be a part of by default it's global so for i think for most of us who are just creating an xcode project for a single app that has one module you don't have to worry about this but just in case your project has multiple modules and you don't want this person class name to clash with some other person class name in another module then you can definitely define uh the name space here or rather which namespace this person is part of the next part is code codegen now after we define our entities and attributes when we generate the classes you can actually do that either manually or have xcode do that for you when you build and run the app by default xcode will do it for you automatically but for now i want you to change this option to manual none because i want to show you how to do it manually and then i will also tell you about the other two options because there are tradeoffs to be made so let's go ahead and select manual none for now all right now we're ready to add our attributes so under here you can click this plus symbol to add a new attribute or you can click this add attribute icon down here which i think is not as intuitive as this guy so go ahead and click add item and then you can give it a name so our first one was just name so let's just name it that and then the type let's choose string so we're going to add another one we had gender here and again this was a string now the next one was age and the type was actually an int now you'll see in the type here there's integer 16 32 and 64. if you're not familiar with what those are basically they define the size of the integer now i'm going to pull up a web page here that shows you the differences with the different uh integer types so you'll notice that there's different types of ins there's 8 32 64. and you can see that the ranges go up as this number goes up and there's also a u int version of each of these sizes u stands for unsigned which means that there's no negative range so as you can see in 64 gives you the largest range but we don't usually have to select which type of in we use right when you define in swift of a new variable of the int type you don't have to specify any of these well under the hood that int type that you specified is one of these types and it really depends on what platform your code is running on because different cpu architectures store data differently some are 32bit some are 64bit and some as you can see might be 8 or 16. there's this website here that i found specifying the different architectures of the ios platforms and you can see in here sort of what cpu architecture it's using and whether it's 32bit or not and as you can see as we scroll down this list these are the older iphones and ipods and ipads and as you scroll down to the newer ones at this point you know in 2015 it looks like everything starts to be 64bit so as you can see here down to you know the latest ones down here it's all 64bit so it's safe to say when you're declaring a swift int and your app is going to be running on one of the newer devices 2015 and above that it's going to be 64bit architecture so your int is actually an int 64 with this range so going back to the core data now what should you specify here well don't get the wrong idea just because for the age you won't need such a big range thinking specifying n16 might save you some memory or save you some space it doesn't work like that the memory allocated for that h variable will still be 64bit so you might as well just choose 64bit so that's kind of a long explanation about those about what those differences are now you might also notice on this list that we don't have array types or you know object types or anything like that well if you wanted to specify let's say an array of let's say for name for example and we wanted to specify an array of names instead you choose transformable and then over here on the right hand side for the name attribute you can set a custom class and we can set this to be a type of string array or if it's maybe referencing another custom class that you have you can put the class name there and when this entity gets generated this name attribute will be transformed into a name property of that type so i'm just going to set it back to string for now so if you want to learn more about configuring entities there is apple documentation for that talking about the different attributes and the different things you can specify i'll link this page in the description below the video now i want to talk about generating code from this entity generating the classes i mean now earlier i mentioned that there are a couple ways to do it manual class definition and category extension let's start by manually generating this so go ahead to editor click create ns manage object subclass make sure that there's a check mark beside your data model and a check mark beside your entity click next and you can just save it anywhere it's going to create two files here and typically what i'll do is create a model group and move that in there so things are a little more organized so you'll notice that there are two files for your one entity and it's person plus coordinated class and person plus core data properties let's start with this one now this one is the class declaration for person or your entity you know and it's subclassing ns managed object which i told you before that your entity or your class needs to do in order to be saved and retrieved and basically work with core data now the second file is an extension of your class so if that's new to you just think of these two files combined together is your complete person class this extension contains all of your attributes as properties and you can see the data types are exactly what we specified notice that there's also this type method here called fetch request so later on we're going to be able to generate a query or a fetch request simply by typing person the class name dot fetch request but we'll get into that part later for now the key thing i want to mention is why this is split into two classes the reason is because for this class definition or declaration here this is where you want to put all of your custom code if there are custom methods you want to put into this class this is where you would do it this one i would try not to modify because when you regenerate these classes maybe you've made a change to your model and you regenerate these classes whatever changes you've done here are going to be overwritten so speaking of which whenever you make a change to any of the attribute names or the types or maybe you add a new attribute or something like that you're going to want to regenerate those classes so then you can go ahead and delete your classes if you've if you've made changes here definitely don't delete this file only the only delete this one right here right because this is the one that just defines all of your properties but this is what manually generating your classes entails you're going to have to manually make sure that this extension this property extension here is up to date with what you've defined here now let's talk about having xcode automatically generate these classes for you so if we click on the entity and we go under code gen by default if you remember earlier by default it was set to class definition when it's set to this you don't have to manually generate the classes so you wouldn't have these these would you would basically delete these you wouldn't have you wouldn't have done this what happens instead is that when you build your xcode project those two files right there they automatically get generated for you behind the scenes you'll never see them that means you cannot edit them so a drawback with having xcode automatically do this for you is that if you wanted to put some like custom logic or custom methods in your person class you can't because you won't have these two files to modify but the advantage is that you don't have to manually make sure that these this file is up to date with whatever you've defined here because every time you build your xcode project those two classes will get regenerated behind the scenes so what we've done here is we've manually generated these and i have the entity set to automatically generate it on build what's going to happen if i build the project now well i'm going to get an error because what's happening is when i hit build on xcode it's trying to generate those two files for the entity because i've set it to that but it also recognizes that i have these two files here in my project so it's clashing if you look at the error it's going to say you know multiple commands produce that file so this is what you don't want in order to fix a problem like this you can simply go ahead and delete these move these to the trash if you want to ultimately have xcode automatically generate them to you for you i mean you move these two files to trash go to product and then clean build folder make sure you remove any artifacts and then you can rebuild your project or if you want x if you want to manually do it just set this to manual none but you cannot have a combination of having xcode automatically generated for you and have these existing in your xhoop project all right so now for the last codegen option which is category extension when you have it set to this xcode is only going to generate this extension file for you automatically which means you can go ahead and delete this now this is sort of like a happy medium you can just straight up move it to the trash um this is a happy medium because you still get this one file which you have to manually generate initially and then you go ahead and delete that category extension file but now you can add your custom logic in your custom methods and you don't have to make sure that the extension containing all of the properties is up to date with the model because having it set to a category extension for the code gen every time you build your xcode project it's going to generate that half of the class for you and right now i have an error probably because i didn't build my build sorry clean my build folder as you can see it's still complaining multiple commands produce so i'm going to go back to product clean build folder and i know that having this code gen set to category extension and having this other half here if i press command b i'm going to get the full definition of my entity so i guess to sum it up manual is full control right you have to generate two files but you have to just make sure that it's like congruent with what you've defined here class definition is no control you don't get to add you don't get to modify the classes at all it gets generated behind the scenes when you build the xcode project and category extension is it automatically generates half of it for you and the other half you can customize the code okay so now we've defined our entities and attributes we've generated the classes now we need a reference to the core data persistent store well when you created this xcode project and you enabled use core data in the app delegate it's actually set up something additional for you down here you can see that now we have this persistent container property and this lazy keyword just means that it's not going to run all this code and create that container until you access it for the first time but this is your core data persistent container and it's a property in your app delegate so that's how you're going to access this persistent container as you can see here this name here maps to this core data this data model file right here all right so because this property is in the app delegate we can access it from any view controller or any other class in our entire project all right now let's go into the view controller and let me show you how to access the persistent container from there so we need a reference to the persistent container you can access the app delegate first by typing ui application i don't know about this one but this is how i would normally do it uiapplication.shared.delegate and you can see that it's optional here but the type is ui application delegate but we got to cast it as our app delegate right and then now that it's our app delegate you can access the persistent container property right so this gives us access to that core data persistent container but if you remember from lesson one we don't interact with the core data persistent container directly we use the managed object context and in order to get a reference to that so that we can use the manage object context we just have to access a property on the persistent container called the view context you can see the data type for this is ns managed object context so this is actually what we need in order to store our data retrieve our data from core data and all of that but don't worry i'm getting a little ahead of myself because in the next lesson we're going to look at creating retrieving updating and deleting data through the managed object context for now i just wanted to show you how we can access the persistent container and also the managed object context now before we go into adding core data to an existing project i just want to show you one more thing in app delegate because aside from this persistent container property there was also another thing down here called it also added this save context method and as you can see all this method is helping you do is it's getting a reference to the managed object context and then detecting if there has been any changes to the data and then saving right so it's just an easy way for you to save changes to your persistent container so you can do it by simply calling the save context method of the app delegate okay so when you start a new xcode project and you enable core data right off the bat you get the core data model file included and in the app delegate you have methods to access the core data persistent container and manage the object context now if you have an existing xcode project that you want to convert to using core data you won't have these things currently in your xcode project now let me show you how to add them so that you can use core data all right so now let's say you have an existing project that you didn't set up with core data so i'm just going to create a test project here and i'm gonna i'm not gonna enable use core data let's create that there and so let's say this is your existing project well all you have to do number one is add that data model file so go ahead and add a new file and under core data choose data model right and you can save this with whatever your name of your project is so i guess i'll call this testproject.xc data model and here you know you have your entities you're going to define your entities and attributes as normal um also in appdelegate you'll notice that you do not have that persistent container property that i showed you and we don't have that save context method as well so you would just essentially add that code here but i don't really know that code by heart and i don't expect many people will so what i usually do is i create a brand new xcode project with core data enabled just to get that code and i'll copy and paste it in here so i can take that demo that we were just working on and i can copy this right that's the persistent container property but you have to make sure that this name right here matches that right so test project and that's the that's the core data data model file that you added and you also have to import core data at the top because otherwise the classes wouldn't be recognized right and then you can go back to your other project and just copy the saved context code over as well and it's as simple as that now the other thing is in an existing project you probably have your own model files already or your own model classes i mean you would have to redefine them as entities here along with their attributes and all of the relationships which a couple lessons later we'll talk about but you'd have to redefine all of those things and then regenerate the classes to replace your current model classes and then you would also have to alter the way that you get the data and in the next lesson you'll learn how to create retrieve update and delete data from core data so you're going to have to modify your existing project a little bit so that it uses that managed object context to fetch the data save the data and all of that stuff all right so in this lesson you learned how to set up your xcode project to use core data now i want to turn over to you have you used any other database solution before aside from core data let me know by leaving a quick comment below and lastly if you learned something new in this video please give it a thumbs up it's going to help youtube give this video more exposure and i highly appreciate it so thank you so much in the next lesson you'll learn how to create retrieve update and delete data from core data so i'll see you there number three is get a reference to our core data persistence container let me try that last again last sentence again no what the oh man this is dying on me let me see oh damn it okay
