With timestamps:

00:00 - Hey, everyone.
My name is Mikayla Karen.
00:02 - I am a fulltime iOS developer
and recently I've been learning Vapor.
00:05 - So I'm excited to share with you how we
have finished building our Vapor API
00:09 - and how we can take that and actually
deploy it to the real world so anybody can
00:14 - use it and how we can use it,
use it from our iOS app.
00:16 - Let's get started.
00:18 - First thing we need
to do is install Heroku.
00:21 - So we are going to use Homebrew
like we have for Vapor.
00:25 - So just type brew, install
00:28 - Heroku and then just hit enter.
00:31 - Mine is already installed.
00:33 - But every time you try to install
something new, it will try to update
00:36 - Homebrew if it hasn't
been updated in a while.
00:39 - So mine is fine.
00:41 - And then it's telling me a warning
that it's already installed and up to date
00:45 - and then just tells you, hey,
if you want to reinstall it,
00:47 - that's the command you write,
but we have that installed.
00:49 - So that's good.
00:51 - And second thing we need
to do is make a new account.
00:54 - So let's do that right now.
00:56 - So go to sign up Heroku.
00:58 - Com and we're just taken to the sign
up page and let's type in my name,
01:11 - type in your email.
01:13 - You don't really need a company name role.
01:17 - I'm a professional developer, so we'll
put that I don't think it really matters.
01:21 - And then primary country.
01:23 - I'm in the United States and primary
01:25 - development language is I use another
language because Swift sadly isn't here.
01:32 - So just check.
I'm not a robot unless you are.
01:37 - Yeah, I spelled everything right.
Okay.
01:40 - Click create free account.
01:43 - And now I need to go check
01:45 - that the address is correct
and you'll get an email about that.
01:49 - Okay.
So the email that you're going to get will
01:52 - just direct you to this link
to actually input a password.
01:56 - So type in whatever password you want,
01:58 - make sure it meets those minimums
and click set password and log in.
02:03 - Then we can close the other window here.
02:07 - Okay.
02:07 - It tells me my new account is all set up,
so we'll just click to proceed
02:13 - page not found.
Okay.
02:16 - I think it did this to me when
I tried it the first time too.
02:20 - So if we just go to Heroku.
02:23 - Com.
02:24 - Yeah, it looks like we're good
because it let me sign in.
02:27 - It has my name has my email
and we're fine.
02:31 - Okay.
Wants us to accept terms of service.
02:34 - I click accept, and then we're
brought to this main page.
02:40 - So what we are going to do,
02:42 - we are going to deploy our API to Heroku
and we do part of that using the GUI.
02:47 - So the graphical user interface.
02:48 - So that's just the website and then part
02:51 - of it we are going to do from the command
line for our project here.
02:55 - So the first thing we are going to do,
02:57 - let's set up our command line what we want
to do after we've installed it correctly I
03:02 - click command K all the time,
and that's what clears the terminal.
03:06 - We want to type Heroku login,
03:10 - and what this will do.
03:11 - We'll press any key to open up
the browser or login or queue to exit.
03:15 - So I'll just press the space bar
03:18 - and then we see it automatically opens
03:20 - my browser and tells me,
hey, do you want to log in?
03:23 - So I'll just click on log in.
03:26 - We will do that later.
03:28 - We don't need that right now
03:31 - and it says We're good.
03:32 - So it says we can close this page
and return back to your CLI.
03:36 - So CLI is command line interface if you
03:38 - didn't know, and that just
means your terminal.
03:41 - And then we see right here.
03:43 - This is it tried to open a web
browser in case it didn't work.
03:46 - Says logging in and done
because we did it.
03:48 - And then we are logged in as.
03:50 - And then that's my email.
03:52 - And you can verify this with Heroku
off colon, who am I?
03:58 - And then this stuff like here.
04:01 - This is like just part of a plugin
that I have on my computer.
04:04 - So you pretty much won't see that unless
you have this exact same plugin.
04:09 - Click Heroku off.
Who am I?
04:10 - We just see my email come up because
04:12 - that's just the email
that we're signed in as.
04:15 - Let's create our app within
Heroku on the web now.
04:18 - So let's just click on this button here
04:21 - that says Create new app, or you could
click from here for Create new app.
04:25 - But this is already here
because it's the welcome page.
04:28 - So what do we want to call this
04:37 - must start with a lowercase.
04:38 - That's interesting.
04:41 - So that popped up because I have CWC
04:43 - automatically as like a keyboard shortcut
to show like code with Chris because I
04:47 - type it so often, but we'll just
keep it like this CWC vaporapi.
04:52 - I'm in the United States and then we'll
04:54 - just click on Create app
and then this is the main page.
04:59 - So part of this, we won't use
a pipeline for this right now.
05:02 - And then the deployment method.
05:04 - We're just going to use the Heroku get CLI
05:08 - and then here it gives us
the instructions deploy using Heroku Git.
05:16 - We have done this step already.
05:18 - And right now here we are.
05:20 - We are in our project directory.
05:22 - So that's why it says ytvaporapi on mine.
05:26 - And that's also part of a plugin
that I have downloaded,
05:30 - and it wants us to CD into our
project and type get in it.
05:35 - But we don't need to do
that because our project is already
05:40 - uses Git.
05:41 - So the only thing we need to do is
actually copy this,
05:45 - which says Heroku, which is part of the
Heroku command from what we downloaded.
05:49 - And then we're using Git.
05:50 - We're adding a remote and it's going to be
05:53 - called CWC vaporapi, which is what
we called our entire application.
06:00 - So we just copy that and paste it here.
06:02 - We hit enter and it shows us set
get remote Heroku to that link.
06:07 - And what that really means
is we added a new remote.
06:10 - So if we type get remote V,
I have two remotes here.
06:15 - So here is the origin
remote that I called it.
06:17 - And then this is the one on GitHub
where you can find all of the code.
06:21 - But then we added a new remote called it
Heroku, and then this is the link for it.
06:28 - So before we deploy this application,
06:31 - we want to set what is called a build
pack before we go and deploy it.
06:35 - So a build pack is really just a script
that runs before the app is deployed.
06:40 - So what we want to do is
type Heroku business.
06:44 - Build pack.
06:45 - Set Vapor Vapor because this
is a vapor application.
06:48 - So we want everything that comes
06:50 - with the dependencies of vapor to install
before everything is deployed.
06:54 - So we just type this command hit enter.
06:58 - Okay, after we hit enter,
we can see it says Build pack is set.
07:02 - Next release for our app,
we'll use Vapor Vapor and then run this
07:08 - to push the new release
using this build pack.
07:11 - So that is the command we're
going to end up using.
07:13 - And you can see it's just Git push Heroku
main, which is the same as if you're
07:18 - pushing to GitHub or you would write like
Origin Main or Origin feature branch.
07:22 - It's the exact same thing.
07:24 - But we do have a couple of things
we need to set up first.
07:27 - So first we need to tell it what
Swift version we want to use.
07:31 - So we can do that with this command
07:34 - of Echo five, two, one,
and then this little carrot.
07:39 - It's a karate van sign Swiftversion.
07:42 - So what this will do?
07:44 - It will make a new file
called Swift version.
07:46 - And inside of that file, it will just
have these words five, two, one.
07:52 - So if we hit enter on that,
you see this little lightning Bolt come up
07:55 - on mine because of the
extension that I have.
07:57 - And it just means that we've
changed something.
08:00 - So when you type get status and hit enter,
08:02 - you can see that we've added
a new file called Swift version.
08:09 - I don't actually know what Cat stands for.
08:10 - Honestly, I'd have to look it up.
08:12 - But what we do here is this is just
printing out the contents of this file.
08:18 - So when I type Cat Swift version,
08:20 - we just see that it's a file
and the Swiftversion is five two, one.
08:24 - That's all it is.
That's what's inside of that file itself.
08:28 - So we have that.
But we have to add one more thing.
08:31 - So Heroku uses a thing called a Proc file,
08:35 - and it just tells the app
what it needs to look for.
08:38 - So we write that with this command.
08:41 - So Echo again, and then all of this
08:46 - comes with it, and it's just telling it
where to put the file and what Port.
08:50 - And then it's creating.
08:53 - All of this will be inside of a new
file just called Proc file.
08:59 - So if we hit enter, it does that.
09:01 - And then if we type get status,
we can see our two new files that we have.
09:06 - So we want to commit these files because
09:09 - they have to be there when
we deploy everything.
09:11 - So let's type get add
and that will add our two files.
09:15 - So if we hit enter
and type get status again,
09:19 - we can see it changed from untracked
files to changes to be committed.
09:24 - And let's go ahead and commit these.
09:26 - So we'll just type get commit
09:29 - M and we'll make a message
at Heroku build files,
09:37 - and now we can go ahead and deploy it.
09:40 - So we will type get
09:44 - push.
09:45 - Heroku and I have not tested this.
09:50 - So we will see typically you'll type get
09:52 - push, Heroku, Master or Main because
that's the main branch that you have,
09:57 - and you'll typically only
have one branch within your
10:02 - not one branch within your project.
10:03 - But you may have one branch that you're
10:05 - using for deployment,
so you would use that one.
10:07 - But because I've split everything up
in lessons, I'm going to type lesson five
10:13 - because that's the one that's
ready for us to actually deploy.
10:17 - And let's see how this goes
because I do not know.
10:22 - Okay, there we go.
10:23 - It worked.
10:25 - It created a new branch
called lesson five.
10:28 - Let's see if we look at Heroku
and refresh this page.
10:33 - Did anything happen?
10:41 - It has not.
10:46 - Okay.
10:47 - Looking at the docs
to actually deploy code.
10:50 - It does say that the branch
name has to be Master or Main.
10:54 - Otherwise, if we push to a different
branch, it really will not matter at all.
11:00 - So because I have this less than five
branch, it kind of doesn't matter.
11:03 - So let me make a new branch
11:07 - and I will call it Main,
and I'm branching from my lesson five
11:11 - branch, which has that new
commit with our new build files.
11:16 - So let me type get checkout
to check out the new branch.
11:21 - So now I have a new branch called Main
and I will type get push, not origin.
11:26 - We're going to go to Heroku and then Main.
11:30 - Once I hit enter, there we go.
11:33 - Okay.
Now it failed.
11:35 - Wouldn't it fail?
11:38 - So after some troubleshooting and then
11:40 - this is my testing repo where
I've done everything before.
11:45 - It was because
11:49 - the Swift version file that we
created needed to be 5.5.
11:53 - I don't actually remember changing it,
11:56 - but it has to be 5.5 instead of what we
Typed originally,
11:59 - which was 5.2 .1. So then once you
successfully deploy it and you have
12:05 - to deploy it on the main branch,
so it has to be either Main or Master.
12:09 - It can't be what I was doing,
12:10 - which was I called it lesson five because
that's how I broke up the whole course.
12:15 - So once I switched to the main branch
and then changed that to version 5.5
12:20 - rather than 5.2 .1 we're able to deploy
and you can see what's going
12:25 - on in terminal right now is
everything trying to deploy.
12:29 - So you can see over in the website.
12:34 - That was me troubleshooting.
12:35 - You can see build progress
12:38 - and whatever is happening here is actually
12:40 - the same thing that's
happening in our terminal.
12:43 - So we can wait for this to finish.
12:53 - Here we go.
More compiling,
12:59 - I'll solve Rubik's Cube
while we're waiting.
13:11 - I'm still not doing it
right. What am I missing?
13:24 - I forgot how to do this for a minute.
13:29 - Okay, we have successfully deployed
13:32 - everything so you can see all
the build files right there.
13:35 - Or you can see the View build blog right
13:37 - here which show you the same thing
that happened in the terminal.
13:41 - And then in the end it shows you it
13:43 - created a new branch called Main,
and then it's been deployed.
13:47 - And what we have to do after doing that,
13:49 - we need to add a server basically so that
our application can go somewhere.
13:56 - So we do that using Heroku Psscaleweb
equals one and you'll see this appear.
14:03 - So once we hit enter on this and it runs,
you will see this and it'll say done.
14:09 - So if we go back to the web interface
and we refresh it, we will see something.
14:15 - Now we see this that we had from our Proc
file, so I don't know exactly what this
14:21 - is, but it's needed to get
everything running.
14:25 - So we have that and we
can see we deployed.
14:27 - This is our commit hash.
14:29 - So if we were to type
get log one which only shows us one in our
14:35 - log, the beginning of this commit hash
matches what is right there.
14:42 - And that was my last commit
was updating that version.
14:47 - Now it is completely deployed.
14:49 - So we could use postman,
14:51 - which let me open that up and we
could then hit our API already.
14:56 - Everything's running,
but we haven't yet set up the database.
15:01 - So our app is fully deployed right now.
15:04 - So if we go to settings,
it tells us this is the name of our app.
15:09 - We are using Swift and
that's the get URL that we have.
15:16 - We scroll down a little bit more.
15:18 - We find this too much.
15:21 - We find this add domains so you could
15:24 - configure this to use your own
custom domain like codewithchris.
15:27 - Com.
If you wanted to make the API
15:29 - from a domain like that,
you would have to configure it.
15:32 - But here is our API
for the built in domain.
15:37 - So when we use CWC vaporapi,
15:39 - that is the name of our application
and then the subdomain is herokuapp.
15:44 - Com.
15:45 - So if we just put that
directly into postman
15:50 - and hit send without adding any kind
15:53 - of route, we get back 503 service
unavailable, which is not good.
16:02 - If we go to this in the web browser and
hit this, it gives us application error.
16:07 - So you can see this is application error
and it's telling us an error occurred.
16:12 - And that's how we view
the logs which we'll look at.
16:15 - But we also see when
we do this in postman.
16:18 - This is the HTML that came back
16:20 - for that web page because just
basic like going to a website.
16:24 - You are doing a get request.
16:25 - So if we see down here
we'll see the same thing.
16:29 - It's showing us whatever this web page is.
16:32 - And I guarantee if we command click,
we'll see the exact same thing.
16:38 - It takes us to the same error page
because here the URL is our project URL
16:45 - and it's showing you it's making an iframe
which is just like embedding a website.
16:49 - And what it's embedding is this
like application error website.
16:52 - So when we go directly to that,
we see the exact same thing.
16:56 - So let's see what the error is.
16:58 - Let's type Heroku logs,
17:03 - tail and hit enter.
17:05 - What does this tell us?
17:08 - So you can see it gives us an ongoing log,
as in it doesn't stop.
17:12 - So we would have to hit
CTRL C to get it to stop.
17:15 - But let me see if I can make this bigger.
17:18 - So it's kind of not all one.
17:22 - So if we try to go to our
application and hit enter,
17:26 - we see a new status appear
and it says App crashed.
17:30 - So part of what is happening when
we go to configure our application.
17:34 - So if we look at our configure code
17:38 - right here, it's trying to create
migrations and set up our database,
17:42 - but we haven't done anything in Heroku
to actually set that up yet.
17:46 - So that's part of why it's failing.
17:48 - I believe
17:50 - so we will do that the rest of that.
17:53 - And then we'll go back and try to see if
we can hit our main routes, which
17:58 - we didn't take out the Hello
and the root route these two.
18:03 - So that's what I was trying to hit
first was to return it works.
18:06 - And then let's try to hit Hello
and see if anything happens.
18:12 - So they still give us 503 unavailable.
18:15 - And then we can see
in the error down here.
18:18 - It tells us App crashed and you can see we
tried to hit the Hello route,
18:23 - so okay, let's set up the database
and then go back and try this again.
18:28 - So to get out of this, we type control C
18:31 - and then now we're no longer
live monitoring the logs.
18:35 - And I don't like this being gigantic.
18:37 - So we're going to make it smaller again.
18:42 - Let's go and add our database.
18:47 - What we want to do is go to the overview
tab and installed add ons where you're
18:52 - going to add a new one,
and we will search for Postgres
18:58 - because that's the type
of database we want to use.
19:00 - So we want to do Heroku Postgres.
19:02 - Click on that one and we want to use
19:05 - the Hobby Dev one,
which is free as opposed to paying a ton
19:09 - of money for it, because we don't
need any of that right now.
19:13 - So we have the Hobby version
and click submit order form
19:20 - and here we can see that it's been added.
19:24 - And I believe this is the command we could
have Typed into the command line to do
19:28 - this as well rather than
doing it from the website.
19:30 - But the website is pretty easy.
19:31 - So that's why I did it that way.
19:34 - So we have our database,
and we can click this Heroku Postgres
19:37 - right here, which opens up a new window,
and it takes us to a new part
19:42 - of the website that tells us
about the data and the database.
19:46 - So this is fetching everything,
19:48 - and we can see we don't have any rows in
our database because we just created it.
19:51 - So basically, it exists as a database.
19:54 - But we haven't added any of our
tables and any of our migrations.
19:59 - So when we go to migrations for create
20:01 - songs, here's our songs table,
and we haven't ran any of this yet.
20:06 - So what we need to do is
20:10 - go back here.
20:12 - We need to change our code because how it
20:15 - works right here,
it doesn't actually work it's.
20:17 - And if we go and look at the
20:20 - vapor documentation, which is
mostly what I'm following here.
20:24 - If you go to Docs Vapor codes and you
click on the side,
20:28 - there is this whole menu and you go
down to deploy and go to Heroku.
20:33 - You get to this page and we are way down
20:37 - at the bottom for Rocket have
almost everything running.
20:41 - It's telling us to
change the code to look something like
20:47 - this for getting our environment URL,
which is the database URL.
20:54 - Actually, I'll keep this
right here for a minute.
20:57 - When we are looking at this here we are
20:59 - getting our environment database host
and database username password because
21:04 - these are the values it's using Vapor
password and Vapor username
21:09 - because it could not find an environment
variable because we never added any.
21:14 - But we still need like
a URL and a database host.
21:18 - So like where does the database live?
21:20 - We have to tell our app that in some way.
21:23 - So what we are going to do is it's
going to look for a database URL.
21:28 - But again, this is not a value.
21:29 - We want to hard code and it even tells you
21:32 - if we type Heroku config,
it tells us how to access the database.
21:41 - They called their app.
21:42 - Today I learned ours is
called CWC vaporapi.
21:46 - It gives us this URL to use
to connect to the database.
21:49 - But here in the docs it tells you don't
ever hard code this because Heroku rotates
21:54 - through these URLs because it might change
because for whatever reason
21:59 - and because of that, we can't use
a hard coded value for anything.
22:03 - We are going to be using
a database configuration.
22:06 - So if we look at the Heroku app,
go down to settings,
22:13 - reveal config VARs.
22:15 - So we go to database VARs
and then config VARs.
22:18 - We can see the database URL
that Heroku is storing is right here.
22:23 - So this is the one that it will use.
22:24 - We need to tell our app now
to look for this value.
22:31 - Let's keep it on that and let's go
and change the code to do this.
22:38 - The next step it's telling us within
the docs is mostly what I'm following
22:42 - along with is to add the database URL
and make a postcard configuration
22:49 - with both of these.
22:50 - And I tried to type this code and it
does not work or did not work for me.
22:54 - So you can try to type this and deploy
again and see if that worked.
22:57 - But here is the code change that really
actually worked on my machine.
23:02 - So what we wanted to do was first
check if we have that database URL.
23:09 - So what we are doing here is first
23:19 - we are going to make a URL string
23:22 - from this database URL in the environment
variable, which will look
23:25 - for the environment variable
we saw over here in Settings,
23:31 - this config variable,
23:34 - and then we are going to make a Postgres
23:36 - configuration because that's
the type of database that we use.
23:40 - And then all of this will
be in this if statement.
23:42 - Otherwise we'll set it up like this
23:45 - which is how we've done it on our
local computer and everything worked.
23:49 - So we have our Postgres configuration,
23:51 - and we also need to make something
called a TLS configuration.
23:58 - So we have made our Postgres configuration
for our database,
24:02 - and we are going to configure
the database using this database URL.
24:07 - And then we make a TLS configuration
and let me double check that.
24:12 - That is right.
24:13 - Make client configuration.
Yeah.
24:16 - So we make the TLS configuration and it
24:19 - says make client config and we set
the TLS certificate verification to none.
24:24 - I honestly don't really know what this is.
24:26 - Tls is part of like the Internet.
24:28 - It's a I think transport layer.
24:31 - And then we set our Postgres config
to use our TLS configuration.
24:37 - And then lastly, we do app databases use,
which is almost exactly the same as this
24:43 - rather than hard coding
everything, though.
24:45 - We are using Postgres and we are using our
24:48 - Postgres configuration
to set everything up.
24:52 - And then this is just the name of our
database because you can have multiple
24:56 - databases within an application,
but we are only using one.
25:00 - So that's what setting
up right here is doing.
25:03 - And lastly,
we have this try auto migrate line right
25:09 - here because when we ran our application
for the first time,
25:13 - we wanted the migrations to run and for
the app to basically not work unless
25:19 - basically make the app not
work until the migrations ran.
25:22 - But that's not what we
want to do within Heroku.
25:25 - We want it to still run
and we only want to run these,
25:30 - like in development, and we can write
a command to run it within Heroku.
25:35 - So what we are going to do
is change this to be
25:41 - we are going to change this
to make an if statement.
25:43 - So if our app is in development mode or
development environment meaning on our
25:49 - computer, then we want
to run the migrations.
25:52 - Otherwise they won't run.
25:54 - And we are going to just run
it from the command line.
25:56 - So we've made all these changes.
25:58 - Let's commit these changes.
26:01 - So if we type get status,
26:04 - if I can spell which I can't,
26:08 - there we go get status.
26:09 - We see we changed our configure
method, which is correct.
26:20 - So I'm making a new message called
Update config for database.
26:24 - And when I do am, that allows me to add
26:27 - whatever here was ever ready to be
committed and write the message
26:33 - at the same time rather than just
writing get add and then get commit.
26:38 - So we have committed that.
26:40 - Let's go and push these changes to Heroku.
26:43 - So we Typed get push
26:46 - Heroku main and this will
deploy to Heroku again.
26:51 - So when I hit enter on that,
you can see it's starting to build again.
26:56 - If we go to Overview, we can see
what we've done here is we deployed.
27:01 - We created the new database,
27:03 - we set up the database URL,
and then that's just what it sort of does
27:08 - automatically when we made the database
and then right here because we tried
27:12 - to push you can see now it's going
and building the project again.
27:16 - So let's wait for that to build.
27:20 - After we built everything,
it has been fully deployed so we can see
27:24 - right here and then it's
deployed our new commit.
27:29 - And so if I click on this,
it'll take me to this Heroku data tab
27:32 - because I've already clicked on it
and we should be able to refresh it.
27:38 - And it doesn't look any different right
27:40 - now because we haven't ran our
migrations just yet either.
27:44 - So if we look at data clips,
27:46 - this allows us to create new queries
that we can run on our database from
27:52 - this interface, as opposed
to connecting to it from Data Grip.
28:05 - So if we try to do Select Star from songs,
28:08 - it won't work because the songs
table still doesn't exist yet,
28:16 - and we need to give up a title.
28:17 - And then if we click
Save and run, I think.
28:20 - Yeah, it tells us Songs doesn't exist.
28:23 - That's because we have now configured our
application to run and use our new
28:29 - database URL, but we still haven't
ran the migrations themselves.
28:34 - So to do that, we need to
28:38 - use this line Heroku run
migrate environment production.
28:44 - So Run is by default the name right
here of what it calls our application.
28:51 - Oh no, it's in the package.
28:53 - That's where it's at.
28:54 - So here app name is called App, and then
the target is called Run by default.
29:01 - So that's why it says Run run.
29:03 - So if we type this and hit enter,
this is going and running our migration.
29:09 - So I'm not sure if anything shows
up in this latest activity.
29:12 - I don't think it does.
29:19 - Yeah, nothing shows up there,
but we can see right here.
29:21 - Something is happening.
29:22 - It says we wanted to run our migrations
29:25 - on our new app, and then it asks us,
do we want to run this migration,
29:30 - which is app createsongs because right
here that's what we call the migration.
29:34 - So we say yes with a y hit enter and it
29:38 - tells us migration successful,
which is awesome.
29:41 - So now when we go to Data,
29:44 - which is again, we get to it by clicking
on Heroku Postgres or you could go
29:48 - to Resources and then
click on it right there.
29:52 - I just like the overview page.
29:54 - We get to this.
29:55 - And if we go here and try to run it again,
which I'm not sure why it always
30:02 - makes you click save and run
as opposed to just run.
30:05 - I don't know.
30:07 - I think you can just run it.
30:10 - I've always had to click Save and run.
30:12 - Yeah, because it just doesn't do it
again, which is weird.
30:17 - So click Save and run.
30:20 - We get back nothing because
not the database.
30:25 - The table itself exists,
30:27 - but there's no data in it yet
because we haven't added anything.
30:32 - Does that show us anything?
30:33 - No.
30:36 - So now if we go back to postman,
let's try to hit our base URL.
30:42 - Sowe can use again.
30:45 - This is the error that showed
us originally, which is Heroku
30:51 - logs tail.
30:54 - We can see the logs for what's happened.
30:56 - So we'll keep that up as well.
30:59 - While that is running.
31:02 - If we go to configure two routes,
we have our two routes of it works.
31:08 - And Hello.
31:09 - So let's try to hit the base route
that has nothing and we should get back.
31:12 - It works.
31:15 - Yay.
Okay, we got back.
31:17 - It works.
So we got 200.
31:19 - Okay, it says it works, which is awesome.
31:22 - And then we see here we got back the root
31:25 - path, which is also a get request,
and it's just a slash.
31:29 - And that's the request ID.
31:33 - That's the web one and that's it.
31:34 - So it didn't show us an error,
which is amazing.
31:38 - And if we try to go to Hello, we hit this,
31:44 - we get back Hello world, because
that's what we have Typed right here.
31:48 - Now the moment of truth.
31:50 - Let's go to our slashsongs endpoint.
31:55 - So we get back an empty array,
31:57 - which is good because we don't
have anything in our database yet.
32:02 - So that's exactly what we want back.
32:04 - And we got back at 200,
which is also a good thing.
32:06 - So I have this other tab for new songs,
and what we do is let me copy this JSON
32:14 - and go back to the tab
that has the actual URL in it.
32:17 - Let's add a new body.
32:19 - I already have it here and we have a song
32:21 - just called Money, and we change the body
from none to Raw and change it to JSON.
32:28 - And if we click send,
32:31 - it got back 200.
Okay.
32:32 - Which is good.
Oh, wait.
32:34 - I have to change this to post that's.
32:36 - Whysend post.
32:39 - There we go.
So we still got back to 200,
32:41 - which is a good thing if we go and change
this to a get request now and hit send,
32:47 - we should get back our
one row that says Money.
32:50 - So there we go.
We got that back.
32:52 - And that's the new song
that we just posted.
32:55 - So when we go to this
data clips tab again,
32:59 - I don't know why we have
to do save and run.
33:01 - I don't know where the button
is to actually just run.
33:03 - It like normal.
33:05 - I think there was a refresh somewhere,
but we click save and run
33:10 - and here we go.
33:11 - This is our table with the ID
33:13 - and the title, and we have our
one song called Money in here.
33:18 - So that is great.
33:20 - That's exactly what we want.
33:21 - So we know at least it is reading
data and we are sending data.
33:25 - So let's try to do an update.
33:28 - So if we do an update,
we need this ID number.
33:34 - No, we don't.
We just do a normal put request.
33:37 - That's what it is,
33:41 - right?
I don't remember.
33:43 - Let me look, I don't remember.
33:46 - We do a put request and we
decode the whole thing.
33:49 - Okay.
So we do need this whole object,
33:54 - so it would look like this,
but instead of money, we want to do
33:59 - how you like that?
34:03 - And we change it to put.
34:05 - And if we hit send,
34:08 - we got back 200.
Okay.
34:10 - Which is good.
34:11 - And is there a refresh button here?
34:14 - I could have sworn there was,
34:17 - but I can't find it.
34:19 - So I just had a semicolon
hit save and run.
34:24 - And there we go.
34:25 - Our one row in here says how you like
34:27 - that for the same ID number
as this one, which is good.
34:31 - So we were able to update
and let's add one more song to it.
34:35 - So let's just add a new song.
34:44 - We'll just add another song
called Lovesit Girls Hit Send.
34:48 - No, that's put.
Okay.
34:50 - So because I tried to do a post request or
34:53 - I meant to do a post request,
but I didn't change this.
34:56 - So it said put
34:58 - it just came back four or four
because it couldn't find one
35:03 - right here.
35:04 - It tried to look for that song right here
from the ID, but we didn't give it any.
35:09 - So it came back four or four.
So we know that's working.
35:11 - So that's good.
35:12 - So let's change this to a post
to add this new song.
35:16 - Messed up the brackets.
That's fine.
35:19 - Click send.
35:22 - We got back 200.
So that's good.
35:24 - And if we go to our data right here,
save and run, we should have two songs.
35:31 - And then let's check delete.
35:33 - So we want to delete
buythecingid, so we know the ID.
35:41 - Let's delete how you like that.
35:43 - So copy this whole ID,
35:46 - and technically, we don't need the body
here, but we could erase it or keep it.
35:50 - It kind of doesn't matter.
35:53 - We'll just keep it there.
35:54 - And then we do the ID number,
35:58 - the UID, and we change this
to a delete request and hit send.
36:04 - It gave back 200.
So that's good.
36:07 - So now let's look at it
and click save and run.
36:12 - And there we go.
36:13 - We only have the one property, so we
know all of our operations are working.
36:17 - So that is a good thing.
36:19 - Lastly, we need to use this
for our own application.
36:24 - And to do that, all we need to do is open
36:27 - our iOS app, click
Control C to close this.
36:31 - And I'm going to open the iOS app.
36:33 - So that was
36:39 - in the folder above.
36:40 - And then I put it right here.
36:42 - I still have it on lesson four.
36:43 - So I need to make a new branch.
36:56 - So let's open our project and Xcdspace
that would open an Xcode project if you
37:03 - have, like, an Xcode project file within
whatever directory that you're in.
37:08 - Okay.
So we have opened our iOS project.
37:11 - Let me close postman because we don't need
37:13 - it anymore because we've
confirmed everything works.
37:16 - And all we need to do for our iOS
app is go to the constants file.
37:21 - And instead of using our in grok URL, we
want to use the one for our application.
37:28 - So let's go to the Heroku app,
click on Settings
37:35 - and scroll down to domains.
37:39 - We want to copy this URL
37:46 - and paste that right here and make sure
you still have one slash at the end.
37:52 - So if we do that and let's change this
from my cell phone to the simulator
37:59 - and click on Run.
38:00 - The first thing we should see is the one
song that we have called Love Six Girls.
38:06 - So let's refresh this or run it.
38:08 - So Commandr
38:11 - and wait for my simulator to come up.
38:14 - And once our project runs,
38:17 - we see our songs Love Sick Girls
that's here, which is amazing.
38:23 - That means we successfully read from our
database that's hosted with Heroku.
38:29 - So let's edit this and change it to
Pretty Savage and click on Update.
38:38 - We see our song appears properly here,
38:40 - but we can double check by looking at
the database within Heroku Save and run,
38:47 - and now it says Pretty Savage.
38:49 - So let's go and add a new song.
38:52 - So we've tested read.
38:53 - We've tested update,
let's create a new one.
38:57 - Click on Add song.
39:01 - There's a song called Whistle, so let's
just type that click on Add song.
39:06 - We see both of them here and double check
39:09 - again with our database
in Heroku Save and Run
39:14 - and there we go.
39:15 - We have those two songs
and let's then delete one.
39:19 - So delete, pretty Savage delete.
39:21 - We only have our one song here,
39:23 - and if we refresh our database
on this side, there we go.
39:28 - We only have one song left.
39:30 - And that is it.
39:33 - We have fully deployed our Vapor API
with Heroku and our Postgres database.
39:38 - Then we used that instance
within our Swift UI iOS app.
39:42 - So during this lesson,
we created a new Heroku account.
39:45 - We installed Heroku Via homeboro on our
39:49 - computer and we configured it within
the terminal to use our new account.
39:53 - We created a new Heroku app within
the website and then configured that app.
39:58 - And lastly, we set up our database to use
a Heroku Postgres database,
40:04 - and we ran the migrations so that our app
had our brand new table that we made.
40:09 - And finally we configured our Swift UI app
40:12 - to use our brand new Heroku
instance running up in the cloud.
40:16 - So if you like this video series on paper,
be sure to like and subscribe and let me
40:20 - know how I did on my very
first YouTube tutorial series,
40:25 - and we can confirm that this works
40:27 - by going down to Azure Data Studio
and just running our query again.
40:35 - Of course it didn't work.
40:36 - Now I have to disconnect.
40:37 - So please hold.
40:40 - Come on back.
While that is billing.

Cleaned transcript:

Hey, everyone. My name is Mikayla Karen. I am a fulltime iOS developer and recently I've been learning Vapor. So I'm excited to share with you how we have finished building our Vapor API and how we can take that and actually deploy it to the real world so anybody can use it and how we can use it, use it from our iOS app. Let's get started. First thing we need to do is install Heroku. So we are going to use Homebrew like we have for Vapor. So just type brew, install Heroku and then just hit enter. Mine is already installed. But every time you try to install something new, it will try to update Homebrew if it hasn't been updated in a while. So mine is fine. And then it's telling me a warning that it's already installed and up to date and then just tells you, hey, if you want to reinstall it, that's the command you write, but we have that installed. So that's good. And second thing we need to do is make a new account. So let's do that right now. So go to sign up Heroku. Com and we're just taken to the sign up page and let's type in my name, type in your email. You don't really need a company name role. I'm a professional developer, so we'll put that I don't think it really matters. And then primary country. I'm in the United States and primary development language is I use another language because Swift sadly isn't here. So just check. I'm not a robot unless you are. Yeah, I spelled everything right. Okay. Click create free account. And now I need to go check that the address is correct and you'll get an email about that. Okay. So the email that you're going to get will just direct you to this link to actually input a password. So type in whatever password you want, make sure it meets those minimums and click set password and log in. Then we can close the other window here. Okay. It tells me my new account is all set up, so we'll just click to proceed page not found. Okay. I think it did this to me when I tried it the first time too. So if we just go to Heroku. Com. Yeah, it looks like we're good because it let me sign in. It has my name has my email and we're fine. Okay. Wants us to accept terms of service. I click accept, and then we're brought to this main page. So what we are going to do, we are going to deploy our API to Heroku and we do part of that using the GUI. So the graphical user interface. So that's just the website and then part of it we are going to do from the command line for our project here. So the first thing we are going to do, let's set up our command line what we want to do after we've installed it correctly I click command K all the time, and that's what clears the terminal. We want to type Heroku login, and what this will do. We'll press any key to open up the browser or login or queue to exit. So I'll just press the space bar and then we see it automatically opens my browser and tells me, hey, do you want to log in? So I'll just click on log in. We will do that later. We don't need that right now and it says We're good. So it says we can close this page and return back to your CLI. So CLI is command line interface if you didn't know, and that just means your terminal. And then we see right here. This is it tried to open a web browser in case it didn't work. Says logging in and done because we did it. And then we are logged in as. And then that's my email. And you can verify this with Heroku off colon, who am I? And then this stuff like here. This is like just part of a plugin that I have on my computer. So you pretty much won't see that unless you have this exact same plugin. Click Heroku off. Who am I? We just see my email come up because that's just the email that we're signed in as. Let's create our app within Heroku on the web now. So let's just click on this button here that says Create new app, or you could click from here for Create new app. But this is already here because it's the welcome page. So what do we want to call this must start with a lowercase. That's interesting. So that popped up because I have CWC automatically as like a keyboard shortcut to show like code with Chris because I type it so often, but we'll just keep it like this CWC vaporapi. I'm in the United States and then we'll just click on Create app and then this is the main page. So part of this, we won't use a pipeline for this right now. And then the deployment method. We're just going to use the Heroku get CLI and then here it gives us the instructions deploy using Heroku Git. We have done this step already. And right now here we are. We are in our project directory. So that's why it says ytvaporapi on mine. And that's also part of a plugin that I have downloaded, and it wants us to CD into our project and type get in it. But we don't need to do that because our project is already uses Git. So the only thing we need to do is actually copy this, which says Heroku, which is part of the Heroku command from what we downloaded. And then we're using Git. We're adding a remote and it's going to be called CWC vaporapi, which is what we called our entire application. So we just copy that and paste it here. We hit enter and it shows us set get remote Heroku to that link. And what that really means is we added a new remote. So if we type get remote V, I have two remotes here. So here is the origin remote that I called it. And then this is the one on GitHub where you can find all of the code. But then we added a new remote called it Heroku, and then this is the link for it. So before we deploy this application, we want to set what is called a build pack before we go and deploy it. So a build pack is really just a script that runs before the app is deployed. So what we want to do is type Heroku business. Build pack. Set Vapor Vapor because this is a vapor application. So we want everything that comes with the dependencies of vapor to install before everything is deployed. So we just type this command hit enter. Okay, after we hit enter, we can see it says Build pack is set. Next release for our app, we'll use Vapor Vapor and then run this to push the new release using this build pack. So that is the command we're going to end up using. And you can see it's just Git push Heroku main, which is the same as if you're pushing to GitHub or you would write like Origin Main or Origin feature branch. It's the exact same thing. But we do have a couple of things we need to set up first. So first we need to tell it what Swift version we want to use. So we can do that with this command of Echo five, two, one, and then this little carrot. It's a karate van sign Swiftversion. So what this will do? It will make a new file called Swift version. And inside of that file, it will just have these words five, two, one. So if we hit enter on that, you see this little lightning Bolt come up on mine because of the extension that I have. And it just means that we've changed something. So when you type get status and hit enter, you can see that we've added a new file called Swift version. I don't actually know what Cat stands for. Honestly, I'd have to look it up. But what we do here is this is just printing out the contents of this file. So when I type Cat Swift version, we just see that it's a file and the Swiftversion is five two, one. That's all it is. That's what's inside of that file itself. So we have that. But we have to add one more thing. So Heroku uses a thing called a Proc file, and it just tells the app what it needs to look for. So we write that with this command. So Echo again, and then all of this comes with it, and it's just telling it where to put the file and what Port. And then it's creating. All of this will be inside of a new file just called Proc file. So if we hit enter, it does that. And then if we type get status, we can see our two new files that we have. So we want to commit these files because they have to be there when we deploy everything. So let's type get add and that will add our two files. So if we hit enter and type get status again, we can see it changed from untracked files to changes to be committed. And let's go ahead and commit these. So we'll just type get commit M and we'll make a message at Heroku build files, and now we can go ahead and deploy it. So we will type get push. Heroku and I have not tested this. So we will see typically you'll type get push, Heroku, Master or Main because that's the main branch that you have, and you'll typically only have one branch within your not one branch within your project. But you may have one branch that you're using for deployment, so you would use that one. But because I've split everything up in lessons, I'm going to type lesson five because that's the one that's ready for us to actually deploy. And let's see how this goes because I do not know. Okay, there we go. It worked. It created a new branch called lesson five. Let's see if we look at Heroku and refresh this page. Did anything happen? It has not. Okay. Looking at the docs to actually deploy code. It does say that the branch name has to be Master or Main. Otherwise, if we push to a different branch, it really will not matter at all. So because I have this less than five branch, it kind of doesn't matter. So let me make a new branch and I will call it Main, and I'm branching from my lesson five branch, which has that new commit with our new build files. So let me type get checkout to check out the new branch. So now I have a new branch called Main and I will type get push, not origin. We're going to go to Heroku and then Main. Once I hit enter, there we go. Okay. Now it failed. Wouldn't it fail? So after some troubleshooting and then this is my testing repo where I've done everything before. It was because the Swift version file that we created needed to be 5.5. I don't actually remember changing it, but it has to be 5.5 instead of what we Typed originally, which was 5.2 .1. So then once you successfully deploy it and you have to deploy it on the main branch, so it has to be either Main or Master. It can't be what I was doing, which was I called it lesson five because that's how I broke up the whole course. So once I switched to the main branch and then changed that to version 5.5 rather than 5.2 .1 we're able to deploy and you can see what's going on in terminal right now is everything trying to deploy. So you can see over in the website. That was me troubleshooting. You can see build progress and whatever is happening here is actually the same thing that's happening in our terminal. So we can wait for this to finish. Here we go. More compiling, I'll solve Rubik's Cube while we're waiting. I'm still not doing it right. What am I missing? I forgot how to do this for a minute. Okay, we have successfully deployed everything so you can see all the build files right there. Or you can see the View build blog right here which show you the same thing that happened in the terminal. And then in the end it shows you it created a new branch called Main, and then it's been deployed. And what we have to do after doing that, we need to add a server basically so that our application can go somewhere. So we do that using Heroku Psscaleweb equals one and you'll see this appear. So once we hit enter on this and it runs, you will see this and it'll say done. So if we go back to the web interface and we refresh it, we will see something. Now we see this that we had from our Proc file, so I don't know exactly what this is, but it's needed to get everything running. So we have that and we can see we deployed. This is our commit hash. So if we were to type get log one which only shows us one in our log, the beginning of this commit hash matches what is right there. And that was my last commit was updating that version. Now it is completely deployed. So we could use postman, which let me open that up and we could then hit our API already. Everything's running, but we haven't yet set up the database. So our app is fully deployed right now. So if we go to settings, it tells us this is the name of our app. We are using Swift and that's the get URL that we have. We scroll down a little bit more. We find this too much. We find this add domains so you could configure this to use your own custom domain like codewithchris. Com. If you wanted to make the API from a domain like that, you would have to configure it. But here is our API for the built in domain. So when we use CWC vaporapi, that is the name of our application and then the subdomain is herokuapp. Com. So if we just put that directly into postman and hit send without adding any kind of route, we get back 503 service unavailable, which is not good. If we go to this in the web browser and hit this, it gives us application error. So you can see this is application error and it's telling us an error occurred. And that's how we view the logs which we'll look at. But we also see when we do this in postman. This is the HTML that came back for that web page because just basic like going to a website. You are doing a get request. So if we see down here we'll see the same thing. It's showing us whatever this web page is. And I guarantee if we command click, we'll see the exact same thing. It takes us to the same error page because here the URL is our project URL and it's showing you it's making an iframe which is just like embedding a website. And what it's embedding is this like application error website. So when we go directly to that, we see the exact same thing. So let's see what the error is. Let's type Heroku logs, tail and hit enter. What does this tell us? So you can see it gives us an ongoing log, as in it doesn't stop. So we would have to hit CTRL C to get it to stop. But let me see if I can make this bigger. So it's kind of not all one. So if we try to go to our application and hit enter, we see a new status appear and it says App crashed. So part of what is happening when we go to configure our application. So if we look at our configure code right here, it's trying to create migrations and set up our database, but we haven't done anything in Heroku to actually set that up yet. So that's part of why it's failing. I believe so we will do that the rest of that. And then we'll go back and try to see if we can hit our main routes, which we didn't take out the Hello and the root route these two. So that's what I was trying to hit first was to return it works. And then let's try to hit Hello and see if anything happens. So they still give us 503 unavailable. And then we can see in the error down here. It tells us App crashed and you can see we tried to hit the Hello route, so okay, let's set up the database and then go back and try this again. So to get out of this, we type control C and then now we're no longer live monitoring the logs. And I don't like this being gigantic. So we're going to make it smaller again. Let's go and add our database. What we want to do is go to the overview tab and installed add ons where you're going to add a new one, and we will search for Postgres because that's the type of database we want to use. So we want to do Heroku Postgres. Click on that one and we want to use the Hobby Dev one, which is free as opposed to paying a ton of money for it, because we don't need any of that right now. So we have the Hobby version and click submit order form and here we can see that it's been added. And I believe this is the command we could have Typed into the command line to do this as well rather than doing it from the website. But the website is pretty easy. So that's why I did it that way. So we have our database, and we can click this Heroku Postgres right here, which opens up a new window, and it takes us to a new part of the website that tells us about the data and the database. So this is fetching everything, and we can see we don't have any rows in our database because we just created it. So basically, it exists as a database. But we haven't added any of our tables and any of our migrations. So when we go to migrations for create songs, here's our songs table, and we haven't ran any of this yet. So what we need to do is go back here. We need to change our code because how it works right here, it doesn't actually work it's. And if we go and look at the vapor documentation, which is mostly what I'm following here. If you go to Docs Vapor codes and you click on the side, there is this whole menu and you go down to deploy and go to Heroku. You get to this page and we are way down at the bottom for Rocket have almost everything running. It's telling us to change the code to look something like this for getting our environment URL, which is the database URL. Actually, I'll keep this right here for a minute. When we are looking at this here we are getting our environment database host and database username password because these are the values it's using Vapor password and Vapor username because it could not find an environment variable because we never added any. But we still need like a URL and a database host. So like where does the database live? We have to tell our app that in some way. So what we are going to do is it's going to look for a database URL. But again, this is not a value. We want to hard code and it even tells you if we type Heroku config, it tells us how to access the database. They called their app. Today I learned ours is called CWC vaporapi. It gives us this URL to use to connect to the database. But here in the docs it tells you don't ever hard code this because Heroku rotates through these URLs because it might change because for whatever reason and because of that, we can't use a hard coded value for anything. We are going to be using a database configuration. So if we look at the Heroku app, go down to settings, reveal config VARs. So we go to database VARs and then config VARs. We can see the database URL that Heroku is storing is right here. So this is the one that it will use. We need to tell our app now to look for this value. Let's keep it on that and let's go and change the code to do this. The next step it's telling us within the docs is mostly what I'm following along with is to add the database URL and make a postcard configuration with both of these. And I tried to type this code and it does not work or did not work for me. So you can try to type this and deploy again and see if that worked. But here is the code change that really actually worked on my machine. So what we wanted to do was first check if we have that database URL. So what we are doing here is first we are going to make a URL string from this database URL in the environment variable, which will look for the environment variable we saw over here in Settings, this config variable, and then we are going to make a Postgres configuration because that's the type of database that we use. And then all of this will be in this if statement. Otherwise we'll set it up like this which is how we've done it on our local computer and everything worked. So we have our Postgres configuration, and we also need to make something called a TLS configuration. So we have made our Postgres configuration for our database, and we are going to configure the database using this database URL. And then we make a TLS configuration and let me double check that. That is right. Make client configuration. Yeah. So we make the TLS configuration and it says make client config and we set the TLS certificate verification to none. I honestly don't really know what this is. Tls is part of like the Internet. It's a I think transport layer. And then we set our Postgres config to use our TLS configuration. And then lastly, we do app databases use, which is almost exactly the same as this rather than hard coding everything, though. We are using Postgres and we are using our Postgres configuration to set everything up. And then this is just the name of our database because you can have multiple databases within an application, but we are only using one. So that's what setting up right here is doing. And lastly, we have this try auto migrate line right here because when we ran our application for the first time, we wanted the migrations to run and for the app to basically not work unless basically make the app not work until the migrations ran. But that's not what we want to do within Heroku. We want it to still run and we only want to run these, like in development, and we can write a command to run it within Heroku. So what we are going to do is change this to be we are going to change this to make an if statement. So if our app is in development mode or development environment meaning on our computer, then we want to run the migrations. Otherwise they won't run. And we are going to just run it from the command line. So we've made all these changes. Let's commit these changes. So if we type get status, if I can spell which I can't, there we go get status. We see we changed our configure method, which is correct. So I'm making a new message called Update config for database. And when I do am, that allows me to add whatever here was ever ready to be committed and write the message at the same time rather than just writing get add and then get commit. So we have committed that. Let's go and push these changes to Heroku. So we Typed get push Heroku main and this will deploy to Heroku again. So when I hit enter on that, you can see it's starting to build again. If we go to Overview, we can see what we've done here is we deployed. We created the new database, we set up the database URL, and then that's just what it sort of does automatically when we made the database and then right here because we tried to push you can see now it's going and building the project again. So let's wait for that to build. After we built everything, it has been fully deployed so we can see right here and then it's deployed our new commit. And so if I click on this, it'll take me to this Heroku data tab because I've already clicked on it and we should be able to refresh it. And it doesn't look any different right now because we haven't ran our migrations just yet either. So if we look at data clips, this allows us to create new queries that we can run on our database from this interface, as opposed to connecting to it from Data Grip. So if we try to do Select Star from songs, it won't work because the songs table still doesn't exist yet, and we need to give up a title. And then if we click Save and run, I think. Yeah, it tells us Songs doesn't exist. That's because we have now configured our application to run and use our new database URL, but we still haven't ran the migrations themselves. So to do that, we need to use this line Heroku run migrate environment production. So Run is by default the name right here of what it calls our application. Oh no, it's in the package. That's where it's at. So here app name is called App, and then the target is called Run by default. So that's why it says Run run. So if we type this and hit enter, this is going and running our migration. So I'm not sure if anything shows up in this latest activity. I don't think it does. Yeah, nothing shows up there, but we can see right here. Something is happening. It says we wanted to run our migrations on our new app, and then it asks us, do we want to run this migration, which is app createsongs because right here that's what we call the migration. So we say yes with a y hit enter and it tells us migration successful, which is awesome. So now when we go to Data, which is again, we get to it by clicking on Heroku Postgres or you could go to Resources and then click on it right there. I just like the overview page. We get to this. And if we go here and try to run it again, which I'm not sure why it always makes you click save and run as opposed to just run. I don't know. I think you can just run it. I've always had to click Save and run. Yeah, because it just doesn't do it again, which is weird. So click Save and run. We get back nothing because not the database. The table itself exists, but there's no data in it yet because we haven't added anything. Does that show us anything? No. So now if we go back to postman, let's try to hit our base URL. Sowe can use again. This is the error that showed us originally, which is Heroku logs tail. We can see the logs for what's happened. So we'll keep that up as well. While that is running. If we go to configure two routes, we have our two routes of it works. And Hello. So let's try to hit the base route that has nothing and we should get back. It works. Yay. Okay, we got back. It works. So we got 200. Okay, it says it works, which is awesome. And then we see here we got back the root path, which is also a get request, and it's just a slash. And that's the request ID. That's the web one and that's it. So it didn't show us an error, which is amazing. And if we try to go to Hello, we hit this, we get back Hello world, because that's what we have Typed right here. Now the moment of truth. Let's go to our slashsongs endpoint. So we get back an empty array, which is good because we don't have anything in our database yet. So that's exactly what we want back. And we got back at 200, which is also a good thing. So I have this other tab for new songs, and what we do is let me copy this JSON and go back to the tab that has the actual URL in it. Let's add a new body. I already have it here and we have a song just called Money, and we change the body from none to Raw and change it to JSON. And if we click send, it got back 200. Okay. Which is good. Oh, wait. I have to change this to post that's. Whysend post. There we go. So we still got back to 200, which is a good thing if we go and change this to a get request now and hit send, we should get back our one row that says Money. So there we go. We got that back. And that's the new song that we just posted. So when we go to this data clips tab again, I don't know why we have to do save and run. I don't know where the button is to actually just run. It like normal. I think there was a refresh somewhere, but we click save and run and here we go. This is our table with the ID and the title, and we have our one song called Money in here. So that is great. That's exactly what we want. So we know at least it is reading data and we are sending data. So let's try to do an update. So if we do an update, we need this ID number. No, we don't. We just do a normal put request. That's what it is, right? I don't remember. Let me look, I don't remember. We do a put request and we decode the whole thing. Okay. So we do need this whole object, so it would look like this, but instead of money, we want to do how you like that? And we change it to put. And if we hit send, we got back 200. Okay. Which is good. And is there a refresh button here? I could have sworn there was, but I can't find it. So I just had a semicolon hit save and run. And there we go. Our one row in here says how you like that for the same ID number as this one, which is good. So we were able to update and let's add one more song to it. So let's just add a new song. We'll just add another song called Lovesit Girls Hit Send. No, that's put. Okay. So because I tried to do a post request or I meant to do a post request, but I didn't change this. So it said put it just came back four or four because it couldn't find one right here. It tried to look for that song right here from the ID, but we didn't give it any. So it came back four or four. So we know that's working. So that's good. So let's change this to a post to add this new song. Messed up the brackets. That's fine. Click send. We got back 200. So that's good. And if we go to our data right here, save and run, we should have two songs. And then let's check delete. So we want to delete buythecingid, so we know the ID. Let's delete how you like that. So copy this whole ID, and technically, we don't need the body here, but we could erase it or keep it. It kind of doesn't matter. We'll just keep it there. And then we do the ID number, the UID, and we change this to a delete request and hit send. It gave back 200. So that's good. So now let's look at it and click save and run. And there we go. We only have the one property, so we know all of our operations are working. So that is a good thing. Lastly, we need to use this for our own application. And to do that, all we need to do is open our iOS app, click Control C to close this. And I'm going to open the iOS app. So that was in the folder above. And then I put it right here. I still have it on lesson four. So I need to make a new branch. So let's open our project and Xcdspace that would open an Xcode project if you have, like, an Xcode project file within whatever directory that you're in. Okay. So we have opened our iOS project. Let me close postman because we don't need it anymore because we've confirmed everything works. And all we need to do for our iOS app is go to the constants file. And instead of using our in grok URL, we want to use the one for our application. So let's go to the Heroku app, click on Settings and scroll down to domains. We want to copy this URL and paste that right here and make sure you still have one slash at the end. So if we do that and let's change this from my cell phone to the simulator and click on Run. The first thing we should see is the one song that we have called Love Six Girls. So let's refresh this or run it. So Commandr and wait for my simulator to come up. And once our project runs, we see our songs Love Sick Girls that's here, which is amazing. That means we successfully read from our database that's hosted with Heroku. So let's edit this and change it to Pretty Savage and click on Update. We see our song appears properly here, but we can double check by looking at the database within Heroku Save and run, and now it says Pretty Savage. So let's go and add a new song. So we've tested read. We've tested update, let's create a new one. Click on Add song. There's a song called Whistle, so let's just type that click on Add song. We see both of them here and double check again with our database in Heroku Save and Run and there we go. We have those two songs and let's then delete one. So delete, pretty Savage delete. We only have our one song here, and if we refresh our database on this side, there we go. We only have one song left. And that is it. We have fully deployed our Vapor API with Heroku and our Postgres database. Then we used that instance within our Swift UI iOS app. So during this lesson, we created a new Heroku account. We installed Heroku Via homeboro on our computer and we configured it within the terminal to use our new account. We created a new Heroku app within the website and then configured that app. And lastly, we set up our database to use a Heroku Postgres database, and we ran the migrations so that our app had our brand new table that we made. And finally we configured our Swift UI app to use our brand new Heroku instance running up in the cloud. So if you like this video series on paper, be sure to like and subscribe and let me know how I did on my very first YouTube tutorial series, and we can confirm that this works by going down to Azure Data Studio and just running our query again. Of course it didn't work. Now I have to disconnect. So please hold. Come on back. While that is billing.
