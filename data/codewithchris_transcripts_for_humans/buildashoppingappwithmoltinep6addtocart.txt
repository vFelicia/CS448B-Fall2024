With timestamps:

00:03 - hey coders what's up hope you guys are
00:06 - doing well Chris here with episode 6 of
00:09 - how to build a shopping app in the
00:12 - previous lesson we had implemented the
00:14 - product details view in this lesson
00:16 - we're going to add an Add to Cart button
00:19 - on this view which is going to allow the
00:21 - user to add this product to the cart in
00:23 - preparation for checkout so let's hit
00:25 - stop on the project here and let's go
00:27 - into the storyboard because we're going
00:30 - to need to add a button to the detail
00:33 - view so in the lower right hand corner
00:35 - let's search for button and then we're
00:40 - gonna go ahead and just drag it on
00:42 - around right there
00:43 - let's add some constraints to it so make
00:45 - sure you've got it selected and then
00:47 - let's select the pin so I'm gonna get
00:51 - rid of constrain - margins and I'm just
00:52 - going to say that this is going to be a
00:54 - hundred from the bottom I'm also going
00:59 - to hit the button and then horizontally
01:03 - center it in the container so I'm going
01:05 - to add that constraint as well so now
01:07 - let's update frames okay so I have my
01:09 - button there let's run it quickly and
01:12 - see how it looks ok so that button is
01:18 - going to be our Add to Cart button let's
01:20 - go back to the storyboard and change the
01:23 - text for that guy and call it add to
01:26 - cart so we're gonna have to update
01:27 - frames again just to make sure it
01:31 - doesn't get cut off now let's add an
01:34 - action handler for this button so that
01:36 - when the user taps it we're gonna
01:39 - trigger some code to happen
01:41 - let's hit the assistant editor view make
01:43 - sure you're looking at the detail view
01:45 - controller dot Swift and scroll all the
01:47 - way down and underneath here right
01:51 - before this closing curly bracket for
01:55 - the class I'm going to click the button
01:59 - in the document outline I'm gonna hold
02:01 - down control on my keyboard I'm gonna
02:03 - click and drag it right there and let go
02:07 - connection type is not an outlet I want
02:10 - an action
02:10 - so here I'm going to say add-to-cart
02:16 - tapped and touch up inside is fine and
02:20 - for the type I'm just going to hit the
02:22 - drop-down and select I button and
02:24 - connect alright so now I've hooked up
02:27 - this method to fire whenever the Add to
02:29 - Cart button is hit let's create some
02:32 - space in here and just write a couple of
02:34 - comments as to what we're going to do so
02:36 - first of all we're going to get the get
02:38 - the current Product ID because we're
02:41 - going to need that Product ID in order
02:43 - to add it to the cart and then second of
02:45 - all add the product to the cart and then
02:53 - lastly display a message to the user
02:57 - that the item has been added before we
03:01 - write the code let's go back into the
03:03 - standard editor view and let's go back
03:06 - to the detail view controller take note
03:08 - at the top we have the detail item
03:11 - property which references the product
03:13 - that is currently being displayed so if
03:16 - we scroll down to the bottom it's pretty
03:18 - straightforward so first of all we're
03:21 - going to create a new constant let's
03:23 - call it Product ID and we're going to
03:26 - assign into it self thought detail item
03:29 - and because we don't know whether
03:31 - there's actually a product assigned to
03:34 - this property or not we're going to put
03:35 - the question mark there so that it
03:37 - doesn't crash if we're trying to access
03:39 - this key and the key we're trying to
03:41 - access is ID and then we're going to try
03:44 - to cast it as a string okay so with this
03:47 - line there's a couple of things that can
03:49 - go wrong
03:49 - first of all detail item can be nil
03:51 - which is not likely because we're
03:54 - looking at a product but even so it's
03:57 - nice to keep that in mind
03:59 - second of all there may not be a key
04:01 - named ID even though there should be and
04:04 - then lastly we're trying to cast the
04:07 - value that is returned by this key we're
04:09 - trying to cast that value as a string
04:11 - now if it's not actually a string this
04:14 - cast may return nil so it's best if we
04:17 - check if Product ID is actually
04:21 - containing an ID or if it's nil so let's
04:23 - say
04:24 - if let ID equals product ID and then
04:32 - only if it contains an actual product ID
04:36 - do we do any of this stuff down here
04:38 - okay so let's add the product to cart if
04:40 - there is actually a product ID so we use
04:44 - molten dot shared instance oh Xcode is
04:48 - not detecting this keyword right here or
04:50 - this class and the reason is we haven't
04:54 - imported molten right we had to do that
04:58 - up here in the master view controller
05:01 - not Swift as well so let's scroll back
05:04 - down here now you can see that xqo
05:07 - recognizes it now sharedinstance
05:09 - dot cart oops cart dot insert item with
05:16 - ID that's this method right here so it
05:20 - accepts an item ID which is our Product
05:22 - ID the quantity and modifiers in case
05:26 - that they have product variations and
05:28 - then we can add those sorts of
05:30 - variations as a dictionary into this
05:34 - part but our product is simple we're
05:35 - gonna pass a nil and then finally
05:37 - there's a success callback if it's
05:40 - successfully added to the cart or
05:41 - there's a failure callback okay so for
05:44 - the item ID we're going to just fill an
05:46 - ID like that quantity we're gonna put
05:49 - one modifiers we're going to put nil and
05:52 - then let's expand the success callback
05:55 - by double-clicking it and it's going to
05:58 - create a code block in there for us
06:00 - there's one parameter in this callback
06:02 - handler and that's this dictionary here
06:05 - so I'm just gonna call it response
06:08 - dictionary and then we're gonna put some
06:10 - code in here and actually if it's
06:13 - successfully added to the cart we're
06:14 - going to display a message to the user
06:17 - so I'm gonna put this comment in here
06:19 - and if it failed let's double click that
06:22 - to expand it there's two parameters in
06:25 - this response one is the response
06:28 - dictionary and another we're just going
06:30 - to call error so in here in this
06:33 - callback say couldn't add product
06:37 - to cart so let's just print here
06:41 - something went wrong and I'm gonna put a
06:45 - breakpoint there in case it ever gets
06:47 - there so it will stop the execution and
06:50 - then we can inspect the response and see
06:52 - what went wrong so in terms of
06:54 - displaying the message to a user we're
06:56 - going to use the UI alert controller so
06:59 - that's right
07:00 - let alert equals UI alert controller
07:05 - we're gonna create a new instance of
07:07 - this object and we're going to use this
07:10 - initializer right here so we're going to
07:12 - pass in the title as added to cart the
07:17 - message is let's just say added item to
07:21 - cart and the preferred style we have UI
07:25 - alert controller style dot we're gonna
07:30 - choose alert and this is going to
07:32 - display a modal message okay so we
07:36 - created an alert at this point it's just
07:38 - going to be a modal little dialog that
07:40 - pops up with no way for the user to
07:42 - dismiss it by default it doesn't come
07:44 - with an OK button
07:46 - so that's what we're gonna have to add
07:47 - so let's say alert add action so this is
07:51 - SEPs a UI alert action and I'm gonna
07:54 - create an instance of that in here and
07:58 - we're going to use the initializer this
08:01 - one right here
08:02 - so the title of this one is just going
08:05 - to be okay and the style is going to be
08:09 - UI alert action style dot we're gonna
08:14 - use default for just a standard modal
08:17 - button if we used something like cancel
08:19 - or destructive it's gonna turn it red by
08:22 - default so we're gonna use default and
08:24 - for the handler this is a place for us
08:27 - to specify some code if we want to do
08:30 - something in response to the user
08:32 - tapping the OK button but we're not
08:34 - going to do anything so we're gonna put
08:35 - nil in there okay so now our modal alert
08:38 - actually has an OK button
08:39 - to dismiss it finally we have to present
08:42 - that modal alert to the user so we're
08:45 - gonna say self-thought
08:47 - present viewcontroller and here we're
08:50 - gonna pass in the viewcontroller to
08:51 - present and that's going to be our alert
08:53 - and I made it let's say true and for the
08:58 - completion again we can specify some
09:00 - code in response to the alert being
09:03 - presented we're gonna put a nil here
09:05 - okay so let's run it and see what we
09:07 - have
09:11 - I'm gonna select iPad pro here and
09:14 - here's our Add to Cart button so when I
09:16 - tap this this code right here is going
09:18 - to run it's going to grab the product ID
09:20 - of the product it's going to call insert
09:24 - item with ID and then if it's successful
09:28 - we're going to get the alert message all
09:31 - right
09:31 - added to cart so here's the ok button
09:33 - that we added this is the default style
09:36 - and when we press ok that's it if we go
09:39 - back to the console for a second again
09:42 - you can see what API call is being made
09:44 - to the Moulton back-end so the one where
09:46 - we called products this grabs all of the
09:49 - products from our store and then when I
09:51 - click the Add to Cart button this one is
09:54 - being made to the carts endpoint so
09:56 - that's just a good thing to know if
09:57 - you're digging into the documentation or
09:59 - you're trying to debug something that's
10:01 - happening with your app you know which
10:03 - endpoints the app is hitting in the next
10:05 - lesson I'm going to show you how to
10:07 - perform a check out using the Moulton
10:09 - API thanks for watching I hope you guys
10:11 - enjoyed it and if you did please share
10:13 - and subscribe I really appreciate it and
10:15 - it would help me out greatly so thank
10:17 - you again and I'll see you guys tomorrow
10:19 - bye for now
10:23 - you

Cleaned transcript:

hey coders what's up hope you guys are doing well Chris here with episode 6 of how to build a shopping app in the previous lesson we had implemented the product details view in this lesson we're going to add an Add to Cart button on this view which is going to allow the user to add this product to the cart in preparation for checkout so let's hit stop on the project here and let's go into the storyboard because we're going to need to add a button to the detail view so in the lower right hand corner let's search for button and then we're gonna go ahead and just drag it on around right there let's add some constraints to it so make sure you've got it selected and then let's select the pin so I'm gonna get rid of constrain margins and I'm just going to say that this is going to be a hundred from the bottom I'm also going to hit the button and then horizontally center it in the container so I'm going to add that constraint as well so now let's update frames okay so I have my button there let's run it quickly and see how it looks ok so that button is going to be our Add to Cart button let's go back to the storyboard and change the text for that guy and call it add to cart so we're gonna have to update frames again just to make sure it doesn't get cut off now let's add an action handler for this button so that when the user taps it we're gonna trigger some code to happen let's hit the assistant editor view make sure you're looking at the detail view controller dot Swift and scroll all the way down and underneath here right before this closing curly bracket for the class I'm going to click the button in the document outline I'm gonna hold down control on my keyboard I'm gonna click and drag it right there and let go connection type is not an outlet I want an action so here I'm going to say addtocart tapped and touch up inside is fine and for the type I'm just going to hit the dropdown and select I button and connect alright so now I've hooked up this method to fire whenever the Add to Cart button is hit let's create some space in here and just write a couple of comments as to what we're going to do so first of all we're going to get the get the current Product ID because we're going to need that Product ID in order to add it to the cart and then second of all add the product to the cart and then lastly display a message to the user that the item has been added before we write the code let's go back into the standard editor view and let's go back to the detail view controller take note at the top we have the detail item property which references the product that is currently being displayed so if we scroll down to the bottom it's pretty straightforward so first of all we're going to create a new constant let's call it Product ID and we're going to assign into it self thought detail item and because we don't know whether there's actually a product assigned to this property or not we're going to put the question mark there so that it doesn't crash if we're trying to access this key and the key we're trying to access is ID and then we're going to try to cast it as a string okay so with this line there's a couple of things that can go wrong first of all detail item can be nil which is not likely because we're looking at a product but even so it's nice to keep that in mind second of all there may not be a key named ID even though there should be and then lastly we're trying to cast the value that is returned by this key we're trying to cast that value as a string now if it's not actually a string this cast may return nil so it's best if we check if Product ID is actually containing an ID or if it's nil so let's say if let ID equals product ID and then only if it contains an actual product ID do we do any of this stuff down here okay so let's add the product to cart if there is actually a product ID so we use molten dot shared instance oh Xcode is not detecting this keyword right here or this class and the reason is we haven't imported molten right we had to do that up here in the master view controller not Swift as well so let's scroll back down here now you can see that xqo recognizes it now sharedinstance dot cart oops cart dot insert item with ID that's this method right here so it accepts an item ID which is our Product ID the quantity and modifiers in case that they have product variations and then we can add those sorts of variations as a dictionary into this part but our product is simple we're gonna pass a nil and then finally there's a success callback if it's successfully added to the cart or there's a failure callback okay so for the item ID we're going to just fill an ID like that quantity we're gonna put one modifiers we're going to put nil and then let's expand the success callback by doubleclicking it and it's going to create a code block in there for us there's one parameter in this callback handler and that's this dictionary here so I'm just gonna call it response dictionary and then we're gonna put some code in here and actually if it's successfully added to the cart we're going to display a message to the user so I'm gonna put this comment in here and if it failed let's double click that to expand it there's two parameters in this response one is the response dictionary and another we're just going to call error so in here in this callback say couldn't add product to cart so let's just print here something went wrong and I'm gonna put a breakpoint there in case it ever gets there so it will stop the execution and then we can inspect the response and see what went wrong so in terms of displaying the message to a user we're going to use the UI alert controller so that's right let alert equals UI alert controller we're gonna create a new instance of this object and we're going to use this initializer right here so we're going to pass in the title as added to cart the message is let's just say added item to cart and the preferred style we have UI alert controller style dot we're gonna choose alert and this is going to display a modal message okay so we created an alert at this point it's just going to be a modal little dialog that pops up with no way for the user to dismiss it by default it doesn't come with an OK button so that's what we're gonna have to add so let's say alert add action so this is SEPs a UI alert action and I'm gonna create an instance of that in here and we're going to use the initializer this one right here so the title of this one is just going to be okay and the style is going to be UI alert action style dot we're gonna use default for just a standard modal button if we used something like cancel or destructive it's gonna turn it red by default so we're gonna use default and for the handler this is a place for us to specify some code if we want to do something in response to the user tapping the OK button but we're not going to do anything so we're gonna put nil in there okay so now our modal alert actually has an OK button to dismiss it finally we have to present that modal alert to the user so we're gonna say selfthought present viewcontroller and here we're gonna pass in the viewcontroller to present and that's going to be our alert and I made it let's say true and for the completion again we can specify some code in response to the alert being presented we're gonna put a nil here okay so let's run it and see what we have I'm gonna select iPad pro here and here's our Add to Cart button so when I tap this this code right here is going to run it's going to grab the product ID of the product it's going to call insert item with ID and then if it's successful we're going to get the alert message all right added to cart so here's the ok button that we added this is the default style and when we press ok that's it if we go back to the console for a second again you can see what API call is being made to the Moulton backend so the one where we called products this grabs all of the products from our store and then when I click the Add to Cart button this one is being made to the carts endpoint so that's just a good thing to know if you're digging into the documentation or you're trying to debug something that's happening with your app you know which endpoints the app is hitting in the next lesson I'm going to show you how to perform a check out using the Moulton API thanks for watching I hope you guys enjoyed it and if you did please share and subscribe I really appreciate it and it would help me out greatly so thank you again and I'll see you guys tomorrow bye for now you
