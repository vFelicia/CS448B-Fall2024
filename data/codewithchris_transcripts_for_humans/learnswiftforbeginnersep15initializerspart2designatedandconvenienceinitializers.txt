With timestamps:

00:00 - hello welcome to lesson 15 of the learn
00:03 - Swift for beginners series in this video
00:06 - we're going to revisit initializers and
00:08 - i'm going to tell you about designated
00:10 - initializers and convenience
00:12 - initializers okay well let's get started
00:15 - so right here i'm starting off again
00:21 - with the blog post class and the person
00:24 - cloth and of these properties here in
00:27 - the blog post class I'm actually going
00:30 - to uninitialized some of these
00:32 - properties so I can demonstrate for you
00:35 - what we need to do in the initializer
00:37 - because I mentioned before that one of
00:39 - the jobs of the initializer is to make
00:41 - sure that all of these properties are
00:44 - initialized and ready to go so even if
00:47 - it is an optional that is considered
00:50 - okay when you're declaring your
00:52 - properties inside your class
00:54 - there are basically three different ways
00:55 - of doing it so number one is this one
00:58 - where you declare the property and you
01:01 - initialize it to some sort of value
01:03 - right away so that's this body property
01:05 - right here and this number of comments
01:07 - property is equal to zero
01:09 - the next thing you can do is you can
01:12 - declare a property and set it to
01:14 - optional so you're specifying that it
01:17 - could be nil or it could contain a value
01:19 - but either way you have to unwrap the
01:22 - value and you have to check if it's mail
01:24 - before using it now the third way is
01:27 - probably the most dangerous way and that
01:29 - is using the force unwrap operator so
01:32 - let me show you what that means if I get
01:36 - rid of that question mark and I put an
01:38 - exclamation mark there and let's also do
01:40 - it beside author so what you're saying
01:42 - here is you're saying that title
01:44 - basically is an optional it could be nil
01:47 - or it could contain a value but you're
01:49 - going to leave it unwrapped so when I
01:53 - access the title property down here and
01:55 - I say post title Xcode is not going to
01:59 - have that sort of safe checking or
02:03 - warning us that it could be nil it's not
02:06 - going to provide any of those safety
02:07 - mechanisms and it's just going to let us
02:09 - use it as is so we can assign nil into
02:12 - title as you can see here
02:13 - No and we can use it like a normal
02:16 - property right we don't have to check if
02:19 - it's no or not or rather it is up to us
02:22 - whether we want to do it or not but
02:24 - however if you know the difference the
02:28 - flipside being that we make this an
02:31 - optional now there are some safety
02:34 - mechanisms in place if I just try to use
02:36 - this as this Xcode is going to warn us
02:38 - that hey you know this is an optional
02:40 - you have to check that it's not nil or
02:43 - you have to unwrap it first before you
02:45 - can use it so I might have to say if let
02:48 - you know actual title equals and this is
02:52 - using optional binding so basically
02:53 - we're checking if there's a value inside
02:58 - the optional first you know if something
03:03 - could potentially be no it's probably
03:04 - safer to use an optional value so that
03:07 - it forces the programmer to actually
03:09 - check things before using it
03:11 - now if you set your properties like that
03:15 - then it could still be nil or it could
03:18 - contain a value but you sort of remove
03:20 - that taystee checking that optionals
03:21 - provide so those are the three different
03:23 - ways that you can set up your properties
03:27 - what you cannot do however is you can't
03:31 - just do something like that
03:34 - where you declare a property you don't
03:37 - set it to anything you don't specify
03:40 - that it's an optional or you don't
03:42 - specify that it's unwrapped and you just
03:44 - leave it like that
03:45 - in that case Xcode is going to assume
03:47 - that the initializer is going to set
03:51 - those to some values so let's declare
03:54 - our initializer here like you've learned
03:57 - in the past and inside here you can see
04:00 - that Xcode is still showing errors but
04:03 - if I actually initialize these things
04:07 - inside the initializer let's say an
04:11 - author is equal to person like that then
04:14 - Xcode is going to stop complaining
04:16 - because remember when we create a new
04:18 - blog post like this it's actually
04:20 - calling the initializer so even though
04:23 - these properties right here title and
04:25 - author they're not set to anything
04:26 - they're not
04:27 - Chanel's they're not unwrapped this
04:29 - initializer is going to be called for
04:31 - sure when we create a new blog post
04:33 - object and inside here those properties
04:36 - get set to some value to get initialized
04:39 - and so at the end of the day this blog
04:41 - post object is going to be ready to be
04:43 - used
04:44 - now this initializer right here this is
04:47 - what is called the designated
04:49 - initializer and what that means is that
04:52 - this initializer function is guaranteed
04:56 - to fulfill those obligations of making
05:00 - sure that all of the properties are
05:01 - initialized before use in contrast we
05:06 - can have something that's called a
05:07 - convenience initializer and what that is
05:10 - is you use the convenience keyword
05:12 - followed by your initializer method
05:17 - signature so I might have something like
05:20 - this where inside this initializer I
05:22 - only want to provide a custom title well
05:31 - you might ask if I call this convenience
05:34 - initializer how is author going to get
05:37 - initialized right so what happens is
05:41 - inside the convenience initializer I
05:43 - call the designated initializer using
05:48 - the self keyword like this so now and
05:52 - inside here let's set title equals
05:54 - custom title so now when I declare a new
06:00 - blog post object and let's say I use my
06:03 - convenience initializer like this and I
06:06 - pass in a custom title like this it's
06:10 - calling this convenience initializer but
06:15 - this convenience initializer is also
06:18 - calling the designated one which make
06:21 - sure that at the end of the day you know
06:23 - the uninitialized properties will be
06:26 - initialized and then after calling that
06:30 - designated initializer then we set title
06:33 - to custom title so whether I call this
06:37 - designated initializer or the
06:38 - convenience initializer
06:40 - on the title and the author properties
06:43 - will be guaranteed to be initialized and
06:45 - so the role of the convenience
06:47 - initializer is simply for convenience so
06:53 - that's the difference between a
06:54 - designated initializer versus a
06:56 - convenience initializer I hope that was
06:59 - clear and please like the video and
07:01 - share the video subscribe to the channel
07:03 - if you haven't already for more I'll see
07:05 - you guys next time bye for now
07:08 - [Music]

Cleaned transcript:

hello welcome to lesson 15 of the learn Swift for beginners series in this video we're going to revisit initializers and i'm going to tell you about designated initializers and convenience initializers okay well let's get started so right here i'm starting off again with the blog post class and the person cloth and of these properties here in the blog post class I'm actually going to uninitialized some of these properties so I can demonstrate for you what we need to do in the initializer because I mentioned before that one of the jobs of the initializer is to make sure that all of these properties are initialized and ready to go so even if it is an optional that is considered okay when you're declaring your properties inside your class there are basically three different ways of doing it so number one is this one where you declare the property and you initialize it to some sort of value right away so that's this body property right here and this number of comments property is equal to zero the next thing you can do is you can declare a property and set it to optional so you're specifying that it could be nil or it could contain a value but either way you have to unwrap the value and you have to check if it's mail before using it now the third way is probably the most dangerous way and that is using the force unwrap operator so let me show you what that means if I get rid of that question mark and I put an exclamation mark there and let's also do it beside author so what you're saying here is you're saying that title basically is an optional it could be nil or it could contain a value but you're going to leave it unwrapped so when I access the title property down here and I say post title Xcode is not going to have that sort of safe checking or warning us that it could be nil it's not going to provide any of those safety mechanisms and it's just going to let us use it as is so we can assign nil into title as you can see here No and we can use it like a normal property right we don't have to check if it's no or not or rather it is up to us whether we want to do it or not but however if you know the difference the flipside being that we make this an optional now there are some safety mechanisms in place if I just try to use this as this Xcode is going to warn us that hey you know this is an optional you have to check that it's not nil or you have to unwrap it first before you can use it so I might have to say if let you know actual title equals and this is using optional binding so basically we're checking if there's a value inside the optional first you know if something could potentially be no it's probably safer to use an optional value so that it forces the programmer to actually check things before using it now if you set your properties like that then it could still be nil or it could contain a value but you sort of remove that taystee checking that optionals provide so those are the three different ways that you can set up your properties what you cannot do however is you can't just do something like that where you declare a property you don't set it to anything you don't specify that it's an optional or you don't specify that it's unwrapped and you just leave it like that in that case Xcode is going to assume that the initializer is going to set those to some values so let's declare our initializer here like you've learned in the past and inside here you can see that Xcode is still showing errors but if I actually initialize these things inside the initializer let's say an author is equal to person like that then Xcode is going to stop complaining because remember when we create a new blog post like this it's actually calling the initializer so even though these properties right here title and author they're not set to anything they're not Chanel's they're not unwrapped this initializer is going to be called for sure when we create a new blog post object and inside here those properties get set to some value to get initialized and so at the end of the day this blog post object is going to be ready to be used now this initializer right here this is what is called the designated initializer and what that means is that this initializer function is guaranteed to fulfill those obligations of making sure that all of the properties are initialized before use in contrast we can have something that's called a convenience initializer and what that is is you use the convenience keyword followed by your initializer method signature so I might have something like this where inside this initializer I only want to provide a custom title well you might ask if I call this convenience initializer how is author going to get initialized right so what happens is inside the convenience initializer I call the designated initializer using the self keyword like this so now and inside here let's set title equals custom title so now when I declare a new blog post object and let's say I use my convenience initializer like this and I pass in a custom title like this it's calling this convenience initializer but this convenience initializer is also calling the designated one which make sure that at the end of the day you know the uninitialized properties will be initialized and then after calling that designated initializer then we set title to custom title so whether I call this designated initializer or the convenience initializer on the title and the author properties will be guaranteed to be initialized and so the role of the convenience initializer is simply for convenience so that's the difference between a designated initializer versus a convenience initializer I hope that was clear and please like the video and share the video subscribe to the channel if you haven't already for more I'll see you guys next time bye for now
