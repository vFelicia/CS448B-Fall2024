With timestamps:

00:07 - hey everyone in this lesson I'll show
00:09 - you guys how to play a sound within your
00:12 - app and it's actually very simple so I'm
00:15 - going to start with a demo Xcode project
00:19 - I'm just gonna create a single view
00:21 - application I'm gonna call it sound demo
00:27 - and I'm just gonna save it on my desktop
00:37 - okay so the first thing we're going to
00:40 - want to do is add the avfoundation
00:42 - framework down here and your project
00:44 - properties so you just click this Add
00:47 - icon and type in AV and you'll see it
00:50 - double click it and you're gonna add
00:53 - this framework to your project and this
00:56 - gives us the classes that we need in
00:58 - order to play sound and it happens to
01:02 - also be the same framework for playing
01:04 - video but that was covered in another
01:07 - video so the next thing I'm going to do
01:11 - is I'm going to create a folder create a
01:15 - new group for my sounds just to keep
01:21 - things organized and I happen to have an
01:25 - mp3 sound which I'm just going to drag
01:29 - from my file system into this group so
01:35 - if you're if your sound file isn't in
01:38 - the project folder then you can check
01:41 - this check mark right here and it's
01:43 - gonna copy your sound file into your
01:46 - project folder and it's a good idea to
01:49 - keep all of your resources and files
01:51 - inside your project folder so that if
01:54 - you do happen to send it to someone or
01:57 - to let's say check in your code into
02:02 - source control that you don't leave out
02:05 - any files that it needs so if your Xcode
02:07 - project is referring to files you know
02:09 - all over your file system on your
02:11 - computer and you check in just your
02:14 - source code folder
02:15 - then when someone downloads your source
02:17 - code they're gonna have broken
02:19 - references in their project so that's
02:22 - one thing to watch out for now on the
02:24 - other hand if you copy the sound file
02:27 - into your project folder first and then
02:29 - you're dragging it into your Xcode
02:30 - project then you probably don't need to
02:32 - check this because it's already in your
02:35 - project folder so i'm gonna click finish
02:38 - and i can see that it's right here and
02:40 - you can even actually play it in here so
02:44 - it's just a single sound like that and i
02:50 - am going to just demonstrate a simple
02:53 - example to play that sound within the
02:56 - app and hmm
02:59 - why don't we invoke it on a button press
03:02 - so i'm gonna go into the storyboard here
03:05 - go into my object library and make sure
03:09 - that you're looking at this objects tab
03:12 - right here because there are a few and
03:15 - your objects library time might look
03:18 - like this so you know that's okay to
03:21 - just type in button and you should see
03:23 - it if you don't see this pane at all you
03:26 - can go like that click this icon up here
03:29 - to toggle the pane so I'm going to just
03:32 - strike the button on here I'm gonna flip
03:36 - over to the attributes inspector so I
03:39 - can change the name you just call it
03:42 - play sound and enlarge this button a
03:46 - little bit more and if you're a member
03:50 - of my course or you've read some of my
03:51 - tutorials might have already learned how
03:53 - to connect the button handler to this
03:57 - button so I'm just gonna do that right
04:00 - now I'm going to click this button up
04:02 - here to open the system editor and I'm
04:05 - gonna make sure that my right-hand side
04:07 - shows the view controller dot M I'm
04:11 - gonna hold down control I'm gonna drag
04:13 - this guy over here and then let go
04:25 - okay so in this way I've created a
04:27 - method that will get fired when the
04:29 - button is tapped so in here I'm going to
04:33 - go back to single view here back to view
04:38 - controller dot M and up here I'm going
04:40 - to create an instance variable for my
04:43 - audio player I'm going to create a AV
04:49 - audio player actually you know what I
04:52 - have to import the framework first so
05:08 - this variable is just going to hold a
05:11 - reference to the audio player object
05:14 - that I'm going to create here so first
05:18 - of all I'm going to create a string for
05:23 - the path of the sound and this is going
05:31 - to be I'm going to have to construct it
05:36 - basically from the main bundle path
05:38 - along with the filename so the main
05:40 - bundle is just a name for your app
05:43 - package and getting the path of the main
05:45 - bundle is just a dynamic way of getting
05:49 - the path to this sound file within your
05:52 - app package
05:59 - so I explained this line in a second so
06:08 - we want to get the main bundle and I can
06:11 - get the three source I should be able to
06:16 - get the resource path of that okay so
06:24 - what I'm doing here is I'm accessing the
06:27 - main bundle which is our app package and
06:31 - I'm getting the path for the resources
06:33 - which is where my sound is going to be
06:36 - contained and that path is going into
06:40 - this wild card character here / drum 0 1
06:45 - dot mp3 which is the sound file name and
06:48 - just like that I will have a string
06:52 - representing the path within my app
06:55 - package to the sound okay and because
06:59 - the audio player only accepts an nsurl
07:02 - I can create an nsurl
07:06 - variable from the path from the stream
07:11 - path using this class method here file
07:18 - URL with path and we can pass in the
07:21 - string path and just like that now we
07:23 - have an nsurl object ready to pass into
07:27 - our audio player so I'm going to assign
07:31 - to our audio player variable a new the
07:37 - audio player object so I locate the
07:39 - space for it and we're going to use an
07:43 - initialization method called init with
07:46 - contents of URL and we are going to pass
07:49 - in sound URL and for errors put nil so
07:54 - I'm not checking for errors and then
07:58 - simply when the button is tapped we can
08:00 - call audio player play
08:04 - the the method to play the sound so
08:07 - let's write some documentation here
08:10 - button is tapped play sound here
08:19 - construct your sound file in here create
08:28 - audio player object and initialize with
08:33 - a URL sound alright so let's give this a
08:36 - run and hopefully if everything goes
08:41 - well it works okay so just like that
08:45 - pretty simple example it's pretty easy
08:49 - to play a sound within your app as you
08:51 - can see so that's it for this video I'm
08:54 - going to link to the AV audio player
08:57 - class documentation in case you want to
08:59 - explore it some more and I'll also link
09:01 - to the source code for this demo but you
09:05 - should try to build it yourself just for
09:06 - practice that would be a very good
09:09 - exercise to do so I hope you enjoyed
09:11 - that and I'll see you guys next time
09:13 - bye

Cleaned transcript:

hey everyone in this lesson I'll show you guys how to play a sound within your app and it's actually very simple so I'm going to start with a demo Xcode project I'm just gonna create a single view application I'm gonna call it sound demo and I'm just gonna save it on my desktop okay so the first thing we're going to want to do is add the avfoundation framework down here and your project properties so you just click this Add icon and type in AV and you'll see it double click it and you're gonna add this framework to your project and this gives us the classes that we need in order to play sound and it happens to also be the same framework for playing video but that was covered in another video so the next thing I'm going to do is I'm going to create a folder create a new group for my sounds just to keep things organized and I happen to have an mp3 sound which I'm just going to drag from my file system into this group so if you're if your sound file isn't in the project folder then you can check this check mark right here and it's gonna copy your sound file into your project folder and it's a good idea to keep all of your resources and files inside your project folder so that if you do happen to send it to someone or to let's say check in your code into source control that you don't leave out any files that it needs so if your Xcode project is referring to files you know all over your file system on your computer and you check in just your source code folder then when someone downloads your source code they're gonna have broken references in their project so that's one thing to watch out for now on the other hand if you copy the sound file into your project folder first and then you're dragging it into your Xcode project then you probably don't need to check this because it's already in your project folder so i'm gonna click finish and i can see that it's right here and you can even actually play it in here so it's just a single sound like that and i am going to just demonstrate a simple example to play that sound within the app and hmm why don't we invoke it on a button press so i'm gonna go into the storyboard here go into my object library and make sure that you're looking at this objects tab right here because there are a few and your objects library time might look like this so you know that's okay to just type in button and you should see it if you don't see this pane at all you can go like that click this icon up here to toggle the pane so I'm going to just strike the button on here I'm gonna flip over to the attributes inspector so I can change the name you just call it play sound and enlarge this button a little bit more and if you're a member of my course or you've read some of my tutorials might have already learned how to connect the button handler to this button so I'm just gonna do that right now I'm going to click this button up here to open the system editor and I'm gonna make sure that my righthand side shows the view controller dot M I'm gonna hold down control I'm gonna drag this guy over here and then let go okay so in this way I've created a method that will get fired when the button is tapped so in here I'm going to go back to single view here back to view controller dot M and up here I'm going to create an instance variable for my audio player I'm going to create a AV audio player actually you know what I have to import the framework first so this variable is just going to hold a reference to the audio player object that I'm going to create here so first of all I'm going to create a string for the path of the sound and this is going to be I'm going to have to construct it basically from the main bundle path along with the filename so the main bundle is just a name for your app package and getting the path of the main bundle is just a dynamic way of getting the path to this sound file within your app package so I explained this line in a second so we want to get the main bundle and I can get the three source I should be able to get the resource path of that okay so what I'm doing here is I'm accessing the main bundle which is our app package and I'm getting the path for the resources which is where my sound is going to be contained and that path is going into this wild card character here / drum 0 1 dot mp3 which is the sound file name and just like that I will have a string representing the path within my app package to the sound okay and because the audio player only accepts an nsurl I can create an nsurl variable from the path from the stream path using this class method here file URL with path and we can pass in the string path and just like that now we have an nsurl object ready to pass into our audio player so I'm going to assign to our audio player variable a new the audio player object so I locate the space for it and we're going to use an initialization method called init with contents of URL and we are going to pass in sound URL and for errors put nil so I'm not checking for errors and then simply when the button is tapped we can call audio player play the the method to play the sound so let's write some documentation here button is tapped play sound here construct your sound file in here create audio player object and initialize with a URL sound alright so let's give this a run and hopefully if everything goes well it works okay so just like that pretty simple example it's pretty easy to play a sound within your app as you can see so that's it for this video I'm going to link to the AV audio player class documentation in case you want to explore it some more and I'll also link to the source code for this demo but you should try to build it yourself just for practice that would be a very good exercise to do so I hope you enjoyed that and I'll see you guys next time bye
