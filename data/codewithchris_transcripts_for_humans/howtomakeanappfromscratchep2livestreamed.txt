With timestamps:

00:11 - hey guys can everyone hear me can you
00:14 - guys see my screen I just type in the
00:20 - chat just wanna make sure that everyone
00:22 - can see me see my screen and they can
00:24 - hear what I'm saying before we get
00:25 - started I've got the agenda on the
00:38 - screen right now so you should be able
00:39 - to see that all right then let's get
00:45 - started okay so just a brief recap for
00:48 - you guys who are just joining this
00:50 - episode in the last livestream which was
00:54 - last Wednesday we started a new series
00:55 - called how to make an app from scratch
00:57 - and this is where I'm gonna take a nap
00:59 - idea that I have created live from
01:02 - scratch
01:03 - no pre-planning and anything like that
01:05 - so that you guys can see step by step
01:07 - the whole entire app process and then
01:10 - we're gonna launch it into the app store
01:12 - together now we're on Episode two and
01:15 - I'm gonna do a quick just a very brief
01:18 - recap on what we did in the last lesson
01:19 - but before that I totally forgot welcome
01:23 - to the code with Chris livestream Adrian
01:26 - is manning the chat so make sure you
01:28 - guys don't spam the chat cuz he's gonna
01:30 - be moderating it type all your questions
01:32 - in one message
01:33 - don't break it up so that he can easily
01:36 - manage all of the messages and the
01:38 - questions for the end of the livestream
01:40 - we also have recording on this
01:44 - livestream so it's gonna be available to
01:47 - watch after the fact in case you miss
01:49 - any bit of it and if you're watching
01:51 - this live stream the replay of it you
01:54 - guys can check the description will have
01:56 - little timestamps and you can click on
01:58 - those to jump to different points of the
02:01 - live stream so you don't have to watch
02:02 - but you guys who are here watching live
02:05 - I appreciate you guys so very much okay
02:08 - so and you guys will get your questions
02:10 - answered too so that's the benefit of
02:12 - attending this live you guys we can do
02:14 - some interaction I can get to know you
02:16 - guys and you guys can get to know me as
02:17 - well okay cool so let me do that quick
02:22 - recap in the last lesson
02:24 - I wrote last lesson the last livestream
02:26 - I revealed what my app idea was which
02:30 - was to create a Pomodoro timer and
02:32 - Pomodoro is just a technique to stay
02:34 - productive where you set timers for your
02:37 - work sessions and your break sessions
02:39 - but the twist on this app idea is to add
02:43 - a social aspect to it so you can have
02:45 - friends and you can encourage each other
02:47 - and challenge each other to complete
02:49 - more Pomodoro's in palma doors are just
02:52 - 25-minute chunks of work time so in the
02:56 - last lesson we also took a look at the
02:59 - app store to see what kind of other
03:00 - Pomodoro timers there were and there are
03:02 - a ton but we didn't find any that had
03:05 - social features integrated into it and
03:07 - we also came up with some features and
03:10 - requirements as you can see on the
03:11 - screen right now so we took all of those
03:15 - features and requirements and we broke
03:16 - it up into like a core feature set kind
03:19 - of our minimal Viable Product that we're
03:21 - gonna get launched right away and this
03:24 - is going to at least for me get me
03:26 - motivated to do more and we can also get
03:29 - feedback and incorporate that into
03:32 - subsequent incremental updates because
03:35 - for me if I really large project and you
03:38 - know I want to make it completely
03:40 - perfect and have all these features
03:41 - before I launch it chances are life is
03:44 - gonna occur you know something's gonna
03:46 - happen with my kid hey you know other
03:49 - priorities are gonna come up and that
03:50 - project is not going to get finished so
03:52 - I would my priority is to get the useful
03:56 - version of this app it has to be at
03:58 - least useful right or else no one's
03:59 - going to use it a bare minimum useful
04:02 - version of this app into the App Store
04:04 - so that people can start using it and
04:07 - giving me feedback on it now I think
04:09 - that aside from the social features that
04:13 - is going to differentiate this Pomodoro
04:15 - timer from the rest of them out there we
04:18 - also probably need to differentiate our
04:21 - you know what's gonna make our version
04:24 - better is through the user experience in
04:26 - the UI so that's going to have a lot to
04:28 - do with it so things like how things
04:30 - animate how easy it is to use because I
04:33 - did mention in the previous livestream
04:35 - that I downloaded a couple to try there
04:37 - were some
04:37 - I couldn't even figure out how to use it
04:39 - and we're talking about timer right so
04:41 - it has to be very an intuitive to use
04:45 - so in this livestream what I'm going to
04:49 - do is I'm gonna I have some ideas about
04:53 - how the app is gonna look at least this
04:56 - v1 and we're gonna start with wire
04:58 - framing it out and if you're not sure
05:00 - what that means it's basically like a
05:02 - sketch I actually did this on a piece of
05:04 - paper first so I took a pencil I took a
05:06 - piece of paper and I started just
05:08 - doodling and plotting out my ideas
05:10 - getting them onto paper in a rough form
05:13 - and in today's live stream I'm going to
05:16 - use a graphics app and then we are going
05:18 - to kind of clean it up and make it look
05:21 - like proper wireframes that you would
05:24 - submit to a client or something like
05:26 - that
05:26 - well not that proper because there's
05:28 - going to be a lot more detail that goes
05:31 - into a document like that if your client
05:33 - is gonna pay you a ton of money but for
05:34 - our purposes as long as we know you know
05:37 - where our main elements are gonna be
05:39 - laid out like we're where the timer is
05:40 - gonna be running where the start and
05:42 - stop buttons are and stuff like that
05:44 - that gives me enough confidence to move
05:47 - on another thing that I mentioned in the
05:52 - last live stream was that one of the
05:54 - challenges that I foresee is how to have
05:57 - the timer run in the background I know
05:59 - it's possible because hey other Pomodoro
06:02 - apps are out there in the App Store
06:04 - right but I just technically didn't know
06:06 - how to do it I didn't know I didn't do
06:09 - it before so from since the last
06:11 - livestream I went away and did some
06:13 - research I did some tests and I figured
06:15 - it out and it's not what you think at
06:19 - least it's not how I thought it would be
06:21 - done so I'm gonna show you guys how to
06:23 - do that too so we're gonna do a little
06:24 - demo and I'm gonna show you how to run
06:27 - timers in the background all right so
06:29 - we're gonna get started with the
06:30 - wireframe portions now oh I'm glad to
06:33 - see that there are so many people here
06:34 - welcome you guys again if you're just
06:37 - joining this will be recorded so you're
06:39 - gonna be able to watch the livestream
06:40 - afterwards all right so let's get
06:43 - started with the wireframe so I'm gonna
06:45 - use I'm gonna do this in sketch if
06:48 - you're not sure what this is
06:50 - it's just the graphics app that we're
06:53 - we're people it's like the most popular
06:56 - one where people are building they're
06:58 - designing their app graphic assets here
07:01 - another one that's free this one's not
07:04 - free another one that's free is called
07:06 - figma which is actually very similar so
07:09 - I would go ahead and check that out now
07:11 - I would use figma just to show you guys
07:13 - and I said I would but the fact is I
07:15 - haven't done this yet and I'm just not
07:18 - as confident in figma as I am and sketch
07:20 - even though they are pretty similar and
07:22 - so I don't want to waste your guy's time
07:24 - while I'm doing this live and so I'm
07:26 - going to use the program I'm a little
07:27 - familiar a little more familiar with but
07:30 - just for you guys who have are just
07:35 - starting to get into designing app
07:37 - graphics for your app I would definitely
07:40 - check out figma first before you go and
07:42 - pay for something like sketch back then
07:45 - when I bought a license for Sketch figma
07:47 - wasn't out yet and you can see here I'm
07:52 - actually using a I think I'm like two
07:55 - versions behind from the latest version
07:56 - of sketch because they change the
07:58 - interface in the latest version so it
08:00 - actually I hear that it's a little bit
08:04 - different but it's not like all that
08:06 - different so I haven't upgraded yet
08:09 - alright so first of all we're going to
08:11 - do is we're gonna create an artboard
08:15 - which is just like an a-frame of your of
08:19 - your iPhone so we can choose from a
08:22 - couple of different ones here I'm gonna
08:24 - work with the iPhone
08:25 - I guess it'll be iPhone se right now so
08:29 - you kind of want to work with the iPhone
08:31 - size that is most common alright so you
08:35 - want to make sure definitely that your
08:36 - app looks perfect with that and then
08:38 - depending on if the screen size is
08:40 - larger or smaller you can you can design
08:43 - a different set if it's gonna be all
08:45 - that different but you do want to be
08:48 - working on kind of the most common size
08:51 - and just to remind you guys this is
08:54 - basically a timer and v1 here let me
08:57 - just bring up the features I should do
08:59 - that so that we kind of know what we're
09:01 - actually wireframing out here
09:02 - so to do a quick recap in v1 we have
09:05 - three timers all right we have a
09:07 - 25-minute timer that's the work timer
09:09 - where we have a five minute break timer
09:12 - so after every 25 minutes you're gonna
09:14 - take a five minute break
09:17 - we also have a longer break timer so I
09:20 - think it's every four pompadours that
09:22 - you finish you got to take a longer
09:24 - break and this is actually like fifteen
09:29 - to thirty minutes long according to
09:32 - Wikipedia X I wasn't sure about this
09:35 - so according to Wikipedia a short break
09:40 - is like three to five minutes and the
09:41 - longer break is fifteen to thirty
09:43 - minutes in the one I didn't make it
09:49 - customizable and I'm I'm starting to
09:51 - think about whether or not I should make
09:53 - it customizable but I'm not gonna think
09:56 - about that right now I'm just gonna set
09:58 - it to 25 minutes like this might be a
10:00 - deal breaker for some people who follow
10:02 - the Pomodoro Technique if the timer
10:05 - isn't customizable and they're used to
10:08 - using like a fifteen minute break or a
10:09 - 30 minute break like this app this v1
10:12 - will be too inflexible for them to use
10:15 - so I might consider actually you know
10:20 - putting this timer feature into v1 but
10:25 - I'm gonna see what sort of time like
10:30 - what sort of timeline this ends up being
10:31 - because I do want to get this out the
10:33 - door hopefully like in a week to a week
10:36 - and a half and you know if this is gonna
10:39 - be more work like a week more work I
10:42 - probably just launched it anyways
10:44 - because the thing with these apps is
10:46 - that these days I feel like there are so
10:51 - many apps out there there's so many new
10:53 - apps coming out every day that your app
10:56 - isn't very discoverable so if you really
10:59 - do want your app to be successful you
11:02 - need to have a marketing plan you can't
11:03 - just like launch your app and expect Oh
11:05 - everyone's going to download it and try
11:07 - to use it it's almost like even if I
11:10 - publish this app into the App Store no
11:12 - one is going to know about it
11:13 - unless I you know have some sort of
11:15 - marketing push or I build up an audience
11:17 - beforehand with a landing page or
11:19 - something like that and build up that
11:21 - anticipation for it
11:22 - I mean you guys will know so thank you
11:24 - guys will download it right hopefully
11:26 - but that's why I'm not not as concerned
11:30 - if even if we publish this v1 with these
11:33 - kind of like fixed timers we can release
11:37 - this ability to customize the durations
11:40 - of the timer so we can release this as
11:41 - an update you know fairly soon after all
11:46 - right so in v1 we basically have three
11:50 - timers the ability to start them pause
11:54 - and resume and to stop the timer
11:57 - all right that's it so this interface is
12:00 - actually pretty simple now the idea that
12:02 - I had was I want it to be a very clean
12:05 - and distraction-free because that's the
12:07 - whole point of getting work done right
12:09 - so I don't want to like busy the
12:11 - interface with a whole bunch of text and
12:13 - all that stuff and so my idea basically
12:16 - revolves around a circle so the oval
12:20 - first all right I'm gonna put a circle
12:23 - here and I want it to look kind of like
12:24 - the apple rings sorry Apple watch rings
12:28 - I don't know if you have an Apple watch
12:29 - but it tries to get you to do exercise
12:32 - and it gets you to try to fill these
12:34 - rings and you see them in the
12:36 - commercials and the keynotes all the
12:38 - time so I wanna kind of make a ring like
12:40 - that that maybe glows a little bit we'll
12:43 - see how we treat it design wise but
12:46 - basically want to have a ring like that
12:49 - so it's kind of like a progress ring
12:51 - right and then I'm gonna have the timer
12:53 - in the middle the time oh I should
13:00 - actually you you San Francisco see me
13:02 - out of that I don't have that installed
13:04 - on this machine actually so I'll just
13:06 - use Helvetica doesn't really matter
13:08 - these aren't the design composites the
13:10 - design composites you actually want them
13:11 - to look you know how they're going to
13:13 - look the actual app but this one is just
13:17 - going to be a wireframe so the whole
13:21 - idea of this one is that you can see how
13:26 - things are going to be positioned
13:27 - where where things are gonna be
13:29 - positioned so that when you actually
13:31 - build them out you see them so it's
13:35 - gonna be something like that
13:37 - and then there's going to be a start and
13:39 - a stop but here's the thing so how do we
13:44 - switch from this work timer which is the
13:46 - twenty five minutes to the the long
13:50 - break and the short break so my idea was
13:52 - actually to have a couple more rings and
13:55 - you would just swipe around so like you
13:58 - would see basically this ring here and
14:01 - we can name this like this would be the
14:03 - long break and maybe that would be a
14:06 - different color right and then we'd have
14:08 - this one here like on this side and we
14:12 - would have this as like oops so I want
14:17 - to make sure that they're the same
14:20 - distance so let's say like 50 50 and 50
14:24 - so this would be say the short break and
14:31 - this oval would be the time and if you
14:36 - were to let's say switch timers you
14:39 - would basically swipe your finger left
14:42 - or right to get the other rings so it
14:45 - would kind of look like this like you
14:47 - would swipe the rings across and then
14:49 - this would kind of click into the place
14:51 - and then this would change to like five
14:54 - minutes or something like that whatever
14:57 - that timer ends up being I just lose a
15:00 - ring all right so we would basically
15:04 - swipe it this way and you would get the
15:07 - the long break and if you kind of swipe
15:09 - it back to the middle you have the 25
15:11 - minute timer and then once you start the
15:14 - timer the these two edges these two
15:18 - rings are going to go away so I'm going
15:19 - to show that in a different art board so
15:21 - this is kind of let's name this art
15:22 - board like the initial initial State
15:29 - let's just call it initial
15:32 - and I'm gonna use my icons eight
15:37 - subscription here I'm just gonna start
15:41 - look for a play button I don't even want
15:44 - text on it I'm just gonna have like a
15:46 - play button here and that's going to be
15:49 - kind of like to start that timer and
15:56 - then what I'm gonna do is I'm gonna
15:58 - duplicate this whole art board and this
16:02 - one's gonna be called timer running so
16:08 - when the timer is running this is gonna
16:15 - change into a pause button okay
16:19 - and there's also going to be a stop
16:22 - button but the thing is I don't want to
16:26 - put them close together because it's
16:30 - gonna be really annoying if you
16:31 - accidentally stop your timer when you
16:34 - didn't mean to stop your timer right so
16:38 - it's gonna be far enough apart like that
16:43 - you know this would be running so let's
16:46 - say this runs down to like it's running
16:51 - like that and these two rings would
16:53 - actually be hidden at that point so your
16:55 - timer would only be like this when the
16:57 - timer is running
17:05 - I might actually end up moving these
17:08 - buttons a little lower to be honest so
17:11 - if we could have let's say if we could
17:16 - have all this stuff actually centered
17:19 - like well let's move this out of the way
17:23 - first let's try to Center this stuff in
17:26 - the middle of the screen seems a little
17:29 - low because the screens are actually
17:31 - pretty long like the new iPhone 10 max
17:35 - or 10s max which is what I have is
17:38 - actually a pretty it's a pretty long
17:41 - screen and these buttons we should
17:45 - actually put it closer to the bottom
17:47 - edge of the screen because if you
17:48 - imagine yourself holding the phone right
17:50 - your thumb can't reach very high like
17:53 - your thumb unless you have a really
17:54 - really long thumb but most thumbs just
17:56 - kind of reach the bottom maybe 25% or
18:00 - whatever a user experience expert would
18:02 - be able to tell you the exact percentage
18:04 - or average but a good idea would be to
18:08 - put the buttons closer to the bottom of
18:09 - the screen so if you are using your
18:11 - phone with one hand you can hit this
18:13 - Start button so let's put these guys
18:19 - back down here as well let's just move
18:24 - these guys now I'm not going like pixel
18:30 - perfect here these are just gonna be our
18:33 - wireframes but for our excuse me for our
18:35 - design composites we wanna we want to
18:38 - take a little more care on those to make
18:41 - sure that you know they're an accurate
18:44 - guide for the developer who's developing
18:47 - it now let me see just to remind myself
18:49 - I did write this up I did kind of draw
18:52 - this out on a sheet of paper first oh I
18:54 - forgot one element yeah so I wanted to
18:58 - have a when you're selecting which timer
19:00 - you're gonna use initially up here I
19:02 - wanted a label so this would be called
19:06 - Pomodoro or something
19:12 - you know we need to label the timers so
19:15 - this would be you know Pomodoro
19:19 - why don't we insert another state here
19:23 - so this would be the timer running state
19:26 - this would be selecting a timer let's
19:37 - change this that would be like a short
19:39 - short break
19:43 - so in a short break right these circles
19:48 - would move let's say they swipe this
19:51 - ring it clicks into place here and the
19:53 - ring might even be a different color so
19:59 - this would be that right there
20:08 - all right so it wasn't quite in the
20:10 - middle this is probably not in the
20:12 - middle - in sketch if you hold down the
20:15 - what is this the alt button you can kind
20:18 - of get some and then you can move your
20:22 - mouse and you can see where the
20:23 - distances are that's really really
20:25 - useful to do all right so now we have
20:30 - our timer running state do I still want
20:39 - the label there maybe maybe not maybe
20:48 - we'll just dim it out or something like
20:50 - that
20:50 - because like I said I want it to be sort
20:53 - of distraction free as clean as possible
20:55 - I just making just double-checking what
21:00 - I have in my sketches in my doodles all
21:08 - right so when the timer stops like let's
21:10 - say it's run out this is going to change
21:13 - it's going to be just one button and
21:15 - it's gonna be a restart button and then
21:18 - these rings are gonna come back so I do
21:21 - another thing here we'll call this like
21:23 - timer end so this is going to be like
21:28 - zero maybe zero zero zero zero and then
21:34 - let's come here
21:36 - I can't say it is so good guys so worth
21:43 - the money at least to me because I also
21:47 - use it for a little bit now these icons
21:54 - might not end up being the ones I use
21:57 - but for now it's it's completely fine
22:00 - you know when the timer runs out this
22:05 - label is going to come back oops
22:09 - and then the rings are also going to
22:12 - come back
22:13 - oops no on this one but on this one
22:17 - this wasn't a short break this was a
22:20 - Pomodoro okay and I thought about not
22:26 - everyone would want kind of a
22:27 - destruction free interface so for
22:30 - example here when the timer is running
22:32 - this should be hidden when the timer is
22:34 - running some people might like
22:37 - background of some sort and some people
22:40 - might like quotes one of you guys
22:42 - Iona you've mentioned that having
22:45 - motivational quotes would be awesome so
22:46 - I think that's a great idea right for
22:48 - some people will have the option to turn
22:50 - off or on so we can have kind of like
22:54 - little motivational quotes appear as the
22:57 - timer is running also backgrounds right
23:00 - having some sort of moving background or
23:03 - maybe like a tomato vine that grows as
23:05 - the timer runs would be really cool so
23:07 - these are the sorts of things that could
23:09 - be premium add-ons and they could be
23:11 - like in-app purchases so it's not
23:13 - crucial to have I don't want anyone to
23:15 - have to like buy it too to use it to
23:18 - make good use of it out of it but the
23:21 - the purchase would mostly be for
23:23 - customization for or personalization so
23:27 - I think that's a good model - on how to
23:31 - use in-app purchases okay and we also
23:37 - have settings right well this v1 won't
23:40 - have settings so this would be our v1
23:41 - right but I was thinking about a little
23:44 - farther down the line if we were to
23:46 - integrate
23:48 - the ability to customize the timers and
23:50 - stuff like that we want people to be
23:51 - able to get to a settings screen right
23:55 - so one way to do that is I could just
23:58 - put like a gear icon up here right guys
24:03 - just put it in the upper right corner or
24:05 - left corner and they would tap that
24:06 - little button and they would like flip
24:08 - over and they'd see options like it
24:11 - maybe a table view or another way that
24:15 - I'm thinking about doing it instead is
24:18 - for you to be able to just use your
24:20 - thumb and slide up and this whole screen
24:22 - would kind of slide up to reveal a
24:25 - settings screen and then you can pull it
24:27 - back down you can pull the timer screen
24:30 - back down so it's almost as if like the
24:33 - the setting screen is behind this timer
24:35 - screen but then I thought a little
24:37 - farther ahead and I was like where would
24:39 - I keep the friends list and all that
24:42 - stuff because we haven't exactly Arn
24:44 - doubt which features are gonna make the
24:47 - cut and into which phases of the project
24:49 - I decided not to go that far and let my
24:53 - mind think that far ahead because I one
24:58 - of my flaws I feel like if I analyze
25:01 - something too much and I think too much
25:04 - it end up ends up paralyzing me and I
25:07 - end up not getting anything done or just
25:09 - wasting a lot of time and time is is
25:12 - kind of short right now and as I'm sure
25:15 - it is for you as well so that's why I
25:20 - didn't have as much time to dig into
25:23 - other people's Pomodoro timers as I
25:25 - wanted to and I wanted to like read
25:27 - their reviews and see what people liked
25:29 - and didn't like about them I didn't have
25:30 - time to get into that life is busy but
25:33 - you know we're still gonna get this done
25:35 - that's why we're gonna go bite-sized you
25:38 - know so let me just save this file I'm
25:40 - gonna put it on the desktop and just
25:41 - call it like palm timer wireframes v1
25:52 - so it's literally just gonna be as
25:54 - simple as that I think we're you know
25:58 - just because it looks simple doesn't
25:59 - mean it's not gonna be good right it
26:02 - really depends what what the like what
26:07 - goal you're trying to achieve for the
26:08 - person so for me when I when I download
26:12 - these apps and I want to use a poem to
26:13 - or a timer I want to use a Pomodoro
26:15 - timer I don't want all of to get through
26:19 - all of these menus just to get the timer
26:20 - I want to know exactly how to start and
26:23 - stop my timer right so for me the number
26:26 - one rule needs to be like usability and
26:29 - user experience the second rule would be
26:32 - how does it feel is it smooth animations
26:36 - I really like animation so I'm going to
26:38 - try and incorporate that so even though
26:40 - it's like simple there are subtle
26:43 - animations you can add to it to make it
26:44 - feel like a high quality product and so
26:46 - that's kind of what I'm gonna be going
26:48 - for yeah so that that is where I'm gonna
26:53 - leave the wireframes now next I'm gonna
26:56 - show you guys how I achieved the
26:58 - background timer so just to give you
27:00 - guys a little bit of background on a
27:04 - background on how I initially thought
27:07 - about running this timer so in case you
27:11 - guys haven't used the timer class yet
27:15 - when you run a timer and starts counting
27:17 - down
27:18 - if you switch apps that timer is gonna
27:23 - stop running it doesn't continue running
27:24 - in the background there are certain
27:27 - things that you can do in the background
27:29 - that Apple lets you're Abdul you have
27:32 - you have to request not request but you
27:34 - have to turn these capabilities on so
27:36 - for example your app could fetch some
27:39 - data in the background so that when the
27:41 - user launches it it has fresh data your
27:44 - app in the background can continue to
27:47 - receive location updates so you see apps
27:50 - like Google Maps for example they still
27:52 - send you notifications about upcoming
27:54 - turns and stuff because it's still
27:56 - tracking your location even though the
27:58 - apps in the background however
28:02 - that so so thinking along that line
28:06 - that's how I first thought about doing
28:08 - this background timer the fact that I
28:12 - wanted to continue running even if you
28:14 - switch apps I was thinking oh how do I
28:16 - keep a timer running in the background
28:18 - but upon googling a lot and and finding
28:22 - some Stack Overflow posts people then
28:25 - clued me in and I didn't have to ask any
28:29 - questions because this was pretty common
28:32 - use case right people were saying that
28:36 - you shouldn't have to run a timer in the
28:38 - background right instead what you do is
28:41 - you let's say we have this countdown
28:44 - timer for 25 minutes instead what you do
28:47 - is you take note of basically one as the
28:52 - 25 minutes over so let's say it's 1 o
28:53 - clock right now so the timer should go
28:56 - off at 125 so you take note of that time
28:59 - and then when the app goes into the
29:03 - background you save that time and then
29:06 - when the app comes back into the
29:08 - foreground you pull that time back up
29:10 - from storage and you check the current
29:13 - time o if it's past then you know the
29:15 - timer's going past but if it's still
29:18 - let's say 112 or 113 or 115 you know
29:21 - it's not quite 125 yet then you know to
29:23 - resume your timer with 10 minutes left
29:25 - so you're not actually running any
29:27 - timers in the background you're just
29:29 - keeping track of a timestamp right and I
29:32 - thought wow that's completely true right
29:34 - that's brilliant
29:35 - so that's basically what I stood out in
29:38 - my demo and it works beautifully so I'm
29:40 - gonna show you guys how to do that
29:42 - right now and we have half an hour left
29:45 - so I might move a little quick so I have
29:49 - Xcode open here let me just check that I
29:51 - have this on the screen so nothing is
29:53 - blocking okay cool so I'm gonna start
29:58 - with a single view app and I'm just
30:00 - gonna call this a timer demo 3 because I
30:03 - did
30:04 - run a couple of tests right here
30:12 - yeah that's funny because I actually I
30:14 - actually got a lot of questions on
30:16 - YouTube like how does your simulator run
30:18 - so fast how does your Xcode launch so
30:20 - fast the truth is is that it doesn't you
30:24 - know everyone has to go through these
30:26 - wait times but Adrienne in
30:29 - post-production edits edits it so that
30:33 - what an internal error occurred editing
30:36 - functionality may be limited let me try
30:38 - and restart Xcode perfect time xcode to
30:44 - not work right in front of a live stream
30:48 - all right Thank You Xcode for pulling
30:52 - through so I'm going to add a label and
30:56 - I'm just going to Center this label in
31:01 - the screen and then I'm going to add a
31:04 - button and this isn't I'm not building
31:08 - the app right now it's more like I want
31:10 - to show you guys how to solve that
31:12 - problem of keeping a timer in the
31:14 - background this is gonna be quick and
31:16 - dirty I'm gonna warn you so if there are
31:21 - certain things that I'm doing that
31:22 - you're like why you know why is he doing
31:25 - that this is kind of questionable it is
31:26 - because it is questionable I'm gonna do
31:28 - things quick and dirty and not follow
31:31 - best practices because then it would
31:36 - make it harder to follow for you and B
31:38 - it would just take a lot more time so
31:40 - I'm just going to try and go fast with
31:42 - this so I've got the label in the button
31:45 - here I'm going to connect it as a
31:50 - iboutlet
31:52 - property
31:56 - and call them label and button so this
32:00 - is not what you would want to call your
32:02 - labels and buttons and actually I'm
32:05 - going to also connect a IB action
32:08 - handler so that you can so that we can
32:12 - do something when the button is tapped
32:15 - okay so let's go back into the view
32:17 - controller here all right so now we're
32:20 - going to set up our properties what
32:22 - we're gonna need is Renee did timer so
32:27 - this is going to be the timer that ticks
32:29 - every second and it's gonna kind of
32:31 - decrement that time when the app is
32:34 - active we're also going to need an end
32:36 - date so when the user whoops it's going
32:40 - to be a date when the user starts the
32:42 - timer we set the end date and that's
32:45 - basically the date which the date time
32:48 - which the timer should expire and then
32:52 - we're also going to keep track of
32:53 - another variable and this one is going
32:55 - to called I'm going to call it seconds
32:57 - left and this is going to be a time
33:00 - interval which is just it's expressed in
33:03 - seconds it's like a number of seconds
33:05 - and excuse me now I'm gonna set that to
33:08 - a hundred to begin with for this demo
33:11 - alright and we're gonna create a couple
33:13 - of different functions here first so
33:17 - let's create this here I've got timer
33:21 - functions I'm gonna put this under user
33:27 - interaction so for timer functions maybe
33:29 - create a couple here timer start and you
33:33 - have timer pause and you have timer
33:39 - loops time our end
33:44 - and I'm also gonna have timer fired or
33:50 - timer tick so each second is going to be
33:55 - a timer tick alright so the first thing
34:01 - we're gonna want to do here is when the
34:06 - button sorry Wendy yeah when the button
34:08 - is tapped we have a couple of different
34:10 - scenarios right so a is like timer is
34:16 - timer hasn't been run and the way we can
34:19 - detect that is we can just see if this
34:22 - timer variable is nil right if it has
34:24 - never been set if we've never assigned a
34:26 - timer object to this property here then
34:29 - that means the timer is like brand-new
34:32 - and hasn't started so in that case we
34:34 - would start the timer right so we can
34:37 - say if timer is nil then the timer
34:41 - hasn't been run in this case we would
34:48 - say we would create a timer so timer
34:50 - equals timer scheduled timer and we're
34:55 - going to use this one right here where
34:57 - we can set a time interval for each tick
34:59 - the target is self and the selector is
35:06 - going to be the function you want to
35:08 - fire whenever that interval occurs so
35:11 - every second we want which function I'm
35:14 - gonna run and that's this one here
35:16 - called timer tick so we're just gonna
35:18 - put that right there
35:20 - user info is gonna be nil and repeats is
35:24 - going to be true so we want this to keep
35:28 - repeating now this selector is going to
35:33 - complain because this this hashtag
35:36 - selector this is an objective-c thing
35:39 - and this timer tick function is a Swift
35:43 - function so if you want to make this
35:45 - available to those objective-c runtimes
35:49 - you have to add this and even if you
35:52 - didn't know that that's fine you all you
35:53 - have to do is click that error and
35:55 - there's gonna be like a little
35:56 - that button and when you click it's
35:58 - gonna tell you what's wrong when you
35:59 - click it it's actually just gonna add
36:01 - this Objective C tag in front of that
36:03 - function to expose this particular
36:06 - function to this hash tag selector
36:10 - all right so create timer and run it
36:20 - we're gonna also want to set an end date
36:24 - right so our end date property it's just
36:28 - going to be equal to the current date
36:29 - and time if you create a new date object
36:32 - it's just it's going to be automatically
36:34 - initialized to the current date and time
36:36 - so we're gonna do that and we're gonna
36:39 - add a time interval to it and we're
36:42 - gonna add seconds left so it's going to
36:45 - add a hundred seconds to the current
36:47 - date and time and set that as the time
36:50 - when the timer will run out and we also
36:54 - want to update the label so this I'm
36:57 - going to create a separate function I'll
36:59 - call it update label and let's create
37:03 - that function right here
37:12 - so we have a property for the label
37:15 - we're going to set the text property to
37:18 - a string we're going to convert the time
37:22 - interval to a string so that's seconds
37:25 - left and we're also going to wrap that
37:28 - inside a round statement because as
37:32 - you're gonna see when we're working with
37:34 - the date and we're subtracting other
37:37 - dates and other intervals we're gonna
37:39 - have decimal places and I just want to
37:41 - show the number of seconds so I'm just
37:44 - going to round it here alright so just
37:46 - to recap when the user taps on that
37:49 - button and there's no timer it's gonna
37:52 - schedule a timer right to take every
37:54 - second and then we're gonna set an end
37:58 - date and we're going to update the label
38:07 - all right so inside here inside the
38:10 - timer tick so this happens every second
38:13 - all right decrement the seconds left so
38:21 - seconds left - equals 1 and we're also
38:25 - going to update the label or maybe the
38:31 - UI we only have a label to update
38:34 - anyways oh that reminds me okay check if
38:43 - timer has expired
38:45 - so if the number of seconds is less than
38:49 - or equal to zero then pretty much the
38:52 - timer has expired so we're gonna call
38:54 - the timer end method which we haven't
38:57 - implemented yet it's still empty like
39:00 - that okay so this is what happens every
39:02 - second it's just gonna minus one from
39:05 - the seconds left and it's gonna update
39:08 - the label so we see in the UI and it's
39:09 - gonna check if the timer has expired so
39:11 - so far I think this is pretty intuitive
39:14 - right there's one thing I forgot to do
39:16 - which is update the text of the label
39:20 - and this would be button dot set title
39:25 - I'm going to call this pause because we
39:30 - just started it right so I'm just gonna
39:32 - run the app now so I can show you what
39:34 - this sort of basic thing looks like
39:42 - okay well that's launching and that's
39:44 - booting up I'm going to configure
39:47 - something else so in the viewdidload I
39:49 - want to configure initial initial state
39:57 - of the label and button so I'm just
40:00 - gonna say label well I just call it
40:03 - update label and for the button I'm
40:05 - gonna set the asset title to start all
40:14 - right and so I'm just gonna write it
40:15 - again now it's just gonna be really
40:19 - quick so we have a hundred seconds we
40:22 - have start when I hit start that's gonna
40:25 - start ticking down but here check this
40:28 - out if I send the app into the
40:30 - background and then I bring it back into
40:33 - the foreground you are gonna see that
40:34 - the timer actually doesn't run so let's
40:37 - do it at here it's probably at 80 for
40:40 - now so a lot a couple of seconds pass
40:46 - and then if you launch it it's still at
40:48 - C 84 so time basically the timer stops
40:52 - and we don't want that to happen and
40:54 - also nothing happens when we press pause
40:57 - right now because we haven't implemented
40:58 - that so let's quickly implement that so
41:03 - when the timer pauses what's gonna
41:05 - happen
41:06 - well when the timer pause we're gonna
41:11 - kill the timer so first we need to stop
41:16 - the timer calling the invalidate method
41:18 - on it and then we are going to we're not
41:21 - yeah we're just going to stop the timer
41:26 - reset the end date because the end date
41:30 - was set if the timer like when the timer
41:33 - is running right but if you pause the
41:35 - timer then that's going to change the
41:36 - end date and so we have to just set that
41:40 - to nil okay so
41:47 - update deep button text and then we're
41:50 - just going to set the button text whoops
41:55 - set title to continue all right so this
42:04 - would be the timer pause now when the
42:08 - button is tapped how do we check for
42:11 - that state where the the timer is
42:15 - currently paused well we would do it
42:18 - this way else if the timer is not equal
42:21 - to nil right because there is a timer
42:23 - object we've merely stopped it and the
42:29 - end date is nil right there's no end
42:32 - date because we've we've we've set it to
42:35 - nil when the the user hit pause right so
42:44 - in this case that means it's currently
42:46 - paused sorry I need to wrap my head
42:48 - around it currently paused and else if
42:54 - the timer is not nil and the end date is
42:57 - also not nil then this is currently
43:02 - running so what do we want to happen if
43:07 - it's currently running and you hit the
43:09 - button right we want to pause it right
43:11 - so you would call timer pause here and
43:15 - if it's currently paused and the user
43:19 - just tapped the button then what would
43:20 - you want to do you want to restart the
43:23 - timer
43:30 - yeah this coat right here
43:33 - when I put the timer hasn't been run
43:36 - this chunk of code for creating the
43:39 - timer and setting the end date and
43:41 - updating the label and updating the
43:42 - button text I'm actually going to move
43:44 - that into the timer start function
43:48 - that's what that's what I created that
43:50 - for so all of that code is in here so
43:54 - when the user hits the button here we
43:57 - just call timer start alright so if the
44:01 - timer hasn't been run yet we want to
44:03 - call a timer start which is going to
44:04 - start the timer set the end date update
44:07 - the label update the button if the timer
44:10 - is currently paused we also want to do
44:12 - the same thing so that's why you know
44:15 - we're gonna be able to merge these two
44:17 - clauses and then if it's currently
44:20 - running in the user taps on the button
44:21 - then we want to pause it alright so I
44:24 - hope I haven't confused you guys so I'm
44:27 - gonna take this and I'm gonna merge it
44:29 - with this if if statement all I'm gonna
44:31 - do is use an or clause and put it into
44:35 - these brackets here so timer hasn't been
44:39 - run or timer is currently paused either
44:48 - case is the same to us because we're
44:50 - gonna need to set a new end a date based
44:53 - on the seconds that are left when the
44:57 - user hits start so let me let me show
44:59 - you guys this let me run it right now
45:01 - and show you that we have pausing
45:03 - working so all of this is just starting
45:07 - the timer and pausing it and stopping it
45:10 - we haven't actually gone to the part yet
45:12 - where we send it to the background and
45:14 - still have the timer running we're gonna
45:15 - get to that in just a second alright so
45:18 - I'm gonna hit pause and it's stopped at
45:21 - 89 and then when you hit continue
45:24 - based on the 87 or 80 what ever seconds
45:28 - were left it sets a new end date okay so
45:32 - that's what happened so we have pausing
45:34 - and continuing and starting working now
45:38 - so what happens when the timer
45:41 - and let's do that let's kill the timer
45:47 - by doing timer not invalidate and that's
45:52 - reset the timer reset the end date
45:58 - update the button text so we are going
46:03 - to assign nil to our timer property and
46:07 - data is going to be nil and the button
46:10 - text is going to be restart all right so
46:20 - I'm going to set the seconds to 10 so
46:24 - that we can actually take a look at this
46:32 - all right so we've got ten seconds I'm
46:34 - gonna start running it right now six
46:37 - five four three two all right so it
46:44 - stops and then we hit restart - is it
46:50 - gonna do anything if we hit that yeah so
46:53 - if we hit restart right now it's gonna
46:55 - come into this if clause it's gonna see
46:57 - that timer is nil and it's gonna do
46:59 - timers start so you can hit restart oh
47:04 - hey we didn't we didn't reset the number
47:08 - of seconds that's the problem here so
47:15 - why don't we basically set hard-code the
47:20 - number of seconds like obviously for our
47:23 - real app we wouldn't do this because
47:24 - right now I'm just like resetting it to
47:27 - ten or a hundred and we would actually
47:29 - be using constants as well so we
47:32 - wouldn't be just hard coding numbers in
47:34 - here but for the purpose of this demo
47:36 - that is fine to me alright so now let's
47:39 - implement the part where the timer goes
47:41 - into the background and it's still
47:43 - running because right now if I show it
47:45 - to you as I demonstrated it before if I
47:48 - send the timer to the background it
47:50 - stops running right so we want it to
47:53 - continue to run and so the technique
47:56 - that we're going to use is there are two
48:00 - functions which we're going to make use
48:02 - of one is that the system detects when
48:05 - your app moves to the background and you
48:07 - have a chance to actually perform some
48:10 - operations so at that point in time when
48:13 - our app is going to move to the
48:14 - background we're gonna check what state
48:16 - the timer is in if the timer is
48:18 - currently running like it is now we are
48:20 - going to take the end date and we're
48:23 - going to save it into local user
48:26 - defaults so it's just local storage on
48:28 - the device and then when the app comes
48:31 - back into the foreground again we can
48:34 - detect that and then we will check local
48:36 - storage for that end time and we're
48:38 - going to compare it with the current
48:39 - date and time if it's already past then
48:43 - we're not going to do anything but if it
48:45 - hasn't
48:45 - yet then we are going to initialize the
48:50 - timer and start the timer with the
48:54 - number of seconds left between the
48:57 - current date and time and the end date
48:59 - that was saved so if you didn't get that
49:03 - don't worry because we're gonna write it
49:05 - out now and it's probably gonna make a
49:07 - lot more sense so call these at
49:11 - lifecycle methods so I'm just gonna be
49:18 - overriding the view will disappear and
49:19 - the view will appear in here so the
49:23 - interesting thing to note is that
49:29 - sending your app into the background and
49:32 - bring it back to the foreground doesn't
49:33 - actually trigger these two view
49:38 - controller methods however if you have a
49:41 - multi screen to app and you're switching
49:43 - between like one view to another view
49:46 - then it will fire these two however we
49:52 - are still gonna put the code here for
49:54 - this demo because I just want I don't
49:57 - want to create a whole bunch of
49:58 - different classes and create a singleton
50:01 - for it but I'm just gonna put all the
50:04 - code here and then inside the app
50:06 - delegate which is actually where those
50:09 - two methods are because if you check in
50:11 - the app delegate you'll find methods
50:12 - like application will resign active that
50:15 - means your your app is gonna stop
50:18 - becoming the active foreground app and
50:20 - it's going to the background right and
50:25 - then this is like when it did enter the
50:27 - background so there are these different
50:28 - points in time where you can add some
50:30 - code here this is will enter the
50:34 - foreground and did become active all
50:37 - right so these are the methods we're
50:38 - gonna take advantage of to do that
50:41 - saving of the end date and then
50:43 - restoring of the end date but I'm from
50:46 - here from the app delegate I'm going to
50:48 - be triggering the view will disappear
50:49 - and the view will appear but this is not
50:52 - ultimately how we're gonna do it but for
50:53 - this demo this is what I'm gonna do
50:55 - so we're going to first get a reference
50:59 - to the standard user defaults actually
51:04 - before we do that we need to check if
51:07 - timer is running right so if the timer
51:11 - is not nil and the end date is not nil
51:15 - then that means that that means that the
51:21 - timer is running so we're gonna save the
51:26 - end date
51:28 - we're gonna go defaults dot set value
51:32 - and we're gonna put in the end date and
51:35 - we're gonna call the key end a date now
51:39 - in a real app we would not just use
51:43 - strings like that because they're easily
51:45 - you can create typos as you can see
51:48 - we're gonna type this string a couple of
51:49 - times so you do want to use a constant
51:51 - so when I actually show you guys me
51:53 - building the actual app you'll see me
51:55 - doing that but I'm starting to run out
51:58 - of time so timer is running so save the
52:05 - end date and here check if there's and
52:12 - end date saved so if let date equals
52:18 - actually I need to get a reference to
52:20 - the user defaults first if defaults
52:23 - equals user defaults the standard
52:28 - defaults thought value for key and date
52:33 - and we're gonna try and cast this as a
52:35 - date so if that is not nil then there's
52:39 - a date so here we're going to check if
52:42 - if the current date is oops the current
52:50 - date is past that date then timer has
52:54 - expired but if not then we are going to
52:59 - get the difference get the seconds left
53:04 - and we're gonna do that by saying date
53:09 - will let actually not left but seconds
53:14 - left is equal to date time interval
53:22 - since and passing the current date and
53:27 - this is going to give us the difference
53:29 - between the end date and the current
53:33 - date and time when I say date I also
53:35 - mean date time so the end date and time
53:38 - the difference in seconds to the current
53:42 - date and time so that's then we're going
53:44 - to set that to seconds left and then
53:46 - what we're going to do is just call
53:47 - timer start timer start and then we are
53:55 - also going to clear the end date from
53:59 - the defaults so if defaults thoughts set
54:02 - value I'm gonna set it to nil for key
54:06 - and date so you see we wrote this key
54:09 - three times and I could have made a typo
54:12 - in any of those so we will use constants
54:15 - alright so I think I think that might be
54:19 - it I'm just so if the timer is not nil
54:26 - and there is an end date
54:30 - I mean it's currently running so we
54:33 - should stop it
54:44 - and we should save the end date and then
54:50 - when it comes back we're checking if
54:52 - there is an end date if the current date
54:56 - is greater than the end date timer has
54:59 - expired else we get the difference and
55:01 - we start the timer and then we basically
55:05 - reset what's in the storage all right so
55:11 - that's good now the thing to check is
55:14 - like if we put some breakpoints here I'm
55:17 - gonna run my app and I'm gonna send it
55:23 - into the background and you guys will
55:24 - see
55:24 - okay so viewwillappear does get called
55:27 - when the app initially launches but
55:30 - let's say I'm running the timer now and
55:33 - I send it into the background you can
55:35 - see that it doesn't trigger any of these
55:37 - breakpoints which kind of defeats the
55:39 - purpose right if I bring it back it
55:44 - doesn't it hasn't been running in the
55:46 - background because we didn't have you
55:50 - know we don't have this code in place so
55:53 - what does get triggered however is
55:56 - inside the app delegate here so let's
55:59 - see which one we want to take advantage
56:01 - of sent when the application is about to
56:03 - move from active to inactive pause
56:08 - ongoing disabled timers and invalidate
56:11 - graphics such as okay did enter
56:18 - background use this method to release
56:19 - shared resources and validate timers and
56:22 - store enough application state
56:23 - information to restore your application
56:25 - to its current state in case it is
56:27 - terminated later all right so that's
56:29 - this is where we're going to do it
56:31 - so here we're going to now this not what
56:34 - we're gonna do in our real app but I'm
56:37 - gonna level this Hawk force view will
56:46 - this appear to be called from in our
56:51 - view controller
56:53 - so we are going to get a reference to
56:57 - that root view controller and we are
57:01 - going to call begin appearance
57:04 - transition tell us a child view
57:06 - controller its appearance is about to
57:08 - change
57:08 - and so this kind of allows us to trigger
57:11 - that so is appearing is sorry is false
57:15 - because it's disappearing I an animated
57:17 - is false
57:18 - and then we also have to match that with
57:21 - a sorry not begin but this one the
57:27 - closing one would be end of parents
57:30 - transition alright so this now when it
57:36 - enters the background it's going to call
57:39 - this code and this is going to trigger
57:41 - the view will disappear which is going
57:45 - to run our code here and I'll tell you
57:47 - in a second in the in the real app how
57:52 - I'll be doing it instead of this way
57:55 - call this part of the transition from
57:56 - background to active state restart any
57:59 - tasks that were paused so this is where
58:01 - we're going to do it here again we are
58:04 - going to hack force view will appear to
58:11 - be called in our view controller window
58:17 - root view controller begin appearance
58:20 - transition look at this time it's true
58:22 - because it is appearing and then the
58:24 - clothes the other pair of this is end
58:28 - the parents transition alright now it's
58:32 - time to run it and I can show you how
58:34 - this works because now it will be
58:38 - triggering view will disappear and
58:40 - disappear in view will appear so let me
58:42 - put some breakpoints here let me start
58:46 - the timer here so it the end date and
58:50 - time is set to 100 seconds from now I'm
58:53 - gonna send this the background at 90 and
58:55 - let's say sorry for the lawnmower
58:59 - someone's running a lot more alright
59:01 - view will disappear so this is triggered
59:03 - right it's gonna
59:05 - detect that there is a timer and there
59:07 - is an end date it's gonna stop the timer
59:08 - and then it's gonna set the end date
59:11 - into the defaults like that and then we
59:15 - can wait like a couple of seconds all
59:22 - right and then you can see that wheel
59:25 - view will appear as called and then it's
59:28 - gonna check the date inside the local
59:30 - storage it's gonna see that it hasn't
59:32 - passed yet and now it's going to
59:34 - calculate the number of seconds left so
59:36 - we can take a look at that seconds left
59:40 - is 50 because we as it's been paused
59:44 - it's still been going right so timers
59:47 - start and it's gonna resume
59:52 - let me remove this these breakpoints oh
59:56 - you know what I did
59:58 - inside the timer start method I
60:01 - hard-code the number of seconds to 100
60:03 - we need to remove this line so this line
60:07 - let's do it we're just going to reset
60:10 - the number of seconds when the timer
60:12 - ends all right so let's run it and I'll
60:15 - show you this is how you do the timer in
60:19 - the background all right so like 95 and
60:27 - then we're gonna send it into the
60:28 - background we'll wait a couple of
60:30 - seconds I'm gonna bring it back and you
60:35 - can see that it's like 86 now so that's
60:39 - how that works
60:41 - now like I said well it is 2 o'clock now
60:45 - but I'm gonna keep going if you guys can
60:47 - stay you guys are welcome to stay I just
60:49 - want to finish explaining how kind of
60:54 - like some of the shortcuts that we took
60:56 - in this demo just to show you guys how
60:58 - this works versus when we are building
61:01 - the real app how we're going to be
61:05 - keeping track of that time so the cost
61:08 - the concept is the same you know keeping
61:11 - the timestamp in the back I keep looking
61:12 - down here I'm sorry but the camera is up
61:14 - here we are going to be keeping the date
61:16 - in the
61:17 - localstorage when the app goes to the
61:19 - background same thing but in this demo
61:21 - just for speed and for understandability
61:23 - eyes put all the code inside this view
61:26 - controller right that's not what we want
61:27 - to do so when we're building this out
61:30 - for real I'm going to have a singleton
61:32 - like Pomodoro timer class and that is
61:36 - going to be keeping track of the timers
61:39 - and the end dates and stuff like that
61:40 - now Singleton's get a bad rap right so
61:44 - you want to make sure that you are like
61:46 - you're justified in using it and the way
61:49 - that I justify and using it for this app
61:51 - is because we're not just going to be
61:54 - having this view controller here be the
61:59 - only view in this app right there's a
62:02 - settings screen when we do that social
62:03 - stuff there's gonna be like social
62:05 - screens and stuff like that but your
62:09 - timer should still be running right if
62:11 - you said it the set of Pomodoro for like
62:13 - 25 minutes and then you go to a
62:14 - different screen the timer shouldn't
62:16 - stop or I should continue running and so
62:18 - that's why I can't put the timer in any
62:20 - specific view controller like that and
62:23 - the other reason why is because inside
62:27 - the app delegate this is where sorry
62:29 - those methods are for detecting the
62:32 - application going to the background and
62:34 - coming into the foreground and stuff
62:35 - like that and so I don't want to do like
62:39 - this sort of hack here where I'm forcing
62:41 - the view controller to to like think
62:45 - that it is view will disappear view will
62:47 - appear that it is transitioning and but
62:50 - if I have my timer stuff inside a
62:52 - singleton class then it will also be
62:55 - accessible from here so that's my
62:58 - thinking right now that's I haven't
62:59 - actually done it yet but so far that's
63:03 - kind of my line of thought if you guys
63:07 - want this source code I will make it
63:09 - available but like I said don't follow
63:12 - any of the practices I did here it's
63:14 - more for you examining kind of like the
63:17 - timer keeping track of timers in the
63:20 - background all right so don't take this
63:23 - like oh this is what I should do because
63:26 - Chris is doing it in here that's
63:28 - yeah no okay so that's all I wanted to
63:33 - show you guys this video I'm gonna take
63:37 - one minute to talk about going forward
63:40 - kind of like what my next steps are and
63:41 - then I'm gonna take a look at what
63:42 - questions you have you have you guys
63:44 - have so I said I wanted to submit this
63:48 - app by the end of the month which is
63:50 - like a week away so I don't think that
63:52 - is feasible anymore I'm gonna give
63:54 - myself like another half week but we're
63:57 - not gonna have another live stream till
63:59 - next Wednesday right and I also want the
64:04 - this process of creating this v1 of the
64:07 - Pomodoro app to be a video series which
64:10 - I can send people to to watch right so
64:14 - my plan is basically to do the actual
64:18 - coding of and applying the graphic
64:23 - assets to the Pomodoro app inside like
64:26 - structured videos where you know I do an
64:28 - introduction and then I do the code and
64:30 - I do a conclusion type of thing and I'm
64:32 - gonna put that into a video playlist and
64:34 - then I'm also gonna mention if you guys
64:36 - want to see kind of the behind the
64:37 - scenes and the thought and like the
64:40 - making of almost you know how like in a
64:42 - DVD blu-ray sometimes they have behind
64:45 - the scenes or making of that's kind of
64:47 - like not the core feature presentation
64:50 - but if you want to know more so I'm
64:52 - gonna have this these live streams is
64:55 - that that because we're not actually
64:57 - building that up here right we're
64:58 - talking about ideation and why are
65:00 - framing the thought process behind what
65:03 - like how this app came to be so I'm
65:07 - gonna leave the actual production of the
65:10 - app like coding it in inside structured
65:14 - videos which won't be a live stream and
65:15 - then when we get to submitting this app
65:17 - I will do a live stream yet so between
65:21 - now and next Wednesday I'm going to try
65:23 - to actually build this app out I'm gonna
65:26 - produce a set of videos for it which I'm
65:29 - gonna launch to you guys I'm not sure if
65:31 - I'm gonna launch it like Netflix styles
65:33 - so that you can binge it and it's not
65:35 - gonna be long anyways I think it's gonna
65:36 - be like maybe four or five videos long
65:40 - or whether I should space
65:42 - out because that way that way I have
65:46 - more content each week right and I know
65:48 - for you guys you probably want it all
65:50 - that once I'll see where I get with that
65:53 - in the next week and a half I do want to
65:56 - launch in the next week and a half so
65:57 - not in the next live stream but probably
66:00 - the one after that we will press submit
66:03 - together I'll show you guys I'll walk
66:05 - you guys through creating the iTunes
66:07 - Connect app description and the
66:10 - screenshots and all that stuff and then
66:11 - we're gonna hit submit together I'm
66:12 - going to launch this baby but as for the
66:16 - actual videos for coding it up so that's
66:20 - gonna be released from now anytime from
66:24 - now to a week and a half later yeah so
66:28 - those won't be live streams so those
66:29 - would be like concise videos and for
66:32 - anyone who wants to see the making of or
66:34 - behind the scenes they can watch these
66:35 - live streams the replays of them alright
66:38 - so now on to questions for you guys
66:39 - questions from you guys let me take a
66:41 - look
66:42 - Oh Igor thanks thanks for letting me
66:46 - know that the volume is too low I will I
66:48 - will probably put my mic down here next
66:51 - time so that it's more more in the
66:54 - direct line of where I'm talking okay
66:56 - let me move let me move up here if you
67:00 - guys have questions now maybe you can
67:02 - maybe you retype them or next time I
67:05 - might have Adrian put the questions in a
67:08 - separate list or something like that so
67:10 - I am NOT scrolling to the chat see Steve
67:13 - figma is unlimited for like individuals
67:16 - so if you're building apps for yourself
67:18 - it's perfect
67:18 - I think most of these questions are
67:20 - being answered anyways so if you have a
67:22 - question that hasn't been answered
67:25 - maybe type it in and for those for those
67:29 - of you who have to leave now thank you
67:31 - so much for watching thank you for
67:32 - joining the live stream and I'll see you
67:34 - guys next week but in the meantime keep
67:36 - your eyes peeled for the actual
67:39 - development videos from now until
67:41 - Wednesday so make sure you're subscribed
67:42 - to the channel if you don't want to miss
67:44 - those videos so just in case some some
67:47 - of you guys have to leave thanks for
67:48 - joining and I'll see you guys next time
67:49 - if you have chance to stay then go ahead
67:54 - okay not too many questions this time
67:56 - because I guess I was just like typing
67:58 - and and showing you guys how to do stuff
68:01 - but alright so thank ya thank you so
68:05 - much again for joining doesn't look like
68:07 - there are any questions left unanswered
68:09 - I really appreciate you guys and I can't
68:13 - wait to submit more apps and build more
68:14 - apps with you guys alright
68:16 - I'll catch you guys next time bye for
68:17 - now

Cleaned transcript:

hey guys can everyone hear me can you guys see my screen I just type in the chat just wanna make sure that everyone can see me see my screen and they can hear what I'm saying before we get started I've got the agenda on the screen right now so you should be able to see that all right then let's get started okay so just a brief recap for you guys who are just joining this episode in the last livestream which was last Wednesday we started a new series called how to make an app from scratch and this is where I'm gonna take a nap idea that I have created live from scratch no preplanning and anything like that so that you guys can see step by step the whole entire app process and then we're gonna launch it into the app store together now we're on Episode two and I'm gonna do a quick just a very brief recap on what we did in the last lesson but before that I totally forgot welcome to the code with Chris livestream Adrian is manning the chat so make sure you guys don't spam the chat cuz he's gonna be moderating it type all your questions in one message don't break it up so that he can easily manage all of the messages and the questions for the end of the livestream we also have recording on this livestream so it's gonna be available to watch after the fact in case you miss any bit of it and if you're watching this live stream the replay of it you guys can check the description will have little timestamps and you can click on those to jump to different points of the live stream so you don't have to watch but you guys who are here watching live I appreciate you guys so very much okay so and you guys will get your questions answered too so that's the benefit of attending this live you guys we can do some interaction I can get to know you guys and you guys can get to know me as well okay cool so let me do that quick recap in the last lesson I wrote last lesson the last livestream I revealed what my app idea was which was to create a Pomodoro timer and Pomodoro is just a technique to stay productive where you set timers for your work sessions and your break sessions but the twist on this app idea is to add a social aspect to it so you can have friends and you can encourage each other and challenge each other to complete more Pomodoro's in palma doors are just 25minute chunks of work time so in the last lesson we also took a look at the app store to see what kind of other Pomodoro timers there were and there are a ton but we didn't find any that had social features integrated into it and we also came up with some features and requirements as you can see on the screen right now so we took all of those features and requirements and we broke it up into like a core feature set kind of our minimal Viable Product that we're gonna get launched right away and this is going to at least for me get me motivated to do more and we can also get feedback and incorporate that into subsequent incremental updates because for me if I really large project and you know I want to make it completely perfect and have all these features before I launch it chances are life is gonna occur you know something's gonna happen with my kid hey you know other priorities are gonna come up and that project is not going to get finished so I would my priority is to get the useful version of this app it has to be at least useful right or else no one's going to use it a bare minimum useful version of this app into the App Store so that people can start using it and giving me feedback on it now I think that aside from the social features that is going to differentiate this Pomodoro timer from the rest of them out there we also probably need to differentiate our you know what's gonna make our version better is through the user experience in the UI so that's going to have a lot to do with it so things like how things animate how easy it is to use because I did mention in the previous livestream that I downloaded a couple to try there were some I couldn't even figure out how to use it and we're talking about timer right so it has to be very an intuitive to use so in this livestream what I'm going to do is I'm gonna I have some ideas about how the app is gonna look at least this v1 and we're gonna start with wire framing it out and if you're not sure what that means it's basically like a sketch I actually did this on a piece of paper first so I took a pencil I took a piece of paper and I started just doodling and plotting out my ideas getting them onto paper in a rough form and in today's live stream I'm going to use a graphics app and then we are going to kind of clean it up and make it look like proper wireframes that you would submit to a client or something like that well not that proper because there's going to be a lot more detail that goes into a document like that if your client is gonna pay you a ton of money but for our purposes as long as we know you know where our main elements are gonna be laid out like we're where the timer is gonna be running where the start and stop buttons are and stuff like that that gives me enough confidence to move on another thing that I mentioned in the last live stream was that one of the challenges that I foresee is how to have the timer run in the background I know it's possible because hey other Pomodoro apps are out there in the App Store right but I just technically didn't know how to do it I didn't know I didn't do it before so from since the last livestream I went away and did some research I did some tests and I figured it out and it's not what you think at least it's not how I thought it would be done so I'm gonna show you guys how to do that too so we're gonna do a little demo and I'm gonna show you how to run timers in the background all right so we're gonna get started with the wireframe portions now oh I'm glad to see that there are so many people here welcome you guys again if you're just joining this will be recorded so you're gonna be able to watch the livestream afterwards all right so let's get started with the wireframe so I'm gonna use I'm gonna do this in sketch if you're not sure what this is it's just the graphics app that we're we're people it's like the most popular one where people are building they're designing their app graphic assets here another one that's free this one's not free another one that's free is called figma which is actually very similar so I would go ahead and check that out now I would use figma just to show you guys and I said I would but the fact is I haven't done this yet and I'm just not as confident in figma as I am and sketch even though they are pretty similar and so I don't want to waste your guy's time while I'm doing this live and so I'm going to use the program I'm a little familiar a little more familiar with but just for you guys who have are just starting to get into designing app graphics for your app I would definitely check out figma first before you go and pay for something like sketch back then when I bought a license for Sketch figma wasn't out yet and you can see here I'm actually using a I think I'm like two versions behind from the latest version of sketch because they change the interface in the latest version so it actually I hear that it's a little bit different but it's not like all that different so I haven't upgraded yet alright so first of all we're going to do is we're gonna create an artboard which is just like an aframe of your of your iPhone so we can choose from a couple of different ones here I'm gonna work with the iPhone I guess it'll be iPhone se right now so you kind of want to work with the iPhone size that is most common alright so you want to make sure definitely that your app looks perfect with that and then depending on if the screen size is larger or smaller you can you can design a different set if it's gonna be all that different but you do want to be working on kind of the most common size and just to remind you guys this is basically a timer and v1 here let me just bring up the features I should do that so that we kind of know what we're actually wireframing out here so to do a quick recap in v1 we have three timers all right we have a 25minute timer that's the work timer where we have a five minute break timer so after every 25 minutes you're gonna take a five minute break we also have a longer break timer so I think it's every four pompadours that you finish you got to take a longer break and this is actually like fifteen to thirty minutes long according to Wikipedia X I wasn't sure about this so according to Wikipedia a short break is like three to five minutes and the longer break is fifteen to thirty minutes in the one I didn't make it customizable and I'm I'm starting to think about whether or not I should make it customizable but I'm not gonna think about that right now I'm just gonna set it to 25 minutes like this might be a deal breaker for some people who follow the Pomodoro Technique if the timer isn't customizable and they're used to using like a fifteen minute break or a 30 minute break like this app this v1 will be too inflexible for them to use so I might consider actually you know putting this timer feature into v1 but I'm gonna see what sort of time like what sort of timeline this ends up being because I do want to get this out the door hopefully like in a week to a week and a half and you know if this is gonna be more work like a week more work I probably just launched it anyways because the thing with these apps is that these days I feel like there are so many apps out there there's so many new apps coming out every day that your app isn't very discoverable so if you really do want your app to be successful you need to have a marketing plan you can't just like launch your app and expect Oh everyone's going to download it and try to use it it's almost like even if I publish this app into the App Store no one is going to know about it unless I you know have some sort of marketing push or I build up an audience beforehand with a landing page or something like that and build up that anticipation for it I mean you guys will know so thank you guys will download it right hopefully but that's why I'm not not as concerned if even if we publish this v1 with these kind of like fixed timers we can release this ability to customize the durations of the timer so we can release this as an update you know fairly soon after all right so in v1 we basically have three timers the ability to start them pause and resume and to stop the timer all right that's it so this interface is actually pretty simple now the idea that I had was I want it to be a very clean and distractionfree because that's the whole point of getting work done right so I don't want to like busy the interface with a whole bunch of text and all that stuff and so my idea basically revolves around a circle so the oval first all right I'm gonna put a circle here and I want it to look kind of like the apple rings sorry Apple watch rings I don't know if you have an Apple watch but it tries to get you to do exercise and it gets you to try to fill these rings and you see them in the commercials and the keynotes all the time so I wanna kind of make a ring like that that maybe glows a little bit we'll see how we treat it design wise but basically want to have a ring like that so it's kind of like a progress ring right and then I'm gonna have the timer in the middle the time oh I should actually you you San Francisco see me out of that I don't have that installed on this machine actually so I'll just use Helvetica doesn't really matter these aren't the design composites the design composites you actually want them to look you know how they're going to look the actual app but this one is just going to be a wireframe so the whole idea of this one is that you can see how things are going to be positioned where where things are gonna be positioned so that when you actually build them out you see them so it's gonna be something like that and then there's going to be a start and a stop but here's the thing so how do we switch from this work timer which is the twenty five minutes to the the long break and the short break so my idea was actually to have a couple more rings and you would just swipe around so like you would see basically this ring here and we can name this like this would be the long break and maybe that would be a different color right and then we'd have this one here like on this side and we would have this as like oops so I want to make sure that they're the same distance so let's say like 50 50 and 50 so this would be say the short break and this oval would be the time and if you were to let's say switch timers you would basically swipe your finger left or right to get the other rings so it would kind of look like this like you would swipe the rings across and then this would kind of click into the place and then this would change to like five minutes or something like that whatever that timer ends up being I just lose a ring all right so we would basically swipe it this way and you would get the the long break and if you kind of swipe it back to the middle you have the 25 minute timer and then once you start the timer the these two edges these two rings are going to go away so I'm going to show that in a different art board so this is kind of let's name this art board like the initial initial State let's just call it initial and I'm gonna use my icons eight subscription here I'm just gonna start look for a play button I don't even want text on it I'm just gonna have like a play button here and that's going to be kind of like to start that timer and then what I'm gonna do is I'm gonna duplicate this whole art board and this one's gonna be called timer running so when the timer is running this is gonna change into a pause button okay and there's also going to be a stop button but the thing is I don't want to put them close together because it's gonna be really annoying if you accidentally stop your timer when you didn't mean to stop your timer right so it's gonna be far enough apart like that you know this would be running so let's say this runs down to like it's running like that and these two rings would actually be hidden at that point so your timer would only be like this when the timer is running I might actually end up moving these buttons a little lower to be honest so if we could have let's say if we could have all this stuff actually centered like well let's move this out of the way first let's try to Center this stuff in the middle of the screen seems a little low because the screens are actually pretty long like the new iPhone 10 max or 10s max which is what I have is actually a pretty it's a pretty long screen and these buttons we should actually put it closer to the bottom edge of the screen because if you imagine yourself holding the phone right your thumb can't reach very high like your thumb unless you have a really really long thumb but most thumbs just kind of reach the bottom maybe 25% or whatever a user experience expert would be able to tell you the exact percentage or average but a good idea would be to put the buttons closer to the bottom of the screen so if you are using your phone with one hand you can hit this Start button so let's put these guys back down here as well let's just move these guys now I'm not going like pixel perfect here these are just gonna be our wireframes but for our excuse me for our design composites we wanna we want to take a little more care on those to make sure that you know they're an accurate guide for the developer who's developing it now let me see just to remind myself I did write this up I did kind of draw this out on a sheet of paper first oh I forgot one element yeah so I wanted to have a when you're selecting which timer you're gonna use initially up here I wanted a label so this would be called Pomodoro or something you know we need to label the timers so this would be you know Pomodoro why don't we insert another state here so this would be the timer running state this would be selecting a timer let's change this that would be like a short short break so in a short break right these circles would move let's say they swipe this ring it clicks into place here and the ring might even be a different color so this would be that right there all right so it wasn't quite in the middle this is probably not in the middle in sketch if you hold down the what is this the alt button you can kind of get some and then you can move your mouse and you can see where the distances are that's really really useful to do all right so now we have our timer running state do I still want the label there maybe maybe not maybe we'll just dim it out or something like that because like I said I want it to be sort of distraction free as clean as possible I just making just doublechecking what I have in my sketches in my doodles all right so when the timer stops like let's say it's run out this is going to change it's going to be just one button and it's gonna be a restart button and then these rings are gonna come back so I do another thing here we'll call this like timer end so this is going to be like zero maybe zero zero zero zero and then let's come here I can't say it is so good guys so worth the money at least to me because I also use it for a little bit now these icons might not end up being the ones I use but for now it's it's completely fine you know when the timer runs out this label is going to come back oops and then the rings are also going to come back oops no on this one but on this one this wasn't a short break this was a Pomodoro okay and I thought about not everyone would want kind of a destruction free interface so for example here when the timer is running this should be hidden when the timer is running some people might like background of some sort and some people might like quotes one of you guys Iona you've mentioned that having motivational quotes would be awesome so I think that's a great idea right for some people will have the option to turn off or on so we can have kind of like little motivational quotes appear as the timer is running also backgrounds right having some sort of moving background or maybe like a tomato vine that grows as the timer runs would be really cool so these are the sorts of things that could be premium addons and they could be like inapp purchases so it's not crucial to have I don't want anyone to have to like buy it too to use it to make good use of it out of it but the the purchase would mostly be for customization for or personalization so I think that's a good model on how to use inapp purchases okay and we also have settings right well this v1 won't have settings so this would be our v1 right but I was thinking about a little farther down the line if we were to integrate the ability to customize the timers and stuff like that we want people to be able to get to a settings screen right so one way to do that is I could just put like a gear icon up here right guys just put it in the upper right corner or left corner and they would tap that little button and they would like flip over and they'd see options like it maybe a table view or another way that I'm thinking about doing it instead is for you to be able to just use your thumb and slide up and this whole screen would kind of slide up to reveal a settings screen and then you can pull it back down you can pull the timer screen back down so it's almost as if like the the setting screen is behind this timer screen but then I thought a little farther ahead and I was like where would I keep the friends list and all that stuff because we haven't exactly Arn doubt which features are gonna make the cut and into which phases of the project I decided not to go that far and let my mind think that far ahead because I one of my flaws I feel like if I analyze something too much and I think too much it end up ends up paralyzing me and I end up not getting anything done or just wasting a lot of time and time is is kind of short right now and as I'm sure it is for you as well so that's why I didn't have as much time to dig into other people's Pomodoro timers as I wanted to and I wanted to like read their reviews and see what people liked and didn't like about them I didn't have time to get into that life is busy but you know we're still gonna get this done that's why we're gonna go bitesized you know so let me just save this file I'm gonna put it on the desktop and just call it like palm timer wireframes v1 so it's literally just gonna be as simple as that I think we're you know just because it looks simple doesn't mean it's not gonna be good right it really depends what what the like what goal you're trying to achieve for the person so for me when I when I download these apps and I want to use a poem to or a timer I want to use a Pomodoro timer I don't want all of to get through all of these menus just to get the timer I want to know exactly how to start and stop my timer right so for me the number one rule needs to be like usability and user experience the second rule would be how does it feel is it smooth animations I really like animation so I'm going to try and incorporate that so even though it's like simple there are subtle animations you can add to it to make it feel like a high quality product and so that's kind of what I'm gonna be going for yeah so that that is where I'm gonna leave the wireframes now next I'm gonna show you guys how I achieved the background timer so just to give you guys a little bit of background on a background on how I initially thought about running this timer so in case you guys haven't used the timer class yet when you run a timer and starts counting down if you switch apps that timer is gonna stop running it doesn't continue running in the background there are certain things that you can do in the background that Apple lets you're Abdul you have you have to request not request but you have to turn these capabilities on so for example your app could fetch some data in the background so that when the user launches it it has fresh data your app in the background can continue to receive location updates so you see apps like Google Maps for example they still send you notifications about upcoming turns and stuff because it's still tracking your location even though the apps in the background however that so so thinking along that line that's how I first thought about doing this background timer the fact that I wanted to continue running even if you switch apps I was thinking oh how do I keep a timer running in the background but upon googling a lot and and finding some Stack Overflow posts people then clued me in and I didn't have to ask any questions because this was pretty common use case right people were saying that you shouldn't have to run a timer in the background right instead what you do is you let's say we have this countdown timer for 25 minutes instead what you do is you take note of basically one as the 25 minutes over so let's say it's 1 o clock right now so the timer should go off at 125 so you take note of that time and then when the app goes into the background you save that time and then when the app comes back into the foreground you pull that time back up from storage and you check the current time o if it's past then you know the timer's going past but if it's still let's say 112 or 113 or 115 you know it's not quite 125 yet then you know to resume your timer with 10 minutes left so you're not actually running any timers in the background you're just keeping track of a timestamp right and I thought wow that's completely true right that's brilliant so that's basically what I stood out in my demo and it works beautifully so I'm gonna show you guys how to do that right now and we have half an hour left so I might move a little quick so I have Xcode open here let me just check that I have this on the screen so nothing is blocking okay cool so I'm gonna start with a single view app and I'm just gonna call this a timer demo 3 because I did run a couple of tests right here yeah that's funny because I actually I actually got a lot of questions on YouTube like how does your simulator run so fast how does your Xcode launch so fast the truth is is that it doesn't you know everyone has to go through these wait times but Adrienne in postproduction edits edits it so that what an internal error occurred editing functionality may be limited let me try and restart Xcode perfect time xcode to not work right in front of a live stream all right Thank You Xcode for pulling through so I'm going to add a label and I'm just going to Center this label in the screen and then I'm going to add a button and this isn't I'm not building the app right now it's more like I want to show you guys how to solve that problem of keeping a timer in the background this is gonna be quick and dirty I'm gonna warn you so if there are certain things that I'm doing that you're like why you know why is he doing that this is kind of questionable it is because it is questionable I'm gonna do things quick and dirty and not follow best practices because then it would make it harder to follow for you and B it would just take a lot more time so I'm just going to try and go fast with this so I've got the label in the button here I'm going to connect it as a iboutlet property and call them label and button so this is not what you would want to call your labels and buttons and actually I'm going to also connect a IB action handler so that you can so that we can do something when the button is tapped okay so let's go back into the view controller here all right so now we're going to set up our properties what we're gonna need is Renee did timer so this is going to be the timer that ticks every second and it's gonna kind of decrement that time when the app is active we're also going to need an end date so when the user whoops it's going to be a date when the user starts the timer we set the end date and that's basically the date which the date time which the timer should expire and then we're also going to keep track of another variable and this one is going to called I'm going to call it seconds left and this is going to be a time interval which is just it's expressed in seconds it's like a number of seconds and excuse me now I'm gonna set that to a hundred to begin with for this demo alright and we're gonna create a couple of different functions here first so let's create this here I've got timer functions I'm gonna put this under user interaction so for timer functions maybe create a couple here timer start and you have timer pause and you have timer loops time our end and I'm also gonna have timer fired or timer tick so each second is going to be a timer tick alright so the first thing we're gonna want to do here is when the button sorry Wendy yeah when the button is tapped we have a couple of different scenarios right so a is like timer is timer hasn't been run and the way we can detect that is we can just see if this timer variable is nil right if it has never been set if we've never assigned a timer object to this property here then that means the timer is like brandnew and hasn't started so in that case we would start the timer right so we can say if timer is nil then the timer hasn't been run in this case we would say we would create a timer so timer equals timer scheduled timer and we're going to use this one right here where we can set a time interval for each tick the target is self and the selector is going to be the function you want to fire whenever that interval occurs so every second we want which function I'm gonna run and that's this one here called timer tick so we're just gonna put that right there user info is gonna be nil and repeats is going to be true so we want this to keep repeating now this selector is going to complain because this this hashtag selector this is an objectivec thing and this timer tick function is a Swift function so if you want to make this available to those objectivec runtimes you have to add this and even if you didn't know that that's fine you all you have to do is click that error and there's gonna be like a little that button and when you click it's gonna tell you what's wrong when you click it it's actually just gonna add this Objective C tag in front of that function to expose this particular function to this hash tag selector all right so create timer and run it we're gonna also want to set an end date right so our end date property it's just going to be equal to the current date and time if you create a new date object it's just it's going to be automatically initialized to the current date and time so we're gonna do that and we're gonna add a time interval to it and we're gonna add seconds left so it's going to add a hundred seconds to the current date and time and set that as the time when the timer will run out and we also want to update the label so this I'm going to create a separate function I'll call it update label and let's create that function right here so we have a property for the label we're going to set the text property to a string we're going to convert the time interval to a string so that's seconds left and we're also going to wrap that inside a round statement because as you're gonna see when we're working with the date and we're subtracting other dates and other intervals we're gonna have decimal places and I just want to show the number of seconds so I'm just going to round it here alright so just to recap when the user taps on that button and there's no timer it's gonna schedule a timer right to take every second and then we're gonna set an end date and we're going to update the label all right so inside here inside the timer tick so this happens every second all right decrement the seconds left so seconds left equals 1 and we're also going to update the label or maybe the UI we only have a label to update anyways oh that reminds me okay check if timer has expired so if the number of seconds is less than or equal to zero then pretty much the timer has expired so we're gonna call the timer end method which we haven't implemented yet it's still empty like that okay so this is what happens every second it's just gonna minus one from the seconds left and it's gonna update the label so we see in the UI and it's gonna check if the timer has expired so so far I think this is pretty intuitive right there's one thing I forgot to do which is update the text of the label and this would be button dot set title I'm going to call this pause because we just started it right so I'm just gonna run the app now so I can show you what this sort of basic thing looks like okay well that's launching and that's booting up I'm going to configure something else so in the viewdidload I want to configure initial initial state of the label and button so I'm just gonna say label well I just call it update label and for the button I'm gonna set the asset title to start all right and so I'm just gonna write it again now it's just gonna be really quick so we have a hundred seconds we have start when I hit start that's gonna start ticking down but here check this out if I send the app into the background and then I bring it back into the foreground you are gonna see that the timer actually doesn't run so let's do it at here it's probably at 80 for now so a lot a couple of seconds pass and then if you launch it it's still at C 84 so time basically the timer stops and we don't want that to happen and also nothing happens when we press pause right now because we haven't implemented that so let's quickly implement that so when the timer pauses what's gonna happen well when the timer pause we're gonna kill the timer so first we need to stop the timer calling the invalidate method on it and then we are going to we're not yeah we're just going to stop the timer reset the end date because the end date was set if the timer like when the timer is running right but if you pause the timer then that's going to change the end date and so we have to just set that to nil okay so update deep button text and then we're just going to set the button text whoops set title to continue all right so this would be the timer pause now when the button is tapped how do we check for that state where the the timer is currently paused well we would do it this way else if the timer is not equal to nil right because there is a timer object we've merely stopped it and the end date is nil right there's no end date because we've we've we've set it to nil when the the user hit pause right so in this case that means it's currently paused sorry I need to wrap my head around it currently paused and else if the timer is not nil and the end date is also not nil then this is currently running so what do we want to happen if it's currently running and you hit the button right we want to pause it right so you would call timer pause here and if it's currently paused and the user just tapped the button then what would you want to do you want to restart the timer yeah this coat right here when I put the timer hasn't been run this chunk of code for creating the timer and setting the end date and updating the label and updating the button text I'm actually going to move that into the timer start function that's what that's what I created that for so all of that code is in here so when the user hits the button here we just call timer start alright so if the timer hasn't been run yet we want to call a timer start which is going to start the timer set the end date update the label update the button if the timer is currently paused we also want to do the same thing so that's why you know we're gonna be able to merge these two clauses and then if it's currently running in the user taps on the button then we want to pause it alright so I hope I haven't confused you guys so I'm gonna take this and I'm gonna merge it with this if if statement all I'm gonna do is use an or clause and put it into these brackets here so timer hasn't been run or timer is currently paused either case is the same to us because we're gonna need to set a new end a date based on the seconds that are left when the user hits start so let me let me show you guys this let me run it right now and show you that we have pausing working so all of this is just starting the timer and pausing it and stopping it we haven't actually gone to the part yet where we send it to the background and still have the timer running we're gonna get to that in just a second alright so I'm gonna hit pause and it's stopped at 89 and then when you hit continue based on the 87 or 80 what ever seconds were left it sets a new end date okay so that's what happened so we have pausing and continuing and starting working now so what happens when the timer and let's do that let's kill the timer by doing timer not invalidate and that's reset the timer reset the end date update the button text so we are going to assign nil to our timer property and data is going to be nil and the button text is going to be restart all right so I'm going to set the seconds to 10 so that we can actually take a look at this all right so we've got ten seconds I'm gonna start running it right now six five four three two all right so it stops and then we hit restart is it gonna do anything if we hit that yeah so if we hit restart right now it's gonna come into this if clause it's gonna see that timer is nil and it's gonna do timers start so you can hit restart oh hey we didn't we didn't reset the number of seconds that's the problem here so why don't we basically set hardcode the number of seconds like obviously for our real app we wouldn't do this because right now I'm just like resetting it to ten or a hundred and we would actually be using constants as well so we wouldn't be just hard coding numbers in here but for the purpose of this demo that is fine to me alright so now let's implement the part where the timer goes into the background and it's still running because right now if I show it to you as I demonstrated it before if I send the timer to the background it stops running right so we want it to continue to run and so the technique that we're going to use is there are two functions which we're going to make use of one is that the system detects when your app moves to the background and you have a chance to actually perform some operations so at that point in time when our app is going to move to the background we're gonna check what state the timer is in if the timer is currently running like it is now we are going to take the end date and we're going to save it into local user defaults so it's just local storage on the device and then when the app comes back into the foreground again we can detect that and then we will check local storage for that end time and we're going to compare it with the current date and time if it's already past then we're not going to do anything but if it hasn't yet then we are going to initialize the timer and start the timer with the number of seconds left between the current date and time and the end date that was saved so if you didn't get that don't worry because we're gonna write it out now and it's probably gonna make a lot more sense so call these at lifecycle methods so I'm just gonna be overriding the view will disappear and the view will appear in here so the interesting thing to note is that sending your app into the background and bring it back to the foreground doesn't actually trigger these two view controller methods however if you have a multi screen to app and you're switching between like one view to another view then it will fire these two however we are still gonna put the code here for this demo because I just want I don't want to create a whole bunch of different classes and create a singleton for it but I'm just gonna put all the code here and then inside the app delegate which is actually where those two methods are because if you check in the app delegate you'll find methods like application will resign active that means your your app is gonna stop becoming the active foreground app and it's going to the background right and then this is like when it did enter the background so there are these different points in time where you can add some code here this is will enter the foreground and did become active all right so these are the methods we're gonna take advantage of to do that saving of the end date and then restoring of the end date but I'm from here from the app delegate I'm going to be triggering the view will disappear and the view will appear but this is not ultimately how we're gonna do it but for this demo this is what I'm gonna do so we're going to first get a reference to the standard user defaults actually before we do that we need to check if timer is running right so if the timer is not nil and the end date is not nil then that means that that means that the timer is running so we're gonna save the end date we're gonna go defaults dot set value and we're gonna put in the end date and we're gonna call the key end a date now in a real app we would not just use strings like that because they're easily you can create typos as you can see we're gonna type this string a couple of times so you do want to use a constant so when I actually show you guys me building the actual app you'll see me doing that but I'm starting to run out of time so timer is running so save the end date and here check if there's and end date saved so if let date equals actually I need to get a reference to the user defaults first if defaults equals user defaults the standard defaults thought value for key and date and we're gonna try and cast this as a date so if that is not nil then there's a date so here we're going to check if if the current date is oops the current date is past that date then timer has expired but if not then we are going to get the difference get the seconds left and we're gonna do that by saying date will let actually not left but seconds left is equal to date time interval since and passing the current date and this is going to give us the difference between the end date and the current date and time when I say date I also mean date time so the end date and time the difference in seconds to the current date and time so that's then we're going to set that to seconds left and then what we're going to do is just call timer start timer start and then we are also going to clear the end date from the defaults so if defaults thoughts set value I'm gonna set it to nil for key and date so you see we wrote this key three times and I could have made a typo in any of those so we will use constants alright so I think I think that might be it I'm just so if the timer is not nil and there is an end date I mean it's currently running so we should stop it and we should save the end date and then when it comes back we're checking if there is an end date if the current date is greater than the end date timer has expired else we get the difference and we start the timer and then we basically reset what's in the storage all right so that's good now the thing to check is like if we put some breakpoints here I'm gonna run my app and I'm gonna send it into the background and you guys will see okay so viewwillappear does get called when the app initially launches but let's say I'm running the timer now and I send it into the background you can see that it doesn't trigger any of these breakpoints which kind of defeats the purpose right if I bring it back it doesn't it hasn't been running in the background because we didn't have you know we don't have this code in place so what does get triggered however is inside the app delegate here so let's see which one we want to take advantage of sent when the application is about to move from active to inactive pause ongoing disabled timers and invalidate graphics such as okay did enter background use this method to release shared resources and validate timers and store enough application state information to restore your application to its current state in case it is terminated later all right so that's this is where we're going to do it so here we're going to now this not what we're gonna do in our real app but I'm gonna level this Hawk force view will this appear to be called from in our view controller so we are going to get a reference to that root view controller and we are going to call begin appearance transition tell us a child view controller its appearance is about to change and so this kind of allows us to trigger that so is appearing is sorry is false because it's disappearing I an animated is false and then we also have to match that with a sorry not begin but this one the closing one would be end of parents transition alright so this now when it enters the background it's going to call this code and this is going to trigger the view will disappear which is going to run our code here and I'll tell you in a second in the in the real app how I'll be doing it instead of this way call this part of the transition from background to active state restart any tasks that were paused so this is where we're going to do it here again we are going to hack force view will appear to be called in our view controller window root view controller begin appearance transition look at this time it's true because it is appearing and then the clothes the other pair of this is end the parents transition alright now it's time to run it and I can show you how this works because now it will be triggering view will disappear and disappear in view will appear so let me put some breakpoints here let me start the timer here so it the end date and time is set to 100 seconds from now I'm gonna send this the background at 90 and let's say sorry for the lawnmower someone's running a lot more alright view will disappear so this is triggered right it's gonna detect that there is a timer and there is an end date it's gonna stop the timer and then it's gonna set the end date into the defaults like that and then we can wait like a couple of seconds all right and then you can see that wheel view will appear as called and then it's gonna check the date inside the local storage it's gonna see that it hasn't passed yet and now it's going to calculate the number of seconds left so we can take a look at that seconds left is 50 because we as it's been paused it's still been going right so timers start and it's gonna resume let me remove this these breakpoints oh you know what I did inside the timer start method I hardcode the number of seconds to 100 we need to remove this line so this line let's do it we're just going to reset the number of seconds when the timer ends all right so let's run it and I'll show you this is how you do the timer in the background all right so like 95 and then we're gonna send it into the background we'll wait a couple of seconds I'm gonna bring it back and you can see that it's like 86 now so that's how that works now like I said well it is 2 o'clock now but I'm gonna keep going if you guys can stay you guys are welcome to stay I just want to finish explaining how kind of like some of the shortcuts that we took in this demo just to show you guys how this works versus when we are building the real app how we're going to be keeping track of that time so the cost the concept is the same you know keeping the timestamp in the back I keep looking down here I'm sorry but the camera is up here we are going to be keeping the date in the localstorage when the app goes to the background same thing but in this demo just for speed and for understandability eyes put all the code inside this view controller right that's not what we want to do so when we're building this out for real I'm going to have a singleton like Pomodoro timer class and that is going to be keeping track of the timers and the end dates and stuff like that now Singleton's get a bad rap right so you want to make sure that you are like you're justified in using it and the way that I justify and using it for this app is because we're not just going to be having this view controller here be the only view in this app right there's a settings screen when we do that social stuff there's gonna be like social screens and stuff like that but your timer should still be running right if you said it the set of Pomodoro for like 25 minutes and then you go to a different screen the timer shouldn't stop or I should continue running and so that's why I can't put the timer in any specific view controller like that and the other reason why is because inside the app delegate this is where sorry those methods are for detecting the application going to the background and coming into the foreground and stuff like that and so I don't want to do like this sort of hack here where I'm forcing the view controller to to like think that it is view will disappear view will appear that it is transitioning and but if I have my timer stuff inside a singleton class then it will also be accessible from here so that's my thinking right now that's I haven't actually done it yet but so far that's kind of my line of thought if you guys want this source code I will make it available but like I said don't follow any of the practices I did here it's more for you examining kind of like the timer keeping track of timers in the background all right so don't take this like oh this is what I should do because Chris is doing it in here that's yeah no okay so that's all I wanted to show you guys this video I'm gonna take one minute to talk about going forward kind of like what my next steps are and then I'm gonna take a look at what questions you have you have you guys have so I said I wanted to submit this app by the end of the month which is like a week away so I don't think that is feasible anymore I'm gonna give myself like another half week but we're not gonna have another live stream till next Wednesday right and I also want the this process of creating this v1 of the Pomodoro app to be a video series which I can send people to to watch right so my plan is basically to do the actual coding of and applying the graphic assets to the Pomodoro app inside like structured videos where you know I do an introduction and then I do the code and I do a conclusion type of thing and I'm gonna put that into a video playlist and then I'm also gonna mention if you guys want to see kind of the behind the scenes and the thought and like the making of almost you know how like in a DVD bluray sometimes they have behind the scenes or making of that's kind of like not the core feature presentation but if you want to know more so I'm gonna have this these live streams is that that because we're not actually building that up here right we're talking about ideation and why are framing the thought process behind what like how this app came to be so I'm gonna leave the actual production of the app like coding it in inside structured videos which won't be a live stream and then when we get to submitting this app I will do a live stream yet so between now and next Wednesday I'm going to try to actually build this app out I'm gonna produce a set of videos for it which I'm gonna launch to you guys I'm not sure if I'm gonna launch it like Netflix styles so that you can binge it and it's not gonna be long anyways I think it's gonna be like maybe four or five videos long or whether I should space out because that way that way I have more content each week right and I know for you guys you probably want it all that once I'll see where I get with that in the next week and a half I do want to launch in the next week and a half so not in the next live stream but probably the one after that we will press submit together I'll show you guys I'll walk you guys through creating the iTunes Connect app description and the screenshots and all that stuff and then we're gonna hit submit together I'm going to launch this baby but as for the actual videos for coding it up so that's gonna be released from now anytime from now to a week and a half later yeah so those won't be live streams so those would be like concise videos and for anyone who wants to see the making of or behind the scenes they can watch these live streams the replays of them alright so now on to questions for you guys questions from you guys let me take a look Oh Igor thanks thanks for letting me know that the volume is too low I will I will probably put my mic down here next time so that it's more more in the direct line of where I'm talking okay let me move let me move up here if you guys have questions now maybe you can maybe you retype them or next time I might have Adrian put the questions in a separate list or something like that so I am NOT scrolling to the chat see Steve figma is unlimited for like individuals so if you're building apps for yourself it's perfect I think most of these questions are being answered anyways so if you have a question that hasn't been answered maybe type it in and for those for those of you who have to leave now thank you so much for watching thank you for joining the live stream and I'll see you guys next week but in the meantime keep your eyes peeled for the actual development videos from now until Wednesday so make sure you're subscribed to the channel if you don't want to miss those videos so just in case some some of you guys have to leave thanks for joining and I'll see you guys next time if you have chance to stay then go ahead okay not too many questions this time because I guess I was just like typing and and showing you guys how to do stuff but alright so thank ya thank you so much again for joining doesn't look like there are any questions left unanswered I really appreciate you guys and I can't wait to submit more apps and build more apps with you guys alright I'll catch you guys next time bye for now
