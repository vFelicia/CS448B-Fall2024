With timestamps:

00:00 - hey code crew so far the app just
00:02 - displays text labels for each video in
00:05 - this lesson you're going to create a
00:06 - custom table view cell to download the
00:08 - thumbnail for each video to display it
00:10 - and also to format the date so that it's
00:13 - easier to read just a quick note if
00:15 - you're jumping into the series at this
00:16 - point you kind of need to watch these
00:18 - lessons in a progression for it to make
00:20 - sense first make sure you've watched the
00:22 - 29th lesson beginner series to get the
00:24 - basic skills then make sure you're
00:26 - watching this YouTube app one day build
00:28 - lessons in order links to both of these
00:30 - playlists will be in the description so
00:33 - right now we have a prototype cell and
00:37 - while we can add UI elements into this
00:40 - prototype cell to customize it it's
00:42 - really hard to add any sort of code or
00:45 - logic to the table view cell itself so
00:48 - that's why we need to create our custom
00:50 - subclass of uitableviewcell and we're
00:54 - still going to be able to customize it
00:55 - using interface builder i'll show you
00:57 - how you can tell interface builder that
01:00 - this prototype cell is actually an
01:02 - instance of our custom subclass that
01:06 - we're going to create that way you get
01:07 - the benefit of both you get to be able
01:10 - to add code and logic to your cell and
01:11 - you'll be able to customize how it looks
01:14 - from interface builder alright so let's
01:16 - go ahead and go into our file navigator
01:19 - hold down control and let's add a new
01:21 - file this one's going to be a cocoa
01:24 - touch class because we're going to be
01:26 - subclassing one of those classes here so
01:29 - subclass UI tableview cell and up here
01:35 - we're going to call it you can call it
01:37 - video table view cell and language is
01:41 - swift we're gonna hit next and we're
01:43 - just gonna create it right there now we
01:46 - have a whole bunch of files I should
01:48 - have done this from the start but I
01:49 - think it's best now if we start creating
01:52 - some groups or in other words folders
01:54 - just to organize these files a little
01:57 - bit so let's go ahead and choose new
02:00 - group
02:01 - we'll say this is view controllers will
02:06 - create another one up here and let's say
02:08 - these ones are views we're going to
02:12 - create another one for models and
02:18 - another one for storyboards and then
02:22 - lastly let's have a group for just
02:24 - anything else like helpers utility
02:28 - classes and so on and so forth so we're
02:30 - gonna move the to storyboard ones into
02:33 - there we're gonna move our view
02:35 - controller into there let's put the app
02:38 - delegate in the scene delegate at the
02:40 - top these all represent you know data
02:45 - objects or data you know data items so
02:49 - we're gonna put them into our models
02:50 - this is a view this custom video cell
02:53 - and constants these constants files I
02:56 - would say our helpers now you can
02:59 - rearrange the groups if you'd like but
03:01 - already this is looking a lot better
03:03 - alright so let's take a look at our
03:06 - video table view cell from here these
03:10 - are just it's boilerplate code for the
03:14 - uitableviewcell
03:15 - what we're going to do is configure that
03:20 - this prototype cell is actually an
03:22 - instance of that class so the way we do
03:24 - that is you can select video cell here
03:27 - and then go into the identity inspector
03:29 - and just change the custom class and say
03:33 - that this is an instance of video table
03:36 - view cell and so what happens now is if
03:40 - you hold down option and if you click on
03:44 - video table view cell you're going to
03:47 - see that on the right hand side here up
03:50 - here we are going to connect all of the
03:53 - elements that we're going to add into
03:54 - our cell so we're gonna have a UI image
03:57 - view element for the thumbnail we're
03:59 - gonna have a label for the title and a
04:01 - label for the date and then we're going
04:03 - to connect those as iboutlet properties
04:06 - to this class and then that way we can
04:08 - use the code to set up those elements
04:11 - too
04:12 - the image and set that image view and so
04:14 - on so let me close this for a second and
04:17 - first let's use interface builder and
04:19 - customize this UI so the way this looks
04:23 - is it's basically a big thumbnail image
04:26 - and underneath it we're gonna have a
04:27 - title and bold and then underneath that
04:29 - we're gonna have the date so I'm gonna
04:32 - use a vertical stack view with those
04:34 - three elements inside so let's go ahead
04:36 - and open the object library you can hit
04:39 - this plus icon choose a vertical stack
04:43 - view and because this is so thin I'm
04:46 - gonna drag it into here into the content
04:49 - view from the document outline all right
04:53 - and I'm going to then add some
04:55 - constraints for the stack view so I'm
04:58 - gonna put it 0 on all the edges add 4
05:03 - constraints and there we go
05:04 - we have that stack man now we can begin
05:06 - adding the other three elements in there
05:09 - so there's a image view we're going to
05:12 - put that in there make sure it's tucked
05:14 - into the stack view when you collapse it
05:16 - right it should be in there okay we're
05:19 - gonna add two labels in there so that's
05:24 - the title label and then that is the
05:27 - date label alright so now let's
05:29 - customize it a little bit the thumbnails
05:31 - on YouTube have a certain aspect ratio
05:34 - so the first thing we can do already is
05:36 - select the image view and add that
05:38 - aspect ratio as a constraint so check
05:41 - aspect ratio we're going to add that
05:43 - constraint and then we're gonna modify
05:45 - it so let's click on that aspect ratio
05:51 - go into this multiplier and it's gonna
05:57 - be 1280 by 720 so that's the general
06:03 - size of thumbnails YouTube something
06:06 - else I mean alright so this is the the
06:09 - title label so we're gonna actually
06:11 - change this into a sort of bold font so
06:14 - instead of the style regular let's
06:16 - change it to bold it done and we're also
06:21 - going to add some space between these
06:22 - elements so hit stack view and let's add
06:25 - a spacing of 10 between each of the
06:28 - elements and before I forget one thing
06:30 - that we should probably do as well is to
06:33 - set the number of lines for the title to
06:36 - be 0 and that's gonna allow the text to
06:38 - wrap to a second line or third if need
06:41 - be
06:43 - if you have a line number a number of
06:46 - lines set then it's not going to exceed
06:49 - that number annex instead it's going to
06:51 - truncate it with three dots but if you
06:52 - specify zero it's just gonna wrap and
06:55 - looking at this you I actually do want
06:57 - to add some margin to everything so
07:00 - let's take the stack view and let's edit
07:03 - the constraints because before we sort
07:06 - of made it 0 to all of the edges so
07:09 - instead let's hit edit and let's put 20
07:13 - on each new 20 and 20 and give
07:22 - everything some breathing room so that
07:24 - looks a lot better in my opinion in of
07:26 - course this is all down to personal
07:28 - preference and we do have some auto
07:31 - layout constraint errors so let's click
07:33 - on that and see what was happening here
07:36 - so the content priority and ambiguity is
07:40 - the easiest to solve first and sometimes
07:44 - that actually ends up solving these ones
07:46 - up here and this is basically saying if
07:48 - the cell if the cell has more space than
07:52 - it needs who should I give that space to
07:55 - we're gonna say that the vertical
07:57 - hugging priority for the title label is
07:59 - going to be the lowest priority which
08:01 - means that if there's extra space give
08:04 - it to the title label everything else
08:07 - has a higher hugging priority so it's
08:12 - not going to be as easily expanded if
08:15 - there's more space conversely if there's
08:17 - not enough space
08:19 - what should get truncated well I would
08:23 - think the thumbnail should get truncated
08:25 - or squished if there's not enough space
08:28 - so I'm gonna set the content compression
08:31 - resistance priority to be lower for the
08:36 - thumbnail
08:39 - all right but that's just for safe
08:41 - measures because you can see all the
08:43 - errors are gone anyways and this
08:44 - tableview cell is flexible in terms of
08:47 - the height and so it's gonna accommodate
08:49 - what it needs all right so this looks
08:53 - pretty good so we're going now going to
08:54 - connect the elements to our custom cell
08:57 - let's just save this let's click on the
08:59 - storyboard hold down option and click on
09:02 - video table view cell so we get this on
09:05 - the right hand side and there's some
09:08 - space here where we can connect the
09:10 - elements and I'm just going to do it
09:12 - from the document outline hold down ctrl
09:15 - click and drag the image view here I'm
09:17 - gonna call this outlet the thumbnail
09:19 - image view okay so sometimes you get an
09:26 - error like this and oftentimes what ends
09:31 - up solving it is you you can just
09:37 - literally try to close and launch Xcode
09:42 - let me try this again okay so I am going
09:47 - to do that all right so I just quit
09:50 - Xcode and relaunched it and sure enough
09:52 - things are working as expected now so
09:55 - let's try this again
09:56 - thumbnail image view and then here this
10:01 - one is going to be our title label and
10:05 - then lastly we have our date label right
10:09 - here
10:13 - all right now that we've connected the
10:15 - UI elements to our video table view cell
10:20 - let's go back to a single editor view
10:23 - and go in here and add an additional
10:27 - property essentially this is going to be
10:29 - the video that this cell is displaying
10:32 - so this is going to be of type video and
10:35 - we're gonna make it optional since it's
10:37 - nil to begin with and then down here
10:39 - we're gonna create a method called set
10:41 - the cell and we're gonna pass in a video
10:47 - object in here all right so the view
10:50 - controller when it gets an instance of
10:53 - this cell is going to pass in the video
10:55 - object that it wants this cell to
10:57 - display and then from here we can you
11:00 - know capture that video first of all set
11:04 - the video that's passed in as the video
11:07 - as the video that is assigned to this
11:10 - property here so self dot video equals V
11:13 - and then we're also going to set the
11:16 - title and date label so we're gonna say
11:20 - self-taught title label dot text is
11:24 - equal to video dot dot title so for the
11:31 - date seeing is how in our video object
11:37 - the date is actually a date object and
11:41 - did we set that down here publish date
11:44 - all right so we do have a date object
11:48 - we're gonna format it into a string in
11:53 - the format that we want so the way we
11:55 - set the format for the date is we use a
11:58 - date formatter so let's call it let's
12:02 - call it D F and we're going to create a
12:04 - new date format or object and we're
12:07 - going to specify the date format to be a
12:11 - string now there is a website that is
12:15 - pretty handy for you to figure out what
12:19 - you need to put as the format for the
12:22 - date format you want so this website is
12:25 - called
12:26 - an estate for matter calm so for example
12:30 - if you want to have a date like this
12:35 - then here is the format you would
12:38 - specify so I'm gonna copy that and in
12:41 - here I'm gonna paste that okay and
12:44 - here's how we are going to set the date
12:47 - label a self-taught date label dot text
12:50 - equals d F dot string from date and
12:57 - we're gonna feed it our video daunt
13:02 - published we are actually going to force
13:08 - unwrap that so we're gonna say guard
13:14 - self that video not equal nil else just
13:20 - return okay so this would be
13:37 - okay and then lastly we have set the
13:40 - thumbnail and for the thumbnail we
13:42 - actually have to download the image we
13:45 - do have the URL in this thumbnail sorry
13:48 - this thumbnail property right here so
13:51 - we're gonna have to use URL session to
13:54 - download it much like in our model we
13:57 - see we created a URL object and then we
14:02 - got the shared session object and we
14:04 - created a data task and we downloaded
14:07 - the data then we checked that it wasn't
14:09 - nil so we're gonna do the same thing to
14:12 - download the data for that that video
14:14 - sorry for that thumbnail so let you are
14:19 - l equals actually before we do that
14:21 - let's check if there is a thumbnail URL
14:24 - because if there isn't then it's sort of
14:26 - pointless right so if so let's guard
14:30 - self-thought video dot thumbnail not
14:36 - equal no else oops here else return so
14:42 - if there is a thumbnail let's download
14:45 - the thumbnail data so let you our l
14:50 - equals URL object and we're going to use
14:55 - this one right here the self thought
14:57 - video thumbnail and then we are going to
15:03 - get shared you're all session object so
15:08 - let session equals you're all session
15:13 - shared and then we are going to create a
15:17 - data task so here we're going to say let
15:22 - data task equals session dot data task
15:27 - with URL with the completion Handler so
15:31 - we're going to pass in this URL here and
15:33 - I'm gonna force unwrap it
15:36 - and then inside here I'm gonna open up
15:39 - this closure to write a block of code
15:41 - that handles the response after its
15:44 - downloaded the data so we have the data
15:46 - parameter
15:47 - response and we have error and we're
15:52 - gonna check if error is nil and the data
15:57 - is not nil meaning there is no error and
16:00 - there is data then we are going to
16:05 - create the image object and we're going
16:09 - to set the image view oh and one thing
16:13 - we should actually check is check that
16:15 - the downloaded URL matches the video
16:22 - thumbnail URL that this cell is
16:26 - currently set to display and what I mean
16:30 - by this is that these cells they get
16:33 - reused by the table view so when you
16:35 - scroll the cell out of view it gets
16:37 - recycled and reused so there is a
16:40 - scenario that may happen where the data
16:43 - for the image is being downloaded and
16:45 - then the cell gets scrolled out of view
16:46 - it might have gotten recycled for
16:49 - another video and if that's the case
16:52 - when the data returns for the old video
16:55 - you don't want to be setting that
16:57 - thumbnail for the old video it was
16:59 - displaying and set it to the new video
17:01 - all right so when the data comes back
17:03 - check that what you downloaded is
17:06 - actually for the video that you're
17:08 - currently trying to display for this
17:10 - cell the way we can do that is just
17:12 - check if the URL dot absolute string is
17:21 - is not equal to self dot video dot
17:27 - thumbnail then video cell has been
17:34 - recycled for another video and no longer
17:38 - matches
17:40 - the thumbnail that was downloaded so
17:45 - we're just going to return not do
17:48 - anything with that data okay so if it
17:51 - passes that then we are going to create
17:53 - the image object so let image equals UI
17:58 - image with data and we're gonna pass in
18:02 - the data that that was that was
18:08 - downloaded so we're gonna do that and
18:10 - then we're gonna set the image view so
18:12 - remember modifying the user interface we
18:16 - want to throw that back to the main
18:18 - thread because this downloading over the
18:20 - network is done in the background thread
18:22 - so we're gonna use dispatch cue main dot
18:27 - a sync and we're gonna say self-thought
18:31 - the thumbnail image view oops that's the
18:35 - wrong one thumbnail image view dot image
18:39 - is equal to image just this guy right
18:43 - here all right and lastly we've coded up
18:49 - this data task and the code that gets
18:54 - run after the data comes back but we
18:56 - have yet to kick off the data task to to
19:01 - go and fetch that URL so we mustn't
19:03 - forget to do that so here
19:10 - we do data tasks that resume okay and so
19:15 - this this should be good this should
19:18 - work and what we're going to do after
19:21 - after this is to do an image cache so we
19:26 - don't redownload the same thumbnail
19:29 - images over and over alright so let's
19:31 - take a look at what this is talking
19:32 - about first now okay how about that
19:38 - because it's basically saying that this
19:40 - thumbnail property is not an optional
19:45 - it's it's actually you know by default
19:47 - it's an empty string so instead I'll
19:50 - compare it to empty string making sure
19:53 - that it's not empty okay so now we've
19:56 - finished off our thumbnail it sets the
19:58 - title it sets the date and it downloads
19:59 - the thumbnail we need to get the view
20:03 - controller to start using this so what
20:07 - we've done here in the storyboard is
20:09 - we've already told interface builder
20:12 - that this prototype cell is an instance
20:16 - of our custom subclass right so inside
20:21 - view controller you know when when view
20:25 - controller wants to display the first
20:27 - data item it's gonna ask the view
20:29 - controller using this this cell for row
20:32 - add method remember this is what we
20:34 - talked about in the previous lesson and
20:37 - we're going to try to grab that
20:39 - prototype cell using this video cell ID
20:41 - but because that prototype cell is no
20:43 - longer the default uitableviewcell it's
20:47 - actually our custom video table view
20:50 - cell when this method gets called and
20:52 - you're trying to grab that prototype
20:55 - cell with this idea what you're getting
20:56 - back is actually an instance of video
20:59 - table view cell so we actually have to
21:01 - specify that here so we're going to say
21:03 - you know you're fetching that prototype
21:05 - cell as a video table view cell
21:10 - and such down here we're going to be
21:16 - able to say cell dot set cell right and
21:22 - pass in that video now where are we
21:25 - gonna get this video well right here
21:28 - this line of code was from we wrote
21:30 - before to grab the title we're just
21:32 - gonna change it slightly and instead of
21:34 - just grabbing the title we're gonna say
21:36 - let video equals self dot videos and
21:39 - we're gonna get rid of that part so
21:43 - we're basically grabbing the specified
21:47 - video that this row is trying to display
21:50 - we're putting it into this constant and
21:52 - then we're going to pass that video into
21:54 - this set cell method okay so I can
21:57 - delete this comment because it no longer
21:58 - makes sense so now let's try this out
22:01 - let's run it and see what we get so what
22:04 - we should see are the actual video
22:08 - titles the dates the video thumbnails
22:10 - and stuff like that alright this is
22:21 - awesome this is awesome now we're going
22:23 - to change the content type of these
22:25 - images so that you know because it's
22:29 - trying to fit this thumbnail into the
22:32 - image view and by default I think it's
22:38 - not stretching it to fill the whole
22:40 - image view so let's click on thumbnail
22:43 - image let's go to the attributes
22:46 - inspector here and instead of the aspect
22:49 - fit we're going to choose aspect fill so
22:53 - this will attempt to fill up the entire
22:55 - image view while maintaining the same
22:57 - aspect ratio so let's run it using that
23:01 - content mode instead so that looks a lot
23:04 - better and you can see that dates are
23:06 - exactly how we want them so this is
23:10 - really awesome
23:11 - now the only downside is when I scroll
23:14 - something out of view and if that cell
23:16 - gets recycled and then I pull it back
23:18 - into view it's going off to redownload
23:21 - the same image data again
23:24 - so what I would rather have is just to
23:26 - save the image data so that we we can
23:31 - reuse it if we need to show the same
23:34 - image instead of having to redownload it
23:35 - and we can do that with a simple cache
23:37 - manager all right so to do that let's
23:40 - first create a new file inside helpers
23:43 - let's add a new file and it'll be a
23:47 - swift file and I'm going to call this
23:50 - I'm just gonna call it cache manager and
23:55 - we're gonna call this class the cache
23:58 - manager and it's gonna have a static
24:08 - method called let's say set video cache
24:13 - and we're gonna pass in a URL and this
24:17 - is going to be a string and also a the
24:22 - actual video data right so we'll allow
24:28 - it to pass in the data and the reason
24:30 - why this is a static method is so that
24:32 - we don't need to create an instance of
24:34 - the cache manager to use these methods
24:36 - there's no there's no point to doing
24:39 - that so we'll have another one called
24:42 - get video cache and you pass in the URL
24:49 - and you get back the you get back the
24:53 - data but it could be nil if that URL
24:56 - doesn't exist in our cache then we then
24:59 - we return nil and to store the cache
25:03 - we're just gonna have a simple
25:05 - dictionary static far let's call this
25:08 - cache dictionary let's just name it
25:12 - cache and we're gonna make this an
25:14 - instance of string and data so that's
25:20 - our dictionary right there initially
25:22 - it's empty so when we want to set data
25:25 - into it we just say cache the key is the
25:30 - URL and we're gonna sign into it the
25:33 - data very simple
25:39 - and use the URL as the key right and
25:44 - when we return we basically try to get
25:50 - the data for the specified URL so we
25:56 - just return cache URL now if that URL
26:00 - doesn't exist it's going to return nil
26:04 - and if it does exist and it's going to
26:07 - find the data and return that so this is
26:10 - all it takes and inside our video table
26:14 - view cell before we download the data we
26:18 - just have to check check cache before
26:24 - downloading data so if cache manager dot
26:35 - get video cache self thought video
26:40 - thumbnail we can actually assign it if
26:46 - let cached data equals that
26:55 - so essentially if we are able to find
27:01 - the data for that URL then it's going to
27:05 - get assigned into this constant cash
27:07 - data and then we can use we can use that
27:10 - constant in here if it gets nil back
27:13 - then it's not going to come into this if
27:15 - statement so when it comes into here we
27:18 - know that we actually found the data so
27:21 - we can set the thumbnail image for you
27:26 - so self thought thumbnail image view
27:29 - that image is equal to UI image and we
27:33 - can pass in the cache the data okay and
27:37 - then we're just going to hit return
27:39 - because we don't want to run the rest of
27:41 - this code to actually download the the
27:44 - image okay but let's say that the image
27:49 - data isn't inside our cache and we get
27:51 - back nil then it's going to skip this
27:52 - chunk of code and it's going to come
27:53 - down here and it's going to start
27:55 - downloading the data over the network so
27:58 - at this point what we're going to want
28:04 - to do since we've downloaded the data
28:07 - already save the data in the cache so
28:14 - we're going to have cache manager dot
28:17 - set video cache you know for the URL dot
28:23 - absolute string and here we're going to
28:26 - pass in the data actually let's do that
28:35 - let's see okay so we can force and wrap
28:42 - this URL and this data I guess we should
28:47 - allow potential Nils so in the cache
28:51 - manager inside here I'm gonna make this
28:54 - parameter an optional data type just in
28:57 - case that the data is nil and it should
29:03 - be good okay so I'm gonna build it that
29:07 - should resolve okay now let's run the
29:13 - project and I'm scrolling up and down
29:15 - and all of these images that have been
29:18 - that you see here have been downloaded
29:21 - in cache
29:22 - so I'm going to set a breakpoint right
29:27 - right here it should never come down
29:29 - here anymore because we don't have to
29:31 - download any more data right and when I
29:33 - scroll this you can see that no data is
29:35 - being downloaded anymore no image data
29:38 - that is alright so we've finished
29:41 - another chunk of functionality so I'm
29:43 - gonna go ahead and commit this to our
29:45 - repo and let's take a look at where we
29:50 - are I'm going to need to go into the
29:52 - desktop the YouTube one day build the
29:56 - folder that's where my project is get
29:58 - status all right I'm just gonna add
30:01 - everything and and add a commit message
30:06 - and say that added custom video custom
30:13 - table view cell and configured the cell
30:21 - to show video thumbnail title and date
30:28 - also added cache manager
30:33 - to save image data I think that's what
30:37 - we did all right now let's push all
30:52 - right cool all right so today you
30:55 - created a custom table view cell to
30:57 - display each video in the app you also
30:59 - learned how to download images and how
31:01 - to format dates now these are very
31:03 - common skills that you'll find yourself
31:05 - using time and time again for all of
31:07 - your future apps now I want to turn it
31:09 - over to you how have you been enjoying
31:11 - this app series so far I want to do more
31:14 - app series after this one but I want to
31:17 - make sure that it's helpful for you guys
31:18 - in that it's actually helping so give me
31:21 - your vote of confidence by leaving a
31:22 - quick comment below in the next lesson
31:24 - you'll be creating the
31:25 - detailviewcontroller so that the user
31:27 - can actually click into a video and
31:29 - watch it make sure you don't miss the
31:30 - video by subscribing to the channel if
31:32 - you haven't already and giving this
31:34 - video a thumbs up if you enjoyed it and
31:36 - finally you know the drill my project is
31:38 - in the description below just remember
31:40 - you have to add your YouTube API key to
31:42 - the constants file alright thanks for
31:44 - watching and I'll see you in the next
31:46 - lesson

Cleaned transcript:

hey code crew so far the app just displays text labels for each video in this lesson you're going to create a custom table view cell to download the thumbnail for each video to display it and also to format the date so that it's easier to read just a quick note if you're jumping into the series at this point you kind of need to watch these lessons in a progression for it to make sense first make sure you've watched the 29th lesson beginner series to get the basic skills then make sure you're watching this YouTube app one day build lessons in order links to both of these playlists will be in the description so right now we have a prototype cell and while we can add UI elements into this prototype cell to customize it it's really hard to add any sort of code or logic to the table view cell itself so that's why we need to create our custom subclass of uitableviewcell and we're still going to be able to customize it using interface builder i'll show you how you can tell interface builder that this prototype cell is actually an instance of our custom subclass that we're going to create that way you get the benefit of both you get to be able to add code and logic to your cell and you'll be able to customize how it looks from interface builder alright so let's go ahead and go into our file navigator hold down control and let's add a new file this one's going to be a cocoa touch class because we're going to be subclassing one of those classes here so subclass UI tableview cell and up here we're going to call it you can call it video table view cell and language is swift we're gonna hit next and we're just gonna create it right there now we have a whole bunch of files I should have done this from the start but I think it's best now if we start creating some groups or in other words folders just to organize these files a little bit so let's go ahead and choose new group we'll say this is view controllers will create another one up here and let's say these ones are views we're going to create another one for models and another one for storyboards and then lastly let's have a group for just anything else like helpers utility classes and so on and so forth so we're gonna move the to storyboard ones into there we're gonna move our view controller into there let's put the app delegate in the scene delegate at the top these all represent you know data objects or data you know data items so we're gonna put them into our models this is a view this custom video cell and constants these constants files I would say our helpers now you can rearrange the groups if you'd like but already this is looking a lot better alright so let's take a look at our video table view cell from here these are just it's boilerplate code for the uitableviewcell what we're going to do is configure that this prototype cell is actually an instance of that class so the way we do that is you can select video cell here and then go into the identity inspector and just change the custom class and say that this is an instance of video table view cell and so what happens now is if you hold down option and if you click on video table view cell you're going to see that on the right hand side here up here we are going to connect all of the elements that we're going to add into our cell so we're gonna have a UI image view element for the thumbnail we're gonna have a label for the title and a label for the date and then we're going to connect those as iboutlet properties to this class and then that way we can use the code to set up those elements too the image and set that image view and so on so let me close this for a second and first let's use interface builder and customize this UI so the way this looks is it's basically a big thumbnail image and underneath it we're gonna have a title and bold and then underneath that we're gonna have the date so I'm gonna use a vertical stack view with those three elements inside so let's go ahead and open the object library you can hit this plus icon choose a vertical stack view and because this is so thin I'm gonna drag it into here into the content view from the document outline all right and I'm going to then add some constraints for the stack view so I'm gonna put it 0 on all the edges add 4 constraints and there we go we have that stack man now we can begin adding the other three elements in there so there's a image view we're going to put that in there make sure it's tucked into the stack view when you collapse it right it should be in there okay we're gonna add two labels in there so that's the title label and then that is the date label alright so now let's customize it a little bit the thumbnails on YouTube have a certain aspect ratio so the first thing we can do already is select the image view and add that aspect ratio as a constraint so check aspect ratio we're going to add that constraint and then we're gonna modify it so let's click on that aspect ratio go into this multiplier and it's gonna be 1280 by 720 so that's the general size of thumbnails YouTube something else I mean alright so this is the the title label so we're gonna actually change this into a sort of bold font so instead of the style regular let's change it to bold it done and we're also going to add some space between these elements so hit stack view and let's add a spacing of 10 between each of the elements and before I forget one thing that we should probably do as well is to set the number of lines for the title to be 0 and that's gonna allow the text to wrap to a second line or third if need be if you have a line number a number of lines set then it's not going to exceed that number annex instead it's going to truncate it with three dots but if you specify zero it's just gonna wrap and looking at this you I actually do want to add some margin to everything so let's take the stack view and let's edit the constraints because before we sort of made it 0 to all of the edges so instead let's hit edit and let's put 20 on each new 20 and 20 and give everything some breathing room so that looks a lot better in my opinion in of course this is all down to personal preference and we do have some auto layout constraint errors so let's click on that and see what was happening here so the content priority and ambiguity is the easiest to solve first and sometimes that actually ends up solving these ones up here and this is basically saying if the cell if the cell has more space than it needs who should I give that space to we're gonna say that the vertical hugging priority for the title label is going to be the lowest priority which means that if there's extra space give it to the title label everything else has a higher hugging priority so it's not going to be as easily expanded if there's more space conversely if there's not enough space what should get truncated well I would think the thumbnail should get truncated or squished if there's not enough space so I'm gonna set the content compression resistance priority to be lower for the thumbnail all right but that's just for safe measures because you can see all the errors are gone anyways and this tableview cell is flexible in terms of the height and so it's gonna accommodate what it needs all right so this looks pretty good so we're going now going to connect the elements to our custom cell let's just save this let's click on the storyboard hold down option and click on video table view cell so we get this on the right hand side and there's some space here where we can connect the elements and I'm just going to do it from the document outline hold down ctrl click and drag the image view here I'm gonna call this outlet the thumbnail image view okay so sometimes you get an error like this and oftentimes what ends up solving it is you you can just literally try to close and launch Xcode let me try this again okay so I am going to do that all right so I just quit Xcode and relaunched it and sure enough things are working as expected now so let's try this again thumbnail image view and then here this one is going to be our title label and then lastly we have our date label right here all right now that we've connected the UI elements to our video table view cell let's go back to a single editor view and go in here and add an additional property essentially this is going to be the video that this cell is displaying so this is going to be of type video and we're gonna make it optional since it's nil to begin with and then down here we're gonna create a method called set the cell and we're gonna pass in a video object in here all right so the view controller when it gets an instance of this cell is going to pass in the video object that it wants this cell to display and then from here we can you know capture that video first of all set the video that's passed in as the video as the video that is assigned to this property here so self dot video equals V and then we're also going to set the title and date label so we're gonna say selftaught title label dot text is equal to video dot dot title so for the date seeing is how in our video object the date is actually a date object and did we set that down here publish date all right so we do have a date object we're gonna format it into a string in the format that we want so the way we set the format for the date is we use a date formatter so let's call it let's call it D F and we're going to create a new date format or object and we're going to specify the date format to be a string now there is a website that is pretty handy for you to figure out what you need to put as the format for the date format you want so this website is called an estate for matter calm so for example if you want to have a date like this then here is the format you would specify so I'm gonna copy that and in here I'm gonna paste that okay and here's how we are going to set the date label a selftaught date label dot text equals d F dot string from date and we're gonna feed it our video daunt published we are actually going to force unwrap that so we're gonna say guard self that video not equal nil else just return okay so this would be okay and then lastly we have set the thumbnail and for the thumbnail we actually have to download the image we do have the URL in this thumbnail sorry this thumbnail property right here so we're gonna have to use URL session to download it much like in our model we see we created a URL object and then we got the shared session object and we created a data task and we downloaded the data then we checked that it wasn't nil so we're gonna do the same thing to download the data for that that video sorry for that thumbnail so let you are l equals actually before we do that let's check if there is a thumbnail URL because if there isn't then it's sort of pointless right so if so let's guard selfthought video dot thumbnail not equal no else oops here else return so if there is a thumbnail let's download the thumbnail data so let you our l equals URL object and we're going to use this one right here the self thought video thumbnail and then we are going to get shared you're all session object so let session equals you're all session shared and then we are going to create a data task so here we're going to say let data task equals session dot data task with URL with the completion Handler so we're going to pass in this URL here and I'm gonna force unwrap it and then inside here I'm gonna open up this closure to write a block of code that handles the response after its downloaded the data so we have the data parameter response and we have error and we're gonna check if error is nil and the data is not nil meaning there is no error and there is data then we are going to create the image object and we're going to set the image view oh and one thing we should actually check is check that the downloaded URL matches the video thumbnail URL that this cell is currently set to display and what I mean by this is that these cells they get reused by the table view so when you scroll the cell out of view it gets recycled and reused so there is a scenario that may happen where the data for the image is being downloaded and then the cell gets scrolled out of view it might have gotten recycled for another video and if that's the case when the data returns for the old video you don't want to be setting that thumbnail for the old video it was displaying and set it to the new video all right so when the data comes back check that what you downloaded is actually for the video that you're currently trying to display for this cell the way we can do that is just check if the URL dot absolute string is is not equal to self dot video dot thumbnail then video cell has been recycled for another video and no longer matches the thumbnail that was downloaded so we're just going to return not do anything with that data okay so if it passes that then we are going to create the image object so let image equals UI image with data and we're gonna pass in the data that that was that was downloaded so we're gonna do that and then we're gonna set the image view so remember modifying the user interface we want to throw that back to the main thread because this downloading over the network is done in the background thread so we're gonna use dispatch cue main dot a sync and we're gonna say selfthought the thumbnail image view oops that's the wrong one thumbnail image view dot image is equal to image just this guy right here all right and lastly we've coded up this data task and the code that gets run after the data comes back but we have yet to kick off the data task to to go and fetch that URL so we mustn't forget to do that so here we do data tasks that resume okay and so this this should be good this should work and what we're going to do after after this is to do an image cache so we don't redownload the same thumbnail images over and over alright so let's take a look at what this is talking about first now okay how about that because it's basically saying that this thumbnail property is not an optional it's it's actually you know by default it's an empty string so instead I'll compare it to empty string making sure that it's not empty okay so now we've finished off our thumbnail it sets the title it sets the date and it downloads the thumbnail we need to get the view controller to start using this so what we've done here in the storyboard is we've already told interface builder that this prototype cell is an instance of our custom subclass right so inside view controller you know when when view controller wants to display the first data item it's gonna ask the view controller using this this cell for row add method remember this is what we talked about in the previous lesson and we're going to try to grab that prototype cell using this video cell ID but because that prototype cell is no longer the default uitableviewcell it's actually our custom video table view cell when this method gets called and you're trying to grab that prototype cell with this idea what you're getting back is actually an instance of video table view cell so we actually have to specify that here so we're going to say you know you're fetching that prototype cell as a video table view cell and such down here we're going to be able to say cell dot set cell right and pass in that video now where are we gonna get this video well right here this line of code was from we wrote before to grab the title we're just gonna change it slightly and instead of just grabbing the title we're gonna say let video equals self dot videos and we're gonna get rid of that part so we're basically grabbing the specified video that this row is trying to display we're putting it into this constant and then we're going to pass that video into this set cell method okay so I can delete this comment because it no longer makes sense so now let's try this out let's run it and see what we get so what we should see are the actual video titles the dates the video thumbnails and stuff like that alright this is awesome this is awesome now we're going to change the content type of these images so that you know because it's trying to fit this thumbnail into the image view and by default I think it's not stretching it to fill the whole image view so let's click on thumbnail image let's go to the attributes inspector here and instead of the aspect fit we're going to choose aspect fill so this will attempt to fill up the entire image view while maintaining the same aspect ratio so let's run it using that content mode instead so that looks a lot better and you can see that dates are exactly how we want them so this is really awesome now the only downside is when I scroll something out of view and if that cell gets recycled and then I pull it back into view it's going off to redownload the same image data again so what I would rather have is just to save the image data so that we we can reuse it if we need to show the same image instead of having to redownload it and we can do that with a simple cache manager all right so to do that let's first create a new file inside helpers let's add a new file and it'll be a swift file and I'm going to call this I'm just gonna call it cache manager and we're gonna call this class the cache manager and it's gonna have a static method called let's say set video cache and we're gonna pass in a URL and this is going to be a string and also a the actual video data right so we'll allow it to pass in the data and the reason why this is a static method is so that we don't need to create an instance of the cache manager to use these methods there's no there's no point to doing that so we'll have another one called get video cache and you pass in the URL and you get back the you get back the data but it could be nil if that URL doesn't exist in our cache then we then we return nil and to store the cache we're just gonna have a simple dictionary static far let's call this cache dictionary let's just name it cache and we're gonna make this an instance of string and data so that's our dictionary right there initially it's empty so when we want to set data into it we just say cache the key is the URL and we're gonna sign into it the data very simple and use the URL as the key right and when we return we basically try to get the data for the specified URL so we just return cache URL now if that URL doesn't exist it's going to return nil and if it does exist and it's going to find the data and return that so this is all it takes and inside our video table view cell before we download the data we just have to check check cache before downloading data so if cache manager dot get video cache self thought video thumbnail we can actually assign it if let cached data equals that so essentially if we are able to find the data for that URL then it's going to get assigned into this constant cash data and then we can use we can use that constant in here if it gets nil back then it's not going to come into this if statement so when it comes into here we know that we actually found the data so we can set the thumbnail image for you so self thought thumbnail image view that image is equal to UI image and we can pass in the cache the data okay and then we're just going to hit return because we don't want to run the rest of this code to actually download the the image okay but let's say that the image data isn't inside our cache and we get back nil then it's going to skip this chunk of code and it's going to come down here and it's going to start downloading the data over the network so at this point what we're going to want to do since we've downloaded the data already save the data in the cache so we're going to have cache manager dot set video cache you know for the URL dot absolute string and here we're going to pass in the data actually let's do that let's see okay so we can force and wrap this URL and this data I guess we should allow potential Nils so in the cache manager inside here I'm gonna make this parameter an optional data type just in case that the data is nil and it should be good okay so I'm gonna build it that should resolve okay now let's run the project and I'm scrolling up and down and all of these images that have been that you see here have been downloaded in cache so I'm going to set a breakpoint right right here it should never come down here anymore because we don't have to download any more data right and when I scroll this you can see that no data is being downloaded anymore no image data that is alright so we've finished another chunk of functionality so I'm gonna go ahead and commit this to our repo and let's take a look at where we are I'm going to need to go into the desktop the YouTube one day build the folder that's where my project is get status all right I'm just gonna add everything and and add a commit message and say that added custom video custom table view cell and configured the cell to show video thumbnail title and date also added cache manager to save image data I think that's what we did all right now let's push all right cool all right so today you created a custom table view cell to display each video in the app you also learned how to download images and how to format dates now these are very common skills that you'll find yourself using time and time again for all of your future apps now I want to turn it over to you how have you been enjoying this app series so far I want to do more app series after this one but I want to make sure that it's helpful for you guys in that it's actually helping so give me your vote of confidence by leaving a quick comment below in the next lesson you'll be creating the detailviewcontroller so that the user can actually click into a video and watch it make sure you don't miss the video by subscribing to the channel if you haven't already and giving this video a thumbs up if you enjoyed it and finally you know the drill my project is in the description below just remember you have to add your YouTube API key to the constants file alright thanks for watching and I'll see you in the next lesson
