With timestamps:

00:01 - hey coders how's it going Chris here and
00:05 - today I wanted to introduce you guys to
00:07 - a library called snap kit and snap kit
00:09 - is an auto layout DSL
00:11 - so DSL stands for domain-specific
00:13 - language and basically it's like a mini
00:17 - language to describe Auto layout we
00:19 - don't know what Auto layout is I suggest
00:21 - that you check out this video here in
00:23 - the corner if you click it it's gonna
00:25 - open up a new window where I describe
00:27 - what Auto layout is but it's a system
00:29 - for laying out your elements and
00:31 - describing how they're sized and how
00:33 - they're positioned relative to the other
00:35 - elements on the view as with most things
00:38 - there's more than one way to add Auto
00:40 - layout constraints to your element and
00:43 - constraint is just a word to describe an
00:45 - auto layout rule so you can either add
00:47 - Auto layout constraints through your
00:50 - storyboard to your element or you can
00:52 - add auto layout constraints
00:54 - programmatically now the issue is when
00:56 - you do it programmatically there's
00:57 - actually a lot of code to type out just
01:00 - for a single auto layout constraint and
01:02 - I'm gonna show you guys what that looks
01:04 - like but using snap kit it makes
01:06 - describing those constraints through
01:08 - code a lot easier a lot more
01:11 - straightforward and a lot shorter so you
01:13 - can see kind of an example of this right
01:15 - here so for a box which I assume is some
01:18 - sort of element up here at the UI view
01:20 - and if they wanted to make the height 50
01:23 - they would just do with oh this is both
01:26 - the width and the height is equal to 50
01:28 - and here it's changing center of that
01:31 - box equal to the center of the view
01:33 - itself just with two simple lines he's
01:36 - able to describe the size and the
01:38 - position of that box let's go ahead and
01:40 - install snap kit for an Xcode project
01:43 - and I'll show you guys what it's all
01:45 - about
01:46 - so snap kit actually is unique in that
01:48 - it has its own little website for its
01:50 - documentation so I'm gonna click that
01:51 - and go to snap kit I owe and then we're
01:55 - going to do a cocoa pod install of this
01:58 - library by following these instructions
01:59 - here and if you don't know what cocoa
02:02 - pods is you can see here it's a
02:04 - dependency manager for cocoa projects
02:06 - and it just helps you manage the
02:08 - different third-party libraries that
02:10 - you're using your Xcode project check
02:12 - out the video in the upper right
02:13 - hand corner for a short setup video
02:15 - which shows you how to install google
02:18 - pods and get up and running with it so
02:20 - click that and open in a new link okay
02:22 - with that said let's start our Xcode
02:24 - project I'm gonna start a brand new
02:26 - single view application create new Xcode
02:28 - project single view application I'm
02:31 - going to call this a snap kit demo make
02:35 - sure that the language is Swift and the
02:37 - device is iPhone and it doesn't matter
02:40 - what you check off for those three
02:41 - options and we're going to save it on
02:44 - the desktop and now we're going to
02:48 - actually close the project because we're
02:51 - going to create a pod file for it
02:53 - I'm gonna hit command spacebar to open
02:55 - up spotlight type in terminal to open up
02:59 - terminal and here I'm going to type in
03:02 - PWD to check out what directory path I'm
03:05 - at and because I saved my project on the
03:07 - desktop and here the directories in my
03:09 - home folder I'm going to go into my
03:12 - desktop folder those are the files and
03:16 - folders on my desktop I'm going to go
03:19 - into the snap kit demo remember if you
03:24 - have a space in your folder you have to
03:26 - use that slash okay so here I am in my
03:29 - project folder I'm going to type pod in
03:32 - it and this is only after you have cocoa
03:34 - pods installed okay so now we can go
03:36 - check out our project folder okay so now
03:44 - here's the pod file that it created so
03:47 - I'm going to right click open it up with
03:49 - my text editor and then within here
03:52 - we're going to uncomment the platform
03:56 - line we're going to uncomment use
03:58 - frameworks because we're using Swift and
04:01 - let's go back here and here's the line
04:03 - that we need so we're going to put that
04:07 - right in there we're going to hit
04:10 - command s to save it now we're going to
04:12 - jump back to terminal and we're going to
04:14 - type in pod install so give that a
04:17 - second for it to go ahead read the pod
04:20 - file grab the snap kit code and download
04:24 - the files
04:25 - here we are now if we go back to our
04:27 - project directory like that it's created
04:31 - a couple more files that we open up the
04:33 - one called XC workspace and here I'm
04:36 - just going to press command B to build
04:38 - the project and before we start working
04:41 - with snap kit let me show you a couple
04:43 - of ways that we can add our auto layout
04:46 - constraints so in the storyboard here
04:48 - let me just create a little more space
04:49 - okay so let's say I had a uiview and I
04:54 - added it here and I wanted to stretch it
04:57 - against the edges of all four sides I
04:59 - could tap on my UI view let's just make
05:02 - it a black color so you can see and then
05:04 - I would go down here and I would
05:07 - basically add these four constraints I
05:09 - would change the nearest neighbor to the
05:13 - View and then I would go 0 0 0 and add 4
05:17 - constraints and then if I update frames
05:20 - I would see it all stretched out so
05:21 - that's pretty easy to do however there
05:24 - may be cases where you can't add auto
05:27 - layout constraints to your storyboard
05:28 - because maybe the position of your
05:31 - element is dynamic maybe you only get
05:34 - that data about where to position it
05:36 - afterward when the app has downloaded
05:38 - some sort of data file or in a lot of
05:41 - cases where apps do networking its
05:43 - downloading information from feeds and
05:46 - stuff like that and off of that data we
05:48 - create objects in the view for example
05:50 - in the news app where the app has to go
05:53 - and retrieve the news and then for each
05:55 - news article it creates this little card
05:57 - on the view so it's gonna have to
05:59 - position those things dynamically while
06:02 - the app is running and you wouldn't be
06:04 - able to do that here via the storyboard
06:07 - so there legitimately are cases where
06:09 - you need to programmatically assign auto
06:11 - layout constraints so I'm gonna delete
06:13 - that view right here and then I'm going
06:15 - to go into the view controller and I'm
06:16 - gonna show you just a quick example of
06:18 - what the code looks like if we're going
06:20 - to do it through code I would say let
06:23 - box equals UI view so I'm creating a
06:28 - brand new UI view and then next I'd have
06:30 - to set a property called translate auto
06:33 - sizing mask into constraints equals
06:36 - false and the reason for this is because
06:39 - by default your view has an auto
06:41 - resizing mask and it converts those into
06:43 - constraints and we don't want that to
06:45 - happen so we're setting that to false
06:47 - because we're going to set our own
06:49 - constraints so down here I'm going to
06:51 - write a single constraint to constrain
06:53 - that view to the top and make it zero
06:56 - against the top of the view so we would
07:00 - say let top constraint equals NS layout
07:05 - constraint that's the class and it's got
07:08 - this initializer here so which object
07:11 - are we talking about we're talking about
07:12 - the box which attribute are we talking
07:14 - about we can say dot top related by dot
07:19 - equal to item self dot view so that's
07:25 - the the view of this view controller
07:27 - which layout attribute of that view so
07:32 - dot top again multipliers one and
07:34 - constant is zero and then we would have
07:37 - to add this constraint to not to the box
07:41 - actually but to the parent view because
07:45 - if it's a positioning constraint you add
07:48 - it to the parent view if it's a sizing
07:50 - constraint you add it to the box so this
07:52 - is just for one constraint we're gonna
07:54 - have to repeat this you know for the
07:58 - bottom and then another one for the left
08:02 - another one for the right you get the
08:03 - idea and this is just to do what we did
08:06 - in the storyboard to make this UI view
08:10 - stick to all four edges so now you can
08:12 - see you know the type of code that you
08:14 - have to write to do this
08:15 - programmatically actually there's one
08:17 - more thing I forgot to do here which is
08:19 - to actually add the box into the view so
08:22 - here we would say self dot view dot add
08:26 - sub view and we add that box we created
08:30 - onto the view this is really important
08:32 - because if it's not in the view you
08:34 - can't add constraints to it so it would
08:36 - actually create a crash so when you
08:38 - create an element
08:39 - make sure you add it to the view before
08:41 - you start putting constraints on it okay
08:43 - now let's do this with snap kit instead
08:46 - so I'm going to erase all of this code
08:48 - up to here and the only two lines I'm
08:51 - going to leave is the line that creates
08:53 - the uiview element and the line that
08:56 - adds it to the view first thing we're
08:58 - gonna do up here is say import snap kit
09:01 - and then down here let's add constraints
09:05 - so I'm gonna type box dot and there's a
09:08 - new method or a new set of methods that
09:11 - start with SNP and you scroll down you
09:14 - can see all the different things you can
09:17 - do but what we want to do is use this
09:19 - one called the snap make constraints and
09:22 - it's got a closure which is just going
09:24 - to be a block of code I'm gonna double
09:26 - click it and inside the code we're going
09:28 - to type make dot in here we have a bunch
09:31 - of attributes that we can choose from
09:33 - and you can kind of chain them as well
09:35 - so I'm going to say make top dot bottom
09:39 - dot left dot right dot equal to and then
09:47 - here we can make it equal to another
09:49 - element so let's choose this one equal
09:53 - to self dot view and literally with one
09:56 - line we've made all four edges of the
09:59 - box equal to the edges of the self dot
10:03 - view which if you compare it with the
10:05 - code that we had before it's a huge
10:07 - savings and it saves you time as well
10:10 - there's actually an even easier way to
10:12 - write this we can go make dot edges dot
10:17 - equal to self dot view and that's even
10:20 - shorter so that's why it's called a DSL
10:23 - because it's almost like a mini language
10:25 - just to describe Auto layout constraints
10:28 - so once you get well-versed with all of
10:30 - the different things that you can do
10:31 - with snap kit and there's a great usage
10:35 - document that shows you a ton of
10:36 - examples on that website snap kit I oh
10:39 - you can begin to appreciate how much
10:42 - simpler it is to create these auto
10:44 - layout constraints using it so let's go
10:46 - back to our Xcode project and let's run
10:47 - it let's just give this box a background
10:57 - so here you can see a my simulator the
11:00 - box which is black is attached to all
11:03 - four edges using just this one single
11:06 - line of code as opposed to you know the
11:08 - 30 lines of code that we had before so
11:11 - if you find yourself writing Auto layout
11:13 - constraints in code programmatically
11:15 - highly recommend you guys to check out
11:17 - snap kit and check out all the different
11:19 - things that you can do under the usage
11:21 - section and I hope it makes your lives
11:23 - easier I want to thank you for watching
11:26 - and supporting the channel please give
11:27 - the video a thumbs up if you liked it
11:29 - share it with your friends and family
11:30 - and subscribe if you haven't already
11:32 - thank you so much again and I'll see you
11:34 - guys tomorrow
11:35 - bye

Cleaned transcript:

hey coders how's it going Chris here and today I wanted to introduce you guys to a library called snap kit and snap kit is an auto layout DSL so DSL stands for domainspecific language and basically it's like a mini language to describe Auto layout we don't know what Auto layout is I suggest that you check out this video here in the corner if you click it it's gonna open up a new window where I describe what Auto layout is but it's a system for laying out your elements and describing how they're sized and how they're positioned relative to the other elements on the view as with most things there's more than one way to add Auto layout constraints to your element and constraint is just a word to describe an auto layout rule so you can either add Auto layout constraints through your storyboard to your element or you can add auto layout constraints programmatically now the issue is when you do it programmatically there's actually a lot of code to type out just for a single auto layout constraint and I'm gonna show you guys what that looks like but using snap kit it makes describing those constraints through code a lot easier a lot more straightforward and a lot shorter so you can see kind of an example of this right here so for a box which I assume is some sort of element up here at the UI view and if they wanted to make the height 50 they would just do with oh this is both the width and the height is equal to 50 and here it's changing center of that box equal to the center of the view itself just with two simple lines he's able to describe the size and the position of that box let's go ahead and install snap kit for an Xcode project and I'll show you guys what it's all about so snap kit actually is unique in that it has its own little website for its documentation so I'm gonna click that and go to snap kit I owe and then we're going to do a cocoa pod install of this library by following these instructions here and if you don't know what cocoa pods is you can see here it's a dependency manager for cocoa projects and it just helps you manage the different thirdparty libraries that you're using your Xcode project check out the video in the upper right hand corner for a short setup video which shows you how to install google pods and get up and running with it so click that and open in a new link okay with that said let's start our Xcode project I'm gonna start a brand new single view application create new Xcode project single view application I'm going to call this a snap kit demo make sure that the language is Swift and the device is iPhone and it doesn't matter what you check off for those three options and we're going to save it on the desktop and now we're going to actually close the project because we're going to create a pod file for it I'm gonna hit command spacebar to open up spotlight type in terminal to open up terminal and here I'm going to type in PWD to check out what directory path I'm at and because I saved my project on the desktop and here the directories in my home folder I'm going to go into my desktop folder those are the files and folders on my desktop I'm going to go into the snap kit demo remember if you have a space in your folder you have to use that slash okay so here I am in my project folder I'm going to type pod in it and this is only after you have cocoa pods installed okay so now we can go check out our project folder okay so now here's the pod file that it created so I'm going to right click open it up with my text editor and then within here we're going to uncomment the platform line we're going to uncomment use frameworks because we're using Swift and let's go back here and here's the line that we need so we're going to put that right in there we're going to hit command s to save it now we're going to jump back to terminal and we're going to type in pod install so give that a second for it to go ahead read the pod file grab the snap kit code and download the files here we are now if we go back to our project directory like that it's created a couple more files that we open up the one called XC workspace and here I'm just going to press command B to build the project and before we start working with snap kit let me show you a couple of ways that we can add our auto layout constraints so in the storyboard here let me just create a little more space okay so let's say I had a uiview and I added it here and I wanted to stretch it against the edges of all four sides I could tap on my UI view let's just make it a black color so you can see and then I would go down here and I would basically add these four constraints I would change the nearest neighbor to the View and then I would go 0 0 0 and add 4 constraints and then if I update frames I would see it all stretched out so that's pretty easy to do however there may be cases where you can't add auto layout constraints to your storyboard because maybe the position of your element is dynamic maybe you only get that data about where to position it afterward when the app has downloaded some sort of data file or in a lot of cases where apps do networking its downloading information from feeds and stuff like that and off of that data we create objects in the view for example in the news app where the app has to go and retrieve the news and then for each news article it creates this little card on the view so it's gonna have to position those things dynamically while the app is running and you wouldn't be able to do that here via the storyboard so there legitimately are cases where you need to programmatically assign auto layout constraints so I'm gonna delete that view right here and then I'm going to go into the view controller and I'm gonna show you just a quick example of what the code looks like if we're going to do it through code I would say let box equals UI view so I'm creating a brand new UI view and then next I'd have to set a property called translate auto sizing mask into constraints equals false and the reason for this is because by default your view has an auto resizing mask and it converts those into constraints and we don't want that to happen so we're setting that to false because we're going to set our own constraints so down here I'm going to write a single constraint to constrain that view to the top and make it zero against the top of the view so we would say let top constraint equals NS layout constraint that's the class and it's got this initializer here so which object are we talking about we're talking about the box which attribute are we talking about we can say dot top related by dot equal to item self dot view so that's the the view of this view controller which layout attribute of that view so dot top again multipliers one and constant is zero and then we would have to add this constraint to not to the box actually but to the parent view because if it's a positioning constraint you add it to the parent view if it's a sizing constraint you add it to the box so this is just for one constraint we're gonna have to repeat this you know for the bottom and then another one for the left another one for the right you get the idea and this is just to do what we did in the storyboard to make this UI view stick to all four edges so now you can see you know the type of code that you have to write to do this programmatically actually there's one more thing I forgot to do here which is to actually add the box into the view so here we would say self dot view dot add sub view and we add that box we created onto the view this is really important because if it's not in the view you can't add constraints to it so it would actually create a crash so when you create an element make sure you add it to the view before you start putting constraints on it okay now let's do this with snap kit instead so I'm going to erase all of this code up to here and the only two lines I'm going to leave is the line that creates the uiview element and the line that adds it to the view first thing we're gonna do up here is say import snap kit and then down here let's add constraints so I'm gonna type box dot and there's a new method or a new set of methods that start with SNP and you scroll down you can see all the different things you can do but what we want to do is use this one called the snap make constraints and it's got a closure which is just going to be a block of code I'm gonna double click it and inside the code we're going to type make dot in here we have a bunch of attributes that we can choose from and you can kind of chain them as well so I'm going to say make top dot bottom dot left dot right dot equal to and then here we can make it equal to another element so let's choose this one equal to self dot view and literally with one line we've made all four edges of the box equal to the edges of the self dot view which if you compare it with the code that we had before it's a huge savings and it saves you time as well there's actually an even easier way to write this we can go make dot edges dot equal to self dot view and that's even shorter so that's why it's called a DSL because it's almost like a mini language just to describe Auto layout constraints so once you get wellversed with all of the different things that you can do with snap kit and there's a great usage document that shows you a ton of examples on that website snap kit I oh you can begin to appreciate how much simpler it is to create these auto layout constraints using it so let's go back to our Xcode project and let's run it let's just give this box a background so here you can see a my simulator the box which is black is attached to all four edges using just this one single line of code as opposed to you know the 30 lines of code that we had before so if you find yourself writing Auto layout constraints in code programmatically highly recommend you guys to check out snap kit and check out all the different things that you can do under the usage section and I hope it makes your lives easier I want to thank you for watching and supporting the channel please give the video a thumbs up if you liked it share it with your friends and family and subscribe if you haven't already thank you so much again and I'll see you guys tomorrow bye
