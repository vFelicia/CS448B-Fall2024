With timestamps:

00:00 - hi welcome to lesson five you're halfway
00:02 - there in this lesson we're diving right
00:04 - into the Swift programming language for
00:06 - this video and the next two you're going
00:08 - to be learning about the basics of Swift
00:10 - this is stuff that you're going to need
00:12 - to know in order to complete the project
00:14 - that we're working on together I know
00:16 - that the coding part is intimidating to
00:18 - a lot of people but I want you to stick
00:20 - with this lesson and the next two really
00:22 - pay attention and I recommend that you
00:24 - open up Xcode on your own computer and
00:26 - type out exactly what I'm showing you on
00:28 - the screen by doing that it's going to
00:30 - help you remember the language structure
00:31 - and the keywords without having to
00:34 - memorize anything and I promise you by
00:37 - lesson ten you will be able to write
00:38 - Swift code all right let's get started
00:41 - when you launch Xcode you're going to
00:43 - see this option here to get started with
00:45 - the playground so go ahead and click
00:46 - that and we're under iOS we're just
00:49 - gonna choose a blank playground go ahead
00:52 - and create that on your desktop you may
00:55 - see something like this a playground is
00:57 - not an entirely new Xcode project like
01:00 - we've been creating in the past few
01:01 - lessons rather it's a lightweight place
01:03 - where we can test out some code so it's
01:05 - perfect for what we need to do if you
01:07 - don't have the line numbers on the left
01:09 - hand side there and you'd like them just
01:11 - go into your Xcode preferences under the
01:13 - text editing section of the Preferences
01:15 - you'll see a checkbox that you can
01:16 - enable to show your line numbers in this
01:19 - playground right here you're gonna see
01:21 - this editor area in the middle where you
01:23 - can write some code on the top you're
01:24 - going to see a status bar mine says
01:26 - ready right now yours might say
01:27 - launching simulator or it might be
01:29 - spinning and doing something and when it
01:31 - turns ready you're going to see some
01:33 - text on the right-hand side here and now
01:35 - this is sort of like a preview pane I
01:37 - don't want you to pay too much attention
01:38 - to what goes on right here because
01:41 - depending on your version of Xcode you
01:43 - might see something different than what
01:45 - I see and I don't want you to get
01:46 - confused what we are going to do however
01:48 - is click this little arrow right here to
01:52 - show this console area and we're going
01:54 - to focus on the output that is down here
01:57 - rather than the output here okay so
01:59 - let's talk about some of the code that
02:00 - you see on the screen starting from the
02:02 - top at the top you're going to see this
02:04 - text in green this is an actually code
02:06 - that is going to be executed these are
02:08 - called comments and they're basically
02:10 - notes or remarks that you can leave for
02:12 - yourself to
02:13 - yourself what this piece of code does or
02:15 - why you wrote it you can write a comment
02:17 - as long as you start the line with these
02:20 - two forward slashes anything you write
02:22 - after that on the same line will be
02:24 - regarded as a comment and it won't be
02:26 - run as code for example down here we can
02:29 - start with two forward slashes and we
02:32 - can say a comment like just testing out
02:35 - some code now obviously when you write
02:38 - comments for your own projects they are
02:41 - going to be much more meaningful than
02:42 - that but this is just to demonstrate a
02:45 - comment when you're working with the
02:47 - team of people it's crucial that you
02:48 - leave comments to show your teammates
02:50 - your reasoning and your rationale behind
02:52 - the code that you're writing if you're
02:54 - working by yourself it's also crucial to
02:55 - leave comments because when you come
02:57 - back to your project months later down
02:59 - the road you won't remember why you
03:01 - wrote that code unless you've left
03:03 - yourself comments now the line below the
03:05 - comment import UIKit uikit is something
03:09 - that we're going to talk a lot about
03:10 - later but for now just know that it's a
03:12 - library full of code that apple provides
03:14 - and it contains a lot of useful stuff
03:16 - for building apps import is a special
03:18 - keyword that says that we want to use
03:20 - that library of code by importing it
03:22 - we'll be able to take advantage of the
03:24 - uikit
03:25 - library before we talk about the next
03:27 - line of code this one right here we need
03:29 - to talk about variables in an app
03:31 - there's lots of data being passed around
03:33 - you need a way to keep track of this
03:35 - data that's what variables are for you
03:37 - can think of variables as kind of like a
03:38 - sticky tab you know those ones where you
03:41 - can stick on the page you can give it a
03:42 - name and it keeps track of that page or
03:45 - in our case a piece of data let's talk
03:48 - about the line of code below now
03:50 - following our analogy var is a special
03:53 - keyword in Swift that creates a new
03:55 - sticky tab Str is in this case the name
03:58 - that we write on the sticky tab hello
04:00 - world is the piece of data that we want
04:02 - this variable to keep track of the equal
04:04 - sign is assigning that data to that
04:07 - variable in the case of our analogy it's
04:09 - like sticking that sticky tab on the
04:11 - page that we want to keep track of now
04:13 - this line of code here on line seven
04:15 - makes sense right we are declaring a new
04:18 - variable called
04:19 - STR and we are assigning hello
04:21 - playground to it now using our sticky
04:23 - tab analogy what if we changed our mind
04:25 - peeled off that sticky
04:26 - and stuck it on another page well we can
04:29 - do that with our variable too but
04:31 - there's just one catch let's just say
04:33 - that we used a permanent marker to write
04:35 - the name on that sticky tab so we can't
04:37 - change the name this is how our variable
04:40 - works just like moving our sticky tab to
04:42 - point to another page we can point our
04:44 - variable to another piece of data as
04:45 - well notice that we don't use the VAR
04:55 - keyword on this line because we only
04:57 - needed it in line 7 to create that
05:00 - variable and I just said create so it's
05:02 - easier to understand but the proper
05:04 - terminology is declaring a variable so
05:07 - we declared STR on line 7 and on line 9
05:11 - we're simply assigning it another piece
05:14 - of data so you can see that now that we
05:16 - have another line of code we have
05:18 - another preview here but again I don't
05:21 - want you to pay attention to that
05:22 - because your preview might look
05:23 - different than what I have depending on
05:25 - your version of Xcode I alluded to being
05:28 - able to show the output down here and
05:31 - that's exactly what we're going to do
05:32 - we're going to use a keyword called
05:34 - print and that's going to allow us to
05:36 - output the contents of our variable so
05:39 - in here in between these two statements
05:41 - let's write print and then you want to
05:45 - open a round bracket like that and this
05:47 - menu that comes out is Xcode trying to
05:50 - autocomplete what you're writing in
05:52 - other words it's just exco trying to
05:54 - make your life easier by trying to guess
05:56 - what you want to type and allowing you
05:59 - to select it from this menu we don't
06:01 - need to do that right now
06:02 - type STR and if you don't have this
06:06 - closing bracket that I have here just on
06:09 - your keyboard hit the closing bracket to
06:11 - complete the statement when you do that
06:13 - down here in the console area you should
06:16 - see Hello playground and this is the
06:18 - contents of the STR variable which is
06:21 - what the print statement does now on
06:23 - your own playground if you don't see
06:24 - that output yet you might see at the top
06:26 - of the status bar it doesn't say ready
06:28 - instead it might be like running the
06:29 - code or something like that or if you
06:31 - don't even see that what I want you to
06:33 - make sure is that this icon here this
06:36 - play button is in blue and if yours is
06:38 - not
06:39 - then I want you to click and hold this
06:41 - and make sure that it's set to
06:42 - automatically run because if you set it
06:45 - to manually run you're going to have to
06:47 - click this play button every time you
06:49 - want it to process the code but when
06:51 - it's set to automatically run every time
06:53 - we change the code in this editor area
06:55 - it's going to rerun the code and process
06:59 - all of the output that it needs to show
07:00 - down here now let's try printing the
07:02 - contents of STR again but this time
07:04 - after we've changed it so type print
07:08 - open up a round bracket STR and then you
07:11 - can close that round bracket and then
07:14 - it's processing but after it processes
07:17 - you can see down here that this is the
07:20 - first print statement this is the second
07:22 - print statement so you see after we
07:25 - changed what our variable is pointing to
07:27 - and we printed it out indeed it says
07:30 - another playground next we're going to
07:33 - talk about constants constants are just
07:35 - like variables except that once you
07:37 - assign data to it that's it that
07:40 - constant can't point to anything else
07:42 - following our sticky tab analogy imagine
07:44 - that before you stuck the tab on the
07:46 - sheet of paper you applied some super
07:47 - glue and then you stuck it on the paper
07:49 - there's no way you're going to peel off
07:51 - that tab that's like a constant the
07:53 - syntax for a constant is pretty much the
07:55 - same except that we use the let keyword
07:57 - instead of the VAR keyword which we used
07:59 - before let's go back to our playground
08:01 - and try it out so we're going to type
08:03 - this out using let we're gonna say let s
08:06 - TR equals yet another playground now
08:13 - your Xcode might be processing but once
08:14 - it does you're going to see that it
08:16 - declares an error here and it's gonna
08:19 - highlight this line in red and also in
08:21 - the console you'll see that there is an
08:24 - error the problem is that constants and
08:26 - variables must have different names
08:28 - because otherwise it would be quite
08:29 - confusing let's change the name of our
08:31 - constant now I'm just going to call it
08:35 - con and now the error goes away and
08:38 - everything is fine
08:39 - let's try assigning something different
08:41 - to our con constant
08:47 - let's go do its thing and then it's
08:50 - going to tell you that you cannot assign
08:53 - another piece of data to our constant
08:55 - because like I said a constant once you
08:58 - assign a piece of data to it that's it
09:00 - now you might be wondering why would we
09:02 - want to use a constant versus variable
09:04 - well sometimes when you're programming
09:06 - and you want to keep track of a piece of
09:08 - data you want to make sure that no one
09:10 - else touches it or changes it that's
09:12 - when you would use a constant you would
09:13 - use a variable when you expect that the
09:15 - data it points to will change or maybe
09:18 - it gets updated or something like that
09:19 - so let's go ahead and erase this line
09:22 - here now I don't know if you've noticed
09:23 - but so far we've only been assigning
09:26 - pieces of text to our constants and
09:28 - variables well there are other types of
09:30 - data that we can assign to this brings
09:32 - us to the next topic data types the
09:35 - pieces of text that we've been assigning
09:36 - to our variables and constants are
09:38 - called strings now I know it's kind of a
09:41 - strange term I remember when I first
09:43 - started programming I thought of those
09:44 - as strings of characters forming a piece
09:47 - of text the next data type is boolean or
09:50 - bool for short a boolean value is going
09:53 - to be either true or false perfect for
09:56 - keeping track of those pieces of data
09:57 - which are only going to be one of two
09:59 - values don't worry we're gonna try all
10:01 - of these out in the playground in just a
10:03 - second next up we have integers or int
10:06 - for short
10:07 - these represent integers just like you
10:08 - learned in math class integers are whole
10:10 - numbers in the positive or negative
10:12 - range including zero you might ask what
10:15 - about decimals don't worry we've got
10:17 - that float is what you're looking for
10:19 - the float datatype represents
10:21 - floating-point data in other words your
10:23 - decimal numbers we've just covered for
10:25 - data types and we're about to go back to
10:27 - our playground and try them out but I
10:28 - just want to say there are more data
10:30 - types however these four are great to
10:33 - start with at the end I have a swift
10:35 - cheat sheet that includes the rest of
10:36 - them and I have a worksheet for you to
10:39 - get extra practice from - all right
10:41 - let's go back to the playground and try
10:43 - this stuff out alright first let's try
10:45 - out boolean x' so i'm going to declare
10:47 - i'm just going to use the variable name
10:50 - b and we're just going to type the value
10:52 - that's true now this is a boolean
10:55 - let's print out be like that and you're
10:59 - gonna see down here that it says true
11:02 - the other value that you can assign B to
11:04 - is simply false and true or false our
11:08 - special keywords and Swift that you can
11:10 - use as the values for a boolean variable
11:12 - next up we have integers so let's create
11:15 - one like this and you know an integer
11:18 - can be something like that you know or
11:20 - it can be zero
11:24 - or like we said it could be a negative
11:27 - number all right now let's try working
11:29 - with some float datatypes so I'm gonna
11:32 - use the variable F I'm gonna say
11:34 - something like that or something like
11:35 - that for instance and then we can also
11:41 - go ahead and print this out and print
11:45 - out F and we'll print out I as well and
11:48 - you can see that with the print
11:51 - statement down here the contents of the
11:53 - variable is just the last value that
11:56 - I've assigned to it now that we've gone
11:58 - through datatypes let me tell you one
12:00 - other thing about variables and
12:02 - constants a variable or a constant can
12:05 - only store data of one type now what do
12:08 - I mean by that let me demonstrate so for
12:10 - example we have this variable I here and
12:13 - we've assigned to it an integer and we
12:16 - can reassign it different integers right
12:18 - but however let me try to assign it
12:23 - suddenly a float and it's going to say I
12:27 - can't assign a double to a type in in
12:30 - double is just another data type that
12:33 - stores decimal numbers just like float
12:35 - does except that it's less precise it
12:37 - can't store as many decimal places as a
12:40 - float data type can anyways it's saying
12:43 - that we can't assign value of type
12:46 - double which is what this is to a type
12:49 - of int which is what I is but where did
12:52 - we specify that our variable I could
12:56 - only store int data types we didn't
12:59 - specify that in fact what it did was it
13:02 - took the first thing that you assigned
13:04 - to that variable and it basically
13:07 - inferred
13:08 - the datatype from that value because we
13:10 - assigned 32 into the variable I and 32
13:14 - is an int this variable assumed that it
13:17 - would only store int values and so
13:20 - suddenly when we try to assign it a
13:22 - double or a float value that's going to
13:24 - cause an error same thing goes for these
13:26 - other lines of code up here so far B
13:29 - equals false B now can only store
13:33 - boolean values right if I did B equals
13:37 - true that would be fine but if I
13:39 - suddenly did you know B equals test or
13:42 - something like that and I start to
13:44 - assign a string to it you'll see that
13:46 - there is another error so I just want
13:49 - you to make a mental note of that so let
13:53 - me just erase these lines of code like
13:55 - that another thing I want you to make
13:58 - aware of is that we can explicitly state
14:01 - that a variable can only store a certain
14:04 - data type and we do that when we declare
14:06 - the variable here and we use : and then
14:10 - we type out the data type that tells
14:13 - Xcode that we want this variable I to
14:15 - only store integer types if I declare my
14:19 - variable like this and I say that I can
14:22 - only store integer types and I suddenly
14:24 - try to assign it a float it's not going
14:29 - to like that even though it's the first
14:30 - thing I'm assigning to it all right so
14:33 - that is just something I wanted you to
14:36 - know I can do this with this as well
14:39 - just to show you what the data type
14:42 - names are like that
14:49 - so that's all fine I'm just explicitly
14:52 - stating that these variables store this
14:55 - data type float int bool and string at
15:01 - the same time like you saw we can leave
15:03 - that out and it will just infer from the
15:06 - first piece of data that we assign it
15:08 - that that is the data type for that
15:10 - variable so that is your first lesson in
15:13 - Swift programming you learned about
15:15 - variables constants and how they can
15:17 - store values you also learn about data
15:20 - types specifically bool string int and
15:24 - float I have a swift cheat sheet for you
15:26 - guys that covers all of this stuff and
15:29 - it's going to be a handy reference to
15:30 - keep around as you're learning Swift
15:32 - I also have a worksheet for you that's
15:34 - going to cover using variables and
15:36 - performing math operations on them so I
15:39 - highly recommend that you download that
15:41 - and check it out
15:42 - you can get them both by following the
15:44 - URL that's on the screen or the URL in
15:46 - the description below but first if you
15:48 - enjoyed this video please subscribe to
15:50 - my channel by clicking the subscribe
15:51 - button below and if you don't want to
15:53 - miss a single video make sure you click
15:54 - that Bell icon as well now I want to
15:56 - turn it over to you it's Swift
15:58 - programming your first time learning
16:00 - coding or do you know some other
16:02 - programming language let me know by
16:04 - leaving a quick comment below so thanks
16:06 - for watching you guys and I'll see you
16:08 - in the next lesson

Cleaned transcript:

hi welcome to lesson five you're halfway there in this lesson we're diving right into the Swift programming language for this video and the next two you're going to be learning about the basics of Swift this is stuff that you're going to need to know in order to complete the project that we're working on together I know that the coding part is intimidating to a lot of people but I want you to stick with this lesson and the next two really pay attention and I recommend that you open up Xcode on your own computer and type out exactly what I'm showing you on the screen by doing that it's going to help you remember the language structure and the keywords without having to memorize anything and I promise you by lesson ten you will be able to write Swift code all right let's get started when you launch Xcode you're going to see this option here to get started with the playground so go ahead and click that and we're under iOS we're just gonna choose a blank playground go ahead and create that on your desktop you may see something like this a playground is not an entirely new Xcode project like we've been creating in the past few lessons rather it's a lightweight place where we can test out some code so it's perfect for what we need to do if you don't have the line numbers on the left hand side there and you'd like them just go into your Xcode preferences under the text editing section of the Preferences you'll see a checkbox that you can enable to show your line numbers in this playground right here you're gonna see this editor area in the middle where you can write some code on the top you're going to see a status bar mine says ready right now yours might say launching simulator or it might be spinning and doing something and when it turns ready you're going to see some text on the righthand side here and now this is sort of like a preview pane I don't want you to pay too much attention to what goes on right here because depending on your version of Xcode you might see something different than what I see and I don't want you to get confused what we are going to do however is click this little arrow right here to show this console area and we're going to focus on the output that is down here rather than the output here okay so let's talk about some of the code that you see on the screen starting from the top at the top you're going to see this text in green this is an actually code that is going to be executed these are called comments and they're basically notes or remarks that you can leave for yourself to yourself what this piece of code does or why you wrote it you can write a comment as long as you start the line with these two forward slashes anything you write after that on the same line will be regarded as a comment and it won't be run as code for example down here we can start with two forward slashes and we can say a comment like just testing out some code now obviously when you write comments for your own projects they are going to be much more meaningful than that but this is just to demonstrate a comment when you're working with the team of people it's crucial that you leave comments to show your teammates your reasoning and your rationale behind the code that you're writing if you're working by yourself it's also crucial to leave comments because when you come back to your project months later down the road you won't remember why you wrote that code unless you've left yourself comments now the line below the comment import UIKit uikit is something that we're going to talk a lot about later but for now just know that it's a library full of code that apple provides and it contains a lot of useful stuff for building apps import is a special keyword that says that we want to use that library of code by importing it we'll be able to take advantage of the uikit library before we talk about the next line of code this one right here we need to talk about variables in an app there's lots of data being passed around you need a way to keep track of this data that's what variables are for you can think of variables as kind of like a sticky tab you know those ones where you can stick on the page you can give it a name and it keeps track of that page or in our case a piece of data let's talk about the line of code below now following our analogy var is a special keyword in Swift that creates a new sticky tab Str is in this case the name that we write on the sticky tab hello world is the piece of data that we want this variable to keep track of the equal sign is assigning that data to that variable in the case of our analogy it's like sticking that sticky tab on the page that we want to keep track of now this line of code here on line seven makes sense right we are declaring a new variable called STR and we are assigning hello playground to it now using our sticky tab analogy what if we changed our mind peeled off that sticky and stuck it on another page well we can do that with our variable too but there's just one catch let's just say that we used a permanent marker to write the name on that sticky tab so we can't change the name this is how our variable works just like moving our sticky tab to point to another page we can point our variable to another piece of data as well notice that we don't use the VAR keyword on this line because we only needed it in line 7 to create that variable and I just said create so it's easier to understand but the proper terminology is declaring a variable so we declared STR on line 7 and on line 9 we're simply assigning it another piece of data so you can see that now that we have another line of code we have another preview here but again I don't want you to pay attention to that because your preview might look different than what I have depending on your version of Xcode I alluded to being able to show the output down here and that's exactly what we're going to do we're going to use a keyword called print and that's going to allow us to output the contents of our variable so in here in between these two statements let's write print and then you want to open a round bracket like that and this menu that comes out is Xcode trying to autocomplete what you're writing in other words it's just exco trying to make your life easier by trying to guess what you want to type and allowing you to select it from this menu we don't need to do that right now type STR and if you don't have this closing bracket that I have here just on your keyboard hit the closing bracket to complete the statement when you do that down here in the console area you should see Hello playground and this is the contents of the STR variable which is what the print statement does now on your own playground if you don't see that output yet you might see at the top of the status bar it doesn't say ready instead it might be like running the code or something like that or if you don't even see that what I want you to make sure is that this icon here this play button is in blue and if yours is not then I want you to click and hold this and make sure that it's set to automatically run because if you set it to manually run you're going to have to click this play button every time you want it to process the code but when it's set to automatically run every time we change the code in this editor area it's going to rerun the code and process all of the output that it needs to show down here now let's try printing the contents of STR again but this time after we've changed it so type print open up a round bracket STR and then you can close that round bracket and then it's processing but after it processes you can see down here that this is the first print statement this is the second print statement so you see after we changed what our variable is pointing to and we printed it out indeed it says another playground next we're going to talk about constants constants are just like variables except that once you assign data to it that's it that constant can't point to anything else following our sticky tab analogy imagine that before you stuck the tab on the sheet of paper you applied some super glue and then you stuck it on the paper there's no way you're going to peel off that tab that's like a constant the syntax for a constant is pretty much the same except that we use the let keyword instead of the VAR keyword which we used before let's go back to our playground and try it out so we're going to type this out using let we're gonna say let s TR equals yet another playground now your Xcode might be processing but once it does you're going to see that it declares an error here and it's gonna highlight this line in red and also in the console you'll see that there is an error the problem is that constants and variables must have different names because otherwise it would be quite confusing let's change the name of our constant now I'm just going to call it con and now the error goes away and everything is fine let's try assigning something different to our con constant let's go do its thing and then it's going to tell you that you cannot assign another piece of data to our constant because like I said a constant once you assign a piece of data to it that's it now you might be wondering why would we want to use a constant versus variable well sometimes when you're programming and you want to keep track of a piece of data you want to make sure that no one else touches it or changes it that's when you would use a constant you would use a variable when you expect that the data it points to will change or maybe it gets updated or something like that so let's go ahead and erase this line here now I don't know if you've noticed but so far we've only been assigning pieces of text to our constants and variables well there are other types of data that we can assign to this brings us to the next topic data types the pieces of text that we've been assigning to our variables and constants are called strings now I know it's kind of a strange term I remember when I first started programming I thought of those as strings of characters forming a piece of text the next data type is boolean or bool for short a boolean value is going to be either true or false perfect for keeping track of those pieces of data which are only going to be one of two values don't worry we're gonna try all of these out in the playground in just a second next up we have integers or int for short these represent integers just like you learned in math class integers are whole numbers in the positive or negative range including zero you might ask what about decimals don't worry we've got that float is what you're looking for the float datatype represents floatingpoint data in other words your decimal numbers we've just covered for data types and we're about to go back to our playground and try them out but I just want to say there are more data types however these four are great to start with at the end I have a swift cheat sheet that includes the rest of them and I have a worksheet for you to get extra practice from all right let's go back to the playground and try this stuff out alright first let's try out boolean x' so i'm going to declare i'm just going to use the variable name b and we're just going to type the value that's true now this is a boolean let's print out be like that and you're gonna see down here that it says true the other value that you can assign B to is simply false and true or false our special keywords and Swift that you can use as the values for a boolean variable next up we have integers so let's create one like this and you know an integer can be something like that you know or it can be zero or like we said it could be a negative number all right now let's try working with some float datatypes so I'm gonna use the variable F I'm gonna say something like that or something like that for instance and then we can also go ahead and print this out and print out F and we'll print out I as well and you can see that with the print statement down here the contents of the variable is just the last value that I've assigned to it now that we've gone through datatypes let me tell you one other thing about variables and constants a variable or a constant can only store data of one type now what do I mean by that let me demonstrate so for example we have this variable I here and we've assigned to it an integer and we can reassign it different integers right but however let me try to assign it suddenly a float and it's going to say I can't assign a double to a type in in double is just another data type that stores decimal numbers just like float does except that it's less precise it can't store as many decimal places as a float data type can anyways it's saying that we can't assign value of type double which is what this is to a type of int which is what I is but where did we specify that our variable I could only store int data types we didn't specify that in fact what it did was it took the first thing that you assigned to that variable and it basically inferred the datatype from that value because we assigned 32 into the variable I and 32 is an int this variable assumed that it would only store int values and so suddenly when we try to assign it a double or a float value that's going to cause an error same thing goes for these other lines of code up here so far B equals false B now can only store boolean values right if I did B equals true that would be fine but if I suddenly did you know B equals test or something like that and I start to assign a string to it you'll see that there is another error so I just want you to make a mental note of that so let me just erase these lines of code like that another thing I want you to make aware of is that we can explicitly state that a variable can only store a certain data type and we do that when we declare the variable here and we use and then we type out the data type that tells Xcode that we want this variable I to only store integer types if I declare my variable like this and I say that I can only store integer types and I suddenly try to assign it a float it's not going to like that even though it's the first thing I'm assigning to it all right so that is just something I wanted you to know I can do this with this as well just to show you what the data type names are like that so that's all fine I'm just explicitly stating that these variables store this data type float int bool and string at the same time like you saw we can leave that out and it will just infer from the first piece of data that we assign it that that is the data type for that variable so that is your first lesson in Swift programming you learned about variables constants and how they can store values you also learn about data types specifically bool string int and float I have a swift cheat sheet for you guys that covers all of this stuff and it's going to be a handy reference to keep around as you're learning Swift I also have a worksheet for you that's going to cover using variables and performing math operations on them so I highly recommend that you download that and check it out you can get them both by following the URL that's on the screen or the URL in the description below but first if you enjoyed this video please subscribe to my channel by clicking the subscribe button below and if you don't want to miss a single video make sure you click that Bell icon as well now I want to turn it over to you it's Swift programming your first time learning coding or do you know some other programming language let me know by leaving a quick comment below so thanks for watching you guys and I'll see you in the next lesson
