With timestamps:

00:00 - hey guys what's up it's Chris here I've
00:03 - been busy freshening up some of the
00:04 - content on my site as well as finishing
00:07 - up some modules in my courses and there
00:11 - was one video that I was talking about
00:13 - Notification Center I just recorded it
00:15 - and published into my course that I
00:16 - thought would also make a great
00:18 - standalone video for the YouTube channel
00:19 - and just to give you a little bit of
00:21 - context in the app that we're building
00:24 - inside of the course that looks
00:27 - something like this where we had this
00:29 - part and we were able to write a review
00:31 - and then when you put your cursor into
00:34 - the text field or the text view the
00:37 - keyboard would slide up and cover the
00:39 - text to you so animating that whole
00:43 - chunk to go up and not get covered by
00:45 - the keyboard was something that I
00:46 - actually covered in a YouTube video here
00:50 - in this one
00:52 - iOS keyboard blocks text field so to
00:54 - give you a little bit of context in that
00:56 - video you listen for a notification that
00:59 - gets sent when the keyboard slides up or
01:02 - down and that notification contains some
01:05 - info about how far it's going to slide
01:06 - up and then you simply animate your
01:09 - constraints to slide up your view now I
01:12 - decided to expand on that and
01:14 - demonstrate for people in the course how
01:16 - to use Notification Center to not only
01:20 - receive notifications but to post
01:22 - notifications as well and I thought that
01:25 - would be a useful video for the YouTube
01:27 - channel as well I just want to warn you
01:28 - guys that in the following video I do
01:31 - mention things like the delegate and
01:33 - protocol pattern which I haven't covered
01:35 - on this channel specifically and I do
01:37 - say things like in the previous lesson
01:39 - where we did this a nut and obviously
01:41 - I'm referring to content in the course
01:44 - but I hope that that doesn't bother you
01:46 - too much from the core content or the
01:49 - core message of the video which is to
01:51 - teach you how to use Notification Center
01:53 - to send and receive notifications so
01:57 - thanks for supporting the channel and I
01:59 - will get back to posting more regular
02:02 - content soon on the channel I hope you
02:04 - enjoy this video
02:05 - [Music]
02:11 - hello in this video we are going to talk
02:14 - about Notification Center and I'll show
02:15 - you how you can use it in your own
02:17 - project
02:18 - now this demo right here isn't directly
02:21 - related to the app that we are building
02:23 - but seeing is how in the previous lesson
02:25 - we did use Notification Center to handle
02:28 - the notification that was sent from the
02:30 - keyboard sliding up or down I thought
02:32 - it'd be interesting to do this separate
02:33 - demo to show you how to you use
02:35 - Notification Center not only how to
02:38 - receive notifications like we did in the
02:41 - previous lesson but also how to send
02:42 - notifications and this will give you
02:45 - another tool in your arsenal to
02:48 - facilitate communication between objects
02:50 - rather than only using the delegate and
02:53 - protocol pattern now I do tend to like
02:56 - the delegate protocol pattern more and I
02:59 - will tell you why at the end of the
03:01 - video so first of all let's work on this
03:04 - Xcode project it's a brand new project
03:07 - it's a single view application I haven't
03:09 - done anything to it yet but in the view
03:13 - that load let's listen for a
03:14 - notification which we're going to create
03:17 - so register to listen for a notification
03:23 - and we use Notification Center dot
03:28 - remember default just like when we use
03:32 - user defaults we're going to use add
03:34 - observer here for the observer we're
03:38 - going to say self selector we're going
03:40 - to skip that for now and for this name
03:44 - now that we're not handling a specific
03:47 - notification from the keyboard we can
03:49 - make up any name that we want this is
03:51 - going to be our custom notification so
03:54 - you go ahead and type NS notification
03:57 - dot name and then it has an initializer
04:01 - method where you can pass in a string
04:03 - now I'm not sure what the difference is
04:06 - between these two the parameters look
04:08 - the same I think they basically are the
04:10 - same thing and let's call this
04:14 - notification test now you would probably
04:17 - call it something more descriptive
04:19 - and again you can listen for this
04:23 - notification from a specific object and
04:26 - only handle that case but I'm going to
04:29 - put nil and it's going to listen for the
04:31 - solicitation no matter which object
04:34 - sends it okay so down here let's create
04:37 - a function I'm going to call it no slide
04:42 - you'd probably want to relate it to the
04:44 - notification actually so you know what
04:47 - let's give it a better name here and say
04:51 - for example we've been downloading data
04:55 - from the model and then the model has
04:58 - been has has had to notify the view
05:01 - controller back so we can do something
05:04 - like data downloaded or something like
05:07 - that so this function let's call it data
05:15 - downloaded notification or maybe I
05:21 - wanted to type something like data
05:23 - downloaded notification received but as
05:27 - kind of too long for my liking you know
05:29 - what I'm just going to leave it like
05:30 - this as data downloaded descriptive
05:33 - enough and also I'm going to create a
05:36 - parameter for the notification just like
05:39 - we did in the previous lesson okay so
05:43 - now we can go back up here and use
05:44 - autocomplete on our selector so hash or
05:48 - pound selector and I'm going to start
05:51 - typing data downloaded let autocomplete
05:53 - find it and then press Enter
05:56 - so here I've registered to listen for
05:59 - the data downloaded notification and
06:02 - it's going to trigger my data downloaded
06:05 - function okay so now we need let's print
06:09 - a statement here print triggered now we
06:13 - need a way to send that notification
06:15 - right here okay so I'm going to go in
06:18 - the storyboard and I'm going to trigger
06:20 - the sending of it via this button here
06:26 - let's just Center it
06:28 - now obviously this is a trivialized
06:31 - example because you know why would you
06:34 - want to click a button and send a
06:36 - notification right ok so I mean you can
06:41 - use let's do it from here so I don't
06:45 - accidentally add a constraint after
06:48 - let's do action here let's do an attempt
06:56 - tonight ok so in order to send it we
07:06 - would also use Notification Center
07:07 - default dot post and we're going to use
07:14 - this one here where we can specify a
07:18 - name for the notification and also an
07:22 - object so here you see this user info
07:26 - dictionary and remember how when we
07:29 - received the keyboard notification it
07:31 - had a user info dictionary which
07:33 - contained a bunch of keys and a bunch of
07:37 - values that told us you know where the
07:39 - keyboard would slide up to and how fast
07:42 - it was animating well you would use this
07:44 - one if you wanted to pass some
07:45 - information like a dictionary that
07:47 - contains some info and then the receiver
07:51 - when you receive that notification you
07:53 - can get this user info dictionary out
07:55 - but I'm going to use this one which does
07:58 - not include that parameter because I
08:00 - just want simply to trigger my data
08:04 - downloaded function there so this is the
08:07 - important part for the notification name
08:09 - that I'm going to send it must you know
08:11 - it's got to be this one right here so NS
08:15 - notification dot name dot in it and as
08:20 - long as this string matches it's going
08:24 - to trigger now this object here again
08:28 - there's an object parameter and this
08:31 - allows you to target a specific object
08:34 - to send this notification to so if I if
08:38 - I put an object reference here into this
08:41 - parameter
08:42 - only going to send this notification to
08:44 - that object but if I put nil it's going
08:47 - to broadcast it so let's do that let's
08:51 - run the project now when I tap on that
08:54 - button it should fire off this
08:56 - notification called data downloaded and
08:58 - because the same object has registered
09:01 - to listen for it it's going to trigger
09:05 - this function and print out triggered in
09:08 - the console of course this demo this
09:11 - example is kind of trivial like I could
09:15 - have just made this function call right
09:17 - ideally you would use this sort of
09:19 - paradigm across across different classes
09:23 - so that you know an object can send a
09:26 - message to another object to trigger
09:27 - something to happen so tap on this
09:29 - button and you can see that it prints
09:32 - out triggered down here in the console
09:35 - now so you know doing this example you
09:39 - might think that oh this is a lot easier
09:42 - than then doing the delegate protocol
09:44 - pattern why don't I use notifications
09:47 - for everything so I'll tell you why the
09:51 - reason is because there's so much
09:53 - freedom that it could be very hard to
09:56 - debug
09:57 - so the delegate and protocol pattern is
10:00 - good for use in a one-to-one
10:04 - relationship and you have one object
10:06 - that needs to talk to another for
10:08 - example the table view right the view
10:10 - controller owns the table view so the
10:13 - table view would only ever need to talk
10:15 - to the view controller now for
10:16 - Notification Center using this it's good
10:19 - for a one-to-many sort of relationship
10:22 - so imagine that we have a multiplayer
10:26 - game or something like that and the game
10:29 - server needs to broadcast the message
10:32 - out to all of the game clients that are
10:35 - connected to the server while all of the
10:37 - clients would have registered to receive
10:41 - notifications from the server so the
10:43 - server would only have to do something
10:45 - like this and post a notification or
10:47 - broadcast it and then every single one
10:50 - of those game clients would receive that
10:51 - message and then do something whatever
10:53 - that may be
10:54 - so that's why
10:55 - it's harder to debug because you can
10:58 - send out a notification you can
10:59 - broadcast it and you don't know you know
11:03 - we're in your app which objects have
11:06 - registered to listen for it they could
11:08 - be one there could be multiple and it
11:10 - could be anywhere so you would probably
11:12 - have to just take this notification
11:15 - value and do a project wide search for
11:17 - it when you're debugging so it I mean
11:20 - it's possible to debug but it just makes
11:22 - it a little more you know it's a wider
11:25 - net that you have to cast and there's
11:27 - more things that you have to look at
11:28 - because the communication can be going
11:30 - anywhere and anybody could be listening
11:33 - for that notification whereas with the
11:36 - delegate and protocol pattern there's
11:39 - only one object subscribed as the
11:42 - delegate you know for another object and
11:44 - then it needs to conform to that
11:46 - protocol it's easy it's easy to
11:49 - troubleshoot in the bug anyways I hope
11:52 - that opens up some possibilities for you
11:54 - and like I said if you don't want to use
11:57 - delegate and protocol patterns at all
11:58 - you can use a Notification Center for
12:00 - everything just be warned that there is
12:04 - a potential for it to get really messy
12:06 - so thanks for watching in the next
12:08 - lesson we're going to resume our
12:10 - guidebook app
12:14 - [Music]

Cleaned transcript:

hey guys what's up it's Chris here I've been busy freshening up some of the content on my site as well as finishing up some modules in my courses and there was one video that I was talking about Notification Center I just recorded it and published into my course that I thought would also make a great standalone video for the YouTube channel and just to give you a little bit of context in the app that we're building inside of the course that looks something like this where we had this part and we were able to write a review and then when you put your cursor into the text field or the text view the keyboard would slide up and cover the text to you so animating that whole chunk to go up and not get covered by the keyboard was something that I actually covered in a YouTube video here in this one iOS keyboard blocks text field so to give you a little bit of context in that video you listen for a notification that gets sent when the keyboard slides up or down and that notification contains some info about how far it's going to slide up and then you simply animate your constraints to slide up your view now I decided to expand on that and demonstrate for people in the course how to use Notification Center to not only receive notifications but to post notifications as well and I thought that would be a useful video for the YouTube channel as well I just want to warn you guys that in the following video I do mention things like the delegate and protocol pattern which I haven't covered on this channel specifically and I do say things like in the previous lesson where we did this a nut and obviously I'm referring to content in the course but I hope that that doesn't bother you too much from the core content or the core message of the video which is to teach you how to use Notification Center to send and receive notifications so thanks for supporting the channel and I will get back to posting more regular content soon on the channel I hope you enjoy this video hello in this video we are going to talk about Notification Center and I'll show you how you can use it in your own project now this demo right here isn't directly related to the app that we are building but seeing is how in the previous lesson we did use Notification Center to handle the notification that was sent from the keyboard sliding up or down I thought it'd be interesting to do this separate demo to show you how to you use Notification Center not only how to receive notifications like we did in the previous lesson but also how to send notifications and this will give you another tool in your arsenal to facilitate communication between objects rather than only using the delegate and protocol pattern now I do tend to like the delegate protocol pattern more and I will tell you why at the end of the video so first of all let's work on this Xcode project it's a brand new project it's a single view application I haven't done anything to it yet but in the view that load let's listen for a notification which we're going to create so register to listen for a notification and we use Notification Center dot remember default just like when we use user defaults we're going to use add observer here for the observer we're going to say self selector we're going to skip that for now and for this name now that we're not handling a specific notification from the keyboard we can make up any name that we want this is going to be our custom notification so you go ahead and type NS notification dot name and then it has an initializer method where you can pass in a string now I'm not sure what the difference is between these two the parameters look the same I think they basically are the same thing and let's call this notification test now you would probably call it something more descriptive and again you can listen for this notification from a specific object and only handle that case but I'm going to put nil and it's going to listen for the solicitation no matter which object sends it okay so down here let's create a function I'm going to call it no slide you'd probably want to relate it to the notification actually so you know what let's give it a better name here and say for example we've been downloading data from the model and then the model has been has has had to notify the view controller back so we can do something like data downloaded or something like that so this function let's call it data downloaded notification or maybe I wanted to type something like data downloaded notification received but as kind of too long for my liking you know what I'm just going to leave it like this as data downloaded descriptive enough and also I'm going to create a parameter for the notification just like we did in the previous lesson okay so now we can go back up here and use autocomplete on our selector so hash or pound selector and I'm going to start typing data downloaded let autocomplete find it and then press Enter so here I've registered to listen for the data downloaded notification and it's going to trigger my data downloaded function okay so now we need let's print a statement here print triggered now we need a way to send that notification right here okay so I'm going to go in the storyboard and I'm going to trigger the sending of it via this button here let's just Center it now obviously this is a trivialized example because you know why would you want to click a button and send a notification right ok so I mean you can use let's do it from here so I don't accidentally add a constraint after let's do action here let's do an attempt tonight ok so in order to send it we would also use Notification Center default dot post and we're going to use this one here where we can specify a name for the notification and also an object so here you see this user info dictionary and remember how when we received the keyboard notification it had a user info dictionary which contained a bunch of keys and a bunch of values that told us you know where the keyboard would slide up to and how fast it was animating well you would use this one if you wanted to pass some information like a dictionary that contains some info and then the receiver when you receive that notification you can get this user info dictionary out but I'm going to use this one which does not include that parameter because I just want simply to trigger my data downloaded function there so this is the important part for the notification name that I'm going to send it must you know it's got to be this one right here so NS notification dot name dot in it and as long as this string matches it's going to trigger now this object here again there's an object parameter and this allows you to target a specific object to send this notification to so if I if I put an object reference here into this parameter only going to send this notification to that object but if I put nil it's going to broadcast it so let's do that let's run the project now when I tap on that button it should fire off this notification called data downloaded and because the same object has registered to listen for it it's going to trigger this function and print out triggered in the console of course this demo this example is kind of trivial like I could have just made this function call right ideally you would use this sort of paradigm across across different classes so that you know an object can send a message to another object to trigger something to happen so tap on this button and you can see that it prints out triggered down here in the console now so you know doing this example you might think that oh this is a lot easier than then doing the delegate protocol pattern why don't I use notifications for everything so I'll tell you why the reason is because there's so much freedom that it could be very hard to debug so the delegate and protocol pattern is good for use in a onetoone relationship and you have one object that needs to talk to another for example the table view right the view controller owns the table view so the table view would only ever need to talk to the view controller now for Notification Center using this it's good for a onetomany sort of relationship so imagine that we have a multiplayer game or something like that and the game server needs to broadcast the message out to all of the game clients that are connected to the server while all of the clients would have registered to receive notifications from the server so the server would only have to do something like this and post a notification or broadcast it and then every single one of those game clients would receive that message and then do something whatever that may be so that's why it's harder to debug because you can send out a notification you can broadcast it and you don't know you know we're in your app which objects have registered to listen for it they could be one there could be multiple and it could be anywhere so you would probably have to just take this notification value and do a project wide search for it when you're debugging so it I mean it's possible to debug but it just makes it a little more you know it's a wider net that you have to cast and there's more things that you have to look at because the communication can be going anywhere and anybody could be listening for that notification whereas with the delegate and protocol pattern there's only one object subscribed as the delegate you know for another object and then it needs to conform to that protocol it's easy it's easy to troubleshoot in the bug anyways I hope that opens up some possibilities for you and like I said if you don't want to use delegate and protocol patterns at all you can use a Notification Center for everything just be warned that there is a potential for it to get really messy so thanks for watching in the next lesson we're going to resume our guidebook app
