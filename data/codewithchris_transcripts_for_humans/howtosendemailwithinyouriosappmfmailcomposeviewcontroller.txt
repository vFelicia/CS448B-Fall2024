With timestamps:

00:06 - hey guys welcome in this video I'll show
00:10 - you guys how to implement functionality
00:12 - where your user can send email from
00:15 - within your app and a lot of apps use
00:17 - this functionality to send feedback or
00:20 - report bugs or something like that where
00:24 - they click a button in the app and it
00:25 - brings up their compose email dialog and
00:28 - the user can just you know you can
00:30 - pre-fill some information like the to
00:33 - field and the subject field then the
00:35 - user just types in their message and
00:37 - then hit Send
00:38 - so it's very simple to do that and I'll
00:40 - show you how we're going to start by
00:43 - creating a single view a demo Xcode
00:47 - project and we're gonna call this one
00:49 - mail demo I'm just gonna save it on the
00:53 - desktop the first thing we will want to
00:57 - do is scroll down to the frameworks and
00:59 - libraries and add a framework called
01:04 - message UI framework so just type in
01:08 - message it'll show up double click it to
01:10 - add it just verify that you've added it
01:13 - there and then we're going to go into
01:18 - our storyboard and let's add a button so
01:23 - make sure you're looking at this objects
01:25 - tab that's a common problem and this
01:31 - button is to toggle this pane if you
01:33 - don't see it at all so type in button
01:35 - we're going to drag it here I'm just
01:38 - gonna elongate that a little bit and I'm
01:42 - gonna call this button
01:47 - have hoods sendmail and keep in mind
01:53 - there are a couple of tabs here too so
01:55 - if you don't see anything make sure
01:56 - you're on the attributes inspector tab
01:59 - and that you've highlighted your button
02:01 - in order to see the properties here okay
02:05 - the next thing we're going to do is just
02:07 - open up the assistant editor make sure
02:11 - I'm looking at view controller dot M and
02:14 - I do this pretty much in all my demos
02:17 - just to illustrate some simple some
02:20 - simple concepts and how to's usually
02:23 - invoked by a button and I'm gonna hold
02:26 - down control here and a click and drag
02:28 - into an empty area and I'm just going to
02:33 - name this method send mail tapped so
02:37 - this method is going to be triggered by
02:40 - this event so the button actually has a
02:42 - whole bunch of events that you can
02:44 - choose that's the one we want and that
02:48 - represents when the user taps on the
02:49 - button and lifts his or her finger while
02:52 - still within the area of the button so
02:55 - that's what touch up inside means so
02:58 - we're gonna click connect and now we
03:00 - have this method that's going to be
03:01 - triggered when the user taps the button
03:03 - so I'm just going to flip back to single
03:08 - view here and up here actually I'm gonna
03:15 - be a little pre-emptive I'm going to go
03:18 - into view controller dot H I'm gonna
03:20 - import here message UI and you'll see
03:26 - why I'm doing it in the dot H and a sec
03:27 - because I'm going to need I'm going to
03:30 - need to access some classes in this
03:33 - framework from the dot H file but first
03:36 - we're going to view controller dot m and
03:38 - upon this send mail tapped method we are
03:44 - going to create a new MF mail compose
03:52 - viewcontroller I'll just call this male
04:00 - composer equals MF mail compose
04:05 - viewcontroller allocate it initialize it
04:11 - and here we can set some properties if
04:14 - we want to pre-fill some some of the
04:16 - fields we can go male composer set
04:21 - subject to a particular string let's say
04:25 - it's feedback let's say app feedback
04:31 - right and let's do male composer set two
04:39 - recipients and we can do an inline
04:42 - declaration of an array because it
04:44 - accepts an array of email addresses so
04:47 - we can do this and inside our array we
04:53 - can put a single email and say we can
04:56 - put test at test com all right and if
05:03 - you want it to do more you can put a
05:06 - comma and do another email that's the
05:09 - beauty of using an array for that and
05:11 - finally to display the actual compose
05:15 - window all we have to do is go self
05:19 - present this one right here present view
05:25 - controller we want to want to animate it
05:29 - so I'm just going to pass in the mail
05:32 - composer and made it yes so we can see
05:34 - it's sliding up and here it gives you an
05:38 - opportunity to provide a block of code
05:41 - that is going to be executed upon the
05:44 - completion of showing the compose dialog
05:47 - but I don't want to execute any code I'm
05:49 - just gonna put meele and let's run it
05:53 - and give it a whirl
05:56 - actually before we do that let's say
05:59 - construct male compose view controller
06:07 - object and set initial properties
06:13 - display the male composer alright so I'm
06:19 - gonna press command R to run or you can
06:21 - press this icon right here to run it so
06:25 - I'm gonna hit send mail and there we go
06:29 - so we have the subject prefilled and the
06:33 - to field prefilled just like we've
06:36 - indicated here and the user can very
06:40 - simply do that just type in their
06:45 - message and I'm gonna hit send I'm not
06:47 - sure if it actually sent because this is
06:49 - an ax simulator probably not yeah
06:56 - probably not but if this were the actual
06:59 - user's device it would actually send it
07:01 - from their default email account and we
07:04 - want to implement now what happens when
07:06 - the user clicks cancel okay let's say
07:11 - the user deletes the draft you can see
07:14 - that nothing happens right the reason
07:18 - nothing happens is because we need to
07:23 - handle the case when the mail controller
07:27 - is dismissed basically when that event
07:30 - happens and then we got a call something
07:33 - to the effect of the opposite of this
07:35 - right because we manually called present
07:38 - view controller to throw up this male
07:40 - composer dialog but we also have to
07:44 - manually remove it when it's finished so
07:47 - what we do is we go into view controller
07:50 - dot H and we say that this class
07:53 - conforms to the EM F message the MF mail
08:00 - compose view controller delegate
08:03 - okay and this protocol has a method that
08:07 - we need to implement in order to handle
08:09 - that event so I'm going to go to the dot
08:13 - M so we can implement it and it's
08:15 - basically for male composed controller
08:20 - did finish with result and basically
08:24 - this method that this delegate method is
08:27 - called when the male compose dialogue is
08:32 - finished whether that be the user clip
08:35 - to send to send it or they click cancel
08:38 - to cancel it so in here we want to
08:43 - dismiss the male control the male
08:47 - composer so all we do is say self
08:52 - dismiss view controller animated yes and
08:58 - again nothing for the completion block
09:04 - there's one last step so even though the
09:07 - view controller conforms to this
09:11 - protocol and it implements this method
09:14 - that did finish with the result we have
09:17 - to set this view controller to respond
09:22 - to this object so what we do is middle
09:28 - composer dot delegate equals self
09:35 - I'll see what okay
09:40 - actually there's that's not the property
09:44 - I need to do yes that's the one so mail
09:50 - compose delegate is the one that we want
09:54 - to set the view controller as and so the
10:01 - view controller has set itself as the
10:03 - object to be notified when this event
10:06 - happens so let's run it again pressing
10:09 - command R to run it and now we go send
10:12 - mail and if I click cancel the lead
10:16 - draft this time you can see that this
10:19 - fires and it actually removes the the
10:23 - mail compose dialog so if this whole
10:26 - delegate protocol thing is confusing to
10:30 - you we actually go through it in my
10:33 - video course so that might be something
10:36 - that you want to consider joining I use
10:39 - these YouTube videos to show how to do
10:42 - very specific things but if you want a
10:44 - step by step starting from scratch type
10:46 - of learning experience then I provide
10:48 - that in the course so consider checking
10:50 - that out so that's it for this quick
10:52 - video thank you for watching and don't
10:54 - forget to subscribe and share this video
10:57 - if it was helpful to you and I'll see
10:59 - you guys next time thanks for watching
11:00 - bye

Cleaned transcript:

hey guys welcome in this video I'll show you guys how to implement functionality where your user can send email from within your app and a lot of apps use this functionality to send feedback or report bugs or something like that where they click a button in the app and it brings up their compose email dialog and the user can just you know you can prefill some information like the to field and the subject field then the user just types in their message and then hit Send so it's very simple to do that and I'll show you how we're going to start by creating a single view a demo Xcode project and we're gonna call this one mail demo I'm just gonna save it on the desktop the first thing we will want to do is scroll down to the frameworks and libraries and add a framework called message UI framework so just type in message it'll show up double click it to add it just verify that you've added it there and then we're going to go into our storyboard and let's add a button so make sure you're looking at this objects tab that's a common problem and this button is to toggle this pane if you don't see it at all so type in button we're going to drag it here I'm just gonna elongate that a little bit and I'm gonna call this button have hoods sendmail and keep in mind there are a couple of tabs here too so if you don't see anything make sure you're on the attributes inspector tab and that you've highlighted your button in order to see the properties here okay the next thing we're going to do is just open up the assistant editor make sure I'm looking at view controller dot M and I do this pretty much in all my demos just to illustrate some simple some simple concepts and how to's usually invoked by a button and I'm gonna hold down control here and a click and drag into an empty area and I'm just going to name this method send mail tapped so this method is going to be triggered by this event so the button actually has a whole bunch of events that you can choose that's the one we want and that represents when the user taps on the button and lifts his or her finger while still within the area of the button so that's what touch up inside means so we're gonna click connect and now we have this method that's going to be triggered when the user taps the button so I'm just going to flip back to single view here and up here actually I'm gonna be a little preemptive I'm going to go into view controller dot H I'm gonna import here message UI and you'll see why I'm doing it in the dot H and a sec because I'm going to need I'm going to need to access some classes in this framework from the dot H file but first we're going to view controller dot m and upon this send mail tapped method we are going to create a new MF mail compose viewcontroller I'll just call this male composer equals MF mail compose viewcontroller allocate it initialize it and here we can set some properties if we want to prefill some some of the fields we can go male composer set subject to a particular string let's say it's feedback let's say app feedback right and let's do male composer set two recipients and we can do an inline declaration of an array because it accepts an array of email addresses so we can do this and inside our array we can put a single email and say we can put test at test com all right and if you want it to do more you can put a comma and do another email that's the beauty of using an array for that and finally to display the actual compose window all we have to do is go self present this one right here present view controller we want to want to animate it so I'm just going to pass in the mail composer and made it yes so we can see it's sliding up and here it gives you an opportunity to provide a block of code that is going to be executed upon the completion of showing the compose dialog but I don't want to execute any code I'm just gonna put meele and let's run it and give it a whirl actually before we do that let's say construct male compose view controller object and set initial properties display the male composer alright so I'm gonna press command R to run or you can press this icon right here to run it so I'm gonna hit send mail and there we go so we have the subject prefilled and the to field prefilled just like we've indicated here and the user can very simply do that just type in their message and I'm gonna hit send I'm not sure if it actually sent because this is an ax simulator probably not yeah probably not but if this were the actual user's device it would actually send it from their default email account and we want to implement now what happens when the user clicks cancel okay let's say the user deletes the draft you can see that nothing happens right the reason nothing happens is because we need to handle the case when the mail controller is dismissed basically when that event happens and then we got a call something to the effect of the opposite of this right because we manually called present view controller to throw up this male composer dialog but we also have to manually remove it when it's finished so what we do is we go into view controller dot H and we say that this class conforms to the EM F message the MF mail compose view controller delegate okay and this protocol has a method that we need to implement in order to handle that event so I'm going to go to the dot M so we can implement it and it's basically for male composed controller did finish with result and basically this method that this delegate method is called when the male compose dialogue is finished whether that be the user clip to send to send it or they click cancel to cancel it so in here we want to dismiss the male control the male composer so all we do is say self dismiss view controller animated yes and again nothing for the completion block there's one last step so even though the view controller conforms to this protocol and it implements this method that did finish with the result we have to set this view controller to respond to this object so what we do is middle composer dot delegate equals self I'll see what okay actually there's that's not the property I need to do yes that's the one so mail compose delegate is the one that we want to set the view controller as and so the view controller has set itself as the object to be notified when this event happens so let's run it again pressing command R to run it and now we go send mail and if I click cancel the lead draft this time you can see that this fires and it actually removes the the mail compose dialog so if this whole delegate protocol thing is confusing to you we actually go through it in my video course so that might be something that you want to consider joining I use these YouTube videos to show how to do very specific things but if you want a step by step starting from scratch type of learning experience then I provide that in the course so consider checking that out so that's it for this quick video thank you for watching and don't forget to subscribe and share this video if it was helpful to you and I'll see you guys next time thanks for watching bye
