With timestamps:

00:00 - hello in this video I'm going to teach
00:01 - you how to build user interfaces for
00:03 - your apps using Xcode Auto layout system
00:06 - now if you want to know how to build
00:08 - cool you eyes like these then the Auto
00:10 - layout basics I'm going to teach you in
00:12 - this lesson or absolutely critical to
00:14 - know and if you watch all the way to the
00:17 - end you're gonna have a really good idea
00:18 - of how to build your own user interface
00:20 - for your own apps does that sound good
00:22 - let's do it
00:28 - welcome to code with Kris the place to
00:30 - be if you want to learn how to make an
00:32 - app I'm Chris and this is lesson 2 of my
00:34 - beginner series if you've missed lesson
00:37 - 1 just click on that thumbnail to watch
00:38 - that first alright now let's get started
00:41 - all right so let's pretend that we have
00:44 - to build a login screen for our app
00:45 - we're first going to start by doing it
00:48 - the old way and then we're going to jump
00:50 - into Xcode and use auto layout and do it
00:52 - for real
00:52 - now our first task is to place the logo
00:55 - on the screen
00:56 - Xcode uses an XY coordinate system where
00:59 - 0 X and 0 Y is in the upper left corner
01:03 - so this point would be 0 X and 0 Y or
01:06 - just 0 0 next take a look at this red
01:09 - dot this represents a location on the
01:12 - grid at 10 10 so you kind of get the
01:14 - idea if you specify a logo to be placed
01:17 - at this point at 10 10 then it's going
01:20 - to take the upper left corner of that
01:22 - logo and put it at that point now next
01:25 - you can specify a height and a width for
01:28 - that logo and that's going to adjust the
01:30 - size of it now together with the X the Y
01:33 - the width and the height that is called
01:36 - the frame of that logo element now you
01:39 - can continue to use this approach and
01:41 - place the rest of your labels text
01:44 - fields buttons whatever you need however
01:46 - when the login screen is shown on a much
01:49 - larger screen if not going to look the
01:51 - way that we expect and this is where
01:53 - Auto layout comes in so instead of
01:55 - specifying exact XY coordinates widths
01:58 - and Heights we specify rules to describe
02:01 - the location and sizes of all of the
02:04 - elements relative to other elements and
02:07 - these rules are called constraints now
02:10 - why don't we try redesigning this law
02:12 - screen using Auto layout constraints
02:15 - instead so here's our first login button
02:18 - I'm going to add a constraint to say
02:19 - that the horizontal center of this
02:22 - button should be the same as the center
02:25 - of the view in terms of the x axis so
02:28 - that is going to Center it on the screen
02:31 - on that x axis now I'm going to add
02:35 - another constraint to say that the
02:36 - button should have the same vertical
02:37 - Center as the view and that's going to
02:40 - Center it vertically on that y-axis
02:43 - now this effectively puts the button
02:45 - right in the center of the screen next
02:48 - I'm going to add the logo and I'm going
02:51 - to add a constraint to make its
02:52 - horizontal Center the same as the
02:54 - horizontal center of the button so
02:56 - that's going to be aligned the two
02:57 - elements like this I'm going to add
03:01 - another constraint to that image and
03:03 - this time we're going to say that the
03:04 - bottom of that image should be 20 points
03:07 - above the top of the button now notice I
03:11 - said points and not pixels and that's
03:13 - because in iOS we have devices with
03:15 - different pixel densities so for example
03:18 - on the original iPhone one point is one
03:20 - pixel they're one in the same but an
03:22 - Apple introduced Retina screens where
03:24 - they managed to squeeze four pixels in
03:26 - the same amount of space that used to be
03:29 - one pixel so on these screens one point
03:32 - is equal to four pixels and then Apple
03:34 - introduced the super Retina screens and
03:36 - these are for the plus sized iPhones
03:38 - where they managed to squeeze and nine
03:41 - pixels in this space that was once one
03:43 - pixel and so one point on these screens
03:46 - equals to nine pixels so that's why when
03:49 - we're designing our user interface we
03:50 - always speak in terms of points it
03:53 - allows us to have a consistent user
03:54 - interface regardless of the pixel
03:57 - density of the screen that it's being
03:59 - presented on so when you say 20 points
04:01 - from the left side it's going to look
04:03 - consistent on the original iPhone on a
04:06 - Retina screen or a super Retina screen
04:08 - now if this is kind of confusing to you
04:11 - don't worry because you're never really
04:12 - gonna have to worry about how many
04:14 - pixels things are you're always working
04:16 - in terms of points but I think that it's
04:19 - important that at least you know about
04:21 - this distinction now another thing I
04:24 - want to point out is that if I don't
04:26 - by a specific height and width
04:28 - constraint for this logo then it's going
04:30 - to just be set at its intrinsic size
04:33 - which is just whatever size the image is
04:35 - if you wanted to you could add
04:38 - constraints for the logo to make its
04:41 - height in with relative to other
04:43 - elements or even relative to the screen
04:46 - size but I'm just going to leave it as
04:48 - is now I'm going to do something similar
04:51 - with the second button that we're going
04:52 - to add I'm going to add two constraints
04:54 - one to say that it has the same
04:55 - horizontal center as the first button
04:57 - we're just going to align the buttons
04:59 - together and then I'm going to add a
05:01 - second constraint to say that the top of
05:04 - the second button should be ten points
05:06 - below the bottom of the first button
05:09 - just so that they have a ten point gap
05:12 - now we're gonna add the last button two
05:14 - constraints again one for the horizontal
05:17 - center and the second constraint to
05:19 - position it ten points below that middle
05:22 - button since all these elements have
05:25 - constraints that are relative to that
05:26 - first button if I move that first button
05:29 - around then all of the other elements
05:31 - will follow because the auto layout
05:33 - system is going to find a way to satisfy
05:36 - all of the constraints that you have
05:38 - added now there's a much easier way to
05:41 - achieve the same thing that we have here
05:43 - without having to specify so many
05:45 - constraints and I'll show you how to do
05:46 - that in lesson 3 for now though I think
05:49 - it's important for you to understand how
05:51 - Auto layout constraints work which is
05:54 - why we are doing it this way now let me
05:56 - ask you do you feel like being a bully
05:58 - today because we're going to be really
06:00 - mean to this logo right now why don't we
06:02 - add another constraint that contradicts
06:04 - an earlier constraint we added so let's
06:07 - say that we add another constraint to
06:09 - this logo to say that the bottom of the
06:11 - logo should be ten points from the top
06:13 - of the first button now notice that this
06:15 - contradicts the earlier constraint that
06:17 - we added that said that it should be 20
06:19 - points above that first button so
06:22 - there's no way that it can satisfy both
06:25 - of these constraints that we've added
06:26 - this is called conflicting constraints
06:29 - and the system will actually choose a
06:31 - constraint to break and this can lead to
06:33 - unintended layout glitches so the tough
06:37 - part of working with Auto layout is just
06:39 - make sure that you don't have
06:40 - conflicting constraints because
06:43 - sometimes as you're adding these
06:44 - constraints in inside Xcode you might
06:48 - lose track of what you've already added
06:50 - and when you finally run your
06:52 - application you might get a bunch of
06:54 - conflicting constraints and the auto
06:56 - layout system will choose which ones to
06:57 - break and the layouts not gonna look
07:00 - like anything you intended it to
07:02 - now Xcode does give you tools to help
07:04 - you manage and resolve these conflicting
07:06 - constraints as you're soon going to see
07:07 - because the next thing we're going to do
07:09 - is we're gonna jump into Xcode right now
07:11 - and construct this login screen for real
07:13 - now there's one thing that I want to
07:15 - quickly point out and that's when you
07:17 - start your Xcode project you don't have
07:18 - to turn on Auto layout or anything like
07:20 - that to use it in fact it's just the
07:22 - standard when you start a new Xcode
07:24 - project you're gonna be able to just
07:25 - start using it right away so I've got a
07:27 - brand new Xcode project here using the
07:29 - single viewer application project
07:31 - template if you're not sure how to start
07:33 - a new Xcode project and I would say
07:35 - watch lesson 1 as we go through that in
07:37 - that lesson what we're going to do is
07:40 - jump into the main dot storyboard and
07:42 - we're going to get started we're gonna
07:44 - hit command shift + L and that's going
07:46 - to pop up the object library menu or you
07:50 - can just click on this guy up here and
07:52 - you can search for button here click it
07:55 - and drag it right there and to add a
07:58 - button on the screen and I want you to
08:01 - click on this align menu and choose
08:04 - horizontally Center in container and add
08:06 - that one constraint that's going to
08:09 - Center that button but you'll notice
08:13 - that there are some red lines above and
08:15 - below that button and also in the
08:17 - document outline here you'll see this
08:19 - red arrow and you don't see this
08:22 - document outline just click on this
08:24 - little icon here to open and close it so
08:26 - anyways I want you to click on this red
08:28 - icon and it tells you that the system
08:31 - doesn't know how to position that button
08:33 - on the vertical axis because there's no
08:36 - constraints to dictate how to position
08:39 - it so I want to do and you can see here
08:42 - the category for the error is missing
08:44 - constraints now go ahead and click back
08:46 - but just before we add that constraint
08:49 - there I want you to notice another thing
08:52 - and that is to click the button click on
08:55 - this align menu and don't be alarmed
08:57 - that this horizontally and container
09:01 - item is not checked but you might ask we
09:04 - just added that why is that not checked
09:06 - well the reason is because these menus
09:08 - down here are purely for adding new
09:10 - constraints it doesn't consider what
09:13 - constraints are already been added to
09:16 - that element in order to see what
09:18 - constraints you have added to that guy
09:20 - you can either click the button and go
09:23 - into the size inspector and you can
09:26 - scroll down a little bit under
09:28 - constraints you can see that we have
09:29 - this align center X constraint or you
09:33 - can open this part up in the document
09:36 - outline and you can see that we have
09:38 - this constraint in fact if you highlight
09:40 - that constraint right now I want you to
09:42 - go over to the attributes inspector and
09:45 - we can take a look at the anatomy of a
09:47 - constraint the main things that you need
09:50 - to notice is that an auto out constraint
09:53 - relates to one element which is the
09:56 - first item and how it is going to be
09:59 - related to the second item in which case
10:02 - here it says super view center X so what
10:06 - the super view means is it's just the
10:09 - view that contains that particular
10:11 - element in this case that is going to be
10:14 - our overall screen or our view and so
10:19 - the buttons the super view or another
10:21 - way to think of it is parent view is the
10:24 - view the screen itself and the
10:27 - properties it is relating is the center
10:30 - X all right so the button center X is
10:33 - equal to the super view center X and
10:36 - effectively that centers the button on
10:38 - this screen right here and then you can
10:41 - also play with things like the constant
10:44 - priority and multiplier and these just
10:46 - gives you a couple of different ways to
10:48 - manipulate how it is related to that
10:52 - second item in that constraint but we
10:55 - won't go through those right now so go
10:57 - ahead and highlight your button let's
10:59 - add that positioning on the vertical
11:01 - axis click on a line right here click on
11:04 - vertically and
11:06 - tainer and boom right there you learn
11:08 - all this that we have to constraints now
11:10 - for that button and if you click on this
11:12 - button and go back to the size inspector
11:14 - you're going to see that second
11:16 - constraint there so this is a handy way
11:18 - to see all of the constraints that are
11:20 - related to that element because in here
11:23 - this menu this can get quite long once
11:26 - you have many items on the screen all
11:28 - right so that's going to represent our
11:30 - first button we're gonna add a couple
11:33 - more now so go either use the shortcut
11:35 - key to open the object library or click
11:37 - on the button up there they add our
11:40 - second button click on a line
11:42 - horizontally in container and we're
11:44 - going to have this second button
11:46 - relative to this first one by 10 points
11:50 - right we're going to leave a 10-point
11:52 - gap there so click on this button and
11:54 - then click on this add new constraints
11:56 - menu and it's going to have a couple of
12:00 - margins that you can set for to be exact
12:02 - you can enable or disable any of them
12:06 - just take note that if you edit one of
12:08 - these margins that's automatically going
12:11 - to turn on that constraint and then you
12:17 - can see it says add one constraint here
12:19 - so I want you to pull down the menu and
12:23 - you can see for this button that you're
12:26 - adding the constraint to what do you
12:29 - want that second element you know the
12:32 - one that it's going to be relative to
12:33 - what do you want that second element to
12:35 - be since we want this button to be ten
12:39 - points below this first button we're
12:43 - going to make it relative to that first
12:45 - button right so that's why you got to
12:46 - pop open this menu to make sure that
12:49 - this is selected so when you select that
12:54 - it's going to change the value to what
12:56 - it currently is so currently if 33.5
12:58 - points away so just take note of that
13:02 - right for example if we did view and we
13:06 - did you know ten points away that would
13:08 - actually make this button go all the way
13:11 - up here and be ten points to the ten
13:15 - points from the top of the view right
13:17 - which is not what we want so make sure
13:19 - you
13:19 - the right element selected and click add
13:23 - one constraint and you can see there
13:26 - that constraint that we added right
13:28 - there this button is top is equal to the
13:33 - first buttons bottom and the constant is
13:36 - 10 so that's where the constant comes
13:38 - into play now if this is starting to get
13:40 - confusing because they're both named
13:41 - button what we should have done to make
13:43 - it a little more clear as we could have
13:45 - renamed things like that let's say first
13:48 - button in the second button and now you
13:50 - can see the auto layout constraints they
13:52 - change the names too so that's really
13:54 - handy to see now if you click on this
13:58 - constraint that we just added these
14:01 - second buttons top is equal to first
14:03 - buttons bottom by 10 points so that
14:06 - makes a lot more sense now let's add our
14:08 - last button right here again we're gonna
14:14 - align it first horizontally in container
14:17 - and we're going to add a new constraint
14:19 - and we are going to click enable that
14:23 - top one and we're going to make it
14:25 - relative to the second button by a
14:28 - factor of ten points again boom that
14:31 - lines it up right there let's not forget
14:33 - to name this guy our third button so
14:36 - we've got our a bunch of buttons there
14:38 - now we're gonna put a logo but the local
14:41 - is just going to be a text label in this
14:43 - case and we're also going to add a
14:47 - little little prompt a little
14:50 - instruction label above these buttons
14:52 - actually so let's do that press a pop it
14:56 - open again I like I instinctively know
14:59 - what the keys are but my hands know
15:02 - right but then if you ask me to tell you
15:04 - I have to look down at the keys first so
15:06 - command shift and L and that's actually
15:08 - one thing that now that we're on this
15:11 - topic I want to tell you about is is
15:12 - just muscle memory right so you know at
15:16 - first when you're learning this stuff
15:17 - you're going to be slow and especially
15:21 - when you start learning Swift and you're
15:22 - you're gonna start learning the syntax
15:24 - you're gonna try to memorize keywords
15:26 - and you're gonna try to memorize things
15:28 - but you don't really need to do that all
15:29 - you need to do is just
15:31 - build more apps go through more demos go
15:33 - through more tutorials and your fingers
15:35 - almost they have a mind of their own
15:36 - so your mind thinks you know I want to
15:38 - open up that object library and your
15:41 - fingers they just kind of like know what
15:43 - to do your hate they you don't have to
15:44 - think I need to press command shift and
15:46 - L initially it will be like that but as
15:49 - you do it more it's just going to be
15:51 - very instinctive so I just want to I
15:54 - just want to point that out don't get
15:56 - discouraged if it doesn't come easy in
15:58 - the beginning now I added this right
16:01 - here and you'll notice that there's a
16:03 - yellow error now it's not red like
16:05 - before red men error yellow instead
16:09 - means this this element doesn't have any
16:13 - auto layout constraints so why don't we
16:17 - position this also we're going to
16:20 - position it horizontally in container
16:22 - and we're going to specify the bottom
16:25 - margin this time and we're gonna say
16:27 - that it's gonna be relative to the first
16:30 - button by 20 points right actually I
16:35 - want to show you one cool thing and it's
16:38 - gonna save you a lot of time hopefully
16:40 - so let's say that I when I drag my label
16:44 - it was over here it was all like almost
16:46 - on top of that first button and you know
16:50 - I want to position it relative to that
16:51 - first button by 10 so I go ahead and
16:54 - enable that constraint hit 10 pull down
16:58 - this drop down but the first button
17:01 - isn't there I can't choose the first
17:03 - button in this drop-down why is that
17:05 - well the reason is because your label is
17:08 - overlapping that first button so it
17:11 - doesn't come up as a neighbor here so
17:15 - you need to make sure if you want to
17:16 - make you know an element relative to
17:19 - another element you have to make sure
17:20 - that they're not overlapping and
17:22 - sometimes they could still be
17:24 - overlapping even though they don't look
17:26 - like that
17:26 - in the view because we mentioned the
17:30 - frame earlier in this lesson if you
17:32 - check this button now you can see that
17:35 - the frame actually extends and beyond
17:39 - just the word button you can see these
17:42 - these white dots here and that's so
17:44 - that's part of the frames
17:45 - even if the frame of the label is kind
17:47 - of touching the frame of the button and
17:48 - you know it's not like the text isn't
17:51 - overlapping but at this point they could
17:54 - still be overlapping in fact yeah they
17:56 - are and so I won't be able to see that
17:59 - first button but if I just drag it out a
18:02 - little bit more I can then choose the
18:08 - first button
18:08 - so hopefully that saves you a lot of
18:10 - time because you might not realize that
18:14 - in the beginning so let's add that one
18:17 - constraint boom that's right there
18:18 - another cool thing is that lets say I
18:21 - drag this away you can see these lines
18:24 - they kind of turn orange right now and
18:26 - that's basically saying that the auto
18:28 - layout constraints for that label they
18:32 - aren't taking effect right now because
18:33 - you like dragged it away so what you're
18:35 - seeing on the view is not reflective of
18:37 - the constraints that you've added to fix
18:40 - that all you have to do is click this
18:41 - little update frames button that's going
18:45 - to just run all the auto layout
18:47 - constraint rules and that's gonna put
18:49 - everything where they're supposed to be
18:51 - according to the constraints that you
18:52 - have added all right so this this label
18:55 - we wanted this to say login or create an
19:01 - account that's kind of what I wanted to
19:05 - say at least okay we're gonna add
19:08 - another label
19:08 - I'm gonna drag it like that I'm going to
19:11 - put it in the center and we're gonna
19:15 - position this guy bottom constraint
19:19 - relative to this label right here and
19:23 - I'm gonna say something like 30 and this
19:26 - is just just me making up stuff right
19:29 - now so I'm gonna call this social squid
19:33 - and in order to put this in two lines
19:36 - what you can do is actually change the
19:40 - number of lines from one change it to
19:42 - zero and that actually means multiple
19:43 - lines now inside here in this label you
19:46 - can actually do line break if you just
19:48 - press control enter then you're gonna be
19:50 - able to put a line break and we're gonna
19:53 - Center this
19:55 - and we're just going to change the font
20:00 - now you might not have a veneer next and
20:03 - that's completely fine next let's add
20:10 - some text to these buttons so this one
20:12 - is going to be sign in with Facebook
20:18 - sign in with the rule with email now I
20:27 - want you to notice that you can add an
20:29 - image to these buttons and that is going
20:31 - to add a little icon beside the button
20:35 - or you could also add a background image
20:37 - which is what we're going to be using
20:38 - and you can set background colors and
20:40 - stuff so you can really go in depth with
20:42 - customizing your buttons but because
20:45 - this is an auto layout lesson I want to
20:47 - focus on Auto layout constraints and
20:49 - that sort of stuff and not customizing
20:51 - buttons so I've actually prepared some
20:53 - graphic assets just to get the look in
20:55 - the feel of the button that we want
20:57 - without going too deep off the depend on
21:00 - customizing buttons so what I want you
21:03 - to do is grab these images and these
21:08 - images I've made available either in the
21:11 - link in the description below or you can
21:14 - click on the upper right corner you can
21:16 - download these resources so that you can
21:18 - follow along so after you unzip the file
21:21 - and you grab these asset images just
21:22 - drag them into here and just a quick
21:24 - note if you don't understand why there
21:26 - are like three sizes of each image one X
21:30 - is the original size 2 X is 2 times as
21:32 - large and 3 X's you know 3 times bigger
21:35 - the reason is because there's different
21:37 - resolutions of the iOS screen so all the
21:40 - retina screens will use the 2 X and the
21:42 - super Retina ones would use the 3 X
21:44 - that's why there are three different
21:47 - sizes and the right size will be used
21:49 - depending on what screen the device the
21:52 - user is using so like I said these
21:55 - button graphic button graphics I added
22:00 - this rectangular background solid color
22:03 - to it you you know technically could
22:06 - have just customized that
22:08 - and in fact if it were like a production
22:11 - app I would wouldn't recommend exporting
22:13 - your graphics like that but like I said
22:16 - this is for the sake of because we want
22:19 - to focus on Auto layout sorry I'm losing
22:21 - my words here so what I want you to do
22:24 - is highlight the three buttons by
22:26 - holding shift on your keyboard and
22:27 - clicking all three and then choose
22:29 - alignment left and that it's not gonna
22:34 - do it
22:35 - oh actually no that's fine that's fine
22:38 - all right that did do it it's just that
22:40 - they didn't align left because the size
22:42 - the width of the buttons are variable
22:45 - right now so I want you to click on that
22:47 - first sign in with Facebook button and
22:49 - change the background to Facebook and
22:52 - you can see it's gonna balloon up we're
22:55 - gonna change that text color to white so
22:57 - you can actually see it and you can
23:00 - actually adjust the the text inside that
23:03 - button by going into the size inspector
23:05 - and just setting the content insight to
23:08 - something like 20 for example so let's
23:11 - do the same thing for the Google button
23:13 - but let's just change the background
23:16 - image first and then and here we'll
23:19 - change the content inset and then we
23:24 - will change the font color to black and
23:28 - so sign them with the email at the email
23:31 - image and change the text color to black
23:35 - and change the content in set to 20 and
23:40 - then we are going to add a background to
23:42 - this so search for image view and all I
23:50 - want you to do is just plop it anywhere
23:52 - it's just going to cover something and I
23:55 - want you to choose a background and then
24:00 - I want you to hit this adding
24:03 - constraints and we are going to enable
24:06 - all four constraints and we are going to
24:09 - change we're going to unconstrained to
24:12 - margins and I'll explain to you what
24:14 - that means in a second and we're going
24:15 - to change these all to zero so by
24:20 - default there are margins
24:23 - for text for example and because we want
24:26 - the image to go like edge to edge
24:28 - ignoring all the margins you know to all
24:32 - four sides of the screen we are going to
24:34 - uncheck constrain to margins another
24:37 - thing to note is that there is something
24:38 - called a safe area and because you know
24:41 - with the new iPhone tens there's like a
24:43 - notch so the safe area is just an area
24:49 - where nothing will get obscured no
24:52 - matter what device you're using so if
24:55 - you want like let's say you're laying
24:57 - out text then you definitely want to
25:00 - stay within the safe safe area so how do
25:02 - you stay within the safe area well by
25:04 - default all the constraints you add will
25:06 - be relative to being in the safe area if
25:10 - you don't want to be in the safe area so
25:13 - for this image we want it to go edge to
25:15 - edge we don't want to go under the not
25:19 - like we don't want to leave any gaps on
25:22 - the to the left and the right of the
25:24 - knotch and so we want to go all the way
25:26 - to the top of the screen we would pull
25:28 - this drop down and then we would say
25:31 - relative to the view you can and notice
25:33 - that changes the number back to 72 so
25:36 - just click all of these drop downs here
25:40 - and choose view instead of safe area so
25:44 - we want to choose view okay and change
25:46 - these all back to zero
25:48 - okay and now add four constraints and
25:50 - that is going to stretch it all to all
25:54 - four sides now if you accidentally made
25:56 - a mistake that's not a problem just go
25:58 - in to the size inspector for this
26:00 - background and here are the four
26:03 - constraints you've just added
26:05 - double-click any of them and that's
26:07 - going to highlight the constraint and
26:10 - then in here you can pull down the
26:13 - drop-down and you can say you can choose
26:19 - super view instead of safe area so
26:21 - that's how you would fix it or you can
26:23 - just delete the constraint andrey add
26:25 - them now the problem here is that our
26:28 - image view is covering everything and
26:30 - that brings me to another important
26:32 - point which is layer or
26:34 - now if you look at this document outline
26:37 - this is also called a view hierarchy and
26:41 - the reason it's a hierarchy is because
26:43 - some of these elements they allow you to
26:46 - put other elements inside of them like
26:48 - they're a container element just like
26:50 - this view is this view this what
26:54 - represents our screen here contains all
26:56 - these buttons the labels and this
26:59 - background image well you can have other
27:01 - container views and you can have like
27:03 - multiple layers so it becomes a
27:04 - hierarchy and anything that is closer to
27:08 - the bottom of the hierarchy in the same
27:11 - level is closer to the users so for
27:15 - example this background image right it's
27:19 - all the way at the bottom of this
27:21 - hierarchy at this level and that's why
27:25 - it's the closest to the user and it's
27:28 - covering everything else we want this
27:30 - background to be at the back right we
27:32 - want everything else to be on top of
27:34 - this background so all we need to do is
27:36 - click and drag this guy and reorganize
27:39 - it to the back so now you can see we've
27:42 - just pushed it as the back element you
27:45 - can ignore the safer area here actually
27:47 - actually if you click this you can see
27:48 - where the safe area is but anyways that
27:52 - background now is that back most element
27:54 - and so all these elements are above it
27:58 - now that we have our layout looking kind
28:00 - of like what we want I want to quickly
28:02 - talk about conflicting constraints so
28:04 - why don't we do that example that we did
28:06 - earlier by making this logo adding a
28:11 - second constraint so that it is relative
28:16 - to this guy but 10 points away from that
28:20 - guy you keep in mind there's already a
28:22 - constraint that says it should be 30
28:24 - points above this label I'm going to add
28:27 - a second conflicting constraint to say
28:29 - that it should be 10 points and
28:31 - instantly you can see that there's an
28:33 - error illustrating that there are two
28:36 - constraints one says 30 and one says 10
28:38 - and if you click down here you can you
28:43 - click this little error icon here you
28:45 - can see there's conflicting constraints
28:48 - so what you can do you can just delete
28:50 - while one of them right so you can't
28:53 - actually delete it from here but you can
28:56 - highlight one of them and just delete it
29:01 - that's gonna fix the problem so also
29:04 - when you run your app and if there are
29:06 - conflicting constraints it's gonna tell
29:08 - you in the debug console in this area
29:12 - down here ok so how do you check if your
29:15 - layout looks good on multiple devices
29:18 - well there is this little option here it
29:22 - says view as iPhone 8 you can actually
29:24 - click this guy open and change the
29:27 - device you're viewing it on so let's say
29:30 - 10 R you can change the orientation and
29:36 - see that it is a little squished
29:38 - although you can see everything and
29:39 - there are certain things that we can fix
29:41 - up pretty easily and some things where
29:45 - we're gonna have to add constraints to
29:48 - fix a specific device so in order to
29:52 - give you finer grained control of how
29:55 - your UI looks on different screen sizes
29:58 - and devices there is something called
30:00 - size classes and they're kind of like
30:02 - categories of devices so because Apple
30:07 - has created so many different sizes of
30:10 - iPads and iPhones while you can't
30:14 - configure them specifically for a device
30:17 - you can configure your UI specifically
30:20 - for a size class or a category of
30:23 - devices and Apple has organized all of
30:25 - their different iOS devices into
30:27 - different categories so we're not going
30:31 - to get into size classes right now
30:33 - because this lesson is already running
30:35 - kind of long but I do have a bonus video
30:37 - for you that we will go into size
30:41 - classes and I'll tell you what they're
30:42 - all about and how you can set Auto
30:44 - layout constraints for specific size
30:46 - classes but not other ones so that you
30:49 - can change the look of your UI depending
30:52 - on whether or not you have more space or
30:54 - less space so you can do that it's not
30:57 - it's not a requirement right now we
30:59 - don't really need to do that
31:01 - but if that is something that you're
31:03 - interested in right now you can go grab
31:06 - that bonus training now auto-layout is
31:09 - just one of those things that gets a lot
31:10 - easier the more you do it so I've got
31:13 - three practice exercises for you to do
31:15 - and also another bonus
31:16 - auto-layout training video that you can
31:18 - watch you can grab all of these
31:20 - resources right there in the next video
31:22 - I'm going to show you a specific UI
31:23 - element that's going to allow you to
31:25 - reduce the number of auto layout
31:27 - constraints you need to add it's going
31:29 - to speed up your design and construction
31:30 - considerably now I want to turn it over
31:33 - to you with the app that you want to
31:34 - build are you gonna focus on iPhone or
31:36 - iPad let me know right now by leaving a
31:38 - quick comment below and if you like this
31:40 - video please give it a thumbs up and
31:42 - subscribe by hitting that red button
31:43 - below and hit that Bell icon too if you
31:46 - don't want to miss the next lesson
31:47 - alright so click over to lesson 3 and
31:49 - I'll talk to you there

Cleaned transcript:

hello in this video I'm going to teach you how to build user interfaces for your apps using Xcode Auto layout system now if you want to know how to build cool you eyes like these then the Auto layout basics I'm going to teach you in this lesson or absolutely critical to know and if you watch all the way to the end you're gonna have a really good idea of how to build your own user interface for your own apps does that sound good let's do it welcome to code with Kris the place to be if you want to learn how to make an app I'm Chris and this is lesson 2 of my beginner series if you've missed lesson 1 just click on that thumbnail to watch that first alright now let's get started all right so let's pretend that we have to build a login screen for our app we're first going to start by doing it the old way and then we're going to jump into Xcode and use auto layout and do it for real now our first task is to place the logo on the screen Xcode uses an XY coordinate system where 0 X and 0 Y is in the upper left corner so this point would be 0 X and 0 Y or just 0 0 next take a look at this red dot this represents a location on the grid at 10 10 so you kind of get the idea if you specify a logo to be placed at this point at 10 10 then it's going to take the upper left corner of that logo and put it at that point now next you can specify a height and a width for that logo and that's going to adjust the size of it now together with the X the Y the width and the height that is called the frame of that logo element now you can continue to use this approach and place the rest of your labels text fields buttons whatever you need however when the login screen is shown on a much larger screen if not going to look the way that we expect and this is where Auto layout comes in so instead of specifying exact XY coordinates widths and Heights we specify rules to describe the location and sizes of all of the elements relative to other elements and these rules are called constraints now why don't we try redesigning this law screen using Auto layout constraints instead so here's our first login button I'm going to add a constraint to say that the horizontal center of this button should be the same as the center of the view in terms of the x axis so that is going to Center it on the screen on that x axis now I'm going to add another constraint to say that the button should have the same vertical Center as the view and that's going to Center it vertically on that yaxis now this effectively puts the button right in the center of the screen next I'm going to add the logo and I'm going to add a constraint to make its horizontal Center the same as the horizontal center of the button so that's going to be aligned the two elements like this I'm going to add another constraint to that image and this time we're going to say that the bottom of that image should be 20 points above the top of the button now notice I said points and not pixels and that's because in iOS we have devices with different pixel densities so for example on the original iPhone one point is one pixel they're one in the same but an Apple introduced Retina screens where they managed to squeeze four pixels in the same amount of space that used to be one pixel so on these screens one point is equal to four pixels and then Apple introduced the super Retina screens and these are for the plus sized iPhones where they managed to squeeze and nine pixels in this space that was once one pixel and so one point on these screens equals to nine pixels so that's why when we're designing our user interface we always speak in terms of points it allows us to have a consistent user interface regardless of the pixel density of the screen that it's being presented on so when you say 20 points from the left side it's going to look consistent on the original iPhone on a Retina screen or a super Retina screen now if this is kind of confusing to you don't worry because you're never really gonna have to worry about how many pixels things are you're always working in terms of points but I think that it's important that at least you know about this distinction now another thing I want to point out is that if I don't by a specific height and width constraint for this logo then it's going to just be set at its intrinsic size which is just whatever size the image is if you wanted to you could add constraints for the logo to make its height in with relative to other elements or even relative to the screen size but I'm just going to leave it as is now I'm going to do something similar with the second button that we're going to add I'm going to add two constraints one to say that it has the same horizontal center as the first button we're just going to align the buttons together and then I'm going to add a second constraint to say that the top of the second button should be ten points below the bottom of the first button just so that they have a ten point gap now we're gonna add the last button two constraints again one for the horizontal center and the second constraint to position it ten points below that middle button since all these elements have constraints that are relative to that first button if I move that first button around then all of the other elements will follow because the auto layout system is going to find a way to satisfy all of the constraints that you have added now there's a much easier way to achieve the same thing that we have here without having to specify so many constraints and I'll show you how to do that in lesson 3 for now though I think it's important for you to understand how Auto layout constraints work which is why we are doing it this way now let me ask you do you feel like being a bully today because we're going to be really mean to this logo right now why don't we add another constraint that contradicts an earlier constraint we added so let's say that we add another constraint to this logo to say that the bottom of the logo should be ten points from the top of the first button now notice that this contradicts the earlier constraint that we added that said that it should be 20 points above that first button so there's no way that it can satisfy both of these constraints that we've added this is called conflicting constraints and the system will actually choose a constraint to break and this can lead to unintended layout glitches so the tough part of working with Auto layout is just make sure that you don't have conflicting constraints because sometimes as you're adding these constraints in inside Xcode you might lose track of what you've already added and when you finally run your application you might get a bunch of conflicting constraints and the auto layout system will choose which ones to break and the layouts not gonna look like anything you intended it to now Xcode does give you tools to help you manage and resolve these conflicting constraints as you're soon going to see because the next thing we're going to do is we're gonna jump into Xcode right now and construct this login screen for real now there's one thing that I want to quickly point out and that's when you start your Xcode project you don't have to turn on Auto layout or anything like that to use it in fact it's just the standard when you start a new Xcode project you're gonna be able to just start using it right away so I've got a brand new Xcode project here using the single viewer application project template if you're not sure how to start a new Xcode project and I would say watch lesson 1 as we go through that in that lesson what we're going to do is jump into the main dot storyboard and we're going to get started we're gonna hit command shift + L and that's going to pop up the object library menu or you can just click on this guy up here and you can search for button here click it and drag it right there and to add a button on the screen and I want you to click on this align menu and choose horizontally Center in container and add that one constraint that's going to Center that button but you'll notice that there are some red lines above and below that button and also in the document outline here you'll see this red arrow and you don't see this document outline just click on this little icon here to open and close it so anyways I want you to click on this red icon and it tells you that the system doesn't know how to position that button on the vertical axis because there's no constraints to dictate how to position it so I want to do and you can see here the category for the error is missing constraints now go ahead and click back but just before we add that constraint there I want you to notice another thing and that is to click the button click on this align menu and don't be alarmed that this horizontally and container item is not checked but you might ask we just added that why is that not checked well the reason is because these menus down here are purely for adding new constraints it doesn't consider what constraints are already been added to that element in order to see what constraints you have added to that guy you can either click the button and go into the size inspector and you can scroll down a little bit under constraints you can see that we have this align center X constraint or you can open this part up in the document outline and you can see that we have this constraint in fact if you highlight that constraint right now I want you to go over to the attributes inspector and we can take a look at the anatomy of a constraint the main things that you need to notice is that an auto out constraint relates to one element which is the first item and how it is going to be related to the second item in which case here it says super view center X so what the super view means is it's just the view that contains that particular element in this case that is going to be our overall screen or our view and so the buttons the super view or another way to think of it is parent view is the view the screen itself and the properties it is relating is the center X all right so the button center X is equal to the super view center X and effectively that centers the button on this screen right here and then you can also play with things like the constant priority and multiplier and these just gives you a couple of different ways to manipulate how it is related to that second item in that constraint but we won't go through those right now so go ahead and highlight your button let's add that positioning on the vertical axis click on a line right here click on vertically and tainer and boom right there you learn all this that we have to constraints now for that button and if you click on this button and go back to the size inspector you're going to see that second constraint there so this is a handy way to see all of the constraints that are related to that element because in here this menu this can get quite long once you have many items on the screen all right so that's going to represent our first button we're gonna add a couple more now so go either use the shortcut key to open the object library or click on the button up there they add our second button click on a line horizontally in container and we're going to have this second button relative to this first one by 10 points right we're going to leave a 10point gap there so click on this button and then click on this add new constraints menu and it's going to have a couple of margins that you can set for to be exact you can enable or disable any of them just take note that if you edit one of these margins that's automatically going to turn on that constraint and then you can see it says add one constraint here so I want you to pull down the menu and you can see for this button that you're adding the constraint to what do you want that second element you know the one that it's going to be relative to what do you want that second element to be since we want this button to be ten points below this first button we're going to make it relative to that first button right so that's why you got to pop open this menu to make sure that this is selected so when you select that it's going to change the value to what it currently is so currently if 33.5 points away so just take note of that right for example if we did view and we did you know ten points away that would actually make this button go all the way up here and be ten points to the ten points from the top of the view right which is not what we want so make sure you the right element selected and click add one constraint and you can see there that constraint that we added right there this button is top is equal to the first buttons bottom and the constant is 10 so that's where the constant comes into play now if this is starting to get confusing because they're both named button what we should have done to make it a little more clear as we could have renamed things like that let's say first button in the second button and now you can see the auto layout constraints they change the names too so that's really handy to see now if you click on this constraint that we just added these second buttons top is equal to first buttons bottom by 10 points so that makes a lot more sense now let's add our last button right here again we're gonna align it first horizontally in container and we're going to add a new constraint and we are going to click enable that top one and we're going to make it relative to the second button by a factor of ten points again boom that lines it up right there let's not forget to name this guy our third button so we've got our a bunch of buttons there now we're gonna put a logo but the local is just going to be a text label in this case and we're also going to add a little little prompt a little instruction label above these buttons actually so let's do that press a pop it open again I like I instinctively know what the keys are but my hands know right but then if you ask me to tell you I have to look down at the keys first so command shift and L and that's actually one thing that now that we're on this topic I want to tell you about is is just muscle memory right so you know at first when you're learning this stuff you're going to be slow and especially when you start learning Swift and you're you're gonna start learning the syntax you're gonna try to memorize keywords and you're gonna try to memorize things but you don't really need to do that all you need to do is just build more apps go through more demos go through more tutorials and your fingers almost they have a mind of their own so your mind thinks you know I want to open up that object library and your fingers they just kind of like know what to do your hate they you don't have to think I need to press command shift and L initially it will be like that but as you do it more it's just going to be very instinctive so I just want to I just want to point that out don't get discouraged if it doesn't come easy in the beginning now I added this right here and you'll notice that there's a yellow error now it's not red like before red men error yellow instead means this this element doesn't have any auto layout constraints so why don't we position this also we're going to position it horizontally in container and we're going to specify the bottom margin this time and we're gonna say that it's gonna be relative to the first button by 20 points right actually I want to show you one cool thing and it's gonna save you a lot of time hopefully so let's say that I when I drag my label it was over here it was all like almost on top of that first button and you know I want to position it relative to that first button by 10 so I go ahead and enable that constraint hit 10 pull down this drop down but the first button isn't there I can't choose the first button in this dropdown why is that well the reason is because your label is overlapping that first button so it doesn't come up as a neighbor here so you need to make sure if you want to make you know an element relative to another element you have to make sure that they're not overlapping and sometimes they could still be overlapping even though they don't look like that in the view because we mentioned the frame earlier in this lesson if you check this button now you can see that the frame actually extends and beyond just the word button you can see these these white dots here and that's so that's part of the frames even if the frame of the label is kind of touching the frame of the button and you know it's not like the text isn't overlapping but at this point they could still be overlapping in fact yeah they are and so I won't be able to see that first button but if I just drag it out a little bit more I can then choose the first button so hopefully that saves you a lot of time because you might not realize that in the beginning so let's add that one constraint boom that's right there another cool thing is that lets say I drag this away you can see these lines they kind of turn orange right now and that's basically saying that the auto layout constraints for that label they aren't taking effect right now because you like dragged it away so what you're seeing on the view is not reflective of the constraints that you've added to fix that all you have to do is click this little update frames button that's going to just run all the auto layout constraint rules and that's gonna put everything where they're supposed to be according to the constraints that you have added all right so this this label we wanted this to say login or create an account that's kind of what I wanted to say at least okay we're gonna add another label I'm gonna drag it like that I'm going to put it in the center and we're gonna position this guy bottom constraint relative to this label right here and I'm gonna say something like 30 and this is just just me making up stuff right now so I'm gonna call this social squid and in order to put this in two lines what you can do is actually change the number of lines from one change it to zero and that actually means multiple lines now inside here in this label you can actually do line break if you just press control enter then you're gonna be able to put a line break and we're gonna Center this and we're just going to change the font now you might not have a veneer next and that's completely fine next let's add some text to these buttons so this one is going to be sign in with Facebook sign in with the rule with email now I want you to notice that you can add an image to these buttons and that is going to add a little icon beside the button or you could also add a background image which is what we're going to be using and you can set background colors and stuff so you can really go in depth with customizing your buttons but because this is an auto layout lesson I want to focus on Auto layout constraints and that sort of stuff and not customizing buttons so I've actually prepared some graphic assets just to get the look in the feel of the button that we want without going too deep off the depend on customizing buttons so what I want you to do is grab these images and these images I've made available either in the link in the description below or you can click on the upper right corner you can download these resources so that you can follow along so after you unzip the file and you grab these asset images just drag them into here and just a quick note if you don't understand why there are like three sizes of each image one X is the original size 2 X is 2 times as large and 3 X's you know 3 times bigger the reason is because there's different resolutions of the iOS screen so all the retina screens will use the 2 X and the super Retina ones would use the 3 X that's why there are three different sizes and the right size will be used depending on what screen the device the user is using so like I said these button graphic button graphics I added this rectangular background solid color to it you you know technically could have just customized that and in fact if it were like a production app I would wouldn't recommend exporting your graphics like that but like I said this is for the sake of because we want to focus on Auto layout sorry I'm losing my words here so what I want you to do is highlight the three buttons by holding shift on your keyboard and clicking all three and then choose alignment left and that it's not gonna do it oh actually no that's fine that's fine all right that did do it it's just that they didn't align left because the size the width of the buttons are variable right now so I want you to click on that first sign in with Facebook button and change the background to Facebook and you can see it's gonna balloon up we're gonna change that text color to white so you can actually see it and you can actually adjust the the text inside that button by going into the size inspector and just setting the content insight to something like 20 for example so let's do the same thing for the Google button but let's just change the background image first and then and here we'll change the content inset and then we will change the font color to black and so sign them with the email at the email image and change the text color to black and change the content in set to 20 and then we are going to add a background to this so search for image view and all I want you to do is just plop it anywhere it's just going to cover something and I want you to choose a background and then I want you to hit this adding constraints and we are going to enable all four constraints and we are going to change we're going to unconstrained to margins and I'll explain to you what that means in a second and we're going to change these all to zero so by default there are margins for text for example and because we want the image to go like edge to edge ignoring all the margins you know to all four sides of the screen we are going to uncheck constrain to margins another thing to note is that there is something called a safe area and because you know with the new iPhone tens there's like a notch so the safe area is just an area where nothing will get obscured no matter what device you're using so if you want like let's say you're laying out text then you definitely want to stay within the safe safe area so how do you stay within the safe area well by default all the constraints you add will be relative to being in the safe area if you don't want to be in the safe area so for this image we want it to go edge to edge we don't want to go under the not like we don't want to leave any gaps on the to the left and the right of the knotch and so we want to go all the way to the top of the screen we would pull this drop down and then we would say relative to the view you can and notice that changes the number back to 72 so just click all of these drop downs here and choose view instead of safe area so we want to choose view okay and change these all back to zero okay and now add four constraints and that is going to stretch it all to all four sides now if you accidentally made a mistake that's not a problem just go in to the size inspector for this background and here are the four constraints you've just added doubleclick any of them and that's going to highlight the constraint and then in here you can pull down the dropdown and you can say you can choose super view instead of safe area so that's how you would fix it or you can just delete the constraint andrey add them now the problem here is that our image view is covering everything and that brings me to another important point which is layer or now if you look at this document outline this is also called a view hierarchy and the reason it's a hierarchy is because some of these elements they allow you to put other elements inside of them like they're a container element just like this view is this view this what represents our screen here contains all these buttons the labels and this background image well you can have other container views and you can have like multiple layers so it becomes a hierarchy and anything that is closer to the bottom of the hierarchy in the same level is closer to the users so for example this background image right it's all the way at the bottom of this hierarchy at this level and that's why it's the closest to the user and it's covering everything else we want this background to be at the back right we want everything else to be on top of this background so all we need to do is click and drag this guy and reorganize it to the back so now you can see we've just pushed it as the back element you can ignore the safer area here actually actually if you click this you can see where the safe area is but anyways that background now is that back most element and so all these elements are above it now that we have our layout looking kind of like what we want I want to quickly talk about conflicting constraints so why don't we do that example that we did earlier by making this logo adding a second constraint so that it is relative to this guy but 10 points away from that guy you keep in mind there's already a constraint that says it should be 30 points above this label I'm going to add a second conflicting constraint to say that it should be 10 points and instantly you can see that there's an error illustrating that there are two constraints one says 30 and one says 10 and if you click down here you can you click this little error icon here you can see there's conflicting constraints so what you can do you can just delete while one of them right so you can't actually delete it from here but you can highlight one of them and just delete it that's gonna fix the problem so also when you run your app and if there are conflicting constraints it's gonna tell you in the debug console in this area down here ok so how do you check if your layout looks good on multiple devices well there is this little option here it says view as iPhone 8 you can actually click this guy open and change the device you're viewing it on so let's say 10 R you can change the orientation and see that it is a little squished although you can see everything and there are certain things that we can fix up pretty easily and some things where we're gonna have to add constraints to fix a specific device so in order to give you finer grained control of how your UI looks on different screen sizes and devices there is something called size classes and they're kind of like categories of devices so because Apple has created so many different sizes of iPads and iPhones while you can't configure them specifically for a device you can configure your UI specifically for a size class or a category of devices and Apple has organized all of their different iOS devices into different categories so we're not going to get into size classes right now because this lesson is already running kind of long but I do have a bonus video for you that we will go into size classes and I'll tell you what they're all about and how you can set Auto layout constraints for specific size classes but not other ones so that you can change the look of your UI depending on whether or not you have more space or less space so you can do that it's not it's not a requirement right now we don't really need to do that but if that is something that you're interested in right now you can go grab that bonus training now autolayout is just one of those things that gets a lot easier the more you do it so I've got three practice exercises for you to do and also another bonus autolayout training video that you can watch you can grab all of these resources right there in the next video I'm going to show you a specific UI element that's going to allow you to reduce the number of auto layout constraints you need to add it's going to speed up your design and construction considerably now I want to turn it over to you with the app that you want to build are you gonna focus on iPhone or iPad let me know right now by leaving a quick comment below and if you like this video please give it a thumbs up and subscribe by hitting that red button below and hit that Bell icon too if you don't want to miss the next lesson alright so click over to lesson 3 and I'll talk to you there
