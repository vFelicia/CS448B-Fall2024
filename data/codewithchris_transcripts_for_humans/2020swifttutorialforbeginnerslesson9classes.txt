With timestamps:

00:00 - hello and welcome to my Swift tutorial
00:01 - series for beginners in this lesson
00:03 - you're going to be introduced to classes
00:05 - which is a highly critical part of the
00:07 - Swift programming language
00:09 - now I'm gonna warn you it's a little bit
00:10 - of an abstract concept but I'm sure
00:13 - you'll do fine alright let's get started
00:19 - so in this playground here I have
00:22 - several pieces of information I've got
00:24 - three variables actually two of them are
00:27 - strings one of them is an int datatype
00:29 - remember back in lesson 2 of this series
00:32 - I talked to you about several common
00:34 - data types and I just mentioned in a
00:36 - brief like one second sentence that you
00:39 - can create your own data types well now
00:42 - we've arrived at that point and what
00:45 - we're going to talk about our classes
00:47 - and you can think of it as a way to
00:49 - organize your information now I know we
00:53 - talked about functions and that was a
00:54 - way to kind of group pieces of code
00:57 - together well when you think about
00:58 - classes you're moreso thinking about
01:02 - information so for example in this
01:04 - scenario I have a name I have a salary
01:07 - and I have a role well you can see where
01:09 - this is going
01:10 - all of these different variables or
01:13 - pieces of information have to do with a
01:15 - person or an employee or something like
01:17 - that so what we can do is we can group
01:20 - this information together into our own
01:23 - new data type called employee and in
01:26 - order to do that we define a new class
01:29 - called employee let's take a look at the
01:31 - syntax involved so you start with the
01:33 - class keyword followed by a space and
01:35 - then your class name in this case we
01:38 - would call it employee followed by space
01:40 - and then you have a pair of curly
01:43 - brackets inside your curly brackets is
01:45 - where you would define your class let's
01:47 - jump back to the playground and define
01:49 - our employee class so you start with the
01:52 - class keyword followed by space and then
01:55 - employee followed by space and then we
01:57 - have our set of curly brackets so in
01:59 - between those curly brackets you would
02:01 - put all of the pieces of information
02:02 - that an employee would have so why don't
02:06 - we take this information up here I'm
02:09 - gonna cut it and I'm gonna paste it
02:11 - inside of our employee class
02:13 - but one thing to keep in mind is that
02:16 - you're not defining the information for
02:18 - a single employee because remember we
02:21 - are creating a new data type here called
02:23 - employee so this is a general definition
02:26 - that you can use over and over again
02:28 - instead you're specifying what sort of
02:33 - information every employee should have
02:35 - so we don't fill out the specifics now
02:38 - we just say that an employee data type
02:41 - should have a name it should have a
02:44 - salary we could start at zero and fill
02:46 - it in later and let's say for role it
02:48 - should be a string type as well and by
02:51 - just specifying two quotes with nothing
02:52 - in between them it's just an empty
02:54 - string so just like that you've defined
02:56 - your new class which is essentially a
02:59 - new data type
02:59 - it's called employee and every single
03:01 - employee is going to have a name a
03:04 - salary and a role now here's the part
03:06 - that is going to get really tricky and
03:07 - you really have to wrap your head around
03:09 - that and that is that your class that
03:12 - you've defined right here is kind of
03:13 - like a template so now that we've
03:15 - defined this class how do we use it well
03:17 - let me show you some examples with some
03:20 - previous data types that we've worked
03:21 - with before first so let's say we have a
03:24 - equals 10 and let's say we have B equals
03:29 - Ted and that will suffice so what's
03:34 - happening here with this line
03:36 - essentially we are creating a piece of
03:39 - data 10 right it's going to be stored in
03:41 - memory and then we are creating a
03:43 - constant called a to keep track of that
03:46 - data in memory same thing happening
03:49 - right here Ted is a piece of string data
03:51 - that we are creating in memory and then
03:54 - we are creating a constant called B to
03:57 - keep track of that data in memory now
04:01 - the same concept applies here with our
04:03 - new data type we're going to create a
04:06 - new employee in memory and then we are
04:09 - going to create a variable or constant
04:11 - called C let's say to keep track of that
04:14 - employee in memory so let me show you
04:17 - how to create a new employee in memory
04:19 - well all you have to do is write the
04:21 - class name followed by two parentheses
04:24 - like that and by writing the statement
04:27 - here we are creating a new employee data
04:31 - in memory so why don't we create a new
04:34 - constant and assign it to that constant
04:37 - now this employee data that you've
04:39 - created in memory is called an object
04:41 - also known as an instance of the class
04:44 - in this case that is an instance of the
04:48 - employee class so let me show you just
04:50 - to drive home that this is your own
04:53 - custom type when you create a constant a
04:57 - that would be like that you know you're
05:00 - defining the data type of the constant
05:02 - right and this would be that now a and B
05:08 - are really simple data types
05:11 - right integer and string however C is
05:14 - your custom type right it's employee and
05:17 - inside contains this sort of data here
05:20 - and right now it's all it's set to these
05:23 - default values which you have specified
05:25 - but we can actually access that data
05:27 - inside of the employee and we can set
05:30 - and we can also get that data and the
05:33 - way we do that is using something called
05:35 - dot notation so let me show you how it
05:37 - works so down here since we've created a
05:41 - new employee object and assigned it to C
05:44 - let us change this to var actually
05:47 - because we will probably be modifying it
05:49 - so we write C which points to our
05:54 - employee object and we hit dot on our
05:57 - keyboard and that lets us access all of
06:00 - that data inside of the employee class
06:02 - so we have name
06:05 - we have role we have integer so why
06:08 - don't we set the salary to a thousand or
06:11 - first yeah let's do that and then I can
06:14 - show you print C dot salary and you can
06:20 - see that it says a thousand right there
06:22 - I can also set the other pieces of data
06:27 - like that
06:29 - [Applause]
06:34 - you know something like that now another
06:37 - cool thing about defining your own data
06:39 - type using in class like that is that in
06:42 - addition to specifying what sorts of
06:45 - pieces of data it should have you can
06:47 - also define functions in here yes you
06:50 - can write F UNC space let's say do work
06:57 - right if you forget this is how you
07:00 - define a basic function here and I'm
07:04 - just gonna print I'm doing work or
07:07 - something like that and then let's say
07:11 - because they are doing work we are going
07:14 - to increase his salary by one doing work
07:20 - gets you noticed by your boss which
07:23 - results could result in a promotion and
07:26 - you would get more salary so that's at
07:28 - least my kind of thinking right now so
07:31 - let's say that that's the case how would
07:33 - I execute this function if I just try to
07:39 - call the function do work like this it's
07:41 - not actually going to be recognized
07:44 - because this function is part of my
07:46 - employee class I would actually have to
07:50 - call this function on an object of that
07:53 - class because I've created an employee
07:56 - object right here and assigned it to see
07:58 - I can actually do C using dot notation
08:01 - now and you can see that I can access
08:03 - this function actually why don't we
08:07 - change our print statement here and
08:09 - insert the name let's say but why would
08:15 - you refer to yourself in the third
08:18 - person it's doing work how about hi my
08:24 - name is
08:29 - and I'm doing work I don't think I'd
08:33 - hire someone like this who refers to
08:36 - some themselves like that let's see what
08:38 - happens
08:40 - okay all right
08:42 - it's running all right hi my name is Tom
08:44 - and I'm doing work so that's pretty cool
08:47 - now I want to show you something else so
08:49 - I'm going to define another employee and
08:52 - create another employee object in memory
08:55 - and I'm going to set this process name
09:00 - to Sarah and let's say Sarah is a same
09:07 - manager VDOT salary equals do with that
09:12 - oh this is an integer and I am going to
09:17 - say d dot to do work now you'll notice
09:23 - that C and D are two separate employee
09:26 - objects when I'm modifying the data for
09:29 - D it doesn't affect C and vice-versa and
09:31 - when I call the do work function on D it
09:35 - has nothing to do with the do work
09:37 - function for C so that's a basic
09:40 - introduction of how to use classes so
09:42 - one last thing I want to mention is that
09:44 - when you declare a function inside of a
09:47 - class it's actually called a method of
09:49 - that class and these variables that
09:52 - you're defining inside your class are
09:54 - called properties of that class and also
09:57 - I want to point one thing out is that
09:59 - notice I can access salary from inside
10:01 - my function and that is because it's
10:05 - declared up here all right
10:06 - so properties and methods when there are
10:10 - inside classes now there's a lot more to
10:12 - classes but I just wanted to introduce
10:14 - them to you in this video I hope you can
10:17 - see why classes are a fundamental
10:19 - building block to organizing your
10:21 - information now in the next lesson we're
10:23 - going to take classes even further for
10:26 - now if you like this video please hit
10:27 - thumbs up and hit subscribe to support
10:29 - the channel
10:30 - all right let's click on over there and
10:32 - I'll see you in the next lesson

Cleaned transcript:

hello and welcome to my Swift tutorial series for beginners in this lesson you're going to be introduced to classes which is a highly critical part of the Swift programming language now I'm gonna warn you it's a little bit of an abstract concept but I'm sure you'll do fine alright let's get started so in this playground here I have several pieces of information I've got three variables actually two of them are strings one of them is an int datatype remember back in lesson 2 of this series I talked to you about several common data types and I just mentioned in a brief like one second sentence that you can create your own data types well now we've arrived at that point and what we're going to talk about our classes and you can think of it as a way to organize your information now I know we talked about functions and that was a way to kind of group pieces of code together well when you think about classes you're moreso thinking about information so for example in this scenario I have a name I have a salary and I have a role well you can see where this is going all of these different variables or pieces of information have to do with a person or an employee or something like that so what we can do is we can group this information together into our own new data type called employee and in order to do that we define a new class called employee let's take a look at the syntax involved so you start with the class keyword followed by a space and then your class name in this case we would call it employee followed by space and then you have a pair of curly brackets inside your curly brackets is where you would define your class let's jump back to the playground and define our employee class so you start with the class keyword followed by space and then employee followed by space and then we have our set of curly brackets so in between those curly brackets you would put all of the pieces of information that an employee would have so why don't we take this information up here I'm gonna cut it and I'm gonna paste it inside of our employee class but one thing to keep in mind is that you're not defining the information for a single employee because remember we are creating a new data type here called employee so this is a general definition that you can use over and over again instead you're specifying what sort of information every employee should have so we don't fill out the specifics now we just say that an employee data type should have a name it should have a salary we could start at zero and fill it in later and let's say for role it should be a string type as well and by just specifying two quotes with nothing in between them it's just an empty string so just like that you've defined your new class which is essentially a new data type it's called employee and every single employee is going to have a name a salary and a role now here's the part that is going to get really tricky and you really have to wrap your head around that and that is that your class that you've defined right here is kind of like a template so now that we've defined this class how do we use it well let me show you some examples with some previous data types that we've worked with before first so let's say we have a equals 10 and let's say we have B equals Ted and that will suffice so what's happening here with this line essentially we are creating a piece of data 10 right it's going to be stored in memory and then we are creating a constant called a to keep track of that data in memory same thing happening right here Ted is a piece of string data that we are creating in memory and then we are creating a constant called B to keep track of that data in memory now the same concept applies here with our new data type we're going to create a new employee in memory and then we are going to create a variable or constant called C let's say to keep track of that employee in memory so let me show you how to create a new employee in memory well all you have to do is write the class name followed by two parentheses like that and by writing the statement here we are creating a new employee data in memory so why don't we create a new constant and assign it to that constant now this employee data that you've created in memory is called an object also known as an instance of the class in this case that is an instance of the employee class so let me show you just to drive home that this is your own custom type when you create a constant a that would be like that you know you're defining the data type of the constant right and this would be that now a and B are really simple data types right integer and string however C is your custom type right it's employee and inside contains this sort of data here and right now it's all it's set to these default values which you have specified but we can actually access that data inside of the employee and we can set and we can also get that data and the way we do that is using something called dot notation so let me show you how it works so down here since we've created a new employee object and assigned it to C let us change this to var actually because we will probably be modifying it so we write C which points to our employee object and we hit dot on our keyboard and that lets us access all of that data inside of the employee class so we have name we have role we have integer so why don't we set the salary to a thousand or first yeah let's do that and then I can show you print C dot salary and you can see that it says a thousand right there I can also set the other pieces of data like that you know something like that now another cool thing about defining your own data type using in class like that is that in addition to specifying what sorts of pieces of data it should have you can also define functions in here yes you can write F UNC space let's say do work right if you forget this is how you define a basic function here and I'm just gonna print I'm doing work or something like that and then let's say because they are doing work we are going to increase his salary by one doing work gets you noticed by your boss which results could result in a promotion and you would get more salary so that's at least my kind of thinking right now so let's say that that's the case how would I execute this function if I just try to call the function do work like this it's not actually going to be recognized because this function is part of my employee class I would actually have to call this function on an object of that class because I've created an employee object right here and assigned it to see I can actually do C using dot notation now and you can see that I can access this function actually why don't we change our print statement here and insert the name let's say but why would you refer to yourself in the third person it's doing work how about hi my name is and I'm doing work I don't think I'd hire someone like this who refers to some themselves like that let's see what happens okay all right it's running all right hi my name is Tom and I'm doing work so that's pretty cool now I want to show you something else so I'm going to define another employee and create another employee object in memory and I'm going to set this process name to Sarah and let's say Sarah is a same manager VDOT salary equals do with that oh this is an integer and I am going to say d dot to do work now you'll notice that C and D are two separate employee objects when I'm modifying the data for D it doesn't affect C and viceversa and when I call the do work function on D it has nothing to do with the do work function for C so that's a basic introduction of how to use classes so one last thing I want to mention is that when you declare a function inside of a class it's actually called a method of that class and these variables that you're defining inside your class are called properties of that class and also I want to point one thing out is that notice I can access salary from inside my function and that is because it's declared up here all right so properties and methods when there are inside classes now there's a lot more to classes but I just wanted to introduce them to you in this video I hope you can see why classes are a fundamental building block to organizing your information now in the next lesson we're going to take classes even further for now if you like this video please hit thumbs up and hit subscribe to support the channel all right let's click on over there and I'll see you in the next lesson
