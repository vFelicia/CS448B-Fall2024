With timestamps:

00:07 - hey guys welcome to another lesson of
00:10 - code with Chris this is the Objective C
00:13 - series and in this video we're going to
00:15 - continue to talk about properties and
00:17 - I'm gonna show you what actually happens
00:19 - under the hood when you declare a
00:21 - property like we did in the previous
00:22 - video so alright let's get started
00:26 - hey guys so here I have our properties
00:30 - project that we created from the last
00:32 - video and you can download this project
00:34 - from the link in the description below
00:36 - or from the annotation on the screen in
00:40 - the last video what we did in car dot H
00:42 - was create a couple of properties and
00:44 - then in viewcontroller.m there's a
00:48 - couple of examples of how to set the
00:50 - properties and how to retrieve them well
00:52 - I want to show you what is actually
00:55 - happening under the hood so what if you
00:57 - go back to car dot H for example I
01:00 - declared a property here called name
01:02 - which is of anise string type and you
01:07 - know that's it you can use your property
01:08 - but what's happening under the hood is
01:10 - an instance variable gets created for
01:14 - you and then a getter and a setter
01:15 - method gets created for you as well so
01:18 - let me show you what that means using
01:20 - this name property as an example so I'm
01:29 - gonna declare a private interface here
01:41 - and declare our private instance
01:46 - variable name and then a method to to
01:54 - set the property so by default the the
02:01 - method that gets created for you is set
02:05 - and then the property name that you
02:07 - declared before and then a method to
02:20 - return the value when you retrieve the
02:26 - property and by default this method
02:33 - would be named the same name as your
02:36 - property so all of this code kind of
02:44 - gets created for you it kind of happens
02:47 - behind the scenes when you declare a
02:49 - property like this and as a result you
02:53 - can actually in viewcontroller.m you see
02:57 - how we use the dot notation here you can
03:00 - actually do something like this and
03:02 - instead go set name to set your property
03:08 - and you can do this even without writing
03:12 - any of the code we have here even
03:14 - without declaring the setname method
03:16 - here the reason that sometimes you might
03:20 - want to explicitly type some of this out
03:23 - is for example if there was a situation
03:26 - where I wanted to set the mileage of the
03:29 - car whenever the name gets set I could
03:31 - do that right here and say something
03:35 - like self-thought mileage equals
03:41 - 10,000 if I go back to view controller
03:45 - dot M whenever name gets set now the
03:49 - mileage would get set to 10,000
03:51 - automatically for my object because I
03:57 - have this code right here even if I
04:00 - didn't do it this way if I didn't
04:03 - explicitly use the setname method even
04:07 - by using the dot notation and I by
04:10 - assigning some value to the name
04:12 - property this setname method would get
04:15 - called so this is called the setter
04:19 - method for my name property and this is
04:27 - the getter method for my name property
04:31 - and up here this is just the private
04:36 - instance variable that tracks the value
04:41 - that my property holds and in here in
04:55 - the setname method you don't have to be
04:58 - limited to setting other properties you
05:00 - could be calling other methods you could
05:02 - have all sorts of for a practical
05:05 - example would be let's say that I wanted
05:08 - the name to always be stored in
05:10 - lowercase I could do something like
05:12 - making sure that the that the name is in
05:17 - lowercase here by converting it so I
05:19 - could do something like using this
05:23 - helper method lowercase string to take
05:27 - whatever value someone is setting to my
05:29 - name property and then taking the
05:31 - lowercase string and then assigning it
05:33 - to the property and if you choose you
05:38 - know you could always go back to just
05:40 - having the plain implementation if you
05:44 - remove all of this stuff your name
05:48 - property still works as expected
05:49 - you can assign and
05:52 - retrieve values from it so that wraps it
05:57 - up for properties at least until we get
06:00 - to interface builder but for your fun
06:03 - fact of the day did you know that in
06:06 - WWDC coming up next week well it's bad
06:12 - to mention dates and videos because who
06:14 - knows when you're gonna be watching this
06:15 - but in WWDC 2013 iOS 7 is going to be
06:20 - announced then supposedly they're gonna
06:22 - change the whole user interface from all
06:25 - this glossy gradient II type of user
06:29 - interface into a more flat and monotone
06:32 - type of interface so did you guys know
06:36 - that and what do you think of it let me
06:38 - know in the comment section below and
06:39 - I'll see you in the next video
06:56 - you

Cleaned transcript:

hey guys welcome to another lesson of code with Chris this is the Objective C series and in this video we're going to continue to talk about properties and I'm gonna show you what actually happens under the hood when you declare a property like we did in the previous video so alright let's get started hey guys so here I have our properties project that we created from the last video and you can download this project from the link in the description below or from the annotation on the screen in the last video what we did in car dot H was create a couple of properties and then in viewcontroller.m there's a couple of examples of how to set the properties and how to retrieve them well I want to show you what is actually happening under the hood so what if you go back to car dot H for example I declared a property here called name which is of anise string type and you know that's it you can use your property but what's happening under the hood is an instance variable gets created for you and then a getter and a setter method gets created for you as well so let me show you what that means using this name property as an example so I'm gonna declare a private interface here and declare our private instance variable name and then a method to to set the property so by default the the method that gets created for you is set and then the property name that you declared before and then a method to return the value when you retrieve the property and by default this method would be named the same name as your property so all of this code kind of gets created for you it kind of happens behind the scenes when you declare a property like this and as a result you can actually in viewcontroller.m you see how we use the dot notation here you can actually do something like this and instead go set name to set your property and you can do this even without writing any of the code we have here even without declaring the setname method here the reason that sometimes you might want to explicitly type some of this out is for example if there was a situation where I wanted to set the mileage of the car whenever the name gets set I could do that right here and say something like selfthought mileage equals 10,000 if I go back to view controller dot M whenever name gets set now the mileage would get set to 10,000 automatically for my object because I have this code right here even if I didn't do it this way if I didn't explicitly use the setname method even by using the dot notation and I by assigning some value to the name property this setname method would get called so this is called the setter method for my name property and this is the getter method for my name property and up here this is just the private instance variable that tracks the value that my property holds and in here in the setname method you don't have to be limited to setting other properties you could be calling other methods you could have all sorts of for a practical example would be let's say that I wanted the name to always be stored in lowercase I could do something like making sure that the that the name is in lowercase here by converting it so I could do something like using this helper method lowercase string to take whatever value someone is setting to my name property and then taking the lowercase string and then assigning it to the property and if you choose you know you could always go back to just having the plain implementation if you remove all of this stuff your name property still works as expected you can assign and retrieve values from it so that wraps it up for properties at least until we get to interface builder but for your fun fact of the day did you know that in WWDC coming up next week well it's bad to mention dates and videos because who knows when you're gonna be watching this but in WWDC 2013 iOS 7 is going to be announced then supposedly they're gonna change the whole user interface from all this glossy gradient II type of user interface into a more flat and monotone type of interface so did you guys know that and what do you think of it let me know in the comment section below and I'll see you in the next video you
