With timestamps:

00:04 - hello and welcome so you've learned a lot of 
swift in the last few lessons you started with  
00:09 - variables and constants and data types then you 
learned about functions and then you learned  
00:14 - about structures that you can group all of those 
things together to represent or model something in  
00:19 - your app now this lesson is going to be the final 
piece of the puzzle not saying you're going to be  
00:24 - a swift master or anything but by the end of this 
lesson you'll see how all of the concepts and code  
00:29 - fits together and works together inside of a 
swift ui app now just before i show you that  
00:35 - just in case you're new here hi my name 
is chris and welcome to code with chris  
00:38 - the place to be if you want to learn how to 
make an app i have a quick question for you  
00:43 - is learning swift easier or tougher than you 
thought it would be let me know by leaving a  
00:47 - quick comment below and on your way down there 
please give this video a thumbs up i super  
00:51 - appreciate it and it really helps me out so thank 
you all right with that said let's dive right in  
00:58 - all right so let's start with an empty playground 
do you remember back then when you learned about  
01:02 - functions and i taught you how to declare a 
function by using the fun keyword followed by  
01:08 - the function name let's say my function followed 
by a set of parentheses and then a set of curly  
01:13 - brackets and inside of the curly brackets we would 
have the code for the function but this is just  
01:19 - a function declaration the no code is run nothing 
happens it's not until we call the function that  
01:25 - the code inside of that function gets executed 
right so i would call the function saying my  
01:31 - function and then parentheses if i run my 
playground right now you can see that it outputs  
01:36 - hello into the console so structures are like 
that as well when we declare a structure using the  
01:43 - struct keyword followed by the structure name so 
let's say my structure followed by a set of curly  
01:51 - brackets and then we put the code inside of the 
structure let me move my function in here let's  
01:59 - declare a property up here var message equals 
hello and then let's print out my property message  
02:09 - inside of my function this is just a declaration 
of a structure it doesn't actually do anything  
02:16 - think of it like a blueprint for a building in 
order for us to use this structure we need to  
02:22 - bring it to life we need to create what's called 
an instance of the structure you can think of it  
02:28 - like turning this blueprint for a building 
into an actual building so how do we go about  
02:34 - creating an instance of this structure well that's 
easy you just write the structure name followed by  
02:41 - a pair of parentheses like that now just in 
case you're still fuzzy about the concept of  
02:46 - creating an instance of a structure let me give 
you a couple of different analogies to help you  
02:53 - try to understand this concept some people find 
it easier when i say that declaring a structure  
03:00 - or the declaration of this structure is kind of 
like a blueprint for a car or an architecture plan  
03:07 - for a house using that blueprint or using 
that architecture plan i can create cars  
03:13 - and i can create houses and those are the 
actual objects whereas the blueprint or the  
03:20 - architecture plan is more of like a template it 
simply describes how that thing is going to work  
03:26 - once you bring it to life so that's what's 
happening right here this is a declaration  
03:30 - of a structure it describes all of its properties 
and functions you know the things that it can do  
03:36 - and then it's only until we bring it to life by 
creating an instance of it that we can actually  
03:41 - use it so now that we have created an instance 
of it let's explore what we can do with it  
03:47 - now first of all we need to keep track of this 
instance because it's considered a piece of data  
03:52 - we need to keep track of it and have a way to 
reference it so let's create a variable called  
03:58 - i'm just going to call it a for simplicity's sake 
and i'm going to assign that new instance to my  
04:05 - variable a hey wait a minute if this instance 
is a piece of data then what's the data type  
04:14 - of this piece of data and what data type is this 
variable holding well the data type is the name  
04:22 - of your structure that's right so i can actually 
change my variable declaration from var a to var a  
04:31 - colon my structure yes your structure is its own 
data type so this instance that you've created  
04:39 - the data type of that is my structure now 
this little instance has superpowers because  
04:45 - we've designed it that way it can hold 
data in its message property and it can  
04:50 - output that message using the my function method 
so how can we go about accessing those things of  
04:57 - this instance well that's where dot notation comes 
in let's take a look at what dot notation is so  
05:04 - let's reference the variable a followed by a 
dot or a period and as you can see from the  
05:10 - autocomplete menu you can choose message which 
is accessing the property or you can select my  
05:18 - function which is going to execute the code 
in that method so using dot notation you can  
05:24 - access the properties and the methods of that 
instance let's try this out so first of all i  
05:31 - am going to assign something to the property of 
this instance i am going to assign let's say hi  
05:41 - and then i'm going to print out a dot message just 
to show you that i can indeed access this property  
05:51 - and i can print it out next instead of using 
this prints name in here i'm simply going to call  
05:58 - the method of that instance i'm going to call 
my function and i'm going to run this code again  
06:05 - and we still get high because the code inside of 
this method actually just prints out the property  
06:13 - now this little instance is quite 
the action hero isn't it it can do  
06:16 - all of the things that we designed it to do now 
because this structure declaration is like a  
06:22 - blueprint or an architecture plan that means that 
we can create as many instances of it as we want  
06:28 - so let's go ahead and create a second instance 
this time i'm going to declare another variable  
06:34 - var b to store another instance of my structure 
now the important thing to note is that these  
06:42 - are completely independent instances going back 
to the car blueprint analogy it's like the car  
06:48 - factory made two cars from the same blueprint 
those two cars are treated as two different  
06:53 - cars same thing here i've just created two 
instances of my structure for example if i assign  
07:03 - a dot message to be high and then i print out  
07:07 - b dot message or let me assign something else to 
b dot message and i print that out you'll see that
07:19 - for a dot my function calling that method it 
prints out hi and when i print out b dot message  
07:27 - it outputs world to the console so you can 
see that each instance keeps track of its  
07:35 - own values inside the message property now you 
know that you need to create an instance of a  
07:40 - structure in order to use it let's take a look 
at how instances of structures can work together  
07:48 - now to use an earlier example from the previous 
lesson suppose i have a chat view in my app so  
07:54 - i've declared a structure to represent this 
view it groups together all of the properties  
07:59 - the view code and the methods related to my chat 
view and suppose that i had another structure to  
08:06 - group together all the networking code or the 
database code to save the data let's declare  
08:14 - something like that here so struct let's 
call this the network or let's call it the
08:22 - database manager okay and suppose that i had 
a method in here so funk let's call this save  
08:31 - data and the input parameter for this is 
the data that we want to save so let's say  
08:38 - let's declare a single parameter called data and 
make it a string type and it returns a value it's  
08:44 - going to return a boolean value true or false 
indicating whether the save was successful or not  
08:51 - true for successful false for unsuccessful and in 
real life it wouldn't be feasible to really return  
08:59 - a result instantly like this because depending 
on network conditions and other factors you  
09:07 - don't want to wait around for the data to save so 
you don't want execution to stop but for the sake  
09:12 - of simplicity let's just say that we can return a 
result right away so when you hear this this code  
09:21 - saves the data and returns a boolean result 
so in this example i'm just going to return  
09:32 - true so i'm just going to return a hard coded 
value because i'm not going to implement this  
09:36 - method the main thing i want to show you is how 
the chat view is going to use the database manager  
09:43 - to save the message so back in the chat view 
in this send chat method for example i could  
09:50 - create an instance of the database manager 
so let's say var db equals database manager  
10:02 - followed by a set of and just like that i've 
created a new instance of that database manager  
10:07 - and now if i wanted to save my message i would 
call its save data method so db dot save data and  
10:15 - i would pass in my message property as the input 
data i'm going to go ahead and pass in message  
10:23 - but remember when i call this save data method it 
returns a boolean value for me to indicate whether  
10:30 - that save was successful or not so i can 
assign the output of that method to a constant
10:40 - i'm going to call this was success right 
so i'm going to assign that boolean output  
10:47 - into a new constant called was success or maybe 
i'll just call it successful and then down here  
10:55 - i can write some code check the 
successful boolean value if unsuccessful
11:07 - show alert to user now in future lessons you're 
going to learn how to write these statements  
11:14 - based on conditions but for now this comment will 
have to do the main takeaway for this example that  
11:21 - i'm showing you is the fact that within the 
send chat method of the chat view structure  
11:28 - it is using another structures methods by 
creating an instance of it so that's how instances  
11:36 - of structures can work together to make your app 
function and this is essentially all your app  
11:42 - is it's different instances of structures 
working together to produce the views to  
11:49 - handle the user input and to run the logic now 
i want to talk about access levels for a second  
11:56 - suppose for example in my database manager i had 
some sort of information that i was tracking as a  
12:04 - property that only the database manager needed 
it wouldn't be relevant to any other structure  
12:12 - maybe it is a server name or something like 
that so let me just write a new property in  
12:20 - my database manager called server name and i 
will assign to it a string called server one  
12:26 - now this property wouldn't be interesting 
to any other structure but as you can see  
12:31 - in the send chat method i've declared this 
instance of the database manager if i write db  
12:38 - dot using dot notation i can access that server 
name property and sometimes you might not want to  
12:45 - expose these things so what you can do is you can 
specify an access level in front of that property  
12:54 - so in front of var server name that property i 
can put the keyword private so now it becomes  
13:00 - private var server name and by doing this it 
keeps that property accessible only within  
13:08 - the scope of the database manager 
so as you can see i can still access  
13:15 - server name inside of the save data 
method right it's in the same scope but  
13:22 - in the send chat method of the chat view 
down here if i use dot notation again  
13:27 - for my instance you can see that i cannot 
access that property anymore i can't see it  
13:33 - and furthermore you can actually do the same 
thing with functions so i can put private  
13:39 - in front of the funk keyword and now you can see 
that xcode complains i cannot run this method from  
13:48 - the sendchat method of the chat view now it's a 
good practice to be aware of which properties and  
13:53 - methods need to be accessible to other instances 
and other structures and mark everything else as  
13:59 - private doing this is a proactive way to 
prevent unexpected behavior and bugs from  
14:05 - cropping up alright and now for the final piece 
of the lesson i want to relate everything that  
14:10 - you've learned so far back to a swift ui app 
inside xcode so let's go ahead and do that  
14:18 - all right so now let's go ahead and 
start a brand new ios app project  
14:23 - i'm just going to name this test project and make 
sure that interface is swift ui and lifecycle is  
14:29 - swift ui app language is swift and we're good to 
go so i'm just going to save this on the desktop  
14:36 - and we're going to first 
jump into contentview.swift  
14:41 - now i'm just going to change this to iphone 12 
and i'm going to hit resume but the important  
14:48 - part is the main thing i wanted to show you 
really is the code right take a look at this  
14:56 - struct you know that that means that content view 
is a structure there are some keywords and bits  
15:03 - of code that we're going to gloss over for now 
because we haven't learned that yet and now is  
15:09 - not the right time to go over it so i will 
gloss over a couple of things but i really  
15:13 - want to point out the concepts that you have 
learned so far and show you where they fit in  
15:18 - so this is a structured declaration let 
me just collapse this code for a second  
15:26 - there you go so you can see that this is a struct 
the content view is the structure name followed by  
15:32 - colon view and we're going to get to this in just 
a second and then you can see the curly brackets  
15:38 - containing all of the code for that structure 
all right so let's expand it again and let's  
15:44 - take a look at what else we've got okay down here 
we've got the var keyword so that's the start of a  
15:50 - property the name of this property is body okay so 
after that we've got colon and then we've got some  
15:56 - view now we're going to get to this again in just 
a second but you can see that there is a set of  
16:03 - curly brackets in here so that tells you that 
this is a computed property so let me collapse  
16:09 - the code again and you can see that indeed 
this looks like a computed property var body  
16:16 - data type and then a set of curly brackets inside 
is the code that gets computed or calculated to  
16:22 - return the value when this property is accessed so 
can you see all of these concepts that we learned  
16:29 - in the last four lessons are they coming back 
now i want to talk about this view and some view  
16:36 - so let's talk about this colon view in 
the declaration of the structure first  
16:42 - judging by how you've used the colon before you 
might think that this is the data type for the  
16:48 - structure but not quite that doesn't really make 
sense does it because remember the name of the  
16:54 - structure itself is the data type for instances 
of that structure so what is this colon view after  
17:01 - the structure name well when you're declaring 
a structure the colon after the structure name  
17:06 - indicates that this structure follows a protocol 
in this case it follows the view protocol  
17:14 - so what do you think about when you hear the word 
protocol well for me i think about it as a set of  
17:20 - rules or a set of actions for example kind of like 
the fire emergency protocol that a building might  
17:27 - have for what to do when a fire occurs or like the 
building code that a house developer has to follow  
17:35 - to build a house that is safe similarly in swift a 
protocol is a specification or a set of rules that  
17:44 - a structure has to follow this colon view part 
indicates that this content view follows the view  
17:51 - protocol in formal swift terminology content view 
conforms to the view protocol now one important  
18:00 - thing i have to mention is that writing colon 
followed by the protocol is saying and declaring  
18:07 - that you conform to the protocol but do you 
actually it's kind of like raising your hand  
18:13 - in and declaring something but do you actually 
follow the rules of that protocol and so the  
18:20 - code inside of this structure actually has to 
satisfy the specifications for that protocol  
18:26 - in this case for the view protocol to conform to 
it we have to have a body property that returns  
18:34 - some view as you can see here our content view 
structure does indeed satisfy that rule so that's  
18:41 - why it conforms to the view protocol so now that 
you understand what protocols are you can see that  
18:48 - the data type for this body property is actually 
any value that conforms to the view protocol yes  
18:55 - in this case the data type for this property isn't 
actually a data type but it's actually any data  
19:02 - type that conforms to a certain protocol in this 
case the view protocol so inside of this code for  
19:09 - this computed property it needs to return some 
instance that conforms to the view protocol let's  
19:15 - open up this code and see what we have so what do 
we have here well we have a single code statement  
19:22 - and remember what i said about computed properties 
if it's only a single code statement then you can  
19:28 - omit the return keyword but you know i'm going to 
explicitly specify it so that it's clear for you  
19:35 - so what's happening here it looks like we 
are creating an instance of a text structure  
19:42 - now one way to figure that out is if you go 
into the utilities pane or the inspector pane  
19:48 - and you go into the quick help tab right here and 
you just put your cursor over the thing you want  
19:55 - to look at so i'm going to click into this text so 
as you can see here indeed text is a structure so  
20:02 - we are creating an instance of the text structure 
however you'll notice that creating this instance  
20:10 - is different from how we did it before because 
we used a empty set of parentheses here when  
20:18 - we're creating an instance of this text structure 
we're passing in some input data so yes you can  
20:24 - actually pass in input data as a parameter into 
the creation of an instance of a structure these  
20:32 - are called initializers now we haven't talked 
about that yet and we will in upcoming lessons  
20:37 - but for now just understand that there is a way 
for you to pass in input data into the creation of  
20:44 - an instance of a structure so that's exactly 
what's happening right here now you might be  
20:49 - wondering does this text structure conform to 
the view protocol well it must right because  
20:57 - according to this body property whatever is 
returned for this computed property has to  
21:02 - conform to this so again let's dive into the quick 
help so i'm going to hover over text i'm going to  
21:08 - go down and in fact i'm going to open up the 
developer documentation now if you're using  
21:14 - i think xcode 1 12.1 there was a bug that 
crashed when you tried to open this window  
21:20 - so you just have to update 
xcode if this crashes for you  
21:23 - okay so this is the documentation for text 
you can see that it is a structure and if  
21:28 - you scroll all the way down i'm going to skip 
all this stuff because i want to just show you  
21:32 - that it conforms to two protocols actually but 
what we're interested in is it does conform to the  
21:38 - view protocol all right and another thing i want 
to point out is that this remember this from early  
21:44 - on this is a modifier and now to you it must look 
pretty familiar right because it looks like we're  
21:51 - calling a method this is dot notation right here 
we are creating an instance of the text structure  
21:58 - and then we're calling the padding method on 
that instance see if i put it on the same line  
22:04 - it might look a little more familiar for you 
right so i hope the dots are starting to connect  
22:12 - no pun intended okay so to relate this back to the 
previous structures lesson where i showed you um  
22:19 - how to declare a structure we had a couple 
of different sections right so at the top  
22:25 - here we would declare our properties and 
in fact this body property is considered  
22:31 - a property right but it also contains our view 
code so this would be where our view code goes  
22:38 - and then down here we would declare the methods 
for this structure okay so i think you understand  
22:44 - that this structure called content view represents 
the main view or the main screen of this app but  
22:51 - didn't we say that structures by themselves don't 
really do anything you need to create an instance  
22:55 - of it for it to work well where are we creating an 
instance of content view well for that we need to  
23:04 - drill back up to the entry point of the app which 
is this right here so you can see this by itself  
23:11 - is also a structure and the name of this structure 
is the name of your project and it conforms to a  
23:16 - protocol called app so let's look at the quick 
help and see what this app protocol is all about  
23:22 - create an app by declaring a structure 
that conforms to the app protocol  
23:27 - implement the required body computed property to 
define the app's content now we have another body  
23:34 - computed property i'm going to skip over some of 
this scene and window group stuff i want to point  
23:41 - out that this is where we are creating an instance 
of that content view structure so do you see how  
23:48 - everything fits together furthermore let's go back 
to content view and let me show you something else  
23:54 - so for this i'm going to open up the canvas 
again and i'm going to resume the preview  
24:01 - look at this structure down here this is what 
is powering the preview that you see here this  
24:07 - structure isn't really used as part of your app 
it's only for previewing in the canvas right here  
24:16 - so it conforms to the preview provider protocol 
and it's got a property called previews  
24:22 - static keyword ignore for now we'll explain that 
in a future lesson and down here you can see that  
24:28 - an instance of your content view structure 
is being created and that's actually what's  
24:33 - being shown here in fact i can apply modifiers 
to this instance and it's going to change what  
24:38 - we have here right so i can use dot notation 
to call modifiers which now you know are just  
24:45 - methods right of that view or of that instance 
actually instead of doing that why don't we  
24:53 - use the visual way and see how it changes the code 
so why don't i preview this a change actually i'm  
24:59 - going to change the scheme to dark mode so you can 
see it adds a modifier to that instance let's also  
25:08 - change the device to ipod touch you can see 
it adds another modifier called preview device  
25:15 - now what happens if i create another preview 
because you can click on this button right  
25:20 - here and it's going to create another preview 
down here you can see what happens to the code  
25:27 - well it created another instance of content 
view and it's got its own modifiers now this is  
25:34 - grouped together by a container a view container 
called group which we haven't really covered yet  
25:40 - but we will in the future just know that it groups 
together views so this instance of content view is  
25:46 - for this one up here and this instance is this one 
down here see i can change this scheme to light  
25:54 - and you can see it changes that here and 
i can change this device to iphone 12  
26:02 - and it changes that modifier there 
so they're independent instances
26:09 - that was a lot to take in and that's why i 
never recommend for you to memorize anything  
26:13 - the more practice you get the sooner it's going to 
become second nature to you let's do a quick recap  
26:18 - shall we you learned how to create instances 
of your structure you learn how to use dot  
26:23 - notation to access the methods and the properties 
of your instances and you also learn about access  
26:29 - levels so you can control which properties and 
which methods can be accessed with dot notation  
26:36 - finally you saw how all of these concepts relate 
back to a swift ui app in xcode now you know what  
26:43 - i'm going to say next reinforce your learnings 
with the quiz and get hands-on practice with  
26:48 - the challenge and hey if you don't feel like you 
need the challenge do it anyways just to prove me  
26:54 - wrong now in the following lessons we're going 
to go back to our war card game and take all of  
26:58 - this newfound swift knowledge and bring that war 
card game to life just a note in case this is the  
27:04 - first lesson you're watching you can access all 
of the quizzes and challenges and extra resources  
27:09 - over on our learning platform just go to 
codewithchris.com click on try for free  
27:15 - and enroll in the 14 day beginner challenge and 
you'll find all of the materials there now if  
27:20 - you're excited to see the next lesson like me 
then make sure you're subscribed to the channel  
27:24 - and make sure you turn on bell notifications so 
you don't miss it in the next lesson i'll show  
27:29 - you how to use the button element to handle 
user interaction alright i'll see you there

Cleaned transcript:

hello and welcome so you've learned a lot of swift in the last few lessons you started with variables and constants and data types then you learned about functions and then you learned about structures that you can group all of those things together to represent or model something in your app now this lesson is going to be the final piece of the puzzle not saying you're going to be a swift master or anything but by the end of this lesson you'll see how all of the concepts and code fits together and works together inside of a swift ui app now just before i show you that just in case you're new here hi my name is chris and welcome to code with chris the place to be if you want to learn how to make an app i have a quick question for you is learning swift easier or tougher than you thought it would be let me know by leaving a quick comment below and on your way down there please give this video a thumbs up i super appreciate it and it really helps me out so thank you all right with that said let's dive right in all right so let's start with an empty playground do you remember back then when you learned about functions and i taught you how to declare a function by using the fun keyword followed by the function name let's say my function followed by a set of parentheses and then a set of curly brackets and inside of the curly brackets we would have the code for the function but this is just a function declaration the no code is run nothing happens it's not until we call the function that the code inside of that function gets executed right so i would call the function saying my function and then parentheses if i run my playground right now you can see that it outputs hello into the console so structures are like that as well when we declare a structure using the struct keyword followed by the structure name so let's say my structure followed by a set of curly brackets and then we put the code inside of the structure let me move my function in here let's declare a property up here var message equals hello and then let's print out my property message inside of my function this is just a declaration of a structure it doesn't actually do anything think of it like a blueprint for a building in order for us to use this structure we need to bring it to life we need to create what's called an instance of the structure you can think of it like turning this blueprint for a building into an actual building so how do we go about creating an instance of this structure well that's easy you just write the structure name followed by a pair of parentheses like that now just in case you're still fuzzy about the concept of creating an instance of a structure let me give you a couple of different analogies to help you try to understand this concept some people find it easier when i say that declaring a structure or the declaration of this structure is kind of like a blueprint for a car or an architecture plan for a house using that blueprint or using that architecture plan i can create cars and i can create houses and those are the actual objects whereas the blueprint or the architecture plan is more of like a template it simply describes how that thing is going to work once you bring it to life so that's what's happening right here this is a declaration of a structure it describes all of its properties and functions you know the things that it can do and then it's only until we bring it to life by creating an instance of it that we can actually use it so now that we have created an instance of it let's explore what we can do with it now first of all we need to keep track of this instance because it's considered a piece of data we need to keep track of it and have a way to reference it so let's create a variable called i'm just going to call it a for simplicity's sake and i'm going to assign that new instance to my variable a hey wait a minute if this instance is a piece of data then what's the data type of this piece of data and what data type is this variable holding well the data type is the name of your structure that's right so i can actually change my variable declaration from var a to var a colon my structure yes your structure is its own data type so this instance that you've created the data type of that is my structure now this little instance has superpowers because we've designed it that way it can hold data in its message property and it can output that message using the my function method so how can we go about accessing those things of this instance well that's where dot notation comes in let's take a look at what dot notation is so let's reference the variable a followed by a dot or a period and as you can see from the autocomplete menu you can choose message which is accessing the property or you can select my function which is going to execute the code in that method so using dot notation you can access the properties and the methods of that instance let's try this out so first of all i am going to assign something to the property of this instance i am going to assign let's say hi and then i'm going to print out a dot message just to show you that i can indeed access this property and i can print it out next instead of using this prints name in here i'm simply going to call the method of that instance i'm going to call my function and i'm going to run this code again and we still get high because the code inside of this method actually just prints out the property now this little instance is quite the action hero isn't it it can do all of the things that we designed it to do now because this structure declaration is like a blueprint or an architecture plan that means that we can create as many instances of it as we want so let's go ahead and create a second instance this time i'm going to declare another variable var b to store another instance of my structure now the important thing to note is that these are completely independent instances going back to the car blueprint analogy it's like the car factory made two cars from the same blueprint those two cars are treated as two different cars same thing here i've just created two instances of my structure for example if i assign a dot message to be high and then i print out b dot message or let me assign something else to b dot message and i print that out you'll see that for a dot my function calling that method it prints out hi and when i print out b dot message it outputs world to the console so you can see that each instance keeps track of its own values inside the message property now you know that you need to create an instance of a structure in order to use it let's take a look at how instances of structures can work together now to use an earlier example from the previous lesson suppose i have a chat view in my app so i've declared a structure to represent this view it groups together all of the properties the view code and the methods related to my chat view and suppose that i had another structure to group together all the networking code or the database code to save the data let's declare something like that here so struct let's call this the network or let's call it the database manager okay and suppose that i had a method in here so funk let's call this save data and the input parameter for this is the data that we want to save so let's say let's declare a single parameter called data and make it a string type and it returns a value it's going to return a boolean value true or false indicating whether the save was successful or not true for successful false for unsuccessful and in real life it wouldn't be feasible to really return a result instantly like this because depending on network conditions and other factors you don't want to wait around for the data to save so you don't want execution to stop but for the sake of simplicity let's just say that we can return a result right away so when you hear this this code saves the data and returns a boolean result so in this example i'm just going to return true so i'm just going to return a hard coded value because i'm not going to implement this method the main thing i want to show you is how the chat view is going to use the database manager to save the message so back in the chat view in this send chat method for example i could create an instance of the database manager so let's say var db equals database manager followed by a set of and just like that i've created a new instance of that database manager and now if i wanted to save my message i would call its save data method so db dot save data and i would pass in my message property as the input data i'm going to go ahead and pass in message but remember when i call this save data method it returns a boolean value for me to indicate whether that save was successful or not so i can assign the output of that method to a constant i'm going to call this was success right so i'm going to assign that boolean output into a new constant called was success or maybe i'll just call it successful and then down here i can write some code check the successful boolean value if unsuccessful show alert to user now in future lessons you're going to learn how to write these statements based on conditions but for now this comment will have to do the main takeaway for this example that i'm showing you is the fact that within the send chat method of the chat view structure it is using another structures methods by creating an instance of it so that's how instances of structures can work together to make your app function and this is essentially all your app is it's different instances of structures working together to produce the views to handle the user input and to run the logic now i want to talk about access levels for a second suppose for example in my database manager i had some sort of information that i was tracking as a property that only the database manager needed it wouldn't be relevant to any other structure maybe it is a server name or something like that so let me just write a new property in my database manager called server name and i will assign to it a string called server one now this property wouldn't be interesting to any other structure but as you can see in the send chat method i've declared this instance of the database manager if i write db dot using dot notation i can access that server name property and sometimes you might not want to expose these things so what you can do is you can specify an access level in front of that property so in front of var server name that property i can put the keyword private so now it becomes private var server name and by doing this it keeps that property accessible only within the scope of the database manager so as you can see i can still access server name inside of the save data method right it's in the same scope but in the send chat method of the chat view down here if i use dot notation again for my instance you can see that i cannot access that property anymore i can't see it and furthermore you can actually do the same thing with functions so i can put private in front of the funk keyword and now you can see that xcode complains i cannot run this method from the sendchat method of the chat view now it's a good practice to be aware of which properties and methods need to be accessible to other instances and other structures and mark everything else as private doing this is a proactive way to prevent unexpected behavior and bugs from cropping up alright and now for the final piece of the lesson i want to relate everything that you've learned so far back to a swift ui app inside xcode so let's go ahead and do that all right so now let's go ahead and start a brand new ios app project i'm just going to name this test project and make sure that interface is swift ui and lifecycle is swift ui app language is swift and we're good to go so i'm just going to save this on the desktop and we're going to first jump into contentview.swift now i'm just going to change this to iphone 12 and i'm going to hit resume but the important part is the main thing i wanted to show you really is the code right take a look at this struct you know that that means that content view is a structure there are some keywords and bits of code that we're going to gloss over for now because we haven't learned that yet and now is not the right time to go over it so i will gloss over a couple of things but i really want to point out the concepts that you have learned so far and show you where they fit in so this is a structured declaration let me just collapse this code for a second there you go so you can see that this is a struct the content view is the structure name followed by colon view and we're going to get to this in just a second and then you can see the curly brackets containing all of the code for that structure all right so let's expand it again and let's take a look at what else we've got okay down here we've got the var keyword so that's the start of a property the name of this property is body okay so after that we've got colon and then we've got some view now we're going to get to this again in just a second but you can see that there is a set of curly brackets in here so that tells you that this is a computed property so let me collapse the code again and you can see that indeed this looks like a computed property var body data type and then a set of curly brackets inside is the code that gets computed or calculated to return the value when this property is accessed so can you see all of these concepts that we learned in the last four lessons are they coming back now i want to talk about this view and some view so let's talk about this colon view in the declaration of the structure first judging by how you've used the colon before you might think that this is the data type for the structure but not quite that doesn't really make sense does it because remember the name of the structure itself is the data type for instances of that structure so what is this colon view after the structure name well when you're declaring a structure the colon after the structure name indicates that this structure follows a protocol in this case it follows the view protocol so what do you think about when you hear the word protocol well for me i think about it as a set of rules or a set of actions for example kind of like the fire emergency protocol that a building might have for what to do when a fire occurs or like the building code that a house developer has to follow to build a house that is safe similarly in swift a protocol is a specification or a set of rules that a structure has to follow this colon view part indicates that this content view follows the view protocol in formal swift terminology content view conforms to the view protocol now one important thing i have to mention is that writing colon followed by the protocol is saying and declaring that you conform to the protocol but do you actually it's kind of like raising your hand in and declaring something but do you actually follow the rules of that protocol and so the code inside of this structure actually has to satisfy the specifications for that protocol in this case for the view protocol to conform to it we have to have a body property that returns some view as you can see here our content view structure does indeed satisfy that rule so that's why it conforms to the view protocol so now that you understand what protocols are you can see that the data type for this body property is actually any value that conforms to the view protocol yes in this case the data type for this property isn't actually a data type but it's actually any data type that conforms to a certain protocol in this case the view protocol so inside of this code for this computed property it needs to return some instance that conforms to the view protocol let's open up this code and see what we have so what do we have here well we have a single code statement and remember what i said about computed properties if it's only a single code statement then you can omit the return keyword but you know i'm going to explicitly specify it so that it's clear for you so what's happening here it looks like we are creating an instance of a text structure now one way to figure that out is if you go into the utilities pane or the inspector pane and you go into the quick help tab right here and you just put your cursor over the thing you want to look at so i'm going to click into this text so as you can see here indeed text is a structure so we are creating an instance of the text structure however you'll notice that creating this instance is different from how we did it before because we used a empty set of parentheses here when we're creating an instance of this text structure we're passing in some input data so yes you can actually pass in input data as a parameter into the creation of an instance of a structure these are called initializers now we haven't talked about that yet and we will in upcoming lessons but for now just understand that there is a way for you to pass in input data into the creation of an instance of a structure so that's exactly what's happening right here now you might be wondering does this text structure conform to the view protocol well it must right because according to this body property whatever is returned for this computed property has to conform to this so again let's dive into the quick help so i'm going to hover over text i'm going to go down and in fact i'm going to open up the developer documentation now if you're using i think xcode 1 12.1 there was a bug that crashed when you tried to open this window so you just have to update xcode if this crashes for you okay so this is the documentation for text you can see that it is a structure and if you scroll all the way down i'm going to skip all this stuff because i want to just show you that it conforms to two protocols actually but what we're interested in is it does conform to the view protocol all right and another thing i want to point out is that this remember this from early on this is a modifier and now to you it must look pretty familiar right because it looks like we're calling a method this is dot notation right here we are creating an instance of the text structure and then we're calling the padding method on that instance see if i put it on the same line it might look a little more familiar for you right so i hope the dots are starting to connect no pun intended okay so to relate this back to the previous structures lesson where i showed you um how to declare a structure we had a couple of different sections right so at the top here we would declare our properties and in fact this body property is considered a property right but it also contains our view code so this would be where our view code goes and then down here we would declare the methods for this structure okay so i think you understand that this structure called content view represents the main view or the main screen of this app but didn't we say that structures by themselves don't really do anything you need to create an instance of it for it to work well where are we creating an instance of content view well for that we need to drill back up to the entry point of the app which is this right here so you can see this by itself is also a structure and the name of this structure is the name of your project and it conforms to a protocol called app so let's look at the quick help and see what this app protocol is all about create an app by declaring a structure that conforms to the app protocol implement the required body computed property to define the app's content now we have another body computed property i'm going to skip over some of this scene and window group stuff i want to point out that this is where we are creating an instance of that content view structure so do you see how everything fits together furthermore let's go back to content view and let me show you something else so for this i'm going to open up the canvas again and i'm going to resume the preview look at this structure down here this is what is powering the preview that you see here this structure isn't really used as part of your app it's only for previewing in the canvas right here so it conforms to the preview provider protocol and it's got a property called previews static keyword ignore for now we'll explain that in a future lesson and down here you can see that an instance of your content view structure is being created and that's actually what's being shown here in fact i can apply modifiers to this instance and it's going to change what we have here right so i can use dot notation to call modifiers which now you know are just methods right of that view or of that instance actually instead of doing that why don't we use the visual way and see how it changes the code so why don't i preview this a change actually i'm going to change the scheme to dark mode so you can see it adds a modifier to that instance let's also change the device to ipod touch you can see it adds another modifier called preview device now what happens if i create another preview because you can click on this button right here and it's going to create another preview down here you can see what happens to the code well it created another instance of content view and it's got its own modifiers now this is grouped together by a container a view container called group which we haven't really covered yet but we will in the future just know that it groups together views so this instance of content view is for this one up here and this instance is this one down here see i can change this scheme to light and you can see it changes that here and i can change this device to iphone 12 and it changes that modifier there so they're independent instances that was a lot to take in and that's why i never recommend for you to memorize anything the more practice you get the sooner it's going to become second nature to you let's do a quick recap shall we you learned how to create instances of your structure you learn how to use dot notation to access the methods and the properties of your instances and you also learn about access levels so you can control which properties and which methods can be accessed with dot notation finally you saw how all of these concepts relate back to a swift ui app in xcode now you know what i'm going to say next reinforce your learnings with the quiz and get handson practice with the challenge and hey if you don't feel like you need the challenge do it anyways just to prove me wrong now in the following lessons we're going to go back to our war card game and take all of this newfound swift knowledge and bring that war card game to life just a note in case this is the first lesson you're watching you can access all of the quizzes and challenges and extra resources over on our learning platform just go to codewithchris.com click on try for free and enroll in the 14 day beginner challenge and you'll find all of the materials there now if you're excited to see the next lesson like me then make sure you're subscribed to the channel and make sure you turn on bell notifications so you don't miss it in the next lesson i'll show you how to use the button element to handle user interaction alright i'll see you there
