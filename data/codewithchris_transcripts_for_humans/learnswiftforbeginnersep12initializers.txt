With timestamps:

00:01 - hello welcome to learn Swift for
00:03 - beginners lesson 12 in this video we're
00:05 - going to talk about initializer
00:07 - functions for
00:08 - classes these guys exist to make sure
00:11 - that when you create a new object from
00:13 - your class that that object is ready to
00:16 - be used plus you can customize these
00:18 - initializer functions to set up the
00:20 - object any way you want when you create
00:22 - a new instance of the
00:24 - class let's get started and see what
00:26 - that
00:28 - means
00:31 - so what I've got here is a playground
00:33 - and I wrote down a basic class here
00:36 - called
00:37 - person and this person class has got two
00:40 - properties right now it's got a name
00:42 - property which I've initialized to an
00:45 - empty string and also it's got an age
00:48 - property which I've set to zero and that
00:51 - is an integer now you learned about
00:54 - classes in a couple of lessons back and
00:57 - you learned about how we create objects
01:00 - from classes right and in order to
01:02 - create a new person object I would say
01:04 - something like VAR uh let's just use the
01:08 - variable a equals person like that and
01:13 - we open up and close brackets um beside
01:17 - the class name like that and here I've
01:19 - got a brand new person object and if I
01:22 - go
01:23 - a.name you can see that it's an empty
01:25 - string and if I go a. AG you can see
01:28 - that it's zero
01:30 - so what's actually happening when you
01:32 - create a new person object here and you
01:34 - write these brackets don't these two
01:36 - brackets look like you're calling a
01:38 - function but actually what's happening
01:40 - is you're calling the initializer
01:42 - function of the person class but you
01:44 - might ask we don't have one defined in
01:46 - here what initializer function are you
01:48 - talking about let me write it out by
01:50 - default it exists um and if you don't
01:53 - customize it you don't really have to
01:54 - touch it but that initialization
01:57 - function looks like this it just uses
01:59 - the keyword in nit and it has these two
02:01 - brackets and then um in here in between
02:05 - this just like a function you can Define
02:07 - code in here to set up your
02:13 - object so what's happening when you
02:16 - create a new person object with this
02:19 - line of code here is you're actually
02:21 - calling this innit function of the
02:24 - person class and inside here you can
02:27 - actually write code to customize things
02:30 - so for example I can say name equals
02:33 - Chris and age
02:36 - equals I believe I'm 33 I think I've
02:39 - lost track but so what's going to happen
02:42 - here when I create a brand new person
02:45 - object is it's going to call this a nit
02:48 - function and it's going to set these two
02:50 - properties to these two values here so
02:52 - as you can see now name is Chris and age
02:56 - is 33 when I create a brand new person
02:59 - object
03:00 - now remember how I said that you can
03:02 - actually customize the anit function to
03:04 - set up the object the way you want it to
03:06 - be set up and we can do that simply by
03:09 - adding some parameters into this init
03:12 - function just like we would uh for any
03:15 - function that we set up so for example I
03:17 - can say uh I can say N is a string and a
03:24 - is an in so now I have to pass in these
03:27 - two values so let me just erase this
03:29 - part
03:30 - here and I'm going to create a new
03:33 - person object and now you can see that
03:35 - the auto complete shows me this so for
03:38 - name I pass in Chris and for the int
03:42 - I'll pass in 33 but instead of setting
03:45 - this stuff to the hardcoded values now I
03:47 - can set up to what is being passed in
03:50 - here so that's n and that's a all right
03:54 - when I'm creating a new person object
03:56 - here I'm passing in these values
04:00 - that go through this init function and
04:02 - then it sets the properties to those
04:04 - values which I pass in now remember if I
04:07 - don't want these parameter labels all I
04:08 - need to
04:09 - do is go like that and you we learned
04:13 - this through the functions lesson so you
04:15 - can review that um if you forget why
04:19 - this is these are the argument labels by
04:21 - putting underscore there we're basically
04:23 - saying we don't need the argument
04:25 - labels now while we're on this topic of
04:28 - specifying these these parameters here
04:31 - uh often times and sometimes I catch
04:33 - myself doing this too is that when we're
04:37 - passing in these parameters uh the name
04:39 - and age and you're intending to set it
04:41 - to these properties here there's a
04:44 - tendency to name these parameters
04:46 - exactly like um the property names
04:50 - because after all you named these
04:52 - property names to be uh descriptive
04:54 - right of what they represent so in the
04:57 - parameters you might be tempted also to
04:59 - name them the same thing well what
05:01 - happens is you get into this situation
05:04 - where you're trying to set this
05:06 - parameter into this property name but
05:10 - they're both named the same thing so
05:11 - it's a little bit ambiguous so that's
05:14 - where you can use this keyword called
05:16 - self and what how you would use it is
05:20 - you would say self. name equals name so
05:24 - self refers to the object that is being
05:27 - created so you're saying uh to set the
05:30 - name property of the object to this name
05:35 - parameter so that's how you distinguish
05:38 - between uh if the property name and the
05:41 - parameter name is the same so I would do
05:44 - the same thing here like that so then
05:46 - this age refers to that guy and self.
05:49 - age refers to the actual property
05:52 - there now another thing I want to point
05:54 - out is that I can no longer call person
05:59 - like that uh because there's no init
06:02 - method like that what I can do is I can
06:05 - actually have multiple initializer
06:09 - methods so if I do this let's let's say
06:12 - this is VAR B um equals this person
06:14 - object well this
06:17 - b. name is empty and b.h is zero right
06:22 - because these guys haven't been set
06:24 - after all I'm calling this initializer
06:26 - function here that doesn't set anything
06:29 - whereas this guy this initializer
06:32 - function actually sets the name and age
06:34 - to whatever we pass in now there's one
06:37 - very important thing we haven't talked
06:38 - about yet regarding init
06:40 - functions I mentioned in the intro to
06:43 - this video that the init functions are
06:46 - there to make sure that the object is
06:49 - properly initialized and all of its
06:51 - values are set uh making the object
06:54 - ready to be used so in this case right
06:57 - here for the person class uh I declared
07:00 - two properties and I've already preset
07:02 - them or initialized them to these values
07:06 - here so really the NIT function has
07:08 - nothing to do even if I did nothing as
07:11 - is in this case right here um the object
07:14 - would be ready to use because these
07:16 - properties have values in the next
07:19 - lesson I'll show you how you can
07:21 - sometimes if you need to declare these
07:23 - properties um without setting or
07:26 - initializing them to values so it would
07:29 - be something like this um you wouldn't
07:31 - write it out like this but just as an
07:33 - example you wouldn't set it to anything
07:35 - so there would be no values in here um
07:38 - in that case when you create a new
07:40 - person object the init function would be
07:43 - responsible for making sure that these
07:45 - guys do have a value because if not all
07:48 - of these properties are initialized to
07:50 - values then the object is not considered
07:52 - to be ready to be used so the init
07:54 - function is there to make sure that um
07:57 - the values are set and like I said um so
08:01 - far you haven't learned about how to
08:03 - declare these properties right here
08:05 - without setting them to values I've
08:07 - always have set them to something but in
08:09 - the next lesson you'll learn how to do
08:11 - that and then we'll dive a little deeper
08:14 - into initializer functions and talk
08:16 - about how there are two types called
08:18 - designated and convenience initializers
08:21 - and so on and so forth okay so thanks
08:23 - for watching remember to give the video
08:24 - a thumbs up and uh subscribe to the
08:27 - channel if you haven't already I'll see
08:28 - you guys in the next lesson bye for
08:33 - [Music]
08:40 - now

Cleaned transcript:

hello welcome to learn Swift for beginners lesson 12 in this video we're going to talk about initializer functions for classes these guys exist to make sure that when you create a new object from your class that that object is ready to be used plus you can customize these initializer functions to set up the object any way you want when you create a new instance of the class let's get started and see what that means so what I've got here is a playground and I wrote down a basic class here called person and this person class has got two properties right now it's got a name property which I've initialized to an empty string and also it's got an age property which I've set to zero and that is an integer now you learned about classes in a couple of lessons back and you learned about how we create objects from classes right and in order to create a new person object I would say something like VAR uh let's just use the variable a equals person like that and we open up and close brackets um beside the class name like that and here I've got a brand new person object and if I go a.name you can see that it's an empty string and if I go a. AG you can see that it's zero so what's actually happening when you create a new person object here and you write these brackets don't these two brackets look like you're calling a function but actually what's happening is you're calling the initializer function of the person class but you might ask we don't have one defined in here what initializer function are you talking about let me write it out by default it exists um and if you don't customize it you don't really have to touch it but that initialization function looks like this it just uses the keyword in nit and it has these two brackets and then um in here in between this just like a function you can Define code in here to set up your object so what's happening when you create a new person object with this line of code here is you're actually calling this innit function of the person class and inside here you can actually write code to customize things so for example I can say name equals Chris and age equals I believe I'm 33 I think I've lost track but so what's going to happen here when I create a brand new person object is it's going to call this a nit function and it's going to set these two properties to these two values here so as you can see now name is Chris and age is 33 when I create a brand new person object now remember how I said that you can actually customize the anit function to set up the object the way you want it to be set up and we can do that simply by adding some parameters into this init function just like we would uh for any function that we set up so for example I can say uh I can say N is a string and a is an in so now I have to pass in these two values so let me just erase this part here and I'm going to create a new person object and now you can see that the auto complete shows me this so for name I pass in Chris and for the int I'll pass in 33 but instead of setting this stuff to the hardcoded values now I can set up to what is being passed in here so that's n and that's a all right when I'm creating a new person object here I'm passing in these values that go through this init function and then it sets the properties to those values which I pass in now remember if I don't want these parameter labels all I need to do is go like that and you we learned this through the functions lesson so you can review that um if you forget why this is these are the argument labels by putting underscore there we're basically saying we don't need the argument labels now while we're on this topic of specifying these these parameters here uh often times and sometimes I catch myself doing this too is that when we're passing in these parameters uh the name and age and you're intending to set it to these properties here there's a tendency to name these parameters exactly like um the property names because after all you named these property names to be uh descriptive right of what they represent so in the parameters you might be tempted also to name them the same thing well what happens is you get into this situation where you're trying to set this parameter into this property name but they're both named the same thing so it's a little bit ambiguous so that's where you can use this keyword called self and what how you would use it is you would say self. name equals name so self refers to the object that is being created so you're saying uh to set the name property of the object to this name parameter so that's how you distinguish between uh if the property name and the parameter name is the same so I would do the same thing here like that so then this age refers to that guy and self. age refers to the actual property there now another thing I want to point out is that I can no longer call person like that uh because there's no init method like that what I can do is I can actually have multiple initializer methods so if I do this let's let's say this is VAR B um equals this person object well this b. name is empty and b.h is zero right because these guys haven't been set after all I'm calling this initializer function here that doesn't set anything whereas this guy this initializer function actually sets the name and age to whatever we pass in now there's one very important thing we haven't talked about yet regarding init functions I mentioned in the intro to this video that the init functions are there to make sure that the object is properly initialized and all of its values are set uh making the object ready to be used so in this case right here for the person class uh I declared two properties and I've already preset them or initialized them to these values here so really the NIT function has nothing to do even if I did nothing as is in this case right here um the object would be ready to use because these properties have values in the next lesson I'll show you how you can sometimes if you need to declare these properties um without setting or initializing them to values so it would be something like this um you wouldn't write it out like this but just as an example you wouldn't set it to anything so there would be no values in here um in that case when you create a new person object the init function would be responsible for making sure that these guys do have a value because if not all of these properties are initialized to values then the object is not considered to be ready to be used so the init function is there to make sure that um the values are set and like I said um so far you haven't learned about how to declare these properties right here without setting them to values I've always have set them to something but in the next lesson you'll learn how to do that and then we'll dive a little deeper into initializer functions and talk about how there are two types called designated and convenience initializers and so on and so forth okay so thanks for watching remember to give the video a thumbs up and uh subscribe to the channel if you haven't already I'll see you guys in the next lesson bye for now
