With timestamps:

00:00 - hello and welcome in this video we are
00:02 - nearing the end of the project in this
00:04 - lesson our goal is to add a wind
00:06 - condition and show an alert by the end
00:08 - of this lesson you'll have added a timer
00:10 - to the app and the ability to detect
00:12 - whether the user has won or lost alright
00:15 - so let's get started so the first thing
00:18 - we're going to do before we actually add
00:21 - the timer is we're going to accommodate
00:23 - a timer label in the UI so that the user
00:26 - can see the timer counting down the way
00:29 - we're going to do that is we're simply
00:32 - going to add a label above the
00:34 - collection view so we're actually going
00:36 - to go ahead and put this collection view
00:39 - into a stack view first of all so click
00:42 - this button embed in stack view that's
00:44 - going to put your collection view into a
00:47 - stack view right here and if it's not a
00:49 - vertical stack view go ahead and change
00:52 - it right now to a vertical stack view
00:54 - and the alignment should be fill as well
00:57 - which will automatically stretch the
01:00 - elements inside of the stack view so
01:01 - that they are full width and next we
01:04 - actually want to position the stack view
01:07 - so that it is hugging all of the edges
01:10 - because right now there are no
01:11 - constraints for it even though it looks
01:13 - like it's positioned correctly there are
01:15 - actually no constraints to specify that
01:17 - so go ahead and make sure that your
01:19 - stack view is selected and then come
01:21 - into this menu and let's add four
01:24 - constraints to it all zeros we're going
01:28 - to do that and next we're actually going
01:31 - to go into this object library here and
01:34 - search for label and we're going to
01:37 - click and drag that into the stack view
01:39 - above the collection view right there
01:41 - and let's give this label some text and
01:46 - call it time remaining :
01:51 - we are going to want to specify let's
01:55 - just put 10 for now and right now it's
01:58 - not actually visible the reason for that
02:02 - is because it probably doesn't have a
02:04 - height so why don't we go ahead and
02:07 - specify a height let's say 30 and while
02:11 - we're at it we're going to also specify
02:13 - a width and the reason for this actually
02:17 - let's not do the width yet let's do the
02:20 - height because we definitely need a
02:22 - height for that label otherwise it's
02:25 - just going to be zero height so we can
02:29 - go ahead and actually Center the text by
02:31 - changing the alignment here and while we
02:34 - are at it let's change the background of
02:37 - the collectionview
02:38 - to have a clear background so go ahead
02:40 - and select that scroll down here and
02:42 - under background select clear color like
02:47 - that and we should be able to see the
02:48 - background now let's go into assistant
02:51 - editor because we're going to want to
02:53 - connect this label as an outlet because
02:56 - we definitely want to change the numbers
02:58 - on this label and call it the timer
03:01 - label and connect it like that and let's
03:05 - go back to a single view editor go into
03:08 - the view controller and now let's create
03:09 - our timer let's go all the way to the
03:11 - top here where we are going to create a
03:16 - property to hold a reference to our
03:18 - timer so under here the rest of the
03:22 - properties let's create a property
03:24 - called timer and it's going to hold a
03:26 - timer object and it's going to be
03:29 - optional for now the reason for that is
03:31 - because we want to do it in the
03:34 - viewdidload we want to create the actual
03:35 - timer object there so the way the timer
03:39 - works is that you specify an interval
03:42 - for the timer to last and when it
03:44 - reaches 0 it's going to fire a method of
03:46 - your choice and then you can have that
03:48 - timer repeat so we are actually going to
03:52 - create that method first down here let's
03:54 - create a new section called timer
03:57 - methods and let's call this maybe timer
04:01 - elapsed
04:03 - and in here we're going to run some code
04:06 - whenever the timer is has fired and I
04:10 - wanted to create that method first
04:12 - because when we create the timer object
04:14 - we can specify the method to fire and I
04:18 - want to have that ready so in the
04:20 - viewdidload here let's create our timer
04:22 - object create timer and we are going to
04:28 - use a special type method of the timer
04:32 - class and that is to schedule a timer
04:36 - and there are a couple of different ones
04:39 - so you want to make sure that you use
04:40 - the right one there's this one here
04:43 - where you can specify a time interval a
04:45 - target a selector user info and repeats
04:48 - that's the one we want to use so go
04:50 - ahead and select that calling this
04:54 - initialization method is going to return
04:56 - a timer object to us set to all of these
05:00 - parameters that we specify here so the
05:03 - timer interval is actually expressed in
05:06 - seconds but I want the timer to be
05:08 - counting in milliseconds so that it
05:11 - invokes a sense of urgency from the
05:13 - player and so I am actually going to
05:16 - specify that the interval should be a
05:18 - millisecond because there are a thousand
05:21 - milliseconds in one second so I just
05:24 - divide one by a thousand and this is
05:26 - what you get so target and selector
05:29 - these two will allow you to specify a
05:32 - certain method of a certain object so
05:35 - since the timer elapsed method is inside
05:39 - the view controller where we are writing
05:41 - this code dart target would be self and
05:44 - the selector we have to use our special
05:46 - selector syntax and that's the hash tag
05:49 - selector and you can specify you can see
05:53 - here that it recognizes what it is and
05:55 - we can specify timer elapsed that this
06:01 - is going to actually create an error for
06:03 - us if we take a look it says that it's
06:06 - referring to a method timer elapsed that
06:08 - is not exposed to objective-c add this
06:11 - tag to expose it
06:13 - to objective-c so we're going to just
06:15 - hit fix and it's going to add that to
06:18 - our timer lapse this is something that
06:20 - we need to do in Swift for now if you're
06:22 - using an older version of Swift you
06:25 - probably won't run into that issue user
06:28 - info is where we can specify some
06:30 - options it's gotta be nil for us right
06:32 - now and we are going to specify that
06:34 - this timer should repeat when it is up
06:37 - so it's essentially going to fire every
06:39 - single millisecond and it's going to
06:42 - call this timer elapsed method every
06:44 - millisecond now we come to the point
06:48 - where we need to think about how much
06:50 - time do we want to give the user to
06:52 - complete this puzzle and up here let's
06:56 - express that as a property let's call
06:58 - this milliseconds this was going to be a
07:04 - that's not actually going to be a float
07:07 - well yeah we can specify as a float
07:11 - because later on we're going to need to
07:13 - divide that and express that in terms of
07:17 - seconds and if if this if we didn't
07:21 - specify type and we just specified
07:22 - something like 10 seconds which would be
07:26 - 10,000 milliseconds this is going to be
07:28 - integer if we try to divide this it's
07:31 - going to give us a whole number but we
07:33 - do want decimals so I'm going to specify
07:35 - that the type of this is actually going
07:37 - to be a float and milliseconds so that
07:40 - it's a little easier for us to think
07:43 - about and to read I'm going to do 10
07:45 - times a thousand and that's essentially
07:47 - 10 seconds this would be 10 seconds okay
07:54 - so now let's work on our timer elapsed
07:57 - method so each time that this method
08:00 - fires I want to deduct a millisecond
08:03 - from our counter up here so I'm just
08:06 - going to do milliseconds - equals 1 and
08:12 - that is going to decrement it by 1 and
08:15 - then I also want to express this in
08:17 - seconds convert to seconds and like I
08:22 - mentioned we just simply divide by a
08:25 - thousand
08:26 - to get the number of seconds but we do
08:29 - want to limit that decimal to two
08:31 - decimal places because any more than
08:32 - that would be confusing to the user to
08:35 - see that many decimal places so we can
08:38 - actually format it as a string with two
08:40 - decimal places if we take a look at some
08:45 - string initializers there's actually one
08:47 - called format down here where you can
08:50 - specify a format that has two decimal
08:53 - places and then the arguments is the
08:56 - data which you want to fit into that
08:58 - format so let's choose that so the
09:01 - argument is going to be milliseconds
09:04 - divided by a thousand and the format is
09:08 - going to be specified like this so
09:13 - percentage is a wild card
09:15 - where this data is going to be
09:16 - substituted into and to specify two
09:20 - decimal places you just go like this dot
09:22 - 2f and that is going to give you a
09:25 - string that is formatted to two decimal
09:28 - places I'm going to assign this into a
09:32 - constant called seconds and we are going
09:35 - to set our label to a timer label not
09:43 - text is equal to time remaining and we
09:51 - are going to substitute in seconds like
09:53 - that okay so now let's just run our
09:58 - project let me choose the iPhone 10
10:00 - simulator we're gonna run our project
10:02 - and make sure that our timer is running
10:05 - making sure that this method is firing
10:08 - making sure that the label is visible
10:10 - and displaying the updated number of
10:13 - seconds so we do see our label updating
10:20 - and you can see this label is bouncing
10:21 - around a little bit to the left and
10:23 - right and that's because it's trying to
10:25 - Center it and also we didn't stop the
10:29 - timer when it reached zero so we need to
10:30 - address that as well but essentially
10:33 - these numbers are different widths so
10:35 - the width is constantly changing and
10:37 - this label is bouncing left
10:38 - then right while it's trying to center
10:40 - so what we need to do first of all let's
10:42 - address reaching zero when the timer has
10:49 - reached zero we want to stop it
10:55 - if milliseconds is equal to zero how
11:03 - about we do less than or equal to then
11:06 - the way we stop the timer is we call a
11:08 - method called invalidate on it so let me
11:12 - actually just read you the description
11:14 - of that stops the timer from ever firing
11:17 - again and requests its removal from its
11:20 - run loop and you can think of the run
11:22 - loop as just exactly how it sounds it's
11:24 - a bunch of things that are running in
11:26 - the background so we're actually going
11:29 - to need to change that timer to run on a
11:32 - different run loop or a different mode
11:34 - actually and I'll elaborate on that in a
11:37 - second okay so that is going to stop the
11:41 - timer now let's address the issue of it
11:43 - bouncing around so in here you can see
11:48 - our label is centered right and if this
11:53 - width or the text in there changes
11:56 - widths that is going to cause it to
11:58 - bounce around so what I actually want to
12:01 - do instead is probably set a width on
12:06 - this label so I'm going to set a width
12:10 - of about 190 and the reason why I choose
12:15 - this number is because I know from my
12:17 - testing that that is approximately the
12:20 - width so by setting it to 190 you can
12:23 - see that there are going to be some
12:26 - issues here
12:30 - the reason is because the stack view
12:35 - right now the alignment is set to fill
12:38 - so that wants to stretch everything out
12:41 - to the width of the stack view but if I
12:44 - Center it instead that is going to honor
12:50 - the width of this label right and it's
12:54 - just going to Center it the collection
12:56 - view itself doesn't really have a width
12:58 - so that might be an issue we might need
13:00 - to specify a width for the collection
13:02 - view fixed with the constraints may
13:05 - cause clipping yes that is true if our
13:09 - text is going to be too wide so this
13:12 - collection view right now I don't think
13:14 - we explicitly set its width so that
13:18 - might be an issue we need to we might
13:20 - need to set the width of the collection
13:22 - view to be the same width as the stack
13:24 - view why don't we actually just do that
13:26 - to prevent any issues because just to
13:29 - provide some explanation when you set it
13:32 - to fill the stack view that is you set
13:34 - it to fill it's going to stretch all the
13:37 - elements inside of it to fill up the
13:40 - entire width of the stack view that's
13:42 - what fill means but when you Center it
13:45 - it's going to Center all of the elements
13:47 - inside of it however it relies on the
13:51 - elements having their own widths right
13:54 - if it doesn't then it's going to be
13:57 - centered but it might have a zero width
13:58 - so that's why we need to make sure if we
14:02 - set the alignment of the stack view to
14:03 - the center we need to make sure that all
14:05 - of the elements inside of it actually
14:06 - have a width so the timer label does
14:08 - because we just added a width but this
14:11 - collection view doesn't so hold down
14:12 - control click and drag this blue line to
14:16 - the stack view and we are just going to
14:18 - choose equal widths like that so that's
14:21 - going to ensure that the collection view
14:22 - is the same width as the stack view okay
14:24 - so now for our timer label instead of
14:28 - centering it because now we gave it a
14:30 - width let's left adjust it or left align
14:34 - it sorry and if we run it again now we
14:39 - are going to see that this label remains
14:41 - stationary
14:42 - is exactly what we want and let's see if
14:44 - it stops at zero okay that's great that
14:50 - it does there is one issue though with
14:53 - the run loop and I did allude to this
14:56 - you can see when we scroll it actually
14:59 - stops the timer and that's really
15:03 - strange isn't it now let me explain to
15:04 - you why that is if we go back to the
15:08 - view controller here and we take a look
15:11 - at this part when it schedules this
15:14 - timer it creates it and schedules it it
15:17 - adds it to this default run loop which
15:20 - doesn't get executed when the user
15:23 - starts scrolling so what we actually
15:24 - have to do is also add this timer to
15:28 - another run loop which does run
15:31 - regardless of whether or not the user is
15:33 - scrolling so the way we can do that is
15:36 - right to run loop the main run loop
15:38 - we're going to add the timer to it so
15:42 - registers a given timer with a given
15:45 - input mode this is the one we want to
15:46 - use want to pass in our timer and
15:49 - because it's an optional we need to
15:51 - force and wrap it and I don't need to
15:53 - check whether it's nil or not because
15:55 - we've just created it here and the line
15:57 - above in the run loop mode and press dot
16:00 - and you're going to want to choose
16:02 - common modes this is gonna be the mode
16:05 - that allows the timer to run regardless
16:07 - of the user is scrolling or not so let's
16:10 - run the app again just to double-check
16:12 - that this is the case okay so you can
16:17 - see our that our timer is still running
16:19 - when that happens okay so that fixes
16:23 - that the next thing we want to do is
16:24 - actually in the timer elapsed when the
16:29 - milliseconds has reached zero we want to
16:31 - check if the user has any cards
16:34 - remaining
16:35 - that are unmatched because if he or she
16:37 - does then they've essentially lost the
16:40 - game so we are going to let's say for
16:45 - some added effect let's change the text
16:47 - color of the timer label to red when it
16:51 - reaches zero
16:54 - stop stop the timer check if the game or
17:06 - check if there are any cards unmatched
17:10 - now I'm not going to write this logic
17:12 - here instead I'm going to put that logic
17:14 - into its own method because that way we
17:17 - can reuse that logic in other places and
17:19 - there is another place where we want to
17:21 - run that logic so this is going to save
17:24 - us from duplicating code we are going to
17:27 - call this method that we are about to
17:28 - write check and game ended and I am
17:35 - going to create this method in the game
17:39 - logic methods section under check for
17:42 - matches and while we're here actually
17:45 - why don't I tell you the other place
17:48 - where we would want to check if the game
17:50 - has ended and that is actually in this
17:53 - check for matches method because when
17:56 - two cards are flipped over right
17:58 - compared to cards it's a match and we
18:02 - set the statuses of the cards is matched
18:06 - is true and we remove them from the grid
18:08 - at this point we also want to check if
18:11 - there are any cards left unmatched check
18:15 - if there are any cards left on mesh
18:18 - because if these two were the last two
18:22 - cards of the whole entire grid then the
18:25 - game has also ended so here we would
18:27 - also want to check game ended like that
18:31 - ok so let's scroll all the way to the
18:34 - bottom and we're gonna create our check
18:37 - game ended method right here make sure
18:40 - you do it before this ending bracket
18:43 - though check game ended okay
18:51 - so here we are going to determine if
18:58 - there are any cards unmatched
19:04 - if if not then user has one stop the
19:11 - timer
19:12 - if so as an if there are unmatched cards
19:20 - check if there there's any time left
19:27 - show messaging show won or lost
19:33 - messaging okay so for determining if
19:37 - there are any cards unmatched I am going
19:39 - to create a flag here I'm going to
19:43 - assume that the user has one and then I
19:46 - am going to loop through each card in
19:49 - the card array and I am going to check
19:52 - if card is our card is matched is false
19:58 - if I even find one card that is
20:01 - unmatched I am going to set is one to
20:04 - false and I am going to break out of
20:07 - that loop okay so however if it goes
20:13 - through every single card and it doesn't
20:16 - come into here that means that this flag
20:19 - will remain true and I can check that
20:22 - down here so if is one is equal to true
20:29 - and then else so I'm going to move this
20:35 - comment inside here okay so if the user
20:39 - has won now I want to point out one
20:43 - thing because is one is a boolean
20:46 - variable essentially I can actually just
20:48 - do that you know if this is true then
20:50 - it's gonna come in here otherwise it's
20:52 - gonna come in here but the reason why I
20:54 - still write this extra code here is
20:57 - because to me it's more clear to read
20:59 - and I feel like to anybody reading this
21:02 - code for the first time if they somehow
21:05 - missed you know this statement and
21:08 - reading this is more clear than
21:12 - something like that all right if they
21:14 - don't know that as a boolean so that is
21:17 - why I
21:18 - right that extra coat there because I
21:19 - value clarity over all else okay so if
21:24 - is one is true then we want to stop the
21:27 - timer
21:27 - so if milliseconds is still greater than
21:31 - zero then we can call timer dot
21:36 - invalidate and we want to set some
21:41 - messaging to pass into this part here if
21:44 - they've won so I am going to actually
21:47 - create the two variables up here for the
21:50 - messaging alert messaging var title and
22:01 - var message we're going to use those in
22:06 - a sec so if the user has one I'm going
22:09 - to set the title of the alert to
22:11 - congratulations
22:13 - the message is going to be you've won
22:17 - and if the user has cards that are still
22:22 - unmatched let's check if there's any
22:24 - time left if milliseconds is greater
22:27 - than zero then we are simply going to
22:31 - return because there are still there's
22:34 - still time left but otherwise if there's
22:38 - no time left then title is going to be
22:42 - game over message is you've lost all
22:50 - right so now we are going to show the
22:53 - alert we're going to use these two
22:55 - variables inside the alert and so we're
22:59 - going to create a new alert and the
23:02 - class we're going to use is the UI alert
23:05 - controller it's got an initialization
23:08 - method here that we can use where we can
23:10 - simply pass in the title and the message
23:13 - in the style you can hit dot and we are
23:17 - going to choose alert but this alert
23:20 - doesn't have any button to it so the
23:23 - user is not going to be able to dismiss
23:25 - that button unless we give them an alert
23:28 - action so let's create an alert
23:30 - alert action equals UI alert action and
23:35 - it also has a an initializer method that
23:39 - we can use the title is going to be okay
23:42 - style just hit dot we're going to choose
23:44 - default and the handler is the code that
23:48 - you want to run when the user taps on
23:50 - that button and we're gonna put nil
23:52 - because nothing we just want the users
23:54 - to be able to dismiss the alert we have
23:57 - to add the action to the alert as well
23:59 - so go ahead and type alert dot add
24:02 - action and put in the alert action in
24:05 - there and finally we can use the present
24:07 - method of the view controller to present
24:11 - the deal llort controller because that
24:14 - is actually a view controller so pass an
24:17 - alert and I made it you can set the true
24:19 - and completion you can just put nil in
24:23 - there so that is actually going to show
24:25 - an alert to the user based on these
24:28 - strings that we set up here now one
24:31 - optimization that you can do is you can
24:34 - actually move this code into a separate
24:36 - method so that you can call that method
24:38 - from anywhere inside your game just in
24:42 - case you need to show a message not just
24:44 - in this check game ended function so you
24:49 - know we can go ahead and create a method
24:51 - down here called show alert where you
24:55 - can pass in a title which is a string
24:58 - and a message which is also a string and
25:05 - you can just copy that code and paste it
25:09 - in there alright and that is going to
25:13 - allow you to just call show alert and
25:16 - pass in the two strings you want your
25:19 - alert to display and now you can call
25:22 - this function from anywhere
25:26 - okay so I think those warnings should go
25:29 - away because we did use them yep okay so
25:32 - now let's test it out so matching them
25:36 - should be easy because we never
25:38 - randomized any of it alright so it
25:45 - detected after we matched that last pair
25:47 - that we've won and the timer is stopped
25:49 - now let's just double-check that when
25:52 - the timer reaches zero we also see a
25:55 - message that we lost and now 10 seconds
25:58 - really isn't enough because I barely had
26:00 - enough time to match all of them even
26:02 - though they were not randomized yet yes
26:05 - okay so we see that game over screen and
26:09 - oh no we can still still flip these over
26:14 - so the way we can stop that is in the
26:21 - check for matches actually no in the
26:25 - here collection view did select item
26:28 - before anything else check if there's
26:33 - any time left or yeah so if milliseconds
26:39 - is less than or equal to zero just to
26:43 - return so this is going to stop the user
26:46 - from playing the game or selecting any
26:50 - cards when the time is up
26:56 - I was actually a match okay so now I
27:03 - actually can't click any of the cards so
27:07 - there you have it in this lesson you
27:10 - learn how to use timers to fire at
27:12 - specified intervals and you learn kind
27:14 - of add a function to trigger whenever
27:16 - that interval occurs you also learn how
27:18 - to create a show alerts to the user and
27:21 - you learn how to add alert actions to
27:23 - that alert dialog so that the user can
27:25 - tap on the buttons and dismiss the alert
27:27 - all right and with that we're almost
27:29 - finished I'll see you in the next lesson

Cleaned transcript:

hello and welcome in this video we are nearing the end of the project in this lesson our goal is to add a wind condition and show an alert by the end of this lesson you'll have added a timer to the app and the ability to detect whether the user has won or lost alright so let's get started so the first thing we're going to do before we actually add the timer is we're going to accommodate a timer label in the UI so that the user can see the timer counting down the way we're going to do that is we're simply going to add a label above the collection view so we're actually going to go ahead and put this collection view into a stack view first of all so click this button embed in stack view that's going to put your collection view into a stack view right here and if it's not a vertical stack view go ahead and change it right now to a vertical stack view and the alignment should be fill as well which will automatically stretch the elements inside of the stack view so that they are full width and next we actually want to position the stack view so that it is hugging all of the edges because right now there are no constraints for it even though it looks like it's positioned correctly there are actually no constraints to specify that so go ahead and make sure that your stack view is selected and then come into this menu and let's add four constraints to it all zeros we're going to do that and next we're actually going to go into this object library here and search for label and we're going to click and drag that into the stack view above the collection view right there and let's give this label some text and call it time remaining we are going to want to specify let's just put 10 for now and right now it's not actually visible the reason for that is because it probably doesn't have a height so why don't we go ahead and specify a height let's say 30 and while we're at it we're going to also specify a width and the reason for this actually let's not do the width yet let's do the height because we definitely need a height for that label otherwise it's just going to be zero height so we can go ahead and actually Center the text by changing the alignment here and while we are at it let's change the background of the collectionview to have a clear background so go ahead and select that scroll down here and under background select clear color like that and we should be able to see the background now let's go into assistant editor because we're going to want to connect this label as an outlet because we definitely want to change the numbers on this label and call it the timer label and connect it like that and let's go back to a single view editor go into the view controller and now let's create our timer let's go all the way to the top here where we are going to create a property to hold a reference to our timer so under here the rest of the properties let's create a property called timer and it's going to hold a timer object and it's going to be optional for now the reason for that is because we want to do it in the viewdidload we want to create the actual timer object there so the way the timer works is that you specify an interval for the timer to last and when it reaches 0 it's going to fire a method of your choice and then you can have that timer repeat so we are actually going to create that method first down here let's create a new section called timer methods and let's call this maybe timer elapsed and in here we're going to run some code whenever the timer is has fired and I wanted to create that method first because when we create the timer object we can specify the method to fire and I want to have that ready so in the viewdidload here let's create our timer object create timer and we are going to use a special type method of the timer class and that is to schedule a timer and there are a couple of different ones so you want to make sure that you use the right one there's this one here where you can specify a time interval a target a selector user info and repeats that's the one we want to use so go ahead and select that calling this initialization method is going to return a timer object to us set to all of these parameters that we specify here so the timer interval is actually expressed in seconds but I want the timer to be counting in milliseconds so that it invokes a sense of urgency from the player and so I am actually going to specify that the interval should be a millisecond because there are a thousand milliseconds in one second so I just divide one by a thousand and this is what you get so target and selector these two will allow you to specify a certain method of a certain object so since the timer elapsed method is inside the view controller where we are writing this code dart target would be self and the selector we have to use our special selector syntax and that's the hash tag selector and you can specify you can see here that it recognizes what it is and we can specify timer elapsed that this is going to actually create an error for us if we take a look it says that it's referring to a method timer elapsed that is not exposed to objectivec add this tag to expose it to objectivec so we're going to just hit fix and it's going to add that to our timer lapse this is something that we need to do in Swift for now if you're using an older version of Swift you probably won't run into that issue user info is where we can specify some options it's gotta be nil for us right now and we are going to specify that this timer should repeat when it is up so it's essentially going to fire every single millisecond and it's going to call this timer elapsed method every millisecond now we come to the point where we need to think about how much time do we want to give the user to complete this puzzle and up here let's express that as a property let's call this milliseconds this was going to be a that's not actually going to be a float well yeah we can specify as a float because later on we're going to need to divide that and express that in terms of seconds and if if this if we didn't specify type and we just specified something like 10 seconds which would be 10,000 milliseconds this is going to be integer if we try to divide this it's going to give us a whole number but we do want decimals so I'm going to specify that the type of this is actually going to be a float and milliseconds so that it's a little easier for us to think about and to read I'm going to do 10 times a thousand and that's essentially 10 seconds this would be 10 seconds okay so now let's work on our timer elapsed method so each time that this method fires I want to deduct a millisecond from our counter up here so I'm just going to do milliseconds equals 1 and that is going to decrement it by 1 and then I also want to express this in seconds convert to seconds and like I mentioned we just simply divide by a thousand to get the number of seconds but we do want to limit that decimal to two decimal places because any more than that would be confusing to the user to see that many decimal places so we can actually format it as a string with two decimal places if we take a look at some string initializers there's actually one called format down here where you can specify a format that has two decimal places and then the arguments is the data which you want to fit into that format so let's choose that so the argument is going to be milliseconds divided by a thousand and the format is going to be specified like this so percentage is a wild card where this data is going to be substituted into and to specify two decimal places you just go like this dot 2f and that is going to give you a string that is formatted to two decimal places I'm going to assign this into a constant called seconds and we are going to set our label to a timer label not text is equal to time remaining and we are going to substitute in seconds like that okay so now let's just run our project let me choose the iPhone 10 simulator we're gonna run our project and make sure that our timer is running making sure that this method is firing making sure that the label is visible and displaying the updated number of seconds so we do see our label updating and you can see this label is bouncing around a little bit to the left and right and that's because it's trying to Center it and also we didn't stop the timer when it reached zero so we need to address that as well but essentially these numbers are different widths so the width is constantly changing and this label is bouncing left then right while it's trying to center so what we need to do first of all let's address reaching zero when the timer has reached zero we want to stop it if milliseconds is equal to zero how about we do less than or equal to then the way we stop the timer is we call a method called invalidate on it so let me actually just read you the description of that stops the timer from ever firing again and requests its removal from its run loop and you can think of the run loop as just exactly how it sounds it's a bunch of things that are running in the background so we're actually going to need to change that timer to run on a different run loop or a different mode actually and I'll elaborate on that in a second okay so that is going to stop the timer now let's address the issue of it bouncing around so in here you can see our label is centered right and if this width or the text in there changes widths that is going to cause it to bounce around so what I actually want to do instead is probably set a width on this label so I'm going to set a width of about 190 and the reason why I choose this number is because I know from my testing that that is approximately the width so by setting it to 190 you can see that there are going to be some issues here the reason is because the stack view right now the alignment is set to fill so that wants to stretch everything out to the width of the stack view but if I Center it instead that is going to honor the width of this label right and it's just going to Center it the collection view itself doesn't really have a width so that might be an issue we might need to specify a width for the collection view fixed with the constraints may cause clipping yes that is true if our text is going to be too wide so this collection view right now I don't think we explicitly set its width so that might be an issue we need to we might need to set the width of the collection view to be the same width as the stack view why don't we actually just do that to prevent any issues because just to provide some explanation when you set it to fill the stack view that is you set it to fill it's going to stretch all the elements inside of it to fill up the entire width of the stack view that's what fill means but when you Center it it's going to Center all of the elements inside of it however it relies on the elements having their own widths right if it doesn't then it's going to be centered but it might have a zero width so that's why we need to make sure if we set the alignment of the stack view to the center we need to make sure that all of the elements inside of it actually have a width so the timer label does because we just added a width but this collection view doesn't so hold down control click and drag this blue line to the stack view and we are just going to choose equal widths like that so that's going to ensure that the collection view is the same width as the stack view okay so now for our timer label instead of centering it because now we gave it a width let's left adjust it or left align it sorry and if we run it again now we are going to see that this label remains stationary is exactly what we want and let's see if it stops at zero okay that's great that it does there is one issue though with the run loop and I did allude to this you can see when we scroll it actually stops the timer and that's really strange isn't it now let me explain to you why that is if we go back to the view controller here and we take a look at this part when it schedules this timer it creates it and schedules it it adds it to this default run loop which doesn't get executed when the user starts scrolling so what we actually have to do is also add this timer to another run loop which does run regardless of whether or not the user is scrolling so the way we can do that is right to run loop the main run loop we're going to add the timer to it so registers a given timer with a given input mode this is the one we want to use want to pass in our timer and because it's an optional we need to force and wrap it and I don't need to check whether it's nil or not because we've just created it here and the line above in the run loop mode and press dot and you're going to want to choose common modes this is gonna be the mode that allows the timer to run regardless of the user is scrolling or not so let's run the app again just to doublecheck that this is the case okay so you can see our that our timer is still running when that happens okay so that fixes that the next thing we want to do is actually in the timer elapsed when the milliseconds has reached zero we want to check if the user has any cards remaining that are unmatched because if he or she does then they've essentially lost the game so we are going to let's say for some added effect let's change the text color of the timer label to red when it reaches zero stop stop the timer check if the game or check if there are any cards unmatched now I'm not going to write this logic here instead I'm going to put that logic into its own method because that way we can reuse that logic in other places and there is another place where we want to run that logic so this is going to save us from duplicating code we are going to call this method that we are about to write check and game ended and I am going to create this method in the game logic methods section under check for matches and while we're here actually why don't I tell you the other place where we would want to check if the game has ended and that is actually in this check for matches method because when two cards are flipped over right compared to cards it's a match and we set the statuses of the cards is matched is true and we remove them from the grid at this point we also want to check if there are any cards left unmatched check if there are any cards left on mesh because if these two were the last two cards of the whole entire grid then the game has also ended so here we would also want to check game ended like that ok so let's scroll all the way to the bottom and we're gonna create our check game ended method right here make sure you do it before this ending bracket though check game ended okay so here we are going to determine if there are any cards unmatched if if not then user has one stop the timer if so as an if there are unmatched cards check if there there's any time left show messaging show won or lost messaging okay so for determining if there are any cards unmatched I am going to create a flag here I'm going to assume that the user has one and then I am going to loop through each card in the card array and I am going to check if card is our card is matched is false if I even find one card that is unmatched I am going to set is one to false and I am going to break out of that loop okay so however if it goes through every single card and it doesn't come into here that means that this flag will remain true and I can check that down here so if is one is equal to true and then else so I'm going to move this comment inside here okay so if the user has won now I want to point out one thing because is one is a boolean variable essentially I can actually just do that you know if this is true then it's gonna come in here otherwise it's gonna come in here but the reason why I still write this extra code here is because to me it's more clear to read and I feel like to anybody reading this code for the first time if they somehow missed you know this statement and reading this is more clear than something like that all right if they don't know that as a boolean so that is why I right that extra coat there because I value clarity over all else okay so if is one is true then we want to stop the timer so if milliseconds is still greater than zero then we can call timer dot invalidate and we want to set some messaging to pass into this part here if they've won so I am going to actually create the two variables up here for the messaging alert messaging var title and var message we're going to use those in a sec so if the user has one I'm going to set the title of the alert to congratulations the message is going to be you've won and if the user has cards that are still unmatched let's check if there's any time left if milliseconds is greater than zero then we are simply going to return because there are still there's still time left but otherwise if there's no time left then title is going to be game over message is you've lost all right so now we are going to show the alert we're going to use these two variables inside the alert and so we're going to create a new alert and the class we're going to use is the UI alert controller it's got an initialization method here that we can use where we can simply pass in the title and the message in the style you can hit dot and we are going to choose alert but this alert doesn't have any button to it so the user is not going to be able to dismiss that button unless we give them an alert action so let's create an alert alert action equals UI alert action and it also has a an initializer method that we can use the title is going to be okay style just hit dot we're going to choose default and the handler is the code that you want to run when the user taps on that button and we're gonna put nil because nothing we just want the users to be able to dismiss the alert we have to add the action to the alert as well so go ahead and type alert dot add action and put in the alert action in there and finally we can use the present method of the view controller to present the deal llort controller because that is actually a view controller so pass an alert and I made it you can set the true and completion you can just put nil in there so that is actually going to show an alert to the user based on these strings that we set up here now one optimization that you can do is you can actually move this code into a separate method so that you can call that method from anywhere inside your game just in case you need to show a message not just in this check game ended function so you know we can go ahead and create a method down here called show alert where you can pass in a title which is a string and a message which is also a string and you can just copy that code and paste it in there alright and that is going to allow you to just call show alert and pass in the two strings you want your alert to display and now you can call this function from anywhere okay so I think those warnings should go away because we did use them yep okay so now let's test it out so matching them should be easy because we never randomized any of it alright so it detected after we matched that last pair that we've won and the timer is stopped now let's just doublecheck that when the timer reaches zero we also see a message that we lost and now 10 seconds really isn't enough because I barely had enough time to match all of them even though they were not randomized yet yes okay so we see that game over screen and oh no we can still still flip these over so the way we can stop that is in the check for matches actually no in the here collection view did select item before anything else check if there's any time left or yeah so if milliseconds is less than or equal to zero just to return so this is going to stop the user from playing the game or selecting any cards when the time is up I was actually a match okay so now I actually can't click any of the cards so there you have it in this lesson you learn how to use timers to fire at specified intervals and you learn kind of add a function to trigger whenever that interval occurs you also learn how to create a show alerts to the user and you learn how to add alert actions to that alert dialog so that the user can tap on the buttons and dismiss the alert all right and with that we're almost finished I'll see you in the next lesson
