With timestamps:

00:00 - hey code crew welcome to the full stack
00:02 - ios notes app
00:03 - where you'll not only be building the
00:05 - ios app this time but you'll also be
00:07 - implementing the database
00:08 - and the api now i don't want to reveal
00:10 - too much because this app series is
00:12 - going to be led by a guest teacher who
00:13 - will walk you through how everything
00:15 - works his name is ali and he's been
00:17 - working with us here at code with chris
00:19 - for the last couple of months
00:20 - i'll let him introduce himself hey guys
00:22 - i'm ali and i'll be showing how to make
00:24 - this really cool notes app
00:26 - so let's just get into it i'll start by
00:28 - showing you the interface and i'll
00:29 - explain the different parts of the apps
00:30 - once we get there
00:32 - so to begin with we have our xcode
00:33 - project which is just the iphone app
00:35 - itself
00:36 - and i can add a new note so i can write
00:38 - new note
00:40 - this is the first note and i can save
00:43 - that
00:43 - and i can add multiple notes as well so
00:45 - this
00:46 - is the second note
00:50 - and second note and
00:53 - it'll save the date as well with the
00:54 - title and the actual note itself
00:56 - and this is all being saved to a
00:58 - database so if i restart my app
01:00 - so if i just go in and close my app and
01:02 - open it again
01:03 - we can see the notes are still there
01:05 - because it's saved to a database and not
01:06 - the device itself
01:08 - and i can also update notes if i click
01:10 - on the note i can say
01:12 - this is second note updated and if i
01:15 - save that
01:16 - it'll show that this is the second note
01:17 - which has been updated and i can also
01:19 - delete notes just click the delete
01:20 - button
01:21 - and i'll delete notes now the cool thing
01:23 - about this is
01:24 - the actual database is not core data or
01:27 - realm which is what you would expect for
01:28 - an iphone app
01:30 - in fact we're saving to mongodb and how
01:33 - that works is i actually have a server
01:34 - running
01:35 - and this server is running on my machine
01:38 - and what happens is the iphone
01:40 - contacts the server to save the data and
01:42 - then the server
01:43 - saves the data to the database and tells
01:45 - the iphone that it's saved
01:47 - and i can show you how this works in
01:49 - real time if i make a new note
01:51 - new note test
01:55 - and if i save that it'll show on my
01:57 - iphone and then if i go to my terminal
02:00 - if i use the and i'll show you how
02:02 - to actually how this actually works
02:04 - later on but i'll just show you the
02:06 - actual data which is being saved in the
02:07 - database
02:08 - if i say show dbs
02:12 - use new db
02:16 - db.datas.find
02:19 - you can see that this note has been
02:20 - saved on my local machine
02:22 - which is mongodb and i got the note here
02:25 - i got the title
02:26 - and have the date so i'll show you all
02:28 - how the different parts work
02:30 - and watch you get started with
02:31 - installing the actual dependencies like
02:33 - mongodb
02:34 - and once we've got that done we can
02:35 - start working on our actual app
02:37 - all right so before we start working on
02:39 - our actual app i just want to take a
02:41 - quick second to look at how the
02:42 - architecture and data flow of our apple
02:44 - look like
02:45 - so our app is going to have two main
02:47 - routes and routes are just functions
02:50 - so for example we're gonna have a route
02:51 - or a function to send something a
02:53 - database
02:54 - we're gonna have a route or a function
02:56 - to retrieve something from the database
02:58 - and how this is gonna work is that we're
03:00 - gonna have our iphone
03:01 - which uses xcode and lmlfire and that's
03:04 - going to send what the user has entered
03:06 - in their text field
03:07 - to the server the server which is made
03:10 - with node.js
03:11 - express.js and mongoose will then
03:13 - process that data
03:14 - and save it to the database which is
03:16 - mongodb
03:18 - then the database will tell the server
03:20 - if it's saved or not
03:21 - and if there were any errors and the
03:23 - server will tell the iphone if it's
03:25 - saved or not and if there were any
03:26 - errors
03:27 - and that's all the first route is and
03:29 - that allows us to save something to our
03:31 - database
03:32 - and the next route we're going to be
03:34 - working on is retrieving something from
03:35 - a database
03:36 - so we want to be able to see all the
03:38 - entries in our database and display on
03:40 - the iphone
03:41 - so the way that's going to work is that
03:43 - we're going to have our iphone which is
03:45 - made with xcode and ammo fire again and
03:48 - that's going to actually ask the server
03:50 - for the information now so last time it
03:53 - was sending data
03:54 - but this time it's just asking the
03:55 - server to send everything back
03:58 - so then our server is going to look
03:59 - through the database and it's going to
04:01 - take out all the entries
04:03 - and once it has the entries it's going
04:05 - to send it back to our iphone
04:07 - and then our iphone will refresh itself
04:10 - and we're going to see the new data that
04:11 - we've entered in our database
04:13 - so those are the two main routes sending
04:15 - something and retrieving something
04:17 - but we also need to make routes for
04:19 - updating and deleting
04:20 - but those routes are more or less just
04:22 - variations of these two routes
04:24 - so once we have these two routes down it
04:26 - shouldn't be too hard to get those
04:27 - working as well
04:29 - all right and now the last thing i want
04:30 - to do before we start actually working
04:32 - on some code
04:33 - is just giving you a quick lesson plan
04:35 - of what the different things we're going
04:36 - to do in this video series are
04:39 - the first thing we want to do is
04:41 - actually install all the dependencies
04:42 - for our project like mongodb
04:44 - node.js expressjs and mongoose
04:48 - and after that's done right you can
04:49 - start building our server
04:51 - so the first half we're actually going
04:52 - to start writing the code to build our
04:55 - server and make sure our server works
04:57 - then what we're going to do is we're
04:58 - going to test our server using an app
05:00 - called postman
05:02 - so that just allows us to test our
05:03 - server without having to make our iphone
05:05 - app first
05:06 - so once we know our server works
05:08 - successfully and we can update
05:10 - items delete items create items and
05:12 - fetch all items from the database
05:15 - then we'll actually start working on our
05:16 - xcode project
05:18 - and in our xcode project we're actually
05:20 - going to be making our app
05:21 - and making our app can communicate with
05:23 - the server
05:24 - and we're going to use alamo fire to
05:26 - make the app communicate with the server
05:28 - and make sure that the user then can add
05:30 - entries update entries delete entries
05:32 - and fetch entries
05:33 - and once those two things are done our
05:35 - app should be complete and we'll have a
05:37 - final product of the finished notes app
05:40 - so before we actually start writing any
05:41 - code i just want to take a quick second
05:43 - to look at the different tools we're
05:44 - going to be using
05:45 - and what they are so the first thing is
05:48 - our database which is mongodb
05:50 - and mongodb it says is a cross-platform
05:53 - document oriented database program
05:56 - and it uses json with optional
05:59 - optional schemas so what that allows us
06:02 - to do is save our data in a format which
06:04 - is called json
06:06 - and that's the exact same format as when
06:07 - you work with the api for example
06:10 - and you fetch some data it'll return it
06:12 - back in json
06:13 - so what this means is that when we
06:15 - actually want to access our data from
06:16 - the database
06:18 - it'll make it super easy to be able to
06:20 - access and work with the data we saved
06:22 - in the database
06:23 - and the other reason mongodb is super
06:25 - popular is because it's really light
06:27 - it's easy to get started with
06:29 - so that's mongodb which is our database
06:31 - and the next thing is
06:33 - node.js and what node.js is is open
06:37 - source
06:37 - cross-platform javascript runtime
06:40 - environment
06:41 - which allows us to execute javascript
06:42 - outside of a browser and that's really
06:44 - what
06:45 - node.js does so usually for example
06:48 - if you go to inspect you can actually
06:50 - run javascript inside your browser so i
06:53 - can do like
06:54 - console.log
06:58 - hello and it says hello right there so
07:00 - i've actually ran javascript inside
07:02 - my browser but to run javascript outside
07:05 - of your browser you actually need
07:06 - something called node.js
07:07 - this will allow us to run javascript on
07:09 - our machine to create a server then our
07:11 - iphone can interact with that javascript
07:13 - we wrote
07:14 - to send and receive data so that's all
07:16 - that node.js is
07:17 - it's just a program that allows us to
07:19 - run javascript
07:20 - outside of the browser and to actually
07:23 - create the server
07:24 - we're going to use express.js
07:27 - and what express.js is is a web
07:30 - application framework for nodejs
07:32 - so express runs inside of node so node
07:35 - runs the javascript
07:36 - and express is what we actually use to
07:39 - create the server
07:41 - so we need to create routes or functions
07:44 - for example to add things
07:45 - fetch things update things and delete
07:47 - things and the way we're going to define
07:49 - those functions
07:50 - and the data they take in and give back
07:52 - is using express.js
07:54 - so express.js will make it super easy
07:56 - for us to actually create
07:58 - those four functions and create our
07:59 - server
08:01 - and the last thing we're going to use is
08:03 - called mongoose
08:05 - and if you go the actual documentation
08:06 - for mongoose
08:08 - it says mongoose
08:12 - provides a straightforward schema based
08:14 - solution to model your
08:15 - application data and that's really what
08:17 - mongoose does it just makes it super
08:19 - easy for us to first
08:21 - create our schema or actually define
08:23 - what our data looks like
08:25 - so for example our note has a title a
08:27 - date and a note
08:28 - so it makes it super easy for us to
08:30 - define that object
08:31 - and also makes it super easy for us to
08:33 - interact with our mongodb database
08:36 - in our actual node.js file so without
08:39 - mongoose it's a bit harder to save
08:41 - data or update or delete data but using
08:44 - mongoose it's super easy to interact
08:45 - with our database
08:47 - all right now that we've got that done
08:48 - let's actually start working on some
08:50 - code
08:51 - all right now let's get started actually
08:52 - installing the different stuff like
08:54 - mongodb
08:55 - and node.js and as we're installing it
08:58 - i'll tell you what it actually does and
08:59 - how it works and why people use it
09:01 - but before we start installing any of
09:03 - those things we need to install
09:04 - something called homebrew
09:05 - so if you just google homebrew
09:08 - it says homebrew is a free open source
09:11 - software package management system that
09:13 - simplifies the installation of software
09:14 - on mac os
09:16 - and that's really what homebrew is it
09:17 - just makes it way easier for us to
09:19 - install different things like mongodb
09:21 - and node.js
09:22 - and different software packages like
09:23 - those so instead we have to unzip
09:25 - files run installers all that stuff you
09:28 - can install packages with a single line
09:30 - of code
09:31 - so if we go to the homebrew website
09:33 - you'll see it says right here
09:35 - install homebrew and there's one line of
09:36 - code so all you have to do is copy this
09:39 - line of code
09:40 - and then in your search bar just search
09:42 - for terminal and click open
09:46 - and once your terminals open you can
09:48 - simply paste that one line of code
09:50 - and enter your password and then click
09:53 - enter
09:54 - and it'll say installing and downloading
09:57 - homebrew
09:58 - so just give it a quick second and it
10:00 - should work and it'll tell you
10:01 - installation successful
10:03 - so now we know that homebrew is
10:04 - installed we can install different
10:06 - things like mongodb and node.js with a
10:08 - single line of code
10:10 - alright now that we've installed
10:11 - homebrew we can start installing things
10:13 - like mongodb
10:15 - so if you just google install mongodb
10:17 - homebrew
10:18 - and you click on the first link it'll
10:19 - say install mac install mongodb
10:22 - command edition on mac os so just click
10:24 - that
10:25 - and it gives you the instructions here
10:28 - but before we start installing
10:30 - let's just get into why people actually
10:32 - use mongodb and what it is
10:34 - well mongodb is a database like you just
10:36 - like you have core data or any other
10:38 - type of database
10:39 - but what it does it stores data in a
10:41 - json format
10:42 - so if you ever worked at the rest api
10:44 - you know returns back json
10:46 - so mongodb stores data in the exact same
10:49 - format as that
10:50 - and what that means is super easy to
10:52 - work with on websites
10:53 - because websites use javascript and json
10:56 - is inherently javascript
10:58 - and the other thing is mongodb is super
11:00 - light and super easy to get running
11:02 - so those are the three main reasons
11:03 - people use mongodb
11:05 - it's super popular as well
11:08 - so if we just scroll down we can see it
11:10 - says brewtap mongodb
11:12 - brew so let's copy this line of code
11:15 - and we'll open our terminal again so we
11:18 - just open our terminal
11:20 - and we run that one line of code and
11:22 - what this does it tells homebrew to
11:24 - install the actual package of mongodb
11:27 - and once homebrew knows what to install
11:30 - then we actually install it
11:31 - using this line of code brew install
11:34 - mongodb community at 4.2
11:38 - so run that one line of code give it a
11:40 - quick second
11:43 - and it's installed so now that we've got
11:46 - both
11:46 - mongodb and homer installed the next
11:48 - thing we have to install is something
11:50 - called node.js
11:52 - and what node.js is it's just an engine
11:54 - that allows us to run
11:56 - javascript so if you just google node.js
12:00 - it tells us node.js is an open source
12:02 - cross-platform
12:03 - javascript runtime environment that
12:05 - executes
12:06 - javascript code outside of a web browser
12:09 - so normally if we're running javascript
12:11 - it's usually in a web browser or a
12:12 - website
12:13 - but what node.js allows us to do is run
12:16 - javascript outside of a web browser
12:18 - which means we can use it for various
12:20 - different things for example you can
12:22 - make
12:22 - the server right now that we're gonna
12:23 - make you can also make like google home
12:25 - apps
12:26 - stuff like that you can make tons of
12:27 - things with node.js and all it really is
12:30 - is just the engine that allows us to run
12:32 - javascript
12:33 - so to get started on installing node.js
12:35 - is super simple
12:36 - so all we're going to do is open the
12:38 - terminal again
12:40 - and all we're going to type is is brew
12:42 - install
12:43 - node brew install node
12:47 - and once you click enter just give it a
12:49 - quick second
12:50 - it'll download and it's installed
12:54 - okay so now we've got both mongodb and
12:57 - node.js
12:59 - and if you want to test out that your
13:00 - nodejs has installed successfully
13:02 - all you have to do is type node-v and it
13:05 - says right here v14
13:07 - and that we know we're on the 14th
13:08 - version and it's installed on our
13:10 - machine correctly
13:11 - so now that we've got both both mongodb
13:14 - and node.js installed
13:15 - let's actually start working on the app
13:17 - and start building the server
13:18 - all right so now looks like you start
13:20 - building a server but before we do that
13:22 - i just want to take a quick look at what
13:24 - text editor you should be using
13:26 - so when you're making iphone apps you
13:28 - only have one text editor or ide
13:30 - which is xcode but when you're making
13:33 - websites and web services
13:34 - there's a ton of different ones you can
13:36 - use the most common one is visual studio
13:38 - code
13:39 - which is what i'll be using and i
13:40 - recommend you to use as well
13:42 - you could also use any other ones you
13:43 - like like notepad plus plus
13:45 - but vs code is the most common one for
13:47 - software engineers who are
13:49 - web developing so that's one i'll be
13:51 - using as well you can just go to the
13:52 - website and download it for mac
13:55 - so once you've done that just make a new
13:57 - folder anywhere you want
13:59 - and just title it anything you like
14:01 - let's call it server for
14:03 - note app once you've done that you can
14:07 - just right click it and click services
14:09 - and open with vs code
14:13 - now this will actually open your folder
14:14 - in vs code so the first thing you want
14:16 - to do is you want to click the little
14:18 - button next to
14:20 - where it says your folder name it's a
14:22 - little file button
14:23 - which is new file and just type in
14:25 - server
14:27 - dot js and what that means is it'll make
14:29 - a new file
14:30 - which is a javascript file which is why
14:32 - it's called.js
14:34 - so once you've done that again right
14:36 - click server.js and click
14:38 - open in integrated terminal
14:41 - this will open a little terminal on the
14:42 - bottom where you can write commands
14:44 - the first thing we want to write is npm
14:47 - init
14:48 - and what npm is it's like cocoapods or
14:50 - swift package manager
14:52 - it just allows us to easily install
14:54 - other software packages and dependencies
14:57 - and what npm init does it actually
14:59 - creates a file
15:00 - that allows us to track what
15:02 - dependencies we're using and the version
15:03 - of it
15:04 - and actually means node package manager
15:07 - initializer
15:08 - so just run it and it'll take you to a
15:10 - quick through
15:11 - so you can click yes on the package name
15:14 - and if it says it can only be url
15:16 - friendly characters
15:17 - just call it server then
15:21 - versions fine 1.0 descriptions fine you
15:24 - don't need one entry point should be
15:25 - server.js
15:27 - testcommand you don't need one we're not
15:29 - making git repository for it now
15:32 - you don't need the keywords authors fine
15:34 - license is fine and yes
15:36 - and if you see on the top left i
15:38 - actually made a new file called
15:40 - package.json
15:41 - and this will allow us to keep track of
15:43 - what dependencies we're using and the
15:44 - versions of it
15:46 - now let's write another command on the
15:48 - bottom we're gonna write npm
15:50 - install express and it'll actually
15:53 - install the express.js file so we can
15:56 - use
15:56 - in our app same thing where i npm
15:59 - install
15:59 - mongoose
16:02 - and then i like to install mongoose on
16:04 - our app in our folder so we can use it
16:07 - as well so now let's go to our server.js
16:09 - file
16:10 - and we'll write you far or you could
16:13 - write const as well
16:15 - const express is equal to require
16:21 - and in brackets in a string write
16:22 - express
16:25 - and we're going to write cons to
16:26 - mongoose is equal to require
16:31 - mongoose and one more thing right const
16:38 - is equal to express with two round
16:41 - brackets
16:42 - and what that does it actually creates
16:43 - an express object
16:45 - so we can actually use express in our
16:47 - project so the first thing we're gonna
16:49 - write here is mongoose
16:51 - dot connect you're gonna write two round
16:54 - brackets and you're gonna make two
16:56 - quotation marks inside that and you're
16:59 - gonna write
17:01 - db dot slash slash local host
17:06 - slash new db and what this means
17:09 - is that we want mongoose to connect to
17:12 - mongodb
17:13 - which is running on our machine which is
17:15 - localhost
17:16 - and we want to go into the new db folder
17:19 - of that mongodb
17:21 - you can name this anything you want you
17:22 - don't have to name a new db you can call
17:24 - it mydb
17:25 - but what it is is just the database or
17:27 - the folder that all our data is going to
17:29 - be stored in
17:30 - so after that we're going to type
17:34 - mongoose.connection.once
17:36 - so once mongoose has made a connection
17:38 - we want to
17:39 - we want it to tell us that it's
17:41 - connected so we can write
17:43 - open so once the connection is open we
17:46 - want to call a function
17:48 - so you can write function two round
17:51 - brackets two curly brackets
17:53 - and inside the function you can just
17:55 - write console.log
17:57 - which is just javascript's version of
17:59 - print
18:01 - connected to database so what this means
18:04 - is once the connection is open
18:07 - this function will be called and what
18:09 - this function does
18:11 - is that it's going to print to our
18:12 - terminal
18:14 - that is connected to the database
18:17 - and we can after that we can write dot
18:20 - on
18:22 - and then we can say error
18:25 - and then this is going to call another
18:26 - function
18:29 - and this function actually takes in the
18:30 - error
18:32 - so then we can write console.log
18:37 - failed to connect plus
18:44 - error so what this means is if it's
18:47 - connected
18:48 - it'll say console.log or it'll tell us
18:50 - connect it to database
18:51 - and if there's an error the dot on
18:54 - function will be called
18:55 - and this function will be fired this
18:57 - function takes in
18:58 - an error and what's going to happen is
19:00 - going to print fail to connect
19:02 - and then it's going to print our error
19:05 - and if you want to make your code a bit
19:06 - cleaner instead of writing all these
19:08 - function keywords
19:09 - you can actually remove the function
19:11 - keyword
19:12 - and replace it with an arrow
19:16 - so now you can have two round brackets
19:18 - and then an arrow which is an equal sign
19:20 - and a right sharp bracket so equals and
19:23 - a right sharp
19:24 - bracket like that which will make the
19:26 - arrow
19:29 - and then your block of code and we can
19:32 - do the same thing right here remove the
19:33 - function keyword
19:35 - and then marry equals with a right sharp
19:37 - bracket
19:39 - and then this block of code and this
19:40 - makes a bit more sense
19:42 - it's gonna take in an error and then
19:44 - it's gonna shoot this function
19:46 - which is in this block of code and this
19:48 - function is gonna print fail to connect
19:50 - plus the error so now that mongoose
19:53 - either connects or it doesn't and it
19:55 - lets us know if it connected or not
19:57 - we can actually start working on the
19:59 - routes but before we do that
20:01 - we want to make something called a
20:02 - schema and what a schema is it's
20:05 - basically an
20:05 - object that holds all our data so if you
20:08 - ever worked with core data before you
20:10 - know that you define an
20:11 - entity so you give it a title and you
20:13 - give it what it wants to hold
20:15 - we have to do the same thing for for our
20:17 - schema so we have to tell
20:19 -  mongodb exactly what a note object
20:22 - holds
20:23 - so for example a note holds a title it
20:26 - holds a note and it holds
20:27 - a date so we want to tell
20:30 - that it holds that thing and to save it
20:33 - in that format
20:34 - so to do that we're going to go back to
20:36 - our file directory on the top left
20:38 - again click that new file button
20:42 - and write note schema
20:46 - dot js and this will allow us to
20:49 - actually define a notes object so
20:51 -  knows exactly what a notes object
20:54 - is and what data it holds
20:57 - so in this file we're going to write var
21:00 - mongoose is equal to require mongoose
21:03 - just like we did in the last server file
21:08 - and we're going to write bar schema with
21:11 - a capital s
21:12 - is equal to is equal to
21:16 - mongoose dot and i'll actually give you
21:19 - a list of things you can write
21:21 - we're gonna write mongoose dot schema
21:26 - so once we've done that we can actually
21:28 - define a new schema or a new data object
21:31 - so we're going to say var note is equal
21:34 - to
21:34 - new schema and you can write two round
21:37 - brackets and two curly brackets inside
21:39 - that
21:41 - so now let's think what a note has so it
21:43 - has a title
21:45 - and the title is going to be a string a
21:48 - note also has a date
21:50 - which is a string and it has the note
21:53 - itself
21:54 - which is a string so now we've got
21:58 - that now knows what a note object
22:01 - is so it knows that a note holds a title
22:04 - a date and a note so the next thing
22:07 - we're going to do is we're going to
22:08 - export this
22:09 - so that the server can actually see this
22:11 - schema because right now
22:13 - only the schema is only held in this
22:15 - file node schema
22:16 - and we want to transfer that file to the
22:18 - server so what we're going to do is
22:20 - write const data is equal to mongoose
22:24 - dot model and we're gonna write two
22:28 - curly
22:28 - two round brackets and we're just going
22:30 - to call it data
22:32 - and what is the data well it's the note
22:34 - we made right
22:35 - so we can just write after data put a
22:38 - comma and write note
22:40 - so what this does it creates a data
22:42 - object and that is actually
22:44 - a note schema the last thing we're going
22:46 - to do is we're going to type
22:48 - module exports
22:51 - equal to data and what this allows us to
22:54 - do
22:55 - is that it sends where it allows us to
22:57 - access the note schema from the
22:58 - server.js file
23:00 - so right now the note schema is only
23:02 - available to this file
23:04 - so using the exports keyword we're able
23:07 - to send this to the server.js file
23:10 - so if we go into server.js let's type in
23:13 - far data is equal to require
23:18 - just like how we had far express or
23:19 - constexpress is equal to require express
23:23 - but this time we're going to write dot
23:24 - slash note
23:26 - schema so what the dot means is it tells
23:29 - the computer
23:30 - to look in the same folder as this file
23:33 - so if you go back here
23:35 - our file is actually located in the
23:38 - server for note
23:39 - app folder right so we're telling this
23:42 - file
23:43 - to look in the same folder which is this
23:45 - folder and look for the note schema file
23:48 - which is right here so that's how it
23:50 - knows where to look
23:52 - so if you save both of those now
23:56 - and you can actually save by going to
23:58 - file and clicking save or you can click
24:00 - command
24:00 - s now server.js has access
24:04 - to the schema so we can start creating
24:06 - and saving notes
24:07 - all right now it's like you start
24:09 - working on aki creating saving updating
24:11 - and deleting some data
24:13 - so let's think for a second we're going
24:14 - to have a route to create a note
24:18 - we're also gonna have a route to delete
24:20 - it out
24:22 - we're gonna have a route to update a
24:24 - note
24:25 - and we're gonna have a route to fetch
24:28 - all notes so let's think for a second
24:33 - when we're creating a note are we
24:34 - sending something to the server or are
24:36 - we retrieving something from the server
24:38 - well we're sending the note and the data
24:40 - we want to save to the database
24:42 - so when we're sending something to the
24:44 - server we call that a post request
24:48 - because you're posting something to the
24:49 - server same with delete
24:51 - are we actually taking something from
24:53 - the server or are we sending something
24:54 - to the server
24:56 - well we're sending the note we want to
24:57 - delete to the database
24:59 - so we're going to write post request
25:03 - and what about updating a note are we
25:05 - sending something to the database
25:07 - or the server yeah we're sending the new
25:09 - note right so
25:10 - again it's a post request and finally
25:14 - we have fetch all notes so are we
25:16 - sending anything to the database
25:18 - we're not really because what the server
25:20 - is going to do when we're fetching
25:21 - is going to go through the database and
25:23 - send the notes back to us
25:25 - so this actually called a get request
25:27 - because we're getting something from the
25:28 - server
25:30 - so look back on the first one which is
25:32 - creating a note
25:33 - so we can type app and the reason we
25:36 - type app is because we
25:37 - imported the express object and we saved
25:40 - it to the app variable so write app.post
25:43 - because it's a post request
25:45 - and then we're going to write in the
25:47 - brackets we're going to write slash
25:48 - create
25:49 - because for example if you go to
25:51 - google.com search
25:52 - it actually shows you all the stuff
25:54 - related to searches right
25:56 - so if we go to our app slash create we
25:59 - want to go to the part of our website
26:00 - which creates a note
26:03 - and we're gonna call a function right so
26:05 - you can get the two round brackets
26:07 - the arrow and the two curly brackets
26:11 - but this function actually takes in a
26:13 - request
26:14 - and a response so what a request
26:18 - is it's actually data that the iphone is
26:21 - sending us
26:22 - so for example what's going to be in the
26:24 - request object well
26:25 - we're going to hold the note we're going
26:27 - to hold the title and we're going to
26:28 - hold the date
26:29 - and that's all the data the iphone is
26:30 - going to send us and the response object
26:33 - is what we're sending back
26:35 - for example when we're sending all the
26:37 - notes back
26:38 - we're going to send those notes in the
26:40 - response object
26:41 - but that'll be more clear once i get
26:42 - started working with it
26:45 - so the first part we want to create a
26:48 - new
26:49 - data object so the first part we want to
26:51 - create a new notes object
26:53 - so we can write var note is equal to new
26:58 - data right and the reason we write data
27:01 - is because we
27:02 - imported it as data when we wrote data
27:04 - is equal to require note schema
27:07 - and then two round brackets and two
27:09 - curly brackets
27:11 - so if we go back to our schema a note
27:13 - holds a title
27:14 - a date and a note so we have to give it
27:17 - the exact same data so it's going to
27:19 - hold a note
27:20 - it's going to hold the title and it's
27:23 - going to hold a date
27:25 - now to actually get what the iphone is
27:27 - sending us it's going to be stored in
27:29 - the request
27:30 - object so we're going to write request
27:33 - dot get
27:35 - and then we're going to write note same
27:38 - for title we're going to write requests
27:39 - taught get title
27:43 - and finally same for date we're going to
27:44 - write request dot date
27:49 - request i'll get and we're going to
27:51 - write date
27:52 - and the reason we write note title and
27:54 - date is because when the iphone
27:56 - sends us this information it's going to
27:58 - package the note
27:59 - and on the top of the note information
28:02 - it's going to tell us that it's a note
28:04 - and on top of the title information it's
28:06 - going to tell us it's in title
28:08 - this will be more clear once you
28:09 - actually start sending requests from the
28:10 - iphone
28:12 - and this is a list so after every note
28:14 - or after every
28:15 - line you want to add a comma
28:18 - because it's actually an object that's a
28:20 - list so you want to add a comma after
28:21 - every line
28:23 - so once we've done that we've actually
28:24 - created a note object
28:26 - and that object will hold the
28:28 - information the iphone sends us
28:30 - so now what we're going to do is we're
28:32 - going to write data or we can
28:34 - write note dot save
28:37 - and that'll actually save it to
28:38 - databases that simple but we want to
28:41 - know if it's successfully saved or not
28:43 - so we can write dot then
28:46 - [Music]
28:47 - and what dot then does is once it's
28:49 - saved this this dot then function will
28:52 - be called
28:53 - and the dot then function will actually
28:55 - call another function
28:57 - so we're going to use our function
28:58 - notation to create a function
29:01 - and in this we're going to say if we're
29:04 - going to make an if statement if
29:06 - note dot is new
29:09 - it's equal equal to false
29:14 - we're going to say console dot log
29:18 - saved data so what the is new function
29:22 - tells us
29:23 - is that if the data is stored both on
29:25 - the server and the database
29:27 - it'll return false so what does that
29:30 - mean
29:30 - well if the note is stored on both the
29:32 - server and the database
29:34 - we know that it's saved to the database
29:36 - but if is new is equal to true
29:38 - that means the data is only on the
29:40 - server which means it failed to save in
29:42 - the database
29:44 - so if it's false we're going to say save
29:45 - data and then we can write
29:47 - else so if we save data
29:51 - the opposite of that is not saving the
29:54 - data so we can write console.log
29:58 - failed to save data
30:04 - and one more thing in the is new is
30:06 - equal to false part
30:08 - we actually want to tell the iphone that
30:10 - we received the request
30:11 - so we're going to say res dot send
30:15 - saved data so this will tell the iphone
30:18 - that we successfully got the data and we
30:20 - saved it
30:21 - and that's all this route is is done so
30:24 - now we can actually start testing this
30:26 - route and see if it actually works
30:28 - but before we do that we actually have
30:30 - to give our app a url
30:32 - because right now there's no url we can
30:34 - type in our search browser
30:35 - or the iphone can ping right to access
30:38 - the server
30:39 - so to do that we're going to type the
30:41 - var server
30:43 - is equal to anyway
30:46 - app.listen
30:49 - and you get the first argument you're
30:51 - going to give it is 8081
30:53 - and the second argument is a string and
30:56 - this is actually your network ip address
30:59 - so if you open settings or system
31:00 - preferences
31:02 - and you go into network and you use
31:05 - click advanced on the bottom right
31:07 - you see that it gives you the ipv4
31:09 - address
31:10 - so just copy the ipv4 address
31:13 - and close that and paste it into the
31:16 - server
31:18 - and what this means is any device on
31:20 - your network so your iphone your
31:21 - physical iphone any laptops
31:24 - any computers that are using your
31:25 - internet connection or your computer
31:27 - network
31:28 - will be able to access the server and
31:31 - the last thing we want to do is we want
31:33 - to call a function one is running right
31:35 - so we can use our arrow notation
31:39 - and we can just say console
31:42 - dot log server
31:46 - is running all right to get to our
31:49 - server
31:50 - all you have to do is type and i can
31:52 - write it as a comment here
31:54 - you're going to type http
31:57 - colon slash slash your
32:01 - ipv4 address which is your string right
32:04 - here
32:05 - colon 8081 slash
32:08 - create and the create comes from this
32:11 - route we created
32:12 - with the slash create so if any website
32:15 - or if any service pings up this address
32:18 - it'll go to the create route so we can
32:20 - actually test this now
32:22 - so if i open my terminal using right
32:26 - click in the server and clicking open an
32:27 - integrated terminal
32:29 - we can just type node server.js
32:33 - and we actually get this big error so
32:36 - this looks kind of intimidating at first
32:38 - but if you read it it says server is
32:40 - running at the beginning
32:42 - so that was the message we wrote right
32:44 - up here which was server is running
32:47 - and after that it says field to connect
32:49 -  network error
32:51 - so this was super helpful because
32:54 - remembering wrote dot
32:55 - on error and it says fail to connect
32:57 - plus error
32:58 - well the field the connect string is
33:00 - right there
33:01 - and then the error is this big dump that
33:04 - we got right here
33:07 - so what this really means is that we
33:08 - haven't started our
33:10 - client and to do that what we do is we
33:13 - go back to chrome
33:14 - and if you remember the website where we
33:18 - where we installed mongodb from homebrew
33:21 - remember we had to use the brew install
33:23 - command if we scroll down here
33:25 - we see brew services start mongodb
33:28 - community 4.2
33:30 - so just copy that and open terminal
33:35 - and paste that line right there
33:38 - and now it says successfully started
33:40 -  community
33:41 - and now our is running our mongodb
33:44 - is running
33:45 - so what this error said was that
33:46 - mongoose couldn't connect to mongodb
33:50 - but now that we've turned on mongodb if
33:52 - i exit the compiler or if i exit the
33:55 - terminal
33:56 - using control c and i type
33:59 - node server.js this time it should work
34:03 - successfully and it does
34:05 - you see server is running and connected
34:07 - to database
34:08 - so now we can actually test our server
34:10 - using something called postman
34:12 - so if you just type postman and click
34:15 - the first link
34:17 - and what postman is is that it allows us
34:20 - to test our
34:21 - routes like our create and delete route
34:23 - but we don't actually have to
34:25 - make a whole iphone app first because
34:28 - what if we create the whole app and it's
34:30 - and it works on the xcode side but we
34:32 - find out that
34:33 - our server doesn't work for some reason
34:35 - so what postman allow us to do is send
34:37 - requests and then we can debug our app
34:39 - to see if there's any problems
34:41 - so if you scroll to the very bottom it
34:44 - says download the app
34:46 - and you can click the download button
34:48 - there so once you've downloaded and
34:50 - installed it
34:52 - just open postman
34:55 - and click the new button on the top left
34:58 - and once you click the new button click
35:00 - the top left button which is
35:02 - get request or request create a basic
35:05 - request
35:07 - and you can call this whatever you want
35:09 - you can type let's say create
35:12 - route test and then you have to give it
35:15 - a folder
35:16 - so i've already created a folder called
35:17 - notes app demo where you can just create
35:19 - one here
35:20 - so just call it notes app
35:23 - just save that and it's saved in the
35:25 - folder and click save
35:27 - so now that we have to go now that we've
35:29 - got that let's go back into vs code
35:31 - and let's take a look at our address i
35:33 - gave at the bottom here
35:35 - so the address we want to go to and you
35:38 - can click that you can type the address
35:40 - right in the middle here where it says
35:41 - enter request url
35:43 - you can type http dot colon
35:46 - slash slash 192.168.0.117
35:53 - and this might not be the same for you
35:55 - it's just the ipv4 address you copied
35:57 - earlier
35:59 - and then you're going to write colon
36:00 - 8081
36:02 - which is the port and then you're going
36:04 - to write slash
36:05 - create and the reason you write slash
36:08 - create is because we're accessing the
36:10 - create row
36:11 - so when we're going to access the delete
36:13 - route later on we're just going to
36:14 - change the slash create to slash delete
36:17 - but right now we're doing the slash
36:19 - create row
36:21 - and the next thing you want to do is you
36:22 - want to change this get to a post
36:25 - because remember we're sending something
36:26 - to the server
36:28 - and in the server says app.post so you
36:31 - want to change that to a post request
36:33 - and now what you're going to do is
36:34 - you're going to go down on the headers
36:37 - so click the headers and there's a key
36:39 - and a value
36:40 - so you can name the header key note and
36:43 - we can just copy paste it from here
36:46 - just call that note and the next one is
36:49 - title
36:51 - and the last one is date and these have
36:54 - to match
36:55 - exactly what we told the server to look
36:57 - for because if i write notes
36:59 - the server is only looking for n-o-t-e
37:02 - so if i send data with the title
37:04 - n-o-t-e-s
37:05 - the server doesn't know what to look for
37:07 - so you have to make sure this exactly
37:09 - matches what we told the server to look
37:11 - for
37:12 - and now we can just write test
37:16 - test and test and these are just the
37:20 - values the iphone's going to send
37:22 - so later on it's actually going to send
37:23 - a date it's going to send a title the
37:25 - user wrote
37:26 - and it's going to send the note itself
37:28 - and now we know the server is running
37:30 - because it gave us the message
37:32 - which told us the server is running and
37:33 - is connected
37:35 - so now that we've got that if we just
37:37 - click the send button
37:38 - it should save the data so we click send
37:41 - and we get a message right here says
37:43 - save data and also our server tells us
37:45 - saved data
37:47 - so now that we want to verify that it
37:49 - actually saved
37:50 - so open your terminal and type in
37:55 - and this will open the client so
37:57 - you can write commands
37:58 - and interact with your database so you
38:01 - can type in the command
38:02 - show dbs and this will give you a bunch
38:05 - of dbs or databases
38:08 - which is what is the one that we're
38:09 - using well we're using new db because
38:11 - that's what we defined
38:12 - when we wrote mongoose.connect so
38:16 - type use new db
38:19 - and it says switch to db to new db now
38:23 - we can write show
38:24 - collections and the only collection we
38:27 - have is datas which means
38:29 - we have a bunch of data objects remember
38:32 - we write define data here
38:34 - well we have a bunch of these data
38:36 - objects which is why it's called datas
38:39 - so we can say db.datas
38:44 - dot find with two round brackets
38:48 - so db database dot datas which is
38:52 - when you wrote show collections it'll
38:53 - tell you data's that's where we get data
38:56 - and dot fine with two round brackets if
38:59 - i enter this command you can actually
39:01 - see
39:02 - that we've saved a test
39:05 - test and test which is exactly what we
39:08 - sent here so we can send another one
39:11 - so we can write
39:15 - we can write another note like for
39:17 - example
39:18 - note this is the first
39:22 - note title new note
39:25 - and date let's say monday july
39:29 - 17 right so we send that
39:33 - it says saved here it says saved here so
39:35 - we know it's saved
39:36 - again now we can use we can type
39:39 - show collections
39:43 - it will say data so we write db.datas
39:46 - dot find two round brackets and again
39:50 - you can see the new notes in the
39:51 - database and it says
39:53 - this is the first note new note and
39:55 - monday july 17th
39:57 - so now that we know we can save data
40:00 - using the create route
40:01 - we have to implement three more routes
40:04 - so we have to implement a delete route
40:06 - which is again a post request
40:08 - an update route and a fetch all notes
40:11 - route
40:11 - so let's get started working on those
40:13 - all right now let's get started working
40:15 - on the fetch row
40:16 - and the fetch row is super easy so
40:18 - underneath the
40:19 - create route we can make the fetch file
40:21 - so let's type app
40:23 - dot get because this time the server is
40:26 - going to be sending the iphone something
40:27 - so it's a get request and the route we
40:30 - want to ping is
40:32 - fetch and obviously
40:36 - every route has a request and a response
40:40 - and use your error notation to create a
40:42 - function
40:43 - and this one's really easy we can write
40:45 - data capital d
40:48 - dot find and we're actually going to
40:50 - give it
40:51 - two curly brackets so this means we want
40:54 - to find
40:54 - everything in the database if we want to
40:57 - find just for example
40:59 - not in this app but if you had a certain
41:01 - app with let's say employees or
41:03 - companies
41:04 - and you only want to find employees well
41:06 - you would tell it that you only want to
41:07 - find employees
41:09 - but since we're using nothing since
41:11 - we're entering nothing in the brackets
41:13 - it knows that has to find everything
41:16 - and then we write dot then
41:20 - and then once dot dot then
41:23 - actually has another function inside of
41:25 - it so use your function notation
41:29 - and we can call this a whole database or
41:33 - we can just say like
41:35 - database db items
41:40 - so then we can write res dot send
41:45 - and db items not as a string but
41:50 - as the actual variable db items
41:54 - and that's all the fetch row is
41:58 - so what it does is when we ping and you
42:00 - should add a slash fetch right there
42:02 - what it does is when we go to the slash
42:04 - fetch route
42:06 - the the server looks to the database
42:09 - finds every object and then returns it
42:13 - using the root
42:14 - response so it gives us a response with
42:17 - every item in the database
42:19 - so if we save this and we restart our
42:23 - server
42:23 - so again to restart your server you
42:25 - click option c
42:28 - and you write node server
42:31 - it'll tell us it worked so if we go to
42:34 - the address which was
42:36 - http dot
42:39 - slash slash one nine and then just look
42:43 - at the address you created
42:44 - which was 192.168.0.117
42:53 - 8081 fetch this should actually show us
42:57 - every item in the database
42:59 - but this time i'm not using the
43:01 - client
43:02 - instead i'm using my web browser because
43:04 - this is basically just a website
43:06 - so this should work when i click enter
43:08 - and there it is
43:10 - now i'm in my web browser but i can
43:12 - still see the items i created
43:14 - i had test test and this is the first
43:17 - note
43:17 - new note monday july 17 which is the
43:20 - exact same thing is what the
43:22 - client told us
43:24 - right here and right here but this time
43:27 - i'm on a website
43:28 - using a web browser so the iphone is
43:31 - going to ping
43:32 - the website like the browser did to get
43:34 - all this data back
43:36 - so now let's create the delete route so
43:38 - i'm right app.post
43:42 - and the route is going to be slash
43:44 - delete
43:46 - and every route always takes in a wreck
43:48 - and a res
43:50 - and then user function notation
43:54 - there so what we're gonna do is we're
43:56 - gonna write data
43:57 - dot find and then if you just scroll
44:01 - down
44:01 - you can see find one and remove
44:04 - you're gonna give it two round brackets
44:06 - and two curly brackets inside that
44:09 - now the way we're going to identify each
44:11 - note is using the id property
44:14 - so mongodb actually gives the note a
44:17 - unique id so we can say that i want to
44:21 - delete this note
44:22 - with this id and i know i'm going to
44:24 - delete exactly this note
44:26 - so there's no overlap between ids so for
44:28 - example
44:29 - notes can have the same title so if i
44:31 - say i want to delete note with this
44:33 - title
44:34 - i'll actually end up deleting multiple
44:35 - notes but if i say i want to delete note
44:38 - with this object id
44:39 - i know i'm only deleting this note
44:42 - so we can say underscore id
44:46 - is equal to rec dot get
44:50 - id all right
44:53 - and now if that fails we want another
44:56 - function to be called
44:57 - so and this function is going to take in
44:59 - an error
45:04 - and then use your arrow notation right
45:05 - there and then you can say console.log
45:12 - failed and then you can tell it the
45:16 - error
45:18 - now once that's done you can write at
45:20 - the end you can write res dot send
45:26 - and delete it and this route should work
45:29 - so we just save it and i control cra
45:33 - node server
45:35 - and news i just restarted my server so
45:37 - it's updated now
45:38 - alright so now let's look at the note i
45:40 - want to delete
45:41 - so if i use my fetch row i can see i
45:43 - have this note right here
45:45 - and has this id so i'll copy this id and
45:47 - i'll go into postman
45:50 - i'll create a new request and i'll call
45:52 - this delete
45:53 - test that's the post request
45:58 - and if you just write http you'll have a
46:01 - history
46:01 - of the last route we use so you can just
46:04 - change that from create to delete
46:06 - and now in the header give it the id
46:10 - and paste that id and now click send it
46:13 - says deleted here
46:14 - so when i refresh this i won't see this
46:16 - anymore
46:17 - and there it is it's gone so we know
46:19 - we've successfully deleted a note
46:22 - so so far we can create notes
46:26 - we can fetch all the notes we have in
46:27 - the database and we can delete notes
46:30 - so the last thing we want to work on now
46:32 - is
46:33 - updating a note
46:38 - all right now that we've got adding
46:39 - fetching and deleting let's work on the
46:41 - last
46:42 - thing which is updating so to update a
46:44 - note we're going to make a post request
46:47 - and the reason we're making a post
46:48 - request is because we're sending
46:50 - something to database
46:52 - and the server where because we're
46:53 - sending the id and we're going to send
46:55 - the new node data
46:56 - so i'm going to write app.post
47:00 - and i'm going to name the route slash
47:02 - update
47:06 - and we're always going to have the rec
47:08 - and the res
47:10 - and then this is going to fire off a
47:12 - different function so let's put
47:14 - arrows and two curly brackets let's just
47:17 - make that big okay
47:19 - so now we've got that just like we had
47:21 - find one and remove
47:22 - when we're deleting something we also
47:24 - have find one and update
47:26 - so we're going to write data dot
47:30 - find one and update right there
47:33 - find by id and update but there's also
47:36 - one called
47:36 - find one and update either one works i'm
47:40 - gonna be using find one and update
47:43 - so i'm right to round brackets and
47:45 - inside that i'm gonna
47:46 - write a curly bracket comma curly
47:49 - bracket
47:50 - and i'm going to have my error function
47:53 - so just write err
47:56 - arrow and the two curly brackets so the
47:59 - first curly bracket is the first object
48:01 - which specifies the object we want to
48:04 - update so in this case we're going to
48:07 - put the id in the first curly bracket
48:09 - in the second curly bracket we're
48:11 - sending our new data so that's going to
48:13 - be the updated note
48:14 - and finally i just have my error
48:16 - function which is going to fire
48:17 - something off if something goes wrong
48:20 - let's just start working on them
48:25 - so in the first bracket in the first
48:27 - curly brackets i'm going to write id
48:30 - it's equal to rec.get id just like how
48:34 - we did
48:35 - for the delete route we have to specify
48:37 - the id and we're going to send the id
48:39 - and now i'm going to write note in the
48:41 - second curly bracket i'll write note
48:43 - rec dot get note
48:47 - just like how i did in the create route
48:51 - so you can just copy paste that and
48:55 - change this to title
49:00 - rec.get title and finally
49:03 - date is rec.getdate
49:08 - and it gives me an error and the reasons
49:09 - give me error is because i don't have
49:11 - commas after every line
49:13 - so make sure you put commas after every
49:15 - line an inner error function raises
49:18 - current console
49:19 - dot log failed
49:23 - to update plus err
49:27 - so say fail to update and it's going to
49:28 - give me the error so i can fix it
49:31 - if it goes wrong and finally i'm going
49:32 - to write res.send
49:35 - so that's where i updated so this is
49:36 - going to send back some data
49:38 - it's going to send the message updated
49:39 - to the iphone so the iphone knows the
49:42 - server has successfully done its thing
49:45 - and this should be enough so let's just
49:46 - save that
49:48 - and now what i'm gonna do is i'm gonna
49:49 - go to my server.js i'm gonna
49:52 - click open integrated terminal and i'm
49:54 - gonna write node
49:55 - server dot js and actually run into an
49:59 - error it says address already in use
50:04 - 192.168.0117
50:05 - colon881 and what that means is i
50:08 - already have a server running
50:10 - so i try to run this server on the same
50:12 - address
50:13 - or the same url as my previous server so
50:16 - to fix that
50:17 - all i have to do is go on the top right
50:19 - here
50:20 - this little drop down menu go to the one
50:22 - that says node
50:24 - click on that and you can see the server
50:27 - is already running
50:28 - so all i have to do to turn off the
50:30 - server is click option c
50:32 - once i click option c the server closes
50:35 - and i can go back to my original
50:37 - window and i could write node server.js
50:41 - and it'll work so if you run into that
50:43 - problem make sure that
50:44 - all your other servers are closed
50:46 - because you can't run two servers on the
50:48 - same web address
50:49 - so now we've got that running i'll go to
50:52 - my fetch route and see this is my data
50:55 - right here
50:57 - so now let's see using postman let's see
50:59 - if this actually works so i'm going to
51:00 - go to postman
51:02 - i'm going to create a new route and call
51:04 - this
51:05 - update route
51:09 - demo and we're going to change that to a
51:12 - post request
51:14 - the url is going to be the same as all
51:16 - the other ones we're just going to
51:17 - change this from a delete create
51:19 - or fetch to update
51:23 - and now we're going to pass in some
51:24 - headers so we're going to pass an id
51:27 - we're going to pass in a title we're
51:29 - going to pass in a date
51:31 - and we're going to pass in a note
51:37 - so the id is the id of the note we want
51:39 - to update
51:40 - for example i want to update the second
51:42 - note so i'm just going to copy this id
51:46 - and i'll just paste it in here
51:50 - now the title i just want to call this
51:52 - updated
51:53 - how to change everything to update so we
51:55 - know it's updated
51:56 - and i'm going to run my request so i'm
51:59 - going to click send
52:00 - and it says update it down here so if i
52:02 - refresh this page this
52:04 - note should have turned into updated but
52:06 - this note should stay the exact same
52:09 - so i refresh and
52:14 - so if i send that i actually run into an
52:16 - error so i click send
52:18 - and you can see it's not updating over
52:20 - here and if i go back into my file
52:23 - as you can see it's not updating over
52:25 - here because the data is still the same
52:27 - so i go back into my file
52:29 - in the icc it said failed to update no
52:33 - so what does that mean well it means
52:34 - that it doesn't know what i'm trying to
52:36 - update
52:37 - and the reason that's happening is
52:38 - because i told the id
52:40 - is equal to rec.getid but when in fact
52:43 - it's actually called
52:44 - underscore id because if we look here
52:47 - it's called
52:47 - underscore id so the thing is you have
52:50 - to make sure
52:51 - your keys and your values so your keys
52:54 - are
52:54 - id note title and also the values you're
52:57 - getting from your server
52:59 - or your iphone which is going to be id
53:01 - note date title
53:03 - which is the same data right here we
53:05 - have to make sure that these are case
53:06 - sensitive and exactly the same
53:08 - because even if you're just missing like
53:10 - a small semicolon
53:12 - or a small underscore your whole thing
53:14 - won't work so i'm going to save this
53:17 - and i'm going to restart it so again
53:18 - click option c
53:20 - to turn off your server and the click
53:22 - node server
53:24 - and now it should work so i'll go back
53:26 - here
53:27 - i'll look at my fetch row and i see my
53:29 - data is right here
53:30 - so what i'm going to do now is go to
53:32 - postman and try to send the same request
53:34 - again
53:35 - and now it says updated and i refresh it
53:38 - and this time is updated so the problem
53:41 - was
53:43 - it wasn't the exact same i was missing
53:44 - the underscore and if you miss a small
53:47 - detail like that when you're working
53:48 - with your database
53:49 - you can run into some problems but now
53:51 - that we're done the actual server side
53:53 - of things so we have our
53:54 - create read update and destroy routes
53:58 - now we can start working our xcode and
54:00 - making our xcode app
54:01 - interact with this alright so in this
54:03 - video you've set up the web server and
54:05 - database and configured the endpoints
54:07 - that are ready for the ios app to hit
54:09 - in the next video you're going to start
54:11 - implementing the notes ios app
54:13 - so that it's going to start sending and
54:14 - receiving data from these endpoints
54:16 - by the way this is elise first time
54:18 - teaching on youtube so show him some
54:20 - appreciation and support
54:21 - by leaving a comment below and giving
54:23 - him a thumbs up
54:24 - let him know if this video helped you or
54:26 - if you want to see more ios full stack
54:28 - development
54:29 - or just give them some thanks i remember
54:32 - in my early days
54:33 - that feedback from you guys was extra
54:35 - crucial to help me carry on teaching so
54:37 - let's show ali some love
54:39 - all right i'll see you in the next
54:40 - lesson

Cleaned transcript:

hey code crew welcome to the full stack ios notes app where you'll not only be building the ios app this time but you'll also be implementing the database and the api now i don't want to reveal too much because this app series is going to be led by a guest teacher who will walk you through how everything works his name is ali and he's been working with us here at code with chris for the last couple of months i'll let him introduce himself hey guys i'm ali and i'll be showing how to make this really cool notes app so let's just get into it i'll start by showing you the interface and i'll explain the different parts of the apps once we get there so to begin with we have our xcode project which is just the iphone app itself and i can add a new note so i can write new note this is the first note and i can save that and i can add multiple notes as well so this is the second note and second note and it'll save the date as well with the title and the actual note itself and this is all being saved to a database so if i restart my app so if i just go in and close my app and open it again we can see the notes are still there because it's saved to a database and not the device itself and i can also update notes if i click on the note i can say this is second note updated and if i save that it'll show that this is the second note which has been updated and i can also delete notes just click the delete button and i'll delete notes now the cool thing about this is the actual database is not core data or realm which is what you would expect for an iphone app in fact we're saving to mongodb and how that works is i actually have a server running and this server is running on my machine and what happens is the iphone contacts the server to save the data and then the server saves the data to the database and tells the iphone that it's saved and i can show you how this works in real time if i make a new note new note test and if i save that it'll show on my iphone and then if i go to my terminal if i use the and i'll show you how to actually how this actually works later on but i'll just show you the actual data which is being saved in the database if i say show dbs use new db db.datas.find you can see that this note has been saved on my local machine which is mongodb and i got the note here i got the title and have the date so i'll show you all how the different parts work and watch you get started with installing the actual dependencies like mongodb and once we've got that done we can start working on our actual app all right so before we start working on our actual app i just want to take a quick second to look at how the architecture and data flow of our apple look like so our app is going to have two main routes and routes are just functions so for example we're gonna have a route or a function to send something a database we're gonna have a route or a function to retrieve something from the database and how this is gonna work is that we're gonna have our iphone which uses xcode and lmlfire and that's going to send what the user has entered in their text field to the server the server which is made with node.js express.js and mongoose will then process that data and save it to the database which is mongodb then the database will tell the server if it's saved or not and if there were any errors and the server will tell the iphone if it's saved or not and if there were any errors and that's all the first route is and that allows us to save something to our database and the next route we're going to be working on is retrieving something from a database so we want to be able to see all the entries in our database and display on the iphone so the way that's going to work is that we're going to have our iphone which is made with xcode and ammo fire again and that's going to actually ask the server for the information now so last time it was sending data but this time it's just asking the server to send everything back so then our server is going to look through the database and it's going to take out all the entries and once it has the entries it's going to send it back to our iphone and then our iphone will refresh itself and we're going to see the new data that we've entered in our database so those are the two main routes sending something and retrieving something but we also need to make routes for updating and deleting but those routes are more or less just variations of these two routes so once we have these two routes down it shouldn't be too hard to get those working as well all right and now the last thing i want to do before we start actually working on some code is just giving you a quick lesson plan of what the different things we're going to do in this video series are the first thing we want to do is actually install all the dependencies for our project like mongodb node.js expressjs and mongoose and after that's done right you can start building our server so the first half we're actually going to start writing the code to build our server and make sure our server works then what we're going to do is we're going to test our server using an app called postman so that just allows us to test our server without having to make our iphone app first so once we know our server works successfully and we can update items delete items create items and fetch all items from the database then we'll actually start working on our xcode project and in our xcode project we're actually going to be making our app and making our app can communicate with the server and we're going to use alamo fire to make the app communicate with the server and make sure that the user then can add entries update entries delete entries and fetch entries and once those two things are done our app should be complete and we'll have a final product of the finished notes app so before we actually start writing any code i just want to take a quick second to look at the different tools we're going to be using and what they are so the first thing is our database which is mongodb and mongodb it says is a crossplatform document oriented database program and it uses json with optional optional schemas so what that allows us to do is save our data in a format which is called json and that's the exact same format as when you work with the api for example and you fetch some data it'll return it back in json so what this means is that when we actually want to access our data from the database it'll make it super easy to be able to access and work with the data we saved in the database and the other reason mongodb is super popular is because it's really light it's easy to get started with so that's mongodb which is our database and the next thing is node.js and what node.js is is open source crossplatform javascript runtime environment which allows us to execute javascript outside of a browser and that's really what node.js does so usually for example if you go to inspect you can actually run javascript inside your browser so i can do like console.log hello and it says hello right there so i've actually ran javascript inside my browser but to run javascript outside of your browser you actually need something called node.js this will allow us to run javascript on our machine to create a server then our iphone can interact with that javascript we wrote to send and receive data so that's all that node.js is it's just a program that allows us to run javascript outside of the browser and to actually create the server we're going to use express.js and what express.js is is a web application framework for nodejs so express runs inside of node so node runs the javascript and express is what we actually use to create the server so we need to create routes or functions for example to add things fetch things update things and delete things and the way we're going to define those functions and the data they take in and give back is using express.js so express.js will make it super easy for us to actually create those four functions and create our server and the last thing we're going to use is called mongoose and if you go the actual documentation for mongoose it says mongoose provides a straightforward schema based solution to model your application data and that's really what mongoose does it just makes it super easy for us to first create our schema or actually define what our data looks like so for example our note has a title a date and a note so it makes it super easy for us to define that object and also makes it super easy for us to interact with our mongodb database in our actual node.js file so without mongoose it's a bit harder to save data or update or delete data but using mongoose it's super easy to interact with our database all right now that we've got that done let's actually start working on some code all right now let's get started actually installing the different stuff like mongodb and node.js and as we're installing it i'll tell you what it actually does and how it works and why people use it but before we start installing any of those things we need to install something called homebrew so if you just google homebrew it says homebrew is a free open source software package management system that simplifies the installation of software on mac os and that's really what homebrew is it just makes it way easier for us to install different things like mongodb and node.js and different software packages like those so instead we have to unzip files run installers all that stuff you can install packages with a single line of code so if we go to the homebrew website you'll see it says right here install homebrew and there's one line of code so all you have to do is copy this line of code and then in your search bar just search for terminal and click open and once your terminals open you can simply paste that one line of code and enter your password and then click enter and it'll say installing and downloading homebrew so just give it a quick second and it should work and it'll tell you installation successful so now we know that homebrew is installed we can install different things like mongodb and node.js with a single line of code alright now that we've installed homebrew we can start installing things like mongodb so if you just google install mongodb homebrew and you click on the first link it'll say install mac install mongodb command edition on mac os so just click that and it gives you the instructions here but before we start installing let's just get into why people actually use mongodb and what it is well mongodb is a database like you just like you have core data or any other type of database but what it does it stores data in a json format so if you ever worked at the rest api you know returns back json so mongodb stores data in the exact same format as that and what that means is super easy to work with on websites because websites use javascript and json is inherently javascript and the other thing is mongodb is super light and super easy to get running so those are the three main reasons people use mongodb it's super popular as well so if we just scroll down we can see it says brewtap mongodb brew so let's copy this line of code and we'll open our terminal again so we just open our terminal and we run that one line of code and what this does it tells homebrew to install the actual package of mongodb and once homebrew knows what to install then we actually install it using this line of code brew install mongodb community at 4.2 so run that one line of code give it a quick second and it's installed so now that we've got both mongodb and homer installed the next thing we have to install is something called node.js and what node.js is it's just an engine that allows us to run javascript so if you just google node.js it tells us node.js is an open source crossplatform javascript runtime environment that executes javascript code outside of a web browser so normally if we're running javascript it's usually in a web browser or a website but what node.js allows us to do is run javascript outside of a web browser which means we can use it for various different things for example you can make the server right now that we're gonna make you can also make like google home apps stuff like that you can make tons of things with node.js and all it really is is just the engine that allows us to run javascript so to get started on installing node.js is super simple so all we're going to do is open the terminal again and all we're going to type is is brew install node brew install node and once you click enter just give it a quick second it'll download and it's installed okay so now we've got both mongodb and node.js and if you want to test out that your nodejs has installed successfully all you have to do is type nodev and it says right here v14 and that we know we're on the 14th version and it's installed on our machine correctly so now that we've got both both mongodb and node.js installed let's actually start working on the app and start building the server all right so now looks like you start building a server but before we do that i just want to take a quick look at what text editor you should be using so when you're making iphone apps you only have one text editor or ide which is xcode but when you're making websites and web services there's a ton of different ones you can use the most common one is visual studio code which is what i'll be using and i recommend you to use as well you could also use any other ones you like like notepad plus plus but vs code is the most common one for software engineers who are web developing so that's one i'll be using as well you can just go to the website and download it for mac so once you've done that just make a new folder anywhere you want and just title it anything you like let's call it server for note app once you've done that you can just right click it and click services and open with vs code now this will actually open your folder in vs code so the first thing you want to do is you want to click the little button next to where it says your folder name it's a little file button which is new file and just type in server dot js and what that means is it'll make a new file which is a javascript file which is why it's called.js so once you've done that again right click server.js and click open in integrated terminal this will open a little terminal on the bottom where you can write commands the first thing we want to write is npm init and what npm is it's like cocoapods or swift package manager it just allows us to easily install other software packages and dependencies and what npm init does it actually creates a file that allows us to track what dependencies we're using and the version of it and actually means node package manager initializer so just run it and it'll take you to a quick through so you can click yes on the package name and if it says it can only be url friendly characters just call it server then versions fine 1.0 descriptions fine you don't need one entry point should be server.js testcommand you don't need one we're not making git repository for it now you don't need the keywords authors fine license is fine and yes and if you see on the top left i actually made a new file called package.json and this will allow us to keep track of what dependencies we're using and the versions of it now let's write another command on the bottom we're gonna write npm install express and it'll actually install the express.js file so we can use in our app same thing where i npm install mongoose and then i like to install mongoose on our app in our folder so we can use it as well so now let's go to our server.js file and we'll write you far or you could write const as well const express is equal to require and in brackets in a string write express and we're going to write cons to mongoose is equal to require mongoose and one more thing right const is equal to express with two round brackets and what that does it actually creates an express object so we can actually use express in our project so the first thing we're gonna write here is mongoose dot connect you're gonna write two round brackets and you're gonna make two quotation marks inside that and you're gonna write db dot slash slash local host slash new db and what this means is that we want mongoose to connect to mongodb which is running on our machine which is localhost and we want to go into the new db folder of that mongodb you can name this anything you want you don't have to name a new db you can call it mydb but what it is is just the database or the folder that all our data is going to be stored in so after that we're going to type mongoose.connection.once so once mongoose has made a connection we want to we want it to tell us that it's connected so we can write open so once the connection is open we want to call a function so you can write function two round brackets two curly brackets and inside the function you can just write console.log which is just javascript's version of print connected to database so what this means is once the connection is open this function will be called and what this function does is that it's going to print to our terminal that is connected to the database and we can after that we can write dot on and then we can say error and then this is going to call another function and this function actually takes in the error so then we can write console.log failed to connect plus error so what this means is if it's connected it'll say console.log or it'll tell us connect it to database and if there's an error the dot on function will be called and this function will be fired this function takes in an error and what's going to happen is going to print fail to connect and then it's going to print our error and if you want to make your code a bit cleaner instead of writing all these function keywords you can actually remove the function keyword and replace it with an arrow so now you can have two round brackets and then an arrow which is an equal sign and a right sharp bracket so equals and a right sharp bracket like that which will make the arrow and then your block of code and we can do the same thing right here remove the function keyword and then marry equals with a right sharp bracket and then this block of code and this makes a bit more sense it's gonna take in an error and then it's gonna shoot this function which is in this block of code and this function is gonna print fail to connect plus the error so now that mongoose either connects or it doesn't and it lets us know if it connected or not we can actually start working on the routes but before we do that we want to make something called a schema and what a schema is it's basically an object that holds all our data so if you ever worked with core data before you know that you define an entity so you give it a title and you give it what it wants to hold we have to do the same thing for for our schema so we have to tell mongodb exactly what a note object holds so for example a note holds a title it holds a note and it holds a date so we want to tell that it holds that thing and to save it in that format so to do that we're going to go back to our file directory on the top left again click that new file button and write note schema dot js and this will allow us to actually define a notes object so knows exactly what a notes object is and what data it holds so in this file we're going to write var mongoose is equal to require mongoose just like we did in the last server file and we're going to write bar schema with a capital s is equal to is equal to mongoose dot and i'll actually give you a list of things you can write we're gonna write mongoose dot schema so once we've done that we can actually define a new schema or a new data object so we're going to say var note is equal to new schema and you can write two round brackets and two curly brackets inside that so now let's think what a note has so it has a title and the title is going to be a string a note also has a date which is a string and it has the note itself which is a string so now we've got that now knows what a note object is so it knows that a note holds a title a date and a note so the next thing we're going to do is we're going to export this so that the server can actually see this schema because right now only the schema is only held in this file node schema and we want to transfer that file to the server so what we're going to do is write const data is equal to mongoose dot model and we're gonna write two curly two round brackets and we're just going to call it data and what is the data well it's the note we made right so we can just write after data put a comma and write note so what this does it creates a data object and that is actually a note schema the last thing we're going to do is we're going to type module exports equal to data and what this allows us to do is that it sends where it allows us to access the note schema from the server.js file so right now the note schema is only available to this file so using the exports keyword we're able to send this to the server.js file so if we go into server.js let's type in far data is equal to require just like how we had far express or constexpress is equal to require express but this time we're going to write dot slash note schema so what the dot means is it tells the computer to look in the same folder as this file so if you go back here our file is actually located in the server for note app folder right so we're telling this file to look in the same folder which is this folder and look for the note schema file which is right here so that's how it knows where to look so if you save both of those now and you can actually save by going to file and clicking save or you can click command s now server.js has access to the schema so we can start creating and saving notes all right now it's like you start working on aki creating saving updating and deleting some data so let's think for a second we're going to have a route to create a note we're also gonna have a route to delete it out we're gonna have a route to update a note and we're gonna have a route to fetch all notes so let's think for a second when we're creating a note are we sending something to the server or are we retrieving something from the server well we're sending the note and the data we want to save to the database so when we're sending something to the server we call that a post request because you're posting something to the server same with delete are we actually taking something from the server or are we sending something to the server well we're sending the note we want to delete to the database so we're going to write post request and what about updating a note are we sending something to the database or the server yeah we're sending the new note right so again it's a post request and finally we have fetch all notes so are we sending anything to the database we're not really because what the server is going to do when we're fetching is going to go through the database and send the notes back to us so this actually called a get request because we're getting something from the server so look back on the first one which is creating a note so we can type app and the reason we type app is because we imported the express object and we saved it to the app variable so write app.post because it's a post request and then we're going to write in the brackets we're going to write slash create because for example if you go to google.com search it actually shows you all the stuff related to searches right so if we go to our app slash create we want to go to the part of our website which creates a note and we're gonna call a function right so you can get the two round brackets the arrow and the two curly brackets but this function actually takes in a request and a response so what a request is it's actually data that the iphone is sending us so for example what's going to be in the request object well we're going to hold the note we're going to hold the title and we're going to hold the date and that's all the data the iphone is going to send us and the response object is what we're sending back for example when we're sending all the notes back we're going to send those notes in the response object but that'll be more clear once i get started working with it so the first part we want to create a new data object so the first part we want to create a new notes object so we can write var note is equal to new data right and the reason we write data is because we imported it as data when we wrote data is equal to require note schema and then two round brackets and two curly brackets so if we go back to our schema a note holds a title a date and a note so we have to give it the exact same data so it's going to hold a note it's going to hold the title and it's going to hold a date now to actually get what the iphone is sending us it's going to be stored in the request object so we're going to write request dot get and then we're going to write note same for title we're going to write requests taught get title and finally same for date we're going to write request dot date request i'll get and we're going to write date and the reason we write note title and date is because when the iphone sends us this information it's going to package the note and on the top of the note information it's going to tell us that it's a note and on top of the title information it's going to tell us it's in title this will be more clear once you actually start sending requests from the iphone and this is a list so after every note or after every line you want to add a comma because it's actually an object that's a list so you want to add a comma after every line so once we've done that we've actually created a note object and that object will hold the information the iphone sends us so now what we're going to do is we're going to write data or we can write note dot save and that'll actually save it to databases that simple but we want to know if it's successfully saved or not so we can write dot then and what dot then does is once it's saved this this dot then function will be called and the dot then function will actually call another function so we're going to use our function notation to create a function and in this we're going to say if we're going to make an if statement if note dot is new it's equal equal to false we're going to say console dot log saved data so what the is new function tells us is that if the data is stored both on the server and the database it'll return false so what does that mean well if the note is stored on both the server and the database we know that it's saved to the database but if is new is equal to true that means the data is only on the server which means it failed to save in the database so if it's false we're going to say save data and then we can write else so if we save data the opposite of that is not saving the data so we can write console.log failed to save data and one more thing in the is new is equal to false part we actually want to tell the iphone that we received the request so we're going to say res dot send saved data so this will tell the iphone that we successfully got the data and we saved it and that's all this route is is done so now we can actually start testing this route and see if it actually works but before we do that we actually have to give our app a url because right now there's no url we can type in our search browser or the iphone can ping right to access the server so to do that we're going to type the var server is equal to anyway app.listen and you get the first argument you're going to give it is 8081 and the second argument is a string and this is actually your network ip address so if you open settings or system preferences and you go into network and you use click advanced on the bottom right you see that it gives you the ipv4 address so just copy the ipv4 address and close that and paste it into the server and what this means is any device on your network so your iphone your physical iphone any laptops any computers that are using your internet connection or your computer network will be able to access the server and the last thing we want to do is we want to call a function one is running right so we can use our arrow notation and we can just say console dot log server is running all right to get to our server all you have to do is type and i can write it as a comment here you're going to type http colon slash slash your ipv4 address which is your string right here colon 8081 slash create and the create comes from this route we created with the slash create so if any website or if any service pings up this address it'll go to the create route so we can actually test this now so if i open my terminal using right click in the server and clicking open an integrated terminal we can just type node server.js and we actually get this big error so this looks kind of intimidating at first but if you read it it says server is running at the beginning so that was the message we wrote right up here which was server is running and after that it says field to connect network error so this was super helpful because remembering wrote dot on error and it says fail to connect plus error well the field the connect string is right there and then the error is this big dump that we got right here so what this really means is that we haven't started our client and to do that what we do is we go back to chrome and if you remember the website where we where we installed mongodb from homebrew remember we had to use the brew install command if we scroll down here we see brew services start mongodb community 4.2 so just copy that and open terminal and paste that line right there and now it says successfully started community and now our is running our mongodb is running so what this error said was that mongoose couldn't connect to mongodb but now that we've turned on mongodb if i exit the compiler or if i exit the terminal using control c and i type node server.js this time it should work successfully and it does you see server is running and connected to database so now we can actually test our server using something called postman so if you just type postman and click the first link and what postman is is that it allows us to test our routes like our create and delete route but we don't actually have to make a whole iphone app first because what if we create the whole app and it's and it works on the xcode side but we find out that our server doesn't work for some reason so what postman allow us to do is send requests and then we can debug our app to see if there's any problems so if you scroll to the very bottom it says download the app and you can click the download button there so once you've downloaded and installed it just open postman and click the new button on the top left and once you click the new button click the top left button which is get request or request create a basic request and you can call this whatever you want you can type let's say create route test and then you have to give it a folder so i've already created a folder called notes app demo where you can just create one here so just call it notes app just save that and it's saved in the folder and click save so now that we have to go now that we've got that let's go back into vs code and let's take a look at our address i gave at the bottom here so the address we want to go to and you can click that you can type the address right in the middle here where it says enter request url you can type http dot colon slash slash 192.168.0.117 and this might not be the same for you it's just the ipv4 address you copied earlier and then you're going to write colon 8081 which is the port and then you're going to write slash create and the reason you write slash create is because we're accessing the create row so when we're going to access the delete route later on we're just going to change the slash create to slash delete but right now we're doing the slash create row and the next thing you want to do is you want to change this get to a post because remember we're sending something to the server and in the server says app.post so you want to change that to a post request and now what you're going to do is you're going to go down on the headers so click the headers and there's a key and a value so you can name the header key note and we can just copy paste it from here just call that note and the next one is title and the last one is date and these have to match exactly what we told the server to look for because if i write notes the server is only looking for note so if i send data with the title notes the server doesn't know what to look for so you have to make sure this exactly matches what we told the server to look for and now we can just write test test and test and these are just the values the iphone's going to send so later on it's actually going to send a date it's going to send a title the user wrote and it's going to send the note itself and now we know the server is running because it gave us the message which told us the server is running and is connected so now that we've got that if we just click the send button it should save the data so we click send and we get a message right here says save data and also our server tells us saved data so now that we want to verify that it actually saved so open your terminal and type in and this will open the client so you can write commands and interact with your database so you can type in the command show dbs and this will give you a bunch of dbs or databases which is what is the one that we're using well we're using new db because that's what we defined when we wrote mongoose.connect so type use new db and it says switch to db to new db now we can write show collections and the only collection we have is datas which means we have a bunch of data objects remember we write define data here well we have a bunch of these data objects which is why it's called datas so we can say db.datas dot find with two round brackets so db database dot datas which is when you wrote show collections it'll tell you data's that's where we get data and dot fine with two round brackets if i enter this command you can actually see that we've saved a test test and test which is exactly what we sent here so we can send another one so we can write we can write another note like for example note this is the first note title new note and date let's say monday july 17 right so we send that it says saved here it says saved here so we know it's saved again now we can use we can type show collections it will say data so we write db.datas dot find two round brackets and again you can see the new notes in the database and it says this is the first note new note and monday july 17th so now that we know we can save data using the create route we have to implement three more routes so we have to implement a delete route which is again a post request an update route and a fetch all notes route so let's get started working on those all right now let's get started working on the fetch row and the fetch row is super easy so underneath the create route we can make the fetch file so let's type app dot get because this time the server is going to be sending the iphone something so it's a get request and the route we want to ping is fetch and obviously every route has a request and a response and use your error notation to create a function and this one's really easy we can write data capital d dot find and we're actually going to give it two curly brackets so this means we want to find everything in the database if we want to find just for example not in this app but if you had a certain app with let's say employees or companies and you only want to find employees well you would tell it that you only want to find employees but since we're using nothing since we're entering nothing in the brackets it knows that has to find everything and then we write dot then and then once dot dot then actually has another function inside of it so use your function notation and we can call this a whole database or we can just say like database db items so then we can write res dot send and db items not as a string but as the actual variable db items and that's all the fetch row is so what it does is when we ping and you should add a slash fetch right there what it does is when we go to the slash fetch route the the server looks to the database finds every object and then returns it using the root response so it gives us a response with every item in the database so if we save this and we restart our server so again to restart your server you click option c and you write node server it'll tell us it worked so if we go to the address which was http dot slash slash one nine and then just look at the address you created which was 192.168.0.117 8081 fetch this should actually show us every item in the database but this time i'm not using the client instead i'm using my web browser because this is basically just a website so this should work when i click enter and there it is now i'm in my web browser but i can still see the items i created i had test test and this is the first note new note monday july 17 which is the exact same thing is what the client told us right here and right here but this time i'm on a website using a web browser so the iphone is going to ping the website like the browser did to get all this data back so now let's create the delete route so i'm right app.post and the route is going to be slash delete and every route always takes in a wreck and a res and then user function notation there so what we're gonna do is we're gonna write data dot find and then if you just scroll down you can see find one and remove you're gonna give it two round brackets and two curly brackets inside that now the way we're going to identify each note is using the id property so mongodb actually gives the note a unique id so we can say that i want to delete this note with this id and i know i'm going to delete exactly this note so there's no overlap between ids so for example notes can have the same title so if i say i want to delete note with this title i'll actually end up deleting multiple notes but if i say i want to delete note with this object id i know i'm only deleting this note so we can say underscore id is equal to rec dot get id all right and now if that fails we want another function to be called so and this function is going to take in an error and then use your arrow notation right there and then you can say console.log failed and then you can tell it the error now once that's done you can write at the end you can write res dot send and delete it and this route should work so we just save it and i control cra node server and news i just restarted my server so it's updated now alright so now let's look at the note i want to delete so if i use my fetch row i can see i have this note right here and has this id so i'll copy this id and i'll go into postman i'll create a new request and i'll call this delete test that's the post request and if you just write http you'll have a history of the last route we use so you can just change that from create to delete and now in the header give it the id and paste that id and now click send it says deleted here so when i refresh this i won't see this anymore and there it is it's gone so we know we've successfully deleted a note so so far we can create notes we can fetch all the notes we have in the database and we can delete notes so the last thing we want to work on now is updating a note all right now that we've got adding fetching and deleting let's work on the last thing which is updating so to update a note we're going to make a post request and the reason we're making a post request is because we're sending something to database and the server where because we're sending the id and we're going to send the new node data so i'm going to write app.post and i'm going to name the route slash update and we're always going to have the rec and the res and then this is going to fire off a different function so let's put arrows and two curly brackets let's just make that big okay so now we've got that just like we had find one and remove when we're deleting something we also have find one and update so we're going to write data dot find one and update right there find by id and update but there's also one called find one and update either one works i'm gonna be using find one and update so i'm right to round brackets and inside that i'm gonna write a curly bracket comma curly bracket and i'm going to have my error function so just write err arrow and the two curly brackets so the first curly bracket is the first object which specifies the object we want to update so in this case we're going to put the id in the first curly bracket in the second curly bracket we're sending our new data so that's going to be the updated note and finally i just have my error function which is going to fire something off if something goes wrong let's just start working on them so in the first bracket in the first curly brackets i'm going to write id it's equal to rec.get id just like how we did for the delete route we have to specify the id and we're going to send the id and now i'm going to write note in the second curly bracket i'll write note rec dot get note just like how i did in the create route so you can just copy paste that and change this to title rec.get title and finally date is rec.getdate and it gives me an error and the reasons give me error is because i don't have commas after every line so make sure you put commas after every line an inner error function raises current console dot log failed to update plus err so say fail to update and it's going to give me the error so i can fix it if it goes wrong and finally i'm going to write res.send so that's where i updated so this is going to send back some data it's going to send the message updated to the iphone so the iphone knows the server has successfully done its thing and this should be enough so let's just save that and now what i'm gonna do is i'm gonna go to my server.js i'm gonna click open integrated terminal and i'm gonna write node server dot js and actually run into an error it says address already in use 192.168.0117 colon881 and what that means is i already have a server running so i try to run this server on the same address or the same url as my previous server so to fix that all i have to do is go on the top right here this little drop down menu go to the one that says node click on that and you can see the server is already running so all i have to do to turn off the server is click option c once i click option c the server closes and i can go back to my original window and i could write node server.js and it'll work so if you run into that problem make sure that all your other servers are closed because you can't run two servers on the same web address so now we've got that running i'll go to my fetch route and see this is my data right here so now let's see using postman let's see if this actually works so i'm going to go to postman i'm going to create a new route and call this update route demo and we're going to change that to a post request the url is going to be the same as all the other ones we're just going to change this from a delete create or fetch to update and now we're going to pass in some headers so we're going to pass an id we're going to pass in a title we're going to pass in a date and we're going to pass in a note so the id is the id of the note we want to update for example i want to update the second note so i'm just going to copy this id and i'll just paste it in here now the title i just want to call this updated how to change everything to update so we know it's updated and i'm going to run my request so i'm going to click send and it says update it down here so if i refresh this page this note should have turned into updated but this note should stay the exact same so i refresh and so if i send that i actually run into an error so i click send and you can see it's not updating over here and if i go back into my file as you can see it's not updating over here because the data is still the same so i go back into my file in the icc it said failed to update no so what does that mean well it means that it doesn't know what i'm trying to update and the reason that's happening is because i told the id is equal to rec.getid but when in fact it's actually called underscore id because if we look here it's called underscore id so the thing is you have to make sure your keys and your values so your keys are id note title and also the values you're getting from your server or your iphone which is going to be id note date title which is the same data right here we have to make sure that these are case sensitive and exactly the same because even if you're just missing like a small semicolon or a small underscore your whole thing won't work so i'm going to save this and i'm going to restart it so again click option c to turn off your server and the click node server and now it should work so i'll go back here i'll look at my fetch row and i see my data is right here so what i'm going to do now is go to postman and try to send the same request again and now it says updated and i refresh it and this time is updated so the problem was it wasn't the exact same i was missing the underscore and if you miss a small detail like that when you're working with your database you can run into some problems but now that we're done the actual server side of things so we have our create read update and destroy routes now we can start working our xcode and making our xcode app interact with this alright so in this video you've set up the web server and database and configured the endpoints that are ready for the ios app to hit in the next video you're going to start implementing the notes ios app so that it's going to start sending and receiving data from these endpoints by the way this is elise first time teaching on youtube so show him some appreciation and support by leaving a comment below and giving him a thumbs up let him know if this video helped you or if you want to see more ios full stack development or just give them some thanks i remember in my early days that feedback from you guys was extra crucial to help me carry on teaching so let's show ali some love all right i'll see you in the next lesson
