With timestamps:

00:01 - hello welcome to learn Swift for
00:02 - beginners lesson 7 in this lesson you're
00:05 - going to learn about functions how to
00:06 - use them what they are and this is a
00:09 - critical part of the Swift programming
00:11 - language if you want to build apps with
00:12 - it so let's get
00:16 - started so here I've got a brand new
00:19 - xcode playground where we're going to
00:21 - take a look at what functions are and
00:23 - how to use them how to define one how to
00:25 - call one if you don't know how to start
00:28 - a new playground just go back to lesson
00:30 - one of this learn Swift series okay
00:33 - let's start with what a function is at
00:35 - its very core a function simply allows
00:38 - you to take a chunk of code give it a
00:40 - function name and then whenever you call
00:43 - that function name it's going to execute
00:45 - that chunk of
00:46 - code now that may seem simple but over
00:49 - the course of the next couple of videos
00:51 - you're going to see just how complex and
00:53 - Powerful functions can be functions are
00:56 - really useful because it allows us to
00:58 - break down and group our code code into
01:00 - smaller chunks and we can organize them
01:03 - so that each function or each chunk of
01:06 - code has a specific task and when you
01:08 - want to do that specific task then you
01:11 - just call that function so let's see how
01:14 - a function is defined in Swift Code and
01:17 - then we'll jump into some examples in
01:19 - our playground so here we have the
01:21 - Syntax for our basic definition of a
01:24 - function now it can get more complex
01:26 - than this because there are a lot more
01:28 - features of functions that we can use
01:30 - but we're going to explore those in the
01:32 - next couple of videos for this example
01:35 - here is your kind of basic definition of
01:38 - a function you start with the funk
01:39 - keyword that's fun NC followed by the
01:42 - function name now this function name is
01:45 - what you're going to use to call the
01:46 - function now right after the function
01:48 - name you have two parentheses or two
01:50 - rounded brackets in this basic
01:53 - definition there is nothing in between
01:55 - these two brackets no spaces nothing in
01:58 - the next two videos you're going to see
02:00 - what those brackets are used for but for
02:02 - now those brackets are just there as
02:04 - part of the definition there's nothing
02:06 - in between them and then you're going to
02:08 - have a set of curly brackets and as you
02:11 - would expect in between the curly
02:13 - brackets you would put the code for the
02:16 - function so whenever you call the
02:18 - function name that code in between those
02:20 - curly brackets that code is going to be
02:23 - executed all right let's jump into the
02:25 - playground and do some
02:27 - examples I'm going to declare a function
02:30 - that is going to add two numbers
02:33 - together and it's going to print the
02:36 - result to the console so I'm going to
02:38 - start by using the funk keyword to
02:41 - declare a function and now I have to
02:44 - have a uh function
02:46 - name so I'm going to say add two
02:53 - numbers that's my function name and
02:55 - you'll notice that I'm using the same uh
02:58 - camel case as I do for declaring
03:00 - variables where I start with a lowercase
03:03 - letter of the first word and the
03:06 - following words uses a capital letter
03:09 - then I have my two rounded brackets like
03:11 - that followed by a set of curly brackets
03:14 - like that and sometimes when you type in
03:18 - this first curly bracket or the opening
03:20 - bracket and then you press enter xcode
03:23 - will automatically add this ending curly
03:26 - bracket for
03:27 - you okay so in between the two curly
03:29 - brackets I am going to say let a = 1 let
03:35 - b = 2 and I am going to uh let C equals
03:42 - a +
03:44 - b okay and then finally we're going to
03:48 - print the result of
03:51 - C so you can see here that nothing
03:54 - actually happens because this function
03:56 - hasn't been called this code is sitting
03:59 - here if we had written this code instead
04:02 - of putting it into a function so let me
04:04 - just delete this for now like that and
04:09 - this is what we've been doing so far
04:10 - before we learned about functions we
04:12 - would just declare these constants here
04:14 - and then print C and you would see all
04:16 - of this stuff in the output now I'm just
04:18 - going to undo those two deletions so to
04:21 - wrap this code inside of a function now
04:24 - you can see nothing gets output until I
04:26 - actually call the function to execute
04:28 - this code right here
04:30 - so uh how do we call a function so in
04:33 - order to call a function you just have
04:34 - to write the function name followed by
04:36 - the two rounded brackets now because we
04:39 - don't have anything inside these two
04:41 - rounded brackets that's all we have to
04:42 - do but as you're going to learn in a
04:44 - couple of videos later um if we have
04:47 - something in between these brackets the
04:49 - calling the function would require a
04:51 - little more work but for this basic
04:54 - function we can uh invoke that function
04:56 - simply by writing its name so add to two
04:59 - numbers as you can see here autocomplete
05:01 - even suggests it so all I have to do is
05:03 - highlight that line press
05:05 - enter and what happens now we get three
05:09 - output into our console because by
05:12 - calling that function it just ran the
05:14 - code down here and I can call this
05:19 - again as many times as I'd like and
05:22 - anywhere I'd like one benefit is that if
05:24 - you need to execute a chunk of code
05:26 - several times this is a big savings
05:28 - rather than writing this code out
05:30 - multiple times I just put it inside a
05:33 - function give it a name and now I can
05:35 - invoke that piece of code Whenever I
05:37 - Call this function name like
05:40 - this so it helps you reuse code
05:43 - especially if that chunk of code is
05:45 - going to be used multiple times in your
05:47 - app you don't want to write out the same
05:49 - chunk of code multiple times in and
05:51 - around your app because it makes it
05:53 - really hard to debug for example if
05:56 - you've got an issue with this chunk of
05:58 - code and imagine if you had it repeated
06:00 - several times in your app in order to
06:02 - fix it you'd have to fix it in every
06:04 - single one of those places but if I have
06:07 - this chunk of code inside this function
06:09 - um I would only have to troubleshoot and
06:12 - debug this piece of code once here and
06:15 - as soon as I change this let's say I
06:17 - Chang this a to a two and let's say that
06:19 - fixed my code and you can see here
06:22 - wherever I call add two
06:25 - numbers the code is updated so I only
06:28 - need to update and change the code in
06:30 - one place whereas if I wrote this chunk
06:32 - of code out in multiple places in my app
06:34 - I would have to change it in all of
06:37 - those places another benefit I mentioned
06:40 - is that it lets you group this chunk of
06:42 - code that performs a specific task into
06:45 - a function that describes what that
06:48 - chunk of code does so it helps you
06:49 - organize your
06:51 - code so there is one more thing I want
06:54 - to mention about functions and that is
06:56 - about scope so same thing we learned
06:58 - about inside of Loops in terms of
07:01 - defining variables applies here as well
07:05 - so let me give you an example of what
07:07 - I'm saying so let's say I get rid of
07:10 - those two function calls and we simply
07:12 - have this function here we have these
07:15 - three constants C is obviously four
07:19 - right and inside this function I'm
07:20 - printing C so outside of my
07:24 - function let's say I want to print
07:27 - C well that is actually going to throw
07:30 - an error that doesn't work why because
07:33 - the constants and variables that you
07:36 - declare inside a function can only be
07:38 - used in the function in between these
07:41 - two curly brackets and likewise if I
07:45 - declared another function really
07:52 - quickly so inside this function I also
07:56 - cannot access the constants that I
07:58 - declared here so if I declared a
08:02 - constant like that D equal 1 I can't say
08:05 - you know uh what let e equal C minus D
08:10 - or something like that um inside this
08:13 - function it's not going to recognize
08:15 - what C is right
08:17 - here so let's get rid of this first okay
08:20 - so there you can see the error it
08:22 - doesn't know what c is because C is
08:24 - defined inside add two numbers and so it
08:28 - only recognizes C within this scope a b
08:32 - and c in fact so inside here inside this
08:35 - function I'm free to declare a again
08:38 - because it only applies Within These
08:41 - brackets like
08:42 - that so I can have a minus
08:46 - D and let's end off by printing e okay
08:52 - so the main takeaways for this lesson
08:54 - right here you've learned about what
08:56 - functions are and why they're beneficial
08:59 - you you've learned how to define a
09:00 - simple function you've learned how to
09:02 - call that function so you can execute
09:03 - the code inside of that function and
09:06 - furthermore you learned about the scope
09:08 - inside of a function and just to remind
09:11 - you about that it's that whatever you
09:14 - declare inside of the curly brackets of
09:16 - a function is only recognized and can be
09:19 - used inside of those curly brackets in
09:22 - the next video we're going to build upon
09:24 - what we learned here in this lesson and
09:26 - you're going to learn how to make
09:27 - functions even more powerful
09:30 - so thanks for watching if you like the
09:31 - video please give it a thumbs up it
09:33 - helps this video get seen by more people
09:35 - and subscribe for more thanks and I'll
09:38 - see you in the next
09:41 - [Music]
09:48 - lesson

Cleaned transcript:

hello welcome to learn Swift for beginners lesson 7 in this lesson you're going to learn about functions how to use them what they are and this is a critical part of the Swift programming language if you want to build apps with it so let's get started so here I've got a brand new xcode playground where we're going to take a look at what functions are and how to use them how to define one how to call one if you don't know how to start a new playground just go back to lesson one of this learn Swift series okay let's start with what a function is at its very core a function simply allows you to take a chunk of code give it a function name and then whenever you call that function name it's going to execute that chunk of code now that may seem simple but over the course of the next couple of videos you're going to see just how complex and Powerful functions can be functions are really useful because it allows us to break down and group our code code into smaller chunks and we can organize them so that each function or each chunk of code has a specific task and when you want to do that specific task then you just call that function so let's see how a function is defined in Swift Code and then we'll jump into some examples in our playground so here we have the Syntax for our basic definition of a function now it can get more complex than this because there are a lot more features of functions that we can use but we're going to explore those in the next couple of videos for this example here is your kind of basic definition of a function you start with the funk keyword that's fun NC followed by the function name now this function name is what you're going to use to call the function now right after the function name you have two parentheses or two rounded brackets in this basic definition there is nothing in between these two brackets no spaces nothing in the next two videos you're going to see what those brackets are used for but for now those brackets are just there as part of the definition there's nothing in between them and then you're going to have a set of curly brackets and as you would expect in between the curly brackets you would put the code for the function so whenever you call the function name that code in between those curly brackets that code is going to be executed all right let's jump into the playground and do some examples I'm going to declare a function that is going to add two numbers together and it's going to print the result to the console so I'm going to start by using the funk keyword to declare a function and now I have to have a uh function name so I'm going to say add two numbers that's my function name and you'll notice that I'm using the same uh camel case as I do for declaring variables where I start with a lowercase letter of the first word and the following words uses a capital letter then I have my two rounded brackets like that followed by a set of curly brackets like that and sometimes when you type in this first curly bracket or the opening bracket and then you press enter xcode will automatically add this ending curly bracket for you okay so in between the two curly brackets I am going to say let a = 1 let b = 2 and I am going to uh let C equals a + b okay and then finally we're going to print the result of C so you can see here that nothing actually happens because this function hasn't been called this code is sitting here if we had written this code instead of putting it into a function so let me just delete this for now like that and this is what we've been doing so far before we learned about functions we would just declare these constants here and then print C and you would see all of this stuff in the output now I'm just going to undo those two deletions so to wrap this code inside of a function now you can see nothing gets output until I actually call the function to execute this code right here so uh how do we call a function so in order to call a function you just have to write the function name followed by the two rounded brackets now because we don't have anything inside these two rounded brackets that's all we have to do but as you're going to learn in a couple of videos later um if we have something in between these brackets the calling the function would require a little more work but for this basic function we can uh invoke that function simply by writing its name so add to two numbers as you can see here autocomplete even suggests it so all I have to do is highlight that line press enter and what happens now we get three output into our console because by calling that function it just ran the code down here and I can call this again as many times as I'd like and anywhere I'd like one benefit is that if you need to execute a chunk of code several times this is a big savings rather than writing this code out multiple times I just put it inside a function give it a name and now I can invoke that piece of code Whenever I Call this function name like this so it helps you reuse code especially if that chunk of code is going to be used multiple times in your app you don't want to write out the same chunk of code multiple times in and around your app because it makes it really hard to debug for example if you've got an issue with this chunk of code and imagine if you had it repeated several times in your app in order to fix it you'd have to fix it in every single one of those places but if I have this chunk of code inside this function um I would only have to troubleshoot and debug this piece of code once here and as soon as I change this let's say I Chang this a to a two and let's say that fixed my code and you can see here wherever I call add two numbers the code is updated so I only need to update and change the code in one place whereas if I wrote this chunk of code out in multiple places in my app I would have to change it in all of those places another benefit I mentioned is that it lets you group this chunk of code that performs a specific task into a function that describes what that chunk of code does so it helps you organize your code so there is one more thing I want to mention about functions and that is about scope so same thing we learned about inside of Loops in terms of defining variables applies here as well so let me give you an example of what I'm saying so let's say I get rid of those two function calls and we simply have this function here we have these three constants C is obviously four right and inside this function I'm printing C so outside of my function let's say I want to print C well that is actually going to throw an error that doesn't work why because the constants and variables that you declare inside a function can only be used in the function in between these two curly brackets and likewise if I declared another function really quickly so inside this function I also cannot access the constants that I declared here so if I declared a constant like that D equal 1 I can't say you know uh what let e equal C minus D or something like that um inside this function it's not going to recognize what C is right here so let's get rid of this first okay so there you can see the error it doesn't know what c is because C is defined inside add two numbers and so it only recognizes C within this scope a b and c in fact so inside here inside this function I'm free to declare a again because it only applies Within These brackets like that so I can have a minus D and let's end off by printing e okay so the main takeaways for this lesson right here you've learned about what functions are and why they're beneficial you you've learned how to define a simple function you've learned how to call that function so you can execute the code inside of that function and furthermore you learned about the scope inside of a function and just to remind you about that it's that whatever you declare inside of the curly brackets of a function is only recognized and can be used inside of those curly brackets in the next video we're going to build upon what we learned here in this lesson and you're going to learn how to make functions even more powerful so thanks for watching if you like the video please give it a thumbs up it helps this video get seen by more people and subscribe for more thanks and I'll see you in the next lesson
