With timestamps:

00:00 - pay code crew in this lesson we're going
00:01 - to continue or our core data series and
00:03 - I'll show you how to create retrieve
00:04 - update and delete data from core data
00:07 - now if you've missed the previous few
00:09 - lessons I highly recommend that you go
00:11 - and check those out first one more thing
00:14 - before we begin I want to mention that
00:16 - these core data lessons are actually
00:17 - part of the database course in my CW c+
00:20 - program inside CW c plus you'll be able
00:23 - to build this travel app that uses core
00:25 - data for the list of locations as well
00:27 - as personal notes for each location all
00:30 - right now let's jump into Xcode
00:31 - alright so in this Xcode project I'm
00:33 - going to show you how to create retrieve
00:35 - update and delete data from core data
00:37 - now I did set up a lot of the UI for
00:40 - this project and I'm only gonna be
00:43 - focusing on the core data transactions
00:46 - bit and the reason for that is because
00:48 - if I showed you how to build the UI 90%
00:51 - of this lesson would have just been
00:52 - building UI with 10% being the actual
00:55 - core data bits which is the focus of
00:57 - this lesson so that's why I built it out
00:59 - but I'm gonna walk you through the UI
01:01 - work that I've done so far and I'm gonna
01:03 - show you where the missing core data
01:04 - bits are that we're gonna fill out
01:06 - together okay so first of all what data
01:09 - are we working with here so back in
01:11 - lesson 2 and less than 1 we were talking
01:13 - about a person entity same thing here
01:15 - person entity these attributes are the
01:18 - same which I've defined I've generated
01:20 - the actually before that I've set the
01:23 - code gen to manual and none that means I
01:25 - have to manually generate the subclasses
01:28 - and you can see that I have done that
01:29 - here so here's my class there's nothing
01:32 - in here and these are the properties map
01:34 - to the attributes ok so what does the UI
01:37 - look like if I go to the main dot
01:40 - storyboard you'll see that I have a
01:42 - table view which I'm going to use to
01:44 - display all of the people in our
01:46 - database and then we have an Add button
01:48 - up here which I'm going to show an alert
01:51 - or a pop-up with a text box where we can
01:53 - type in a name and that's going to add a
01:55 - new entry into our core data database
01:58 - we're going to be able to swipe each row
02:01 - to delete that person from the database
02:03 - and finally we're going to be able to
02:05 - tap on a row and pop up that alert again
02:08 - and be able to edit the name and then
02:10 - save it so that's updating data now I do
02:13 - want to mention
02:13 - that in this lesson I'm not going to
02:15 - explain how table views work and how you
02:19 - know a lot of this UI is constructed
02:21 - because we've gone through a lot of this
02:23 - stuff in previous lessons if you haven't
02:26 - seen those or you're still confused
02:27 - about table views and protocols and
02:30 - delegates and stuff like that and how
02:31 - the table view gets data from the view
02:33 - controller do visit my other lessons
02:35 - especially the 29 day beginner challenge
02:38 - which I'll link to I'll put a card up on
02:40 - the screen so let's dive into the view
02:42 - controller and let me show you some of
02:44 - the code we're gonna do retrieval first
02:47 - I'm going to show you how the table view
02:49 - gets the data and then we're going to
02:50 - hook that up to core data so this items
02:53 - property right here this is the array of
02:56 - data that is powering the table view as
02:58 - you can see now it's not set to anything
03:01 - but that's where we come in and we're
03:02 - gonna hook it up to our core data data
03:05 - so we're gonna start at the top by
03:08 - getting a reference to the managed
03:11 - object context remember from the
03:13 - previous lessons I explained that you
03:14 - don't work with the core data
03:16 - persistence store directly there is a
03:18 - layer called the managed object context
03:21 - well that you interact through to save
03:25 - and retrieve your data so how do we get
03:27 - a reference to this managed object
03:29 - context well inside the app delegate
03:32 - here you see this property for
03:34 - persistence container so we're gonna get
03:37 - a reference to this which is going to
03:39 - give us the core data persistent
03:42 - container and there's a property on this
03:44 - object which gives us the managed object
03:48 - context so up here we're gonna say UI
03:54 - application dot shared dot delegate and
03:58 - we're going to cast that as an instance
04:01 - of the app delegate and then we can
04:05 - access that property I just showed you
04:07 - called persistent container and then a
04:10 - property off of that called the view
04:14 - context this is the one we're looking
04:15 - for
04:16 - the ns-managed object context so we're
04:19 - going to keep a reference to that and
04:21 - we're going to call it context up there
04:22 - and that's going to make it easy for us
04:24 - to
04:26 - basically use the context to retrieve
04:29 - and save we're gonna be using this
04:30 - reference a lot okay so down here in the
04:34 - viewdidload this is standard hooking up
04:37 - table view stuff there is this method
04:39 - here called fetch people and the that's
04:43 - this method right here as you can see it
04:44 - doesn't do anything right now but we are
04:46 - going to fetch the data from core data
04:50 - to display in the table view alright so
04:55 - the way we do this is context dot fetch
05:00 - and you can see here that first of all
05:03 - it throws an error if it cannot fetch
05:05 - what you're asking it to fetch then it's
05:06 - going to raise an error so we do have to
05:08 - wrap this in a do catch block and handle
05:12 - that error but you'll notice that the
05:14 - other thing it accepts is a fetch
05:16 - request now we're gonna start by putting
05:19 - in a very simple fetch request to say
05:22 - retrieve all of the people objects but
05:25 - in the next lesson we're going to take a
05:27 - look at other types of requests that you
05:30 - can do to sort and filter all right so
05:33 - let's choose one of these and let's
05:35 - choose this one right here I don't think
05:37 - it really matters right now and I
05:41 - pointed this out to you in Lesson one or
05:45 - two but you can see here that it's got a
05:49 - static or type method here called fetch
05:52 - request and this actually returns a
05:55 - fetch request for all of the person
05:59 - entities in core data so this is the
06:02 - method that we're going to call of the
06:04 - person class to generate a fetch request
06:07 - that we're going to pass into the
06:10 - managed view context so let's take a
06:12 - look at how that works
06:13 - so since it's a type method I don't have
06:15 - to declare a new instance of person I
06:17 - just called person dot fetch request
06:20 - like that alright so I'm passing in a
06:23 - request to grab all of the person
06:25 - objects in core data and we can either
06:30 - you know we can either do the try
06:32 - keyword like that to not care if any
06:35 - errors get raised or we can actually
06:37 - handle the error properly
06:39 - so you know we're gonna do a do catch
06:43 - block like this and again not going to
06:45 - explain or cover this in depth right
06:47 - here since this lesson is sort of a
06:50 - little more advanced so essentially we
06:53 - are trying to try to fetch this so we
06:59 - are going to assign the results it's
07:01 - going to be in a ray of person objects
07:04 - we're going to assign it to this
07:05 - property up here so self-thought items
07:10 - equals we're gonna try so after all of
07:13 - the items get fetched then we assign it
07:15 - to this array we got to tell the table
07:17 - view to refresh or reload its data so
07:20 - that's what we're gonna do here table
07:23 - view dot reload data now I'm going to do
07:28 - this in the main queue because sometimes
07:31 - we're going to be calling this fetch
07:33 - people method from a background thread
07:36 - so the way we do that is we use this
07:38 - patch cue domain a sink and this is
07:41 - going to because this is UI work when
07:45 - you reload the table view it's
07:47 - essentially going to fire all the Loews
07:50 - methods to grab the cells and stuff like
07:52 - that and that's UI work so we want to
07:55 - make sure that we're doing that in the
07:56 - main thread and just in case you're not
07:58 - sure about why it's really the main
08:00 - thread that should be updating and
08:01 - handling the UI when you start trying to
08:04 - do that from the background than a
08:05 - background process or thread then you
08:07 - might start getting performance impact
08:11 - or hits ok so just from doing that we
08:16 - should be able to see something because
08:18 - I do have a single person object inside
08:21 - core data right now so if I run the
08:24 - project you're going to see that it
08:31 - indeed goes to fetch data and we have
08:34 - one entry and it's just placeholder
08:37 - right now yeah let's just ignore that
08:39 - for a second the reason why it says
08:44 - placeholder is because for this cell for
08:47 - row at method I just set the text of the
08:52 - for that row two placeholder but we're
08:54 - going to I guess we could change that
08:56 - right now so we're going to get the
08:59 - person from the array let person equals
09:03 - self thought items and we're going to
09:06 - pass in index path row and that's going
09:09 - to give us the person and then in here
09:11 - we're gonna say person dot name this is
09:19 - an optional so I'm just going to force
09:21 - and wrap it and we'll grab the name so
09:23 - let's run it again and instead of
09:26 - placeholder text we actually see the
09:28 - name of the person object alright so now
09:32 - that's fetching data from core data it's
09:35 - as easy as that
09:35 - except that right now you can only fetch
09:38 - all of all of it you don't know how to
09:41 - sort of sort and filter but we're gonna
09:43 - cover that in the future all right now
09:45 - for adding data how do we add data right
09:48 - now when we click this button I'm just
09:51 - popping up a pop-up to ask for a the
09:54 - name of the person and we're gonna
09:55 - create that new person object and add it
09:58 - to core data all right so that's this
10:01 - button handler right here add tapped so
10:04 - all I'm doing here is creating a new
10:06 - pop-up you can see here I'm adding a
10:09 - text field and then I am writing a
10:13 - submit button that says add alright and
10:16 - when that Add button gets tapped on so
10:19 - go back here you know they'll fill in a
10:21 - name like Joe when this Add button gets
10:24 - tapped on this is the code that's going
10:26 - to get run alright so how do we access
10:30 - the text in this field
10:31 - well the alert since we added a text
10:35 - field to the alert through this add text
10:37 - field method we can access the array of
10:40 - text fields like this alert dot text
10:42 - fields and we can access the first one
10:45 - because there only is one we only did
10:46 - this once right so that's our text field
10:49 - right here and here we're going to
10:51 - create a new person object and then
10:53 - we're going to assign the name and the
10:55 - age and the gender and stuff like that
10:57 - alright so let new person equals
11:03 - and we're gonna try to create a new
11:04 - person object like usual
11:07 - by using these rounded brackets but
11:08 - you'll see here that because this is a
11:11 - subclass of NS managed object right
11:16 - that's what allows it to be saved into
11:18 - core data like we had talked about
11:20 - because that's the case you'll see that
11:25 - I have this option right here all right
11:28 - to create this person object in a
11:30 - specific context right and as SEPs a
11:33 - parameter ns-managed object context well
11:35 - we're going to pass in the context that
11:42 - self-thought context we're gonna pass in
11:45 - this context up here alright that's how
11:49 - we're interacting with our core data
11:50 - persistent container alright so where
11:53 - was that code right here so just like
11:56 - that we've created a new person object
11:58 - in that context and now we're gonna set
12:00 - some properties for it so new person dot
12:03 - name is equal to text field dot txt and
12:07 - this is that text field right there in
12:10 - the pop-up and for the age I'm just
12:14 - gonna set it to some arbitrary number
12:17 - the same thing with gender but I assume
12:20 - that you would you would ask for all of
12:22 - this data you know when you're adding a
12:24 - new person okay so just creating a
12:27 - person object in the context is not
12:30 - enough to save the data you actually
12:32 - have to save it if you don't save it
12:35 - then the next time you run it you won't
12:38 - actually find this person anymore it
12:39 - doesn't get saved into core data so the
12:42 - way you save the data is through the
12:45 - managed object context so self-thought
12:48 - context dot save and that's simply it
12:52 - notice that this method also throws
12:54 - right so you can do you can you can wrap
12:57 - it in a do catch block and you know try
13:00 - to catch an error if there's a problem
13:03 - saving it so you have to put a try
13:05 - keyword in front of the throw method you
13:07 - can do this and try to catch the mere
13:08 - error if there's a save data error or
13:12 - you can
13:13 - simply not care if there are errors or
13:17 - not and do that if this were an actual
13:21 - app I would definitely try to catch all
13:23 - the hairs and respond to and let the
13:26 - user know that there was an error in
13:27 - saving the data and all of that
13:28 - all right so saving the data and then we
13:31 - have to refresh the table view because
13:33 - we've all we've done now is create a new
13:38 - person object and we've saved it to core
13:40 - data but that doesn't change this array
13:45 - which the table view is is reading off
13:47 - of right so I am going to call the fetch
13:53 - people method right here a self-thought
13:58 - fetch people and just in case you don't
14:01 - remember about this fetch people method
14:03 - if I scroll up here it all it does is it
14:07 - hits the managed object context passing
14:10 - in a person fetch request to grab all of
14:12 - the people object back assigns it to
14:15 - this property which the table view is
14:16 - reading off of and then calls table view
14:19 - dot reload to reload the data and good
14:22 - thing that this puts it on the main
14:24 - thread because we're calling it from a
14:28 - background thread right here this is a
14:31 - button handler from the submit button
14:32 - okay last thing to do is add the button
14:34 - to the alert and then to present the
14:36 - alert so let's run this code and we
14:40 - should be able to add new objects to our
14:43 - database so let's say Joe when I hit add
14:46 - what's going to happen it's going to
14:48 - create a new person object in our
14:50 - managed object context it's gonna save
14:53 - the context thereby saving the object
14:55 - into core data and then it's going to
14:56 - call fetch to fetch that data back from
14:59 - core data fetch that fetch Joe back from
15:02 - core data so add boom we got Joe nice
15:05 - alright so now let's do delete so I I
15:08 - did this it's just a swipe action on the
15:13 - table view row it's actually very easy
15:15 - to do down where was it right here
15:20 - trailing swipe action so that's what
15:23 - we're configuring so we're going to
15:24 - create a new swipe action all it is is a
15:26 - UI
15:27 - contextual action and the style is
15:30 - destructive since it's going to be a
15:31 - delete function the title is delete and
15:34 - then here is the handler the code for
15:38 - what happens when you trigger that swipe
15:40 - action so first let's get a reference to
15:43 - the person object that we want to remove
15:45 - so the lent person to remove equal self
15:51 - thought items all right and as a
15:54 - parameter it tells you which row was
15:56 - swiped on here so index path row yeah
16:02 - that's going to give us the person to
16:03 - remove this is optional so let's don't
16:07 - run and wrap that okay so now actually
16:09 - to remove the person and again we do
16:12 - these core data functions through the
16:14 - managed object context so self dot
16:17 - context dot actually delete object and
16:22 - you just pass in the object so here
16:24 - we're gonna pass in person to remove and
16:26 - again you have to save or else it's not
16:29 - going to take effect so the context dot
16:32 - save again
16:33 - it throws so you're gonna wrap this in a
16:38 - do catch and catch that error if there
16:41 - was an error in deleting in the deletion
16:46 - save the data and then reflect the data
16:49 - here self dot fetch people
16:57 - all right so let's run this and test
17:00 - that out so let's delete Joe delete so
17:05 - he's gone and if I rerun my app you'll
17:12 - see that we only have Ted ok so we can
17:15 - add another person Sammy to replace Joe
17:21 - okay so now the last thing is did select
17:24 - row when we let's say select Sammy all
17:27 - I'm doing here is throwing up a pop up
17:29 - the same idea with a text field let's
17:32 - take a look at the code we have here did
17:34 - select row here I'm just getting the
17:38 - person that was selected through this
17:40 - parameter that would that indicates
17:43 - which row was tapped on and then I'm
17:45 - creating an alert I'm adding a text
17:47 - field and I am getting a reference to
17:51 - that text field from here and I'm pre
17:54 - loading the person's name alright the
17:57 - selected person pre loading his or her
17:59 - name into the text field so that when
18:02 - when it brings up the text field we have
18:04 - the existing name in there already and
18:07 - then I configured a Save button so you
18:11 - can see here the handler when that gets
18:14 - tapped that is where we are going to
18:16 - edit the name so the selected person we
18:23 - got a reference to it up there already
18:25 - dot name is equal to whatever name is in
18:30 - the text field now you know assuming the
18:32 - person did actually change the name and
18:34 - again save the data
18:48 - and then finally refresh refresh the
18:52 - data so let's run this code right now oh
18:59 - and the last thing I did was add the
19:02 - Save button to the alert and then
19:03 - present the alert when upon tapping of a
19:06 - row
19:07 - okay so let's tap on Sammy and let's
19:09 - save save Sammy as Jo
19:13 - so now when I relaunch the app you can
19:16 - see that it's Ted and Jo
19:19 - so just to do a quick recap on all four
19:21 - of the operations we talked about in
19:24 - terms of fetching you call the fetch
19:27 - method of the managed object context and
19:30 - you pass in a fetch request now that
19:32 - could be a fetch request for all of the
19:34 - objects of that type or it could be one
19:37 - that's sorted and filtered upon which
19:39 - you'll learn in the future video in
19:42 - terms of inserting people or or adding
19:44 - new data what you do is you create a new
19:48 - object in the context right and then you
19:52 - call save and then for deleting you call
19:59 - the delete method of the context and you
20:01 - pass in the object you want to delete
20:03 - from core data and then you have to
20:04 - remember to save it and finally for
20:07 - updating you simply change whatever you
20:11 - want to change on that object and then
20:14 - you save it alright so now you learned
20:17 - how to create retrieve update and delete
20:19 - data in core data now I have a question
20:22 - for you
20:22 - now that you have a basic understanding
20:24 - about how to use core data is it easier
20:27 - or harder than you thought let me know
20:29 - by leaving a quick comment below and
20:30 - lastly if you enjoy this video please
20:32 - give it a thumbs up it's gonna help the
20:34 - YouTube algorithm give this video more
20:35 - exposure and I really really appreciate
20:37 - that so thank you in the next lesson
20:39 - you'll learn how to sort and filter the
20:41 - results that you get back from core data
20:42 - alright I'll see you there

Cleaned transcript:

pay code crew in this lesson we're going to continue or our core data series and I'll show you how to create retrieve update and delete data from core data now if you've missed the previous few lessons I highly recommend that you go and check those out first one more thing before we begin I want to mention that these core data lessons are actually part of the database course in my CW c+ program inside CW c plus you'll be able to build this travel app that uses core data for the list of locations as well as personal notes for each location all right now let's jump into Xcode alright so in this Xcode project I'm going to show you how to create retrieve update and delete data from core data now I did set up a lot of the UI for this project and I'm only gonna be focusing on the core data transactions bit and the reason for that is because if I showed you how to build the UI 90% of this lesson would have just been building UI with 10% being the actual core data bits which is the focus of this lesson so that's why I built it out but I'm gonna walk you through the UI work that I've done so far and I'm gonna show you where the missing core data bits are that we're gonna fill out together okay so first of all what data are we working with here so back in lesson 2 and less than 1 we were talking about a person entity same thing here person entity these attributes are the same which I've defined I've generated the actually before that I've set the code gen to manual and none that means I have to manually generate the subclasses and you can see that I have done that here so here's my class there's nothing in here and these are the properties map to the attributes ok so what does the UI look like if I go to the main dot storyboard you'll see that I have a table view which I'm going to use to display all of the people in our database and then we have an Add button up here which I'm going to show an alert or a popup with a text box where we can type in a name and that's going to add a new entry into our core data database we're going to be able to swipe each row to delete that person from the database and finally we're going to be able to tap on a row and pop up that alert again and be able to edit the name and then save it so that's updating data now I do want to mention that in this lesson I'm not going to explain how table views work and how you know a lot of this UI is constructed because we've gone through a lot of this stuff in previous lessons if you haven't seen those or you're still confused about table views and protocols and delegates and stuff like that and how the table view gets data from the view controller do visit my other lessons especially the 29 day beginner challenge which I'll link to I'll put a card up on the screen so let's dive into the view controller and let me show you some of the code we're gonna do retrieval first I'm going to show you how the table view gets the data and then we're going to hook that up to core data so this items property right here this is the array of data that is powering the table view as you can see now it's not set to anything but that's where we come in and we're gonna hook it up to our core data data so we're gonna start at the top by getting a reference to the managed object context remember from the previous lessons I explained that you don't work with the core data persistence store directly there is a layer called the managed object context well that you interact through to save and retrieve your data so how do we get a reference to this managed object context well inside the app delegate here you see this property for persistence container so we're gonna get a reference to this which is going to give us the core data persistent container and there's a property on this object which gives us the managed object context so up here we're gonna say UI application dot shared dot delegate and we're going to cast that as an instance of the app delegate and then we can access that property I just showed you called persistent container and then a property off of that called the view context this is the one we're looking for the nsmanaged object context so we're going to keep a reference to that and we're going to call it context up there and that's going to make it easy for us to basically use the context to retrieve and save we're gonna be using this reference a lot okay so down here in the viewdidload this is standard hooking up table view stuff there is this method here called fetch people and the that's this method right here as you can see it doesn't do anything right now but we are going to fetch the data from core data to display in the table view alright so the way we do this is context dot fetch and you can see here that first of all it throws an error if it cannot fetch what you're asking it to fetch then it's going to raise an error so we do have to wrap this in a do catch block and handle that error but you'll notice that the other thing it accepts is a fetch request now we're gonna start by putting in a very simple fetch request to say retrieve all of the people objects but in the next lesson we're going to take a look at other types of requests that you can do to sort and filter all right so let's choose one of these and let's choose this one right here I don't think it really matters right now and I pointed this out to you in Lesson one or two but you can see here that it's got a static or type method here called fetch request and this actually returns a fetch request for all of the person entities in core data so this is the method that we're going to call of the person class to generate a fetch request that we're going to pass into the managed view context so let's take a look at how that works so since it's a type method I don't have to declare a new instance of person I just called person dot fetch request like that alright so I'm passing in a request to grab all of the person objects in core data and we can either you know we can either do the try keyword like that to not care if any errors get raised or we can actually handle the error properly so you know we're gonna do a do catch block like this and again not going to explain or cover this in depth right here since this lesson is sort of a little more advanced so essentially we are trying to try to fetch this so we are going to assign the results it's going to be in a ray of person objects we're going to assign it to this property up here so selfthought items equals we're gonna try so after all of the items get fetched then we assign it to this array we got to tell the table view to refresh or reload its data so that's what we're gonna do here table view dot reload data now I'm going to do this in the main queue because sometimes we're going to be calling this fetch people method from a background thread so the way we do that is we use this patch cue domain a sink and this is going to because this is UI work when you reload the table view it's essentially going to fire all the Loews methods to grab the cells and stuff like that and that's UI work so we want to make sure that we're doing that in the main thread and just in case you're not sure about why it's really the main thread that should be updating and handling the UI when you start trying to do that from the background than a background process or thread then you might start getting performance impact or hits ok so just from doing that we should be able to see something because I do have a single person object inside core data right now so if I run the project you're going to see that it indeed goes to fetch data and we have one entry and it's just placeholder right now yeah let's just ignore that for a second the reason why it says placeholder is because for this cell for row at method I just set the text of the for that row two placeholder but we're going to I guess we could change that right now so we're going to get the person from the array let person equals self thought items and we're going to pass in index path row and that's going to give us the person and then in here we're gonna say person dot name this is an optional so I'm just going to force and wrap it and we'll grab the name so let's run it again and instead of placeholder text we actually see the name of the person object alright so now that's fetching data from core data it's as easy as that except that right now you can only fetch all of all of it you don't know how to sort of sort and filter but we're gonna cover that in the future all right now for adding data how do we add data right now when we click this button I'm just popping up a popup to ask for a the name of the person and we're gonna create that new person object and add it to core data all right so that's this button handler right here add tapped so all I'm doing here is creating a new popup you can see here I'm adding a text field and then I am writing a submit button that says add alright and when that Add button gets tapped on so go back here you know they'll fill in a name like Joe when this Add button gets tapped on this is the code that's going to get run alright so how do we access the text in this field well the alert since we added a text field to the alert through this add text field method we can access the array of text fields like this alert dot text fields and we can access the first one because there only is one we only did this once right so that's our text field right here and here we're going to create a new person object and then we're going to assign the name and the age and the gender and stuff like that alright so let new person equals and we're gonna try to create a new person object like usual by using these rounded brackets but you'll see here that because this is a subclass of NS managed object right that's what allows it to be saved into core data like we had talked about because that's the case you'll see that I have this option right here all right to create this person object in a specific context right and as SEPs a parameter nsmanaged object context well we're going to pass in the context that selfthought context we're gonna pass in this context up here alright that's how we're interacting with our core data persistent container alright so where was that code right here so just like that we've created a new person object in that context and now we're gonna set some properties for it so new person dot name is equal to text field dot txt and this is that text field right there in the popup and for the age I'm just gonna set it to some arbitrary number the same thing with gender but I assume that you would you would ask for all of this data you know when you're adding a new person okay so just creating a person object in the context is not enough to save the data you actually have to save it if you don't save it then the next time you run it you won't actually find this person anymore it doesn't get saved into core data so the way you save the data is through the managed object context so selfthought context dot save and that's simply it notice that this method also throws right so you can do you can you can wrap it in a do catch block and you know try to catch an error if there's a problem saving it so you have to put a try keyword in front of the throw method you can do this and try to catch the mere error if there's a save data error or you can simply not care if there are errors or not and do that if this were an actual app I would definitely try to catch all the hairs and respond to and let the user know that there was an error in saving the data and all of that all right so saving the data and then we have to refresh the table view because we've all we've done now is create a new person object and we've saved it to core data but that doesn't change this array which the table view is is reading off of right so I am going to call the fetch people method right here a selfthought fetch people and just in case you don't remember about this fetch people method if I scroll up here it all it does is it hits the managed object context passing in a person fetch request to grab all of the people object back assigns it to this property which the table view is reading off of and then calls table view dot reload to reload the data and good thing that this puts it on the main thread because we're calling it from a background thread right here this is a button handler from the submit button okay last thing to do is add the button to the alert and then to present the alert so let's run this code and we should be able to add new objects to our database so let's say Joe when I hit add what's going to happen it's going to create a new person object in our managed object context it's gonna save the context thereby saving the object into core data and then it's going to call fetch to fetch that data back from core data fetch that fetch Joe back from core data so add boom we got Joe nice alright so now let's do delete so I I did this it's just a swipe action on the table view row it's actually very easy to do down where was it right here trailing swipe action so that's what we're configuring so we're going to create a new swipe action all it is is a UI contextual action and the style is destructive since it's going to be a delete function the title is delete and then here is the handler the code for what happens when you trigger that swipe action so first let's get a reference to the person object that we want to remove so the lent person to remove equal self thought items all right and as a parameter it tells you which row was swiped on here so index path row yeah that's going to give us the person to remove this is optional so let's don't run and wrap that okay so now actually to remove the person and again we do these core data functions through the managed object context so self dot context dot actually delete object and you just pass in the object so here we're gonna pass in person to remove and again you have to save or else it's not going to take effect so the context dot save again it throws so you're gonna wrap this in a do catch and catch that error if there was an error in deleting in the deletion save the data and then reflect the data here self dot fetch people all right so let's run this and test that out so let's delete Joe delete so he's gone and if I rerun my app you'll see that we only have Ted ok so we can add another person Sammy to replace Joe okay so now the last thing is did select row when we let's say select Sammy all I'm doing here is throwing up a pop up the same idea with a text field let's take a look at the code we have here did select row here I'm just getting the person that was selected through this parameter that would that indicates which row was tapped on and then I'm creating an alert I'm adding a text field and I am getting a reference to that text field from here and I'm pre loading the person's name alright the selected person pre loading his or her name into the text field so that when when it brings up the text field we have the existing name in there already and then I configured a Save button so you can see here the handler when that gets tapped that is where we are going to edit the name so the selected person we got a reference to it up there already dot name is equal to whatever name is in the text field now you know assuming the person did actually change the name and again save the data and then finally refresh refresh the data so let's run this code right now oh and the last thing I did was add the Save button to the alert and then present the alert when upon tapping of a row okay so let's tap on Sammy and let's save save Sammy as Jo so now when I relaunch the app you can see that it's Ted and Jo so just to do a quick recap on all four of the operations we talked about in terms of fetching you call the fetch method of the managed object context and you pass in a fetch request now that could be a fetch request for all of the objects of that type or it could be one that's sorted and filtered upon which you'll learn in the future video in terms of inserting people or or adding new data what you do is you create a new object in the context right and then you call save and then for deleting you call the delete method of the context and you pass in the object you want to delete from core data and then you have to remember to save it and finally for updating you simply change whatever you want to change on that object and then you save it alright so now you learned how to create retrieve update and delete data in core data now I have a question for you now that you have a basic understanding about how to use core data is it easier or harder than you thought let me know by leaving a quick comment below and lastly if you enjoy this video please give it a thumbs up it's gonna help the YouTube algorithm give this video more exposure and I really really appreciate that so thank you in the next lesson you'll learn how to sort and filter the results that you get back from core data alright I'll see you there
