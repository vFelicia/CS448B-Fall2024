With timestamps:

00:00 - hello and welcome it's chris here about two 
months ago my friend stuart lynch showed you  
00:03 - how to build a mac os task bar app now 
in the next three lessons of this series  
00:09 - stuart will show you how to turn that app 
into an ios app an ios widget and a watch os  
00:16 - app now this is part two of that series 
if you enjoy this video i highly recommend  
00:21 - that you check out stewart's own youtube 
channel as well all right let's dive in hi  
00:26 - my name's stuart lynch and in this video you'll 
learn how to extend the dad jokes application that  
00:32 - we prepared in the video on creating a menu 
bar app to offer an iphone and ipad version  
00:38 - we'll start by adding a copy button to the mac 
app so that you can share those jokes with others  
00:44 - then we'll create an ios target so we can run 
the app on an iphone or an ipad we'll learn about  
00:51 - target membership so that we don't have to write a 
lot of redundant code and share it between targets  
00:56 - and we'll use compiler conditionals to adjust 
the code based on the operating system in use  
01:02 - we'll also ensure that our app runs and 
looks great on both an iphone and an ipad
01:11 - i highly recommend that you watch the previous 
video in this series as this one builds on that  
01:16 - one and depends on it if you completed that mac 
version you can continue on from there or you can  
01:22 - use the completed version of that first video that 
you can download from the link in the description  
01:28 - so before we move on to adding that 
iphone app let's add that menu bar apps  
01:33 - copy button i want to add a copy button to 
the menu bar view so that we can copy that  
01:39 - great joke and perhaps paste it into a text or an 
email to someone this is really quite easy to do  
01:46 - within the joke view we'll add that copy 
button after we display the joke string  
01:52 - so within the else block embed the joke 
string in a v stack and follow that with an  
01:59 - h stack start with a spacer and this is going 
to push a button to the right and that button  
02:06 - will be one that contains a text view for 
the label and we'll just use the word copy
02:15 - and since i added the button in let's 
change that preview height to 255.
02:24 - for the action we'll first create a pasteboard 
property and that's an nspaceboard.generalproperty
02:34 - next we'll clear its contents 
using pasteboard clear contents
02:41 - then we can set the string in the 
pasteboard to the joke string for type
02:49 - dot nspaceboard.pasteboardtype.com
02:57 - we've added more height to our little 
menu now so though it's still longer  
03:01 - you still see it here in the preview we'll want 
to increase the length so that our texturing does  
03:06 - not get minimized beyond readability for 
those longer jokes so we'll return to the  
03:13 - application menu file and increase the 
height there to the frame height of 255.
03:24 - we can test this out now by building and running
03:30 - when i tap on that dad jokes icon in the menu 
bar now i see that my joke appears with that  
03:35 - copy button below it i can tap on that button and 
then if i bring up a text editor i can paste into  
03:45 - it and see that the joke that was presented 
in the app gets pasted into the page great
03:56 - well before we move on i've 
been using source control for  
03:59 - this project so let's commit our changes to get
04:05 - now i'm going to start this new ios app now so 
i want to create a new branch and in xcode 13  
04:12 - we have a faster way now to create new branches 
from the current branch we can do it directly  
04:17 - now from the source code item here so let's 
do that and we'll call the branch ios app
04:27 - and we'll create that branch so now 
on to the main part of this lesson  
04:32 - we want to create an iphone app but we also 
wanted to utilize a lot of the code that we  
04:36 - already created in that first video because 
much of it it will be definitely reusable  
04:42 - so let's organize our files 
first before we do that
04:48 - there are four files that we can use the api 
service class our joke model the joke type enum  
04:59 - and we'll even be able to reuse this 
joke view as we want to have the  
05:02 - basic same display on the iphone we'll just 
change some sizes but more about that in a  
05:08 - minute so to organize our content better 
let's create a new folder called shared
05:16 - and i'm going to move it outside 
of our dad joke folder or target  
05:21 - and onto its own above and i'm going to now 
move all four of those files into that folder
05:31 - now our iphone app is going to be an independent 
application so we'll need a new target for this  
05:39 - from the file menu choose new target  
05:43 - and make sure you click on the ios 
tab and search for and select app
05:51 - name that target dad jokes 
ios and then click on finish
05:58 - this creates a new folder grouping with 
a new app entry point and a new content  
06:04 - view and assets folder for this target now each 
target has its own entry point and that's the  
06:11 - file marked with app main what i like to do is 
to first rename the entry point for our mac app  
06:18 - as mac macentry.swift don't change the struct 
name just the file name in the navigator
06:27 - after you do that you can rename the 
start page for the ios app as ios entry
06:37 - now let's return to that shared folder 
and reveal the file inspector and what  
06:43 - we want to do is to assign the dad jokes ios as an 
additional target membership for those four files
06:52 - this means that these files are going 
to be accessible to our new target
06:59 - now i've provided some new assets for 
this target so open the assets folder for  
07:04 - the target and delete the app icon folder 
and replace it with the one that's provided
07:15 - copy also the launch screen asset into it
07:21 - now create a new file and search for 
launch screen and add it to the ios target
07:32 - delete the text label that's 
there and replace it with  
07:36 - an image that is that launch 
screen that we uploaded
07:44 - set the constraints so that it's horizontally and 
vertically adjusted to the center of the screen
07:52 - now i want to use this launch screen 
storyboard as the launch screen for my app  
07:57 - so we'll select the dad jokes ios target and set 
the launch screen file to this new launch screen
08:08 - now i want all of my app targets to have the same 
display name which is dad jokes so for the display  
08:15 - name we'll just add dad jokes instead next we 
want to restrict the rotation on an iphone to  
08:22 - always be portrait we'll allow the ipad to go 
both ways but the iphone portrait only so on the  
08:30 - info tab in the supported interface orientations 
for iphone remove both of the landscape versions
08:43 - the shared joke view displays the stuart 
lynch icon that is currently used on the  
08:48 - mac app it's a 1x image only so i'm going 
to fix that up by adding a 2x and a 3x image
08:58 - and i'll also be able to 
use this in my iphone app so  
09:01 - i'm going to replace the image 
by all three of those provided
09:09 - back in the shared folder i'm 
going to create a new asset catalog
09:15 - i'll call it shared assets
09:21 - and then i'm going to cut the 
stuart lynch image out of the mac  
09:24 - only target and paste it here into this shared one
09:32 - and now make sure that you also set 
the target membership of this entire  
09:36 - catalog to be both of our targets now so 
that this image will be available to both
09:45 - now it may very well be that our new image 
is not square so let's open that joke view  
09:50 - for now remember it's still being used by the 
mac app and shortly will be for the ios app
09:58 - and i'm going to set an aspect 
ratio where the content mode is  
10:02 - fit and then i'm going to remove the height in 
the frame and just leave it as a width of 60.
10:17 - so everything is now still good for the mac 
menu bar app i'm going to change the scheme  
10:23 - now to a dad joke ios and i'm going 
to pick a device like an iphone 13 pro
10:33 - so essentially now we're working on the iphone 
app now i'm going to run into some problems and  
10:40 - the biggest one is that this view uses 
the ns paste board and that's a mac os  
10:45 - option only you get this error that you can't find 
ns pasteboard because it's not available to ios  
10:52 - on ios it's called the ui pasteboard so we'll need 
to use a compiler conditional directive to check  
11:00 - what the os is and we can do that by surrounding 
this action with a pound if or hashtag if  
11:09 - depending on how you want to pronounce that os 
being mac os and then another hashtag and if  
11:18 - so now this will only be displayed if 
we're on a mac well there is an equivalent  
11:25 - of the ns pasteboard for the iphone as i said 
it's ui pasteboard so we can add a hashtag else  
11:34 - and then the corresponding 
pasteboard for ios is ui pasteboard
11:42 - we can add to that pasteboard just by assigning 
our joke string to the pasteboards string property
11:50 - and if we reset the preview now we 
see the iphone 13 pro is displayed
11:58 - well we want to incorporate this joke view into 
our view the current content view which is our  
12:03 - ios target just like we did when we embedded 
it in the application menu in our mac app but  
12:10 - let's fix some other things up first 
to make the button stand out a bit more  
12:16 - we can set the button style on the 
v-stack to a bordered button style
12:23 - this won't affect the mac version at 
all it's basically ignored by the mac
12:31 - it turns out here that the frame size i set 
here is actually redundant so i can remove it  
12:36 - but because i have a preview frame set 
to 255 the joke string is compressed well  
12:43 - we can fix that in the preview by adding 
another os conditional in the preview this time  
12:50 - and present the view with 
no frame if the os is ios  
12:57 - else we'll use the other one for 
the mac os that does set the frame
13:03 - that's looking better
13:08 - there are some more things that i want 
to fix up though for this ios version  
13:12 - i want to have a larger image and i want 
to present that joke with larger text as  
13:18 - there's more room and the easy one to do is to 
fix that copy button so that it's bordered so  
13:27 - fix that copy button by adding a bordered style
13:34 - to adjust the width i'll create a 
computed property at the top of the struct  
13:38 - and i'm going to call it image width of type 
cg float and i'll do another os conditional  
13:45 - check so that if the os is mac os we'll 
return a width of 60 else we'll return 120
13:57 - and then we can replace the 
frame width with image width
14:07 - i also want to increase the font size if we're 
on the iphone or ipad so i'm going to create a  
14:12 - similar computed property but call it font that is 
of type font and i'll return body if it's mac os
14:24 - and then else we must be on 
ios i'm going to return title
14:34 - and then we can add a font 
property to where we display  
14:37 - our joke string just before 
the minimum scale factor
14:42 - this is looking pretty good now
14:48 - we can now finally update the view that is 
presented when we present our ios version  
14:53 - and that's the content view let's rename that to 
ios joke view making sure that you also select  
15:02 - the comment to be renamed and afterwards 
change that preview provider name as well
15:13 - remove that text view and 
replace it with a navigation view  
15:17 - that will display our shared joke view
15:23 - add a navigation title of dad jokes
15:29 - and since we're allowing this to be displayed 
on an iphone and an ipad because we have  
15:35 - a navigation view i want to remove that 
splitting that happens on an ipad navigation  
15:40 - so i'm going to add a navigation style of stat
15:47 - let's test this now in the simulator
15:52 - we see that it functions basically 
the same way as the menu bar app now  
15:56 - but the text is much larger on the iphone
16:00 - and i have a copy button 
here so let's copy this joke
16:06 - now if i go to an app where i can paste 
in the text i'll be able to verify that  
16:12 - so let me open this fake messages 
app here on the simulator
16:19 - and i'm going to paste in that joke to a message 
to this kb character here whoever that is
16:28 - great that works
16:33 - let's also test out on an ipad if we 
choose for example the ipad air and run
16:53 - i see that i can rotate my 
screen and it all just works  
16:58 - however i don't really like this when 
the joke expands to the entire width  
17:03 - i'd rather keep it a little bit more 
confined so let's try and fix that
17:10 - back in the joke view i want to set the width 
of the screen to be a maximum of the device with  
17:18 - -24 padding which will handle the iphone 
because the width isn't going to change  
17:23 - because the rotation is restricted but on 
the ipad i want to limit that to a maximum of  
17:30 - 600 i don't want to do anything if it's on 
the mac os i just want to leave it alone  
17:38 - so i'm going to create one more computed 
property in joke view that i'll call frame width  
17:45 - which is a cg float and i'm going to conditionally 
return different values based on the os  
17:53 - so if the os is mac os i'll 
return 205 which we had before  
18:00 - and that'll give us some 
padding to our copy button
18:06 - else i'll return the minimum of the ui screen 
dot main dot bounds dot size dot width minus  
18:16 - 20 for padding and that's going to handle the 
iphone and 600 for both orientations of my ipad
18:29 - and then finally then i can set 
the frame on that entire v-stack  
18:34 - to be the frame where the width 
is our new computed frame width
18:40 - let's test once more on all three devices now
18:45 - first the ipad
18:49 - looks great in both orientations
18:56 - let's bring up the iphone
19:01 - yes still looks good
19:06 - and finally just to make sure that 
we've not broken anything on the mac app  
19:10 - we need to test this out too
19:23 - and it looks great as well
19:27 - so make sure you commit your changes because 
in the next video in this series we'll create  
19:33 - a new branch and add a widget to our ios version 
so that we can see a random joke presented to  
19:39 - us on our iphone or ipad home screen at regular 
intervals throughout the day thanks for watching

Cleaned transcript:

hello and welcome it's chris here about two months ago my friend stuart lynch showed you how to build a mac os task bar app now in the next three lessons of this series stuart will show you how to turn that app into an ios app an ios widget and a watch os app now this is part two of that series if you enjoy this video i highly recommend that you check out stewart's own youtube channel as well all right let's dive in hi my name's stuart lynch and in this video you'll learn how to extend the dad jokes application that we prepared in the video on creating a menu bar app to offer an iphone and ipad version we'll start by adding a copy button to the mac app so that you can share those jokes with others then we'll create an ios target so we can run the app on an iphone or an ipad we'll learn about target membership so that we don't have to write a lot of redundant code and share it between targets and we'll use compiler conditionals to adjust the code based on the operating system in use we'll also ensure that our app runs and looks great on both an iphone and an ipad i highly recommend that you watch the previous video in this series as this one builds on that one and depends on it if you completed that mac version you can continue on from there or you can use the completed version of that first video that you can download from the link in the description so before we move on to adding that iphone app let's add that menu bar apps copy button i want to add a copy button to the menu bar view so that we can copy that great joke and perhaps paste it into a text or an email to someone this is really quite easy to do within the joke view we'll add that copy button after we display the joke string so within the else block embed the joke string in a v stack and follow that with an h stack start with a spacer and this is going to push a button to the right and that button will be one that contains a text view for the label and we'll just use the word copy and since i added the button in let's change that preview height to 255. for the action we'll first create a pasteboard property and that's an nspaceboard.generalproperty next we'll clear its contents using pasteboard clear contents then we can set the string in the pasteboard to the joke string for type dot nspaceboard.pasteboardtype.com we've added more height to our little menu now so though it's still longer you still see it here in the preview we'll want to increase the length so that our texturing does not get minimized beyond readability for those longer jokes so we'll return to the application menu file and increase the height there to the frame height of 255. we can test this out now by building and running when i tap on that dad jokes icon in the menu bar now i see that my joke appears with that copy button below it i can tap on that button and then if i bring up a text editor i can paste into it and see that the joke that was presented in the app gets pasted into the page great well before we move on i've been using source control for this project so let's commit our changes to get now i'm going to start this new ios app now so i want to create a new branch and in xcode 13 we have a faster way now to create new branches from the current branch we can do it directly now from the source code item here so let's do that and we'll call the branch ios app and we'll create that branch so now on to the main part of this lesson we want to create an iphone app but we also wanted to utilize a lot of the code that we already created in that first video because much of it it will be definitely reusable so let's organize our files first before we do that there are four files that we can use the api service class our joke model the joke type enum and we'll even be able to reuse this joke view as we want to have the basic same display on the iphone we'll just change some sizes but more about that in a minute so to organize our content better let's create a new folder called shared and i'm going to move it outside of our dad joke folder or target and onto its own above and i'm going to now move all four of those files into that folder now our iphone app is going to be an independent application so we'll need a new target for this from the file menu choose new target and make sure you click on the ios tab and search for and select app name that target dad jokes ios and then click on finish this creates a new folder grouping with a new app entry point and a new content view and assets folder for this target now each target has its own entry point and that's the file marked with app main what i like to do is to first rename the entry point for our mac app as mac macentry.swift don't change the struct name just the file name in the navigator after you do that you can rename the start page for the ios app as ios entry now let's return to that shared folder and reveal the file inspector and what we want to do is to assign the dad jokes ios as an additional target membership for those four files this means that these files are going to be accessible to our new target now i've provided some new assets for this target so open the assets folder for the target and delete the app icon folder and replace it with the one that's provided copy also the launch screen asset into it now create a new file and search for launch screen and add it to the ios target delete the text label that's there and replace it with an image that is that launch screen that we uploaded set the constraints so that it's horizontally and vertically adjusted to the center of the screen now i want to use this launch screen storyboard as the launch screen for my app so we'll select the dad jokes ios target and set the launch screen file to this new launch screen now i want all of my app targets to have the same display name which is dad jokes so for the display name we'll just add dad jokes instead next we want to restrict the rotation on an iphone to always be portrait we'll allow the ipad to go both ways but the iphone portrait only so on the info tab in the supported interface orientations for iphone remove both of the landscape versions the shared joke view displays the stuart lynch icon that is currently used on the mac app it's a 1x image only so i'm going to fix that up by adding a 2x and a 3x image and i'll also be able to use this in my iphone app so i'm going to replace the image by all three of those provided back in the shared folder i'm going to create a new asset catalog i'll call it shared assets and then i'm going to cut the stuart lynch image out of the mac only target and paste it here into this shared one and now make sure that you also set the target membership of this entire catalog to be both of our targets now so that this image will be available to both now it may very well be that our new image is not square so let's open that joke view for now remember it's still being used by the mac app and shortly will be for the ios app and i'm going to set an aspect ratio where the content mode is fit and then i'm going to remove the height in the frame and just leave it as a width of 60. so everything is now still good for the mac menu bar app i'm going to change the scheme now to a dad joke ios and i'm going to pick a device like an iphone 13 pro so essentially now we're working on the iphone app now i'm going to run into some problems and the biggest one is that this view uses the ns paste board and that's a mac os option only you get this error that you can't find ns pasteboard because it's not available to ios on ios it's called the ui pasteboard so we'll need to use a compiler conditional directive to check what the os is and we can do that by surrounding this action with a pound if or hashtag if depending on how you want to pronounce that os being mac os and then another hashtag and if so now this will only be displayed if we're on a mac well there is an equivalent of the ns pasteboard for the iphone as i said it's ui pasteboard so we can add a hashtag else and then the corresponding pasteboard for ios is ui pasteboard we can add to that pasteboard just by assigning our joke string to the pasteboards string property and if we reset the preview now we see the iphone 13 pro is displayed well we want to incorporate this joke view into our view the current content view which is our ios target just like we did when we embedded it in the application menu in our mac app but let's fix some other things up first to make the button stand out a bit more we can set the button style on the vstack to a bordered button style this won't affect the mac version at all it's basically ignored by the mac it turns out here that the frame size i set here is actually redundant so i can remove it but because i have a preview frame set to 255 the joke string is compressed well we can fix that in the preview by adding another os conditional in the preview this time and present the view with no frame if the os is ios else we'll use the other one for the mac os that does set the frame that's looking better there are some more things that i want to fix up though for this ios version i want to have a larger image and i want to present that joke with larger text as there's more room and the easy one to do is to fix that copy button so that it's bordered so fix that copy button by adding a bordered style to adjust the width i'll create a computed property at the top of the struct and i'm going to call it image width of type cg float and i'll do another os conditional check so that if the os is mac os we'll return a width of 60 else we'll return 120 and then we can replace the frame width with image width i also want to increase the font size if we're on the iphone or ipad so i'm going to create a similar computed property but call it font that is of type font and i'll return body if it's mac os and then else we must be on ios i'm going to return title and then we can add a font property to where we display our joke string just before the minimum scale factor this is looking pretty good now we can now finally update the view that is presented when we present our ios version and that's the content view let's rename that to ios joke view making sure that you also select the comment to be renamed and afterwards change that preview provider name as well remove that text view and replace it with a navigation view that will display our shared joke view add a navigation title of dad jokes and since we're allowing this to be displayed on an iphone and an ipad because we have a navigation view i want to remove that splitting that happens on an ipad navigation so i'm going to add a navigation style of stat let's test this now in the simulator we see that it functions basically the same way as the menu bar app now but the text is much larger on the iphone and i have a copy button here so let's copy this joke now if i go to an app where i can paste in the text i'll be able to verify that so let me open this fake messages app here on the simulator and i'm going to paste in that joke to a message to this kb character here whoever that is great that works let's also test out on an ipad if we choose for example the ipad air and run i see that i can rotate my screen and it all just works however i don't really like this when the joke expands to the entire width i'd rather keep it a little bit more confined so let's try and fix that back in the joke view i want to set the width of the screen to be a maximum of the device with 24 padding which will handle the iphone because the width isn't going to change because the rotation is restricted but on the ipad i want to limit that to a maximum of 600 i don't want to do anything if it's on the mac os i just want to leave it alone so i'm going to create one more computed property in joke view that i'll call frame width which is a cg float and i'm going to conditionally return different values based on the os so if the os is mac os i'll return 205 which we had before and that'll give us some padding to our copy button else i'll return the minimum of the ui screen dot main dot bounds dot size dot width minus 20 for padding and that's going to handle the iphone and 600 for both orientations of my ipad and then finally then i can set the frame on that entire vstack to be the frame where the width is our new computed frame width let's test once more on all three devices now first the ipad looks great in both orientations let's bring up the iphone yes still looks good and finally just to make sure that we've not broken anything on the mac app we need to test this out too and it looks great as well so make sure you commit your changes because in the next video in this series we'll create a new branch and add a widget to our ios version so that we can see a random joke presented to us on our iphone or ipad home screen at regular intervals throughout the day thanks for watching
