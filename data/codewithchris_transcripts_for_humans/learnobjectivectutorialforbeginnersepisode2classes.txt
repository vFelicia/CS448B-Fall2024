With timestamps:

00:08 - hey guys welcome to another episode of
00:10 - learning Objective C with me Chris so
00:13 - today we're going to be talking about
00:15 - class declaration and how to create a
00:17 - new instance of the class hey guys so
00:20 - you'll notice that the font size is huge
00:22 - now so I hope you guys can all see this
00:24 - and I'll make sure that I upload my
00:26 - videos in 1080p so today we're going to
00:30 - be talking about class declaration and
00:32 - this is another this is just a new
00:35 - project that i created in xcode you can
00:36 - either create a new one yourself or you
00:38 - can download this exact sample project
00:40 - in the link in the description so I want
00:44 - to point out that a class in Objective C
00:47 - is made up of two files a dot H and a
00:50 - dot M file and the dot H file as you can
00:54 - see here in view controller dot H is the
00:57 - interface for your class and here you
01:01 - would put all the method declarations
01:03 - the property declarations and the
01:05 - variables that you would want other
01:07 - classes to be able to see and interact
01:10 - with and in your implementation file you
01:13 - would go ahead and implement those
01:15 - methods now let's go through creating a
01:20 - brand new class ourselves so in this
01:23 - project navigator you could right-click
01:27 - and go new file and it has a couple of
01:32 - different things you can create here so
01:33 - go ahead and do Objective C class okay
01:38 - so you can type in a class name you can
01:41 - call it you know my class and for sub
01:46 - classing you can choose you can choose
01:50 - something like UI view UI view
01:52 - controller now explain what those are in
01:54 - the future video but you really want to
01:56 - choose nsobject for now and this object
01:59 - is the kind of the root class of most
02:02 - class hierarchies and objective-c and if
02:06 - we want to create a class let's say a
02:08 - helper class or a class for some data
02:10 - manager or for our models we would use
02:12 - NS object so I'm going to go ahead and
02:17 - put it in my root directory so as you
02:20 - can see Xcode created two files for us
02:22 - my
02:22 - class H and my class M now let's go
02:25 - ahead and declare it an instance of
02:27 - myclass
02:27 - in viewcontroller so go to view
02:29 - controller dot H and we're going to need
02:32 - to let you controller know about our
02:34 - class so we need to import the header
02:35 - file for our class there we go and in
02:44 - the implementation file we're going to
02:47 - declare a new instance of it I can't
02:59 - type today
03:00 - okay so declaring a variable to store
03:05 - our class so we're declaring a new
03:19 - pointer my class and right now it's nil
03:23 - because we haven't assigned anything to
03:25 - it so what I'm going to do now is I'm
03:31 - going to go class name space Allah and
03:37 - you could see it returns an ID type so
03:43 - remember from the last video that that
03:45 - is an object reference so what the a
03:48 - lock method does is it allocates in
03:50 - memory space for an instance of myclass
03:53 - and it returns an instance of that ok so
03:58 - the standard practice after I allocate
04:00 - an instance of my class is to call
04:03 - initialize on it and this method in it
04:07 - is already in the base class and it's
04:11 - object remember we subclass Dennis
04:13 - object so by default in NS object the
04:17 - initialize method doesn't do anything it
04:19 - just returns itself but what you can do
04:23 - in my class the class that you created
04:26 - is to override the init method with any
04:30 - you know variable initialization Zoar
04:34 - method calls that you need to
04:36 - initialize your class so there you go
04:43 - now instance of myclass would be ready
04:45 - to use now instead of writing this in
04:48 - three lines the common practice is to do
04:50 - it something like this so a class
04:54 - another instance equals my class I log
05:01 - in it so you can kind of chain method
05:05 - calls like this a lakh returns an
05:07 - instance of myclass and your calling in
05:10 - it on that instance but we're getting a
05:13 - little ahead of ourselves because on the
05:14 - next episode I'm going to talk about
05:16 - declaring methods and calling methods
05:18 - you kind of get a preview of it here so
05:22 - that's it for this video I want to thank
05:24 - you guys for letting me know that it's
05:26 - hard to read the text on the screen
05:28 - because it's only with that sort of
05:30 - feedback that I can improve these videos
05:31 - for you guys now the next question I
05:33 - want to ask you is would you rather me
05:35 - type as I did in this video
05:37 - and then I'm explaining the stuff as I'm
05:40 - typing it or would you rather me have
05:41 - everything typed out beforehand and just
05:45 - explain it to save some time so let me
05:48 - know in the comments section below so
05:50 - that I can tailor it the way you guys
05:52 - want now for your fun fact of the day
05:55 - did you know that the first iPhone was
05:56 - actually invented in 1983 well it's
06:00 - actually a prototype and apparently
06:02 - there were many prototypes after that
06:03 - but this one looks kind of cool so
06:06 - here's an image of it it looks like an
06:08 - iPad with a phone put together now do
06:12 - you think in 1983 that this would have
06:14 - taken off as the iPhone did in this age
06:17 - well let me know in the comments section
06:19 - below
06:20 - I'll see you guys next time
06:34 - you

Cleaned transcript:

hey guys welcome to another episode of learning Objective C with me Chris so today we're going to be talking about class declaration and how to create a new instance of the class hey guys so you'll notice that the font size is huge now so I hope you guys can all see this and I'll make sure that I upload my videos in 1080p so today we're going to be talking about class declaration and this is another this is just a new project that i created in xcode you can either create a new one yourself or you can download this exact sample project in the link in the description so I want to point out that a class in Objective C is made up of two files a dot H and a dot M file and the dot H file as you can see here in view controller dot H is the interface for your class and here you would put all the method declarations the property declarations and the variables that you would want other classes to be able to see and interact with and in your implementation file you would go ahead and implement those methods now let's go through creating a brand new class ourselves so in this project navigator you could rightclick and go new file and it has a couple of different things you can create here so go ahead and do Objective C class okay so you can type in a class name you can call it you know my class and for sub classing you can choose you can choose something like UI view UI view controller now explain what those are in the future video but you really want to choose nsobject for now and this object is the kind of the root class of most class hierarchies and objectivec and if we want to create a class let's say a helper class or a class for some data manager or for our models we would use NS object so I'm going to go ahead and put it in my root directory so as you can see Xcode created two files for us my class H and my class M now let's go ahead and declare it an instance of myclass in viewcontroller so go to view controller dot H and we're going to need to let you controller know about our class so we need to import the header file for our class there we go and in the implementation file we're going to declare a new instance of it I can't type today okay so declaring a variable to store our class so we're declaring a new pointer my class and right now it's nil because we haven't assigned anything to it so what I'm going to do now is I'm going to go class name space Allah and you could see it returns an ID type so remember from the last video that that is an object reference so what the a lock method does is it allocates in memory space for an instance of myclass and it returns an instance of that ok so the standard practice after I allocate an instance of my class is to call initialize on it and this method in it is already in the base class and it's object remember we subclass Dennis object so by default in NS object the initialize method doesn't do anything it just returns itself but what you can do in my class the class that you created is to override the init method with any you know variable initialization Zoar method calls that you need to initialize your class so there you go now instance of myclass would be ready to use now instead of writing this in three lines the common practice is to do it something like this so a class another instance equals my class I log in it so you can kind of chain method calls like this a lakh returns an instance of myclass and your calling in it on that instance but we're getting a little ahead of ourselves because on the next episode I'm going to talk about declaring methods and calling methods you kind of get a preview of it here so that's it for this video I want to thank you guys for letting me know that it's hard to read the text on the screen because it's only with that sort of feedback that I can improve these videos for you guys now the next question I want to ask you is would you rather me type as I did in this video and then I'm explaining the stuff as I'm typing it or would you rather me have everything typed out beforehand and just explain it to save some time so let me know in the comments section below so that I can tailor it the way you guys want now for your fun fact of the day did you know that the first iPhone was actually invented in 1983 well it's actually a prototype and apparently there were many prototypes after that but this one looks kind of cool so here's an image of it it looks like an iPad with a phone put together now do you think in 1983 that this would have taken off as the iPhone did in this age well let me know in the comments section below I'll see you guys next time you
