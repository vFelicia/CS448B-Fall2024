With timestamps:

00:00 - hello and welcome to your lesson 3
00:01 - exercise now this exercise is intended
00:04 - to be completed after you finish lesson
00:07 - 3 of the beginner series if you haven't
00:09 - watched any of it yet I highly recommend
00:11 - that you start at lesson 1 so check it
00:13 - out in the upper right hand corner or in
00:15 - the description below alright so what
00:17 - have we got here lesson 3 was about
00:19 - stack views so this exercise really is
00:21 - to help you get more familiar with them
00:24 - and that's kind of a hint so again I
00:27 - have the assets for you to download in
00:29 - the link below fire up a brand new
00:32 - single view application Xcode project
00:34 - and try to complete this user interface
00:38 - by yourself now pause the video to do
00:41 - that because from this point on I'll be
00:43 - showing you how to do it if you get
00:45 - stuck you can't get something to look
00:47 - right then come back to this video and
00:49 - watch the solution all right let's do it
00:52 - [Applause]
00:57 - so here I've gotten a brand-new Xcode
01:00 - project we're gonna start a single view
01:02 - app and I'm going to call this the
01:04 - lesson 3 exercise solution and it's just
01:09 - gonna save it on my desktop here and
01:12 - we're going to go into the asset library
01:14 - and add all of our image assets now this
01:19 - one this exercise was it seemed kind of
01:23 - trivial but I actually threw you a
01:25 - curveball you might have encountered it
01:27 - if you tried it out you might have
01:29 - gotten some auto layout conflicts that
01:31 - you couldn't resolve and I will tell you
01:34 - how to resolve them in this exercise
01:37 - alright so first of all why don't we go
01:41 - into our view here go into the attribute
01:44 - inspector and change the background of
01:46 - block now you could have done this or
01:49 - you could have added like a view that
01:52 - fit all four edges and then set that to
01:54 - black that's okay as well but just
01:57 - setting the background for this view is
01:58 - probably the easiest thing you could do
02:00 - the first thing we're going to do is
02:02 - open up this object library and add a
02:05 - label so you can also click this icon
02:07 - right there that's at the label let's
02:11 - set it to white immediately so that we
02:12 - can see where it is click open this
02:15 - alignment menu we're going to
02:17 - horizontally align it in the container
02:19 - and we're gonna then add new constraints
02:22 - and we're gonna add say 10 from the top
02:26 - constraint 2 margins is on and it's
02:29 - relative to the safe area so that this
02:31 - label doesn't get covered by the knotch
02:33 - so let's say fitness friends and I'm
02:40 - going to change the font and it doesn't
02:43 - really matter what you change it to
02:45 - because the exercise it's kind of
02:47 - irrelevant to the point of the exercise
02:49 - but you know if you want to you can do
02:52 - it so that's our label right there now
02:55 - the next thing to do is to organize the
02:59 - three images below it so that they have
03:02 - an equal amount of spacing so the
03:05 - easiest way to do this is using a stack
03:07 - view vertical stack view we're gonna add
03:10 - it right
03:10 - here now you didn't have to use a stack
03:12 - view could have specified Auto layout
03:14 - constraints manually for the three
03:16 - different images and that would be fine
03:18 - you'd get the same result there's always
03:20 - multiple ways to do things but let's try
03:22 - to use the stack view because that's
03:24 - what we learned in this lesson
03:25 - now I'm going to make it so that it
03:27 - sticks to the left right and bottom
03:28 - edges of this view and it's going to be
03:31 - ten points below the label so let's set
03:33 - some constraints for this guy enable all
03:36 - four uncheck constraint margins the top
03:39 - one is going to be relative to the label
03:41 - so make sure that that's set to that and
03:44 - the left is going to be relative the
03:46 - view right it's going to be relative to
03:48 - the view and the bottom is going to be
03:50 - relative to the view okay so the top is
03:52 - gonna be 10 0 0 and 0 all right so we
03:57 - gonna have that now the next thing we're
03:59 - gonna do is to add the image views into
04:03 - this flock spec view so let's drag it in
04:07 - here oops there we go so make sure you
04:10 - put the image view inside the stack view
04:13 - when you collapse the stack view the
04:15 - image view should be tucked inside like
04:16 - that we're gonna add another - boom boom
04:23 - so it's flipping out a little bit
04:26 - because it doesn't know what the sizes
04:27 - are and how much space it should give
04:29 - each image view so go ahead and click
04:31 - your stack view click on distribution
04:33 - here and we're gonna say fill equally so
04:36 - it's going to give an equal amount of
04:37 - space to each image view another thing
04:40 - you'll probably want to do is click each
04:42 - of these image views and enable clip to
04:45 - bounce and that's going to make sure
04:47 - that if the image overflows out of the
04:50 - image view that that overflow portion
04:53 - gets clipped and it's not going to cover
04:56 - the image view beside it or something
04:58 - like that so here we've kind of got our
05:00 - basic framework now all that's left to
05:04 - do is set the image property of each of
05:06 - these image views so let's go ahead and
05:09 - click our first image view and set the
05:10 - image so we're going to set its the
05:12 - barbel so that's the beach we're going
05:15 - to set this to running now notice as
05:18 - soon as I do that we start to get all of
05:21 - these conflicts because what's actually
05:23 - happening is that
05:24 - the the imageview is overflowing the
05:28 - bottom of the screen you see we have a
05:30 - constraint that says that the stack view
05:33 - should be zero from the bottom but
05:35 - because the three images the height the
05:37 - combined Heights is more than the height
05:42 - of the stack view it's it doesn't know
05:46 - what to do so basically there's not
05:48 - enough vertical space on this screen to
05:51 - accommodate all of my content so it's
05:55 - just going from the top we have this
05:57 - little red constraint here that's ten
05:59 - points then we have the label then we
06:02 - have another constraint or margin that
06:04 - is ten points and then we have this
06:06 - stack view which is supposed to be 0 to
06:10 - the bottom and it's got three image
06:13 - views inside and these three images
06:15 - combined have a bigger height than the
06:19 - height of the stack view so Xcode
06:21 - doesn't know what to do what I want it
06:23 - to do is for it to squish the stack view
06:26 - you know just take up whatever space it
06:29 - can remaining and then equally
06:32 - distribute that space to the three
06:34 - images right so there's actually a
06:37 - mechanism to tell Xcode when there's not
06:40 - enough space as in this scenario which
06:44 - elements should get squished or have a
06:47 - higher chance or priority of getting
06:49 - squished and which elements should never
06:52 - be squished all right and that is called
06:56 - vertical compression well content
06:59 - compression resistance priority and you
07:02 - can specify for the horizontal and
07:04 - vertical because sometimes there's not
07:06 - enough vertical space and sometimes
07:08 - there's on enough horizontal space now
07:11 - this is it's always really confusing to
07:13 - me especially in the beginning and you
07:16 - have to think about it as the higher the
07:20 - priority the less likely it's going to
07:23 - get squished right because this is
07:25 - compression resistance priority
07:28 - okay so whichever element has the
07:31 - highest resistance priority that element
07:35 - is not going to get like truncated
07:38 - squished or anything like that if
07:40 - there's not enough space the element
07:42 - with the lowest priority actually is
07:44 - going to get squished first so I can fix
07:49 - this problem simply by clicking on the
07:51 - label here and then going down to
07:54 - content compression resistance priority
07:56 - this is in the size inspector by the way
07:58 - and going down to the vertical part by
08:01 - default it's all set to 750 that's why
08:04 - Xcode is so confused because all of the
08:06 - elements have the same priority so it
08:09 - doesn't know who to which element is
08:12 - compressed right so we're going to up
08:15 - the priority on the vertical axis for
08:18 - this label because you know if there's
08:20 - not enough space I don't want that label
08:22 - to get squished I would rather squish
08:25 - that stack feel a little bit and have
08:26 - smaller images it was your agree so
08:29 - we're gonna just up this priority you
08:33 - know you can up it a couple of points
08:34 - and you can see that it immediately
08:36 - solves this problem so I know I didn't
08:39 - teach you guys this in lesson three at
08:42 - least I don't think I did and so that's
08:44 - why it was a little bit of a curveball
08:47 - so I hope you didn't I hope I didn't
08:50 - waste too much of your time but I don't
08:52 - think it's a waste of time even if you
08:53 - spent a ton of time trying to figure
08:54 - this out I'm positive that you learned
08:57 - something out of that experience and
08:59 - that you became you know more more
09:04 - familiar with Auto layout because of it
09:06 - now if you take a look at this content
09:09 - hugging priority I want to briefly touch
09:11 - upon this as well and this is when there
09:15 - is too much space so this is kind of
09:19 - like the opposite of the scenario that
09:21 - we had here let's say that you or your
09:25 - iPhone app gets viewed on an iPad or
09:28 - something like that
09:28 - or a bigger iPhone and there's tons of
09:31 - space now which element is going to
09:34 - maintain its size and which elements are
09:38 - going to automatically enlarge to fill
09:42 - up the space so that's what content
09:44 - hugging priority is and again it's
09:46 - specified in the opposite way content
09:49 - hugging as in
09:51 - retaining the same size that's kind of
09:53 - what content hugging means so the higher
09:56 - the priority the more likely it is to
09:59 - stay the same size so when there's extra
10:03 - space the element with the lowest
10:06 - content hugging priority that one's
10:08 - going to get expanded or stretched to
10:11 - fill up the space so that's kind of what
10:14 - those properties are there for to give
10:17 - you kind of like finer finer control
10:20 - over how your layout adapts to bigger
10:23 - screen sizes and smaller screen sizes so
10:25 - it's very useful stuff I hope you
10:28 - learned a lot out of this exercise and
10:29 - I'll see you in the next one

Cleaned transcript:

hello and welcome to your lesson 3 exercise now this exercise is intended to be completed after you finish lesson 3 of the beginner series if you haven't watched any of it yet I highly recommend that you start at lesson 1 so check it out in the upper right hand corner or in the description below alright so what have we got here lesson 3 was about stack views so this exercise really is to help you get more familiar with them and that's kind of a hint so again I have the assets for you to download in the link below fire up a brand new single view application Xcode project and try to complete this user interface by yourself now pause the video to do that because from this point on I'll be showing you how to do it if you get stuck you can't get something to look right then come back to this video and watch the solution all right let's do it so here I've gotten a brandnew Xcode project we're gonna start a single view app and I'm going to call this the lesson 3 exercise solution and it's just gonna save it on my desktop here and we're going to go into the asset library and add all of our image assets now this one this exercise was it seemed kind of trivial but I actually threw you a curveball you might have encountered it if you tried it out you might have gotten some auto layout conflicts that you couldn't resolve and I will tell you how to resolve them in this exercise alright so first of all why don't we go into our view here go into the attribute inspector and change the background of block now you could have done this or you could have added like a view that fit all four edges and then set that to black that's okay as well but just setting the background for this view is probably the easiest thing you could do the first thing we're going to do is open up this object library and add a label so you can also click this icon right there that's at the label let's set it to white immediately so that we can see where it is click open this alignment menu we're going to horizontally align it in the container and we're gonna then add new constraints and we're gonna add say 10 from the top constraint 2 margins is on and it's relative to the safe area so that this label doesn't get covered by the knotch so let's say fitness friends and I'm going to change the font and it doesn't really matter what you change it to because the exercise it's kind of irrelevant to the point of the exercise but you know if you want to you can do it so that's our label right there now the next thing to do is to organize the three images below it so that they have an equal amount of spacing so the easiest way to do this is using a stack view vertical stack view we're gonna add it right here now you didn't have to use a stack view could have specified Auto layout constraints manually for the three different images and that would be fine you'd get the same result there's always multiple ways to do things but let's try to use the stack view because that's what we learned in this lesson now I'm going to make it so that it sticks to the left right and bottom edges of this view and it's going to be ten points below the label so let's set some constraints for this guy enable all four uncheck constraint margins the top one is going to be relative to the label so make sure that that's set to that and the left is going to be relative the view right it's going to be relative to the view and the bottom is going to be relative to the view okay so the top is gonna be 10 0 0 and 0 all right so we gonna have that now the next thing we're gonna do is to add the image views into this flock spec view so let's drag it in here oops there we go so make sure you put the image view inside the stack view when you collapse the stack view the image view should be tucked inside like that we're gonna add another boom boom so it's flipping out a little bit because it doesn't know what the sizes are and how much space it should give each image view so go ahead and click your stack view click on distribution here and we're gonna say fill equally so it's going to give an equal amount of space to each image view another thing you'll probably want to do is click each of these image views and enable clip to bounce and that's going to make sure that if the image overflows out of the image view that that overflow portion gets clipped and it's not going to cover the image view beside it or something like that so here we've kind of got our basic framework now all that's left to do is set the image property of each of these image views so let's go ahead and click our first image view and set the image so we're going to set its the barbel so that's the beach we're going to set this to running now notice as soon as I do that we start to get all of these conflicts because what's actually happening is that the the imageview is overflowing the bottom of the screen you see we have a constraint that says that the stack view should be zero from the bottom but because the three images the height the combined Heights is more than the height of the stack view it's it doesn't know what to do so basically there's not enough vertical space on this screen to accommodate all of my content so it's just going from the top we have this little red constraint here that's ten points then we have the label then we have another constraint or margin that is ten points and then we have this stack view which is supposed to be 0 to the bottom and it's got three image views inside and these three images combined have a bigger height than the height of the stack view so Xcode doesn't know what to do what I want it to do is for it to squish the stack view you know just take up whatever space it can remaining and then equally distribute that space to the three images right so there's actually a mechanism to tell Xcode when there's not enough space as in this scenario which elements should get squished or have a higher chance or priority of getting squished and which elements should never be squished all right and that is called vertical compression well content compression resistance priority and you can specify for the horizontal and vertical because sometimes there's not enough vertical space and sometimes there's on enough horizontal space now this is it's always really confusing to me especially in the beginning and you have to think about it as the higher the priority the less likely it's going to get squished right because this is compression resistance priority okay so whichever element has the highest resistance priority that element is not going to get like truncated squished or anything like that if there's not enough space the element with the lowest priority actually is going to get squished first so I can fix this problem simply by clicking on the label here and then going down to content compression resistance priority this is in the size inspector by the way and going down to the vertical part by default it's all set to 750 that's why Xcode is so confused because all of the elements have the same priority so it doesn't know who to which element is compressed right so we're going to up the priority on the vertical axis for this label because you know if there's not enough space I don't want that label to get squished I would rather squish that stack feel a little bit and have smaller images it was your agree so we're gonna just up this priority you know you can up it a couple of points and you can see that it immediately solves this problem so I know I didn't teach you guys this in lesson three at least I don't think I did and so that's why it was a little bit of a curveball so I hope you didn't I hope I didn't waste too much of your time but I don't think it's a waste of time even if you spent a ton of time trying to figure this out I'm positive that you learned something out of that experience and that you became you know more more familiar with Auto layout because of it now if you take a look at this content hugging priority I want to briefly touch upon this as well and this is when there is too much space so this is kind of like the opposite of the scenario that we had here let's say that you or your iPhone app gets viewed on an iPad or something like that or a bigger iPhone and there's tons of space now which element is going to maintain its size and which elements are going to automatically enlarge to fill up the space so that's what content hugging priority is and again it's specified in the opposite way content hugging as in retaining the same size that's kind of what content hugging means so the higher the priority the more likely it is to stay the same size so when there's extra space the element with the lowest content hugging priority that one's going to get expanded or stretched to fill up the space so that's kind of what those properties are there for to give you kind of like finer finer control over how your layout adapts to bigger screen sizes and smaller screen sizes so it's very useful stuff I hope you learned a lot out of this exercise and I'll see you in the next one
