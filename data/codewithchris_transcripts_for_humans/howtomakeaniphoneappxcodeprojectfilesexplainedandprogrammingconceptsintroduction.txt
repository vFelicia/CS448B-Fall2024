With timestamps:

00:04 - okay so now we've created our first
00:07 - Xcode project and we've compiled it and
00:10 - we've kind of run a blank iPhone
00:12 - application now let's take a look at
00:15 - what some of the files in your Xcode
00:17 - project are and I'll explain what they
00:19 - do and kind of what what happens when
00:22 - you're running that application so let's
00:24 - take a look at the project that we
00:27 - created in the previous video the blank
00:29 - demo and I just want to go through some
00:33 - of the files in your default Xcode
00:35 - project and explain to you what they are
00:37 - and how they're represented in the blank
00:40 - app that when you run you see this gray
00:42 - screen so there you go we have one view
00:47 - one blank view and basically how does it
00:51 - even get to this point and you know what
00:53 - do these files mean so if you don't have
00:56 - a programming background try to pay
00:58 - close attention in this video because I
01:00 - will also be trying to explain some
01:03 - object-oriented programming concepts to
01:05 - you while explaining what these files
01:07 - are so first of all I want to point out
01:10 - that in here you see a file called app
01:12 - delegate but there's one with a dot H
01:14 - extension and one with a dot M extension
01:16 - and same thing with view controller and
01:18 - then we've just got this really weird
01:20 - view controller dogs zip file which
01:23 - we'll get to in a second so you know why
01:25 - are there two files with different
01:27 - extensions with the same name well in
01:29 - Objective C these two files the dot H
01:31 - and the dot M they make up a class now
01:34 - you can think of a class as a blueprint
01:37 - so in a class using Objective C we write
01:41 - instructions for how that class is
01:43 - supposed to behave and its properties
01:46 - and behaviors and using this class you
01:50 - can create instances and these instances
01:53 - are referred to as objects so using one
01:56 - blueprint or one class you can create
01:59 - multiple objects and all of them behave
02:02 - the same way so for example right here
02:05 - we have an app delegate class it
02:07 - contains hmm file which I'll explain in
02:11 - a second why there are two files but
02:13 - here is
02:13 - another class the viewcontroller so in
02:16 - viewcontroller there's a little bit of
02:18 - code that describes how it's supposed to
02:20 - behave and you'll notice that an app
02:22 - delegate it creates an instance of view
02:25 - controller to use what's important to
02:27 - understand is that when we write code in
02:30 - Xcode we're filling in the code and
02:32 - instructions for these classes and
02:34 - really that that's what we're doing
02:36 - we're creating new classes and we're
02:38 - defining the classes instructions and
02:40 - behaviors and then what we do is we
02:43 - create instances of these classes called
02:46 - objects and it's these objects that
02:48 - interact with each other so it's a very
02:50 - abstract concept at this point but once
02:53 - we you know start coding and get our
02:55 - feet wet it's going to start to make
02:57 - more sense but it's a very important
02:59 - distinction I want to make right here is
03:01 - that we define classes and we write
03:03 - instructions and behaviors and
03:05 - properties for those classes and to
03:07 - define how it's supposed to behave and
03:09 - then we use these classes to create
03:11 - instances of objects which will interact
03:14 - with each other so following the
03:16 - blueprint analogy if the blueprint is
03:18 - for a car the class is the blueprint
03:21 - because it describes all you know how
03:23 - the car works and how its put together
03:25 - and everything the actual car that's
03:27 - made from the blueprint you know acts
03:29 - accordingly to the blueprint but it is
03:32 - not the blueprint and using the
03:34 - blueprint you can create multiple copies
03:37 - of that car so this is why it's called
03:40 - object-oriented programming because
03:42 - really we're defining classes that we're
03:44 - going to use to create objects and it's
03:46 - really the objects that are interacting
03:48 - with each other to make the whole app
03:50 - experience happen so now that you know
03:52 - about classes and objects going back to
03:55 - that blank gray screen
03:57 - default iPhone app that we created how
03:59 - do these files in your Xcode project
04:01 - translate to that application well if
04:04 - you take a look at this diagram you can
04:06 - see how the app delegate class the view
04:08 - controller class and the view controller
04:10 - dot zip view come together to form that
04:13 - default gray screen application that you
04:15 - saw in the simulator in the beginning of
04:17 - this video so the app delegate is kind
04:20 - of like your entry point to the
04:22 - application itself and in the app
04:24 - delegate object it creates a view
04:26 - controller object now you remember this
04:28 - is not the viewcontroller class it's an
04:31 - instance of the viewcontroller class and
04:34 - so the viewcontroller
04:35 - object then goes to create a view
04:38 - controller view and this is translated
04:41 - from the view controller dot zip file
04:43 - and when these three things work
04:45 - together you have that application that
04:47 - you ran if you click the view controller
04:50 - dot zip file in Xcode your editor area
04:52 - is going to change into interface
04:54 - builder so what this is is it's a visual
04:57 - designer for you to design your iPhone
05:01 - views so as you can see all I have right
05:03 - now is a blank screen which is exactly
05:05 - what you get when you run the iPhone
05:07 - simulator so with this visual designer I
05:09 - can actually drag labels and buttons and
05:11 - so on
05:12 - onto the view in a visual way and I can
05:15 - customize the properties of those
05:16 - elements now the same thing can be done
05:18 - programmatically in the objective-c
05:20 - I can create all of those labels and
05:23 - text boxes within code and then using
05:25 - code add them to the view as well but
05:28 - interface builder and the zip files is
05:30 - just the visual way for you to construct
05:32 - your user interfaces in your views and
05:34 - then when you run your application the
05:37 - zip file gets translated into a view
05:39 - object for your view controller class to
05:41 - manage so the last topic I want to talk
05:44 - about before we end this video is where
05:46 - do objects live we talked about what
05:48 - classes are and how you can use a class
05:51 - to create multiple instances of that
05:53 - class called objects so where do objects
05:56 - live so when you create an object it
05:58 - gets created in memory you can think of
06:00 - memory as sort of an abstract space to
06:03 - store and keep track of all of your
06:04 - objects and the memory space is not
06:07 - persistent so what that means is that as
06:10 - you're creating these objects in memory
06:11 - if your app is stopped or it crashes or
06:14 - your the phone is shut off and then turn
06:16 - back on that memory space is flushed
06:18 - meaning that you're going to lose all of
06:20 - your data so if you wanted to save any
06:22 - data you'd have to persist it somehow
06:25 - and we'll get into that topic in the
06:27 - future but for now understand that all
06:29 - of the objects that get created in the
06:31 - application and they live in in a space
06:34 - called memory and furthermore your
06:36 - iPhone app or your iPad app is only
06:38 - allotted
06:40 - mount of memory so that means if you
06:42 - keep creating objects without removing
06:44 - objects from memory you're eventually
06:46 - going to run out of space in memory and
06:48 - your iPhone app may crash so a long time
06:50 - ago programmers would need to manage
06:52 - their own memory and they would need to
06:54 - keep track of which objects
06:56 - we're still being used so they need to
06:58 - keep in memory and which objects were no
07:00 - longer needed and then they would
07:01 - manually have to release or flush those
07:04 - objects from memory and then because of
07:06 - this amount of control that programmers
07:08 - had it was very easy to create bugs
07:11 - we're either memory would overflow or
07:13 - objects wouldn't get removed from memory
07:16 - and it would get stranded and stuff like
07:18 - that so if you remember in the beginning
07:20 - of the project we checked off a
07:22 - checkmark called automatic reference
07:24 - counting well what that does is Xcode
07:26 - will actually automatically add those
07:29 - statements to remove objects which are
07:31 - no longer used and help you kind of
07:33 - manage that memory a little bit so you
07:35 - don't have to manually keep track and
07:37 - remove objects that are no longer needed
07:39 - so I think this is a great place to end
07:42 - off this video it was little longer than
07:44 - the previous videos but we went through
07:45 - a lot of important concepts in this
07:48 - video so I want to recap what we went
07:50 - through today here so we talked about
07:52 - what some of the default class files in
07:55 - your Xcode project are we also went
07:58 - through the distinction between what a
08:00 - classes in programming and what an
08:02 - object is and it's very important to
08:04 - understand this concept and we also
08:07 - talked about the app flow in your
08:09 - default iPhone app and in fact in all
08:11 - your iPhone apps the entry point will be
08:14 - the app delegate and then you will
08:15 - create some sort of view controller to
08:17 - display a view so that app flow kind of
08:20 - pertains to all of the feature apps that
08:22 - you're going to build we talked about
08:24 - what zip files were and what views were
08:25 - and interface builder introduced a
08:28 - little bit and we're going to be using
08:29 - interface builder in our hello world
08:31 - video in the next lesson we also talked
08:34 - about memory and where objects live so
08:37 - if you didn't get all of that don't
08:39 - worry follow the link below in the
08:41 - description for the notes and there's
08:44 - actually a text version of this video as
08:46 - well and you can ask questions in the
08:48 - comments and then I'll create an FAQ
08:51 - section or you can ask questions in the
08:53 - comments
08:53 - oh of this video on YouTube and I will
08:56 - also answer the questions there so I
08:58 - hope you really enjoyed watching this
09:00 - video it would really help me out if you
09:02 - guys shared this with your friends and
09:04 - family whoever you know who wants to
09:06 - learn iOS programming and like and
09:09 - subscribe so thanks for all of your
09:10 - support and next video coming up thanks
09:14 - guys bye

Cleaned transcript:

okay so now we've created our first Xcode project and we've compiled it and we've kind of run a blank iPhone application now let's take a look at what some of the files in your Xcode project are and I'll explain what they do and kind of what what happens when you're running that application so let's take a look at the project that we created in the previous video the blank demo and I just want to go through some of the files in your default Xcode project and explain to you what they are and how they're represented in the blank app that when you run you see this gray screen so there you go we have one view one blank view and basically how does it even get to this point and you know what do these files mean so if you don't have a programming background try to pay close attention in this video because I will also be trying to explain some objectoriented programming concepts to you while explaining what these files are so first of all I want to point out that in here you see a file called app delegate but there's one with a dot H extension and one with a dot M extension and same thing with view controller and then we've just got this really weird view controller dogs zip file which we'll get to in a second so you know why are there two files with different extensions with the same name well in Objective C these two files the dot H and the dot M they make up a class now you can think of a class as a blueprint so in a class using Objective C we write instructions for how that class is supposed to behave and its properties and behaviors and using this class you can create instances and these instances are referred to as objects so using one blueprint or one class you can create multiple objects and all of them behave the same way so for example right here we have an app delegate class it contains hmm file which I'll explain in a second why there are two files but here is another class the viewcontroller so in viewcontroller there's a little bit of code that describes how it's supposed to behave and you'll notice that an app delegate it creates an instance of view controller to use what's important to understand is that when we write code in Xcode we're filling in the code and instructions for these classes and really that that's what we're doing we're creating new classes and we're defining the classes instructions and behaviors and then what we do is we create instances of these classes called objects and it's these objects that interact with each other so it's a very abstract concept at this point but once we you know start coding and get our feet wet it's going to start to make more sense but it's a very important distinction I want to make right here is that we define classes and we write instructions and behaviors and properties for those classes and to define how it's supposed to behave and then we use these classes to create instances of objects which will interact with each other so following the blueprint analogy if the blueprint is for a car the class is the blueprint because it describes all you know how the car works and how its put together and everything the actual car that's made from the blueprint you know acts accordingly to the blueprint but it is not the blueprint and using the blueprint you can create multiple copies of that car so this is why it's called objectoriented programming because really we're defining classes that we're going to use to create objects and it's really the objects that are interacting with each other to make the whole app experience happen so now that you know about classes and objects going back to that blank gray screen default iPhone app that we created how do these files in your Xcode project translate to that application well if you take a look at this diagram you can see how the app delegate class the view controller class and the view controller dot zip view come together to form that default gray screen application that you saw in the simulator in the beginning of this video so the app delegate is kind of like your entry point to the application itself and in the app delegate object it creates a view controller object now you remember this is not the viewcontroller class it's an instance of the viewcontroller class and so the viewcontroller object then goes to create a view controller view and this is translated from the view controller dot zip file and when these three things work together you have that application that you ran if you click the view controller dot zip file in Xcode your editor area is going to change into interface builder so what this is is it's a visual designer for you to design your iPhone views so as you can see all I have right now is a blank screen which is exactly what you get when you run the iPhone simulator so with this visual designer I can actually drag labels and buttons and so on onto the view in a visual way and I can customize the properties of those elements now the same thing can be done programmatically in the objectivec I can create all of those labels and text boxes within code and then using code add them to the view as well but interface builder and the zip files is just the visual way for you to construct your user interfaces in your views and then when you run your application the zip file gets translated into a view object for your view controller class to manage so the last topic I want to talk about before we end this video is where do objects live we talked about what classes are and how you can use a class to create multiple instances of that class called objects so where do objects live so when you create an object it gets created in memory you can think of memory as sort of an abstract space to store and keep track of all of your objects and the memory space is not persistent so what that means is that as you're creating these objects in memory if your app is stopped or it crashes or your the phone is shut off and then turn back on that memory space is flushed meaning that you're going to lose all of your data so if you wanted to save any data you'd have to persist it somehow and we'll get into that topic in the future but for now understand that all of the objects that get created in the application and they live in in a space called memory and furthermore your iPhone app or your iPad app is only allotted mount of memory so that means if you keep creating objects without removing objects from memory you're eventually going to run out of space in memory and your iPhone app may crash so a long time ago programmers would need to manage their own memory and they would need to keep track of which objects we're still being used so they need to keep in memory and which objects were no longer needed and then they would manually have to release or flush those objects from memory and then because of this amount of control that programmers had it was very easy to create bugs we're either memory would overflow or objects wouldn't get removed from memory and it would get stranded and stuff like that so if you remember in the beginning of the project we checked off a checkmark called automatic reference counting well what that does is Xcode will actually automatically add those statements to remove objects which are no longer used and help you kind of manage that memory a little bit so you don't have to manually keep track and remove objects that are no longer needed so I think this is a great place to end off this video it was little longer than the previous videos but we went through a lot of important concepts in this video so I want to recap what we went through today here so we talked about what some of the default class files in your Xcode project are we also went through the distinction between what a classes in programming and what an object is and it's very important to understand this concept and we also talked about the app flow in your default iPhone app and in fact in all your iPhone apps the entry point will be the app delegate and then you will create some sort of view controller to display a view so that app flow kind of pertains to all of the feature apps that you're going to build we talked about what zip files were and what views were and interface builder introduced a little bit and we're going to be using interface builder in our hello world video in the next lesson we also talked about memory and where objects live so if you didn't get all of that don't worry follow the link below in the description for the notes and there's actually a text version of this video as well and you can ask questions in the comments and then I'll create an FAQ section or you can ask questions in the comments oh of this video on YouTube and I will also answer the questions there so I hope you really enjoyed watching this video it would really help me out if you guys shared this with your friends and family whoever you know who wants to learn iOS programming and like and subscribe so thanks for all of your support and next video coming up thanks guys bye
