With timestamps:

00:00 - hello and welcome it's chris here this is 
part 404 where my friend stuart lynch will  
00:04 - show you how to create an app on multiple 
platforms if you've missed the previous  
00:07 - parts don't worry there's a playlist right 
over there that you can check out and if you  
00:11 - do enjoy these lessons do check out stuart's 
youtube channel as well alright let's dive in  
00:17 - hi my name is stuart lanchan in this video we're 
going to be extending our dad jokes application  
00:22 - once again currently we have a mac os target 
for the menu bar version an ios target for the  
00:29 - iphone ipad version and a widget for the iphone 
and ipad in this video we're going to be adding  
00:35 - another new target to our app we're going to 
create a watch kit app and a watch kit extension  
00:42 - so that we can have our dad jokes application 
on our apple watch we'll finish up by adding  
00:48 - in several complications so that our users will 
be able to launch the app from their watch face  
00:54 - i highly recommend that you watch the first three 
videos of the series as each one builds on the  
00:59 - other and depends on the previous one if you've 
completed the widget kit version then you can  
01:04 - continue on from there or you can use a completed 
version of that third video and you can download  
01:10 - that from the link in the description before 
i start coding i'd like to start a new branch  
01:17 - so from that widget branch choose new 
branch from widget and name it watch kit
01:28 - we have all the content that we need 
to share between our existing targets  
01:31 - in this shared folder at the top so before 
i create a new target for our watch app  
01:36 - let me first collapse those other targets 
from the file menu now choose file new target  
01:45 - select watch os and then scroll 
down to the application section  
01:50 - we can create a watch app for ios app 
or we can create a standalone watch app  
01:57 - there's no need for us to 
couple it with the ios app  
02:00 - so we'll create the standalone app which 
means it can be installed independently  
02:07 - you'll be able to delete your app from your iphone 
and it'll still be on your watch call the app  
02:13 - dad jokes watch kit we won't be sending 
notifications so make sure you uncheck the include  
02:20 - notification scene click on finish and make sure 
that you activate it to make it the current target
02:30 - you'll see that you have added not 
one but two different target groupings  
02:35 - the first one is the watch kit app itself  
02:39 - and the second one is the watch kit extension 
we'll be doing most of our work in the extension  
02:44 - but when we run the app we want to make 
sure that we select the watch kit app target  
02:51 - the assets folder in the app target is where the 
watch icon is located right now it's empty but  
02:58 - i provided some assets for this tutorial and 
you can download them from the link provided  
03:05 - delete the app icon and then drag in 
the one from the watch kit assets folder
03:13 - build the app so that it will compile the assets
03:19 - choose the watch kit app target now along with one 
of the apple watch simulators i have one paired  
03:25 - here to the iphone 13 it's the 45 millimeter one 
when i run it you see that new icon spinning up as  
03:33 - the application launches and it presents hello 
world return to the home screen if you're not  
03:40 - seeing the watch frame i suggest you choose show 
device bezels from the window menu then tap on the  
03:47 - crown and you'll see the app icon in the gallery 
long press on the gallery window and choose  
03:55 - list view you'll see the name of our app and 
it's not really great so let's fix that now  
04:02 - select the app target for the watch and 
change the display name to be just dad jokes
04:10 - tap out of that field to have it 
registered and then run once more  
04:15 - tap on the crown now and you'll see 
that new name displayed in the list
04:22 - as with all targets the app has to start 
somewhere and that's the file marked with the  
04:27 - app main designation as before i'm going to rename 
this file to something that i can quickly find  
04:33 - so i'm going to call it watchkit entry 
and move it up to the top of the folder
04:40 - the app entry presents the content view as you 
can see and it's just swift ui let's refactor it  
04:47 - by naming it watch os joke view making sure that 
all instances of the content view are replaced
04:56 - perfect time to start coding before we 
start coding our ui we'll need to access  
05:03 - some of those classes and assets 
that we used on our other targets  
05:07 - so open the shared folder and add the watchkit 
extension to the target membership for all of  
05:14 - the files in the shared folder except for the 
joke view the joke view is only used for the  
05:20 - mac and ios apps remember we have to redesign 
our own ui for the widget so we'll do the same  
05:26 - thing here for the watch make sure that you also 
include the image asset while you're doing this  
05:33 - make sure you choose the extension and not the 
app remember we're coding in the extension target
05:42 - let's set things up similar to how we set up 
the joke view for the mac app we need to have a  
05:49 - state property for the joke string to toggle 
the displaying of the progress view and the  
05:54 - stored property in app storage so we can keep 
track of the joke type so we can copy those  
06:00 - from the joke view and paste them into our view
06:08 - we'll also need a function to fetch the joke 
from the api so let's copy that function from  
06:13 - here too but since we already have our joke 
type here as a property i can remove it as an  
06:18 - argument for our get joke function and just 
change the url to the app storage version  
06:24 - i guess i could have done 
that in the first ones too
06:31 - if we're fetching the joke we just 
want to display a progress view
06:37 - else let's set up a v stack with an alignment 
of leading that will contain really just two  
06:43 - elements one will be the joke and the other 
is going to be a refresh button that will make  
06:49 - a new call to the api the first element then 
is a text view showing the joke string and  
06:59 - in the case where it's really long we'll set a 
minimum scale factor of 0.5 to reduce the size
07:08 - next we'll add a spacer
07:11 - and at the bottom of the 
v-stack we'll create an h-stack
07:17 - add a spacer so that we can add 
a button to the trailing edge
07:23 - now this button will have an image 
using the system name go forward
07:30 - and then we can set a frame width of 40.
07:36 - for the action then we'll 
create an asynchronous task  
07:39 - unit of work and await the fetching of 
a joke by calling the get job function
07:49 - let's add some horizontal padding to this v-stack
07:54 - and then test it on the canvas 
by tapping the refresh button  
07:59 - when we preview initially it says no joke 
available but when we tap on the refresh  
08:06 - button the progress spinner shows until a new joke 
is fetched and displayed next now i want to add a  
08:13 - background image of the dad but i want it to be 
faded so that we can still read the joke text  
08:19 - so embed the entire if-else clause 
including the padding in a z-stack
08:28 - and then as the second element 
in the z-stack create an  
08:31 - image using that shared stuart lynch image
08:37 - make it resizable but set the opacity to 0.3
08:45 - and then on that z-stack add a task modifier  
08:50 - so that when the view loads it will 
automatically await the arrival of a joke
09:01 - if we quickly go back and check the entry point 
you'll see that the watchkit joke view is embedded  
09:06 - inside a navigation view this is great because 
we can use that to display a navigation title  
09:13 - without having to embed our joke view inside a 
navigation view so return to the joke view and  
09:20 - add a new state property called navigation title 
as a string and initialize it as an empty string
09:30 - then in the get joke function we can fetch 
the joke and grab that joke type from the json  
09:39 - and then we'll remove the colon and that 
extra space that we found at the end  
09:43 - by dropping the last two characters
09:48 - looks like i have to enclose this as a string
09:58 - finally then we can add a navigation 
title modifier to the z-stack  
10:03 - and that's the navigation title 
using that string navigation title
10:25 - currently we're always just retrieving a dad 
joke and i want our users to be able to make that  
10:30 - choice so to do that i'm first going to create a 
new swiss ui view and call it type selection view
10:39 - we'll need the app storage joke type value 
and that is of type joke type and as always  
10:45 - we set that default to dad joke in case it hadn't 
already been set now i'm going to replace the body  
10:52 - with a list and then i'll use a for each loop to 
create a list of buttons from our joke type enum  
11:00 - and remember that it's case iterable so we can use 
self as the id and create an item as the iterator
11:10 - within the list then we'll 
create a button that uses  
11:14 - a text label and that will be the item's raw value
11:21 - and then the action will set that 
joke type property to the item value
11:29 - let's add some horizontal padding
11:33 - and then we can display what the current choice 
is by changing the tint color of the list item  
11:39 - and do that by comparing it to 
the current iterated item to the  
11:43 - selected one so if it's equal 
we'll set the tint to red
11:51 - and if not i'm going to use an rgb 
initializer where our all values are 0.9  
11:58 - and set the opacity to 0.3
12:04 - and then i'll add some padding to the list
12:09 - and this view too will be in the navigation stack 
so we can set a navigation title to say joke types
12:19 - so how are we going to get to this view well 
that's easy with swift ui i am going to first  
12:26 - embed both of these views in a tab view 
and allow the user to switch between them  
12:33 - so switch back to the app entry point and then 
embed the watch get joke view within a tab view  
12:41 - and then add the type selection 
view in as the second view
12:52 - if i run this now
12:55 - we can swipe between the two views and select a 
different joke type but we get this error here at  
13:02 - our entry point and to be honest i'm not sure 
why but i found out how to resolve the issue
13:10 - create a new swift ui view and call it app tab 
view and here's the key add a private state  
13:18 - property called selected tab and initialize it 
as 0. we place the body with a tab view that has  
13:26 - the selection as an argument in the body 
of the tab view we can create our two views  
13:35 - but we can also add a tag for each of the two 
views so zero for the first and one for the second
13:44 - if i return to our entry point now we 
can set this new view as our entry point  
13:51 - let's run now and see if the error goes away
13:57 - it looks like it does and we can 
swipe and change our joke types
14:04 - that purple warning you see in the navigation 
bar up here goes nowhere and if you tap on it  
14:10 - you see that if you relaunch the code it will be 
removed we fixed that problem now we have our app  
14:17 - completed rather than getting the user to go 
to the app gallery however to select the app  
14:23 - i like to provide a way for the user to 
access that app directly from the watch face  
14:28 - and this can be done by way of a complication 
complications are those little icons on the  
14:34 - watch face that often show some timely 
relevant information about the app  
14:40 - like you do with the weather in our case however 
we're not going to be displaying any information  
14:46 - rather we're simply going to have a recognizable 
icon that when it's tapped we'll launch the app  
14:54 - you can see from the apple watch human interface 
guidelines page that there are many different  
14:59 - types of complications and each of the watch 
faces have a different selection we're going to  
15:06 - focus on only those watch faces that'll display 
an image like this circular small complication
15:15 - and this modular small both of these use 
a png image but only the alpha channel of  
15:22 - that image is used the other complications 
like the graphic corner one will display  
15:29 - a full color image as will this graphic circular 
so we're going to need to do three things  
15:38 - we'll need to add some images for 
these two types of complications
15:43 - we'll need to specify which of the complications 
we want to support and then finally since we see  
15:50 - that each of the complication types has a number 
of different display types and these are known  
15:55 - as templates we'll need to specify which template 
that that particular complication family will use  
16:03 - i found it difficult to find out which watch faces 
actually support which different complications  
16:11 - fortunately brian may on his website 
i'll leave a link in the description  
16:15 - has done that for us so you can 
see that in the link provided
16:24 - so first let's add those image assets drag them 
into the assets folder of the watch kit extension  
16:33 - and then in the inspector with them both selected  
16:36 - change the scale to a single scale 
because they're vector images
16:44 - select the one piece image 
and specify that it render  
16:48 - as a template now you'll understand why i 
chose these peculiar names in just a minute
16:58 - when we created our app extension it provided 
us with a complication controller and you  
17:05 - can see here that it's loaded with 
tons of boilerplate code and a lot  
17:09 - of this code has to do with presenting 
timely information on the complication  
17:13 - as i mentioned we will not be doing that we 
just want to use the complication as a launcher  
17:18 - so what i'm going to do is remove 
all this code and start from scratch  
17:24 - this generates a non-conformance error and 
we can allow xcode to generate the protocol  
17:29 - steps for us like this but i'm not going to 
even use these two functions i'm going to use  
17:36 - asynchronous versions of these functions instead 
remember when we created the intent handler  
17:43 - for the widget it had two versions unfortunately 
xcode doesn't do that for us here but we can  
17:50 - create them anyway and there are actually three 
required functions the first is the complication  
17:58 - descriptors which returns an array of information 
about the complications that we want to offer
18:06 - the second will display a sample template that 
will be used by the user when they long press to  
18:12 - pick the complication this is basically the same 
thing that's going to be placed on the watch face  
18:17 - and that's done in the third function 
which is the current timeline entry  
18:22 - this is sounding an awful lot like a widget 
provider doesn't it we're going to use the same  
18:27 - descriptor for all of our complications so we'll 
return an array that's going to be a single item  
18:36 - and that's a clk complication descriptor a clock 
kit complication descriptor for the identifier  
18:43 - we're just going to use our watch kit bundle 
id com.createx all in my case dot dad jokes
18:55 - the display name for all of our 
complications is just going to be dad jokes
19:02 - and the supported families is the array 
containing all of the different complication  
19:07 - types that you want to support and for me 
i'm just going to support circular small  
19:14 - modular small utilitarian small 
graphic corner graphic circular  
19:23 - and graphic extra large all of these will allow me 
to place a single image icon as the complication  
19:32 - i'm not going to use any text or display any 
information from the app so both the localized  
19:39 - sample template and the current timeline entry 
will need to have access to those two images  
19:45 - so let me create two properties for these and 
then i'll use a guard check to make sure that  
19:50 - they exist otherwise i'll return nil so if you 
made a typo you'll know right away so for the  
19:59 - full color image we want a ui 
image named full color image
20:07 - for the one piece image we'll 
want a ui image of that name
20:15 - else we'll just return nil as i said so let's copy 
and paste that into the third function as well
20:24 - now we need to create a template for 
each of our families that we support  
20:28 - so i'm going to use a switch statement
20:32 - and then i'm going to use 
some fancy xcode copy paste  
20:36 - to edit and copy all of our 
types and turn them into cases
20:48 - to be inclusive then the 
default will be the remainder  
20:52 - and we'll return nil because we're not 
supporting those ones that we haven't named
20:59 - for each one then we need to create a template 
and that's a clock get complication template a  
21:05 - clk complication template so let me just copy 
that to my clipboard and then we can pick from  
21:13 - autocomplete the template that we want to 
use for each one of our complication types  
21:19 - for the circular small we'll want a simple 
image and it requires an image for rider  
21:27 - which is a clock get image provider if we use the 
initializer on this type we see that it requires  
21:36 - a one piece image and that's 
why i called our image that name
21:43 - so let's use that and then we return the 
template this process is going to be the  
21:49 - same for every one of these families 
so let me just quickly go through these
21:58 - modular small uses the modular small simple image 
template and that uses another one-piece image
22:12 - utilitarian small uses the utilitarian 
small square with that same one piece image
22:24 - the graphic corner uses the graphic corner 
circular image but this time the initializer  
22:32 - shows us it uses a full color image
22:36 - and we have one of those
22:40 - graphic circular uses the circular 
image with a full color image
22:54 - and finally the graphic extra large uses the  
22:57 - extra large circular image 
with a full color image as well
23:14 - now remember that i said our complication on 
the watch face is basically the same thing as  
23:19 - the template the timeline will never change 
so let's copy the template that we created  
23:26 - and paste them into the body of 
the current timeline entry function
23:32 - it breaks because it doesn't return a template 
it returns what's known as a complication  
23:38 - timeline entry we can create one then that's the 
construction of a date which is the current date  
23:46 - and the template which is what we just have  
23:51 - and then i can just copy this 
initializer and use it for everyone
23:59 - we're done our app is 
complete and it's time to test  
24:05 - to test make sure that you select 
the watchgit app and run it
24:11 - once it's run exit to the home screen 
and then long press and we see that  
24:17 - our default watch is the meridian and 
we can edit to choose a complication  
24:25 - swipe right twice to get the complication screen  
24:30 - and pick one to choose from 
the available app templates
24:36 - here's that joke
24:39 - when we tap on it our image it's a full 
image it's not a template but it looks pale  
24:46 - and that's because it's not 
being displayed in color
24:52 - if you swipe back one screen you can choose the  
24:55 - full color option and then you'll 
see our icon now in full color
25:06 - back now at the watch face we can 
tap on this and it launches our app
25:15 - let's add one more watch face exit to 
the home screen and then long press again  
25:22 - and swipe right to add a watch 
face let's add a chronograph
25:32 - do the same two swipes and 
pick a complication to change  
25:37 - or add like this one in the bottom right this 
uses the template icon that one piece version  
25:47 - i know this icon doesn't look great but i never 
did claim to be a graphic artist this was the  
25:52 - biggest struggle i had in creating this video is 
creating this image now i'll leave it up to you to  
25:59 - try out a variety of different watch faces in 
different positions like i'm showing you here  
26:04 - as i speed through this process play around with 
color settings as well to see what the difference  
26:10 - makes you can even add the same complication 
in two different locations on the watch face  
26:18 - you can never have too many dad jokes i guess  
26:22 - well this series has been a lot of fun to create 
and in fact i'm going to be publishing a free app  
26:28 - on the app store that uses a variation of 
this that i'm going to call dad nose it'll  
26:33 - offer you not only a selection of dad jokes but 
also a vocabulary builder or a selection from  
26:40 - a variety of inspirational sayings you can 
watch for that in the app store later this year  
26:47 - as always it's been a pleasure 
being able to contribute here  
26:51 - and many thanks to chris for giving me 
that opportunity and thank you for watching

Cleaned transcript:

hello and welcome it's chris here this is part 404 where my friend stuart lynch will show you how to create an app on multiple platforms if you've missed the previous parts don't worry there's a playlist right over there that you can check out and if you do enjoy these lessons do check out stuart's youtube channel as well alright let's dive in hi my name is stuart lanchan in this video we're going to be extending our dad jokes application once again currently we have a mac os target for the menu bar version an ios target for the iphone ipad version and a widget for the iphone and ipad in this video we're going to be adding another new target to our app we're going to create a watch kit app and a watch kit extension so that we can have our dad jokes application on our apple watch we'll finish up by adding in several complications so that our users will be able to launch the app from their watch face i highly recommend that you watch the first three videos of the series as each one builds on the other and depends on the previous one if you've completed the widget kit version then you can continue on from there or you can use a completed version of that third video and you can download that from the link in the description before i start coding i'd like to start a new branch so from that widget branch choose new branch from widget and name it watch kit we have all the content that we need to share between our existing targets in this shared folder at the top so before i create a new target for our watch app let me first collapse those other targets from the file menu now choose file new target select watch os and then scroll down to the application section we can create a watch app for ios app or we can create a standalone watch app there's no need for us to couple it with the ios app so we'll create the standalone app which means it can be installed independently you'll be able to delete your app from your iphone and it'll still be on your watch call the app dad jokes watch kit we won't be sending notifications so make sure you uncheck the include notification scene click on finish and make sure that you activate it to make it the current target you'll see that you have added not one but two different target groupings the first one is the watch kit app itself and the second one is the watch kit extension we'll be doing most of our work in the extension but when we run the app we want to make sure that we select the watch kit app target the assets folder in the app target is where the watch icon is located right now it's empty but i provided some assets for this tutorial and you can download them from the link provided delete the app icon and then drag in the one from the watch kit assets folder build the app so that it will compile the assets choose the watch kit app target now along with one of the apple watch simulators i have one paired here to the iphone 13 it's the 45 millimeter one when i run it you see that new icon spinning up as the application launches and it presents hello world return to the home screen if you're not seeing the watch frame i suggest you choose show device bezels from the window menu then tap on the crown and you'll see the app icon in the gallery long press on the gallery window and choose list view you'll see the name of our app and it's not really great so let's fix that now select the app target for the watch and change the display name to be just dad jokes tap out of that field to have it registered and then run once more tap on the crown now and you'll see that new name displayed in the list as with all targets the app has to start somewhere and that's the file marked with the app main designation as before i'm going to rename this file to something that i can quickly find so i'm going to call it watchkit entry and move it up to the top of the folder the app entry presents the content view as you can see and it's just swift ui let's refactor it by naming it watch os joke view making sure that all instances of the content view are replaced perfect time to start coding before we start coding our ui we'll need to access some of those classes and assets that we used on our other targets so open the shared folder and add the watchkit extension to the target membership for all of the files in the shared folder except for the joke view the joke view is only used for the mac and ios apps remember we have to redesign our own ui for the widget so we'll do the same thing here for the watch make sure that you also include the image asset while you're doing this make sure you choose the extension and not the app remember we're coding in the extension target let's set things up similar to how we set up the joke view for the mac app we need to have a state property for the joke string to toggle the displaying of the progress view and the stored property in app storage so we can keep track of the joke type so we can copy those from the joke view and paste them into our view we'll also need a function to fetch the joke from the api so let's copy that function from here too but since we already have our joke type here as a property i can remove it as an argument for our get joke function and just change the url to the app storage version i guess i could have done that in the first ones too if we're fetching the joke we just want to display a progress view else let's set up a v stack with an alignment of leading that will contain really just two elements one will be the joke and the other is going to be a refresh button that will make a new call to the api the first element then is a text view showing the joke string and in the case where it's really long we'll set a minimum scale factor of 0.5 to reduce the size next we'll add a spacer and at the bottom of the vstack we'll create an hstack add a spacer so that we can add a button to the trailing edge now this button will have an image using the system name go forward and then we can set a frame width of 40. for the action then we'll create an asynchronous task unit of work and await the fetching of a joke by calling the get job function let's add some horizontal padding to this vstack and then test it on the canvas by tapping the refresh button when we preview initially it says no joke available but when we tap on the refresh button the progress spinner shows until a new joke is fetched and displayed next now i want to add a background image of the dad but i want it to be faded so that we can still read the joke text so embed the entire ifelse clause including the padding in a zstack and then as the second element in the zstack create an image using that shared stuart lynch image make it resizable but set the opacity to 0.3 and then on that zstack add a task modifier so that when the view loads it will automatically await the arrival of a joke if we quickly go back and check the entry point you'll see that the watchkit joke view is embedded inside a navigation view this is great because we can use that to display a navigation title without having to embed our joke view inside a navigation view so return to the joke view and add a new state property called navigation title as a string and initialize it as an empty string then in the get joke function we can fetch the joke and grab that joke type from the json and then we'll remove the colon and that extra space that we found at the end by dropping the last two characters looks like i have to enclose this as a string finally then we can add a navigation title modifier to the zstack and that's the navigation title using that string navigation title currently we're always just retrieving a dad joke and i want our users to be able to make that choice so to do that i'm first going to create a new swiss ui view and call it type selection view we'll need the app storage joke type value and that is of type joke type and as always we set that default to dad joke in case it hadn't already been set now i'm going to replace the body with a list and then i'll use a for each loop to create a list of buttons from our joke type enum and remember that it's case iterable so we can use self as the id and create an item as the iterator within the list then we'll create a button that uses a text label and that will be the item's raw value and then the action will set that joke type property to the item value let's add some horizontal padding and then we can display what the current choice is by changing the tint color of the list item and do that by comparing it to the current iterated item to the selected one so if it's equal we'll set the tint to red and if not i'm going to use an rgb initializer where our all values are 0.9 and set the opacity to 0.3 and then i'll add some padding to the list and this view too will be in the navigation stack so we can set a navigation title to say joke types so how are we going to get to this view well that's easy with swift ui i am going to first embed both of these views in a tab view and allow the user to switch between them so switch back to the app entry point and then embed the watch get joke view within a tab view and then add the type selection view in as the second view if i run this now we can swipe between the two views and select a different joke type but we get this error here at our entry point and to be honest i'm not sure why but i found out how to resolve the issue create a new swift ui view and call it app tab view and here's the key add a private state property called selected tab and initialize it as 0. we place the body with a tab view that has the selection as an argument in the body of the tab view we can create our two views but we can also add a tag for each of the two views so zero for the first and one for the second if i return to our entry point now we can set this new view as our entry point let's run now and see if the error goes away it looks like it does and we can swipe and change our joke types that purple warning you see in the navigation bar up here goes nowhere and if you tap on it you see that if you relaunch the code it will be removed we fixed that problem now we have our app completed rather than getting the user to go to the app gallery however to select the app i like to provide a way for the user to access that app directly from the watch face and this can be done by way of a complication complications are those little icons on the watch face that often show some timely relevant information about the app like you do with the weather in our case however we're not going to be displaying any information rather we're simply going to have a recognizable icon that when it's tapped we'll launch the app you can see from the apple watch human interface guidelines page that there are many different types of complications and each of the watch faces have a different selection we're going to focus on only those watch faces that'll display an image like this circular small complication and this modular small both of these use a png image but only the alpha channel of that image is used the other complications like the graphic corner one will display a full color image as will this graphic circular so we're going to need to do three things we'll need to add some images for these two types of complications we'll need to specify which of the complications we want to support and then finally since we see that each of the complication types has a number of different display types and these are known as templates we'll need to specify which template that that particular complication family will use i found it difficult to find out which watch faces actually support which different complications fortunately brian may on his website i'll leave a link in the description has done that for us so you can see that in the link provided so first let's add those image assets drag them into the assets folder of the watch kit extension and then in the inspector with them both selected change the scale to a single scale because they're vector images select the one piece image and specify that it render as a template now you'll understand why i chose these peculiar names in just a minute when we created our app extension it provided us with a complication controller and you can see here that it's loaded with tons of boilerplate code and a lot of this code has to do with presenting timely information on the complication as i mentioned we will not be doing that we just want to use the complication as a launcher so what i'm going to do is remove all this code and start from scratch this generates a nonconformance error and we can allow xcode to generate the protocol steps for us like this but i'm not going to even use these two functions i'm going to use asynchronous versions of these functions instead remember when we created the intent handler for the widget it had two versions unfortunately xcode doesn't do that for us here but we can create them anyway and there are actually three required functions the first is the complication descriptors which returns an array of information about the complications that we want to offer the second will display a sample template that will be used by the user when they long press to pick the complication this is basically the same thing that's going to be placed on the watch face and that's done in the third function which is the current timeline entry this is sounding an awful lot like a widget provider doesn't it we're going to use the same descriptor for all of our complications so we'll return an array that's going to be a single item and that's a clk complication descriptor a clock kit complication descriptor for the identifier we're just going to use our watch kit bundle id com.createx all in my case dot dad jokes the display name for all of our complications is just going to be dad jokes and the supported families is the array containing all of the different complication types that you want to support and for me i'm just going to support circular small modular small utilitarian small graphic corner graphic circular and graphic extra large all of these will allow me to place a single image icon as the complication i'm not going to use any text or display any information from the app so both the localized sample template and the current timeline entry will need to have access to those two images so let me create two properties for these and then i'll use a guard check to make sure that they exist otherwise i'll return nil so if you made a typo you'll know right away so for the full color image we want a ui image named full color image for the one piece image we'll want a ui image of that name else we'll just return nil as i said so let's copy and paste that into the third function as well now we need to create a template for each of our families that we support so i'm going to use a switch statement and then i'm going to use some fancy xcode copy paste to edit and copy all of our types and turn them into cases to be inclusive then the default will be the remainder and we'll return nil because we're not supporting those ones that we haven't named for each one then we need to create a template and that's a clock get complication template a clk complication template so let me just copy that to my clipboard and then we can pick from autocomplete the template that we want to use for each one of our complication types for the circular small we'll want a simple image and it requires an image for rider which is a clock get image provider if we use the initializer on this type we see that it requires a one piece image and that's why i called our image that name so let's use that and then we return the template this process is going to be the same for every one of these families so let me just quickly go through these modular small uses the modular small simple image template and that uses another onepiece image utilitarian small uses the utilitarian small square with that same one piece image the graphic corner uses the graphic corner circular image but this time the initializer shows us it uses a full color image and we have one of those graphic circular uses the circular image with a full color image and finally the graphic extra large uses the extra large circular image with a full color image as well now remember that i said our complication on the watch face is basically the same thing as the template the timeline will never change so let's copy the template that we created and paste them into the body of the current timeline entry function it breaks because it doesn't return a template it returns what's known as a complication timeline entry we can create one then that's the construction of a date which is the current date and the template which is what we just have and then i can just copy this initializer and use it for everyone we're done our app is complete and it's time to test to test make sure that you select the watchgit app and run it once it's run exit to the home screen and then long press and we see that our default watch is the meridian and we can edit to choose a complication swipe right twice to get the complication screen and pick one to choose from the available app templates here's that joke when we tap on it our image it's a full image it's not a template but it looks pale and that's because it's not being displayed in color if you swipe back one screen you can choose the full color option and then you'll see our icon now in full color back now at the watch face we can tap on this and it launches our app let's add one more watch face exit to the home screen and then long press again and swipe right to add a watch face let's add a chronograph do the same two swipes and pick a complication to change or add like this one in the bottom right this uses the template icon that one piece version i know this icon doesn't look great but i never did claim to be a graphic artist this was the biggest struggle i had in creating this video is creating this image now i'll leave it up to you to try out a variety of different watch faces in different positions like i'm showing you here as i speed through this process play around with color settings as well to see what the difference makes you can even add the same complication in two different locations on the watch face you can never have too many dad jokes i guess well this series has been a lot of fun to create and in fact i'm going to be publishing a free app on the app store that uses a variation of this that i'm going to call dad nose it'll offer you not only a selection of dad jokes but also a vocabulary builder or a selection from a variety of inspirational sayings you can watch for that in the app store later this year as always it's been a pleasure being able to contribute here and many thanks to chris for giving me that opportunity and thank you for watching
