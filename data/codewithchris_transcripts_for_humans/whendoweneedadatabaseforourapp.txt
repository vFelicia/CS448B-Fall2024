With timestamps:

00:01 - [Music]
00:05 - hello welcome to this lesson where we
00:08 - are going to talk about different
00:09 - backend options for your app so first of
00:11 - all what is a backend and why do you
00:13 - need one you may have noticed that a lot
00:15 - of the beginner tutorials on iOS you
00:18 - build simple stuff like calculators or
00:20 - maybe news readers or something like
00:21 - that and it's purely one-sided the user
00:24 - is only consuming content and not
00:27 - producing content uh and the reason why
00:29 - is that as soon as you get into the
00:31 - realm of user accounts uh or account
00:34 - management or producing content that
00:37 - data that the user produces or that
00:39 - account that they created needs to be
00:41 - stored somewhere like that information
00:43 - that data it needs to exist somewhere so
00:46 - that's where we get into the backend
00:48 - territory where we need some sort of
00:51 - data store or database to hold that data
00:53 - and furthermore in the case of the user
00:56 - producing data uh that needs to be seen
00:59 - by other devices or other users it's not
01:02 - enough to store the data locally on the
01:04 - device you actually need to store the
01:07 - data somewhere that all of the different
01:10 - users can access that data so here are
01:13 - some examples where you would need to
01:15 - consider a backend for your app so if
01:18 - you have some notion of user accounts
01:20 - whether that's logging in or creating an
01:22 - account or registering uh whether you
01:24 - have leaderboards if you have users
01:27 - posting or generating content uh if
01:29 - you're m messaging other users if you're
01:31 - liking content you know you need to
01:33 - store that relationship somewhere or
01:35 - even if you want to implement the
01:36 - functionality where you syn data between
01:39 - different devices so if a user uh uses
01:42 - two different devices and you want to
01:44 - sync that data between those two devices
01:46 - for the same user you would still need a
01:48 - backend so let's take a look at the
01:50 - diagram and see what this sort of setup
01:53 - looks like I mentioned a little bit
01:56 - about a server in a database but
01:58 - visually what does that look like
02:00 - so in this diagram we have two people
02:03 - client a and client B they're using the
02:06 - same app on their respective devices uh
02:10 - and we have a server so a server is
02:12 - usually a physical piece of Hardware it
02:14 - may be a computer it may be well
02:16 - generally it is a computer that's
02:19 - specifically built to handle incoming
02:21 - requests from clients and then return
02:25 - the appropriate response so the server
02:27 - is a physical piece of hardware and a
02:29 - database is more of like um it's not a
02:33 - physical thing but it's a way to store
02:36 - data in a organized and relevant format
02:40 - uh which makes it easy to query and
02:42 - return data or to populate
02:45 - data so a database is just a system of
02:49 - data management uh but the actual data
02:51 - is stored on hard disks in the server so
02:55 - for client a if the user is creating an
02:57 - account or generating some cont content
03:00 - or liking something or maybe they got a
03:03 - high score and you're posting it on the
03:06 - leaderboard client a would send that
03:09 - data to the server as denoted by those
03:12 - arrows and then the server would store
03:14 - that data now client B another user
03:18 - somewhere else using the same app when
03:20 - they send a request to that server to
03:22 - return let's say all the high scores or
03:24 - all of the latest
03:25 - messages uh you know or different users
03:28 - that are on their friends list or
03:30 - whatever the server returns that data to
03:32 - client B which includes the data that
03:35 - client a just submitted to it so in this
03:38 - way you have multiple clients sending
03:40 - data to the server to store on the
03:42 - database and the server also retrieves
03:45 - and sends information back to the
03:47 - clients to display now this is a
03:49 - simplified example because in reality
03:52 - you probably have not just a single
03:54 - server but it'll be distributed between
03:56 - multiple servers but the idea is there
04:00 - so if you need to um store data or sync
04:03 - data across different devices you're
04:05 - going to need to implement something
04:07 - like this following diagram this shows
04:10 - how an IOS app would interact with a
04:12 - traditional mySQL database and if you're
04:15 - not familiar with mySQL databases
04:17 - they're most often used with websites
04:19 - and web apps but whenever I teach iOS to
04:22 - beginners I get an overwhelming request
04:25 - for showing people how to interact with
04:29 - mySQL database so this diagram
04:31 - illustrates how that would work the IOS
04:34 - app can't connect to the database
04:36 - directly instead you need to build
04:39 - additional serers side architecture
04:41 - which I have written there as web
04:43 - services which is essentially just code
04:46 - that sits in between the client and the
04:48 - server it handles the requests from the
04:51 - client uh and then interacts with the
04:54 - server or with the
04:56 - database I guess in this diagram it's
04:58 - not completely C but the web services
05:01 - will connect to the database and then
05:02 - either uh query data for returning to
05:06 - the client or it will insert data into
05:08 - the database so the the iPhone app can't
05:12 - connect to the database to do that
05:14 - directly and so you have to learn
05:17 - another programming language um and
05:19 - build additional infrastructure just to
05:23 - interact with that mySQL database
05:25 - however this isn't the only option for a
05:27 - backend for your app recognizing that
05:31 - people just wanted to build apps not
05:33 - necessarily fumble around with serers
05:35 - side architecture and serers side code
05:37 - these things called a backend as a
05:39 - service started cropping up and
05:41 - essentially what they do for you is
05:43 - remove away all of that complexity and
05:46 - just gives you a set of web services to
05:48 - interact with so you don't even have to
05:50 - build the web services you don't have to
05:51 - set up your um your database you don't
05:54 - have to worry about that database
05:55 - architecture all you need to do is send
05:57 - the data from your client to the web
05:59 - server service and then query the data
06:01 - back what happens behind the scenes you
06:03 - don't have to worry about and to make it
06:05 - easier still a lot of these platforms
06:08 - have Frameworks or sdks that you can add
06:12 - into your xcode project so you don't
06:14 - even need to create a request and send
06:17 - it to the web services all you need to
06:19 - do is stay in xcode and read their the
06:23 - platform documentation on how to save
06:26 - data and how to retrieve data so what
06:29 - are some of the advantages for using
06:31 - these platforms or backends as a service
06:34 - well to me the biggest Advantage is that
06:36 - you can stay focused on building your
06:38 - app and you don't have to worry about
06:39 - setting up all of that serers side
06:41 - architecture it's also very scalable and
06:43 - secure a lot of these platforms are
06:46 - built for the purpose of just being the
06:49 - backend for your app and so if your app
06:52 - takes off and becomes really popular you
06:54 - don't have to worry about buying more
06:56 - servers and replicating your database
06:58 - across the server and all that stuff cuz
07:01 - these platforms are built for that and
07:03 - it just kind of happens automatically
07:05 - behind the scenes it ends up saving you
07:07 - a lot of time because it's not just the
07:09 - setup right it's the maintenance as well
07:12 - so if you have your own databases and
07:15 - your own servers to worry about you're
07:17 - worrying about your servers and keeping
07:19 - them patched and up toate uh if you you
07:22 - know get attacked by hackers or
07:23 - something like that then you're worried
07:25 - about getting your servers back up and
07:27 - running not to say that these platforms
07:29 - can't be hacked or can be under attack
07:31 - but it's just that you won't have to
07:33 - worry about getting them back up and
07:35 - running uh and lastly these platforms
07:38 - make it really easy to use like I
07:41 - mentioned they have Frameworks you can
07:43 - just add to your xcode project and start
07:45 - using so in the following lessons we're
07:47 - going to be looking at one of these
07:50 - backends as a service called parse and
07:52 - it's got a very generous free plan so
07:55 - you don't have to worry about paying
07:57 - unless your app becomes really popular
07:59 - and it's actually my favorite one out of
08:01 - them all if you're interested in MySQL
08:05 - or using iCloud as a back end then check
08:09 - out the iOS toolbox course on my site
08:11 - where I cover those two platforms and
08:14 - many other topics but in the upcoming
08:16 - lessons I'll show you guys how to
08:18 - integrate pars into your project and how
08:20 - to save and retrieve data all right bye
08:22 - for now and I'll see you guys in the
08:24 - next lesson
08:26 - [Music]

Cleaned transcript:

hello welcome to this lesson where we are going to talk about different backend options for your app so first of all what is a backend and why do you need one you may have noticed that a lot of the beginner tutorials on iOS you build simple stuff like calculators or maybe news readers or something like that and it's purely onesided the user is only consuming content and not producing content uh and the reason why is that as soon as you get into the realm of user accounts uh or account management or producing content that data that the user produces or that account that they created needs to be stored somewhere like that information that data it needs to exist somewhere so that's where we get into the backend territory where we need some sort of data store or database to hold that data and furthermore in the case of the user producing data uh that needs to be seen by other devices or other users it's not enough to store the data locally on the device you actually need to store the data somewhere that all of the different users can access that data so here are some examples where you would need to consider a backend for your app so if you have some notion of user accounts whether that's logging in or creating an account or registering uh whether you have leaderboards if you have users posting or generating content uh if you're m messaging other users if you're liking content you know you need to store that relationship somewhere or even if you want to implement the functionality where you syn data between different devices so if a user uh uses two different devices and you want to sync that data between those two devices for the same user you would still need a backend so let's take a look at the diagram and see what this sort of setup looks like I mentioned a little bit about a server in a database but visually what does that look like so in this diagram we have two people client a and client B they're using the same app on their respective devices uh and we have a server so a server is usually a physical piece of Hardware it may be a computer it may be well generally it is a computer that's specifically built to handle incoming requests from clients and then return the appropriate response so the server is a physical piece of hardware and a database is more of like um it's not a physical thing but it's a way to store data in a organized and relevant format uh which makes it easy to query and return data or to populate data so a database is just a system of data management uh but the actual data is stored on hard disks in the server so for client a if the user is creating an account or generating some cont content or liking something or maybe they got a high score and you're posting it on the leaderboard client a would send that data to the server as denoted by those arrows and then the server would store that data now client B another user somewhere else using the same app when they send a request to that server to return let's say all the high scores or all of the latest messages uh you know or different users that are on their friends list or whatever the server returns that data to client B which includes the data that client a just submitted to it so in this way you have multiple clients sending data to the server to store on the database and the server also retrieves and sends information back to the clients to display now this is a simplified example because in reality you probably have not just a single server but it'll be distributed between multiple servers but the idea is there so if you need to um store data or sync data across different devices you're going to need to implement something like this following diagram this shows how an IOS app would interact with a traditional mySQL database and if you're not familiar with mySQL databases they're most often used with websites and web apps but whenever I teach iOS to beginners I get an overwhelming request for showing people how to interact with mySQL database so this diagram illustrates how that would work the IOS app can't connect to the database directly instead you need to build additional serers side architecture which I have written there as web services which is essentially just code that sits in between the client and the server it handles the requests from the client uh and then interacts with the server or with the database I guess in this diagram it's not completely C but the web services will connect to the database and then either uh query data for returning to the client or it will insert data into the database so the the iPhone app can't connect to the database to do that directly and so you have to learn another programming language um and build additional infrastructure just to interact with that mySQL database however this isn't the only option for a backend for your app recognizing that people just wanted to build apps not necessarily fumble around with serers side architecture and serers side code these things called a backend as a service started cropping up and essentially what they do for you is remove away all of that complexity and just gives you a set of web services to interact with so you don't even have to build the web services you don't have to set up your um your database you don't have to worry about that database architecture all you need to do is send the data from your client to the web server service and then query the data back what happens behind the scenes you don't have to worry about and to make it easier still a lot of these platforms have Frameworks or sdks that you can add into your xcode project so you don't even need to create a request and send it to the web services all you need to do is stay in xcode and read their the platform documentation on how to save data and how to retrieve data so what are some of the advantages for using these platforms or backends as a service well to me the biggest Advantage is that you can stay focused on building your app and you don't have to worry about setting up all of that serers side architecture it's also very scalable and secure a lot of these platforms are built for the purpose of just being the backend for your app and so if your app takes off and becomes really popular you don't have to worry about buying more servers and replicating your database across the server and all that stuff cuz these platforms are built for that and it just kind of happens automatically behind the scenes it ends up saving you a lot of time because it's not just the setup right it's the maintenance as well so if you have your own databases and your own servers to worry about you're worrying about your servers and keeping them patched and up toate uh if you you know get attacked by hackers or something like that then you're worried about getting your servers back up and running not to say that these platforms can't be hacked or can be under attack but it's just that you won't have to worry about getting them back up and running uh and lastly these platforms make it really easy to use like I mentioned they have Frameworks you can just add to your xcode project and start using so in the following lessons we're going to be looking at one of these backends as a service called parse and it's got a very generous free plan so you don't have to worry about paying unless your app becomes really popular and it's actually my favorite one out of them all if you're interested in MySQL or using iCloud as a back end then check out the iOS toolbox course on my site where I cover those two platforms and many other topics but in the upcoming lessons I'll show you guys how to integrate pars into your project and how to save and retrieve data all right bye for now and I'll see you guys in the next lesson
