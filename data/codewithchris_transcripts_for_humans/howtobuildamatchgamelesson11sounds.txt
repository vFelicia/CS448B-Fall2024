With timestamps:

00:00 - hello and welcome it's time to put the
00:02 - finishing touches on our app we're going
00:04 - to incorporate sound effects into our
00:06 - app we're going to randomize the cards
00:08 - so that the pair's don't appear right
00:10 - beside each other in our grid and
00:12 - furthermore we're going to add some
00:13 - logic so that each pair of cards can
00:16 - only appear once in our set of 16 cards
00:18 - all right so let's get going so the
00:21 - first thing I want you to do is download
00:23 - the zip file below the video which
00:24 - contains all of the sound files that
00:26 - we're going to use in the project and
00:28 - once you unzip it you're going to get
00:30 - this folder called sounds so open it up
00:33 - and actually before we drag it into our
00:36 - project why don't we go here in the file
00:38 - navigator and go create a new group
00:41 - called sounds and that's where we're
00:44 - going to place all of our sounds so
00:47 - double-click the sounds folder on your
00:50 - desktop or wherever you unzipped all of
00:52 - the WAV files and I'm just going to
00:55 - select all of them and drag them into my
00:58 - group right there now it's going to pop
01:01 - up this dialog menu and I want you to
01:04 - make sure that copy items if needed is
01:06 - enabled and this is going to make a copy
01:09 - of the sound files inside your project
01:11 - folder and not just have it refer to
01:14 - wherever those files are on your
01:16 - computer and so this way it keeps all of
01:19 - the files nice and tidy with the project
01:21 - and add two targets match app should
01:24 - also be enabled if this is not enabled
01:27 - your sounds won't be included in your
01:30 - app bundle which is that little neat
01:32 - package that represents your app and all
01:36 - of its resources and that bundle gets
01:38 - installed onto the device so you want to
01:40 - make sure that these sounds get included
01:42 - inside that app bundle like that now
01:45 - click finish and here you can see all of
01:49 - the sounds when you highlight one of
01:51 - them you should be able to play and hear
01:53 - it
01:57 - so this is when they get the match wrong
02:01 - and this is initially when the cards get
02:04 - laid out so those are my sounds there
02:06 - the next thing you want to do is click
02:09 - on this project node we're going to have
02:11 - to add an extra framework in order to
02:13 - get the classes that we can use for
02:16 - audio the reason it's in a separate
02:18 - framework is because not all apps need
02:21 - this audio capability and so that code
02:24 - isn't automatically bundled by default
02:26 - so if we need that stuff we can just
02:29 - simply add it under this general tab
02:32 - here if you scroll down to linked
02:35 - frameworks and libraries you can click
02:36 - this little plus icon and then I want
02:39 - you to search for AV that should filter
02:42 - the list enough that you can find AV
02:44 - foundation not framework so go ahead
02:46 - highlight and add that and there you go
02:49 - you should see that and next what we're
02:52 - going to do is we're going to create a
02:54 - new class and this is going to be a
02:57 - sound manager class this is where we're
03:00 - going to keep all of our audio code the
03:02 - reason why I'm not including it in the
03:05 - view controller and I actually could do
03:07 - that but to be honest I don't want it to
03:10 - get that messy in the view controller
03:12 - it's better to abstract these things out
03:14 - and having a separate sound manager
03:17 - class that contains all of the audio
03:18 - code allows us to use that class for
03:21 - various view controllers if this were a
03:24 - bigger project and it also gives us one
03:27 - place to look at to troubleshoot any
03:29 - audio related issues so we're going to
03:31 - go ahead and create a new class by
03:35 - choosing new file and it's going to be a
03:38 - swift file not a cocoa touch class
03:40 - because I don't need to subclass
03:42 - anything so I'm just going to choose
03:44 - Swift file click Next and I'm going to
03:47 - save Sound Manager click create and by
03:53 - default it's imported foundation we also
03:55 - want to import a V Foundation which is
03:58 - the framework we just added because by
04:01 - importing this framework it's going to
04:03 - allow us to use the classes inside that
04:05 - framework so let's declare a new class
04:09 - called sound
04:10 - manager just like that and the class we
04:15 - are using is called the let me just
04:20 - create this property is called the a/v
04:22 - audio player let's create it as an
04:27 - optional because we are going to create
04:30 - the actual object later on now this
04:32 - sound manager class is going to have a
04:34 - function or a method rather called play
04:37 - sound and we're going to pass in the
04:40 - sound which we want the sound manager to
04:42 - play you can see here that we do have
04:45 - four different sounds but instead of
04:47 - passing in let's say the name of the
04:50 - sound file I'm gonna do something cool
04:52 - and something that you've seen before
04:54 - actually so let me just go into the view
04:56 - controller and show you an example of
05:00 - what we're going to do so for example up
05:04 - here when we did the run loop statement
05:07 - in the previous lesson for mode you can
05:10 - see here that we just put in dot and
05:13 - then we chose common modes well what's
05:15 - happening right there let me let me just
05:18 - actually show you again so run loop
05:20 - without main dot add oops
05:23 - different add we wanted this one so in
05:27 - the first parameter we specify a timer
05:28 - but in the second parameter that's where
05:30 - I want to draw your attention to and we
05:32 - have to specify something called a run
05:35 - loop mode option you can see up here we
05:37 - specified common modes but what this
05:39 - actually is is an enumeration you can
05:43 - think of it as a set of predefined
05:45 - values and it's very useful to allow the
05:48 - user to pick from one of a set of
05:50 - options in this case if I show you if I
05:54 - hit dot like this or maybe the
05:56 - autocomplete it's not going to cooperate
05:58 - with us but if I type in run loop mode
06:00 - dot you can see these guys here are the
06:04 - values that I can choose and for my run
06:07 - the mode choice and that is what we want
06:11 - to do with our sound manager as well
06:14 - because we only have four different
06:15 - options so I want the user to pick from
06:18 - one of these four without having to
06:21 - really know about the file names and
06:24 - stuff
06:24 - like that so if we go back to the sound
06:26 - manager let me show you how to create an
06:28 - enumeration we're going to create it up
06:31 - here you use the keyword enum and you
06:36 - give your enumeration a name in the case
06:41 - that I just showed you it was wrong loop
06:43 - mode we are going to call it sound
06:45 - effect so you open up a set of curly
06:49 - brackets and inside you put all of the
06:51 - cases that it can be so for example we
06:54 - have a we have the flip sound effect and
06:58 - actually we want to use lowercase here
07:01 - just to follow the naming convention
07:04 - that Apple has proposed so we have
07:08 - shuffle as well we have it's a match and
07:12 - we have no match which is that ding
07:16 - sound we have ding wrong ding correct
07:19 - card flip and shuffle okay so when
07:23 - someone calls play sound they're going
07:25 - to have to specify a sound effect and
07:28 - we're going to do that ok so inside play
07:35 - sound we are going to create a variable
07:37 - called a sound file name is equal to an
07:42 - empty string and now depending on you
07:45 - know which case or which enumeration
07:49 - value they put in we can specify the
07:51 - appropriate sound file name to pass in
07:54 - to our audio player so we can use a
07:56 - switch statement and you can press ENTER
07:59 - for it to kind of come autocomplete for
08:03 - you we're going to switch on the effect
08:06 - so you can actually put that as the
08:07 - value and for the case we are going to
08:11 - say you know if this is a case of flip
08:14 - then the sound file name oops
08:18 - sound file name is going to be card flip
08:23 - we don't have to specify a wave
08:26 - let me just add some line breaks here so
08:29 - it's a little easier to read we have
08:31 - case dot shuffle in this case our file
08:35 - name is going to be
08:37 - shuffle we have case whoops
08:43 - case is match and that case sound file
08:47 - is ding correct and we have case is no
08:54 - match in this case the sound file name
08:57 - is ding wrong now if it's default if
09:05 - it's none of those options then we'll
09:08 - just leave salt sound file name as an
09:11 - empty string now it shouldn't be that
09:13 - way because I guess I missed these
09:17 - colons here because we are specifying an
09:23 - enumeration it should be one of these 4
09:25 - values here ok so in terms of
09:30 - indentation I kind of like to indent it
09:33 - like this but I'm curious to see what
09:37 - the default indentation is actually so
09:40 - what we can do is actually go into
09:42 - editor if we go into structure we can
09:49 - reinvent everything let's highlight
09:52 - everything first structure we indent
09:55 - everything and that's going to properly
09:57 - indent everything for us so I guess by
10:00 - default it likes to line up the case
10:02 - with the switch so we can leave it like
10:04 - that default will never be executed it
10:07 - that's exactly what I said no I wonder
10:11 - if they'll let me remove it because I
10:12 - think with switch statements you
10:13 - actually do need a default case maybe
10:17 - not if you're switching on an
10:19 - enumeration because that's only from a
10:22 - set of known values like I said all
10:25 - right that's great so let's add some
10:28 - comments around here so determine which
10:32 - sound effect we want to play and choose
10:38 - the and set the
10:43 - appropriate file name all right now we
10:48 - get into actually specifying the URL of
10:51 - the sound file remember when I told you
10:54 - that when you added these sound files to
10:57 - make sure that under membership that it
11:00 - was enabled for the match up well what
11:03 - it does is when you compile your app and
11:06 - it gets put on an actual device those
11:09 - sound files get included in the app
11:11 - bundle now what we need to do in order
11:14 - to play that sound is we need to find
11:16 - the path to that sound file in that app
11:19 - bundle we need to specify that so if we
11:22 - go back to the sound manager there is a
11:24 - way to determine that and you can
11:27 - actually access the bundle and we want
11:30 - the main bundle and we want the path for
11:35 - resource of type this is the one you
11:39 - want path for resource of type returns
11:43 - the full path name for the resource
11:44 - identified by the specified name and
11:47 - file extension okay so we're going to
11:50 - choose that one the resource is the
11:52 - sound file name and the type is going to
11:56 - be WAV make sure that this matches
12:00 - exactly these file extensions here if
12:03 - it's mv3 you would put mp3 so this
12:06 - returns the path let's put it into a
12:09 - constant let's call this bundle path and
12:13 - this returns an optional string it could
12:16 - be nil because if it can't find the
12:18 - sound file in the bundle it's going to
12:21 - return nil and if it returns nil we're
12:23 - kind of dead in the water we can't
12:25 - really do anything about that there must
12:28 - be something wrong you might have
12:29 - specified a typo or something like that
12:31 - so we're just gonna put a guard
12:33 - statement here
12:33 - guard guard bundle path is not equal to
12:38 - nil else if it is no then we have no
12:41 - choice to return and we can actually
12:44 - just print out couldn't find sound file
12:51 - [Music]
12:57 - sound file name in the bundle so if this
13:01 - is the case for you I would make sure
13:02 - that these wav files are included in
13:06 - this target and as well that you're
13:10 - specifying these file names that match
13:13 - directly with the file names here and
13:15 - that the extension also matches okay so
13:20 - here you get the path to this sound file
13:25 - inside the bundle next we have to create
13:32 - a he URL object from this string and the
13:38 - reason we have to do that is because the
13:40 - a/v audio player that actually plays the
13:42 - sound it needs a URL object and I know
13:47 - this because I've used it before and you
13:48 - are about to find out I'm just saving
13:50 - you that trouble here so let sound URL
13:55 - equals a URL object and see there's
13:59 - actually a class called URL and there
14:04 - are a whole bunch of different
14:07 - initialization methods that we can use
14:10 - so what we want is this one you are elf
14:18 - file URL with path and then we would
14:25 - pass in the bundled half like that and
14:28 - I'm going to actually force unwrap that
14:30 - optional because we had to have this
14:33 - guard statement so if it comes here I do
14:35 - know that a bundle path isn't nil okay
14:38 - after all of those steps we can finally
14:41 - create our audio player create audio
14:44 - player object so remember up here we
14:48 - have a property called audio player for
14:50 - it so that's what I'm going to assign
14:53 - our object into let's create a new a V
14:58 - audio player and we are going to use
15:02 - this one
15:03 - we're gonna initialize it to contents of
15:06 - and you can see here that we specify a
15:09 - URL object to pass in and we do have
15:13 - that here
15:14 - sound the URL that's what we're gonna
15:16 - pass in but notice this keyword here
15:18 - throws this keyword basically means that
15:22 - when you try to create this AV audio
15:24 - player if it can't find that sound file
15:28 - for any reason at that URL it's going to
15:30 - throw an error so you actually have to
15:33 - handle that I'm using this special do
15:36 - tries or do catch statement which I'm
15:38 - going to show you in just a second so
15:41 - just pay attention to any method calls
15:44 - or initialization methods that you use
15:47 - that have this keyword throws in it and
15:49 - actually even if you forget it's okay
15:52 - because Xcode is going to warn you if
15:54 - you forget to handle this error so we
15:58 - have to be careful of that so we're
16:02 - gonna pass in the sound URL and let's
16:04 - just yeah I don't even have to build up
16:07 - Xcode has seen the error
16:08 - call can throw but it's not marked with
16:10 - try and the error is not handled okay so
16:15 - this first part marked with try is you
16:20 - have to put this keyword called try in
16:23 - front of that method or initialization
16:26 - method which throws an error and then
16:29 - what you have to do is you have to wrap
16:31 - that statement or a group of statements
16:33 - inside a do catch block it's almost like
16:41 - an if statement let's indent this
16:46 - and so you can see the Xcode error has
16:49 - gone let me just explain what's
16:51 - happening here so like I said this
16:54 - statement throws an error if it can't
16:58 - create the AV audio player object and
17:00 - since it throws an error you have to
17:03 - specify this keyword in front of it
17:05 - called try so if you read it like
17:07 - playing English you're going to try to
17:10 - create an AV audio player object if it
17:13 - fails it's going to come down into here
17:17 - this catch block of code here so you can
17:19 - what will usually happen is couldn't
17:24 - create audio player object maybe logged
17:28 - the error or something like that so
17:30 - print it couldn't create the audio
17:34 - player object for sound file and you can
17:42 - specify that sound file a sound file
17:47 - name like that just so you can
17:48 - troubleshoot what's wrong with that
17:49 - particular sound file and down here you
17:55 - can finally if all else is going
17:59 - smoothly you can finally call the play
18:03 - function on the audio player to play the
18:06 - sound okay and that is it for our sound
18:11 - manager play the sound here
18:17 - okay so let's review what we've done
18:20 - here so we have an audio player property
18:23 - we have a sound effect enumeration which
18:26 - lets us specify one of four values
18:29 - because we only have four sounds this
18:31 - place sound function is going to accept
18:34 - and sound effect enumeration value it's
18:38 - going to determine the file name of the
18:41 - sound to use based on what value is
18:43 - passed in and then we go about getting a
18:46 - path to that sound file and then
18:49 - creating the audio player and finally
18:50 - playing the sound so now let's move back
18:54 - to the view controller and use our sound
18:56 - manager we're going to scroll up here in
18:59 - to the property section let's create a
19:02 - sound manager we're gonna instantiate
19:05 - this property to a new sound manager
19:08 - object and then we're going to play the
19:10 - shuffle sound at the start and we're
19:13 - gonna want to do that in the did view
19:18 - did appear we're gonna override this the
19:20 - this method gets called when the view is
19:22 - presented to the user so from here we
19:25 - can call sound manager dot play sound
19:27 - and you can go ahead and hit dot and
19:30 - choose shuffle so now let's run our app
19:35 - and just listen to see if that sound
19:37 - gets played okay so you can see that
19:41 - that sound is played there there are a
19:45 - couple of different places that we want
19:46 - to also add our sound so for example
19:49 - when the collection view did select item
19:58 - when the card flips alright we can also
20:06 - play the sound here
20:16 - play sound dot flip so you can hear that
20:31 - now let's integrate the sounds for the
20:34 - match or not match so here when it's a
20:38 - match play sound a sound manager dot
20:43 - play sound match and if it's not a match
20:47 - we also want to play sound ok so let's
20:55 - run the project again all right so all
21:08 - of our sounds are playing that's great
21:10 - there is one more thing I want to show
21:12 - you and that is that there isn't really
21:16 - a reason for us to have to create a
21:19 - sound manager object because all we're
21:22 - doing is calling that place sound
21:24 - function and the object never needs to
21:26 - retain any values across different calls
21:30 - so there really isn't a point for us to
21:33 - have to create a sound manager object
21:35 - instead we can do something like this
21:38 - where you can see this timer is a class
21:41 - and this scheduled timer is actually a
21:46 - type method of that class so we don't
21:48 - have to create a timer object in order
21:52 - to call this method here so let me show
21:54 - you what we can do so go ahead and erase
21:57 - this statement like that you're gonna
22:00 - get a bunch of errors but ignore them
22:02 - for now in sound manager what we want to
22:05 - do is simply add the keyword static in
22:10 - front of this function play sound and
22:12 - we're going to have to add static in
22:15 - front of this property as well because
22:17 - this property is used inside play sound
22:20 - which is also a static method so you're
22:23 - going to have to make sure that the
22:25 - variables used inside or properties use
22:28 - inside are also static what this does is
22:31 - it allows us back in view controller
22:34 - let's scroll down to the view did appear
22:36 - it allows us to
22:39 - this should actually be an error it
22:41 - allows us to call play sound like this
22:44 - so we can call the class sound manager
22:47 - dot play sound like that see so we don't
22:53 - actually have to create a sound manager
22:55 - object and call that objects play sound
22:59 - method because play sound this is
23:02 - actually a type method of the sound
23:04 - manager class now or it's a class method
23:07 - in other programming languages it might
23:10 - be known as a class a method instead of
23:13 - a type method but in Swift it's called a
23:15 - type method so let's go down to the
23:17 - other places and check for matches we're
23:22 - gonna call it all in the class itself
23:24 - now all on the class whereas the last
23:29 - place there's one more error there it is
23:33 - flip okay now let's run the project and
23:38 - make sure that all of our sounds are
23:41 - still playing
23:51 - so there's actually two more things to
23:53 - do before we can end off our match app
23:55 - and that is in the card model we have to
23:58 - randomize the array of cards and also to
24:01 - make it so that we only have unique
24:03 - pairs of cards
24:04 - so let's actually tackle this guy first
24:06 - because it's easier to check before we
24:09 - randomized the cards and the way we're
24:12 - going to accomplish this is we're just
24:14 - going to keep an array of all of the
24:17 - generated numbers that we have accepted
24:20 - or that we've already generated and
24:23 - before we you know create new cards
24:27 - we're just going to double check that
24:28 - the random number generated up here
24:30 - isn't one that we have already generated
24:33 - so let me show you how that works so up
24:36 - here in this function of get cards we're
24:38 - going to declare an array to store
24:41 - numbers we've already generated I'm
24:47 - gonna call this the generated numbers
24:51 - array and it is just going to be an
24:54 - integer array it's gonna be empty
24:57 - initially right and right here inside
25:02 - this for loop we're doing it eight times
25:04 - and we are generating a random number
25:08 - each time now before we go ahead and do
25:11 - all of this stuff which is creating the
25:13 - two cards setting the image names and
25:16 - then adding them to the generated cards
25:18 - array before we do any of that we need
25:21 - to check that this random number isn't
25:23 - one that we already have so the way we
25:27 - do that is we're just going to say if
25:31 - generated numbers array contains and
25:35 - this returns a boolean whether or not
25:38 - the array contains the element in
25:40 - question so we're going to put in random
25:43 - number if this is equal to false that's
25:48 - when we want to do all of this stuff
25:49 - right so let's cut all of this stuff and
25:53 - put it into here
25:56 - okay so we're only gonna do this code if
26:00 - the random number if the random number
26:04 - isn't one that we already have inside
26:07 - the generated numbers all right can I
26:09 - convert value of okay so we're going to
26:12 - cast this as an int okay so sorry you
26:25 - got to do that okay so if it is a number
26:31 - we don't have yet then we want to log
26:33 - the number print the random number but
26:35 - as well store the number into the
26:39 - generated numbers array so that next
26:44 - time we check you know this number is
26:47 - already used up so we can append new
26:50 - element we can append the random number
26:58 - and this is gonna we're gonna have to
27:02 - cast that as an int again all right so
27:05 - that's basically it there's one more
27:08 - thing we have to do actually ensure that
27:16 - the random number isn't one we already
27:21 - have okay so we need to change this loop
27:28 - because this only runs eight times and
27:32 - in eight iterations of this loop we
27:35 - can't guarantee that we will generate
27:38 - eight unique random numbers so instead
27:41 - we need to use a while loop and run for
27:45 - as many times as we need until generated
27:48 - numbers array reaches the count of eight
27:51 - so we are going to say while generated
27:57 - numbers array dot count is less than
28:03 - less than or equal to no less than eight
28:06 - because once it reaches eight we don't
28:09 - want to run it again so this should make
28:12 - sure that all of the cards are random so
28:16 - in the view controller let us give
28:19 - ourselves a little more time let's say
28:21 - thirty seconds let's run the app and
28:24 - well actually we don't even need to do
28:27 - that because we are printing the numbers
28:28 - so you can see here for thirteen eight
28:30 - two six five one three let's run that
28:35 - again hmm didn't print anything that
28:40 - time what happened there okay nine seven
28:46 - one eight eleven twelve six four I'm
28:49 - pretty satisfied that these numbers are
28:53 - unique eleven ten to nine one thirteen
28:56 - six seven okay now it's time to mix them
29:00 - up okay let's mix them up so in the card
29:09 - model in here for randomizing the race
29:13 - so the cards we have to randomize are
29:16 - inside this generated cards array it's
29:18 - an array of card objects so you might be
29:21 - tempted to do something like this where
29:25 - let's say you want it to swap at the
29:27 - first two cards zero and one so you
29:30 - might be tempted to do something like so
29:36 - this isn't actually going to work like
29:38 - you think it will because what you're
29:40 - doing here in the first line is you are
29:42 - making index 0 equal to index 1 so after
29:48 - this line executes both 0 & 1 are equal
29:51 - in terms of the card that they point to
29:54 - so this line does nothing because 0 & 1
29:59 - point to the same card anyways what you
30:02 - want to do before executing this line
30:04 - where you're essentially going to lose
30:08 - the card that slot 0 was pointing to by
30:11 - assigning it this you want to preserve
30:14 - that card first
30:15 - so you're gonna say let temporary
30:18 - storage let's hold on to the card at
30:23 - index zero all right we're gonna store
30:26 - that card at zero into temporary storage
30:30 - and then we are going to overwrite index
30:33 - zero with whatever card index one is and
30:37 - then lastly in order to complete the
30:39 - swap we assign into spot one the card
30:45 - that we stored we put into temporary
30:48 - storage right it was originally the card
30:51 - at zero so now you have the completed
30:55 - swap you have the card at slot one in
30:59 - slot zero and you have the card at slot
31:03 - zero now in slot 1 so that is swapping
31:08 - two cards now we have to do it randomly
31:11 - right so instead of swapping 0 & 1 why
31:15 - don't we swap 0 and a random number so
31:19 - we're gonna do let random number equal
31:23 - to arc for random uniform and we're
31:26 - gonna say the upper bound is generated
31:29 - cards array dot count and this is
31:35 - actually going to throw an error because
31:37 - the expected argument type is let's see
31:42 - if I can expand it here is you into 32
31:45 - and actually we can just click fix and
31:48 - it's going to convert that count to a un
31:51 - 32 which is what it needs and then we
31:55 - are going to pass in random number
31:57 - instead of 1
32:03 - the funny thing is we probably have to
32:06 - cast this as an INT now see you cannot
32:08 - use a subscript with an index of UN 32
32:13 - okay so what we can do is just cast the
32:17 - result of this random number to an
32:19 - integer so at this point these three
32:23 - lines of code is swapping the card at
32:26 - spot zero with a random spot
32:28 - so that's just one swap in order to
32:32 - randomize it some more we are going to
32:35 - go through all the indexes in the array
32:37 - starting from zero and we're going to
32:40 - choose a random number and perform the
32:42 - swap so that's how this is going to work
32:46 - so we're going to say for let's say I in
32:53 - 0-2 generated cards array dot count oops
33:03 - I don't want to cut that next and then
33:07 - we are going to indent all of this and
33:10 - instead of zero we're gonna put in I so
33:15 - at the end of the day you should have
33:16 - code that looks like this
33:21 - all right this is the swapping code swap
33:24 - the two cards find a random index to
33:31 - swap with and this should return our
33:35 - randomized array so let's test if this
33:37 - works no index out of range so I
33:44 - probably have to do minus one
33:51 - all right so let's see if these are
33:53 - randomized these two look the same but
33:55 - once a closed box and once an open box
33:57 - so this looks pretty randomized to me
34:00 - and I'm gonna leave it up to you in
34:15 - terms of how long you should let the
34:17 - user try to match all the cards and with
34:20 - that our match app is done
34:23 - congratulations you've completed the
34:26 - match app you've learned quite a bit in
34:28 - this module including how to use the MVC
34:30 - design pattern how to use custom classes
34:33 - how to use collection views delegates
34:35 - and protocols you learned how to use the
34:37 - Xcode debugging tools to troubleshoot
34:39 - your project you also learn best
34:41 - practices in terms of organizing your
34:42 - project and naming all of your variables
34:44 - classes and methods you also learned how
34:47 - to show alerts and how to use timers and
34:49 - best of all you learned all of these
34:51 - things while building a tangible app
34:53 - you're making amazing progress and
34:55 - there's a lot more exciting things to
34:57 - learn so let's move forward I'll see you
34:59 - in the next module

Cleaned transcript:

hello and welcome it's time to put the finishing touches on our app we're going to incorporate sound effects into our app we're going to randomize the cards so that the pair's don't appear right beside each other in our grid and furthermore we're going to add some logic so that each pair of cards can only appear once in our set of 16 cards all right so let's get going so the first thing I want you to do is download the zip file below the video which contains all of the sound files that we're going to use in the project and once you unzip it you're going to get this folder called sounds so open it up and actually before we drag it into our project why don't we go here in the file navigator and go create a new group called sounds and that's where we're going to place all of our sounds so doubleclick the sounds folder on your desktop or wherever you unzipped all of the WAV files and I'm just going to select all of them and drag them into my group right there now it's going to pop up this dialog menu and I want you to make sure that copy items if needed is enabled and this is going to make a copy of the sound files inside your project folder and not just have it refer to wherever those files are on your computer and so this way it keeps all of the files nice and tidy with the project and add two targets match app should also be enabled if this is not enabled your sounds won't be included in your app bundle which is that little neat package that represents your app and all of its resources and that bundle gets installed onto the device so you want to make sure that these sounds get included inside that app bundle like that now click finish and here you can see all of the sounds when you highlight one of them you should be able to play and hear it so this is when they get the match wrong and this is initially when the cards get laid out so those are my sounds there the next thing you want to do is click on this project node we're going to have to add an extra framework in order to get the classes that we can use for audio the reason it's in a separate framework is because not all apps need this audio capability and so that code isn't automatically bundled by default so if we need that stuff we can just simply add it under this general tab here if you scroll down to linked frameworks and libraries you can click this little plus icon and then I want you to search for AV that should filter the list enough that you can find AV foundation not framework so go ahead highlight and add that and there you go you should see that and next what we're going to do is we're going to create a new class and this is going to be a sound manager class this is where we're going to keep all of our audio code the reason why I'm not including it in the view controller and I actually could do that but to be honest I don't want it to get that messy in the view controller it's better to abstract these things out and having a separate sound manager class that contains all of the audio code allows us to use that class for various view controllers if this were a bigger project and it also gives us one place to look at to troubleshoot any audio related issues so we're going to go ahead and create a new class by choosing new file and it's going to be a swift file not a cocoa touch class because I don't need to subclass anything so I'm just going to choose Swift file click Next and I'm going to save Sound Manager click create and by default it's imported foundation we also want to import a V Foundation which is the framework we just added because by importing this framework it's going to allow us to use the classes inside that framework so let's declare a new class called sound manager just like that and the class we are using is called the let me just create this property is called the a/v audio player let's create it as an optional because we are going to create the actual object later on now this sound manager class is going to have a function or a method rather called play sound and we're going to pass in the sound which we want the sound manager to play you can see here that we do have four different sounds but instead of passing in let's say the name of the sound file I'm gonna do something cool and something that you've seen before actually so let me just go into the view controller and show you an example of what we're going to do so for example up here when we did the run loop statement in the previous lesson for mode you can see here that we just put in dot and then we chose common modes well what's happening right there let me let me just actually show you again so run loop without main dot add oops different add we wanted this one so in the first parameter we specify a timer but in the second parameter that's where I want to draw your attention to and we have to specify something called a run loop mode option you can see up here we specified common modes but what this actually is is an enumeration you can think of it as a set of predefined values and it's very useful to allow the user to pick from one of a set of options in this case if I show you if I hit dot like this or maybe the autocomplete it's not going to cooperate with us but if I type in run loop mode dot you can see these guys here are the values that I can choose and for my run the mode choice and that is what we want to do with our sound manager as well because we only have four different options so I want the user to pick from one of these four without having to really know about the file names and stuff like that so if we go back to the sound manager let me show you how to create an enumeration we're going to create it up here you use the keyword enum and you give your enumeration a name in the case that I just showed you it was wrong loop mode we are going to call it sound effect so you open up a set of curly brackets and inside you put all of the cases that it can be so for example we have a we have the flip sound effect and actually we want to use lowercase here just to follow the naming convention that Apple has proposed so we have shuffle as well we have it's a match and we have no match which is that ding sound we have ding wrong ding correct card flip and shuffle okay so when someone calls play sound they're going to have to specify a sound effect and we're going to do that ok so inside play sound we are going to create a variable called a sound file name is equal to an empty string and now depending on you know which case or which enumeration value they put in we can specify the appropriate sound file name to pass in to our audio player so we can use a switch statement and you can press ENTER for it to kind of come autocomplete for you we're going to switch on the effect so you can actually put that as the value and for the case we are going to say you know if this is a case of flip then the sound file name oops sound file name is going to be card flip we don't have to specify a wave let me just add some line breaks here so it's a little easier to read we have case dot shuffle in this case our file name is going to be shuffle we have case whoops case is match and that case sound file is ding correct and we have case is no match in this case the sound file name is ding wrong now if it's default if it's none of those options then we'll just leave salt sound file name as an empty string now it shouldn't be that way because I guess I missed these colons here because we are specifying an enumeration it should be one of these 4 values here ok so in terms of indentation I kind of like to indent it like this but I'm curious to see what the default indentation is actually so what we can do is actually go into editor if we go into structure we can reinvent everything let's highlight everything first structure we indent everything and that's going to properly indent everything for us so I guess by default it likes to line up the case with the switch so we can leave it like that default will never be executed it that's exactly what I said no I wonder if they'll let me remove it because I think with switch statements you actually do need a default case maybe not if you're switching on an enumeration because that's only from a set of known values like I said all right that's great so let's add some comments around here so determine which sound effect we want to play and choose the and set the appropriate file name all right now we get into actually specifying the URL of the sound file remember when I told you that when you added these sound files to make sure that under membership that it was enabled for the match up well what it does is when you compile your app and it gets put on an actual device those sound files get included in the app bundle now what we need to do in order to play that sound is we need to find the path to that sound file in that app bundle we need to specify that so if we go back to the sound manager there is a way to determine that and you can actually access the bundle and we want the main bundle and we want the path for resource of type this is the one you want path for resource of type returns the full path name for the resource identified by the specified name and file extension okay so we're going to choose that one the resource is the sound file name and the type is going to be WAV make sure that this matches exactly these file extensions here if it's mv3 you would put mp3 so this returns the path let's put it into a constant let's call this bundle path and this returns an optional string it could be nil because if it can't find the sound file in the bundle it's going to return nil and if it returns nil we're kind of dead in the water we can't really do anything about that there must be something wrong you might have specified a typo or something like that so we're just gonna put a guard statement here guard guard bundle path is not equal to nil else if it is no then we have no choice to return and we can actually just print out couldn't find sound file sound file name in the bundle so if this is the case for you I would make sure that these wav files are included in this target and as well that you're specifying these file names that match directly with the file names here and that the extension also matches okay so here you get the path to this sound file inside the bundle next we have to create a he URL object from this string and the reason we have to do that is because the a/v audio player that actually plays the sound it needs a URL object and I know this because I've used it before and you are about to find out I'm just saving you that trouble here so let sound URL equals a URL object and see there's actually a class called URL and there are a whole bunch of different initialization methods that we can use so what we want is this one you are elf file URL with path and then we would pass in the bundled half like that and I'm going to actually force unwrap that optional because we had to have this guard statement so if it comes here I do know that a bundle path isn't nil okay after all of those steps we can finally create our audio player create audio player object so remember up here we have a property called audio player for it so that's what I'm going to assign our object into let's create a new a V audio player and we are going to use this one we're gonna initialize it to contents of and you can see here that we specify a URL object to pass in and we do have that here sound the URL that's what we're gonna pass in but notice this keyword here throws this keyword basically means that when you try to create this AV audio player if it can't find that sound file for any reason at that URL it's going to throw an error so you actually have to handle that I'm using this special do tries or do catch statement which I'm going to show you in just a second so just pay attention to any method calls or initialization methods that you use that have this keyword throws in it and actually even if you forget it's okay because Xcode is going to warn you if you forget to handle this error so we have to be careful of that so we're gonna pass in the sound URL and let's just yeah I don't even have to build up Xcode has seen the error call can throw but it's not marked with try and the error is not handled okay so this first part marked with try is you have to put this keyword called try in front of that method or initialization method which throws an error and then what you have to do is you have to wrap that statement or a group of statements inside a do catch block it's almost like an if statement let's indent this and so you can see the Xcode error has gone let me just explain what's happening here so like I said this statement throws an error if it can't create the AV audio player object and since it throws an error you have to specify this keyword in front of it called try so if you read it like playing English you're going to try to create an AV audio player object if it fails it's going to come down into here this catch block of code here so you can what will usually happen is couldn't create audio player object maybe logged the error or something like that so print it couldn't create the audio player object for sound file and you can specify that sound file a sound file name like that just so you can troubleshoot what's wrong with that particular sound file and down here you can finally if all else is going smoothly you can finally call the play function on the audio player to play the sound okay and that is it for our sound manager play the sound here okay so let's review what we've done here so we have an audio player property we have a sound effect enumeration which lets us specify one of four values because we only have four sounds this place sound function is going to accept and sound effect enumeration value it's going to determine the file name of the sound to use based on what value is passed in and then we go about getting a path to that sound file and then creating the audio player and finally playing the sound so now let's move back to the view controller and use our sound manager we're going to scroll up here in to the property section let's create a sound manager we're gonna instantiate this property to a new sound manager object and then we're going to play the shuffle sound at the start and we're gonna want to do that in the did view did appear we're gonna override this the this method gets called when the view is presented to the user so from here we can call sound manager dot play sound and you can go ahead and hit dot and choose shuffle so now let's run our app and just listen to see if that sound gets played okay so you can see that that sound is played there there are a couple of different places that we want to also add our sound so for example when the collection view did select item when the card flips alright we can also play the sound here play sound dot flip so you can hear that now let's integrate the sounds for the match or not match so here when it's a match play sound a sound manager dot play sound match and if it's not a match we also want to play sound ok so let's run the project again all right so all of our sounds are playing that's great there is one more thing I want to show you and that is that there isn't really a reason for us to have to create a sound manager object because all we're doing is calling that place sound function and the object never needs to retain any values across different calls so there really isn't a point for us to have to create a sound manager object instead we can do something like this where you can see this timer is a class and this scheduled timer is actually a type method of that class so we don't have to create a timer object in order to call this method here so let me show you what we can do so go ahead and erase this statement like that you're gonna get a bunch of errors but ignore them for now in sound manager what we want to do is simply add the keyword static in front of this function play sound and we're going to have to add static in front of this property as well because this property is used inside play sound which is also a static method so you're going to have to make sure that the variables used inside or properties use inside are also static what this does is it allows us back in view controller let's scroll down to the view did appear it allows us to this should actually be an error it allows us to call play sound like this so we can call the class sound manager dot play sound like that see so we don't actually have to create a sound manager object and call that objects play sound method because play sound this is actually a type method of the sound manager class now or it's a class method in other programming languages it might be known as a class a method instead of a type method but in Swift it's called a type method so let's go down to the other places and check for matches we're gonna call it all in the class itself now all on the class whereas the last place there's one more error there it is flip okay now let's run the project and make sure that all of our sounds are still playing so there's actually two more things to do before we can end off our match app and that is in the card model we have to randomize the array of cards and also to make it so that we only have unique pairs of cards so let's actually tackle this guy first because it's easier to check before we randomized the cards and the way we're going to accomplish this is we're just going to keep an array of all of the generated numbers that we have accepted or that we've already generated and before we you know create new cards we're just going to double check that the random number generated up here isn't one that we have already generated so let me show you how that works so up here in this function of get cards we're going to declare an array to store numbers we've already generated I'm gonna call this the generated numbers array and it is just going to be an integer array it's gonna be empty initially right and right here inside this for loop we're doing it eight times and we are generating a random number each time now before we go ahead and do all of this stuff which is creating the two cards setting the image names and then adding them to the generated cards array before we do any of that we need to check that this random number isn't one that we already have so the way we do that is we're just going to say if generated numbers array contains and this returns a boolean whether or not the array contains the element in question so we're going to put in random number if this is equal to false that's when we want to do all of this stuff right so let's cut all of this stuff and put it into here okay so we're only gonna do this code if the random number if the random number isn't one that we already have inside the generated numbers all right can I convert value of okay so we're going to cast this as an int okay so sorry you got to do that okay so if it is a number we don't have yet then we want to log the number print the random number but as well store the number into the generated numbers array so that next time we check you know this number is already used up so we can append new element we can append the random number and this is gonna we're gonna have to cast that as an int again all right so that's basically it there's one more thing we have to do actually ensure that the random number isn't one we already have okay so we need to change this loop because this only runs eight times and in eight iterations of this loop we can't guarantee that we will generate eight unique random numbers so instead we need to use a while loop and run for as many times as we need until generated numbers array reaches the count of eight so we are going to say while generated numbers array dot count is less than less than or equal to no less than eight because once it reaches eight we don't want to run it again so this should make sure that all of the cards are random so in the view controller let us give ourselves a little more time let's say thirty seconds let's run the app and well actually we don't even need to do that because we are printing the numbers so you can see here for thirteen eight two six five one three let's run that again hmm didn't print anything that time what happened there okay nine seven one eight eleven twelve six four I'm pretty satisfied that these numbers are unique eleven ten to nine one thirteen six seven okay now it's time to mix them up okay let's mix them up so in the card model in here for randomizing the race so the cards we have to randomize are inside this generated cards array it's an array of card objects so you might be tempted to do something like this where let's say you want it to swap at the first two cards zero and one so you might be tempted to do something like so this isn't actually going to work like you think it will because what you're doing here in the first line is you are making index 0 equal to index 1 so after this line executes both 0 & 1 are equal in terms of the card that they point to so this line does nothing because 0 & 1 point to the same card anyways what you want to do before executing this line where you're essentially going to lose the card that slot 0 was pointing to by assigning it this you want to preserve that card first so you're gonna say let temporary storage let's hold on to the card at index zero all right we're gonna store that card at zero into temporary storage and then we are going to overwrite index zero with whatever card index one is and then lastly in order to complete the swap we assign into spot one the card that we stored we put into temporary storage right it was originally the card at zero so now you have the completed swap you have the card at slot one in slot zero and you have the card at slot zero now in slot 1 so that is swapping two cards now we have to do it randomly right so instead of swapping 0 & 1 why don't we swap 0 and a random number so we're gonna do let random number equal to arc for random uniform and we're gonna say the upper bound is generated cards array dot count and this is actually going to throw an error because the expected argument type is let's see if I can expand it here is you into 32 and actually we can just click fix and it's going to convert that count to a un 32 which is what it needs and then we are going to pass in random number instead of 1 the funny thing is we probably have to cast this as an INT now see you cannot use a subscript with an index of UN 32 okay so what we can do is just cast the result of this random number to an integer so at this point these three lines of code is swapping the card at spot zero with a random spot so that's just one swap in order to randomize it some more we are going to go through all the indexes in the array starting from zero and we're going to choose a random number and perform the swap so that's how this is going to work so we're going to say for let's say I in 02 generated cards array dot count oops I don't want to cut that next and then we are going to indent all of this and instead of zero we're gonna put in I so at the end of the day you should have code that looks like this all right this is the swapping code swap the two cards find a random index to swap with and this should return our randomized array so let's test if this works no index out of range so I probably have to do minus one all right so let's see if these are randomized these two look the same but once a closed box and once an open box so this looks pretty randomized to me and I'm gonna leave it up to you in terms of how long you should let the user try to match all the cards and with that our match app is done congratulations you've completed the match app you've learned quite a bit in this module including how to use the MVC design pattern how to use custom classes how to use collection views delegates and protocols you learned how to use the Xcode debugging tools to troubleshoot your project you also learn best practices in terms of organizing your project and naming all of your variables classes and methods you also learned how to show alerts and how to use timers and best of all you learned all of these things while building a tangible app you're making amazing progress and there's a lot more exciting things to learn so let's move forward I'll see you in the next module
