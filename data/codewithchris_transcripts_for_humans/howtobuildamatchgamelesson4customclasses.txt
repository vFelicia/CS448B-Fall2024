With timestamps:

00:00 - hello and welcome in this lesson we're
00:02 - gonna get hands-on with creating custom
00:04 - classes if you take a look at our app
00:07 - architecture diagram you'll see some
00:09 - classes that we have to create namely
00:11 - the card model class in the card class
00:13 - we're also going to create a custom
00:15 - collection view cell so that we can add
00:17 - some custom functionality to it
00:20 - let's dive into Xcode and get started
00:22 - we're gonna start by creating a brand
00:24 - new Swift file for our card model class
00:28 - now as I've explained before you
00:31 - definitely can just go into the
00:33 - viewcontroller.swift and at the end of
00:35 - the file outside of the viewcontroller
00:37 - class you could simply declare your
00:42 - additional class here but as i've
00:45 - explained we definitely don't want to do
00:47 - this because it's confusing for people
00:49 - who don't know your project and even
00:51 - though you know the card model classes
00:53 - in this file right now that doesn't mean
00:56 - six months down the road you'll remember
00:58 - that you put it in here so the best
01:00 - practice is actually just to create
01:02 - another swift file with the same name as
01:05 - your class name and put it in there so
01:08 - right click in this folder right here
01:10 - it's actually called a group and to
01:13 - choose new file and we are going to
01:16 - choose the swift file under iOS so go
01:21 - ahead and click next and we can just
01:23 - save it here in the project folder
01:25 - that's where our other Swift files are
01:27 - so you can see here view controller not
01:28 - Swift and app delegate not Swift so the
01:31 - name we're gonna give it is card model
01:34 - and under targets this should be checked
01:36 - by default and if it's not then go ahead
01:39 - and check that and this just means that
01:41 - this code file that we're adding belongs
01:44 - to this target and the target is
01:47 - basically another word for our app so
01:50 - let's click create and we are here with
01:54 - this brand new card model dot Swift I
01:57 - usually like to put it together with the
01:59 - other Swift files so I just drag it up
02:01 - into that section there so here it says
02:05 - import foundation if we are going to use
02:08 - some UI kit classes we will also need to
02:11 - import you like
02:12 - but for now I'm not gonna import uikit
02:15 - if we actually do end up referencing
02:17 - something like a UI button or UI image
02:19 - view or you know another class from
02:21 - UIKit then I can import it at that time
02:23 - and foundation we can leave it as this
02:26 - because foundation is actually useful
02:28 - and contains things like the math
02:30 - routines and the randomization functions
02:33 - that we're going to use here and stuff
02:34 - like the print functions and you know
02:37 - all of that stuff that we sort of take
02:38 - for granted that we have all right so
02:41 - let's use the class keyword and let's
02:44 - declare the car for the model class open
02:47 - up a pair of curly brackets and in here
02:51 - I'm just going to create one method
02:54 - right now I'm going to call it get cards
02:56 - and I am going to open up a set of
03:00 - rounded brackets and I am going to I'm
03:04 - not going to specify the return value
03:06 - right now but this function will return
03:08 - an array of cards but we're not going to
03:10 - do that right now because we also need
03:12 - to create that card class and I also
03:14 - want to explain why we are going to be
03:17 - returning an array of card objects
03:19 - instead of like an array of strings or
03:21 - something like that all right so let's
03:23 - just start with a pair of curly brackets
03:26 - which represents the block of code for
03:28 - this method inside this method right now
03:30 - let me write some comments on what we
03:32 - are going to do so we are going to
03:35 - declare an array to store the generated
03:41 - generated cards randomly generate pairs
03:47 - of cards and then randomize the array
03:53 - and finally we're going to return the
03:58 - array so as you learned from the MVC
04:01 - video the reason why we are declaring
04:04 - this card model to supply and handle
04:07 - that data the data being the set of
04:09 - cards that the user has to match is
04:11 - because of separation of
04:14 - responsibilities the view controller
04:16 - should only manage handling the view and
04:19 - handling user interaction with the view
04:22 - the card model is going to be
04:24 - responsible for
04:25 - supplying those cards and it's gonna
04:28 - give those cards to the view controller
04:30 - and the view controller is going to
04:32 - display those cards to the user if we
04:34 - run our app and we notice something
04:35 - wrong with the data let's say for
04:37 - example there are an uneven number of
04:39 - cards or some cards there's no match for
04:42 - it or something like that we know to
04:44 - look in the card model because the card
04:46 - model is responsible for generating that
04:49 - data if there is a problem with the user
04:53 - tapping on a card and it's not flipping
04:55 - over or you know cards are not being
04:59 - matched even though the user has flipped
05:01 - over two cards of the same the same type
05:03 - and it's not matching and disappearing
05:05 - then we know the view controller must be
05:07 - responsible if for example we notice
05:10 - that something is misaligned in the view
05:12 - I think the cards aren't centered or
05:14 - something like that then we know to look
05:16 - in our view in the storyboard and
05:18 - double-check our auto layout constraints
05:20 - and stuff like that so using that MVC
05:22 - design pattern when we architect our app
05:25 - is going to make things a lot easier for
05:27 - us when we are trying to maintain or
05:30 - troubleshoot something in our app
05:32 - especially if the app becomes much
05:35 - larger and much more complex so that's
05:37 - why we are creating this card model
05:39 - class so like I said the responsibility
05:41 - for this specific method here is to
05:45 - generate random pairs of cards put it
05:48 - into a ray and then return that to the
05:50 - view controller the view controller is
05:52 - going to take that data and display it
05:54 - on to the view now I could have very
05:57 - simply just said that this function
06:00 - returns an array of strings right where
06:04 - each card in that array is represented
06:07 - by a string and that string could
06:09 - possibly be the image names right so I
06:14 - could randomly generate a number from 1
06:16 - to 13 right and then append that to the
06:20 - word card and then I could just put that
06:24 - all into a string array and return that
06:25 - as my set of cards right this is kind of
06:29 - similar to what we did in the war app
06:31 - the war card game where we randomly
06:34 - generated a number and then we appended
06:36 - that number to the word card and that
06:39 - how we got our image team the problem
06:41 - with this is that there's actually more
06:43 - data we need to keep track of than just
06:46 - the image name I mean if I returned this
06:48 - array of image names as strings I could
06:51 - very easily use that to display the card
06:55 - images in a grid like fashion however I
06:59 - would also need some other mechanism to
07:02 - keep track of which cards are flipped
07:03 - and also which cards are matched so that
07:06 - actually gets messy really really
07:08 - quickly inside the view controller if I
07:10 - were to keep track of that stuff so
07:12 - that's why instead of returning just an
07:15 - array of strings representing the image
07:17 - names we're going to create a separate
07:20 - class to represent each card and that
07:24 - class is going to have the image name
07:27 - it's going to have some status flags
07:30 - such as whether the card is flipped or
07:32 - not and whether the card has been
07:34 - matched or not and then inside this card
07:36 - model I could return an array of card
07:39 - objects instead so each card object will
07:43 - have the data associated with that card
07:46 - such as the image name right which image
07:49 - represents that card and also the status
07:53 - of it whether it's flipped or matched so
07:55 - that's what we have to do and right now
07:57 - it is if there's an error because we
08:00 - haven't created that card class yet so
08:02 - let's go ahead and do that highlight
08:04 - this group right here choose new file
08:06 - choose the Swift file and this time we
08:11 - are going to put card so that should be
08:14 - checked create and inside this card dot
08:20 - Swift let's move it up under card model
08:22 - and you know I call this class card open
08:28 - up a pair of curly brackets like that
08:30 - and we're going to have the image name
08:33 - and I'm going to just initialize that to
08:36 - an empty string we are going also going
08:38 - to have a flag called is flipped and
08:43 - initialize that to false and another one
08:46 - is matched this is false so each card
08:51 - object
08:52 - is going to keep track of its own stuff
08:55 - the image name whether it's been flipped
08:58 - or not and whether it's been matched or
08:59 - not
09:00 - and then we go back to cart model and
09:03 - now this error should go away once Xcode
09:07 - detects now it's detected another error
09:10 - for missing the return statement here so
09:13 - let's start with this comment here
09:15 - declare an array to store the generated
09:17 - cards I'm going to VAR
09:21 - let's say generated cards array is equal
09:26 - to and I'm going to declare an empty
09:29 - array that is going to contain card
09:32 - objects okay so randomly generate pairs
09:37 - of cards now how many pairs of cards do
09:39 - we want and I just settled around eight
09:43 - pairs so that's sixteen cards you could
09:46 - do as many or as few as you'd like
09:50 - now we're going to do use a four in loop
09:53 - here and I don't care about the actual
09:55 - variable I just want a loop that runs
09:57 - eight times so I'm just going to use
10:00 - underscore here for the variable four
10:03 - underscore in 1.8 open up a pair of
10:10 - curly brackets so the code inside these
10:13 - curly brackets are going to run from 1
10:15 - to 8 and that's inclusive so it's 1 2 3
10:18 - 4 5 6 7 8 that's actually 8 times sorry
10:22 - I was just counting out my fingers just
10:23 - there uh-huh so I might seem weird to
10:27 - you ok now we're going to randomly
10:29 - generate some numbers and just to remind
10:32 - you we have cards number 1 to 13 and if
10:40 - you remember the arc for random uniform
10:45 - this function goes from 0 to the upper
10:49 - bound minus 1 so since we have 1 to 13 I
10:53 - am going to do 13 that's going to give
10:57 - me 0 to 12 and all I have to do is add 1
11:00 - then that's going to give me 1 to 13 so
11:03 - let
11:05 - random number equals arc for random
11:10 - underscore uniform 13 plus 1 so that's
11:13 - going to give me a random number from 1
11:14 - to 13 next I am going to create a card
11:21 - say I'm bar card 1 is equal to a new
11:28 - card object and then we are going to set
11:31 - the image name property of card 1 equal
11:36 - to the word card plus the random number
11:41 - or actually we can use that substitution
11:46 - and we can put in the random number
11:49 - there let me just double check that in
11:51 - the assets library its underscore seat
11:54 - it is so underscore C ok and then we are
12:01 - going to put this card into the
12:03 - generated cars array so I'm going to
12:05 - append my card 1 alright and now we're
12:10 - going to do the same thing for car 2
12:11 - let's write some comments here get a
12:16 - random number or create the first card
12:21 - object and down here we're going to
12:24 - create the second card object alright
12:29 - and these warnings are telling us to use
12:31 - let instead so let's use let let card to
12:37 - equals new card object and card to dot
12:41 - image name is equal to card random
12:45 - number now what I'm doing is I'm
12:47 - creating two cards right each of them
12:50 - are going to be the same image because
12:54 - we need pairs of cards in order to have
12:56 - matches right so for every time we
12:59 - randomly generate a number we need to
13:01 - create a pair of cards not just one card
13:03 - that's why I'm doing it twice and then
13:06 - we're going to do generated cards array
13:08 - and we are going to append card to make
13:12 - sure you're putting card to and they're
13:13 - not card 1 again so by the end of this
13:18 - for in loop that goes eight times we're
13:20 - going to have eight pairs of cards in
13:23 - inside this generated cards array for a
13:26 - total of sixteen cards all right here
13:30 - for randomized the array I'm just going
13:32 - to put it as a to do because I don't
13:34 - want to randomize it yet the reason for
13:37 - that is because if we don't randomize it
13:39 - each pair of cards is going to be beside
13:42 - each other and so when I'm testing out
13:45 - the app it makes it very easy for me to
13:47 - find matches because I know that the
13:49 - matching card is right beside it so
13:51 - we're gonna randomize it at the end and
13:53 - then for returning the array we're just
13:54 - going to use the return keyword and
13:58 - return the generated cards array now I'm
14:00 - going to also put another comment here
14:03 - as a nice-to-have maybe I'll put it as
14:06 - optional and this is to make it so we
14:13 - only have unique pairs of cards because
14:18 - as of now you see how I'm generating
14:21 - this random number eight times well it's
14:24 - possible for this to generate the same
14:26 - number in different iterations of the
14:29 - loop so I could have if we look in the
14:32 - assets you know I could have two or
14:36 - three or maybe if it's like some sort of
14:39 - freak accident all of the sixteen cards
14:42 - could be card one because we have no
14:44 - condition to make each pair unique so in
14:49 - my card model even though this loops for
14:51 - eight times if every single iteration of
14:54 - that loop the random number is the same
14:57 - number then I'm going to end up with 16
15:00 - of the same cards so I have it as an
15:03 - optional here and we probably will go
15:05 - through this at the end is how to make
15:08 - it so that we only have unique pairs of
15:10 - cards inside that array and it's
15:12 - actually something that you do have the
15:13 - tools to do right now in module two you
15:16 - learned about while loops right which is
15:18 - basically a loop that only ends when a
15:22 - certain condition is met so you see how
15:25 - this loops eight times no matter what
15:27 - instead of this for in loop that goes
15:29 - eight times we will just replace that
15:31 - a while loop and we would keep looping
15:34 - and generating random numbers and we
15:37 - would keep track of which numbers have
15:39 - already been inserted into the array and
15:43 - basically we would keep randomizing
15:45 - until we get a number that hasn't been
15:47 - added before into our array and that's
15:49 - how we would guarantee that we have
15:51 - unique pairs but if you're not sure how
15:52 - to do that don't worry we'll go through
15:54 - it later on but for now I'm just gonna
15:56 - leave it as optional and randomizing the
15:58 - REA is a to do okay so here's a fun
16:01 - thing that we can do right now is that
16:03 - in this for loop we can print out the
16:06 - random number that we generate so under
16:09 - here I'm gonna get a random number let's
16:11 - say log the number and we're going to
16:15 - use the print statement and we're just
16:17 - going to print out that random number
16:18 - into the console right now we won't see
16:22 - anything because get cards is not
16:24 - actually being run or called so let's go
16:27 - into the view controller and up here in
16:31 - the properties section we're going to
16:33 - declare a new property and just call it
16:34 - model we're gonna create a new card
16:38 - model object and assign it to this
16:40 - property called model inside the
16:43 - viewdidload let's get rid of this
16:45 - comment and we are going to call the get
16:51 - cards method of the card model and
16:55 - calling that get cards method of the
16:59 - card model is going to return an array
17:01 - of cards right I want to also keep track
17:06 - of that in the view controller so I'm
17:10 - gonna have to create a property to keep
17:13 - track of it so you can see here when I
17:15 - called get cards of the model this is
17:18 - the return value right so calling that
17:21 - returns an array of cards I need to keep
17:23 - track of it somehow I'm going to create
17:25 - a separate property up here I'm going to
17:27 - call it my card array and I am going to
17:30 - make it an empty array that contains
17:35 - card objects and I am going to assign
17:40 - what gets returned from this function
17:42 - I'm going to assign it to this property
17:45 - essentially writing this card array is
17:49 - equal to model get cards when I do this
17:55 - it's actually going to just replace this
17:59 - MTO right here by initializing my
18:02 - property to an empty card right here I
18:04 - save myself the trouble of having to
18:06 - make it an optional type you know
18:09 - something like this because you have to
18:12 - initialize it to something so that's why
18:15 - I am initializing it to an empty card oh
18:17 - right here all right so now in the
18:20 - viewdidload
18:21 - the get carts method is going to get
18:25 - called so now we can actually run it
18:27 - let's choose the iPhone 10 so here we
18:34 - can see that our collection view it has
18:38 - this white background but when we're
18:39 - done with it it won't if your simulator
18:42 - didn't actually change orientations you
18:45 - can always just press command left or
18:47 - right to rotate the simulator or you can
18:50 - also go up here and make sure under
18:53 - Hardware make sure it says rotate device
18:56 - automatically and it's checked and then
18:58 - it'll rotate it but more importantly I'm
19:01 - interested in the console down here to
19:04 - see what it's generated so you can see
19:06 - here it's generated eight random numbers
19:09 - and there are three card tens three
19:13 - pairs of card ten so out of my 16 cards
19:18 - six of the cards are card ten so that's
19:21 - pretty coincidental and there's another
19:23 - set of nines so four of the cards are
19:27 - card nine this is going to make the game
19:29 - easier right because I can match one
19:32 - card ten from this pair to one card ten
19:35 - from that pair but anyways once we put
19:38 - that condition using the while loop
19:41 - we're going to be guaranteed to have
19:43 - unique numbers here I just wanted to run
19:46 - the project right now and log these
19:49 - numbers so that you can do it to on your
19:51 - computer to make sure that your app is
19:52 - not crashing at this point and that you
19:54 - are generating the random numbers now
19:58 - there's
19:59 - one more custom class that we need to
20:01 - create so let's talk about that let's
20:04 - stop running our Xcode project and go
20:06 - into the main dot storyboard and that is
20:09 - for this collection view cell that we
20:12 - have here
20:12 - I mentioned that we are going to flip
20:16 - the cards by transitioning between these
20:18 - two card images well what we can
20:21 - actually do is we can subclass this card
20:26 - collection view cell because this cell
20:29 - inside the collection view is actually
20:32 - uikit class as well and it's called UI
20:34 - collection view cell so we're going to
20:37 - go ahead and subclass that class and we
20:40 - are going to provide some custom
20:42 - functionality such as when the card is
20:46 - tapped we can flip between these two UI
20:49 - image views we can actually also add a
20:52 - method to fade out the cards when
20:55 - they're matched and stuff like that
20:58 - so what we're going to do here is inside
21:01 - this match app folder or group go under
21:04 - new file and this time instead I'm
21:07 - choosing Swift file which is pretty much
21:10 - going to create just an empty Swift file
21:13 - for us we actually want to choose cocoa
21:15 - touch class and this is actually going
21:18 - to give us a way to subclass not to say
21:22 - that we couldn't just create that empty
21:24 - swift file and then write our class and
21:28 - say that at subclasses you our
21:29 - collection view cell but doing it this
21:31 - way by choosing the cocoa touch class
21:34 - and selecting the subclass here or just
21:38 - typing it out like that
21:39 - Xcode sometimes gives us some default
21:42 - boilerplate code for subclasses of you
21:46 - know whatever class that we choose to
21:48 - subclass here so it gives us that added
21:50 - benefit for the class name I'm going to
21:54 - call it card collection view cell and
21:57 - it's a subclass of UI collection view
22:00 - cell make sure you're typing that out
22:02 - exactly as that looks with all the caps
22:05 - where it is you don't have to create a
22:07 - zip file that's an extra interface
22:11 - builder file that we don't need
22:13 - and the language make sure that you have
22:15 - swift selected click Next and we can
22:18 - save it in our project folder again
22:20 - target should be checked and that's
22:24 - going to create this for us now in this
22:26 - case there isn't any boilerplate code
22:30 - you can see that it's just empty here
22:32 - but if you were to subclass something
22:34 - like UI view controller for example as
22:38 - this view controller is a subclass of
22:41 - uiviewcontroller you would actually get
22:44 - some boilerplate code and that would be
22:47 - the viewdidload and that did receive
22:49 - memory warning so let's go back down
22:52 - here card collection view cell and just
22:55 - move this guy up to up there is fine you
22:59 - can see here that it also imported UI
23:01 - kit for us because this UI collection
23:05 - view cell is a class inside UI kit and
23:08 - so that's why we need to import that
23:10 - alright so we need a way in the
23:13 - storyboard to specify that this
23:17 - prototype cell that we kind of designed
23:19 - here is a card collection view cell you
23:22 - know which is our custom one so we can
23:25 - do that by selecting the card cell here
23:28 - in the document outline and then going
23:30 - over here to the attribute inspector
23:33 - clicking this one here this tab is
23:35 - called the identity inspector and under
23:39 - custom class by default you can see here
23:43 - it's just a UI collection view cell but
23:45 - we can type card collection view cell
23:47 - autocomplete should just complete that
23:49 - for you and you just hit enter and that
23:51 - basically tells interface builder that
23:54 - this prototype cell here is actually a
23:57 - type of card collection view cell and
24:00 - this is important because we are going
24:02 - to take these two image views which we
24:06 - added into the cell and we're going to
24:08 - connect them and expose them as iboutlet
24:11 - properties to our card collection view
24:13 - cell class and that way we can use swift
24:16 - code to manipulate these two UI image
24:19 - views right so we can write code to
24:21 - transition between them to simulate the
24:24 - card flipping so go ahead and open up
24:26 - assistant editor like that by clicking
24:28 - this icon and you want to select the
24:31 - card cell now chances are on the right
24:35 - hand side it wouldn't have changed to
24:38 - the card collection view cell class
24:40 - however you can click this little
24:42 - breadcrumb part you can go to manual you
24:45 - can go to match app and then you can
24:47 - kind of just manually select that card
24:50 - collection view cell class so on the
24:53 - left hand side you have you have this
24:55 - card cell and on the right hand side you
24:57 - have this card collection view cell
25:00 - subclass that we just created go ahead
25:03 - and highlight this first one hold down
25:06 - control let's drag it down here and
25:08 - connection type is outlet I'm going to
25:11 - call this the front image view that
25:14 - connect it and down here I'm going to do
25:18 - the same except this one is going to be
25:20 - make sure you're not assigning it to the
25:24 - same outlet and so if you see your
25:26 - existing outlet highlighted in blue
25:29 - that's wrong and so put it down here
25:33 - somewhere and then call this the back
25:36 - image view and if something goes wrong
25:39 - right you can highlight this little gray
25:43 - icon although it's hard to tell when
25:46 - it's connected to because the back image
25:48 - and the front image are on top of each
25:49 - other but you can kind of see those
25:51 - little labels pop up next to the actual
25:54 - image view in the storyboard when you
25:56 - highlight them if you do something wrong
25:57 - and you connected these outlets
25:59 - incorrectly refer back to module 1 for
26:04 - the war card game when we first learned
26:06 - about connecting outlets I taught you
26:08 - some troubleshooting steps and how to
26:10 - fix that in there now go back make sure
26:13 - everything saved go back to single
26:15 - editor view now in our card collection
26:18 - view cell we have access to those two
26:21 - front and back image views so that's it
26:24 - in terms of the custom classes that we
26:26 - need for this project
26:28 - alright so in this lesson we created the
26:30 - carp model class which returns a list of
26:32 - randomized cards for the view controller
26:34 - to use we also created a card class so
26:37 - that we can create card object
26:39 - from it and each object is going to
26:41 - represent the cart storing data such as
26:43 - which image file represents that card
26:46 - and also the status of the card whether
26:48 - it's flipped and matched so I hope
26:51 - you've been following along and building
26:53 - this app on your own computer the reason
26:55 - is that you're gonna learn a lot more
26:56 - efficiently if you type it out you make
26:59 - mistakes and you correct your mistakes I
27:01 - find that there's just no way to bypass
27:04 - this learning process it's also how I
27:06 - successfully learned app development
27:08 - myself now here's a question for you do
27:11 - you feel like you're making progress in
27:12 - your iOS app development journey let me
27:15 - know by commenting below either yes or
27:17 - no and you can also explain why if you
27:19 - want to if you enjoyed this video don't
27:22 - forget to subscribe by hitting that red
27:23 - button below and if you don't want to
27:25 - miss a single video hit that Bell icon
27:26 - as well thanks for watching I'll see you
27:29 - guys in the next lesson

Cleaned transcript:

hello and welcome in this lesson we're gonna get handson with creating custom classes if you take a look at our app architecture diagram you'll see some classes that we have to create namely the card model class in the card class we're also going to create a custom collection view cell so that we can add some custom functionality to it let's dive into Xcode and get started we're gonna start by creating a brand new Swift file for our card model class now as I've explained before you definitely can just go into the viewcontroller.swift and at the end of the file outside of the viewcontroller class you could simply declare your additional class here but as i've explained we definitely don't want to do this because it's confusing for people who don't know your project and even though you know the card model classes in this file right now that doesn't mean six months down the road you'll remember that you put it in here so the best practice is actually just to create another swift file with the same name as your class name and put it in there so right click in this folder right here it's actually called a group and to choose new file and we are going to choose the swift file under iOS so go ahead and click next and we can just save it here in the project folder that's where our other Swift files are so you can see here view controller not Swift and app delegate not Swift so the name we're gonna give it is card model and under targets this should be checked by default and if it's not then go ahead and check that and this just means that this code file that we're adding belongs to this target and the target is basically another word for our app so let's click create and we are here with this brand new card model dot Swift I usually like to put it together with the other Swift files so I just drag it up into that section there so here it says import foundation if we are going to use some UI kit classes we will also need to import you like but for now I'm not gonna import uikit if we actually do end up referencing something like a UI button or UI image view or you know another class from UIKit then I can import it at that time and foundation we can leave it as this because foundation is actually useful and contains things like the math routines and the randomization functions that we're going to use here and stuff like the print functions and you know all of that stuff that we sort of take for granted that we have all right so let's use the class keyword and let's declare the car for the model class open up a pair of curly brackets and in here I'm just going to create one method right now I'm going to call it get cards and I am going to open up a set of rounded brackets and I am going to I'm not going to specify the return value right now but this function will return an array of cards but we're not going to do that right now because we also need to create that card class and I also want to explain why we are going to be returning an array of card objects instead of like an array of strings or something like that all right so let's just start with a pair of curly brackets which represents the block of code for this method inside this method right now let me write some comments on what we are going to do so we are going to declare an array to store the generated generated cards randomly generate pairs of cards and then randomize the array and finally we're going to return the array so as you learned from the MVC video the reason why we are declaring this card model to supply and handle that data the data being the set of cards that the user has to match is because of separation of responsibilities the view controller should only manage handling the view and handling user interaction with the view the card model is going to be responsible for supplying those cards and it's gonna give those cards to the view controller and the view controller is going to display those cards to the user if we run our app and we notice something wrong with the data let's say for example there are an uneven number of cards or some cards there's no match for it or something like that we know to look in the card model because the card model is responsible for generating that data if there is a problem with the user tapping on a card and it's not flipping over or you know cards are not being matched even though the user has flipped over two cards of the same the same type and it's not matching and disappearing then we know the view controller must be responsible if for example we notice that something is misaligned in the view I think the cards aren't centered or something like that then we know to look in our view in the storyboard and doublecheck our auto layout constraints and stuff like that so using that MVC design pattern when we architect our app is going to make things a lot easier for us when we are trying to maintain or troubleshoot something in our app especially if the app becomes much larger and much more complex so that's why we are creating this card model class so like I said the responsibility for this specific method here is to generate random pairs of cards put it into a ray and then return that to the view controller the view controller is going to take that data and display it on to the view now I could have very simply just said that this function returns an array of strings right where each card in that array is represented by a string and that string could possibly be the image names right so I could randomly generate a number from 1 to 13 right and then append that to the word card and then I could just put that all into a string array and return that as my set of cards right this is kind of similar to what we did in the war app the war card game where we randomly generated a number and then we appended that number to the word card and that how we got our image team the problem with this is that there's actually more data we need to keep track of than just the image name I mean if I returned this array of image names as strings I could very easily use that to display the card images in a grid like fashion however I would also need some other mechanism to keep track of which cards are flipped and also which cards are matched so that actually gets messy really really quickly inside the view controller if I were to keep track of that stuff so that's why instead of returning just an array of strings representing the image names we're going to create a separate class to represent each card and that class is going to have the image name it's going to have some status flags such as whether the card is flipped or not and whether the card has been matched or not and then inside this card model I could return an array of card objects instead so each card object will have the data associated with that card such as the image name right which image represents that card and also the status of it whether it's flipped or matched so that's what we have to do and right now it is if there's an error because we haven't created that card class yet so let's go ahead and do that highlight this group right here choose new file choose the Swift file and this time we are going to put card so that should be checked create and inside this card dot Swift let's move it up under card model and you know I call this class card open up a pair of curly brackets like that and we're going to have the image name and I'm going to just initialize that to an empty string we are going also going to have a flag called is flipped and initialize that to false and another one is matched this is false so each card object is going to keep track of its own stuff the image name whether it's been flipped or not and whether it's been matched or not and then we go back to cart model and now this error should go away once Xcode detects now it's detected another error for missing the return statement here so let's start with this comment here declare an array to store the generated cards I'm going to VAR let's say generated cards array is equal to and I'm going to declare an empty array that is going to contain card objects okay so randomly generate pairs of cards now how many pairs of cards do we want and I just settled around eight pairs so that's sixteen cards you could do as many or as few as you'd like now we're going to do use a four in loop here and I don't care about the actual variable I just want a loop that runs eight times so I'm just going to use underscore here for the variable four underscore in 1.8 open up a pair of curly brackets so the code inside these curly brackets are going to run from 1 to 8 and that's inclusive so it's 1 2 3 4 5 6 7 8 that's actually 8 times sorry I was just counting out my fingers just there uhhuh so I might seem weird to you ok now we're going to randomly generate some numbers and just to remind you we have cards number 1 to 13 and if you remember the arc for random uniform this function goes from 0 to the upper bound minus 1 so since we have 1 to 13 I am going to do 13 that's going to give me 0 to 12 and all I have to do is add 1 then that's going to give me 1 to 13 so let random number equals arc for random underscore uniform 13 plus 1 so that's going to give me a random number from 1 to 13 next I am going to create a card say I'm bar card 1 is equal to a new card object and then we are going to set the image name property of card 1 equal to the word card plus the random number or actually we can use that substitution and we can put in the random number there let me just double check that in the assets library its underscore seat it is so underscore C ok and then we are going to put this card into the generated cars array so I'm going to append my card 1 alright and now we're going to do the same thing for car 2 let's write some comments here get a random number or create the first card object and down here we're going to create the second card object alright and these warnings are telling us to use let instead so let's use let let card to equals new card object and card to dot image name is equal to card random number now what I'm doing is I'm creating two cards right each of them are going to be the same image because we need pairs of cards in order to have matches right so for every time we randomly generate a number we need to create a pair of cards not just one card that's why I'm doing it twice and then we're going to do generated cards array and we are going to append card to make sure you're putting card to and they're not card 1 again so by the end of this for in loop that goes eight times we're going to have eight pairs of cards in inside this generated cards array for a total of sixteen cards all right here for randomized the array I'm just going to put it as a to do because I don't want to randomize it yet the reason for that is because if we don't randomize it each pair of cards is going to be beside each other and so when I'm testing out the app it makes it very easy for me to find matches because I know that the matching card is right beside it so we're gonna randomize it at the end and then for returning the array we're just going to use the return keyword and return the generated cards array now I'm going to also put another comment here as a nicetohave maybe I'll put it as optional and this is to make it so we only have unique pairs of cards because as of now you see how I'm generating this random number eight times well it's possible for this to generate the same number in different iterations of the loop so I could have if we look in the assets you know I could have two or three or maybe if it's like some sort of freak accident all of the sixteen cards could be card one because we have no condition to make each pair unique so in my card model even though this loops for eight times if every single iteration of that loop the random number is the same number then I'm going to end up with 16 of the same cards so I have it as an optional here and we probably will go through this at the end is how to make it so that we only have unique pairs of cards inside that array and it's actually something that you do have the tools to do right now in module two you learned about while loops right which is basically a loop that only ends when a certain condition is met so you see how this loops eight times no matter what instead of this for in loop that goes eight times we will just replace that a while loop and we would keep looping and generating random numbers and we would keep track of which numbers have already been inserted into the array and basically we would keep randomizing until we get a number that hasn't been added before into our array and that's how we would guarantee that we have unique pairs but if you're not sure how to do that don't worry we'll go through it later on but for now I'm just gonna leave it as optional and randomizing the REA is a to do okay so here's a fun thing that we can do right now is that in this for loop we can print out the random number that we generate so under here I'm gonna get a random number let's say log the number and we're going to use the print statement and we're just going to print out that random number into the console right now we won't see anything because get cards is not actually being run or called so let's go into the view controller and up here in the properties section we're going to declare a new property and just call it model we're gonna create a new card model object and assign it to this property called model inside the viewdidload let's get rid of this comment and we are going to call the get cards method of the card model and calling that get cards method of the card model is going to return an array of cards right I want to also keep track of that in the view controller so I'm gonna have to create a property to keep track of it so you can see here when I called get cards of the model this is the return value right so calling that returns an array of cards I need to keep track of it somehow I'm going to create a separate property up here I'm going to call it my card array and I am going to make it an empty array that contains card objects and I am going to assign what gets returned from this function I'm going to assign it to this property essentially writing this card array is equal to model get cards when I do this it's actually going to just replace this MTO right here by initializing my property to an empty card right here I save myself the trouble of having to make it an optional type you know something like this because you have to initialize it to something so that's why I am initializing it to an empty card oh right here all right so now in the viewdidload the get carts method is going to get called so now we can actually run it let's choose the iPhone 10 so here we can see that our collection view it has this white background but when we're done with it it won't if your simulator didn't actually change orientations you can always just press command left or right to rotate the simulator or you can also go up here and make sure under Hardware make sure it says rotate device automatically and it's checked and then it'll rotate it but more importantly I'm interested in the console down here to see what it's generated so you can see here it's generated eight random numbers and there are three card tens three pairs of card ten so out of my 16 cards six of the cards are card ten so that's pretty coincidental and there's another set of nines so four of the cards are card nine this is going to make the game easier right because I can match one card ten from this pair to one card ten from that pair but anyways once we put that condition using the while loop we're going to be guaranteed to have unique numbers here I just wanted to run the project right now and log these numbers so that you can do it to on your computer to make sure that your app is not crashing at this point and that you are generating the random numbers now there's one more custom class that we need to create so let's talk about that let's stop running our Xcode project and go into the main dot storyboard and that is for this collection view cell that we have here I mentioned that we are going to flip the cards by transitioning between these two card images well what we can actually do is we can subclass this card collection view cell because this cell inside the collection view is actually uikit class as well and it's called UI collection view cell so we're going to go ahead and subclass that class and we are going to provide some custom functionality such as when the card is tapped we can flip between these two UI image views we can actually also add a method to fade out the cards when they're matched and stuff like that so what we're going to do here is inside this match app folder or group go under new file and this time instead I'm choosing Swift file which is pretty much going to create just an empty Swift file for us we actually want to choose cocoa touch class and this is actually going to give us a way to subclass not to say that we couldn't just create that empty swift file and then write our class and say that at subclasses you our collection view cell but doing it this way by choosing the cocoa touch class and selecting the subclass here or just typing it out like that Xcode sometimes gives us some default boilerplate code for subclasses of you know whatever class that we choose to subclass here so it gives us that added benefit for the class name I'm going to call it card collection view cell and it's a subclass of UI collection view cell make sure you're typing that out exactly as that looks with all the caps where it is you don't have to create a zip file that's an extra interface builder file that we don't need and the language make sure that you have swift selected click Next and we can save it in our project folder again target should be checked and that's going to create this for us now in this case there isn't any boilerplate code you can see that it's just empty here but if you were to subclass something like UI view controller for example as this view controller is a subclass of uiviewcontroller you would actually get some boilerplate code and that would be the viewdidload and that did receive memory warning so let's go back down here card collection view cell and just move this guy up to up there is fine you can see here that it also imported UI kit for us because this UI collection view cell is a class inside UI kit and so that's why we need to import that alright so we need a way in the storyboard to specify that this prototype cell that we kind of designed here is a card collection view cell you know which is our custom one so we can do that by selecting the card cell here in the document outline and then going over here to the attribute inspector clicking this one here this tab is called the identity inspector and under custom class by default you can see here it's just a UI collection view cell but we can type card collection view cell autocomplete should just complete that for you and you just hit enter and that basically tells interface builder that this prototype cell here is actually a type of card collection view cell and this is important because we are going to take these two image views which we added into the cell and we're going to connect them and expose them as iboutlet properties to our card collection view cell class and that way we can use swift code to manipulate these two UI image views right so we can write code to transition between them to simulate the card flipping so go ahead and open up assistant editor like that by clicking this icon and you want to select the card cell now chances are on the right hand side it wouldn't have changed to the card collection view cell class however you can click this little breadcrumb part you can go to manual you can go to match app and then you can kind of just manually select that card collection view cell class so on the left hand side you have you have this card cell and on the right hand side you have this card collection view cell subclass that we just created go ahead and highlight this first one hold down control let's drag it down here and connection type is outlet I'm going to call this the front image view that connect it and down here I'm going to do the same except this one is going to be make sure you're not assigning it to the same outlet and so if you see your existing outlet highlighted in blue that's wrong and so put it down here somewhere and then call this the back image view and if something goes wrong right you can highlight this little gray icon although it's hard to tell when it's connected to because the back image and the front image are on top of each other but you can kind of see those little labels pop up next to the actual image view in the storyboard when you highlight them if you do something wrong and you connected these outlets incorrectly refer back to module 1 for the war card game when we first learned about connecting outlets I taught you some troubleshooting steps and how to fix that in there now go back make sure everything saved go back to single editor view now in our card collection view cell we have access to those two front and back image views so that's it in terms of the custom classes that we need for this project alright so in this lesson we created the carp model class which returns a list of randomized cards for the view controller to use we also created a card class so that we can create card object from it and each object is going to represent the cart storing data such as which image file represents that card and also the status of the card whether it's flipped and matched so I hope you've been following along and building this app on your own computer the reason is that you're gonna learn a lot more efficiently if you type it out you make mistakes and you correct your mistakes I find that there's just no way to bypass this learning process it's also how I successfully learned app development myself now here's a question for you do you feel like you're making progress in your iOS app development journey let me know by commenting below either yes or no and you can also explain why if you want to if you enjoyed this video don't forget to subscribe by hitting that red button below and if you don't want to miss a single video hit that Bell icon as well thanks for watching I'll see you guys in the next lesson
