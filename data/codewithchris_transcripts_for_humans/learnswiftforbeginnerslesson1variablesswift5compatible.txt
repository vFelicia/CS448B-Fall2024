With timestamps:

00:00 - hello welcome to learn Swift programming
00:02 - for beginners lesson one today we're
00:05 - going to talk about variables you're
00:06 - going to learn about what they are how
00:08 - to declare them in Swift Code and
00:10 - furthermore how to use them all right so
00:12 - let's get
00:15 - started for the rest of the lessons in
00:17 - this series we're going to be working
00:19 - inside this app called xcode xcode is
00:22 - the tool that Apple has provided for
00:24 - people to build apps with and inside
00:26 - xcode you're going to be able to create
00:28 - your user interfaces you're going to be
00:29 - able to write the code to express the
00:31 - logic in your app you're going to be
00:33 - able to test your app even so that's why
00:36 - this is where we're going to start in
00:38 - learning Swift we're going to be writing
00:40 - the Swift Code inside the app that
00:41 - you're actually going to use to build
00:43 - apps with in the future so this is where
00:45 - you're going to get xcode just go to
00:47 - your browser go to developer.apple.com
00:51 - excode or you can launch the Mac App
00:53 - Store on your computer and search for
00:56 - xcode there if you're on the web page
00:58 - you can see that there's this big blue
01:00 - download button up top now ideally you
01:03 - want to make sure you're using the
01:04 - latest version of xcode and right now as
01:07 - of this recording it's 8 and you can
01:09 - check your version if you go to xcode uh
01:12 - you can see it here in the welcome
01:13 - screen and you can also go up here to
01:15 - xcode about xcode and you can see what
01:17 - the version is if you're a PC user and
01:20 - you're running Windows there may be some
01:21 - additional work you need to do before
01:23 - you can run xcode or you might have to
01:26 - use an alternative solution to build iOS
01:28 - apps so check in in the description
01:30 - below for PC Solutions however if you
01:33 - are a PC user don't let that discourage
01:36 - you uh for me personally I lost about 2
01:39 - to 3 years of learning iOS development
01:42 - simply because I didn't have a Mac and I
01:43 - didn't want to get a Mac but these days
01:45 - there are alternative Solutions you
01:47 - don't actually have to buy a Mac
01:49 - computer although I eventually did and
01:52 - now I haven't looked back so anyways now
01:55 - that you have xcode and after you've
01:57 - installed it it's a pretty large install
02:00 - it's pretty big program so uh it might
02:02 - take some time but after you have it
02:04 - installed and you launch it you're going
02:05 - to see this welcome screen you can see
02:07 - here that when you want to create an app
02:10 - for iPhone iPad Mac or whatever you're
02:12 - going to go to create a new xcode
02:15 - project and that's going to start a full
02:17 - out um project for you to build an app
02:19 - in but here we're going to start a new
02:21 - playground because that's going to allow
02:23 - us to type some code quickly it's going
02:25 - to let us run that code and see the
02:28 - results and we're not committing to
02:30 - building in a project it's simply like a
02:32 - Sandbox or a playground as it's named
02:34 - now if you don't see this welcome screen
02:37 - what you can do is just go up to file
02:39 - new and hit playground right there and
02:41 - that's going to start a new playground
02:43 - for you as well or you can just hit this
02:45 - button get started with a
02:46 - playground so that's going to launch
02:49 - this dialogue for you and I'm simply
02:51 - going to leave the default name there
02:53 - platform should be iOS and I'm going to
02:56 - save this on my
02:58 - desktop okay so after your playground
03:01 - runs you'll see up here it's doing a
03:03 - whole bunch of stuff launching simulator
03:06 - getting it ready and when it's done all
03:08 - that it's going to say ready you can
03:09 - already start typing in code so there
03:12 - you go it says ready but um when it
03:15 - doesn't say ready and it's doing
03:16 - something then chances are whatever
03:18 - you're typing here is not going to show
03:20 - up on the right hand side okay we're
03:22 - going to start with a quick tour of this
03:24 - playground window here so down on the
03:28 - left hand side I have a bunch of line
03:30 - numbers now if you don't have these and
03:32 - you want them they can be useful at
03:34 - times especially when I'm teaching and I
03:36 - need to refer to line numbers you can go
03:38 - to xcode preferences and you can go to
03:40 - text editing and you can simply enable
03:43 - line numbers there now this area right
03:45 - here is where we're going to type our
03:48 - Swift Code and it's already got a bunch
03:50 - of stuff for us right here which we're
03:52 - going to go through in a second on the
03:54 - right hand side you're going to see a
03:55 - quick preview of the results of what you
03:58 - typed there now a lot of people people
04:00 - have trouble with getting output to show
04:02 - up on this right hand side based on what
04:05 - they type here um well one of the things
04:07 - that you can check is just in this
04:09 - status bar up here make sure that it
04:11 - says ready and as you're typing
04:13 - something let's say I change something
04:15 - like that you're going to see that it
04:18 - for a brief second there there was a
04:20 - little spinner because it's evaluating
04:22 - your code here um if you want it to show
04:25 - up just make sure it says ready to
04:26 - process your next command and you know
04:29 - you you should see that output there
04:31 - alternatively there is a tray down here
04:34 - which you may not notice because it's
04:36 - hidden at first you can hit this button
04:38 - to show the debug area or there's also
04:42 - this little button here to hide the
04:44 - different
04:45 - panels okay but we don't need to see all
04:47 - of that but this debug panel may be
04:51 - useful uh when we start to uh output
04:55 - things here this is called the console
04:57 - area where we can use Swift commands to
04:59 - out put things this blue icon here is to
05:03 - execute the code in your playground so
05:05 - if you can't get things to show up on
05:06 - the right here try clicking this button
05:09 - to run your playground right now it's
05:12 - blue because you can see there's a
05:15 - little drop down arrow there if you
05:17 - click and hold it you can see whether
05:19 - you want to switch it to automatically
05:21 - run and that's going to run the
05:23 - playground whenever you type something
05:25 - or you can set it to manually run and
05:27 - you can see now it's grayed out so if I
05:29 - type in some new code it's not actually
05:31 - going to change or display what I have
05:34 - on the right hand side here unless I
05:36 - click the play button to run it so I
05:39 - would recommend to have it set to
05:40 - automatically run so now that you know
05:42 - the main areas of the playground let's
05:45 - get into the meet of today's topic
05:46 - variables and in fact what we have here
05:50 - is a variable in Swift a variable holds
05:53 - some data now this data could be a value
05:56 - it could be a reference to an object or
05:58 - it can even point to to a function which
06:00 - are things that we'll get into the
06:02 - future but for now we're going to say
06:03 - that variables hold data now as you can
06:05 - see from this example line of code a
06:09 - variable has a couple of distinct parts
06:12 - let's break it down variables need to be
06:14 - declared before they can be used so this
06:17 - VAR keyword is used to declare a new
06:20 - variable following the VAR keyword you
06:23 - have the variable name in this case it's
06:26 - St and really that's it you've declared
06:28 - your new variable so it's got the VAR
06:31 - keyword and it's got the variable name
06:34 - now taking a look at the whole line what
06:36 - we have on the right hand side there
06:38 - that's some data we did say that
06:40 - variables hold data right and that equal
06:43 - sign in between the variable name and
06:45 - the piece of data well that's an
06:47 - assignment operator so what we're doing
06:49 - in this line of code is we're declaring
06:51 - a variable called Str Str and then we're
06:54 - assigning that piece of data to that
06:57 - variable so now jump back into the
07:00 - playground let's see the effect of that
07:02 - I can say something like print which is
07:05 - a keyword that is going to print
07:07 - something to that console area down
07:09 - below so if I say print and then in the
07:12 - parentheses I put Str Str you can see
07:15 - that it's printed that hello player s
07:18 - Ruff line down there on the right hand
07:22 - side uh we can see a quick preview of
07:24 - that and notice that there's a slash n
07:27 - here and that is basically
07:30 - um just denoting that there's a new line
07:32 - associated with that print statement
07:34 - because uh the next time I print
07:36 - something it's going to be printed on
07:38 - the next line so you don't see that here
07:40 - because a new line is just um a carriage
07:43 - return or white space you can't really
07:45 - see it but in here in this preview um
07:48 - it's visualized as that sln which is
07:52 - just a new line so let's take a look at
07:55 - a couple of different pieces of data
07:57 - that we can store into variables so I'm
07:59 - going to
08:00 - declare another variable here called a
08:05 - and I'm going to
08:07 - assign a number into it so just VAR one
08:11 - and I'm going to declare another one
08:14 - called B uh which I'm going to also
08:17 - assign one and I want to show you that
08:19 - you can perform operations between the
08:21 - variables or on the variables so for
08:24 - example I can say print a plus b
08:29 - and you can see here that the result in
08:31 - the console here is two now notice that
08:35 - when I'm using the variables in an
08:37 - equation or an operation like this I
08:40 - don't need to use the keyword VAR
08:42 - because that's only for declaring
08:44 - variables right so this little part is
08:47 - declaring the variable but when you use
08:49 - them afterwards you just need to refer
08:51 - to them by name so let's try some other
08:55 - things print a minus
08:58 - B right print a *
09:07 - B okay so variables hold data and you
09:11 - can perform operations on variables now
09:14 - you can change the data that the
09:16 - variable is holding so I can say
09:18 - something like a equals 2 now right in
09:21 - fact actually let's not do it down here
09:23 - let's do it here after we've assigned
09:26 - one into a let's say a equals 2 and as a
09:30 - result you can see all of these
09:32 - operations have changed because a is now
09:34 - two so A + B is 3 a minus B is 1 and so
09:40 - on cuz a is now two now when you assign
09:44 - something into a a different piece of
09:46 - data it replaces what it was holding on
09:48 - to before so a is no longer one uh it is
09:51 - now two but notice how when we assign a
09:55 - new piece of data into a we don't have
09:56 - to write VAR again that would cause
09:59 - error because we've already declared
10:02 - that variable up here and memory in the
10:04 - system has been allocated to it and so
10:06 - we don't need to redare it all we need
10:08 - to do is assign new data into a like
10:11 - that now if you're playing around in the
10:13 - playground yourself you may notice
10:15 - something like what if you try to assign
10:18 - something into St Str
10:21 - like one well you're going to get an
10:24 - error and that's because of something
10:27 - called data types which we're going to
10:29 - learn about in the next lesson but for
10:31 - now just know that for Str Str because
10:35 - we've assigned some text into it up
10:37 - there if we want to reassign some data
10:40 - into it again it has to be text as
10:44 - well so that would be
10:47 - valid
10:49 - furthermore you can also assign a
10:52 - variable as another variable so I can
10:54 - say a equal B down here and in that case
10:59 - a would now equal one again well it was
11:03 - one to begin with so let's say I did
11:05 - that so if a was two and then I said a
11:09 - equals B then now they would both be one
11:13 - now before we move on a quick note on
11:15 - naming variables here we have a variable
11:17 - St Str and I've named some variables A
11:20 - and B so normally you wouldn't name
11:23 - variables Like A and B because they're
11:25 - not descriptive of the data that they
11:27 - hold so if you're going to be using
11:29 - variables just like this in an operation
11:32 - wouldn't it be easier if you knew what a
11:34 - represented and what B represented well
11:36 - you can declare your variables using any
11:39 - sorts of names that you would want but
11:41 - you can't put some special characters
11:42 - and you can't put spaces in your
11:44 - variable name however the common
11:46 - practice is to use a form of camel case
11:49 - where the first letter is lowercase so
11:51 - let me show you what I mean so I can say
11:53 - VAR and if I want to describe my
11:56 - variable if it represents um let's say
11:59 - the number of apples that I have I would
12:01 - say something like my number of apples
12:07 - like that and you can see that each new
12:09 - letter of each word is capitalized
12:12 - except the first
12:15 - one now you don't want to get too crazy
12:17 - with the length of the variable name as
12:19 - well and you don't want to go too short
12:21 - so short that it doesn't actually uh
12:24 - mean anything so there's no right or
12:26 - wrong answer or hard limits it's based
12:28 - on you know your own preference and it's
12:31 - more important if you're working in a
12:33 - team with other people that you agree on
12:35 - a certain coding style because you're
12:37 - both going to be working on the same
12:39 - code okay so one more thing I want to
12:41 - talk about are constants so they are
12:43 - like variables except that once you
12:46 - assign something to them you can't
12:48 - reassign data into them so that's really
12:51 - the only difference that and also how
12:53 - they're declared so with variables you
12:55 - use the keyword VAR but with constants
12:58 - you use the keyword let so I can say let
13:01 - C equals 10 and then down here if I try
13:06 - to reassign something into C like that
13:09 - xcode is not going to like that and it's
13:11 - going to throw an error and it's going
13:12 - to tell you with this red dot down here
13:14 - and if you click it it's going to say
13:16 - cannot assign value to C because it's a
13:19 - let constant now it gives you this
13:21 - little bubble here which you can click
13:24 - and smartly it's going to change let to
13:26 - VAR because it senses that you want to
13:28 - re assigned data into it so you might
13:31 - ask why would I ever want to use a
13:32 - constant if it's more limited in its
13:35 - functionality right if I declare
13:37 - everything as variables then I have the
13:39 - all the flexibility I would want well
13:41 - there are a couple of reasons why you'd
13:43 - want to use constants when it makes
13:45 - sense for one thing it helps the
13:47 - computer work a little more efficiently
13:49 - because it knows exactly what that
13:50 - constant will be and that's not going to
13:53 - change but more importantly it's that
13:55 - for you as a coder you know that that
13:59 - constant isn't going to change because
14:01 - when you're building your app you're
14:02 - going to have a lot of variables and
14:04 - when you have some sort of um issue in
14:07 - your app and you don't know why it's
14:08 - happening and you're tracking down your
14:10 - code you're tracing it line by line and
14:12 - you're trying to see if maybe at some
14:14 - point you've accidentally assigned
14:16 - something to a variable and that's
14:17 - throwing off all your calculations or
14:19 - all of your logic it's going to be a
14:21 - nightmare to try to solve and untangle
14:24 - so if something you know it isn't going
14:26 - to change you can assign it to a cont
14:29 - constant and then when you're looking
14:30 - through your code you can be sure that
14:32 - the issue doesn't lie with that constant
14:34 - because you know it can't change okay so
14:36 - that's it for this lesson on variables I
14:38 - hope you're practicing on your own
14:40 - computer with xcode and check below this
14:42 - video for a link to the cheat sheet and
14:44 - the notes I'm going to have those ready
14:46 - for you as soon as I can if they're not
14:48 - already down below the video so thanks
14:51 - for watching and I look forward to
14:52 - seeing you in the next lesson okay bye
14:55 - for
14:58 - now
14:59 - [Music]

Cleaned transcript:

hello welcome to learn Swift programming for beginners lesson one today we're going to talk about variables you're going to learn about what they are how to declare them in Swift Code and furthermore how to use them all right so let's get started for the rest of the lessons in this series we're going to be working inside this app called xcode xcode is the tool that Apple has provided for people to build apps with and inside xcode you're going to be able to create your user interfaces you're going to be able to write the code to express the logic in your app you're going to be able to test your app even so that's why this is where we're going to start in learning Swift we're going to be writing the Swift Code inside the app that you're actually going to use to build apps with in the future so this is where you're going to get xcode just go to your browser go to developer.apple.com excode or you can launch the Mac App Store on your computer and search for xcode there if you're on the web page you can see that there's this big blue download button up top now ideally you want to make sure you're using the latest version of xcode and right now as of this recording it's 8 and you can check your version if you go to xcode uh you can see it here in the welcome screen and you can also go up here to xcode about xcode and you can see what the version is if you're a PC user and you're running Windows there may be some additional work you need to do before you can run xcode or you might have to use an alternative solution to build iOS apps so check in in the description below for PC Solutions however if you are a PC user don't let that discourage you uh for me personally I lost about 2 to 3 years of learning iOS development simply because I didn't have a Mac and I didn't want to get a Mac but these days there are alternative Solutions you don't actually have to buy a Mac computer although I eventually did and now I haven't looked back so anyways now that you have xcode and after you've installed it it's a pretty large install it's pretty big program so uh it might take some time but after you have it installed and you launch it you're going to see this welcome screen you can see here that when you want to create an app for iPhone iPad Mac or whatever you're going to go to create a new xcode project and that's going to start a full out um project for you to build an app in but here we're going to start a new playground because that's going to allow us to type some code quickly it's going to let us run that code and see the results and we're not committing to building in a project it's simply like a Sandbox or a playground as it's named now if you don't see this welcome screen what you can do is just go up to file new and hit playground right there and that's going to start a new playground for you as well or you can just hit this button get started with a playground so that's going to launch this dialogue for you and I'm simply going to leave the default name there platform should be iOS and I'm going to save this on my desktop okay so after your playground runs you'll see up here it's doing a whole bunch of stuff launching simulator getting it ready and when it's done all that it's going to say ready you can already start typing in code so there you go it says ready but um when it doesn't say ready and it's doing something then chances are whatever you're typing here is not going to show up on the right hand side okay we're going to start with a quick tour of this playground window here so down on the left hand side I have a bunch of line numbers now if you don't have these and you want them they can be useful at times especially when I'm teaching and I need to refer to line numbers you can go to xcode preferences and you can go to text editing and you can simply enable line numbers there now this area right here is where we're going to type our Swift Code and it's already got a bunch of stuff for us right here which we're going to go through in a second on the right hand side you're going to see a quick preview of the results of what you typed there now a lot of people people have trouble with getting output to show up on this right hand side based on what they type here um well one of the things that you can check is just in this status bar up here make sure that it says ready and as you're typing something let's say I change something like that you're going to see that it for a brief second there there was a little spinner because it's evaluating your code here um if you want it to show up just make sure it says ready to process your next command and you know you you should see that output there alternatively there is a tray down here which you may not notice because it's hidden at first you can hit this button to show the debug area or there's also this little button here to hide the different panels okay but we don't need to see all of that but this debug panel may be useful uh when we start to uh output things here this is called the console area where we can use Swift commands to out put things this blue icon here is to execute the code in your playground so if you can't get things to show up on the right here try clicking this button to run your playground right now it's blue because you can see there's a little drop down arrow there if you click and hold it you can see whether you want to switch it to automatically run and that's going to run the playground whenever you type something or you can set it to manually run and you can see now it's grayed out so if I type in some new code it's not actually going to change or display what I have on the right hand side here unless I click the play button to run it so I would recommend to have it set to automatically run so now that you know the main areas of the playground let's get into the meet of today's topic variables and in fact what we have here is a variable in Swift a variable holds some data now this data could be a value it could be a reference to an object or it can even point to to a function which are things that we'll get into the future but for now we're going to say that variables hold data now as you can see from this example line of code a variable has a couple of distinct parts let's break it down variables need to be declared before they can be used so this VAR keyword is used to declare a new variable following the VAR keyword you have the variable name in this case it's St and really that's it you've declared your new variable so it's got the VAR keyword and it's got the variable name now taking a look at the whole line what we have on the right hand side there that's some data we did say that variables hold data right and that equal sign in between the variable name and the piece of data well that's an assignment operator so what we're doing in this line of code is we're declaring a variable called Str Str and then we're assigning that piece of data to that variable so now jump back into the playground let's see the effect of that I can say something like print which is a keyword that is going to print something to that console area down below so if I say print and then in the parentheses I put Str Str you can see that it's printed that hello player s Ruff line down there on the right hand side uh we can see a quick preview of that and notice that there's a slash n here and that is basically um just denoting that there's a new line associated with that print statement because uh the next time I print something it's going to be printed on the next line so you don't see that here because a new line is just um a carriage return or white space you can't really see it but in here in this preview um it's visualized as that sln which is just a new line so let's take a look at a couple of different pieces of data that we can store into variables so I'm going to declare another variable here called a and I'm going to assign a number into it so just VAR one and I'm going to declare another one called B uh which I'm going to also assign one and I want to show you that you can perform operations between the variables or on the variables so for example I can say print a plus b and you can see here that the result in the console here is two now notice that when I'm using the variables in an equation or an operation like this I don't need to use the keyword VAR because that's only for declaring variables right so this little part is declaring the variable but when you use them afterwards you just need to refer to them by name so let's try some other things print a minus B right print a * B okay so variables hold data and you can perform operations on variables now you can change the data that the variable is holding so I can say something like a equals 2 now right in fact actually let's not do it down here let's do it here after we've assigned one into a let's say a equals 2 and as a result you can see all of these operations have changed because a is now two so A + B is 3 a minus B is 1 and so on cuz a is now two now when you assign something into a a different piece of data it replaces what it was holding on to before so a is no longer one uh it is now two but notice how when we assign a new piece of data into a we don't have to write VAR again that would cause error because we've already declared that variable up here and memory in the system has been allocated to it and so we don't need to redare it all we need to do is assign new data into a like that now if you're playing around in the playground yourself you may notice something like what if you try to assign something into St Str like one well you're going to get an error and that's because of something called data types which we're going to learn about in the next lesson but for now just know that for Str Str because we've assigned some text into it up there if we want to reassign some data into it again it has to be text as well so that would be valid furthermore you can also assign a variable as another variable so I can say a equal B down here and in that case a would now equal one again well it was one to begin with so let's say I did that so if a was two and then I said a equals B then now they would both be one now before we move on a quick note on naming variables here we have a variable St Str and I've named some variables A and B so normally you wouldn't name variables Like A and B because they're not descriptive of the data that they hold so if you're going to be using variables just like this in an operation wouldn't it be easier if you knew what a represented and what B represented well you can declare your variables using any sorts of names that you would want but you can't put some special characters and you can't put spaces in your variable name however the common practice is to use a form of camel case where the first letter is lowercase so let me show you what I mean so I can say VAR and if I want to describe my variable if it represents um let's say the number of apples that I have I would say something like my number of apples like that and you can see that each new letter of each word is capitalized except the first one now you don't want to get too crazy with the length of the variable name as well and you don't want to go too short so short that it doesn't actually uh mean anything so there's no right or wrong answer or hard limits it's based on you know your own preference and it's more important if you're working in a team with other people that you agree on a certain coding style because you're both going to be working on the same code okay so one more thing I want to talk about are constants so they are like variables except that once you assign something to them you can't reassign data into them so that's really the only difference that and also how they're declared so with variables you use the keyword VAR but with constants you use the keyword let so I can say let C equals 10 and then down here if I try to reassign something into C like that xcode is not going to like that and it's going to throw an error and it's going to tell you with this red dot down here and if you click it it's going to say cannot assign value to C because it's a let constant now it gives you this little bubble here which you can click and smartly it's going to change let to VAR because it senses that you want to re assigned data into it so you might ask why would I ever want to use a constant if it's more limited in its functionality right if I declare everything as variables then I have the all the flexibility I would want well there are a couple of reasons why you'd want to use constants when it makes sense for one thing it helps the computer work a little more efficiently because it knows exactly what that constant will be and that's not going to change but more importantly it's that for you as a coder you know that that constant isn't going to change because when you're building your app you're going to have a lot of variables and when you have some sort of um issue in your app and you don't know why it's happening and you're tracking down your code you're tracing it line by line and you're trying to see if maybe at some point you've accidentally assigned something to a variable and that's throwing off all your calculations or all of your logic it's going to be a nightmare to try to solve and untangle so if something you know it isn't going to change you can assign it to a cont constant and then when you're looking through your code you can be sure that the issue doesn't lie with that constant because you know it can't change okay so that's it for this lesson on variables I hope you're practicing on your own computer with xcode and check below this video for a link to the cheat sheet and the notes I'm going to have those ready for you as soon as I can if they're not already down below the video so thanks for watching and I look forward to seeing you in the next lesson okay bye for now
