With timestamps:

00:05 - hello welcome youtubers I hope you guys
00:08 - are doing well just to give a little
00:10 - recap on where we left off in episode 5
00:13 - we got this table view working with a
00:16 - couple of dummy elements here so you can
00:19 - see test1 test2 test3 and in this lesson
00:23 - we're going to add a text field down
00:25 - here with a button and when you hit the
00:28 - text field to have that little tray
00:30 - animate up so that it makes room for the
00:33 - keyboard so that's what we're going to
00:34 - focus on for this lesson I'm going to go
00:38 - back into our Xcode project here and
00:41 - just to remind you guys in our
00:44 - storyboard we have a table view and then
00:47 - down here we have a UI view which we
00:49 - called doc view as you can see from this
00:51 - document outline if you don't have this
00:54 - panel it's this button down here that
00:56 - you can click to show or hide the
00:59 - document outline okay so let's go ahead
01:02 - in here on the right hand side search
01:05 - for UI text field if you don't have this
01:12 - sort of little area where you can search
01:16 - for elements make sure that you're on
01:18 - this objects library tab right here
01:21 - there are a couple of different ones
01:23 - here if you're not on the right one you
01:24 - won't be able to search for your
01:25 - elements and furthermore if you click
01:28 - this button yours might look like this
01:30 - that's perfectly fine you can click this
01:32 - button to switch into ListView or the
01:34 - big icon view so once you find your text
01:37 - field in here just drag it into your doc
01:40 - view here what's important to make sure
01:43 - is that if you look at your document
01:45 - outline that your text field is
01:47 - underneath your doc view so it's
01:50 - indented in here meaning that this text
01:52 - field is inside the doc view because
01:55 - this is a UI view and it can contain
01:58 - other views so the doc view is the
02:02 - parent of this text field okay so now we
02:06 - have our text field here if you click it
02:08 - we're gonna add some constraints that
02:09 - dictate how it's going to be laid out
02:13 - so the strategy here is that I'm going
02:15 - to define a left margin and the top
02:19 - margin and I'm not going to define a
02:22 - bottom margin because when we animate
02:24 - we're gonna animate the height of this
02:27 - dock view and it's going to grow up here
02:31 - to maybe halfway so that it makes room
02:36 - for the keyboard and because we have a
02:38 - rule dictating that this text field
02:40 - should be you know X pixels from the top
02:43 - edge this text field is going to follow
02:45 - that follow the stock view up as you're
02:49 - gonna see so click on your text field
02:52 - here go to this menu down here I'm going
02:58 - to say 20 from the left and let's say
03:03 - let's say 15 add two constraints and
03:09 - then you can go ahead and update frames
03:12 - so you're gonna see that it looks
03:14 - squished now because we've just dictated
03:16 - a left margin and a top one but we
03:19 - haven't dictated a right one so it
03:22 - doesn't know how wide it should be and
03:23 - furthermore we don't have a constraint
03:25 - to dictate its width either but we're
03:28 - not going to need that so in here in the
03:31 - object library pane search for a button
03:33 - so we're gonna add a button in here drag
03:36 - it into your document
03:38 - we're gonna configure this button up
03:40 - here in the properties I'm gonna call it
03:45 - send and again if you click that
03:54 - let's add a top of 15 and a right of 20
04:01 - add two constraints and I'm actually
04:05 - gonna give this button a width let's
04:08 - click this again let's give it a width
04:10 - of 70 so now when we click here we go
04:17 - let's go update frames under all views
04:21 - and viewcontroller so now we have a
04:24 - width for our button
04:25 - a top constraint and the right
04:26 - constraint and now I'm going to add a
04:28 - constraint between the text field and
04:32 - the button so I'm going to click the
04:36 - text field and then click this button
04:38 - again and I'm gonna add a write
04:41 - constraint but pull the drop down here
04:44 - and double check that the neighbor that
04:47 - you're specifying this constraint for is
04:49 - the send button so you can see that
04:51 - little check mark beside it so right now
04:54 - it's 432 points away from that send
04:58 - button so I'm gonna make it 15 so we're
05:02 - gonna add that constraint and go update
05:09 - frames so following the rule it
05:12 - stretches out this text field because
05:14 - now it can infer a width right it should
05:18 - be 15 I think this is 20 actually yeah
05:22 - so 20 it's 20 from the left 15 from the
05:26 - button on the right which gives it all
05:29 - of this space for typing and both of
05:32 - them have a top constraint to the top
05:37 - edge of the dock view okay so now we're
05:42 - going to open up the assistant editor by
05:44 - clicking this button right here and this
05:47 - shows our view controller on the right
05:50 - hand side and what we're going to do
05:52 - here is expose our send button and our
05:56 - text field as outlets so that we can
05:59 - reference them through code so I'm going
06:04 - to hold down ctrl on my keyboard and
06:06 - click and drag
06:07 - over here and this is the text field so
06:11 - I'm gonna call it the message text field
06:14 - and now for the button and click I'm
06:19 - gonna hold down control on my keyboard
06:21 - click and drag it here and call this the
06:24 - send button and now we've created two
06:29 - outlets one referencing the button in
06:31 - our storyboard in the text field in our
06:33 - storyboard furthermore I'm gonna scroll
06:35 - down a little bit maybe make some space
06:39 - right here for an action method I'm
06:43 - gonna click the button in my document
06:45 - line hold down control click and drag
06:48 - here and for the connection type I'm
06:52 - going to choose action for the type I'm
06:55 - going to say button and I'm gonna call
06:57 - it send button tapped ok so now we have
07:01 - an action method that the button is
07:06 - tapped seven button is tapped okay and
07:12 - last thing I want to do is locate the
07:14 - height constraint for the doc view
07:16 - because we're going to be animating that
07:18 - constraint so if we look under the doc
07:22 - view here under constraints you can see
07:24 - this height constraint if we look on the
07:28 - right-hand side for the properties for
07:31 - this constraint you can see that the
07:35 - item we're referring to is the doc view
07:38 - the attribute is the height relationship
07:42 - is equal to 60 that's what we set it at
07:45 - so I'm going to expose this constraint
07:48 - as an outlet as well so I'm going to
07:50 - hold down control click and drag and
07:53 - just move it over here we call this the
07:56 - doc view height constraint
08:01 - and the reason I'm doing that is because
08:04 - when the send button is tapped down here
08:07 - you know this action method we created
08:09 - I'm going to be animating the constant
08:12 - of that height constraint so right now
08:15 - the constant is set at 60 I'm going to
08:18 - be animating that to let's say 400 or
08:21 - something like that and so you're going
08:23 - to see this doc view here in the
08:26 - storyboard you're going to see this move
08:27 - up and grow in height and then you're
08:31 - gonna see the text field and the button
08:33 - follow it because it's got margins
08:36 - that's specify it should be 15 from the
08:40 - top of the doc view okay so let's do
08:44 - that let's go back into the single
08:46 - editor view let's jump into
08:48 - viewcontroller.swift
08:51 - so when the send button is tapped what I
08:55 - want to do is perform an animation to
09:02 - grow the doc view actually before I do
09:07 - that I'm going to run it because I want
09:11 - to show you guys what happens right now
09:14 - that we don't have that animation so I'm
09:20 - going to click into the text field here
09:22 - and you can see the keyboard come up and
09:24 - it totally covers our text field and our
09:27 - button so we could be typing here but
09:29 - you don't even know what you're typing
09:31 - and furthermore when you tap outside of
09:34 - the keyboard it doesn't dismiss the
09:36 - keyboard that's all stuff that we have
09:38 - to add code for in order to make that
09:40 - happen so let's go back into our project
09:44 - okay so the way we're going to perform
09:47 - the animation is by using UI view it's
09:52 - got type method of the UI view class and
09:55 - it's called animate with duration and
10:02 - we're going to choose
10:07 - we can use this one right here so it's
10:10 - got a duration let's say half a second
10:15 - and for animations we're going to open
10:20 - up a pair of curly braces like that and
10:23 - we're gonna put in our animation code
10:25 - for completion we're going to put in nil
10:29 - for now which is basically what happens
10:33 - when the animation is completed so by
10:35 - putting in nil here we are not going to
10:37 - run any code when the animation is
10:39 - complete okay so for the animations what
10:43 - we're going to do before that we're
10:45 - gonna call self thought view layout if
10:51 - needed and what this does is it tells
10:54 - the View for this view controller to
10:57 - update its view based on any changes in
11:00 - the constraints if there are changes in
11:03 - the constraints and we're going to do
11:04 - this right before the animation in here
11:08 - we're gonna say self thought doc view
11:10 - height constraint constant equals and
11:15 - we're gonna say 400 and we're going to
11:19 - say self dot and view layout if needed
11:21 - because we're changing the constraint
11:24 - right here so by calling this method
11:27 - layout if needed it's going to detect
11:29 - that the constraint has changed and then
11:31 - perform the you know update the view
11:34 - right away so let's run it again and
11:39 - let's see that in action so clicking the
11:44 - text field now oh okay so I put it in
11:50 - the wrong method here I put it in the
11:52 - send button tapped actually I want to
11:54 - move this code into when the text field
11:57 - is tapped we're still going to need the
12:00 - send button tapped method here because
12:03 - that's going to perform the sending of
12:05 - the message to the parse back end but
12:07 - right now we need to basically detect
12:11 - when the text field is being edited so
12:15 - the way we do that is using protocols
12:18 - and delegates again kind of like what we
12:20 - did here
12:21 - with the tableview so in order to know
12:25 - when the text field is being edited and
12:28 - when it's done editing we have to set
12:31 - the view controller this guy as the
12:34 - delegate for the text field so when the
12:36 - user starts editing the text field the
12:39 - text field element is going to tell its
12:40 - delegate hey editing has started so
12:46 - let's do that
12:48 - set self as the delegate for the text
12:53 - field so self thought message text field
12:59 - delegate equals self now there's problem
13:03 - here because self which refers to view
13:07 - controller in order to be a delegate for
13:11 - the text field it has to conform to a
13:13 - protocol UI text field delegate okay and
13:18 - this basically dictates that the view
13:23 - controller can be set as a delegate for
13:26 - the text field and now we can override
13:29 - sorry we can handle some of the delegate
13:32 - methods of the text field
13:34 - okay so let's create some sections here
13:36 - let's say mark table view delegate
13:41 - methods and this keyword here mark is
13:45 - very handy because when you pull down
13:47 - the methods list for your class you can
13:50 - see their table view delegate methods it
13:52 - basically creates kind of like a section
13:54 - if your class becomes really long you
13:56 - can use this to organize your methods a
14:00 - little bit we're gonna create another
14:03 - one called text field delegate methods
14:09 - and I'm going to start typing text field
14:11 - and you can see a whole bunch of
14:13 - delegate methods that you can handle for
14:16 - the text field element and the width the
14:18 - one we want is did begin editing right
14:21 - here so when the user starts editing
14:25 - that text field this method is going to
14:27 - get called simply because we're handling
14:29 - it right here and what I want to do is
14:32 - move this chunk of code
14:34 - here so when the user begins editing
14:38 - that text field we animate that doc
14:41 - views height similarly when the text
14:46 - field did end editing you see that one
14:51 - we're going to perform an animation
14:54 - again but this time animating it back to
14:56 - the original height of 60 so I'm gonna
14:59 - copy this chunk of code paste it here
15:01 - and change the constant to 60 instead so
15:05 - that it shrinks back to the original
15:07 - height okay so let's run it now and when
15:15 - we tap into the text field to begin
15:17 - editing that animation code should be
15:21 - called alright so now you can see that
15:24 - tray or that Doc View animating up now
15:29 - we have that code to animate it back
15:31 - down to 60 when the text field has
15:34 - finished editing see text field did and
15:36 - editing but what dictates finished
15:40 - editing right hitting return doesn't do
15:45 - it
15:45 - tapping outside doesn't do it ideally
15:47 - when we hit send or we tap outside that
15:53 - dictates did and editing so we have to
15:57 - detect when the user either hits the
16:00 - send button when the user taps outside
16:03 - say taps the table view or something
16:04 - like that that we call a method that the
16:06 - text field has to tell it that it's
16:09 - finished editing so let's demonstrate
16:11 - that in the send button tapped first so
16:14 - sent button is tapped called the end
16:18 - editing method for the text field so
16:23 - we're gonna say self thought text field
16:28 - sorry message text field dot and editing
16:35 - causes the view well you can't really
16:38 - read it but basically it tells the text
16:41 - field that you're done or the user is
16:43 - done we're gonna say true for
16:47 - forcing it to end editing by calling
16:50 - this method it's going to trigger this
16:52 - text field did and editing delegate
16:55 - method which in turn is going to call
16:57 - our little animation to animate it back
17:00 - okay in order to detect when the
17:08 - tableview has been tapped i'm going to
17:10 - add a tap gesture recognizer to the
17:14 - table and i'll show you how that works
17:16 - so add a tap gesture recognizer to the
17:23 - table view i'm going to say let tap
17:28 - gesture be a UI tap gesture recognizer
17:34 - and i'm going to create a new one the
17:38 - target and action
17:41 - when this tap gesture happens which
17:45 - method or action of which target or
17:49 - object do you want to trigger so because
17:53 - i'm going to create that method in the
17:55 - view controller I'm gonna put self as
17:57 - target and for the action I'm going to
17:59 - create a new method called table view
18:02 - tapped okay don't forget to add the tap
18:06 - gesture to the table so we're gonna say
18:08 - self dot table view dot its message
18:17 - table view that we have add just your
18:22 - recognizer and I'm going to pass it to
18:25 - tap gesture alright so now whenever the
18:29 - table view is tapped it's going to
18:31 - trigger a method called table view
18:33 - tapped so let's create that down here
18:42 - and then here I just want to loops
18:46 - forgot my brackets there
18:48 - I just want to trigger force the
18:52 - textfield to end editing so self-thought
18:58 - message text field and editing true and
19:07 - here I'm going to change four hundred
19:10 - and stead of four hundred I'm going to
19:12 - say three fifty because it seemed to
19:15 - have animated a little too high okay so
19:21 - topping that moves it up and if I hit
19:24 - the send button it's going to animate it
19:26 - back down or if I tap the table view
19:29 - like that it's going to animate it back
19:31 - down as well alright so now we've got
19:36 - our text field and our send button and
19:41 - also the animation for that working in
19:43 - the next lesson we're going to actually
19:45 - implement the code that sends the data
19:47 - to parse and then after that the
19:51 - retrieving code to grab the messages
19:54 - from the parse back end to display in
19:56 - our table view hope you guys enjoyed the
19:59 - lesson now see you guys next time

Cleaned transcript:

hello welcome youtubers I hope you guys are doing well just to give a little recap on where we left off in episode 5 we got this table view working with a couple of dummy elements here so you can see test1 test2 test3 and in this lesson we're going to add a text field down here with a button and when you hit the text field to have that little tray animate up so that it makes room for the keyboard so that's what we're going to focus on for this lesson I'm going to go back into our Xcode project here and just to remind you guys in our storyboard we have a table view and then down here we have a UI view which we called doc view as you can see from this document outline if you don't have this panel it's this button down here that you can click to show or hide the document outline okay so let's go ahead in here on the right hand side search for UI text field if you don't have this sort of little area where you can search for elements make sure that you're on this objects library tab right here there are a couple of different ones here if you're not on the right one you won't be able to search for your elements and furthermore if you click this button yours might look like this that's perfectly fine you can click this button to switch into ListView or the big icon view so once you find your text field in here just drag it into your doc view here what's important to make sure is that if you look at your document outline that your text field is underneath your doc view so it's indented in here meaning that this text field is inside the doc view because this is a UI view and it can contain other views so the doc view is the parent of this text field okay so now we have our text field here if you click it we're gonna add some constraints that dictate how it's going to be laid out so the strategy here is that I'm going to define a left margin and the top margin and I'm not going to define a bottom margin because when we animate we're gonna animate the height of this dock view and it's going to grow up here to maybe halfway so that it makes room for the keyboard and because we have a rule dictating that this text field should be you know X pixels from the top edge this text field is going to follow that follow the stock view up as you're gonna see so click on your text field here go to this menu down here I'm going to say 20 from the left and let's say let's say 15 add two constraints and then you can go ahead and update frames so you're gonna see that it looks squished now because we've just dictated a left margin and a top one but we haven't dictated a right one so it doesn't know how wide it should be and furthermore we don't have a constraint to dictate its width either but we're not going to need that so in here in the object library pane search for a button so we're gonna add a button in here drag it into your document we're gonna configure this button up here in the properties I'm gonna call it send and again if you click that let's add a top of 15 and a right of 20 add two constraints and I'm actually gonna give this button a width let's click this again let's give it a width of 70 so now when we click here we go let's go update frames under all views and viewcontroller so now we have a width for our button a top constraint and the right constraint and now I'm going to add a constraint between the text field and the button so I'm going to click the text field and then click this button again and I'm gonna add a write constraint but pull the drop down here and double check that the neighbor that you're specifying this constraint for is the send button so you can see that little check mark beside it so right now it's 432 points away from that send button so I'm gonna make it 15 so we're gonna add that constraint and go update frames so following the rule it stretches out this text field because now it can infer a width right it should be 15 I think this is 20 actually yeah so 20 it's 20 from the left 15 from the button on the right which gives it all of this space for typing and both of them have a top constraint to the top edge of the dock view okay so now we're going to open up the assistant editor by clicking this button right here and this shows our view controller on the right hand side and what we're going to do here is expose our send button and our text field as outlets so that we can reference them through code so I'm going to hold down ctrl on my keyboard and click and drag over here and this is the text field so I'm gonna call it the message text field and now for the button and click I'm gonna hold down control on my keyboard click and drag it here and call this the send button and now we've created two outlets one referencing the button in our storyboard in the text field in our storyboard furthermore I'm gonna scroll down a little bit maybe make some space right here for an action method I'm gonna click the button in my document line hold down control click and drag here and for the connection type I'm going to choose action for the type I'm going to say button and I'm gonna call it send button tapped ok so now we have an action method that the button is tapped seven button is tapped okay and last thing I want to do is locate the height constraint for the doc view because we're going to be animating that constraint so if we look under the doc view here under constraints you can see this height constraint if we look on the righthand side for the properties for this constraint you can see that the item we're referring to is the doc view the attribute is the height relationship is equal to 60 that's what we set it at so I'm going to expose this constraint as an outlet as well so I'm going to hold down control click and drag and just move it over here we call this the doc view height constraint and the reason I'm doing that is because when the send button is tapped down here you know this action method we created I'm going to be animating the constant of that height constraint so right now the constant is set at 60 I'm going to be animating that to let's say 400 or something like that and so you're going to see this doc view here in the storyboard you're going to see this move up and grow in height and then you're gonna see the text field and the button follow it because it's got margins that's specify it should be 15 from the top of the doc view okay so let's do that let's go back into the single editor view let's jump into viewcontroller.swift so when the send button is tapped what I want to do is perform an animation to grow the doc view actually before I do that I'm going to run it because I want to show you guys what happens right now that we don't have that animation so I'm going to click into the text field here and you can see the keyboard come up and it totally covers our text field and our button so we could be typing here but you don't even know what you're typing and furthermore when you tap outside of the keyboard it doesn't dismiss the keyboard that's all stuff that we have to add code for in order to make that happen so let's go back into our project okay so the way we're going to perform the animation is by using UI view it's got type method of the UI view class and it's called animate with duration and we're going to choose we can use this one right here so it's got a duration let's say half a second and for animations we're going to open up a pair of curly braces like that and we're gonna put in our animation code for completion we're going to put in nil for now which is basically what happens when the animation is completed so by putting in nil here we are not going to run any code when the animation is complete okay so for the animations what we're going to do before that we're gonna call self thought view layout if needed and what this does is it tells the View for this view controller to update its view based on any changes in the constraints if there are changes in the constraints and we're going to do this right before the animation in here we're gonna say self thought doc view height constraint constant equals and we're gonna say 400 and we're going to say self dot and view layout if needed because we're changing the constraint right here so by calling this method layout if needed it's going to detect that the constraint has changed and then perform the you know update the view right away so let's run it again and let's see that in action so clicking the text field now oh okay so I put it in the wrong method here I put it in the send button tapped actually I want to move this code into when the text field is tapped we're still going to need the send button tapped method here because that's going to perform the sending of the message to the parse back end but right now we need to basically detect when the text field is being edited so the way we do that is using protocols and delegates again kind of like what we did here with the tableview so in order to know when the text field is being edited and when it's done editing we have to set the view controller this guy as the delegate for the text field so when the user starts editing the text field the text field element is going to tell its delegate hey editing has started so let's do that set self as the delegate for the text field so self thought message text field delegate equals self now there's problem here because self which refers to view controller in order to be a delegate for the text field it has to conform to a protocol UI text field delegate okay and this basically dictates that the view controller can be set as a delegate for the text field and now we can override sorry we can handle some of the delegate methods of the text field okay so let's create some sections here let's say mark table view delegate methods and this keyword here mark is very handy because when you pull down the methods list for your class you can see their table view delegate methods it basically creates kind of like a section if your class becomes really long you can use this to organize your methods a little bit we're gonna create another one called text field delegate methods and I'm going to start typing text field and you can see a whole bunch of delegate methods that you can handle for the text field element and the width the one we want is did begin editing right here so when the user starts editing that text field this method is going to get called simply because we're handling it right here and what I want to do is move this chunk of code here so when the user begins editing that text field we animate that doc views height similarly when the text field did end editing you see that one we're going to perform an animation again but this time animating it back to the original height of 60 so I'm gonna copy this chunk of code paste it here and change the constant to 60 instead so that it shrinks back to the original height okay so let's run it now and when we tap into the text field to begin editing that animation code should be called alright so now you can see that tray or that Doc View animating up now we have that code to animate it back down to 60 when the text field has finished editing see text field did and editing but what dictates finished editing right hitting return doesn't do it tapping outside doesn't do it ideally when we hit send or we tap outside that dictates did and editing so we have to detect when the user either hits the send button when the user taps outside say taps the table view or something like that that we call a method that the text field has to tell it that it's finished editing so let's demonstrate that in the send button tapped first so sent button is tapped called the end editing method for the text field so we're gonna say self thought text field sorry message text field dot and editing causes the view well you can't really read it but basically it tells the text field that you're done or the user is done we're gonna say true for forcing it to end editing by calling this method it's going to trigger this text field did and editing delegate method which in turn is going to call our little animation to animate it back okay in order to detect when the tableview has been tapped i'm going to add a tap gesture recognizer to the table and i'll show you how that works so add a tap gesture recognizer to the table view i'm going to say let tap gesture be a UI tap gesture recognizer and i'm going to create a new one the target and action when this tap gesture happens which method or action of which target or object do you want to trigger so because i'm going to create that method in the view controller I'm gonna put self as target and for the action I'm going to create a new method called table view tapped okay don't forget to add the tap gesture to the table so we're gonna say self dot table view dot its message table view that we have add just your recognizer and I'm going to pass it to tap gesture alright so now whenever the table view is tapped it's going to trigger a method called table view tapped so let's create that down here and then here I just want to loops forgot my brackets there I just want to trigger force the textfield to end editing so selfthought message text field and editing true and here I'm going to change four hundred and stead of four hundred I'm going to say three fifty because it seemed to have animated a little too high okay so topping that moves it up and if I hit the send button it's going to animate it back down or if I tap the table view like that it's going to animate it back down as well alright so now we've got our text field and our send button and also the animation for that working in the next lesson we're going to actually implement the code that sends the data to parse and then after that the retrieving code to grab the messages from the parse back end to display in our table view hope you guys enjoyed the lesson now see you guys next time
