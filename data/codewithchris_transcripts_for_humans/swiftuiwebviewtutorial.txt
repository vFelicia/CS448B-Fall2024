With timestamps:

00:00 - hello it's Chris and today I'm going to
00:01 - show you how to use a web view in your
00:03 - Swift UI project now unfortunately there
00:05 - is no Swift UI web view but it's
00:08 - relatively simple to use the UI kit one
00:11 - in your Swift UI project as you can see
00:13 - right here all right let's take a look
00:16 - before we begin one quick note we have a
00:18 - free EXO project containing sample code
00:20 - for all of the Swift UI components use
00:22 - it for your own projects or just to
00:24 - learn from get it at
00:30 - so here we have a brand new exod project
00:32 - with the basic content view what do we
00:34 - have to do cuz I mentioned earlier that
00:36 - there is no Swift UI web view what we
00:39 - have to do is use the UI kit one but we
00:42 - have to package it in a way that we can
00:44 - use it in our Swift UI project and that
00:47 - is done using UI view representable so
00:51 - let me go ahead and show you it's
00:53 - actually quite simple to do for this
00:55 - purpose we're going to add a new file to
00:57 - our project let's choose a Swift file
01:00 - let's call this web view because that is
01:03 - the structure name that I'm going to be
01:06 - using and we're going to change this to
01:08 - Swift UI we're going to create our web
01:11 - view uh struct and this is where we
01:16 - adhere to the UI view representable
01:20 - protocol so you can read here a wrapper
01:22 - for a uiit view that you use to
01:24 - integrate that view into your Swift UI
01:27 - view hierarchy which essentially just
01:29 - your Swift UI project so that's what we
01:31 - do now there are two different functions
01:34 - that we need to implement here in order
01:37 - to follow this protocol the first is
01:40 - make UI view so this is where you return
01:43 - the UI kit view that you want to use for
01:46 - us this is going to be the WK web view
01:50 - but this is in the webkit framework you
01:52 - can see here it says webkit is not
01:54 - imported so you can go ahead and import
01:57 - that up here
02:00 - like that and what you would do is you
02:03 - would return a new instance of that now
02:06 - this function it didn't know that that
02:09 - was the UI kit view we wanted to use so
02:12 - let's change
02:13 - this to the appropriate type and that's
02:17 - all we have to do here for this right
02:20 - this is going to get called to create
02:22 - the view and return it now the other
02:24 - function we need is the update UI view
02:27 - function and this one gives you an
02:29 - opportunity to update essentially that
02:33 - UI kit component for presentation in
02:35 - your Swift UI views so you see here you
02:39 - have a reference to that UI kit
02:41 - component we're going to actually just
02:42 - change this parameter name to web view
02:46 - now what do we want to do with the web
02:47 - view we want to load a website right it
02:50 - has a load method which takes in a URL
02:54 - request instance so we have to create
02:56 - that in order to create a URL request
02:59 - Quest instance it needs a URL instance
03:04 - so there are a couple of things we need
03:05 - to create first so let's start at the
03:07 - beginning with the
03:10 - URL so here is the URL
03:13 - instance and we are going to use this
03:16 - one right here now one important thing
03:19 - to note and I don't know why it's not
03:22 - indicating it here is that this
03:26 - one let me just put in a string URL here
03:30 - this one creates an optional URL
03:33 - instance let me see if I can show you
03:35 - this
03:36 - here yeah so you see this question mark
03:40 - represents that it is uh it could error
03:43 - out and not give you an actual URL
03:47 - instance could actually be nil so you
03:49 - have to check against that so let's do
03:52 - this and this is basically saying if we
03:56 - cannot create this it's not going to run
03:58 - this code however if this is created as
04:02 - an actual URL instance then it will
04:05 - assign it into this constant and then
04:07 - within here we can use it so within here
04:10 - we are going to create our
04:14 - request like that right and we are going
04:17 - to pass in
04:20 - url and then finally we can load it up
04:24 - in the web
04:27 - view right so we're going to just pass
04:29 - in the request like that now let's try
04:32 - this out cuz it's ready that's it so
04:36 - here we're going to replace all of this
04:39 - with our new web
04:41 - View and we are going to just ignore
04:44 - safe area but we have one problem this
04:48 - web view only loads up this web page
04:50 - what if we wanted to make it Dynamic so
04:53 - if you go back to the web view instead
04:55 - of specifying this here let's make it
04:58 - data that you have to pass in so we're
05:00 - going to create a property it's going to
05:02 - be URL type and we're going to make it
05:04 - optional so it can be passed in or not
05:06 - and you can just erase this right and
05:10 - before it tries to load it it's going to
05:11 - check to make sure that it's not nil
05:14 - we'll save this and we come back here as
05:17 - you can see if we don't specify anything
05:19 - it doesn't load but if we actually
05:21 - specify the URL
05:24 - here to be
05:30 - this uh I'm missing a bracket there we
05:33 - go then it loads it up and now you can
05:36 - actually specify the URL here and that's
05:39 - how you use a web view in your Swift UI
05:41 - project if you want to download the
05:42 - sample code for this we've got it all in
05:44 - a single handy exod project in fact it
05:47 - contains a sample code for all of the
05:49 - Swift UI components so that you can
05:51 - learn from it or copy and paste the code
05:53 - into your own project just visit
05:56 - cc. swiftui dkit it's a free download
06:01 - I'll leave it in the description below
06:02 - the video too

Cleaned transcript:

hello it's Chris and today I'm going to show you how to use a web view in your Swift UI project now unfortunately there is no Swift UI web view but it's relatively simple to use the UI kit one in your Swift UI project as you can see right here all right let's take a look before we begin one quick note we have a free EXO project containing sample code for all of the Swift UI components use it for your own projects or just to learn from get it at so here we have a brand new exod project with the basic content view what do we have to do cuz I mentioned earlier that there is no Swift UI web view what we have to do is use the UI kit one but we have to package it in a way that we can use it in our Swift UI project and that is done using UI view representable so let me go ahead and show you it's actually quite simple to do for this purpose we're going to add a new file to our project let's choose a Swift file let's call this web view because that is the structure name that I'm going to be using and we're going to change this to Swift UI we're going to create our web view uh struct and this is where we adhere to the UI view representable protocol so you can read here a wrapper for a uiit view that you use to integrate that view into your Swift UI view hierarchy which essentially just your Swift UI project so that's what we do now there are two different functions that we need to implement here in order to follow this protocol the first is make UI view so this is where you return the UI kit view that you want to use for us this is going to be the WK web view but this is in the webkit framework you can see here it says webkit is not imported so you can go ahead and import that up here like that and what you would do is you would return a new instance of that now this function it didn't know that that was the UI kit view we wanted to use so let's change this to the appropriate type and that's all we have to do here for this right this is going to get called to create the view and return it now the other function we need is the update UI view function and this one gives you an opportunity to update essentially that UI kit component for presentation in your Swift UI views so you see here you have a reference to that UI kit component we're going to actually just change this parameter name to web view now what do we want to do with the web view we want to load a website right it has a load method which takes in a URL request instance so we have to create that in order to create a URL request Quest instance it needs a URL instance so there are a couple of things we need to create first so let's start at the beginning with the URL so here is the URL instance and we are going to use this one right here now one important thing to note and I don't know why it's not indicating it here is that this one let me just put in a string URL here this one creates an optional URL instance let me see if I can show you this here yeah so you see this question mark represents that it is uh it could error out and not give you an actual URL instance could actually be nil so you have to check against that so let's do this and this is basically saying if we cannot create this it's not going to run this code however if this is created as an actual URL instance then it will assign it into this constant and then within here we can use it so within here we are going to create our request like that right and we are going to pass in url and then finally we can load it up in the web view right so we're going to just pass in the request like that now let's try this out cuz it's ready that's it so here we're going to replace all of this with our new web View and we are going to just ignore safe area but we have one problem this web view only loads up this web page what if we wanted to make it Dynamic so if you go back to the web view instead of specifying this here let's make it data that you have to pass in so we're going to create a property it's going to be URL type and we're going to make it optional so it can be passed in or not and you can just erase this right and before it tries to load it it's going to check to make sure that it's not nil we'll save this and we come back here as you can see if we don't specify anything it doesn't load but if we actually specify the URL here to be this uh I'm missing a bracket there we go then it loads it up and now you can actually specify the URL here and that's how you use a web view in your Swift UI project if you want to download the sample code for this we've got it all in a single handy exod project in fact it contains a sample code for all of the Swift UI components so that you can learn from it or copy and paste the code into your own project just visit cc. swiftui dkit it's a free download I'll leave it in the description below the video too
