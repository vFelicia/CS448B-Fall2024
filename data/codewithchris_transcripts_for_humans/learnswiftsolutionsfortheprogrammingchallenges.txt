With timestamps:

00:00 - hello in this video we're going to go
00:02 - through the solutions for these three
00:04 - programming challenges these three
00:07 - challenges are for the learn Swift for
00:10 - beginners video series so you can go
00:12 - ahead and go to this page which I'll
00:15 - link to in the description below and
00:18 - then you you can learn Swift through
00:19 - these videos and then you can try your
00:21 - hand at these challenges and then
00:22 - finally this video is for the solution
00:24 - for these three challenges okay so let's
00:33 - start with challenge number one the lost
00:35 - animal challenge I downloaded the
00:37 - starter code already so let me unzips
00:39 - top and let me open it up just to remind
00:44 - you what we're supposed to do here we're
00:46 - supposed to create a function that is
00:47 - going to search through these two arrays
00:49 - for a specific piece of text if it is in
00:53 - either array we return true if it's in
00:56 - neither array we return false okay so
00:59 - let's try this out and create a function
01:02 - called find animal and this guy returns
01:08 - a boolean which is true or false and
01:13 - then for the parameter name I'm just
01:14 - going to call it an will to find it's a
01:17 - string so that's what we have to pass in
01:19 - and there are a couple of different ways
01:22 - to do this I'll show you both so way
01:25 - number one is we look through both the
01:28 - Rays individually so we're going to say
01:31 - for animal in array one and that's going
01:35 - to loop through each animal into a 1 and
01:37 - we're going to do a comparison if animal
01:40 - is equal equals to animal to find
01:45 - remember we use double equal sign
01:47 - because the single equal sign is for
01:49 - assignment and not equality if it is a
01:54 - match if we find it then let's just
01:57 - return true and as soon as you use this
02:00 - return keyword it exits the function so
02:03 - we don't have to worry about any other
02:04 - code below that okay and we're going to
02:11 - say
02:12 - you know it's going to loop through
02:13 - array1 looking for animal to find if it
02:16 - can't find it it's going to exit this
02:18 - loop right and then we have the second
02:19 - loop we're going to use animal again
02:22 - this parameter but this time we're going
02:24 - to look through array number two and we
02:26 - can use the same kind of variable here
02:29 - for this for loop because these are in
02:32 - different scopes so this parameter that
02:36 - we declared here when you refer to
02:38 - animal it's referring you know within
02:40 - this for loop it's referring to the
02:43 - items in here inside this for loop it's
02:46 - referring to animals in here so I can do
02:51 - the same thing here if animal is equal
02:54 - to animal defined like that
02:58 - and finally if it goes through both
03:01 - arrays and I can't find it at the end we
03:04 - have to return false that means they
03:06 - couldn't find it in either right
03:07 - otherwise you know if it did find it it
03:10 - would return and they wouldn't execute
03:11 - anything below that so you can test this
03:13 - out you can say something like find
03:17 - animal passing dog I know that's in
03:21 - there so it returns true let's try snake
03:25 - it also returns true now let's try sake
03:33 - which is not found sake if you haven't
03:37 - had it before
03:37 - it's a Japanese it's alcohol pretty much
03:41 - ok so just one more thing I want to
03:45 - point out is if you want to ignore case
03:47 - what you can do is you can use a string
03:51 - function here and you can lowercase them
03:53 - both first so you're comparing both
03:56 - versions lowercase and then this will
04:00 - effectively ignore case so I can search
04:03 - for capital s snake and it will still
04:06 - find it because this comparison you're
04:08 - making both of them lowercase first and
04:10 - then you are comparing them okay so
04:13 - another way to write this function which
04:17 - may be easier depending on how you see
04:21 - it is
04:22 - you can combine array 1 and array 2 into
04:27 - a single array first and then do the
04:29 - searching so I can do something like
04:32 - this I can say let alright 3 equals
04:35 - array 1 plus array 2 and now actually
04:40 - create a new array with all of the items
04:43 - and so I don't need to search both end
04:46 - of individually I can just search for
04:49 - array 3 so that makes our code a little
04:54 - more compact has the same effect but
04:58 - again you I don't think I showed you
05:02 - this in the lessons above so I don't
05:04 - know if you would have known how to do
05:06 - that but either way is correct okay okay
05:10 - moving on
05:12 - let's tackle challenge number 2 now this
05:17 - one actually will be pretty easy to do
05:20 - so in this one we have an add function
05:24 - where we pass in a piece of text I
05:25 - wanted you to keep track of it inside
05:27 - this body array and then in this goal
05:30 - function to print it all out now again
05:34 - there are a couple of ways to do this so
05:35 - let me show you I'm the longer way first
05:38 - so in the add function all you needed to
05:41 - do was append so append the parameter to
05:46 - body right here and then go what you
05:50 - might have done was construct a string
05:54 - to print out so let's say var print
05:59 - string equals and then you would to
06:01 - empty string and then four 4s in body
06:08 - you might do something like print string
06:11 - plus equals s so you would build up that
06:15 - string and then you finally you would
06:17 - print print print string and then down
06:22 - here the output you get is Hello which
06:26 - is the expected output right one way
06:30 - that you can do to kind of shortcut all
06:32 - of this will cut all of this
06:35 - is you can do something called using the
06:40 - function joined in this array so let me
06:43 - show you what that looks like so far
06:46 - prints during body dot joint so this
06:51 - function will actually just join all the
06:53 - elements into a string like that so
06:55 - print string like that in one line has
07:00 - the same effect okay
07:02 - you can shorten it even further by just
07:05 - putting that into the print statement
07:07 - like that and the bonus marks what does
07:15 - it say here custom initializer okay so
07:22 - this is just practice to create an init
07:25 - function so knit a starting string you
07:36 - would do the same thing here use just
07:38 - append D starting string in this custom
07:41 - initializer and then down here you can
07:45 - no longer declare it like that so we can
07:52 - declare it like hi and then you would
07:54 - still get hopefully hi hello I think
08:00 - it's it's running right now if you look
08:02 - at the status bar up here sometimes it
08:05 - takes takes quite a while let me just
08:08 - stop it here press stop press run again
08:15 - okay unfortunately this playground maybe
08:20 - may not be working right now it's not
08:22 - fully running our code here so I'm going
08:27 - to move on and I'm just going to close
08:29 - this for now and we're going to work on
08:31 - the third challenge okay so this
08:37 - challenge wanted you to practice using
08:39 - dictionaries
08:41 - and then we had to implement each of
08:43 - these these functions here with these
08:46 - kind of different scenarios so in the
08:50 - search by title we wanted to practice
08:53 - searching through a dictionary so
08:55 - basically given the title we wanted to
08:58 - search through the catalogue dictionary
09:00 - to find out if the title existed in the
09:03 - catalogue but it's not point that
09:06 - straightforward because the title is
09:08 - actually inside this book object which
09:10 - is the value and then these are the keys
09:14 - all right so we need to search through
09:16 - the dictionary using this couple here
09:21 - let's call this book ID and let's call
09:24 - this the book in catalog so if this
09:31 - doesn't look familiar to you I would
09:33 - recommend just looking at the dictionary
09:35 - lesson again so here we say if if book
09:44 - dot title is equal to the title that's
09:49 - passed in you would return well you want
09:52 - to return anything yet because we have
09:55 - to check check now that we found the
09:59 - book check that check if it's available
10:07 - and we have this other checked out books
10:12 - dictionary here so we can pass in I
10:17 - think this one this one is by ID the
10:22 - book ID relating to the person so if a
10:26 - person took out the book we would have a
10:28 - key value pair that would be the book ID
10:30 - and the person who took it out so all we
10:32 - need to do is check if checked out books
10:36 - who pass in a book ID when we got it
10:39 - right here in this couple up here so if
10:44 - sorry this is a dictionary so we use
10:46 - square brackets and I basically want to
10:49 - see if this key exists in
10:52 - checked out books I'm not sure what I
10:54 - was typing there checked out books okay
10:59 - book ID okay if this is nil that means
11:05 - that book hasn't been checked out and so
11:09 - we return the string what do we return
11:13 - available okay else I don't care who
11:18 - checked it out well actually I do care
11:21 - because I have to return checked out by
11:23 - name so the name of the person who
11:26 - checked it out and so we would do
11:28 - something like let person equal checked
11:32 - out books book ID and then I would say
11:37 - return checked out by plus person dot
11:45 - name so I'm appending the name to
11:48 - checked out by and then finally if it
11:56 - didn't find this book in the catalog it
11:59 - would come all the way down here and we
12:01 - would say not in catalogue it is an
12:08 - error here
12:14 - okay so right here it's basically saying
12:20 - that this statement may not return a
12:23 - person object but I know that it does
12:26 - because I just checked up here that it's
12:30 - if it's nil it's going to come in here
12:32 - if it's not nil which means that there
12:35 - is a person it's going to come in here
12:36 - so because what gets returned from the
12:41 - dictionary is an optional you know and
12:43 - it could be nil that's why we have to
12:46 - unwrap it so I can go to something like
12:48 - that
12:49 - and basically tell the playground that I
12:51 - know there's a person so I'm going to
12:53 - force and wrap it and then I'm going to
12:54 - call this property on that person object
12:59 - so that's how you do this function we
13:02 - have a couple more to do okay so check
13:07 - out this function adds to the checked
13:09 - out books dictionary and so if it's
13:14 - already checked out we were an error if
13:16 - it is not checked out we return
13:19 - successfully checked out and if it's not
13:21 - in the catalog the book doesn't exist so
13:23 - why don't we do this case first because
13:26 - if the book doesn't even exist in
13:28 - catalog then we just return out of this
13:30 - function so let's say if a catalog and
13:35 - then we pass in the book ID which we
13:38 - have up here as a parameter if this is
13:41 - nil then we return book doesn't exist
13:47 - right if it does exist then we move on
13:50 - so if checked out books book ID if this
13:57 - is not nil that means this book is
13:59 - checked out right so then we return
14:04 - error book is already checked out else
14:11 - return
14:12 - and successfully checked out but we
14:18 - don't just return the string we actually
14:20 - have to add this key value pair to
14:22 - checked out books so for book ID equals
14:26 - the person trying to check it out which
14:28 - is up here so these are the three cases
14:31 - either the book doesn't exist in the
14:33 - catalogue or if it does exist then you
14:37 - know is it checked out
14:38 - right because of it if it exists in the
14:42 - checked out books dictionary already you
14:44 - know it's not nil then it's been checked
14:46 - out if it is nil then we add that person
14:49 - in the book ID we add that key value
14:51 - pair into checked out books and then we
14:53 - return successfully checked out here we
14:57 - don't really need this one and it's not
14:59 - going to complain because it's you know
15:01 - we have this if-else statement it's
15:03 - either going to return this one or this
15:05 - one so this function Xcode it knows that
15:10 - it will definitely return a string so
15:12 - it's not going to complain check in so
15:16 - again a book doesn't exist right we
15:20 - check that first if catalog book ID is
15:25 - nil then return book doesn't exist now
15:37 - we say if checked out books you can't
15:42 - check in a book that hasn't been checked
15:43 - out so let's check for this book ID if
15:47 - it is equal to nil that means that this
15:51 - book wasn't in this checked out
15:53 - dictionary in the first place
15:55 - then we return this error copy/paste
16:02 - else if it does exist in there then we
16:08 - simply get rid of it all right we kind
16:10 - of check it back in and to do that we
16:13 - simply for the book ID we assign it nil
16:17 - and that basically
16:20 - remove that key value pair and then we
16:23 - return successfully checked in okay and
16:28 - again we don't need this return
16:30 - statement at the end because either it's
16:33 - going to return this one or return this
16:35 - one for this else if else branch so
16:39 - that's basically it and I get my
16:42 - playground doesn't seem to be running so
16:44 - what I'm going to do I'm going to close
16:46 - it let's just try to restart Xcode here
16:49 - sometimes that will do the trick let me
16:53 - launch this playground again and
16:57 - hopefully it runs this time launching
17:01 - simulator I'm glad to see that status
17:04 - bar message change so hopefully we're
17:07 - going to see something in the output
17:09 - soon all right so now we are in business
17:12 - so let's check this out here just
17:15 - expected output is available the next
17:18 - one is successfully checked out next one
17:21 - is checked out by Curious George the
17:24 - next one is booked is already checked
17:26 - out next one is can check in a book
17:29 - because it hasn't been checked out and
17:32 - then successfully checked in and then
17:34 - successfully checked out so all of our
17:37 - output here matches the expected output
17:40 - after all these statements and we can
17:42 - consider this done so hopefully you're
17:46 - able to learn from these challenges
17:48 - please give me some feedback on what you
17:50 - liked and what you didn't like and how I
17:52 - can improve them for the future because
17:54 - I do plan on doing more challenges I
17:56 - think it's a fun and interactive thing
17:58 - to do and next time I think I'll try to
18:01 - give out some prizes if we can manage
18:02 - that and even if you've watched this
18:05 - video already I still suggest that you
18:07 - give it a try because you know try and
18:11 - do it from memory because they'll still
18:12 - help you practice your finger memory in
18:15 - learning keywords and the syntax and
18:17 - stuff like that without having to
18:18 - memorize any keywords and then be sure
18:22 - to let me know and I'll add you to the
18:23 - wall of fame if you want to download
18:25 - these playgrounds with the solutions
18:27 - just look in the link below this video
18:30 - or in the description if you're watching
18:31 - in YouTube and then you can download
18:34 - from there so thanks for watching and
18:36 - I'll see you in the next video bye for
18:37 - now

Cleaned transcript:

hello in this video we're going to go through the solutions for these three programming challenges these three challenges are for the learn Swift for beginners video series so you can go ahead and go to this page which I'll link to in the description below and then you you can learn Swift through these videos and then you can try your hand at these challenges and then finally this video is for the solution for these three challenges okay so let's start with challenge number one the lost animal challenge I downloaded the starter code already so let me unzips top and let me open it up just to remind you what we're supposed to do here we're supposed to create a function that is going to search through these two arrays for a specific piece of text if it is in either array we return true if it's in neither array we return false okay so let's try this out and create a function called find animal and this guy returns a boolean which is true or false and then for the parameter name I'm just going to call it an will to find it's a string so that's what we have to pass in and there are a couple of different ways to do this I'll show you both so way number one is we look through both the Rays individually so we're going to say for animal in array one and that's going to loop through each animal into a 1 and we're going to do a comparison if animal is equal equals to animal to find remember we use double equal sign because the single equal sign is for assignment and not equality if it is a match if we find it then let's just return true and as soon as you use this return keyword it exits the function so we don't have to worry about any other code below that okay and we're going to say you know it's going to loop through array1 looking for animal to find if it can't find it it's going to exit this loop right and then we have the second loop we're going to use animal again this parameter but this time we're going to look through array number two and we can use the same kind of variable here for this for loop because these are in different scopes so this parameter that we declared here when you refer to animal it's referring you know within this for loop it's referring to the items in here inside this for loop it's referring to animals in here so I can do the same thing here if animal is equal to animal defined like that and finally if it goes through both arrays and I can't find it at the end we have to return false that means they couldn't find it in either right otherwise you know if it did find it it would return and they wouldn't execute anything below that so you can test this out you can say something like find animal passing dog I know that's in there so it returns true let's try snake it also returns true now let's try sake which is not found sake if you haven't had it before it's a Japanese it's alcohol pretty much ok so just one more thing I want to point out is if you want to ignore case what you can do is you can use a string function here and you can lowercase them both first so you're comparing both versions lowercase and then this will effectively ignore case so I can search for capital s snake and it will still find it because this comparison you're making both of them lowercase first and then you are comparing them okay so another way to write this function which may be easier depending on how you see it is you can combine array 1 and array 2 into a single array first and then do the searching so I can do something like this I can say let alright 3 equals array 1 plus array 2 and now actually create a new array with all of the items and so I don't need to search both end of individually I can just search for array 3 so that makes our code a little more compact has the same effect but again you I don't think I showed you this in the lessons above so I don't know if you would have known how to do that but either way is correct okay okay moving on let's tackle challenge number 2 now this one actually will be pretty easy to do so in this one we have an add function where we pass in a piece of text I wanted you to keep track of it inside this body array and then in this goal function to print it all out now again there are a couple of ways to do this so let me show you I'm the longer way first so in the add function all you needed to do was append so append the parameter to body right here and then go what you might have done was construct a string to print out so let's say var print string equals and then you would to empty string and then four 4s in body you might do something like print string plus equals s so you would build up that string and then you finally you would print print print string and then down here the output you get is Hello which is the expected output right one way that you can do to kind of shortcut all of this will cut all of this is you can do something called using the function joined in this array so let me show you what that looks like so far prints during body dot joint so this function will actually just join all the elements into a string like that so print string like that in one line has the same effect okay you can shorten it even further by just putting that into the print statement like that and the bonus marks what does it say here custom initializer okay so this is just practice to create an init function so knit a starting string you would do the same thing here use just append D starting string in this custom initializer and then down here you can no longer declare it like that so we can declare it like hi and then you would still get hopefully hi hello I think it's it's running right now if you look at the status bar up here sometimes it takes takes quite a while let me just stop it here press stop press run again okay unfortunately this playground maybe may not be working right now it's not fully running our code here so I'm going to move on and I'm just going to close this for now and we're going to work on the third challenge okay so this challenge wanted you to practice using dictionaries and then we had to implement each of these these functions here with these kind of different scenarios so in the search by title we wanted to practice searching through a dictionary so basically given the title we wanted to search through the catalogue dictionary to find out if the title existed in the catalogue but it's not point that straightforward because the title is actually inside this book object which is the value and then these are the keys all right so we need to search through the dictionary using this couple here let's call this book ID and let's call this the book in catalog so if this doesn't look familiar to you I would recommend just looking at the dictionary lesson again so here we say if if book dot title is equal to the title that's passed in you would return well you want to return anything yet because we have to check check now that we found the book check that check if it's available and we have this other checked out books dictionary here so we can pass in I think this one this one is by ID the book ID relating to the person so if a person took out the book we would have a key value pair that would be the book ID and the person who took it out so all we need to do is check if checked out books who pass in a book ID when we got it right here in this couple up here so if sorry this is a dictionary so we use square brackets and I basically want to see if this key exists in checked out books I'm not sure what I was typing there checked out books okay book ID okay if this is nil that means that book hasn't been checked out and so we return the string what do we return available okay else I don't care who checked it out well actually I do care because I have to return checked out by name so the name of the person who checked it out and so we would do something like let person equal checked out books book ID and then I would say return checked out by plus person dot name so I'm appending the name to checked out by and then finally if it didn't find this book in the catalog it would come all the way down here and we would say not in catalogue it is an error here okay so right here it's basically saying that this statement may not return a person object but I know that it does because I just checked up here that it's if it's nil it's going to come in here if it's not nil which means that there is a person it's going to come in here so because what gets returned from the dictionary is an optional you know and it could be nil that's why we have to unwrap it so I can go to something like that and basically tell the playground that I know there's a person so I'm going to force and wrap it and then I'm going to call this property on that person object so that's how you do this function we have a couple more to do okay so check out this function adds to the checked out books dictionary and so if it's already checked out we were an error if it is not checked out we return successfully checked out and if it's not in the catalog the book doesn't exist so why don't we do this case first because if the book doesn't even exist in catalog then we just return out of this function so let's say if a catalog and then we pass in the book ID which we have up here as a parameter if this is nil then we return book doesn't exist right if it does exist then we move on so if checked out books book ID if this is not nil that means this book is checked out right so then we return error book is already checked out else return and successfully checked out but we don't just return the string we actually have to add this key value pair to checked out books so for book ID equals the person trying to check it out which is up here so these are the three cases either the book doesn't exist in the catalogue or if it does exist then you know is it checked out right because of it if it exists in the checked out books dictionary already you know it's not nil then it's been checked out if it is nil then we add that person in the book ID we add that key value pair into checked out books and then we return successfully checked out here we don't really need this one and it's not going to complain because it's you know we have this ifelse statement it's either going to return this one or this one so this function Xcode it knows that it will definitely return a string so it's not going to complain check in so again a book doesn't exist right we check that first if catalog book ID is nil then return book doesn't exist now we say if checked out books you can't check in a book that hasn't been checked out so let's check for this book ID if it is equal to nil that means that this book wasn't in this checked out dictionary in the first place then we return this error copy/paste else if it does exist in there then we simply get rid of it all right we kind of check it back in and to do that we simply for the book ID we assign it nil and that basically remove that key value pair and then we return successfully checked in okay and again we don't need this return statement at the end because either it's going to return this one or return this one for this else if else branch so that's basically it and I get my playground doesn't seem to be running so what I'm going to do I'm going to close it let's just try to restart Xcode here sometimes that will do the trick let me launch this playground again and hopefully it runs this time launching simulator I'm glad to see that status bar message change so hopefully we're going to see something in the output soon all right so now we are in business so let's check this out here just expected output is available the next one is successfully checked out next one is checked out by Curious George the next one is booked is already checked out next one is can check in a book because it hasn't been checked out and then successfully checked in and then successfully checked out so all of our output here matches the expected output after all these statements and we can consider this done so hopefully you're able to learn from these challenges please give me some feedback on what you liked and what you didn't like and how I can improve them for the future because I do plan on doing more challenges I think it's a fun and interactive thing to do and next time I think I'll try to give out some prizes if we can manage that and even if you've watched this video already I still suggest that you give it a try because you know try and do it from memory because they'll still help you practice your finger memory in learning keywords and the syntax and stuff like that without having to memorize any keywords and then be sure to let me know and I'll add you to the wall of fame if you want to download these playgrounds with the solutions just look in the link below this video or in the description if you're watching in YouTube and then you can download from there so thanks for watching and I'll see you in the next video bye for now
