With timestamps:

00:00 - hello and welcome to another Swift UI Basics tutorial 
in this quick video I'll show you how to display  
00:05 - images and icons in your xcode project and I'll 
also show you some tips and tricks for customizing  
00:11 - them as well let's dive in so first we're going 
to start with a basic usage example now where  
00:17 - would you usually get your images so I would say 
one of two different ways so one would be maybe  
00:22 - you want to display a photo of some sort so here 
I've gone to pixels.com to grab some royaltyfree  
00:29 - images for our demo alternatively you might have 
an app design in figma or another Graphics tool  
00:36 - and usually in these tools that are meant for 
designing apps and user interfaces you've got  
00:43 - an exporting option so for example if I wanted to 
export this little button right here if I scroll  
00:49 - all the way to uh the bottom right inside figma I 
can export this in several different file formats  
00:56 - PNG jpeg SVG PDF all of these file formats would 
work inside xcode just go ahead and Export it if  
01:05 - you are grabbing an image for display chances 
are it'll be PNG jpeg go ahead download that  
01:11 - and inside your xod project you're going to add 
it to your assets folder so I am going to I've  
01:18 - downloaded that image I'm going to go ahead and 
put it in there and that's what this photo looks  
01:24 - like now inside xcode before you display this 
photo you have the opportunity to re name it it  
01:30 - gets added to your asset Library as the file name 
but if you wanted to you could rename it here so  
01:37 - go ahead and do that first I'm going to leave mine 
as photo and then we're going to come back here  
01:41 - and we're going to display that photo in our user 
interface so right now it's just got a text label  
01:47 - I'm going to get rid of the text label and we're 
going to use the Swift UI image component and the  
01:52 - keyword to use here is image followed by a pair of 
parentheses like that inside you're going to put a  
01:58 - string and that is a piece of textt surrounded by 
quotation marks and that string is going to be the  
02:06 - image asset name so if you remember we added it 
as photo see it has to match here if it doesn't  
02:14 - match here it's not going to display anything so 
as you can see right away this gets shown now this  
02:20 - doesn't quite look like this right the problem is 
it gets displayed at whatever resolution and size  
02:29 - that your pH photo is originally that's why it's 
so large what we have to do if you want to shrink  
02:35 - it down is you have to tell Swift UI this photo 
should be able to be resized and you can do that  
02:41 - just by adding the resizable modifier to your 
image component and just like that you can see  
02:48 - that now it's shrunken down however you do notice 
that the photo doesn't quite reach the top and the  
02:54 - bottom right why are there white areas here well 
that's the safe area that area is for displaying  
03:01 - the date and the time and stuff and down here you 
have that little H bar that you can drag up among  
03:08 - other things so if you want to have your image 
display as a background and go beyond the safe  
03:15 - area you have to add another modifier called 
ignore safe area and then you can have your  
03:21 - image Go full screen across your app now the other 
problem that I see here is that it's stretched you  
03:28 - can see here that it's not quite so long it's very 
long in our app so we have to add another modifier  
03:36 - to preserve the aspect ratio the aspect ratio 
just means the height to width ratio we want to  
03:42 - maintain that when the image gets resized so you 
add another one called aspect ratio content mode  
03:50 - and there are two different options here you can 
select fill which will fill all available space  
03:57 - while maintaining the corre correct height and 
width ratio so that's why here you can see that  
04:04 - it's not stretched anymore the problem with this 
approach is that you might get some cut off on  
04:12 - either the top or the side depending on which 
side's longer so for us it looks like the left  
04:17 - and right sides are cut off now that might be okay 
for your app if so leave it as content mode fill  
04:24 - if you don't like that alternatively you could 
do content mode fit and what this will do is it  
04:29 - will make sure it fits the entire image um and it 
will enlarge it to its Max while still displaying  
04:39 - the entire image with nothing cropped you can 
see that the downside to that is that there's a  
04:44 - lot of white space so really it depends what you 
need but that is your basic usage example that's  
04:50 - how you display an image in a swift UI app next 
we're going to talk about some customizations that  
04:55 - you can do to this image oh and one quick thing if 
you want to download the sample code for for this  
05:00 - we've got it all in a single handy exco project 
in fact it contains a sample code for all of the  
05:05 - Swift UI components so that you can learn from it 
or copy and paste the code into your own project  
05:11 - just visit cc. Swift ui- kit it's a free download 
I'll leave it in the description below the video  
05:19 - too all right now back to the tutorial now in 
terms of customization a lot of Swift UI modifiers  
05:25 - just work out of the box on the image for example 
if you wanted to display this image in a specific  
05:31 - shape you would use the clip shape modifier and 
for example we could display a profile photo in  
05:38 - a circle just like that now instead of a circle 
you could also just put a rounded rectangle with  
05:44 - a corner radius of 10 not Corner size I make 
that mistake a lot and that would give you a  
05:49 - rounded rectangle let's add some padding to that 
so that you can actually see it off the edges and  
05:56 - so now it's starting to look like a standard card 
you can also add a shadow so for example that uh  
06:04 - puts a default Shadow at the Top If you want it at 
the bottom you can add you can say that and that  
06:10 - switches the uh the y coordinate of the Shadow to 
point downwards so you can see it's a little below  
06:18 - the image now and furthermore let's say you wanted 
it to be semi-transparent you could use an opacity  
06:25 - right there and let's say 0 0.5 so it's like half 
uh transparent semi-transparent all right now  
06:34 - let's talk about how would you display icons and 
I don't know if you know but SF symbols this is a  
06:42 - great way to use icons in iOS so you can download 
this app and you can browse through the app for  
06:49 - these different symbols I've got one of the older 
versions installed and let me just launch that so  
06:58 - we can so if I search for down let's say we're 
going to take this one uh and we're going to  
07:07 - add a download button or something like that you 
basically take the name of the symbol and you can  
07:11 - display it in a swift UI image component so I'm 
going to do that here inside xcode let's put this  
07:18 - inside a vstack first of all and and then in here 
I'm just going to add a button where um this is  
07:30 - the code and the label is going to be an image now 
in order to reference the SF symbol name which was  
07:40 - arrow. down we have to use another image initi 
initializer called system name and instead of  
07:47 - passing in anything in the asset catalog we would 
just put arrow down so you can see there's an  
07:52 - arrow right there and then we're just going to put 
a text beside it that says download and so that is  
08:01 - our button let's make this a button style um just 
a bordered bordered prominent there we go now two  
08:12 - last things before you go here's a playlist of 
all the videos where we're going to cover all of  
08:17 - the Swift UI components and down here you can grab 
that xod project that contains the sample code for  
08:23 - all of these Swift UI components all right thanks 
for watching and I'll see you in the next one

Cleaned transcript:

hello and welcome to another Swift UI Basics tutorial in this quick video I'll show you how to display images and icons in your xcode project and I'll also show you some tips and tricks for customizing them as well let's dive in so first we're going to start with a basic usage example now where would you usually get your images so I would say one of two different ways so one would be maybe you want to display a photo of some sort so here I've gone to pixels.com to grab some royaltyfree images for our demo alternatively you might have an app design in figma or another Graphics tool and usually in these tools that are meant for designing apps and user interfaces you've got an exporting option so for example if I wanted to export this little button right here if I scroll all the way to uh the bottom right inside figma I can export this in several different file formats PNG jpeg SVG PDF all of these file formats would work inside xcode just go ahead and Export it if you are grabbing an image for display chances are it'll be PNG jpeg go ahead download that and inside your xod project you're going to add it to your assets folder so I am going to I've downloaded that image I'm going to go ahead and put it in there and that's what this photo looks like now inside xcode before you display this photo you have the opportunity to re name it it gets added to your asset Library as the file name but if you wanted to you could rename it here so go ahead and do that first I'm going to leave mine as photo and then we're going to come back here and we're going to display that photo in our user interface so right now it's just got a text label I'm going to get rid of the text label and we're going to use the Swift UI image component and the keyword to use here is image followed by a pair of parentheses like that inside you're going to put a string and that is a piece of textt surrounded by quotation marks and that string is going to be the image asset name so if you remember we added it as photo see it has to match here if it doesn't match here it's not going to display anything so as you can see right away this gets shown now this doesn't quite look like this right the problem is it gets displayed at whatever resolution and size that your pH photo is originally that's why it's so large what we have to do if you want to shrink it down is you have to tell Swift UI this photo should be able to be resized and you can do that just by adding the resizable modifier to your image component and just like that you can see that now it's shrunken down however you do notice that the photo doesn't quite reach the top and the bottom right why are there white areas here well that's the safe area that area is for displaying the date and the time and stuff and down here you have that little H bar that you can drag up among other things so if you want to have your image display as a background and go beyond the safe area you have to add another modifier called ignore safe area and then you can have your image Go full screen across your app now the other problem that I see here is that it's stretched you can see here that it's not quite so long it's very long in our app so we have to add another modifier to preserve the aspect ratio the aspect ratio just means the height to width ratio we want to maintain that when the image gets resized so you add another one called aspect ratio content mode and there are two different options here you can select fill which will fill all available space while maintaining the corre correct height and width ratio so that's why here you can see that it's not stretched anymore the problem with this approach is that you might get some cut off on either the top or the side depending on which side's longer so for us it looks like the left and right sides are cut off now that might be okay for your app if so leave it as content mode fill if you don't like that alternatively you could do content mode fit and what this will do is it will make sure it fits the entire image um and it will enlarge it to its Max while still displaying the entire image with nothing cropped you can see that the downside to that is that there's a lot of white space so really it depends what you need but that is your basic usage example that's how you display an image in a swift UI app next we're going to talk about some customizations that you can do to this image oh and one quick thing if you want to download the sample code for for this we've got it all in a single handy exco project in fact it contains a sample code for all of the Swift UI components so that you can learn from it or copy and paste the code into your own project just visit cc. Swift ui kit it's a free download I'll leave it in the description below the video too all right now back to the tutorial now in terms of customization a lot of Swift UI modifiers just work out of the box on the image for example if you wanted to display this image in a specific shape you would use the clip shape modifier and for example we could display a profile photo in a circle just like that now instead of a circle you could also just put a rounded rectangle with a corner radius of 10 not Corner size I make that mistake a lot and that would give you a rounded rectangle let's add some padding to that so that you can actually see it off the edges and so now it's starting to look like a standard card you can also add a shadow so for example that uh puts a default Shadow at the Top If you want it at the bottom you can add you can say that and that switches the uh the y coordinate of the Shadow to point downwards so you can see it's a little below the image now and furthermore let's say you wanted it to be semitransparent you could use an opacity right there and let's say 0 0.5 so it's like half uh transparent semitransparent all right now let's talk about how would you display icons and I don't know if you know but SF symbols this is a great way to use icons in iOS so you can download this app and you can browse through the app for these different symbols I've got one of the older versions installed and let me just launch that so we can so if I search for down let's say we're going to take this one uh and we're going to add a download button or something like that you basically take the name of the symbol and you can display it in a swift UI image component so I'm going to do that here inside xcode let's put this inside a vstack first of all and and then in here I'm just going to add a button where um this is the code and the label is going to be an image now in order to reference the SF symbol name which was arrow. down we have to use another image initi initializer called system name and instead of passing in anything in the asset catalog we would just put arrow down so you can see there's an arrow right there and then we're just going to put a text beside it that says download and so that is our button let's make this a button style um just a bordered bordered prominent there we go now two last things before you go here's a playlist of all the videos where we're going to cover all of the Swift UI components and down here you can grab that xod project that contains the sample code for all of these Swift UI components all right thanks for watching and I'll see you in the next one
