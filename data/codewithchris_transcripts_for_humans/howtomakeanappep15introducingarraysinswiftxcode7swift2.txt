With timestamps:

00:01 - [Music]
00:05 - hey guys welcome to lesson 15 of how to
00:07 - make iPhone apps with no programming
00:10 - experience in this lesson we're going to
00:12 - learn about arrays and we're going to
00:14 - start off in a playground and I'll show
00:16 - you what an array is and how to use it
00:19 - and then we're going to see how we can
00:20 - integrate it into our xcode project and
00:23 - instead of constructing the string with
00:27 - a random number to dictate our card
00:30 - images we're going to use an
00:33 - array okay so the first thing I'm going
00:35 - to do is start a new
00:43 - playground I'm just going to save it on
00:45 - the desktop
00:49 - here now before we dive in and start
00:51 - working with arrays let's define what an
00:54 - array is an array is a collection class
00:57 - that helps you manage a collection of
01:01 - values it's not a UI kit class but it's
01:05 - one of the core classes of the Swift
01:08 - programming language just like the
01:10 - string class in order to understand what
01:13 - it is take a look at this so let's say
01:17 - we have a variable a and we're assigning
01:20 - into it a string now imagine if we had a
01:24 - couple of different strings we would
01:26 - have to declare a variable for each one
01:29 - so so that we can reference
01:31 - it well an array could be very useful in
01:34 - this sort of scenario because an array
01:37 - is an object that will allow you to
01:39 - store all of those strings and you can
01:42 - reference them by index so you can
01:44 - imagine the array almost like a snake of
01:47 - variable values now let's go back to our
01:49 - playground and take a look at how to
01:51 - declare and use an
01:54 - array okay let's begin by declaring a
01:57 - variable and then setting an array into
01:59 - it it so I'm going to type VAR my array
02:05 - equals and I'm going to create an array
02:08 - that has two strings
02:13 - inside so I'm going to put let's say
02:16 - book
02:18 - comma
02:20 - cat okay and just like that we've
02:23 - created an array so how does this syntax
02:26 - work well you'll notice that these
02:29 - square brackets
02:30 - are encompassing two strings with a
02:33 - comma in between and this creates an
02:36 - array that contains these two objects
02:40 - now if I wanted to access let's say book
02:44 - I would type my
02:47 - array and then I would put in square
02:49 - brackets and now I put in the index of
02:52 - the item that I want to access and
02:54 - arrays begin at zero so the first item
02:57 - is actually item number zero when I go
03:00 - like that it returns
03:03 - book and I can actually
03:06 - create an array with three items or as
03:09 - many as I wanted there are actually some
03:11 - pretty cool methods that are associated
03:14 - with arrays that can help us manage a
03:17 - collection of data so for example if I
03:19 - wanted to find out how many items are in
03:22 - my array I can go my array Dot and then
03:26 - call this count
03:28 - method and would return three to me I
03:32 - can also add more items after the
03:34 - Declaration so I can go my
03:37 - array do
03:40 - insert and here you can see that this
03:43 - method accepts a new
03:46 - element at index whatever index I want
03:49 - to insert it into so if I want to insert
03:51 - it into the beginning of my array I
03:53 - would put
03:54 - zero and my new element
03:58 - here could be D
04:00 - so now my array actually
04:06 - has four
04:08 - items and if I
04:10 - access my array square bracket
04:15 - 0 I get dinosaur now now if I didn't
04:19 - care to insert it at a certain index I
04:21 - can also add items like this using the
04:25 - append method and with the append me
04:32 - method it just adds this item to the
04:35 - very end of the
04:39 - array so those are two methods I can use
04:42 - to add items into my array so appending
04:46 - also has another shorthand way you can
04:48 - do it so I can go my array plus equals
04:52 - and if you remember from an earlier
04:55 - lesson if this was an INT plus equal
04:58 - would actually add the value to uh
05:01 - whatever value I had on this side in
05:04 - this case with an array it's going to
05:06 - append the item so I can't do something
05:14 - like
05:16 - this xcode will actually complain and
05:19 - give you an error what I actually have
05:20 - to do is surround that by square
05:23 - brackets just like in the
05:25 - Declaration and just like that this line
05:28 - I've added elephant to the end of my
05:32 - array I can add multiple items to the
05:35 - end of my array by doing
05:41 - this so now I have 1 2 3 four five six
05:47 - seven items in my
05:53 - array I can also remove items from my
05:58 - array so I can say there are a couple
06:01 - methods here remove the last item remove
06:04 - items from a certain range remove an
06:06 - item at a certain index or remove all of
06:13 - them so keep in mind that all of the
06:16 - items in your array must be of the same
06:18 - type so before you learned that you can
06:20 - specify the type of data that the
06:22 - variable or the property will hold well
06:25 - let's do that with an
06:27 - array to declare that this array will
06:29 - store string
06:31 - objects we use
06:34 - colon and then two square brackets and
06:37 - we type string like
06:39 - that make sure you don't do something
06:42 - like
06:43 - this because that indicates that this
06:46 - variable will store a single string
06:49 - object by adding these square brackets
06:52 - it indicates that it's going to store uh
06:54 - this variable or property is going to
06:56 - store an array of string objects
07:00 - so that's what an array is it's very
07:02 - useful to help us manage a collection of
07:04 - values especially with all of the
07:06 - different methods to remove add and
07:08 - count the items so now we can take an
07:12 - array into our card game project and use
07:16 - that to display our cards
07:18 - instead oh one more thing before we move
07:20 - on if you wanted to declare a new array
07:23 - that was empty to begin with and it
07:26 - didn't have any objects you can simply
07:29 - do something like this
07:31 - VAR uh my second
07:34 - array uh let's say it's a type it's an
07:37 - array of ins I can go like
07:40 - that
07:42 - and that indicates that it's an in Array
07:45 - right well an array is an object as well
07:48 - so I do that and that creates a new
07:51 - array object of the type integers and
07:55 - it's empty to begin with it has zero
07:57 - elements as you see here and then all of
08:00 - the other uh methods and stuff like that
08:03 - to append things will work the same
08:07 - way so after running that line my array
08:11 - now has uh one element and what is it if
08:16 - I access that element at
08:21 - zero it's a
08:22 - three so that's what you do when you
08:25 - want to declare an empty array for those
08:27 - times when you don't know what you're
08:28 - going to put in it
08:29 - yet so here I've got our card game
08:32 - project open and I'm going to go into
08:36 - viewcontroller.swift if you remember
08:39 - what we were doing here in our playround
08:42 - tapped uh method we were first
08:44 - randomizing a number between 1 to 13
08:48 - we're putting it in this variable and
08:50 - then we were creating a string object
08:53 - that uh was card followed by the
08:56 - randomized number and then we would use
09:01 - this UI image initializer method and
09:04 - pass in that string to uh get back a UI
09:07 - image object that was initialized to um
09:11 - that image asset in our image asset
09:14 - library right
09:16 - here and then
09:18 - finally we would set that UI image
09:21 - object into the image property of our UI
09:25 - image view object which is the UI class
09:29 - that we used to display images onto the
09:34 - view and then we repeated that for the
09:36 - second card view image so now that we
09:39 - know how to use arrays we don't actually
09:42 - have to do things this way the drawback
09:46 - to doing it this way is that we had to
09:49 - name our cards with this sort of
09:53 - format so we had to name our Ace card
09:57 - one we had to name our Jack card 11 and
10:00 - our queen and king card 12 and
10:03 - 13 well if we if we used an array we
10:07 - actually wouldn't care what the card
10:08 - names are so let me demonstrate I'm
10:11 - going to start by declaring a new
10:14 - property here card names
10:18 - array and it's going to be a string
10:23 - array and I'm going to initialize it
10:27 - to all of our
10:30 - image asset
10:35 - names so when I'm done this array is
10:38 - going to have uh
10:43 - 13 objects in
10:58 - it
11:00 - so now I've got a string array with 13
11:05 - string objects in
11:07 - it representing my 13
11:11 - cards so down here instead of creating a
11:16 - string with this string with
11:20 - format I could just access the objects
11:24 - in my array depending on what randomized
11:28 - number is selected so I would
11:31 - do this self card names
11:37 - array square bracket and I put in the
11:39 - index here and the index I want to put
11:41 - is first random number so after doing
11:44 - that xcode gives us an error let's see
11:47 - what it says cannot subscript a value of
11:50 - type string array with an index of Type
11:53 - U in32 and the reason it's saying this
11:56 - is because we are trying to spef specify
11:59 - the index of the array using first
12:02 - random number and you have to use an INT
12:05 - to specify the index of the array that
12:08 - you want to retrieve the first random
12:10 - number is a u in32 because Arc for
12:14 - random uniform returns a u in 32 and a
12:18 - uint represents an unsigned integer so
12:22 - it's only in the positive range and 32
12:25 - is just the size so in order to fix this
12:29 - we can tell xcode to treat this as an
12:32 - INT so how we can do that
12:36 - is we just write int Open Bracket and we
12:40 - put this whole statement inside the
12:43 - brackets like that and now it's going to
12:46 - randomize a u in32 it's going to treat
12:51 - it as an integer and it's it's going to
12:54 - assign it to this variable and let's put
12:57 - the data type of this variable as an an
13:00 - INT and now we can use this number as
13:05 - the index of our
13:07 - array there's one more thing we have to
13:09 - change though because remember even
13:11 - though we have 13 objects in our array
13:14 - the array is zerob based so the first
13:16 - item is actually zero and the 13th item
13:19 - is actually at index 12 so because this
13:23 - right here gives us 1 to 13 there's a
13:26 - possibility that it may crash our app if
13:29 - your array has 13 items and you try to
13:33 - access uh the index 13 it's going to
13:36 - crash your app because there is nothing
13:38 - at index 13 uh the 13th item is at index
13:42 - 12 so we can modify that by just
13:46 - removing this plus
13:48 - one and now this randomization function
13:52 - returns 0 to 12 we added the one before
13:56 - because we needed 1 to 13 but now we
13:59 - need 0 to 12 so we don't need to add one
14:01 - so now this will actually work and I'm
14:04 - going to leave the second card using the
14:07 - old method and you can see that both
14:21 - work okay
14:22 - great and now let's convert the
14:26 - switching of the second card to use the
14:28 - array as well so I'm going
14:34 - to get rid of
14:54 - that and then get rid of the plus
14:57 - one
15:00 - what we're doing here telling it to
15:02 - treat this u32 as an in is called
15:06 - casting and casting is just a way of
15:08 - saying to treat one data type as another
15:12 - so by using an array we actually don't
15:15 - care what our image asset names are if I
15:18 - had wanted to name uh my asset here
15:22 - let's change it for good measure going
15:25 - call this my
15:27 - Ace I'm going to call this
15:30 - Jack
15:31 - queen and king if we go back to here we
15:38 - update the
15:44 - names and this will still work because
15:47 - we're merely accessing element 12 or
15:51 - Element 11 and we're retrieving that
15:53 - name there and this is just a single use
15:56 - of an array there's other uses where
15:58 - we're going to demonstrate in our future
16:06 - projects in the next lesson we're going
16:08 - to learn about if statements which will
16:10 - allow us to control the flow of logic or
16:13 - the flow of execution and it gives our
16:16 - app the ability to make decisions based
16:18 - on conditions that we specify and we're
16:20 - going to use that to determine which of
16:23 - the two cards is the larger card and
16:25 - declare a winner on a closing note I
16:29 - want to let you know that Apple has this
16:31 - great Swift programming language guide
16:34 - and it tells you about a lot of the
16:36 - features that we're going through now I
16:38 - don't expect you to read this but it can
16:41 - be handy to have it as a reference we're
16:43 - going to go through all of these
16:45 - Concepts together in the process of
16:47 - building our projects anyways but you
16:49 - can see here in this section it talks
16:51 - about strings which we went through uh
16:53 - it talks about collection types which we
16:55 - introduced the array from and it's going
16:58 - to talk about control flow uh we learned
17:00 - about methods properties
17:02 - classes it might be a little bit
17:04 - overwhelming to read as a beginner uh
17:07 - but you know if you're watching anything
17:09 - in the video here and you'd like to
17:11 - learn more about it or see some more
17:13 - examples this programming language guide
17:16 - can be a good place to do that I'll add
17:19 - the link to this programming language
17:21 - guide below the video okay so thanks for
17:24 - watching and I'll see you guys in the
17:25 - next
17:27 - lesson
17:29 - [Music]

Cleaned transcript:

hey guys welcome to lesson 15 of how to make iPhone apps with no programming experience in this lesson we're going to learn about arrays and we're going to start off in a playground and I'll show you what an array is and how to use it and then we're going to see how we can integrate it into our xcode project and instead of constructing the string with a random number to dictate our card images we're going to use an array okay so the first thing I'm going to do is start a new playground I'm just going to save it on the desktop here now before we dive in and start working with arrays let's define what an array is an array is a collection class that helps you manage a collection of values it's not a UI kit class but it's one of the core classes of the Swift programming language just like the string class in order to understand what it is take a look at this so let's say we have a variable a and we're assigning into it a string now imagine if we had a couple of different strings we would have to declare a variable for each one so so that we can reference it well an array could be very useful in this sort of scenario because an array is an object that will allow you to store all of those strings and you can reference them by index so you can imagine the array almost like a snake of variable values now let's go back to our playground and take a look at how to declare and use an array okay let's begin by declaring a variable and then setting an array into it it so I'm going to type VAR my array equals and I'm going to create an array that has two strings inside so I'm going to put let's say book comma cat okay and just like that we've created an array so how does this syntax work well you'll notice that these square brackets are encompassing two strings with a comma in between and this creates an array that contains these two objects now if I wanted to access let's say book I would type my array and then I would put in square brackets and now I put in the index of the item that I want to access and arrays begin at zero so the first item is actually item number zero when I go like that it returns book and I can actually create an array with three items or as many as I wanted there are actually some pretty cool methods that are associated with arrays that can help us manage a collection of data so for example if I wanted to find out how many items are in my array I can go my array Dot and then call this count method and would return three to me I can also add more items after the Declaration so I can go my array do insert and here you can see that this method accepts a new element at index whatever index I want to insert it into so if I want to insert it into the beginning of my array I would put zero and my new element here could be D so now my array actually has four items and if I access my array square bracket 0 I get dinosaur now now if I didn't care to insert it at a certain index I can also add items like this using the append method and with the append me method it just adds this item to the very end of the array so those are two methods I can use to add items into my array so appending also has another shorthand way you can do it so I can go my array plus equals and if you remember from an earlier lesson if this was an INT plus equal would actually add the value to uh whatever value I had on this side in this case with an array it's going to append the item so I can't do something like this xcode will actually complain and give you an error what I actually have to do is surround that by square brackets just like in the Declaration and just like that this line I've added elephant to the end of my array I can add multiple items to the end of my array by doing this so now I have 1 2 3 four five six seven items in my array I can also remove items from my array so I can say there are a couple methods here remove the last item remove items from a certain range remove an item at a certain index or remove all of them so keep in mind that all of the items in your array must be of the same type so before you learned that you can specify the type of data that the variable or the property will hold well let's do that with an array to declare that this array will store string objects we use colon and then two square brackets and we type string like that make sure you don't do something like this because that indicates that this variable will store a single string object by adding these square brackets it indicates that it's going to store uh this variable or property is going to store an array of string objects so that's what an array is it's very useful to help us manage a collection of values especially with all of the different methods to remove add and count the items so now we can take an array into our card game project and use that to display our cards instead oh one more thing before we move on if you wanted to declare a new array that was empty to begin with and it didn't have any objects you can simply do something like this VAR uh my second array uh let's say it's a type it's an array of ins I can go like that and that indicates that it's an in Array right well an array is an object as well so I do that and that creates a new array object of the type integers and it's empty to begin with it has zero elements as you see here and then all of the other uh methods and stuff like that to append things will work the same way so after running that line my array now has uh one element and what is it if I access that element at zero it's a three so that's what you do when you want to declare an empty array for those times when you don't know what you're going to put in it yet so here I've got our card game project open and I'm going to go into viewcontroller.swift if you remember what we were doing here in our playround tapped uh method we were first randomizing a number between 1 to 13 we're putting it in this variable and then we were creating a string object that uh was card followed by the randomized number and then we would use this UI image initializer method and pass in that string to uh get back a UI image object that was initialized to um that image asset in our image asset library right here and then finally we would set that UI image object into the image property of our UI image view object which is the UI class that we used to display images onto the view and then we repeated that for the second card view image so now that we know how to use arrays we don't actually have to do things this way the drawback to doing it this way is that we had to name our cards with this sort of format so we had to name our Ace card one we had to name our Jack card 11 and our queen and king card 12 and 13 well if we if we used an array we actually wouldn't care what the card names are so let me demonstrate I'm going to start by declaring a new property here card names array and it's going to be a string array and I'm going to initialize it to all of our image asset names so when I'm done this array is going to have uh 13 objects in it so now I've got a string array with 13 string objects in it representing my 13 cards so down here instead of creating a string with this string with format I could just access the objects in my array depending on what randomized number is selected so I would do this self card names array square bracket and I put in the index here and the index I want to put is first random number so after doing that xcode gives us an error let's see what it says cannot subscript a value of type string array with an index of Type U in32 and the reason it's saying this is because we are trying to spef specify the index of the array using first random number and you have to use an INT to specify the index of the array that you want to retrieve the first random number is a u in32 because Arc for random uniform returns a u in 32 and a uint represents an unsigned integer so it's only in the positive range and 32 is just the size so in order to fix this we can tell xcode to treat this as an INT so how we can do that is we just write int Open Bracket and we put this whole statement inside the brackets like that and now it's going to randomize a u in32 it's going to treat it as an integer and it's it's going to assign it to this variable and let's put the data type of this variable as an an INT and now we can use this number as the index of our array there's one more thing we have to change though because remember even though we have 13 objects in our array the array is zerob based so the first item is actually zero and the 13th item is actually at index 12 so because this right here gives us 1 to 13 there's a possibility that it may crash our app if your array has 13 items and you try to access uh the index 13 it's going to crash your app because there is nothing at index 13 uh the 13th item is at index 12 so we can modify that by just removing this plus one and now this randomization function returns 0 to 12 we added the one before because we needed 1 to 13 but now we need 0 to 12 so we don't need to add one so now this will actually work and I'm going to leave the second card using the old method and you can see that both work okay great and now let's convert the switching of the second card to use the array as well so I'm going to get rid of that and then get rid of the plus one what we're doing here telling it to treat this u32 as an in is called casting and casting is just a way of saying to treat one data type as another so by using an array we actually don't care what our image asset names are if I had wanted to name uh my asset here let's change it for good measure going call this my Ace I'm going to call this Jack queen and king if we go back to here we update the names and this will still work because we're merely accessing element 12 or Element 11 and we're retrieving that name there and this is just a single use of an array there's other uses where we're going to demonstrate in our future projects in the next lesson we're going to learn about if statements which will allow us to control the flow of logic or the flow of execution and it gives our app the ability to make decisions based on conditions that we specify and we're going to use that to determine which of the two cards is the larger card and declare a winner on a closing note I want to let you know that Apple has this great Swift programming language guide and it tells you about a lot of the features that we're going through now I don't expect you to read this but it can be handy to have it as a reference we're going to go through all of these Concepts together in the process of building our projects anyways but you can see here in this section it talks about strings which we went through uh it talks about collection types which we introduced the array from and it's going to talk about control flow uh we learned about methods properties classes it might be a little bit overwhelming to read as a beginner uh but you know if you're watching anything in the video here and you'd like to learn more about it or see some more examples this programming language guide can be a good place to do that I'll add the link to this programming language guide below the video okay so thanks for watching and I'll see you guys in the next lesson
