With timestamps:

00:00 - hey code crew how's it going it's Chris
00:02 - here and this is my new recording space
00:05 - but don't mind what you see in the
00:06 - background because it's a work in
00:07 - progress and things are going to change
00:09 - in the next few weeks as for today's
00:12 - topic one of the most requested things I
00:15 - get asked about how to do is how to
00:16 - create a login page for your app in
00:18 - other words how to implement
00:20 - authentication for your app now in
00:22 - today's video I'm going to show you just
00:24 - how easy you can do that using the
00:26 - authentication features of the firebase
00:28 - platform it sound good
00:30 - alright let's get to it so I want to
00:34 - first show you guys what this
00:36 - authentication flow looks like with the
00:39 - firebase off you I incorporated so here
00:42 - I have this little sketch diagram I
00:44 - created for a module in my course but
00:47 - it's still gonna apply for this demo
00:49 - right here now first we're going to have
00:51 - this view controller here which is gonna
00:53 - have a couple of buttons and maybe a
00:55 - title screen or something like that each
00:57 - button will be a different sign-in
00:58 - method however for this demo we're only
01:00 - covering basic email password
01:02 - authentication and so there'll just be
01:04 - one button when they tap on that button
01:06 - however it's going to launch this
01:08 - firebase off you eye view controller and
01:11 - this view controller actually contains a
01:13 - bunch of different screens to capture
01:16 - the user's email and password and if
01:18 - it's a new account to capture their name
01:20 - as well and it takes care of all of that
01:22 - logic for you
01:23 - you don't have to build any of these
01:25 - screens all you have to worry about is
01:27 - receiving the result of the submission
01:30 - after the user enters in their email and
01:33 - password and submits it to the firebase
01:35 - authentication store where all of these
01:38 - user credentials are stored you just get
01:40 - the result whether it was a successful
01:42 - login or a successful account creation
01:45 - or unsuccessful so back in the same view
01:49 - controller you can detect that result
01:51 - and then you can decide where to send
01:53 - the user either for in this diagram here
01:57 - because we had some additional
01:59 - information we wanted to capture from
02:00 - the user if we detected it was a new
02:03 - account
02:03 - we sent them to a profile view
02:04 - controller and if we detected if it was
02:07 - a login then we would send them to the
02:09 - home screen instead for this demo we're
02:10 - just going to send them
02:12 - straight to the homescreen all right so
02:14 - I just wanted to show you what this
02:15 - authentication flow looks like now we're
02:17 - going to jump into Xcode so we're gonna
02:20 - create our project now this part I might
02:22 - move a little bit fast because we've set
02:25 - up firebase so many times in all of our
02:27 - firebase demos if it seems a little fast
02:29 - for you I highly recommend that you
02:31 - watch the firebase crash course video
02:33 - which I'll link to right here and it
02:35 - will also be in the description below
02:37 - but for this part I just want to get it
02:39 - set up really quickly so I can actually
02:40 - get to showing you the authentication
02:42 - part of the tutorial so I'm going to
02:45 - choose single view application under iOS
02:47 - and I'm gonna call this off demo 3
02:50 - because I've done this a few times I
02:52 - might have this saved somewhere I'm
02:54 - gonna create this on my desktop and we
02:58 - are actually gonna jump into firebase
03:00 - now take note that this bundle
03:02 - identifier is - com dot code with Chris
03:05 - auth demo 3 yours might be something
03:08 - different so take note of that go to
03:10 - firebase google.com and sign in or go to
03:13 - console in the upper right hand corner
03:15 - and then we are going to create a new
03:18 - firebase project so add project I call
03:22 - this a demo let's just accept all this
03:25 - stuff it's creating my project give it a
03:28 - few minutes to do so all right so let's
03:33 - hit continue now we're at our firebase
03:36 - console and we want to get started with
03:39 - iOS it's going to bring us into a wizard
03:42 - or we have to put in the bundle ID ID
03:44 - I'm just gonna paste it in there
03:46 - register app now we're going to download
03:48 - this Google service info.plist which
03:52 - contains all of the configuration
03:53 - details that the Xcode project needs in
03:56 - order to find our database instance so
04:01 - let's go ahead and go into finder on my
04:03 - desktop that's where I saved it when I
04:05 - drag it straight into the file navigator
04:08 - of my Xcode project make sure that add
04:10 - two targets is enabled for this project
04:12 - and also copy items if needed to click
04:15 - finish and it's going to make a copy of
04:17 - this Google service info file inside my
04:21 - project folder
04:22 - all right so now we're going to go ahead
04:24 - and close the Xcode project because the
04:27 - next step is to add the firebase SDK
04:30 - using cocoapods
04:32 - so go ahead and launch terminal navigate
04:36 - to your project directory a desktop auth
04:41 - demo 3 and then type in patan it to
04:45 - initialize my project for cocoa pods I'm
04:51 - going to open up the pod file in my text
04:53 - editor and we're gonna add a couple of
04:56 - pods for firebase so an add firebase
05:00 - core and we're also gonna add firebase
05:05 - let me double check here so this is the
05:08 - documentation you can get to this screen
05:10 - actually from the wizard here just
05:12 - there's a link for go-to Docs and it's a
05:15 - good idea to have this stuff handy as
05:18 - you're working with firebase you get to
05:20 - a screen like this on the left hand side
05:22 - you have all these different tabs click
05:24 - on authentication and sign in with a
05:26 - prebuilt UI so it's telling us that we
05:29 - can add either the firebase UI pod or we
05:33 - can add individual ones since for this
05:35 - demo we're only working with email and
05:37 - password authentication I'm just gonna
05:39 - add the firebase UI slash auth pod I'm
05:46 - gonna save this file close it go back to
05:49 - terminal and type in pod install now
05:53 - mine's going pretty fast yours might go
05:54 - a little slower so if it looks like it's
05:56 - not doing anything just give it a little
05:58 - bit of time go grab a coffee or
06:00 - something ok now we can go back to our
06:03 - project folder and I can open up XC
06:06 - workspace the first thing I usually do
06:10 - is hit command B just to build the
06:12 - project make sure everything compiles so
06:14 - we know we're working our starting point
06:17 - is solid alright looks good so the next
06:23 - step and I pretty much have this by
06:27 - memory but I'll show you through the
06:29 - wizard so you don't get confused the
06:32 - next step is to in the app delegate
06:35 - class to import firebase and also call
06:37 - firebase app configure before the return
06:40 - statement
06:41 - okay so in the app delegate dot Swift
06:45 - class we're going to import firebase now
06:50 - if you get an error here like it's not
06:52 - recognizing that firebase import
06:54 - statement then make sure you build the
06:56 - project first like I did here you're
06:58 - gonna call firebase app configure and
07:01 - now I'm going to launch this project
07:03 - might take a little while because my
07:05 - simulator is just starting up but
07:11 - essentially what is going to happen is
07:15 - our project is going to try to
07:17 - communicate with the firebase servers in
07:19 - this next step is going to try to detect
07:22 - that just to verify that your
07:23 - installation was good and if you've done
07:27 - this enough times pretty confident with
07:29 - what you're doing you can go ahead and
07:30 - skip this step otherwise you just have
07:33 - to wait for a few I do like about a
07:38 - minute usually once in your Xcode
07:41 - project you see this sort of output here
07:43 - in the console window at that point it's
07:48 - gonna take like maybe a minute half a
07:51 - minute to a minute for this to detect
07:55 - alright so it looks good now we're going
07:58 - to click continue to console now I want
08:01 - you to go into the authentication tab
08:03 - here go into the sign-in method tab and
08:08 - you can see all of the different ways
08:10 - that you can allow users to sign in
08:13 - you're gonna have to do something
08:14 - special for each of these but it's there
08:18 - if you want it we're gonna work on the
08:21 - email and password integration here so
08:24 - click this little edit button and enable
08:26 - this click Save
08:27 - you're gonna see the status for email
08:29 - and password is enabled now now go back
08:31 - to the users tab and you'll see that
08:33 - this is empty but this is where you're
08:35 - gonna see all of the users that have
08:38 - signed up into your app through the this
08:42 - is basically the authentication store to
08:43 - put it simply you're going to see all of
08:45 - your users here
08:46 - and all of their user IDs and notice
08:50 - here that there is a user UID column
08:52 - these are unique IDs for all of the
08:55 - users that create accounts through your
08:56 - app now this UID column is really
08:59 - important because you want to if you're
09:01 - allowing users to create data on the
09:03 - database side of things then that UID is
09:07 - what you're going to use to tie that
09:09 - data to users in your authentication
09:12 - user store all right so let's now go
09:16 - into Xcode and we can then now actually
09:21 - implement the authentication flow so
09:24 - let's stop the project let's go into the
09:26 - storyboard and we're going to add a
09:27 - couple of elements here just so we have
09:29 - something to work with and I had a label
09:33 - here you can add a button okay I'm gonna
09:40 - go pretty fast because it doesn't matter
09:42 - what this stuff is it's just placeholder
09:45 - stuff let's call this firebase off demo
09:51 - and then I grab both of these put them
09:54 - into a stack view and then I'm gonna
09:56 - Center it add some spacing in between
09:58 - these elements and then Center it on the
10:03 - view here and now what we're going to
10:06 - want to do is open up this assistant
10:11 - editor on the right hand side I see view
10:13 - controller dot Swift and on the left
10:16 - hand side I see this actually I would
10:20 - rather see this so you can slide out the
10:22 - tray what I want to do is add a handler
10:26 - for the button tap so that when the user
10:27 - taps the login button there I can
10:30 - respond to it with code so I hold down
10:32 - ctrl click and drag here let go I'm
10:37 - going to choose action as the connection
10:39 - type and
10:41 - and type login tap that's the name of my
10:45 - IB action method now I can write code in
10:47 - here to respond to that button tap now
10:50 - let's go back to the storyboard we're
10:52 - not done here yet alright let's add
10:54 - another view controller because we want
10:57 - to be able to send the user somewhere
11:00 - after they log in or create an account
11:02 - right here I'm going to just add a label
11:05 - quickly just so that we can see that
11:08 - it's a different screen I'm just gonna
11:09 - call it welcome and I'm gonna Center it
11:13 - horizontally and vertically now the last
11:16 - step is I'm going to add a programmatic
11:19 - segue basically a way to transition from
11:22 - that screen to our second screen and I'm
11:25 - going to programmatically call this
11:26 - segue to trigger this transition when
11:30 - the user has successfully created an
11:31 - account or Sundin so from here and a
11:35 - hold down control click and drag their
11:37 - manual segue show it's gonna create this
11:40 - little segue here and highlight it and
11:42 - give it an ID this is important because
11:44 - we need to have an ID to identify and
11:48 - call it from the code I just call it go
11:51 - home something simple like that now I'm
11:55 - gonna go into the view controller now we
11:57 - can actually start writing the code for
11:59 - the firebase UI stuff now in the import
12:03 - up here first thing you want to do is
12:05 - import firebase off the UI because we're
12:08 - going to be using that pre-built UI and
12:12 - in the login tab we're first going to
12:14 - get the default auth UI object set
12:20 - ourselves as a delegate I get a
12:26 - reference to the Baath UI view
12:30 - controller this is this is this stuff
12:35 - right here you know the actual email
12:38 - password UI alright and then we are
12:42 - going to lastly show it alright so let's
12:45 - start with this first part here this is
12:49 - a little bit cryptic the class name is
12:51 - fu I off
12:54 - and to get the default awethu I object
12:57 - we call this type method called default
12:59 - auth UI now we were it returns if you
13:02 - notice an optional type so we're gonna
13:05 - have to check that it's not nil so let's
13:07 - assign it to auto I and then we're gonna
13:10 - use a guard statement
13:12 - guard off UI not equal to nil else we're
13:17 - gonna say you know log the error and
13:20 - we're gonna return and just cancel out
13:23 - because we can't do anything if we don't
13:24 - have that default auth UI object now we
13:27 - want to set ourselves as the delegate
13:32 - for that auth UI object because if you
13:35 - remember from this authentication flow
13:38 - in this firebase UI the user is going to
13:41 - enter in the username and password and
13:43 - submit this stuff over to the firebase
13:45 - platform and then whatever result we get
13:48 - back we want to hear back from it right
13:50 - so we this login view controller and in
13:53 - our case view controller without Swift
13:55 - has to sign up to get notified
13:58 - essentially so that's what we're doing
14:00 - here setting ourselves as the delegate
14:03 - for the auth UI and the auth UI object
14:06 - is going to notify the delegate when it
14:10 - gets a result all right so now let's get
14:12 - a reference to the auth you wide view
14:15 - controller so let off view controller
14:18 - equal auth UI I'm gonna force and wrap
14:24 - this off view controller the reason why
14:28 - I can force and route this is because we
14:30 - have already checked that it's not nil
14:32 - up here so I know it's not nil now we
14:35 - can present this auth view controller
14:39 - animated is true completion is nil this
14:44 - is an error right now because we haven't
14:46 - we haven't said that view controller
14:48 - conforms to that protocol so that's the
14:51 - next step here but let's double check
14:54 - what that protocol name is fui off
14:57 - delegate right all right at the bottom
15:00 - of the file we're gonna create an
15:01 - extension for the
15:04 - view controller and we're gonna
15:07 - implement the protocol here just so it's
15:09 - a little cleaner it's not as messy fui
15:12 - awesome delegate and there's one
15:15 - delegate method in particular that's
15:17 - very important to implement and that's
15:18 - did sign-in with you can see that it's
15:21 - got an error parameter it's also got an
15:24 - auth data result parameter first thing
15:27 - you want to check there was an error is
15:31 - checking against error you want this err
15:34 - parameter to be nil because that means
15:36 - there was no error so you want a guard
15:41 - error not equal to nil guard you know
15:48 - you want to guard the error is nil
15:51 - otherwise if it's not nil then log the
15:57 - error and return that's like a double
16:05 - negative statement so it's a little
16:06 - confusing because you want because if
16:09 - the error is nil then that means there's
16:11 - no error okay so you want to guard that
16:13 - it is know otherwise yeah it's a little
16:18 - confusing but an easier way to write it
16:20 - if that's hard to understand is just if
16:24 - error is not equal to nil right then log
16:32 - error and return like these two
16:34 - statements are equal it's just that this
16:36 - one you know is like a double negative
16:39 - so it's a little harder to understand
16:40 - you know it's up to you okay so at this
16:47 - point if there's no error then I want to
16:49 - show you how you can actually get the
16:51 - user that's signed in or was created and
16:53 - access their UID because potentially you
16:56 - may need to check you know if they've
16:59 - got a profile set up or whatever but
17:03 - having that UID allows you to check on
17:05 - the database side for anything you need
17:08 - to check for to decide where to send the
17:11 - user next you know whether you're going
17:12 - to send them to a home screen or whether
17:14 - you're going to send
17:15 - - like a setup wizard or something to
17:17 - set up their profile so if you want to
17:20 - get their UID you can get it from the
17:22 - off the data result it's got a user
17:25 - property and this is where the firebase
17:27 - user would be stored and then that user
17:31 - object has a UID property so that's how
17:35 - you can get that I'm just going to
17:36 - comment this out because we don't need
17:38 - it in this demo what we do want to do
17:41 - however is send the user to that welcome
17:43 - screen after they've successfully signed
17:45 - in or created an account so this that
17:48 - would be basically perform segue with
17:51 - identifier go home and the sender would
17:54 - be self now let's try this out shall we
17:57 - let's press command or and run it and
18:02 - let's take a look alright so we've got
18:06 - our login screen here we're gonna click
18:08 - the login button and we're gonna get the
18:09 - firebase off UI there we go this stuff
18:12 - we didn't even build right this stuff is
18:14 - we get for free from firebase so go
18:17 - ahead enter in an email I'm gonna call
18:19 - it test that test comm click Next it's
18:22 - gonna go check the user store to see if
18:24 - this is a new account or if it's an
18:26 - existing account you can see here it
18:29 - detected there was no account under that
18:31 - email so it says create account and put
18:33 - in a name in a password
18:35 - test test now I don't use this password
18:40 - anywhere so don't try to hacked me okay
18:44 - so now we've created an account and
18:46 - we've come into the home screen isn't
18:49 - that cool let's stop the project let's
18:52 - run it again let's take a look at
18:56 - logging in this time instead of creating
18:58 - an account so click login
19:00 - I'm gonna enter in the same email
19:02 - address click Next and you can see that
19:05 - this time firebase detected that it is
19:08 - assignment and not a new account so it
19:10 - doesn't ask me for creating an account
19:14 - sign in boom there we go so there's one
19:18 - more thing I want to show you and that
19:20 - is the user in the user store that we
19:25 - created so I'm going to press this
19:27 - reload button and you
19:28 - see here is the account I created and
19:31 - here is the user UID right so this is
19:35 - the UID that you're going to use to tie
19:37 - to data that I would create in the
19:41 - database if I were to like post a
19:43 - comment or you know upload a photo or
19:45 - something like that and you want to
19:47 - associate those pieces of data with the
19:49 - user that generated them and you would
19:51 - log it based on the UID so that was a
19:55 - quick tutorial on how to implement email
19:57 - and password authentication with
19:58 - firebase pretty easy to set up right in
20:01 - the future we might go through different
20:03 - ways of signing in such as using your
20:04 - Facebook account or your Twitter account
20:06 - so if you want to see those and you like
20:08 - this video please make sure to subscribe
20:10 - to my channel just click the subscribe
20:12 - button below also if you want to see
20:13 - more tutorials like this one make sure
20:15 - you visit code with Chris comp and sign
20:18 - up for the newsletter where I share
20:19 - these tutorials with the newsletter
20:21 - before they're actually published
20:23 - anywhere now I want to turn it over to
20:25 - you in the app idea that you have do you
20:27 - have any sort of user login or account
20:29 - creation if so what sorts of sign-in
20:32 - methods are you going to implement or
20:34 - you want to implement let me know by
20:36 - leaving a quick comment below all right
20:38 - so thanks for watching and I'll see you
20:40 - guys next time
20:41 - hey did you join my free Facebook
20:43 - community yet that's where I hang out
20:45 - along with a ton of other people
20:46 - learning iOS just like yourself I also
20:49 - post early access to all my videos
20:51 - inside that group before I put them on
20:53 - YouTube you can also get help with any
20:56 - questions you're having visit the link
20:58 - below click on the join group button and
21:00 - I'll approve your request right away
21:02 - alright so I'll see you in there talk
21:03 - soon

Cleaned transcript:

hey code crew how's it going it's Chris here and this is my new recording space but don't mind what you see in the background because it's a work in progress and things are going to change in the next few weeks as for today's topic one of the most requested things I get asked about how to do is how to create a login page for your app in other words how to implement authentication for your app now in today's video I'm going to show you just how easy you can do that using the authentication features of the firebase platform it sound good alright let's get to it so I want to first show you guys what this authentication flow looks like with the firebase off you I incorporated so here I have this little sketch diagram I created for a module in my course but it's still gonna apply for this demo right here now first we're going to have this view controller here which is gonna have a couple of buttons and maybe a title screen or something like that each button will be a different signin method however for this demo we're only covering basic email password authentication and so there'll just be one button when they tap on that button however it's going to launch this firebase off you eye view controller and this view controller actually contains a bunch of different screens to capture the user's email and password and if it's a new account to capture their name as well and it takes care of all of that logic for you you don't have to build any of these screens all you have to worry about is receiving the result of the submission after the user enters in their email and password and submits it to the firebase authentication store where all of these user credentials are stored you just get the result whether it was a successful login or a successful account creation or unsuccessful so back in the same view controller you can detect that result and then you can decide where to send the user either for in this diagram here because we had some additional information we wanted to capture from the user if we detected it was a new account we sent them to a profile view controller and if we detected if it was a login then we would send them to the home screen instead for this demo we're just going to send them straight to the homescreen all right so I just wanted to show you what this authentication flow looks like now we're going to jump into Xcode so we're gonna create our project now this part I might move a little bit fast because we've set up firebase so many times in all of our firebase demos if it seems a little fast for you I highly recommend that you watch the firebase crash course video which I'll link to right here and it will also be in the description below but for this part I just want to get it set up really quickly so I can actually get to showing you the authentication part of the tutorial so I'm going to choose single view application under iOS and I'm gonna call this off demo 3 because I've done this a few times I might have this saved somewhere I'm gonna create this on my desktop and we are actually gonna jump into firebase now take note that this bundle identifier is com dot code with Chris auth demo 3 yours might be something different so take note of that go to firebase google.com and sign in or go to console in the upper right hand corner and then we are going to create a new firebase project so add project I call this a demo let's just accept all this stuff it's creating my project give it a few minutes to do so all right so let's hit continue now we're at our firebase console and we want to get started with iOS it's going to bring us into a wizard or we have to put in the bundle ID ID I'm just gonna paste it in there register app now we're going to download this Google service info.plist which contains all of the configuration details that the Xcode project needs in order to find our database instance so let's go ahead and go into finder on my desktop that's where I saved it when I drag it straight into the file navigator of my Xcode project make sure that add two targets is enabled for this project and also copy items if needed to click finish and it's going to make a copy of this Google service info file inside my project folder all right so now we're going to go ahead and close the Xcode project because the next step is to add the firebase SDK using cocoapods so go ahead and launch terminal navigate to your project directory a desktop auth demo 3 and then type in patan it to initialize my project for cocoa pods I'm going to open up the pod file in my text editor and we're gonna add a couple of pods for firebase so an add firebase core and we're also gonna add firebase let me double check here so this is the documentation you can get to this screen actually from the wizard here just there's a link for goto Docs and it's a good idea to have this stuff handy as you're working with firebase you get to a screen like this on the left hand side you have all these different tabs click on authentication and sign in with a prebuilt UI so it's telling us that we can add either the firebase UI pod or we can add individual ones since for this demo we're only working with email and password authentication I'm just gonna add the firebase UI slash auth pod I'm gonna save this file close it go back to terminal and type in pod install now mine's going pretty fast yours might go a little slower so if it looks like it's not doing anything just give it a little bit of time go grab a coffee or something ok now we can go back to our project folder and I can open up XC workspace the first thing I usually do is hit command B just to build the project make sure everything compiles so we know we're working our starting point is solid alright looks good so the next step and I pretty much have this by memory but I'll show you through the wizard so you don't get confused the next step is to in the app delegate class to import firebase and also call firebase app configure before the return statement okay so in the app delegate dot Swift class we're going to import firebase now if you get an error here like it's not recognizing that firebase import statement then make sure you build the project first like I did here you're gonna call firebase app configure and now I'm going to launch this project might take a little while because my simulator is just starting up but essentially what is going to happen is our project is going to try to communicate with the firebase servers in this next step is going to try to detect that just to verify that your installation was good and if you've done this enough times pretty confident with what you're doing you can go ahead and skip this step otherwise you just have to wait for a few I do like about a minute usually once in your Xcode project you see this sort of output here in the console window at that point it's gonna take like maybe a minute half a minute to a minute for this to detect alright so it looks good now we're going to click continue to console now I want you to go into the authentication tab here go into the signin method tab and you can see all of the different ways that you can allow users to sign in you're gonna have to do something special for each of these but it's there if you want it we're gonna work on the email and password integration here so click this little edit button and enable this click Save you're gonna see the status for email and password is enabled now now go back to the users tab and you'll see that this is empty but this is where you're gonna see all of the users that have signed up into your app through the this is basically the authentication store to put it simply you're going to see all of your users here and all of their user IDs and notice here that there is a user UID column these are unique IDs for all of the users that create accounts through your app now this UID column is really important because you want to if you're allowing users to create data on the database side of things then that UID is what you're going to use to tie that data to users in your authentication user store all right so let's now go into Xcode and we can then now actually implement the authentication flow so let's stop the project let's go into the storyboard and we're going to add a couple of elements here just so we have something to work with and I had a label here you can add a button okay I'm gonna go pretty fast because it doesn't matter what this stuff is it's just placeholder stuff let's call this firebase off demo and then I grab both of these put them into a stack view and then I'm gonna Center it add some spacing in between these elements and then Center it on the view here and now what we're going to want to do is open up this assistant editor on the right hand side I see view controller dot Swift and on the left hand side I see this actually I would rather see this so you can slide out the tray what I want to do is add a handler for the button tap so that when the user taps the login button there I can respond to it with code so I hold down ctrl click and drag here let go I'm going to choose action as the connection type and and type login tap that's the name of my IB action method now I can write code in here to respond to that button tap now let's go back to the storyboard we're not done here yet alright let's add another view controller because we want to be able to send the user somewhere after they log in or create an account right here I'm going to just add a label quickly just so that we can see that it's a different screen I'm just gonna call it welcome and I'm gonna Center it horizontally and vertically now the last step is I'm going to add a programmatic segue basically a way to transition from that screen to our second screen and I'm going to programmatically call this segue to trigger this transition when the user has successfully created an account or Sundin so from here and a hold down control click and drag their manual segue show it's gonna create this little segue here and highlight it and give it an ID this is important because we need to have an ID to identify and call it from the code I just call it go home something simple like that now I'm gonna go into the view controller now we can actually start writing the code for the firebase UI stuff now in the import up here first thing you want to do is import firebase off the UI because we're going to be using that prebuilt UI and in the login tab we're first going to get the default auth UI object set ourselves as a delegate I get a reference to the Baath UI view controller this is this is this stuff right here you know the actual email password UI alright and then we are going to lastly show it alright so let's start with this first part here this is a little bit cryptic the class name is fu I off and to get the default awethu I object we call this type method called default auth UI now we were it returns if you notice an optional type so we're gonna have to check that it's not nil so let's assign it to auto I and then we're gonna use a guard statement guard off UI not equal to nil else we're gonna say you know log the error and we're gonna return and just cancel out because we can't do anything if we don't have that default auth UI object now we want to set ourselves as the delegate for that auth UI object because if you remember from this authentication flow in this firebase UI the user is going to enter in the username and password and submit this stuff over to the firebase platform and then whatever result we get back we want to hear back from it right so we this login view controller and in our case view controller without Swift has to sign up to get notified essentially so that's what we're doing here setting ourselves as the delegate for the auth UI and the auth UI object is going to notify the delegate when it gets a result all right so now let's get a reference to the auth you wide view controller so let off view controller equal auth UI I'm gonna force and wrap this off view controller the reason why I can force and route this is because we have already checked that it's not nil up here so I know it's not nil now we can present this auth view controller animated is true completion is nil this is an error right now because we haven't we haven't said that view controller conforms to that protocol so that's the next step here but let's double check what that protocol name is fui off delegate right all right at the bottom of the file we're gonna create an extension for the view controller and we're gonna implement the protocol here just so it's a little cleaner it's not as messy fui awesome delegate and there's one delegate method in particular that's very important to implement and that's did signin with you can see that it's got an error parameter it's also got an auth data result parameter first thing you want to check there was an error is checking against error you want this err parameter to be nil because that means there was no error so you want a guard error not equal to nil guard you know you want to guard the error is nil otherwise if it's not nil then log the error and return that's like a double negative statement so it's a little confusing because you want because if the error is nil then that means there's no error okay so you want to guard that it is know otherwise yeah it's a little confusing but an easier way to write it if that's hard to understand is just if error is not equal to nil right then log error and return like these two statements are equal it's just that this one you know is like a double negative so it's a little harder to understand you know it's up to you okay so at this point if there's no error then I want to show you how you can actually get the user that's signed in or was created and access their UID because potentially you may need to check you know if they've got a profile set up or whatever but having that UID allows you to check on the database side for anything you need to check for to decide where to send the user next you know whether you're going to send them to a home screen or whether you're going to send like a setup wizard or something to set up their profile so if you want to get their UID you can get it from the off the data result it's got a user property and this is where the firebase user would be stored and then that user object has a UID property so that's how you can get that I'm just going to comment this out because we don't need it in this demo what we do want to do however is send the user to that welcome screen after they've successfully signed in or created an account so this that would be basically perform segue with identifier go home and the sender would be self now let's try this out shall we let's press command or and run it and let's take a look alright so we've got our login screen here we're gonna click the login button and we're gonna get the firebase off UI there we go this stuff we didn't even build right this stuff is we get for free from firebase so go ahead enter in an email I'm gonna call it test that test comm click Next it's gonna go check the user store to see if this is a new account or if it's an existing account you can see here it detected there was no account under that email so it says create account and put in a name in a password test test now I don't use this password anywhere so don't try to hacked me okay so now we've created an account and we've come into the home screen isn't that cool let's stop the project let's run it again let's take a look at logging in this time instead of creating an account so click login I'm gonna enter in the same email address click Next and you can see that this time firebase detected that it is assignment and not a new account so it doesn't ask me for creating an account sign in boom there we go so there's one more thing I want to show you and that is the user in the user store that we created so I'm going to press this reload button and you see here is the account I created and here is the user UID right so this is the UID that you're going to use to tie to data that I would create in the database if I were to like post a comment or you know upload a photo or something like that and you want to associate those pieces of data with the user that generated them and you would log it based on the UID so that was a quick tutorial on how to implement email and password authentication with firebase pretty easy to set up right in the future we might go through different ways of signing in such as using your Facebook account or your Twitter account so if you want to see those and you like this video please make sure to subscribe to my channel just click the subscribe button below also if you want to see more tutorials like this one make sure you visit code with Chris comp and sign up for the newsletter where I share these tutorials with the newsletter before they're actually published anywhere now I want to turn it over to you in the app idea that you have do you have any sort of user login or account creation if so what sorts of signin methods are you going to implement or you want to implement let me know by leaving a quick comment below all right so thanks for watching and I'll see you guys next time hey did you join my free Facebook community yet that's where I hang out along with a ton of other people learning iOS just like yourself I also post early access to all my videos inside that group before I put them on YouTube you can also get help with any questions you're having visit the link below click on the join group button and I'll approve your request right away alright so I'll see you in there talk soon
