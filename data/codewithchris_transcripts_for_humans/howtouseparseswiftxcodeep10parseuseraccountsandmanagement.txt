With timestamps:

00:01 - hey coders how's it going it's Chris
00:04 - here I hope you guys are having a great
00:05 - day today we're going to learn about
00:07 - users you've learned about PF Objects PF
00:11 - queries PF files and now you guess that
00:14 - it's PF user so if you need any sort of
00:18 - account management in your application
00:20 - parse can handle that today we're going
00:22 - to go through some of the documentation
00:24 - first of all and then tomorrow we're
00:27 - going to implement some of what we've
00:28 - learned today I decided to split it up
00:30 - into two lessons because there's quite a
00:32 - bit to cover and quite a bit to
00:33 - understand and I think it would be
00:35 - clearer that way so I hope you stick
00:37 - around for part 1 and part 2 and learn
00:39 - about how account management works in
00:41 - parse so let's take a look at the PF
00:43 - user and what it comprises of so right
00:45 - here it says that the PF user class has
00:48 - a user name property a password property
00:50 - and email the user name is required and
00:53 - the password is required on signup
00:55 - furthermore the email address is
00:57 - optional let's take a look at what
00:59 - sign-up means and how that occurs so
01:02 - what we would probably do is provide
01:05 - some labels and text fields in our
01:07 - application for them to fill out a
01:09 - username a password and email and then
01:11 - when they hit sign up when they click
01:13 - that button we would fire a method with
01:15 - this sort of code here we would create a
01:17 - brand new PF user object we would set
01:20 - the username to whatever they filled in
01:21 - the password property to whatever they
01:23 - filled in an email to whatever they
01:25 - filled in and there are some other
01:27 - properties here well this is a custom
01:29 - field a PF user is just like a PF object
01:33 - where we can have our custom key value
01:35 - pairs so here you can see that there's a
01:37 - phone number and in the user interface
01:39 - we could definitely provide more text
01:42 - fields for them to fill out more stuff
01:43 - if we want it to and then assign that
01:45 - data to our custom columns of our PF
01:48 - user and then when we have that PF user
01:50 - all filled out we are gonna call signup
01:53 - in background with block on that PF user
01:55 - object and that's gonna allow us to
01:58 - determine if the signup or the
02:00 - registration was successful or not so
02:02 - you can see here in this code they check
02:04 - that there is no error and then if there
02:06 - is then maybe show some error message to
02:09 - the user on the front end and if not
02:12 - then they're successfully signed up
02:14 - now on the flip side if they've already
02:15 - signed up how do we let them log into
02:18 - the application
02:18 - well in login and signup forms there's
02:21 - usually a toggle between if you're
02:23 - registering for a new account or you're
02:25 - logging in and if they choose to log in
02:28 - instead all we would do is call this
02:30 - class method login with username in
02:33 - background so PF user login with
02:35 - username and background and we pass in
02:37 - the name that they filled in or the
02:38 - username and their password and again
02:40 - inside this block of code we can
02:42 - determine if a PF user is passed back
02:45 - you can see this is an optional
02:47 - parameter so if this is nil that means
02:49 - that the logon failed then we can read
02:51 - the error message to see if it was maybe
02:53 - the wrong password or username doesn't
02:55 - exist or something like that and if the
02:58 - user is returned if we do get a PF user
03:01 - object returned then that means they've
03:03 - successfully logged in now the third
03:05 - thing is we don't want them to sign up
03:08 - or login every single time they open the
03:10 - application right so how do we check
03:13 - that they're already logged in or
03:14 - they've already signed up so if we
03:16 - scroll down a little bit we're gonna
03:18 - skip this section on verifying emails
03:19 - for now we'll get back to that let's
03:21 - look at this section called current user
03:23 - so current user is another class method
03:26 - that returns the PF user object if it's
03:29 - cached so let's take a look at this PF
03:32 - user dot current user if there's nothing
03:35 - in there and it's nil then show the sign
03:37 - up or login screen but if you get a PF
03:39 - user object then you can know that the
03:41 - user has logged in already or his
03:43 - session hasn't expired so when it does
03:46 - this
03:46 - PF user dot current user return an
03:48 - object well whenever they sign up or
03:52 - they login that user will get cached on
03:54 - the local device and PF user dot current
03:58 - user will return them so the next time
04:00 - you open the app you'll be able to
04:02 - retrieve that PF user object using this
04:04 - current user method and you can tell
04:06 - that they've already logged in or they
04:08 - are currently logged in and if you want
04:10 - to clear the current user and show that
04:12 - signup login screen again you can call
04:15 - PF user dot logout and that's going to
04:17 - log out the current user and at that
04:19 - point after you call logout if you check
04:21 - PF user current user it's going to be
04:23 - nil a fourth thing that you can do is
04:26 - you can have something called a No
04:27 - users so for example you don't want to
04:30 - force the user to have to create an
04:32 - account or login first of all you can
04:34 - allow them to use the application
04:35 - anonymously and at the point where maybe
04:39 - they need to save some data and you need
04:40 - to associate that data with the user
04:42 - then you can prompt them to create an
04:45 - account so anonymous users is a setting
04:47 - which you enable for your parse instance
04:50 - or your parse application and if you do
04:52 - that then this current user method will
04:55 - never return nil when the user opens the
04:57 - app for the first time this is going to
04:59 - be prefilled with a user but that user
05:02 - won't have a username or a password so
05:04 - it's anonymous and as they're going
05:06 - through the app you can still associate
05:08 - things with that user but when you call
05:10 - log out on that anonymous user all of
05:12 - the data for that anonymous user gets
05:15 - erased now you can convert an anonymous
05:17 - user to a real user by setting the
05:20 - username and password and then calling
05:23 - signup on it so that's a way for you to
05:25 - let users use your app without creating
05:27 - an account first because often times you
05:29 - want them to use the app get the value
05:32 - out of it and see that it's worth going
05:34 - through the hassle of creating account
05:35 - for and then at that point you can
05:37 - prompt them to add a username and
05:39 - password and sign up so let me show you
05:41 - that toggle right here if I go to the
05:43 - parse dashboard and I click my
05:46 - application and go into app settings
05:48 - under where is it here under users under
05:55 - user authentication you can see here
05:58 - allow anonymous users you can toggle it
06:01 - between no and yes another thing I want
06:03 - to point out as a feature of PF users is
06:06 - verifying emails so if you want to
06:08 - enable email verification in the account
06:11 - creation that means that when they
06:13 - create an account and parse will
06:15 - automatically send an email to the email
06:17 - address that they specified and it's
06:19 - gonna contain a link that they need to
06:21 - click in order to have their account
06:24 - approved or verified and then they can
06:27 - use it so if you read here what happens
06:30 - when you enable email verification is
06:32 - that the PF user object or the PF user
06:34 - class rather is going to have an email
06:37 - verified column and when the user gets
06:40 - created it's going to be
06:41 - set to false right away if they click
06:43 - that link in that email then that is
06:45 - gonna be set to true for them and if
06:47 - that field is completely missing for
06:49 - that user that means you probably turned
06:51 - on email verification after that user
06:54 - had been created the nice thing is that
06:56 - with email verification and this account
06:58 - management people are going to forget
07:00 - their passwords and parse handles that
07:03 - really nicely for you so if we go down
07:05 - to this section resetting passwords all
07:07 - you need to do is provide some user
07:09 - interface elements for them to click
07:11 - forgot password and have them fill in
07:14 - their email address click a button and
07:15 - then you're gonna fire off this method
07:17 - called PF user it's a class method
07:20 - request password reset for email and
07:22 - background and you're gonna pass in the
07:24 - email that they filled in what parse is
07:26 - going to do is send them an email with a
07:29 - password reset link and when they click
07:31 - that they go to a page that parse
07:33 - creates where they can type in a new
07:35 - password and when they do type in that
07:37 - new password they verify it they save it
07:39 - it's going to automatically get saved
07:41 - back to your parse back-end for that
07:43 - user so that's nice because you don't
07:45 - have to create those pages yourself so
07:47 - those are kind of the cool things that
07:49 - you can do with user account management
07:51 - with parse and in the following lessons
07:53 - we're going to actually implement some
07:55 - of these things in our parse demo lab so
07:58 - thanks for watching I hope you enjoyed
07:59 - it and please give it a thumbs up
08:00 - subscribe if you haven't already and
08:02 - please share it if you think anyone can
08:04 - use it
08:04 - thanks a lot and I'll see you guys
08:06 - tomorrow bye

Cleaned transcript:

hey coders how's it going it's Chris here I hope you guys are having a great day today we're going to learn about users you've learned about PF Objects PF queries PF files and now you guess that it's PF user so if you need any sort of account management in your application parse can handle that today we're going to go through some of the documentation first of all and then tomorrow we're going to implement some of what we've learned today I decided to split it up into two lessons because there's quite a bit to cover and quite a bit to understand and I think it would be clearer that way so I hope you stick around for part 1 and part 2 and learn about how account management works in parse so let's take a look at the PF user and what it comprises of so right here it says that the PF user class has a user name property a password property and email the user name is required and the password is required on signup furthermore the email address is optional let's take a look at what signup means and how that occurs so what we would probably do is provide some labels and text fields in our application for them to fill out a username a password and email and then when they hit sign up when they click that button we would fire a method with this sort of code here we would create a brand new PF user object we would set the username to whatever they filled in the password property to whatever they filled in an email to whatever they filled in and there are some other properties here well this is a custom field a PF user is just like a PF object where we can have our custom key value pairs so here you can see that there's a phone number and in the user interface we could definitely provide more text fields for them to fill out more stuff if we want it to and then assign that data to our custom columns of our PF user and then when we have that PF user all filled out we are gonna call signup in background with block on that PF user object and that's gonna allow us to determine if the signup or the registration was successful or not so you can see here in this code they check that there is no error and then if there is then maybe show some error message to the user on the front end and if not then they're successfully signed up now on the flip side if they've already signed up how do we let them log into the application well in login and signup forms there's usually a toggle between if you're registering for a new account or you're logging in and if they choose to log in instead all we would do is call this class method login with username in background so PF user login with username and background and we pass in the name that they filled in or the username and their password and again inside this block of code we can determine if a PF user is passed back you can see this is an optional parameter so if this is nil that means that the logon failed then we can read the error message to see if it was maybe the wrong password or username doesn't exist or something like that and if the user is returned if we do get a PF user object returned then that means they've successfully logged in now the third thing is we don't want them to sign up or login every single time they open the application right so how do we check that they're already logged in or they've already signed up so if we scroll down a little bit we're gonna skip this section on verifying emails for now we'll get back to that let's look at this section called current user so current user is another class method that returns the PF user object if it's cached so let's take a look at this PF user dot current user if there's nothing in there and it's nil then show the sign up or login screen but if you get a PF user object then you can know that the user has logged in already or his session hasn't expired so when it does this PF user dot current user return an object well whenever they sign up or they login that user will get cached on the local device and PF user dot current user will return them so the next time you open the app you'll be able to retrieve that PF user object using this current user method and you can tell that they've already logged in or they are currently logged in and if you want to clear the current user and show that signup login screen again you can call PF user dot logout and that's going to log out the current user and at that point after you call logout if you check PF user current user it's going to be nil a fourth thing that you can do is you can have something called a No users so for example you don't want to force the user to have to create an account or login first of all you can allow them to use the application anonymously and at the point where maybe they need to save some data and you need to associate that data with the user then you can prompt them to create an account so anonymous users is a setting which you enable for your parse instance or your parse application and if you do that then this current user method will never return nil when the user opens the app for the first time this is going to be prefilled with a user but that user won't have a username or a password so it's anonymous and as they're going through the app you can still associate things with that user but when you call log out on that anonymous user all of the data for that anonymous user gets erased now you can convert an anonymous user to a real user by setting the username and password and then calling signup on it so that's a way for you to let users use your app without creating an account first because often times you want them to use the app get the value out of it and see that it's worth going through the hassle of creating account for and then at that point you can prompt them to add a username and password and sign up so let me show you that toggle right here if I go to the parse dashboard and I click my application and go into app settings under where is it here under users under user authentication you can see here allow anonymous users you can toggle it between no and yes another thing I want to point out as a feature of PF users is verifying emails so if you want to enable email verification in the account creation that means that when they create an account and parse will automatically send an email to the email address that they specified and it's gonna contain a link that they need to click in order to have their account approved or verified and then they can use it so if you read here what happens when you enable email verification is that the PF user object or the PF user class rather is going to have an email verified column and when the user gets created it's going to be set to false right away if they click that link in that email then that is gonna be set to true for them and if that field is completely missing for that user that means you probably turned on email verification after that user had been created the nice thing is that with email verification and this account management people are going to forget their passwords and parse handles that really nicely for you so if we go down to this section resetting passwords all you need to do is provide some user interface elements for them to click forgot password and have them fill in their email address click a button and then you're gonna fire off this method called PF user it's a class method request password reset for email and background and you're gonna pass in the email that they filled in what parse is going to do is send them an email with a password reset link and when they click that they go to a page that parse creates where they can type in a new password and when they do type in that new password they verify it they save it it's going to automatically get saved back to your parse backend for that user so that's nice because you don't have to create those pages yourself so those are kind of the cool things that you can do with user account management with parse and in the following lessons we're going to actually implement some of these things in our parse demo lab so thanks for watching I hope you enjoyed it and please give it a thumbs up subscribe if you haven't already and please share it if you think anyone can use it thanks a lot and I'll see you guys tomorrow bye
