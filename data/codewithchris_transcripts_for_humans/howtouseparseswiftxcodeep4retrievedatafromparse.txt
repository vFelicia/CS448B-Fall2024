With timestamps:

00:02 - hey coders how's it going Chris here and
00:05 - in today's parse lesson we're going to
00:07 - look at retrieving objects in the
00:09 - previous lesson we saved a bunch of
00:11 - objects into our parse back end so let
00:14 - me show you what we did parse demo in
00:17 - the browser under the contact store we
00:20 - have two rows so today we're going to
00:22 - retrieve this data in our Xcode app so
00:25 - let's go ahead and open up our app and
00:28 - make sure that you open up the EXCI
00:30 - workspace file instead of the Xcode
00:33 - project and all that loads up this is a
00:37 - handy documentation to have like I
00:40 - mentioned in the last episode all you
00:42 - need to do is go to parse comm slash
00:44 - Docs and from there you're going to be
00:47 - able to choose guide under iOS and
00:49 - you're gonna come here where you can
00:51 - look at how to do saving retrieving and
00:53 - all the stuff we're talking about in
00:55 - these lessons so here we are we have our
00:57 - Xcode project open I'm gonna visit the
00:59 - view controller and this is the same
01:01 - project that we worked on yesterday I'm
01:03 - not going to create a new one and
01:04 - integrate the library all over again
01:07 - instead I'm going to just delete this
01:10 - stuff right here and I'm going to work
01:12 - on retrieving the data so retrieving
01:14 - data from parse revolves around the PF
01:18 - query class okay so let us create a
01:21 - brand new query let query equals PF
01:24 - query and here you can pass in a class
01:26 - name to initialize the query we're going
01:29 - to pass in contact because that is if we
01:32 - go back to the parse dashboard that's
01:34 - the class name that we save this data
01:36 - under so let's go back here and now I'm
01:38 - going to show you how to retrieve a
01:40 - object from parse if you know the object
01:43 - ID remember yesterday when we saved
01:45 - these two rows of data it auto-generated
01:47 - this object ID so let me just copy this
01:50 - one for Tommy and let's retrieve it
01:54 - based on that ID now chances are you
01:56 - won't know the ID
01:57 - unless you've kept track of it somewhere
01:59 - in your code but I'm going to show you
02:01 - how to retrieve all of the rows in that
02:03 - store in a little while so here we're
02:06 - gonna type query dot and we can call a
02:08 - method called get object in background
02:12 - with
02:12 - I D so we're going to choose this one
02:14 - right here which allows us to specify a
02:16 - block of code for what happens when the
02:19 - object is returned so here we pass in
02:21 - the object ID that's this one and for
02:24 - this block I'm going to double click it
02:25 - to open that block of code and remember
02:27 - when I said that and remember when I
02:29 - said that data and parse revolves around
02:31 - PF objects and we created PF objects to
02:34 - save the parse so when we retrieve that
02:37 - data back it comes back as a PF object
02:39 - as well and I'll show you how to access
02:41 - the columns of data from that PF object
02:44 - so here notice that it is an optional
02:46 - type so it could be nil if it can't find
02:49 - any object with this ID so I'm just
02:51 - gonna call it D let's say the object
02:54 - that's the parameter I'm using and let's
02:57 - call this the error and here in the code
02:59 - we're going to check first after it's
03:02 - retrieved the object was it successful
03:04 - so here we got a check if the object is
03:07 - not equal to nil and the error is equal
03:12 - to nil because we don't want there to be
03:15 - something in the error parameter if
03:17 - there is that means there was an error
03:18 - message and here we're checking that the
03:20 - object is not nil so meaning to say that
03:23 - there is an object returned then we can
03:26 - print the object else some error
03:33 - happened and then you can print the
03:36 - error here I'm going to say successfully
03:40 - retrieved object okay so what I'm going
03:44 - to do is just set a breakpoint here and
03:46 - I'm going to run the app and hopefully
03:48 - it goes and retrieves the contact object
03:51 - with this ID okay so it's thought that
03:56 - our breakpoint line which is great
03:58 - because that means that successfully
04:00 - retrieved an object it's not nil and
04:02 - there is no error so let's in the
04:05 - console here let's go pio object and see
04:08 - what we get so as you can see in the
04:10 - console window here we've got our PF
04:13 - object with all of the properties or the
04:15 - key value pairs that we saved it with
04:18 - the first name is Tommy last name is
04:19 - Smith email is that and
04:21 - in order to print out specific data
04:24 - let's say you've got your object
04:26 - returned and you want to access the
04:28 - first name well it's kind of like a
04:30 - dictionary you just pass in the key like
04:34 - that so we're gonna print the guy's
04:35 - first name however it doesn't know what
04:37 - type of data the value is so we can cast
04:40 - it as a string like that because we know
04:42 - that the first name is of a string type
04:44 - so let's run it again okay so we've got
04:47 - an error here remember that object is an
04:49 - optional type so we have to unwrap it
04:51 - first so let's add an exclamation mark
04:54 - there to unwrap the object and get the
04:57 - dictionary and then we pass in the key
04:59 - to retrieve the value but the value
05:01 - needs to be cast as a string like that
05:03 - so now we will be able to run it and you
05:06 - can see here in the console that it
05:08 - printed out the first name okay so now
05:10 - what if you weren't able to get the
05:12 - object ID but you want to retrieve all
05:15 - of the data so let me just comment this
05:17 - out and we'll perform another query so
05:20 - let query equals PF query class name
05:24 - contact and then we're going to say
05:27 - query dot find objects so before because
05:31 - we knew what the object ID was we used
05:34 - get object but here when we want to
05:36 - retrieve all of the rows we use to find
05:38 - objects so we're gonna use this one find
05:41 - objects in background with block because
05:43 - this one has a lets you specify a block
05:46 - of code to execute when the the fetch
05:49 - returns so let's open up the block of
05:52 - code and it has two parameters notice
05:54 - that this time it has it's still
05:57 - optional so it could be nil it could
05:58 - return no objects but this time it's an
06:01 - array of PF objects so you can see those
06:04 - square brackets there and we've got the
06:06 - error parameter again so let's give
06:08 - these parameters some names I'm gonna
06:11 - call this object and in the code we're
06:14 - going to say let's check if the error is
06:18 - there's nothing in there first so
06:21 - meaning that there was no error in the
06:25 - fetch
06:27 - and next we're going to check if there
06:30 - are objects this time let's use optional
06:33 - binding so if let returned objects
06:38 - equals objects and then here objects
06:43 - array isn't nil let's loop through the
06:49 - array to get each object so let's use a
06:53 - for loop here so for object in return to
06:57 - objects we're going to print out the
07:00 - first name
07:01 - so print object first name and we're
07:06 - gonna cast it as a string so we're gonna
07:09 - print out that first name there's a
07:11 - difference this time up here the actual
07:13 - object was an optional type so we needed
07:16 - to add this exclamation mark to unwrap
07:18 - that object because we have checked out
07:20 - it isn't nil here it's the actual array
07:24 - that we're checking it's the PF objects
07:26 - array and so we've determined that that
07:28 - isn't nil so inside that array we have
07:30 - all of the PF objects
07:32 - okay so let's give this a run so here in
07:37 - the console you can see that John was
07:39 - printed and Tommy was printed so that's
07:41 - great we've learned how to retrieve a
07:44 - specific object with the ID and we've
07:46 - learned to retrieve all of the objects
07:48 - just using a basic query like this now
07:51 - you can see how this might be a problem
07:53 - if you had a ton of contacts especially
07:56 - if let's say your app was used by
07:58 - multiple users and each user had their
08:01 - own set of contacts if you did a query
08:03 - like this it would literally just return
08:05 - all of the contacts in that store
08:07 - whether it belonged to this user or
08:09 - belonged to another user so this query
08:11 - this PF query actually has a lot more
08:13 - features you can do to limit and
08:16 - constrain the query that you're
08:17 - performing so you can say stuff like
08:19 - return only the contacts with first name
08:22 - starting with T or you know add some
08:24 - more parameters to the query so you're
08:26 - making a more specific query and you can
08:28 - do sorting and you can do limit you know
08:30 - the first 10 results and stuff like that
08:32 - so the PF query is quite powerful and
08:34 - we're gonna learn in a couple lessons
08:36 - later how to form more complicated
08:39 - queries but in today's lesson
08:41 - the focus was just to get the data out
08:42 - of the parse back-end show you guys how
08:44 - that works and then how to access the
08:46 - data in the PF object that is returned
08:48 - so I hope you guys learned something new
08:50 - if you enjoyed it please give it a like
08:51 - and subscribe if you haven't please
08:53 - share it with your friends and
08:54 - colleagues that helps me out a ton so
08:56 - thank you so much and I'll see you guys
08:58 - tomorrow
08:58 - have a great day bye

Cleaned transcript:

hey coders how's it going Chris here and in today's parse lesson we're going to look at retrieving objects in the previous lesson we saved a bunch of objects into our parse back end so let me show you what we did parse demo in the browser under the contact store we have two rows so today we're going to retrieve this data in our Xcode app so let's go ahead and open up our app and make sure that you open up the EXCI workspace file instead of the Xcode project and all that loads up this is a handy documentation to have like I mentioned in the last episode all you need to do is go to parse comm slash Docs and from there you're going to be able to choose guide under iOS and you're gonna come here where you can look at how to do saving retrieving and all the stuff we're talking about in these lessons so here we are we have our Xcode project open I'm gonna visit the view controller and this is the same project that we worked on yesterday I'm not going to create a new one and integrate the library all over again instead I'm going to just delete this stuff right here and I'm going to work on retrieving the data so retrieving data from parse revolves around the PF query class okay so let us create a brand new query let query equals PF query and here you can pass in a class name to initialize the query we're going to pass in contact because that is if we go back to the parse dashboard that's the class name that we save this data under so let's go back here and now I'm going to show you how to retrieve a object from parse if you know the object ID remember yesterday when we saved these two rows of data it autogenerated this object ID so let me just copy this one for Tommy and let's retrieve it based on that ID now chances are you won't know the ID unless you've kept track of it somewhere in your code but I'm going to show you how to retrieve all of the rows in that store in a little while so here we're gonna type query dot and we can call a method called get object in background with I D so we're going to choose this one right here which allows us to specify a block of code for what happens when the object is returned so here we pass in the object ID that's this one and for this block I'm going to double click it to open that block of code and remember when I said that and remember when I said that data and parse revolves around PF objects and we created PF objects to save the parse so when we retrieve that data back it comes back as a PF object as well and I'll show you how to access the columns of data from that PF object so here notice that it is an optional type so it could be nil if it can't find any object with this ID so I'm just gonna call it D let's say the object that's the parameter I'm using and let's call this the error and here in the code we're going to check first after it's retrieved the object was it successful so here we got a check if the object is not equal to nil and the error is equal to nil because we don't want there to be something in the error parameter if there is that means there was an error message and here we're checking that the object is not nil so meaning to say that there is an object returned then we can print the object else some error happened and then you can print the error here I'm going to say successfully retrieved object okay so what I'm going to do is just set a breakpoint here and I'm going to run the app and hopefully it goes and retrieves the contact object with this ID okay so it's thought that our breakpoint line which is great because that means that successfully retrieved an object it's not nil and there is no error so let's in the console here let's go pio object and see what we get so as you can see in the console window here we've got our PF object with all of the properties or the key value pairs that we saved it with the first name is Tommy last name is Smith email is that and in order to print out specific data let's say you've got your object returned and you want to access the first name well it's kind of like a dictionary you just pass in the key like that so we're gonna print the guy's first name however it doesn't know what type of data the value is so we can cast it as a string like that because we know that the first name is of a string type so let's run it again okay so we've got an error here remember that object is an optional type so we have to unwrap it first so let's add an exclamation mark there to unwrap the object and get the dictionary and then we pass in the key to retrieve the value but the value needs to be cast as a string like that so now we will be able to run it and you can see here in the console that it printed out the first name okay so now what if you weren't able to get the object ID but you want to retrieve all of the data so let me just comment this out and we'll perform another query so let query equals PF query class name contact and then we're going to say query dot find objects so before because we knew what the object ID was we used get object but here when we want to retrieve all of the rows we use to find objects so we're gonna use this one find objects in background with block because this one has a lets you specify a block of code to execute when the the fetch returns so let's open up the block of code and it has two parameters notice that this time it has it's still optional so it could be nil it could return no objects but this time it's an array of PF objects so you can see those square brackets there and we've got the error parameter again so let's give these parameters some names I'm gonna call this object and in the code we're going to say let's check if the error is there's nothing in there first so meaning that there was no error in the fetch and next we're going to check if there are objects this time let's use optional binding so if let returned objects equals objects and then here objects array isn't nil let's loop through the array to get each object so let's use a for loop here so for object in return to objects we're going to print out the first name so print object first name and we're gonna cast it as a string so we're gonna print out that first name there's a difference this time up here the actual object was an optional type so we needed to add this exclamation mark to unwrap that object because we have checked out it isn't nil here it's the actual array that we're checking it's the PF objects array and so we've determined that that isn't nil so inside that array we have all of the PF objects okay so let's give this a run so here in the console you can see that John was printed and Tommy was printed so that's great we've learned how to retrieve a specific object with the ID and we've learned to retrieve all of the objects just using a basic query like this now you can see how this might be a problem if you had a ton of contacts especially if let's say your app was used by multiple users and each user had their own set of contacts if you did a query like this it would literally just return all of the contacts in that store whether it belonged to this user or belonged to another user so this query this PF query actually has a lot more features you can do to limit and constrain the query that you're performing so you can say stuff like return only the contacts with first name starting with T or you know add some more parameters to the query so you're making a more specific query and you can do sorting and you can do limit you know the first 10 results and stuff like that so the PF query is quite powerful and we're gonna learn in a couple lessons later how to form more complicated queries but in today's lesson the focus was just to get the data out of the parse backend show you guys how that works and then how to access the data in the PF object that is returned so I hope you guys learned something new if you enjoyed it please give it a like and subscribe if you haven't please share it with your friends and colleagues that helps me out a ton so thank you so much and I'll see you guys tomorrow have a great day bye
