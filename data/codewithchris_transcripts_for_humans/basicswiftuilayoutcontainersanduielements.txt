With timestamps:

00:00 - hello and welcome in this lesson I'm going to show 
you how to use a few more user interface controls  
00:04 - and layout containers so that we can actually 
build a user interface all right let's dive right  
00:09 - in hi there my name is Chris and if this is your 
first time to the channel welcome to code with  
00:19 - Chris where we help beginners build apps even if 
they've never written a single line of code now  
00:24 - before we start I have a quick question for you 
prior to Swift UI did you like building your UI  
00:28 - using storyboards or programmatically let me know 
by leaving a quick comment below and on your way  
00:33 - down there if you wouldn't mind I would really 
appreciate it if you gave this video a quick like  
00:37 - it really helps me out thank you so much alright 
with that said let's do this so here I've got a  
00:43 - basic Swift UI project let's first go through 
the image element and this is what you use to  
00:49 - display image assets in your project let's go 
ahead and add some to our asset library so go  
00:55 - ahead and click that if you have your own images 
you can go ahead and add that if you don't check  
01:00 - in this description below to grab these images 
which I have right here I'm gonna go ahead and  
01:07 - click drag them all like that so it's just an 
apple a donut and a lemon and take note of the  
01:13 - asset names all lowercase both donut and lemon 
because we're going to need to refer to these  
01:19 - asset names and we're gonna change this text label 
element actually we're just going to erase this  
01:25 - right now and we're gonna add an image element and 
there are a couple of different initializers you  
01:33 - can use the one we're going to do here is called 
name and you just pass in a string indicating the  
01:39 - name of the image asset that you want so we can do 
apple let's go ahead and hit resume there so that  
01:47 - is how easy it is to display an image asset on the 
screen let's go ahead and change it and there you  
01:55 - get a donut now let's take a look at the button 
element because you do want to add some user  
01:59 - interaction to your app let's go ahead and delete 
that and let's create a button now this button  
02:07 - initializer has a couple of parameters which 
you have to add too actually so one is action  
02:12 - this block of code that you're gonna add in here 
will indicate what the button does when it gets  
02:17 - tapped in the label right here this block of code 
is going to describe what the button looks like so  
02:25 - you can put a text label in there to represent the 
button you can put an image or anything you'd like  
02:31 - there so let's go ahead and open up the action 
and for this we're not going to go into how to  
02:37 - write code for the button action just yet because 
that's going to come a couple of lessons later but  
02:43 - for the label what we're gonna want to do and it 
actually just takes that it takes that parameter  
02:49 - out and opens up a trailing closure inside this 
trailing closure you can actually put different  
02:56 - elements that you'd like for example I want to 
put a text label that's one that simulator and  
03:04 - then you get a button that has this text label as 
the button or you can put an image like let's say  
03:11 - that donut that we had so let's go ahead and do 
that and you're gonna see a donut for the button  
03:18 - now it's all blue its tinted blue because that's 
actually the default I guess tint or foreground  
03:27 - color for buttons if you are going to use an 
image as a button then you actually have to set  
03:34 - a rendering mode modifier here and we're gonna 
get into modifiers in the next lesson but right  
03:41 - here is kind of a little preview of that so we're 
gonna select the original and modifiers just very  
03:48 - quickly is something that you can use to change 
the look behavior or the position the placement  
03:55 - of the element essentially it modifies the element 
I don't want to get too much into it because we're  
03:59 - going to cover it in the next lesson so then 
this is how you're going to use an image as a  
04:04 - clickable button now you'll notice that every 
time I'm showing you an element I am deleting  
04:10 - the existing one and adding a different one and 
the reason for that is because if you try to add  
04:17 - two elements on to your user interface like 
this you try and run it you're going to get  
04:25 - an error because this body right here it expects 
a single view back now the way you're going to  
04:32 - have multiple elements in your user interface is 
that you're gonna have to use layout containers to  
04:38 - group these different elements together and have 
a single root element that satisfies this return  
04:46 - type right here so let's go ahead and talk about 
our first layout container which is something  
04:51 - called AV stack and if you used stack views before 
in UI kit this is exactly what a V stack is and  
04:58 - V stands for vertical so let's declare a new V 
stack and actually I'm not gonna declare it this  
05:07 - way I am going to create a new V stack object 
so that I can show you what sort of parameters  
05:12 - you can pass in so for example you can pass in an 
alignment by default everything inside the V stack  
05:19 - will be aligned to the center so I'm just gonna go 
ahead and hit I'm just gonna do Center and spacing  
05:27 - allows you to indicate how much space you want to 
put between all of the elements inside of the V  
05:32 - stack so maybe by default put 10 20 and then the 
content here this closure if you open it up it's  
05:40 - gonna turn into a trailing closure and take it 
out of the parameter list in here you're gonna  
05:44 - put all the elements you want to stack together 
so I'm gonna go ahead and take my button and my  
05:50 - text label and put them in there and then we're 
just going to wait for that to update so here you  
05:57 - can see I now I can put multiple elements onto the 
view I've got the text element here and I've got  
06:04 - the button which is a really bad button because 
you can't even tell it's a button but I've got  
06:10 - two elements on the screen and they're stacked 
one on top of another and that's what the V stack  
06:14 - helps you with now if you don't need to specify 
in an alignment then you can and you don't need to  
06:20 - specify spacing you can go ahead and actually just 
get rid of those those are optional parameters and  
06:26 - you can just have the stack and then you can have 
the opening curly bracket and the closing curly  
06:32 - bracket and then all of your elements inside and 
you can actually stack more things if you'd like  
06:37 - so the other one which we we talked about was an 
image right and this is going to make it even more  
06:46 - confusing because now you can't tell which one's 
a button and which one's just an image but this  
06:55 - is just for example purposes now another one we 
have another layout container that we have is  
07:00 - called the H stack and you guessed it H stands 
for horizontal so now you can see automatically  
07:06 - everything is side-by-side and again it has 
the same parameter list you can line things by  
07:13 - defaults to the center but you can align it to 
the top or the bottom and you can also specify  
07:18 - spacing now one thing I do want to point out is 
that even if we specify a parameter let's say top  
07:28 - and let's say the spacing is 20 and the content 
parameter we already have which is right here even  
07:37 - if I did that you can see that the text label now 
gets aligned to the top but if you were expecting  
07:44 - everything to get pushed up to the very top you 
would be mistaken because the height of the stack  
07:51 - view or even the general size of that I just said 
stack you'd and I the H stack the size of that it  
07:59 - is only as big as it needs to be to accommodate 
the elements inside of it it's not going to take  
08:05 - up all of the space on the screen on its own if 
you wanted to do that you can use another element  
08:11 - called a spacer and this element is simply to 
take up as much space as it can now if I wanted  
08:19 - to push my each stack elements here all the way 
to the top I don't add a spacer inside my H stack  
08:27 - because remember inside an H stack everything is 
side by side so my spacer would just simply push  
08:33 - everything off to the left there if I wanted to 
push everything to the top I would actually have  
08:39 - to put a spacer underneath my age stack to take up 
all of that space so the way I'm going to do that  
08:46 - is I'm gonna add the spacer element first and it 
simply looks like that but I'm gonna get an error  
08:53 - now because again now I have to root views right 
I have an H stack and I have a spacer and this is  
09:00 - expecting a single view well the easy way to fix 
this is to wrap everything in a V stack like that  
09:09 - alright so opening bracket there I should I'll do 
it this way so it's a little bit easier to follow  
09:15 - and I'll cut all of that and put it inside 
my V stack see then everything gets pushed  
09:21 - up because here we have my H stack right as the 
first element in my V stack and then the spacer  
09:29 - literally just consumes all of the space that it 
can and so my V stack now I've got it highlighted  
09:35 - you can see it as this blue outline it takes 
up all of the space now similarly my H stack  
09:42 - is centered it only goes from here to here if I 
wanted to let's say push everything to the left  
09:50 - hand side I could add a spacer inside my H stack 
so let's put it to the right of the button and
09:57 - once it updates you're gonna see my spacer is here 
it takes up all of the space that's available and  
10:07 - pushes everything to the left now one thing I do 
want to mention about the spacer element is that  
10:14 - it shares the space with other spacer elements 
in the same layout container so let me give you  
10:21 - a quick example of this I'm just gonna get rid 
of all of this first I'm gonna put a text element  
10:27 - and I'm just gonna say hello alright so if I just 
update that you can see hello and let's say I wrap  
10:37 - it in the V stack and then I put another hello 
element and let's just have three so you can see  
10:46 - that my V stack is right there in the center 
of the screen its vertically and horizontally  
10:51 - centered and it's got three hello text elements 
inside there see if I add a spacer at the bottom  
10:59 - what do you think would happen right it would 
take up all of its space thereby pushing all  
11:05 - of those elements a talk what would happen if 
I add a spacer at the top here well the space  
11:13 - would actually be divided evenly between the two 
spacers because they're both competing to take up  
11:18 - all the space so they both get equal amounts now 
I can add another spacer here and now I have three  
11:25 - spacers and you can see that the spacers actually 
consume the same amount of space so this one here  
11:32 - this one here and this one here now if I add 
a fourth one they all consume equal spaces so  
11:41 - this can be a neat way to Center elements and 
make sure that that they're spread out evenly  
11:48 - and that things look really nice and proper now 
before I leave you with a quick exercise I want  
11:53 - to show you one more layout container and that is 
the Z stack or Zed stack as we say here in Canada  
11:59 - so I'm gonna change this v28 Zed and now it looks 
like all of our elements are gone well actually  
12:07 - what a Zed stack does is that it puts elements on 
top of each other so if I change the text you're  
12:14 - going to be able to see this reflected let's see 
this is the very back this is the middle and you  
12:22 - can see it starting to get jumbled and this is the 
front so you can see things are just laid out one  
12:29 - on top of the other so this is what Zed stack is 
for it's good for putting let's say a background  
12:37 - and then elements on top of a background right 
I could change this very back label to an image  
12:44 - and let's say this week is gonna be the lemon and 
then it that way it's I feel a little easier to  
12:51 - illustrate for you let's say I have the Apple in 
the middle and let's say I have the donut in the  
12:57 - front so you can actually see that the things are 
stacked on top of each other now oh I forgot to  
13:04 - change this to an image element there we go so the 
sad stack is really great like I said for putting  
13:11 - an image as a background and the having elements 
on top or some graphic elements inside of your  
13:16 - app might be comprised of several smaller image 
assets and you can use those ads back to stack  
13:22 - them together to create the overall look and feel 
that you're looking for all right now that you'll  
13:26 - know about these several layout containers and 
elements I'm gonna give you a quick exercise  
13:30 - for you to try to achieve all right so here's the 
exercise it doesn't matter what graphic images you  
13:37 - used but I want you to create a three by three 
grid with everything evenly spaced so you'll  
13:43 - notice that every single row there is equal space 
in between each row as well as from the bottom  
13:51 - of the screen and from the top of the screen 
and also for each row every single element has  
13:56 - equal space in between them here from the left 
edge between these elements right here and also  
14:02 - from the right edge I highly encourage you to try 
it out it's going to reinforce what you learned  
14:07 - in this lesson in the next lesson I'll show you 
how to use modifiers to well modify the behavior  
14:14 - appearance and position of your elements if you 
enjoyed this lesson and you don't want to miss  
14:19 - the next one make sure you're subscribed to the 
channel and turn on Bell notifications as well so  
14:24 - you can get notified when the next video comes 
out all right I'll see you in the next lesson

Cleaned transcript:

hello and welcome in this lesson I'm going to show you how to use a few more user interface controls and layout containers so that we can actually build a user interface all right let's dive right in hi there my name is Chris and if this is your first time to the channel welcome to code with Chris where we help beginners build apps even if they've never written a single line of code now before we start I have a quick question for you prior to Swift UI did you like building your UI using storyboards or programmatically let me know by leaving a quick comment below and on your way down there if you wouldn't mind I would really appreciate it if you gave this video a quick like it really helps me out thank you so much alright with that said let's do this so here I've got a basic Swift UI project let's first go through the image element and this is what you use to display image assets in your project let's go ahead and add some to our asset library so go ahead and click that if you have your own images you can go ahead and add that if you don't check in this description below to grab these images which I have right here I'm gonna go ahead and click drag them all like that so it's just an apple a donut and a lemon and take note of the asset names all lowercase both donut and lemon because we're going to need to refer to these asset names and we're gonna change this text label element actually we're just going to erase this right now and we're gonna add an image element and there are a couple of different initializers you can use the one we're going to do here is called name and you just pass in a string indicating the name of the image asset that you want so we can do apple let's go ahead and hit resume there so that is how easy it is to display an image asset on the screen let's go ahead and change it and there you get a donut now let's take a look at the button element because you do want to add some user interaction to your app let's go ahead and delete that and let's create a button now this button initializer has a couple of parameters which you have to add too actually so one is action this block of code that you're gonna add in here will indicate what the button does when it gets tapped in the label right here this block of code is going to describe what the button looks like so you can put a text label in there to represent the button you can put an image or anything you'd like there so let's go ahead and open up the action and for this we're not going to go into how to write code for the button action just yet because that's going to come a couple of lessons later but for the label what we're gonna want to do and it actually just takes that it takes that parameter out and opens up a trailing closure inside this trailing closure you can actually put different elements that you'd like for example I want to put a text label that's one that simulator and then you get a button that has this text label as the button or you can put an image like let's say that donut that we had so let's go ahead and do that and you're gonna see a donut for the button now it's all blue its tinted blue because that's actually the default I guess tint or foreground color for buttons if you are going to use an image as a button then you actually have to set a rendering mode modifier here and we're gonna get into modifiers in the next lesson but right here is kind of a little preview of that so we're gonna select the original and modifiers just very quickly is something that you can use to change the look behavior or the position the placement of the element essentially it modifies the element I don't want to get too much into it because we're going to cover it in the next lesson so then this is how you're going to use an image as a clickable button now you'll notice that every time I'm showing you an element I am deleting the existing one and adding a different one and the reason for that is because if you try to add two elements on to your user interface like this you try and run it you're going to get an error because this body right here it expects a single view back now the way you're going to have multiple elements in your user interface is that you're gonna have to use layout containers to group these different elements together and have a single root element that satisfies this return type right here so let's go ahead and talk about our first layout container which is something called AV stack and if you used stack views before in UI kit this is exactly what a V stack is and V stands for vertical so let's declare a new V stack and actually I'm not gonna declare it this way I am going to create a new V stack object so that I can show you what sort of parameters you can pass in so for example you can pass in an alignment by default everything inside the V stack will be aligned to the center so I'm just gonna go ahead and hit I'm just gonna do Center and spacing allows you to indicate how much space you want to put between all of the elements inside of the V stack so maybe by default put 10 20 and then the content here this closure if you open it up it's gonna turn into a trailing closure and take it out of the parameter list in here you're gonna put all the elements you want to stack together so I'm gonna go ahead and take my button and my text label and put them in there and then we're just going to wait for that to update so here you can see I now I can put multiple elements onto the view I've got the text element here and I've got the button which is a really bad button because you can't even tell it's a button but I've got two elements on the screen and they're stacked one on top of another and that's what the V stack helps you with now if you don't need to specify in an alignment then you can and you don't need to specify spacing you can go ahead and actually just get rid of those those are optional parameters and you can just have the stack and then you can have the opening curly bracket and the closing curly bracket and then all of your elements inside and you can actually stack more things if you'd like so the other one which we we talked about was an image right and this is going to make it even more confusing because now you can't tell which one's a button and which one's just an image but this is just for example purposes now another one we have another layout container that we have is called the H stack and you guessed it H stands for horizontal so now you can see automatically everything is sidebyside and again it has the same parameter list you can line things by defaults to the center but you can align it to the top or the bottom and you can also specify spacing now one thing I do want to point out is that even if we specify a parameter let's say top and let's say the spacing is 20 and the content parameter we already have which is right here even if I did that you can see that the text label now gets aligned to the top but if you were expecting everything to get pushed up to the very top you would be mistaken because the height of the stack view or even the general size of that I just said stack you'd and I the H stack the size of that it is only as big as it needs to be to accommodate the elements inside of it it's not going to take up all of the space on the screen on its own if you wanted to do that you can use another element called a spacer and this element is simply to take up as much space as it can now if I wanted to push my each stack elements here all the way to the top I don't add a spacer inside my H stack because remember inside an H stack everything is side by side so my spacer would just simply push everything off to the left there if I wanted to push everything to the top I would actually have to put a spacer underneath my age stack to take up all of that space so the way I'm going to do that is I'm gonna add the spacer element first and it simply looks like that but I'm gonna get an error now because again now I have to root views right I have an H stack and I have a spacer and this is expecting a single view well the easy way to fix this is to wrap everything in a V stack like that alright so opening bracket there I should I'll do it this way so it's a little bit easier to follow and I'll cut all of that and put it inside my V stack see then everything gets pushed up because here we have my H stack right as the first element in my V stack and then the spacer literally just consumes all of the space that it can and so my V stack now I've got it highlighted you can see it as this blue outline it takes up all of the space now similarly my H stack is centered it only goes from here to here if I wanted to let's say push everything to the left hand side I could add a spacer inside my H stack so let's put it to the right of the button and once it updates you're gonna see my spacer is here it takes up all of the space that's available and pushes everything to the left now one thing I do want to mention about the spacer element is that it shares the space with other spacer elements in the same layout container so let me give you a quick example of this I'm just gonna get rid of all of this first I'm gonna put a text element and I'm just gonna say hello alright so if I just update that you can see hello and let's say I wrap it in the V stack and then I put another hello element and let's just have three so you can see that my V stack is right there in the center of the screen its vertically and horizontally centered and it's got three hello text elements inside there see if I add a spacer at the bottom what do you think would happen right it would take up all of its space thereby pushing all of those elements a talk what would happen if I add a spacer at the top here well the space would actually be divided evenly between the two spacers because they're both competing to take up all the space so they both get equal amounts now I can add another spacer here and now I have three spacers and you can see that the spacers actually consume the same amount of space so this one here this one here and this one here now if I add a fourth one they all consume equal spaces so this can be a neat way to Center elements and make sure that that they're spread out evenly and that things look really nice and proper now before I leave you with a quick exercise I want to show you one more layout container and that is the Z stack or Zed stack as we say here in Canada so I'm gonna change this v28 Zed and now it looks like all of our elements are gone well actually what a Zed stack does is that it puts elements on top of each other so if I change the text you're going to be able to see this reflected let's see this is the very back this is the middle and you can see it starting to get jumbled and this is the front so you can see things are just laid out one on top of the other so this is what Zed stack is for it's good for putting let's say a background and then elements on top of a background right I could change this very back label to an image and let's say this week is gonna be the lemon and then it that way it's I feel a little easier to illustrate for you let's say I have the Apple in the middle and let's say I have the donut in the front so you can actually see that the things are stacked on top of each other now oh I forgot to change this to an image element there we go so the sad stack is really great like I said for putting an image as a background and the having elements on top or some graphic elements inside of your app might be comprised of several smaller image assets and you can use those ads back to stack them together to create the overall look and feel that you're looking for all right now that you'll know about these several layout containers and elements I'm gonna give you a quick exercise for you to try to achieve all right so here's the exercise it doesn't matter what graphic images you used but I want you to create a three by three grid with everything evenly spaced so you'll notice that every single row there is equal space in between each row as well as from the bottom of the screen and from the top of the screen and also for each row every single element has equal space in between them here from the left edge between these elements right here and also from the right edge I highly encourage you to try it out it's going to reinforce what you learned in this lesson in the next lesson I'll show you how to use modifiers to well modify the behavior appearance and position of your elements if you enjoyed this lesson and you don't want to miss the next one make sure you're subscribed to the channel and turn on Bell notifications as well so you can get notified when the next video comes out all right I'll see you in the next lesson
