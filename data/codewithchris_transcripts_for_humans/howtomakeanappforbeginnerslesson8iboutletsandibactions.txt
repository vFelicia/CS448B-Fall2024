With timestamps:

00:00 - hi welcome to lesson 8 you're almost
00:01 - there only three lessons to go in this
00:04 - video I'll show you how those Swift
00:06 - basics you've been learning about apply
00:08 - and relate to our Xcode project by the
00:10 - end of this video you'll learn how to
00:12 - write code in the view controller to
00:14 - manage and access the elements in the
00:16 - storyboard I'm also going to show you
00:19 - what to do when your app crashes which
00:20 - happens more often than you think all
00:22 - right let's do it right here we have the
00:25 - Xcode project that we started back in
00:27 - Lesson four well we're gonna continue
00:29 - working on it right now let's jump into
00:31 - viewcontroller.swift
00:32 - where I'm gonna point out a couple of
00:34 - things to you based on what we've
00:36 - covered in the previous couple of Swift
00:37 - lessons starting from line 9 we've got
00:40 - import UIKit now you definitely know
00:43 - what that is because you've seen it in
00:45 - the playground UIKit is a library of
00:47 - code that's provided by Apple in the
00:49 - import statement is basically saying to
00:51 - use it now on line 11 we've got class
00:53 - view controller that is a class your
00:57 - view controller is a class and you can
01:00 - see this is the starting curly bracket
01:03 - for it and this is the ending curly
01:05 - bracket so all of this stuff inside is
01:08 - part of the class there are some things
01:11 - that I'm gonna gloss over right now
01:12 - because you will learn about it in the
01:15 - future and I don't want to confuse you
01:17 - now and one of those things is this this
01:19 - : UI view controller part it's something
01:23 - called sub classing which allows you to
01:24 - build your class off of an pre-existing
01:27 - class rather than starting from scratch
01:29 - but we're not gonna talk about sub
01:32 - classing in this lesson just kind of
01:34 - keep in mind that that's what this part
01:36 - of the code does basically view
01:37 - controller as a class that builds off of
01:39 - the UI view controller class and down
01:42 - here you have some functions now there
01:44 - is an override keyword before the fu NC
01:48 - but ignore that for now it has to do
01:51 - with sub classing and so here's your
01:54 - function it's called viewdidload and
01:56 - then you've got an opening curly bracket
01:58 - and a closing one and then the code
02:00 - inside here is the code for your
02:02 - function super is another keyword that
02:05 - has to do with sub classing so we're
02:07 - gonna ignore that for now and same thing
02:08 - goes for this function did receive a
02:11 - memory warning
02:12 - okay so this is another function isn't
02:15 - this cool this was stuff that you were
02:17 - learning about in the past couple of
02:18 - Swift lessons and now we can relate it
02:20 - directly back to our Xcode project so
02:22 - your view controller is a class that
02:24 - means for it to do anything the view
02:26 - controller has to be turned into an
02:28 - object right so let's go into the main
02:31 - dot storyboard and I'll show you
02:32 - something else that will blow your mind
02:34 - look at all of these elements that we
02:36 - added to the view are those objects are
02:38 - those classes what are those things that
02:40 - we are adding and customizing to this
02:43 - view believe it or not we're actually
02:45 - creating objects when we drag these
02:47 - elements onto the view well you might
02:49 - ask objects come from classes right what
02:51 - sorts of classes do these elements come
02:54 - from well all of these elements in the
02:56 - object library down here in the lower
02:59 - right hand corner these are actually
03:01 - classes in UI kit stuff like this label
03:05 - this button you know text fields and
03:07 - stuff like that these are all classes
03:09 - and so now this name object library is a
03:13 - little more significant to you right
03:14 - that's right
03:16 - UI kit is actually a library of classes
03:19 - that apple provides and it contains
03:21 - useful classes such as buttons labels
03:24 - image views all the stuff that you've
03:26 - been using and a lot more for instance
03:28 - by dragging and dropping this UI image
03:31 - you here I'm actually creating an object
03:34 - of this class click it and check out the
03:37 - stuff in the inspector pane all of these
03:40 - things that I can configure they are
03:41 - properties of the UI image view class
03:44 - you see the interface builder here is
03:47 - simply a visual way to make it easier
03:49 - for us everything we're doing here in
03:51 - the storyboard we can actually do
03:53 - through code in fact we can completely
03:57 - omit using the storyboard and instead
03:59 - write code inside of the view controller
04:01 - here to create all of the objects set
04:05 - their properties and then place them
04:06 - into the view however that is definitely
04:08 - more of an intermediate-to-advanced
04:10 - thing that you'll eventually get to for
04:13 - beginners who are just starting out I
04:14 - highly recommend using the storyboard so
04:17 - these elements in the view here are
04:19 - objects how can I get access to them
04:22 - from the view controller that's where IB
04:25 - outlet properties
04:26 - to play let me show you how to expose
04:28 - these elements from the storyboard to
04:31 - the view controller as an iboutlet
04:33 - property now there are multiple ways of
04:35 - doing it but the easiest way is just to
04:38 - select the view controller here in the
04:40 - document outline to make sure that you
04:42 - have it highlighted and then go over
04:44 - here in the upper right hand corner and
04:46 - click on this little icon that looks
04:48 - like two intergenic circles this is
04:50 - what's known as the assistant editor and
04:52 - it basically kind of splits your screen
04:54 - into two so on the left hand side you
04:57 - can view your storyboard and on the
04:59 - right hand side you can view the code
05:01 - now I want you to go over here to this
05:04 - little breadcrumb navigation and make
05:06 - sure that where my mouse is hovering
05:09 - yours also stays automatic if it doesn't
05:12 - just go ahead and click it and then
05:13 - scroll down to automatic here you should
05:16 - see view control a lot swift if you've
05:18 - got it highlighted here because
05:20 - basically the automatic setting will
05:22 - show what's relevant on the right-hand
05:24 - side according to what you select on the
05:26 - left hand side so if you've got the view
05:28 - controller selected this automatic
05:30 - setting should be showing you view
05:32 - controller without Swift the reason is
05:34 - because this view controller here this
05:37 - note in the document outline is actually
05:40 - the visual representation or you could
05:43 - call it the object of this view
05:45 - controller class here now what I want
05:47 - you to do is on the right hand side in
05:49 - the view controller right underneath
05:52 - class like inside the class but above
05:56 - the viewdidload function just press
05:58 - ENTER a couple of times on your keyboard
05:59 - to create a little bit of space and make
06:02 - sure you don't do it here but you do it
06:04 - here right inside the class right after
06:07 - that starting curly bracket for the
06:09 - class so right here it creates some
06:11 - space and then on the left hand side it
06:13 - and in the document outline click on
06:16 - this first card this is the left card
06:19 - right here and you can see that being
06:21 - highlighted if I click this one you're
06:23 - gonna see the right card being
06:24 - highlighted so go ahead let's click the
06:26 - left one we'll start with that and now
06:28 - hold down control on your keyboard and
06:30 - while still holding that down click this
06:34 - image view in the document line and
06:36 - start moving your mouse and dragging it
06:38 - you're gonna see a blue line follow your
06:40 - mouse
06:40 - as long as you're holding out of that
06:42 - control button and you haven't let go of
06:43 - the mouse yet so drag it over here on
06:46 - the right hand side where we created
06:47 - that space and you should see that
06:49 - little note saying insert outlet or
06:52 - outlet collection and now you can let go
06:55 - of your mouse and you can let go of
06:56 - control and out pops this little menu
06:59 - here and you can see that the connection
07:01 - type is set to outlet and the object is
07:04 - view controller and we're going to name
07:07 - our IB outlet property now you can
07:10 - ignore the rest here well the type
07:12 - should be uiimageview you shouldn't need
07:14 - to change this if you selected the right
07:16 - element here you should automatically
07:18 - have this type as uiimageview okay so
07:21 - here I'm gonna call it the left image
07:25 - view like that and I'm going to click
07:27 - this connect button so there we have it
07:29 - it automatically generates this property
07:32 - for us now this property is special in
07:35 - that it has this special keyword here
07:37 - iboutlet and you can see that var
07:40 - keyword there and maybe I should just
07:43 - minimize that pane so we have a little
07:46 - more space and you can see this is the
07:48 - name that I gave the property and this
07:50 - is the data type right that the property
07:54 - is going to hold there are a couple of
07:55 - things that we're going to ignore right
07:57 - now I'll explain it down the road that
08:00 - is this week in this exclamation mark
08:02 - you don't have to worry about that for
08:04 - now but what you should know is that
08:06 - what we've just done is we've connected
08:09 - this element here this left card view it
08:13 - to this iboutlet property here so that
08:16 - this property will actually point to
08:18 - this uiimageview object and since we
08:21 - have a reference to that object we can
08:23 - use dot notation like you learned in the
08:25 - previous lesson to access all of the
08:28 - methods and properties of that
08:30 - uiimageview object right so if we wanted
08:32 - to change that image we could call
08:35 - functions on it we could you know set
08:37 - its properties and we can do that I'll
08:39 - show you that in a second but right now
08:41 - I just want to go over some common
08:43 - mistakes we want to double check that
08:46 - we've connected it right so what I want
08:48 - you to do is go back here on the left
08:51 - hand side the storyboard
08:53 - and then right click your left image
08:56 - view you can see that it even changed
08:57 - its name here you can either right-click
08:59 - it in the document outline here or
09:01 - right-click it in the storyboard either
09:04 - way it should pop up this little context
09:07 - menu for that element and under
09:09 - referencing outlets you should see the
09:12 - property name which is left image view
09:14 - followed by view controller if this is
09:17 - the object which contains that property
09:18 - this shows you that this element is
09:21 - connected as an l-let property to this
09:25 - class right here and it also gives you
09:27 - this little X button for you to break
09:29 - that connection
09:30 - if you don't see this that means that
09:33 - you might have connected the wrong
09:35 - element so let me show you how to fix
09:37 - that what you're going to do first is
09:39 - you need to find out which element you
09:41 - accidentally connected so what I would
09:44 - do is I would go right click this guy
09:46 - and then check you know right right
09:49 - click a couple of elements which you
09:50 - think you might have dragged it could be
09:52 - potentially this card stack view right
09:54 - because if you're clicking this you
09:55 - might have accidentally selected the
09:57 - stack view instead you know so sometimes
10:00 - it's just easier to connect it from the
10:03 - document outline rather than clicking it
10:04 - from here but anyways after you find out
10:07 - the one that you accidentally connected
10:09 - go ahead and click X to break the
10:12 - connection and then go back to the view
10:15 - controller here and then delete that
10:17 - ible property and now you can start from
10:20 - scratch again essentially so again let's
10:22 - do it one more time for practice on the
10:25 - left hand side here I have selected the
10:27 - left uiimageview hold down control on
10:30 - the keyboard click and drag over here I
10:34 - let go and then I can now name my outlet
10:38 - left image view and I'm going to click
10:43 - connect
10:43 - now another mistake that sometimes
10:46 - happens is that you made a typo while
10:49 - you named that outlet property so some
10:52 - people might just go ahead and correct
10:54 - it let's say they they forgot to
10:56 - capitalize something and they might just
10:59 - change it here I'm just gonna maybe I'm
11:01 - gonna add a letter like that let's
11:03 - pretend I am correcting a typo but if
11:05 - you do this
11:06 - things will break let's go back to the
11:09 - left-hand side and right-click that you
11:12 - are image view you can see here that the
11:14 - referencing outlet it's connected to
11:16 - left image view right but I've just
11:19 - changed that property name to left image
11:22 - views so when you run your app it's
11:25 - going to be looking for that property to
11:27 - assign the object to it's not gonna find
11:29 - that property and it's gonna break so if
11:32 - you made a typo don't just erase it or
11:35 - correct it here you will actually have
11:37 - to just go ahead and delete it and then
11:40 - go back here on the left-hand side right
11:42 - click click this X to break the
11:44 - connection first and then do it all over
11:47 - again
11:47 - so hold down ctrl click and drag it here
11:51 - left image view connect all right let's
11:55 - connect the other image view so I'm
11:58 - going to click on this one hold down
12:00 - ctrl click and drag it here make sure
12:03 - you don't drag it into this existing
12:06 - outlet you can see here it highlights
12:08 - the outlet in blue you don't want to do
12:10 - that otherwise you're gonna have
12:11 - connected two outlets to the same
12:13 - property and bad things can happen so
12:15 - just make some space if you need to and
12:18 - connect it down here I'm gonna call this
12:20 - the right image view just like that and
12:23 - you'll actually notice that this gray
12:27 - circle is filled in it's if you hover
12:29 - over it it tells you what it's connected
12:31 - to you see and when it's filled in that
12:34 - means it's connected let me just show
12:36 - you here I'm gonna break the connection
12:38 - in the storyboard here and now you can
12:41 - actually see that it has turned hollow
12:44 - and that means that this property isn't
12:47 - connected to anything now I find that
12:50 - this is not the most reliable way to
12:52 - tell because sometimes when you just
12:54 - open your Xcode project it doesn't
12:56 - really update these little circles so
12:58 - there are times when I know they are
13:00 - connected but they still show Hollow so
13:02 - I wouldn't put too much emphasis on
13:03 - using this but anyways here's another
13:06 - way to connect your outlet if you
13:09 - already have the property here you can
13:12 - right-click here new referencing outlet
13:14 - you can this little circle here you can
13:16 - actually click this plus icon
13:18 - you can let's drag it to the
13:20 - viewcontroller node here let go and you
13:23 - can actually select the property make
13:24 - sure you select the correct one though
13:26 - right image view and now you can see
13:29 - that this is filled in and when you
13:31 - hover over it it should highlight the
13:33 - right image view but you know I wouldn't
13:35 - attempt to do it the way I just showed
13:37 - you if you're not comfortable with
13:39 - things yet just connect it using the
13:41 - ctrl click and drag method that's the
13:44 - easiest way for beginners to learn I
13:46 - feel so now and go back down here under
13:48 - the stack view we are also going to
13:51 - connect the labels so there are two
13:52 - labels that we want to connect this zero
13:54 - under player so hold down ctrl click and
13:58 - drag down here I'm going to call this
14:00 - the left score label and for this one
14:05 - click drag hold down ctrl as well I
14:09 - forgot to mention write score now before
14:13 - I connect this one I'm going to
14:14 - purposely make a typo let's call it
14:17 - write score labels and that and when I
14:21 - connect it I've noticed oh man I made a
14:23 - typo so I am going to actually just
14:25 - correct it like this you can actually
14:27 - see when I did that this became
14:29 - disconnected and if I right click my
14:34 - label here it's still connected to write
14:36 - score labels but I don't have that
14:38 - property and I'm going to run it for you
14:40 - right now and show you what happens so
14:46 - it's gonna crash and because we have
14:48 - assistant editor open both the panes
14:50 - changed to here but it's gonna highlight
14:52 - this red line here which doesn't really
14:55 - tell us much what you want to do
14:57 - actually is go down to the lower right
14:59 - hand corner into this console area where
15:02 - there's a lot of gibberish but this is
15:04 - essentially where you can find the
15:06 - detailed error message the last line
15:09 - tells you terminating with uncaught
15:11 - exception of type NS exception that's
15:13 - basically just telling you that the app
15:16 - crashed what you should do is you should
15:19 - scroll all the way up
15:24 - all the way up to the top usually and
15:26 - you're going to find actually a more
15:28 - detailed error message more plain
15:30 - English that you can read to stuff here
15:32 - bla bla bla bla bla and then down here
15:34 - this class is not key value coding
15:37 - compliant for the key rights core labels
15:40 - now this lion might not make any sense
15:44 - to you this class is not key value
15:46 - coding compliant for the key but however
15:49 - over time when you see the same message
15:51 - over and over again you kind of learn to
15:53 - understand what the cause of that is and
15:56 - in this case it's because it's trying to
15:59 - look for write score labels but however
16:02 - we don't have that property you know
16:04 - this is a heck of a lot more easy to
16:07 - understand then you know reading any of
16:10 - this and this is just a generic message
16:13 - which doesn't tell you what's wrong
16:15 - so in this console area you scroll all
16:17 - the way up and then you read what the
16:19 - error message is so let's go back to the
16:21 - storyboard and let's fix this error and
16:24 - resolve this crash so we're gonna click
16:26 - on the storyboard the left hand side
16:28 - changes of our assistant editor and on
16:31 - the right hand side you should see the
16:32 - view controller if you don't click on
16:34 - the view controller up here make sure
16:36 - that this side is set to automatic like
16:38 - that and we're gonna fix this right
16:41 - score label so this one this is
16:43 - connected to an outlet that doesn't
16:46 - exist anymore so go ahead and click X
16:48 - and then we are going to take this new
16:50 - referencing outlet and connect it to a
16:53 - pre-existing one and that's right score
16:56 - label and so now this guy's filled in if
16:59 - I hover over this circle you'll see that
17:01 - this right score label is highlighted so
17:03 - we know which one it's connected to okay
17:06 - so now we've got four iboutlet
17:08 - properties and they are connected to
17:10 - these objects that are on our storyboard
17:14 - and since these properties are outside
17:19 - of any functions and they're inside our
17:20 - class we can actually access them from
17:22 - inside any function so let's just do a
17:25 - little test here and viewdidload for
17:27 - example I can say left image view right
17:32 - that's our property name up here dot and
17:35 - then these are all of the
17:37 - and functions that are available for a
17:40 - UI image view object and I can access
17:45 - this property called image right and
17:49 - then I can go ahead and what I can set
17:51 - that and change the image we're not
17:53 - going to do that right now we're gonna
17:55 - do this in the next lesson but for now I
17:58 - just wanted to show you that we can
18:00 - access this image view here and we can
18:03 - access the image property using dot
18:05 - notation like that so let's go ahead and
18:07 - delete that so you know the image
18:09 - property that I just showed you
18:10 - let's click this button to go back to
18:12 - the single view editor and let's click
18:15 - this button to get our inspector pane
18:17 - back if I click this image view see
18:20 - right here in the inspector pane this
18:22 - image drop down here well that is the
18:25 - image property that I just accessed in
18:27 - the view controller right so if I set
18:29 - that with code that's the equivalent of
18:31 - setting it here to one of these image
18:33 - assets see I choose card 14 use whatever
18:37 - and simply by connecting this element as
18:41 - an iboutlet property to the view
18:43 - controller the view controller now can
18:45 - write code to manage this element in the
18:49 - Cir board okay so now the next order of
18:51 - business is how do we run some specific
18:55 - block of code or a function when the
18:57 - deal button is tapped here because
18:59 - essentially when this button is tapped
19:01 - we want to run code that will change
19:03 - these images right well we can use
19:04 - something called an IB action function
19:07 - so very similar to IB outlet property
19:10 - but this one is a function so let me
19:12 - show you how to connect that we are
19:14 - going to go back to a system editor
19:16 - so let's hit view controller on the
19:19 - right hand side it should be set to
19:20 - automatic view controller and we were
19:23 - connecting the outlets up here because
19:25 - that's where properties go inside the
19:26 - class but now for a function we only
19:29 - have to put it inside of the class right
19:32 - so this last curly bracket this one is
19:35 - the ending curly bracket for the class
19:38 - so we want to put our function inside of
19:41 - the class right so you have to make sure
19:43 - that you create some space before this
19:45 - last curly bracket
19:47 - all right this curly bracket is for this
19:50 - function
19:51 - all right so right here would be a good
19:53 - place to put the function to run when
19:56 - the deal button is tapped we don't have
19:58 - to write the function all we have to do
20:00 - is go over here on the left hand side
20:02 - and click on the button element from the
20:06 - document outline hold down ctrl on your
20:08 - keyboard click and drag all the way here
20:11 - and then let go of your mouse button and
20:12 - out pops this little guy but before you
20:14 - connect it change the connection type to
20:17 - IB action instead okay and the object is
20:21 - view controller the name I'm gonna call
20:23 - it deal tapped and the you can leave the
20:28 - rest of it as is the event is touch up
20:31 - inside now touch up inside is basically
20:35 - the event when the user taps on the
20:36 - button and lets go of the finger while
20:40 - still within the button all right this
20:42 - is essentially tapping of the button
20:44 - there's also other ones if you click it
20:46 - there's like touch drag outside touch
20:48 - drag inside this touch up outside which
20:51 - is actually when the user taps on the
20:53 - button but slides their finger off the
20:55 - button and then let's go so that doesn't
20:57 - count as a tap and we don't want that
20:59 - this is the one we want touch up inside
21:01 - let's click connect and now you can see
21:05 - that it actually connected a function C
21:09 - F UNC and the function name is deal
21:12 - tapped and inside its got a parameter
21:15 - you don't have to worry about what that
21:17 - is but it's essentially the button that
21:19 - triggered that event so in between these
21:23 - two curly brackets that's where we write
21:25 - the code for our function hit enter a
21:27 - couple of times and in here I'm just
21:30 - gonna print out a statement so we can
21:31 - test it out I'm going to say deal like
21:35 - that and in the next lesson we'll
21:36 - actually put some real code in there but
21:38 - this looks like an iboutlet property
21:41 - except it's a function you can see this
21:42 - keyword here ib action and you can see
21:45 - this if i hover over this it goes over
21:48 - the button now in terms of
21:50 - troubleshooting similar to iboutlet
21:52 - properties if you accidentally made a
21:53 - typo or something like that or you might
21:56 - have connected the wrong element simply
21:59 - go ahead let's delete this IB action
22:01 - altogether let's right-click that
22:04 - and you're gonna see all of these events
22:07 - under touch up inside it's connected to
22:10 - the viewcontroller deal tapped but I
22:12 - just erased that function so it doesn't
22:14 - exist click this X to break that
22:16 - connection and let's go ahead and do it
22:19 - again so I'm going to hold down control
22:21 - drag the button let go there and I am
22:26 - actually going to oh don't forget to
22:29 - change the connection type to action I
22:31 - often times forget to do that and let's
22:33 - call it deal I'm gonna accidentally miss
22:37 - type it again so deal taps okay I'm
22:41 - going to connect it and then realize oh
22:43 - no I made a typo and then I go ahead and
22:46 - correct it here but notice now it's not
22:48 - connected to anything right the button
22:51 - here it's connected to deal taps which I
22:54 - just got rid of now I only have deal
22:56 - tapped so if you make a mistake like
22:58 - that break the connection and you can
23:01 - actually touch up inside move to the
23:05 - right and this this is a low prone to
23:07 - error actually because you might be
23:10 - hovering over the wrong circle so if you
23:13 - just move your mouse over here click and
23:16 - drag it to the view controller here and
23:18 - you can select an IB action function and
23:21 - then you can see it connected right or
23:23 - if you don't want to do it that way just
23:24 - you know delete this break the
23:26 - connection and then use the control drag
23:28 - method and reconnected oh but anyways
23:31 - let's test out this function here so
23:33 - let's use print let's use deal like that
23:37 - and let's run our app again now if you
23:42 - don't see this and it crashes or
23:44 - something like that then you know you've
23:46 - probably made a mistake connecting your
23:48 - outlets so go through the
23:49 - troubleshooting steps that we've gone
23:51 - through in this video now clicking the
23:53 - deal button we should see something pop
23:55 - up in the console so you can see the
23:58 - each time we hit deal this function is
24:00 - being fired and it's printing deal into
24:03 - the console alright so in this lesson
24:05 - you'll learn about iboutlet properties
24:07 - and how they can be used to expose the
24:09 - elements in the storyboard to the view
24:11 - controller you also learned about IB
24:13 - action functions which let you write
24:15 - code in a response to events from the
24:17 - storyboard
24:18 - you learn how to correct any mistakes
24:19 - you might have made when connecting
24:21 - iboutlet properties or IV action
24:23 - functions and finally when your app
24:25 - crashes you learned about how to find
24:27 - that detailed error message which is so
24:29 - crucial to understanding why your app is
24:31 - crashing
24:32 - there's no worksheet for this lesson but
24:34 - I highly recommend that you replicate
24:35 - what we've done in this video in your
24:37 - own Xcode project and if your app is
24:39 - crashing remember to go through those
24:41 - steps that we covered in this video if
24:43 - you like this video please subscribe to
24:44 - my channel by hitting the subscribe
24:45 - button below if you don't want to miss a
24:47 - single video make sure you click that
24:49 - Bell icon as well thanks for watching
24:51 - I'll see you guys in the next lesson

Cleaned transcript:

hi welcome to lesson 8 you're almost there only three lessons to go in this video I'll show you how those Swift basics you've been learning about apply and relate to our Xcode project by the end of this video you'll learn how to write code in the view controller to manage and access the elements in the storyboard I'm also going to show you what to do when your app crashes which happens more often than you think all right let's do it right here we have the Xcode project that we started back in Lesson four well we're gonna continue working on it right now let's jump into viewcontroller.swift where I'm gonna point out a couple of things to you based on what we've covered in the previous couple of Swift lessons starting from line 9 we've got import UIKit now you definitely know what that is because you've seen it in the playground UIKit is a library of code that's provided by Apple in the import statement is basically saying to use it now on line 11 we've got class view controller that is a class your view controller is a class and you can see this is the starting curly bracket for it and this is the ending curly bracket so all of this stuff inside is part of the class there are some things that I'm gonna gloss over right now because you will learn about it in the future and I don't want to confuse you now and one of those things is this this UI view controller part it's something called sub classing which allows you to build your class off of an preexisting class rather than starting from scratch but we're not gonna talk about sub classing in this lesson just kind of keep in mind that that's what this part of the code does basically view controller as a class that builds off of the UI view controller class and down here you have some functions now there is an override keyword before the fu NC but ignore that for now it has to do with sub classing and so here's your function it's called viewdidload and then you've got an opening curly bracket and a closing one and then the code inside here is the code for your function super is another keyword that has to do with sub classing so we're gonna ignore that for now and same thing goes for this function did receive a memory warning okay so this is another function isn't this cool this was stuff that you were learning about in the past couple of Swift lessons and now we can relate it directly back to our Xcode project so your view controller is a class that means for it to do anything the view controller has to be turned into an object right so let's go into the main dot storyboard and I'll show you something else that will blow your mind look at all of these elements that we added to the view are those objects are those classes what are those things that we are adding and customizing to this view believe it or not we're actually creating objects when we drag these elements onto the view well you might ask objects come from classes right what sorts of classes do these elements come from well all of these elements in the object library down here in the lower right hand corner these are actually classes in UI kit stuff like this label this button you know text fields and stuff like that these are all classes and so now this name object library is a little more significant to you right that's right UI kit is actually a library of classes that apple provides and it contains useful classes such as buttons labels image views all the stuff that you've been using and a lot more for instance by dragging and dropping this UI image you here I'm actually creating an object of this class click it and check out the stuff in the inspector pane all of these things that I can configure they are properties of the UI image view class you see the interface builder here is simply a visual way to make it easier for us everything we're doing here in the storyboard we can actually do through code in fact we can completely omit using the storyboard and instead write code inside of the view controller here to create all of the objects set their properties and then place them into the view however that is definitely more of an intermediatetoadvanced thing that you'll eventually get to for beginners who are just starting out I highly recommend using the storyboard so these elements in the view here are objects how can I get access to them from the view controller that's where IB outlet properties to play let me show you how to expose these elements from the storyboard to the view controller as an iboutlet property now there are multiple ways of doing it but the easiest way is just to select the view controller here in the document outline to make sure that you have it highlighted and then go over here in the upper right hand corner and click on this little icon that looks like two intergenic circles this is what's known as the assistant editor and it basically kind of splits your screen into two so on the left hand side you can view your storyboard and on the right hand side you can view the code now I want you to go over here to this little breadcrumb navigation and make sure that where my mouse is hovering yours also stays automatic if it doesn't just go ahead and click it and then scroll down to automatic here you should see view control a lot swift if you've got it highlighted here because basically the automatic setting will show what's relevant on the righthand side according to what you select on the left hand side so if you've got the view controller selected this automatic setting should be showing you view controller without Swift the reason is because this view controller here this note in the document outline is actually the visual representation or you could call it the object of this view controller class here now what I want you to do is on the right hand side in the view controller right underneath class like inside the class but above the viewdidload function just press ENTER a couple of times on your keyboard to create a little bit of space and make sure you don't do it here but you do it here right inside the class right after that starting curly bracket for the class so right here it creates some space and then on the left hand side it and in the document outline click on this first card this is the left card right here and you can see that being highlighted if I click this one you're gonna see the right card being highlighted so go ahead let's click the left one we'll start with that and now hold down control on your keyboard and while still holding that down click this image view in the document line and start moving your mouse and dragging it you're gonna see a blue line follow your mouse as long as you're holding out of that control button and you haven't let go of the mouse yet so drag it over here on the right hand side where we created that space and you should see that little note saying insert outlet or outlet collection and now you can let go of your mouse and you can let go of control and out pops this little menu here and you can see that the connection type is set to outlet and the object is view controller and we're going to name our IB outlet property now you can ignore the rest here well the type should be uiimageview you shouldn't need to change this if you selected the right element here you should automatically have this type as uiimageview okay so here I'm gonna call it the left image view like that and I'm going to click this connect button so there we have it it automatically generates this property for us now this property is special in that it has this special keyword here iboutlet and you can see that var keyword there and maybe I should just minimize that pane so we have a little more space and you can see this is the name that I gave the property and this is the data type right that the property is going to hold there are a couple of things that we're going to ignore right now I'll explain it down the road that is this week in this exclamation mark you don't have to worry about that for now but what you should know is that what we've just done is we've connected this element here this left card view it to this iboutlet property here so that this property will actually point to this uiimageview object and since we have a reference to that object we can use dot notation like you learned in the previous lesson to access all of the methods and properties of that uiimageview object right so if we wanted to change that image we could call functions on it we could you know set its properties and we can do that I'll show you that in a second but right now I just want to go over some common mistakes we want to double check that we've connected it right so what I want you to do is go back here on the left hand side the storyboard and then right click your left image view you can see that it even changed its name here you can either rightclick it in the document outline here or rightclick it in the storyboard either way it should pop up this little context menu for that element and under referencing outlets you should see the property name which is left image view followed by view controller if this is the object which contains that property this shows you that this element is connected as an llet property to this class right here and it also gives you this little X button for you to break that connection if you don't see this that means that you might have connected the wrong element so let me show you how to fix that what you're going to do first is you need to find out which element you accidentally connected so what I would do is I would go right click this guy and then check you know right right click a couple of elements which you think you might have dragged it could be potentially this card stack view right because if you're clicking this you might have accidentally selected the stack view instead you know so sometimes it's just easier to connect it from the document outline rather than clicking it from here but anyways after you find out the one that you accidentally connected go ahead and click X to break the connection and then go back to the view controller here and then delete that ible property and now you can start from scratch again essentially so again let's do it one more time for practice on the left hand side here I have selected the left uiimageview hold down control on the keyboard click and drag over here I let go and then I can now name my outlet left image view and I'm going to click connect now another mistake that sometimes happens is that you made a typo while you named that outlet property so some people might just go ahead and correct it let's say they they forgot to capitalize something and they might just change it here I'm just gonna maybe I'm gonna add a letter like that let's pretend I am correcting a typo but if you do this things will break let's go back to the lefthand side and rightclick that you are image view you can see here that the referencing outlet it's connected to left image view right but I've just changed that property name to left image views so when you run your app it's going to be looking for that property to assign the object to it's not gonna find that property and it's gonna break so if you made a typo don't just erase it or correct it here you will actually have to just go ahead and delete it and then go back here on the lefthand side right click click this X to break the connection first and then do it all over again so hold down ctrl click and drag it here left image view connect all right let's connect the other image view so I'm going to click on this one hold down ctrl click and drag it here make sure you don't drag it into this existing outlet you can see here it highlights the outlet in blue you don't want to do that otherwise you're gonna have connected two outlets to the same property and bad things can happen so just make some space if you need to and connect it down here I'm gonna call this the right image view just like that and you'll actually notice that this gray circle is filled in it's if you hover over it it tells you what it's connected to you see and when it's filled in that means it's connected let me just show you here I'm gonna break the connection in the storyboard here and now you can actually see that it has turned hollow and that means that this property isn't connected to anything now I find that this is not the most reliable way to tell because sometimes when you just open your Xcode project it doesn't really update these little circles so there are times when I know they are connected but they still show Hollow so I wouldn't put too much emphasis on using this but anyways here's another way to connect your outlet if you already have the property here you can rightclick here new referencing outlet you can this little circle here you can actually click this plus icon you can let's drag it to the viewcontroller node here let go and you can actually select the property make sure you select the correct one though right image view and now you can see that this is filled in and when you hover over it it should highlight the right image view but you know I wouldn't attempt to do it the way I just showed you if you're not comfortable with things yet just connect it using the ctrl click and drag method that's the easiest way for beginners to learn I feel so now and go back down here under the stack view we are also going to connect the labels so there are two labels that we want to connect this zero under player so hold down ctrl click and drag down here I'm going to call this the left score label and for this one click drag hold down ctrl as well I forgot to mention write score now before I connect this one I'm going to purposely make a typo let's call it write score labels and that and when I connect it I've noticed oh man I made a typo so I am going to actually just correct it like this you can actually see when I did that this became disconnected and if I right click my label here it's still connected to write score labels but I don't have that property and I'm going to run it for you right now and show you what happens so it's gonna crash and because we have assistant editor open both the panes changed to here but it's gonna highlight this red line here which doesn't really tell us much what you want to do actually is go down to the lower right hand corner into this console area where there's a lot of gibberish but this is essentially where you can find the detailed error message the last line tells you terminating with uncaught exception of type NS exception that's basically just telling you that the app crashed what you should do is you should scroll all the way up all the way up to the top usually and you're going to find actually a more detailed error message more plain English that you can read to stuff here bla bla bla bla bla and then down here this class is not key value coding compliant for the key rights core labels now this lion might not make any sense to you this class is not key value coding compliant for the key but however over time when you see the same message over and over again you kind of learn to understand what the cause of that is and in this case it's because it's trying to look for write score labels but however we don't have that property you know this is a heck of a lot more easy to understand then you know reading any of this and this is just a generic message which doesn't tell you what's wrong so in this console area you scroll all the way up and then you read what the error message is so let's go back to the storyboard and let's fix this error and resolve this crash so we're gonna click on the storyboard the left hand side changes of our assistant editor and on the right hand side you should see the view controller if you don't click on the view controller up here make sure that this side is set to automatic like that and we're gonna fix this right score label so this one this is connected to an outlet that doesn't exist anymore so go ahead and click X and then we are going to take this new referencing outlet and connect it to a preexisting one and that's right score label and so now this guy's filled in if I hover over this circle you'll see that this right score label is highlighted so we know which one it's connected to okay so now we've got four iboutlet properties and they are connected to these objects that are on our storyboard and since these properties are outside of any functions and they're inside our class we can actually access them from inside any function so let's just do a little test here and viewdidload for example I can say left image view right that's our property name up here dot and then these are all of the and functions that are available for a UI image view object and I can access this property called image right and then I can go ahead and what I can set that and change the image we're not going to do that right now we're gonna do this in the next lesson but for now I just wanted to show you that we can access this image view here and we can access the image property using dot notation like that so let's go ahead and delete that so you know the image property that I just showed you let's click this button to go back to the single view editor and let's click this button to get our inspector pane back if I click this image view see right here in the inspector pane this image drop down here well that is the image property that I just accessed in the view controller right so if I set that with code that's the equivalent of setting it here to one of these image assets see I choose card 14 use whatever and simply by connecting this element as an iboutlet property to the view controller the view controller now can write code to manage this element in the Cir board okay so now the next order of business is how do we run some specific block of code or a function when the deal button is tapped here because essentially when this button is tapped we want to run code that will change these images right well we can use something called an IB action function so very similar to IB outlet property but this one is a function so let me show you how to connect that we are going to go back to a system editor so let's hit view controller on the right hand side it should be set to automatic view controller and we were connecting the outlets up here because that's where properties go inside the class but now for a function we only have to put it inside of the class right so this last curly bracket this one is the ending curly bracket for the class so we want to put our function inside of the class right so you have to make sure that you create some space before this last curly bracket all right this curly bracket is for this function all right so right here would be a good place to put the function to run when the deal button is tapped we don't have to write the function all we have to do is go over here on the left hand side and click on the button element from the document outline hold down ctrl on your keyboard click and drag all the way here and then let go of your mouse button and out pops this little guy but before you connect it change the connection type to IB action instead okay and the object is view controller the name I'm gonna call it deal tapped and the you can leave the rest of it as is the event is touch up inside now touch up inside is basically the event when the user taps on the button and lets go of the finger while still within the button all right this is essentially tapping of the button there's also other ones if you click it there's like touch drag outside touch drag inside this touch up outside which is actually when the user taps on the button but slides their finger off the button and then let's go so that doesn't count as a tap and we don't want that this is the one we want touch up inside let's click connect and now you can see that it actually connected a function C F UNC and the function name is deal tapped and inside its got a parameter you don't have to worry about what that is but it's essentially the button that triggered that event so in between these two curly brackets that's where we write the code for our function hit enter a couple of times and in here I'm just gonna print out a statement so we can test it out I'm going to say deal like that and in the next lesson we'll actually put some real code in there but this looks like an iboutlet property except it's a function you can see this keyword here ib action and you can see this if i hover over this it goes over the button now in terms of troubleshooting similar to iboutlet properties if you accidentally made a typo or something like that or you might have connected the wrong element simply go ahead let's delete this IB action altogether let's rightclick that and you're gonna see all of these events under touch up inside it's connected to the viewcontroller deal tapped but I just erased that function so it doesn't exist click this X to break that connection and let's go ahead and do it again so I'm going to hold down control drag the button let go there and I am actually going to oh don't forget to change the connection type to action I often times forget to do that and let's call it deal I'm gonna accidentally miss type it again so deal taps okay I'm going to connect it and then realize oh no I made a typo and then I go ahead and correct it here but notice now it's not connected to anything right the button here it's connected to deal taps which I just got rid of now I only have deal tapped so if you make a mistake like that break the connection and you can actually touch up inside move to the right and this this is a low prone to error actually because you might be hovering over the wrong circle so if you just move your mouse over here click and drag it to the view controller here and you can select an IB action function and then you can see it connected right or if you don't want to do it that way just you know delete this break the connection and then use the control drag method and reconnected oh but anyways let's test out this function here so let's use print let's use deal like that and let's run our app again now if you don't see this and it crashes or something like that then you know you've probably made a mistake connecting your outlets so go through the troubleshooting steps that we've gone through in this video now clicking the deal button we should see something pop up in the console so you can see the each time we hit deal this function is being fired and it's printing deal into the console alright so in this lesson you'll learn about iboutlet properties and how they can be used to expose the elements in the storyboard to the view controller you also learned about IB action functions which let you write code in a response to events from the storyboard you learn how to correct any mistakes you might have made when connecting iboutlet properties or IV action functions and finally when your app crashes you learned about how to find that detailed error message which is so crucial to understanding why your app is crashing there's no worksheet for this lesson but I highly recommend that you replicate what we've done in this video in your own Xcode project and if your app is crashing remember to go through those steps that we covered in this video if you like this video please subscribe to my channel by hitting the subscribe button below if you don't want to miss a single video make sure you click that Bell icon as well thanks for watching I'll see you guys in the next lesson
