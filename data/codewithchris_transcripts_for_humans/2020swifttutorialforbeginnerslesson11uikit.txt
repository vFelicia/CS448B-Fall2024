With timestamps:

00:00 - hello and welcome to my Swift tutorial
00:01 - for beginners in this video I want to
00:03 - introduce you to UI kit which is an
00:06 - apple framework that contains a lot of
00:08 - the classes we're going to need in order
00:10 - to construct iOS apps
00:12 - alright so let's dive in and see what's
00:13 - available in UI kit so if you imagine
00:21 - most apps there are common elements
00:23 - between all of them such as labels
00:25 - buttons maybe text fields images and if
00:29 - we were to build each of these
00:31 - components from scratch every single
00:33 - time we've built an app it would be very
00:34 - time consuming and a lot of wasted
00:36 - effort and so Apple has provided us a
00:39 - library of all these pre-built
00:41 - elements that we can use in our apps and
00:43 - they've called this library UI kit
00:45 - that's what we're here to discuss now UI
00:48 - kit contains a lot of user interface
00:50 - elements and I know it strays a little
00:52 - bit away from Swift programming which is
00:54 - what this series is about but one of the
00:56 - very interesting things about UI kit
00:59 - which is relevant to what we've been
01:00 - talking about is how they use
01:02 - inheritance and sub classing to create
01:05 - all of these different UI kid classes so
01:08 - I'm gonna go through that with you as
01:09 - well but first let's take a look at
01:11 - where you can see the documentation for
01:13 - UI kit so if you just type it into
01:15 - Google Apple space UI kit into a search
01:18 - it should be the first result when you
01:20 - click on that you're going to get to the
01:22 - reference page or the documentation page
01:25 - for that and then you scroll down and
01:26 - you can see all of the different things
01:27 - in UI kit you can see it doesn't just
01:30 - contain user interface elements but it
01:32 - contains other things like classes for
01:35 - animation touches gestures drag and drop
01:39 - and stuff like that another really handy
01:41 - way to explore UI kit which I recommend
01:45 - even more is just to open up Xcode if
01:50 - you go under window you should see
01:51 - developer documentation and that's what
01:53 - you want to click and bring up on the
01:55 - left hand side under Swift you're going
01:57 - to find UI kit near the top and it's
02:00 - much easier to browse this like that one
02:04 - of the things that they have removed is
02:06 - kind of a hierarchy that shows you how
02:08 - each of the classes are subclasses of
02:12 - other classes above it and so I wanted
02:14 - to pull up that diagram for you to
02:15 - illustrate how they're using inheritance
02:18 - and sub classing and so I googled it and
02:20 - I found an old image from back then that
02:23 - shows you how each of the elements
02:25 - derived from other elements and all the
02:28 - way here on the right hand side you're
02:30 - going to see this UI button here and
02:32 - this is your classic or standard iOS
02:35 - button that you would put in your view
02:36 - but notice if you follow the lines that
02:38 - it's a subclass of UI control which is a
02:41 - subclass of UI view which is a subclass
02:44 - of UI responder which is ultimately a
02:47 - subclass of nsobject so it's very
02:51 - interesting to see if you are curious
02:54 - about what any of these classes do you
02:57 - can go into this documentation which I
03:00 - showed you here let's say we go under
03:02 - button great you can see the declaration
03:05 - here class UI button that it's
03:07 - subclasses from UI control just like we
03:10 - saw over there in that hierarchy but if
03:13 - you click that UI control it's gonna
03:15 - bring you to that class and you can read
03:17 - about it as you can see it's the base
03:19 - class for controls which are visual
03:21 - elements that convey a specific action
03:23 - and response to user interactions pretty
03:25 - cool but down here you can see that UI
03:28 - control is actually a subclass of UI
03:30 - view so you click on UI view and see
03:32 - what that does it is basically something
03:35 - that you can put on the screen for the
03:37 - user to see now UI view is actually a
03:41 - subclass of UI responder what's that
03:43 - click into there it's an abstract
03:45 - interface for responding to and handling
03:48 - events which explains why so many user
03:51 - interface elements are ultimately a
03:53 - subclass of us responder but UI
03:56 - responder itself is a subclass of
03:58 - nsobject so what's that click on that
04:01 - the root class of most objective-c class
04:04 - hierarchies and we're gonna talk about
04:06 - that in a second why that says Objective
04:08 - C from which subclasses inherit a basic
04:11 - interface to the runtime system and the
04:14 - ability to behave as objects so it's
04:17 - basically what makes an object tick if
04:20 - you will and the reason it says
04:22 - Objective C is that originally before
04:25 - Swift
04:25 - language to build apps was objective-c
04:28 - so a lot of UI kit is actually still
04:31 - written in Objective C with Swift being
04:34 - a layer on top where you can use these
04:37 - classes as Swift one of the dead
04:39 - giveaways is this NS prefix in front of
04:42 - the class name usually when you see that
04:44 - you can expect that that is an
04:46 - objective-c class however whether that's
04:49 - objective-c or Swift that's not what I
04:51 - wanted to point out to you in this
04:52 - lesson right here what I wanted to show
04:55 - you was eight how Apple has created this
04:57 - whole UI kit library from all of this
05:02 - inheritance and sub classing and that's
05:05 - really cool to see how they organized
05:07 - all of the different pieces there and
05:09 - then B to let you know that there is
05:12 - this UI kit library at your disposal
05:14 - with so many pre-built components that
05:17 - you can use to build your app now once
05:19 - you finish the Swift programming series
05:20 - and you move on to learning about Xcode
05:22 - and building user interfaces and stuff
05:25 - like that all of these classes are going
05:26 - to come in handy all right so at this
05:28 - point that's all you need to know about
05:30 - the uikit library i'll see you guys in
05:32 - the next lesson

Cleaned transcript:

hello and welcome to my Swift tutorial for beginners in this video I want to introduce you to UI kit which is an apple framework that contains a lot of the classes we're going to need in order to construct iOS apps alright so let's dive in and see what's available in UI kit so if you imagine most apps there are common elements between all of them such as labels buttons maybe text fields images and if we were to build each of these components from scratch every single time we've built an app it would be very time consuming and a lot of wasted effort and so Apple has provided us a library of all these prebuilt elements that we can use in our apps and they've called this library UI kit that's what we're here to discuss now UI kit contains a lot of user interface elements and I know it strays a little bit away from Swift programming which is what this series is about but one of the very interesting things about UI kit which is relevant to what we've been talking about is how they use inheritance and sub classing to create all of these different UI kid classes so I'm gonna go through that with you as well but first let's take a look at where you can see the documentation for UI kit so if you just type it into Google Apple space UI kit into a search it should be the first result when you click on that you're going to get to the reference page or the documentation page for that and then you scroll down and you can see all of the different things in UI kit you can see it doesn't just contain user interface elements but it contains other things like classes for animation touches gestures drag and drop and stuff like that another really handy way to explore UI kit which I recommend even more is just to open up Xcode if you go under window you should see developer documentation and that's what you want to click and bring up on the left hand side under Swift you're going to find UI kit near the top and it's much easier to browse this like that one of the things that they have removed is kind of a hierarchy that shows you how each of the classes are subclasses of other classes above it and so I wanted to pull up that diagram for you to illustrate how they're using inheritance and sub classing and so I googled it and I found an old image from back then that shows you how each of the elements derived from other elements and all the way here on the right hand side you're going to see this UI button here and this is your classic or standard iOS button that you would put in your view but notice if you follow the lines that it's a subclass of UI control which is a subclass of UI view which is a subclass of UI responder which is ultimately a subclass of nsobject so it's very interesting to see if you are curious about what any of these classes do you can go into this documentation which I showed you here let's say we go under button great you can see the declaration here class UI button that it's subclasses from UI control just like we saw over there in that hierarchy but if you click that UI control it's gonna bring you to that class and you can read about it as you can see it's the base class for controls which are visual elements that convey a specific action and response to user interactions pretty cool but down here you can see that UI control is actually a subclass of UI view so you click on UI view and see what that does it is basically something that you can put on the screen for the user to see now UI view is actually a subclass of UI responder what's that click into there it's an abstract interface for responding to and handling events which explains why so many user interface elements are ultimately a subclass of us responder but UI responder itself is a subclass of nsobject so what's that click on that the root class of most objectivec class hierarchies and we're gonna talk about that in a second why that says Objective C from which subclasses inherit a basic interface to the runtime system and the ability to behave as objects so it's basically what makes an object tick if you will and the reason it says Objective C is that originally before Swift language to build apps was objectivec so a lot of UI kit is actually still written in Objective C with Swift being a layer on top where you can use these classes as Swift one of the dead giveaways is this NS prefix in front of the class name usually when you see that you can expect that that is an objectivec class however whether that's objectivec or Swift that's not what I wanted to point out to you in this lesson right here what I wanted to show you was eight how Apple has created this whole UI kit library from all of this inheritance and sub classing and that's really cool to see how they organized all of the different pieces there and then B to let you know that there is this UI kit library at your disposal with so many prebuilt components that you can use to build your app now once you finish the Swift programming series and you move on to learning about Xcode and building user interfaces and stuff like that all of these classes are going to come in handy all right so at this point that's all you need to know about the uikit library i'll see you guys in the next lesson
