With timestamps:

00:00 - hey guys what's up it's Chris here in
00:02 - this video I'm going to show you guys
00:04 - how to move the text field either away
00:07 - from or towards the keyboard so that it
00:10 - stays right above the keyboard and you
00:12 - can see exactly what you're typing so
00:23 - the idea for this video actually came
00:25 - about one of the lessons inside my
00:27 - course pertaining to the text field and
00:29 - I was just showing students how to
00:31 - animate the text field out of the view
00:34 - of the keyboard in case the text field
00:36 - is hidden so in this demo right here I
00:38 - have the text field here and it's closer
00:41 - to the bottom of the screen and I can
00:44 - show you exactly what's happening if I
00:46 - tap on this text field it's going to
00:48 - animate up along with the keyboard
00:50 - sliding up so that it stays it stays in
00:54 - view and not hidden by the keyboard like
00:56 - that so the way we achieved this is
00:59 - really through the use of this bottom
01:01 - constraint right here which tells us the
01:04 - distance between the bottom of the view
01:06 - and the bottom of the text field right
01:08 - now it's set to be about 20 and what
01:10 - I've done is I've exposed this
01:12 - constraint as an iboutlet property for
01:16 - the view controller here so there's my
01:20 - bottom constraint exposed as an iboutlet
01:23 - and then in the viewdidload what I have
01:25 - is I've added an observer to listen for
01:29 - the UI keyboard will show notification
01:32 - which will fire whenever the keyboard
01:33 - shows and I've set it so that it calls a
01:36 - function that I've created whenever this
01:39 - notification occurs so the function is
01:42 - down here whenever the keyboard shows
01:45 - what I do is I grab the info along with
01:48 - that notification and it contains some
01:51 - details like how tall the keyboard is
01:54 - going to reach basically the height of
01:56 - the keyboard and I need that information
01:59 - because I need to animate that bottom to
02:02 - strength so that the height so that it
02:05 - clears the height of the keyboard plus a
02:07 - little bit of a gap and essentially what
02:10 - I'm doing is I'm animating the new value
02:13 - for that
02:13 - bottom constraint and setting it to a
02:16 - value that is just above the keyboard
02:19 - height so that's how that effect is
02:22 - achieved so back to the question that I
02:25 - got in the course tobe asks this sample
02:30 - works because there's a vertical bottom
02:32 - constraint on the text field however
02:34 - when we're laying things out in a stack
02:36 - view how are we supposed to achieve the
02:39 - same effect now that's a great question
02:41 - because these days we really take
02:44 - advantage of how easy it is to create
02:46 - layouts with stack views and if you're
02:48 - not aware of them stack views basically
02:51 - you can put elements inside of it it
02:52 - groups them together either in the
02:54 - vertical fashion or a horizontal fashion
02:56 - but you don't have to specify Auto
02:58 - layout constraints for the elements
03:01 - inside this back view the SACU handles
03:03 - that layout for you all you need to do
03:05 - is position the stack view this is a
03:09 - great question and I'm going to show you
03:11 - exactly how you can do it
03:13 - with a text field inside a stack view oh
03:15 - and before I forget if you actually want
03:18 - the code for the Xcode project that I
03:21 - just showed you check in the description
03:23 - for the link to download that all right
03:29 - so back to this example here this text
03:31 - field right here is inside a stack view
03:34 - in fact it's inside two stack views and
03:36 - I'm animating it so that sits above the
03:39 - keyboard just fine so let me show you
03:41 - exactly how that's done this project
03:45 - here is part of a project that we're
03:47 - working on inside the course it's a
03:50 - survey app and it's not complete yet so
03:52 - you don't see any styling but it serves
03:55 - the purpose for me to use as a demo to
03:57 - demonstrate how this works okay so here
04:01 - is our text field right here actually
04:05 - this is the text field right here and as
04:07 - you can see in this document outline
04:09 - both this text field and this label this
04:12 - name label is sitting inside the stack
04:14 - view and furthermore this stack view
04:17 - along with two other studies are inside
04:20 - an outer stack view like that and it's
04:23 - this outer stack view that has this top
04:26 - constraint right here
04:27 - and that's really going to be the key of
04:29 - this because you can't really animate
04:33 - any sort of constraints because this
04:36 - back view organizes how these two
04:38 - elements are laid out and this stack
04:40 - view organizes how you know its elements
04:43 - inside of it or laid out all you really
04:46 - have to work with you have to go way way
04:49 - kind of up the layers of the stack view
04:51 - until you reach the outer stack view
04:53 - which is positioned by Auto layout
04:56 - constraints and then you can grab one of
04:58 - the constraints and you can animate it
05:00 - now you know it's obvious what we're
05:03 - going to do here when the keyboard
05:04 - slides up we're going to increase the
05:08 - constant for this constraint so that it
05:10 - pushes the whole outer stack view down
05:13 - so that this text field sits right above
05:16 - the keyboard right but the real question
05:17 - is how do we know how far to push it
05:22 - down or you know if the text field is
05:24 - down here how do we know how far to you
05:28 - know change this constant so that that
05:30 - text field is always just sitting right
05:32 - above the keyboard well it requires a
05:35 - little bit of math so I'm going to show
05:37 - you guys how to do that math right now
05:38 - but first what's important is that
05:41 - you're going to need an iboutlet for the
05:45 - actual text field for its containing
05:48 - stack view and then all of the stack
05:52 - views above it until you reach the outer
05:54 - stack view which has the constraint and
05:56 - furthermore you need an iboutlet for
05:58 - this constraint as well so just to
06:00 - remind you here text field here's the
06:02 - stack view that contains it and then
06:05 - here's the outer spec view so in first
06:09 - view controller if I scroll all the way
06:11 - to the top I've got IB outlets for all
06:13 - of those things so here is name text
06:17 - field depth and IB outlet for the actual
06:19 - text field that we're working on this
06:23 - text fields back view is an outlet for
06:26 - that's back view and then here's the
06:28 - outer stack view and finally here's
06:30 - another outlet for that top constraint
06:33 - for that outer spective I've called it
06:35 - ever stack view table constraint and
06:37 - I've also created another there
06:40 - here just to keep track of what the
06:42 - original value for this constraint was
06:45 - because we want to animate it back to
06:47 - that value after the keyboard gets
06:49 - dismissed okay so now that we have all
06:52 - of these things it's going to be the
06:55 - same technique to detect the keyboard
06:57 - we're listening for the UI keyboard will
07:00 - show notification and when that happens
07:04 - we call this function which I created
07:06 - here keyboard will show and that
07:09 - function is down here again we grab the
07:13 - user info from the notification in order
07:15 - to get the height of the keyboard so
07:19 - here's the basic premise first of all we
07:22 - want to find our target y-coordinate so
07:25 - basically where do we want our text
07:27 - field to sit then we find out exactly
07:31 - where the text field is sitting you know
07:34 - because it's kind of buried deep in in a
07:37 - couple of facts use so we need to
07:38 - calculate where the text field is
07:41 - sitting in terms of the y-coordinate
07:43 - then we find out how off are we from the
07:47 - target so we calculate this difference
07:49 - and then we can either add or subtract
07:52 - that difference from the top constraint
07:56 - constant now that we have the target
07:58 - offset we need in order to correct
08:02 - things or I mean place the text field
08:04 - above the keyboard we can then animate
08:07 - that constraint towards that target
08:10 - offset and that's how we're going to
08:12 - achieve that effect so I'm going to use
08:14 - some diagrams to show you guys exactly
08:16 - how these calculations were done just to
08:18 - help you understand why why I'm
08:22 - subtracting or adding all these bunch of
08:24 - things okay so let's start with finding
08:26 - our target y as you can see with this
08:29 - slide we start with the height of the
08:31 - view then we subtract the height of the
08:34 - keyboard then we subtract 20 which is
08:37 - just an arbitrary number for a gap
08:39 - between the text field and the keyboard
08:41 - and then finally we subtract the height
08:44 - of the text field itself and the reason
08:47 - we have to subtract the height of the
08:48 - text field is because when you ask the
08:50 - text field where its y-coordinate
08:53 - it tells you based off the upper
08:56 - left-hand corner of the text field
08:59 - furthermore we are going to be adjusting
09:01 - to top constraint for this back view so
09:05 - essentially we're calculating a target
09:07 - based off of the gap between the top of
09:11 - the view to the top of the text field
09:14 - and that's our target Y now jumping back
09:18 - to the Xcode project the next thing to
09:20 - find is the y-coordinate for the text
09:22 - field exactly where is the text field
09:25 - sitting currently and this is a pretty
09:27 - straightforward calculation again back
09:30 - to the diagrams we take the y-coordinate
09:34 - of the outer stack view and we add the
09:38 - y-coordinate for the text field stack
09:41 - view and we add that to the y-coordinate
09:45 - of the name text field and that's going
09:47 - to give us the total distance that the
09:49 - text field is from the top of the view
09:51 - in the next slide we basically calculate
09:56 - the difference we take our target Y and
09:58 - then we subtract the current y-value of
10:02 - the text field this calculates how far
10:06 - off we are from our desired location now
10:10 - that we have the offset all we need to
10:12 - do is add it to that top constraint to
10:15 - increase how large that gap is and
10:18 - thereby pushing that textview to our
10:21 - desired Y location so jumping back to
10:24 - Xcode you can see that's exactly what
10:26 - we're doing we're finding the difference
10:28 - between the target Y and the text field
10:30 - Y and then we're taking while we're
10:33 - creating a constant here that is
10:36 - basically taking the current value of
10:37 - the top constraint plus the difference
10:40 - and that is the new constant we want to
10:44 - set the top constraint to so next we
10:47 - create an animation and we're setting
10:49 - this top constraint the constant to our
10:52 - new offset and this target offset is
10:56 - combining the current top constraint
10:59 - constant plus the difference we need to
11:01 - push it to the desired Y location in
11:05 - terms of animating the
11:07 - filled back into it's original position
11:09 - well that's easy here all we need to do
11:14 - is create an animation that sets the top
11:17 - constraint back to its original
11:19 - constraint value which this variable
11:22 - here I created up here and it's just 20
11:24 - now I hope that made sense and remember
11:27 - to check the description below the video
11:29 - for the links to download these Xcode
11:31 - projects so if you enjoyed this lesson
11:33 - and you want to see more please
11:35 - subscribe and please hit the like button
11:37 - thanks for watching and I'll see you in
11:40 - the next video bye for now
11:41 - [Music]

Cleaned transcript:

hey guys what's up it's Chris here in this video I'm going to show you guys how to move the text field either away from or towards the keyboard so that it stays right above the keyboard and you can see exactly what you're typing so the idea for this video actually came about one of the lessons inside my course pertaining to the text field and I was just showing students how to animate the text field out of the view of the keyboard in case the text field is hidden so in this demo right here I have the text field here and it's closer to the bottom of the screen and I can show you exactly what's happening if I tap on this text field it's going to animate up along with the keyboard sliding up so that it stays it stays in view and not hidden by the keyboard like that so the way we achieved this is really through the use of this bottom constraint right here which tells us the distance between the bottom of the view and the bottom of the text field right now it's set to be about 20 and what I've done is I've exposed this constraint as an iboutlet property for the view controller here so there's my bottom constraint exposed as an iboutlet and then in the viewdidload what I have is I've added an observer to listen for the UI keyboard will show notification which will fire whenever the keyboard shows and I've set it so that it calls a function that I've created whenever this notification occurs so the function is down here whenever the keyboard shows what I do is I grab the info along with that notification and it contains some details like how tall the keyboard is going to reach basically the height of the keyboard and I need that information because I need to animate that bottom to strength so that the height so that it clears the height of the keyboard plus a little bit of a gap and essentially what I'm doing is I'm animating the new value for that bottom constraint and setting it to a value that is just above the keyboard height so that's how that effect is achieved so back to the question that I got in the course tobe asks this sample works because there's a vertical bottom constraint on the text field however when we're laying things out in a stack view how are we supposed to achieve the same effect now that's a great question because these days we really take advantage of how easy it is to create layouts with stack views and if you're not aware of them stack views basically you can put elements inside of it it groups them together either in the vertical fashion or a horizontal fashion but you don't have to specify Auto layout constraints for the elements inside this back view the SACU handles that layout for you all you need to do is position the stack view this is a great question and I'm going to show you exactly how you can do it with a text field inside a stack view oh and before I forget if you actually want the code for the Xcode project that I just showed you check in the description for the link to download that all right so back to this example here this text field right here is inside a stack view in fact it's inside two stack views and I'm animating it so that sits above the keyboard just fine so let me show you exactly how that's done this project here is part of a project that we're working on inside the course it's a survey app and it's not complete yet so you don't see any styling but it serves the purpose for me to use as a demo to demonstrate how this works okay so here is our text field right here actually this is the text field right here and as you can see in this document outline both this text field and this label this name label is sitting inside the stack view and furthermore this stack view along with two other studies are inside an outer stack view like that and it's this outer stack view that has this top constraint right here and that's really going to be the key of this because you can't really animate any sort of constraints because this back view organizes how these two elements are laid out and this stack view organizes how you know its elements inside of it or laid out all you really have to work with you have to go way way kind of up the layers of the stack view until you reach the outer stack view which is positioned by Auto layout constraints and then you can grab one of the constraints and you can animate it now you know it's obvious what we're going to do here when the keyboard slides up we're going to increase the constant for this constraint so that it pushes the whole outer stack view down so that this text field sits right above the keyboard right but the real question is how do we know how far to push it down or you know if the text field is down here how do we know how far to you know change this constant so that that text field is always just sitting right above the keyboard well it requires a little bit of math so I'm going to show you guys how to do that math right now but first what's important is that you're going to need an iboutlet for the actual text field for its containing stack view and then all of the stack views above it until you reach the outer stack view which has the constraint and furthermore you need an iboutlet for this constraint as well so just to remind you here text field here's the stack view that contains it and then here's the outer spec view so in first view controller if I scroll all the way to the top I've got IB outlets for all of those things so here is name text field depth and IB outlet for the actual text field that we're working on this text fields back view is an outlet for that's back view and then here's the outer stack view and finally here's another outlet for that top constraint for that outer spective I've called it ever stack view table constraint and I've also created another there here just to keep track of what the original value for this constraint was because we want to animate it back to that value after the keyboard gets dismissed okay so now that we have all of these things it's going to be the same technique to detect the keyboard we're listening for the UI keyboard will show notification and when that happens we call this function which I created here keyboard will show and that function is down here again we grab the user info from the notification in order to get the height of the keyboard so here's the basic premise first of all we want to find our target ycoordinate so basically where do we want our text field to sit then we find out exactly where the text field is sitting you know because it's kind of buried deep in in a couple of facts use so we need to calculate where the text field is sitting in terms of the ycoordinate then we find out how off are we from the target so we calculate this difference and then we can either add or subtract that difference from the top constraint constant now that we have the target offset we need in order to correct things or I mean place the text field above the keyboard we can then animate that constraint towards that target offset and that's how we're going to achieve that effect so I'm going to use some diagrams to show you guys exactly how these calculations were done just to help you understand why why I'm subtracting or adding all these bunch of things okay so let's start with finding our target y as you can see with this slide we start with the height of the view then we subtract the height of the keyboard then we subtract 20 which is just an arbitrary number for a gap between the text field and the keyboard and then finally we subtract the height of the text field itself and the reason we have to subtract the height of the text field is because when you ask the text field where its ycoordinate it tells you based off the upper lefthand corner of the text field furthermore we are going to be adjusting to top constraint for this back view so essentially we're calculating a target based off of the gap between the top of the view to the top of the text field and that's our target Y now jumping back to the Xcode project the next thing to find is the ycoordinate for the text field exactly where is the text field sitting currently and this is a pretty straightforward calculation again back to the diagrams we take the ycoordinate of the outer stack view and we add the ycoordinate for the text field stack view and we add that to the ycoordinate of the name text field and that's going to give us the total distance that the text field is from the top of the view in the next slide we basically calculate the difference we take our target Y and then we subtract the current yvalue of the text field this calculates how far off we are from our desired location now that we have the offset all we need to do is add it to that top constraint to increase how large that gap is and thereby pushing that textview to our desired Y location so jumping back to Xcode you can see that's exactly what we're doing we're finding the difference between the target Y and the text field Y and then we're taking while we're creating a constant here that is basically taking the current value of the top constraint plus the difference and that is the new constant we want to set the top constraint to so next we create an animation and we're setting this top constraint the constant to our new offset and this target offset is combining the current top constraint constant plus the difference we need to push it to the desired Y location in terms of animating the filled back into it's original position well that's easy here all we need to do is create an animation that sets the top constraint back to its original constraint value which this variable here I created up here and it's just 20 now I hope that made sense and remember to check the description below the video for the links to download these Xcode projects so if you enjoyed this lesson and you want to see more please subscribe and please hit the like button thanks for watching and I'll see you in the next video bye for now
