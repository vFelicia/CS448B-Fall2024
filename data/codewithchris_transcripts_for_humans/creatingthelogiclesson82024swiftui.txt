With timestamps:

00:00 - this is the final lesson we're going to implement 
the app logic to randomize the cards whenever  
00:04 - we tap on the deal button and we're going to 
update the scores as well by the end of this  
00:08 - lesson you're going to have a working war card 
game all right let's dive in let's do a quick  
00:13 - recap of what we have so far when we tap on 
the deal button it prints out this deal card  
00:18 - statement down here but what we actually want 
to happen is to randomize and display two new  
00:23 - cards right here right let's dive into the 
code for the button and let's go from there  
00:28 - so we're going to scroll down and this is 
our view code right here you can see this  
00:32 - is our button element and when you tap on it it 
calls this function deal we scroll down a little  
00:38 - further you'll see this is where we've defined 
it and it prints out the cards now what we're  
00:43 - going to do is delete this statement and I'm 
going to add something that's called a comment  
00:48 - or some people will call it documentation 
but essentially it is a little reminder that  
00:53 - you can leave yourself that is not treated as 
code so xcode as you can see when I type this
01:02 - will treat it as this grayed out text and it's 
not going to be treated as code you can just  
01:07 - leave yourself as many notes as you want and 
it's a good way to also uh write out the things  
01:12 - that you're going to code so we can say randomize 
the players card randomize CPUs card and we are  
01:21 - going to let's say update the score right that's 
essentially what we want to happen we when we tap  
01:30 - on this we want to change the cards depending on 
who wins we are going to update this course down  
01:36 - here let's take a look at how we are going to 
change the cards up here we scroll up a little  
01:41 - bit and we take a look at our view code we can 
see that we have an image element representing  
01:47 - the player's card right here and another image 
element representing the CPU card you can see  
01:53 - uh the card that is shown is driven by these two 
variables up here player card and CPU card scroll  
02:01 - up here that is exactly where these things are 
this string card seven represents that this card  
02:09 - 13 represents that and these are two variables now 
one thing I haven't taught you yet is something  
02:15 - that's called the struct this is sort of an aside 
so you don't really need to know this yet but in  
02:21 - the next module we'll talk about what a struct 
is and these are actually um what you know as  
02:27 - variables when they are declared inside a struct 
like this this is actually also called a property  
02:33 - but we will we will get there later so for now 
you can think of them still as variables now I  
02:40 - want to point out one thing if you notice the the 
way that we've named these card assets here we  
02:46 - go into our asset Library they all have the word 
lowercase card followed by a number from 2 to 14.  
02:53 - and the reason why I named it this way is because 
it's going to make us really easy to randomize and  
03:01 - choose new cards when we tap on the deal button 
because all we have to do is let's say we wanted  
03:06 - to change the player card right is represented 
by this variable right here all we have to do  
03:11 - is change this to card and then a random number 
from 2 to 14. and there is a function a built-in  
03:19 - function that we can use that would randomly pick 
a number from whatever range we want so I'll show  
03:24 - you how to do that but essentially when we tap on 
the deal button all we're going to do is assign  
03:30 - card the string followed by a random number from 
2 to 14. and we're going to do that for player  
03:37 - card and CPU card and when we change the strings 
in these two variables it is automatically going  
03:43 - to be picked up by this image element here these 
two image elements and then you'll see new cards  
03:48 - all right so let's go ahead and do that so we're 
going to go back down to the deal button here  
03:56 - and let me show you what we want to do so first 
of all player card right so player card equals  
04:01 - remember this is referencing the variable 
up at the top equal is we're going to assign  
04:08 - something new into it we're going to type in 
this word uh the string card and then we are  
04:15 - going to attach to it a random number from 
2 to 14. now we can use the plus symbol to  
04:24 - join together two strings so I can do something 
like this right and that would essentially be  
04:30 - one string card seven this is called string 
concatenation ignore the air for now now I  
04:38 - don't really want to put seven right I want 
this to be a random number so instead of  
04:44 - attaching the string seven I am going to type in 
int Dot random right when you do that capital i  
04:55 - Dot and then R you get gonna get this and we're 
gonna use this first one right here this first  
05:01 - function and this is going to allow us to specify 
a range and how we specify our range is uh we put  
05:09 - in the lower range followed by three dots and 
then the upper range and this will be inclusive  
05:13 - of the lower and upper ranges so essentially 
this this function this random function  
05:21 - of int gives us 2 to 14. now you won't understand 
exactly what this code means for now but in the  
05:30 - next module after I teach you about structs and 
classes and things like that and Dot notation  
05:36 - this will completely make sense to you for now 
just type in in capital I int dot random uh  
05:43 - and then type in this range now you're going to 
get an error here and the reason why this error  
05:49 - is occurring is for one there's two errors here 
actually the first error is because when you're  
05:54 - trying to join do that string concatenation I 
was telling you about it has to be two strings  
06:00 - right here we have the card string but here we 
have an integer data type they're different data  
06:06 - types remember way back then you learned 
about data types how we have string into  
06:10 - Bool double and things like that well this 
random number is actually an INT so what we  
06:17 - can do is get the string representation 
of the int essentially we are converting  
06:24 - or the proper term in app development and 
programming is called casting we're going  
06:30 - to cast the int data to a piece of string 
data so then it becomes the right type and  
06:38 - we do that by typing in string and then wrapping 
the INT in a pair of parentheses right there so  
06:47 - now this would actually be proper and this now is 
actually another error so now you can see that the  
06:57 - error that little red underline is on the variable 
player card so remember if I scroll all the way  
07:04 - back up to the top remember how I said that when 
these variables are declared under the struct  
07:11 - like this this is called a property well we're 
going to learn more about structs and properties  
07:16 - in the next module but what we need to do here is 
essentially add a special keyword to this property  
07:24 - or variable to Define it as something that 
powers the user interface like it's a piece of  
07:32 - data that the user interface depends on and that 
totally makes sense right if you look down here  
07:40 - this image element right here depends on player 
card same thing with this one this image element  
07:49 - which is you know visually represented here it 
depends on the state of this variable or property  
07:57 - right here so depending on the state of these two 
variables it changes how the user interface looks  
08:05 - so what we have to do is add a special keyword 
in front of both of these called state right  
08:12 - and the way we specify this is using the at 
keyword capital s State space so you can see  
08:20 - xcode recognizes it as a special keyword 
and this is called a property wrapper so  
08:28 - this is your property and this is the 
property wrapper and it essentially  
08:34 - changes the behavior in attributes kind of 
like a modifier it modifies this property to  
08:43 - um just indicate that it is a special 
property right it is one that powers  
08:50 - the visual state so we're going to add 
the same keyword or property wrapper  
08:56 - to the um to the CPU card down here and then if 
we scroll down back to the deal button you can  
09:05 - see that all the errors are gone and we're gonna 
now we're going to randomize the CPU card as well  
09:14 - card plus and then we are going to say int random
09:21 - 2 to 14. all right and then we're going to have 
to I'll show you this error because last time I  
09:28 - don't think we took a look at it so here cannot 
convert value of int to expected type string  
09:36 - saying that this should be a string so we're 
going to turn it into a string all right no  
09:42 - errors perfect so let's take a look at this 
we'll run it and we'll try it out because we  
09:48 - should be able to visually see these cards change 
as we tap on this deal button it's going to run  
09:54 - this function it's going to assign a random card 
number two player card and then CPU card as well  
10:03 - so you see that that's really cool right it's 
actually working now if you accidentally specified  
10:09 - a number that doesn't exist like these actually 
have to represent an image asset so if you put  
10:16 - 15 and you hit deal and it randomizes the 15 it 
either will show a blank let's randomize from  
10:24 - one to one and you can see what I mean because 
we don't actually have card one here so it's  
10:29 - gonna be an error it's not going to be valid 
we have to stop the project and run it again  
10:35 - and uh yeah there you go it can't find that 
image because randomizing one to one you're only  
10:42 - going to get card one and there is no image asset 
named card one so just a little warning for that  
10:47 - okay so let's change that command R to run it 
again now we get this okay now we need to add  
10:55 - some conditional logic to the app this means 
code that can decide if this condition is true  
11:00 - then do this otherwise if that condition is 
true do that and in Swift this is called an  
11:06 - if statement let me show you how so here I have 
an empty playground to show you how simple it is  
11:11 - to express conditional logic in Swift and 
all you have to do is use the keyword if  
11:17 - just like that and next you're going to put up 
space and then you're going to put the condition  
11:22 - that you want to test now with an if statement it 
is if the condition is true then execute this code  
11:31 - and if it's not true then don't do anything 
so why don't we say if a is greater than b  
11:39 - that's my condition so if that is true 
then execute the following code and  
11:45 - you put that code inside a pair of curly 
brackets like that so I'm going to write  
11:50 - a comment some code here like it's whatever you 
want as many lines of code as you want you can  
11:58 - even call a function here or do anything like 
that so we are simply going to print let's say  
12:07 - thing now what does a and what is B in this 
condition we haven't declared them so let's  
12:13 - declare two variables so VAR a equals 4 VAR 
b equals 5. so actually why don't we make  
12:25 - B shorter or smaller so this condition becomes 
true right a is4 it's greater than b is 2 right  
12:35 - that is true so this will get executed it 
will go into this the code block let's run  
12:41 - the playground and see if that actually is true 
let's click this button to open up the console  
12:50 - and you can see that it gets printed out right 
here now what if I changed B to 20 and let's  
12:57 - stop the playground let's run it again and you'll 
see that this time nothing gets this displayed  
13:03 - because it comes down here and it tests this 
condition it finds out this condition is false  
13:08 - then it's not going to run this code now the 
powerful thing with if statements is that you  
13:13 - can specify multiple paths or multiple branches so 
if you think about this condition in this block of  
13:22 - code being One path that it could go down you 
could also specify another you could say uh  
13:30 - else if and again you specify the condition here 
and then another block of code so let's say if  
13:41 - um or you know if B is yeah let's let's use 
another variable so if let's say if B is greater  
13:50 - than C then do this uh so we'll print shoot we 
don't have a c yet let's go see there let's put  
14:06 - C is equal to 10. so in this case what's going to 
happen it's going to first execute this right and  
14:15 - is it going to be true or false a is 4 B is 20. 
this is false then if this is false it's going to  
14:24 - skip this and it's going to test this else right 
else means like okay if that's not true then what  
14:31 - about this right else if this is true B 20 C is 
10 it is true so it's going to then come in here
14:43 - so it does this instead now what if C was 30 .  
14:51 - let's run it can you guess what happens you 
pause the video and take a guess if you want  
14:56 - nothing happens why because it comes in here this 
is false okay well let's test this one this is  
15:02 - also false so it doesn't go into either path 
now what happens if I did this what if C is 10  
15:12 - right so it's gonna this is false and this is true 
right it's going to come in here but then I change  
15:18 - a to 40. right so this becomes true do you think 
it's gonna type out bang and then type out shoot
15:29 - nope it's only going to take the path that 
is true the first path that is true and it  
15:35 - goes it checks the conditions from top to 
bottom so test this one oh that is true 40  
15:41 - is greater than 20 so it's going to come into 
this path and it's going to ignore everything  
15:45 - else it's just gonna not gonna even check 
the other paths so that's why you have that  
15:49 - even though both of these conditions are 
true so the thing is you can specify more  
15:54 - branches if you'd like you can see else 
if as many different paths as you want
16:02 - and then there is also a catch all 
or sort of like a last resort path  
16:07 - if you want to do that and that is 
just simply else so if this is not  
16:13 - true and this is not true then it's just 
going to execute this whatever's in here
16:22 - so if I run this it's gonna come in here because 
this is true so let's change a back to four so  
16:30 - this is going to be false right 4 is not greater 
than 20 and then let's change C to um 40. so again  
16:40 - this will be also false 20 is not greater than 
40. and so it's going to come down here and it's  
16:47 - going to execute this and this is sort of like 
a last resort you could have something like this  
16:53 - the else if and else these two Clauses are 
completely optional you can only have one  
17:00 - else catch all path but you can have as many 
else if paths or branches that you'd like  
17:07 - so in this case it would execute hello because 
this is false then it just comes down here so  
17:14 - hopefully that makes a lot of sense pretty 
simple to understand and in terms of testing  
17:19 - for uh equality here's greater than there's 
less than and then you can do less than an  
17:25 - equal to or greater than and equal to you 
can do not equals that's that's exclamation  
17:31 - mark equals and if you want to test for equality 
it's not equals because remember the equal symbol  
17:38 - is for assigning something to something so here 
we're assigning four to eight we're sine 20 to B  
17:45 - so here we're not trying to assign B to 
a we're just trying to test that they're  
17:49 - equal if you're trying to test if two 
things are equal you use equals equals
17:55 - like that and so if we make a equal to B so 
that will be true we'll see Bang all right  
18:04 - now let's apply our Newfound knowledge to the 
war card game let's do it so back in our work  
18:10 - hard game in the deal function here we want to 
update the scores so we can use if statements  
18:16 - we want to say if the player score or card value 
is higher than the CPU card value then we want to  
18:23 - increase the player score else if the CPU card or 
card value is greater than the player card value  
18:31 - then we want to update the CPU score and if you 
scroll all the way back up here you'll see that  
18:38 - we have two properties variables keeping track 
of the player score and CPU score so we're just  
18:45 - going to increment this by one depending on Whose 
card value is higher so going back down here we're  
18:53 - going to use the if statement if and then we're 
going to compare player card value with CPU card  
19:02 - value and how do we get the card value because 
if you take a look at this we're randomizing the  
19:08 - number here I've strategically chosen the numbers 
uh so that they represent the card image asset  
19:16 - but they also represent the card value so down 
here card two two is smaller than any of these  
19:24 - numbers right so Ace that's why I made it 14 
because Ace should be the biggest so if someone  
19:30 - randomizes an ace that would be 14 and that would 
beat 13 which is king So what we need to do is be  
19:36 - to be able to compare this random number with 
this random number so we need a reference to it  
19:44 - right but how do we get a reference to that number 
because I've specified it here and it's going to  
19:51 - get joined together with this card so I can't 
actually refer to it so the strategy we're going  
19:56 - to use is to instead of randomizing it here let's 
randomize a number from 2 to 14 and assign it to  
20:03 - a variable and that way we have a reference to 
it right it goes back to that first Swift coding  
20:10 - lesson you did a couple lessons back about using 
variables to keep track of values so here we are  
20:16 - going to declare a new value let's call it player 
card value and we are going to assign to it this
20:28 - all right so we're going to randomize that 
number from 2 to 14 and we're going to assign  
20:31 - it into this variable and then in here we can 
specify that variable right there right and turn  
20:39 - it into a string because this is an integer 
right that's going to get assigned to this  
20:43 - and then we're going to do the same thing 
with this CPU VAR CPU card value is equal to
20:56 - CPU card value and then we're gonna now be able 
to write our if statement so if player card value  
21:06 - is greater than CPU card value then we're going to  
21:12 - add one to player score and to do that we can 
say player score and that's the the variable  
21:21 - that we have way up at the top of this file we 
can do this we can say um Plus or sorry equals  
21:31 - player score plus one but there's a short 
form where you can write this which is this
21:40 - plus equals one and that is just going to 
increment whatever score it is with one  
21:47 - okay so we're going to do it the shorthand way  
21:52 - and just like before we have an error because 
remember player score is a piece of data that  
21:59 - the user interface is dependent on right 
it gets displayed in this text label right  
22:04 - here you can see um right here this text and 
this this text right here so what we have to  
22:11 - do is add that State Property wrapper to it just 
like we did with the player card in the CPU card
22:21 - all right now we're going to come back down and 
no error so down here would I add an else or an  
22:31 - else if if I want to now compare right if the CPU 
card value is greater than the player card value  
22:39 - now I could use if and I can say 
you know in that case CPU score  
22:47 - with plus equals one but there's a problem with 
this because this is comparing player card is  
22:54 - greater than CPU card what if player card value 
equals CPU card value what if they rolled exactly  
23:01 - the same value in this logic the CPU would win 
even if the values were tied up right so I I  
23:10 - would not use else here I would use else if CPU 
card value is uh greater than player card value  
23:19 - and then you can say else this is a tie right 
and then you can handle this how you want  
23:27 - so in this case this would be like add one two CPU 
score you see how handy adding these comments are  
23:34 - it really makes it a lot easier to understand 
your code especially for someone who is new and  
23:40 - learning how to code um yeah so for this Thai 
scenario you can you can add one to each score  
23:49 - you can minus one from each score or you can 
do nothing so I'm gonna choose to do nothing  
23:54 - but you can do that differently so let's 
see if this works let's run our project
24:03 - oh what happened there I rolled a card
24:09 - ah take a look I made a mistake this is a 
perfect learning opportunity so um right here  
24:21 - player card is equal to card Plus player card 
but that doesn't make sense right it should be  
24:31 - equal to player card value right because this 
is the random number so I don't know if you  
24:36 - caught that earlier on when I was writing 
that but uh if you did kudos to you props  
24:43 - um but if you didn't then you're in the same 
boat as me I totally didn't see that either
24:51 - so you can see it works now 
well I'm going a little fast but  
24:54 - Ace so player gets that oh it's a tie 
see there's a time so nothing happens
25:02 - all right looks like it's working and there's 
actually more ties than I thought there would  
25:06 - be there was another one and there you have it 
you've built your very first app now before I  
25:11 - tell you what you'll be building next let's 
do a quick recap of how far you've come you  
25:16 - learned your way around xcode and how to use 
it to build app user interfaces and also how  
25:22 - to express logic with Swift Code you also 
learn how to translate an app design into a  
25:27 - user interface and how to handle user interaction 
with buttons and you learn some basic Swift coding  
25:33 - so where do you go from here well in the next 
video series I'm going to be teaching you  
25:38 - how to build this and what are the different 
components of an app and how do they talk to  
25:43 - each other to make the whole system work we're 
going to be diving down into more detail about  
25:48 - that now although this next video series is 
also free to learn from it's going to be only  
25:54 - hosted on our code with Chris learning platform 
all you need to do is create a free account and  
25:59 - you'll get access to it simply click over here 
for instructions on how to get module 2 and I'll  
26:04 - also leave a link in the description below 
you're doing an amazing job so far I can't  
26:08 - wait to see you in module 2 where we're going to 
take your skills even further I'll see you there

Cleaned transcript:

this is the final lesson we're going to implement the app logic to randomize the cards whenever we tap on the deal button and we're going to update the scores as well by the end of this lesson you're going to have a working war card game all right let's dive in let's do a quick recap of what we have so far when we tap on the deal button it prints out this deal card statement down here but what we actually want to happen is to randomize and display two new cards right here right let's dive into the code for the button and let's go from there so we're going to scroll down and this is our view code right here you can see this is our button element and when you tap on it it calls this function deal we scroll down a little further you'll see this is where we've defined it and it prints out the cards now what we're going to do is delete this statement and I'm going to add something that's called a comment or some people will call it documentation but essentially it is a little reminder that you can leave yourself that is not treated as code so xcode as you can see when I type this will treat it as this grayed out text and it's not going to be treated as code you can just leave yourself as many notes as you want and it's a good way to also uh write out the things that you're going to code so we can say randomize the players card randomize CPUs card and we are going to let's say update the score right that's essentially what we want to happen we when we tap on this we want to change the cards depending on who wins we are going to update this course down here let's take a look at how we are going to change the cards up here we scroll up a little bit and we take a look at our view code we can see that we have an image element representing the player's card right here and another image element representing the CPU card you can see uh the card that is shown is driven by these two variables up here player card and CPU card scroll up here that is exactly where these things are this string card seven represents that this card 13 represents that and these are two variables now one thing I haven't taught you yet is something that's called the struct this is sort of an aside so you don't really need to know this yet but in the next module we'll talk about what a struct is and these are actually um what you know as variables when they are declared inside a struct like this this is actually also called a property but we will we will get there later so for now you can think of them still as variables now I want to point out one thing if you notice the the way that we've named these card assets here we go into our asset Library they all have the word lowercase card followed by a number from 2 to 14. and the reason why I named it this way is because it's going to make us really easy to randomize and choose new cards when we tap on the deal button because all we have to do is let's say we wanted to change the player card right is represented by this variable right here all we have to do is change this to card and then a random number from 2 to 14. and there is a function a builtin function that we can use that would randomly pick a number from whatever range we want so I'll show you how to do that but essentially when we tap on the deal button all we're going to do is assign card the string followed by a random number from 2 to 14. and we're going to do that for player card and CPU card and when we change the strings in these two variables it is automatically going to be picked up by this image element here these two image elements and then you'll see new cards all right so let's go ahead and do that so we're going to go back down to the deal button here and let me show you what we want to do so first of all player card right so player card equals remember this is referencing the variable up at the top equal is we're going to assign something new into it we're going to type in this word uh the string card and then we are going to attach to it a random number from 2 to 14. now we can use the plus symbol to join together two strings so I can do something like this right and that would essentially be one string card seven this is called string concatenation ignore the air for now now I don't really want to put seven right I want this to be a random number so instead of attaching the string seven I am going to type in int Dot random right when you do that capital i Dot and then R you get gonna get this and we're gonna use this first one right here this first function and this is going to allow us to specify a range and how we specify our range is uh we put in the lower range followed by three dots and then the upper range and this will be inclusive of the lower and upper ranges so essentially this this function this random function of int gives us 2 to 14. now you won't understand exactly what this code means for now but in the next module after I teach you about structs and classes and things like that and Dot notation this will completely make sense to you for now just type in in capital I int dot random uh and then type in this range now you're going to get an error here and the reason why this error is occurring is for one there's two errors here actually the first error is because when you're trying to join do that string concatenation I was telling you about it has to be two strings right here we have the card string but here we have an integer data type they're different data types remember way back then you learned about data types how we have string into Bool double and things like that well this random number is actually an INT so what we can do is get the string representation of the int essentially we are converting or the proper term in app development and programming is called casting we're going to cast the int data to a piece of string data so then it becomes the right type and we do that by typing in string and then wrapping the INT in a pair of parentheses right there so now this would actually be proper and this now is actually another error so now you can see that the error that little red underline is on the variable player card so remember if I scroll all the way back up to the top remember how I said that when these variables are declared under the struct like this this is called a property well we're going to learn more about structs and properties in the next module but what we need to do here is essentially add a special keyword to this property or variable to Define it as something that powers the user interface like it's a piece of data that the user interface depends on and that totally makes sense right if you look down here this image element right here depends on player card same thing with this one this image element which is you know visually represented here it depends on the state of this variable or property right here so depending on the state of these two variables it changes how the user interface looks so what we have to do is add a special keyword in front of both of these called state right and the way we specify this is using the at keyword capital s State space so you can see xcode recognizes it as a special keyword and this is called a property wrapper so this is your property and this is the property wrapper and it essentially changes the behavior in attributes kind of like a modifier it modifies this property to um just indicate that it is a special property right it is one that powers the visual state so we're going to add the same keyword or property wrapper to the um to the CPU card down here and then if we scroll down back to the deal button you can see that all the errors are gone and we're gonna now we're going to randomize the CPU card as well card plus and then we are going to say int random 2 to 14. all right and then we're going to have to I'll show you this error because last time I don't think we took a look at it so here cannot convert value of int to expected type string saying that this should be a string so we're going to turn it into a string all right no errors perfect so let's take a look at this we'll run it and we'll try it out because we should be able to visually see these cards change as we tap on this deal button it's going to run this function it's going to assign a random card number two player card and then CPU card as well so you see that that's really cool right it's actually working now if you accidentally specified a number that doesn't exist like these actually have to represent an image asset so if you put 15 and you hit deal and it randomizes the 15 it either will show a blank let's randomize from one to one and you can see what I mean because we don't actually have card one here so it's gonna be an error it's not going to be valid we have to stop the project and run it again and uh yeah there you go it can't find that image because randomizing one to one you're only going to get card one and there is no image asset named card one so just a little warning for that okay so let's change that command R to run it again now we get this okay now we need to add some conditional logic to the app this means code that can decide if this condition is true then do this otherwise if that condition is true do that and in Swift this is called an if statement let me show you how so here I have an empty playground to show you how simple it is to express conditional logic in Swift and all you have to do is use the keyword if just like that and next you're going to put up space and then you're going to put the condition that you want to test now with an if statement it is if the condition is true then execute this code and if it's not true then don't do anything so why don't we say if a is greater than b that's my condition so if that is true then execute the following code and you put that code inside a pair of curly brackets like that so I'm going to write a comment some code here like it's whatever you want as many lines of code as you want you can even call a function here or do anything like that so we are simply going to print let's say thing now what does a and what is B in this condition we haven't declared them so let's declare two variables so VAR a equals 4 VAR b equals 5. so actually why don't we make B shorter or smaller so this condition becomes true right a is4 it's greater than b is 2 right that is true so this will get executed it will go into this the code block let's run the playground and see if that actually is true let's click this button to open up the console and you can see that it gets printed out right here now what if I changed B to 20 and let's stop the playground let's run it again and you'll see that this time nothing gets this displayed because it comes down here and it tests this condition it finds out this condition is false then it's not going to run this code now the powerful thing with if statements is that you can specify multiple paths or multiple branches so if you think about this condition in this block of code being One path that it could go down you could also specify another you could say uh else if and again you specify the condition here and then another block of code so let's say if um or you know if B is yeah let's let's use another variable so if let's say if B is greater than C then do this uh so we'll print shoot we don't have a c yet let's go see there let's put C is equal to 10. so in this case what's going to happen it's going to first execute this right and is it going to be true or false a is 4 B is 20. this is false then if this is false it's going to skip this and it's going to test this else right else means like okay if that's not true then what about this right else if this is true B 20 C is 10 it is true so it's going to then come in here so it does this instead now what if C was 30 . let's run it can you guess what happens you pause the video and take a guess if you want nothing happens why because it comes in here this is false okay well let's test this one this is also false so it doesn't go into either path now what happens if I did this what if C is 10 right so it's gonna this is false and this is true right it's going to come in here but then I change a to 40. right so this becomes true do you think it's gonna type out bang and then type out shoot nope it's only going to take the path that is true the first path that is true and it goes it checks the conditions from top to bottom so test this one oh that is true 40 is greater than 20 so it's going to come into this path and it's going to ignore everything else it's just gonna not gonna even check the other paths so that's why you have that even though both of these conditions are true so the thing is you can specify more branches if you'd like you can see else if as many different paths as you want and then there is also a catch all or sort of like a last resort path if you want to do that and that is just simply else so if this is not true and this is not true then it's just going to execute this whatever's in here so if I run this it's gonna come in here because this is true so let's change a back to four so this is going to be false right 4 is not greater than 20 and then let's change C to um 40. so again this will be also false 20 is not greater than 40. and so it's going to come down here and it's going to execute this and this is sort of like a last resort you could have something like this the else if and else these two Clauses are completely optional you can only have one else catch all path but you can have as many else if paths or branches that you'd like so in this case it would execute hello because this is false then it just comes down here so hopefully that makes a lot of sense pretty simple to understand and in terms of testing for uh equality here's greater than there's less than and then you can do less than an equal to or greater than and equal to you can do not equals that's that's exclamation mark equals and if you want to test for equality it's not equals because remember the equal symbol is for assigning something to something so here we're assigning four to eight we're sine 20 to B so here we're not trying to assign B to a we're just trying to test that they're equal if you're trying to test if two things are equal you use equals equals like that and so if we make a equal to B so that will be true we'll see Bang all right now let's apply our Newfound knowledge to the war card game let's do it so back in our work hard game in the deal function here we want to update the scores so we can use if statements we want to say if the player score or card value is higher than the CPU card value then we want to increase the player score else if the CPU card or card value is greater than the player card value then we want to update the CPU score and if you scroll all the way back up here you'll see that we have two properties variables keeping track of the player score and CPU score so we're just going to increment this by one depending on Whose card value is higher so going back down here we're going to use the if statement if and then we're going to compare player card value with CPU card value and how do we get the card value because if you take a look at this we're randomizing the number here I've strategically chosen the numbers uh so that they represent the card image asset but they also represent the card value so down here card two two is smaller than any of these numbers right so Ace that's why I made it 14 because Ace should be the biggest so if someone randomizes an ace that would be 14 and that would beat 13 which is king So what we need to do is be to be able to compare this random number with this random number so we need a reference to it right but how do we get a reference to that number because I've specified it here and it's going to get joined together with this card so I can't actually refer to it so the strategy we're going to use is to instead of randomizing it here let's randomize a number from 2 to 14 and assign it to a variable and that way we have a reference to it right it goes back to that first Swift coding lesson you did a couple lessons back about using variables to keep track of values so here we are going to declare a new value let's call it player card value and we are going to assign to it this all right so we're going to randomize that number from 2 to 14 and we're going to assign it into this variable and then in here we can specify that variable right there right and turn it into a string because this is an integer right that's going to get assigned to this and then we're going to do the same thing with this CPU VAR CPU card value is equal to CPU card value and then we're gonna now be able to write our if statement so if player card value is greater than CPU card value then we're going to add one to player score and to do that we can say player score and that's the the variable that we have way up at the top of this file we can do this we can say um Plus or sorry equals player score plus one but there's a short form where you can write this which is this plus equals one and that is just going to increment whatever score it is with one okay so we're going to do it the shorthand way and just like before we have an error because remember player score is a piece of data that the user interface is dependent on right it gets displayed in this text label right here you can see um right here this text and this this text right here so what we have to do is add that State Property wrapper to it just like we did with the player card in the CPU card all right now we're going to come back down and no error so down here would I add an else or an else if if I want to now compare right if the CPU card value is greater than the player card value now I could use if and I can say you know in that case CPU score with plus equals one but there's a problem with this because this is comparing player card is greater than CPU card what if player card value equals CPU card value what if they rolled exactly the same value in this logic the CPU would win even if the values were tied up right so I I would not use else here I would use else if CPU card value is uh greater than player card value and then you can say else this is a tie right and then you can handle this how you want so in this case this would be like add one two CPU score you see how handy adding these comments are it really makes it a lot easier to understand your code especially for someone who is new and learning how to code um yeah so for this Thai scenario you can you can add one to each score you can minus one from each score or you can do nothing so I'm gonna choose to do nothing but you can do that differently so let's see if this works let's run our project oh what happened there I rolled a card ah take a look I made a mistake this is a perfect learning opportunity so um right here player card is equal to card Plus player card but that doesn't make sense right it should be equal to player card value right because this is the random number so I don't know if you caught that earlier on when I was writing that but uh if you did kudos to you props um but if you didn't then you're in the same boat as me I totally didn't see that either so you can see it works now well I'm going a little fast but Ace so player gets that oh it's a tie see there's a time so nothing happens all right looks like it's working and there's actually more ties than I thought there would be there was another one and there you have it you've built your very first app now before I tell you what you'll be building next let's do a quick recap of how far you've come you learned your way around xcode and how to use it to build app user interfaces and also how to express logic with Swift Code you also learn how to translate an app design into a user interface and how to handle user interaction with buttons and you learn some basic Swift coding so where do you go from here well in the next video series I'm going to be teaching you how to build this and what are the different components of an app and how do they talk to each other to make the whole system work we're going to be diving down into more detail about that now although this next video series is also free to learn from it's going to be only hosted on our code with Chris learning platform all you need to do is create a free account and you'll get access to it simply click over here for instructions on how to get module 2 and I'll also leave a link in the description below you're doing an amazing job so far I can't wait to see you in module 2 where we're going to take your skills even further I'll see you there
