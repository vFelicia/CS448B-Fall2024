With timestamps:

00:01 - [Music]
00:06 - hello welcome to this lesson where we
00:08 - are going to implement retrieving data
00:10 - from parse into our IOS app right now
00:14 - I'm looking at the parse backend where
00:16 - we saved a couple of messages to um our
00:19 - message table we have howdy and hello
00:23 - and in our xcode project we're going to
00:26 - create a new method to retrieve
00:30 - this data from parse first of all let's
00:33 - go into the documentation
00:36 - here and take a look at retrieving
00:41 - objects right here we have saving
00:43 - objects which is what we went through in
00:45 - the last lesson there's another section
00:48 - for retrieving
00:49 - objects so we get introduced to this
00:53 - class called PF query and let's
00:58 - see change it to Swift
01:02 - first so we create a new query object
01:06 - for a particular class name for us it's
01:09 - going to be message because that's our
01:12 - table right
01:14 - here and then here this method get
01:18 - object in background with ID so what is
01:22 - the ID the ID is something that gets
01:25 - automatically assigned when you insert a
01:28 - row however we don't want to retrieve a
01:31 - single object by specifying its ID and
01:34 - that's the code sample that it gives
01:37 - here uh scrolling a little bit down I
01:39 - didn't see another code sample in this
01:43 - section for retrieving objects uh to
01:46 - demonstrate how to retrieve multiple
01:48 - objects of the same
01:50 - class uh but if we go into
01:54 - xcode we can take a look at the
01:56 - autocomplete methods to see uh what
02:00 - sorts of methods are available with a PF
02:02 - query and actually if we go back
02:06 - into uh the parse documentation here
02:09 - this is the documentation for objects if
02:12 - we go down here for
02:14 - queries and go to basic
02:18 - queries actually this is what we want to
02:21 - look at
02:22 - instead so let's change that to Swift
02:25 - right
02:27 - here uh and here we find that we create
02:31 - a query right for a class name you can
02:34 - specify uh a wear Clause where a certain
02:38 - column would be equal to a certain value
02:40 - if you wanted to and you call this
02:43 - method called find objects in background
02:45 - with block and that will retrieve all of
02:48 - the objects that match this class name
02:51 - and match this criteria where key equals
02:53 - to whatever but we don't have to specify
02:56 - this because we just want all of the
02:58 - message objects so we're going to go
03:01 - back to our xcode
03:04 - project and create a new method in the
03:07 - viewcontroller.swift file I'm going to
03:08 - call it retrieve
03:13 - messages all right and here what we want
03:16 - to do is create a new PF
03:21 - query um call find objects in
03:26 - background okay so VAR query
03:32 - let's explicitly say that it's a PF
03:35 - query create a new PF query object for
03:39 - the class name message which is our
03:42 - table uh and now we're going to say
03:46 - query
03:48 - dot uh find objects and background with
03:53 - block and this block you can doubleclick
03:56 - it this parameter here to expand it
04:01 - uh so the two parameters for this block
04:03 - of code uh there's an array of any
04:06 - object and NS error let's go back to the
04:09 - documentation see what they put here uh
04:12 - they put a labeled called objects for
04:16 - this any object array and error you can
04:19 - put
04:21 - anything in there double click
04:23 - it I'm just going to use what they put
04:27 - as our labels as well double click that
04:32 - and then in here we
04:35 - can Loop through the objects
04:41 - array uh retrieve the text column value
04:48 - of each object and they're PF
04:53 - objects assign it into
04:57 - our messages array
05:00 - what is our messages array if we scroll
05:02 - all the way up
05:03 - here we created a variable up here which
05:07 - is a string which is an array of
05:12 - strings and then in our viewed load
05:14 - method we assigned we appended into it
05:16 - test one test two test
05:18 - three and that's what our table view
05:21 - displays it reads messages array and
05:24 - displays all the strings in there so if
05:27 - we go back to the retrieve messages
05:29 - function what we want to do right we
05:32 - want to Loop through the objects that
05:33 - are returned from the query want to
05:36 - retrieve the value in the text column
05:38 - for each of those objects and we want to
05:40 - assign it into our messages array and
05:42 - then finally reload the table view so
05:46 - that it displays the latest messages
05:48 - from there actually before we do that
05:51 - also we should clear the messages
05:55 - array so uh we don't get duplicate
05:58 - messages you know you're not you're not
06:01 - appending um you're not refreshing the
06:05 - messages and then appending all of the
06:06 - duplicates on there we want to clear all
06:08 - of the messages out of the array and
06:11 - then just have the ones that are
06:12 - returned from the
06:14 - query okay so let's implement this so
06:17 - clear the messages array self. messages
06:21 - array uh just going to assign
06:23 - it a new array
06:27 - object Loop through the objects right so
06:30 - we can use a for Loop here so
06:33 - for message object in
06:38 - objects like that and these two will go
06:43 - into that Loop and after we've looped
06:46 - through all of those message objects
06:48 - then we will reload the table
06:51 - once so retrieve the text column value
06:54 - of each PF object
06:58 - let message
07:01 - text VI a string
07:05 - equals actually it's going to be an
07:07 - optional message
07:11 - object as PF
07:19 - object text why do I have to write it
07:22 - like
07:23 - this let's
07:25 - see any object okay so we got a do
07:32 - that let's do optional casting okay let
07:36 - me explain this line here so I'm
07:38 - creating a new variable called message
07:40 - text it's going to be of string optional
07:43 - type what does optional mean that means
07:46 - that this message text could be nil or
07:49 - it could be an actual string object why
07:52 - could it be nil because I'm not sure
07:55 - what's in this text column of this
07:58 - object now let's explain the part on the
08:01 - right so it's going through the objects
08:04 - array right this is the array that gets
08:07 - return to us from the query and the type
08:10 - of it is an array of any object now any
08:15 - object is essentially what the name
08:17 - applies it could be any object so I have
08:20 - to cast it using this keyword as to tell
08:23 - xcode to treat it as a PF object I know
08:27 - for a fact that the objects that are
08:29 - returned
08:30 - uh with this PF query are all PF objects
08:33 - uh that that's essentially just a parse
08:36 - object so I'm telling xcode to treat
08:39 - this message object as a PF object and
08:43 - then only then can I use the square
08:47 - bracket notation and specify the column
08:50 - uh because that works with PF
08:52 - objects and then it basically gets the
08:56 - value for this column and then I got to
08:58 - tell X code to treat it as a
09:01 - string because xcode doesn't know you
09:04 - know what value comes out of this column
09:07 - we know it's a string so we're going to
09:09 - cast it as a string and why is there a
09:11 - question mark here
09:13 - well this is I declared my variable as
09:17 - an optional string type so using this as
09:21 - question mark will basically make it so
09:23 - that if the value coming out of this
09:26 - text column is not a string it's going
09:28 - to assign nil to my
09:31 - variable and if it is a string then it's
09:34 - going to assign the actual string object
09:35 - into my message text
09:38 - variable so I'm going to say here
09:43 - if message text is not equals to nil
09:47 - which means that there actually is a
09:49 - string object
09:52 - then self. messages
09:56 - array.
09:57 - append the m message text and I have to
10:01 - put an exclamation mark there because
10:03 - message text is an optional value and
10:06 - this exclamation mark will unwrap that
10:09 - optional value to get at the actual
10:11 - object now if this is the first time
10:13 - you've ever heard of optional values and
10:16 - stuff like that it's going to be really
10:18 - confusing for you guys but if you take
10:20 - my beginner course on my site we go in
10:23 - depth into optionals and you're going to
10:25 - get a good grasp on it alternatively you
10:28 - can just Google Swift optionals and I'm
10:31 - sure you can find a lot of text and
10:33 - documentation about what they are as
10:35 - well okay so now this chunk of code
10:38 - basically goes through the returned
10:40 - objects right it takes the
10:43 - text uh column takes the value from that
10:47 - assigns it to a variable called message
10:49 - text and if there's actually text it
10:51 - appends it into our messages array
10:54 - finally here we can call self-thought
10:58 - message table view. reload
11:01 - data and basically this forces the table
11:04 - view to read the messages array again
11:06 - and display all of the strings in
11:11 - there uh finally we got to call this
11:14 - method so let's go up
11:16 - here let's erase this dummy data now we
11:19 - don't need test one test two and test
11:21 - three instead let's say
11:24 - retrieve
11:26 - messages from
11:29 - parse
11:31 - self. retrieve
11:34 - messages okay now let's run
11:39 - it okay so we see something happening
11:42 - and there we go these are the two
11:43 - messages or the two pieces of data in
11:46 - our parse back end right
11:50 - here uh the next thing I'd want to do
11:52 - actually is fix this little margin up
11:55 - here um add some space to the top and
11:58 - actually I want want to uh reload the
12:01 - messages when I add a new
12:04 - one so I'm going to stop the project I'm
12:06 - going to go into the storyboard to add
12:08 - that margin at the top first so here's
12:11 - the table view if I open the
12:15 - constraints I have a vertical space
12:17 - constraint up here and if we go to the
12:19 - right hand side we can see that table
12:21 - view. toop is equal to superview dotop
12:25 - do margin uh and the constant is zero
12:28 - I'm just going to put 20 there
12:30 - adds a little bit of a separation there
12:33 - that should be
12:35 - enough okay I'm going to go back to view
12:37 - controller now and the send button
12:41 - tapped method okay this is where I want
12:46 - to add a call to the retrieve messages
12:51 - so let's take a look create a PF
12:54 - object set the text column to the text
12:58 - in the text field save in the background
13:01 - with block and then if it's successful
13:05 - we have a to-do here retrieve the latest
13:07 - messages and reload the table so here
13:10 - let's just call self. retrieve
13:13 - messages okay so let's run the app now
13:17 - and then following this there's one
13:19 - Improvement to the code which I'm going
13:21 - to show you
13:22 - guys okay so our messages are retrieved
13:25 - from the parse back end with you know
13:28 - that margin or that space at the top I'm
13:31 - going to add a new
13:34 - one let's just put hey
13:38 - send um wow that happened really quick
13:41 - okay so you can see from the console
13:44 - down here that message saved
13:46 - successfully and it also retrieved the
13:48 - latest messages so that we see that
13:52 - here okay so about that
13:55 - Improvement now this may get a little
13:57 - technical for you guys but try to follow
13:58 - along and see if it makes sense now
14:01 - normally your app runs on the main
14:03 - thread now what's a thread think of it
14:05 - as a series of code being executed so
14:10 - when it gets here send button tapped is
14:12 - executing these lines of code uh it's
14:15 - updating the user interface if necessary
14:17 - and it gets to this this one where it
14:19 - says save in background with block now
14:22 - at this point something has to happen in
14:24 - the background while the main thread
14:26 - continues going to update the UI or
14:29 - respond to user events or whatever so
14:31 - what it does is it spawns a new
14:34 - thread that will happen in parallel and
14:38 - that thread that gets dispatched or that
14:41 - parallel thread that gets spawned will
14:44 - execute this code you know when the time
14:47 - comes but what's really bad is to update
14:51 - the UI from that spawned thread you only
14:54 - want to update the UI and UI means user
14:57 - interface you only want to update the UI
15:00 - from the main thread and so what we can
15:02 - do you can see here in this code that's
15:06 - going to be run by that spawned thread
15:09 - we're updating the UI with this code
15:11 - right
15:12 - here and then we're calling retrieve
15:17 - messages and in this code it's going to
15:20 - start a new thread it's going to run
15:22 - this code right here and it's going to
15:24 - call reload data for the table View and
15:27 - that's going to update the UR
15:29 - so those two places right here you know
15:32 - where we're
15:33 - enabling uh the text fields and this
15:37 - part right here where we're loading the
15:39 - data we want to run those on the main
15:40 - thread
15:42 - instead and there's actually a way we
15:44 - can do
15:47 - that this is what we're going to do
15:52 - here there's something called dispatch
15:55 - async where we can specify a q
16:00 - and we're going to say dispatch get main
16:09 - q and put that UI code that code that
16:13 - updates the UI we're going to put it in
16:15 - there and so you know this code gets
16:19 - dispatched to a parallel
16:23 - thread uh but it's going to run this
16:25 - code on the main queue or on the main
16:28 - thread when it can
16:30 - so we're going to do the same thing in
16:32 - retrieve messages just before it reloads
16:34 - the table
16:43 - here
16:52 - oops like
16:56 - that okay
16:59 - so let's run it again in our case even
17:01 - when we didn't have that dispatch async
17:05 - to the main thread uh we still saw the
17:08 - uh UI update but if you were doing a lot
17:11 - of work there you would actually um see
17:14 - the UI freeze and that's not a good
17:16 - thing so let's type
17:21 - in
17:23 - yo
17:25 - send okay so there it goes you don't
17:29 - even notice a difference because we're
17:30 - not doing too much work here but that's
17:32 - a good practice to
17:34 - follow all right so we've got a very
17:37 - very very basic messaging app here that
17:41 - sends messages to our parse back end
17:44 - let's refresh the data
17:47 - here and retrieves those messages and
17:51 - that data back into our IOS app now this
17:55 - demonstrates how to use parse as a
17:57 - backend and database
17:59 - for your
18:01 - app if your app were more complex or if
18:04 - this chat app were more complex we could
18:07 - have a users table you know where you
18:10 - would actually create a user account and
18:12 - so the messages could be tagged to a
18:15 - specific user uh your queries would be
18:18 - more complex because you would maybe
18:20 - retrieve messages from only particular
18:23 - users but I hope this simple demo serves
18:26 - as a starting point for you to dig
18:27 - deeper into Parson and find out all it
18:29 - has to offer all right thanks for
18:32 - watching and I'll see you guys next time
18:34 - [Music]

Cleaned transcript:

hello welcome to this lesson where we are going to implement retrieving data from parse into our IOS app right now I'm looking at the parse backend where we saved a couple of messages to um our message table we have howdy and hello and in our xcode project we're going to create a new method to retrieve this data from parse first of all let's go into the documentation here and take a look at retrieving objects right here we have saving objects which is what we went through in the last lesson there's another section for retrieving objects so we get introduced to this class called PF query and let's see change it to Swift first so we create a new query object for a particular class name for us it's going to be message because that's our table right here and then here this method get object in background with ID so what is the ID the ID is something that gets automatically assigned when you insert a row however we don't want to retrieve a single object by specifying its ID and that's the code sample that it gives here uh scrolling a little bit down I didn't see another code sample in this section for retrieving objects uh to demonstrate how to retrieve multiple objects of the same class uh but if we go into xcode we can take a look at the autocomplete methods to see uh what sorts of methods are available with a PF query and actually if we go back into uh the parse documentation here this is the documentation for objects if we go down here for queries and go to basic queries actually this is what we want to look at instead so let's change that to Swift right here uh and here we find that we create a query right for a class name you can specify uh a wear Clause where a certain column would be equal to a certain value if you wanted to and you call this method called find objects in background with block and that will retrieve all of the objects that match this class name and match this criteria where key equals to whatever but we don't have to specify this because we just want all of the message objects so we're going to go back to our xcode project and create a new method in the viewcontroller.swift file I'm going to call it retrieve messages all right and here what we want to do is create a new PF query um call find objects in background okay so VAR query let's explicitly say that it's a PF query create a new PF query object for the class name message which is our table uh and now we're going to say query dot uh find objects and background with block and this block you can doubleclick it this parameter here to expand it uh so the two parameters for this block of code uh there's an array of any object and NS error let's go back to the documentation see what they put here uh they put a labeled called objects for this any object array and error you can put anything in there double click it I'm just going to use what they put as our labels as well double click that and then in here we can Loop through the objects array uh retrieve the text column value of each object and they're PF objects assign it into our messages array what is our messages array if we scroll all the way up here we created a variable up here which is a string which is an array of strings and then in our viewed load method we assigned we appended into it test one test two test three and that's what our table view displays it reads messages array and displays all the strings in there so if we go back to the retrieve messages function what we want to do right we want to Loop through the objects that are returned from the query want to retrieve the value in the text column for each of those objects and we want to assign it into our messages array and then finally reload the table view so that it displays the latest messages from there actually before we do that also we should clear the messages array so uh we don't get duplicate messages you know you're not you're not appending um you're not refreshing the messages and then appending all of the duplicates on there we want to clear all of the messages out of the array and then just have the ones that are returned from the query okay so let's implement this so clear the messages array self. messages array uh just going to assign it a new array object Loop through the objects right so we can use a for Loop here so for message object in objects like that and these two will go into that Loop and after we've looped through all of those message objects then we will reload the table once so retrieve the text column value of each PF object let message text VI a string equals actually it's going to be an optional message object as PF object text why do I have to write it like this let's see any object okay so we got a do that let's do optional casting okay let me explain this line here so I'm creating a new variable called message text it's going to be of string optional type what does optional mean that means that this message text could be nil or it could be an actual string object why could it be nil because I'm not sure what's in this text column of this object now let's explain the part on the right so it's going through the objects array right this is the array that gets return to us from the query and the type of it is an array of any object now any object is essentially what the name applies it could be any object so I have to cast it using this keyword as to tell xcode to treat it as a PF object I know for a fact that the objects that are returned uh with this PF query are all PF objects uh that that's essentially just a parse object so I'm telling xcode to treat this message object as a PF object and then only then can I use the square bracket notation and specify the column uh because that works with PF objects and then it basically gets the value for this column and then I got to tell X code to treat it as a string because xcode doesn't know you know what value comes out of this column we know it's a string so we're going to cast it as a string and why is there a question mark here well this is I declared my variable as an optional string type so using this as question mark will basically make it so that if the value coming out of this text column is not a string it's going to assign nil to my variable and if it is a string then it's going to assign the actual string object into my message text variable so I'm going to say here if message text is not equals to nil which means that there actually is a string object then self. messages array. append the m message text and I have to put an exclamation mark there because message text is an optional value and this exclamation mark will unwrap that optional value to get at the actual object now if this is the first time you've ever heard of optional values and stuff like that it's going to be really confusing for you guys but if you take my beginner course on my site we go in depth into optionals and you're going to get a good grasp on it alternatively you can just Google Swift optionals and I'm sure you can find a lot of text and documentation about what they are as well okay so now this chunk of code basically goes through the returned objects right it takes the text uh column takes the value from that assigns it to a variable called message text and if there's actually text it appends it into our messages array finally here we can call selfthought message table view. reload data and basically this forces the table view to read the messages array again and display all of the strings in there uh finally we got to call this method so let's go up here let's erase this dummy data now we don't need test one test two and test three instead let's say retrieve messages from parse self. retrieve messages okay now let's run it okay so we see something happening and there we go these are the two messages or the two pieces of data in our parse back end right here uh the next thing I'd want to do actually is fix this little margin up here um add some space to the top and actually I want want to uh reload the messages when I add a new one so I'm going to stop the project I'm going to go into the storyboard to add that margin at the top first so here's the table view if I open the constraints I have a vertical space constraint up here and if we go to the right hand side we can see that table view. toop is equal to superview dotop do margin uh and the constant is zero I'm just going to put 20 there adds a little bit of a separation there that should be enough okay I'm going to go back to view controller now and the send button tapped method okay this is where I want to add a call to the retrieve messages so let's take a look create a PF object set the text column to the text in the text field save in the background with block and then if it's successful we have a todo here retrieve the latest messages and reload the table so here let's just call self. retrieve messages okay so let's run the app now and then following this there's one Improvement to the code which I'm going to show you guys okay so our messages are retrieved from the parse back end with you know that margin or that space at the top I'm going to add a new one let's just put hey send um wow that happened really quick okay so you can see from the console down here that message saved successfully and it also retrieved the latest messages so that we see that here okay so about that Improvement now this may get a little technical for you guys but try to follow along and see if it makes sense now normally your app runs on the main thread now what's a thread think of it as a series of code being executed so when it gets here send button tapped is executing these lines of code uh it's updating the user interface if necessary and it gets to this this one where it says save in background with block now at this point something has to happen in the background while the main thread continues going to update the UI or respond to user events or whatever so what it does is it spawns a new thread that will happen in parallel and that thread that gets dispatched or that parallel thread that gets spawned will execute this code you know when the time comes but what's really bad is to update the UI from that spawned thread you only want to update the UI and UI means user interface you only want to update the UI from the main thread and so what we can do you can see here in this code that's going to be run by that spawned thread we're updating the UI with this code right here and then we're calling retrieve messages and in this code it's going to start a new thread it's going to run this code right here and it's going to call reload data for the table View and that's going to update the UR so those two places right here you know where we're enabling uh the text fields and this part right here where we're loading the data we want to run those on the main thread instead and there's actually a way we can do that this is what we're going to do here there's something called dispatch async where we can specify a q and we're going to say dispatch get main q and put that UI code that code that updates the UI we're going to put it in there and so you know this code gets dispatched to a parallel thread uh but it's going to run this code on the main queue or on the main thread when it can so we're going to do the same thing in retrieve messages just before it reloads the table here oops like that okay so let's run it again in our case even when we didn't have that dispatch async to the main thread uh we still saw the uh UI update but if you were doing a lot of work there you would actually um see the UI freeze and that's not a good thing so let's type in yo send okay so there it goes you don't even notice a difference because we're not doing too much work here but that's a good practice to follow all right so we've got a very very very basic messaging app here that sends messages to our parse back end let's refresh the data here and retrieves those messages and that data back into our IOS app now this demonstrates how to use parse as a backend and database for your app if your app were more complex or if this chat app were more complex we could have a users table you know where you would actually create a user account and so the messages could be tagged to a specific user uh your queries would be more complex because you would maybe retrieve messages from only particular users but I hope this simple demo serves as a starting point for you to dig deeper into Parson and find out all it has to offer all right thanks for watching and I'll see you guys next time
