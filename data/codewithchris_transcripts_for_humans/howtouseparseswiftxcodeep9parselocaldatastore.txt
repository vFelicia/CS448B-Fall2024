With timestamps:

00:01 - hey coders what's up it's Chris here and
00:04 - today we're gonna talk about the local
00:06 - data store in parse so far we've been
00:09 - talking about creating PF objects PF
00:11 - queries all in relation to storing and
00:14 - retrieving data in our parse backend but
00:18 - you also have the option to store and
00:20 - retrieve from your local data store on
00:23 - the device and you may want to do this
00:25 - for example if the user is working with
00:27 - the data and they've got to do a lot of
00:29 - things with it before saving it to the
00:30 - cloud or maybe they don't have a
00:33 - connection and you want to store it
00:35 - locally or maybe the data just doesn't
00:37 - need to be pushed through the cloud for
00:39 - example if it's data for their sessions
00:41 - such as what screen they were on last or
00:44 - like what they were doing last so that
00:46 - when they were start their phone or they
00:48 - launched the app again you can kind of
00:49 - bring them back to where they were so
00:51 - stuff like that probably doesn't need to
00:52 - be stored on the parse back-end another
00:55 - scenario which may occur is that maybe
00:57 - you want to cache some of the data that
00:59 - has been pulled from the parse back-end
01:01 - so let's say on one app session they
01:05 - retrieve some data from the parse
01:06 - back-end and then you want that set of
01:08 - data to be available right away when
01:10 - they launch the app the next time you
01:12 - can store in the local data store and so
01:14 - when they launch the app next time you
01:17 - can pull that data from the local data
01:18 - store right away and then in the
01:20 - background you can go fetch some fresh
01:22 - data from the backend so the local data
01:25 - store is actually very similar to the
01:26 - way we do things when working with the
01:28 - remote parse back-end and all you need
01:30 - to do is just specify in your query that
01:33 - you're retrieving it from the local data
01:35 - store okay before we even get there
01:37 - let's enable the local data store first
01:39 - so here I'm looking at the parse
01:41 - documentation and you can come here by
01:44 - typing parse calm slash Docs and going
01:47 - to iOS guide scrolling down to local
01:49 - datastore on the left hand side and
01:51 - let's switch this the swift code so here
01:55 - it says that you just have to add an
01:57 - additional library to your Xcode project
02:00 - and then in the application did finish
02:03 - launching in the app delegate we already
02:06 - have this line set application ID and
02:08 - client key this tells the parse library
02:11 - that we're using which parse app we're
02:13 - pointing to we just have to write this
02:15 - line above that parse dot enable local
02:17 - data store so let's go ahead and do that
02:19 - first I'm going to open up Xcode I'm
02:23 - going to open up our parse demo app this
02:26 - is the XC workspace file okay so let's
02:29 - go to here our root node scroll all the
02:32 - way down actually there's a couple tabs
02:35 - up here make sure you okay in general
02:36 - square all the way down under linked
02:38 - frameworks and libraries click plus
02:41 - we're looking for let's just double
02:43 - check here Lib SQLite 3 so let's type
02:47 - that if you're paying attention you'll
02:49 - notice that these ones have this file
02:52 - extension TBD
02:53 - while if we look at the documentation it
02:56 - is calling for DUI Li B this initially
03:00 - stumped me a little bit but when I did
03:02 - some research it turns out that this one
03:04 - is the actual library whereas the TBD is
03:07 - just a new way of doing things where
03:09 - this is just a text-based file and then
03:11 - it actually points to this version as
03:14 - well as some cross-platform information
03:16 - so it's gonna make the actual app
03:18 - package lighter and smaller and so I'm
03:21 - going to go with this one right here and
03:22 - I'm gonna hope that things will work
03:25 - just the same we're gonna take a look
03:27 - and find out so under here app
03:30 - delegation did finish launching with
03:33 - options above the parse dot set
03:35 - application ID we're just gonna type in
03:38 - parse dot enable local datastore and I'm
03:42 - going to press command B to just build
03:45 - the project to make sure everything's
03:46 - running let me just run the app to make
03:49 - sure it doesn't crash because we did add
03:51 - the TBD library and not the DUI Li b1
03:55 - that it called for okay so everything
03:57 - still looks good let's scroll down a
03:59 - little bit
03:59 - and take a look at how we save a PF
04:02 - object into the local data store and
04:04 - they call it pinning but it's basically
04:06 - the same thing as saving it to the parse
04:08 - back-end so here in this example they're
04:11 - creating a PF object of type game score
04:14 - they're setting some properties on it
04:15 - and some key value pairs I mean and then
04:18 - they're calling this method pin in
04:20 - background and that's going to stored in
04:22 - the local data store and furthermore
04:24 - there's another method on the
04:25 - Kiev object pin all in background and
04:28 - you can give them a list of PF objects
04:30 - to save into the local data store so
04:33 - here in the view controller we've got
04:36 - this code from the previous time where
04:37 - we're doing some queries it's all
04:40 - commented out though and that's okay I'm
04:43 - going to create a local contact to store
04:46 - it into the data store create a contact
04:50 - PF object to store locally so let
04:55 - contact equals PF object class name is
05:00 - contact and then I'm going to set the
05:05 - first name property to Kevin last name
05:13 - property to Smith and let's say email is
05:20 - you guessed it Kevin Smith at
05:23 - example.com and then to pin it locally
05:26 - or to store it into the local data store
05:28 - we say pin in background we can do pin
05:33 - in background with block if we want to
05:35 - run some code after it's pinned but
05:36 - let's do that so I'm going to run the
05:39 - project now and it's gonna create this
05:41 - contact and it's gonna set these key
05:43 - value pairs to it and then it's gonna
05:45 - store it locally into the background
05:47 - okay so things are fine then nothing
05:49 - crashed I just ran the project so it
05:51 - should have done it and what I'm going
05:53 - to do now is comment that out and then
05:57 - try to retrieve it from the local data
06:01 - store and the way we do that is very
06:04 - very similar to how we retrieve things
06:06 - from the parse back-end using PF query
06:08 - so let me show you let query equals PF
06:11 - query we're looking for objects of the
06:17 - class contact and here we're going to
06:20 - add a constraint where key let's say
06:23 - first name is equal to Kevin actually it
06:28 - probably needs to be capital K and we're
06:30 - going to add an additional constraint or
06:33 - clause which is dot from local data
06:36 - store so you're telling the query that
06:38 - it's going
06:38 - to perform it from the local data store
06:40 - rather than connecting to the parse
06:42 - back-end and performing that query so
06:44 - now we just do our standard find objects
06:47 - and background with blocks
06:49 - we're gonna open up this block of code
06:50 - it's got two parameters one is a an
06:54 - array of PF objects that it can return
06:55 - and here's the error actually I'm not
06:58 - gonna use find objects I'm just going to
07:00 - say dot get first object in background
07:04 - with block and I open up this block of
07:06 - code so it returns a single optional
07:09 - object it could be nil if it doesn't
07:11 - find anything or it could be the first
07:13 - object that matches this query where the
07:16 - first name is Kevon so let's say object
07:19 - error and inside the block here we're
07:22 - gonna say if error is nil so no errors
07:26 - and if let contact equals object so if
07:31 - object is not nil as well then there was
07:35 - a contact that was found and here I'm
07:39 - just going to print object rather
07:42 - contact first name okay so what should
07:50 - happen here is it's going to perform a
07:52 - query for first-name equals to Kevin
07:55 - from the local data store and it should
07:57 - find it because we saved it in the
07:59 - previous run using this code here and
08:01 - then we're gonna print the first-name
08:03 - and we should see it in the console so
08:05 - let me run this app right now so there
08:08 - we go it was so fast because it didn't
08:10 - even need to connect to the parse
08:12 - back-end to do this as soon as I
08:13 - launched that you saw this print in the
08:16 - console now in the middle of recording
08:17 - this video I was reading the
08:19 - documentation and I came across
08:20 - something where you can actually cache
08:23 - the query when you perform it so in the
08:26 - beginning of this video when I mention
08:27 - some of the uses for the local datastore
08:29 - and one of the uses I mentioned was that
08:32 - maybe when you retrieve some results
08:35 - from the parse back-end you may want to
08:37 - save it in the local data store so that
08:39 - on the next app run you could use that
08:42 - data to display while it's retrieving
08:44 - fresh data well don't use the local data
08:46 - store for that because under queries for
08:49 - a PF query you can set a cache
08:52 - and if you set it to cash and there are
08:55 - a couple of options here it will
08:57 - actually hold on to that result set so
08:59 - that you can use it for your subsequent
09:01 - app runs and then you can refresh that
09:04 - query in the background so the pinning
09:07 - things to the local data store is not
09:09 - for that purpose but it's still useful
09:11 - for saving pieces of data that you don't
09:13 - need to push on to the parse back-end so
09:15 - in a future video we'll go through this
09:17 - PF query cache policy feature in more
09:20 - detail but for now for this video I just
09:22 - wanted to show you guys how to use the
09:24 - local data store and just to recap it's
09:26 - pretty easy to use instead of saving in
09:28 - the background or calling save on the PF
09:31 - object you call pin and for the query
09:33 - it's the same thing as performing
09:35 - queries in the parse backend but you
09:36 - just have to add this extra clause to
09:39 - tell it to search from the local data
09:41 - store instead so I hope that was helpful
09:42 - for you guys thanks for watching please
09:44 - don't forget to subscribe and thumbs up
09:46 - the video and share the video I'll see
09:48 - you guys next week bye for now

Cleaned transcript:

hey coders what's up it's Chris here and today we're gonna talk about the local data store in parse so far we've been talking about creating PF objects PF queries all in relation to storing and retrieving data in our parse backend but you also have the option to store and retrieve from your local data store on the device and you may want to do this for example if the user is working with the data and they've got to do a lot of things with it before saving it to the cloud or maybe they don't have a connection and you want to store it locally or maybe the data just doesn't need to be pushed through the cloud for example if it's data for their sessions such as what screen they were on last or like what they were doing last so that when they were start their phone or they launched the app again you can kind of bring them back to where they were so stuff like that probably doesn't need to be stored on the parse backend another scenario which may occur is that maybe you want to cache some of the data that has been pulled from the parse backend so let's say on one app session they retrieve some data from the parse backend and then you want that set of data to be available right away when they launch the app the next time you can store in the local data store and so when they launch the app next time you can pull that data from the local data store right away and then in the background you can go fetch some fresh data from the backend so the local data store is actually very similar to the way we do things when working with the remote parse backend and all you need to do is just specify in your query that you're retrieving it from the local data store okay before we even get there let's enable the local data store first so here I'm looking at the parse documentation and you can come here by typing parse calm slash Docs and going to iOS guide scrolling down to local datastore on the left hand side and let's switch this the swift code so here it says that you just have to add an additional library to your Xcode project and then in the application did finish launching in the app delegate we already have this line set application ID and client key this tells the parse library that we're using which parse app we're pointing to we just have to write this line above that parse dot enable local data store so let's go ahead and do that first I'm going to open up Xcode I'm going to open up our parse demo app this is the XC workspace file okay so let's go to here our root node scroll all the way down actually there's a couple tabs up here make sure you okay in general square all the way down under linked frameworks and libraries click plus we're looking for let's just double check here Lib SQLite 3 so let's type that if you're paying attention you'll notice that these ones have this file extension TBD while if we look at the documentation it is calling for DUI Li B this initially stumped me a little bit but when I did some research it turns out that this one is the actual library whereas the TBD is just a new way of doing things where this is just a textbased file and then it actually points to this version as well as some crossplatform information so it's gonna make the actual app package lighter and smaller and so I'm going to go with this one right here and I'm gonna hope that things will work just the same we're gonna take a look and find out so under here app delegation did finish launching with options above the parse dot set application ID we're just gonna type in parse dot enable local datastore and I'm going to press command B to just build the project to make sure everything's running let me just run the app to make sure it doesn't crash because we did add the TBD library and not the DUI Li b1 that it called for okay so everything still looks good let's scroll down a little bit and take a look at how we save a PF object into the local data store and they call it pinning but it's basically the same thing as saving it to the parse backend so here in this example they're creating a PF object of type game score they're setting some properties on it and some key value pairs I mean and then they're calling this method pin in background and that's going to stored in the local data store and furthermore there's another method on the Kiev object pin all in background and you can give them a list of PF objects to save into the local data store so here in the view controller we've got this code from the previous time where we're doing some queries it's all commented out though and that's okay I'm going to create a local contact to store it into the data store create a contact PF object to store locally so let contact equals PF object class name is contact and then I'm going to set the first name property to Kevin last name property to Smith and let's say email is you guessed it Kevin Smith at example.com and then to pin it locally or to store it into the local data store we say pin in background we can do pin in background with block if we want to run some code after it's pinned but let's do that so I'm going to run the project now and it's gonna create this contact and it's gonna set these key value pairs to it and then it's gonna store it locally into the background okay so things are fine then nothing crashed I just ran the project so it should have done it and what I'm going to do now is comment that out and then try to retrieve it from the local data store and the way we do that is very very similar to how we retrieve things from the parse backend using PF query so let me show you let query equals PF query we're looking for objects of the class contact and here we're going to add a constraint where key let's say first name is equal to Kevin actually it probably needs to be capital K and we're going to add an additional constraint or clause which is dot from local data store so you're telling the query that it's going to perform it from the local data store rather than connecting to the parse backend and performing that query so now we just do our standard find objects and background with blocks we're gonna open up this block of code it's got two parameters one is a an array of PF objects that it can return and here's the error actually I'm not gonna use find objects I'm just going to say dot get first object in background with block and I open up this block of code so it returns a single optional object it could be nil if it doesn't find anything or it could be the first object that matches this query where the first name is Kevon so let's say object error and inside the block here we're gonna say if error is nil so no errors and if let contact equals object so if object is not nil as well then there was a contact that was found and here I'm just going to print object rather contact first name okay so what should happen here is it's going to perform a query for firstname equals to Kevin from the local data store and it should find it because we saved it in the previous run using this code here and then we're gonna print the firstname and we should see it in the console so let me run this app right now so there we go it was so fast because it didn't even need to connect to the parse backend to do this as soon as I launched that you saw this print in the console now in the middle of recording this video I was reading the documentation and I came across something where you can actually cache the query when you perform it so in the beginning of this video when I mention some of the uses for the local datastore and one of the uses I mentioned was that maybe when you retrieve some results from the parse backend you may want to save it in the local data store so that on the next app run you could use that data to display while it's retrieving fresh data well don't use the local data store for that because under queries for a PF query you can set a cache and if you set it to cash and there are a couple of options here it will actually hold on to that result set so that you can use it for your subsequent app runs and then you can refresh that query in the background so the pinning things to the local data store is not for that purpose but it's still useful for saving pieces of data that you don't need to push on to the parse backend so in a future video we'll go through this PF query cache policy feature in more detail but for now for this video I just wanted to show you guys how to use the local data store and just to recap it's pretty easy to use instead of saving in the background or calling save on the PF object you call pin and for the query it's the same thing as performing queries in the parse backend but you just have to add this extra clause to tell it to search from the local data store instead so I hope that was helpful for you guys thanks for watching please don't forget to subscribe and thumbs up the video and share the video I'll see you guys next week bye for now
