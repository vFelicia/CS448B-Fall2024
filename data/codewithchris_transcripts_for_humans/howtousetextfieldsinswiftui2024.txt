With timestamps:

00:00 - welcome to another Swift UI Basics video
00:02 - in this one we're going to cover the
00:03 - Swift UI text field which is going to
00:06 - allow your user to type in text and you
00:08 - are going to be able to capture that
00:10 - text and do something with it so first
00:12 - of all let's start with the keyword text
00:15 - field and to be honest this is probably
00:17 - the one that you are going to be using
00:20 - the most there are two parameters you
00:21 - have to pass in one is going to be a
00:23 - placeholder piece of text and the other
00:26 - is a binding to a state property that is
00:30 - going to store the data that the user
00:32 - types in so let me show you how that
00:34 - works but first we have to create that
00:36 - state property that we need to pass into
00:39 - the second parameter so let's delete
00:41 - this for now and at the top
00:43 - here we are going to create a state
00:47 - property it can be private if you are
00:49 - just using this data here and I'm going
00:51 - to call this uh let's say text input and
00:56 - we can default that to an empty string
00:59 - next let us put the actual text field in
01:02 - here and I'm going to use this one so
01:05 - this one we could put a placeholder text
01:08 - uh let's
01:09 - say let's say it's a form we're going to
01:12 - ask someone to enter the their name and
01:14 - here we're going to put a binding to
01:16 - that property and you specify a binding
01:19 - with a a dollar symbol like that and
01:23 - this binding is two-way meaning that if
01:26 - you programmatically change the value
01:30 - inside this property it is going to
01:31 - reflect in the text field and in the
01:34 - reverse way if the user types uh data
01:38 - into the text field it is going to be
01:41 - stored in there so let's actually try
01:44 - this out and I'm going to launch it in
01:46 - the simulator so that we can see the
01:49 - software keyboard and everything now by
01:52 - default the style is borderless it's
01:55 - plain on iOS at least and if I had not
01:58 - placed a place holder text in there we
02:01 - wouldn't even be able to see it so I can
02:04 - type it in because I have my keyboard
02:05 - here you can ignore These Warnings down
02:07 - here that's just debugging information
02:09 - and if I press command and K in the
02:11 - simulator I can bring up the software
02:14 - keyboard so that's what that looks like
02:17 - now let's go back to the text field and
02:19 - here's a simple style that you can add
02:22 - just to add some uh border around it so
02:26 - if you go rounded border and let's say
02:28 - we add some padding
02:30 - then and let's reenable this
02:34 - preview it'll look more like a text
02:36 - field like that that's perfect so there
02:38 - is your basic usage example now let's
02:41 - dive into some other text field
02:42 - scenarios that will come up oh and one
02:45 - quick thing if you want to download the
02:46 - sample code for this we've got it all in
02:48 - a single handy xod project in fact it
02:51 - contains a sample code for all of the
02:53 - swiftui components so that you can learn
02:55 - from it or copy and paste the code into
02:57 - your own project just visit C
03:00 - pc.to swiftui dkit it's a free download
03:05 - I'll leave it in the description below
03:06 - the video too all right now back to the
03:08 - tutorial what if we wanted to do
03:10 - something when the user has entered in
03:12 - their name so one way to do that is to
03:15 - use a modifier called
03:19 - onsubmit so in this scenario for this
03:22 - demo I am just going to print out in the
03:26 - console when uh when they hit enter on
03:29 - their key keyboard or return on the
03:30 - software keyboard like the on screen
03:32 - keyboard it's just going to print out
03:34 - the output in here but technically you
03:36 - could do anything you would want this is
03:38 - how you would respond to that so here
03:41 - I'm going to just type in Chris I'm
03:43 - going to hit enter on the keyboard and
03:45 - you can see it appeared there so in the
03:48 - software keyboard same thing would go if
03:50 - they type in something and they hit
03:53 - return it captures that event right
03:55 - there now in many cases if you're
03:57 - filling out a form you would want by
04:00 - default to put the cursor in the first
04:03 - text field right here I have to tap into
04:06 - it before the cursor appears so in order
04:09 - to set Focus state to the text field and
04:11 - that simply means you want the cursor to
04:14 - be in the text field and the text field
04:17 - is the active element that the user is
04:19 - interacting with right to set the focus
04:21 - State for the text field there is a
04:24 - modifier called
04:26 - focused and you can set it to a focus
04:29 - state which can be a true or false or
04:32 - could it could be a little more
04:33 - complicated if you want to set Focus
04:35 - state for multiple text fields for now
04:37 - let's talk about a single text field so
04:40 - in order to do this let's declare a
04:42 - property up here to keep track of the
04:44 - focus State and there's a
04:47 - special uh property wrapper called Focus
04:50 - State and we'll call this focus and it's
04:53 - going to be a Boolean we're not going to
04:55 - set the value just yet and here in this
04:59 - mod fire we can bind it to that property
05:03 - that we just
05:05 - declared now when if we want to text
05:10 - field to be active and focused when this
05:13 - view appears we can add a modifier
05:15 - called uh on
05:19 - appear and when this happens let me just
05:24 - do this we are going to set Focus equals
05:28 - true so now let me run it and when this
05:31 - text field appears you're going to see
05:33 - that it's focused active and ready to go
05:36 - so the user can type in Jill for example
05:40 - and it appears down there now let's talk
05:42 - about a scenario where there are
05:43 - multiple text fields and you want to
05:46 - jump from text field to text field as
05:48 - they are filling in the information you
05:50 - can still use a single Focus State
05:53 - however you're going to need to create a
05:55 - special enum which you can think of as a
05:59 - value that contains multiple values so
06:00 - let me show you how that works here
06:03 - outside of the body property I'm going
06:06 - to create a new enum and I'm going to
06:09 - call this um
06:12 - perhaps
06:14 - form
06:16 - field
06:19 - focus and it has to be hashable you can
06:22 - think of it as allowing these values to
06:24 - be compared against each
06:26 - other so let us create
06:30 - one of these cases for each text field
06:32 - that we have so let's say we're going to
06:34 - have two text Fields first name and last
06:36 - name so we're going to use the keyword
06:38 - case and then we are going to put first
06:40 - name and then last
06:42 - name and then up here instead of a boo
06:45 - this is going to
06:47 - be an instance of form field
06:51 - focus and then when we set the focus
06:54 - here we are going to say that okay let's
06:58 - comment this out for a
07:10 - second focused we are going to use this
07:13 - one instead so this is going to be a
07:15 - binding to that hashable Focus state
07:18 - which we've declared right up here and
07:21 - there's also an equals parameter which
07:24 - basically
07:25 - States if this property equals this
07:29 - value
07:30 - then this text field should be focused
07:32 - or active so let's see how that
07:35 - works so again we can find to focus and
07:38 - then we can say
07:40 - equals first name so if this property is
07:45 - equal to first name then it should be
07:47 - focused on and now we are going to
07:49 - create the second uh this should be an
07:53 - optional value because in the beginning
07:55 - it's not
07:56 - sent okay so let's create a second text
07:58 - field just so we can
08:02 - demonstrate and this is going to be last
08:05 - name this one should probably be first
08:08 - name we also need another state property
08:12 - for and to capture the text input for
08:15 - that I'll call this text input
08:18 - two so we're going to say that this is
08:23 - bound to uh text input
08:27 - 2 text field
08:30 - style is rounded border so we'll add the
08:34 - padding and then the focus state for
08:36 - this one
08:38 - is focus
08:43 - equals uh last
08:46 - name oh got close the bracket okay so
08:50 - now we are ready to go if I run this
08:52 - preview we'll see two text Fields first
08:54 - name and last name and then just like so
08:58 - in the the beginning when the form
09:02 - appears we are going to set the focus
09:04 - equal to the first name and then when
09:07 - the user hits return on the first name
09:09 - we're going to set the focus to the last
09:12 - name and that's how it's going to jump
09:15 - from the first text field to the second
09:18 - one so you can see when we launch the
09:21 - screen the focus is set to the first
09:23 - text field I'm going to type in like
09:25 - that I'm going to hit enter which is
09:28 - submit and and you can see in the code
09:31 - here that it prints out what I typed in
09:34 - and then it sets the focus to the next
09:36 - text field so it jumped down here right
09:39 - and I can do
09:40 - that all right so that's how we work
09:43 - with Focus States for multiple text
09:45 - Fields two last things before we go
09:47 - number one here is the playlist for
09:50 - tutorials on all the Swift Joi
09:51 - components and down here you can
09:53 - download a single xcode project which
09:55 - contains sample code for all of these
09:58 - swiftui components
09:59 - thanks for watching I'll see you in the
10:01 - next video

Cleaned transcript:

welcome to another Swift UI Basics video in this one we're going to cover the Swift UI text field which is going to allow your user to type in text and you are going to be able to capture that text and do something with it so first of all let's start with the keyword text field and to be honest this is probably the one that you are going to be using the most there are two parameters you have to pass in one is going to be a placeholder piece of text and the other is a binding to a state property that is going to store the data that the user types in so let me show you how that works but first we have to create that state property that we need to pass into the second parameter so let's delete this for now and at the top here we are going to create a state property it can be private if you are just using this data here and I'm going to call this uh let's say text input and we can default that to an empty string next let us put the actual text field in here and I'm going to use this one so this one we could put a placeholder text uh let's say let's say it's a form we're going to ask someone to enter the their name and here we're going to put a binding to that property and you specify a binding with a a dollar symbol like that and this binding is twoway meaning that if you programmatically change the value inside this property it is going to reflect in the text field and in the reverse way if the user types uh data into the text field it is going to be stored in there so let's actually try this out and I'm going to launch it in the simulator so that we can see the software keyboard and everything now by default the style is borderless it's plain on iOS at least and if I had not placed a place holder text in there we wouldn't even be able to see it so I can type it in because I have my keyboard here you can ignore These Warnings down here that's just debugging information and if I press command and K in the simulator I can bring up the software keyboard so that's what that looks like now let's go back to the text field and here's a simple style that you can add just to add some uh border around it so if you go rounded border and let's say we add some padding then and let's reenable this preview it'll look more like a text field like that that's perfect so there is your basic usage example now let's dive into some other text field scenarios that will come up oh and one quick thing if you want to download the sample code for this we've got it all in a single handy xod project in fact it contains a sample code for all of the swiftui components so that you can learn from it or copy and paste the code into your own project just visit C pc.to swiftui dkit it's a free download I'll leave it in the description below the video too all right now back to the tutorial what if we wanted to do something when the user has entered in their name so one way to do that is to use a modifier called onsubmit so in this scenario for this demo I am just going to print out in the console when uh when they hit enter on their key keyboard or return on the software keyboard like the on screen keyboard it's just going to print out the output in here but technically you could do anything you would want this is how you would respond to that so here I'm going to just type in Chris I'm going to hit enter on the keyboard and you can see it appeared there so in the software keyboard same thing would go if they type in something and they hit return it captures that event right there now in many cases if you're filling out a form you would want by default to put the cursor in the first text field right here I have to tap into it before the cursor appears so in order to set Focus state to the text field and that simply means you want the cursor to be in the text field and the text field is the active element that the user is interacting with right to set the focus State for the text field there is a modifier called focused and you can set it to a focus state which can be a true or false or could it could be a little more complicated if you want to set Focus state for multiple text fields for now let's talk about a single text field so in order to do this let's declare a property up here to keep track of the focus State and there's a special uh property wrapper called Focus State and we'll call this focus and it's going to be a Boolean we're not going to set the value just yet and here in this mod fire we can bind it to that property that we just declared now when if we want to text field to be active and focused when this view appears we can add a modifier called uh on appear and when this happens let me just do this we are going to set Focus equals true so now let me run it and when this text field appears you're going to see that it's focused active and ready to go so the user can type in Jill for example and it appears down there now let's talk about a scenario where there are multiple text fields and you want to jump from text field to text field as they are filling in the information you can still use a single Focus State however you're going to need to create a special enum which you can think of as a value that contains multiple values so let me show you how that works here outside of the body property I'm going to create a new enum and I'm going to call this um perhaps form field focus and it has to be hashable you can think of it as allowing these values to be compared against each other so let us create one of these cases for each text field that we have so let's say we're going to have two text Fields first name and last name so we're going to use the keyword case and then we are going to put first name and then last name and then up here instead of a boo this is going to be an instance of form field focus and then when we set the focus here we are going to say that okay let's comment this out for a second focused we are going to use this one instead so this is going to be a binding to that hashable Focus state which we've declared right up here and there's also an equals parameter which basically States if this property equals this value then this text field should be focused or active so let's see how that works so again we can find to focus and then we can say equals first name so if this property is equal to first name then it should be focused on and now we are going to create the second uh this should be an optional value because in the beginning it's not sent okay so let's create a second text field just so we can demonstrate and this is going to be last name this one should probably be first name we also need another state property for and to capture the text input for that I'll call this text input two so we're going to say that this is bound to uh text input 2 text field style is rounded border so we'll add the padding and then the focus state for this one is focus equals uh last name oh got close the bracket okay so now we are ready to go if I run this preview we'll see two text Fields first name and last name and then just like so in the the beginning when the form appears we are going to set the focus equal to the first name and then when the user hits return on the first name we're going to set the focus to the last name and that's how it's going to jump from the first text field to the second one so you can see when we launch the screen the focus is set to the first text field I'm going to type in like that I'm going to hit enter which is submit and and you can see in the code here that it prints out what I typed in and then it sets the focus to the next text field so it jumped down here right and I can do that all right so that's how we work with Focus States for multiple text Fields two last things before we go number one here is the playlist for tutorials on all the Swift Joi components and down here you can download a single xcode project which contains sample code for all of these swiftui components thanks for watching I'll see you in the next video
