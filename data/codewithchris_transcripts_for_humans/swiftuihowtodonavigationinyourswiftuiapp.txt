With timestamps:

00:00 - a code crew it's Chris here back again
00:01 - with another Swift UI tutorial today
00:04 - we're gonna dive even deeper into Swift
00:06 - UI and we're going to look at how to
00:07 - display lists of data in your view now
00:10 - if you've used the UI kit before in the
00:12 - past we've done this with the UI
00:14 - tableview element however in Swift UI
00:16 - it's a little different you're also
00:18 - going to learn how to show a second view
00:21 - and navigate from the first view to the
00:23 - second view and yes you're also going to
00:25 - learn how to pass data between them
00:27 - sound good
00:27 - alright stay tuned alright so by the end
00:35 - of this tutorial
00:36 - you will have built something that looks
00:38 - like this now I know this looks like the
00:40 - one that we built in the first part but
00:42 - take a look at this we have got a whole
00:45 - list of landmarks now and when you click
00:48 - on each one it's actually dynamic yet a
00:51 - detailed view of that place with a map
00:54 - of that place and a picture of that
00:57 - place and obviously this demo builds
00:59 - upon the one that we'd built in the last
01:01 - lesson so if you haven't gone through
01:03 - that yet I highly recommend that you do
01:05 - that first and again like I mentioned in
01:07 - the previous lesson these tutorials are
01:10 - based off of Apple's own awesome swift
01:12 - UI tutorials this particular one is
01:14 - called building lists and navigation and
01:16 - if you go down you're going to see that
01:19 - there are a couple of distinct sections
01:21 - so let me just go through a quick
01:22 - preview of what we're going to talk
01:25 - about in this lesson
01:26 - so they're gonna start us off with a
01:28 - sample project it's gonna have sample
01:30 - data already of the different landmarks
01:32 - we're going to create a view for each of
01:35 - those rows well actually we're gonna
01:38 - create one row view but we're going to
01:40 - use it for all of those places we're
01:42 - going to be able to customize the
01:44 - preview so remember in the last Lawson I
01:46 - told you that there are two struts in
01:49 - each view the first struct describes the
01:51 - content in the layout whereas the second
01:53 - struct actually dictates what you see on
01:56 - the right side preview and this gives
01:57 - you the flexibility to manipulate the
02:01 - preview to see only the parts you want
02:02 - because you might not be working on the
02:04 - full viewest
02:05 - so you don't need to see the full thing
02:07 - so in this part we're gonna show you how
02:11 - to customize that preview so you only
02:13 - look at
02:13 - part that you want to and then we're
02:16 - going to dive into the meat of the
02:17 - lesson which is creating the list of
02:19 - landmarks and this is what you saw back
02:22 - here with kind of the scrollable list
02:25 - that looks like a table view if you're
02:27 - familiar with the old way or the uikit
02:29 - way of building lists and then of course
02:33 - it's going to be static at first and
02:34 - then we're going to make it dynamic with
02:36 - the data and then we're going to set up
02:38 - some navigation between that list and
02:40 - the detail view which we built in the
02:42 - previous lesson so you kind of need to
02:44 - have that built we're going to look at
02:47 - how to pass data between the two views
02:49 - and then lastly this section generating
02:52 - previous dynamically you're going to
02:54 - learn how to preview your view in
02:57 - different device sizes so if that all
02:59 - sounds good let's dive in but actually
03:02 - one thing if you haven't hit that like
03:04 - button yet or you're not subscribed to
03:06 - the channel please do it really helps
03:08 - out my channel and it lets me know that
03:10 - you guys want to see more Swift UI
03:12 - tutorials so if that sounds good please
03:14 - give this video a like and subscribe
03:16 - alright let's do this so the first thing
03:19 - we're going to want to do is to go to
03:21 - this tutorial link in the description
03:24 - and go ahead and download the project
03:26 - files because it's going to start us off
03:28 - with a starter project that's going to
03:31 - contain some of the files that we're
03:32 - going to need to complete this project
03:34 - namely the sample data some helper
03:37 - methods and structs and classes now in
03:41 - this particular swift UI tutorial it
03:43 - only focuses on the Swift UI part and it
03:45 - doesn't really explain all the stuff
03:48 - that's in the starter project but don't
03:50 - worry I'm gonna go through that stuff
03:51 - with you guys just in case you're not
03:53 - familiar with some of the things that
03:55 - they're doing in there already so I've
03:57 - already got the file downloaded it's
03:59 - this one building lists and navigation
04:01 - dot zip so I'm going to go ahead and
04:03 - open that
04:08 - and it's gonna have two folders
04:10 - completing a starting point and
04:12 - obviously you know want to grab the
04:14 - starting point one let's go ahead and
04:16 - open up that actually I'm gonna do it
04:19 - through the Xcode 9 beta although so it
04:25 - doesn't get confused as to which version
04:27 - because I have both versions on here so
04:29 - let's go into desktop sample apps this
04:32 - one right here just starting point
04:35 - landmarks and open up there sample
04:39 - project yep all right so it's gonna
04:44 - start us off like this so before we dive
04:48 - in and start coding up some you eyes
04:51 - we're gonna take a look at what they
04:52 - have here and they've organized that
04:54 - really nicely for us in these subfolders
04:56 - so first of all let's look into
04:59 - resources here we've got landmark data
05:02 - JSON and if you're not familiar with
05:05 - this JSON format it's basically a format
05:09 - to describe items of data that we're
05:12 - going to use in our app let me let me
05:14 - show you so this outer square bracket is
05:17 - basically a collection of items and each
05:21 - item is separated by a comma so you see
05:23 - a comma here and a comma there and each
05:26 - item is surrounded by a pair of curly
05:29 - brackets and then the data inside is the
05:32 - actual data for that item so you see we
05:35 - have things like name category city
05:37 - state ID park coordinates for the
05:41 - location and the image now the images
05:44 - they're all here in the resources
05:46 - already so we have all of this set up
05:49 - ready to go
05:51 - the problem is that this data in this
05:53 - JSON file is not usable as is we
05:56 - actually have to process this JSON file
05:58 - and turn it into Struck's or things that
06:01 - we can use so that is what inside the
06:06 - model you have this data file that's
06:08 - what this is so let me just close go
06:11 - editor only and you can see here that
06:15 - it's got this load function now I'm not
06:17 - going to describe all of this code but
06:19 - it basically takes that JSON file
06:21 - and breaks it up into a collection of
06:25 - landmark objects that we can use and
06:29 - then notice here that they declared this
06:31 - global variable called landmark data
06:33 - which calls that load function and
06:37 - passes in the JSON file all right so
06:40 - this landmark data global variable is
06:43 - going to contain that array of landmarks
06:48 - and if you don't know what an array is
06:50 - it's just a list of items to put it
06:53 - simply there's also another image store
06:56 - class here and this is actually a
06:58 - singleton class now this is going to
07:00 - help us return these images in the sizes
07:04 - that we need so I'm not gonna dive too
07:07 - far deep into this it's a lot of code
07:09 - here to do that but when we finally get
07:12 - to using it I'll point out to you
07:14 - exactly where where it comes into play
07:16 - but for now we have this data file here
07:21 - we also have land of mark dot Swift now
07:25 - each of these landmark objects
07:27 - represents one landmark from the data
07:31 - file remember how the JSON data file was
07:34 - a collection of landmarks separated by
07:37 - commas well each of those landmarks is
07:39 - going to be represented by this struct
07:43 - here so one cool thing I can do for you
07:45 - is do a side-by-side comparison of let's
07:52 - see here resources nine Mark JSON let me
07:56 - close this was that alright so here is
08:01 - that landmark structure and here is our
08:04 - JSON file so you can see that in maps
08:06 - right we've got the name it's going to
08:08 - go into this property right here we've
08:10 - got a category that's going to go down
08:13 - here and you can see there's a
08:15 - one-to-one mapping there's an ID
08:17 - there's ID image name and coordinates
08:20 - image name and coordinates and then park
08:23 - and State Park and a state all right so
08:27 - that's really cool now let's go back to
08:29 - the file navigator all right so let's go
08:31 - ahead and open that
08:33 - close that dual window we've got the app
08:36 - delegate the seen delegate I describe
08:39 - this stuff back in the previous lesson
08:40 - so take a look at that if you're not
08:42 - sure what these are here is landmark
08:45 - detail about Swift now this is actually
08:47 - the thing that we created in part one
08:51 - this is that Turtle Rock Joshua Tree
08:54 - National Park detailed view so let's
08:57 - just preview it to make sure that it
09:00 - looks correct otherwise wheel we're
09:02 - going to be building off of a wrong base
09:05 - already so it's gonna take a while all
09:09 - right under supporting views while that
09:12 - happens I'm not going to click away from
09:13 - it we also have circle image and map
09:15 - view so these are two views that we've
09:17 - built in the previous lesson that are
09:20 - used in the landmark detailed view you
09:23 - can see that this is the circle image
09:24 - and this is the map view they're used in
09:27 - this to build out the overall detailed
09:29 - view so you can see there and the map is
09:31 - not showing up because we're not in live
09:33 - preview but if I turn that on you're
09:35 - gonna see it go to turtle rock all right
09:40 - so that's what we've got starting out
09:42 - now let's dive in and start building our
09:44 - row I'm going to do this under the
09:47 - supporting views group because this is a
09:50 - single row in a larger list and so I
09:53 - consider that a supporting view so let's
09:55 - go ahead and create a new file right
09:57 - there and under iOS choose swift UI view
10:01 - that's what we've been doing for the
10:03 - last little while right
10:05 - landmark row let's create that and let
10:11 - me just show the preview this is just
10:13 - going to be our basic hello world UI
10:15 - view but we're going to change that so
10:18 - inside this structure that describes the
10:20 - content and layout you know this this
10:23 - label could let me change this to let's
10:26 - say Turtle Rock right now this would be
10:29 - a static piece of text and we don't want
10:31 - our rows to be static pieces of text we
10:34 - want them to be dynamic because each row
10:36 - represents some sort of landmark we're
10:40 - going to store the landmark that this
10:42 - robe represents in a property that we're
10:44 - going to declare up here
10:46 - so let's declare and you probably called
10:49 - landmark and it's going to be of type
10:51 - landmark all right at this point if you
10:55 - try to run it it's going to fail so
11:00 - you'll notice that now when you try to
11:02 - create a new landmark row object that
11:04 - this doesn't work anymore you need to
11:06 - supply the parameter that is going to be
11:09 - set to this landmark property so why
11:11 - don't we use autocomplete open up a
11:14 - bracket hit enter you can see now that
11:17 - whenever you want to create a new
11:19 - Atlanta murkrow object you're going to
11:21 - have to pass in a landmark object to set
11:24 - to this property so what we're going to
11:26 - do is you know how I showed you that
11:30 - there was this global variable called
11:32 - landmark data and that this loads the
11:36 - JSON file and parses it and returns to
11:38 - us an array of landmark objects right
11:41 - well this is exactly what we need so why
11:43 - don't we access this global variable to
11:46 - pass in so that we have something to
11:48 - show so I am going to call land mark
11:52 - data and I'm going to access the first
11:54 - element now this preview is basically
11:59 - going to create a new landmark row it's
12:01 - going to pass in the first item in our
12:03 - data set which is going to be set here
12:06 - and then finally for my text element I
12:09 - can actually access the name property of
12:13 - the landmark that got passed in so name
12:17 - and let's see what we get on the
12:19 - right-hand side
12:24 - so you can see here it says Turtle Rock
12:27 - now don't be fooled because I had turtle
12:29 - Huck there before let's say I change
12:31 - this to one right you can see now it's
12:34 - silver salmon Creek and the order of
12:37 - these elements corresponds to the order
12:41 - of the data in here in the JSON file
12:43 - alright next we're going to add an image
12:45 - beside the name so let's go back here
12:47 - since we have the landmark that we want
12:51 - to show for this row let's see what else
12:53 - is in here
12:59 - so this landmark actually has an image
13:04 - property which returns to us an image
13:07 - view and we can pass in the size that we
13:10 - want so let's say 50 let's see how that
13:13 - looks like well actually this is going
13:14 - to crash reason is because if we want to
13:17 - show two elements side by side remember
13:19 - we have to use an H stack or a
13:21 - horizontal stack view so let's create
13:26 - one like that and let's just cut and
13:28 - paste these two elements into here well
13:31 - let me just indent this so it's a little
13:33 - easier to read ah I know why it looks so
13:35 - weird
13:36 - let's create more space there we go so
13:40 - we've got our zoom there we've got our
13:47 - image and we've got our landmark name so
13:50 - what is this image property why don't we
13:53 - go take a look hold down command you can
13:55 - click it jump to definition so we can
13:58 - see what this function returns you can
13:59 - also use that shortcut key right there
14:01 - so this is our landmark structure this
14:06 - is the image function and it uses that
14:09 - image store right and it accepts a size
14:14 - and then it returns us an image so this
14:16 - image store is what I pointed out to you
14:18 - earlier
14:18 - inside this data file remember here
14:26 - image store this guy so all this code
14:29 - right here basically reads the image
14:32 - from here turns it into the size that we
14:35 - want and returns it so that's what that
14:36 - was is responsible for so let's go back
14:39 - to our or where were we here landmark
14:41 - row all right so we've got an image
14:43 - we've got the text but it's kind of
14:46 - centered right and we want our rows to
14:49 - stretch for the whole width so let's
14:53 - close that I'm going to add a spacer at
14:56 - the back here now that's cool it's going
14:59 - to push it all the way to the edges like
15:02 - that now I am going to change the
15:06 - preview because after all we are working
15:08 - on a single row here right and what we
15:11 - see on the preview is like this giant
15:13 - screen this whole view we don't need
15:15 - that we just need to look at a single
15:17 - row so you can actually modify what we
15:21 - see in terms of the preview so for
15:23 - example take a look at this we can call
15:26 - a method called preview layout and then
15:31 - we can pass in fixed we want to look at
15:36 - a fixed size for the layout and for the
15:39 - width I'm going to put 300 in the height
15:40 - I'm going to put 70 so let's take a look
15:42 - at how that looks like so here we can
15:45 - focus on a single row so what's even
15:48 - cooler is that I can actually preview a
15:50 - couple of different rows or three or
15:52 - four however many I want by using
15:55 - something called group so let me declare
15:59 - a new group here and let me put this row
16:04 - in here all right so that's showing my
16:08 - landmark data the first element let me
16:11 - just create some more space and let's
16:17 - say I want to take a look at another
16:18 - piece of data for my preview so that I
16:22 - can make sure that the view that I'm
16:24 - coding here works for my sample set of
16:27 - data so here I've created two landmark
16:30 - rows one showing the first item in my
16:33 - JSON data file and the second one
16:35 - showing the first element for my JSON
16:37 - data file and what I noticed he
16:39 - is that there is actually a couple of
16:41 - margins in the top and bottom I want to
16:43 - have a margin on the left as well and so
16:46 - I can add some padding to my H stack so
16:51 - I can say the leading edge let's say 10
16:55 - like that so that gives us that little
16:57 - bit of padding there now to simplify
16:59 - this code because this isn't a group I
17:02 - can actually apply the preview layout to
17:05 - the entire group instead of to the
17:08 - individual elements inside it so I'm
17:11 - going to delete that and I'm going to
17:13 - just call preview layout on the entire
17:17 - group alright up next we're going to see
17:19 - how we can start displaying a list of
17:21 - data now that we have our rows so let's
17:24 - go back here and let's create a landmark
17:29 - list so we're going to create a new file
17:32 - and I'm actually going to create it out
17:35 - here because this is not going to be a
17:38 - supporting view it's actually going to
17:39 - be our root view once we're finished
17:42 - with this so under iOS let's choose
17:45 - Swift UI view and then why don't we call
17:48 - this guy landmark a list so I'm going to
17:54 - move it up here so it's just easier to
17:56 - reference and see all right so again
17:59 - we've got our basic hello world with one
18:01 - text element so in order to display a
18:03 - list of data we simply use the list
18:06 - element so that's as easy as it gets
18:10 - I'll list like that all right and then
18:13 - we can paste in a couple of landmark
18:16 - rows right that's the thing we just
18:18 - created here so why don't we try that so
18:21 - land mark whoops landmark row and
18:26 - landmark row when I try to create a new
18:28 - one it expects me to pass in a piece of
18:30 - well a landmark data right a landmark
18:35 - object so let me just create two rows
18:38 - first so it's easier to see for you so
18:41 - I've got two landmark rows right here
18:43 - and inside each one I'm gonna pass in a
18:46 - different item from our data set so
18:49 - landmark data
18:52 - element zero and landmark data element
18:58 - one let's take a look at what we get
19:00 - right here so instantly this preview is
19:03 - so cool
19:04 - we can see Turtle Rock in silver salmon
19:06 - Creek so this is cool and all but this
19:09 - is not exactly what we want right
19:11 - because we're showing - static pieces of
19:13 - information here and in our collection
19:15 - of landmarks we actually have a lot more
19:17 - places and so I don't want to be hand
19:20 - coding you know each row like this what
19:23 - we want to do instead is actually make
19:25 - our list read off of our location data
19:28 - array let's just delete this and we can
19:32 - do that by using one of the initializers
19:34 - of the list namely this one right here
19:37 - so we can pass in our location data
19:40 - array I know this kind of looks like a
19:43 - mess but not a location that I keep
19:46 - calling it location data landmark data
19:48 - but the problem is that we need to
19:51 - exactly specify what the unique ID that
19:54 - uniquely identifies each item is and
19:57 - luckily for us for all of our landmarks
20:00 - we actually have an ID that is meant for
20:04 - exactly this purpose and you can see in
20:07 - the landmark data though Jason we also
20:08 - have the ID and each of them are
20:11 - different as well so going back here
20:15 - creating our list right here landmark
20:19 - data is our collection of data and we're
20:22 - going to call identified by and here
20:26 - we're going to specify the property or
20:28 - the key that we want to use and that is
20:30 - ID now I have to hit backslash because I
20:34 - need to escape the dot there and that's
20:38 - how you specify that you want to use
20:39 - this property as the unique ID now for
20:43 - selection I'm not going to do anything
20:46 - with that that's an optional parameter
20:48 - and for the action again also this is a
20:53 - little bit of a mess I don't have to
20:56 - specify that but for the road content I
20:59 - do want to specify this closer closure
21:01 - so let me double click that it's going
21:04 - to open up
21:05 - as a trail enclosure and this kind of
21:08 - looks it's really hard to read all right
21:10 - so now it's a little more clear and this
21:15 - I just have to specify a parameter I'm
21:17 - going to call it landmark so let me
21:18 - explain what's happening here so we're
21:21 - creating a brand new list and we are
21:24 - passing in our collection of data
21:26 - telling it what the unique identifier is
21:30 - so it can tell how many items there are
21:33 - and what items are with what items for
21:36 - each of those items in the collection
21:38 - it's going to run the code in our
21:41 - closure right here this is where we want
21:42 - to return the view to display that
21:45 - specific piece of data that it is
21:48 - looking at right because it's going to
21:51 - go through this collection so we
21:54 - basically in here we want to return a
21:57 - landmark row you know the thing that we
21:59 - just built so we're gonna create a new
22:01 - landmark row we're gonna have to pass in
22:03 - the landmark that's not a problem
22:04 - because we have it as a parameter up
22:06 - here so I'm just going to specify that
22:08 - all right so this says it returns a view
22:13 - but it actually we're returning a
22:16 - landmark row to be more specific so
22:18 - let's replace that right there and we
22:22 - should be good yeah all right so you see
22:27 - it's pretty cool now the list is
22:29 - dynamically reading off our of our data
22:32 - set and producing this list now one more
22:35 - thing I want to show you is you know how
22:38 - for our data set here our list of
22:42 - landmarks we have to use this identified
22:44 - by and tell it which property to use
22:46 - well we can actually improve that for
22:50 - our landmark structure if we say that it
22:53 - conforms to the identifiable protocol
22:57 - and if we just take a look at that so
23:02 - that we hold down this and you can see
23:06 - that it is a type that you can compare
23:07 - for identity equality open it up in
23:10 - developer documentation and let's just
23:14 - take a look here there's not too much
23:15 - information about it but what it does
23:17 - say down here is
23:19 - it is you need a unique identifier and
23:23 - an ID property here right so we don't
23:27 - really have to do anything else because
23:29 - it has that property right there and so
23:33 - now that the landmark structure conforms
23:35 - to the identifiable protocol we no
23:38 - longer have to manually specify this
23:41 - method here and then we can just specify
23:44 - our collection of landmark objects like
23:47 - that so now we've got our list of data
23:49 - but how do we transition from this list
23:53 - to the detail view when someone taps on
23:55 - one of these rows well for that we need
23:58 - to put our list into what's called a
24:00 - navigation view and then for each of
24:02 - these items that it generates these rows
24:04 - for instead of just returning a row we
24:07 - need to return that row wrapped inside
24:10 - of a navigation button so that allows
24:12 - the user to tap on it and then we can
24:15 - trigger some sort of destination for
24:17 - that button so let me show you how
24:19 - that's done so first of all we're going
24:22 - to declare a navigation view and then
24:27 - all we have to do is put our list inside
24:30 - of it so that takes care of that
24:34 - but the second issue is that we need to
24:37 - wrap our landmark row in a navigation
24:41 - button so navigation button here and we
24:46 - are going to create an instance of it
24:48 - now there are a whole bunch of different
24:51 - initializers for this navigation button
24:54 - but as I was learning Swift UI through
24:58 - the Apple tutorials I noticed that all
25:00 - we needed at least for this particular
25:03 - case anyways was to specify a
25:04 - destination so that's what I'm going to
25:08 - do here I'm just going to choose this
25:10 - one I'm going to get rid of the label I
25:12 - don't quite fully understand how the
25:15 - navigation button works yet but I'm sure
25:17 - in time as I dig more into Swift UI I'll
25:19 - learn but for now if we specify the
25:24 - landmark detail view if we create a new
25:27 - instance of it right here like that
25:29 - when this navigation button triggers
25:32 - it's going to send the user to the
25:34 - landmark detailed view and then this is
25:38 - how we would wrap this landmark row
25:44 - inside this navigation button now I I
25:49 - was encountering this error here and
25:51 - it's basically saying that right here
25:55 - we're returning a navigation button but
25:58 - up here for this closure we are
26:00 - specifying landmark row and then what I
26:03 - eventually realized is that we don't
26:05 - need to specify a return type actually
26:07 - at all
26:08 - so if we leave it like that everything's
26:11 - going to be good and then inside here we
26:17 - can try and run it again
26:18 - let's go a live preview load all right
26:23 - and we tap on one of these so we can go
26:28 - to the detail view there's a back button
26:30 - and we'll get you a different one but
26:32 - you notice how they are all turtle rock
26:35 - right no matter what I choose it's
26:39 - showing turtle rock and that is because
26:41 - inside the landmark detailed view we
26:46 - have these hard-coded values right it's
26:49 - set to this particular text here the
26:53 - circle image itself is hard-coded to
26:56 - this image and the map view itself is
26:58 - hard-coded to this coordinate for turtle
27:02 - rock so actually if we want to make it
27:04 - dynamic we need to update this landmark
27:07 - detail right it's got to keep track of a
27:10 - particular landmark that it wants to
27:12 - display and then we have to pass in the
27:16 - coordinates into the map view that we
27:17 - wanted to show we need to pass in the
27:19 - image into the circle image view that we
27:22 - want to show and we need to pass in the
27:24 - landmarks named Park state into all of
27:28 - these fields here to make it dynamic so
27:32 - let's take a look at how we're going to
27:34 - make this happen so this is the landmark
27:37 - detail why don't we go up one level and
27:41 - we go to the landmark list so here's
27:44 - what we want to do
27:45 - this is the list that is showing each
27:48 - landmark from the collection of
27:50 - landmarks for each single landmark it is
27:55 - showing a row right and this row we made
28:00 - a dynamic by passing in the landmark
28:02 - that I wants to show and then it's
28:04 - showing that landmarks picture and that
28:06 - landmarks name that's exactly what we
28:09 - need to do here as well for the landmark
28:11 - detail that's and that's gonna make it
28:13 - so that when they tap on Twin Lake
28:15 - they're gonna get the landmark detail
28:17 - for Twin Lake right icy Bay they're
28:19 - gonna get that landmark detail for icy
28:21 - Bay so essentially we want to change the
28:23 - landmark detail so that we can pass a
28:25 - landmark inside so why don't we now
28:29 - drill down to landmark detail and see
28:31 - how we can make that happen
28:33 - so the first thing I would do is create
28:39 - a new landmark property here right so
28:43 - that we make it so that when we declare
28:48 - a landmark detail we need to pass in the
28:51 - landmark that we want it to show
28:53 - like what landmark do we want the detail
28:55 - for right we need to specify that so now
28:58 - because I've added this landmark
29:01 - property here whenever you create a new
29:04 - landmark detail object you need to
29:06 - specify the value for that so right now
29:10 - in this preview I'm going to just put in
29:12 - some piece of dummy data we're gonna say
29:16 - landmark data let's say element number 3
29:20 - just for sample data purpose all right
29:23 - you're not gonna really see anything
29:24 - change here you know why because all
29:28 - we're doing when we pass in landmark
29:30 - data 3 here is we're setting this
29:32 - property to landmark the third data
29:35 - element but the map view is still
29:39 - hard-coded to those coordinates the
29:41 - circle image is still hard-coded through
29:43 - this image and all of this text is still
29:45 - hard-coded so the first thing we can do
29:47 - actually is we can change this text
29:48 - right so instead of hard-coding that we
29:51 - can show landmark dot name right that's
29:55 - from this property up here all right so
29:58 - it's already going to be dynamic let's
30:00 - resume build failed that's because
30:08 - that's because now that we've added this
30:10 - landmark we need to go back to the
30:14 - landmark list right this navigation
30:16 - button this is no longer valid we can't
30:19 - just create a landmark detail we need to
30:22 - specify which landmark you need that too
30:26 - so let's do that and then we're gonna
30:30 - pass in landmark just like we're doing
30:34 - here for the row okay so that should be
30:38 - good all right build failed in so here
30:47 - in scene delegate again we need to the
30:54 - route view is landmark detail right when
30:56 - you launch the app it's going to show
30:58 - landmark detail and again that's no
31:00 - longer enough we need to specify a piece
31:03 - of dummy data for now so eventually
31:07 - we're going to want to change this to
31:09 - show the list at the root view actually
31:11 - why don't we do that right now
31:12 - we're going out of order a little bit so
31:15 - we're going to show the landmark list as
31:17 - the root view for when the app launches
31:20 - so that's eventually what we want to do
31:22 - anyways so this is in the scene delegate
31:25 - all right let's save it and let's hit
31:28 - command B and build it make sure it all
31:30 - runs and let's go back to landmark
31:36 - detail alright so this is where we're at
31:39 - here we've got the landmark property
31:41 - being passed in and I am updating these
31:44 - hard-coded strings to show the values
31:47 - from the landmark that is passed in so
31:49 - this would be the park and this would be
31:53 - at let's resume this would be the state
31:57 - and the market dot state
32:01 - and so I want to see those values update
32:04 - right there
32:05 - so regenerating all right so we've got
32:08 - st. mary lake Glacier Glacier National
32:11 - Park and Montana and this comes from
32:14 - this piece of sample data that I
32:16 - supplied for the preview now we need to
32:19 - update the coordinates in the circle
32:21 - image so we want to make it so that we
32:24 - can pass in the landmark right into the
32:26 - map view and pass in the landmark into
32:28 - the circle image to let it know what it
32:30 - should be displaying so why don't we do
32:32 - the map view first let's drill in jump
32:35 - into the definition for the map view
32:37 - here and up here we are going to declare
32:42 - variable or property rather for the
32:45 - coordinate and this is going to be CL
32:50 - location coordinate too deep and this is
32:54 - basically going to replace this line of
32:57 - code so we don't have to hard code these
32:58 - coordinates so why don't we erase that
33:01 - all right so now in the preview we're
33:05 - missing the parameter right for
33:07 - declaring the map view because we just
33:09 - added that store property so now we have
33:12 - to specify coordinate right I'm going to
33:15 - specify a sample so landmark data let's
33:22 - do the first piece and we're gonna say a
33:25 - little location coordinate like that so
33:29 - that that's gonna be Turtle Rock that's
33:32 - the first element but that's all we need
33:34 - to do for the map view so now it expects
33:37 - us to pass in the coordinates that we
33:39 - wanted to hone in on all right so now
33:41 - let's go into the circle image and up
33:45 - here let's look for an image let's
33:53 - create an image property right there so
33:55 - whenever we create a new circle image
33:57 - view it requires us to pass in the image
34:00 - that we want it to show so no longer are
34:02 - we gonna show a hard-coded turtle rock
34:05 - image we are going to show the image
34:08 - that is set here
34:12 - all right so circle image now for this
34:15 - preview we can't just declare a new
34:16 - circle image we need to pass in an
34:21 - actual image so I'm going to grab keep
34:25 - doing that I'm mark data I'm going to
34:27 - grab that's the first element or the
34:31 - second element rather because then a
34:34 - race starts at zero so the first element
34:36 - is 0 second element is 1 so I'm going to
34:38 - grab element the second element and then
34:41 - I'm going to call the image and the size
34:45 - of this was 250 and I know that so when
34:49 - we run this missing so it doesn't build
34:53 - right now because in the landmark detail
34:56 - we have to supply the parameters when we
35:00 - created the new map view in the new
35:02 - circle image so let's fix that first all
35:07 - right so this is the landmark detail
35:09 - we've already dynamically set the
35:11 - landmark named park state and we've just
35:14 - modified the map view in the circle
35:16 - image to accept the coordinates and the
35:20 - actual image file here so let us call
35:24 - the new initializer we're going to pass
35:27 - in the land mark dot coordinate location
35:32 - coordinate and for circle image we are
35:34 - going to pass in the landmark dot image
35:39 - for size 250 and we're going to zoom so
35:46 - sweet for it boom is that mapped I'm not
35:53 - gonna update ya should update there we
35:57 - go
35:57 - cool so now we can go back to our list
36:03 - because everything is dynamic now we've
36:05 - changed circle image to accept the image
36:07 - map view to accept the coordinate a
36:09 - landmark detail to accept the landmark
36:11 - and we've already updated the landmark
36:15 - list right
36:19 - here when we show the rope and we create
36:23 - the navigation button we're passing in
36:25 - the landmark to the landmark detail so
36:27 - now if I tap on any of these come on
36:44 - let me try to get out of this preview
36:47 - and try and get back into the preview so
36:55 - you can see there's still some things to
36:57 - work out but there we go Turtle Rock
36:59 - chili cook trail and all of this is
37:03 - dynamic and it's passing the data from
37:05 - the list to the detail view it's just
37:07 - really really cool now there is one
37:10 - thing I forgot to show you guys which is
37:11 - basically to set the navigation bar
37:14 - titles so in this navigation view you
37:18 - can actually call this navigation bar
37:21 - title here and then you can pass in a
37:24 - textview and that's going to show up
37:29 - landmarks that's going to show up up
37:31 - there let's see if we can see that mmm
37:40 - not really
37:42 - I don't really know where that's
37:43 - supposed to show up to be honest all
37:47 - right you know what we're gonna try to
37:50 - launch it in the simulator and see what
37:52 - happens all right so we've got our
37:55 - iPhone 10s on iOS 13 alright so we don't
38:02 - have a navigation title here either so I
38:04 - don't really know where it shows up if
38:06 - you guys know let me know in the comment
38:09 - section below
38:09 - I did something wrong I crashed it I
38:13 - know what happened there yeah keep in
38:16 - mind this is all beta software
38:17 - everything's on beta so don't expect
38:20 - everything to work perfectly however in
38:24 - the landmark detail I actually in here
38:27 - probably set a navigation so we're gonna
38:33 - do that here the navigation bar
38:42 - title display mode maybe that's what we
38:46 - needed a display mode so this one we're
38:50 - gonna make this one dynamic right
38:51 - because I'm passing the landmark name
38:55 - because this is the detail view and then
38:58 - for the display mode let's say in line
39:02 - let's see if we can see that in more
39:07 - detail it's not showing me at the right
39:11 - preview for the right view that I'm
39:13 - looking at come on I think it's it's
39:18 - basically giving up on me
39:20 - ah there we go and you don't run it well
39:31 - it's got an app icon and everything - ah
39:34 - there it is
39:35 - Turtle Rock cool yeah so maybe this list
39:40 - here we have - if we wanted to show it
39:42 - you know we could change this to what
39:49 - was it display mode docked in line let's
39:53 - run it
39:58 - nope well yeah well okay so what we're
40:06 - gonna do now I promise to also show you
40:09 - how you can preview it on different
40:11 - devices here so you can see here on the
40:15 - landmark list we're just showing it but
40:17 - if you call the display previewed sort
40:24 - of preview device come on autocomplete
40:28 - there we go
40:30 - we basically pass in we create a new
40:35 - preview device and we pass in the wall
40:39 - value and this loots this string I don't
40:42 - know where they get this from but it is
40:44 - basically something like this let's see
40:48 - if that works
40:49 - all right so finally I wasn't even
40:52 - looking and it changed cool so there's
40:55 - also a way to preview your preview on
40:58 - multiple devices at the same time now
41:01 - I'm not going to show you the code here
41:03 - but if you're interested just follow the
41:05 - link in the description to the Apple
41:07 - swift UI tutorial that this video
41:09 - tutorial is based off of if you go all
41:11 - the way to the bottom you're going to
41:14 - see the snippet of code that they use to
41:16 - show multiple device previews at the
41:18 - same time now I want to turn it over to
41:20 - you did you install any of the betas on
41:22 - your machines I know in the past that I
41:25 - never install alpha beta software on my
41:28 - machines but when they announced with UI
41:31 - I just couldn't not install it so I bit
41:34 - the bullet and went ahead and did it so
41:36 - far so good
41:37 - I haven't noticed any big problems let
41:40 - me know what your experience has been by
41:42 - leaving a quick comment below if you
41:44 - like this video please hit like and
41:45 - please subscribe to the channel as that
41:47 - sort of stuff really helps me and helps
41:49 - the channel grow and if you want to see
41:51 - more well there's more Swift UI content
41:54 - right there
41:55 - alright thanks for watching I'll see you
41:56 - in the next lesson

Cleaned transcript:

a code crew it's Chris here back again with another Swift UI tutorial today we're gonna dive even deeper into Swift UI and we're going to look at how to display lists of data in your view now if you've used the UI kit before in the past we've done this with the UI tableview element however in Swift UI it's a little different you're also going to learn how to show a second view and navigate from the first view to the second view and yes you're also going to learn how to pass data between them sound good alright stay tuned alright so by the end of this tutorial you will have built something that looks like this now I know this looks like the one that we built in the first part but take a look at this we have got a whole list of landmarks now and when you click on each one it's actually dynamic yet a detailed view of that place with a map of that place and a picture of that place and obviously this demo builds upon the one that we'd built in the last lesson so if you haven't gone through that yet I highly recommend that you do that first and again like I mentioned in the previous lesson these tutorials are based off of Apple's own awesome swift UI tutorials this particular one is called building lists and navigation and if you go down you're going to see that there are a couple of distinct sections so let me just go through a quick preview of what we're going to talk about in this lesson so they're gonna start us off with a sample project it's gonna have sample data already of the different landmarks we're going to create a view for each of those rows well actually we're gonna create one row view but we're going to use it for all of those places we're going to be able to customize the preview so remember in the last Lawson I told you that there are two struts in each view the first struct describes the content in the layout whereas the second struct actually dictates what you see on the right side preview and this gives you the flexibility to manipulate the preview to see only the parts you want because you might not be working on the full viewest so you don't need to see the full thing so in this part we're gonna show you how to customize that preview so you only look at part that you want to and then we're going to dive into the meat of the lesson which is creating the list of landmarks and this is what you saw back here with kind of the scrollable list that looks like a table view if you're familiar with the old way or the uikit way of building lists and then of course it's going to be static at first and then we're going to make it dynamic with the data and then we're going to set up some navigation between that list and the detail view which we built in the previous lesson so you kind of need to have that built we're going to look at how to pass data between the two views and then lastly this section generating previous dynamically you're going to learn how to preview your view in different device sizes so if that all sounds good let's dive in but actually one thing if you haven't hit that like button yet or you're not subscribed to the channel please do it really helps out my channel and it lets me know that you guys want to see more Swift UI tutorials so if that sounds good please give this video a like and subscribe alright let's do this so the first thing we're going to want to do is to go to this tutorial link in the description and go ahead and download the project files because it's going to start us off with a starter project that's going to contain some of the files that we're going to need to complete this project namely the sample data some helper methods and structs and classes now in this particular swift UI tutorial it only focuses on the Swift UI part and it doesn't really explain all the stuff that's in the starter project but don't worry I'm gonna go through that stuff with you guys just in case you're not familiar with some of the things that they're doing in there already so I've already got the file downloaded it's this one building lists and navigation dot zip so I'm going to go ahead and open that and it's gonna have two folders completing a starting point and obviously you know want to grab the starting point one let's go ahead and open up that actually I'm gonna do it through the Xcode 9 beta although so it doesn't get confused as to which version because I have both versions on here so let's go into desktop sample apps this one right here just starting point landmarks and open up there sample project yep all right so it's gonna start us off like this so before we dive in and start coding up some you eyes we're gonna take a look at what they have here and they've organized that really nicely for us in these subfolders so first of all let's look into resources here we've got landmark data JSON and if you're not familiar with this JSON format it's basically a format to describe items of data that we're going to use in our app let me let me show you so this outer square bracket is basically a collection of items and each item is separated by a comma so you see a comma here and a comma there and each item is surrounded by a pair of curly brackets and then the data inside is the actual data for that item so you see we have things like name category city state ID park coordinates for the location and the image now the images they're all here in the resources already so we have all of this set up ready to go the problem is that this data in this JSON file is not usable as is we actually have to process this JSON file and turn it into Struck's or things that we can use so that is what inside the model you have this data file that's what this is so let me just close go editor only and you can see here that it's got this load function now I'm not going to describe all of this code but it basically takes that JSON file and breaks it up into a collection of landmark objects that we can use and then notice here that they declared this global variable called landmark data which calls that load function and passes in the JSON file all right so this landmark data global variable is going to contain that array of landmarks and if you don't know what an array is it's just a list of items to put it simply there's also another image store class here and this is actually a singleton class now this is going to help us return these images in the sizes that we need so I'm not gonna dive too far deep into this it's a lot of code here to do that but when we finally get to using it I'll point out to you exactly where where it comes into play but for now we have this data file here we also have land of mark dot Swift now each of these landmark objects represents one landmark from the data file remember how the JSON data file was a collection of landmarks separated by commas well each of those landmarks is going to be represented by this struct here so one cool thing I can do for you is do a sidebyside comparison of let's see here resources nine Mark JSON let me close this was that alright so here is that landmark structure and here is our JSON file so you can see that in maps right we've got the name it's going to go into this property right here we've got a category that's going to go down here and you can see there's a onetoone mapping there's an ID there's ID image name and coordinates image name and coordinates and then park and State Park and a state all right so that's really cool now let's go back to the file navigator all right so let's go ahead and open that close that dual window we've got the app delegate the seen delegate I describe this stuff back in the previous lesson so take a look at that if you're not sure what these are here is landmark detail about Swift now this is actually the thing that we created in part one this is that Turtle Rock Joshua Tree National Park detailed view so let's just preview it to make sure that it looks correct otherwise wheel we're going to be building off of a wrong base already so it's gonna take a while all right under supporting views while that happens I'm not going to click away from it we also have circle image and map view so these are two views that we've built in the previous lesson that are used in the landmark detailed view you can see that this is the circle image and this is the map view they're used in this to build out the overall detailed view so you can see there and the map is not showing up because we're not in live preview but if I turn that on you're gonna see it go to turtle rock all right so that's what we've got starting out now let's dive in and start building our row I'm going to do this under the supporting views group because this is a single row in a larger list and so I consider that a supporting view so let's go ahead and create a new file right there and under iOS choose swift UI view that's what we've been doing for the last little while right landmark row let's create that and let me just show the preview this is just going to be our basic hello world UI view but we're going to change that so inside this structure that describes the content and layout you know this this label could let me change this to let's say Turtle Rock right now this would be a static piece of text and we don't want our rows to be static pieces of text we want them to be dynamic because each row represents some sort of landmark we're going to store the landmark that this robe represents in a property that we're going to declare up here so let's declare and you probably called landmark and it's going to be of type landmark all right at this point if you try to run it it's going to fail so you'll notice that now when you try to create a new landmark row object that this doesn't work anymore you need to supply the parameter that is going to be set to this landmark property so why don't we use autocomplete open up a bracket hit enter you can see now that whenever you want to create a new Atlanta murkrow object you're going to have to pass in a landmark object to set to this property so what we're going to do is you know how I showed you that there was this global variable called landmark data and that this loads the JSON file and parses it and returns to us an array of landmark objects right well this is exactly what we need so why don't we access this global variable to pass in so that we have something to show so I am going to call land mark data and I'm going to access the first element now this preview is basically going to create a new landmark row it's going to pass in the first item in our data set which is going to be set here and then finally for my text element I can actually access the name property of the landmark that got passed in so name and let's see what we get on the righthand side so you can see here it says Turtle Rock now don't be fooled because I had turtle Huck there before let's say I change this to one right you can see now it's silver salmon Creek and the order of these elements corresponds to the order of the data in here in the JSON file alright next we're going to add an image beside the name so let's go back here since we have the landmark that we want to show for this row let's see what else is in here so this landmark actually has an image property which returns to us an image view and we can pass in the size that we want so let's say 50 let's see how that looks like well actually this is going to crash reason is because if we want to show two elements side by side remember we have to use an H stack or a horizontal stack view so let's create one like that and let's just cut and paste these two elements into here well let me just indent this so it's a little easier to read ah I know why it looks so weird let's create more space there we go so we've got our zoom there we've got our image and we've got our landmark name so what is this image property why don't we go take a look hold down command you can click it jump to definition so we can see what this function returns you can also use that shortcut key right there so this is our landmark structure this is the image function and it uses that image store right and it accepts a size and then it returns us an image so this image store is what I pointed out to you earlier inside this data file remember here image store this guy so all this code right here basically reads the image from here turns it into the size that we want and returns it so that's what that was is responsible for so let's go back to our or where were we here landmark row all right so we've got an image we've got the text but it's kind of centered right and we want our rows to stretch for the whole width so let's close that I'm going to add a spacer at the back here now that's cool it's going to push it all the way to the edges like that now I am going to change the preview because after all we are working on a single row here right and what we see on the preview is like this giant screen this whole view we don't need that we just need to look at a single row so you can actually modify what we see in terms of the preview so for example take a look at this we can call a method called preview layout and then we can pass in fixed we want to look at a fixed size for the layout and for the width I'm going to put 300 in the height I'm going to put 70 so let's take a look at how that looks like so here we can focus on a single row so what's even cooler is that I can actually preview a couple of different rows or three or four however many I want by using something called group so let me declare a new group here and let me put this row in here all right so that's showing my landmark data the first element let me just create some more space and let's say I want to take a look at another piece of data for my preview so that I can make sure that the view that I'm coding here works for my sample set of data so here I've created two landmark rows one showing the first item in my JSON data file and the second one showing the first element for my JSON data file and what I noticed he is that there is actually a couple of margins in the top and bottom I want to have a margin on the left as well and so I can add some padding to my H stack so I can say the leading edge let's say 10 like that so that gives us that little bit of padding there now to simplify this code because this isn't a group I can actually apply the preview layout to the entire group instead of to the individual elements inside it so I'm going to delete that and I'm going to just call preview layout on the entire group alright up next we're going to see how we can start displaying a list of data now that we have our rows so let's go back here and let's create a landmark list so we're going to create a new file and I'm actually going to create it out here because this is not going to be a supporting view it's actually going to be our root view once we're finished with this so under iOS let's choose Swift UI view and then why don't we call this guy landmark a list so I'm going to move it up here so it's just easier to reference and see all right so again we've got our basic hello world with one text element so in order to display a list of data we simply use the list element so that's as easy as it gets I'll list like that all right and then we can paste in a couple of landmark rows right that's the thing we just created here so why don't we try that so land mark whoops landmark row and landmark row when I try to create a new one it expects me to pass in a piece of well a landmark data right a landmark object so let me just create two rows first so it's easier to see for you so I've got two landmark rows right here and inside each one I'm gonna pass in a different item from our data set so landmark data element zero and landmark data element one let's take a look at what we get right here so instantly this preview is so cool we can see Turtle Rock in silver salmon Creek so this is cool and all but this is not exactly what we want right because we're showing static pieces of information here and in our collection of landmarks we actually have a lot more places and so I don't want to be hand coding you know each row like this what we want to do instead is actually make our list read off of our location data array let's just delete this and we can do that by using one of the initializers of the list namely this one right here so we can pass in our location data array I know this kind of looks like a mess but not a location that I keep calling it location data landmark data but the problem is that we need to exactly specify what the unique ID that uniquely identifies each item is and luckily for us for all of our landmarks we actually have an ID that is meant for exactly this purpose and you can see in the landmark data though Jason we also have the ID and each of them are different as well so going back here creating our list right here landmark data is our collection of data and we're going to call identified by and here we're going to specify the property or the key that we want to use and that is ID now I have to hit backslash because I need to escape the dot there and that's how you specify that you want to use this property as the unique ID now for selection I'm not going to do anything with that that's an optional parameter and for the action again also this is a little bit of a mess I don't have to specify that but for the road content I do want to specify this closer closure so let me double click that it's going to open up as a trail enclosure and this kind of looks it's really hard to read all right so now it's a little more clear and this I just have to specify a parameter I'm going to call it landmark so let me explain what's happening here so we're creating a brand new list and we are passing in our collection of data telling it what the unique identifier is so it can tell how many items there are and what items are with what items for each of those items in the collection it's going to run the code in our closure right here this is where we want to return the view to display that specific piece of data that it is looking at right because it's going to go through this collection so we basically in here we want to return a landmark row you know the thing that we just built so we're gonna create a new landmark row we're gonna have to pass in the landmark that's not a problem because we have it as a parameter up here so I'm just going to specify that all right so this says it returns a view but it actually we're returning a landmark row to be more specific so let's replace that right there and we should be good yeah all right so you see it's pretty cool now the list is dynamically reading off our of our data set and producing this list now one more thing I want to show you is you know how for our data set here our list of landmarks we have to use this identified by and tell it which property to use well we can actually improve that for our landmark structure if we say that it conforms to the identifiable protocol and if we just take a look at that so that we hold down this and you can see that it is a type that you can compare for identity equality open it up in developer documentation and let's just take a look here there's not too much information about it but what it does say down here is it is you need a unique identifier and an ID property here right so we don't really have to do anything else because it has that property right there and so now that the landmark structure conforms to the identifiable protocol we no longer have to manually specify this method here and then we can just specify our collection of landmark objects like that so now we've got our list of data but how do we transition from this list to the detail view when someone taps on one of these rows well for that we need to put our list into what's called a navigation view and then for each of these items that it generates these rows for instead of just returning a row we need to return that row wrapped inside of a navigation button so that allows the user to tap on it and then we can trigger some sort of destination for that button so let me show you how that's done so first of all we're going to declare a navigation view and then all we have to do is put our list inside of it so that takes care of that but the second issue is that we need to wrap our landmark row in a navigation button so navigation button here and we are going to create an instance of it now there are a whole bunch of different initializers for this navigation button but as I was learning Swift UI through the Apple tutorials I noticed that all we needed at least for this particular case anyways was to specify a destination so that's what I'm going to do here I'm just going to choose this one I'm going to get rid of the label I don't quite fully understand how the navigation button works yet but I'm sure in time as I dig more into Swift UI I'll learn but for now if we specify the landmark detail view if we create a new instance of it right here like that when this navigation button triggers it's going to send the user to the landmark detailed view and then this is how we would wrap this landmark row inside this navigation button now I I was encountering this error here and it's basically saying that right here we're returning a navigation button but up here for this closure we are specifying landmark row and then what I eventually realized is that we don't need to specify a return type actually at all so if we leave it like that everything's going to be good and then inside here we can try and run it again let's go a live preview load all right and we tap on one of these so we can go to the detail view there's a back button and we'll get you a different one but you notice how they are all turtle rock right no matter what I choose it's showing turtle rock and that is because inside the landmark detailed view we have these hardcoded values right it's set to this particular text here the circle image itself is hardcoded to this image and the map view itself is hardcoded to this coordinate for turtle rock so actually if we want to make it dynamic we need to update this landmark detail right it's got to keep track of a particular landmark that it wants to display and then we have to pass in the coordinates into the map view that we wanted to show we need to pass in the image into the circle image view that we want to show and we need to pass in the landmarks named Park state into all of these fields here to make it dynamic so let's take a look at how we're going to make this happen so this is the landmark detail why don't we go up one level and we go to the landmark list so here's what we want to do this is the list that is showing each landmark from the collection of landmarks for each single landmark it is showing a row right and this row we made a dynamic by passing in the landmark that I wants to show and then it's showing that landmarks picture and that landmarks name that's exactly what we need to do here as well for the landmark detail that's and that's gonna make it so that when they tap on Twin Lake they're gonna get the landmark detail for Twin Lake right icy Bay they're gonna get that landmark detail for icy Bay so essentially we want to change the landmark detail so that we can pass a landmark inside so why don't we now drill down to landmark detail and see how we can make that happen so the first thing I would do is create a new landmark property here right so that we make it so that when we declare a landmark detail we need to pass in the landmark that we want it to show like what landmark do we want the detail for right we need to specify that so now because I've added this landmark property here whenever you create a new landmark detail object you need to specify the value for that so right now in this preview I'm going to just put in some piece of dummy data we're gonna say landmark data let's say element number 3 just for sample data purpose all right you're not gonna really see anything change here you know why because all we're doing when we pass in landmark data 3 here is we're setting this property to landmark the third data element but the map view is still hardcoded to those coordinates the circle image is still hardcoded through this image and all of this text is still hardcoded so the first thing we can do actually is we can change this text right so instead of hardcoding that we can show landmark dot name right that's from this property up here all right so it's already going to be dynamic let's resume build failed that's because that's because now that we've added this landmark we need to go back to the landmark list right this navigation button this is no longer valid we can't just create a landmark detail we need to specify which landmark you need that too so let's do that and then we're gonna pass in landmark just like we're doing here for the row okay so that should be good all right build failed in so here in scene delegate again we need to the route view is landmark detail right when you launch the app it's going to show landmark detail and again that's no longer enough we need to specify a piece of dummy data for now so eventually we're going to want to change this to show the list at the root view actually why don't we do that right now we're going out of order a little bit so we're going to show the landmark list as the root view for when the app launches so that's eventually what we want to do anyways so this is in the scene delegate all right let's save it and let's hit command B and build it make sure it all runs and let's go back to landmark detail alright so this is where we're at here we've got the landmark property being passed in and I am updating these hardcoded strings to show the values from the landmark that is passed in so this would be the park and this would be at let's resume this would be the state and the market dot state and so I want to see those values update right there so regenerating all right so we've got st. mary lake Glacier Glacier National Park and Montana and this comes from this piece of sample data that I supplied for the preview now we need to update the coordinates in the circle image so we want to make it so that we can pass in the landmark right into the map view and pass in the landmark into the circle image to let it know what it should be displaying so why don't we do the map view first let's drill in jump into the definition for the map view here and up here we are going to declare variable or property rather for the coordinate and this is going to be CL location coordinate too deep and this is basically going to replace this line of code so we don't have to hard code these coordinates so why don't we erase that all right so now in the preview we're missing the parameter right for declaring the map view because we just added that store property so now we have to specify coordinate right I'm going to specify a sample so landmark data let's do the first piece and we're gonna say a little location coordinate like that so that that's gonna be Turtle Rock that's the first element but that's all we need to do for the map view so now it expects us to pass in the coordinates that we wanted to hone in on all right so now let's go into the circle image and up here let's look for an image let's create an image property right there so whenever we create a new circle image view it requires us to pass in the image that we want it to show so no longer are we gonna show a hardcoded turtle rock image we are going to show the image that is set here all right so circle image now for this preview we can't just declare a new circle image we need to pass in an actual image so I'm going to grab keep doing that I'm mark data I'm going to grab that's the first element or the second element rather because then a race starts at zero so the first element is 0 second element is 1 so I'm going to grab element the second element and then I'm going to call the image and the size of this was 250 and I know that so when we run this missing so it doesn't build right now because in the landmark detail we have to supply the parameters when we created the new map view in the new circle image so let's fix that first all right so this is the landmark detail we've already dynamically set the landmark named park state and we've just modified the map view in the circle image to accept the coordinates and the actual image file here so let us call the new initializer we're going to pass in the land mark dot coordinate location coordinate and for circle image we are going to pass in the landmark dot image for size 250 and we're going to zoom so sweet for it boom is that mapped I'm not gonna update ya should update there we go cool so now we can go back to our list because everything is dynamic now we've changed circle image to accept the image map view to accept the coordinate a landmark detail to accept the landmark and we've already updated the landmark list right here when we show the rope and we create the navigation button we're passing in the landmark to the landmark detail so now if I tap on any of these come on let me try to get out of this preview and try and get back into the preview so you can see there's still some things to work out but there we go Turtle Rock chili cook trail and all of this is dynamic and it's passing the data from the list to the detail view it's just really really cool now there is one thing I forgot to show you guys which is basically to set the navigation bar titles so in this navigation view you can actually call this navigation bar title here and then you can pass in a textview and that's going to show up landmarks that's going to show up up there let's see if we can see that mmm not really I don't really know where that's supposed to show up to be honest all right you know what we're gonna try to launch it in the simulator and see what happens all right so we've got our iPhone 10s on iOS 13 alright so we don't have a navigation title here either so I don't really know where it shows up if you guys know let me know in the comment section below I did something wrong I crashed it I know what happened there yeah keep in mind this is all beta software everything's on beta so don't expect everything to work perfectly however in the landmark detail I actually in here probably set a navigation so we're gonna do that here the navigation bar title display mode maybe that's what we needed a display mode so this one we're gonna make this one dynamic right because I'm passing the landmark name because this is the detail view and then for the display mode let's say in line let's see if we can see that in more detail it's not showing me at the right preview for the right view that I'm looking at come on I think it's it's basically giving up on me ah there we go and you don't run it well it's got an app icon and everything ah there it is Turtle Rock cool yeah so maybe this list here we have if we wanted to show it you know we could change this to what was it display mode docked in line let's run it nope well yeah well okay so what we're gonna do now I promise to also show you how you can preview it on different devices here so you can see here on the landmark list we're just showing it but if you call the display previewed sort of preview device come on autocomplete there we go we basically pass in we create a new preview device and we pass in the wall value and this loots this string I don't know where they get this from but it is basically something like this let's see if that works all right so finally I wasn't even looking and it changed cool so there's also a way to preview your preview on multiple devices at the same time now I'm not going to show you the code here but if you're interested just follow the link in the description to the Apple swift UI tutorial that this video tutorial is based off of if you go all the way to the bottom you're going to see the snippet of code that they use to show multiple device previews at the same time now I want to turn it over to you did you install any of the betas on your machines I know in the past that I never install alpha beta software on my machines but when they announced with UI I just couldn't not install it so I bit the bullet and went ahead and did it so far so good I haven't noticed any big problems let me know what your experience has been by leaving a quick comment below if you like this video please hit like and please subscribe to the channel as that sort of stuff really helps me and helps the channel grow and if you want to see more well there's more Swift UI content right there alright thanks for watching I'll see you in the next lesson
