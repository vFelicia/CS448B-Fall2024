With timestamps:

00:01 - [Music]
00:07 - hello welcome to lesson two of how to
00:09 - make iPhone apps with no programming
00:11 - experience in today's lesson we're going
00:13 - to jump right into Swift Code because I
00:15 - know for a lot of you who are just
00:17 - starting out the most intimidating
00:19 - aspect of building apps is the coding
00:22 - side of things so I want to show you in
00:24 - today's lesson that Swift Code doesn't
00:27 - have to be hard to understand and I bet
00:29 - you by the end of this lesson you'll be
00:31 - surprised at how you are able to follow
00:33 - along and interpret Swift Code and
00:36 - hopefully you won't be as intimidated by
00:38 - coding as you were when you started out
00:41 - to get the most out of this lesson and
00:43 - if you're serious about app development
00:45 - I do recommend that you open up xcode
00:48 - and you follow along and just typing the
00:51 - Swift Code out as you're following along
00:53 - even though you're not really building
00:54 - anything it's going to create this
00:56 - mental shift in your head that you can
00:58 - do this and you can write Swift
01:00 - Code so once again if you missed the
01:03 - last lesson you can download xcode from
01:05 - the Mac App Store uh just search for
01:07 - xcode right here I'm using a beta
01:10 - version of xcode hopefully by the time
01:12 - you're watching this you will be able to
01:14 - download this xcode version 8 officially
01:17 - released in the Mac App Store I just
01:19 - want to get ahead of the game so I'm
01:21 - recording this on a beta version of
01:23 - version 8 even if you have version 7 or
01:26 - you can only download version 7 right
01:28 - now don't worry about it just just go
01:30 - ahead with it it's not going to look
01:32 - much different if at all okay so the
01:35 - thing I'm going to start with first is a
01:37 - playground so here is's the welcome
01:40 - dialogue of xcode and you can just click
01:42 - this get started with a playground if
01:44 - you don't see this simply go up to your
01:47 - xcode menu here go file new and choose
01:52 - playground what you're going to get is a
01:54 - dialogue that asks you to name your
01:56 - playground I'm just going to leave it as
01:57 - my playground and I'm going to choose
01:59 - platform iOS make sure you're not
02:01 - selected Mac OS or TV OS choose iOS
02:06 - click next and you're going to save it
02:07 - somewhere I'm just going to save it on
02:09 - my desktop since it's temporary and this
02:12 - is what your playground screen looks
02:14 - like so what a playground is it's a
02:16 - place where you can try out some Swift
02:18 - code without necessarily committing to a
02:20 - full-fledged app project which comes
02:22 - with views and uh view controllers and
02:25 - other things like that right here all
02:27 - we're doing is we're going to be able to
02:29 - write some Swift Code it's going to
02:31 - execute the code and output something on
02:33 - the right hand side here now you you
02:36 - might have noticed that it took a while
02:38 - for this to show up uh up here on this
02:41 - status bar it says Ready well when you
02:43 - first launch your playground it might be
02:44 - spinning and it might say loading
02:46 - something well when it's ready it should
02:49 - have processed whatever is down here
02:51 - another thing to double check is if you
02:53 - go down here into this play Arrow I want
02:56 - you to click it and hold it and a menu
02:59 - will pop up
03:00 - mine is set to automatically run which
03:02 - means whenever I type new Swift code
03:04 - into the window it's going to
03:06 - automatically run that Swift Code and I
03:07 - want you to uh check that off as well so
03:11 - make sure you have this selected and not
03:13 - manually run so what this is here this
03:17 - main part this is where you write your
03:18 - Swift Code it's the code editor and on
03:21 - the right hand side here you're going to
03:23 - see some output based on what you're
03:25 - typing in
03:26 - here one more thing before we continue
03:28 - on a lot of people ask me about line
03:30 - numbers I think by default they should
03:32 - be enabled but if for some reason you
03:34 - don't see these line numbers enabled
03:36 - just go into your xcode
03:38 - preferences under text editing and you
03:41 - can say show line numbers here all right
03:44 - so let's get started first of all we're
03:46 - going to ignore these two lines we're
03:48 - going to save that for the end of the
03:49 - video and I'll explain to you what those
03:51 - are first of all I want to focus on this
03:54 - so take note here that I've got a piece
03:56 - of text the only thing that really makes
03:58 - sense here h playground and it's
04:00 - surrounded by quotations and when you do
04:03 - that it highlights it in Red so you can
04:05 - easily tell it's a piece of text next we
04:08 - have this keyword here VAR and you know
04:11 - that it's a keyword because it's
04:14 - highlighted in pink so what are we doing
04:16 - here well we've got this piece of text
04:19 - hello playground and we need to store it
04:21 - somewhere so what we're going to do is
04:23 - declare a variable that's what v stands
04:27 - for and we're going to use this variable
04:29 - you can think of it as a bucket or a
04:31 - label that can store something or you
04:34 - can label something that you can
04:35 - reference later and we're naming this
04:37 - variable St
04:39 - Str okay so this keyword V is to declare
04:43 - a new variable St is the name of my
04:47 - variable and equals is me assigning this
04:51 - piece of text into this variable so now
04:55 - whenever I access this variable St Str I
04:59 - can retrieve my piece of text so once
05:02 - again V declaring a variable naming the
05:07 - variable an equal sign is assigning
05:10 - whatever is on the right hand side into
05:12 - that variable in this case on the right
05:14 - hand side of the equal sign I have a
05:16 - piece of text called hello playground so
05:19 - let me write now print is another
05:22 - keyword and I'm going to print Str Str
05:25 - and press enter so it may take a while
05:28 - for your playground to run
05:30 - if it's set to automatically run and
05:32 - when it does you can see the output here
05:35 - now you'll notice that it has a sln at
05:38 - the end of hello playground and that sln
05:41 - just stands for a new line break so it
05:43 - starts a new line the next time you
05:45 - print
05:46 - something now you may wonder why is the
05:49 - output here hello playground when I
05:53 - assign this piece of text into this
05:55 - variable and then why does it output
05:57 - again when I use the keyword print
06:01 - furthermore you may notice that down
06:03 - here this little tray has come up and
06:06 - you can also see Hello playground as
06:08 - well well what's going on is that this
06:11 - area right here at the bottom is
06:14 - actually the output of your program or
06:16 - your Swift code right here on the right
06:19 - hand side this is just kind of like a a
06:21 - guide that's showing you what's going on
06:23 - with each of your lines of code so here
06:25 - it's just showing you what you've
06:26 - assigned into the variable and here it's
06:29 - just showing you what the output is but
06:31 - really the output of your program is
06:33 - down here whereas the right hand side is
06:35 - kind of just a a check or a guide for
06:38 - each of your lines of code to show you
06:40 - what's going on okay so now let's
06:43 - declare our own variable and assign
06:45 - something else into it VAR I'm going to
06:48 - call this variable a I'm going to put
06:51 - equals and I'm going to put the number
06:53 - five so here instead of a piece of text
06:56 - I'm assigning the number five into my
06:59 - variable a so you can see here it is
07:02 - telling me that I've assigned five into
07:05 - my variable but you'll notice that
07:06 - nothing shows down here unless I use the
07:08 - print command so let me declare another
07:11 - variable
07:13 - now VAR b equal 1 and again that's a
07:19 - separate variable and I'm putting one
07:21 - into B now with variables remember I
07:23 - told you that it's like a label you can
07:25 - use to retrieve whatever you stored into
07:27 - it well I can do something like
07:31 - print a +
07:34 - b what that's going to give me is
07:39 - six and you can see here because I used
07:41 - the keyword print it is showing up here
07:44 - and you can see it's on a new line now
07:46 - because there is a sln by default when
07:49 - you use the print command uh it's going
07:52 - to append that sln to your
07:56 - output okay now I'm going to show you
07:58 - something else another key keyword it's
08:00 - called the if statement now this keyword
08:03 - if allows you to check a certain
08:06 - condition and if that condition is true
08:08 - to perform a set of actions and if the
08:11 - condition is false you're able to do
08:13 - something else so let me say if a + b is
08:20 - uh greater than 8 now we know for a fact
08:23 - that a plus b is 6 so it's not going to
08:26 - be true so how do we write the sections
08:30 - that execute whether it's true or false
08:33 - we use these curly brackets here and
08:38 - there's another keyword called
08:41 - else and we open up another set of curly
08:44 - brackets so let me go through what this
08:46 - means with you so if A+ B is greater
08:50 - than 8 then execute the code in between
08:54 - these curly brackets else if that isn't
08:58 - true then execute whatever code is in
09:01 - here so it's either going to
09:03 - execute the code inside these curly
09:06 - brackets or the code inside these curly
09:08 - brackets based on this condition so let
09:12 - me demonstrate here let me
09:15 - print print a piece of text here and say
09:18 - true and print a piece of text here that
09:22 - says
09:23 - false let's see what it says in the
09:25 - output down here now it says false and
09:28 - that's right right a a plus b is 6 it's
09:31 - not greater than 8 so that's why it's
09:34 - doing this code and not this code now
09:36 - what if we change the variable up here
09:39 - let's say that we made B five as well so
09:43 - now A plus b is 10 and it's greater than
09:46 - 8 so it's going to run this piece of
09:48 - code instead and you can see down here
09:49 - in the output it says true so
09:52 - congratulations you've written your
09:54 - first pieces of Swift Code and I'm sure
09:57 - that you were surprised your able to
10:00 - understand all of that it's not as
10:01 - difficult as you might think you even
10:03 - expressed some logic in your Swift Code
10:06 - now let me go back and explain to you
10:08 - what these two line means so this top
10:11 - one in green is called a comment and
10:15 - it's signified by these two slashes
10:17 - right here anything in that same line
10:20 - you can write is just a documentation or
10:23 - a comment for yourself as the coder this
10:26 - isn't code that's going to get run so
10:28 - for example
10:29 - we can write a comment like this declare
10:34 - two variables A and B and here we can
10:39 - say you know print out A+ B right here
10:45 - it doesn't make much sense because our
10:47 - code is so short but imagine if you had
10:49 - a complete app project with lots of code
10:52 - and chances are you're going to forget
10:54 - what you wrote you know a year down the
10:56 - line so writing comments is definitely
10:58 - helpful and recommended now import UI
11:02 - kit what does import mean import means
11:04 - it's another keyword that adds UI kit to
11:07 - your project now UI kit is a set of
11:10 - helpful libraries and classes that Apple
11:13 - provides for us to build apps with and
11:15 - it contains instructions for things like
11:17 - buttons and Views and labels and that
11:19 - sort of thing we're going to be working
11:21 - with uiit extensively so don't worry
11:23 - about that for now but whenever you
11:25 - start a new app project you're going to
11:28 - see this Port UI kit at the
11:31 - top okay so that does it for this lesson
11:34 - I hope you were able to follow along and
11:37 - try it out on your own computer as well
11:39 - in the next lesson I'm going to walk you
11:41 - through xcode and show you all of the
11:42 - different uh main areas of xcode that
11:45 - you'll be using okay I'll see you in the
11:47 - next lesson bye for now
11:50 - [Music]

Cleaned transcript:

hello welcome to lesson two of how to make iPhone apps with no programming experience in today's lesson we're going to jump right into Swift Code because I know for a lot of you who are just starting out the most intimidating aspect of building apps is the coding side of things so I want to show you in today's lesson that Swift Code doesn't have to be hard to understand and I bet you by the end of this lesson you'll be surprised at how you are able to follow along and interpret Swift Code and hopefully you won't be as intimidated by coding as you were when you started out to get the most out of this lesson and if you're serious about app development I do recommend that you open up xcode and you follow along and just typing the Swift Code out as you're following along even though you're not really building anything it's going to create this mental shift in your head that you can do this and you can write Swift Code so once again if you missed the last lesson you can download xcode from the Mac App Store uh just search for xcode right here I'm using a beta version of xcode hopefully by the time you're watching this you will be able to download this xcode version 8 officially released in the Mac App Store I just want to get ahead of the game so I'm recording this on a beta version of version 8 even if you have version 7 or you can only download version 7 right now don't worry about it just just go ahead with it it's not going to look much different if at all okay so the thing I'm going to start with first is a playground so here is's the welcome dialogue of xcode and you can just click this get started with a playground if you don't see this simply go up to your xcode menu here go file new and choose playground what you're going to get is a dialogue that asks you to name your playground I'm just going to leave it as my playground and I'm going to choose platform iOS make sure you're not selected Mac OS or TV OS choose iOS click next and you're going to save it somewhere I'm just going to save it on my desktop since it's temporary and this is what your playground screen looks like so what a playground is it's a place where you can try out some Swift code without necessarily committing to a fullfledged app project which comes with views and uh view controllers and other things like that right here all we're doing is we're going to be able to write some Swift Code it's going to execute the code and output something on the right hand side here now you you might have noticed that it took a while for this to show up uh up here on this status bar it says Ready well when you first launch your playground it might be spinning and it might say loading something well when it's ready it should have processed whatever is down here another thing to double check is if you go down here into this play Arrow I want you to click it and hold it and a menu will pop up mine is set to automatically run which means whenever I type new Swift code into the window it's going to automatically run that Swift Code and I want you to uh check that off as well so make sure you have this selected and not manually run so what this is here this main part this is where you write your Swift Code it's the code editor and on the right hand side here you're going to see some output based on what you're typing in here one more thing before we continue on a lot of people ask me about line numbers I think by default they should be enabled but if for some reason you don't see these line numbers enabled just go into your xcode preferences under text editing and you can say show line numbers here all right so let's get started first of all we're going to ignore these two lines we're going to save that for the end of the video and I'll explain to you what those are first of all I want to focus on this so take note here that I've got a piece of text the only thing that really makes sense here h playground and it's surrounded by quotations and when you do that it highlights it in Red so you can easily tell it's a piece of text next we have this keyword here VAR and you know that it's a keyword because it's highlighted in pink so what are we doing here well we've got this piece of text hello playground and we need to store it somewhere so what we're going to do is declare a variable that's what v stands for and we're going to use this variable you can think of it as a bucket or a label that can store something or you can label something that you can reference later and we're naming this variable St Str okay so this keyword V is to declare a new variable St is the name of my variable and equals is me assigning this piece of text into this variable so now whenever I access this variable St Str I can retrieve my piece of text so once again V declaring a variable naming the variable an equal sign is assigning whatever is on the right hand side into that variable in this case on the right hand side of the equal sign I have a piece of text called hello playground so let me write now print is another keyword and I'm going to print Str Str and press enter so it may take a while for your playground to run if it's set to automatically run and when it does you can see the output here now you'll notice that it has a sln at the end of hello playground and that sln just stands for a new line break so it starts a new line the next time you print something now you may wonder why is the output here hello playground when I assign this piece of text into this variable and then why does it output again when I use the keyword print furthermore you may notice that down here this little tray has come up and you can also see Hello playground as well well what's going on is that this area right here at the bottom is actually the output of your program or your Swift code right here on the right hand side this is just kind of like a a guide that's showing you what's going on with each of your lines of code so here it's just showing you what you've assigned into the variable and here it's just showing you what the output is but really the output of your program is down here whereas the right hand side is kind of just a a check or a guide for each of your lines of code to show you what's going on okay so now let's declare our own variable and assign something else into it VAR I'm going to call this variable a I'm going to put equals and I'm going to put the number five so here instead of a piece of text I'm assigning the number five into my variable a so you can see here it is telling me that I've assigned five into my variable but you'll notice that nothing shows down here unless I use the print command so let me declare another variable now VAR b equal 1 and again that's a separate variable and I'm putting one into B now with variables remember I told you that it's like a label you can use to retrieve whatever you stored into it well I can do something like print a + b what that's going to give me is six and you can see here because I used the keyword print it is showing up here and you can see it's on a new line now because there is a sln by default when you use the print command uh it's going to append that sln to your output okay now I'm going to show you something else another key keyword it's called the if statement now this keyword if allows you to check a certain condition and if that condition is true to perform a set of actions and if the condition is false you're able to do something else so let me say if a + b is uh greater than 8 now we know for a fact that a plus b is 6 so it's not going to be true so how do we write the sections that execute whether it's true or false we use these curly brackets here and there's another keyword called else and we open up another set of curly brackets so let me go through what this means with you so if A+ B is greater than 8 then execute the code in between these curly brackets else if that isn't true then execute whatever code is in here so it's either going to execute the code inside these curly brackets or the code inside these curly brackets based on this condition so let me demonstrate here let me print print a piece of text here and say true and print a piece of text here that says false let's see what it says in the output down here now it says false and that's right right a a plus b is 6 it's not greater than 8 so that's why it's doing this code and not this code now what if we change the variable up here let's say that we made B five as well so now A plus b is 10 and it's greater than 8 so it's going to run this piece of code instead and you can see down here in the output it says true so congratulations you've written your first pieces of Swift Code and I'm sure that you were surprised your able to understand all of that it's not as difficult as you might think you even expressed some logic in your Swift Code now let me go back and explain to you what these two line means so this top one in green is called a comment and it's signified by these two slashes right here anything in that same line you can write is just a documentation or a comment for yourself as the coder this isn't code that's going to get run so for example we can write a comment like this declare two variables A and B and here we can say you know print out A+ B right here it doesn't make much sense because our code is so short but imagine if you had a complete app project with lots of code and chances are you're going to forget what you wrote you know a year down the line so writing comments is definitely helpful and recommended now import UI kit what does import mean import means it's another keyword that adds UI kit to your project now UI kit is a set of helpful libraries and classes that Apple provides for us to build apps with and it contains instructions for things like buttons and Views and labels and that sort of thing we're going to be working with uiit extensively so don't worry about that for now but whenever you start a new app project you're going to see this Port UI kit at the top okay so that does it for this lesson I hope you were able to follow along and try it out on your own computer as well in the next lesson I'm going to walk you through xcode and show you all of the different uh main areas of xcode that you'll be using okay I'll see you in the next lesson bye for now
