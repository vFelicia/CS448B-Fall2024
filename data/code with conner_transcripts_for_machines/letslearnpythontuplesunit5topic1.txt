hello humans welcome back again this is code with connor we are doing the let's learn python tutorial course we are now in unit number five which is our last unit let me double check that yep it's our last unit so we are in our last unit which is a big one it's on data structures this is kind of like everything's coming together into an important piece that lets us do a lot of other stuff in coding hopefully the unifor project went okay for you and you managed to get through that little palindrome checker looping through the words and we're going to jump into topic five we're going to start with tubals you know tubals are one of these things where it's like they have a niche and there's going to be times when you're like yeah i love some tubals and then when i'm going to teach you lists you're going to be like why would i ever use tubals but don't get me wrong there's still a great purpose for them and we should definitely hit on them it's just going to be a small lesson so here i am in my file and this is topic one for unit five we're gonna talk about two bulls now the important thing to understand about data structures up to this point every time we create a variable in our language that variable is allowed to store one thing and maybe we can change that thing like we can store a string called maestra and we can make it equal to hello and then later we can reassign it to be equal to world and that's all cool every variable we've created has only been able to be assigned one value and that's where data structures come in because that's not feasible you can't realistically program these largescale projects when every single piece of information has to have its own variable name and that's when we get into data structures and data structures allow us to have a single variable name that can contain a bunch of different values and some of those values might be able to be reassigned if we're talking about lists some of those values might be now permanently stored within that that data structure like tubals so that's what we mean when we talk about data structures it's not anything crazy fancy it's just it provides that flexibility then now we can have a single variable name just one of them but that variable name might be might allow us to reference a bunch of stuff think about strings and how we had a string but technically we had a whole bunch of characters and we could index and access individual characters within a string using just the strings variable name same idea here but now we can control what's in these kind of lists or these data structures so tubals use rounded brackets they look something like this so i have x as an input from the user i'll just get rid of these ones that was when i was testing so user inputs an x and a y and then this is me creating a tuple i called it chords and you'll notice it's rounded brackets comma separated values this idea of comma separated values is the norm in data structures when programming okay so here's the first comma here's the second all right now all i'm doing is storing it and then printing it i'm just printing the variable chord so let's just run that real quick and then we'll go from there so x let's say three y four and then i could see it prints rounded brackets three comma four so it's printing the x and the y using the variable chords okay now we can use index notation on this as well so instead of printing chords i could print chords box 0 which should only print the x so x negative 1 y 5 and it only prints the x variable okay because i can use that index notation to isolate one element within my data structure coming back over we could do the same with box one where it would only print the y or we could get a little fancier we could do something like x where we use the x and the y strings in combination with the items from the data structure now because these are in we have to make sure we cast them to strings because if we're concatenating them with other strings it doesn't know what to do and you'll see my error from before when i tried it and realized because i also make mistakes and there we go x is five y is negative one so it's reading from that thing and really you're not seeing the power of data structures here but if you had a long list of things that you wanted to reference and then you want to be able to grab from that list throughout your program you can create that list as a tuple and then just a single variable name allows you to grab it so imagine doing a hangman game for example and you want to have a tuple that has a whole bunch of puzzles in it so it might have you know 100 hangman puzzles stored in it as strings and then you want to have a random generator that picks a number within the size range of the tuple and then it can just grab it right out of that data structure because it knows that it can use the same variable name and then an index with an integer to reference one of the puzzles so things like that you start to see the value in data structures versus having to have individual variables for all of these and how do you pick one well they all have different variable names they can't just randomly pick a variable name but i can randomly pick a number and that number could be an index of a data structure which then points to a string so we start to kind of put it together like that now really quickly there's something called immutability that we need to talk about so i'm going to bring something up here let's do so immutability is going to be the ability for something to be able to be overwritten in memory or not overwritten in memory so examples are all over the place but a lot of times programming languages kind of fake immune fade commutability in that if you reassign a variable it just points to a different memory address or if you have a bunch of things that all have the same value technically the value is only stored in memory one place but all the things are pointing at that same place but they have the ability to point somewhere else if you change their value and then there's things that are immutable where it's like once we define them or once we initialize them they're kind of set and those values are not changing so tuples are a great example of that so i've set the value of chords to be x and y now x and y are variable names they represent integers so if i change the value of x and y does that change the value of chords so if i go x is now 20 and y is now 30 and i reprint the chords variable will they change let's run it and see so we'll set it to two and zero so i see two and zero but then between this line of code and this line of code they should have changed value but chords is still printing the old x value and the old y value and that's a demonstration of that immutability that we were talking about even though these were variables when they were put into chords when those variables got passed into this tubal the tuple read the actual value of those variables and stored the value into the tuple it did not store a reference to the variable and so the variable can then change later on and it does not change the tuple okay so now one last thing before we move on from this let's say i try to manually change the value directly in my tuple so i do chords box 0 is now 20 right so i'm going to say you know what i want to override that value forget that it's a variable not a variable whatever i need to change it in my tuple let's run this and it doesn't like it it says type error tubal object does not support item assignment so once you set up your tuple it's set up right that's that immutability piece and that's where we'll see more flexibility when we look at strings that's where we'll see the flexibility of using lists versus tuples is we have the ability to assign and change values dynamically okay so that's kind of an intro crash course with data structures let's look quickly at the challenge for this lesson which is not super practical because you wouldn't normally use tubals for something like this but you know what it kind of proves the point of what we're doing and that's okay sometimes that's all we need to do so here's our challenge x1 let's do 0 0 for x and y1 and then a secondary point so let's do 5 and 2 and then it calculates the slope of the line so remember your slope formula and you google it if you need to it's y2 minus y1 all divided by x2 minus x1 okay now what i want you to do and again not necessary but for the sake of practicing tuples store the first point as a coordinate store that first point the x1 y1 as a tuple store the second point the x2 y2 as a tuple and then use the tuples with index notation when doing your slope calculation and that's just a good way to test and make sure we're using that tuple stuff correctly all right so good luck with the challenge we're into topic five this is the data structures unit we're almost there and we'll see you back here for lesson number two very soon don't forget like share subscribe and good luck with your coding see ya