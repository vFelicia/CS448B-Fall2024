hello humans this is a b computer science a and we are looking at array lists all right so we're going to jump right into eclipse here there we are and we're going to go through some arraylist basics so i want to start with the most important part of arraylist which is the declaration and initialization because when we start dealing with a new variable type we need to know how to declare it and how to initialize it now arraylists are an object type similar to strings so there's an arraylist class in java that's going to be at the core of how this variable functions versus something like a primitive type like an int because it's an object type it's actually an object type that can store multiple objects within it so like a list of other objects now we can throw primitives into it so we can throw ins in it but what it really does is it puts integer objects in it which is integer is a wrapper class in java which is like capital i integer and there's like a capital d double and they basically just take a primitive type like an int and convert it into an object format so that it can be stored inside of an arraylist so we can do that we can put integers and doubles and stuff in there but they'll be treated like objects when they're in the arraylist so that's an important distinction to make let's look at notation so i have a private arraylist you'll notice the capitalization here because it is an object type capital a capital l and then triangular brackets our first time dealing with triangular brackets inside there we declare the type of object that we're going to store in this list now unlike lists in python where you can store objects of different types in the same list array lists make you declare the type of variable that can be in that list and that's it only one type per list all right so this one's going to be filled with strings here's my variable name i called it fruits equals new so we're calling on a constructor here a new arraylist object full of strings double brackets for the constructor and then semicolon now you'll notice no size so with arrays we had to hard code that size when we declared it and initialized it don't have to do that with arraylist so it can be empty and then we can add to it oh that's going to be exciting all right all right so let's look at how we can do this so in my main i'm just going to call my constructor so arraylist practice my object's new arraylist practice awesome and all my constructor is going to do is it's going to call this method filaret so let's see what's happening in fill array then we'll go from there so here's filaret all i'm doing is calling on the name of my list which in this case is fruits and it's a field variable it's a class variable so i can access it in my constructor dot add that's one of the many methods that come with array lists when you look at the autofill menu when you do fruits dot you can see that there's a lot of methods there you can go look at the arraylist documentation to see how many methods there are and what you can do with them so the dot add is just going to add something onto the end of the list okay and what is it going to add well it's going to add what my literal string is now this could be a variable string as well this could also be like new string new string banana that's also fine create a new temporary object and then pass it directly to the ad however you want to do that it's going to function the same way so i'm just using the add to put these in here in order so first to last so the last one this will be banana first one on the list is banana all right so let's say i want to call this so i want to let's say i want to print this so the first thing we should try is just printing it so like if i did a system.out.printline my my obj dot fruits let's just see what happens when we try to print that so you'll see it actually printed it do you know why because it's an object class and it's got a tostring method which means it's actually going to make sense of the arraylist without having to manually loop through to print it it's beautiful once you've worked with arrays for a little while you really can enjoy arraylists very quickly that's one thing there let's see what other methods i've got written so i've got one to remove all that takes a string and a list it's going to remove all elements of that string from the list all right so let's say i wanted to remove all the bananas from this list so let's do print it and then let's do my obs dot remove all and we're going to remove banana from my obs dot fruits from that particular list now i could always have that list called directly as a class variable inside the function but it's good for us to practice passing things as parameters to methods it's very normal and then we're going to print it again here we go i'm just gonna print it out all right all right a bunch of bananas in there and that's gonna print it again and there's no banana so it successfully removed them now how did it do that we're looping we're looping through the array list starting from zero oh we got a new method again dot size and notice it's a method it's got the double parentheses so arrays we'd use dot length with no parentheses now we're using arraylist with parentheses and it's a size not a length very common mistake usually ap colors board won't penalize you if you use size instead of length or length instead of size but it's good practice especially for coding you're going to need to get it right and then if s dot equals ignore case array dot get i so s remember is a string i brought in if it's equal to the dot get known as get now we're going and grabbing something at an index this would have been box notation with arrays now we're using dot get to go grab it so we grab it now we've got it okay so then we do the comparison between the strings and we're going to now do a remove so go to index i and remove that from the list bumping everything back down to the position so that great little functionality here with removes and adds and gets awesome and then i do this silly i minus minus now i wonder why i did this oh that's right because it's dynamically sized list so what happens when i remove it let's say i was looping through 10 items so when i first got to my for loop array.size was 10. okay starting with zero going to nine that's awesome as soon as i call this remove my array size is now nine which means when it comes back up to rerun the loop it's now only going from zero to eight well what is gonna happen is as soon as i remove that item my index i has not changed but it's now pointing at a different value so what's gonna happen is when it increments i plus plus that value will have gotten skipped so what i'm doing is when i remove the item from the list i'm decrementing i by one to make sure i don't skip over the new thing that's in the box where the value i removed is is pointing right because that box used to have a banana in it but now it has whatever came after banana in it so if i just iterate i will have skipped it by doing an i minus minus i go back so that i'll actually look in that box again to see that it has a new value in it so that's really important and really key so i also have a display arraylist this is just lubing to show it now i obviously have it here with just using the tostring but there's no reason we can't also write our own right so i can do my own and i have mine doing it vertically right so you can see the difference between mine and the two string okay so how am i doing that well i think i did it with a for each loop for each string called e contained in the array which is the arraylist object that's been passed to my method print out that element with a new line at the end so this is just a really quick for each loop now you can do some funky stuff and for each loops be very careful when you're inside of a for each loop because you don't have access to the index that you're at so they're really helpful to use for each loops with arraylists for all kinds of purposes but typically if we want to do any removing or any manipulation like that we want to make sure that we're in a standard for loop so we have control over the index and then i have a display arraylist backwards so this is just going to run through from the top down so there's a couple ways to do this you could use a for loop and do the index i size minus one and then go down but we can also call this collections.reverse so an arraylist is part of a collections class and we talk about inheritance later you can start to see a little bit of how that works but the collections class is like above the arraylist class in the hierarchy so you can call collections.reverse and pass it the arraylist and what it's going to do is it's going to reverse the values in that list and then i just do a 4h to print them and then i just reverse it again so it's back to its original state so this is actually modifying that temporary variable so it's important to note that that is how that's working okay now let's just run that real quick with the with the reversal so we'll run it backwards okay and we'll run that so here it is printed out backwards so let's just do a little bit tweaking here we're going to comment out a few things here what i want to do is this i'm going to print it backwards and then i'm going to print it forwards but in between the two i'm not going to rereverse the list now the reason i'm doing this let's think for a second i'm passing a variable to this method and then the method is reversing that temporary local variable inside of my method and then printing and then i'm exiting the method so if we're dealing with something that is not passed by reference then the second print should be totally normal the string the list should not have been reversed still but if we're dealing with pass by reference like we were with a raise then the list is still going to be reversed so let's run this and see what happens so i get my banana down to my banana and then banana banana the list is still reversed okay maybe we can make this a little simpler if we were using numbers or something like that in our fill array i'm just going to replace my fill array with like the words one two three four five and then we'll come back and we'll look at how it works then okay so my array should now be filled with one two three four five so if i print it before i call the reversal and then re print the reversal and then print it again maybe i'll just stick some dashes in the middle so i got one to three four five then in reverse five four three two one and then still reverse five four three two one which means these array lists are being passed by reference when they're getting passed to it because the fruits variable is getting passed as a variable to the method the method is only modifying the local variable name that it has and yet the original variable fruits is still being considered to be reversed so just be cautious with that when we're dealing with arraylists so just to iterate that one last time i just made a few modifications here so i created a little method called messer which takes an arraylist called al and all it does is it does a dot out of six so then if i fill my array with one to three for five i print it i call messer which should add that but remember passing that to there so typical variables are actually going to only modify the local variable inside of the method but this is going to actually add to the original fruits array because you can see when we print fruits again at the end the six is there all right so that's your intro to arraylists good luck with it and we'll see you back soon