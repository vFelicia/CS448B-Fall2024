hello future engineer welcome back to the Arduino basics tutorial series my name is Adam and this is lesson number 13 where we're gonna learn to use an analog joystick to control a servo motor to start us off we're gonna look at our wiring diagram you'll need an analog joystick you'll need your servo motor your Arduino and a breadboard so we'll start off with the servo motor wiring with the servo motor it's the same wiring as it was in the previous lessons we bring one wire into pin number three which is a pwm pin or a pulse width modulation pin on our Arduino we bring our voltage wire to voltage and our ground wire to grant that's it for the servo let's take some time and look at the joystick our joystick has five pins on it it has a ground a +5 volt of VXR and a v ry and a switch SW so we're gonna take our ground up to our ground row on our breadboard our five volt to our five volt row on our breadboard our VXR and vry we're gonna bring into our analog inputs on our Arduino so I put V rx 2 a0 and I put V ry 2 a1 so you can see this here that's the orange and the green coming out of ER axon v ry down into a 0 and a 1 respective the last is this SW and the way it works is our joystick can move in the X direction the Y direction and you can push the button down when you push the button down it activates the switch pin so I'm bringing that into the digital pin 2 on my Arduino and that's going to give me control over that button press and then also control over the axes the X and the y movement of the joystick so that's the wiring it's pretty straightforward to get it all wired up hopefully you don't run into any difficulties there if you do you can drop a comment in the video and we'll try to help you out I also have a picture of the wiring diagram in the description of the video now we'll head over to the code and we'll look at what we can do to program this setup so here we are in our code interface I've got a new file called lesson 13 and I'm ready to get started with my in this video we're gonna do in kind of three sections we're gonna start by writing the code necessary to read and print out the x and y values from our joystick once we are successfully doing that we're gonna look at the range of values and see if they need to be converted for our servo motor well look at the conversion and then get the servo motor being written and then as the final step we'll bring in the button and incorporate that into how our code is going to function so you'll see the code is gonna shift throughout the video we're not just going to progressively build one code set we're gonna start with one set of code modify it and then modify it again so let's drop in the code we need at the top of our file before we get into the setup function to initialize our pins and bring in our libraries here's what we've got we're gonna include our servo dot H library like we have in previous lessons so that we can access our servo motor we're gonna declare the pin for our servo which we're using pin three and our object which we're still calling servo one same code as we've seen in previous lessons for our joystick we're gonna set up three pins our SW pin for our switch which is pin two our X pin which is a zero and our Y pin which is a one you'll notice I added this keyword Const I really just added this because I wanted to show it to you a Const is representative of a constant variable which is a variable that we have fixed its value for so we're not going to be modifying the value of that variable in the code and it just kind of protects it because we're not going to be suddenly just switch in which pin we're plugged in to so we want to just make sure that we can't accidentally modify that value in our code that's why we've declared these as constant it's not a requirement it's just a protection thing now we're gonna move into our setup function and in here we're gonna set up our pins set up our serial monitor and set up our servo so our switch pin is declared as an input with a pin mode call this is a little different we're doing a digital right to the switch pin of hi now this is special to the joystick this is essentially enabling the button on the joystick we have to send that signal out to enable the button this button runs as a passive hi which means when it's not being pressed it's gonna read as a high input on the digital pin and once it's pressed down it's gonna read as a low and it's important that we know that because it will affect our statements later on I set up my serial monitor and I attach my servo to the servo pin so this is everything that we need to do in our setup function the first step of what we're gonna do for our code is we are just going to display the values that are coming out of our joystick so inside of our loop function we're just going to put a series of print statements that are gonna include analog reads from the joystick so that we can get a sense of what values our joystick is giving us so let's look at the print statements that we've got we have a print of the words xaxis in a space then a print of an analog read on the x pin so this will read the joysticks X pin and then print the value that it receives then a print of a backslash n in quotation marks this is a character or a special character that we can put in there that causes it to jump to a newline print yaxis and then print the analog read on the y pin and then print a double line jump so that's all set up for us to see what's gonna happen I put a delay of 100 milliseconds in at the bottom and we'll have a look at how this is actually gonna work once we plug it in all right so push this code out so let's have a look at the serial monitor here so you can see it's printing on my values now it's printing out right around 502 503 for the X and the y and that indicates the center this joystick doesn't use a 00 Center it uses a range from 0 to 1024 so the middle is gonna hover around that 500 value depending on your joystick so if I move this in one direction I see my yaxis goes up to 1024 1023 and if I go down the other direction my Y moves to 0 if I go left and right my X goes up to 1023 my X goes down to 0 and I can kind of hover this to in different positions it doesn't have to just be the X or the Y that's moving I can move them both the same time right it's an analog joystick it can go in a circle and I can move the values all around it's giving us a sense of the range of values of what this joystick can do this joystick is gonna do a range of values from 0 to 1024 so now that we know the range of values that are joist sends into our Arduino we need to convert those values because our servo motor has degree values from zero to a hundred and E we've done this once before but let's go over it again we need to take a value from zero to 1024 and we need to convert it to a different number range so in this case zero to 180 so let's look at the math involved in doing that so I'm gonna start here in my print statement of my analog read for the X pit so this analog read statement returns a value from zero to 1024 so the first thing we need to do is divide it by 1024 we need to be careful because the way it works in a programming language is if I just put divide 1024 it's going to divide two integers and it's going to want to give me my answer as an integer which means no decimal values and what ends up happening there is if you do get a decimal it just ignores everything after the decimal point so if I take a number that's less than 1024 divided by 1024 I'm guaranteeing my answers between 0 and 1 which means it's going to give me 0 every time if I do it as an integer division so I'm gonna put a dot 0 on the 1024 and this forces the programming language or C in this case to maintain the decimal values of the division the division by 1024 brings me down to a number range from 0 to 1 now I need to multiply it back up to the desired number range which in this case is a hundred and 80 if I run the code right now what I'm gonna get is a decimal value from 0 to 180 let's run this code and let's have a look so I've pushed this out to my board if I pull out my monitor I'm gonna see that that X pin is now reading a value around 88 and if I move left and right I'm gonna see that X pin go up to 180 down to 0 now it's reading as a decimal so 179 point 8 2 right in the range 1975 26 etc so I just want to turn that into an integer value instead of it being a double or a decimal so to do that all I have to do is add in one statement I have to add this int in brackets and then wrap an extra pair of brackets around my calculation so what does this do well this has a special name it's called casting and what it does is it says take a variable or a value of one type in this case double which is a type that includes decimals and cast it to an integer which in the case of going from something that's more precise like a decimal to something that's less precise like an integer it's just going to ignore everything after the decimal and store the whole portion of the dot of the number as an integer so this should give us a nice clean number from 0 to 179 give or take which is totally fine for the movement on our servomotor this should be good for our X I'm just gonna copy that and paste it for my Y and replace that with a y and let's push this out and let's have a look at what our values are now so opening up the serial monitor here 88 up to 179 down to 0 on the X down to zero up to 179 so now we have values that are inside that zero to 180 range from our X and from our Y so now we're ready to incorporate the servomotor into our code to bring the Scerbo into our code there's really not a lot to do after all of our serial prints I'm gonna write my value to my servo now I only have one servo in the circuit so I'm only gonna worry about doing my x value for right now so all i've included is a servo 1 dot right and then the exact same calculation that we used in the print line read in the X pin from the joystick divided by 1024 point 0 times I 180 and cast it as an integer and we're gonna write that to the servo so that is going to allow that to work the only thing with the servo motor is we want to have a shorter delay so that as we're moving the joystick the servo is moving essentially at the same time so we'll put a delay of 5 milliseconds in it'll make our serial monitor maybe not as clean to read because it'll be scrolling so quickly but it'll make the actual movement of the motor work better so I've pushed this out to my board and I'll show you a little bit about how it works right now so I've got my joystick here and I've got my servo motor here and as I move my joystick you can see my servo motor moves along with the joystick movement so it'll go down all the way back all the way the other direction and it rests in the middle when I'm not using the joystick so we're now controlling the motor with the joystick success so the only extra thing we want to do is you want to incorporate the push down button on the joystick which we haven't done yet so what I want to do for the button is this I want when my program first starts for it to run exactly like we just saw with the print statements out to the serial and the joystick controlling the motor when it pushed down the button I want it to effectively turn off the joystick so it's going to state that the joystick is off and moving the joystick is not gonna affect the motor at all until the button gets pushed down again which then acts to turn the joystick back on and it resumes normal functionality that's what I want to do so we're gonna have to add a few things but the most important thing we have to add is an if statement we need to take all of this code that we've already written and we need to wrap it inside of an if statement that essentially says the button is not currently being pressed down so it's going to look something like this so the if statement says digital read on the switch pin so reading the value of the switch pin if it's high high remember means that the button is not being pressed because this is a passive high button then I added one extra set of print statements prints the state and says that the joystick is on and then I left all the remaining print and write statements the same and then I closed the a statement bracket here so this allowed me to set this up also just a formatting tip if you highlight a large group of text and press the tab key or the shift tab combination you can indent or unand enter that block of text all at one time this is what my if statements gonna look like for when the button is not currently being pressed now I need to add my else statement so remember an else statement only happens when the if isn't true so the only time we're going to end up in this block of code is if somebody pushes the button when they push the button it's going to trigger us to come into this block of code one of the things that we often forget when we're looking at button pushes is how quickly this code actually runs if we don't put a delay in here then what happens is when somebody pushes the button they think they're pushing in very quickly when in reality they might be holding the button down for 500 milliseconds we needed to lay to essentially make sure that we're not getting a false positive reading on our button so I'm gonna put a onesecond delay at the top of this now I'm gonna bring in a bunch of print statements just to print essentially that the joystick is off and here are the instructions for how to turn it back on we have a print for the state the joystick is off we jump to a new line we print out that if you press down on the joystick you can turn it back on and we jump line now here's the thing if I let this code end remember persons not holding this button damn they've pressed it and they've let it go so the button state is already back to high at this point in the code so if I let this code exit it's gonna come back into my loop and it's gonna start using the joystick again so I kinda need to trap people here in this else statement until they've pressed the button for the second time to then trigger the loop function to rerun so I'm gonna do this using an infinite loop it's gonna look like this it says while true so this loop can never end unless I give it a reason to end otherwise what's inside these squiggly brackets will run forever so inside I'm gonna put another if statement to check if the button has been pressed so I put an if the digital read on the switch pin is low remember low means they just press the button so the button gets pressed we're gonna break out of the loop which restarts the call to the main loop function so we use a break function which kicks us out of our while loop I then will also add in a onesecond delay before the joystick actually starts working again this is so that we avoid the fact that people accidentally hold the button down longer than they realize not even accidentally it just happens what we think is a very quick button push actually will be several hundred milliseconds so we want to avoid that so this gives a onesecond delay before the joystick kicks into action again this delay v is actually supposed to be up in the ifstatement where our joystick is running properly so we're gonna cut it and move it up there so we added that delay v right after we wrote our servo up in our if statement so this should work in that when our button gets pressed down it should turn it off and it should stick in this infinite loop waiting for me to push the button again when I push it again it should break out come back up to our main code and as long as I haven't pressed the button it's gonna do all the execution that we've already seen until I press the button again and then it's gonna turn off so we'll push this out we'll have a look at it and then we'll go on to our extension so our codes been pushed out let's have a look at the serial monitor we see that it's all running it's all running out we've missed a line print there see it says joystick is on xaxis right away let's fix that before we keep going so up here in our if statement we have this joystick is on we're gonna add a new line after that remember we do that with a backslash and in quotation marks so I'll reap us out and we'll look one more time all right we're back in hey look at that we've got the line now so let's push down on our joystick and see what happens the joystick is off press tab on the joystick to turn it back on notice it's not looping if I turn my joystick my motor is not turning let's push down again and there it goes it's back on and it's working so now we've effectively turned the button on the joystick into an on and an off switch push down it's off there we go great job hopefully the bass lesson made sense as we move on to the extension for this one we're gonna keep it pretty simple the most important thing here was the math statements that we use so what I'd like for you to do is add in a nice multiline comment before or after so a nice little multiline comment before or after that statement and just explain what is actually happening there and why that statement works the way that it does okay let's do that for the math just so we understand how to take a number from one range and move it into a number from another that's really important when we're translating inputs to outputs so let's take that on for the extension and then we'll look at a challenge hopefully the extension went well and you got a good description there and you understand that math that we did for a challenge what I'd like for you to do is add a second servo motor into your circuit and then have the y axis of your joystick control the second servo motor what's really cool here is if you get it working you could actually melt the two servo motors together so mail one servo on top of the wings of the other servo using zip ties and you can create essentially a turret where you can use x and y movement to tilt it from side to side and up and down which is a really neat little thing you could then maybe attach a laser pointer onto it later on and all of a sudden you've got a little laser turret that you could move around so we'll put that out there as a challenge for you hopefully it goes well thank you for sticking with us for 13 lessons see you back here in Lesson number 14 and again thank you so much for watching if you enjoy what we're doing like the video subscribe to our Channel we'll see you next time have a great day