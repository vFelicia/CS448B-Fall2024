all right we're going to be exploring loops primarily for loops while loops and do while loops let's just go over some syntax and talk about some issues start with a for loop so four bracket parenthesis zero so this is a temporary variable i'm creating that's why i'm declaring it and i'm naming it i and i'm initializing it zero you could use an existing variable in your code but typically in a loop we want a selfcontained period the nice thing is that variable only exists inside this loop because it's created there so then we create a condition to run so this is a conditional statement has to evaluate true or false that will tell us whether or not the loop should run this time around and we end with an area each of those three statements are separated by uh semicolon we open it up so this says for a new integer called i that initializes to zero as long as i is less than 10 go ahead and run the loop and then when done running the loop iterate so this should print 0 iterate to 1 check 1 is less than 10 good prints 1 iterates to 2 checks prints 2 three check print iterate check print it or a check print when it prints nine it's going to come here it's going to iterate to 10 it's going to jump up here it's going to say 10 is not less than 10 that's false so we will not run the code in the loop it will instead jump to the n bracket and begin the rest of your program so this should print zero to nine your iterator is also very flexible it can be a full mathematical equation so you could do lab i on a equals three for example and have it jump by three each time you can do a decrement so i minus minus now that won't work in our current setup so i'd have to change my initialization in my condition so if i started 10 i say as long as it's bigger than zero do a decrement that should go backwards just like that okay so there's lots of ways that you can set these up in terms of this can be any boolean statement and this can be any increment decrement or full mathematical equation that affects your iterator okay and then inside obviously you can have all kinds of code that can use the index or not use the index inside the loop cool so for loops are great when you have fixed execution numbers so you have a variable number or you know how many times you want to execute remember this doesn't have to be 10 this could be a variable right and then up here you could have maybe that number comes from a user or it comes from a method or whatever so there's some flexibility there but typically for loops their power comes in fixed execution so when we know how many times you want it to execute you can also do um tested for loops as well so i less than zero our i equals zero i less than five i plus plus and then inside i'll do four j equals zero j less than five j plus plus so i'm going to do system.edu the print line i equals plus we'll get to see those i and j values as it runs so if we run what we'll that is i stays zero for five executions as j cycles from zero to four and then i stays one as j cycle so the inner loop completes its full loop over and over and over and over for each time that the i value changes so when i is zero it's going to run this entire loop then when that loop fails this ends this ends which means i iterates and now the whole thing runs again and then ends ends i iterates and the whole thing runs again so you can create these neat little nested loops in here let's talk about while loops so a while loop is great for variable execution so a while loop syntax basically looks like this while conditional basically it just says as long as this condition is true keep running the code now you can do funky stuff like this some programmers love the wild true loot so while true loop will never end okay it will just run forever and it'll crash uh your system eventually or your program eventually it's not the ideal way to do things some people like this because then you just control with breaks so i could have something like integer before my while loop so i zero and then i could do say if i is greater than uh m right else i so we are manually doing the iteration now but i could do something like this this is going to run essentially the same way it's going to go 0 all the way up to 10. if i run that zero all the way up to 10. so this is just me taking manual control of it using a break statement break will break out of the kind of the closest loop structure so it's great for things like that but while loops typically are going to have something in it like while i is less than 11. so forget the efl structure forget the breaks right we can just take this which create the only difference between this in the for loop is that i'm responsible for manually iterating and i'm responsible for manually declaring and initializing the variable before the loop starts so run exactly like the for loops from before 0 to 10. so there's all that control that we can do with a while the thing with a while loop that some people don't like is that the while loop is going to check the condition at the very beginning before it runs any of the code so if you ever wanted the code to run once and then have a condition to fail so just for example let's say this was a user input situation and we wanted to print something give them an option to enter a value and if they didn't enter a value we liked we reprint the statement so something like um let's create a scanner i gotta import it okay and then let's say i were to do a string user val string for now so while user about dot equals q and we'll put a not in front of that so as long as the user has not entered q then we want to print something like glitch and then we'll grab our user valve equals so essentially this code unless they enter a queue is just going to keep running ever which may or may not be what we want and then if they enter a queue it should quit so the thing about this is because the user valve is starting blank that's fine uh it should let it run so let's just run that and just test it out oh what did i get i might have to initialize that to a null string let's run it now okay so value k a b c and q and it quits um so that's one way we can use a while loop but the other way is sometimes we want to print this stuff out and then have it check only after one execution so to do that we can use a do while which basically just it looks like this so it's essentially the exact same thing as a while loop the only difference is it will run the code in the loop one time no matter what before it checks the condition then it will check the condition and then if the condition fails it won't run it again so it's exactly like a while loop just allows for the code to execute once automatically without checking a condition and then we'll check the condition at the end of that first execution and at the end of each subsequent execution so sometimes that works better it's literally the only difference is about that first execution everything after the first execution doesn't really matter uh it's all going to run the same so that's our for loops our while loops and our do while loops and the structure for them and you can nest any number of these loops together they all serve different purposes and they all have different benefits but uh yeah it's important to have that structure because we're going to use loops a lot when we're looking through strings and we're looking through arrays and we're looking through a list good luck talk to you soon you