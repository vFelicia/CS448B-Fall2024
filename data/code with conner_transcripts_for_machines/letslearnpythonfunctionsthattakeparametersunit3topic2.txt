hello humans who are trying to learn to code for some reason i don't know why here we are this is code with conor unit three topic number two we're going to start off by looking at the challenge from the last lesson let's go right i left you with two functions to write the setup turtle and the draw square now yours might be different than mine because i kind of just moved my turtle to a specific location you might have moved here somewhere else i set my pen width to a specific value yours might be different and so on so i showed you the basics we import we set up the window we set up our turtle i called mine timmy hi timmy in my setup turtle i lifted the pen moved him backward moved him all over the place until he was in a position i was happy then i stuck the pen down again set his pen size to 10 pretty good pen size timmy and then i said his color to blue again this is going to look so different depending on what you were trying to accomplish i just tried to pull him down into the left a little bit made sure he was pointing to the right pointing east and then i set his color to blue gave him a nice wide pen size draw square we've seen this code before for i in range 4 timmy forward 400 timmy left 90. right so i just created this little draw square for i just created this little draw square method where we do four moves and that was that was it that was all i added then i just called the two functions set up and draw that was it so that was a challenge from unit three topic one now we're gonna jump in we're going to look at today's lesson which is functions that take a parameter but do not return values we're not there yet all right we're actually going to start our code with the challenge code from the last lesson crazy so here's the code from the last lesson i'm going to ditch set up turtle for right now we're going to come back to that later i want to start with the draw square so one thing that i think would be interesting would be instead of only allowing us to draw a square of size 400 what if we wrote a function that was dynamic it could draw a square of any size so what we're going to do here is in these brackets in these parentheses we can put a variable name now this doesn't have to be a variable that i've already defined so size is not defined anywhere else in my code but that's fine that variable is going to get defined when the function gets called it's what we call a local variable and it's only going to exist inside the block okay inside the function block then as soon as the function runs it's gone it disappears so what i'm going to do is when they go to draw a square when they call my function draw square they're going to have to give me the size that they want the square to be and then for i in range 4 instead of moving forward 400 i'm going to move forward by size so what i'm doing is i'm telling the user or not necessarily the user but the programmer you want to call my function cool you have to give me a size variable and this brings in what's called a precondition a precondition is something that you're telling the coder or the user that in order to do this you need to give me the right thing okay takes an integer value that must be greater than zero this takes an integer value that must be greater than zero so in other words in order to use this function you have to give me an integer that's greater than zero if you give me anything other than that things are going to get messy or it's gonna break the code make sure you do this so as a coder when you're working on a project for example and there's a large code base and your buddy writes a function and you need to write something that uses your buddy's function you're going to look at the precondition for that function so you make sure that your code calls on their function correctly how does this affect when i call it when i call draw square now this is where i'm going to put the number so if i put 100 there what happens in execution is it still doesn't execute this just stores the function gets here and takes that 100 and sends it up and makes size equal to 100 temporarily runs the block of code and then ends and then size is gone again okay let's run that and see it we see there's our little 100 square perfect so that's how we can pass a parameter to a function so let's beef up our program a little bit here that we had started with we'll leave this draw square exactly like it is so i'll just hide it for now you know i'll leave it there in case you're pausing the video and you want to see it so we're going to modify our setup turtle just to be a little bit cleaner why don't we do a set position instead of all this nonsense so we'll do a timmy dot set position and why don't we ask the user when they set up the turtle to give us an x and a y value and then we're going to set the position to those x and y values so that the user when they call our setup turtle they get to tell us where they want it to start okay now notice the comma this means i'm taking two parameters so here again precondition is going to be takes two integers representing starting coordinates of turtle so we're going to use the set position on our turtle to stick it where we want it i've got my pen size and i've got my color so now when my user calls set up turtle we could decide to stick it kind of maybe down down to the left negative 200 negative 200 so when i'm calling this i'm giving x the value of negative 200 and why the value of negative 200 and then i'm going to draw the square of the given size right and we could even maybe extend this a tiny bit so what if we did x xval equals int input starting x and then we do that again for y starting y and then we'll do side length equals int input side length so what i'm doing here add my brackets what i'm doing is i'm asking the user for these three values so now when i call my functions instead of sending it negative 200 i'm going to send it the user given x value and then i'm going to send it y val and when i go to draw my square i'm going to draw it side length so i'm getting variables from the user that i'm then passing as parameters to my functions which are then being used to run execution chain always be thinking about the execution chain okay when when a line of code runs you should know what line of code ran before it right we should always be able to trace that jumping around in a program jumping back for a second to the setup turtle function when i deleted some of that code from the challenge i forgot to put the pen down so after set position make sure you do a timmy dot pen down so that it's going to behave the way we want it to now let's save it and run it and see how it looks so our starting x value let's do negative 300 starting y let's do negative 100 and side length let's do something big like 500. so we should see it shoot down to the left and then draw here we go so it works exactly as intended uh even though now we're obviously dealing with it differently in terms of how we're handling user input and now we're passing that user input into functions so hopefully that makes sense in terms of passing parameters into functions and it's important that we recognize that these variables are local they only exist during the execution of that block of code and then as soon as it ends they stop existing now you can use variable names here that you use outside of all functions in your code but it's not recommended what is totally fine is to use the same variable names for parameters of multiple functions that's very commonplace and that's totally fine because no two functions can ever be kind of running at the exact same time you're either in one or you're in the other right and so from that regard it doesn't really matter that those variables are existing by the same names and different functions they're still local within their code block it's not recommended that you use a variable name and a function that you're using outside of all functions in your main code that's not recommended and we'll talk about why later in this unit when we talk about global variables all right it's time to talk challenge now this one is a big one and it's going to take a little bit of work for you to pull it off so i want to show you how it runs now it's similar to what we left off with in the main lesson but it's going to add some complexity to it so you'll see that i'm pulling on the unit project from the last unit in this user menu so i've got a user menu where they've got the choice of draw square draw triangle draw irregular polygon that's a tough one clear screen move turtle and quit program all right so the user is prompted so if i choose draw square it asks me for the side length of the square 300 and it's going to draw my square and then it brings me back to my user menu so i can clear the screen i can see where my turtle is currently located i'm going to move my turtle i'm going to move my turtle left 300 and down 300 to a new position now i'm going to draw a square of size 600. i draw a real big square so i cleared the screen by accident that's fine now i'm going to draw a regular polygon so that's c it asks me how many sides i'm going to do an eightsided polygon and the side length for each one 200 and it's going to draw me an eightsided regular polygon cool i like that a lot and then i can clear it never drew a triangle yet let's do that draw a triangle with side length 50 tiny little triangle and then q quits the program so that's the challenge and that's how it's going to work now there's a lot going on in the code to make this uh work i'm not going to give away too much but here's what i will show you okay import the turtle set up the screen set up to whatever set up the pen size cool i created a string called menu just like i did before nice little menu with the three quotes my code's pretty straightforward i have this draw polygon it takes number of sides and x this is a very hard function to write you're going to have to get mathy in order to figure out how to do it properly draw a triangle we've seen draw a square we've seen and then i have this user menu that's actually going to do the while true loop to do the prompting of the user value and you'll see the only actual code after my functions are defined is one call to user menu and then user menu loops until they hit quit and when it's done it ends the function which then ends the file and stops running the program so that's what we're looking for for the challenge here for unit 3 topic 2. you're going to be pushing yourself a little bit especially if you're gonna do the draw regular polygon but the nice thing about us doing something a little bit harder now is we can go through this code in the next video and maybe help you understand it a bit whereas the projects i'm not going through with you and showing you how that code works so you're left on your own so this one we're definitely going to go through because it's important we understand that structure because now we're starting to build programs that actually have a little bit of functionality to them again you're great humans i assume you're here watching this you must be right i think that's how that works either way thanks for being here like share subscribe it's awesome we'll see you back in the next video bye humans