hello humans welcome back to code with conor this is the let's learn python course we are in unit five topic number four and i just gotta say i'm really proud of you because you're here and that's incredible and this this right here this is our last lesson now i mean you're not done you're still gonna have a project and an end of course project and other stuff like that to do but this is it this is all i'm gonna teach you about python and then there's a lot more to learn about python let's be clear this is an introduction to the language and the programming but hopefully you built a good foundation going through the program so i'm glad you're here i think that's awesome to start we have to go back and look at probably the hardest challenge that we've done so far which was the maze let's do that right now okay so in the last one we created a maze and we were able to use wasd pressing enter which with each input not dynamic in order to kind of navigate our maze so let's look at the code and see how we pulled it off so i have a couple variables of r1 and c1 that represents my current player position i am in row one column one remember they start at zero row zero row one column zero column one okay so i'm in one one this is my maze it's a two dimensional list so it's a list of lists you'll notice opening bracket closing bracket both square that represents the greater list and then what's inside of it each of these rows is also a list of strings comma separated values i've used x for the walls i've used an at symbol for the player spaces to represent where i'll actually move through the maze and then we end it off here i've got an asterisk here for the goal where you're headed to reach so i broke my thing into functions i have a make move function that's our big one i'm going to come back to that in a minute first we'll look at game one so i needed a way to quickly make sure that i won the game so it's really simple i just global my maze now i'm not going to modify maze here so technically i don't need to do this i can still view it but you know what i i'm in the habit of i reference my globals and then if maze box rc so current player position is equal to star then return true so i'm going to use that function somewhere in my make move to confirm whether or not the game is over okay so then i did a print maze so let's look at this real quick global maze so i have my nested for loops so for i in range length of maze so that is the length of the outer list so that's going to be how many rows there are so this is iterating through rows this is saying for i in range length of maize box zero so that's saying take the list that's in the first spot and count its size that's going to be your number of columns so this is going to loop number of rows this is going to loop number of columns then it's going to print an individual element followed by a space and not go to a new line it's going to do that for the entire row so each element in that row and then when it's done it's going to jump to a new line and then jump to a new row and then print everything in the next row and so so this is my way of printing it in a kind of a clean way all right at the bottom i just call the make move function that's where everything happens so let's look at that so i pull in my globals rc and maze and i chunk everything into a wild true loop i'm going to call printmates so bam here's your maze look at it okay then collect their choice wasd we'll look at my f structure if it's w else if it's a else if it's s and then else if it's d and then else is just print invalid entry continue so what's in each of these will be pretty much the same code with little tweaks so if they entered w w should represent moving up in my maze so moving up actually means my row value is going down by one if i'm making that move so i check if maize position r minus one and c so my row value is going down 1 but my column values are going to change if that's not an x so in other words the position above me is empty if it's not an x you could have also done equal equals a space okay if it's not an x then we're going to move up into that position so we're now going to say maze in my current position is now a space i'm going to change my r value of my player okay and then at the end here i'm going to write the new position to be the atom but in between those decrementing r and doing this i'm just going to double check that i'm not at the end of the maze so i check i've adjusted my player position but i haven't drawn the at yet the reason i'm checking first is because if i draw the at over top of the asterisk then i'll never be able to see that the asterisk was there so i'm going to do if game one that checks if i'm currently standing on an asterisk space then print you in and break the loop if i made it past that if statement then i know i'm not on a winning block so i change the value to the app else so if this was an x then i'm going to print invalid move and continue so they tried to run into a wall and then we're just going to repeat this code four times the only thing that's going to change is how we iterate either the row or column value based on direction so when i go here to a a should be a move to the left so column value going down by one column value going down by one everything else remains the same when i look at s trying to go down my row value is going to go up by one check row value up by one increment by one okay if i'm pressing d i'm going to the right so column plus one column plus one so that's how we built the maze game in the last lesson that's a big one and i know i haven't gone through line for life and i know i don't give you the code and i know that drives you crazy because you just want me to give you the code cool i mean if you just want to find someone else's code go google it i want you to type i want you to write code i want you to struggle a little bit that's how you're going to learn so yeah yeah i'd be frustrated with me for not giving you the code but oh well here's what it is all right so that's it for the challenge from the last lesson let's jump ahead and let's look at our last lesson unit 5 topic 4. here we are the last of the data structures that we're going to talk about which are dictionaries dictionaries are kind of like lists the only difference is with lists you have this indexing system built in the same indexing system we use with strings where it's index zero up and it's an integer index value with dictionaries we get to control not just the values in the data structure but we also control the keys so those are the indices and they're not just numbers so let's jump in and see so i'm going to make a dictionary my dictionary equals we're going to use the squigglers the squiggly braces okay these are going to define my dictionary there's other ways to do this too with the dict function okay we're just going to do it the oldfashioned way for now and you can look at the link in the description if you want to see more and then what goes in it comma separated values right there's a value right here boom comma then there's the next one comma and so on these are the items that are going in my dictionary you'll notice my item consists of two parts the part on the left then a colon and then the part on the right this is the key this is how we're going to find this item in my data structure this is the value okay so key value pairs are what go inside dictionaries now in this case i've made my keys strings and i've made my values strings with the exception of this i made this a list of strings so couple of quick notes about setting up dictionaries one your keys do not need to be strings however they do need to be immutable which means they cannot be something that is dynamic so a string is fine an integer is fine a boolean is fine but you can't put like a list as a key right a tuple is fine you can't just modify the values dynamically within that that variable's data range so you need to make sure that that's what you're using for a key now it's important to note if you use integers the order is not there in the same way that it is with lists the order is not really a thing with dictionaries and technically it is but it's it's not something that's relevant okay it's all about the key value pair that's what really matters and we're going to play with this really quickly so let's i'm going to comment out some code and then we're going to print this so we're going to run this just real quick all we have in there is it prints out our dictionary so you'll see it prints the key and then the value in pairs right all the way through the list so let's play a little bit with what we can do with this let's say maybe we want this key to be an actual integer for example and maybe we want this to be a value of 15.5 so this is a float just to see how we can have those different pieces of variable types in there run that nothing changes right everything's the same so accessing elements of the dictionaries just like accessing elements of a list it's just we don't have an index now we have a key so instead of printing my dictionary maybe i want to print box and this is where we're a little different we're not entering an integer based on order we are entering a key so key 3 which is a string so i can do that that should print 15.5 prints 15.5 perfect what if we wanted to print what's in box 2. now remember box 2 is not about order it is about the key value and there it is this is the second value what if we wanted to print oh i don't know this fav colors so let's do that fave colors because that's my key and there it is now what if i wanted to just print orange so that element that's in there this is a list now lists still have their same indexing procedure so once i've done this my dictionary box fav colors that's returning an entire list to me and now i have the power of a list and i can do stuff with it so for example i can add another box here and put box two zero one two run that and there's orange so once i have my list i can then use regular list notation the list is a value stored with a matching key in a dictionary so this is how we use dictionaries and they can be used for all kinds of purposes and the nice thing about a dictionary is you can add stuff to it um so you can have you can add new items to the dictionary you can overwrite old items you can remove items you can pop you've got a lot of that same functionality that you would have with a list it's just you're not limited to this index system of numerical ordered indices you're able to be flexible with the key value and how that compares to the value so that's nice piece with the the way that they work one thing that's important to note is you can't have more than one key value that are the same if you try to do that what happens is it just overwrites whatever the value was that was paired with that key before i'll give you an example so we'll just print box two here and let's do my dictionary box two equals seven this is just going to overwrite whatever's associated with that key right it's not actually going to make another addition to my dictionary if you wanted to add something that wasn't already there you could just do my dictionary box and then put the key value in so new key and then equals and then put the actual value that you want it to have true and that's now going to be in that dictionary so if i ran that say like that and then run it right you can see that that's now in their new key troop so we can add things like that there are some functions we can use too to kind of pull stuff or whatever and i'll review just a couple quickly and then we'll wrap it up all right so quickly we'll just go over deleting so if you want to delete an element from a list so here's a way we can do that so let's say key one so the del command is reserved in python so d e l from my dictionary key one and this will remove the key value pair that exists with this key value so it's not just going to eliminate the value and leave the key it's like the whole pair has to come out together so this will work to delete that value you just do dell my dictionary key one and that works great if you want to remove something you also have the ability to do some of the similar stuff you did with lists like pop and then you have it right and then you can do something with it if you wanted to do that which removes it and gives it back to you which can be really useful there's a clear function that you can use on dictionaries to you know wipe the whole dictionary there's also a get which will like give you the value if for some reason you wanted to do that using a function versus just going directly to the key so there's a bunch of stuff there and i'll put a link in the description with a little bit more detail about dictionaries but that's kind of the the idea of how this data structure works and how it's different than lists which we've already used so just remember the key value is in your control you can't duplicate it and it needs to be an immutable data type typically we'll use strings or something similar then the value can be of any data type all right those are some important pieces to know with dictionaries we're not going to do a challenge for this last one because we're going to jump in and look at the unit project next which is a big one so i don't think there was a need to do a little mini challenge on dictionaries thank you for sticking with me for the lessons this has been really fun to make and i hope that it's been helpful for the people that are out there trying to learn python uh for the first time and i'd love to extend on it do something a little more advanced in the future we're gonna see it back real soon to do the project and then the end of course project which we'll do at the very end in the last video so like share subscribe do all those fun things kind of keeps me motivated we'll see you back real soon