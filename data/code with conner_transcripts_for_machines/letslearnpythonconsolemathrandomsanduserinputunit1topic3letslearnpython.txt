hello humans welcome back to the let's learn python series here on code with connor this is unit one topic number three and yeah we're gonna get into it so we're gonna start off by looking at the challenge from the last lesson we had a string for each of the pieces that we wanted to put into the mad lib so i had a string word one a string word two word three and those were the variable names that i chose for these strings and then we have the literal quotation marks and then inside of them we have the characters for the word now i chose these words harry book ran slowly you might have chose others the mad lib that i linked in the description had this exact order adjective noun verb past tense adverb adjective and so on so i just kind of made a little comment to remind me what i was supposed to be entering and then i went through and i entered one of each once those were filled in it was all about the print statement that's what the real challenge was so let's have a look at it so you'll see i started my print statement with my parentheses and my triple quotation marks and then i started here today i went to the zoo i saw on and then i closed the triple quotes that ends that string the plus sign prepares to concatenate you'll notice i didn't use the stra the str function because i already have a string word one is of type string so i concatenate word one then i just put a space and i use single quotes for that you could use triple if you wanted to there was no need i didn't need any spacing in there like enters and formatting so i just use a single set of quotes with a space in between then i concatenated the next word then i reopened my triple quotes again don't put the plus sign at the end of the line it causes problems and then we continue with the text from the mad lib jumping up and down and it's tree period he and then end the quotes concatenate the next word a space and the next word back into the triple quotes through the large tunnel that led to its you know end it variable space variable back into the triple quotes i got some peanuts and pass them through the cage to a gigantic gray back to the variables back to the literal string and so on and so on all the way to the end we end it with the triple quotes and the parentheses so this was our hardcoded mad lib now if we run this okay i got my phone a little bit bigger if it was a little hard to read in the last video so i'll scroll it and you can see it just print it out you can see our words that were stored as strings are there printed out right a hairy book and so it's working exactly as we intended it to work which is great so that was our challenge from the last lesson which was the hardcoded mad lib now we're going to jump in and we're going to look at unit one topic number three in this one we're going to look at console programs math in python we're going to talk about randoms and then we're going to talk about user input so we can start to have that interactivity piece kicking it off is console programs so what is a console program well everything that we've been running in windows powershell is an example of a console program these are programs that only interact using input and output via this textbased interface of the command prompt or the powershell or the terminal window etc in 2020 these are not programs that the typical user is ever going to interact with in their you know daytoday use of a computer if you start to get in to do special things like you want to run a ram diagnostic or whatever you might have had some experience with this if you're ancient like me you probably remember the days when there was an entire command line operating system called dos and we used to use that so we have some experience with this where other people might not so console programs are great for this learning to code piece but they're also really useful for like background scripts you might have noticed sometime when you're installing software in your computer a little black command prompt window might pop up see a bunch of text scrolling through the screen and then quickly disappear that's because there's a script running that's doing things like unpacking files or moving things or assigning windows registry values or whatever in the background those are all little scripts that are running as part of an installation of a piece of software and a lot of times those kinds of things can be written as console programs in a various number of languages python being one of them so these console programs are a great way for us to learn they allow that little bit of interactivity through user input and printing things out to the screen using text you can get a little bit more creative with visuals using things like assiat and special unicode characters and stuff like that but the goal is not graphics here the goal is function and understanding these underlying principles of programming we'll touch on like turtle graphics a little bit which allow like very very minimal graphic interaction but they're not anything fancy and then if you want to get further you can get into pie game and whatever but if your goal is graphics you're probably not going to be living your life in python for very long you're going to move on to other programming languages you're going to be working in unity or other things like that where graphics are really at the core of those languages so that's what i mean when i talk about console programs so the first thing we're going to code today we're going to talk about math so there's a couple of topics when we look at math in python that we need to hit on the first is things like basic order of operations using hardcoded numerical values or variables doesn't really matter so for the purposes of this we'll create three variables we'll make an x y and z and we'll make two of them in in and one of them will flow so i have x equals 5 y equals 10 and z equals 0.5 so these are going to be my variables so let's do some math now we can do math directly in a print statement because they're all numerical values it will know to do a numerical operation so let's try that what would happen if i do a print x plus y plus z remember we typically saw plus being a concatenation and we had a tight mismatch error last time when we tried to concatenate a string with an integer so i wonder what's going to happen when we do this i don't know let's try it save we run it and it gives us the number it didn't give us a type mismatch error it actually did the math and the reason for that is it's pretty straightforward the reason for that really is just because there is no string at the beginning of the print statement that it's trying to concatenate two it knows how to do math on numbers and if everything that we're trying to add or do math on is a number no problem at all but if one of them is a string it's like what do you want me to do here do you want me to add the string character values or am i concatenating like it becomes confused as to how do i handle the mismatch of types where all of these are numerical values it's perfectly comfortable doing the math and then printing that result of the screen as characters and this math doesn't have to just be addition you know we could put a times operator in here standard order of operation rules are going to apply it's going to do multiplication and division as a higher priority than addition subtraction so it's going to do y times n which is 10 times 0.5 which is 5. and then it's going to add it to 5. so it should print 10. let's test it and we get 10.0 now the point 0 is interesting so it is just 10 but the thing is that 10 is no longer an integer as soon as we brought in the float to the math operator we now have a float value that we're dealing with and a float value is going to have a decimal piece so that decimal piece in this case is a point zero so it's going to be 10.0 and this doesn't seem important right now but when we start looking at division that's when this starts to seem more important now you can also use brackets to change order of operations again nothing different than your like middle school algebra here or middle school order of operations brackets come first that's going to force the addition to happen first then it's going to times it's still going to be a float okay we run it we're good if we were to try to bring a string into the mix so if we were to try to do something like x plus y plus z equals and kind of make it look like a math equation then we would have to bring in the strip because now i want it to do all the math and it's going to do it it's going to still add up these numbers right here and then it's going to convert the answer to a string to allow it to concatenate it to the rest of the values so if i save that and run it you can see it does x plus y plus z equals that's all just that little string and then 15.5 came from doing the actual math equation so you can kind of see how that works with concatenation all order of operations apply we'll hit on a couple of quick math operators that maybe you're not familiar with let's get rid of that and let's just do first squaring or raising something to a power so in python this is pretty easy you can do this with double times operator so if i do something like x double times 2 that's x squared so in that case 5 squared should be 25. let's save and run 25. so we can do that for power based operations so base to the exponent we can use that double times operator the one thing we really need to spend a minute talking about is division and what's called modulus first things first let's look at a simple division y divided by x pretty straightforward right y is 10 x is 5. 10 divided by 5 should be 2 they're both integers so the answer should be an integer it's 2.0 what happens if it is not evenly divisible so if x was now three let's run this and let's see what happens it will keep and convert to a float now this is great that python does this a lot of programming languages do not do this a lot of programming languages when they're dividing two integers will give the answer as an integer which means they won't give you that decimal piece they would only give you the integer a python is great if you wanted to force it to behave in a way that's a bit more reminiscent of some other languages you could wrap it into an int function which is going to force it to treat it like an integer and you'll see that gives me that result of just 3. which we all know 10 divided by 3 is not 3 but sometimes and in a lot of programming languages if 10 and 3 are both integers it's going to do that okay so that's great and we should talk about that the last one we want to talk about is something called modulus so it's a percent symbols operator so y percent 3 this is a modulus operator and what this says is it says do y divided by 3 and then take the remainder so when you do 10 divided by 3 the answer is 3. that's the whole number answer so we're going to chuck that to the side we're going to look at the remainder so after you remove three threes from 10 which is three threes is nine how many values you have left we have one left so the remainder is actually 1. so if i do y percent 3 the answer of that operation is going to be 1. okay if you think of it in terms of fractions when you do 10 divided by 3 the answer is 3 and 1 3. it's that onethird that one on the numerator of the remainder that we're looking for when we look at doing the modulus operation so where is this powerful well i think the best place for this is when we're looking at even versus odd and that's doing a percent two operator so later in the code we're going to look at doing if statements and a lot of times looking at whether something's even or odd can give us kind of a neat way to do a quick flag check to do a lot of things let's just say for a second that y was equal to 11 and i do y percent two well anything that's odd is gonna have a remainder of one when you try to divide by two anything that's even is going to have a remainder of zero when you try to divide it by two so let's run this and i should get 1 beautiful if i were to change y to an even number say 4 and i run it again i get 0. so this is that modulus operator that we can use to determine whether something is or is not evenly divisible by another number so if it is evenly divisible the modulus operator will give zero if it's not evenly divisible then the modulus operator is going to give some value in between zero and the actual divisor so that's where the modulus comes in really really cool little math tool all right that's the basics of math now be aware of things like concatenating the strings in the math be aware of integers and floats and how those might interact when you're working with your coding stuff the next topic we're going to look at is randoms all right now randoms is kind of a interesting topic in a lot of different ways but that's what we're going to jump off to next in randoms we get to do the first import of a library now before we do that what's a library well the thing about programming languages is they don't actually expect you to write every single line of code yourself there is a lot of code already written sometimes by the developers of the languages themselves so in the example of java there is a massive amount of existing classes and libraries in the java world that have been written by oracle or sun microsystems in the world of python there's all kinds of existing libraries written by python then we get into a lot of libraries that are actually user created or other you know created outside of the realm of the company that made the language but they've become kind of sanctioned or approved by the language as these wonderful third party library so there's all kinds of these existing code bases out there that we can use in our code to kind of make things a little easier for us one example of those is random anytime you're importing libraries you should do it at the top of your file it looks like this import and then the name of the library now random is a builtin library with python so i don't need to go and download this library from a website or using pip or using some other software as soon as i installed python 3 on my computer this library is already accessible to me and there's a whole bunch of those you can look them up i'll post a link in the description that lists the libraries available with python 3. so you can have a look around just don't fall too deep down the rabbit hole when we talk about random numbers in a basic introductory programming course it's important that we recognize that what we call random is not really random now i'm not going to get into the high level reasons behind this in terms of pseudorandom versus random and where these numbers are seeded and generated you want to read about that you can go read about that forever there is so much out there about the seeds of these random values and there's places where random really matters and there's places where it really doesn't you know if you're creating a simple dice game that's not going to be you know billions of dollars on the line you probably don't care if your one to six role is pseudorandom or random so now that we have the library there now you can go look online at some different functions within this library that we can use but i'm just going to talk about one function which is the rand int function and it's great for things like dice rolls you know random choices things like that it's perfect for what we need so import random that's great so we're going to call a function called random.randint now a couple of things about this function we're going to go yellow this function and we're going to say hey give me a random integer and it's going to yell back and answer so we need to store that answer in a variable so i'm just going to do x equals okay maybe not the best variable name choice but it's fine so x is a variable that i've created is going to be equal to what i get back from this call to random now randint requires me to give it it requires a min and a max so it requires the left and the right bounds of that random so let's say i wanted to roll a dice so one to six right and then i want to print this out to my screen print x so this is going to when my code runs it's going to import the random library it's going to use the random library to generate a random integer from 1 to 6. it's going to store that value in x and then i'm going to print the value of x to the screen pretty straightforward program let's save it and run it two okay let's run it again six one five four get the idea it is generating a random number from one to six and then it is printing that number out to the screen it is storing it in a variable which is important now i could just wrap the random.ran it in a print statement but a lot of times it's important that we recognize that calling a function like randint is giving us something back and we're going to do a whole section on this in our functions unit but we need to handle that in some way and most of the time in our code we're not just going to want to print it we're going to want to do background things with that value outside of just printing it to the display so that's why i like to store it in a variable just to build those habits okay so this is the random integer function it's great there are other more complex functions around randoms like seeds etc and feel free to do some reading on that again this is an introductory python course my goal with this is for you to understand the core concepts so these are inclusive values one and six they're gonna give us a random in that range now you can then manipulate that random outside of that range if you wanted to you can do math on x for some reason if that was within your nature once you have the value you have it but you have to call randint again each time you want a new random number okay you can't just call x again x is going to just be the last random that it generated so you might need to recall random if you want to get another random integer for example all right that wraps up randoms next up we're going to look at user input so user input is going to provide that little piece of interactivity with our console program and this is one of those things where yeah people make interactive console programs for some purposes like a ram diagnostic program or whatever might have some basic you know user interaction over the command line but you know most of the time beyond the scope of this course and learning your first programming language you're probably not going to do a lot of user interactivity within console unless you're doing debugging and stuff like that you're going to be in a graphical interface because that's where we are in 2020. you're writing apps you're using graphical interface using you know touch interactions and hotspots clickable values you know all that kind of stuff gesture controls you're not using typing in a black or a blue console but for the sake of what we're trying to learn it is perfect so user input we don't need to bring in any libraries again similar to random when we use this builtin input function in python it's going to give us a value back one of the most common things i see when people are learning this is they'll do something like this input enter your name cool that's awesome you use an input function it's going to print to the screen enter your name and it's going to give the user the opportunity to type something and hit enter and then nothing's going to happen because they answered and you weren't listening for the answer it would be the equivalent of greeting someone face to face and going hey what's your name and then turning around and walking out of the room it makes no sense whatsoever we need to listen for that response so we need to create a variable we need to store the answer from the user and then we can use that answer in all kinds of places we could just do a simple print statement where we greet them i print nice to meet you comma a space and then i'm going to print the name that they just gave me right this is the computer is now sentient it's talking to you you know this input brings in a string value which i store in a variable called name and then i use that variable called name it's running enter your name and notice it's waiting the cursor is blinking it's like what do i do right so my name is adam connor i hit enter nice to meet you adam connor it stored that value from the user input in a variable and then brought in that variable in a print statement now you don't have to just bring it in a print statement you could bring it in in all kinds of places in your code right it could be stored for later to show up with a profile or whatever but getting that value is great but you need to store it somewhere that's why we talk about variables before we talk about input because getting that answer from the user is important now that's going to bring in a string the input function by default brings in a string if i wanted the user's age i could do something like this now let's say i wanted to know how many years until this person was 55 so traditional retirement age probably not accurate in 2020 but whatever okay i keep saying 20 20. it's 20 21. it's fine i'm just stuck in 2020 like so many people all right so let's say i wanted to know that time until retirement equals 55 minus h print time until retirement i'm going to ask the user for their name store it and name i'm going to ask the user for their age i'm going to store it in age i'm going to do some math time until retirement equals 55 minus age i'm going to print that there's going to be an error let's see it enter your name adam enter your age 37. uh oh i got a runtime error in the middle of interacting with my program i got an error i got a type error unsupported operand for type string and integer oh okay okay all right let's go back to the code right here line number 13 okay hop over line 13 is right here oh i can't do that why can't i do that well because input automatically yields a string if i want an int i need to use the in function now there's an int function there's a float function there's a bool function if you want to force the user to use a specific data type with an input you need to wrap that input in that specific function int float bool whatever and that way it's going to force it and the benefit of that is integers allow us to do things that strings don't like math for example same with floats so we might need that booleans allow us to do conditional operators in a different way so we might need that from the user so it's important that we recognize now let's run this enter your name enter your age and it works it printed the years until retirement now what happens in that same situation if i don't enter a number so i'm not paying attention i throw an a in there bam i get a value error okay invalid literal for int with base 10 a a is not an integer so we'll deal with this much later in the course but we would then have to be prepared for that error so we'd have to do a try and a catch so we're not going to worry about that right now so this is how we can add in that user input piece okay it's a really simple function we just need to know how it operates and how it works with variables and variable types again everything's going to come back to variables awesome all right time for the challenge so remember last week we did the mad lib with the hardcoded values all right so this time we're going to take that same mad lib okay and you can use a different mad lib if you want to that's up to you but you see all these words that we hard coded in here that's clunky we should rewrite this with user input so instead of word one being hardcoded to harry maybe we ask the user for an adjective and then we ask the user for a nail and so on and then we suddenly have an interactive mad lib where you could hand it to your baby brother or sister on your laptop and they get the prompt it says enter an attitude they do it they enter each one and when they're done it prints their mad lib to the screen that's great so that's what i want you to do for the challenge on this lesson i want you to modify the mad lib from last time with the hard coded values to benefit from user input and we'll quickly look at a solution to that in the next video thank you for watching don't forget if you like the content like the video share subscribe it's great to know that people want this and people enjoy it hit me up in the comments if you have questions happy to try to answer them as best that i can good luck with the challenge and we will see you back next time