hello coders welcome back to the Arduino basics tutorial series this is lesson number 14 in this lesson we're going to be working with a vibration or a shake sensor along with a buzzer we're gonna use a simple two leg vibration switch sometimes called a shake switch or a shake sensor we're also going to use one of the standard two leg buzzers start out let's look at the wiring diagram to set this thing up but we have our vibration sensor right here plugged into our breadboard now it doesn't actually matter left leg a right leg as long as one of them is sent to a zero on Arduino and one of them is sent to voltage so I have the left leg going to voltage the right leg going down into a zero on my Arduino my buzzer has a positive and a negative and it'll be written right on your buzzer which side is the positive which side is the negative my positive end I'm going to take two pin number four on my Arduino my negative end I'm gonna take to the ground row on my breadboard so ground that out that's all the wiring we need to get this thing up and running just take a second get it wired up the meeting dock in the coding environment so here we are back in our code environment I have a new file called lesson 14 where we're gonna trigger a buzzer when shaking the Arduino board so we use that vibration sensor to do that first things first let's add in our pin declarations as well as a variable that we'll use for our sensor value we plug our buzzer into pin 4 and our sensor into a 0 so we've defined these as buzzer pin and sensor pin I've also have an integer called sensor Val which is going to store the value coming in from our sensor the value has a range of 0 to 10 24 we'll see that later with a print line statement that we'll do next in our setup function we have two things to do we're going to initialize our serial monitor and we're going to set the pin mode for the buzzer pin so our serial monitor is set up for debugging and for print statements and then our pin mode for the buzzer pin will be an output pin so we can output voltage to turn the buzzer now we're ready to move on to our loop function the first thing we need to do every time our code loops is we need to read the value from the vibration sensor so to do that we use an analog read on our sensor pin and I'm going to store the value in our sensor Val this is the variable that we created at the top of the file so sensor Val is now equal to the value read through an analog Channel and the sensor pin so pin number 4 read an analog stored in sensor value ok so now we have that number we can actually look at it next thing is gonna be using an if statement to see if that value has changed so what you'll notice when we look at our print line statement is our vibration switch tends to hover right around the value 1024 when no vibration is occurring maybe sometimes dips down to 10 23 and then we'll really not dip down below 10 23 unless something actually happens like it gets shaken or moved or bumped or whatever so we'll use 10 22 as a threshold value so we'll do an if statement here with that value the sensor value and 10 22 if my sensor value is less than 10 22 this means that the board has been shaken or the sensor has been bumped or something has happened otherwise it wouldn't get below 10 22 it would be hovering around 10 23 1024 so what do we want to have it and we're gonna use a new function that we haven't used before called tone buzzers are pretty standard with Arduino so we have a function we can call to send a specific tone over a pin so what pin do we want to use buzzer pin and what pitch of the tone do we want to send it out I'll send this one out at 300 so this says send a tone over this pin at this pitch okay so we can modify the pitch and things like that later on if we want to in the extensions of the challenge so now we have our if statement so if the sensor is reading at a certain value it's going to trigger a tone so if the value is no longer reading under that so the vibration has ceased so this is our else statement we need to call a function called no tone and this just takes a pin value and this stops sending a tone over that signal so our if statement says the sense of value dips below 10 22 that's only gonna happen when the vibration occurs then we trigger the tone on the buzzer pin at this pitch otherwise so we should probably have a delay in here somewhere as well put a short delay at the end and we should add some debug statements in so something so that we can see the sensor values as they're happening so I'll actually put that up here before the if statement so here are a couple of print line statements that we can use print the sensor value with a colon after it and then print line the actual value and this will just give us a nice quick readout of what the vibration sensor is reading the tone is pretty quick right now because our delay is so short okay we could have the delay be longer and that would allow the tone to play for longer before it goes back to detecting vibration again so let's push this code out to our board and let's see it in action so now that we've pushed there to the board let's open up the serial monitor so that we can see the values so here we see 1023 is recording pretty much across the board and if I just come over here and give a little flick to my sensor you see that number of seven hundred and thirty two cascading it's way up and you heard the tone occur so if I flick it a few more times so we can see how the vibration is being triggered and the range of values that we're seeing usually in the eight hundred nine hundred maybe in the seven hundred range depending on how severe vibration occurs that's set up and that's working properly this is just a great simple example of taking an input and then producing an output which is really what we want to do with these boards we want to be able to get the input that we want do any calculations or logic with those inputs and then produce a certain kind of output that's the reason we learn this kind of code create job on this short quick lesson on using a vibration sensor and a buzzer will keep the extension short as well so for an extension on this why don't we just modify the beep or the buzz that we get why don't we see if we can get it to buzz or beep twice when the vibration occurs and maybe hold each one a little bit longer so instead of just the really quick beep we get along though maybe a half second or a onesecond beep beep before it goes back to normal operation ok great job with a quick extension let's move on to a quick challenge for the challenge I'd like you to use the actual values coming in from the serial monitor so said that we saw them around seven hundred eight hundred nine hundred and create a range of tones on the buzzer so the more severe the vibration the higher pitch the tone so we set up a little range there you can all these like a mathematical range or you could just use several if statements you know essentially if the sensor value comes in under seven hundred play bits if it's under eight hundred to do this one nine hundred whatever so setting up some ranges so we have at least three different tones that are gonna occur depending on the severity of the vibration and that's it for the challenge on this one we wanted to keep this one pretty quick and pretty short but still getting you using these core principles of programming like conditional statements analyzing inputs and producing outputs thank you so much for watching I hope you enjoyed the video I hope you learned something from it and I hope I see you back here in Lesson number fifteen if you did enjoy it be sure to LIKE the video and subscribe to our channel to stay up to date as we continue to post the Arduino basics tutorial series have a great day