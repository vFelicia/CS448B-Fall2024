hello future engineer welcome back to the Arduino basics tutorial series on code with Connor this is lesson number 15 where we're gonna use an LCD screen to display temperature and humidity values based on a temperature humidity sensor so let's get started with the wiring for this lesson I'm using a dht11 temperature and humidity sensor these come in a three pin and a 4 pin model in each case I'm still only gonna wire up three of the pins and it allows me to get a decent reading on the temperature and the humidity inside of a room reading from left to right on the humidity sensor the left pin is gonna go to voltage next pin the second pin in is going to go to our due√±o board I currently have this one going to a pin number seven and then the third or final pin depending on whether you have a three pin or a four pin will go to the ground if you have a four pin DHC sensor it's the third from the left that you'll skip okay and the final pin will go to ground like I have in the diagram that's all the wiring we need for the sensor it's like in a previous lesson we're gonna wire up our LCD display using an i2c chip ground goes to the ground row the VCC goes to the voltage row our SDA our data pin is going to a four and our SCL our clock pin is going to a thigh so this is what our wiring setup is gonna look like in order for our sensor to be able to read in temperature and humidity values from the room and our LCD screen to connect to our code so that we can eventually print those values out to the screen now the wiring is all done we're gonna jump over to the code and figure out how to write the code for this project so here we are in our coding interface I've created a new file for lesson number 15 well we're gonna display temperature and humidity values on an LCD screen to start things off we need to bring in a few libraries in order to work with both our LCD screen as well as with our DHT sensor for the DHT library I can do D H th and DHT underscore U dot H for universal these are two DHT libraries if you look it up through the library section on idea Arduino web interface these will be the ones that will automatically pull into your code when you search for DHT our same library our liquid crystal i2c lie that we used earlier to bring in the library needed to work with our LCD display now that we have our libraries in let's put in the code to initialize our LCD display and this is the code we used earlier liquidcrystal underscore i2c which is our library call this one LCD and then 0 X 7 xx + 4 helps set it up as a 16 by 2 line display which is what our standard LCD display is next up we're gonna set up the pins and initialize our sensor so I'm going to define a DHT pin as 7 and defined DHT type as DHT 11 and then I set up my DHT object th TD HD using the pin and the type so now a lowercase DHT can be used when referencing our sensor and lower case LCD can be used in referencing our screen so this has set up all of the initial functionality with our libraries and our sensor in our screen that we can now jump into our setup function and begin writing our own code first thing we're going to do inside of our setup function is initialize our screen and our sensor to initialize our screen like in the previous lesson LCD on it followed by LCD backlight ok this sets it up is ready to print values to it and turns the backlight on on the LCD display the sensor uses a begin function so DHT dot begin to initialize the sensor so it's now ready to read values and finally in our setup function we'll print some basic debug and intro statements out to our serial monitor just to use for debugging and understanding how our sensor is reading values so I will begin my serial monitor wait half of a second for the system to boot up and then I'm going to print dht11 humidity and temperature sensor backslash n backslash n now this is a newline character backslash n so that forces our serum owner to jump down to a newline kind of like pressing enter so by adding those inside the quotation marks can jump extra lines it's good for formatting things sometimes and then delay one second before we actually go into our loop function this is just an initialization set of print statements now we're ready to write the actual code to read our temperature sensor and then display those values on our screen so in order to read the values from our sensor we need some functions that are built into our library particular read humidity and read temperature so these are gonna return what's called a float value which is a decimal value of that decimal varial type so float H is going to be set equal to DHT don't read humidity I'm creating my own variable H which is of type float and I'm gonna store the return from read humidity into that vine I have floaties it's gonna be the h2 read temperature now by default this is going to return the temperature in Celsius which is what we want you can actually pass a true value a boolean statement like true into that which will make it return the value in Fahrenheit instead of in cells we're going to keep it as Celsius so at this point H and T should have our humidity and temperature stored in them but we need to verify that it actually read the values properly from the sensor okay so we're going to use a function and an if statement to check this so let's read through this if is man is n a n humidity or is NaN T so is NaN as a builtin function in arduino which stands for is not a number so if H is somehow not a numerical value then this will fail the if statement if temperature is not a numerical number then this if statement will fail so if either one of these turns out to be true that temperature who humidity is not a number then it will print failed to read from the sensor and it will return which just exits this particular loop and let's the loop function recall over again so this is just a way of checking that it actually read numerical values from the sensor properly so now that we've done that now we're ready to print the values out we've already confirmed they are in fact numerical values so we're gonna print it to two places we're gonna print it to our serial monitor and we're going to print it to our LCD screen so let's start with humidity to print humidity to the serial monitor I do a serial dot print current humidity equals a serial dot print H and then a serial dot print line percentage and another couple of spaces so this should print current humidity equals the actual number followed by a percentage sign to print the humidity to the LCD display I set my cursor to the top row left hand side print H um equals and a space print the humidity value print a percentage sign okay I have less characters to work with so you'll notice I didn't write the entire word humidity so that should print our community to cereal and R cubed e to the LCD let's repeat that process for temperature to print the temperature to the cereal temperature equals print T now this is a little special in Arduino we can use the Unicode value for the degree symbol so this is utf8 which is backslash X capital C backslash X capital B 0 and this will put the degree symbol into our serial monitor and then the c4 Celsius so there's just a formatting thing you can look these kind of things up online you can look like Unicode or ASCII value for a degree symbol and you can find the print codes as to what you would put there to print those characters so I wanted to try that it's a different character on the LCD because again the way that it's being written is using a different formatting style so I set the cursor to the second row left hand side print temp print the temperature and then this one uses a char value and a C char belly for 223 which is the degree symbol and then see for Celsius okay so this will print my temperature to serial.print my temp the LCD and then i want to wait I don't need it constantly trying to print all at the same time I want to you know gather the temperature and humidity and then wait a few seconds so I have it waiting five seconds then it'll read the temperature I made it again and update the values in our serial monitor and on our LCD display so this code should read our value make sure it's a valid value print humidity to the LCD and the serial print temperature to the LCD in serial and then wait five seconds and do it all over again let's push it into the code and have a look at how it works we'll start in the serial monitor so we can see on here what we're reading from our humidity sensor so current humidity value with a percentage temperature value of the degree symbol in Celsius and you'll see every five seconds is going to up room I'm in right now is 11 percent humidity 24 degrees Celsius okay and it's gonna continue to update and we can see those values you can also play around like you could wrap your hand around the temperature sensor and see it go up if we look at the LCD display let me just bring this up for you so we can see humidity value temperature value and it updates as the serial monitor updates okay and we get the degree symbol on there so it looks nice works well great job with the bass lesson hopefully you understand a little bit about how to read in values from the sensors know if you don't happen to have a dht11 Tama humidity sensor if you look up whatever type of sensor you have on Google you can usually find the libraries necessary and the basic initialization instructions necessary in order to modify this code to work with a different sensor for the extension for this one what we're gonna do is if you remember I was telling you about how you can add that true parameter into the read temperature value on the sensor to get the value in Fahrenheit so if we have a look at my LCD here you'll see that instead of it doing a new reading every five seconds but every twoandahalf seconds it's actually reading between or switching between a Celsius and a Fahrenheit reading for the temperature so the humidity is still just in percentage values but now it's displaying the humidity on one line and the temperature in Celsius two and a half seconds later switches out to Fahrenheit and then new reading Celsius switch to Fahrenheit and then new reading Celsius switch to Fahrenheit and so on so that's what we're doing for the extension for this activity just gonna have to read in that extra value from the sensor using the true parameter store it in a different variable and then include that into our print line statements so that we can see it in Fahrenheit and in Celsius and it's just a matter of having some delays in between the prints to the LCD screen so we can see the print in Celsius and a slight delay then the print in Fahrenheit and then it'll redo the loop function which will read new values and repeat the process again so that's what we're looking at for the extension for lesson number 15 hopefully the extension went well and you're now comfortable with adding in that new variable and using that read temperature function with without that your parameter to get Celsius or Fahrenheit for the challenge I'm just gonna show you my LCD here so you have an idea what we're looking at now don't worry too much about the timing of it all but just look at the format of the structure so we've got humidity on the top line with a percentage then it switches to temperature and it'll show both the Celsius and the Fahrenheit temperature underneath and then it rotates back and forth maybe you want it a little slower a little faster but the idea there is about having that again that loop structure so it'll display the humidity with the percentage value then it'll switch over display the temperature and then the Celsius and Fahrenheit values you may want to make use of the LCD clear method which allows you to clear anything that's been printed to the LCD screen before you print new values out to the screen you know that could be helpful as well good luck with the challenge I hope it goes well I'm excited to see you back here in Lesson number 16 for the Arduino basics tutorial series if you like what we're doing please like the video subscribe to our channel my name is Adam have yourself a great day