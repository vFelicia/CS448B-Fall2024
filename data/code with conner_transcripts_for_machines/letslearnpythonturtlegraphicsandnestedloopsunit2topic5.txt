welcome back humans this is let's learn python i'm adam we're going to jump into unit two topic number five where we're going to learn about turtle graphics talk a little bit about nested loops make things look a little prettier or at least give us the ability to do something that involves graphics which is kind of neat this early on in coding there's lots of people who teach coding and they do a lot of graphic stuff early on personally i'm kind of a believer of you learn the foundations and we do a lot of that with text and then we bring in graphics when the time's right but hey everyone's got their way and there's no wrong way as long as you're getting in there and you're learning you're doing the right thing before we get into today's stuff we're going to jump back first we're going to look at the challenge from the last lesson so this was the challenge from last time it was all about this kind of user menu this text mine looks like this yours might not but i just wanted to show you a little bit of the code that's going on in the background so if i go to blue pill it gives me that the nice printer that gives me a second choice no i'm not sure brings me back red pill it ends so if we look at the code here i have a string variable inside my while true loop i'm asking for a string variable that i'm getting from the user and there's my prompt you'll notice the use of the special characters i use backslash ends in here i wanted to jump to new lines i wanted to make it look a little nicer would you like the red pill of the blue pill and tell them to enter r b i just use these parentheses to imply it then i'm going to compare their choice did they pick r did they pick b if they picked r the whole thing's done we just print the statement and then we break and that ends the loop that ends the program if they chose the blue pill i give them their print and then i take a new choice you'll notice i used a new variable name i don't want to override this variable that i've already created called choice so i call this one choice two use the input are you sure about your choice if they chose y i say so long and i break if they chose anything other than y then i continue which just resets the while loop and runs it again asking the first prompt to get in order to make it to this else it had to not be r and not be b so if i made it here then it was an invalid choice try again and then i continue which brings me back up and reruns it again so that's the code structure that i use in terms of this if and else and alif and break and continue uh for like a user menu or or a user choice so it should work well for you for any program where you want to have that the kind of looping menu where people can make a choice from them which we're going to do in our unit project as well so i wanted to go over that before we jumped into today's stuff which is turtle graphics so looking at turtle graphics well turtle graphics just sounds like a weird thing to say we're just talking about graphics but it's because there's a library in python called turtle and what we're going to do first is we're going to import it so we're going to import turtle okay lowercase t this is a builtin python library that allows these little graphics windows these little turtles now they can look like turtles or they can look like arrows they look like arrows by default you can make them look like something else we're going to set up a window we do this using a variable name i called mine win you could call it something else if you wanted and this is dot notation we're going to talk more about this deeper in the course but this is accessing the turtle library or the turtle class and from it calling on this function to run so turtle.screen is going to return a window which i'm going to store in my win variable and then tommy is the name that i gave to my turtle you could give yours another name you don't have to give it a real name you could just call it t equals library dot and then the turtle returns a turtle object which i'm storing under the name tommy and then using that name and the dot notation of calling functions tommy dot tommy dot i can call functions on my turtle and there's so many different functions that i can call i'm going to go through a couple basics with you and show you how they look and then we will look at the actual documentation for turtles you can see all the functions that are available so i'm going to do tommy dot pen size 5 give it a nice thick pen size for drawing i'm going to set tommy's color to blue you'll notice it's in quotation marks so tommy dot color and then i'm going to do a for loop so i'm going to do for i in range 4 i'm going to move tommy forward by 100 pixels pixels remember the tiny little dots that make up our screens and then he's going to turn left 90 degrees he's going to repeat that four times so if you can apply he's probably going to draw a square and then i have this window exit on click the exit on click function makes it wait for us to click our mouse on the screen before the graphics window suddenly disappears which is just helpful for looking at our graphics let's run this and we'll see how it looks and there we can see it pops up this turtle window this graphics window and it drew over up over down and then the arrow turned one last time to the left 90 degrees and the box was blue so let's mess with our code a little bit so here let's say we want to do a triangle instead so i'm going to change this to 3 i'm going to change my turn to 120 because that will leave a 60 degree angle on the inside and i'll make it red so i'm going to save that click in this window it disappears and i run again there's my triangle okay so you start to see the idea now the turtle is currently a little arrow that's what it looks like and then this is its trail that it leaves behind as it moves so we're back looking at the code now so now you can see the basic setup of a turtle graphics program we should look and see what all the methods or all the functions are available to us we'll talk briefly about a few of them and we'll look at a little bit more advanced example that uses nested loops and then i'll hit you with the challenge nice short one today this website i've linked in the comments this is the turtle documentation for the actual python library this is right on the python.org website and what we're going to do is we're going to scroll down here we're going to look mainly at now you can read through this in more detail i just want to look at some of the methods so for turtle motion you've got movement draw methods we did forward we could have shortened it and done fd backward right left there's a go to or a set position where we can actually put the x and the y variables in to send it to a specific position okay within our our space which is really cool to be able to do that to move it within our space okay we can also see some other ones like setting the x or y we can do a circle so drawing a circle just using straight up like tommy dot circle we can do that we can check on the state so what is the position what is the x coordinate and get an answer back we can set the pen either down or up so that's going to tell us whether it's drawing a trail or not drawing a trail if we pick the pen up and move it it's not going to leave a trail behind it if the pen is down and we move it it's going to leave a trail okay we can change the color which we saw we can change the fill color there are some functions to do filling so filling inside of a shape we can clear we can do all kinds of stuff we can hide the turtles show the turtle the turtle being the actual symbol in the middle like mine's an arrow and then there's some more advanced stuff further down related to the screen in the window that we're not going to get into so let's come back to our code let's just add a little element here so let's test a couple of those out let's add a go to so tommy dot go to and let's send them to oh i don't know um 0 comma negative 300 and then let's do a tommy doc color blue and then a tommy dot circle and let's see what happens when we run that oh it doesn't like the because i didn't give it a radius for the circle let's do it again let's say the radius is 50. so it drew my triangle it did a goto where it went down to x of 0 we're still at 0 0 here in the middle x of 0 and down 300 then it drew a circle with radius 50. if i didn't want this line i could use that pen up function so before my goto i can do tommy dot pen up and then after the go to tommy dot pen down run that and there we go draws the shape separately cool now that we've covered the basics of turtle we're going to jump in and do something a little bit more advanced so let's run something and then we're going to go back and look at how we did it i'm going to speed this up just so it goes a little faster for you i've got it set to its max speed right now but i'll speed it up in the video hey look at that a little spirograph that's cool drew a bunch of circles shifted them this is a nested loop problem now let's look at the code and see how we did it all right so i import my turtle nothing fancy there i set up my window i set up my turtle none of this is new pen size is five i did the speed command speed zero is going to set it to the fastest speed cool did that set the color to red again nothing fancy now my loops i did for i in range six so i'm going to do this six times going to run 0 1 2 3 4 5. if i is less than 2 so it's the first or the second run and we're gonna make sure tommy's color is red if i is l if i is less than four so that would be my next two is going to be green so that would be when i is two and three and then else so now my eye must be four or five and i'm going to set him to blue once his color is set i'm going to run a for loop j in range 360. this is inside of this loop so these loops are nested so i'm already doing an i that's going to run six times and then i'm doing a j 360. now this is going to draw a circle the oldfashioned way so 4j in range 360. tommy.forward1 tommy.left 1. so 360 times it's going to go forward one left one okay and that's going to create a circle now we could replace this whole loop with a circle command but this allows us to do other stuff as well maybe we don't want to do a circle maybe we want to do some other type of drawing here instead so we could do that inside of our loop then you'll notice this line of code now where is this block wise well this line of code is part of this loop because it's indented right but it is not part of this loop so this line of code is only going to run six times and what it does is after the first circle is drawn it's going to shift tommy to turn 60 to the left and then restart the whole process so 6 times 60 is 360. so what happens is tommy draws a circle then shifts draws a circle shifts and by the time he's done he'll be right back to where he started because those left turns of 60 six times works out to 360 degrees this is one example of how you can kind of play around with these turtles to create these kind of spirograph things and you can get really cool that if you do some googling around turtle graphic spirograph there's some crazy cool stuff that people have created i just wanted to introduce it and kind of show you a little bit of that code structure that we can use to create something like that and again the nested loop here is a bit redundant because you could use a circle command but you can kind of change the way that works in that maybe you don't go the full 360 right maybe you go 120 and then you just do it a bunch of times instead so let's say i just did 120 here so i'm not going to do the full circle i'm just going to do a third of the circle right and then maybe i want to take this range and instead of just doing this you know six times maybe i want to do it 60 times and i only want to turn six each time and then i'm going to take these to 20 40. we're just going to add a tommy.go200 with a pen up before it and a pen down after and now we're going to try running that so we get a third of a circle shoot back turn third of a circle shoot back turn a third of a circle we're going to watch this go i'll fast forward it here there we go so you see the way that worked did it all in red then all in green and on blue you can do all kinds of wild stuff now that we're done talking about turtle graphics a little bit about nested loops and nested loop structure indentation i want to talk about your challenge i want you to use a circle when you use turtle and i want you to make me a set of these weren't able to have the olympics this year because of covet all that fun stuff so let's honor them let's do some olympic rings here we go so we can draw the olympic rings using the same commands that we just talked about using turtles colors set positions circle commands maybe loops we can even make this better once we learn functions uh but yeah this is what i want you to do for the challenge i want you to make me some olympic rings good luck with it i think it'll go fine this is a nice little wrap up before we do our end of unit project which is what we're going to be doing next so thanks for sticking with me hopefully you got some of the turtle graphics you can have a little bit of fun with it you can get pretty interactive you look at some cool turtle graphics projects online there's some amazing stuff people have done with turtle graphics that just get a little bit more advanced check them out see if you can mess with their code understand their code that's a huge part of learning how to code like the video share subscribe to the channel if you want to keep up as we're going through this course i'm glad to have you here hit me up in the comments you have questions bye humans we will see you soon