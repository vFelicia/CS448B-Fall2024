With timestamps:

00:00 - all right what's going on everybody in
00:02 - this video we're going to discuss binary
00:04 - search trees but first we'll need to
00:06 - know what a binary tree is a binary tree
00:09 - is a tree where each node has no more
00:13 - than two children that's why it's binary
00:15 - in this example node one has two
00:17 - children two and three and each of these
00:20 - children have their own children they
00:22 - have no more than two children nodes
00:24 - four and five are the children of two
00:26 - and nodes six and seven are the children
00:28 - of three in this similar example this
00:31 - would also be a binary tree node three
00:34 - only has one child node six but with a
00:37 - binary tree no node has more than two
00:40 - children since node three has one child
00:42 - that's fine but if node three had three
00:45 - children well that would no longer be a
00:47 - binary tree now what makes a binary
00:50 - search tree different from a binary tree
00:52 - is that the values are arranged in a
00:55 - certain order here's the order the root
00:57 - node should be greater than the left
01:00 - child but less than the right child four
01:03 - is greater than two and four is less
01:06 - than six that's the pattern that this
01:08 - data structure is built around if we
01:10 - take a look at some of the subtrees
01:11 - let's say this one two is greater than
01:14 - one but less than three
01:16 - and in this subtree
01:18 - six is greater than five but less than
01:20 - seven
01:21 - if done correctly starting at the root
01:23 - node the leftmost child should be the
01:26 - least value and again starting from the
01:29 - root node the rightmost child should be
01:31 - the greatest value the reason that these
01:34 - nodes are arranged this way is for quick
01:36 - lookup let's say we're looking for five
01:38 - what we'll do is compare 5 to the root
01:40 - node if 5 is equal to the root node well
01:43 - then we found our answer if 5 is greater
01:45 - than our root node we will move down to
01:47 - the right branch and do the same thing
01:49 - again is 5 equal to 6 no it's not
01:52 - however it's less than six so we know to
01:55 - go down at this branch the runtime
01:57 - complexity to find a value within a
01:59 - binary search tree is big of log n in
02:02 - its best case so let's code a binary
02:04 - search tree now
02:06 - okay let's begin let's create a node
02:09 - class file new class i will name this
02:11 - node and finish
02:14 - nodes will have some data maybe an
02:16 - integer this time int data and the node
02:19 - class should contain at most two nodes
02:22 - node left for the left child and node
02:26 - right for the right child if a node is a
02:29 - leaf node well then these will be null
02:31 - but we would still like to allocate
02:33 - space to hold children
02:35 - and within the constructor we will pass
02:37 - in some data
02:39 - int data and assign it
02:42 - this dot data equals data
02:45 - now let's create a binary search tree
02:47 - class file new class
02:51 - binary
02:52 - search
02:54 - tree
02:55 - and within our main class let's
02:57 - instantiate a binary search tree object
03:00 - binary search tree
03:01 - i'll name this tree equals new binary
03:05 - search tree
03:06 - and within the binary search tree class
03:09 - each binary search tree should have a
03:11 - root node
03:12 - node
03:13 - root
03:14 - here are some methods we'll need an
03:16 - insert method to insert nodes public
03:19 - void insert
03:22 - and there is a parameter of a node
03:25 - node
03:26 - node
03:27 - now let's create a second method this
03:29 - next method will be a helper method of
03:31 - the insert method so the insert method
03:33 - is going to call its helper method and
03:36 - this will be private
03:39 - the return type is node
03:41 - insert
03:42 - helper
03:44 - we need a root node node
03:46 - root
03:48 - and a node
03:50 - node
03:50 - node
03:52 - in order for our program to compile we
03:54 - do need to return something so just as a
03:57 - placeholder i'm going to return null
04:00 - okay for the next method we need a
04:02 - display method
04:03 - public
04:04 - void
04:05 - display
04:08 - and helper method
04:10 - private
04:11 - void
04:13 - display
04:15 - helper
04:17 - and this has one parameter a root node
04:20 - node root next method is a search method
04:24 - public
04:25 - boolean we're returning a boolean search
04:30 - and the parameter is
04:32 - int
04:33 - data
04:34 - and we will need a helper method
04:39 - private
04:40 - boolean
04:42 - search
04:44 - helper
04:46 - there are two parameters
04:48 - node
04:49 - root
04:50 - and int
04:51 - data
04:52 - again we do need to return something i'm
04:54 - going to return false just as a
04:57 - placeholder
05:00 - okay next method is a remove method
05:02 - public
05:04 - void
05:05 - remove
05:07 - and the parameter is int data
05:11 - and we'll need a helper method
05:14 - the return type is node
05:16 - remove
05:17 - helper the two parameters are node root
05:21 - and int data
05:23 - we do have to return something so as a
05:25 - placeholder i'm going to return null our
05:28 - remove helper method is also going to
05:30 - rely on two separate methods one to find
05:32 - a successor and another to find a
05:34 - predecessor this is in case we're
05:36 - deleting nodes we have to shift nodes
05:38 - around so this will be private
05:42 - int
05:43 - successor
05:45 - and we will pass in
05:47 - node
05:48 - route
05:50 - and we need to return something let's
05:52 - return zero as a placeholder and let's
05:54 - copy this paste it and this will be a
05:57 - method
05:59 - predecessor
06:02 - and that will be it so let's close these
06:04 - for now and begin with the insert method
06:07 - so with the insert method we will assign
06:10 - our root node equal to
06:12 - insert
06:14 - helper
06:15 - method
06:17 - pass in our root node
06:19 - and a node
06:20 - so the reason that we're using helper
06:22 - methods is that we'll be using recursion
06:24 - so it's a lot easier to use recursion if
06:26 - you have a helper method within the
06:29 - insert helper method
06:31 - let's declare int data equals
06:34 - our nodes data node is the node that
06:37 - we're passing in to insert
06:40 - so let's check to see if our root node
06:42 - is assigned or not
06:43 - so if
06:45 - our root is equal to null then we should
06:48 - probably assign this node to the root
06:50 - node because well this is the first node
06:53 - root equals node
06:55 - return root
06:58 - if root is not null we have to compare
07:00 - the data to see if it's less than a root
07:02 - or greater than our root else if
07:05 - our data
07:07 - is less than
07:09 - the data of the root node
07:11 - then we are going to assign this node as
07:14 - the left child of our root node
07:16 - are roots left child root dot left
07:19 - equals
07:20 - and we will use recursion
07:23 - insert
07:24 - helper method
07:27 - pass in our roots left node and our node
07:31 - the root node is going to change with
07:33 - recursion at first it's going to be the
07:35 - root node of the entire tree
07:37 - after recursion we're examining the root
07:39 - node of a subtree
07:42 - so if we're passing in the left child of
07:44 - the original root node well then that
07:47 - left child is now the root node of a
07:49 - subtree that we're currently working
07:50 - with so else if the data is less than
07:53 - the current root node we go left if it's
07:56 - greater than the root node then we will
07:58 - go right
08:00 - else
08:02 - root dot right that's the right child
08:05 - equals
08:06 - insert
08:07 - helper method
08:10 - pass in root dot write
08:13 - and our node and it's the same process
08:15 - all over again
08:17 - and at the end we will return the
08:19 - current root node
08:21 - okay that is it for the insert method
08:23 - and the insert helper method so let's
08:26 - insert a few nodes
08:28 - although we can't yet display them
08:30 - let's insert some anonymous nodes
08:32 - tree dot insert and we can pass in a
08:36 - node either a node name or an anonymous
08:39 - node so let's pass in some anonymous
08:41 - nodes
08:43 - uh let's pass in the number five or some
08:45 - other number of your choosing
08:48 - and let's pass in a bunch of numbers
08:51 - how about one and nine make sure these
08:53 - are not in order
08:55 - seven and three
08:58 - six
08:59 - four and maybe one more
09:02 - eight if you run and compile this there
09:04 - is nothing obvious that really happens
09:06 - so let's work on a display method next
09:09 - so with the display method we will
09:11 - invoke our helper method display helper
09:14 - pass in the root node within the display
09:17 - helper method we're going to check to
09:19 - see if the root node of our subtree does
09:21 - not equal null
09:24 - so if
09:25 - root does not equal null
09:29 - if you would like to display these in
09:30 - order we can use in order traversal and
09:33 - that uses recursion
09:35 - so invoke the display helper method
09:38 - pass in the root child's left node root
09:42 - dot left if we're using recursion the
09:45 - first piece of data that's displayed is
09:48 - the least value and these values will be
09:51 - displayed in increasing order
09:53 - technically the term is non-decreasing
09:55 - but think of it as ascending order so
09:57 - the very first value is going to be the
09:59 - least one followed by the root node of
10:02 - this subtree
10:04 - system.out.printline root.data
10:08 - in our first subtree the data all the
10:10 - way to the left is one and the root node
10:12 - of that subtree is two then we need the
10:14 - right child which should theoretically
10:16 - be three so again we'll invoke the
10:18 - display helper method and pass in the
10:21 - right child so this is in order
10:23 - traversal all of the nodes will be
10:26 - displayed in non-decreasing order so
10:28 - let's try this
10:29 - at the end of our main class let's
10:31 - invoke tree dot display
10:35 - and see what happens
10:38 - yeah there we go
10:40 - all of the nodes within our binary
10:42 - search tree are now in order if you
10:44 - would like this in reverse order you can
10:45 - just change these methods around replace
10:48 - left with right
10:50 - and right with left
10:53 - and these are now in decreasing order
10:55 - but let's change that back
10:58 - okay up next we have the search methods
11:00 - okay search will return
11:03 - then invoke the search
11:05 - helper method
11:08 - pass in our root node
11:10 - as well as some data
11:11 - within the search helper class
11:14 - we'll check to see if root is equal to
11:17 - null
11:18 - that means our tree is empty so of
11:20 - course we can't search for anything
11:23 - return
11:24 - false
11:26 - then add
11:27 - else if
11:29 - our root dot data is equal to data that
11:33 - means we found the data that we're
11:35 - looking for there's a match then we're
11:37 - going to return true
11:39 - we found what we're looking for
11:41 - else
11:42 - if our roots
11:44 - data
11:46 - is greater than our current data that
11:48 - we're looking for that means we need to
11:50 - go left
11:51 - so return
11:52 - then invoke the search helper method
11:56 - pass in the left child root dot left and
12:00 - the left child is now the root node of
12:02 - the subtree
12:04 - and then you need to pass in data as
12:06 - well
12:07 - else we go
12:08 - right so copy this paste it
12:12 - return search helper root dot write and
12:17 - data and we can get rid of this return
12:19 - statement at the bottom
12:20 - okay let's try this
12:22 - so at the end of my main class let's use
12:25 - a print line statement and i will type
12:28 - tree dot search
12:30 - and let's search for zero none of my
12:33 - nodes have zero as a piece of data so
12:36 - this should return false uh let's search
12:38 - for one now
12:40 - that returns true there's a one within
12:43 - one of my nodes
12:44 - what about nine
12:46 - that is also true
12:48 - and let's try ten
12:51 - and that is false
12:53 - okay so those are the search methods
12:56 - and lastly we have the remove methods as
12:59 - well as successor and predecessor now
13:02 - these methods are going to be a little
13:03 - bit tough but i'll try my best to
13:05 - explain it so within an if statement
13:07 - let's check to see if this data even
13:09 - exists first so let's invoke the search
13:12 - method and pass in our data so this
13:15 - returns a boolean true or false
13:18 - if we do find the data that we're
13:19 - looking for then let's invoke the remove
13:22 - helper method
13:25 - pass in our root node as well as our
13:27 - data
13:28 - then within an else statement and this
13:30 - part's optional uh let's let the user
13:32 - know that we can't find that data
13:36 - data plus
13:38 - could not be found
13:40 - so just to test things real quick i'm
13:42 - going to remove some data that doesn't
13:44 - exist
13:45 - tree dot remove
13:47 - zero
13:50 - zero cannot be found now let's move on
13:52 - to the remove helper method
13:55 - the first thing that we'll do is check
13:56 - to see if our root node is equal to null
14:00 - if our root node is equal to null
14:04 - then let's return the root node
14:08 - then within an else if statement let's
14:11 - check to see if the data that we're
14:13 - trying to remove
14:14 - is less than the data of our root node
14:18 - if it is we need to go left down the
14:20 - binary tree root dot left
14:24 - equals
14:25 - then invoke the remove helper method
14:28 - pass in the left child of the root node
14:31 - root.left as well as our data so we're
14:34 - going to go as far left as we can then
14:36 - add an else if statement
14:38 - else if
14:40 - data is greater than the data of the
14:43 - root node then we will go right so let's
14:46 - copy this paste it root dot write equals
14:50 - remove helper pass in root dot right as
14:55 - well as our data
14:56 - then add an else statement if we reach
14:58 - the else statement that means that we
15:00 - have found our node and i'll just add a
15:02 - note to explain that if the node we're
15:04 - trying to remove has children that kind
15:06 - of complicates things then we have to
15:08 - shift the nodes around but first let's
15:10 - check to see if it's a leaf node then
15:12 - that's really easy within an if
15:14 - statement we will check to see if the
15:17 - left child
15:18 - is equal to null
15:20 - and the right child
15:23 - is also equal to null
15:25 - that means that the node that we're
15:27 - trying to remove is a leaf node and
15:29 - that's really simple we don't need to
15:30 - shift any nodes around we can just set
15:33 - this current root node equal to null
15:36 - however if the node we're attempting to
15:38 - delete has a right child
15:40 - will have to shift those nodes around
15:42 - and find a successor
15:44 - else if
15:46 - root dot right does not equal no
15:50 - that means there's a right child
15:52 - and we need to find a successor
15:55 - to replace
15:57 - this node
15:59 - so we will assign
16:01 - root
16:02 - dot data
16:03 - is equal to the successor method which
16:06 - will find a successor for us
16:09 - and pass in the current root node then
16:12 - take root dot write
16:14 - equals and invoke the remove helper
16:17 - method
16:18 - pass in the right child root.right
16:22 - as well as root.data
16:25 - so when we delete a node that will
16:27 - create a gap and if there's a child well
16:29 - we don't want that child to be lost we
16:31 - don't want that child to become an
16:33 - orphan so we will link a child to that
16:35 - spot where we deleted a node now if
16:38 - there's a left child we have a slightly
16:40 - similar procedure so we can use an else
16:43 - statement
16:44 - take root.data
16:46 - and invoke the predecessor method
16:49 - take this line of code
16:51 - paste it root dot left equals remove
16:55 - helper method pass in the left child of
16:58 - the root node
16:59 - this else statement will find a
17:02 - predecessor
17:04 - to replace this node
17:08 - and at the end we will return root
17:11 - so we can close out of these two methods
17:14 - and we can open up the successor and
17:16 - predecessor methods what we're doing
17:18 - with the successor method is that we're
17:20 - attempting to find
17:22 - the least
17:24 - value
17:25 - below the right
17:28 - child
17:29 - of this root node
17:31 - we will assign the current root node
17:33 - equal to root
17:35 - dot right
17:37 - then within a while loop
17:39 - we will take root
17:41 - dot left and check to see if it is not
17:44 - equal to null
17:46 - while this condition is true take root
17:50 - set the sequel to root dot left
17:54 - and at the end return
17:55 - root dot data
17:58 - so what's happening here within the
17:59 - remove helper method
18:01 - if the node we're trying to delete has a
18:04 - right child we need to find a successor
18:06 - to fill in that gap and that successor
18:09 - should have the least value
18:11 - so we will go right and look as far left
18:14 - as we can because values on the left are
18:16 - less than the root numbers on the right
18:19 - are greater than our root after going
18:21 - right we will go as far left as we can
18:23 - to get the lowest value then return it
18:26 - so that's what we're doing when we're
18:28 - assigning a successor to fill in that
18:29 - gap when we delete a node that has
18:31 - children and then the predecessor method
18:34 - is going to be very similar we will find
18:36 - the greatest value below the left child
18:40 - of this root node so we can copy all of
18:43 - this
18:44 - paste it
18:45 - this time we will go left
18:47 - then go as far right as we can go
18:50 - i do apologize this is a lot to take in
18:52 - recursion can be very confusing but yeah
18:55 - that's everything let's attempt to
18:56 - remove a node
18:58 - so before we display our tree let's take
19:00 - tree
19:01 - dot remove
19:03 - then pass in the data of a node you
19:05 - would like to remove let's remove one
19:08 - and here are the remaining nodes we have
19:10 - two through nine all in order
19:12 - let's remove five okay one two three
19:15 - four six seven eight nine let's remove
19:17 - nine
19:19 - nine is no longer there and let's remove
19:21 - a node that is not within here like zero
19:25 - zero cannot be found
19:27 - all right then everybody that is a
19:29 - binary search tree just so you're aware
19:31 - the order in which you insert nodes into
19:33 - a binary search tree does matter if it's
19:36 - unbalanced technically my tree follows
19:39 - all the rules however it's fairly
19:41 - lopsided there is a way to balance
19:43 - binary trees but that's a topic for avl
19:46 - trees that's why the runtime complexity
19:48 - has a best case scenario of o of log n
19:52 - but a worst case scenario of big o of n
19:54 - depending on how balanced it is but
19:57 - basically a binary search tree is a tree
19:59 - data structure where each node is
20:02 - greater than its left child but less
20:04 - than its right the benefit of a binary
20:06 - search tree is that it's easy to locate
20:08 - a node when they are in order
20:10 - so yeah those are binary search trees if
20:13 - you would like a copy of this code i'll
20:15 - post this to the comment section down
20:16 - below don't be afraid to smash that like
20:18 - button leave random comments down below
20:20 - and subscribe if you'd like to become a
20:22 - fellow bro

Cleaned transcript:

all right what's going on everybody in this video we're going to discuss binary search trees but first we'll need to know what a binary tree is a binary tree is a tree where each node has no more than two children that's why it's binary in this example node one has two children two and three and each of these children have their own children they have no more than two children nodes four and five are the children of two and nodes six and seven are the children of three in this similar example this would also be a binary tree node three only has one child node six but with a binary tree no node has more than two children since node three has one child that's fine but if node three had three children well that would no longer be a binary tree now what makes a binary search tree different from a binary tree is that the values are arranged in a certain order here's the order the root node should be greater than the left child but less than the right child four is greater than two and four is less than six that's the pattern that this data structure is built around if we take a look at some of the subtrees let's say this one two is greater than one but less than three and in this subtree six is greater than five but less than seven if done correctly starting at the root node the leftmost child should be the least value and again starting from the root node the rightmost child should be the greatest value the reason that these nodes are arranged this way is for quick lookup let's say we're looking for five what we'll do is compare 5 to the root node if 5 is equal to the root node well then we found our answer if 5 is greater than our root node we will move down to the right branch and do the same thing again is 5 equal to 6 no it's not however it's less than six so we know to go down at this branch the runtime complexity to find a value within a binary search tree is big of log n in its best case so let's code a binary search tree now okay let's begin let's create a node class file new class i will name this node and finish nodes will have some data maybe an integer this time int data and the node class should contain at most two nodes node left for the left child and node right for the right child if a node is a leaf node well then these will be null but we would still like to allocate space to hold children and within the constructor we will pass in some data int data and assign it this dot data equals data now let's create a binary search tree class file new class binary search tree and within our main class let's instantiate a binary search tree object binary search tree i'll name this tree equals new binary search tree and within the binary search tree class each binary search tree should have a root node node root here are some methods we'll need an insert method to insert nodes public void insert and there is a parameter of a node node node now let's create a second method this next method will be a helper method of the insert method so the insert method is going to call its helper method and this will be private the return type is node insert helper we need a root node node root and a node node node in order for our program to compile we do need to return something so just as a placeholder i'm going to return null okay for the next method we need a display method public void display and helper method private void display helper and this has one parameter a root node node root next method is a search method public boolean we're returning a boolean search and the parameter is int data and we will need a helper method private boolean search helper there are two parameters node root and int data again we do need to return something i'm going to return false just as a placeholder okay next method is a remove method public void remove and the parameter is int data and we'll need a helper method the return type is node remove helper the two parameters are node root and int data we do have to return something so as a placeholder i'm going to return null our remove helper method is also going to rely on two separate methods one to find a successor and another to find a predecessor this is in case we're deleting nodes we have to shift nodes around so this will be private int successor and we will pass in node route and we need to return something let's return zero as a placeholder and let's copy this paste it and this will be a method predecessor and that will be it so let's close these for now and begin with the insert method so with the insert method we will assign our root node equal to insert helper method pass in our root node and a node so the reason that we're using helper methods is that we'll be using recursion so it's a lot easier to use recursion if you have a helper method within the insert helper method let's declare int data equals our nodes data node is the node that we're passing in to insert so let's check to see if our root node is assigned or not so if our root is equal to null then we should probably assign this node to the root node because well this is the first node root equals node return root if root is not null we have to compare the data to see if it's less than a root or greater than our root else if our data is less than the data of the root node then we are going to assign this node as the left child of our root node are roots left child root dot left equals and we will use recursion insert helper method pass in our roots left node and our node the root node is going to change with recursion at first it's going to be the root node of the entire tree after recursion we're examining the root node of a subtree so if we're passing in the left child of the original root node well then that left child is now the root node of a subtree that we're currently working with so else if the data is less than the current root node we go left if it's greater than the root node then we will go right else root dot right that's the right child equals insert helper method pass in root dot write and our node and it's the same process all over again and at the end we will return the current root node okay that is it for the insert method and the insert helper method so let's insert a few nodes although we can't yet display them let's insert some anonymous nodes tree dot insert and we can pass in a node either a node name or an anonymous node so let's pass in some anonymous nodes uh let's pass in the number five or some other number of your choosing and let's pass in a bunch of numbers how about one and nine make sure these are not in order seven and three six four and maybe one more eight if you run and compile this there is nothing obvious that really happens so let's work on a display method next so with the display method we will invoke our helper method display helper pass in the root node within the display helper method we're going to check to see if the root node of our subtree does not equal null so if root does not equal null if you would like to display these in order we can use in order traversal and that uses recursion so invoke the display helper method pass in the root child's left node root dot left if we're using recursion the first piece of data that's displayed is the least value and these values will be displayed in increasing order technically the term is nondecreasing but think of it as ascending order so the very first value is going to be the least one followed by the root node of this subtree system.out.printline root.data in our first subtree the data all the way to the left is one and the root node of that subtree is two then we need the right child which should theoretically be three so again we'll invoke the display helper method and pass in the right child so this is in order traversal all of the nodes will be displayed in nondecreasing order so let's try this at the end of our main class let's invoke tree dot display and see what happens yeah there we go all of the nodes within our binary search tree are now in order if you would like this in reverse order you can just change these methods around replace left with right and right with left and these are now in decreasing order but let's change that back okay up next we have the search methods okay search will return then invoke the search helper method pass in our root node as well as some data within the search helper class we'll check to see if root is equal to null that means our tree is empty so of course we can't search for anything return false then add else if our root dot data is equal to data that means we found the data that we're looking for there's a match then we're going to return true we found what we're looking for else if our roots data is greater than our current data that we're looking for that means we need to go left so return then invoke the search helper method pass in the left child root dot left and the left child is now the root node of the subtree and then you need to pass in data as well else we go right so copy this paste it return search helper root dot write and data and we can get rid of this return statement at the bottom okay let's try this so at the end of my main class let's use a print line statement and i will type tree dot search and let's search for zero none of my nodes have zero as a piece of data so this should return false uh let's search for one now that returns true there's a one within one of my nodes what about nine that is also true and let's try ten and that is false okay so those are the search methods and lastly we have the remove methods as well as successor and predecessor now these methods are going to be a little bit tough but i'll try my best to explain it so within an if statement let's check to see if this data even exists first so let's invoke the search method and pass in our data so this returns a boolean true or false if we do find the data that we're looking for then let's invoke the remove helper method pass in our root node as well as our data then within an else statement and this part's optional uh let's let the user know that we can't find that data data plus could not be found so just to test things real quick i'm going to remove some data that doesn't exist tree dot remove zero zero cannot be found now let's move on to the remove helper method the first thing that we'll do is check to see if our root node is equal to null if our root node is equal to null then let's return the root node then within an else if statement let's check to see if the data that we're trying to remove is less than the data of our root node if it is we need to go left down the binary tree root dot left equals then invoke the remove helper method pass in the left child of the root node root.left as well as our data so we're going to go as far left as we can then add an else if statement else if data is greater than the data of the root node then we will go right so let's copy this paste it root dot write equals remove helper pass in root dot right as well as our data then add an else statement if we reach the else statement that means that we have found our node and i'll just add a note to explain that if the node we're trying to remove has children that kind of complicates things then we have to shift the nodes around but first let's check to see if it's a leaf node then that's really easy within an if statement we will check to see if the left child is equal to null and the right child is also equal to null that means that the node that we're trying to remove is a leaf node and that's really simple we don't need to shift any nodes around we can just set this current root node equal to null however if the node we're attempting to delete has a right child will have to shift those nodes around and find a successor else if root dot right does not equal no that means there's a right child and we need to find a successor to replace this node so we will assign root dot data is equal to the successor method which will find a successor for us and pass in the current root node then take root dot write equals and invoke the remove helper method pass in the right child root.right as well as root.data so when we delete a node that will create a gap and if there's a child well we don't want that child to be lost we don't want that child to become an orphan so we will link a child to that spot where we deleted a node now if there's a left child we have a slightly similar procedure so we can use an else statement take root.data and invoke the predecessor method take this line of code paste it root dot left equals remove helper method pass in the left child of the root node this else statement will find a predecessor to replace this node and at the end we will return root so we can close out of these two methods and we can open up the successor and predecessor methods what we're doing with the successor method is that we're attempting to find the least value below the right child of this root node we will assign the current root node equal to root dot right then within a while loop we will take root dot left and check to see if it is not equal to null while this condition is true take root set the sequel to root dot left and at the end return root dot data so what's happening here within the remove helper method if the node we're trying to delete has a right child we need to find a successor to fill in that gap and that successor should have the least value so we will go right and look as far left as we can because values on the left are less than the root numbers on the right are greater than our root after going right we will go as far left as we can to get the lowest value then return it so that's what we're doing when we're assigning a successor to fill in that gap when we delete a node that has children and then the predecessor method is going to be very similar we will find the greatest value below the left child of this root node so we can copy all of this paste it this time we will go left then go as far right as we can go i do apologize this is a lot to take in recursion can be very confusing but yeah that's everything let's attempt to remove a node so before we display our tree let's take tree dot remove then pass in the data of a node you would like to remove let's remove one and here are the remaining nodes we have two through nine all in order let's remove five okay one two three four six seven eight nine let's remove nine nine is no longer there and let's remove a node that is not within here like zero zero cannot be found all right then everybody that is a binary search tree just so you're aware the order in which you insert nodes into a binary search tree does matter if it's unbalanced technically my tree follows all the rules however it's fairly lopsided there is a way to balance binary trees but that's a topic for avl trees that's why the runtime complexity has a best case scenario of o of log n but a worst case scenario of big o of n depending on how balanced it is but basically a binary search tree is a tree data structure where each node is greater than its left child but less than its right the benefit of a binary search tree is that it's easy to locate a node when they are in order so yeah those are binary search trees if you would like a copy of this code i'll post this to the comment section down below don't be afraid to smash that like button leave random comments down below and subscribe if you'd like to become a fellow bro
