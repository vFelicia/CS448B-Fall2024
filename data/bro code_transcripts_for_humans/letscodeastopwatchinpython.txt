With timestamps:

00:00 - hey yeah everybody so in today's video
00:02 - we're going to create this stopwatch
00:03 - program using Python's pyqt5 Library if
00:07 - you've been following the pi qt5 series
00:09 - up until this point you can skip ahead
00:11 - to the following timestamp where we've
00:13 - already set up a basic application you
00:15 - just have to make some minor changes if
00:17 - you're new to this series or new to this
00:19 - channel you will need the pi q25 package
00:22 - found within your site packages folder
00:24 - if you don't have this package you can
00:26 - open up a terminal to download it you
00:28 - can use pip which is Python's package
00:31 - manager install Pi
00:35 - qt5 but I already do have it installed
00:38 - once that's out of the way you will need
00:39 - the following Imports import CIS CIS
00:43 - means system it handles system variables
00:45 - for your python interpreter we will need
00:47 - the following widgets from PI
00:51 - qt5 access the module of QT widgets
00:56 - widgets are the building blocks of a pi
00:58 - qt5 application
01:01 - we will import the following widgets
01:03 - Q
01:05 - application
01:07 - Q widget Q label Q push
01:14 - button QV box
01:18 - layout and qh box
01:21 - layout let me put these on a new line
01:24 - just so we can read everything from the
01:26 - package of Pi
01:28 - qt5 access QT core we will
01:33 - import Q timer our timer will emit a
01:37 - signal after a given interval which is
01:39 - what we need for a stopwatch Q time to
01:43 - keep track of the time and QT for
01:46 - alignment let's do a test run to be sure
01:48 - that there's no
01:49 - errors looks like L and label should be
01:53 - Capital there we go no errors once you
01:57 - have the following Imports we will
01:59 - construct Class A Class of
02:03 - stopwatch which will inherit from The
02:05 - Base Class of Q
02:07 - widget our stopwatch will be a widget we
02:11 - will need a Constructor we'll Define
02:13 - that Dunder
02:15 - init no arguments besid self if we have
02:18 - arguments to pass to the parent of Q
02:20 - widget we will call the super class the
02:23 - parent call The Constructor of the
02:26 - parent no arguments
02:28 - currently now if we are running this
02:30 - file directly we'll use an if statement
02:32 - to verify that if Dunder name is equal
02:36 - to a string of Dunder main if this is
02:40 - true if we are running this file
02:42 - directly then we will construct a
02:45 - stopwatch we will create an app object
02:49 - call The Constructor within the Q
02:50 - application class pass in the following
02:54 - access sis our system access AR RGV
02:58 - which means arguments
03:00 - this is if we're using command line
03:02 - arguments which we won't be using but
03:05 - it's nice to Future proof our code just
03:06 - in case we do in the future we will
03:09 - create a stopwatch object stopwatch
03:13 - equals call The Constructor within our
03:15 - class of
03:17 - stopwatch our window is not going to
03:19 - show unless we call the show method take
03:22 - our stopwatch call the show method now
03:26 - our window is only going to show for a
03:27 - brief second
03:30 - we need to ensure a clean exit we can
03:33 - access CIS call the exit
03:36 - method pass in the
03:38 - following app then call the
03:43 - excore method this method starts the
03:46 - main event Loop and handles
03:48 - events so then we should have a basic
03:51 - window which stays in place until we
03:53 - close it we now have the main skeletal
03:56 - structure of a pi qt5 application set up
03:59 - if you're one of the people that have
04:00 - jumped ahead up until this point we have
04:02 - a class of stopwatch which inherits from
04:05 - the Q widget class we've constructed a
04:08 - stopwatch object and we're showing it so
04:11 - now we can begin designing our stopwatch
04:13 - we will create a Time object self. time
04:18 - equals call The Constructor within the
04:20 - class of Q time for arguments we'll pass
04:23 - in the hours minutes seconds and
04:27 - milliseconds all zero
04:29 - we need a label for the
04:31 - stopwatch self. time label equals called
04:37 - The Constructor of Q label what would we
04:40 - like the text to say I'll display some
04:43 - placeholder text a bunch of
04:47 - zeros zero hours minutes seconds and
04:51 - milliseconds we will add this label to
04:53 - self our
04:55 - stopwatch we need a start button self.
04:58 - start button equals call The Constructor
05:03 - within Q push button what would we like
05:06 - the text of the button to say let's say
05:09 - start we are adding this button to self
05:12 - our
05:15 - stopwatch we need a stop button let's
05:18 - replace start with stop change the text
05:21 - from start to stop and
05:26 - reset the name of this button will be
05:28 - the reset button
05:30 - the text will be
05:32 - reset we will need a timer to emit a
05:35 - signal at a given Interval self. Timer
05:40 - equals call The Constructor within the
05:42 - class
05:44 - qtimer then pass in
05:46 - self we're going to call a method of
05:49 - initialize UI self. init
05:53 - UI but we still have to Define this
05:56 - method all right within our stopwatch
05:59 - class we need the following
06:01 - methods a method of init UI this is
06:06 - where we'll be designing the user
06:07 - interface I'll write pass for now as a
06:11 - placeholder we need a method to
06:14 - start to start the stopwatch that is a
06:18 - method to stop the
06:22 - stopwatch a method to reset the
06:27 - stopwatch we'll create a method to to
06:29 - format our time format time besides self
06:34 - there's one parameter we have to pass in
06:36 - a time to format we will be returning a
06:39 - string a string representation of the
06:41 - current
06:43 - time and a method to update our display
06:48 - update
06:50 - display here are the six methods we'll
06:54 - need within our initialized user
06:57 - interface method we will set the title
06:59 - of the window because right now it says
07:03 - python we will take self our stopwatch
07:06 - call the set window title
07:11 - method and we will pass in
07:15 - stopwatch that should change the title
07:17 - of the window to stopwatch we're going
07:20 - to use a vertical layout manager for the
07:22 - label and the
07:24 - buttons we will create a layout manager
07:26 - named vbox vbox equals equs call The
07:30 - Constructor of q v box
07:35 - layout we will take our layout manager
07:39 - and add the following
07:42 - widgets self. time
07:46 - Lael then our start stop and reset
07:52 - buttons start
07:55 - button stop
07:58 - button and and reset
08:04 - button we will take
08:07 - self set the
08:09 - layout pass in our vertical layout
08:14 - manager so we have all of our buttons we
08:17 - have our widgets arranged in a column
08:20 - we're going to take our time label and
08:22 - also Center it
08:24 - horizontally we will take our time label
08:27 - self. time label
08:31 - call the set alignment
08:33 - method access our class of
08:37 - QT access the flag of align
08:42 - Center that's going to centeralign the
08:45 - time it should be aligned both
08:46 - vertically and
08:48 - horizontally now with your buttons
08:51 - they're arranged in a column we could
08:53 - group them together
08:55 - horizontally here's how we will create a
08:58 - horizontal layout manager of hbox hbox
09:01 - equals call The Constructor of
09:05 - qbox
09:08 - layout instead of adding these buttons
09:10 - directly to our vertical layout manager
09:12 - let's cut
09:15 - them paste them underneath
09:18 - hbox replace vbox with
09:22 - hbox then with our vertical layout
09:25 - manager
09:27 - vbox we will add
09:29 - our layout of
09:34 - hbox this group of buttons is arranged
09:37 - vertically with the time
09:40 - label now we'll be applying a style
09:42 - sheet access self our stopwatch call the
09:47 - set style sheet
09:49 - method we can pass in one extremely long
09:52 - string with a set of triple quotes all
09:56 - of the CSS like properties We'll add
09:58 - will do so between the set of triple
10:00 - quotes let's select our buttons Q push
10:04 - button we are selecting an entire
10:08 - class within a set of curly braces let's
10:11 - add the property of font size the font
10:14 - size of all buttons will be 50
10:19 - pixels let's customize our label select
10:22 - the class of Q
10:24 - label within a set of curly
10:27 - braces let's add the following
10:29 - properties ities font size will be
10:34 - 120 if you would like we can add a
10:36 - background color too to the
10:39 - label we can select a background
10:43 - color temporarily I will select blue but
10:47 - we can pick more specific shades of blue
10:49 - or another color here's
10:52 - how you can look up a Color Picker and
10:54 - select a very specific color you can use
10:58 - hex values RG b or
11:00 - hsl I've already selected a color I'm
11:03 - going to copy these hsl values so
11:06 - instead of a color name we will select
11:09 - hsl then paste those values if you have
11:13 - a degree symbol you will need to remove
11:16 - that and now we have a very specific
11:18 - shade of blue I will also round the
11:21 - corners of our
11:22 - label add the property of Border radius
11:27 - I will set that to be 20 pixels
11:30 - this will round the corners between each
11:32 - button and label we'll add some padding
11:36 - we're going to use multiple
11:38 - selectors we will select all push
11:41 - buttons and all
11:44 - labels apply the following properties to
11:46 - each I will add padding of 20
11:50 - pixels around these
11:53 - widgets and I will also make the font
11:56 - weight bold
11:59 - font weight will be
12:03 - bold all right I think that looks pretty
12:05 - good hey this is bro from the future I
12:08 - am currently editing this video if you
12:10 - would like you can add a font family one
12:13 - font that I think looks really good is
12:16 - calibri we'll apply that to all push
12:18 - buttons and Q
12:20 - labels I really like this font I think
12:23 - it fits a stopwatch but it's up to you
12:25 - if you would like to change the font I
12:26 - just thought I would mention that now we
12:29 - just have to add some functionality
12:31 - because these buttons don't do
12:33 - anything for each of our buttons we have
12:35 - to connect a signal to a slot we will
12:39 - take our start button self. start
12:43 - button with the signal of clicked we
12:46 - will connect the following slot we will
12:49 - call the start method self. start method
12:53 - let's do this with the stop
12:56 - button change start to stop
13:00 - clicked connect self. stop
13:03 - method
13:06 - reset self. reset button called the
13:10 - reset
13:12 - method at a given interval we're going
13:15 - to update our
13:17 - display self. timer during a signal of
13:23 - timeout we will connect the following
13:26 - method self. update display
13:30 - self. update
13:32 - display within our start method we will
13:35 - take our timer self. timer call the
13:38 - start
13:39 - method pass in 10 for 10
13:42 - milliseconds we will set an interval for
13:45 - a timeout every 10
13:49 - milliseconds within our stop method we
13:52 - will take our timer and instead called
13:54 - the stop
13:57 - method we'll get back to reset in just a
13:59 - moment let's work on the format time
14:02 - method from our time that we pass in we
14:05 - have to get the hours minutes seconds
14:07 - and milliseconds we will create some
14:10 - local variables hours equals access our
14:14 - time that we pass in call the hour
14:16 - method to return
14:18 - hours we have variable minutes time do
14:22 - call the minute method to return the
14:24 - minutes we have a variable of seconds
14:27 - seconds equals take our time called the
14:30 - second
14:32 - method then for
14:35 - milliseconds access our time call the
14:40 - MC which means milliseconds and call it
14:43 - this is a
14:45 - method I'm going to return a string an F
14:48 - string to represent the
14:50 - time we will add four
14:54 - placeholders hours minutes seconds and
14:57 - milliseconds each will be separated with
14:59 - the colon except for milliseconds which
15:02 - will be a DOT a
15:04 - period we will display the
15:07 - hours I'll add some leading zeros two
15:10 - leading
15:11 - zeros let's do this for
15:15 - minutes we're using a format specifier
15:18 - for two leading zeros as
15:20 - well
15:23 - seconds and milliseconds
15:31 - now we will work on the update display
15:33 - method we have to get the time self.
15:37 - time equals we will take our
15:42 - time but call the add milliseconds
15:45 - method Ms e
15:49 - CS then pass in 10 for 10
15:52 - milliseconds we're going to take our
15:55 - time label self. time label
15:59 - and set the text of
16:01 - it we will call our format time
16:05 - method but we have to pass in a time we
16:08 - will be passing in self.
16:12 - time let's see what we have
16:15 - currently we can start the
16:18 - stopwatch and we can stop
16:20 - it however we're displaying three digits
16:23 - for the milliseconds we can eliminate
16:26 - that within format time when we get the
16:29 - milliseconds we will use integer
16:33 - division we will divide by 10 this will
16:36 - convert our milliseconds from three
16:38 - digits to two we're basically dividing
16:40 - by
16:41 - 10 so here's our stopwatch currently we
16:45 - can
16:46 - start we can stop we can start again and
16:50 - we can stop again now we just need to
16:53 - reset here's how within the reset method
16:57 - we will take our timer self. timer use
17:01 - the stop method to stop we will reassign
17:04 - our time call The Constructor of Q time
17:09 - we have to pass in hours minutes seconds
17:11 - and milliseconds they're all going to be
17:14 - zero we're resetting our time and then
17:17 - we'll reset the text again of our time
17:19 - label self. time Lael call the set text
17:25 - method when we set the text we will
17:27 - first format it with the format time
17:30 - method but we have to pass in a time we
17:33 - will pass in self.
17:36 - time and now we should be able to reset
17:39 - our
17:40 - stopwatch we can
17:42 - start we can
17:45 - stop we can reset start again and stop
17:51 - again all right everybody so that is a
17:53 - cool stopwatch that you can make using
17:55 - python

Cleaned transcript:

hey yeah everybody so in today's video we're going to create this stopwatch program using Python's pyqt5 Library if you've been following the pi qt5 series up until this point you can skip ahead to the following timestamp where we've already set up a basic application you just have to make some minor changes if you're new to this series or new to this channel you will need the pi q25 package found within your site packages folder if you don't have this package you can open up a terminal to download it you can use pip which is Python's package manager install Pi qt5 but I already do have it installed once that's out of the way you will need the following Imports import CIS CIS means system it handles system variables for your python interpreter we will need the following widgets from PI qt5 access the module of QT widgets widgets are the building blocks of a pi qt5 application we will import the following widgets Q application Q widget Q label Q push button QV box layout and qh box layout let me put these on a new line just so we can read everything from the package of Pi qt5 access QT core we will import Q timer our timer will emit a signal after a given interval which is what we need for a stopwatch Q time to keep track of the time and QT for alignment let's do a test run to be sure that there's no errors looks like L and label should be Capital there we go no errors once you have the following Imports we will construct Class A Class of stopwatch which will inherit from The Base Class of Q widget our stopwatch will be a widget we will need a Constructor we'll Define that Dunder init no arguments besid self if we have arguments to pass to the parent of Q widget we will call the super class the parent call The Constructor of the parent no arguments currently now if we are running this file directly we'll use an if statement to verify that if Dunder name is equal to a string of Dunder main if this is true if we are running this file directly then we will construct a stopwatch we will create an app object call The Constructor within the Q application class pass in the following access sis our system access AR RGV which means arguments this is if we're using command line arguments which we won't be using but it's nice to Future proof our code just in case we do in the future we will create a stopwatch object stopwatch equals call The Constructor within our class of stopwatch our window is not going to show unless we call the show method take our stopwatch call the show method now our window is only going to show for a brief second we need to ensure a clean exit we can access CIS call the exit method pass in the following app then call the excore method this method starts the main event Loop and handles events so then we should have a basic window which stays in place until we close it we now have the main skeletal structure of a pi qt5 application set up if you're one of the people that have jumped ahead up until this point we have a class of stopwatch which inherits from the Q widget class we've constructed a stopwatch object and we're showing it so now we can begin designing our stopwatch we will create a Time object self. time equals call The Constructor within the class of Q time for arguments we'll pass in the hours minutes seconds and milliseconds all zero we need a label for the stopwatch self. time label equals called The Constructor of Q label what would we like the text to say I'll display some placeholder text a bunch of zeros zero hours minutes seconds and milliseconds we will add this label to self our stopwatch we need a start button self. start button equals call The Constructor within Q push button what would we like the text of the button to say let's say start we are adding this button to self our stopwatch we need a stop button let's replace start with stop change the text from start to stop and reset the name of this button will be the reset button the text will be reset we will need a timer to emit a signal at a given Interval self. Timer equals call The Constructor within the class qtimer then pass in self we're going to call a method of initialize UI self. init UI but we still have to Define this method all right within our stopwatch class we need the following methods a method of init UI this is where we'll be designing the user interface I'll write pass for now as a placeholder we need a method to start to start the stopwatch that is a method to stop the stopwatch a method to reset the stopwatch we'll create a method to to format our time format time besides self there's one parameter we have to pass in a time to format we will be returning a string a string representation of the current time and a method to update our display update display here are the six methods we'll need within our initialized user interface method we will set the title of the window because right now it says python we will take self our stopwatch call the set window title method and we will pass in stopwatch that should change the title of the window to stopwatch we're going to use a vertical layout manager for the label and the buttons we will create a layout manager named vbox vbox equals equs call The Constructor of q v box layout we will take our layout manager and add the following widgets self. time Lael then our start stop and reset buttons start button stop button and and reset button we will take self set the layout pass in our vertical layout manager so we have all of our buttons we have our widgets arranged in a column we're going to take our time label and also Center it horizontally we will take our time label self. time label call the set alignment method access our class of QT access the flag of align Center that's going to centeralign the time it should be aligned both vertically and horizontally now with your buttons they're arranged in a column we could group them together horizontally here's how we will create a horizontal layout manager of hbox hbox equals call The Constructor of qbox layout instead of adding these buttons directly to our vertical layout manager let's cut them paste them underneath hbox replace vbox with hbox then with our vertical layout manager vbox we will add our layout of hbox this group of buttons is arranged vertically with the time label now we'll be applying a style sheet access self our stopwatch call the set style sheet method we can pass in one extremely long string with a set of triple quotes all of the CSS like properties We'll add will do so between the set of triple quotes let's select our buttons Q push button we are selecting an entire class within a set of curly braces let's add the property of font size the font size of all buttons will be 50 pixels let's customize our label select the class of Q label within a set of curly braces let's add the following properties ities font size will be 120 if you would like we can add a background color too to the label we can select a background color temporarily I will select blue but we can pick more specific shades of blue or another color here's how you can look up a Color Picker and select a very specific color you can use hex values RG b or hsl I've already selected a color I'm going to copy these hsl values so instead of a color name we will select hsl then paste those values if you have a degree symbol you will need to remove that and now we have a very specific shade of blue I will also round the corners of our label add the property of Border radius I will set that to be 20 pixels this will round the corners between each button and label we'll add some padding we're going to use multiple selectors we will select all push buttons and all labels apply the following properties to each I will add padding of 20 pixels around these widgets and I will also make the font weight bold font weight will be bold all right I think that looks pretty good hey this is bro from the future I am currently editing this video if you would like you can add a font family one font that I think looks really good is calibri we'll apply that to all push buttons and Q labels I really like this font I think it fits a stopwatch but it's up to you if you would like to change the font I just thought I would mention that now we just have to add some functionality because these buttons don't do anything for each of our buttons we have to connect a signal to a slot we will take our start button self. start button with the signal of clicked we will connect the following slot we will call the start method self. start method let's do this with the stop button change start to stop clicked connect self. stop method reset self. reset button called the reset method at a given interval we're going to update our display self. timer during a signal of timeout we will connect the following method self. update display self. update display within our start method we will take our timer self. timer call the start method pass in 10 for 10 milliseconds we will set an interval for a timeout every 10 milliseconds within our stop method we will take our timer and instead called the stop method we'll get back to reset in just a moment let's work on the format time method from our time that we pass in we have to get the hours minutes seconds and milliseconds we will create some local variables hours equals access our time that we pass in call the hour method to return hours we have variable minutes time do call the minute method to return the minutes we have a variable of seconds seconds equals take our time called the second method then for milliseconds access our time call the MC which means milliseconds and call it this is a method I'm going to return a string an F string to represent the time we will add four placeholders hours minutes seconds and milliseconds each will be separated with the colon except for milliseconds which will be a DOT a period we will display the hours I'll add some leading zeros two leading zeros let's do this for minutes we're using a format specifier for two leading zeros as well seconds and milliseconds now we will work on the update display method we have to get the time self. time equals we will take our time but call the add milliseconds method Ms e CS then pass in 10 for 10 milliseconds we're going to take our time label self. time label and set the text of it we will call our format time method but we have to pass in a time we will be passing in self. time let's see what we have currently we can start the stopwatch and we can stop it however we're displaying three digits for the milliseconds we can eliminate that within format time when we get the milliseconds we will use integer division we will divide by 10 this will convert our milliseconds from three digits to two we're basically dividing by 10 so here's our stopwatch currently we can start we can stop we can start again and we can stop again now we just need to reset here's how within the reset method we will take our timer self. timer use the stop method to stop we will reassign our time call The Constructor of Q time we have to pass in hours minutes seconds and milliseconds they're all going to be zero we're resetting our time and then we'll reset the text again of our time label self. time Lael call the set text method when we set the text we will first format it with the format time method but we have to pass in a time we will pass in self. time and now we should be able to reset our stopwatch we can start we can stop we can reset start again and stop again all right everybody so that is a cool stopwatch that you can make using python
