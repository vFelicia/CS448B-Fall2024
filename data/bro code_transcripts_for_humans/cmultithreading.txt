With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to explain
00:05 - multi-threading in c-sharp
00:07 - so sit back relax and well enjoy the
00:10 - show
00:12 - if you find this video helpful please
00:14 - remember to like comment
00:16 - and subscribe your support will help
00:18 - keep this channel running
00:20 - all right all right all right threads a
00:22 - thread is an execution path of a program
00:25 - we can use multiple threads to perform
00:28 - different tasks of our program
00:30 - at the same time so when we begin a
00:32 - program we have
00:33 - one thread that is running and that is
00:35 - named the main thread
00:36 - to work with threading include at the
00:38 - top using system
00:40 - dot threading so let's get the current
00:43 - main thread that is running and i'll
00:44 - assign this to a local variable of the
00:46 - thread data type
00:48 - let's say thread main thread
00:51 - equals thread dot current
00:55 - thread so this will assign the current
00:58 - thread that is running
00:59 - to a local variable named main thread or
01:01 - whatever you want to name it
01:03 - so i'm going to change the name property
01:05 - of main thread to equal
01:07 - let's say main thread and then i'll
01:11 - display this with a right line statement
01:13 - main thread dot name
01:17 - and the name of this thread is main
01:18 - thread here's our job let's say that we
01:21 - need
01:21 - two timers to run one is counting up
01:23 - from zero to ten
01:25 - and the other is counting from ten to
01:27 - zero one is counting up the other is
01:28 - counting down
01:29 - but we need both of these timers to run
01:32 - concurrently
01:33 - so if we were to write these both on the
01:35 - same thread this is what this would look
01:37 - like
01:37 - and then later on we'll have these
01:39 - timers run on different threads
01:40 - so let's create a countdown and count up
01:43 - method
01:45 - public static void count
01:49 - down and then i'll need a for loop
01:53 - to iterate 10 times 4
01:56 - and i equals 10
01:59 - then i will continue this as long as i
02:02 - is greater than or equal
02:03 - to 0 and then decrement i by one during
02:08 - each iteration
02:09 - and during each iteration let's say that
02:11 - timer number one
02:13 - colon space plus i plus seconds
02:18 - now we can actually have our current
02:20 - thread that is running sleep
02:22 - for a given amount of milliseconds by
02:24 - typing thread dot sleep
02:26 - then pass in how many milliseconds you
02:28 - would like your thread to sleep
02:29 - so 1000 milliseconds for one second and
02:33 - then when we escape our for loop let's
02:35 - display that
02:36 - timer number one is complete
02:39 - and we'll also need a count up method so
02:42 - let's copy
02:43 - countdown paste it change down to
02:46 - up i is equal to zero we will continue
02:50 - this as long as i
02:52 - is less than or equal to ten
02:55 - increment i by one during each iteration
02:58 - timer number two
02:59 - timer number two is complete so let's
03:02 - invoke both
03:03 - countdown and count up
03:08 - so remember that these are both running
03:09 - on the same thread
03:11 - our main thread and when we complete our
03:13 - main thread let's display
03:15 - that main thread dot name
03:18 - plus is complete
03:22 - and i'm just going to hide this line
03:24 - here
03:25 - okay let's go so we have timer number
03:29 - one that's running currently
03:30 - timer number two has not started yet
03:33 - because these are both running on the
03:34 - same thread
03:39 - so timer number one is complete and now
03:41 - we're working on timer number two
03:50 - and now timer number two is complete our
03:52 - main thread is complete
03:53 - so if i would like both of these methods
03:56 - to execute at the same time i would need
03:58 - to create some additional threads
04:00 - and here's how to do so thread let's
04:03 - name this thread 1
04:05 - equals new thread and within the
04:07 - constructor of our thread let's pass in
04:10 - the method we would like to execute
04:12 - thread 1 is in charge of counting down
04:15 - and thread two is in charge of counting
04:17 - up
04:21 - so each of these threads has a built-in
04:24 - start method which we need to invoke to
04:26 - begin each of these threads
04:27 - thread1.start and thread2.start
04:33 - and we can get rid of these we now have
04:36 - one thread in charge of counting down
04:38 - and the other thread is in charge of
04:40 - counting up
04:41 - and our main thread is still running in
04:42 - the background
04:45 - so our main thread is complete and we
04:47 - have one timer that's counting down and
04:49 - the other that is counting up
04:51 - and as you can see these are both
04:52 - running at the same time concurrently
04:58 - so if you have a method that has
05:00 - parameters there's one additional step
05:02 - let's say that we have i don't know a
05:03 - string name or something
05:06 - we don't necessarily need to use these
05:08 - okay so we can't use these as they are
05:10 - currently
05:11 - so what we're going to do is within the
05:13 - constructor of our threads
05:15 - is pass in what is known as a lambda
05:17 - expression
05:18 - so parentheses arrow then the name of
05:21 - our method
05:22 - countdown parentheses than any
05:26 - arguments if there are any let's say i
05:28 - don't know timer
05:29 - number one i probably won't use this at
05:32 - all but this is just for an example
05:34 - okay let's do the same thing with thread
05:35 - two so we have a lambda expression
05:38 - parenthesis arrow and this is in charge
05:41 - of counting
05:42 - up and passing i don't know timer number
05:45 - two i guess
05:46 - i might have to make a separate video on
05:48 - lambda expressions
05:49 - okay let's try this again so this should
05:52 - work
05:55 - all right there we go so yeah those are
05:58 - threads a thread
06:00 - is an execution path of a program we can
06:02 - use multiple threads to perform
06:04 - different tasks of our program at the
06:06 - same time when we begin a program we
06:08 - have
06:09 - one thread that is running and that is
06:10 - referred to as the main thread
06:13 - so yeah that's multi-threading in c
06:15 - sharp if you would like a copy of this
06:16 - code i will post this to the comment
06:18 - section down below and well
06:20 - yeah that's multithreading in c sharp
06:24 - hey you yeah i'm talking to you if you
06:26 - learned something new
06:27 - then help me help you in three easy
06:29 - steps
06:30 - by smashing that like button drop a
06:32 - comment down below
06:33 - and subscribe if you'd like to become a
06:35 - fellow bro
06:48 - [Music]
06:58 - you

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain multithreading in csharp so sit back relax and well enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running all right all right all right threads a thread is an execution path of a program we can use multiple threads to perform different tasks of our program at the same time so when we begin a program we have one thread that is running and that is named the main thread to work with threading include at the top using system dot threading so let's get the current main thread that is running and i'll assign this to a local variable of the thread data type let's say thread main thread equals thread dot current thread so this will assign the current thread that is running to a local variable named main thread or whatever you want to name it so i'm going to change the name property of main thread to equal let's say main thread and then i'll display this with a right line statement main thread dot name and the name of this thread is main thread here's our job let's say that we need two timers to run one is counting up from zero to ten and the other is counting from ten to zero one is counting up the other is counting down but we need both of these timers to run concurrently so if we were to write these both on the same thread this is what this would look like and then later on we'll have these timers run on different threads so let's create a countdown and count up method public static void count down and then i'll need a for loop to iterate 10 times 4 and i equals 10 then i will continue this as long as i is greater than or equal to 0 and then decrement i by one during each iteration and during each iteration let's say that timer number one colon space plus i plus seconds now we can actually have our current thread that is running sleep for a given amount of milliseconds by typing thread dot sleep then pass in how many milliseconds you would like your thread to sleep so 1000 milliseconds for one second and then when we escape our for loop let's display that timer number one is complete and we'll also need a count up method so let's copy countdown paste it change down to up i is equal to zero we will continue this as long as i is less than or equal to ten increment i by one during each iteration timer number two timer number two is complete so let's invoke both countdown and count up so remember that these are both running on the same thread our main thread and when we complete our main thread let's display that main thread dot name plus is complete and i'm just going to hide this line here okay let's go so we have timer number one that's running currently timer number two has not started yet because these are both running on the same thread so timer number one is complete and now we're working on timer number two and now timer number two is complete our main thread is complete so if i would like both of these methods to execute at the same time i would need to create some additional threads and here's how to do so thread let's name this thread 1 equals new thread and within the constructor of our thread let's pass in the method we would like to execute thread 1 is in charge of counting down and thread two is in charge of counting up so each of these threads has a builtin start method which we need to invoke to begin each of these threads thread1.start and thread2.start and we can get rid of these we now have one thread in charge of counting down and the other thread is in charge of counting up and our main thread is still running in the background so our main thread is complete and we have one timer that's counting down and the other that is counting up and as you can see these are both running at the same time concurrently so if you have a method that has parameters there's one additional step let's say that we have i don't know a string name or something we don't necessarily need to use these okay so we can't use these as they are currently so what we're going to do is within the constructor of our threads is pass in what is known as a lambda expression so parentheses arrow then the name of our method countdown parentheses than any arguments if there are any let's say i don't know timer number one i probably won't use this at all but this is just for an example okay let's do the same thing with thread two so we have a lambda expression parenthesis arrow and this is in charge of counting up and passing i don't know timer number two i guess i might have to make a separate video on lambda expressions okay let's try this again so this should work all right there we go so yeah those are threads a thread is an execution path of a program we can use multiple threads to perform different tasks of our program at the same time when we begin a program we have one thread that is running and that is referred to as the main thread so yeah that's multithreading in c sharp if you would like a copy of this code i will post this to the comment section down below and well yeah that's multithreading in c sharp hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
