With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to teach you
00:04 - guys all about the index operator in
00:06 - python so
00:07 - sit back relax and enjoy the show
00:12 - if you find this video helpful please
00:14 - remember to like comment
00:16 - and subscribe your support will help
00:18 - keep this channel running
00:20 - all right people let's begin i'm going
00:21 - to be explaining the index operator
00:23 - which is represented by
00:25 - a set of square brackets now they give
00:28 - access
00:28 - to a sequences elements they include but
00:31 - are not limited to
00:33 - strings lists and tuples for this
00:35 - example we're going to be working with
00:37 - strings because strings are easy to work
00:39 - with
00:39 - let's say we have a name and name equals
00:42 - whatever your first
00:43 - and last name is we can use the index
00:46 - operator to access
00:47 - an element of the sequence our string
00:50 - so let's check to see if the first
00:52 - letter in our name
00:54 - is lowercase and i should probably
00:56 - change that to lowercase for this
00:58 - example
00:58 - so within an if statement if name and we
01:02 - can add a set
01:03 - of square brackets after our sequence
01:06 - which is a string and we can check
01:09 - a given element of our sequence let's
01:12 - check to see
01:13 - if the first letter is lowercase
01:16 - now with computers they always start at
01:18 - zero if you need to access the first
01:20 - element
01:20 - in a sequence that would be index zero
01:23 - and then the next sequence well the next
01:25 - element in the sequence would be one
01:27 - then two then you followed that pattern
01:30 - so i would like to check to see if
01:31 - name at index zero that would be the
01:34 - first character
01:35 - is lowercase so there is a method to
01:38 - check that
01:39 - dot is lower this will return
01:42 - true or false if the first letter is
01:45 - lowercase
01:46 - then our if statement is going to be
01:48 - resolved to true
01:50 - and what i could do is that i can
01:53 - perhaps change it
01:54 - to uppercase then so let's reassign name
01:58 - to equal name dot and there is a
02:02 - capitalize function here and then let's
02:05 - print our name
02:07 - print name so
02:10 - when we run this the first letter in my
02:13 - name is now
02:14 - capitalized so if you need to access an
02:17 - element within a sequence a string or
02:20 - list or a tuple you would add a set
02:23 - of square brackets afterwards and then
02:25 - you list an integer
02:26 - of the element that you're trying to
02:28 - access so here's a few other examples
02:30 - i'm going to turn
02:31 - this as well as this into a comment
02:34 - and let's say we would like to create
02:36 - some substrings and we can do so
02:38 - using our index operator so i would like
02:41 - to
02:41 - create a substring from the first part
02:44 - of my name
02:45 - so what i'll do is create a new variable
02:47 - first
02:48 - name equals name index operator
02:52 - so you can specify a range for an index
02:56 - operator
02:56 - so you would set the starting position
02:59 - on the left-hand side followed by a
03:01 - colon and then your ending position
03:03 - so i would like the substring to begin
03:05 - at index zero and
03:06 - end at three so that would be zero colon
03:10 - then three all right and then i would
03:12 - like to make this all
03:13 - uppercase for some reason and then let's
03:16 - print my first name
03:20 - so with the index operator we specified
03:23 - a range
03:23 - we would like to access elements 0
03:26 - through
03:26 - 3. turn them up your case and assign
03:29 - them to a new
03:30 - variable of first name here's a shortcut
03:32 - that you might find useful if the index
03:35 - for your range begins with zero you can
03:37 - actually delete that you don't even
03:38 - necessarily need that zero
03:40 - now we just have colon three and this
03:42 - would work the same as it did before
03:44 - so that's a useful shortcut and we're
03:46 - going to bring it up later if we need to
03:48 - access the last element in a sequence
03:51 - this time let's create
03:52 - a substring of last name so last
03:56 - name equals name index operator
04:00 - this time i would like to access the
04:03 - element at index let's see 0
04:06 - 1 2 3 4. all right
04:10 - so i'm going to say for colon and
04:13 - we're not really sure where our name our
04:15 - last name is going to end
04:17 - so what you could do is just say colon
04:19 - and then leave
04:20 - the next index blank so that will be
04:23 - the index beginning at four and
04:25 - everything afterwards
04:27 - and let's say two lower to make this all
04:30 - lower case for some reason
04:31 - so let's print our last name print
04:36 - last name so this should
04:39 - take everything starting at index 4
04:43 - and after that and turn it into its own
04:46 - substring of last name
04:48 - now you can access the last element in a
04:50 - sequence by using what's called
04:52 - negative indexing so let's add
04:56 - a exclamation point to the end of our
04:58 - name so let's say
05:00 - we have a new variable called last
05:04 - character and i would like to store
05:08 - the last character in my name to this
05:10 - new
05:11 - variable this new substring so to access
05:14 - the last
05:14 - element in a sequence within the index
05:18 - operator we can use
05:19 - negative indexing so the last element
05:22 - would be
05:23 - negative one all right and then let's
05:26 - print
05:26 - whatever our last character is so this
05:29 - should print an exclamation point
05:32 - yep which did so then if this was
05:35 - negative two
05:36 - that would be the second to last element
05:38 - in a sequence
05:39 - so now that would be e because e is in
05:42 - the second to last
05:43 - element in my sequence all right
05:46 - everybody so that's the basics of the
05:48 - index operator
05:49 - you can add a set of square brackets
05:52 - after a string
05:53 - a list or a tuple and then list an
05:55 - integer or a range
05:57 - of the elements that you're trying to
05:58 - access so if you would like a copy of
06:00 - all this code i will post everything in
06:02 - the comments down below
06:03 - don't be afraid to help me out and smash
06:05 - that like button drop a comment down
06:07 - below
06:08 - and subscribe if you'd like to become a
06:09 - fellow bro

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to teach you guys all about the index operator in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running all right people let's begin i'm going to be explaining the index operator which is represented by a set of square brackets now they give access to a sequences elements they include but are not limited to strings lists and tuples for this example we're going to be working with strings because strings are easy to work with let's say we have a name and name equals whatever your first and last name is we can use the index operator to access an element of the sequence our string so let's check to see if the first letter in our name is lowercase and i should probably change that to lowercase for this example so within an if statement if name and we can add a set of square brackets after our sequence which is a string and we can check a given element of our sequence let's check to see if the first letter is lowercase now with computers they always start at zero if you need to access the first element in a sequence that would be index zero and then the next sequence well the next element in the sequence would be one then two then you followed that pattern so i would like to check to see if name at index zero that would be the first character is lowercase so there is a method to check that dot is lower this will return true or false if the first letter is lowercase then our if statement is going to be resolved to true and what i could do is that i can perhaps change it to uppercase then so let's reassign name to equal name dot and there is a capitalize function here and then let's print our name print name so when we run this the first letter in my name is now capitalized so if you need to access an element within a sequence a string or list or a tuple you would add a set of square brackets afterwards and then you list an integer of the element that you're trying to access so here's a few other examples i'm going to turn this as well as this into a comment and let's say we would like to create some substrings and we can do so using our index operator so i would like to create a substring from the first part of my name so what i'll do is create a new variable first name equals name index operator so you can specify a range for an index operator so you would set the starting position on the lefthand side followed by a colon and then your ending position so i would like the substring to begin at index zero and end at three so that would be zero colon then three all right and then i would like to make this all uppercase for some reason and then let's print my first name so with the index operator we specified a range we would like to access elements 0 through 3. turn them up your case and assign them to a new variable of first name here's a shortcut that you might find useful if the index for your range begins with zero you can actually delete that you don't even necessarily need that zero now we just have colon three and this would work the same as it did before so that's a useful shortcut and we're going to bring it up later if we need to access the last element in a sequence this time let's create a substring of last name so last name equals name index operator this time i would like to access the element at index let's see 0 1 2 3 4. all right so i'm going to say for colon and we're not really sure where our name our last name is going to end so what you could do is just say colon and then leave the next index blank so that will be the index beginning at four and everything afterwards and let's say two lower to make this all lower case for some reason so let's print our last name print last name so this should take everything starting at index 4 and after that and turn it into its own substring of last name now you can access the last element in a sequence by using what's called negative indexing so let's add a exclamation point to the end of our name so let's say we have a new variable called last character and i would like to store the last character in my name to this new variable this new substring so to access the last element in a sequence within the index operator we can use negative indexing so the last element would be negative one all right and then let's print whatever our last character is so this should print an exclamation point yep which did so then if this was negative two that would be the second to last element in a sequence so now that would be e because e is in the second to last element in my sequence all right everybody so that's the basics of the index operator you can add a set of square brackets after a string a list or a tuple and then list an integer or a range of the elements that you're trying to access so if you would like a copy of all this code i will post everything in the comments down below don't be afraid to help me out and smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro
