With timestamps:

00:00 - hey how's it going everybody in this
00:01 - series I'm going to show you everything
00:03 - you need to know to get started working
00:05 - with HTML then a little bit later on
00:07 - we'll cover CSS so why don't you go
00:09 - ahead and sit back relax and enjoy the
00:12 - show
00:14 - hey if you enjoy my videos please be
00:16 - sure to subscribe because subscribing is
00:18 - free just like how this video is free
00:21 - help me out yes I'm guilt tripping you
00:23 - that is all why should you learn HTML in
00:26 - today's age people spend way too much
00:28 - time on the internet myself included
00:30 - unfortunately knowing how to create or
00:33 - otherwise manage a website isn't a bad
00:36 - thing to know heck add it to your resume
00:38 - it really can't hurt even if you're not
00:40 - interested in web development as a
00:42 - career almost every business has some
00:45 - sort of online presence knowing how to
00:47 - manage that online presence could
00:49 - convince a potential employer to hire
00:52 - you over somebody else so why not HTML
00:55 - is an acronym for hypertext markup
00:57 - language the general idea is that
00:59 - certain types of tags also known as
01:01 - markup is used to convey to a web
01:04 - browser how some content should be
01:06 - displayed usually tags are in pairs with
01:09 - some content sandwiched between them
01:11 - header tags are typically used for
01:14 - titles
01:14 - P tags are used for paragraphs of text a
01:18 - tags are used for hyperlinks HTML adds
01:20 - structure to a web page if we were
01:22 - building a house you could say that HTML
01:25 - is the foundation the skeletal structure
01:28 - to support all content on a website then
01:31 - their CSS CSS means cascading style
01:34 - sheets it's a language that adds style
01:36 - to a web page in our house analogy CSS
01:39 - would be equivalent to the decorations
01:42 - design and colors of the Interior to
01:45 - begin working with HTML and CSS you'll
01:48 - need a modern web browser you can use
01:50 - Google Chrome Firefox Microsoft Edge
01:53 - Safari those are all fine you'll also
01:55 - need a text editor as well such as vs
01:58 - code it's free software that functions
02:00 - as a workbench for us to write code in
02:03 - this next part I'll show you how we can
02:05 - download and install vs code
02:07 - to download vs code head to this website
02:09 - code.visualstudio.com
02:12 - look for whatever operating system
02:14 - you're using and download that version
02:16 - I'm running Windows I will download the
02:18 - windows version
02:20 - then I will open it when it's done
02:22 - accept the agreement
02:24 - yes I did read it that fast
02:27 - next
02:29 - I'll create a desktop icon next install
02:34 - launch Visual Studio code and finish
02:38 - we need a folder to hold all of the
02:40 - documents related to our website go to
02:42 - Open folder I'll place this folder on my
02:45 - desktop
02:46 - new folder I'll name this folder website
02:51 - select folder
02:53 - there we go we are now within our
02:55 - website folder I'm going to create a new
02:58 - file
02:59 - I will name this file index.html
03:03 - whatever your home page is going to be I
03:05 - would recommend naming it
03:07 - index.html most servers return the index
03:10 - file as the home page so it would be
03:13 - good practice for us to name the home
03:14 - page index
03:16 - now what we're going to do is install
03:17 - the live server extension
03:20 - go to extensions look up live server
03:24 - and install
03:26 - basically what this does is that when
03:28 - you update your HTML file if you have a
03:30 - web browser open it's going to update
03:32 - automatically it'll save you some time
03:35 - all right everybody now what we're gonna
03:36 - do is fill in our HTML file at the top
03:39 - what we'll do is add a set of angle
03:41 - brackets then type this exclamation
03:43 - point doc type HTML this is a
03:48 - declaration that this document is an
03:51 - HTML5 document which is the most recent
03:53 - version then we'll create a pair of HTML
03:56 - tags we'll need an opening HTML tag
04:00 - and an ending HTML tag you can tell that
04:03 - this is an ending tag because it has a
04:05 - forward slash most tags are in groups of
04:07 - pairs that's if there's typically
04:09 - content between them this pair of HTML
04:12 - tags represents the root element of an
04:15 - HTML page between these two tags we will
04:18 - add a pair of head tags
04:25 - the head element contains information
04:26 - about your web page such as a title
04:29 - let's add a title to our web page title
04:34 - add a closing tag let's set the title of
04:37 - our web page to be
04:38 - my first website
04:41 - now what we'll do right click on your
04:43 - HTML file then open with live server
04:48 - here's our webpage the title says my
04:51 - first website just to make this easier
04:53 - on us I'm going to place our web page
04:55 - side by side with vs code
05:03 - when we save any changes we can see that
05:05 - update automatically the head element
05:07 - contains information about your web page
05:10 - whereas in the body let's add a pair of
05:13 - body tags after the pair of head tags
05:18 - the body element contains visible
05:20 - content in your web page
05:22 - between our body tags let's add a pair
05:25 - of H1 header tags
05:30 - H1 defines a large heading I'll add some
05:33 - text
05:35 - this is
05:36 - an H1 heading I'm going to save that
05:41 - should update my HTML document
05:42 - automatically this is an H1 heading
05:45 - let's try H2
05:48 - add a pair of H2 header tags
05:51 - this is an H2 heading
05:55 - let's do H3
05:58 - H3
05:59 - this is an H3 heading
06:02 - H4
06:07 - this is an H4 heading then we have H5
06:12 - this is an H5 heading typically header
06:16 - tags are used for titles or other large
06:18 - text
06:19 - let's discuss paragraph tags if you have
06:22 - a paragraph of text you can place that
06:24 - within a pair of P tags
06:28 - thumb text goes here if you need some
06:31 - sample text to work with if you're using
06:33 - vs code you can type lorem then tab this
06:37 - will create some garbage text for you I
06:40 - think it's supposed to resemble Latin
06:42 - if I were to copy everything within the
06:44 - set of paragraph tags
06:45 - then save it paragraphs are separated
06:49 - with a line break
06:50 - otherwise if you do need a line break
06:52 - you can type BR meaning line break so
06:56 - this is a self-closing tag
06:58 - pairs of tags usually have some sort of
07:01 - content between them with the line break
07:03 - that's a self-closing tag we don't need
07:06 - a closing tag
07:07 - so add as many line breaks as you need
07:09 - wherever you need them so that's a line
07:11 - break
07:13 - there's also a horizontal rule which is
07:15 - HR think Human Resources HR that would
07:19 - add a horizontal line across your page
07:21 - that might look pretty good after a
07:23 - title
07:24 - paragraph tags don't care about any
07:26 - spaces or new lines
07:28 - I'm going to put all of this on separate
07:30 - lines just so it's more legible
07:35 - so when I save nothing appears to happen
07:38 - even if I were to add some line breaks
07:40 - between these sentences
07:42 - nothing appears to change you could
07:44 - always change your paragraph tags to pre
07:48 - meaning pre-formatted as in
07:50 - pre-formatted text
07:52 - that would retain any line breaks or
07:54 - spaces Within These tags it's up to you
07:57 - if you prefer the P tags or the pre-tags
08:00 - now the last thing I'm going to discuss
08:02 - are comments comments aren't displayed
08:04 - as output they're usually used as notes
08:07 - for yourself or for other developers you
08:10 - would type a left angle bracket
08:12 - exclamation point two dashes
08:14 - wherever your comment ends you would
08:17 - type two dashes right angle bracket this
08:20 - is a comment so when I save nothing
08:24 - appears to happen comments are used for
08:26 - yourself or for other developers that
08:28 - are looking over this document alright
08:30 - everybody well at this time let's go
08:31 - over an exercise just so that we have a
08:33 - solid foundation and really remember
08:35 - everything it'd be good practice for us
08:38 - we're going to create a separate HTML
08:40 - file that displays the lyrics of a song
08:43 - you like so let's create a new HTML file
08:46 - let's name this file lyrics dot HTML
08:51 - again we'll need to add this declaration
08:55 - doc type HTML that's a declaration that
09:00 - this document is an HTML5 document then
09:03 - we'll need a pair of HTML tags
09:07 - we'll need a head element
09:13 - and a body
09:18 - let's add a title to the head of our
09:20 - document
09:22 - title
09:24 - let's set the title to be my song lyrics
09:28 - then we will open this HTML file with
09:31 - live server
09:33 - my song lyrics pick a song that you like
09:37 - within our body tags let's add an H1
09:40 - element this will be the title copy the
09:43 - name of your song
09:45 - place it within this pair of tags
09:48 - so that's the title add song by the name
09:52 - of the band or artist
09:54 - I'll use H3 header tags
09:57 - that's slightly smaller than H1
10:02 - you know maybe H4 I think that'd be
10:04 - better
10:06 - I'll add a horizontal rule that's HR
10:11 - I'll add a pair of P tags
10:15 - take all of these lyrics copy them
10:19 - and paste them within the pair of P tags
10:23 - I'd like to retain the spacing let's
10:25 - change the P tags to pre tags for
10:29 - pre-formatted text
10:32 - that's much better let's add one line
10:34 - break
10:36 - after our horizontal rule
10:38 - one last thing I'm going to do within
10:40 - the pre-tags I'm going to add some blank
10:42 - lines between some of these verses
10:49 - there we go that's pretty cool I think
10:51 - we have the hang of basic HTML now in
10:54 - the next topic we'll discuss hyperlinks
10:56 - hey if you're enjoying this series so
10:58 - far please be sure to support me by
11:00 - Smashing that like button leave a random
11:02 - comment down below and subscribe if
11:03 - you'd like to become a fellow bro
11:07 - hey everybody in today's topic I'm going
11:09 - to show you how we can create hyperlinks
11:11 - a hyperlink is a digital reference to
11:14 - data that a user can follow by clicking
11:16 - or tapping a button or link to create a
11:18 - hyperlink we will need a pair of a tags
11:21 - a means anchor then we'll sandwich some
11:24 - text between these two tags
11:26 - such as click me
11:29 - we're missing one thing what we'll need
11:31 - within the opening a tag is an attribute
11:34 - and href attribute
11:37 - an attribute is typically a name value
11:40 - pair that modifies the behavior of an
11:42 - element href means hypertext reference
11:45 - we're referencing something within the
11:48 - set of quotes we can list a web page or
11:51 - a file to link to let's begin by linking
11:54 - an external website like Google
11:57 - let's paste the URL within the href
12:00 - attribute save then when I click on this
12:03 - link it takes me to Google or some other
12:06 - website of your choosing based on what's
12:07 - within the set of quotes
12:09 - there are more attributes you can add as
12:11 - well they're optional another is Target
12:14 - Target equals if you set Target to be
12:18 - underscore blank this link will open
12:21 - this URL in either a new tab or a new
12:24 - window depending on your settings Google
12:26 - has opened in a new tab for me
12:28 - another attribute is title
12:31 - the title attribute displays additional
12:33 - information about the element as a tool
12:35 - tip I'll add a message
12:37 - goes to Google when I hover over this
12:41 - link we have a tooltip that states goes
12:44 - to Google that's an additional option
12:46 - too this URL is an absolute URL you can
12:50 - also list a relative URL So based on the
12:52 - last video we have an HTML file of song
12:55 - lyrics within our index file we will
12:57 - link to our lyrics file so let's create
13:00 - another hyperlink we'll need a pair of a
13:02 - tags meaning anchor
13:04 - we'll need some text song lyrics is good
13:09 - then we'll need an href attribute href
13:12 - equals these two files are right next to
13:15 - each other for a relative file path all
13:17 - we need is the file name
13:19 - lyrics dot HTML I'm going to add a line
13:22 - break real quick
13:25 - PR meaning line break
13:27 - then when I click on this link it takes
13:29 - me to my other HTML file
13:31 - you could add these additional
13:33 - attributes if you would like one last
13:35 - link
13:36 - I'll create a line break we'll create a
13:39 - link that begins the process of emailing
13:41 - someone
13:42 - we'll need a pair of a tags
13:45 - the text will be email me
13:49 - href attribute will be set to now to
13:52 - send an email type mail to colon then an
13:55 - email address I'll make up one test at
13:59 - fake.com
14:02 - when I click on this link we begin the
14:04 - process of sending an email to this
14:07 - email address however I'm not signed in
14:09 - so this is as far as it'll take me
14:11 - currently
14:12 - okay now for an exercise let's go to our
14:15 - lyrics HTML file
14:17 - open with live server let me zoom out
14:21 - based on the last project you should
14:23 - have a web page with some song lyrics
14:25 - that you like we'll create a hyperlink
14:27 - to the original video let's do that
14:29 - after the artist that would be right
14:32 - here but before the horizontal rule
14:33 - we'll create a pair of a tags
14:39 - I'll add some text or original video
14:43 - then you'll need to find the url for the
14:46 - original video for your song
14:49 - all right
14:50 - I will set the href attribute to B
14:54 - that URL the URL for a YouTube video
14:57 - so when I click on the link
15:00 - it now takes me to YouTube
15:03 - all right everybody that's a hyperlink
15:05 - it's a digital reference to data that a
15:07 - user can follow by clicking or tapping a
15:10 - button or link and those are hyperlinks
15:12 - in HTML
15:15 - hey everybody in today's topic I'm going
15:17 - to show you how we can add images to a
15:19 - web page using HTML so sit back relax
15:22 - and enjoy the show
15:25 - all right everybody here's how to add an
15:27 - image to a web page but you'll need an
15:29 - image to work with I have a picture of a
15:31 - dog I'll add that to my website folder
15:34 - next to my index file I have a picture
15:37 - of a dog
15:38 - to add an image we'll use a self-closing
15:41 - image tag
15:42 - then set the source equal to B the name
15:45 - of your image including the extension
15:48 - mine is dog and this is a PNG file
15:54 - so this picture is fairly large you can
15:57 - change the dimensions with the height or
15:59 - width attributes I'll set the height to
16:02 - be 200 200 pixels now the width will
16:06 - adjust automatically however you could
16:08 - change that too if you wanted if I need
16:10 - this image to be a perfect square I will
16:12 - also set the width to be 200 however
16:15 - this does compress the image depending
16:17 - on the dimensions of your original
16:19 - picture you may need to change the
16:21 - height and or width I'll set the height
16:23 - to be 200 though
16:25 - then keep the width the same it'll
16:27 - adjust automatically
16:28 - now for some reason if your image isn't
16:31 - displaying let's say that I get the file
16:33 - extension wrong I'll say that this is a
16:35 - JPEG while the image won't display you
16:39 - can add alternative text with the alt
16:42 - attribute the alternative text you could
16:44 - say anything
16:46 - this is a picture of a dog
16:52 - this image doesn't display you at least
16:55 - display the alternative text now the
16:57 - nice thing about the alt attribute is
17:00 - that if somebody is visually impaired
17:01 - and they're using a screen reader the
17:04 - screen reader will read this alt
17:06 - description just to test my screen
17:08 - reader I'm going to add some text before
17:10 - and after this image as well
17:12 - let's add an H1 header tag this
17:16 - is a cute dog
17:21 - then I'll add some text after
17:23 - I'll use an H3 header tag
17:27 - woof woof
17:30 - I'll use my screen reader this is an
17:32 - extension on Chrome you can download
17:37 - my first website
17:39 - this is a cute dog this is a picture of
17:41 - a dog woof woof the screen reader read
17:43 - the alternative text for this image so
17:46 - it is good practice if you include an
17:48 - image to write a brief description of
17:50 - the image
17:51 - another cool thing you can do with
17:52 - images is that you can't turn them into
17:54 - hyperlinks I will surround our image
17:57 - element with a pair of a tags
18:00 - a meaning anchor
18:02 - then I will set the href attribute equal
18:05 - to a URL I'll find the Wikipedia page
18:09 - for dogs
18:11 - all right I'll copy this URL
18:14 - then I will set the href attribute to be
18:16 - this URL
18:18 - when I click on this image it takes me
18:21 - to the Wikipedia page for dogs
18:23 - so yeah you can turn an image into a
18:25 - hyperlink another cool thing you can do
18:27 - too is that you can include gifs in your
18:29 - web page
18:30 - this is my gift that I'll include
18:34 - I'll add that to my website folder
18:37 - I'll include a self-closing image tag
18:39 - set the source equal to be the name of
18:43 - my image
18:45 - then be sure to get the file extension
18:47 - right this is a gif
18:50 - I'll set the height attribute to be
18:52 - maybe 200 as well height equals 200.
18:57 - then I'll add some alternative text
19:01 - alt attribute will be
19:04 - smiling dog gif
19:09 - now with a website you may have all of
19:11 - your images within a separate folder
19:13 - like this I'll go to new folder I'll
19:16 - create a folder named images then I will
19:19 - move my images to the images folder
19:23 - so my images are no longer being
19:24 - displayed we have our alternative text
19:27 - this is a picture of a dog and smiling
19:30 - dog gif
19:31 - with your Source attribute we're using a
19:34 - relative file path
19:36 - we need to navigate to the images folder
19:38 - then find the appropriate image files
19:41 - I'm going to precede these images with
19:43 - the name of the folder they are found
19:45 - within the images folder
19:52 - you may also need another forward slash
19:54 - for me either work let's move on to an
19:57 - exercise in the last few videos we were
20:00 - working on a web page for song lyrics
20:02 - Let's include some album art
20:05 - for my song that I picked I have a
20:08 - picture of the original album art that
20:10 - this song is found from
20:12 - I will move that to my website folder
20:14 - then I will move it to the images folder
20:17 - within my website folder
20:19 - I need a self-closing image tag set the
20:22 - source equal to B we need to navigate to
20:25 - the images folder I will list that first
20:27 - Images slash the name of the file
20:33 - for me it's album
20:35 - cover
20:36 - dot jpeg
20:38 - then I'll change the dimensions I will
20:41 - set the height equal to B 200.
20:45 - I'll add some alternative text
20:48 - alt equals
20:50 - album
20:52 - art cover
20:55 - then a line break
20:57 - maybe two
21:00 - then I'll turn this into a hyperlink as
21:02 - well I will surround our image with a
21:04 - pair of a tags
21:08 - I will set the href attribute to be the
21:11 - original YouTube video where you can
21:12 - find this song
21:13 - so href equals the YouTube video that I
21:17 - linked before
21:18 - so this should take me to YouTube
21:23 - there we are
21:25 - all right everybody well that's how to
21:27 - include an image on a web page using
21:29 - HTML
21:33 - hey how's it going everybody in today's
21:35 - video I'm going to show you how we can
21:36 - include audio in a web page using HTML
21:39 - you'll need some audio files to work
21:41 - with one place you can download some MP3
21:43 - files is the YouTube audio library find
21:47 - some songs that you like and then you
21:48 - can download them let's download three
21:51 - for this lesson
21:52 - once you have your three songs let's
21:55 - move them to our website folder
21:57 - alright we are ready to begin so to
22:00 - include some audio we need a pair of
22:02 - audio tags
22:05 - then between the audio tags let's
22:07 - include a source element
22:10 - with the source element there is a
22:12 - source attribute we will set the source
22:15 - attribute to equal the name of an MP3
22:18 - file or other audio file
22:21 - so let me copy the name
22:24 - be sure to get the file extension
22:27 - and then I will paste that file the file
22:30 - name nothing appears to happen because
22:32 - we don't have any controls and the song
22:35 - doesn't play right away too so to add
22:37 - some controls within the opening audio
22:39 - tag type controls and that's it so we
22:43 - can now play our song
22:45 - [Music]
22:49 - or you can mute it fast forward it
22:52 - rewind it set the playback speed
22:55 - whatever you can set your audio file to
22:58 - auto play but people find that annoying
23:00 - [Music]
23:04 - so you should probably not do that if we
23:07 - do want our song to autoplay we should
23:08 - at least mute it using the muted
23:10 - attribute
23:11 - so our song is playing but it's muted
23:14 - until we unmute it
23:15 - [Music]
23:16 - yeah
23:18 - [Music]
23:19 - we can even have our song Loop by using
23:21 - the loop attribute
23:24 - so let me play this turn up the volume a
23:27 - little bit fast forward to near the end
23:30 - and let's see if it loops
23:33 - and it does cool
23:36 - now in case your web browser doesn't
23:38 - support a certain audio type you can add
23:40 - fallbacks so let's say that we also have
23:43 - a wave version of our audio file I can
23:47 - include that as a fallback right
23:48 - underneath
23:49 - but we should also specify the type just
23:52 - to let the web browser know that this is
23:54 - an MP3 file and that this is a WAV file
23:56 - I'll include the type attribute I will
23:59 - type audio slash MPEG
24:03 - I will also let the web browser know
24:05 - that this is a WAV file
24:07 - audio slash wave so just in case our web
24:10 - browser doesn't support MP3 files I'm
24:12 - pretty sure that they all do nowadays we
24:15 - will resort to our WAV file if we have a
24:17 - backup of the same audio file in wave
24:20 - format let's include our two other audio
24:22 - files
24:23 - so again we need a pair of audio tags
24:29 - within the pair of audio tags we will
24:31 - need a source tag a source element and I
24:34 - will set the source to equal the name of
24:36 - an audio file
24:38 - so let's copy the name of our second
24:40 - audio file
24:41 - including the extension
24:44 - add some controls
24:48 - and there's our second song
24:50 - let me pause the first one
24:53 - [Music]
24:58 - let's add the last one
25:02 - so here's the name of my last song
25:08 - be sure to get the file extension we
25:10 - have our controls
25:12 - and here's my third song
25:15 - I feel like I'm losing my mind
25:19 - hey for fun let's add the name of each
25:22 - of these songs right before the controls
25:25 - I'll use a pair of paragraph tags
25:29 - then I will copy the name of the song
25:31 - and sandwich the name between the
25:33 - paragraph tags
25:35 - so that's the name of my first song
25:37 - let's do this again with the second song
25:44 - and the third
25:52 - so here are my three songs
25:54 - just to make everything a little more
25:56 - organized I'm going to create a music
25:58 - folder within my website folder to hold
26:00 - all of my audio files I will create a
26:03 - new folder I will name this music
26:06 - I'll place all of my audio files within
26:07 - the music folder
26:13 - so we no longer know where the location
26:15 - of those audio files are because we're
26:17 - using a relative file path I'm going to
26:19 - set the source attribute to be music
26:22 - slash the name of the file
26:26 - we can locate those files now
26:29 - so that's our first song
26:31 - our second song
26:33 - and our third song
26:36 - that's how to include audio files in a
26:38 - web page using HTML if you're enjoying
26:41 - the series let me know by Smashing that
26:43 - like button leave a random comment down
26:45 - below and subscribe if you'd like to
26:46 - become a fellow bro
26:49 - hey what's going on everybody today I'm
26:51 - going to show you how we can include a
26:53 - video in your web page using HTML
26:55 - alright let's get started everybody in
26:58 - this example you'll need a video file of
27:00 - one of a few formats you can use either
27:03 - an mp4 file webm or vorbis OGG I just so
27:07 - happen to have an mp4 file of me playing
27:09 - that new Zelda game Zelda tears of the
27:11 - Kingdom this is just some sample footage
27:16 - once you have your video file you're
27:18 - going to take it and place it right next
27:20 - to your index file within your website
27:22 - folder to include a video you'll need a
27:25 - pair of video tags
27:29 - within the opening video tag we can set
27:31 - a source attribute to B either the
27:35 - relative file path or the absolute file
27:37 - path of that video These two files are
27:40 - right next to each other I only need the
27:42 - file name
27:43 - my file is zelda.mp4
27:47 - and there's my video but it's humongous
27:50 - we can change the height and or the
27:52 - width let's change the width to be 500
27:56 - pixels that's a good size
27:58 - the height will adjust accordingly or
28:00 - vice versa if I were to change the
28:03 - height to be 500 then the width is going
28:05 - to adjust accordingly
28:07 - but let's keep it as 500.
28:09 - here's our video but there's no way to
28:11 - play it we'll need to add a set of
28:13 - controls with the controls attribute
28:16 - now we can play the video
28:19 - to have this video autoplay when the
28:22 - page loads
28:23 - you can set the autoplay property
28:27 - it should play automatically
28:29 - but if it is set to auto play you should
28:31 - at least mute it because people can find
28:33 - it annoying especially if this video is
28:35 - loud
28:37 - let's add the muted attribute
28:39 - so now it auto plays and it's muted
28:43 - to have this video Loop when it's done
28:45 - let me fast forward to the end
28:49 - I can add the loop attribute now it
28:52 - should Loop when it reaches the end
28:55 - right about here
28:59 - yeah and it's back to the beginning
29:00 - again
29:01 - just in case somebody's web browser
29:03 - doesn't support this video file you can
29:06 - add backups
29:07 - I also happen to have a webm version of
29:10 - the same video
29:12 - I'll place it within my website folder
29:16 - then within the pair of video tags
29:19 - we will add a source element
29:24 - take our source attribute cut it then
29:28 - paste it within the source element
29:31 - you can keep all the attributes within
29:33 - the opening video tag you should also
29:36 - tell the web browser what type of video
29:38 - file this is
29:40 - video slash MP4
29:45 - now to include a backup we just need to
29:47 - use the source element again
29:50 - as a backup in case a web browser can't
29:52 - play my mp4 file we'll instead use the
29:55 - webm version
29:58 - zelda.web M the type is web m
30:04 - all right so let me delete the MP4
30:06 - version to test it
30:10 - let's save and reload everything and now
30:12 - my webm version is playing
30:14 - you can't really tell the difference
30:16 - you also have the capability of turning
30:18 - this video into a hyperlink I will
30:21 - surround my video element with a pair of
30:23 - a tags
30:31 - then I will set the href attribute to
30:34 - some URL
30:36 - I'll set it to be the Wikipedia page for
30:39 - Zelda feel free to pick any page of your
30:42 - choosing
30:44 - with the href attribute I will paste
30:46 - that URL
30:49 - now when I click on this video it should
30:52 - bring me to the Legend of Zelda
30:53 - Wikipedia page
30:55 - to open this link I get it link because
30:58 - it's Legend of Zelda anyways to open
31:00 - this link in a new tab I can set the
31:02 - target attribute to be
31:05 - underscore blank
31:08 - then it should open in a new tab
31:10 - which it does all right everybody so
31:13 - that's how to include a video in your
31:15 - web page using HTML
31:20 - hey everybody today I'm going to show
31:21 - you how we can create a fabicon for your
31:24 - web page to create a favicon you'll need
31:26 - an image to work with here's mine I
31:29 - would recommend an image that's at least
31:31 - 96 by 96 pixels in width and height once
31:34 - you have your image we'll save the image
31:36 - to our website folder I'll right click
31:39 - save image as
31:42 - find my website folder
31:45 - let's rename this image favicon
31:49 - for a favicon most modern web browsers
31:52 - accept Ico PNG GIF JPEG and SVG image
31:56 - files so let's save our image
32:00 - my image is now within my website folder
32:03 - if you do need to make any graphical
32:05 - changes to your image you can always use
32:08 - a program like paint this is a built-in
32:10 - program with most Windows operating
32:12 - systems I'm pretty sure Mac and Linux
32:14 - have something like it too
32:15 - if I do need to change the dimensions on
32:18 - my image I can open it
32:20 - let's find that image it's within my
32:22 - website folder
32:24 - and here it is
32:26 - if you do need to change the size of
32:28 - your image you can go to resize
32:31 - you can either resize or skew your image
32:34 - my image is at least 96 pixels it's 176
32:38 - for both the width and the height
32:40 - then you'll want to save your image
32:42 - afterwards to that website folder
32:46 - once you have your image we're going to
32:48 - create a link tag the link is
32:51 - self-closing
32:53 - the link tag specifies the relationship
32:55 - between this document and an external
32:57 - source
32:59 - the relationship attribute will be icon
33:03 - because well we're adding an icon to our
33:06 - web page
33:08 - the type will equal image slash
33:12 - the type of your file so I have a JPEG
33:15 - I'll list jpg
33:18 - then we need an href attribute
33:21 - that will be the relative file location
33:23 - my image is within my website folder I
33:26 - just have to list the file name
33:29 - favicon.jpg
33:33 - let's take a look refresh everything
33:36 - and here is my favicon
33:38 - typically with the web page I like to
33:40 - place all of my images within one folder
33:42 - within my website folder I'll create a
33:45 - new folder named images
33:48 - and I'll place my favicon within my
33:50 - images folder
33:53 - so we no longer can locate that favicon
33:55 - I need to change the relative file path
33:58 - of the favicon because it's now within a
34:00 - separate folder preceding the name of my
34:02 - file I will list the folder that it's in
34:05 - Images slash favicon
34:09 - and there it is again
34:11 - all right everybody that's how to create
34:13 - a fabicon fear web page using HTML
34:19 - hey everybody today I will explain text
34:21 - formatting in html text formatting gifs
34:24 - text special emphasis we can create bold
34:27 - text italic text underline text so on
34:31 - and so forth let's begin let's create a
34:34 - pair of paragraph tags
34:36 - and between this first set of paragraph
34:38 - tags let's type this is normal text
34:44 - let's copy this line of markup and then
34:47 - paste it like 10 times
34:51 - okay I lost count whatever text you
34:53 - would like to add emphasis to you
34:55 - surround that with a pair of tags but
34:57 - there's different pairs of tags that
34:59 - have different effects for a bold effect
35:01 - we use a pair of B tags let's surround
35:04 - normal in the second line with B then
35:07 - change normal to the word bold
35:11 - this is bold text
35:14 - I is for italic
35:16 - so let's surround the next line with I
35:21 - this is
35:23 - italic text
35:26 - then underlined is u
35:33 - this is
35:35 - underlined text
35:38 - deleted text
35:40 - we would type d e l
35:46 - this is deleted text
35:50 - big b-i-g
35:55 - this is big text
35:58 - so this text is a little bit bigger than
36:00 - the other text surrounding it
36:03 - then they're small
36:11 - this is small text
36:14 - subscript
36:17 - type sub
36:20 - this is sub script text I misspelled
36:25 - that there
36:26 - the subscript text is smaller and it's
36:29 - just underneath the other text
36:30 - surrounding it
36:32 - then their superscript
36:35 - type sup like you're saying Sup like
36:38 - what's up
36:40 - this is superscript text
36:45 - then you have mono spaced
36:47 - which is TT
36:52 - this is monospaced text
36:57 - oops I forgot to close it this is a good
36:59 - example of why you should add closing
37:01 - tags because the markup will Cascade
37:03 - through the rest of your document so be
37:05 - sure to close any opening tags
37:08 - all right then the last one is Mark
37:13 - creates a highlight effect
37:16 - kind of like you're taking a highlighter
37:18 - and highlighting some text you can use
37:20 - CSS to change the color too
37:23 - I haven't really discussed CSS yet but
37:25 - to add a little bit of inline CSS within
37:28 - the opening mark tag
37:29 - take the style attribute set that equal
37:33 - to take the background Dash color
37:38 - colon then we can pick a color how about
37:41 - light green I think that would look good
37:43 - and our highlight effect is now light
37:46 - green or pick some other color of your
37:48 - choosing we'll discuss colors more when
37:50 - we reach CSS all right everybody so that
37:53 - is text formatting text formatting gives
37:56 - text special emphasis you can create
37:59 - text that is bold italic underline
38:01 - deleted big small subscript superscript
38:03 - model space and highlighted text and
38:05 - well that is text formatting in HTML
38:10 - hey how's it going everybody today I
38:12 - need to explain the span and div tags in
38:15 - HTML the span tag is an inline container
38:19 - to group elements for styling purposes
38:21 - the div tag it's very similar except
38:24 - it's a block container to group elements
38:27 - for styling purposes here's an example
38:29 - let's create two H1 titles
38:33 - this is a span title
38:39 - then close it
38:40 - let's copy this line of markup then
38:43 - paste it the second line will be this is
38:46 - a div title
38:48 - I'm going to enclose my first sentence
38:50 - with a pair of span tags
38:53 - so we need an opening span tag and a
38:55 - closing span tag somewhere
38:59 - all right with this set of span tags we
39:01 - are enclosing this text within a
39:04 - container it's an inline container we
39:06 - can apply some CSS styling to this
39:08 - sentence whatever is sandwiched between
39:10 - the pair of span tags let's change the
39:13 - background color of the title
39:15 - I will set the style attribute to equal
39:19 - background Dash color
39:22 - then pick a color how about red
39:25 - then a semicolon there so the background
39:28 - of my title is red but you know what
39:30 - that red is a little bright let's do
39:33 - tomato
39:34 - I think that's a better color whatever
39:37 - is enclosed with a pair of span tags we
39:39 - can apply some inline CSS styling too
39:42 - now with div this creates a block level
39:45 - container
39:46 - so I will surround this sentence with a
39:49 - pair of div tags div meaning division
39:55 - let's apply that same styling
39:57 - I'll copy my style attribute
40:00 - paste it let's change the color to B
40:03 - maybe cyan
40:06 - all right here we are
40:08 - this is a title using span this is a
40:11 - title using div span is an inline
40:13 - container div is a block level container
40:16 - it takes the entire width of my document
40:19 - you can see that this is all blue
40:22 - let's create a pair of paragraph tags
40:25 - this is a span sentence
40:30 - then close it
40:33 - let's copy this paragraph paste it again
40:37 - then change the second sentence to div
40:40 - all right let's enclose our first
40:42 - sentence with a pair of span tags
40:45 - all right I will set the style to be red
40:48 - well tomato tomato color technically
40:53 - it's kind of like we're highlighting the
40:54 - text much like the mark tags in the last
40:57 - topic
40:58 - let's copy this tag
41:01 - change span to div
41:05 - then the color how about cyan
41:08 - and then we need to close the div tag
41:16 - there we are
41:19 - all right now let's create two large
41:21 - paragraphs
41:24 - we need a pair of paragraph tags
41:28 - in vs code to generate some sample text
41:30 - you can type lorem then tab
41:33 - so I will copy this line
41:36 - paste it again
41:39 - let's say after the first sentence I
41:41 - would like to add a background color
41:45 - so right here I will add
41:47 - a Spam tag an opening span tag then
41:50 - where would I like to close it
41:52 - let's do so before the closing paragraph
41:54 - tag
41:55 - then I will change the background color
42:06 - all right we have highlighted the second
42:08 - sentence let's do this with div tags now
42:10 - with our next paragraph let's create an
42:12 - opening div tag
42:14 - then we'll need to close it somewhere
42:16 - let's close it before the closing
42:18 - paragraph tag
42:22 - and then I will change the background
42:24 - color
42:27 - within the opening div tag I will set
42:29 - the background color to be cyan
42:32 - what we have done is created a block
42:34 - level element for the second sentence
42:36 - within our paragraph basically speaking
42:39 - we can use the span and div tags to
42:40 - group together HTML for styling purposes
42:43 - span is an inline container div is a
42:47 - block level container we'll be using
42:49 - these more when we reach CSS and well
42:51 - everybody those are the span and div
42:53 - tags in HTML
42:57 - hey everybody today I'm going to explain
42:58 - how we can create different lists in
43:01 - HTML there's three different types of
43:03 - lists that we'll discuss today unordered
43:05 - ordered and description lists for an
43:07 - unordered list think of maybe a grocery
43:10 - list the order of items doesn't matter
43:12 - to create an unordered list you need a
43:15 - pair of UL tags
43:18 - UL meaning unordered list then between
43:21 - the pair of UL tags you need to list
43:24 - items
43:25 - Li means a list item
43:27 - so we have a little bullet point let's
43:30 - create a grocery shopping list maybe we
43:33 - need to buy milk let's create another
43:36 - list item
43:37 - we need another pair of list item tags
43:40 - let's buy eggs
43:44 - what else can we buy milk eggs bread
43:49 - and what about coffee
43:54 - there we are here's our unordered list
43:56 - each list item is bulleted hey let's add
43:59 - a title to this list preceding the pair
44:01 - of UL tags let's use maybe an H4 header
44:05 - tag
44:06 - let's say groceries here are the
44:10 - groceries I want to buy the order
44:12 - doesn't matter so we're using an
44:14 - unordered list now you can create nested
44:16 - lists too let's change coffee to Coffee
44:19 - supplies
44:21 - then after this list item we'll create
44:24 - another unordered list
44:27 - then we need more list items
44:29 - so for coffee supplies of course we
44:31 - would need coffee or maybe coffee beans
44:36 - now we have a hollow bullet point
44:39 - maybe you need some creamer for your
44:41 - coffee and or sugar
44:47 - so that's how to create a nested list
44:48 - within a list within your list you can
44:51 - create another list now let's go over
44:53 - order lists to create an ordered list
44:56 - you need a pair of ol tags meaning
44:58 - ordered list
45:00 - then you need some list items
45:02 - what about a to-do list
45:04 - so we need a list item
45:07 - so number one that's first in our list
45:10 - we need to eat breakfast
45:14 - I'm going to add a title to so let's use
45:17 - a pair of H4 header tags
45:19 - this will be my two do list
45:23 - one we need to eat breakfast
45:28 - two
45:29 - go to school or go to class
45:33 - so that's number two
45:37 - number three
45:39 - after class you have to walk your dog
45:44 - then four maybe you have to go to work
45:47 - all right that is an ordered list use a
45:50 - pair of ol tags then lastly we have a
45:52 - description list this one's a little
45:54 - more tricky a description list is made
45:57 - of key value pairs you have a term and a
46:00 - definition to create a description list
46:02 - you need a pair of DL tags meaning
46:05 - description list
46:07 - we need some terms to create a term you
46:10 - type DT
46:11 - then close it
46:13 - so I play a lot of Dungeons and Dragons
46:15 - let's create some definitions for some
46:18 - mythological creatures like a dragon
46:21 - so that's my term
46:23 - let's create a few other terms
46:27 - dragon
46:28 - v-nix
46:30 - vampire
46:32 - and werewolf
46:35 - so these are the terms underneath each
46:37 - term we can add a definition
46:40 - we'll need a pair of DD tags for
46:43 - description definition I'm gonna google
46:45 - each of these creatures then just paste
46:47 - the definition that I find
46:50 - so for a dragon I'm just gonna copy this
46:52 - definition
46:55 - then paste it within the DD tags
46:59 - here's my term and here's my definition
47:02 - of that term Dragon a mythical monster
47:04 - resembling a giant reptile sometimes
47:07 - shown as having wings let's do this with
47:09 - our other definition terms as well
47:11 - next we have Phoenix
47:16 - definition an immortal bird associated
47:19 - with Greek mythology
47:22 - we'll need a pair of DD tags add your
47:25 - definition
47:26 - then close it
47:30 - here's my second description definition
47:32 - then we need vampire and werewolf
47:39 - vampire creature definition
47:42 - let's copy this
47:46 - create another pair of DD tags
47:49 - then paste that definition
47:52 - here's the definition for vampire then
47:54 - lastly werewolf
47:58 - werewolf creature definition
48:01 - an individual that can shape shift into
48:03 - a wolf
48:06 - so DD close it
48:08 - add that definition
48:13 - and there's our definition for werewolf
48:15 - so that's a description list in a way
48:18 - it's made of key value pairs you have a
48:20 - term which is represented with
48:22 - description term then a description with
48:24 - DD description definition I forgot to
48:27 - add a title to this list let's do that
48:30 - I'll use a pair of H4 header tags
48:33 - let's make the title mythical creatures
48:38 - not bad let's add a background color
48:40 - because well we can I'll add a
48:43 - background color to the opening DL tag
48:46 - so style equals
48:50 - background Dash color
48:53 - what's a good color for this what about
48:55 - light green
48:59 - I haven't discussed borders yet but to
49:01 - add a border you can type border colon
49:04 - then a size maybe two pixels then
49:07 - there's different borders but let's go
49:09 - with solid for now
49:11 - here's a border around my list alright
49:14 - everybody so that's how to create
49:15 - different lists in HTML we have
49:17 - unordered lists ordered lists and
49:20 - description lists you can style your
49:22 - lists as well but we haven't really
49:24 - discussed much CSS yet but yeah those
49:27 - are different lists in HTML
49:31 - hey everybody today I'm going to show
49:32 - you how we can create a table using HTML
49:35 - let's create a table of store hours for
49:38 - a fictional business I'll create a title
49:41 - using H3 header tags the title will be
49:45 - store hours what are the hours of
49:48 - operation for our store
49:50 - to create a table we need a pair of
49:52 - table tags
49:55 - for the first row we need a pair of TR
49:58 - tags meaning table row
50:01 - so the first row is going to be filled
50:03 - with table headers how many columns do
50:06 - we have well if we have a table of store
50:09 - hours they're seven days in a week
50:12 - we will need seven pairs of table header
50:15 - tags
50:16 - so let's copy and paste these tags six
50:19 - additional times for a total of seven
50:21 - one two three four five six seven
50:24 - alright now for the First Column the
50:27 - header will be Sunday we have Sunday
50:31 - then Monday
50:35 - Tuesday
50:37 - Wednesday
50:41 - Thursday
50:44 - Friday
50:46 - Saturday
50:50 - so here's my first row
50:52 - the first row is your table headers add
50:56 - one header for each column in your table
51:00 - for another row we need another pair of
51:03 - TR tags meaning table row
51:07 - so for my second row
51:09 - I'll include table data
51:11 - we need TD tags
51:14 - so we'll need a total of seven
51:21 - on Sunday our fictional store is going
51:23 - to be closed I'll type closed as we can
51:26 - see that this data is underneath this
51:29 - header for the second row
51:31 - Monday the hours will be nine to five
51:35 - let's apply that for the other days
51:36 - besides Saturday
51:40 - Monday through Friday the store is open
51:42 - between nine to five
51:44 - Saturday will be reduced hours ten to
51:46 - two
51:47 - alright not too bad
51:50 - to align the table data what you're
51:52 - going to do is within the table row take
51:54 - the Align attribute set this to Center
51:59 - or otherwise if you would like to write
52:01 - justify it you would type right
52:04 - but let's stick with Center
52:07 - let's align the first row as well
52:10 - we can also add a border within the
52:13 - opening table tag set border equal to
52:16 - zero that's for no border
52:20 - then increase the number depending on
52:21 - the thickness that you want
52:23 - so one will give us a border that is
52:25 - this thick
52:27 - two
52:30 - and three
52:32 - let's stick with one
52:36 - let me move this a little
52:38 - these table cells aren't exactly the
52:41 - same size the word Wednesday has a lot
52:43 - of characters
52:45 - within each of these header tags I will
52:47 - set the width
52:48 - to be maybe 100.
52:51 - this column is a little bit larger now
52:53 - let's copy the width and make each
52:56 - header have a width of 100.
53:02 - okay this table is All Uniform now
53:05 - but if we were to shrink this window
53:08 - the cells would be compressed
53:10 - okay let's change the background color
53:12 - let's begin with the table
53:15 - I will set the style attribute to be a
53:18 - CSS property
53:19 - let's set the background
53:21 - Dash color to be black
53:25 - the whole table is black now so let's
53:28 - change the color for the headers
53:32 - and I'm just going to copy this style
53:34 - attribute
53:36 - let's change the first row to have a
53:38 - color of
53:40 - light blue
53:43 - we can at least see the text now
53:48 - and then for the second row let's pick a
53:50 - different color
53:51 - I think this color would be good
53:54 - Alice blue
53:56 - yeah that's not too bad
53:58 - if you need additional rows for your
54:00 - table use another set of TR tags meaning
54:03 - table row then you can add another set
54:05 - of data all right everybody that is how
54:08 - to create a table using HTML
54:13 - hello again everybody today I'm going to
54:15 - show you how we can create a button
54:16 - using HTML and a little CSS to create a
54:20 - button we need a pair of button tags
54:25 - and here's our button it's really small
54:27 - and it doesn't do anything let's add
54:29 - some text between the button tags let's
54:32 - add some text like click me
54:35 - so here's our button but it's fairly
54:37 - small we can change the size of this
54:39 - button by changing the font size we will
54:42 - need to access the style attribute then
54:44 - set the font size property to a larger
54:46 - font size so font Dash size
54:51 - 25 pixels is good
54:54 - the size of our button will adjust
54:55 - accordingly
54:57 - let's change the background color
54:59 - separate each of these CSS properties
55:01 - with a semicolon let's change the
55:04 - background Dash color to be Gray
55:09 - so that's how to change the background
55:11 - color
55:12 - to change the font color type color
55:15 - colon then some color like light blue
55:19 - you can round the corners by setting a
55:22 - border radius
55:24 - so that's another CSS property
55:26 - border Dash radius
55:29 - colon
55:30 - let's begin with five
55:32 - that will Round the Corner slightly you
55:35 - can increase the amount of pixels for a
55:37 - more rounded border
55:39 - let's try 25. that's not too bad
55:43 - so this button currently doesn't do
55:45 - anything what I'm going to do is turn
55:47 - this button into a hyperlink when we
55:50 - click on the button it will take us to
55:52 - maybe Google
55:53 - we need to surround our button with a
55:55 - pair of a tags
56:00 - I will set the href attribute equal to
56:03 - some URL
56:04 - like Google
56:09 - so when I click on the button it takes
56:11 - me to Google
56:12 - or if we had another HTML file we can go
56:15 - there too I'll create a new HTML file
56:18 - named maybe page two page2.html
56:25 - let's generate some HTML in vs code to
56:28 - do that type an exclamation point then
56:30 - tab all I'm going to add to page 2 is an
56:33 - H1 header tag
56:35 - with the title of this is page number
56:39 - two
56:40 - I'll set the href attribute to B
56:43 - the name of that HTML file page2.html
56:51 - page2.html
56:53 - when I click on the button it brings me
56:55 - to my second page
56:56 - I haven't discussed JavaScript yet but
56:59 - we can have a button execute some
57:01 - JavaScript code this part of the lesson
57:03 - is outside the scope of what I would
57:05 - normally teach at this point in time but
57:07 - if you're interested here's a little bit
57:09 - of JavaScript again it's not necessary
57:11 - to learn this at this level if you would
57:13 - like to execute some JavaScript code
57:15 - using a button we need a pair of script
57:17 - tags for JavaScript
57:21 - within this pair of script Tags I'm
57:23 - going to define a function function you
57:26 - can come up with some function name
57:28 - this function will do something then you
57:32 - need a set of parentheses then a set of
57:34 - curly braces
57:36 - buttons have an on click attribute we
57:40 - can have the button do something if it's
57:42 - interacted with
57:43 - the on click attribute is going to be
57:46 - the name of my function do something
57:49 - when we click on the button execute this
57:52 - function what do we want to do
57:55 - I'll change some text on the screen
57:57 - but we'll need some sample text to work
57:59 - with
58:00 - I'll create a pair of paragraph tags
58:03 - let's say hello
58:06 - within our JavaScript function we'll
58:08 - change the text of whatever's between
58:10 - these two paragraph tags but we need an
58:13 - ID there's an ID attribute
58:16 - I'll name this text maybe greeting
58:20 - so when we click on this function I
58:23 - would like to change the text of my
58:25 - greeting
58:26 - within the function we can do that with
58:28 - document dot get element
58:33 - by ID
58:36 - within the set of parentheses the ID is
58:39 - greeting
58:41 - follow this with DOT enter
58:44 - HTML then we can set the SQL to some new
58:47 - value
58:48 - let's set the new value to be good bye
58:53 - now when I click on the button it
58:56 - changes our text
58:58 - so that's a button everybody
59:00 - you need a pair of button tags you can
59:03 - apply some CSS styling I haven't really
59:05 - discussed CSS yet so we did inline CSS
59:09 - but if you have these many properties I
59:11 - would recommend a style sheet which
59:13 - we'll cover later to make your button
59:15 - bigger you can change the font size you
59:17 - could have your button bring you to
59:18 - another HTML page or even execute some
59:21 - JavaScript code and well everybody
59:23 - that's how to create a button using HTML
59:28 - hello again friends today I'm going to
59:30 - explain how we can create a form using
59:33 - HTML to create a form we'll need a pair
59:36 - of form tags
59:38 - the opening form tag has a few
59:40 - attributes we need to fill in
59:42 - first is an action attribute after
59:44 - submitting our form to what location do
59:47 - we want to send our form to form
59:49 - submission is done with the back end
59:50 - language such as PHP you might see a
59:53 - file name such as index.php or action
59:56 - page or something of that nature within
59:58 - your action attribute we're not actually
60:00 - going to do a form submission but just
60:02 - be aware that the action attribute sends
60:04 - data to this location to this file the
60:07 - file listed really can be anything but
60:09 - that's outside the scope of this lesson
60:11 - you'll also see a method the method
60:14 - attribute specifies if this is a get
60:16 - request or a post request post is used
60:19 - for confidential information such as a
60:22 - username and a password get is for
60:24 - insensitive data basically again this is
60:27 - outside the scope of HTML at this point
60:29 - in time if we have a form and we're
60:31 - sending sensitive data we should use
60:33 - post now let's create some elements
60:35 - within our form the first thing we'll
60:37 - create is a text box we need a
60:39 - self-closing input tag
60:42 - so here's our text box by default the
60:45 - type is a text box but we can specify
60:48 - that with the type
60:49 - so type text there's other different
60:52 - types like passwords emails telephone
60:55 - numbers we'll cover that pretty soon we
60:58 - have a text box but if a user sees this
61:00 - text box they probably don't know what
61:02 - they should enter in let's add a label
61:04 - to the text box
61:06 - preceding my input tag I will create a
61:09 - pair of label tags what do we want our
61:11 - label to say
61:12 - maybe username we're telling the user
61:15 - hey we want you to enter in your
61:16 - username
61:17 - if somebody is using a screen reader if
61:19 - they're visually impaired we should add
61:21 - a four attribute what is this for well
61:25 - this is for my username another benefit
61:27 - of adding the four attribute to a label
61:30 - when you click on the label your cursor
61:32 - will move to the text box but we need a
61:35 - matching ID attribute within the input
61:37 - tag
61:38 - so the ID is going to be the same as the
61:41 - four attribute then when I click on the
61:43 - label our cursor moves to the text box
61:45 - there are a few other attributes you
61:47 - might be interested in as well but
61:49 - before we get to that we should create a
61:51 - submit button to submit our data at the
61:54 - end of our form we'll create an input
61:56 - tag
61:57 - the type will be submit
62:03 - it's a submit button but it currently
62:05 - doesn't do anything we're not using a
62:07 - back-end language to submit form data to
62:10 - there are some useful attributes for
62:12 - text boxes within the input element for
62:14 - text box let's add the required
62:17 - attribute
62:18 - in order to submit this form we need to
62:21 - type in a password if I just leave it
62:22 - blank then hit submit we have this
62:25 - little prompt please fill out this field
62:28 - I can't submit this form until I type in
62:31 - something
62:32 - then I can submit it you could set a
62:35 - minimum and maximum length
62:37 - that's another attribute Min length
62:41 - equals then some length
62:44 - the minimum length for a username is six
62:47 - characters
62:49 - let's type in just three or some other
62:51 - number below six submit
62:54 - please lengthen this text to six
62:55 - characters or more
62:57 - I'll come up with a different username
62:59 - then submit and that appears to work you
63:02 - also have the capability of setting a
63:04 - maximum length
63:06 - with the max length attribute let's make
63:09 - the max length 15 characters
63:12 - so let's type in a username
63:15 - I'll add a bunch of characters
63:16 - afterwards so I can type in any more
63:19 - than 15 characters there's a maximum
63:23 - to reset your form there's a reset
63:25 - button let's copy this input tag
63:28 - paste it then change type to reset
63:33 - so here's my reset button I'll type in a
63:36 - username press reset then we can reset
63:39 - the data for our form but afterwards I'm
63:41 - just going to add a break line just to
63:43 - put the submit button on a new line with
63:45 - text boxes you can add a placeholder to
63:48 - give the user an idea of what we want
63:49 - them to enter in and in what format I'm
63:52 - going to add a place holder attribute
63:58 - what do we want our placeholder to be
64:00 - um I don't know SpongeBob SquarePants or
64:02 - maybe just SpongeBob so the placeholder
64:04 - is faded it gives a hint to the user as
64:07 - to the format in which they should enter
64:09 - in information if I were to click on
64:11 - this text box the hint is still there
64:12 - until we type in something
64:15 - okay let's cover passwords
64:18 - to create a password we'll use an input
64:21 - tag the type
64:23 - is going to be a password
64:26 - we should probably add a label to let
64:28 - the user know that we would like a
64:30 - password
64:31 - so I'm just going to copy the label that
64:33 - we have for our username
64:35 - the four attribute of our label should
64:38 - match the ID attribute of our input tag
64:40 - so the ID is going to be password the
64:45 - for attribute of the label will be
64:47 - password and then change the text to
64:51 - there we are
64:53 - I'm just going to change one thing after
64:56 - my password I'm going to add a break
64:57 - line so I will add that here
65:01 - all right so with the password the text
65:03 - is hidden I can type in a bunch of
65:05 - characters and you can't see it
65:07 - you could add some of these attributes
65:09 - as well like a minimum length maximum
65:11 - length and the required attribute
65:13 - so I'll copy those and paste them within
65:16 - the input tag from my password
65:18 - I can type in a username if I attempt to
65:21 - submit this form data without a password
65:24 - we have that prompt please fill out this
65:26 - field that's because we have the
65:28 - required attribute set there's also a
65:30 - minimum length and a maximum length set
65:32 - too I'm required to type in a password
65:34 - that's at least six characters long
65:36 - right now this is only five anything
65:38 - between 6 and 15 is okay
65:41 - for the rest of this demonstration I'm
65:43 - going to get rid of these attributes
65:45 - let's cover email next I'll create a
65:47 - label first
65:50 - this will be for email the text will be
65:53 - email
65:54 - then we'll need a corresponding input
65:56 - tag
65:57 - input type equals email for the ID I
66:02 - will also set that to be email
66:05 - I'll add a line break after then I'll
66:08 - add a placeholder
66:10 - s
66:11 - Square Pants
66:13 - at gmail.com
66:16 - again the placeholders letting the user
66:18 - know the format in which they should
66:20 - type in their information
66:21 - if I were to type in some text but we're
66:23 - missing that at sign
66:27 - hold on let me type in something real
66:28 - quick
66:29 - all right click submit we have a prompt
66:32 - please include an at sign in the email
66:34 - address because we're looking for a
66:37 - valid email address format that's input
66:39 - for email let's copy our label
66:43 - for
66:44 - phone
66:46 - the text will be phone number
66:52 - again we need an input tag the type will
66:55 - be Tel for telephone
66:58 - we need a matching ID that matches the
67:01 - four attribute
67:03 - phone
67:04 - I'll add a break element to the end
67:06 - we can type in a phone number I'll add a
67:09 - placeholder too
67:12 - placeholder equals with American
67:14 - telephone numbers you have three digits
67:16 - such as one two three dash then another
67:19 - three digits like four five six dash
67:22 - then four digits seven eight nine zero
67:24 - So currently we can type in any numbers
67:27 - then submit them uh hold on I need a
67:30 - username
67:31 - we can limit the format in which a user
67:34 - can type in some numbers for a phone
67:35 - number
67:36 - we would need a pattern attribute
67:39 - for the digits 0 through 9 within a set
67:42 - of straight brackets you would type 0-9
67:46 - then how many digits do you allow
67:47 - afterwards
67:49 - three then we'll need a dash that's
67:51 - required add a dash
67:53 - then another three digits zero through
67:55 - nine zero Dash nine
67:58 - then another three digits Dash
68:02 - number zero through nine let me move
68:05 - this in a little bit then I would like
68:07 - four digits so now our phone number
68:09 - needs to be in this format three digits
68:12 - Dash three digits Dash four digits one
68:15 - two three dash four five six seven eight
68:18 - nine zero
68:19 - hold on I'm going to get rid of this
68:21 - required attribute just because it's
68:23 - kind of annoying right now one two
68:24 - three-456-7890
68:28 - there that seems to work but if I were
68:30 - to type in a random amount of numbers
68:33 - well then we don't meet this pattern
68:35 - matching this pattern is required in
68:38 - order to submit this data
68:40 - all right then we have dates like a
68:43 - birth date we'll need a label
68:46 - this will be for a birth date
68:49 - four b day
68:53 - input type equals date
68:58 - the ID should match the four attribute
69:01 - of the label
69:04 - then I'll add a break element
69:07 - so with dates there's an interactive
69:09 - calendar to select a date
69:11 - pretty simple then we have a number
69:13 - element a user is going to enter in a
69:16 - quantity like they're buying something
69:18 - like how many do you want
69:20 - let's change the text to quantity
69:23 - for
69:25 - quantity
69:28 - we need an input element
69:31 - the type will be number
69:34 - ID equals
69:37 - quantity
69:39 - then I'll add a break
69:41 - so here's our quantity
69:43 - we can use these arrows to go up or down
69:46 - however normally you can go into
69:48 - negative numbers we can set a minimum
69:51 - and a maximum with the Min and Max
69:53 - attributes so the minimum will be zero
69:56 - we don't want to go below zero the max I
69:59 - think 99 is good so we can't go below
70:02 - zero but we can go all the way to 99 and
70:04 - no further you can add a default value
70:07 - with the value attribute I'll set the
70:09 - default to be one that is for number
70:12 - input it's good if you need a quantity
70:13 - of something
70:15 - all right then radio buttons radio
70:17 - buttons are a little tricky with radio
70:19 - buttons you can only select one from a
70:21 - group I think a good label will be for a
70:24 - title are you a mister a miss a doctor
70:26 - whatever like what's your title so title
70:30 - for title
70:33 - we have our title so far then we'll need
70:35 - individual buttons I'll create a label
70:37 - for Mr Miss and doctor
70:41 - Mr
70:43 - Miss
70:45 - in the U.S doctor is p h d
70:51 - the four attribute will be Mr for Mr
70:55 - Miss for Miss
70:57 - then p h d for PhD
71:02 - I'm gonna get rid of these colons
71:04 - so after each label we'll create a radio
71:07 - button
71:08 - input type equals radio
71:12 - the ID will match the four attribute of
71:15 - the label we have Mr
71:18 - then we'll want to add a value to when
71:20 - we submit this form so mister
71:24 - okay let's copy this input then apply it
71:26 - to miss add PhD so type radio ID will be
71:31 - Miss value Miss
71:34 - then we have PhD
71:37 - ID will be PhD value PhD
71:42 - so we have three radio buttons
71:44 - um let me just add a break afterwards
71:47 - with a group of radio buttons you should
71:49 - only be able to select one
71:51 - however we can select all three that's
71:54 - because we need to add all of these
71:55 - radio buttons to the same group we're
71:57 - going to add a name attribute
72:00 - we'll name this attribute title
72:03 - whichever radio buttons you would like
72:04 - in the same group they need to share the
72:06 - same title
72:08 - now we only can select one those are
72:10 - radio buttons
72:12 - okay let's create a drop down menu
72:16 - this will be for a payment like what
72:19 - kind of card are you paying with is it a
72:21 - Visa card MasterCard gift card
72:24 - four
72:26 - payment instead of an input element
72:28 - we're going to be using a pair of Select
72:31 - tags
72:32 - for a select element
72:35 - then add a break afterwards
72:38 - so we have a drop down menu but there's
72:40 - no options
72:41 - we will add option elements within our
72:43 - select element
72:45 - so these have opening and closing tags
72:49 - let's create three options
72:52 - an option for Visa Mastercard then gift
72:55 - card for option one the value will be
73:00 - Visa
73:01 - the text will be Visa
73:05 - so we have one option let's add two more
73:09 - value
73:11 - MasterCard
73:13 - the text will be
73:15 - MasterCard
73:17 - then a gift card
73:19 - value equals
73:22 - gift card the text will be gift card
73:26 - then I forgot to add an ID to the
73:28 - opening select element
73:29 - ID equals payment
73:33 - there we are all right so that is a drop
73:35 - down menu you need a pair of Select tags
73:38 - within the select tags you can create
73:40 - option tags then we have a check box
73:43 - again let's create a label this will be
73:46 - for a check box
73:48 - I think a good use of a checkbox will be
73:50 - a subscribe button the four attribute
73:52 - will be subscribed
73:55 - the text will be
73:57 - subscribe
74:00 - we'll need an input element input
74:04 - type
74:05 - equals check box
74:09 - the ID will match the four attribute of
74:12 - the label
74:13 - then add a break element after
74:17 - I can subscribe by checking the check
74:18 - box
74:20 - or by clicking on the label this one's a
74:22 - little tricky we're going to create a
74:24 - text area
74:25 - again we'll need a label the text next
74:28 - to the text area will be comment
74:31 - for
74:32 - comment
74:35 - we'll create a pair of text area tags
74:39 - so we have a text area
74:42 - the ID of the text area will match the
74:44 - four attribute of the label so comment
74:48 - you can change the dimensions of your
74:50 - text box by adjusting the rows and
74:52 - columns I would like three rows rows
74:55 - equals three
74:57 - columns that will be 25. so now we have
75:01 - different dimensions for our comment you
75:03 - can type in anything you suck bro code
75:08 - that's how to create a text area for a
75:10 - file submission again we'll create a
75:13 - label we're kind of following the same
75:14 - pattern
75:15 - file
75:17 - for file
75:20 - again we need an input tag
75:23 - input type equals file
75:28 - the ID will match the for attribute of
75:31 - the label
75:33 - file
75:35 - then I'll add a break
75:37 - so now we can choose a file however by
75:40 - default we can accept all files
75:43 - to limit the type of file that you're
75:45 - looking for there is an accept attribute
75:49 - what file types will we accept Let's do
75:52 - an image for a PNG that would be image
75:55 - slash PNG
75:57 - when I choose a file we're looking for a
76:00 - PNG now
76:01 - you can add more than one file type
76:04 - each file type is comma separated let's
76:07 - also look for any jpegs
76:10 - so that would be jpeg
76:15 - so now we're looking for a bunch of
76:16 - files anything within this range
76:19 - now if you're sending a large amount of
76:21 - data there's one change we'll make to
76:23 - the form
76:24 - we're going to change the encryption
76:25 - type within the opening form tag let's
76:28 - say we're sending an image and the image
76:30 - is a large file
76:31 - so we will set the encryption type
76:34 - equal to B multi
76:38 - part slash form data
76:42 - in simple terms when we send our large
76:44 - amount of data we'll break it into
76:46 - multiple parts then when all of that
76:49 - data is received those multiple parts
76:51 - will be reassembled it's a little more
76:53 - complicated than that but at this level
76:55 - that's all you need to know so if you're
76:57 - sending a large file such as an image I
77:01 - would recommend changing the encryption
77:03 - type to multi-part slash form data all
77:05 - right everybody so that's how to create
77:07 - a very basic form using HTML it really
77:11 - doesn't look too pretty right now you
77:13 - can always style it with CSS which we'll
77:15 - be covering very soon and well yeah
77:17 - that's how to create a form using HTML
77:22 - hello again friends it's me again today
77:25 - I will show you how we can create both a
77:27 - header and a footer for your web page
77:29 - header and footer elements are both
77:31 - semantic tags they describe their
77:33 - meaning to both the web browser and the
77:35 - developer they help organize your
77:37 - content and CSS properties can easily be
77:41 - applied to anything within these
77:43 - containers headers are used for
77:44 - introductory content at the top of your
77:46 - page such as a title a subtitle a logo a
77:51 - navigation bar but we haven't really
77:53 - discussed navigation bars yet Footers
77:55 - act as a container for holding
77:57 - concluding content at the bottom of your
77:59 - page such as an author a copyright or
78:03 - some contact information like a phone
78:04 - number or email alright so let's begin
78:09 - to create a header within our body we
78:12 - need a pair of header tags
78:14 - then for a footer you need a pair of
78:17 - footer tags
78:20 - personally what I like to do between the
78:22 - header and footer tags I'll create a
78:24 - pair of main tags for all of the main
78:27 - content within our web page it helps
78:29 - with organization we'll begin with the
78:31 - header though the header element is a
78:33 - container for holding introductory
78:35 - content at the top of our page this is
78:38 - where you may see a title
78:39 - like an H1 header element for our H1
78:43 - header I think welcome to pick your name
78:47 - or your business or organization I'll
78:50 - just use my YouTube channel name a
78:52 - header is a good container to hold the
78:54 - title for your web page you could
78:55 - include a logo or a navigation bar
78:58 - navigation bars are a little tricky we
79:00 - do need to know a little bit more CSS
79:02 - for navigation bars but let's include
79:04 - some hyperlinks and make like a really
79:06 - basic navigation bar okay
79:09 - href equals I won't set a location it's
79:13 - not really necessary for this example
79:15 - we'll just have a hyperlink that goes
79:17 - nowhere so we have home
79:19 - let's create three more hyperlinks
79:22 - home
79:25 - about us
79:27 - products
79:29 - and contact us
79:32 - the header of your document it also
79:34 - tends to be a good place to hold
79:35 - navigation links to then to make this a
79:38 - little more fancy I'm going to add a
79:40 - horizontal rule with a self-closing HR
79:43 - tag
79:44 - okay that's not bad another use of
79:47 - header and footer elements is that it
79:49 - makes CSS styling a little bit easier I
79:51 - haven't yet shown how we can apply CSS
79:54 - style sheets we're going to use a little
79:56 - bit of inline CSS all I'll do is change
79:59 - the background Dash color to be whatever
80:03 - color you want I'll pick medium
80:06 - purple anything within the header I
80:09 - would like to change the background
80:10 - color to purple or you could change the
80:13 - font or the font size anything else it's
80:16 - very helpful to put your content within
80:17 - a container
80:19 - So within my main section I'll include
80:21 - an image I do have one ready feel free
80:24 - to follow along if you want
80:26 - within my main element let's begin with
80:29 - the title for the main content I'm going
80:31 - to use a smaller heading like H4 what
80:34 - would be a good title for the main
80:36 - content
80:38 - check out these cool moves
80:42 - maybe I'll use a colon I'll include an
80:45 - image
80:46 - we need a self-closing image tag
80:48 - The Source will equal the name of my
80:51 - file including the extension
80:55 - and it is good practice to add some
80:57 - alternative text
80:59 - profile pic is good
81:01 - so there's my image then I'll add some
81:05 - text within a paragraph
81:07 - we need a pair of P tags I'll generate
81:10 - some sample text in vs code you can type
81:13 - lorem then tab
81:15 - and here are some sample text
81:17 - so that is the main content of my page
81:20 - lastly let's work on the footer the
81:23 - footer is a container for holding
81:25 - concluding content at the bottom of your
81:27 - page I'll begin with a horizontal rule
81:30 - because I think that looks good let's
81:32 - include some information about the
81:33 - author
81:36 - author colon type in your name
81:40 - I'll add a line break after
81:43 - so we have author
81:45 - then a copyright symbol using HTML to
81:48 - include the copyright symbol you can
81:50 - Type ampersand copy semicolon so we have
81:54 - a copyright symbol I'll add the text
81:56 - copy right
81:59 - reserved then add a break
82:04 - then I'll add an email
82:06 - this will be a link we need an anchor
82:08 - tag
82:09 - set the href attribute to be
82:12 - mail to colon then an email address I'll
82:16 - make one up bro code at fake.com
82:21 - close the anchor tag then I need some
82:23 - text
82:24 - bro code at fake.com feel free to use
82:28 - your own email I'll make my email a
82:30 - little bit smaller by using a pair of
82:32 - small tags
82:33 - so I enclose our hyperlink with small
82:39 - there we are
82:41 - and I'll change the background color to
82:44 - with the style attribute within the
82:46 - opening footer tag I will paste that
82:48 - style attribute I'll pick the same color
82:51 - of medium purple
82:52 - alright everybody so those are headers
82:55 - and Footers they help organize your
82:57 - content as well as make applying CSS a
83:00 - little bit easier because you can Target
83:02 - everything within the header or footer
83:04 - elements and those are headers and
83:06 - Footers in HTML
83:10 - hey hello again friends today I'm going
83:12 - to explain how we can get started
83:13 - working with CSS so sit back relax and
83:17 - enjoy the show
83:20 - CSS is an acronym for cascading style
83:23 - sheets we're able to apply CSS
83:25 - properties to color style or otherwise
83:28 - decorate our HTML markup there's three
83:31 - different ways in which we can apply CSS
83:33 - inline internal and external we'll begin
83:37 - with inline suppose we have an H1 header
83:40 - tag
83:41 - with the title of this is my website
83:46 - let's create a few paragraphs
83:49 - we need a pair of paragraph tags
83:51 - we need some sample text I'll type lorem
83:53 - then tab
83:55 - I'll copy this paragraph
83:59 - then paste three additional paragraphs
84:01 - so we have a total of four
84:03 - to apply some CSS styling to one of
84:06 - these elements for example the body of
84:08 - our document we'll select the opening
84:11 - tag
84:12 - set the style attribute to B we can list
84:15 - one or a few CSS properties let's change
84:18 - the background Dash color of our body to
84:22 - be black
84:25 - the background is now black
84:27 - let's change the font color of the H1
84:29 - heading
84:31 - style equals color that's for the font
84:34 - color let's pick White
84:37 - then we'll do this for the paragraphs
84:46 - this is an example of inline CSS within
84:49 - the opening tag of one of your elements
84:51 - you can change the style attribute then
84:54 - list one of many CSS properties another
84:57 - method of applying CSS is internal as in
85:00 - an internal style sheet I'll undo these
85:03 - style attributes
85:08 - to apply an internal CSS style sheet
85:11 - within the head of our document we need
85:14 - a pair of style tags
85:20 - whatever elements you would like to
85:22 - apply CSS to you would list that within
85:24 - the style tags if I would like to Target
85:27 - the body of my document I would type
85:29 - body then a set of curly braces
85:32 - list your properties between the set of
85:34 - curly braces
85:35 - let's change the background Dash color
85:38 - of the body of my document to be black
85:42 - let's change the H1 heading H1 curly
85:46 - braces then I will list some CSS
85:49 - properties color white
85:52 - then let's change the paragraphs
85:54 - P curly braces we're selecting all of
85:57 - the paragraphs
85:58 - color white
86:01 - so that's an internal style sheet within
86:03 - the head of your document you need a
86:05 - pair of style tags list the element you
86:07 - would like to select add a set of curly
86:09 - braces then list one or many CSS
86:12 - properties
86:13 - let's remove the internal style sheet
86:15 - now we'll create an external style sheet
86:18 - external style sheets are probably the
86:20 - most popular method because we can make
86:22 - a style sheet that's reusable to create
86:24 - an external style sheet within our
86:25 - website folder we're going to create a
86:27 - new document I'll name this document
86:29 - style dot CSS
86:32 - we need to link this style sheet to our
86:35 - HTML file we can do that within the
86:38 - opening head tag by using a link tag we
86:42 - need to set the relationship attribute
86:44 - to b style sheet we're letting the web
86:47 - browser know that we're linking a style
86:49 - sheet
86:50 - then we need an href attribute set to
86:53 - the relative file path of our style
86:55 - sheet that are right next to each other
86:56 - I only need the file name including the
86:59 - extension
87:00 - style dot CSS
87:02 - we have now linked this style sheet to
87:05 - this HTML file using this external style
87:08 - sheet we can select specific elements
87:10 - from our HTML file and apply CSS
87:12 - properties
87:14 - we will select the body of our document
87:16 - body curly braces I would like to change
87:19 - the background Dash color to be black
87:23 - let's change the color of the H1 header
87:26 - tag
87:27 - color colon White
87:31 - then the paragraphs
87:33 - P curly Braces Color colon White
87:37 - if you do need to apply CSS properties
87:39 - to one specific element such as this
87:43 - first paragraph We can create an ID
87:45 - within the opening tag
87:47 - ID equals think of some unique name I'll
87:51 - name the first paragraph P1
87:53 - let's do this with the other paragraphs
87:55 - the second paragraph will be P2
87:58 - the third will be P3 the fourth will be
88:01 - P4
88:03 - I'm going to delete these lines to
88:06 - select an element by ID you'll use a
88:09 - hashtag then the ID so P1
88:12 - what would I like the color to be let's
88:14 - change the color to red
88:17 - I'll select another ID
88:19 - P2 curly braces I'll change the color to
88:23 - be orange
88:25 - P3
88:27 - color will be yellow
88:31 - P4
88:33 - color will be green
88:36 - you can also apply CSS Properties by a
88:39 - Class A group
88:41 - within each of these paragraph tags I
88:43 - will add the attribute of class
88:45 - the first paragraph will be odd it's an
88:48 - odd number
88:49 - the second paragraph will be even
88:52 - the third paragraph will be odd
88:56 - the fourth paragraph will be even
88:58 - to apply any CSS to a class
89:02 - Guild type dot then the name of the
89:04 - class
89:05 - any elements within the odd class let's
89:07 - change the color to be red
89:10 - the first and the third paragraphs are
89:12 - both red because they belong to the odd
89:14 - class
89:15 - we apply to the color red to anything
89:17 - within the odd class by using dot then
89:20 - the name of the class
89:22 - let's change any elements within the
89:24 - even class to be blue
89:26 - if we're selecting a class we type dot
89:28 - the name of the class even in this case
89:30 - we'll change the color to be blue
89:34 - the second paragraph is blue along with
89:36 - the fourth they're both part of the even
89:39 - class
89:40 - another nice thing about external style
89:42 - sheets is that you can apply them to
89:44 - more than one HTML file let's create a
89:46 - second HTML file
89:48 - I'll name the second file page2.html
89:52 - to generate some boilerplate HTML within
89:55 - vs code you can type exclamation point
89:56 - then tab
89:58 - I'll open page 2 with live server this
90:01 - is page two
90:02 - I'm just going to copy all of this and
90:04 - make a few changes paste everything
90:07 - within page two
90:09 - let's change the title to be this is
90:12 - page two and we have three paragraphs
90:16 - this time
90:17 - we have our index file and page two
90:20 - to link an external style sheet to page
90:22 - two again we need that link tag set the
90:26 - relationship attribute to B
90:28 - style sheet
90:30 - then the href attribute will be the
90:32 - relative file path they're right next to
90:34 - each other I only need the file name
90:36 - style.css now when I save and refresh
90:40 - the page
90:41 - we have applied all of our CSS from the
90:44 - style sheet to page2.html
90:46 - external style sheets are reusable so
90:49 - they're pretty nice and convenient
90:50 - alright everybody so that is an
90:52 - introduction to CSS with CSS you can
90:55 - change the font the color add
90:57 - decorations we'll get more into that
90:59 - soon you can apply CSS inline with an
91:02 - internal style sheet or external style
91:04 - sheet and that is an introduction to CSS
91:08 - foreign
91:13 - CSS colors to our website so sit back
91:16 - relax and enjoy the show we'll need four
91:19 - paragraphs to begin with I'll name the
91:21 - first paragraph P1 the second will be P2
91:24 - followed by P3 then P4
91:27 - we can change the background color of an
91:29 - element or the font color let's begin
91:32 - with the background color of the body of
91:34 - our document within our external style
91:36 - sheet I will select our body element
91:39 - I'll change the background color
91:42 - property to be
91:44 - now with colors we can use names we can
91:47 - use RGB values hexadecimal values or hsl
91:51 - values for the first example we'll use
91:54 - named colors there are multiple sites in
91:56 - which you can find named colors
91:59 - let's go with this one slate gray
92:03 - background color slate gray save your
92:05 - changes and there you go the background
92:09 - color is now slate gray let's change the
92:12 - font color of our P1 paragraph
92:15 - I will select the ID of P1 I will change
92:19 - the color that's the font color to be do
92:23 - they have tomato
92:26 - yes there is
92:28 - for P1 let's change the color to be
92:30 - tomato because I like tomatoes
92:33 - those are named colors another option is
92:37 - RGB values
92:39 - for paragraph two we will set the color
92:42 - to be a set of RGB values RGB then a set
92:47 - of parentheses
92:48 - R meaning red G meaning green B meaning
92:51 - blue
92:52 - I would recommend looking up a Color
92:54 - Picker for this
92:55 - I would like a light bluish color
92:59 - so let's select uh that's good
93:03 - you'll find a set of three values for
93:05 - RGB
93:06 - these values range from 0 to 255.
93:10 - we will paste those three values within
93:13 - the set of parentheses and there's that
93:15 - blue color let's do this with the
93:17 - background color too let's change the
93:19 - background color from a named color to
93:21 - RGB values RGB parentheses
93:25 - let's go with whatever color this is 41
93:30 - 41 41.
93:33 - and there's that new color then we have
93:36 - hexadecimal values
93:38 - for P3 we will change the color to B
93:42 - some hex value let's go with a green
93:45 - color
93:48 - that's decent hexadecimal values are a
93:51 - combination of numbers and letters the
93:53 - letters range from a to F we'll copy
93:55 - this hex value
93:58 - then paste it
94:00 - hex values with CSS should start with a
94:02 - hashtag and there's that green color
94:05 - let's change the background color again
94:08 - let's go with the lighter color this
94:09 - time
94:10 - 54 54 54.
94:16 - there we are okay lastly we have hsl
94:19 - values
94:21 - or P4
94:23 - color colon now if you're using vs code
94:26 - here's a little trick we can pull up a
94:28 - Color Picker
94:30 - let's type a color like black
94:33 - click on the box and there's a Color
94:35 - Picker that's built in
94:37 - for hsl we can click the top bar here
94:41 - H meaning Hue s meaning saturation l
94:44 - meaning lightness
94:46 - let's go with the purple color
94:52 - we have one value then two percentages
94:54 - let's change the background color again
94:56 - using hsl
94:58 - I'll pick something a little bit darker
95:03 - that's good all right everybody so in
95:05 - conclusion with CSS colors you can pick
95:07 - either color names RGB values
95:10 - hexadecimal values or hsl values through
95:13 - the remainder of the series we'll be
95:15 - using hsl and well everybody that's an
95:18 - introduction to CSS colors
95:22 - hey how's it going everybody in today's
95:24 - video I'm going to show you everything
95:26 - you need to know to get started working
95:27 - with fonts and Google fonts in CSS so
95:31 - sit back relax and enjoy the show
95:33 - alright let's get started everybody we
95:35 - will need an H1 element why don't you go
95:37 - ahead and type in your name if your full
95:39 - name is pretty long just use your first
95:41 - name I guess and we'll need a paragraph
95:43 - to generate some text and vs code you
95:46 - can type lorem then hit tab
95:48 - that is good enough for now
95:50 - to change the font style we will go to
95:52 - our CSS style sheet I'll select our H1
95:55 - element
95:57 - to change the font we can set the font
95:59 - family property then pick a font I would
96:03 - recommend a Sans serif font serifs are
96:06 - these little projections on each
96:08 - character after each brush stroke Sans
96:11 - serif fonts don't have these projections
96:12 - Sans serif fonts are easier to read on a
96:15 - monitor or mobile device
96:17 - I'm going to pick the Sans serif font of
96:20 - verdana
96:23 - now not all fonts are universally
96:25 - accepted by all web browsers for some
96:28 - reason if we can't display verdana it's
96:31 - good practice to have a fallback font
96:33 - one that's web safe
96:35 - so to add a fallback after your primary
96:37 - font separate each font with a comma
96:40 - let's pick Ariel
96:43 - if a web browser can't display verdana
96:46 - the next available font is Ariel that's
96:49 - why you may see two or three fonts
96:51 - listed for a font family they're all
96:53 - fallbacks let's change our paragraph
96:56 - element I will set the font family to be
97:01 - lucida
97:03 - console
97:05 - if the font name contains any spaces you
97:07 - can just place the font name within a
97:09 - set of quotes
97:11 - for a fallback I'll use Courier new
97:16 - if we can't display the first font we
97:18 - will use the backup font
97:21 - now to change the font size there is a
97:24 - font size property
97:26 - normally it's 16.
97:28 - but you can adjust that number here's
97:30 - 18.
97:31 - here's 14.
97:34 - here's one it's really tiny you can
97:36 - barely even read it like at all another
97:39 - unit of measurement is em
97:41 - think of em as the standard one em means
97:45 - one hundred percent it's the normal size
97:48 - 1.1 em is 110
97:51 - 1.5 is 150 percent
97:55 - 0.5 is 50 percent
97:58 - you may see either pixels or em as a
98:01 - unit of measurement for the font size
98:02 - let's stick with one em
98:04 - you can change the font weight
98:08 - normally this is normal
98:10 - you can change that to bold if you so
98:12 - choose
98:13 - there's also font style
98:16 - again it's normally well normal
98:19 - you can change that to italic
98:22 - that's enough for basic fonts now I
98:25 - would like to introduce Google fonts
98:26 - head to this website fonts.google.com
98:29 - this website is free to use find two
98:32 - fonts that you like
98:34 - you can also narrow down your search too
98:36 - for example I do not want any serif
98:38 - fonts because they're difficult to read
98:40 - on a monitor
98:41 - I'll just use these two for convenience
98:45 - I'm going to open these in a new tab
98:48 - all right we have Roboto and open Sans
98:51 - I'm going to select one of these fonts
98:55 - I'll go with 400 regular I'll press the
98:58 - plus sign next to this font
99:00 - and we'll do so with our second font
99:04 - I'll go with light 300.
99:06 - to use these fonts we need to link our
99:09 - HTML file with the style sheet we can
99:12 - access that style sheet by going to view
99:14 - selected families
99:15 - be sure that this radio button is
99:17 - selected for link then we will copy this
99:20 - link
99:22 - within our HTML file within the head
99:24 - element I will paste that link
99:28 - we now have access to those two fonts
99:31 - my first font was Roboto
99:36 - my second font I already forgot the name
99:38 - of it
99:39 - open Sans
99:47 - and there we go
99:49 - that's how to link to the Google fonts
99:51 - API now if you do prefer these fonts can
99:55 - be loaded from either a remote server or
99:57 - locally installed on a user's computer
99:59 - for convenience I'm going to create a
100:01 - new folder within my website folder
100:03 - named fonts
100:06 - then heading back to Google fonts view
100:09 - selected families I will download all
100:16 - once we have our file
100:18 - it's a zip folder I'm going to unzip it
100:25 - we are looking for these ttf files they
100:28 - look something like this
100:30 - all we need to do is drag and drop these
100:33 - ttf files into our fonts folder
100:40 - I forgot which one I used I think it was
100:43 - a Roboto light
100:49 - these fonts are available locally we no
100:52 - longer need to link to the Google fonts
100:54 - API we can delete that link
100:58 - so now what we need to do is go to our
101:01 - style sheet and create a font face rule
101:05 - we'll begin with the first font at the
101:07 - top of our style sheet type at font Dash
101:11 - face curly braces
101:14 - we will set the source attribute to be a
101:18 - URL then add a set of parentheses
101:21 - the URL is going to contain the relative
101:24 - file path to one of these fonts
101:27 - I would like Roboto
101:30 - so I'm going to copy the file name
101:33 - this is within the fonts folder
101:36 - I'll place that first
101:38 - then paste the name of that file
101:40 - then a semicolon at the end
101:43 - I'm also going to set the font family
101:46 - property
101:48 - then I can come up with the name for
101:49 - this font I can keep it the same or
101:51 - change it
101:53 - I'll keep it the same though this font
101:55 - shall be known as Roboto light
101:59 - for my H1 element
102:01 - I will change that to B Roboto light
102:05 - that has appeared to work even though
102:06 - we're not linked to the Google fonts API
102:09 - let's add another font face rule
102:12 - we will use our second font
102:16 - fonts slash
102:19 - whatever the heck is listed here
102:21 - I'm going to rename this
102:23 - this font shall be known as open
102:27 - Sans
102:28 - so we need to change the font for our
102:31 - paragraph to that new font
102:34 - there we are all right everybody so
102:36 - that's a few different ways in which you
102:38 - can work with fonts in CSS
102:42 - hey how's it going everybody in today's
102:45 - video I'm going to explain borders in
102:47 - CSS we'll need some sample elements to
102:50 - work with I recommend creating an H1
102:52 - header tag type in maybe your name
102:56 - and a paragraph
102:58 - we'll need to pair paragraph tags I'll
103:00 - generate some text by typing lorem then
103:03 - hitting tab let's go to our CSS style
103:06 - sheet let's add a border around our H1
103:09 - element H1 curly braces we can select a
103:13 - border Style with the Border Dash style
103:16 - property
103:17 - first we have solid
103:19 - our border is a solid line there is
103:22 - dashed
103:24 - we have a dashed line
103:26 - dotted
103:28 - double for a double border
103:32 - Groove
103:35 - Ridge
103:38 - inset
103:40 - out set
103:42 - or none if something has a border
103:45 - naturally you can remove it
103:47 - let's pick a solid border you can change
103:50 - the width of the border with the Border
103:52 - width property border Dash width by
103:56 - default it's one let's increase that to
103:58 - two
103:59 - or even three
104:01 - four
104:03 - five border width is for the Border
104:06 - thickness I think three would be good
104:08 - for this example you can change the
104:10 - color with the Border color property
104:13 - then pick a color
104:16 - I'll use the built-in Color Picker and
104:19 - use hsl values let's go with a purple
104:22 - color
104:23 - something like that's good you can even
104:26 - round the corners with the Border radius
104:28 - property
104:29 - border Dash radius
104:31 - the higher the number in pixels the more
104:34 - rounded the corners are going to be
104:36 - that's five this is ten
104:40 - fifteen
104:42 - 20. okay just out of curiosity what if
104:45 - we do like 100
104:47 - okay it seems like there's a maximum you
104:49 - can only round at the corner so far so
104:51 - it looks like the max is 20. all right
104:53 - there's also a shorthand syntax in place
104:56 - of listing three different properties
104:58 - for the style width and color we can do
105:00 - that all at once let's eliminate these
105:03 - three lines we'll use shorthand syntax
105:06 - for the Border I would like three pixels
105:10 - solid then I'll list a color and use the
105:13 - Color Picker
105:15 - again I would like purple I don't quite
105:17 - remember what we had but it was
105:18 - something like that
105:20 - yeah that is the shorthand syntax
105:22 - you type border the Border width the
105:25 - Border style then the Border color but
105:28 - border radius is still a separate
105:29 - property
105:30 - let's add a border to our paragraph now
105:32 - we will select the P tag
105:35 - there is directional shorthand syntax if
105:38 - you want just one of the borders let's
105:40 - begin with the bottom border Dash bottom
105:44 - then we can list a border with border
105:47 - style then a color and this would only
105:49 - apply to the bottom border of our
105:51 - paragraph let's go with three pixels
105:55 - solid then red
105:58 - but I'm going to pick a more specific
105:59 - kind of red
106:01 - there we go so that is border bottom
106:03 - we're only applying a border to the
106:06 - bottom of our element then there's
106:08 - border top
106:10 - border Dash top let's go with three
106:13 - pixels
106:14 - solid again then a color
106:17 - I'll go with yellow
106:22 - there we are
106:24 - border left
106:27 - three pixels let's try dotted this time
106:32 - then orange
106:36 - that's good
106:39 - then border right border Dash right
106:44 - three pixels dotted again then I will
106:47 - pick Green
106:50 - maybe like a light green
106:52 - there we are
106:53 - then we'll set the Border radius as well
106:57 - this would apply for all of the borders
107:00 - let's try 10.
107:02 - not bad alright everybody that is how to
107:05 - create CSS borders
107:09 - hey everybody today I'm going to show
107:10 - you how we can create text shadows and
107:13 - box Shadows we'll need some sample text
107:15 - to work with I'll use an H1 element type
107:18 - in your name
107:20 - and we will need a div element
107:24 - we will eventually create a box I'll
107:26 - give this div an ID of box one
107:30 - good enough I would like to give this H1
107:33 - element a shadow I will select my H1
107:36 - element I will set the text Shadow
107:39 - property to be we need two numbers a
107:43 - horizontal offset and a vertical offset
107:46 - let's do one pixel and one pixel
107:49 - we have an offset to the right of one
107:51 - and down by one
107:53 - if I were to increase the horizontal
107:55 - offset let's change this to 2
107:59 - while the shadow is moving more to the
108:01 - right let's try five
108:03 - 10
108:06 - 50. the first number is for the
108:09 - horizontal offset let's change that to
108:12 - three
108:13 - the second number is for the vertical
108:15 - offset
108:16 - if I change that to five well the text
108:19 - is going more downwards
108:22 - 50 would be this
108:24 - all right let's keep that at three
108:25 - though
108:27 - you could add a third number for a blur
108:31 - here's a one pixel blur
108:33 - two
108:35 - three
108:37 - four
108:39 - five if this is a really large number
108:41 - like 100 you can't even see the shadow
108:43 - anymore let's stick with five that's a
108:46 - decent amount
108:47 - you can even change the color too let's
108:49 - pick a red color
108:53 - that's good you can add more than one
108:56 - Shadow within the text Shadow property
108:58 - for more than one Shadow effect each
109:01 - Shadow is comma separated so add a comma
109:03 - afterwards
109:05 - let's copy what we have paste it again
109:09 - I'm gonna give the second Shadow a
109:11 - negative offset so it's up and to the
109:13 - left
109:14 - I'll change the color so it's more
109:15 - distinct let's go with the blue color
109:19 - yeah I don't like that one
109:20 - yeah that's fine
109:22 - all right now let's cover box Shadows
109:24 - let's select our ID of box one
109:29 - I'll give this box a width of 100
109:33 - and a height of 100
109:37 - let's pick a color too
109:39 - background Dash color
109:43 - let's go with a whitish color so it's
109:46 - just barely visible
109:48 - something like that's fine
109:50 - for other elements besides text we have
109:52 - box shadow
109:55 - and really it's the same process as
109:57 - before we have a horizontal offset
110:00 - let's do three pixels
110:02 - a vertical offset let's do three pixels
110:04 - again
110:05 - a blur
110:06 - let's do five pixels
110:09 - and a color if we so choose but I'll
110:11 - keep that the same now our box has a 3D
110:14 - pop effect which is pretty sweet all
110:16 - right everybody so we have text Shadows
110:19 - for text and box Shadows for other
110:21 - elements and well everybody those are
110:23 - shadows in CSS
110:27 - hey how's it going people today I'm
110:29 - going to explain margins in CSS margins
110:33 - are the space around an element I'll
110:35 - create an H1 element type in your name
110:38 - or something that's kind of short and
110:41 - we'll need a paragraph I'll generate
110:43 - some text by typing lorem then hitting
110:45 - tab let me just zoom in a little bit to
110:48 - give you a diagram of margins I'm going
110:50 - to right click our H1 element and go to
110:53 - inspect at the bottom of my elements
110:55 - window we have this diagram it kind of
110:58 - resembles an onion because it has layers
111:00 - we have the element itself and its
111:02 - Dimensions padding border then margins
111:06 - padding is between the element itself
111:08 - and any borders margins are the area
111:11 - outside of any borders today we'll be
111:14 - working with margins the area outside of
111:16 - any elements let's close this window
111:19 - naturally there's a few pixels of margin
111:22 - around our body the letters in our H1
111:24 - element and our paragraph aren't
111:26 - directly next to the border of our
111:28 - window
111:29 - so we can eliminate that
111:31 - we will select the body element within
111:33 - our CSS style sheet we will set the
111:36 - margin to be zero pixels
111:39 - so now the letters are directly next to
111:42 - the edge of the web browser
111:44 - and if I were to expand this you can
111:46 - kind of see that
111:47 - so that's all that margin is it's the
111:49 - area outside of an element to give you
111:52 - another example let's delete our H1
111:54 - element along with our paragraph we'll
111:56 - create two div boxes
111:59 - we need two pairs of developments
112:05 - I'll create a class for each of these
112:07 - divs class
112:09 - box
112:11 - then they will each have a unique id id
112:14 - equals box one the ID for the second box
112:19 - will be box two
112:21 - and then I'll give each of these some
112:23 - text
112:25 - box one
112:27 - box two
112:30 - all right now let's style these boxes
112:33 - so after our body element let's select
112:36 - the Box class anything that's a box
112:40 - let's add a border
112:43 - 5 pixel solid is fine
112:47 - I'll change the font size to be
112:51 - 5 em
112:54 - with
112:56 - 250 pixels
112:59 - height
113:00 - 250 pixels and I'm just gonna zoom out a
113:04 - little bit until our view is at 100 let
113:07 - me color box one in box two
113:09 - we are selecting the ID of box one
113:13 - for the background color
113:15 - let's set that to be red
113:18 - but let's select a more custom red
113:20 - because it's cool
113:22 - all right then box two will be blue
113:29 - all right there are marginal directions
113:31 - we can apply margin to the top of an
113:34 - element the right the bottom or the left
113:36 - or all sides with box one I will set the
113:40 - margin top property to be 50 pixels
113:44 - that's going to add 50 pixels of margin
113:47 - at the top of this element box 1.
113:50 - there's also margin bottom
113:54 - now there's 50 pixels of margin after
113:56 - box one
113:58 - margin left
114:00 - the margins now on the left
114:02 - margin right
114:04 - the margins now on the right but you
114:06 - can't see that because divs are Block
114:08 - Level elements they take up the entire
114:10 - horizontal space
114:12 - you could apply margin to L sides evenly
114:14 - just with margin so margin 50 pixels
114:18 - that applies 50 pixels of margin to the
114:20 - top right bottom left
114:23 - so if we were to apply this margin to a
114:25 - class like the Box class both box 1 and
114:29 - box 2 will have 50 pixels of margin
114:31 - around each element
114:32 - there's also margin Auto
114:36 - it is possible to set an element's
114:37 - margin to take up the entire space I can
114:41 - take any of these elements such as box 1
114:43 - and push it all the way to the right of
114:45 - my web browser using margin left
114:48 - margin Dash left then I will set it to
114:51 - be Auto
114:53 - the margin on the left side of box 1
114:55 - will take up as much room as possible
114:58 - so vox1 is going to stick to the right
115:00 - hand side of the web browser
115:02 - margin right won't appear to do anything
115:07 - because it's already left Justified
115:09 - now if you would like an element to stay
115:11 - in the center of your web browser
115:13 - you can just set margin to be Auto
115:16 - so box one is going to stay in the
115:17 - middle of my web page
115:20 - if I were to apply this property to the
115:22 - Box class that will affect Box 2 as well
115:25 - so now box 1 and box 2 should stay in
115:28 - the middle of my web browser alright
115:30 - everybody so those are margins in simple
115:33 - terms it's the space around an element
115:35 - and that is an introduction to margins
115:38 - in CSS
115:41 - all right let's get started everybody so
115:44 - the float property the float property
115:46 - allows other elements to flow around it
115:49 - this is particularly useful with images
115:52 - and Block Level elements like div
115:54 - sections in my example I have a box
115:57 - that's made out of a div element it
115:59 - occupies the entire width of the space
116:02 - in my web browser any elements
116:04 - afterwards are kind of pushed underneath
116:06 - it is possible utilizing the float
116:09 - property to have this text wrap around
116:12 - this Block Level element and we do that
116:14 - with the float property here's what
116:16 - we're going to do for this demonstration
116:18 - you will need two images I have an image
116:21 - of a Pokeball and another one of Pikachu
116:24 - feel free to pick your own images we're
116:27 - going to insert an image an image is a
116:30 - block level element I will set the
116:32 - source equal to B the name or the
116:35 - relative file path of that image
116:38 - so mine is pokeball.png
116:42 - but I'm going to change the height so
116:45 - it's a little bit smaller
116:47 - height equals
116:49 - let's try 150.
116:51 - I'm also going to create a few
116:53 - paragraphs of text
116:56 - in vs code you can type lorem then press
116:58 - tab to generate some text I'm pretty
117:00 - sure you know that already though
117:02 - let's create four paragraphs one two
117:05 - three four
117:08 - my first image is taking up the entire
117:10 - width of my viewport all this text is
117:13 - being pushed underneath to make this
117:16 - text wrap around this image and occupy
117:19 - that space
117:20 - we will set the float property of the
117:23 - image I'm going to give this image an ID
117:25 - though ID
117:27 - image one
117:29 - IMG one for short
117:31 - within my style sheet I will select the
117:34 - ID of
117:36 - image one
117:38 - set the float property to either left or
117:41 - right we'll begin with left though
117:44 - then save everything
117:47 - all of those paragraphs are now wrapping
117:49 - around the right side of my image
117:51 - because we're floating left
117:53 - I'll add a little bit of margin though
117:55 - on the right hand side
117:58 - margin right I think 10 pixels is fine
118:02 - and that looks pretty good
118:04 - you can also float an image to the right
118:06 - let's change float to be right and now
118:10 - the image is on the right hand side
118:12 - if I were to adjust the size of my
118:14 - window the text just flows around the
118:17 - image
118:18 - which looks pretty nice
118:20 - all right let's change that back to left
118:23 - let's create a second image
118:26 - we'll place the image between the second
118:28 - and third paragraphs
118:30 - so my second image is pikachu.png
118:35 - pikachu.png
118:37 - the height will be the same
118:39 - I'll give this image an ID of image two
118:43 - this image isn't floating
118:45 - again the text is not wrapping around
118:48 - the image
118:49 - let's take image two
118:53 - we will float this image to the right
118:59 - I'll add some margin to the left as well
119:00 - margin Dash left
119:03 - let's do 10 pixels
119:06 - yeah there we go that looks pretty good
119:07 - basically speaking the float property
119:10 - allows other elements to flow around it
119:12 - now there is one thing I want to show
119:14 - you I'll add a border around the body of
119:17 - our document
119:19 - let's select our body element
119:22 - I will create a border that is three
119:25 - pixel solid
119:28 - now check this out
119:31 - with my second image it's overflowing
119:34 - outside of the container that it's in
119:36 - the body of my document there is one
119:39 - change we can make to our container our
119:42 - body with our container I will set the
119:44 - display property to be
119:47 - low Dash root
119:50 - now anything that's floating will stay
119:52 - within the container it's not going to
119:54 - overflow
119:56 - Pikachu is still within the Box
119:58 - alright everybody in conclusion the
120:00 - float property allows other elements to
120:02 - flow around it and that is the float
120:04 - property in CSS
120:08 - hey what's going on everybody today I'm
120:10 - going to explain the Overflow property
120:12 - in CSS the Overflow property sets the
120:16 - defined behavior when content does not
120:19 - fit in the parent element box meaning it
120:22 - overflows there's five states visible
120:25 - hidden clip scroll and Auto
120:28 - here's an example
120:30 - let's create a div element
120:33 - then within this development I'll create
120:36 - a paragraph
120:40 - I'll generate some text
120:43 - then going to our style sheet I'll take
120:45 - our div then give the stiff a border
120:50 - of 2 pixel solid
120:53 - I'll also limit the height
120:56 - height
120:57 - 75 pixels
120:59 - now we have a problem the content of our
121:02 - paragraph
121:04 - is overflowing out of our div
121:08 - we have a couple different ways of
121:09 - handling this with the Overflow property
121:13 - by default
121:15 - overflow is set to visible there is
121:17 - going to be no apparent change
121:19 - basically we're stating if any Inner
121:21 - Elements will overflow allow it to do so
121:24 - that's why you see this text overflow
121:27 - out of our box
121:28 - our second state is hidden
121:31 - with hidden any content that will
121:34 - overflow outside of our box will be
121:36 - hidden we can no longer see it however
121:38 - we can still interact with it for
121:40 - example if I were to copy and paste all
121:43 - of this text
121:48 - well we still have the full text
121:50 - available
121:52 - now clip clip is very similar to Hidden
121:55 - there's no apparent change
121:57 - with overflow set to clip it's used in
122:00 - tandem with the Overflow clip margin
122:04 - property
122:06 - using this property we can set how far
122:09 - this content displays or overflows
122:11 - outside of the box
122:14 - if I were to set overflow to be 13
122:16 - pixels this content will overflow by
122:20 - this amount 13 pixels then the rest is
122:23 - hidden it's very similar to Hidden but
122:25 - it's used alongside overflow clip margin
122:29 - then we have scroll
122:32 - with scroll our box contains a scroll
122:34 - bar both vertical and horizontal we can
122:38 - use the scroll bar to see the entire
122:39 - length of our content if there's not
122:42 - enough content within this container for
122:44 - example I'll delete most of these words
122:51 - well we still have that scroll bar
122:53 - although it's disabled
122:55 - if you set overflow to auto
122:59 - if you don't need the scroll bar either
123:01 - horizontal or vertical it won't be
123:04 - displayed until you do need it so let me
123:07 - undo these changes
123:09 - now that scroll bar is displayed
123:12 - that's the use of overflow Auto
123:15 - all right everybody so that's the
123:16 - Overflow property it sets the behavior
123:19 - for a parent element when the content
123:21 - doesn't quite fit you can set this
123:22 - property to be visible hidden clip
123:24 - scroll or Auto and that is the Overflow
123:27 - property in CSS
123:31 - hey what's going on everybody today I'm
123:33 - going to explain the display property in
123:35 - HTML and CSS now HTML elements they have
123:38 - a default display value they're either
123:40 - Block Level or inline an element that is
123:43 - Block Level starts on a new line and
123:46 - takes up the entire width available
123:48 - inline elements do not start on a new
123:50 - line the width of that element is
123:52 - limited to what is needed a few examples
123:54 - of Block Level elements would include
123:56 - but are not limited to header elements
123:59 - developments paragraph elements form
124:01 - elements header elements and footer
124:03 - elements inline elements include but yet
124:05 - again are not limited to span elements
124:08 - anchor elements and image Elements by
124:10 - utilizing the display property we can
124:13 - specify if and how an element is
124:16 - displayed we can set an element to be a
124:18 - block level inline inline block or not
124:22 - displayed at all here's a few examples
124:25 - we'll create a development
124:28 - with the inner text being div
124:30 - and a span element
124:33 - with the inner text being span
124:36 - let me zoom in a little let's go to our
124:39 - style sheet for my development I will
124:41 - set the background color to be red
124:45 - do
124:46 - for my span element I will set the
124:49 - background color to be blue
124:53 - that's good div is a block level element
124:55 - it's going to take up the entire width
124:57 - available span isn't it only takes up
125:00 - the necessary space needed to display
125:01 - that element even if I were to extend
125:03 - the width of the browser
125:06 - my div element takes up the entire width
125:09 - my span element stays the same because
125:11 - it's in line we can apply a width and a
125:14 - height to a block level element like
125:16 - this
125:16 - width will be 100
125:19 - height will be 100. however for an
125:22 - inline element the width and height
125:23 - wouldn't apply you can see that our span
125:25 - element stays the same size by utilizing
125:28 - the display property we can change the
125:31 - behavior of these elements how they're
125:33 - displayed if I set my div element to be
125:35 - block
125:37 - well it already is a block level element
125:38 - there's no change if I set my span
125:41 - element to display as a block level
125:44 - element
125:45 - well then we can apply a width and
125:46 - height these two elements are displayed
125:48 - as a block
125:50 - all of this extra white space is
125:52 - allocated for each of these elements
125:53 - their Block Level if I were to create a
125:56 - paragraph let me shrink this a little
125:57 - bit
125:58 - I'll create some sample text I'll type
126:01 - lorem then hit tab these are not within
126:04 - paragraph tags just so you know all of
126:06 - the space is reserved for my Block Level
126:08 - elements that's important later now
126:11 - let's go back to our style sheet if I
126:13 - change the display property to be in
126:14 - line
126:15 - guess what's going to happen
126:18 - well both of these elements are in line
126:20 - now we can't apply width or height
126:22 - properties to these elements they only
126:24 - take up as much room as necessary all
126:26 - other content is displayed in line with
126:29 - them then there's inline block
126:32 - it's much like inline but we can also
126:34 - apply a width and a height
126:36 - these two elements are no longer taking
126:39 - up the entire width of my viewport if I
126:41 - were to increase the size of my window
126:44 - we can display content in line with
126:47 - these inline blocks you can see that the
126:49 - text is lined up
126:51 - then there's none
126:53 - will effectively erase that element
126:58 - as if it's gone
126:59 - if I revert these displays to inline
127:02 - block there's also the visibility
127:04 - property which is fairly similar to
127:06 - display if I set visibility to be hidden
127:10 - with our div element this element is
127:13 - hidden but it's still taking up space as
127:15 - if it was still there it's kind of like
127:17 - it's invisible
127:18 - whereas in if display was set to none
127:21 - it's as if it no longer exists the next
127:23 - element will take its place
127:25 - all right everybody that is an
127:27 - introduction to the display property we
127:29 - can display elements as a block inline
127:32 - inline block none or by utilizing the
127:36 - visibility property we can hide them and
127:38 - that is an introduction to the display
127:39 - property in CSS
127:43 - hey what's going on everybody today I'm
127:45 - going to give you an introduction to the
127:47 - width and height properties in CSS all
127:50 - right let's begin everybody we will
127:51 - Begin by creating two div elements and
127:54 - each development will have a class
127:56 - of box
127:58 - within our first box let's create an H2
128:01 - header with the text of this is number
128:03 - one
128:05 - and we'll create a paragraph underneath
128:07 - to generate some text in vs code you can
128:09 - type lorem then hit tab
128:11 - all right let's copy our div paste it
128:15 - change number one to number two and
128:17 - that's where we're at
128:19 - So within our style sheet we can set a
128:21 - height and a width for an element an ID
128:24 - or a class so let's take our box class
128:27 - dot box I'll add a border
128:31 - border 2 pixel solid just so that it's
128:33 - easier to see
128:35 - here we are okay normally with the
128:37 - height
128:38 - by default it's Auto we don't need to
128:41 - explicitly state that you can see that
128:43 - there's no apparent change when I reload
128:45 - the page
128:46 - so the height is going to be calculated
128:48 - automatically when we render our web
128:50 - page but you can set an explicit height
128:52 - for example 100 pixels
128:56 - that's a little too small our content is
128:58 - kind of overlapping let's change that to
129:00 - 200. now it's a little too big but it is
129:03 - possible to set a fixed height so let's
129:06 - set height back to auto
129:08 - now we will change the width so with the
129:11 - width we can set a number of pixels for
129:13 - example 100
129:15 - we would have two very long skinny
129:17 - columns and they're right on top of each
129:19 - other that's because divs are Block
129:21 - Level elements we'll Reserve this entire
129:23 - space for each of these developments
129:25 - because they're Block Level so let's
129:27 - change the width to 200 and see what
129:29 - happens now they're more of a box shape
129:31 - if I set width to be Auto the width will
129:35 - be calculated automatically and like I
129:37 - said that's the default these Block
129:39 - Level elements want to take up as much
129:41 - width as possible kind of like your mom
129:43 - if I changed width to be 50 the width of
129:46 - this element will take up 50 percent the
129:48 - width of our viewport but we're still
129:50 - allocating all the space for each
129:52 - development because they're Block Level
129:53 - if I were to use the float property
129:57 - let's float to the left the reason that
130:00 - these elements aren't floating there's
130:02 - still not enough space to place Box 2
130:04 - next to box one because we have our
130:06 - border our border takes up two pixels if
130:09 - I were to remove the Border they should
130:11 - display back to back which they do
130:14 - you do have to take in the width of the
130:15 - Border when calculating the width the
130:18 - same thing applies with padding
130:19 - let's apply a little bit of padding
130:22 - padding 25 pixels
130:25 - now we have 25 pixels worth of padding
130:28 - between our content and the Border I
130:31 - mean it looks nice right when
130:33 - calculating the height or the width we
130:35 - can disregard any padding
130:37 - or any borders but we have to add this
130:40 - property
130:41 - we'll add box Dash
130:43 - sizing
130:45 - border Dash box
130:49 - when we calculate the height or the
130:51 - width we're allocating disregard any
130:53 - padding or any borders the Box sizing
130:56 - property will take that into
130:57 - consideration we can now fit these
130:59 - elements right next to each other the
131:00 - width of each box is 50 and they both
131:03 - have borders and padding what you also
131:06 - might see with box sizing is that what
131:08 - some people like to do they'll use an
131:11 - asterisk as a selector that means all
131:12 - elements and then they'll apply the Box
131:15 - sizing property to all elements
131:18 - because well it can be kind of annoying
131:20 - to calculate width and Heights while
131:22 - factoring in padding in borders as well
131:24 - all right now if we were to float right
131:27 - box one is on the right Box 2 is on the
131:30 - left let's undo that you can set a
131:33 - minimum height and a minimum width as
131:35 - well
131:36 - so with our two boxes let's get rid of
131:38 - our paragraphs
131:44 - I'm going to text align Center just to
131:48 - Center our text this is number one this
131:50 - is number two
131:52 - if I were to set the max width to let's
131:56 - say 25 percent
131:59 - even though we stated the width should
132:01 - be 50 the max width is going to cap that
132:04 - out at 25 you can see that the sizes of
132:07 - this box have shrunk
132:09 - or maybe if I set a minimum width
132:12 - of 75 percent
132:17 - we're saying that each of these boxes
132:19 - should be at least 75 percent even
132:22 - though before we declared them to be 50
132:23 - percent
132:24 - you also have Max height and Min height
132:28 - there's really going to be no change
132:29 - between the two since the height of our
132:31 - web page starts at the top here and ends
132:33 - right here we're not using all the space
132:35 - down below so what I propose is that
132:38 - let's place our boxes within a container
132:40 - we'll create another div
132:44 - with a class
132:46 - of container to contain our boxes
132:50 - let's take our two boxes
132:52 - and place them within this development
132:55 - so with my container
132:58 - the container class
133:02 - with our container let's change the
133:04 - background color
133:06 - to something great just so it's easier
133:08 - to see
133:12 - we can't see our container because our
133:14 - boxes are taking up all the space
133:16 - with our container if we need to take up
133:18 - the entire height of our web browser
133:21 - we can set the height to be 100 VH
133:25 - meaning viewport height
133:27 - so now our container is taking up 100 of
133:30 - the height available
133:32 - if I were to zoom out the container is
133:35 - still taking up all that space
133:37 - so with our boxes let's change the
133:39 - background color because I can't really
133:41 - see them that well anymore
133:42 - for the background let's change that to
133:44 - be white
133:46 - I'm going to zoom out to 100
133:48 - with my minimum height property I will
133:51 - set the minimum height of our boxes to
133:54 - be 50 percent
133:55 - now they take up 50 of the space
133:57 - available which is one hundred percent
134:00 - our viewport height
134:01 - if I were to change the minimum height
134:03 - to be 100 we take up the entire space
134:06 - available
134:07 - or I could set the max height to be 50
134:09 - percent
134:11 - even though we set max height to be 50
134:13 - we don't necessarily need all this space
134:16 - because there's not enough content if I
134:18 - absolutely need these boxes to take up
134:21 - at least 50 percent of the height of my
134:23 - window I would use minimum height
134:25 - instead of maximum height so really it's
134:28 - up to you alright everybody so that is
134:30 - an introduction to the height and width
134:32 - properties in CSS
134:36 - hey everybody so today I'm going to
134:38 - explain the position property in CSS
134:41 - there's five possible values relative
134:44 - fixed absolute sticky and static let's
134:48 - begin by creating a div section
134:51 - I'll give this div an ID of box one
134:55 - within my style sheet we will select the
134:58 - ID of box one
135:00 - I'll set the width to be 200 200 pixels
135:05 - height to be 200 pixels as well
135:09 - and a background color background Dash
135:11 - color let's go with the blue color we
135:13 - haven't picked blue for a while
135:18 - that's pretty good all right the
135:21 - position property
135:22 - with a position set to relative
135:27 - relative positions and element relative
135:29 - to where it normally should be
135:32 - with our position property set to
135:34 - relative we can move this element to the
135:36 - right to the left upwards or downwards
135:39 - we do have the properties of top bottom
135:42 - left right to push this element down
135:44 - relative to where it normally is I can
135:47 - set top to some value
135:49 - we can do that in pixels if I set top to
135:52 - be 100 pixels this element will be
135:55 - pushed downwards by 100 pixels relative
135:59 - to where it normally is in the top left
136:01 - corner another property is left I will
136:04 - push this element to the right by 100
136:07 - pixels by setting left to be 100. so now
136:11 - this element is pushed to the right by
136:13 - 100 relative to where it normally is
136:16 - it's down and to the right by 100 pixels
136:19 - negative 100 would move this element up
136:23 - left set to negative 100 would move the
136:25 - element to the left
136:28 - it's kind of backwards this element is
136:31 - positioned relative to where it normally
136:33 - should be
136:35 - then we have fixed with fixed an element
136:38 - is positioned relative to the viewport
136:40 - meaning the web browser for this example
136:43 - we're going to need a whole lot of
136:45 - paragraphs like 20 of them
136:47 - I'll type lorem hit tab to generate some
136:50 - text
136:50 - copy this line and paste it like 20
136:53 - times
136:59 - all right that's good enough
137:02 - let's get rid of these properties I will
137:05 - set the position to be fixed
137:08 - this element is now fixed within the
137:10 - viewport it's stuck in the top left
137:12 - corner if I were to scroll down this
137:15 - element is still in the top left corner
137:16 - of my web browser
137:18 - this element can be fixed to the right
137:21 - by setting the right property to be zero
137:24 - pixels
137:25 - zero works as well
137:28 - so now this element is in the top right
137:30 - corner
137:32 - with the bottom property if I were to
137:35 - set that to be zero pixels well now this
137:38 - element is in the bottom right corner
137:39 - this might be good for an advertisement
137:41 - if you had a banner
137:43 - for the bottom left corner that's left
137:45 - zero bottom zero
137:47 - that is the fixed position this element
137:50 - is fixed in my viewport my web browser
137:54 - then we have absolute with absolute an
137:57 - element is positioned relative to its
137:59 - nearest ancestor
138:01 - think of an ancestor as a containing
138:04 - class
138:04 - within box one we'll create box two
138:10 - change the ID to box two
138:13 - with box one let's set box one to be
138:16 - relative then get rid of these
138:18 - properties
138:19 - we'll create box two by copying box one
138:23 - change the ID to box two the width will
138:27 - be 100 the height will be 100 but we'll
138:30 - pick a different color something red is
138:31 - good
138:33 - the position for Box 2 will be absolute
138:38 - since Box 2 is contained within box 1
138:41 - box 1 is its nearest ancestor
138:45 - if I were to move box 1 Box 2 is still
138:48 - going to stay in the top left corner of
138:50 - box one let me demonstrate
138:53 - I'll set the top property to be 100
138:56 - pixels
138:59 - then left to be 100 pixels as well
139:03 - so even though we're moving box 1 Box 2
139:06 - it's positioned absolutely it's still
139:09 - going to stay within its container let's
139:10 - try and put Box 2 right in the middle of
139:12 - box one
139:14 - I will set the top property to be 50
139:18 - pixels
139:20 - and the left property to be 50 as well
139:24 - now Box 2 is right in the middle of box
139:26 - one we can move box one anywhere let's
139:29 - set the position of box 1 to be fixed
139:33 - so Box 2 is still going to stay right in
139:36 - the middle of box one no matter where it
139:38 - is
139:39 - so that is the absolute position an
139:42 - element is positioned relative to its
139:44 - nearest ancestor
139:46 - then they're sticky a sticky element is
139:49 - positioned based on the current scroll
139:51 - position meaning our scroll bar so to
139:53 - say
139:54 - with box one box one will be sticky
139:58 - let's set top to be zero pixels what
140:01 - happens now is that when I scroll down
140:03 - our web browser is going to catch this
140:06 - element
140:09 - sticky is kind of similar to fixed with
140:13 - sticky we reserve some space for the
140:15 - original element
140:16 - if I were to change that to fixed
140:19 - this element is just basically stuck to
140:22 - the top of my viewport
140:24 - with sticky it's going to be in the same
140:26 - place until we scroll past it
140:30 - alright then lastly their static static
140:33 - is the default position for an element
140:36 - in the future we will have the
140:37 - capability of changing these positions
140:39 - dynamically to set a position to the
140:42 - default which is static you just change
140:43 - it
140:45 - so those are the five position types
140:47 - relative fixed absolute sticky and
140:49 - static we'll have more practice with
140:51 - this in the future so don't worry this
140:53 - was more or less just an introduction
140:55 - and those are CSS positions
141:00 - hey how's it going everybody today I'm
141:01 - going to show you how we can include a
141:03 - background image using CSS so sit back
141:06 - relax and enjoy the show all right let's
141:08 - get started everybody what you'll need
141:10 - to begin with is a high resolution
141:12 - picture for a background I just so
141:15 - happen to find a picture of Central Park
141:16 - in New York City the higher the
141:18 - resolution the better so place that
141:20 - image within your website folder in our
141:22 - HTML document let's create a title
141:26 - I'm just going to say the word hello
141:30 - and we'll need some text just as a point
141:33 - of reference
141:34 - I'll generate some text by typing lorem
141:37 - then hitting Tab and that's good enough
141:39 - for now so within our style sheet I will
141:42 - select the body of our document we are
141:45 - going to include that background image
141:48 - with the background image property
141:50 - then we need a URL
141:53 - the URL is going to be a relative file
141:55 - path or an absolute file path to where
141:58 - this image is located they're right next
142:00 - to each other I just need the file name
142:02 - so my image name is background and this
142:06 - is a jpeg
142:09 - alright so here's my image so far it's
142:11 - gigantic it's huge let me show you what
142:13 - happens if I use a smaller version of
142:16 - the same image
142:17 - this image I think is like 500 pixels
142:20 - for the width or so
142:21 - background Dash small
142:25 - so here's my image
142:27 - but it repeats itself
142:29 - there is a background repeat property
142:32 - So within the body of my document
142:35 - I will set the background Dash repeat
142:38 - property to be no
142:41 - repeat now this image isn't repeating
142:44 - we're headed in the right direction
142:47 - what we'll do now is take this image and
142:50 - Center it in the middle of my viewport
142:54 - take the background Dash position
142:58 - property and set that to Center
143:03 - it's centered horizontally
143:05 - another property we'll need is
143:07 - background attachment
143:12 - background Dash attachment
143:16 - I think I misspelled attachment there we
143:19 - are the background attachment property
143:21 - sets whether a background image scrolls
143:24 - with the rest of the page or is it fixed
143:26 - we will set the image to be fixed
143:29 - now this image is in the middle of my
143:32 - viewport
143:35 - see even if I were to expand and
143:36 - contract it
143:38 - it's still within the middle
143:40 - lastly we need this image to take up the
143:43 - entire space of the background
143:47 - and there's one last property
143:49 - background Dash size we will set that to
143:54 - cover
143:55 - now this image is taking up the entire
143:57 - space of my background which is what I
143:59 - wanted I'm going to use that high
144:02 - resolution picture that I used
144:03 - previously
144:07 - that's much better
144:09 - all right everybody so that's how to add
144:11 - a background image using CSS
144:15 - hey what's going on everybody today
144:17 - we're going to discuss combinators in
144:19 - CSS combinators explain the relationship
144:22 - between listed selectors there's four
144:25 - we'll discuss today descendants which is
144:27 - just a space a child which is a right
144:30 - angle bracket a tilde which is a general
144:33 - sibling and plus which is for adjacent
144:36 - siblings you would type something like
144:38 - this
144:39 - you'll have selector one
144:41 - a combinator for example the child
144:43 - combinator then another selector
144:46 - if I said div
144:49 - child combinator
144:50 - then p
144:52 - we're applying CSS properties to any
144:55 - paragraph elements found within the
144:57 - stiff section
144:59 - what we'll do in this example is create
145:01 - a div section
145:05 - I will give this div an ID of container
145:11 - we'll create a few paragraphs
145:15 - for paragraph one let's say this is
145:18 - number one
145:20 - we'll create another paragraph
145:23 - then we'll create an inner div section
145:27 - this div section will not have an ID
145:30 - but within this inner div section we'll
145:32 - have another paragraph This is number
145:35 - three
145:36 - outside of our div with an ID of
145:38 - container we'll create two more
145:40 - paragraphs this is number four
145:43 - this is number five
145:45 - that's all we'll need for now
145:48 - just to make it a little more clear that
145:49 - this is a div section I'll take our
145:52 - container
145:54 - then give it a border border two pixels
145:58 - solid
146:01 - paragraphs one two and three are within
146:03 - a div section four and five are not
146:06 - I would like to highlight all paragraphs
146:08 - within my ID of container
146:11 - I will take my ID of container
146:15 - then I will use the descendant
146:17 - combinator which is an empty space then
146:20 - list another selector I'm going to
146:22 - highlight all paragraphs within my div
146:24 - section that would be my div section
146:27 - space then what am I applying CSS
146:30 - properties to my paragraphs
146:33 - let's take the background color and set
146:37 - that to be yellow
146:40 - something like that's fine
146:42 - all paragraph descendants of our
146:45 - container change the background color to
146:47 - Yellow
146:48 - that is The Descendant combinator it's
146:51 - just an empty space
146:53 - then you have children children is a
146:56 - right angle bracket
146:59 - highlight any paragraph children of our
147:02 - container class only one and two are
147:05 - highlighted
147:06 - that's because three is not technically
147:09 - a child it's a descendant
147:12 - think of it like a grandchild in this
147:13 - case
147:14 - paragraphs one and two are direct
147:16 - children of our container
147:18 - but our third paragraph is One More
147:20 - Level deep because it's wrapped within
147:23 - another div section it's a descendant
147:25 - but not a child all children are
147:28 - descendants but not all descendants are
147:30 - children that would apply to number
147:32 - three that's why only one and two are
147:34 - highlighted that is the child combinator
147:38 - then we have General sibling which is
147:41 - represented with a tilde
147:44 - take any paragraphs that are General
147:47 - siblings of our container that would
147:50 - highlight four and five
147:52 - paragraphs four and five are both
147:55 - siblings to our container
147:57 - they're both considered Children of the
148:00 - body of my document therefore their
148:02 - siblings like brothers and sisters
148:05 - but if I were to wrap these two
148:07 - paragraphs within a div section
148:14 - well now they're no longer siblings
148:16 - the stiff section is now a sibling to
148:20 - this first div section think of it this
148:22 - way paragraphs four and five are nieces
148:24 - and nephews to the First Development
148:28 - all right let's reverse that then we
148:30 - have adjacent siblings
148:33 - using a plus sign
148:35 - we will select only adjacent siblings
148:39 - four is selected but not five
148:42 - the adjacent sibling is the next direct
148:45 - sibling but not all siblings
148:48 - that's why four is selected and not five
148:50 - but if I change their positions around
148:54 - 5 is now selected
148:57 - alright everybody so those are
148:58 - combinators they explain the
149:00 - relationship between listed selectors
149:02 - you have descendant child General
149:05 - sibling and adjacent sibling and those
149:08 - are combinators in CSS
149:12 - hey how's it going everybody today I'm
149:13 - going to explain pseudo classes pseudo
149:16 - classes are keywords added to a selector
149:18 - they modify the behavior of an element
149:21 - when they're in a certain state for
149:23 - example I have a button when I hover my
149:25 - cursor over the button I set this button
149:28 - to increase in font size and also change
149:30 - the background color to Green
149:33 - hover is an example of a pseudo class it
149:35 - modifies our buttons Behavior active is
149:38 - when an item is currently selected so
149:40 - with my mouse I'm going to left-click
149:42 - the mouse button and hold it the button
149:44 - is now red basically they modify a
149:46 - special state of an element so let's
149:49 - begin with a few examples let's go to
149:51 - our index file and we will create a
149:54 - hyperlink
149:55 - I will set the href attribute to be I
149:57 - don't know Google or something
149:59 - https
150:01 - colon to forward slashes google.com
150:06 - be sure to close it I'll type the word
150:08 - Google here is my hyperlink to Google a
150:12 - link is also a pseudo class I will
150:15 - select any anchor tags that we have we
150:17 - have one I'll set the link pseudo class
150:20 - to have these CSS properties so a colon
150:25 - then the name of the pseudo class
150:27 - instead of this text being blue let's
150:29 - set it to be like a light blue I will
150:33 - set the color property to be a light
150:35 - blue color let's pick one
150:41 - yeah
150:43 - that's pretty good when I hover my
150:45 - cursor over this link I want the color
150:47 - to change we are selecting any anchor
150:50 - tags colon then we will use the hover
150:54 - pseudo class
150:55 - and I will change the color you know
150:57 - what let's use what we currently have
150:59 - I'll just make it a little brighter
151:04 - now when I hover over this link the
151:06 - color changes I'll increase the font
151:08 - size too
151:10 - it's kind of like we're zooming in on
151:11 - this element
151:12 - let's do 1.1 em
151:16 - so the font size increases slightly
151:18 - active kicks in when you're holding down
151:20 - the cursor over an element a colon
151:23 - active
151:25 - let's change the font size to be 1.1 em
151:30 - again
151:32 - I will set the color to be let's go with
151:35 - the dark blue color
151:41 - when I left click on the mouse and hold
151:43 - it this link is now in the active state
151:48 - if a link is visited by default it's
151:50 - purple let's change that a colon visited
151:55 - when our anchor element is in the
151:57 - visited state I'll change the font color
152:02 - how about a gray color
152:07 - there
152:09 - all right so those are a few basic
152:11 - pseudo classes
152:12 - in this next example we'll need a list
152:14 - an unordered list
152:19 - we will need 10 list item elements
152:26 - this is number okay let's copy this
152:30 - paste it nine times
152:35 - one two three four five six seven eight
152:40 - nine
152:41 - now we will select any list items and
152:44 - use the hover pseudo class when I hover
152:47 - over one of these list items I will
152:49 - change the background color of that list
152:51 - item to be a highlighter yellow color
152:55 - I will change the background color to be
152:59 - yellow
153:02 - let's go with that
153:05 - so check this out when I hover over a
153:07 - list item the background color changes
153:11 - there's also the not pseudo class
153:16 - we can select anything that is not being
153:19 - hovered over
153:22 - not kind of does the opposite anything
153:24 - that is not in this state anything
153:26 - that's not being hovered over
153:28 - let's set the color to be like a gray
153:31 - color
153:32 - anything that's not currently being
153:34 - hovered over is gray but when it is
153:37 - hovered over it's yellow
153:39 - so that is the not pseudo class anything
153:42 - that is not in this state will have
153:45 - these CSS properties
153:48 - then we have the nth child pseudo class
153:51 - list item colon
153:53 - and
153:54 - child parentheses
153:57 - anything that's selected let's set to be
154:00 - yellow
154:06 - depending on what value you put within
154:08 - the parentheses that element will be
154:10 - selected one corresponds to the first
154:13 - element
154:14 - two is for the second
154:16 - three is for the third nine is for the
154:19 - ninth element for all odd number
154:21 - elements type odd for all even elements
154:24 - type even
154:26 - for every third element that would be 3n
154:30 - 369 for every fourth that would be 4N
154:35 - you can add an offset too normally with
154:37 - 3n that's every third
154:39 - but if I want to start at the beginning
154:40 - I can add plus one
154:43 - four seven
154:45 - or even plus two two five eight it's
154:48 - kind of like a formula this is really
154:50 - handy with JavaScript because you can
154:52 - place a variable within here the value
154:54 - of that variable can change which is
154:56 - pretty cool all right last example
154:59 - let's create a development
155:03 - with an ID of greeting
155:09 - the text will be hover here
155:13 - within our development let's create a
155:15 - paragraph element
155:18 - with some text of hello
155:21 - normally I want this Hello message to be
155:23 - hidden until we hover over this element
155:25 - our div element
155:27 - I'm going to style
155:30 - our greetings
155:32 - P element
155:35 - I'll set the background color to be
155:39 - maybe a blue this time
155:42 - like the light blue
155:47 - I'll add a little bit of padding too
155:49 - maybe 10 pixels
155:53 - to make this element invisible I can set
155:56 - the display property to be none
156:01 - what I would like to do when I hover
156:02 - over the settlement I want this element
156:05 - to be displayed we are selecting our
156:09 - greeting
156:10 - then when we hover over it
156:13 - I want the P element of this div section
156:17 - to have the display property of block
156:20 - display it as a block level element
156:23 - when we hover over this element it
156:26 - displays the P element within our div
156:28 - section
156:29 - this will come really handy when we
156:31 - create drop down menus those are pseudo
156:34 - classes elements can have special States
156:36 - like when they're being hovered over or
156:38 - you click on them using these pseudo
156:40 - classes we can apply CSS properties to
156:42 - those elements when we interact with
156:44 - them and those are pseudo classes and
156:47 - CSS
156:49 - hey what's going on everybody today I'm
156:51 - going to explain pseudo elements in CSS
156:54 - pseudo elements are keywords added after
156:57 - a selector that are used to style a
157:00 - specific part of an element you have a
157:02 - selector for example H1 then two colons
157:05 - then a pseudo element one you might see
157:08 - is first Dash letter
157:11 - we can add some CSS properties and style
157:13 - the first letter of our H1 element
157:15 - that's the formula selector two columns
157:19 - pseudo element let's begin
157:21 - in this example we will need an H1
157:23 - element
157:25 - why don't you go ahead and type in the
157:27 - word hello or something I really don't
157:29 - care and we will need a paragraph
157:33 - to generate some text you can type lorem
157:36 - then hit tab
157:38 - and a list
157:40 - let's create an unordered list
157:44 - with an ID of fruit
157:49 - we'll have three list items
157:56 - the first list item will be apple
157:59 - second will be orange third banana
158:03 - let's give each of these list items a
158:05 - unique ID as well ID will be apple
158:11 - Orange
158:13 - then banana
158:16 - all right that is good enough for now
158:18 - let's head to our style sheet
158:22 - we will use the first letter pseudo
158:24 - element to change the first letter in
158:26 - our H1 element
158:28 - we have our selector H1 two colons then
158:31 - a pseudo element
158:33 - first letter is one
158:35 - what would we like to do with the first
158:37 - letter
158:38 - let's set the font size to be 2 em
158:42 - basically that's 200 percent
158:45 - the H in hello is larger now
158:48 - and I will set the font style to be
158:51 - italic
158:54 - that is the first letter pseudo element
158:57 - let's select our paragraph paragraph two
159:00 - colons
159:01 - we can apply CSS properties to the first
159:04 - line of some text
159:06 - first dash line what would we like to do
159:09 - let's change the background color
159:11 - background Dash color I'll pick a yellow
159:14 - color
159:16 - something like that's fine
159:20 - all right so the first line is now a
159:22 - highlighter yellow color
159:24 - if I change the size of the window
159:26 - the first line is still going to have
159:28 - that background color
159:30 - than the selection pseudo class is
159:32 - anything that's currently selected with
159:34 - our Mouse
159:35 - we're selecting our paragraph element
159:37 - two colons then we will use the
159:40 - selection pseudo element
159:42 - anything that's selected with our Mouse
159:44 - normally the text is white and the
159:46 - background is blue let's change that
159:49 - let's set the color to be white well I
159:52 - guess that's the same and the background
159:54 - color
159:56 - to be
159:58 - let's go with the dark grayish color
160:04 - no better yet let's make the color green
160:06 - for the text
160:08 - yeah that's kind of cool
160:11 - so anything that's selected will have a
160:14 - font color that's green and a background
160:16 - color that's dark gray
160:18 - now let's go to our list
160:20 - the list had an ID a fruit then I would
160:24 - like to select any list items with any
160:27 - list item we will use the before pseudo
160:29 - element
160:31 - we can add something before each list
160:33 - item
160:34 - I'll add a check mark emoji we can do
160:37 - that with the content property
160:40 - then within a set of quotes I can select
160:43 - an emoji so if you're on Windows you can
160:45 - hold the Windows button then semicolon
160:48 - and there's a prompt for an emoji
160:51 - I will find a check mark that looks good
160:55 - now before any list item add a check
160:57 - mark
160:59 - which we have
161:00 - there's also the after pseudo element we
161:03 - have a list item with an ID of Apple
161:06 - after after this selector
161:10 - let's add some content
161:13 - I will add an emoji of an apple
161:16 - Apple
161:17 - there we are
161:19 - let's do this with orange and banana as
161:21 - well
161:24 - Apple
161:26 - Orange
161:27 - banana
161:29 - let's change these emojis Orange
161:36 - then banana
161:41 - those are the before and after pseudo
161:43 - elements before or after some element we
161:46 - can add or change some content
161:48 - now with the list item you can change
161:50 - the marker
161:51 - for an unordered list the default is a
161:54 - bullet point but let's change that
161:56 - with our unordered list of fruit
162:01 - let's select any list items
162:03 - and use the marker pseudo element
162:07 - let's change the marker to be a check
162:09 - mark
162:10 - but I'll delete what we have with the
162:12 - before pseudo element
162:14 - I will also change the color of this
162:16 - check mark to be green
162:21 - pretty cool
162:24 - let's make it a little bit bigger too
162:26 - font size 1.2 em
162:29 - there all right everybody so those are
162:32 - pseudo elements you have a selector two
162:34 - colons then a pseudo element which can
162:37 - add specific CSS properties to that
162:39 - selector and those are a few pseudo
162:42 - elements and CSS
162:46 - hey everybody today I need to explain
162:47 - pagination in HTML and CSS pagination is
162:51 - the method by which a document is
162:53 - separated into pages and numbers are
162:55 - given using pagination on a website we
162:58 - can move between Pages easily it's kind
163:00 - of like you're reading a book each page
163:01 - has a number pagination might also be
163:04 - useful on your web page if you need to
163:05 - limit the results maybe you only want so
163:07 - many results per page then you can
163:10 - easily navigate between the pages
163:11 - there's many different uses so let's
163:13 - begin we'll start with our index file I
163:17 - will create an H1 element
163:19 - with the title of this is page number
163:22 - one
163:23 - then we'll create some sample text
163:28 - within a paragraph element I'll type
163:29 - lorem then hit tab to generate some text
163:32 - usually with pagination it's found at
163:35 - the bottom of a web page so that's a
163:37 - good place for it right here
163:39 - there's many different ways in which we
163:40 - can create pagination but using only
163:43 - what we know so far that I've covered in
163:44 - this series here's one way we'll create
163:47 - a development
163:48 - with a class of pagination
163:52 - then be sure to close it
163:55 - within this development we'll create
163:58 - several hyperlinks
164:00 - we'll need an a tag I'll set the href
164:03 - attribute just to be empty for now and
164:05 - then we'll close it
164:07 - for this example let's create a total of
164:09 - seven links we have one two three four
164:13 - five six seven
164:15 - beginning with the second link that will
164:17 - be one then two three four five
164:22 - for my first link I'll use a left angle
164:24 - bracket this is so we can navigate
164:26 - backwards depending on what page we're
164:28 - on and with the last link I'll use a
164:30 - right angle bracket so we can navigate
164:32 - forwards
164:34 - we'll revisit this page let's head to
164:36 - our style sheet
164:38 - the first thing I'm going to do is
164:39 - Center all of these links within my div
164:41 - element
164:42 - I'm selecting my class of pagination
164:46 - I will use the text align property set
164:50 - it to Center
164:53 - then I would like to style all of these
164:55 - links these hyperlinks
164:59 - we're starting with our pagination class
165:01 - then I would like any a elements found
165:04 - within the pagination class
165:07 - let's change the color
165:08 - I will set the color to be black
165:13 - let's eliminate the text decoration that
165:16 - is the underlining
165:18 - text decoration none
165:22 - I'll add a little bit of padding
165:26 - 8 pixels by 15 pixels
165:29 - I will display these elements as an
165:32 - inline block
165:35 - basically by setting these elements to
165:37 - have a display property of inline block
165:39 - we can adjust the width and height of
165:41 - these elements but what we have is good
165:43 - already alright so far so good
165:46 - going back to our HTML file I'm going to
165:48 - make one change we're beginning with
165:50 - page one
165:52 - that's our index file
165:54 - with this anchor tag I will set the
165:56 - class to be active
166:00 - within our CSS file we're taking our
166:03 - pagination class
166:05 - find all a elements within our
166:07 - pagination class then find any active
166:11 - classes
166:14 - so it's going to look a little strange
166:15 - within the pagination class
166:18 - within any anchor tags find the class
166:21 - that's active
166:22 - so in this case it would be page one
166:26 - I will change the background color of
166:28 - that element
166:30 - background color
166:31 - let's pick a greenish color
166:34 - but feel free to pick any color you like
166:39 - that's pretty good
166:41 - let's try and make the font weight bold
166:43 - I want to see what that looks like
166:46 - okay not bad
166:48 - this part's optional but I'll add a
166:50 - border radius around this element the
166:52 - one that's currently highlighted
166:54 - border radius
166:56 - 5 pixel seems fine yeah that looks
166:59 - pretty good
167:00 - all right now if any element is not
167:03 - active we can style them
167:06 - this part's going to look a little
167:07 - strange
167:09 - select the pagination class
167:11 - with any a elements we will use the
167:15 - hover pseudo class
167:17 - if these elements are hovered over but
167:19 - they're not active then I'd like to
167:21 - highlight them we'll use the not pseudo
167:24 - class
167:25 - find any elements that are not within
167:28 - the active class
167:30 - I will change the background color
167:34 - to something maybe gray like that
167:40 - then I'll add a border radius of 5
167:42 - pixels
167:43 - when we hover over these inactive links
167:46 - they should change in color
167:48 - let me make that a little bit lighter
167:50 - though
167:53 - that looks pretty good
167:55 - now we need some functionality for these
167:56 - pages
168:00 - if we click on one that should take us
168:02 - to our first file which is named
168:05 - index.html or it could be named
168:07 - something else for you the second link
168:09 - will bring us to a page named page two
168:12 - which we still need to create
168:14 - then page 3.html
168:18 - page4.html
168:21 - page five dot HTML now with these back
168:25 - and forwards buttons
168:26 - we can easily navigate through pages
168:28 - using JavaScript but unfortunately we
168:31 - really don't know JavaScript at this
168:32 - point at this point in time the easiest
168:34 - way for us to move forwards or backwards
168:37 - using these arrows is to list a specific
168:39 - file if we're on page one and we need to
168:42 - move forwards that will bring us to page
168:43 - two
168:45 - for the last hyperlink I will set that
168:47 - to be page 2. if we're on page one then
168:50 - we hit the backwards button while we're
168:52 - really not going to go anywhere we can
168:54 - either leave this link empty or we can
168:57 - refresh the page just by listing the
168:59 - page that we're currently on now we need
169:01 - to create these pages
169:03 - what I'm going to do is go to our
169:05 - website folder I will copy this index
169:08 - file paste it
169:11 - then rename this copy as page2.html
169:17 - let's copy page two paste it change page
169:21 - to copy to page three
169:25 - we're going to do this all the way until
169:26 - we reach page five
169:30 - foreign
169:38 - now if we go to page two
169:41 - let's change the title to be page two
169:44 - the back button will bring us to our
169:46 - index file also known as page one in
169:48 - this case
169:51 - let's set the class of active to be
169:54 - within the anchor tag page two
169:58 - then if we move forwards we want to go
170:00 - to page three
170:02 - so then if we go to page three
170:05 - if we move backwards we're going to page
170:08 - two
170:10 - set the class that's currently active to
170:12 - be on page three
170:17 - then if we go forwards we're on page
170:19 - four
170:23 - oh be sure to change the title to I
170:25 - forgot
170:27 - two three we're good
170:29 - then on page four this is Page four
170:33 - if we move backwards we're going to go
170:34 - to page three
170:38 - change the class to reflect page four
170:42 - if we move forwards we'll go to page
170:44 - five
170:47 - then lastly on page five this is page
170:50 - five
170:52 - if we move backwards we're going to page
170:54 - four
170:57 - move the class over to page five
171:01 - then we can't really go forwards so I'm
171:03 - just going to set the forward button to
171:06 - be page five again just to refresh it
171:08 - or you can eliminate it either way
171:11 - all right let's see if this works be
171:13 - sure to save everything
171:15 - so we should be able to move between the
171:17 - pages by clicking on these buttons or
171:19 - the arrows we're on page one we can go
171:21 - to page two three four five
171:25 - we can also use the arrows
171:27 - two three four five four three two one
171:33 - all right everybody so that's pagination
171:35 - it's a method by which a document is
171:37 - separated into pages and that is simple
171:39 - pagination in CSS
171:44 - hey what's going on everybody today
171:45 - we'll create a drop down menu only using
171:48 - HTML and CSS so let's get started the
171:52 - first thing we'll create is a div
171:53 - section
171:55 - I will give this div section A Class of
171:58 - drop down
172:00 - then within this div section I'll create
172:03 - a button
172:05 - what kind of drop down menu should we
172:07 - create let's create a drop down menu for
172:09 - food
172:11 - then we'll need a div section to hold
172:13 - all of the different content within our
172:15 - drop down menu
172:16 - I will give this inner div section A
172:20 - Class of content
172:24 - within my content class
172:27 - I'll create a few hyperlinks
172:31 - I'll set the href attribute to B nothing
172:35 - but you can put a file path or a URL in
172:38 - here
172:39 - I'll create three elements for our drop
172:42 - down menu
172:43 - the first will be apple
172:46 - Orange
172:48 - then banana
172:50 - this part isn't necessary but for my
172:52 - demonstration I'm going to create a
172:54 - paragraph a text
172:56 - I'll type lorem then hit tab that will
172:58 - generate some text alright that is all
173:01 - the markup that we need for this video
173:03 - Let's head to our style sheet
173:05 - the first element I'll apply some CSS
173:08 - properties to is our button with my drop
173:10 - down menu class I will select any
173:13 - buttons
173:14 - I will change the background color
173:17 - to be something else
173:21 - I'll use hsl values
173:25 - I'll go with 80 for the lightness
173:29 - for the font color I'll pick White
173:33 - I'll add a little bit of padding around
173:35 - the text
173:37 - padding 10 pixels by 15 pixels is good
173:42 - I'll remove the Border by setting the
173:44 - Border property to be none
173:47 - then I'll change our cursor to be a
173:49 - pointer when we hover over the button
173:51 - cursor pointer
173:54 - now when I hover over the button
173:56 - my cursor changes to a pointer
173:59 - the next elements that will change are
174:01 - the a elements
174:04 - within my drop down menu class take any
174:07 - ailments then apply the CSS properties
174:11 - let's display all of these items as a
174:14 - block
174:16 - I will set the color to be black
174:20 - I'll remove any text decoration that's
174:23 - the underline basically
174:25 - text decoration none
174:28 - and I will apply a little bit of padding
174:33 - 10 by 15 pixels
174:35 - we have one issue
174:37 - all of the content within my drop down
174:39 - menu is pushing all of the other content
174:42 - on my web page down
174:44 - eventually we'll set the position of our
174:47 - content to be absolute to take it out of
174:49 - the normal flow of our web page
174:52 - with our drop down menus content class
174:58 - let's change the background color first
175:01 - background color I'll use hsl values
175:06 - let's go with 95 lightness
175:12 - I will set the position property to be
175:15 - absolute
175:18 - then I'll set a minimum width for the
175:20 - content
175:24 - I'll stick with 100 pixels
175:27 - but feel free to adjust this value
175:30 - then I'll add a box shadow
175:33 - box shadow
175:35 - the first value is for the horizontal
175:37 - positioning
175:39 - the second number is for the vertical
175:41 - positioning
175:43 - a third value is for the level of blur
175:47 - then select a color
175:49 - to make the shadow a little bit lighter
175:51 - if I'm using hsl values I can adjust the
175:55 - position of this bar and change the
175:58 - opacity
175:59 - let's go with like 80 percent
176:03 - that looks pretty good
176:04 - normally I don't want this content to be
176:07 - displayed unless I hover over our button
176:10 - I will set the display property of our
176:13 - content to be none to hide it
176:16 - when I hover over our button then I'd
176:19 - like to display that content
176:21 - let's take our drop down menu class
176:26 - and apply the hover pseudo class
176:29 - with our content
176:33 - I would like to set the display property
176:35 - to be a block again now when I hover my
176:38 - cursor over the button it displays our
176:41 - drop down menu
176:43 - here's a few extra changes I'm going to
176:45 - make when I hover over the button I'll
176:47 - change the background color of the
176:49 - button with our drop down menu class
176:52 - I'll apply the hoverseudo class take our
176:56 - button within that class
176:59 - then change the background color
177:02 - I'll set the lightness to be like 70.
177:05 - the background color of the button is
177:07 - changing now
177:09 - then lastly when I hover over one of
177:11 - these a elements I also would like the
177:13 - background color to change
177:17 - with my drop down menu
177:21 - take any a elements
177:23 - when I hover over them
177:25 - change the background color
177:30 - for the lightness I'll set that to be
177:33 - like 90.
177:35 - that looks pretty good
177:37 - all right here's the last change that
177:39 - we're going to make
177:40 - with our div section it's a block level
177:42 - element when I hover my cursor over this
177:45 - area even though it's all white space we
177:48 - still display the drop down menu
177:50 - the last change that I'm going to make
177:52 - is set the drop down menu div section
177:56 - to display as an inline block
178:02 - so when I hover over this white area we
178:05 - don't display the drop down menu until I
178:07 - move my cursor over the button then the
178:10 - menu is displayed
178:11 - all right everybody so that is a simple
178:13 - drop down menu only using HTML and CSS
178:19 - hey everybody in today's video we're
178:21 - going to create a navigation bar using
178:23 - HTML and CSS so let's get started we'll
178:27 - Begin by creating an H1 title for the
178:29 - title of our web page why don't you go
178:32 - ahead and type in your name or your
178:34 - employer's name or your business name
178:36 - really doesn't matter then I'm going to
178:38 - use a nav element also known as a
178:41 - navigation element
178:44 - navigation elements are typically used
178:46 - for a set of navigation links I will
178:49 - give this nav element a class of navbar
178:52 - then within this navigation element I'll
178:55 - create an unordered list
178:58 - my unordered list will contain one list
179:02 - item for each category in my navigation
179:04 - bar
179:08 - for the first list item let's create a
179:10 - category for home I would like to turn
179:13 - this category into a hyperlink I'll
179:15 - surrounded this text with a pair of a
179:17 - tags
179:18 - within the opening a tag I will set the
179:21 - href attribute to B I'll just keep it
179:24 - empty for now we'll fill that in later
179:26 - let's copy our list item paste it a few
179:29 - times maybe a total of four links
179:33 - for the categories let's have home
179:35 - about
179:38 - products
179:40 - and contact
179:42 - these are a few common categories you
179:44 - may see for a navigation bar
179:46 - all right then outside of our navigation
179:48 - bar let's use a main element for the
179:52 - main content for our web page
179:54 - I'll add an H3 element for a sort of
179:58 - subtitle for the main section of our
180:00 - content
180:01 - this is the home page
180:05 - then I'll add a paragraph a text
180:09 - to generate some text in vs code you can
180:11 - type lorem then hit tab
180:13 - alright that is what we need for now
180:16 - let's go to our style sheet the first
180:18 - thing I'm going to do is text align our
180:21 - H1 element and set it to Center
180:24 - text align Center
180:27 - the text in our H1 element should be
180:29 - right in the center
180:31 - I will take our navigation bar class
180:34 - select our unordered list set the list
180:38 - style type to be none to remove the
180:42 - bullet points and they are gone now I'll
180:45 - also change the background color
180:48 - let's pick a dark gray color
180:53 - I'll set the lightness to be 25. I'll
180:57 - remove any padding
181:00 - as well as any margins
181:04 - let's style these hyperlinks within our
181:07 - navigation bar class take any a elements
181:11 - set the color to be white
181:15 - remove the text decoration text
181:18 - decoration will be none that removes the
181:22 - underline
181:23 - I'll add some padding of 15 pixels
181:28 - I will display these elements as a block
181:32 - then text
181:34 - align Center
181:37 - there we are this navigation bar is a
181:40 - vertical style navigation bar this is a
181:43 - style you may see at the bottom of a web
181:44 - page when I hover over one of these
181:46 - links I want to change the background
181:48 - color
181:49 - we will take our navigation bar class
181:52 - take any a elements then apply the hover
181:56 - pseudo class
181:57 - when I hover over one of these
181:59 - hyperlinks I'll change the background
182:01 - color
182:04 - I'll turn down the lightness slightly
182:07 - to 10 lightness
182:09 - there we are
182:11 - if you would like a horizontal
182:12 - navigation bar here's a change we can
182:14 - make
182:15 - with our navigation bar class take any
182:19 - list items
182:21 - then we will float left
182:24 - one change will make within our
182:27 - unordered list set the Overflow property
182:30 - to be hidden
182:33 - alright that's pretty good so far
182:36 - there is a little bit of margin around
182:38 - the body of my document I am going to
182:41 - set margin to be zero
182:43 - with our body element set any margin to
182:46 - be zero pixels
182:48 - if you would like margin around the main
182:50 - content of your page
182:52 - we will take our main element
182:55 - then set margin to be
182:58 - let's stick with 20 pixels
183:01 - you also could put margin just on the
183:04 - left side and the right side you know
183:06 - what I'm going to set margin left to be
183:07 - 20. and margin right to be 20.
183:13 - all right then lastly let's fill in
183:15 - these ahref attributes for the href
183:17 - attributes I will set my home link to be
183:20 - index.html about will be about.html
183:25 - products.html
183:28 - and contact.html
183:32 - we're going to go to our website folder
183:34 - we'll create a few copies of our index
183:37 - file we need three more files
183:40 - one two three
183:43 - let's rename one of these as about.html
183:50 - then products.html
183:55 - then contact.html
184:01 - so let's open about
184:04 - I'll change the header element of our
184:06 - main element to B this is the about page
184:11 - let's apply that for products this is
184:14 - the products page
184:18 - then contact
184:19 - this is the contact page
184:22 - all right and that should be everything
184:24 - let's see if this works
184:26 - we're currently on the home page I can
184:28 - go to the about page products contact
184:32 - and home
184:34 - in this example they're all relatively
184:36 - the same except for the H3 title all
184:39 - right everybody and that's how to create
184:40 - a navigation bar using HTML and CSS
184:46 - hey what's going on everybody today I'm
184:48 - going to show you a basic Website Layout
184:50 - using HTML and CSS all right let's begin
184:54 - so we should know what semantic tags are
184:56 - semantic tags they include but are not
184:59 - limited to headers nav elements main
185:02 - section aside articles and Footers
185:05 - you'll want to use semantic tags because
185:07 - they keep your content organized they're
185:10 - better for search engine optimization
185:12 - and they assist with screen readers and
185:14 - other technology for accessibility so
185:17 - I've already written some HTML markup I
185:19 - just want to describe this first headers
185:21 - are used for introductory content such
185:24 - as a title a logo or author information
185:27 - nav elements they're used for navigation
185:30 - bars or other links sometimes you may
185:33 - find a set of navigation Links at the
185:35 - bottom of your page but having a
185:37 - navigation bar is fairly common now the
185:39 - main content which is all of this it can
185:42 - contain one of many sub elements such as
185:45 - sections aside elements articles and
185:48 - generic developments so sections which
185:51 - is what I've created here in the middle
185:52 - this is for dependent content you would
185:55 - typically put anything you want within a
185:57 - section it's typically used for
185:59 - dependent content if I were to take this
186:01 - section out of the web page then put it
186:03 - on another web page it might not
186:05 - necessarily make sense like what is it
186:07 - for that's why it's dependent and a side
186:10 - element is meant for side content this
186:13 - can include author information fun facts
186:15 - quotes external links comments or really
186:18 - any other related content that's related
186:21 - to a section now an article this
186:24 - represents independent content this
186:26 - could include news articles job posts or
186:29 - blog posts articles are really similar
186:32 - to sections with articles it's meant for
186:35 - independent content for example a news
186:37 - article if I were to take this news
186:39 - article cut it out and put it on a
186:42 - different website it would still make
186:43 - sense
186:44 - it's independent content it's not
186:46 - reliant on the context of the website
186:49 - whereas in a section would be and then
186:51 - lastly we have Footers a footer is for a
186:54 - closing content this could include
186:55 - author information copyright information
186:58 - and sometimes navigational links there's
187:01 - really no one-size-fits-all approach
187:03 - really the design is up to you but this
187:05 - is a really common format now that we
187:07 - know the basics let's actually design
187:09 - this alright so we will create our
187:12 - semantic elements we have a header
187:15 - a nav element
187:17 - a main element
187:20 - and a footer element
187:24 - within our header element let's just add
187:27 - an H2 element
187:28 - that says header
187:31 - so let's go to our style sheet I'll take
187:34 - our header element
187:36 - let's change the background color
187:39 - background Dash color let's pick a light
187:42 - gray color
187:43 - I'll use hsl values because I like them
187:47 - 84 or 85 is good
187:51 - then let's text align Center
187:55 - and add a little bit of padding
187:59 - 25 pixels
188:01 - okay let's work on our navigation bar
188:03 - it's not going to be a fully functioning
188:05 - navigation bar we've done that in a
188:07 - previous video Let's just allocate some
188:09 - space for navigation bar it is common to
188:12 - have more than one navigation element
188:13 - per web page if we're creating a
188:16 - navigation bar we should set the class
188:18 - to be something like navbar so it's
188:21 - descriptive let's go to our CSS style
188:24 - sheet I will select our navbar class
188:28 - then change the background color
188:32 - let's go with the darker color
188:35 - I'll add some height
188:37 - 50 pixels
188:41 - and that should be good
188:42 - we're just allocating some space we're
188:44 - not creating a full navigation bar
188:46 - there's a little bit of margin around
188:48 - the body of our document I'm going to
188:50 - remove that by selecting our body
188:52 - element
188:54 - then set the margin to be 0 or 0 pixels
188:57 - that should get rid of the margin
189:00 - all right then we have our main element
189:03 - our main element can include any
189:05 - combination of
189:07 - a side
189:09 - sections
189:11 - articles
189:14 - or even just some generic developments
189:17 - but we won't be working with div in this
189:19 - video really you can see any combination
189:21 - of a side section article or div or
189:24 - maybe even none of them it's up to you
189:27 - in this topic we'll stick with one aside
189:30 - element one section and one article
189:32 - these elements are kind of like sub
189:35 - elements within our main element our
189:37 - main element is going to be the main
189:39 - stake in potatoes of our web page
189:41 - so with our side element I'll include an
189:44 - H2 element for a header
189:45 - this is a side
189:48 - let's do the same thing for Section this
189:51 - is a section
189:56 - then this is an article
190:03 - let me separate these just so that
190:05 - they're easier to see
190:06 - just to take up some space I'm going to
190:08 - create some sample paragraphs
190:11 - our side element will have one
190:14 - our section will have two paragraphs I'm
190:17 - just copying and pasting
190:20 - and our article will have two as well
190:24 - I don't want this top to bottom layout
190:26 - we can change that with some CSS
190:28 - properties so let's work on our side
190:31 - element first
190:32 - with our side element I'll set the width
190:35 - to be 20 of the width of the web page
190:39 - RSI element only takes up 20 percent of
190:42 - the space available
190:43 - the following elements can float we have
190:46 - to set the float property to be left
190:48 - then in this case
190:51 - all right let's copy aside change aside
190:54 - to B section that's our next element
190:56 - I'll set the width to be 40 percent
191:01 - then we have article
191:05 - change section to article
191:08 - and the width will stay at forty percent
191:10 - these three elements can all fit within
191:13 - the web page the total width is under
191:15 - 100 we have our three elements within
191:18 - our main element
191:19 - so if you would like to add a little bit
191:21 - of padding this is what you're going to
191:23 - do
191:24 - let's add 10 pixels of padding
191:29 - to each of these elements
191:32 - when we calculate the width we don't
191:34 - take into account any padding
191:37 - so one change we're going to make
191:39 - is that at the top of our CSS style
191:42 - sheet we can select all elements with an
191:45 - asterisk then a set of curly braces
191:48 - we will set the Box
191:51 - sizing property to order Dash box
191:57 - what we're doing with this property is
191:58 - that when we calculate the width factor
192:01 - in the padding all three elements should
192:03 - be lined up now
192:04 - all right then lastly we have our footer
192:08 - So within our footer element I'll just
192:10 - add an H2 element that says footer
192:14 - then I will style it
192:16 - let's copy what we have for our header
192:19 - paste it change header to be footer
192:24 - now what we need to do is clear our
192:26 - float because we're still floating the
192:28 - elements that come after
192:30 - let's display our footer as a block
192:33 - level element
192:35 - clear a float you can set clear
192:38 - than both
192:39 - and that should clear that
192:42 - alright so here is a basic Website
192:44 - Layout for a desktop
192:46 - this isn't a good format for a mobile
192:48 - device though with a mobile device you
192:50 - would want each of these elements to be
192:52 - on top of each other so you can scroll
192:53 - down
192:54 - we can add an at rule
192:58 - so at
193:00 - media screen
193:03 - and
193:05 - Max width
193:07 - 600 pixels
193:10 - so what we're doing here is that if the
193:13 - width of our screen or window is 600
193:16 - pixels or below we can change some CSS
193:20 - properties
193:21 - with a side section and article
193:25 - let's select those aside comma section
193:30 - comma article
193:32 - we'll just change the width to be 100
193:35 - percent
193:37 - if a user is on a mobile device and or
193:40 - the width is 600 pixels or below
193:44 - then we'll switch to a mobile version of
193:47 - the web page each of these elements are
193:50 - a side section and article elements are
193:52 - taking up 100 of the width available
193:54 - then if we were to expand this web page
193:56 - or we're viewing on a desktop we switch
193:59 - to the desktop version this is also
194:01 - known as responsive CSS
194:04 - all right everybody I know I covered a
194:06 - lot today but that is a basic Website
194:08 - Layout using HTML and CSS
194:13 - hey what's going on everybody today
194:15 - we're going to create an interactive
194:17 - image gallery using HTML and CSS so
194:20 - let's get started before you do jump in
194:22 - I would recommend downloading three
194:24 - pictures of your choosing I have a
194:26 - picture of a pizza a salad and soup if
194:30 - you're able to try and find images that
194:31 - are roughly the same height and width
194:33 - once you have your three or more images
194:35 - we are ready to begin
194:38 - we'll begin with the first image I'll
194:40 - use a div element
194:42 - and I will give this div element
194:45 - a class of gallery because it's well
194:49 - part of our image gallery I will include
194:51 - my image
194:53 - image The Source attribute will be the
194:56 - relative file path of the image if you
194:58 - have a lot of pictures I would recommend
195:00 - creating an images folder you know what
195:02 - let's actually do that it'd be good
195:03 - practice new folder
195:06 - images
195:08 - I'll move all of these images to my
195:10 - images folder
195:15 - alright
195:16 - so I will list the relative file path I
195:18 - need to navigate to the images folder
195:20 - but of course you can use your own
195:22 - pictures depending on what you're
195:23 - building exactly
195:25 - images dot I think that was a JPEG
195:27 - alright so this picture is massive
195:30 - in case somebody is using a screen
195:32 - reader it's good practice to add an
195:34 - alternative attribute then give a
195:36 - description of the image
195:38 - salad
195:39 - I'll turn this image into a hyperlink by
195:43 - surrounding it with a pair of anchor
195:44 - tags
195:47 - we can open this image in a new tab by
195:50 - setting the target attribute to equal
195:52 - underscore blank
195:55 - then I will set the hrep attribute to be
195:58 - the source of my image
196:01 - I'll just copy and paste that just
196:04 - temporarily I'm going to set a width for
196:06 - this image width equals 200.
196:09 - what we'll do now is add a description
196:12 - it's entirely optional but I think it
196:14 - would look nice I will create a new div
196:17 - element
196:20 - with a class of
196:23 - description
196:25 - I will type the word salads we'll do
196:28 - some CSS styling a little bit later
196:30 - let's copy this entire div element
196:33 - paste it twice
196:36 - then we just need to change the images
196:38 - we're using my second image is soup
196:44 - I'll change the alternative text as well
196:48 - and the description
196:50 - soups
196:52 - then my last image is pizza
197:00 - the description will be pizzas
197:04 - all right let's go to our style sheet
197:06 - we are selecting our Gallery class
197:10 - I will set the display property to be an
197:13 - inline block currently these images are
197:16 - Block Level elements
197:18 - now they're all lined up
197:21 - I'll add a border
197:23 - border one pixel solid
197:27 - let's go with a dark gray color I'll use
197:30 - hsl values
197:35 - I'll set the lightness to 60 percent
197:39 - I'll add margin of 5 pixels
197:44 - the margin is applied outside of these
197:46 - developments if I were to increase this
197:49 - you can see the difference
197:51 - I'll keep that as five though let's work
197:53 - on the description for each image
197:56 - we are accessing our Gallery class
197:59 - then within the gallery class we have
198:01 - the description class
198:04 - that should be
198:06 - these developments
198:10 - let's add a little bit of padding 10
198:13 - pixels
198:14 - then text align Center
198:19 - not bad when we hover over one of these
198:22 - elements let's change the Border color
198:26 - we are taking our gallery
198:28 - we'll apply the hover pseudo class then
198:31 - change the border and make it a little
198:33 - bit darker
198:36 - I'll set the lightness to be
198:38 - like 20.
198:40 - there we are
198:42 - now the Border changes when we hover
198:44 - over one of these elements
198:46 - I'm going to delete these with
198:48 - attributes
198:53 - foreign
198:56 - then go to our style sheet we'll access
198:58 - our Gallery class
199:00 - with any images
199:02 - set the width
199:04 - to be 100 percent
199:08 - and height
199:10 - will be Auto
199:12 - then with the gallery class we can set
199:14 - the width
199:16 - 200 pixels
199:17 - so basically what we did is that we set
199:19 - the width of each image to be 100 of the
199:23 - width of our Gallery whatever this is
199:25 - set to if I were to set the width to be
199:27 - something larger then the size of each
199:29 - element would increase
199:31 - but I think 200 is fine all right now
199:34 - let's test it if we click on one of
199:36 - these images we should see the full
199:37 - image in a new tab that's the salad
199:39 - image soup
199:42 - and pizza all right everybody so that is
199:45 - a simple image gallery using HTML and
199:48 - CSS
199:50 - hey what's going on everybody in this
199:52 - video I'm going to show you how we can
199:54 - create some font awesome icons using
199:56 - HTML and CSS all right let's get started
199:59 - everybody I'm going to direct you to
200:02 - this website font awesome.com this isn't
200:05 - a sponsorship or anything like that but
200:07 - this is a pretty good place to get some
200:09 - icons Google Icons is another good
200:11 - source but I find that font awesome does
200:14 - have a larger variety of icons to start
200:16 - using icons from this site from the home
200:18 - page we will start for free because I
200:21 - don't like to pay for things you will
200:23 - need a kit you can type in your email
200:25 - like fake gmail.com
200:28 - then send kit code then you just have to
200:30 - confirm your email
200:33 - now once you log in you'll have access
200:35 - to a kit if I were to click on my kit
200:39 - I have a line of JavaScript that
200:41 - contains a link to my kit there's going
200:43 - to be a unique number let's copy the
200:46 - script then place it in the head of our
200:48 - HTML document right here
200:51 - we now have access to those icons on
200:54 - font awesome
200:55 - to browse for icons go to the icons tab
200:57 - then we can perform a search
201:00 - I would like an icon of a home or a
201:03 - house
201:06 - I would like this one so I'll click on
201:08 - it
201:10 - you can choose a classic style or a
201:12 - sharp Style with sharp corners
201:15 - this is solid that's regular this is
201:18 - light I'll stick with solid
201:21 - you can select animations but I won't
201:23 - use animations for this example you can
201:26 - rotate this icon
201:27 - you can change the color
201:30 - and you can change the default size
201:33 - this is 2xs this is 2XL
201:37 - to include this icon we can copy this
201:39 - element it's an eye element so let's
201:42 - copy this eye element
201:45 - within the body of my document I can
201:47 - paste that I element and there's my icon
201:51 - if you want to remove the color and
201:54 - change it with your CSS style sheet we
201:56 - can remove the style attribute
202:02 - if you need something even larger than
202:04 - 2XL we can change this element up to 10
202:07 - times the size with 10x
202:10 - that's a little too large for my liking
202:12 - let's go with 5X
202:14 - let's find three other icons we would
202:16 - like
202:17 - I'm going to find the Twitter logo
202:20 - that's right here
202:21 - I need to copy this eye element
202:24 - then I will paste it
202:28 - then I'll change the size
202:33 - fa-5x
202:36 - okay Twitter
202:39 - YouTube would be good
202:43 - copy this eye element
202:45 - paste it again
202:47 - I would like the 5x version fa-5x
202:52 - let's select one more icon
202:55 - let's go with tick tock
203:00 - and that is all we'll need
203:06 - again I would like the 5x sized version
203:10 - all right that's a good amount of icons
203:13 - I will Center all of these icons one way
203:16 - in which I can do that is to place all
203:18 - of these elements within a div
203:20 - with the class of icons
203:27 - all right let's go to our style sheet
203:29 - I will take my class of icons
203:32 - then text align Center
203:37 - to right justify these we can set that
203:39 - to right
203:40 - but I'll keep them in the center
203:43 - I'll change the color of these icons
203:47 - let's begin with our house we'll need to
203:49 - copy this entire class
203:52 - I don't want the sharp version
203:54 - I will copy this entire class
203:58 - then within my style sheet I will select
204:00 - that class
204:01 - dot then paste the name of that class
204:04 - now we can't include spaces you can
204:07 - replace the spaces with the DOT
204:10 - with our house icon
204:12 - let's change the color to something Gray
204:20 - let's go with the lighter color like
204:21 - that okay let's do this with the other
204:24 - icons
204:28 - then we have Twitter
204:31 - replace the spaces with dots
204:34 - I will change the color
204:38 - so let's try and find Twitter blue
204:42 - think that's fairly close
204:46 - okay then we have YouTube
204:56 - color red
205:02 - then tick tock
205:19 - I think that's fairly close
205:21 - all right now what we'll do is turn
205:23 - these icons into hyperlinks we'll
205:26 - surround each ailment with a pair of a
205:28 - tags
205:34 - foreign
205:44 - foreign
205:46 - then within the href attribute we can
205:48 - set that to some website
205:50 - I won't set the atrep attribute to our
205:52 - house icon let's do that with Twitter
205:54 - Youtube and tick tock
205:56 - so with Twitter I will set the ahref
205:58 - attribute to be https colon to forward
206:02 - slashes twitter.com
206:05 - let's do this with our YouTube icon
206:08 - replace Twitter with YouTube
206:13 - then tick tock
206:16 - so this should work let's click on
206:18 - Twitter that works
206:21 - YouTube
206:23 - and tick tock
206:26 - with hyperlinks there is some underlying
206:29 - text decoration included let's remove
206:31 - that
206:33 - let's take our icons
206:36 - then any anchor tags within our icons
206:38 - class
206:39 - we'll set the text decoration
206:45 - to be none
206:47 - and that should remove them I'll also
206:50 - apply a little bit of margin between
206:51 - each of these icons
206:53 - let's do margin
206:55 - Dash right set to 20 pixels
207:00 - not bad for some additional practice
207:02 - when we hover our cursor over one of
207:04 - these icons let's increase the lightness
207:06 - let's begin with our house let's copy
207:09 - these CSS properties
207:11 - paste them we'll apply the hover pseudo
207:14 - class
207:16 - I'll increase the lightness by 10
207:18 - percent
207:19 - I went from 66 to 76 percent
207:23 - when we hover our cursor over our house
207:25 - icon it should be a little bit lighter
207:29 - okay let's apply this for the other
207:30 - icons
207:32 - then we have Twitter
207:35 - apply the hoverseudo class oh I'm using
207:38 - RGB values let me change that to hsl
207:44 - I'll increase the lightness to 60.
207:49 - let's do this with YouTube
207:57 - then tick tock
208:04 - all right now when we hover our cursor
208:06 - over these icons they should be a little
208:08 - bit lighter
208:09 - Tick Tock is still a little bit dark let
208:11 - me increase it further to 30 percent
208:13 - that's much better
208:16 - all right everybody so that is an
208:17 - introduction to including icons in your
208:19 - web page using CSS
208:23 - hey what's going on everybody in this
208:25 - topic I'm going to give you an
208:26 - introduction to using flexbox in CSS in
208:29 - about 10 minutes or so why don't you go
208:31 - ahead and sit back relax and enjoy the
208:34 - show
208:36 - all right let's jump in everybody we
208:37 - have a little bit of setup to do we'll
208:40 - create a development with the class of
208:43 - container
208:45 - within our container class we'll create
208:47 - a few developments we'll create four
208:50 - these will be boxes
208:52 - for the class I will set that to be box
208:55 - the first inner development will have an
208:58 - ID of box one
209:00 - the inner text will be one let's copy
209:03 - our inner development paste it three
209:05 - times for a total of four
209:07 - change box 1 to box two for the next
209:09 - element
209:11 - then three
209:12 - then four and that's all we need for our
209:15 - HTML file let's go to our style sheet
209:18 - we'll style our boxes we will select the
209:21 - Box class
209:24 - I'll set the width to be 150 pixels
209:27 - same thing goes with the height
209:30 - let's change the background colors we'll
209:33 - begin with the ID of box one
209:35 - I will set the background color to be
209:38 - something red
209:40 - I'll use hsl values because I like them
209:44 - let's go with that then let's color box
209:46 - two box two let's make that yellow
209:51 - box 3 will be green
209:57 - then box 4 will be blue
210:01 - let's change the font size real quick
210:04 - font size 8 em
210:08 - then text align Center
210:12 - I'll add a border radius just two round
210:14 - of the corners border radius 15 pixels
210:19 - and that is all the setup we'll need we
210:21 - are ready to begin
210:23 - with our container class we can Flex all
210:26 - of the elements within this container
210:27 - meaning all of these inner div elements
210:30 - so we'll take our container class dot
210:33 - container
210:34 - then set the display property to be Flex
210:39 - you can see that the positioning of
210:41 - these elements has already changed by
210:43 - default the flex Direction property is
210:47 - set to row
210:49 - you can see that there's no apparent
210:51 - change when I refresh the page
210:53 - for a row but in reverse order we can
210:55 - set Flex direction to be row reverse
210:59 - so now one is on the right hand side
211:01 - followed by two three then four
211:04 - to arrange these elements within a
211:06 - column we can set Flex direction to be
211:09 - column
211:10 - or even column reverse
211:13 - then at the bottom we have one then two
211:15 - three then four
211:18 - so that's Flex Direction let's delete
211:20 - the flex Direction property
211:22 - then we have the justify content
211:25 - property
211:27 - justify content sets the alignment on
211:31 - the main axis think of the x-axis by
211:34 - default it's Flex start there's no
211:36 - apparent change
211:37 - flex and
211:39 - would justify the content at the end
211:42 - see we're beginning with four then three
211:44 - two and one when we had Flex Direction
211:47 - set to row reverse it was one two three
211:50 - four but in this case it's four three
211:52 - two one then there's Center if you need
211:55 - to Center align these elements on the
211:58 - main axis
211:59 - we can place the extra space evenly
212:02 - between each of these elements by
212:04 - setting justify content to space
212:07 - between
212:09 - and if I were to expand this page
212:11 - the space between them is increasing
212:14 - you also have space around
212:18 - the area outside of these elements is
212:20 - also included now with space around
212:23 - then we have space evenly
212:31 - all right and that is the Justified
212:32 - content property we can justify elements
212:35 - on the main axis then there's the cross
212:38 - axis think of it as the y-axis up and
212:41 - down what we'll need to do in this
212:42 - example is expand our container just to
212:45 - show you the size of the container I
212:47 - will add a border to The Container class
212:49 - border 10 pixels
212:52 - solid black
212:54 - here's my current container
212:57 - I will increase the height of the
212:58 - container
213:00 - let's set the height to be 90 viewport
213:04 - height units
213:06 - so this is the total size of my
213:07 - container now
213:09 - ninety percent of the height of the web
213:11 - page
213:12 - what we'll use now is the Align items
213:15 - property which is used for the cross
213:16 - access
213:18 - align Dash items
213:22 - the default is flex start there's no
213:25 - change
213:26 - flex and we'll place these elements at
213:29 - the bottom of our container
213:32 - then there's Center align item Center
213:35 - that will place them in the middle of
213:38 - the Cross axis
213:40 - then there's Baseline
213:44 - so with Baseline the text is going to be
213:46 - aligned they're all the same size though
213:48 - we can't really notice the difference
213:50 - with box one let me change the font size
213:54 - font size 1 em you can see that the
213:57 - number one is aligned with the rest of
213:59 - the characters
214:00 - so if I were to increase the font size
214:02 - you can see that they're still aligned
214:06 - but let's eliminate that font size
214:07 - property
214:08 - let's delete our aligned items property
214:12 - we'll need more elements let's copy our
214:15 - four inner developments paste them we
214:19 - should have a total of eight one two
214:21 - three four one two three four you can
214:23 - see that these items are getting
214:24 - squished now they're all being
214:25 - compressed we can set the flex wrapped
214:29 - property so with our container I will
214:32 - set the flex wrap property to be wrap
214:36 - these elements will now wrap if there's
214:39 - not enough space if I were to expand the
214:41 - size of my container
214:43 - there's now enough room but if we run
214:45 - out of room they'll be pushed down
214:47 - further down the page
214:48 - by default Flex wrap is no wrap
214:54 - otherwise there's rap reverse
214:58 - now they're in reverse order
215:03 - let's use flex wrap now Flex wrap is
215:07 - used along with another property named
215:09 - align content
215:11 - align content
215:14 - if I were to set align content to be
215:16 - Flex
215:17 - start
215:19 - all of that space between the first row
215:20 - and the second is now gone
215:26 - then there's Flex end
215:34 - Center
215:42 - space evenly
215:51 - then space between
215:58 - use any combination of properties that
216:00 - I've demonstrated
216:01 - let's keep Flex wrap as wrap but I'll
216:04 - use flex start
216:07 - you can also add a gap between the rows
216:10 - and the columns between each of these
216:12 - elements
216:13 - let's set a column Gap
216:16 - column Dash Gap to be one em
216:21 - that adds a gap between each of the
216:23 - columns for the rows that would be row
216:26 - Gap
216:27 - I'll set that to be 1em you can also use
216:30 - pixels as well
216:32 - so here's 2 em
216:36 - 3
216:40 - let's delete our Gap properties
216:43 - all right let's also delete the extra
216:45 - four boxes that we have
216:48 - we're also going to get rid of the flex
216:50 - wrapped property
216:51 - as well as align content
216:55 - there's also the Align self property
216:57 - that can be applied to single elements
217:00 - so with box one I will set a line self
217:04 - to be start that's the default
217:07 - this element will be aligned at the top
217:10 - of our container
217:11 - if I were to change line self to be
217:13 - Center this single element is aligned in
217:17 - the center of my container on the cross
217:19 - axis
217:22 - then we have end that will align at the
217:24 - bottom
217:25 - the Align self property can be applied
217:27 - to any of these elements let's do that
217:29 - with number two
217:32 - line Dash self
217:34 - at the start there's no change
217:37 - Center
217:39 - end
217:41 - okay let's delete the Align self
217:43 - property
217:45 - we can use order to change the order of
217:47 - these elements
217:48 - with box one I will set the order to be
217:51 - one that will place number one at the
217:54 - end
217:55 - negative one would be the beginning
217:57 - which it normally is already
218:00 - with box 2 I'll set the order to be one
218:03 - that will place two at the end but if I
218:06 - set it to be negative one it's now at
218:08 - the beginning
218:10 - all right everybody so that is a quick
218:12 - introduction to flexbox there is a lot
218:14 - to talk about and that is all the time
218:16 - that I have for this topic and well
218:18 - that's an introduction to flexbox in CSS
218:23 - hey what's going on everybody today
218:24 - we're going to cover the transform
218:26 - property in CSS the transform property
218:29 - lets you rotate scale skew or otherwise
218:32 - translate an element here's what we're
218:35 - gonna do we'll create a div section
218:38 - I will give this div an ID of box one
218:43 - then within the Box let's say the word
218:46 - hi let's head to our style sheet within
218:49 - my style sheet I will take our ID of box
218:52 - one
218:54 - set the width and height to be 250
218:56 - pixels
219:01 - then I will give this div section a
219:05 - border of 5 pixel solid
219:08 - let's increase the font size
219:11 - 13 em is fine
219:14 - then text align Center
219:19 - hey let's change the background color to
219:22 - while we're at it
219:23 - I'll pick a greenish color
219:29 - that's pretty good I'm also going to
219:31 - remove some of the margin around the
219:33 - body of our document
219:35 - body margin zero
219:39 - all right so the transform property
219:43 - the First Transformation I'll show you
219:44 - is translate we can translate X on the
219:48 - x-axis Translate Y on the y-axis or both
219:52 - with just translate let's begin with
219:55 - translate X so after translate X add a
219:58 - set of parentheses whatever value you
220:01 - place within the set of parentheses we
220:03 - will translate this element on the
220:04 - x-axis if I were to set translate X to
220:08 - be 50 pixels this element will move to
220:10 - the right by 50 pixels
220:13 - that's 100
220:15 - 200
220:17 - negative numbers will move the element
220:19 - to the left
220:21 - percentages are fine too if I set
220:24 - translate X to be one hundred percent
220:27 - this element will translate to the right
220:29 - by 100 percent the width of this element
220:32 - with a negative percentage that will
220:35 - translate the element to the left
220:37 - it could effectively hide that element
220:38 - then with negative 50 we should see just
220:42 - half of this element A lot of these
220:44 - Transformations can be done in pixels
220:47 - or percentages
220:50 - there's also Translate Y for the y-axis
220:52 - if I were to translate by 50 pixels on
220:56 - the y-axis that moves the element down
220:59 - negative 50 would move the element up
221:02 - by one hundred percent we will move this
221:05 - element down by 100 percent the height
221:08 - of the element that negative 100 will
221:11 - effectively hide the element you can
221:13 - combine both of them too with just
221:15 - translate but you need two values the
221:18 - translation on the x-axis then the
221:20 - y-axis
221:22 - if I set the first number to be 50
221:24 - well 50 pixels
221:26 - that's an X translation the second value
221:29 - is a y translation now we're moving the
221:33 - element to the right and down negative
221:36 - values will move the element to the left
221:38 - and then up
221:40 - those are translations for the transform
221:42 - property
221:43 - then we have rotations we can rotate on
221:47 - the x-axis
221:48 - within rotate X we set a number of
221:51 - degrees if I were to set rotate X to be
221:54 - 45 degrees We Begin rotating on the
221:57 - x-axis that's 45
222:00 - this is 90. you can't even see it
222:04 - 135
222:08 - with 180 it should be kind of upside
222:10 - down
222:11 - that is an X rotation then we have y
222:16 - rotate y we'll start with 45 degrees
222:20 - that's 45.
222:23 - 90 you can't even see it anymore
222:26 - 135
222:29 - 180.
222:31 - then lastly we have Z rotation
222:36 - that's 45
222:38 - this is 90.
222:40 - 135
222:43 - 180. those are different rotations
222:48 - their scale
222:49 - we can scale X or scale y
222:53 - one corresponds to 100 percent
222:56 - 1.1 is 110 percent
222:59 - if I were to set scale X to be 2 we're
223:02 - scaling this element on the x-axis by
223:05 - 200 percent
223:07 - 3 would be 300 percent
223:09 - any value below one
223:11 - would in a way compress it on the x-axis
223:15 - and here is 0.25
223:18 - we also have scale y
223:21 - scale Y is set to 2. would scale this
223:24 - element on the y-axis by 200 percent
223:28 - that's 300
223:30 - here's 0.5
223:33 - and here's 0.25
223:35 - you can combine both X and Y2 with just
223:38 - scale but you need two values
223:42 - so by default it's 1 1 for 100 let's
223:45 - scale on the x-axis and the y-axis by
223:48 - 200 percent
223:50 - and here's 300.
223:53 - that is scale
223:54 - then we have skew
223:56 - skew X or skew y
223:58 - if I were to set skew X to be 45 degrees
224:02 - we are skewing this element on the
224:04 - x-axis
224:06 - here's 90.
224:09 - 135
224:12 - and 180. the same applies for y
224:16 - here's 45
224:19 - 90
224:21 - 135
224:23 - 180 you could combine them both with
224:26 - just SKU
224:27 - then again you need two values following
224:29 - that same pattern
224:31 - you can apply more than one
224:33 - transformation at a time let's begin
224:35 - with translate X
224:38 - by 100 percent
224:40 - and then we will rotate on the z-axis by
224:44 - 90 degrees
224:47 - let's add a scale as well
224:51 - I'll shrink this image by 50 percent
224:55 - so yes you can apply more than one
224:57 - transformation at a time
224:58 - these Transformations can also be
225:00 - applied to a class
225:02 - let's create two additional boxes
225:05 - box one box two box three
225:08 - I'll give each of these elements a class
225:12 - of box
225:18 - I'll remove this transformation
225:20 - I will select the Box class
225:24 - take all of these properties cut them
225:26 - besides the background color then paste
225:28 - them within the Box class
225:31 - then let's color in our two other boxes
225:33 - box one box two box three I'll make box
225:37 - two red
225:38 - foreign
225:40 - box three will be blue
225:44 - all right let's apply some
225:45 - transformations to the class now I will
225:48 - set the transform property let's
225:50 - translate on the x-axis translate X
225:54 - by 100 pixels
225:58 - then let's rotate on the z-axis by 45
226:02 - degrees
226:04 - then I will shrink these with scale
226:08 - set to 0.5
226:11 - you also could apply these
226:13 - transformations to images I just so
226:15 - happen to have a picture of Shrek in my
226:17 - computer I think everybody should have
226:19 - at least one right that image just saved
226:21 - within my website folder
226:23 - let's delete these boxes that include
226:25 - that image
226:27 - image source equals the relative file
226:30 - path of the image
226:35 - all right
226:38 - let's take our image I will apply the
226:41 - transform property
226:44 - let's Translate
226:46 - our image on the x-axis by 100 percent
226:52 - then let's rotate Shrek on the z-axis
226:55 - by 180 degrees
226:58 - let's scale Shrek in the x-axis by 200
227:01 - percent
227:02 - scale X
227:05 - two
227:06 - all right I don't know what the point of
227:08 - that was but I thought it would be a fun
227:09 - exercise all right everybody so those
227:11 - are transformations it's a CSS property
227:14 - that lets you rotate scale skew or
227:16 - otherwise translate an element and those
227:18 - are a few basic CSS transformations
227:23 - hey what's going on everybody today
227:25 - we're going to create some animations
227:26 - using CSS all right let's get started
227:29 - everybody we will create a development
227:32 - with an ID of box
227:36 - then within this box let's say the word
227:38 - hi
227:40 - let's go to our style sheet let's select
227:43 - our ID of box I will set the width to be
227:46 - 250 pixels
227:48 - the height to be 250 pixels
227:52 - I'll change the background color
227:55 - let's pick something red
228:01 - let's change the font size
228:04 - 13 em is fine
228:06 - then text align Center
228:10 - to use an animation we first need to
228:13 - create an animation using a keyframe
228:15 - rule that can be done with typing at
228:18 - keyframes then a unique animation name
228:21 - let's create an animation to slide this
228:23 - element from the right to the left the
228:26 - name will be slide left
228:29 - then add a set of curly braces
228:31 - within our keyframe there's a few
228:33 - possible values you have two
228:36 - from
228:38 - or a percent such as 0
228:41 - 50 100 really any number we'll begin
228:46 - with a left translation for our element
228:49 - to end up in its resting position we
228:52 - will use from
228:53 - then add a set of curly braces just like
228:56 - we're adding CSS properties
228:57 - within our keyframe of from we will set
229:01 - the transform property to be an X
229:04 - translation translate x parentheses this
229:09 - can be an amount or a percent let's
229:11 - begin with 100 pixels
229:14 - so now I need to set the animation name
229:16 - property within our box
229:18 - animation name will be slide left
229:23 - but when I refresh everything nothing
229:25 - appears to happen that's because we need
229:28 - to set the animation duration property
229:30 - animation duration how long will this
229:34 - animation take to complete let's start
229:36 - with one second that's one s
229:39 - there's our slide animation
229:41 - feel free to adjust this value
229:44 - if I set this to be two seconds and
229:46 - slightly slower
229:48 - let's change translate X to a different
229:50 - value like 100
229:52 - this element is translating on the
229:55 - x-axis by 100 the width of the element
229:58 - if I were to set this to a larger number
230:00 - like 300
230:02 - it's going to appear off screen in my
230:04 - example then slide into place but that
230:07 - also depends on how far you're zoomed in
230:10 - or zoomed out and the with your web
230:12 - browser
230:13 - let's create an animation to slide right
230:16 - let's copy our keyframe rule
230:19 - rename slide left as slide right
230:23 - we'll use the value of 2. we'll begin in
230:26 - our original position we're setting this
230:28 - animation to end up in this position
230:30 - with our element translated to the right
230:33 - by 300 percent let's change the
230:36 - animation to slide right
230:38 - and now we slide to the right
230:41 - okay let's slide up
230:44 - keyframes slide
230:47 - up
230:48 - we'll set the value to be from
230:51 - then we will translate y
230:54 - change the animation name to slide up
230:58 - there we go
231:00 - then slide down all we really need to do
231:02 - is change this value
231:04 - so that's slide down change from to be
231:09 - two
231:10 - then change the animation name again
231:12 - slide down
231:16 - let's create a rotation animation
231:19 - at
231:20 - keyframes rotate
231:24 - so we can use from
231:26 - or to or a percent let's use percentages
231:30 - at 100 percent what sort of
231:33 - transformation do we want to complete
231:36 - let's use the transform property then do
231:40 - an X rotation rotate X
231:43 - buy 360 Degrees that's one full rotation
231:46 - okay let's change the animation name to
231:49 - rotate
231:51 - now we should rotate once on the x-axis
231:54 - let's rotate on the y-axis rotate y
231:59 - then rotate on the z-axis rotate Z
232:03 - so those are a few rotations now check
232:06 - this out if I were to set the keyframe
232:08 - value to be 50 we will complete this
232:11 - animation at the 50 Mark then from 50 to
232:16 - 100 in a way we undo the animation we'll
232:19 - rotate once and then revert back
232:22 - complete the animation at fifty percent
232:24 - of the length of the duration then with
232:27 - the other fifty percent of the time
232:29 - remaining return that element to where
232:31 - it was previously if I were to mess with
232:33 - these values let's say 25 percent will
232:36 - complete the animation in half a second
232:37 - then with the other 1.5 seconds we
232:40 - return to normal that's why the
232:42 - animation goes fast
232:44 - then when it's undone
232:46 - it goes fairly slow you can mess with
232:49 - these values depending on what you're
232:50 - looking for exactly yeah you can use
232:52 - from two or a percent okay let's create
232:55 - an animation to grow this element we'll
232:58 - scale both the width and the height at
233:01 - keyframes grow
233:04 - at the 100 mark
233:06 - let's set the transform property to be
233:10 - scale
233:12 - then we can use two values two means two
233:15 - hundred percent
233:16 - for the width scale that up by 200
233:18 - percent same with the height 200 percent
233:21 - let's change the animation to be grow
233:23 - then this should grow then when the
233:26 - animation is complete it snaps back into
233:28 - place but if I were to set this value to
233:31 - be 50 percent
233:33 - it's going to grow then shrink back into
233:35 - place in one smooth motion
233:38 - let's create an animation to shrink at
233:41 - keyframes
233:43 - shrink
233:46 - the 50 mark
233:49 - let's use the transform property
233:52 - then scale by 0.5 comma 0.5 that will be
233:58 - 50 for the width and the height let's
234:01 - change the animation name to be shrink
234:03 - and now we'll shrink this element then
234:06 - it reverts back into place
234:08 - okay let's change the opacity
234:11 - at keyframes this animation name will be
234:15 - fade
234:16 - at the 50 mark
234:18 - let's change the opacity we're not using
234:21 - the transform property this time let's
234:23 - set the opacity to be zero
234:27 - then change the animation name to be
234:28 - fade now we'll Fade Out then back in
234:31 - again
234:32 - if I were to set this value to be 100
234:35 - this element will fade
234:37 - then when the animation is normal it
234:40 - reverts not smoothly though let's set
234:43 - that to 50.
234:46 - now if you want a fade in effect what we
234:48 - can do is with our box
234:50 - originally we can set the opacity to be
234:52 - zero
234:55 - then at the 100 keyframe the opacity
234:59 - will then be one
235:00 - so this is fade in let's say
235:05 - so the element is originally hidden then
235:07 - it fades in
235:09 - let's get rid of the opacity
235:12 - let's change the color of our element
235:16 - at
235:17 - keyframes
235:18 - color change
235:20 - so at zero percent
235:24 - let's have the background color be red
235:27 - I'll copy the current background color
235:33 - I'll change the animation name too
235:35 - color change
235:38 - then at 20 percent
235:40 - let's set the background color to be
235:42 - orange
235:47 - so we're going from red to orange
235:50 - then at 40 let's pick yellow
235:59 - 60 will be green
236:07 - 80 will be blue
236:16 - then 100 will be purple
236:24 - there
236:26 - you can take the Liberty to pick
236:28 - whatever values you would like
236:30 - let's create a glow effect around our
236:32 - element
236:34 - at keyframes glow
236:37 - this animation will complete at the 50
236:40 - mark
236:41 - we'll add a box shadow
236:44 - the first value is for the horizontal
236:47 - offset we'll set that to be zero
236:50 - the next value is for the vertical
236:52 - offset which will also be zero then the
236:55 - blur radius
236:57 - I'll set that to be 50 pixels
237:00 - then a color let's go with the yellowish
237:03 - color
237:06 - all right then we need to change the
237:08 - animation name
237:09 - glow
237:11 - then our element glows it's a little
237:13 - difficult to see though with the white
237:15 - background let me change the background
237:16 - color so with the body of our document I
237:19 - will set the background color to be a
237:23 - dark color
237:28 - there's our glow effect
237:30 - you can start animations with the pseudo
237:33 - class for example I want this glow
237:35 - animation to occur when I hover my
237:38 - cursor over the element
237:40 - I am selecting my box ID then applying
237:43 - the pseudo class of hover
237:48 - I'll take the animation name and the
237:50 - duration then place it within the Huber
237:52 - pseudo class for our box
237:54 - then this animation only begins when I
237:57 - hover my cursor over the Box
238:00 - pretty cool right
238:02 - if I were to use the active pseudo class
238:05 - this animation only occurs when I left
238:08 - click and hold the element which I am
238:11 - doing right now
238:13 - let's place these properties back
238:18 - to change the iteration count for an
238:20 - animation to have it occur more than
238:22 - once we can set the animation
238:25 - iteration count property
238:27 - to be some other value besides one if I
238:30 - set this value to be 2
238:32 - we will perform this animation twice
238:36 - to have it perform infinitely set that
238:39 - to be infinite
238:43 - I would not recommend setting an
238:45 - animation to be infinite just because a
238:47 - viewer can find it annoying unless
238:49 - that's the goal to annoy the viewer
238:50 - alright there's also animation Direction
238:54 - animation
238:56 - Direction
238:59 - normally this is well normal
239:03 - we can change the direction of the
239:04 - animation by setting normal to be
239:06 - reverse
239:07 - now we're sliding to the right
239:12 - to alternate set the value to be
239:14 - alternate
239:15 - we're sliding left
239:17 - then sliding right
239:19 - then sliding left again
239:22 - there's also alternate reverse
239:25 - We Begin by sliding to the right then to
239:28 - the left
239:29 - and then to the right again
239:31 - let's set that to be normal
239:34 - to pause the animation we can set the
239:37 - animation
239:38 - Place state to be paused
239:43 - now the animation is paused
239:46 - to run it again
239:47 - set this value to be running
239:50 - this would be useful in conjunction with
239:53 - the programming language such as
239:54 - JavaScript because we can toggle this
239:56 - animation on and off
239:58 - there's also the animation timing
240:02 - function
240:04 - normally with this animation it
240:06 - accelerates then slows down it
240:08 - decelerates
240:10 - the default value is is in out
240:17 - it speeds up then slows down before it
240:19 - reaches its destination
240:22 - for a constant speed we can change that
240:25 - to be linear
240:28 - through the entire animation duration it
240:30 - stays the same speed
240:33 - there's also steps for a sort of stop
240:36 - motion effect
240:38 - within this function if I place the
240:40 - value 5
240:43 - there's five steps
240:45 - if this was 10 there's 10 steps to
240:48 - complete the animation it creates a
240:50 - stop-motion effect let's change that
240:53 - back to ease and out
240:57 - let's set the iteration count to be one
240:59 - the next timing function is for cubic
241:01 - bezier let's right click on our box
241:04 - inspect
241:05 - underneath our Styles tab look for
241:08 - animation timing function
241:10 - if we were to click on this purple box
241:12 - we can change the timing function
241:14 - currently it's ease and out
241:17 - and there's a little sample animation at
241:18 - the top
241:19 - this is fast out linear in
241:22 - ease out or by dragging and dropping
241:25 - this line we can make something custom
241:28 - like I don't know what this does
241:31 - to use this animation copy this line of
241:34 - text for cubic bezier replace the
241:37 - animation timing function
241:39 - with that line of text
241:42 - so now we have that custom animation
241:45 - I don't really know what to name this
241:46 - animation let's name it the Electric
241:48 - Slide
241:50 - for a final exercise let's apply an
241:52 - animation to an image
241:54 - I just so happen to have an image of
241:56 - Shrek let's have Shrek perform our
241:58 - electric slide animation
242:02 - let's replace our box with an image
242:05 - element
242:06 - set the source to equal the relative
242:08 - file path
242:10 - so Shrek is right next to my index file
242:13 - shrek.png
242:15 - let's copy all of these animation
242:17 - properties
242:19 - cut them
242:22 - we'll select our image
242:25 - then paste those animation properties
242:28 - now Shrek will perform that Electric
242:30 - Slide animation
242:32 - pretty cool right
242:34 - all right everybody that is an
242:36 - introduction to animations using CSS
242:40 - foreign

Cleaned transcript:

hey how's it going everybody in this series I'm going to show you everything you need to know to get started working with HTML then a little bit later on we'll cover CSS so why don't you go ahead and sit back relax and enjoy the show hey if you enjoy my videos please be sure to subscribe because subscribing is free just like how this video is free help me out yes I'm guilt tripping you that is all why should you learn HTML in today's age people spend way too much time on the internet myself included unfortunately knowing how to create or otherwise manage a website isn't a bad thing to know heck add it to your resume it really can't hurt even if you're not interested in web development as a career almost every business has some sort of online presence knowing how to manage that online presence could convince a potential employer to hire you over somebody else so why not HTML is an acronym for hypertext markup language the general idea is that certain types of tags also known as markup is used to convey to a web browser how some content should be displayed usually tags are in pairs with some content sandwiched between them header tags are typically used for titles P tags are used for paragraphs of text a tags are used for hyperlinks HTML adds structure to a web page if we were building a house you could say that HTML is the foundation the skeletal structure to support all content on a website then their CSS CSS means cascading style sheets it's a language that adds style to a web page in our house analogy CSS would be equivalent to the decorations design and colors of the Interior to begin working with HTML and CSS you'll need a modern web browser you can use Google Chrome Firefox Microsoft Edge Safari those are all fine you'll also need a text editor as well such as vs code it's free software that functions as a workbench for us to write code in this next part I'll show you how we can download and install vs code to download vs code head to this website code.visualstudio.com look for whatever operating system you're using and download that version I'm running Windows I will download the windows version then I will open it when it's done accept the agreement yes I did read it that fast next I'll create a desktop icon next install launch Visual Studio code and finish we need a folder to hold all of the documents related to our website go to Open folder I'll place this folder on my desktop new folder I'll name this folder website select folder there we go we are now within our website folder I'm going to create a new file I will name this file index.html whatever your home page is going to be I would recommend naming it index.html most servers return the index file as the home page so it would be good practice for us to name the home page index now what we're going to do is install the live server extension go to extensions look up live server and install basically what this does is that when you update your HTML file if you have a web browser open it's going to update automatically it'll save you some time all right everybody now what we're gonna do is fill in our HTML file at the top what we'll do is add a set of angle brackets then type this exclamation point doc type HTML this is a declaration that this document is an HTML5 document which is the most recent version then we'll create a pair of HTML tags we'll need an opening HTML tag and an ending HTML tag you can tell that this is an ending tag because it has a forward slash most tags are in groups of pairs that's if there's typically content between them this pair of HTML tags represents the root element of an HTML page between these two tags we will add a pair of head tags the head element contains information about your web page such as a title let's add a title to our web page title add a closing tag let's set the title of our web page to be my first website now what we'll do right click on your HTML file then open with live server here's our webpage the title says my first website just to make this easier on us I'm going to place our web page side by side with vs code when we save any changes we can see that update automatically the head element contains information about your web page whereas in the body let's add a pair of body tags after the pair of head tags the body element contains visible content in your web page between our body tags let's add a pair of H1 header tags H1 defines a large heading I'll add some text this is an H1 heading I'm going to save that should update my HTML document automatically this is an H1 heading let's try H2 add a pair of H2 header tags this is an H2 heading let's do H3 H3 this is an H3 heading H4 this is an H4 heading then we have H5 this is an H5 heading typically header tags are used for titles or other large text let's discuss paragraph tags if you have a paragraph of text you can place that within a pair of P tags thumb text goes here if you need some sample text to work with if you're using vs code you can type lorem then tab this will create some garbage text for you I think it's supposed to resemble Latin if I were to copy everything within the set of paragraph tags then save it paragraphs are separated with a line break otherwise if you do need a line break you can type BR meaning line break so this is a selfclosing tag pairs of tags usually have some sort of content between them with the line break that's a selfclosing tag we don't need a closing tag so add as many line breaks as you need wherever you need them so that's a line break there's also a horizontal rule which is HR think Human Resources HR that would add a horizontal line across your page that might look pretty good after a title paragraph tags don't care about any spaces or new lines I'm going to put all of this on separate lines just so it's more legible so when I save nothing appears to happen even if I were to add some line breaks between these sentences nothing appears to change you could always change your paragraph tags to pre meaning preformatted as in preformatted text that would retain any line breaks or spaces Within These tags it's up to you if you prefer the P tags or the pretags now the last thing I'm going to discuss are comments comments aren't displayed as output they're usually used as notes for yourself or for other developers you would type a left angle bracket exclamation point two dashes wherever your comment ends you would type two dashes right angle bracket this is a comment so when I save nothing appears to happen comments are used for yourself or for other developers that are looking over this document alright everybody well at this time let's go over an exercise just so that we have a solid foundation and really remember everything it'd be good practice for us we're going to create a separate HTML file that displays the lyrics of a song you like so let's create a new HTML file let's name this file lyrics dot HTML again we'll need to add this declaration doc type HTML that's a declaration that this document is an HTML5 document then we'll need a pair of HTML tags we'll need a head element and a body let's add a title to the head of our document title let's set the title to be my song lyrics then we will open this HTML file with live server my song lyrics pick a song that you like within our body tags let's add an H1 element this will be the title copy the name of your song place it within this pair of tags so that's the title add song by the name of the band or artist I'll use H3 header tags that's slightly smaller than H1 you know maybe H4 I think that'd be better I'll add a horizontal rule that's HR I'll add a pair of P tags take all of these lyrics copy them and paste them within the pair of P tags I'd like to retain the spacing let's change the P tags to pre tags for preformatted text that's much better let's add one line break after our horizontal rule one last thing I'm going to do within the pretags I'm going to add some blank lines between some of these verses there we go that's pretty cool I think we have the hang of basic HTML now in the next topic we'll discuss hyperlinks hey if you're enjoying this series so far please be sure to support me by Smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey everybody in today's topic I'm going to show you how we can create hyperlinks a hyperlink is a digital reference to data that a user can follow by clicking or tapping a button or link to create a hyperlink we will need a pair of a tags a means anchor then we'll sandwich some text between these two tags such as click me we're missing one thing what we'll need within the opening a tag is an attribute and href attribute an attribute is typically a name value pair that modifies the behavior of an element href means hypertext reference we're referencing something within the set of quotes we can list a web page or a file to link to let's begin by linking an external website like Google let's paste the URL within the href attribute save then when I click on this link it takes me to Google or some other website of your choosing based on what's within the set of quotes there are more attributes you can add as well they're optional another is Target Target equals if you set Target to be underscore blank this link will open this URL in either a new tab or a new window depending on your settings Google has opened in a new tab for me another attribute is title the title attribute displays additional information about the element as a tool tip I'll add a message goes to Google when I hover over this link we have a tooltip that states goes to Google that's an additional option too this URL is an absolute URL you can also list a relative URL So based on the last video we have an HTML file of song lyrics within our index file we will link to our lyrics file so let's create another hyperlink we'll need a pair of a tags meaning anchor we'll need some text song lyrics is good then we'll need an href attribute href equals these two files are right next to each other for a relative file path all we need is the file name lyrics dot HTML I'm going to add a line break real quick PR meaning line break then when I click on this link it takes me to my other HTML file you could add these additional attributes if you would like one last link I'll create a line break we'll create a link that begins the process of emailing someone we'll need a pair of a tags the text will be email me href attribute will be set to now to send an email type mail to colon then an email address I'll make up one test at fake.com when I click on this link we begin the process of sending an email to this email address however I'm not signed in so this is as far as it'll take me currently okay now for an exercise let's go to our lyrics HTML file open with live server let me zoom out based on the last project you should have a web page with some song lyrics that you like we'll create a hyperlink to the original video let's do that after the artist that would be right here but before the horizontal rule we'll create a pair of a tags I'll add some text or original video then you'll need to find the url for the original video for your song all right I will set the href attribute to B that URL the URL for a YouTube video so when I click on the link it now takes me to YouTube all right everybody that's a hyperlink it's a digital reference to data that a user can follow by clicking or tapping a button or link and those are hyperlinks in HTML hey everybody in today's topic I'm going to show you how we can add images to a web page using HTML so sit back relax and enjoy the show all right everybody here's how to add an image to a web page but you'll need an image to work with I have a picture of a dog I'll add that to my website folder next to my index file I have a picture of a dog to add an image we'll use a selfclosing image tag then set the source equal to B the name of your image including the extension mine is dog and this is a PNG file so this picture is fairly large you can change the dimensions with the height or width attributes I'll set the height to be 200 200 pixels now the width will adjust automatically however you could change that too if you wanted if I need this image to be a perfect square I will also set the width to be 200 however this does compress the image depending on the dimensions of your original picture you may need to change the height and or width I'll set the height to be 200 though then keep the width the same it'll adjust automatically now for some reason if your image isn't displaying let's say that I get the file extension wrong I'll say that this is a JPEG while the image won't display you can add alternative text with the alt attribute the alternative text you could say anything this is a picture of a dog this image doesn't display you at least display the alternative text now the nice thing about the alt attribute is that if somebody is visually impaired and they're using a screen reader the screen reader will read this alt description just to test my screen reader I'm going to add some text before and after this image as well let's add an H1 header tag this is a cute dog then I'll add some text after I'll use an H3 header tag woof woof I'll use my screen reader this is an extension on Chrome you can download my first website this is a cute dog this is a picture of a dog woof woof the screen reader read the alternative text for this image so it is good practice if you include an image to write a brief description of the image another cool thing you can do with images is that you can't turn them into hyperlinks I will surround our image element with a pair of a tags a meaning anchor then I will set the href attribute equal to a URL I'll find the Wikipedia page for dogs all right I'll copy this URL then I will set the href attribute to be this URL when I click on this image it takes me to the Wikipedia page for dogs so yeah you can turn an image into a hyperlink another cool thing you can do too is that you can include gifs in your web page this is my gift that I'll include I'll add that to my website folder I'll include a selfclosing image tag set the source equal to be the name of my image then be sure to get the file extension right this is a gif I'll set the height attribute to be maybe 200 as well height equals 200. then I'll add some alternative text alt attribute will be smiling dog gif now with a website you may have all of your images within a separate folder like this I'll go to new folder I'll create a folder named images then I will move my images to the images folder so my images are no longer being displayed we have our alternative text this is a picture of a dog and smiling dog gif with your Source attribute we're using a relative file path we need to navigate to the images folder then find the appropriate image files I'm going to precede these images with the name of the folder they are found within the images folder you may also need another forward slash for me either work let's move on to an exercise in the last few videos we were working on a web page for song lyrics Let's include some album art for my song that I picked I have a picture of the original album art that this song is found from I will move that to my website folder then I will move it to the images folder within my website folder I need a selfclosing image tag set the source equal to B we need to navigate to the images folder I will list that first Images slash the name of the file for me it's album cover dot jpeg then I'll change the dimensions I will set the height equal to B 200. I'll add some alternative text alt equals album art cover then a line break maybe two then I'll turn this into a hyperlink as well I will surround our image with a pair of a tags I will set the href attribute to be the original YouTube video where you can find this song so href equals the YouTube video that I linked before so this should take me to YouTube there we are all right everybody well that's how to include an image on a web page using HTML hey how's it going everybody in today's video I'm going to show you how we can include audio in a web page using HTML you'll need some audio files to work with one place you can download some MP3 files is the YouTube audio library find some songs that you like and then you can download them let's download three for this lesson once you have your three songs let's move them to our website folder alright we are ready to begin so to include some audio we need a pair of audio tags then between the audio tags let's include a source element with the source element there is a source attribute we will set the source attribute to equal the name of an MP3 file or other audio file so let me copy the name be sure to get the file extension and then I will paste that file the file name nothing appears to happen because we don't have any controls and the song doesn't play right away too so to add some controls within the opening audio tag type controls and that's it so we can now play our song or you can mute it fast forward it rewind it set the playback speed whatever you can set your audio file to auto play but people find that annoying so you should probably not do that if we do want our song to autoplay we should at least mute it using the muted attribute so our song is playing but it's muted until we unmute it yeah we can even have our song Loop by using the loop attribute so let me play this turn up the volume a little bit fast forward to near the end and let's see if it loops and it does cool now in case your web browser doesn't support a certain audio type you can add fallbacks so let's say that we also have a wave version of our audio file I can include that as a fallback right underneath but we should also specify the type just to let the web browser know that this is an MP3 file and that this is a WAV file I'll include the type attribute I will type audio slash MPEG I will also let the web browser know that this is a WAV file audio slash wave so just in case our web browser doesn't support MP3 files I'm pretty sure that they all do nowadays we will resort to our WAV file if we have a backup of the same audio file in wave format let's include our two other audio files so again we need a pair of audio tags within the pair of audio tags we will need a source tag a source element and I will set the source to equal the name of an audio file so let's copy the name of our second audio file including the extension add some controls and there's our second song let me pause the first one let's add the last one so here's the name of my last song be sure to get the file extension we have our controls and here's my third song I feel like I'm losing my mind hey for fun let's add the name of each of these songs right before the controls I'll use a pair of paragraph tags then I will copy the name of the song and sandwich the name between the paragraph tags so that's the name of my first song let's do this again with the second song and the third so here are my three songs just to make everything a little more organized I'm going to create a music folder within my website folder to hold all of my audio files I will create a new folder I will name this music I'll place all of my audio files within the music folder so we no longer know where the location of those audio files are because we're using a relative file path I'm going to set the source attribute to be music slash the name of the file we can locate those files now so that's our first song our second song and our third song that's how to include audio files in a web page using HTML if you're enjoying the series let me know by Smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey what's going on everybody today I'm going to show you how we can include a video in your web page using HTML alright let's get started everybody in this example you'll need a video file of one of a few formats you can use either an mp4 file webm or vorbis OGG I just so happen to have an mp4 file of me playing that new Zelda game Zelda tears of the Kingdom this is just some sample footage once you have your video file you're going to take it and place it right next to your index file within your website folder to include a video you'll need a pair of video tags within the opening video tag we can set a source attribute to B either the relative file path or the absolute file path of that video These two files are right next to each other I only need the file name my file is zelda.mp4 and there's my video but it's humongous we can change the height and or the width let's change the width to be 500 pixels that's a good size the height will adjust accordingly or vice versa if I were to change the height to be 500 then the width is going to adjust accordingly but let's keep it as 500. here's our video but there's no way to play it we'll need to add a set of controls with the controls attribute now we can play the video to have this video autoplay when the page loads you can set the autoplay property it should play automatically but if it is set to auto play you should at least mute it because people can find it annoying especially if this video is loud let's add the muted attribute so now it auto plays and it's muted to have this video Loop when it's done let me fast forward to the end I can add the loop attribute now it should Loop when it reaches the end right about here yeah and it's back to the beginning again just in case somebody's web browser doesn't support this video file you can add backups I also happen to have a webm version of the same video I'll place it within my website folder then within the pair of video tags we will add a source element take our source attribute cut it then paste it within the source element you can keep all the attributes within the opening video tag you should also tell the web browser what type of video file this is video slash MP4 now to include a backup we just need to use the source element again as a backup in case a web browser can't play my mp4 file we'll instead use the webm version zelda.web M the type is web m all right so let me delete the MP4 version to test it let's save and reload everything and now my webm version is playing you can't really tell the difference you also have the capability of turning this video into a hyperlink I will surround my video element with a pair of a tags then I will set the href attribute to some URL I'll set it to be the Wikipedia page for Zelda feel free to pick any page of your choosing with the href attribute I will paste that URL now when I click on this video it should bring me to the Legend of Zelda Wikipedia page to open this link I get it link because it's Legend of Zelda anyways to open this link in a new tab I can set the target attribute to be underscore blank then it should open in a new tab which it does all right everybody so that's how to include a video in your web page using HTML hey everybody today I'm going to show you how we can create a fabicon for your web page to create a favicon you'll need an image to work with here's mine I would recommend an image that's at least 96 by 96 pixels in width and height once you have your image we'll save the image to our website folder I'll right click save image as find my website folder let's rename this image favicon for a favicon most modern web browsers accept Ico PNG GIF JPEG and SVG image files so let's save our image my image is now within my website folder if you do need to make any graphical changes to your image you can always use a program like paint this is a builtin program with most Windows operating systems I'm pretty sure Mac and Linux have something like it too if I do need to change the dimensions on my image I can open it let's find that image it's within my website folder and here it is if you do need to change the size of your image you can go to resize you can either resize or skew your image my image is at least 96 pixels it's 176 for both the width and the height then you'll want to save your image afterwards to that website folder once you have your image we're going to create a link tag the link is selfclosing the link tag specifies the relationship between this document and an external source the relationship attribute will be icon because well we're adding an icon to our web page the type will equal image slash the type of your file so I have a JPEG I'll list jpg then we need an href attribute that will be the relative file location my image is within my website folder I just have to list the file name favicon.jpg let's take a look refresh everything and here is my favicon typically with the web page I like to place all of my images within one folder within my website folder I'll create a new folder named images and I'll place my favicon within my images folder so we no longer can locate that favicon I need to change the relative file path of the favicon because it's now within a separate folder preceding the name of my file I will list the folder that it's in Images slash favicon and there it is again all right everybody that's how to create a fabicon fear web page using HTML hey everybody today I will explain text formatting in html text formatting gifs text special emphasis we can create bold text italic text underline text so on and so forth let's begin let's create a pair of paragraph tags and between this first set of paragraph tags let's type this is normal text let's copy this line of markup and then paste it like 10 times okay I lost count whatever text you would like to add emphasis to you surround that with a pair of tags but there's different pairs of tags that have different effects for a bold effect we use a pair of B tags let's surround normal in the second line with B then change normal to the word bold this is bold text I is for italic so let's surround the next line with I this is italic text then underlined is u this is underlined text deleted text we would type d e l this is deleted text big big this is big text so this text is a little bit bigger than the other text surrounding it then they're small this is small text subscript type sub this is sub script text I misspelled that there the subscript text is smaller and it's just underneath the other text surrounding it then their superscript type sup like you're saying Sup like what's up this is superscript text then you have mono spaced which is TT this is monospaced text oops I forgot to close it this is a good example of why you should add closing tags because the markup will Cascade through the rest of your document so be sure to close any opening tags all right then the last one is Mark creates a highlight effect kind of like you're taking a highlighter and highlighting some text you can use CSS to change the color too I haven't really discussed CSS yet but to add a little bit of inline CSS within the opening mark tag take the style attribute set that equal to take the background Dash color colon then we can pick a color how about light green I think that would look good and our highlight effect is now light green or pick some other color of your choosing we'll discuss colors more when we reach CSS all right everybody so that is text formatting text formatting gives text special emphasis you can create text that is bold italic underline deleted big small subscript superscript model space and highlighted text and well that is text formatting in HTML hey how's it going everybody today I need to explain the span and div tags in HTML the span tag is an inline container to group elements for styling purposes the div tag it's very similar except it's a block container to group elements for styling purposes here's an example let's create two H1 titles this is a span title then close it let's copy this line of markup then paste it the second line will be this is a div title I'm going to enclose my first sentence with a pair of span tags so we need an opening span tag and a closing span tag somewhere all right with this set of span tags we are enclosing this text within a container it's an inline container we can apply some CSS styling to this sentence whatever is sandwiched between the pair of span tags let's change the background color of the title I will set the style attribute to equal background Dash color then pick a color how about red then a semicolon there so the background of my title is red but you know what that red is a little bright let's do tomato I think that's a better color whatever is enclosed with a pair of span tags we can apply some inline CSS styling too now with div this creates a block level container so I will surround this sentence with a pair of div tags div meaning division let's apply that same styling I'll copy my style attribute paste it let's change the color to B maybe cyan all right here we are this is a title using span this is a title using div span is an inline container div is a block level container it takes the entire width of my document you can see that this is all blue let's create a pair of paragraph tags this is a span sentence then close it let's copy this paragraph paste it again then change the second sentence to div all right let's enclose our first sentence with a pair of span tags all right I will set the style to be red well tomato tomato color technically it's kind of like we're highlighting the text much like the mark tags in the last topic let's copy this tag change span to div then the color how about cyan and then we need to close the div tag there we are all right now let's create two large paragraphs we need a pair of paragraph tags in vs code to generate some sample text you can type lorem then tab so I will copy this line paste it again let's say after the first sentence I would like to add a background color so right here I will add a Spam tag an opening span tag then where would I like to close it let's do so before the closing paragraph tag then I will change the background color all right we have highlighted the second sentence let's do this with div tags now with our next paragraph let's create an opening div tag then we'll need to close it somewhere let's close it before the closing paragraph tag and then I will change the background color within the opening div tag I will set the background color to be cyan what we have done is created a block level element for the second sentence within our paragraph basically speaking we can use the span and div tags to group together HTML for styling purposes span is an inline container div is a block level container we'll be using these more when we reach CSS and well everybody those are the span and div tags in HTML hey everybody today I'm going to explain how we can create different lists in HTML there's three different types of lists that we'll discuss today unordered ordered and description lists for an unordered list think of maybe a grocery list the order of items doesn't matter to create an unordered list you need a pair of UL tags UL meaning unordered list then between the pair of UL tags you need to list items Li means a list item so we have a little bullet point let's create a grocery shopping list maybe we need to buy milk let's create another list item we need another pair of list item tags let's buy eggs what else can we buy milk eggs bread and what about coffee there we are here's our unordered list each list item is bulleted hey let's add a title to this list preceding the pair of UL tags let's use maybe an H4 header tag let's say groceries here are the groceries I want to buy the order doesn't matter so we're using an unordered list now you can create nested lists too let's change coffee to Coffee supplies then after this list item we'll create another unordered list then we need more list items so for coffee supplies of course we would need coffee or maybe coffee beans now we have a hollow bullet point maybe you need some creamer for your coffee and or sugar so that's how to create a nested list within a list within your list you can create another list now let's go over order lists to create an ordered list you need a pair of ol tags meaning ordered list then you need some list items what about a todo list so we need a list item so number one that's first in our list we need to eat breakfast I'm going to add a title to so let's use a pair of H4 header tags this will be my two do list one we need to eat breakfast two go to school or go to class so that's number two number three after class you have to walk your dog then four maybe you have to go to work all right that is an ordered list use a pair of ol tags then lastly we have a description list this one's a little more tricky a description list is made of key value pairs you have a term and a definition to create a description list you need a pair of DL tags meaning description list we need some terms to create a term you type DT then close it so I play a lot of Dungeons and Dragons let's create some definitions for some mythological creatures like a dragon so that's my term let's create a few other terms dragon vnix vampire and werewolf so these are the terms underneath each term we can add a definition we'll need a pair of DD tags for description definition I'm gonna google each of these creatures then just paste the definition that I find so for a dragon I'm just gonna copy this definition then paste it within the DD tags here's my term and here's my definition of that term Dragon a mythical monster resembling a giant reptile sometimes shown as having wings let's do this with our other definition terms as well next we have Phoenix definition an immortal bird associated with Greek mythology we'll need a pair of DD tags add your definition then close it here's my second description definition then we need vampire and werewolf vampire creature definition let's copy this create another pair of DD tags then paste that definition here's the definition for vampire then lastly werewolf werewolf creature definition an individual that can shape shift into a wolf so DD close it add that definition and there's our definition for werewolf so that's a description list in a way it's made of key value pairs you have a term which is represented with description term then a description with DD description definition I forgot to add a title to this list let's do that I'll use a pair of H4 header tags let's make the title mythical creatures not bad let's add a background color because well we can I'll add a background color to the opening DL tag so style equals background Dash color what's a good color for this what about light green I haven't discussed borders yet but to add a border you can type border colon then a size maybe two pixels then there's different borders but let's go with solid for now here's a border around my list alright everybody so that's how to create different lists in HTML we have unordered lists ordered lists and description lists you can style your lists as well but we haven't really discussed much CSS yet but yeah those are different lists in HTML hey everybody today I'm going to show you how we can create a table using HTML let's create a table of store hours for a fictional business I'll create a title using H3 header tags the title will be store hours what are the hours of operation for our store to create a table we need a pair of table tags for the first row we need a pair of TR tags meaning table row so the first row is going to be filled with table headers how many columns do we have well if we have a table of store hours they're seven days in a week we will need seven pairs of table header tags so let's copy and paste these tags six additional times for a total of seven one two three four five six seven alright now for the First Column the header will be Sunday we have Sunday then Monday Tuesday Wednesday Thursday Friday Saturday so here's my first row the first row is your table headers add one header for each column in your table for another row we need another pair of TR tags meaning table row so for my second row I'll include table data we need TD tags so we'll need a total of seven on Sunday our fictional store is going to be closed I'll type closed as we can see that this data is underneath this header for the second row Monday the hours will be nine to five let's apply that for the other days besides Saturday Monday through Friday the store is open between nine to five Saturday will be reduced hours ten to two alright not too bad to align the table data what you're going to do is within the table row take the Align attribute set this to Center or otherwise if you would like to write justify it you would type right but let's stick with Center let's align the first row as well we can also add a border within the opening table tag set border equal to zero that's for no border then increase the number depending on the thickness that you want so one will give us a border that is this thick two and three let's stick with one let me move this a little these table cells aren't exactly the same size the word Wednesday has a lot of characters within each of these header tags I will set the width to be maybe 100. this column is a little bit larger now let's copy the width and make each header have a width of 100. okay this table is All Uniform now but if we were to shrink this window the cells would be compressed okay let's change the background color let's begin with the table I will set the style attribute to be a CSS property let's set the background Dash color to be black the whole table is black now so let's change the color for the headers and I'm just going to copy this style attribute let's change the first row to have a color of light blue we can at least see the text now and then for the second row let's pick a different color I think this color would be good Alice blue yeah that's not too bad if you need additional rows for your table use another set of TR tags meaning table row then you can add another set of data all right everybody that is how to create a table using HTML hello again everybody today I'm going to show you how we can create a button using HTML and a little CSS to create a button we need a pair of button tags and here's our button it's really small and it doesn't do anything let's add some text between the button tags let's add some text like click me so here's our button but it's fairly small we can change the size of this button by changing the font size we will need to access the style attribute then set the font size property to a larger font size so font Dash size 25 pixels is good the size of our button will adjust accordingly let's change the background color separate each of these CSS properties with a semicolon let's change the background Dash color to be Gray so that's how to change the background color to change the font color type color colon then some color like light blue you can round the corners by setting a border radius so that's another CSS property border Dash radius colon let's begin with five that will Round the Corner slightly you can increase the amount of pixels for a more rounded border let's try 25. that's not too bad so this button currently doesn't do anything what I'm going to do is turn this button into a hyperlink when we click on the button it will take us to maybe Google we need to surround our button with a pair of a tags I will set the href attribute equal to some URL like Google so when I click on the button it takes me to Google or if we had another HTML file we can go there too I'll create a new HTML file named maybe page two page2.html let's generate some HTML in vs code to do that type an exclamation point then tab all I'm going to add to page 2 is an H1 header tag with the title of this is page number two I'll set the href attribute to B the name of that HTML file page2.html page2.html when I click on the button it brings me to my second page I haven't discussed JavaScript yet but we can have a button execute some JavaScript code this part of the lesson is outside the scope of what I would normally teach at this point in time but if you're interested here's a little bit of JavaScript again it's not necessary to learn this at this level if you would like to execute some JavaScript code using a button we need a pair of script tags for JavaScript within this pair of script Tags I'm going to define a function function you can come up with some function name this function will do something then you need a set of parentheses then a set of curly braces buttons have an on click attribute we can have the button do something if it's interacted with the on click attribute is going to be the name of my function do something when we click on the button execute this function what do we want to do I'll change some text on the screen but we'll need some sample text to work with I'll create a pair of paragraph tags let's say hello within our JavaScript function we'll change the text of whatever's between these two paragraph tags but we need an ID there's an ID attribute I'll name this text maybe greeting so when we click on this function I would like to change the text of my greeting within the function we can do that with document dot get element by ID within the set of parentheses the ID is greeting follow this with DOT enter HTML then we can set the SQL to some new value let's set the new value to be good bye now when I click on the button it changes our text so that's a button everybody you need a pair of button tags you can apply some CSS styling I haven't really discussed CSS yet so we did inline CSS but if you have these many properties I would recommend a style sheet which we'll cover later to make your button bigger you can change the font size you could have your button bring you to another HTML page or even execute some JavaScript code and well everybody that's how to create a button using HTML hello again friends today I'm going to explain how we can create a form using HTML to create a form we'll need a pair of form tags the opening form tag has a few attributes we need to fill in first is an action attribute after submitting our form to what location do we want to send our form to form submission is done with the back end language such as PHP you might see a file name such as index.php or action page or something of that nature within your action attribute we're not actually going to do a form submission but just be aware that the action attribute sends data to this location to this file the file listed really can be anything but that's outside the scope of this lesson you'll also see a method the method attribute specifies if this is a get request or a post request post is used for confidential information such as a username and a password get is for insensitive data basically again this is outside the scope of HTML at this point in time if we have a form and we're sending sensitive data we should use post now let's create some elements within our form the first thing we'll create is a text box we need a selfclosing input tag so here's our text box by default the type is a text box but we can specify that with the type so type text there's other different types like passwords emails telephone numbers we'll cover that pretty soon we have a text box but if a user sees this text box they probably don't know what they should enter in let's add a label to the text box preceding my input tag I will create a pair of label tags what do we want our label to say maybe username we're telling the user hey we want you to enter in your username if somebody is using a screen reader if they're visually impaired we should add a four attribute what is this for well this is for my username another benefit of adding the four attribute to a label when you click on the label your cursor will move to the text box but we need a matching ID attribute within the input tag so the ID is going to be the same as the four attribute then when I click on the label our cursor moves to the text box there are a few other attributes you might be interested in as well but before we get to that we should create a submit button to submit our data at the end of our form we'll create an input tag the type will be submit it's a submit button but it currently doesn't do anything we're not using a backend language to submit form data to there are some useful attributes for text boxes within the input element for text box let's add the required attribute in order to submit this form we need to type in a password if I just leave it blank then hit submit we have this little prompt please fill out this field I can't submit this form until I type in something then I can submit it you could set a minimum and maximum length that's another attribute Min length equals then some length the minimum length for a username is six characters let's type in just three or some other number below six submit please lengthen this text to six characters or more I'll come up with a different username then submit and that appears to work you also have the capability of setting a maximum length with the max length attribute let's make the max length 15 characters so let's type in a username I'll add a bunch of characters afterwards so I can type in any more than 15 characters there's a maximum to reset your form there's a reset button let's copy this input tag paste it then change type to reset so here's my reset button I'll type in a username press reset then we can reset the data for our form but afterwards I'm just going to add a break line just to put the submit button on a new line with text boxes you can add a placeholder to give the user an idea of what we want them to enter in and in what format I'm going to add a place holder attribute what do we want our placeholder to be um I don't know SpongeBob SquarePants or maybe just SpongeBob so the placeholder is faded it gives a hint to the user as to the format in which they should enter in information if I were to click on this text box the hint is still there until we type in something okay let's cover passwords to create a password we'll use an input tag the type is going to be a password we should probably add a label to let the user know that we would like a password so I'm just going to copy the label that we have for our username the four attribute of our label should match the ID attribute of our input tag so the ID is going to be password the for attribute of the label will be password and then change the text to there we are I'm just going to change one thing after my password I'm going to add a break line so I will add that here all right so with the password the text is hidden I can type in a bunch of characters and you can't see it you could add some of these attributes as well like a minimum length maximum length and the required attribute so I'll copy those and paste them within the input tag from my password I can type in a username if I attempt to submit this form data without a password we have that prompt please fill out this field that's because we have the required attribute set there's also a minimum length and a maximum length set too I'm required to type in a password that's at least six characters long right now this is only five anything between 6 and 15 is okay for the rest of this demonstration I'm going to get rid of these attributes let's cover email next I'll create a label first this will be for email the text will be email then we'll need a corresponding input tag input type equals email for the ID I will also set that to be email I'll add a line break after then I'll add a placeholder s Square Pants at gmail.com again the placeholders letting the user know the format in which they should type in their information if I were to type in some text but we're missing that at sign hold on let me type in something real quick all right click submit we have a prompt please include an at sign in the email address because we're looking for a valid email address format that's input for email let's copy our label for phone the text will be phone number again we need an input tag the type will be Tel for telephone we need a matching ID that matches the four attribute phone I'll add a break element to the end we can type in a phone number I'll add a placeholder too placeholder equals with American telephone numbers you have three digits such as one two three dash then another three digits like four five six dash then four digits seven eight nine zero So currently we can type in any numbers then submit them uh hold on I need a username we can limit the format in which a user can type in some numbers for a phone number we would need a pattern attribute for the digits 0 through 9 within a set of straight brackets you would type 09 then how many digits do you allow afterwards three then we'll need a dash that's required add a dash then another three digits zero through nine zero Dash nine then another three digits Dash number zero through nine let me move this in a little bit then I would like four digits so now our phone number needs to be in this format three digits Dash three digits Dash four digits one two three dash four five six seven eight nine zero hold on I'm going to get rid of this required attribute just because it's kind of annoying right now one two three4567890 there that seems to work but if I were to type in a random amount of numbers well then we don't meet this pattern matching this pattern is required in order to submit this data all right then we have dates like a birth date we'll need a label this will be for a birth date four b day input type equals date the ID should match the four attribute of the label then I'll add a break element so with dates there's an interactive calendar to select a date pretty simple then we have a number element a user is going to enter in a quantity like they're buying something like how many do you want let's change the text to quantity for quantity we need an input element the type will be number ID equals quantity then I'll add a break so here's our quantity we can use these arrows to go up or down however normally you can go into negative numbers we can set a minimum and a maximum with the Min and Max attributes so the minimum will be zero we don't want to go below zero the max I think 99 is good so we can't go below zero but we can go all the way to 99 and no further you can add a default value with the value attribute I'll set the default to be one that is for number input it's good if you need a quantity of something all right then radio buttons radio buttons are a little tricky with radio buttons you can only select one from a group I think a good label will be for a title are you a mister a miss a doctor whatever like what's your title so title for title we have our title so far then we'll need individual buttons I'll create a label for Mr Miss and doctor Mr Miss in the U.S doctor is p h d the four attribute will be Mr for Mr Miss for Miss then p h d for PhD I'm gonna get rid of these colons so after each label we'll create a radio button input type equals radio the ID will match the four attribute of the label we have Mr then we'll want to add a value to when we submit this form so mister okay let's copy this input then apply it to miss add PhD so type radio ID will be Miss value Miss then we have PhD ID will be PhD value PhD so we have three radio buttons um let me just add a break afterwards with a group of radio buttons you should only be able to select one however we can select all three that's because we need to add all of these radio buttons to the same group we're going to add a name attribute we'll name this attribute title whichever radio buttons you would like in the same group they need to share the same title now we only can select one those are radio buttons okay let's create a drop down menu this will be for a payment like what kind of card are you paying with is it a Visa card MasterCard gift card four payment instead of an input element we're going to be using a pair of Select tags for a select element then add a break afterwards so we have a drop down menu but there's no options we will add option elements within our select element so these have opening and closing tags let's create three options an option for Visa Mastercard then gift card for option one the value will be Visa the text will be Visa so we have one option let's add two more value MasterCard the text will be MasterCard then a gift card value equals gift card the text will be gift card then I forgot to add an ID to the opening select element ID equals payment there we are all right so that is a drop down menu you need a pair of Select tags within the select tags you can create option tags then we have a check box again let's create a label this will be for a check box I think a good use of a checkbox will be a subscribe button the four attribute will be subscribed the text will be subscribe we'll need an input element input type equals check box the ID will match the four attribute of the label then add a break element after I can subscribe by checking the check box or by clicking on the label this one's a little tricky we're going to create a text area again we'll need a label the text next to the text area will be comment for comment we'll create a pair of text area tags so we have a text area the ID of the text area will match the four attribute of the label so comment you can change the dimensions of your text box by adjusting the rows and columns I would like three rows rows equals three columns that will be 25. so now we have different dimensions for our comment you can type in anything you suck bro code that's how to create a text area for a file submission again we'll create a label we're kind of following the same pattern file for file again we need an input tag input type equals file the ID will match the for attribute of the label file then I'll add a break so now we can choose a file however by default we can accept all files to limit the type of file that you're looking for there is an accept attribute what file types will we accept Let's do an image for a PNG that would be image slash PNG when I choose a file we're looking for a PNG now you can add more than one file type each file type is comma separated let's also look for any jpegs so that would be jpeg so now we're looking for a bunch of files anything within this range now if you're sending a large amount of data there's one change we'll make to the form we're going to change the encryption type within the opening form tag let's say we're sending an image and the image is a large file so we will set the encryption type equal to B multi part slash form data in simple terms when we send our large amount of data we'll break it into multiple parts then when all of that data is received those multiple parts will be reassembled it's a little more complicated than that but at this level that's all you need to know so if you're sending a large file such as an image I would recommend changing the encryption type to multipart slash form data all right everybody so that's how to create a very basic form using HTML it really doesn't look too pretty right now you can always style it with CSS which we'll be covering very soon and well yeah that's how to create a form using HTML hello again friends it's me again today I will show you how we can create both a header and a footer for your web page header and footer elements are both semantic tags they describe their meaning to both the web browser and the developer they help organize your content and CSS properties can easily be applied to anything within these containers headers are used for introductory content at the top of your page such as a title a subtitle a logo a navigation bar but we haven't really discussed navigation bars yet Footers act as a container for holding concluding content at the bottom of your page such as an author a copyright or some contact information like a phone number or email alright so let's begin to create a header within our body we need a pair of header tags then for a footer you need a pair of footer tags personally what I like to do between the header and footer tags I'll create a pair of main tags for all of the main content within our web page it helps with organization we'll begin with the header though the header element is a container for holding introductory content at the top of our page this is where you may see a title like an H1 header element for our H1 header I think welcome to pick your name or your business or organization I'll just use my YouTube channel name a header is a good container to hold the title for your web page you could include a logo or a navigation bar navigation bars are a little tricky we do need to know a little bit more CSS for navigation bars but let's include some hyperlinks and make like a really basic navigation bar okay href equals I won't set a location it's not really necessary for this example we'll just have a hyperlink that goes nowhere so we have home let's create three more hyperlinks home about us products and contact us the header of your document it also tends to be a good place to hold navigation links to then to make this a little more fancy I'm going to add a horizontal rule with a selfclosing HR tag okay that's not bad another use of header and footer elements is that it makes CSS styling a little bit easier I haven't yet shown how we can apply CSS style sheets we're going to use a little bit of inline CSS all I'll do is change the background Dash color to be whatever color you want I'll pick medium purple anything within the header I would like to change the background color to purple or you could change the font or the font size anything else it's very helpful to put your content within a container So within my main section I'll include an image I do have one ready feel free to follow along if you want within my main element let's begin with the title for the main content I'm going to use a smaller heading like H4 what would be a good title for the main content check out these cool moves maybe I'll use a colon I'll include an image we need a selfclosing image tag The Source will equal the name of my file including the extension and it is good practice to add some alternative text profile pic is good so there's my image then I'll add some text within a paragraph we need a pair of P tags I'll generate some sample text in vs code you can type lorem then tab and here are some sample text so that is the main content of my page lastly let's work on the footer the footer is a container for holding concluding content at the bottom of your page I'll begin with a horizontal rule because I think that looks good let's include some information about the author author colon type in your name I'll add a line break after so we have author then a copyright symbol using HTML to include the copyright symbol you can Type ampersand copy semicolon so we have a copyright symbol I'll add the text copy right reserved then add a break then I'll add an email this will be a link we need an anchor tag set the href attribute to be mail to colon then an email address I'll make one up bro code at fake.com close the anchor tag then I need some text bro code at fake.com feel free to use your own email I'll make my email a little bit smaller by using a pair of small tags so I enclose our hyperlink with small there we are and I'll change the background color to with the style attribute within the opening footer tag I will paste that style attribute I'll pick the same color of medium purple alright everybody so those are headers and Footers they help organize your content as well as make applying CSS a little bit easier because you can Target everything within the header or footer elements and those are headers and Footers in HTML hey hello again friends today I'm going to explain how we can get started working with CSS so sit back relax and enjoy the show CSS is an acronym for cascading style sheets we're able to apply CSS properties to color style or otherwise decorate our HTML markup there's three different ways in which we can apply CSS inline internal and external we'll begin with inline suppose we have an H1 header tag with the title of this is my website let's create a few paragraphs we need a pair of paragraph tags we need some sample text I'll type lorem then tab I'll copy this paragraph then paste three additional paragraphs so we have a total of four to apply some CSS styling to one of these elements for example the body of our document we'll select the opening tag set the style attribute to B we can list one or a few CSS properties let's change the background Dash color of our body to be black the background is now black let's change the font color of the H1 heading style equals color that's for the font color let's pick White then we'll do this for the paragraphs this is an example of inline CSS within the opening tag of one of your elements you can change the style attribute then list one of many CSS properties another method of applying CSS is internal as in an internal style sheet I'll undo these style attributes to apply an internal CSS style sheet within the head of our document we need a pair of style tags whatever elements you would like to apply CSS to you would list that within the style tags if I would like to Target the body of my document I would type body then a set of curly braces list your properties between the set of curly braces let's change the background Dash color of the body of my document to be black let's change the H1 heading H1 curly braces then I will list some CSS properties color white then let's change the paragraphs P curly braces we're selecting all of the paragraphs color white so that's an internal style sheet within the head of your document you need a pair of style tags list the element you would like to select add a set of curly braces then list one or many CSS properties let's remove the internal style sheet now we'll create an external style sheet external style sheets are probably the most popular method because we can make a style sheet that's reusable to create an external style sheet within our website folder we're going to create a new document I'll name this document style dot CSS we need to link this style sheet to our HTML file we can do that within the opening head tag by using a link tag we need to set the relationship attribute to b style sheet we're letting the web browser know that we're linking a style sheet then we need an href attribute set to the relative file path of our style sheet that are right next to each other I only need the file name including the extension style dot CSS we have now linked this style sheet to this HTML file using this external style sheet we can select specific elements from our HTML file and apply CSS properties we will select the body of our document body curly braces I would like to change the background Dash color to be black let's change the color of the H1 header tag color colon White then the paragraphs P curly Braces Color colon White if you do need to apply CSS properties to one specific element such as this first paragraph We can create an ID within the opening tag ID equals think of some unique name I'll name the first paragraph P1 let's do this with the other paragraphs the second paragraph will be P2 the third will be P3 the fourth will be P4 I'm going to delete these lines to select an element by ID you'll use a hashtag then the ID so P1 what would I like the color to be let's change the color to red I'll select another ID P2 curly braces I'll change the color to be orange P3 color will be yellow P4 color will be green you can also apply CSS Properties by a Class A group within each of these paragraph tags I will add the attribute of class the first paragraph will be odd it's an odd number the second paragraph will be even the third paragraph will be odd the fourth paragraph will be even to apply any CSS to a class Guild type dot then the name of the class any elements within the odd class let's change the color to be red the first and the third paragraphs are both red because they belong to the odd class we apply to the color red to anything within the odd class by using dot then the name of the class let's change any elements within the even class to be blue if we're selecting a class we type dot the name of the class even in this case we'll change the color to be blue the second paragraph is blue along with the fourth they're both part of the even class another nice thing about external style sheets is that you can apply them to more than one HTML file let's create a second HTML file I'll name the second file page2.html to generate some boilerplate HTML within vs code you can type exclamation point then tab I'll open page 2 with live server this is page two I'm just going to copy all of this and make a few changes paste everything within page two let's change the title to be this is page two and we have three paragraphs this time we have our index file and page two to link an external style sheet to page two again we need that link tag set the relationship attribute to B style sheet then the href attribute will be the relative file path they're right next to each other I only need the file name style.css now when I save and refresh the page we have applied all of our CSS from the style sheet to page2.html external style sheets are reusable so they're pretty nice and convenient alright everybody so that is an introduction to CSS with CSS you can change the font the color add decorations we'll get more into that soon you can apply CSS inline with an internal style sheet or external style sheet and that is an introduction to CSS foreign CSS colors to our website so sit back relax and enjoy the show we'll need four paragraphs to begin with I'll name the first paragraph P1 the second will be P2 followed by P3 then P4 we can change the background color of an element or the font color let's begin with the background color of the body of our document within our external style sheet I will select our body element I'll change the background color property to be now with colors we can use names we can use RGB values hexadecimal values or hsl values for the first example we'll use named colors there are multiple sites in which you can find named colors let's go with this one slate gray background color slate gray save your changes and there you go the background color is now slate gray let's change the font color of our P1 paragraph I will select the ID of P1 I will change the color that's the font color to be do they have tomato yes there is for P1 let's change the color to be tomato because I like tomatoes those are named colors another option is RGB values for paragraph two we will set the color to be a set of RGB values RGB then a set of parentheses R meaning red G meaning green B meaning blue I would recommend looking up a Color Picker for this I would like a light bluish color so let's select uh that's good you'll find a set of three values for RGB these values range from 0 to 255. we will paste those three values within the set of parentheses and there's that blue color let's do this with the background color too let's change the background color from a named color to RGB values RGB parentheses let's go with whatever color this is 41 41 41. and there's that new color then we have hexadecimal values for P3 we will change the color to B some hex value let's go with a green color that's decent hexadecimal values are a combination of numbers and letters the letters range from a to F we'll copy this hex value then paste it hex values with CSS should start with a hashtag and there's that green color let's change the background color again let's go with the lighter color this time 54 54 54. there we are okay lastly we have hsl values or P4 color colon now if you're using vs code here's a little trick we can pull up a Color Picker let's type a color like black click on the box and there's a Color Picker that's built in for hsl we can click the top bar here H meaning Hue s meaning saturation l meaning lightness let's go with the purple color we have one value then two percentages let's change the background color again using hsl I'll pick something a little bit darker that's good all right everybody so in conclusion with CSS colors you can pick either color names RGB values hexadecimal values or hsl values through the remainder of the series we'll be using hsl and well everybody that's an introduction to CSS colors hey how's it going everybody in today's video I'm going to show you everything you need to know to get started working with fonts and Google fonts in CSS so sit back relax and enjoy the show alright let's get started everybody we will need an H1 element why don't you go ahead and type in your name if your full name is pretty long just use your first name I guess and we'll need a paragraph to generate some text and vs code you can type lorem then hit tab that is good enough for now to change the font style we will go to our CSS style sheet I'll select our H1 element to change the font we can set the font family property then pick a font I would recommend a Sans serif font serifs are these little projections on each character after each brush stroke Sans serif fonts don't have these projections Sans serif fonts are easier to read on a monitor or mobile device I'm going to pick the Sans serif font of verdana now not all fonts are universally accepted by all web browsers for some reason if we can't display verdana it's good practice to have a fallback font one that's web safe so to add a fallback after your primary font separate each font with a comma let's pick Ariel if a web browser can't display verdana the next available font is Ariel that's why you may see two or three fonts listed for a font family they're all fallbacks let's change our paragraph element I will set the font family to be lucida console if the font name contains any spaces you can just place the font name within a set of quotes for a fallback I'll use Courier new if we can't display the first font we will use the backup font now to change the font size there is a font size property normally it's 16. but you can adjust that number here's 18. here's 14. here's one it's really tiny you can barely even read it like at all another unit of measurement is em think of em as the standard one em means one hundred percent it's the normal size 1.1 em is 110 1.5 is 150 percent 0.5 is 50 percent you may see either pixels or em as a unit of measurement for the font size let's stick with one em you can change the font weight normally this is normal you can change that to bold if you so choose there's also font style again it's normally well normal you can change that to italic that's enough for basic fonts now I would like to introduce Google fonts head to this website fonts.google.com this website is free to use find two fonts that you like you can also narrow down your search too for example I do not want any serif fonts because they're difficult to read on a monitor I'll just use these two for convenience I'm going to open these in a new tab all right we have Roboto and open Sans I'm going to select one of these fonts I'll go with 400 regular I'll press the plus sign next to this font and we'll do so with our second font I'll go with light 300. to use these fonts we need to link our HTML file with the style sheet we can access that style sheet by going to view selected families be sure that this radio button is selected for link then we will copy this link within our HTML file within the head element I will paste that link we now have access to those two fonts my first font was Roboto my second font I already forgot the name of it open Sans and there we go that's how to link to the Google fonts API now if you do prefer these fonts can be loaded from either a remote server or locally installed on a user's computer for convenience I'm going to create a new folder within my website folder named fonts then heading back to Google fonts view selected families I will download all once we have our file it's a zip folder I'm going to unzip it we are looking for these ttf files they look something like this all we need to do is drag and drop these ttf files into our fonts folder I forgot which one I used I think it was a Roboto light these fonts are available locally we no longer need to link to the Google fonts API we can delete that link so now what we need to do is go to our style sheet and create a font face rule we'll begin with the first font at the top of our style sheet type at font Dash face curly braces we will set the source attribute to be a URL then add a set of parentheses the URL is going to contain the relative file path to one of these fonts I would like Roboto so I'm going to copy the file name this is within the fonts folder I'll place that first then paste the name of that file then a semicolon at the end I'm also going to set the font family property then I can come up with the name for this font I can keep it the same or change it I'll keep it the same though this font shall be known as Roboto light for my H1 element I will change that to B Roboto light that has appeared to work even though we're not linked to the Google fonts API let's add another font face rule we will use our second font fonts slash whatever the heck is listed here I'm going to rename this this font shall be known as open Sans so we need to change the font for our paragraph to that new font there we are all right everybody so that's a few different ways in which you can work with fonts in CSS hey how's it going everybody in today's video I'm going to explain borders in CSS we'll need some sample elements to work with I recommend creating an H1 header tag type in maybe your name and a paragraph we'll need to pair paragraph tags I'll generate some text by typing lorem then hitting tab let's go to our CSS style sheet let's add a border around our H1 element H1 curly braces we can select a border Style with the Border Dash style property first we have solid our border is a solid line there is dashed we have a dashed line dotted double for a double border Groove Ridge inset out set or none if something has a border naturally you can remove it let's pick a solid border you can change the width of the border with the Border width property border Dash width by default it's one let's increase that to two or even three four five border width is for the Border thickness I think three would be good for this example you can change the color with the Border color property then pick a color I'll use the builtin Color Picker and use hsl values let's go with a purple color something like that's good you can even round the corners with the Border radius property border Dash radius the higher the number in pixels the more rounded the corners are going to be that's five this is ten fifteen 20. okay just out of curiosity what if we do like 100 okay it seems like there's a maximum you can only round at the corner so far so it looks like the max is 20. all right there's also a shorthand syntax in place of listing three different properties for the style width and color we can do that all at once let's eliminate these three lines we'll use shorthand syntax for the Border I would like three pixels solid then I'll list a color and use the Color Picker again I would like purple I don't quite remember what we had but it was something like that yeah that is the shorthand syntax you type border the Border width the Border style then the Border color but border radius is still a separate property let's add a border to our paragraph now we will select the P tag there is directional shorthand syntax if you want just one of the borders let's begin with the bottom border Dash bottom then we can list a border with border style then a color and this would only apply to the bottom border of our paragraph let's go with three pixels solid then red but I'm going to pick a more specific kind of red there we go so that is border bottom we're only applying a border to the bottom of our element then there's border top border Dash top let's go with three pixels solid again then a color I'll go with yellow there we are border left three pixels let's try dotted this time then orange that's good then border right border Dash right three pixels dotted again then I will pick Green maybe like a light green there we are then we'll set the Border radius as well this would apply for all of the borders let's try 10. not bad alright everybody that is how to create CSS borders hey everybody today I'm going to show you how we can create text shadows and box Shadows we'll need some sample text to work with I'll use an H1 element type in your name and we will need a div element we will eventually create a box I'll give this div an ID of box one good enough I would like to give this H1 element a shadow I will select my H1 element I will set the text Shadow property to be we need two numbers a horizontal offset and a vertical offset let's do one pixel and one pixel we have an offset to the right of one and down by one if I were to increase the horizontal offset let's change this to 2 while the shadow is moving more to the right let's try five 10 50. the first number is for the horizontal offset let's change that to three the second number is for the vertical offset if I change that to five well the text is going more downwards 50 would be this all right let's keep that at three though you could add a third number for a blur here's a one pixel blur two three four five if this is a really large number like 100 you can't even see the shadow anymore let's stick with five that's a decent amount you can even change the color too let's pick a red color that's good you can add more than one Shadow within the text Shadow property for more than one Shadow effect each Shadow is comma separated so add a comma afterwards let's copy what we have paste it again I'm gonna give the second Shadow a negative offset so it's up and to the left I'll change the color so it's more distinct let's go with the blue color yeah I don't like that one yeah that's fine all right now let's cover box Shadows let's select our ID of box one I'll give this box a width of 100 and a height of 100 let's pick a color too background Dash color let's go with a whitish color so it's just barely visible something like that's fine for other elements besides text we have box shadow and really it's the same process as before we have a horizontal offset let's do three pixels a vertical offset let's do three pixels again a blur let's do five pixels and a color if we so choose but I'll keep that the same now our box has a 3D pop effect which is pretty sweet all right everybody so we have text Shadows for text and box Shadows for other elements and well everybody those are shadows in CSS hey how's it going people today I'm going to explain margins in CSS margins are the space around an element I'll create an H1 element type in your name or something that's kind of short and we'll need a paragraph I'll generate some text by typing lorem then hitting tab let me just zoom in a little bit to give you a diagram of margins I'm going to right click our H1 element and go to inspect at the bottom of my elements window we have this diagram it kind of resembles an onion because it has layers we have the element itself and its Dimensions padding border then margins padding is between the element itself and any borders margins are the area outside of any borders today we'll be working with margins the area outside of any elements let's close this window naturally there's a few pixels of margin around our body the letters in our H1 element and our paragraph aren't directly next to the border of our window so we can eliminate that we will select the body element within our CSS style sheet we will set the margin to be zero pixels so now the letters are directly next to the edge of the web browser and if I were to expand this you can kind of see that so that's all that margin is it's the area outside of an element to give you another example let's delete our H1 element along with our paragraph we'll create two div boxes we need two pairs of developments I'll create a class for each of these divs class box then they will each have a unique id id equals box one the ID for the second box will be box two and then I'll give each of these some text box one box two all right now let's style these boxes so after our body element let's select the Box class anything that's a box let's add a border 5 pixel solid is fine I'll change the font size to be 5 em with 250 pixels height 250 pixels and I'm just gonna zoom out a little bit until our view is at 100 let me color box one in box two we are selecting the ID of box one for the background color let's set that to be red but let's select a more custom red because it's cool all right then box two will be blue all right there are marginal directions we can apply margin to the top of an element the right the bottom or the left or all sides with box one I will set the margin top property to be 50 pixels that's going to add 50 pixels of margin at the top of this element box 1. there's also margin bottom now there's 50 pixels of margin after box one margin left the margins now on the left margin right the margins now on the right but you can't see that because divs are Block Level elements they take up the entire horizontal space you could apply margin to L sides evenly just with margin so margin 50 pixels that applies 50 pixels of margin to the top right bottom left so if we were to apply this margin to a class like the Box class both box 1 and box 2 will have 50 pixels of margin around each element there's also margin Auto it is possible to set an element's margin to take up the entire space I can take any of these elements such as box 1 and push it all the way to the right of my web browser using margin left margin Dash left then I will set it to be Auto the margin on the left side of box 1 will take up as much room as possible so vox1 is going to stick to the right hand side of the web browser margin right won't appear to do anything because it's already left Justified now if you would like an element to stay in the center of your web browser you can just set margin to be Auto so box one is going to stay in the middle of my web page if I were to apply this property to the Box class that will affect Box 2 as well so now box 1 and box 2 should stay in the middle of my web browser alright everybody so those are margins in simple terms it's the space around an element and that is an introduction to margins in CSS all right let's get started everybody so the float property the float property allows other elements to flow around it this is particularly useful with images and Block Level elements like div sections in my example I have a box that's made out of a div element it occupies the entire width of the space in my web browser any elements afterwards are kind of pushed underneath it is possible utilizing the float property to have this text wrap around this Block Level element and we do that with the float property here's what we're going to do for this demonstration you will need two images I have an image of a Pokeball and another one of Pikachu feel free to pick your own images we're going to insert an image an image is a block level element I will set the source equal to B the name or the relative file path of that image so mine is pokeball.png but I'm going to change the height so it's a little bit smaller height equals let's try 150. I'm also going to create a few paragraphs of text in vs code you can type lorem then press tab to generate some text I'm pretty sure you know that already though let's create four paragraphs one two three four my first image is taking up the entire width of my viewport all this text is being pushed underneath to make this text wrap around this image and occupy that space we will set the float property of the image I'm going to give this image an ID though ID image one IMG one for short within my style sheet I will select the ID of image one set the float property to either left or right we'll begin with left though then save everything all of those paragraphs are now wrapping around the right side of my image because we're floating left I'll add a little bit of margin though on the right hand side margin right I think 10 pixels is fine and that looks pretty good you can also float an image to the right let's change float to be right and now the image is on the right hand side if I were to adjust the size of my window the text just flows around the image which looks pretty nice all right let's change that back to left let's create a second image we'll place the image between the second and third paragraphs so my second image is pikachu.png pikachu.png the height will be the same I'll give this image an ID of image two this image isn't floating again the text is not wrapping around the image let's take image two we will float this image to the right I'll add some margin to the left as well margin Dash left let's do 10 pixels yeah there we go that looks pretty good basically speaking the float property allows other elements to flow around it now there is one thing I want to show you I'll add a border around the body of our document let's select our body element I will create a border that is three pixel solid now check this out with my second image it's overflowing outside of the container that it's in the body of my document there is one change we can make to our container our body with our container I will set the display property to be low Dash root now anything that's floating will stay within the container it's not going to overflow Pikachu is still within the Box alright everybody in conclusion the float property allows other elements to flow around it and that is the float property in CSS hey what's going on everybody today I'm going to explain the Overflow property in CSS the Overflow property sets the defined behavior when content does not fit in the parent element box meaning it overflows there's five states visible hidden clip scroll and Auto here's an example let's create a div element then within this development I'll create a paragraph I'll generate some text then going to our style sheet I'll take our div then give the stiff a border of 2 pixel solid I'll also limit the height height 75 pixels now we have a problem the content of our paragraph is overflowing out of our div we have a couple different ways of handling this with the Overflow property by default overflow is set to visible there is going to be no apparent change basically we're stating if any Inner Elements will overflow allow it to do so that's why you see this text overflow out of our box our second state is hidden with hidden any content that will overflow outside of our box will be hidden we can no longer see it however we can still interact with it for example if I were to copy and paste all of this text well we still have the full text available now clip clip is very similar to Hidden there's no apparent change with overflow set to clip it's used in tandem with the Overflow clip margin property using this property we can set how far this content displays or overflows outside of the box if I were to set overflow to be 13 pixels this content will overflow by this amount 13 pixels then the rest is hidden it's very similar to Hidden but it's used alongside overflow clip margin then we have scroll with scroll our box contains a scroll bar both vertical and horizontal we can use the scroll bar to see the entire length of our content if there's not enough content within this container for example I'll delete most of these words well we still have that scroll bar although it's disabled if you set overflow to auto if you don't need the scroll bar either horizontal or vertical it won't be displayed until you do need it so let me undo these changes now that scroll bar is displayed that's the use of overflow Auto all right everybody so that's the Overflow property it sets the behavior for a parent element when the content doesn't quite fit you can set this property to be visible hidden clip scroll or Auto and that is the Overflow property in CSS hey what's going on everybody today I'm going to explain the display property in HTML and CSS now HTML elements they have a default display value they're either Block Level or inline an element that is Block Level starts on a new line and takes up the entire width available inline elements do not start on a new line the width of that element is limited to what is needed a few examples of Block Level elements would include but are not limited to header elements developments paragraph elements form elements header elements and footer elements inline elements include but yet again are not limited to span elements anchor elements and image Elements by utilizing the display property we can specify if and how an element is displayed we can set an element to be a block level inline inline block or not displayed at all here's a few examples we'll create a development with the inner text being div and a span element with the inner text being span let me zoom in a little let's go to our style sheet for my development I will set the background color to be red do for my span element I will set the background color to be blue that's good div is a block level element it's going to take up the entire width available span isn't it only takes up the necessary space needed to display that element even if I were to extend the width of the browser my div element takes up the entire width my span element stays the same because it's in line we can apply a width and a height to a block level element like this width will be 100 height will be 100. however for an inline element the width and height wouldn't apply you can see that our span element stays the same size by utilizing the display property we can change the behavior of these elements how they're displayed if I set my div element to be block well it already is a block level element there's no change if I set my span element to display as a block level element well then we can apply a width and height these two elements are displayed as a block all of this extra white space is allocated for each of these elements their Block Level if I were to create a paragraph let me shrink this a little bit I'll create some sample text I'll type lorem then hit tab these are not within paragraph tags just so you know all of the space is reserved for my Block Level elements that's important later now let's go back to our style sheet if I change the display property to be in line guess what's going to happen well both of these elements are in line now we can't apply width or height properties to these elements they only take up as much room as necessary all other content is displayed in line with them then there's inline block it's much like inline but we can also apply a width and a height these two elements are no longer taking up the entire width of my viewport if I were to increase the size of my window we can display content in line with these inline blocks you can see that the text is lined up then there's none will effectively erase that element as if it's gone if I revert these displays to inline block there's also the visibility property which is fairly similar to display if I set visibility to be hidden with our div element this element is hidden but it's still taking up space as if it was still there it's kind of like it's invisible whereas in if display was set to none it's as if it no longer exists the next element will take its place all right everybody that is an introduction to the display property we can display elements as a block inline inline block none or by utilizing the visibility property we can hide them and that is an introduction to the display property in CSS hey what's going on everybody today I'm going to give you an introduction to the width and height properties in CSS all right let's begin everybody we will Begin by creating two div elements and each development will have a class of box within our first box let's create an H2 header with the text of this is number one and we'll create a paragraph underneath to generate some text in vs code you can type lorem then hit tab all right let's copy our div paste it change number one to number two and that's where we're at So within our style sheet we can set a height and a width for an element an ID or a class so let's take our box class dot box I'll add a border border 2 pixel solid just so that it's easier to see here we are okay normally with the height by default it's Auto we don't need to explicitly state that you can see that there's no apparent change when I reload the page so the height is going to be calculated automatically when we render our web page but you can set an explicit height for example 100 pixels that's a little too small our content is kind of overlapping let's change that to 200. now it's a little too big but it is possible to set a fixed height so let's set height back to auto now we will change the width so with the width we can set a number of pixels for example 100 we would have two very long skinny columns and they're right on top of each other that's because divs are Block Level elements we'll Reserve this entire space for each of these developments because they're Block Level so let's change the width to 200 and see what happens now they're more of a box shape if I set width to be Auto the width will be calculated automatically and like I said that's the default these Block Level elements want to take up as much width as possible kind of like your mom if I changed width to be 50 the width of this element will take up 50 percent the width of our viewport but we're still allocating all the space for each development because they're Block Level if I were to use the float property let's float to the left the reason that these elements aren't floating there's still not enough space to place Box 2 next to box one because we have our border our border takes up two pixels if I were to remove the Border they should display back to back which they do you do have to take in the width of the Border when calculating the width the same thing applies with padding let's apply a little bit of padding padding 25 pixels now we have 25 pixels worth of padding between our content and the Border I mean it looks nice right when calculating the height or the width we can disregard any padding or any borders but we have to add this property we'll add box Dash sizing border Dash box when we calculate the height or the width we're allocating disregard any padding or any borders the Box sizing property will take that into consideration we can now fit these elements right next to each other the width of each box is 50 and they both have borders and padding what you also might see with box sizing is that what some people like to do they'll use an asterisk as a selector that means all elements and then they'll apply the Box sizing property to all elements because well it can be kind of annoying to calculate width and Heights while factoring in padding in borders as well all right now if we were to float right box one is on the right Box 2 is on the left let's undo that you can set a minimum height and a minimum width as well so with our two boxes let's get rid of our paragraphs I'm going to text align Center just to Center our text this is number one this is number two if I were to set the max width to let's say 25 percent even though we stated the width should be 50 the max width is going to cap that out at 25 you can see that the sizes of this box have shrunk or maybe if I set a minimum width of 75 percent we're saying that each of these boxes should be at least 75 percent even though before we declared them to be 50 percent you also have Max height and Min height there's really going to be no change between the two since the height of our web page starts at the top here and ends right here we're not using all the space down below so what I propose is that let's place our boxes within a container we'll create another div with a class of container to contain our boxes let's take our two boxes and place them within this development so with my container the container class with our container let's change the background color to something great just so it's easier to see we can't see our container because our boxes are taking up all the space with our container if we need to take up the entire height of our web browser we can set the height to be 100 VH meaning viewport height so now our container is taking up 100 of the height available if I were to zoom out the container is still taking up all that space so with our boxes let's change the background color because I can't really see them that well anymore for the background let's change that to be white I'm going to zoom out to 100 with my minimum height property I will set the minimum height of our boxes to be 50 percent now they take up 50 of the space available which is one hundred percent our viewport height if I were to change the minimum height to be 100 we take up the entire space available or I could set the max height to be 50 percent even though we set max height to be 50 we don't necessarily need all this space because there's not enough content if I absolutely need these boxes to take up at least 50 percent of the height of my window I would use minimum height instead of maximum height so really it's up to you alright everybody so that is an introduction to the height and width properties in CSS hey everybody so today I'm going to explain the position property in CSS there's five possible values relative fixed absolute sticky and static let's begin by creating a div section I'll give this div an ID of box one within my style sheet we will select the ID of box one I'll set the width to be 200 200 pixels height to be 200 pixels as well and a background color background Dash color let's go with the blue color we haven't picked blue for a while that's pretty good all right the position property with a position set to relative relative positions and element relative to where it normally should be with our position property set to relative we can move this element to the right to the left upwards or downwards we do have the properties of top bottom left right to push this element down relative to where it normally is I can set top to some value we can do that in pixels if I set top to be 100 pixels this element will be pushed downwards by 100 pixels relative to where it normally is in the top left corner another property is left I will push this element to the right by 100 pixels by setting left to be 100. so now this element is pushed to the right by 100 relative to where it normally is it's down and to the right by 100 pixels negative 100 would move this element up left set to negative 100 would move the element to the left it's kind of backwards this element is positioned relative to where it normally should be then we have fixed with fixed an element is positioned relative to the viewport meaning the web browser for this example we're going to need a whole lot of paragraphs like 20 of them I'll type lorem hit tab to generate some text copy this line and paste it like 20 times all right that's good enough let's get rid of these properties I will set the position to be fixed this element is now fixed within the viewport it's stuck in the top left corner if I were to scroll down this element is still in the top left corner of my web browser this element can be fixed to the right by setting the right property to be zero pixels zero works as well so now this element is in the top right corner with the bottom property if I were to set that to be zero pixels well now this element is in the bottom right corner this might be good for an advertisement if you had a banner for the bottom left corner that's left zero bottom zero that is the fixed position this element is fixed in my viewport my web browser then we have absolute with absolute an element is positioned relative to its nearest ancestor think of an ancestor as a containing class within box one we'll create box two change the ID to box two with box one let's set box one to be relative then get rid of these properties we'll create box two by copying box one change the ID to box two the width will be 100 the height will be 100 but we'll pick a different color something red is good the position for Box 2 will be absolute since Box 2 is contained within box 1 box 1 is its nearest ancestor if I were to move box 1 Box 2 is still going to stay in the top left corner of box one let me demonstrate I'll set the top property to be 100 pixels then left to be 100 pixels as well so even though we're moving box 1 Box 2 it's positioned absolutely it's still going to stay within its container let's try and put Box 2 right in the middle of box one I will set the top property to be 50 pixels and the left property to be 50 as well now Box 2 is right in the middle of box one we can move box one anywhere let's set the position of box 1 to be fixed so Box 2 is still going to stay right in the middle of box one no matter where it is so that is the absolute position an element is positioned relative to its nearest ancestor then they're sticky a sticky element is positioned based on the current scroll position meaning our scroll bar so to say with box one box one will be sticky let's set top to be zero pixels what happens now is that when I scroll down our web browser is going to catch this element sticky is kind of similar to fixed with sticky we reserve some space for the original element if I were to change that to fixed this element is just basically stuck to the top of my viewport with sticky it's going to be in the same place until we scroll past it alright then lastly their static static is the default position for an element in the future we will have the capability of changing these positions dynamically to set a position to the default which is static you just change it so those are the five position types relative fixed absolute sticky and static we'll have more practice with this in the future so don't worry this was more or less just an introduction and those are CSS positions hey how's it going everybody today I'm going to show you how we can include a background image using CSS so sit back relax and enjoy the show all right let's get started everybody what you'll need to begin with is a high resolution picture for a background I just so happen to find a picture of Central Park in New York City the higher the resolution the better so place that image within your website folder in our HTML document let's create a title I'm just going to say the word hello and we'll need some text just as a point of reference I'll generate some text by typing lorem then hitting Tab and that's good enough for now so within our style sheet I will select the body of our document we are going to include that background image with the background image property then we need a URL the URL is going to be a relative file path or an absolute file path to where this image is located they're right next to each other I just need the file name so my image name is background and this is a jpeg alright so here's my image so far it's gigantic it's huge let me show you what happens if I use a smaller version of the same image this image I think is like 500 pixels for the width or so background Dash small so here's my image but it repeats itself there is a background repeat property So within the body of my document I will set the background Dash repeat property to be no repeat now this image isn't repeating we're headed in the right direction what we'll do now is take this image and Center it in the middle of my viewport take the background Dash position property and set that to Center it's centered horizontally another property we'll need is background attachment background Dash attachment I think I misspelled attachment there we are the background attachment property sets whether a background image scrolls with the rest of the page or is it fixed we will set the image to be fixed now this image is in the middle of my viewport see even if I were to expand and contract it it's still within the middle lastly we need this image to take up the entire space of the background and there's one last property background Dash size we will set that to cover now this image is taking up the entire space of my background which is what I wanted I'm going to use that high resolution picture that I used previously that's much better all right everybody so that's how to add a background image using CSS hey what's going on everybody today we're going to discuss combinators in CSS combinators explain the relationship between listed selectors there's four we'll discuss today descendants which is just a space a child which is a right angle bracket a tilde which is a general sibling and plus which is for adjacent siblings you would type something like this you'll have selector one a combinator for example the child combinator then another selector if I said div child combinator then p we're applying CSS properties to any paragraph elements found within the stiff section what we'll do in this example is create a div section I will give this div an ID of container we'll create a few paragraphs for paragraph one let's say this is number one we'll create another paragraph then we'll create an inner div section this div section will not have an ID but within this inner div section we'll have another paragraph This is number three outside of our div with an ID of container we'll create two more paragraphs this is number four this is number five that's all we'll need for now just to make it a little more clear that this is a div section I'll take our container then give it a border border two pixels solid paragraphs one two and three are within a div section four and five are not I would like to highlight all paragraphs within my ID of container I will take my ID of container then I will use the descendant combinator which is an empty space then list another selector I'm going to highlight all paragraphs within my div section that would be my div section space then what am I applying CSS properties to my paragraphs let's take the background color and set that to be yellow something like that's fine all paragraph descendants of our container change the background color to Yellow that is The Descendant combinator it's just an empty space then you have children children is a right angle bracket highlight any paragraph children of our container class only one and two are highlighted that's because three is not technically a child it's a descendant think of it like a grandchild in this case paragraphs one and two are direct children of our container but our third paragraph is One More Level deep because it's wrapped within another div section it's a descendant but not a child all children are descendants but not all descendants are children that would apply to number three that's why only one and two are highlighted that is the child combinator then we have General sibling which is represented with a tilde take any paragraphs that are General siblings of our container that would highlight four and five paragraphs four and five are both siblings to our container they're both considered Children of the body of my document therefore their siblings like brothers and sisters but if I were to wrap these two paragraphs within a div section well now they're no longer siblings the stiff section is now a sibling to this first div section think of it this way paragraphs four and five are nieces and nephews to the First Development all right let's reverse that then we have adjacent siblings using a plus sign we will select only adjacent siblings four is selected but not five the adjacent sibling is the next direct sibling but not all siblings that's why four is selected and not five but if I change their positions around 5 is now selected alright everybody so those are combinators they explain the relationship between listed selectors you have descendant child General sibling and adjacent sibling and those are combinators in CSS hey how's it going everybody today I'm going to explain pseudo classes pseudo classes are keywords added to a selector they modify the behavior of an element when they're in a certain state for example I have a button when I hover my cursor over the button I set this button to increase in font size and also change the background color to Green hover is an example of a pseudo class it modifies our buttons Behavior active is when an item is currently selected so with my mouse I'm going to leftclick the mouse button and hold it the button is now red basically they modify a special state of an element so let's begin with a few examples let's go to our index file and we will create a hyperlink I will set the href attribute to be I don't know Google or something https colon to forward slashes google.com be sure to close it I'll type the word Google here is my hyperlink to Google a link is also a pseudo class I will select any anchor tags that we have we have one I'll set the link pseudo class to have these CSS properties so a colon then the name of the pseudo class instead of this text being blue let's set it to be like a light blue I will set the color property to be a light blue color let's pick one yeah that's pretty good when I hover my cursor over this link I want the color to change we are selecting any anchor tags colon then we will use the hover pseudo class and I will change the color you know what let's use what we currently have I'll just make it a little brighter now when I hover over this link the color changes I'll increase the font size too it's kind of like we're zooming in on this element let's do 1.1 em so the font size increases slightly active kicks in when you're holding down the cursor over an element a colon active let's change the font size to be 1.1 em again I will set the color to be let's go with the dark blue color when I left click on the mouse and hold it this link is now in the active state if a link is visited by default it's purple let's change that a colon visited when our anchor element is in the visited state I'll change the font color how about a gray color there all right so those are a few basic pseudo classes in this next example we'll need a list an unordered list we will need 10 list item elements this is number okay let's copy this paste it nine times one two three four five six seven eight nine now we will select any list items and use the hover pseudo class when I hover over one of these list items I will change the background color of that list item to be a highlighter yellow color I will change the background color to be yellow let's go with that so check this out when I hover over a list item the background color changes there's also the not pseudo class we can select anything that is not being hovered over not kind of does the opposite anything that is not in this state anything that's not being hovered over let's set the color to be like a gray color anything that's not currently being hovered over is gray but when it is hovered over it's yellow so that is the not pseudo class anything that is not in this state will have these CSS properties then we have the nth child pseudo class list item colon and child parentheses anything that's selected let's set to be yellow depending on what value you put within the parentheses that element will be selected one corresponds to the first element two is for the second three is for the third nine is for the ninth element for all odd number elements type odd for all even elements type even for every third element that would be 3n 369 for every fourth that would be 4N you can add an offset too normally with 3n that's every third but if I want to start at the beginning I can add plus one four seven or even plus two two five eight it's kind of like a formula this is really handy with JavaScript because you can place a variable within here the value of that variable can change which is pretty cool all right last example let's create a development with an ID of greeting the text will be hover here within our development let's create a paragraph element with some text of hello normally I want this Hello message to be hidden until we hover over this element our div element I'm going to style our greetings P element I'll set the background color to be maybe a blue this time like the light blue I'll add a little bit of padding too maybe 10 pixels to make this element invisible I can set the display property to be none what I would like to do when I hover over the settlement I want this element to be displayed we are selecting our greeting then when we hover over it I want the P element of this div section to have the display property of block display it as a block level element when we hover over this element it displays the P element within our div section this will come really handy when we create drop down menus those are pseudo classes elements can have special States like when they're being hovered over or you click on them using these pseudo classes we can apply CSS properties to those elements when we interact with them and those are pseudo classes and CSS hey what's going on everybody today I'm going to explain pseudo elements in CSS pseudo elements are keywords added after a selector that are used to style a specific part of an element you have a selector for example H1 then two colons then a pseudo element one you might see is first Dash letter we can add some CSS properties and style the first letter of our H1 element that's the formula selector two columns pseudo element let's begin in this example we will need an H1 element why don't you go ahead and type in the word hello or something I really don't care and we will need a paragraph to generate some text you can type lorem then hit tab and a list let's create an unordered list with an ID of fruit we'll have three list items the first list item will be apple second will be orange third banana let's give each of these list items a unique ID as well ID will be apple Orange then banana all right that is good enough for now let's head to our style sheet we will use the first letter pseudo element to change the first letter in our H1 element we have our selector H1 two colons then a pseudo element first letter is one what would we like to do with the first letter let's set the font size to be 2 em basically that's 200 percent the H in hello is larger now and I will set the font style to be italic that is the first letter pseudo element let's select our paragraph paragraph two colons we can apply CSS properties to the first line of some text first dash line what would we like to do let's change the background color background Dash color I'll pick a yellow color something like that's fine all right so the first line is now a highlighter yellow color if I change the size of the window the first line is still going to have that background color than the selection pseudo class is anything that's currently selected with our Mouse we're selecting our paragraph element two colons then we will use the selection pseudo element anything that's selected with our Mouse normally the text is white and the background is blue let's change that let's set the color to be white well I guess that's the same and the background color to be let's go with the dark grayish color no better yet let's make the color green for the text yeah that's kind of cool so anything that's selected will have a font color that's green and a background color that's dark gray now let's go to our list the list had an ID a fruit then I would like to select any list items with any list item we will use the before pseudo element we can add something before each list item I'll add a check mark emoji we can do that with the content property then within a set of quotes I can select an emoji so if you're on Windows you can hold the Windows button then semicolon and there's a prompt for an emoji I will find a check mark that looks good now before any list item add a check mark which we have there's also the after pseudo element we have a list item with an ID of Apple after after this selector let's add some content I will add an emoji of an apple Apple there we are let's do this with orange and banana as well Apple Orange banana let's change these emojis Orange then banana those are the before and after pseudo elements before or after some element we can add or change some content now with the list item you can change the marker for an unordered list the default is a bullet point but let's change that with our unordered list of fruit let's select any list items and use the marker pseudo element let's change the marker to be a check mark but I'll delete what we have with the before pseudo element I will also change the color of this check mark to be green pretty cool let's make it a little bit bigger too font size 1.2 em there all right everybody so those are pseudo elements you have a selector two colons then a pseudo element which can add specific CSS properties to that selector and those are a few pseudo elements and CSS hey everybody today I need to explain pagination in HTML and CSS pagination is the method by which a document is separated into pages and numbers are given using pagination on a website we can move between Pages easily it's kind of like you're reading a book each page has a number pagination might also be useful on your web page if you need to limit the results maybe you only want so many results per page then you can easily navigate between the pages there's many different uses so let's begin we'll start with our index file I will create an H1 element with the title of this is page number one then we'll create some sample text within a paragraph element I'll type lorem then hit tab to generate some text usually with pagination it's found at the bottom of a web page so that's a good place for it right here there's many different ways in which we can create pagination but using only what we know so far that I've covered in this series here's one way we'll create a development with a class of pagination then be sure to close it within this development we'll create several hyperlinks we'll need an a tag I'll set the href attribute just to be empty for now and then we'll close it for this example let's create a total of seven links we have one two three four five six seven beginning with the second link that will be one then two three four five for my first link I'll use a left angle bracket this is so we can navigate backwards depending on what page we're on and with the last link I'll use a right angle bracket so we can navigate forwards we'll revisit this page let's head to our style sheet the first thing I'm going to do is Center all of these links within my div element I'm selecting my class of pagination I will use the text align property set it to Center then I would like to style all of these links these hyperlinks we're starting with our pagination class then I would like any a elements found within the pagination class let's change the color I will set the color to be black let's eliminate the text decoration that is the underlining text decoration none I'll add a little bit of padding 8 pixels by 15 pixels I will display these elements as an inline block basically by setting these elements to have a display property of inline block we can adjust the width and height of these elements but what we have is good already alright so far so good going back to our HTML file I'm going to make one change we're beginning with page one that's our index file with this anchor tag I will set the class to be active within our CSS file we're taking our pagination class find all a elements within our pagination class then find any active classes so it's going to look a little strange within the pagination class within any anchor tags find the class that's active so in this case it would be page one I will change the background color of that element background color let's pick a greenish color but feel free to pick any color you like that's pretty good let's try and make the font weight bold I want to see what that looks like okay not bad this part's optional but I'll add a border radius around this element the one that's currently highlighted border radius 5 pixel seems fine yeah that looks pretty good all right now if any element is not active we can style them this part's going to look a little strange select the pagination class with any a elements we will use the hover pseudo class if these elements are hovered over but they're not active then I'd like to highlight them we'll use the not pseudo class find any elements that are not within the active class I will change the background color to something maybe gray like that then I'll add a border radius of 5 pixels when we hover over these inactive links they should change in color let me make that a little bit lighter though that looks pretty good now we need some functionality for these pages if we click on one that should take us to our first file which is named index.html or it could be named something else for you the second link will bring us to a page named page two which we still need to create then page 3.html page4.html page five dot HTML now with these back and forwards buttons we can easily navigate through pages using JavaScript but unfortunately we really don't know JavaScript at this point at this point in time the easiest way for us to move forwards or backwards using these arrows is to list a specific file if we're on page one and we need to move forwards that will bring us to page two for the last hyperlink I will set that to be page 2. if we're on page one then we hit the backwards button while we're really not going to go anywhere we can either leave this link empty or we can refresh the page just by listing the page that we're currently on now we need to create these pages what I'm going to do is go to our website folder I will copy this index file paste it then rename this copy as page2.html let's copy page two paste it change page to copy to page three we're going to do this all the way until we reach page five foreign now if we go to page two let's change the title to be page two the back button will bring us to our index file also known as page one in this case let's set the class of active to be within the anchor tag page two then if we move forwards we want to go to page three so then if we go to page three if we move backwards we're going to page two set the class that's currently active to be on page three then if we go forwards we're on page four oh be sure to change the title to I forgot two three we're good then on page four this is Page four if we move backwards we're going to go to page three change the class to reflect page four if we move forwards we'll go to page five then lastly on page five this is page five if we move backwards we're going to page four move the class over to page five then we can't really go forwards so I'm just going to set the forward button to be page five again just to refresh it or you can eliminate it either way all right let's see if this works be sure to save everything so we should be able to move between the pages by clicking on these buttons or the arrows we're on page one we can go to page two three four five we can also use the arrows two three four five four three two one all right everybody so that's pagination it's a method by which a document is separated into pages and that is simple pagination in CSS hey what's going on everybody today we'll create a drop down menu only using HTML and CSS so let's get started the first thing we'll create is a div section I will give this div section A Class of drop down then within this div section I'll create a button what kind of drop down menu should we create let's create a drop down menu for food then we'll need a div section to hold all of the different content within our drop down menu I will give this inner div section A Class of content within my content class I'll create a few hyperlinks I'll set the href attribute to B nothing but you can put a file path or a URL in here I'll create three elements for our drop down menu the first will be apple Orange then banana this part isn't necessary but for my demonstration I'm going to create a paragraph a text I'll type lorem then hit tab that will generate some text alright that is all the markup that we need for this video Let's head to our style sheet the first element I'll apply some CSS properties to is our button with my drop down menu class I will select any buttons I will change the background color to be something else I'll use hsl values I'll go with 80 for the lightness for the font color I'll pick White I'll add a little bit of padding around the text padding 10 pixels by 15 pixels is good I'll remove the Border by setting the Border property to be none then I'll change our cursor to be a pointer when we hover over the button cursor pointer now when I hover over the button my cursor changes to a pointer the next elements that will change are the a elements within my drop down menu class take any ailments then apply the CSS properties let's display all of these items as a block I will set the color to be black I'll remove any text decoration that's the underline basically text decoration none and I will apply a little bit of padding 10 by 15 pixels we have one issue all of the content within my drop down menu is pushing all of the other content on my web page down eventually we'll set the position of our content to be absolute to take it out of the normal flow of our web page with our drop down menus content class let's change the background color first background color I'll use hsl values let's go with 95 lightness I will set the position property to be absolute then I'll set a minimum width for the content I'll stick with 100 pixels but feel free to adjust this value then I'll add a box shadow box shadow the first value is for the horizontal positioning the second number is for the vertical positioning a third value is for the level of blur then select a color to make the shadow a little bit lighter if I'm using hsl values I can adjust the position of this bar and change the opacity let's go with like 80 percent that looks pretty good normally I don't want this content to be displayed unless I hover over our button I will set the display property of our content to be none to hide it when I hover over our button then I'd like to display that content let's take our drop down menu class and apply the hover pseudo class with our content I would like to set the display property to be a block again now when I hover my cursor over the button it displays our drop down menu here's a few extra changes I'm going to make when I hover over the button I'll change the background color of the button with our drop down menu class I'll apply the hoverseudo class take our button within that class then change the background color I'll set the lightness to be like 70. the background color of the button is changing now then lastly when I hover over one of these a elements I also would like the background color to change with my drop down menu take any a elements when I hover over them change the background color for the lightness I'll set that to be like 90. that looks pretty good all right here's the last change that we're going to make with our div section it's a block level element when I hover my cursor over this area even though it's all white space we still display the drop down menu the last change that I'm going to make is set the drop down menu div section to display as an inline block so when I hover over this white area we don't display the drop down menu until I move my cursor over the button then the menu is displayed all right everybody so that is a simple drop down menu only using HTML and CSS hey everybody in today's video we're going to create a navigation bar using HTML and CSS so let's get started we'll Begin by creating an H1 title for the title of our web page why don't you go ahead and type in your name or your employer's name or your business name really doesn't matter then I'm going to use a nav element also known as a navigation element navigation elements are typically used for a set of navigation links I will give this nav element a class of navbar then within this navigation element I'll create an unordered list my unordered list will contain one list item for each category in my navigation bar for the first list item let's create a category for home I would like to turn this category into a hyperlink I'll surrounded this text with a pair of a tags within the opening a tag I will set the href attribute to B I'll just keep it empty for now we'll fill that in later let's copy our list item paste it a few times maybe a total of four links for the categories let's have home about products and contact these are a few common categories you may see for a navigation bar all right then outside of our navigation bar let's use a main element for the main content for our web page I'll add an H3 element for a sort of subtitle for the main section of our content this is the home page then I'll add a paragraph a text to generate some text in vs code you can type lorem then hit tab alright that is what we need for now let's go to our style sheet the first thing I'm going to do is text align our H1 element and set it to Center text align Center the text in our H1 element should be right in the center I will take our navigation bar class select our unordered list set the list style type to be none to remove the bullet points and they are gone now I'll also change the background color let's pick a dark gray color I'll set the lightness to be 25. I'll remove any padding as well as any margins let's style these hyperlinks within our navigation bar class take any a elements set the color to be white remove the text decoration text decoration will be none that removes the underline I'll add some padding of 15 pixels I will display these elements as a block then text align Center there we are this navigation bar is a vertical style navigation bar this is a style you may see at the bottom of a web page when I hover over one of these links I want to change the background color we will take our navigation bar class take any a elements then apply the hover pseudo class when I hover over one of these hyperlinks I'll change the background color I'll turn down the lightness slightly to 10 lightness there we are if you would like a horizontal navigation bar here's a change we can make with our navigation bar class take any list items then we will float left one change will make within our unordered list set the Overflow property to be hidden alright that's pretty good so far there is a little bit of margin around the body of my document I am going to set margin to be zero with our body element set any margin to be zero pixels if you would like margin around the main content of your page we will take our main element then set margin to be let's stick with 20 pixels you also could put margin just on the left side and the right side you know what I'm going to set margin left to be 20. and margin right to be 20. all right then lastly let's fill in these ahref attributes for the href attributes I will set my home link to be index.html about will be about.html products.html and contact.html we're going to go to our website folder we'll create a few copies of our index file we need three more files one two three let's rename one of these as about.html then products.html then contact.html so let's open about I'll change the header element of our main element to B this is the about page let's apply that for products this is the products page then contact this is the contact page all right and that should be everything let's see if this works we're currently on the home page I can go to the about page products contact and home in this example they're all relatively the same except for the H3 title all right everybody and that's how to create a navigation bar using HTML and CSS hey what's going on everybody today I'm going to show you a basic Website Layout using HTML and CSS all right let's begin so we should know what semantic tags are semantic tags they include but are not limited to headers nav elements main section aside articles and Footers you'll want to use semantic tags because they keep your content organized they're better for search engine optimization and they assist with screen readers and other technology for accessibility so I've already written some HTML markup I just want to describe this first headers are used for introductory content such as a title a logo or author information nav elements they're used for navigation bars or other links sometimes you may find a set of navigation Links at the bottom of your page but having a navigation bar is fairly common now the main content which is all of this it can contain one of many sub elements such as sections aside elements articles and generic developments so sections which is what I've created here in the middle this is for dependent content you would typically put anything you want within a section it's typically used for dependent content if I were to take this section out of the web page then put it on another web page it might not necessarily make sense like what is it for that's why it's dependent and a side element is meant for side content this can include author information fun facts quotes external links comments or really any other related content that's related to a section now an article this represents independent content this could include news articles job posts or blog posts articles are really similar to sections with articles it's meant for independent content for example a news article if I were to take this news article cut it out and put it on a different website it would still make sense it's independent content it's not reliant on the context of the website whereas in a section would be and then lastly we have Footers a footer is for a closing content this could include author information copyright information and sometimes navigational links there's really no onesizefitsall approach really the design is up to you but this is a really common format now that we know the basics let's actually design this alright so we will create our semantic elements we have a header a nav element a main element and a footer element within our header element let's just add an H2 element that says header so let's go to our style sheet I'll take our header element let's change the background color background Dash color let's pick a light gray color I'll use hsl values because I like them 84 or 85 is good then let's text align Center and add a little bit of padding 25 pixels okay let's work on our navigation bar it's not going to be a fully functioning navigation bar we've done that in a previous video Let's just allocate some space for navigation bar it is common to have more than one navigation element per web page if we're creating a navigation bar we should set the class to be something like navbar so it's descriptive let's go to our CSS style sheet I will select our navbar class then change the background color let's go with the darker color I'll add some height 50 pixels and that should be good we're just allocating some space we're not creating a full navigation bar there's a little bit of margin around the body of our document I'm going to remove that by selecting our body element then set the margin to be 0 or 0 pixels that should get rid of the margin all right then we have our main element our main element can include any combination of a side sections articles or even just some generic developments but we won't be working with div in this video really you can see any combination of a side section article or div or maybe even none of them it's up to you in this topic we'll stick with one aside element one section and one article these elements are kind of like sub elements within our main element our main element is going to be the main stake in potatoes of our web page so with our side element I'll include an H2 element for a header this is a side let's do the same thing for Section this is a section then this is an article let me separate these just so that they're easier to see just to take up some space I'm going to create some sample paragraphs our side element will have one our section will have two paragraphs I'm just copying and pasting and our article will have two as well I don't want this top to bottom layout we can change that with some CSS properties so let's work on our side element first with our side element I'll set the width to be 20 of the width of the web page RSI element only takes up 20 percent of the space available the following elements can float we have to set the float property to be left then in this case all right let's copy aside change aside to B section that's our next element I'll set the width to be 40 percent then we have article change section to article and the width will stay at forty percent these three elements can all fit within the web page the total width is under 100 we have our three elements within our main element so if you would like to add a little bit of padding this is what you're going to do let's add 10 pixels of padding to each of these elements when we calculate the width we don't take into account any padding so one change we're going to make is that at the top of our CSS style sheet we can select all elements with an asterisk then a set of curly braces we will set the Box sizing property to order Dash box what we're doing with this property is that when we calculate the width factor in the padding all three elements should be lined up now all right then lastly we have our footer So within our footer element I'll just add an H2 element that says footer then I will style it let's copy what we have for our header paste it change header to be footer now what we need to do is clear our float because we're still floating the elements that come after let's display our footer as a block level element clear a float you can set clear than both and that should clear that alright so here is a basic Website Layout for a desktop this isn't a good format for a mobile device though with a mobile device you would want each of these elements to be on top of each other so you can scroll down we can add an at rule so at media screen and Max width 600 pixels so what we're doing here is that if the width of our screen or window is 600 pixels or below we can change some CSS properties with a side section and article let's select those aside comma section comma article we'll just change the width to be 100 percent if a user is on a mobile device and or the width is 600 pixels or below then we'll switch to a mobile version of the web page each of these elements are a side section and article elements are taking up 100 of the width available then if we were to expand this web page or we're viewing on a desktop we switch to the desktop version this is also known as responsive CSS all right everybody I know I covered a lot today but that is a basic Website Layout using HTML and CSS hey what's going on everybody today we're going to create an interactive image gallery using HTML and CSS so let's get started before you do jump in I would recommend downloading three pictures of your choosing I have a picture of a pizza a salad and soup if you're able to try and find images that are roughly the same height and width once you have your three or more images we are ready to begin we'll begin with the first image I'll use a div element and I will give this div element a class of gallery because it's well part of our image gallery I will include my image image The Source attribute will be the relative file path of the image if you have a lot of pictures I would recommend creating an images folder you know what let's actually do that it'd be good practice new folder images I'll move all of these images to my images folder alright so I will list the relative file path I need to navigate to the images folder but of course you can use your own pictures depending on what you're building exactly images dot I think that was a JPEG alright so this picture is massive in case somebody is using a screen reader it's good practice to add an alternative attribute then give a description of the image salad I'll turn this image into a hyperlink by surrounding it with a pair of anchor tags we can open this image in a new tab by setting the target attribute to equal underscore blank then I will set the hrep attribute to be the source of my image I'll just copy and paste that just temporarily I'm going to set a width for this image width equals 200. what we'll do now is add a description it's entirely optional but I think it would look nice I will create a new div element with a class of description I will type the word salads we'll do some CSS styling a little bit later let's copy this entire div element paste it twice then we just need to change the images we're using my second image is soup I'll change the alternative text as well and the description soups then my last image is pizza the description will be pizzas all right let's go to our style sheet we are selecting our Gallery class I will set the display property to be an inline block currently these images are Block Level elements now they're all lined up I'll add a border border one pixel solid let's go with a dark gray color I'll use hsl values I'll set the lightness to 60 percent I'll add margin of 5 pixels the margin is applied outside of these developments if I were to increase this you can see the difference I'll keep that as five though let's work on the description for each image we are accessing our Gallery class then within the gallery class we have the description class that should be these developments let's add a little bit of padding 10 pixels then text align Center not bad when we hover over one of these elements let's change the Border color we are taking our gallery we'll apply the hover pseudo class then change the border and make it a little bit darker I'll set the lightness to be like 20. there we are now the Border changes when we hover over one of these elements I'm going to delete these with attributes foreign then go to our style sheet we'll access our Gallery class with any images set the width to be 100 percent and height will be Auto then with the gallery class we can set the width 200 pixels so basically what we did is that we set the width of each image to be 100 of the width of our Gallery whatever this is set to if I were to set the width to be something larger then the size of each element would increase but I think 200 is fine all right now let's test it if we click on one of these images we should see the full image in a new tab that's the salad image soup and pizza all right everybody so that is a simple image gallery using HTML and CSS hey what's going on everybody in this video I'm going to show you how we can create some font awesome icons using HTML and CSS all right let's get started everybody I'm going to direct you to this website font awesome.com this isn't a sponsorship or anything like that but this is a pretty good place to get some icons Google Icons is another good source but I find that font awesome does have a larger variety of icons to start using icons from this site from the home page we will start for free because I don't like to pay for things you will need a kit you can type in your email like fake gmail.com then send kit code then you just have to confirm your email now once you log in you'll have access to a kit if I were to click on my kit I have a line of JavaScript that contains a link to my kit there's going to be a unique number let's copy the script then place it in the head of our HTML document right here we now have access to those icons on font awesome to browse for icons go to the icons tab then we can perform a search I would like an icon of a home or a house I would like this one so I'll click on it you can choose a classic style or a sharp Style with sharp corners this is solid that's regular this is light I'll stick with solid you can select animations but I won't use animations for this example you can rotate this icon you can change the color and you can change the default size this is 2xs this is 2XL to include this icon we can copy this element it's an eye element so let's copy this eye element within the body of my document I can paste that I element and there's my icon if you want to remove the color and change it with your CSS style sheet we can remove the style attribute if you need something even larger than 2XL we can change this element up to 10 times the size with 10x that's a little too large for my liking let's go with 5X let's find three other icons we would like I'm going to find the Twitter logo that's right here I need to copy this eye element then I will paste it then I'll change the size fa5x okay Twitter YouTube would be good copy this eye element paste it again I would like the 5x version fa5x let's select one more icon let's go with tick tock and that is all we'll need again I would like the 5x sized version all right that's a good amount of icons I will Center all of these icons one way in which I can do that is to place all of these elements within a div with the class of icons all right let's go to our style sheet I will take my class of icons then text align Center to right justify these we can set that to right but I'll keep them in the center I'll change the color of these icons let's begin with our house we'll need to copy this entire class I don't want the sharp version I will copy this entire class then within my style sheet I will select that class dot then paste the name of that class now we can't include spaces you can replace the spaces with the DOT with our house icon let's change the color to something Gray let's go with the lighter color like that okay let's do this with the other icons then we have Twitter replace the spaces with dots I will change the color so let's try and find Twitter blue think that's fairly close okay then we have YouTube color red then tick tock I think that's fairly close all right now what we'll do is turn these icons into hyperlinks we'll surround each ailment with a pair of a tags foreign foreign then within the href attribute we can set that to some website I won't set the atrep attribute to our house icon let's do that with Twitter Youtube and tick tock so with Twitter I will set the ahref attribute to be https colon to forward slashes twitter.com let's do this with our YouTube icon replace Twitter with YouTube then tick tock so this should work let's click on Twitter that works YouTube and tick tock with hyperlinks there is some underlying text decoration included let's remove that let's take our icons then any anchor tags within our icons class we'll set the text decoration to be none and that should remove them I'll also apply a little bit of margin between each of these icons let's do margin Dash right set to 20 pixels not bad for some additional practice when we hover our cursor over one of these icons let's increase the lightness let's begin with our house let's copy these CSS properties paste them we'll apply the hover pseudo class I'll increase the lightness by 10 percent I went from 66 to 76 percent when we hover our cursor over our house icon it should be a little bit lighter okay let's apply this for the other icons then we have Twitter apply the hoverseudo class oh I'm using RGB values let me change that to hsl I'll increase the lightness to 60. let's do this with YouTube then tick tock all right now when we hover our cursor over these icons they should be a little bit lighter Tick Tock is still a little bit dark let me increase it further to 30 percent that's much better all right everybody so that is an introduction to including icons in your web page using CSS hey what's going on everybody in this topic I'm going to give you an introduction to using flexbox in CSS in about 10 minutes or so why don't you go ahead and sit back relax and enjoy the show all right let's jump in everybody we have a little bit of setup to do we'll create a development with the class of container within our container class we'll create a few developments we'll create four these will be boxes for the class I will set that to be box the first inner development will have an ID of box one the inner text will be one let's copy our inner development paste it three times for a total of four change box 1 to box two for the next element then three then four and that's all we need for our HTML file let's go to our style sheet we'll style our boxes we will select the Box class I'll set the width to be 150 pixels same thing goes with the height let's change the background colors we'll begin with the ID of box one I will set the background color to be something red I'll use hsl values because I like them let's go with that then let's color box two box two let's make that yellow box 3 will be green then box 4 will be blue let's change the font size real quick font size 8 em then text align Center I'll add a border radius just two round of the corners border radius 15 pixels and that is all the setup we'll need we are ready to begin with our container class we can Flex all of the elements within this container meaning all of these inner div elements so we'll take our container class dot container then set the display property to be Flex you can see that the positioning of these elements has already changed by default the flex Direction property is set to row you can see that there's no apparent change when I refresh the page for a row but in reverse order we can set Flex direction to be row reverse so now one is on the right hand side followed by two three then four to arrange these elements within a column we can set Flex direction to be column or even column reverse then at the bottom we have one then two three then four so that's Flex Direction let's delete the flex Direction property then we have the justify content property justify content sets the alignment on the main axis think of the xaxis by default it's Flex start there's no apparent change flex and would justify the content at the end see we're beginning with four then three two and one when we had Flex Direction set to row reverse it was one two three four but in this case it's four three two one then there's Center if you need to Center align these elements on the main axis we can place the extra space evenly between each of these elements by setting justify content to space between and if I were to expand this page the space between them is increasing you also have space around the area outside of these elements is also included now with space around then we have space evenly all right and that is the Justified content property we can justify elements on the main axis then there's the cross axis think of it as the yaxis up and down what we'll need to do in this example is expand our container just to show you the size of the container I will add a border to The Container class border 10 pixels solid black here's my current container I will increase the height of the container let's set the height to be 90 viewport height units so this is the total size of my container now ninety percent of the height of the web page what we'll use now is the Align items property which is used for the cross access align Dash items the default is flex start there's no change flex and we'll place these elements at the bottom of our container then there's Center align item Center that will place them in the middle of the Cross axis then there's Baseline so with Baseline the text is going to be aligned they're all the same size though we can't really notice the difference with box one let me change the font size font size 1 em you can see that the number one is aligned with the rest of the characters so if I were to increase the font size you can see that they're still aligned but let's eliminate that font size property let's delete our aligned items property we'll need more elements let's copy our four inner developments paste them we should have a total of eight one two three four one two three four you can see that these items are getting squished now they're all being compressed we can set the flex wrapped property so with our container I will set the flex wrap property to be wrap these elements will now wrap if there's not enough space if I were to expand the size of my container there's now enough room but if we run out of room they'll be pushed down further down the page by default Flex wrap is no wrap otherwise there's rap reverse now they're in reverse order let's use flex wrap now Flex wrap is used along with another property named align content align content if I were to set align content to be Flex start all of that space between the first row and the second is now gone then there's Flex end Center space evenly then space between use any combination of properties that I've demonstrated let's keep Flex wrap as wrap but I'll use flex start you can also add a gap between the rows and the columns between each of these elements let's set a column Gap column Dash Gap to be one em that adds a gap between each of the columns for the rows that would be row Gap I'll set that to be 1em you can also use pixels as well so here's 2 em 3 let's delete our Gap properties all right let's also delete the extra four boxes that we have we're also going to get rid of the flex wrapped property as well as align content there's also the Align self property that can be applied to single elements so with box one I will set a line self to be start that's the default this element will be aligned at the top of our container if I were to change line self to be Center this single element is aligned in the center of my container on the cross axis then we have end that will align at the bottom the Align self property can be applied to any of these elements let's do that with number two line Dash self at the start there's no change Center end okay let's delete the Align self property we can use order to change the order of these elements with box one I will set the order to be one that will place number one at the end negative one would be the beginning which it normally is already with box 2 I'll set the order to be one that will place two at the end but if I set it to be negative one it's now at the beginning all right everybody so that is a quick introduction to flexbox there is a lot to talk about and that is all the time that I have for this topic and well that's an introduction to flexbox in CSS hey what's going on everybody today we're going to cover the transform property in CSS the transform property lets you rotate scale skew or otherwise translate an element here's what we're gonna do we'll create a div section I will give this div an ID of box one then within the Box let's say the word hi let's head to our style sheet within my style sheet I will take our ID of box one set the width and height to be 250 pixels then I will give this div section a border of 5 pixel solid let's increase the font size 13 em is fine then text align Center hey let's change the background color to while we're at it I'll pick a greenish color that's pretty good I'm also going to remove some of the margin around the body of our document body margin zero all right so the transform property the First Transformation I'll show you is translate we can translate X on the xaxis Translate Y on the yaxis or both with just translate let's begin with translate X so after translate X add a set of parentheses whatever value you place within the set of parentheses we will translate this element on the xaxis if I were to set translate X to be 50 pixels this element will move to the right by 50 pixels that's 100 200 negative numbers will move the element to the left percentages are fine too if I set translate X to be one hundred percent this element will translate to the right by 100 percent the width of this element with a negative percentage that will translate the element to the left it could effectively hide that element then with negative 50 we should see just half of this element A lot of these Transformations can be done in pixels or percentages there's also Translate Y for the yaxis if I were to translate by 50 pixels on the yaxis that moves the element down negative 50 would move the element up by one hundred percent we will move this element down by 100 percent the height of the element that negative 100 will effectively hide the element you can combine both of them too with just translate but you need two values the translation on the xaxis then the yaxis if I set the first number to be 50 well 50 pixels that's an X translation the second value is a y translation now we're moving the element to the right and down negative values will move the element to the left and then up those are translations for the transform property then we have rotations we can rotate on the xaxis within rotate X we set a number of degrees if I were to set rotate X to be 45 degrees We Begin rotating on the xaxis that's 45 this is 90. you can't even see it 135 with 180 it should be kind of upside down that is an X rotation then we have y rotate y we'll start with 45 degrees that's 45. 90 you can't even see it anymore 135 180. then lastly we have Z rotation that's 45 this is 90. 135 180. those are different rotations their scale we can scale X or scale y one corresponds to 100 percent 1.1 is 110 percent if I were to set scale X to be 2 we're scaling this element on the xaxis by 200 percent 3 would be 300 percent any value below one would in a way compress it on the xaxis and here is 0.25 we also have scale y scale Y is set to 2. would scale this element on the yaxis by 200 percent that's 300 here's 0.5 and here's 0.25 you can combine both X and Y2 with just scale but you need two values so by default it's 1 1 for 100 let's scale on the xaxis and the yaxis by 200 percent and here's 300. that is scale then we have skew skew X or skew y if I were to set skew X to be 45 degrees we are skewing this element on the xaxis here's 90. 135 and 180. the same applies for y here's 45 90 135 180 you could combine them both with just SKU then again you need two values following that same pattern you can apply more than one transformation at a time let's begin with translate X by 100 percent and then we will rotate on the zaxis by 90 degrees let's add a scale as well I'll shrink this image by 50 percent so yes you can apply more than one transformation at a time these Transformations can also be applied to a class let's create two additional boxes box one box two box three I'll give each of these elements a class of box I'll remove this transformation I will select the Box class take all of these properties cut them besides the background color then paste them within the Box class then let's color in our two other boxes box one box two box three I'll make box two red foreign box three will be blue all right let's apply some transformations to the class now I will set the transform property let's translate on the xaxis translate X by 100 pixels then let's rotate on the zaxis by 45 degrees then I will shrink these with scale set to 0.5 you also could apply these transformations to images I just so happen to have a picture of Shrek in my computer I think everybody should have at least one right that image just saved within my website folder let's delete these boxes that include that image image source equals the relative file path of the image all right let's take our image I will apply the transform property let's Translate our image on the xaxis by 100 percent then let's rotate Shrek on the zaxis by 180 degrees let's scale Shrek in the xaxis by 200 percent scale X two all right I don't know what the point of that was but I thought it would be a fun exercise all right everybody so those are transformations it's a CSS property that lets you rotate scale skew or otherwise translate an element and those are a few basic CSS transformations hey what's going on everybody today we're going to create some animations using CSS all right let's get started everybody we will create a development with an ID of box then within this box let's say the word hi let's go to our style sheet let's select our ID of box I will set the width to be 250 pixels the height to be 250 pixels I'll change the background color let's pick something red let's change the font size 13 em is fine then text align Center to use an animation we first need to create an animation using a keyframe rule that can be done with typing at keyframes then a unique animation name let's create an animation to slide this element from the right to the left the name will be slide left then add a set of curly braces within our keyframe there's a few possible values you have two from or a percent such as 0 50 100 really any number we'll begin with a left translation for our element to end up in its resting position we will use from then add a set of curly braces just like we're adding CSS properties within our keyframe of from we will set the transform property to be an X translation translate x parentheses this can be an amount or a percent let's begin with 100 pixels so now I need to set the animation name property within our box animation name will be slide left but when I refresh everything nothing appears to happen that's because we need to set the animation duration property animation duration how long will this animation take to complete let's start with one second that's one s there's our slide animation feel free to adjust this value if I set this to be two seconds and slightly slower let's change translate X to a different value like 100 this element is translating on the xaxis by 100 the width of the element if I were to set this to a larger number like 300 it's going to appear off screen in my example then slide into place but that also depends on how far you're zoomed in or zoomed out and the with your web browser let's create an animation to slide right let's copy our keyframe rule rename slide left as slide right we'll use the value of 2. we'll begin in our original position we're setting this animation to end up in this position with our element translated to the right by 300 percent let's change the animation to slide right and now we slide to the right okay let's slide up keyframes slide up we'll set the value to be from then we will translate y change the animation name to slide up there we go then slide down all we really need to do is change this value so that's slide down change from to be two then change the animation name again slide down let's create a rotation animation at keyframes rotate so we can use from or to or a percent let's use percentages at 100 percent what sort of transformation do we want to complete let's use the transform property then do an X rotation rotate X buy 360 Degrees that's one full rotation okay let's change the animation name to rotate now we should rotate once on the xaxis let's rotate on the yaxis rotate y then rotate on the zaxis rotate Z so those are a few rotations now check this out if I were to set the keyframe value to be 50 we will complete this animation at the 50 Mark then from 50 to 100 in a way we undo the animation we'll rotate once and then revert back complete the animation at fifty percent of the length of the duration then with the other fifty percent of the time remaining return that element to where it was previously if I were to mess with these values let's say 25 percent will complete the animation in half a second then with the other 1.5 seconds we return to normal that's why the animation goes fast then when it's undone it goes fairly slow you can mess with these values depending on what you're looking for exactly yeah you can use from two or a percent okay let's create an animation to grow this element we'll scale both the width and the height at keyframes grow at the 100 mark let's set the transform property to be scale then we can use two values two means two hundred percent for the width scale that up by 200 percent same with the height 200 percent let's change the animation to be grow then this should grow then when the animation is complete it snaps back into place but if I were to set this value to be 50 percent it's going to grow then shrink back into place in one smooth motion let's create an animation to shrink at keyframes shrink the 50 mark let's use the transform property then scale by 0.5 comma 0.5 that will be 50 for the width and the height let's change the animation name to be shrink and now we'll shrink this element then it reverts back into place okay let's change the opacity at keyframes this animation name will be fade at the 50 mark let's change the opacity we're not using the transform property this time let's set the opacity to be zero then change the animation name to be fade now we'll Fade Out then back in again if I were to set this value to be 100 this element will fade then when the animation is normal it reverts not smoothly though let's set that to 50. now if you want a fade in effect what we can do is with our box originally we can set the opacity to be zero then at the 100 keyframe the opacity will then be one so this is fade in let's say so the element is originally hidden then it fades in let's get rid of the opacity let's change the color of our element at keyframes color change so at zero percent let's have the background color be red I'll copy the current background color I'll change the animation name too color change then at 20 percent let's set the background color to be orange so we're going from red to orange then at 40 let's pick yellow 60 will be green 80 will be blue then 100 will be purple there you can take the Liberty to pick whatever values you would like let's create a glow effect around our element at keyframes glow this animation will complete at the 50 mark we'll add a box shadow the first value is for the horizontal offset we'll set that to be zero the next value is for the vertical offset which will also be zero then the blur radius I'll set that to be 50 pixels then a color let's go with the yellowish color all right then we need to change the animation name glow then our element glows it's a little difficult to see though with the white background let me change the background color so with the body of our document I will set the background color to be a dark color there's our glow effect you can start animations with the pseudo class for example I want this glow animation to occur when I hover my cursor over the element I am selecting my box ID then applying the pseudo class of hover I'll take the animation name and the duration then place it within the Huber pseudo class for our box then this animation only begins when I hover my cursor over the Box pretty cool right if I were to use the active pseudo class this animation only occurs when I left click and hold the element which I am doing right now let's place these properties back to change the iteration count for an animation to have it occur more than once we can set the animation iteration count property to be some other value besides one if I set this value to be 2 we will perform this animation twice to have it perform infinitely set that to be infinite I would not recommend setting an animation to be infinite just because a viewer can find it annoying unless that's the goal to annoy the viewer alright there's also animation Direction animation Direction normally this is well normal we can change the direction of the animation by setting normal to be reverse now we're sliding to the right to alternate set the value to be alternate we're sliding left then sliding right then sliding left again there's also alternate reverse We Begin by sliding to the right then to the left and then to the right again let's set that to be normal to pause the animation we can set the animation Place state to be paused now the animation is paused to run it again set this value to be running this would be useful in conjunction with the programming language such as JavaScript because we can toggle this animation on and off there's also the animation timing function normally with this animation it accelerates then slows down it decelerates the default value is is in out it speeds up then slows down before it reaches its destination for a constant speed we can change that to be linear through the entire animation duration it stays the same speed there's also steps for a sort of stop motion effect within this function if I place the value 5 there's five steps if this was 10 there's 10 steps to complete the animation it creates a stopmotion effect let's change that back to ease and out let's set the iteration count to be one the next timing function is for cubic bezier let's right click on our box inspect underneath our Styles tab look for animation timing function if we were to click on this purple box we can change the timing function currently it's ease and out and there's a little sample animation at the top this is fast out linear in ease out or by dragging and dropping this line we can make something custom like I don't know what this does to use this animation copy this line of text for cubic bezier replace the animation timing function with that line of text so now we have that custom animation I don't really know what to name this animation let's name it the Electric Slide for a final exercise let's apply an animation to an image I just so happen to have an image of Shrek let's have Shrek perform our electric slide animation let's replace our box with an image element set the source to equal the relative file path so Shrek is right next to my index file shrek.png let's copy all of these animation properties cut them we'll select our image then paste those animation properties now Shrek will perform that Electric Slide animation pretty cool right all right everybody that is an introduction to animations using CSS foreign
