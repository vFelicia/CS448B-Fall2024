With timestamps:

00:02 - all right welcome back everybody
00:04 - a list a list is a data structure that
00:07 - represents
00:08 - a list of objects that can be accessed
00:10 - by
00:11 - index it's similar to an array but they
00:13 - can
00:14 - increase and decrease dynamically in
00:16 - size during runtime
00:18 - which rays cannot do so here's an
00:19 - example of an array an array has a
00:21 - static
00:22 - fixed size and we cannot change it
00:24 - normally after runtime
00:25 - so let's create a standard array just
00:27 - for this example let's create an array
00:29 - of food
00:30 - string food equals new
00:33 - string and let's say that this array has
00:36 - a size of three
00:37 - so i'm going to add some elements to
00:39 - this array
00:49 - and then i can display these elements
00:50 - with a symbol for each loop
00:57 - pizza hamburger and hot dog so if i
01:00 - attempt to add another element to this
01:01 - array this is what happens
01:07 - we'll run into an exception and index
01:09 - out of range exception
01:11 - because index was outside the bounds of
01:13 - the array
01:14 - so you can't normally change the size of
01:16 - an array another option is to use a list
01:18 - a list can increase and decrease
01:20 - dynamically in size during runtime
01:23 - so let's create a list step one is that
01:25 - we'll need to import
01:28 - system.collections.generic so
01:30 - include this at the top i'll place it
01:32 - right underneath using system
01:34 - and this is how to declare a list list
01:38 - then within angle brackets list the type
01:40 - of object you would like to store
01:42 - strings and then i will name this list
01:45 - food equals new
01:49 - list angle brackets the data type again
01:53 - parentheses semicolon and we now have a
01:57 - list
01:57 - named food and to add elements to this
02:00 - list
02:00 - there is a built-in add method food
02:04 - dot add then within this method pass in
02:08 - the object you would like to store i
02:09 - would like to store
02:11 - let's say a pizza then a hamburger then
02:14 - a hot dog
02:15 - so food dot add pizza hamburger
02:20 - and hot dog
02:24 - and let's take a look so we have our
02:27 - pizza
02:27 - hamburger and hot dog and i bet we can
02:30 - add even more than three elements
02:35 - so it appears that our list can resize
02:37 - dynamically which is a bonus
02:39 - then to access one of these elements
02:40 - it's much like an array you use that set
02:42 - of straight brackets
02:44 - so i'm going to display whatever's
02:46 - within element
02:47 - number zero food index zero
02:51 - and that would be pizza so accessing an
02:55 - element
02:55 - is the same as an array you just type
02:57 - the list name and then add a set of
02:59 - straight brackets
03:00 - then the index number okay so here's a
03:02 - few other useful methods of
03:04 - lists there is a remove method food dot
03:07 - remove then type in what you would like
03:10 - to remove
03:11 - i would like to remove fries and let's
03:14 - see if that's still in here
03:17 - nope fries is missing pizza hamburger
03:19 - hot dog
03:20 - so that is the add method and remove
03:22 - method but there's a few other useful
03:24 - methods
03:25 - so we can insert an object at a given
03:28 - element
03:28 - let's insert maybe sushi at index 1 via
03:32 - the insert method food dot insert
03:36 - then we need an index and an item
03:40 - so at the beginning of our list at index
03:43 - 0 i will insert
03:45 - sushi
03:49 - sushi pizza hamburger hot dog fries
03:52 - we can get the current size of our array
03:54 - using the
03:55 - count property so within a writeline
03:58 - statement
03:58 - i'm going to display food dot count
04:02 - property and the current size
04:05 - of our list is four so that is the count
04:10 - property
04:10 - we can find the index of an element
04:14 - food dot index of
04:19 - and let's find where pizza is
04:24 - so that is at index zero you can also
04:27 - find
04:28 - the last index of a given item so what
04:30 - if we have fries
04:31 - both in the beginning and at the end
04:34 - food
04:35 - dot add fries
04:40 - so i have that in the beginning and at
04:41 - the end so i'm going to use
04:43 - the last index of method
04:46 - food dot last index
04:49 - of fries
04:53 - and the last index surprise is at four
04:57 - zero one two three four so let me get
05:00 - rid of that
05:01 - okay we can check to see if our list
05:03 - contains a given item
05:05 - using the contains method food dot
05:09 - contains pizza
05:12 - this will return a boolean true if pizza
05:16 - is within our list and false if not
05:18 - pizza is within our list so that returns
05:20 - true
05:21 - and that is the contains method then we
05:24 - have sort
05:25 - food.sort this will sort our list
05:28 - alphabetically
05:30 - so our list in alphabetical order is
05:33 - fries hamburger hot dog pizza
05:35 - and we can sort in reverse order
05:38 - food.reverse
05:42 - and our list in reverse order is fry's
05:45 - hot dog hamburger pizza
05:47 - we can clear our list food
05:50 - dot clear
05:54 - and now our list is empty
05:57 - and lastly we can convert our list into
06:00 - an array
06:01 - so i'm going to declare a new array
06:02 - string let's say
06:04 - food array equals food
06:08 - dot two array
06:13 - string item in food array so we have
06:16 - pizza hamburger hot dog fries
06:19 - well okay then everybody that is a list
06:22 - it's similar to an array it's a data
06:24 - structure that represents
06:25 - a list of objects that can be accessed
06:27 - by index
06:28 - it's similar to an array but they can
06:30 - increase and decrease dynamically in
06:32 - size
06:33 - but they waste more memory so yeah those
06:36 - are lists in c
06:37 - sharp if you found this video helpful
06:38 - please be sure to give it a thumbs up
06:40 - drop a random comment down below and as
06:42 - always subscribe if you'd like to become
06:43 - a fellow bro

Cleaned transcript:

all right welcome back everybody a list a list is a data structure that represents a list of objects that can be accessed by index it's similar to an array but they can increase and decrease dynamically in size during runtime which rays cannot do so here's an example of an array an array has a static fixed size and we cannot change it normally after runtime so let's create a standard array just for this example let's create an array of food string food equals new string and let's say that this array has a size of three so i'm going to add some elements to this array and then i can display these elements with a symbol for each loop pizza hamburger and hot dog so if i attempt to add another element to this array this is what happens we'll run into an exception and index out of range exception because index was outside the bounds of the array so you can't normally change the size of an array another option is to use a list a list can increase and decrease dynamically in size during runtime so let's create a list step one is that we'll need to import system.collections.generic so include this at the top i'll place it right underneath using system and this is how to declare a list list then within angle brackets list the type of object you would like to store strings and then i will name this list food equals new list angle brackets the data type again parentheses semicolon and we now have a list named food and to add elements to this list there is a builtin add method food dot add then within this method pass in the object you would like to store i would like to store let's say a pizza then a hamburger then a hot dog so food dot add pizza hamburger and hot dog and let's take a look so we have our pizza hamburger and hot dog and i bet we can add even more than three elements so it appears that our list can resize dynamically which is a bonus then to access one of these elements it's much like an array you use that set of straight brackets so i'm going to display whatever's within element number zero food index zero and that would be pizza so accessing an element is the same as an array you just type the list name and then add a set of straight brackets then the index number okay so here's a few other useful methods of lists there is a remove method food dot remove then type in what you would like to remove i would like to remove fries and let's see if that's still in here nope fries is missing pizza hamburger hot dog so that is the add method and remove method but there's a few other useful methods so we can insert an object at a given element let's insert maybe sushi at index 1 via the insert method food dot insert then we need an index and an item so at the beginning of our list at index 0 i will insert sushi sushi pizza hamburger hot dog fries we can get the current size of our array using the count property so within a writeline statement i'm going to display food dot count property and the current size of our list is four so that is the count property we can find the index of an element food dot index of and let's find where pizza is so that is at index zero you can also find the last index of a given item so what if we have fries both in the beginning and at the end food dot add fries so i have that in the beginning and at the end so i'm going to use the last index of method food dot last index of fries and the last index surprise is at four zero one two three four so let me get rid of that okay we can check to see if our list contains a given item using the contains method food dot contains pizza this will return a boolean true if pizza is within our list and false if not pizza is within our list so that returns true and that is the contains method then we have sort food.sort this will sort our list alphabetically so our list in alphabetical order is fries hamburger hot dog pizza and we can sort in reverse order food.reverse and our list in reverse order is fry's hot dog hamburger pizza we can clear our list food dot clear and now our list is empty and lastly we can convert our list into an array so i'm going to declare a new array string let's say food array equals food dot two array string item in food array so we have pizza hamburger hot dog fries well okay then everybody that is a list it's similar to an array it's a data structure that represents a list of objects that can be accessed by index it's similar to an array but they can increase and decrease dynamically in size but they waste more memory so yeah those are lists in c sharp if you found this video helpful please be sure to give it a thumbs up drop a random comment down below and as always subscribe if you'd like to become a fellow bro
