With timestamps:

00:00 - hey what's going on everybody it's you
00:01 - bro hope you're doing well
00:03 - and in this video i'm going to explain
00:04 - how we can build a basic text editor
00:06 - program in python so
00:08 - sit back relax and enjoy the show
00:13 - okay people let's create a text editor
00:15 - here's all the different imports that
00:16 - you'll need and we'll begin by defining
00:18 - all of the different functions that
00:20 - we'll need
00:20 - so let's say we have a change color
00:23 - function to change the color of our font
00:25 - and for all of these functions i'm going
00:27 - to write pass as a placeholder
00:30 - so we have change font
00:33 - and this function will accept a varying
00:35 - amount of arguments
00:36 - so we'll use that args keyword
00:41 - we will need to open a file new
00:44 - file
00:48 - open file
00:55 - save file
01:01 - cut
01:05 - copy
01:10 - paste yeah there's a lot of functions
01:13 - here
01:15 - about
01:18 - this is for an about section
01:22 - and lastly quit
01:27 - so how many do we have one two three
01:30 - four five six seven eight
01:33 - nine ten ten functions let's create the
01:36 - main window that we're gonna work with
01:39 - window equals tk
01:41 - and at the very end window dot main
01:45 - loop
01:48 - okay so let's create a title for this
01:50 - window window
01:51 - title notepad
01:55 - program i guess or maybe text editor
01:58 - program would be more appropriate
02:00 - text editor program
02:05 - okay and we will need a file to work
02:07 - with and i'll declare that now
02:09 - file equals none
02:12 - we'll need a window width and height
02:16 - window with equals 500 is good
02:21 - and a height
02:24 - okay so let's attempt to center this
02:27 - window
02:28 - because right now it just appears to the
02:29 - side
02:32 - so our next step is to get the screen
02:34 - width
02:38 - equals window dot w
02:41 - info screen width
02:46 - and i'll copy this for screen height
02:56 - okay so we need to figure out how much
02:58 - we're going to move our window on the x
03:00 - and y axis so let's say x
03:04 - equals screen
03:07 - width divided by two
03:11 - minus window
03:15 - width divided by two and we're going to
03:19 - cast all of this to an end
03:22 - so add an inch cast around this let's
03:25 - copy this
03:26 - do the same thing for y
03:29 - except this will be screen height
03:33 - and window height
03:38 - okay let's set the geometry for the
03:40 - window window
03:42 - geometry i'm going to use a
03:46 - string format method so let's say
03:53 - these will be placeholders for our
03:55 - values
03:58 - so we have window width for the first
04:02 - value
04:03 - window height
04:07 - x and y so this should be near the
04:11 - middle
04:13 - cool
04:16 - we're going to create a string var
04:18 - variable to hold
04:19 - the font name font name
04:23 - equals string var
04:26 - and pass in your window and you can set
04:30 - this to
04:31 - what do you want your default font to be
04:33 - so let's say font name
04:35 - dot set and then pick a font i'll use
04:38 - ariel i think
04:40 - let's create a font size string bar as
04:43 - well
04:49 - we're going to add this to the window
04:53 - and we can set a default size
04:58 - perhaps 25
05:01 - okay let's create a text area
05:05 - text area equals text
05:09 - we're adding this to the window i'm
05:12 - going to set a font
05:13 - equal to font name
05:17 - dot get the name of the font that we
05:20 - want to use
05:21 - will be the font that we set within our
05:24 - font
05:25 - name string bar so now we'll use a
05:28 - size of font size
05:31 - dot get font size
05:35 - dot get okay now we need a scroll bar
05:41 - scroll bar equals
05:44 - scroll bar
05:47 - we're adding this to our text area so
05:50 - pass that in
05:52 - and i'm going to configure my window
05:55 - using grid row configure
06:00 - this will allow our text area to expand
06:04 - but we're going to set a weight equal to
06:06 - 1 so that it doesn't back expand
06:08 - and then we need column configure
06:16 - okay and text
06:20 - area dot grid
06:25 - i'm going to use the sticky keyword
06:28 - and this will stick north plus east
06:31 - plus south plus west
06:35 - so my text area should take most of the
06:37 - window
06:40 - this is some sample text
06:45 - hooray so it goes down to the next line
06:48 - once it runs out of room on
06:50 - one line unless you resize the window
06:52 - which is exactly what we wanted
06:55 - let's create a scroll bar while we
06:58 - already created it we just have to
07:00 - add a few details to it
07:03 - so that will be near the bottom
07:06 - and why don't we say scroll
07:10 - bar dot pack
07:14 - side equals right
07:17 - fill equals y
07:22 - and then we just have to configure our
07:24 - text area
07:26 - with the scroll bar so text
07:29 - area dot config
07:33 - y scroll command
07:37 - equals scroll bar
07:41 - dot set so that should work but
07:45 - let's test it to be sure okay i'm just
07:48 - going to type a bunch of apps
07:52 - okay look at that our scroll bar works
07:56 - cool okay let's head to this portion
08:00 - and we'll create a bunch of buttons well
08:03 - a button
08:04 - an option menu and a spin box for the
08:07 - font color the size and the font style
08:10 - so i'm going to place all of these
08:12 - different widgets within a frame
08:14 - frame equals frame add it to the window
08:19 - and then i'm going to use frame dot grid
08:23 - okay let's create a color button to
08:26 - change the font color
08:28 - color button equals button
08:31 - i'll add my button to my frame
08:34 - i'll set the text of the button equal to
08:37 - color
08:39 - and i will associate a command of
08:42 - change color which we have already
08:44 - defined at the top
08:46 - where is it at the top here change color
08:53 - and then actually that's it for this
08:56 - portion
08:58 - so then we need to add this button color
09:02 - button dot grid i'll set the row
09:05 - equal to zero and the column equal to
09:08 - zero
09:09 - so let's be sure that this appears make
09:12 - sure you spell grid right
09:14 - okay and we have a color button but this
09:18 - button doesn't do anything
09:19 - so let's head to the change color
09:21 - function
09:23 - within the change color function we're
09:25 - going to say
09:26 - color equals color chooser
09:31 - dot ask color
09:35 - and you can set a title to
09:38 - pick a color or
09:42 - else you don't technically need a title
09:46 - and then text area
09:49 - dot config oh i should probably print
09:53 - this color
09:54 - so let me do that um i'm just going to
09:56 - explain something here
09:58 - so this color is going to be i believe a
10:00 - tuple
10:01 - so let's print it let's say that i would
10:04 - like
10:06 - white okay so we have a tuple we just
10:10 - need
10:11 - one of these values not both of them
10:14 - so i'm going to say
10:18 - area dot config
10:22 - foreground equals our color but we do
10:24 - not want to assign a tuple
10:26 - to our color we just need one of these
10:28 - values so let's say i would like this
10:31 - hex value
10:32 - so i'm going to say at index 1
10:36 - and let's try it color
10:40 - perhaps i would like my text pink for
10:43 - some reason so we're going with pink
10:46 - this is some text i suppose
10:50 - and we can change this back to by using
10:51 - this color button now i would like
10:54 - blue and we have blue text okay so that
10:57 - is the
10:58 - change color function i'm going to
11:00 - minimize this because we do not need it
11:02 - anymore
11:03 - okay we're going to change the font next
11:05 - so
11:06 - head to the portion of our code
11:09 - right after the color button and we'll
11:11 - create an
11:12 - option menu to list all of the different
11:14 - fonts available to us
11:16 - so let's say font box equals
11:19 - option menu we're adding this to our
11:22 - frame
11:25 - we need to set a variable a string var
11:29 - so that will be our font name that we
11:31 - declared up here
11:33 - now here's a trick to add all of the
11:36 - fonts as options
11:37 - to our option menu we can use the
11:40 - unpacking operator which is an asterisk
11:42 - followed by font dot families
11:46 - and then call this function so this will
11:49 - return
11:50 - all of the different fonts available to
11:52 - us
11:53 - and we just need to set a command and
11:55 - when we use our option menu
11:58 - we'll call change font
12:01 - and we need to add our font box
12:05 - to our grid row equals 0
12:09 - and column equals one so this should be
12:12 - on the right hand side of our color
12:14 - button
12:16 - yeah it's going to look something like
12:17 - that and you can see the default is
12:19 - arial that we set
12:21 - and we can change it to something else
12:23 - like
12:24 - comic sans or whatever
12:27 - uh however it's not going to change it
12:29 - quite yet so that'll be the change font
12:31 - function
12:32 - before we fill in the change font
12:34 - function there's another widget that's
12:36 - going to share the same command of
12:38 - change font so we should create that
12:39 - next
12:40 - so our next widget is a spin box which i
12:43 - will name
12:44 - size box this will be in charge of
12:47 - increasing or decreasing the font
12:49 - so size box equals spin box
12:53 - we're adding the spin box to our frame
12:56 - and we'll set a range
12:58 - so from underscore you have to add that
13:00 - underscore it's kind of weird
13:02 - this is the range of our spin box for
13:04 - the font size from
13:06 - 1 to let's say 100
13:10 - the text variable will be
13:14 - font size
13:18 - and our command equals change
13:22 - font so when
13:26 - we use our spin box and call this
13:29 - command of change font it's going to
13:31 - pass in our font size as an argument
13:34 - whereas with option menu it doesn't pass
13:36 - any arguments
13:37 - that's why with our change font function
13:40 - we're accepting
13:41 - a varying amount of arguments because
13:43 - one's going to pass in an argument and
13:45 - the other isn't
13:47 - and we just need to add our spin box so
13:50 - that would be
13:51 - size box dot grid
13:55 - row equals zero and column
13:58 - equals two so we should have
14:02 - a spin box right on the bottom and it's
14:04 - set to 25
14:06 - that was our default for our font size
14:09 - string var which we set as the text
14:12 - variable
14:13 - okay so we can fill in this function of
14:15 - change font
14:16 - now which will apply both to our option
14:18 - menu and our spin box
14:21 - so that is all the way at the top within
14:24 - the change font function we're going to
14:26 - take
14:27 - our text area dot
14:30 - config set the font
14:33 - equal to font name
14:37 - dot get and the size will be
14:41 - size box dot get
14:44 - and that's it for this function i'll
14:47 - minimize it for now
14:48 - and let's test it this
14:52 - is some sample text
14:55 - hey how you doing good
14:59 - looking okay so let's change
15:02 - the font uh let's pick comic sans or
15:06 - whatever you want
15:07 - and we can increase or decrease the size
15:12 - and we can change the color how about
15:15 - red this time
15:17 - all right nice now let's add a menu bar
15:20 - at the top
15:21 - so we can save this file or open a file
15:24 - or create a new file
15:25 - and some other stuff on second thought
15:28 - i'm going to move
15:29 - these two last lines of code to
15:32 - this section here where we create our
15:35 - scroll bar just so that it's more
15:36 - organized
15:37 - okay so at the bottom let's create
15:40 - various drop down menus so we'll need a
15:42 - menu bar to begin with
15:44 - so let's say menu bar
15:48 - equals menu we're adding this to our
15:51 - window
15:52 - make sure that's capital by the way
15:56 - and window dot config
16:01 - menu equals menu bar
16:05 - so we'll create a file menu edit menu
16:08 - and
16:08 - a help menu so let's begin with the file
16:12 - menu tab to the menu bar file menu
16:15 - equals menu we're adding this to our
16:19 - menu
16:20 - bar and set a tear off equal to zero
16:28 - we'll need a cascade for it to actually
16:30 - be a drop down menu
16:32 - so that will be menu bar
16:35 - dot add cascade
16:42 - label equals file
16:46 - comma menu equals
16:50 - file menu
16:53 - let's see if anything appears yet yep so
16:56 - we have a file menu
16:58 - but there's nothing to drop down yet
17:02 - so we need some options
17:05 - well commands technically file menu
17:08 - dot add command
17:16 - label equals
17:19 - new and the command
17:23 - will equal our new file function
17:27 - actually i'll put these together okay so
17:30 - let's copy this
17:31 - and paste it we have open
17:37 - the command will be open file
17:43 - we have save the command will be
17:49 - save file and i'll add a separator
17:54 - file menu dot add
17:58 - separator and lastly
18:02 - we will have exit
18:05 - command quit
18:09 - okay let me show you what this looks
18:10 - like
18:12 - so here's our drop down menu
18:15 - that separator is this bold line going
18:18 - across
18:18 - so if i was to remove this then we
18:21 - wouldn't have that bolt line
18:22 - you can keep it in or get rid of it do
18:25 - whatever you want
18:26 - and this is the tear off so i'm going to
18:29 - remove the tear off
18:32 - and you get this like tear off line at
18:34 - the top i guess it's the default
18:36 - i usually don't like it so i set tear
18:38 - off equal to zero
18:40 - so that is our file menu let's work on a
18:42 - edit menu
18:45 - edit menu equals
18:48 - menu menu
18:53 - bar make sure that's capital two
18:59 - tear off equals zero
19:04 - we'll need a cascade menu bar
19:07 - dot add cascade
19:16 - label equals
19:22 - edit
19:23 - menu equals edit
19:28 - menu
19:31 - edit menu dot add
19:36 - command
19:40 - label equals cut to cut some text
19:46 - command equals copy
19:51 - actually that's cut my bad
19:54 - okay next is copy so let's copy this and
19:58 - paste it
20:02 - cut copy
20:05 - we have paste
20:08 - command paste
20:12 - all right let's take a look
20:16 - oh make sure you spell label right
20:19 - okay there we go okay so we can cut
20:23 - copy and paste and lastly we should have
20:27 - a help
20:27 - menu help
20:32 - menu equals menu
20:36 - menu bar
20:39 - tear off equals zero
20:43 - i think i'll copy this for my cascade
20:47 - so menu bar dot add cascade
20:51 - help menu equals help
20:54 - menu
20:59 - what we'll be doing for a command is
21:01 - that we'll be creating
21:02 - an about section that will bring up a
21:05 - pop-up window if you need to display
21:07 - any like help information or anything
21:10 - uh so let's say about and
21:13 - the command will be about
21:17 - okay let's take a look so we have help
21:20 - and we'll have an about section that
21:22 - will tell you more about this program
21:25 - but we need to work on some of these
21:26 - functions let's head to the
21:29 - quit function this one's fairly easy
21:31 - this is found within the file menu
21:34 - window dot destroy that will close out
21:37 - of the window
21:40 - so go to file then exit to exit the
21:43 - program
21:44 - we don't need it anymore so let's
21:46 - minimize this
21:48 - okay let's go to the about function
21:52 - let's bring up a message box show info
21:57 - this first argument is the title so
21:59 - let's say
22:00 - about this program
22:04 - and the text will be whatever you want
22:06 - to
22:07 - tell the user about this program this
22:10 - is a program written
22:14 - by you
22:18 - okay so we should have a pop-up window
22:20 - when you go to help
22:22 - then about about this program this is a
22:25 - program written by you
22:26 - the next function is the paste function
22:29 - so we can paste some text
22:32 - text area dot event
22:35 - generate and the event is going to be
22:39 - within quotes and double angle brackets
22:43 - paste let's copy this
22:47 - and change paste to copy
22:52 - and then cut
22:58 - okay so we should be able to cut copy
23:01 - and paste
23:05 - hey how's it
23:08 - hanging okay
23:11 - let's highlight this edit
23:15 - copy let's move it down to the next line
23:19 - and paste and we should be able to cut
23:23 - as well
23:24 - edit cut nice
23:27 - head to the new file function
23:30 - and we'll set the title of our window to
23:33 - maybe
23:34 - untitled until we save something so
23:37 - untitled
23:41 - and i need to delete any text within our
23:44 - text area
23:45 - text area dot delete and we need to set
23:49 - a range
23:50 - so this has to be a floating point
23:51 - number the first character until
23:54 - the end let's try it
23:57 - so i'll write some sample text
24:03 - and we are going to go to file new
24:06 - that changed the title and it deleted
24:09 - our text
24:10 - so that is the new file function
24:13 - let's work on open file we are now
24:16 - within
24:17 - the open file function and we'll say
24:20 - file
24:21 - equals ask open
24:25 - file name so we have a
24:28 - default extension if you would like one
24:32 - default i think i spelt that wrong
24:35 - extension
24:39 - equals let's say a txt file
24:44 - comma what are the accepted file types
24:50 - i'll set this equal to
24:53 - all files
24:57 - comma and then we need asterisk
25:00 - dot asterisk for all file types
25:04 - as well as text documents
25:07 - so these are what is accepted when we
25:10 - look for a file
25:12 - so we have either all files or all text
25:15 - documents
25:16 - text documents
25:21 - comma asterisk
25:25 - dot txt
25:30 - okay so then let's try some code
25:35 - we'll set our window title
25:39 - equal to os dot path
25:42 - dot base name of our file
25:45 - so that we will change the title of the
25:48 - window
25:48 - to match whatever the file is that we
25:50 - opened
25:53 - then let's take our text
25:56 - area delete what's currently here
26:00 - from one until the end
26:04 - take our file use the open function
26:08 - open our file and read it so pass in our
26:14 - text area dot insert
26:20 - beginning at index of one point zero
26:25 - file dot read
26:28 - that you can catch any exceptions to
26:32 - i'll just write accept exception but
26:34 - it's better to name
26:36 - specific exceptions i'll just print
26:42 - couldn't read
26:45 - file and we should close our file at the
26:49 - end within a finally block
26:52 - finally file dot close
26:56 - we'll need a sample file to read so i'm
26:58 - going to create a new file on my desktop
27:02 - i'll call this test.txt
27:05 - and let's write something whoa
27:08 - you can actually read this
27:14 - awesome okay let's save close out of it
27:19 - add run our program
27:22 - file open test.txt
27:26 - open whoa you can actually read this
27:30 - awesome nice so we know that the
27:33 - open function is working if we need to
27:35 - create a new file just go to file
27:37 - new and that will delete our old text
27:42 - so lastly we have save file
27:46 - underneath the save file function file
27:49 - equals file dialog
27:52 - dot ask save as
27:56 - file name so this will be the default
27:59 - name for the file but you can change
28:01 - that
28:02 - initial file equals
28:06 - let's say untitled
28:10 - dot txt
28:14 - you can set a default extension default
28:18 - extension equals let's say txt
28:27 - file types equals
28:35 - all files
28:39 - comma then asterisk dot asterisk
28:43 - for all file types
28:51 - and any text documents text
28:56 - documents
28:59 - asterisk dot txt
29:07 - okay if file
29:10 - is none that's if they close out of our
29:13 - file dialog
29:17 - we'll just return
29:20 - else
29:24 - so we'll set the window title first
29:28 - window title os dot path
29:32 - dot base name
29:38 - file
29:40 - file equals open open
29:43 - our file and write
29:48 - file dot right
29:52 - take our text area and get
29:55 - the text from
29:58 - index one through the end
30:04 - catch any exceptions it's better to name
30:06 - them instead of just doing
30:07 - a general accept exception
30:10 - but i'm just going to print couldn't
30:14 - save file
30:18 - and finally close our file
30:21 - file dot close all right so
30:25 - let's test it so i'm going to change
30:28 - the font i wonder if impact is in here
30:33 - yes it is i'll change the font size
30:36 - maybe 30 and i'll pick a color how about
30:40 - this
30:40 - swamp green color okay so write
30:43 - something
30:44 - perhaps some lyrics to a song you like
31:01 - i should probably test copying and
31:03 - pasting
31:04 - edit copy
31:08 - edit paste
31:12 - nice
31:16 - all right let's actually try and save
31:18 - this now i'll go to
31:19 - file save the default file name
31:23 - is untitled because we set it to that
31:27 - i'll say all star
31:30 - lyrics
31:35 - and save now i should be able to open
31:38 - this
31:40 - so i'm going to go to my desktop here's
31:42 - that text file i'm going to open it
31:44 - and here are the lyrics that i wrote
31:46 - within my text editor
31:47 - and let's try and read this so let's go
31:50 - to
31:50 - file open find your text document
31:54 - open and would you look at that my
31:56 - lyrics are still here
31:58 - however this program doesn't save the
32:00 - font
32:01 - so i thought of a fun last minute
32:03 - project that we can do we can actually
32:05 - use our text editor to write a python
32:07 - file much like what we do with pycharm
32:10 - so let's write a program using our text
32:13 - editor program
32:14 - it'll be just a simple program let's
32:17 - print
32:19 - hello world and ask for some user input
32:24 - let's say name equals input
32:30 - what's your name
32:35 - and we will print
32:39 - hello plus our name
32:42 - variable and you can change the font and
32:45 - everything too if you want
32:52 - okay so let's save this file save i'll
32:56 - save this to my desktop
32:57 - but make sure you save it as a py file a
33:01 - python file
33:02 - i'll name this as hello dot
33:05 - py and save
33:08 - now to run a file using command prompt
33:11 - we need to find
33:12 - the directory that contains our python
33:13 - file mine is hello.py and it's located
33:17 - on my desktop
33:18 - so i need the location right click go to
33:21 - properties
33:22 - you can copy the location then within
33:25 - command prompt or terminal
33:27 - you can change directory by typing cd
33:29 - space
33:30 - and then paste your new directory the
33:32 - new location
33:34 - enter then to run a python program
33:37 - type python space and then
33:40 - the name of the program the python file
33:42 - mine is hello
33:44 - dot py hit enter hello world
33:47 - what is your name bro hello bro
33:51 - i just thought that would be a fun last
33:53 - minute project that we can do you don't
33:54 - even technically need
33:56 - an ide to write a python program screw
33:58 - you pycharm well everyone
34:00 - that is a basic text editor program i
34:03 - will post the code for this program in
34:05 - the comment
34:06 - section down below and well yeah that's
34:08 - a basic text editor program using python
34:13 - hey you yeah i'm talking to you if you
34:15 - learn something new
34:16 - then you can help me help you in three
34:19 - easy steps
34:20 - by smashing that like button drop a
34:23 - comment down below
34:24 - and subscribe if you'd like to become a
34:26 - fellow bro
34:47 - you

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to explain how we can build a basic text editor program in python so sit back relax and enjoy the show okay people let's create a text editor here's all the different imports that you'll need and we'll begin by defining all of the different functions that we'll need so let's say we have a change color function to change the color of our font and for all of these functions i'm going to write pass as a placeholder so we have change font and this function will accept a varying amount of arguments so we'll use that args keyword we will need to open a file new file open file save file cut copy paste yeah there's a lot of functions here about this is for an about section and lastly quit so how many do we have one two three four five six seven eight nine ten ten functions let's create the main window that we're gonna work with window equals tk and at the very end window dot main loop okay so let's create a title for this window window title notepad program i guess or maybe text editor program would be more appropriate text editor program okay and we will need a file to work with and i'll declare that now file equals none we'll need a window width and height window with equals 500 is good and a height okay so let's attempt to center this window because right now it just appears to the side so our next step is to get the screen width equals window dot w info screen width and i'll copy this for screen height okay so we need to figure out how much we're going to move our window on the x and y axis so let's say x equals screen width divided by two minus window width divided by two and we're going to cast all of this to an end so add an inch cast around this let's copy this do the same thing for y except this will be screen height and window height okay let's set the geometry for the window window geometry i'm going to use a string format method so let's say these will be placeholders for our values so we have window width for the first value window height x and y so this should be near the middle cool we're going to create a string var variable to hold the font name font name equals string var and pass in your window and you can set this to what do you want your default font to be so let's say font name dot set and then pick a font i'll use ariel i think let's create a font size string bar as well we're going to add this to the window and we can set a default size perhaps 25 okay let's create a text area text area equals text we're adding this to the window i'm going to set a font equal to font name dot get the name of the font that we want to use will be the font that we set within our font name string bar so now we'll use a size of font size dot get font size dot get okay now we need a scroll bar scroll bar equals scroll bar we're adding this to our text area so pass that in and i'm going to configure my window using grid row configure this will allow our text area to expand but we're going to set a weight equal to 1 so that it doesn't back expand and then we need column configure okay and text area dot grid i'm going to use the sticky keyword and this will stick north plus east plus south plus west so my text area should take most of the window this is some sample text hooray so it goes down to the next line once it runs out of room on one line unless you resize the window which is exactly what we wanted let's create a scroll bar while we already created it we just have to add a few details to it so that will be near the bottom and why don't we say scroll bar dot pack side equals right fill equals y and then we just have to configure our text area with the scroll bar so text area dot config y scroll command equals scroll bar dot set so that should work but let's test it to be sure okay i'm just going to type a bunch of apps okay look at that our scroll bar works cool okay let's head to this portion and we'll create a bunch of buttons well a button an option menu and a spin box for the font color the size and the font style so i'm going to place all of these different widgets within a frame frame equals frame add it to the window and then i'm going to use frame dot grid okay let's create a color button to change the font color color button equals button i'll add my button to my frame i'll set the text of the button equal to color and i will associate a command of change color which we have already defined at the top where is it at the top here change color and then actually that's it for this portion so then we need to add this button color button dot grid i'll set the row equal to zero and the column equal to zero so let's be sure that this appears make sure you spell grid right okay and we have a color button but this button doesn't do anything so let's head to the change color function within the change color function we're going to say color equals color chooser dot ask color and you can set a title to pick a color or else you don't technically need a title and then text area dot config oh i should probably print this color so let me do that um i'm just going to explain something here so this color is going to be i believe a tuple so let's print it let's say that i would like white okay so we have a tuple we just need one of these values not both of them so i'm going to say area dot config foreground equals our color but we do not want to assign a tuple to our color we just need one of these values so let's say i would like this hex value so i'm going to say at index 1 and let's try it color perhaps i would like my text pink for some reason so we're going with pink this is some text i suppose and we can change this back to by using this color button now i would like blue and we have blue text okay so that is the change color function i'm going to minimize this because we do not need it anymore okay we're going to change the font next so head to the portion of our code right after the color button and we'll create an option menu to list all of the different fonts available to us so let's say font box equals option menu we're adding this to our frame we need to set a variable a string var so that will be our font name that we declared up here now here's a trick to add all of the fonts as options to our option menu we can use the unpacking operator which is an asterisk followed by font dot families and then call this function so this will return all of the different fonts available to us and we just need to set a command and when we use our option menu we'll call change font and we need to add our font box to our grid row equals 0 and column equals one so this should be on the right hand side of our color button yeah it's going to look something like that and you can see the default is arial that we set and we can change it to something else like comic sans or whatever uh however it's not going to change it quite yet so that'll be the change font function before we fill in the change font function there's another widget that's going to share the same command of change font so we should create that next so our next widget is a spin box which i will name size box this will be in charge of increasing or decreasing the font so size box equals spin box we're adding the spin box to our frame and we'll set a range so from underscore you have to add that underscore it's kind of weird this is the range of our spin box for the font size from 1 to let's say 100 the text variable will be font size and our command equals change font so when we use our spin box and call this command of change font it's going to pass in our font size as an argument whereas with option menu it doesn't pass any arguments that's why with our change font function we're accepting a varying amount of arguments because one's going to pass in an argument and the other isn't and we just need to add our spin box so that would be size box dot grid row equals zero and column equals two so we should have a spin box right on the bottom and it's set to 25 that was our default for our font size string var which we set as the text variable okay so we can fill in this function of change font now which will apply both to our option menu and our spin box so that is all the way at the top within the change font function we're going to take our text area dot config set the font equal to font name dot get and the size will be size box dot get and that's it for this function i'll minimize it for now and let's test it this is some sample text hey how you doing good looking okay so let's change the font uh let's pick comic sans or whatever you want and we can increase or decrease the size and we can change the color how about red this time all right nice now let's add a menu bar at the top so we can save this file or open a file or create a new file and some other stuff on second thought i'm going to move these two last lines of code to this section here where we create our scroll bar just so that it's more organized okay so at the bottom let's create various drop down menus so we'll need a menu bar to begin with so let's say menu bar equals menu we're adding this to our window make sure that's capital by the way and window dot config menu equals menu bar so we'll create a file menu edit menu and a help menu so let's begin with the file menu tab to the menu bar file menu equals menu we're adding this to our menu bar and set a tear off equal to zero we'll need a cascade for it to actually be a drop down menu so that will be menu bar dot add cascade label equals file comma menu equals file menu let's see if anything appears yet yep so we have a file menu but there's nothing to drop down yet so we need some options well commands technically file menu dot add command label equals new and the command will equal our new file function actually i'll put these together okay so let's copy this and paste it we have open the command will be open file we have save the command will be save file and i'll add a separator file menu dot add separator and lastly we will have exit command quit okay let me show you what this looks like so here's our drop down menu that separator is this bold line going across so if i was to remove this then we wouldn't have that bolt line you can keep it in or get rid of it do whatever you want and this is the tear off so i'm going to remove the tear off and you get this like tear off line at the top i guess it's the default i usually don't like it so i set tear off equal to zero so that is our file menu let's work on a edit menu edit menu equals menu menu bar make sure that's capital two tear off equals zero we'll need a cascade menu bar dot add cascade label equals edit menu equals edit menu edit menu dot add command label equals cut to cut some text command equals copy actually that's cut my bad okay next is copy so let's copy this and paste it cut copy we have paste command paste all right let's take a look oh make sure you spell label right okay there we go okay so we can cut copy and paste and lastly we should have a help menu help menu equals menu menu bar tear off equals zero i think i'll copy this for my cascade so menu bar dot add cascade help menu equals help menu what we'll be doing for a command is that we'll be creating an about section that will bring up a popup window if you need to display any like help information or anything uh so let's say about and the command will be about okay let's take a look so we have help and we'll have an about section that will tell you more about this program but we need to work on some of these functions let's head to the quit function this one's fairly easy this is found within the file menu window dot destroy that will close out of the window so go to file then exit to exit the program we don't need it anymore so let's minimize this okay let's go to the about function let's bring up a message box show info this first argument is the title so let's say about this program and the text will be whatever you want to tell the user about this program this is a program written by you okay so we should have a popup window when you go to help then about about this program this is a program written by you the next function is the paste function so we can paste some text text area dot event generate and the event is going to be within quotes and double angle brackets paste let's copy this and change paste to copy and then cut okay so we should be able to cut copy and paste hey how's it hanging okay let's highlight this edit copy let's move it down to the next line and paste and we should be able to cut as well edit cut nice head to the new file function and we'll set the title of our window to maybe untitled until we save something so untitled and i need to delete any text within our text area text area dot delete and we need to set a range so this has to be a floating point number the first character until the end let's try it so i'll write some sample text and we are going to go to file new that changed the title and it deleted our text so that is the new file function let's work on open file we are now within the open file function and we'll say file equals ask open file name so we have a default extension if you would like one default i think i spelt that wrong extension equals let's say a txt file comma what are the accepted file types i'll set this equal to all files comma and then we need asterisk dot asterisk for all file types as well as text documents so these are what is accepted when we look for a file so we have either all files or all text documents text documents comma asterisk dot txt okay so then let's try some code we'll set our window title equal to os dot path dot base name of our file so that we will change the title of the window to match whatever the file is that we opened then let's take our text area delete what's currently here from one until the end take our file use the open function open our file and read it so pass in our text area dot insert beginning at index of one point zero file dot read that you can catch any exceptions to i'll just write accept exception but it's better to name specific exceptions i'll just print couldn't read file and we should close our file at the end within a finally block finally file dot close we'll need a sample file to read so i'm going to create a new file on my desktop i'll call this test.txt and let's write something whoa you can actually read this awesome okay let's save close out of it add run our program file open test.txt open whoa you can actually read this awesome nice so we know that the open function is working if we need to create a new file just go to file new and that will delete our old text so lastly we have save file underneath the save file function file equals file dialog dot ask save as file name so this will be the default name for the file but you can change that initial file equals let's say untitled dot txt you can set a default extension default extension equals let's say txt file types equals all files comma then asterisk dot asterisk for all file types and any text documents text documents asterisk dot txt okay if file is none that's if they close out of our file dialog we'll just return else so we'll set the window title first window title os dot path dot base name file file equals open open our file and write file dot right take our text area and get the text from index one through the end catch any exceptions it's better to name them instead of just doing a general accept exception but i'm just going to print couldn't save file and finally close our file file dot close all right so let's test it so i'm going to change the font i wonder if impact is in here yes it is i'll change the font size maybe 30 and i'll pick a color how about this swamp green color okay so write something perhaps some lyrics to a song you like i should probably test copying and pasting edit copy edit paste nice all right let's actually try and save this now i'll go to file save the default file name is untitled because we set it to that i'll say all star lyrics and save now i should be able to open this so i'm going to go to my desktop here's that text file i'm going to open it and here are the lyrics that i wrote within my text editor and let's try and read this so let's go to file open find your text document open and would you look at that my lyrics are still here however this program doesn't save the font so i thought of a fun last minute project that we can do we can actually use our text editor to write a python file much like what we do with pycharm so let's write a program using our text editor program it'll be just a simple program let's print hello world and ask for some user input let's say name equals input what's your name and we will print hello plus our name variable and you can change the font and everything too if you want okay so let's save this file save i'll save this to my desktop but make sure you save it as a py file a python file i'll name this as hello dot py and save now to run a file using command prompt we need to find the directory that contains our python file mine is hello.py and it's located on my desktop so i need the location right click go to properties you can copy the location then within command prompt or terminal you can change directory by typing cd space and then paste your new directory the new location enter then to run a python program type python space and then the name of the program the python file mine is hello dot py hit enter hello world what is your name bro hello bro i just thought that would be a fun last minute project that we can do you don't even technically need an ide to write a python program screw you pycharm well everyone that is a basic text editor program i will post the code for this program in the comment section down below and well yeah that's a basic text editor program using python hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
