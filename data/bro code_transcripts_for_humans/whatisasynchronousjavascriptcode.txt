With timestamps:

00:00 - yo what's going on people so in today's
00:02 - video I got to explain what asynchronous
00:04 - code is in JavaScript synchronous is
00:07 - code that executes line by line
00:10 - consecutively in a sequential manner
00:12 - synchronous code waits for an operation
00:14 - to complete for example if I were to use
00:18 - console.log Let's Pretend We're
00:20 - performing some task it doesn't matter
00:22 - what the task is we will pretend that
00:24 - task one is complete then we'll move on
00:26 - to task two then task three all this
00:30 - code is synchronous we're executing this
00:32 - code line by line we can't move on to
00:35 - task two until we complete task one
00:38 - there is an order of events that we need
00:40 - to follow it's code that waits for an
00:43 - operation to complete now on the other
00:45 - hand asynchronous code allows multiple
00:48 - operations to be performed concurrently
00:51 - without waiting asynchronous code
00:54 - doesn't block the execution flow and
00:56 - allows the program to continue imagine
00:59 - that a as synchronous code is kind of
01:01 - like a time traveler a time traveler can
01:03 - move out of the flow of time but the
01:06 - rest of the world continues time resumes
01:08 - normally asynchronous code doesn't block
01:10 - the execution flow time moves on with or
01:14 - without it asynchronous code is
01:16 - typically found with input output
01:18 - operations Network requests and fetching
01:21 - data anything that could take an
01:22 - indeterminate amount of time so for
01:25 - example I will use the set timeout
01:29 - function
01:31 - after 3 seconds I will execute a
01:34 - function let's
01:36 - console.log let's say task one we'll
01:40 - change these three lines to be task two
01:43 - task three task 4 I will finish task one
01:47 - after 3,000 milliseconds now check this
01:51 - out we've already completed task 2 three
01:54 - and four but task one finished last
01:57 - that's because set timeout is one of of
02:00 - many asynchronous functions the rest of
02:02 - the program isn't going to wait around
02:04 - for it to complete it runs concurrently
02:06 - with the rest of my code that's why task
02:09 - one was completed at the end and not at
02:11 - the beginning there's different ways to
02:13 - handle asynchronous code we already
02:16 - familiar with callbacks but there's also
02:18 - promises as well as a sync and a wait we
02:22 - still need to discuss these topics in
02:23 - the future but we're already familiar
02:25 - with callbacks if it's crucial that task
02:28 - 2 through 4 finishes after task one we
02:31 - can use a call back we don't necessarily
02:34 - know how long this asynchronous function
02:36 - is going to take what we could do in
02:37 - this example is create a function
02:40 - function Funk one meaning function
02:44 - one I will execute this code within
02:46 - function
02:48 - one then we will accept a callback as an
02:52 - argument then we'll have function Funk 2
02:59 - to do some synchronous
03:01 - code function two will have tasks 2
03:05 - through
03:06 - 4 after task one is complete I will
03:09 - invoke my call back to function two so
03:12 - with an arrow function I have more than
03:14 - one line of code I need to add a set of
03:16 - curly
03:17 - braces after task
03:20 - one I will invoke that call
03:25 - back so then if I call Function
03:28 - One
03:30 - I have to pass a call back to function
03:34 - two so Now function one is a synchronous
03:38 - but I need this synchronous code to
03:41 - execute after task one is complete and
03:44 - now that should
03:45 - work 1 2 3 there it is we have task one
03:51 - which is asynchronous followed by task
03:54 - two task three and task 4 so by using
03:57 - callbacks that's one way in which we we
03:59 - can handle asynchronous code but we
04:01 - still need to discuss promises a sync
04:04 - and a wait which are future topics all
04:07 - right everybody so that is what
04:08 - asynchronous code is synchronous code
04:11 - executes line by line consecutively in a
04:14 - sequential manner asynchronous code
04:17 - allows multiple operations to be
04:19 - performed concurrently without waiting
04:22 - asynchronous code doesn't block the
04:25 - execution flow and allows the rest of
04:27 - the program to continue asynchronous
04:29 - code is commonly found with input output
04:32 - operations Network requests and fetching
04:35 - data usually anything that takes an
04:37 - indeterminate amount of time and well
04:39 - everybody that's what asynchronous code
04:41 - is in
04:46 - JavaScript

Cleaned transcript:

yo what's going on people so in today's video I got to explain what asynchronous code is in JavaScript synchronous is code that executes line by line consecutively in a sequential manner synchronous code waits for an operation to complete for example if I were to use console.log Let's Pretend We're performing some task it doesn't matter what the task is we will pretend that task one is complete then we'll move on to task two then task three all this code is synchronous we're executing this code line by line we can't move on to task two until we complete task one there is an order of events that we need to follow it's code that waits for an operation to complete now on the other hand asynchronous code allows multiple operations to be performed concurrently without waiting asynchronous code doesn't block the execution flow and allows the program to continue imagine that a as synchronous code is kind of like a time traveler a time traveler can move out of the flow of time but the rest of the world continues time resumes normally asynchronous code doesn't block the execution flow time moves on with or without it asynchronous code is typically found with input output operations Network requests and fetching data anything that could take an indeterminate amount of time so for example I will use the set timeout function after 3 seconds I will execute a function let's console.log let's say task one we'll change these three lines to be task two task three task 4 I will finish task one after 3,000 milliseconds now check this out we've already completed task 2 three and four but task one finished last that's because set timeout is one of of many asynchronous functions the rest of the program isn't going to wait around for it to complete it runs concurrently with the rest of my code that's why task one was completed at the end and not at the beginning there's different ways to handle asynchronous code we already familiar with callbacks but there's also promises as well as a sync and a wait we still need to discuss these topics in the future but we're already familiar with callbacks if it's crucial that task 2 through 4 finishes after task one we can use a call back we don't necessarily know how long this asynchronous function is going to take what we could do in this example is create a function function Funk one meaning function one I will execute this code within function one then we will accept a callback as an argument then we'll have function Funk 2 to do some synchronous code function two will have tasks 2 through 4 after task one is complete I will invoke my call back to function two so with an arrow function I have more than one line of code I need to add a set of curly braces after task one I will invoke that call back so then if I call Function One I have to pass a call back to function two so Now function one is a synchronous but I need this synchronous code to execute after task one is complete and now that should work 1 2 3 there it is we have task one which is asynchronous followed by task two task three and task 4 so by using callbacks that's one way in which we we can handle asynchronous code but we still need to discuss promises a sync and a wait which are future topics all right everybody so that is what asynchronous code is synchronous code executes line by line consecutively in a sequential manner asynchronous code allows multiple operations to be performed concurrently without waiting asynchronous code doesn't block the execution flow and allows the rest of the program to continue asynchronous code is commonly found with input output operations Network requests and fetching data usually anything that takes an indeterminate amount of time and well everybody that's what asynchronous code is in JavaScript
