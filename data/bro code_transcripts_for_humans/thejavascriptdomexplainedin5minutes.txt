With timestamps:

00:00 - all right what's going on people so
00:01 - today I got to explain what the Dom is
00:03 - in JavaScript the Dom is the document
00:06 - object model it's a JavaScript object
00:09 - that represents the page you see in the
00:11 - web browser and it provides you with an
00:13 - API to interact with it the web browser
00:16 - constructs the Dom when it loads an HTML
00:18 - document and structures all of the
00:20 - elements in a tree likee representation
00:22 - within my HTML document we have our HTML
00:25 - element as the root element the HTML
00:28 - element contains a head element and a
00:30 - body element and many various elements
00:32 - can be found within each of these
00:34 - they're arranged in a tree like data
00:36 - structure but we access this tree like
00:38 - data structure from the document object
00:41 - in past lessons in order to select an
00:43 - element by its ID we would type document
00:46 - dot then follow it with a method like
00:49 - get element by ID and then we would
00:52 - select an element by its ID our document
00:55 - is an object it contains properties and
00:57 - methods and other nested objects if I
01:00 - was to
01:02 - console.log the
01:05 - document well then it's going to display
01:08 - my HTML
01:10 - document now you can also use dur
01:12 - meaning directory this will list all of
01:15 - the properties of this
01:18 - object so here's my document object and
01:21 - all of the different properties it
01:23 - contains it's one gigantic object for
01:26 - example we have a title the title of the
01:29 - web page
01:31 - that would be found right here near the
01:32 - bottom document but you can change
01:36 - it I will access our document as if it
01:39 - was an object because it is access the
01:42 - title property change it to something
01:44 - else like my
01:46 - website now if I display the
01:50 - title that property has changed it's now
01:52 - my website dynamically after the page
01:55 - loads I would like to change the
01:57 - background color of my document later on
01:59 - in the series we're going to create a
02:00 - toggle button to toggle between light
02:02 - and dark mode just to give you an
02:04 - example if I need to change my theme to
02:06 - be dark mode I could access the document
02:10 - object access the
02:12 - body access the style then change the
02:16 - background color property to some color
02:21 - let's stick with black for
02:23 - now I'll use
02:25 - hsl the Hue will be zero saturation will
02:28 - be 0%
02:30 - and the lightness will be
02:33 - 15% even though we have no CSS we're
02:36 - still able to dynamically change the
02:38 - background color let me give you another
02:42 - example we'll create an H1
02:45 - element this H1 element will say
02:49 - welcome I will give this element an ID
02:53 - ID
02:54 - welcome- MSG meaning
02:58 - message
03:01 - and I'm just going to zoom in a little I
03:03 - will create a constant of
03:06 - username type in your username or your
03:08 - full
03:10 - name I'm going to conditionally change
03:13 - the content of this HTML document I will
03:17 - get this element by its ID our welcome
03:20 - message const welcome message I'm using
03:25 - camel case naming convention for this so
03:27 - I will access my document use the get
03:31 - element by ID method that ID was welcom
03:36 - Das message MSG for short I would like
03:40 - to update the text content of this
03:42 - element I'll take my welcome
03:45 - message access the text content of it
03:49 - then append some text using string
03:52 - catenation I'll use the tary operator to
03:54 - see if my username is strictly equal to
03:58 - an empty string is our username empty
04:01 - did somebody not type it
04:03 - in question mark If username is empty I
04:07 - will append our welcome message with
04:10 - guest otherwise our
04:13 - username my username has a name it's not
04:16 - empty it will display my name welcome
04:19 - bro code if it was empty if somebody
04:21 - didn't type it in it will display
04:23 - welcome guest so that's an introduction
04:26 - to the document object model the
04:28 - document object model is a JavaScript
04:31 - object that represents the page you see
04:33 - in the web browser and it provides you
04:35 - with an API to interact with it the web
04:37 - browser constructs the Dom when it loads
04:39 - an HTML document and structures all of
04:42 - the elements in a tree like
04:43 - representation by using JavaScript we
04:45 - can access the Dom dynamically after the
04:48 - page loads and change the content
04:50 - structure and style of a web page and
04:53 - well everybody that is an introduction
04:55 - to the document object model in
04:58 - JavaScript

Cleaned transcript:

all right what's going on people so today I got to explain what the Dom is in JavaScript the Dom is the document object model it's a JavaScript object that represents the page you see in the web browser and it provides you with an API to interact with it the web browser constructs the Dom when it loads an HTML document and structures all of the elements in a tree likee representation within my HTML document we have our HTML element as the root element the HTML element contains a head element and a body element and many various elements can be found within each of these they're arranged in a tree like data structure but we access this tree like data structure from the document object in past lessons in order to select an element by its ID we would type document dot then follow it with a method like get element by ID and then we would select an element by its ID our document is an object it contains properties and methods and other nested objects if I was to console.log the document well then it's going to display my HTML document now you can also use dur meaning directory this will list all of the properties of this object so here's my document object and all of the different properties it contains it's one gigantic object for example we have a title the title of the web page that would be found right here near the bottom document but you can change it I will access our document as if it was an object because it is access the title property change it to something else like my website now if I display the title that property has changed it's now my website dynamically after the page loads I would like to change the background color of my document later on in the series we're going to create a toggle button to toggle between light and dark mode just to give you an example if I need to change my theme to be dark mode I could access the document object access the body access the style then change the background color property to some color let's stick with black for now I'll use hsl the Hue will be zero saturation will be 0% and the lightness will be 15% even though we have no CSS we're still able to dynamically change the background color let me give you another example we'll create an H1 element this H1 element will say welcome I will give this element an ID ID welcome MSG meaning message and I'm just going to zoom in a little I will create a constant of username type in your username or your full name I'm going to conditionally change the content of this HTML document I will get this element by its ID our welcome message const welcome message I'm using camel case naming convention for this so I will access my document use the get element by ID method that ID was welcom Das message MSG for short I would like to update the text content of this element I'll take my welcome message access the text content of it then append some text using string catenation I'll use the tary operator to see if my username is strictly equal to an empty string is our username empty did somebody not type it in question mark If username is empty I will append our welcome message with guest otherwise our username my username has a name it's not empty it will display my name welcome bro code if it was empty if somebody didn't type it in it will display welcome guest so that's an introduction to the document object model the document object model is a JavaScript object that represents the page you see in the web browser and it provides you with an API to interact with it the web browser constructs the Dom when it loads an HTML document and structures all of the elements in a tree like representation by using JavaScript we can access the Dom dynamically after the page loads and change the content structure and style of a web page and well everybody that is an introduction to the document object model in JavaScript
