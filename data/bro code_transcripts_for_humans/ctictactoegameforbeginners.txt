With timestamps:

00:02 - hey guys in this topic we're going to
00:03 - create a game of tic-tac-toe we'll be
00:06 - working with random numbers you may or
00:07 - may not need to include this header file
00:09 - include
00:12 - c
00:12 - time
00:13 - we'll add some function declarations
00:15 - then some definitions
00:17 - void
00:18 - draw
00:19 - board
00:20 - there will be one parameter
00:22 - a pointer to an array named spaces
00:26 - spaces will be a one-dimensional array
00:28 - that will keep track of all the markers
00:30 - like what spots are taken what spots are
00:32 - occupied
00:36 - player move
00:39 - the parameters will be a pointer to
00:42 - spaces
00:43 - and char
00:44 - player
00:47 - computer move
00:50 - a pointer to spaces
00:53 - char
00:54 - computer
00:57 - check winner
00:59 - a pointer to spaces
01:01 - char player
01:03 - and char
01:04 - computer
01:06 - then lastly
01:09 - check
01:10 - tie
01:11 - and all we need is a pointer to our
01:13 - array spaces
01:15 - oh uh check winner and check tie will
01:18 - both return a boolean value
01:22 - okay let's add some function
01:24 - declarations so after the main function
01:26 - let's paste these
01:36 - we do need to return some value for
01:38 - check winner and check tie because there
01:39 - is a return type just for now as a
01:41 - placeholder i'm going to return zero
01:46 - but we'll change that later
01:48 - let's head to the main function and
01:49 - declare everything that we'll need
01:52 - a character array named spaces
01:56 - the size will be nine nine spaces
02:00 - we'll have nine elements each contains
02:02 - an empty space
02:13 - one two three four five six seven eight
02:15 - nine good
02:18 - char player
02:20 - pick a character that you'd like to be
02:22 - you could do x or something else
02:27 - char computer
02:30 - pick a character for the computer
02:32 - let's begin with o
02:36 - boolean
02:37 - running i'll set the sequel to true
02:40 - when we begin our game we will
02:42 - immediately invoke the drawboard
02:44 - function
02:46 - then pass in our array
02:48 - so remember when we pass an array to a
02:50 - function it decays into a pointer
02:53 - so we don't need to create a pointer for
02:55 - this array
02:56 - within the drawboard function we will
02:58 - display a grid
03:01 - so let's write something like this
03:03 - standard output
03:05 - i'll add five spaces one two three four
03:08 - five then a vertical bar
03:11 - five spaces again one two three four
03:13 - five
03:15 - vertical bar
03:16 - one two three four five
03:19 - then a new line
03:23 - okay let's copy this line
03:27 - right in the middle i'm going to add one
03:29 - of the elements of our array spaces
03:31 - so right about there
03:35 - spaces at index zero
03:41 - i'm going to copy this section of code
03:44 - right in the middle between the two
03:45 - vertical bars i'll paste what we copied
03:48 - spaces at index one
03:51 - then again
03:52 - right in the middle
03:54 - paste what you have
03:56 - spaces at index
03:58 - two
04:00 - this time we'll create a horizontal bar
04:03 - let's copy this
04:05 - we'll replace the spaces with
04:07 - underscores
04:09 - so right about there
04:17 - okay let's see what we have
04:20 - okay yeah something like this
04:22 - we'll have a player or the computer
04:24 - right in the center
04:26 - so let's copy this line on top
04:29 - paste it underneath
04:31 - copy this line that displays elements of
04:33 - our array
04:35 - paste it underneath but change the
04:37 - element numbers
04:38 - three
04:39 - four
04:41 - five and we'll copy this line
04:45 - paste it underneath
04:48 - let's double check to see what we have
04:50 - okay we're getting somewhere
04:52 - let's copy this line
04:55 - paste it
04:57 - copy one of these lines where we display
04:59 - the elements of the array
05:03 - paste it underneath
05:06 - so we are missing
05:07 - elements six seven
05:11 - eight
05:14 - let's copy one of these empty lines
05:18 - paste it underneath
05:20 - uh then before and after we display this
05:23 - grid i'll just display a new line
05:25 - standard output
05:28 - new line
05:29 - and let's do that after
05:34 - okay let's see what we have
05:40 - yeah not too bad there's our grid of
05:42 - nine spaces
05:44 - okay that is the drawboard function we
05:46 - can close out of this we're done with it
05:48 - when we invoke the drawboard function we
05:50 - will pass in our array which decays to a
05:53 - pointer and then prints our board
05:55 - let's add a while loop after the
05:57 - drawboard function
05:59 - while
06:00 - our condition is running running is set
06:02 - to true initially
06:04 - when we exit out of the game we'll set
06:06 - running to be false
06:07 - the first thing that we'll do is invoke
06:09 - the player move function
06:11 - player move but we need to pass in our
06:14 - array spaces
06:16 - as well as a player
06:18 - player
06:19 - then let's fill in the player move
06:21 - function
06:23 - okay player move
06:24 - i'll create a local variable named
06:26 - number
06:28 - the user will enter in a number between
06:30 - one and nine depending on what space
06:32 - they'd like to occupy with their marker
06:34 - i'll create a do while loop
06:36 - do
06:38 - while
06:39 - the condition will be
06:41 - not
06:42 - number
06:44 - is greater than zero
06:46 - or
06:47 - not
06:48 - number
06:49 - is less than eight
06:51 - the user can only enter in a number
06:53 - between zero and eight those numbers
06:56 - correspond to the elements of our array
06:58 - elements with indices zero through 8.
07:02 - within the do while loop will ask for
07:04 - some user input standard output
07:08 - enter a spot
07:11 - to place a marker
07:14 - one through nine
07:16 - whatever the user types in we'll just
07:17 - subtract one because the user doesn't
07:20 - know that arrays start with zero
07:21 - supposedly
07:23 - standard input
07:26 - number
07:27 - so the user will enter in a number
07:29 - between one and nine
07:31 - then we will decrement the number by one
07:34 - because the array starts with zero
07:39 - if
07:41 - spaces
07:42 - at index of number whatever the user
07:45 - types in
07:46 - is equal to an empty space
07:49 - if that space isn't occupied we'll add
07:52 - that marker to that spot
07:54 - spaces at index of number
07:57 - equals
07:59 - the player's marker
08:01 - then we'd like to break out of this
08:02 - while loop
08:04 - so after the player moves let's draw the
08:06 - board again to reflect any changes
08:12 - okay enter a spot to place a marker how
08:14 - about one
08:15 - yeah there's our marker let's try it
08:17 - again
08:19 - how about nine
08:21 - yep and we are in the last spot the
08:23 - bottom right corner let's enter in a
08:25 - number that's outside of this range like
08:27 - 100
08:28 - enter a spot to place a marker uh
08:31 - negative one
08:32 - okay so we're limited to the numbers one
08:34 - through nine even if i were to type zero
08:36 - we still can't uh so let's try something
08:39 - in the middle that would be one two
08:41 - three four five
08:44 - yeah and there's our marker i'm just
08:46 - gonna add a colon then a space
08:48 - okay and that is the player move
08:50 - function
08:51 - we can close out of this function
08:54 - let's work on the computer move function
08:56 - next
08:58 - within the while loop let's invoke that
09:00 - function
09:00 - pass in our spaces array
09:03 - as well as whatever character the
09:05 - computer is
09:06 - then we will draw the board again right
09:08 - after
09:09 - just update it within the computer move
09:11 - function we'll create a local variable
09:13 - named number
09:15 - we'll need a seed to generate a random
09:17 - number
09:18 - s rand
09:20 - within the parentheses
09:22 - invoke the time function pass in zero or
09:25 - null
09:27 - and we should be able to generate some
09:28 - random numbers
09:30 - so i'm going to create a while loop
09:33 - while the condition will be true
09:35 - i would like to generate a random number
09:37 - between 0 through 8.
09:39 - we'll take number set the sequel to
09:42 - rand function
09:44 - modulus 9.
09:46 - number will be random between 0 and 8
09:48 - technically if we pick a spot number
09:51 - that is occupied already we'll need to
09:52 - reroll a random number
09:56 - if
09:57 - spaces
09:59 - at index of number
10:01 - is equal to an empty space
10:04 - we'll take spaces
10:06 - at index of number
10:08 - set the sql to the computer's marker
10:12 - then break out of this while loop
10:15 - let's test this function
10:17 - after we pick a spot the computer will
10:19 - pick a spot too
10:20 - yep so the computer picked a spot right
10:22 - in the middle let's try it one more time
10:24 - i'll pick the spot in the middle again
10:26 - so that would be five
10:28 - and our computer picked spot number two
10:30 - cool let's close out of the computer
10:32 - move function
10:34 - after the player moves then we draw the
10:36 - board again we will check a winner
10:39 - i'll use an if statement within the
10:41 - condition of the if statement we will
10:43 - invoke the check winner function
10:46 - the check winner function returns a
10:48 - boolean value so that's why we're
10:50 - placing it within the if statement but
10:52 - we need to pass in a couple arguments
10:54 - our spaces
10:55 - the player and the computer
10:58 - if there's a winner if this evaluates to
11:01 - be true
11:02 - we will set running equal to false
11:05 - and we will break
11:07 - let's add this if statement to after the
11:09 - computer moves too
11:14 - okay let's fill in the check winner
11:16 - function
11:17 - so right down here
11:21 - we'll need to check all of the different
11:22 - win conditions there are several
11:24 - normally i would use a switch but it's
11:26 - going to get very complicated especially
11:28 - for beginners i think just to make this
11:30 - easier we'll use a bunch of if and else
11:32 - if statements
11:35 - within the first condition of the if
11:37 - statement we'll check to see if the
11:39 - first row all has matching characters so
11:42 - we can do that by saying
11:44 - spaces
11:45 - at index of zero
11:48 - is equal to spaces at index of one
11:53 - and
11:54 - spaces at index of one
11:57 - is equal to
11:58 - spaces at index of two
12:01 - if all three characters in the first row
12:04 - are the same that means that somebody
12:06 - won
12:07 - i'm going to use the ternary operator
12:08 - here we have to determine who won the
12:11 - player or the computer let's check to
12:13 - see if the first index spaces at index 0
12:17 - is equal to the player's marker
12:19 - ternary operator like we're asking a
12:21 - question
12:22 - if the player occupies the first row
12:25 - then we'll print standard output
12:28 - u
12:30 - win
12:32 - otherwise standard
12:35 - output
12:37 - you
12:39 - lose
12:41 - then i'm just gonna add a new line
12:43 - here and here
12:46 - okay there's one more thing we have to
12:48 - do with this condition and i'll explain
12:50 - that so let's run this
12:53 - i'll pick spot number nine
12:57 - you lose the reason that we lost is that
12:59 - we're checking to see if the first row
13:01 - all has the same characters they're
13:03 - technically all empty spaces so our
13:05 - program thinks that somebody won because
13:08 - all of these characters match there are
13:10 - three empty spaces i'm going to amend
13:12 - this if statement we'll want to ensure
13:14 - that none of the spaces are empty and
13:16 - really we only need to check the first
13:17 - space i'll make this amendment
13:20 - spaces at index of zero
13:23 - does not equal
13:25 - an empty space
13:28 - and
13:29 - all these other conditions
13:30 - if you'd like to keep this more
13:32 - organized you can always surround some
13:33 - of these conditions with parentheses
13:36 - i think it's more legible that way
13:40 - let's try that again just to be sure
13:42 - that it's working i'll pick something in
13:43 - the middle
13:45 - okay yeah so the computer doesn't win
13:47 - automatically if there's three empty
13:49 - spaces in the first row okay so that is
13:51 - the first win condition
13:53 - let's copy this condition
13:55 - i'll add
13:57 - else if
13:58 - now we'll check the second row if space
14:01 - is at index 3 is not equal to an empty
14:03 - space
14:04 - and spaces at index 3
14:07 - is equal to spaces at index 4
14:11 - and spaces at index 4 is equal to spaces
14:14 - at index five
14:15 - then does spaces at index three equal
14:18 - the player okay so that is row two let's
14:21 - copy and paste that else if statement
14:23 - then we'll need to check the last row
14:26 - space is at index six
14:28 - six
14:29 - is six equal to seven
14:32 - and is seven
14:33 - equal to eight
14:35 - so these conditions will check all of
14:36 - the rows then we'll need columns
14:39 - let's copy one of these else if
14:41 - statements paste it
14:42 - so we have zero
14:44 - zero
14:46 - is
14:47 - zero equal to three
14:49 - and is three
14:52 - equal to six
14:55 - okay now time for the second column
14:59 - spaces at index one
15:02 - one right here as well
15:05 - is one
15:07 - equal to four
15:08 - and is four equal to
15:10 - seven copy this again paste it
15:16 - then we have the third column
15:19 - two
15:21 - two
15:23 - is two equal to five
15:26 - and is 5 equal to 8.
15:30 - okay now the diagonals
15:37 - spaces at 0 zero
15:41 - is zero equal to four
15:45 - and is four equal to eight
15:49 - then the last diagonal
15:54 - space is at index two
15:56 - two
15:58 - is two equal to four
16:01 - and is four equal to six
16:04 - if there's no win conditions
16:07 - we'll have an else statement
16:09 - we will return
16:11 - false
16:12 - then all we have to do at the end of
16:13 - this function is to return true somebody
16:16 - won
16:17 - okay so let's test this
16:21 - i'll try and win with the first row
16:24 - one
16:25 - two
16:26 - three
16:26 - you win
16:28 - this time i'm gonna try and lose
16:30 - one
16:32 - two
16:35 - four
16:38 - seven
16:39 - whoops seven's taken uh eight
16:42 - there we go you lose
16:44 - we can close out of the check winner
16:46 - function we know that it's working
16:48 - then we just need to check to see if
16:49 - there's a tie if there's no more spaces
16:52 - available within the main function after
16:54 - our if statements we'll add else if
16:58 - we'll invoke the check tie function
17:03 - pass in our spaces
17:05 - check tie returns a boolean value if
17:08 - it's true
17:10 - we will set running to be false then
17:12 - break
17:14 - then add that after the computer move
17:16 - section two so right here
17:20 - then let's fill in this function
17:23 - within the check tie function we'll
17:25 - iterate over the elements of our array
17:27 - spaces we'll use a for loop
17:30 - four
17:31 - and i equals zero we'll continue this as
17:34 - long as i is less than nine because
17:37 - there's a total size of nine spaces
17:40 - increment i by one
17:43 - if
17:43 - spaces
17:45 - at index of i
17:47 - is equal to
17:48 - an empty space
17:50 - that means we can continue
17:52 - return false they're still empty spaces
17:55 - if we iterate over our array and there's
17:57 - no empty spaces well then we'll display
18:01 - standard output
18:04 - it's
18:05 - a
18:06 - tie
18:09 - i'll add a new line
18:12 - then we will return true
18:14 - and we can get rid of that
18:18 - okay so let's close out of this check
18:20 - tie function
18:22 - then after we exit our game outside of
18:24 - this while loop
18:26 - let's display a message standard output
18:30 - thanks for playing
18:34 - all right and that's everything let's
18:35 - run this i'm gonna try and get a tie
18:37 - this time
18:41 - one
18:43 - two
18:45 - six
18:49 - seven
18:51 - eight
18:53 - it's a tie thanks for playing
18:55 - all right everybody that is a game of
18:57 - tic-tac-toe for beginners
18:59 - if you would like a copy of this code
19:00 - i'll post this in the comments section
19:02 - down below and well yeah that's a game
19:04 - of tic-tac-toe using c plus plus

Cleaned transcript:

hey guys in this topic we're going to create a game of tictactoe we'll be working with random numbers you may or may not need to include this header file include c time we'll add some function declarations then some definitions void draw board there will be one parameter a pointer to an array named spaces spaces will be a onedimensional array that will keep track of all the markers like what spots are taken what spots are occupied player move the parameters will be a pointer to spaces and char player computer move a pointer to spaces char computer check winner a pointer to spaces char player and char computer then lastly check tie and all we need is a pointer to our array spaces oh uh check winner and check tie will both return a boolean value okay let's add some function declarations so after the main function let's paste these we do need to return some value for check winner and check tie because there is a return type just for now as a placeholder i'm going to return zero but we'll change that later let's head to the main function and declare everything that we'll need a character array named spaces the size will be nine nine spaces we'll have nine elements each contains an empty space one two three four five six seven eight nine good char player pick a character that you'd like to be you could do x or something else char computer pick a character for the computer let's begin with o boolean running i'll set the sequel to true when we begin our game we will immediately invoke the drawboard function then pass in our array so remember when we pass an array to a function it decays into a pointer so we don't need to create a pointer for this array within the drawboard function we will display a grid so let's write something like this standard output i'll add five spaces one two three four five then a vertical bar five spaces again one two three four five vertical bar one two three four five then a new line okay let's copy this line right in the middle i'm going to add one of the elements of our array spaces so right about there spaces at index zero i'm going to copy this section of code right in the middle between the two vertical bars i'll paste what we copied spaces at index one then again right in the middle paste what you have spaces at index two this time we'll create a horizontal bar let's copy this we'll replace the spaces with underscores so right about there okay let's see what we have okay yeah something like this we'll have a player or the computer right in the center so let's copy this line on top paste it underneath copy this line that displays elements of our array paste it underneath but change the element numbers three four five and we'll copy this line paste it underneath let's double check to see what we have okay we're getting somewhere let's copy this line paste it copy one of these lines where we display the elements of the array paste it underneath so we are missing elements six seven eight let's copy one of these empty lines paste it underneath uh then before and after we display this grid i'll just display a new line standard output new line and let's do that after okay let's see what we have yeah not too bad there's our grid of nine spaces okay that is the drawboard function we can close out of this we're done with it when we invoke the drawboard function we will pass in our array which decays to a pointer and then prints our board let's add a while loop after the drawboard function while our condition is running running is set to true initially when we exit out of the game we'll set running to be false the first thing that we'll do is invoke the player move function player move but we need to pass in our array spaces as well as a player player then let's fill in the player move function okay player move i'll create a local variable named number the user will enter in a number between one and nine depending on what space they'd like to occupy with their marker i'll create a do while loop do while the condition will be not number is greater than zero or not number is less than eight the user can only enter in a number between zero and eight those numbers correspond to the elements of our array elements with indices zero through 8. within the do while loop will ask for some user input standard output enter a spot to place a marker one through nine whatever the user types in we'll just subtract one because the user doesn't know that arrays start with zero supposedly standard input number so the user will enter in a number between one and nine then we will decrement the number by one because the array starts with zero if spaces at index of number whatever the user types in is equal to an empty space if that space isn't occupied we'll add that marker to that spot spaces at index of number equals the player's marker then we'd like to break out of this while loop so after the player moves let's draw the board again to reflect any changes okay enter a spot to place a marker how about one yeah there's our marker let's try it again how about nine yep and we are in the last spot the bottom right corner let's enter in a number that's outside of this range like 100 enter a spot to place a marker uh negative one okay so we're limited to the numbers one through nine even if i were to type zero we still can't uh so let's try something in the middle that would be one two three four five yeah and there's our marker i'm just gonna add a colon then a space okay and that is the player move function we can close out of this function let's work on the computer move function next within the while loop let's invoke that function pass in our spaces array as well as whatever character the computer is then we will draw the board again right after just update it within the computer move function we'll create a local variable named number we'll need a seed to generate a random number s rand within the parentheses invoke the time function pass in zero or null and we should be able to generate some random numbers so i'm going to create a while loop while the condition will be true i would like to generate a random number between 0 through 8. we'll take number set the sequel to rand function modulus 9. number will be random between 0 and 8 technically if we pick a spot number that is occupied already we'll need to reroll a random number if spaces at index of number is equal to an empty space we'll take spaces at index of number set the sql to the computer's marker then break out of this while loop let's test this function after we pick a spot the computer will pick a spot too yep so the computer picked a spot right in the middle let's try it one more time i'll pick the spot in the middle again so that would be five and our computer picked spot number two cool let's close out of the computer move function after the player moves then we draw the board again we will check a winner i'll use an if statement within the condition of the if statement we will invoke the check winner function the check winner function returns a boolean value so that's why we're placing it within the if statement but we need to pass in a couple arguments our spaces the player and the computer if there's a winner if this evaluates to be true we will set running equal to false and we will break let's add this if statement to after the computer moves too okay let's fill in the check winner function so right down here we'll need to check all of the different win conditions there are several normally i would use a switch but it's going to get very complicated especially for beginners i think just to make this easier we'll use a bunch of if and else if statements within the first condition of the if statement we'll check to see if the first row all has matching characters so we can do that by saying spaces at index of zero is equal to spaces at index of one and spaces at index of one is equal to spaces at index of two if all three characters in the first row are the same that means that somebody won i'm going to use the ternary operator here we have to determine who won the player or the computer let's check to see if the first index spaces at index 0 is equal to the player's marker ternary operator like we're asking a question if the player occupies the first row then we'll print standard output u win otherwise standard output you lose then i'm just gonna add a new line here and here okay there's one more thing we have to do with this condition and i'll explain that so let's run this i'll pick spot number nine you lose the reason that we lost is that we're checking to see if the first row all has the same characters they're technically all empty spaces so our program thinks that somebody won because all of these characters match there are three empty spaces i'm going to amend this if statement we'll want to ensure that none of the spaces are empty and really we only need to check the first space i'll make this amendment spaces at index of zero does not equal an empty space and all these other conditions if you'd like to keep this more organized you can always surround some of these conditions with parentheses i think it's more legible that way let's try that again just to be sure that it's working i'll pick something in the middle okay yeah so the computer doesn't win automatically if there's three empty spaces in the first row okay so that is the first win condition let's copy this condition i'll add else if now we'll check the second row if space is at index 3 is not equal to an empty space and spaces at index 3 is equal to spaces at index 4 and spaces at index 4 is equal to spaces at index five then does spaces at index three equal the player okay so that is row two let's copy and paste that else if statement then we'll need to check the last row space is at index six six is six equal to seven and is seven equal to eight so these conditions will check all of the rows then we'll need columns let's copy one of these else if statements paste it so we have zero zero is zero equal to three and is three equal to six okay now time for the second column spaces at index one one right here as well is one equal to four and is four equal to seven copy this again paste it then we have the third column two two is two equal to five and is 5 equal to 8. okay now the diagonals spaces at 0 zero is zero equal to four and is four equal to eight then the last diagonal space is at index two two is two equal to four and is four equal to six if there's no win conditions we'll have an else statement we will return false then all we have to do at the end of this function is to return true somebody won okay so let's test this i'll try and win with the first row one two three you win this time i'm gonna try and lose one two four seven whoops seven's taken uh eight there we go you lose we can close out of the check winner function we know that it's working then we just need to check to see if there's a tie if there's no more spaces available within the main function after our if statements we'll add else if we'll invoke the check tie function pass in our spaces check tie returns a boolean value if it's true we will set running to be false then break then add that after the computer move section two so right here then let's fill in this function within the check tie function we'll iterate over the elements of our array spaces we'll use a for loop four and i equals zero we'll continue this as long as i is less than nine because there's a total size of nine spaces increment i by one if spaces at index of i is equal to an empty space that means we can continue return false they're still empty spaces if we iterate over our array and there's no empty spaces well then we'll display standard output it's a tie i'll add a new line then we will return true and we can get rid of that okay so let's close out of this check tie function then after we exit our game outside of this while loop let's display a message standard output thanks for playing all right and that's everything let's run this i'm gonna try and get a tie this time one two six seven eight it's a tie thanks for playing all right everybody that is a game of tictactoe for beginners if you would like a copy of this code i'll post this in the comments section down below and well yeah that's a game of tictactoe using c plus plus
