With timestamps:

00:01 - all right everybody so in this video i'm
00:04 - going to show you how we can pass an
00:05 - array to a function suppose we have an
00:08 - array of prices
00:09 - these will be of the double data type
00:12 - double
00:13 - prices
00:14 - straight brackets equals just make up
00:16 - some prices 49.99
00:20 - fifteen dollars and five cents
00:23 - seventy five dollars
00:26 - nine dollars ninety nine cents good
00:28 - enough we'll create a function to find
00:30 - the sum of these prices and print a
00:32 - total let's say
00:34 - double
00:35 - total
00:36 - equals
00:38 - then i'll invoke a get total function
00:40 - which we still need to declare and
00:42 - define so let's do that now
00:44 - we'll return a double double get
00:48 - total
00:51 - let's list the parameters we need to
00:53 - accept an array of doubles
00:55 - double
00:57 - prices
00:58 - then add a set of square brackets for
01:01 - the parameter
01:02 - now when we pass an array to a function
01:05 - you only need to pass the array name you
01:07 - don't need a set of square brackets
01:09 - then we'll need a function declaration
01:11 - let's do that before the main function
01:15 - then at the end of my program i will
01:16 - display the total
01:18 - standard output
01:21 - pick a currency uh let's pick a dollar
01:24 - sign then i will display the total
01:28 - within the get total function i'm going
01:30 - to declare a separate local instance of
01:33 - a total variable
01:36 - remember that variables can have the
01:38 - same name as long as they're within a
01:40 - different function so we have double
01:42 - total i'm going to iterate over my array
01:44 - using a for loop
01:46 - normally what we would do is say int i
01:49 - equals 0
01:50 - i would continue this as long as i is
01:53 - less than then at this point we would
01:55 - calculate the size of the array but
01:57 - technically this isn't going to work and
01:59 - i'll demonstrate why we have the size of
02:01 - our array prices
02:03 - divided by the size of either the data
02:06 - type or one of the elements
02:09 - typically i like to use one of the
02:10 - elements
02:11 - prices at index 0 then i will increment
02:14 - our counter by 1 during each iteration
02:17 - within our for loop let's assign total
02:20 - equal to total plus prices at index of i
02:24 - or we could shorten this to
02:26 - total plus equals prices at index of i
02:30 - at the end of our program we will return
02:32 - whatever the total is now this isn't
02:34 - going to work the way it's written now
02:37 - here's why when we pass an array to a
02:39 - function it decays into what's known as
02:41 - a pointer which we haven't discussed yet
02:43 - but we will in future topics within this
02:45 - function we're not working with an array
02:47 - anymore we're working with a pointer
02:48 - that points to the address of where the
02:51 - array begins this function has no idea
02:54 - how big this array is anymore we can't
02:56 - calculate how many elements are within
02:58 - this array what we could do is that when
03:00 - we invoke this function we can pass in
03:02 - the array as well as the size of the
03:05 - array since this function no longer
03:07 - knows how big the array is we can
03:09 - explicitly let the function know what
03:10 - the size is so let's calculate what the
03:13 - size is
03:14 - into size equals
03:16 - we can just copy all this code
03:20 - paste it
03:23 - now when we invoke this function i'm
03:24 - going to pass the size as a second
03:26 - argument
03:28 - then we'll need a matching set of
03:30 - parameters
03:32 - and size
03:34 - be sure to add that with your function
03:36 - declaration 2 if you have one
03:39 - i would like to continue this for loop
03:41 - as long as i is less than size
03:44 - now this should work
03:46 - let's verify that
03:48 - yep and our total is one hundred fifty
03:51 - dollars and three cents in conclusion
03:53 - when you pass an array to a function you
03:56 - only have to pass the array name you
03:58 - don't need a set of square brackets when
04:00 - you do so however when a function
04:02 - receives an array it decays into a
04:04 - pointer and the function no longer knows
04:07 - what the size of the array is so we
04:09 - could pass that as an additional
04:11 - argument to let the function know what
04:12 - the size is which we could then use to
04:14 - you know iterate over the array so
04:16 - that's how to pass an array to a
04:18 - function your assignment is to post a
04:20 - function that accepts an array as an
04:22 - argument in the comments section down
04:24 - below and well yeah that's how to pass
04:26 - an array to a function in c plus plus

Cleaned transcript:

all right everybody so in this video i'm going to show you how we can pass an array to a function suppose we have an array of prices these will be of the double data type double prices straight brackets equals just make up some prices 49.99 fifteen dollars and five cents seventy five dollars nine dollars ninety nine cents good enough we'll create a function to find the sum of these prices and print a total let's say double total equals then i'll invoke a get total function which we still need to declare and define so let's do that now we'll return a double double get total let's list the parameters we need to accept an array of doubles double prices then add a set of square brackets for the parameter now when we pass an array to a function you only need to pass the array name you don't need a set of square brackets then we'll need a function declaration let's do that before the main function then at the end of my program i will display the total standard output pick a currency uh let's pick a dollar sign then i will display the total within the get total function i'm going to declare a separate local instance of a total variable remember that variables can have the same name as long as they're within a different function so we have double total i'm going to iterate over my array using a for loop normally what we would do is say int i equals 0 i would continue this as long as i is less than then at this point we would calculate the size of the array but technically this isn't going to work and i'll demonstrate why we have the size of our array prices divided by the size of either the data type or one of the elements typically i like to use one of the elements prices at index 0 then i will increment our counter by 1 during each iteration within our for loop let's assign total equal to total plus prices at index of i or we could shorten this to total plus equals prices at index of i at the end of our program we will return whatever the total is now this isn't going to work the way it's written now here's why when we pass an array to a function it decays into what's known as a pointer which we haven't discussed yet but we will in future topics within this function we're not working with an array anymore we're working with a pointer that points to the address of where the array begins this function has no idea how big this array is anymore we can't calculate how many elements are within this array what we could do is that when we invoke this function we can pass in the array as well as the size of the array since this function no longer knows how big the array is we can explicitly let the function know what the size is so let's calculate what the size is into size equals we can just copy all this code paste it now when we invoke this function i'm going to pass the size as a second argument then we'll need a matching set of parameters and size be sure to add that with your function declaration 2 if you have one i would like to continue this for loop as long as i is less than size now this should work let's verify that yep and our total is one hundred fifty dollars and three cents in conclusion when you pass an array to a function you only have to pass the array name you don't need a set of square brackets when you do so however when a function receives an array it decays into a pointer and the function no longer knows what the size of the array is so we could pass that as an additional argument to let the function know what the size is which we could then use to you know iterate over the array so that's how to pass an array to a function your assignment is to post a function that accepts an array as an argument in the comments section down below and well yeah that's how to pass an array to a function in c plus plus
