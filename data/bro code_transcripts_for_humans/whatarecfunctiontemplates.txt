With timestamps:

00:02 - hey everyone let's discuss function
00:04 - templates a function template describes
00:07 - what a function looks like they can be
00:09 - used to generate as many overloaded
00:11 - functions as needed each using different
00:14 - data types how is this useful suppose we
00:16 - have a max function that will accept and
00:19 - return an integer
00:21 - int
00:22 - max
00:23 - the parameters will be
00:25 - int x
00:26 - and y
00:29 - will return
00:31 - i'll use the ternary operator here
00:33 - is x greater than y
00:37 - if so return x
00:40 - if not return y
00:42 - this function is compatible with
00:44 - integers as arguments
00:46 - let's display standard output
00:48 - max then pass in two integers like one
00:51 - and two
00:55 - so this would return the number two but
00:58 - what if i would like to use this
00:59 - function with doubles such as 1.1 and
01:03 - 2.1
01:06 - while we're truncating that decimal
01:08 - portion we're returning to not 2.1 if i
01:11 - want this function to be compatible with
01:13 - doubles normally i would have to create
01:15 - an overloaded function that accepts
01:17 - doubles and returns a double
01:19 - replace int with double
01:23 - and i guess this would work technically
01:25 - the value returned is 2.1 what about
01:28 - characters
01:29 - how about the character one
01:32 - and the character two
01:34 - technically we could use the max version
01:36 - that accepts integers because there's an
01:38 - associated ascii value with each of
01:40 - these characters but i would like an
01:42 - overloaded function that accepts and
01:44 - returns characters
01:46 - char
01:47 - char
01:48 - char
01:50 - so this would return the character 2.
01:53 - this is a lot of work creating three
01:55 - overloaded functions that each do the
01:57 - same thing the only difference is that
01:59 - they accept and return different data
02:01 - types what if we could write one
02:03 - function that will accept any data type
02:05 - well that's what function templates are
02:07 - to create a function template take your
02:09 - function replace any data type with t
02:12 - we're returning an integer let's instead
02:14 - return t the data type of x will be t
02:18 - same thing with y using t as a common
02:20 - naming convention i like to think of it
02:22 - as thing like we're not sure what the
02:24 - data type is we're returning a thing
02:27 - that's just how i think of it however
02:29 - our compiler doesn't know what t is
02:31 - exactly we'll need to add a template
02:33 - parameter declaration before this
02:36 - function template definition we'll add a
02:38 - declaration of what t is
02:40 - so type template
02:42 - angle brackets
02:44 - type name
02:45 - t
02:47 - and that's it this function template
02:49 - will work with many data types
02:51 - characters
02:53 - doubles
02:57 - integers
03:02 - you name it so yeah just replace the
03:04 - data type with t then be sure to add a
03:06 - template parameter declaration now
03:09 - here's a scenario what if you need to
03:11 - mix and match the data types i'll find
03:13 - what the max is between the integer 1
03:16 - and the double 2.1
03:20 - well we have a problem
03:21 - no matching function for call to max int
03:25 - double with this function template it's
03:27 - only set up to receive arguments of the
03:29 - same data type now we're passing in two
03:32 - different data types what we could do
03:34 - within our template parameter
03:36 - declaration is add another template name
03:40 - i'm going to add
03:41 - type
03:42 - name u because u comes after t and the
03:45 - alphabet then if you needed more you
03:47 - could add v w x so on and so forth i'll
03:50 - change one of these t's to a u this
03:53 - function template is set up to receive
03:55 - up to two different data types as
03:56 - arguments but there's one more change we
03:59 - need to make
04:01 - so we don't have that error anymore but
04:03 - the decimal portion of our double is
04:05 - truncated it's returning two
04:07 - that's because we're still returning t
04:10 - and t we set to be an integer in this
04:12 - case do we set the return type to be t
04:15 - or u
04:16 - actually better yet we can set this to
04:18 - auto
04:19 - using the auto keyword the compiler will
04:21 - deduce what the return type should be
04:24 - this should return 2.1
04:27 - all right everybody that is a function
04:29 - template it describes what a function
04:31 - looks like
04:32 - they can be used to generate as many
04:34 - overloaded functions as needed each
04:36 - using different data types i like to
04:38 - think of it like a cookie cutter where
04:40 - determining what the shape is but the
04:42 - arguments the dough that we use for our
04:44 - cookies can be different but the cookies
04:47 - will end up having the same shape one of
04:48 - the main benefits of using function
04:50 - templates is that we only have to write
04:52 - a function once and then it's compatible
04:54 - with different data types so you don't
04:56 - need multiple versions of the same
04:58 - function we'll generate functions using
05:00 - this template as needed so yeah those
05:02 - are function templates everybody your
05:04 - assignment if you choose to do so is to
05:06 - write a function template in the
05:08 - comments section down below and well
05:10 - yeah those are function templates in c
05:12 - plus

Cleaned transcript:

hey everyone let's discuss function templates a function template describes what a function looks like they can be used to generate as many overloaded functions as needed each using different data types how is this useful suppose we have a max function that will accept and return an integer int max the parameters will be int x and y will return i'll use the ternary operator here is x greater than y if so return x if not return y this function is compatible with integers as arguments let's display standard output max then pass in two integers like one and two so this would return the number two but what if i would like to use this function with doubles such as 1.1 and 2.1 while we're truncating that decimal portion we're returning to not 2.1 if i want this function to be compatible with doubles normally i would have to create an overloaded function that accepts doubles and returns a double replace int with double and i guess this would work technically the value returned is 2.1 what about characters how about the character one and the character two technically we could use the max version that accepts integers because there's an associated ascii value with each of these characters but i would like an overloaded function that accepts and returns characters char char char so this would return the character 2. this is a lot of work creating three overloaded functions that each do the same thing the only difference is that they accept and return different data types what if we could write one function that will accept any data type well that's what function templates are to create a function template take your function replace any data type with t we're returning an integer let's instead return t the data type of x will be t same thing with y using t as a common naming convention i like to think of it as thing like we're not sure what the data type is we're returning a thing that's just how i think of it however our compiler doesn't know what t is exactly we'll need to add a template parameter declaration before this function template definition we'll add a declaration of what t is so type template angle brackets type name t and that's it this function template will work with many data types characters doubles integers you name it so yeah just replace the data type with t then be sure to add a template parameter declaration now here's a scenario what if you need to mix and match the data types i'll find what the max is between the integer 1 and the double 2.1 well we have a problem no matching function for call to max int double with this function template it's only set up to receive arguments of the same data type now we're passing in two different data types what we could do within our template parameter declaration is add another template name i'm going to add type name u because u comes after t and the alphabet then if you needed more you could add v w x so on and so forth i'll change one of these t's to a u this function template is set up to receive up to two different data types as arguments but there's one more change we need to make so we don't have that error anymore but the decimal portion of our double is truncated it's returning two that's because we're still returning t and t we set to be an integer in this case do we set the return type to be t or u actually better yet we can set this to auto using the auto keyword the compiler will deduce what the return type should be this should return 2.1 all right everybody that is a function template it describes what a function looks like they can be used to generate as many overloaded functions as needed each using different data types i like to think of it like a cookie cutter where determining what the shape is but the arguments the dough that we use for our cookies can be different but the cookies will end up having the same shape one of the main benefits of using function templates is that we only have to write a function once and then it's compatible with different data types so you don't need multiple versions of the same function we'll generate functions using this template as needed so yeah those are function templates everybody your assignment if you choose to do so is to write a function template in the comments section down below and well yeah those are function templates in c plus
