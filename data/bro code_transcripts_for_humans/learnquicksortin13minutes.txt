With timestamps:

00:00 - hey uh it's you bro hope you're doing
00:02 - well and in this video i'm going to
00:03 - explain the quicksort algorithm in
00:05 - computer science yep so uh sit back
00:08 - relax and enjoy the show
00:12 - all right quick sort here's how quick
00:14 - sort is going to work we need an array
00:17 - or some other type of collection i have
00:19 - a simple unordered array what we do is
00:22 - that we'll pass our array as an argument
00:24 - into a quick sort function after passing
00:27 - our array as an argument to the quick
00:29 - sort function we need to pick a pivot
00:32 - there's different variations of quick
00:34 - sort we can either pick a pivot at the
00:36 - beginning the middle or at the end but
00:39 - with most standard quick sort algorithms
00:42 - we will set the pivot to be at the end
00:44 - of our array what we're trying to
00:46 - accomplish is that we need to find the
00:48 - final resting place of our pivot where
00:51 - is this value going to be and taking a
00:53 - look at this
00:54 - that would be right about here but we
00:57 - don't know that yet so to find the final
01:00 - resting place of this value our pivot
01:02 - here's what we can do we will declare
01:04 - and use two indices j and i j will begin
01:08 - at the start of our array i will be one
01:12 - less than the beginning of our array and
01:13 - that's going to be important later and
01:15 - we'll need the help of a temporary
01:17 - variable so we can swap some values all
01:20 - we're doing is checking to see if the
01:22 - value at j is less than our pivot if
01:25 - it's greater than our pivot or equal to
01:27 - our pivot we ignore it eight is greater
01:29 - than five we ignore this value and then
01:32 - increment j by one
01:35 - so during that last iteration i did not
01:37 - come into play yet but it will this
01:39 - round again we check to see if this
01:41 - value is less than our pivot which it is
01:44 - what we do now is increment i
01:47 - then what comes next is that we swap
01:49 - these two values i and j and we'll need
01:52 - the help of a temporary variable so take
01:55 - the value at i
01:57 - assign it to temp
01:59 - take the value at j
02:01 - assign it to i
02:04 - take the value within temp
02:06 - assign it to j
02:08 - then we can move on to the next
02:10 - iteration increments j
02:13 - we check to see if the value at j is
02:16 - less than our pivot which it is if that
02:18 - is the case we increment i
02:22 - swap these two values
02:28 - we'll repeat this process until j
02:30 - reaches our pivot then we can move on to
02:33 - the next step
03:02 - this
03:05 - here's the next step after our index j
03:08 - reaches our pivot we now know where the
03:11 - final resting place of our pivot is
03:13 - gonna be it's i incremented by one so we
03:16 - will increment i
03:18 - then swap the value at index of i with
03:21 - the value at our pivot
03:28 - our pivot is now within the correct
03:30 - place an easy way to tell is that all
03:32 - elements to the left of our pivot should
03:35 - be at less than our pivot but they're
03:37 - not necessarily going to be in order and
03:39 - that's fine they'll be organized later
03:42 - all elements to the right of our pivot
03:44 - should be greater than or equal to our
03:47 - pivot and like i said before they
03:49 - probably will not be in order the
03:51 - important thing is that elements to the
03:53 - left should be less than our pivot
03:55 - elements to the right should be greater
03:57 - than that's how we know the pivot's in
03:59 - the correct place now the next step
04:01 - we're going to create two sections two
04:04 - partitions
04:05 - the first partition will be all the
04:07 - elements from the beginning of our array
04:10 - up until our pivot but not including the
04:12 - pivot and our second partition will be
04:15 - all the elements after our pivot until
04:18 - the end of our array quicksort is a
04:20 - recursive algorithm we need to pass
04:23 - these partitions as arguments into the
04:26 - quick sort function remember that the
04:28 - quick sort algorithm is a recursive
04:31 - divide and conquer algorithm but unlike
04:34 - with merge sort with merge sort we
04:36 - create new subarrays with quick sort we
04:39 - will be sorting these arrays in place
04:42 - but we need to keep track of the
04:44 - beginning and ending indices of these
04:46 - partitions
04:48 - and then it's just a matter of repeating
04:49 - the same steps over again but we're
04:51 - going to instead use these partitions
04:54 - sections of our array i'll give you a
04:56 - quick demonstration of what the
04:57 - quicksort algorithm is going to look
04:59 - like to completion
05:00 - [Music]
06:01 - [Music]
07:36 - and that ladies and gentlemen was your
07:39 - visual representation of the quicksort
07:41 - algorithm let's code our own quick sort
07:44 - algorithm just to solidify our
07:46 - understanding of this topic all right
07:48 - people let's create a quick sort
07:50 - function you'll need an array to work
07:51 - with place some random numbers within
07:53 - that array and then some way to iterate
07:55 - and display the elements of your array
07:57 - i'm just using a symbol for each loop so
08:00 - after running this of course our array
08:02 - is not yet sorted so before we display
08:04 - the elements of our array let's invoke a
08:06 - quick sort function which we still need
08:08 - to declare defined there will be three
08:10 - arguments our array
08:13 - and the beginning and ending indices of
08:16 - our array so that would be zero for the
08:18 - beginning then to find the ending you
08:21 - can just say array dot length
08:23 - minus one let's declare this function
08:27 - private static void quick sort
08:29 - and let's rename some of these
08:30 - parameters we have our array of integers
08:33 - named array
08:34 - and this will be the starting index and
08:37 - this parameter will be the ending index
08:40 - so we have indices start and end now the
08:43 - base case this will use recursion
08:46 - will be
08:47 - if
08:48 - end
08:49 - is less than or equal to start
08:52 - then we will return
08:55 - and this is our base case eventually we
08:59 - won't be able to divide our array any
09:01 - further so that's when we stop and
09:03 - return with our quick sort function
09:05 - we'll need the assistance of a helper
09:07 - function that we will name partition
09:10 - let's copy our function declaration
09:12 - paste it and make a few changes
09:14 - so this will return an int the location
09:17 - of our pivot and the function name will
09:19 - be partition
09:21 - and the parameters are the same at the
09:23 - end of our partition helper function
09:25 - we'll return i i will be the location of
09:28 - our pivot but we'll get to that later
09:30 - okay so within our quick sort function
09:32 - we'll need to find the location of where
09:35 - to pivot int pivot and the partition
09:38 - function will be in charge of that
09:40 - partition is going to sort our array and
09:43 - find the pivot so all elements to the
09:46 - left will be smaller than our pivot all
09:48 - elements to the right will be larger so
09:50 - pass in our array
09:52 - we're sorting our array in place there's
09:54 - no need to create any sub-arrays we'll
09:56 - just pass in our original array as well
09:58 - as the start and end after we figure out
10:01 - where our pivot's going to be
10:03 - we can pass in each partition
10:05 - recursively back into the quick sort
10:07 - function
10:08 - so again we will invoke quick sort
10:12 - pass in our array
10:14 - the start of our left partition
10:16 - and the ending of our left partition and
10:18 - that is where pivot is minus one we do
10:21 - not want to include our pivot and then
10:23 - we will need to use quick sort on the
10:25 - right partition change start to pivot
10:29 - plus one
10:30 - because the pivot is already in place
10:33 - and then the end of our array in this
10:35 - variation of the quick sort function we
10:37 - will say that pivot is at the end it
10:40 - will always be at the end to begin with
10:41 - int pivot equals array at index
10:44 - of n we'll need two indices i and j
10:48 - we'll create index i
10:50 - equals start minus one
10:53 - and then we will iterate through our
10:55 - array and this is where we will declare
10:57 - int j our second index
10:59 - int j equals start and we will continue
11:02 - this for loop as long as j
11:04 - is less than or equal to
11:06 - the end of our array minus one then
11:09 - increment j by one what we're going to
11:12 - check is if array
11:15 - at index of j
11:17 - is less than our pivot
11:20 - if one of these elements is less than
11:22 - our pivot we want it on the left hand
11:24 - side of our pivot
11:25 - any numbers larger than our pivot should
11:27 - be on the right hand side
11:29 - so we will increment i by 1 and do a
11:31 - basic variable swap and we'll need the
11:34 - help of a temporary variable int temp
11:36 - equals array at index of i
11:40 - array at index of i
11:43 - equals array at index of j
11:47 - lastly array at index of j equals temp
11:51 - this is just a basic variable swap once
11:54 - all elements that are less than our
11:55 - pivot are on the left hand side and all
11:58 - elements that are larger than our pivot
12:00 - are on the right hand side what we will
12:02 - do now is increment i by one
12:05 - and then insert our pivot into its final
12:07 - resting place with another basic
12:10 - variable swap so let's copy this code
12:13 - then paste it and make a few changes
12:16 - intent equals array at index of i that's
12:19 - the same
12:20 - array at index of i equals array at
12:23 - index of end
12:25 - array at index event equals temp and
12:28 - that's it and then make sure you return
12:30 - i at the end that is the location of our
12:33 - pivot
12:34 - then after running this
12:36 - our array is now sorted via the quick
12:39 - sort algorithm in conclusion the quick
12:42 - sort algorithm moves smaller elements to
12:44 - the left of a pivot we recursively
12:47 - divide our array into two partitions and
12:50 - pass those partitions as arguments
12:53 - recursively into the quick sort function
12:56 - the runtime complexity of the quicksort
12:58 - algorithm actually varies in its best
13:00 - and average cases it runs in big o of n
13:04 - log n however in its worst case it can
13:07 - run in big o of n squared this is rare
13:10 - and it occurs if the array is already
13:12 - sorted or close to being sorted but most
13:14 - of the time it will run in big o of n
13:16 - log n and the space complexity of the
13:19 - quicksort algorithm is big o of log n
13:22 - this is due to recursion it uses more
13:25 - space than bubble sort selection sort
13:27 - and insertion sort even though it sorts
13:30 - in place that's because the quick sort
13:32 - algorithm uses recursion we're adding
13:34 - frames to the call stack which takes
13:36 - memory so yeah that is the quick sort
13:39 - algorithm if you found this video
13:40 - helpful please be sure to smash that
13:42 - like button leave a random comment down
13:44 - below and subscribe if you'd like to
13:46 - become a fellow bro

Cleaned transcript:

hey uh it's you bro hope you're doing well and in this video i'm going to explain the quicksort algorithm in computer science yep so uh sit back relax and enjoy the show all right quick sort here's how quick sort is going to work we need an array or some other type of collection i have a simple unordered array what we do is that we'll pass our array as an argument into a quick sort function after passing our array as an argument to the quick sort function we need to pick a pivot there's different variations of quick sort we can either pick a pivot at the beginning the middle or at the end but with most standard quick sort algorithms we will set the pivot to be at the end of our array what we're trying to accomplish is that we need to find the final resting place of our pivot where is this value going to be and taking a look at this that would be right about here but we don't know that yet so to find the final resting place of this value our pivot here's what we can do we will declare and use two indices j and i j will begin at the start of our array i will be one less than the beginning of our array and that's going to be important later and we'll need the help of a temporary variable so we can swap some values all we're doing is checking to see if the value at j is less than our pivot if it's greater than our pivot or equal to our pivot we ignore it eight is greater than five we ignore this value and then increment j by one so during that last iteration i did not come into play yet but it will this round again we check to see if this value is less than our pivot which it is what we do now is increment i then what comes next is that we swap these two values i and j and we'll need the help of a temporary variable so take the value at i assign it to temp take the value at j assign it to i take the value within temp assign it to j then we can move on to the next iteration increments j we check to see if the value at j is less than our pivot which it is if that is the case we increment i swap these two values we'll repeat this process until j reaches our pivot then we can move on to the next step this here's the next step after our index j reaches our pivot we now know where the final resting place of our pivot is gonna be it's i incremented by one so we will increment i then swap the value at index of i with the value at our pivot our pivot is now within the correct place an easy way to tell is that all elements to the left of our pivot should be at less than our pivot but they're not necessarily going to be in order and that's fine they'll be organized later all elements to the right of our pivot should be greater than or equal to our pivot and like i said before they probably will not be in order the important thing is that elements to the left should be less than our pivot elements to the right should be greater than that's how we know the pivot's in the correct place now the next step we're going to create two sections two partitions the first partition will be all the elements from the beginning of our array up until our pivot but not including the pivot and our second partition will be all the elements after our pivot until the end of our array quicksort is a recursive algorithm we need to pass these partitions as arguments into the quick sort function remember that the quick sort algorithm is a recursive divide and conquer algorithm but unlike with merge sort with merge sort we create new subarrays with quick sort we will be sorting these arrays in place but we need to keep track of the beginning and ending indices of these partitions and then it's just a matter of repeating the same steps over again but we're going to instead use these partitions sections of our array i'll give you a quick demonstration of what the quicksort algorithm is going to look like to completion and that ladies and gentlemen was your visual representation of the quicksort algorithm let's code our own quick sort algorithm just to solidify our understanding of this topic all right people let's create a quick sort function you'll need an array to work with place some random numbers within that array and then some way to iterate and display the elements of your array i'm just using a symbol for each loop so after running this of course our array is not yet sorted so before we display the elements of our array let's invoke a quick sort function which we still need to declare defined there will be three arguments our array and the beginning and ending indices of our array so that would be zero for the beginning then to find the ending you can just say array dot length minus one let's declare this function private static void quick sort and let's rename some of these parameters we have our array of integers named array and this will be the starting index and this parameter will be the ending index so we have indices start and end now the base case this will use recursion will be if end is less than or equal to start then we will return and this is our base case eventually we won't be able to divide our array any further so that's when we stop and return with our quick sort function we'll need the assistance of a helper function that we will name partition let's copy our function declaration paste it and make a few changes so this will return an int the location of our pivot and the function name will be partition and the parameters are the same at the end of our partition helper function we'll return i i will be the location of our pivot but we'll get to that later okay so within our quick sort function we'll need to find the location of where to pivot int pivot and the partition function will be in charge of that partition is going to sort our array and find the pivot so all elements to the left will be smaller than our pivot all elements to the right will be larger so pass in our array we're sorting our array in place there's no need to create any subarrays we'll just pass in our original array as well as the start and end after we figure out where our pivot's going to be we can pass in each partition recursively back into the quick sort function so again we will invoke quick sort pass in our array the start of our left partition and the ending of our left partition and that is where pivot is minus one we do not want to include our pivot and then we will need to use quick sort on the right partition change start to pivot plus one because the pivot is already in place and then the end of our array in this variation of the quick sort function we will say that pivot is at the end it will always be at the end to begin with int pivot equals array at index of n we'll need two indices i and j we'll create index i equals start minus one and then we will iterate through our array and this is where we will declare int j our second index int j equals start and we will continue this for loop as long as j is less than or equal to the end of our array minus one then increment j by one what we're going to check is if array at index of j is less than our pivot if one of these elements is less than our pivot we want it on the left hand side of our pivot any numbers larger than our pivot should be on the right hand side so we will increment i by 1 and do a basic variable swap and we'll need the help of a temporary variable int temp equals array at index of i array at index of i equals array at index of j lastly array at index of j equals temp this is just a basic variable swap once all elements that are less than our pivot are on the left hand side and all elements that are larger than our pivot are on the right hand side what we will do now is increment i by one and then insert our pivot into its final resting place with another basic variable swap so let's copy this code then paste it and make a few changes intent equals array at index of i that's the same array at index of i equals array at index of end array at index event equals temp and that's it and then make sure you return i at the end that is the location of our pivot then after running this our array is now sorted via the quick sort algorithm in conclusion the quick sort algorithm moves smaller elements to the left of a pivot we recursively divide our array into two partitions and pass those partitions as arguments recursively into the quick sort function the runtime complexity of the quicksort algorithm actually varies in its best and average cases it runs in big o of n log n however in its worst case it can run in big o of n squared this is rare and it occurs if the array is already sorted or close to being sorted but most of the time it will run in big o of n log n and the space complexity of the quicksort algorithm is big o of log n this is due to recursion it uses more space than bubble sort selection sort and insertion sort even though it sorts in place that's because the quick sort algorithm uses recursion we're adding frames to the call stack which takes memory so yeah that is the quick sort algorithm if you found this video helpful please be sure to smash that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
