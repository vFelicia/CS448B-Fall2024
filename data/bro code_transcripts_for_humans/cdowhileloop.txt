With timestamps:

00:02 - hey everybody so let's talk about do
00:04 - while loops a do while loop is a
00:06 - variation of a while loop so a while
00:09 - loop first checks a condition
00:12 - then it executes a block of code if that
00:15 - condition is true so we may not even
00:17 - execute that block of code at all if
00:19 - that condition is false from the get go
00:22 - a do while loop always executes a block
00:25 - of code once and then we checking
00:27 - condition at the end if that condition
00:29 - is true we will continue another loop so
00:32 - here's what i'm thinking for a
00:33 - demonstration we'll create a small
00:35 - program where we will have a user type
00:37 - in as many numbers as they want as long
00:39 - as it's above zero and then we will find
00:41 - a sum so if we're writing a program like
00:43 - that we can first declare two variables
00:46 - int number i'll go ahead and assign
00:48 - these some values right away so we'll
00:50 - set number to zero and int sum equal to
00:53 - zero as well to keep track of the sum
00:55 - we'll first begin by creating a while
00:57 - loop so we will use a while loop
01:00 - and our condition is if number is
01:03 - greater than zero
01:05 - then we will continue to ask the user to
01:08 - type in some numbers
01:09 - if that number is zero or less than we
01:12 - stop so let's ask a user for a number
01:15 - enter a number above zero and then using
01:20 - scanf we will accept some user input
01:23 - and store this within number and let's
01:26 - check to see if
01:27 - number is greater than zero
01:31 - if it is we will take sum set this equal
01:34 - to sum
01:35 - plus number but you can just shorten the
01:37 - statement to plus equals number that's
01:40 - fine too and then at the end we will
01:43 - print whatever the sum is
01:45 - sum
01:46 - we're displaying an integer
01:48 - and we are displaying some so with our
01:51 - number i set this to zero and since our
01:54 - while loop is checking the condition
01:55 - first we're not actually going to
01:57 - execute this body of code
02:00 - so our program skipped this while loop
02:02 - and went straight to the printf
02:04 - statement so a while loop checks a
02:06 - condition first a do while loop will
02:09 - check a condition last so to change this
02:11 - to a do while loop we will take our
02:13 - condition
02:14 - and move it to the end
02:16 - just after the last curly brace and add
02:18 - a semicolon and then before the first
02:21 - curly brace we will add the word do so
02:24 - we will do this once and then check the
02:26 - condition to see if we would like to
02:28 - continue so now if i run this
02:30 - we get that prompt enter a number above
02:33 - zero and i can type in as many numbers
02:35 - as i want
02:36 - so one two three four five so we check
02:40 - the condition at the end
02:41 - so our condition is that if our number
02:44 - is greater than zero we will continue
02:46 - this loop so if i type in negative one
02:49 - we will exit
02:50 - and our sum is 15. so that's the major
02:53 - difference between a while loop and a do
02:55 - while loop a while loop checks a
02:57 - condition first then executes a block of
03:00 - code if that condition is true a do
03:02 - while loop always executes a block of
03:05 - code once
03:06 - then checks the condition if that
03:08 - condition is true then we continue again
03:10 - so yeah that's a do while loop it's a
03:13 - variation of a while loop and if you
03:15 - would like a copy of this code i'll post
03:17 - this to the comments section down below
03:18 - and well that's the do while loop in c

Cleaned transcript:

hey everybody so let's talk about do while loops a do while loop is a variation of a while loop so a while loop first checks a condition then it executes a block of code if that condition is true so we may not even execute that block of code at all if that condition is false from the get go a do while loop always executes a block of code once and then we checking condition at the end if that condition is true we will continue another loop so here's what i'm thinking for a demonstration we'll create a small program where we will have a user type in as many numbers as they want as long as it's above zero and then we will find a sum so if we're writing a program like that we can first declare two variables int number i'll go ahead and assign these some values right away so we'll set number to zero and int sum equal to zero as well to keep track of the sum we'll first begin by creating a while loop so we will use a while loop and our condition is if number is greater than zero then we will continue to ask the user to type in some numbers if that number is zero or less than we stop so let's ask a user for a number enter a number above zero and then using scanf we will accept some user input and store this within number and let's check to see if number is greater than zero if it is we will take sum set this equal to sum plus number but you can just shorten the statement to plus equals number that's fine too and then at the end we will print whatever the sum is sum we're displaying an integer and we are displaying some so with our number i set this to zero and since our while loop is checking the condition first we're not actually going to execute this body of code so our program skipped this while loop and went straight to the printf statement so a while loop checks a condition first a do while loop will check a condition last so to change this to a do while loop we will take our condition and move it to the end just after the last curly brace and add a semicolon and then before the first curly brace we will add the word do so we will do this once and then check the condition to see if we would like to continue so now if i run this we get that prompt enter a number above zero and i can type in as many numbers as i want so one two three four five so we check the condition at the end so our condition is that if our number is greater than zero we will continue this loop so if i type in negative one we will exit and our sum is 15. so that's the major difference between a while loop and a do while loop a while loop checks a condition first then executes a block of code if that condition is true a do while loop always executes a block of code once then checks the condition if that condition is true then we continue again so yeah that's a do while loop it's a variation of a while loop and if you would like a copy of this code i'll post this to the comments section down below and well that's the do while loop in c
