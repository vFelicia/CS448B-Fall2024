With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to teach you
00:04 - guys how we can use scene builder to
00:06 - handle events
00:07 - so sit back relax and enjoy the show
00:12 - if i could have just a moment of your
00:14 - time please like comment
00:16 - and subscribe i would greatly appreciate
00:18 - it
00:20 - all right people let's get this show on
00:22 - the road now for this video we'll need
00:24 - an fxml file
00:25 - if you do not have that this is how to
00:27 - create that i'm going to go to my
00:29 - application package
00:30 - right click go to new other new fxml
00:34 - next i will name this main and click
00:37 - finish
00:38 - and you should have this line of code
00:40 - within your start method parent root
00:42 - equals fxml loader
00:44 - blah blah blah blah blah but the
00:45 - important thing is to get resource
00:47 - and this should contain the name of your
00:49 - fxml file
00:50 - now for each event that we have we will
00:52 - have a corresponding method but i like
00:54 - to keep all of my event methods in one
00:56 - place
00:57 - so i'm going to be creating a separate
00:59 - java file to contain those
01:01 - so to do that right click on your
01:02 - package go to new
01:04 - then class and i will name this
01:06 - controller because it's going to control
01:08 - all of our events if you have your root
01:11 - node set to your fxml file
01:13 - you have your fxml file created as well
01:16 - as a separate java file with a class
01:18 - listed as controller
01:19 - then we're ready to begin so let's go to
01:22 - our fxml file and open with scene
01:24 - builder here we are within scene builder
01:27 - i'm going to start fresh
01:28 - i will delete this anchor pin and create
01:31 - a new one
01:32 - and then what i'm thinking that will do
01:33 - is that we will have four buttons
01:35 - one for up right down and left and when
01:38 - you click on one of these buttons it's
01:39 - going to move a
01:40 - shape across your screen here so let's
01:43 - create a bunch of buttons
01:44 - that is under controls so i'm just going
01:47 - to drag and drop some buttons
01:49 - we'll have one for up right
01:54 - down and left
01:58 - and if you prefer you can change the
02:00 - text on your buttons by clicking on a
02:02 - button
02:02 - then go to properties on the right hand
02:04 - menu look for text and you can change
02:07 - the text
02:07 - i will change this to up and i'm just
02:10 - going to re-center that
02:12 - this will be right
02:18 - we have down
02:23 - and left now what we got to do
02:27 - is create a method for each button so
02:29 - let's create
02:30 - our first method which will be called up
02:32 - public
02:33 - void up there is one parameter
02:36 - action event e
02:40 - and we'll probably need an import as
02:42 - well make sure you're importing from
02:43 - javafx and
02:44 - not awt and when we click on this button
02:48 - let's test this let's just print
02:49 - something to the console window such as
02:52 - up all right then let's repeat the
02:54 - process for
02:55 - down left and right so i'm just going to
02:57 - copy and paste
02:58 - this up method three additional times
03:01 - and let's change
03:02 - up to down for this next method
03:05 - then we got to do the same for left
03:08 - and right
03:12 - now that we have our four methods what
03:14 - i'm going to do is run and compile this
03:16 - just so that everything is saved and
03:18 - up-to-date now what i need to do next is
03:20 - associate each of these methods with a
03:23 - corresponding button
03:24 - up for up down for down and just follow
03:26 - that pattern but we need to add our
03:28 - controller class
03:29 - to scene builder so i'm going to open
03:31 - with scene builder again on my fxml file
03:34 - and to add your controller navigate to
03:36 - the left hand menu there should be a
03:38 - drop down for your controller
03:40 - under controller class select your
03:42 - controller class
03:43 - and in this case for me this is
03:45 - application.controller
03:47 - and now for each of these buttons let's
03:48 - begin by clicking this up button
03:50 - we can add a method under this on action
03:53 - section on the right hand menu
03:55 - so on action there should be a drop down
03:57 - i will select the corresponding method i
03:59 - would like to link to this button
04:01 - so i will select up for up right for
04:04 - right
04:06 - down for down and left for left
04:10 - for the time being let's save minimize
04:12 - scene builder and let's head to our fxml
04:15 - file underneath each of these buttons
04:17 - there should be a section related to on
04:19 - action
04:20 - and if these are all here then we should
04:22 - be good so let's run this
04:27 - now when i click up this will display up
04:30 - down
04:31 - left and right okay we know that the
04:34 - buttons are working
04:35 - now let's take this a step further let's
04:37 - add a circle to our scene
04:38 - and move the circle around by using our
04:40 - buttons so let's head back to scene
04:42 - builder
04:43 - to add a circle to our scene go to the
04:45 - left hand menu
04:46 - under the shapes drop down select circle
04:49 - and drag and drop it to your scene
04:51 - let's save this and head back to our
04:54 - controller class
04:56 - within your controller class at the top
04:58 - add this annotation at
04:59 - fxml and you'll likely need an import as
05:02 - well
05:03 - now what this annotation will do is that
05:05 - by use of the fxml loader
05:07 - the fxml loader will inject all of the
05:10 - values found within your fxml file
05:12 - meaning all of this into your controller
05:15 - class for you
05:16 - all you have to do is add this
05:18 - annotation at fxml
05:21 - and now let's declare a few things we'll
05:22 - need a circle so let's declare a circle
05:25 - private circle my
05:29 - circle and we'll need to import this
05:31 - from javafx
05:33 - and let's declare some coordinates
05:36 - private
05:37 - double x and private
05:40 - double y so we technically don't need
05:44 - these print line statements anymore
05:45 - we were just testing something i'm going
05:47 - to turn them into comments but you can
05:48 - feel free to keep them in if you want
05:50 - now let's set up our up method to move
05:53 - our circle up
05:55 - type my circle dot set
05:58 - center y and the value that we're going
06:01 - to pass into the set
06:02 - center y method is y equals y
06:06 - minus one or you could do the shortcut
06:08 - which is
06:09 - y minus equals one now to move our
06:12 - circle down
06:13 - that will be my circle dot set center y
06:17 - y plus equals one and
06:21 - let's do the same thing for left but we
06:23 - change y
06:24 - to x x
06:27 - minus equals one and lastly right
06:30 - that's going to be x plus equals one
06:34 - all right now let's head back to scene
06:35 - builder there's one last thing that we
06:37 - need to do
06:38 - within scene builder select your circle
06:40 - navigate to the right hand menu
06:42 - there should be a drop down for a code
06:44 - section
06:45 - under fx id we're going to type in the
06:48 - name of that circle that we declared
06:50 - my circle
06:54 - let's save this file save we can close
06:57 - out of scene builder
06:58 - and then head to your fxml file let's
07:01 - just be sure that
07:02 - our circle object has that id of my
07:04 - circle
07:05 - so it looks like everything should check
07:07 - out so let's run and compile this
07:11 - and then when we click on our buttons
07:12 - this will move our circle
07:14 - however i think we should move this a
07:16 - few more pixels so let's change
07:18 - one to maybe 10 just so that the change
07:22 - is more noticeable
07:26 - alright so when we click up our circle
07:28 - moves up it moves right
07:30 - down and left well everyone that's the
07:33 - basics of handling events using scene
07:35 - builder if for some reason some of this
07:36 - doesn't work you may have to either
07:38 - restart scene builder or
07:40 - run and compile your code just so that
07:42 - everything is up to date
07:43 - because things don't like to refresh i
07:45 - noticed so if you would like a copy of
07:47 - this code i will post all of this in the
07:49 - comments section down below
07:50 - but yeah that is how to handle events
07:52 - using scene builder
07:53 - in javafx hey you
07:57 - yeah i'm talking to you if you learned
07:59 - something new then help me
08:00 - help you in three easy steps by smashing
08:03 - that like button
08:04 - drop a comment down below and subscribe
08:06 - if you'd like to become a fellow bro
08:12 - [Music]
08:30 - you

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to teach you guys how we can use scene builder to handle events so sit back relax and enjoy the show if i could have just a moment of your time please like comment and subscribe i would greatly appreciate it all right people let's get this show on the road now for this video we'll need an fxml file if you do not have that this is how to create that i'm going to go to my application package right click go to new other new fxml next i will name this main and click finish and you should have this line of code within your start method parent root equals fxml loader blah blah blah blah blah but the important thing is to get resource and this should contain the name of your fxml file now for each event that we have we will have a corresponding method but i like to keep all of my event methods in one place so i'm going to be creating a separate java file to contain those so to do that right click on your package go to new then class and i will name this controller because it's going to control all of our events if you have your root node set to your fxml file you have your fxml file created as well as a separate java file with a class listed as controller then we're ready to begin so let's go to our fxml file and open with scene builder here we are within scene builder i'm going to start fresh i will delete this anchor pin and create a new one and then what i'm thinking that will do is that we will have four buttons one for up right down and left and when you click on one of these buttons it's going to move a shape across your screen here so let's create a bunch of buttons that is under controls so i'm just going to drag and drop some buttons we'll have one for up right down and left and if you prefer you can change the text on your buttons by clicking on a button then go to properties on the right hand menu look for text and you can change the text i will change this to up and i'm just going to recenter that this will be right we have down and left now what we got to do is create a method for each button so let's create our first method which will be called up public void up there is one parameter action event e and we'll probably need an import as well make sure you're importing from javafx and not awt and when we click on this button let's test this let's just print something to the console window such as up all right then let's repeat the process for down left and right so i'm just going to copy and paste this up method three additional times and let's change up to down for this next method then we got to do the same for left and right now that we have our four methods what i'm going to do is run and compile this just so that everything is saved and uptodate now what i need to do next is associate each of these methods with a corresponding button up for up down for down and just follow that pattern but we need to add our controller class to scene builder so i'm going to open with scene builder again on my fxml file and to add your controller navigate to the left hand menu there should be a drop down for your controller under controller class select your controller class and in this case for me this is application.controller and now for each of these buttons let's begin by clicking this up button we can add a method under this on action section on the right hand menu so on action there should be a drop down i will select the corresponding method i would like to link to this button so i will select up for up right for right down for down and left for left for the time being let's save minimize scene builder and let's head to our fxml file underneath each of these buttons there should be a section related to on action and if these are all here then we should be good so let's run this now when i click up this will display up down left and right okay we know that the buttons are working now let's take this a step further let's add a circle to our scene and move the circle around by using our buttons so let's head back to scene builder to add a circle to our scene go to the left hand menu under the shapes drop down select circle and drag and drop it to your scene let's save this and head back to our controller class within your controller class at the top add this annotation at fxml and you'll likely need an import as well now what this annotation will do is that by use of the fxml loader the fxml loader will inject all of the values found within your fxml file meaning all of this into your controller class for you all you have to do is add this annotation at fxml and now let's declare a few things we'll need a circle so let's declare a circle private circle my circle and we'll need to import this from javafx and let's declare some coordinates private double x and private double y so we technically don't need these print line statements anymore we were just testing something i'm going to turn them into comments but you can feel free to keep them in if you want now let's set up our up method to move our circle up type my circle dot set center y and the value that we're going to pass into the set center y method is y equals y minus one or you could do the shortcut which is y minus equals one now to move our circle down that will be my circle dot set center y y plus equals one and let's do the same thing for left but we change y to x x minus equals one and lastly right that's going to be x plus equals one all right now let's head back to scene builder there's one last thing that we need to do within scene builder select your circle navigate to the right hand menu there should be a drop down for a code section under fx id we're going to type in the name of that circle that we declared my circle let's save this file save we can close out of scene builder and then head to your fxml file let's just be sure that our circle object has that id of my circle so it looks like everything should check out so let's run and compile this and then when we click on our buttons this will move our circle however i think we should move this a few more pixels so let's change one to maybe 10 just so that the change is more noticeable alright so when we click up our circle moves up it moves right down and left well everyone that's the basics of handling events using scene builder if for some reason some of this doesn't work you may have to either restart scene builder or run and compile your code just so that everything is up to date because things don't like to refresh i noticed so if you would like a copy of this code i will post all of this in the comments section down below but yeah that is how to handle events using scene builder in javafx hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
