With timestamps:

00:02 - all right what's going on people
00:03 - inheritance
00:04 - so inheritance is this programming
00:06 - concept of
00:07 - one or more child classes receiving
00:10 - fields methods
00:11 - etc from a common parent kind of like
00:14 - how people
00:14 - inherit genes from their parents well
00:17 - with programming we can kind of do
00:18 - something similar
00:19 - parent classes can have children classes
00:22 - and anything
00:23 - that the parent class has the child
00:25 - classes now have
00:26 - so here's an example let's create a
00:28 - parent class named vehicle
00:30 - not any kind of specific vehicle just a
00:32 - generic vehicle class
00:34 - class vehicle and there will be one
00:37 - field let's say
00:39 - public and speed and i'll set this equal
00:42 - to
00:43 - maybe zero and let's create a method
00:45 - public void
00:46 - go all vehicles can go somewhere
00:49 - and all we'll display is
00:53 - this vehicle is moving
00:56 - we can inherit this speed field and this
00:58 - go method from the vehicle class
01:00 - so this vehicle class is going to have
01:02 - children so let's create a car class
01:05 - a bike class and a boat class so type
01:08 - class
01:08 - car then to inherit from another class
01:11 - type
01:12 - after the class name colon and then the
01:14 - parent in which you would like to
01:16 - inherit from
01:17 - so car is going to be the child class
01:19 - vehicle will be the parent class
01:22 - so car will have access to its own speed
01:25 - and
01:25 - go method and then you can add anything
01:27 - additional within the car class
01:29 - like number of wheels public and wheels
01:32 - and i'll set this to 4 for all car
01:34 - objects now let's create a bicycle class
01:38 - it's the same process as before class
01:41 - bicycle and this will inherit from the
01:45 - vehicle class as well but let's change
01:47 - wheels to two and then let's create a
01:49 - book class
01:50 - class boat and here it's from vehicle
01:53 - wheels
01:53 - zero because well it's a boat okay so
01:56 - let's instantiate
01:57 - a car bicycle and boat object so let's
02:00 - do that here
02:01 - car car equals new car
02:07 - bicycle bicycle
02:10 - keep on spilling bicycle wrong bicycle
02:13 - equals new bicycle
02:17 - and boat boat equals new vote
02:20 - so if we take a look at this car object
02:23 - car
02:24 - dot there is a speed field as well as a
02:27 - go method even though there's nothing
02:29 - within
02:29 - this car class besides wheels so since
02:32 - car is the child class
02:34 - and vehicle is the parent class car has
02:36 - access to a go method and a speed field
02:39 - even though there's nothing within here
02:40 - except a wheels field
02:42 - and of course car objects do have a
02:44 - wheels field as well
02:45 - which we stand within the car class so
02:48 - let's just test these
02:49 - i'm going to display car dot speed
02:53 - car dot speed followed by
02:58 - car dot wheels and i will have this car
03:02 - use
03:02 - its go method car dot go
03:06 - all right so our car speed is zero
03:08 - that's because we set it to be zero
03:10 - within the vehicle class
03:11 - this car has four wheels which we stated
03:14 - within the car class
03:15 - and this car class has a go method that
03:18 - states this vehicle is moving
03:20 - so i bet the same thing applies to our
03:22 - bicycle and boat object
03:24 - so let's copy these three lines of code
03:26 - change car to
03:27 - bicycle bicycle.speed bicycle.wheels
03:30 - and bicycle.go and the same thing
03:33 - applies to both
03:34 - boat.speed boat.wheels boat.go
03:39 - so all three of these different types of
03:41 - vehicles each have
03:42 - a speedfield a wheels field and a go
03:45 - method
03:46 - so the point of inheritance is that we
03:48 - can reuse code
03:49 - i mean we could just copy these fields
03:51 - and methods and then paste them within
03:53 - each of these classes
03:55 - but imagine that you have hundreds of
03:56 - different classes and we need to change
03:58 - like go to start well it's a lot easier
04:01 - just to make that change in one place
04:03 - than having to manually go through all
04:05 - of our classes
04:06 - so yeah that's kind of the benefit of
04:07 - inheritance we can keep anything that
04:09 - these classes have in common
04:11 - within a common parent class and these
04:14 - classes can simply just inherit these
04:16 - fields and methods
04:17 - so yeah that's inheritance if you liked
04:19 - this video be sure to smash that like
04:21 - button
04:22 - drop a random comment down below and
04:23 - well yeah that's inheritance in c sharp

Cleaned transcript:

all right what's going on people inheritance so inheritance is this programming concept of one or more child classes receiving fields methods etc from a common parent kind of like how people inherit genes from their parents well with programming we can kind of do something similar parent classes can have children classes and anything that the parent class has the child classes now have so here's an example let's create a parent class named vehicle not any kind of specific vehicle just a generic vehicle class class vehicle and there will be one field let's say public and speed and i'll set this equal to maybe zero and let's create a method public void go all vehicles can go somewhere and all we'll display is this vehicle is moving we can inherit this speed field and this go method from the vehicle class so this vehicle class is going to have children so let's create a car class a bike class and a boat class so type class car then to inherit from another class type after the class name colon and then the parent in which you would like to inherit from so car is going to be the child class vehicle will be the parent class so car will have access to its own speed and go method and then you can add anything additional within the car class like number of wheels public and wheels and i'll set this to 4 for all car objects now let's create a bicycle class it's the same process as before class bicycle and this will inherit from the vehicle class as well but let's change wheels to two and then let's create a book class class boat and here it's from vehicle wheels zero because well it's a boat okay so let's instantiate a car bicycle and boat object so let's do that here car car equals new car bicycle bicycle keep on spilling bicycle wrong bicycle equals new bicycle and boat boat equals new vote so if we take a look at this car object car dot there is a speed field as well as a go method even though there's nothing within this car class besides wheels so since car is the child class and vehicle is the parent class car has access to a go method and a speed field even though there's nothing within here except a wheels field and of course car objects do have a wheels field as well which we stand within the car class so let's just test these i'm going to display car dot speed car dot speed followed by car dot wheels and i will have this car use its go method car dot go all right so our car speed is zero that's because we set it to be zero within the vehicle class this car has four wheels which we stated within the car class and this car class has a go method that states this vehicle is moving so i bet the same thing applies to our bicycle and boat object so let's copy these three lines of code change car to bicycle bicycle.speed bicycle.wheels and bicycle.go and the same thing applies to both boat.speed boat.wheels boat.go so all three of these different types of vehicles each have a speedfield a wheels field and a go method so the point of inheritance is that we can reuse code i mean we could just copy these fields and methods and then paste them within each of these classes but imagine that you have hundreds of different classes and we need to change like go to start well it's a lot easier just to make that change in one place than having to manually go through all of our classes so yeah that's kind of the benefit of inheritance we can keep anything that these classes have in common within a common parent class and these classes can simply just inherit these fields and methods so yeah that's inheritance if you liked this video be sure to smash that like button drop a random comment down below and well yeah that's inheritance in c sharp
