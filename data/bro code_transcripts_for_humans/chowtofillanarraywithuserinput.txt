With timestamps:

00:01 - hey welcome back everybody in this video
00:04 - i'm going to explain one of a few ways
00:06 - in which we can accept user input and
00:08 - place it within an array there's no
00:10 - one-size-fits-all way to do it i'll show
00:12 - you one way that's good for beginners
00:14 - let's begin by creating an array i'll
00:15 - create an array of strings named foods
00:20 - we're not going to be assigning values
00:22 - to this array quite yet that's where the
00:23 - user input will come in if we're not
00:25 - assigning values right away when we
00:27 - initialize this array we'll have to
00:29 - specify a size for the time being let's
00:32 - say 5 something small now arrays they're
00:35 - static data structures while our program
00:38 - is running we can't change the size of
00:39 - this array the max size is stuck at 5
00:42 - and that might be a problem if we would
00:44 - like to enter in more than five items
00:46 - we'll discuss dynamic memory in a future
00:48 - video then i'm going to calculate the
00:50 - size of this array and size equals size
00:53 - of
00:54 - my array foods divided by the size of
00:58 - one of the elements foods at index of
01:00 - zero
01:02 - let's create a for loop to iterate over
01:04 - the elements of this array
01:08 - four
01:09 - and i equals zero we'll continue this as
01:12 - long as i is less than the size of our
01:16 - array
01:17 - then increment i by one
01:19 - let's create a prompt
01:21 - standard output
01:24 - enter a food you like
01:28 - then i'll display the number
01:30 - to show the user what number we're on
01:34 - i
01:35 - then i'm just gonna add a colon at the
01:38 - end
01:41 - if we're working with strings we should
01:42 - probably use the getline function
01:45 - just because what the user enters may
01:46 - contain spaces
01:48 - get
01:49 - line
01:50 - standard input
01:53 - we'll place our input within our array
01:56 - foods
01:57 - at the index of i whatever we're
02:00 - currently on our counter at the end of
02:02 - our program let's display a message
02:06 - you like the
02:08 - following
02:10 - food
02:13 - i'll use a for each loop to iterate over
02:16 - the elements of this array
02:18 - we list the data type
02:20 - a name for the current element
02:23 - food in foods
02:26 - let's display standard output
02:30 - whatever the food is i'll add a new line
02:33 - and that should be good now take a look
02:36 - at this enter a food you like we're on
02:38 - number zero i'm going to add plus one to
02:41 - i when we display our prompt the user is
02:43 - not going to be sure why there's a
02:45 - number zero but we know that's the
02:47 - beginning index of an array so i'm just
02:48 - gonna change that here enter a food you
02:51 - like we're on number one
02:52 - pizza
02:54 - hamburger
02:56 - hot dog
02:58 - ramen
03:00 - sushi
03:01 - and these are the five elements you like
03:03 - the following food
03:05 - pizza hamburger hot dog ramen sushi okay
03:08 - that's pretty good so far suppose the
03:10 - user only wants to enter in three
03:12 - elements not all five we should add some
03:14 - way to escape out of this for loop based
03:16 - on some user input i'm going to add this
03:19 - line enter a food you like or
03:23 - q
03:25 - to quit
03:26 - now check this out
03:28 - if the user types in q
03:30 - we would like to exit
03:34 - if
03:36 - foods at index of i
03:39 - is equal to
03:41 - the string q
03:43 - then i would like to break out of this
03:45 - for loop the user is done entering an
03:47 - input but there's a problem with this
03:52 - enter a food you like or q to quit
03:55 - number one
03:57 - pizza
03:58 - hamburger hot dog now i'm going to press
04:01 - q to quit
04:03 - we don't have any more prompts to enter
04:05 - in food we went to the results you like
04:08 - the following food pizza hamburger hot
04:11 - dog q i'd rather not put the letter q in
04:14 - my foods array i'm going to create a
04:16 - temporary variable just to hold some
04:18 - user input
04:20 - this will be of the string data type
04:22 - standard string i'll name this temp
04:24 - meaning temporary it's a temporary
04:26 - variable
04:27 - in place of directly putting my user
04:29 - input into my foods array i'll place it
04:32 - temporarily within my variable temp i'm
04:34 - going to check
04:36 - if temp is equal to q
04:40 - else
04:40 - will take foods
04:42 - at index of i
04:44 - set the sequel to temp
04:46 - that way we're not directly assigning
04:48 - our user input to our array until we
04:51 - check what it is if the user types in
04:53 - queue to quit we don't want to put that
04:54 - within our foods array so let's try this
04:57 - again it should be better
04:58 - enter a food you like or q to quit
05:02 - pizza
05:04 - hamburger
05:05 - hot dog
05:06 - q to quit
05:08 - okay pizza hamburger hot dog
05:11 - well the letter q isn't here
05:14 - but when we display what's within the
05:15 - array we have these empty spaces we did
05:18 - not assign a value to these if one of
05:20 - our elements is empty i don't want to
05:21 - display it
05:23 - so we can make this following change
05:25 - in place of a for each loop let's use a
05:27 - standard for loop
05:29 - int i equals zero
05:32 - now here's the condition we're used to
05:34 - saying i is less than size right i'd
05:37 - like to propose a change we'll write a
05:39 - different condition i will check if the
05:41 - current element is empty
05:44 - foods at index of i
05:47 - dot
05:48 - empty function
05:50 - then we'll add the not logical operator
05:53 - we'll continue our for loop as long as
05:55 - the current element is not empty then
05:58 - we'll add the statement increment i by
06:00 - one
06:01 - we'll display our array foods at index
06:04 - of i this for loop shouldn't display any
06:07 - elements that are empty
06:10 - pizza
06:11 - hamburger
06:13 - hot dog q to quit
06:16 - yeah and we only have three elements
06:17 - pizza hamburger hot dog one disadvantage
06:21 - of arrays is that they have a limited
06:23 - size they're static once we declare a
06:25 - size we can't change it we're limited to
06:27 - only storing five foods you could
06:30 - declare a larger size but you may be
06:32 - wasting memory if a user doesn't want to
06:34 - type in all 10. so in future topics
06:36 - we'll need to discuss both dynamic
06:38 - memory and vectors which should be
06:40 - coming up sometime in the future so yeah
06:43 - that is one way out of many ways to
06:45 - enter in user input into an array if you
06:48 - would like a copy of this code i'll post
06:49 - this in the comment section down below
06:51 - and well yeah that's how to enter user
06:54 - input into an array using c plus plus

Cleaned transcript:

hey welcome back everybody in this video i'm going to explain one of a few ways in which we can accept user input and place it within an array there's no onesizefitsall way to do it i'll show you one way that's good for beginners let's begin by creating an array i'll create an array of strings named foods we're not going to be assigning values to this array quite yet that's where the user input will come in if we're not assigning values right away when we initialize this array we'll have to specify a size for the time being let's say 5 something small now arrays they're static data structures while our program is running we can't change the size of this array the max size is stuck at 5 and that might be a problem if we would like to enter in more than five items we'll discuss dynamic memory in a future video then i'm going to calculate the size of this array and size equals size of my array foods divided by the size of one of the elements foods at index of zero let's create a for loop to iterate over the elements of this array four and i equals zero we'll continue this as long as i is less than the size of our array then increment i by one let's create a prompt standard output enter a food you like then i'll display the number to show the user what number we're on i then i'm just gonna add a colon at the end if we're working with strings we should probably use the getline function just because what the user enters may contain spaces get line standard input we'll place our input within our array foods at the index of i whatever we're currently on our counter at the end of our program let's display a message you like the following food i'll use a for each loop to iterate over the elements of this array we list the data type a name for the current element food in foods let's display standard output whatever the food is i'll add a new line and that should be good now take a look at this enter a food you like we're on number zero i'm going to add plus one to i when we display our prompt the user is not going to be sure why there's a number zero but we know that's the beginning index of an array so i'm just gonna change that here enter a food you like we're on number one pizza hamburger hot dog ramen sushi and these are the five elements you like the following food pizza hamburger hot dog ramen sushi okay that's pretty good so far suppose the user only wants to enter in three elements not all five we should add some way to escape out of this for loop based on some user input i'm going to add this line enter a food you like or q to quit now check this out if the user types in q we would like to exit if foods at index of i is equal to the string q then i would like to break out of this for loop the user is done entering an input but there's a problem with this enter a food you like or q to quit number one pizza hamburger hot dog now i'm going to press q to quit we don't have any more prompts to enter in food we went to the results you like the following food pizza hamburger hot dog q i'd rather not put the letter q in my foods array i'm going to create a temporary variable just to hold some user input this will be of the string data type standard string i'll name this temp meaning temporary it's a temporary variable in place of directly putting my user input into my foods array i'll place it temporarily within my variable temp i'm going to check if temp is equal to q else will take foods at index of i set the sequel to temp that way we're not directly assigning our user input to our array until we check what it is if the user types in queue to quit we don't want to put that within our foods array so let's try this again it should be better enter a food you like or q to quit pizza hamburger hot dog q to quit okay pizza hamburger hot dog well the letter q isn't here but when we display what's within the array we have these empty spaces we did not assign a value to these if one of our elements is empty i don't want to display it so we can make this following change in place of a for each loop let's use a standard for loop int i equals zero now here's the condition we're used to saying i is less than size right i'd like to propose a change we'll write a different condition i will check if the current element is empty foods at index of i dot empty function then we'll add the not logical operator we'll continue our for loop as long as the current element is not empty then we'll add the statement increment i by one we'll display our array foods at index of i this for loop shouldn't display any elements that are empty pizza hamburger hot dog q to quit yeah and we only have three elements pizza hamburger hot dog one disadvantage of arrays is that they have a limited size they're static once we declare a size we can't change it we're limited to only storing five foods you could declare a larger size but you may be wasting memory if a user doesn't want to type in all 10. so in future topics we'll need to discuss both dynamic memory and vectors which should be coming up sometime in the future so yeah that is one way out of many ways to enter in user input into an array if you would like a copy of this code i'll post this in the comment section down below and well yeah that's how to enter user input into an array using c plus plus
