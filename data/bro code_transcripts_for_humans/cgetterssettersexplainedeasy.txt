With timestamps:

00:02 - hey everyone let's talk about getters
00:03 - and setters getters and setters are used
00:06 - within this concept of abstraction where
00:09 - we hide any unnecessary data from
00:11 - outside of a class getters are functions
00:14 - that make a private attribute readable
00:17 - setters are functions that make a
00:19 - private attribute writable here's an
00:22 - example
00:23 - i'm going to create a stove object class
00:28 - stove then i will instantiate a stove
00:31 - object stove
00:33 - stove
00:35 - in previous topics when we created
00:37 - attributes we would use the public
00:38 - access specifier
00:40 - then write any attributes
00:42 - in this example let's say
00:44 - int
00:45 - temperature
00:47 - i'll go ahead and set this to zero right
00:48 - away
00:49 - since this attribute temperature is
00:51 - public it's accessible from outside of
00:54 - the class that means that people can
00:56 - change it for example
00:58 - i will take my stove object
01:00 - set the temperature attribute to a
01:03 - really high setting that doesn't exist
01:05 - like
01:05 - a million
01:08 - this is fine
01:10 - then i can display the temperature
01:12 - standard output
01:14 - the
01:15 - temperature setting
01:19 - is
01:21 - stove dot temperature
01:28 - the temperature setting is 1 million
01:32 - i don't want people to mess with my
01:33 - temperature attribute what i could do
01:35 - instead is set these attributes to be
01:38 - private
01:41 - we're following that rule of abstraction
01:44 - we're hiding any unnecessary data from a
01:46 - user that they don't need
01:48 - we no longer have access to this
01:49 - temperature attribute from outside of
01:51 - the class you can see we have some red
01:53 - underlines
01:56 - temperature is private within this
01:58 - context
01:59 - this is a hidden attribute from the
02:01 - outside world if i need access to the
02:03 - value found within this temperature
02:06 - i can write a getter it's a function
02:08 - that will make an attribute readable
02:10 - i'll add a public access specifier
02:14 - then write a getter we're returning an
02:16 - integer
02:18 - i'll write get then the attribute name
02:21 - temperature
02:23 - all i'm gonna do is return
02:26 - our temperature
02:28 - i can no longer update or change the
02:30 - temperature it's readable but not
02:32 - writable so i'm going to turn this line
02:34 - into a comment
02:36 - in place of accessing this attribute
02:38 - directly i'm going to invoke the get
02:41 - temperature method
02:43 - stove dot get temperature add a set of
02:46 - parentheses
02:47 - now the current temperature setting is
02:49 - set to zero adding a getter will make an
02:52 - attribute readable if you need a private
02:54 - attribute to also be writable you can
02:57 - add a setter
02:59 - void
03:00 - set
03:01 - temperature
03:07 - this
03:08 - arrow
03:09 - temperature
03:11 - equals our temperature that we pass in
03:14 - then we just need a parameter
03:16 - int temperature
03:18 - in order for a user to change the
03:20 - temperature they would need to invoke
03:22 - the set temperature method
03:25 - then they can pass in a new temperature
03:27 - using this setter they can still set the
03:29 - temperature to whatever they want
03:31 - like a million in the previous example
03:36 - the temperature setting is set to 1
03:38 - million within a setter we can add some
03:41 - additional logic or checks
03:43 - before we do set the temperature let's
03:45 - check to see what the temperature is
03:47 - if
03:48 - the temperature the user passes in
03:51 - is less than zero
03:54 - we will set this temperature
03:57 - to be
03:58 - zero
04:00 - else if
04:03 - the temperature
04:05 - is greater than or equal to ten
04:08 - suppose this is a knob with different
04:10 - settings the number zero through ten
04:12 - this temperature
04:14 - equals 10.
04:16 - in case they type in a million it'll
04:18 - just max out at 10.
04:22 - else
04:24 - this temperature
04:25 - equals temperature
04:28 - i could attempt to set the temperature
04:30 - to a million but it would just max out
04:32 - at ten
04:33 - or we could try a negative number like
04:35 - negative three
04:38 - well now the temperature setting is set
04:39 - to zero
04:40 - as if the stove was off or anything
04:43 - between maybe five something right in
04:45 - the middle
04:46 - the temperature setting is five
04:49 - so yeah that's kind of the purpose of
04:50 - getters and setters they make a private
04:53 - attribute either readable or writeable
04:56 - or both if you use both one additional
04:59 - step you can take too is that if you
05:01 - have a constructor you can invoke the
05:03 - setters within a constructor within my
05:05 - stove class i have a constructor
05:09 - if we were to receive a temperature
05:12 - we could set the temperature right away
05:15 - so we already have this line of code
05:16 - within our setter so we don't
05:18 - necessarily need this line again
05:21 - we would instead invoke the setter
05:25 - set temperature
05:27 - pass in our temperature
05:31 - then if i was to instantiate a stove
05:33 - object i would have to pass in a
05:34 - temperature i'll set it to be zero
05:40 - and this temperature setting is set to
05:43 - zero
05:44 - so yeah those are getters and setters
05:46 - everybody a getter makes a private
05:48 - attribute readable a setter makes a
05:51 - private attribute writable within the
05:54 - getters and setters you can perform
05:56 - additional checks or logic which is
05:58 - pretty nice
05:59 - if you're looking for some additional
06:01 - practice post a class that has a getter
06:03 - and setter in the comments section down
06:05 - below and well yeah those are getters
06:07 - and setters in c plus

Cleaned transcript:

hey everyone let's talk about getters and setters getters and setters are used within this concept of abstraction where we hide any unnecessary data from outside of a class getters are functions that make a private attribute readable setters are functions that make a private attribute writable here's an example i'm going to create a stove object class stove then i will instantiate a stove object stove stove in previous topics when we created attributes we would use the public access specifier then write any attributes in this example let's say int temperature i'll go ahead and set this to zero right away since this attribute temperature is public it's accessible from outside of the class that means that people can change it for example i will take my stove object set the temperature attribute to a really high setting that doesn't exist like a million this is fine then i can display the temperature standard output the temperature setting is stove dot temperature the temperature setting is 1 million i don't want people to mess with my temperature attribute what i could do instead is set these attributes to be private we're following that rule of abstraction we're hiding any unnecessary data from a user that they don't need we no longer have access to this temperature attribute from outside of the class you can see we have some red underlines temperature is private within this context this is a hidden attribute from the outside world if i need access to the value found within this temperature i can write a getter it's a function that will make an attribute readable i'll add a public access specifier then write a getter we're returning an integer i'll write get then the attribute name temperature all i'm gonna do is return our temperature i can no longer update or change the temperature it's readable but not writable so i'm going to turn this line into a comment in place of accessing this attribute directly i'm going to invoke the get temperature method stove dot get temperature add a set of parentheses now the current temperature setting is set to zero adding a getter will make an attribute readable if you need a private attribute to also be writable you can add a setter void set temperature this arrow temperature equals our temperature that we pass in then we just need a parameter int temperature in order for a user to change the temperature they would need to invoke the set temperature method then they can pass in a new temperature using this setter they can still set the temperature to whatever they want like a million in the previous example the temperature setting is set to 1 million within a setter we can add some additional logic or checks before we do set the temperature let's check to see what the temperature is if the temperature the user passes in is less than zero we will set this temperature to be zero else if the temperature is greater than or equal to ten suppose this is a knob with different settings the number zero through ten this temperature equals 10. in case they type in a million it'll just max out at 10. else this temperature equals temperature i could attempt to set the temperature to a million but it would just max out at ten or we could try a negative number like negative three well now the temperature setting is set to zero as if the stove was off or anything between maybe five something right in the middle the temperature setting is five so yeah that's kind of the purpose of getters and setters they make a private attribute either readable or writeable or both if you use both one additional step you can take too is that if you have a constructor you can invoke the setters within a constructor within my stove class i have a constructor if we were to receive a temperature we could set the temperature right away so we already have this line of code within our setter so we don't necessarily need this line again we would instead invoke the setter set temperature pass in our temperature then if i was to instantiate a stove object i would have to pass in a temperature i'll set it to be zero and this temperature setting is set to zero so yeah those are getters and setters everybody a getter makes a private attribute readable a setter makes a private attribute writable within the getters and setters you can perform additional checks or logic which is pretty nice if you're looking for some additional practice post a class that has a getter and setter in the comments section down below and well yeah those are getters and setters in c plus
