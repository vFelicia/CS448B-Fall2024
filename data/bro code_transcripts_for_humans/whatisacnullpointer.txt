With timestamps:

00:01 - hey what's up everybody so let's talk
00:03 - about null pointers but first we'll need
00:06 - to know what a null value is a null
00:08 - value is a special value that means that
00:10 - something has no value when a pointer is
00:13 - holding a null value that means that
00:15 - pointer is not pointing to anything
00:17 - that's what we would call a null pointer
00:19 - there is a keyword that represents that
00:22 - null ptr ptr meaning pointer it's a
00:25 - keyword that represents a null pointer
00:27 - literal one of the reasons that we use
00:29 - null pointers is that they're helpful
00:31 - when determining if an address was
00:33 - successfully assigned to a pointer if we
00:36 - create a pointer but don't assign it a
00:38 - value we don't know where it's pointing
00:39 - to it would be good practice that that
00:41 - pointer doesn't point anywhere so let's
00:43 - create a null pointer i'll create a
00:45 - pointer of the int data type we use the
00:48 - dereference operator
00:50 - pointer
00:51 - if i'm not going to assign this pointer
00:53 - and address right away it would be good
00:55 - practice to assign this pointer
00:57 - null ptr
00:59 - null pointer
01:00 - later on in your program if you need to
01:02 - assign an address
01:03 - let's say int x equals one two three
01:07 - i would just take
01:08 - my pointer
01:10 - set the sequel to
01:12 - the address of my variable
01:15 - if you dereference a null pointer it can
01:18 - lead to undefined behavior
01:20 - or if you dereference a pointer that's
01:22 - not assigned a value well that can lead
01:24 - to undefined behavior too
01:26 - what some programmers do is that they'll
01:28 - check to see if their pointer is a null
01:30 - pointer before continuing kind of like a
01:32 - system of checks and balances
01:34 - we assigned our pointer the address of x
01:36 - i would like to check to see if my
01:38 - pointer contains a valid address before
01:40 - dereferencing it
01:42 - so we could say
01:43 - pointer
01:45 - equals
01:46 - null
01:48 - pointer
01:49 - was my pointer assigned an address or is
01:51 - it still a null pointer
01:54 - if my pointer is still a null pointer
01:56 - that means we did not successfully
01:58 - assign an address to my pointer there
02:00 - may be situations such as when working
02:03 - with dynamic memory where you attempt to
02:05 - assign an address to your pointer and it
02:06 - fails this would be a good way to check
02:08 - to see if that failed or not if your
02:10 - pointer still remains a null pointer
02:13 - so let's say address was not assigned
02:20 - else
02:22 - standard output
02:26 - address was assigned
02:31 - so let's run this
02:32 - currently our pointer is pointing to the
02:35 - address of x
02:39 - address was assigned now if for some
02:42 - reason we did not assign an address
02:44 - i'll turn this line into a comment to
02:46 - represent that well our pointer is still
02:48 - going to be a null pointer
02:51 - address was not assigned
02:53 - if your pointer is still a null pointer
02:56 - it's not safe to dereference that
02:58 - pointer
02:59 - if i need access to the value that's at
03:01 - that pointer it would be safe to do so
03:03 - within this else statement
03:05 - standard output
03:08 - dereference operator
03:10 - pointer
03:16 - so my pointer contains the number one
03:18 - two three if i were to dereference this
03:21 - null pointer that would lead to
03:22 - undefined behavior i have no idea what's
03:24 - gonna happen
03:26 - don't try this at home kids
03:32 - null pointer is a keyword that
03:33 - represents a null pointer literal
03:36 - when declaring a pointer it's good
03:37 - practice that our pointer is pointing to
03:39 - a valid address
03:41 - or this null pointer keyword because
03:43 - otherwise we don't know where it's
03:44 - pointing originally they're helpful when
03:47 - determining if an address was
03:48 - successfully assigned to a pointer when
03:51 - using pointers be careful that your code
03:52 - isn't dereferencing a null pointer or
03:55 - pointing to any free memory that we're
03:57 - not using because that can lead to
03:59 - undefined behavior
04:00 - so yeah everybody those are no pointers
04:03 - in c plus

Cleaned transcript:

hey what's up everybody so let's talk about null pointers but first we'll need to know what a null value is a null value is a special value that means that something has no value when a pointer is holding a null value that means that pointer is not pointing to anything that's what we would call a null pointer there is a keyword that represents that null ptr ptr meaning pointer it's a keyword that represents a null pointer literal one of the reasons that we use null pointers is that they're helpful when determining if an address was successfully assigned to a pointer if we create a pointer but don't assign it a value we don't know where it's pointing to it would be good practice that that pointer doesn't point anywhere so let's create a null pointer i'll create a pointer of the int data type we use the dereference operator pointer if i'm not going to assign this pointer and address right away it would be good practice to assign this pointer null ptr null pointer later on in your program if you need to assign an address let's say int x equals one two three i would just take my pointer set the sequel to the address of my variable if you dereference a null pointer it can lead to undefined behavior or if you dereference a pointer that's not assigned a value well that can lead to undefined behavior too what some programmers do is that they'll check to see if their pointer is a null pointer before continuing kind of like a system of checks and balances we assigned our pointer the address of x i would like to check to see if my pointer contains a valid address before dereferencing it so we could say pointer equals null pointer was my pointer assigned an address or is it still a null pointer if my pointer is still a null pointer that means we did not successfully assign an address to my pointer there may be situations such as when working with dynamic memory where you attempt to assign an address to your pointer and it fails this would be a good way to check to see if that failed or not if your pointer still remains a null pointer so let's say address was not assigned else standard output address was assigned so let's run this currently our pointer is pointing to the address of x address was assigned now if for some reason we did not assign an address i'll turn this line into a comment to represent that well our pointer is still going to be a null pointer address was not assigned if your pointer is still a null pointer it's not safe to dereference that pointer if i need access to the value that's at that pointer it would be safe to do so within this else statement standard output dereference operator pointer so my pointer contains the number one two three if i were to dereference this null pointer that would lead to undefined behavior i have no idea what's gonna happen don't try this at home kids null pointer is a keyword that represents a null pointer literal when declaring a pointer it's good practice that our pointer is pointing to a valid address or this null pointer keyword because otherwise we don't know where it's pointing originally they're helpful when determining if an address was successfully assigned to a pointer when using pointers be careful that your code isn't dereferencing a null pointer or pointing to any free memory that we're not using because that can lead to undefined behavior so yeah everybody those are no pointers in c plus
