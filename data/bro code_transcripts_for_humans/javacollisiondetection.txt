With timestamps:

00:00 - how's it going everybody it's bro here
hope you're doing well and in this video
00:04 - i'm going to be teaching you guys about
some simple
00:06 - collision detection using java so sit
back
00:09 - relax and enjoy the show
00:13 - if you find this video helpful please
remember to like
00:16 - comment and subscribe your support will
help keep this channel running
00:20 - alright everybody so collision detection
this is defined as the computational
00:25 - problem of detecting the intersection
of two or more objects so what we're
00:30 - going to be doing for this lesson
is that we're going to create two
00:33 - rectangles and we're going to determine
if these two rectangles are colliding or
00:38 - not
so one is going to be player controlled
00:41 - we can actually move this rectangle
around and the other is going to be just
00:45 - stationary it's going to be more of an
obstacle
00:48 - and then if these two objects intersect
or collide then we'll just display a
00:53 - message such as game over
so this is just going to be a very
00:57 - simple example of collision detection
so let's begin by creating a few classes
01:02 - so within my source folder i'm going to
go to
01:04 - file new class and i'm going to create a
class called my frame
01:09 - and my frame will extend or extends
jframe and then we're going to create
01:16 - another class
and we'll call this box and then box
01:21 - will extends the rectangle class
and then we're going to customize these
01:29 - boxes one is player controlled and the
other will be an obstacle
01:33 - and then make sure we get these imports
as well
01:36 - okay let's create an instance of our my
frame class
01:40 - so we type in the name of the class my
frame i'll call this my frame
01:45 - equals new my frame
and then let's complete our box class
01:51 - because there's not a lot to do within
here
01:53 - so let's begin by creating the
constructor for this class
01:56 - so we just type in the name of the class
we're going to be using a key adapter
02:03 - within the my frame class
so we'll create a method called public
02:08 - void key pressed
and then the parameter is key event
02:15 - e and then we will create
a draw method so
02:24 - public void draw
and the parameter for this is graphics
02:32 - g okay
let's declare one thing before our
02:37 - constructor just a color so
color color
02:42 - okay then for our constructor we're
going to set up a few parameters
02:47 - so into x
into y and width
02:54 - and height and
color color
03:04 - so i'm just going to import everything
related to java.awt
03:12 - as well as everything related to
awt.event
03:18 - all right so what we're going to be
doing with the constructor for this box
03:22 - is that we're going to pass in the x and
y coordinates
03:25 - the width and the height of this box as
well as a color whenever we instantiate
03:30 - a box object so we'll type in this x
equals x whatever value we receive here
03:38 - so this y equals y
this width equals width
03:46 - this height equals height
and this color equals color
03:54 - okay now within the keypressed method
we're going to create a few if
03:59 - statements if
e dot get key
04:03 - code is equal to
key event dot
04:11 - vk underscore up so if somebody types
the up button we want to
04:16 - move the y coordinate for this box
so this dot y
04:23 - equals y maybe minus 10 pixels
now let's repeat this process for the
04:29 - other directions
so v k underscore
04:33 - down equals this y equals y
plus 10 and then key
04:41 - event left
equals this x equals x
04:48 - minus 10 and lastly
04:54 - v k underscore right
this x equals x plus 10
05:01 - and that is it for our keypressed method
so let's work on the draw method
05:06 - so this one's fairly simple we just need
two lines of code we're going to set
05:10 - the color so g that's our graphic
that we have here g dot set
05:16 - color this dot
color and then
05:24 - g dot phil
05:28 - wrecked let me fix that real quick
fill rect
05:35 - so we're going to take the x coordinate
this x
05:41 - and then this y
05:48 - this width and
this height so whenever we call the draw
05:54 - method we're going to basically be
redrawing this object our box
06:00 - okay that is everything for this box
class
06:03 - so let's move on to my frame so make
sure you have all of these imports at
06:08 - the top we only need three
and then let's declare all of the
06:11 - methods that we'll need so we'll need
the constructor for my frame
06:17 - and then we'll need a paint method so
public
06:21 - void paint and then make sure this paint
method
06:25 - is lowercase and then there's a
parameter
06:29 - graphics g
06:33 - we're going to create a method called
check collision
06:36 - so public void
check collision
06:45 - and then we're actually going to create
an inner class
06:49 - so public class and this will be an
action listener we'll call this al for
06:55 - short
and it's going to extends key
07:00 - adapter
07:05 - all right so let's declare a bunch of
things before our constructor so that
07:09 - they're globally available
so we're going to create an image object
07:14 - image
image as well as graphics
07:18 - and we'll call this graphics we'll
create a box object called
07:23 - player and a box object called
enemy and we'll want a boolean value
07:31 - called
game over
07:35 - okay let's move on to our constructor
now we'll finish
07:39 - initializing everything here so
player equals a new instance of our box
07:46 - class
and with this constructor we have a few
07:49 - arguments that we need to pass in
the coordinates the dimensions and a
07:53 - color
so we'll place maybe 100 for the
07:58 - x coordinate 300 for y and this will be
50 by 50 for the dimensions and a color
08:04 - so maybe
color dot blue likewise the enemy will
08:09 - be
red
08:12 - so for our enemy enemy equals
we'll place this where x is 400 we'll
08:20 - keep
these the same except for the color
08:23 - we'll just make the enemy red and then
game over equals false
08:31 - and then let's work on our jframe
so this dot set default
08:38 - close operation jframe
dot exit on close so this allows us to
08:45 - close out of the program
and let's set the size for this frame so
08:49 - this dot set
size 600 by 600 is decent
08:55 - we'll want to set the visibility to true
so set
08:59 - visible true
and then we're going to create an
09:04 - instance of our action listener class
so this dot add
09:12 - key listener and we're going to pass
in an anonymous al
09:18 - class for action listener we're
basically passing in a
09:22 - instance of this but we still need to
fill this in so that's coming up
09:27 - now let's move on to the body of our
paint method so this paint method is
09:31 - going to be called when we
instantiate a new instance of this class
09:36 - so and we can also repaint things too so
that's kind of convenient
09:39 - we just use the repaint method so let's
begin by
09:44 - saying that our image equals create
image and then we'll need dimensions for
09:50 - this image
so our image is going to be kind of like
09:53 - our game window
so we'll set the dimensions so this dot
09:58 - get width so this is the width of
the frame that we have and this
10:04 - dot get height
10:09 - and then we're also going to create our
graphics
10:12 - so graphics equals our image
dot get graphics
10:20 - and then lastly g which is our
graphics dot
10:27 - draw image and then there's a few
arguments to pass
10:32 - in we're going to pass in our image
the coordinates we'll just start this in
10:37 - the top left corner
and then we need to pass in our frame so
10:42 - this
10:45 - okay let's draw the player and the enemy
so
10:49 - player and we're going to use the draw
method that we have
10:53 - and we're going to pass in g our
graphics
10:58 - and then we're also going to draw our
enemy
11:04 - it's about time we check to see what we
have so far
11:07 - so here's our player our blue box and
here's our enemy the red box
11:12 - so they're at least displaying within
our frame but we can't yet move our
11:16 - player character the blue box
so we're going to actually fill in a few
11:20 - things within
our inner class al short for action
11:24 - listener
so we're going to be overriding a method
11:27 - so it's good practice to type in
at override and this method
11:33 - is called public void key
pressed and the parameter
11:40 - is key event e
11:46 - so if somebody presses a key we have a
few things to do
11:50 - first let's move our player character so
we can actually call the
11:54 - key pressed method of our player object
so we're basically going to be calling
12:00 - this method right here
and depending on what the user types in
12:04 - we'll move our character
the blue box so player dot key
12:10 - pressed and we're going to pass
in our key event e then let's check for
12:17 - a collision but we still have to fill in
this method
12:20 - so check collision
and lastly we're going to use the
12:28 - repaint method and that will basically
do all of this over again okay let's see
12:34 - if we can actually move our player now
yep
12:38 - and it appears that we can however if we
do collide
12:41 - into the enemy we'll probably want to do
something
12:45 - so what we'll do is we will
first check to see if there's a
12:50 - collision so within here we're going to
type in
12:52 - if player and there's actually
a method for the rectangle class
13:00 - so our box extends rectangle
and this method is called intersex
13:07 - and we're going to check to see if this
object
13:10 - intersects another object we want to
check to see if we are
13:14 - intersecting the enemy object
so if we are what we're going to do
13:21 - is that we're going to take our game
over boolean value and set this to true
13:28 - and then let's also just print line this
just to test it so
13:32 - game over so this will display in the
console window
13:36 - so let's try this again
13:39 - all right here we are we can move around
i'm actually going around the enemy
13:44 - nothing's happening but when i intersect
it
13:46 - it says game over in our console window
let's take a look at this intersex
13:51 - method to understand
the code underlying it so intersex
13:56 - is a method of the rectangle class so
what we're doing is comparing
14:01 - two objects and in our case our player
and our enemy
14:04 - and what we're doing within this method
one
14:07 - we're retrieving the dimensions for each
of these objects
14:11 - this as in the player and r as in the
object that we're comparing this
14:16 - to our enemy and here we're retrieving
the coordinates of where these
14:21 - objects are located spatially and at the
end we're returning a boolean value
14:26 - and these few lines right here what
we're doing
14:30 - is determining if these two objects are
intersecting
14:34 - between certain points within our frame
so if you need to you can actually copy
14:40 - all this code here
and repurpose this for something else
14:44 - maybe if you want to check to see if
two labels are intersecting or colliding
14:48 - you can actually just copy all this code
and then just make a few changes where
14:52 - you're comparing the dimensions
for these two labels and their x
14:56 - coordinates and y coordinates
but since we're using this rectangle
15:00 - class we don't actually have to type all
that out we can just
15:03 - use the intersex method because that's
all done for us
15:06 - so this is just a very basic
demonstration of this
15:10 - so one last thing i want to do is that
we want to display
15:14 - game over like on our game frame so what
we'll do
15:18 - is within the paint method we'll check
to see
15:21 - if game over is equal to true
the shorthand wave is just typing in
15:27 - game over
and within this if statement we'll type
15:32 - in
g dot set color maybe to red
15:37 - color dot red
and then let's set the font so g dot set
15:45 - font new
font i'll pick mv bully
15:54 - doesn't matter what you pick and font
dot plane if you want a plain font as
16:01 - well as a
size so maybe
16:06 - 45.
and we need to type in g dot
16:13 - draw string
and we will type in what we want to
16:18 - display the text so
game over the x-coordinate and the
16:22 - y-coordinate so maybe 150
as well as 100
16:29 - okay that should be everything let's run
this
16:33 - so we have no problems we're moving
along but as soon as we run into this
16:37 - red box
it displays game over and then you can
16:40 - like disable this or exit out of the
program if you want but
16:44 - we'll save that for another day so yeah
that's some
16:48 - simple basic collision detection if you
want a copy of all this code i'll post
16:52 - this in the comments down below
but yeah that's the basics for collision
16:56 - detection using java
hey you yeah i'm talking to you if you
17:01 - learn something new
then you can help me help you in three
17:05 - easy steps
by smashing that like button drop a
17:08 - comment down below
and subscribe if you'd like to become a
17:11 - fellow bro
17:33 - you

Cleaned transcript:

how's it going everybody it's bro here hope you're doing well and in this video i'm going to be teaching you guys about some simple collision detection using java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running alright everybody so collision detection this is defined as the computational problem of detecting the intersection of two or more objects so what we're going to be doing for this lesson is that we're going to create two rectangles and we're going to determine if these two rectangles are colliding or not so one is going to be player controlled we can actually move this rectangle around and the other is going to be just stationary it's going to be more of an obstacle and then if these two objects intersect or collide then we'll just display a message such as game over so this is just going to be a very simple example of collision detection so let's begin by creating a few classes so within my source folder i'm going to go to file new class and i'm going to create a class called my frame and my frame will extend or extends jframe and then we're going to create another class and we'll call this box and then box will extends the rectangle class and then we're going to customize these boxes one is player controlled and the other will be an obstacle and then make sure we get these imports as well okay let's create an instance of our my frame class so we type in the name of the class my frame i'll call this my frame equals new my frame and then let's complete our box class because there's not a lot to do within here so let's begin by creating the constructor for this class so we just type in the name of the class we're going to be using a key adapter within the my frame class so we'll create a method called public void key pressed and then the parameter is key event e and then we will create a draw method so public void draw and the parameter for this is graphics g okay let's declare one thing before our constructor just a color so color color okay then for our constructor we're going to set up a few parameters so into x into y and width and height and color color so i'm just going to import everything related to java.awt as well as everything related to awt.event all right so what we're going to be doing with the constructor for this box is that we're going to pass in the x and y coordinates the width and the height of this box as well as a color whenever we instantiate a box object so we'll type in this x equals x whatever value we receive here so this y equals y this width equals width this height equals height and this color equals color okay now within the keypressed method we're going to create a few if statements if e dot get key code is equal to key event dot vk underscore up so if somebody types the up button we want to move the y coordinate for this box so this dot y equals y maybe minus 10 pixels now let's repeat this process for the other directions so v k underscore down equals this y equals y plus 10 and then key event left equals this x equals x minus 10 and lastly v k underscore right this x equals x plus 10 and that is it for our keypressed method so let's work on the draw method so this one's fairly simple we just need two lines of code we're going to set the color so g that's our graphic that we have here g dot set color this dot color and then g dot phil wrecked let me fix that real quick fill rect so we're going to take the x coordinate this x and then this y this width and this height so whenever we call the draw method we're going to basically be redrawing this object our box okay that is everything for this box class so let's move on to my frame so make sure you have all of these imports at the top we only need three and then let's declare all of the methods that we'll need so we'll need the constructor for my frame and then we'll need a paint method so public void paint and then make sure this paint method is lowercase and then there's a parameter graphics g we're going to create a method called check collision so public void check collision and then we're actually going to create an inner class so public class and this will be an action listener we'll call this al for short and it's going to extends key adapter all right so let's declare a bunch of things before our constructor so that they're globally available so we're going to create an image object image image as well as graphics and we'll call this graphics we'll create a box object called player and a box object called enemy and we'll want a boolean value called game over okay let's move on to our constructor now we'll finish initializing everything here so player equals a new instance of our box class and with this constructor we have a few arguments that we need to pass in the coordinates the dimensions and a color so we'll place maybe 100 for the x coordinate 300 for y and this will be 50 by 50 for the dimensions and a color so maybe color dot blue likewise the enemy will be red so for our enemy enemy equals we'll place this where x is 400 we'll keep these the same except for the color we'll just make the enemy red and then game over equals false and then let's work on our jframe so this dot set default close operation jframe dot exit on close so this allows us to close out of the program and let's set the size for this frame so this dot set size 600 by 600 is decent we'll want to set the visibility to true so set visible true and then we're going to create an instance of our action listener class so this dot add key listener and we're going to pass in an anonymous al class for action listener we're basically passing in a instance of this but we still need to fill this in so that's coming up now let's move on to the body of our paint method so this paint method is going to be called when we instantiate a new instance of this class so and we can also repaint things too so that's kind of convenient we just use the repaint method so let's begin by saying that our image equals create image and then we'll need dimensions for this image so our image is going to be kind of like our game window so we'll set the dimensions so this dot get width so this is the width of the frame that we have and this dot get height and then we're also going to create our graphics so graphics equals our image dot get graphics and then lastly g which is our graphics dot draw image and then there's a few arguments to pass in we're going to pass in our image the coordinates we'll just start this in the top left corner and then we need to pass in our frame so this okay let's draw the player and the enemy so player and we're going to use the draw method that we have and we're going to pass in g our graphics and then we're also going to draw our enemy it's about time we check to see what we have so far so here's our player our blue box and here's our enemy the red box so they're at least displaying within our frame but we can't yet move our player character the blue box so we're going to actually fill in a few things within our inner class al short for action listener so we're going to be overriding a method so it's good practice to type in at override and this method is called public void key pressed and the parameter is key event e so if somebody presses a key we have a few things to do first let's move our player character so we can actually call the key pressed method of our player object so we're basically going to be calling this method right here and depending on what the user types in we'll move our character the blue box so player dot key pressed and we're going to pass in our key event e then let's check for a collision but we still have to fill in this method so check collision and lastly we're going to use the repaint method and that will basically do all of this over again okay let's see if we can actually move our player now yep and it appears that we can however if we do collide into the enemy we'll probably want to do something so what we'll do is we will first check to see if there's a collision so within here we're going to type in if player and there's actually a method for the rectangle class so our box extends rectangle and this method is called intersex and we're going to check to see if this object intersects another object we want to check to see if we are intersecting the enemy object so if we are what we're going to do is that we're going to take our game over boolean value and set this to true and then let's also just print line this just to test it so game over so this will display in the console window so let's try this again all right here we are we can move around i'm actually going around the enemy nothing's happening but when i intersect it it says game over in our console window let's take a look at this intersex method to understand the code underlying it so intersex is a method of the rectangle class so what we're doing is comparing two objects and in our case our player and our enemy and what we're doing within this method one we're retrieving the dimensions for each of these objects this as in the player and r as in the object that we're comparing this to our enemy and here we're retrieving the coordinates of where these objects are located spatially and at the end we're returning a boolean value and these few lines right here what we're doing is determining if these two objects are intersecting between certain points within our frame so if you need to you can actually copy all this code here and repurpose this for something else maybe if you want to check to see if two labels are intersecting or colliding you can actually just copy all this code and then just make a few changes where you're comparing the dimensions for these two labels and their x coordinates and y coordinates but since we're using this rectangle class we don't actually have to type all that out we can just use the intersex method because that's all done for us so this is just a very basic demonstration of this so one last thing i want to do is that we want to display game over like on our game frame so what we'll do is within the paint method we'll check to see if game over is equal to true the shorthand wave is just typing in game over and within this if statement we'll type in g dot set color maybe to red color dot red and then let's set the font so g dot set font new font i'll pick mv bully doesn't matter what you pick and font dot plane if you want a plain font as well as a size so maybe 45. and we need to type in g dot draw string and we will type in what we want to display the text so game over the xcoordinate and the ycoordinate so maybe 150 as well as 100 okay that should be everything let's run this so we have no problems we're moving along but as soon as we run into this red box it displays game over and then you can like disable this or exit out of the program if you want but we'll save that for another day so yeah that's some simple basic collision detection if you want a copy of all this code i'll post this in the comments down below but yeah that's the basics for collision detection using java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
