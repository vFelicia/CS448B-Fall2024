With timestamps:

00:00 - hey hello so uh today I'm going to
00:02 - explain Getters and Setters in
00:04 - JavaScript Getters are special methods
00:07 - that make a property readable Setters
00:10 - are special methods that make a property
00:12 - writable we can use Getters and Setters
00:15 - to validate and modify a value when
00:17 - reading or writing a property it helps
00:19 - with validation when creating an object
00:21 - or updating one of its properties here's
00:23 - an example we will create a class of
00:28 - rectangle we need a con
00:32 - structor we will have two parameters a
00:35 - width and a
00:38 - height we will assign this do width
00:42 - equals
00:43 - width this do
00:46 - height equals
00:49 - height now let's create a rectangle
00:52 - object const rectangle equals a new
00:58 - rectangle for the width let's say -1
01:03 - million something
01:04 - ridiculous and for the height I want the
01:07 - height to be Pizza the word
01:09 - pizza then let's
01:13 - console.log our
01:15 - rectangles width and the rectangle's
01:21 - height we have created a rectangle
01:24 - object with the width of 1 million and a
01:27 - height of pizza which doesn't make any
01:29 - sense
01:30 - we could use some validation when
01:31 - creating an object we don't want people
01:33 - to enter in garbage values like negative
01:35 - a million or string when we're expecting
01:38 - a positive number for the width or
01:40 - height that's where Getters and Setters
01:42 - come in we'll begin with Setters when
01:44 - setting one of these properties either
01:46 - initially through a Constructor or
01:49 - updating one of them later such as
01:51 - setting the width or height equal to
01:52 - some value we can go through a Setter
01:56 - first outside of our Constructor we will
01:59 - set a property we'll begin with
02:03 - width this will be a special type of
02:06 - method the parameter will be new withth
02:11 - what do we want to check before
02:12 - assigning this property using an if
02:14 - statement let's check to see if the new
02:17 - width that the user sends us is greater
02:20 - than zero if it is we will assign this
02:24 - doore
02:27 - width using an underscore prefix it
02:30 - tells other developers that this is a
02:32 - private property you shouldn't touch it
02:34 - at all you could say that this private
02:36 - property of WID is different than our
02:39 - standard width property we will assign
02:42 - the private property of width equal to
02:44 - the new width we
02:47 - receive else let's
02:50 - console. error not log we'll use error
02:54 - this
02:55 - time width must be a positive number
03:01 - all right let's see what
03:03 - happens width must be a positive number
03:06 - and our width is currently undefined
03:08 - which is good okay let's do this with
03:10 - height let's copy our Setter for width
03:14 - paste it but change every instance of
03:16 - width to be height set height New
03:22 - Height be sure to use that Camel case
03:25 - naming
03:26 - convention if new height is greater than
03:28 - zero assign the private property of
03:32 - height equal to the new height else
03:36 - console.
03:38 - error height must be a positive
03:41 - number and there we go that worked width
03:45 - must be a positive number and height
03:47 - must be a positive number our width and
03:49 - height are currently
03:50 - undefined in order to set the width and
03:53 - height we have to pass in a positive
03:55 - number for the width I will say three
03:59 - for the width four now when we access
04:02 - width and height those numbers still
04:04 - aren't showing up that's because these
04:06 - properties are writable via Setters but
04:09 - they're not readable that's where
04:11 - Getters come
04:12 - in we'll create two Getters one for
04:16 - width we'll need to use the get keyword
04:19 - get
04:20 - width this will be another type of
04:22 - method all we're going to do is return
04:26 - this private
04:28 - width
04:30 - and that appeared to work we have three
04:31 - for the
04:32 - width let's do so with the
04:36 - height we will return this private
04:41 - height we have three and
04:44 - four Now by using Setters we can even
04:47 - update those values later let's take our
04:51 - rectangles with set that equal to be
04:54 - five take the
04:57 - height set it equal to be six and that
05:01 - also appears to work but again if I try
05:03 - and update those values to some garbage
05:05 - values like a million and the word
05:10 - Pizza we get those errors again and our
05:13 - object retains its initial values that
05:15 - we previously assigned it three and four
05:18 - with Getters we can even use the
05:20 - property accessor that dot to access a
05:23 - property that doesn't necessarily exist
05:26 - for example we will get area
05:30 - we'll perform a
05:31 - calculation we will return this private
05:36 - width times this private
05:43 - height so now we can access area as if
05:47 - it was a
05:49 - property we have three for the width
05:51 - height four our width times our height
05:54 - gives us an area of 12 our area isn't a
05:57 - property technically it's not found
05:59 - within our
06:00 - Constructor but we can access it as if
06:02 - it was a property with a getter with
06:04 - Getters you can even add additional
06:06 - logic I would like to preserve the
06:08 - initial values of our width and height
06:10 - when I return their value I will use the
06:13 - two fixed method to give each of these a
06:16 - Precision of
06:18 - one let's do that with the width the
06:22 - height and the area but that's going to
06:25 - be a little more complex we'll enclose
06:28 - width time height then add to fixed
06:31 - one and why stop there I'll add
06:33 - centimeters to the end of each I'll use
06:36 - a template
06:37 - string add a
06:40 - placeholder then add CM for
06:43 - centimeters 3.0
06:51 - cm and the
06:57 - area 12. 0 CM let's make that centim
07:02 - squared because it's area Technically
07:04 - when you're assigning values even when
07:06 - you're initially creating an object you
07:08 - can go through the Setters for input
07:10 - validation when you retrieve values and
07:12 - try and read them you can add additional
07:14 - logic too let's go over a second example
07:18 - we will create a class of person we need
07:22 - a
07:24 - Constructor we will accept a first
07:28 - name last
07:30 - name and an
07:32 - age this. first
07:35 - name equals first
07:39 - name this. last name equals last
07:44 - name this. AG equals
07:49 - age let's construct a person
07:52 - const person equals new
07:56 - person let's enter in some values that
07:58 - don't make sense sense the person's
08:00 - first name will be the number 420 their
08:03 - last name is the number 69 their age is
08:06 - the word
08:08 - Pizza let's
08:11 - console.log our person objects first
08:15 - name which is the number
08:18 - 420 their last name 69 and their
08:24 - age the word Pizza we need to validate
08:28 - this input before assigning the
08:30 - properties that's why we need Setters we
08:33 - will set the first name property this is
08:36 - a special type of method the parameter
08:39 - is going to be a new first name we need
08:43 - to be sure that this value passed in is
08:46 - a string and the length is greater than
08:49 - zero we could write something like this
08:51 - we need an if statement let's check the
08:55 - type of our new first name is it
08:58 - strictly equal to a
09:01 - string and is our new first nam's length
09:06 - property greater than
09:08 - zero if all of that checks out we will
09:12 - assign this private first name equal to
09:17 - the new first name we
09:20 - receive else let's console.
09:27 - error first
09:30 - name must be a
09:34 - nonempty string let's see if this worked
09:37 - I'm going to save first name must be a
09:40 - non-empty string and currently our first
09:42 - name is undefined okay that worked let's
09:45 - copy our Setter for our first name paste
09:48 - it change every instance of first name
09:51 - to last
09:53 - name new last
09:57 - name check if the type of our last name
10:01 - is equal to a string and if our new last
10:04 - name the length of it is greater than
10:06 - zero if it is assign the private last
10:11 - name property equal to the new last name
10:15 - else last name must be a non-empty
10:17 - string that also worked our first name
10:20 - and last name are
10:21 - undefined let's do this with
10:24 - age set our
10:26 - age the parameter is going to be New
10:31 - Age using an if statement is the type of
10:36 - new age strictly equal to a data type of
10:41 - number and is our new age greater than
10:45 - or equal to zero if it is take this
10:50 - private age equals our new
10:55 - age else we're going to console do
11:02 - error age must be a non negative number
11:09 - we can no longer assign pizza for our
11:11 - age
11:12 - unfortunately all right we have our
11:14 - setter set up now let's work on the
11:16 - Getters let's assign some legitimate
11:19 - values for the first name SpongeBob last
11:22 - name
11:24 - SquarePants age 30 we don't have those
11:27 - errors anymore that means they're set
11:30 - but those properties aren't readable
11:32 - that's why we need Getters let's get the
11:34 - first name get first
11:38 - name return this private first
11:43 - name there's SpongeBob his first
11:47 - name get last
11:50 - name return this private last name
11:55 - there's his last name let's create a
11:58 - getter for a full name
11:59 - too let's
12:02 - console.log a full name even though we
12:04 - have no property for that that's
12:06 - undefined we'll use a getter to mimic a
12:09 - full name property by just combining the
12:11 - first name and the last name
12:13 - properties get full
12:16 - name return I'm going to use some string
12:20 - catnation this private first name
12:25 - plus aace character this private last
12:32 - name and there's his full name SpongeBob
12:36 - SquarePants and the age get age return
12:42 - this private
12:45 - age and SpongeBob is
12:47 - 30 all right everybody those are Getters
12:50 - and Setters Getters are special methods
12:53 - that make a property readable Setters
12:55 - are special methods that make a property
12:58 - writable by using a combination of both
13:00 - we can validate and modify a value when
13:03 - reading or writing a property and well
13:05 - everybody those are Getters and Setters
13:08 - in
13:12 - JavaScript

Cleaned transcript:

hey hello so uh today I'm going to explain Getters and Setters in JavaScript Getters are special methods that make a property readable Setters are special methods that make a property writable we can use Getters and Setters to validate and modify a value when reading or writing a property it helps with validation when creating an object or updating one of its properties here's an example we will create a class of rectangle we need a con structor we will have two parameters a width and a height we will assign this do width equals width this do height equals height now let's create a rectangle object const rectangle equals a new rectangle for the width let's say 1 million something ridiculous and for the height I want the height to be Pizza the word pizza then let's console.log our rectangles width and the rectangle's height we have created a rectangle object with the width of 1 million and a height of pizza which doesn't make any sense we could use some validation when creating an object we don't want people to enter in garbage values like negative a million or string when we're expecting a positive number for the width or height that's where Getters and Setters come in we'll begin with Setters when setting one of these properties either initially through a Constructor or updating one of them later such as setting the width or height equal to some value we can go through a Setter first outside of our Constructor we will set a property we'll begin with width this will be a special type of method the parameter will be new withth what do we want to check before assigning this property using an if statement let's check to see if the new width that the user sends us is greater than zero if it is we will assign this doore width using an underscore prefix it tells other developers that this is a private property you shouldn't touch it at all you could say that this private property of WID is different than our standard width property we will assign the private property of width equal to the new width we receive else let's console. error not log we'll use error this time width must be a positive number all right let's see what happens width must be a positive number and our width is currently undefined which is good okay let's do this with height let's copy our Setter for width paste it but change every instance of width to be height set height New Height be sure to use that Camel case naming convention if new height is greater than zero assign the private property of height equal to the new height else console. error height must be a positive number and there we go that worked width must be a positive number and height must be a positive number our width and height are currently undefined in order to set the width and height we have to pass in a positive number for the width I will say three for the width four now when we access width and height those numbers still aren't showing up that's because these properties are writable via Setters but they're not readable that's where Getters come in we'll create two Getters one for width we'll need to use the get keyword get width this will be another type of method all we're going to do is return this private width and that appeared to work we have three for the width let's do so with the height we will return this private height we have three and four Now by using Setters we can even update those values later let's take our rectangles with set that equal to be five take the height set it equal to be six and that also appears to work but again if I try and update those values to some garbage values like a million and the word Pizza we get those errors again and our object retains its initial values that we previously assigned it three and four with Getters we can even use the property accessor that dot to access a property that doesn't necessarily exist for example we will get area we'll perform a calculation we will return this private width times this private height so now we can access area as if it was a property we have three for the width height four our width times our height gives us an area of 12 our area isn't a property technically it's not found within our Constructor but we can access it as if it was a property with a getter with Getters you can even add additional logic I would like to preserve the initial values of our width and height when I return their value I will use the two fixed method to give each of these a Precision of one let's do that with the width the height and the area but that's going to be a little more complex we'll enclose width time height then add to fixed one and why stop there I'll add centimeters to the end of each I'll use a template string add a placeholder then add CM for centimeters 3.0 cm and the area 12. 0 CM let's make that centim squared because it's area Technically when you're assigning values even when you're initially creating an object you can go through the Setters for input validation when you retrieve values and try and read them you can add additional logic too let's go over a second example we will create a class of person we need a Constructor we will accept a first name last name and an age this. first name equals first name this. last name equals last name this. AG equals age let's construct a person const person equals new person let's enter in some values that don't make sense sense the person's first name will be the number 420 their last name is the number 69 their age is the word Pizza let's console.log our person objects first name which is the number 420 their last name 69 and their age the word Pizza we need to validate this input before assigning the properties that's why we need Setters we will set the first name property this is a special type of method the parameter is going to be a new first name we need to be sure that this value passed in is a string and the length is greater than zero we could write something like this we need an if statement let's check the type of our new first name is it strictly equal to a string and is our new first nam's length property greater than zero if all of that checks out we will assign this private first name equal to the new first name we receive else let's console. error first name must be a nonempty string let's see if this worked I'm going to save first name must be a nonempty string and currently our first name is undefined okay that worked let's copy our Setter for our first name paste it change every instance of first name to last name new last name check if the type of our last name is equal to a string and if our new last name the length of it is greater than zero if it is assign the private last name property equal to the new last name else last name must be a nonempty string that also worked our first name and last name are undefined let's do this with age set our age the parameter is going to be New Age using an if statement is the type of new age strictly equal to a data type of number and is our new age greater than or equal to zero if it is take this private age equals our new age else we're going to console do error age must be a non negative number we can no longer assign pizza for our age unfortunately all right we have our setter set up now let's work on the Getters let's assign some legitimate values for the first name SpongeBob last name SquarePants age 30 we don't have those errors anymore that means they're set but those properties aren't readable that's why we need Getters let's get the first name get first name return this private first name there's SpongeBob his first name get last name return this private last name there's his last name let's create a getter for a full name too let's console.log a full name even though we have no property for that that's undefined we'll use a getter to mimic a full name property by just combining the first name and the last name properties get full name return I'm going to use some string catnation this private first name plus aace character this private last name and there's his full name SpongeBob SquarePants and the age get age return this private age and SpongeBob is 30 all right everybody those are Getters and Setters Getters are special methods that make a property readable Setters are special methods that make a property writable by using a combination of both we can validate and modify a value when reading or writing a property and well everybody those are Getters and Setters in JavaScript
