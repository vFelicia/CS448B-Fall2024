With timestamps:

00:00 - hey welcome back so today I gotta
00:02 - explain functions in JavaScript a
00:04 - function is a section of reusable code
00:07 - you declare that code once and you can
00:09 - use it whenever you want all you have to
00:11 - do is call the function to execute that
00:13 - code here's an example we'll create a
00:16 - function to sing Happy Birthday whenever
00:18 - we call this function it's going to sing
00:20 - Happy Birthday so to declare a function
00:22 - you type
00:24 - function a unique function name let's
00:27 - name our function happy birthday because
00:30 - it's well the happy birthday function
00:33 - then you add a set of parentheses then
00:34 - you add a set of curly braces any code
00:37 - we write between this set of curly
00:38 - braces we can reuse whenever we want
00:41 - so what do we want to do exactly with
00:43 - this function
00:44 - I'll create the lyrics to my own Happy
00:46 - Birthday song
00:48 - console.log
00:52 - happy
00:54 - birthday to you let's repeat that again
00:59 - happy birthday dear you
01:02 - happy birthday to you
01:05 - trust me I'm going somewhere with this
01:06 - so we have a function when we run the
01:09 - program it currently doesn't do anything
01:11 - to execute this code within the function
01:13 - we have to call the function by its name
01:16 - happy birthday then add a set of
01:19 - parentheses
01:20 - so now we should execute this code yep
01:22 - happy birthday to you happy birthday to
01:24 - you happy birthday dear you happy
01:26 - birthday to you
01:27 - so to call a function you type the
01:29 - function name then you add a set of
01:30 - parentheses I like to think of the
01:33 - parentheses as two telephones talking to
01:35 - each other that's how I remember it so
01:38 - if I were to call this function again
01:39 - what do you think is going to happen
01:42 - well we're going to execute this
01:44 - function twice
01:45 - three times
01:47 - we'll execute it three times as many
01:49 - times as I want in fact that's what a
01:51 - function is it's a section of reusable
01:54 - code reuse it whenever you want you just
01:56 - have to call it you can send a function
01:59 - some values or variables let's change
02:01 - our happy birthday function I will turn
02:04 - this line into a template literal
02:06 - let's replace U with the placeholder
02:09 - then we'll add a username
02:12 - I'll add one more line
02:17 - we'll use a template literal
02:20 - you are insert a placeholder
02:23 - age
02:25 - ears old
02:28 - so when I run this program
02:30 - we have an uncaught reference error
02:32 - username is not defined at happy
02:35 - birthday so our happy birthday function
02:37 - doesn't know what our username is or the
02:40 - age so we can send some information to
02:43 - the function when we call it so within
02:46 - the set of parentheses what would we
02:48 - like to send this function let's send
02:50 - our name
02:54 - so whatever values you place within the
02:56 - function be sure to comma separate them
02:58 - so why don't you go ahead and send the
03:01 - happy birthday function a name and an
03:04 - age
03:05 - but there's one step missing these are
03:07 - known as arguments their data that you
03:10 - send a function but you need a matching
03:13 - set of parameters within the parentheses
03:15 - of the Declaration in a way we can
03:18 - Define some temporary variables and
03:21 - they're all comma separated we will
03:23 - Define a username parameter as well as
03:26 - age now this function should work
03:28 - properly happy birthday dear bro code
03:31 - you are 25 years old
03:33 - so these are parameters and what you
03:36 - send the function are arguments let's
03:39 - call the function but send different
03:41 - information
03:43 - happy birthday
03:45 - uh how about SpongeBob
03:48 - will be I don't know how old he is
03:50 - according to SpongeBob lore but let's
03:52 - say he's 30 years old
03:54 - happy birthday dear SpongeBob you are 30
03:57 - years old
03:59 - how about Patrick this time it's his
04:01 - birthday
04:02 - everybody gets a birthday
04:06 - Patrick will be 37.
04:10 - happy birthday dear Patrick you are 37
04:13 - years old
04:14 - so that's a benefit of passing arguments
04:16 - to a function when the function receives
04:18 - this data it can do something with it
04:20 - now the order of the parameters does
04:23 - matter if I were to switch age
04:26 - and username here's what happens
04:30 - happy birthday dear37 you are Patrick
04:33 - years old
04:34 - with the arguments that you're passing
04:36 - to your function you'll want to be sure
04:38 - that the parameters match up
04:40 - all right now I'm gonna cover the return
04:42 - keyword we'll create a few other
04:44 - function examples
04:45 - we'll create a function to add two
04:47 - numbers function add
04:50 - then we'll need two arguments which we
04:53 - will name X and Y
04:56 - so when we invoke this function I would
04:58 - like to add X and Y together
05:00 - I'll create a temporary variable named
05:03 - result just to store the result
05:06 - equals X Plus y
05:10 - so I'm going to add two numbers together
05:13 - let's add two and three together and
05:16 - let's see what happens
05:18 - well nothing appears to happen well we
05:21 - can send some data back to the place in
05:24 - which we call a function
05:25 - but we need to use this return keyword
05:27 - let's return the result
05:30 - so two plus three should be 5. after
05:33 - this function resolves think of this
05:36 - function becoming the value 5. so we'll
05:39 - probably want to do something with that
05:40 - value
05:42 - I'll store that within a variable
05:45 - let answer
05:47 - equal add two and three
05:51 - then let's console.log the answer
05:55 - which should be five
05:57 - when you return something from a
05:59 - function after you resolve the function
06:01 - think of it as becoming whatever is
06:04 - returned in this case it's our result
06:07 - or otherwise I can place this function
06:10 - within console.log if we don't plan to
06:13 - store it at all
06:16 - so add two and three then display the
06:19 - result which is five
06:21 - there is a shortcut too you don't
06:22 - necessarily need to declare a variable
06:24 - within this function
06:26 - we could shorten this to
06:28 - return X Plus y
06:32 - that is also valid so that should return
06:34 - 5.
06:35 - okay let's create a subtract function
06:39 - function subtract
06:43 - will return x minus y
06:47 - well we need a matching set of
06:49 - parameters because I forgot that
06:51 - okay let's see what happens when we
06:53 - subtract three from two that'll give us
06:56 - negative one let's multiply
06:59 - function
07:01 - multiply
07:03 - we'll multiply X and Y together
07:06 - return x times y
07:09 - we will multiply two times three which
07:12 - is six
07:13 - divide
07:19 - we need parameters X and Y
07:22 - then return x divided by y
07:25 - then we will invoke the divide function
07:27 - pass in two and three and the result is
07:30 - 0.66 repeating
07:33 - let's go over a more complex example
07:35 - we'll create a function to determine if
07:37 - a number is even or odd
07:41 - here's the function
07:44 - function is even
07:47 - we have one parameter
07:49 - a number so when we invoke the function
07:52 - we'll have to pass in a number
07:54 - so when we receive a number how do we
07:56 - check to see if this number is even
07:57 - here's one solution
08:00 - we'll use an if statement
08:03 - if our number
08:06 - modulus 2. modulus gives you the
08:09 - remainder of any division
08:11 - if this number divides by two evenly if
08:14 - this is equal to zero and yes I'm using
08:18 - the strict equality operator I'm trying
08:19 - to use that more often if our number is
08:22 - divisible by 2 then let's return
08:26 - the Boolean value true
08:29 - else will return
08:31 - false okay
08:34 - let's console.log
08:37 - let's check to see if a number is even
08:39 - let's start with 10 is 10 even
08:43 - that is true
08:44 - how about 11. that is false 12 12 is
08:48 - even
08:50 - so that's kind of cool
08:51 - if you would like a shortcut for this
08:53 - you can use the trinary operator that
08:55 - would look something like this
08:57 - we are going to return
08:59 - then a condition what are we checking is
09:02 - our number
09:03 - modulus 2.
09:06 - strictly equal to zero question mark so
09:09 - that is the ternary operator the
09:11 - question mark
09:13 - if it is true then we will return a
09:16 - Boolean value of true colon false if
09:19 - it's false
09:21 - is 12 even that is true
09:24 - is 13 Even no it's not it's odd how
09:27 - about 14. that is true
09:30 - all right last example I think we're
09:32 - probably getting the hang of this now
09:34 - we'll create a function to see if an
09:36 - email is valid
09:38 - function
09:40 - is valid email
09:44 - what kind of information are we going to
09:45 - send we'll set that up as a parameter
09:48 - we will need an email
09:50 - will invoke the is valid email function
09:54 - and pass in an email why don't you type
09:55 - in your email I'll just make one up bro
09:58 - at fake.com
10:01 - so when we invoke this function this
10:03 - string of text will become our email
10:06 - we'll check to see if our email contains
10:09 - the at character
10:12 - we'll use an if statement
10:14 - if email and there's a built-in method
10:17 - for this the includes method
10:21 - if our email
10:23 - includes
10:25 - the at character
10:27 - then we will return true that is a valid
10:31 - email they have the at character
10:34 - else we will return
10:36 - false
10:38 - is my email valid
10:40 - that is true
10:42 - let's remove the at character
10:44 - brofick.com maybe it's a website or
10:47 - something
10:48 - that is false
10:50 - let's try another email
10:52 - again we're going to invoke the function
10:54 - is valid email
10:57 - Elon Musk
11:00 - dot com don't actually go there I don't
11:03 - know what's gonna pop up uh that is not
11:05 - a valid email
11:07 - all right how about
11:10 - Zuckerberg
11:12 - at meta.com
11:15 - that is a valid email it contains a net
11:17 - character
11:18 - and for something like this if we're
11:20 - returning either true or false we can
11:22 - use the Trenary operator
11:25 - return
11:27 - then our condition is we're going to
11:28 - check if our email includes the at
11:31 - character
11:34 - then add the ternary operator
11:37 - if this is true return true
11:40 - else we will return false so these
11:43 - should be the same which they are
11:45 - all right everybody so that's an
11:47 - introduction to functions it's a section
11:49 - of reusable code you declare some code
11:52 - once and use it whenever you want you
11:54 - call the function to execute that code
11:56 - if you need to send your function some
11:58 - data you'll need a matching set of
12:00 - arguments and parameters and you can
12:03 - return something too with the return
12:04 - keyword we'll have more practice with
12:06 - this in the future don't worry and that
12:08 - is an introduction to functions in
12:10 - JavaScript

Cleaned transcript:

hey welcome back so today I gotta explain functions in JavaScript a function is a section of reusable code you declare that code once and you can use it whenever you want all you have to do is call the function to execute that code here's an example we'll create a function to sing Happy Birthday whenever we call this function it's going to sing Happy Birthday so to declare a function you type function a unique function name let's name our function happy birthday because it's well the happy birthday function then you add a set of parentheses then you add a set of curly braces any code we write between this set of curly braces we can reuse whenever we want so what do we want to do exactly with this function I'll create the lyrics to my own Happy Birthday song console.log happy birthday to you let's repeat that again happy birthday dear you happy birthday to you trust me I'm going somewhere with this so we have a function when we run the program it currently doesn't do anything to execute this code within the function we have to call the function by its name happy birthday then add a set of parentheses so now we should execute this code yep happy birthday to you happy birthday to you happy birthday dear you happy birthday to you so to call a function you type the function name then you add a set of parentheses I like to think of the parentheses as two telephones talking to each other that's how I remember it so if I were to call this function again what do you think is going to happen well we're going to execute this function twice three times we'll execute it three times as many times as I want in fact that's what a function is it's a section of reusable code reuse it whenever you want you just have to call it you can send a function some values or variables let's change our happy birthday function I will turn this line into a template literal let's replace U with the placeholder then we'll add a username I'll add one more line we'll use a template literal you are insert a placeholder age ears old so when I run this program we have an uncaught reference error username is not defined at happy birthday so our happy birthday function doesn't know what our username is or the age so we can send some information to the function when we call it so within the set of parentheses what would we like to send this function let's send our name so whatever values you place within the function be sure to comma separate them so why don't you go ahead and send the happy birthday function a name and an age but there's one step missing these are known as arguments their data that you send a function but you need a matching set of parameters within the parentheses of the Declaration in a way we can Define some temporary variables and they're all comma separated we will Define a username parameter as well as age now this function should work properly happy birthday dear bro code you are 25 years old so these are parameters and what you send the function are arguments let's call the function but send different information happy birthday uh how about SpongeBob will be I don't know how old he is according to SpongeBob lore but let's say he's 30 years old happy birthday dear SpongeBob you are 30 years old how about Patrick this time it's his birthday everybody gets a birthday Patrick will be 37. happy birthday dear Patrick you are 37 years old so that's a benefit of passing arguments to a function when the function receives this data it can do something with it now the order of the parameters does matter if I were to switch age and username here's what happens happy birthday dear37 you are Patrick years old with the arguments that you're passing to your function you'll want to be sure that the parameters match up all right now I'm gonna cover the return keyword we'll create a few other function examples we'll create a function to add two numbers function add then we'll need two arguments which we will name X and Y so when we invoke this function I would like to add X and Y together I'll create a temporary variable named result just to store the result equals X Plus y so I'm going to add two numbers together let's add two and three together and let's see what happens well nothing appears to happen well we can send some data back to the place in which we call a function but we need to use this return keyword let's return the result so two plus three should be 5. after this function resolves think of this function becoming the value 5. so we'll probably want to do something with that value I'll store that within a variable let answer equal add two and three then let's console.log the answer which should be five when you return something from a function after you resolve the function think of it as becoming whatever is returned in this case it's our result or otherwise I can place this function within console.log if we don't plan to store it at all so add two and three then display the result which is five there is a shortcut too you don't necessarily need to declare a variable within this function we could shorten this to return X Plus y that is also valid so that should return 5. okay let's create a subtract function function subtract will return x minus y well we need a matching set of parameters because I forgot that okay let's see what happens when we subtract three from two that'll give us negative one let's multiply function multiply we'll multiply X and Y together return x times y we will multiply two times three which is six divide we need parameters X and Y then return x divided by y then we will invoke the divide function pass in two and three and the result is 0.66 repeating let's go over a more complex example we'll create a function to determine if a number is even or odd here's the function function is even we have one parameter a number so when we invoke the function we'll have to pass in a number so when we receive a number how do we check to see if this number is even here's one solution we'll use an if statement if our number modulus 2. modulus gives you the remainder of any division if this number divides by two evenly if this is equal to zero and yes I'm using the strict equality operator I'm trying to use that more often if our number is divisible by 2 then let's return the Boolean value true else will return false okay let's console.log let's check to see if a number is even let's start with 10 is 10 even that is true how about 11. that is false 12 12 is even so that's kind of cool if you would like a shortcut for this you can use the trinary operator that would look something like this we are going to return then a condition what are we checking is our number modulus 2. strictly equal to zero question mark so that is the ternary operator the question mark if it is true then we will return a Boolean value of true colon false if it's false is 12 even that is true is 13 Even no it's not it's odd how about 14. that is true all right last example I think we're probably getting the hang of this now we'll create a function to see if an email is valid function is valid email what kind of information are we going to send we'll set that up as a parameter we will need an email will invoke the is valid email function and pass in an email why don't you type in your email I'll just make one up bro at fake.com so when we invoke this function this string of text will become our email we'll check to see if our email contains the at character we'll use an if statement if email and there's a builtin method for this the includes method if our email includes the at character then we will return true that is a valid email they have the at character else we will return false is my email valid that is true let's remove the at character brofick.com maybe it's a website or something that is false let's try another email again we're going to invoke the function is valid email Elon Musk dot com don't actually go there I don't know what's gonna pop up uh that is not a valid email all right how about Zuckerberg at meta.com that is a valid email it contains a net character and for something like this if we're returning either true or false we can use the Trenary operator return then our condition is we're going to check if our email includes the at character then add the ternary operator if this is true return true else we will return false so these should be the same which they are all right everybody so that's an introduction to functions it's a section of reusable code you declare some code once and use it whenever you want you call the function to execute that code if you need to send your function some data you'll need a matching set of arguments and parameters and you can return something too with the return keyword we'll have more practice with this in the future don't worry and that is an introduction to functions in JavaScript
