With timestamps:

00:02 - all right let's get started everybody in
00:04 - this video i'm going to show you how we
00:05 - can accept some user input in c plus
00:08 - plus we're familiar with c out followed
00:10 - by the insertion operator which is two
00:13 - left angle brackets well to accept some
00:15 - input we would type c in for character
00:18 - input followed by the extraction
00:20 - operator which is two right angle
00:22 - brackets here's a demonstration let's
00:24 - ask a user for their name i'll create a
00:27 - string variable
00:29 - string
00:30 - the name will be well name then i'll
00:33 - create a prompt which will ask the user
00:35 - what their name is standard
00:37 - output
00:38 - insertion operator
00:41 - what's your name
00:44 - then to accept some user input we would
00:46 - type
00:48 - standard
00:49 - cn for character input
00:52 - extraction operator then where would we
00:54 - like to store the user input let's store
00:56 - it within our variable name at the end
00:58 - of our program let's display what the
01:00 - user's name is
01:01 - standard output
01:04 - insertion operator
01:07 - hello
01:10 - name okay we're gonna have one problem
01:12 - though if we're using vs code as our
01:14 - text editor we need to begin using the
01:16 - terminal tab previously we've been using
01:18 - output so i can't actually type in
01:19 - anything to this because it's well for
01:21 - output if you're using vs code this is
01:23 - what we'll need to do if you're not you
01:25 - can skip this step we're going to go to
01:27 - file
01:28 - preferences
01:30 - settings
01:31 - look up code runner
01:34 - then we are looking for run in terminal
01:37 - which is right about here
01:41 - check that
01:42 - close this tab let's stop this from
01:44 - running and we'll run it again okay here
01:47 - we go
01:48 - what's your name i'll type in my first
01:50 - name hit enter
01:52 - hello bro or whatever your first name
01:54 - was this time let's ask a user for what
01:57 - their age is i'll store this within a
01:59 - variable named age
02:02 - int age
02:04 - standard
02:05 - output
02:08 - your age
02:12 - standard
02:14 - input
02:15 - extraction operator
02:17 - age
02:20 - standard
02:21 - output
02:22 - insertion operator
02:24 - you
02:25 - are
02:27 - age
02:29 - years old
02:32 - and i think we'll need some new line
02:34 - characters right about here just one
02:38 - okay this should work let's try it
02:42 - what's your name i'll type in my first
02:43 - name hit enter what's your age i'll make
02:46 - up an age i like to think that i'm 21
02:48 - still hit enter
02:50 - hello bro you are 21 years old so that's
02:53 - how to accept some user input you can
02:55 - use cn for character input uh but
02:58 - there's just one problem though if you
03:00 - type in a string that has spaces well
03:03 - once we hit a space we stop reading that
03:05 - string this time let's ask a user to
03:07 - type in their full name
03:10 - okay type in your first name and your
03:11 - last name
03:13 - hit enter what's your full name bro code
03:17 - what's your age hello bro you are zero
03:19 - years old if we need to read a string
03:21 - that could contain spaces there's a
03:24 - function that we can use to help us with
03:26 - that that is the get line function
03:30 - standard
03:31 - get line add a set of parentheses within
03:34 - the parentheses we will type
03:36 - standard
03:37 - c in then comma our variable
03:41 - name now we should be able to type in a
03:43 - string including any spaces
03:46 - what's your full name type in your own
03:47 - first name and last name
03:49 - hit enter what's your age i'll type in
03:51 - 21
03:52 - hello bro code you are 21 years old if
03:55 - you need to accept a string that
03:57 - includes any white spaces you're better
03:59 - off using the getline function and if
04:02 - you forget i'll post this in the
04:03 - comments section so you can always take
04:05 - a look at it if you don't remember okay
04:06 - there's just one issue with this though
04:08 - i'm going to move the second question
04:10 - above the first
04:14 - let's take a look to see what happens
04:16 - what's your age 21 what's your full name
04:19 - hello you are 21 years old here's the
04:21 - issue if we accept some user input with
04:24 - cn followed by get line well in our
04:27 - input buffer there's a new line
04:29 - character and we don't pick up that
04:31 - newline character when we reach the
04:33 - getline function it accepts the newline
04:35 - character that's still within the buffer
04:37 - so to prevent that from happening
04:39 - there's one change that we can make to
04:41 - the getline function
04:42 - after cn add this
04:45 - extraction operator
04:47 - standard ws for any white spaces this
04:51 - portion will eliminate any newline
04:52 - characters or any white spaces before
04:55 - any user input so let's try this again
04:58 - what's your age i'll type in 21 type in
05:00 - your full name
05:02 - and there we go hello bro code you are
05:04 - 21 years old so yeah everybody that's
05:06 - how to accept some user input basically
05:09 - you can just use cn followed by the
05:11 - extraction operator but if you need a
05:13 - string that could include spaces i
05:16 - recommend using the getline function so
05:18 - yeah that's how to accept some user
05:20 - input in c plus if you would like a copy
05:22 - of all this code i'll post this in the
05:24 - comments section down below and well
05:26 - yeah that's how to accept some user
05:28 - input in c plus plus

Cleaned transcript:

all right let's get started everybody in this video i'm going to show you how we can accept some user input in c plus plus we're familiar with c out followed by the insertion operator which is two left angle brackets well to accept some input we would type c in for character input followed by the extraction operator which is two right angle brackets here's a demonstration let's ask a user for their name i'll create a string variable string the name will be well name then i'll create a prompt which will ask the user what their name is standard output insertion operator what's your name then to accept some user input we would type standard cn for character input extraction operator then where would we like to store the user input let's store it within our variable name at the end of our program let's display what the user's name is standard output insertion operator hello name okay we're gonna have one problem though if we're using vs code as our text editor we need to begin using the terminal tab previously we've been using output so i can't actually type in anything to this because it's well for output if you're using vs code this is what we'll need to do if you're not you can skip this step we're going to go to file preferences settings look up code runner then we are looking for run in terminal which is right about here check that close this tab let's stop this from running and we'll run it again okay here we go what's your name i'll type in my first name hit enter hello bro or whatever your first name was this time let's ask a user for what their age is i'll store this within a variable named age int age standard output your age standard input extraction operator age standard output insertion operator you are age years old and i think we'll need some new line characters right about here just one okay this should work let's try it what's your name i'll type in my first name hit enter what's your age i'll make up an age i like to think that i'm 21 still hit enter hello bro you are 21 years old so that's how to accept some user input you can use cn for character input uh but there's just one problem though if you type in a string that has spaces well once we hit a space we stop reading that string this time let's ask a user to type in their full name okay type in your first name and your last name hit enter what's your full name bro code what's your age hello bro you are zero years old if we need to read a string that could contain spaces there's a function that we can use to help us with that that is the get line function standard get line add a set of parentheses within the parentheses we will type standard c in then comma our variable name now we should be able to type in a string including any spaces what's your full name type in your own first name and last name hit enter what's your age i'll type in 21 hello bro code you are 21 years old if you need to accept a string that includes any white spaces you're better off using the getline function and if you forget i'll post this in the comments section so you can always take a look at it if you don't remember okay there's just one issue with this though i'm going to move the second question above the first let's take a look to see what happens what's your age 21 what's your full name hello you are 21 years old here's the issue if we accept some user input with cn followed by get line well in our input buffer there's a new line character and we don't pick up that newline character when we reach the getline function it accepts the newline character that's still within the buffer so to prevent that from happening there's one change that we can make to the getline function after cn add this extraction operator standard ws for any white spaces this portion will eliminate any newline characters or any white spaces before any user input so let's try this again what's your age i'll type in 21 type in your full name and there we go hello bro code you are 21 years old so yeah everybody that's how to accept some user input basically you can just use cn followed by the extraction operator but if you need a string that could include spaces i recommend using the getline function so yeah that's how to accept some user input in c plus if you would like a copy of all this code i'll post this in the comments section down below and well yeah that's how to accept some user input in c plus plus
