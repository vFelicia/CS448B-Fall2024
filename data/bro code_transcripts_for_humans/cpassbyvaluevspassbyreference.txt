With timestamps:

00:02 - all right everybody so i'm going to
00:03 - explain the differences between pass by
00:05 - value and pass by reference in this
00:08 - example we'll swap two variables suppose
00:11 - we have two imaginary cups
00:14 - i'll name the first cup x x will contain
00:17 - kool-aid
00:20 - then we have
00:21 - cup y
00:23 - which contains water
00:25 - i need to swap these two values
00:27 - we'll need the help of a temporary
00:29 - variable
00:32 - string at temp
00:34 - to swap two variables we would assign a
00:36 - temp equal to x
00:39 - x equals y
00:41 - y equals temp let's display these
00:44 - variables standard output
00:48 - x
00:51 - the variable x
00:53 - i'll add a new line
00:55 - let's copy this paste it
01:01 - y
01:02 - the variable y this should work
01:05 - x now contains water y contains kool-aid
01:08 - now check this out what if we create a
01:10 - function to swap two variables for us
01:13 - the return type will be void
01:15 - i'll name this function swap
01:18 - there will be two parameters
01:21 - string x
01:24 - string y
01:26 - let's copy this section of code
01:29 - delete it
01:30 - then paste it within the swap function
01:33 - then you'll need a function declaration
01:35 - at the top of your program then we will
01:37 - invoke this function
01:39 - swap
01:40 - pass our arguments
01:42 - x and y
01:44 - let's see what happens
01:48 - okay what the heck x still contains
01:50 - kool-aid y still contains water these
01:53 - values weren't switched within my
01:55 - variables x and y even though we invoked
01:57 - this function so why didn't it work well
01:59 - that's because normally when we pass a
02:01 - variable to a function we're passing by
02:04 - value when we invoke this function we're
02:07 - creating copies of the original values
02:09 - what we have now are two copies of the
02:12 - variable x and y and all we're doing is
02:14 - switching the two copies and not the
02:17 - original values so that's passed by
02:19 - value we're creating copies of the
02:21 - arguments if i need to change the
02:23 - original values of these variables i
02:26 - could instead pass by reference a
02:28 - reference as in a memory address an
02:30 - address in your computer's memory where
02:32 - a value is located i will prefix the
02:35 - address of operator which is an
02:37 - ampersand to these parameter names
02:40 - then add that to your function
02:41 - declaration as well now let's see what
02:43 - happens
02:45 - yeah those two variables were switched x
02:47 - contains water y contains kool-aid when
02:50 - we passed by value we created copies of
02:52 - x and y with the parameters when we use
02:55 - the addressof operator we're passing
02:57 - memory addresses to where the original x
03:00 - and y variables are located and then
03:02 - swapping the values just to reinforce
03:04 - this idea let's revert to passing by
03:06 - value i'm going to display the address
03:10 - of x and y
03:11 - then within our swap function
03:13 - let's get rid of this code
03:15 - then i will also display the addresses
03:17 - of x and y
03:20 - see we have four different addresses our
03:22 - original x variable has a different
03:25 - memory address than the one that's
03:26 - within the function
03:28 - same thing goes with y these two
03:30 - addresses are different we have two x
03:32 - variables and two y variables originally
03:35 - within that swap function we were
03:37 - switching the values of the x and y
03:39 - copies if we instead pass by reference
03:43 - let's use that address of operator again
03:47 - well now x and y are referring to the
03:49 - same place they have the same memory
03:51 - addresses that's why the swap function
03:53 - worked when we passed by reference in
03:55 - place of pass by value so that's the
03:57 - main difference between pass by value
03:58 - and pass by reference you should use
04:00 - pass by reference as often as possible
04:03 - unless you have a reason to pass by
04:04 - value if you would like a copy of this
04:06 - code i'll post this in the comment
04:08 - section down below and well yeah that's
04:10 - the main difference between pass by
04:11 - value and pass by reference in c plus

Cleaned transcript:

all right everybody so i'm going to explain the differences between pass by value and pass by reference in this example we'll swap two variables suppose we have two imaginary cups i'll name the first cup x x will contain koolaid then we have cup y which contains water i need to swap these two values we'll need the help of a temporary variable string at temp to swap two variables we would assign a temp equal to x x equals y y equals temp let's display these variables standard output x the variable x i'll add a new line let's copy this paste it y the variable y this should work x now contains water y contains koolaid now check this out what if we create a function to swap two variables for us the return type will be void i'll name this function swap there will be two parameters string x string y let's copy this section of code delete it then paste it within the swap function then you'll need a function declaration at the top of your program then we will invoke this function swap pass our arguments x and y let's see what happens okay what the heck x still contains koolaid y still contains water these values weren't switched within my variables x and y even though we invoked this function so why didn't it work well that's because normally when we pass a variable to a function we're passing by value when we invoke this function we're creating copies of the original values what we have now are two copies of the variable x and y and all we're doing is switching the two copies and not the original values so that's passed by value we're creating copies of the arguments if i need to change the original values of these variables i could instead pass by reference a reference as in a memory address an address in your computer's memory where a value is located i will prefix the address of operator which is an ampersand to these parameter names then add that to your function declaration as well now let's see what happens yeah those two variables were switched x contains water y contains koolaid when we passed by value we created copies of x and y with the parameters when we use the addressof operator we're passing memory addresses to where the original x and y variables are located and then swapping the values just to reinforce this idea let's revert to passing by value i'm going to display the address of x and y then within our swap function let's get rid of this code then i will also display the addresses of x and y see we have four different addresses our original x variable has a different memory address than the one that's within the function same thing goes with y these two addresses are different we have two x variables and two y variables originally within that swap function we were switching the values of the x and y copies if we instead pass by reference let's use that address of operator again well now x and y are referring to the same place they have the same memory addresses that's why the swap function worked when we passed by reference in place of pass by value so that's the main difference between pass by value and pass by reference you should use pass by reference as often as possible unless you have a reason to pass by value if you would like a copy of this code i'll post this in the comment section down below and well yeah that's the main difference between pass by value and pass by reference in c plus
