With timestamps:

00:00 - hey yeah it's you bro hope you're doing
00:02 - well and in this video i'm going to
00:03 - explain the basics of pointers in c so
00:07 - sit back relax and enjoy the show
00:12 - if you wouldn't mind please like comment
00:14 - and subscribe one like equals one prayer
00:17 - for the youtube algorithm
00:19 - oh yeah we've finally made it to
00:21 - pointers we're only about 40 topics in a
00:24 - pointer is a variable like reference
00:27 - that holds a memory address as a value
00:30 - to another variable array etc some tasks
00:33 - are performed more easily with pointers
00:36 - and here's a comprehensive list of a few
00:38 - of the benefits in this video we're
00:40 - going to more or less focus on building
00:42 - a solid foundation with pointers and
00:44 - understanding how they work so let's say
00:46 - we have a variable int age and i'll give
00:48 - this some value a variable has a value
00:52 - and an address and let's display the
00:54 - value and the address of this variable
00:57 - using two print statements
00:59 - so first i'm going to display the
01:01 - address of this variable
01:04 - address of age then i will use the p
01:07 - format specifier to display an address
01:10 - in hexadecimal and we are displaying the
01:12 - address of age and ampersand is the
01:15 - address of operator address of age and i
01:19 - would also like to display the value of
01:21 - age
01:22 - value of age
01:25 - and this is an integer
01:26 - and we will display age
01:30 - so variables have a value and an address
01:33 - this is the address of this variable and
01:36 - the value at this address
01:39 - as you know there's tons of different
01:40 - things we can do with a value of a
01:42 - variable but there are things that we
01:44 - can do with an address as well so we can
01:46 - actually store this address within a
01:48 - separate variable a variable like
01:51 - reference and that is called a pointer
01:53 - so to create a pointer we will make sure
01:55 - these are of the same data type as the
01:57 - variable we're pointing to age is an
02:00 - integer so we will declare this pointer
02:02 - of the integer data type and the next
02:04 - step to declare a pointer is that we
02:06 - will use an asterisk this is the in
02:08 - direction operator and a common naming
02:10 - convention for pointers is that you type
02:13 - lowercase p the name of the variable
02:15 - you're going to point to but make the
02:17 - first letter uppercase and i'm going to
02:20 - set this equal to
02:22 - the address of age
02:25 - so the address of age and the value at
02:28 - this variable are the same and let's
02:31 - test that theory
02:32 - so this time i'm going to display
02:35 - the address of age and the value of ph
02:40 - and this will display an address so
02:42 - change the format specifier from d to p
02:46 - and i'm going to turn this line into a
02:48 - comment for now okay so these addresses
02:51 - should both be the same the address of
02:54 - age as well as the value stored within
02:57 - ph
02:58 - so our pointer has its own address but
03:00 - the value stored within it is an address
03:03 - and we can access the value at this
03:05 - address by using the indirection
03:07 - operator so this time i'm going to print
03:09 - the value of age
03:11 - and the value
03:13 - at
03:14 - stored
03:16 - address and to dereference a pointer you
03:20 - will type the pointer name ph
03:23 - appreciated with the indirection
03:25 - operator
03:26 - as my own personal nickname for the
03:28 - indirection operator i call it the value
03:30 - at address operator that's not any
03:33 - official name that's just how i think
03:35 - about it so we're extracting a value at
03:38 - the given address within this pointer so
03:40 - if i display the value of age and the
03:44 - value at the stored address using the
03:47 - indirection operator well both of these
03:49 - are going to be the same
03:51 - so we have 21 stored within our edge
03:54 - and after dereferencing this pointer
03:56 - we're extracting the value at this given
03:59 - address
04:00 - so you use the indirection operator when
04:02 - you declare a pointer as well as when
04:05 - you want to access a value at the stored
04:08 - address
04:09 - so with the data types of the pointer
04:11 - you'll want to make sure they're
04:12 - consistent c is a strongly typed
04:14 - language so if i change the data type of
04:17 - my pointer to char
04:19 - using my compiler i'll receive a warning
04:21 - initialization of char from incompatible
04:25 - pointer type int now the actual data
04:27 - type of a pointer is the same they use
04:30 - eight bytes to store an address so i'm
04:32 - going to print the size of our variable
04:35 - as well as our pointer
04:37 - so i'll change this data type back to
04:39 - what it was originally and this time i'm
04:41 - going to print the size of our age
04:43 - variable as well as the size of our
04:45 - pointer
04:46 - size of age
04:49 - and we're displaying an integer and this
04:51 - will be in bytes
04:53 - size of age
04:57 - size of pointer age
05:02 - and then i'm gonna display a new line
05:04 - okay so the size of our age variable is
05:06 - four bytes it's an integer integers use
05:09 - four bytes so even though we declared
05:11 - our pointer as an integer
05:13 - the actual size of our pointer is going
05:16 - to be eight bytes that's enough to store
05:18 - a hexadecimal address
05:20 - so just as good practice since c is a
05:23 - strongly typed language you'll want to
05:25 - be sure that the data type of your
05:26 - pointer is consistent with the variable
05:28 - that it's pointing to
05:30 - now here's one thing that we can do with
05:31 - pointers we can pass a pointer as an
05:34 - argument to a function so outside of my
05:37 - main function i'm going to declare a
05:38 - function
05:40 - void
05:41 - let's say print
05:42 - age
05:43 - first we'll do this with passing and
05:45 - integer so int age
05:48 - and i will display the value of age you
05:52 - are
05:54 - age years
05:57 - old
05:58 - and i will display my age variable
06:01 - then at the end we will pass in our
06:03 - variable
06:06 - print edge and i will pass in age
06:09 - for now i'm just going to turn all of
06:10 - these into comments
06:12 - okay so you know this works
06:15 - you are 21 years old
06:17 - you could also pass in a pointer too so
06:20 - i'm going to this time pass in pointer
06:23 - age
06:24 - and we need to change the parameter from
06:27 - an integer to a pointer so precede the
06:30 - parameter name with the indirection
06:33 - operator and i'll rename this parameter
06:35 - as ph
06:37 - in order to access the value of the
06:39 - address stored within my pointer i need
06:42 - to de-reference
06:45 - so i will use the indirection operator
06:47 - then type my pointer name ph
06:50 - and this will do the same thing as
06:52 - before
06:53 - so yeah those are pointers oh and before
06:56 - i forget you can declare and initialize
06:58 - a pointer in two steps
07:00 - but it would be good practice if you're
07:02 - declaring a pointer to assign a value of
07:05 - null
07:06 - since we already declared this pointer
07:07 - we do not need to use this indirection
07:09 - operator again when assigning a value so
07:11 - p
07:12 - age equals the address of age
07:16 - so it's considered good practice to
07:18 - assign null if you're declaring a
07:21 - pointer and not yet assigning a value so
07:24 - yeah that's basically a pointer it's a
07:27 - variable like reference that has a
07:29 - memory address as value to another
07:32 - variable array etc some tasks are
07:36 - performed more easily with pointers and
07:39 - to declare a pointer you use the
07:41 - indirection operator and if you need to
07:43 - access a value stored within a pointer
07:46 - you type the pointer name preceded with
07:49 - the indirection operator so yeah that is
07:51 - a quick intro to pointers if you found
07:54 - this video helpful please give this
07:55 - video a thumbs up leave a random comment
07:57 - down below and subscribe if you'd like
07:59 - to become a fellow bro

Cleaned transcript:

hey yeah it's you bro hope you're doing well and in this video i'm going to explain the basics of pointers in c so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm oh yeah we've finally made it to pointers we're only about 40 topics in a pointer is a variable like reference that holds a memory address as a value to another variable array etc some tasks are performed more easily with pointers and here's a comprehensive list of a few of the benefits in this video we're going to more or less focus on building a solid foundation with pointers and understanding how they work so let's say we have a variable int age and i'll give this some value a variable has a value and an address and let's display the value and the address of this variable using two print statements so first i'm going to display the address of this variable address of age then i will use the p format specifier to display an address in hexadecimal and we are displaying the address of age and ampersand is the address of operator address of age and i would also like to display the value of age value of age and this is an integer and we will display age so variables have a value and an address this is the address of this variable and the value at this address as you know there's tons of different things we can do with a value of a variable but there are things that we can do with an address as well so we can actually store this address within a separate variable a variable like reference and that is called a pointer so to create a pointer we will make sure these are of the same data type as the variable we're pointing to age is an integer so we will declare this pointer of the integer data type and the next step to declare a pointer is that we will use an asterisk this is the in direction operator and a common naming convention for pointers is that you type lowercase p the name of the variable you're going to point to but make the first letter uppercase and i'm going to set this equal to the address of age so the address of age and the value at this variable are the same and let's test that theory so this time i'm going to display the address of age and the value of ph and this will display an address so change the format specifier from d to p and i'm going to turn this line into a comment for now okay so these addresses should both be the same the address of age as well as the value stored within ph so our pointer has its own address but the value stored within it is an address and we can access the value at this address by using the indirection operator so this time i'm going to print the value of age and the value at stored address and to dereference a pointer you will type the pointer name ph appreciated with the indirection operator as my own personal nickname for the indirection operator i call it the value at address operator that's not any official name that's just how i think about it so we're extracting a value at the given address within this pointer so if i display the value of age and the value at the stored address using the indirection operator well both of these are going to be the same so we have 21 stored within our edge and after dereferencing this pointer we're extracting the value at this given address so you use the indirection operator when you declare a pointer as well as when you want to access a value at the stored address so with the data types of the pointer you'll want to make sure they're consistent c is a strongly typed language so if i change the data type of my pointer to char using my compiler i'll receive a warning initialization of char from incompatible pointer type int now the actual data type of a pointer is the same they use eight bytes to store an address so i'm going to print the size of our variable as well as our pointer so i'll change this data type back to what it was originally and this time i'm going to print the size of our age variable as well as the size of our pointer size of age and we're displaying an integer and this will be in bytes size of age size of pointer age and then i'm gonna display a new line okay so the size of our age variable is four bytes it's an integer integers use four bytes so even though we declared our pointer as an integer the actual size of our pointer is going to be eight bytes that's enough to store a hexadecimal address so just as good practice since c is a strongly typed language you'll want to be sure that the data type of your pointer is consistent with the variable that it's pointing to now here's one thing that we can do with pointers we can pass a pointer as an argument to a function so outside of my main function i'm going to declare a function void let's say print age first we'll do this with passing and integer so int age and i will display the value of age you are age years old and i will display my age variable then at the end we will pass in our variable print edge and i will pass in age for now i'm just going to turn all of these into comments okay so you know this works you are 21 years old you could also pass in a pointer too so i'm going to this time pass in pointer age and we need to change the parameter from an integer to a pointer so precede the parameter name with the indirection operator and i'll rename this parameter as ph in order to access the value of the address stored within my pointer i need to dereference so i will use the indirection operator then type my pointer name ph and this will do the same thing as before so yeah those are pointers oh and before i forget you can declare and initialize a pointer in two steps but it would be good practice if you're declaring a pointer to assign a value of null since we already declared this pointer we do not need to use this indirection operator again when assigning a value so p age equals the address of age so it's considered good practice to assign null if you're declaring a pointer and not yet assigning a value so yeah that's basically a pointer it's a variable like reference that has a memory address as value to another variable array etc some tasks are performed more easily with pointers and to declare a pointer you use the indirection operator and if you need to access a value stored within a pointer you type the pointer name preceded with the indirection operator so yeah that is a quick intro to pointers if you found this video helpful please give this video a thumbs up leave a random comment down below and subscribe if you'd like to become a fellow bro
