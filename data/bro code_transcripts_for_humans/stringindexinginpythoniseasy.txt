With timestamps:

00:00 - hey everybody in this topic I'm going to
00:02 - explain string indexing indexing allows
00:05 - us to access the elements of a sequence
00:08 - using a set of square brackets also
00:10 - known as the indexing operator using
00:13 - this set of square brackets following a
00:15 - string there are up to three fields that
00:18 - we can fill in we can access a starting
00:20 - point in the string and ending point add
00:23 - a step here's an example suppose we have
00:26 - a credit card number
00:28 - credit
00:29 - number equals and I'll just make up some
00:32 - number one two three four dash
00:39 - 5678-9012-3456 good enough if I need the
00:42 - first character within the string I can
00:45 - type the name of my string variable
00:47 - followed by the indexing operator which
00:50 - is a set of square brackets the first
00:52 - position has an index of zero computers
00:55 - always start with zero so that's why the
00:57 - first index is zero then I'm going to go
00:59 - ahead and print this print credit card
01:02 - number at index of zero
01:05 - that would be one if I were to change
01:07 - the index to B1 0 1 that should be two
01:12 - index two
01:15 - would technically be three
01:17 - then four is the dash within our string
01:20 - as you can see here with the indexing
01:23 - operator there's up to three fields that
01:25 - we can fill in a start and a step if you
01:29 - have just one field listed without any
01:31 - colons it's assumed you're filling in
01:33 - the starting position so now what if you
01:36 - would like the first four digits of the
01:38 - string
01:39 - well we would type the name of our
01:41 - string variable
01:43 - indexing operator
01:46 - we'll need a starting index
01:48 - colon then an ending index
01:51 - the first four digits would be zero
01:54 - colon
01:56 - 4.
01:57 - then I will print this
02:02 - and I'm just going to turn this first
02:03 - line into a comment
02:05 - yeah there we go we have the first four
02:07 - digits of our credit card number one two
02:09 - three four just so you know with the
02:11 - ending Index this index is exclusive
02:15 - this first number would be zero one two
02:18 - three four so we did not include that
02:21 - Dash within the number the starting
02:23 - index is inclusive the ending index is
02:26 - exclusive so you can omit the zero in
02:29 - the beginning
02:30 - you could just say colon 4 python
02:32 - assumes the starting position will be
02:34 - the beginning of the string
02:36 - so that would work too
02:38 - let's get the next set of digits five
02:41 - six seven eight
02:42 - credit number
02:44 - indexing operator
02:45 - let's find where the starting index
02:47 - would be zero one two three four five
02:52 - colon
02:54 - six seven eight nine
02:58 - then we will print whatever is here
03:03 - the next set of digits is five six seven
03:06 - eight maybe we need the last 12 digits
03:09 - well what we could do in that case we
03:12 - will take our string variable credit
03:14 - number
03:16 - set the starting index to be let's see
03:18 - zero one two three four five
03:23 - colon if you need everything up to the
03:26 - end of the string you don't need to list
03:28 - an ending index just be sure to add that
03:30 - colon python then assumes you need
03:32 - everything up to the end of the string
03:34 - so I will print whatever we have
03:38 - then we should have everything besides
03:40 - the first four digits yep five six seven
03:43 - eight nine zero one two three four five
03:45 - six
03:46 - you could also use a negative index
03:50 - credit number if you need the last
03:52 - character in a string you would set the
03:54 - index to be negative one
03:57 - then I will print this
04:00 - print credit number at index of negative
04:03 - one that would be six
04:06 - negative two is five
04:10 - negative 3 is 4.
04:14 - negative four is three and then negative
04:16 - five would be that Dash right here yeah
04:19 - you can use negative indexes too
04:21 - let's talk about step using the step
04:24 - field we can access the characters in a
04:26 - string by a given step we can count by
04:29 - twos or we can count by threes so here's
04:33 - an example so let's take our credit
04:35 - number if we're not filling in the
04:37 - starting or ending Fields but we need a
04:40 - step we would need two colons then
04:41 - python is assuming everything from the
04:44 - beginning of the string to the end then
04:45 - our step will be two
04:48 - this will print every second character
04:51 - within our string
04:53 - yeah here we are we have one three dash
04:57 - six eight nine
05:00 - one so on and so forth
05:03 - if I were to change the step to three
05:07 - we would count every third character
05:08 - beginning with one
05:11 - four
05:13 - six dash
05:15 - one three six all right here's a
05:19 - practical example let's create a program
05:21 - to get the last four digits of a credit
05:23 - card number
05:26 - I'm going to assign this to a new
05:28 - variable
05:30 - last
05:32 - digits equals
05:35 - our credit number
05:38 - indexing operator
05:40 - so we need the last four digits where
05:43 - would the starting index begin well we
05:45 - could use negative indexing this last
05:48 - digit is negative one negative two
05:49 - negative 3 negative four we will begin
05:52 - at negative four
05:54 - colon
05:56 - we can omit the ending index python
05:59 - assumes we need the rest of the string
06:01 - then really that's all we need so let's
06:03 - print
06:04 - I'll use an F string
06:07 - uh maybe some x's maybe we're hiding
06:10 - somebody's credit card number except the
06:11 - last four digits
06:15 - okay then variable last
06:19 - digits
06:21 - all right and here's our credit card
06:23 - number where only the last four digits
06:26 - are visible
06:27 - hey you know what let's add one more
06:29 - exercise let's reverse the characters in
06:32 - The String I'm going to reassign credit
06:35 - number
06:37 - equals credit number
06:40 - if we need the entire string we don't
06:42 - necessarily need a starting index or an
06:45 - ending index
06:46 - but for the step this will be negative
06:49 - negative one will reverse a string then
06:52 - let's print whatever our new credit card
06:54 - number is
06:56 - print credit number
06:59 - and yeah there is our credit number
07:01 - backwards to reverse a string you set
07:04 - the step to be negative one
07:07 - so yeah everybody that is string
07:08 - indexing in Python we can access
07:10 - elements of a sequence using the
07:13 - indexing operator which is a set of
07:15 - straight brackets you can list a
07:16 - starting position ending position and
07:19 - even a step if you need to skip over
07:21 - characters but yeah that is string
07:23 - indexing in Python

Cleaned transcript:

hey everybody in this topic I'm going to explain string indexing indexing allows us to access the elements of a sequence using a set of square brackets also known as the indexing operator using this set of square brackets following a string there are up to three fields that we can fill in we can access a starting point in the string and ending point add a step here's an example suppose we have a credit card number credit number equals and I'll just make up some number one two three four dash 567890123456 good enough if I need the first character within the string I can type the name of my string variable followed by the indexing operator which is a set of square brackets the first position has an index of zero computers always start with zero so that's why the first index is zero then I'm going to go ahead and print this print credit card number at index of zero that would be one if I were to change the index to B1 0 1 that should be two index two would technically be three then four is the dash within our string as you can see here with the indexing operator there's up to three fields that we can fill in a start and a step if you have just one field listed without any colons it's assumed you're filling in the starting position so now what if you would like the first four digits of the string well we would type the name of our string variable indexing operator we'll need a starting index colon then an ending index the first four digits would be zero colon 4. then I will print this and I'm just going to turn this first line into a comment yeah there we go we have the first four digits of our credit card number one two three four just so you know with the ending Index this index is exclusive this first number would be zero one two three four so we did not include that Dash within the number the starting index is inclusive the ending index is exclusive so you can omit the zero in the beginning you could just say colon 4 python assumes the starting position will be the beginning of the string so that would work too let's get the next set of digits five six seven eight credit number indexing operator let's find where the starting index would be zero one two three four five colon six seven eight nine then we will print whatever is here the next set of digits is five six seven eight maybe we need the last 12 digits well what we could do in that case we will take our string variable credit number set the starting index to be let's see zero one two three four five colon if you need everything up to the end of the string you don't need to list an ending index just be sure to add that colon python then assumes you need everything up to the end of the string so I will print whatever we have then we should have everything besides the first four digits yep five six seven eight nine zero one two three four five six you could also use a negative index credit number if you need the last character in a string you would set the index to be negative one then I will print this print credit number at index of negative one that would be six negative two is five negative 3 is 4. negative four is three and then negative five would be that Dash right here yeah you can use negative indexes too let's talk about step using the step field we can access the characters in a string by a given step we can count by twos or we can count by threes so here's an example so let's take our credit number if we're not filling in the starting or ending Fields but we need a step we would need two colons then python is assuming everything from the beginning of the string to the end then our step will be two this will print every second character within our string yeah here we are we have one three dash six eight nine one so on and so forth if I were to change the step to three we would count every third character beginning with one four six dash one three six all right here's a practical example let's create a program to get the last four digits of a credit card number I'm going to assign this to a new variable last digits equals our credit number indexing operator so we need the last four digits where would the starting index begin well we could use negative indexing this last digit is negative one negative two negative 3 negative four we will begin at negative four colon we can omit the ending index python assumes we need the rest of the string then really that's all we need so let's print I'll use an F string uh maybe some x's maybe we're hiding somebody's credit card number except the last four digits okay then variable last digits all right and here's our credit card number where only the last four digits are visible hey you know what let's add one more exercise let's reverse the characters in The String I'm going to reassign credit number equals credit number if we need the entire string we don't necessarily need a starting index or an ending index but for the step this will be negative negative one will reverse a string then let's print whatever our new credit card number is print credit number and yeah there is our credit number backwards to reverse a string you set the step to be negative one so yeah everybody that is string indexing in Python we can access elements of a sequence using the indexing operator which is a set of straight brackets you can list a starting position ending position and even a step if you need to skip over characters but yeah that is string indexing in Python
