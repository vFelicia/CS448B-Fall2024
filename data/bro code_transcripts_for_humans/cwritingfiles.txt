With timestamps:

00:02 - all right let's do this here's how we
00:04 - can write to a file in c let's create a
00:07 - file pointer the data type is file and
00:10 - i'll name this pf it's a pointer to a
00:13 - file and i will set this equal to then
00:16 - invoke the f open function we will pass
00:19 - in a name we would like to give our file
00:22 - let's name this test.txt
00:24 - but if you would like this to be a
00:26 - different file extension such as html
00:28 - well you can change it to that then uh
00:30 - we'll keep this as a plain text file
00:32 - just to keep it simple and to write to a
00:35 - file there is a second argument a mode
00:38 - so this could be w for right a for
00:41 - append r for read but we are looking for
00:44 - w for now so it is good practice at the
00:47 - end of your program to close any files
00:49 - that are open so we will use the f close
00:53 - function and pass in our pointer p f
00:57 - make sure to not dereference it now to
00:59 - write a line of text to our file we can
01:01 - use f print f
01:04 - pass in our pointer p f do not
01:07 - dereference it and then some string of
01:09 - text let's say spongebob squarepants
01:13 - so this file will be created in the same
01:16 - folder as my c program so after running
01:19 - this
01:20 - we have a new text file within the same
01:22 - folder and it says spongebob squarepants
01:26 - what if i run this again and write
01:27 - something different like patrick
01:30 - starr
01:32 - so if the mode is w
01:34 - then we will actually overwrite any
01:36 - existing data already within this file
01:39 - if we need to append a file we can use
01:42 - the a mode for append so this time let's
01:45 - append some text to the end of our
01:46 - document
01:49 - spongebob squarepants
01:52 - and you'll have to keep track of any new
01:54 - lines that you add too so if i run this
01:56 - again and this time i am appending some
01:58 - text
02:01 - well patrick star is still there and we
02:03 - appended spongebob squarepants to the
02:05 - end of our file
02:07 - now if you would like to delete a file
02:09 - here's how i'm going to turn all of this
02:11 - into one giant comment
02:14 - let's use a little bit of file detection
02:16 - let's check to see if our file does
02:18 - exist
02:20 - within our if statement let's invoke the
02:22 - remove method and we will pass in the
02:25 - name or location to our file
02:28 - test.txt if we remove this file
02:30 - successfully it will return zero so if
02:34 - after invoking the remove function if
02:36 - this returns zero that's its exit code
02:39 - that means that file was deleted
02:41 - successfully let's print a message to
02:43 - let the user know
02:45 - that
02:46 - file
02:47 - was deleted
02:50 - successfully
02:52 - else we will print a different message
02:54 - printf
02:57 - that file was not
02:59 - deleted
03:00 - okay let's try this so here's my file
03:03 - within the same folder if i run this
03:06 - that file was deleted successfully and
03:09 - that file is no longer within the same
03:11 - folder you can see here that this says
03:13 - deleted
03:14 - and if i run this again we will not be
03:15 - able to locate that file because it's
03:17 - not there
03:18 - now you can write a file to a different
03:20 - location let's say i would like to write
03:23 - a file to my desktop i can set a
03:25 - relative file path or an absolute file
03:28 - path i'll use an absolute file path
03:31 - i'm going to get the file location of my
03:33 - desktop so i'm just going to click on
03:35 - one of these folders
03:37 - go to properties
03:39 - and copy this location
03:42 - so with my file name i'm going to
03:44 - precede this with an absolute file path
03:47 - then any backslashes might need to be
03:50 - double backslashes
03:51 - so this time if i write a file
03:54 - then this file will appear at this
03:56 - location on my desktop
03:58 - and here's that file
04:00 - test.txt and it says spongebob
04:03 - squarepants
04:04 - well alright everybody that is how to
04:06 - write append and delete files in c if
04:09 - you found this video helpful be sure to
04:11 - help me out by smashing that like button
04:14 - leave a random comment down below and
04:16 - subscribe if you'd like to become a
04:17 - fellow bro

Cleaned transcript:

all right let's do this here's how we can write to a file in c let's create a file pointer the data type is file and i'll name this pf it's a pointer to a file and i will set this equal to then invoke the f open function we will pass in a name we would like to give our file let's name this test.txt but if you would like this to be a different file extension such as html well you can change it to that then uh we'll keep this as a plain text file just to keep it simple and to write to a file there is a second argument a mode so this could be w for right a for append r for read but we are looking for w for now so it is good practice at the end of your program to close any files that are open so we will use the f close function and pass in our pointer p f make sure to not dereference it now to write a line of text to our file we can use f print f pass in our pointer p f do not dereference it and then some string of text let's say spongebob squarepants so this file will be created in the same folder as my c program so after running this we have a new text file within the same folder and it says spongebob squarepants what if i run this again and write something different like patrick starr so if the mode is w then we will actually overwrite any existing data already within this file if we need to append a file we can use the a mode for append so this time let's append some text to the end of our document spongebob squarepants and you'll have to keep track of any new lines that you add too so if i run this again and this time i am appending some text well patrick star is still there and we appended spongebob squarepants to the end of our file now if you would like to delete a file here's how i'm going to turn all of this into one giant comment let's use a little bit of file detection let's check to see if our file does exist within our if statement let's invoke the remove method and we will pass in the name or location to our file test.txt if we remove this file successfully it will return zero so if after invoking the remove function if this returns zero that's its exit code that means that file was deleted successfully let's print a message to let the user know that file was deleted successfully else we will print a different message printf that file was not deleted okay let's try this so here's my file within the same folder if i run this that file was deleted successfully and that file is no longer within the same folder you can see here that this says deleted and if i run this again we will not be able to locate that file because it's not there now you can write a file to a different location let's say i would like to write a file to my desktop i can set a relative file path or an absolute file path i'll use an absolute file path i'm going to get the file location of my desktop so i'm just going to click on one of these folders go to properties and copy this location so with my file name i'm going to precede this with an absolute file path then any backslashes might need to be double backslashes so this time if i write a file then this file will appear at this location on my desktop and here's that file test.txt and it says spongebob squarepants well alright everybody that is how to write append and delete files in c if you found this video helpful be sure to help me out by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
