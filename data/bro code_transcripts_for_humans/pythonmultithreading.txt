With timestamps:

00:00 - yo what's going on everybody it's bro
00:02 - hope you're doing well and in this video
00:04 - i'm going to explain to multi-threading
00:05 - in python so
00:06 - sit back relax and enjoy the show
00:11 - think of a thread as a flow of execution
00:14 - like a river
00:15 - and each thread can carry out its own
00:17 - separate order of instructions
00:19 - if we use this process of
00:20 - multi-threading we can have our program
00:23 - run different parts of its program at
00:25 - different times
00:26 - they all run concurrently but not truly
00:29 - in parallel that is a concept for later
00:31 - referred to as multi-processing
00:33 - so with reds they each take a turn
00:36 - running to achieve
00:37 - concurrency this is due to a notorious
00:40 - feature known as the
00:41 - gil the global interpreter lock
00:44 - only one thread can be running at one
00:46 - time but they can all take turns when
00:49 - one thread is idle so this allows one
00:52 - thread to hold control of the python
00:54 - interpreter
00:54 - at any one time so they run concurrently
00:57 - but not truly in parallel
00:59 - which is what we do with
01:00 - multi-processing now programs and tasks
01:03 - can be divided into
01:04 - two different categories they can be cpu
01:07 - bound that
01:08 - is a program or a task that spends most
01:10 - of its time
01:11 - waiting for internal events such as a
01:14 - task that is
01:15 - cpu intensive it is better to use
01:18 - multi-processing for tasks that are cpu
01:20 - bound
01:21 - now tasks that are io bound means that
01:24 - the program will spend most of its time
01:26 - waiting for external events
01:28 - such as waiting for user input or if
01:31 - you're doing activities like
01:32 - web scraping you do a lot of sitting
01:34 - around so with i o bound tasks it's
01:36 - better to use
01:37 - multi-threading because we can have
01:39 - multiple threads
01:40 - running concurrently but not truly in
01:42 - parallel like what we do with
01:44 - multi-processing
01:45 - after importing the threading module we
01:48 - can count the number of threads that are
01:50 - currently running in the background
01:51 - whenever we run a program we have one
01:54 - thread that is running that is in charge
01:55 - of
01:56 - executing our program and we can print
01:58 - the active count of threads running in
02:00 - our program using the
02:02 - active count function of the threading
02:04 - module so
02:05 - this will print one we have one thread
02:07 - that is running
02:08 - and we can print a list of all the
02:11 - threads that are running
02:13 - by using the enumerate function so
02:16 - the one thread that is in charge of
02:18 - running our program
02:19 - is referred to as the main thread by
02:22 - using this concept of multi-threading we
02:24 - can have
02:24 - more than one thread running
02:26 - concurrently not truly in parallel
02:29 - all the threads will take turns while
02:30 - one of them is idle
02:32 - so we can have more than one thread
02:34 - running more than just the main
02:36 - thread which is in charge of running the
02:37 - main body of our program
02:39 - so while our main thread is in charge of
02:41 - running the main body of our program
02:43 - we can have another thread that's in
02:45 - charge of a separate part of it
02:47 - maybe like a countdown timer or
02:49 - something so
02:50 - one good example take that quiz game
02:52 - that we made some number of videos ago
02:54 - while we were waiting for user input
02:56 - which is a
02:57 - i o bound task we could have had a
03:00 - countdown timer going
03:01 - like you only have so many seconds to
03:03 - answer this question we could have had
03:05 - one thread in charge of waiting for user
03:07 - input and another thread in charge of
03:09 - the countdown timer
03:10 - so that's an example of multi-threading
03:13 - we had two threads running concurrently
03:15 - and what we'll be doing in this video is
03:17 - creating a program that involves
03:19 - multi-threading we can have
03:21 - different threads in charge of different
03:23 - parts of our program and they can all
03:24 - run
03:25 - concurrently they'll all take turns
03:27 - while one of them is idle
03:28 - so let's say that we're running late for
03:31 - school
03:32 - or work in the morning and we have three
03:34 - different tasks that we need to complete
03:36 - before we can leave for school or work
03:38 - so think of three different things you
03:40 - do in the morning such as maybe
03:43 - eat breakfast some people drink coffee
03:46 - or maybe a beverage of your choice
03:48 - so drink coffee and some people like me
03:52 - they like to do their homework last
03:54 - minute so i'll say
03:55 - study before i leave for work or
03:59 - school in the morning so what we'll do
04:01 - in each of these functions
04:02 - each of these functions should take some
04:04 - amount of time to complete
04:06 - so we can have our main thread sleep for
04:08 - a given number of seconds using
04:10 - the sleep function time dot sleep
04:13 - and let's say that in order for me to
04:15 - eat breakfast this task will take me
04:17 - three seconds let's just pretend that
04:19 - instead of minutes this will be in
04:21 - seconds so drink coffee will take me
04:25 - four seconds and study will take me
04:28 - five seconds then when we finish
04:32 - sleeping
04:33 - let's print a confirmation message let's
04:36 - say
04:37 - you eat breakfast
04:40 - as in you finish eating breakfast with
04:43 - drink coffee
04:45 - you drink coffee
04:50 - and with study
04:53 - you finish studying
04:58 - now each of these tasks are i o bound
05:00 - they're going to be spending a lot of
05:02 - time just waiting around for external
05:04 - events
05:04 - they're waiting for the sleep function
05:06 - to expire before they can finish their
05:08 - task
05:09 - so we're going to have all of these
05:11 - three functions run
05:12 - on our main thread and we'll see how
05:14 - long it takes for us to complete our
05:16 - morning ritual
05:17 - these three tasks so let's call these
05:20 - three functions within our main thread
05:22 - so let's call the eat breakfast function
05:26 - first
05:27 - followed by drink coffee
05:31 - and then study in that order so this
05:34 - program is going to take approximately
05:37 - let's see 12 seconds to complete so
05:40 - there's going to be a pause for a second
05:42 - you eat breakfast then followed by
05:46 - you drink coffee and then study
05:52 - you finished studying so this program
05:54 - took about 12 seconds overall
05:57 - so if this were realistic what we would
05:59 - have done is we would sit down
06:01 - and eat breakfast for three minutes well
06:04 - three seconds in this case
06:05 - and then once we finish eating breakfast
06:08 - only then are we allowed to drink our
06:10 - coffee
06:11 - and once we finish our coffee only then
06:14 - can we study
06:15 - so we completed these tasks sequentially
06:18 - and not concurrently for us to move down
06:20 - to the next function
06:22 - we need to complete the previous
06:24 - functions because we're doing this in
06:25 - order
06:26 - but realistically us human beings we
06:29 - would probably
06:30 - eat breakfast drink coffee and study
06:33 - together because we can multitask and we
06:35 - can complete
06:36 - these three functions in less time and
06:38 - that's kind of the same process
06:40 - as multi-threading we can have these
06:42 - three separate functions
06:43 - running concurrently as if we're
06:45 - multitasking we're eating breakfast
06:47 - drinking coffee
06:48 - and studying all at once now currently
06:51 - we have
06:51 - one thread that is in charge of these
06:54 - three separate functions
06:56 - what we could do is that we can create
06:58 - three additional threads
06:59 - each thread will be in charge of each
07:01 - task and then we'll have
07:03 - our main thread running in the
07:04 - background that will complete the rest
07:06 - of the program
07:07 - so this is how to create an additional
07:08 - thread let's say that
07:10 - x equals threading
07:14 - dot thread we need to pass in a target
07:17 - target equals and then
07:21 - the name of the function so let's say
07:23 - thread x
07:24 - will be in charge of eating breakfast
07:26 - and then you can pass in
07:27 - arguments too if your function has
07:29 - parameters by typing args
07:31 - and then you pass in a tuple so let's
07:33 - say you have one argument to pass in
07:35 - you'll type your argument followed by
07:37 - a comma but we don't have any arguments
07:39 - in this example but
07:40 - you'll need to be sure to enter them in
07:42 - if you do have any
07:44 - okay then to begin this thread you type
07:46 - the name of the thread in this case
07:48 - x dot start so we now have an additional
07:52 - thread and this thread is in charge of
07:54 - eating breakfast
07:55 - now let's create another thread to drink
07:57 - coffee
07:59 - and we'll call this y
08:03 - and the target will be drink coffee
08:07 - and lastly we have a thread in charge of
08:10 - studying
08:12 - and this will be z
08:16 - and the target is our study function
08:19 - okay now let's see how long it takes for
08:21 - us to complete our program
08:23 - oh and be sure to comment out these
08:25 - function calls within the main thread
08:27 - because we don't want the main thread in
08:28 - charge of those anymore
08:29 - okay now we can run the program so we
08:32 - have four threads running this time
08:34 - you eat breakfast you drink coffee you
08:36 - finish studying
08:37 - so this program took approximately five
08:40 - seconds to finish
08:41 - and the reason that this program took
08:43 - five seconds instead of twelve is
08:45 - because
08:45 - before our main thread was in charge of
08:48 - running these tasks
08:49 - sequentially in order but now since we
08:52 - have a thread
08:52 - dedicated to each task we can run them
08:55 - all
08:56 - concurrently instead of sequentially so
08:58 - that this program now
08:59 - took about five seconds to complete and
09:02 - you may have noticed too
09:03 - that the active count function as well
09:05 - as the enumerate function
09:06 - were called before threads 1 2 and 3
09:09 - finished
09:09 - their respective tasks that's because
09:12 - the main thread is not going to wait
09:13 - around
09:14 - for these three threads to complete it
09:16 - has its own set of instructions to do
09:18 - so it is no longer in charge of these
09:21 - three functions
09:23 - the program is going to handle those
09:25 - three functions to our three threads
09:27 - and our main thread is going to continue
09:29 - its own set of instructions
09:30 - its job is to print the active count as
09:33 - well as
09:34 - call the enumerate function which it did
09:37 - and it finished its tasks
09:38 - before threads one two and three now one
09:41 - trick that you can do too
09:42 - is that you can use the time modules
09:45 - performance counter function
09:47 - and this function will return how long
09:49 - it takes our calling thread as in
09:51 - our main thread to finish its set of
09:53 - instructions
09:54 - so our main thread is not in charge of
09:57 - executing
09:58 - these three functions our main thread is
10:01 - in charge of creating
10:02 - three additional threads and then
10:04 - calling the active count function
10:06 - and the enumerate function as well as
10:08 - the performance counter function
10:11 - so our main thread will take
10:13 - approximately
10:15 - 0.075 seconds to complete
10:17 - and our three threads are still running
10:19 - in the background our main threads job
10:21 - its order of instructions is to create
10:24 - three additional threads and then
10:26 - immediately
10:27 - print whatever is returned via the
10:30 - active count function
10:31 - enumerate and then your performance
10:33 - counter so
10:35 - our main thread says that it finished
10:37 - its tasks in about
10:38 - .07 seconds but threads one
10:41 - through three were still trying to catch
10:44 - up that's why
10:45 - the main thread finished before are
10:46 - three additional threads
10:48 - and once all active threads have
10:50 - completed their tasks
10:52 - then your program will finish an exit
10:54 - there's also this concept called
10:56 - thread synchronization we can have a
10:58 - calling thread in this case
11:00 - our main thread wait around for another
11:02 - thread to finish before it can move on
11:04 - with its own instruction set so let's
11:07 - say we would like
11:08 - our main thread to wait around for
11:10 - thread one also known as
11:12 - x so we're going to use the join
11:15 - function
11:16 - of thread x and now our main thread has
11:19 - to wait around
11:20 - for thread x also known as thread 1 to
11:23 - finish before it can move on with its
11:24 - instruction set so let's do the same
11:27 - with y
11:28 - and z so now our main thread before it
11:31 - can move on
11:32 - with the rest of the program has to wait
11:34 - for all of these threads to synchronize
11:36 - and join and then and only then can it
11:39 - move on with the rest of its own
11:40 - instruction set
11:42 - so this time our program is going to
11:44 - look a little something like this
11:46 - you eat breakfast you drink coffee you
11:48 - finish studying
11:49 - so by the time we reach our active count
11:52 - these threads
11:52 - are already joined and synchronized
11:54 - they're no longer active
11:56 - when we enumerate over our active
11:58 - threads we only have our main thread
12:00 - and our main thread completed in about
12:03 - 5.1
12:04 - seconds this time because it did a lot
12:06 - of waiting around it was waiting for
12:07 - threads x y and z to join and finish
12:11 - in conclusion a thread is a flow of
12:13 - execution
12:15 - like a separate order of instructions
12:17 - that a program can follow
12:18 - and when we run a program we always have
12:21 - at least one thread running initially
12:23 - and that is referred to as the main
12:25 - thread
12:26 - however if you have multiple threads
12:28 - using the concept of multi-threading
12:30 - we can have multiple threads running
12:32 - concurrently but not truly in parallel
12:35 - which is what we'll cover
12:36 - during the video on multi-processing
12:38 - this is due to
12:40 - a feature known as the gil the
12:43 - global interpreter lock which allows
12:45 - only one thread to hold control of the
12:47 - python interpreter
12:49 - at any one time and tasks can be either
12:52 - cpu bound or io bound a cpu bound task
12:55 - is
12:55 - a program or task that spends most of
12:58 - its time
12:59 - waiting for internal events such as a
13:01 - task that is
13:02 - cpu intensive and o bound tasks
13:06 - spend most of their time waiting for
13:08 - external events
13:09 - such as waiting around for user input or
13:12 - web scraping
13:13 - with i o bound tasks it's better to use
13:16 - multi-threading
13:17 - with cpu bound tasks it's better to use
13:20 - multiprocessing
13:21 - well everybody that is a quick overview
13:23 - of multithreading i will post all of
13:25 - this code to the comments section down
13:27 - below
13:28 - and well yeah that's how to achieve
13:30 - multi-threading using python

Cleaned transcript:

yo what's going on everybody it's bro hope you're doing well and in this video i'm going to explain to multithreading in python so sit back relax and enjoy the show think of a thread as a flow of execution like a river and each thread can carry out its own separate order of instructions if we use this process of multithreading we can have our program run different parts of its program at different times they all run concurrently but not truly in parallel that is a concept for later referred to as multiprocessing so with reds they each take a turn running to achieve concurrency this is due to a notorious feature known as the gil the global interpreter lock only one thread can be running at one time but they can all take turns when one thread is idle so this allows one thread to hold control of the python interpreter at any one time so they run concurrently but not truly in parallel which is what we do with multiprocessing now programs and tasks can be divided into two different categories they can be cpu bound that is a program or a task that spends most of its time waiting for internal events such as a task that is cpu intensive it is better to use multiprocessing for tasks that are cpu bound now tasks that are io bound means that the program will spend most of its time waiting for external events such as waiting for user input or if you're doing activities like web scraping you do a lot of sitting around so with i o bound tasks it's better to use multithreading because we can have multiple threads running concurrently but not truly in parallel like what we do with multiprocessing after importing the threading module we can count the number of threads that are currently running in the background whenever we run a program we have one thread that is running that is in charge of executing our program and we can print the active count of threads running in our program using the active count function of the threading module so this will print one we have one thread that is running and we can print a list of all the threads that are running by using the enumerate function so the one thread that is in charge of running our program is referred to as the main thread by using this concept of multithreading we can have more than one thread running concurrently not truly in parallel all the threads will take turns while one of them is idle so we can have more than one thread running more than just the main thread which is in charge of running the main body of our program so while our main thread is in charge of running the main body of our program we can have another thread that's in charge of a separate part of it maybe like a countdown timer or something so one good example take that quiz game that we made some number of videos ago while we were waiting for user input which is a i o bound task we could have had a countdown timer going like you only have so many seconds to answer this question we could have had one thread in charge of waiting for user input and another thread in charge of the countdown timer so that's an example of multithreading we had two threads running concurrently and what we'll be doing in this video is creating a program that involves multithreading we can have different threads in charge of different parts of our program and they can all run concurrently they'll all take turns while one of them is idle so let's say that we're running late for school or work in the morning and we have three different tasks that we need to complete before we can leave for school or work so think of three different things you do in the morning such as maybe eat breakfast some people drink coffee or maybe a beverage of your choice so drink coffee and some people like me they like to do their homework last minute so i'll say study before i leave for work or school in the morning so what we'll do in each of these functions each of these functions should take some amount of time to complete so we can have our main thread sleep for a given number of seconds using the sleep function time dot sleep and let's say that in order for me to eat breakfast this task will take me three seconds let's just pretend that instead of minutes this will be in seconds so drink coffee will take me four seconds and study will take me five seconds then when we finish sleeping let's print a confirmation message let's say you eat breakfast as in you finish eating breakfast with drink coffee you drink coffee and with study you finish studying now each of these tasks are i o bound they're going to be spending a lot of time just waiting around for external events they're waiting for the sleep function to expire before they can finish their task so we're going to have all of these three functions run on our main thread and we'll see how long it takes for us to complete our morning ritual these three tasks so let's call these three functions within our main thread so let's call the eat breakfast function first followed by drink coffee and then study in that order so this program is going to take approximately let's see 12 seconds to complete so there's going to be a pause for a second you eat breakfast then followed by you drink coffee and then study you finished studying so this program took about 12 seconds overall so if this were realistic what we would have done is we would sit down and eat breakfast for three minutes well three seconds in this case and then once we finish eating breakfast only then are we allowed to drink our coffee and once we finish our coffee only then can we study so we completed these tasks sequentially and not concurrently for us to move down to the next function we need to complete the previous functions because we're doing this in order but realistically us human beings we would probably eat breakfast drink coffee and study together because we can multitask and we can complete these three functions in less time and that's kind of the same process as multithreading we can have these three separate functions running concurrently as if we're multitasking we're eating breakfast drinking coffee and studying all at once now currently we have one thread that is in charge of these three separate functions what we could do is that we can create three additional threads each thread will be in charge of each task and then we'll have our main thread running in the background that will complete the rest of the program so this is how to create an additional thread let's say that x equals threading dot thread we need to pass in a target target equals and then the name of the function so let's say thread x will be in charge of eating breakfast and then you can pass in arguments too if your function has parameters by typing args and then you pass in a tuple so let's say you have one argument to pass in you'll type your argument followed by a comma but we don't have any arguments in this example but you'll need to be sure to enter them in if you do have any okay then to begin this thread you type the name of the thread in this case x dot start so we now have an additional thread and this thread is in charge of eating breakfast now let's create another thread to drink coffee and we'll call this y and the target will be drink coffee and lastly we have a thread in charge of studying and this will be z and the target is our study function okay now let's see how long it takes for us to complete our program oh and be sure to comment out these function calls within the main thread because we don't want the main thread in charge of those anymore okay now we can run the program so we have four threads running this time you eat breakfast you drink coffee you finish studying so this program took approximately five seconds to finish and the reason that this program took five seconds instead of twelve is because before our main thread was in charge of running these tasks sequentially in order but now since we have a thread dedicated to each task we can run them all concurrently instead of sequentially so that this program now took about five seconds to complete and you may have noticed too that the active count function as well as the enumerate function were called before threads 1 2 and 3 finished their respective tasks that's because the main thread is not going to wait around for these three threads to complete it has its own set of instructions to do so it is no longer in charge of these three functions the program is going to handle those three functions to our three threads and our main thread is going to continue its own set of instructions its job is to print the active count as well as call the enumerate function which it did and it finished its tasks before threads one two and three now one trick that you can do too is that you can use the time modules performance counter function and this function will return how long it takes our calling thread as in our main thread to finish its set of instructions so our main thread is not in charge of executing these three functions our main thread is in charge of creating three additional threads and then calling the active count function and the enumerate function as well as the performance counter function so our main thread will take approximately 0.075 seconds to complete and our three threads are still running in the background our main threads job its order of instructions is to create three additional threads and then immediately print whatever is returned via the active count function enumerate and then your performance counter so our main thread says that it finished its tasks in about .07 seconds but threads one through three were still trying to catch up that's why the main thread finished before are three additional threads and once all active threads have completed their tasks then your program will finish an exit there's also this concept called thread synchronization we can have a calling thread in this case our main thread wait around for another thread to finish before it can move on with its own instruction set so let's say we would like our main thread to wait around for thread one also known as x so we're going to use the join function of thread x and now our main thread has to wait around for thread x also known as thread 1 to finish before it can move on with its instruction set so let's do the same with y and z so now our main thread before it can move on with the rest of the program has to wait for all of these threads to synchronize and join and then and only then can it move on with the rest of its own instruction set so this time our program is going to look a little something like this you eat breakfast you drink coffee you finish studying so by the time we reach our active count these threads are already joined and synchronized they're no longer active when we enumerate over our active threads we only have our main thread and our main thread completed in about 5.1 seconds this time because it did a lot of waiting around it was waiting for threads x y and z to join and finish in conclusion a thread is a flow of execution like a separate order of instructions that a program can follow and when we run a program we always have at least one thread running initially and that is referred to as the main thread however if you have multiple threads using the concept of multithreading we can have multiple threads running concurrently but not truly in parallel which is what we'll cover during the video on multiprocessing this is due to a feature known as the gil the global interpreter lock which allows only one thread to hold control of the python interpreter at any one time and tasks can be either cpu bound or io bound a cpu bound task is a program or task that spends most of its time waiting for internal events such as a task that is cpu intensive and o bound tasks spend most of their time waiting for external events such as waiting around for user input or web scraping with i o bound tasks it's better to use multithreading with cpu bound tasks it's better to use multiprocessing well everybody that is a quick overview of multithreading i will post all of this code to the comments section down below and well yeah that's how to achieve multithreading using python
