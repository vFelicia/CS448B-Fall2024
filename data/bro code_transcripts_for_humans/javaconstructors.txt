With timestamps:

00:00 - hey how's it going everybody it's your
00:01 - bro here hope you're doing well and in
00:03 - this video i'm going to teach you guys
00:04 - all about constructors in java so
00:06 - sit back relax and enjoy the show
00:11 - you too can become a hero and save our
00:13 - channel by
00:14 - punching the like button throw a comment
00:16 - down below and smash the subscribe
00:19 - button
00:20 - alright guys and gals in this video i'm
00:22 - going to be explaining constructors to
00:24 - you all now a constructor is a
00:26 - special method that is called when an
00:29 - object is instantiated
00:30 - and when we instantiate something that's
00:32 - just a fancy term for creating an
00:35 - object now for this example i have two
00:38 - classes
00:38 - i have my main class that contains my
00:40 - main method and i also have another
00:43 - class within my
00:44 - project folder called human we're going
00:46 - to be creating some human objects today
00:48 - now normally the steps of creating an
00:50 - object we would type in
00:52 - the name of the class for this example
00:53 - it's human a unique name for
00:56 - this specific object we'll just call
00:58 - this human a lowercase
01:00 - equals new human
01:04 - now this portion works very similar to a
01:07 - standard method call
01:08 - except a constructor is a special method
01:11 - that works behind the scenes
01:13 - that will create an instance of a class
01:15 - for us it will instantiate
01:17 - an object basically speaking our
01:20 - constructor is acting as a special
01:23 - method
01:23 - and we can even pass in arguments when
01:25 - we instantiate it
01:27 - so if we would like to do something with
01:29 - these arguments
01:30 - like assign them to the attributes of
01:33 - our object
01:35 - we can set up the constructor within the
01:37 - class
01:38 - so this is how to create the constructor
01:40 - within our class
01:41 - it's going to have the same name as the
01:43 - class for this example it's human
01:45 - followed by a set of parentheses and
01:47 - then a set of curly braces
01:48 - and that's it we have our constructor so
01:51 - when we create an instance of this class
01:53 - it's going to call the constructor much
01:56 - like a method
01:57 - and anything within the constructor will
01:59 - be performed
02:00 - just like a standard method so we can
02:02 - actually set up some parameters
02:04 - and pass in some arguments when we
02:06 - create our object
02:08 - so let's set up some parameters for our
02:10 - human class
02:11 - what are a few attributes that a human
02:13 - might have for one a name
02:15 - like bob or something so let's define
02:18 - the first parameter of
02:19 - string name perhaps an age int age
02:23 - and then a weight int actually let's
02:26 - make this a double
02:27 - double weight so we have now set up
02:31 - three parameters for this human class
02:34 - let's head back to our main class
02:36 - now we're going to have a problem that's
02:38 - because we do not have
02:39 - matching arguments to send our human
02:42 - that's because we're saying that in
02:44 - order
02:44 - to construct a human these are the
02:46 - parameters
02:47 - these are the rules in order for us to
02:49 - instantiate a human
02:51 - to create a human object we need to send
02:53 - our constructor
02:55 - a string an integer and a double value
02:58 - to serve as the name the age and the
03:00 - weight
03:01 - so in order to get this program working
03:03 - within the constructor we need to pass
03:05 - in some matching arguments
03:07 - so we need to send a string an integer
03:10 - and a double value so let's call our
03:13 - human
03:15 - rick and we'll pass in rick for the
03:17 - first argument
03:18 - let's send an age perhaps 65 so he's
03:21 - elderly
03:22 - and then a weight perhaps this will be
03:25 - in kilograms
03:26 - so let's say maybe 70. see now that
03:30 - error went away
03:31 - so we can compile and run this but it
03:33 - currently doesn't do anything
03:34 - so why is this useful why is passing
03:37 - arguments to a constructor useful
03:39 - well this gives us the ability to create
03:42 - different objects that have different
03:45 - attributes
03:46 - so we could create a second human that
03:48 - has a different name
03:50 - a different age and a different weight
03:52 - but we first
03:53 - need to assign these values to the
03:56 - attributes of our class
03:58 - so let's head back to our human class
04:00 - and we need to define
04:02 - a name and age in a way and let's do
04:04 - this outside of the constructor
04:06 - but we're not going to assign a value
04:08 - just yet so let's say
04:09 - string name we're only going to declare
04:13 - this
04:14 - int edge and
04:17 - double weight and then
04:21 - within the constructor we're going to
04:23 - assign
04:24 - all of these values to each of these
04:26 - variables
04:29 - so right now let's say name equals name
04:33 - and age equals edge and weight
04:36 - equals weight now this actually isn't
04:40 - going to work and i'll show you why
04:42 - so let's attempt to access humanone's
04:45 - name
04:46 - and let's do this with a print line
04:47 - statement system.out.printline
04:50 - to access one of these attributes we
04:52 - type in the name of the object
04:54 - dot and whatever we're trying to access
04:57 - let's attempt to access the name
05:00 - now if we were to display the name it
05:03 - says no
05:04 - well what gives that's because we need
05:06 - to assign
05:07 - each of these values to this specific
05:10 - object
05:11 - and one keyword to assign values
05:14 - to this object is to use the
05:18 - this keyword so when we assign name
05:21 - equals name
05:21 - age equals age and weight equals weight
05:24 - we're going to
05:25 - precede each of these with the keyword
05:28 - this this dot name
05:32 - this dot age and this
05:35 - dot weight so for all intents and
05:37 - purposes
05:39 - when we create an instance of a class
05:41 - when we create an object
05:42 - we're going to imagine or pretend that
05:45 - we're replacing
05:47 - this this keyword with the name of the
05:49 - object
05:50 - so if we're creating an object called
05:52 - human
05:54 - replace this or pretend that we're
05:56 - replacing this
05:57 - with human if we created a second human
06:00 - object
06:01 - this could be human too just pretend
06:03 - that but stick with the keyword of this
06:05 - so now if we were to run this human now
06:08 - has a name
06:10 - now let's create a second human so
06:13 - let's repeat the steps human i'm going
06:15 - to call this human2 and rename human as
06:18 - human one just to keep things simple
06:20 - now we can send different arguments to
06:22 - our constructor
06:23 - so we need to send a name an agent away
06:27 - well a string
06:28 - an integer and a double so for
06:31 - our second human let's call him morty
06:35 - we need to send an integer let's say
06:37 - he's 16
06:38 - and he weighs 50 kilograms and let's
06:41 - attempt to access
06:43 - human two's name so we can do this
06:45 - within a print line statement
06:46 - human dot name and
06:50 - this should display morty so now the
06:52 - point of constructors is that
06:54 - they allow us to construct objects that
06:57 - have
06:57 - varying attributes and in the last
06:59 - lesson when we were constructing cars we
07:02 - were only able to construct
07:03 - blue corvettes and with the help of
07:06 - constructors
07:07 - we can construct objects that have
07:09 - different qualities
07:10 - so they are still humans they're objects
07:13 - that are instantiated from the human
07:15 - class
07:16 - but they have different attributes that
07:18 - make them unique
07:19 - here's one situation that you might run
07:21 - into now how can you access
07:23 - an object's attributes from within its
07:26 - class itself
07:27 - so we can utilize the this keyword to
07:30 - help us with that
07:32 - so let's pretend that humans have two
07:34 - methods
07:35 - they have an eat method as well as a
07:37 - drink method and let's define these both
07:39 - so for eat let's say void eat
07:43 - and within this method let's create a
07:45 - print line statement that says
07:47 - this person's name is eating so in order
07:50 - to access
07:52 - an object's attributes from within its
07:54 - own class
07:55 - we have to use the this keyword so if we
07:58 - want to display the person's name
08:00 - plus maybe some text such as is eating
08:04 - let's type in this dot name
08:07 - to access this object's name plus is
08:12 - eating
08:13 - so this will print the person's name
08:15 - plus
08:16 - is eating and let's try this so let's
08:19 - say human to
08:20 - which is morty is eating so
08:23 - in order to call this method we'll have
08:26 - human2
08:27 - use its eat method
08:31 - so this will display morty is eating now
08:34 - let's create
08:35 - a drink method void
08:38 - drink and we will display this person's
08:42 - name
08:42 - is drinking system.out.printline
08:46 - this dot name plus
08:50 - is drinking
08:54 - burke and let's say human one
08:58 - which is rick is going to use the drink
09:00 - function because he likes drinking
09:02 - so human one dot drink
09:08 - and here are the results morty is eating
09:12 - and rick is drinking that's because we
09:15 - stated that
09:16 - human 2 is going to use its eat method
09:19 - and human one is going to use its drink
09:21 - method
09:22 - so if we had each of these objects
09:24 - perform the other method a different
09:26 - method
09:27 - let's say human one is going to use the
09:29 - eat method
09:30 - and human 2 is going to use its drink
09:33 - method
09:34 - so now each of these objects is using a
09:37 - different method
09:38 - this time rick is eating and morty is
09:41 - drinking
09:42 - so that's why constructors are useful
09:44 - they allow us to assign
09:46 - different attributes to each object that
09:48 - we instantiate
09:50 - so that's the basics of constructors if
09:52 - you would like a copy of all this code
09:54 - i'll post all of this in the comments
09:55 - down below
09:56 - but yeah that's the basics of
09:58 - constructors in java
10:01 - hey you yeah i'm talking to you if you
10:04 - learn something new
10:05 - then you can help me help you in three
10:08 - easy steps
10:09 - by smashing that like button drop a
10:11 - comment down below
10:12 - and subscribe if you'd like to become a
10:14 - fellow bro
10:20 - [Music]
10:35 - you

Cleaned transcript:

hey how's it going everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys all about constructors in java so sit back relax and enjoy the show you too can become a hero and save our channel by punching the like button throw a comment down below and smash the subscribe button alright guys and gals in this video i'm going to be explaining constructors to you all now a constructor is a special method that is called when an object is instantiated and when we instantiate something that's just a fancy term for creating an object now for this example i have two classes i have my main class that contains my main method and i also have another class within my project folder called human we're going to be creating some human objects today now normally the steps of creating an object we would type in the name of the class for this example it's human a unique name for this specific object we'll just call this human a lowercase equals new human now this portion works very similar to a standard method call except a constructor is a special method that works behind the scenes that will create an instance of a class for us it will instantiate an object basically speaking our constructor is acting as a special method and we can even pass in arguments when we instantiate it so if we would like to do something with these arguments like assign them to the attributes of our object we can set up the constructor within the class so this is how to create the constructor within our class it's going to have the same name as the class for this example it's human followed by a set of parentheses and then a set of curly braces and that's it we have our constructor so when we create an instance of this class it's going to call the constructor much like a method and anything within the constructor will be performed just like a standard method so we can actually set up some parameters and pass in some arguments when we create our object so let's set up some parameters for our human class what are a few attributes that a human might have for one a name like bob or something so let's define the first parameter of string name perhaps an age int age and then a weight int actually let's make this a double double weight so we have now set up three parameters for this human class let's head back to our main class now we're going to have a problem that's because we do not have matching arguments to send our human that's because we're saying that in order to construct a human these are the parameters these are the rules in order for us to instantiate a human to create a human object we need to send our constructor a string an integer and a double value to serve as the name the age and the weight so in order to get this program working within the constructor we need to pass in some matching arguments so we need to send a string an integer and a double value so let's call our human rick and we'll pass in rick for the first argument let's send an age perhaps 65 so he's elderly and then a weight perhaps this will be in kilograms so let's say maybe 70. see now that error went away so we can compile and run this but it currently doesn't do anything so why is this useful why is passing arguments to a constructor useful well this gives us the ability to create different objects that have different attributes so we could create a second human that has a different name a different age and a different weight but we first need to assign these values to the attributes of our class so let's head back to our human class and we need to define a name and age in a way and let's do this outside of the constructor but we're not going to assign a value just yet so let's say string name we're only going to declare this int edge and double weight and then within the constructor we're going to assign all of these values to each of these variables so right now let's say name equals name and age equals edge and weight equals weight now this actually isn't going to work and i'll show you why so let's attempt to access humanone's name and let's do this with a print line statement system.out.printline to access one of these attributes we type in the name of the object dot and whatever we're trying to access let's attempt to access the name now if we were to display the name it says no well what gives that's because we need to assign each of these values to this specific object and one keyword to assign values to this object is to use the this keyword so when we assign name equals name age equals age and weight equals weight we're going to precede each of these with the keyword this this dot name this dot age and this dot weight so for all intents and purposes when we create an instance of a class when we create an object we're going to imagine or pretend that we're replacing this this keyword with the name of the object so if we're creating an object called human replace this or pretend that we're replacing this with human if we created a second human object this could be human too just pretend that but stick with the keyword of this so now if we were to run this human now has a name now let's create a second human so let's repeat the steps human i'm going to call this human2 and rename human as human one just to keep things simple now we can send different arguments to our constructor so we need to send a name an agent away well a string an integer and a double so for our second human let's call him morty we need to send an integer let's say he's 16 and he weighs 50 kilograms and let's attempt to access human two's name so we can do this within a print line statement human dot name and this should display morty so now the point of constructors is that they allow us to construct objects that have varying attributes and in the last lesson when we were constructing cars we were only able to construct blue corvettes and with the help of constructors we can construct objects that have different qualities so they are still humans they're objects that are instantiated from the human class but they have different attributes that make them unique here's one situation that you might run into now how can you access an object's attributes from within its class itself so we can utilize the this keyword to help us with that so let's pretend that humans have two methods they have an eat method as well as a drink method and let's define these both so for eat let's say void eat and within this method let's create a print line statement that says this person's name is eating so in order to access an object's attributes from within its own class we have to use the this keyword so if we want to display the person's name plus maybe some text such as is eating let's type in this dot name to access this object's name plus is eating so this will print the person's name plus is eating and let's try this so let's say human to which is morty is eating so in order to call this method we'll have human2 use its eat method so this will display morty is eating now let's create a drink method void drink and we will display this person's name is drinking system.out.printline this dot name plus is drinking burke and let's say human one which is rick is going to use the drink function because he likes drinking so human one dot drink and here are the results morty is eating and rick is drinking that's because we stated that human 2 is going to use its eat method and human one is going to use its drink method so if we had each of these objects perform the other method a different method let's say human one is going to use the eat method and human 2 is going to use its drink method so now each of these objects is using a different method this time rick is eating and morty is drinking so that's why constructors are useful they allow us to assign different attributes to each object that we instantiate so that's the basics of constructors if you would like a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of constructors in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
