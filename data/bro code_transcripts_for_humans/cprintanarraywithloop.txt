With timestamps:

00:02 - hey welcome back everybody in this video
00:04 - i'm going to show you how we can loop
00:05 - through and print the elements of an
00:07 - array so i have an array of doubles
00:10 - named prices and i just made up some
00:12 - fictional prices to display one of these
00:15 - elements i can use a printf statement i
00:18 - will use the appropriate format
00:19 - specifier for the elements displayed
00:21 - within this array since this array
00:24 - contains doubles i will use the format
00:26 - specifier for a double then to access
00:28 - one of these elements i will type the
00:30 - name of my array followed by a set of
00:32 - straight brackets then an index number
00:35 - so the first element in an array is zero
00:37 - because computers always start with zero
00:40 - then if i need to display the other
00:41 - elements well i would have to manually
00:43 - type prices at index zero then one two
00:48 - three four so on and so forth so this
00:51 - does work if you have a couple elements
00:52 - but what if you have hundreds this
00:54 - method is not going to be practical a
00:56 - better solution is that we could make a
00:58 - for loop and this for loop will iterate
01:01 - once and display each element of this
01:03 - array so let's create a for loop four
01:06 - parenthesis curly braces and we'll need
01:08 - an index int i i'll set this equal to
01:11 - zero then we'll need a condition for the
01:13 - time being let's set i less than five
01:17 - but later on we're going to replace five
01:18 - with something else and i'll explain
01:20 - that later and then we will increment i
01:22 - by one so then during each iteration
01:25 - let's use this print statement again
01:28 - and make one change instead of setting
01:30 - an index number let's use our index
01:33 - instead then i'm just going to add a new
01:35 - line character after each printf
01:37 - statement
01:38 - so here we go this for loop should
01:40 - iterate five times
01:42 - and it will display the elements within
01:44 - our array
01:45 - so we have 5 10 15 25 20. maybe i'll add
01:48 - a couple extra things to this format
01:50 - specifier let's display two digits and a
01:53 - dollar sign
01:54 - that's much better
01:56 - so this kind of resembles maybe a
01:57 - receipt of some sort like somebody just
01:59 - bought a bunch of items okay now here's
02:01 - one situation what if we add or remove
02:04 - elements from this array let's say that
02:06 - a user purchases one more item for
02:09 - thirty dollars now the way that this for
02:11 - loop is written it's not going to
02:13 - display this last element because we set
02:16 - this for loop to iterate as long as i is
02:19 - less than or equal to five it's not
02:21 - going to display this last element so we
02:24 - would need some way to update this
02:26 - condition
02:27 - a better solution instead of using a
02:29 - number here is that we could calculate
02:32 - the amount of elements within our array
02:34 - and loop that many times
02:36 - and one way in which we could do that is
02:38 - to use the size of operator so let me
02:41 - demonstrate the size of operator real
02:43 - quick it will return the size of an
02:45 - operand in bytes
02:47 - so let's print this
02:49 - so this will be an integer
02:51 - and we will use the size of operator and
02:54 - pass in our array of prices so this size
02:57 - is going to be in bytes
02:59 - so the size of our array in bytes is 48
03:04 - bytes we have six elements made up of
03:06 - doubles each double uses up eight bytes
03:10 - so six times eight is 48. so now let's
03:13 - use the size of operator instead size of
03:17 - prices
03:19 - but we're going to divide the size of
03:20 - our array by the size of one of these
03:23 - elements they're all going to be
03:24 - consistent because they all have the
03:26 - same data type so we will take size of
03:29 - prices divided by
03:31 - the size of one of these elements let's
03:33 - say prices at index zero
03:37 - so 48 divided by
03:40 - eight equals six we will iterate through
03:42 - this for loop six times and here's our
03:45 - array
03:46 - we have 5 10 15 25 20 30 and we can add
03:51 - or remove elements freely and there's no
03:53 - need to update our code because we may
03:55 - not remember to do that later on
03:57 - so yeah that's one way to loop through
04:00 - and print the elements of an array you
04:02 - can use a for loop then use a printf
04:04 - statement and for the index of your
04:07 - array you can use the index of your for
04:09 - loop then if you would like your for
04:11 - loop to calculate how many times it's
04:13 - going to iterate through this array you
04:15 - can use the size of operator passing
04:18 - prices divided by the size of one of the
04:22 - elements and that will calculate how
04:24 - many elements are within your array
04:26 - so yeah that's one way to loop through
04:28 - the elements of an array if you would
04:30 - like a copy of this code i'll post this
04:32 - to the comment section down below and
04:34 - well yeah that's how to loop through and
04:36 - print the elements of an array in c

Cleaned transcript:

hey welcome back everybody in this video i'm going to show you how we can loop through and print the elements of an array so i have an array of doubles named prices and i just made up some fictional prices to display one of these elements i can use a printf statement i will use the appropriate format specifier for the elements displayed within this array since this array contains doubles i will use the format specifier for a double then to access one of these elements i will type the name of my array followed by a set of straight brackets then an index number so the first element in an array is zero because computers always start with zero then if i need to display the other elements well i would have to manually type prices at index zero then one two three four so on and so forth so this does work if you have a couple elements but what if you have hundreds this method is not going to be practical a better solution is that we could make a for loop and this for loop will iterate once and display each element of this array so let's create a for loop four parenthesis curly braces and we'll need an index int i i'll set this equal to zero then we'll need a condition for the time being let's set i less than five but later on we're going to replace five with something else and i'll explain that later and then we will increment i by one so then during each iteration let's use this print statement again and make one change instead of setting an index number let's use our index instead then i'm just going to add a new line character after each printf statement so here we go this for loop should iterate five times and it will display the elements within our array so we have 5 10 15 25 20. maybe i'll add a couple extra things to this format specifier let's display two digits and a dollar sign that's much better so this kind of resembles maybe a receipt of some sort like somebody just bought a bunch of items okay now here's one situation what if we add or remove elements from this array let's say that a user purchases one more item for thirty dollars now the way that this for loop is written it's not going to display this last element because we set this for loop to iterate as long as i is less than or equal to five it's not going to display this last element so we would need some way to update this condition a better solution instead of using a number here is that we could calculate the amount of elements within our array and loop that many times and one way in which we could do that is to use the size of operator so let me demonstrate the size of operator real quick it will return the size of an operand in bytes so let's print this so this will be an integer and we will use the size of operator and pass in our array of prices so this size is going to be in bytes so the size of our array in bytes is 48 bytes we have six elements made up of doubles each double uses up eight bytes so six times eight is 48. so now let's use the size of operator instead size of prices but we're going to divide the size of our array by the size of one of these elements they're all going to be consistent because they all have the same data type so we will take size of prices divided by the size of one of these elements let's say prices at index zero so 48 divided by eight equals six we will iterate through this for loop six times and here's our array we have 5 10 15 25 20 30 and we can add or remove elements freely and there's no need to update our code because we may not remember to do that later on so yeah that's one way to loop through and print the elements of an array you can use a for loop then use a printf statement and for the index of your array you can use the index of your for loop then if you would like your for loop to calculate how many times it's going to iterate through this array you can use the size of operator passing prices divided by the size of one of the elements and that will calculate how many elements are within your array so yeah that's one way to loop through the elements of an array if you would like a copy of this code i'll post this to the comment section down below and well yeah that's how to loop through and print the elements of an array in c
