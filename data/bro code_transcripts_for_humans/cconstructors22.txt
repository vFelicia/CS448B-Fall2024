With timestamps:

00:00 - hey how's it going everybody this row
00:01 - here hope you're doing well and in this
00:03 - video we're going to be discussing
00:04 - constructors in C++ so let's get into it
00:10 - before you reach the end of this video
00:12 - make sure to LIKE comment and subscribe
00:16 - so that we together can challenge and
00:18 - defeat the mighty YouTube algorithm
00:21 - everyone so we're gonna be discussing
00:23 - constructors a constructor is a special
00:26 - function that is automatically called
00:28 - when an object is instantiated I needed
00:31 - to write that down because I wouldn't
00:32 - remember the definition so it's useful
00:35 - for assigning arguments two variables
00:37 - whenever we instantiate an object so
00:39 - based on the last lesson with
00:40 - object-oriented programming we created
00:43 - three humans well we have two now we
00:44 - lost Jerry so we have Rick and we have
00:47 - Morty
00:48 - so you can see that it's a lot of work
00:49 - to manually assign all these values to
00:52 - variables but one thing we can do is
00:54 - that we can create a constructor to take
00:56 - care of that for us so a constructor is
00:59 - automatically called
01:00 - anytime you instantiate an object of
01:02 - that class so if we want to create a new
01:04 - constructor for our human class this is
01:06 - what we're going to type so after all
01:08 - these variable declarations what we're
01:11 - going to type is the name of our class
01:12 - so we're going to type human then a set
01:15 - of parentheses and then a set of curly
01:17 - braces so this is almost identical to a
01:19 - function but we don't need to list a
01:22 - return type now we can actually set up
01:24 - parameters for this constructor so for
01:27 - example we could pass in some of these
01:29 - values that we're assigning to these
01:31 - variables as arguments now and we don't
01:34 - have to do this by hand so we can
01:35 - actually send in the name and age and
01:38 - away so let's do this here next to each
01:40 - of these object names so we're going to
01:43 - set up some parentheses and then we're
01:45 - going to pass in some arguments so we're
01:47 - going to send in the name Rick and the
01:51 - age of 65 and then a weight of 80
01:54 - kilograms so let's do the same thing for
01:57 - Morty then so we're going to change the
02:00 - name send in the age and a weight in
02:06 - kilograms all right so we no longer
02:10 - actually need these because we're going
02:12 - to take care of this in the
02:14 - so within the constructor we need to set
02:16 - up parameters so we're going to need to
02:19 - set up a string variable that's going to
02:22 - function as a name and integer that's
02:25 - going to function as an age and a double
02:28 - value that will function as a weight all
02:34 - right you can see that all the red
02:36 - underline went away now now we can
02:38 - actually assign some of these values to
02:40 - each of these individual objects then so
02:43 - this is what we're gonna type now this
02:45 - is what we're gonna type the keyword
02:46 - this - greater than sign name equals
02:50 - name so this name is whatever we receive
02:54 - as an argument so we're going to follow
02:56 - a similar pattern for the age and the
02:59 - weight so this age equals age and this
03:05 - weight equals weight so these are the
03:10 - values that we're actually receiving and
03:12 - we're assigning these to the variables
03:16 - of the object that is currently using
03:18 - this constructor so if we're
03:20 - instantiating the human one object we're
03:23 - assigning all of these values to the
03:26 - variables of human one and if human two
03:29 - is using this constructor we're
03:31 - assigning all of these values to human
03:34 - two variables so basically replace this
03:38 - word with the variable of whatever
03:40 - object is actually using this
03:43 - constructor so that's a good way of
03:44 - thinking of this so this allows us to
03:46 - actually reuse these statements before
03:49 - we had to like type these out by hand
03:51 - and it's not too bad if we only have two
03:52 - objects but imagine if we have like
03:54 - hundreds we'd be here all day then so we
03:57 - can simply just keep on reusing this
03:58 - code then now let's display all of human
04:01 - ones variables just to prove that I'm
04:03 - not a liar
04:03 - so we'll see out human ones name then
04:09 - we'll end line and let's do the same
04:11 - thing for his age and his weight so
04:15 - human one dot age and human one dot
04:20 - weight I think I'll add maybe years old
04:24 - after the edge
04:27 - and kilograms
04:30 - after the way it so kgs all right let's
04:36 - try it
04:39 - yep Rick is 65 years old
04:42 - anyways 80 kilograms now let's replace
04:45 - this with human - yep marty is 16 years
04:54 - old and is 60 kilograms so now if we
04:58 - ever create a new object we can just
05:00 - pass in some arguments if we want to
05:02 - assign some values right away
05:03 - so if we want to create human 3 and
05:05 - human 3 is Jerry and he will be 45 years
05:11 - old and he will weigh 85 kilograms so
05:14 - whenever we instantiate a new object we
05:17 - can just pass in some values to assign
05:19 - to this objects variables right away
05:21 - then so let's display all of human 3
05:24 - variables at this point and we'll try it
05:27 - out yep Jerry is 45 years old and weighs
05:32 - 85 kilograms okay guys there's one thing
05:35 - I should mention before you go
05:36 - so with C++ it is possible to place a
05:39 - constructor outside of its given class
05:41 - and you can do this with something
05:43 - called a scope resolution operator it's
05:45 - basically these two colon symbols so
05:48 - within a class you can simply have just
05:51 - the constructor and declaration like
05:53 - this and then we can place the rest of
05:55 - the code outside of the class so what
05:58 - you might see is the name of the class
06:00 - followed by the scope resolution
06:01 - operator followed by the name of the
06:04 - class again and then like the rest of
06:07 - the code here so this would also be
06:09 - valid and let's actually try this so you
06:14 - can see that it works just fine so
06:16 - that's really the basics of constructors
06:18 - it's a special function that is
06:20 - automatically called when object is
06:22 - instantiated and a good use for this is
06:25 - assigning arguments to variables right
06:27 - away so instead of assigning all these
06:29 - values by hand we can just pass them to
06:32 - a constructor and the constructor can
06:34 - take care of it for us so that's
06:36 - basically what a constructor is so if
06:38 - you'd like a copy of all the code that
06:40 - we worked
06:40 - I'll post this in the comments down
06:42 - below and your homework for today is to
06:45 - post a constructor in the comments but
06:47 - yeah that is how constructors work in
06:49 - C++ hey you yeah I'm talking to you if
06:54 - you learn something new then you can
06:56 - help me help you in three easy steps
06:59 - by smashing that like button drop a
07:01 - comment down below and subscribe if
07:04 - you'd like to become a fellow bro
07:06 - [Music]

Cleaned transcript:

hey how's it going everybody this row here hope you're doing well and in this video we're going to be discussing constructors in C++ so let's get into it before you reach the end of this video make sure to LIKE comment and subscribe so that we together can challenge and defeat the mighty YouTube algorithm everyone so we're gonna be discussing constructors a constructor is a special function that is automatically called when an object is instantiated I needed to write that down because I wouldn't remember the definition so it's useful for assigning arguments two variables whenever we instantiate an object so based on the last lesson with objectoriented programming we created three humans well we have two now we lost Jerry so we have Rick and we have Morty so you can see that it's a lot of work to manually assign all these values to variables but one thing we can do is that we can create a constructor to take care of that for us so a constructor is automatically called anytime you instantiate an object of that class so if we want to create a new constructor for our human class this is what we're going to type so after all these variable declarations what we're going to type is the name of our class so we're going to type human then a set of parentheses and then a set of curly braces so this is almost identical to a function but we don't need to list a return type now we can actually set up parameters for this constructor so for example we could pass in some of these values that we're assigning to these variables as arguments now and we don't have to do this by hand so we can actually send in the name and age and away so let's do this here next to each of these object names so we're going to set up some parentheses and then we're going to pass in some arguments so we're going to send in the name Rick and the age of 65 and then a weight of 80 kilograms so let's do the same thing for Morty then so we're going to change the name send in the age and a weight in kilograms all right so we no longer actually need these because we're going to take care of this in the so within the constructor we need to set up parameters so we're going to need to set up a string variable that's going to function as a name and integer that's going to function as an age and a double value that will function as a weight all right you can see that all the red underline went away now now we can actually assign some of these values to each of these individual objects then so this is what we're gonna type now this is what we're gonna type the keyword this greater than sign name equals name so this name is whatever we receive as an argument so we're going to follow a similar pattern for the age and the weight so this age equals age and this weight equals weight so these are the values that we're actually receiving and we're assigning these to the variables of the object that is currently using this constructor so if we're instantiating the human one object we're assigning all of these values to the variables of human one and if human two is using this constructor we're assigning all of these values to human two variables so basically replace this word with the variable of whatever object is actually using this constructor so that's a good way of thinking of this so this allows us to actually reuse these statements before we had to like type these out by hand and it's not too bad if we only have two objects but imagine if we have like hundreds we'd be here all day then so we can simply just keep on reusing this code then now let's display all of human ones variables just to prove that I'm not a liar so we'll see out human ones name then we'll end line and let's do the same thing for his age and his weight so human one dot age and human one dot weight I think I'll add maybe years old after the edge and kilograms after the way it so kgs all right let's try it yep Rick is 65 years old anyways 80 kilograms now let's replace this with human yep marty is 16 years old and is 60 kilograms so now if we ever create a new object we can just pass in some arguments if we want to assign some values right away so if we want to create human 3 and human 3 is Jerry and he will be 45 years old and he will weigh 85 kilograms so whenever we instantiate a new object we can just pass in some values to assign to this objects variables right away then so let's display all of human 3 variables at this point and we'll try it out yep Jerry is 45 years old and weighs 85 kilograms okay guys there's one thing I should mention before you go so with C++ it is possible to place a constructor outside of its given class and you can do this with something called a scope resolution operator it's basically these two colon symbols so within a class you can simply have just the constructor and declaration like this and then we can place the rest of the code outside of the class so what you might see is the name of the class followed by the scope resolution operator followed by the name of the class again and then like the rest of the code here so this would also be valid and let's actually try this so you can see that it works just fine so that's really the basics of constructors it's a special function that is automatically called when object is instantiated and a good use for this is assigning arguments to variables right away so instead of assigning all these values by hand we can just pass them to a constructor and the constructor can take care of it for us so that's basically what a constructor is so if you'd like a copy of all the code that we worked I'll post this in the comments down below and your homework for today is to post a constructor in the comments but yeah that is how constructors work in C++ hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro
