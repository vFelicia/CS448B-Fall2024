With timestamps:

00:00 - what is going on everybody so today I
00:02 - got to talk about decorators in Python a
00:04 - decorator is a function that extends the
00:07 - behavior of another function without
00:09 - modifying That Base function we pass the
00:12 - base function as an argument to The
00:14 - Decorator function for example let's say
00:17 - we have a base function of get ice cream
00:19 - and you can pass in a flavor of ice
00:21 - cream well some people might want
00:23 - sprinkles on their ice cream and others
00:25 - may not they might just want plain
00:26 - vanilla well we could add sprinkles by
00:29 - using a decorator we're extending the
00:31 - behavior of a function where we get ice
00:33 - cream where we're adding sprinkles but
00:35 - we may not want to change the base
00:36 - function because some people don't like
00:38 - sprinkles think of decorators that way
00:40 - we're adding something to a base
00:42 - function without changing it here's how
00:44 - to create a decorator let's start with
00:46 - the base function we will create a
00:49 - function to get ice cream there will be
00:53 - no parameters for now all we're going to
00:55 - do is print the following
00:58 - message here is is your ice cream and
01:02 - for fun I'll add an emoji I'll add an
01:04 - ice cream Emoji to call this function
01:07 - all I got to do is call the get ice
01:09 - cream
01:10 - function here is your ice cream here's
01:13 - how to create a
01:15 - decorator a decorator is a function
01:18 - we'll need to Define it Define add
01:23 - sprinkles our decorator function is
01:25 - going to have one parameter a function
01:30 - but we'll just rename it to Funk for
01:31 - short we're going to pass a function to
01:34 - our decorator
01:37 - function within our decorator function
01:39 - we will define an inner function of
01:43 - wrapper currently there's no parameters
01:45 - we'll set that up
01:47 - later within this wrapper function we
01:50 - will call the function that we receive
01:53 - this
01:54 - parameter then we will return our
01:58 - wrapper function up until this point
02:00 - we've been returning values but now
02:02 - we're going to return an entire function
02:05 - here's the basic formula to create a
02:07 - decorator to apply a decorator to a base
02:10 - function preceding that function you're
02:13 - going to add at the name of The
02:15 - Decorator so add sprinkles is a
02:18 - decorator the base function is get ice
02:21 - cream within our decorator how do we
02:23 - want to add sprinkles exactly currently
02:26 - our decorator doesn't do anything here's
02:29 - what happens
02:30 - we just print here is your ice cream
02:33 - let's say that before we're given our
02:34 - ice cream we'll print a statement that
02:37 - we add
02:38 - sprinkles within our decorator imagine
02:41 - that we're replacing calling function
02:43 - with this print
02:45 - statement let's create another print
02:47 - statement where we add sprinkles before
02:51 - it I will print the following
02:56 - message you add sprinkles and I'll add
03:00 - an
03:01 - emoji how about
03:04 - confetti that could resemble
03:06 - sprinkles okay let's see what
03:09 - happens you add sprinkles here is your
03:12 - ice
03:13 - cream we're decorating our base function
03:16 - of get ice cream with a decorator of add
03:19 - sprinkles we're not modifying the base
03:22 - function we're extending it now we have
03:25 - a nested function of wrapper within our
03:27 - decorator it is necessary to have this
03:30 - here's why so I'm not going to call the
03:32 - get ice cream function quite yet so
03:35 - nothing should
03:37 - happen if I was to remove this
03:44 - wrapper well we'll end up calling this
03:46 - function as soon as we apply The
03:49 - Decorator we're not even calling the get
03:51 - ice cream function at all we only want
03:54 - to execute this code when we want ice
03:56 - cream not whenever we apply the
03:58 - decorator
04:00 - that's why we need that wrapper
04:03 - function we'll get ice cream and add
04:06 - sprinkles only when we call that
04:10 - function then at any point in my program
04:12 - if I call the get ice cream
04:15 - function then we get ice cream with
04:19 - sprinkles let's apply more than one
04:22 - decorator we'll create a decorator to
04:24 - add
04:25 - fudge Define add
04:28 - fudge we have one parameter a function
04:31 - which we will rename as Funk we need an
04:34 - inner wrapper
04:37 - function this is so that we don't call
04:39 - this function when we apply a
04:42 - decorator I will
04:46 - print you add
04:52 - fudge close enough we'll add a bar of
04:57 - chocolate then call the base function
04:59 - that we
05:00 - receive then we need to return the
05:02 - wrapper
05:04 - function all right given our base
05:06 - function we can apply more than one
05:09 - decorator let's say that after adding
05:12 - sprinkles we will apply The Decorator
05:15 - where we add fudge so
05:18 - now we have the following output you add
05:21 - sprinkles you add fudge here is your ice
05:25 - cream so with decorators you can apply
05:27 - more than one decorator to a base fun
05:30 - function what if your basee function
05:32 - accepts Arguments for example when we
05:35 - get our ice cream we need to pass in a
05:36 - flavor like
05:40 - vanilla I will set up one parameter of
05:43 - flavor I will convert our print
05:45 - statement to be an F string here is your
05:48 - at a
05:49 - placeholder flavor of ice
05:52 - cream let's run this and see what
05:56 - happens all right we have a type error
06:00 - our wrapper function isn't set up to
06:02 - accept arguments what you'll see within
06:05 - wrapper functions is that they'll have
06:06 - parameters of
06:08 - args and quars to accept any number of
06:11 - arguments and keyword
06:13 - arguments then when you call your base
06:17 - function in this case get ice
06:19 - cream we will also set this up to accept
06:22 - any number of arguments and keyword
06:24 - arguments let's do that within our ad
06:26 - fudge decorator too our wrapper function
06:29 - will accept any number of arguments and
06:31 - keyword arguments same thing goes with
06:34 - the base function and now this should
06:37 - work you add sprinkles you add fudge
06:40 - here is your vanilla ice
06:42 - cream or any other flavor of your
06:45 - choosing like
06:48 - chocolate you add sprinkles you add
06:50 - fudge here is your chocolate ice cream
06:53 - all right everybody so those are
06:55 - decorators they're a function that
06:58 - extend the behavior of a base function
07:01 - in this case get ice cream decorators
07:03 - extend a function without modifying it
07:06 - if you would like to apply a decorator
07:07 - to a function you precede that function
07:10 - when you define it with at the name of
07:12 - The Decorator and you can apply more
07:15 - than one and well everybody that is an
07:17 - introduction to decorators in Python

Cleaned transcript:

what is going on everybody so today I got to talk about decorators in Python a decorator is a function that extends the behavior of another function without modifying That Base function we pass the base function as an argument to The Decorator function for example let's say we have a base function of get ice cream and you can pass in a flavor of ice cream well some people might want sprinkles on their ice cream and others may not they might just want plain vanilla well we could add sprinkles by using a decorator we're extending the behavior of a function where we get ice cream where we're adding sprinkles but we may not want to change the base function because some people don't like sprinkles think of decorators that way we're adding something to a base function without changing it here's how to create a decorator let's start with the base function we will create a function to get ice cream there will be no parameters for now all we're going to do is print the following message here is is your ice cream and for fun I'll add an emoji I'll add an ice cream Emoji to call this function all I got to do is call the get ice cream function here is your ice cream here's how to create a decorator a decorator is a function we'll need to Define it Define add sprinkles our decorator function is going to have one parameter a function but we'll just rename it to Funk for short we're going to pass a function to our decorator function within our decorator function we will define an inner function of wrapper currently there's no parameters we'll set that up later within this wrapper function we will call the function that we receive this parameter then we will return our wrapper function up until this point we've been returning values but now we're going to return an entire function here's the basic formula to create a decorator to apply a decorator to a base function preceding that function you're going to add at the name of The Decorator so add sprinkles is a decorator the base function is get ice cream within our decorator how do we want to add sprinkles exactly currently our decorator doesn't do anything here's what happens we just print here is your ice cream let's say that before we're given our ice cream we'll print a statement that we add sprinkles within our decorator imagine that we're replacing calling function with this print statement let's create another print statement where we add sprinkles before it I will print the following message you add sprinkles and I'll add an emoji how about confetti that could resemble sprinkles okay let's see what happens you add sprinkles here is your ice cream we're decorating our base function of get ice cream with a decorator of add sprinkles we're not modifying the base function we're extending it now we have a nested function of wrapper within our decorator it is necessary to have this here's why so I'm not going to call the get ice cream function quite yet so nothing should happen if I was to remove this wrapper well we'll end up calling this function as soon as we apply The Decorator we're not even calling the get ice cream function at all we only want to execute this code when we want ice cream not whenever we apply the decorator that's why we need that wrapper function we'll get ice cream and add sprinkles only when we call that function then at any point in my program if I call the get ice cream function then we get ice cream with sprinkles let's apply more than one decorator we'll create a decorator to add fudge Define add fudge we have one parameter a function which we will rename as Funk we need an inner wrapper function this is so that we don't call this function when we apply a decorator I will print you add fudge close enough we'll add a bar of chocolate then call the base function that we receive then we need to return the wrapper function all right given our base function we can apply more than one decorator let's say that after adding sprinkles we will apply The Decorator where we add fudge so now we have the following output you add sprinkles you add fudge here is your ice cream so with decorators you can apply more than one decorator to a base fun function what if your basee function accepts Arguments for example when we get our ice cream we need to pass in a flavor like vanilla I will set up one parameter of flavor I will convert our print statement to be an F string here is your at a placeholder flavor of ice cream let's run this and see what happens all right we have a type error our wrapper function isn't set up to accept arguments what you'll see within wrapper functions is that they'll have parameters of args and quars to accept any number of arguments and keyword arguments then when you call your base function in this case get ice cream we will also set this up to accept any number of arguments and keyword arguments let's do that within our ad fudge decorator too our wrapper function will accept any number of arguments and keyword arguments same thing goes with the base function and now this should work you add sprinkles you add fudge here is your vanilla ice cream or any other flavor of your choosing like chocolate you add sprinkles you add fudge here is your chocolate ice cream all right everybody so those are decorators they're a function that extend the behavior of a base function in this case get ice cream decorators extend a function without modifying it if you would like to apply a decorator to a function you precede that function when you define it with at the name of The Decorator and you can apply more than one and well everybody that is an introduction to decorators in Python
