With timestamps:

00:02 - all right what's going on abstract
00:03 - classes
00:04 - abstract is a keyword that we can apply
00:06 - to classes properties and
00:08 - methods but in this video we're going to
00:10 - focus on abstract classes
00:12 - now you can apply the abstract keyword
00:14 - it's a modifier
00:16 - to a class and that indicates that this
00:18 - class
00:19 - is missing components or is an
00:21 - incomplete implementation
00:23 - so let's take a look we're using
00:24 - inheritance here so i have a class
00:26 - vehicle vehicle has a speed field
00:28 - as well as a go method and there's three
00:31 - children classes car
00:33 - bicycle and boat and these are complete
00:36 - implementations
00:37 - so car has four wheels and a max speed
00:39 - of 500
00:40 - bicycle has two wheels a max speed of 50
00:43 - and boat has zero wheels and a max speed
00:45 - of 100
00:46 - i just made up some numbers for the max
00:47 - speed i can create a car object
00:50 - bicycle object and boat object just fine
00:52 - these are complete implementations
00:54 - but unfortunately i can also create a
00:56 - vehicle object
00:58 - vehicle vehicle equals new vehicle
01:01 - so vehicle is incomplete it's missing a
01:04 - number of wheels and a max speed
01:06 - so imagine that we're having a race and
01:08 - somebody decides to pick the
01:10 - vehicle but we want somebody to pick a
01:12 - specific
01:13 - implementation of a vehicle like a car
01:16 - bicycle or boat
01:17 - i would like to prevent people from
01:18 - creating generic vehicle objects
01:21 - so this is kind of like imagine somebody
01:23 - picks the invisible vehicle and like a
01:25 - racing game
01:26 - or something one way in which i can
01:27 - prevent people from instantiating
01:29 - vehicle objects because it's not
01:31 - finished it's an incomplete
01:32 - implementation
01:33 - is to precede this class definition with
01:36 - this abstract keyword
01:38 - so if i precede class with abstract i
01:40 - can no longer create a
01:42 - vehicle object cannot create an instance
01:44 - of the abstract
01:45 - type or interface vehicle so that adds a
01:49 - little bit of security to our programs
01:50 - if there's a class that you do not want
01:52 - to be able to instantiate objects from
01:54 - you can just precede that class
01:56 - definition with the abstract keyword
01:58 - and you cannot create an object from
02:00 - that class
02:01 - and that's basically what the abstract
02:03 - modifier does we can indicate that a
02:05 - class
02:06 - we can also apply this to properties and
02:08 - methods as well but that's a video for
02:10 - another day
02:11 - so when we precede a class definition
02:14 - with abstract
02:15 - we are indicating that that class is
02:17 - missing components
02:18 - or is incomplete so we should not be
02:20 - able to instantiate
02:21 - objects from this class which adds a
02:23 - little bit of security so yeah
02:25 - that's the abstract keyword if you found
02:27 - this video helpful help me out by
02:28 - smashing that like button
02:30 - leave a random comment down below and
02:31 - well yeah that's the abstract modifier
02:34 - in c-sharp

Cleaned transcript:

all right what's going on abstract classes abstract is a keyword that we can apply to classes properties and methods but in this video we're going to focus on abstract classes now you can apply the abstract keyword it's a modifier to a class and that indicates that this class is missing components or is an incomplete implementation so let's take a look we're using inheritance here so i have a class vehicle vehicle has a speed field as well as a go method and there's three children classes car bicycle and boat and these are complete implementations so car has four wheels and a max speed of 500 bicycle has two wheels a max speed of 50 and boat has zero wheels and a max speed of 100 i just made up some numbers for the max speed i can create a car object bicycle object and boat object just fine these are complete implementations but unfortunately i can also create a vehicle object vehicle vehicle equals new vehicle so vehicle is incomplete it's missing a number of wheels and a max speed so imagine that we're having a race and somebody decides to pick the vehicle but we want somebody to pick a specific implementation of a vehicle like a car bicycle or boat i would like to prevent people from creating generic vehicle objects so this is kind of like imagine somebody picks the invisible vehicle and like a racing game or something one way in which i can prevent people from instantiating vehicle objects because it's not finished it's an incomplete implementation is to precede this class definition with this abstract keyword so if i precede class with abstract i can no longer create a vehicle object cannot create an instance of the abstract type or interface vehicle so that adds a little bit of security to our programs if there's a class that you do not want to be able to instantiate objects from you can just precede that class definition with the abstract keyword and you cannot create an object from that class and that's basically what the abstract modifier does we can indicate that a class we can also apply this to properties and methods as well but that's a video for another day so when we precede a class definition with abstract we are indicating that that class is missing components or is incomplete so we should not be able to instantiate objects from this class which adds a little bit of security so yeah that's the abstract keyword if you found this video helpful help me out by smashing that like button leave a random comment down below and well yeah that's the abstract modifier in csharp
