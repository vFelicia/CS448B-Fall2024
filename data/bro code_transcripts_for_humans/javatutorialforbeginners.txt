With timestamps:

00:00 - how's it going everybody it's bro hope
00:02 - you're doing well
00:03 - and in this video i'm going to teach you
00:04 - guys everything you need to know to get
00:06 - started with java so
00:07 - sit back relax and enjoy the show
00:13 - if you wouldn't mind please like comment
00:15 - and subscribe
00:16 - one like equals one prayer for the
00:18 - youtube algorithm
00:20 - here's an outline of the topics covered
00:22 - in this video if you would like to skip
00:24 - ahead to a certain section
00:25 - feel free to click on any of the
00:27 - timestamps posted in the description
00:29 - also at the end of this video we're
00:30 - going to be discussing some tips and
00:32 - tricks
00:33 - so be sure to watch until the very end
00:35 - i'll give you three reasons why you need
00:37 - to learn java besides being one of the
00:39 - top three most popular programming
00:41 - languages worldwide
00:42 - java is an extremely flexible language
00:44 - it's used extensively by
00:46 - business enterprises android apps games
00:49 - and if you learn java you could land a
00:51 - job as a java developer
00:53 - according to glassdoor entry-level java
00:55 - developers have an average starting
00:57 - salary
00:58 - of 70 000 that's nothing to sneeze at
01:01 - so why not learn java are you still here
01:03 - okay cool
01:04 - let's begin with the basics computer
01:06 - languages are on a spectrum between
01:08 - being high level
01:09 - and low level computers only understand
01:12 - binary it's referred to as machine code
01:14 - it's a low level format that a machine
01:17 - can understand
01:18 - however humans have difficulty reading
01:20 - binary since it's all ones and zeros
01:22 - to create machine code we write in a
01:24 - format called source code
01:26 - which is understandable by humans and
01:28 - compile
01:29 - to machine code when we create
01:31 - javasource code the file ends with a
01:33 - dot java file extension think of
01:36 - compiling code as
01:37 - transforming source code to machine code
01:40 - we do this because machines can't read
01:42 - source code and vice versa
01:44 - humans have trouble reading machine code
01:46 - unless you're a robot or an android or
01:47 - something
01:48 - however when we compile our source code
01:51 - to machine code it's
01:52 - machine specific if we write source code
01:54 - and compile on a mac
01:56 - we can only run that code on a mac and
01:59 - the same concept
02:00 - applies for pcs although the java
02:02 - language has a solution for this problem
02:05 - with java we have an intermediary step
02:08 - where we can compile our source code to
02:10 - a format called
02:11 - bytecode bytecode is cross platform and
02:14 - ends with a
02:15 - dot class file extension here's an
02:17 - example of java source code
02:19 - and here's an example of that same
02:21 - source code after we compile it to
02:23 - bytecode
02:23 - it's kind of funky right since bytecode
02:25 - is cross-platform you could write your
02:27 - code on a mac
02:28 - and then send your bytecode file to your
02:30 - friend who can then run it on their pc
02:33 - using a jvm to translate the bytecode
02:36 - to machine code but we are going to need
02:38 - the help of a jvm to translate bytecode
02:41 - to machine code but where can we get a
02:43 - jvm well it's included with a
02:45 - jdk and what is a jdk well
02:48 - jdk is an acronym for java development
02:51 - kit
02:52 - it contains developers tools to help us
02:54 - code as well as a
02:55 - jre a java runtime environment which
02:58 - contains a library
03:00 - toolkits and our jvm which is another
03:03 - acronym
03:04 - for java virtual machine which
03:06 - translates by code for us
03:08 - to machine code so all you need to worry
03:10 - about
03:11 - is downloading a jdk and everything else
03:13 - will be included
03:14 - and now that we know what a jdk is it's
03:17 - time to download
03:18 - one so open up the internet and go to
03:20 - any search engine
03:21 - and look this up java jdk download
03:24 - go to the first link java se downloads
03:27 - sc stands for
03:29 - standard edition go to
03:32 - jdk download scroll down and find the
03:35 - appropriate file
03:36 - for your operating system since i'm
03:38 - running windows i'm going to download
03:40 - this exe version
03:43 - agree to whatever and download
03:48 - and when this finishes downloading i'm
03:50 - going to open this
03:51 - open when done on my computer i
03:53 - currently have a jdk
03:55 - already installed but i'm going to go
03:56 - ahead and reinstall it for the sake of
03:58 - this video click
04:00 - next next then wait a little bit
04:05 - and close i would also recommend
04:09 - an ide that's another acronym and it
04:11 - stands for
04:12 - integrated development environment think
04:14 - of it as software that helps us write
04:17 - other software
04:18 - you could write code with a text editor
04:20 - such as notepad
04:21 - and then compile the text file but doing
04:24 - so is not really beginner friendly
04:26 - so an ide provides an interface for us
04:29 - to write code
04:30 - check for errors compile and run code
04:33 - there's two ides that i would recommend
04:35 - they are both eclipse or intellij idea
04:39 - it doesn't matter which one you download
04:40 - because the code that we write is still
04:42 - the same
04:43 - so let's download an ide now it's time
04:45 - to install the
04:46 - ide i would recommend either the eclipse
04:49 - ide
04:50 - or intellij idea i'm more comfortable
04:52 - with eclipse so i'm going to stick with
04:54 - the clips
04:55 - so go back to the interwebs and look up
04:57 - either
04:58 - eclipse ide or intellij idea ide
05:02 - so i'm going to look up the clips click
05:04 - the first link
05:05 - click this orange download button go to
05:08 - download packages and select eclipse ide
05:12 - for java developers
05:13 - and select the correct download for your
05:16 - machine i'm going to select the download
05:18 - for windows
05:20 - and click download and then just wait a
05:23 - little bit again like usual
05:24 - for me this is currently a zip file so i
05:27 - need to select this file
05:29 - and extract all
05:34 - with the newly extracted folder navigate
05:36 - to this eclipse application
05:38 - so you can select this to launch eclipse
05:41 - for convenience i'm going to create a
05:43 - desktop shortcut
05:44 - so for me i'm going to go to where is it
05:48 - send to create desktop shortcut and then
05:50 - click to launch
05:56 - you can select a workspace i'm going to
05:58 - use the default and
05:59 - click launch
06:03 - we are now within eclipse and we can
06:05 - begin a new project
06:06 - we are now ready to rock and roll so
06:08 - let's begin by creating our first
06:10 - java program but in order to do so we
06:13 - need to create a
06:14 - java project if you're brought to this
06:16 - welcome screen
06:17 - you can close out of this because it's
06:19 - annoying and in order to create a java
06:21 - project
06:22 - navigate to your package explorer and
06:24 - select create a java project
06:26 - if you're missing the package explorer
06:28 - you can go to file
06:29 - new dropper project and that will take
06:32 - you to the same place
06:33 - we need a unique name for this java
06:35 - project i will call this
06:37 - my first program
06:41 - and i will want to configure the jre
06:45 - the java runtime environment and we
06:47 - downloaded that
06:48 - with the jdk because the jre is a
06:52 - component
06:52 - of the jdk so i'm currently using 13.
06:56 - i'm going to change this to 15. that was
06:58 - the one that i more recently
07:00 - downloaded just now so go to configure
07:03 - jres and i'm going to click add
07:07 - select standard vm vm is virtual machine
07:11 - click next go to jre home
07:15 - go to directory and i'm going to make
07:18 - sure that i'm selecting the most
07:20 - recent jdk for me that is 15
07:23 - select folder finish apply
07:27 - apply and close then finish
07:31 - if this window pops up you can select
07:33 - don't create that's to create a module
07:35 - if you look to the left hand side within
07:36 - the projects folder we now have a java
07:39 - project called
07:40 - my first program but we will need to add
07:42 - what is called
07:43 - a class to this project a class is a
07:46 - collection
07:47 - of related code so in order to add a
07:49 - class to this project i'm going to
07:51 - select this project folder
07:53 - then go to file new class
07:56 - and we need a unique name for this class
08:00 - i usually call this main but you can
08:02 - name it whatever you want
08:03 - and then we are going to check this
08:06 - public static
08:07 - void main checkbox and then click finish
08:11 - with that out of the way take a look
08:13 - back within your project folder and you
08:14 - should now have
08:15 - a java file that shares the same name as
08:18 - your class name
08:19 - my class name is named main therefore
08:22 - my java file is also called main so
08:26 - this has the dot java file extension
08:29 - and with what we discussed before this
08:31 - is source code
08:32 - it's in a format that humans can easily
08:34 - read and understand
08:36 - and when we compile this source code to
08:39 - bytecode
08:40 - we're going to create a new file that
08:42 - has the
08:43 - dot class file extension and with that
08:46 - bytecode file
08:47 - we can run that and translate it using a
08:49 - jvm
08:50 - a java virtual machine here's our java
08:53 - file and we have
08:54 - our class and mine is called main so all
08:56 - the class
08:57 - is is that it's a collection of related
08:59 - code
09:00 - we won't be exploring in depth on the
09:02 - topic of classes until we reach the
09:04 - subject of
09:04 - object-oriented programming which is
09:07 - about 20 videos into this playlist
09:08 - so you have some time so this is our
09:11 - class mine is called main anything
09:13 - within the outer set of curly braces
09:15 - belongs to the class and is contained
09:18 - within
09:19 - and within our class we have what is
09:21 - called a main
09:22 - method our program won't run without
09:24 - this method because when we run our code
09:27 - we begin by calling the main method so
09:29 - if we were to compile and run this code
09:31 - you can do so by clicking the screenplay
09:34 - button
09:35 - all output is displayed to the console
09:37 - window and nothing appears to happen
09:39 - because we haven't written anything yet
09:41 - so if we were to remove this main method
09:44 - and tried to do this again
09:47 - we would encounter an error because our
09:49 - main method was not
09:51 - found in the class main it's asking us
09:53 - to please define
09:54 - the main method now looking back when we
09:57 - created our class we went to
09:59 - file new class and in order to generate
10:02 - the main method we checked this checkbox
10:04 - here
10:05 - that states public static void main
10:08 - so the main method generated for us when
10:11 - we created
10:11 - this class but if we're missing it we
10:13 - can easily just type it in
10:15 - a textbook that i read in college said
10:17 - to think of the main method
10:19 - as a magical spell or incantation that
10:21 - we have to say
10:22 - in order to get this program to run so
10:25 - we are currently missing a main method
10:26 - but we can easily just type it in
10:28 - so repeat after me public static
10:32 - void main then we need some parentheses
10:35 - string straight braces args and then
10:38 - a set of curly braces and that is it we
10:41 - now have a main method
10:43 - and our program runs and compiles just
10:46 - fine
10:47 - so any code within the main method will
10:50 - execute starting at the top
10:51 - and then work its way down so with the
10:54 - main method
10:55 - any code you place at the top will be
10:57 - executed first
10:58 - so let's print something to the console
11:00 - window in order to display some text
11:02 - all you have to do is type this system
11:05 - with a capital s dot out
11:09 - dot print then you need a set of
11:12 - parentheses
11:13 - and then a semicolon at the end so
11:16 - within the parentheses
11:17 - of this print method we can type some
11:20 - text to display to the console window
11:22 - but we need to make sure that our text
11:25 - is within a set of double quotes
11:27 - and we can display some text let's say
11:30 - i don't know what's a food you like i
11:33 - love
11:34 - pizza so if i were to run and compile
11:36 - this
11:37 - it's now going to print i love pizza to
11:40 - the console window
11:41 - let's say that we would like to display
11:43 - another line of text
11:44 - directly underneath the first we can
11:46 - accomplish that by using
11:47 - another print statement so for
11:50 - convenience i'm going to copy this first
11:52 - line
11:52 - paste it directly underneath and display
11:54 - some other text
11:56 - such as it's really good
12:00 - so when i compile and run this pay
12:02 - attention the output is
12:04 - one long line of text the reason that
12:07 - this is all displaying as
12:08 - one long line of text is because after
12:11 - printing the first statement
12:13 - our cursor does not move down to the
12:15 - next line
12:16 - in order to do so we could use a print
12:19 - ln statement
12:20 - short for print line it's as if we're
12:23 - hitting
12:24 - enter when we finish outputting our text
12:26 - so let's try this again
12:27 - using a print ln statement
12:31 - and now each line of text is on its own
12:34 - individual line so that's what
12:36 - distinguishes a print and
12:38 - print line statement a print line will
12:40 - add a new line character as if you're
12:42 - hitting enter when you finish outputting
12:44 - your text
12:44 - whereas a print statement does not so
12:47 - that's the difference between the two
12:49 - an alternative to using a print line
12:51 - statement is that we could stick with
12:53 - the standard print statement and at the
12:54 - end of our text add what is referred to
12:57 - as an escape sequence for a new
12:58 - character
12:59 - now an escape sequence is a character
13:02 - preceded with
13:03 - a backslash and one of a few characters
13:05 - that follows directly afterwards
13:07 - this is an escape sequence for a new
13:09 - line character
13:10 - when we add this escape sequence for a
13:12 - new line it's as if we're hitting enter
13:14 - wherever we place
13:15 - this escape sequence so within our
13:18 - string of text
13:18 - for our first line at the end we're
13:20 - going to add
13:22 - backslash n and this will have the same
13:24 - effect as
13:25 - a print line statement it's going to
13:27 - display our text
13:28 - and then move the cursor down to the
13:29 - next line as you can see there is no
13:31 - additional change to the output within
13:33 - the console window
13:34 - now what if we reverted our print
13:36 - statements back to print line statements
13:38 - and kept the additional escape sequence
13:40 - in for a new line character
13:42 - well we're going to have an extra empty
13:44 - line of text because we're displaying
13:46 - our line of output plus an additional
13:49 - character for a
13:50 - new line and then we're hitting enter at
13:52 - the end via
13:53 - the print line statement so we're going
13:55 - to have an additional empty line between
13:57 - these two lines of text if we were to do
13:59 - that
14:00 - so a few other escape sequences that you
14:02 - might be interested in
14:03 - include the following a backslash t will
14:06 - add a tab
14:07 - so let's precede our text with an escape
14:09 - sequence for
14:10 - a tab which is backslash t
14:13 - so this is if we're hitting tab before
14:16 - displaying our text
14:17 - and we now have some empty space
14:19 - preceding our line of output
14:21 - if you need to put something within
14:23 - quotes let's try to do so normally
14:25 - so our compiler is actually going to be
14:27 - confused because we cannot normally add
14:30 - a set of quotes because our text already
14:33 - needs to be surrounded with quotes
14:35 - so if we need to literally display some
14:37 - quotes
14:38 - some double quotes we need to precede
14:40 - our double quotes with
14:42 - an escape sequence so backslash
14:45 - then quotes so this will allow us to
14:47 - literally
14:48 - print some double quotes so we're going
14:50 - to surround our first line of text
14:52 - with some double quotes now and if you
14:55 - need to display
14:56 - a backslash then you need to use
14:59 - double backslashes because if you use
15:02 - just one your compiler thinks you're
15:04 - trying to use an escape sequence
15:06 - and that's how to display a backslash in
15:08 - summary anything preceding with a
15:10 - backslash is the beginning of an escape
15:13 - sequence and there's one of a multitude
15:15 - of characters
15:15 - that could follow afterwards and
15:17 - depending on the character
15:19 - this has special meaning for your
15:20 - compiler to do something specific
15:23 - now anything that is following two
15:25 - forward slashes
15:26 - is the beginning of a single line
15:28 - comment i could write
15:30 - this is a comment and this line of text
15:33 - is going to be ignored by the compiler
15:35 - so there's going to be
15:37 - no change to this program with the
15:39 - additional comment
15:40 - anything that is a comment is ignored by
15:42 - the compiler so it's useful if you need
15:44 - to leave yourself a note
15:45 - or for somebody else that's looking over
15:47 - your code if you need a multi-line
15:49 - comment
15:50 - that is a forward slash followed by an
15:52 - asterisk
15:54 - and anything up to an asterisk and
15:57 - another forward slash
15:58 - will be the bounds of this comment so i
16:00 - could write
16:02 - on a new line for each word this is a
16:05 - comment and all of this will also be
16:08 - ignored by the compiler
16:09 - so that's how to write a multi-line
16:12 - comment a forward slash and an asterisk
16:15 - and anything up to another asterisk and
16:17 - forward slash
16:19 - so those are comments alright ladies and
16:21 - gentlemen it's time for this section on
16:23 - tips and tricks and for my first trick
16:25 - i'm going to change the color scheme of
16:27 - my ide
16:28 - we're currently using the light theme
16:30 - but i much prefer the dark theme
16:31 - i'm going to be joining the dark side so
16:34 - in order to change
16:35 - the color scheme of your ide go to if
16:37 - you're using eclipse
16:38 - window preferences under the general tab
16:42 - go to appearance theme and you can
16:45 - change the theme here
16:47 - i will click dark i'm going to select
16:49 - apply
16:51 - okay and then apply and close so the
16:54 - dark theme is great if you want to feel
16:55 - like a pretend elite hacker for my next
16:58 - trick i'm going to change
16:59 - the font color as well as the background
17:01 - color of my console window in order to
17:03 - do so
17:04 - head back to window preferences
17:07 - under run debug go to console and you
17:10 - can change the color schemes here
17:12 - i'm going to change the text color to a
17:14 - bright green
17:15 - click ok as well as the background color
17:17 - to
17:18 - a slightly lighter shade of black
17:21 - that should be good when you're finished
17:24 - click apply
17:25 - and then apply and close and you may
17:26 - need to run this again to see the
17:28 - changes
17:28 - so that's how to change the font color
17:30 - as well as the background
17:32 - color of your console window so it's
17:34 - somewhat tedious to have to write a
17:36 - print line statement correct
17:37 - system dot out dot print line normally
17:40 - that's a lot to type
17:41 - so a shortcut would be to type sys out
17:44 - then hold control space and your ide
17:47 - will auto generate the rest of this
17:49 - print line statement for you
17:50 - let's move on to trick number four let's
17:53 - say that we have
17:54 - hundreds of different print line
17:56 - statements and we need to change the
17:58 - text
17:58 - to print because we made a mistake so
18:01 - there's a feature
18:02 - where we can replace some text in your
18:04 - program with another
18:06 - so let's pretend we would like to
18:07 - replace print line with print
18:09 - so go to edit find replace and we can
18:13 - replace
18:13 - some text with something else let's find
18:16 - each instance of print line
18:18 - and replace this with print then click
18:22 - replace all so that will take care of
18:24 - all that for you
18:25 - let's move on to some final tips so with
18:27 - spaces spaces don't make much of a
18:29 - difference within your code for example
18:32 - after this dot and my print portion
18:35 - of this print statement i could add a
18:37 - bunch of spaces
18:38 - for no reason and this would run and
18:40 - compile just fine
18:42 - i'm not sure why you would do that but
18:44 - that's just to reinforce the point that
18:45 - spaces don't make much of a difference
18:47 - unless you're using a space to split up
18:50 - some keywords
18:51 - then you might run into an issue or if
18:53 - you're adding space to a string
18:55 - well then that's going to have a
18:56 - noticeable effect so spaces
18:58 - for the most part don't really matter
19:00 - too much depending on where they are
19:02 - here's a trick on zooming in
19:03 - or out hold control minus to zoom out or
19:07 - control plus
19:07 - to zoom in or you could go to window
19:10 - editor
19:11 - then zoom in or zoom out within this
19:13 - menu
19:14 - here's my last tip for you let's say you
19:16 - accidentally close out of your package
19:18 - explorer
19:19 - or your console window you can easily
19:21 - bring those back by going to
19:23 - window show view and then they are all
19:25 - listed here
19:26 - so i would like to bring back my package
19:28 - explorer as well as my console window
19:31 - alright guys and gals you should be
19:33 - ready to get started with java be sure
19:35 - to check out the full 100 video playlist
19:37 - as well
19:38 - and if you could do me a small tiny
19:40 - favor i would
19:41 - greatly appreciate it if you could help
19:43 - me defeat the youtube algorithm by
19:45 - smashing the like button drop a comment
19:48 - down below
19:49 - and subscribe if you'd like to become a
19:50 - fellow bro
19:52 - hey you yeah i'm talking to you if you
19:55 - learn something new
19:56 - then you can help me help you in three
19:59 - easy steps
20:00 - by smashing that like button drop a
20:02 - comment down below
20:04 - and subscribe if you'd like to become a
20:06 - fellow bro
20:21 - [Music]
20:27 - you

Cleaned transcript:

how's it going everybody it's bro hope you're doing well and in this video i'm going to teach you guys everything you need to know to get started with java so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm here's an outline of the topics covered in this video if you would like to skip ahead to a certain section feel free to click on any of the timestamps posted in the description also at the end of this video we're going to be discussing some tips and tricks so be sure to watch until the very end i'll give you three reasons why you need to learn java besides being one of the top three most popular programming languages worldwide java is an extremely flexible language it's used extensively by business enterprises android apps games and if you learn java you could land a job as a java developer according to glassdoor entrylevel java developers have an average starting salary of 70 000 that's nothing to sneeze at so why not learn java are you still here okay cool let's begin with the basics computer languages are on a spectrum between being high level and low level computers only understand binary it's referred to as machine code it's a low level format that a machine can understand however humans have difficulty reading binary since it's all ones and zeros to create machine code we write in a format called source code which is understandable by humans and compile to machine code when we create javasource code the file ends with a dot java file extension think of compiling code as transforming source code to machine code we do this because machines can't read source code and vice versa humans have trouble reading machine code unless you're a robot or an android or something however when we compile our source code to machine code it's machine specific if we write source code and compile on a mac we can only run that code on a mac and the same concept applies for pcs although the java language has a solution for this problem with java we have an intermediary step where we can compile our source code to a format called bytecode bytecode is cross platform and ends with a dot class file extension here's an example of java source code and here's an example of that same source code after we compile it to bytecode it's kind of funky right since bytecode is crossplatform you could write your code on a mac and then send your bytecode file to your friend who can then run it on their pc using a jvm to translate the bytecode to machine code but we are going to need the help of a jvm to translate bytecode to machine code but where can we get a jvm well it's included with a jdk and what is a jdk well jdk is an acronym for java development kit it contains developers tools to help us code as well as a jre a java runtime environment which contains a library toolkits and our jvm which is another acronym for java virtual machine which translates by code for us to machine code so all you need to worry about is downloading a jdk and everything else will be included and now that we know what a jdk is it's time to download one so open up the internet and go to any search engine and look this up java jdk download go to the first link java se downloads sc stands for standard edition go to jdk download scroll down and find the appropriate file for your operating system since i'm running windows i'm going to download this exe version agree to whatever and download and when this finishes downloading i'm going to open this open when done on my computer i currently have a jdk already installed but i'm going to go ahead and reinstall it for the sake of this video click next next then wait a little bit and close i would also recommend an ide that's another acronym and it stands for integrated development environment think of it as software that helps us write other software you could write code with a text editor such as notepad and then compile the text file but doing so is not really beginner friendly so an ide provides an interface for us to write code check for errors compile and run code there's two ides that i would recommend they are both eclipse or intellij idea it doesn't matter which one you download because the code that we write is still the same so let's download an ide now it's time to install the ide i would recommend either the eclipse ide or intellij idea i'm more comfortable with eclipse so i'm going to stick with the clips so go back to the interwebs and look up either eclipse ide or intellij idea ide so i'm going to look up the clips click the first link click this orange download button go to download packages and select eclipse ide for java developers and select the correct download for your machine i'm going to select the download for windows and click download and then just wait a little bit again like usual for me this is currently a zip file so i need to select this file and extract all with the newly extracted folder navigate to this eclipse application so you can select this to launch eclipse for convenience i'm going to create a desktop shortcut so for me i'm going to go to where is it send to create desktop shortcut and then click to launch you can select a workspace i'm going to use the default and click launch we are now within eclipse and we can begin a new project we are now ready to rock and roll so let's begin by creating our first java program but in order to do so we need to create a java project if you're brought to this welcome screen you can close out of this because it's annoying and in order to create a java project navigate to your package explorer and select create a java project if you're missing the package explorer you can go to file new dropper project and that will take you to the same place we need a unique name for this java project i will call this my first program and i will want to configure the jre the java runtime environment and we downloaded that with the jdk because the jre is a component of the jdk so i'm currently using 13. i'm going to change this to 15. that was the one that i more recently downloaded just now so go to configure jres and i'm going to click add select standard vm vm is virtual machine click next go to jre home go to directory and i'm going to make sure that i'm selecting the most recent jdk for me that is 15 select folder finish apply apply and close then finish if this window pops up you can select don't create that's to create a module if you look to the left hand side within the projects folder we now have a java project called my first program but we will need to add what is called a class to this project a class is a collection of related code so in order to add a class to this project i'm going to select this project folder then go to file new class and we need a unique name for this class i usually call this main but you can name it whatever you want and then we are going to check this public static void main checkbox and then click finish with that out of the way take a look back within your project folder and you should now have a java file that shares the same name as your class name my class name is named main therefore my java file is also called main so this has the dot java file extension and with what we discussed before this is source code it's in a format that humans can easily read and understand and when we compile this source code to bytecode we're going to create a new file that has the dot class file extension and with that bytecode file we can run that and translate it using a jvm a java virtual machine here's our java file and we have our class and mine is called main so all the class is is that it's a collection of related code we won't be exploring in depth on the topic of classes until we reach the subject of objectoriented programming which is about 20 videos into this playlist so you have some time so this is our class mine is called main anything within the outer set of curly braces belongs to the class and is contained within and within our class we have what is called a main method our program won't run without this method because when we run our code we begin by calling the main method so if we were to compile and run this code you can do so by clicking the screenplay button all output is displayed to the console window and nothing appears to happen because we haven't written anything yet so if we were to remove this main method and tried to do this again we would encounter an error because our main method was not found in the class main it's asking us to please define the main method now looking back when we created our class we went to file new class and in order to generate the main method we checked this checkbox here that states public static void main so the main method generated for us when we created this class but if we're missing it we can easily just type it in a textbook that i read in college said to think of the main method as a magical spell or incantation that we have to say in order to get this program to run so we are currently missing a main method but we can easily just type it in so repeat after me public static void main then we need some parentheses string straight braces args and then a set of curly braces and that is it we now have a main method and our program runs and compiles just fine so any code within the main method will execute starting at the top and then work its way down so with the main method any code you place at the top will be executed first so let's print something to the console window in order to display some text all you have to do is type this system with a capital s dot out dot print then you need a set of parentheses and then a semicolon at the end so within the parentheses of this print method we can type some text to display to the console window but we need to make sure that our text is within a set of double quotes and we can display some text let's say i don't know what's a food you like i love pizza so if i were to run and compile this it's now going to print i love pizza to the console window let's say that we would like to display another line of text directly underneath the first we can accomplish that by using another print statement so for convenience i'm going to copy this first line paste it directly underneath and display some other text such as it's really good so when i compile and run this pay attention the output is one long line of text the reason that this is all displaying as one long line of text is because after printing the first statement our cursor does not move down to the next line in order to do so we could use a print ln statement short for print line it's as if we're hitting enter when we finish outputting our text so let's try this again using a print ln statement and now each line of text is on its own individual line so that's what distinguishes a print and print line statement a print line will add a new line character as if you're hitting enter when you finish outputting your text whereas a print statement does not so that's the difference between the two an alternative to using a print line statement is that we could stick with the standard print statement and at the end of our text add what is referred to as an escape sequence for a new character now an escape sequence is a character preceded with a backslash and one of a few characters that follows directly afterwards this is an escape sequence for a new line character when we add this escape sequence for a new line it's as if we're hitting enter wherever we place this escape sequence so within our string of text for our first line at the end we're going to add backslash n and this will have the same effect as a print line statement it's going to display our text and then move the cursor down to the next line as you can see there is no additional change to the output within the console window now what if we reverted our print statements back to print line statements and kept the additional escape sequence in for a new line character well we're going to have an extra empty line of text because we're displaying our line of output plus an additional character for a new line and then we're hitting enter at the end via the print line statement so we're going to have an additional empty line between these two lines of text if we were to do that so a few other escape sequences that you might be interested in include the following a backslash t will add a tab so let's precede our text with an escape sequence for a tab which is backslash t so this is if we're hitting tab before displaying our text and we now have some empty space preceding our line of output if you need to put something within quotes let's try to do so normally so our compiler is actually going to be confused because we cannot normally add a set of quotes because our text already needs to be surrounded with quotes so if we need to literally display some quotes some double quotes we need to precede our double quotes with an escape sequence so backslash then quotes so this will allow us to literally print some double quotes so we're going to surround our first line of text with some double quotes now and if you need to display a backslash then you need to use double backslashes because if you use just one your compiler thinks you're trying to use an escape sequence and that's how to display a backslash in summary anything preceding with a backslash is the beginning of an escape sequence and there's one of a multitude of characters that could follow afterwards and depending on the character this has special meaning for your compiler to do something specific now anything that is following two forward slashes is the beginning of a single line comment i could write this is a comment and this line of text is going to be ignored by the compiler so there's going to be no change to this program with the additional comment anything that is a comment is ignored by the compiler so it's useful if you need to leave yourself a note or for somebody else that's looking over your code if you need a multiline comment that is a forward slash followed by an asterisk and anything up to an asterisk and another forward slash will be the bounds of this comment so i could write on a new line for each word this is a comment and all of this will also be ignored by the compiler so that's how to write a multiline comment a forward slash and an asterisk and anything up to another asterisk and forward slash so those are comments alright ladies and gentlemen it's time for this section on tips and tricks and for my first trick i'm going to change the color scheme of my ide we're currently using the light theme but i much prefer the dark theme i'm going to be joining the dark side so in order to change the color scheme of your ide go to if you're using eclipse window preferences under the general tab go to appearance theme and you can change the theme here i will click dark i'm going to select apply okay and then apply and close so the dark theme is great if you want to feel like a pretend elite hacker for my next trick i'm going to change the font color as well as the background color of my console window in order to do so head back to window preferences under run debug go to console and you can change the color schemes here i'm going to change the text color to a bright green click ok as well as the background color to a slightly lighter shade of black that should be good when you're finished click apply and then apply and close and you may need to run this again to see the changes so that's how to change the font color as well as the background color of your console window so it's somewhat tedious to have to write a print line statement correct system dot out dot print line normally that's a lot to type so a shortcut would be to type sys out then hold control space and your ide will auto generate the rest of this print line statement for you let's move on to trick number four let's say that we have hundreds of different print line statements and we need to change the text to print because we made a mistake so there's a feature where we can replace some text in your program with another so let's pretend we would like to replace print line with print so go to edit find replace and we can replace some text with something else let's find each instance of print line and replace this with print then click replace all so that will take care of all that for you let's move on to some final tips so with spaces spaces don't make much of a difference within your code for example after this dot and my print portion of this print statement i could add a bunch of spaces for no reason and this would run and compile just fine i'm not sure why you would do that but that's just to reinforce the point that spaces don't make much of a difference unless you're using a space to split up some keywords then you might run into an issue or if you're adding space to a string well then that's going to have a noticeable effect so spaces for the most part don't really matter too much depending on where they are here's a trick on zooming in or out hold control minus to zoom out or control plus to zoom in or you could go to window editor then zoom in or zoom out within this menu here's my last tip for you let's say you accidentally close out of your package explorer or your console window you can easily bring those back by going to window show view and then they are all listed here so i would like to bring back my package explorer as well as my console window alright guys and gals you should be ready to get started with java be sure to check out the full 100 video playlist as well and if you could do me a small tiny favor i would greatly appreciate it if you could help me defeat the youtube algorithm by smashing the like button drop a comment down below and subscribe if you'd like to become a fellow bro hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
