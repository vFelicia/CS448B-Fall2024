With timestamps:

00:00 - all right people so today I got to
00:02 - explain sorting in Python there's two
00:04 - ways to accomplish sorting in Python the
00:07 - sort method or the sorted function it
00:10 - depends on what type of data structure
00:11 - we're trying to sort today we'll cover
00:14 - lists tles dictionaries and objects this
00:17 - is just my opinion but dictionaries are
00:19 - probably the most complicated to sort
00:21 - even more so than objects let's begin
00:24 - with lists let's create a list of fruits
00:28 - think of some fruit
00:30 - I will add a
00:32 - banana an
00:34 - orange
00:36 - Apple then
00:39 - coconut I will print my list of
00:44 - fruits which gives me banana orange
00:47 - Apple coconut sorting a list is really
00:50 - easy all we got to do is take our list
00:54 - use the built-in sort method and call
00:57 - it that will arrange the elements in Al
01:00 - etical order starting with a for apple
01:03 - followed by banana coconut then orange
01:06 - if the elements of a list were numbers
01:08 - for example 3 1 5 2
01:14 - 4 the numbers will be in ascending order
01:17 - for reverse order within the sort method
01:20 - we will pass in a keyword argument of
01:22 - reverse and set that to be
01:26 - true the elements of my list are now in
01:28 - Reverse alphabetical order beginning
01:31 - with orange coconut banana then Apple
01:34 - that's how to sort a list I would say
01:36 - it's the easiest now we'll move on to
01:39 - tles the elements of a tupple are
01:42 - surrounded with a set of
01:43 - parentheses so let's convert our list
01:46 - into a tupple then I will print our
01:48 - tupple of
01:51 - fruits to sort a tupple we'll use the
01:54 - sorted function rather than the sort
01:56 - method you know what let's attempt to
01:58 - use the sort method and see what happens
02:00 - I will take my tupple of fruits use the
02:04 - sort
02:05 - method that's going to give us an
02:07 - attribute error tupple object has no
02:10 - attribute sort that's why we need to use
02:12 - the sorted function rather than the sort
02:15 - method because tles don't have a sort
02:17 - method I'm going to take fruits equals
02:21 - use the sorted
02:23 - function then pass in my tupple of
02:26 - fruits let's output the result
02:30 - apple banana coconut orange they're all
02:32 - in alphabetical order the sorted
02:35 - function will convert our tupple into a
02:37 - list the elements are surrounded with a
02:39 - set of straight
02:41 - brackets if you would like to keep your
02:42 - tupple as a tupple after sorting it
02:45 - we're going to enclose the sorted
02:47 - function within a tupple function to typ
02:51 - cast it into a
02:52 - tupple we have taken our tupple sorted
02:55 - it all the elements are in alphabetical
02:57 - order then we have converted it into a
02:59 - tupple
03:00 - now for reverse order within the sorted
03:03 - function after passing in our Tuple of
03:05 - fruits we will pass in a keyword
03:07 - argument of reverse and set that to be
03:10 - true the elements are now in Reverse
03:13 - alphabetical order orange coconut banana
03:16 - apple so that's how to sort a tuple we
03:19 - use the sorted function now we're going
03:21 - to cover dictionaries which are probably
03:23 - the most complicated let's change this
03:26 - tupple of fruits into a
03:28 - dictionary we enclose the key value
03:30 - pairs with a set of curly braces we have
03:33 - a key and a value the name of each fruit
03:36 - will be the key the value let's say is
03:39 - the calories per serving bananas they'll
03:42 - have 105 calories per
03:45 - serving oranges will be
03:49 - 73 apples will be
03:53 - 72 coconuts are very calorie dense they
03:57 - have 354 calories per serving
04:01 - here's my dictionary a dictionary
04:04 - consists of key value
04:06 - pairs the name of each fruit is the key
04:09 - the calories per serving is the value to
04:12 - sort this dictionary we'll use the
04:14 - sorted
04:16 - function we're going to reassign our
04:19 - dictionary equals call the sorted
04:22 - function then pass in our dictionary of
04:25 - fruits however there's one more step
04:29 - the keys are sorted in alphabetical
04:31 - order but we lose the values they're
04:34 - truncated we have converted our
04:36 - dictionary into a list the elements are
04:39 - surrounded with a set of straight
04:40 - brackets we're going to take our fruits
04:43 - call the items method the items method
04:46 - will return a tupple for each key value
04:48 - pair in my dictionary the items method
04:51 - returns each pair as a tupple then we
04:54 - are going to typ cast it into a
04:55 - dictionary by surrounding the sorted
04:58 - function with the AR
05:01 - function and now all the keys are sorted
05:05 - alphabetically apple banana coconut
05:08 - orange each key has its value of
05:10 - calories per
05:12 - serving for reverse alphabetical order
05:15 - let's copy what we
05:17 - have this is where it gets complex
05:19 - within the sorted function after we call
05:22 - the items method of fruits we're going
05:25 - to pass in another argument a keyword
05:28 - argument we will set the key equal to a
05:32 - Lambda function the items method is
05:34 - going to return a tupple during each
05:38 - iteration so for the Lambda function
05:41 - we're going to take each tupple which
05:43 - will be named item that's the parameter
05:47 - colon what would we like to return we're
05:50 - going to return our tupple of item at
05:53 - index of zero for the first pair in our
05:57 - dictionary we're returning the value at
05:59 - index zero that would be the key index
06:02 - one would be the value for every pair of
06:05 - items in our dictionary take each pair
06:08 - return the first element return the
06:10 - element at index zero which means the
06:13 - key then we have one more argument so
06:16 - after the key for reverse alphabetical
06:19 - order we will pass in a keyword argument
06:22 - we will pass in a keyword argument of
06:24 - reverse and set that to be
06:26 - true yes it's very complicated
06:30 - so now our dictionary is sorted in
06:32 - Reverse alphabetical order by key we
06:35 - have orange coconut banana apple to sort
06:39 - the dictionary by value here's what
06:41 - we'll
06:42 - do again we'll take our
06:44 - fruits equals call the sorted function
06:48 - take our dictionary of fruits call the
06:51 - items method to return each keyvalue
06:53 - pair as a tupple then typ cast it back
06:56 - into a
06:58 - dictionary after we call the items
07:00 - method we will pass in a keyword
07:03 - argument where the key equals a Lambda
07:07 - function for every tupple of our
07:10 - dictionary take that tupple of item
07:14 - colon return the value at item index of
07:18 - one zero refers to the key and index of
07:21 - one applies to the value so now our
07:25 - dictionary is sorted by the values in
07:28 - ascending order apples have the least
07:30 - amount of calories per serving then
07:32 - oranges bananas then
07:35 - coconuts that's how to sort a dictionary
07:37 - by value to sort the values in reverse
07:40 - order let's copy what we
07:45 - have after our keyword argument of key
07:48 - we will pass in a keyword argument of
07:51 - reverse then set that to be
07:54 - true the values in my dictionary are
07:57 - sorted in reverse the first key value
07:59 - pair has the most amount of calories
08:02 - which would be coconuts then banana
08:04 - orange Apple those are a few different
08:07 - techniques to sorting dictionaries we
08:09 - can sort by key or by
08:12 - value all right now we're going to move
08:14 - on to objects in this example we will
08:16 - create a class of
08:19 - fruit within this class we will need a
08:23 - Constructor when we create a fruit
08:25 - object we will need a name and calories
08:29 - for calories per serving self. name
08:32 - equals name self. calories equals
08:38 - calories I'm also going to use a magic
08:42 - method it's R meaning
08:46 - represent when we attempt to print one
08:48 - of these objects we can create a string
08:51 - representation of that object so if I
08:53 - was to print a fruit that we create we
08:55 - will call Dunder represent to represent
08:58 - that object
09:00 - so we will return an F string I'll add
09:03 - two
09:04 - placeholders we will display self. name
09:08 - what's the name of this fruit and self.
09:11 - calories what are the calories per
09:13 - serving we will create a list of fruit
09:17 - objects fruits equals a
09:20 - list I will call the fruit
09:23 - Constructor for the first fruit the name
09:26 - will be banana calories will be 105 for
09:29 - the second fruit we'll call the fruit
09:32 - Constructor pass in
09:34 - apple calories
09:37 - 72 for the third fruit called the fruit
09:41 - Constructor the name will be orange
09:44 - calories
09:45 - 73 I'm going to put each of these on a
09:47 - new line for
09:49 - readability then for our last
09:53 - fruit we have
09:57 - coconut calories 35
10:00 - for just to test everything I'm going to
10:03 - print my list of
10:07 - objects behind the scenes when we print
10:09 - each of these objects we're calling the
10:11 - method of dund to represent we're
10:14 - displaying the fruit's name colon then
10:17 - the calories per serving I'm going to
10:20 - collapse this class just so it's easier
10:22 - to see
10:23 - everything to sort this list of objects
10:26 - I will reassign it to fruits fruits
10:29 - equals we will use the sorted function
10:32 - we'll pass in our list of
10:34 - objects pass in a keyword argument of
10:37 - key key equals a Lambda function during
10:41 - each iteration the Lambda function is
10:44 - going to be provided with one of these
10:45 - objects beginning with the
10:48 - first that's going to be the parameter
10:51 - each fruit for every fruit that we
10:54 - iterate over we will return the fruit's
10:57 - name attribute and and sort by that
11:00 - using the keyword argument of
11:03 - key these objects should be sorted by
11:06 - their name we have apple banana coconut
11:10 - orange for reverse alphabetical order
11:13 - all we got to do is pass in that keyword
11:16 - argument of reverse set that to be
11:19 - true these objects are now in Reverse
11:21 - alphabetical order by their name orange
11:24 - coconut banana apple then let's do
11:27 - calories
11:32 - within our Lambda function sort by the
11:35 - fruits
11:38 - calories we have apples with the least
11:40 - amount of calories 72 then oranges
11:43 - banana
11:45 - coconut then to sort by calories in
11:47 - reverse
11:50 - order we will add one additional keyword
11:53 - argument of reverse set that to be
11:57 - true all right so now we are sorting
11:59 - these objects by what has the most
12:01 - amount of calories which would be
12:03 - coconuts bananas oranges then apples all
12:07 - right everybody so those are a few
12:09 - different sorting techniques we've
12:11 - discussed lists topples and dictionaries
12:14 - which are in my opinion the most
12:15 - complicated than objects with
12:18 - dictionaries and objects we set the key
12:20 - as a Lambda function and well everybody
12:23 - those are a few different sorting
12:24 - techniques in Python

Cleaned transcript:

all right people so today I got to explain sorting in Python there's two ways to accomplish sorting in Python the sort method or the sorted function it depends on what type of data structure we're trying to sort today we'll cover lists tles dictionaries and objects this is just my opinion but dictionaries are probably the most complicated to sort even more so than objects let's begin with lists let's create a list of fruits think of some fruit I will add a banana an orange Apple then coconut I will print my list of fruits which gives me banana orange Apple coconut sorting a list is really easy all we got to do is take our list use the builtin sort method and call it that will arrange the elements in Al etical order starting with a for apple followed by banana coconut then orange if the elements of a list were numbers for example 3 1 5 2 4 the numbers will be in ascending order for reverse order within the sort method we will pass in a keyword argument of reverse and set that to be true the elements of my list are now in Reverse alphabetical order beginning with orange coconut banana then Apple that's how to sort a list I would say it's the easiest now we'll move on to tles the elements of a tupple are surrounded with a set of parentheses so let's convert our list into a tupple then I will print our tupple of fruits to sort a tupple we'll use the sorted function rather than the sort method you know what let's attempt to use the sort method and see what happens I will take my tupple of fruits use the sort method that's going to give us an attribute error tupple object has no attribute sort that's why we need to use the sorted function rather than the sort method because tles don't have a sort method I'm going to take fruits equals use the sorted function then pass in my tupple of fruits let's output the result apple banana coconut orange they're all in alphabetical order the sorted function will convert our tupple into a list the elements are surrounded with a set of straight brackets if you would like to keep your tupple as a tupple after sorting it we're going to enclose the sorted function within a tupple function to typ cast it into a tupple we have taken our tupple sorted it all the elements are in alphabetical order then we have converted it into a tupple now for reverse order within the sorted function after passing in our Tuple of fruits we will pass in a keyword argument of reverse and set that to be true the elements are now in Reverse alphabetical order orange coconut banana apple so that's how to sort a tuple we use the sorted function now we're going to cover dictionaries which are probably the most complicated let's change this tupple of fruits into a dictionary we enclose the key value pairs with a set of curly braces we have a key and a value the name of each fruit will be the key the value let's say is the calories per serving bananas they'll have 105 calories per serving oranges will be 73 apples will be 72 coconuts are very calorie dense they have 354 calories per serving here's my dictionary a dictionary consists of key value pairs the name of each fruit is the key the calories per serving is the value to sort this dictionary we'll use the sorted function we're going to reassign our dictionary equals call the sorted function then pass in our dictionary of fruits however there's one more step the keys are sorted in alphabetical order but we lose the values they're truncated we have converted our dictionary into a list the elements are surrounded with a set of straight brackets we're going to take our fruits call the items method the items method will return a tupple for each key value pair in my dictionary the items method returns each pair as a tupple then we are going to typ cast it into a dictionary by surrounding the sorted function with the AR function and now all the keys are sorted alphabetically apple banana coconut orange each key has its value of calories per serving for reverse alphabetical order let's copy what we have this is where it gets complex within the sorted function after we call the items method of fruits we're going to pass in another argument a keyword argument we will set the key equal to a Lambda function the items method is going to return a tupple during each iteration so for the Lambda function we're going to take each tupple which will be named item that's the parameter colon what would we like to return we're going to return our tupple of item at index of zero for the first pair in our dictionary we're returning the value at index zero that would be the key index one would be the value for every pair of items in our dictionary take each pair return the first element return the element at index zero which means the key then we have one more argument so after the key for reverse alphabetical order we will pass in a keyword argument we will pass in a keyword argument of reverse and set that to be true yes it's very complicated so now our dictionary is sorted in Reverse alphabetical order by key we have orange coconut banana apple to sort the dictionary by value here's what we'll do again we'll take our fruits equals call the sorted function take our dictionary of fruits call the items method to return each keyvalue pair as a tupple then typ cast it back into a dictionary after we call the items method we will pass in a keyword argument where the key equals a Lambda function for every tupple of our dictionary take that tupple of item colon return the value at item index of one zero refers to the key and index of one applies to the value so now our dictionary is sorted by the values in ascending order apples have the least amount of calories per serving then oranges bananas then coconuts that's how to sort a dictionary by value to sort the values in reverse order let's copy what we have after our keyword argument of key we will pass in a keyword argument of reverse then set that to be true the values in my dictionary are sorted in reverse the first key value pair has the most amount of calories which would be coconuts then banana orange Apple those are a few different techniques to sorting dictionaries we can sort by key or by value all right now we're going to move on to objects in this example we will create a class of fruit within this class we will need a Constructor when we create a fruit object we will need a name and calories for calories per serving self. name equals name self. calories equals calories I'm also going to use a magic method it's R meaning represent when we attempt to print one of these objects we can create a string representation of that object so if I was to print a fruit that we create we will call Dunder represent to represent that object so we will return an F string I'll add two placeholders we will display self. name what's the name of this fruit and self. calories what are the calories per serving we will create a list of fruit objects fruits equals a list I will call the fruit Constructor for the first fruit the name will be banana calories will be 105 for the second fruit we'll call the fruit Constructor pass in apple calories 72 for the third fruit called the fruit Constructor the name will be orange calories 73 I'm going to put each of these on a new line for readability then for our last fruit we have coconut calories 35 for just to test everything I'm going to print my list of objects behind the scenes when we print each of these objects we're calling the method of dund to represent we're displaying the fruit's name colon then the calories per serving I'm going to collapse this class just so it's easier to see everything to sort this list of objects I will reassign it to fruits fruits equals we will use the sorted function we'll pass in our list of objects pass in a keyword argument of key key equals a Lambda function during each iteration the Lambda function is going to be provided with one of these objects beginning with the first that's going to be the parameter each fruit for every fruit that we iterate over we will return the fruit's name attribute and and sort by that using the keyword argument of key these objects should be sorted by their name we have apple banana coconut orange for reverse alphabetical order all we got to do is pass in that keyword argument of reverse set that to be true these objects are now in Reverse alphabetical order by their name orange coconut banana apple then let's do calories within our Lambda function sort by the fruits calories we have apples with the least amount of calories 72 then oranges banana coconut then to sort by calories in reverse order we will add one additional keyword argument of reverse set that to be true all right so now we are sorting these objects by what has the most amount of calories which would be coconuts bananas oranges then apples all right everybody so those are a few different sorting techniques we've discussed lists topples and dictionaries which are in my opinion the most complicated than objects with dictionaries and objects we set the key as a Lambda function and well everybody those are a few different sorting techniques in Python
