With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to explain
00:05 - generics in c sharp
00:06 - so sit back relax and enjoy the show
00:11 - if you wouldn't mind please like comment
00:14 - and subscribe
00:15 - one like equals one prayer for the
00:16 - youtube algorithm
00:19 - uh generics all right
00:22 - let's get started generics anything
00:24 - that's generic
00:25 - is not specific to any particular data
00:28 - type
00:28 - we can make something generic by adding
00:30 - a set of angle brackets
00:32 - then t we can make classes generic
00:34 - methods
00:35 - fields whatever we want this allows for
00:37 - greater code reusability for different
00:39 - data types
00:40 - let's say that we have three different
00:42 - types of arrays an array of integers
00:44 - doubles and strings let's create those
00:47 - int
00:47 - array i'll call this interray
00:50 - equals i don't know one two three
00:54 - the elements really aren't important the
00:56 - data type is
00:57 - okay then let's say we have an array of
01:00 - doubles
01:01 - i will name this double array and
01:04 - the elements are 1.0 2.0
01:08 - and 3.0 then let's say that we have an
01:11 - array
01:12 - of strings string
01:15 - array equals
01:18 - one two
01:22 - and three okay what if i would like to
01:25 - display the elements of each of these
01:27 - arrays
01:28 - so we can use a method for that let's
01:30 - begin with a method to accept an array
01:32 - of integers
01:34 - so let's add that here public static
01:37 - void we're not returning anything and
01:40 - let's say that this method is named
01:42 - display elements
01:47 - so there is one parameter if we're
01:49 - displaying an array of integers
01:51 - well that will be our parameter int
01:54 - array
01:55 - and let's call this array and then we'll
01:57 - need a for loop or
01:59 - for each loop to iterate over the
02:00 - elements of this array let's use a for
02:02 - each loop
02:03 - for each int item
02:06 - in array then we will write
02:11 - preferably not writeline item then maybe
02:14 - i'll add a space
02:16 - okay let's call the display elements
02:18 - method that we just created
02:20 - and then pass in our interray as an
02:22 - argument
02:23 - and let's see what happens okay we have
02:27 - the numbers one
02:28 - two three so what if we attempt to pass
02:31 - in
02:31 - our double array display elements
02:35 - then we will pass in our array of
02:37 - doubles
02:38 - so we actually can't use this method for
02:40 - doubles we can only use this for
02:42 - integers cannot convert from double to
02:45 - int if i would like to display my array
02:48 - of doubles
02:49 - well i would need a completely different
02:51 - method that accepts
02:52 - an array of doubles as an argument so
02:55 - i'm going to copy
02:56 - this current method that we have change
02:58 - into
02:59 - double and change into double here as
03:03 - well
03:04 - and then we can call this version of our
03:06 - display elements method
03:09 - and this will do the same thing actually
03:11 - let me make one change i'm just going to
03:13 - add a right line
03:14 - to the end of these so basically we have
03:17 - two methods that do the exact same thing
03:20 - however they accept a different
03:22 - data type as an argument let's add one
03:24 - more method for strings
03:28 - public static void display elements
03:32 - the parameter is an array of strings for
03:34 - each
03:35 - string item in array and then i can use
03:39 - the string version of display elements
03:41 - but pass
03:42 - in our string array
03:46 - so we have each of our three different
03:48 - types of arrays all displayed
03:50 - so this is a lot of work we have three
03:53 - methods that do
03:54 - basically the same thing however they
03:56 - accept different arguments
03:57 - so what if we had one method that could
03:59 - accept basically any data type
04:01 - well that's where generics come in so
04:04 - let's take these first two methods and
04:06 - delete them we will no longer need them
04:08 - we're going to turn this method into a
04:10 - generic method
04:11 - so after the method name add a set of
04:14 - angle brackets
04:15 - then add t so really you can put
04:17 - anything you want between
04:18 - these angle brackets i like to say thing
04:20 - because i think it's funny
04:21 - we're going to accept a thing as an
04:24 - argument
04:24 - so we need to change that here as well
04:27 - so change any instance of
04:29 - a data type to t or
04:32 - thing if you're using thing okay so
04:35 - change
04:35 - string to thing we're accepting an array
04:38 - of things
04:39 - for each thing item
04:42 - in array so now we have one method that
04:45 - accepts all data types
04:47 - we can reuse this one method for an
04:49 - array of integers
04:50 - doubles and strings
04:54 - and it appears to work so that's where
04:56 - generics are helpful
04:58 - anything that's generic is not specific
05:00 - to a particular data type
05:02 - we can add angle brackets t or really
05:05 - anything within these angle brackets
05:06 - just make sure that it's consistent
05:08 - so we can add this to classes methods
05:11 - fields etc
05:12 - and this allows for greater code
05:14 - reusability for different data types
05:16 - so instead of three different methods
05:18 - that all accept different data types we
05:20 - have one that accepts basically all data
05:22 - types
05:22 - so yeah those are generics if you found
05:24 - this video helpful be sure to smash that
05:26 - like button
05:27 - leave a random comment down below and
05:29 - subscribe if you'd like to become a
05:30 - fellow bro

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain generics in c sharp so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm uh generics all right let's get started generics anything that's generic is not specific to any particular data type we can make something generic by adding a set of angle brackets then t we can make classes generic methods fields whatever we want this allows for greater code reusability for different data types let's say that we have three different types of arrays an array of integers doubles and strings let's create those int array i'll call this interray equals i don't know one two three the elements really aren't important the data type is okay then let's say we have an array of doubles i will name this double array and the elements are 1.0 2.0 and 3.0 then let's say that we have an array of strings string array equals one two and three okay what if i would like to display the elements of each of these arrays so we can use a method for that let's begin with a method to accept an array of integers so let's add that here public static void we're not returning anything and let's say that this method is named display elements so there is one parameter if we're displaying an array of integers well that will be our parameter int array and let's call this array and then we'll need a for loop or for each loop to iterate over the elements of this array let's use a for each loop for each int item in array then we will write preferably not writeline item then maybe i'll add a space okay let's call the display elements method that we just created and then pass in our interray as an argument and let's see what happens okay we have the numbers one two three so what if we attempt to pass in our double array display elements then we will pass in our array of doubles so we actually can't use this method for doubles we can only use this for integers cannot convert from double to int if i would like to display my array of doubles well i would need a completely different method that accepts an array of doubles as an argument so i'm going to copy this current method that we have change into double and change into double here as well and then we can call this version of our display elements method and this will do the same thing actually let me make one change i'm just going to add a right line to the end of these so basically we have two methods that do the exact same thing however they accept a different data type as an argument let's add one more method for strings public static void display elements the parameter is an array of strings for each string item in array and then i can use the string version of display elements but pass in our string array so we have each of our three different types of arrays all displayed so this is a lot of work we have three methods that do basically the same thing however they accept different arguments so what if we had one method that could accept basically any data type well that's where generics come in so let's take these first two methods and delete them we will no longer need them we're going to turn this method into a generic method so after the method name add a set of angle brackets then add t so really you can put anything you want between these angle brackets i like to say thing because i think it's funny we're going to accept a thing as an argument so we need to change that here as well so change any instance of a data type to t or thing if you're using thing okay so change string to thing we're accepting an array of things for each thing item in array so now we have one method that accepts all data types we can reuse this one method for an array of integers doubles and strings and it appears to work so that's where generics are helpful anything that's generic is not specific to a particular data type we can add angle brackets t or really anything within these angle brackets just make sure that it's consistent so we can add this to classes methods fields etc and this allows for greater code reusability for different data types so instead of three different methods that all accept different data types we have one that accepts basically all data types so yeah those are generics if you found this video helpful be sure to smash that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
