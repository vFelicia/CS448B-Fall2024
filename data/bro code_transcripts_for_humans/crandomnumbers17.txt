With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro here and in this video I'm going to
00:03 - teach you guys how to create your own
00:04 - random numbers in C++ so let's get
00:08 - started
00:11 - every one so we're going to be
00:13 - discussing generating random numbers and
00:15 - C++ but I do have a disclaimer these are
00:19 - not true random numbers but something
00:21 - called pseudo-random numbers which are
00:24 - very close
00:25 - so using pseudo-random numbers would be
00:28 - fine if you're making a simple game in
00:30 - C++ if you need to simply roll a dice or
00:33 - deal some cards but I wouldn't use these
00:36 - for any like high level program that
00:38 - involves some security but this would be
00:40 - fine just for a simple game so let's
00:43 - begin now at the top of your program
00:44 - this is what we're going to include
00:46 - we're going to include two things so
00:48 - include s T ad l ib dot H and this is
00:55 - for the S trend as well as the rand
00:59 - function the other thing that we're
01:01 - going to include is time dot H and this
01:06 - allows us to work with the current time
01:08 - all right
01:09 - so the first step to creating a
01:11 - pseudo-random number is that we are
01:14 - going to initialize a random seed based
01:17 - on the current time this is what we can
01:19 - do to do that type in s Rand then a set
01:22 - of parentheses and within the
01:24 - parentheses type in time another set of
01:27 - parentheses and the word no so this is
01:30 - going to generate a random seed for us
01:32 - and it's going to change based on the
01:34 - current time there are other techniques
01:37 - of generating random scenes for
01:39 - pseudo-random numbers but this is one
01:41 - that you'll commonly see so that's why
01:43 - I'm introducing this method instead of
01:45 - others all right now we want to assign a
01:48 - random number to a variable so we'll
01:50 - declare a variable such as number and
01:53 - we're going to set this to Rand
01:56 - parentheses alright and this next part
01:59 - is if we're going to type in modulus and
02:01 - the range of numbers that we want to
02:04 - generate so let's pretend that we want
02:06 - to roll a 6-sided dice we're going to
02:09 - type in modulus then six all right so
02:13 - we're going to get a random number
02:15 - between 0 and 5 but it's a total of six
02:18 - numbers so you always count zero when
02:21 - you're generating a random number so if
02:23 - you want the numbers
02:24 - one through six one thing you can do is
02:26 - just add one so this will generate a
02:29 - random number between one and six for us
02:32 - so let's actually display this just to
02:34 - test it so we're going to see out
02:36 - whatever our number is so let's run this
02:43 - okay we got one let's try it again five
02:47 - and one last time and five again all
02:51 - right so we know that it's working then
02:53 - so if you want to change this to a
02:55 - different number you can so for example
02:57 - I play a lot of Dungeons & Dragons so we
03:00 - use polyhedral dice that might have like
03:02 - 20 sides or twelve sides so if you want
03:05 - to roll a 20 sided dice I would just put
03:08 - 20 here and then plus one so then I'll
03:10 - get the numbers 1 through 20 so let's
03:13 - try this now as if we're rolling for
03:15 - initiative so we just quit failed we got
03:18 - a 1 let's try it again we got an 11 and
03:22 - we got a 20 so I have an exercise that
03:26 - we can work on let's generate three
03:28 - random numbers and display them kind of
03:30 - like a slot machine but without all the
03:32 - fancy pictures so what I'm going to do
03:34 - is just copy this statement and paste
03:37 - this a few times and I'm going to change
03:39 - these variables to number one number two
03:41 - and number three and maybe let's change
03:44 - the range from 1 through 10 and then
03:49 - I'll just display these so number 1
03:51 - maybe I'll add a space between here
03:54 - number 2 and add a space and number 3
04:02 - okay let's try this we got 7 3 and 10 3
04:10 - 9 & 7 & 3 6 & 2 so this will generate
04:17 - three random numbers between the ranges
04:19 - of 1 and 10 and if you know how to work
04:22 - with GUI components or some sort of
04:24 - visual you could easily just replace
04:26 - those numbers with some sort of picture
04:28 - or other like graphical image if you do
04:31 - want to simulate like a slot machine of
04:34 - some sort but this would be a good place
04:36 - to start to at least get the random
04:38 - furs going so just a quick summary that
04:41 - when you use this random function you
04:43 - can use modulus and the range of numbers
04:45 - that you want to generate if you want
04:47 - 100 numbers you could change this to 100
04:50 - but it's going to be the numbers 0
04:52 - through 99 that you get so you can add
04:55 - like 1 to get 1 through 100 otherwise
04:58 - you can always add a higher number to
05:00 - this for some reason like you can add 10
05:02 - then all numbers that you generate would
05:05 - have 10 added to them then at that point
05:07 - so it depends on the program you're
05:09 - really working on too so you can use
05:12 - modulus the range numbers that you want
05:14 - then if you want to add something to
05:16 - that number you can do so well that's
05:19 - the basics of generating random numbers
05:21 - and C++ but I'm going to walk you guys
05:23 - through how to create a guessing game if
05:25 - you're interested so let's delete all
05:28 - this and start over I'll include all of
05:30 - this in the comments down below so don't
05:33 - feel like you missed out on it so before
05:36 - we get started you'll want to be sure to
05:37 - include these two things STD Lib dot H
05:41 - and time dot H if you haven't done so
05:43 - already now we'll need to declare a few
05:45 - variables we'll make an integer that
05:47 - will be our number that we generate an
05:50 - integer that will be our response and an
05:56 - integer that will serve as some sort of
05:58 - score and we're going to initialize this
06:01 - right away and set it to 0 now we'll
06:03 - need to initialize a random seed based
06:06 - on the current time so s random then
06:09 - time parentheses know all right and for
06:16 - our number we're going to set this equal
06:18 - to R and parentheses modulus and then if
06:23 - we want a random number between 1 and 10
06:25 - we can just put 10 here plus 1 otherwise
06:29 - we can make this extreme and say like
06:31 - 100 so we have to guess a random number
06:33 - between 1 and 100 but let's start with
06:35 - 10 for now and keep it simple all right
06:38 - the next step we're going to put all of
06:40 - this within a do-while loop so do then a
06:44 - set of curly brackets and while then our
06:47 - condition so the condition is that we're
06:49 - going to continue guessing as
06:51 - as our number does not equal whatever
06:56 - our responses so there's a few lines
07:00 - that we're going to fill out within the
07:02 - do-while loop the first thing that we're
07:04 - going to do is prompt the user to enter
07:06 - in your first guess enter your yeah
07:11 - guess 1 through 10 all right then we
07:18 - will see in whatever the response is
07:23 - then we're going to use a few different
07:25 - if statements so if our response is
07:30 - greater than the random number what
07:34 - we're going to do here is see out that
07:42 - was too high
07:46 - okay so then else if the response is
07:53 - less than the number we will see out
07:59 - that was too low all right then lastly
08:06 - we're going to put an else here because
08:08 - if the response is not greater than the
08:10 - number and the response is not less than
08:13 - the number then the response must be
08:15 - equal to the number so then we will type
08:17 - in or type see out that was correct and
08:25 - I think I'm just missing a semicolon
08:26 - here and after the else statement we're
08:30 - going to increment our score counter by
08:33 - one then I also need a semicolon after
08:36 - the while loop here as well alright so
08:39 - then after we escape or exit the
08:42 - do-while loop we'll want to display the
08:44 - results so I'm just going to see out
08:48 - number is whatever the number was and
08:55 - then see out
08:59 - the amount of guesses that it took us so
09:05 - we'll see out our score and I think I'm
09:09 - going to add a new line before this just
09:12 - to give us some space you know what I'm
09:13 - going to add a new line character here
09:15 - by guesses and after each of these see
09:19 - out statements as well because I forgot
09:22 - to do that okay let's run this now okay
09:29 - enter your guess 1 through 10 I'll guess
09:31 - 5 because it's near the middle that was
09:33 - too high let's try maybe 3 that was
09:37 - still too high one that was too low so
09:40 - I'm guessing it's 2 then all right that
09:42 - was correct
09:43 - the number was 2 and it took us four
09:45 - guesses one two three four let's try one
09:49 - more time just to be sure it's working
09:50 - so I'm to your guests
09:52 - let's try six that was too high maybe
09:54 - three that was too low
09:56 - how about five that was too high and
09:59 - four that was correct the number is four
10:02 - and it took four guesses all right so
10:05 - that is a very basic guessing game so
10:09 - that's the basics on random numbers in
10:12 - C++ if you would like a copy of all this
10:14 - code I'll post it in the comments down
10:16 - below and pin it to the top but yeah
10:18 - that's the basics of pseudo-random
10:21 - numbers in C++ hey you if you enjoyed
10:25 - this lesson then you can help me help
10:28 - you in three easy steps
10:30 - by smashing that like button drop a
10:32 - comment down below and subscribe if
10:34 - you'd like to become a fellow bro
10:36 - [Music]

Cleaned transcript:

hey what's going on everybody it's your bro here and in this video I'm going to teach you guys how to create your own random numbers in C++ so let's get started every one so we're going to be discussing generating random numbers and C++ but I do have a disclaimer these are not true random numbers but something called pseudorandom numbers which are very close so using pseudorandom numbers would be fine if you're making a simple game in C++ if you need to simply roll a dice or deal some cards but I wouldn't use these for any like high level program that involves some security but this would be fine just for a simple game so let's begin now at the top of your program this is what we're going to include we're going to include two things so include s T ad l ib dot H and this is for the S trend as well as the rand function the other thing that we're going to include is time dot H and this allows us to work with the current time all right so the first step to creating a pseudorandom number is that we are going to initialize a random seed based on the current time this is what we can do to do that type in s Rand then a set of parentheses and within the parentheses type in time another set of parentheses and the word no so this is going to generate a random seed for us and it's going to change based on the current time there are other techniques of generating random scenes for pseudorandom numbers but this is one that you'll commonly see so that's why I'm introducing this method instead of others all right now we want to assign a random number to a variable so we'll declare a variable such as number and we're going to set this to Rand parentheses alright and this next part is if we're going to type in modulus and the range of numbers that we want to generate so let's pretend that we want to roll a 6sided dice we're going to type in modulus then six all right so we're going to get a random number between 0 and 5 but it's a total of six numbers so you always count zero when you're generating a random number so if you want the numbers one through six one thing you can do is just add one so this will generate a random number between one and six for us so let's actually display this just to test it so we're going to see out whatever our number is so let's run this okay we got one let's try it again five and one last time and five again all right so we know that it's working then so if you want to change this to a different number you can so for example I play a lot of Dungeons & Dragons so we use polyhedral dice that might have like 20 sides or twelve sides so if you want to roll a 20 sided dice I would just put 20 here and then plus one so then I'll get the numbers 1 through 20 so let's try this now as if we're rolling for initiative so we just quit failed we got a 1 let's try it again we got an 11 and we got a 20 so I have an exercise that we can work on let's generate three random numbers and display them kind of like a slot machine but without all the fancy pictures so what I'm going to do is just copy this statement and paste this a few times and I'm going to change these variables to number one number two and number three and maybe let's change the range from 1 through 10 and then I'll just display these so number 1 maybe I'll add a space between here number 2 and add a space and number 3 okay let's try this we got 7 3 and 10 3 9 & 7 & 3 6 & 2 so this will generate three random numbers between the ranges of 1 and 10 and if you know how to work with GUI components or some sort of visual you could easily just replace those numbers with some sort of picture or other like graphical image if you do want to simulate like a slot machine of some sort but this would be a good place to start to at least get the random furs going so just a quick summary that when you use this random function you can use modulus and the range of numbers that you want to generate if you want 100 numbers you could change this to 100 but it's going to be the numbers 0 through 99 that you get so you can add like 1 to get 1 through 100 otherwise you can always add a higher number to this for some reason like you can add 10 then all numbers that you generate would have 10 added to them then at that point so it depends on the program you're really working on too so you can use modulus the range numbers that you want then if you want to add something to that number you can do so well that's the basics of generating random numbers and C++ but I'm going to walk you guys through how to create a guessing game if you're interested so let's delete all this and start over I'll include all of this in the comments down below so don't feel like you missed out on it so before we get started you'll want to be sure to include these two things STD Lib dot H and time dot H if you haven't done so already now we'll need to declare a few variables we'll make an integer that will be our number that we generate an integer that will be our response and an integer that will serve as some sort of score and we're going to initialize this right away and set it to 0 now we'll need to initialize a random seed based on the current time so s random then time parentheses know all right and for our number we're going to set this equal to R and parentheses modulus and then if we want a random number between 1 and 10 we can just put 10 here plus 1 otherwise we can make this extreme and say like 100 so we have to guess a random number between 1 and 100 but let's start with 10 for now and keep it simple all right the next step we're going to put all of this within a dowhile loop so do then a set of curly brackets and while then our condition so the condition is that we're going to continue guessing as as our number does not equal whatever our responses so there's a few lines that we're going to fill out within the dowhile loop the first thing that we're going to do is prompt the user to enter in your first guess enter your yeah guess 1 through 10 all right then we will see in whatever the response is then we're going to use a few different if statements so if our response is greater than the random number what we're going to do here is see out that was too high okay so then else if the response is less than the number we will see out that was too low all right then lastly we're going to put an else here because if the response is not greater than the number and the response is not less than the number then the response must be equal to the number so then we will type in or type see out that was correct and I think I'm just missing a semicolon here and after the else statement we're going to increment our score counter by one then I also need a semicolon after the while loop here as well alright so then after we escape or exit the dowhile loop we'll want to display the results so I'm just going to see out number is whatever the number was and then see out the amount of guesses that it took us so we'll see out our score and I think I'm going to add a new line before this just to give us some space you know what I'm going to add a new line character here by guesses and after each of these see out statements as well because I forgot to do that okay let's run this now okay enter your guess 1 through 10 I'll guess 5 because it's near the middle that was too high let's try maybe 3 that was still too high one that was too low so I'm guessing it's 2 then all right that was correct the number was 2 and it took us four guesses one two three four let's try one more time just to be sure it's working so I'm to your guests let's try six that was too high maybe three that was too low how about five that was too high and four that was correct the number is four and it took four guesses all right so that is a very basic guessing game so that's the basics on random numbers in C++ if you would like a copy of all this code I'll post it in the comments down below and pin it to the top but yeah that's the basics of pseudorandom numbers in C++ hey you if you enjoyed this lesson then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro
