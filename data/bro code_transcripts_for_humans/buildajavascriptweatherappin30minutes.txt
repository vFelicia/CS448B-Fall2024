With timestamps:

00:00 - hey everybody so in today's video we're
00:02 - going to create a weather app that
00:03 - fetches data from an API you can look up
00:06 - any City and get the weather if that
00:07 - sounds good to you then sit back relax
00:10 - and enjoy the show if you would like to
00:12 - follow along you will need your own API
00:14 - key the API that we'll be using is
00:17 - openweathermap.org you do need to sign
00:20 - up for an account though it is free to
00:22 - sign up for an account you can go to
00:24 - sign in if you're currently not
00:26 - registered you can create an account for
00:28 - free once you're signed in you'll need
00:32 - an API key go to my API Keys it may take
00:36 - you some time to get an API key
00:38 - generated for you mine took about 15
00:40 - minutes and once you get it make sure
00:43 - it's active we will need that API key
00:46 - about 20 minutes into this topic
00:48 - hopefully for you by then it'll be
00:51 - generated okay let's do this everybody
00:53 - we will Begin by creating a form element
00:56 - the form element will have a class of
00:59 - weather form our form element is going
01:02 - to have an input element and a button
01:05 - within this input element we'll type in
01:07 - the name of the city we would like to
01:08 - retrieve the weather data
01:10 - 4 so the type of this input element is
01:13 - going to be text for some
01:15 - text the class will be City input so a
01:20 - user can type in the city and we'll add
01:23 - a placeholder let me zoom in a little so
01:25 - you can see
01:26 - it the placeholder will equal
01:30 - enter
01:32 - City then we'll need a button let's
01:35 - create a button element with text of get
01:40 - weather the type of this button will be
01:43 - submit it's the submit button for our
01:47 - form after retrieving the weather data
01:50 - we'll display the weather data in a card
01:52 - format like a Pokemon or Yu-Gi-Oh card
01:55 - so we will create a
01:58 - develop with a class
02:00 - of
02:01 - card but before applying some CSS we
02:04 - should at least add some placeholder
02:06 - elements so we can style them and see
02:08 - the changes for the time being let's
02:10 - create an H1 element we will be deleting
02:13 - these elements later so don't get too
02:14 - attached I will set the class of this
02:17 - element to be City
02:20 - display We'll add a sample City let's
02:24 - say Miami or pick a city if you're
02:26 - choosing then I will create a paragraph
02:28 - element the class will be temp display
02:32 - meaning temperature let's say the
02:34 - temperature is 90° F or pick something
02:37 - in celsius if you're on Windows to add a
02:40 - degree symbol you can hold alt then type
02:43 - 0176 Miami is going to be 90°
02:47 - F then we'll create a paragraph element
02:50 - for the
02:51 - humidity class
02:54 - equals
02:55 - humidity
02:58 - display for the text next let's say
03:01 - humidity colon space then a percentage
03:05 - 75% then we need a description of the
03:08 - weather this will be another paragraph
03:10 - element the class will equal description
03:14 - display desk meaning description for the
03:18 - description let's say clear
03:20 - skies I'll also display an emoji
03:23 - depending on what the weather
03:25 - is the class will be weather
03:31 - Emoji I'll use a
03:35 - sun for some reason if we can't display
03:38 - the weather data such as if we can't
03:40 - locate a city let's add the following
03:43 - paragraph the class of this element will
03:45 - be error
03:49 - display We'll add the text of please
03:53 - enter a
03:56 - city that is all the HTML that we need
03:58 - for now we're going going to apply some
04:00 - CSS styling next so now let's head to
04:02 - our CSS style sheet we are going to
04:05 - select the body of our document select a
04:08 - font family I will pick Ariel with a
04:11 - backup of s
04:13 - serif I'll change the background color
04:16 - of the body background color pick a
04:19 - color I'm going to use hsl values I will
04:23 - set the lightness to be
04:26 - 95% so it's a light gray color I will
04:29 - set that all margin around the body to
04:31 - be
04:33 - zero then I'll use flex box to display
04:35 - the elements display
04:38 - Flex the flex direction will be a column
04:41 - to arrange all the elements in a
04:45 - column then align item Center to
04:49 - horizontally align all the elements
04:51 - align item center now we'll select the
04:54 - class of weather form that'll be this
04:58 - form that has an input element and a
05:00 - button all we'll do is add a little bit
05:02 - of margin around the entire form 20
05:06 - pixels then we'll select our city input
05:09 - that's going to be the text
05:11 - box class of City
05:14 - input I will add some
05:16 - padding of 10
05:19 - pixels let me zoom out to
05:23 - 100% increase the font
05:25 - size to 2
05:28 - RM
05:30 - set the font weight to be
05:33 - bold I'll add a
05:36 - border two pixel
05:39 - solid and pick a
05:46 - color but all lower the alpha so it's
05:49 - transparent to
05:52 - 30% there's our border
05:54 - currently border radius around the
05:58 - corners let's do 10
06:01 - pixels add some margin of 10 pixels
06:06 - that'll separate this element from the
06:08 - button and set a width of 300
06:12 - pixels okay let's style the button next
06:15 - okay we are going to select all buttons
06:18 - that have an attribute where the type
06:20 - equals
06:24 - submit so that's going to be for our
06:26 - submit button that says get weather let
06:29 - me scroll down okay I'm going to add
06:32 - some padding around the
06:33 - button 10 pixels by 20
06:37 - pixels I'll set the font weight to be
06:42 - bold I'll increase the font
06:44 - size to be to
06:48 - RM pick a background color for the
06:50 - button I'll pick something
06:55 - green but I'll use hsl
06:58 - values
07:01 - I've already pre-picked a color let's go
07:03 - with
07:04 - 122
07:07 - 39% and
07:09 - 50% that's a good shade of
07:12 - green I will set the color to be white
07:15 - for the font
07:17 - color remove the border border
07:22 - none and Border radius 5 pixels to round
07:25 - the
07:27 - corners then when we hover our cursor
07:30 - over the button I would like it to be a
07:32 - pointer and that does work when we hover
07:36 - our cursor over the button we'll use the
07:38 - hover sudo class to change the
07:40 - background color so let's take our
07:42 - button for the type attribute is
07:44 - submit access the hover sudo class take
07:48 - our background color make it a little
07:50 - bit darker I'll bring down the lightness
07:52 - by 10% so it's at 40% so that does in
07:55 - fact
07:57 - work okay then we're going to select our
07:59 - card class that contains all the weather
08:02 - data so we will select the class of
08:07 - card for the background we're going to
08:09 - do something a little bit different
08:11 - we're going to use a linear gradient
08:13 - instead of selecting the background
08:14 - color we will select the
08:16 - background I will use the linear
08:20 - gradient
08:21 - function there's three arguments think
08:24 - of a linear gradient as a slow
08:26 - transition between two colors we need an
08:29 - angle in degrees we'll say 180° for now
08:34 - then a color let's pick something
08:38 - blue and
08:40 - orange I'm going to pick some colors
08:42 - that look a little bit
08:45 - better so for blue let's set the Hue to
08:48 - be
08:50 - 210 100% for the saturation and the
08:53 - lightness will be
08:55 - 75% that's a good shade of blue and for
08:58 - orange
08:59 - we'll use another hsl
09:03 - value for the Hue I'll say
09:06 - 40% the saturation will be
09:09 - 100% And The lightness will be
09:12 - 75% so I'm hoping with this linear
09:14 - gradient the background color looks kind
09:16 - of like a sunrise or a sunset once we
09:19 - have our background I will add some
09:20 - padding of 50
09:23 - pixels I'll add a box Shadow to this
09:25 - card we'll add a vertical and horizontal
09:28 - offset of 2 pixels each and a blur
09:31 - effect where the radius is 5
09:33 - pixels then we'll pick a
09:37 - color I'm just going to lower the alpha
09:40 - to
09:42 - 50% not
09:44 - bad this gives our card a 3D pop
09:48 - effect I will set a minimum width of
09:50 - this card to be 300
09:53 - pixels then we have to align everything
09:55 - within it I'll use flex box because I
09:58 - like Flex box
09:59 - display
10:00 - Flex Flex direction will be a
10:07 - column and align items Center to
10:12 - horizontally align the
10:14 - items there we go then we'll select all
10:18 - H1 elements that's going to be our city
10:20 - name select all H1
10:24 - elements increase the font
10:27 - size to be 3 .5
10:31 - RM I'll remove any margin from the top
10:34 - margin top will be
10:37 - zero and add margin to the
10:40 - bottom of 25
10:43 - pixels then we'll select all
10:46 - paragraphs that's going to be everything
10:48 - underneath our
10:50 - city select all
10:52 - paragraphs increase the font size to 1.5
10:57 - RM there's a lot of a natural margin
10:59 - between the
11:01 - paragraphs let's set all margin to be
11:03 - zero to see what it looks like okay
11:06 - let's add a little bit of margin five
11:08 - pixels on the top and bottom zero margin
11:10 - on the sides that's a lot better we'll
11:14 - select the city display and the
11:16 - temperature display we're going to be
11:18 - selecting two classes City
11:21 - display comma our temp
11:24 - display take these two classes apply the
11:27 - following properties you know what for
11:29 - our font size let's set that to be 3.5
11:33 - RM we can honestly remove that from H
11:36 - one for the font weight I will set that
11:40 - to be bold for the color I'll make the
11:42 - color a little
11:44 - transparent I'll set the alpha down to
11:49 - 75% so that our city and our temperature
11:52 - they're both going to be
11:54 - transparent then I'll add some margin to
11:56 - the bottom margin
11:57 - bottom 25
12:00 - pixels okay let's select our humidity
12:03 - display class
12:06 - humidity
12:08 - display set the font weight to be bold
12:13 - and add some margin to the
12:15 - bottom of 25 pixels then we'll select
12:19 - our description
12:20 - display which we shortened to desk
12:24 - display for the font style I will set it
12:28 - to be italic
12:30 - and the font weight will be
12:33 - bold I'll increase the font
12:36 - size to 2
12:40 - RM then we'll select our weather Emoji
12:43 - so class weather Emoji remove all margin
12:48 - around the Emoji margin zero then we'll
12:51 - increase the font size of the
12:52 - Emoji the size will be 7.5 RM so it's
12:57 - kind of big
12:59 - then if for some reason we display an
13:00 - error we'll display this text so this
13:03 - class is error
13:06 - display I'll set the font size to be 2.5
13:12 - RM the font weight will be
13:16 - bold I'll set the color to be something
13:20 - transparent all over the alpha to
13:25 - 75% okay that is all the CSS that we
13:28 - need
13:29 - let's go back to our HTML file we can
13:32 - delete everything within the card
13:35 - class we just wanted to see what it
13:37 - would look like with the elements
13:38 - populated with our card element I will
13:41 - set the style attribute to be take the
13:44 - display property set it to be none we
13:47 - don't want to display the card at all
13:49 - until we get the weather data until it's
13:51 - returned to us our HTML is done our CSS
13:54 - is done then we're ready to add some
13:56 - JavaScript
13:57 - functionality we'll declare our
13:59 - constants that we need const weather
14:03 - form
14:05 - equals document dot now since we're not
14:08 - working with IDs we can't get element by
14:11 - ID we're working with classes we can use
14:14 - Query selector or query selector all so
14:17 - I'm going to use Query selector this
14:21 - will return the first element in this
14:23 - class we only have one element with this
14:25 - class class WEA form we'll store a
14:30 - reference to
14:31 - it const City
14:35 - input equals
14:38 - document. query
14:41 - selector we are selecting the class of
14:45 - City input that's going to be this text
14:49 - box const card our card is what contains
14:53 - all the weather
14:55 - data
14:57 - document. query
14:59 - selector select the class of card and
15:04 - give me the first
15:06 - element now we'll need that API key
15:10 - const API key
15:14 - equals now here's my API key please
15:18 - don't try and use this one specifically
15:19 - I will be deactivating it at the end of
15:21 - this video hopefully by now you should
15:23 - have that API key given to you first
15:26 - we'll take our weather form we'll add an
15:29 - event
15:33 - listener this is our
15:35 - form the text element and the submit
15:38 - button when we click on this button the
15:41 - event type is going to be submit after
15:44 - we attempt to submit this form we'll do
15:46 - the following code we'll have one
15:48 - parameter an event that's going to be
15:50 - provided to us Arrow do this we'll fill
15:54 - this in later we'll declare our
15:56 - functions that we need we will need an
15:59 - async
16:00 - function to get weather data there will
16:05 - be one parameter a city that's going to
16:08 - be passed
16:10 - in then we'll need a function to
16:14 - display weather info there will be one
16:19 - parameter data the data will be in a
16:22 - Json like
16:24 - format we'll create a
16:26 - function to get weather
16:30 - Emoji based on what the weather is there
16:33 - will be one parameter a weather
16:36 - ID then we'll create a function to
16:38 - display to the screen any errors if
16:40 - there are any function display
16:45 - error there will be one parameter a
16:48 - message a message to be displayed to the
16:51 - window within our event
16:54 - listener once we have a submit event
16:57 - once we click the button forms do have a
16:59 - default Behavior where they'll refresh
17:01 - the page we would like to prevent that
17:04 - so let's take our event use the prevent
17:08 - default method to prevent the default
17:10 - behavior for a form we don't want to
17:13 - refresh the page then we'll have to get
17:15 - the city the value within this text box
17:19 - const City equals take the city input
17:23 - access the value store it within this
17:26 - variable it should be a string
17:29 - we'll use an if statement if City if
17:33 - there's a value within here this will be
17:35 - true we can use it within an if
17:37 - statement if there is a city do
17:41 - this else we'll call the display error
17:46 - function else we will display an
17:49 - error we will pass along the message to
17:53 - please enter a
17:56 - city let's fill in the dis display error
17:59 - function we want to be sure that it
18:01 - works before continuing the display
18:03 - error function is at the bottom we'll be
18:05 - provided with a message to display we
18:08 - will create a constant of
18:10 - error
18:12 - display equals document now we'll create
18:16 - an element create element we will create
18:19 - a
18:21 - paragraph then we'll need to change the
18:23 - text content of this element error
18:25 - display access the text content
18:29 - set it equal to be our
18:33 - message then we're going to add the
18:36 - class of error display we would like
18:39 - these CSS
18:41 - properties take our error display
18:43 - element access the class list then we
18:47 - will add a class we will add the CSS
18:50 - class of error
18:54 - display then we will take our card
18:57 - element which normally displays the
18:59 - weather data take our card reset the
19:02 - text content if there is something
19:05 - there we'll set it to be an empty string
19:08 - so normally with our card the display is
19:10 - set to none we'll set the display to be
19:13 - a block or even
19:15 - Flex access our card access the style
19:19 - access the display and I will set the
19:22 - display to be Flex to display
19:25 - it we will take our card
19:28 - we will append a child element append
19:32 - child we will append this paragraph of
19:35 - error display to the card now if I were
19:39 - to not type in anything and just press
19:41 - get weather we get this error message
19:44 - please enter a
19:46 - city to our card I'm just going to round
19:48 - the corners to make it look better
19:50 - border radius let's do 10
19:54 - pixels that's better okay moving on
19:59 - if we do have a city if there's text
20:01 - within here we will try some code
20:05 - because it might cause some errors we
20:07 - will catch any errors that happen we
20:09 - have one parameter of error if there's
20:12 - an error we can console.log or console.
20:16 - error the
20:19 - error then let's call our display error
20:22 - function we'll pass along the error and
20:24 - display
20:25 - it now we need to get the weather data
20:28 - within our Tri block we will create a
20:29 - constant of weather data equals now we
20:35 - need to
20:36 - await get weather data function and pass
20:42 - in our city so with the weight we can
20:45 - only use a weight within an async
20:46 - function since we're within an arrow
20:49 - function we could declare this Arrow
20:51 - function as an a sync function so let's
20:54 - precede our event parameter with a sync
20:57 - so that we can use a
20:58 - wait we're going to wait for this
21:01 - function to return the weather data once
21:04 - we receive our weather data we will call
21:06 - the display weather info function and
21:11 - pass along that data the weather
21:14 - data okay this function is complete once
21:17 - you've typed everything in I'm going to
21:19 - close this
21:21 - function and we can close our display
21:23 - error function
21:24 - too now once we want to get our weather
21:27 - data after we have a
21:29 - city now we actually need to fetch the
21:31 - weather data we'll have to create a URL
21:34 - we'll create a constant of API
21:38 - URL this is what we'll pass to the fetch
21:40 - function we will use a template string
21:43 - be sure to use a pair of back
21:45 - ticks we'll need to get the following
21:48 - URL at this web
21:50 - page we need to find the API call where
21:54 - we can pass in a city name we can copy
21:57 - this
22:01 - within our template string we'll paste
22:04 - it we'll replace the city name with the
22:08 - placeholder and use our city
22:11 - variable for the API key we'll use a
22:15 - placeholder pass in the API
22:22 - key this is what we'll pass to the fetch
22:25 - function we will create a response
22:28 - const
22:29 - response equals a wait we can use a
22:33 - weight because we're within an async
22:35 - function we will
22:38 - fetch our API URL once we have a
22:42 - response let's check our
22:44 - response let's console.log our response
22:47 - just to see what it
22:49 - is okay I will type in the city of Miami
22:53 - get weather our data should be within
22:56 - console.log
22:59 - here's our response it has a status of
23:02 - 200 and it's okay we need to check to
23:05 - see if our response is not okay what if
23:07 - we couldn't retrieve the data I'll make
23:09 - up some gibberish
23:12 - City let's go to inspect
23:16 - console we have a response status 404
23:20 - the response is not okay we'll write an
23:23 - if
23:24 - statement if our
23:26 - response is not
23:29 - okay we will throw a new error and pass
23:34 - along this
23:36 - message could not fetch weather
23:41 - data else if our response is okay we
23:44 - will return the
23:46 - response and we will
23:48 - await our response convert it to a Json
23:52 - format using the Json
23:54 - method so at the end of this function
23:57 - return an object that's in a Json like
24:00 - format this data is going to be returned
24:03 - to our event
24:05 - listener after we get our weather data
24:08 - we need to display it we'll work on the
24:10 - display weather info function next this
24:13 - one let's console.log the data we
24:20 - receive I will type in
24:24 - Miami so it looks like that
24:26 - worked we have a name of Miami for the
24:30 - city we have the weather which is an
24:33 - array it's an array of
24:35 - objects we have coordinates clouds
24:38 - pretty much anything you can think of
24:39 - regarding the weather let's get the name
24:42 - within main there is temperature the
24:45 - temperature will be in kelvin we need to
24:47 - convert it I'll get the humidity within
24:50 - weather it's an array of objects we will
24:52 - get the
24:54 - description overcast clouds and this ID
24:58 - eventually we'll use the ID to return an
25:00 - emoji there's different weather codes
25:02 - I'll explain that
25:04 - later so we're going to use some object
25:07 - destructuring const use object
25:10 - destructuring with a set of krly
25:12 - brackets we will access the name
25:15 - property and create a variable of city
25:18 - city will be Miami in this case then we
25:22 - will access main main is a property that
25:25 - contains an array take main use object
25:29 - destructuring again now we're within a
25:31 - nested
25:32 - object I would like the temp and the
25:38 - humidity then let's select our
25:42 - weather so whether it's an array of
25:47 - objects we'll have to use array
25:49 - destructuring followed by object
25:51 - destructuring give me the
25:56 - description
25:58 - and the
26:00 - ID we have to set this all equal to data
26:04 - to use
26:05 - destructuring and let me organize this
26:07 - to make it look
26:10 - nice our data is one gigantic object
26:14 - that has nested objects and nested
26:16 - arrays so after destructuring we'll have
26:19 - these variables the city the temperature
26:23 - the humidity a description of the
26:24 - weather and an ID for the weather code
26:27 - now we can use these like
26:29 - variables so with our card currently
26:32 - we're not displaying it now I would like
26:34 - to display
26:35 - it we are going to take our card set the
26:39 - text content to be an empty string if
26:43 - there's already some text here we would
26:45 - like to reset it such as if there was an
26:47 - error
26:48 - message take our
26:50 - card access it style set the display
26:54 - property to be Flex for Flex box
26:59 - just to be sure that this is working I'm
27:01 - going to get the weather without
27:02 - entering a city after we do type in a
27:05 - city it should
27:06 - reset that's good that's what we wanted
27:09 - or if we make up some gibberish we have
27:12 - that error could not fetch weather data
27:14 - but then if we type in something
27:16 - legitimate and get the weather it'll
27:18 - reset that's what we would
27:20 - like okay now we have to create the
27:23 - elements the elements that we previously
27:25 - deleted from the div element we need to
27:28 - recreate those we will create a constant
27:32 - for City display to display the
27:36 - city document. create element our city
27:41 - display was an H1 element let's copy
27:44 - this line of code and paste it a few
27:47 - times four additional
27:49 - times we have City display temp display
27:52 - for the temperature that was a paragraph
27:56 - element humid humidity
27:59 - display humidity display that was also a
28:03 - paragraph
28:04 - element a description display which we
28:08 - shortened to desk desk
28:10 - display that was also a
28:12 - paragraph and a weather Emoji weather
28:17 - emoji and that was also a
28:20 - paragraph okay now we need to change the
28:22 - text content of each of these elements
28:24 - but they're empty so to say let's take
28:26 - the text content of our city
28:29 - display. text content property equals
28:34 - our city variable that we
28:36 - destructured okay let's see if that
28:37 - works I'll type in a city get weather oh
28:41 - and then we need to append
28:42 - it take our
28:45 - card append child we will append the
28:49 - city display element let's try that
28:51 - again type in Miami get the weather that
28:54 - should display
28:55 - Miami let's try Dallas
28:58 - Texas
29:01 - Dallas Oh and before displaying it we
29:03 - need to add the class list the CSS class
29:06 - for the city display after adding the
29:09 - text content we will take our city
29:11 - display access its class list add the
29:15 - class the CSS class of City display so
29:20 - then when we type in a city we should
29:23 - have that CSS styling all right now we
29:25 - have to add the temperature following
29:27 - the same
29:28 - format we will take our temp display
29:31 - access the text content equals I'll use
29:35 - a template string with a pair of back
29:37 - ticks I'll add a placeholder pass in our
29:41 - temperature add a degree symbol you can
29:44 - hold alt then type 0176 for a degree
29:47 - symbol now this is normally in kelvin
29:50 - actually I don't think Kelvin uses the
29:52 - degree symbol but we'll be changing that
29:54 - momentarily take our temperature display
29:58 - access its class list add the following
30:01 - class add the CSS class of temp
30:07 - display then we have to append the
30:09 - element to the card element take our
30:11 - card we will append a child element of
30:15 - temperature
30:16 - display so now we should see the
30:19 - temperature but it's going to be in
30:21 - kelvin we have the city and the
30:24 - temperature for the temperature if you
30:26 - would like celsi
30:27 - let's use de
30:29 - C you have to subtract from the
30:32 - temperature
30:39 - 273.15 okay but now we should probably
30:41 - round it so let's enclose this equation
30:44 - with a set of parentheses follow this
30:46 - with the two fixed method of numbers to
30:49 - round it to one decimal
30:54 - place 15.6 de C
30:57 - if you would like a Fahrenheit
30:58 - temperature this is the formula take our
31:01 - temp in kelvin
31:04 - minus
31:06 - 273.15 we will multiply this by 9 / 5 +
31:14 - 32 so let's enclose this all within a
31:16 - set of
31:20 - parentheses so now we should get that
31:22 - temperature but in Fahrenheit oh and
31:24 - then add F to the end
31:28 - 60° F then we'll get the humidity so
31:32 - take our humidity display element that
31:34 - we created access the text content set
31:39 - it equal to be a template string using a
31:42 - pair of back ticks let's add the word
31:46 - humidity col in space add a placeholder
31:50 - display our humidity
31:52 - variable We'll add the class list of
31:55 - humidity display
31:57 - humidity display access its class list
32:01 - add the following
32:02 - class of humidity
32:06 - display then we have to append the
32:09 - element to the card element card. append
32:13 - child append our humidity
32:16 - display so we should get the
32:20 - humidity Miami 60° fah humidity 81 let's
32:25 - add
32:26 - percent
32:29 - 81% yep that does work then we'll add
32:31 - the description a description of the
32:34 - weather take the element of description
32:36 - display access the text content
32:41 - equals the
32:46 - description then add the CSS class to
32:49 - the class list for this element
32:51 - description display access the class
32:53 - list add the following class
32:58 - of description
33:00 - display then add the element card. aend
33:06 - child we will append our description
33:10 - display let's type in Miami get the
33:13 - weather currently in Miami there's
33:16 - overcast clouds now we have to get an
33:18 - emoji based on the weather with our
33:20 - element of weather Emoji we will access
33:23 - the text content equals we will call the
33:27 - get weather Emoji function but we have
33:30 - to pass in a weather
33:32 - ID so we will pass in the ID
33:37 - variable that we receive from
33:40 - data once we get our weather
33:43 - Emoji we'll work on that momentarily
33:45 - we'll take our element of weather Emoji
33:48 - access the class list add the following
33:51 - CSS
33:53 - class of weather
33:55 - emoji
33:58 - then append it to the card card. append
34:02 - child we will append our weather
34:07 - Emoji all right now before we canest it
34:09 - we need to fill in the get weather Emoji
34:13 - function so with this open Weather AI
34:16 - there are different group codes so our
34:18 - weather ID is going to be either within
34:20 - the 200 range meaning a thunderstorm the
34:23 - 300 range means drizzle 500 is rain 600
34:27 - is snow 700 is atmosphere such as Mist
34:31 - smoke or even a tornado 800 exactly is a
34:35 - clear sky anything greater than 800
34:38 - means
34:39 - clouds so our weather ID is going to be
34:41 - one of these codes so we're going to use
34:44 - a
34:45 - switch we will examine the Boolean value
34:48 - of true does the value of true match one
34:52 - of these cases we'll have a case for
34:55 - group 200 if our weather ID that we pass
34:59 - in is greater than or equal to
35:04 - 200 and the weather
35:08 - ID is less than
35:13 - 300 that means there's a
35:15 - thunderstorm we will return an emoji a
35:20 - thunderstorm
35:21 - Emoji
35:24 - thunderstorm I don't like the look back
35:28 - one that's
35:30 - better okay group 300 is a drizzle so
35:34 - let's copy this case because I don't
35:35 - feel like retyping
35:38 - it if our weather ID is greater than or
35:41 - equal to 300 and less than 400 that
35:45 - means we have a
35:47 - drizzle we'll just add an emoji of a
35:49 - raining
35:51 - Cloud so group 500 is also rain but it's
35:55 - a heavier rain
35:57 - so let's copy this case paste
36:01 - it if our weather ID is greater than or
36:04 - equal to
36:06 - 500 and less than 600 will return rain
36:09 - as well group 600 is
36:16 - snow if our weather ID is greater than
36:19 - or equal to
36:20 - 600 and less than
36:24 - 700 we will return a snowflake
36:27 - meaning
36:28 - snow then we have group
36:35 - 700 if our weather ID is greater than or
36:38 - equal to
36:39 - 700 and less than
36:43 - 800 we'll return some fog
36:46 - Emoji 800 exactly means a clear sky we
36:50 - can display the
36:55 - Sun if our weather ID is strictly equal
37:00 - to 800
37:02 - exactly we'll return a sun emoji
37:06 - anything within the 800 range means
37:14 - clouds so if our weather
37:18 - ID is greater than or equal to 801 800
37:22 - means clear
37:24 - sky so with this group code
37:27 - it only goes up to
37:28 - 809 if our weather ID is less than 810
37:33 - return a
37:37 - cloud then let's add a default in case
37:39 - we get a weird weather
37:42 - code
37:44 - default
37:47 - return I don't know a question
37:51 - mark we get some unknown weather
37:54 - phenomena UFOs or something I don't know
37:58 - okay and I think that should be
38:00 - everything let's close out of this close
38:03 - out of these
38:05 - functions and now if I were to type in
38:07 - Miami and get the weather in Miami it is
38:10 - 60.3 De F humidity 81% there's overcast
38:15 - clouds and we get a cloud Emoji because
38:17 - it's cloudy let's try
38:20 - Dallas we have a clear sky 45° F
38:24 - humidity
38:25 - 63% clear sky and we get a sun emoji all
38:29 - right everybody so that is a weather app
38:31 - that you can make using JavaScript HTML
38:34 - and
38:38 - CSS

Cleaned transcript:

hey everybody so in today's video we're going to create a weather app that fetches data from an API you can look up any City and get the weather if that sounds good to you then sit back relax and enjoy the show if you would like to follow along you will need your own API key the API that we'll be using is openweathermap.org you do need to sign up for an account though it is free to sign up for an account you can go to sign in if you're currently not registered you can create an account for free once you're signed in you'll need an API key go to my API Keys it may take you some time to get an API key generated for you mine took about 15 minutes and once you get it make sure it's active we will need that API key about 20 minutes into this topic hopefully for you by then it'll be generated okay let's do this everybody we will Begin by creating a form element the form element will have a class of weather form our form element is going to have an input element and a button within this input element we'll type in the name of the city we would like to retrieve the weather data 4 so the type of this input element is going to be text for some text the class will be City input so a user can type in the city and we'll add a placeholder let me zoom in a little so you can see it the placeholder will equal enter City then we'll need a button let's create a button element with text of get weather the type of this button will be submit it's the submit button for our form after retrieving the weather data we'll display the weather data in a card format like a Pokemon or YuGiOh card so we will create a develop with a class of card but before applying some CSS we should at least add some placeholder elements so we can style them and see the changes for the time being let's create an H1 element we will be deleting these elements later so don't get too attached I will set the class of this element to be City display We'll add a sample City let's say Miami or pick a city if you're choosing then I will create a paragraph element the class will be temp display meaning temperature let's say the temperature is 90° F or pick something in celsius if you're on Windows to add a degree symbol you can hold alt then type 0176 Miami is going to be 90° F then we'll create a paragraph element for the humidity class equals humidity display for the text next let's say humidity colon space then a percentage 75% then we need a description of the weather this will be another paragraph element the class will equal description display desk meaning description for the description let's say clear skies I'll also display an emoji depending on what the weather is the class will be weather Emoji I'll use a sun for some reason if we can't display the weather data such as if we can't locate a city let's add the following paragraph the class of this element will be error display We'll add the text of please enter a city that is all the HTML that we need for now we're going going to apply some CSS styling next so now let's head to our CSS style sheet we are going to select the body of our document select a font family I will pick Ariel with a backup of s serif I'll change the background color of the body background color pick a color I'm going to use hsl values I will set the lightness to be 95% so it's a light gray color I will set that all margin around the body to be zero then I'll use flex box to display the elements display Flex the flex direction will be a column to arrange all the elements in a column then align item Center to horizontally align all the elements align item center now we'll select the class of weather form that'll be this form that has an input element and a button all we'll do is add a little bit of margin around the entire form 20 pixels then we'll select our city input that's going to be the text box class of City input I will add some padding of 10 pixels let me zoom out to 100% increase the font size to 2 RM set the font weight to be bold I'll add a border two pixel solid and pick a color but all lower the alpha so it's transparent to 30% there's our border currently border radius around the corners let's do 10 pixels add some margin of 10 pixels that'll separate this element from the button and set a width of 300 pixels okay let's style the button next okay we are going to select all buttons that have an attribute where the type equals submit so that's going to be for our submit button that says get weather let me scroll down okay I'm going to add some padding around the button 10 pixels by 20 pixels I'll set the font weight to be bold I'll increase the font size to be to RM pick a background color for the button I'll pick something green but I'll use hsl values I've already prepicked a color let's go with 122 39% and 50% that's a good shade of green I will set the color to be white for the font color remove the border border none and Border radius 5 pixels to round the corners then when we hover our cursor over the button I would like it to be a pointer and that does work when we hover our cursor over the button we'll use the hover sudo class to change the background color so let's take our button for the type attribute is submit access the hover sudo class take our background color make it a little bit darker I'll bring down the lightness by 10% so it's at 40% so that does in fact work okay then we're going to select our card class that contains all the weather data so we will select the class of card for the background we're going to do something a little bit different we're going to use a linear gradient instead of selecting the background color we will select the background I will use the linear gradient function there's three arguments think of a linear gradient as a slow transition between two colors we need an angle in degrees we'll say 180° for now then a color let's pick something blue and orange I'm going to pick some colors that look a little bit better so for blue let's set the Hue to be 210 100% for the saturation and the lightness will be 75% that's a good shade of blue and for orange we'll use another hsl value for the Hue I'll say 40% the saturation will be 100% And The lightness will be 75% so I'm hoping with this linear gradient the background color looks kind of like a sunrise or a sunset once we have our background I will add some padding of 50 pixels I'll add a box Shadow to this card we'll add a vertical and horizontal offset of 2 pixels each and a blur effect where the radius is 5 pixels then we'll pick a color I'm just going to lower the alpha to 50% not bad this gives our card a 3D pop effect I will set a minimum width of this card to be 300 pixels then we have to align everything within it I'll use flex box because I like Flex box display Flex Flex direction will be a column and align items Center to horizontally align the items there we go then we'll select all H1 elements that's going to be our city name select all H1 elements increase the font size to be 3 .5 RM I'll remove any margin from the top margin top will be zero and add margin to the bottom of 25 pixels then we'll select all paragraphs that's going to be everything underneath our city select all paragraphs increase the font size to 1.5 RM there's a lot of a natural margin between the paragraphs let's set all margin to be zero to see what it looks like okay let's add a little bit of margin five pixels on the top and bottom zero margin on the sides that's a lot better we'll select the city display and the temperature display we're going to be selecting two classes City display comma our temp display take these two classes apply the following properties you know what for our font size let's set that to be 3.5 RM we can honestly remove that from H one for the font weight I will set that to be bold for the color I'll make the color a little transparent I'll set the alpha down to 75% so that our city and our temperature they're both going to be transparent then I'll add some margin to the bottom margin bottom 25 pixels okay let's select our humidity display class humidity display set the font weight to be bold and add some margin to the bottom of 25 pixels then we'll select our description display which we shortened to desk display for the font style I will set it to be italic and the font weight will be bold I'll increase the font size to 2 RM then we'll select our weather Emoji so class weather Emoji remove all margin around the Emoji margin zero then we'll increase the font size of the Emoji the size will be 7.5 RM so it's kind of big then if for some reason we display an error we'll display this text so this class is error display I'll set the font size to be 2.5 RM the font weight will be bold I'll set the color to be something transparent all over the alpha to 75% okay that is all the CSS that we need let's go back to our HTML file we can delete everything within the card class we just wanted to see what it would look like with the elements populated with our card element I will set the style attribute to be take the display property set it to be none we don't want to display the card at all until we get the weather data until it's returned to us our HTML is done our CSS is done then we're ready to add some JavaScript functionality we'll declare our constants that we need const weather form equals document dot now since we're not working with IDs we can't get element by ID we're working with classes we can use Query selector or query selector all so I'm going to use Query selector this will return the first element in this class we only have one element with this class class WEA form we'll store a reference to it const City input equals document. query selector we are selecting the class of City input that's going to be this text box const card our card is what contains all the weather data document. query selector select the class of card and give me the first element now we'll need that API key const API key equals now here's my API key please don't try and use this one specifically I will be deactivating it at the end of this video hopefully by now you should have that API key given to you first we'll take our weather form we'll add an event listener this is our form the text element and the submit button when we click on this button the event type is going to be submit after we attempt to submit this form we'll do the following code we'll have one parameter an event that's going to be provided to us Arrow do this we'll fill this in later we'll declare our functions that we need we will need an async function to get weather data there will be one parameter a city that's going to be passed in then we'll need a function to display weather info there will be one parameter data the data will be in a Json like format we'll create a function to get weather Emoji based on what the weather is there will be one parameter a weather ID then we'll create a function to display to the screen any errors if there are any function display error there will be one parameter a message a message to be displayed to the window within our event listener once we have a submit event once we click the button forms do have a default Behavior where they'll refresh the page we would like to prevent that so let's take our event use the prevent default method to prevent the default behavior for a form we don't want to refresh the page then we'll have to get the city the value within this text box const City equals take the city input access the value store it within this variable it should be a string we'll use an if statement if City if there's a value within here this will be true we can use it within an if statement if there is a city do this else we'll call the display error function else we will display an error we will pass along the message to please enter a city let's fill in the dis display error function we want to be sure that it works before continuing the display error function is at the bottom we'll be provided with a message to display we will create a constant of error display equals document now we'll create an element create element we will create a paragraph then we'll need to change the text content of this element error display access the text content set it equal to be our message then we're going to add the class of error display we would like these CSS properties take our error display element access the class list then we will add a class we will add the CSS class of error display then we will take our card element which normally displays the weather data take our card reset the text content if there is something there we'll set it to be an empty string so normally with our card the display is set to none we'll set the display to be a block or even Flex access our card access the style access the display and I will set the display to be Flex to display it we will take our card we will append a child element append child we will append this paragraph of error display to the card now if I were to not type in anything and just press get weather we get this error message please enter a city to our card I'm just going to round the corners to make it look better border radius let's do 10 pixels that's better okay moving on if we do have a city if there's text within here we will try some code because it might cause some errors we will catch any errors that happen we have one parameter of error if there's an error we can console.log or console. error the error then let's call our display error function we'll pass along the error and display it now we need to get the weather data within our Tri block we will create a constant of weather data equals now we need to await get weather data function and pass in our city so with the weight we can only use a weight within an async function since we're within an arrow function we could declare this Arrow function as an a sync function so let's precede our event parameter with a sync so that we can use a wait we're going to wait for this function to return the weather data once we receive our weather data we will call the display weather info function and pass along that data the weather data okay this function is complete once you've typed everything in I'm going to close this function and we can close our display error function too now once we want to get our weather data after we have a city now we actually need to fetch the weather data we'll have to create a URL we'll create a constant of API URL this is what we'll pass to the fetch function we will use a template string be sure to use a pair of back ticks we'll need to get the following URL at this web page we need to find the API call where we can pass in a city name we can copy this within our template string we'll paste it we'll replace the city name with the placeholder and use our city variable for the API key we'll use a placeholder pass in the API key this is what we'll pass to the fetch function we will create a response const response equals a wait we can use a weight because we're within an async function we will fetch our API URL once we have a response let's check our response let's console.log our response just to see what it is okay I will type in the city of Miami get weather our data should be within console.log here's our response it has a status of 200 and it's okay we need to check to see if our response is not okay what if we couldn't retrieve the data I'll make up some gibberish City let's go to inspect console we have a response status 404 the response is not okay we'll write an if statement if our response is not okay we will throw a new error and pass along this message could not fetch weather data else if our response is okay we will return the response and we will await our response convert it to a Json format using the Json method so at the end of this function return an object that's in a Json like format this data is going to be returned to our event listener after we get our weather data we need to display it we'll work on the display weather info function next this one let's console.log the data we receive I will type in Miami so it looks like that worked we have a name of Miami for the city we have the weather which is an array it's an array of objects we have coordinates clouds pretty much anything you can think of regarding the weather let's get the name within main there is temperature the temperature will be in kelvin we need to convert it I'll get the humidity within weather it's an array of objects we will get the description overcast clouds and this ID eventually we'll use the ID to return an emoji there's different weather codes I'll explain that later so we're going to use some object destructuring const use object destructuring with a set of krly brackets we will access the name property and create a variable of city city will be Miami in this case then we will access main main is a property that contains an array take main use object destructuring again now we're within a nested object I would like the temp and the humidity then let's select our weather so whether it's an array of objects we'll have to use array destructuring followed by object destructuring give me the description and the ID we have to set this all equal to data to use destructuring and let me organize this to make it look nice our data is one gigantic object that has nested objects and nested arrays so after destructuring we'll have these variables the city the temperature the humidity a description of the weather and an ID for the weather code now we can use these like variables so with our card currently we're not displaying it now I would like to display it we are going to take our card set the text content to be an empty string if there's already some text here we would like to reset it such as if there was an error message take our card access it style set the display property to be Flex for Flex box just to be sure that this is working I'm going to get the weather without entering a city after we do type in a city it should reset that's good that's what we wanted or if we make up some gibberish we have that error could not fetch weather data but then if we type in something legitimate and get the weather it'll reset that's what we would like okay now we have to create the elements the elements that we previously deleted from the div element we need to recreate those we will create a constant for City display to display the city document. create element our city display was an H1 element let's copy this line of code and paste it a few times four additional times we have City display temp display for the temperature that was a paragraph element humid humidity display humidity display that was also a paragraph element a description display which we shortened to desk desk display that was also a paragraph and a weather Emoji weather emoji and that was also a paragraph okay now we need to change the text content of each of these elements but they're empty so to say let's take the text content of our city display. text content property equals our city variable that we destructured okay let's see if that works I'll type in a city get weather oh and then we need to append it take our card append child we will append the city display element let's try that again type in Miami get the weather that should display Miami let's try Dallas Texas Dallas Oh and before displaying it we need to add the class list the CSS class for the city display after adding the text content we will take our city display access its class list add the class the CSS class of City display so then when we type in a city we should have that CSS styling all right now we have to add the temperature following the same format we will take our temp display access the text content equals I'll use a template string with a pair of back ticks I'll add a placeholder pass in our temperature add a degree symbol you can hold alt then type 0176 for a degree symbol now this is normally in kelvin actually I don't think Kelvin uses the degree symbol but we'll be changing that momentarily take our temperature display access its class list add the following class add the CSS class of temp display then we have to append the element to the card element take our card we will append a child element of temperature display so now we should see the temperature but it's going to be in kelvin we have the city and the temperature for the temperature if you would like celsi let's use de C you have to subtract from the temperature 273.15 okay but now we should probably round it so let's enclose this equation with a set of parentheses follow this with the two fixed method of numbers to round it to one decimal place 15.6 de C if you would like a Fahrenheit temperature this is the formula take our temp in kelvin minus 273.15 we will multiply this by 9 / 5 + 32 so let's enclose this all within a set of parentheses so now we should get that temperature but in Fahrenheit oh and then add F to the end 60° F then we'll get the humidity so take our humidity display element that we created access the text content set it equal to be a template string using a pair of back ticks let's add the word humidity col in space add a placeholder display our humidity variable We'll add the class list of humidity display humidity display access its class list add the following class of humidity display then we have to append the element to the card element card. append child append our humidity display so we should get the humidity Miami 60° fah humidity 81 let's add percent 81% yep that does work then we'll add the description a description of the weather take the element of description display access the text content equals the description then add the CSS class to the class list for this element description display access the class list add the following class of description display then add the element card. aend child we will append our description display let's type in Miami get the weather currently in Miami there's overcast clouds now we have to get an emoji based on the weather with our element of weather Emoji we will access the text content equals we will call the get weather Emoji function but we have to pass in a weather ID so we will pass in the ID variable that we receive from data once we get our weather Emoji we'll work on that momentarily we'll take our element of weather Emoji access the class list add the following CSS class of weather emoji then append it to the card card. append child we will append our weather Emoji all right now before we canest it we need to fill in the get weather Emoji function so with this open Weather AI there are different group codes so our weather ID is going to be either within the 200 range meaning a thunderstorm the 300 range means drizzle 500 is rain 600 is snow 700 is atmosphere such as Mist smoke or even a tornado 800 exactly is a clear sky anything greater than 800 means clouds so our weather ID is going to be one of these codes so we're going to use a switch we will examine the Boolean value of true does the value of true match one of these cases we'll have a case for group 200 if our weather ID that we pass in is greater than or equal to 200 and the weather ID is less than 300 that means there's a thunderstorm we will return an emoji a thunderstorm Emoji thunderstorm I don't like the look back one that's better okay group 300 is a drizzle so let's copy this case because I don't feel like retyping it if our weather ID is greater than or equal to 300 and less than 400 that means we have a drizzle we'll just add an emoji of a raining Cloud so group 500 is also rain but it's a heavier rain so let's copy this case paste it if our weather ID is greater than or equal to 500 and less than 600 will return rain as well group 600 is snow if our weather ID is greater than or equal to 600 and less than 700 we will return a snowflake meaning snow then we have group 700 if our weather ID is greater than or equal to 700 and less than 800 we'll return some fog Emoji 800 exactly means a clear sky we can display the Sun if our weather ID is strictly equal to 800 exactly we'll return a sun emoji anything within the 800 range means clouds so if our weather ID is greater than or equal to 801 800 means clear sky so with this group code it only goes up to 809 if our weather ID is less than 810 return a cloud then let's add a default in case we get a weird weather code default return I don't know a question mark we get some unknown weather phenomena UFOs or something I don't know okay and I think that should be everything let's close out of this close out of these functions and now if I were to type in Miami and get the weather in Miami it is 60.3 De F humidity 81% there's overcast clouds and we get a cloud Emoji because it's cloudy let's try Dallas we have a clear sky 45° F humidity 63% clear sky and we get a sun emoji all right everybody so that is a weather app that you can make using JavaScript HTML and CSS
