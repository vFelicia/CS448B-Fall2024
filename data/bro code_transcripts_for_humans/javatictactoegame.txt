With timestamps:

00:00 - how's it going everybody it's bro here
hope you're doing well and in this video
00:03 - I'm going to teach you guys how we can
create a game of tic-tac-toe using Java
00:07 - so sit back relax and enjoy the show
00:12 - if you find this video helpful please
remember to Like comment and subscribe
00:16 - your support will help keep this channel
running all right everybody let's create
00:22 - a game of tic-tac-toe so I'm going to go
to file new Java project to create a new
00:27 - project I'll call this tic-tac-toe and
click finish
00:34 - don't create a module then within this
project folder I'm going to create a new
00:41 - class and I will call this class min
then check this public static void main
00:47 - checkbox and then we're going to create
another class so new class and I'll call
00:56 - this class tic-tac-toe and click finish
ok let's create an instance of
01:04 - tic-tac-toe within our main class so
within the main class I'm just going to
01:08 - get rid of this comment because we don't
necessarily need this let's create an
01:12 - instance of our tic-tac-toe clasts we're
going to type in the name of the class
01:16 - tic-tac-toe
we'll need a name for this instance I'll
01:19 - just call this tic-tac-toe all the lower
case but it doesn't really matter what
01:23 - you call it equals new tic-tac-toe I'm
gonna get real sick of saying
01:29 - tic-tac-toe by the end of this video
just so you know
01:32 - alright so that's everything we need for
this main class let's head to our
01:36 - tic-tac-toe class we'll need a few
imports before we begin working on this
01:40 - class so make sure you have at least
these four imports and now next to this
01:45 - class definition we'll want to implement
the action listener interface so right
01:50 - after tic-tac-toe we're going to type in
implements action listener and currently
01:57 - this is going to be underlined red
that's fine we're going to fix this in
02:01 - just a moment because we're implementing
an interface so if there's any declared
02:05 - methods we need to utilize them within
our program so let's create the
02:10 - constructor for this class so I'm just
going
02:13 - type in the name of the class followed
by a set of parentheses in curly braces
02:16 - this is the constructor we'll just leave
this empty for now and fill this in
02:20 - later so we'll also need to add
unimplemented methods so we need to
02:25 - utilize this actionperformed method
since we're utilizing an action listener
02:30 - interface next we'll create a method
that will determine whose turn is first
02:37 - and this will be random will it be X's
turn first or au turn so let's create a
02:42 - public void method called maybe first
turn and we'll just declare this but not
02:49 - actually fill this in quite yet and next
let's create a method that will check to
02:55 - see if there are any winning conditions
or if any player has currently won so
03:00 - we'll do the same thing public void
check and now what we're going to do is
03:07 - create two methods one if X wins and the
other if a wins and we're going to check
03:12 - to see who wins
within this check method and at the end
03:16 - we'll just call one of these win methods
basically so we'll create one for X
03:21 - first
so public void X wins and we'll set up
03:26 - some parameters so we're going to
receive the winning combination of
03:31 - buttons basically so what buttons did
the user press to actually win this game
03:36 - and we're actually going to color these
green to display the winning combination
03:40 - basically so we'll just set this up to
be integer values so we'll set up these
03:45 - parameters with int a int B and int C
and that should be good and let's do the
03:53 - same thing for oh but we can just copy
this and paste it and change X to oh
03:59 - okay so that should be good these are
all the methods that we need so let's
04:04 - just double check this we have the
constructor for tic-tac-toe we have our
04:08 - actionperformed method the first turn
method the check method X wins and Owens
04:14 - so let's start before the constructor
and declare a few things now with this
04:19 - program we're going to determine whose
turn it is first randomly so we're going
04:23 - to create an instance of the random
class
04:25 - to help us with that so random and we'll
call this random equals new random now
04:33 - we'll need AJ frame so J frame and we
can call this frame equals new J frame
04:40 - and let's create a panel to hold the
title so this will be a J panel and
04:48 - we'll call this title underscore panel
equals new J panel and let's create
04:57 - another panel to hold all of the buttons
that we have so J panel and we'll call
05:02 - this button underscore panel equals new
J panel and we'll want a label to serve
05:13 - as maybe a text field to display a
message of some sort so J label and
05:19 - let's call this text field equals new J
label all right we're going to want an
05:27 - array of J buttons so we're going to
type in J button then straight braces
05:34 - because this is going to be an array and
we'll call this buttons equals new J
05:40 - button straight braces and we actually
need nine buttons so within the straight
05:46 - braces we can just type in nine because
we don't need any more or less than nine
05:50 - for this game and lastly we're going to
create a boolean variable called player
05:56 - one underscore turn so this is going to
be true if it's player ones turn or
06:03 - false if it's player two's turn so it's
not really necessary to have a boolean
06:09 - for player two's turn because one's
enough if player one is false then it's
06:15 - player two's turn basically and vice
versa so that should be everything we
06:19 - need to declare before we move on to the
constructor for the tic-tac-toe game so
06:25 - within the constructor let's start with
creating the jframe first so we're going
06:29 - to type in frame dot set default close
operation and then within the
06:35 - parentheses J frame dot exit
close then we're going to set a size for
06:43 - this frame so frame dot set size and I
think 800 by 800 would be good for the
06:51 - size for this frame okay and then what
we're going to do is type in frame dot
06:58 - get content pane and then we're going to
set the background color so set
07:09 - background then we're going to type in
new color and then we can type in some
07:17 - RGB values so I'm going to select
something that's darker like 50 50 50 so
07:24 - this is a lighter shade of black
otherwise if you want something generic
07:28 - you can just type in like color dot I
don't know red but otherwise you can be
07:33 - more specific and place some RGB values
here okay and then we're going to set a
07:39 - layout for this frame so frame dot set
layout and I usually type in null but
07:46 - what I'm going to do is type in new
boarder layout and then lastly we want
07:54 - to set the frames visibility to true so
frame dot set visible true and then
08:02 - we're good with the frame so let's move
on to our text field so after the frame
08:07 - we're going to maybe first set the
background color for our text field so
08:12 - text field dot set background and then
we can pick a color so new color and
08:22 - this is going to be the same process as
what we did up here so I'm just going to
08:26 - pick maybe 25 25 and 25 for RGB values
and we can set the text color so what
08:34 - I'm going to do is type in text field
dot set for ground and then new color
08:45 - and I think I will pick the color of
maybe green so maybe 25 to 5
08:52 - five and zero okay and let's set the
font so text field dot set font new font
09:05 - so I'm going to pick ink free this time
so that's the font style and maybe I'll
09:14 - have this be bold
so font bold and I think 75 would be
09:19 - good for a font size okay and then I'm
going to set the horizontal alignment so
09:26 - text field dot set or is Szanto
alignment J label dot Center so remember
09:40 - we're not using no layout manager we're
using a border layout for this okay then
09:48 - let's set some text so text field dot
set text and I'll just display the title
09:54 - of the game for now so tic-tac-toe and
what I'm going to do is type in text
10:03 - field dot set opaque to true so this is
everything we need for the text field
10:10 - we're going to add this text field to a
title panel and then eventually we're
10:15 - going to add this title panel to our
frame so let's work on the title panel
10:20 - next so we're going to type in title
underscore panel dot set layout and
10:29 - we're going to use a boarder layout so
new boarder layout and then for the next
10:39 - line we can set the balance for this
panel so I'm going to type in title
10:43 - panel dot set bounds and we're going to
place the coordinates of where we want
10:49 - this to start so if we want to start in
the top left corner that is where x is 0
10:55 - Y is 0 and for the length maybe I will
select 800 to match the size of this
11:00 - frame and then for a height maybe 100
that should be good
11:06 - okay so then let's add our text field to
our title panel and then add the title
11:12 - panel to our frame so we're going to
type in at the bottom
11:15 - title underscore panel dot add text
field and then we're going to type in
11:24 - frame dot add title underscore panel and
then let's run this and take a look okay
11:31 - so what we have here is that this title
panel is taking up the entire frame that
11:36 - we have so since we're using a boarder
layout we can specify a border that this
11:42 - title panel can stick to basically so if
we want this title panel to stick to the
11:47 - top when we add the title panel to our
frame what we can type in after this is
11:51 - comma then boarder layout dot north and
when we rerun this our title panel is
11:59 - going to stick to the top of our frame
and it's actually adjustable too if we
12:03 - were to resize the frame all right so
let's work on the button panel next so
12:08 - after the title panel we're going to
type in button underscore panel and
12:14 - we're going to use a different layout a
grid layout so we're going to set layout
12:20 - and then within the parentheses new grid
layout and we want this to be 3 by 3
12:28 - since we have nine buttons and let's
also change the background color and
12:33 - honestly I just feel like copying this
and pasting it because I'm too lazy to
12:37 - type stuff out and I'm going to change
this to button panel and maybe we'll
12:43 - change this to 150 150 150 it doesn't
matter we're going to be adding buttons
12:49 - to this so you can't see the color
eventually I just want to be sure that
12:52 - this panel is added so I'm just going to
make the color something drastically
12:57 - different all right then we need to add
the button panel to our frame so I'm
13:02 - going to type that after we add the
title panel so frame dot add then we're
13:09 - going to add the button underscore panel
and let's take a look
13:18 - okay that should be good and this is
going to be our button panel and the
13:23 - reason that we colored it is just a test
to see if it's actually appearing so
13:27 - that should be good
next let's add all of the buttons so
13:30 - let's work on these buttons before we
add everything to our frame and since
13:34 - we're dealing with an array of J buttons
we can easily use a for loop to take
13:38 - care of buttons one through nine for us
so let's begin by creating a for loop so
13:43 - we'll create an index int I equals zero
and we'll continue this as long as I is
13:50 - less than nine one for each button and
then increment I by one each time and
13:56 - then within this for loop we have a few
lines to fill in so we're going to take
14:00 - our buttons array at index I and we're
going to create a new J button and then
14:10 - for the second line we're going to add
this specific button that we're working
14:14 - on to our button panel so let's I pin
button underscore panel dot add buttons
14:25 - at our current index and then for the
next line let's set the font so buttons
14:33 - at index I and we will type in dot set
font and then within here we can specify
14:44 - a new font and for the font style
I will pick M the boli but pick a font
14:51 - that you like and then after this we can
specify if we want this like bold or
14:56 - italic or anything but I'll set this to
be bold I think and then a font size and
15:01 - I will pick 120 all right and then we do
not want these buttons to be focusable
15:08 - so we're going to take buttons at index
I and we're going to set focusable to
15:15 - false and lastly we just need to add an
action listener to each of these buttons
15:20 - so buttons at index I dot add action
listener then within parentheses type in
15:29 - this all right so let's run this
and we get a nice grid of buttons and
15:35 - these are actually resizable too so
that's kind of cool
15:38 - so now let's determine to see whose turn
it is first so we'll have the speed
15:43 - random at the start of your game so at
the end of the constructor let's call
15:48 - the first turn method so first turn and
then fill in this method next all right
15:56 - so there's a few different ways we can
do this I'm thinking what we can do is
15:59 - just have the random class pick a random
integer between maybe 0 and 1 if it's 0
16:06 - it'll be player 1 Stern if it's 1 then
it's player two's turn so we can type in
16:12 - if then random dot next int and we want
two numbers so we're going to type in 2
16:20 - here so we'll get a random number either
0 or 1 so if this number is equal to 0
16:27 - what we'll do is that we're going to
take this boolean value player 1 turn
16:33 - and we're going to set this to true so
player 1 turn equals true and then let's
16:41 - also change the text for the text field
to reflect player ones turn so one is X
16:48 - so we're going to take text field dot
set text then within parentheses we'll
16:56 - just type in X turn alright then we'll
need an else statement so if it's not
17:03 - player ones turn it must be player two's
turn so we can just copy this and we'll
17:09 - change true to false and text field dot
set text to 0 or oh and let's try this
17:18 - now to see if it works all right so it's
always turn let's try it again
17:24 - and it is now X's turn however um if you
want to have that title display for a
17:30 - little bit before assigning a turn for
somebody we can easily just have this
17:34 - program sleep for a little bit so what
I'm going to do when we start first term
17:38 - I'm just going to take our thread and
have this sleep for maybe 2,000
17:45 - and then we need to surround this with a
try and catch block all right so let's
17:50 - try this now
so it says tic-tac-toe for two seconds
17:55 - and then it assigns a turn to either X
or o randomly so this isn't entirely
18:01 - necessary but if you want to add a delay
before assigning somebody's turn you can
18:06 - just add this here so that's everything
we need for our first turn method so
18:11 - let's head to our actionperformed method
so the first thing that we're going to
18:15 - do is that we're going to stick
everything within a for loop so this is
18:20 - going to run nine times whenever a
button is clicked so for int I is equal
18:28 - to zero and then we will perform this as
long as I is less than nine and then we
18:36 - will increment our counter by one so
we're basically going to be checking
18:41 - each of our nine buttons so the first
thing we'll do is if e dot get source is
18:50 - equal to buttons at our specified index
of our for loop then what we'll do is
18:59 - that we will check to see whose turn it
is
19:02 - so we'll need an if-else statement
so with this line I'm going to type in
19:07 - if player one underscore turn and we
don't need to say equals true because
19:16 - this is already a boolean value so if
it's player one Stern what we're going
19:21 - to do is that we're going to check to
see if there is any text assigned to
19:26 - this button because if somebody clicks
on a button we're going to change the
19:30 - text on that button to reflect either an
X or a o but let's check to see if that
19:36 - button has some text first so if this
specific button buttons at index I dot
19:47 - get text function is equal to and then
we'll just place a blank set of double
19:56 - quotes here so what would
I've been within this if statement is
20:01 - buttons at index I we're going to maybe
set the foreground color set for ground
20:10 - and then we'll pick a new color so this
is the color for X maybe I'll pick blue
20:17 - so that is to know that's red actually
255 0 0 all right and then let's also
20:28 - set the text so buttons I set text to
equal just a giant X that should be good
20:40 - and then we're going to flip player once
turn so player 1 underscore turn equals
20:48 - pulse and then for the next line we're
going to change the text field to
20:55 - display that it is now o Stern so text
field dot set text to Oh turn now let's
21:08 - do the same thing for player 2 who is o
so let's create an else statement right
21:14 - where this ends so it looks like it ends
right here so we'll create an else
21:17 - statement and we're going to copy all
this and paste it within here and we're
21:24 - going to change a few things so let's
have player X be read and player o be
21:29 - blue so I'm going to change this value
to 0 and this one to 255 for blue set
21:36 - text to a giant o player 1 turn will be
set to true and then set text for the
21:46 - text field to X turn okay and then the
last thing that we should do is call our
21:52 - check function so let's add that the end
of these if-else statements so we'll
21:58 - call the check function
22:03 - but make sure you spell it right okay
let's test this out then so it is o's
22:11 - turn first and if we were to click one
of these buttons this is now oh let's
22:16 - try it again with X and this is now X
this is pretty sweet
22:21 - all right so we'll want to check to see
if we have any winning combinations so
22:26 - that's what we're going to work on next
within our check method or I guess I'll
22:31 - be honest with you this part of the
project is going to be kind of a pain in
22:34 - the butt to code so what we actually
need to do is check to see if each of
22:38 - these winning combinations has text that
all matches but we're going to do a lot
22:43 - of copying and pasting though so it
shouldn't be too bad so first let's
22:47 - check to see if this first row has any
matches and then we'll do some copying
22:52 - and pasting right after that so we're
going to check using an if statement and
22:56 - then add a set of curly braces after and
then let's add another set of inner
23:01 - parentheses let's strike to see if
buttons at index zero that is our very
23:06 - first button in the top left corner is
equal to X so we need to use the get
23:13 - text method and check to see if this is
equal to the character capital X and
23:19 - then we're going to add the and logical
operator and I'm just going to copy this
23:26 - and paste this and we are going to
change this next part to buttons at
23:34 - index one
but let me format this a little bit so
23:39 - it's even organized
okay and then let's do the same thing
23:43 - for buttons at index two and then we can
get rid of this last one okay so that
23:52 - shouldn't be too bad so what we're going
to do if this first row has all matching
23:58 - X's what we're going to do is call the X
wins method and then we need to send in
24:04 - some arguments so these are three
integers so within the curly braces here
24:11 - what we can type in is we will call the
wins method
24:15 - and send in three integers zero one and
two because that's the winning
24:21 - combination basically okay so let's do
the same thing for the other winning
24:26 - combinations and I'll walk you through
it and we're just going to copy this and
24:29 - paste it because I really don't want to
do this by hand so we'll check three
24:36 - four and five and send these in as well
then we're going to check six seven and
24:46 - eight six seven eight
24:52 - and then zero three six
25:04 - okay then we got one four and seven
25:10 - no not 72 7 1 4 7 2 5 8
25:34 - zero for it
25:46 - and then lastly two four six
25:57 - and then we need to do the same thing
for oh but we're just going to copy all
26:01 - this and change just a few things so
we'll copy all of this and paste this
26:07 - right underneath and we're going to
change all X's to O's and actually guys
26:15 - there's a shortcut that'll let us change
all capital X's to capital O's so what
26:20 - I'm going to do is highlight all of this
text then this is for the Eclipse IDE
26:25 - but if you use them like IntelliJ IDEA
I'm sure there's something similar setup
26:28 - so highlight all of the text that you
want to look through go to edit find
26:34 - replace and I'm going to replace all X's
with capital O's and then make sure the
26:41 - case sensitivity is on then I'm going to
replace all and now all of these capital
26:47 - X's with in the oh wind conditions is
now capital o and we have to do the same
26:52 - thing for lowercase X however we do have
a lowercase X within get text so I kind
26:58 - of want to avoid doing that so I'm just
going to change these by hand real quick
27:01 - and change X to lowercase o so this will
only take one moment so once you change
27:08 - all X wins to owens within the o wins
condition section we can move on to the
27:14 - last few steps of this project so let's
fill in a few lines within the X wins
27:20 - method so we need to indicate that the
player X has won so one thing that we
27:26 - can do is actually change perhaps the
background color of the winning
27:30 - combination of buttons so let's type in
buttons at index a and this is going to
27:38 - be passed in as an argument and we're
going to set background to maybe color
27:48 - dot green and let's do the same thing
for B and C so buttons at index B and
27:58 - buttons at index C and we'll want to
disable all buttons so people can't keep
28:08 - playing so we'll put this within a four
and we'll do this for all nine buttons
28:12 - so int I equals zero will do this nine
times so I is less than nine and
28:18 - increment I by one and then we're going
to take our buttons at index I set
28:28 - enabled false and then lastly we're
going to change the text field to X wins
28:37 - so text field set text X wins and then
let's copy this and do the same thing
28:49 - for o then we are just going to change
set text to oh and that's it that should
28:58 - be this program
so let's actually play this now all
29:03 - right here is our game it is X's turn
I'm just going to start making up stuff
29:10 - and here it is the winning combination X
wins all right well that's everything so
29:18 - if you would like a copy of all this
code I'll post this in the comments down
29:21 - below but yeah that's how you can create
a game of tic-tac-toe using Java hey you
29:27 - yeah I'm talking to you if you learn
something new then you can help me help
29:32 - you in three easy steps
by smashing that like button drop a
29:37 - comment down below and subscribe if
you'd like to become a fellow grow

Cleaned transcript:

how's it going everybody it's bro here hope you're doing well and in this video I'm going to teach you guys how we can create a game of tictactoe using Java so sit back relax and enjoy the show if you find this video helpful please remember to Like comment and subscribe your support will help keep this channel running all right everybody let's create a game of tictactoe so I'm going to go to file new Java project to create a new project I'll call this tictactoe and click finish don't create a module then within this project folder I'm going to create a new class and I will call this class min then check this public static void main checkbox and then we're going to create another class so new class and I'll call this class tictactoe and click finish ok let's create an instance of tictactoe within our main class so within the main class I'm just going to get rid of this comment because we don't necessarily need this let's create an instance of our tictactoe clasts we're going to type in the name of the class tictactoe we'll need a name for this instance I'll just call this tictactoe all the lower case but it doesn't really matter what you call it equals new tictactoe I'm gonna get real sick of saying tictactoe by the end of this video just so you know alright so that's everything we need for this main class let's head to our tictactoe class we'll need a few imports before we begin working on this class so make sure you have at least these four imports and now next to this class definition we'll want to implement the action listener interface so right after tictactoe we're going to type in implements action listener and currently this is going to be underlined red that's fine we're going to fix this in just a moment because we're implementing an interface so if there's any declared methods we need to utilize them within our program so let's create the constructor for this class so I'm just going type in the name of the class followed by a set of parentheses in curly braces this is the constructor we'll just leave this empty for now and fill this in later so we'll also need to add unimplemented methods so we need to utilize this actionperformed method since we're utilizing an action listener interface next we'll create a method that will determine whose turn is first and this will be random will it be X's turn first or au turn so let's create a public void method called maybe first turn and we'll just declare this but not actually fill this in quite yet and next let's create a method that will check to see if there are any winning conditions or if any player has currently won so we'll do the same thing public void check and now what we're going to do is create two methods one if X wins and the other if a wins and we're going to check to see who wins within this check method and at the end we'll just call one of these win methods basically so we'll create one for X first so public void X wins and we'll set up some parameters so we're going to receive the winning combination of buttons basically so what buttons did the user press to actually win this game and we're actually going to color these green to display the winning combination basically so we'll just set this up to be integer values so we'll set up these parameters with int a int B and int C and that should be good and let's do the same thing for oh but we can just copy this and paste it and change X to oh okay so that should be good these are all the methods that we need so let's just double check this we have the constructor for tictactoe we have our actionperformed method the first turn method the check method X wins and Owens so let's start before the constructor and declare a few things now with this program we're going to determine whose turn it is first randomly so we're going to create an instance of the random class to help us with that so random and we'll call this random equals new random now we'll need AJ frame so J frame and we can call this frame equals new J frame and let's create a panel to hold the title so this will be a J panel and we'll call this title underscore panel equals new J panel and let's create another panel to hold all of the buttons that we have so J panel and we'll call this button underscore panel equals new J panel and we'll want a label to serve as maybe a text field to display a message of some sort so J label and let's call this text field equals new J label all right we're going to want an array of J buttons so we're going to type in J button then straight braces because this is going to be an array and we'll call this buttons equals new J button straight braces and we actually need nine buttons so within the straight braces we can just type in nine because we don't need any more or less than nine for this game and lastly we're going to create a boolean variable called player one underscore turn so this is going to be true if it's player ones turn or false if it's player two's turn so it's not really necessary to have a boolean for player two's turn because one's enough if player one is false then it's player two's turn basically and vice versa so that should be everything we need to declare before we move on to the constructor for the tictactoe game so within the constructor let's start with creating the jframe first so we're going to type in frame dot set default close operation and then within the parentheses J frame dot exit close then we're going to set a size for this frame so frame dot set size and I think 800 by 800 would be good for the size for this frame okay and then what we're going to do is type in frame dot get content pane and then we're going to set the background color so set background then we're going to type in new color and then we can type in some RGB values so I'm going to select something that's darker like 50 50 50 so this is a lighter shade of black otherwise if you want something generic you can just type in like color dot I don't know red but otherwise you can be more specific and place some RGB values here okay and then we're going to set a layout for this frame so frame dot set layout and I usually type in null but what I'm going to do is type in new boarder layout and then lastly we want to set the frames visibility to true so frame dot set visible true and then we're good with the frame so let's move on to our text field so after the frame we're going to maybe first set the background color for our text field so text field dot set background and then we can pick a color so new color and this is going to be the same process as what we did up here so I'm just going to pick maybe 25 25 and 25 for RGB values and we can set the text color so what I'm going to do is type in text field dot set for ground and then new color and I think I will pick the color of maybe green so maybe 25 to 5 five and zero okay and let's set the font so text field dot set font new font so I'm going to pick ink free this time so that's the font style and maybe I'll have this be bold so font bold and I think 75 would be good for a font size okay and then I'm going to set the horizontal alignment so text field dot set or is Szanto alignment J label dot Center so remember we're not using no layout manager we're using a border layout for this okay then let's set some text so text field dot set text and I'll just display the title of the game for now so tictactoe and what I'm going to do is type in text field dot set opaque to true so this is everything we need for the text field we're going to add this text field to a title panel and then eventually we're going to add this title panel to our frame so let's work on the title panel next so we're going to type in title underscore panel dot set layout and we're going to use a boarder layout so new boarder layout and then for the next line we can set the balance for this panel so I'm going to type in title panel dot set bounds and we're going to place the coordinates of where we want this to start so if we want to start in the top left corner that is where x is 0 Y is 0 and for the length maybe I will select 800 to match the size of this frame and then for a height maybe 100 that should be good okay so then let's add our text field to our title panel and then add the title panel to our frame so we're going to type in at the bottom title underscore panel dot add text field and then we're going to type in frame dot add title underscore panel and then let's run this and take a look okay so what we have here is that this title panel is taking up the entire frame that we have so since we're using a boarder layout we can specify a border that this title panel can stick to basically so if we want this title panel to stick to the top when we add the title panel to our frame what we can type in after this is comma then boarder layout dot north and when we rerun this our title panel is going to stick to the top of our frame and it's actually adjustable too if we were to resize the frame all right so let's work on the button panel next so after the title panel we're going to type in button underscore panel and we're going to use a different layout a grid layout so we're going to set layout and then within the parentheses new grid layout and we want this to be 3 by 3 since we have nine buttons and let's also change the background color and honestly I just feel like copying this and pasting it because I'm too lazy to type stuff out and I'm going to change this to button panel and maybe we'll change this to 150 150 150 it doesn't matter we're going to be adding buttons to this so you can't see the color eventually I just want to be sure that this panel is added so I'm just going to make the color something drastically different all right then we need to add the button panel to our frame so I'm going to type that after we add the title panel so frame dot add then we're going to add the button underscore panel and let's take a look okay that should be good and this is going to be our button panel and the reason that we colored it is just a test to see if it's actually appearing so that should be good next let's add all of the buttons so let's work on these buttons before we add everything to our frame and since we're dealing with an array of J buttons we can easily use a for loop to take care of buttons one through nine for us so let's begin by creating a for loop so we'll create an index int I equals zero and we'll continue this as long as I is less than nine one for each button and then increment I by one each time and then within this for loop we have a few lines to fill in so we're going to take our buttons array at index I and we're going to create a new J button and then for the second line we're going to add this specific button that we're working on to our button panel so let's I pin button underscore panel dot add buttons at our current index and then for the next line let's set the font so buttons at index I and we will type in dot set font and then within here we can specify a new font and for the font style I will pick M the boli but pick a font that you like and then after this we can specify if we want this like bold or italic or anything but I'll set this to be bold I think and then a font size and I will pick 120 all right and then we do not want these buttons to be focusable so we're going to take buttons at index I and we're going to set focusable to false and lastly we just need to add an action listener to each of these buttons so buttons at index I dot add action listener then within parentheses type in this all right so let's run this and we get a nice grid of buttons and these are actually resizable too so that's kind of cool so now let's determine to see whose turn it is first so we'll have the speed random at the start of your game so at the end of the constructor let's call the first turn method so first turn and then fill in this method next all right so there's a few different ways we can do this I'm thinking what we can do is just have the random class pick a random integer between maybe 0 and 1 if it's 0 it'll be player 1 Stern if it's 1 then it's player two's turn so we can type in if then random dot next int and we want two numbers so we're going to type in 2 here so we'll get a random number either 0 or 1 so if this number is equal to 0 what we'll do is that we're going to take this boolean value player 1 turn and we're going to set this to true so player 1 turn equals true and then let's also change the text for the text field to reflect player ones turn so one is X so we're going to take text field dot set text then within parentheses we'll just type in X turn alright then we'll need an else statement so if it's not player ones turn it must be player two's turn so we can just copy this and we'll change true to false and text field dot set text to 0 or oh and let's try this now to see if it works all right so it's always turn let's try it again and it is now X's turn however um if you want to have that title display for a little bit before assigning a turn for somebody we can easily just have this program sleep for a little bit so what I'm going to do when we start first term I'm just going to take our thread and have this sleep for maybe 2,000 and then we need to surround this with a try and catch block all right so let's try this now so it says tictactoe for two seconds and then it assigns a turn to either X or o randomly so this isn't entirely necessary but if you want to add a delay before assigning somebody's turn you can just add this here so that's everything we need for our first turn method so let's head to our actionperformed method so the first thing that we're going to do is that we're going to stick everything within a for loop so this is going to run nine times whenever a button is clicked so for int I is equal to zero and then we will perform this as long as I is less than nine and then we will increment our counter by one so we're basically going to be checking each of our nine buttons so the first thing we'll do is if e dot get source is equal to buttons at our specified index of our for loop then what we'll do is that we will check to see whose turn it is so we'll need an ifelse statement so with this line I'm going to type in if player one underscore turn and we don't need to say equals true because this is already a boolean value so if it's player one Stern what we're going to do is that we're going to check to see if there is any text assigned to this button because if somebody clicks on a button we're going to change the text on that button to reflect either an X or a o but let's check to see if that button has some text first so if this specific button buttons at index I dot get text function is equal to and then we'll just place a blank set of double quotes here so what would I've been within this if statement is buttons at index I we're going to maybe set the foreground color set for ground and then we'll pick a new color so this is the color for X maybe I'll pick blue so that is to know that's red actually 255 0 0 all right and then let's also set the text so buttons I set text to equal just a giant X that should be good and then we're going to flip player once turn so player 1 underscore turn equals pulse and then for the next line we're going to change the text field to display that it is now o Stern so text field dot set text to Oh turn now let's do the same thing for player 2 who is o so let's create an else statement right where this ends so it looks like it ends right here so we'll create an else statement and we're going to copy all this and paste it within here and we're going to change a few things so let's have player X be read and player o be blue so I'm going to change this value to 0 and this one to 255 for blue set text to a giant o player 1 turn will be set to true and then set text for the text field to X turn okay and then the last thing that we should do is call our check function so let's add that the end of these ifelse statements so we'll call the check function but make sure you spell it right okay let's test this out then so it is o's turn first and if we were to click one of these buttons this is now oh let's try it again with X and this is now X this is pretty sweet all right so we'll want to check to see if we have any winning combinations so that's what we're going to work on next within our check method or I guess I'll be honest with you this part of the project is going to be kind of a pain in the butt to code so what we actually need to do is check to see if each of these winning combinations has text that all matches but we're going to do a lot of copying and pasting though so it shouldn't be too bad so first let's check to see if this first row has any matches and then we'll do some copying and pasting right after that so we're going to check using an if statement and then add a set of curly braces after and then let's add another set of inner parentheses let's strike to see if buttons at index zero that is our very first button in the top left corner is equal to X so we need to use the get text method and check to see if this is equal to the character capital X and then we're going to add the and logical operator and I'm just going to copy this and paste this and we are going to change this next part to buttons at index one but let me format this a little bit so it's even organized okay and then let's do the same thing for buttons at index two and then we can get rid of this last one okay so that shouldn't be too bad so what we're going to do if this first row has all matching X's what we're going to do is call the X wins method and then we need to send in some arguments so these are three integers so within the curly braces here what we can type in is we will call the wins method and send in three integers zero one and two because that's the winning combination basically okay so let's do the same thing for the other winning combinations and I'll walk you through it and we're just going to copy this and paste it because I really don't want to do this by hand so we'll check three four and five and send these in as well then we're going to check six seven and eight six seven eight and then zero three six okay then we got one four and seven no not 72 7 1 4 7 2 5 8 zero for it and then lastly two four six and then we need to do the same thing for oh but we're just going to copy all this and change just a few things so we'll copy all of this and paste this right underneath and we're going to change all X's to O's and actually guys there's a shortcut that'll let us change all capital X's to capital O's so what I'm going to do is highlight all of this text then this is for the Eclipse IDE but if you use them like IntelliJ IDEA I'm sure there's something similar setup so highlight all of the text that you want to look through go to edit find replace and I'm going to replace all X's with capital O's and then make sure the case sensitivity is on then I'm going to replace all and now all of these capital X's with in the oh wind conditions is now capital o and we have to do the same thing for lowercase X however we do have a lowercase X within get text so I kind of want to avoid doing that so I'm just going to change these by hand real quick and change X to lowercase o so this will only take one moment so once you change all X wins to owens within the o wins condition section we can move on to the last few steps of this project so let's fill in a few lines within the X wins method so we need to indicate that the player X has won so one thing that we can do is actually change perhaps the background color of the winning combination of buttons so let's type in buttons at index a and this is going to be passed in as an argument and we're going to set background to maybe color dot green and let's do the same thing for B and C so buttons at index B and buttons at index C and we'll want to disable all buttons so people can't keep playing so we'll put this within a four and we'll do this for all nine buttons so int I equals zero will do this nine times so I is less than nine and increment I by one and then we're going to take our buttons at index I set enabled false and then lastly we're going to change the text field to X wins so text field set text X wins and then let's copy this and do the same thing for o then we are just going to change set text to oh and that's it that should be this program so let's actually play this now all right here is our game it is X's turn I'm just going to start making up stuff and here it is the winning combination X wins all right well that's everything so if you would like a copy of all this code I'll post this in the comments down below but yeah that's how you can create a game of tictactoe using Java hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow grow
