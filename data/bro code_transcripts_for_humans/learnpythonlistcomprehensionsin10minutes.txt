With timestamps:

00:00 - hey what's going on everybody so in
00:01 - today's video I got to explain list
00:03 - comprehensions in Python a list
00:05 - comprehension is a concise way to create
00:08 - lists in Python they're Compact and
00:10 - easier to read than traditional Loops
00:13 - basically you have to follow this
00:14 - formula for every value in something
00:18 - that's iterable meaning you can Loop
00:19 - through it check some condition then do
00:22 - this expression so let me give you an
00:24 - example with using a traditional Loop
00:27 - then you'll be able to see why a list
00:28 - comprehension is useful we're going to
00:30 - create a list and double the numbers 1
00:33 - through
00:34 - 10 doubles equals an empty list using a
00:38 - traditional for Loop we will say for
00:41 - every value let's say X in range 1
00:47 - through 11 remember that in the range
00:49 - function the second number is exclusive
00:52 - this will give you the numbers 1 through
00:54 - 10 for the first iteration X is going to
00:56 - be 1 then 2 3 all the way up until 10 so
01:00 - we'll iterate 10 times during each
01:03 - iteration I'm going to take my list of
01:06 - doubles use the built-in append method
01:09 - we will append X during each iteration
01:13 - that's going to be the value time 2 so
01:17 - if I were to print my list of doubles
01:20 - here's the result we have the numbers
01:23 - one through 10 all doubled 2 4 6 8 10 12
01:28 - 14 16 18 20 so this is a lot to write we
01:32 - can use a list comprehension to make
01:34 - this code more Compact and easier to
01:36 - read here's how we need a name for this
01:40 - list let's say doubles equals an empty
01:43 - list within our list we'll follow this
01:48 - formula we have an expression for Value
01:52 - in iterable and optionally we can check
01:55 - a condition we'll do this in exercises
01:57 - later on in this topic we'll begin with
01:59 - for every value let's say X in our
02:04 - iterable our iterable is going to be a
02:08 - range 1 through 10 again for the first
02:12 - iteration X will be 1 then the second
02:14 - iteration X will be 2 all the way up
02:17 - until 10 during each iteration what
02:19 - would we like to do with X our value
02:22 - let's take X multiply it by two and
02:26 - return
02:26 - it then if I was to print my list of
02:31 - doubles we have the numbers 2 4 6 8 10
02:34 - 12 14 16 18 20 for every value in this
02:38 - iterable do this multiply it by two this
02:41 - is a list comprehension it's a concise
02:44 - way to create lists in Python we'll go
02:46 - over a few
02:48 - exercises so this time we will triple
02:50 - each number we'll create a list of
02:54 - triples equals let's say this time for
02:57 - every Y in ring range 1 through 10 so we
03:02 - have to write
03:04 - 11 take Y and multiply it by three then
03:09 - we will print our list of triples 3 6 9
03:13 - 12 15 18 so on and so forth let's Square
03:17 - each
03:18 - number we'll create a list of squares
03:21 - for every Z in range 1 through
03:26 - 10 to square a number we take that
03:29 - number
03:30 - multiply it by
03:33 - itself so the numbers 1 through 10^
03:37 - squar is 1 4 9 16 15 36 49 64 81 100 so
03:44 - 10 * 10 is 100 now we're going to work
03:47 - with
03:48 - strings we'll create a list of fruits
03:52 - equals think of some fruit these are all
03:54 - going to be strings Apple
03:57 - orange banana
04:01 - coconut I'm going to take each string in
04:04 - this list and make it
04:06 - uppercase we could assign this to a new
04:08 - list such as uppercase
04:11 - fruits or we can simply just reassign it
04:14 - just to keep it simple I'll reassign
04:16 - it so again we're following this formula
04:20 - I like to begin with the four value in
04:22 - iterable portion for every fruit in our
04:27 - iterable of fruits what do we want to do
04:31 - well let's take each fruit take each
04:34 - fruit use the built-in upper method to
04:36 - make it
04:37 - uppercase then I'm going to
04:40 - print my list of
04:43 - fruits each string in this list is now
04:46 - all
04:47 - uppercase you could even cut down on one
04:49 - of the steps with our iterable of fruits
04:53 - I will place this
04:58 - list and this does work too although I
05:01 - do find this a little more difficult to
05:03 - read but you can take either option how
05:06 - about instead of making each string
05:08 - uppercase we'll take the first letter of
05:10 - each string then put it within a new
05:13 - list so let's take each fruit at index
05:17 - of zero that will give us the first
05:19 - letter we'll place it within a new list
05:22 - of fruit chars meaning
05:26 - characters here's the result a o BC for
05:31 - every fruit in our list of
05:33 - fruits return the first character of
05:36 - each string a o b c now we'll work with
05:44 - conditions we'll create a list of
05:46 - numbers both negative and positive
05:49 - numbers equals let's say 1 -2 3 -4 5
05:57 - -6 we'll create a list compreh renson to
06:00 - create a new list where all of the
06:02 - numbers are positive our new list will
06:05 - be positive nums equals we'll write a
06:09 - list comprehension for every let's say
06:12 - num in
06:16 - numbers we'll write a
06:18 - condition return this number if our
06:22 - num is greater than or equal to zero we
06:26 - do need an expression if we're not
06:29 - modifying ing each value we can just
06:32 - return the value of
06:34 - num during this exercise we're more
06:37 - focused on the if condition rather than
06:39 - the expression if our value of num meets
06:43 - this condition simply return it and
06:45 - place it within this new
06:47 - list let's print our list of positive
06:51 - numbers and we have
06:54 - 135 let's do this with negative numbers
06:57 - I'll just copy what we have and change a
06:59 - few things round this list will be
07:01 - negative numbers negative nums for every
07:06 - num in numbers check this condition
07:09 - check to see if num is less than zero if
07:12 - so return that number let's print our
07:15 - list of negative numbers
07:18 - -24
07:20 - -6 let's check to see if there's any
07:22 - even
07:23 - numbers even nums equals for every num
07:29 - in numbers check to see if our num is
07:34 - divisible by two and we can do that with
07:37 - the modulus operator followed by two the
07:40 - modulus operator will give you the
07:41 - remainder of any Division if our number
07:44 - is even number modulus 2 will equal zero
07:49 - if it's even this is going to equal zero
07:51 - if it's odd it's going to be one we're
07:53 - not modifying our value we're just going
07:55 - to return our number
07:59 - our list of even numbers should be -2 -4
08:04 - -6 let me add one more value let's add
08:08 - positive
08:09 - 8 -24 -6 POS 8 maybe we'll add one
08:16 - more
08:18 - -7 okay let's find any odd numbers let's
08:22 - copy this line of code replace even
08:24 - numbers with odd
08:26 - numbers if num modulus 2 is equal to
08:31 - 1 that means that number doesn't divide
08:34 - by two evenly then we'll print our odd
08:38 - numbers 1 3 5-7 all these numbers are
08:43 - odd here's the last
08:46 - exercise we'll create a list of
08:51 - grades we'll create a new list of any
08:54 - grades that are considered passing
08:56 - meaning they scored 60 or above so let's
08:58 - say once student has a grade of 85
09:02 - another with of
09:03 - 42
09:05 - 79
09:07 - 90
09:09 - 56
09:12 - 61 let's say
09:15 - 30 I will create a new list of passing
09:20 - grades equals again follow this
09:23 - formula for every grade in
09:27 - grades check our condition
09:30 - if our grade is greater than or equal to
09:34 - 60 we will return the current
09:39 - grade then let's print our list of
09:43 - passing
09:44 - grades that will give us 85 79 90 and 61
09:50 - all of these grades are greater than or
09:52 - equal to 60 all right everybody so that
09:55 - is a list comprehension it's a concise
09:58 - way to create lists in Python they're
10:00 - Compact and easier to read than
10:02 - traditional Loops remember for every
10:05 - value in your iterable optionally you
10:08 - can check a condition you can write an
10:10 - expression to modify that value if you
10:12 - choose and return something all right
10:15 - everybody so those are list
10:16 - comprehensions in Python

Cleaned transcript:

hey what's going on everybody so in today's video I got to explain list comprehensions in Python a list comprehension is a concise way to create lists in Python they're Compact and easier to read than traditional Loops basically you have to follow this formula for every value in something that's iterable meaning you can Loop through it check some condition then do this expression so let me give you an example with using a traditional Loop then you'll be able to see why a list comprehension is useful we're going to create a list and double the numbers 1 through 10 doubles equals an empty list using a traditional for Loop we will say for every value let's say X in range 1 through 11 remember that in the range function the second number is exclusive this will give you the numbers 1 through 10 for the first iteration X is going to be 1 then 2 3 all the way up until 10 so we'll iterate 10 times during each iteration I'm going to take my list of doubles use the builtin append method we will append X during each iteration that's going to be the value time 2 so if I were to print my list of doubles here's the result we have the numbers one through 10 all doubled 2 4 6 8 10 12 14 16 18 20 so this is a lot to write we can use a list comprehension to make this code more Compact and easier to read here's how we need a name for this list let's say doubles equals an empty list within our list we'll follow this formula we have an expression for Value in iterable and optionally we can check a condition we'll do this in exercises later on in this topic we'll begin with for every value let's say X in our iterable our iterable is going to be a range 1 through 10 again for the first iteration X will be 1 then the second iteration X will be 2 all the way up until 10 during each iteration what would we like to do with X our value let's take X multiply it by two and return it then if I was to print my list of doubles we have the numbers 2 4 6 8 10 12 14 16 18 20 for every value in this iterable do this multiply it by two this is a list comprehension it's a concise way to create lists in Python we'll go over a few exercises so this time we will triple each number we'll create a list of triples equals let's say this time for every Y in ring range 1 through 10 so we have to write 11 take Y and multiply it by three then we will print our list of triples 3 6 9 12 15 18 so on and so forth let's Square each number we'll create a list of squares for every Z in range 1 through 10 to square a number we take that number multiply it by itself so the numbers 1 through 10^ squar is 1 4 9 16 15 36 49 64 81 100 so 10 * 10 is 100 now we're going to work with strings we'll create a list of fruits equals think of some fruit these are all going to be strings Apple orange banana coconut I'm going to take each string in this list and make it uppercase we could assign this to a new list such as uppercase fruits or we can simply just reassign it just to keep it simple I'll reassign it so again we're following this formula I like to begin with the four value in iterable portion for every fruit in our iterable of fruits what do we want to do well let's take each fruit take each fruit use the builtin upper method to make it uppercase then I'm going to print my list of fruits each string in this list is now all uppercase you could even cut down on one of the steps with our iterable of fruits I will place this list and this does work too although I do find this a little more difficult to read but you can take either option how about instead of making each string uppercase we'll take the first letter of each string then put it within a new list so let's take each fruit at index of zero that will give us the first letter we'll place it within a new list of fruit chars meaning characters here's the result a o BC for every fruit in our list of fruits return the first character of each string a o b c now we'll work with conditions we'll create a list of numbers both negative and positive numbers equals let's say 1 2 3 4 5 6 we'll create a list compreh renson to create a new list where all of the numbers are positive our new list will be positive nums equals we'll write a list comprehension for every let's say num in numbers we'll write a condition return this number if our num is greater than or equal to zero we do need an expression if we're not modifying ing each value we can just return the value of num during this exercise we're more focused on the if condition rather than the expression if our value of num meets this condition simply return it and place it within this new list let's print our list of positive numbers and we have 135 let's do this with negative numbers I'll just copy what we have and change a few things round this list will be negative numbers negative nums for every num in numbers check this condition check to see if num is less than zero if so return that number let's print our list of negative numbers 24 6 let's check to see if there's any even numbers even nums equals for every num in numbers check to see if our num is divisible by two and we can do that with the modulus operator followed by two the modulus operator will give you the remainder of any Division if our number is even number modulus 2 will equal zero if it's even this is going to equal zero if it's odd it's going to be one we're not modifying our value we're just going to return our number our list of even numbers should be 2 4 6 let me add one more value let's add positive 8 24 6 POS 8 maybe we'll add one more 7 okay let's find any odd numbers let's copy this line of code replace even numbers with odd numbers if num modulus 2 is equal to 1 that means that number doesn't divide by two evenly then we'll print our odd numbers 1 3 57 all these numbers are odd here's the last exercise we'll create a list of grades we'll create a new list of any grades that are considered passing meaning they scored 60 or above so let's say once student has a grade of 85 another with of 42 79 90 56 61 let's say 30 I will create a new list of passing grades equals again follow this formula for every grade in grades check our condition if our grade is greater than or equal to 60 we will return the current grade then let's print our list of passing grades that will give us 85 79 90 and 61 all of these grades are greater than or equal to 60 all right everybody so that is a list comprehension it's a concise way to create lists in Python they're Compact and easier to read than traditional Loops remember for every value in your iterable optionally you can check a condition you can write an expression to modify that value if you choose and return something all right everybody so those are list comprehensions in Python
