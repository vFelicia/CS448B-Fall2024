With timestamps:

00:01 - hey everybody welcome to the exciting
00:03 - world of memory addresses a memory
00:05 - address is a location in memory where
00:08 - data is stored in c plus a memory
00:11 - address can be accessed with an
00:12 - ampersand known as the address of
00:15 - operator suppose we have some variables
00:17 - i'll create a string
00:20 - the variable name will be well named
00:23 - assign this a string of text
00:25 - i'll create int age sets equal to some
00:28 - value
00:30 - then a boolean boolean
00:33 - student i'll set that to be true
00:35 - a variable is a container for some data
00:38 - but these variables need to exist
00:40 - somewhere well they exist in your
00:42 - computer's memory at a given address
00:45 - we can find that address with the
00:46 - address of operator i'll display that
00:50 - standard output
00:52 - i would like to display the address of
00:54 - name
00:56 - then i'll just add a new line
01:00 - here's the address of my name variable
01:02 - in my computer's memory it's a bunch of
01:04 - weird letters and numbers well this is a
01:07 - hexadecimal address every time we run
01:09 - this program
01:11 - that number is likely to change
01:14 - let's display the addresses of agent
01:16 - student
01:19 - address of age address of student
01:25 - here are the memory addresses again all
01:28 - in hexadecimal so these are kind of like
01:30 - street addresses hey for fun let's
01:32 - decode these to decimal you can easily
01:34 - find tools online to convert hexadecimal
01:36 - to decimal
01:38 - let's see what these numbers are
01:45 - here are the hexadecimal memory
01:47 - addresses but converted to decimal
01:49 - they're like house numbers different
01:51 - data types take up more or less room
01:53 - than other data types if we look at the
01:55 - distance between my name variable and
01:58 - age well that has a gap of four memory
02:01 - addresses but the gap between my age and
02:03 - student variables
02:05 - is only one because well booleans only
02:08 - take up one byte of memory that's one of
02:10 - the reasons we use data types we need to
02:12 - know how much memory we need to allocate
02:14 - to fit a certain value if we're working
02:16 - with a boolean variable well we only
02:19 - need one byte of memory that's why the
02:21 - distance between the memory address of
02:23 - age and student is only one
02:26 - 40-39 is one
02:28 - integers take up four bytes of memory 44
02:31 - minus 40 is four four bytes so that's an
02:34 - introduction to memory addresses it's
02:37 - going to be helpful in the next topic
02:38 - when we discuss pointers if you would
02:40 - like a copy of this code i'll post this
02:42 - in the comment section down below and
02:44 - that is an introduction to memory
02:46 - addresses in c plus

Cleaned transcript:

hey everybody welcome to the exciting world of memory addresses a memory address is a location in memory where data is stored in c plus a memory address can be accessed with an ampersand known as the address of operator suppose we have some variables i'll create a string the variable name will be well named assign this a string of text i'll create int age sets equal to some value then a boolean boolean student i'll set that to be true a variable is a container for some data but these variables need to exist somewhere well they exist in your computer's memory at a given address we can find that address with the address of operator i'll display that standard output i would like to display the address of name then i'll just add a new line here's the address of my name variable in my computer's memory it's a bunch of weird letters and numbers well this is a hexadecimal address every time we run this program that number is likely to change let's display the addresses of agent student address of age address of student here are the memory addresses again all in hexadecimal so these are kind of like street addresses hey for fun let's decode these to decimal you can easily find tools online to convert hexadecimal to decimal let's see what these numbers are here are the hexadecimal memory addresses but converted to decimal they're like house numbers different data types take up more or less room than other data types if we look at the distance between my name variable and age well that has a gap of four memory addresses but the gap between my age and student variables is only one because well booleans only take up one byte of memory that's one of the reasons we use data types we need to know how much memory we need to allocate to fit a certain value if we're working with a boolean variable well we only need one byte of memory that's why the distance between the memory address of age and student is only one 4039 is one integers take up four bytes of memory 44 minus 40 is four four bytes so that's an introduction to memory addresses it's going to be helpful in the next topic when we discuss pointers if you would like a copy of this code i'll post this in the comment section down below and that is an introduction to memory addresses in c plus
