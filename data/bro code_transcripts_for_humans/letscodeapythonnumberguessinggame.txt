With timestamps:

00:00 - hey everybody so today we're going to
00:01 - create a number guessing game using
00:03 - python this is a project meant for
00:05 - beginners by completing this project it
00:08 - will help us reinforce our understanding
00:09 - of previous topics let's begin we will
00:13 - import the random module we'll need to
00:16 - pick a random number the random module
00:18 - is going to handle that for us what is
00:21 - the arrange of random numbers for our
00:22 - number guessing game we'll store those
00:25 - as
00:26 - variables we will have one variable
00:29 - named lowest number number I'll set that
00:31 - to be one as well as a variable for
00:34 - highest number which I will set to be
00:37 - 100 feel free to pick a different range
00:39 - if you would like I'll set the range to
00:41 - be 1 through 100 a random number will be
00:44 - selected between this
00:46 - range which will be stored within a
00:48 - variable named answer what is the
00:51 - correct answer so to choose a random
00:53 - number between these two values we will
00:56 - access the random module called the Rand
01:00 - int method we will choose a random
01:03 - integer between these two
01:05 - values the two arguments will be lowest
01:09 - num comma highest num for the second
01:15 - argument let's perform a test run I will
01:18 - print my
01:21 - answer the number is going to be between
01:23 - 1 and
01:27 - 100 okay we know that that works
01:31 - here's a few more
01:32 - variables we need to keep track of the
01:35 - number of wrong guesses which I will
01:36 - store as a variable named
01:39 - guesses we want the user to keep
01:41 - guessing as long as our application is
01:44 - running we will create a Boolean
01:46 - variable of is running which we will set
01:49 - to be true once the user wins the game
01:52 - we will set is running to be
01:56 - false we will print a welcome message
02:02 - let's say python
02:05 - number guessing
02:08 - game we will prompt the user I'll use an
02:12 - FST
02:13 - string select a number between I'll add
02:19 - two
02:22 - placeholders select a number between our
02:25 - lowest number and our highest number
02:30 - python number guessing game select a
02:32 - number between 1 and 100 now if I was to
02:36 - change the range of these
02:38 - variables that should be
02:41 - reflected temporarily I changed the
02:43 - lowest number to be 10 and the highest
02:45 - number to be 1,000 but let's set that
02:49 - back between 1 and 100 is
02:53 - good we'll need a while loop to continue
02:56 - the game each
02:57 - round we will say y while is
03:02 - running since is running is a Boolean we
03:05 - don't need to say while is running
03:07 - equals true we can just say while is
03:09 - running while this value remains true
03:12 - continue playing the
03:14 - game we will ask the user for some input
03:18 - we will create a local variable of guess
03:21 - guess
03:22 - equals use the input function then enter
03:26 - a prompt enter your
03:31 - guess there's one thing we want to
03:34 - check python number guessing game select
03:36 - a number between one and 100 and to your
03:39 - guess what if somebody doesn't type in a
03:41 - number like they type in the word
03:43 - Pizza we should let the user know that
03:45 - that's an invalid
03:48 - guess we'll write the following if
03:50 - statement if our guess use the is digit
03:56 - method if our guess is a digit a number
04:01 - then we will execute any code underneath
04:03 - this if statement for the time being
04:05 - I'll right pass we'll get back to that
04:07 - later else we will do something
04:10 - else let's print the following print
04:15 - invalid
04:18 - guess let's copy this print statement
04:20 - because I'm lazy and I don't feel like
04:22 - typing it
04:24 - out please
04:26 - select a number between our lowest
04:30 - number and our highest number let's try
04:33 - that
04:35 - again I will guess Pizza which isn't a
04:38 - number and we get the message invalid
04:41 - guess please select a number between 1
04:43 - and 100 all right that works underneath
04:48 - our if statement we'll write the
04:50 - following once we get a guess that is a
04:53 - digit we need to convert it to a number
04:55 - because when you accept user input it's
04:57 - a string we will re assign our guess
05:00 - equal to typ cast our guess as an
05:07 - integer then increase the number of
05:09 - guesses by one guesses plus equals 1
05:13 - because we have already made one
05:15 - guess here's another
05:18 - scenario what if somebody guesses a
05:20 - number outside of this range like one
05:25 - kajillion well we should give a warning
05:27 - that that guess is invalid
05:31 - if our guess is lower than the lowest
05:37 - number or our guess is greater than the
05:42 - highest
05:43 - number we will print the
05:46 - following that number is out of
05:52 - range and I will reprompt the
05:57 - user please select a number between the
06:00 - lowest number and the highest
06:03 - number let's perform a test run I will
06:07 - guess one
06:09 - kajillion that number is out of range
06:12 - please select a number between 1 and
06:14 - 100 We'll add an else if statement else
06:18 - if our
06:20 - guess is less than our answer we will
06:23 - print the
06:26 - following to low try
06:32 - again else if our guess is greater than
06:37 - our
06:38 - answer we will
06:40 - print to high try again if our guess
06:47 - isn't less than our answer and our guess
06:49 - isn't greater than our answer that means
06:52 - we must have the correct answer within
06:54 - an lse statement we will
06:57 - print I'll use an F
07:00 - string
07:02 - correct the answer was insert our answer
07:07 - our answer
07:09 - variable then print the number of
07:11 - guesses it
07:13 - took number of
07:16 - guesses add a
07:17 - placeholder place in our guesses within
07:20 - the placeholder now to escape the while
07:23 - loop we will take our Boolean variable
07:25 - of is running which is normally true and
07:29 - and set that to be false to
07:31 - escape and that should be all we need
07:33 - let's run this one last
07:35 - time python number guessing game select
07:38 - a number between 1 and 100 let's select
07:41 - a number right in the middle 50 too low
07:44 - try again so the number is between 50
07:47 - and 100
07:49 - 75 too high it's between 50 and 75 then
07:56 - 62 too high
08:01 - 56
08:04 - 53
08:06 - 55 correct the answer was 55 number of
08:10 - guesses it took me
08:11 - six all right everybody that is a python
08:15 - number guessing game you yourself can
08:17 - create as a mini project

Cleaned transcript:

hey everybody so today we're going to create a number guessing game using python this is a project meant for beginners by completing this project it will help us reinforce our understanding of previous topics let's begin we will import the random module we'll need to pick a random number the random module is going to handle that for us what is the arrange of random numbers for our number guessing game we'll store those as variables we will have one variable named lowest number number I'll set that to be one as well as a variable for highest number which I will set to be 100 feel free to pick a different range if you would like I'll set the range to be 1 through 100 a random number will be selected between this range which will be stored within a variable named answer what is the correct answer so to choose a random number between these two values we will access the random module called the Rand int method we will choose a random integer between these two values the two arguments will be lowest num comma highest num for the second argument let's perform a test run I will print my answer the number is going to be between 1 and 100 okay we know that that works here's a few more variables we need to keep track of the number of wrong guesses which I will store as a variable named guesses we want the user to keep guessing as long as our application is running we will create a Boolean variable of is running which we will set to be true once the user wins the game we will set is running to be false we will print a welcome message let's say python number guessing game we will prompt the user I'll use an FST string select a number between I'll add two placeholders select a number between our lowest number and our highest number python number guessing game select a number between 1 and 100 now if I was to change the range of these variables that should be reflected temporarily I changed the lowest number to be 10 and the highest number to be 1,000 but let's set that back between 1 and 100 is good we'll need a while loop to continue the game each round we will say y while is running since is running is a Boolean we don't need to say while is running equals true we can just say while is running while this value remains true continue playing the game we will ask the user for some input we will create a local variable of guess guess equals use the input function then enter a prompt enter your guess there's one thing we want to check python number guessing game select a number between one and 100 and to your guess what if somebody doesn't type in a number like they type in the word Pizza we should let the user know that that's an invalid guess we'll write the following if statement if our guess use the is digit method if our guess is a digit a number then we will execute any code underneath this if statement for the time being I'll right pass we'll get back to that later else we will do something else let's print the following print invalid guess let's copy this print statement because I'm lazy and I don't feel like typing it out please select a number between our lowest number and our highest number let's try that again I will guess Pizza which isn't a number and we get the message invalid guess please select a number between 1 and 100 all right that works underneath our if statement we'll write the following once we get a guess that is a digit we need to convert it to a number because when you accept user input it's a string we will re assign our guess equal to typ cast our guess as an integer then increase the number of guesses by one guesses plus equals 1 because we have already made one guess here's another scenario what if somebody guesses a number outside of this range like one kajillion well we should give a warning that that guess is invalid if our guess is lower than the lowest number or our guess is greater than the highest number we will print the following that number is out of range and I will reprompt the user please select a number between the lowest number and the highest number let's perform a test run I will guess one kajillion that number is out of range please select a number between 1 and 100 We'll add an else if statement else if our guess is less than our answer we will print the following to low try again else if our guess is greater than our answer we will print to high try again if our guess isn't less than our answer and our guess isn't greater than our answer that means we must have the correct answer within an lse statement we will print I'll use an F string correct the answer was insert our answer our answer variable then print the number of guesses it took number of guesses add a placeholder place in our guesses within the placeholder now to escape the while loop we will take our Boolean variable of is running which is normally true and and set that to be false to escape and that should be all we need let's run this one last time python number guessing game select a number between 1 and 100 let's select a number right in the middle 50 too low try again so the number is between 50 and 100 75 too high it's between 50 and 75 then 62 too high 56 53 55 correct the answer was 55 number of guesses it took me six all right everybody that is a python number guessing game you yourself can create as a mini project
