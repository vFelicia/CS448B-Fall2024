With timestamps:

00:00 - what's going on everybody so in today's
00:02 - video I got to talk about promises in
00:03 - JavaScript A promise is an object an
00:06 - object that manages asynchronous
00:09 - operations such as querying a database
00:11 - fetching a file Gathering resources
00:14 - those you could consider asynchronous
00:15 - operations they can take an
00:17 - indeterminate amount of time you can
00:19 - wrap a promise object around some
00:21 - asynchronous code the promise object
00:24 - promises to return a value that promise
00:26 - object will be pending then either that
00:29 - promise will be resolved D if the task
00:31 - completed successfully or rejected if it
00:33 - failed for some reason maybe the promise
00:35 - couldn't fetch that file resolved if it
00:37 - did A promise is an object we'll create
00:39 - a new promise object with new promise
00:42 - then pass in a function usually you see
00:44 - this is an arrow function there's two
00:46 - parameters resolve and reject Arrow then
00:49 - do some asynchronous code so in this
00:51 - demonstration we're going to be doing
00:53 - some chores if you live with your
00:55 - parents maybe your mom asked you to do
00:57 - these chores or with the roommate these
00:59 - are the tasks you need to do or your
01:00 - significant other wants you to do these
01:02 - tasks anyways we have some chores to do
01:04 - we have to walk the dog clean the
01:06 - kitchen and take out the trash I'll
01:09 - create functions for each of these
01:10 - chores first we'll start by using
01:12 - callbacks then I'll demonstrate the use
01:14 - of promises and how they're helpful so
01:16 - let's create a function to walk dog to
01:21 - make this asynchronous I'm going to add
01:23 - a set timeout
01:25 - function this takes a call back and an
01:28 - amount of time in milliseconds to to
01:30 - complete this code let's say walking the
01:32 - dog takes 1,500 milliseconds what code
01:36 - would we'd like to perform let's write
01:38 - an arrow function to keep it
01:40 - simple parameters Arrow do this let's
01:44 - console.log after completing this chore
01:47 - you walk the
01:52 - dog okay that'll be the first function
01:55 - let's create a function to clean the
01:57 - kitchen function clean kitchen
02:00 - this will take a long time 2,500
02:04 - milliseconds let's say when we complete
02:06 - this task we will print you clean the
02:14 - kitchen and a third
02:16 - function take out
02:22 - trash you take out the
02:28 - trash
02:31 - taking out the trash it's really quick
02:33 - it takes half a second 500
02:36 - milliseconds if I need to do these
02:38 - chores in order I would need to use some
02:40 - callbacks after walking the dog we will
02:43 - call a call back to clean kitchen after
02:46 - we clean the kitchen we will take out
02:48 - the trash we need to modify these
02:49 - functions so that they accept some call
02:52 - backs after our code is complete we will
02:55 - invoke the call back call the call back
02:58 - so let's add that par parameter to each
03:00 - of these
03:05 - functions now if we want to call all
03:07 - these functions in order we would have
03:09 - to start using call back hell which we
03:11 - learned about in the last video so first
03:13 - I would like to walk the dog I will call
03:15 - that function pass in a call back but
03:17 - we'll use an arrow
03:18 - function then we will clean the kitchen
03:22 - pass in a call back I'll use an arrow
03:26 - function take out trash
03:30 - and we'll pass in a call back to do this
03:32 - when we complete all the
03:33 - chores
03:36 - console.log you finished all the
03:41 - chores okay let's see if this
03:44 - works you walk the
03:46 - dog you clean the kitchen you take out
03:48 - the trash you finished all the
03:51 - chores if we have a lot of call backs to
03:53 - work with we'll end up going to call
03:55 - back hell you don't want to go to call
03:57 - back hell so what we'll use instead are
03:59 - promises with all of this asynchronous
04:02 - code we'll wrap it within a promise by
04:04 - using a promise we don't need callbacks
04:07 - instead of using callbacks we'll use
04:08 - method chaining we'll method chain our
04:11 - promises here's how how we'll modify
04:13 - these functions is that at the end of
04:16 - each function we will return an object
04:19 - return a new promise return a new
04:22 - promise object and follow this formula
04:25 - we have two parameters resolve and
04:28 - reject resolve Sol
04:31 - reject Arrow do this asynchronous code
04:35 - within an arrow function take all of the
04:37 - asynchronous code cut it place it within
04:41 - the promise our promise promises to
04:44 - return a value it's either going to be
04:46 - resolved or rejected we're going to
04:48 - modify this function we don't need to
04:50 - work with call backs anymore we can get
04:52 - rid of those get rid of the parameter
04:54 - and the portion of the code where we
04:55 - call the call back if we would like to
04:58 - display a message when the pr promise
04:59 - resolves when it finishes successfully
05:02 - we will instead call the resolve
05:04 - parameter it's a function this message
05:08 - is the value the argument that we're
05:10 - passing in after you finish walking the
05:12 - dog here's your completion message when
05:15 - the promise resolves let's modify the
05:17 - rest of the functions so that they use
05:19 - promises we will return a new
05:22 - promise two parameters
05:26 - resolve
05:27 - reject Arrow do this asynchronous code
05:32 - let's cut our current asynchronous
05:34 - code paste it remove the call back
05:37 - parameter we don't need it anymore and
05:39 - we don't need to call the call back when
05:42 - this promise
05:43 - resolves pass along this message you
05:46 - clean the
05:47 - kitchen let's do this with take out
05:49 - trash we will return a new
05:53 - promise two parameters resolve reject
05:58 - Arrow do this
06:00 - cut the asynchronous code paste it
06:03 - within the promise remove the call back
06:06 - and where we call the
06:07 - Callback when we resolve this promise
06:10 - pass along this message we no longer
06:13 - need to use callback hell instead we're
06:15 - going to use method chaining first we're
06:18 - going to walk the dog clean the kitchen
06:20 - and then take out the trash in that
06:21 - order we will call the walk dog
06:26 - function and then we're going to Method
06:28 - chain follow this with the then
06:31 - method walk the dog then what is what
06:34 - we're saying the walk dog function does
06:36 - provide a value parameter this message
06:39 - we can use that message for something
06:42 - that's going to be stored within value
06:44 - that's going to be the parameter that's
06:45 - provided to us take the value let's
06:48 - print it console.log my value so when I
06:52 - run this program we should only be
06:54 - walking the
06:56 - dog you walk the dog and nothing else
07:00 - looks like I misspelled resolve as
07:02 - resolves there after walking the dog I
07:05 - would like to clean the kitchen so I
07:07 - need to call that function next within
07:09 - our Arrow function we'll write more than
07:12 - one statement we need to enclose this
07:14 - within a set of curly braces print our
07:16 - value and then do this
07:18 - function
07:20 - return clean kitchen and then call
07:24 - it we'll add another then
07:27 - method then take the value provided by
07:31 - clean
07:31 - kitchen that will be this
07:34 - one take that value
07:37 - arrow
07:39 - console.log that
07:44 - value you walk the
07:46 - dog you clean the kitchen then we'll
07:49 - take out the trash at the
07:51 - end We'll add another statement to this
07:53 - then
07:55 - method we will return take out
08:00 - trash invoke this
08:03 - method then we will take the value
08:06 - provided to us when it resolves this
08:10 - value do this
08:12 - code
08:14 - console.log that
08:19 - value you walk the
08:21 - dog you clean the kitchen you take out
08:24 - the trash so after taking out the trash
08:27 - that's our last chore let's add another
08:30 - line of
08:32 - code after displaying you take out the
08:35 - trash let's
08:38 - console.log you finished all the
08:45 - chores you walk the dog you clean the
08:49 - kitchen you take out the trash you
08:51 - finished all the
08:52 - chores by Method chaining then methods
08:55 - it's a lot easier to write than nesting
08:57 - call backs now sometimes times with
08:59 - asynchronous functions depending on the
09:01 - task the task May Fail let's say we're
09:03 - trying to locate a resource a file if we
09:06 - can't locate that file and we're using
09:08 - promises we don't want to resolve that
09:10 - promise because we couldn't locate that
09:12 - file instead we want to reject that's
09:15 - what happens when an asynchronous
09:16 - function fails to do something when
09:18 - inside a promise so let's change our
09:20 - functions around within set timeout
09:23 - let's create a
09:24 - variable const dog walked did we
09:28 - accomplish this this will be true or
09:31 - false we'll use an if statement if dog
09:35 - walked then we will resolve it if we
09:39 - walk to the
09:41 - dog else we will
09:44 - reject we'll pass in a different
09:46 - value you didn't walk the
09:52 - dog okay let's do this with the other
09:55 - functions let's create a constant of
09:59 - kitchen cleaned equals
10:04 - true if our kitchen is cleaned if that
10:08 - is true we will resolve this
10:11 - promise you clean the
10:14 - kitchen else let's reject pass along
10:18 - this
10:19 - message you
10:21 - didn't clean the
10:24 - kitchen and lastly take out
10:28 - trash
10:30 - const trash taken out let's set that to
10:35 - be
10:38 - true if the trash is taken
10:41 - out resolve the
10:46 - promise else we will
10:51 - reject you
10:54 - didn't take out the
10:57 - trash if a promise might reject there's
11:00 - one more method we need to add to the
11:02 - end of this chain we need to add a catch
11:05 - method to catch any
11:07 - errors this will catch any rejects this
11:10 - is similar to error handling we'll be
11:13 - provided with one value an error Arrow
11:16 - do this let's
11:18 - console.log or even console.
11:22 - error the message provided to us with
11:25 - reject that's what the error is going to
11:27 - be will successfully walk the dog that
11:31 - will be true and cleaning the kitchen
11:33 - will be true but taking the trash out
11:36 - will be false we weren't able to
11:38 - complete this chore these are the
11:41 - results you walk the
11:44 - dog you clean the kitchen you didn't
11:47 - take out the trash how dare you we'll
11:49 - keep on completing these tasks until we
11:51 - fail at one of
11:53 - them so if walking the dog was false
11:56 - that was our first
11:57 - task
12:02 - this first promise was rejected we don't
12:04 - even attempt to resolve these other
12:06 - promises all right everybody so those
12:08 - are promises they're an object that
12:10 - manages asynchronous operations you can
12:13 - wrap a promise object around some
12:15 - asynchronous code these promise objects
12:17 - promis to return a value they will be
12:20 - pending until they complete then they'll
12:22 - either be resolved if that task
12:24 - completed successfully or rejected if it
12:27 - failed for some reason and well
12:29 - everybody those are promises in
12:35 - JavaScript

Cleaned transcript:

what's going on everybody so in today's video I got to talk about promises in JavaScript A promise is an object an object that manages asynchronous operations such as querying a database fetching a file Gathering resources those you could consider asynchronous operations they can take an indeterminate amount of time you can wrap a promise object around some asynchronous code the promise object promises to return a value that promise object will be pending then either that promise will be resolved D if the task completed successfully or rejected if it failed for some reason maybe the promise couldn't fetch that file resolved if it did A promise is an object we'll create a new promise object with new promise then pass in a function usually you see this is an arrow function there's two parameters resolve and reject Arrow then do some asynchronous code so in this demonstration we're going to be doing some chores if you live with your parents maybe your mom asked you to do these chores or with the roommate these are the tasks you need to do or your significant other wants you to do these tasks anyways we have some chores to do we have to walk the dog clean the kitchen and take out the trash I'll create functions for each of these chores first we'll start by using callbacks then I'll demonstrate the use of promises and how they're helpful so let's create a function to walk dog to make this asynchronous I'm going to add a set timeout function this takes a call back and an amount of time in milliseconds to to complete this code let's say walking the dog takes 1,500 milliseconds what code would we'd like to perform let's write an arrow function to keep it simple parameters Arrow do this let's console.log after completing this chore you walk the dog okay that'll be the first function let's create a function to clean the kitchen function clean kitchen this will take a long time 2,500 milliseconds let's say when we complete this task we will print you clean the kitchen and a third function take out trash you take out the trash taking out the trash it's really quick it takes half a second 500 milliseconds if I need to do these chores in order I would need to use some callbacks after walking the dog we will call a call back to clean kitchen after we clean the kitchen we will take out the trash we need to modify these functions so that they accept some call backs after our code is complete we will invoke the call back call the call back so let's add that par parameter to each of these functions now if we want to call all these functions in order we would have to start using call back hell which we learned about in the last video so first I would like to walk the dog I will call that function pass in a call back but we'll use an arrow function then we will clean the kitchen pass in a call back I'll use an arrow function take out trash and we'll pass in a call back to do this when we complete all the chores console.log you finished all the chores okay let's see if this works you walk the dog you clean the kitchen you take out the trash you finished all the chores if we have a lot of call backs to work with we'll end up going to call back hell you don't want to go to call back hell so what we'll use instead are promises with all of this asynchronous code we'll wrap it within a promise by using a promise we don't need callbacks instead of using callbacks we'll use method chaining we'll method chain our promises here's how how we'll modify these functions is that at the end of each function we will return an object return a new promise return a new promise object and follow this formula we have two parameters resolve and reject resolve Sol reject Arrow do this asynchronous code within an arrow function take all of the asynchronous code cut it place it within the promise our promise promises to return a value it's either going to be resolved or rejected we're going to modify this function we don't need to work with call backs anymore we can get rid of those get rid of the parameter and the portion of the code where we call the call back if we would like to display a message when the pr promise resolves when it finishes successfully we will instead call the resolve parameter it's a function this message is the value the argument that we're passing in after you finish walking the dog here's your completion message when the promise resolves let's modify the rest of the functions so that they use promises we will return a new promise two parameters resolve reject Arrow do this asynchronous code let's cut our current asynchronous code paste it remove the call back parameter we don't need it anymore and we don't need to call the call back when this promise resolves pass along this message you clean the kitchen let's do this with take out trash we will return a new promise two parameters resolve reject Arrow do this cut the asynchronous code paste it within the promise remove the call back and where we call the Callback when we resolve this promise pass along this message we no longer need to use callback hell instead we're going to use method chaining first we're going to walk the dog clean the kitchen and then take out the trash in that order we will call the walk dog function and then we're going to Method chain follow this with the then method walk the dog then what is what we're saying the walk dog function does provide a value parameter this message we can use that message for something that's going to be stored within value that's going to be the parameter that's provided to us take the value let's print it console.log my value so when I run this program we should only be walking the dog you walk the dog and nothing else looks like I misspelled resolve as resolves there after walking the dog I would like to clean the kitchen so I need to call that function next within our Arrow function we'll write more than one statement we need to enclose this within a set of curly braces print our value and then do this function return clean kitchen and then call it we'll add another then method then take the value provided by clean kitchen that will be this one take that value arrow console.log that value you walk the dog you clean the kitchen then we'll take out the trash at the end We'll add another statement to this then method we will return take out trash invoke this method then we will take the value provided to us when it resolves this value do this code console.log that value you walk the dog you clean the kitchen you take out the trash so after taking out the trash that's our last chore let's add another line of code after displaying you take out the trash let's console.log you finished all the chores you walk the dog you clean the kitchen you take out the trash you finished all the chores by Method chaining then methods it's a lot easier to write than nesting call backs now sometimes times with asynchronous functions depending on the task the task May Fail let's say we're trying to locate a resource a file if we can't locate that file and we're using promises we don't want to resolve that promise because we couldn't locate that file instead we want to reject that's what happens when an asynchronous function fails to do something when inside a promise so let's change our functions around within set timeout let's create a variable const dog walked did we accomplish this this will be true or false we'll use an if statement if dog walked then we will resolve it if we walk to the dog else we will reject we'll pass in a different value you didn't walk the dog okay let's do this with the other functions let's create a constant of kitchen cleaned equals true if our kitchen is cleaned if that is true we will resolve this promise you clean the kitchen else let's reject pass along this message you didn't clean the kitchen and lastly take out trash const trash taken out let's set that to be true if the trash is taken out resolve the promise else we will reject you didn't take out the trash if a promise might reject there's one more method we need to add to the end of this chain we need to add a catch method to catch any errors this will catch any rejects this is similar to error handling we'll be provided with one value an error Arrow do this let's console.log or even console. error the message provided to us with reject that's what the error is going to be will successfully walk the dog that will be true and cleaning the kitchen will be true but taking the trash out will be false we weren't able to complete this chore these are the results you walk the dog you clean the kitchen you didn't take out the trash how dare you we'll keep on completing these tasks until we fail at one of them so if walking the dog was false that was our first task this first promise was rejected we don't even attempt to resolve these other promises all right everybody so those are promises they're an object that manages asynchronous operations you can wrap a promise object around some asynchronous code these promise objects promis to return a value they will be pending until they complete then they'll either be resolved if that task completed successfully or rejected if it failed for some reason and well everybody those are promises in JavaScript
