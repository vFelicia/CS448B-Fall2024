With timestamps:

00:01 - hey everybody in this topic i'm going to
00:03 - explain the fill function the fill
00:06 - function fills a range of elements with
00:08 - a specified value there's three
00:11 - arguments a beginning address of a data
00:13 - structure an ending address then some
00:15 - value suppose we have an array of
00:17 - strings
00:19 - standard string i'll name this array
00:21 - foods
00:23 - i'll give this a maximum size of 10
00:26 - elements
00:27 - then i'll go ahead and fill this array
00:28 - with the same food i'll fill all 10
00:31 - elements with the word pizza
00:34 - so that's one
00:36 - two three four five six seven eight nine
00:39 - ten so these all have the same value now
00:42 - this really isn't practical although it
00:43 - does work just to demonstrate i'll
00:45 - display the elements with the for each
00:47 - loop
00:48 - we're displaying strings
00:50 - for every food element in my array foods
00:54 - i would like to display
00:58 - each food element
01:00 - then i'll add a new line
01:02 - so we have 10 elements all filled with
01:04 - pizza you know this does work but it's
01:06 - not practical to initialize all of these
01:09 - elements manually what if we had an
01:11 - array of 100 elements i would have to
01:13 - type the word pizza 100 times there's a
01:16 - few solutions one of which would be the
01:18 - fill function which would make this
01:20 - process a lot easier
01:21 - i'm going to declare this array but not
01:23 - fill it in quite yet
01:25 - we have an array of 100 elements to
01:27 - store strings i'm going to fill all 100
01:30 - elements with pizza
01:32 - so we type
01:33 - fill parentheses
01:35 - now we need the beginning address of a
01:37 - data structure
01:38 - well that's simply the array name then
01:41 - an ending address so that would be the
01:43 - second argument we would type the array
01:46 - name
01:47 - plus the size of the array so plus 100
01:50 - in this case
01:51 - then some value i'll fill this array
01:53 - with the word pizza 100 times
01:57 - there we go
01:59 - all 100 elements have been filled with
02:02 - pizza now if you do change the size of
02:04 - this array let's say we have 150
02:07 - elements you would have to go and change
02:09 - that within the fill method too what i
02:11 - would do in place of adding some number
02:12 - to my array i will add a size variable
02:15 - foods will be index of size and then we
02:19 - can set some size actually better yet
02:21 - let's make this a constant
02:22 - constant and
02:24 - size
02:25 - then i'll set this to be 100
02:29 - foods plus size
02:31 - so again all 100 elements are filled
02:33 - with pizza now here's a few exercises if
02:36 - i'm filling the first half of this array
02:38 - with pizza we have our beginning address
02:41 - then i need to find the halfway point
02:43 - foods plus size divided by 2. i'll just
02:47 - go ahead and put that within some
02:48 - parentheses for clarity then if i were
02:50 - to run this the first half of this array
02:52 - contains pizza
02:54 - and the second half contains nothing
02:56 - it's empty
02:58 - to fill the second half of this array
03:00 - with hamburgers i would invoke the fill
03:02 - function again
03:04 - we will begin where we left off
03:08 - foods plus size divided by 2
03:11 - the ending address would be
03:13 - foods
03:14 - plus
03:15 - size
03:17 - we will fill the second half of this
03:19 - array with
03:20 - hamburgers
03:24 - there we are the first half is all pizza
03:27 - the second half is all hamburgers
03:29 - here's a challenge round we'll fill the
03:32 - first third of our array with pizza the
03:34 - second third will be hamburgers and the
03:36 - last third will be hot dogs but 100
03:39 - doesn't divide by three evenly just to
03:41 - make this simple i'll set our array to
03:43 - be 99 elements we're filling the first
03:46 - third of our array with pizza size
03:48 - divided by three hamburgers will begin
03:50 - at foods plus size divided by three
03:54 - and end at size
03:56 - divided by three
03:58 - times two then we'll invoke the fill
04:01 - function one more time
04:02 - we'll continue where we left off
04:07 - and we will end at foods plus size
04:10 - and fill this with hot dogs
04:15 - here we go
04:18 - so we have pizza
04:20 - hamburgers
04:22 - then hot dogs
04:23 - so yeah that is the fill function we can
04:25 - fill a range of elements with a
04:27 - specified value it's great if you have a
04:29 - lot of elements to work with and you
04:31 - don't manually want to type all the
04:32 - values if you would like a copy of this
04:34 - code i'll post this in the comments
04:36 - section down below and well yeah that's
04:38 - the fill function in c plus

Cleaned transcript:

hey everybody in this topic i'm going to explain the fill function the fill function fills a range of elements with a specified value there's three arguments a beginning address of a data structure an ending address then some value suppose we have an array of strings standard string i'll name this array foods i'll give this a maximum size of 10 elements then i'll go ahead and fill this array with the same food i'll fill all 10 elements with the word pizza so that's one two three four five six seven eight nine ten so these all have the same value now this really isn't practical although it does work just to demonstrate i'll display the elements with the for each loop we're displaying strings for every food element in my array foods i would like to display each food element then i'll add a new line so we have 10 elements all filled with pizza you know this does work but it's not practical to initialize all of these elements manually what if we had an array of 100 elements i would have to type the word pizza 100 times there's a few solutions one of which would be the fill function which would make this process a lot easier i'm going to declare this array but not fill it in quite yet we have an array of 100 elements to store strings i'm going to fill all 100 elements with pizza so we type fill parentheses now we need the beginning address of a data structure well that's simply the array name then an ending address so that would be the second argument we would type the array name plus the size of the array so plus 100 in this case then some value i'll fill this array with the word pizza 100 times there we go all 100 elements have been filled with pizza now if you do change the size of this array let's say we have 150 elements you would have to go and change that within the fill method too what i would do in place of adding some number to my array i will add a size variable foods will be index of size and then we can set some size actually better yet let's make this a constant constant and size then i'll set this to be 100 foods plus size so again all 100 elements are filled with pizza now here's a few exercises if i'm filling the first half of this array with pizza we have our beginning address then i need to find the halfway point foods plus size divided by 2. i'll just go ahead and put that within some parentheses for clarity then if i were to run this the first half of this array contains pizza and the second half contains nothing it's empty to fill the second half of this array with hamburgers i would invoke the fill function again we will begin where we left off foods plus size divided by 2 the ending address would be foods plus size we will fill the second half of this array with hamburgers there we are the first half is all pizza the second half is all hamburgers here's a challenge round we'll fill the first third of our array with pizza the second third will be hamburgers and the last third will be hot dogs but 100 doesn't divide by three evenly just to make this simple i'll set our array to be 99 elements we're filling the first third of our array with pizza size divided by three hamburgers will begin at foods plus size divided by three and end at size divided by three times two then we'll invoke the fill function one more time we'll continue where we left off and we will end at foods plus size and fill this with hot dogs here we go so we have pizza hamburgers then hot dogs so yeah that is the fill function we can fill a range of elements with a specified value it's great if you have a lot of elements to work with and you don't manually want to type all the values if you would like a copy of this code i'll post this in the comments section down below and well yeah that's the fill function in c plus
