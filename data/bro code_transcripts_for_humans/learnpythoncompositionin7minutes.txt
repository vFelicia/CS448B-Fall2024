With timestamps:

00:00 - all right everybody so today I got to
00:01 - talk about composition in python as
00:04 - we've discussed in the previous topic
00:06 - aggregation is a relationship where one
00:08 - object contains references to other
00:10 - independent objects they have a has a
00:14 - relationship composition on the other
00:16 - hand is when the composed object
00:18 - directly owns its components which
00:21 - cannot exist independently they have a
00:24 - owns a relationship aggregation has
00:28 - things composition owns things kind of
00:31 - like you're renting or you're owning
00:33 - something in this example we'll create
00:35 - three classes a class of
00:40 - engine a class of
00:44 - wheel and the composed object is going
00:47 - to be Class
00:49 - Car within our car class we will
00:52 - construct some engine and wheel objects
00:55 - we'll begin with our engine class we'll
00:57 - need a Constructor we'll Define that def
01:00 - fine in knit let's say that with an
01:03 - engine we need a
01:05 - horsepower what is the power of the
01:07 - engine self. horsepower
01:11 - attribute equals the horsepower that we
01:15 - receive with our class of wheel we need
01:17 - a Constructor Define
01:21 - init let's add a size attribute what is
01:25 - the size of the
01:27 - wheel self. size
01:30 - equal
01:32 - size okay now with our car object now
01:36 - within our car class we need a
01:39 - Constructor we will need a make
01:43 - model the horsepower of the
01:47 - engine and size we'll say wheel
01:51 - size remember that you can rename
01:54 - parameters to something
01:55 - different we will assign these
01:57 - attributes self. make equal
02:00 - make self. model equals
02:05 - model here's where composition comes in
02:08 - we will define an
02:10 - attribute of engine then call the engine
02:15 - Constructor we have one argument to pass
02:17 - in
02:19 - Horsepower we will pass in the
02:21 - horsepower that we receive to the engine
02:26 - Constructor then we have to set up our
02:28 - Wheels
02:30 - self. Wheels equals now to construct a
02:35 - single wheel object we would call the
02:38 - wheel Constructor then pass in the wheel
02:42 - size however cars have four wheels we
02:44 - don't want just one wheel so what we
02:47 - could do is write a list
02:51 - comprehension for every
02:53 - wheel in range four to iterate four
02:57 - times let's call the wheel constru
03:00 - structor and pass in our wheel
03:03 - size this list comprehension will create
03:06 - four wheel objects for
03:08 - us the reason that this is considered
03:10 - composition we're creating engine and
03:13 - wheel objects inside of this class car
03:16 - our class car owns an engine and owns
03:20 - four wheels we're not creating these
03:22 - objects outside of the car
03:25 - class let's create a car object car
03:29 - equals car we need a make model
03:33 - horsepower for the engine and wheel size
03:36 - so for my car let's say
03:39 - Ford Mustang for the horsepower I'll
03:43 - make up something
03:45 - 500 for the wheel size 18 in now just to
03:49 - make this more explicit I'm going to use
03:51 - keyword arguments but you don't have to
03:54 - so make equals Ford Model equals Mustang
04:00 - horsepower equal
04:03 - 500 wheel size equals
04:07 - 18 let's create a method to display our
04:10 - car I would like the details Define
04:14 - display
04:16 - car no
04:17 - parameters let's return an F string
04:22 - let's begin with the making model those
04:24 - will be easy display self. make and self
04:30 - model let's take our car object use the
04:34 - display car
04:38 - method then I got to print it I
04:41 - forgot because we're returning a string
04:44 - we're not printing it directly we have a
04:46 - Ford
04:48 - Mustang okay let's display the
04:51 - horsepower there's one additional step
04:53 - we are accessing self this car that
04:56 - we're creating but now we need the
04:58 - engine let's access the engine attribute
05:02 - and now with our engine our engine has
05:04 - an attribute of horsepower we'll use the
05:07 - attribute accessor that dot
05:11 - horsepower 500 I'll add HP meaning
05:17 - horsepower all right now for the wheels
05:20 - I'll add another
05:22 - placeholder access self access our
05:26 - Wheels now our Wheels it's a list
05:30 - I don't need all four wheels I just need
05:33 - one if I was to take my list then access
05:37 - the size this is what it'll give me list
05:41 - object has no attribute
05:43 - size so we need to access one of the
05:46 - elements of our list of Wheels let's
05:49 - just say the first wheels at index zero
05:52 - then give me the
05:53 - size 18 and that's going to be inches
06:00 - all right then let's create a second car
06:02 - object before we finish we have car
06:05 - 1 Car 2 equals
06:08 - car we need a make model horsepower for
06:11 - the engine and wheel size for the wheels
06:15 - I will pick a
06:17 - Chevrolet Corvette and I'm just going to
06:20 - make up some numbers the horsepower is
06:23 - 670 and the wheel size is
06:26 - 19 let's display Car 2 Car 2 called the
06:30 - display car method we have a Chevy
06:33 - Corvette with horsepower of 670 the
06:37 - wheel size is 19
06:39 - in so our car class it owns some objects
06:43 - it owns an engine and it owns four
06:45 - wheels that's why composition is
06:47 - different from aggregation if I were to
06:50 - delete these two cars this engine and
06:53 - the four wheels would stop existing
06:56 - whereas in our library example in the
06:57 - last video If I Was to delete the
07:00 - library object the books would still
07:02 - exist all right everybody so that's
07:04 - composition it's where a composed object
07:07 - our car directly owns its components our
07:11 - car owns an engine and it owns four
07:14 - wheels we're creating them within the
07:16 - class and well everybody that's
07:18 - composition in Python

Cleaned transcript:

all right everybody so today I got to talk about composition in python as we've discussed in the previous topic aggregation is a relationship where one object contains references to other independent objects they have a has a relationship composition on the other hand is when the composed object directly owns its components which cannot exist independently they have a owns a relationship aggregation has things composition owns things kind of like you're renting or you're owning something in this example we'll create three classes a class of engine a class of wheel and the composed object is going to be Class Car within our car class we will construct some engine and wheel objects we'll begin with our engine class we'll need a Constructor we'll Define that def fine in knit let's say that with an engine we need a horsepower what is the power of the engine self. horsepower attribute equals the horsepower that we receive with our class of wheel we need a Constructor Define init let's add a size attribute what is the size of the wheel self. size equal size okay now with our car object now within our car class we need a Constructor we will need a make model the horsepower of the engine and size we'll say wheel size remember that you can rename parameters to something different we will assign these attributes self. make equal make self. model equals model here's where composition comes in we will define an attribute of engine then call the engine Constructor we have one argument to pass in Horsepower we will pass in the horsepower that we receive to the engine Constructor then we have to set up our Wheels self. Wheels equals now to construct a single wheel object we would call the wheel Constructor then pass in the wheel size however cars have four wheels we don't want just one wheel so what we could do is write a list comprehension for every wheel in range four to iterate four times let's call the wheel constru structor and pass in our wheel size this list comprehension will create four wheel objects for us the reason that this is considered composition we're creating engine and wheel objects inside of this class car our class car owns an engine and owns four wheels we're not creating these objects outside of the car class let's create a car object car equals car we need a make model horsepower for the engine and wheel size so for my car let's say Ford Mustang for the horsepower I'll make up something 500 for the wheel size 18 in now just to make this more explicit I'm going to use keyword arguments but you don't have to so make equals Ford Model equals Mustang horsepower equal 500 wheel size equals 18 let's create a method to display our car I would like the details Define display car no parameters let's return an F string let's begin with the making model those will be easy display self. make and self model let's take our car object use the display car method then I got to print it I forgot because we're returning a string we're not printing it directly we have a Ford Mustang okay let's display the horsepower there's one additional step we are accessing self this car that we're creating but now we need the engine let's access the engine attribute and now with our engine our engine has an attribute of horsepower we'll use the attribute accessor that dot horsepower 500 I'll add HP meaning horsepower all right now for the wheels I'll add another placeholder access self access our Wheels now our Wheels it's a list I don't need all four wheels I just need one if I was to take my list then access the size this is what it'll give me list object has no attribute size so we need to access one of the elements of our list of Wheels let's just say the first wheels at index zero then give me the size 18 and that's going to be inches all right then let's create a second car object before we finish we have car 1 Car 2 equals car we need a make model horsepower for the engine and wheel size for the wheels I will pick a Chevrolet Corvette and I'm just going to make up some numbers the horsepower is 670 and the wheel size is 19 let's display Car 2 Car 2 called the display car method we have a Chevy Corvette with horsepower of 670 the wheel size is 19 in so our car class it owns some objects it owns an engine and it owns four wheels that's why composition is different from aggregation if I were to delete these two cars this engine and the four wheels would stop existing whereas in our library example in the last video If I Was to delete the library object the books would still exist all right everybody so that's composition it's where a composed object our car directly owns its components our car owns an engine and it owns four wheels we're creating them within the class and well everybody that's composition in Python
