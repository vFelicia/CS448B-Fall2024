With timestamps:

00:00 - hey everybody so today I got to talk
00:01 - about exception handling in Python an
00:04 - exception is an event that interrupts
00:06 - the normal flow of a program there are
00:08 - many different types of exceptions which
00:10 - include but are not limited to zero
00:12 - division error exceptions when you
00:14 - attempt to divide a number by zero for
00:16 - example 1 / 0 that would interrupt our
00:20 - program we have a zero division error
00:23 - another is a type error that's if we
00:25 - attempt to perform an operation of a
00:27 - value that's of the wrong data type for
00:29 - example 1 plus a string of
00:32 - one that would give us a type error
00:35 - unsupported operand for INT and string
00:38 - value errors tend to happen when you
00:40 - attempt to typ cast a value of the wrong
00:42 - data type so let's say we attempt to typ
00:45 - cast the word Pizza as an
00:49 - integer well Pizza isn't a number we
00:51 - have a value error invalid literal for
00:54 - INT base with 10 pizza so exceptions
00:58 - will interrupt our program if they not
01:00 - handled gracefully and here's how we can
01:02 - do that there's three steps we can write
01:05 - a try accept and finally block any code
01:10 - that's dangerous where it could cause an
01:12 - error you'll place within a tri block
01:14 - for example anytime we accept user input
01:17 - that is considered dangerous code
01:19 - because a user can type in anything so
01:21 - let's say we have a number number equals
01:25 - we will accept some user input we will
01:28 - tell a user to enter to a
01:31 - number then we're going to typ cast it
01:33 - as an
01:36 - integer then I'm going to print 1
01:40 - divided by whatever the user types
01:43 - in if I were to type in zero we get a
01:46 - zero division
01:48 - error if I type in the word Pizza we get
01:51 - a value error we would like to prevent
01:54 - our program from stopping this code is
01:56 - considered dangerous a user can really
01:59 - type in anything
02:00 - so we're going to surround this code
02:02 - within a tri
02:03 - block we'll type try colon and then
02:08 - indent any code underneath it we're
02:10 - going to try this code if an exception
02:13 - happens we will move on to step two
02:16 - subsequently following the tri block we
02:17 - will add an accept
02:20 - block if we run into one of these
02:23 - exceptions we can execute some
02:25 - alternative code for example a zero
02:27 - division error if some attempts to
02:30 - divide a number by zero we can take a
02:33 - different course of action instead of
02:35 - our program crashing and coming to a
02:37 - halt let's
02:39 - print
02:41 - you can't divide by
02:45 - zero
02:46 - idiot let's attempt to divide by zero
02:49 - enter a number zero you can't divide by
02:53 - zero idiot we have gracefully handled
02:56 - this exception so now let's say somebody
02:59 - typ types in the word Pizza when we're
03:01 - asking for a number well we have a value
03:04 - error well we can chain accept blocks if
03:08 - we encounter a value
03:10 - error let's add an accept block for that
03:13 - accept value
03:15 - error we're going to
03:19 - print enter only numbers
03:24 - please enter a number I'll type in the
03:26 - word Pizza enter only numbers pleas
03:29 - please that's good we're not
03:31 - interrupting our program now what you
03:34 - may see some people do is they will just
03:36 - catch all exceptions
03:39 - except
03:41 - exception now this is actually
03:42 - considered bad practice exception will
03:45 - catch all exceptions however it's too
03:48 - broad of a
03:49 - clause it's good practice to tell the
03:51 - user what went wrong exactly if we
03:54 - resort to just catching all exceptions
03:57 - you may see an error message such as
04:00 - something went wrong I'm looking at you
04:03 - Microsoft we want to tell the user what
04:06 - went wrong exactly I would only catch
04:08 - all exceptions as a last resort first
04:11 - let's try and tell the user what went
04:13 - wrong
04:14 - exactly so I'm going to undo all this
04:19 - code if there's an exception that occurs
04:22 - it's not a zero division error and it's
04:23 - not a value error then we can add that
04:26 - catchall where we catch any unseen
04:28 - exceptions
04:30 - now lastly we have the finally block the
04:33 - finally block always executes regardless
04:36 - if there's an exception or not it's
04:38 - usually used for any sort of cleanup
04:40 - that you need to do such as if you're
04:42 - handling files you may try and open a
04:45 - file and then you'll want to be sure to
04:47 - close that file when you're done with it
04:49 - that would be handled within the finally
04:51 - block but we'll get to file handling
04:53 - pretty soon in the next topic so just
04:56 - for the time being I'm going to
04:58 - print do some cleanup
05:02 - here all right let's test this enter a
05:05 - number I'm going to divide by zero you
05:09 - can't divide by zero and we still
05:11 - execute the finally
05:13 - block enter a number I'll enter in
05:16 - one 1 / 1 is 1 and we still execute that
05:21 - finally block the finally block will be
05:24 - more useful in future videos all you
05:26 - need to know is that it always executes
05:29 - regardless if there's an exception or
05:30 - not all right everybody so that's
05:32 - exception handling an exception is an
05:34 - event that interrupts the normal flow of
05:36 - a program there are many different types
05:38 - of exceptions you can always look under
05:40 - the official python documentation for an
05:42 - extensive list and well everybody that's
05:45 - exception handling in Python

Cleaned transcript:

hey everybody so today I got to talk about exception handling in Python an exception is an event that interrupts the normal flow of a program there are many different types of exceptions which include but are not limited to zero division error exceptions when you attempt to divide a number by zero for example 1 / 0 that would interrupt our program we have a zero division error another is a type error that's if we attempt to perform an operation of a value that's of the wrong data type for example 1 plus a string of one that would give us a type error unsupported operand for INT and string value errors tend to happen when you attempt to typ cast a value of the wrong data type so let's say we attempt to typ cast the word Pizza as an integer well Pizza isn't a number we have a value error invalid literal for INT base with 10 pizza so exceptions will interrupt our program if they not handled gracefully and here's how we can do that there's three steps we can write a try accept and finally block any code that's dangerous where it could cause an error you'll place within a tri block for example anytime we accept user input that is considered dangerous code because a user can type in anything so let's say we have a number number equals we will accept some user input we will tell a user to enter to a number then we're going to typ cast it as an integer then I'm going to print 1 divided by whatever the user types in if I were to type in zero we get a zero division error if I type in the word Pizza we get a value error we would like to prevent our program from stopping this code is considered dangerous a user can really type in anything so we're going to surround this code within a tri block we'll type try colon and then indent any code underneath it we're going to try this code if an exception happens we will move on to step two subsequently following the tri block we will add an accept block if we run into one of these exceptions we can execute some alternative code for example a zero division error if some attempts to divide a number by zero we can take a different course of action instead of our program crashing and coming to a halt let's print you can't divide by zero idiot let's attempt to divide by zero enter a number zero you can't divide by zero idiot we have gracefully handled this exception so now let's say somebody typ types in the word Pizza when we're asking for a number well we have a value error well we can chain accept blocks if we encounter a value error let's add an accept block for that accept value error we're going to print enter only numbers please enter a number I'll type in the word Pizza enter only numbers pleas please that's good we're not interrupting our program now what you may see some people do is they will just catch all exceptions except exception now this is actually considered bad practice exception will catch all exceptions however it's too broad of a clause it's good practice to tell the user what went wrong exactly if we resort to just catching all exceptions you may see an error message such as something went wrong I'm looking at you Microsoft we want to tell the user what went wrong exactly I would only catch all exceptions as a last resort first let's try and tell the user what went wrong exactly so I'm going to undo all this code if there's an exception that occurs it's not a zero division error and it's not a value error then we can add that catchall where we catch any unseen exceptions now lastly we have the finally block the finally block always executes regardless if there's an exception or not it's usually used for any sort of cleanup that you need to do such as if you're handling files you may try and open a file and then you'll want to be sure to close that file when you're done with it that would be handled within the finally block but we'll get to file handling pretty soon in the next topic so just for the time being I'm going to print do some cleanup here all right let's test this enter a number I'm going to divide by zero you can't divide by zero and we still execute the finally block enter a number I'll enter in one 1 / 1 is 1 and we still execute that finally block the finally block will be more useful in future videos all you need to know is that it always executes regardless if there's an exception or not all right everybody so that's exception handling an exception is an event that interrupts the normal flow of a program there are many different types of exceptions you can always look under the official python documentation for an extensive list and well everybody that's exception handling in Python
