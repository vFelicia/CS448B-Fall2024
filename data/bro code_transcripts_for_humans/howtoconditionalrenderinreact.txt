With timestamps:

00:00 - hey sup everybody in today's video I'm
00:02 - going to give you an introduction to
00:04 - conditional rendering in react
00:06 - conditional rendering allows you to
00:08 - control what gets rendered in your
00:10 - application based on certain conditions
00:12 - by utilizing conditional rendering we
00:14 - can show hide or change components
00:17 - here's an example we'll create a user
00:20 - greeting
00:21 - component let's go to our source folder
00:24 - new file user greeting and this will be
00:28 - a jsx file
00:31 - I will be using function based
00:33 - components function the name of the
00:35 - component user
00:37 - greeting we will have one parameter
00:40 - props we learned about props in the last
00:43 - video before I forget I'm going to
00:46 - export default the component name just
00:50 - so that we can import it later heading
00:52 - back to our app component we will return
00:55 - a user greeting
00:58 - component user
01:00 - greeing by using props we'll send two
01:03 - key value pairs to our user greeing
01:05 - component is loged in this will be a
01:09 - Boolean value we'll check to see if
01:12 - we're logged in or not and a username
01:15 - username equals this is a string so we
01:18 - do not need a placeholder type in your
01:21 - name or
01:23 - username then we do need to import user
01:27 - greeting import user greeting from
01:33 - alocation
01:35 - SL user
01:37 - greeting.
01:42 - jsx let's save everything head to our
01:45 - user greeting component we have these
01:47 - two key value pairs that are stored
01:49 - within our props object I'll use an if
01:52 - statement to check to see if we're
01:53 - logged in or not if props is an object
01:58 - we will access props followed by dot is
02:02 - logged
02:04 - in is this true or not if it is then
02:07 - let's return an H2 element with text of
02:13 - Welcome I'd like to include some
02:15 - JavaScript I'll use curly
02:17 - braces let's take props dot our
02:21 - username let's see if this
02:24 - works welcome bro code or whatever your
02:27 - name
02:28 - is so what if we're not logged in I will
02:31 - set is logged in to be
02:34 - false well nothing appears to happen
02:37 - going back to our user greeting let's
02:39 - add an lse
02:41 - statement else we will return an H2
02:45 - element with text of please log in to
02:52 - continue please log in to continue
02:55 - within our function based component we
02:57 - can check some logic using an if
02:58 - statement if if some condition is true
03:01 - return this if not return something else
03:05 - now technically you don't need the else
03:07 - statement you could just say return
03:09 - because when you return you exit this
03:12 - would work
03:14 - too as you can see I don't think it's as
03:17 - explicit as using an L statement another
03:20 - option is to use the trary operator
03:23 - which we learned in
03:24 - JavaScript we will
03:28 - return check
03:30 - do is logged in add a question mark is
03:34 - this true or is it false if it's true
03:37 - then we'll return an H2 element that
03:39 - says
03:41 - welcome I'll add some
03:43 - JavaScript props do
03:47 - username I'm going to close this menu
03:49 - just so we can see if this condition is
03:52 - true return this otherwise add a Col in
03:56 - we'll return something
03:58 - else we'll add an H2
04:01 - element please log
04:04 - into
04:07 - continue this statement is pretty
04:09 - lengthy I'm going to put each part of
04:11 - the statement on a new line just so we
04:12 - can read it
04:17 - easily if is logged in is true return
04:21 - this H2 element if not return this H2
04:24 - element currently we're logged in that
04:27 - is true I set this to be
04:31 - false well then we get that login prompt
04:33 - please log in to continue you'll more
04:36 - commonly see people use trary operators
04:38 - rather than IFL statements just because
04:40 - they're more concise let's apply some
04:43 - CSS
04:44 - styling going back to our app component
04:46 - we'll set is logged in to be
04:49 - true We'll add a class name to each of
04:51 - these H2 components class name equals
04:55 - the first H2 element if our condition is
04:58 - true we'll have a the class name of
05:02 - welcome-
05:05 - message our second H2 element will have
05:07 - a class name of login D
05:12 - prompt going to our CSS stylesheet let's
05:16 - select the class of Welcome message I'll
05:19 - apply the following CSS
05:21 - properties let's set the font size to be
05:24 - 2.5
05:27 - em I'll change the background
05:31 - color I like using hsl
05:36 - values I'll go with this shade of
05:40 - green let's change the font color to be
05:44 - white I'll add a little bit of padding
05:47 - 10
05:49 - pixels I'll add a border radius to round
05:51 - the
05:55 - corners then set margin to be zero
06:00 - here is our user greeting component if
06:03 - the user is logged
06:04 - in let's style the login prompt class
06:09 - next Dot Login prompt really I'll just
06:12 - copy these properties but we'll change
06:14 - the background
06:15 - color let's change the background color
06:18 - to be
06:19 - red all right let's set is logged in to
06:22 - be
06:22 - false then our user greeting component
06:25 - should have those different CSS
06:28 - properties
06:30 - please log in to continue if I set that
06:32 - to be true well then we're logged in
06:35 - welcome your
06:37 - username within our user greeting this
06:40 - tary operator is very verbose here's
06:44 - another way in which we can use the tary
06:45 - operator in this
06:47 - situation let's create two constants
06:50 - const the first will be welcome
06:52 - message be sure not to include any
06:55 - dashes
06:57 - though separately we'll store these h H2
07:01 - elements I'm getting a copy of this
07:03 - first H2
07:04 - element we'll store that within our
07:06 - welcome
07:08 - message just so we can read it I'm going
07:10 - to place each line on a new
07:15 - line then let's create another
07:20 - constant const login
07:23 - prompt be sure to eliminate any dashes
07:26 - we will be using a camel case naming
07:28 - convention
07:30 - take our second H2 cut
07:34 - it paste
07:39 - it and there we go I find that a lot
07:42 - easier to
07:44 - read so we're going to take our
07:46 - condition is logged in if that's true
07:50 - we'll return our constant our welcome
07:53 - message otherwise we'll return our other
07:56 - constant our login prompt and that will
07:59 - work still the same let's set that to be
08:01 - false please log to continue set it back
08:04 - to be true welcome your
08:06 - username I find this syntax a lot easier
08:09 - to read now it is good practice if
08:11 - you're accepting props to set up prop
08:13 - types just in case the values that are
08:16 - passed in are not of the correct data
08:17 - type you'll at least get a warning for
08:19 - debugging purposes it's a good habit
08:22 - that we should develop we learned about
08:24 - prop types in the last video so at the
08:27 - top let's import prop types from
08:34 - prop-types after our function take our
08:37 - user greeing component do propop types
08:43 - equals take our keys is logged in the
08:47 - value with this Associated key should be
08:49 - a Boolean prop that's capital T types
08:55 - dob then a string for username user
09:00 - name prop types. string all right the
09:04 - last thing we're going to do is set up
09:06 - default props what if somebody's logged
09:08 - in but they don't have a username we'll
09:11 - set a default for the username as guest
09:14 - so after our prop types we'll set up
09:16 - some default props again take user
09:19 - greeting that's the name of our
09:21 - component. default
09:24 - props
09:26 - equals is logged in will be
09:31 - false and
09:33 - username will be
09:35 - guest if there's no username passed in
09:38 - all right going back to our app
09:40 - component if a user is logged in but
09:43 - there's no username let's eliminate that
09:46 - we'll get the welcome message of Welcome
09:49 - guest now if a user is not logged
09:52 - in regardless we don't display the
09:54 - username all heard everybody so that's
09:57 - conditional rendering you can check some
09:59 - sort of condition based on if that
10:01 - condition is true or false we can show
10:04 - hide or change components there's many
10:06 - different ways in which you can do that
10:08 - and well everybody that is an
10:09 - introduction to conditional rendering in
10:13 - react

Cleaned transcript:

hey sup everybody in today's video I'm going to give you an introduction to conditional rendering in react conditional rendering allows you to control what gets rendered in your application based on certain conditions by utilizing conditional rendering we can show hide or change components here's an example we'll create a user greeting component let's go to our source folder new file user greeting and this will be a jsx file I will be using function based components function the name of the component user greeting we will have one parameter props we learned about props in the last video before I forget I'm going to export default the component name just so that we can import it later heading back to our app component we will return a user greeting component user greeing by using props we'll send two key value pairs to our user greeing component is loged in this will be a Boolean value we'll check to see if we're logged in or not and a username username equals this is a string so we do not need a placeholder type in your name or username then we do need to import user greeting import user greeting from alocation SL user greeting. jsx let's save everything head to our user greeting component we have these two key value pairs that are stored within our props object I'll use an if statement to check to see if we're logged in or not if props is an object we will access props followed by dot is logged in is this true or not if it is then let's return an H2 element with text of Welcome I'd like to include some JavaScript I'll use curly braces let's take props dot our username let's see if this works welcome bro code or whatever your name is so what if we're not logged in I will set is logged in to be false well nothing appears to happen going back to our user greeting let's add an lse statement else we will return an H2 element with text of please log in to continue please log in to continue within our function based component we can check some logic using an if statement if if some condition is true return this if not return something else now technically you don't need the else statement you could just say return because when you return you exit this would work too as you can see I don't think it's as explicit as using an L statement another option is to use the trary operator which we learned in JavaScript we will return check do is logged in add a question mark is this true or is it false if it's true then we'll return an H2 element that says welcome I'll add some JavaScript props do username I'm going to close this menu just so we can see if this condition is true return this otherwise add a Col in we'll return something else we'll add an H2 element please log into continue this statement is pretty lengthy I'm going to put each part of the statement on a new line just so we can read it easily if is logged in is true return this H2 element if not return this H2 element currently we're logged in that is true I set this to be false well then we get that login prompt please log in to continue you'll more commonly see people use trary operators rather than IFL statements just because they're more concise let's apply some CSS styling going back to our app component we'll set is logged in to be true We'll add a class name to each of these H2 components class name equals the first H2 element if our condition is true we'll have a the class name of welcome message our second H2 element will have a class name of login D prompt going to our CSS stylesheet let's select the class of Welcome message I'll apply the following CSS properties let's set the font size to be 2.5 em I'll change the background color I like using hsl values I'll go with this shade of green let's change the font color to be white I'll add a little bit of padding 10 pixels I'll add a border radius to round the corners then set margin to be zero here is our user greeting component if the user is logged in let's style the login prompt class next Dot Login prompt really I'll just copy these properties but we'll change the background color let's change the background color to be red all right let's set is logged in to be false then our user greeting component should have those different CSS properties please log in to continue if I set that to be true well then we're logged in welcome your username within our user greeting this tary operator is very verbose here's another way in which we can use the tary operator in this situation let's create two constants const the first will be welcome message be sure not to include any dashes though separately we'll store these h H2 elements I'm getting a copy of this first H2 element we'll store that within our welcome message just so we can read it I'm going to place each line on a new line then let's create another constant const login prompt be sure to eliminate any dashes we will be using a camel case naming convention take our second H2 cut it paste it and there we go I find that a lot easier to read so we're going to take our condition is logged in if that's true we'll return our constant our welcome message otherwise we'll return our other constant our login prompt and that will work still the same let's set that to be false please log to continue set it back to be true welcome your username I find this syntax a lot easier to read now it is good practice if you're accepting props to set up prop types just in case the values that are passed in are not of the correct data type you'll at least get a warning for debugging purposes it's a good habit that we should develop we learned about prop types in the last video so at the top let's import prop types from proptypes after our function take our user greeing component do propop types equals take our keys is logged in the value with this Associated key should be a Boolean prop that's capital T types dob then a string for username user name prop types. string all right the last thing we're going to do is set up default props what if somebody's logged in but they don't have a username we'll set a default for the username as guest so after our prop types we'll set up some default props again take user greeting that's the name of our component. default props equals is logged in will be false and username will be guest if there's no username passed in all right going back to our app component if a user is logged in but there's no username let's eliminate that we'll get the welcome message of Welcome guest now if a user is not logged in regardless we don't display the username all heard everybody so that's conditional rendering you can check some sort of condition based on if that condition is true or false we can show hide or change components there's many different ways in which you can do that and well everybody that is an introduction to conditional rendering in react
