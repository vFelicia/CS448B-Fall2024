With timestamps:

00:00 - hey how's it going everybody it's your
00:01 - bro hope you're doing well and in this
00:03 - video i'm going to teach you guys how
00:04 - the static keyword modifier works in
00:07 - java so
00:07 - sit back relax and enjoy the show
00:12 - if you find this video helpful please
00:13 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - all right guys and gals i'm going to be
00:21 - explaining the static keyword modifier
00:23 - this is a keyword modifier that can be
00:25 - applied to a variable
00:27 - a method or even classes but that's a
00:30 - separate video
00:31 - so anything that is static is also known
00:34 - as a static member
00:35 - and a good way of thinking about this is
00:37 - that the class
00:39 - that contains that static member now
00:41 - owns
00:42 - that member whether it's a variable or a
00:45 - method
00:46 - so anything that the class owns is
00:48 - shared by all
00:50 - instances of that class meaning if we
00:52 - create
00:53 - objects from this class they all have to
00:55 - share this one
00:56 - variable or method there is only one
00:59 - copy so let me explain this with an
01:02 - example
01:03 - i have a class called friend and we're
01:05 - going to be constructing some friend
01:06 - objects
01:07 - so i have the constructor and one
01:09 - parameter set up where we have to send
01:11 - in a name
01:12 - so let's create a static variable called
01:14 - number of
01:15 - friends so all instances of the friend
01:18 - class
01:18 - have to share this one variable so we
01:21 - use the static keyword modifier
01:23 - then the data type of the variable and
01:26 - let's say this is an integer
01:28 - and this will be called number of
01:31 - friends and if we were to display this
01:37 - system.out.printline now this is owned
01:39 - by the class itself
01:40 - so we do not need to create a friend
01:43 - object we can just type in
01:44 - the name of the class friend followed by
01:48 - what we're trying to access number of
01:50 - friends and i'm using eclipse you can
01:52 - see here that i have this little red
01:54 - s next to this variable that shows that
01:57 - this is a
01:58 - static variable and if we were to print
02:00 - the number of friends that we have
02:03 - it's unfortunately zero so let's create
02:05 - some friends so let's create
02:07 - one friend object so friend let's call
02:09 - him friend one
02:11 - for the instance name equals new friend
02:14 - and assign a friend name of
02:17 - baby spongebob because that's the first
02:19 - thing i thought of
02:20 - and then within the constructor let's
02:22 - increment the amount of
02:24 - friends that we have so
02:27 - after everything is done we'll add one
02:30 - to the number of friends that we have
02:34 - so we now have one friend now let's
02:37 - create another friend
02:38 - the name of this instance will be friend
02:41 - two and we'll pass in a name of
02:43 - patrick and now the number of friends
02:47 - that we have
02:48 - is two so both friend 1 and
02:51 - friend 2 are sharing the same number of
02:54 - friends
02:55 - variable because there is only a single
02:57 - copy
02:58 - and the class itself owns the static
03:01 - member
03:02 - and if we were to create another friend
03:04 - guess what's gonna happen
03:06 - friend three the name this time will be
03:09 - squidward
03:11 - and we now have three friends now it's
03:14 - entirely possible
03:15 - to access a static variable using an
03:18 - object instance name itself
03:20 - so let's replace friend with friend one
03:23 - so it is possible to access this static
03:26 - variable
03:27 - using the named instance of an object
03:29 - from this class
03:30 - but it's not recommended and you can see
03:32 - here that there's a warning
03:33 - the static field friend.number of
03:35 - friends should be accessed in a static
03:37 - way
03:38 - so it is best practice to type in
03:41 - the name of the class that owns the
03:43 - static member
03:44 - followed by the static member that
03:47 - you're trying to access
03:48 - so this will display the number of
03:50 - friends that we have and since
03:52 - there is only one copy all of these
03:54 - instances
03:55 - of the friend class are forced to share
03:58 - this static member so
04:00 - what do you think would happen if we
04:01 - removed the static modifier from this
04:04 - variable
04:04 - well for one we can no longer access
04:07 - this variable in a
04:09 - static way so you can see that it says
04:12 - cannot make a static reference to the
04:14 - non-static field
04:16 - friend dot number of friends so each of
04:19 - these friend objects
04:20 - now has their very own copy of the
04:23 - number of friends variable
04:24 - and in order to display one of these
04:26 - copies of the number of friends variable
04:29 - we would type in the name of the
04:31 - instance of this class for example
04:33 - friend one and their own number of
04:35 - friends
04:36 - is one same thing goes for friend two
04:40 - as well as friend three so if we change
04:44 - this back to static
04:45 - we can make a static reference to
04:48 - this static variable and this will
04:51 - display
04:51 - the total amount of friends that we have
04:54 - created
04:54 - from this class which is three and not
04:57 - only can you apply
04:58 - the static keyword modifier to a
05:00 - variable but you can also apply it to a
05:03 - method as well
05:04 - so let's create a static method that
05:06 - returns the amount of friends that we
05:08 - have within a message so
05:10 - let's use the static keyword modifier
05:13 - and then
05:14 - the return type is void and the name
05:17 - will be
05:18 - display friends
05:21 - and within this method we'll just have a
05:24 - print line statement
05:25 - so system.out.printline you
05:28 - have plus number of friends
05:33 - plus friends within a string
05:38 - so we no longer need this line now the
05:41 - preferred way of calling this method
05:43 - is by the class name and not the name of
05:46 - one of its instances
05:48 - so if we want to call this method this
05:51 - static method of the french class we're
05:53 - going to type
05:54 - the name of the french class and not one
05:56 - of these instances
05:58 - dot and then the method that we want to
06:00 - call and you can see that we have a
06:02 - static method
06:04 - called display friends and when we call
06:06 - this method
06:07 - it's going to display our message you
06:10 - have
06:11 - three friends and then if we created
06:13 - another friend for example like
06:15 - sandy and this will be friend four
06:20 - and we call this method we now have
06:23 - four friends now a good example of a
06:26 - static method
06:27 - is the round method of the math class so
06:30 - we type in the name of the math class
06:32 - this is an unrelated example
06:34 - by the way dot round and you can see
06:36 - that this is a
06:37 - static method and let's take a look at
06:40 - the math class
06:44 - so let's look for round
06:49 - okay here is one copy of this method
06:53 - and you can see that it's a static
06:55 - method so we type in the name of the
06:57 - math class
06:58 - like it wouldn't make sense to create a
07:00 - map object like math
07:02 - math equals new math right it's much
07:05 - more simple
07:05 - just to type the name of the class and
07:08 - then use the function that you want
07:10 - dot round for example so that's the
07:12 - benefit of
07:13 - static modifiers it creates a single
07:15 - copy of
07:16 - a member a variable a method or even an
07:19 - inner class 2
07:20 - and all instances of that class have to
07:23 - share
07:24 - that one static member and if you need
07:26 - to access that static member
07:28 - you use the name of the class itself so
07:31 - that's the basics of the static keyword
07:34 - modifier if you would like a copy of all
07:35 - this code
07:36 - i will post all of this in the comments
07:38 - down below but yeah that's how to use
07:40 - the static modifier
07:41 - in java hey you yeah i'm talking to you
07:45 - if you learn something new then you can
07:47 - help me
07:48 - help you in three easy steps by smashing
07:51 - that like button
07:53 - drop a comment down below and subscribe
07:55 - if you'd like to become a fellow bro
07:58 - [Music]
08:17 - you

Cleaned transcript:

hey how's it going everybody it's your bro hope you're doing well and in this video i'm going to teach you guys how the static keyword modifier works in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running all right guys and gals i'm going to be explaining the static keyword modifier this is a keyword modifier that can be applied to a variable a method or even classes but that's a separate video so anything that is static is also known as a static member and a good way of thinking about this is that the class that contains that static member now owns that member whether it's a variable or a method so anything that the class owns is shared by all instances of that class meaning if we create objects from this class they all have to share this one variable or method there is only one copy so let me explain this with an example i have a class called friend and we're going to be constructing some friend objects so i have the constructor and one parameter set up where we have to send in a name so let's create a static variable called number of friends so all instances of the friend class have to share this one variable so we use the static keyword modifier then the data type of the variable and let's say this is an integer and this will be called number of friends and if we were to display this system.out.printline now this is owned by the class itself so we do not need to create a friend object we can just type in the name of the class friend followed by what we're trying to access number of friends and i'm using eclipse you can see here that i have this little red s next to this variable that shows that this is a static variable and if we were to print the number of friends that we have it's unfortunately zero so let's create some friends so let's create one friend object so friend let's call him friend one for the instance name equals new friend and assign a friend name of baby spongebob because that's the first thing i thought of and then within the constructor let's increment the amount of friends that we have so after everything is done we'll add one to the number of friends that we have so we now have one friend now let's create another friend the name of this instance will be friend two and we'll pass in a name of patrick and now the number of friends that we have is two so both friend 1 and friend 2 are sharing the same number of friends variable because there is only a single copy and the class itself owns the static member and if we were to create another friend guess what's gonna happen friend three the name this time will be squidward and we now have three friends now it's entirely possible to access a static variable using an object instance name itself so let's replace friend with friend one so it is possible to access this static variable using the named instance of an object from this class but it's not recommended and you can see here that there's a warning the static field friend.number of friends should be accessed in a static way so it is best practice to type in the name of the class that owns the static member followed by the static member that you're trying to access so this will display the number of friends that we have and since there is only one copy all of these instances of the friend class are forced to share this static member so what do you think would happen if we removed the static modifier from this variable well for one we can no longer access this variable in a static way so you can see that it says cannot make a static reference to the nonstatic field friend dot number of friends so each of these friend objects now has their very own copy of the number of friends variable and in order to display one of these copies of the number of friends variable we would type in the name of the instance of this class for example friend one and their own number of friends is one same thing goes for friend two as well as friend three so if we change this back to static we can make a static reference to this static variable and this will display the total amount of friends that we have created from this class which is three and not only can you apply the static keyword modifier to a variable but you can also apply it to a method as well so let's create a static method that returns the amount of friends that we have within a message so let's use the static keyword modifier and then the return type is void and the name will be display friends and within this method we'll just have a print line statement so system.out.printline you have plus number of friends plus friends within a string so we no longer need this line now the preferred way of calling this method is by the class name and not the name of one of its instances so if we want to call this method this static method of the french class we're going to type the name of the french class and not one of these instances dot and then the method that we want to call and you can see that we have a static method called display friends and when we call this method it's going to display our message you have three friends and then if we created another friend for example like sandy and this will be friend four and we call this method we now have four friends now a good example of a static method is the round method of the math class so we type in the name of the math class this is an unrelated example by the way dot round and you can see that this is a static method and let's take a look at the math class so let's look for round okay here is one copy of this method and you can see that it's a static method so we type in the name of the math class like it wouldn't make sense to create a map object like math math equals new math right it's much more simple just to type the name of the class and then use the function that you want dot round for example so that's the benefit of static modifiers it creates a single copy of a member a variable a method or even an inner class 2 and all instances of that class have to share that one static member and if you need to access that static member you use the name of the class itself so that's the basics of the static keyword modifier if you would like a copy of all this code i will post all of this in the comments down below but yeah that's how to use the static modifier in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
