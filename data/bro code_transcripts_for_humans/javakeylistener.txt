With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro here hope you're doing well and in
00:03 - this video i'm going to teach you guys
00:04 - how the key listener interface works in
00:06 - java so
00:07 - sit back relax and enjoy the show
00:11 - if you find this video helpful please
00:13 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - okay everybody let's get started now
00:21 - within my project folder i have
00:23 - two classes one class called main and it
00:25 - contains an instance of my other class
00:27 - called
00:28 - my frame my frame extends jframe so it
00:31 - behaves exactly like a jframe
00:33 - and within the constructor for my frame
00:35 - for this class
00:37 - i have four lines of code this dot set
00:39 - default close operation jframe makes it
00:41 - on close
00:42 - i'm using a size of 500 by 500 this next
00:45 - part's important i'm using
00:46 - no layout manager this dot set layout is
00:49 - set to null
00:50 - because we're going to be manually
00:52 - moving components within the frame
00:54 - by using some keystrokes and lastly this
00:56 - dot set visible is set to true
00:58 - one of a few ways in which you can use a
01:00 - key listener interface
01:02 - is just to add that after the class
01:04 - definition
01:05 - my frame extends jframe implements the
01:08 - key
01:09 - listener interface and with interfaces
01:11 - you need to add any unimplemented
01:13 - methods
01:14 - and for key listeners there's currently
01:16 - three key typed
01:17 - key pressed and key released and in just
01:20 - a moment i'll explain the difference
01:21 - between the three
01:22 - but we need to add a key listener to
01:24 - this frame so we can type in the name of
01:26 - the frame
01:27 - which is just this add key
01:30 - listener and since we're implementing a
01:33 - key listener interface
01:34 - we can simply just pass in this so
01:38 - this frame will now respond to key
01:40 - events
01:41 - and we have key types key pressed and
01:44 - key released
01:45 - and let me explain the difference
01:46 - between these three i've added just a
01:48 - few short descriptions underneath each
01:50 - of these methods
01:51 - let's begin with key typed key typed is
01:53 - invoked when a key is typed
01:55 - this uses a key chart or key character
01:58 - it gives us a character output depending
02:01 - on the key that is pressed
02:02 - key pressed is invoked when a physical
02:05 - key is pressed down
02:06 - this uses a key code it gives us an
02:09 - integer number depending on the number
02:11 - of the button that is pressed down
02:13 - each button on your keyboard has an
02:14 - associated number and
02:16 - key code gives us the number of the
02:18 - button and key released is fairly simple
02:20 - it's called whenever a button is
02:22 - released so let's actually display what
02:24 - the difference between a key char and
02:26 - key code is so within our key release
02:28 - method this is going to be called
02:30 - whenever we release a button
02:32 - so let's actually display some key
02:34 - characters as well as some key codes so
02:36 - let's begin with some key characters
02:38 - so let's add a print line that says
02:42 - u released
02:46 - key character and we can get
02:50 - the key character of this event by
02:52 - typing e dot
02:53 - get key char
02:58 - and let's try this so i'm going to press
03:02 - q and it says your released key
03:04 - character q
03:05 - w e r t y
03:09 - one two three four five now you can
03:12 - actually
03:13 - use capital letters so i'm going to hold
03:15 - down shift and type in
03:16 - q q-w-e-r-t-y
03:20 - so those are key characters now key code
03:23 - is the number of the button you released
03:26 - key code and this is e
03:30 - dot get key code so each of these
03:33 - buttons
03:34 - has a number
03:37 - actually let me turn this line into a
03:39 - comment for now
03:41 - so i'm going to type in q and the number
03:44 - of the button
03:45 - of the q button is 81. w
03:48 - is 87 e is 69
03:51 - r is 82. t is 84 and y is 89.
03:56 - so lowercase q is 81 but uppercase q is
04:00 - also 81 because i'm holding down the
04:01 - same button
04:02 - and 16 is shift and i just released it
04:05 - so that's why this was triggered
04:07 - so let's actually display these together
04:08 - now
04:12 - so q the button that contains the q
04:15 - symbol produces a character a key
04:18 - character of q
04:19 - and the button number the key code is
04:22 - 81.
04:23 - now if i were to hold down shift and
04:25 - then press the same button
04:27 - this is producing a different key
04:28 - character capital q
04:30 - but the key code is still the same
04:32 - because it's still the same button
04:34 - so that's the difference between a key
04:35 - character and a key code
04:37 - and then i'm still holding down shift if
04:38 - i were to release it it's going to give
04:40 - us the
04:41 - key character in the key code well shift
04:43 - doesn't produce any key characters
04:45 - that's why it's confused
04:46 - but it has a certain key code of 16
04:50 - and what we're going to be doing in this
04:52 - video is creating a simple label and
04:54 - we'll move the label around
04:55 - the frame by using either key typed or
04:58 - key pressed
04:59 - so let's declare a label and then define
05:01 - it
05:02 - so jlabel and let's call this label and
05:05 - within the constructor
05:06 - let's instantiate this label label
05:10 - equals new j label
05:15 - and let's set the bounds for this label
05:17 - label dot
05:18 - set bounds we're setting the bounds
05:20 - since we're using no
05:21 - layout manager let's say we want this to
05:24 - start in the top left corner of the
05:25 - frame that is where
05:26 - x is zero y is zero let's make the width
05:29 - 100 and the height 100
05:32 - and let's set a background color label
05:35 - dot
05:36 - set background why not
05:39 - red i guess
05:42 - and in order to display the background
05:44 - color we need to
05:45 - label dot set opaque and set this to
05:48 - true
05:49 - because the background color doesn't
05:50 - like to display if you don't set the
05:53 - opacity set opaque to true all right and
05:56 - then we need to add this label to the
05:58 - frame
05:58 - this dot add we're adding our label
06:03 - and we should have a simple label in the
06:06 - top left corner
06:07 - now this is our label we're going to
06:09 - move this label around
06:11 - the frame depending on the key that we
06:13 - press or the key that we type
06:15 - let's begin by filling in the key typed
06:17 - method we can evaluate
06:19 - the key character that is being produced
06:22 - and
06:22 - this would be best by using a switch you
06:25 - could write this with a bunch of if
06:26 - statements but it's not as efficient so
06:28 - let's use a switch
06:29 - and what we're going to be passing into
06:31 - the switch to examine
06:32 - is e that get key character this will
06:35 - produce
06:35 - a character and then we can use the
06:37 - switch to determine
06:39 - what character is being used so let's
06:41 - set different cases
06:42 - let's have a case for a
06:46 - a to move to the left w to move up s to
06:49 - move down and d
06:50 - to move right so if the key character
06:53 - that is being produced is a
06:55 - if somebody types in the character a we
06:57 - want to move our label to the left
06:59 - and one way in which we can do that is
07:01 - by using the name of our label
07:03 - label dot set location and we pass in
07:06 - some coordinates some new coordinates of
07:08 - where we want to place this label
07:10 - on the y axis we want to keep this the
07:12 - same so we can use
07:14 - label dot get y
07:18 - and we're going to do the same thing for
07:20 - x but we're going to adjust it slightly
07:23 - label dot get x
07:28 - but if we want to move to the left we
07:29 - want to subtract
07:31 - a number from this let's say just one
07:33 - pixel we'll keep this small
07:35 - and let's try this
07:38 - so we have our label if i were to press
07:41 - a
07:42 - this is slowly moving to the left but we
07:45 - need to set this for the other
07:46 - directions as well
07:48 - so i'm going to add a break after this
07:50 - case
07:51 - and i'm just going to indent this
07:53 - slightly
07:55 - just so it's easier to read so let's
07:56 - have a case for
07:58 - ws and d so
08:01 - case w we want
08:05 - x to stay the same but we want to move
08:07 - up so we subtract
08:10 - a number from y
08:13 - and then we need s and d
08:18 - s will move down so this is
08:21 - plus one and then x stays the same and
08:24 - lastly
08:26 - d
08:31 - x will just add one and y we will keep
08:34 - the same
08:35 - and now we should be able to move up
08:37 - down left and right
08:40 - down right
08:43 - up left so this is moving fairly slow we
08:47 - can actually increase the amount of
08:49 - pixels this is moving after
08:50 - each key character so let's change this
08:53 - from one to ten
08:54 - and this is going to be more drastic
09:01 - all right this is moving much faster now
09:04 - but yeah you get the idea
09:05 - now let's do the same thing but use the
09:08 - arrow keys on the keyboard
09:09 - the arrow keys do not produce a key
09:11 - character
09:12 - but you can use key pressed for this so
09:15 - let's actually
09:16 - copy the switch that we have and paste
09:19 - it within here
09:20 - and this time we're going to be using
09:22 - the keycode
09:25 - so let's pass in the keycode underneath
09:28 - keypressed
09:30 - and the case will be actually we need to
09:32 - see what these buttons are first
09:36 - okay so left is 37
09:39 - up is 38 down is 40 and right is 39
09:45 - so we're going to pass in or use these
09:47 - numbers
09:48 - for the cases so let's begin with left
09:52 - that is 37
09:55 - 37 we're going to be moving to the left
09:58 - minus 10 pixels
10:02 - case 38 we're going to be moving
10:05 - up by 10 pixels by 10.
10:09 - 39 is down
10:12 - actually that's right uh so
10:16 - we're going to move to the right by 10
10:21 - and then 40 should be down
10:26 - and this is x is going to be the same
10:30 - and y is plus 10 all right
10:34 - i'm not going to use wasd i'm using the
10:37 - arrow keys on my keyboard so down
10:40 - right up and then left
10:45 - now i have a special treat to show you
10:47 - guys before you go
10:48 - instead of moving our boring red label
10:51 - on the screen let's move an image i have
10:55 - an image of a rocket
10:57 - that i want to use in place of this red
10:59 - square
11:00 - so i'm going to add this icon to the
11:02 - label but first we need to create an
11:04 - icon
11:04 - so if you want feel free to pause the
11:06 - video and download an image that you
11:07 - want to use
11:08 - so i'm going to create an image icon
11:10 - we'll call this icon
11:12 - first let's declare it and then within
11:13 - the constructor we'll instantiate it
11:16 - icon equals new image
11:21 - icon and then i'm going to list either
11:23 - the file path or the file location
11:25 - since this is within my project folder i
11:27 - can just list the file name
11:29 - and that is rocket.png
11:32 - and i am not going to use the background
11:34 - color and i am not going to
11:36 - set this to opaque i'm going to add this
11:39 - icon to the label
11:40 - label dot set icon and then i'm going to
11:43 - pass in
11:44 - my icon that i want to use
11:47 - and now i have a rocket ship on here
11:51 - and i'm going to change the background
11:52 - color because why not
11:54 - so to change the background color of the
11:58 - frame that is
11:59 - this dot get content pane
12:03 - dot set background and we'll just pass
12:06 - in color
12:07 - dot black to represent outer space
12:11 - and now we have the very beginning of a
12:14 - simple game
12:16 - so maybe you can do like invaders or
12:17 - something where you can move your
12:19 - character left and right and dodge
12:20 - bullets or something
12:22 - but yeah i just wanted to show you guys
12:23 - that before you go so that's the basics
12:26 - of the key listener interface if you
12:28 - want a copy of all this code i'll post
12:29 - all of this in the comments down below
12:31 - but yeah that's the basics of the key
12:33 - listener interface in java
12:36 - hey you yeah i'm talking to you if you
12:39 - learn something new
12:40 - then you can help me help you in three
12:43 - easy steps
12:44 - by smashing that like button drop a
12:46 - comment down below
12:47 - and subscribe if you'd like to become a
12:49 - fellow bro
12:55 - [Music]
13:10 - you

Cleaned transcript:

hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how the key listener interface works in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running okay everybody let's get started now within my project folder i have two classes one class called main and it contains an instance of my other class called my frame my frame extends jframe so it behaves exactly like a jframe and within the constructor for my frame for this class i have four lines of code this dot set default close operation jframe makes it on close i'm using a size of 500 by 500 this next part's important i'm using no layout manager this dot set layout is set to null because we're going to be manually moving components within the frame by using some keystrokes and lastly this dot set visible is set to true one of a few ways in which you can use a key listener interface is just to add that after the class definition my frame extends jframe implements the key listener interface and with interfaces you need to add any unimplemented methods and for key listeners there's currently three key typed key pressed and key released and in just a moment i'll explain the difference between the three but we need to add a key listener to this frame so we can type in the name of the frame which is just this add key listener and since we're implementing a key listener interface we can simply just pass in this so this frame will now respond to key events and we have key types key pressed and key released and let me explain the difference between these three i've added just a few short descriptions underneath each of these methods let's begin with key typed key typed is invoked when a key is typed this uses a key chart or key character it gives us a character output depending on the key that is pressed key pressed is invoked when a physical key is pressed down this uses a key code it gives us an integer number depending on the number of the button that is pressed down each button on your keyboard has an associated number and key code gives us the number of the button and key released is fairly simple it's called whenever a button is released so let's actually display what the difference between a key char and key code is so within our key release method this is going to be called whenever we release a button so let's actually display some key characters as well as some key codes so let's begin with some key characters so let's add a print line that says u released key character and we can get the key character of this event by typing e dot get key char and let's try this so i'm going to press q and it says your released key character q w e r t y one two three four five now you can actually use capital letters so i'm going to hold down shift and type in q qwerty so those are key characters now key code is the number of the button you released key code and this is e dot get key code so each of these buttons has a number actually let me turn this line into a comment for now so i'm going to type in q and the number of the button of the q button is 81. w is 87 e is 69 r is 82. t is 84 and y is 89. so lowercase q is 81 but uppercase q is also 81 because i'm holding down the same button and 16 is shift and i just released it so that's why this was triggered so let's actually display these together now so q the button that contains the q symbol produces a character a key character of q and the button number the key code is 81. now if i were to hold down shift and then press the same button this is producing a different key character capital q but the key code is still the same because it's still the same button so that's the difference between a key character and a key code and then i'm still holding down shift if i were to release it it's going to give us the key character in the key code well shift doesn't produce any key characters that's why it's confused but it has a certain key code of 16 and what we're going to be doing in this video is creating a simple label and we'll move the label around the frame by using either key typed or key pressed so let's declare a label and then define it so jlabel and let's call this label and within the constructor let's instantiate this label label equals new j label and let's set the bounds for this label label dot set bounds we're setting the bounds since we're using no layout manager let's say we want this to start in the top left corner of the frame that is where x is zero y is zero let's make the width 100 and the height 100 and let's set a background color label dot set background why not red i guess and in order to display the background color we need to label dot set opaque and set this to true because the background color doesn't like to display if you don't set the opacity set opaque to true all right and then we need to add this label to the frame this dot add we're adding our label and we should have a simple label in the top left corner now this is our label we're going to move this label around the frame depending on the key that we press or the key that we type let's begin by filling in the key typed method we can evaluate the key character that is being produced and this would be best by using a switch you could write this with a bunch of if statements but it's not as efficient so let's use a switch and what we're going to be passing into the switch to examine is e that get key character this will produce a character and then we can use the switch to determine what character is being used so let's set different cases let's have a case for a a to move to the left w to move up s to move down and d to move right so if the key character that is being produced is a if somebody types in the character a we want to move our label to the left and one way in which we can do that is by using the name of our label label dot set location and we pass in some coordinates some new coordinates of where we want to place this label on the y axis we want to keep this the same so we can use label dot get y and we're going to do the same thing for x but we're going to adjust it slightly label dot get x but if we want to move to the left we want to subtract a number from this let's say just one pixel we'll keep this small and let's try this so we have our label if i were to press a this is slowly moving to the left but we need to set this for the other directions as well so i'm going to add a break after this case and i'm just going to indent this slightly just so it's easier to read so let's have a case for ws and d so case w we want x to stay the same but we want to move up so we subtract a number from y and then we need s and d s will move down so this is plus one and then x stays the same and lastly d x will just add one and y we will keep the same and now we should be able to move up down left and right down right up left so this is moving fairly slow we can actually increase the amount of pixels this is moving after each key character so let's change this from one to ten and this is going to be more drastic all right this is moving much faster now but yeah you get the idea now let's do the same thing but use the arrow keys on the keyboard the arrow keys do not produce a key character but you can use key pressed for this so let's actually copy the switch that we have and paste it within here and this time we're going to be using the keycode so let's pass in the keycode underneath keypressed and the case will be actually we need to see what these buttons are first okay so left is 37 up is 38 down is 40 and right is 39 so we're going to pass in or use these numbers for the cases so let's begin with left that is 37 37 we're going to be moving to the left minus 10 pixels case 38 we're going to be moving up by 10 pixels by 10. 39 is down actually that's right uh so we're going to move to the right by 10 and then 40 should be down and this is x is going to be the same and y is plus 10 all right i'm not going to use wasd i'm using the arrow keys on my keyboard so down right up and then left now i have a special treat to show you guys before you go instead of moving our boring red label on the screen let's move an image i have an image of a rocket that i want to use in place of this red square so i'm going to add this icon to the label but first we need to create an icon so if you want feel free to pause the video and download an image that you want to use so i'm going to create an image icon we'll call this icon first let's declare it and then within the constructor we'll instantiate it icon equals new image icon and then i'm going to list either the file path or the file location since this is within my project folder i can just list the file name and that is rocket.png and i am not going to use the background color and i am not going to set this to opaque i'm going to add this icon to the label label dot set icon and then i'm going to pass in my icon that i want to use and now i have a rocket ship on here and i'm going to change the background color because why not so to change the background color of the frame that is this dot get content pane dot set background and we'll just pass in color dot black to represent outer space and now we have the very beginning of a simple game so maybe you can do like invaders or something where you can move your character left and right and dodge bullets or something but yeah i just wanted to show you guys that before you go so that's the basics of the key listener interface if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of the key listener interface in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
