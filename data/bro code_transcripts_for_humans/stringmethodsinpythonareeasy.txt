With timestamps:

00:00 - hey everybody in this topic I'm going to
00:02 - cover a few useful string Methods that
00:04 - you may be interested in then at the end
00:06 - of this video we will work on an
00:07 - exercise where we will validate some
00:09 - user input as we know a string is just a
00:12 - series of characters
00:14 - let's ask a user for their full name
00:16 - name equals input
00:20 - enter your full name
00:27 - the first method I'll show you well
00:28 - technically this is a function the
00:30 - length function will give us the length
00:33 - of a string how many characters is it we
00:36 - will find the length of our variable
00:37 - name after the user types in some input
00:40 - this function returns an integer I'll
00:43 - store that result within a variable uh
00:46 - let's just say result
00:47 - then I will print whatever the result is
00:53 - why don't you go ahead and type in your
00:54 - full name
00:58 - the length of this string in my example
01:01 - is eight characters that does include
01:03 - spaces too one two three four five six
01:07 - seven eight if you ever need the length
01:09 - of a string there is the length function
01:11 - let's move on if we were to type our
01:14 - variable name followed by a DOT we have
01:17 - access to a whole bunch of different
01:19 - methods we have the find method the find
01:22 - method will return the first occurrence
01:25 - of a given character the position let's
01:28 - find any spaces
01:31 - I'll store the results within a variable
01:33 - named result
01:37 - I will type in my full name
01:40 - the first occurrence of a space that's
01:43 - what we set is at position three when
01:46 - working with indexes we always begin
01:47 - with zero this first character would
01:50 - have an index of zero then one two three
01:53 - that's why defined method returned three
01:56 - in place of four let's find the first
01:58 - occurrence of a capital B
02:03 - see it's zero how about
02:06 - oh
02:10 - for me that would be two so remember
02:12 - it's always the first occurrence if you
02:15 - need the last occurrence there is a
02:17 - different method
02:19 - which is R find
02:22 - R meaning reverse we will find the last
02:25 - occurrence of an o
02:31 - that has a position of five zero one two
02:35 - three four five
02:37 - if python isn't able to locate a given
02:39 - character it will return negative one
02:41 - let's find any I don't know uh cues
02:50 - python could not find any lowercase cues
02:52 - the R5 method will return negative one
02:55 - if there are no results we can
02:57 - capitalize the first letter in a string
02:59 - by using the capitalize function
03:01 - name dot capitalize
03:08 - this method will return a string I will
03:11 - reassign that to name
03:13 - then we will print our name capitalized
03:17 - I'll be sure to type in my name all
03:19 - lowercase
03:21 - since this is all one string only the
03:24 - first letter is capitalized even though
03:26 - I'm including a first and last name
03:29 - the upper method will take all of the
03:31 - characters in a string then make them
03:33 - all uppercase
03:35 - follow your variable that contains a
03:37 - string followed by Dot Upper then I will
03:40 - reassign the result to my name variable
03:43 - to overwrite it
03:45 - add to your full name
03:48 - all of the letters are now uppercase
03:51 - there is also lower to make all of the
03:53 - characters lowercase
03:55 - name equals name dot lower
04:03 - yep all the characters are lowercase now
04:05 - the is digit method will return either
04:09 - true or false if a string contains only
04:12 - digits the result is a Boolean true or
04:15 - false I'll store that within a variable
04:18 - named result then print result
04:22 - so if I were to type in my full name
04:25 - is digit returns false there are not
04:28 - only digits within that string if my
04:31 - string was some combination of
04:33 - alphabetical characters and numbers
04:35 - this method will still return false it
04:38 - only returns true if my string only
04:41 - contains digits
04:43 - I'll just type in one two three see
04:45 - that's true that is the is digit method
04:50 - otherwise we have is Alpha
04:53 - name dot is Alpha
04:57 - the is Alpha method will return a
04:59 - Boolean true or false depending if a
05:03 - string contains only alphabetical
05:04 - characters I'll type in my full name
05:08 - so the reason that this came up false is
05:10 - because my full name contains a space
05:12 - which is not an alphabetical character
05:17 - if I typed in my full name excluding any
05:19 - spaces this would now be true is Alpha
05:23 - would also return false if my name
05:25 - contained any sort of digits bro one two
05:27 - three and that is also false
05:30 - that is the is Alpha method
05:34 - now let's ask for a phone number
05:38 - phone
05:39 - number
05:40 - equals input
05:43 - enter your phone number
05:48 - with the phone number they typically
05:49 - contain dashes let's count how many
05:51 - dashes are going to be in somebody's
05:53 - phone number
05:55 - phone number
05:58 - Dot
06:00 - count method let's count the amount of
06:03 - dashes
06:04 - so place a character within the account
06:06 - method this method will return an
06:09 - integer let's store that within a
06:11 - variable
06:12 - result equals phone number dot count
06:14 - method
06:16 - so type in some phone number
06:19 - 1-234-567-8901
06:25 - we have three dashes within the string
06:28 - one two three that is the count method
06:32 - we can count how many characters are
06:34 - within a string
06:37 - we also have the replace method honestly
06:39 - the replace method is probably one of
06:42 - the most useful methods of strings we
06:44 - can replace any occurrence with one
06:46 - character with another
06:47 - replace let's replace any dashes
06:51 - with
06:53 - maybe a space
06:54 - this method will return a new string I'm
06:56 - going to reassign this to our phone
06:59 - number variable
07:00 - then print the phone number
07:03 - add to your phone number 1-234-567-8901
07:10 - so here's my new phone number but we've
07:12 - replaced all of the dashes with spaces
07:15 - even better yet we could eliminate all
07:17 - the dashes completely by replacing the
07:20 - dashes or another character with an
07:23 - empty string
07:25 - 1-234-567-8901
07:31 - here's our new phone number without any
07:33 - dashes we've replaced all dashes with an
07:36 - empty string no characters if you would
07:39 - like a comprehensive list of all of the
07:40 - string Methods available to you you can
07:43 - use the help function type in the data
07:45 - type Str meaning string then I will
07:48 - print whatever the result is
07:55 - here's a bunch of methods you might be
07:57 - interested in in the future capitalize
07:59 - case fold Center count
08:01 - and code ends with just to name a few
08:05 - all right everybody here's an exercise
08:07 - for you we will validate some user input
08:10 - we would like a user to enter in a valid
08:14 - username however there's a couple rules
08:17 - the username can be no more than 12
08:19 - characters long
08:21 - the username must not contain any spaces
08:24 - and the username must not contain any
08:27 - digits
08:29 - let's assign a variable named username
08:32 - equals input
08:35 - enter a user name
08:40 - first let's check to see if our user
08:42 - input is more than 12 characters long we
08:45 - can do that using the length function we
08:48 - will find the length of our username
08:52 - the length function returns an integer
08:54 - let's check to see if the length of our
08:57 - username is greater than 12 characters
09:00 - if it is we'll print a message
09:05 - your username
09:07 - can't be more than 12 characters
09:14 - else
09:16 - we will print using an upstring
09:20 - welcome whatever our username variable
09:23 - is
09:25 - let's try it I'll type in my first name
09:28 - last name
09:30 - then add a whole bunch of characters
09:31 - afterwards
09:34 - your username can't be more than 12
09:36 - characters
09:38 - let's type in something that's under 12
09:40 - characters
09:42 - yep and that appears to work
09:44 - okay so we have accomplished task number
09:47 - one our username can't be more than 12
09:50 - characters next our username must not
09:54 - contain any spaces
09:57 - we can use the find method of a string
10:00 - username dot find we will find any
10:04 - spaces that's a character
10:07 - if no spaces are found this method will
10:10 - return negative one
10:12 - using an else if statement
10:15 - I'll add not
10:18 - if the find method of username
10:23 - equals negative one
10:27 - if the result is not negative one
10:30 - meaning we found a space we will print
10:34 - your username
10:37 - can't contain spaces
10:42 - I'll type in my first and last name
10:45 - you might need to think of something
10:46 - that's underneath 12 characters
10:49 - your username can't contain spaces so we
10:52 - have accomplished rule number two
10:55 - three username must not contain digits
10:58 - we can use the is Alpha method of
11:01 - strings
11:03 - the is Alpha method returns a Boolean if
11:06 - a string only contains alphabetical
11:08 - characters
11:09 - so let's copy that
11:11 - I'll add another else if statement and
11:14 - not
11:15 - username is Alpha
11:20 - then we will print
11:23 - your username
11:26 - can't
11:27 - contain numbers
11:30 - I guess technically is Alpha would check
11:33 - for spaces too but I'd rather have that
11:35 - be handled within a different if
11:37 - statement
11:39 - all right I'll type in
11:41 - a username I'll include some digits
11:45 - your username can't contain numbers
11:48 - all right I think we've accomplished
11:50 - this
11:51 - let me make up a username following
11:53 - these three rules
11:55 - yep
11:56 - it seems to check out all right
11:58 - everybody and that is a few useful
12:00 - string Methods that you may be
12:02 - interested in

Cleaned transcript:

hey everybody in this topic I'm going to cover a few useful string Methods that you may be interested in then at the end of this video we will work on an exercise where we will validate some user input as we know a string is just a series of characters let's ask a user for their full name name equals input enter your full name the first method I'll show you well technically this is a function the length function will give us the length of a string how many characters is it we will find the length of our variable name after the user types in some input this function returns an integer I'll store that result within a variable uh let's just say result then I will print whatever the result is why don't you go ahead and type in your full name the length of this string in my example is eight characters that does include spaces too one two three four five six seven eight if you ever need the length of a string there is the length function let's move on if we were to type our variable name followed by a DOT we have access to a whole bunch of different methods we have the find method the find method will return the first occurrence of a given character the position let's find any spaces I'll store the results within a variable named result I will type in my full name the first occurrence of a space that's what we set is at position three when working with indexes we always begin with zero this first character would have an index of zero then one two three that's why defined method returned three in place of four let's find the first occurrence of a capital B see it's zero how about oh for me that would be two so remember it's always the first occurrence if you need the last occurrence there is a different method which is R find R meaning reverse we will find the last occurrence of an o that has a position of five zero one two three four five if python isn't able to locate a given character it will return negative one let's find any I don't know uh cues python could not find any lowercase cues the R5 method will return negative one if there are no results we can capitalize the first letter in a string by using the capitalize function name dot capitalize this method will return a string I will reassign that to name then we will print our name capitalized I'll be sure to type in my name all lowercase since this is all one string only the first letter is capitalized even though I'm including a first and last name the upper method will take all of the characters in a string then make them all uppercase follow your variable that contains a string followed by Dot Upper then I will reassign the result to my name variable to overwrite it add to your full name all of the letters are now uppercase there is also lower to make all of the characters lowercase name equals name dot lower yep all the characters are lowercase now the is digit method will return either true or false if a string contains only digits the result is a Boolean true or false I'll store that within a variable named result then print result so if I were to type in my full name is digit returns false there are not only digits within that string if my string was some combination of alphabetical characters and numbers this method will still return false it only returns true if my string only contains digits I'll just type in one two three see that's true that is the is digit method otherwise we have is Alpha name dot is Alpha the is Alpha method will return a Boolean true or false depending if a string contains only alphabetical characters I'll type in my full name so the reason that this came up false is because my full name contains a space which is not an alphabetical character if I typed in my full name excluding any spaces this would now be true is Alpha would also return false if my name contained any sort of digits bro one two three and that is also false that is the is Alpha method now let's ask for a phone number phone number equals input enter your phone number with the phone number they typically contain dashes let's count how many dashes are going to be in somebody's phone number phone number Dot count method let's count the amount of dashes so place a character within the account method this method will return an integer let's store that within a variable result equals phone number dot count method so type in some phone number 12345678901 we have three dashes within the string one two three that is the count method we can count how many characters are within a string we also have the replace method honestly the replace method is probably one of the most useful methods of strings we can replace any occurrence with one character with another replace let's replace any dashes with maybe a space this method will return a new string I'm going to reassign this to our phone number variable then print the phone number add to your phone number 12345678901 so here's my new phone number but we've replaced all of the dashes with spaces even better yet we could eliminate all the dashes completely by replacing the dashes or another character with an empty string 12345678901 here's our new phone number without any dashes we've replaced all dashes with an empty string no characters if you would like a comprehensive list of all of the string Methods available to you you can use the help function type in the data type Str meaning string then I will print whatever the result is here's a bunch of methods you might be interested in in the future capitalize case fold Center count and code ends with just to name a few all right everybody here's an exercise for you we will validate some user input we would like a user to enter in a valid username however there's a couple rules the username can be no more than 12 characters long the username must not contain any spaces and the username must not contain any digits let's assign a variable named username equals input enter a user name first let's check to see if our user input is more than 12 characters long we can do that using the length function we will find the length of our username the length function returns an integer let's check to see if the length of our username is greater than 12 characters if it is we'll print a message your username can't be more than 12 characters else we will print using an upstring welcome whatever our username variable is let's try it I'll type in my first name last name then add a whole bunch of characters afterwards your username can't be more than 12 characters let's type in something that's under 12 characters yep and that appears to work okay so we have accomplished task number one our username can't be more than 12 characters next our username must not contain any spaces we can use the find method of a string username dot find we will find any spaces that's a character if no spaces are found this method will return negative one using an else if statement I'll add not if the find method of username equals negative one if the result is not negative one meaning we found a space we will print your username can't contain spaces I'll type in my first and last name you might need to think of something that's underneath 12 characters your username can't contain spaces so we have accomplished rule number two three username must not contain digits we can use the is Alpha method of strings the is Alpha method returns a Boolean if a string only contains alphabetical characters so let's copy that I'll add another else if statement and not username is Alpha then we will print your username can't contain numbers I guess technically is Alpha would check for spaces too but I'd rather have that be handled within a different if statement all right I'll type in a username I'll include some digits your username can't contain numbers all right I think we've accomplished this let me make up a username following these three rules yep it seems to check out all right everybody and that is a few useful string Methods that you may be interested in
