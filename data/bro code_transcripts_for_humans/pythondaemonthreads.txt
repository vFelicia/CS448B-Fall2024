With timestamps:

00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm going to explain
00:05 - demon threads in python so
00:07 - sit back relax and enjoy the show
00:11 - okay so demon threads also pronounced as
00:15 - daemon threads a demon thread is a
00:17 - thread that runs in the background and
00:19 - they are normally not important for your
00:21 - program in order to run
00:22 - your program will not wait for demon
00:24 - threads to complete before exiting
00:27 - whereas non-demon threads they cannot
00:29 - normally be killed
00:31 - they will stay alive until their task is
00:33 - complete so
00:34 - a few common uses of demon threads would
00:36 - be
00:37 - background tasks garbage collection
00:39 - waiting for input
00:41 - or other long-running processes so
00:43 - here's an example of why demon threads
00:45 - would be useful
00:46 - let's say that we'll have two threads
00:48 - our main thread will be in charge of
00:50 - waiting around for some user input we'll
00:52 - ask
00:53 - do you wish to exit and in the
00:54 - background we'll have a timer going that
00:57 - will display how long
00:58 - somebody is logged in so let's create a
01:01 - function named
01:02 - timer and what we'll do is just display
01:06 - how long somebody's logged in so let's
01:08 - say we have a count variable
01:11 - while true we'll use
01:14 - the sleep function of the time module to
01:17 - sleep for approximately one second
01:19 - then we'll increment our count variable
01:21 - by one
01:22 - and we'll print a message so let's say
01:26 - logged in for
01:31 - count
01:35 - seconds and let's create a thread that
01:38 - will be in charge of this timer and run
01:40 - it in the background so let's say
01:41 - x equals threading
01:44 - dot thread the target will be our
01:47 - function
01:48 - of timer and we need to start this
01:50 - thread
01:51 - x dot start so our thread
01:54 - x will be in charge of our timer and run
01:57 - it concurrently
01:58 - while we're waiting for some user input
02:00 - our main thread will be in charge of
02:02 - waiting for this user input do you wish
02:04 - to exit now here's the issue of us using
02:07 - a
02:07 - non-demon thread for a background task
02:10 - such as a countdown timer
02:12 - so our main thread is in charge of
02:13 - waiting around for some user input
02:15 - and threadx or additional thread is in
02:18 - charge of running this countdown timer
02:20 - so if i wish to exit this program i'm
02:22 - just going to type
02:23 - okay and hit enter well my background
02:26 - timer is still going but my main thread
02:28 - is complete
02:29 - so i would like to exit this program but
02:32 - my program will not exit as long as
02:34 - there are non demon threads that are
02:37 - still alive we cannot normally
02:39 - close this program unless we do like a
02:40 - brute force you know close and exit of
02:42 - the program
02:44 - so we can turn this thread of
02:47 - x into a demon thread so that when we
02:49 - wish to exit the program when there are
02:51 - no more non-demon threads alive and to
02:54 - change a thread to a demon thread it's
02:56 - actually fairly easy when you create
02:58 - your thread you can set
02:59 - this flag of demon equal to true and
03:02 - that's it
03:03 - so when all non-demon threads have
03:05 - finished their tasks
03:06 - your program will complete and exit but
03:09 - if there are demon tasks
03:11 - running in the background they will be
03:12 - killed automatically so let's try this
03:14 - program again
03:15 - so do you wish to exit my program is
03:18 - going to continue running my demon
03:19 - thread is in charge of the timer and
03:21 - it's going to continue running until
03:23 - all non-demon threads have completed
03:25 - their tasks
03:26 - so once i type ok my program will finish
03:30 - running and my countdown timer will stop
03:33 - because all demons are killed when your
03:35 - program is finished running
03:37 - there's also two additional methods that
03:39 - you might be interested in
03:40 - you can use the set demon method
03:43 - of a thread and you can set it to false
03:45 - or true if you would like to change
03:47 - a thread to a non-demon or a demon
03:50 - however if your thread is currently
03:52 - running well you cannot actually change
03:54 - it
03:54 - from a non-demon thread to a demon
03:56 - thread while it's currently running
03:58 - so you would have to do that before you
04:00 - actually use the start function
04:02 - and you can also check to see if a
04:04 - thread is a demon or not by using the
04:06 - is daemon method this will return true
04:10 - or false so everybody in conclusion a
04:13 - demon thread is a thread that runs in
04:15 - the background and they're not important
04:17 - for your program in order to continue
04:18 - running
04:19 - your program will not wait for demon
04:21 - threads to complete before exiting the
04:23 - program
04:24 - whereas non-demon threads cannot
04:26 - normally be killed
04:28 - they will stay alive until their task is
04:30 - complete and demon threads are commonly
04:32 - used for
04:33 - background tasks garbage collection
04:35 - waiting around for
04:36 - input or other long running processes
04:39 - so if you would like a copy of this code
04:41 - i will post all of this to the comment
04:43 - section down below
04:44 - but yeah those are demon threads in
04:47 - python

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to explain demon threads in python so sit back relax and enjoy the show okay so demon threads also pronounced as daemon threads a demon thread is a thread that runs in the background and they are normally not important for your program in order to run your program will not wait for demon threads to complete before exiting whereas nondemon threads they cannot normally be killed they will stay alive until their task is complete so a few common uses of demon threads would be background tasks garbage collection waiting for input or other longrunning processes so here's an example of why demon threads would be useful let's say that we'll have two threads our main thread will be in charge of waiting around for some user input we'll ask do you wish to exit and in the background we'll have a timer going that will display how long somebody is logged in so let's create a function named timer and what we'll do is just display how long somebody's logged in so let's say we have a count variable while true we'll use the sleep function of the time module to sleep for approximately one second then we'll increment our count variable by one and we'll print a message so let's say logged in for count seconds and let's create a thread that will be in charge of this timer and run it in the background so let's say x equals threading dot thread the target will be our function of timer and we need to start this thread x dot start so our thread x will be in charge of our timer and run it concurrently while we're waiting for some user input our main thread will be in charge of waiting for this user input do you wish to exit now here's the issue of us using a nondemon thread for a background task such as a countdown timer so our main thread is in charge of waiting around for some user input and threadx or additional thread is in charge of running this countdown timer so if i wish to exit this program i'm just going to type okay and hit enter well my background timer is still going but my main thread is complete so i would like to exit this program but my program will not exit as long as there are non demon threads that are still alive we cannot normally close this program unless we do like a brute force you know close and exit of the program so we can turn this thread of x into a demon thread so that when we wish to exit the program when there are no more nondemon threads alive and to change a thread to a demon thread it's actually fairly easy when you create your thread you can set this flag of demon equal to true and that's it so when all nondemon threads have finished their tasks your program will complete and exit but if there are demon tasks running in the background they will be killed automatically so let's try this program again so do you wish to exit my program is going to continue running my demon thread is in charge of the timer and it's going to continue running until all nondemon threads have completed their tasks so once i type ok my program will finish running and my countdown timer will stop because all demons are killed when your program is finished running there's also two additional methods that you might be interested in you can use the set demon method of a thread and you can set it to false or true if you would like to change a thread to a nondemon or a demon however if your thread is currently running well you cannot actually change it from a nondemon thread to a demon thread while it's currently running so you would have to do that before you actually use the start function and you can also check to see if a thread is a demon or not by using the is daemon method this will return true or false so everybody in conclusion a demon thread is a thread that runs in the background and they're not important for your program in order to continue running your program will not wait for demon threads to complete before exiting the program whereas nondemon threads cannot normally be killed they will stay alive until their task is complete and demon threads are commonly used for background tasks garbage collection waiting around for input or other long running processes so if you would like a copy of this code i will post all of this to the comment section down below but yeah those are demon threads in python
