With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well and in today's
00:03 - video i'm going to show you how the zip
00:05 - function works in python so
00:07 - sit back relax and enjoy the show
00:12 - if you wouldn't mind please like comment
00:14 - and subscribe
00:15 - one like equals one prayer for the
00:17 - youtube algorithm
00:19 - all right ladies and gentlemen welcome
00:21 - back we're talking about the zip
00:22 - function today
00:23 - the zip function will aggregate elements
00:26 - from two or more iterables
00:28 - iterables are those things like lists
00:30 - tuples
00:31 - sets etc and the zip function will
00:34 - create a
00:34 - zip object with paired elements from
00:37 - each iterable
00:38 - stored in a tuple for each element
00:40 - within our zip object
00:42 - here's an example let's say that we have
00:44 - two different types of iterables
00:46 - i have a list of usernames and a few
00:49 - usernames within here are
00:50 - dude bro and mister and i have a
00:54 - tuple of passwords and i have some very
00:56 - secure passwords such
00:58 - as password abc123
01:01 - and guest what i would like to do is to
01:03 - zip elements from
01:04 - each iterable together so that they're
01:06 - in pairs and each pair is going to be
01:08 - stored as a tuple within
01:10 - a zip object and here's how we can do
01:13 - that let's say that we will create a zip
01:15 - object
01:16 - called users and we will use the zip
01:18 - function
01:19 - the zip function will take a varying
01:21 - amount of iterables
01:22 - we're going to pass in our usernames and
01:24 - passwords and zip them together
01:26 - so let's pass in usernames as well as
01:29 - passwords
01:30 - and now our zip object of users is
01:32 - actually iterable
01:33 - zip objects are iterable so we can use
01:35 - them within a for loop
01:36 - so let's type for i in users
01:40 - and print i
01:44 - and what we get is that we have a zip
01:46 - object
01:47 - of tuples and each tuple is storing each
01:50 - pair of elements from our
01:52 - two iterables now users is a
01:55 - zip object and if you don't believe me
01:57 - let me prove it i'm going to print
01:59 - the type of users and this will print
02:02 - that users is indeed a zip object
02:05 - but you can easily convert this to a
02:08 - different type of iterable by using a
02:10 - cast
02:10 - let's say that we would like to convert
02:12 - our zip object into a list
02:14 - so we'll surround the zip function with
02:16 - a cast to a list
02:18 - and now the data type of users is now a
02:21 - list
02:21 - what we have is a list of tuples and
02:24 - each tuple is storing a
02:26 - pair of elements from our two iterables
02:28 - of usernames and passwords
02:30 - now currently since we're passing in
02:32 - only two different iterables we can
02:34 - easily make this a dictionary
02:36 - so that these are key value pairs so
02:39 - let's cast our zip object as a
02:41 - dictionary
02:42 - and to display all of the elements
02:44 - within our dictionary all the key value
02:46 - pairs
02:46 - we're going to change our for loop to
02:48 - this for key value
02:50 - in users dot and we will use the
02:54 - items method print key
02:58 - comma value actually i think i'm going
03:01 - to separate each of these with a colon
03:03 - just to make it more readable
03:06 - and now when we zip these two intervals
03:08 - together
03:09 - we end up with a dictionary of usernames
03:12 - and passwords and the name of this
03:14 - dictionary is users
03:16 - now you're not limited to just two
03:18 - iterables you can add a third iterable
03:20 - or more
03:21 - so this time let's create a maybe a list
03:24 - a list of last login dates and i'll just
03:27 - call this
03:28 - login date equals and why not make a
03:31 - list
03:32 - and let's make up some dates let's say
03:34 - one one
03:35 - dash twenty twenty one
03:38 - one two dash twenty twenty one
03:42 - and one dash three 3-20
03:46 - 21 okay so let's create
03:50 - a zip object of users and we're going to
03:54 - zip
03:55 - usernames passwords and
04:01 - login date and let's iterate over this
04:06 - for i in users
04:10 - print i
04:14 - now we have a tuple for each element and
04:16 - instead of a pair we now
04:17 - have a trio i guess of all of the
04:21 - different elements
04:21 - from each iterable so in conclusion
04:24 - the zip function will aggregate elements
04:27 - from two or
04:28 - more iterables and create a zip object
04:30 - with
04:31 - paired or grouped together elements
04:33 - stored in a
04:34 - tuple for each element within our zip
04:37 - object
04:38 - so that is the zip function if you would
04:40 - like a copy of this code i will post
04:42 - this to the comment section down below
04:44 - and well yeah that's how the zip
04:46 - function works in python

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in today's video i'm going to show you how the zip function works in python so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm all right ladies and gentlemen welcome back we're talking about the zip function today the zip function will aggregate elements from two or more iterables iterables are those things like lists tuples sets etc and the zip function will create a zip object with paired elements from each iterable stored in a tuple for each element within our zip object here's an example let's say that we have two different types of iterables i have a list of usernames and a few usernames within here are dude bro and mister and i have a tuple of passwords and i have some very secure passwords such as password abc123 and guest what i would like to do is to zip elements from each iterable together so that they're in pairs and each pair is going to be stored as a tuple within a zip object and here's how we can do that let's say that we will create a zip object called users and we will use the zip function the zip function will take a varying amount of iterables we're going to pass in our usernames and passwords and zip them together so let's pass in usernames as well as passwords and now our zip object of users is actually iterable zip objects are iterable so we can use them within a for loop so let's type for i in users and print i and what we get is that we have a zip object of tuples and each tuple is storing each pair of elements from our two iterables now users is a zip object and if you don't believe me let me prove it i'm going to print the type of users and this will print that users is indeed a zip object but you can easily convert this to a different type of iterable by using a cast let's say that we would like to convert our zip object into a list so we'll surround the zip function with a cast to a list and now the data type of users is now a list what we have is a list of tuples and each tuple is storing a pair of elements from our two iterables of usernames and passwords now currently since we're passing in only two different iterables we can easily make this a dictionary so that these are key value pairs so let's cast our zip object as a dictionary and to display all of the elements within our dictionary all the key value pairs we're going to change our for loop to this for key value in users dot and we will use the items method print key comma value actually i think i'm going to separate each of these with a colon just to make it more readable and now when we zip these two intervals together we end up with a dictionary of usernames and passwords and the name of this dictionary is users now you're not limited to just two iterables you can add a third iterable or more so this time let's create a maybe a list a list of last login dates and i'll just call this login date equals and why not make a list and let's make up some dates let's say one one dash twenty twenty one one two dash twenty twenty one and one dash three 320 21 okay so let's create a zip object of users and we're going to zip usernames passwords and login date and let's iterate over this for i in users print i now we have a tuple for each element and instead of a pair we now have a trio i guess of all of the different elements from each iterable so in conclusion the zip function will aggregate elements from two or more iterables and create a zip object with paired or grouped together elements stored in a tuple for each element within our zip object so that is the zip function if you would like a copy of this code i will post this to the comment section down below and well yeah that's how the zip function works in python
