With timestamps:

00:00 - hey everybody in today's video I'm going
00:01 - to walk you through creating a to-do
00:03 - list app using react so sit back relax
00:06 - and enjoy the
00:09 - show all right let's do this everybody
00:11 - we'll need to create a new jsx file
00:13 - going to our source folder we will
00:15 - rightclick new file this component will
00:18 - be named too list.
00:21 - jsx this will be a function based
00:24 - component function to do list no
00:28 - parameters then let's be sure to export
00:30 - it because if I don't do it now I'm
00:32 - going to forget export default to do
00:36 - list we will be using the UST State hook
00:38 - we should import that
00:41 - import react use object destructuring I
00:45 - would like just the US state Hook from
00:48 - its location of
00:50 - react we do need to return something for
00:53 - now we're just going to return a
00:56 - fragment going back to our app component
00:58 - we need to import our to-do list
01:01 - component import to-do list from its
01:05 - relative file path do/ too list.
01:10 - jsx we will return one to-do list
01:14 - component and we are ready to move on
01:17 - within our to-do list component we will
01:19 - have two State
01:20 - variables const tasks tasks will be an
01:24 - array of strings we need a Setter
01:26 - function for tasks set tasks equal
01:29 - equals the use State hook the initial
01:33 - state of tasks is going to be an empty
01:35 - array but eventually we're going to
01:37 - populate this array with strings one
01:39 - string for each task to add and we will
01:43 - create a state variable for a new
01:47 - task new task is whatever we're
01:49 - currently editing with the text box we
01:51 - will be adding our new task to our array
01:54 - of tasks then we need a Setter function
01:56 - for new task set new
02:00 - task equals U State the initial state
02:04 - will be an empty string let's declare
02:07 - the functions we'll need throughout this
02:09 - program we will need a function to
02:11 - handle input change there will be one
02:15 - parameter and event this function is for
02:18 - our text box when we type in something
02:21 - we'll need a function to add a task
02:24 - function add task there will be no
02:28 - parameters function delete task there
02:32 - will be one parameter an
02:35 - index an index of the list item we would
02:38 - like to delete let me scroll down a
02:42 - function to move task up there is one
02:47 - parameter an index what is the index of
02:50 - the list item we would like to move up
02:52 - within our
02:53 - list and a function to move task down we
02:59 - will also accept an
03:00 - index okay and these are the functions
03:02 - we'll need until we fill these in I'm
03:05 - going to close these
03:08 - functions okay now we'll go to our
03:10 - return statement we have a lot of HTML
03:13 - elements to add we'll begin with a div
03:18 - element our div element will have a
03:21 - class
03:22 - name of to do
03:27 - list within this development we'll
03:29 - create an H1 element for a
03:31 - heading The Heading will be a to do
03:36 - list after this H1 element I'll create
03:40 - another div
03:41 - element within this div element I will
03:43 - create an input
03:45 - element this will be a self-closing tag
03:48 - just for readability I'm going to place
03:50 - each attribute on a new line we have a
03:53 - lot of attributes to write I will set
03:55 - the type of this input element to be
03:58 - text
04:00 - I'm going to zoom in so you can see it
04:02 - more
04:03 - easily I'll add a
04:06 - placeholder of enter a task dot dot dot
04:12 - enter a
04:13 - task I will set the value of this text
04:17 - box to be some JavaScript our new task
04:21 - State variable this
04:24 - one when we type within this input
04:27 - element we will use the onchain vent
04:30 - Handler equal to a callback to a
04:33 - JavaScript function a callback to handle
04:37 - input
04:39 - change we'll fill in this function since
04:41 - we're here going to handle input change
04:45 - we will use the setter for our new
04:47 - task access our event parameter access
04:51 - its Target access its value so when we
04:54 - type within the text box it should
04:57 - change e
05:00 - breakfast if we didn't set the new
05:03 - task and we type within the text box we
05:06 - don't see the text it doesn't change
05:08 - that's why we need this function so we
05:10 - can see the text when we write within
05:12 - the input element let's scroll back down
05:14 - to the bottom after our input element we
05:17 - will create a button
05:19 - element with text of add to add a task
05:24 - for the class name of the
05:25 - button we'll set the class name
05:28 - attribute of the button to be add button
05:32 - add-
05:33 - button I will set the onclick event
05:36 - handler equal to a JavaScript call back
05:41 - we will call the function of add
05:46 - task now temporarily until we apply some
05:49 - CSS I'll write a few tasks within our
05:51 - array just temporarily let's say our
05:54 - first task is to eat
05:58 - breakfast take a
06:03 - shower and walk the
06:08 - dog after our development we'll create
06:11 - an ordered list with a pair of O
06:14 - tags within this pair of O tags we'll be
06:17 - embedding some JavaScript we have a lot
06:19 - to write we're going to take all of our
06:22 - tasks and use the map method we will
06:25 - create a list item element for each task
06:28 - for each element with this this array
06:31 - we'll use the map method we're provided
06:33 - with two parameters the current element
06:36 - and the index of the current element but
06:39 - I'll rename this element parameter as
06:41 - task so it's more easily understandable
06:44 - within the map method we will use an
06:45 - arrow function what would we like to do
06:48 - with each task I'll put this on a new
06:50 - line we will create a list
06:53 - item a list item element So currently we
06:56 - have three list item elements now react
06:59 - wants to to add a key for each
07:02 - element so it can more easily keep track
07:05 - of each element with the opening list
07:08 - item tag I will set the key attribute
07:10 - equal to the current
07:13 - index within the list item element I
07:16 - will create a span element for some
07:20 - text the class name for this span
07:23 - element will be text this will be for
07:25 - the text of each list item
07:27 - element within the span element we will
07:30 - include the current task we have three
07:33 - tasks eat breakfast take a shower walk
07:37 - the dog after our span element we'll
07:40 - create a button element this button
07:42 - element will be for a delete button to
07:45 - delete this task this button will have a
07:48 - class
07:49 - name of
07:51 - delete dashb
07:54 - button I will set the onclick event
07:57 - handler equal to a call back a call back
08:01 - to delete task now we do have to pass in
08:04 - a parameter the index of the list item
08:07 - we would like to
08:09 - delete delete task pass in the current
08:13 - index with a call back if you add a set
08:15 - a parenthesis right away when we pass in
08:17 - an argument this will call the function
08:19 - right away instead we will use an arrow
08:22 - function to prevent that let's copy this
08:26 - button paste it we'll now create a move
08:29 - up button to move a task up if we need
08:32 - to change the priority the text on the
08:34 - button will be
08:37 - up but you know what I like to use
08:40 - emojis I'll use a pointer finger I think
08:44 - that would be more fun the class name
08:46 - will be move button on click will be set
08:52 - equal to a call back to move task
08:56 - up we'll be passing in the current index
08:59 - make sure that this is an arrow function
09:01 - too let's copy this button again paste
09:04 - it this next button will be for moove
09:07 - task down we can either write down for
09:10 - the text or I'll use an emoji for
09:14 - fun
09:16 - down all right and that is all the HTML
09:19 - that we need before we fill in these
09:21 - functions let's apply some CSS to
09:25 - everything I'm zoomed in to 100%
09:28 - currently
09:29 - let's select the container of to-do list
09:32 - this development so this has a class of
09:35 - to-do
09:36 - list let's change the font
09:40 - family to be aerial with a backup of s
09:45 - serif text align
09:48 - Center Des Center the text and add a
09:51 - little bit of margin to the
09:53 - top of 100
09:56 - pixels let's select our H1 element
09:59 - increase the font size to 4
10:04 - RM then we'll select all
10:08 - buttons increase the font size to 1.7
10:14 - RM set the font weight to be
10:19 - bold add some padding around each button
10:22 - padding 10 piels by 20
10:25 - pixels set the font color to be white
10:29 - we'll add some background color pretty
10:31 - soon remove the border border
10:36 - none border radius to smooth the
10:38 - corners by five
10:41 - pixels change our cursor to be a pointer
10:44 - when we hover over a
10:46 - button that does appear to
10:49 - work we'll add a transition effect when
10:51 - we hover over a
10:53 - button let's change the background color
10:57 - and have it ease after 0.5
11:01 - seconds let's work on the background
11:03 - color of the buttons next we'll select
11:05 - the class of add
11:07 - button add dash
11:09 - button pick a background color I'll pick
11:13 - Green but I will use hsl
11:18 - values I've already pre-picked a
11:23 - color now when I hover my cursor over
11:26 - the add button access the hover suo
11:29 - class take the lightness make it 10%
11:32 - darker let's do this with the delete
11:35 - button let's copy what we have paste it
11:38 - for the next set change add to
11:45 - delete I'll pick a red
11:50 - color again I've already picked some
11:53 - values and when I hover make the shade
11:56 - 10%
11:57 - darker
11:59 - and the move
12:08 - buttons I'll make the move buttons
12:12 - blue again I've already picked a
12:24 - color not bad it looks like with the
12:27 - transition I forgot to add s for
12:30 - seconds that's better we'll work on the
12:33 - input element next so after our
12:38 - buttons let's select our input element
12:42 - we'll select all input elements that
12:44 - have a type attribute of
12:48 - text I'll increase the font
12:51 - size to 1.6
12:54 - RM add a little bit of padding 10 pixels
13:00 - add a
13:01 - border two pixel solid pick a
13:08 - color I'll set the lightess to be 80%
13:11 - but lower the alpha to
13:17 - 50% not bad border radius to smooth the
13:20 - corners 5
13:23 - pixels and for the font
13:26 - color H let's find something
13:29 - I'll just lower the alpha to
13:33 - 50% here's the text
13:36 - currently I'm happy with that we'll work
13:38 - on the list items we'll begin with our
13:41 - ordered list remove all padding padding
13:45 - zero so that should delete the
13:48 - numbers we will style each list item
13:51 - element increase the font
13:54 - size to 2
13:57 - RM set the font weight to be
14:01 - bold add some padding of 15
14:05 - pixels change to the background
14:13 - color I'll set the lightness to
14:16 - 97% add some margin to the bottom of
14:19 - each list item of 10 pixels to separate
14:22 - each of them add a
14:25 - border three pixel solid pick a color
14:30 - for the lightness I'll pick
14:33 - 85% and the alpha down to
14:37 - 75% border radius to round the corners 5
14:43 - pixels for the elements within each list
14:45 - item I'll use flex box display Flex to
14:49 - align everything and align items
14:54 - Center I would like the text to take up
14:57 - as much space as possible
14:59 - so I will select the class of text use
15:02 - flexbox set it to One Flex one it's a
15:06 - shortcut for these three CSS properties
15:10 - Flex grow Flex shrink and flex bases
15:12 - this is more advanced Flex box if you
15:15 - set an element to have Flex one you're
15:18 - applying these three properties
15:20 - basically speaking that element should
15:23 - take up as much space as possible and
15:25 - grow and Shrink with the size of the web
15:26 - browser so all these buttons are going
15:29 - to be pushed to the right because the
15:30 - text wants to take up as much space as
15:33 - possible okay now we will select the
15:35 - class of our delete
15:38 - button and move
15:43 - button these two sets of buttons let's
15:46 - add some
15:48 - padding 8 pixels by 12
15:52 - pixels increase the font size to 1.4 RM
15:58 - I'll add some margin to the left of each
16:00 - button margin left 10 pixels much better
16:05 - this is optional but I'm going to change
16:06 - the background color of the body of my
16:09 - document I will select the body change
16:13 - the background
16:17 - color I'll go with the dark gray color
16:19 - I'll set the lightness to
16:21 - 10% I'll also take our H1 element and
16:25 - set the font color to be white I think
16:27 - that looks pretty good but you don't
16:29 - necessarily need to change the
16:30 - background color if you don't want to
16:32 - our CSS is now done we just have to add
16:35 - some functionality let's go back to our
16:37 - to-do list
16:38 - component we'll begin with add task
16:41 - after hitting the add button we'll call
16:43 - this function to add a new task we have
16:46 - to get the text within this text box
16:49 - we'll use the setter for set tasks pass
16:52 - in a new array spread the current
16:54 - elements of
16:56 - tasks and add our new new task that
16:59 - state variable we should update this to
17:02 - use an updator function we will use the
17:05 - previous state of tasks represented as T
17:09 - Arrow spread the previous state of tasks
17:13 - represented as
17:14 - T we would like to clear this input
17:16 - element so we can set new task set it to
17:20 - be an empty string to reset it now we
17:23 - should be able to add a new task go to
17:26 - work and add
17:29 - and that has worked eat
17:32 - lunch now if somebody doesn't type in
17:34 - anything they can still add a
17:38 - task to prevent that within add task
17:42 - we'll wrap everything within an if
17:47 - statement take our new task use the trim
17:51 - method to remove any white space if
17:53 - after removing any white space if this
17:56 - is still strictly not equal to an empty
17:58 - string then add a new task so now when I
18:02 - try and add an empty task it doesn't do
18:04 - anything let's add some text go to work
18:09 - and that will
18:10 - work the add task function is now done
18:13 - let's work on delete task delete task
18:17 - provides us with an index an index of
18:19 - the element we would like to delete
18:22 - maybe I don't want to take a shower I'm
18:24 - only a little bit
18:26 - stinky So within delete task we will
18:29 - create a new array of updated
18:33 - tasks so we need to use the filter
18:35 - method take our array of tasks use the
18:38 - filter method with the filter method
18:41 - we're provided with an element and each
18:44 - index of that element during each
18:46 - iteration but we have a naming conflict
18:49 - we already have a parameter named index
18:51 - for the index we would like to delete
18:53 - we'll rename index within the filter
18:55 - method as I to differentiate it
18:59 - Arrow then a condition if the current
19:02 - index of I is strictly not equal to the
19:06 - index we would like to delete put it
19:08 - within our new array of updated tasks if
19:12 - these two indexes match we will filter
19:14 - it out we don't want it cuz we want to
19:16 - delete it then once we have our new
19:19 - array of updated tasks it should be
19:21 - missing that element now we're currently
19:23 - not using this element parameter even
19:25 - though it's provided to us a common
19:27 - convention that people do
19:28 - if a parameter should be ignored people
19:30 - will change this to an underscore that's
19:32 - a convention to say ignore this we will
19:35 - set our new tasks with our updated tasks
19:39 - and this is an array an array that's
19:42 - missing one element whichever one we
19:44 - filter out using the filter method now
19:46 - we should be able to delete an element I
19:49 - do not want to take a shower
19:52 - delete and I don't feel like going to
19:54 - work delete delete task is now done now
19:58 - we need to be able to move a task up or
20:00 - down using the directional buttons so
20:02 - let's work on task up first let's check
20:06 - to see if our index that's passed in as
20:09 - an argument is greater than zero if the
20:13 - element is already at the top we don't
20:15 - need to move it up
20:16 - further we need to create a new array of
20:20 - updated tasks equals spread the current
20:25 - tasks and create a new array of updated
20:28 - tasks to work
20:30 - with now we're going to use array
20:32 - destructuring to swap two elements
20:34 - within an array here's the
20:38 - formula we have the current
20:41 - index and the index minus
20:45 - one we will be swapping these with index
20:48 - minus
20:50 - one and the current
20:53 - index so take our updated tasks at the
20:57 - current index index and the updated
20:59 - tasks at index minus one set these equal
21:03 - to updated tasks at index minus one and
21:07 - updated tasks at the current index I do
21:10 - have a separate video on destructuring
21:12 - if you need a refresher this code will
21:14 - swap two elements within an
21:16 - array and then we will set our tasks
21:19 - using the setter
21:21 - function set tasks pass in our updated
21:25 - array and now we should be able to move
21:27 - an element up
21:29 - oops looks like we have two functions
21:30 - for move task up move task down all
21:34 - right let's see if this works and now we
21:37 - should be able to move these
21:40 - up with move task down we're going to
21:43 - copy everything with then move task
21:45 - up the condition is if our index is less
21:49 - than our task length property minus
21:54 - one if our element is already at the
21:56 - bottom we don't want to move down down
21:58 - any further take index +
22:02 - one and then update our tasks now we
22:05 - should be able to move tasks up and
22:09 - down and even add new
22:14 - tasks and delete
22:17 - tasks and of course to initially have no
22:19 - elements within this array we can delete
22:21 - all these so then we start with an empty
22:23 - array all right everybody so that is a
22:25 - somewhat extensive program to create a
22:28 - to-do list application using
22:33 - react

Cleaned transcript:

hey everybody in today's video I'm going to walk you through creating a todo list app using react so sit back relax and enjoy the show all right let's do this everybody we'll need to create a new jsx file going to our source folder we will rightclick new file this component will be named too list. jsx this will be a function based component function to do list no parameters then let's be sure to export it because if I don't do it now I'm going to forget export default to do list we will be using the UST State hook we should import that import react use object destructuring I would like just the US state Hook from its location of react we do need to return something for now we're just going to return a fragment going back to our app component we need to import our todo list component import todo list from its relative file path do/ too list. jsx we will return one todo list component and we are ready to move on within our todo list component we will have two State variables const tasks tasks will be an array of strings we need a Setter function for tasks set tasks equal equals the use State hook the initial state of tasks is going to be an empty array but eventually we're going to populate this array with strings one string for each task to add and we will create a state variable for a new task new task is whatever we're currently editing with the text box we will be adding our new task to our array of tasks then we need a Setter function for new task set new task equals U State the initial state will be an empty string let's declare the functions we'll need throughout this program we will need a function to handle input change there will be one parameter and event this function is for our text box when we type in something we'll need a function to add a task function add task there will be no parameters function delete task there will be one parameter an index an index of the list item we would like to delete let me scroll down a function to move task up there is one parameter an index what is the index of the list item we would like to move up within our list and a function to move task down we will also accept an index okay and these are the functions we'll need until we fill these in I'm going to close these functions okay now we'll go to our return statement we have a lot of HTML elements to add we'll begin with a div element our div element will have a class name of to do list within this development we'll create an H1 element for a heading The Heading will be a to do list after this H1 element I'll create another div element within this div element I will create an input element this will be a selfclosing tag just for readability I'm going to place each attribute on a new line we have a lot of attributes to write I will set the type of this input element to be text I'm going to zoom in so you can see it more easily I'll add a placeholder of enter a task dot dot dot enter a task I will set the value of this text box to be some JavaScript our new task State variable this one when we type within this input element we will use the onchain vent Handler equal to a callback to a JavaScript function a callback to handle input change we'll fill in this function since we're here going to handle input change we will use the setter for our new task access our event parameter access its Target access its value so when we type within the text box it should change e breakfast if we didn't set the new task and we type within the text box we don't see the text it doesn't change that's why we need this function so we can see the text when we write within the input element let's scroll back down to the bottom after our input element we will create a button element with text of add to add a task for the class name of the button we'll set the class name attribute of the button to be add button add button I will set the onclick event handler equal to a JavaScript call back we will call the function of add task now temporarily until we apply some CSS I'll write a few tasks within our array just temporarily let's say our first task is to eat breakfast take a shower and walk the dog after our development we'll create an ordered list with a pair of O tags within this pair of O tags we'll be embedding some JavaScript we have a lot to write we're going to take all of our tasks and use the map method we will create a list item element for each task for each element with this this array we'll use the map method we're provided with two parameters the current element and the index of the current element but I'll rename this element parameter as task so it's more easily understandable within the map method we will use an arrow function what would we like to do with each task I'll put this on a new line we will create a list item a list item element So currently we have three list item elements now react wants to to add a key for each element so it can more easily keep track of each element with the opening list item tag I will set the key attribute equal to the current index within the list item element I will create a span element for some text the class name for this span element will be text this will be for the text of each list item element within the span element we will include the current task we have three tasks eat breakfast take a shower walk the dog after our span element we'll create a button element this button element will be for a delete button to delete this task this button will have a class name of delete dashb button I will set the onclick event handler equal to a call back a call back to delete task now we do have to pass in a parameter the index of the list item we would like to delete delete task pass in the current index with a call back if you add a set a parenthesis right away when we pass in an argument this will call the function right away instead we will use an arrow function to prevent that let's copy this button paste it we'll now create a move up button to move a task up if we need to change the priority the text on the button will be up but you know what I like to use emojis I'll use a pointer finger I think that would be more fun the class name will be move button on click will be set equal to a call back to move task up we'll be passing in the current index make sure that this is an arrow function too let's copy this button again paste it this next button will be for moove task down we can either write down for the text or I'll use an emoji for fun down all right and that is all the HTML that we need before we fill in these functions let's apply some CSS to everything I'm zoomed in to 100% currently let's select the container of todo list this development so this has a class of todo list let's change the font family to be aerial with a backup of s serif text align Center Des Center the text and add a little bit of margin to the top of 100 pixels let's select our H1 element increase the font size to 4 RM then we'll select all buttons increase the font size to 1.7 RM set the font weight to be bold add some padding around each button padding 10 piels by 20 pixels set the font color to be white we'll add some background color pretty soon remove the border border none border radius to smooth the corners by five pixels change our cursor to be a pointer when we hover over a button that does appear to work we'll add a transition effect when we hover over a button let's change the background color and have it ease after 0.5 seconds let's work on the background color of the buttons next we'll select the class of add button add dash button pick a background color I'll pick Green but I will use hsl values I've already prepicked a color now when I hover my cursor over the add button access the hover suo class take the lightness make it 10% darker let's do this with the delete button let's copy what we have paste it for the next set change add to delete I'll pick a red color again I've already picked some values and when I hover make the shade 10% darker and the move buttons I'll make the move buttons blue again I've already picked a color not bad it looks like with the transition I forgot to add s for seconds that's better we'll work on the input element next so after our buttons let's select our input element we'll select all input elements that have a type attribute of text I'll increase the font size to 1.6 RM add a little bit of padding 10 pixels add a border two pixel solid pick a color I'll set the lightess to be 80% but lower the alpha to 50% not bad border radius to smooth the corners 5 pixels and for the font color H let's find something I'll just lower the alpha to 50% here's the text currently I'm happy with that we'll work on the list items we'll begin with our ordered list remove all padding padding zero so that should delete the numbers we will style each list item element increase the font size to 2 RM set the font weight to be bold add some padding of 15 pixels change to the background color I'll set the lightness to 97% add some margin to the bottom of each list item of 10 pixels to separate each of them add a border three pixel solid pick a color for the lightness I'll pick 85% and the alpha down to 75% border radius to round the corners 5 pixels for the elements within each list item I'll use flex box display Flex to align everything and align items Center I would like the text to take up as much space as possible so I will select the class of text use flexbox set it to One Flex one it's a shortcut for these three CSS properties Flex grow Flex shrink and flex bases this is more advanced Flex box if you set an element to have Flex one you're applying these three properties basically speaking that element should take up as much space as possible and grow and Shrink with the size of the web browser so all these buttons are going to be pushed to the right because the text wants to take up as much space as possible okay now we will select the class of our delete button and move button these two sets of buttons let's add some padding 8 pixels by 12 pixels increase the font size to 1.4 RM I'll add some margin to the left of each button margin left 10 pixels much better this is optional but I'm going to change the background color of the body of my document I will select the body change the background color I'll go with the dark gray color I'll set the lightness to 10% I'll also take our H1 element and set the font color to be white I think that looks pretty good but you don't necessarily need to change the background color if you don't want to our CSS is now done we just have to add some functionality let's go back to our todo list component we'll begin with add task after hitting the add button we'll call this function to add a new task we have to get the text within this text box we'll use the setter for set tasks pass in a new array spread the current elements of tasks and add our new new task that state variable we should update this to use an updator function we will use the previous state of tasks represented as T Arrow spread the previous state of tasks represented as T we would like to clear this input element so we can set new task set it to be an empty string to reset it now we should be able to add a new task go to work and add and that has worked eat lunch now if somebody doesn't type in anything they can still add a task to prevent that within add task we'll wrap everything within an if statement take our new task use the trim method to remove any white space if after removing any white space if this is still strictly not equal to an empty string then add a new task so now when I try and add an empty task it doesn't do anything let's add some text go to work and that will work the add task function is now done let's work on delete task delete task provides us with an index an index of the element we would like to delete maybe I don't want to take a shower I'm only a little bit stinky So within delete task we will create a new array of updated tasks so we need to use the filter method take our array of tasks use the filter method with the filter method we're provided with an element and each index of that element during each iteration but we have a naming conflict we already have a parameter named index for the index we would like to delete we'll rename index within the filter method as I to differentiate it Arrow then a condition if the current index of I is strictly not equal to the index we would like to delete put it within our new array of updated tasks if these two indexes match we will filter it out we don't want it cuz we want to delete it then once we have our new array of updated tasks it should be missing that element now we're currently not using this element parameter even though it's provided to us a common convention that people do if a parameter should be ignored people will change this to an underscore that's a convention to say ignore this we will set our new tasks with our updated tasks and this is an array an array that's missing one element whichever one we filter out using the filter method now we should be able to delete an element I do not want to take a shower delete and I don't feel like going to work delete delete task is now done now we need to be able to move a task up or down using the directional buttons so let's work on task up first let's check to see if our index that's passed in as an argument is greater than zero if the element is already at the top we don't need to move it up further we need to create a new array of updated tasks equals spread the current tasks and create a new array of updated tasks to work with now we're going to use array destructuring to swap two elements within an array here's the formula we have the current index and the index minus one we will be swapping these with index minus one and the current index so take our updated tasks at the current index index and the updated tasks at index minus one set these equal to updated tasks at index minus one and updated tasks at the current index I do have a separate video on destructuring if you need a refresher this code will swap two elements within an array and then we will set our tasks using the setter function set tasks pass in our updated array and now we should be able to move an element up oops looks like we have two functions for move task up move task down all right let's see if this works and now we should be able to move these up with move task down we're going to copy everything with then move task up the condition is if our index is less than our task length property minus one if our element is already at the bottom we don't want to move down down any further take index + one and then update our tasks now we should be able to move tasks up and down and even add new tasks and delete tasks and of course to initially have no elements within this array we can delete all these so then we start with an empty array all right everybody so that is a somewhat extensive program to create a todo list application using react
