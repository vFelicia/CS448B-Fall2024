With timestamps:

00:00 - hey everybody it's me again today I'm
00:02 - going to explain while Loops in PHP with
00:04 - the while loop you can do some code
00:06 - infinitely while some condition remains
00:08 - true it's very similar to a for Loop but
00:12 - with the for Loop we intend to do some
00:14 - code a limited amount of times with the
00:16 - while loop it may be infinite there's a
00:19 - lot of overlap where you can use either
00:21 - a for Loop or a while loop here's how to
00:23 - create one
00:24 - type while parentheses curly braces
00:27 - within the parentheses we can set a
00:29 - condition let's say we have a counter
00:31 - variable we will count up to 10. keep
00:34 - doing this code while counter is less
00:37 - than or equal to 10. another difference
00:40 - between a for Loop and a while loop is
00:41 - that with the while loop we don't have
00:43 - three statements we just have one with
00:46 - the for Loop you can create an index a
00:48 - condition and there's another statement
00:50 - to increment or decrement we don't have
00:52 - that with the while loop so we'll have
00:54 - to set that manually
00:56 - outside of the while loop let's say we
00:57 - have a counter counter will equal zero
01:01 - while counter is less than or equal to
01:03 - 10
01:04 - let's increment our counter by one
01:07 - counter plus plus
01:10 - then let's Echo our counter variable
01:14 - then add a break
01:18 - so simple enough
01:20 - that should be less than 10. there we
01:22 - escape the while loop when this
01:24 - condition is no longer true it's very
01:27 - similar to a for Loop honestly in this
01:29 - situation I would probably stick with
01:31 - the for Loop because you're still doing
01:33 - something a limited amount of times
01:35 - while Loops tend to be better if you
01:37 - need to do something possibly infinitely
01:39 - let's say we have um a stopwatch program
01:42 - we don't know when the user is going to
01:44 - stop the stopwatch we would need to keep
01:46 - on updating our stopwatch until the user
01:49 - presses stop so we could write a program
01:51 - like this instead suppose we have a
01:54 - variable seconds to keep track of the
01:56 - amount of seconds
01:58 - then a Boolean variable named running
02:02 - if our stopwatch is no longer running if
02:05 - somebody hits the stop button we will
02:06 - set that to be false
02:08 - our condition could be a while
02:11 - running
02:13 - is equal to true if this variable is a
02:17 - Boolean we can just shorten this to
02:18 - while running while our stopwatch is
02:21 - running update the time or something
02:24 - I haven't talked about the sleep
02:25 - function yet but we can make our program
02:27 - sleep for a given amount of seconds so
02:29 - let's pretend that we wait one second
02:32 - then after waiting one second let's
02:35 - increment seconds by one
02:39 - then Echo the current amount of seconds
02:44 - and I will add a break I wouldn't
02:47 - recommend running this code we're going
02:49 - to be stuck in what is known as an
02:50 - infinite loop our program has no way of
02:53 - stopping and it might crash your
02:54 - computer you can see that the time just
02:56 - goes on and on forever so let's stop
02:59 - that
03:00 - my computer might crash this code is
03:03 - going to run forever because we have no
03:05 - way of escaping this Loop if you have a
03:07 - while loop you'll want some way to break
03:09 - out of the while loop from inside of it
03:11 - I'm going to create a stop button
03:32 - I now have a stop button let's stop that
03:34 - before it crashes
03:37 - now to escape out of this loop I could
03:40 - write some code like this
03:42 - I'm going to write an if statement
03:45 - I haven't discussed the is set function
03:47 - yet but we can check to see if a button
03:49 - is clicked or not I'm going to access
03:51 - our post variable
03:55 - and I have created a stop button with
03:57 - the name of stop
04:00 - if I click the stop button then let's
04:03 - set running to be false
04:06 - then we can escape out of the while loop
04:11 - else
04:12 - if the user doesn't press the stop
04:14 - button
04:17 - then let's Wait Another Second and
04:19 - update our timer
04:22 - so this program is going to continue
04:24 - until I hit the stop button
04:27 - and it broke
04:29 - there it stopped what you should
04:31 - remember from this is that a while loop
04:33 - will do some code possibly forever while
04:36 - some condition is true you would need
04:38 - some way of making your condition false
04:40 - in this case I just set up a button to
04:43 - stop the timer there is a lot of overlap
04:45 - where you can use either a for Loop or a
04:47 - while loop if you need to do something a
04:49 - limited amount of times use a for Loop
04:51 - if you need to do something a possibly
04:53 - infinite amount of times a while loop
04:55 - might be better and well everybody those
04:57 - are while Loops in PHP

Cleaned transcript:

hey everybody it's me again today I'm going to explain while Loops in PHP with the while loop you can do some code infinitely while some condition remains true it's very similar to a for Loop but with the for Loop we intend to do some code a limited amount of times with the while loop it may be infinite there's a lot of overlap where you can use either a for Loop or a while loop here's how to create one type while parentheses curly braces within the parentheses we can set a condition let's say we have a counter variable we will count up to 10. keep doing this code while counter is less than or equal to 10. another difference between a for Loop and a while loop is that with the while loop we don't have three statements we just have one with the for Loop you can create an index a condition and there's another statement to increment or decrement we don't have that with the while loop so we'll have to set that manually outside of the while loop let's say we have a counter counter will equal zero while counter is less than or equal to 10 let's increment our counter by one counter plus plus then let's Echo our counter variable then add a break so simple enough that should be less than 10. there we escape the while loop when this condition is no longer true it's very similar to a for Loop honestly in this situation I would probably stick with the for Loop because you're still doing something a limited amount of times while Loops tend to be better if you need to do something possibly infinitely let's say we have um a stopwatch program we don't know when the user is going to stop the stopwatch we would need to keep on updating our stopwatch until the user presses stop so we could write a program like this instead suppose we have a variable seconds to keep track of the amount of seconds then a Boolean variable named running if our stopwatch is no longer running if somebody hits the stop button we will set that to be false our condition could be a while running is equal to true if this variable is a Boolean we can just shorten this to while running while our stopwatch is running update the time or something I haven't talked about the sleep function yet but we can make our program sleep for a given amount of seconds so let's pretend that we wait one second then after waiting one second let's increment seconds by one then Echo the current amount of seconds and I will add a break I wouldn't recommend running this code we're going to be stuck in what is known as an infinite loop our program has no way of stopping and it might crash your computer you can see that the time just goes on and on forever so let's stop that my computer might crash this code is going to run forever because we have no way of escaping this Loop if you have a while loop you'll want some way to break out of the while loop from inside of it I'm going to create a stop button I now have a stop button let's stop that before it crashes now to escape out of this loop I could write some code like this I'm going to write an if statement I haven't discussed the is set function yet but we can check to see if a button is clicked or not I'm going to access our post variable and I have created a stop button with the name of stop if I click the stop button then let's set running to be false then we can escape out of the while loop else if the user doesn't press the stop button then let's Wait Another Second and update our timer so this program is going to continue until I hit the stop button and it broke there it stopped what you should remember from this is that a while loop will do some code possibly forever while some condition is true you would need some way of making your condition false in this case I just set up a button to stop the timer there is a lot of overlap where you can use either a for Loop or a while loop if you need to do something a limited amount of times use a for Loop if you need to do something a possibly infinite amount of times a while loop might be better and well everybody those are while Loops in PHP
