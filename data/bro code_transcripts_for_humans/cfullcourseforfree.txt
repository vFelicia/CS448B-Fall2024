With timestamps:

00:00 - hey guys in this video you're going to
00:02 - write your first c plus program so sit
00:05 - back relax and well enjoy the show
00:09 - hey if you wouldn't mind please like
00:11 - comment and subscribe one like equals
00:14 - one prayer for the youtube algorithm
00:17 - i'm gonna tell you why you need to learn
00:19 - c plus plus
00:20 - c plus plus is a fast language like
00:23 - really fast it's commonly used in
00:26 - advanced graphics applications a few
00:28 - examples would include adobe
00:30 - applications video editing software
00:33 - anything that's graphics intensive c
00:35 - plus plus is considered a middle level
00:37 - language therefore it's commonly used
00:39 - with embedded systems and most
00:41 - importantly it's commonly used with
00:43 - creating video games i like video games
00:46 - like a lot compared to other programming
00:48 - languages you could say that c plus plus
00:51 - is a middle level language programming
00:54 - languages tend to be on a spectrum the
00:56 - higher level of programming languages
00:58 - the more it resembles human language
01:00 - languages that are closer to being lower
01:02 - level resemble hardware instructions
01:04 - higher level languages such as python
01:06 - java and c-sharp are very easy to write
01:09 - with and to understand but they tend to
01:11 - be slower c plus and c they take a
01:14 - little more effort to write but they're
01:16 - very fast they have the benefit of
01:18 - working closely with machine hardware
01:20 - while still somewhat resembling human
01:22 - language just a fair warning there is a
01:24 - learning curve with c plus plus but if
01:26 - you can learn it it's worth it there's
01:28 - two things you'll need to get started
01:30 - one is a text editor a few options
01:32 - include but are not limited to would be
01:35 - vs code code blocks or even notepad vs
01:39 - code and code blocks are also considered
01:42 - ides integrated development environments
01:45 - they are a text editor as well as a
01:47 - workshop that contain a lot of useful
01:49 - developer tools in this video i'm going
01:51 - to show you how to download vs code but
01:54 - feel free to use any text editor that
01:56 - you're comfortable with secondly we'll
01:57 - need a compiler a compiler is a piece of
02:01 - software that will parse source code to
02:03 - machine instructions and that's really
02:06 - it if you're using windows or linux
02:08 - you'll probably want to go with gcc if
02:10 - you're running mac you'll probably go
02:12 - with clang okay clang has a really cool
02:15 - logo
02:16 - it's blue eyes white dragon so let's get
02:18 - started
02:19 - well alright then everybody now we are
02:21 - going to download vs code that text
02:23 - editor i was talking about head to this
02:25 - url code.visualstudio.com
02:29 - then select the correct download for
02:30 - your operating system i'm running
02:32 - windows i'll select windows then i will
02:35 - open this
02:36 - read the agreement yes i actually did
02:38 - read it that fast i accept the agreement
02:41 - next
02:43 - next
02:45 - next
02:46 - i'll create a desktop icon why not
02:48 - next and install we might as well launch
02:52 - it
02:52 - finish
02:55 - in vs code there's two extensions i
02:57 - would recommend go to the left toolbar
02:59 - underneath extensions we will look up c
03:03 - c plus plus
03:04 - and we would like to download this
03:06 - extension
03:07 - uh let's pretend that this wasn't
03:09 - already installed so i'm going to
03:10 - install it
03:12 - then the next extension i recommend is
03:14 - code runner
03:17 - here it is
03:18 - then just click this blue button to
03:20 - install it
03:22 - okay let's close out of this
03:25 - we're going to create a new folder to
03:26 - hold our c plus projects go to the left
03:29 - toolbar explore
03:31 - open folder i'll create a new folder on
03:33 - my desktop
03:35 - new
03:36 - folder i'll name this c
03:39 - plus
03:39 - projects
03:41 - that sounds good to me
03:42 - then select folder
03:44 - within this folder we'll create a new
03:46 - file
03:47 - i'll name this hello world dot cpp make
03:52 - sure to get that cpp extension at the
03:54 - end that means it's a c plus plus file
03:57 - okay we now have a c plus file to work
04:00 - with now we just need to download that
04:01 - compiler that parses source code to
04:04 - machine instructions
04:06 - there's a great set of instructions at
04:08 - this url code.visualstudio.com
04:13 - docs let's head to c plus plus there's
04:16 - different installation instructions
04:18 - depending on your operating system
04:20 - you'll be downloading gcc on linux if
04:22 - you're running linux gcc on windows for
04:25 - windows
04:26 - and clang for mac os downloading a
04:29 - compiler for linux and mac is actually
04:31 - really easy i can cover that in like 30
04:33 - seconds windows is a little more
04:35 - complicated but let's begin with linux
04:38 - so all you're going to do is open up
04:40 - terminal and enter the following command
04:43 - gcc
04:45 - v that will check to see if it's
04:46 - currently installed
04:48 - if it's not you enter this command in
04:51 - then you install the gnu compiler tools
04:53 - by typing in this command right here and
04:56 - that's all you need to do with linux
04:58 - if you're on mac you'll download clang
05:02 - open terminal
05:04 - type in this command
05:05 - if clang isn't installed all you type is
05:08 - this command and that's it so pretty
05:10 - easy right if you're using the windows
05:13 - operating system there's way more steps
05:16 - so let's head to step three we'll need
05:18 - to install min gw64
05:22 - you can click this link to the installer
05:24 - this is an executable i'll open this
05:26 - when it's done
05:29 - click next
05:31 - next
05:32 - next
05:33 - wait for it
05:35 - we might as well run this
05:37 - then finish
05:38 - now we will follow the installation
05:40 - instructions on this website
05:45 - under step 5 we will type
05:48 - pack man
05:49 - dash
05:50 - capital s y u enter
06:03 - type y then enter to proceed with the
06:06 - installation
06:10 - type y then enter again to confirm to
06:13 - proceed
06:14 - now we'll need to find this program from
06:16 - the start menu
06:18 - m sys2 then type this command
06:22 - pack man
06:24 - dash s u enter
06:28 - type y then enter to proceed with the
06:30 - installation
06:35 - now we'll need to enter this command in
06:38 - there's a lot to type here
06:42 - pacman dash s
06:44 - dash dash
06:46 - needed
06:47 - base
06:49 - dash
06:51 - dev l
06:54 - min
06:55 - gw
06:56 - dash w
06:58 - 64
07:00 - dash
07:01 - x
07:02 - 86
07:04 - underscore
07:05 - 64
07:07 - dash
07:08 - tool
07:09 - chain
07:10 - then enter
07:12 - then just hit enter
07:15 - proceed with the installation type yes
07:17 - type y
07:19 - enter again
07:20 - then give it a moment
07:23 - then we can close out of this window
07:26 - we'll have to find the bin folder of
07:28 - mingw
07:30 - it's likely going to be within your c
07:32 - drive go to msys64
07:36 - mingw64
07:38 - bin
07:39 - then copy this address
07:43 - we'll need to add that path to the
07:45 - windows path environment variable
07:48 - to do so search settings
07:51 - settings
07:55 - we'll search edit environment variables
08:02 - go to path
08:04 - edit
08:05 - let's pretend that this wasn't here
08:08 - i'm going to go to new
08:11 - paste that address
08:13 - okay
08:14 - okay
08:15 - close out of this window
08:18 - just to be sure that our compiler is
08:19 - working and available let's open up
08:21 - command prompt
08:23 - command
08:24 - prompt
08:26 - then type in this command
08:28 - g
08:29 - plus plus
08:31 - dash dash
08:32 - version
08:33 - enter
08:36 - yeah it looks like it's good to go we
08:38 - have now successfully installed our
08:40 - compiler
08:41 - all right everybody let's write our
08:43 - first c plus plus program at the top of
08:46 - our c plus file we are going to type
08:49 - include
08:51 - within angle brackets
08:53 - io
08:54 - stream
08:55 - iostream is a header file that contains
08:57 - functions for basic input and output
08:59 - operations by writing include iostream
09:03 - we're including that header file then we
09:04 - have access to a whole bunch of useful
09:06 - input and output operations now we'll
09:09 - need a main function the main function
09:11 - is where the program begins we'll type
09:13 - int
09:14 - main
09:15 - parentheses curly braces we begin the
09:18 - program by invoking the main function
09:20 - and read any code within the main
09:22 - function starting at the top and working
09:24 - our way down at the end of our main
09:27 - function we'll want return 0 then add a
09:30 - semicolon if we reach return 0 that
09:34 - means there were no problems in this
09:35 - program however if one is returned that
09:39 - means there was a problem there is an
09:40 - issue so place return 0 at the end of
09:43 - your main function what we'll do in this
09:44 - lesson is write some basic output to
09:47 - write some output you'll type
09:49 - std contrary to what you might believe
09:52 - in this case it doesn't mean sexually
09:54 - transmitted diseases it means standard
09:56 - follow std with two colons then type
10:00 - c out
10:02 - c means character out means output
10:05 - altogether this means standard character
10:08 - output we're going to display some
10:10 - characters as output then follow c out
10:12 - with two left angle brackets these
10:15 - characters mean output it's also known
10:17 - as the left shift operator when used
10:19 - with numbers what characters would we
10:20 - like to display as output within
10:22 - quotation marks let's write something
10:24 - what's a food you like
10:26 - i
10:27 - like pizza i'll type that then follow
10:30 - this statement with a semicolon at the
10:33 - end of statements we add a semicolon
10:35 - that lets the compiler know that this
10:37 - statement is done it's sort of like the
10:39 - period at the end of a sentence that's
10:40 - when you know the sentence is complete
10:42 - so i'm going to save this i'll hold ctrl
10:45 - s or you can go to file save then click
10:48 - this button to run it
10:51 - and there's my output i like pizza
10:54 - on the next line i'll type std
10:57 - two colons
10:58 - c out two left angle brackets for output
11:02 - i'll write a second line
11:04 - it's really
11:06 - good
11:09 - then i'll run this again you can press
11:11 - this icon to clear output
11:14 - uh oh we have a problem i like pizza
11:16 - it's really good all of this text is on
11:18 - one line what if you need the next line
11:20 - of text to be on well the next line when
11:23 - you need to move your cursor down to the
11:24 - next line you can follow some string of
11:27 - text with
11:28 - double left angle brackets
11:31 - for output
11:32 - std
11:34 - colon colon
11:36 - en dl that means end line
11:39 - and i'll do the same for my second line
11:42 - i'm going to save clear my output run
11:44 - this again
11:46 - yeah there we go i like pizza it's
11:48 - really good each line of text is on a
11:51 - different line another option for a new
11:53 - line that's better performance wise
11:55 - is to add a new line character
11:57 - within single quotes type
12:00 - backslash n
12:02 - and let's replace that here as well
12:05 - so i'm going to save clear my output run
12:08 - this again
12:09 - i like pizza it's really good adding a
12:11 - new line character does the same thing
12:13 - and it's better performance wise however
12:15 - the benefit of using endline is that
12:18 - endline will flush the output buffer
12:21 - really you can use either one but i
12:22 - thought that might be a nice trick to
12:24 - show you now you can write a comment a
12:26 - comment is ignored by the compiler
12:29 - to write a comment you use two forward
12:31 - slashes
12:33 - this is a comment
12:36 - comments are used for yourself for notes
12:39 - or for notes for another developer so if
12:41 - i were to run this again
12:44 - this comment is ignored it's not used as
12:46 - output or anything like that if you need
12:48 - a multi-line comment you type forward
12:50 - slash asterisk
12:52 - wherever you need your comment to end
12:54 - you'll place asterisk forward slash
12:56 - again
12:58 - this
13:00 - is
13:01 - a
13:02 - multi-line
13:05 - comment
13:07 - and you can see that all of this is
13:08 - ignored as well so comments are used as
13:11 - notes for yourself or for other
13:13 - developers yeah that's a quick
13:15 - introduction to getting started with c
13:17 - plus i'll post this code in the comment
13:19 - section down below if you would like a
13:21 - copy hey if you enjoyed this video
13:22 - please be sure to smash that like button
13:25 - leave a random comment down below and
13:26 - subscribe if you'd like to become a
13:28 - fellow bro
13:32 - hey guys i'm going to explain what
13:34 - variables are a variable you probably
13:36 - remember from middle school math class a
13:38 - variable is a representation of some
13:41 - number or value there are two steps to
13:43 - creating and using a variable
13:45 - declaration and assignment we'll begin
13:47 - with declaration to declare a variable
13:50 - we need to list the data type of what
13:52 - we're storing exactly in programming you
13:54 - can store more than just numbers you can
13:56 - store characters even whole sentences
13:59 - etc let's work with whole numbers to
14:01 - store a whole number we will type int
14:04 - for integer then we need a unique
14:06 - identifier for this variable for now
14:08 - let's just say x we're used to working
14:10 - with like x and y in math class right we
14:12 - will end the statement with a semicolon
14:15 - this step is declaration
14:19 - now to assign a variable you take the
14:21 - variable's name that unique identifier
14:24 - then we will set this equal to
14:26 - some number since we declared this
14:28 - variable as an int it will store an
14:31 - integer maybe like five now this
14:34 - variable behaves as if it was the value
14:36 - that it contains it will behave as if it
14:38 - was the number five then to display a
14:40 - variable we can use standard output std
14:45 - c out
14:47 - we will display
14:48 - x
14:49 - and let's see what we have
14:54 - there's our value five this first step
14:57 - is declaration
14:58 - the second step is assignment the nice
15:00 - thing about doing this in two steps is
15:02 - that you can later assign your variable
15:04 - a value if you know what value you would
15:06 - like to give your variable right away
15:08 - you can do that at the beginning of your
15:09 - program you could combine both of those
15:11 - steps
15:12 - int x equals 5 and that would do the
15:15 - same thing in cases where you don't know
15:17 - what value you would like to give a
15:18 - variable you could assign it later such
15:20 - as when you accept user input you don't
15:22 - know what the user is going to type so
15:24 - let's create another
15:25 - int
15:26 - y equals six
15:28 - then let's display whatever y is
15:31 - i'll add a new line
15:33 - let's copy this paste it
15:37 - okay
15:38 - x is five y is six we could even do
15:41 - something like this let's say int sum
15:44 - equals x plus y
15:48 - then we'll display whatever our sum
15:49 - variable is
15:51 - c out sum
15:53 - the sum of x plus y is 11. now there's
15:56 - different data types depending on what
15:58 - you need to store within a variable
15:59 - exactly the int data type stores a whole
16:02 - integer let's think of a few examples of
16:05 - whole integers what about an age
16:08 - that's typically a whole number
16:10 - inch age equals 21. let's think of two
16:14 - more examples
16:15 - what about a year
16:17 - int year equals
16:19 - 20
16:20 - 23 how about days int days equals seven
16:26 - the int data type can only store a whole
16:28 - number
16:29 - with days what if we assign this a value
16:31 - of 7.5 let me show you what happens
16:37 - all right i will display days
16:45 - all right that decimal portion is
16:47 - truncated when i display days and we
16:50 - attempt to assign 7.5
16:52 - well this variable can't store that
16:54 - decimal so it's truncated if you need a
16:56 - number that includes a decimal portion
16:58 - there's a different data type for that
17:01 - and that is a double
17:05 - this is a number
17:08 - including
17:09 - decimal
17:10 - a few examples of a double would be
17:12 - maybe a price there's dollars and cents
17:16 - double
17:17 - price
17:19 - equals
17:20 - 10.99
17:23 - what about a gpa a grade point average
17:26 - that includes a decimal
17:28 - double gpa equals 2.5
17:33 - uh then maybe a temperature
17:36 - double
17:38 - temperature
17:40 - equals 25.1
17:44 - i guess this could be in either celsius
17:46 - or fahrenheit then let's display maybe
17:48 - price
17:51 - price
17:54 - yeah and that decimal portion is not
17:57 - truncated much like what you see with
17:59 - whole integers if you need a number that
18:01 - includes a decimal portion use a double
18:04 - now we have the char data type that
18:06 - stores a single character
18:09 - type char
18:11 - maybe we're working with student grades
18:13 - i'll name this variable grade
18:16 - equals
18:17 - then to store a single character you use
18:19 - single quotes this student has an a
18:24 - two more examples what about an initial
18:28 - singular not initials
18:30 - char
18:31 - initial
18:33 - what about b
18:35 - so i'm going to display initial
18:41 - initial
18:45 - okay
18:45 - we have our single character of b
18:48 - now check this out what if i attempt to
18:50 - store more than one character i'll add c
18:53 - we have a warning we have an overflow in
18:55 - conversion from int to char
18:58 - so what's displayed is the last
19:00 - character just c so chars can only store
19:03 - a single character here's one more
19:05 - example of a char data type what if
19:07 - we're working with currency what type of
19:10 - currency will we work with
19:12 - char
19:13 - currency
19:15 - equals
19:16 - maybe a dollar sign
19:18 - if we're working with a different type
19:20 - of currency we could change this to a
19:22 - different symbol yeah that's the char
19:24 - data type it stores a single character
19:27 - next on our list is booleans
19:30 - boolean a variable that's boolean has
19:33 - only two states
19:35 - true or false to create a boolean
19:38 - variable you type bool
19:41 - then a variable name so these are
19:43 - applicable to anything that has two
19:45 - states what if somebody is a student
19:47 - they're either a student or not a
19:49 - student
19:51 - bull student
19:53 - equals true
19:54 - if they're not enrolled in classes or
19:57 - they graduated you could set this to be
19:58 - false think of a light switch the light
20:01 - switch can either be on or off you can
20:03 - say a light switch is boolean there's
20:05 - only two states true or false how about
20:08 - bull power is something powered on or
20:11 - not
20:12 - power equals true if it's turned off
20:15 - that could be false maybe we have a
20:17 - store and we need to mark if something
20:19 - is for sale or not like is it available
20:23 - bool
20:24 - for sale
20:26 - equals true
20:27 - if an item in our store isn't for sale
20:29 - like it's not available we could set
20:31 - this to be false so that's the idea
20:33 - behind boolean values it has two states
20:36 - true or false the last data type i'll
20:38 - cover is strings a string is technically
20:41 - an object that represents a sequence of
20:45 - text think of it as the char data type
20:47 - but we can store more than one character
20:50 - even whole sentences like a name or an
20:52 - address
20:53 - strings are provided from the standard
20:55 - namespace to declare a string we would
20:58 - type standard
21:00 - string then a variable name
21:04 - what about just name like we're storing
21:06 - a user's name
21:07 - place your text within a set of double
21:09 - quotes then why don't you type your
21:11 - first name
21:12 - then we will store that within this
21:13 - variable name then to test it let's
21:16 - display it
21:18 - standard output we will display
21:20 - name
21:23 - and there is your first name
21:25 - let's create a couple more examples
21:28 - what about a day of the week
21:30 - standard string
21:32 - day
21:34 - then pick a day i like friday
21:38 - what about food
21:40 - standard string
21:42 - food
21:43 - i like pizza
21:45 - i'll store this series of text as a
21:47 - string
21:48 - then maybe an address standard
21:51 - string
21:54 - address
21:56 - equals make up some address
21:58 - one two three fake street
22:01 - basically speaking a string is a type of
22:04 - object that represents a sequence of
22:07 - text such as a name
22:09 - a day
22:10 - an address etc
22:13 - now i'm going to show you how we can
22:14 - display a variable along with some text
22:17 - i would like to display
22:19 - hello then whatever your name is i will
22:21 - type what is known as a string literal
22:23 - we're literally printing a string hello
22:28 - follow this string of text with a
22:30 - variable
22:31 - my variable name is good
22:33 - then let's display it
22:38 - hello then whatever your first name is
22:40 - but you do have to pay attention to
22:42 - spacing
22:43 - after my word hello i'm going to add a
22:45 - space
22:48 - there hello
22:49 - bro
22:50 - then let's display our age
22:55 - so i'm going to add a new line character
23:01 - standard output we will display
23:04 - u r
23:07 - age
23:09 - years old
23:15 - there hello bro you are 21 years old uh
23:19 - make sure to pay attention to the
23:20 - spacing as well because it's easy to
23:21 - mess that up
23:23 - alright so those are variables we
23:26 - covered a few of the basic data types
23:27 - but there's more advanced data types
23:29 - once we gain a little bit more
23:30 - experience with this that i'll cover we
23:32 - have integers which store a whole number
23:35 - doubles which are numbers that include a
23:37 - decimal portion
23:39 - chars are single characters booleans are
23:42 - either true or false then strings
23:44 - represent a sequence of text an
23:47 - important note with strings is that you
23:49 - can include numbers but they're treated
23:51 - differently so yeah those are variables
23:54 - in c plus your assignment is to in the
23:57 - comment section post a integer variable
24:00 - a double
24:01 - a character boolean and a string think
24:04 - of some examples preferably some
24:06 - examples that i may have not covered
24:07 - already that would be good practice well
24:10 - yeah and that's an introduction to
24:11 - variables in c plus plus
24:16 - all right welcome back everybody in this
24:18 - video we're going to discuss the const
24:20 - keyword the const keyword specifies that
24:23 - a variable's value is constant it tells
24:26 - the compiler to prevent anything from
24:28 - modifying it so that it's effectively
24:30 - read-only here's an example let's create
24:33 - a program to calculate the circumference
24:35 - of a circle we'll first define the
24:37 - variables that we'll need we have
24:40 - double
24:41 - pi
24:42 - pi equals
24:44 - five 3.14159
24:47 - then we have double
24:49 - radius pick some radius i'll pick ten
24:53 - then double
24:55 - circumference
24:58 - equals and here's the formula to
25:01 - calculate the circumference of a circle
25:03 - it's two
25:04 - times
25:06 - pi
25:07 - times
25:08 - radius
25:10 - then we will display our circumference
25:12 - standard output
25:14 - we will display
25:16 - circumference
25:19 - then i'll add maybe centimeters
25:23 - our circumference is
25:26 - 62.83 centimeters
25:29 - any variable we do not want to be able
25:31 - to be changed at all we can turn into a
25:33 - constant
25:34 - let's say that somebody goes into our
25:36 - program and changes pi to a different
25:38 - number like
25:39 - 420 69 well then this is going to change
25:43 - the result of our program we may have
25:45 - not realized that somebody changed the
25:46 - value of pi before 2069 so any variable
25:50 - you do not want changed you can prefix
25:52 - this keyword const
25:54 - const double pi now a common naming
25:57 - convention for constants
25:59 - is to make all of the letters uppercase
26:02 - so let's change pi from lowercase to all
26:04 - uppercase
26:06 - and we'll need to make that change here
26:07 - as well
26:08 - now let's try and change pi to 420 69
26:12 - again then see what happens
26:15 - okay we have an error assignment of
26:17 - read-only variable pi
26:19 - so by including constants it adds some
26:21 - data security we can't normally change
26:23 - any value that's a constant a couple
26:25 - other examples of variables that you
26:27 - could turn into constants could be maybe
26:29 - the speed of light maybe you have a
26:31 - physics calculator so const
26:35 - int
26:36 - light speed
26:39 - the speed of light in meters per second
26:41 - is two nine nine seven nine two
26:45 - four five eight
26:46 - let's think of one more example perhaps
26:48 - you're working with screen resolutions
26:51 - we have const
26:53 - int
26:54 - width
26:55 - of
26:56 - 1920
26:58 - then const
27:00 - int
27:01 - height
27:02 - of 1080.
27:04 - these may be a few examples
27:06 - of variables you do not want to be
27:08 - changed or altered at all you only want
27:09 - them to be read-only yeah that's a const
27:12 - everybody it's a keyword that will
27:14 - modify a variable or some value so that
27:16 - it's read-only and can't be changed you
27:19 - should use constants as often as
27:21 - possible only if you know that a
27:22 - variable is not going to be changed at
27:24 - all your assignment is to think of a
27:26 - constant and post it in the comment
27:28 - section hey if you're enjoying the
27:30 - series please be sure to smash that like
27:32 - button leave a random comment down below
27:34 - and subscribe if you'd like to become a
27:35 - fellow bro
27:39 - hey everyone i have a quick video on
27:41 - namespaces a namespace provides a
27:43 - solution for preventing name conflicts
27:46 - especially in larger projects each
27:48 - entity needs a unique name a namespace
27:51 - allows for identically named entities as
27:54 - long as the namespaces are different now
27:56 - what the heck does that mean suppose we
27:59 - have variable x x equals zero
28:02 - each variable needs a unique name i
28:05 - couldn't create a second variable named
28:06 - x and give this a different value if i
28:09 - were to compile and run this program we
28:11 - would run into an error read declaration
28:13 - of int x
28:15 - so each entity needs unique name but if
28:18 - we use namespaces then two or more
28:20 - entities can share the same name to
28:22 - create a namespace
28:23 - let's do so outside of the main function
28:26 - i will type
28:28 - namespace
28:29 - then some name for the namespace let's
28:31 - say first then a set of parentheses
28:34 - i could create a different version of x
28:37 - i'll give this a different value like
28:40 - one
28:40 - well this would run and compile just
28:42 - fine
28:43 - you can have different versions of the
28:45 - same variable as long as they're within
28:47 - a different namespace just for fun let's
28:49 - create a second namespace namespace
28:52 - second
28:53 - x equals two this is also valid
28:57 - so just to demonstrate a few things i'm
28:59 - going to display what x is
29:01 - if i don't explicitly state what
29:03 - namespace we're using we will use the
29:06 - local version of an entity
29:08 - if i display x
29:10 - x would be zero if i would like the
29:12 - version of x that is found within the
29:14 - first namespace
29:16 - i would take that entity in this case x
29:19 - prefix the namespace let's say first
29:23 - then two colons
29:24 - the two colons is known as the scope
29:27 - resolution operator i'm referring to the
29:30 - version of x that is found within the
29:31 - first namespace
29:33 - and that version of x has a value of one
29:37 - if i need the value of x found within
29:39 - the second namespace i would precede
29:42 - that entity with the second namespace
29:44 - followed by the scope resolution
29:46 - operator
29:47 - so that version of x is 2.
29:50 - so entities can have the same name as
29:53 - long as they're within a different
29:54 - namespace now one line that you may see
29:56 - is
29:57 - using
29:58 - namespace
30:00 - then the name of a namespace let's say
30:01 - first if we have some entity without a
30:04 - prefix of the namespace it's assumed
30:07 - that we're using the entity found within
30:09 - that particular namespace
30:11 - so if i was to display x
30:14 - while we're using namespace first
30:17 - x would be one
30:19 - and i don't need to add that prefix but
30:21 - if i need xbond within the second
30:23 - namespace i would still need to prefix
30:25 - it with second
30:28 - x is two
30:29 - if i changed using namespace to second
30:32 - it's implied we're using the second
30:34 - namespace and i don't need that prefix
30:38 - 2 but i still would if i need x from the
30:41 - first name space
30:44 - 1.
30:45 - now there's this evil line called using
30:48 - it namespace std for standard now the
30:50 - reason that people include this line is
30:52 - to save a little bit of typing
30:54 - if we're using a namespace std we don't
30:57 - need to include that prefix when we
30:59 - declare strings or we display output
31:01 - with c out just for example like this
31:04 - would still compile and run
31:06 - however the standard namespace has
31:08 - hundreds of different entities let me
31:10 - show you
31:12 - standard
31:13 - there's a high likelihood of a naming
31:15 - conflict for example we have an entity
31:18 - named data
31:19 - one alternative is that we could say
31:22 - using
31:24 - standard
31:25 - output
31:26 - that will cut down on some of the
31:28 - repetitions or
31:30 - using
31:31 - standard
31:32 - string
31:36 - it's a safer alternative to using
31:38 - namespace standard
31:40 - in the future i'm not going to be using
31:42 - namespace standard because i would like
31:44 - to steer people away from that but just
31:46 - in case you see that line you know what
31:48 - it's there for
31:49 - so in conclusion a namespace provides a
31:52 - solution for preventing name conflicts
31:55 - each entity needs a unique name and a
31:57 - namespace allows for identically named
32:00 - entities as long as the namespaces are
32:02 - different so those are namespaces hey if
32:05 - you're enjoying this series let me know
32:07 - by smashing that like button leave a
32:08 - random comment down below and subscribe
32:10 - if you'd like to become a fellow bro
32:14 - hey everyone in this topic i'm going to
32:16 - explain typedefs and type aliases now
32:20 - typedef is a reserved keyword used to
32:22 - create an additional name for another
32:24 - data type kind of like a nickname it's a
32:26 - new identifier for an existing type one
32:29 - of the reasons that people use typedef
32:31 - is that it helps with readability and
32:32 - reduces typos here's an example in this
32:35 - example i'll need to include this header
32:38 - file
32:39 - include
32:40 - vector
32:41 - suppose we have this very long data type
32:44 - and i would like to give it a nickname
32:46 - an alias
32:48 - i would type the keyword typedef then
32:51 - list the original data type so we're
32:53 - used to strings ins doubles well here's
32:56 - a really complicated one and of course i
32:58 - don't expect anybody to know this at
33:00 - this level yet
33:01 - standard
33:03 - vector
33:06 - standard
33:07 - pair
33:10 - standard
33:11 - string
33:12 - int so this is one really long data type
33:16 - this could be a data type for a pair
33:18 - list but i don't want to have to type
33:20 - all of this so what i could do is give
33:22 - this data type an alias using this type
33:25 - dev keyword after the original data type
33:28 - i'll come up with a new name a new
33:29 - identifier let's say pair
33:32 - list
33:33 - that's a lot easier to write than all of
33:35 - this for the data type
33:37 - a common convention when using the
33:38 - typedef keyword the new identifier
33:41 - usually ends with underscore t for type
33:45 - now suppose i declare a variable of this
33:47 - data type
33:50 - standard vector standard pair standard
33:52 - string int let's say the name is pair
33:56 - list in place of using the original data
33:58 - type we can use the new identifier
34:04 - pair list underscore t so that's one of
34:06 - the main benefits of using the typedef
34:08 - keyword we can give a new identifier to
34:11 - an existing data type it helps with code
34:13 - readability and helps reduce typos this
34:16 - data type is way beyond our level of
34:18 - understanding right now let's try some
34:20 - simple examples i'll turn this line into
34:22 - a comment
34:25 - then get rid of that
34:26 - let's create a typedef for standard
34:29 - strings
34:30 - type
34:31 - def
34:32 - then we list the original data type
34:34 - standard string
34:36 - in place of using standard string as the
34:39 - data type i'll create a new identifier
34:40 - for this data type as maybe just text
34:44 - text underscore t if i need to create a
34:46 - string i could use this new identifier
34:49 - in place of saying standard string then
34:52 - maybe first name
34:55 - i can replace the data type with the new
34:57 - identifier if i choose to
34:59 - text t
35:01 - and i'll set my first name equal to
35:03 - whatever my first name is feel free to
35:05 - set it to your own first name and this
35:07 - variable behaves exactly like a string
35:10 - so let's display it standard output
35:13 - first name
35:17 - and then we should have our first name
35:21 - yeah there we are
35:23 - okay now let's try this with an integer
35:27 - type
35:28 - def we list the old data type int
35:31 - let's create an identifier for int as
35:34 - number
35:35 - that's more descriptive
35:36 - underscore t
35:38 - although it's more to write technically
35:40 - in place of using the int data type i
35:43 - could use
35:44 - number t and this is technically an
35:46 - integer
35:48 - let's say age then make up some age
35:51 - standard output i will display my age
35:54 - then i will add a new line
36:01 - yep we have our first name and our age
36:05 - now typedef has largely been replaced
36:07 - with the using keyword that's because
36:09 - the using keyword works better with
36:11 - templates which is a topic for another
36:13 - video so in place of using typedef i
36:16 - recommend using the using keyword
36:20 - so i'm going to turn these lines into
36:22 - comments
36:24 - now if we were to use the using keyword
36:26 - we would type using
36:28 - then the new data type
36:31 - so let's say text t
36:33 - equals the old data type
36:36 - standard string
36:39 - then let's do that with number
36:42 - using
36:43 - the new identifier number t
36:46 - equals int
36:48 - and that would work the same
36:50 - we have our first name and our age the
36:53 - using keyword is more popular than
36:55 - typedef nowadays just because it's more
36:57 - suitable for templates and like i said
36:59 - that's a topic for another video all
37:01 - right everybody that is the typedef
37:03 - keyword and type aliases typedef along
37:07 - with the using keyword they're used to
37:09 - create an additional name an alias or
37:12 - nickname for another data type it's a
37:14 - new identifier for an existing data type
37:17 - it helps with readability and it reduces
37:20 - typos however you should really only be
37:22 - using the typedef and using keywords
37:24 - when there is a clear benefit so yeah
37:26 - that is typedefs and type aliases your
37:29 - assignment is to post a typedef in the
37:31 - comments section down below and well
37:34 - yeah those are defs and type aliases in
37:37 - c plus
37:41 - all right everybody welcome we are going
37:43 - to discuss arithmetic operators
37:44 - arithmetic operators return the result
37:47 - of a specific arithmetic operation such
37:49 - as addition subtraction multiplication
37:52 - and division let's say we have 20
37:54 - students int
37:56 - students equals 20. if a new student
37:58 - joins our class we would like to add one
38:00 - student well if we're working with the
38:02 - variable we could say students equals
38:05 - whatever students is plus one then we
38:08 - could display this
38:10 - standard output i will display
38:12 - students the current number of students
38:14 - that we have
38:16 - are 21. there is a shorthand way of
38:18 - writing this too in place of saying
38:20 - students equal students plus one we
38:22 - could shorten this to
38:24 - students plus equals one that would do
38:27 - the same thing
38:29 - 21 if we need to add two students
38:32 - this would be students equal students
38:35 - plus two
38:36 - or
38:37 - students plus equals two
38:40 - then we have 22 students if you need to
38:42 - add one to a variable you could also use
38:45 - the increment operator this is another
38:47 - option and the preferred way if you only
38:49 - need to add one you would say
38:52 - students plus plus
38:54 - we now have 21 students you tend to see
38:57 - this in a lot of loops which we'll cover
38:59 - later okay now we have subtraction
39:03 - students equals students minus one
39:07 - there are now 19 students
39:09 - we could shorten this to
39:11 - students
39:13 - minus equals 1
39:15 - there are 19 students if you need to
39:17 - subtract 2 we could say either students
39:20 - equal students minus 2 or
39:22 - students minus equals 2.
39:25 - that would do the same thing
39:27 - there are 18 students another option is
39:29 - the decrement operator if you need to
39:31 - decrement a variable by one you would
39:34 - say
39:35 - students minus minus
39:37 - this only subtracts one from a variable
39:40 - there are 19 students so that's
39:42 - subtraction to use multiplication you
39:45 - use an asterisk i'm going to double the
39:47 - amount of students that we have
39:50 - students equals students times 2.
39:54 - there are 40 students
39:56 - or we could shorten this to
39:59 - students
40:00 - times equals 2.
40:02 - and again there are 40 students
40:05 - for division you use a forward slash
40:09 - i'm going to divide our class in half
40:12 - students equal students divided by two
40:16 - there are 10 students
40:18 - the shorthand way is students
40:21 - divided by equals 2.
40:25 - there are 10 students now check this out
40:27 - we have 20 students what if i divide
40:29 - students by 3
40:34 - we're working with an int variable so
40:36 - this variable can't hold any decimal
40:38 - portion 20 divided by 3
40:40 - that is 6. so any decimal portion is
40:43 - lost it's truncated
40:45 - but if we change students to be a double
40:48 - well then that decimal portion is
40:50 - retained 6.6 repeating students if you
40:53 - need the remainder of any division you
40:55 - can use the modulus operator let's
40:57 - create a new variable int remainder
41:01 - equals students modulus 2. we'll divide
41:04 - our group of 20 students into groups of
41:06 - two then i'll display the remainder
41:09 - okay 20 divides by two evenly so there's
41:11 - no remainder but what if we divide
41:14 - students by three and get the remainder
41:16 - our class of students is being divided
41:18 - into groups of three for maybe like a
41:20 - project but 20 doesn't divide by three
41:22 - evenly therefore our remainder is two
41:26 - there will be six groups of three
41:27 - students and one group of two students
41:29 - now using the modulus operator is a
41:31 - great way to find out if a number is
41:33 - even or odd take some value or variable
41:35 - you would like to check modulus 2. if
41:38 - that number divides by 2 evenly where
41:40 - the remainder is 0 well it's even if the
41:43 - remainder is 1 well then it's an odd
41:45 - number 21 doesn't divide by two evenly
41:48 - so that is the modulus operator it gives
41:50 - you the remainder of any division these
41:52 - arithmetic operators have an order of
41:54 - precedence we resolve any arithmetic
41:57 - operations that are first within
41:58 - parentheses then multiplication and
42:01 - division then lastly addition and
42:03 - subtraction perhaps we have this formula
42:07 - students equals
42:09 - 6
42:11 - minus 5 plus 4
42:15 - times 3 divided by 2. so what do we
42:18 - solve first in this equation we would
42:20 - check any parentheses first which there
42:22 - aren't any of
42:24 - then we resolve any multiplication and
42:26 - division
42:27 - so let's go through this so we have some
42:29 - multiplication here we would resolve
42:31 - four times three first that is twelve
42:33 - then we have some division twelve
42:35 - divided by two is six
42:37 - then any addition and subtraction
42:40 - six minus five is one
42:42 - one plus six is seven
42:44 - and let's check to see if that's right
42:46 - so students should be seven
42:48 - yep students is seven now you can force
42:51 - operator precedence by surrounding some
42:53 - part of your equation with parentheses
42:56 - i'll surround this part of the equation
42:57 - with the set of parentheses the new
42:59 - result is negative seven well yeah
43:02 - everybody those are some basic
43:04 - arithmetic operators they return the
43:06 - result of a specific arithmetic
43:08 - operation hey if you would like a copy
43:10 - of this code i'll post this in the
43:11 - comments section down below and pin it
43:13 - to the top and well yeah those are some
43:15 - basic arithmetic operators in c plus
43:17 - plus
43:20 - hey what's going on everybody in this
43:22 - video i'm going to explain very basic
43:24 - type conversion type conversion is the
43:27 - conversion of a value of one data type
43:30 - to another two ways in which we can do
43:32 - this are implicit and explicit implicit
43:35 - is done automatically if done explicitly
43:38 - we precede a value with the new data
43:40 - type within a set of parentheses you
43:42 - list the new data type put it before a
43:44 - variable or a value
43:46 - let's perform an implicit cast suppose
43:49 - we have variable
43:51 - int x
43:52 - i will assign x the value 3.14
43:56 - integers can only hold a whole number
43:58 - if i were to display x standard output x
44:04 - well the value is 3.
44:06 - we truncated the decimal portion and
44:09 - implicitly converted this number into an
44:11 - integer what if x was of the double data
44:14 - type
44:15 - double x
44:16 - equals 3.14
44:19 - well then we would retain that decimal
44:20 - portion what would happen if i cast
44:23 - 3.14 as an integer then assigned it to a
44:26 - double variable
44:28 - before the value
44:30 - add a set of parentheses then the new
44:32 - data type i will convert 3.14 to an
44:35 - integer
44:36 - then store it within the stubble x
44:38 - x now equals three it's a whole integer
44:41 - that is one example of implicit and
44:43 - explicit type conversion here's a few
44:45 - other examples i have character x
44:50 - equals some number like 100
44:53 - if i were to display what x was standard
44:56 - output
44:57 - x
44:58 - well we will implicitly cast this number
45:01 - 100 as a character will convert it using
45:04 - the ascii table to whatever its
45:06 - equivalent is
45:07 - the number 100 converted to a character
45:11 - is the letter d
45:13 - let's try an explicit cast
45:16 - i will display the number 100
45:19 - explicitly cast to a character
45:24 - and that value is the letter d as output
45:27 - how is this useful suppose we have an
45:29 - online exam we have to give the user a
45:31 - score how many questions did they get
45:33 - right divided by how many questions were
45:36 - total let's write something like this
45:38 - int correct equals maybe eight
45:42 - the user has eight questions that are
45:43 - right and questions
45:46 - equals 10. there are 10 total questions
45:49 - i need to calculate the score as a
45:51 - percentage
45:52 - we could say
45:54 - double score
45:56 - equals
45:57 - correct
45:58 - divided by questions
46:01 - times 100 then let's display whatever
46:04 - the result is standard output
46:07 - score
46:09 - then i'll add a percent sign to the end
46:13 - 8 divided by 10 is 0.8 right times 100
46:17 - that should give us 80
46:20 - uh we have zero percent
46:22 - well that's because we're using integer
46:24 - division questions is of the int data
46:27 - type when we're dividing 8 by 10 we're
46:30 - truncating that decimal portion we're
46:31 - getting rid of it then multiplying
46:33 - whatever remains by 100 i'm going to
46:36 - explicitly cast questions as a double of
46:39 - the double data type
46:41 - and we should retain that decimal
46:43 - portion
46:45 - yeah there we go 80
46:47 - where you'll use type conversion it
46:49 - really varies but you should be aware
46:50 - that you can do it such as when using
46:52 - integer division so yeah that's type
46:55 - conversion in c plus plus hey if you're
46:57 - enjoying this series let me know by
46:59 - smashing that like button leave a random
47:01 - comment down below and subscribe if
47:03 - you'd like to become a fellow bro
47:07 - all right let's get started everybody in
47:09 - this video i'm going to show you how we
47:10 - can accept some user input in c plus
47:13 - plus we're familiar with c out followed
47:15 - by the insertion operator which is two
47:18 - left angle brackets well to accept some
47:20 - input we would type c in for character
47:23 - input followed by the extraction
47:25 - operator which is two right angle
47:27 - brackets here's a demonstration let's
47:29 - ask a user for their name i'll create a
47:32 - string variable standard
47:34 - string
47:36 - the name will be well name then i'll
47:38 - create a prompt which will ask the user
47:40 - what their name is standard
47:42 - output
47:43 - insertion operator
47:46 - what's your name
47:49 - then to accept some user input we would
47:52 - type
47:53 - standard
47:54 - cn for character input
47:57 - extraction operator then where would we
47:59 - like to store the user input let's store
48:01 - it within our variable name at the end
48:03 - of our program let's display what the
48:05 - user's name is
48:07 - standard output
48:10 - insertion operator
48:12 - hello
48:15 - name okay we're going to have one
48:16 - problem though if we're using vs code as
48:19 - our text editor we need to begin using
48:21 - the terminal tab previously we've been
48:22 - using output so i can't actually type in
48:25 - anything to this because it's well for
48:26 - output if you're using vs code this is
48:29 - what we'll need to do if you're not you
48:30 - can skip this step we're going to go to
48:32 - file preferences
48:35 - settings
48:36 - look up code runner
48:39 - then we are looking for run in terminal
48:42 - which is right about here
48:46 - check that
48:47 - close this tab let's stop this from
48:49 - running
48:50 - and we'll run it again okay here we go
48:53 - what's your name i'll type in my first
48:55 - name hit enter
48:57 - hello
48:58 - bro or whatever your first name was this
49:00 - time let's ask a user for what their age
49:02 - is i'll store this within a variable
49:05 - named age
49:07 - int age
49:09 - standard
49:10 - output
49:13 - what's your age
49:17 - standard
49:19 - input
49:20 - extraction operator
49:22 - age
49:25 - standard
49:26 - output
49:27 - insertion operator
49:29 - you
49:30 - are
49:32 - age
49:34 - years
49:35 - old
49:37 - and i think we'll need some new line
49:39 - characters right about here just one
49:43 - okay this should work let's try it
49:47 - what's your name i'll type in my first
49:49 - name hit enter what's your age i'll make
49:51 - up an age i like to think that i'm 21
49:54 - still hit enter
49:55 - hello bro you are 21 years old so that's
49:58 - how to accept some user input you can
50:00 - use cn for character input but there's
50:03 - just one problem though if you type in a
50:06 - string that has spaces well once we hit
50:08 - a space we stop reading that string this
50:11 - time let's ask a user to type in their
50:13 - full name
50:15 - okay type in your first name and your
50:17 - last name
50:18 - hit enter what's your full name bro code
50:22 - what's your age hello bro you are zero
50:24 - years old if we need to read a string
50:27 - that could contain spaces there's a
50:29 - function that we can use to help us with
50:31 - that that is the get line function
50:35 - standard
50:36 - get line add a set of parentheses within
50:39 - the parentheses we will type standard
50:43 - c in then comma our variable name now we
50:47 - should be able to type in a string
50:48 - including any spaces
50:51 - what's your full name type in your own
50:53 - first name and last name
50:54 - hit enter what's your age i'll type in
50:57 - 21
50:58 - hello bro code you are 21 years old if
51:01 - you need to accept a string that
51:02 - includes any white spaces you're better
51:04 - off using the getline function and if
51:07 - you forget i'll post this in the
51:08 - comments section so you can always take
51:10 - a look at it if you don't remember okay
51:12 - there's just one issue with this though
51:13 - i'm going to move the second question
51:15 - above the first
51:19 - let's take a look to see what happens
51:21 - what's your age 21 what's your full name
51:24 - hello you are 21 years old here's the
51:27 - issue if we accept some user input with
51:29 - cn followed by get line well in our
51:32 - input buffer there's a new line
51:34 - character and we don't pick up that new
51:37 - line character when we reach the getline
51:39 - function it accepts the newline
51:41 - character that's still within the buffer
51:42 - so to prevent that from happening
51:44 - there's one change that we can make to
51:46 - the getline function
51:47 - after cn add this
51:50 - extraction operator
51:52 - standard ws for any white spaces this
51:56 - portion will eliminate any new line
51:58 - characters or any white spaces before
52:00 - any user input so let's try this again
52:03 - what's your age i'll type in 21 type in
52:05 - your full name
52:07 - and there we go hello bro code you are
52:09 - 21 years old so yeah everybody that's
52:12 - how to accept some user input basically
52:14 - you can just use cn followed by the
52:16 - extraction operator but if you need a
52:18 - string that could include spaces i
52:21 - recommend using the getline function so
52:23 - yeah that's how to accept some user
52:25 - input in c plus plus if you would like a
52:27 - copy of all this code i'll post this in
52:29 - the comments section down below and well
52:31 - yeah that's how to accept some user
52:33 - input in c plus
52:37 - hey guys in this video i'm going to show
52:39 - you eight useful math related functions
52:42 - in c plus plus let's begin by creating
52:44 - three variables
52:46 - double x and i will set this to be three
52:50 - double y that will be four
52:53 - then double z we will declare this but
52:56 - not yet assign it the first useful math
52:58 - related function is the max function
53:00 - which will return the greater of two
53:02 - values or variables
53:04 - i'll assign the result within z z equals
53:09 - standard max parentheses within the
53:12 - parentheses add two values or variables
53:15 - i'll compare x and y then let's display
53:18 - the result
53:19 - standard output i would like to display
53:21 - whatever z is
53:23 - the greater number between three and
53:24 - four as well you guessed it four
53:27 - alternatively there's the min function
53:30 - z
53:31 - equals standard
53:33 - min
53:34 - let's compare x then y
53:37 - so the minimum between these two values
53:41 - would be three
53:42 - so that's max and min
53:44 - now the rest of these functions are
53:45 - found within the c math header file at
53:48 - the top of our file let's include
53:51 - c
53:52 - math
53:53 - we have the pow function to raise a base
53:55 - to a given power
53:58 - z equals pow
54:00 - for power
54:01 - let's raise 2 to the power of 3
54:07 - z would be 8
54:09 - two to the power of four
54:11 - would be
54:13 - sixteen that's the power function
54:15 - then we have square root z equals
54:19 - sqrt what's the square root of nine well
54:22 - the square root of 9
54:25 - is 3
54:27 - then we have absolute value z equals abs
54:31 - if you place a negative number within
54:33 - the absolute value function it will give
54:35 - you the positive version of that number
54:37 - how far it is away from zero so negative
54:40 - three
54:41 - the absolute value of negative three
54:43 - would be
54:45 - three
54:46 - that is the absolute value function
54:48 - next we have the round function let's
54:50 - change x to 3.14
54:54 - z
54:55 - equals round let's round x
54:59 - 3.14 rounded
55:02 - would be 3. if you need to round up
55:05 - there's a ceiling function
55:07 - z equals seal seal means ceiling let's
55:11 - round x
55:13 - x rounded up
55:16 - is four
55:17 - alternatively there's the floor function
55:19 - which will always round down
55:21 - let's change x to 3.99 to test it
55:26 - z
55:27 - equals
55:28 - floor
55:30 - x
55:32 - x rounded down
55:34 - is three so yeah everybody that is a
55:37 - super quick video on a few useful math
55:39 - related functions
55:41 - if you head to this url c plus plus dot
55:43 - com slash reference slash c math there's
55:47 - a lot more useful math functions that
55:48 - you may be interested in but we just
55:50 - covered a few of the basics in the next
55:52 - topic we're going to create a practice
55:54 - program to find the hypotenuse of a
55:56 - right triangle so yeah those are a few
55:59 - useful math related functions in c plus
56:01 - plus
56:05 - okay everybody this is going to be a
56:07 - practice project to calculate the
56:09 - hypotenuse of a right triangle
56:11 - which we can find with this formula c
56:14 - equals the square root of a squared plus
56:16 - b squared we'll begin by declaring our
56:18 - variables
56:20 - double a
56:22 - double b
56:25 - double c
56:26 - make sure you include c math as well
56:28 - because we'll be using the power
56:30 - function as well as the square root
56:31 - function
56:32 - at this point we'll accept some user
56:33 - input for sides a and b
56:36 - standard
56:37 - output
56:39 - will create a prompt
56:41 - enter side a
56:46 - standard
56:48 - input
56:49 - a
56:52 - then we'll need side b
56:54 - standard
56:56 - output enter
56:59 - side b
57:02 - standard input
57:05 - b
57:08 - we can handle this formula step by step
57:10 - we could reassign a equal to
57:14 - power function
57:16 - a to the power of two
57:19 - b
57:20 - equals power function
57:22 - b to the power of two
57:25 - side c
57:27 - equals
57:28 - the square root
57:30 - of a plus b
57:34 - then at the end we will display whatever
57:36 - side c is
57:37 - standard
57:39 - output
57:42 - side c
57:47 - c
57:49 - okay let's try this
57:52 - enter side a
57:54 - i'll type in three
57:56 - side b will be four
57:58 - side c is five
58:00 - we could shorten this code too we could
58:02 - say the square root of
58:05 - a to the power of two
58:07 - plus b to the power of two
58:11 - then we no longer need these two lines
58:14 - that's another way of writing it in less
58:16 - lines of code let's try this again
58:20 - this time side a will be four
58:22 - side b will be five
58:24 - side c is six point four so yeah
58:27 - everybody that's a simple practice
58:29 - project
58:30 - just to get us used to accepting user
58:32 - input as well as some math related
58:34 - functions
58:35 - if you would like a copy of this program
58:37 - i'll post this in the comments section
58:38 - down below and well yeah that's a simple
58:41 - practice project in c plus
58:46 - all right guys we are on if statements
58:49 - with an if statement you do something if
58:51 - a condition you set is true if not then
58:55 - don't do it it's as simple as that we'll
58:57 - ask a user what their age is if their
58:59 - age is greater than or equal to 18
59:02 - they'll be allowed into our site if
59:03 - they're under 18 well we won't let them
59:05 - in let's declare variable age int
59:08 - age then we'll create a prompt
59:11 - standard
59:12 - output
59:14 - enter your
59:16 - age
59:19 - standard
59:21 - input
59:23 - age
59:24 - okay this is how to write an if
59:26 - statement you type if then a set of
59:28 - parentheses then a set of curly braces
59:31 - if some condition within the parentheses
59:34 - is true
59:35 - you perform some subset of code we are
59:37 - going to check if age is greater than or
59:41 - equal to 18. greater than or equal to is
59:44 - a comparison operator there's other
59:46 - comparison operators such as less than
59:48 - or equals to
59:50 - less than greater than
59:52 - if you need to compare if two values are
59:54 - equal you use two equal signs you don't
59:56 - want to say equals because then you're
59:58 - setting age equal to 18 equals is the
60:01 - assignment operator so let's check to
60:03 - see if age is greater than or equal to
60:05 - 18. then we'll print a message
60:07 - standard output
60:11 - welcome to the site
60:16 - okay let's try this
60:19 - enter your age
60:20 - let's say that i'm 12.
60:22 - well it doesn't do anything since this
60:25 - condition evaluated to be false we skip
60:28 - over this body of code
60:30 - if it were true then we execute it this
60:33 - time my age is 21 i hit enter
60:36 - welcome to the site if you would rather
60:38 - do something else if a condition is
60:40 - false you can use an else statement
60:42 - an else statement you will place at the
60:44 - end
60:45 - there is no condition
60:46 - else we will print
60:48 - standard output you are not old enough
60:53 - to
60:54 - enter okay let's try this again
60:58 - and to your age i'll say that i'm 12
61:01 - you are not old enough to enter that's
61:03 - an if statement if some condition is
61:05 - true you do something
61:07 - if not you can do something else or
61:10 - nothing at all there are more conditions
61:12 - you can check by using an else if
61:13 - statement we can check another condition
61:15 - by adding else if
61:19 - if this condition is false
61:21 - check this else if condition
61:23 - uh let's check to see if age is
61:26 - less than zero
61:28 - that means somebody hasn't been born yet
61:34 - you
61:34 - haven't been
61:36 - born yet
61:39 - okay now check this out
61:41 - let's say that my age is negative 10
61:45 - then i hit enter
61:47 - you haven't been born yet
61:49 - since this condition was false we
61:51 - skipped this section of code then we
61:53 - check the else if statement since this
61:56 - condition was true we execute this body
61:59 - of code then skip over the else
62:00 - statement let's add one more else if
62:03 - statement
62:04 - else if
62:07 - age is greater than or equal to 100
62:13 - standard
62:15 - output
62:18 - you are too old to enter this site
62:24 - okay enter your age i am 120 years old i
62:28 - hit enter
62:29 - welcome to the site we check these
62:31 - conditions one by one starting from the
62:33 - top we stated that our age was 120 years
62:36 - old even though we were expecting to
62:38 - execute this body of code we instead
62:40 - executed this body of code within the if
62:42 - statement that's because our age was
62:45 - technically still greater than or equal
62:47 - to 18. so the order of your if and else
62:50 - if statements does matter it makes a
62:51 - difference if we need to execute this
62:53 - body of code if somebody's age is
62:55 - greater than or equal to 100 well then
62:58 - we should probably move that to the top
63:00 - then turn it into an if statement
63:02 - else if age is greater than or equal to
63:05 - 18 we will display this message let's
63:07 - try this one more time and to your age i
63:09 - am 120 years old i hit enter
63:12 - you are too old to enter the site so
63:15 - yeah that's an if statement
63:17 - you do something if a condition is true
63:20 - if not then you don't do it if you would
63:22 - rather do something else you can use an
63:24 - else statement if there's other
63:25 - conditions you would like to check
63:26 - before reaching the else statement you
63:28 - can use an else if statement and there's
63:31 - really no limit to these if you would
63:33 - like a copy of this code i'll post this
63:35 - in the comments section down below and
63:36 - well yeah those are if statements in c
63:39 - plus
63:42 - all right everybody today we're going to
63:44 - discuss switches a switch is an
63:47 - alternative to using many else if
63:49 - statements it compares one value against
63:52 - many matching cases here's an example of
63:54 - what you don't want to do i have this
63:57 - program we have variable month month is
63:59 - of the integer data type the user will
64:01 - type in a number 1 through 12 to
64:03 - represent the month if month is equal to
64:06 - 1 it is january
64:08 - else if month is equal to 2 it is
64:10 - february else if month is three four
64:14 - five so on and so forth this is what you
64:16 - don't want to do because it's
64:18 - inefficient it's how the game yandere
64:20 - simulator was created if you know what
64:22 - that is a better solution would be to
64:24 - use a switch this is how to write one
64:26 - i'm going to delete all of this
64:29 - we will type switch parentheses curly
64:32 - braces what value would we like to
64:35 - examine against matching cases let's
64:37 - examine our month to write a case we
64:40 - would type case
64:42 - then the value let's check to see if
64:44 - month is equal to one
64:46 - so case one colon on the next line what
64:50 - we want to do if month is equal to one
64:53 - let's display a message
64:55 - standard output
64:58 - it is
64:59 - january
65:02 - at the end of this case add break to
65:04 - break out of the switch
65:06 - so that is case one let's work on case
65:08 - two
65:09 - so case two
65:11 - it is february
65:13 - i think the rest is self-explanatory
65:15 - i'll speed up the footage
65:41 - we have our 12 cases 1 through 12. each
65:44 - case corresponding with a month of the
65:46 - year
65:47 - let's run this
65:48 - enter the month
65:50 - let's say that the month is 4 for april
65:53 - it is april
65:55 - one more time
65:56 - the month is 12 it is december so a
65:59 - switch is an alternative to using many
66:01 - else if statements it's more efficient
66:03 - and easier to read if there are no
66:05 - matching cases we can execute a default
66:08 - case type
66:10 - default
66:12 - then what would we like to do
66:14 - standard output
66:16 - let's say please enter in only numbers
66:23 - 1 through 12.
66:31 - enter the month
66:32 - uh let's type negative 42.
66:36 - please enter in only numbers 1 through
66:38 - 12. so the default case is kind of like
66:41 - the else statement if there are no
66:43 - matching cases we execute whatever's
66:45 - within the default case let's try one
66:47 - more example this time we'll have a user
66:50 - enter in a character a letter grade will
66:52 - display a custom message depending on
66:54 - what grade they have
66:56 - char
66:58 - grid
67:00 - standard
67:02 - output
67:05 - what
67:06 - letter grade
67:11 - standard
67:13 - input
67:16 - grade
67:17 - then we'll create a switch
67:19 - switch parentheses curly braces
67:22 - we're examining our letter grade against
67:24 - matching cases the first case will be
67:27 - the character a
67:29 - what will we display if somebody
67:31 - receives an a
67:33 - standard output
67:36 - you did great
67:40 - then
67:40 - break case
67:43 - b
67:46 - standard
67:47 - output
67:50 - you
67:51 - did good
67:54 - then break
67:57 - case c
68:01 - standard
68:02 - output
68:06 - you did
68:08 - okay
68:10 - break
68:12 - case d
68:16 - standard output
68:19 - you did not
68:22 - do
68:23 - good
68:26 - break
68:28 - case f
68:32 - standard output
68:35 - you failed
68:39 - break then let's add a default case
68:48 - please
68:49 - only enter in a letter grade
68:54 - a through f
68:57 - let's try it
68:59 - what letter grade i received in a you
69:01 - did great
69:03 - what letter grade f
69:05 - you failed then let's test our default
69:07 - case what letter grid
69:09 - pizza
69:11 - please only enter in a letter grade a
69:13 - through f so yeah that's a switch
69:15 - everybody it's an alternative to using
69:18 - many else if statements it's more
69:20 - efficient and easier to read your
69:22 - assignment is to create a switch and
69:23 - post it in the comments section and well
69:25 - yeah those are switches in c plus
69:31 - hey guys in this video we're going to
69:33 - create a simple calculator program now
69:35 - that we know how switches work this will
69:37 - be a very simple program let's begin by
69:40 - declaring our variables at the top we'll
69:42 - need a character for an operator
69:44 - we'll name this op the operator will be
69:47 - either addition subtraction
69:48 - multiplication or division
69:51 - double
69:52 - num1
69:54 - double
69:55 - num2
69:57 - double result
69:59 - this next part isn't necessary but i'm
70:01 - just going to add one line of text when
70:03 - we begin the program
70:05 - i'll add a bunch of asterisks let's say
70:07 - calculator
70:12 - then i'll add a new line to the
70:14 - end wherever my program ends i will
70:17 - create another line of asterisks
70:22 - and i can get rid of that new line
70:24 - character
70:25 - our code for our program will be within
70:27 - these two lines of output let's ask the
70:30 - user what operand they would like
70:32 - standard output
70:36 - enter either
70:38 - addition subtraction multiplication or
70:41 - division
70:44 - standard
70:46 - input
70:48 - will store the response within the
70:49 - variable op
70:52 - standard output
70:55 - enter number one
71:02 - standard input
71:04 - num1
71:06 - let's copy these two lines
71:09 - paste them
71:10 - change one here
71:12 - and here
71:14 - now we need a switch
71:17 - switch parentheses curly braces
71:20 - we're examining our operator against
71:22 - matching cases
71:23 - the first case will be addition
71:27 - make sure the operand is within single
71:29 - quotes because it's a character
71:31 - if the user wants to add two numbers
71:33 - we'll take result equals num1 plus num2
71:39 - display the result
71:40 - standard output
71:42 - will display the word result
71:45 - followed by the variable result
71:48 - then i'll add a new line to the end
71:52 - then break then we need a case for
71:55 - subtraction
71:59 - case
72:00 - subtraction
72:02 - num1 minus num2
72:06 - multiplication
72:09 - case multiplication
72:11 - num1
72:13 - times num2
72:15 - then division
72:19 - case division
72:21 - num1 divided by num2
72:24 - what if somebody doesn't type in a valid
72:25 - operator let's add a default case
72:28 - default
72:31 - standard output
72:33 - that wasn't a valid
72:36 - response
72:40 - then break
72:41 - i'll add a new line too
72:44 - okay we are good to go let's save run
72:46 - this
72:51 - calculator
72:53 - let's add two numbers
72:55 - enter number one
72:56 - one point two three
72:59 - enter number two three point one four
73:01 - the result is 4.37
73:04 - let's run this again
73:07 - we will subtract two numbers
73:10 - 1.23
73:11 - minus 3.14 is negative 1.91
73:16 - let's multiply two numbers
73:18 - 1.23
73:22 - times 3.14
73:24 - that's 3.8622
73:28 - now we will divide two numbers
73:30 - 1.23
73:32 - divided by 3.14
73:34 - that is 0.39172
73:38 - let's type in an operator that's not
73:40 - valid
73:42 - how about a w
73:43 - enter number one 1.23
73:46 - 3.14
73:47 - that wasn't a valid response
73:50 - actually i think it would be better if
73:51 - we said that wasn't a valid operator
73:55 - all right everybody that is a simple
73:57 - calculator program in c plus using a
74:00 - switch
74:01 - if you would like a copy of this code
74:03 - i'll post this in the comment section
74:04 - down below if you're enjoying this
74:06 - series please let me know by smashing
74:08 - that like button leave a random comment
74:09 - down below and subscribe if you'd like
74:11 - to become a fellow bro
74:15 - okay guys we are talking about the
74:17 - ternary operator which is represented by
74:20 - a question mark followed by a colon it's
74:22 - a replacement to using an if else
74:25 - statement you write a condition then add
74:27 - a question mark kind of like you're
74:29 - asking a question
74:30 - is something true if that condition is
74:32 - true we can do some code if it's false
74:35 - we do some other code here's an example
74:38 - we have a grade my grade is 75. if grade
74:41 - is greater than or equal to 60 i'll
74:43 - output you pass
74:45 - else will output you fail my grade is 75
74:50 - therefore i pass another way of writing
74:53 - this is to use the ternary operator
74:55 - first we write a condition so let's get
74:57 - rid of this if statement
75:00 - after our condition we'll add a question
75:02 - mark
75:03 - now parentheses are optional then we
75:05 - write some expression
75:10 - standard output you pass
75:12 - we do this if our condition is true
75:14 - colon what will we do if that condition
75:17 - is false
75:18 - well let's use whatever's within our
75:20 - else statement
75:22 - and this would work the same if my grade
75:24 - is 75
75:28 - you pass
75:31 - if it's 50
75:35 - you fail
75:37 - let's come up with a few other examples
75:39 - let's check to see if a number is even
75:42 - or odd
75:44 - int number equals
75:47 - what about nine
75:48 - we write a condition
75:50 - we'll check if number
75:52 - modulus two remember modulus gives you
75:55 - the remainder of any division does
75:57 - number divide by two evenly so this
76:00 - returns a one or a zero if number
76:03 - modulus two
76:05 - is equal to 1
76:07 - question mark then let's display
76:13 - odd
76:15 - if it's false we'll display standard
76:18 - output
76:20 - even
76:23 - okay odd let's change number to eight
76:28 - now it's even you don't necessarily need
76:31 - equals one or equal zero the number 1
76:34 - does correspond to true and 0
76:36 - corresponds to false so you could write
76:38 - it like this too
76:40 - 8 divides by 2 evenly that's even
76:43 - if it's 9
76:45 - that is odd
76:47 - okay last example
76:49 - let's examine a boolean variable bull
76:52 - how about hungry is somebody hungry
76:55 - i'll set this to be true
76:58 - let's write our condition
77:01 - hungry
77:03 - equals true question mark now if you're
77:06 - examining to see if a boolean variable
77:08 - is true you don't necessarily need
77:11 - equals true you can just say that
77:13 - boolean variable hungry question mark
77:15 - like you're asking a question so if
77:17 - hungry is true
77:19 - we will do this standard
77:22 - output
77:24 - you are hungry
77:27 - colon
77:28 - what will we do if it's false standard
77:31 - output
77:33 - you
77:34 - are
77:35 - full
77:38 - hungry is set to true
77:41 - you are hungry if it were false
77:46 - you are full if we're displaying output
77:48 - there's a couple different ways in which
77:49 - we could write this it's up to you how
77:51 - you want to handle it
77:53 - so another way of writing the same code
77:54 - would be
77:56 - standard output
78:00 - then within a set of parentheses then we
78:02 - could use our canary operator
78:05 - hungry question mark
78:08 - you are hungry
78:12 - else
78:13 - you
78:14 - are
78:15 - full
78:17 - this would work as well let's just check
78:19 - that hungry is set to false
78:21 - you are full
78:23 - let's set it to true
78:27 - you are hungry so yeah that's the
78:29 - ternary operator everybody it's a
78:31 - question mark followed by a colon you
78:34 - write a condition as if you're asking a
78:35 - question if that condition is true you
78:38 - do some expression if not you do some
78:41 - other expression it's a replacement to
78:43 - an if else statement your assignment is
78:46 - to post a use of the trinary operator in
78:48 - the comments section and well yeah
78:50 - that's the ternary operator in c plus
78:52 - plus
78:55 - hey guys in this video i'm going to
78:57 - discuss the and or as well as not
79:00 - logical operators we'll begin with and
79:03 - the and logical operator will check to
79:05 - see if two conditions are true here's an
79:07 - example we'll ask a user what the
79:09 - temperature is int temp short for
79:12 - temperature
79:13 - standard output this will be a prompt
79:17 - enter the
79:18 - temperature
79:23 - standard
79:24 - input
79:25 - temp
79:27 - with the andological operator we check
79:29 - to see if two or more conditions are
79:31 - true let's see if our temperature falls
79:33 - within a certain range if
79:36 - condition then a set of curly braces
79:39 - we'll check to see if our temperature is
79:41 - above zero if temp
79:44 - is above zero
79:46 - and
79:47 - temp
79:48 - is less than let's say 30. in order for
79:52 - us to execute this if statement both of
79:54 - these conditions must be true
79:56 - this condition
79:58 - and this condition must be true if one
80:00 - of them is false we skip over this if
80:03 - statement so if our temperature falls
80:05 - within that range
80:08 - the
80:09 - temperature
80:11 - is
80:13 - good
80:16 - else
80:18 - standard
80:19 - output
80:22 - the temperature
80:26 - is bad
80:29 - okay let's try
80:30 - it enter the temperature uh let's say
80:34 - it's 25 degrees this will be in celsius
80:38 - the temperature is good
80:40 - let's try it again
80:41 - uh what about negative 100 degrees
80:44 - celsius uh the temperature is bad yeah
80:47 - no kidding one more time uh positive 100
80:51 - degrees celsius
80:52 - the temperature is bad so with the and
80:55 - logical operator we check to see if two
80:57 - or more conditions are true there's
80:59 - another way of writing the same program
81:01 - too we can use the or logical operator
81:04 - which is represented by two vertical
81:06 - bars it checks to see if at least one of
81:09 - two conditions are true
81:11 - if temp
81:13 - is less than or equal to zero
81:17 - or
81:18 - temp is greater than or equal to 30. the
81:21 - temperature is bad
81:23 - else the temperature is good
81:26 - in order for us to execute this if
81:28 - statement only one condition has to be
81:30 - true if both of them are false we don't
81:33 - do anything
81:34 - what's the temperature the temperature
81:36 - is 25 that's within that range
81:39 - the temperature is good
81:41 - one more time
81:42 - enter the temperature it is negative 100
81:45 - degrees celsius
81:46 - the temperature is bad
81:48 - all right so that's the and as well as
81:51 - the or logical operator there's one more
81:53 - the not logical operator which is an
81:56 - exclamation point it reverses the
81:58 - logical state of its operand meaning if
82:01 - a condition is true it becomes false if
82:04 - it's originally false it becomes true
82:06 - let's create another variable this will
82:08 - be a boolean sunny
82:11 - sunny can be true or false
82:14 - i'll write another if statement
82:17 - if
82:18 - sunny
82:19 - is equal to true
82:22 - now if you're examining to see if a
82:24 - boolean variable is true you don't
82:26 - necessarily need to say
82:28 - equals true you could just type the name
82:30 - of the boolean variable
82:32 - if sunny
82:34 - if sunny is true we'll display a message
82:38 - standard output
82:40 - it is sunny outside
82:46 - else
82:47 - standard
82:48 - output
82:50 - it is cloudy
82:53 - outside
82:55 - okay one more time
82:59 - enter the temperature it's 20 degrees
83:01 - celsius
83:03 - i should probably add some new line
83:04 - characters
83:06 - there enter the temperature it's 25
83:08 - degrees celsius the temperature is good
83:11 - it is sunny outside if we use the not
83:13 - logical operator we can precede a
83:15 - condition with an exclamation point
83:18 - we're checking to see if it's not sunny
83:21 - that means we would want to change our
83:22 - output
83:24 - it is cloudy outside else it is sunny
83:27 - outside
83:28 - let's change sunny to be false
83:31 - enter the temperature it is 50 degrees
83:33 - celsius
83:35 - the temperature is bad it is cloudy
83:37 - outside so yeah everybody those are
83:39 - logical operators and
83:41 - or
83:42 - not your assignment is to use either the
83:45 - and or or otherwise not logical operator
83:48 - then post it in the comment section down
83:50 - below whatever you wrote so yeah those
83:52 - are logical operators in c plus
83:57 - okay guys in this video we're going to
83:59 - create a temperature conversion program
84:02 - to convert from fahrenheit to celsius or
84:04 - celsius to fahrenheit at the top of our
84:07 - program let's declare our variables
84:09 - double temp
84:10 - temp is short for temperature
84:12 - then char unit
84:15 - will the user select celsius or
84:17 - fahrenheit
84:18 - now with my programs i like to add a
84:20 - title at the beginning
84:21 - standard output
84:27 - temperature
84:29 - conversion
84:31 - it's totally not necessary but it's
84:33 - something that i like to do
84:35 - then i'll add another line of output at
84:37 - the end of my program to show the user
84:39 - that the program is over
84:40 - i'll just add a bunch of asterisks
84:43 - like i said totally not necessary but
84:44 - it's something i just like to do i will
84:46 - display a couple lines of output
84:51 - f
84:52 - equals
84:54 - fair and height i can never spell
84:56 - fahrenheit right i think that's okay
84:59 - i'll add a new line
85:02 - standard
85:03 - output
85:05 - c equals
85:08 - celsius
85:10 - add a new line
85:13 - standard output
85:17 - what unit
85:18 - would
85:19 - you like to convert
85:23 - to
85:27 - standard input
85:29 - unit
85:32 - the user will hopefully type in f or c
85:35 - depending on what they want to convert
85:37 - to
85:38 - let's check to see if the user types in
85:40 - f first
85:41 - if
85:42 - unit
85:43 - is equal to the character f that's a
85:46 - capital left
85:47 - but you know maybe the user types in
85:49 - lowercase f i'll add an or conditional
85:51 - operator or unit
85:55 - is equal to
85:56 - a lowercase f that's also a valid
85:58 - response
86:00 - if the user would like to convert a
86:01 - temperature to fahrenheit
86:03 - these are the steps we can do
86:06 - standard
86:08 - output
86:10 - enter the
86:13 - temperature
86:15 - in
86:17 - celsius
86:23 - input
86:24 - temp to store the temperature
86:27 - to convert our temperature from celsius
86:29 - to fahrenheit we can assign temp
86:32 - equal to now here's the formula
86:34 - 1.8
86:36 - times
86:38 - our temp
86:39 - plus
86:40 - 32
86:43 - then we will display the temperature
86:45 - standard output
86:50 - temperature
86:53 - is
86:57 - temp
87:00 - degrees
87:02 - fahrenheit then i'll add a new line
87:06 - if the user would like to convert to
87:08 - celsius i'll add an else if statement
87:11 - else if
87:13 - unit is equal to
87:16 - the character capital c
87:18 - or
87:19 - unit is equal to the character lowercase
87:23 - c
87:25 - we can copy these two lines of code and
87:27 - reuse them
87:28 - we'll just repurpose them
87:30 - enter the temperature in fahrenheit
87:34 - here is the formula to convert from
87:35 - fahrenheit to celsius
87:38 - temp
87:39 - equals
87:41 - our current temperature minus 32
87:44 - divided by 1.8
87:48 - then let's display our temperature i'll
87:50 - copy this line of code paste it
87:54 - change fahrenheit to celsius
87:57 - now what if the user doesn't type in a
87:58 - valid response
88:00 - else
88:02 - standard output
88:05 - please enter in only c
88:08 - or f
88:12 - add a new line
88:14 - and that should be everything let's try
88:16 - this
88:18 - temperature conversion program what unit
88:21 - would you like to convert to i would
88:23 - like to convert to fahrenheit
88:25 - enter the temperature in celsius so
88:27 - what's zero degrees celsius converted to
88:29 - fahrenheit
88:32 - that is 32 degrees fahrenheit
88:34 - let's go again let's convert to celsius
88:38 - enter the temperature in fahrenheit
88:40 - what's 100 degrees in celsius
88:45 - 37.7 degrees celsius
88:48 - let's type in a response that's not
88:50 - valid
88:51 - uh i would like to convert to pizza
88:54 - please enter in only c or f
88:57 - all right everybody that is a program to
88:59 - convert from fahrenheit to celsius or
89:01 - vice versa i thought we could use some
89:03 - practice using conditional operators
89:06 - as well as if statements if you would
89:08 - like a copy of this code i'll post this
89:10 - in the comment section down below and
89:12 - well yeah that's a temperature
89:13 - conversion program in c plus plus
89:18 - hey what's going on everybody so in this
89:21 - video i'm going to explain some useful
89:23 - string methods that you might be
89:25 - interested in let's begin by creating a
89:27 - variable named name standard string
89:31 - name
89:32 - we'll accept some user input we'll need
89:34 - a prompt
89:35 - standard
89:36 - output
89:38 - enter your name
89:42 - a user's name may contain spaces we're
89:45 - better off using the getline function
89:47 - standard
89:50 - getline standard cn
89:56 - name the first useful method is the
89:58 - length method type your string name
90:01 - follow it with dot
90:04 - length parenthesis
90:06 - the length method will give you the
90:08 - length of a string let's write this
90:10 - within an if statement
90:12 - if
90:13 - name dot length method is greater than
90:16 - 12
90:17 - we'll print a message
90:19 - such as your name can't be over 12
90:21 - characters long
90:23 - standard output
90:26 - your
90:28 - name
90:29 - can't be over 12
90:32 - characters
90:36 - else will print a different message
90:38 - standard
90:40 - output
90:43 - welcome
90:47 - the user's name
90:49 - enter your name type in your full name
90:54 - welcome whatever your name is okay now
90:56 - what if our name is over 12 characters
91:01 - type in your full name
91:03 - then just add a bunch of characters
91:07 - your name can't be over 12 characters
91:09 - that is the built-in length method of
91:12 - strings you type a string follow it with
91:14 - dot length parenthesis wherever you
91:17 - invoke this method in that spot you will
91:19 - return the length of that string in
91:21 - characters the empty method will return
91:24 - if a string is empty or not
91:27 - type your string name
91:29 - dot empty parenthesis
91:32 - this returns a boolean value
91:35 - if
91:36 - name is empty
91:38 - will display a message
91:42 - you
91:42 - didn't enter your name
91:47 - else
91:52 - hello whatever your name is
91:58 - okay i'm just going to hit enter
92:00 - you didn't enter your name but if i do
92:02 - enter my name
92:04 - it works normally hello whatever your
92:06 - name is
92:07 - that is the empty method of strings
92:09 - you'll check to see if a string is empty
92:11 - or not a useful case of this is to check
92:14 - to see if somebody enters in some user
92:15 - input another is clear
92:18 - name dot clear
92:21 - then let's display our name
92:24 - standard output
92:27 - hello
92:30 - name
92:32 - enter your name type in your first name
92:34 - and last name
92:36 - hello and we don't have a name anymore
92:38 - because that name has been cleared
92:40 - so that is the clear method we can
92:43 - append a string to another string
92:45 - after my name i will use append
92:48 - parenthesis within the parentheses we
92:51 - can add a string to the end of another
92:53 - string i'll add at gmail.com
92:57 - standard output
93:01 - your username is now
93:07 - name
93:08 - enter your name
93:12 - your username is yourname
93:15 - with at gmail.com appended to it that is
93:18 - the append method
93:20 - we can return a character at a given
93:22 - position within a string
93:25 - standard output
93:27 - type your string name
93:29 - dot at parentheses
93:32 - so the first character in a string has
93:34 - an index of zero i'll display whatever
93:37 - that character is
93:39 - enter your name
93:41 - so the first character in my string is a
93:44 - capital b
93:45 - the character at index one
93:47 - well that would be
93:49 - r we can insert a character at a given
93:51 - position type your string
93:54 - follow it with insert
93:58 - there will be two arguments we'll list
94:00 - within the parentheses and index so the
94:02 - beginning of our string would have an
94:04 - index of zero comma then what would we
94:07 - like to insert i'll insert the at sign
94:09 - at the beginning of my name
94:12 - then let's display our name
94:22 - okay so we now have the at sign inserted
94:26 - at the beginning of our string or you
94:28 - could pick a different position the
94:29 - index of one would be the second
94:31 - character technically so yeah pick a
94:33 - position then you can insert a string
94:36 - now we can find a certain character i
94:38 - would like to find if there's any spaces
94:39 - within my name
94:41 - name dot find
94:43 - then place a character i'll look for any
94:46 - white spaces this method will give me
94:48 - the position of the first space type in
94:51 - your first name and last name
94:53 - the index of the first white space
94:55 - within my name has an index of three the
94:58 - first character is always zero zero one
95:01 - two three okay then lastly erase
95:04 - name
95:05 - dot erase
95:07 - we can erase a portion of a string we'll
95:10 - need a beginning index
95:12 - and an ending index i'll eliminate the
95:15 - first three characters then we will
95:17 - display our name enter your name
95:22 - okay and that's what's left of my name i
95:24 - deleted the first three characters
95:26 - the first number is the beginning index
95:29 - the second is the ending index it's not
95:31 - inclusive though so yeah those are a few
95:34 - helpful string methods if you would like
95:36 - to know more head to the string class on
95:38 - the cplusplus.com website and there's a
95:41 - fairly extensive list hey if you're
95:43 - enjoying the series let me know by
95:45 - smashing that like button leave a random
95:47 - comment down below and subscribe if
95:48 - you'd like to become a fellow bro
95:53 - hey everybody in this video i'm going to
95:55 - explain while loops a while loop is much
95:57 - like an if statement except we can
96:00 - repeat some code potentially an infinite
96:02 - amount of times here's an example of
96:04 - where a while loop would be useful let's
96:06 - say that we'll have a user enter in
96:08 - their name
96:09 - standard
96:10 - string
96:11 - name
96:12 - at first i'll use an if statement
96:15 - if
96:16 - name
96:17 - i'll check to see if the name is empty
96:19 - did the user actually type in something
96:22 - if name is empty we'll create a prompt
96:26 - standard output
96:30 - enter your name
96:34 - standard
96:36 - getline
96:38 - standard
96:39 - input
96:42 - name
96:43 - once we exit the if statement
96:46 - we'll display a message involving the
96:47 - user's name
96:49 - standard output
96:51 - hello
96:54 - name
96:56 - and to your name i'm just going to hit
96:57 - enter and not enter in anything
97:00 - hello
97:01 - and i don't have a name
97:02 - what if we need to force the user to do
97:05 - something in order to continue with the
97:06 - rest of the program well we could change
97:08 - this if statement to a while loop
97:14 - if this condition remains true we will
97:17 - execute this code a potentially infinite
97:20 - amount of times once we reach the end of
97:22 - this code block we check the condition
97:24 - again if it's still true we repeat the
97:27 - code again
97:28 - enter your name i'm going to hit enter
97:31 - enter your name no enter your name no
97:33 - enter your name no so i can't actually
97:36 - continue with the rest of my program
97:37 - until i type in something i'll type in
97:40 - my full name
97:41 - hit enter
97:42 - hello whatever your name is basically
97:45 - speaking a while loop is kind of like an
97:47 - if statement
97:48 - except it can repeat some code
97:50 - infinitely as long as this condition
97:52 - remains true we check this condition
97:54 - once when we enter the while loop then
97:56 - any time we finish the while loop we
97:58 - check the condition again if the
98:00 - condition is false we exit then continue
98:02 - on with the rest of the program you do
98:04 - want some way to exit the while loop
98:06 - let's write a condition that we won't be
98:08 - able to change at all
98:09 - while one is equal to one there's no way
98:12 - we can escape this while loop so this is
98:14 - what's known as an infinite loop i'll
98:16 - display a message
98:19 - help
98:20 - i'm stuck
98:22 - in an
98:23 - infinite loop
98:27 - then when i run this
98:28 - yeah we're stuck in an infinite loop and
98:30 - we can't actually move on or do anything
98:32 - so yeah that's basically a while loop
98:34 - everybody while some condition that you
98:37 - set remains true
98:39 - you will continue to execute some code a
98:41 - great use of a while loop is that you
98:43 - can force a user to do something in
98:45 - order to continue with the rest of the
98:47 - code your assignment is to use a while
98:49 - loop then post it in the comments
98:51 - section down below and well yeah those
98:53 - are while loops in c plus plus
98:58 - all right everybody do while loops a do
99:02 - while loop it does some block of code
99:04 - first and then you repeat that block of
99:07 - code if a condition is true here's an
99:10 - example let's write a program that will
99:12 - ask a user to enter in a positive number
99:14 - first we'll use a while loop that i'll
99:16 - demonstrate how a do-while loop would
99:18 - actually be better for the situation we
99:20 - have an integer number int
99:22 - number
99:24 - i'll write a while loop while
99:26 - number
99:28 - is less than zero
99:30 - we will prompt the user to enter in a
99:32 - positive number
99:35 - enter a
99:36 - positive number
99:40 - okay
99:40 - standard
99:42 - input
99:43 - number
99:44 - outside of the while loop at the end of
99:46 - our program let's display the number
99:49 - standard
99:50 - output
99:53 - the number
99:54 - is
99:57 - number
99:58 - so this isn't going to work normally
99:59 - here's why let's run this
100:02 - the number is zero so this is what's
100:04 - going on we've declared our number but
100:06 - have not assigned a value quite yet when
100:08 - we reach the while loop we check the
100:10 - condition if the condition is true we
100:13 - execute this block of code since we've
100:15 - declared an integer variable but have
100:17 - not assigned it a value it's defaulting
100:19 - to just zero zero is not less than 0 so
100:23 - this condition is false that means we
100:25 - skip the while loop and continue on
100:27 - another way in which we could write this
100:29 - but it's not the best solution is that
100:31 - we could copy what's within this block
100:33 - of code
100:34 - then run it once if number is still less
100:37 - than zero we would then execute this
100:39 - block of code repeatedly let's try this
100:42 - again
100:43 - okay enter a positive number one two
100:45 - three the number is one two three let's
100:48 - type in a negative number negative one
100:50 - enter a positive number negative one
100:52 - enter a positive number negative one
100:55 - so i can't actually continue until i
100:57 - enter in a positive number you know this
101:00 - does work but there's a much better way
101:02 - of writing this because you know we're
101:03 - repeating at least two lines of code
101:05 - when we really don't need to we need to
101:08 - run this block of code once and then
101:10 - repeat it if this condition is true well
101:12 - you know what would be great for that a
101:14 - do while loop let's eliminate these two
101:16 - lines of code to create a do while loop
101:18 - we will move this condition to the end
101:21 - while then our condition preceding the
101:24 - left curly brace write do
101:27 - do this code once and then check the
101:29 - condition
101:30 - make sure you have a semicolon at the
101:32 - end
101:33 - let's try it again
101:35 - enter a positive number i'm just going
101:36 - to type in a negative number negative
101:38 - one nope negative one nope how about a
101:41 - positive number one two three the number
101:43 - is one two three so that's a do while
101:46 - loop you do some block of code first
101:48 - then you repeat it again if the
101:49 - condition is true it's an optional way
101:52 - to repeat some code one good use of a do
101:54 - while loop that comes to mind maybe
101:55 - we're playing a game we would like to
101:57 - run the game once at the end of the game
101:59 - a user can choose if they would like to
102:01 - play again based on the user's input if
102:03 - they would like to play again we can run
102:04 - the game one more time repeatedly so
102:07 - that's a do while loop everybody i'll
102:08 - post this code in the comments section
102:10 - down below and well yeah that's a do
102:12 - while loop in c plus
102:17 - alright guys in this video i'm going to
102:18 - explain for loops a for loop is a loop
102:21 - that will execute a block of code a
102:24 - specified amount of times to create a
102:26 - for loop we type four parentheses curly
102:29 - braces within the for loop there are up
102:32 - to three statements that we can add the
102:34 - first is that we can create an index a
102:36 - sort of counter
102:38 - int
102:39 - index i'll set the sequel to be
102:42 - we'll start at one then finish the
102:44 - statement with a semicolon now what a
102:47 - lot of people do instead of saying index
102:49 - they'll just shorten this to i
102:51 - the second statement is a stopping
102:53 - condition let's count up to three i'll
102:56 - continue this as long as i
102:58 - is less than or equal to three then
103:01 - semicolon to finish that statement the
103:04 - third statement is that we can increment
103:06 - or decrement our counter our index i'll
103:09 - increment my index by one by saying i
103:12 - plus plus okay let's repeat something
103:14 - three times
103:15 - standard
103:17 - output
103:19 - how about happy new year
103:21 - happy new
103:22 - year
103:25 - this code should be repeated three times
103:31 - happy new year happy new year happy new
103:33 - year i should probably add a new line
103:36 - now let's try this five times
103:38 - we'll begin i at one
103:40 - we'll continue this as long as i is less
103:43 - than or equal to five
103:45 - okay
103:46 - one two three four
103:49 - five that's it this time let's count up
103:52 - to 10
103:53 - then display happy new year once we exit
103:56 - out of the for loop
103:57 - i'll move this line to outside of the
103:59 - for loop
104:01 - i'll set i to be 1. we'll continue this
104:04 - as long as i is less than or equal to
104:06 - 10.
104:07 - during each iteration of the for loop i
104:10 - will display whatever i is
104:12 - standard output i
104:15 - then i'll add a new line
104:19 - okay
104:22 - here we go
104:25 - we're starting at one
104:27 - then we're counting up to ten
104:29 - then we escape the for loop once we
104:31 - escape the for loop then we print happy
104:33 - new year when you increment or decrement
104:35 - your counter you can skip iterations
104:38 - let's increase i by 2 after each
104:40 - iteration
104:41 - i plus equals 2.
104:44 - now we're counting up by twos
104:47 - one three five seven nine happy new year
104:50 - we can even set our index to be a
104:51 - different number let's begin at zero
104:53 - we're still counting up by twos
104:55 - zero two four six eight happy new year
104:58 - we could even increment i by three
105:02 - zero three six nine happy new year or we
105:05 - could decrement and go backwards
105:07 - i minus minus
105:09 - this time we will begin at ten then
105:11 - continue as long as i is less than or
105:14 - equal to zero
105:16 - so this would be a countdown ten nine
105:18 - eight seven six five four
105:21 - three two one zero happy new year okay
105:24 - let's decrement i by two after each
105:26 - iteration i minus equals two
105:30 - ten eight six four two zero happy new
105:33 - year so yeah everybody that's a for loop
105:35 - there's a lot of overlap where you could
105:37 - use either a while loop or a for loop
105:39 - for loops tend to be better in
105:41 - situations where you only need to repeat
105:43 - code a certain amount of times your
105:45 - assignment is to post a use of the for
105:47 - loop in the comment section down below
105:49 - and well yeah those are for loops in c
105:51 - plus plus
105:55 - hey everybody so in this video i'm going
105:57 - to explain the break and the continue
105:59 - keywords the break keyword will break
106:01 - out of a loop another place where you
106:03 - see this is a switch within a switch
106:05 - statement continue we'll skip the
106:07 - current iteration here's an example
106:09 - let's create a for loop that will count
106:10 - up to the number 20. i'll set i equal to
106:13 - b1
106:14 - i will continue this as long as i is
106:16 - less than or equal to 20 then increment
106:20 - i by 1
106:21 - standard output i'll display whatever i
106:24 - is then i'll add a new line
106:27 - new line
106:29 - then let's take a look so we have the
106:31 - numbers 1 through 20. i would like to
106:34 - skip the number 13 because 13 is
106:37 - considered an unlucky number i know it's
106:38 - a weird example what i'll do is use an
106:41 - if statement within my for loop
106:43 - if
106:44 - i
106:45 - is equal to 13
106:47 - first we'll break then see what happens
106:50 - if we break where i equals 13
106:54 - then we have the numbers one through
106:56 - twelve once we hit 13 we break out of
107:00 - the loop we do not finish the rest of
107:02 - the iterations if we replace break with
107:04 - continue
107:07 - this is instead what happens
107:10 - we have the numbers 1
107:12 - through 20 but the number 13 isn't there
107:16 - so using the continue keyword we skip
107:19 - the current iteration
107:20 - so yeah that's the break and the
107:22 - continue keywords these keywords are
107:24 - available if you need them but where
107:26 - you'll use them it really depends but
107:28 - just so you know they exist and that is
107:30 - the break and the continue keywords in c
107:33 - plus
107:36 - all right guys we are on nested loops a
107:39 - nested loop is just a loop that's inside
107:42 - of another loop it doesn't matter what
107:44 - kind of loop you're working with it can
107:45 - be a while loop or a forward loop or
107:47 - whatever here's an example we'll create
107:50 - a loop to count the numbers 1 through
107:52 - 10. we'll count to 10 three times
107:55 - so let's create a basic loop for now
107:58 - and i i'll set this equal to b
108:01 - 1
108:02 - the condition will be i is less than or
108:04 - equal to 10
108:06 - then i will increment i by one
108:09 - during each iteration
108:11 - i will display
108:12 - whatever i is
108:14 - then i'll add a space
108:19 - there
108:22 - this loop will count up to 10
108:25 - just like that so now i would like to
108:27 - count up to 10 three times well i can
108:29 - stick this loop in another loop
108:32 - so let's create the outer loop
108:36 - 4
108:37 - and i i'll set this equal to b1
108:40 - i'll continue this as long as i is less
108:43 - than or equal to 3
108:45 - then increment i by one
108:47 - so i'm going to take this loop
108:50 - and stick it within the curly braces of
108:52 - the outer for loop
108:54 - however you don't want these loops to
108:56 - have the same index
108:58 - a common naming convention for the inner
109:00 - loop is to use j as the counting index
109:04 - j j
109:05 - j
109:06 - j
109:07 - okay let's take a look
109:10 - okay now we count up to 10 three times
109:15 - but what i think i'm gonna do is that
109:16 - every time we exit the for loop the
109:19 - inner for loop i'll just print a new
109:20 - line character
109:23 - standard output
109:26 - new line
109:29 - yeah that's much better
109:31 - so yeah a nested loop is just a loop
109:32 - inside of another loop
109:34 - just as a practice project let's create
109:36 - a program that will print a rectangle
109:38 - made out of symbols we'll let a user
109:40 - specify how many rows and columns we'll
109:43 - use our nested loop that we created
109:45 - previously
109:46 - so we have int rows
109:49 - int
109:50 - columns
109:51 - then char
109:53 - symbol
109:55 - we're gonna ask for some user input
109:56 - we'll need some prompts
109:58 - standard output
110:00 - how many rows
110:06 - standard
110:07 - input
110:09 - rows
110:11 - let's copy this paste it
110:14 - change rows to columns
110:19 - then
110:22 - enter a symbol to use
110:28 - standard input
110:30 - symbol
110:32 - we'll continue printing rows as long as
110:34 - i is less than or equal to rows whatever
110:38 - we typed in we don't want any more rows
110:40 - than what the user wants the inner loop
110:42 - is going to be in charge of the columns
110:44 - j is less than or equal to columns
110:50 - in place of printing j
110:52 - let's print our symbol whatever the user
110:54 - picked
110:55 - and we do not need to separate these
110:57 - with any spaces all right let's try this
111:01 - how many rows what about three rows
111:05 - then
111:06 - six columns
111:07 - enter a symbol to use what about the at
111:10 - sign
111:11 - and there's our rectangle there's three
111:14 - rows
111:16 - and six columns
111:18 - let's try it one last time
111:21 - how about four rows and five columns
111:24 - i'll use a dollar sign
111:26 - okay we have four rows one two three
111:29 - four five columns one two three four
111:32 - five
111:33 - so yeah everybody that's a nested loop
111:35 - it's a loop that's inside of another
111:37 - loop when you'll use these it really
111:39 - depends on the situation i thought this
111:41 - would be a fun practice project if you
111:43 - would like a copy of this code i'll post
111:45 - this in the comments section down below
111:47 - and well yeah those are nested loops in
111:49 - c plus
111:53 - hey this is bro from the future before
111:55 - you begin this topic to work with random
111:57 - numbers you may need to include this
111:59 - header file c time hey everybody in this
112:02 - video i'm going to show you how we can
112:04 - generate some random numbers just so you
112:06 - know these are pseudo-random numbers
112:09 - they're not truly random but they're
112:11 - close maybe if you need to roll a
112:13 - six-sided dice for a game well then this
112:15 - would work perfect to generate some
112:17 - random numbers we'll need to initialize
112:19 - the random number generator by typing s
112:22 - rand add a set of parentheses semicolon
112:26 - within the s rand function we'll need a
112:28 - seed what programmers typically do is
112:31 - that they'll use the current calendar
112:33 - time as a seed
112:34 - within the parentheses type time
112:37 - parentheses again then pass in null
112:40 - i'll store the first random number
112:42 - within a variable
112:43 - int num
112:45 - equals to generate a random number we
112:48 - invoke the rand function then i'll
112:50 - display this
112:51 - let's take a look to see what we have
112:53 - standard output num
112:57 - okay the random number that we have is
112:59 - 3231.
113:02 - using the rand function this will
113:04 - generate a random number between 0 and
113:07 - 32 767
113:09 - but we don't necessarily need a number
113:11 - that large i just need to roll a six
113:13 - sided dice well what we're going to do
113:15 - is follow this with modulus then the
113:18 - range of numbers we would like if i'm
113:20 - rolling a six sided dice i'll type
113:22 - modulus 6. modulus gives you the
113:25 - remainder of any division so take
113:27 - whatever number we roll divide it by 6
113:30 - take the remainder and that's our number
113:33 - but there's one issue with this
113:35 - we have 5
113:37 - 2
113:37 - and 0.
113:38 - technically the range of numbers is
113:40 - currently zero through five if we need
113:43 - one through six
113:44 - what we can do is add one
113:48 - plus one
113:49 - this should give us a random number
113:51 - between one and six
113:55 - there it is six so i tend to play a lot
113:58 - of dungeons and dragons there's
114:00 - polyhedral dice one die that we commonly
114:02 - roll is a 20-sided dice so if i would
114:05 - need a random number between 1 and 20 i
114:08 - would say rand function modulus 20.
114:11 - my random number
114:13 - is 1. wow that's surprisingly low
114:16 - then i have a 14. maybe you need a
114:18 - random number between 1 and 100 rand
114:21 - function modulus 100
114:24 - my random number between 1 and 100 is
114:27 - 67. now i need to roll three six-sided
114:30 - dice
114:31 - i'm going to create three variables
114:34 - let's name this num1
114:37 - rand function modulus 6 plus 1.
114:40 - then let's copy this paste it twice we
114:43 - have num1 num2 num3
114:47 - let's display num1 i'll add a new line
114:52 - then do this two more times for num two
114:56 - and num three
114:57 - so our three dice that we're rolling are
115:01 - five two two
115:03 - then again 3 1 4.
115:06 - yeah everybody that's how to generate
115:08 - some pseudo random numbers they're not
115:11 - truly random but they're close if you
115:13 - have a simple game you're working on
115:15 - this would work perfect if you would
115:16 - like a copy of this code i'll post this
115:18 - in the comments section down below and
115:20 - well yeah that's how to generate some
115:22 - random numbers in c plus plus
115:26 - hey everybody in this topic we're going
115:28 - to create a random event generator using
115:31 - random numbers and a switch this might
115:33 - be useful maybe if you're writing a game
115:36 - you need some random event to occur like
115:38 - random monster show up or the weather
115:40 - changes anything like that we'll be
115:42 - working with random numbers you may need
115:44 - to include this header file
115:46 - include
115:47 - c time
115:49 - because we need access to the time
115:50 - function to work with random numbers
115:52 - we'll need to generate a seed
115:55 - srand function pass in time
115:58 - pass in zero
116:00 - this function will use the current time
116:02 - as a seed to generate random numbers
116:05 - we'll create a local variable to store
116:07 - our random number int
116:10 - rand num
116:11 - equals
116:13 - use the rand function
116:15 - modulus
116:17 - then what's the range of numbers you
116:19 - would like i would like the numbers one
116:21 - through five
116:22 - but this will give us zero through four
116:24 - so i'm going to add one to the end
116:28 - my integer randomnum will be a random
116:30 - number between 1 and 5.
116:33 - i'm going to create a switch to examine
116:35 - this random number against many matching
116:37 - cases
116:39 - so we have case
116:40 - 1 through five
116:46 - if the random number is one what would
116:48 - you like to do exactly
116:50 - so in this program i think we're going
116:52 - to give away prizes like it's a random
116:54 - prize generator depending on the random
116:56 - number we'll give a participant a random
116:58 - prize
117:00 - standard output
117:02 - you win
117:04 - how about a bumper sticker a bumper
117:07 - sticker
117:09 - that will be the lowest tier prize
117:12 - then we should probably add a break to
117:14 - break out of the switch
117:17 - okay let's think of some others
117:24 - i should probably break after these
117:34 - prize 2 will be a t-shirt
117:39 - prize three how about a free lunch
117:44 - prize for
117:46 - maybe a gift card
117:49 - case five
117:51 - concert tickets that sounds good
117:54 - so when i run this program we'll
117:56 - generate a random number between one and
117:58 - five depending on what that number is
118:00 - we'll execute the code found within one
118:02 - of these cases
118:06 - let's see what i won i want a free lunch
118:09 - if i try this again there's a good
118:11 - chance it'll be a different prize
118:13 - this time i want a bumper sticker
118:17 - i want a bumper sticker again come on i
118:19 - want those concert tickets
118:21 - i'll take a gift card that's not bad
118:24 - now if you don't add these break
118:25 - statements
118:26 - you'll just fall through the switch
118:33 - you want a gift card you want concert
118:35 - tickets
118:36 - so if you only want somebody to win one
118:38 - prize you'll want to exit out of the
118:40 - switch by including this break statement
118:42 - so yeah everybody i thought that might
118:43 - be an interesting program you can
118:45 - generate some random event maybe it's
118:47 - for a game or something i thought maybe
118:49 - a random prize giveaway would kind of be
118:51 - interesting this program is more or less
118:53 - for practice your assignment is to write
118:55 - a switch with some random events then
118:57 - post it in the comment section down
118:59 - below and well yeah that's a random
119:01 - event generator using c plus plus
119:06 - all right welcome back everybody in this
119:09 - video we're going to create a simple
119:11 - number guessing game let's declare our
119:13 - variables int num our number will be
119:16 - randomly generated
119:18 - and guess
119:19 - this variable will hold the current
119:21 - player guess
119:23 - and tries how many tries is it going to
119:26 - take for the user to guess the correct
119:28 - number we'll be using the s rand
119:30 - function to generate some random numbers
119:33 - pass in time
119:34 - pass and null
119:36 - we will assign our variable num
119:39 - a random number between 1 and 100
119:41 - rand
119:42 - function modulus 100
119:47 - then add 1.
119:50 - this function will give us a random
119:51 - number between 1 and 100 start with the
119:53 - num
119:54 - just for some decorations i'm going to
119:56 - create a title for this game
120:01 - number guessing game
120:06 - then add a new line
120:09 - i'll place all of this code within a do
120:11 - while loop
120:12 - do
120:14 - while
120:16 - our guess does not equal num we will
120:20 - have the user type in another guess
120:22 - we'll create a prompt
120:24 - standard output
120:27 - enter a guess
120:30 - between
120:33 - 1
120:34 - through 100
120:40 - standard input
120:43 - guess
120:44 - once the user types in a guess we will
120:46 - increment our tries variable by one to
120:49 - keep track of the score
120:52 - now we'll have to examine the guess
120:54 - versus the number
120:58 - if
121:00 - guess
121:01 - is greater than num
121:04 - let's display
121:09 - too
121:09 - high
121:11 - i'll add a new line
121:15 - else if
121:19 - guess is
121:20 - less than num
121:23 - then we'll display
121:27 - too
121:28 - low
121:30 - else
121:32 - if the guess is not above the number and
121:34 - the guess is not below the number the
121:36 - guess must be equal to the number
121:40 - standard
121:41 - output
121:45 - correct
121:47 - we'll display the number of tries
121:49 - number of tries
121:53 - we'll display our tries variable
121:57 - i'll add a new line
122:02 - and i'll just add a line of text for
122:04 - decoration at the bottom once we exit
122:06 - the game
122:10 - that should be everything let's run this
122:13 - number guessing game i'll guess
122:15 - something right in the middle 50. too
122:18 - low
122:19 - okay so the number is between 50 and
122:20 - 100.
122:22 - i'll guess right in the middle of that
122:23 - range 75
122:25 - too high
122:26 - something between 50 and 75
122:29 - perhaps
122:30 - 62. that's still too high
122:33 - 56
122:35 - too high
122:36 - 53
122:38 - too low
122:40 - 54.
122:42 - 55.
122:43 - all right the correct guess was 55 it
122:46 - took me seven tries
122:48 - i don't really think that's too good but
122:50 - it works
122:51 - okay everybody that is a simple number
122:53 - guessing game involving the use of do
122:55 - while loops and generating random
122:57 - numbers
122:58 - if you would like a copy of this code
123:00 - i'll post this in the comments section
123:01 - down below if you're enjoying this
123:03 - series please let me know by smashing
123:05 - that like button leave a random comment
123:06 - down below and subscribe if you'd like
123:08 - to become a fellow bro
123:12 - well well well everybody we have a
123:15 - pretty important lesson today today
123:16 - we're going to talk about functions a
123:18 - function is a block of reusable code if
123:21 - you ever think that you're going to use
123:23 - some section of code more than once you
123:25 - might as well stick it within a function
123:26 - here's an example i'll create a function
123:28 - to sing happy birthday currently our
123:30 - program is within the main function to
123:33 - begin the program we call the main
123:35 - function before the main function we can
123:37 - create a new function for the time being
123:39 - we're going to type
123:41 - void
123:42 - then a unique function name the function
123:45 - name should be descriptive of what it
123:46 - does if i'm going to sing happy birthday
123:49 - let's name this function
123:50 - the happy birthday function
123:53 - then add a set of parentheses then a set
123:55 - of curly braces
123:56 - you can see that this is almost
123:58 - identical to our main function except
124:00 - with the main function we have a return
124:01 - type and return zero what would we like
124:04 - to do when we invoke this function let's
124:06 - sing some of the lyrics to happy
124:08 - birthday standard output
124:12 - happy
124:14 - birthday to you
124:16 - i'll add a new line
124:18 - i'll repeat this a couple times
124:22 - happy birthday dear you
124:25 - happy birthday to you
124:27 - to invoke this function all we have to
124:29 - do is within the main function type the
124:31 - function name followed by a set of
124:33 - parentheses
124:35 - this will call or otherwise known as
124:38 - invoke the function i like to think of
124:39 - the parentheses as a pair of telephones
124:41 - that are talking to each other to use a
124:43 - function you have to call the function
124:45 - call it up on the phone so when i run
124:47 - this code
124:48 - we have the lyrics to happy birthday
124:51 - this function is reusable i can call
124:53 - this function as many times as i want
124:56 - i'll call this function two additional
124:57 - times just to separate these lyrics i'm
125:00 - going to add an additional new line
125:01 - character
125:03 - okay we now should have three verses of
125:06 - happy birthday one
125:08 - two
125:09 - three that's because i called the
125:11 - function well three times
125:14 - a function is just a block of reusable
125:16 - code now what a lot of people do is that
125:18 - they'll declare and define their
125:20 - functions after the main function
125:22 - because it's more readable to many
125:24 - people but there's one issue with this
125:27 - happy birthday was not declared in this
125:29 - scope
125:31 - our programs are read from the top down
125:33 - since we're invoking the happy birthday
125:35 - function before we even know what it is
125:37 - while the compiler doesn't recognize it
125:39 - a solution to this is that before the
125:41 - main function
125:42 - you can declare functions but define
125:44 - them later let's declare happy birthday
125:47 - before the main function
125:50 - then make sure you add a void or a
125:52 - return type
125:54 - so void happy birthday
125:56 - we can now use this function even though
125:58 - it's after the main function
126:02 - a lot of people like to define their
126:03 - functions after the main function it's
126:05 - another way in which you can write it
126:07 - just be sure to at least declare them
126:09 - before the main function now check this
126:10 - out what if we have a variable
126:13 - standard
126:15 - string name
126:17 - assign this whatever your name is
126:20 - i'm going to use this name that's
126:22 - declared in the main function
126:24 - and use it within the happy birthday
126:26 - function
126:28 - let's replace u with the user's name
126:31 - happy birthday to name
126:34 - i'll add a new line
126:38 - then i'll copy this
126:40 - paste it
126:43 - and let's change this line as well
126:54 - all right now when i run this
126:56 - here's the issue
127:00 - name was not declared in the scope
127:02 - think of each function as a house the
127:05 - main function is your house functions
127:07 - outside of the main function would be
127:09 - your neighbors their house functions
127:11 - can't see what's going on inside of
127:13 - other functions you can't see what's
127:15 - going on inside of your neighbor's house
127:17 - you're only familiar with what's going
127:18 - on inside of your own house in order for
127:21 - the happy birthday function to use the
127:22 - main function's name variable it needs
127:25 - to be made aware of it to do that when
127:27 - you invoke a neighboring function you
127:29 - can pass that variable or some other
127:31 - value as an argument so within the
127:33 - parentheses when you invoke that
127:35 - function
127:36 - place your values or variables i would
127:38 - like to make my happy birthday function
127:40 - aware of this name variable within the
127:43 - main function
127:44 - when you send some data over to a
127:46 - function that data is also known as an
127:48 - argument however the receiving function
127:51 - needs a matching set of what are called
127:53 - parameters if this function is going to
127:55 - receive this data this name you need a
127:58 - matching parameter to set up a parameter
128:01 - you first list the data type we will
128:03 - receive a standard
128:06 - string
128:07 - then we can list a parameter name
128:09 - let's say name now this happy birthday
128:12 - function can use this name variable
128:14 - within the main function if you have a
128:16 - function declaration at the top of your
128:18 - program you'll have to add that
128:19 - parameter there as well
128:21 - so happy birthday standard string
128:25 - and we can run this happy birthday to
128:27 - whatever your name is functions aren't
128:30 - aware of what's going on inside of other
128:31 - functions but you can make them aware of
128:34 - any local variables or values by passing
128:36 - them as an argument but you'll need a
128:38 - matching set of parameters the name or
128:41 - otherwise unique identifier of your
128:43 - parameter doesn't necessarily need to
128:45 - have the same name so to say you can
128:48 - name it something else instead of naming
128:50 - our parameter name let's say
128:53 - birthday boy or birthday girl
128:57 - happy birthday to birthday boy
129:01 - and that should work the same so you can
129:04 - rename parameters but let's revert that
129:06 - back
129:07 - now let's pass an age int age
129:10 - equals make up some age i would like to
129:13 - send my age over to the happy birthday
129:15 - function so i will pass that as an
129:18 - additional argument separate each
129:20 - argument with a comma
129:21 - we'll send our name as well as age now
129:24 - we need a matching set of parameters
129:26 - right now the happy birthday function is
129:28 - only equipped to receive a name so
129:31 - we list the data type and age
129:34 - and if you have a function declaration
129:36 - change that there as well
129:39 - then i'll add one more line
129:45 - you
129:46 - are
129:48 - age
129:51 - years old
129:54 - then this should work
129:55 - okay happy birthday to whatever your
129:58 - name is you are whatever your age is
130:01 - years old so that's a function everybody
130:04 - it's a block of reusable code if you
130:06 - think you're going to perform some code
130:07 - more than once you can stick it within a
130:09 - function whenever you need it you just
130:11 - simply call it if you need to make your
130:13 - function aware of any variables you can
130:15 - send them as arguments to that function
130:17 - but you'll need a matching set of
130:19 - parameters in the function definition
130:21 - and the declaration so yeah those are
130:23 - functions everybody your assignment is
130:25 - to create a unique function and post it
130:28 - in the comments section and well yeah
130:30 - those are functions in c plus plus
130:35 - all right everybody we are on the return
130:38 - keyword the return keyword will return a
130:40 - value back to the spot where you called
130:43 - to the encompassing function the return
130:45 - keyword is commonly found at the end of
130:47 - a function much like the main function
130:50 - when we invoke a function we can return
130:52 - some value back
130:53 - here's an example
130:55 - i'll create a function that will
130:56 - calculate the area of a square but we'll
130:59 - need to pass in a length the length of
131:00 - one side
131:02 - this will be a double
131:04 - length assign some value 5.0 is good
131:07 - then we'll need to declare and define a
131:09 - function
131:10 - at the top of my program i'll add a
131:12 - function declaration
131:14 - for the time being we'll write void but
131:16 - that will change soon void i'll name
131:19 - this function square we will square a
131:21 - length list any parameters we will
131:23 - accept a double value
131:26 - which we will name length
131:29 - then i'll need a function definition
131:31 - i'll add that after the main function
131:33 - void square
131:36 - i'm going to create a temporary variable
131:38 - named result it will be of the double
131:41 - data type we will take
131:43 - length times length
131:45 - to calculate the area
131:48 - then i will use that return keyword
131:50 - return what are we returning we're
131:52 - returning our result if we're returning
131:55 - a value we need to change this keyword
131:57 - void to match the data type of what
132:00 - we're returning we're returning a double
132:02 - so i will change void to double and then
132:05 - make sure you change that within the
132:07 - function declaration as well
132:09 - double square you could do this in one
132:11 - line of code you don't necessarily need
132:13 - to we could simply just return
132:16 - length times length that is also valid
132:19 - that's probably how i would write it we
132:21 - now have this function that will
132:23 - calculate the area of a square once we
132:25 - pass in a length i'm going to create a
132:27 - new variable called
132:29 - area
132:30 - it will be of the double data type and i
132:32 - will set the sequel to
132:34 - then let's invoke the square function
132:37 - pass in our length variable as an
132:39 - argument
132:41 - at this point of the program area should
132:42 - be assigned a value let's display it
132:45 - standard
132:46 - output
132:48 - area
132:50 - i'll add my area variable
132:52 - then add centimeters squared then new
132:55 - line
132:56 - the area of our square is 25 centimeters
133:00 - squared
133:01 - and i could change this to a different
133:02 - number like six
133:04 - the area is now 36 centimeters squared
133:07 - let's create another function this
133:09 - function will find the volume of a cube
133:11 - if we know the length of a side we'll
133:13 - return a value of the double data type
133:16 - but i will name this cube
133:18 - we will still accept the length of the
133:20 - double data type
133:23 - let's copy this paste it
133:25 - change square to cube
133:28 - return length times length times length
133:35 - double
133:36 - volume
133:37 - equals we'll invoke our cube function
133:41 - pass in our
133:42 - length then i will display whatever the
133:45 - volume is
133:49 - volume
133:51 - my volume variable centimeters cubed
133:57 - if the side of a square is 6 centimeters
134:00 - the area would be 36
134:02 - if it was a cube the volume would be 216
134:05 - centimeters
134:07 - if you need to return a value back to
134:09 - the spot in which you invoked a function
134:11 - be sure to list the data type of what
134:13 - you're returning
134:15 - let's try another example involving
134:17 - strings
134:18 - i'll create a function that will add a
134:20 - user's first name their last name and
134:23 - create a new string called full name
134:25 - let's declare our variables
134:27 - standard string
134:29 - first
134:31 - name
134:32 - equals add your first name
134:35 - standard string
134:37 - last name
134:39 - equals
134:40 - add your last name then i'll create a
134:43 - function to concatenate two strings
134:45 - together we're returning a string i will
134:48 - list the data type as standard string
134:51 - i'll name this function
134:53 - concat
134:54 - strings
134:58 - we will have two arguments two standard
135:00 - strings
135:01 - standard string
135:03 - i'll name the first string
135:05 - string one
135:07 - standard string
135:09 - string
135:10 - a misspelt string string two so we have
135:13 - our function declaration now we just
135:16 - need to define it
135:18 - i'm going to return
135:20 - string one
135:22 - plus i'll add a space between the first
135:24 - name and the last name
135:26 - plus string two
135:29 - i'll create a third variable
135:31 - standard string
135:33 - full name
135:35 - equals
135:36 - i will invoke my concat strings function
135:40 - then i need to pass in two strings as
135:42 - arguments
135:43 - i'll pass in my first name
135:46 - and my last name
135:48 - then let's display the full name
135:50 - standard output
135:54 - hello
135:57 - the user's full name
136:02 - hello bro code or whatever your first
136:04 - and last name is so yeah everybody that
136:07 - is the return keyword wherever you
136:09 - invoke a function you can return a value
136:12 - back to that spot in which you invoked
136:14 - that function if you're returning a
136:16 - value just be sure that you change the
136:18 - return type of that function to match
136:21 - the data type of the value being
136:23 - returned
136:24 - in this example i returned a string a
136:26 - standard string so the return type of
136:28 - this function would be a standard string
136:31 - so that's the return keyword everybody
136:33 - your assignment is in the comment
136:34 - section to post a function that returns
136:37 - some value so yeah that is the return
136:40 - keyword in c plus plus
136:44 - hey guys in this topic i'm going to
136:46 - explain overloaded functions in c plus
136:49 - plus and actually with many other
136:51 - programming languages you can have
136:53 - different versions of the same function
136:55 - here's what i mean i have a function to
136:57 - bake a pizza because well i like pizza
137:00 - bake
137:01 - pizza
137:02 - this function will have no parameters
137:05 - all i'm gonna do within this function is
137:07 - display the words here is your pizza
137:13 - then i'll add a new line
137:15 - uh then i should probably add a
137:16 - declaration at the top
137:20 - void baked pizza then to invoke this
137:22 - function i would type the function name
137:26 - here is your pizza
137:28 - this time i would like to bake a pizza
137:30 - that has toppings
137:32 - right now we just have a plain pizza
137:35 - with no toppings and that's kind of lame
137:37 - i'm going to create an additional
137:38 - version of this baked pizza method but
137:41 - it's going to have different parameters
137:44 - void
137:45 - bake
137:46 - pizza
137:48 - we will accept a string
137:50 - standard
137:51 - string i'll name this string
137:54 - topping one we'll accept one topping as
137:57 - an argument
137:59 - standard output here is your
138:02 - i'll add my topping here
138:05 - topping one
138:08 - pizza
138:09 - then be sure to add your function
138:10 - declaration to
138:13 - bake pizza
138:14 - then this time we are accepting a string
138:17 - it is valid for functions to share the
138:19 - same name but you need a different set
138:21 - of parameters a function's name plus its
138:24 - parameters is known as a function
138:27 - signature i can bake a pizza that has no
138:30 - toppings here is your pizza or i could
138:33 - pass in a topping like
138:35 - pepperoni
138:38 - here is your pepperoni pizza let's
138:40 - create an additional function that
138:42 - accepts two toppings
138:45 - so we have topping one topping two
138:48 - here is your
138:50 - topping one
138:53 - and
138:55 - topping two
138:59 - pizza
139:00 - then add your function declaration
139:04 - topping one topping two
139:07 - now i can bake a pizza that has two
139:09 - toppings
139:10 - i would like pepperoni and mushrooms
139:16 - here is your pepperoni and mushroom
139:19 - pizza so yeah everybody those are
139:21 - overloaded functions functions can share
139:24 - the same name but you need a different
139:26 - set of parameters a function's name plus
139:29 - its parameters is known as a function's
139:33 - signature and each function signature
139:35 - needs to be unique kind of like an id so
139:38 - yeah those are overloaded functions if
139:40 - you would like a copy of this code i'll
139:42 - post this in the comments section down
139:43 - below and well yeah those are overloaded
139:46 - functions in c plus plus
139:51 - okay everybody we gotta discuss variable
139:53 - scope i'll explain local variables and
139:56 - global variables local variables are
139:58 - declared inside of a function or block
140:00 - of curly braces such as within the main
140:03 - function or inside of another function
140:05 - global variables are declared outside of
140:07 - all functions you tend to see them at
140:09 - the top of your program there's some
140:11 - major differences between the two let's
140:13 - begin with local variables suppose i
140:15 - have some number int my num my num
140:18 - equals one
140:20 - if i need to display my num i can use
140:22 - standard output
140:24 - my num
140:25 - and of course this will display my num
140:28 - which is one now what if i have a
140:29 - function to display my num
140:31 - void
140:32 - print
140:33 - num
140:35 - let's move this line of code to our
140:37 - print num function
140:41 - i'll need to add a function declaration
140:43 - to the top of my program
140:46 - then we will invoke this function print
140:49 - num
140:51 - okay this isn't going to work and here's
140:52 - why
140:54 - mynum was not declared in this scope
140:56 - functions can't see inside of other
140:58 - functions my function printnum has no
141:01 - idea what this mynum variable is
141:04 - mynum is a local variable to the main
141:06 - function that's why we pass arguments to
141:08 - functions
141:10 - we'll make the function aware of this
141:12 - value but you'll need a matching set of
141:14 - parameters
141:15 - int
141:16 - my num
141:18 - then add that to the function
141:19 - declaration int my num
141:22 - and this would work that displays the
141:24 - number one but let's get rid of these
141:26 - parameters
141:28 - it is legal to reuse the same variable
141:31 - name as long as it's within a different
141:33 - scope within the print num function i'll
141:35 - also have a mynum variable that has the
141:37 - same name but i'll give this a different
141:39 - value
141:42 - when printing my num it prints two we
141:45 - have two versions of the same variable
141:47 - and this is fine because they're within
141:49 - different scopes
141:50 - now a global variable is declared
141:52 - outside of all functions you see these
141:55 - at the top of your program i will
141:56 - declare int
141:58 - my num
142:00 - equals three
142:02 - i'm going to delete these two local
142:03 - variables
142:05 - if i was to invoke the print num
142:07 - function and print my num
142:09 - well then that number is 3.
142:12 - this global variable is also available
142:14 - within the main function
142:16 - so i will print my num here as well
142:17 - within the main function
142:21 - so we have three and three it's best to
142:24 - avoid global variables if you can
142:25 - because it pollutes the global namespace
142:28 - also variables declared within a
142:30 - function are much more secure because
142:32 - like i said functions can't see inside
142:34 - of other functions if we had both local
142:36 - and global variables
142:40 - mynum within the main function will be 1
142:43 - within the printnum function it will be
142:44 - 2.
142:46 - if i was to display my num for both of
142:48 - these i'm going to add a new line to
142:50 - each of these
142:53 - new line
142:55 - and new line
142:59 - a function will use any local variables
143:01 - first before resorting to any global
143:03 - variables that's why our print num
143:06 - function prints two and the main
143:07 - function prints one if you'd rather use
143:10 - the global version you can use the scope
143:12 - resolution operator so precede your
143:15 - variable name with two colons that is
143:18 - the scope resolution operator
143:20 - i'll do that here as well
143:22 - in place of using the local version of
143:24 - mynum we will use the global version
143:29 - and we will print three we're using the
143:31 - global version of my num instead of the
143:33 - local version
143:35 - so yeah that's variable scope local
143:37 - variables are declared inside of a
143:39 - function or anytime you see a set of
143:41 - curly braces a variable declared inside
143:43 - a set of curly braces is hidden to the
143:46 - outside world a global variable is
143:48 - declared outside of all functions and is
143:51 - accessible to all functions within the
143:53 - program like i said you should try and
143:55 - avoid using global variables if you can
143:57 - because it pollutes the global namespace
143:59 - and these variables are less secure so
144:01 - yeah that's variable scope hey if you're
144:03 - enjoying this series let me know by
144:05 - smashing that like button leave a random
144:07 - comment down below and subscribe if
144:08 - you'd like to become a fellow bro
144:13 - hey guys in this topic we're going to
144:14 - create a banking program for practice
144:17 - we'll be able to deposit money withdraw
144:19 - money and show a balance this is more or
144:22 - less just for practice let's begin by
144:24 - creating our functions
144:26 - void
144:27 - show
144:28 - balance
144:30 - there will be one parameter double
144:33 - balance whatever our bank account
144:35 - balance is we'll show it
144:38 - the return type is double
144:40 - deposit
144:42 - no parameters
144:45 - double
144:46 - withdraw
144:48 - and there will be one parameter double
144:50 - balance
144:53 - let's fill in a few things within the
144:54 - main function
144:56 - double
144:57 - balance and i will go ahead and set this
144:59 - to zero
145:00 - as well as int
145:02 - choice i will set that to zero as well
145:05 - we'll use a switch to determine if the
145:07 - user wants to show their balance make a
145:10 - deposit a withdrawal or exit
145:13 - let's display some output some prompts
145:16 - standard output
145:18 - enter your
145:22 - choice and i'm just gonna add some text
145:25 - decorations because i think that'll be
145:27 - cool
145:28 - maybe a bunch of asterisks
145:31 - and one more
145:35 - okay
145:36 - we have option one one
145:39 - show
145:40 - balance
145:45 - two
145:46 - will be deposit money
145:53 - three is withdrawal money
146:00 - four will be exit
146:08 - then we'll accept some user input
146:10 - standard
146:11 - input
146:12 - choice
146:15 - now we're going to create a switch
146:18 - we're examining the user's choice
146:21 - switch
146:24 - we're examining our choice against many
146:26 - matching cases
146:28 - we have case one
146:30 - case two
146:33 - three
146:35 - four
146:37 - then a default case
146:40 - okay case one the user wants to show
146:43 - their balance we'll invoke the show
146:45 - balance function
146:47 - but we need to pass in our balance
146:52 - balance
146:54 - and then we are going to break
146:58 - case 2 the user wants to deposit money
147:01 - so we're going to take our balance
147:04 - equals
147:05 - balance
147:07 - plus our deposit function
147:10 - so deposit will return a double
147:13 - right here
147:14 - so we're going to add that to our
147:16 - balance once we verify it actually we
147:18 - can shorten this to balance plus equals
147:21 - whatever value is returned with the
147:23 - deposit function
147:25 - then we are going to break
147:28 - case three withdraw money
147:31 - balance
147:32 - minus equals
147:35 - the withdraw function pass in our
147:37 - balance
147:39 - we're withdrawing money from our balance
147:41 - once we verify it
147:44 - then we're going to break
147:47 - we'll exit with case 4 i'll display some
147:49 - output standard output
147:53 - thanks for visiting
147:58 - then i'm going to break
148:01 - okay default case
148:03 - standard
148:04 - output
148:07 - invalid
148:09 - choice
148:11 - okay now we're going to place all of
148:13 - this code within a do while loop
148:19 - do all of this
148:21 - while some condition is true
148:24 - so let's take all this code cut it
148:27 - put it within that do while loop
148:30 - let me just format this a little bit
148:35 - the condition will be while choice does
148:38 - not equal four four is what we used to
148:41 - exit
148:42 - we'll need to add some function
148:44 - definitions
148:46 - but i'm going to fill these in later
148:50 - we'll need to return something
148:53 - so let's return zero for the time being
148:56 - for two of these functions at least
148:57 - return zero
148:59 - okay let's run and compile this just to
149:01 - test our do while loop
149:05 - okay enter your choice
149:07 - uh one show balance that doesn't show
149:09 - our balance yet but it will deposit
149:11 - money withdraw now we should be able to
149:14 - exit by pressing four
149:16 - thanks for visiting okay so we know that
149:18 - the do while loop is working let's fill
149:21 - in our functions let's begin with show
149:22 - balance
149:24 - now with the show balance function we're
149:26 - receiving our balance as an argument
149:29 - so i'm going to display standard output
149:34 - your
149:37 - balance
149:38 - is
149:39 - dollar sign or some other currency if
149:41 - you choose
149:43 - i'll display our balance
149:45 - then add a new line
149:51 - so let's say we have 123 dollars in our
149:55 - account
149:58 - i'm going to show my balance
150:01 - 123 dollars even but i would like to
150:04 - display cents i'll need two decimal
150:06 - places after the decimal
150:09 - so there's one thing we can include
150:11 - we'll include this header file
150:13 - include
150:15 - i o man ip there's a function in here to
150:19 - set some precision for floating point
150:20 - numbers
150:22 - i'm going to make this change after the
150:24 - dollar sign
150:27 - standard
150:29 - set
150:30 - precision
150:32 - pass in two for two decimal places
150:36 - then add
150:38 - standard
150:40 - fixed
150:41 - this will display our balance up to two
150:43 - decimal places after the decimal point
150:47 - so let's try that again
150:49 - okay show balance 123 dollars and zero
150:53 - cents
150:55 - if i were to change this to 123.01
150:59 - we should display two decimal places
151:03 - yep 123 dollars and one cent
151:06 - okay that is the show balance function
151:09 - let's work on the deposit function
151:12 - okay now we're within the deposit
151:14 - function i'm going to create a local
151:16 - variable named amount
151:18 - set this equal to zero
151:21 - we'll ask the user how much they would
151:22 - like to deposit standard output
151:26 - enter amount
151:28 - to be
151:30 - deposited
151:34 - standard
151:36 - input
151:37 - r amount
151:40 - so i'm going to set balance back to zero
151:43 - then let's test it
151:45 - show balance
151:47 - one your balance is zero dollars and
151:49 - zero cents i would like to make a
151:50 - deposit
151:51 - uh 420
151:54 - 69 cents
151:57 - okay now i would like to show my balance
151:59 - after we make a deposit
152:03 - so within case two after making a
152:05 - deposit let's show our balance pass in
152:08 - the balance variable
152:10 - now let's do so after withdrawal two
152:14 - okay let's try that again
152:18 - show balance zero dollars zero cents
152:20 - make a deposit
152:22 - 420.6
152:25 - your balance is zero dollars and zero
152:27 - cents
152:29 - so what we're going to do is return our
152:31 - amount at the end of this function
152:33 - return amount
152:36 - 420 dollars 69 cents
152:39 - all right we have our balance
152:43 - the user is able to enter in negative
152:44 - money enter amount to be deposited
152:47 - negative one thousand your balance is
152:49 - now negative one thousand dollars we
152:52 - need to prevent somebody from making a
152:54 - negative deposit
152:56 - so before we return our amount let's use
152:58 - an if statement
153:02 - if
153:03 - amount
153:04 - is greater than zero
153:07 - then we will return the amount
153:14 - else
153:16 - standard output
153:19 - that's not a valid amount
153:25 - then let's return zero
153:28 - okay let's try that again
153:31 - deposit money negative one thousand
153:33 - dollars
153:35 - that's not a valid amount your balance
153:37 - is zero dollars
153:39 - i'm just going to add a new line
153:41 - like right here
153:43 - then let's make a legitimate deposit
153:45 - deposit money i will deposit one
153:47 - thousand dollars in one cent your
153:49 - balance is one thousand dollars and one
153:52 - cent
153:52 - okay that is the deposit function that
153:55 - is complete
153:57 - then we have the withdraw function
153:59 - we'll create a local variable named
154:01 - amount of the double data type
154:03 - we'll create a prompt standard output
154:07 - enter amount to be withdrawn
154:14 - standard input
154:16 - amount
154:19 - at the end of this program we will
154:21 - return amount
154:23 - okay let's test it
154:25 - okay i need to deposit some money first
154:27 - i will deposit one thousand dollars and
154:29 - one cent
154:31 - then let's withdraw money
154:33 - i will withdraw
154:35 - one hundred dollars and one cent
154:37 - my new balance is nine hundred dollars
154:40 - but we can overdraw our account still so
154:42 - i'm going to withdraw a million dollars
154:45 - and one cent
154:47 - our balance shouldn't be negative so
154:49 - let's prevent our user from overdrafting
154:51 - their account
154:52 - within our withdrawal function let's add
154:54 - an if statement
154:56 - if amount is greater than our balance
155:01 - will display
155:04 - insufficient
155:07 - funds
155:12 - then we will return zero
155:17 - okay i'm going to withdraw
155:20 - one million dollars
155:21 - and one cent
155:24 - insufficient funds your balance is zero
155:27 - okay
155:28 - now what if the user would like to
155:29 - deposit negative money
155:31 - withdraw money
155:33 - negative one thousand
155:35 - your balance is one thousand dollars
155:38 - we'll need to make sure that the amount
155:39 - is a legitimate amount i'll add an else
155:41 - if statement
155:43 - if amount
155:45 - is less than zero
155:49 - standard output
155:52 - that's not a valid amount
155:59 - now else
156:01 - we will return the amount to be
156:03 - withdrawn
156:07 - then within the elsif statement we'll
156:09 - need to return zero
156:11 - there
156:13 - okay let's withdraw money
156:15 - enter amount to be withdrawn negative
156:17 - one thousand dollars
156:19 - that's not a valid amount that's good
156:21 - let's withdraw again
156:24 - i would like to withdraw 100
156:26 - insufficient funds my balance is zero
156:29 - let's deposit some money
156:31 - 99.99
156:33 - our balance is
156:34 - 99.99 let's withdraw again
156:38 - let's try and withdraw 100
156:39 - nope we can't
156:41 - let's withdraw again 99.99
156:45 - your balance is zero that's good then
156:47 - let's exit
156:50 - press 4 to exit thanks for visiting okay
156:53 - so these functions are done
156:56 - there's just one more thing we should
156:57 - add
157:00 - if i type in some characters like the
157:02 - word pizza well this will break our
157:04 - program
157:05 - we'll want to clear the input buffer so
157:08 - after our choice let's add these two
157:10 - lines
157:11 - standard
157:13 - input dot clear function
157:18 - so i haven't talked about this function
157:19 - this function will reset any error flags
157:21 - when the standard input fails to
157:23 - interpret the input then follow this
157:25 - with
157:27 - f
157:27 - flush
157:30 - this is a function pass in standard
157:32 - input this will clear the input buffer
157:35 - basically speaking once we hit enter we
157:36 - have a new line character within our
157:38 - input buffer so we just need to flush
157:40 - that and get rid of it that should
157:42 - prevent our program from going crazy so
157:44 - let's type in some characters
157:47 - invalid choice
157:48 - cool then i would like to exit
157:51 - all right everybody that is a banking
157:53 - program for some practice
157:55 - if you would like a copy of this code
157:56 - i'll post this in the comment section
157:58 - down below and well yeah that's a
158:00 - banking practice program in c plus
158:06 - all right everybody in this video we're
158:08 - going to create a game of rock paper
158:10 - scissors let's create our function
158:12 - declarations first
158:14 - char
158:15 - get
158:16 - user
158:17 - choice
158:19 - char in this case would be the return
158:21 - type will be returning a character
158:24 - char
158:25 - get
158:26 - computer
158:28 - choice
158:31 - void there is no return type
158:34 - show
158:36 - choice
158:37 - there will be one parameter
158:39 - char
158:41 - choice
158:43 - then the last function is
158:45 - void
158:46 - choose
158:48 - winner
158:49 - there will be two parameters
158:51 - char
158:52 - player that's us
158:55 - char computer
158:57 - the computer's choice will be determined
158:59 - randomly using a random number generator
159:02 - let's define these functions let's copy
159:04 - all of these after the main function i
159:06 - will paste them then add a set of curly
159:08 - braces after each
159:16 - currently if i were to run this program
159:18 - we do have some warnings because with
159:20 - these two functions get user choice and
159:22 - get computer choice we're not returning
159:24 - anything even though we stated that
159:26 - we're returning a character just for the
159:28 - time being i'm going to return 0 just so
159:30 - that those warnings go away but we'll
159:32 - correct these momentarily so we
159:34 - shouldn't have those warnings within the
159:36 - main function we will declare two
159:38 - characters one for player
159:41 - char player that's us
159:43 - char
159:44 - computer that's the opponent we will
159:47 - take our player
159:49 - then assign this a value of whatever is
159:52 - returned from the get user choice
159:54 - function then we need to fill in this
159:56 - function
159:58 - within the get user choice function i
160:00 - will create a local variable of player
160:03 - as well i'll create a message to begin
160:05 - our game
160:06 - standard output
160:09 - rock
160:11 - paper
160:12 - scissors
160:14 - game
160:15 - i'll add a new line
160:17 - uh this part isn't necessary but i'm
160:19 - just going to add a bunch of asterisks
160:22 - afterward
160:27 - just because i think it would look cool
160:29 - underneath our title
160:31 - let's list our choices standard output
160:35 - the character r
160:38 - for
160:39 - rock
160:42 - new line
160:45 - let's copy this
160:52 - p
160:53 - for paper
160:56 - s for
160:58 - scissors
161:02 - standard input
161:05 - player
161:07 - i'm just going to test that this works
161:11 - standard output
161:14 - player
161:18 - rock paper scissors game
161:20 - r for rock p for paper s for scissors
161:22 - i'll pick r
161:24 - that would give us the character r
161:30 - okay so we know that that works
161:32 - i'm going to place some of this code
161:34 - within a do while loop
161:36 - because the user might not type in rp or
161:39 - s
161:43 - so do
161:46 - while
161:49 - i'm going to stick my code within the do
161:51 - while loop
161:57 - i'm just going to add one more line of
161:59 - output
162:06 - choose one of the following
162:09 - all right we'll continue this while loop
162:12 - as long as our player
162:14 - does not equal
162:16 - the character r
162:19 - and
162:20 - player
162:22 - does not equal
162:24 - the character p
162:27 - and
162:28 - player does not equal the character s
162:33 - then at the end of this function we will
162:35 - return player
162:37 - we can't escape this while loop until we
162:39 - pick either
162:40 - r
162:41 - p
162:42 - or s
162:43 - that's how this condition works
162:45 - let's test it
162:48 - rock paper scissors game choose one of
162:50 - the following r for rock p for paper s
162:52 - for scissors uh i will pick
162:56 - w for wombo
162:59 - choose one of the following r p or s
163:01 - uh i like the letter x nope can't pick
163:04 - that uh let's go with s for scissors
163:07 - okay s is a valid choice okay that is
163:11 - the get user choice function that is
163:13 - complete
163:14 - so i'm going to close out of this
163:16 - function
163:19 - after we assign our player variable
163:21 - let's display the user's choice
163:24 - standard output
163:27 - your choice colon space
163:32 - then we will invoke the show choice
163:34 - function
163:35 - show choice
163:37 - then there is one parameter we have to
163:39 - pass in a choice as an argument
163:42 - we will pass in our player that's a
163:44 - character
163:45 - within the show choice function i'm
163:47 - going to create a switch
163:50 - switch
163:51 - we're examining some value against
163:53 - matching cases we'll examine our choice
163:57 - our choice argument that we receive
164:00 - if our choice
164:02 - matches the case r
164:04 - what would we like to do
164:06 - i'm going to display some output
164:09 - standard output
164:11 - just rock
164:13 - then i'll add a new line
164:15 - make sure to break
164:20 - then case
164:22 - p for paper
164:25 - standard
164:27 - output
164:30 - paper i'll add a new line
164:34 - then break
164:39 - case
164:40 - s for scissors
164:43 - standard
164:44 - output
164:47 - scissors
164:48 - new line
164:51 - then break
164:54 - let's close out of this function then
164:56 - test it
165:00 - okay i'll type r for rock your choice
165:03 - rock
165:07 - p for paper your choice paper
165:14 - s for scissors your choice scissors
165:18 - okay the show choice function is done
165:20 - now we need to get the computer choice
165:25 - computer
165:26 - equals get
165:29 - computer choice
165:34 - then we'll need to fill in this function
165:38 - get computer choice right here
165:41 - we'll need to generate a random seed
165:43 - s
165:44 - rand
165:46 - pass in the time function
165:48 - then type zero or null
165:51 - you may need to include this header file
165:52 - at the top of your program just in case
165:54 - this doesn't work
165:56 - include
165:58 - c
165:58 - time
166:00 - we'll generate a random number between
166:02 - one and three
166:03 - and num
166:05 - equals brand function
166:08 - modulus
166:09 - three plus one
166:11 - we'll examine this number against
166:13 - matching cases
166:15 - switch
166:16 - we're examining our num
166:19 - the first case will be the number one
166:22 - if our random number is 1
166:24 - let's return
166:26 - the character r
166:29 - since we're returning a value we don't
166:31 - necessarily need to add that break
166:33 - statement we're already breaking when we
166:35 - return
166:36 - so we can omit this
166:39 - case 2
166:41 - return the character
166:45 - p for paper
166:47 - case 3
166:49 - return
166:51 - s for scissors
166:52 - okay we can close out of the get
166:54 - computer choice function that's all done
166:57 - back within the main function
166:59 - let's display the computer's choice
167:03 - standard output
167:06 - computer's choice
167:10 - will invoke the show choice function
167:14 - but pass in our computer
167:17 - let's run it to test it
167:20 - i'll pick r for rock
167:22 - your choice rock the computer's choice
167:24 - is paper
167:26 - let's try it like two more times
167:29 - okay we chose paper the computer chose
167:31 - rock
167:35 - let's pick s for scissors
167:37 - your choice scissors the computer's
167:39 - choice is also scissors
167:41 - okay so the computer is picking a random
167:43 - choice that's good now we'll have to
167:44 - decide who won at the end of our program
167:47 - we will invoke the choose winner
167:49 - function
167:50 - pass in our player
167:52 - as well as the computer
167:56 - then within the choose winner function
167:59 - let's create another switch
168:01 - we will examine our player against
168:03 - matching cases
168:05 - if our player
168:07 - chooses rock the character r
168:10 - i think the best way to do this would be
168:12 - to use if statements within each case
168:18 - if the player chooses rock and if the
168:21 - computer
168:23 - chooses
168:24 - r for rock
168:26 - that means there's a tie
168:29 - i'll display that standard output
168:33 - it's a tie
168:36 - then i'll add a new line
168:40 - else if
168:43 - the computer
168:45 - chooses
168:46 - paper
168:48 - that means we lose
168:50 - standard output
168:52 - you lose
168:58 - else
168:59 - well there's only one option left
169:01 - scissors because if the computer didn't
169:04 - choose rock or paper that means they
169:06 - pick scissors
169:08 - rock beats scissors
169:10 - so let's display that the user one
169:14 - you win
169:17 - oh then be sure to add a break at the
169:19 - end
169:20 - to break out of the switch
169:22 - this is the case if the player chooses
169:24 - rock let's copy all of this code
169:28 - paste it
169:30 - and let's move this over now if the user
169:33 - chooses paper we have some different
169:35 - results paper be its rock will change
169:39 - this line of output to be
169:43 - you win
169:44 - if the user chooses paper and the
169:46 - computer chooses paper
169:48 - that means it's a tie
169:50 - it's a tie
169:53 - if we choose paper and the computer
169:55 - chooses scissors that means we lose
169:58 - you lose
170:00 - one more case
170:05 - if the player picks scissors
170:07 - and the computer picks rock
170:10 - you lose
170:12 - scissors beats paper
170:16 - you win
170:18 - else scissors ties with scissors
170:22 - it's a tie
170:25 - and that is everything
170:27 - so let's close this function
170:30 - and run this program
170:35 - okay i'll pick r for rock
170:37 - we picked rock the computer picked
170:39 - scissors you win
170:42 - p for paper
170:45 - the computer also picked paper it's a
170:47 - tie
170:50 - i'll pick scissors
170:53 - i picked scissors the computer picked
170:55 - rock you lose
170:57 - well all right then everybody that is a
170:59 - game of rock paper scissors
171:01 - if you would like a copy of this code
171:03 - i'll post this in the comment section
171:04 - down below and well yeah that's a game
171:07 - of rock paper scissors in c plus
171:13 - we have a big topic today i need to
171:15 - discuss arrays an array is a data
171:18 - structure that can hold multiple values
171:21 - values are accessed by an index number
171:24 - think of an array as kind of like a
171:26 - variable that holds multiple values it's
171:29 - a little more complicated than that but
171:31 - that's a good way of thinking about them
171:33 - perhaps we have the name of a car
171:35 - this will be a standard string i will
171:38 - name this car
171:39 - assign this a value of whatever card
171:42 - that you like one card that i like is a
171:44 - corvette
171:46 - then i will display whatever our car is
171:49 - standard output
171:51 - car
171:55 - so of course this car is a corvette we
171:58 - can transform this variable into an
172:00 - array by making the following changes
172:02 - after the variable name add a set of
172:05 - square brackets
172:07 - then enclose your values with a set of
172:09 - curly braces
172:11 - there we now have an array my variable
172:13 - car is now an array now this variable
172:15 - can hold multiple values multiple cars
172:18 - kind of like it's a parking garage
172:21 - separate each value with a comma
172:23 - this time i'll add a mustang
172:27 - then a camry
172:29 - now take a look at this i will display
172:31 - car
172:33 - now what the heck is this so this is a
172:35 - memory address of where our array is
172:37 - located like one two three fake street
172:40 - if i need one of these elements one of
172:42 - these values that's found within the
172:44 - array in order to access it i have to do
172:46 - so by an index number after the array
172:49 - name i will add a set of square brackets
172:53 - then an index number
172:54 - the first element in an array has an
172:57 - index of zero because computers always
172:59 - start with zero
173:00 - and we have our corvette it's kind of
173:02 - like a parking spot number that's why i
173:05 - went with this example of cars if i need
173:07 - the next element within my array i would
173:09 - access element number one then i should
173:11 - probably add a new line just to separate
173:13 - these
173:15 - new line
173:19 - we have our corvette and our mustang
173:22 - then we have our third element which
173:24 - would have an index of two so we have
173:26 - our three elements our corvette our
173:28 - mustang and our camry you can reassign
173:31 - values too i'm going to change the first
173:33 - element within this array take the array
173:35 - name
173:36 - select an index number i'll set the
173:38 - sequel to
173:40 - a camaro a chevy camaro
173:43 - now at parking spot number zero we have
173:46 - our camaro then our mustang then our
173:49 - camry i'm going to rename car as cars
173:52 - just so people know that it's plural
173:54 - although it's not necessary one thing
173:56 - with arrays is that they can only
173:58 - contain values of the same data type
174:01 - like i'll try and stick a number within
174:02 - here number one
174:07 - so our compiler doesn't like it that
174:09 - there's a number in here with all these
174:11 - strings
174:12 - so arrays should all be of the same data
174:14 - type
174:15 - now if you don't know what you want to
174:16 - place within an array you can simply
174:19 - declare an array then assign values
174:21 - later
174:22 - i'm going to declare an array of cars
174:25 - and then later assign some values
174:28 - cars at index 1
174:30 - will have our mustang
174:34 - cars at index 2
174:38 - will be our camry
174:41 - see we still have an error though
174:43 - array size missing and cars
174:46 - you can declare an array
174:48 - then assign values later we need to set
174:51 - a size to this array it's a static data
174:53 - structure if i'm only going to place
174:55 - three cars within this array
174:57 - i'll set the size to be three so within
175:00 - the square brackets you can set an array
175:02 - size and this would work the same
175:04 - you can declare an array be sure to set
175:06 - the size and then assign values later
175:10 - let's try one last example i'm going to
175:12 - create an array of prices
175:14 - these will be of the double data type
175:17 - prices add a set of square brackets
175:20 - i'll go ahead and assign these values
175:21 - right away so i don't need to declare a
175:23 - size explicitly
175:25 - make up some prices
175:27 - five dollars seven dollars and fifty
175:30 - cents
175:32 - nine dollars and ninety nine cents
175:34 - then fifteen dollars
175:37 - i'll display these prices standard
175:39 - output
175:40 - prices i'll list an index number of what
175:42 - element i'm trying to access
175:44 - the first would be zero
175:47 - then i'll add a new line
175:49 - let's copy this line of code
175:51 - and paste it a couple more times
175:54 - we have prices at index zero that is the
175:56 - first element
175:57 - then one
175:58 - two and three
176:02 - and here are the prices so yeah that's
176:04 - an array think of it as a variable that
176:07 - can hold multiple values it's a little
176:10 - more complicated than that it's a type
176:12 - of data structure but that's a good way
176:14 - of thinking about them to change a
176:15 - variable into an array after the
176:17 - variable name add a set of square
176:19 - brackets place your values within a set
176:22 - of curly braces that's if you're
176:23 - assigning values right away or otherwise
176:25 - you can set a size and then assign
176:28 - values later that's another option so
176:30 - yeah those are arrays your assignment is
176:33 - to post an array in the comments section
176:35 - down below and well yeah those are
176:37 - arrays in z plus plus
176:41 - you guys ready all right let's talk
176:43 - about the size of operator the size of
176:45 - operator determines the size in bytes of
176:48 - a variable data type class objects etc
176:53 - whatever you would like to find the size
176:54 - of you stick within the parentheses of
176:57 - the size of operator here's an example
176:58 - let's create a double
177:01 - double gpa
177:03 - our gpa will be
177:05 - a solid 2.5 to determine the size in
177:09 - bytes of my variable or a data type i
177:12 - will just place within the set of
177:13 - parentheses
177:14 - i'll display this
177:16 - standard
177:17 - output
177:19 - size of operator i would like to return
177:21 - the size of my gpa variable
177:24 - then i'll just add a string
177:27 - bytes
177:28 - new line
177:30 - let's take a look the size of my gpa
177:33 - variable is 8 bytes that's the maximum
177:36 - size allocated to my double variable if
177:39 - i was to replace gpa with a data type
177:42 - such as double well this would be the
177:44 - same eight bytes this will be helpful in
177:46 - the future when we begin working with
177:47 - arrays so let's try a couple other
177:49 - variables i'll create a string standard
177:53 - string name
177:54 - assign some name
177:56 - then i will find the size of the string
177:59 - size of name
178:02 - the size of a string is 32 bytes because
178:05 - a string really just holds an address to
178:08 - where some text is located the address
178:10 - of where the string of text is located
178:13 - is 32 bytes even if i were to change the
178:15 - size of the string bro code is awesome
178:19 - well this size is still going to be the
178:21 - same 32 bytes because a string is a
178:24 - reference data type let's try a couple
178:26 - other examples how about a character
178:29 - char grade
178:32 - my grade will be an f
178:34 - i will find the size of this character
178:37 - grade
178:38 - the size of a character is one byte
178:43 - let's try a boolean boolean student
178:46 - is somebody a student true or false
178:49 - i'll play student within the size of
178:51 - operator
178:53 - a boolean variable also takes one byte
178:55 - of memory this time let's find the size
178:57 - of an array in bytes i'll create an
179:00 - array of characters
179:02 - char
179:03 - grades this will be an array
179:06 - i'll set this equal to some grades
179:09 - a
179:10 - b
179:12 - c
179:14 - d
179:15 - then f
179:17 - i'll place my array within the size of
179:19 - operator
179:21 - the size of this array grades is five
179:24 - bytes remember that characters take up
179:27 - one byte of memory an array of five
179:29 - characters would be well five bytes
179:31 - we can use the size of operator to
179:33 - calculate how many elements are within
179:35 - an array if we have the total size of
179:38 - our array we could divide this by the
179:40 - size of one element
179:43 - size
179:44 - of
179:45 - grades
179:46 - at index of zero or otherwise we can
179:49 - find the data type
179:51 - we'll divide the size of my array grades
179:54 - divided by the size of a character
179:58 - so i should have these many elements
180:01 - five elements within my array of grades
180:04 - if i were to add one more grade like an
180:06 - e even though that's not a typical grade
180:09 - well then the total elements within that
180:11 - array would be six elements that's a
180:14 - useful trick to calculate the size of an
180:16 - array how many elements are within that
180:17 - array one more this will be a bonus
180:20 - question
180:21 - i'll create an array of strings
180:24 - i'll name the students
180:27 - we'll enter in some student names
180:30 - such as spongebob
180:35 - patrick
180:37 - then squidward
180:39 - to calculate how many strings are within
180:42 - this array how many students we have we
180:44 - can find the size of my array students
180:47 - divided by the size of a string
180:55 - i have three elements within this array
180:57 - of students then i could add one more
181:00 - and this equation should calculate that
181:02 - i'll add
181:04 - sandy size of students divided by the
181:07 - size of a string
181:09 - would give me
181:11 - four elements so yeah that's the size of
181:13 - operator everybody it will return the
181:16 - size and bytes of a variable data type
181:19 - class objects all sorts of things it
181:22 - will be really helpful when working with
181:24 - arrays because we can determine the size
181:26 - of an array but we'll get some practice
181:28 - with that in the future and well yeah
181:30 - that's the size of operator in c plus
181:36 - alright guys in this video i'm going to
181:37 - show you how we can iterate over the
181:39 - elements of an array suppose we have an
181:41 - array of students these will be strings
181:44 - standard
181:45 - string
181:47 - i'll name this array students
181:50 - set the sequel to some student names
181:52 - pick a few
181:55 - spongebob
181:58 - patrick
182:00 - then squidward
182:04 - suppose i would like to display all
182:06 - these students normally to do that i
182:08 - would type standard output
182:10 - my array followed by an index number so
182:13 - the first student would be spongebob
182:15 - which has an index of zero
182:17 - and my first student is spongebob
182:19 - if i need to display all of the elements
182:21 - of this array i would have to one by one
182:24 - access each element
182:26 - then i'll just add a new line
182:30 - we have spongebob patrick and squidward
182:33 - if i need to display all of the elements
182:35 - of an array a better approach would be
182:38 - to use a for loop
182:40 - i'm going to type four parentheses curly
182:42 - braces we'll need an index and i
182:46 - i'll set the sql to zero because the
182:49 - first element in our array has an index
182:51 - of zero
182:52 - i'll continue this as long as i is less
182:55 - than the length of our array currently
182:57 - it's three
182:59 - then increment i by one
183:02 - during each iteration i would like to
183:04 - display each element standard
183:07 - output
183:09 - students
183:10 - now instead of an index number like 0 1
183:13 - 2 or whatever i'm going to use my
183:15 - counter variable i students at index of
183:18 - i during the first iteration i will be 0
183:22 - then 1 then 2
183:23 - once we reach 3 we'll stop
183:26 - i'll add a new line
183:29 - this for loop will print the elements of
183:31 - my array
183:34 - spongebob patrick squidward
183:36 - there's one issue with this though what
183:38 - if we add another student such as
183:41 - sandy
183:45 - well this for loop will stop once i
183:47 - reaches 3. if we make any adjustments to
183:50 - this array we would have to go into our
183:52 - code and make some changes such as
183:54 - setting this for loop so that we
183:55 - discontinue when i reaches 4.
183:59 - this would work but it's not the best
184:00 - solution for our stopping condition in
184:02 - place of just setting i to be less than
184:04 - some number let's calculate how many
184:06 - elements are within this array to do
184:08 - that we can use the size of operator
184:12 - i'll type size of
184:14 - my array
184:15 - this will give me the total size in
184:17 - bytes of my array to calculate the
184:19 - number of elements i can divide size of
184:22 - students
184:23 - by the size of
184:25 - the data type
184:27 - string
184:28 - or even an element
184:30 - this will loop through all of the
184:31 - elements of this array spongebob patrick
184:34 - squidward sandy if we change the number
184:36 - of elements well then there's no need to
184:38 - touch this for loop
184:40 - it will calculate the size automatically
184:42 - see now we just have spongebob and
184:44 - patrick let's create one last example
184:46 - i'll create an array of grades
184:50 - char
184:51 - grades
184:54 - we have an a
184:57 - b
184:58 - c
185:00 - d
185:01 - then f
185:04 - if i need to iterate over this array of
185:06 - characters i would find the size of my
185:09 - array grades divided by the size of a
185:12 - character the character data type
185:15 - during each iteration i will display
185:18 - grades at index of i our counter
185:23 - and this will display all of the
185:24 - elements of this array so yeah that's
185:26 - how to iterate over an array using a for
185:29 - loop in the next topic i will explain
185:31 - the for each loop which has different
185:33 - syntax and well yeah that's how to
185:36 - iterate over an array using a for loop
185:38 - in c plus plus
185:42 - alright guys the for each loop the for
185:45 - each loop is a loop that eases the
185:48 - traversal over an iterable data set an
185:51 - array is an example of an iterable data
185:53 - set suppose we're using a standard for
185:55 - loop and i have this array of strings
185:57 - named students we have spongebob patrick
186:00 - and squidward using a standard for loop
186:02 - i would need three statements an index a
186:05 - condition
186:06 - then we could increment or decrement our
186:08 - index
186:10 - this does work but there is another way
186:12 - of writing this using a for each loop
186:14 - there's less syntax than a typical for
186:17 - loop but it's less flexible using a for
186:19 - loop we can go forwards backwards or
186:22 - even skip iterations of something we're
186:24 - iterating over using a for each loop we
186:27 - start at the beginning and go to the end
186:30 - there's less flexibility so let's change
186:32 - this to a for each loop
186:35 - first we'll add the data type of what
186:37 - we're iterating over we're iterating
186:39 - over strings
186:41 - then we'll need a name for the current
186:44 - element that we're on we have an array
186:46 - of students let's name the current
186:47 - element student
186:49 - colon
186:51 - then our iterable data set which would
186:53 - be our
186:54 - array string student colon students
186:58 - during each iteration let's display
187:01 - whatever the current element is which i
187:03 - named student
187:06 - then i'll add a new line
187:11 - and there we go we have our three
187:12 - students
187:13 - then you could change the amount of
187:15 - students if you would like let's add
187:17 - sandy
187:19 - now we have spongebob patrick squidward
187:21 - sandy let's try a different example
187:23 - let's work with grades this time these
187:25 - will be of the int data type int
187:28 - grades
187:29 - equals make up some grades
187:33 - 65
187:35 - 72
187:36 - 81 93 good enough the data type of what
187:41 - we're iterating over is not a string
187:43 - this time it is an int integers
187:46 - let's name each element
187:49 - simply grade
187:50 - colon
187:51 - the name of my iterable data set
187:54 - which would be my array grades for every
187:58 - grade in grades let's display each grade
188:05 - and here are the grades 65 72 81 93
188:09 - so that's a for each loop it's a loop
188:12 - that eases the traversal over an
188:14 - iterable data set there's less syntax
188:17 - involved in a for each loop but it's
188:19 - less flexible
188:20 - if you just need to display the elements
188:22 - of an array a for each loop would work
188:24 - perfect so yeah that's a for each loop
188:27 - everybody your assignment is to post a
188:29 - for each loop in the comment section
188:31 - down below and well yeah that's the for
188:34 - each loop in c plus plus
188:38 - all right everybody so in this video i'm
188:41 - going to show you how we can pass an
188:42 - array to a function suppose we have an
188:45 - array of prices
188:46 - these will be of the double data type
188:48 - double
188:49 - prices
188:51 - straight brackets equals just make up
188:53 - some prices 49.99
188:58 - 15.5 cents
189:00 - 75 dollars
189:03 - nine dollars ninety-nine cents good
189:05 - enough we'll create a function to find
189:07 - the sum of these prices and print a
189:09 - total let's say double
189:12 - total
189:13 - equals
189:15 - then i'll invoke a get total function
189:17 - which we still need to declare and
189:19 - define so let's do that now we'll return
189:22 - a double double get
189:25 - total
189:28 - let's list the parameters we need to
189:30 - accept an array of doubles
189:32 - double
189:34 - prices
189:35 - then add a set of square brackets for
189:38 - the parameter now when we pass an array
189:40 - to a function you only need to pass the
189:43 - arraign name you don't need a set of
189:45 - square brackets
189:46 - then we'll need a function declaration
189:48 - let's do that before the main function
189:52 - then at the end of my program i will
189:53 - display the total
189:55 - standard
189:56 - output pick a currency uh let's pick a
190:00 - dollar sign
190:02 - then i will display the total within the
190:05 - get total function i'm going to declare
190:08 - a separate local instance of a total
190:10 - variable
190:13 - remember that variables can have the
190:15 - same name as long as they're within a
190:16 - different function so we have double
190:18 - total i'm going to iterate over my array
190:21 - using a for loop
190:23 - normally what we would do is say int i
190:26 - equals zero
190:27 - i would continue this as long as i is
190:30 - less than then at this point we would
190:32 - calculate the size of the array but
190:34 - technically this isn't going to work and
190:36 - i'll demonstrate why we have the size of
190:38 - our array prices
190:40 - divided by the size of either the data
190:43 - type or one of the elements
190:46 - typically i like to use one of the
190:47 - elements
190:48 - prices at index zero then i will
190:51 - increment our counter by one during each
190:53 - iteration within our for loop let's
190:55 - assign total equal to total
190:58 - plus prices at index of i
191:01 - or we could shorten this to
191:03 - total plus equals prices at index of i
191:07 - at the end of our program we will return
191:09 - whatever the total is now this isn't
191:11 - going to work the way it's written now
191:13 - here's why when we pass an array to a
191:16 - function it decays into what's known as
191:18 - a pointer which we haven't discussed yet
191:20 - but we will in future topics within this
191:22 - function we're not working with an array
191:24 - anymore we're working with a pointer
191:25 - that points to the address of where the
191:28 - array begins this function has no idea
191:31 - how big this array is anymore we can't
191:33 - calculate how many elements are within
191:35 - this array what we could do is that when
191:37 - we invoke this function we can pass in
191:39 - the array as well as the size of the
191:41 - array since this function no longer
191:44 - knows how big the array is we can
191:46 - explicitly let the function know what
191:47 - the size is so let's calculate what the
191:50 - size is
191:51 - into size equals
191:53 - we can just copy all this code
191:57 - paste it
191:59 - now when we invoke this function i'm
192:01 - going to pass the size as a second
192:03 - argument
192:05 - then we'll need a matching set of
192:07 - parameters
192:08 - and size
192:11 - be sure to add that with your function
192:13 - declaration too if you have one
192:16 - i would like to continue this for loop
192:18 - as long as i is less than size
192:21 - now this should work
192:23 - let's verify that
192:25 - yep and our total is 150 dollars and
192:28 - three cents in conclusion when you pass
192:31 - an array to a function you only have to
192:33 - pass the array name you don't need a set
192:36 - of square brackets when you do so
192:38 - however when a function receives an
192:39 - array it decays into a pointer and the
192:42 - function no longer knows what the size
192:44 - of the array is so we could pass that as
192:47 - an additional argument to let the
192:48 - function know what the size is which we
192:50 - could then use to you know iterate over
192:52 - the array so that's how to pass an array
192:54 - to a function your assignment is to post
192:57 - a function that accepts an array as an
192:59 - argument in the comments section down
193:01 - below and well yeah that's how to pass
193:03 - an array to a function in c plus plus
193:08 - hey welcome back so in this video i'm
193:11 - going to show you how we can search an
193:13 - array for an element let's create an
193:15 - array of numbers something simple int
193:18 - numbers this will be an array
193:20 - then assign some numbers i'll just
193:22 - assign the numbers 1 through 10 because
193:24 - i'm basic like that
193:28 - there one through ten we'll probably
193:30 - need this later i'm going to calculate
193:32 - the size of the array
193:34 - and size equals
193:37 - size of
193:38 - my array numbers divided by the size of
193:42 - one of the elements
193:44 - i'll just pick the first element
193:48 - we'll need to keep track of an index
193:49 - like what index did we find something
193:51 - that we're searching for
193:53 - int index
193:55 - i'll declare this variable but we don't
193:57 - need to assign it
193:59 - as well as int
194:01 - mynum mynum will be the number that
194:03 - we're looking for
194:05 - let's accept some user input we'll
194:07 - create a prompt
194:08 - standard output
194:11 - enter
194:13 - element to
194:15 - search
194:16 - for
194:18 - i'll add a new line because i can
194:22 - standard
194:24 - input
194:26 - my num
194:29 - i'm going to create a function that will
194:31 - search an array for us let's define that
194:33 - function outside of the main function
194:35 - this function will return an integer
194:38 - that will be our index
194:40 - the return type isn't
194:41 - i'll name this function
194:43 - search array
194:46 - there's a couple parameters
194:48 - we'll have three parameters
194:50 - an array of integers
194:52 - integer
194:53 - array
194:55 - the size of the array and size
194:58 - then some element that we're searching
194:59 - for
195:01 - int element
195:03 - then we should probably add a function
195:05 - declaration at the top
195:08 - that's good
195:09 - this function will return an integer the
195:12 - index of the element that we're
195:13 - searching for
195:14 - we will take our index variable
195:17 - set the sql to then i'm going to invoke
195:20 - the search array function that we just
195:21 - declared
195:22 - but we need three matching arguments for
195:24 - the three parameters that we have set up
195:27 - an array a size and an element
195:30 - we'll pass in our array
195:32 - numbers the size of the array that we
195:35 - already calculated
195:37 - and the element that we're searching for
195:38 - we're searching for mynum
195:42 - within the search array function we will
195:44 - iterate from the beginning of the array
195:46 - to the end and see if there's any
195:47 - matches we can do that with a for loop
195:52 - we'll begin at 0
195:54 - into i equals 0 that's our index
195:58 - i will continue this as long as i is
196:00 - less than the size of the array that
196:03 - we're passing in as an argument
196:05 - then increment our index by one
196:08 - this would be technically a linear
196:10 - search
196:11 - we'll start at the beginning
196:13 - and check every value until we reach the
196:15 - end
196:17 - so let's check using an if statement
196:19 - within the for loop
196:20 - if
196:21 - our array we did name this array numbers
196:24 - but remember that you can rename
196:25 - parameters
196:26 - numbers is technically our array
196:29 - if our array that we receive
196:32 - at index of i
196:34 - that's our counter
196:36 - is equal to the element that we're
196:38 - searching for
196:40 - we will return whatever the index is i
196:44 - if we search through this entire array
196:46 - and don't find that element that we're
196:47 - searching for
196:49 - we'll return negative one in programming
196:52 - negative one serves as a sentinel value
196:55 - if you see negative one that typically
196:57 - means that something wasn't found we'll
196:59 - return either i or negative 1
197:01 - then assign it to this index variable
197:04 - within the main function
197:05 - using an if statement we'll check to see
197:07 - what that value is
197:10 - if
197:11 - our index does not equal negative one
197:16 - that means the element that we're
197:17 - searching for is somewhere within our
197:18 - array
197:20 - let's display the index standard
197:23 - output
197:25 - my num
197:28 - is at
197:30 - index
197:33 - whatever the index variable is
197:38 - else
197:41 - standard output
197:44 - my num
197:48 - is not in the
197:50 - array
197:53 - okay let's see if this actually works
197:56 - enter element to search for let's search
197:58 - for one
198:00 - one is that index zero remember that
198:02 - computers always start with zero
198:05 - enter an element to search for
198:07 - let's search for 10
198:09 - 10 is at index 9
198:11 - enter an element to search for 4 20 69
198:15 - 420 69 is not in the array
198:19 - for additional practice let's search
198:21 - through an array of strings such as food
198:24 - we'll create an array of strings
198:28 - i'll rename numbers as foods
198:31 - then think of some food that you like
198:34 - pizza
198:36 - hamburger
198:39 - hot dog
198:42 - int size equals the size of foods
198:46 - divided by
198:48 - one of the elements of foods let's
198:50 - rename my num as my food that's the food
198:53 - that we're searching for
198:55 - and that will be of the string data type
198:59 - in place of cn when working with strings
199:01 - let's use getline because the user input
199:04 - may contain spaces
199:06 - standard
199:07 - getline
199:10 - standard
199:12 - input
199:14 - my food
199:16 - within the search array function that we
199:18 - created we will pass our array foods
199:22 - the size can stay the same
199:24 - then pass in my food that's what we're
199:26 - searching for
199:27 - within the if else statements replace my
199:30 - num with my food
199:34 - then we'll need to change the data types
199:36 - of this function
199:37 - we're accepting an array of strings
199:40 - replace int with string
199:42 - do that with your element as well
199:45 - then we need to change the function
199:46 - declaration at the top of our program
199:50 - okay we can now search through an array
199:52 - of strings
199:54 - enter element to search for let's search
199:56 - for pizza pizza is at index
199:58 - zero hamburger hamburger is that index
200:01 - one
200:04 - hot dog
200:06 - hot dog is that index two
200:09 - then let's search for something that's
200:10 - not within this array
200:14 - what about sushi
200:16 - sushi is not in the array
200:18 - yeah everybody that is how to search
200:20 - through an array this would technically
200:23 - be a linear search
200:24 - you begin at the first element of an
200:26 - array check to see if the values are
200:28 - equal if they're not equal you move to
200:30 - the next element until you reach the end
200:32 - and that's basically it if you would
200:34 - like a copy of this code i'll post this
200:36 - in the comment section down below and
200:38 - well yeah that's how to search through
200:40 - an array in c plus plus
200:44 - hey everybody in this topic i'm going to
200:46 - show you how we can sort an array first
200:48 - i'll explain the logic behind it then
200:50 - we'll write a c plus plus program to
200:51 - actually handle it we'll use a standard
200:53 - bubble sort it's an easy sorting
200:55 - algorithm to write although there are
200:57 - more efficient sorting algorithms we're
200:59 - still learning so let's stick with a
201:01 - bubble sort so with the bubble sort we
201:03 - begin at index 0 the beginning of our
201:05 - array we'll examine the element directly
201:07 - to the right if the element on the left
201:09 - is larger than the element on the right
201:11 - we need to swap these two elements i
201:13 - will take this element move it within
201:16 - some temporary storage like a temporary
201:18 - variable take the element on the right
201:21 - move it to the left
201:23 - take whatever's within temp
201:25 - place it within that opening again we
201:27 - take our value examine the element to
201:29 - the right if it's larger we swap them
201:34 - then we would just repeat this until we
201:36 - reach the end
201:56 - so that would be one element we would
201:57 - repeat this process with the rest of the
201:59 - elements now for the next iteration 1 is
202:02 - not greater than 9 so we leave it alone
202:04 - then we check the next element nine is
202:06 - greater than two we would swap these two
202:08 - values
202:10 - i'll speed up the footage
202:58 - that is a quick demonstration of a
203:00 - bubble sort so let's actually write this
203:02 - in code now
203:04 - okay let's create an array
203:06 - this will be an array of integers
203:09 - make up some numbers make sure they're
203:11 - not in order
203:16 - let's calculate the size of the array
203:18 - and size equals
203:21 - size of
203:22 - our array
203:24 - divided by the size of one of the
203:26 - elements
203:30 - at the end of our program we will
203:32 - iterate over our array i'll use a for
203:34 - each loop
203:36 - int
203:36 - element in array
203:39 - i will display using standard output
203:43 - every element then i think i'll separate
203:45 - each with a space
203:47 - okay and here's our array obviously
203:49 - unsorted so let's change that i'll
203:51 - create a sort function
203:54 - void sort
203:56 - there will be two parameters an integer
203:59 - array
204:01 - int
204:02 - size
204:03 - let's add a function declaration at the
204:05 - top of our program
204:08 - before we print our array let's invoke
204:10 - the sort function that we just created
204:13 - pass in our array
204:15 - as well as the size there we go okay so
204:17 - let's head to our sort function what
204:19 - we'll need to do is iterate over our
204:21 - array once for every element that's
204:23 - within the array we'll need the help of
204:25 - a temporary variable to swap some values
204:28 - then we'll need nested loops
204:31 - 4
204:32 - and i equals 0
204:34 - we'll continue this as long as i is less
204:37 - than the size of our array
204:40 - minus one the reason that the condition
204:43 - is size minus one is because we don't
204:45 - need to compare the last element to
204:46 - anything the larger values will
204:48 - naturally gravitate towards the end of
204:50 - the array increment i by one
204:53 - then we'll need a nested for loop
204:58 - let's use index j because i is already
205:00 - taken
205:03 - now our condition is going to be size
205:05 - minus i minus one once we place the
205:08 - larger elements all the way to the right
205:10 - they should already be in order we don't
205:12 - need to sort any elements that are
205:13 - already sorted then what we have to do
205:15 - is use an if statement to check to see
205:17 - if the current element that we're on
205:20 - array
205:21 - at index
205:22 - of j
205:24 - is greater than the element on the right
205:26 - array at index of j
205:31 - plus one if the element on the left is
205:33 - larger than the element on the right we
205:35 - just have to swap those two values
205:37 - we'll take temp
205:39 - which we declared up here
205:41 - equals array
205:43 - at index of j
205:46 - array at index of j
205:48 - equals array
205:50 - at index of j
205:52 - plus one
205:53 - then lastly
205:55 - array
205:56 - at index of j
205:58 - plus one equals whatever's within temp
206:01 - and that should be it let's run this
206:05 - yeah and our array is now sorted in
206:07 - ascending order so if you need
206:09 - descending order within this if
206:11 - statement use
206:12 - less than
206:15 - and now this array is in descending
206:16 - order well okay then everybody that's
206:18 - one way in which you can sort an array
206:21 - we used what's known as a bubble sort
206:23 - it's easy to write but it's not as
206:25 - efficient as some other algorithms that
206:26 - are out there this is a good one for
206:28 - beginners if you would like a copy of
206:30 - this code i'll post this in the comment
206:31 - section down below and well yeah that's
206:33 - how to sort an array using c plus
206:39 - hey everybody in this topic i'm going to
206:41 - explain the fill function the fill
206:43 - function fills a range of elements with
206:46 - a specified value there's three
206:48 - arguments a beginning address of a data
206:50 - structure an ending address then some
206:53 - value suppose we have an array of
206:55 - strings
206:56 - standard string i'll name this array
206:59 - foods
207:00 - i'll give this a maximum size of 10
207:03 - elements
207:04 - then i'll go ahead and fill this array
207:06 - with the same food
207:07 - i'll fill all 10 elements with the word
207:09 - pizza
207:12 - so that's one two three four five six
207:16 - seven eight nine ten so these all have
207:18 - the same value now this really isn't
207:20 - practical although it does work just to
207:22 - demonstrate i'll display the elements
207:24 - with the for each loop
207:25 - we're displaying strings for every food
207:29 - element in my array foods
207:32 - i would like to display
207:35 - each food element
207:37 - then i'll add a new line
207:39 - so we have 10 elements all filled with
207:42 - pizza you know this does work but it's
207:44 - not practical to initialize all of these
207:46 - elements manually what if we had an
207:48 - array of 100 elements i would have to
207:50 - type the word pizza 100 times there's a
207:53 - few solutions one of which would be the
207:55 - fill function which would make this
207:57 - process a lot easier
207:59 - i'm going to declare this array but not
208:01 - fill it in quite yet
208:03 - we have an array of 100 elements to
208:05 - store strings i'm going to fill all 100
208:08 - elements with pizza so we type
208:11 - fill parentheses
208:12 - now we need the beginning address of a
208:14 - data structure
208:16 - well that's simply the array name then
208:18 - an ending address so that would be the
208:20 - second argument we would type the array
208:23 - name
208:24 - plus the size of the array so plus 100
208:27 - in this case
208:28 - then some value i'll fill this array
208:30 - with the word pizza 100 times
208:35 - there we go
208:37 - all 100 elements have been filled with
208:39 - pizza now if you do change the size of
208:42 - this array let's say we have 150
208:44 - elements you would have to go and change
208:46 - that within the fill method too what i
208:48 - would do in place of adding some number
208:50 - to my array i will add a size variable
208:53 - foods will be index of size and then we
208:56 - can set some size actually better yet
208:58 - let's make this a constant
209:00 - constant and
209:01 - size
209:03 - then i'll set this to be
209:04 - 100
209:06 - foods plus size
209:09 - so again all 100 elements are filled
209:11 - with pizza now here's a few exercises if
209:14 - i'm filling the first half of this array
209:16 - with pizza we have our beginning address
209:18 - then i need to find the halfway point
209:21 - foods plus size divided by two i'll just
209:24 - go ahead and put that within some
209:25 - parentheses for clarity then if i were
209:27 - to run this the first half of this array
209:30 - contains pizza
209:32 - and the second half contains nothing
209:34 - it's empty
209:35 - to fill the second half of this array
209:37 - with hamburgers i would invoke the fill
209:39 - function again
209:42 - we will begin where we left off
209:45 - foods plus size divided by two
209:48 - the ending address would be
209:50 - foods
209:51 - plus
209:53 - size
209:54 - we will fill the second half of this
209:56 - array with
209:57 - hamburgers
210:02 - there we are the first half is all pizza
210:04 - the second half is all hamburgers
210:06 - here's a challenge round we'll fill the
210:09 - first third of our array with pizza the
210:12 - second third will be hamburgers and the
210:14 - last third will be hot dogs
210:16 - but 100 doesn't divide by three evenly
210:18 - just to make this simple i'll set our
210:20 - array to be 99 elements we're filling
210:22 - the first third of our array with pizza
210:25 - size divided by three hamburgers will
210:27 - begin at foods plus size divided by
210:30 - three
210:31 - and end at size
210:33 - divided by three
210:36 - times two
210:37 - then we'll invoke the fill function one
210:39 - more time
210:40 - we'll continue where we left off
210:44 - and we will end at foods plus size
210:48 - and fill this with hot dogs
210:53 - here we go
210:56 - so we have pizza hamburgers
210:59 - then hot dogs
211:00 - so yeah that is the fill function we can
211:03 - fill a range of elements with a
211:04 - specified value it's great if you have a
211:07 - lot of elements to work with and you
211:08 - don't manually want to type all the
211:10 - values if you would like a copy of this
211:12 - code i'll post this in the comment
211:13 - section down below and well yeah that's
211:15 - the fill function in c plus
211:21 - hey welcome back everybody in this video
211:23 - i'm going to explain one of a few ways
211:25 - in which we can accept user input and
211:27 - place it within an array there's no
211:29 - one-size-fits-all way to do it i'll show
211:31 - you one way that's good for beginners
211:33 - let's begin by creating an array i'll
211:35 - create an array of strings named
211:38 - foods we're not going to be assigning
211:41 - values to this array quite yet that's
211:43 - where the user input will come in if
211:45 - we're not assigning values right away
211:46 - when we initialize this array we'll have
211:48 - to specify a size for the time being
211:51 - let's say 5 something small now arrays
211:54 - they're static data structures while our
211:57 - program is running we can't change the
211:59 - size of this array the max size is stuck
212:01 - at 5 and that might be a problem if we
212:03 - would like to enter in more than 5 items
212:05 - we'll discuss dynamic memory in a future
212:07 - video then i'm going to calculate the
212:10 - size of this array and size equals size
212:13 - of
212:14 - my array foods divided by the size of
212:17 - one of the elements foods at index of
212:20 - zero
212:22 - let's create a for loop to iterate over
212:24 - the elements of this array
212:28 - four
212:29 - and i equals zero we'll continue this as
212:32 - long as i is less than the size of our
212:35 - array
212:36 - then increment i by one
212:39 - let's create a prompt
212:41 - standard output
212:43 - enter a
212:45 - food you like
212:48 - then i'll display the number
212:50 - to show the user what number we're on
212:53 - i
212:55 - then i'm just going to add a colon at
212:57 - the end
213:00 - if we're working with strings we should
213:02 - probably use the getline function
213:04 - just because what the user enters may
213:06 - contain spaces
213:08 - get
213:09 - line
213:10 - standard input
213:13 - we'll place our input within our array
213:16 - foods
213:17 - at the index of i whatever we're
213:19 - currently on our counter at the end of
213:22 - our program let's display a message
213:26 - you like the following
213:29 - food
213:33 - i'll use a for each loop to iterate over
213:35 - the elements of this array
213:37 - we list the data type
213:40 - a name for the current element
213:42 - food in foods
213:46 - let's display standard output
213:49 - whatever the food is i'll add a new line
213:53 - and that should be good
213:55 - now take a look at this enter a food you
213:57 - like we're on number zero i'm going to
213:59 - add plus one to i when we display our
214:02 - prompt the user is not going to be sure
214:04 - why there's a number zero but we know
214:06 - that's the beginning index of an array
214:08 - so i'm just going to change that here
214:09 - enter a food you like we're on number
214:11 - one
214:12 - pizza
214:14 - hamburger
214:16 - hot dog
214:18 - ramen
214:19 - sushi
214:21 - and these are the five elements you like
214:23 - the following food pizza hamburger hot
214:26 - dog ramen sushi okay that's pretty good
214:28 - so far suppose the user only wants to
214:30 - enter in three elements not all five we
214:33 - should add some way to escape out of
214:35 - this for loop based on some user input
214:37 - i'm going to add this line enter a food
214:40 - you like or
214:43 - q
214:44 - to quit
214:46 - now check this out
214:48 - if the user types in q
214:50 - we would like to exit
214:53 - if
214:55 - foods at index of i
214:59 - is equal to
215:01 - the string q
215:03 - then i would like to break out of this
215:04 - for loop the user is done entering an
215:06 - input
215:07 - but there's a problem with this
215:12 - enter a food you like or q to quit
215:15 - number one
215:16 - pizza
215:17 - hamburger
215:19 - hot dog now i'm going to press q to quit
215:23 - we don't have any more prompts to enter
215:24 - in food we went to the results you like
215:27 - the following food pizza hamburger hot
215:30 - dog q i'd rather not put the letter q in
215:33 - my foods array i'm going to create a
215:35 - temporary variable just to hold some
215:38 - user input
215:39 - this will be of the string data type
215:41 - standard string i'll name this temp
215:44 - meaning temporary it's a temporary
215:46 - variable in place of directly putting my
215:48 - user input into my foods array i'll
215:51 - place it temporarily within my variable
215:53 - temp i'm going to check
215:55 - if temp
215:57 - is equal to q
215:59 - else
216:00 - will take foods
216:02 - at index of i
216:04 - set the sequel to temp that way we're
216:06 - not directly assigning our user input to
216:09 - our array until we check what it is if
216:12 - the user types in queue to quit we don't
216:14 - want to put that within our foods array
216:15 - so let's try this again it should be
216:17 - better
216:18 - enter a food you like or q to quit
216:22 - pizza
216:23 - hamburger
216:25 - hot dog q to quit
216:28 - okay pizza hamburger hot dog
216:31 - well the letter q isn't here
216:33 - but when we display what's within the
216:35 - array we have these empty spaces we did
216:37 - not assign a value to these if one of
216:39 - our elements is empty i don't want to
216:41 - display it
216:42 - so we can make this following change
216:44 - in place of a for each loop let's use a
216:47 - standard for loop
216:49 - int i equals zero
216:52 - now here's the condition we're used to
216:53 - saying i is less than size right i'd
216:56 - like to propose a change we'll write a
216:58 - different condition i will check if the
217:01 - current element is empty
217:03 - foods at index of i
217:07 - dot
217:08 - empty function
217:10 - then we'll add the not logical operator
217:13 - we'll continue our for loop as long as
217:15 - the current element is not empty then
217:17 - we'll add the statement increment i by
217:20 - one we'll display our array foods at
217:23 - index of i
217:25 - this for loop shouldn't display any
217:27 - elements that are empty
217:29 - pizza
217:31 - hamburger
217:33 - hot dog q to quit
217:35 - yeah and we only have three elements
217:37 - pizza hamburger hot dog one disadvantage
217:40 - of arrays is that they have a limited
217:42 - size they're static once we declare a
217:44 - size we can't change it we're limited to
217:47 - only storing five foods you could
217:49 - declare a larger size but you may be
217:51 - wasting memory if a user doesn't want to
217:53 - type in all 10. so in future topics
217:56 - we'll need to discuss both dynamic
217:57 - memory and vectors which should be
218:00 - coming up sometime in the future so yeah
218:02 - that is one way out of many ways to
218:05 - enter in user input into an array if you
218:07 - would like a copy of this code i'll post
218:09 - this in the comment section down below
218:11 - and well yeah that's how to enter user
218:13 - input into an array using c plus plus
218:19 - hey everybody in this topic i'm going to
218:21 - explain multi-dimensional arrays more
218:23 - specifically 2d arrays it's an array
218:26 - made up of separate arrays they're
218:28 - useful because they can represent a grid
218:31 - or matrix of data with rows and columns
218:33 - here's an example i'll create a
218:35 - two-dimensional array of cars car names
218:38 - the data type will be string
218:41 - i will name this array cars
218:43 - with the rays they have one set of
218:45 - square brackets but if you're creating a
218:47 - two-dimensional array you need two sets
218:49 - of square brackets the first set of
218:51 - square brackets is for the number of
218:53 - rows
218:54 - let's say three in this example
218:56 - the second set of square brackets
218:58 - corresponds to the number of columns if
219:00 - we have three rows and four columns
219:03 - three times four is twelve so that would
219:05 - give us twelve elements
219:07 - if you're initializing your 2d array
219:09 - right away you don't necessarily need to
219:12 - set a row size but you do need a column
219:14 - size i'll just set the amount of columns
219:17 - to be 3 to something small
219:19 - okay so let's fill in the first array
219:22 - this first row will be cars manufactured
219:24 - by ford
219:26 - i'll add a mustang
219:29 - then a ford escape
219:35 - then maybe
219:36 - a ford f150
219:39 - okay this is our first array
219:41 - i'm going to create a second array after
219:44 - the first array i'll add a comma
219:46 - what i like to do i like to organize my
219:48 - 2d array kind of like it's a grid
219:51 - so now we have a second array this next
219:54 - array will be cars manufactured by
219:57 - chevrolet
219:59 - i'll pick a corvette
220:02 - then an equinox
220:05 - and a silverado
220:08 - let's add one last array
220:12 - these will be cars manufactured by dodge
220:16 - challenger
220:18 - durango
220:22 - ram 1500
220:24 - all right now to finish this
220:25 - two-dimensional array we will enclose
220:28 - all of these inner arrays with another
220:30 - set of curly braces
220:32 - then add a semicolon to the end that is
220:34 - our two-dimensional array
220:36 - you can see that there's rows and
220:38 - columns
220:40 - in this example each row corresponds to
220:42 - a manufacturer
220:44 - so it's kind of like a grid a matrix
220:47 - then if you were to access one of these
220:48 - elements you need two indices just to
220:51 - demonstrate let's display all of them
220:53 - standard output cars
220:59 - i need to select the row number then the
221:01 - column number row zero
221:04 - column zero let's see what car that is
221:07 - i'm just gonna add a space between these
221:09 - elements
221:12 - okay row zero column zero that's my
221:14 - mustang row zero column zero that's
221:17 - mustang
221:19 - let's print the next element that would
221:21 - be row zero column one
221:25 - that is my ford escape
221:27 - row zero
221:28 - column one i'm just going to zoom out
221:31 - there then we have row zero column two
221:37 - that's the ford f-150 i'm going to
221:39 - display a new line character now we are
221:42 - on row one
221:44 - so let's copy these
221:46 - paste them
221:49 - row one
221:51 - column zero row one column one row one
221:54 - column two
221:56 - so this next row is our car is
221:58 - manufactured by chevrolet we have our
222:01 - corvette
222:02 - our equinox then our silverado
222:07 - then we will display row two
222:11 - row two column zero row two column one
222:15 - row two column two
222:18 - and these are the cars manufactured by
222:20 - dodge we have our challenger durango ram
222:23 - 1500
222:24 - so yeah you can see that a
222:25 - two-dimensional array is kind of like a
222:27 - grid made up of rows and columns
222:29 - now if we need to iterate over a
222:31 - two-dimensional array and display the
222:33 - elements here's one way in which we can
222:35 - do that we can use nested loops
222:38 - but just to make it easy i'm going to
222:40 - calculate the amount of rows and columns
222:42 - that we have
222:43 - let's begin with the rows
222:44 - int rows
222:46 - equals
222:47 - size of
222:49 - my array cars
222:51 - divided by the size of one of the
222:54 - elements
222:55 - cars at index 0 is good
222:59 - then to calculate the amount of columns
223:01 - that we have we can do something like
223:03 - this
223:04 - and columns equals the size of
223:08 - cars
223:09 - at index of zero
223:12 - divided by the size of
223:14 - one of the elements so remember there's
223:17 - two indices this time
223:19 - zero zero is good
223:22 - in this example we should have three
223:23 - rows as well as three columns
223:26 - now let's create a for loop to iterate
223:28 - over the rows
223:30 - and i equals zero i will continue this
223:33 - as long as i is less than the number of
223:36 - rows that we have
223:37 - then increment i by one
223:40 - i'm going to display
223:43 - cars at index of i just for the time
223:45 - being
223:47 - then for now i'm just going to add a new
223:48 - line between each
223:51 - so if i was to display cars at index i
223:55 - that should give us three memory
223:56 - addresses
223:58 - one address for every inner array
224:01 - this memory address is for the first
224:03 - array
224:04 - then the second array
224:07 - then the third array
224:10 - what i need to do now to get the
224:12 - elements within each array is to create
224:14 - an inner loop
224:16 - let's use an inner for loop to iterate
224:19 - over each element within each array
224:22 - int j because i is already taken set
224:25 - this equal to zero
224:27 - we will continue this for loop as long
224:29 - as j is less than the number of columns
224:32 - that we have
224:33 - increment j by one
224:36 - now i'm going to display
224:40 - cars and there's two indices
224:44 - i
224:45 - then j
224:48 - i'm going to display a space between
224:51 - each of these
224:55 - okay now we have one long line of text
224:58 - so once we escape the inner for loop i
225:00 - would just like to print a new line
225:02 - i'll add standard output
225:06 - new line character
225:10 - okay and here's our two-dimensional
225:12 - array the first row are for cars
225:14 - manufactured by ford
225:16 - then chevrolet
225:18 - then dodge
225:20 - that's how to iterate over a
225:21 - two-dimensional array you have the outer
225:23 - loop that's in charge of the rows the
225:26 - inner loop which is in charge of the
225:27 - columns so that's a two-dimensional
225:29 - array everybody it's just an array where
225:32 - each element is its own separate array
225:35 - you have two indices the first for the
225:37 - rows the second for the columns
225:39 - to access one of the elements you have
225:41 - to specify the row then the column that
225:44 - element is found
225:45 - so those are two-dimensional arrays your
225:48 - assignment is to post a two-dimensional
225:50 - array in the comments section down below
225:52 - and well yeah those are two dimensional
225:54 - arrays in c plus plus
225:59 - hey everybody in this video we're going
226:01 - to create a quiz game using c plus plus
226:03 - let's begin by creating an array of
226:05 - questions these will be of the string
226:07 - data type i will name this array
226:10 - questions
226:12 - and then let's think of some questions
226:14 - really add any questions that you want
226:16 - here's a few that come into mind for me
226:20 - what year was c plus plus
226:25 - created
226:28 - okay that is the first question i'll add
226:30 - an additional string
226:34 - question two who
226:36 - invented
226:38 - c plus plus
226:41 - third question
226:44 - what is the
226:47 - predecessor
226:51 - of c plus plus
226:55 - and i couldn't think of a fourth
226:56 - question so i'm gonna ask
226:59 - is the earth flat
227:02 - good enough with each question there
227:04 - will be four corresponding options i
227:07 - think a two-dimensional array would be
227:08 - perfect for this
227:10 - this will be a two-dimensional array
227:13 - of strings
227:14 - named options
227:17 - we'll need to set the number of columns
227:19 - four columns is good
227:22 - this first array will be for the options
227:24 - for the first question
227:28 - a will be
227:30 - 1969.
227:33 - b
227:34 - 1975
227:38 - c
227:39 - 1985 1985 is the correct answer
227:43 - d
227:45 - 1989
227:46 - now we have our next array who invented
227:49 - c plus plus
227:53 - guido
227:55 - van
227:56 - rossum
227:58 - he's the creator of python so that's not
228:00 - the correct answer
228:04 - yarn
228:08 - stro
228:10 - strip i'm sorry if i mispronounce your
228:12 - name dude hopefully you're not watching
228:14 - right now uh b is the correct answer in
228:15 - this case
228:17 - c
228:19 - john
228:21 - carmack
228:23 - d
228:25 - mark zuckerberg
228:31 - we're on question three
228:35 - what is the predecessor of c plus plus
228:39 - the correct answer is c that would be
228:41 - option a
228:47 - c plus
228:51 - c minus minus
228:57 - or b plus plus
229:00 - okay last question
229:03 - is the earth flat
229:06 - yes
229:10 - no
229:15 - sometimes
229:19 - what's earth
229:23 - all right then i just need to surround
229:25 - all of these arrays with another set of
229:27 - curly braces
229:29 - and there is our two-dimensional array
229:31 - named options to hold all of the options
229:34 - for our questions we'll need to create
229:36 - an answer key next this will be an array
229:38 - of characters
229:40 - answer
229:41 - key
229:43 - array
229:44 - equals
229:46 - here are the correct answers
229:48 - c
229:51 - b
229:54 - a
229:57 - then b
229:59 - 1985
230:02 - bjorn strosstrup
230:04 - c
230:04 - the language see that is
230:06 - and no the earth is not flat i looked it
230:09 - up on wikipedia just now let's calculate
230:11 - the size of our questions how many
230:13 - questions do we have
230:15 - and
230:16 - size
230:17 - equals
230:18 - the size of our array questions
230:22 - divided by the size of
230:24 - one of the elements
230:26 - questions at index
230:28 - zero
230:30 - we'll create a character to hold our
230:32 - guess
230:34 - and score to hold the score
230:38 - now we'll need to iterate over our
230:40 - questions
230:42 - for
230:44 - let me move down here
230:47 - and i equals zero we'll continue this as
230:50 - long as i is less than the size of our
230:53 - array the size of questions this would
230:56 - effectively be the amount of questions
230:58 - that we have
230:59 - then i'm going to increment i by one we
231:02 - will iterate once through all of the
231:04 - questions we have
231:07 - standard output
231:11 - let's access the string that's within
231:14 - questions at index i
231:17 - i'll add a new line
231:21 - just for some text decoration i'm going
231:24 - to add a bunch of asterisks before and
231:26 - after the question
231:28 - so let's get rid of this
231:31 - i think that'll look pretty cool
231:38 - there we go then we'll need to iterate
231:40 - over our 2d array
231:45 - we'll use an inner for loop for that
231:48 - we'll need a different index i is
231:50 - already taken let's pick j
231:53 - inch j equals zero we'll continue this
231:56 - as long as j is less than
231:59 - now we'll need to calculate how many
232:01 - elements are within each array
232:04 - so we can do that with
232:06 - size of
232:09 - our options array
232:10 - at index of i
232:14 - divided by the size of
232:18 - options and there's two indices here
232:22 - i
232:23 - then zero
232:24 - then we will increment j
232:27 - by one
232:29 - we will display our options standard
232:31 - output
232:32 - options there's two indices
232:35 - i
232:36 - then j
232:38 - i'll add a new line
232:42 - so if i were to run this this should
232:44 - display all of the questions and all of
232:46 - the options
232:50 - yeah here we are
232:52 - what year was c plus created who
232:54 - invented c plus plus
232:56 - what is the predecessor of c plus plus
232:59 - is the earth flat
233:00 - after all of the options are laid out we
233:03 - will accept some user input standard
233:05 - input
233:07 - we will place the user's input within
233:09 - guess
233:11 - then just in case the user types in
233:13 - something that's lowercase
233:14 - like a lowercase c we're looking for
233:16 - capital c
233:18 - so let's take the user's guess then make
233:20 - it uppercase guess
233:22 - equals
233:23 - to
233:24 - upper
233:25 - pass in guess
233:27 - so that will capitalize the character
233:30 - the user enters in
233:32 - then let's check to see if the user's
233:35 - guess is equal to the answer
233:38 - we'll need to access the answer key
233:41 - at index of i that's the current
233:43 - numbered question
233:45 - if those two values are the same
233:48 - we will display
233:49 - correct
233:50 - i'll add a new line
233:53 - then increment the user score
233:55 - score plus plus
233:57 - else the user's guess is not correct
234:01 - standard output
234:03 - wrong
234:06 - then we will display the correct answer
234:08 - standard output
234:11 - answer colon space
234:15 - we'll access the answer key at index of
234:19 - i
234:23 - then i'll add a new line
234:27 - okay let's try this so far
234:30 - what year was c plus plus created
234:33 - c
234:34 - who invented c plus plus that would be b
234:38 - what is the predecessor of c plus plus
234:41 - that is c the language c but it's option
234:43 - a
234:46 - is the earth flat
234:48 - what's earth d
234:50 - okay wrong answer b
234:52 - okay so we know that we can cycle
234:54 - through the questions
234:56 - outside of the for loop we will
234:58 - calculate the player score so right here
235:01 - i'll display the word results
235:04 - standard output
235:08 - results
235:11 - i'll add a new line
235:13 - actually now that i think of it i'm
235:14 - gonna steal some of these text
235:15 - decorations
235:17 - let's make it look pretty
235:25 - something like this would look cool but
235:26 - not necessary
235:29 - standard
235:30 - output
235:33 - correct
235:35 - guesses
235:37 - then we will display the current score
235:40 - add a new line
235:45 - standard output
235:49 - number of
235:50 - questions
235:53 - that is simply the size of our array
235:58 - add a new line
236:00 - then we will calculate a percentage what
236:03 - percent of the questions did they get
236:04 - right
236:08 - score
236:11 - score divided by
236:13 - size
236:18 - times 100 then we'll add percent
236:24 - so at first this isn't gonna work
236:26 - because we're using integer division but
236:28 - i'll explain that momentarily about
236:30 - typecasting uh so let's run this once
236:34 - let's say a
236:35 - b
236:36 - c
236:37 - d correct guesses one number of
236:39 - questions four uh our score was zero
236:42 - percent even though we got one right
236:44 - we'll need to add a cast to the divisor
236:46 - let's cast size as a double to hold that
236:49 - decimal portion
236:52 - then this should work
236:55 - a b
236:57 - c d
236:58 - correct guesses one number of questions
237:01 - four our score was twenty five percent
237:03 - now let's go for a hundred
237:05 - remember that the correct answers are c
237:08 - b
237:09 - a b
237:11 - 1985 bjorn strostrop
237:14 - the language c but that's option a
237:17 - is the earth flat
237:19 - no
237:20 - b
237:21 - correct guesses four number of questions
237:23 - four score one hundred percent well yeah
237:25 - everybody that is a quiz game you can
237:28 - make in c plus plus you can impress your
237:30 - friends or have your friends take the
237:32 - quiz you know you can change your
237:33 - questions around if you want if you
237:35 - would like a copy of this code i'll post
237:37 - this in the comments section down below
237:38 - and that is a quiz game written using c
237:41 - plus
237:44 - hey everybody welcome to the exciting
237:46 - world of memory addresses a memory
237:48 - address is a location in memory where
237:51 - data is stored in c plus a memory
237:53 - address can be accessed with an
237:55 - ampersand known as the address of
237:58 - operator suppose we have some variables
238:00 - i'll create a string
238:02 - the variable name will be well named
238:06 - assign this a string of text
238:08 - i'll create int age set sql to some
238:11 - value
238:13 - then a boolean boolean student i'll set
238:17 - that to be true
238:18 - a variable is a container for some data
238:21 - but these variables need to exist
238:23 - somewhere well they exist in your
238:25 - computer's memory at a given address
238:27 - we can find that address with the
238:29 - address of operator i'll display that
238:33 - standard output
238:35 - i would like to display the address of
238:37 - name
238:38 - then i'll just add a new line
238:43 - here's the address of my name variable
238:45 - in my computer's memory it's a bunch of
238:47 - weird letters and numbers well this is a
238:50 - hexadecimal address every time we run
238:52 - this program
238:54 - that number is likely to change
238:56 - let's display the addresses of agent
238:59 - student
239:02 - address of age address of student
239:08 - here are the memory addresses again all
239:10 - in hexadecimal so these are kind of like
239:13 - street addresses hey for fun let's
239:15 - decode these to decimal you can easily
239:17 - find tools online to convert hexadecimal
239:19 - to decimal
239:21 - let's see what these numbers are
239:28 - here are the hexadecimal memory
239:30 - addresses but converted to decimal
239:32 - they're like house numbers different
239:34 - data types take up more or less room
239:36 - than other data types if we look at the
239:38 - distance between my name variable and
239:41 - age well that has a gap of four memory
239:43 - addresses but the gap between my age and
239:46 - student variables
239:48 - is only one because well booleans only
239:50 - take up one byte of memory that's one of
239:53 - the reasons we use data types we need to
239:55 - know how much memory we need to allocate
239:57 - to fit a certain value if we're working
239:59 - with a boolean variable well we only
240:02 - need one byte of memory that's why the
240:04 - distance between the memory address of
240:06 - age and student is only one forty minus
240:09 - thirty nine is one integers take up four
240:12 - bytes of memory 44 minus forty is four
240:15 - four bytes so that's an introduction to
240:18 - memory addresses it's going to be
240:20 - helpful in the next topic when we
240:21 - discuss pointers if you would like a
240:23 - copy of this code i'll post this in the
240:25 - comments section down below and that is
240:27 - an introduction to memory addresses in c
240:30 - plus
240:33 - all right everybody so i'm gonna explain
240:35 - the differences between pass by value
240:37 - and pass by reference in this example
240:39 - we'll swap two variables suppose we have
240:42 - two imaginary cups
240:45 - i'll name the first cup x x will contain
240:48 - kool-aid
240:51 - then we have
240:53 - cup y
240:54 - which contains water
240:56 - i need to swap these two values
240:58 - will need the help of a temporary
241:00 - variable
241:04 - at temp
241:05 - to swap two variables we would assign a
241:07 - temp equal to x
241:10 - x equals y
241:12 - y equals temp let's display these
241:15 - variables standard output
241:19 - x
241:22 - the variable x
241:24 - i'll add a new line
241:26 - let's copy this paste it
241:32 - y
241:33 - the variable y this should work
241:36 - x now contains water y contains kool-aid
241:39 - now check this out what if we create a
241:41 - function to swap two variables for us
241:44 - the return type will be void
241:46 - i'll name this function swap
241:49 - there will be two parameters
241:52 - string x
241:55 - string y
241:57 - let's copy this section of code delete
242:00 - it
242:02 - then paste it within the swap function
242:04 - then you'll need a function declaration
242:06 - at the top of your program then we will
242:08 - invoke this function
242:10 - swap
242:11 - pass our arguments
242:13 - x and y
242:15 - let's see what happens
242:19 - okay what the heck x still contains
242:22 - kool-aid y still contains water these
242:24 - values weren't switched within my
242:26 - variables x and y even though we invoked
242:28 - this function so why didn't it work well
242:30 - that's because normally when we pass a
242:33 - variable to a function we're passing by
242:35 - value when we invoke this function we're
242:38 - creating copies of the original values
242:40 - what we have now are two copies of the
242:43 - variable x and y and all we're doing is
242:46 - switching the two copies and not the
242:48 - original values so that's passed by
242:50 - value we're creating copies of the
242:52 - arguments if i need to change the
242:54 - original values of these variables i
242:57 - could instead pass by reference a
242:59 - reference as in a memory address an
243:02 - address in your computer's memory where
243:03 - a value is located i will prefix the
243:06 - address of operator which is an
243:08 - ampersand to these parameter names
243:11 - then add that to your function
243:12 - declaration as well now let's see what
243:14 - happens
243:16 - yeah those two variables were switched x
243:19 - contains water y contains kool-aid when
243:21 - we passed by value we created copies of
243:24 - x and y with the parameters when we use
243:26 - the addressof operator we're passing
243:28 - memory addresses to where the original x
243:31 - and y variables are located and then
243:33 - swapping the values just to reinforce
243:35 - this idea let's revert to passing by
243:38 - value i'm going to display the address
243:41 - of x and y
243:42 - then within our swap function
243:44 - let's get rid of this code
243:46 - then i will also display the addresses
243:48 - of x and y
243:51 - see we have four different addresses our
243:53 - original x variable has a different
243:56 - memory address than the one that's
243:58 - within the function
243:59 - same thing goes with y these two
244:01 - addresses are different we have two x
244:04 - variables and two y variables
244:06 - originally within that swap function we
244:08 - were switching the values of the x and y
244:11 - copies if we instead pass by reference
244:14 - let's use that address of operator again
244:18 - well now x and y are referring to the
244:20 - same place they have the same memory
244:22 - addresses that's why the swap function
244:24 - worked when we passed by reference in
244:26 - place of pass by value so that's the
244:28 - main difference between pass by value
244:30 - and pass by reference you should use
244:32 - pass by reference as often as possible
244:34 - unless you have a reason to pass by
244:35 - value if you would like a copy of this
244:37 - code i'll post this in the comment
244:39 - section down below and well yeah that's
244:41 - the main difference between pass by
244:42 - value and pass by reference in c plus
244:48 - hey everyone in this topic i'm going to
244:50 - explain const parameters a const
244:53 - parameter is a parameter that is
244:55 - modified with a const keyword that makes
244:57 - it effectively read-only there's a
244:59 - couple reasons why you might want to
245:01 - declare a const parameter your code is
245:03 - more secure within a function and it
245:06 - conveys the intent to other programmers
245:08 - it's especially useful for references
245:10 - and pointers here's an example of const
245:13 - parameters in action
245:14 - i have standard string name assign your
245:18 - first name
245:20 - then int
245:22 - age whatever your age is
245:25 - then suppose i have a function to print
245:27 - my info
245:28 - void print
245:30 - info
245:31 - and there will be two parameters
245:34 - standard string name
245:36 - int age
245:38 - be sure to add a function declaration if
245:40 - you're missing it
245:42 - then if i need to call this function i
245:44 - would invoke the function name
245:45 - pass in my arguments
245:47 - name age
245:50 - then we can print our info
245:52 - standard
245:53 - output
245:54 - name
245:59 - standard output
246:01 - age
246:05 - this of course does what you expect
246:07 - it prints our name and our age
246:10 - to make this function more secure we can
246:12 - instead use const parameters that means
246:15 - that we can't change the values that we
246:16 - receive name and age in this case just
246:19 - as a test let's set name equal to an
246:21 - empty space
246:23 - and age equals zero
246:25 - i don't want this to be able to happen
246:26 - at all now when i run this
246:29 - we don't have a name and we don't have
246:31 - an age to make these parameters
246:33 - read-only we can precede the parameters
246:35 - with that const keyword const string
246:38 - name const int age
246:42 - and you would probably want to add that
246:43 - to your function declaration as well
246:47 - just to display intent
246:50 - there we have an error assignment of
246:52 - read-only parameter age and name is
246:55 - somewhere up here but i don't feel like
246:56 - reading all that when we pass our string
246:59 - and our integer as arguments what we're
247:01 - doing is effectively making a copy of
247:03 - name and age technically we're not
247:05 - modifying the original variables in this
247:07 - case using the const keyword when we
247:10 - pass a variable by value isn't really
247:12 - that big of a deal but it at least
247:14 - conveys intent if we were working with
247:16 - reference data types
247:19 - now we'll pass by reference well now
247:21 - it's a bigger deal we don't want anybody
247:23 - modifying the original name and age
247:25 - variables alright everybody those are
247:28 - const parameters they are parameters
247:30 - modified by the const keyword that
247:32 - effectively make them read-only within a
247:35 - function your code is more secure and it
247:37 - conveys intent it tells other
247:38 - programmers hey don't mess with these
247:40 - values they're useful with references so
247:43 - that nobody can change the value found
247:45 - at that reference then in the case of
247:46 - pointers nobody can change the address
247:49 - of where a pointer is pointing to so
247:51 - yeah those are const parameters in c
247:53 - plus
247:56 - hey everybody in this topic we're going
247:58 - to create a program to validate if a
248:00 - credit card number is valid or not to do
248:02 - so we'll need to utilize the loon
248:04 - algorithm which i've broken into these
248:06 - steps if you need some test credit card
248:08 - numbers you can always google them i
248:10 - found a bunch on this website let's just
248:12 - take this one for example
248:14 - and to make this more readable i'll
248:15 - divide this number into groups of four
248:22 - step one we double every second digit
248:24 - from right to left if the double number
248:27 - is two digits split them i'm only
248:29 - concerned with every second digit from
248:31 - right to left so we can eliminate some
248:33 - of these that we won't be using
248:39 - then we're going to double these numbers
248:41 - so two doubled as four
248:44 - nine doubled as 18. since we have the
248:46 - number 18 that's two digits we need to
248:49 - split them we'll split 18 to 1 and 8.
248:58 - then 6 doubled is 12. we'll split that
249:01 - step 2 we need to add all of these
249:03 - numbers together to create a sum
249:12 - the sum is 29. step three add all odd
249:16 - number digits from right to left with
249:18 - the original number
249:19 - so now we're only concerned with the odd
249:22 - numbers
249:28 - then we just add these numbers together
249:30 - no need to double them
249:36 - the sum is 21.
249:38 - step four we sum the results of steps 2
249:41 - and steps 3
249:42 - 29 plus 21 that equals 50.
249:46 - step 5 if step 4 is divisible by 10 that
249:50 - number is valid we could say our result
249:53 - modulus 10
249:55 - if that number is divisible by 0
249:57 - that number is valid 50 is divisible by
250:00 - 10 so that number is valid
250:02 - we'll create a program that will do all
250:04 - of this for us
250:07 - let's create our functions
250:08 - we'll need three int get
250:11 - digit
250:14 - the parameter will be a constant
250:17 - integer that i will name number
250:21 - int
250:22 - will need to sum the odd digits
250:28 - the parameter is const
250:30 - standard
250:31 - string
250:33 - card
250:34 - number
250:35 - let's copy this paste it
250:38 - sum
250:39 - even digits the parameter is the same
250:43 - let's copy these functions and add some
250:45 - declarations
250:49 - we do need to return something otherwise
250:52 - we'll get a warning for the time being
250:54 - i'm just going to return xero as a
250:56 - placeholder
250:58 - okay let's begin with the main function
251:00 - we'll need a credit card number that
251:02 - will be a string
251:04 - standard string
251:05 - card
251:06 - number
251:09 - then int result and i will set that
251:12 - equal to zero right away
251:14 - we'll prompt the user to enter in their
251:16 - credit card number
251:17 - standard
251:18 - output enter a credit card number
251:25 - standard
251:26 - input
251:29 - card
251:30 - number
251:32 - result equals
251:35 - will invoke the sum even digits function
251:39 - pass in our card number
251:44 - plus
251:45 - some odd digits
251:47 - pass in our card number
251:52 - we'll need to fill in these functions
251:54 - let's begin with some even digits
251:58 - we can get rid of this
251:59 - i'll create a local variable named sum
252:02 - to keep track of the sum
252:04 - what we'll need to do is iterate over
252:07 - our card number in reverse order we can
252:09 - treat a string as an array of characters
252:12 - and we can iterate over that
252:14 - so we'll need a for loop
252:16 - and we will iterate over this card
252:18 - number in reverse order starting from
252:20 - the end
252:22 - we'll need an index into i
252:24 - equals
252:25 - then we'll need to find the size of our
252:27 - card number
252:28 - there's a built-in function for that
252:31 - card number dot size
252:33 - now arrays they always start with zero
252:35 - so we're going to subtract one however
252:38 - if we're summing the even digits
252:40 - beginning from the right we'll need the
252:42 - second to last digit so that would
252:44 - actually be minus two the very last
252:47 - digit would be minus one
252:50 - our index i will begin from the second
252:52 - to last position i would like to
252:54 - continue this for loop as long as i is
252:57 - less than or equal to zero
253:00 - then we will decrement i by two i minus
253:03 - equals two because we need every even
253:06 - digit
253:07 - so we will take sum plus equals
253:11 - then invoke the get digit function
253:15 - get digit
253:16 - within the get digit function as an
253:19 - argument we're going to pass in card
253:21 - number
253:23 - at index of
253:24 - i times two however there's one more
253:28 - thing that we'll need to do
253:29 - with card number at index of i we will
253:32 - subtract
253:34 - the character zero and here's why we're
253:37 - currently working with a string of
253:39 - characters you can also treat a string
253:41 - as an array of characters each character
253:43 - according to the ascii table has an
253:46 - associated integer value a decimal value
253:49 - if i'm passing one of these characters
253:51 - as an argument to my get digit function
253:53 - we'll treat that character as if it was
253:55 - its decimal equivalent according to the
253:57 - ascii table the character 0 has a
254:00 - decimal value of 48 the character 1 is
254:03 - 49 2 is 50 then all the way up to 9
254:06 - which has a decimal value of 57 so if
254:09 - i'm passing in the character at index of
254:12 - i what we'll end up working with is the
254:15 - decimal representation of that character
254:18 - if we subtract the character 0 or its
254:20 - equivalent 48 that would give us a range
254:23 - of numbers zero through nine for example
254:26 - the decimal equivalent of the character
254:28 - 9 is 57
254:29 - 57
254:31 - minus 48 would be 9. you could subtract
254:34 - either 48 or the character zero that
254:37 - would give us numbers zero through nine
254:39 - according to the ascii table
254:41 - then we're multiplying that number by
254:42 - two
254:43 - then at the end we will return whatever
254:46 - the sum is
254:47 - let's fill in this get digit function
254:50 - within the get digit function the digit
254:52 - that we're working with was doubled
254:54 - whatever number we passed in
254:56 - it may take two digits for example like
254:58 - nine times two is eighteen we need to
255:01 - split those two numbers to get one and
255:02 - eight
255:03 - so i'm going to return
255:05 - number
255:07 - modulus 10
255:09 - plus
255:11 - number
255:12 - divided by 10
255:14 - modulus 10. that will split the two
255:17 - numbers for example let's say our number
255:19 - that we're passing in as an argument is
255:21 - eighteen
255:23 - nine
255:24 - times two
255:25 - eighteen modulus ten would give us eight
255:29 - eighteen divided by ten that would give
255:32 - us one since we're using integer
255:34 - division
255:35 - one
255:36 - modulus ten
255:38 - is one
255:40 - eight plus one
255:42 - is nine
255:43 - then we're just returning that number
255:45 - nine okay that is the get digit function
255:48 - then we need to sum the odd digits
255:52 - and really we can just copy all this
255:54 - then paste it
255:58 - but there's a couple changes to make
256:00 - int i equals card number dot size
256:03 - function minus one we need to begin at
256:05 - the end
256:06 - and then sum plus equals
256:09 - card number minus zero
256:12 - when summing the odd digits there's no
256:14 - need to double the odd digits that's
256:17 - only with the even digits
256:19 - and that is all the functions let's
256:20 - close out of these
256:24 - so we'll have a result the sum of the
256:26 - even digits plus the sum of the odd
256:28 - digits
256:29 - if result is divisible by 10 that number
256:32 - is valid
256:35 - if
256:36 - result
256:39 - modulus 10 is equal to zero
256:46 - then that number is valid standard
256:48 - output
256:50 - card number
256:53 - is valid
256:58 - else
257:02 - card number is not valid
257:06 - okay let's try this
257:08 - i'm going to enter in that original
257:09 - number that we worked with that discover
257:11 - card
257:15 - okay enter a credit card number i'm
257:17 - going to paste this hit enter
257:20 - that number is valid let's try that
257:22 - again
257:25 - so i'm going to enter in the same card
257:27 - number except i'll add one to the end
257:33 - that number is not valid hey if you have
257:36 - your own credit cards feel free to try
257:37 - them too and see if it works
257:39 - all right everybody that is a credit
257:41 - card validation program mostly for
257:43 - practice
257:44 - if you would like a copy of this code
257:45 - i'll post this in the comments section
257:47 - down below please be sure that you do
257:49 - not enter in your own credit card into
257:50 - the comment section and well yeah that
257:52 - is a credit card validation program
257:55 - using c plus
257:58 - all right everybody we finally made it
258:00 - to pointers a pointer is just a variable
258:04 - that stores a memory address of another
258:06 - variable that's it the reason that we
258:08 - use pointers is because well sometimes
258:11 - it's just easier to work with an address
258:13 - here's an example i have a stack of
258:15 - maybe 20 pizzas that i'm going to give
258:18 - out for free to my neighborhood instead
258:20 - of going around house to house carrying
258:22 - the free pizza and handing it out it's a
258:23 - lot easier to go door to door and tell
258:26 - people where the pizza is located hey
258:28 - there's free pizza at my house at this
258:31 - address come and get some and that's one
258:33 - of the uses of pointers sometimes it's
258:35 - easier to just work with an address i'll
258:37 - tell people where the free pizza is
258:39 - rather than carry it around with me so
258:41 - when working with pointers we'll need to
258:43 - use the address of operator which is an
258:45 - ampersand as well as the d reference
258:47 - operator which is an asterisk let's
258:50 - begin with the name i'll create a
258:51 - pointer to a name
258:53 - standard
258:54 - string name
258:56 - assign your first name
258:59 - then we'll create a pointer to name
259:01 - where is my name located in my
259:03 - computer's memory to create a pointer it
259:04 - should be of the same data type as the
259:06 - variable it's pointing to
259:09 - i'm creating a pointer to a string
259:11 - this pointer will be of the string data
259:13 - type
259:14 - then type
259:15 - asterisk
259:16 - that dereference operator then a common
259:19 - naming convention for pointers is you
259:21 - type p
259:22 - then the variable name
259:24 - but i'm going to make the first letter
259:25 - uppercase
259:27 - i will set this pointer equal to the
259:30 - address of that name variable
259:33 - and there we go we have a pointer so if
259:35 - i was to display this pointer standard
259:38 - output
259:40 - p
259:41 - name
259:43 - my pointer contains this value it
259:46 - contains a memory address as its value
259:49 - to access the value at this address you
259:51 - would use the dereference operator
259:57 - i'm accessing the value of that address
260:00 - that's stored within this pointer which
260:02 - contains my first name by using this d
260:04 - reference operator i'm accessing the
260:06 - value that's at this given address which
260:09 - contains my first name let's create a
260:11 - couple other pointers
260:15 - let's create
260:16 - a variable age into age equals make up
260:20 - some age
260:21 - i'll create a pointer to age
260:24 - the data type of the pointer should be
260:25 - the same as the variable
260:27 - int dereference operator
260:30 - p
260:31 - age
260:32 - equals the address
260:35 - of age
260:38 - then let's display
260:41 - whatever value is located at the address
260:44 - that's stored within my pointer of ph
260:50 - so we have my first name and then an age
260:53 - i think i'm just going to add a new line
260:54 - real quick
260:58 - going back to that analogy with the free
260:59 - pizzas
261:00 - i'll create an array
261:03 - an array of strings
261:05 - i'll name this array
261:06 - free pizzas
261:09 - i'll give this a size of five
261:14 - we have pizza one
261:18 - pizza two
261:20 - pizza three pizza four
261:24 - then pizza five
261:26 - like i said in my example it's a lot
261:29 - easier instead of carrying around five
261:31 - free pizzas house to house giving away
261:33 - pizza i can just tell people where the
261:36 - pizza is located i'll give them an
261:38 - address i'll create a pointer to this
261:40 - array we'll use the same data type we're
261:42 - storing strings
261:45 - d reference operator
261:47 - p
261:48 - free pizzas
261:52 - now i'm going to attempt to set this to
261:54 - the address
261:56 - of free pizzas
261:58 - now we're going to run into a problem
262:02 - my array is already an address
262:05 - so i don't need to use the address of
262:07 - operator
262:08 - let me demonstrate
262:13 - i will display see out
262:16 - free
262:17 - pizzas
262:25 - when accessing my array free pizzas it's
262:28 - already a memory address if i display
262:30 - the value contained within my pointer to
262:33 - my free pizzas
262:35 - it's going to be a memory address then
262:37 - if i was to use the dereference operator
262:42 - that would give me the first element
262:44 - within that array pizza one so those are
262:46 - pointers it's a variable that stores a
262:49 - memory address of another variable
262:52 - sometimes it's easier to work with an
262:53 - address instead of carrying five free
262:56 - pizzas with me and going house to house
262:58 - giving it away i'll just tell people
263:00 - where the free pizza is so those are
263:02 - pointers your assignment is to post a
263:04 - pointer in the comment section down
263:06 - below and well yeah that's an
263:08 - introduction to pointers in c plus
263:14 - what's up everybody so let's talk about
263:15 - null pointers but first we'll need to
263:18 - know what a null value is a null value
263:20 - is a special value that means that
263:22 - something has no value when a pointer is
263:25 - holding a null value that means that
263:27 - pointer is not pointing to anything
263:29 - that's what we would call a null pointer
263:31 - there is a keyword that represents that
263:34 - null ptr ptr meaning pointer it's a
263:37 - keyword that represents a null pointer
263:39 - literal one of the reasons that we use
263:41 - null pointers is that they're helpful
263:43 - when determining if an address was
263:45 - successfully assigned to a pointer if we
263:48 - create a pointer but don't assign it a
263:50 - value we don't know where it's pointing
263:51 - to it would be good practice that that
263:53 - pointer doesn't point anywhere so let's
263:55 - create a null pointer i'll create a
263:57 - pointer of the int data type we use the
264:00 - dereference operator
264:02 - pointer
264:03 - if i'm not going to assign this pointer
264:05 - and address right away it would be good
264:07 - practice to assign this pointer
264:09 - null
264:10 - ptr
264:11 - null pointer
264:12 - later on in your program if you need to
264:14 - assign an address
264:15 - let's say int x equals one two three
264:19 - i would just take
264:20 - my pointer
264:22 - set the sequel to
264:24 - the address of my variable
264:27 - if you dereference a null pointer it can
264:30 - lead to undefined behavior
264:32 - or if you dereference a pointer that's
264:34 - not assigned a value well that can lead
264:36 - to undefined behavior too
264:38 - what some programmers do is that they'll
264:40 - check to see if their pointer is a null
264:42 - pointer before continuing kind of like a
264:44 - system of checks and balances
264:46 - we assigned our pointer the address of x
264:48 - i would like to check to see if my
264:50 - pointer contains a valid address before
264:52 - dereferencing it
264:54 - so we could say pointer
264:57 - equals
264:58 - null
265:00 - pointer
265:01 - was my pointer assigned an address or is
265:03 - it still a null pointer
265:06 - if my pointer is still a null pointer
265:08 - that means we did not successfully
265:10 - assign an address to my pointer there
265:12 - may be situations such as when working
265:15 - with dynamic memory where you attempt to
265:17 - assign an address to your pointer and it
265:18 - fails this would be a good way to check
265:20 - to see if that failed or not if your
265:22 - pointer still remains a null pointer
265:25 - so let's say address was not assigned
265:32 - else
265:34 - standard output
265:38 - address was assigned
265:43 - so let's run this
265:44 - currently our pointer is pointing to the
265:47 - address of x
265:51 - address was assigned now if for some
265:54 - reason we did not assign an address
265:56 - i'll turn this line into a comment to
265:58 - represent that well our pointer is still
266:00 - going to be a null pointer
266:03 - address was not assigned
266:05 - if your pointer is still a null pointer
266:08 - it's not safe to dereference that
266:10 - pointer
266:11 - if i need access to the value that's at
266:13 - that pointer it would be safe to do so
266:15 - within this else statement
266:17 - standard output
266:20 - dereference operator
266:22 - pointer
266:28 - so my pointer contains the number one
266:30 - two three if i were to dereference this
266:33 - null pointer that would lead to
266:34 - undefined behavior i have no idea what's
266:36 - gonna happen
266:38 - don't try this at home kids
266:44 - null pointer is a keyword that
266:45 - represents a null pointer literal when
266:48 - declaring a pointer it's good practice
266:50 - that our pointer is pointing to a valid
266:52 - address
266:53 - or this null pointer keyword because
266:55 - otherwise we don't know where it's
266:56 - pointing originally they're helpful when
266:59 - determining if an address was
267:00 - successfully assigned to a pointer when
267:03 - using pointers be careful that your code
267:05 - isn't dereferencing a null pointer or
267:07 - pointing to any free memory that we're
267:09 - not using because that can lead to
267:11 - undefined behavior
267:12 - so yeah everybody those are null
267:14 - pointers in c plus
267:19 - hey guys in this topic we're going to
267:21 - create a game of tic-tac-toe we'll be
267:23 - working with random numbers you may or
267:25 - may not need to include this header file
267:27 - include
267:29 - c
267:30 - time we'll add some function
267:32 - declarations then some definitions
267:34 - void
267:36 - draw
267:37 - board
267:38 - there will be one parameter
267:40 - a pointer to an array named spaces
267:44 - spaces will be a one-dimensional array
267:46 - that will keep track of all the markers
267:48 - like what spots are taken what spots are
267:50 - occupied
267:54 - player move
267:57 - the parameters will be a pointer to
267:59 - spaces
268:01 - and char
268:02 - player
268:05 - computer
268:06 - move
268:08 - a pointer to spaces
268:10 - char
268:11 - computer
268:15 - check winner
268:17 - a pointer to spaces
268:19 - char player
268:20 - and char computer
268:24 - then lastly
268:27 - check
268:28 - tie
268:29 - and all we need is a pointer to our
268:31 - array spaces
268:33 - oh uh check winner and check tie will
268:36 - both return a boolean value
268:40 - okay let's add some function
268:42 - declarations so after the main function
268:44 - let's paste these
268:53 - we do need to return some value for
268:55 - check winner and check tie because there
268:57 - is a return type just for now as a
268:59 - placeholder i'm going to return zero
269:04 - but we'll change that later
269:06 - let's head to the main function and
269:07 - declare everything that we'll need
269:09 - a character array named spaces
269:14 - the size will be nine nine spaces
269:18 - will have nine elements each contains an
269:20 - empty space
269:30 - one two three four five six seven eight
269:33 - nine good
269:36 - char player
269:38 - pick a character that you'd like to be
269:40 - you could do x or something else
269:46 - computer
269:48 - pick a character for the computer
269:50 - let's begin with o
269:54 - boolean
269:55 - running i'll set the sequel to true
269:58 - when we begin our game we will
270:00 - immediately invoke the drawboard
270:02 - function
270:04 - then pass in our array
270:06 - so remember when we pass an array to a
270:08 - function it decays into a pointer
270:11 - so we don't need to create a pointer for
270:13 - this array
270:14 - within the dropboard function we will
270:16 - display a grid
270:18 - so let's write something like this
270:21 - standard output
270:23 - i'll add five spaces one two three four
270:26 - five then a vertical bar
270:28 - five spaces again one two three four
270:31 - five
270:33 - vertical bar
270:34 - one two three four five
270:37 - then a new line
270:41 - okay let's copy this line
270:45 - right in the middle i'm going to add one
270:47 - of the elements of our array spaces
270:49 - so right about there
270:53 - spaces at index zero
270:59 - i'm going to copy this section of code
271:02 - right in the middle between the two
271:03 - vertical bars i'll paste what we copied
271:06 - spaces at index one
271:09 - then again right in the middle
271:12 - paste what you have
271:14 - spaces at index 2.
271:18 - this time we'll create a horizontal bar
271:21 - let's copy this
271:23 - we'll replace the spaces with
271:25 - underscores
271:26 - so right about there
271:35 - okay let's see what we have
271:38 - okay yeah something like this
271:40 - we'll have a player or the computer
271:42 - right in the center
271:44 - so let's copy this line on top
271:47 - paste it underneath
271:49 - copy this line that displays elements of
271:51 - our array
271:53 - paste it underneath but change the
271:54 - element numbers
271:56 - three
271:57 - four
271:58 - five
272:00 - then we'll copy this line
272:03 - paste it
272:04 - underneath let's double check to see
272:06 - what we have
272:08 - okay we're getting somewhere
272:10 - let's copy this line
272:13 - paste it
272:15 - copy one of these lines where we display
272:17 - the elements of the array
272:21 - paste it underneath
272:23 - so we are missing
272:25 - elements six
272:27 - seven
272:29 - eight
272:32 - let's copy one of these empty lines
272:36 - paste it underneath
272:38 - uh then before and after we display this
272:40 - grid i'll just display a new line
272:43 - standard output
272:45 - new line
272:47 - and let's do that after
272:52 - okay let's see what we have
272:58 - yeah not too bad there's our grid of
273:00 - nine spaces okay that is the drawboard
273:03 - function we can close out of this we're
273:05 - done with it when we invoke the
273:07 - drawboard function we will pass in our
273:09 - array which decays to a pointer and then
273:12 - prints our board
273:13 - let's add a while loop after the
273:15 - drawboard function
273:16 - while
273:17 - our condition is running running is set
273:20 - to true initially
273:22 - when we exit out of the game we'll set
273:23 - running to be false
273:25 - the first thing that we'll do is invoke
273:27 - the player move function
273:29 - player move but we need to pass in our
273:32 - array spaces
273:34 - as well as a player
273:36 - player
273:37 - then let's fill in the player move
273:38 - function
273:40 - okay player move
273:42 - i'll create a local variable named
273:44 - number
273:45 - the user will enter in a number between
273:48 - one and nine depending on what space
273:50 - they'd like to occupy with their marker
273:52 - i'll create a do while loop
273:54 - do
273:55 - while
273:57 - the condition will be
273:59 - not
274:00 - number
274:01 - is greater than zero
274:04 - or
274:05 - not
274:06 - number
274:07 - is less than eight
274:09 - the user can only enter in a number
274:11 - between
274:12 - 0 and 8. those numbers correspond to the
274:15 - elements of our array elements with
274:17 - indices 0 through 8.
274:19 - within the do while loop we'll ask for
274:21 - some user input standard output
274:26 - enter a spot
274:29 - to place a marker
274:32 - one through nine
274:34 - whatever the user types in we'll just
274:35 - subtract one because the user doesn't
274:37 - know that arrays start with zero
274:39 - supposedly
274:41 - standard input
274:44 - number
274:45 - so the user will enter in a number
274:47 - between one and nine
274:49 - then we will decrement the number by one
274:52 - because the array starts with zero
274:57 - if
274:59 - spaces
275:00 - at index of number whatever the user
275:03 - types in
275:04 - is equal to an empty space
275:07 - if that space isn't occupied
275:09 - we'll add that marker to that spot
275:12 - spaces at index of number
275:15 - equals
275:17 - the player's marker
275:19 - then we'd like to break out of this
275:20 - while loop so after the player moves
275:23 - let's draw the board again to reflect
275:25 - any changes
275:30 - okay enter a spot to place a marker how
275:32 - about one yeah there's our marker let's
275:34 - try it again
275:37 - how about nine
275:38 - yep and we are in the last spot the
275:41 - bottom right corner let's enter in a
275:43 - number that's outside of this range like
275:45 - 100
275:46 - enter a spot to place a marker uh
275:48 - negative one okay so we're limited to
275:51 - the numbers one through nine even if i
275:53 - were to type zero we still can't uh so
275:56 - let's try something in the middle that
275:57 - would be one two three four five
276:02 - yeah and there's our marker i'm just
276:04 - gonna add a colon then a space
276:06 - okay and that is the player move
276:08 - function
276:09 - we can close out of this function
276:12 - let's work on the computer move function
276:14 - next
276:15 - within the while loop let's invoke that
276:17 - function
276:18 - pass in our spaces array
276:21 - as well as whatever character the
276:23 - computer is
276:24 - then we will draw the board again right
276:26 - after
276:27 - just update it within the computer move
276:29 - function we'll create a local variable
276:31 - named number
276:33 - we'll need a seed to generate a random
276:35 - number
276:36 - s rand
276:38 - within the parentheses
276:40 - invoke the time function pass in zero or
276:42 - null
276:45 - and we should be able to generate some
276:46 - random numbers
276:48 - so i'm going to create a while loop
276:50 - while the condition will be true
276:53 - i would like to generate a random number
276:55 - between 0 through 8.
276:57 - we'll take number set the sequel to
277:00 - rand function
277:02 - modulus nine
277:04 - number will be random between zero and
277:06 - eight technically
277:07 - if we pick a spot number that is
277:09 - occupied already we'll need to reroll a
277:11 - random number
277:14 - if
277:15 - spaces
277:16 - at index of number
277:19 - is equal to an empty space
277:22 - we'll take spaces
277:24 - at index of number
277:26 - set the sql to the computer's marker
277:30 - then break out of this while loop
277:32 - let's test this function
277:35 - after we pick a spot the computer will
277:37 - pick a spot too
277:38 - yep so the computer picked a spot right
277:40 - in the middle let's try it one more time
277:42 - i'll pick the spot in the middle again
277:43 - so that would be five
277:46 - and our computer picked spot number two
277:48 - cool let's close out of the computer
277:50 - move function
277:51 - after the player moves then we draw the
277:53 - board again we will check a winner
277:57 - i'll use an if statement within the
277:59 - condition of the if statement we will
278:01 - invoke the check winner function
278:04 - the check winner function returns a
278:05 - boolean value so that's why we're
278:08 - placing it within the if statement but
278:10 - we need to pass in a couple arguments
278:11 - our spaces
278:13 - the player and the computer
278:16 - if there's a winner if this evaluates to
278:18 - be true
278:19 - we will set running equal to false
278:23 - and we will break
278:25 - let's add this if statement to after the
278:27 - computer moves too
278:32 - okay let's fill in the check winner
278:34 - function
278:35 - so right down here
278:38 - we'll need to check all of the different
278:40 - win conditions they're several normally
278:42 - i would use a switch but it's going to
278:44 - get very complicated especially for
278:46 - beginners i think just to make this
278:48 - easier we'll use a bunch of if and else
278:50 - if statements
278:53 - within the first condition of the if
278:54 - statement we'll check to see if the
278:56 - first row all has matching characters so
278:59 - we can do that by saying
279:01 - spaces
279:03 - at index of zero
279:06 - is equal to spaces at index of one
279:11 - and
279:11 - spaces at index of one
279:15 - is equal to
279:16 - spaces at index of two
279:19 - if all three characters in the first row
279:22 - are the same that means that somebody
279:24 - won
279:24 - i'm going to use the ternary operator
279:26 - here we have to determine who won the
279:28 - player or the computer let's check to
279:30 - see if the first index spaces at index 0
279:34 - is equal to the player's marker
279:37 - ternary operator like we're asking a
279:39 - question
279:40 - if the player occupies the first row
279:43 - then we'll print standard output
279:46 - u
279:48 - win
279:50 - otherwise standard
279:52 - output
279:55 - you
279:57 - lose
279:59 - then i'm just going to add a new line
280:01 - here
280:02 - and here
280:04 - okay there's one more thing we have to
280:06 - do with this condition and i'll explain
280:07 - that so let's run this
280:11 - i'll pick spot number nine
280:15 - you lose the reason that we lost is that
280:17 - we're checking to see if the first row
280:19 - all has the same characters they're
280:21 - technically all empty spaces so our
280:23 - program thinks that somebody won because
280:25 - all of these characters match there are
280:27 - three empty spaces i'm going to amend
280:30 - this if statement we'll want to ensure
280:31 - that none of the spaces are empty and
280:33 - really we only need to check the first
280:35 - space i'll make this amendment
280:37 - spaces at index of zero
280:41 - does not equal
280:43 - an empty space
280:45 - and
280:46 - all these other conditions
280:48 - if you'd like to keep this more
280:49 - organized you can always surround some
280:51 - of these conditions with parentheses
280:54 - i think it's more legible that way
280:58 - let's try that again just to be sure
281:00 - that it's working i'll pick something in
281:01 - the middle
281:03 - okay yeah so the computer doesn't win
281:05 - automatically if there's three empty
281:06 - spaces in the first row okay so that is
281:09 - the first win condition
281:11 - let's copy this condition
281:13 - i'll add
281:14 - else if
281:16 - now we'll check the second row if space
281:18 - is at index 3 is not equal to an empty
281:21 - space
281:22 - and space is at index 3
281:25 - is equal to spaces at index four
281:28 - and spaces at index four is equal to
281:31 - spaces at index five
281:33 - then does spaces at index three equal to
281:36 - player okay so that is row two let's
281:39 - copy and paste that else if statement
281:41 - then we'll need to check the last row
281:43 - space is at index six
281:46 - six
281:47 - is six equal to seven
281:50 - and is seven equal to eight
281:52 - so these conditions will check all of
281:54 - the rows then we'll need columns
281:57 - let's copy one of these elsif statements
281:59 - paste it
282:00 - so we have 0 0
282:04 - is
282:04 - 0 equal to 3
282:07 - and is three
282:09 - equal to six
282:13 - okay now time for the second column
282:17 - space is at index one
282:20 - one right here as well
282:23 - is one
282:24 - equal to four
282:26 - and is four equal to seven
282:30 - copy this again paste it
282:34 - then we have the third column
282:37 - two
282:38 - two
282:41 - is two equal to five
282:44 - and is five equal to eight
282:48 - okay now the diagonals
282:55 - space is at zero
282:57 - zero
282:59 - is zero equal to four
283:03 - and is four equal to eight
283:07 - then the last diagonal
283:12 - space is at index two
283:14 - two
283:16 - is two equal to 4
283:19 - and is 4 equal to 6.
283:22 - if there's no win conditions
283:25 - we'll have an else statement
283:27 - we will return
283:28 - false
283:30 - then all we have to do at the end of
283:31 - this function is to return true somebody
283:33 - won
283:35 - okay so let's test this
283:39 - i'll try and win with the first row
283:42 - one
283:42 - two
283:43 - three
283:44 - you win this time i'm gonna try and lose
283:48 - one
283:50 - two
283:53 - four
283:56 - seven
283:57 - whoops seven's taken uh eight
284:00 - there we go you lose
284:02 - we can close out of the check winner
284:04 - function we know that it's working
284:06 - then we just need to check to see if
284:07 - there's a tie if there's no more spaces
284:09 - available within the main function after
284:12 - our if statements we'll add else if
284:16 - we'll invoke the check tie function
284:20 - pass in our spaces
284:23 - check tie returns a boolean value if
284:26 - it's
284:26 - true we will set running to be false
284:30 - then break
284:32 - then add that after the computer move
284:34 - section 2 so right here
284:38 - then let's fill in this function
284:41 - within the check tie function we'll
284:43 - iterate over the elements of our array
284:45 - spaces we'll use a for loop
284:48 - four
284:49 - and i equals zero we'll continue this as
284:52 - long as i is less than nine because
284:54 - there's a total size of nine spaces
284:58 - increment i by one
285:00 - if
285:01 - spaces
285:02 - at index of i
285:04 - is equal to
285:06 - an empty space
285:08 - that means we can continue return false
285:11 - there's still empty spaces
285:13 - if we iterate over our array and there's
285:15 - no empty spaces well then we'll display
285:18 - standard output
285:22 - it's
285:23 - a
285:24 - tie
285:26 - i'll add a new line
285:29 - then we will return
285:31 - true
285:32 - and we can get rid of that
285:36 - okay so let's close out of this check
285:38 - tie function
285:40 - then after we exit our game outside of
285:42 - this while loop
285:44 - let's display a message
285:45 - standard output
285:48 - thanks for playing
285:52 - all right and that's everything let's
285:53 - run this i'm gonna try and get a tie
285:55 - this time
285:59 - one
286:01 - two
286:03 - six
286:07 - seven
286:09 - eight
286:10 - it's a tie thanks for playing
286:13 - all right everybody that is a game of
286:15 - tic-tac-toe for beginners
286:17 - if you would like a copy of this code
286:18 - i'll post this in the comment section
286:20 - down below and well yeah that's a game
286:22 - of tic-tac-toe using c plus
286:28 - hey everybody we finally made it to
286:30 - dynamic memory dynamic memory is memory
286:33 - that is allocated after the program is
286:35 - already compiled and running to allocate
286:37 - dynamic memory we use this new keyword
286:40 - it's an operator it allows us to
286:42 - allocate memory in the heap rather than
286:44 - the stack it's useful when we don't know
286:47 - how much memory we'll need it makes our
286:49 - programs more flexible especially when
286:51 - accepting user input because we have no
286:53 - idea what the user is going to type in
286:55 - here's an example we'll start with a
286:57 - basic integer variable but we'll
286:59 - allocate memory in the heap rather than
287:00 - the stack by using that new keyword i'll
287:02 - create a pointer
287:04 - int
287:06 - the reference operator p
287:08 - num
287:09 - now it's good practice when you declare
287:11 - a pointer but don't assign it right away
287:13 - to give it a value of null meaning no
287:15 - value to allocate memory in the heap
287:18 - rather than the stack i'll take my
287:19 - pointer set the sql to
287:22 - use the new operator then a data type
287:25 - i'll use up enough space in the heap for
287:27 - one integer the new operator will return
287:30 - an address we're storing that address
287:32 - within pnum because it's a pointer it's
287:34 - pointing to a memory location where
287:36 - we're going to store an integer later on
287:38 - in your program whenever you would like
287:39 - to store a value we can use the
287:42 - dereference operator our pointer then
287:44 - assign some value
287:46 - like 21 i don't know just for fun i'm
287:49 - going to display the address that's
287:51 - stored within the pointer
287:53 - address
287:57 - p num
287:59 - then i'll add a new line
288:02 - as well as the value
288:06 - value
288:07 - dereference operator p
288:10 - number
288:12 - our pointer is storing this address and
288:14 - at this address in the heap that address
288:17 - contains this value 21. now it's very
288:20 - good practice if not expected whenever
288:23 - you use the new operator you'll also
288:25 - want to use the delete operator when
288:27 - you're no longer using that memory space
288:29 - so at the end of this program or earlier
288:31 - if you choose
288:32 - we will delete
288:34 - our pointer
288:36 - delete p num
288:38 - we're freeing up the memory at this
288:39 - address if you don't you may cause a
288:41 - memory leak and it's best to avoid that
288:44 - whenever you use the new operator you
288:46 - probably should be using the delete
288:47 - operator someplace within your program
288:50 - here's another example we're going to
288:52 - dynamically create an array let's create
288:54 - an array of grades
288:56 - char
288:57 - then we'll need a pointer
288:59 - the reference operator p
289:02 - grades
289:04 - set the sequel to null if we're not
289:06 - going to assign this pointer right away
289:08 - then to dynamically create an array we
289:10 - will take our pointer set the sql to
289:13 - new
289:14 - the data type char
289:16 - if this is an array we add a set of
289:18 - straight brackets within the straight
289:20 - brackets we will list a size if i have
289:22 - five grades to enter in i would type in
289:24 - five but if we already know the size of
289:26 - the array before we even run the program
289:28 - we might as well do that normally like
289:30 - create a normal array there's no point
289:32 - to allocating memory dynamically we
289:34 - would want to do that when we don't know
289:35 - what the size is going to be so i
289:37 - propose we ask for some user input
289:40 - let's say int size
289:43 - will create a prompt standard output
289:47 - how many grades to enter in
289:54 - standard input
289:56 - size
289:57 - will dynamically allocate enough memory
289:59 - in the heap depending on how many grades
290:02 - the user has to enter in
290:04 - i'll just create a for loop so that we
290:06 - will ask the user to enter in some
290:08 - grades
290:09 - and i equals zero i will continue this
290:12 - as long as i is less than size
290:15 - increment i by
290:16 - one standard output
290:20 - enter grade
290:22 - number
290:24 - i plus 1 because i will be 0 to begin
290:27 - with
290:29 - and i'm just going to add colon space
290:31 - afterwards
290:33 - standard
290:34 - input
290:37 - p
290:38 - grades that's our pointer now we can
290:40 - either add plus i
290:43 - or use those straight brackets at index
290:45 - of i either way
290:48 - let's display all of the grades
290:51 - and i equals zero
290:54 - i is less than size
290:56 - i plus plus
290:58 - standard output
291:01 - p
291:02 - grades
291:03 - at index of i i'll separate each with
291:05 - the space
291:06 - and remember if we no longer need this
291:08 - array we should delete it to prevent a
291:10 - memory leak
291:11 - if we have to delete an array we'll add
291:14 - a set of straight brackets after delete
291:16 - then our pointer
291:18 - p grades
291:22 - and let's try it
291:24 - how many grades to enter in
291:26 - so we don't know what the user is going
291:28 - to type
291:29 - let's say
291:30 - six grades
291:32 - enter grade one
291:33 - a b c d f a
291:37 - and here are the grades
291:39 - so that's why dynamic memory is useful
291:42 - it's memory that is allocated after the
291:44 - program is already compiled and running
291:46 - we use the new operator to allocate
291:48 - memory in the heap rather than the stack
291:51 - it's useful when we don't know how much
291:53 - memory we will need it makes our
291:55 - programs more flexible especially when
291:58 - accepting user input so that is an
292:00 - introduction to dynamic memory we'll
292:02 - have more practice with this in the
292:03 - future so don't worry if you would like
292:05 - a copy of the code that we worked on
292:07 - i'll post that in the comments section
292:08 - down below and well yeah that's an
292:11 - introduction to dynamic memory in c plus
292:17 - hey guys i gotta explain recursion
292:19 - recursion is a programming technique
292:21 - where a function invokes itself from
292:23 - within we break a complex concept into
292:26 - repeatable single steps many problems we
292:30 - can approach iteratively or recursively
292:32 - some of the advantages of recursion
292:34 - include
292:35 - less coderight and typically it's
292:37 - cleaner it's also useful for sorting and
292:40 - searching algorithms however some of the
292:42 - disadvantages of recursion is that it
292:44 - uses more memory and a slower there's a
292:47 - trade-off it's up to you if you'd rather
292:49 - use an iterative approach or a recursive
292:51 - approach here's an example we'll break a
292:53 - complex concept maybe such as walking
292:56 - into repeatable single steps to
292:58 - accomplish the task of walking we would
293:00 - take a single step and then just repeat
293:02 - that a bunch of times we'll do this
293:03 - first iteratively then recursively
293:07 - so let's create a function to walk
293:10 - void
293:11 - walk
293:12 - there will be one parameter a number of
293:14 - steps
293:16 - let's define this walk function
293:20 - we'll use an iterative approach first to
293:22 - do that we can use a for loop
293:24 - we'll set
293:26 - int i equals zero we'll continue this as
293:29 - long as i
293:31 - is less than
293:32 - our steps then increment i by one
293:36 - i will display
293:38 - just you take a step
293:43 - then i'll add a new line
293:45 - so we will invoke this function pass in
293:48 - how many steps we would like to walk i
293:50 - would like to walk 100 steps
293:54 - and here we go
293:56 - we printed you take a step 100 times
293:59 - this is an iterative approach if we were
294:02 - to take a recursive approach we would
294:04 - invoke this function from within itself
294:07 - so i'm going to turn this for loop into
294:09 - an if statement
294:12 - we'll need a base case when do we stop
294:14 - if
294:15 - steps
294:17 - is greater than
294:19 - zero
294:20 - we will display you take a step then i'm
294:23 - going to invoke the walk function from
294:25 - within itself then i will pass in steps
294:28 - minus 1. this would be a recursive
294:31 - approach we're invoking the walk
294:33 - function from within itself
294:35 - you'll end up in a function within a
294:37 - function within a function within a
294:39 - function so on and so forth so when i
294:42 - run this
294:44 - this would do the same thing but we've
294:45 - done so recursively the advantages with
294:48 - recursion is that the code tends to be
294:50 - easier to write i find this if statement
294:53 - a lot easier to understand than that for
294:55 - loop although they're both pretty simple
294:57 - however with recursion it uses more
294:59 - memory and it takes more processing time
295:02 - in the case with our walk function i
295:03 - would probably stick with an iterative
295:05 - approach there's really not much benefit
295:07 - in this case but in the case of let's
295:09 - say a searching algorithm or navigating
295:12 - a tree data structure recursion would
295:14 - really help us with that so let's say we
295:16 - don't have a base case that's when we
295:18 - stop what if i just call the walk
295:20 - function forever
295:24 - well we end up in an infinite loop
295:27 - and we would encounter what's called a
295:28 - stack overflow
295:30 - when you invoke a function you add
295:32 - what's called a frame to the stack when
295:34 - your stack is overloaded you'll
295:36 - encounter a stack overflow
295:38 - so that's one problem with recursion
295:40 - so let's try a different example
295:43 - we'll create a factorial function
295:45 - if you don't remember factorial is a
295:47 - mathematics concept where you take a
295:49 - number and you multiply that number
295:51 - times the previous number minus one
295:54 - times the previous number minus one
295:56 - times the previous number minus one
295:58 - until you reach one you multiply all
296:00 - these numbers and you're given a result
296:02 - i'm going to demonstrate a function to
296:04 - do that both iteratively then
296:06 - recursively let's begin with an
296:08 - iterative approach we will return an
296:10 - integer this function will be named
296:12 - factorial we'll pass in an integer named
296:15 - num
296:16 - i'll immediately display the output
296:18 - standard output
296:20 - factorial then pass in some number maybe
296:23 - 10.
296:25 - let's define this function
296:30 - if i was to take an iterative approach i
296:32 - would write something like this
296:35 - end result this will be a local variable
296:38 - i'll set this equal to one
296:40 - i'll create a for loop
296:44 - and i
296:45 - equals one
296:47 - we'll continue this as long as i is less
296:50 - than or equal to our number
296:53 - increment i by one
296:55 - i will take
296:56 - our result
296:57 - equals result
296:59 - times whatever i currently is
297:02 - at the end of this program we will
297:04 - return result
297:06 - factorial ten that would be
297:09 - three million six hundred twenty eight
297:10 - thousand eight hundred
297:13 - if i was taking a recursive approach i
297:15 - would write something like this we would
297:17 - need a base case when do we stop
297:21 - if num
297:22 - is greater than 1
297:25 - we will return
297:27 - num times
297:29 - invoke factorial again
297:32 - our number minus one
297:36 - else we will simply return one
297:39 - this would do the same thing but
297:41 - recursively factorial ten is three
297:43 - million six hundred twenty eight
297:45 - thousand eight hundred
297:47 - those were two different approaches to
297:48 - the same problem when we did this
297:50 - recursively we have a function call
297:53 - inside of a function call inside of a
297:54 - function call inside of a function call
297:56 - you get the idea personally i find a
297:59 - recursive approach to be a lot easier to
298:01 - read and understand although remember it
298:03 - uses more memory and a slower when you
298:06 - start to learn about sorting algorithms
298:07 - that's when recursion is really going to
298:09 - help you quite a lot it will simplify
298:11 - the steps so that's recursion everybody
298:14 - it's a programming technique where a
298:16 - function invokes itself from within
298:18 - we break a complex concept into
298:21 - repeatable single steps whenever you see
298:23 - a function invoking itself from within
298:25 - you'll know that that's recursion hey if
298:27 - you would like a copy of this code i'll
298:29 - post this in the comment section down
298:31 - below and well yeah that's recursion in
298:33 - c plus
298:37 - hey everyone let's discuss function
298:39 - templates a function template describes
298:42 - what a function looks like they can be
298:44 - used to generate as many overloaded
298:46 - functions as needed each using different
298:49 - data types how is this useful suppose we
298:51 - have a max function that will accept and
298:54 - return an integer
298:56 - int
298:57 - max
298:59 - the parameters will be
299:00 - int x
299:02 - and y
299:04 - will return
299:06 - i'll use the ternary operator here
299:09 - is x greater than y
299:12 - if so return x
299:15 - if not return y
299:18 - this function is compatible with
299:19 - integers as arguments
299:21 - let's display standard output max then
299:25 - pass in two integers like one and two
299:31 - so this would return the number two but
299:33 - what if i would like to use this
299:35 - function with doubles such as 1.1
299:38 - and 2.1
299:41 - while we're truncating that decimal
299:43 - portion we're returning to not 2.1 if i
299:46 - want this function to be compatible with
299:48 - doubles normally i would have to create
299:50 - an overloaded function that accepts
299:52 - doubles and returns a double
299:54 - replace int with double
299:58 - and i guess this would work technically
300:00 - the value returned is 2.1 what about
300:03 - characters
300:04 - how about the character 1
300:08 - and the character 2.
300:10 - technically we could use the max version
300:12 - that accepts integers because there's an
300:14 - associated ascii value with each of
300:16 - these characters but i would like an
300:17 - overloaded function that accepts and
300:19 - returns characters
300:21 - char
300:22 - char
300:23 - char
300:26 - so this would return the character 2.
300:28 - this is a lot of work creating three
300:30 - overloaded functions that each do the
300:32 - same thing the only difference is that
300:34 - they accept and return different data
300:36 - types what if we could write one
300:38 - function that will accept any data type
300:40 - well that's what function templates are
300:42 - to create a function template take your
300:44 - function replace any data type with t
300:48 - we're returning an integer let's instead
300:50 - return t the data type of x will be t
300:53 - same thing with y using t as a common
300:55 - naming convention i like to think of it
300:57 - as thing like we're not sure what the
300:59 - data type is we're returning a thing
301:02 - that's just how i think of it however
301:04 - our compiler doesn't know what t is
301:06 - exactly we'll need to add a template
301:09 - parameter declaration before this
301:11 - function template definition we'll add a
301:14 - declaration of what t is so type
301:17 - template
301:18 - angle brackets
301:20 - type name
301:21 - t
301:22 - and that's it this function template
301:24 - will work with many data types
301:27 - characters
301:28 - doubles
301:33 - integers
301:37 - you name it so yeah just replace the
301:39 - data type with t then be sure to add a
301:42 - template parameter declaration now
301:44 - here's a scenario what if you need to
301:46 - mix and match the data types i'll find
301:48 - what the max is between the integer 1
301:51 - and the double 2.1
301:55 - well we have a problem
301:57 - no matching function for call 2 max int
302:00 - double with this function template it's
302:03 - only set up to receive arguments of the
302:05 - same data type now we're passing in two
302:08 - different data types what we could do
302:10 - within our template parameter
302:11 - declaration is add another template name
302:15 - i'm going to add
302:17 - type
302:18 - name u because u comes after t in the
302:20 - alphabet then if you needed more you
302:22 - could add v w x so on and so forth i'll
302:26 - change one of these t's to a u this
302:28 - function template is set up to receive
302:30 - up to two different data types as
302:32 - arguments but there's one more change we
302:34 - need to make
302:36 - so we don't have that error anymore but
302:38 - the decimal portion of our double is
302:40 - truncated it's returning two
302:42 - that's because we're still returning t
302:45 - and t we set to be an integer in this
302:47 - case do we set the return type to be t
302:50 - or u
302:51 - actually better yet we can set this to
302:53 - auto
302:54 - using the auto keyword the compiler will
302:57 - deduce what the return type should be
302:59 - this should return 2.1
303:02 - all right everybody that is a function
303:04 - template it describes what a function
303:06 - looks like
303:07 - they can be used to generate as many
303:09 - overloaded functions as needed each
303:12 - using different data types i like to
303:14 - think of it like a cookie cutter we're
303:16 - determining what the shape is but the
303:18 - arguments the dough that we use for our
303:20 - cookies can be different but the cookies
303:22 - will end up having the same shape one of
303:24 - the main benefits of using function
303:26 - templates is that we only have to write
303:28 - a function once and then it's compatible
303:30 - with different data types so you don't
303:32 - need multiple versions of the same
303:33 - function we'll generate functions using
303:35 - this template as needed so yeah those
303:38 - are function templates everybody your
303:40 - assignment if you choose to do so is to
303:41 - write a function template in the comment
303:43 - section down below and well yeah those
303:46 - are function templates in c plus
303:51 - well okay then everybody we gotta talk
303:53 - about structs a struct is a structure
303:56 - that groups related variables under one
303:59 - name think of an array an array can
304:01 - store multiple values of the same data
304:04 - type well a struct can store multiple
304:07 - values of different data types we can
304:09 - store strings along with ins doubles
304:12 - booleans etc to create a struct let's do
304:14 - so outside of the main function
304:17 - type struct
304:19 - then we need an identifier this is kind
304:21 - of like the data type suppose we're
304:23 - going to group related variables for
304:26 - students
304:27 - i'll name this identifier student
304:30 - within the structure of student
304:32 - variables that we declare are known as
304:34 - members i think each student should have
304:36 - a name member this will be of the string
304:38 - data type string name
304:40 - i'll declare this but not yet assign it
304:43 - as well as a gpa that could be of the
304:45 - double data type
304:47 - then a boolean variable if they're
304:50 - currently enrolled or not
304:52 - enrolled
304:54 - then be sure to end your struct with a
304:55 - semicolon our struct student is kind of
304:58 - like its own data type we can use this
305:00 - data type to declare variables i'll
305:02 - create a student variable of this data
305:05 - type and that variable will have these
305:07 - three different members a name a gpa and
305:10 - a boolean variable for being enrolled
305:12 - much like with creating a variable we
305:14 - type the data type student and then some
305:16 - name some identifier let's name the
305:18 - first student student one
305:21 - student one will have its own name gpa
305:24 - and enrolled status if i would like to
305:27 - assign the name member of student one i
305:29 - would type
305:30 - the name of the student student one
305:32 - followed by dot members can be accessed
305:35 - with a dot also known as the class
305:38 - member axis operator i'll assign the
305:40 - name member and set the sequel to
305:43 - spongebob
305:45 - i'll assign student one's gpa
305:48 - student1.gpa i'll give spongebob a solid
305:51 - 3.2 then i could set his enrolled status
305:56 - student one dot enrolled
305:59 - i'll set this to be true
306:01 - then we could access these members i'll
306:03 - display them
306:04 - standard output
306:07 - student1 dot name
306:10 - i'll add a new line
306:14 - let's do the same thing with gpa and
306:16 - enrolled
306:18 - student1.gpa student1.enrolled
306:22 - this is what this looks like we have a
306:24 - student variable the name member is
306:26 - spongebob spongebob has a gpa of 3.2
306:30 - when accessing boolean variables 1
306:32 - corresponds with true 0 corresponds with
306:35 - false enrolled is set to true so that
306:37 - would return one let's reuse the struct
306:39 - to create a second student
306:42 - i'll just copy what we have here
306:44 - then paste it
306:46 - we'll give the second student a
306:48 - different identifier such as student two
306:52 - student two will have a name member of
306:55 - patrick
306:56 - a gpa of 2.1
307:00 - and he will be enrolled that's set to
307:02 - true
307:03 - let's display student two's members
307:07 - student2.name student2.gpa
307:10 - then student2.enrolled
307:13 - these first members correspond with
307:15 - student1 spongebob 3.2 one for true
307:20 - the second set is for student two
307:21 - patrick has a gpa of 2.1 and patrick is
307:25 - currently enrolled okay one last example
307:27 - let's create student three
307:29 - let's copy what we have paste it
307:33 - student student3
307:35 - student3.name
307:37 - student3.gpa student3.enrolled
307:40 - student 3's name will be squidward
307:43 - squidward has a gpa of 1.5
307:46 - let's set enrolled to be false
307:49 - then display student three's members
307:54 - student three dot name student three dot
307:56 - gpa student three dot enrolled
308:00 - and here are student threes members
308:02 - squidward 1.5 and 0 that means false now
308:06 - with members you can set a default value
308:09 - i'll set enrolled to be true
308:11 - then we don't need to explicitly state
308:13 - that
308:17 - underneath spongebob patrick and
308:19 - squidward their enrolled member is all
308:21 - set to 1. with members you can set a
308:23 - default value so yeah those are structs
308:26 - it's a structure that groups related
308:28 - variables under one name structs can
308:30 - contain many different data types
308:33 - variables in a struct are known as
308:35 - members and members can be accessed with
308:37 - a dot the class member axis operator so
308:40 - those are structs your assignment is to
308:42 - post a struct in the comments section
308:44 - down below and well yeah those are
308:46 - strucks in c plus
308:51 - hey everybody in this topic i'm going to
308:53 - show you how we can pass a struct to a
308:55 - function in c plus plus suppose we have
308:57 - a struct the identifier of the struct
309:00 - will be cars
309:02 - then we'll create some members related
309:04 - to cars
309:05 - how about a model standard string model
309:09 - a year end here
309:11 - then a color standard string color
309:16 - then let's go ahead and create two car
309:18 - strucks
309:19 - how about car
309:21 - car one
309:23 - car
309:24 - car two then we'll assign the members
309:28 - car one
309:29 - dot model
309:30 - pick a model of a card that you like
309:36 - then a year
309:40 - and a color
309:44 - let's do the same thing with cartoon
309:51 - car 2. model car 2.ear car 2.color
309:56 - let's pick some different data
310:02 - that'll work
310:03 - suppose we have a function to display
310:05 - the members of a
310:06 - car void
310:09 - how about print car we're printing the
310:11 - members
310:13 - we'll need some parameters
310:15 - the data type of what we're passing in
310:18 - are car structs so we'll list that as
310:20 - the data type
310:22 - then some nickname for the argument that
310:24 - we receive how about just car
310:27 - then i will display the members standard
310:29 - output
310:30 - car
310:32 - dot model
310:34 - should probably add a new line too
310:38 - then do the same thing with year and
310:40 - color
310:43 - car dot ear
310:44 - car dot color
310:46 - let's test this by printing car one
310:49 - print car 1 we will pass the name of a
310:52 - struct as an argument
310:54 - then i think we're just missing a
310:56 - function declaration so if you're
310:57 - missing that be sure to add that
311:00 - there
311:01 - now let's run this
311:04 - okay here's our car
311:05 - mustang 2023 and the color's red
311:08 - now with structs they're passed by value
311:11 - rather than pass by reference if we pass
311:14 - a struct as an argument what we're doing
311:16 - is creating a copy of the original
311:18 - struct to demonstrate that let's display
311:20 - the address of car 1 before and within
311:22 - the function
311:24 - standard
311:25 - output
311:27 - address of operator
311:29 - car 1
311:30 - i'll add a new line
311:33 - then let's do that within the function
311:35 - too
311:37 - the parameter name is car not car one
311:41 - there so let's try that
311:44 - so these addresses are different
311:46 - when we pass the struct to a function
311:49 - the function will create a copy of it
311:50 - it's passed by value we're displaying
311:52 - the members of the copy rather than the
311:55 - original if you need to work with the
311:56 - original struct you can use the address
311:58 - of operator we're passing a reference to
312:01 - the original car struct
312:03 - then be sure to change that within the
312:04 - function declaration as well
312:06 - so let's take a look at the addresses
312:08 - now
312:10 - yeah these addresses are the same
312:14 - car 2 is feeling pretty lonely so let's
312:16 - print car 2 as well
312:17 - print car
312:19 - pass in car 2 as an argument to this
312:21 - function
312:24 - so we should have
312:25 - car 1
312:26 - and car 2.
312:28 - this time let's change one of the
312:29 - members within a function
312:33 - let's create a function to paint car
312:36 - paint it a different color
312:38 - paint
312:39 - car
312:40 - there will be two arguments
312:43 - an address to a car
312:46 - as well as a color which will be of the
312:48 - string data type
312:51 - be sure to add a function declaration if
312:53 - you're missing it
312:58 - then within this function we will take
313:00 - our car
313:01 - dot color
313:03 - equals
313:04 - the new color that we receive
313:07 - now before we print our cars let's paint
313:09 - them a different color
313:11 - paint car
313:13 - we have two arguments this time a car
313:15 - struck
313:16 - and a new color let's paint our mustang
313:19 - silver
313:22 - then let's paint cartoon maybe gold
313:27 - then let's display this
313:30 - okay our mustang is now silver and our
313:33 - corvette is now gold so if we didn't use
313:36 - the address of operator when painting
313:38 - our car
313:39 - let me show you what happens
313:43 - our cars are still the original colors
313:46 - red and blue what we did within this
313:48 - function is that we created a copy of
313:50 - our car strucks
313:51 - and change the color of the copies
313:54 - rather than the originals so if you need
313:56 - to make any changes to the original you
313:58 - would want to use the address of
313:59 - operator so that's how to pass structs
314:02 - to functions
314:03 - you can pass by value which can be
314:05 - expensive or you can pass by reference
314:07 - your assignment if you choose to do so
314:10 - is to post a function that accepts a
314:12 - struct as an argument and that's how to
314:14 - pass structs to functions in c plus
314:19 - hey everybody we gotta talk about enums
314:21 - enums also means enumerations it's a
314:24 - user-defined data type that consists of
314:26 - paired named integer constants they're
314:29 - great if you have a set of potential
314:31 - options here's an example suppose we
314:33 - have a day of the week standard string
314:37 - today
314:38 - then pick a day
314:39 - i'll pick sunday normally you can't use
314:42 - strings within switches but we can use
314:44 - enums which are kind of similar let me
314:46 - explain
314:47 - so i'm going to create a switch
314:49 - we will examine today
314:51 - normally we can't do this because it's a
314:53 - string we'll examine today against many
314:55 - matching cases
314:57 - case
314:58 - sunday and i'll speed up the footage
315:09 - okay here's my switch depending on what
315:11 - day of the week it is we'll display a
315:12 - custom message it is either sunday
315:15 - through saturday one of these days so
315:17 - normally we can't do strings within
315:19 - switches this is what happens when we
315:21 - attempt that
315:23 - error switch quantity not an integer
315:26 - something similar that we can use are
315:28 - enums they're paired named integer
315:30 - constants we have a name and an
315:33 - associated value they're interchangeable
315:35 - at the top of my program i will declare
315:38 - enum then a name for the set of
315:40 - enumerations let's say day for day of
315:43 - the week
315:44 - we have
315:46 - sunday
315:47 - monday
315:49 - tuesday
315:52 - and you know the rest
316:00 - you can associate a value with each of
316:01 - these names
316:03 - sunday equals zero
316:05 - monday equals one
316:07 - then we'll just continue on with the
316:08 - rest of these
316:13 - i'm going to group these together like
316:14 - that
316:23 - okay we have our enum setup this
316:26 - identifier is kind of like the new data
316:28 - type
316:29 - we're not working with strings anymore
316:31 - we're working with days
316:33 - these are a set of potential options
316:35 - each option is a pair of a name and some
316:38 - associated value you can really pick any
316:41 - value i went with the numbers 0 through
316:43 - 6 to represent the day of the week i'm
316:45 - going to set today
316:47 - to
316:48 - sunday
316:50 - this name
316:51 - we can now use this within a switch
316:53 - there's an associated integer value
316:56 - but we'll change the cases from strings
316:58 - to that enum data type
317:04 - and this would work
317:07 - it is sunday
317:08 - within the cases you could use the
317:10 - associated values as well
317:12 - i'm gonna change today to be friday
317:16 - case zero is sunday monday is one
317:19 - two three four five six
317:25 - it is friday
317:26 - so that also works but i don't think
317:28 - it's as readable
317:30 - another cool thing with enums is that
317:32 - enum variables take only one value of
317:35 - the set if i try and make up some value
317:37 - like pizza day well we can't do that
317:43 - pizza day was not declared in the scope
317:45 - here's a few other enum examples you
317:48 - could create a set of enums for flavors
317:50 - vanilla chocolate strawberry mint an
317:52 - important note is that if you're working
317:54 - with enums and you don't assign an
317:56 - integer value to each of these names
317:58 - you'll implicitly assign zero to the
318:00 - first name then one two three kind of
318:03 - like what i did up here but we
318:05 - explicitly assigned to those values we
318:07 - have six colors
318:10 - or maybe planets i have a set of enums
318:13 - of the nine planets in our solar system
318:15 - the associated integer is the size of
318:17 - each planet in kilometers
318:19 - so yeah those are enums they're a
318:21 - user-defined data type that consists of
318:24 - paired named integer constants
318:27 - they're great if you have a set of
318:28 - potential options your assignment is to
318:31 - post a set of enums in the comments
318:33 - section down below and well yeah those
318:36 - are enums in c plus plus
318:40 - hey everybody so we have finally made it
318:43 - to object oriented programming an object
318:46 - think of it as a collection of
318:48 - attributes and methods
318:50 - attributes are characteristics of an
318:52 - object methods are functions that an
318:54 - object can perform
318:56 - objects can be used to mimic real-world
318:59 - items so look around you right now next
319:01 - to me i have a phone
319:04 - a book and a dog think of attributes as
319:07 - characteristics
319:08 - what kinds of characteristics would a
319:10 - phone have maybe a version number a
319:13 - charge a service provider objects can
319:16 - also contain methods what kinds of
319:19 - actions can a phone perform they can
319:21 - make calls receive calls play games now
319:24 - with a book some of the attributes of a
319:27 - book could be
319:28 - maybe an author number of pages let's
319:31 - see what kinds of methods can a book
319:33 - perform really not much you can open a
319:35 - book and you can close it so those are
319:37 - just a few okay lastly how about a dog
319:39 - object some of the attributes of a dog
319:41 - could be a name
319:43 - an age
319:44 - maybe a breed of dog then what kinds of
319:46 - actions can dogs perform they can eat
319:50 - they can bark they can sleep maybe play
319:52 - fetch so i think you get the idea an
319:55 - object is a collection of attributes and
319:57 - methods now to create an object we can
319:59 - use a class
320:01 - a class acts as a blueprint to create
320:03 - objects let's create a class to create
320:06 - human objects
320:08 - i will type class
320:10 - human
320:12 - curly braces
320:13 - i'm going to add a public axis modifier
320:17 - we'll learn about axis modifiers pretty
320:19 - soon i would like these attributes and
320:21 - methods to be publicly accessible let's
320:24 - start with the attributes of humans what
320:26 - kinds of characteristics can humans have
320:29 - how about a name
320:32 - this will be of the string data type
320:34 - i'll declare this attribute but not yet
320:36 - assign it
320:38 - maybe an occupation like a job
320:41 - standard string
320:43 - occupation
320:46 - then maybe an age int age
320:49 - our class human has these attributes
320:52 - humans have a name an occupation and an
320:55 - age that's good enough for this example
320:57 - now let's cover methods a method is a
321:00 - function that belongs to a class it's
321:02 - something that an object can do an
321:04 - action it can perform what sorts of
321:06 - actions should our humans be able to
321:08 - perform how about an eat method
321:12 - void eat
321:15 - i'll just display a message standard
321:17 - output
321:19 - let's say this
321:21 - person is eating
321:24 - humans can drink
321:26 - void drink
321:29 - standard output
321:32 - this person is drinking
321:36 - okay one last example
321:38 - how about sleep human sleep right void
321:42 - sleep
321:43 - standard output
321:46 - this person is sleeping
321:51 - good enough oh then make sure we add a
321:53 - semicolon to the end of the class
321:55 - perfect okay so we now have a human
321:58 - class
321:59 - we can use this class as a blueprint to
322:02 - create human objects each human object
322:04 - will have a name an occupation and an
322:08 - age they can also eat drink or sleep
322:12 - they have their own functions which we
322:14 - call methods so to create a human object
322:17 - we will type the name of the class
322:20 - human
322:22 - then a unique identifier
322:25 - how about human one that's creative
322:28 - so human one is an object
322:31 - human one has a name an occupation and
322:33 - an age but we have not assigned these
322:36 - attributes
322:37 - let's say human one's name human one
322:41 - member axis modifier which is a dot
322:44 - name
322:45 - equals rick
322:49 - then human one's
322:52 - occupation
322:54 - equals
322:56 - scientist
322:58 - human one's
323:00 - age equals 70.
323:04 - let's verify that this worked by
323:05 - printing out these attributes
323:08 - standard output
323:10 - human one dot name
323:14 - i'll add a new line
323:18 - then let's repeat this for occupation
323:20 - and age
323:21 - human one dot occupation human
323:25 - dot age
323:30 - human one's name is rick his occupation
323:33 - is a scientist his age is 70 years old
323:37 - so this part is kind of similar to
323:39 - structs
323:40 - however objects can also perform actions
323:43 - they have methods
323:45 - rick can eat drink and sleep
323:48 - so to invoke those methods i would type
323:50 - the name of my object human1 and let's
323:53 - have human one eat
323:57 - so humanone dot eat
323:59 - add a set of parentheses to invoke this
324:01 - method
324:04 - okay this person is eating let's also
324:07 - test drink and sleep
324:10 - human one dot drink
324:15 - human one dot sleep
324:21 - okay this person is eating this person
324:23 - is drinking this person is sleeping and
324:26 - that is our human human one
324:28 - for more practice let's create a second
324:29 - human
324:31 - human
324:32 - human to
324:35 - i'm going to copy these lines
324:38 - let's change human one to human two
324:42 - human two's name will be morty
324:45 - occupation will be student
324:48 - age what about 15
324:51 - i'm going to display the attributes of
324:53 - human 2 this time
324:55 - then i'll have human 2 invoke its
324:57 - methods
324:58 - eat drink then sleep
325:01 - ok human 2's name is morty their
325:04 - occupation is a student
325:06 - morty is 15 years old then morty can
325:08 - perform these actions eat drink and
325:11 - sleep
325:12 - now you can assign some default
325:13 - attributes
325:15 - so let's say that all humans we create
325:17 - will be named rick it's kind of like
325:19 - we're cloning him
325:21 - his occupation will be
325:24 - scientist
325:26 - age will be 70.
325:29 - i'm not going to assign these attributes
325:30 - what i did is that i added some default
325:33 - attributes
325:35 - so we have human one and human two
325:40 - i'll display the attributes of human one
325:42 - first then human two
325:44 - human one dot name occupation age
325:49 - then we have human two's attributes as
325:50 - well
325:51 - so remember i am not assigning these
325:53 - attributes within the main function
325:56 - we have two humans they're both named
325:58 - rick they're both scientists and they're
326:00 - both age 70. okay now here's one last
326:03 - example to really get the hang of
326:05 - objects let's create a different class
326:07 - this time how about cars
326:09 - class car
326:12 - let's add a public axis modifier
326:15 - then what kinds of attributes would cars
326:16 - have
326:18 - perhaps a make
326:20 - standard string make
326:23 - a model
326:25 - standard string model
326:28 - a year that would be an int
326:31 - then maybe a color standard string color
326:36 - you can add some default attributes but
326:38 - i'll just leave those empty for now
326:40 - you can add some methods
326:42 - what kinds of actions can cars take
326:44 - i guess you can accelerate
326:46 - void accelerate
326:50 - standard output uh what can we print
326:54 - you step on the gas
327:00 - then maybe break
327:02 - void break
327:05 - standard output
327:08 - you step on the brakes
327:13 - then be sure to add a semicolon to the
327:15 - end of your class because i always
327:16 - forget to do that
327:18 - okay we now have a car class it acts as
327:21 - a blueprint to create car objects
327:23 - to create an object we would type the
327:25 - name of the class
327:26 - car in this example
327:28 - then a unique identifier for the object
327:30 - let's say car one
327:32 - then we can assign some of the
327:33 - attributes of this car object
327:36 - car one dot make
327:39 - maybe ford
327:42 - car one dot model
327:47 - equals mustang i like mustangs
327:50 - car one dot year
327:52 - equals 20 23
327:55 - then a color car one dot color
327:59 - maybe silver
328:01 - okay then just to test these let's print
328:03 - these attributes
328:06 - standard output
328:08 - car one
328:09 - dot make
328:11 - add a new line
328:13 - let's copy this line paste it three
328:16 - times
328:18 - then we'll display the model
328:20 - year
328:22 - then color
328:24 - okay our car object is a ford mustang
328:27 - the year is 2023 the color is silver
328:30 - not only does our car have attributes
328:32 - but it has methods actions it can
328:34 - perform as well
328:35 - our car can accelerate and it can break
328:38 - let's test that
328:41 - car1 dot
328:43 - accelerate
328:47 - car one dot break
328:51 - okay you step on the gas you step on the
328:54 - brakes
328:55 - then if i need a second car object i can
328:57 - type car
328:58 - car two
329:00 - then i can assign the attributes and i
329:02 - have access to its methods so yeah
329:05 - that's an object everybody it's a
329:07 - collection of attributes and methods
329:10 - attributes are characteristics of an
329:12 - object methods are functions that an
329:15 - object can perform
329:16 - so yeah those are objects everybody in
329:19 - the next video we're going to cover
329:20 - constructors
329:22 - your assignment is to post a class in
329:24 - the comment section down below so yeah
329:27 - that's an introduction to object
329:28 - oriented programming in c plus
329:34 - hey everybody welcome back so in today's
329:36 - video we're going to discuss
329:37 - constructors a constructor is a special
329:40 - method within a class that is
329:43 - automatically called when an object is
329:45 - instantiated it's useful for assigning
329:48 - values to attributes as arguments before
329:51 - when we were assigning attributes to an
329:53 - object we would say for example
329:56 - car one dot
329:58 - make equals ford
330:01 - well with the constructor we can do that
330:03 - automatically here's an example this
330:05 - time let's create a student class
330:08 - class
330:09 - student
330:13 - i'll add a public access modifier what
330:16 - attributes should students have
330:18 - how about a name standard string name
330:22 - int age
330:24 - double gpa sounds good to me
330:27 - then if i need to create a student
330:28 - object i would type the name of the
330:30 - class student
330:32 - a unique identifier for this specific
330:34 - object let's say student1
330:38 - then to assign some of the attributes
330:40 - right away i could use a constructor we
330:43 - do have a constructor that is
330:44 - automatically called behind the scenes
330:47 - but we could explicitly set one up
330:50 - the constructor has the same name as the
330:52 - class
330:53 - in this case student
330:55 - add a set of parentheses add a set of
330:57 - curly braces
330:58 - think of this as a function
331:00 - we can set up parameters
331:02 - when we instantiate a student object we
331:05 - will automatically call this function
331:07 - the constructor then pass arguments
331:10 - let's set up some parameters we have
331:12 - standard string name
331:15 - int age
331:16 - double
331:17 - gpa
331:20 - then when i instantiate a student object
331:22 - i will add a set of parentheses after
331:24 - the object name then pass in my
331:26 - arguments let me just zoom in real quick
331:30 - okay in order to instantiate a student
331:32 - object we need to pass in a name
331:34 - an age and a gpa
331:37 - so for the first student
331:39 - student one's name will be spongebob
331:41 - his age will be
331:43 - i don't know how old spongebob is let's
331:45 - say he's 25.
331:47 - spongebob's gpa will be a solid
331:50 - 3.2
331:52 - when we instantiate our student object
331:54 - we will pass these values as arguments
331:57 - to the constructor
331:59 - now to assign these attributes
332:01 - with these parameters
332:03 - we first need to select these attributes
332:06 - in this example i gave them the same
332:08 - name
332:08 - just to remove ambiguity if i'm
332:11 - referring to these attributes i will
332:13 - type this
332:15 - then an arrow
332:16 - name equals the name of the parameter
332:20 - name
332:22 - this name equals my name parameter
332:26 - this
332:26 - arrow age equals my age parameter
332:30 - this
332:32 - aero
332:33 - gpa equals my gpa
332:38 - so now let's test this i will display
332:40 - student one's name age and gpa
332:45 - standard
332:46 - output
332:49 - student1 dot
332:51 - name
332:52 - add a new line
332:56 - then we have age
332:59 - then gpa
333:03 - okay we got spongebob he's 25 years old
333:06 - his gpa is 3.2 so you can see that we
333:10 - don't need to necessarily add these
333:12 - values to these attributes manually
333:14 - you can do that automatically with the
333:15 - constructor so another way in which you
333:18 - may see this constructor set up is with
333:20 - the parameter names being different from
333:22 - the attribute names perhaps instead of
333:24 - name age and gpa let's say x
333:27 - y
333:28 - then z
333:30 - if the attribute names are different
333:31 - from the parameter names you don't need
333:34 - the this keyword
333:37 - you could say name equals x age equals y
333:40 - gpa equals z
333:42 - and this would work too
333:45 - if you prefer this way of doing things
333:46 - you can do that uh just my own personal
333:49 - preference i like to use the this
333:50 - keyword and then keep my parameters the
333:52 - same but that's just me you do you let's
333:54 - create a couple more students and it's
333:56 - kind of nice because we can reuse this
333:58 - constructor
333:59 - let's create student two
334:01 - student student two
334:04 - student two will be patrick
334:07 - i don't know how old patrick is let's
334:08 - say patrick is 40.
334:12 - uh patrick's gpa will be 1.5
334:16 - okay to test this let's display student
334:18 - twos and name age and gpa
334:23 - okay we got patrick he's 40 years old
334:25 - gpa is 1.5
334:27 - one last student
334:29 - student
334:30 - student three
334:32 - student three will be sandy
334:34 - sandy is uh how about 21 years old
334:39 - and sandy's gpa is a perfect 4.0
334:45 - okay now we'll display student 3's name
334:48 - age gpa
334:52 - okay we got sandy her age is 21
334:55 - gpa is for well 4.0 let's do one last
334:59 - example just to reinforce our
335:01 - understanding of constructors
335:03 - let's create an entirely new class let's
335:05 - go back to our car class
335:07 - i'm going to get rid of all this
335:10 - so we need a class
335:12 - class car
335:14 - set of curly braces add a semicolon to
335:16 - the end i will add a public access
335:19 - modifier
335:20 - in the last topic we decided that cars
335:22 - had four attributes
335:24 - a make
335:25 - standard string make
335:29 - a model standard string model
335:33 - and year
335:35 - standard string color
335:39 - now we'll create a constructor for our
335:41 - car objects it has the same name as the
335:44 - class name car
335:46 - set of parentheses set of curly braces
335:48 - we can set up some parameters
335:50 - we have make model year and color i
335:53 - think i'm just going to copy this to
335:54 - save time
335:56 - you can rename these if you want
335:59 - but i like to keep them the same
336:06 - then i will assign this
336:08 - arrow
336:09 - make equals make
336:12 - this
336:13 - arrow
336:14 - model equals model
336:17 - this
336:19 - arrow
336:20 - year
336:21 - equals year
336:25 - this
336:26 - arrow color
336:28 - equals color when we create a car object
336:31 - we'll need to pass in these arguments
336:35 - i will create car car 1 add a set of
336:38 - parentheses pass in my arguments
336:40 - a make
336:41 - model year and color i'll create a chevy
336:47 - corvette
336:48 - the year will be 2022
336:52 - the color is blue
336:56 - i'm going to display the attributes
336:58 - standard output car1 dot make
337:02 - i'll add a new line
337:04 - then i will display the model year then
337:07 - color
337:11 - model
337:13 - year
337:14 - color
337:18 - car 1 is a chevy corvette the year is
337:20 - 2022 the color is blue
337:23 - let's create a second car car car 2
337:27 - car 2 will be a ford
337:31 - mustang
337:34 - the year will be 2023 the color will be
337:37 - red
337:38 - i will display cartoons attributes
337:43 - we have a forward mustang the year is
337:45 - 2023 the color is red
337:47 - so yeah that's a constructor everybody a
337:50 - constructor is a special method that is
337:52 - automatically called when an object is
337:54 - instantiated it's useful for assigning
337:57 - values to attributes as arguments when
338:00 - you create an object from a class
338:02 - add a set of parentheses
338:04 - then add your arguments
338:06 - within the constructor you can assign
338:08 - those arguments to the attributes of
338:10 - that class in the next topic we'll cover
338:13 - overloaded constructors if you're
338:15 - looking for some additional practice in
338:17 - the comments section down below post a
338:20 - class that contains a constructor and
338:22 - well yeah those are constructors in c
338:25 - plus
338:28 - overloaded constructors are when we have
338:30 - multiple constructors with the same name
338:33 - but different parameters they allow for
338:36 - a varying number of arguments when
338:37 - instantiating an object here's an
338:39 - example we'll create pizza objects from
338:41 - a pizza class let's type class
338:44 - pizza add a set of curly braces a
338:47 - semicolon to the end
338:49 - we'll make our members publicly
338:51 - accessible
338:52 - so pizzas they can have a variable
338:54 - number of toppings right you can have no
338:56 - toppings one topping two toppings three
338:59 - toppings suppose we have just one
339:01 - topping to begin with topping one and
339:04 - that will be of the string data type
339:06 - standard string topping one
339:10 - then i will create a pizza constructor
339:12 - it has the same name as the class name
339:14 - pizza parentheses curly braces
339:17 - we'll set up some parameters
339:20 - standard string topping one in order to
339:22 - construct a pizza we have to pass in one
339:24 - topping
339:25 - so let's do that we have pizza
339:28 - pizza one
339:29 - and i will pass in one argument for a
339:31 - topping
339:33 - i feel like pepperoni
339:36 - then we'll just need to assign this
339:37 - argument to this attribute
339:40 - this
339:41 - arrow
339:42 - topping one
339:44 - equals topping one the name of this
339:46 - parameter then to test this let's
339:48 - display topping one
339:50 - standard output
339:52 - pizza
339:53 - one
339:54 - dot topping one
340:03 - okay we have pizza one that contains
340:05 - pepperoni
340:06 - now what if you would like a pizza that
340:08 - has two toppings
340:10 - suppose we have pizza two pizza
340:13 - pizza two
340:14 - this time i'm going to attempt to pass
340:16 - in two arguments
340:18 - how about mushrooms
340:22 - and peppers
340:26 - well when i run this program
340:28 - we're going to have an error
340:30 - error no matching function for call to
340:33 - pizza with two arguments
340:36 - we can create an additional constructor
340:38 - that accepts different arguments
340:41 - let's copy what we have and paste it
340:45 - this constructor will take two string
340:47 - arguments
340:48 - topping one and topping two
340:52 - so we have two toppings this time and i
340:54 - should probably create another attribute
340:56 - for a second topping
340:57 - standard string
340:59 - topping two
341:05 - this topping two equals topping two
341:09 - so now with pizza two let's display
341:11 - topping one
341:13 - as well as topping two
341:18 - now pizza two
341:20 - contains mushrooms and peppers
341:23 - what if you would like a pizza with no
341:24 - toppings like a plain cheese pizza well
341:27 - we could set that up
341:29 - pizza
341:30 - pizza three
341:33 - i'm going to attempt to add a set of
341:34 - parentheses after pizza 3 but pass in no
341:37 - arguments
341:40 - but we have a warning our compiler is
341:42 - saying we should get rid of the
341:43 - parentheses
341:48 - if we're passing in no arguments we
341:49 - don't need that set of parentheses but
341:51 - we still have an error here
341:56 - no matching function call for pizza with
341:58 - no arguments
342:00 - if we're creating an object and passing
342:02 - in no arguments we'll need a matching
342:04 - constructor
342:05 - so at the top i'll create a pizza
342:07 - constructor with no arguments
342:10 - and that should make that error go away
342:14 - so this should run and compile just fine
342:16 - then
342:17 - yep no errors
342:19 - so yeah those are overloaded
342:21 - constructors
342:22 - you can have multiple constructors with
342:24 - the same name as long as the parameters
342:27 - are different we have three constructors
342:29 - with the same name we can create a pizza
342:31 - with no toppings one topping or two
342:34 - toppings overloaded constructors allow
342:37 - for multiple objects with a varying
342:39 - number of attributes if you're looking
342:41 - for some additional exercises post a
342:43 - class with overloaded constructors in
342:45 - the comments section down below and well
342:47 - yeah those are overloaded constructors
342:49 - and c plus
342:53 - hey everyone let's talk about getters
342:55 - and setters getters and setters are used
342:58 - within this concept of abstraction where
343:00 - we hide any unnecessary data from
343:03 - outside of a class getters are functions
343:06 - that make a private attribute readable
343:09 - setters are functions that make a
343:11 - private attribute writable here's an
343:14 - example
343:15 - i'm going to create a stove object class
343:19 - stove
343:21 - then i will instantiate a stove object
343:24 - stove
343:25 - stove
343:26 - in previous topics when we created
343:28 - attributes we would use the public
343:30 - access specifier
343:32 - then write any attributes
343:34 - in this example let's say int
343:37 - temperature
343:38 - i'll go ahead and set this to zero right
343:40 - away
343:41 - since this attribute temperature is
343:43 - public it's accessible from outside of
343:46 - the class that means that people can
343:48 - change it for example
343:50 - i will take my stove object
343:52 - set the temperature attribute to a
343:54 - really high setting that doesn't exist
343:56 - like
343:57 - a million
344:00 - this is fine
344:02 - then i can display the temperature
344:04 - standard output
344:06 - the
344:07 - temperature setting
344:11 - is
344:13 - stove dot temperature
344:20 - the temperature setting is one million
344:23 - i don't want people to mess with my
344:25 - temperature attribute
344:26 - what i could do instead is set these
344:29 - attributes to be private
344:33 - we're following that rule of abstraction
344:35 - we're hiding any unnecessary data from a
344:38 - user that they don't need we no longer
344:40 - have access to this temperature
344:42 - attribute from outside of the class you
344:44 - can see we have some red underlines
344:48 - temperature is private within this
344:50 - context this is a hidden attribute from
344:52 - the outside world if i need access to
344:55 - the value found within this temperature
344:57 - i can write a getter it's a function
345:00 - that will make an attribute readable
345:02 - i'll add a public access specifier
345:05 - then write a getter we're returning an
345:08 - integer
345:09 - i'll write get then the attribute name
345:13 - temperature
345:15 - all i'm going to do is return
345:18 - our temperature
345:20 - i can no longer update or change the
345:22 - temperature it's readable but not
345:24 - writable so i'm going to turn this line
345:26 - into a comment
345:28 - in place of accessing this attribute
345:30 - directly i'm going to invoke the get
345:33 - temperature method
345:35 - dot get temperature add a set of
345:37 - parentheses
345:39 - now the current temperature setting is
345:41 - set to zero adding a getter will make an
345:43 - attribute readable if you need a private
345:46 - attribute to also be writable you can
345:48 - add a setter
345:50 - void
345:51 - set
345:52 - temperature
345:58 - this
346:00 - arrow
346:01 - temperature
346:02 - equals our temperature that we pass in
346:05 - then we just need a parameter
346:08 - int temperature
346:10 - in order for a user to change the
346:12 - temperature they would need to invoke
346:13 - the set temperature method
346:16 - then they can pass in a new temperature
346:18 - using this setter they can still set the
346:21 - temperature to whatever they want like a
346:23 - million in the previous example
346:28 - the temperature setting is set to 1
346:30 - million within a setter we can add some
346:32 - additional logic or checks
346:35 - before we do set the temperature let's
346:36 - check to see what the temperature is
346:39 - if
346:40 - the temperature the user passes in
346:43 - is less than zero
346:46 - we will set this temperature
346:49 - to be
346:50 - zero
346:52 - else if
346:55 - the temperature
346:57 - is greater than or equal to 10
347:00 - suppose this is a knob with different
347:02 - settings the numbers 0 through 10 this
347:04 - temperature
347:06 - equals 10.
347:08 - in case they type in a million it'll
347:10 - just max out at 10.
347:14 - else
347:16 - this temperature
347:17 - equals temperature
347:20 - i could attempt to set the temperature
347:21 - to a million but it would just max out
347:23 - at ten
347:24 - or we could try a negative number like
347:26 - negative three
347:29 - well now the temperature setting is set
347:31 - to zero
347:32 - as if the stove was off or anything
347:34 - between maybe five something right in
347:36 - the middle
347:38 - the temperature setting is five
347:40 - so yeah that's kind of the purpose of
347:42 - getters and setters they make a private
347:45 - attribute either readable or writable or
347:48 - both if you use both one additional step
347:51 - you can take too is that if you have a
347:53 - constructor you can invoke the setters
347:55 - within a constructor within my stove
347:58 - class i have a constructor
348:00 - if we were to receive a temperature
348:04 - we could set the temperature right away
348:06 - so we already have this line of code
348:08 - within our setter so we don't
348:10 - necessarily need this line again
348:12 - we would instead invoke the setter
348:17 - set temperature
348:19 - pass in our temperature
348:23 - then if i was to instantiate a stove
348:25 - object i would have to pass in a
348:26 - temperature i'll set it to be zero
348:30 - and this temperature setting is set to
348:32 - zero
348:33 - so yeah those are getters and setters
348:35 - everybody a getter makes a private
348:38 - attribute readable a setter makes a
348:41 - private attribute writable within the
348:43 - getters and setters you can perform
348:45 - additional checks or logic which is
348:48 - pretty nice
348:49 - if you're looking for some additional
348:50 - practice post a class that has a getter
348:53 - and setter in the comment section down
348:55 - below and well yeah those are getters
348:57 - and setters and c plus
349:01 - hey guys let's talk about inheritance
349:03 - inheritance is when a class can receive
349:06 - attributes and methods from another
349:08 - class
349:09 - the receiving class is known as a child
349:12 - class
349:13 - the class that's being inherited from is
349:15 - known as the parent class it's kind of
349:17 - like how children will inherit their
349:19 - parents genes and some of their physical
349:21 - traits it's kind of the same concept a
349:23 - benefit of inheritance is that it helps
349:25 - to reuse similar code found within
349:27 - multiple classes here's an example we
349:30 - will create an animal class the animal
349:32 - class will be the parent class
349:35 - class animal
349:40 - i'll make these members publicly
349:41 - accessible
349:43 - all animals will have a boolean
349:45 - attribute that we will name alive
349:48 - if you're an animal you're alive then
349:51 - let's add a method maybe an eat method
349:53 - all animals should be able to eat
349:56 - void
349:58 - eat
350:00 - well just print a generic message
350:02 - standard output
350:04 - this animal is eating
350:10 - i'm going to create two classes a dog
350:13 - class and a cat class they will inherit
350:16 - from the animal class
350:18 - let's begin with dog
350:20 - class
350:21 - dog to inherit from another class you
350:24 - would add a colon
350:26 - then public
350:27 - the name of the parent class
350:29 - dog will inherit from the animal class
350:33 - that is out of curly braces semicolon at
350:36 - the end
350:37 - and we now have a dog class
350:39 - now check this out if i create a dog
350:42 - object it will have a boolean variable
350:44 - named alive as well as an eat method
350:47 - so let's create a dog object dog dog
350:52 - so i'm going to display that boolean
350:54 - variable
350:57 - dot alive
351:02 - if i display this attribute
351:04 - this will give me one which means true
351:08 - this dog object also has an eat method
351:13 - dog.e add a set of parentheses to invoke
351:16 - it
351:18 - this animal is eating
351:21 - so even though there's nothing within
351:22 - this dog class it's inheriting
351:24 - everything from within the animal class
351:26 - and we could add some additional
351:28 - attributes and methods as well
351:30 - maybe just a method this time i would
351:32 - like to give my dog the ability to speak
351:35 - so let's make this public
351:38 - void maybe bark
351:42 - standard output
351:44 - the dog goes woof
351:50 - my dog is alive and it can eat my dog
351:53 - can also bark as well it has its own
351:55 - attributes and methods too
351:57 - i would like my dog to bark
352:03 - okay
352:04 - my dog is alive that's set to one the
352:06 - animal is eating the dog goes woof
352:09 - so now let's create a cat class
352:12 - class
352:13 - cat
352:14 - the cat class will inherit from the
352:16 - animal class
352:20 - i'll make its members publicly
352:21 - accessible
352:23 - i will give cats a meow function void
352:27 - meow
352:29 - standard output
352:31 - the cat goes meow
352:36 - there okay now we can create a cat
352:39 - object
352:40 - cat
352:41 - cat
352:42 - let's print the alive boolean variable
352:44 - of my cat
352:46 - cat dot eat now i'm going to try and use
352:49 - the bark method of a cat
352:52 - which we don't have
352:53 - let's attempt to use that
352:56 - so class cat has no member named bark
352:59 - that's because that method is found
353:00 - within the dog class and not the cat
353:03 - class cats have a meow method i'm
353:06 - instead going to use the meow method
353:10 - are cat's alive the animal is eating the
353:13 - cat goes meow so that's kind of how
353:15 - inheritance works a class can inherit
353:17 - attributes and methods from another
353:19 - class it helps with code reusability you
353:22 - know technically you could add these
353:24 - attributes and methods to each of these
353:26 - classes for example
353:28 - i'll just add the boolean variable alive
353:30 - to each of these classes
353:33 - as well as the eat method
353:38 - you know this would work too but we're
353:39 - repeating ourselves and with programming
353:42 - we try not to repeat ourselves if we
353:43 - don't have
353:44 - to especially because if we have to make
353:47 - a change to the eat method let's change
353:49 - eat to
353:50 - nom nom nom
353:52 - well i would have to go to each class
353:54 - and make that change manually and that
353:56 - can be inconvenient if i have hundreds
353:58 - of different classes it would be a lot
354:00 - easier if i just had to make that change
354:02 - in one place
354:03 - so i'm going to revert all those changes
354:07 - if i need to make a change to one of
354:09 - these methods i'm going to change it to
354:11 - display
354:13 - nom nom nom
354:16 - well then i just have to make that
354:17 - change in one place instead of for every
354:20 - individual class
354:21 - let's try another example we'll create a
354:24 - class named shape
354:26 - this will be the parent class
354:29 - we'll make the members publicly
354:31 - accessible
354:32 - any class that inherits from the shape
354:34 - class will have a double attribute that
354:37 - we will name
354:38 - area for surface area
354:41 - double
354:42 - volume
354:44 - in this example we won't have any
354:45 - methods this time just some attributes
354:47 - i'm going to create class
354:50 - cube
354:51 - cube is the child class it will inherit
354:53 - from the parent class shape so colon
354:57 - public the name of the parent
355:00 - shape
355:02 - even though there's nothing within my
355:03 - cube class my cube class has an area and
355:06 - volume attribute
355:09 - then let's make a sphere class class
355:13 - sphere
355:15 - there we go
355:17 - i'm going to add a public axis modifier
355:19 - all cubes will have a double
355:22 - side property then with spheres
355:25 - they will have
355:27 - double
355:28 - radius
355:29 - then i'm going to add a constructor for
355:31 - both cubes and spheres
355:33 - let's begin with cube cube
355:37 - then sphere
355:40 - in order to instantiate a cube object i
355:42 - need to pass in a side as an argument
355:44 - when i construct an object
355:47 - double side
355:50 - then for the sphere we need a radius
355:53 - double radius
355:55 - i think what we'll do is that when we
355:56 - construct a cube object and a sphere
355:59 - object we'll calculate the area and the
356:01 - volume based on either the side that we
356:04 - pass in for a cube or the radius for a
356:07 - sphere let's begin with the cube
356:09 - first let's assign the length of a side
356:11 - remember with a cube the length the
356:13 - width and the height are all the same
356:16 - this arrow side equals side
356:18 - to calculate the area we can use this
356:20 - formula
356:22 - so this area equals
356:25 - side
356:26 - times side
356:28 - times six because there are six sides to
356:30 - a cube
356:31 - then if you need the volume you could
356:33 - say this
356:34 - arrow
356:35 - volume equals side to the power of three
356:38 - we could just say side times side times
356:41 - side just to keep it simple
356:44 - now with the sphere it's a little more
356:45 - complex
356:47 - first let's assign the radius this arrow
356:50 - radius equals radius
356:54 - let's calculate the area of a sphere
356:57 - this arrow
356:58 - area
357:00 - equals
357:01 - to calculate the area of a sphere that
357:03 - would be 4
357:05 - times pi let's just say 3.14159
357:10 - times radius squared
357:13 - so radius times radius
357:17 - then let's calculate the volume this
357:20 - arrow
357:21 - volume
357:22 - equals
357:23 - to calculate the volume of a sphere the
357:25 - formula is
357:27 - 4 divided by 3
357:29 - times pi
357:30 - times radius cubed so that would be 4
357:33 - divided by 3.0 make sure to divide by
357:37 - 3.0 and not 3 because in this case we
357:39 - would be using integer division we would
357:42 - like to keep that decimal so 3.0
357:45 - times pi that's 3.14159
357:49 - times radius cubed to keep it simple we
357:51 - can say radius
357:53 - times radius
357:55 - times radius
357:58 - and there we go
358:00 - okay so let's create a cube object to
358:02 - begin with
358:03 - cube
358:05 - i'll name this object just cube then in
358:08 - order to construct a cube object we need
358:09 - to pass in the length of a side let's
358:12 - say 10
358:14 - so my cube class inherits the area and
358:17 - volume attribute from the shape class
358:19 - within the constructor of the cube class
358:21 - we will calculate what the area and the
358:23 - volume is going to be
358:27 - and i will display that standard output
358:32 - area
358:35 - cube dot area
358:38 - then i'll add centimeters
358:42 - then let's do the same thing with volume
358:45 - volume
358:47 - cube dot volume
358:50 - if the length of a side is
358:52 - 10 the area is going to be 600
358:55 - centimeters squared
358:57 - the volume is 1000 centimeters cubed
359:00 - now let's try this with our sphere
359:02 - sphere
359:04 - i'll name this object sphere then we
359:06 - will pass in the radius
359:09 - let's say 5.
359:10 - i would like to display the spheres area
359:14 - and the sphere's volume
359:16 - the area would be 314 centimeters
359:19 - squared
359:20 - the volume is 523 centimeters cubed
359:25 - so yeah that's inheritance everybody
359:28 - a class can inherit attributes and
359:30 - methods from another class
359:32 - if you have multiple classes and they
359:35 - share similar attributes or methods
359:37 - you can place them within a parent class
359:40 - and all of those individual classes can
359:42 - inherit from that one common class it
359:44 - helps with code reusability and you
359:46 - don't have to repeat yourself if you're
359:48 - looking for some additional practice
359:50 - post a parent class and a child class in
359:52 - the comments section down below and well
359:55 - yeah that's an introduction to
359:56 - inheritance in c plus

Cleaned transcript:

hey guys in this video you're going to write your first c plus program so sit back relax and well enjoy the show hey if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm i'm gonna tell you why you need to learn c plus plus c plus plus is a fast language like really fast it's commonly used in advanced graphics applications a few examples would include adobe applications video editing software anything that's graphics intensive c plus plus is considered a middle level language therefore it's commonly used with embedded systems and most importantly it's commonly used with creating video games i like video games like a lot compared to other programming languages you could say that c plus plus is a middle level language programming languages tend to be on a spectrum the higher level of programming languages the more it resembles human language languages that are closer to being lower level resemble hardware instructions higher level languages such as python java and csharp are very easy to write with and to understand but they tend to be slower c plus and c they take a little more effort to write but they're very fast they have the benefit of working closely with machine hardware while still somewhat resembling human language just a fair warning there is a learning curve with c plus plus but if you can learn it it's worth it there's two things you'll need to get started one is a text editor a few options include but are not limited to would be vs code code blocks or even notepad vs code and code blocks are also considered ides integrated development environments they are a text editor as well as a workshop that contain a lot of useful developer tools in this video i'm going to show you how to download vs code but feel free to use any text editor that you're comfortable with secondly we'll need a compiler a compiler is a piece of software that will parse source code to machine instructions and that's really it if you're using windows or linux you'll probably want to go with gcc if you're running mac you'll probably go with clang okay clang has a really cool logo it's blue eyes white dragon so let's get started well alright then everybody now we are going to download vs code that text editor i was talking about head to this url code.visualstudio.com then select the correct download for your operating system i'm running windows i'll select windows then i will open this read the agreement yes i actually did read it that fast i accept the agreement next next next i'll create a desktop icon why not next and install we might as well launch it finish in vs code there's two extensions i would recommend go to the left toolbar underneath extensions we will look up c c plus plus and we would like to download this extension uh let's pretend that this wasn't already installed so i'm going to install it then the next extension i recommend is code runner here it is then just click this blue button to install it okay let's close out of this we're going to create a new folder to hold our c plus projects go to the left toolbar explore open folder i'll create a new folder on my desktop new folder i'll name this c plus projects that sounds good to me then select folder within this folder we'll create a new file i'll name this hello world dot cpp make sure to get that cpp extension at the end that means it's a c plus plus file okay we now have a c plus file to work with now we just need to download that compiler that parses source code to machine instructions there's a great set of instructions at this url code.visualstudio.com docs let's head to c plus plus there's different installation instructions depending on your operating system you'll be downloading gcc on linux if you're running linux gcc on windows for windows and clang for mac os downloading a compiler for linux and mac is actually really easy i can cover that in like 30 seconds windows is a little more complicated but let's begin with linux so all you're going to do is open up terminal and enter the following command gcc v that will check to see if it's currently installed if it's not you enter this command in then you install the gnu compiler tools by typing in this command right here and that's all you need to do with linux if you're on mac you'll download clang open terminal type in this command if clang isn't installed all you type is this command and that's it so pretty easy right if you're using the windows operating system there's way more steps so let's head to step three we'll need to install min gw64 you can click this link to the installer this is an executable i'll open this when it's done click next next next wait for it we might as well run this then finish now we will follow the installation instructions on this website under step 5 we will type pack man dash capital s y u enter type y then enter to proceed with the installation type y then enter again to confirm to proceed now we'll need to find this program from the start menu m sys2 then type this command pack man dash s u enter type y then enter to proceed with the installation now we'll need to enter this command in there's a lot to type here pacman dash s dash dash needed base dash dev l min gw dash w 64 dash x 86 underscore 64 dash tool chain then enter then just hit enter proceed with the installation type yes type y enter again then give it a moment then we can close out of this window we'll have to find the bin folder of mingw it's likely going to be within your c drive go to msys64 mingw64 bin then copy this address we'll need to add that path to the windows path environment variable to do so search settings settings we'll search edit environment variables go to path edit let's pretend that this wasn't here i'm going to go to new paste that address okay okay close out of this window just to be sure that our compiler is working and available let's open up command prompt command prompt then type in this command g plus plus dash dash version enter yeah it looks like it's good to go we have now successfully installed our compiler all right everybody let's write our first c plus plus program at the top of our c plus file we are going to type include within angle brackets io stream iostream is a header file that contains functions for basic input and output operations by writing include iostream we're including that header file then we have access to a whole bunch of useful input and output operations now we'll need a main function the main function is where the program begins we'll type int main parentheses curly braces we begin the program by invoking the main function and read any code within the main function starting at the top and working our way down at the end of our main function we'll want return 0 then add a semicolon if we reach return 0 that means there were no problems in this program however if one is returned that means there was a problem there is an issue so place return 0 at the end of your main function what we'll do in this lesson is write some basic output to write some output you'll type std contrary to what you might believe in this case it doesn't mean sexually transmitted diseases it means standard follow std with two colons then type c out c means character out means output altogether this means standard character output we're going to display some characters as output then follow c out with two left angle brackets these characters mean output it's also known as the left shift operator when used with numbers what characters would we like to display as output within quotation marks let's write something what's a food you like i like pizza i'll type that then follow this statement with a semicolon at the end of statements we add a semicolon that lets the compiler know that this statement is done it's sort of like the period at the end of a sentence that's when you know the sentence is complete so i'm going to save this i'll hold ctrl s or you can go to file save then click this button to run it and there's my output i like pizza on the next line i'll type std two colons c out two left angle brackets for output i'll write a second line it's really good then i'll run this again you can press this icon to clear output uh oh we have a problem i like pizza it's really good all of this text is on one line what if you need the next line of text to be on well the next line when you need to move your cursor down to the next line you can follow some string of text with double left angle brackets for output std colon colon en dl that means end line and i'll do the same for my second line i'm going to save clear my output run this again yeah there we go i like pizza it's really good each line of text is on a different line another option for a new line that's better performance wise is to add a new line character within single quotes type backslash n and let's replace that here as well so i'm going to save clear my output run this again i like pizza it's really good adding a new line character does the same thing and it's better performance wise however the benefit of using endline is that endline will flush the output buffer really you can use either one but i thought that might be a nice trick to show you now you can write a comment a comment is ignored by the compiler to write a comment you use two forward slashes this is a comment comments are used for yourself for notes or for notes for another developer so if i were to run this again this comment is ignored it's not used as output or anything like that if you need a multiline comment you type forward slash asterisk wherever you need your comment to end you'll place asterisk forward slash again this is a multiline comment and you can see that all of this is ignored as well so comments are used as notes for yourself or for other developers yeah that's a quick introduction to getting started with c plus i'll post this code in the comment section down below if you would like a copy hey if you enjoyed this video please be sure to smash that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey guys i'm going to explain what variables are a variable you probably remember from middle school math class a variable is a representation of some number or value there are two steps to creating and using a variable declaration and assignment we'll begin with declaration to declare a variable we need to list the data type of what we're storing exactly in programming you can store more than just numbers you can store characters even whole sentences etc let's work with whole numbers to store a whole number we will type int for integer then we need a unique identifier for this variable for now let's just say x we're used to working with like x and y in math class right we will end the statement with a semicolon this step is declaration now to assign a variable you take the variable's name that unique identifier then we will set this equal to some number since we declared this variable as an int it will store an integer maybe like five now this variable behaves as if it was the value that it contains it will behave as if it was the number five then to display a variable we can use standard output std c out we will display x and let's see what we have there's our value five this first step is declaration the second step is assignment the nice thing about doing this in two steps is that you can later assign your variable a value if you know what value you would like to give your variable right away you can do that at the beginning of your program you could combine both of those steps int x equals 5 and that would do the same thing in cases where you don't know what value you would like to give a variable you could assign it later such as when you accept user input you don't know what the user is going to type so let's create another int y equals six then let's display whatever y is i'll add a new line let's copy this paste it okay x is five y is six we could even do something like this let's say int sum equals x plus y then we'll display whatever our sum variable is c out sum the sum of x plus y is 11. now there's different data types depending on what you need to store within a variable exactly the int data type stores a whole integer let's think of a few examples of whole integers what about an age that's typically a whole number inch age equals 21. let's think of two more examples what about a year int year equals 20 23 how about days int days equals seven the int data type can only store a whole number with days what if we assign this a value of 7.5 let me show you what happens all right i will display days all right that decimal portion is truncated when i display days and we attempt to assign 7.5 well this variable can't store that decimal so it's truncated if you need a number that includes a decimal portion there's a different data type for that and that is a double this is a number including decimal a few examples of a double would be maybe a price there's dollars and cents double price equals 10.99 what about a gpa a grade point average that includes a decimal double gpa equals 2.5 uh then maybe a temperature double temperature equals 25.1 i guess this could be in either celsius or fahrenheit then let's display maybe price price yeah and that decimal portion is not truncated much like what you see with whole integers if you need a number that includes a decimal portion use a double now we have the char data type that stores a single character type char maybe we're working with student grades i'll name this variable grade equals then to store a single character you use single quotes this student has an a two more examples what about an initial singular not initials char initial what about b so i'm going to display initial initial okay we have our single character of b now check this out what if i attempt to store more than one character i'll add c we have a warning we have an overflow in conversion from int to char so what's displayed is the last character just c so chars can only store a single character here's one more example of a char data type what if we're working with currency what type of currency will we work with char currency equals maybe a dollar sign if we're working with a different type of currency we could change this to a different symbol yeah that's the char data type it stores a single character next on our list is booleans boolean a variable that's boolean has only two states true or false to create a boolean variable you type bool then a variable name so these are applicable to anything that has two states what if somebody is a student they're either a student or not a student bull student equals true if they're not enrolled in classes or they graduated you could set this to be false think of a light switch the light switch can either be on or off you can say a light switch is boolean there's only two states true or false how about bull power is something powered on or not power equals true if it's turned off that could be false maybe we have a store and we need to mark if something is for sale or not like is it available bool for sale equals true if an item in our store isn't for sale like it's not available we could set this to be false so that's the idea behind boolean values it has two states true or false the last data type i'll cover is strings a string is technically an object that represents a sequence of text think of it as the char data type but we can store more than one character even whole sentences like a name or an address strings are provided from the standard namespace to declare a string we would type standard string then a variable name what about just name like we're storing a user's name place your text within a set of double quotes then why don't you type your first name then we will store that within this variable name then to test it let's display it standard output we will display name and there is your first name let's create a couple more examples what about a day of the week standard string day then pick a day i like friday what about food standard string food i like pizza i'll store this series of text as a string then maybe an address standard string address equals make up some address one two three fake street basically speaking a string is a type of object that represents a sequence of text such as a name a day an address etc now i'm going to show you how we can display a variable along with some text i would like to display hello then whatever your name is i will type what is known as a string literal we're literally printing a string hello follow this string of text with a variable my variable name is good then let's display it hello then whatever your first name is but you do have to pay attention to spacing after my word hello i'm going to add a space there hello bro then let's display our age so i'm going to add a new line character standard output we will display u r age years old there hello bro you are 21 years old uh make sure to pay attention to the spacing as well because it's easy to mess that up alright so those are variables we covered a few of the basic data types but there's more advanced data types once we gain a little bit more experience with this that i'll cover we have integers which store a whole number doubles which are numbers that include a decimal portion chars are single characters booleans are either true or false then strings represent a sequence of text an important note with strings is that you can include numbers but they're treated differently so yeah those are variables in c plus your assignment is to in the comment section post a integer variable a double a character boolean and a string think of some examples preferably some examples that i may have not covered already that would be good practice well yeah and that's an introduction to variables in c plus plus all right welcome back everybody in this video we're going to discuss the const keyword the const keyword specifies that a variable's value is constant it tells the compiler to prevent anything from modifying it so that it's effectively readonly here's an example let's create a program to calculate the circumference of a circle we'll first define the variables that we'll need we have double pi pi equals five 3.14159 then we have double radius pick some radius i'll pick ten then double circumference equals and here's the formula to calculate the circumference of a circle it's two times pi times radius then we will display our circumference standard output we will display circumference then i'll add maybe centimeters our circumference is 62.83 centimeters any variable we do not want to be able to be changed at all we can turn into a constant let's say that somebody goes into our program and changes pi to a different number like 420 69 well then this is going to change the result of our program we may have not realized that somebody changed the value of pi before 2069 so any variable you do not want changed you can prefix this keyword const const double pi now a common naming convention for constants is to make all of the letters uppercase so let's change pi from lowercase to all uppercase and we'll need to make that change here as well now let's try and change pi to 420 69 again then see what happens okay we have an error assignment of readonly variable pi so by including constants it adds some data security we can't normally change any value that's a constant a couple other examples of variables that you could turn into constants could be maybe the speed of light maybe you have a physics calculator so const int light speed the speed of light in meters per second is two nine nine seven nine two four five eight let's think of one more example perhaps you're working with screen resolutions we have const int width of 1920 then const int height of 1080. these may be a few examples of variables you do not want to be changed or altered at all you only want them to be readonly yeah that's a const everybody it's a keyword that will modify a variable or some value so that it's readonly and can't be changed you should use constants as often as possible only if you know that a variable is not going to be changed at all your assignment is to think of a constant and post it in the comment section hey if you're enjoying the series please be sure to smash that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey everyone i have a quick video on namespaces a namespace provides a solution for preventing name conflicts especially in larger projects each entity needs a unique name a namespace allows for identically named entities as long as the namespaces are different now what the heck does that mean suppose we have variable x x equals zero each variable needs a unique name i couldn't create a second variable named x and give this a different value if i were to compile and run this program we would run into an error read declaration of int x so each entity needs unique name but if we use namespaces then two or more entities can share the same name to create a namespace let's do so outside of the main function i will type namespace then some name for the namespace let's say first then a set of parentheses i could create a different version of x i'll give this a different value like one well this would run and compile just fine you can have different versions of the same variable as long as they're within a different namespace just for fun let's create a second namespace namespace second x equals two this is also valid so just to demonstrate a few things i'm going to display what x is if i don't explicitly state what namespace we're using we will use the local version of an entity if i display x x would be zero if i would like the version of x that is found within the first namespace i would take that entity in this case x prefix the namespace let's say first then two colons the two colons is known as the scope resolution operator i'm referring to the version of x that is found within the first namespace and that version of x has a value of one if i need the value of x found within the second namespace i would precede that entity with the second namespace followed by the scope resolution operator so that version of x is 2. so entities can have the same name as long as they're within a different namespace now one line that you may see is using namespace then the name of a namespace let's say first if we have some entity without a prefix of the namespace it's assumed that we're using the entity found within that particular namespace so if i was to display x while we're using namespace first x would be one and i don't need to add that prefix but if i need xbond within the second namespace i would still need to prefix it with second x is two if i changed using namespace to second it's implied we're using the second namespace and i don't need that prefix 2 but i still would if i need x from the first name space 1. now there's this evil line called using it namespace std for standard now the reason that people include this line is to save a little bit of typing if we're using a namespace std we don't need to include that prefix when we declare strings or we display output with c out just for example like this would still compile and run however the standard namespace has hundreds of different entities let me show you standard there's a high likelihood of a naming conflict for example we have an entity named data one alternative is that we could say using standard output that will cut down on some of the repetitions or using standard string it's a safer alternative to using namespace standard in the future i'm not going to be using namespace standard because i would like to steer people away from that but just in case you see that line you know what it's there for so in conclusion a namespace provides a solution for preventing name conflicts each entity needs a unique name and a namespace allows for identically named entities as long as the namespaces are different so those are namespaces hey if you're enjoying this series let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey everyone in this topic i'm going to explain typedefs and type aliases now typedef is a reserved keyword used to create an additional name for another data type kind of like a nickname it's a new identifier for an existing type one of the reasons that people use typedef is that it helps with readability and reduces typos here's an example in this example i'll need to include this header file include vector suppose we have this very long data type and i would like to give it a nickname an alias i would type the keyword typedef then list the original data type so we're used to strings ins doubles well here's a really complicated one and of course i don't expect anybody to know this at this level yet standard vector standard pair standard string int so this is one really long data type this could be a data type for a pair list but i don't want to have to type all of this so what i could do is give this data type an alias using this type dev keyword after the original data type i'll come up with a new name a new identifier let's say pair list that's a lot easier to write than all of this for the data type a common convention when using the typedef keyword the new identifier usually ends with underscore t for type now suppose i declare a variable of this data type standard vector standard pair standard string int let's say the name is pair list in place of using the original data type we can use the new identifier pair list underscore t so that's one of the main benefits of using the typedef keyword we can give a new identifier to an existing data type it helps with code readability and helps reduce typos this data type is way beyond our level of understanding right now let's try some simple examples i'll turn this line into a comment then get rid of that let's create a typedef for standard strings type def then we list the original data type standard string in place of using standard string as the data type i'll create a new identifier for this data type as maybe just text text underscore t if i need to create a string i could use this new identifier in place of saying standard string then maybe first name i can replace the data type with the new identifier if i choose to text t and i'll set my first name equal to whatever my first name is feel free to set it to your own first name and this variable behaves exactly like a string so let's display it standard output first name and then we should have our first name yeah there we are okay now let's try this with an integer type def we list the old data type int let's create an identifier for int as number that's more descriptive underscore t although it's more to write technically in place of using the int data type i could use number t and this is technically an integer let's say age then make up some age standard output i will display my age then i will add a new line yep we have our first name and our age now typedef has largely been replaced with the using keyword that's because the using keyword works better with templates which is a topic for another video so in place of using typedef i recommend using the using keyword so i'm going to turn these lines into comments now if we were to use the using keyword we would type using then the new data type so let's say text t equals the old data type standard string then let's do that with number using the new identifier number t equals int and that would work the same we have our first name and our age the using keyword is more popular than typedef nowadays just because it's more suitable for templates and like i said that's a topic for another video all right everybody that is the typedef keyword and type aliases typedef along with the using keyword they're used to create an additional name an alias or nickname for another data type it's a new identifier for an existing data type it helps with readability and it reduces typos however you should really only be using the typedef and using keywords when there is a clear benefit so yeah that is typedefs and type aliases your assignment is to post a typedef in the comments section down below and well yeah those are defs and type aliases in c plus all right everybody welcome we are going to discuss arithmetic operators arithmetic operators return the result of a specific arithmetic operation such as addition subtraction multiplication and division let's say we have 20 students int students equals 20. if a new student joins our class we would like to add one student well if we're working with the variable we could say students equals whatever students is plus one then we could display this standard output i will display students the current number of students that we have are 21. there is a shorthand way of writing this too in place of saying students equal students plus one we could shorten this to students plus equals one that would do the same thing 21 if we need to add two students this would be students equal students plus two or students plus equals two then we have 22 students if you need to add one to a variable you could also use the increment operator this is another option and the preferred way if you only need to add one you would say students plus plus we now have 21 students you tend to see this in a lot of loops which we'll cover later okay now we have subtraction students equals students minus one there are now 19 students we could shorten this to students minus equals 1 there are 19 students if you need to subtract 2 we could say either students equal students minus 2 or students minus equals 2. that would do the same thing there are 18 students another option is the decrement operator if you need to decrement a variable by one you would say students minus minus this only subtracts one from a variable there are 19 students so that's subtraction to use multiplication you use an asterisk i'm going to double the amount of students that we have students equals students times 2. there are 40 students or we could shorten this to students times equals 2. and again there are 40 students for division you use a forward slash i'm going to divide our class in half students equal students divided by two there are 10 students the shorthand way is students divided by equals 2. there are 10 students now check this out we have 20 students what if i divide students by 3 we're working with an int variable so this variable can't hold any decimal portion 20 divided by 3 that is 6. so any decimal portion is lost it's truncated but if we change students to be a double well then that decimal portion is retained 6.6 repeating students if you need the remainder of any division you can use the modulus operator let's create a new variable int remainder equals students modulus 2. we'll divide our group of 20 students into groups of two then i'll display the remainder okay 20 divides by two evenly so there's no remainder but what if we divide students by three and get the remainder our class of students is being divided into groups of three for maybe like a project but 20 doesn't divide by three evenly therefore our remainder is two there will be six groups of three students and one group of two students now using the modulus operator is a great way to find out if a number is even or odd take some value or variable you would like to check modulus 2. if that number divides by 2 evenly where the remainder is 0 well it's even if the remainder is 1 well then it's an odd number 21 doesn't divide by two evenly so that is the modulus operator it gives you the remainder of any division these arithmetic operators have an order of precedence we resolve any arithmetic operations that are first within parentheses then multiplication and division then lastly addition and subtraction perhaps we have this formula students equals 6 minus 5 plus 4 times 3 divided by 2. so what do we solve first in this equation we would check any parentheses first which there aren't any of then we resolve any multiplication and division so let's go through this so we have some multiplication here we would resolve four times three first that is twelve then we have some division twelve divided by two is six then any addition and subtraction six minus five is one one plus six is seven and let's check to see if that's right so students should be seven yep students is seven now you can force operator precedence by surrounding some part of your equation with parentheses i'll surround this part of the equation with the set of parentheses the new result is negative seven well yeah everybody those are some basic arithmetic operators they return the result of a specific arithmetic operation hey if you would like a copy of this code i'll post this in the comments section down below and pin it to the top and well yeah those are some basic arithmetic operators in c plus plus hey what's going on everybody in this video i'm going to explain very basic type conversion type conversion is the conversion of a value of one data type to another two ways in which we can do this are implicit and explicit implicit is done automatically if done explicitly we precede a value with the new data type within a set of parentheses you list the new data type put it before a variable or a value let's perform an implicit cast suppose we have variable int x i will assign x the value 3.14 integers can only hold a whole number if i were to display x standard output x well the value is 3. we truncated the decimal portion and implicitly converted this number into an integer what if x was of the double data type double x equals 3.14 well then we would retain that decimal portion what would happen if i cast 3.14 as an integer then assigned it to a double variable before the value add a set of parentheses then the new data type i will convert 3.14 to an integer then store it within the stubble x x now equals three it's a whole integer that is one example of implicit and explicit type conversion here's a few other examples i have character x equals some number like 100 if i were to display what x was standard output x well we will implicitly cast this number 100 as a character will convert it using the ascii table to whatever its equivalent is the number 100 converted to a character is the letter d let's try an explicit cast i will display the number 100 explicitly cast to a character and that value is the letter d as output how is this useful suppose we have an online exam we have to give the user a score how many questions did they get right divided by how many questions were total let's write something like this int correct equals maybe eight the user has eight questions that are right and questions equals 10. there are 10 total questions i need to calculate the score as a percentage we could say double score equals correct divided by questions times 100 then let's display whatever the result is standard output score then i'll add a percent sign to the end 8 divided by 10 is 0.8 right times 100 that should give us 80 uh we have zero percent well that's because we're using integer division questions is of the int data type when we're dividing 8 by 10 we're truncating that decimal portion we're getting rid of it then multiplying whatever remains by 100 i'm going to explicitly cast questions as a double of the double data type and we should retain that decimal portion yeah there we go 80 where you'll use type conversion it really varies but you should be aware that you can do it such as when using integer division so yeah that's type conversion in c plus plus hey if you're enjoying this series let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro all right let's get started everybody in this video i'm going to show you how we can accept some user input in c plus plus we're familiar with c out followed by the insertion operator which is two left angle brackets well to accept some input we would type c in for character input followed by the extraction operator which is two right angle brackets here's a demonstration let's ask a user for their name i'll create a string variable standard string the name will be well name then i'll create a prompt which will ask the user what their name is standard output insertion operator what's your name then to accept some user input we would type standard cn for character input extraction operator then where would we like to store the user input let's store it within our variable name at the end of our program let's display what the user's name is standard output insertion operator hello name okay we're going to have one problem though if we're using vs code as our text editor we need to begin using the terminal tab previously we've been using output so i can't actually type in anything to this because it's well for output if you're using vs code this is what we'll need to do if you're not you can skip this step we're going to go to file preferences settings look up code runner then we are looking for run in terminal which is right about here check that close this tab let's stop this from running and we'll run it again okay here we go what's your name i'll type in my first name hit enter hello bro or whatever your first name was this time let's ask a user for what their age is i'll store this within a variable named age int age standard output what's your age standard input extraction operator age standard output insertion operator you are age years old and i think we'll need some new line characters right about here just one okay this should work let's try it what's your name i'll type in my first name hit enter what's your age i'll make up an age i like to think that i'm 21 still hit enter hello bro you are 21 years old so that's how to accept some user input you can use cn for character input but there's just one problem though if you type in a string that has spaces well once we hit a space we stop reading that string this time let's ask a user to type in their full name okay type in your first name and your last name hit enter what's your full name bro code what's your age hello bro you are zero years old if we need to read a string that could contain spaces there's a function that we can use to help us with that that is the get line function standard get line add a set of parentheses within the parentheses we will type standard c in then comma our variable name now we should be able to type in a string including any spaces what's your full name type in your own first name and last name hit enter what's your age i'll type in 21 hello bro code you are 21 years old if you need to accept a string that includes any white spaces you're better off using the getline function and if you forget i'll post this in the comments section so you can always take a look at it if you don't remember okay there's just one issue with this though i'm going to move the second question above the first let's take a look to see what happens what's your age 21 what's your full name hello you are 21 years old here's the issue if we accept some user input with cn followed by get line well in our input buffer there's a new line character and we don't pick up that new line character when we reach the getline function it accepts the newline character that's still within the buffer so to prevent that from happening there's one change that we can make to the getline function after cn add this extraction operator standard ws for any white spaces this portion will eliminate any new line characters or any white spaces before any user input so let's try this again what's your age i'll type in 21 type in your full name and there we go hello bro code you are 21 years old so yeah everybody that's how to accept some user input basically you can just use cn followed by the extraction operator but if you need a string that could include spaces i recommend using the getline function so yeah that's how to accept some user input in c plus plus if you would like a copy of all this code i'll post this in the comments section down below and well yeah that's how to accept some user input in c plus hey guys in this video i'm going to show you eight useful math related functions in c plus plus let's begin by creating three variables double x and i will set this to be three double y that will be four then double z we will declare this but not yet assign it the first useful math related function is the max function which will return the greater of two values or variables i'll assign the result within z z equals standard max parentheses within the parentheses add two values or variables i'll compare x and y then let's display the result standard output i would like to display whatever z is the greater number between three and four as well you guessed it four alternatively there's the min function z equals standard min let's compare x then y so the minimum between these two values would be three so that's max and min now the rest of these functions are found within the c math header file at the top of our file let's include c math we have the pow function to raise a base to a given power z equals pow for power let's raise 2 to the power of 3 z would be 8 two to the power of four would be sixteen that's the power function then we have square root z equals sqrt what's the square root of nine well the square root of 9 is 3 then we have absolute value z equals abs if you place a negative number within the absolute value function it will give you the positive version of that number how far it is away from zero so negative three the absolute value of negative three would be three that is the absolute value function next we have the round function let's change x to 3.14 z equals round let's round x 3.14 rounded would be 3. if you need to round up there's a ceiling function z equals seal seal means ceiling let's round x x rounded up is four alternatively there's the floor function which will always round down let's change x to 3.99 to test it z equals floor x x rounded down is three so yeah everybody that is a super quick video on a few useful math related functions if you head to this url c plus plus dot com slash reference slash c math there's a lot more useful math functions that you may be interested in but we just covered a few of the basics in the next topic we're going to create a practice program to find the hypotenuse of a right triangle so yeah those are a few useful math related functions in c plus plus okay everybody this is going to be a practice project to calculate the hypotenuse of a right triangle which we can find with this formula c equals the square root of a squared plus b squared we'll begin by declaring our variables double a double b double c make sure you include c math as well because we'll be using the power function as well as the square root function at this point we'll accept some user input for sides a and b standard output will create a prompt enter side a standard input a then we'll need side b standard output enter side b standard input b we can handle this formula step by step we could reassign a equal to power function a to the power of two b equals power function b to the power of two side c equals the square root of a plus b then at the end we will display whatever side c is standard output side c c okay let's try this enter side a i'll type in three side b will be four side c is five we could shorten this code too we could say the square root of a to the power of two plus b to the power of two then we no longer need these two lines that's another way of writing it in less lines of code let's try this again this time side a will be four side b will be five side c is six point four so yeah everybody that's a simple practice project just to get us used to accepting user input as well as some math related functions if you would like a copy of this program i'll post this in the comments section down below and well yeah that's a simple practice project in c plus all right guys we are on if statements with an if statement you do something if a condition you set is true if not then don't do it it's as simple as that we'll ask a user what their age is if their age is greater than or equal to 18 they'll be allowed into our site if they're under 18 well we won't let them in let's declare variable age int age then we'll create a prompt standard output enter your age standard input age okay this is how to write an if statement you type if then a set of parentheses then a set of curly braces if some condition within the parentheses is true you perform some subset of code we are going to check if age is greater than or equal to 18. greater than or equal to is a comparison operator there's other comparison operators such as less than or equals to less than greater than if you need to compare if two values are equal you use two equal signs you don't want to say equals because then you're setting age equal to 18 equals is the assignment operator so let's check to see if age is greater than or equal to 18. then we'll print a message standard output welcome to the site okay let's try this enter your age let's say that i'm 12. well it doesn't do anything since this condition evaluated to be false we skip over this body of code if it were true then we execute it this time my age is 21 i hit enter welcome to the site if you would rather do something else if a condition is false you can use an else statement an else statement you will place at the end there is no condition else we will print standard output you are not old enough to enter okay let's try this again and to your age i'll say that i'm 12 you are not old enough to enter that's an if statement if some condition is true you do something if not you can do something else or nothing at all there are more conditions you can check by using an else if statement we can check another condition by adding else if if this condition is false check this else if condition uh let's check to see if age is less than zero that means somebody hasn't been born yet you haven't been born yet okay now check this out let's say that my age is negative 10 then i hit enter you haven't been born yet since this condition was false we skipped this section of code then we check the else if statement since this condition was true we execute this body of code then skip over the else statement let's add one more else if statement else if age is greater than or equal to 100 standard output you are too old to enter this site okay enter your age i am 120 years old i hit enter welcome to the site we check these conditions one by one starting from the top we stated that our age was 120 years old even though we were expecting to execute this body of code we instead executed this body of code within the if statement that's because our age was technically still greater than or equal to 18. so the order of your if and else if statements does matter it makes a difference if we need to execute this body of code if somebody's age is greater than or equal to 100 well then we should probably move that to the top then turn it into an if statement else if age is greater than or equal to 18 we will display this message let's try this one more time and to your age i am 120 years old i hit enter you are too old to enter the site so yeah that's an if statement you do something if a condition is true if not then you don't do it if you would rather do something else you can use an else statement if there's other conditions you would like to check before reaching the else statement you can use an else if statement and there's really no limit to these if you would like a copy of this code i'll post this in the comments section down below and well yeah those are if statements in c plus all right everybody today we're going to discuss switches a switch is an alternative to using many else if statements it compares one value against many matching cases here's an example of what you don't want to do i have this program we have variable month month is of the integer data type the user will type in a number 1 through 12 to represent the month if month is equal to 1 it is january else if month is equal to 2 it is february else if month is three four five so on and so forth this is what you don't want to do because it's inefficient it's how the game yandere simulator was created if you know what that is a better solution would be to use a switch this is how to write one i'm going to delete all of this we will type switch parentheses curly braces what value would we like to examine against matching cases let's examine our month to write a case we would type case then the value let's check to see if month is equal to one so case one colon on the next line what we want to do if month is equal to one let's display a message standard output it is january at the end of this case add break to break out of the switch so that is case one let's work on case two so case two it is february i think the rest is selfexplanatory i'll speed up the footage we have our 12 cases 1 through 12. each case corresponding with a month of the year let's run this enter the month let's say that the month is 4 for april it is april one more time the month is 12 it is december so a switch is an alternative to using many else if statements it's more efficient and easier to read if there are no matching cases we can execute a default case type default then what would we like to do standard output let's say please enter in only numbers 1 through 12. enter the month uh let's type negative 42. please enter in only numbers 1 through 12. so the default case is kind of like the else statement if there are no matching cases we execute whatever's within the default case let's try one more example this time we'll have a user enter in a character a letter grade will display a custom message depending on what grade they have char grid standard output what letter grade standard input grade then we'll create a switch switch parentheses curly braces we're examining our letter grade against matching cases the first case will be the character a what will we display if somebody receives an a standard output you did great then break case b standard output you did good then break case c standard output you did okay break case d standard output you did not do good break case f standard output you failed break then let's add a default case please only enter in a letter grade a through f let's try it what letter grade i received in a you did great what letter grade f you failed then let's test our default case what letter grid pizza please only enter in a letter grade a through f so yeah that's a switch everybody it's an alternative to using many else if statements it's more efficient and easier to read your assignment is to create a switch and post it in the comments section and well yeah those are switches in c plus hey guys in this video we're going to create a simple calculator program now that we know how switches work this will be a very simple program let's begin by declaring our variables at the top we'll need a character for an operator we'll name this op the operator will be either addition subtraction multiplication or division double num1 double num2 double result this next part isn't necessary but i'm just going to add one line of text when we begin the program i'll add a bunch of asterisks let's say calculator then i'll add a new line to the end wherever my program ends i will create another line of asterisks and i can get rid of that new line character our code for our program will be within these two lines of output let's ask the user what operand they would like standard output enter either addition subtraction multiplication or division standard input will store the response within the variable op standard output enter number one standard input num1 let's copy these two lines paste them change one here and here now we need a switch switch parentheses curly braces we're examining our operator against matching cases the first case will be addition make sure the operand is within single quotes because it's a character if the user wants to add two numbers we'll take result equals num1 plus num2 display the result standard output will display the word result followed by the variable result then i'll add a new line to the end then break then we need a case for subtraction case subtraction num1 minus num2 multiplication case multiplication num1 times num2 then division case division num1 divided by num2 what if somebody doesn't type in a valid operator let's add a default case default standard output that wasn't a valid response then break i'll add a new line too okay we are good to go let's save run this calculator let's add two numbers enter number one one point two three enter number two three point one four the result is 4.37 let's run this again we will subtract two numbers 1.23 minus 3.14 is negative 1.91 let's multiply two numbers 1.23 times 3.14 that's 3.8622 now we will divide two numbers 1.23 divided by 3.14 that is 0.39172 let's type in an operator that's not valid how about a w enter number one 1.23 3.14 that wasn't a valid response actually i think it would be better if we said that wasn't a valid operator all right everybody that is a simple calculator program in c plus using a switch if you would like a copy of this code i'll post this in the comment section down below if you're enjoying this series please let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro okay guys we are talking about the ternary operator which is represented by a question mark followed by a colon it's a replacement to using an if else statement you write a condition then add a question mark kind of like you're asking a question is something true if that condition is true we can do some code if it's false we do some other code here's an example we have a grade my grade is 75. if grade is greater than or equal to 60 i'll output you pass else will output you fail my grade is 75 therefore i pass another way of writing this is to use the ternary operator first we write a condition so let's get rid of this if statement after our condition we'll add a question mark now parentheses are optional then we write some expression standard output you pass we do this if our condition is true colon what will we do if that condition is false well let's use whatever's within our else statement and this would work the same if my grade is 75 you pass if it's 50 you fail let's come up with a few other examples let's check to see if a number is even or odd int number equals what about nine we write a condition we'll check if number modulus two remember modulus gives you the remainder of any division does number divide by two evenly so this returns a one or a zero if number modulus two is equal to 1 question mark then let's display odd if it's false we'll display standard output even okay odd let's change number to eight now it's even you don't necessarily need equals one or equal zero the number 1 does correspond to true and 0 corresponds to false so you could write it like this too 8 divides by 2 evenly that's even if it's 9 that is odd okay last example let's examine a boolean variable bull how about hungry is somebody hungry i'll set this to be true let's write our condition hungry equals true question mark now if you're examining to see if a boolean variable is true you don't necessarily need equals true you can just say that boolean variable hungry question mark like you're asking a question so if hungry is true we will do this standard output you are hungry colon what will we do if it's false standard output you are full hungry is set to true you are hungry if it were false you are full if we're displaying output there's a couple different ways in which we could write this it's up to you how you want to handle it so another way of writing the same code would be standard output then within a set of parentheses then we could use our canary operator hungry question mark you are hungry else you are full this would work as well let's just check that hungry is set to false you are full let's set it to true you are hungry so yeah that's the ternary operator everybody it's a question mark followed by a colon you write a condition as if you're asking a question if that condition is true you do some expression if not you do some other expression it's a replacement to an if else statement your assignment is to post a use of the trinary operator in the comments section and well yeah that's the ternary operator in c plus plus hey guys in this video i'm going to discuss the and or as well as not logical operators we'll begin with and the and logical operator will check to see if two conditions are true here's an example we'll ask a user what the temperature is int temp short for temperature standard output this will be a prompt enter the temperature standard input temp with the andological operator we check to see if two or more conditions are true let's see if our temperature falls within a certain range if condition then a set of curly braces we'll check to see if our temperature is above zero if temp is above zero and temp is less than let's say 30. in order for us to execute this if statement both of these conditions must be true this condition and this condition must be true if one of them is false we skip over this if statement so if our temperature falls within that range the temperature is good else standard output the temperature is bad okay let's try it enter the temperature uh let's say it's 25 degrees this will be in celsius the temperature is good let's try it again uh what about negative 100 degrees celsius uh the temperature is bad yeah no kidding one more time uh positive 100 degrees celsius the temperature is bad so with the and logical operator we check to see if two or more conditions are true there's another way of writing the same program too we can use the or logical operator which is represented by two vertical bars it checks to see if at least one of two conditions are true if temp is less than or equal to zero or temp is greater than or equal to 30. the temperature is bad else the temperature is good in order for us to execute this if statement only one condition has to be true if both of them are false we don't do anything what's the temperature the temperature is 25 that's within that range the temperature is good one more time enter the temperature it is negative 100 degrees celsius the temperature is bad all right so that's the and as well as the or logical operator there's one more the not logical operator which is an exclamation point it reverses the logical state of its operand meaning if a condition is true it becomes false if it's originally false it becomes true let's create another variable this will be a boolean sunny sunny can be true or false i'll write another if statement if sunny is equal to true now if you're examining to see if a boolean variable is true you don't necessarily need to say equals true you could just type the name of the boolean variable if sunny if sunny is true we'll display a message standard output it is sunny outside else standard output it is cloudy outside okay one more time enter the temperature it's 20 degrees celsius i should probably add some new line characters there enter the temperature it's 25 degrees celsius the temperature is good it is sunny outside if we use the not logical operator we can precede a condition with an exclamation point we're checking to see if it's not sunny that means we would want to change our output it is cloudy outside else it is sunny outside let's change sunny to be false enter the temperature it is 50 degrees celsius the temperature is bad it is cloudy outside so yeah everybody those are logical operators and or not your assignment is to use either the and or or otherwise not logical operator then post it in the comment section down below whatever you wrote so yeah those are logical operators in c plus okay guys in this video we're going to create a temperature conversion program to convert from fahrenheit to celsius or celsius to fahrenheit at the top of our program let's declare our variables double temp temp is short for temperature then char unit will the user select celsius or fahrenheit now with my programs i like to add a title at the beginning standard output temperature conversion it's totally not necessary but it's something that i like to do then i'll add another line of output at the end of my program to show the user that the program is over i'll just add a bunch of asterisks like i said totally not necessary but it's something i just like to do i will display a couple lines of output f equals fair and height i can never spell fahrenheit right i think that's okay i'll add a new line standard output c equals celsius add a new line standard output what unit would you like to convert to standard input unit the user will hopefully type in f or c depending on what they want to convert to let's check to see if the user types in f first if unit is equal to the character f that's a capital left but you know maybe the user types in lowercase f i'll add an or conditional operator or unit is equal to a lowercase f that's also a valid response if the user would like to convert a temperature to fahrenheit these are the steps we can do standard output enter the temperature in celsius input temp to store the temperature to convert our temperature from celsius to fahrenheit we can assign temp equal to now here's the formula 1.8 times our temp plus 32 then we will display the temperature standard output temperature is temp degrees fahrenheit then i'll add a new line if the user would like to convert to celsius i'll add an else if statement else if unit is equal to the character capital c or unit is equal to the character lowercase c we can copy these two lines of code and reuse them we'll just repurpose them enter the temperature in fahrenheit here is the formula to convert from fahrenheit to celsius temp equals our current temperature minus 32 divided by 1.8 then let's display our temperature i'll copy this line of code paste it change fahrenheit to celsius now what if the user doesn't type in a valid response else standard output please enter in only c or f add a new line and that should be everything let's try this temperature conversion program what unit would you like to convert to i would like to convert to fahrenheit enter the temperature in celsius so what's zero degrees celsius converted to fahrenheit that is 32 degrees fahrenheit let's go again let's convert to celsius enter the temperature in fahrenheit what's 100 degrees in celsius 37.7 degrees celsius let's type in a response that's not valid uh i would like to convert to pizza please enter in only c or f all right everybody that is a program to convert from fahrenheit to celsius or vice versa i thought we could use some practice using conditional operators as well as if statements if you would like a copy of this code i'll post this in the comment section down below and well yeah that's a temperature conversion program in c plus plus hey what's going on everybody so in this video i'm going to explain some useful string methods that you might be interested in let's begin by creating a variable named name standard string name we'll accept some user input we'll need a prompt standard output enter your name a user's name may contain spaces we're better off using the getline function standard getline standard cn name the first useful method is the length method type your string name follow it with dot length parenthesis the length method will give you the length of a string let's write this within an if statement if name dot length method is greater than 12 we'll print a message such as your name can't be over 12 characters long standard output your name can't be over 12 characters else will print a different message standard output welcome the user's name enter your name type in your full name welcome whatever your name is okay now what if our name is over 12 characters type in your full name then just add a bunch of characters your name can't be over 12 characters that is the builtin length method of strings you type a string follow it with dot length parenthesis wherever you invoke this method in that spot you will return the length of that string in characters the empty method will return if a string is empty or not type your string name dot empty parenthesis this returns a boolean value if name is empty will display a message you didn't enter your name else hello whatever your name is okay i'm just going to hit enter you didn't enter your name but if i do enter my name it works normally hello whatever your name is that is the empty method of strings you'll check to see if a string is empty or not a useful case of this is to check to see if somebody enters in some user input another is clear name dot clear then let's display our name standard output hello name enter your name type in your first name and last name hello and we don't have a name anymore because that name has been cleared so that is the clear method we can append a string to another string after my name i will use append parenthesis within the parentheses we can add a string to the end of another string i'll add at gmail.com standard output your username is now name enter your name your username is yourname with at gmail.com appended to it that is the append method we can return a character at a given position within a string standard output type your string name dot at parentheses so the first character in a string has an index of zero i'll display whatever that character is enter your name so the first character in my string is a capital b the character at index one well that would be r we can insert a character at a given position type your string follow it with insert there will be two arguments we'll list within the parentheses and index so the beginning of our string would have an index of zero comma then what would we like to insert i'll insert the at sign at the beginning of my name then let's display our name okay so we now have the at sign inserted at the beginning of our string or you could pick a different position the index of one would be the second character technically so yeah pick a position then you can insert a string now we can find a certain character i would like to find if there's any spaces within my name name dot find then place a character i'll look for any white spaces this method will give me the position of the first space type in your first name and last name the index of the first white space within my name has an index of three the first character is always zero zero one two three okay then lastly erase name dot erase we can erase a portion of a string we'll need a beginning index and an ending index i'll eliminate the first three characters then we will display our name enter your name okay and that's what's left of my name i deleted the first three characters the first number is the beginning index the second is the ending index it's not inclusive though so yeah those are a few helpful string methods if you would like to know more head to the string class on the cplusplus.com website and there's a fairly extensive list hey if you're enjoying the series let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey everybody in this video i'm going to explain while loops a while loop is much like an if statement except we can repeat some code potentially an infinite amount of times here's an example of where a while loop would be useful let's say that we'll have a user enter in their name standard string name at first i'll use an if statement if name i'll check to see if the name is empty did the user actually type in something if name is empty we'll create a prompt standard output enter your name standard getline standard input name once we exit the if statement we'll display a message involving the user's name standard output hello name and to your name i'm just going to hit enter and not enter in anything hello and i don't have a name what if we need to force the user to do something in order to continue with the rest of the program well we could change this if statement to a while loop if this condition remains true we will execute this code a potentially infinite amount of times once we reach the end of this code block we check the condition again if it's still true we repeat the code again enter your name i'm going to hit enter enter your name no enter your name no enter your name no so i can't actually continue with the rest of my program until i type in something i'll type in my full name hit enter hello whatever your name is basically speaking a while loop is kind of like an if statement except it can repeat some code infinitely as long as this condition remains true we check this condition once when we enter the while loop then any time we finish the while loop we check the condition again if the condition is false we exit then continue on with the rest of the program you do want some way to exit the while loop let's write a condition that we won't be able to change at all while one is equal to one there's no way we can escape this while loop so this is what's known as an infinite loop i'll display a message help i'm stuck in an infinite loop then when i run this yeah we're stuck in an infinite loop and we can't actually move on or do anything so yeah that's basically a while loop everybody while some condition that you set remains true you will continue to execute some code a great use of a while loop is that you can force a user to do something in order to continue with the rest of the code your assignment is to use a while loop then post it in the comments section down below and well yeah those are while loops in c plus plus all right everybody do while loops a do while loop it does some block of code first and then you repeat that block of code if a condition is true here's an example let's write a program that will ask a user to enter in a positive number first we'll use a while loop that i'll demonstrate how a dowhile loop would actually be better for the situation we have an integer number int number i'll write a while loop while number is less than zero we will prompt the user to enter in a positive number enter a positive number okay standard input number outside of the while loop at the end of our program let's display the number standard output the number is number so this isn't going to work normally here's why let's run this the number is zero so this is what's going on we've declared our number but have not assigned a value quite yet when we reach the while loop we check the condition if the condition is true we execute this block of code since we've declared an integer variable but have not assigned it a value it's defaulting to just zero zero is not less than 0 so this condition is false that means we skip the while loop and continue on another way in which we could write this but it's not the best solution is that we could copy what's within this block of code then run it once if number is still less than zero we would then execute this block of code repeatedly let's try this again okay enter a positive number one two three the number is one two three let's type in a negative number negative one enter a positive number negative one enter a positive number negative one so i can't actually continue until i enter in a positive number you know this does work but there's a much better way of writing this because you know we're repeating at least two lines of code when we really don't need to we need to run this block of code once and then repeat it if this condition is true well you know what would be great for that a do while loop let's eliminate these two lines of code to create a do while loop we will move this condition to the end while then our condition preceding the left curly brace write do do this code once and then check the condition make sure you have a semicolon at the end let's try it again enter a positive number i'm just going to type in a negative number negative one nope negative one nope how about a positive number one two three the number is one two three so that's a do while loop you do some block of code first then you repeat it again if the condition is true it's an optional way to repeat some code one good use of a do while loop that comes to mind maybe we're playing a game we would like to run the game once at the end of the game a user can choose if they would like to play again based on the user's input if they would like to play again we can run the game one more time repeatedly so that's a do while loop everybody i'll post this code in the comments section down below and well yeah that's a do while loop in c plus alright guys in this video i'm going to explain for loops a for loop is a loop that will execute a block of code a specified amount of times to create a for loop we type four parentheses curly braces within the for loop there are up to three statements that we can add the first is that we can create an index a sort of counter int index i'll set the sequel to be we'll start at one then finish the statement with a semicolon now what a lot of people do instead of saying index they'll just shorten this to i the second statement is a stopping condition let's count up to three i'll continue this as long as i is less than or equal to three then semicolon to finish that statement the third statement is that we can increment or decrement our counter our index i'll increment my index by one by saying i plus plus okay let's repeat something three times standard output how about happy new year happy new year this code should be repeated three times happy new year happy new year happy new year i should probably add a new line now let's try this five times we'll begin i at one we'll continue this as long as i is less than or equal to five okay one two three four five that's it this time let's count up to 10 then display happy new year once we exit out of the for loop i'll move this line to outside of the for loop i'll set i to be 1. we'll continue this as long as i is less than or equal to 10. during each iteration of the for loop i will display whatever i is standard output i then i'll add a new line okay here we go we're starting at one then we're counting up to ten then we escape the for loop once we escape the for loop then we print happy new year when you increment or decrement your counter you can skip iterations let's increase i by 2 after each iteration i plus equals 2. now we're counting up by twos one three five seven nine happy new year we can even set our index to be a different number let's begin at zero we're still counting up by twos zero two four six eight happy new year we could even increment i by three zero three six nine happy new year or we could decrement and go backwards i minus minus this time we will begin at ten then continue as long as i is less than or equal to zero so this would be a countdown ten nine eight seven six five four three two one zero happy new year okay let's decrement i by two after each iteration i minus equals two ten eight six four two zero happy new year so yeah everybody that's a for loop there's a lot of overlap where you could use either a while loop or a for loop for loops tend to be better in situations where you only need to repeat code a certain amount of times your assignment is to post a use of the for loop in the comment section down below and well yeah those are for loops in c plus plus hey everybody so in this video i'm going to explain the break and the continue keywords the break keyword will break out of a loop another place where you see this is a switch within a switch statement continue we'll skip the current iteration here's an example let's create a for loop that will count up to the number 20. i'll set i equal to b1 i will continue this as long as i is less than or equal to 20 then increment i by 1 standard output i'll display whatever i is then i'll add a new line new line then let's take a look so we have the numbers 1 through 20. i would like to skip the number 13 because 13 is considered an unlucky number i know it's a weird example what i'll do is use an if statement within my for loop if i is equal to 13 first we'll break then see what happens if we break where i equals 13 then we have the numbers one through twelve once we hit 13 we break out of the loop we do not finish the rest of the iterations if we replace break with continue this is instead what happens we have the numbers 1 through 20 but the number 13 isn't there so using the continue keyword we skip the current iteration so yeah that's the break and the continue keywords these keywords are available if you need them but where you'll use them it really depends but just so you know they exist and that is the break and the continue keywords in c plus all right guys we are on nested loops a nested loop is just a loop that's inside of another loop it doesn't matter what kind of loop you're working with it can be a while loop or a forward loop or whatever here's an example we'll create a loop to count the numbers 1 through 10. we'll count to 10 three times so let's create a basic loop for now and i i'll set this equal to b 1 the condition will be i is less than or equal to 10 then i will increment i by one during each iteration i will display whatever i is then i'll add a space there this loop will count up to 10 just like that so now i would like to count up to 10 three times well i can stick this loop in another loop so let's create the outer loop 4 and i i'll set this equal to b1 i'll continue this as long as i is less than or equal to 3 then increment i by one so i'm going to take this loop and stick it within the curly braces of the outer for loop however you don't want these loops to have the same index a common naming convention for the inner loop is to use j as the counting index j j j j okay let's take a look okay now we count up to 10 three times but what i think i'm gonna do is that every time we exit the for loop the inner for loop i'll just print a new line character standard output new line yeah that's much better so yeah a nested loop is just a loop inside of another loop just as a practice project let's create a program that will print a rectangle made out of symbols we'll let a user specify how many rows and columns we'll use our nested loop that we created previously so we have int rows int columns then char symbol we're gonna ask for some user input we'll need some prompts standard output how many rows standard input rows let's copy this paste it change rows to columns then enter a symbol to use standard input symbol we'll continue printing rows as long as i is less than or equal to rows whatever we typed in we don't want any more rows than what the user wants the inner loop is going to be in charge of the columns j is less than or equal to columns in place of printing j let's print our symbol whatever the user picked and we do not need to separate these with any spaces all right let's try this how many rows what about three rows then six columns enter a symbol to use what about the at sign and there's our rectangle there's three rows and six columns let's try it one last time how about four rows and five columns i'll use a dollar sign okay we have four rows one two three four five columns one two three four five so yeah everybody that's a nested loop it's a loop that's inside of another loop when you'll use these it really depends on the situation i thought this would be a fun practice project if you would like a copy of this code i'll post this in the comments section down below and well yeah those are nested loops in c plus hey this is bro from the future before you begin this topic to work with random numbers you may need to include this header file c time hey everybody in this video i'm going to show you how we can generate some random numbers just so you know these are pseudorandom numbers they're not truly random but they're close maybe if you need to roll a sixsided dice for a game well then this would work perfect to generate some random numbers we'll need to initialize the random number generator by typing s rand add a set of parentheses semicolon within the s rand function we'll need a seed what programmers typically do is that they'll use the current calendar time as a seed within the parentheses type time parentheses again then pass in null i'll store the first random number within a variable int num equals to generate a random number we invoke the rand function then i'll display this let's take a look to see what we have standard output num okay the random number that we have is 3231. using the rand function this will generate a random number between 0 and 32 767 but we don't necessarily need a number that large i just need to roll a six sided dice well what we're going to do is follow this with modulus then the range of numbers we would like if i'm rolling a six sided dice i'll type modulus 6. modulus gives you the remainder of any division so take whatever number we roll divide it by 6 take the remainder and that's our number but there's one issue with this we have 5 2 and 0. technically the range of numbers is currently zero through five if we need one through six what we can do is add one plus one this should give us a random number between one and six there it is six so i tend to play a lot of dungeons and dragons there's polyhedral dice one die that we commonly roll is a 20sided dice so if i would need a random number between 1 and 20 i would say rand function modulus 20. my random number is 1. wow that's surprisingly low then i have a 14. maybe you need a random number between 1 and 100 rand function modulus 100 my random number between 1 and 100 is 67. now i need to roll three sixsided dice i'm going to create three variables let's name this num1 rand function modulus 6 plus 1. then let's copy this paste it twice we have num1 num2 num3 let's display num1 i'll add a new line then do this two more times for num two and num three so our three dice that we're rolling are five two two then again 3 1 4. yeah everybody that's how to generate some pseudo random numbers they're not truly random but they're close if you have a simple game you're working on this would work perfect if you would like a copy of this code i'll post this in the comments section down below and well yeah that's how to generate some random numbers in c plus plus hey everybody in this topic we're going to create a random event generator using random numbers and a switch this might be useful maybe if you're writing a game you need some random event to occur like random monster show up or the weather changes anything like that we'll be working with random numbers you may need to include this header file include c time because we need access to the time function to work with random numbers we'll need to generate a seed srand function pass in time pass in zero this function will use the current time as a seed to generate random numbers we'll create a local variable to store our random number int rand num equals use the rand function modulus then what's the range of numbers you would like i would like the numbers one through five but this will give us zero through four so i'm going to add one to the end my integer randomnum will be a random number between 1 and 5. i'm going to create a switch to examine this random number against many matching cases so we have case 1 through five if the random number is one what would you like to do exactly so in this program i think we're going to give away prizes like it's a random prize generator depending on the random number we'll give a participant a random prize standard output you win how about a bumper sticker a bumper sticker that will be the lowest tier prize then we should probably add a break to break out of the switch okay let's think of some others i should probably break after these prize 2 will be a tshirt prize three how about a free lunch prize for maybe a gift card case five concert tickets that sounds good so when i run this program we'll generate a random number between one and five depending on what that number is we'll execute the code found within one of these cases let's see what i won i want a free lunch if i try this again there's a good chance it'll be a different prize this time i want a bumper sticker i want a bumper sticker again come on i want those concert tickets i'll take a gift card that's not bad now if you don't add these break statements you'll just fall through the switch you want a gift card you want concert tickets so if you only want somebody to win one prize you'll want to exit out of the switch by including this break statement so yeah everybody i thought that might be an interesting program you can generate some random event maybe it's for a game or something i thought maybe a random prize giveaway would kind of be interesting this program is more or less for practice your assignment is to write a switch with some random events then post it in the comment section down below and well yeah that's a random event generator using c plus plus all right welcome back everybody in this video we're going to create a simple number guessing game let's declare our variables int num our number will be randomly generated and guess this variable will hold the current player guess and tries how many tries is it going to take for the user to guess the correct number we'll be using the s rand function to generate some random numbers pass in time pass and null we will assign our variable num a random number between 1 and 100 rand function modulus 100 then add 1. this function will give us a random number between 1 and 100 start with the num just for some decorations i'm going to create a title for this game number guessing game then add a new line i'll place all of this code within a do while loop do while our guess does not equal num we will have the user type in another guess we'll create a prompt standard output enter a guess between 1 through 100 standard input guess once the user types in a guess we will increment our tries variable by one to keep track of the score now we'll have to examine the guess versus the number if guess is greater than num let's display too high i'll add a new line else if guess is less than num then we'll display too low else if the guess is not above the number and the guess is not below the number the guess must be equal to the number standard output correct we'll display the number of tries number of tries we'll display our tries variable i'll add a new line and i'll just add a line of text for decoration at the bottom once we exit the game that should be everything let's run this number guessing game i'll guess something right in the middle 50. too low okay so the number is between 50 and 100. i'll guess right in the middle of that range 75 too high something between 50 and 75 perhaps 62. that's still too high 56 too high 53 too low 54. 55. all right the correct guess was 55 it took me seven tries i don't really think that's too good but it works okay everybody that is a simple number guessing game involving the use of do while loops and generating random numbers if you would like a copy of this code i'll post this in the comments section down below if you're enjoying this series please let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro well well well everybody we have a pretty important lesson today today we're going to talk about functions a function is a block of reusable code if you ever think that you're going to use some section of code more than once you might as well stick it within a function here's an example i'll create a function to sing happy birthday currently our program is within the main function to begin the program we call the main function before the main function we can create a new function for the time being we're going to type void then a unique function name the function name should be descriptive of what it does if i'm going to sing happy birthday let's name this function the happy birthday function then add a set of parentheses then a set of curly braces you can see that this is almost identical to our main function except with the main function we have a return type and return zero what would we like to do when we invoke this function let's sing some of the lyrics to happy birthday standard output happy birthday to you i'll add a new line i'll repeat this a couple times happy birthday dear you happy birthday to you to invoke this function all we have to do is within the main function type the function name followed by a set of parentheses this will call or otherwise known as invoke the function i like to think of the parentheses as a pair of telephones that are talking to each other to use a function you have to call the function call it up on the phone so when i run this code we have the lyrics to happy birthday this function is reusable i can call this function as many times as i want i'll call this function two additional times just to separate these lyrics i'm going to add an additional new line character okay we now should have three verses of happy birthday one two three that's because i called the function well three times a function is just a block of reusable code now what a lot of people do is that they'll declare and define their functions after the main function because it's more readable to many people but there's one issue with this happy birthday was not declared in this scope our programs are read from the top down since we're invoking the happy birthday function before we even know what it is while the compiler doesn't recognize it a solution to this is that before the main function you can declare functions but define them later let's declare happy birthday before the main function then make sure you add a void or a return type so void happy birthday we can now use this function even though it's after the main function a lot of people like to define their functions after the main function it's another way in which you can write it just be sure to at least declare them before the main function now check this out what if we have a variable standard string name assign this whatever your name is i'm going to use this name that's declared in the main function and use it within the happy birthday function let's replace u with the user's name happy birthday to name i'll add a new line then i'll copy this paste it and let's change this line as well all right now when i run this here's the issue name was not declared in the scope think of each function as a house the main function is your house functions outside of the main function would be your neighbors their house functions can't see what's going on inside of other functions you can't see what's going on inside of your neighbor's house you're only familiar with what's going on inside of your own house in order for the happy birthday function to use the main function's name variable it needs to be made aware of it to do that when you invoke a neighboring function you can pass that variable or some other value as an argument so within the parentheses when you invoke that function place your values or variables i would like to make my happy birthday function aware of this name variable within the main function when you send some data over to a function that data is also known as an argument however the receiving function needs a matching set of what are called parameters if this function is going to receive this data this name you need a matching parameter to set up a parameter you first list the data type we will receive a standard string then we can list a parameter name let's say name now this happy birthday function can use this name variable within the main function if you have a function declaration at the top of your program you'll have to add that parameter there as well so happy birthday standard string and we can run this happy birthday to whatever your name is functions aren't aware of what's going on inside of other functions but you can make them aware of any local variables or values by passing them as an argument but you'll need a matching set of parameters the name or otherwise unique identifier of your parameter doesn't necessarily need to have the same name so to say you can name it something else instead of naming our parameter name let's say birthday boy or birthday girl happy birthday to birthday boy and that should work the same so you can rename parameters but let's revert that back now let's pass an age int age equals make up some age i would like to send my age over to the happy birthday function so i will pass that as an additional argument separate each argument with a comma we'll send our name as well as age now we need a matching set of parameters right now the happy birthday function is only equipped to receive a name so we list the data type and age and if you have a function declaration change that there as well then i'll add one more line you are age years old then this should work okay happy birthday to whatever your name is you are whatever your age is years old so that's a function everybody it's a block of reusable code if you think you're going to perform some code more than once you can stick it within a function whenever you need it you just simply call it if you need to make your function aware of any variables you can send them as arguments to that function but you'll need a matching set of parameters in the function definition and the declaration so yeah those are functions everybody your assignment is to create a unique function and post it in the comments section and well yeah those are functions in c plus plus all right everybody we are on the return keyword the return keyword will return a value back to the spot where you called to the encompassing function the return keyword is commonly found at the end of a function much like the main function when we invoke a function we can return some value back here's an example i'll create a function that will calculate the area of a square but we'll need to pass in a length the length of one side this will be a double length assign some value 5.0 is good then we'll need to declare and define a function at the top of my program i'll add a function declaration for the time being we'll write void but that will change soon void i'll name this function square we will square a length list any parameters we will accept a double value which we will name length then i'll need a function definition i'll add that after the main function void square i'm going to create a temporary variable named result it will be of the double data type we will take length times length to calculate the area then i will use that return keyword return what are we returning we're returning our result if we're returning a value we need to change this keyword void to match the data type of what we're returning we're returning a double so i will change void to double and then make sure you change that within the function declaration as well double square you could do this in one line of code you don't necessarily need to we could simply just return length times length that is also valid that's probably how i would write it we now have this function that will calculate the area of a square once we pass in a length i'm going to create a new variable called area it will be of the double data type and i will set the sequel to then let's invoke the square function pass in our length variable as an argument at this point of the program area should be assigned a value let's display it standard output area i'll add my area variable then add centimeters squared then new line the area of our square is 25 centimeters squared and i could change this to a different number like six the area is now 36 centimeters squared let's create another function this function will find the volume of a cube if we know the length of a side we'll return a value of the double data type but i will name this cube we will still accept the length of the double data type let's copy this paste it change square to cube return length times length times length double volume equals we'll invoke our cube function pass in our length then i will display whatever the volume is volume my volume variable centimeters cubed if the side of a square is 6 centimeters the area would be 36 if it was a cube the volume would be 216 centimeters if you need to return a value back to the spot in which you invoked a function be sure to list the data type of what you're returning let's try another example involving strings i'll create a function that will add a user's first name their last name and create a new string called full name let's declare our variables standard string first name equals add your first name standard string last name equals add your last name then i'll create a function to concatenate two strings together we're returning a string i will list the data type as standard string i'll name this function concat strings we will have two arguments two standard strings standard string i'll name the first string string one standard string string a misspelt string string two so we have our function declaration now we just need to define it i'm going to return string one plus i'll add a space between the first name and the last name plus string two i'll create a third variable standard string full name equals i will invoke my concat strings function then i need to pass in two strings as arguments i'll pass in my first name and my last name then let's display the full name standard output hello the user's full name hello bro code or whatever your first and last name is so yeah everybody that is the return keyword wherever you invoke a function you can return a value back to that spot in which you invoked that function if you're returning a value just be sure that you change the return type of that function to match the data type of the value being returned in this example i returned a string a standard string so the return type of this function would be a standard string so that's the return keyword everybody your assignment is in the comment section to post a function that returns some value so yeah that is the return keyword in c plus plus hey guys in this topic i'm going to explain overloaded functions in c plus plus and actually with many other programming languages you can have different versions of the same function here's what i mean i have a function to bake a pizza because well i like pizza bake pizza this function will have no parameters all i'm gonna do within this function is display the words here is your pizza then i'll add a new line uh then i should probably add a declaration at the top void baked pizza then to invoke this function i would type the function name here is your pizza this time i would like to bake a pizza that has toppings right now we just have a plain pizza with no toppings and that's kind of lame i'm going to create an additional version of this baked pizza method but it's going to have different parameters void bake pizza we will accept a string standard string i'll name this string topping one we'll accept one topping as an argument standard output here is your i'll add my topping here topping one pizza then be sure to add your function declaration to bake pizza then this time we are accepting a string it is valid for functions to share the same name but you need a different set of parameters a function's name plus its parameters is known as a function signature i can bake a pizza that has no toppings here is your pizza or i could pass in a topping like pepperoni here is your pepperoni pizza let's create an additional function that accepts two toppings so we have topping one topping two here is your topping one and topping two pizza then add your function declaration topping one topping two now i can bake a pizza that has two toppings i would like pepperoni and mushrooms here is your pepperoni and mushroom pizza so yeah everybody those are overloaded functions functions can share the same name but you need a different set of parameters a function's name plus its parameters is known as a function's signature and each function signature needs to be unique kind of like an id so yeah those are overloaded functions if you would like a copy of this code i'll post this in the comments section down below and well yeah those are overloaded functions in c plus plus okay everybody we gotta discuss variable scope i'll explain local variables and global variables local variables are declared inside of a function or block of curly braces such as within the main function or inside of another function global variables are declared outside of all functions you tend to see them at the top of your program there's some major differences between the two let's begin with local variables suppose i have some number int my num my num equals one if i need to display my num i can use standard output my num and of course this will display my num which is one now what if i have a function to display my num void print num let's move this line of code to our print num function i'll need to add a function declaration to the top of my program then we will invoke this function print num okay this isn't going to work and here's why mynum was not declared in this scope functions can't see inside of other functions my function printnum has no idea what this mynum variable is mynum is a local variable to the main function that's why we pass arguments to functions we'll make the function aware of this value but you'll need a matching set of parameters int my num then add that to the function declaration int my num and this would work that displays the number one but let's get rid of these parameters it is legal to reuse the same variable name as long as it's within a different scope within the print num function i'll also have a mynum variable that has the same name but i'll give this a different value when printing my num it prints two we have two versions of the same variable and this is fine because they're within different scopes now a global variable is declared outside of all functions you see these at the top of your program i will declare int my num equals three i'm going to delete these two local variables if i was to invoke the print num function and print my num well then that number is 3. this global variable is also available within the main function so i will print my num here as well within the main function so we have three and three it's best to avoid global variables if you can because it pollutes the global namespace also variables declared within a function are much more secure because like i said functions can't see inside of other functions if we had both local and global variables mynum within the main function will be 1 within the printnum function it will be 2. if i was to display my num for both of these i'm going to add a new line to each of these new line and new line a function will use any local variables first before resorting to any global variables that's why our print num function prints two and the main function prints one if you'd rather use the global version you can use the scope resolution operator so precede your variable name with two colons that is the scope resolution operator i'll do that here as well in place of using the local version of mynum we will use the global version and we will print three we're using the global version of my num instead of the local version so yeah that's variable scope local variables are declared inside of a function or anytime you see a set of curly braces a variable declared inside a set of curly braces is hidden to the outside world a global variable is declared outside of all functions and is accessible to all functions within the program like i said you should try and avoid using global variables if you can because it pollutes the global namespace and these variables are less secure so yeah that's variable scope hey if you're enjoying this series let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey guys in this topic we're going to create a banking program for practice we'll be able to deposit money withdraw money and show a balance this is more or less just for practice let's begin by creating our functions void show balance there will be one parameter double balance whatever our bank account balance is we'll show it the return type is double deposit no parameters double withdraw and there will be one parameter double balance let's fill in a few things within the main function double balance and i will go ahead and set this to zero as well as int choice i will set that to zero as well we'll use a switch to determine if the user wants to show their balance make a deposit a withdrawal or exit let's display some output some prompts standard output enter your choice and i'm just gonna add some text decorations because i think that'll be cool maybe a bunch of asterisks and one more okay we have option one one show balance two will be deposit money three is withdrawal money four will be exit then we'll accept some user input standard input choice now we're going to create a switch we're examining the user's choice switch we're examining our choice against many matching cases we have case one case two three four then a default case okay case one the user wants to show their balance we'll invoke the show balance function but we need to pass in our balance balance and then we are going to break case 2 the user wants to deposit money so we're going to take our balance equals balance plus our deposit function so deposit will return a double right here so we're going to add that to our balance once we verify it actually we can shorten this to balance plus equals whatever value is returned with the deposit function then we are going to break case three withdraw money balance minus equals the withdraw function pass in our balance we're withdrawing money from our balance once we verify it then we're going to break we'll exit with case 4 i'll display some output standard output thanks for visiting then i'm going to break okay default case standard output invalid choice okay now we're going to place all of this code within a do while loop do all of this while some condition is true so let's take all this code cut it put it within that do while loop let me just format this a little bit the condition will be while choice does not equal four four is what we used to exit we'll need to add some function definitions but i'm going to fill these in later we'll need to return something so let's return zero for the time being for two of these functions at least return zero okay let's run and compile this just to test our do while loop okay enter your choice uh one show balance that doesn't show our balance yet but it will deposit money withdraw now we should be able to exit by pressing four thanks for visiting okay so we know that the do while loop is working let's fill in our functions let's begin with show balance now with the show balance function we're receiving our balance as an argument so i'm going to display standard output your balance is dollar sign or some other currency if you choose i'll display our balance then add a new line so let's say we have 123 dollars in our account i'm going to show my balance 123 dollars even but i would like to display cents i'll need two decimal places after the decimal so there's one thing we can include we'll include this header file include i o man ip there's a function in here to set some precision for floating point numbers i'm going to make this change after the dollar sign standard set precision pass in two for two decimal places then add standard fixed this will display our balance up to two decimal places after the decimal point so let's try that again okay show balance 123 dollars and zero cents if i were to change this to 123.01 we should display two decimal places yep 123 dollars and one cent okay that is the show balance function let's work on the deposit function okay now we're within the deposit function i'm going to create a local variable named amount set this equal to zero we'll ask the user how much they would like to deposit standard output enter amount to be deposited standard input r amount so i'm going to set balance back to zero then let's test it show balance one your balance is zero dollars and zero cents i would like to make a deposit uh 420 69 cents okay now i would like to show my balance after we make a deposit so within case two after making a deposit let's show our balance pass in the balance variable now let's do so after withdrawal two okay let's try that again show balance zero dollars zero cents make a deposit 420.6 your balance is zero dollars and zero cents so what we're going to do is return our amount at the end of this function return amount 420 dollars 69 cents all right we have our balance the user is able to enter in negative money enter amount to be deposited negative one thousand your balance is now negative one thousand dollars we need to prevent somebody from making a negative deposit so before we return our amount let's use an if statement if amount is greater than zero then we will return the amount else standard output that's not a valid amount then let's return zero okay let's try that again deposit money negative one thousand dollars that's not a valid amount your balance is zero dollars i'm just going to add a new line like right here then let's make a legitimate deposit deposit money i will deposit one thousand dollars in one cent your balance is one thousand dollars and one cent okay that is the deposit function that is complete then we have the withdraw function we'll create a local variable named amount of the double data type we'll create a prompt standard output enter amount to be withdrawn standard input amount at the end of this program we will return amount okay let's test it okay i need to deposit some money first i will deposit one thousand dollars and one cent then let's withdraw money i will withdraw one hundred dollars and one cent my new balance is nine hundred dollars but we can overdraw our account still so i'm going to withdraw a million dollars and one cent our balance shouldn't be negative so let's prevent our user from overdrafting their account within our withdrawal function let's add an if statement if amount is greater than our balance will display insufficient funds then we will return zero okay i'm going to withdraw one million dollars and one cent insufficient funds your balance is zero okay now what if the user would like to deposit negative money withdraw money negative one thousand your balance is one thousand dollars we'll need to make sure that the amount is a legitimate amount i'll add an else if statement if amount is less than zero standard output that's not a valid amount now else we will return the amount to be withdrawn then within the elsif statement we'll need to return zero there okay let's withdraw money enter amount to be withdrawn negative one thousand dollars that's not a valid amount that's good let's withdraw again i would like to withdraw 100 insufficient funds my balance is zero let's deposit some money 99.99 our balance is 99.99 let's withdraw again let's try and withdraw 100 nope we can't let's withdraw again 99.99 your balance is zero that's good then let's exit press 4 to exit thanks for visiting okay so these functions are done there's just one more thing we should add if i type in some characters like the word pizza well this will break our program we'll want to clear the input buffer so after our choice let's add these two lines standard input dot clear function so i haven't talked about this function this function will reset any error flags when the standard input fails to interpret the input then follow this with f flush this is a function pass in standard input this will clear the input buffer basically speaking once we hit enter we have a new line character within our input buffer so we just need to flush that and get rid of it that should prevent our program from going crazy so let's type in some characters invalid choice cool then i would like to exit all right everybody that is a banking program for some practice if you would like a copy of this code i'll post this in the comment section down below and well yeah that's a banking practice program in c plus all right everybody in this video we're going to create a game of rock paper scissors let's create our function declarations first char get user choice char in this case would be the return type will be returning a character char get computer choice void there is no return type show choice there will be one parameter char choice then the last function is void choose winner there will be two parameters char player that's us char computer the computer's choice will be determined randomly using a random number generator let's define these functions let's copy all of these after the main function i will paste them then add a set of curly braces after each currently if i were to run this program we do have some warnings because with these two functions get user choice and get computer choice we're not returning anything even though we stated that we're returning a character just for the time being i'm going to return 0 just so that those warnings go away but we'll correct these momentarily so we shouldn't have those warnings within the main function we will declare two characters one for player char player that's us char computer that's the opponent we will take our player then assign this a value of whatever is returned from the get user choice function then we need to fill in this function within the get user choice function i will create a local variable of player as well i'll create a message to begin our game standard output rock paper scissors game i'll add a new line uh this part isn't necessary but i'm just going to add a bunch of asterisks afterward just because i think it would look cool underneath our title let's list our choices standard output the character r for rock new line let's copy this p for paper s for scissors standard input player i'm just going to test that this works standard output player rock paper scissors game r for rock p for paper s for scissors i'll pick r that would give us the character r okay so we know that that works i'm going to place some of this code within a do while loop because the user might not type in rp or s so do while i'm going to stick my code within the do while loop i'm just going to add one more line of output choose one of the following all right we'll continue this while loop as long as our player does not equal the character r and player does not equal the character p and player does not equal the character s then at the end of this function we will return player we can't escape this while loop until we pick either r p or s that's how this condition works let's test it rock paper scissors game choose one of the following r for rock p for paper s for scissors uh i will pick w for wombo choose one of the following r p or s uh i like the letter x nope can't pick that uh let's go with s for scissors okay s is a valid choice okay that is the get user choice function that is complete so i'm going to close out of this function after we assign our player variable let's display the user's choice standard output your choice colon space then we will invoke the show choice function show choice then there is one parameter we have to pass in a choice as an argument we will pass in our player that's a character within the show choice function i'm going to create a switch switch we're examining some value against matching cases we'll examine our choice our choice argument that we receive if our choice matches the case r what would we like to do i'm going to display some output standard output just rock then i'll add a new line make sure to break then case p for paper standard output paper i'll add a new line then break case s for scissors standard output scissors new line then break let's close out of this function then test it okay i'll type r for rock your choice rock p for paper your choice paper s for scissors your choice scissors okay the show choice function is done now we need to get the computer choice computer equals get computer choice then we'll need to fill in this function get computer choice right here we'll need to generate a random seed s rand pass in the time function then type zero or null you may need to include this header file at the top of your program just in case this doesn't work include c time we'll generate a random number between one and three and num equals brand function modulus three plus one we'll examine this number against matching cases switch we're examining our num the first case will be the number one if our random number is 1 let's return the character r since we're returning a value we don't necessarily need to add that break statement we're already breaking when we return so we can omit this case 2 return the character p for paper case 3 return s for scissors okay we can close out of the get computer choice function that's all done back within the main function let's display the computer's choice standard output computer's choice will invoke the show choice function but pass in our computer let's run it to test it i'll pick r for rock your choice rock the computer's choice is paper let's try it like two more times okay we chose paper the computer chose rock let's pick s for scissors your choice scissors the computer's choice is also scissors okay so the computer is picking a random choice that's good now we'll have to decide who won at the end of our program we will invoke the choose winner function pass in our player as well as the computer then within the choose winner function let's create another switch we will examine our player against matching cases if our player chooses rock the character r i think the best way to do this would be to use if statements within each case if the player chooses rock and if the computer chooses r for rock that means there's a tie i'll display that standard output it's a tie then i'll add a new line else if the computer chooses paper that means we lose standard output you lose else well there's only one option left scissors because if the computer didn't choose rock or paper that means they pick scissors rock beats scissors so let's display that the user one you win oh then be sure to add a break at the end to break out of the switch this is the case if the player chooses rock let's copy all of this code paste it and let's move this over now if the user chooses paper we have some different results paper be its rock will change this line of output to be you win if the user chooses paper and the computer chooses paper that means it's a tie it's a tie if we choose paper and the computer chooses scissors that means we lose you lose one more case if the player picks scissors and the computer picks rock you lose scissors beats paper you win else scissors ties with scissors it's a tie and that is everything so let's close this function and run this program okay i'll pick r for rock we picked rock the computer picked scissors you win p for paper the computer also picked paper it's a tie i'll pick scissors i picked scissors the computer picked rock you lose well all right then everybody that is a game of rock paper scissors if you would like a copy of this code i'll post this in the comment section down below and well yeah that's a game of rock paper scissors in c plus we have a big topic today i need to discuss arrays an array is a data structure that can hold multiple values values are accessed by an index number think of an array as kind of like a variable that holds multiple values it's a little more complicated than that but that's a good way of thinking about them perhaps we have the name of a car this will be a standard string i will name this car assign this a value of whatever card that you like one card that i like is a corvette then i will display whatever our car is standard output car so of course this car is a corvette we can transform this variable into an array by making the following changes after the variable name add a set of square brackets then enclose your values with a set of curly braces there we now have an array my variable car is now an array now this variable can hold multiple values multiple cars kind of like it's a parking garage separate each value with a comma this time i'll add a mustang then a camry now take a look at this i will display car now what the heck is this so this is a memory address of where our array is located like one two three fake street if i need one of these elements one of these values that's found within the array in order to access it i have to do so by an index number after the array name i will add a set of square brackets then an index number the first element in an array has an index of zero because computers always start with zero and we have our corvette it's kind of like a parking spot number that's why i went with this example of cars if i need the next element within my array i would access element number one then i should probably add a new line just to separate these new line we have our corvette and our mustang then we have our third element which would have an index of two so we have our three elements our corvette our mustang and our camry you can reassign values too i'm going to change the first element within this array take the array name select an index number i'll set the sequel to a camaro a chevy camaro now at parking spot number zero we have our camaro then our mustang then our camry i'm going to rename car as cars just so people know that it's plural although it's not necessary one thing with arrays is that they can only contain values of the same data type like i'll try and stick a number within here number one so our compiler doesn't like it that there's a number in here with all these strings so arrays should all be of the same data type now if you don't know what you want to place within an array you can simply declare an array then assign values later i'm going to declare an array of cars and then later assign some values cars at index 1 will have our mustang cars at index 2 will be our camry see we still have an error though array size missing and cars you can declare an array then assign values later we need to set a size to this array it's a static data structure if i'm only going to place three cars within this array i'll set the size to be three so within the square brackets you can set an array size and this would work the same you can declare an array be sure to set the size and then assign values later let's try one last example i'm going to create an array of prices these will be of the double data type prices add a set of square brackets i'll go ahead and assign these values right away so i don't need to declare a size explicitly make up some prices five dollars seven dollars and fifty cents nine dollars and ninety nine cents then fifteen dollars i'll display these prices standard output prices i'll list an index number of what element i'm trying to access the first would be zero then i'll add a new line let's copy this line of code and paste it a couple more times we have prices at index zero that is the first element then one two and three and here are the prices so yeah that's an array think of it as a variable that can hold multiple values it's a little more complicated than that it's a type of data structure but that's a good way of thinking about them to change a variable into an array after the variable name add a set of square brackets place your values within a set of curly braces that's if you're assigning values right away or otherwise you can set a size and then assign values later that's another option so yeah those are arrays your assignment is to post an array in the comments section down below and well yeah those are arrays in z plus plus you guys ready all right let's talk about the size of operator the size of operator determines the size in bytes of a variable data type class objects etc whatever you would like to find the size of you stick within the parentheses of the size of operator here's an example let's create a double double gpa our gpa will be a solid 2.5 to determine the size in bytes of my variable or a data type i will just place within the set of parentheses i'll display this standard output size of operator i would like to return the size of my gpa variable then i'll just add a string bytes new line let's take a look the size of my gpa variable is 8 bytes that's the maximum size allocated to my double variable if i was to replace gpa with a data type such as double well this would be the same eight bytes this will be helpful in the future when we begin working with arrays so let's try a couple other variables i'll create a string standard string name assign some name then i will find the size of the string size of name the size of a string is 32 bytes because a string really just holds an address to where some text is located the address of where the string of text is located is 32 bytes even if i were to change the size of the string bro code is awesome well this size is still going to be the same 32 bytes because a string is a reference data type let's try a couple other examples how about a character char grade my grade will be an f i will find the size of this character grade the size of a character is one byte let's try a boolean boolean student is somebody a student true or false i'll play student within the size of operator a boolean variable also takes one byte of memory this time let's find the size of an array in bytes i'll create an array of characters char grades this will be an array i'll set this equal to some grades a b c d then f i'll place my array within the size of operator the size of this array grades is five bytes remember that characters take up one byte of memory an array of five characters would be well five bytes we can use the size of operator to calculate how many elements are within an array if we have the total size of our array we could divide this by the size of one element size of grades at index of zero or otherwise we can find the data type we'll divide the size of my array grades divided by the size of a character so i should have these many elements five elements within my array of grades if i were to add one more grade like an e even though that's not a typical grade well then the total elements within that array would be six elements that's a useful trick to calculate the size of an array how many elements are within that array one more this will be a bonus question i'll create an array of strings i'll name the students we'll enter in some student names such as spongebob patrick then squidward to calculate how many strings are within this array how many students we have we can find the size of my array students divided by the size of a string i have three elements within this array of students then i could add one more and this equation should calculate that i'll add sandy size of students divided by the size of a string would give me four elements so yeah that's the size of operator everybody it will return the size and bytes of a variable data type class objects all sorts of things it will be really helpful when working with arrays because we can determine the size of an array but we'll get some practice with that in the future and well yeah that's the size of operator in c plus alright guys in this video i'm going to show you how we can iterate over the elements of an array suppose we have an array of students these will be strings standard string i'll name this array students set the sequel to some student names pick a few spongebob patrick then squidward suppose i would like to display all these students normally to do that i would type standard output my array followed by an index number so the first student would be spongebob which has an index of zero and my first student is spongebob if i need to display all of the elements of this array i would have to one by one access each element then i'll just add a new line we have spongebob patrick and squidward if i need to display all of the elements of an array a better approach would be to use a for loop i'm going to type four parentheses curly braces we'll need an index and i i'll set the sql to zero because the first element in our array has an index of zero i'll continue this as long as i is less than the length of our array currently it's three then increment i by one during each iteration i would like to display each element standard output students now instead of an index number like 0 1 2 or whatever i'm going to use my counter variable i students at index of i during the first iteration i will be 0 then 1 then 2 once we reach 3 we'll stop i'll add a new line this for loop will print the elements of my array spongebob patrick squidward there's one issue with this though what if we add another student such as sandy well this for loop will stop once i reaches 3. if we make any adjustments to this array we would have to go into our code and make some changes such as setting this for loop so that we discontinue when i reaches 4. this would work but it's not the best solution for our stopping condition in place of just setting i to be less than some number let's calculate how many elements are within this array to do that we can use the size of operator i'll type size of my array this will give me the total size in bytes of my array to calculate the number of elements i can divide size of students by the size of the data type string or even an element this will loop through all of the elements of this array spongebob patrick squidward sandy if we change the number of elements well then there's no need to touch this for loop it will calculate the size automatically see now we just have spongebob and patrick let's create one last example i'll create an array of grades char grades we have an a b c d then f if i need to iterate over this array of characters i would find the size of my array grades divided by the size of a character the character data type during each iteration i will display grades at index of i our counter and this will display all of the elements of this array so yeah that's how to iterate over an array using a for loop in the next topic i will explain the for each loop which has different syntax and well yeah that's how to iterate over an array using a for loop in c plus plus alright guys the for each loop the for each loop is a loop that eases the traversal over an iterable data set an array is an example of an iterable data set suppose we're using a standard for loop and i have this array of strings named students we have spongebob patrick and squidward using a standard for loop i would need three statements an index a condition then we could increment or decrement our index this does work but there is another way of writing this using a for each loop there's less syntax than a typical for loop but it's less flexible using a for loop we can go forwards backwards or even skip iterations of something we're iterating over using a for each loop we start at the beginning and go to the end there's less flexibility so let's change this to a for each loop first we'll add the data type of what we're iterating over we're iterating over strings then we'll need a name for the current element that we're on we have an array of students let's name the current element student colon then our iterable data set which would be our array string student colon students during each iteration let's display whatever the current element is which i named student then i'll add a new line and there we go we have our three students then you could change the amount of students if you would like let's add sandy now we have spongebob patrick squidward sandy let's try a different example let's work with grades this time these will be of the int data type int grades equals make up some grades 65 72 81 93 good enough the data type of what we're iterating over is not a string this time it is an int integers let's name each element simply grade colon the name of my iterable data set which would be my array grades for every grade in grades let's display each grade and here are the grades 65 72 81 93 so that's a for each loop it's a loop that eases the traversal over an iterable data set there's less syntax involved in a for each loop but it's less flexible if you just need to display the elements of an array a for each loop would work perfect so yeah that's a for each loop everybody your assignment is to post a for each loop in the comment section down below and well yeah that's the for each loop in c plus plus all right everybody so in this video i'm going to show you how we can pass an array to a function suppose we have an array of prices these will be of the double data type double prices straight brackets equals just make up some prices 49.99 15.5 cents 75 dollars nine dollars ninetynine cents good enough we'll create a function to find the sum of these prices and print a total let's say double total equals then i'll invoke a get total function which we still need to declare and define so let's do that now we'll return a double double get total let's list the parameters we need to accept an array of doubles double prices then add a set of square brackets for the parameter now when we pass an array to a function you only need to pass the arraign name you don't need a set of square brackets then we'll need a function declaration let's do that before the main function then at the end of my program i will display the total standard output pick a currency uh let's pick a dollar sign then i will display the total within the get total function i'm going to declare a separate local instance of a total variable remember that variables can have the same name as long as they're within a different function so we have double total i'm going to iterate over my array using a for loop normally what we would do is say int i equals zero i would continue this as long as i is less than then at this point we would calculate the size of the array but technically this isn't going to work and i'll demonstrate why we have the size of our array prices divided by the size of either the data type or one of the elements typically i like to use one of the elements prices at index zero then i will increment our counter by one during each iteration within our for loop let's assign total equal to total plus prices at index of i or we could shorten this to total plus equals prices at index of i at the end of our program we will return whatever the total is now this isn't going to work the way it's written now here's why when we pass an array to a function it decays into what's known as a pointer which we haven't discussed yet but we will in future topics within this function we're not working with an array anymore we're working with a pointer that points to the address of where the array begins this function has no idea how big this array is anymore we can't calculate how many elements are within this array what we could do is that when we invoke this function we can pass in the array as well as the size of the array since this function no longer knows how big the array is we can explicitly let the function know what the size is so let's calculate what the size is into size equals we can just copy all this code paste it now when we invoke this function i'm going to pass the size as a second argument then we'll need a matching set of parameters and size be sure to add that with your function declaration too if you have one i would like to continue this for loop as long as i is less than size now this should work let's verify that yep and our total is 150 dollars and three cents in conclusion when you pass an array to a function you only have to pass the array name you don't need a set of square brackets when you do so however when a function receives an array it decays into a pointer and the function no longer knows what the size of the array is so we could pass that as an additional argument to let the function know what the size is which we could then use to you know iterate over the array so that's how to pass an array to a function your assignment is to post a function that accepts an array as an argument in the comments section down below and well yeah that's how to pass an array to a function in c plus plus hey welcome back so in this video i'm going to show you how we can search an array for an element let's create an array of numbers something simple int numbers this will be an array then assign some numbers i'll just assign the numbers 1 through 10 because i'm basic like that there one through ten we'll probably need this later i'm going to calculate the size of the array and size equals size of my array numbers divided by the size of one of the elements i'll just pick the first element we'll need to keep track of an index like what index did we find something that we're searching for int index i'll declare this variable but we don't need to assign it as well as int mynum mynum will be the number that we're looking for let's accept some user input we'll create a prompt standard output enter element to search for i'll add a new line because i can standard input my num i'm going to create a function that will search an array for us let's define that function outside of the main function this function will return an integer that will be our index the return type isn't i'll name this function search array there's a couple parameters we'll have three parameters an array of integers integer array the size of the array and size then some element that we're searching for int element then we should probably add a function declaration at the top that's good this function will return an integer the index of the element that we're searching for we will take our index variable set the sql to then i'm going to invoke the search array function that we just declared but we need three matching arguments for the three parameters that we have set up an array a size and an element we'll pass in our array numbers the size of the array that we already calculated and the element that we're searching for we're searching for mynum within the search array function we will iterate from the beginning of the array to the end and see if there's any matches we can do that with a for loop we'll begin at 0 into i equals 0 that's our index i will continue this as long as i is less than the size of the array that we're passing in as an argument then increment our index by one this would be technically a linear search we'll start at the beginning and check every value until we reach the end so let's check using an if statement within the for loop if our array we did name this array numbers but remember that you can rename parameters numbers is technically our array if our array that we receive at index of i that's our counter is equal to the element that we're searching for we will return whatever the index is i if we search through this entire array and don't find that element that we're searching for we'll return negative one in programming negative one serves as a sentinel value if you see negative one that typically means that something wasn't found we'll return either i or negative 1 then assign it to this index variable within the main function using an if statement we'll check to see what that value is if our index does not equal negative one that means the element that we're searching for is somewhere within our array let's display the index standard output my num is at index whatever the index variable is else standard output my num is not in the array okay let's see if this actually works enter element to search for let's search for one one is that index zero remember that computers always start with zero enter an element to search for let's search for 10 10 is at index 9 enter an element to search for 4 20 69 420 69 is not in the array for additional practice let's search through an array of strings such as food we'll create an array of strings i'll rename numbers as foods then think of some food that you like pizza hamburger hot dog int size equals the size of foods divided by one of the elements of foods let's rename my num as my food that's the food that we're searching for and that will be of the string data type in place of cn when working with strings let's use getline because the user input may contain spaces standard getline standard input my food within the search array function that we created we will pass our array foods the size can stay the same then pass in my food that's what we're searching for within the if else statements replace my num with my food then we'll need to change the data types of this function we're accepting an array of strings replace int with string do that with your element as well then we need to change the function declaration at the top of our program okay we can now search through an array of strings enter element to search for let's search for pizza pizza is at index zero hamburger hamburger is that index one hot dog hot dog is that index two then let's search for something that's not within this array what about sushi sushi is not in the array yeah everybody that is how to search through an array this would technically be a linear search you begin at the first element of an array check to see if the values are equal if they're not equal you move to the next element until you reach the end and that's basically it if you would like a copy of this code i'll post this in the comment section down below and well yeah that's how to search through an array in c plus plus hey everybody in this topic i'm going to show you how we can sort an array first i'll explain the logic behind it then we'll write a c plus plus program to actually handle it we'll use a standard bubble sort it's an easy sorting algorithm to write although there are more efficient sorting algorithms we're still learning so let's stick with a bubble sort so with the bubble sort we begin at index 0 the beginning of our array we'll examine the element directly to the right if the element on the left is larger than the element on the right we need to swap these two elements i will take this element move it within some temporary storage like a temporary variable take the element on the right move it to the left take whatever's within temp place it within that opening again we take our value examine the element to the right if it's larger we swap them then we would just repeat this until we reach the end so that would be one element we would repeat this process with the rest of the elements now for the next iteration 1 is not greater than 9 so we leave it alone then we check the next element nine is greater than two we would swap these two values i'll speed up the footage that is a quick demonstration of a bubble sort so let's actually write this in code now okay let's create an array this will be an array of integers make up some numbers make sure they're not in order let's calculate the size of the array and size equals size of our array divided by the size of one of the elements at the end of our program we will iterate over our array i'll use a for each loop int element in array i will display using standard output every element then i think i'll separate each with a space okay and here's our array obviously unsorted so let's change that i'll create a sort function void sort there will be two parameters an integer array int size let's add a function declaration at the top of our program before we print our array let's invoke the sort function that we just created pass in our array as well as the size there we go okay so let's head to our sort function what we'll need to do is iterate over our array once for every element that's within the array we'll need the help of a temporary variable to swap some values then we'll need nested loops 4 and i equals 0 we'll continue this as long as i is less than the size of our array minus one the reason that the condition is size minus one is because we don't need to compare the last element to anything the larger values will naturally gravitate towards the end of the array increment i by one then we'll need a nested for loop let's use index j because i is already taken now our condition is going to be size minus i minus one once we place the larger elements all the way to the right they should already be in order we don't need to sort any elements that are already sorted then what we have to do is use an if statement to check to see if the current element that we're on array at index of j is greater than the element on the right array at index of j plus one if the element on the left is larger than the element on the right we just have to swap those two values we'll take temp which we declared up here equals array at index of j array at index of j equals array at index of j plus one then lastly array at index of j plus one equals whatever's within temp and that should be it let's run this yeah and our array is now sorted in ascending order so if you need descending order within this if statement use less than and now this array is in descending order well okay then everybody that's one way in which you can sort an array we used what's known as a bubble sort it's easy to write but it's not as efficient as some other algorithms that are out there this is a good one for beginners if you would like a copy of this code i'll post this in the comment section down below and well yeah that's how to sort an array using c plus hey everybody in this topic i'm going to explain the fill function the fill function fills a range of elements with a specified value there's three arguments a beginning address of a data structure an ending address then some value suppose we have an array of strings standard string i'll name this array foods i'll give this a maximum size of 10 elements then i'll go ahead and fill this array with the same food i'll fill all 10 elements with the word pizza so that's one two three four five six seven eight nine ten so these all have the same value now this really isn't practical although it does work just to demonstrate i'll display the elements with the for each loop we're displaying strings for every food element in my array foods i would like to display each food element then i'll add a new line so we have 10 elements all filled with pizza you know this does work but it's not practical to initialize all of these elements manually what if we had an array of 100 elements i would have to type the word pizza 100 times there's a few solutions one of which would be the fill function which would make this process a lot easier i'm going to declare this array but not fill it in quite yet we have an array of 100 elements to store strings i'm going to fill all 100 elements with pizza so we type fill parentheses now we need the beginning address of a data structure well that's simply the array name then an ending address so that would be the second argument we would type the array name plus the size of the array so plus 100 in this case then some value i'll fill this array with the word pizza 100 times there we go all 100 elements have been filled with pizza now if you do change the size of this array let's say we have 150 elements you would have to go and change that within the fill method too what i would do in place of adding some number to my array i will add a size variable foods will be index of size and then we can set some size actually better yet let's make this a constant constant and size then i'll set this to be 100 foods plus size so again all 100 elements are filled with pizza now here's a few exercises if i'm filling the first half of this array with pizza we have our beginning address then i need to find the halfway point foods plus size divided by two i'll just go ahead and put that within some parentheses for clarity then if i were to run this the first half of this array contains pizza and the second half contains nothing it's empty to fill the second half of this array with hamburgers i would invoke the fill function again we will begin where we left off foods plus size divided by two the ending address would be foods plus size we will fill the second half of this array with hamburgers there we are the first half is all pizza the second half is all hamburgers here's a challenge round we'll fill the first third of our array with pizza the second third will be hamburgers and the last third will be hot dogs but 100 doesn't divide by three evenly just to make this simple i'll set our array to be 99 elements we're filling the first third of our array with pizza size divided by three hamburgers will begin at foods plus size divided by three and end at size divided by three times two then we'll invoke the fill function one more time we'll continue where we left off and we will end at foods plus size and fill this with hot dogs here we go so we have pizza hamburgers then hot dogs so yeah that is the fill function we can fill a range of elements with a specified value it's great if you have a lot of elements to work with and you don't manually want to type all the values if you would like a copy of this code i'll post this in the comment section down below and well yeah that's the fill function in c plus hey welcome back everybody in this video i'm going to explain one of a few ways in which we can accept user input and place it within an array there's no onesizefitsall way to do it i'll show you one way that's good for beginners let's begin by creating an array i'll create an array of strings named foods we're not going to be assigning values to this array quite yet that's where the user input will come in if we're not assigning values right away when we initialize this array we'll have to specify a size for the time being let's say 5 something small now arrays they're static data structures while our program is running we can't change the size of this array the max size is stuck at 5 and that might be a problem if we would like to enter in more than 5 items we'll discuss dynamic memory in a future video then i'm going to calculate the size of this array and size equals size of my array foods divided by the size of one of the elements foods at index of zero let's create a for loop to iterate over the elements of this array four and i equals zero we'll continue this as long as i is less than the size of our array then increment i by one let's create a prompt standard output enter a food you like then i'll display the number to show the user what number we're on i then i'm just going to add a colon at the end if we're working with strings we should probably use the getline function just because what the user enters may contain spaces get line standard input we'll place our input within our array foods at the index of i whatever we're currently on our counter at the end of our program let's display a message you like the following food i'll use a for each loop to iterate over the elements of this array we list the data type a name for the current element food in foods let's display standard output whatever the food is i'll add a new line and that should be good now take a look at this enter a food you like we're on number zero i'm going to add plus one to i when we display our prompt the user is not going to be sure why there's a number zero but we know that's the beginning index of an array so i'm just going to change that here enter a food you like we're on number one pizza hamburger hot dog ramen sushi and these are the five elements you like the following food pizza hamburger hot dog ramen sushi okay that's pretty good so far suppose the user only wants to enter in three elements not all five we should add some way to escape out of this for loop based on some user input i'm going to add this line enter a food you like or q to quit now check this out if the user types in q we would like to exit if foods at index of i is equal to the string q then i would like to break out of this for loop the user is done entering an input but there's a problem with this enter a food you like or q to quit number one pizza hamburger hot dog now i'm going to press q to quit we don't have any more prompts to enter in food we went to the results you like the following food pizza hamburger hot dog q i'd rather not put the letter q in my foods array i'm going to create a temporary variable just to hold some user input this will be of the string data type standard string i'll name this temp meaning temporary it's a temporary variable in place of directly putting my user input into my foods array i'll place it temporarily within my variable temp i'm going to check if temp is equal to q else will take foods at index of i set the sequel to temp that way we're not directly assigning our user input to our array until we check what it is if the user types in queue to quit we don't want to put that within our foods array so let's try this again it should be better enter a food you like or q to quit pizza hamburger hot dog q to quit okay pizza hamburger hot dog well the letter q isn't here but when we display what's within the array we have these empty spaces we did not assign a value to these if one of our elements is empty i don't want to display it so we can make this following change in place of a for each loop let's use a standard for loop int i equals zero now here's the condition we're used to saying i is less than size right i'd like to propose a change we'll write a different condition i will check if the current element is empty foods at index of i dot empty function then we'll add the not logical operator we'll continue our for loop as long as the current element is not empty then we'll add the statement increment i by one we'll display our array foods at index of i this for loop shouldn't display any elements that are empty pizza hamburger hot dog q to quit yeah and we only have three elements pizza hamburger hot dog one disadvantage of arrays is that they have a limited size they're static once we declare a size we can't change it we're limited to only storing five foods you could declare a larger size but you may be wasting memory if a user doesn't want to type in all 10. so in future topics we'll need to discuss both dynamic memory and vectors which should be coming up sometime in the future so yeah that is one way out of many ways to enter in user input into an array if you would like a copy of this code i'll post this in the comment section down below and well yeah that's how to enter user input into an array using c plus plus hey everybody in this topic i'm going to explain multidimensional arrays more specifically 2d arrays it's an array made up of separate arrays they're useful because they can represent a grid or matrix of data with rows and columns here's an example i'll create a twodimensional array of cars car names the data type will be string i will name this array cars with the rays they have one set of square brackets but if you're creating a twodimensional array you need two sets of square brackets the first set of square brackets is for the number of rows let's say three in this example the second set of square brackets corresponds to the number of columns if we have three rows and four columns three times four is twelve so that would give us twelve elements if you're initializing your 2d array right away you don't necessarily need to set a row size but you do need a column size i'll just set the amount of columns to be 3 to something small okay so let's fill in the first array this first row will be cars manufactured by ford i'll add a mustang then a ford escape then maybe a ford f150 okay this is our first array i'm going to create a second array after the first array i'll add a comma what i like to do i like to organize my 2d array kind of like it's a grid so now we have a second array this next array will be cars manufactured by chevrolet i'll pick a corvette then an equinox and a silverado let's add one last array these will be cars manufactured by dodge challenger durango ram 1500 all right now to finish this twodimensional array we will enclose all of these inner arrays with another set of curly braces then add a semicolon to the end that is our twodimensional array you can see that there's rows and columns in this example each row corresponds to a manufacturer so it's kind of like a grid a matrix then if you were to access one of these elements you need two indices just to demonstrate let's display all of them standard output cars i need to select the row number then the column number row zero column zero let's see what car that is i'm just gonna add a space between these elements okay row zero column zero that's my mustang row zero column zero that's mustang let's print the next element that would be row zero column one that is my ford escape row zero column one i'm just going to zoom out there then we have row zero column two that's the ford f150 i'm going to display a new line character now we are on row one so let's copy these paste them row one column zero row one column one row one column two so this next row is our car is manufactured by chevrolet we have our corvette our equinox then our silverado then we will display row two row two column zero row two column one row two column two and these are the cars manufactured by dodge we have our challenger durango ram 1500 so yeah you can see that a twodimensional array is kind of like a grid made up of rows and columns now if we need to iterate over a twodimensional array and display the elements here's one way in which we can do that we can use nested loops but just to make it easy i'm going to calculate the amount of rows and columns that we have let's begin with the rows int rows equals size of my array cars divided by the size of one of the elements cars at index 0 is good then to calculate the amount of columns that we have we can do something like this and columns equals the size of cars at index of zero divided by the size of one of the elements so remember there's two indices this time zero zero is good in this example we should have three rows as well as three columns now let's create a for loop to iterate over the rows and i equals zero i will continue this as long as i is less than the number of rows that we have then increment i by one i'm going to display cars at index of i just for the time being then for now i'm just going to add a new line between each so if i was to display cars at index i that should give us three memory addresses one address for every inner array this memory address is for the first array then the second array then the third array what i need to do now to get the elements within each array is to create an inner loop let's use an inner for loop to iterate over each element within each array int j because i is already taken set this equal to zero we will continue this for loop as long as j is less than the number of columns that we have increment j by one now i'm going to display cars and there's two indices i then j i'm going to display a space between each of these okay now we have one long line of text so once we escape the inner for loop i would just like to print a new line i'll add standard output new line character okay and here's our twodimensional array the first row are for cars manufactured by ford then chevrolet then dodge that's how to iterate over a twodimensional array you have the outer loop that's in charge of the rows the inner loop which is in charge of the columns so that's a twodimensional array everybody it's just an array where each element is its own separate array you have two indices the first for the rows the second for the columns to access one of the elements you have to specify the row then the column that element is found so those are twodimensional arrays your assignment is to post a twodimensional array in the comments section down below and well yeah those are two dimensional arrays in c plus plus hey everybody in this video we're going to create a quiz game using c plus plus let's begin by creating an array of questions these will be of the string data type i will name this array questions and then let's think of some questions really add any questions that you want here's a few that come into mind for me what year was c plus plus created okay that is the first question i'll add an additional string question two who invented c plus plus third question what is the predecessor of c plus plus and i couldn't think of a fourth question so i'm gonna ask is the earth flat good enough with each question there will be four corresponding options i think a twodimensional array would be perfect for this this will be a twodimensional array of strings named options we'll need to set the number of columns four columns is good this first array will be for the options for the first question a will be 1969. b 1975 c 1985 1985 is the correct answer d 1989 now we have our next array who invented c plus plus guido van rossum he's the creator of python so that's not the correct answer yarn stro strip i'm sorry if i mispronounce your name dude hopefully you're not watching right now uh b is the correct answer in this case c john carmack d mark zuckerberg we're on question three what is the predecessor of c plus plus the correct answer is c that would be option a c plus c minus minus or b plus plus okay last question is the earth flat yes no sometimes what's earth all right then i just need to surround all of these arrays with another set of curly braces and there is our twodimensional array named options to hold all of the options for our questions we'll need to create an answer key next this will be an array of characters answer key array equals here are the correct answers c b a then b 1985 bjorn strosstrup c the language see that is and no the earth is not flat i looked it up on wikipedia just now let's calculate the size of our questions how many questions do we have and size equals the size of our array questions divided by the size of one of the elements questions at index zero we'll create a character to hold our guess and score to hold the score now we'll need to iterate over our questions for let me move down here and i equals zero we'll continue this as long as i is less than the size of our array the size of questions this would effectively be the amount of questions that we have then i'm going to increment i by one we will iterate once through all of the questions we have standard output let's access the string that's within questions at index i i'll add a new line just for some text decoration i'm going to add a bunch of asterisks before and after the question so let's get rid of this i think that'll look pretty cool there we go then we'll need to iterate over our 2d array we'll use an inner for loop for that we'll need a different index i is already taken let's pick j inch j equals zero we'll continue this as long as j is less than now we'll need to calculate how many elements are within each array so we can do that with size of our options array at index of i divided by the size of options and there's two indices here i then zero then we will increment j by one we will display our options standard output options there's two indices i then j i'll add a new line so if i were to run this this should display all of the questions and all of the options yeah here we are what year was c plus created who invented c plus plus what is the predecessor of c plus plus is the earth flat after all of the options are laid out we will accept some user input standard input we will place the user's input within guess then just in case the user types in something that's lowercase like a lowercase c we're looking for capital c so let's take the user's guess then make it uppercase guess equals to upper pass in guess so that will capitalize the character the user enters in then let's check to see if the user's guess is equal to the answer we'll need to access the answer key at index of i that's the current numbered question if those two values are the same we will display correct i'll add a new line then increment the user score score plus plus else the user's guess is not correct standard output wrong then we will display the correct answer standard output answer colon space we'll access the answer key at index of i then i'll add a new line okay let's try this so far what year was c plus plus created c who invented c plus plus that would be b what is the predecessor of c plus plus that is c the language c but it's option a is the earth flat what's earth d okay wrong answer b okay so we know that we can cycle through the questions outside of the for loop we will calculate the player score so right here i'll display the word results standard output results i'll add a new line actually now that i think of it i'm gonna steal some of these text decorations let's make it look pretty something like this would look cool but not necessary standard output correct guesses then we will display the current score add a new line standard output number of questions that is simply the size of our array add a new line then we will calculate a percentage what percent of the questions did they get right score score divided by size times 100 then we'll add percent so at first this isn't gonna work because we're using integer division but i'll explain that momentarily about typecasting uh so let's run this once let's say a b c d correct guesses one number of questions four uh our score was zero percent even though we got one right we'll need to add a cast to the divisor let's cast size as a double to hold that decimal portion then this should work a b c d correct guesses one number of questions four our score was twenty five percent now let's go for a hundred remember that the correct answers are c b a b 1985 bjorn strostrop the language c but that's option a is the earth flat no b correct guesses four number of questions four score one hundred percent well yeah everybody that is a quiz game you can make in c plus plus you can impress your friends or have your friends take the quiz you know you can change your questions around if you want if you would like a copy of this code i'll post this in the comments section down below and that is a quiz game written using c plus hey everybody welcome to the exciting world of memory addresses a memory address is a location in memory where data is stored in c plus a memory address can be accessed with an ampersand known as the address of operator suppose we have some variables i'll create a string the variable name will be well named assign this a string of text i'll create int age set sql to some value then a boolean boolean student i'll set that to be true a variable is a container for some data but these variables need to exist somewhere well they exist in your computer's memory at a given address we can find that address with the address of operator i'll display that standard output i would like to display the address of name then i'll just add a new line here's the address of my name variable in my computer's memory it's a bunch of weird letters and numbers well this is a hexadecimal address every time we run this program that number is likely to change let's display the addresses of agent student address of age address of student here are the memory addresses again all in hexadecimal so these are kind of like street addresses hey for fun let's decode these to decimal you can easily find tools online to convert hexadecimal to decimal let's see what these numbers are here are the hexadecimal memory addresses but converted to decimal they're like house numbers different data types take up more or less room than other data types if we look at the distance between my name variable and age well that has a gap of four memory addresses but the gap between my age and student variables is only one because well booleans only take up one byte of memory that's one of the reasons we use data types we need to know how much memory we need to allocate to fit a certain value if we're working with a boolean variable well we only need one byte of memory that's why the distance between the memory address of age and student is only one forty minus thirty nine is one integers take up four bytes of memory 44 minus forty is four four bytes so that's an introduction to memory addresses it's going to be helpful in the next topic when we discuss pointers if you would like a copy of this code i'll post this in the comments section down below and that is an introduction to memory addresses in c plus all right everybody so i'm gonna explain the differences between pass by value and pass by reference in this example we'll swap two variables suppose we have two imaginary cups i'll name the first cup x x will contain koolaid then we have cup y which contains water i need to swap these two values will need the help of a temporary variable at temp to swap two variables we would assign a temp equal to x x equals y y equals temp let's display these variables standard output x the variable x i'll add a new line let's copy this paste it y the variable y this should work x now contains water y contains koolaid now check this out what if we create a function to swap two variables for us the return type will be void i'll name this function swap there will be two parameters string x string y let's copy this section of code delete it then paste it within the swap function then you'll need a function declaration at the top of your program then we will invoke this function swap pass our arguments x and y let's see what happens okay what the heck x still contains koolaid y still contains water these values weren't switched within my variables x and y even though we invoked this function so why didn't it work well that's because normally when we pass a variable to a function we're passing by value when we invoke this function we're creating copies of the original values what we have now are two copies of the variable x and y and all we're doing is switching the two copies and not the original values so that's passed by value we're creating copies of the arguments if i need to change the original values of these variables i could instead pass by reference a reference as in a memory address an address in your computer's memory where a value is located i will prefix the address of operator which is an ampersand to these parameter names then add that to your function declaration as well now let's see what happens yeah those two variables were switched x contains water y contains koolaid when we passed by value we created copies of x and y with the parameters when we use the addressof operator we're passing memory addresses to where the original x and y variables are located and then swapping the values just to reinforce this idea let's revert to passing by value i'm going to display the address of x and y then within our swap function let's get rid of this code then i will also display the addresses of x and y see we have four different addresses our original x variable has a different memory address than the one that's within the function same thing goes with y these two addresses are different we have two x variables and two y variables originally within that swap function we were switching the values of the x and y copies if we instead pass by reference let's use that address of operator again well now x and y are referring to the same place they have the same memory addresses that's why the swap function worked when we passed by reference in place of pass by value so that's the main difference between pass by value and pass by reference you should use pass by reference as often as possible unless you have a reason to pass by value if you would like a copy of this code i'll post this in the comment section down below and well yeah that's the main difference between pass by value and pass by reference in c plus hey everyone in this topic i'm going to explain const parameters a const parameter is a parameter that is modified with a const keyword that makes it effectively readonly there's a couple reasons why you might want to declare a const parameter your code is more secure within a function and it conveys the intent to other programmers it's especially useful for references and pointers here's an example of const parameters in action i have standard string name assign your first name then int age whatever your age is then suppose i have a function to print my info void print info and there will be two parameters standard string name int age be sure to add a function declaration if you're missing it then if i need to call this function i would invoke the function name pass in my arguments name age then we can print our info standard output name standard output age this of course does what you expect it prints our name and our age to make this function more secure we can instead use const parameters that means that we can't change the values that we receive name and age in this case just as a test let's set name equal to an empty space and age equals zero i don't want this to be able to happen at all now when i run this we don't have a name and we don't have an age to make these parameters readonly we can precede the parameters with that const keyword const string name const int age and you would probably want to add that to your function declaration as well just to display intent there we have an error assignment of readonly parameter age and name is somewhere up here but i don't feel like reading all that when we pass our string and our integer as arguments what we're doing is effectively making a copy of name and age technically we're not modifying the original variables in this case using the const keyword when we pass a variable by value isn't really that big of a deal but it at least conveys intent if we were working with reference data types now we'll pass by reference well now it's a bigger deal we don't want anybody modifying the original name and age variables alright everybody those are const parameters they are parameters modified by the const keyword that effectively make them readonly within a function your code is more secure and it conveys intent it tells other programmers hey don't mess with these values they're useful with references so that nobody can change the value found at that reference then in the case of pointers nobody can change the address of where a pointer is pointing to so yeah those are const parameters in c plus hey everybody in this topic we're going to create a program to validate if a credit card number is valid or not to do so we'll need to utilize the loon algorithm which i've broken into these steps if you need some test credit card numbers you can always google them i found a bunch on this website let's just take this one for example and to make this more readable i'll divide this number into groups of four step one we double every second digit from right to left if the double number is two digits split them i'm only concerned with every second digit from right to left so we can eliminate some of these that we won't be using then we're going to double these numbers so two doubled as four nine doubled as 18. since we have the number 18 that's two digits we need to split them we'll split 18 to 1 and 8. then 6 doubled is 12. we'll split that step 2 we need to add all of these numbers together to create a sum the sum is 29. step three add all odd number digits from right to left with the original number so now we're only concerned with the odd numbers then we just add these numbers together no need to double them the sum is 21. step four we sum the results of steps 2 and steps 3 29 plus 21 that equals 50. step 5 if step 4 is divisible by 10 that number is valid we could say our result modulus 10 if that number is divisible by 0 that number is valid 50 is divisible by 10 so that number is valid we'll create a program that will do all of this for us let's create our functions we'll need three int get digit the parameter will be a constant integer that i will name number int will need to sum the odd digits the parameter is const standard string card number let's copy this paste it sum even digits the parameter is the same let's copy these functions and add some declarations we do need to return something otherwise we'll get a warning for the time being i'm just going to return xero as a placeholder okay let's begin with the main function we'll need a credit card number that will be a string standard string card number then int result and i will set that equal to zero right away we'll prompt the user to enter in their credit card number standard output enter a credit card number standard input card number result equals will invoke the sum even digits function pass in our card number plus some odd digits pass in our card number we'll need to fill in these functions let's begin with some even digits we can get rid of this i'll create a local variable named sum to keep track of the sum what we'll need to do is iterate over our card number in reverse order we can treat a string as an array of characters and we can iterate over that so we'll need a for loop and we will iterate over this card number in reverse order starting from the end we'll need an index into i equals then we'll need to find the size of our card number there's a builtin function for that card number dot size now arrays they always start with zero so we're going to subtract one however if we're summing the even digits beginning from the right we'll need the second to last digit so that would actually be minus two the very last digit would be minus one our index i will begin from the second to last position i would like to continue this for loop as long as i is less than or equal to zero then we will decrement i by two i minus equals two because we need every even digit so we will take sum plus equals then invoke the get digit function get digit within the get digit function as an argument we're going to pass in card number at index of i times two however there's one more thing that we'll need to do with card number at index of i we will subtract the character zero and here's why we're currently working with a string of characters you can also treat a string as an array of characters each character according to the ascii table has an associated integer value a decimal value if i'm passing one of these characters as an argument to my get digit function we'll treat that character as if it was its decimal equivalent according to the ascii table the character 0 has a decimal value of 48 the character 1 is 49 2 is 50 then all the way up to 9 which has a decimal value of 57 so if i'm passing in the character at index of i what we'll end up working with is the decimal representation of that character if we subtract the character 0 or its equivalent 48 that would give us a range of numbers zero through nine for example the decimal equivalent of the character 9 is 57 57 minus 48 would be 9. you could subtract either 48 or the character zero that would give us numbers zero through nine according to the ascii table then we're multiplying that number by two then at the end we will return whatever the sum is let's fill in this get digit function within the get digit function the digit that we're working with was doubled whatever number we passed in it may take two digits for example like nine times two is eighteen we need to split those two numbers to get one and eight so i'm going to return number modulus 10 plus number divided by 10 modulus 10. that will split the two numbers for example let's say our number that we're passing in as an argument is eighteen nine times two eighteen modulus ten would give us eight eighteen divided by ten that would give us one since we're using integer division one modulus ten is one eight plus one is nine then we're just returning that number nine okay that is the get digit function then we need to sum the odd digits and really we can just copy all this then paste it but there's a couple changes to make int i equals card number dot size function minus one we need to begin at the end and then sum plus equals card number minus zero when summing the odd digits there's no need to double the odd digits that's only with the even digits and that is all the functions let's close out of these so we'll have a result the sum of the even digits plus the sum of the odd digits if result is divisible by 10 that number is valid if result modulus 10 is equal to zero then that number is valid standard output card number is valid else card number is not valid okay let's try this i'm going to enter in that original number that we worked with that discover card okay enter a credit card number i'm going to paste this hit enter that number is valid let's try that again so i'm going to enter in the same card number except i'll add one to the end that number is not valid hey if you have your own credit cards feel free to try them too and see if it works all right everybody that is a credit card validation program mostly for practice if you would like a copy of this code i'll post this in the comments section down below please be sure that you do not enter in your own credit card into the comment section and well yeah that is a credit card validation program using c plus all right everybody we finally made it to pointers a pointer is just a variable that stores a memory address of another variable that's it the reason that we use pointers is because well sometimes it's just easier to work with an address here's an example i have a stack of maybe 20 pizzas that i'm going to give out for free to my neighborhood instead of going around house to house carrying the free pizza and handing it out it's a lot easier to go door to door and tell people where the pizza is located hey there's free pizza at my house at this address come and get some and that's one of the uses of pointers sometimes it's easier to just work with an address i'll tell people where the free pizza is rather than carry it around with me so when working with pointers we'll need to use the address of operator which is an ampersand as well as the d reference operator which is an asterisk let's begin with the name i'll create a pointer to a name standard string name assign your first name then we'll create a pointer to name where is my name located in my computer's memory to create a pointer it should be of the same data type as the variable it's pointing to i'm creating a pointer to a string this pointer will be of the string data type then type asterisk that dereference operator then a common naming convention for pointers is you type p then the variable name but i'm going to make the first letter uppercase i will set this pointer equal to the address of that name variable and there we go we have a pointer so if i was to display this pointer standard output p name my pointer contains this value it contains a memory address as its value to access the value at this address you would use the dereference operator i'm accessing the value of that address that's stored within this pointer which contains my first name by using this d reference operator i'm accessing the value that's at this given address which contains my first name let's create a couple other pointers let's create a variable age into age equals make up some age i'll create a pointer to age the data type of the pointer should be the same as the variable int dereference operator p age equals the address of age then let's display whatever value is located at the address that's stored within my pointer of ph so we have my first name and then an age i think i'm just going to add a new line real quick going back to that analogy with the free pizzas i'll create an array an array of strings i'll name this array free pizzas i'll give this a size of five we have pizza one pizza two pizza three pizza four then pizza five like i said in my example it's a lot easier instead of carrying around five free pizzas house to house giving away pizza i can just tell people where the pizza is located i'll give them an address i'll create a pointer to this array we'll use the same data type we're storing strings d reference operator p free pizzas now i'm going to attempt to set this to the address of free pizzas now we're going to run into a problem my array is already an address so i don't need to use the address of operator let me demonstrate i will display see out free pizzas when accessing my array free pizzas it's already a memory address if i display the value contained within my pointer to my free pizzas it's going to be a memory address then if i was to use the dereference operator that would give me the first element within that array pizza one so those are pointers it's a variable that stores a memory address of another variable sometimes it's easier to work with an address instead of carrying five free pizzas with me and going house to house giving it away i'll just tell people where the free pizza is so those are pointers your assignment is to post a pointer in the comment section down below and well yeah that's an introduction to pointers in c plus what's up everybody so let's talk about null pointers but first we'll need to know what a null value is a null value is a special value that means that something has no value when a pointer is holding a null value that means that pointer is not pointing to anything that's what we would call a null pointer there is a keyword that represents that null ptr ptr meaning pointer it's a keyword that represents a null pointer literal one of the reasons that we use null pointers is that they're helpful when determining if an address was successfully assigned to a pointer if we create a pointer but don't assign it a value we don't know where it's pointing to it would be good practice that that pointer doesn't point anywhere so let's create a null pointer i'll create a pointer of the int data type we use the dereference operator pointer if i'm not going to assign this pointer and address right away it would be good practice to assign this pointer null ptr null pointer later on in your program if you need to assign an address let's say int x equals one two three i would just take my pointer set the sequel to the address of my variable if you dereference a null pointer it can lead to undefined behavior or if you dereference a pointer that's not assigned a value well that can lead to undefined behavior too what some programmers do is that they'll check to see if their pointer is a null pointer before continuing kind of like a system of checks and balances we assigned our pointer the address of x i would like to check to see if my pointer contains a valid address before dereferencing it so we could say pointer equals null pointer was my pointer assigned an address or is it still a null pointer if my pointer is still a null pointer that means we did not successfully assign an address to my pointer there may be situations such as when working with dynamic memory where you attempt to assign an address to your pointer and it fails this would be a good way to check to see if that failed or not if your pointer still remains a null pointer so let's say address was not assigned else standard output address was assigned so let's run this currently our pointer is pointing to the address of x address was assigned now if for some reason we did not assign an address i'll turn this line into a comment to represent that well our pointer is still going to be a null pointer address was not assigned if your pointer is still a null pointer it's not safe to dereference that pointer if i need access to the value that's at that pointer it would be safe to do so within this else statement standard output dereference operator pointer so my pointer contains the number one two three if i were to dereference this null pointer that would lead to undefined behavior i have no idea what's gonna happen don't try this at home kids null pointer is a keyword that represents a null pointer literal when declaring a pointer it's good practice that our pointer is pointing to a valid address or this null pointer keyword because otherwise we don't know where it's pointing originally they're helpful when determining if an address was successfully assigned to a pointer when using pointers be careful that your code isn't dereferencing a null pointer or pointing to any free memory that we're not using because that can lead to undefined behavior so yeah everybody those are null pointers in c plus hey guys in this topic we're going to create a game of tictactoe we'll be working with random numbers you may or may not need to include this header file include c time we'll add some function declarations then some definitions void draw board there will be one parameter a pointer to an array named spaces spaces will be a onedimensional array that will keep track of all the markers like what spots are taken what spots are occupied player move the parameters will be a pointer to spaces and char player computer move a pointer to spaces char computer check winner a pointer to spaces char player and char computer then lastly check tie and all we need is a pointer to our array spaces oh uh check winner and check tie will both return a boolean value okay let's add some function declarations so after the main function let's paste these we do need to return some value for check winner and check tie because there is a return type just for now as a placeholder i'm going to return zero but we'll change that later let's head to the main function and declare everything that we'll need a character array named spaces the size will be nine nine spaces will have nine elements each contains an empty space one two three four five six seven eight nine good char player pick a character that you'd like to be you could do x or something else computer pick a character for the computer let's begin with o boolean running i'll set the sequel to true when we begin our game we will immediately invoke the drawboard function then pass in our array so remember when we pass an array to a function it decays into a pointer so we don't need to create a pointer for this array within the dropboard function we will display a grid so let's write something like this standard output i'll add five spaces one two three four five then a vertical bar five spaces again one two three four five vertical bar one two three four five then a new line okay let's copy this line right in the middle i'm going to add one of the elements of our array spaces so right about there spaces at index zero i'm going to copy this section of code right in the middle between the two vertical bars i'll paste what we copied spaces at index one then again right in the middle paste what you have spaces at index 2. this time we'll create a horizontal bar let's copy this we'll replace the spaces with underscores so right about there okay let's see what we have okay yeah something like this we'll have a player or the computer right in the center so let's copy this line on top paste it underneath copy this line that displays elements of our array paste it underneath but change the element numbers three four five then we'll copy this line paste it underneath let's double check to see what we have okay we're getting somewhere let's copy this line paste it copy one of these lines where we display the elements of the array paste it underneath so we are missing elements six seven eight let's copy one of these empty lines paste it underneath uh then before and after we display this grid i'll just display a new line standard output new line and let's do that after okay let's see what we have yeah not too bad there's our grid of nine spaces okay that is the drawboard function we can close out of this we're done with it when we invoke the drawboard function we will pass in our array which decays to a pointer and then prints our board let's add a while loop after the drawboard function while our condition is running running is set to true initially when we exit out of the game we'll set running to be false the first thing that we'll do is invoke the player move function player move but we need to pass in our array spaces as well as a player player then let's fill in the player move function okay player move i'll create a local variable named number the user will enter in a number between one and nine depending on what space they'd like to occupy with their marker i'll create a do while loop do while the condition will be not number is greater than zero or not number is less than eight the user can only enter in a number between 0 and 8. those numbers correspond to the elements of our array elements with indices 0 through 8. within the do while loop we'll ask for some user input standard output enter a spot to place a marker one through nine whatever the user types in we'll just subtract one because the user doesn't know that arrays start with zero supposedly standard input number so the user will enter in a number between one and nine then we will decrement the number by one because the array starts with zero if spaces at index of number whatever the user types in is equal to an empty space if that space isn't occupied we'll add that marker to that spot spaces at index of number equals the player's marker then we'd like to break out of this while loop so after the player moves let's draw the board again to reflect any changes okay enter a spot to place a marker how about one yeah there's our marker let's try it again how about nine yep and we are in the last spot the bottom right corner let's enter in a number that's outside of this range like 100 enter a spot to place a marker uh negative one okay so we're limited to the numbers one through nine even if i were to type zero we still can't uh so let's try something in the middle that would be one two three four five yeah and there's our marker i'm just gonna add a colon then a space okay and that is the player move function we can close out of this function let's work on the computer move function next within the while loop let's invoke that function pass in our spaces array as well as whatever character the computer is then we will draw the board again right after just update it within the computer move function we'll create a local variable named number we'll need a seed to generate a random number s rand within the parentheses invoke the time function pass in zero or null and we should be able to generate some random numbers so i'm going to create a while loop while the condition will be true i would like to generate a random number between 0 through 8. we'll take number set the sequel to rand function modulus nine number will be random between zero and eight technically if we pick a spot number that is occupied already we'll need to reroll a random number if spaces at index of number is equal to an empty space we'll take spaces at index of number set the sql to the computer's marker then break out of this while loop let's test this function after we pick a spot the computer will pick a spot too yep so the computer picked a spot right in the middle let's try it one more time i'll pick the spot in the middle again so that would be five and our computer picked spot number two cool let's close out of the computer move function after the player moves then we draw the board again we will check a winner i'll use an if statement within the condition of the if statement we will invoke the check winner function the check winner function returns a boolean value so that's why we're placing it within the if statement but we need to pass in a couple arguments our spaces the player and the computer if there's a winner if this evaluates to be true we will set running equal to false and we will break let's add this if statement to after the computer moves too okay let's fill in the check winner function so right down here we'll need to check all of the different win conditions they're several normally i would use a switch but it's going to get very complicated especially for beginners i think just to make this easier we'll use a bunch of if and else if statements within the first condition of the if statement we'll check to see if the first row all has matching characters so we can do that by saying spaces at index of zero is equal to spaces at index of one and spaces at index of one is equal to spaces at index of two if all three characters in the first row are the same that means that somebody won i'm going to use the ternary operator here we have to determine who won the player or the computer let's check to see if the first index spaces at index 0 is equal to the player's marker ternary operator like we're asking a question if the player occupies the first row then we'll print standard output u win otherwise standard output you lose then i'm just going to add a new line here and here okay there's one more thing we have to do with this condition and i'll explain that so let's run this i'll pick spot number nine you lose the reason that we lost is that we're checking to see if the first row all has the same characters they're technically all empty spaces so our program thinks that somebody won because all of these characters match there are three empty spaces i'm going to amend this if statement we'll want to ensure that none of the spaces are empty and really we only need to check the first space i'll make this amendment spaces at index of zero does not equal an empty space and all these other conditions if you'd like to keep this more organized you can always surround some of these conditions with parentheses i think it's more legible that way let's try that again just to be sure that it's working i'll pick something in the middle okay yeah so the computer doesn't win automatically if there's three empty spaces in the first row okay so that is the first win condition let's copy this condition i'll add else if now we'll check the second row if space is at index 3 is not equal to an empty space and space is at index 3 is equal to spaces at index four and spaces at index four is equal to spaces at index five then does spaces at index three equal to player okay so that is row two let's copy and paste that else if statement then we'll need to check the last row space is at index six six is six equal to seven and is seven equal to eight so these conditions will check all of the rows then we'll need columns let's copy one of these elsif statements paste it so we have 0 0 is 0 equal to 3 and is three equal to six okay now time for the second column space is at index one one right here as well is one equal to four and is four equal to seven copy this again paste it then we have the third column two two is two equal to five and is five equal to eight okay now the diagonals space is at zero zero is zero equal to four and is four equal to eight then the last diagonal space is at index two two is two equal to 4 and is 4 equal to 6. if there's no win conditions we'll have an else statement we will return false then all we have to do at the end of this function is to return true somebody won okay so let's test this i'll try and win with the first row one two three you win this time i'm gonna try and lose one two four seven whoops seven's taken uh eight there we go you lose we can close out of the check winner function we know that it's working then we just need to check to see if there's a tie if there's no more spaces available within the main function after our if statements we'll add else if we'll invoke the check tie function pass in our spaces check tie returns a boolean value if it's true we will set running to be false then break then add that after the computer move section 2 so right here then let's fill in this function within the check tie function we'll iterate over the elements of our array spaces we'll use a for loop four and i equals zero we'll continue this as long as i is less than nine because there's a total size of nine spaces increment i by one if spaces at index of i is equal to an empty space that means we can continue return false there's still empty spaces if we iterate over our array and there's no empty spaces well then we'll display standard output it's a tie i'll add a new line then we will return true and we can get rid of that okay so let's close out of this check tie function then after we exit our game outside of this while loop let's display a message standard output thanks for playing all right and that's everything let's run this i'm gonna try and get a tie this time one two six seven eight it's a tie thanks for playing all right everybody that is a game of tictactoe for beginners if you would like a copy of this code i'll post this in the comment section down below and well yeah that's a game of tictactoe using c plus hey everybody we finally made it to dynamic memory dynamic memory is memory that is allocated after the program is already compiled and running to allocate dynamic memory we use this new keyword it's an operator it allows us to allocate memory in the heap rather than the stack it's useful when we don't know how much memory we'll need it makes our programs more flexible especially when accepting user input because we have no idea what the user is going to type in here's an example we'll start with a basic integer variable but we'll allocate memory in the heap rather than the stack by using that new keyword i'll create a pointer int the reference operator p num now it's good practice when you declare a pointer but don't assign it right away to give it a value of null meaning no value to allocate memory in the heap rather than the stack i'll take my pointer set the sql to use the new operator then a data type i'll use up enough space in the heap for one integer the new operator will return an address we're storing that address within pnum because it's a pointer it's pointing to a memory location where we're going to store an integer later on in your program whenever you would like to store a value we can use the dereference operator our pointer then assign some value like 21 i don't know just for fun i'm going to display the address that's stored within the pointer address p num then i'll add a new line as well as the value value dereference operator p number our pointer is storing this address and at this address in the heap that address contains this value 21. now it's very good practice if not expected whenever you use the new operator you'll also want to use the delete operator when you're no longer using that memory space so at the end of this program or earlier if you choose we will delete our pointer delete p num we're freeing up the memory at this address if you don't you may cause a memory leak and it's best to avoid that whenever you use the new operator you probably should be using the delete operator someplace within your program here's another example we're going to dynamically create an array let's create an array of grades char then we'll need a pointer the reference operator p grades set the sequel to null if we're not going to assign this pointer right away then to dynamically create an array we will take our pointer set the sql to new the data type char if this is an array we add a set of straight brackets within the straight brackets we will list a size if i have five grades to enter in i would type in five but if we already know the size of the array before we even run the program we might as well do that normally like create a normal array there's no point to allocating memory dynamically we would want to do that when we don't know what the size is going to be so i propose we ask for some user input let's say int size will create a prompt standard output how many grades to enter in standard input size will dynamically allocate enough memory in the heap depending on how many grades the user has to enter in i'll just create a for loop so that we will ask the user to enter in some grades and i equals zero i will continue this as long as i is less than size increment i by one standard output enter grade number i plus 1 because i will be 0 to begin with and i'm just going to add colon space afterwards standard input p grades that's our pointer now we can either add plus i or use those straight brackets at index of i either way let's display all of the grades and i equals zero i is less than size i plus plus standard output p grades at index of i i'll separate each with the space and remember if we no longer need this array we should delete it to prevent a memory leak if we have to delete an array we'll add a set of straight brackets after delete then our pointer p grades and let's try it how many grades to enter in so we don't know what the user is going to type let's say six grades enter grade one a b c d f a and here are the grades so that's why dynamic memory is useful it's memory that is allocated after the program is already compiled and running we use the new operator to allocate memory in the heap rather than the stack it's useful when we don't know how much memory we will need it makes our programs more flexible especially when accepting user input so that is an introduction to dynamic memory we'll have more practice with this in the future so don't worry if you would like a copy of the code that we worked on i'll post that in the comments section down below and well yeah that's an introduction to dynamic memory in c plus hey guys i gotta explain recursion recursion is a programming technique where a function invokes itself from within we break a complex concept into repeatable single steps many problems we can approach iteratively or recursively some of the advantages of recursion include less coderight and typically it's cleaner it's also useful for sorting and searching algorithms however some of the disadvantages of recursion is that it uses more memory and a slower there's a tradeoff it's up to you if you'd rather use an iterative approach or a recursive approach here's an example we'll break a complex concept maybe such as walking into repeatable single steps to accomplish the task of walking we would take a single step and then just repeat that a bunch of times we'll do this first iteratively then recursively so let's create a function to walk void walk there will be one parameter a number of steps let's define this walk function we'll use an iterative approach first to do that we can use a for loop we'll set int i equals zero we'll continue this as long as i is less than our steps then increment i by one i will display just you take a step then i'll add a new line so we will invoke this function pass in how many steps we would like to walk i would like to walk 100 steps and here we go we printed you take a step 100 times this is an iterative approach if we were to take a recursive approach we would invoke this function from within itself so i'm going to turn this for loop into an if statement we'll need a base case when do we stop if steps is greater than zero we will display you take a step then i'm going to invoke the walk function from within itself then i will pass in steps minus 1. this would be a recursive approach we're invoking the walk function from within itself you'll end up in a function within a function within a function within a function so on and so forth so when i run this this would do the same thing but we've done so recursively the advantages with recursion is that the code tends to be easier to write i find this if statement a lot easier to understand than that for loop although they're both pretty simple however with recursion it uses more memory and it takes more processing time in the case with our walk function i would probably stick with an iterative approach there's really not much benefit in this case but in the case of let's say a searching algorithm or navigating a tree data structure recursion would really help us with that so let's say we don't have a base case that's when we stop what if i just call the walk function forever well we end up in an infinite loop and we would encounter what's called a stack overflow when you invoke a function you add what's called a frame to the stack when your stack is overloaded you'll encounter a stack overflow so that's one problem with recursion so let's try a different example we'll create a factorial function if you don't remember factorial is a mathematics concept where you take a number and you multiply that number times the previous number minus one times the previous number minus one times the previous number minus one until you reach one you multiply all these numbers and you're given a result i'm going to demonstrate a function to do that both iteratively then recursively let's begin with an iterative approach we will return an integer this function will be named factorial we'll pass in an integer named num i'll immediately display the output standard output factorial then pass in some number maybe 10. let's define this function if i was to take an iterative approach i would write something like this end result this will be a local variable i'll set this equal to one i'll create a for loop and i equals one we'll continue this as long as i is less than or equal to our number increment i by one i will take our result equals result times whatever i currently is at the end of this program we will return result factorial ten that would be three million six hundred twenty eight thousand eight hundred if i was taking a recursive approach i would write something like this we would need a base case when do we stop if num is greater than 1 we will return num times invoke factorial again our number minus one else we will simply return one this would do the same thing but recursively factorial ten is three million six hundred twenty eight thousand eight hundred those were two different approaches to the same problem when we did this recursively we have a function call inside of a function call inside of a function call inside of a function call you get the idea personally i find a recursive approach to be a lot easier to read and understand although remember it uses more memory and a slower when you start to learn about sorting algorithms that's when recursion is really going to help you quite a lot it will simplify the steps so that's recursion everybody it's a programming technique where a function invokes itself from within we break a complex concept into repeatable single steps whenever you see a function invoking itself from within you'll know that that's recursion hey if you would like a copy of this code i'll post this in the comment section down below and well yeah that's recursion in c plus hey everyone let's discuss function templates a function template describes what a function looks like they can be used to generate as many overloaded functions as needed each using different data types how is this useful suppose we have a max function that will accept and return an integer int max the parameters will be int x and y will return i'll use the ternary operator here is x greater than y if so return x if not return y this function is compatible with integers as arguments let's display standard output max then pass in two integers like one and two so this would return the number two but what if i would like to use this function with doubles such as 1.1 and 2.1 while we're truncating that decimal portion we're returning to not 2.1 if i want this function to be compatible with doubles normally i would have to create an overloaded function that accepts doubles and returns a double replace int with double and i guess this would work technically the value returned is 2.1 what about characters how about the character 1 and the character 2. technically we could use the max version that accepts integers because there's an associated ascii value with each of these characters but i would like an overloaded function that accepts and returns characters char char char so this would return the character 2. this is a lot of work creating three overloaded functions that each do the same thing the only difference is that they accept and return different data types what if we could write one function that will accept any data type well that's what function templates are to create a function template take your function replace any data type with t we're returning an integer let's instead return t the data type of x will be t same thing with y using t as a common naming convention i like to think of it as thing like we're not sure what the data type is we're returning a thing that's just how i think of it however our compiler doesn't know what t is exactly we'll need to add a template parameter declaration before this function template definition we'll add a declaration of what t is so type template angle brackets type name t and that's it this function template will work with many data types characters doubles integers you name it so yeah just replace the data type with t then be sure to add a template parameter declaration now here's a scenario what if you need to mix and match the data types i'll find what the max is between the integer 1 and the double 2.1 well we have a problem no matching function for call 2 max int double with this function template it's only set up to receive arguments of the same data type now we're passing in two different data types what we could do within our template parameter declaration is add another template name i'm going to add type name u because u comes after t in the alphabet then if you needed more you could add v w x so on and so forth i'll change one of these t's to a u this function template is set up to receive up to two different data types as arguments but there's one more change we need to make so we don't have that error anymore but the decimal portion of our double is truncated it's returning two that's because we're still returning t and t we set to be an integer in this case do we set the return type to be t or u actually better yet we can set this to auto using the auto keyword the compiler will deduce what the return type should be this should return 2.1 all right everybody that is a function template it describes what a function looks like they can be used to generate as many overloaded functions as needed each using different data types i like to think of it like a cookie cutter we're determining what the shape is but the arguments the dough that we use for our cookies can be different but the cookies will end up having the same shape one of the main benefits of using function templates is that we only have to write a function once and then it's compatible with different data types so you don't need multiple versions of the same function we'll generate functions using this template as needed so yeah those are function templates everybody your assignment if you choose to do so is to write a function template in the comment section down below and well yeah those are function templates in c plus well okay then everybody we gotta talk about structs a struct is a structure that groups related variables under one name think of an array an array can store multiple values of the same data type well a struct can store multiple values of different data types we can store strings along with ins doubles booleans etc to create a struct let's do so outside of the main function type struct then we need an identifier this is kind of like the data type suppose we're going to group related variables for students i'll name this identifier student within the structure of student variables that we declare are known as members i think each student should have a name member this will be of the string data type string name i'll declare this but not yet assign it as well as a gpa that could be of the double data type then a boolean variable if they're currently enrolled or not enrolled then be sure to end your struct with a semicolon our struct student is kind of like its own data type we can use this data type to declare variables i'll create a student variable of this data type and that variable will have these three different members a name a gpa and a boolean variable for being enrolled much like with creating a variable we type the data type student and then some name some identifier let's name the first student student one student one will have its own name gpa and enrolled status if i would like to assign the name member of student one i would type the name of the student student one followed by dot members can be accessed with a dot also known as the class member axis operator i'll assign the name member and set the sequel to spongebob i'll assign student one's gpa student1.gpa i'll give spongebob a solid 3.2 then i could set his enrolled status student one dot enrolled i'll set this to be true then we could access these members i'll display them standard output student1 dot name i'll add a new line let's do the same thing with gpa and enrolled student1.gpa student1.enrolled this is what this looks like we have a student variable the name member is spongebob spongebob has a gpa of 3.2 when accessing boolean variables 1 corresponds with true 0 corresponds with false enrolled is set to true so that would return one let's reuse the struct to create a second student i'll just copy what we have here then paste it we'll give the second student a different identifier such as student two student two will have a name member of patrick a gpa of 2.1 and he will be enrolled that's set to true let's display student two's members student2.name student2.gpa then student2.enrolled these first members correspond with student1 spongebob 3.2 one for true the second set is for student two patrick has a gpa of 2.1 and patrick is currently enrolled okay one last example let's create student three let's copy what we have paste it student student3 student3.name student3.gpa student3.enrolled student 3's name will be squidward squidward has a gpa of 1.5 let's set enrolled to be false then display student three's members student three dot name student three dot gpa student three dot enrolled and here are student threes members squidward 1.5 and 0 that means false now with members you can set a default value i'll set enrolled to be true then we don't need to explicitly state that underneath spongebob patrick and squidward their enrolled member is all set to 1. with members you can set a default value so yeah those are structs it's a structure that groups related variables under one name structs can contain many different data types variables in a struct are known as members and members can be accessed with a dot the class member axis operator so those are structs your assignment is to post a struct in the comments section down below and well yeah those are strucks in c plus hey everybody in this topic i'm going to show you how we can pass a struct to a function in c plus plus suppose we have a struct the identifier of the struct will be cars then we'll create some members related to cars how about a model standard string model a year end here then a color standard string color then let's go ahead and create two car strucks how about car car one car car two then we'll assign the members car one dot model pick a model of a card that you like then a year and a color let's do the same thing with cartoon car 2. model car 2.ear car 2.color let's pick some different data that'll work suppose we have a function to display the members of a car void how about print car we're printing the members we'll need some parameters the data type of what we're passing in are car structs so we'll list that as the data type then some nickname for the argument that we receive how about just car then i will display the members standard output car dot model should probably add a new line too then do the same thing with year and color car dot ear car dot color let's test this by printing car one print car 1 we will pass the name of a struct as an argument then i think we're just missing a function declaration so if you're missing that be sure to add that there now let's run this okay here's our car mustang 2023 and the color's red now with structs they're passed by value rather than pass by reference if we pass a struct as an argument what we're doing is creating a copy of the original struct to demonstrate that let's display the address of car 1 before and within the function standard output address of operator car 1 i'll add a new line then let's do that within the function too the parameter name is car not car one there so let's try that so these addresses are different when we pass the struct to a function the function will create a copy of it it's passed by value we're displaying the members of the copy rather than the original if you need to work with the original struct you can use the address of operator we're passing a reference to the original car struct then be sure to change that within the function declaration as well so let's take a look at the addresses now yeah these addresses are the same car 2 is feeling pretty lonely so let's print car 2 as well print car pass in car 2 as an argument to this function so we should have car 1 and car 2. this time let's change one of the members within a function let's create a function to paint car paint it a different color paint car there will be two arguments an address to a car as well as a color which will be of the string data type be sure to add a function declaration if you're missing it then within this function we will take our car dot color equals the new color that we receive now before we print our cars let's paint them a different color paint car we have two arguments this time a car struck and a new color let's paint our mustang silver then let's paint cartoon maybe gold then let's display this okay our mustang is now silver and our corvette is now gold so if we didn't use the address of operator when painting our car let me show you what happens our cars are still the original colors red and blue what we did within this function is that we created a copy of our car strucks and change the color of the copies rather than the originals so if you need to make any changes to the original you would want to use the address of operator so that's how to pass structs to functions you can pass by value which can be expensive or you can pass by reference your assignment if you choose to do so is to post a function that accepts a struct as an argument and that's how to pass structs to functions in c plus hey everybody we gotta talk about enums enums also means enumerations it's a userdefined data type that consists of paired named integer constants they're great if you have a set of potential options here's an example suppose we have a day of the week standard string today then pick a day i'll pick sunday normally you can't use strings within switches but we can use enums which are kind of similar let me explain so i'm going to create a switch we will examine today normally we can't do this because it's a string we'll examine today against many matching cases case sunday and i'll speed up the footage okay here's my switch depending on what day of the week it is we'll display a custom message it is either sunday through saturday one of these days so normally we can't do strings within switches this is what happens when we attempt that error switch quantity not an integer something similar that we can use are enums they're paired named integer constants we have a name and an associated value they're interchangeable at the top of my program i will declare enum then a name for the set of enumerations let's say day for day of the week we have sunday monday tuesday and you know the rest you can associate a value with each of these names sunday equals zero monday equals one then we'll just continue on with the rest of these i'm going to group these together like that okay we have our enum setup this identifier is kind of like the new data type we're not working with strings anymore we're working with days these are a set of potential options each option is a pair of a name and some associated value you can really pick any value i went with the numbers 0 through 6 to represent the day of the week i'm going to set today to sunday this name we can now use this within a switch there's an associated integer value but we'll change the cases from strings to that enum data type and this would work it is sunday within the cases you could use the associated values as well i'm gonna change today to be friday case zero is sunday monday is one two three four five six it is friday so that also works but i don't think it's as readable another cool thing with enums is that enum variables take only one value of the set if i try and make up some value like pizza day well we can't do that pizza day was not declared in the scope here's a few other enum examples you could create a set of enums for flavors vanilla chocolate strawberry mint an important note is that if you're working with enums and you don't assign an integer value to each of these names you'll implicitly assign zero to the first name then one two three kind of like what i did up here but we explicitly assigned to those values we have six colors or maybe planets i have a set of enums of the nine planets in our solar system the associated integer is the size of each planet in kilometers so yeah those are enums they're a userdefined data type that consists of paired named integer constants they're great if you have a set of potential options your assignment is to post a set of enums in the comments section down below and well yeah those are enums in c plus plus hey everybody so we have finally made it to object oriented programming an object think of it as a collection of attributes and methods attributes are characteristics of an object methods are functions that an object can perform objects can be used to mimic realworld items so look around you right now next to me i have a phone a book and a dog think of attributes as characteristics what kinds of characteristics would a phone have maybe a version number a charge a service provider objects can also contain methods what kinds of actions can a phone perform they can make calls receive calls play games now with a book some of the attributes of a book could be maybe an author number of pages let's see what kinds of methods can a book perform really not much you can open a book and you can close it so those are just a few okay lastly how about a dog object some of the attributes of a dog could be a name an age maybe a breed of dog then what kinds of actions can dogs perform they can eat they can bark they can sleep maybe play fetch so i think you get the idea an object is a collection of attributes and methods now to create an object we can use a class a class acts as a blueprint to create objects let's create a class to create human objects i will type class human curly braces i'm going to add a public axis modifier we'll learn about axis modifiers pretty soon i would like these attributes and methods to be publicly accessible let's start with the attributes of humans what kinds of characteristics can humans have how about a name this will be of the string data type i'll declare this attribute but not yet assign it maybe an occupation like a job standard string occupation then maybe an age int age our class human has these attributes humans have a name an occupation and an age that's good enough for this example now let's cover methods a method is a function that belongs to a class it's something that an object can do an action it can perform what sorts of actions should our humans be able to perform how about an eat method void eat i'll just display a message standard output let's say this person is eating humans can drink void drink standard output this person is drinking okay one last example how about sleep human sleep right void sleep standard output this person is sleeping good enough oh then make sure we add a semicolon to the end of the class perfect okay so we now have a human class we can use this class as a blueprint to create human objects each human object will have a name an occupation and an age they can also eat drink or sleep they have their own functions which we call methods so to create a human object we will type the name of the class human then a unique identifier how about human one that's creative so human one is an object human one has a name an occupation and an age but we have not assigned these attributes let's say human one's name human one member axis modifier which is a dot name equals rick then human one's occupation equals scientist human one's age equals 70. let's verify that this worked by printing out these attributes standard output human one dot name i'll add a new line then let's repeat this for occupation and age human one dot occupation human dot age human one's name is rick his occupation is a scientist his age is 70 years old so this part is kind of similar to structs however objects can also perform actions they have methods rick can eat drink and sleep so to invoke those methods i would type the name of my object human1 and let's have human one eat so humanone dot eat add a set of parentheses to invoke this method okay this person is eating let's also test drink and sleep human one dot drink human one dot sleep okay this person is eating this person is drinking this person is sleeping and that is our human human one for more practice let's create a second human human human to i'm going to copy these lines let's change human one to human two human two's name will be morty occupation will be student age what about 15 i'm going to display the attributes of human 2 this time then i'll have human 2 invoke its methods eat drink then sleep ok human 2's name is morty their occupation is a student morty is 15 years old then morty can perform these actions eat drink and sleep now you can assign some default attributes so let's say that all humans we create will be named rick it's kind of like we're cloning him his occupation will be scientist age will be 70. i'm not going to assign these attributes what i did is that i added some default attributes so we have human one and human two i'll display the attributes of human one first then human two human one dot name occupation age then we have human two's attributes as well so remember i am not assigning these attributes within the main function we have two humans they're both named rick they're both scientists and they're both age 70. okay now here's one last example to really get the hang of objects let's create a different class this time how about cars class car let's add a public axis modifier then what kinds of attributes would cars have perhaps a make standard string make a model standard string model a year that would be an int then maybe a color standard string color you can add some default attributes but i'll just leave those empty for now you can add some methods what kinds of actions can cars take i guess you can accelerate void accelerate standard output uh what can we print you step on the gas then maybe break void break standard output you step on the brakes then be sure to add a semicolon to the end of your class because i always forget to do that okay we now have a car class it acts as a blueprint to create car objects to create an object we would type the name of the class car in this example then a unique identifier for the object let's say car one then we can assign some of the attributes of this car object car one dot make maybe ford car one dot model equals mustang i like mustangs car one dot year equals 20 23 then a color car one dot color maybe silver okay then just to test these let's print these attributes standard output car one dot make add a new line let's copy this line paste it three times then we'll display the model year then color okay our car object is a ford mustang the year is 2023 the color is silver not only does our car have attributes but it has methods actions it can perform as well our car can accelerate and it can break let's test that car1 dot accelerate car one dot break okay you step on the gas you step on the brakes then if i need a second car object i can type car car two then i can assign the attributes and i have access to its methods so yeah that's an object everybody it's a collection of attributes and methods attributes are characteristics of an object methods are functions that an object can perform so yeah those are objects everybody in the next video we're going to cover constructors your assignment is to post a class in the comment section down below so yeah that's an introduction to object oriented programming in c plus hey everybody welcome back so in today's video we're going to discuss constructors a constructor is a special method within a class that is automatically called when an object is instantiated it's useful for assigning values to attributes as arguments before when we were assigning attributes to an object we would say for example car one dot make equals ford well with the constructor we can do that automatically here's an example this time let's create a student class class student i'll add a public access modifier what attributes should students have how about a name standard string name int age double gpa sounds good to me then if i need to create a student object i would type the name of the class student a unique identifier for this specific object let's say student1 then to assign some of the attributes right away i could use a constructor we do have a constructor that is automatically called behind the scenes but we could explicitly set one up the constructor has the same name as the class in this case student add a set of parentheses add a set of curly braces think of this as a function we can set up parameters when we instantiate a student object we will automatically call this function the constructor then pass arguments let's set up some parameters we have standard string name int age double gpa then when i instantiate a student object i will add a set of parentheses after the object name then pass in my arguments let me just zoom in real quick okay in order to instantiate a student object we need to pass in a name an age and a gpa so for the first student student one's name will be spongebob his age will be i don't know how old spongebob is let's say he's 25. spongebob's gpa will be a solid 3.2 when we instantiate our student object we will pass these values as arguments to the constructor now to assign these attributes with these parameters we first need to select these attributes in this example i gave them the same name just to remove ambiguity if i'm referring to these attributes i will type this then an arrow name equals the name of the parameter name this name equals my name parameter this arrow age equals my age parameter this aero gpa equals my gpa so now let's test this i will display student one's name age and gpa standard output student1 dot name add a new line then we have age then gpa okay we got spongebob he's 25 years old his gpa is 3.2 so you can see that we don't need to necessarily add these values to these attributes manually you can do that automatically with the constructor so another way in which you may see this constructor set up is with the parameter names being different from the attribute names perhaps instead of name age and gpa let's say x y then z if the attribute names are different from the parameter names you don't need the this keyword you could say name equals x age equals y gpa equals z and this would work too if you prefer this way of doing things you can do that uh just my own personal preference i like to use the this keyword and then keep my parameters the same but that's just me you do you let's create a couple more students and it's kind of nice because we can reuse this constructor let's create student two student student two student two will be patrick i don't know how old patrick is let's say patrick is 40. uh patrick's gpa will be 1.5 okay to test this let's display student twos and name age and gpa okay we got patrick he's 40 years old gpa is 1.5 one last student student student three student three will be sandy sandy is uh how about 21 years old and sandy's gpa is a perfect 4.0 okay now we'll display student 3's name age gpa okay we got sandy her age is 21 gpa is for well 4.0 let's do one last example just to reinforce our understanding of constructors let's create an entirely new class let's go back to our car class i'm going to get rid of all this so we need a class class car set of curly braces add a semicolon to the end i will add a public access modifier in the last topic we decided that cars had four attributes a make standard string make a model standard string model and year standard string color now we'll create a constructor for our car objects it has the same name as the class name car set of parentheses set of curly braces we can set up some parameters we have make model year and color i think i'm just going to copy this to save time you can rename these if you want but i like to keep them the same then i will assign this arrow make equals make this arrow model equals model this arrow year equals year this arrow color equals color when we create a car object we'll need to pass in these arguments i will create car car 1 add a set of parentheses pass in my arguments a make model year and color i'll create a chevy corvette the year will be 2022 the color is blue i'm going to display the attributes standard output car1 dot make i'll add a new line then i will display the model year then color model year color car 1 is a chevy corvette the year is 2022 the color is blue let's create a second car car car 2 car 2 will be a ford mustang the year will be 2023 the color will be red i will display cartoons attributes we have a forward mustang the year is 2023 the color is red so yeah that's a constructor everybody a constructor is a special method that is automatically called when an object is instantiated it's useful for assigning values to attributes as arguments when you create an object from a class add a set of parentheses then add your arguments within the constructor you can assign those arguments to the attributes of that class in the next topic we'll cover overloaded constructors if you're looking for some additional practice in the comments section down below post a class that contains a constructor and well yeah those are constructors in c plus overloaded constructors are when we have multiple constructors with the same name but different parameters they allow for a varying number of arguments when instantiating an object here's an example we'll create pizza objects from a pizza class let's type class pizza add a set of curly braces a semicolon to the end we'll make our members publicly accessible so pizzas they can have a variable number of toppings right you can have no toppings one topping two toppings three toppings suppose we have just one topping to begin with topping one and that will be of the string data type standard string topping one then i will create a pizza constructor it has the same name as the class name pizza parentheses curly braces we'll set up some parameters standard string topping one in order to construct a pizza we have to pass in one topping so let's do that we have pizza pizza one and i will pass in one argument for a topping i feel like pepperoni then we'll just need to assign this argument to this attribute this arrow topping one equals topping one the name of this parameter then to test this let's display topping one standard output pizza one dot topping one okay we have pizza one that contains pepperoni now what if you would like a pizza that has two toppings suppose we have pizza two pizza pizza two this time i'm going to attempt to pass in two arguments how about mushrooms and peppers well when i run this program we're going to have an error error no matching function for call to pizza with two arguments we can create an additional constructor that accepts different arguments let's copy what we have and paste it this constructor will take two string arguments topping one and topping two so we have two toppings this time and i should probably create another attribute for a second topping standard string topping two this topping two equals topping two so now with pizza two let's display topping one as well as topping two now pizza two contains mushrooms and peppers what if you would like a pizza with no toppings like a plain cheese pizza well we could set that up pizza pizza three i'm going to attempt to add a set of parentheses after pizza 3 but pass in no arguments but we have a warning our compiler is saying we should get rid of the parentheses if we're passing in no arguments we don't need that set of parentheses but we still have an error here no matching function call for pizza with no arguments if we're creating an object and passing in no arguments we'll need a matching constructor so at the top i'll create a pizza constructor with no arguments and that should make that error go away so this should run and compile just fine then yep no errors so yeah those are overloaded constructors you can have multiple constructors with the same name as long as the parameters are different we have three constructors with the same name we can create a pizza with no toppings one topping or two toppings overloaded constructors allow for multiple objects with a varying number of attributes if you're looking for some additional exercises post a class with overloaded constructors in the comments section down below and well yeah those are overloaded constructors and c plus hey everyone let's talk about getters and setters getters and setters are used within this concept of abstraction where we hide any unnecessary data from outside of a class getters are functions that make a private attribute readable setters are functions that make a private attribute writable here's an example i'm going to create a stove object class stove then i will instantiate a stove object stove stove in previous topics when we created attributes we would use the public access specifier then write any attributes in this example let's say int temperature i'll go ahead and set this to zero right away since this attribute temperature is public it's accessible from outside of the class that means that people can change it for example i will take my stove object set the temperature attribute to a really high setting that doesn't exist like a million this is fine then i can display the temperature standard output the temperature setting is stove dot temperature the temperature setting is one million i don't want people to mess with my temperature attribute what i could do instead is set these attributes to be private we're following that rule of abstraction we're hiding any unnecessary data from a user that they don't need we no longer have access to this temperature attribute from outside of the class you can see we have some red underlines temperature is private within this context this is a hidden attribute from the outside world if i need access to the value found within this temperature i can write a getter it's a function that will make an attribute readable i'll add a public access specifier then write a getter we're returning an integer i'll write get then the attribute name temperature all i'm going to do is return our temperature i can no longer update or change the temperature it's readable but not writable so i'm going to turn this line into a comment in place of accessing this attribute directly i'm going to invoke the get temperature method dot get temperature add a set of parentheses now the current temperature setting is set to zero adding a getter will make an attribute readable if you need a private attribute to also be writable you can add a setter void set temperature this arrow temperature equals our temperature that we pass in then we just need a parameter int temperature in order for a user to change the temperature they would need to invoke the set temperature method then they can pass in a new temperature using this setter they can still set the temperature to whatever they want like a million in the previous example the temperature setting is set to 1 million within a setter we can add some additional logic or checks before we do set the temperature let's check to see what the temperature is if the temperature the user passes in is less than zero we will set this temperature to be zero else if the temperature is greater than or equal to 10 suppose this is a knob with different settings the numbers 0 through 10 this temperature equals 10. in case they type in a million it'll just max out at 10. else this temperature equals temperature i could attempt to set the temperature to a million but it would just max out at ten or we could try a negative number like negative three well now the temperature setting is set to zero as if the stove was off or anything between maybe five something right in the middle the temperature setting is five so yeah that's kind of the purpose of getters and setters they make a private attribute either readable or writable or both if you use both one additional step you can take too is that if you have a constructor you can invoke the setters within a constructor within my stove class i have a constructor if we were to receive a temperature we could set the temperature right away so we already have this line of code within our setter so we don't necessarily need this line again we would instead invoke the setter set temperature pass in our temperature then if i was to instantiate a stove object i would have to pass in a temperature i'll set it to be zero and this temperature setting is set to zero so yeah those are getters and setters everybody a getter makes a private attribute readable a setter makes a private attribute writable within the getters and setters you can perform additional checks or logic which is pretty nice if you're looking for some additional practice post a class that has a getter and setter in the comment section down below and well yeah those are getters and setters and c plus hey guys let's talk about inheritance inheritance is when a class can receive attributes and methods from another class the receiving class is known as a child class the class that's being inherited from is known as the parent class it's kind of like how children will inherit their parents genes and some of their physical traits it's kind of the same concept a benefit of inheritance is that it helps to reuse similar code found within multiple classes here's an example we will create an animal class the animal class will be the parent class class animal i'll make these members publicly accessible all animals will have a boolean attribute that we will name alive if you're an animal you're alive then let's add a method maybe an eat method all animals should be able to eat void eat well just print a generic message standard output this animal is eating i'm going to create two classes a dog class and a cat class they will inherit from the animal class let's begin with dog class dog to inherit from another class you would add a colon then public the name of the parent class dog will inherit from the animal class that is out of curly braces semicolon at the end and we now have a dog class now check this out if i create a dog object it will have a boolean variable named alive as well as an eat method so let's create a dog object dog dog so i'm going to display that boolean variable dot alive if i display this attribute this will give me one which means true this dog object also has an eat method dog.e add a set of parentheses to invoke it this animal is eating so even though there's nothing within this dog class it's inheriting everything from within the animal class and we could add some additional attributes and methods as well maybe just a method this time i would like to give my dog the ability to speak so let's make this public void maybe bark standard output the dog goes woof my dog is alive and it can eat my dog can also bark as well it has its own attributes and methods too i would like my dog to bark okay my dog is alive that's set to one the animal is eating the dog goes woof so now let's create a cat class class cat the cat class will inherit from the animal class i'll make its members publicly accessible i will give cats a meow function void meow standard output the cat goes meow there okay now we can create a cat object cat cat let's print the alive boolean variable of my cat cat dot eat now i'm going to try and use the bark method of a cat which we don't have let's attempt to use that so class cat has no member named bark that's because that method is found within the dog class and not the cat class cats have a meow method i'm instead going to use the meow method are cat's alive the animal is eating the cat goes meow so that's kind of how inheritance works a class can inherit attributes and methods from another class it helps with code reusability you know technically you could add these attributes and methods to each of these classes for example i'll just add the boolean variable alive to each of these classes as well as the eat method you know this would work too but we're repeating ourselves and with programming we try not to repeat ourselves if we don't have to especially because if we have to make a change to the eat method let's change eat to nom nom nom well i would have to go to each class and make that change manually and that can be inconvenient if i have hundreds of different classes it would be a lot easier if i just had to make that change in one place so i'm going to revert all those changes if i need to make a change to one of these methods i'm going to change it to display nom nom nom well then i just have to make that change in one place instead of for every individual class let's try another example we'll create a class named shape this will be the parent class we'll make the members publicly accessible any class that inherits from the shape class will have a double attribute that we will name area for surface area double volume in this example we won't have any methods this time just some attributes i'm going to create class cube cube is the child class it will inherit from the parent class shape so colon public the name of the parent shape even though there's nothing within my cube class my cube class has an area and volume attribute then let's make a sphere class class sphere there we go i'm going to add a public axis modifier all cubes will have a double side property then with spheres they will have double radius then i'm going to add a constructor for both cubes and spheres let's begin with cube cube then sphere in order to instantiate a cube object i need to pass in a side as an argument when i construct an object double side then for the sphere we need a radius double radius i think what we'll do is that when we construct a cube object and a sphere object we'll calculate the area and the volume based on either the side that we pass in for a cube or the radius for a sphere let's begin with the cube first let's assign the length of a side remember with a cube the length the width and the height are all the same this arrow side equals side to calculate the area we can use this formula so this area equals side times side times six because there are six sides to a cube then if you need the volume you could say this arrow volume equals side to the power of three we could just say side times side times side just to keep it simple now with the sphere it's a little more complex first let's assign the radius this arrow radius equals radius let's calculate the area of a sphere this arrow area equals to calculate the area of a sphere that would be 4 times pi let's just say 3.14159 times radius squared so radius times radius then let's calculate the volume this arrow volume equals to calculate the volume of a sphere the formula is 4 divided by 3 times pi times radius cubed so that would be 4 divided by 3.0 make sure to divide by 3.0 and not 3 because in this case we would be using integer division we would like to keep that decimal so 3.0 times pi that's 3.14159 times radius cubed to keep it simple we can say radius times radius times radius and there we go okay so let's create a cube object to begin with cube i'll name this object just cube then in order to construct a cube object we need to pass in the length of a side let's say 10 so my cube class inherits the area and volume attribute from the shape class within the constructor of the cube class we will calculate what the area and the volume is going to be and i will display that standard output area cube dot area then i'll add centimeters then let's do the same thing with volume volume cube dot volume if the length of a side is 10 the area is going to be 600 centimeters squared the volume is 1000 centimeters cubed now let's try this with our sphere sphere i'll name this object sphere then we will pass in the radius let's say 5. i would like to display the spheres area and the sphere's volume the area would be 314 centimeters squared the volume is 523 centimeters cubed so yeah that's inheritance everybody a class can inherit attributes and methods from another class if you have multiple classes and they share similar attributes or methods you can place them within a parent class and all of those individual classes can inherit from that one common class it helps with code reusability and you don't have to repeat yourself if you're looking for some additional practice post a parent class and a child class in the comments section down below and well yeah that's an introduction to inheritance in c plus
