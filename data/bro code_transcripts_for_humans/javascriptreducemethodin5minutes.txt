With timestamps:

00:00 - what's going on everybody so in today's
00:02 - video I got to explain the reduced
00:03 - method in JavaScript the reduced method
00:06 - reduces the elements of an array to a
00:08 - single value in this example we'll
00:11 - create an array of prices as if it was a
00:13 - shopping cart we'll sum all of the
00:16 - prices within our shopping cart and
00:18 - return a total we'll need an array to
00:20 - work with const prices equals an array
00:24 - think of some prices type in anything as
00:27 - long as it's a number I'll keep this
00:29 - simple and use numbers I'll add
00:31 - something that is $5 another that is 30
00:35 - 10
00:36 - 25 15 and 20 we will create a variable
00:41 - for a total const total equals take our
00:46 - array of prices we will use the built-in
00:49 - reduce method of arrays but we do need
00:51 - to pass in a call back to a
00:53 - function we need to create a function
00:56 - that will sum all of these
00:58 - values let's creative function to
01:02 - sum our sum function will have two
01:05 - parameters the first will be an
01:08 - accumulator the second will be the next
01:12 - element all we're going to do is return
01:15 - our accumulator plus our element I'll
01:19 - explain how this works momentarily I
01:21 - just want to be sure that everything
01:22 - runs fine first within the reduce method
01:25 - we'll pass in a call back to the sum
01:27 - function that will return a single value
01:29 - value a total in this case let's see
01:32 - what our total is
01:35 - console.log I'll use a template string
01:38 - pick a unit of currency I'll pick
01:39 - American dollars add a placeholder let's
01:43 - display our total so my total is
01:47 - $115 if you would like to add cents to
01:50 - the end of that you can follow this with
01:52 - the two fixed
01:54 - method then add two decimal places for
01:58 - sense all right so how does this work
02:00 - exactly we have two parameters
02:02 - accumulator and element it might be
02:05 - easier if I were to rename these
02:06 - parameters you can rename parameters
02:09 - let's say accumulator is the previous
02:13 - element element is the next element
02:17 - we're returning the previous element
02:19 - plus the next element during the first
02:22 - iteration our accumulator is five the
02:25 - next element is
02:27 - 30 then we are going to return the
02:30 - accumulator plus 30 which is 35 we'll
02:35 - return this to the accumulator during
02:37 - the next iteration the accumulator is
02:40 - now 35 the next element is
02:43 - 10 35 + 10 would give us
02:47 - 45 return that to the accumulator and
02:50 - add the next element
02:53 - 25 so you just follow that
02:58 - pattern all right let's let's go over
03:00 - another
03:01 - example we'll create an array of grades
03:04 - const grades equals these will be some
03:07 - number grades 75 50 90 80 65 and 95
03:16 - we'll find the maximum value from this
03:19 - array we'll create a constant to hold to
03:22 - the maximum value what is the maximum
03:24 - score const maximum equals take our
03:28 - grades array use the built-in reduce
03:30 - method then we need to pass in a call
03:32 - back to the reduce method we need a
03:35 - function to get
03:37 - Max there's two parameters an
03:42 - accumulator and the next element like I
03:45 - said feel free to rename them we will
03:48 - return the max method of math math. Max
03:54 - pass in these two parameters accumulator
03:57 - and the next element
04:00 - within the reduce method we'll pass in a
04:02 - call back to get
04:04 - Max the value returned will be the
04:07 - maximum grade from this array so let's
04:10 - console. log whatever the maximum is the
04:14 - maximum score from this array is
04:18 - 95 let's do this with the
04:20 - minimum let's copy this function change
04:24 - any instance of Max to
04:26 - Min get min math.
04:30 - Min let's create a new constant const
04:34 - minimum equals our array of grades use
04:38 - the reduce method to return a single
04:41 - value then pass in a call back to get
04:44 - min let's
04:47 - console.log the
04:50 - minimum the minimum score from this
04:52 - array is
04:53 - 50 all right everybody that is the
04:56 - reduce method it's a built-in method of
04:58 - arrays to reduce the elements of an
05:00 - array to a single value you can use it
05:03 - to sum the elements of an array another
05:05 - possibility is to find the minimum or
05:07 - maximum value from an array and well
05:10 - everybody that is the reduceed method in
05:12 - JavaScript

Cleaned transcript:

what's going on everybody so in today's video I got to explain the reduced method in JavaScript the reduced method reduces the elements of an array to a single value in this example we'll create an array of prices as if it was a shopping cart we'll sum all of the prices within our shopping cart and return a total we'll need an array to work with const prices equals an array think of some prices type in anything as long as it's a number I'll keep this simple and use numbers I'll add something that is $5 another that is 30 10 25 15 and 20 we will create a variable for a total const total equals take our array of prices we will use the builtin reduce method of arrays but we do need to pass in a call back to a function we need to create a function that will sum all of these values let's creative function to sum our sum function will have two parameters the first will be an accumulator the second will be the next element all we're going to do is return our accumulator plus our element I'll explain how this works momentarily I just want to be sure that everything runs fine first within the reduce method we'll pass in a call back to the sum function that will return a single value value a total in this case let's see what our total is console.log I'll use a template string pick a unit of currency I'll pick American dollars add a placeholder let's display our total so my total is $115 if you would like to add cents to the end of that you can follow this with the two fixed method then add two decimal places for sense all right so how does this work exactly we have two parameters accumulator and element it might be easier if I were to rename these parameters you can rename parameters let's say accumulator is the previous element element is the next element we're returning the previous element plus the next element during the first iteration our accumulator is five the next element is 30 then we are going to return the accumulator plus 30 which is 35 we'll return this to the accumulator during the next iteration the accumulator is now 35 the next element is 10 35 + 10 would give us 45 return that to the accumulator and add the next element 25 so you just follow that pattern all right let's let's go over another example we'll create an array of grades const grades equals these will be some number grades 75 50 90 80 65 and 95 we'll find the maximum value from this array we'll create a constant to hold to the maximum value what is the maximum score const maximum equals take our grades array use the builtin reduce method then we need to pass in a call back to the reduce method we need a function to get Max there's two parameters an accumulator and the next element like I said feel free to rename them we will return the max method of math math. Max pass in these two parameters accumulator and the next element within the reduce method we'll pass in a call back to get Max the value returned will be the maximum grade from this array so let's console. log whatever the maximum is the maximum score from this array is 95 let's do this with the minimum let's copy this function change any instance of Max to Min get min math. Min let's create a new constant const minimum equals our array of grades use the reduce method to return a single value then pass in a call back to get min let's console.log the minimum the minimum score from this array is 50 all right everybody that is the reduce method it's a builtin method of arrays to reduce the elements of an array to a single value you can use it to sum the elements of an array another possibility is to find the minimum or maximum value from an array and well everybody that is the reduceed method in JavaScript
