With timestamps:

00:00 - hello everybody today I'm going to show
00:02 - you how we can write a substitution
00:04 - Cipher encryption program basically
00:07 - speaking what we're going to do is that
00:08 - we have a message to hide the message we
00:11 - can encrypt it by replacing every
00:13 - instance of one character with another
00:15 - chosen at random using the same key we
00:19 - can then decrypt the message when I was
00:21 - at my University I took an intro to
00:24 - cyber security course I turned this
00:26 - program in as a final assignment and I
00:28 - did get an A on it I don't know maybe
00:30 - it'll help you at the very least it's a
00:32 - good exercise
00:33 - all right let's get started everybody we
00:36 - will Begin by importing the random
00:38 - module as well as the string module
00:42 - let's create a string of characters
00:44 - named chars
00:46 - whatever characters you would like to
00:47 - use for your encryption program
00:49 - list them here as a string however this
00:52 - can be a lot to write
00:54 - I think a better solution would be to
00:56 - import some constants from the string
00:58 - module I'm going to include some
01:00 - punctuation I will import the
01:03 - punctuation constant of the string
01:04 - module
01:06 - how the heck do you spell punctuation
01:08 - okay that's right
01:10 - plus I will add some digits string dot
01:15 - digits constant Plus
01:18 - string Dot
01:22 - ASCII
01:23 - letters
01:25 - let's take a look at our character so
01:27 - far
01:31 - we have one long string of characters
01:34 - what if I would like to include a space
01:36 - a white space
01:38 - well there is a constant for that but
01:40 - that includes things like carriage
01:42 - return
01:43 - that's going to warp our results let me
01:46 - show you just for a demonstration
01:48 - string dot white space plus all the
01:52 - other stuff
01:54 - we have a carriage return and some other
01:56 - characters I would like to avoid that so
01:59 - in place of importing the white space
02:01 - constant from the string module
02:03 - I'm going to add a space character
02:05 - that's good enough
02:08 - here are all the characters I will be
02:09 - using this program feel free to add more
02:12 - or less this is all one long string
02:16 - I'm going to turn the string into a list
02:18 - where each character is an individual
02:21 - element
02:22 - to do that I'm going to take our string
02:25 - of chars reassign it
02:28 - then Typecast my string of characters as
02:31 - a list then let's print it again
02:34 - print chars
02:37 - instead of one long string we have a
02:39 - list
02:40 - a list of all the characters we'll need
02:42 - I am then going to create a key which we
02:45 - will Shuffle eventually
02:47 - key then to create a copy of a list you
02:50 - can type the original list
02:52 - dot copy method
02:55 - then I will print my key
02:59 - I'm going to place these lists within an
03:01 - fstring
03:08 - chars
03:13 - then key
03:18 - let's see what we have
03:20 - we have two identical lists one for the
03:23 - original characters and the other for
03:25 - the key
03:26 - we're going to shuffle this key
03:31 - random dot shuffle pass in our list of
03:36 - key
03:38 - look at that all of the characters are
03:40 - now shuffled in a random order
03:42 - what we'll be doing when somebody types
03:44 - in some text to be encrypted we will
03:46 - replace every instance of one character
03:49 - within that string
03:50 - let's say an O then replace it with
03:53 - another one every time we run this
03:55 - program this key will be reshuffled
03:57 - let's ask for some user input
04:01 - this part of our program we will do some
04:03 - encryption
04:06 - plain text is the original message
04:09 - plain text equals we will accept some
04:12 - user input
04:14 - enter a message to
04:18 - encrypt
04:20 - ciphertext is the name of the encrypted
04:24 - message
04:25 - that will be an empty string
04:28 - okay let's say a user types in a message
04:31 - enter a message to encrypt I like pizza
04:35 - it's a very important message
04:38 - every instance of a character within my
04:40 - plain text I will refer to the key and
04:43 - replace that letter with a different one
04:45 - for example any z's I have two Z's in
04:48 - this program
04:49 - will be replaced with let's see
04:54 - capital B
04:55 - every time we run this program though
04:57 - it's going to shuffle the key so it's
04:59 - not going to be consistent what we're
05:01 - going to be doing is iterating over
05:03 - every letter in our plain text
05:05 - for every letter in plain text
05:09 - strings are iterable
05:12 - find the index of every letter from our
05:15 - plain text within our list of characters
05:19 - let's assign a variable index index
05:22 - equals
05:24 - take our list of chars use the index
05:27 - method
05:28 - we are looking for that letter whatever
05:30 - letter we're currently on
05:32 - then return an index
05:35 - then refer to our key get whatever
05:37 - letter is at that same index
05:40 - so we will append that to our ciphertext
05:42 - it's currently an empty string
05:44 - sniper text
05:46 - plus equals
05:48 - our key
05:50 - at the given index
05:55 - our ciphertext should be the encrypted
05:58 - message now
05:59 - let's print it out
06:00 - print I'll use an F string
06:04 - original message
06:07 - let's print our plain text
06:11 - then our encrypted message
06:19 - print our ciphertext string
06:23 - let's take a look so far
06:26 - enter a message to encrypt I like pizza
06:31 - then here's the new encrypted message
06:33 - every instance of a character within my
06:36 - plain text was replaced with another so
06:38 - for example any z's were replaced with E
06:41 - I have two e's within this encrypted
06:43 - message
06:44 - if I were to run this program again it
06:45 - would likely be different
06:47 - I like pizza
06:50 - and here's my new encrypted message
06:53 - my Z's were replaced with semicolons
06:55 - this time for every ladder in our plain
06:57 - text get the index of each letter then
07:00 - refer to the key add the new character
07:03 - to our encrypted message
07:05 - it's probably best for us not to display
07:06 - the characters and the key so let's hide
07:09 - those
07:11 - we will be reusing this key for
07:13 - decryption
07:14 - now to decrypt the message let's copy
07:16 - this section of code
07:19 - paste it
07:21 - we are now decrypting
07:23 - we will ask for some Cipher text
07:26 - then reset our plain text
07:29 - for every letter in our Cipher text
07:32 - refer to our key
07:37 - append a character to our plain text
07:42 - within our list chars at a given index
07:46 - we will display our encrypted message
07:49 - followed by the original message
07:52 - let's try it one last time enter a
07:54 - message to encrypt
07:57 - I like tacos
08:01 - here's my original message then the
08:04 - encrypted message
08:05 - if I were to decrypt the encrypted
08:07 - message it should give me my original
08:09 - message
08:11 - I will type in these characters exactly
08:15 - hit enter
08:16 - and here is my message decrypted I like
08:19 - tacos
08:20 - alright everybody so that is a
08:22 - substitution Cipher encryption program
08:24 - for beginners when I was at University I
08:27 - did turn this program in for a final
08:29 - assignment for a cyber security class
08:31 - and I did get an A on it so maybe it'll
08:33 - help you and well yeah that's an
08:35 - encryption program for beginners in
08:37 - Python

Cleaned transcript:

hello everybody today I'm going to show you how we can write a substitution Cipher encryption program basically speaking what we're going to do is that we have a message to hide the message we can encrypt it by replacing every instance of one character with another chosen at random using the same key we can then decrypt the message when I was at my University I took an intro to cyber security course I turned this program in as a final assignment and I did get an A on it I don't know maybe it'll help you at the very least it's a good exercise all right let's get started everybody we will Begin by importing the random module as well as the string module let's create a string of characters named chars whatever characters you would like to use for your encryption program list them here as a string however this can be a lot to write I think a better solution would be to import some constants from the string module I'm going to include some punctuation I will import the punctuation constant of the string module how the heck do you spell punctuation okay that's right plus I will add some digits string dot digits constant Plus string Dot ASCII letters let's take a look at our character so far we have one long string of characters what if I would like to include a space a white space well there is a constant for that but that includes things like carriage return that's going to warp our results let me show you just for a demonstration string dot white space plus all the other stuff we have a carriage return and some other characters I would like to avoid that so in place of importing the white space constant from the string module I'm going to add a space character that's good enough here are all the characters I will be using this program feel free to add more or less this is all one long string I'm going to turn the string into a list where each character is an individual element to do that I'm going to take our string of chars reassign it then Typecast my string of characters as a list then let's print it again print chars instead of one long string we have a list a list of all the characters we'll need I am then going to create a key which we will Shuffle eventually key then to create a copy of a list you can type the original list dot copy method then I will print my key I'm going to place these lists within an fstring chars then key let's see what we have we have two identical lists one for the original characters and the other for the key we're going to shuffle this key random dot shuffle pass in our list of key look at that all of the characters are now shuffled in a random order what we'll be doing when somebody types in some text to be encrypted we will replace every instance of one character within that string let's say an O then replace it with another one every time we run this program this key will be reshuffled let's ask for some user input this part of our program we will do some encryption plain text is the original message plain text equals we will accept some user input enter a message to encrypt ciphertext is the name of the encrypted message that will be an empty string okay let's say a user types in a message enter a message to encrypt I like pizza it's a very important message every instance of a character within my plain text I will refer to the key and replace that letter with a different one for example any z's I have two Z's in this program will be replaced with let's see capital B every time we run this program though it's going to shuffle the key so it's not going to be consistent what we're going to be doing is iterating over every letter in our plain text for every letter in plain text strings are iterable find the index of every letter from our plain text within our list of characters let's assign a variable index index equals take our list of chars use the index method we are looking for that letter whatever letter we're currently on then return an index then refer to our key get whatever letter is at that same index so we will append that to our ciphertext it's currently an empty string sniper text plus equals our key at the given index our ciphertext should be the encrypted message now let's print it out print I'll use an F string original message let's print our plain text then our encrypted message print our ciphertext string let's take a look so far enter a message to encrypt I like pizza then here's the new encrypted message every instance of a character within my plain text was replaced with another so for example any z's were replaced with E I have two e's within this encrypted message if I were to run this program again it would likely be different I like pizza and here's my new encrypted message my Z's were replaced with semicolons this time for every ladder in our plain text get the index of each letter then refer to the key add the new character to our encrypted message it's probably best for us not to display the characters and the key so let's hide those we will be reusing this key for decryption now to decrypt the message let's copy this section of code paste it we are now decrypting we will ask for some Cipher text then reset our plain text for every letter in our Cipher text refer to our key append a character to our plain text within our list chars at a given index we will display our encrypted message followed by the original message let's try it one last time enter a message to encrypt I like tacos here's my original message then the encrypted message if I were to decrypt the encrypted message it should give me my original message I will type in these characters exactly hit enter and here is my message decrypted I like tacos alright everybody so that is a substitution Cipher encryption program for beginners when I was at University I did turn this program in for a final assignment for a cyber security class and I did get an A on it so maybe it'll help you and well yeah that's an encryption program for beginners in Python
