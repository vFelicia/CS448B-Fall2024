With timestamps:

00:00 - hey welcome back everybody so today I
00:02 - got to explain callbacks in JavaScript a
00:05 - callback is a function that is passed as
00:07 - an argument to another function they are
00:09 - used to handle asynchronous operations
00:12 - such as reading a file Network requests
00:15 - or interacting with databases these
00:17 - activities take some time to complete
00:19 - now with JavaScript we don't necessarily
00:21 - wait for a process to finish before
00:23 - continuing with the rest of the program
00:25 - for example if we were to read a file if
00:27 - it takes a long time to read that file
00:30 - JavaScript might continue on with the
00:31 - rest of the program we might attempt to
00:33 - display the contents of that file before
00:35 - we're finished reading it that's where
00:36 - callbacks come in we're telling
00:38 - JavaScript hey when you're done call
00:41 - this next when you're done reading the
00:43 - file then display the contents only
00:46 - after that process is complete I'll give
00:48 - you a few examples of the syntax of a
00:50 - call back we'll start with something
00:52 - really simple we'll create a function to
00:54 - display the word hello this will be the
00:57 - hello
00:58 - function then I will
01:01 - console.log the
01:03 - word
01:05 - hello so I can invoke this function
01:08 - hello to execute
01:11 - it hello what if we were to create a
01:15 - function for goodbye
01:18 - function goodbye we will
01:22 - console.log
01:24 - goodbye okay after hello let's invoke
01:27 - goodbye we have hello then goodbye what
01:31 - if my hello function takes a lot of time
01:33 - to process well JavaScript isn't
01:36 - necessarily going to wait around before
01:38 - executing the goodbye function I'm going
01:40 - to add a few lines of code you don't
01:42 - need to copy this these few lines of
01:44 - code are going to make us wait for 3
01:46 - seconds you don't need to write this
01:48 - down but do pay attention we will
01:51 - execute the hello function followed by
01:52 - the goodbye function but we're going to
01:54 - pretend that our hello function takes a
01:56 - little bit of time to
01:58 - process so so now we have goodbye
02:00 - already executed followed by hello but
02:03 - it should be the other way around I
02:05 - would like to guarantee that the goodby
02:08 - function follows after the hello
02:10 - function well I can do that by adding a
02:13 - call back to the goodbye function after
02:15 - the hello function is complete we'll get
02:17 - rid of this goodbye function
02:19 - invocation to use a call back you pass a
02:22 - function as an argument to another
02:24 - function we will pass the goodbye
02:27 - function as an argument to the hello
02:29 - function
02:31 - So within the set of parentheses type
02:32 - the name of the function goodbye now be
02:35 - sure you don't add a set of parentheses
02:36 - after the function name you'll call it
02:38 - right away we are passing the name of
02:40 - the function as an argument but we need
02:43 - a matching parameter I will name this
02:45 - parameter
02:47 - callback after everything within this
02:49 - function is
02:50 - complete let's take our callback then
02:53 - invoke it by adding a set of parentheses
02:56 - invoke meaning call all right now let's
02:59 - see what happens
03:01 - we have our hello function followed by
03:04 - the goodbye function in that order let's
03:06 - create another
03:07 - function what about a leave function
03:10 - we'll tell somebody to
03:12 - leave
03:15 - console.log leave I will pass the name
03:18 - of this function as an argument to the
03:20 - hello function leave is now our call
03:23 - back after executing the hello function
03:26 - we will execute our call back and in
03:28 - this case it's the leave function let's
03:31 - create another function for weight
03:33 - function
03:36 - weight console.
03:38 - log wait we'll pass the name of the
03:41 - function as an argument to the hello
03:43 - function weight is now our call back we
03:46 - will execute the hello function followed
03:48 - by the weight function so by using
03:51 - callbacks we are guaranteeing that the
03:53 - function passed in will execute next you
03:56 - can pass callbacks as well as other
03:58 - arguments to a function
04:00 - let's go over a second example I will
04:03 - create a function to sum two numbers
04:06 - together X comma y I'll also add a call
04:11 - back callback X comma y we have three
04:14 - parameters total within the sum function
04:17 - we will create a local variable of
04:20 - result add x +
04:23 - y and then I will call my call back then
04:27 - I'll pass the result as an argument to
04:29 - the callback function then I will create
04:32 - a function to display the result to my
04:35 - console display console there is one
04:39 - parameter we have a result argument
04:41 - we're
04:42 - receiving then
04:45 - console.log my
04:47 - result all right now we will invoke the
04:50 - sum function but we have three arguments
04:53 - that we need to pass in a call back a
04:57 - value for x and a value for y let's
04:59 - invoke the display console function as a
05:01 - call back again be sure to not add a set
05:04 - of parenthesis after the name because
05:05 - then you'll invoke it right
05:06 - away X will be 1 y will be two and let's
05:11 - see the result the result is three So
05:15 - within our sum function calculate the
05:17 - result first then after that process is
05:20 - finished then display the result to the
05:22 - console let's create a separate function
05:25 - to display the result to our document
05:27 - object window our web page basically
05:30 - uh let's pretend that this wasn't
05:32 - here I'll create an H1 element with an
05:36 - ID of my
05:41 - H1 I will create a separate
05:44 - function
05:46 - display page to display on the web page
05:50 - I think display Dom would be more
05:52 - appropriate but I haven't explained with
05:53 - the document object model is yet so
05:56 - let's just work with display page
06:00 - we will accept a result I will change
06:03 - the text content of the my H1
06:05 - element document. getet element by ID
06:11 - the ID was my H1 we will change the text
06:17 - content to equal our result that we
06:20 - receive as a callback we will use the
06:23 - display page function display
06:26 - page there and the result is three after
06:30 - this calculation processes execute the
06:32 - call back and this time we are passing
06:34 - it to the display page function that we
06:36 - created all right everybody so that's a
06:38 - call back it's a function that is passed
06:40 - as an argument to another function
06:42 - they're used to handle asynchronous
06:44 - operations operations that may take a
06:47 - variable amount of time such as reading
06:49 - a file Network requests or interacting
06:51 - with databases we're not exactly sure
06:53 - when these processes are going to
06:55 - complete by using a callback we can
06:57 - ensure that a function executes after
06:59 - these processes are complete and not
07:01 - before accidentally all we're doing is
07:03 - saying hey when you're done call this
07:06 - next we'll have more practice with
07:08 - callbacks especially in the upcoming
07:10 - topics and well everybody those are
07:12 - callbacks in
07:15 - JavaScript

Cleaned transcript:

hey welcome back everybody so today I got to explain callbacks in JavaScript a callback is a function that is passed as an argument to another function they are used to handle asynchronous operations such as reading a file Network requests or interacting with databases these activities take some time to complete now with JavaScript we don't necessarily wait for a process to finish before continuing with the rest of the program for example if we were to read a file if it takes a long time to read that file JavaScript might continue on with the rest of the program we might attempt to display the contents of that file before we're finished reading it that's where callbacks come in we're telling JavaScript hey when you're done call this next when you're done reading the file then display the contents only after that process is complete I'll give you a few examples of the syntax of a call back we'll start with something really simple we'll create a function to display the word hello this will be the hello function then I will console.log the word hello so I can invoke this function hello to execute it hello what if we were to create a function for goodbye function goodbye we will console.log goodbye okay after hello let's invoke goodbye we have hello then goodbye what if my hello function takes a lot of time to process well JavaScript isn't necessarily going to wait around before executing the goodbye function I'm going to add a few lines of code you don't need to copy this these few lines of code are going to make us wait for 3 seconds you don't need to write this down but do pay attention we will execute the hello function followed by the goodbye function but we're going to pretend that our hello function takes a little bit of time to process so so now we have goodbye already executed followed by hello but it should be the other way around I would like to guarantee that the goodby function follows after the hello function well I can do that by adding a call back to the goodbye function after the hello function is complete we'll get rid of this goodbye function invocation to use a call back you pass a function as an argument to another function we will pass the goodbye function as an argument to the hello function So within the set of parentheses type the name of the function goodbye now be sure you don't add a set of parentheses after the function name you'll call it right away we are passing the name of the function as an argument but we need a matching parameter I will name this parameter callback after everything within this function is complete let's take our callback then invoke it by adding a set of parentheses invoke meaning call all right now let's see what happens we have our hello function followed by the goodbye function in that order let's create another function what about a leave function we'll tell somebody to leave console.log leave I will pass the name of this function as an argument to the hello function leave is now our call back after executing the hello function we will execute our call back and in this case it's the leave function let's create another function for weight function weight console. log wait we'll pass the name of the function as an argument to the hello function weight is now our call back we will execute the hello function followed by the weight function so by using callbacks we are guaranteeing that the function passed in will execute next you can pass callbacks as well as other arguments to a function let's go over a second example I will create a function to sum two numbers together X comma y I'll also add a call back callback X comma y we have three parameters total within the sum function we will create a local variable of result add x + y and then I will call my call back then I'll pass the result as an argument to the callback function then I will create a function to display the result to my console display console there is one parameter we have a result argument we're receiving then console.log my result all right now we will invoke the sum function but we have three arguments that we need to pass in a call back a value for x and a value for y let's invoke the display console function as a call back again be sure to not add a set of parenthesis after the name because then you'll invoke it right away X will be 1 y will be two and let's see the result the result is three So within our sum function calculate the result first then after that process is finished then display the result to the console let's create a separate function to display the result to our document object window our web page basically uh let's pretend that this wasn't here I'll create an H1 element with an ID of my H1 I will create a separate function display page to display on the web page I think display Dom would be more appropriate but I haven't explained with the document object model is yet so let's just work with display page we will accept a result I will change the text content of the my H1 element document. getet element by ID the ID was my H1 we will change the text content to equal our result that we receive as a callback we will use the display page function display page there and the result is three after this calculation processes execute the call back and this time we are passing it to the display page function that we created all right everybody so that's a call back it's a function that is passed as an argument to another function they're used to handle asynchronous operations operations that may take a variable amount of time such as reading a file Network requests or interacting with databases we're not exactly sure when these processes are going to complete by using a callback we can ensure that a function executes after these processes are complete and not before accidentally all we're doing is saying hey when you're done call this next we'll have more practice with callbacks especially in the upcoming topics and well everybody those are callbacks in JavaScript
