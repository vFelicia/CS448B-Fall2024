With timestamps:

00:00 - hey everybody it's your bro hope you're
00:01 - doing well and in today's video I'm
00:03 - going to teach you guys everything you
00:05 - need to know to get started working with
00:06 - PHP so sit back relax and enjoy the show
00:10 - if you would like to be notified if I
00:12 - release new courses in the future be
00:13 - sure to subscribe because I kind of
00:15 - release them randomly that is all PHP is
00:18 - a server-side scripting language it's
00:21 - used to build Dynamic web pages it runs
00:24 - on a server not the user's web browser
00:26 - although haters say PHP is dead it's
00:28 - still used on 70 percent of all known
00:31 - websites I don't know that doesn't sound
00:33 - dead to me many developers prefer PHP
00:35 - for its speed Simplicity and flexibility
00:38 - it's a popular choice for small
00:40 - businesses and Freelancers especially
00:42 - since in the news lately you hear about
00:43 - layoffs in the tech industry PHP was
00:46 - released in 1995 it was originally an
00:48 - acronym for personal home page but that
00:51 - was later changed to PHP hypertext
00:53 - preprocessor to reflect the language's
00:55 - evolution in fact PHP was never intended
00:58 - to be a new programming language it grew
01:00 - organically and out of control until it
01:02 - became the Behemoth that it is today fun
01:04 - fact the mascot of PHP is an elephant
01:06 - which is named elephant Ella PHP find I
01:11 - don't know how I would describe the
01:12 - basics of PHP is as follows a browser
01:15 - sends a request to a server PHP on that
01:17 - server processes that request then the
01:19 - server sends HTML back to the browser
01:22 - our server running PHP can even
01:24 - communicate to a database then back to
01:26 - the web browser PHP is most commonly
01:28 - used with relational databases such as
01:31 - MySQL postgres and Oracle PHP can be
01:35 - written alongside with HTML before
01:37 - beginning the series you'll want to have
01:39 - a solid foundation on HTML you will need
01:41 - to know MySQL but that won't be until
01:43 - about video 20. for your web server I
01:46 - recommend zamp zamp is a cross-platform
01:49 - web server solution stack it's basically
01:52 - a software suite it contains an Apache
01:54 - server MySQL and PHP you'll also need
01:57 - some sort of text editor where are you
01:59 - going going to write the code vs code
02:01 - tends to be the most popular nowadays
02:03 - and that's what I use for my own
02:04 - personal projects we'll write our code
02:07 - with vs code then run our code on our
02:09 - xampp server since we can't run it on a
02:11 - web browser I'll show you how we can
02:13 - download both the xampp server and the
02:15 - vs code text editor now we will begin
02:18 - the installation process of a server
02:20 - that we can execute PHP code within go
02:23 - to this URL
02:26 - apachefriends.org like I said before PHP
02:28 - code is executed on a server and
02:31 - returned to a web browser click on one
02:33 - of the relevant download links for your
02:35 - operating system I'm running Windows I
02:37 - will download the windows version
02:41 - okay for me the installation process has
02:43 - started and it's done so let's open it
02:47 - for setup we're going to click next
02:50 - all we really need is MySQL
02:53 - and phpmyadmin it looks like PHP is
02:57 - already selected for us then next
02:58 - remember this file location my folder
03:02 - containing all of my zamp files is
03:04 - located in my C drive next you can
03:07 - select a language I'll pick English
03:10 - next
03:11 - and give it a minute
03:16 - do you want to start the control panel
03:18 - now we might as well and finish
03:21 - here is the control panel for my zamp
03:23 - server we will start the Apache service
03:26 - if everything works the Apache module is
03:30 - highlighted green that means it's
03:31 - working if you ever need to stop this
03:33 - module you can hit the stop button let's
03:36 - start MySQL as well
03:39 - and our MySQL server is working if you
03:42 - see any red text within this log that
03:45 - means there is an error if you run into
03:46 - any problems just check to see what that
03:48 - error was but everything for me is
03:50 - running fine this control panel will run
03:52 - behind the scenes I can close out of it
03:55 - but it's still running which is
03:56 - important hey this is bro from the
03:58 - future I forgot to mention in this video
04:00 - that if you ever shut down your computer
04:02 - you will have to open up the control
04:04 - panel again and restart these Services
04:06 - yeah I forgot to mention that so be sure
04:09 - to do that now that our xampp server is
04:11 - downloaded we will need that vs code
04:13 - text editor I'm assuming that some of
04:15 - you have that downloaded already but if
04:17 - you don't here's how if you need a text
04:19 - editor I recommend Visual Studio code if
04:22 - you're interested in downloading this
04:23 - text editor head to this URL
04:25 - code.visualstudio.com
04:28 - I'm going to click this blue download
04:30 - button select the correct download link
04:33 - for my operating system I'm running
04:34 - Windows I will select this one
04:37 - then we will run this executable
04:40 - except the license agreement yes I did
04:43 - read it that fast
04:45 - you do have the option of selecting a
04:47 - destination location
04:49 - I'll keep it as the default
04:51 - next next
04:54 - I'll create a desktop icon then next
04:58 - and install
05:00 - we might as well launch vs code then
05:03 - finish
05:05 - I have vs code open along with the
05:07 - modern web browser I'm using Google
05:09 - Chrome in the series we're going to
05:11 - create a new file within our zamp folder
05:14 - so let's open a folder remember that
05:16 - file path for the zamp server that's
05:18 - where you're going to look for me that
05:20 - was in my C drive go to xampp under
05:23 - htdocs we're going to create a new
05:25 - folder
05:27 - new folder I'll name this folder website
05:30 - to contain my website stuff
05:33 - then I will select folder
05:36 - within my website folder I'm going to
05:39 - create a new file I will name this file
05:42 - index.php the reason that I'm naming
05:45 - this file index is because that is the
05:48 - default for a home page so we now have a
05:50 - PHP file in vs code If you're receiving
05:54 - a warning that states cannot validate
05:56 - since a PHP installation could not be
05:59 - found we need to validate the executable
06:01 - path of the PHP executable found within
06:05 - our xampp server to do that we're going
06:07 - to find our settings file it's a Json
06:10 - file
06:11 - PHP validate executable path edit in the
06:15 - settings Json file
06:17 - let me maximize this
06:19 - next to PHP validate executable path we
06:22 - need to find the file path to the PHP
06:25 - executable
06:27 - again within my C drive
06:30 - within my zamp folder
06:33 - go to PHP
06:36 - then copy this file path for the
06:37 - executable
06:39 - I'll right click
06:41 - go to properties
06:43 - copy this location
06:46 - close out of this window
06:49 - paste that executable path
06:51 - then add PHP dot EXE
06:56 - then these may have to be forward
06:58 - slashes
07:01 - let's save on Windows you can press Ctrl
07:04 - s to save
07:06 - close out of these settings and that
07:08 - warning goes away
07:10 - I also recommend a few extensions
07:13 - the first extension is PHP
07:17 - intellisense
07:22 - it should be this one
07:23 - it gives you access to a few tools that
07:26 - are useful for PHP development let's
07:28 - install that plugin then look up the
07:31 - live server extension it offers a live
07:33 - reload feature
07:38 - then lastly PHP server
07:45 - it allows you to serve your project with
07:47 - PHP
07:48 - those are the three extensions that I
07:51 - recommend
07:56 - alright we are now ready to get started
07:58 - in a web browser to access your xampp
08:00 - server you can type
08:03 - localhost as the URL
08:06 - this will bring you to the zamp
08:07 - dashboard we would like to access the
08:10 - website folder of the zamp server so
08:13 - let's add localhost slash
08:16 - the name of that folder website
08:19 - our PHP code will execute on the server
08:22 - and be returned to this web browser
08:25 - whatever the output is to write some PHP
08:28 - code Type left angle bracket question
08:31 - mark PHP
08:33 - wherever our PHP code ends type question
08:37 - mark right angle bracket
08:39 - our PHP code will be between these two
08:42 - angle brackets to display a message you
08:45 - can type Echo
08:47 - either single quotes or double quotes
08:50 - then a semicolon at the end a semicolon
08:54 - is kind of like the period at the end of
08:56 - a sentence in English I will type a
08:58 - message I like pizza
09:01 - to save you can go to the top file save
09:06 - or use the shortcut which I'll be using
09:09 - so for me that's Ctrl s
09:11 - if I were to reload this webpage it
09:14 - displays my message I like pizza
09:17 - to make your life a lot easier we can
09:20 - add a live server extension to your web
09:22 - browser currently I'm using Chrome to
09:25 - add a live server extension I'm going to
09:27 - go to settings
09:31 - extensions
09:36 - open Chrome web store
09:40 - then search live server
09:45 - and that should be this one
09:48 - add to Chrome
09:52 - ADD extension
09:58 - let's close out of these tabs
10:01 - I'm going to go to extensions
10:03 - select live server web extension
10:07 - enable live reload
10:10 - we'll need the actual server address as
10:13 - well as your live server address
10:15 - this URL is the actual server address if
10:19 - you're on a Mac it may contain a port
10:21 - number such as 8080. so let's copy this
10:25 - address
10:26 - go to extensions
10:29 - then add the actual server address
10:33 - now we need the live server address
10:36 - to find this we can go to vs code press
10:39 - this go live button
10:44 - there should be a new tab that pops up
10:46 - copy this address that is the live
10:49 - server address
10:52 - then we will paste it within the live
10:54 - server address of this live server web
10:57 - extension then press apply
11:01 - you may need to restart your web browser
11:03 - as well
11:06 - all right that was localhost Slash
11:09 - website
11:13 - you know what I don't just like pizza I
11:16 - love pizza
11:18 - if I were to save this file it should
11:21 - update automatically see within our
11:23 - website it now says I love pizza
11:26 - let's add a second line with Echo Echo
11:29 - double quotes add a semicolon to the end
11:33 - let's add another line it's really good
11:39 - the output is all on one line to add a
11:42 - line break
11:43 - within your set of quotes you can add a
11:46 - Break Tag
11:50 - I love pizza it's really good
11:53 - to add a comment a comment is used as a
11:56 - note for yourself or other Developers
11:58 - all you have to type is double forward
12:00 - slashes then some message this is a
12:05 - comment
12:06 - our comment is not displayed as output
12:09 - it's mostly just used for notes
12:12 - for a multi-line comment you would type
12:15 - forward slash asterisk that will begin a
12:18 - multi-line comment
12:20 - this
12:21 - is
12:23 - a multi-line
12:25 - [Music]
12:27 - comment
12:29 - the end of our PHP script is currently
12:31 - green that means it's being included
12:34 - within this multi-line comment wherever
12:36 - you need your multi-line comment to end
12:38 - you would type asterisk then forward
12:41 - slash
12:42 - the end of the script is blue again
12:45 - and you can see that this multi-line
12:47 - comment isn't being displayed as output
12:49 - now the cool thing about PHP files is
12:52 - that they can contain HTML CSS
12:55 - JavaScript and well of course PHP so I
12:58 - will also include some HTML code within
13:01 - this PHP file so in vs code to generate
13:05 - some boilerplate code you can type
13:07 - exclamation point and then tab
13:10 - we now have some HTML markup within our
13:13 - PHP file within the body of our document
13:16 - I'll add maybe a button
13:22 - I'll create a button to order a pizza
13:27 - I should probably precede this button
13:29 - with a line break
13:32 - so there's our button it currently
13:34 - doesn't do anything but that's just a
13:36 - demonstration that you can include more
13:39 - than just PHP code within a PHP file
13:41 - alright everybody so that is an
13:43 - introduction to PHP in the next video
13:46 - we'll discuss variables hey if you're
13:48 - enjoying this video please let me know
13:50 - by Smashing that like button leave a
13:52 - random comment down below and subscribe
13:54 - if you'd like to become a fellow bro
13:58 - well hello everybody Welcome to lesson
14:00 - two today I'm going to discuss variables
14:03 - in PHP a variable think of it as a
14:06 - reusable container that holds data we
14:09 - give that container a name that is the
14:12 - variable name there's different data
14:14 - types we'll discuss they include but are
14:17 - not limited to Strings integers floats
14:20 - and booleans there are still more than
14:22 - this but these are a few of the basics
14:24 - for beginners let's get started
14:27 - to declare a variable you type a dollar
14:30 - sign then a unique variable name
14:33 - I'm going to store a user's name a
14:36 - unique identifier could be just name
14:39 - I will set this variable name equal to
14:43 - a string of text so place your string of
14:46 - text within a set of double quotes
14:49 - add a semicolon to the end because we
14:51 - always do that why don't you enter in
14:54 - your first name
14:56 - then to display this variable as output
14:58 - we can type our Echo statement then add
15:01 - the variable name so type dollar sign
15:04 - name semicolon
15:07 - let's save
15:09 - and there is our name rendered as HTML
15:12 - the data type of this variable is a
15:15 - string it's a string of text and it can
15:18 - include spaces
15:20 - add a space followed by your last name
15:24 - as I'll put we're displaying my first
15:26 - name and my last name all as one long
15:29 - string of text if you Echo a message
15:33 - directly that is known as a string
15:35 - literal
15:37 - I will display a message such as
15:40 - hello
15:41 - then I want to add this variable name
15:44 - the easiest way to do that is to add a
15:47 - set of curly braces as a placeholder and
15:50 - within the curly braces add your
15:52 - variable name so dollar sign name
15:56 - hello whatever your name is
15:59 - let's add a few more variables how about
16:02 - a food variable
16:04 - what's the food you like
16:07 - I like pizza of course which we learned
16:09 - from the last video
16:12 - hello
16:13 - name
16:16 - I'll display another message
16:18 - Echo
16:21 - you like at our placeholder
16:25 - our variable name
16:27 - food
16:29 - let's save
16:33 - I'm going to disable this
16:36 - page is not in Dutch for some reason
16:41 - our output is all on one line I'm just
16:44 - going to add a line break
16:47 - a low bro code you like pizza
16:51 - what's another example of a string maybe
16:54 - an email
16:56 - let's declare our variable which we will
16:59 - name email
17:00 - add a set of quotes semicolon to the end
17:04 - uh fake at gmail.com
17:12 - so let's add another line break
17:17 - let's Echo
17:21 - your email is at our placeholder for a
17:25 - variable
17:26 - then our variable name
17:29 - email
17:31 - your email is fake gmail.com
17:35 - that's the string data type it's just a
17:38 - series of text
17:39 - your text can contain numbers
17:43 - such as fake123 gmail.com
17:47 - so even though these are numbers we
17:49 - treat them more as characters we can't
17:51 - use these for any sort of math
17:54 - that's where our next data type comes in
17:56 - integers whole integers
17:59 - an example of a whole integer would be
18:01 - somebody's age let's say that I'm 21 age
18:05 - equals 21. I'm not 21 anymore but I like
18:08 - to think that I still am the data
18:10 - contained within this variable age is an
18:13 - integer we don't have any quotes around
18:15 - this number
18:17 - I will Echo my age variable
18:21 - Echo
18:23 - you are our variable age
18:27 - years old
18:32 - let me add a blind break here
18:36 - there you are 21 years old
18:40 - and int is simply a whole integer
18:43 - you know somebody wouldn't be like half
18:46 - a year old like 21.5
18:49 - and age would be a whole number
18:52 - another example of a whole integer
18:54 - variable could be users
18:57 - let's create a variable named users and
19:00 - there are maybe two users online
19:04 - you wouldn't have half a user users
19:07 - would be a whole number
19:09 - let's Echo the amount of users
19:13 - there are at a placeholder
19:16 - our variable users
19:20 - online
19:24 - there are two online
19:26 - after the variable users let's add the
19:30 - word users
19:32 - there are two users online
19:36 - one more example of a whole integer
19:38 - could be a quantity
19:42 - you wouldn't have half a product you
19:44 - would have a whole product
19:45 - let's create a variable named quantity
19:48 - I'll just set it to three
19:51 - let's Echo
19:53 - you would like to buy
19:57 - are variable
19:59 - quantity
20:02 - items
20:04 - then a line break
20:07 - you would like to buy three items
20:10 - okay those are whole integers
20:13 - let's discuss floats next a float is a
20:16 - floating Point number it's a number that
20:19 - contains a decimal portion
20:21 - these variables are ins integers they're
20:24 - whole numbers
20:25 - an example of a float could be
20:28 - a grade point average
20:31 - maybe my grade point average is 2.5
20:36 - so let's Echo
20:41 - your
20:42 - GPA is
20:45 - then our GPA variable
20:49 - then line break
20:53 - your GPA is 2.5
20:56 - I think we're getting the hang of this
20:57 - I'm going to speed things up another
21:00 - float could be a price
21:04 - with a merry concurrency a price
21:06 - contains dollars and cents with the
21:09 - cents being a decimal portion
21:11 - suppose a pizza is 4.99
21:18 - let's Echo
21:21 - your
21:22 - Pizza is
21:25 - I'll add my price variable
21:27 - your pizza is
21:29 - price
21:31 - line break
21:35 - your pizza is 4.99 I'm going to add the
21:39 - dollar sign before 4.99
21:43 - but we have a problem
21:45 - PHP is getting confused because we
21:48 - precede our variable names with the
21:50 - dollar sign
21:51 - undefined variable 4.99
21:56 - if you would like to display a dollar
21:57 - sign as output you need an escape
22:00 - sequence I will precede my dollar sign
22:02 - with a backslash then it works just fine
22:07 - let me add your
22:08 - your pizza is 4.99
22:12 - so that's another example of a floating
22:14 - Point number a float another could be
22:18 - a tax rate
22:20 - tax
22:21 - rate
22:24 - I'll make up a tax rate like a sales tax
22:26 - rate 5.1 sounds good
22:30 - let's Echo
22:32 - the sales tax rate is
22:41 - tax rate
22:44 - oop I'm forgetting a dollar sign
22:48 - tax rate percent
22:50 - then a line break
22:54 - the sales tax rate is 5.1 percent
22:57 - those are floats floating Point numbers
23:00 - they're numbers that contain a decimal
23:02 - portion integers are whole numbers
23:06 - the last data type we'll cover are
23:08 - booleans booleans are either true
23:11 - or they're false
23:13 - it's like a light switch it can only be
23:15 - on or off
23:17 - so what are some variables that could be
23:19 - considered booleans
23:22 - what if somebody is employed they either
23:26 - are employed or they're not employed
23:29 - equals true
23:32 - I know there could be online
23:35 - is somebody online or offline
23:38 - maybe a user's offline I will set that
23:40 - to be false
23:42 - what about for sale
23:46 - something is for sale or it's not for
23:48 - sale
23:49 - I'll set that to be true
23:52 - now with booleans when you display them
23:54 - as output
23:55 - you don't see true or false rather this
23:58 - is what you see
24:00 - let's Echo
24:03 - online
24:05 - status
24:07 - colon then I'll add my Boolean variable
24:11 - online
24:15 - so online is false
24:17 - online status and then nothing appears
24:20 - the Boolean values when you output them
24:23 - if it's false it doesn't display
24:25 - anything however if online was true that
24:29 - will output a one one means true zero
24:32 - means false however we won't display
24:34 - zero nothing is displayed for false
24:38 - usually with Boolean variables we don't
24:41 - normally display them as output we use
24:43 - them internally within a program we
24:46 - might use these within an if statement
24:47 - or a loop which we'll discuss in the
24:50 - future but at this point you should be
24:52 - aware of the existence of Boolean
24:54 - variables in summary a Boolean variable
24:56 - is either true or false
24:59 - I'm going to get rid of these Echo
25:01 - statements you can mix and match
25:03 - variables when you display output with
25:05 - Echo
25:06 - I will add two variables this time
25:09 - here's a hypothetical situation you own
25:11 - a pizza restaurant and somebody places
25:14 - an online order for a given amount of
25:17 - pizzas
25:19 - you have ordered let's add our variable
25:25 - quantity
25:27 - X then our variable
25:30 - food
25:33 - you have ordered three x Pizza let's add
25:37 - an S to the end to make it plural
25:39 - you have ordered three x pizzas
25:42 - then let's calculate a total what I'm
25:45 - going to do now is declare a variable
25:47 - but I'm not going to assign it a value
25:49 - quite yet we will calculate a total
25:52 - total equals null no means no value
25:56 - We'll add a value later
25:59 - after displaying our message you have
26:02 - ordered quantity X food
26:05 - let's reassign our total variable
26:08 - equal to
26:10 - our quantity
26:13 - times
26:15 - to use multiplication use an asterisk
26:18 - our variable price
26:23 - so now our total should contain a number
26:26 - let's output it
26:28 - Echo
26:31 - your total is
26:35 - let's add our variable
26:38 - total and see what we have
26:41 - ooh I need a line break I'm forgetting
26:43 - about that
26:47 - you have ordered three x pizzas your
26:50 - total is 14.97 So I need to add a dollar
26:54 - sign or you can pick some other unit of
26:56 - currency however PHP is currently
26:58 - confused because we're preceding our
27:00 - placeholder with a dollar sign
27:03 - so I need to use an escape sequence
27:07 - your total is 14.97
27:11 - now in my program if I were to change
27:13 - the quantity
27:15 - well this total is going to be updated
27:17 - four pizzas is 19.96
27:22 - if I were to change the price that would
27:24 - also be reflected
27:26 - now the total is 23.96
27:30 - all right everybody so those are
27:31 - variables they are just a named
27:33 - container for storing reusable data
27:37 - there are a few different data types
27:39 - strings which are a series of text
27:42 - ins which are whole integers
27:45 - floats which are floating Point numbers
27:48 - and booleans which are either true or
27:51 - false in the next topic we'll have more
27:54 - practice with arithmetic and PHP and
27:56 - well those are variables in PHP
28:02 - hello everybody so in today's topic I'm
28:04 - going to be discussing some basic
28:06 - arithmetic and PHP I'll divide this
28:09 - video into different sections first we
28:11 - have arithmetic operators then the
28:14 - increment and decrement operators
28:16 - followed by operator precedence let's
28:19 - begin with arithmetic operators in my
28:21 - example we have three variables X
28:24 - X will equal a number like 10.
28:27 - then we have Y which I'll set to be two
28:31 - then Z we'll assign z a value later I
28:35 - will set that to be null
28:37 - if I would like to add X and Y together
28:39 - then store the result within Z we'll
28:42 - have to use some addition I could write
28:44 - something like this
28:45 - Z equals our variable X Plus
28:50 - our variable y
28:52 - then I will Echo whatever Z is
28:56 - so 10 plus 2 that's 12.
28:59 - so that's addition
29:01 - I'll go through these pretty quick
29:03 - they're fairly straightforward
29:06 - so 10 minus y would be subtraction
29:10 - x minus y store the results in z
29:14 - the result is eight
29:16 - now multiplication
29:18 - that is an asterisk
29:23 - 10 times 2 is 20.
29:28 - division is a forward slash
29:31 - 10 divided by 2 that is 5.
29:36 - to raise a base to a given power you use
29:39 - double asterisks
29:41 - 10 to the power of 2
29:43 - is 100 10 times 10 is 100.
29:48 - then we have the modulus operator that
29:51 - will give you the remainder of any
29:53 - division
29:55 - X modulus y
29:58 - well 10 divides by 2 evenly the
30:00 - remainder is zero
30:02 - if y was 3 imagine that we have a group
30:05 - of 10 students and they need to break
30:08 - into groups of three there's going to be
30:10 - one student that's remaining so the
30:12 - percent sign the modulus operator gives
30:15 - you the remainder of any division it's
30:17 - really helpful for determining if a
30:19 - number is even or odd you would just say
30:21 - modulus too if the remainder is 1 that
30:25 - number is odd if it's zero then it's
30:27 - even
30:28 - so those are basic arithmetic operators
30:31 - now we'll cover increment and decrement
30:33 - operators I have a variable which we
30:36 - will name counter
30:38 - I will set counter to be 0 to begin with
30:41 - if I need to increment this variable by
30:44 - 1 as if we're counting normally I would
30:46 - have to write an expression such as this
30:49 - our counter equals our counter plus one
30:55 - then let's Echo
30:57 - our counter variable
31:00 - so the result is one this can be
31:03 - cumbersome to write a shortcut you could
31:05 - do if incrementing a variable by one is
31:08 - replace this part of our expression with
31:10 - plus plus
31:12 - take the variable then add plus plus
31:15 - that will increment your variable by one
31:17 - plus plus is the increment operator for
31:21 - decrement you would use minus minus
31:25 - our counter is now at negative one if I
31:28 - were to set our counter to 10
31:30 - after decrementing it's now nine
31:33 - use plus plus to increment minus minus
31:36 - two decrement
31:37 - you can increment by a given value too
31:40 - if I would like to count by twos let's
31:43 - set counter to be zero
31:45 - instead of plus plus you would write
31:47 - plus equals then some number counter
31:51 - plus equals 2 will increment my variable
31:54 - by two
31:55 - plus equals three would be three
31:59 - on the flip side to decrement by a given
32:01 - value you would use minus equal some
32:04 - number so zero minus equals two will
32:07 - decrement my variable by two
32:10 - minus equals three would be well three
32:13 - so that is the increment and decrement
32:16 - operators
32:17 - lastly we have operator precedence given
32:21 - a complex arithmetic expression such as
32:23 - this example in which order do we solve
32:26 - each part of this expression
32:28 - we would begin with parentheses
32:31 - beginning from left to right if there's
32:32 - anything within parentheses we would
32:35 - solve that first
32:36 - for example with my expression let's
32:38 - Echo whatever the total currently is so
32:41 - the total for me is 2.999 beginning from
32:45 - left to right solve anything within
32:47 - parentheses first we currently don't
32:50 - have any parentheses then comes any
32:52 - exponents so beginning from left to
32:54 - right look for any exponents we do have
32:56 - five to the power of six let's see what
32:59 - that is five to the power of five
33:02 - do it a third time fourth time fifth
33:05 - time sixth time
33:07 - fifteen thousand six hundred twenty five
33:14 - beginning from left to right solve any
33:16 - multiplication division then modulus
33:19 - modulo is that the right term so we have
33:22 - addition subtraction here we go we have
33:24 - multiplication
33:26 - three times four that's twelve then we
33:29 - have division
33:30 - 12 divided by fifteen thousand six
33:33 - hundred twenty five is point zero zero
33:37 - zero seven six eight
33:39 - yeah
33:40 - then lastly addition and subtraction we
33:44 - have some addition one plus two is three
33:46 - three minus this number
33:49 - point zero zero zero seven six eight
33:54 - is
33:55 - our result
34:00 - 2.99232 that's operator precedence
34:03 - if you have a complex equation solve
34:06 - anything within parentheses first then
34:08 - any exponents multiplication division
34:11 - modulus then lastly addition and
34:13 - subtraction all right everybody in
34:15 - conclusion we have discussed arithmetic
34:18 - operators addition subtraction
34:19 - multiplication division exponents and
34:21 - modulus incremented decrement operators
34:24 - you can take a variable add plus plus to
34:27 - increment it or minus minus two
34:29 - decrement it then lastly operator
34:31 - precedence and well everybody that is
34:34 - basic arithmetic in PHP
34:38 - hey again everybody it's me and in
34:40 - today's topic I'm going to explain the
34:43 - get and post variables in PHP get and
34:46 - post are both special variables
34:47 - technically they're super Global
34:50 - variables but that's a topic for another
34:52 - day just think of them as special
34:53 - variables for now these variables are
34:56 - used to collect data from an HTML form
34:58 - if you have an opening form tag in HTML
35:01 - you can use the action attribute then
35:03 - send some data to some PHP file whatever
35:06 - you list here there's two different
35:08 - methods get and post they each have
35:11 - their own advantages and disadvantages
35:13 - which we'll discuss later for the time
35:15 - being before our PHP script let's create
35:18 - an HTML document in vs code to do that
35:21 - you would type exclamation point then
35:24 - hit tab then be sure to follow our HTML
35:27 - document with a PHP script then I'm
35:29 - going to open up a web browser in our
35:31 - HTML document we're going to create a
35:33 - form a user is going to type in a
35:35 - username a password then to log in
35:38 - they're going to hit a login button
35:39 - let's create that we'll need a label to
35:42 - begin with
35:44 - we'll need to close the label
35:47 - I'll add a line break
35:49 - the label will say user name
35:53 - then we'll add a text box use the input
35:56 - tag it's a self-closing tag
35:59 - add a line break
36:00 - within the input tag we will set the
36:04 - type to equal text because it's a text
36:06 - box
36:08 - then we will set the name to be
36:11 - user name
36:15 - let's copy our label and our text box
36:19 - paste these two lines again
36:21 - but change username to password this
36:24 - time
36:25 - the type will be password
36:28 - the name will be password
36:31 - so you can type something into your
36:33 - username if you were to type within the
36:35 - password box it should be hidden which
36:38 - is good then lastly We'll add a button
36:40 - we'll use a self-closing input tag
36:43 - the type will be submit it's a submit
36:46 - button
36:48 - the value is the text on the button
36:51 - let's set that to be a log in
36:54 - so we have a button but it currently
36:55 - doesn't do anything we will enclose all
36:58 - of our elements within a form tag
37:03 - be sure to open it then close it
37:07 - I will indent all of this within my
37:10 - opening form tag I will set the action
37:12 - attribute to be a file in which I want
37:15 - to send this data to I will send this
37:18 - data to the PHP script of the same file
37:21 - so my file is index.php I will list that
37:25 - here
37:26 - index.php if you had a separate PHP file
37:29 - you would just change the file name to
37:31 - reflect that or the file path then we
37:33 - will set the method attribute to be
37:36 - either get or post we'll begin with get
37:40 - so let's type in a username make up a
37:42 - password
37:44 - and this still doesn't do anything
37:45 - within our PHP script we're going to
37:48 - utilize the get variable because we're
37:50 - using the get method
37:53 - let's Echo then type dollar sign
37:56 - underscore the word get so get is a
37:59 - special type of variable it can hold
38:02 - more than one value if you're familiar
38:04 - with arrays it's technically an array
38:06 - within get we have both a username and a
38:09 - password I would like just the username
38:11 - to get just the username after the get
38:14 - variable add a set of square brackets
38:16 - then within a set of quotes type in the
38:19 - name of the information you're getting I
38:21 - would like the username
38:24 - let's see what happens
38:26 - I'm going to save
38:28 - type in a username make up a password
38:32 - login
38:33 - and there's my username
38:35 - now let's do this with the password as
38:37 - well
38:39 - Echo get password
38:42 - so let's refresh everything I'll make up
38:44 - a username type in a password
38:48 - there's my username there's my password
38:50 - I'm going to put my password on a new
38:52 - line I need a line break there's a
38:54 - couple different ways in which we can do
38:56 - this you can use some string
38:57 - concatenation
38:59 - one way to do that is to type dot
39:01 - followed by a line break within quotes
39:06 - I'll do that for the second line as well
39:09 - so that would work my preferred method
39:11 - is to do something like this
39:14 - I'm going to surround my get variable
39:17 - with quotes
39:19 - then add a set of curly braces around
39:20 - our get variable
39:27 - then add a line break
39:35 - bro make up a password log in there we
39:38 - are if using the get variable and you
39:40 - need to add a line break this is my
39:42 - preferred way although there's more than
39:44 - one way use whatever suits you now with
39:46 - get we have one problem if we were to
39:49 - take a look at the URL of this document
39:53 - when using the get method of a form any
39:55 - data sent over to a PHP form is appended
39:58 - to the URL username equals bro and
40:01 - password equals pizza123 there's no
40:04 - security because we're appending some
40:05 - sensitive information such as a password
40:07 - to the URL that's where post comes in I
40:11 - will change the method to post let's see
40:14 - what happens
40:16 - I'll type in my first name
40:19 - make up a password
40:21 - and login
40:23 - so we have an undefined array key if
40:26 - you're using the post method let's
40:28 - change get to be post
40:34 - make up a username type in a password
40:37 - log in there's my username there's my
40:40 - password
40:41 - and if I were to take a look at the URL
40:44 - my sensitive data isn't appended to the
40:47 - URL the post method is more secure than
40:49 - get but they each have their own
40:51 - advantages and disadvantages
40:53 - with the get method data is appended to
40:56 - the URL it's not secure I wouldn't pass
40:59 - any like usernames or passwords using a
41:01 - get method there's a character limit
41:03 - however with the get method bookmarking
41:06 - a page with values as possible get
41:09 - requests can be cached get tends to be
41:11 - better for a search page now with post
41:14 - data is packaged inside the body of the
41:17 - HTTP request it's more secure than get
41:21 - there's no data limit Pages involving a
41:24 - post request can't be bookmarked and the
41:26 - requests are not cached post tends to be
41:29 - better for submitting credentials like a
41:31 - username and a password any sensitive
41:33 - information so if security matters use
41:36 - post if it doesn't get might be better
41:38 - now let's cover an exercise let's clear
41:41 - our PHP form
41:44 - then within the body of our document we
41:46 - will create an order page for a
41:48 - restaurant we will Begin by creating a
41:50 - form
41:52 - we'll need a pair of form tags then be
41:54 - sure to close it
41:57 - within my opening form tag I will set
41:59 - the action attribute
42:02 - to be a file or a file location
42:05 - I will send this data to my index.php
42:09 - file
42:10 - for the method let's use post
42:15 - for my order form let's create a text
42:17 - box for a quantity
42:20 - I'll create a label
42:22 - I'll close it right away
42:25 - let's change the text to quantity
42:29 - then I'll add a line break
42:33 - we'll add a text box
42:36 - input the type is text
42:41 - the name will be quantity
42:46 - we'll use the input tag
42:48 - set the type attribute to B submit
42:52 - then value
42:54 - equals
42:56 - how about total we're calculating a
42:58 - total now within my PHP script let's say
43:02 - we have a food item I'll create a
43:04 - variable item equals make up some food
43:07 - like pizza
43:10 - we'll need a price
43:12 - price equals make up a price 5.99 sounds
43:15 - good
43:17 - then a quantity whatever the user is
43:19 - going to type in that is found within
43:21 - the post variable
43:23 - dollar sign underscore post
43:27 - add a set of square brackets semicolon
43:30 - but then the square brackets I would
43:32 - like the quantity
43:34 - now this is a personal choice what I
43:36 - like to do is that if I'm accessing the
43:39 - get or post super variable
43:41 - I like to store the result within a
43:44 - local variable
43:45 - so I'm going to create a quantity
43:47 - variable
43:49 - quantity equals whatever our quantity is
43:53 - from our HTML form I find caching one of
43:56 - these values within a local variable
43:57 - more convenient to work with
44:00 - so let's Echo a message like an order
44:02 - total
44:04 - you have ordered
44:10 - let's use our quantity
44:12 - to T
44:14 - X what's our item pizzas
44:18 - item I'll add s because it may be plural
44:24 - then we'll calculate a total Echo
44:28 - you know what let's create a total
44:30 - variable as well
44:32 - total I'll set that to be an old because
44:34 - we'll assign a value later
44:38 - total equals
44:42 - quantity
44:44 - times variable price
44:48 - then we'll Echo
44:51 - your total is
44:54 - add a placeholder our variable total
44:57 - then I will precede our placeholder with
44:59 - the dollar sign
45:01 - but we need to use that escape sequence
45:05 - all right let's save everything
45:07 - enter in a quantity I want three pizzas
45:12 - oh we need a line break as well
45:17 - you have ordered three x pizzas your
45:20 - total is 17.97
45:24 - and if I were to look at the URL
45:27 - we're using the post method so our
45:29 - quantity is not going to be appended to
45:31 - the URL
45:32 - if I were to use get let's replace post
45:35 - with get
45:37 - do that here as well
45:42 - I'm going to type in three pizzas again
45:44 - hit total I can change the url to
45:48 - reflect a different quantity like maybe
45:49 - I want 30 pizzas
45:51 - then resubmit you have ordered 30 pizzas
45:54 - the grand total is
45:57 - 179.70 that's one of the reasons why
46:00 - post is more secure than get you can
46:03 - change the url to reflect a different
46:04 - value alright everybody so that is both
46:07 - the get and post variables in PHP hey if
46:10 - you're enjoying my Series so far let me
46:12 - know by Smashing that like button leave
46:14 - a random comment down below and
46:16 - subscribe if you'd like to become a
46:17 - fellow bro
46:20 - hey everybody in today's topic I'm going
46:23 - to explain a few useful math related
46:25 - functions in PHP that you might be
46:27 - interested in we'll need an HTML
46:29 - document followed by a PHP script we
46:32 - will enter in some user input via an
46:34 - HTML form
46:36 - so let's create a form in our HTML
46:38 - document open it close it
46:43 - we will set the action equal to B our
46:46 - index page index.php
46:52 - for the method let's use post
46:57 - let's create a label
46:59 - label
47:01 - close it
47:04 - the label will be X we'll have a user
47:07 - enter in a number
47:09 - then let's add an input tag
47:11 - it's a self-closing tag
47:13 - the type will be text
47:17 - the name will be X
47:21 - then we need a submit button
47:24 - input type equals submit
47:30 - for the value let's say total
47:34 - it's a total button that's good enough
47:37 - for now
47:38 - if I'm using the post super Global
47:41 - variable
47:43 - let's say we need X Type post add a set
47:46 - of square brackets we would like the
47:49 - value of x
47:50 - I will cache this value within a local
47:52 - variable within my PHP script for
47:55 - convenience
47:56 - variable x equals whatever value for x
48:00 - that we receive just so that we're sure
48:02 - that everything's working fine let's
48:04 - Echo whatever X's Echo X
48:09 - So currently there's nothing in there
48:10 - let's type three hit total and there's
48:14 - our number X which is three so here's a
48:17 - few math related functions you may be
48:19 - interested in the first is the absolute
48:21 - value function let's say we have a total
48:24 - variable as well
48:27 - I'll declare this variable but not
48:29 - assign it quite yet I'll set that to be
48:31 - null then later on in my program we can
48:34 - assign total of value total equals to
48:38 - find the absolute value of a number type
48:41 - abs for absolute value followed by a set
48:44 - of parentheses semicolon whatever number
48:47 - or variable you put within this function
48:50 - ABS it will return the absolute value of
48:54 - that number we can either put a number
48:56 - in here or a variable let's put an X so
48:59 - variable X
49:01 - then I will Echo our total
49:06 - so I'm going to save I'll type in
49:09 - negative four this should return
49:10 - positive four
49:12 - which it does
49:14 - negative 100.123
49:20 - 100.123 that is the absolute value
49:23 - function let's cover a few more
49:25 - we have the round function we can round
49:27 - a number let's assign total equal to use
49:31 - the round function
49:33 - then we will pass in our variable X so
49:36 - let's save again
49:38 - refresh that
49:40 - 3.14 rounded is 3.
49:44 - 3.99 would be 4.
49:47 - now to always round down you can use the
49:50 - floor function
49:53 - so let's copy this line replace round
49:56 - with floor
49:58 - we will always round down so 3.99
50:01 - rounded is 3.
50:04 - 4.99 rounded down is 4.
50:07 - there's also seal meaning sealing which
50:10 - will always round up
50:12 - replace floor with seal
50:15 - let's save
50:17 - refresh everything
50:20 - 3.14 rounded up is 4 4.14 rounded up is
50:25 - 5. for this next example we'll need
50:27 - another number let's copy our label and
50:30 - our text box
50:32 - paste it replace x with Y here and here
50:38 - we'll need two numbers this time let's
50:40 - get whatever Y is so y equals
50:45 - within the post super Global variable we
50:48 - are looking for y
50:50 - we can use the power function to raise a
50:52 - base to a given power
50:54 - let's take our total variable equals
50:57 - power
50:58 - we'll need two numbers or two variables
51:01 - what is X raised to the power of Y
51:06 - so what is 2 to the power of 3. that
51:09 - would be eight two to the power of four
51:12 - is sixteen what about 3 to the power of
51:14 - 3 that is 27 3 to the power of four that
51:18 - is 81. that is the power function you
51:21 - can raise a base to a given power
51:24 - then we have square root I'm going to
51:26 - put that here
51:28 - total equals sqrt add a set of
51:32 - parentheses let's find the square root
51:34 - of x
51:37 - so we don't need Y in this case what is
51:39 - the square root of 100 that is 10.
51:43 - 144 that is 12. that's the square root
51:47 - function
51:48 - we will need three variables let's
51:51 - create another label and a text box
51:55 - the third number will be Z
51:57 - be sure to change the name too
52:00 - then we will create one more variable
52:04 - variable Z
52:06 - post Z then we have the max function
52:09 - total equals Max
52:12 - whatever values or variables you place
52:14 - within the max function the max function
52:16 - will give you the greatest value what is
52:19 - the maximum number between variables X
52:22 - y
52:24 - and z
52:25 - so let's save
52:27 - I'll refresh that
52:30 - one two three the highest number is
52:33 - three
52:35 - Thirty twenty ten
52:38 - the highest number is 30.
52:41 - then we do have the Min function which
52:43 - will give you the minimum
52:48 - what is the minimum number between 10 20
52:51 - 30.
52:53 - the minimum is 10.
52:55 - 3 2 1. the minimum is one
52:59 - that's the Min function
53:01 - the next function is an unusual one it
53:05 - is the pi function
53:07 - total equals Pi function so add a set of
53:11 - parentheses
53:12 - this will print 3.14
53:16 - and the remaining digits of pi if you
53:18 - ever need Pi you can use the pi function
53:22 - the next one is pretty useful it is the
53:24 - random function
53:26 - total equals Rand
53:31 - this will give you a completely random
53:32 - number I think up to just over 2 billion
53:36 - within the parentheses of the Rand
53:37 - function you can list two numbers for a
53:40 - minimum and a maximum if you're rolling
53:42 - a six-sided dice the minimum would be
53:45 - one the maximum would be six
53:47 - so now we're generating a random number
53:49 - between one and six
53:53 - we can either raise the minimum or raise
53:55 - the maximum
53:56 - for a random number between 1 and 100
53:59 - within the Rand function the first digit
54:02 - is one the second digit is one hundred
54:04 - so we have 10 85 17 84. if I were to
54:09 - raise the minimum let's say 90 we'll
54:11 - generate a random number between 90 and
54:13 - 100. maybe you could use this for a game
54:17 - now we're going to go over an exercise
54:19 - for this exercise we will have a user
54:22 - enter in a radius the radius of a circle
54:25 - using PHP we will calculate what the
54:28 - circumference would be the area and the
54:31 - volume if that radius is for a sphere
54:34 - so we will need to accept some user
54:36 - input we'll do that with an HTML form so
54:38 - within our HTML document let's create a
54:41 - form
54:42 - then close it
54:46 - the action will equal our index PHP file
54:52 - the method
54:54 - will be post
55:00 - we will need a label
55:03 - close it
55:07 - the label will be radius
55:12 - let's add a text box we need a
55:15 - self-closing input tag the type will be
55:17 - text
55:19 - the name will be radius because we're
55:22 - accepting a radius
55:24 - then a submit button
55:27 - input type equals submit
55:33 - for the value let's say
55:36 - calculate
55:38 - that's all we need
55:40 - within our PHP script let's create a
55:43 - local radius variable we will get the
55:46 - value from this text box via the post
55:49 - super Global variable
55:51 - let's access the post variable we are
55:54 - looking for the radius
55:58 - and now we have a radius
56:00 - we'll declare a circumference variable
56:05 - I think that's how to spell
56:06 - circumference
56:07 - that will be null
56:09 - to calculate the circumference of a
56:11 - circle we can follow this formula
56:14 - circumference equals 2 times Pi Pi we
56:20 - can use the pi function times our
56:23 - variable
56:24 - radius
56:27 - then let's Echo
56:30 - let's say circumference
56:33 - equals add a placeholder then insert our
56:37 - variable circumference
56:40 - let's say that this is in centimeters
56:42 - then I'll add a line break
56:44 - maybe the radius is five I'll calculate
56:46 - that the circumference is 31.4 and we
56:51 - have a lot of digits after
56:53 - there's one thing I'm going to change
56:54 - real quick I'm going to add a line break
56:56 - after our form
56:58 - for the radius let's say it's 10.
57:01 - I'm going to hit calculate here's our
57:03 - circumference
57:05 - 62.83 and some change centimeters
57:09 - we can use the round function to round
57:11 - to a given digit I would like to round
57:14 - to the second digit after the decimal
57:16 - before we display our output let's
57:19 - reassign circumference
57:21 - equal to use the round function
57:25 - then pass in our circumference
57:28 - but I'm going to make one change
57:30 - normally the round function will round a
57:32 - number to the nearest whole integer to
57:35 - round to a given digit add a comma then
57:38 - that digit place let's round to the
57:41 - second digit
57:42 - so our circumference is 62.83
57:45 - centimeters let's also calculate the
57:48 - area and the volume
57:50 - we'll need a area variable I'll set that
57:53 - to be null
57:55 - to calculate the area let's set area
57:58 - equal to we'll need the pi function
58:01 - times our radius to the power of 2 we
58:05 - can use the power function
58:07 - enter in our radius
58:11 - to the power of 2.
58:15 - then we can round our area
58:17 - equals round within the round function
58:20 - enter in your area
58:22 - we would like to round to the second
58:24 - digit after the decimal
58:27 - then we will display the area
58:30 - area equals our area variable
58:36 - I think technically that should be
58:38 - centimeter squared
58:42 - so let's save I'll enter in a new radius
58:44 - okay so if our radius is 15 this time
58:47 - I'll calculate that
58:48 - with the radius of 15 their
58:50 - circumference is
58:52 - 94.25 centimeters the area is
58:55 - 706.86 centimeter squared
58:58 - now we'll calculate volume if the radius
59:01 - is for a sphere
59:03 - volume equals no
59:10 - volume equals here's the formula
59:15 - 4 divided by 3
59:18 - times pi function
59:20 - times our radius to the power of 3 we
59:24 - can use the power function
59:26 - we are raising R radius to the power of
59:30 - three
59:32 - then we will take our volume and round
59:35 - to two decimal places
59:38 - volume comma 2.
59:42 - then we will display the result with
59:44 - Echo
59:46 - volume
59:48 - equals add a placeholder
59:51 - our volume
59:53 - centimeters I think that's cubed
59:55 - technically
59:57 - if our radius is 5
60:00 - their circumference is 31.42 the area is
60:03 - 78.54 and the volume is
60:07 - 523.60 centimeters cubed
60:10 - all right everybody well I thought that
60:12 - would be some good practice with some
60:13 - math functions now we're a little more
60:16 - comfortable using them if you would like
60:17 - a copy of this code I'll post it in the
60:19 - comments section down below and well
60:21 - those are some useful math related
60:23 - functions in PHP
60:27 - hey welcome back everybody in today's
60:29 - video I'm going to discuss if statements
60:31 - in PHP with an if statement we have a
60:34 - condition if some condition is true we
60:37 - can do something we can run some code
60:39 - however if that condition is false then
60:41 - we don't do it here's a situation
60:44 - suppose we have a website but you have
60:46 - to be 18 years or older to enter we can
60:49 - write a program to check somebody's age
60:51 - let's say we have a variable age age
60:54 - will equal make up a number 21. to write
60:58 - a if statement I would type if then I'll
61:01 - need a condition within parentheses what
61:04 - are we checking let's check to see if
61:06 - our variable age is greater than or
61:09 - equal to 18 then after the set of
61:12 - parentheses add a set of curly braces
61:16 - if this condition is true we can execute
61:19 - some code if it's false we skip over
61:22 - this code so if our age is greater than
61:24 - or equal to 18
61:26 - let's Echo
61:29 - you may enter this site
61:34 - so I'm going to save
61:36 - run this program you may enter the site
61:39 - what if this condition was false maybe
61:42 - my age is 15.
61:45 - in our if statement this condition is
61:47 - false that means we do not execute this
61:50 - code we skip over it as if it never even
61:53 - happened if you would rather do some
61:55 - other code at the end of your if
61:57 - statement you can add else then add a
62:00 - set of curly braces if this condition is
62:03 - false then skip over this code and
62:06 - execute the else statement
62:08 - instead let's Echo you must be 18 plus 2
62:16 - enter
62:17 - let's save
62:19 - and here's our other message you must be
62:22 - 18 plus to enter
62:23 - if I were to change age to 21 something
62:26 - that's above or equal to 18
62:29 - well we execute the first statement this
62:32 - portion of our if statement you may
62:34 - enter the site if this is true do this
62:36 - if not do this instead between if and
62:40 - else you can add else if
62:43 - else if add a set of parentheses and a
62:46 - set of curly braces if our condition is
62:49 - false we would then check any else if
62:52 - statements before resorting to the else
62:54 - statement let's also check if age
62:59 - is equal to zero double equals is the
63:03 - comparison operator you could check to
63:05 - see if two values are equal you don't
63:07 - want to use a single equal sign because
63:10 - that is the assignment operator PHP
63:12 - thinks you're assigning age to be zero
63:14 - use double equals for comparison
63:17 - if somebody's age is zero then let's
63:21 - Echo a different message
63:25 - you were just
63:28 - born
63:31 - I will set variable age to be zero save
63:35 - you were just born
63:37 - this condition was false we skip it this
63:41 - condition was true so we execute it we
63:44 - never reached the else statement however
63:46 - somebody types in negative one
63:49 - well then we resort to the else
63:51 - statement because both of these
63:52 - conditions are false
63:54 - let's change our else if statement let's
63:57 - say
63:58 - else if age is less than or equal to
64:01 - zero
64:02 - let's change this message
64:06 - that wasn't a valid
64:10 - age
64:12 - negative one is not a valid age
64:16 - just to be funny what if we said you
64:19 - were too old too old to enter this site
64:21 - I'll add another else if statement just
64:23 - to demonstrate that we can add multiple
64:25 - else if statements
64:28 - else if
64:30 - age
64:31 - is greater than or equal to 100.
64:35 - then we will Echo
64:39 - you are too old to enter this site
64:45 - if I were to set age to be 101
64:49 - the result states that you may enter
64:52 - this site
64:53 - the reason that we're executing this if
64:55 - statement and not this else if statement
64:58 - is because starting from the top we
65:01 - check the if statement first if it's
65:03 - false we continue down the line until we
65:05 - reach else
65:07 - age is 101 since this statement is
65:11 - technically true
65:12 - we would execute this code then skip
65:15 - everything else
65:17 - the order of your if and else if
65:18 - statements does matter
65:20 - I'm going to move this section of code
65:22 - to the beginning and make it the if
65:24 - statement
65:27 - first let's check to see if somebody's
65:29 - age is greater than or equal to 100
65:33 - I will change this section to be
65:35 - else if
65:37 - and that should work
65:38 - you are too old to enter the site
65:41 - you do need to pay attention to the
65:43 - order of your conditions I'll give you
65:45 - another example
65:47 - if statements also work with Boolean
65:50 - variables and values we have a variable
65:52 - adult adult will equal a Boolean value
65:56 - of either true
65:58 - or false let's set that to be true
66:03 - with your condition
66:05 - you can check to see if your variable
66:08 - is equal use double equals for
66:10 - comparison
66:11 - true or false
66:15 - if adult is equal to true
66:18 - then we will Echo
66:21 - you may enter this site adult is true
66:28 - you may enter the site if adult is false
66:33 - then nothing happens so let's add else
66:37 - Echo
66:38 - you must be an adult to enter
66:44 - you must be an adult to enter
66:46 - now there is a shorthand if you're using
66:48 - the comparison operator followed by a
66:51 - Boolean value
66:53 - you could just write the Boolean
66:55 - variable itself
66:56 - that is also valid and that's my
66:58 - preferred way of using Boolean variables
67:00 - within a condition if adult
67:03 - do something
67:05 - so let's set adult to be true
67:08 - you may enter the site
67:10 - if it's false you must be an adult to
67:13 - enter
67:14 - so that is the second example
67:16 - let's go over and exercise
67:19 - we will create a program to calculate
67:21 - somebody's pay including overtime we
67:25 - will need three variables
67:27 - hours
67:28 - I'll set that to be 40 to begin with
67:31 - they're working full-time a rate as in a
67:34 - rate of pay
67:36 - this person is making fifteen dollars
67:38 - per hour
67:39 - and then a weekly pay
67:43 - I will set that to be null to begin with
67:46 - depending on somebody's hours they may
67:48 - or may not make overtime pay or if they
67:51 - work zero hours they don't receive any
67:53 - pay this week first let's calculate
67:55 - their weekly pay if they work 40 hours
67:58 - or less
68:00 - if
68:02 - hours is less than or equal to 40
68:06 - then we will calculate our weekly pay
68:10 - with this formula it's only hours times
68:15 - their rate rate of pay
68:19 - then at the end let's Echo
68:23 - you made at our placeholder
68:27 - this week
68:29 - within our placeholder let's display the
68:32 - weekly pay variable
68:34 - pick your unit of currency I'll use
68:36 - American dollars I'll need to add an
68:39 - escape sequence
68:40 - 40 times 15 I think that's 600. you made
68:44 - six hundred dollars this week if we
68:46 - worked 20 hours then we make half of
68:49 - that three hundred dollars what if
68:51 - somebody doesn't work this week
68:53 - you made zero dollars this week
68:55 - what if somebody enters in a negative
68:57 - amount of hours like negative one
69:00 - well somebody made negative money this
69:02 - week let's write a condition to prevent
69:05 - that
69:06 - let's add an if statement
69:09 - then change this statement to be an else
69:11 - if statement
69:14 - if somebody is ours
69:18 - are less than or equal to zero
69:22 - then let's set weekly pay to be zero
69:26 - just in case somebody enters in a
69:28 - negative amount of hours because you
69:30 - can't work a negative amount even if
69:32 - somebody enters in a negative number
69:33 - like negative one or negative 10 our
69:36 - message still displays zero which is
69:38 - what we want
69:39 - lastly let's calculate overtime pay
69:42 - we'll do this within an else statement
69:45 - here's the formula let's set weekly
69:48 - pay
69:49 - equal to the first 40 hours are going to
69:53 - be at the standard rate
69:55 - let's take our rate
69:57 - times 40.
69:59 - then we will add within a set of
70:02 - parentheses we need to calculate the
70:04 - overtime pay maybe an employee Works 50
70:07 - hours this week
70:09 - let's take
70:10 - hours minus 40.
70:13 - I'm going to add another set of
70:15 - parentheses around this
70:18 - multiplied
70:20 - by
70:22 - rate
70:23 - times 1.5
70:26 - because with overtime pay at least in
70:28 - the United States I believe you make one
70:31 - and a half times your pay your hourly
70:33 - rate of pay if an employee Works 50
70:35 - hours this week their new weekly pay
70:38 - will be
70:39 - 825 dollars that is an exercise
70:42 - involving if statements
70:44 - and those are if statements in PHP
70:49 - Hello friends it's me again and in
70:52 - today's topic I'm going to explain
70:53 - logical operators in PHP there's three
70:56 - and or not they're used to combine
71:01 - conditional statements for example if we
71:04 - have a if statement we check a condition
71:06 - using these logical operators we can
71:09 - check more than one condition if using
71:11 - and
71:12 - if that were or we can check if at least
71:16 - one condition is true with the case with
71:19 - not we can reverse a condition if it's
71:22 - true it's now false if it's false it's
71:24 - now true more on that later we can make
71:27 - our conditional statements a little more
71:29 - sophisticated with logical operators
71:32 - here's an example
71:34 - we have a temperature we would like to
71:36 - check to see if our temperature Falls
71:38 - within a certain range let's say we have
71:40 - variable temp short for temperature this
71:43 - will be in Celsius because most of my
71:45 - viewers are from outside of the United
71:47 - States in the United States we use
71:49 - Fahrenheit but use whatever works for
71:51 - you
71:52 - let's say the temperature is 25 degrees
71:54 - Celsius
71:55 - let's write an if statement to check to
71:57 - see if our temperature Falls within a
71:59 - certain range
72:00 - if
72:03 - temp is greater than or equal to zero
72:07 - we'll start with one condition
72:09 - then let's Echo
72:12 - the weather is good
72:17 - our temp is 25 25 degrees Celsius
72:21 - the weather is good
72:23 - what if my temperature was 100 degrees
72:26 - Celsius
72:28 - well the weather is obviously not good
72:30 - right in fact the weather is horrible to
72:33 - make sure our temperature isn't above a
72:35 - certain number we can use the and
72:38 - logical operator which is a double
72:40 - ampersand
72:42 - if our temperature is equal to or above
72:45 - zero
72:46 - and
72:48 - our temperature
72:50 - is less than or equal to 30 30 degrees
72:54 - Celsius then the weather is good
72:58 - this statement is true
73:00 - but this one is false with the and
73:02 - logical operator both conditions must be
73:05 - true in order for us to execute this
73:07 - statement
73:09 - otherwise let's add an else Clause else
73:12 - Echo
73:15 - the weather
73:17 - is bad
73:19 - so 100 degrees Celsius that is not a
73:22 - good temperature the weather is bad
73:25 - what about negative 10 negative 10
73:28 - degrees Celsius
73:30 - well the weather is still bad
73:33 - 15.
73:35 - the weather is good
73:36 - 15 Falls within our range 15 is greater
73:40 - than or equal to zero and 15 is less
73:43 - than or equal to 30.
73:45 - Now using the orological operator which
73:48 - is two vertical bars
73:50 - at least one of these conditions needs
73:53 - to be true
73:54 - if we're writing the same program using
73:56 - the orological operator this is what I
73:59 - would change
74:00 - let's say if temp
74:02 - is less than zero
74:05 - or temp
74:07 - is greater than 30 then the weather is
74:10 - bad else the weather is good
74:14 - let's change temp to negative
74:17 - 1 million
74:21 - well the weather is bad
74:23 - if our temperature was positive 1
74:26 - million I believe that's actually a
74:28 - hundred million uh well the weather is
74:30 - obviously bad as well
74:32 - if our temperature is 25
74:35 - then the weather is good
74:37 - with our temperature being this high
74:40 - this statement is false
74:42 - but this one is true using the
74:44 - orological operator only one of these
74:46 - conditions needs to be true
74:48 - that's another way in which you can
74:50 - write conditions you could use the
74:52 - orological operator use whatever is best
74:54 - for your situation
74:57 - okay let's set temp to something
74:58 - reasonable like 15.
75:01 - all right now I'm going to discuss the
75:04 - not logical operator let's add a
75:06 - variable
75:07 - cloudy this will be a Boolean variable
75:10 - it's either true or false let's set that
75:14 - to be true the temperature is 15 degrees
75:16 - Celsius
75:18 - and the sky is cloudy that's set to true
75:21 - using an if statement
75:24 - if we're checking a Boolean variable we
75:27 - could write
75:30 - cloudy is equal to true but if we're
75:33 - working with booleans we can just short
75:35 - this to if
75:37 - the Boolean variable name
75:39 - that's valid
75:40 - if it's cloudy let's Echo
75:44 - it's it's cloudy
75:48 - else
75:51 - Echo
75:54 - it's sunny
75:56 - let me add one line break
75:59 - line break
76:01 - line break
76:04 - and I think we're good
76:07 - the weather is good it's cloudy
76:10 - using the not to logical operator we can
76:12 - precede our condition with an
76:14 - exclamation point
76:16 - if this condition is true the
76:19 - notchological operator will reverse it
76:21 - essentially
76:22 - so if not cloudy
76:24 - that means it's sunny
76:27 - else it's
76:29 - cloudy
76:31 - so it's cloudy
76:32 - I will change cloudy to be false
76:36 - it's now sunny
76:37 - that's basically the not to logical
76:39 - operator it will reverse the state of
76:41 - your condition
76:43 - meaning you can check to see if
76:44 - something is not true
76:47 - let's go over some practice
76:49 - in this example let's say that your
76:51 - country has elections let's assume that
76:54 - it's a democratic nation in many
76:56 - countries you have to be 18 years or
76:59 - older to vote right I'm assuming
77:02 - maybe we have variable age set the
77:05 - sequel to whatever your age is
77:07 - let's say that I'm 25 this time
77:10 - and we have a Boolean variable named
77:13 - citizen
77:15 - and I will set that to be true
77:18 - we're going to use the and logical
77:19 - operator to see if we can vote
77:22 - so with an if statement
77:24 - if variable age is greater than or equal
77:29 - to 18. I'm in the United States in order
77:32 - to vote you have to be at least 18 years
77:34 - old if we're at least 18 years old
77:37 - and we're a U.S citizen citizen
77:42 - then let's Echo
77:45 - you can vote
77:48 - in my example I'm 25 I'm a citizen
77:52 - both these conditions are true that
77:54 - means I can vote
77:57 - else if one of these statements wasn't
77:59 - true then let's Echo
78:03 - you cannot vote
78:07 - let's say that I am 12 12 years old
78:10 - well I cannot vote I'm too young
78:14 - or if I was not a citizen citizen is
78:16 - false well I cannot vote either
78:20 - another way in which you could write
78:21 - this program
78:22 - is you could say this is a little more
78:25 - complex by the way
78:27 - if age is not greater than or equal to
78:30 - 18
78:32 - or
78:34 - you are not a citizen then you cannot
78:37 - vote else
78:39 - you can vote
78:41 - I'm 18 but I'm not a citizen I cannot
78:44 - vote I'm 18 but I am a citizen you can
78:48 - vote I would probably stick with the
78:51 - previous example just because it's
78:52 - easier to read
78:54 - but this is another way in which we can
78:55 - use the notch logical operator and the
78:58 - or logical operator let's go over a last
79:01 - example just so that we really get the
79:03 - hang of this
79:04 - we're going to sell movie tickets
79:06 - we will have some Boolean variables
79:09 - we'll have a child variable
79:12 - I will set that to be false to begin
79:13 - with
79:15 - a senior I will set that to be false
79:18 - then a ticket price which I will set to
79:21 - be null to begin with
79:23 - if somebody's a child or a senior they
79:26 - get a discount
79:30 - if
79:31 - child
79:33 - or
79:36 - senior
79:37 - then the ticket price will be
79:40 - uh maybe ten dollars
79:43 - else
79:46 - ticket equals fifteen dollars
79:51 - that's quite a steep discount
79:54 - then at the end of our program let's
79:56 - Echo
79:58 - the ticket price is I'll add a
80:01 - placeholder add variable ticket
80:05 - pick a unit of currency I'll pick
80:06 - American dollars
80:09 - child is set to false we're not a child
80:11 - that's set to false we're not a senior
80:13 - that's set to false
80:16 - the ticket price is 15 the standard
80:20 - this is false
80:22 - or this is false that means we don't
80:25 - execute the statement we move on to the
80:27 - else statement
80:29 - if we were a child let's set that to be
80:31 - true then we get that discount the
80:33 - ticket price is ten dollars
80:36 - if we set child to be false but we're a
80:38 - senior
80:39 - I'll set that to be true we still get
80:41 - that discount
80:43 - all right everybody point being with
80:45 - logical operators there's many different
80:47 - ways in which we can check conditions
80:50 - there's and or not use whatever is best
80:53 - for your situation typically there's
80:56 - more than one way in which you can check
80:58 - a condition well everybody those are
81:00 - logical operators in PHP
81:05 - hey what's going on everybody so in
81:07 - today's video I need to explain switch
81:09 - statements a switch is a replacement to
81:12 - using many l-sif statements switches are
81:15 - more efficient and take less code to
81:18 - write compared to using many else if
81:20 - statements here is an example
81:23 - I have a letter grade
81:25 - a student's grade can be a b c d f or if
81:30 - their grade is invalid if we have an
81:31 - else statement that states that letter
81:34 - grade is not valid depending on what our
81:36 - grade is we will execute one of many
81:38 - statements if our grade is a then we
81:41 - will Echo you did great if it's B you
81:45 - did good
81:46 - see you did okay
81:49 - d
81:50 - you did poorly
81:52 - F you failed if we have a grade that
81:56 - isn't valid such as Pizza well that's
81:58 - not a grade Pizza is not a valid grade
82:01 - using many else if statements is fairly
82:04 - inefficient and it's a lot to write to I
82:07 - would like to propose a better solution
82:09 - and that is by using a switch which is
82:12 - the topic of this video to create a
82:15 - switch we will type switch add a set of
82:17 - parentheses then add a set of curly
82:19 - braces
82:21 - within the parentheses of the switch
82:22 - what would we like to examine let's
82:25 - examine our letter grade then we'll
82:28 - probably want to change our letter grade
82:29 - to something valid like a
82:31 - within the switch we're going to create
82:33 - cases one case for each match that we're
82:36 - looking up
82:37 - type case
82:39 - what are we comparing our grade to let's
82:42 - compare our grid to the letter A
82:46 - then add a colon
82:48 - if our grade matches this case we'll
82:51 - write some code what do we want to do
82:55 - let's Echo
82:59 - you did great
83:02 - after all of your code add break to
83:05 - break out of the switch
83:07 - this is the first case let's copy this
83:10 - case underneath it after the break
83:12 - statement
83:13 - let's paste it
83:16 - then we will have case b you did
83:19 - good
83:21 - let's copy this again
83:25 - KC
83:27 - you did okay
83:31 - then d
83:34 - you did
83:36 - poorly
83:40 - case f
83:43 - U
83:45 - failed
83:47 - our grade is currently in a
83:50 - you did great
83:52 - Let's test out case b
83:55 - you did good
83:56 - see
83:58 - you did okay
84:00 - d
84:01 - you did poorly
84:03 - F you failed what if we have a grade
84:06 - that isn't valid like pizza again
84:10 - well nothing happens there were no
84:12 - matching cases we simply exit the switch
84:16 - if none of these cases match you can add
84:19 - a default case type default
84:23 - I can't spell it right today
84:26 - if there are no matching cases what are
84:29 - we gonna do
84:30 - let's Echo some sort of message
84:33 - I'll add a placeholder
84:36 - our grade variable is not
84:39 - valid
84:41 - so Pizza is obviously not a letter grade
84:44 - Pizza is not valid
84:46 - there were no matching cases therefore
84:49 - we resulted to the default case the
84:52 - default case is kind of like the else
84:54 - statement now the reason that you have a
84:56 - break in here let me demonstrate is
84:58 - because you will break out of the switch
85:01 - what if we were missing these break
85:02 - statements temporarily I'm going to
85:04 - remove them
85:08 - let's say that our grade is B
85:13 - you did good you did okay you did poorly
85:15 - you failed B is not valid
85:17 - you need the break statement to break
85:18 - out of the switch
85:20 - wherever there's a match we will execute
85:22 - the code followed underneath then any
85:25 - subsequent code followed after
85:28 - so be sure to include those break
85:29 - statements
85:31 - unless you want to execute every
85:33 - statement afterwards in some cases that
85:35 - could be helpful but not for this one
85:37 - let's go over another example
85:40 - we're going to get the current date
85:43 - I'll create variable date
85:45 - to get the current date we will use the
85:48 - date function
85:49 - within the parentheses of the date
85:51 - function within a set of quotes Type L
85:54 - just to be sure it's working fine let's
85:56 - Echo our date for testing
86:00 - L will give you the day of the week
86:03 - currently for me it's Monday
86:06 - so let's place our date within a switch
86:11 - we'll create a switch parentheses curly
86:13 - braces we are examining our date
86:18 - then we'll need a case case
86:21 - Monday
86:24 - if today is Monday let's Echo
86:30 - I hate Mondays
86:35 - then break
86:40 - so it's Monday
86:42 - I will Echo I hate Mondays
86:46 - so let's copy this case paste it change
86:49 - Monday to Tuesday
86:52 - what can we say for Tuesday
86:56 - it is Taco Tuesday
87:01 - So currently for me it's still Monday
87:04 - just for testing purposes I am going to
87:07 - change our date
87:10 - after we get the current date
87:13 - I just want to be sure that our switch
87:14 - is working
87:16 - what if our date was Tuesday it is Taco
87:18 - Tuesday
87:20 - what if it's Wednesday
87:30 - the work week is half over
87:35 - let's change our case to be Wednesday
87:38 - the work week is half over
87:43 - Thursday
87:50 - it's almost the weekend
87:55 - change our date to be Thursday
87:57 - it's almost the weekend
88:05 - Friday
88:09 - the weekend is here
88:16 - the weekend is here
88:18 - Saturday
88:26 - time to party
88:32 - time to party
88:38 - then Sunday
88:40 - time to
88:43 - let's relax on Sunday
88:47 - time to relax it's optional but we could
88:50 - add a default case if there are no
88:52 - matching cases
88:55 - let's Echo
89:01 - our variable date
89:03 - is not a day
89:08 - let's change our date to something like
89:10 - pizza
89:12 - well Pizza is not a day
89:15 - so I'll remove this line depending on
89:17 - what day you're executing this code it
89:19 - will display a custom message depending
89:21 - on the day of the week
89:23 - like I said today for me it's Monday so
89:26 - my message prints I hate Mondays
89:29 - all right everybody in conclusion a
89:31 - switch is a replacement to using many
89:33 - lcip statements they're more efficient
89:36 - and take less code to write I would
89:38 - recommend a switch if you're checking
89:39 - some value or variable many times over
89:42 - and well everybody those are switches in
89:45 - PHP
89:48 - hey everybody in today's video I need to
89:51 - explain for Loops a for Loop will repeat
89:54 - some code a certain amount of times for
89:57 - example I will display the word hello
90:01 - hello then I will add a line break I can
90:04 - write code once then repeat it however
90:07 - many times that I want with the for Loop
90:09 - to create a for Loop Type 4 parentheses
90:13 - curly braces then place your code you
90:15 - want to be repeated Within These set of
90:18 - curly braces
90:20 - I would like to display the word hello a
90:22 - certain amount of times that's the nice
90:24 - thing about for Loops you can write code
90:26 - once then repeat it but we'll need to
90:29 - calculate how many times we're going to
90:30 - repeat it within the parentheses of the
90:32 - for Loop we can write up to three
90:34 - optional statements each separated with
90:37 - a semicolon the first statement is that
90:40 - we can create a counter it's as if we're
90:42 - assigning a variable a common naming
90:45 - convention for a counter is variable I I
90:48 - meaning index I can set this equal to
90:51 - zero to begin with the next statement is
90:54 - a stopping condition
90:56 - when this condition is no longer true we
90:59 - escape the for loop I would like to
91:01 - display the word hello five times my
91:03 - condition will be variable I
91:06 - is less than five
91:09 - once I is no longer less than 5 we will
91:12 - escape
91:13 - the third optional statement we can use
91:15 - to increment or decrement our counter
91:19 - after each iteration I will increment I
91:21 - by One I plus plus
91:25 - this code will be repeated five times
91:28 - here we are one two three four five
91:31 - instead of displaying the word hello
91:34 - let's display our index I
91:37 - then add a line break
91:43 - I currently holds our counter we set the
91:46 - counter to begin at zero and it will
91:49 - stop when I reaches five zero one two
91:52 - three four maybe we would like to start
91:55 - at one
91:56 - and continue as long as I is less than
91:59 - or equal to five then we're no longer
92:02 - beginning at zero
92:04 - we could change this condition to be ten
92:07 - we will count up to ten
92:09 - or one hundred
92:11 - we will count up to one hundred
92:13 - when you increment your variable you can
92:15 - increment by a different number like two
92:17 - I plus equals two
92:21 - we are now counting up by twos
92:23 - one three five seven if we change our
92:26 - counter to be two we'll start at two
92:29 - then count up by two or maybe we can
92:31 - count up by threes
92:33 - two five eight eleven
92:35 - now to decrement let's begin at 10 our
92:39 - counter will be at ten
92:41 - we'll continue this for loop as long as
92:43 - I is greater than zero
92:47 - then to decrement take I then add minus
92:50 - minus
92:52 - so now we begin at 10 and decrement by
92:55 - one during each iteration
92:57 - or we can even decrement by twos I minus
93:00 - equals two so we begin at ten and we're
93:04 - decrementing by twos so that's a for
93:06 - Loop you repeat some code a certain
93:08 - amount of times there are three optional
93:11 - statements within the for Loop a counter
93:13 - we can declare a condition then we can
93:17 - increment our counter by a certain
93:18 - amount or decrement
93:20 - let's go over an exercise
93:23 - we will create an HTML form
93:26 - in vs code hit exclamation point tab
93:29 - that will generate some HTML code
93:32 - we'll create a form
93:38 - the opening form tag will have an action
93:40 - attribute of
93:42 - our PHP page index.php
93:46 - the method let's assign to post
93:51 - we'll create a label
93:53 - label
93:54 - close it
93:57 - enter a number two count
94:02 - two
94:06 - we will add a text box input type
94:09 - the type is text
94:11 - the name will be counter
94:17 - then a submit button
94:19 - input type equals submit
94:23 - for the value
94:25 - let's say start
94:27 - the user is going to type in a number to
94:29 - count up to we'll need to get that value
94:32 - from the text box
94:33 - let's say variable counter
94:36 - we will access the post super Global
94:39 - variable
94:42 - we would like our counter
94:47 - then we'll create a for Loop four
94:49 - parentheses curly braces
94:51 - we'll need our index for our for Loop
94:54 - so variable I
94:57 - equals zero to begin with we're counting
94:59 - up our condition will be variable I
95:04 - is less than or equal to our counter
95:09 - then we will increment variable I by 1
95:11 - during each iteration
95:13 - during each iteration let's Echo
95:16 - whatever variable I is
95:18 - then add a line break
95:21 - let's see what happens
95:23 - let's refresh this let's count up to ten
95:26 - I'll enter 10 Press Start then we count
95:29 - up to 10. if you would like to exclude
95:32 - zero we can set I to be one
95:35 - there we are we have counted up to ten
95:37 - or I could pick a different number like
95:39 - 100. Press Start we now count up to 100.
95:44 - now what we're going to do is count down
95:46 - from a number enter a number to count
95:49 - down from
95:52 - we're going to change our for Loop a
95:54 - little bit we will set our counter of I
95:57 - to equal the number that we receive our
96:01 - counter variable
96:03 - will continue as long as I is greater
96:06 - than zero then we will decrement I
96:11 - so let's save
96:13 - you might have to refresh let's count
96:15 - down from 10 Press Start and here we are
96:18 - we have started at 10 and we have
96:20 - counted down to one
96:22 - or I can enter a different number like
96:24 - 100
96:25 - so we start at 100 then count down to
96:28 - one
96:29 - so that's a for Loop everybody you can
96:31 - repeat some code a certain amount of
96:34 - times you only have to write it once
96:37 - then repeat it however many times that
96:39 - you need and well everybody those are
96:41 - four Loops in PHP
96:45 - hey everybody it's me again today I'm
96:47 - going to explain while Loops in PHP with
96:49 - the while loop you can do some code
96:51 - infinitely while some condition remains
96:53 - true it's very similar to a for Loop but
96:57 - with the for Loop we intend to do some
96:59 - code a limited amount of times with the
97:01 - while loop it may be infinite there's a
97:04 - lot of overlap where you can use either
97:06 - a for Loop or a while loop here's how to
97:08 - create one
97:09 - type while parentheses curly braces
97:12 - within the parentheses we can set a
97:14 - condition let's say we have a counter
97:16 - variable we will count up to ten keep
97:19 - doing this code while counter is less
97:22 - than or equal to 10. another difference
97:25 - between a for Loop and a while loop is
97:27 - that with the while loop we don't have
97:28 - three statements we just have one with
97:31 - the for Loop you can create an index a
97:33 - condition and there's another statement
97:35 - to increment or decrement we don't have
97:37 - that with the while loop so we'll have
97:39 - to set that manually
97:41 - outside of the while loop let's say we
97:43 - have a counter counter will equal zero
97:46 - while counter is less than or equal to
97:48 - 10. let's increment our counter by one
97:52 - counter plus plus
97:55 - then let's Echo our counter variable
98:00 - then add a break
98:03 - so simple enough
98:05 - that should be less than 10. there we
98:08 - escape the while loop when this
98:09 - condition is no longer true it's very
98:12 - similar to a for Loop honestly in this
98:14 - situation I would probably stick with
98:16 - the for Loop because you're still doing
98:18 - something a limited amount of times
98:20 - while Loops tend to be better if you
98:22 - need to do something possibly infinitely
98:24 - let's say we have a stopwatch program we
98:28 - don't know when the user is going to
98:29 - stop the stopwatch we would need to keep
98:31 - on updating our stopwatch until the user
98:34 - presses stop so we could write a program
98:36 - like this instead suppose we have a
98:39 - variable seconds to keep track of the
98:41 - amount of seconds
98:43 - then a Boolean variable named running
98:47 - if our stopwatch is no longer running if
98:50 - somebody hits the stop button we will
98:52 - set that to be false
98:53 - our condition could be a while
98:56 - running
98:58 - is equal to true if this variable is a
99:02 - Boolean we can just shorten this to
99:04 - while running while our stopwatch is
99:06 - running update the time or something
99:09 - I haven't talked about the sleep
99:10 - function yet but we can make our program
99:12 - sleep for a given amount of seconds so
99:14 - let's pretend that we wait one second
99:17 - then after waiting one second let's
99:21 - increment seconds by one
99:24 - then Echo the current amount of seconds
99:29 - and I will add a break I wouldn't
99:32 - recommend running this code we're going
99:34 - to be stuck in what is known as an
99:35 - infinite loop our program has no way of
99:38 - stopping and it might crash your
99:40 - computer you can see that the time just
99:41 - goes on and on forever so let's stop
99:44 - that
99:45 - my computer might crash this code is
99:48 - going to run forever because we have no
99:50 - way of escaping this Loop if you have a
99:52 - while loop you'll want some way to break
99:54 - out of the while loop from inside of it
99:56 - I'm going to create a stop button
100:13 - foreign
100:17 - I now have a stop button let's stop that
100:20 - before it crashes
100:23 - now to escape out of this loop I could
100:25 - write some code like this
100:27 - I'm going to write an if statement
100:30 - I haven't discussed the is set function
100:32 - yet but we can check to see if a button
100:34 - is clicked or not I'm going to access
100:36 - our post variable
100:40 - and I have created a stop button with
100:42 - the name of stop
100:45 - if I click the stop button then let's
100:48 - set running to be false
100:51 - then we can escape out of the while loop
100:56 - else
100:57 - if the user doesn't press the stop
100:59 - button
101:02 - then let's Wait Another Second and
101:04 - update our timer
101:07 - so this program is going to continue
101:09 - until I hit the stop button
101:13 - and it broke
101:15 - there it stopped what you should
101:17 - remember from this is that a while loop
101:19 - will do some code possibly forever while
101:21 - some condition is true you would need
101:24 - some way of making your condition false
101:25 - in this case I just set up a button to
101:28 - stop the timer there is a lot of overlap
101:30 - where you can use either a for Loop or a
101:32 - while loop if you need to do something a
101:34 - limited amount of times use a for Loop
101:37 - if you need to do something a possibly
101:39 - infinite amount of times a while loop
101:40 - might be better and well everybody those
101:43 - are while Loops in PHP
101:47 - why hello again everybody today I need
101:49 - to explain a raise in PHP think of an
101:52 - array as a special type of variable
101:55 - which can hold more than one value at a
101:58 - time in my example I have four different
102:00 - variables food one food two food three
102:03 - food four we have an apple orange banana
102:06 - coconut it can be very inconvenient to
102:09 - have to work with so many variables it
102:11 - would be really nice if I could store
102:13 - all of these values in one place which
102:16 - is what we can do with an array let's
102:18 - delete these variables we will create a
102:21 - special type of variable which is an
102:23 - array to create an array you'll need a
102:25 - variable name to begin with let's say
102:28 - Foods Foods equals to create an array
102:32 - type array add a set of parentheses then
102:35 - the semicolon at the end this is a
102:38 - function which we'll discuss more in the
102:40 - future whatever values you're going to
102:42 - squeeze into this variable just place
102:44 - them within the parentheses we had four
102:46 - variables Apple orange banana coconut
102:57 - separate all of your values with the
103:00 - comma there we go we now have what
103:02 - appears to be a variable but it's
103:04 - technically an array it stores more than
103:07 - one value in one convenient place if I
103:10 - was to Echo my array which I named Foods
103:13 - this is what happens
103:16 - warning a rate to string conversion we
103:19 - can't directly print this array instead
103:22 - you would need to access one of the
103:23 - elements an element is a given position
103:26 - within an array currently we have four
103:29 - elements because there's four values to
103:32 - access one of the elements found within
103:34 - your array after the array name add a
103:37 - set of square brackets then an element
103:40 - number with the raise the first element
103:43 - has an index of zero
103:45 - I would like the first element within my
103:47 - array so the element is going to be zero
103:50 - that will display Apple which is the
103:53 - first element in my array let's do this
103:55 - with the others for practice
103:58 - let's Echo Foods at index one
104:01 - I should probably add a line break so
104:04 - let me do some string concatenation real
104:06 - quick I'll add a line break
104:09 - do that here as well
104:11 - we have apple Orange
104:14 - let's do this with the others
104:16 - Foods at index two is banana
104:20 - Foods at index three that would be
104:24 - coconut what if I attempt to access an
104:27 - element that doesn't exist we only have
104:29 - four elements if I access our array
104:33 - Foods
104:34 - at index four
104:37 - well then we have a warning undefined
104:40 - array key for that is something you do
104:43 - need to pay attention to if you need to
104:46 - display all of the elements of an array
104:48 - there's an easier way of doing this
104:50 - instead of echoing every single element
104:52 - line by line
104:55 - we can use a for each Loop
104:58 - four each at a set of parentheses then a
105:01 - set of curly braces
105:03 - for each take your array Foods
105:07 - as
105:09 - now what we need is a temporary name for
105:12 - each element within the array
105:15 - my personal naming convention if I'm
105:17 - accessing a single element within an
105:20 - array I like to take the array name and
105:23 - set the variable name to be the singular
105:25 - version if we're working with Foods well
105:29 - each element is considered a food
105:33 - for every food in foods
105:36 - if we were working with different values
105:38 - let's say cars my for each Loop may be
105:41 - for every
105:43 - car in Cars but that's just my naming
105:47 - convention So within this for each loop
105:49 - I will Echo
105:51 - each food
105:54 - then I'll add a break line
105:58 - okay let's see what happens
106:01 - here are all the elements in our array
106:03 - to display all of the elements in your
106:06 - array a convenient way to do so is to
106:08 - use a for each Loop
106:10 - there are a lot of useful utilities
106:12 - related to arrays
106:14 - to change one of the elements of an
106:16 - array type the name of the array
106:19 - then we'll list an index number
106:21 - I would like to change the first element
106:23 - in this array to be a pineapple type the
106:27 - name of the array
106:28 - followed by a set of square brackets
106:31 - the first element in my array is zero
106:34 - I will set that to equal a new value
106:37 - Foods at index 0 is now a pineapple
106:41 - pineapple orange banana coconut
106:46 - there is a push function which will add
106:48 - a new element to the end of your array
106:51 - array underscore
106:53 - push function
106:56 - within the set of parentheses type in
106:59 - the name of your array comma
107:01 - then a value
107:03 - at the end of my array I would like to
107:05 - add a pineapple
107:08 - Apple orange banana coconut pineapple
107:10 - you can add more than one value too
107:12 - let's add a kiwi as well
107:15 - Apple orange banana coconut pineapple
107:18 - kiwi that is the array push function you
107:21 - can add one or more elements to the end
107:23 - of your array after you create one
107:26 - then we have the pop function array
107:29 - underscore pop
107:31 - pup will remove the last element in your
107:34 - array place your array name within the
107:36 - set of parentheses
107:37 - array pop Foods
107:40 - now we have apple orange banana our last
107:43 - element coconut was removed
107:45 - then we have shift array underscore
107:49 - shift
107:50 - shift will remove the first element in
107:52 - your array then shift all of the
107:54 - elements over by one within the set of
107:57 - parentheses list your array name
108:00 - we now have an orange banana coconut our
108:03 - Apple was removed it was shifted shifted
108:06 - out of the array
108:08 - we can reverse an array
108:10 - array underscore reverse
108:14 - place your array name within the set of
108:16 - parentheses
108:17 - now this isn't going to work I'll
108:18 - explain why
108:20 - our array is still in the same order
108:21 - Apple orange banana coconut
108:24 - this function returns a new array we can
108:28 - assign the result to a new array
108:30 - such as
108:33 - reversed
108:35 - Foods
108:37 - equals the array reverse function
108:40 - then I could display this
108:44 - our array is now reversed coconut banana
108:46 - orange Apple
108:48 - otherwise the array that's returned we
108:50 - can reassign it to the same array
108:53 - which is what I'll do
108:56 - that does the same thing if you would
108:58 - rather reuse the same array that is how
109:01 - to reverse an array
109:02 - we can count the elements in an array
109:06 - I will Echo
109:08 - use the count function
109:10 - place your array name within the
109:12 - function
109:14 - let me cut this real quick
109:17 - we have four elements within our array
109:19 - use the count function to get the
109:21 - current number of elements within your
109:23 - array
109:24 - all right everybody so that's an array
109:26 - think of it as a special type of
109:28 - variable that can hold more than one
109:30 - value at a time it's a convenient way to
109:33 - store multiple values that are similar
109:35 - or related in place of creating many
109:38 - different variables it's a lot easier to
109:40 - work with an array than several
109:42 - variables and well everybody those are
109:45 - arrays in PHP
109:49 - hey welcome back everybody today I'm
109:51 - going to explain associative arrays it's
109:54 - an array where each element is a key
109:57 - value pair for example we can make an
109:59 - array where each element is a country
110:02 - that's the key and the value is a
110:05 - capital A few other examples could be an
110:09 - ID and a username
110:11 - or an item and a price these would be
110:14 - examples of key value pairs here's an
110:17 - example let's start with a basic array I
110:20 - will create an array of capitals
110:23 - capitals equals we will use the array
110:26 - function
110:27 - we'll begin with keys each key needs to
110:30 - be unique I'll think of four examples we
110:33 - have the USA
110:36 - Japan
110:39 - South Korea
110:42 - then maybe India
110:46 - right now capitals is an array it's not
110:48 - an associative array to change this
110:51 - array into an associative array after
110:53 - each key add an arrow
111:02 - for readability I'm going to place each
111:04 - element on a new line
111:07 - it's not necessary but it's a lot easier
111:09 - for me to read following the arrow we
111:12 - will give each key a value the value in
111:15 - this example will be each country's
111:18 - respective Capital the capital of the
111:20 - USA is Washington DC
111:25 - Japan that's Kyoto
111:30 - South Korea
111:32 - that is Seoul
111:34 - India
111:36 - new
111:38 - Delhi
111:40 - we now have an associative array it's
111:43 - made of key value pairs
111:45 - if you need one of the values at a given
111:48 - key
111:49 - we would then access our associative
111:51 - array
111:52 - capitals at index then place your key
111:55 - within the set of square brackets let's
111:58 - find the capital of the USA
112:01 - then let's Echo whatever the result is
112:05 - and the result is Washington DC if I
112:08 - change the key to Japan
112:11 - we will be given the value at this key
112:14 - of Japan
112:16 - to print all of the key value pairs of
112:18 - our associative array we'll use a for
112:20 - each Loop
112:24 - within the parentheses we're going to
112:26 - write something a little different first
112:28 - we need our associative array
112:31 - capitals
112:32 - as
112:35 - key
112:36 - Arrow
112:38 - value
112:40 - this for each Loop will Loop through all
112:42 - of the key value pairs
112:45 - let's print them
112:47 - Echo
112:48 - I'll add a placeholder let's print each
112:50 - key
112:53 - and each value
112:55 - then I'll add a break line
112:59 - here are the keys
113:02 - and here are the values
113:04 - I'll add an equal sign before key and
113:06 - value just so it's more readable
113:09 - that's how to use a for each Loop to
113:11 - Loop through all the key value pairs in
113:13 - this associative array
113:15 - to change one of the values we need to
113:17 - access this array by a key
113:20 - I'll change the capital of the USA to be
113:23 - maybe Las Vegas let's take our
113:26 - associative array
113:28 - then I would like to access using square
113:31 - brackets USA
113:34 - set this equal to some new value the new
113:37 - value will be Las Vegas when I run this
113:41 - program
113:43 - the value at this key is now Las Vegas
113:48 - that's how to update a key value pair
113:51 - First Look up the key then you can set
113:53 - the value equal to some new value
113:56 - to add a new key value pair we will
113:58 - access our associative array
114:01 - add a set of square brackets
114:03 - then place a new key within a set of
114:05 - quotes within the square brackets let's
114:08 - add China
114:10 - will equal
114:12 - Beijing
114:16 - there's our new key value pair the key
114:18 - is China
114:19 - the value is Beijing
114:23 - the pop function will remove the last
114:25 - pair in this array
114:26 - array underscore pop
114:29 - we will pop our associative array
114:32 - capitals
114:34 - our pairing of India and New Delhi is
114:36 - gone
114:37 - that's how to remove the last pair in
114:39 - this array
114:41 - the shift function will remove the first
114:43 - element
114:44 - array
114:46 - shift
114:47 - pass in your array
114:50 - the USA and Washington DC pair is now
114:53 - gone it's shifted out of the array
114:56 - if you ever need all of the keys in this
114:59 - associative array there is an array Keys
115:02 - function
115:03 - array
115:05 - keys
115:07 - pass in your array
115:09 - of capitals
115:12 - this will return a new array
115:14 - I will assign that to a new array let's
115:17 - name it keys
115:19 - then I'm going to display all of the
115:21 - keys within our array using the for each
115:23 - Loop
115:25 - so let's change this a little bit
115:28 - we have an array of keys and I would
115:30 - like to display
115:31 - as key
115:34 - for every key in Keys
115:37 - let's Echo each key then I'll add a line
115:41 - break
115:43 - here are all of the keys within our
115:44 - associative array
115:46 - if you need the values instead there's a
115:49 - values function
115:53 - array
115:55 - values I'll create a new array named
115:58 - values
115:59 - for every value in values
116:05 - print each value
116:08 - and here are the Capitals all of the
116:11 - values within our associative array
116:14 - you can flip the keys and the values by
116:16 - using the flip function
116:19 - all right
116:20 - flip
116:23 - pass in your array within the set of
116:25 - parentheses
116:27 - this function will return a new
116:29 - associative array
116:31 - we can either create a new associative
116:32 - array
116:33 - or reassign it
116:36 - I'll reassign our associative array
116:39 - then we need to change our for each loop
116:41 - again
116:43 - so we have capitals as
116:45 - key Arrow
116:48 - value
116:49 - then we will display
116:51 - every key and every value
116:54 - key
116:55 - equals
116:57 - value
116:59 - our values are now switched with our
117:01 - keys the capitals are now the keys the
117:04 - countries are the values
117:06 - that is the array flip function
117:10 - if you need to reverse the order of your
117:13 - pairs you can use the reverse function
117:16 - array underscore reverse
117:19 - pass in your array
117:23 - this will return a new array I will
117:26 - reassign it
117:28 - the order in which we originally placed
117:30 - these key value pairs is now reversed
117:33 - India is now at the beginning the USA is
117:36 - now at the end then if you need the
117:38 - amount of key value pairs you can use
117:40 - the count function Echo count
117:44 - capitals
117:45 - let me get rid of this for each Loop to
117:48 - demonstrate we have four pairs within
117:50 - our associative array one two three four
117:55 - all right everybody so it's time for
117:56 - some practice I will delete everything
117:59 - but our associative array
118:02 - we'll create an HTML document so
118:04 - preceding our PHP script using vs code I
118:08 - will type an exclamation point then hit
118:10 - tab to create some sample HTML we'll
118:13 - create a text box a user is going to
118:15 - type in a country hit submit then we
118:18 - will return the value for that
118:20 - Associated country that capital
118:23 - we'll need a form
118:25 - form be sure to close it right away
118:29 - the action will equal
118:32 - index.php
118:35 - the method will be post
118:40 - let's create a label
118:47 - enter a country
118:51 - then we'll need a text box
118:53 - input type equals text
118:57 - the name will be country
119:03 - then a button input type
119:07 - equals submit
119:12 - here we are
119:15 - within our PHP script we have our
119:17 - associative array
119:18 - we'll need to access whatever's within
119:20 - this text box
119:22 - I'll store that within a new variable
119:24 - named Capital singular Capital equals
119:28 - dollar sign underscore post
119:33 - the value we are trying to access is the
119:36 - name country
119:39 - let's see what we have so far just for
119:41 - testing I'm going to Echo our capital
119:46 - if I type in USA then click submit this
119:48 - should return USA
119:51 - to get the value associated with this
119:53 - key USA
119:55 - I will take our associative array
119:58 - capitals
119:59 - at index
120:01 - of a country so in this example it's USA
120:04 - right I can copy this post variable
120:07 - delete this line within the set of
120:10 - quotes I will place the post variable
120:13 - then get rid of the quotes
120:17 - I will reassign Capital to equal
120:20 - whatever value we receive
120:23 - so I will type in this time
120:26 - Japan
120:27 - then this returns
120:30 - Kyoto
120:31 - we could even put this variable within a
120:33 - sentence
120:35 - the capital is
120:38 - our Capital variable
120:43 - if we type India then click submit the
120:46 - capital is New Delhi all right everybody
120:48 - so that's an associative array it's an
120:51 - array made of key value pairs you could
120:53 - create an associative array of countries
120:56 - and capitals ID numbers and usernames or
121:00 - items and a price those are a few
121:02 - examples and well everybody those are
121:05 - associative arrays in PHP
121:09 - hello again everybody today I need to
121:12 - explain two useful PHP functions the
121:15 - first is the is set function the other
121:18 - is the empty function these are two
121:21 - useful functions to determine if HTML
121:23 - elements are filled in or otherwise
121:26 - interacted with the isset function
121:28 - returns true if a variable is declared
121:31 - and not null empty returns true if a
121:35 - variable is not declared false null or
121:38 - is an empty string here's an example
121:40 - let's create a username variable
121:43 - username equals make up some username
121:49 - I am going to Echo then use the is set
121:53 - function
121:55 - Place some value or variable within the
121:57 - parentheses of this function
121:59 - when I run this program
122:01 - we output 1. in PHP one means true if
122:06 - user name was null
122:10 - is set returns false we don't display
122:13 - anything
122:14 - let's go over a few different values
122:15 - using an if statement
122:19 - if
122:20 - is set add a set of parentheses
122:26 - if the is set function returns true
122:29 - let's Echo
122:31 - this variable is set
122:36 - else let's Echo
122:40 - this variable is not set
122:45 - under which circumstances does the is
122:48 - set function return true that function
122:50 - returns true if a variable is declared
122:53 - and not null what if we don't have a
122:55 - variable
122:58 - the is set to function returns false
123:00 - that means we execute this else
123:02 - statement this variable is not set what
123:05 - if we declare a variable and it's null
123:09 - well the variable is not set either what
123:12 - if this value was true
123:14 - this variable is set how about false
123:18 - the variable is set
123:21 - an empty string
123:23 - the variable is set
123:25 - type in a username
123:27 - the variable is also set those are the
123:30 - circumstances in which the is set
123:32 - function will return either true or
123:34 - false now let's use the empty function
123:37 - this function will return true if a
123:40 - variable is not declared false null or
123:44 - an empty string
123:46 - let's change is set to the empty
123:49 - function we will examine our username
123:51 - variable if this variable is empty let's
123:55 - Echo this variable is empty
123:59 - else this variable is not empty
124:04 - if we don't have a variable I'll get rid
124:06 - of our username
124:08 - this variable is empty
124:11 - if username is null
124:16 - the variable is empty still
124:19 - true
124:21 - the variable is not empty
124:24 - false
124:25 - the variable is empty
124:28 - an empty string
124:30 - the variable is still empty type in a
124:33 - username
124:35 - the variable is not empty
124:37 - now what we're going to do is create an
124:39 - HTML login form we'll need a username a
124:42 - password and a login button we can use a
124:45 - combination of the is set and empty
124:47 - functions to determine if our login
124:48 - button is interacted with or our
124:51 - username and password fields are filled
124:52 - in so let's create an HTML document
124:56 - within the body of my document I will
124:58 - create a form
125:00 - then close it right away
125:04 - in the opening form tag we will set the
125:07 - action attribute to equal our PHP
125:10 - document
125:11 - the method let's use post
125:16 - we will need two labels one for username
125:19 - the other for password
125:24 - username
125:27 - let's copy this label paste it change
125:29 - username to password
125:34 - I'll add a text box
125:36 - [Music]
125:42 - the name attribute will be set to
125:45 - username
125:47 - I'll add a break line copy this text box
125:50 - paste it underneath password change text
125:53 - to password
125:56 - let's set the name attribute to be
125:57 - password
125:59 - then we need a submit button
126:02 - input type equals submit
126:06 - let's set the name equal to be let's set
126:09 - the name attribute to be a login then I
126:11 - will set the value the text on the
126:14 - button to be log in here's our sample
126:17 - login form
126:19 - using the post super Global variable
126:22 - is technically an associative array
126:24 - which we learned about in the last topic
126:26 - for demonstration purposes I am going to
126:29 - use a for each Loop and iterate over all
126:32 - of the elements within this array
126:35 - let's access our post super Global
126:37 - variable
126:39 - iterate over post as
126:42 - key
126:43 - Arrow value
126:47 - then during each iteration every key
126:52 - every value
126:54 - then add a break line
126:57 - I should probably add a break line after
126:58 - the submit button too
127:00 - you may need to reload your page
127:03 - then if I press log in
127:06 - we will spit out the associative array
127:08 - that's contained within our post super
127:10 - Global variable here are the keys and
127:13 - here are the values
127:15 - our username and password are both empty
127:18 - strings
127:19 - this thing
127:20 - our login key has this value whatever
127:24 - value we set within the HTML element if
127:27 - we hit the login button we can check to
127:29 - see if this key using the is set
127:32 - function we can determine if this value
127:35 - is set using the empty function we can
127:38 - determine if these values are empty
127:41 - which they currently are we can yell at
127:43 - the user like hey what the heck you
127:45 - didn't enter in your username or
127:46 - password I will reuse this for each Loop
127:49 - later let me just turn this into one
127:51 - giant comment
127:54 - now that we know how that works
127:56 - let's check to see if our button is
127:59 - clicked
128:00 - let's write an if statement
128:02 - if is set function
128:06 - access the post super Global variable
128:09 - we are looking for our login button
128:13 - whatever the name is set to
128:15 - for testing purposes let's Echo
128:19 - you tried to log in
128:24 - so if I save I need to reload the page
128:28 - if I press the login button
128:31 - this button is now set you tried to log
128:34 - in
128:35 - we no longer need this line for testing
128:38 - let's save after pressing the login
128:41 - button let's check if our username is
128:44 - filled in let's get the username
128:47 - username equals we are accessing the
128:50 - post super Global variable the key is
128:53 - our username
128:55 - whatever the name is
128:58 - then let's get our password to while
129:00 - we're at it
129:01 - variable password equals
129:04 - the key is password
129:08 - within our if statement we will write an
129:10 - inter if statement
129:13 - if empty function
129:16 - if our username is empty
129:20 - then let's Echo
129:24 - username is missing
129:28 - else we will display a welcome message
129:31 - Echo
129:35 - hello
129:37 - variable username
129:41 - okay let's reload
129:42 - [Music]
129:44 - I'm going to press log in without
129:46 - filling in a username username is
129:49 - missing
129:50 - but if I type in a username then log in
129:53 - we get our hello message hello bro code
129:57 - I'll add an else if statement
129:59 - then we'll check to see if our password
130:02 - is missing
130:03 - if empty function we are examining our
130:07 - password
130:08 - then we will Echo
130:12 - password is missing let's save reload
130:17 - type in a username don't type in a
130:20 - password Press login password is missing
130:23 - in order to Output this Hello message we
130:25 - need to both a username and a password
130:28 - type in a username
130:30 - type in a password
130:32 - Pizza one two three Press login
130:35 - and you get your welcome message I'm
130:38 - going to enclose the section of code
130:39 - within a comment block let's go back to
130:42 - our for each Loop there's something I
130:44 - want to explain
130:47 - so let's save
130:49 - reload
130:51 - make up a username
130:53 - type in a password
130:56 - when I press login
130:58 - you can see that our username and
130:59 - password fields are both filled in
131:01 - they're no longer empty this is our
131:03 - associative array contained within the
131:05 - post super Global variable
131:07 - using these if statements the first
131:09 - thing we were checking is if our login
131:12 - button is set which it is it contains a
131:15 - value
131:16 - then we were checking if our username
131:18 - and passwords were empty or not this
131:20 - time they were not empty that's what it
131:22 - looks like behind the scenes when you're
131:24 - accessing the post super Global variable
131:26 - it's made of key value Pairs and you can
131:28 - determine if a value is set or it's
131:31 - empty all right everybody so that is the
131:33 - is set and empty functions in PHP
131:38 - hey everybody in today's topic I'm going
131:40 - to show you how we can work with radio
131:42 - buttons in PHP let's get started
131:47 - to begin we'll need an HTML form I'm
131:50 - pretty sure you know how to create that
131:51 - already
131:56 - within our HTML form the action
131:58 - attribute will be set to our PHP file
132:00 - the method will be post to create a
132:03 - single radio button we can use a
132:05 - self-closing input tag
132:07 - set the type equal to B radio
132:12 - let's select a credit card I will set
132:14 - the first radio button to have a value
132:16 - of Visa
132:18 - here's our little radio button I'll add
132:20 - some text afterwards let's say Visa then
132:24 - I will add a line break
132:26 - okay let's copy these two lines of
132:29 - markup
132:30 - paste these twice
132:33 - then change the second radio button to
132:35 - be MasterCard then the third will be
132:37 - American Express
132:39 - so let's change these values
132:46 - here are three radio buttons but we have
132:49 - a problem we can select more than one
132:51 - radio button
132:52 - if we would like these within the same
132:54 - group we only ever should be able to
132:56 - select one at a time we need a name
132:59 - attribute
133:00 - name equals let's say credit card
133:05 - be sure to set this attribute for all of
133:07 - the three radio buttons they all need
133:09 - the same name
133:10 - there we can only select one now if
133:13 - these had a different name such as
133:15 - credit card 1 Credit Card two credit
133:16 - card three well they're technically all
133:19 - in different groups we need them all in
133:21 - the same group to select only one
133:24 - then lastly let's add a submit button
133:27 - input type equals submit
133:33 - the name may be confirmed it's a confirm
133:36 - button we're confirming some payment
133:38 - type
133:39 - for the value I will set that to be
133:42 - confirm as well
133:45 - now when I click on this button I would
133:47 - like to Output a message depending on
133:50 - which radio button is selected
133:52 - Let's test to see that everything's
133:54 - working fine though I will create a
133:56 - local variable named credit card I will
133:59 - set credit card equal to now to get one
134:02 - of these values we need to use the post
134:04 - variable whatever we set for the method
134:07 - access post
134:10 - the key we are looking for is credit
134:12 - card
134:13 - whatever the name attribute is set to
134:15 - the name of the group
134:17 - now when I run and reload this
134:20 - we have an undefined array key credit
134:22 - card which is to be expected
134:25 - we're running our PHP script but we have
134:28 - not yet set the credit card key
134:30 - let's enclose our code with an if
134:32 - statement we'll check to see if our
134:35 - confirm button is pressed is it set if
134:38 - it is then assign our variable
134:41 - if parentheses curly braces we will use
134:44 - the is set function which we learned
134:47 - about in the last topic we would like to
134:49 - check to see if our confirm button is
134:52 - set
134:53 - let's access post
134:57 - the key we are looking for is confirm
135:00 - whatever the name is
135:02 - if we press the button then assign our
135:05 - variable of credit card
135:09 - then let's Echo our credit card for
135:11 - testing purposes
135:13 - Echo credit card let's see what happens
135:17 - I'm going to press the confirm button
135:19 - then we get that warning which is a step
135:22 - in the right direction
135:23 - if I make a selection then press confirm
135:27 - we will Echo whatever value is stored
135:30 - within our credit card variable it's
135:32 - going to be one of these three values
135:33 - either Visa Mastercard or American
135:36 - Express
135:38 - before assigning the variable
135:40 - I would like this warning to not display
135:42 - after pressing the confirm button
135:44 - instead let's display a message please
135:48 - select a credit card or something
135:50 - let's create a nested if statement
135:55 - we will use the is set function again
135:58 - this time let's check to see if our
136:01 - credit card is set
136:05 - if our credit card is set then get the
136:08 - value and store it within a variable
136:13 - then for testing let's Echo that credit
136:15 - card
136:19 - if our credit card is not set we can
136:22 - execute an else statement
136:24 - else
136:25 - let's Echo
136:28 - please make a selection
136:33 - if I don't make a selection then press
136:35 - confirm we will Echo this message please
136:39 - make a selection in order to continue we
136:42 - need to make a selection let's select
136:43 - Visa
136:45 - we will output Visa MasterCard then
136:48 - American Express
136:50 - currently we have a variable credit card
136:52 - that has one of these three values
136:55 - one thing you could do with this
136:56 - variable is check to see if it's equal
136:58 - to a certain value
137:00 - I'm going to change my program around a
137:02 - little bit if we press the confirm
137:04 - button and one of these radio buttons is
137:06 - selected then assign our variable
137:08 - let's get rid of this Echo
137:10 - I'll add some if and else if statements
137:15 - this is just for demonstration purposes
137:18 - if our credit card
137:20 - is equal to Visa
137:23 - then let's Echo
137:27 - you selected
137:31 - Visa
137:34 - let's add an else if statement
137:38 - else if credit card is equal to
137:40 - MasterCard
137:44 - you selected MasterCard
137:47 - else if
137:49 - credit card is equal to American Express
137:56 - you selected
137:58 - American Express
138:02 - then else
138:04 - else if credit card doesn't equal one of
138:06 - these three matches
138:08 - then let's Echo
138:11 - please make a selection
138:16 - all right let's see what happens
138:17 - currently
138:19 - if I make a selection such as Visa we
138:23 - will Echo you selected Visa
138:26 - you selected MasterCard
138:27 - you selected American Express
138:30 - but currently if I press the confirm
138:32 - button without making a selection
138:34 - we have some warnings that our credit
138:37 - card variable is undefined
138:39 - but we still execute the else Clause as
138:42 - you can see here
138:43 - one change I'll make is that let's
138:46 - declare our variable credit card
138:48 - but we won't assign it a value
138:51 - credit card equals null then we won't
138:54 - receive that warning that credit card is
138:56 - undefined
138:57 - we have declared it I'll press confirm
139:00 - please make a selection I can select one
139:03 - of these credit cards and we will
139:04 - display a message
139:06 - in this circumstance I would probably
139:09 - use a switch where comparing some value
139:11 - against many matching cases I think a
139:14 - switch would be more efficient
139:16 - so let's create a switch for practice
139:20 - within our switch we are examining our
139:22 - credit card
139:24 - we will examine our credit card against
139:26 - matching cases
139:29 - Visa
139:31 - if our credit card is equal to Visa then
139:34 - let's Echo
139:36 - you selected
139:39 - Visa
139:42 - then add a break statement to break out
139:44 - of the switch
139:45 - let's do this for MasterCard add a case
139:47 - for MasterCard
139:51 - MasterCard
139:52 - you selected MasterCard
139:55 - then American Express
140:00 - American
140:02 - Express
140:03 - you selected American Express
140:06 - then a default case if there are no
140:09 - matching cases
140:11 - let's Echo
140:14 - please make a
140:17 - selection
140:21 - so if I press confirm we will Echo
140:23 - please make a selection if I select Visa
140:25 - you selected Visa you selected
140:28 - MasterCard you selected American Express
140:31 - all right everybody so those are a few
140:33 - different ways in which you can work
140:35 - with radio buttons in PHP to get the
140:37 - value of a given radio button group you
140:41 - can use the post variable then access
140:43 - that key whatever the name is
140:46 - then you can assign the value to a local
140:48 - variable to work with and you can do
140:50 - whatever you want with it in this case I
140:52 - just used a switch
140:54 - and well everybody those are a few
140:56 - different ways in which you can work
140:57 - with radio buttons in PHP
141:02 - well hello again everybody in today's
141:04 - video I'm going to show you how we can
141:05 - work with check boxes in PHP we need a
141:09 - form element I have the action attribute
141:11 - set to my PHP file index.php for the
141:15 - method I'm using post
141:17 - to create a checkbox we can use a
141:19 - self-closing input tag the type will be
141:23 - check box
141:25 - and here it is
141:27 - if we were to use post we will get a key
141:30 - value pair from this checkbox element
141:32 - the key will be equal to our name
141:35 - attribute
141:36 - let's say that the name is pizza
141:39 - and for the value
141:41 - let's say pizza I'm going to capitalize
141:44 - the value just so that it's easier to
141:46 - differentiate between the key and the
141:49 - value the name is the key the value as
141:52 - well the value
141:54 - then let's add some text
141:56 - Pizza
141:57 - brake element
141:59 - not sure why Google wants to translate
142:01 - this but okay
142:03 - let's copy these two lines of markup
142:05 - then paste them three additional times
142:09 - the second button will be hamburger the
142:11 - third will be hot dog the fourth will be
142:13 - taco
142:14 - let's change the names the values and
142:17 - the text
142:19 - the second checkbox is hamburger
142:26 - then hot dog
142:34 - then Taco
142:41 - here are the four check boxes then we'll
142:43 - need a submit button
142:45 - input type equals submit
142:50 - for the name that will be submit as well
142:55 - now within our PHP script when I press
142:58 - this button I would like to execute some
143:00 - code after we press the submit button I
143:03 - will enclose all of my code with an if
143:05 - statement we will check to see if our
143:08 - submit button is set we'll use the is
143:10 - set function
143:12 - we'll use the post variable
143:15 - we are accessing submit if we click the
143:19 - submit button then do stuff
143:21 - to check to see if a checkbox is set we
143:24 - can use the is set function again
143:27 - we'll use an if statement if
143:29 - is set
143:31 - now we are examining
143:33 - the key of pizza
143:37 - whatever the name attribute is set to
143:41 - if Pizza is set if it's checked what do
143:44 - we want to do
143:45 - let's simply Echo
143:48 - you like pizza
143:54 - when I press Pizza click submit
143:57 - we will display you like pizza
144:00 - let's do this with the other check boxes
144:02 - let's copy this if statement paste it
144:04 - three times
144:05 - then we'll check the other Keys we have
144:07 - hamburger
144:09 - you like hamburgers
144:12 - hot dog
144:14 - you like hot dogs
144:16 - Taco you like tacos
144:20 - oh then let me add a break after each of
144:22 - these sentences
144:24 - because I forgot to do that
144:27 - now I can press any combination of these
144:30 - check boxes
144:32 - if one of these check boxes is checked
144:34 - we'll execute one of these if statements
144:36 - you like pizza you like hot dogs you
144:38 - like tacos
144:40 - alternatively we can determine to see if
144:42 - a check box is empty using the empty
144:44 - function
144:45 - let's copy our if statements
144:48 - change is set to empty
144:52 - empty empty empty
144:55 - if Pizza is unchecked if it's empty
144:58 - we'll Echo you don't like pizza
145:03 - do this for hamburgers you don't like
145:05 - hamburgers hot dogs you don't like hot
145:08 - dogs and Tacos you don't like tacos
145:14 - if I were to click pizza and Tacos again
145:17 - then submit
145:19 - you like pizza you like tacos you don't
145:21 - like hamburgers you don't like hot dogs
145:24 - that's one way in which you can check to
145:26 - see if a check box is set you can use
145:28 - the is set function to determine if it's
145:31 - set or empty to determine if it's empty
145:34 - you can place all of these check boxes
145:37 - in an array but they would all need the
145:39 - same name attribute let's rename the
145:42 - name attribute to foods for all of these
145:44 - check boxes
145:46 - then add a set of straight brackets
145:49 - after each
145:52 - these will all be placed within an array
145:58 - let's get rid of our if statements
146:02 - after pressing the submit button let's
146:05 - create a Foods array
146:07 - then we will get via post
146:12 - the key name which is Foods
146:16 - Foods is technically going to be an
146:18 - array to prove it let's Echo Foods then
146:21 - see what happens
146:24 - Pizza hamburger hot dog taco
146:27 - warning a right to string conversion
146:29 - so Foods is an array
146:31 - we can access elements of an array with
146:34 - an index number
146:36 - Foods at index zero
146:38 - that would be Pizza
146:39 - one is hamburger
146:42 - two is hot dog
146:45 - three is Taco four should be out of
146:47 - bounds
146:48 - undefined array key for
146:51 - you can Loop through all of the elements
146:52 - of an array using a for each Loop
146:55 - for each
146:58 - list your array Foods as food
147:03 - then let's Echo each food
147:07 - then I will add a break
147:12 - Pizza hamburger hot dog taco
147:15 - all right everybody so that's how to
147:16 - work with check boxes in PHP the type
147:19 - set to checkbox the name attribute will
147:22 - be the key
147:23 - and the value as well the value
147:26 - you do have the option of placing all of
147:28 - these check boxes in the same group they
147:31 - would need the same name then add a set
147:33 - of square brackets after and well
147:35 - everybody that's how to work with check
147:36 - boxes and PHP
147:40 - hey everybody in today's video I'm going
147:42 - to explain how we can create functions
147:44 - in PHP with a function you write some
147:47 - code once then reuse it whenever you
147:50 - need it it's reusable code if you ever
147:52 - need to call a written function you type
147:54 - the function name followed by a set of
147:57 - parentheses for example we could have an
147:59 - add function we have a function name
148:01 - then two parentheses I like to think of
148:03 - the parentheses as two telephones
148:05 - talking to each other in order to invoke
148:07 - a function you call it like with the
148:09 - telephone some examples of functions
148:11 - could be add subtract multiply divide
148:14 - you can create all sorts of functions to
148:16 - do various things here's how to create a
148:18 - function
148:19 - we'll create a function to sing Happy
148:21 - Birthday to create a function type
148:23 - function
148:24 - then we're declaring a function name
148:26 - what would you like to name this
148:28 - function I will name it the happy
148:30 - birthday function add a set of
148:33 - parentheses a set of curly braces
148:35 - any code you would like to reuse you
148:37 - place within the set of curly braces
148:39 - I'll create some Happy Birthday song
148:54 - here's my function we write this code
148:56 - once then reuse it whenever we need it
148:58 - if I would like to execute the code
149:01 - within the function I would type the
149:03 - function name in this case it's happy
149:04 - birthday
149:05 - then add a set of parentheses like it's
149:08 - a pair of telephones talking to each
149:09 - other that's how you call a function
149:12 - and here's my birthday message
149:14 - um I forgot some break lines let me put
149:16 - those in real quick
149:19 - that's much better happy birthday dear
149:21 - you happy birthday to you happy birthday
149:24 - dear you you are X years old I know it's
149:27 - kind of a lame song I just made it up on
149:29 - the spot I can call this function as
149:31 - many times as I need it if I would like
149:33 - to sing Happy Birthday three times I
149:35 - would just invoke this function three
149:37 - times
149:39 - there we have sung three verses of happy
149:41 - birthday I'm gonna add another break
149:43 - statement though there so a function is
149:46 - just a section of reusable code you
149:48 - write it once reuse it whenever you need
149:50 - it with coding we try not to repeat code
149:53 - if we don't have to
149:54 - with a function you can send your
149:56 - function some data some values or
149:58 - variable I'm going to send my happy
150:01 - birthday function a string a first name
150:04 - let's say SpongeBob
150:06 - if you send your function some data a
150:09 - value or a variable this would be known
150:11 - as an argument we need a matching
150:14 - parameter a parameter is kind of like a
150:17 - temporary variable
150:19 - let's create a parameter named
150:22 - first name
150:24 - this parameter only exists within the
150:27 - scope of this function when you escape
150:29 - the function this variable no longer
150:31 - exists
150:33 - let's replace U with a placeholder then
150:35 - we will add our parameter our variable
150:38 - first name happy birthday dear first
150:40 - name
150:42 - let's do that here as well
150:46 - then let's try this again
150:48 - happy birthday dear SpongeBob happy
150:50 - birthday to you happy birthday dear
150:52 - SpongeBob you are X years old I could
150:55 - call this function again and pass on a
150:57 - different parameter like Patrick
151:00 - we have a verse of happy birthday but we
151:02 - have sent a different argument Patrick
151:04 - instead of SpongeBob
151:07 - let's do it one more time we will invoke
151:09 - happy birthday then pass in a first name
151:12 - Squidward
151:13 - happy birthday dear Squidward you can
151:16 - pass in more than one argument to a
151:18 - function
151:19 - let's send an age so separate each
151:22 - argument with a comma I don't know how
151:24 - old SpongeBob is according to the lore
151:26 - let's say that he's 30.
151:28 - let's do that with Patrick as well
151:30 - let's say he's 35 then Squidward he
151:34 - seems older maybe he'll be 45.
151:37 - we have two arguments when we invoke
151:40 - this function we should have two
151:41 - parameters
151:43 - for the second parameter let's store
151:45 - these values in a variable named age
151:47 - then we can use this variable for
151:49 - something let's replace x with variable
151:53 - age
151:56 - happy birthday dear SpongeBob you are 30
151:58 - years old Patrick is 35 years old and
152:01 - Squidward is 45 years old
152:04 - that's how to invoke a function and pass
152:06 - arguments to it but you would need a
152:08 - matching set of parameters
152:10 - now with the function you can return
152:12 - something you'll typically see a return
152:14 - statement at the end of a function let's
152:16 - go over a different example
152:18 - we will create a function to check to
152:20 - see if a number is even or odd
152:23 - function let's name this function is
152:27 - even
152:31 - we will need one parameter
152:33 - a number
152:36 - to invoke this function you type the
152:38 - function name
152:39 - then add a set of parentheses
152:41 - if there's a parameter you need to pass
152:43 - in a value or a variable
152:45 - let's see if the number 11 is even
152:49 - now within our function we need to write
152:51 - some code
152:52 - let's say we have a variable result
152:56 - equals
152:57 - that to see if a number is even or odd
152:59 - you take
153:01 - that number or that variable
153:03 - modulus 2.
153:05 - modulus gives you the remainder of any
153:07 - Division if number divides by 2 evenly
153:10 - the results should be zero if it's odd
153:13 - the result is one
153:15 - then we'll use a return statement and
153:18 - return some value what would we like to
153:20 - return let's return the result
153:23 - now if I Echo
153:25 - after executing this function whatever
153:28 - is returned kinda takes its place
153:31 - then I'm just going to Echo it
153:33 - is 11 even or is it odd that returns one
153:37 - is 10 even or odd that returns zero it's
153:41 - even
153:42 - you could shorten this too let's get rid
153:45 - of our result variable
153:46 - take this section of code
153:49 - and we are returning
153:52 - whatever the outcome is
153:54 - that works too let's write something a
153:57 - little more complicated
153:58 - let's create a function to find the
154:00 - hypotenuse of a right triangle
154:03 - so let's define our function function
154:05 - let's name this function hypotenuse
154:11 - we'll need sides A and B as arguments so
154:15 - set up these matching parameters
154:17 - to find side C we need to follow this
154:21 - equation
154:22 - square root function
154:25 - variable a
154:27 - to the power of 2
154:29 - plus variable B to the power of two
154:34 - then we will return whatever variable C
154:37 - is
154:39 - I'm going to invoke this function but we
154:41 - need two arguments side a and side B
154:45 - let's say side a is three side B is 4.
154:49 - now this doesn't print anything
154:51 - C should technically be five so after
154:54 - executing this function after it's
154:56 - complete just imagine that we're
154:58 - returning five
155:00 - so let's Echo whatever the result is or
155:03 - we could store it within a variable
155:05 - so now the result is five let's do two
155:08 - different numbers side a will be four
155:10 - side B will be five
155:12 - side C is six point four and some change
155:17 - one last thing I should mention with
155:19 - your parameter names you can declare a
155:21 - type that needs to be passed in for
155:24 - example if I was to send in like a
155:26 - string like find the hypotenuse of pizza
155:30 - and taco well that really doesn't make
155:33 - sense right fatal error uncut type error
155:36 - unsupported operand type string you can
155:39 - list a data type before the variable
155:40 - name to force the arguments to be of
155:43 - that data type I could say these need to
155:45 - be integers I would type int or float
155:49 - for floating Point numbers
155:51 - if I try this again we receive a
155:54 - different type of error uncut type error
155:56 - now I haven't discussed error handling
155:58 - yet but this will come in handy when we
156:00 - get to that point just be aware of that
156:02 - with parameters you can list a data type
156:04 - beforehand then you need to pass in an
156:07 - argument of that exact data type all
156:09 - right everybody so that's a function
156:10 - it's a section of reusable code whenever
156:13 - you would like to use this function you
156:15 - type the function name add a set of
156:16 - parentheses if there are parameter setup
156:19 - you need to pass in a matching set of
156:21 - arguments then you can return something
156:23 - and well everybody those are functions
156:25 - in PHP
156:29 - hey welcome back everybody in today's
156:31 - topic I'm going to explain a few useful
156:33 - string functions you might be interested
156:35 - in let's begin with creating a username
156:39 - assign this your first and last name
156:43 - the first function I'll discuss is the
156:45 - string to lower function
156:47 - I'm going to reassign our username and
156:50 - use the string to lower function then we
156:53 - will pass in our username as an argument
156:56 - then let's Echo our username after we
156:59 - make it lowercase Echo username there my
157:03 - username is all lowercase
157:04 - alternatively there's string to Upper
157:09 - string two
157:11 - upper
157:13 - my name is all uppercase
157:15 - then we have trim
157:17 - will remove any white spaces before or
157:20 - after your string
157:22 - there there's the string pad function we
157:26 - can pad a string up to a certain amount
157:29 - of characters with a character we
157:30 - specify let's say I would like to pad my
157:33 - username to a Max size of 20 characters
157:36 - with zeros
157:38 - here's my new username
157:41 - or maybe we could use forward slashes or
157:43 - something
157:45 - then we have string replace
157:48 - string
157:49 - replace
157:51 - within our string we can replace one
157:54 - character with another you know what
157:56 - let's create a new variable how about a
157:58 - phone number
157:59 - let's say phone phone equals make up
158:02 - some phone number 123-456-7890
158:07 - here are the order of arguments what
158:10 - would we like to replace let's replace
158:12 - any dashes that'll be the first argument
158:15 - the second argument is what we're
158:17 - replacing the dashes with
158:19 - let's use an empty string
158:21 - then third is our string or variable
158:24 - containing a string
158:26 - we are reassigning our phone number
158:30 - here's our new phone number with all the
158:33 - dashes removed or we could replace them
158:35 - with something else like a forward slash
158:38 - that is the string replace function
158:41 - then we have string reverse s t r
158:46 - e v let's reverse our username
158:50 - then Echo our new username
158:52 - there it is it's all backwards
158:56 - then we have String Shuffle
158:59 - we can shuffle a string
159:04 - compare s-t-r-cmp
159:09 - we can compare a string or a variable
159:11 - against another string or variable
159:17 - I'll assign this to a new variable let's
159:19 - say equals
159:21 - so if these two strings are the same
159:24 - then this function will return zero if
159:27 - they're different
159:28 - we'll either return one
159:30 - or negative one
159:32 - think of it as if these two strings are
159:35 - the same string compare returns zero it
159:38 - returns false so that's how to see if
159:40 - two strings are equal
159:41 - then we have the string length function
159:43 - string length
159:46 - let's create a new variable count
159:49 - how many characters are within our
159:51 - string in my string we have eight
159:54 - characters
159:55 - one two three four five six seven eight
159:57 - let's do that with our phone number
160:00 - our phone number has 12 characters that
160:03 - is the string length function
160:06 - we can use the string position function
160:08 - to find the position of a character with
160:12 - my username let's find the first
160:14 - position of a space
160:16 - the character or string you're looking
160:18 - for is the second argument
160:20 - I'll create a new variable index
160:24 - so the index of the first space within
160:27 - my username is three zero one two three
160:31 - let's do that with our phone number
160:35 - then let's find the position of the
160:37 - first Dash which would be three as well
160:41 - zero one two three
160:44 - then we have the substring function
160:46 - sub string
160:49 - we can create a new string from a
160:52 - portion of another string with my
160:54 - username I'll take the first three
160:57 - characters and create a new string I'll
160:59 - create a variable named first name
161:04 - here are the order of arguments take
161:06 - your original string let's say our
161:08 - username
161:11 - the second argument is the starting
161:13 - index I would like to start at the
161:15 - beginning the index will be zero then an
161:18 - ending index
161:19 - I would like to end at this space in my
161:21 - name but if you're using your own first
161:23 - and last name you're going to have a
161:25 - different position
161:26 - so for me I'd like to end at the third
161:28 - index
161:30 - then I will echo my first name
161:33 - we have created a new string from an
161:36 - original string but we have to specify
161:38 - the beginning and ending index
161:40 - this time let's take the last four
161:42 - characters I'll create a new variable
161:45 - last name
161:47 - we'll use the substring function again
161:52 - username now you can list a beginning
161:54 - index and then don't specify an ending
161:56 - index then you'll create a new string
161:58 - all the way up to the end if I set my
162:00 - index to B4
162:02 - we'll create a new substring with
162:04 - everything after the index of four no
162:07 - matter how long the string is
162:09 - so let's Echo our last name
162:12 - and there's my last name in my example
162:15 - so to get everything after the beginning
162:16 - index just don't list a third argument
162:18 - okay now we have the implode and explode
162:21 - functions with your username add your
162:24 - middle name or maiden name or whatever
162:26 - or a nickname doesn't matter just
162:28 - something
162:29 - we can use the explode function to
162:32 - assign each of these portions of our
162:33 - name into an array let's create an array
162:36 - named full name we will use the explode
162:40 - function
162:41 - we are exploding our username
162:43 - however at which character or characters
162:45 - do we separate each element in our array
162:48 - we'll do so by any spaces in this
162:50 - example so that will be the first
162:51 - argument
162:54 - explode our username let's see if this
162:57 - is actually an array let's Echo our full
162:59 - name
163:00 - warning array to string conversion
163:03 - so that's a good sign that means that
163:05 - our full name is an array you know what
163:07 - let's use a for each Loop to demonstrate
163:10 - for each
163:12 - take our array full name
163:15 - as name
163:17 - then I will Echo each name
163:24 - there here's my array and I've taken
163:27 - each portion of our name and placed them
163:30 - as elements within a new array
163:32 - now we have implode which takes an array
163:34 - and creates a string out of them a
163:36 - single string let's say our username is
163:39 - an array so type your full name
163:47 - then we will use the implode function
163:52 - username equals implode
163:55 - what are we imploding let's implode our
163:58 - username
164:02 - then you can add characters between each
164:03 - element I will add an empty space
164:05 - between each element when we implode it
164:08 - then let's Echo our username
164:11 - Echo username
164:13 - my array is all one long string now or
164:17 - maybe I can separate each element with a
164:19 - dash
164:20 - it's still one string alright everybody
164:22 - so those are a few useful string Methods
164:25 - I think you might be interested in in
164:27 - PHP
164:30 - hey everybody what's going on in today's
164:32 - video I'm going to show you how we can
164:33 - both sanitize and validate user input in
164:36 - PHP we're going to need an HTML form to
164:39 - work with I'll go ahead and create that
164:55 - here's my form we have a text box and a
164:58 - button when I click on the button we'll
165:00 - execute some code I will enclose all of
165:02 - my code with an if statement we will
165:05 - check to see if our login button is set
165:07 - if it's interacted with if set we're
165:10 - accessing post
165:13 - if our login button is interacted with
165:16 - let's get the username from the text box
165:19 - and store that within a local variable
165:28 - then let's Echo
165:34 - hello
165:37 - username
165:42 - so I can type in a username
165:44 - Press login and we are pretending to log
165:46 - in if you don't sanitize or validate
165:49 - your user input somebody could write
165:51 - some malicious code like a cross-site
165:53 - script or SQL injection such as this
165:57 - foreign
166:01 - what I did is just write some malicious
166:03 - JavaScript code to display you have a
166:05 - virus it would be best to prevent code
166:07 - like that from running one way in which
166:09 - we can do that is to add a filter to
166:11 - sanitize any user input instead of
166:14 - assigning our username directly from our
166:16 - post variable
166:17 - we are going to use a function the
166:20 - filter input function and there are
166:23 - three arguments
166:24 - the first argument is input post
166:28 - because we're using the post method if
166:31 - we were using get then this would be
166:33 - input get
166:35 - the second argument is the name of the
166:37 - input which in this case would be
166:39 - username
166:42 - then third is the type of filter I'll
166:44 - put this on a new line because I'm
166:46 - running out of room
166:48 - I would like to remove any special
166:50 - characters used in executing code so
166:53 - there is a filter for that it's filter
166:57 - sanitize
166:59 - special
167:02 - chars
167:04 - I'm going to take this JavaScript code
167:08 - paste it into my username and we'll see
167:11 - if we can execute this code
167:13 - which we cannot instead of executing the
167:16 - code we are using it as output
167:18 - and if I were to right click then go to
167:20 - view page source
167:24 - any special characters are replaced here
167:27 - is that JavaScript code I entered it's
167:29 - not executing because we filtered these
167:31 - special characters if you ever need to
167:34 - filter all characters besides numbers
167:36 - there is filter sanitize number int
167:39 - that's another filter let's create a new
167:41 - text box for an age
167:45 - age the name will be age
167:50 - so again let's create a new variable
167:52 - named age equals filter
167:55 - input
167:58 - input post because we're using post
168:01 - the name of the input is age
168:06 - then the type of filter
168:13 - sanitize number
168:16 - int
168:18 - let's create a new message you are
168:21 - variable age
168:24 - years old
168:27 - if I were to type in
168:30 - Press login we will filter all
168:33 - characters besides any numbers that is
168:35 - the filter sanitize number end filter
168:38 - now maybe we need an email let's create
168:40 - a new text box for an email
168:44 - the name will be email
168:51 - email equals again filter
168:55 - input the first argument is input post
168:58 - or input get if you're using get
169:01 - the name of the attribute is email
169:05 - the third argument is the type of filter
169:10 - sanitize
169:12 - email
169:14 - your email is
169:18 - variable email
169:21 - I'll type in an email
169:24 - then add some illegal characters for an
169:26 - email such as angle brackets and
169:29 - parentheses
169:31 - and this should filter all of the
169:33 - illegal characters which it does here's
169:36 - my email without those illegal
169:37 - characters so those are a few ways in
169:39 - which you can sanitize input
169:41 - now let's validate input using a
169:44 - validate filter if our input doesn't
169:46 - pass a validation test it returns an
169:48 - empty string sanitization will strip
169:50 - certain characters of user input
169:51 - validation if it doesn't pass it just
169:54 - returns an empty string so now we have
169:56 - variable age age equals we'll use filter
169:59 - input again
170:02 - input post because we're using post
170:05 - the name of the input we're filtering is
170:07 - age then the type of filter
170:12 - validate
170:15 - int
170:16 - if our user input isn't a number we will
170:19 - assign an empty string to age it doesn't
170:22 - pass the validation test so let's check
170:24 - that let's use an if statement
170:26 - we can use the empty function
170:29 - if our age is empty that means a user
170:32 - didn't type in a valid number
170:35 - let's Echo
170:37 - that number wasn't valid
170:41 - else if our age is not empty that means
170:44 - they typed in a valid number
170:49 - you are age years old
170:54 - let's run this again uh I'll type in a
170:57 - bunch of characters
171:00 - I'll try and log in uh that number
171:02 - wasn't valid I'm not surprised
171:05 - so now let's type in a valid number
171:08 - and that seems to work using this filter
171:11 - we can check to see if some input is
171:14 - only numbers the next filter is to
171:16 - validate an email to see if it's in a
171:18 - correct format let's copy these two
171:20 - lines of code
171:22 - paste them
171:25 - variable email
171:27 - input post
171:29 - we are getting our email user input
171:32 - filter validate email
171:35 - if our email is empty that email wasn't
171:40 - valid else
171:43 - your email is our variable email
171:50 - okay I'll make up some email
171:54 - Press login that seems to work
171:58 - I'll type in that same email but I'll
172:00 - add some illegal characters like
172:03 - angle brackets and parentheses
172:06 - that email wasn't valid
172:09 - all right everybody so those are a few
172:11 - filters you may be interested in when
172:13 - accepting user input it is a good idea
172:15 - to both sanitize and filter user input
172:18 - just in case a user types in some
172:20 - malicious script you don't want any of
172:21 - that sanitize and validate your user
172:24 - input whenever possible and well
172:26 - everybody that's how to both sanitize
172:27 - and validate user input in PHP
172:33 - well well well look who it is in today's
172:35 - topic I'm going to explain the include
172:37 - function the include function copies the
172:40 - content of a file and includes it in
172:43 - your PHP file a few of the benefits is
172:46 - that sections of your website can become
172:48 - reusable any changes only need to be
172:51 - made in one place for example we could
172:53 - create an HTML document for a header and
172:56 - a footer within each page of our website
172:58 - we can include that same header and
173:00 - footer that header and footer file
173:02 - become reusable here's an example we
173:05 - will create a few files our index file
173:07 - will be our home page let's create one
173:10 - for an about us page about dot PHP
173:14 - another four locations to list our
173:17 - locations for our imaginary business
173:20 - then we'll create an HTML file named
173:23 - header header.html
173:26 - then another named footer footer.html
173:30 - here are the files we'll be working with
173:32 - let's fill in our header file we'll
173:34 - create a standard header for a website
173:36 - for our header let's create a pair of
173:38 - header tags
173:41 - I'll add a title
173:44 - the title will be within a pair of H2
173:46 - header tags
173:47 - this is my website
173:52 - then we'll create a few links for a
173:53 - navigation bar
173:55 - let's set the first link to have an href
173:58 - attribute equal to our home page which
174:02 - we named index.php
174:04 - be sure to close it
174:06 - the text will be home
174:09 - let's copy this link
174:11 - paste it two times the second link will
174:13 - be for our about page
174:16 - change the text to about
174:19 - then locations locations.php
174:23 - then change the text to locations
174:27 - I'll add a horizontal rule as well
174:30 - that is good enough for our header
174:33 - let's head back to our index file
174:36 - to use the include function within your
174:38 - PHP script let me write that PHP
174:44 - all we have to do is type include
174:46 - it's a function then list the file name
174:49 - or the file path
174:51 - these two files are in the same website
174:53 - folder I only need to include the file
174:56 - name
174:57 - header dot HTML then when I save and
175:01 - reload everything we have our header
175:04 - then I could add some HTML afterwards
175:08 - so let's generate some html text within
175:11 - the body of my HTML I'll add a few
175:13 - sentences
175:14 - this is the home page
175:18 - I'll add a break
175:22 - stuff
175:23 - about your home page
175:26 - and go here
175:31 - then let's add a footer let's go to our
175:34 - footer HTML file I will use a pair of
175:37 - footer tags
175:39 - to create a footer
175:42 - I'll add a horizontal rule
175:46 - let's say author colon space type in
175:49 - your first and last name
175:52 - then I'll add a link for an email
175:55 - at href equals
175:59 - mail to come up with some email
176:06 - I'll add some text
176:12 - then close the anchor tag
176:15 - that's good enough for our footer our
176:17 - footer and our header are now complete
176:19 - let me close out of those
176:21 - we have our index page our about page
176:24 - and our locations page
176:26 - after we display everything that we
176:28 - would like for the home page let's
176:30 - display the footer the footer belongs at
176:32 - the bottom of our web page
176:34 - so let's copy our PHP script after our
176:37 - HTML markup let's include our footer
176:40 - footer.html
176:43 - there it is
176:44 - our header and our footer are reusable
176:46 - we only need to write these once and we
176:49 - can reuse them for every web page with
176:52 - our about page let's generate some HTML
176:56 - I'm going to copy these two lines of our
176:59 - body
177:01 - this is the about page
177:04 - stuff about your about page can go here
177:08 - I'm going to click on the link for our
177:10 - about page
177:11 - but we don't have that header or footer
177:14 - so let's add a PHP script before and
177:16 - after to include those
177:18 - PHP
177:21 - we will use the include function
177:25 - we will include list the file name and
177:28 - or the file path
177:30 - header.html and there is our header do
177:33 - the same thing with the footer
177:35 - PHP
177:38 - we will use the include function we are
177:41 - including our footer
177:44 - footer.html and there is the footer of
177:46 - our web page
177:49 - so now we can navigate between our home
177:51 - page and our about page
177:52 - they're both two completely different
177:54 - pages they have different text but we're
177:57 - reusing the same header and footer
178:00 - okay let's finish this with our
178:02 - locations page I'm just going to copy
178:04 - all of this just to expedite everything
178:07 - this is the locations page stuff about
178:10 - your location page can go here
178:15 - okay let's click on our locations page
178:18 - and we are now within the locations page
178:20 - again we're reusing the same header and
178:23 - the same footer parts of our website are
178:25 - functioning as components they're
178:27 - reusable
178:28 - we don't need to create an individual
178:30 - header for every file for every PHP file
178:33 - we can write them once then simply reuse
178:35 - them the cool thing is too if we need to
178:37 - make any changes they'll be reflected
178:40 - across every web page let me change my
178:42 - email to at gmail.com
178:46 - see my email just changed and that is
178:48 - reflected on every web page it helps
178:50 - with code reusability then let's change
178:53 - our title let's go to our header
178:56 - this is the type in your name
179:01 - bro code website
179:03 - and that change has been reflected
179:05 - across all of our web pages
179:07 - that is the include function you can
179:09 - include the contents of a file inside of
179:12 - your web page it helps with reusability
179:14 - and if you need to make any changes you
179:16 - can do so in just one place and that is
179:18 - the include function in PHP
179:23 - hey everybody Welcome to the wonderful
179:25 - world of cookies a cookie if you don't
179:28 - know basically speaking it's information
179:30 - about a user stored in a user's web
179:33 - browser that's why you might receive
179:35 - targeted advertisements platforms such
179:38 - as YouTube they might remember your
179:40 - browsing preferences and you can store
179:42 - other non-sensitive data now to create a
179:44 - cookie in PHP we will use the set cookie
179:48 - function it's actually pretty simple our
179:51 - cookies are stored as an associative
179:53 - array first is the key our key will be
179:55 - favorite food the second element is the
179:59 - value
180:00 - my favorite food will be Pizza
180:03 - the third argument is an expiration time
180:06 - cookies typically expire after a certain
180:09 - amount of time to set the time we can
180:11 - use the time function then add this is
180:14 - in seconds for one day that would be 86
180:18 - 400 seconds
180:20 - if you need your cookie to expire after
180:22 - two days we can just multiply this by
180:24 - two
180:25 - then let me enclose these within
180:27 - parentheses just for clarity
180:29 - then the next argument is the file path
180:32 - I'll use a forward slash for the default
180:35 - file path
180:36 - and there we are so I'm going to save
180:39 - this
180:40 - now if we open up our web browser
180:43 - I'm going to right click go to inspect
180:47 - you can find your cookies underneath
180:48 - application
180:50 - then go to cookies underneath storage oh
180:53 - look at that we have a cookie
180:55 - the key is favorite food
180:57 - the value is pizza
181:00 - and there is an expiration date here too
181:03 - there it is
181:04 - let's add a few more cookies
181:10 - set cookie favorite drink
181:14 - I will set the value to be coffee
181:18 - this cookie will expire after three days
181:22 - there's our next cookie one more
181:28 - favorite dessert
181:31 - I will pick ice cream
181:34 - this cookie will expire after four days
181:37 - so 86 400 times 4.
181:41 - there we have three cookies
181:46 - favorite dessert favorite drink favorite
181:48 - food
181:49 - now to delete a cookie all you have to
181:51 - do is set the time to minus zero
181:55 - so let's do that for all of these
182:01 - yeah look at that the cookies are gone
182:02 - now
182:04 - let's revert that back
182:08 - and we have cookies again
182:10 - let's print each key value pair from all
182:13 - of our cookies
182:14 - I will use a for each Loop
182:19 - we are accessing the cookie super Global
182:22 - variable our cookies are stored as key
182:25 - value pairs
182:27 - using a for each Loop we can write as
182:31 - key
182:32 - Arrow value
182:36 - I will Echo each key value pair
182:42 - key
182:44 - equals
182:46 - value
182:48 - then a break
182:53 - here are the three cookies we set
182:55 - favorite food equals Pizza favorite
182:57 - drink equals coffee favorite dessert
182:59 - equals ice cream
183:01 - to access one of the values you would
183:03 - need the key maybe I will display an
183:06 - advertisement based on somebody's
183:07 - favorite food maybe we remember what
183:10 - their favorite food is
183:11 - I will use the is set function
183:15 - is set
183:17 - place it within an if statement we will
183:20 - check within our cookies
183:24 - add the key of favorite
183:28 - food
183:29 - if their favorite food key has a value
183:32 - let's display it
183:38 - buy some
183:41 - then let's access our cookie variable
183:44 - at the Key of favorite food
183:53 - okay else
183:55 - Echo
183:58 - I don't know your favorite food
184:04 - our cookie for our favorite food is
184:06 - currently set
184:08 - let me get rid of this for each Loop
184:13 - if our favorite food key has a value
184:16 - that's set will display an advertisement
184:19 - for their favorite food
184:21 - buy some pizza
184:23 - if this cookie wasn't set I'll let it
184:26 - expire by setting the time to minus zero
184:31 - I don't know your favorite food this
184:34 - cookie isn't set we will execute the
184:36 - else claws alright everybody so those
184:39 - are cookies they are just information
184:41 - about a user stored in a user's web
184:43 - browser these are used for targeted
184:46 - advertisements browsing preferences and
184:49 - other non-sensitive data and well
184:51 - everybody that's an introduction to
184:52 - cookies in PHP
184:57 - hey everybody how's it going in today's
184:59 - video I need to explain sessions in PHP
185:02 - because well it's an important topic in
185:04 - PHP a session is a super Global variable
185:08 - that's used to store information on a
185:10 - user to be used across multiple Pages
185:13 - once a session is created a user is
185:16 - assigned a session ID for example these
185:19 - can be used for login credentials once
185:21 - you log into a site like Facebook for
185:23 - example you can visit different pages on
185:26 - that site and stay logged in we'll do
185:28 - something like that with PHP let's get
185:30 - started we have our index PHP file but
185:34 - let's create another our index page will
185:37 - be our login page
185:38 - then we'll create a PHP page named home
185:42 - home.php the idea is that once we log in
185:45 - with our index file we will be
185:48 - redirected to our home page so we have
185:50 - two PHP files Now to create a session
185:53 - before you display any HTML we will use
185:56 - the session start function within my PHP
185:59 - script I will type session start
186:03 - and that's how to start a session then
186:05 - after you start a session then you can
186:07 - add any HTML let's generate some HTML
186:12 - I'll add some text to our HTML page
186:15 - this is the login page
186:20 - then I'll add a hyperlink for the home
186:23 - page
186:24 - we'll use an a tag set the href
186:27 - attribute to equal home dot PHP
186:32 - this goes to the home page
186:36 - then be sure to close it
186:39 - I'll add a break as well
186:42 - perfect after our HTML document let's
186:45 - add another PHP script
186:49 - we can create name value pairs within
186:52 - our session super Global variable
186:55 - let's create a key of username
186:58 - set this equal to a username of your
187:01 - choosing
187:03 - then let's do that with the password as
187:05 - well
187:05 - so we will access our session super
187:08 - Global variable
187:09 - we will create a key of password
187:13 - then make up some password
187:18 - for testing purposes let's Echo our
187:20 - username and our password
187:22 - Echo
187:24 - session we're accessing the key of
187:27 - username then we will be returned to the
187:30 - value
187:31 - then I'll add a break
187:35 - then do this with password as well
187:40 - let's see if this works
187:42 - okay here's my username here's my
187:44 - password they are stored within the
187:46 - session variable but we can access the
187:48 - values with a given key they're in key
187:50 - value pairs I would like these values to
187:53 - be accessible from another page from my
187:56 - home page
187:57 - for demonstration purposes I am going to
187:59 - Echo our username and our password
188:02 - from our home page
188:04 - but we need to create a PHP script so
188:06 - PHP
188:09 - then I will Echo our username and our
188:12 - password let's see what happens it's an
188:13 - experiment
188:15 - so I'm going to save everything
188:17 - on our index page we have our username
188:19 - and our password that works fine but if
188:21 - I were to go to our home page our second
188:23 - page
188:24 - well we don't have a username or a
188:26 - password
188:27 - undefined Global variable session
188:30 - within any additional files that we
188:32 - create we will also need to start a
188:34 - session with the session start function
188:36 - and I'll just copy this
188:38 - you'll need to do this before any HTML
188:41 - is displayed we'll start the session
188:43 - I'll create some HTML
188:47 - I'll copy these two lines
188:50 - but make a few changes to them
188:53 - okay this is the home page
188:58 - then I'll create a link to our index
189:01 - page
189:02 - this goes to the
189:04 - we'll call the login page
189:08 - let's reload this
189:11 - okay this is the home page this goes to
189:13 - the login page we do have our username
189:15 - and our password so I'm just switching
189:17 - between the home page and the login page
189:21 - we can access our session variable from
189:24 - either page as long as you start a
189:26 - session for some additional practice
189:28 - let's change our login page to actually
189:31 - reflect a login page we'll have a text
189:33 - box for both a username and a password
189:34 - and a login button so let's go to our
189:38 - index page so this is the login page
189:41 - let's change a few things around
189:45 - we'll create a form
189:51 - set the action attribute to equal
189:54 - index.php
189:56 - for the method since we're using
189:58 - credentials we should use post
190:01 - let's say username add a line break
190:05 - I guess that can be a label too
190:08 - we'll need a text box input type equals
190:11 - text
190:13 - for the name attribute let's set that to
190:15 - be username
190:18 - add a break
190:20 - let's copy these two lines of markup
190:23 - then paste them
190:26 - change the second username to be
190:28 - password
190:30 - also do that with the name attribute
190:34 - then we need a login button
190:36 - input type equals submit
190:40 - for the name this will be login
190:44 - for the value
190:45 - let's say that this is login as well
190:52 - then let's get rid of these lines
190:55 - I'm going to minimize this Explorer
190:56 - window just so we have more room to work
190:58 - with what we're going to do now is after
191:00 - somebody clicks the login button then
191:03 - we'll assign our session variable to
191:05 - check to see if somebody interacts with
191:07 - our login button we can use the is set
191:09 - function within an if statement if
191:12 - is set
191:14 - let me scroll down a little bit we are
191:16 - accessing our post variable
191:19 - at the Key of login
191:23 - if this button is interacted with if
191:25 - it's set we will assign our session
191:28 - variable
191:30 - we'll create a key of username
191:33 - we will assign whatever is within our
191:35 - text box for our username in a real
191:38 - world scenario I would probably use a
191:40 - filter but just for learning purposes
191:42 - I'm going to keep it simple and not use
191:44 - one maybe in a project we will I need to
191:47 - access our post variable
191:50 - at the Key of username
191:53 - whatever's in our text box we will
191:55 - assign to our session variable of
191:56 - username
191:58 - then do that with our password as well
192:04 - before we log in we have to check to see
192:06 - if our username and our password fields
192:08 - are empty we could write using an if
192:10 - statement
192:12 - if not empty function
192:15 - we are checking if our username is not
192:18 - empty
192:21 - and let's check to see if our password
192:24 - is not empty
192:27 - I'll put that down here
192:32 - if our username is not empty and our
192:35 - password is an empty then let's assign
192:38 - our session variables
192:42 - so for testing purposes let's Echo those
192:45 - values Echo
192:47 - the sessions username
192:49 - I'll add a break
192:53 - then do that with the password
192:59 - all right type in a username
193:01 - make up a password
193:03 - oop that should be a password Field hold
193:06 - on
193:07 - type equals password
193:14 - there we go here's our username here's
193:16 - our password if I were to refresh
193:18 - everything type in either a username or
193:21 - password we shouldn't display anything
193:23 - which is correct
193:25 - if one of these two fields are empty
193:27 - let's add an else clause
193:30 - let's Echo
193:34 - missing username slash password one of
193:37 - those is missing
193:39 - then I'll add a break
193:42 - I'll type in a username but not a
193:44 - password
193:46 - missing username slash password
193:48 - let's type in a password but not a
193:50 - username
193:53 - missing username slash password
193:55 - let's type in both
194:01 - and that seems to work now let's get rid
194:04 - of these Echo statements we no longer
194:05 - need them we were using them for testing
194:07 - purposes what we're going to do now is
194:09 - after hitting the login button we will
194:12 - redirect our browser to our home page
194:15 - there's a function for that it is the
194:18 - header function
194:19 - we'll add that right here after we
194:21 - assign our username and password to jump
194:24 - to our home page within the header
194:26 - function and within quotes we will type
194:28 - location colon space then the name of
194:32 - the page home.php
194:35 - home dot PHP
194:38 - let's save everything
194:40 - make sure you're on your login page
194:43 - I will type a username and a password
194:47 - Press login and we are directed to our
194:50 - home page we are still maintaining that
194:52 - session we have our username and our
194:54 - password still
194:56 - let's create a log out button we'll do
194:58 - this within our home page
195:00 - let's get rid of our hyperlink
195:03 - we'll create a form that just has a
195:05 - button
195:09 - so the action attribute will be home.php
195:15 - or the method
195:17 - let's use post again
195:22 - I will add a button the input type will
195:25 - be submit
195:27 - for the name
195:29 - this will be log out
195:32 - for the value that will be log out as
195:34 - well
195:39 - we will use the is set function to see
195:41 - if our log out button is set
195:44 - so let's use an if statement
195:48 - if
195:49 - is set
195:52 - is our log out button set
195:55 - we will access post the key is log out
196:00 - if this button is set we will use the
196:03 - session destroy function
196:05 - we would like to end our session if
196:07 - we're logging out we will use the
196:09 - session
196:10 - destroy function
196:12 - to destroy the session
196:14 - after logging out let's go back to our
196:16 - login page the index file
196:19 - we will use the header function again
196:23 - set the location to be index.php
196:28 - I will log out and that should bring me
196:31 - back to my login page
196:32 - alright everybody that's how to create a
196:34 - session in PHP you can store information
196:37 - about a user that can be used across
196:39 - multiple pages and well everybody that
196:42 - is an introduction to sessions in PHP
196:47 - hey everybody today we will be
196:49 - discussing the server super Global
196:51 - variable it contains headers paths and
196:54 - script locations it's an associative
196:56 - array that's created by the web server
196:58 - it contains nearly everything you need
197:01 - to know about the current web page
197:03 - environment to access the super Global
197:05 - variable you type dollar sign underscore
197:08 - server then you can access one of the
197:10 - key value pairs so for this
197:12 - demonstration I'm going to create a for
197:14 - each loop we're going to iterate over
197:17 - all of the pairs all of the key value
197:19 - pairs let's take our server
197:23 - as
197:25 - here Arrow value
197:29 - then I will Echo each key value pair
197:34 - key
197:35 - equals
197:38 - value
197:39 - then add a line break let's take a look
197:44 - all right we have a lot going on here
197:48 - here are the key value pairs found
197:50 - within my server super Global variable
197:52 - we're still beginners a lot of this is
197:55 - more for advanced PHP developers I more
197:58 - or less just want to raise awareness
198:00 - that this exists
198:01 - two keys that we're going to be
198:03 - interested in are PHP self and request
198:06 - method phpself is the location of this
198:09 - page the request method is either get or
198:12 - post the default is get if we have an
198:15 - HTML form that has the method set to
198:18 - post after clicking the submit button
198:20 - the request method would equal post let
198:23 - me demonstrate how we can use phpself
198:26 - I am going to create an HTML form
198:28 - let me get rid of this for each Loop
198:43 - the name of my PHP file is index.php the
198:47 - action attribute of my form is set to
198:49 - index.php
198:51 - any information that's posted will be
198:54 - sent to my PHP script
198:56 - however if I were to change the name of
198:59 - this file
199:00 - let's rename our file as home
199:04 - well our action attribute isn't going to
199:07 - be updated
199:08 - I'm going to navigate to our home page
199:12 - localhost.website slash home
199:15 - if I were to type in my name
199:18 - then press submit we're sending our form
199:20 - data to a file that doesn't exist it
199:23 - would be kind of nice if we could update
199:25 - this automatically that's where our
199:27 - server super Global variable can come in
199:29 - in place of a file name let's write a
199:32 - PHP script within the set of quotes
199:37 - we are going to access the server super
199:40 - Global variable at the Key of PHP
199:43 - underscore self this key contains the
199:46 - value of the current file path for this
199:49 - file save and reload everything you may
199:51 - need to navigate to our home page
199:53 - because right now it's set to index
199:58 - okay type in a username press submit and
200:01 - that should work then if we update the
200:03 - name of this file let's rename it to
200:06 - um start I guess that's all I could
200:08 - think of at the moment
200:10 - okay let's navigate to start
200:13 - .php
200:15 - type in a username press submit and that
200:18 - works just fine that's how we can use
200:20 - phpself to get the current file name
200:23 - however with phpself it is vulnerable to
200:26 - something called The cross-site Script
200:28 - we learned about cross-site scripts on
200:30 - the topic of Sanitation and validation
200:32 - if you do use phpself I do recommend
200:35 - enclosing this variable within a filter
200:37 - one that I recommend is HTML
200:40 - special chars
200:43 - so be sure to enclose that
200:47 - that'll avoid any cross-site scripts
200:49 - just be aware that this is something you
200:51 - might see in the future in your own
200:53 - studies at least you know what it is now
200:54 - the other key that we're going to talk
200:56 - about is request method request method
200:59 - is either get or post
201:01 - so if I were to reload everything but
201:03 - not submit anything
201:05 - the request method by default is get so
201:08 - another way to detect if a form is
201:10 - submitted is to access the request
201:12 - method normally we're used to saying if
201:15 - is set
201:17 - then access post
201:19 - then we access our submit button
201:22 - one problem with this is that at least
201:24 - in older web browsers you can submit a
201:27 - form without hitting the submit button
201:29 - there's ways around that a more reliable
201:31 - solution is to take a look at that
201:33 - request method within an if statement
201:35 - let's access our server super Global
201:39 - variable we will take a look at our
201:42 - request method
201:44 - and see if this is equal to post if it
201:48 - is then let's Echo I don't know hello
201:53 - type in a username it doesn't really
201:56 - matter I guess hit submit and we will
201:59 - display hello in the future I would
202:01 - prefer if we stuck with this way of
202:03 - handling post requests just because it's
202:05 - more reliable alright everybody so
202:07 - that's a basic introduction to the
202:09 - server super Global variable they're
202:11 - still way more advanced stuff involving
202:13 - it but I thought I'll at least give you
202:14 - an introduction just so that it doesn't
202:16 - freak you out in the future we'll have a
202:18 - little bit more practice with this when
202:19 - we create our own login form and well
202:21 - everybody that is the server super
202:23 - Global variable in PHP
202:28 - hello hello again everybody today I'm
202:30 - going to be explaining hashing in PHP
202:33 - hashing is the process of transforming
202:36 - sensitive data such as a password into
202:38 - letters numbers and or symbols via a
202:42 - mathematical process it's kind of
202:44 - similar to encryption but it's
202:46 - technically different basically speaking
202:48 - we can hide sensitive data from third
202:50 - parties like hackers in my example I
202:53 - have hashed my password
202:55 - pizza123 this is what my hashing
202:58 - algorithm spat out it appears to be what
203:00 - looks like a bunch of random letters
203:02 - numbers and symbols we might store this
203:04 - in a database then in case that database
203:07 - is compromised well then a third party
203:09 - wouldn't be able to see my original
203:10 - password this is what the third party
203:13 - would see in PHP to create a hash of
203:16 - let's say a password I'll create a
203:17 - password variable
203:20 - make up some password
203:23 - Pizza one two three
203:26 - I will create a hash variable
203:29 - then use the password
203:31 - hash function
203:34 - two arguments are a password
203:38 - then a hashing algorithm the second
203:41 - argument is technically a constant that
203:43 - specifies the algorithm the constant
203:46 - will set is password default
203:49 - if we set our algorithm to be password
203:51 - default and PHP currently we're using
203:54 - the bcrypt algorithm which is a very
203:57 - popular algorithm this hash is what
204:00 - we'll be storing within a database it's
204:02 - protected if I were to Echo my hash
204:07 - this would be the result
204:10 - our password is what is referred to as
204:12 - plain text we can plainly see what it is
204:15 - using the password verify function we
204:18 - can compare a password versus a hash if
204:22 - they're mathematically similar then that
204:24 - password verify function will return
204:26 - true
204:28 - let's write a if statement
204:30 - if
204:32 - password
204:33 - verify then we'll pass in a password and
204:37 - a hash let's say that we get some user
204:40 - input the user types in hamburger 666.
204:45 - then the other argument is going to be
204:48 - our hash
204:50 - just imagine that we're retrieving this
204:52 - hash from a database if our plain text
204:54 - password and our hash are mathematically
204:57 - consistent then this function will
205:00 - return true
205:02 - so let's Echo
205:06 - you are logged in
205:09 - else
205:11 - Echo
205:14 - incorrect password
205:18 - okay is hamburger 666 the same as our
205:21 - hash
205:23 - incorrect password what about hot dog
205:26 - one two one two
205:28 - that is also incorrect
205:30 - maybe pizza one two three
205:33 - oh look at that that's the right
205:34 - password you are logged in
205:37 - the password verify function will verify
205:40 - a plain text password versus a hash if
205:43 - there's a match we return true if not it
205:46 - returns false that's really what hashing
205:48 - is in layman's terms it's transforming
205:51 - sensitive data such as a password in two
205:54 - letters numbers and or symbols via a
205:56 - mathematical process and the purpose is
205:59 - to hide the original data from third
206:01 - parties and that is how to Hash a
206:04 - password in PHP
206:07 - hey welcome back everybody we have
206:10 - finally made it to the portion of the
206:11 - series where we will be connecting to a
206:13 - myosql database at this point in the
206:16 - series you will need to be familiar with
206:18 - mySQL queries I do have a full course on
206:21 - that on my Channel for free it's about
206:22 - three hours but yeah moving forward we
206:25 - will need to know MySQL there's two
206:27 - popular ways to connect to a mySQL
206:29 - database the first being the mysqli
206:33 - extension this is what we'll be using
206:35 - the other is PDO meaning PHP data
206:39 - objects many developers prefer PDO over
206:42 - mysqli because it can connect to more
206:45 - than just a mySQL database I believe you
206:47 - can connect up to 12 additional
206:49 - databases you know postgres being one of
206:51 - them however you would need to know
206:53 - object oriented programming which is an
206:55 - intermediate topic and we have not
206:57 - covered that yet as beginners we'll
206:59 - stick with the mysqli extension it's
207:02 - procedural alright well let's get
207:04 - started we'll need to create a mySQL
207:06 - database within our zamp server you'll
207:09 - need to open up the zamp control panel
207:11 - which is this thing make sure that these
207:14 - two modules Apache and MySQL are both
207:16 - started
207:18 - we will need to access
207:19 - phpmyadmin which you can do so by
207:22 - clicking on the admin button next to
207:24 - mySQL
207:26 - that should bring you to phpmyadmin
207:29 - otherwise you can just type in this web
207:31 - address localhost slash phpmyadmin
207:35 - phpmyadmin allows you to configure your
207:38 - database you can make SQL queries
207:40 - monitor the status export import data
207:43 - we'll be covering just some of the
207:45 - basics to create a database go to the
207:48 - databases tab
207:49 - we will create a database come up with a
207:52 - database name in the MySQL series we
207:54 - created a database named businessdb
207:58 - we'll stick with that but you can really
208:00 - name it anything then we will hit this
208:03 - create button
208:04 - we can create a table but we'll do that
208:06 - in a future topic let's be sure that
208:09 - that database is actually created let's
208:11 - click on our server go to databases yeah
208:14 - it's right here
208:15 - to drop a database you can check the
208:17 - database that you create then press the
208:20 - stop button but we don't want to do that
208:21 - but that's how there is some information
208:24 - we'll need about our MySQL server if you
208:26 - go to user accounts
208:28 - we will need some of this information
208:30 - such as the host name
208:33 - the username of root
208:36 - if there's a password for the server
208:37 - which there currently isn't
208:39 - and that's about it you can edit
208:41 - privileges too but that's outside of the
208:43 - scope of this topic all right we have
208:45 - now created our database
208:47 - so let's close out of phpmyadmin
208:51 - make sure that your MySQL server is
208:53 - running it currently is
208:57 - I'm going to create a separate PHP file
208:59 - just to manage our database connection
209:02 - so let's create a new file I will name
209:05 - this database.php
209:08 - anything related to connecting to our
209:10 - database we will handle within this PHP
209:13 - file
209:14 - this will be a PHP script
209:18 - we will declare a few variables
209:20 - the first will be DB underscore server
209:25 - this holds the name of the server
209:28 - for us that was localhost
209:32 - then DB user
209:35 - that was root
209:38 - a password DB underscore password I'll
209:42 - say just pass
209:43 - we do not have a password I will leave
209:45 - that empty then the name of the database
209:48 - DB underscore name
209:51 - I named my database business DB
209:56 - then we will declare a connection
209:58 - variable
209:59 - we'll shorten this to con meaning
210:01 - connection
210:02 - I will set that to be empty okay these
210:05 - are the variables that we'll need
210:07 - to establish a connection to the mySQL
210:09 - database we will take our connection
210:11 - variable set this equal to the MySQL I
210:16 - underscore connect function there are
210:20 - four arguments within this function the
210:23 - database server name username password
210:25 - and the name of the database let's add
210:28 - these variables as arguments
210:33 - so server user
210:35 - then password
210:38 - then
210:40 - database name
210:45 - let me make some more room I'll put
210:48 - these on a new line just for readability
210:50 - but there should be no change to its
210:52 - functionality if I do this
210:55 - if we establish a successful connection
210:57 - this variable is technically what is
211:00 - known as an object we haven't discussed
211:02 - object oriented programming it will
211:04 - represent our current connection one of
211:07 - a few ways in which we can check to see
211:09 - if our connection is up and running is
211:12 - we can use an if statement
211:14 - then place your connection within the if
211:16 - statement
211:18 - if a connection exists let's Echo
211:24 - you are connected
211:28 - else for testing purposes let's Echo
211:33 - could not connect
211:36 - I will save and reload everything
211:39 - then go to your database PHP file
211:42 - localhost slash website slash database
211:46 - dot PHP
211:49 - you are connected all right
211:52 - I'm going to stop the MySQL server then
211:55 - try and reconnect
211:58 - we get this ugly error message
212:01 - fatal error uncaught mice qli SQL
212:04 - exception
212:05 - for some reason if we can't connect to
212:07 - our database we don't want to display
212:09 - this error to the user we should use
212:11 - some exception handling we don't want to
212:13 - print any ugly error messages to the
212:15 - user they will have no idea what's going
212:18 - on
212:18 - I suggest when we attempt to create a
212:20 - connection we surround this code with
212:22 - the try block
212:24 - this has to do with the topic of
212:26 - exception handling
212:28 - we can try some code that might cause an
212:31 - error such as if we can't connect to our
212:34 - database
212:35 - let me just fix these
212:39 - we will try and make a connection if we
212:42 - encounter this exception I'll copy it we
212:45 - can take some other course of action
212:47 - after our try block let's add catch
212:50 - parentheses curly braces then add the
212:54 - name of that exception within the set of
212:55 - parentheses in place of displaying this
212:58 - error to the user
212:59 - let's Echo a message such as could not
213:03 - connect and I'll steal that here
213:06 - I'll get rid of the self statement
213:09 - so if we encounter this error again we
213:11 - will display
213:13 - could not connect
213:15 - that's a lot more obvious as to what's
213:17 - going on instead of that fatal error
213:19 - message
213:20 - if I were to start the MySQL server
213:22 - again
213:23 - then reload
213:25 - we are now connected this PHP file is
213:28 - now complete make sure to save
213:29 - everything we're going to close it I
213:32 - will head back to our index file
213:35 - let's generate some HTML after our PHP
213:38 - script
213:41 - in the body let's say hello
213:43 - doesn't really matter what you say
213:46 - let me zoom in a little bit
213:48 - since everything related to our database
213:50 - connection is handled within a separate
213:52 - PHP file we can include that within
213:55 - another file
213:57 - within a PHP script at the top of my
213:59 - index page I will use the include
214:03 - function
214:04 - we will include that file
214:07 - database.php to connect to our database
214:10 - so let's see if it works
214:14 - you are connected hello
214:17 - maybe I'll add a new line after
214:20 - could not connect I'll add a line break
214:24 - do that here as well
214:26 - much better
214:27 - technically it's not necessary to tell
214:30 - the user that they're connected to the
214:31 - database we were just more or less doing
214:33 - this for testing purposes
214:35 - one way or another though we should let
214:37 - the user know if there's any problems
214:39 - with the connection so we'll keep this
214:40 - for now
214:42 - if I were to stop the server reload
214:46 - we have that message that says could not
214:48 - connect
214:49 - all right everybody so that's how to
214:51 - connect to a MySQL server in PHP
214:57 - all right everybody so in today's video
214:59 - I'm going to explain how we can create a
215:01 - table using
215:03 - phpmyadmin there's two ways to get here
215:06 - you can either go to your zamp control
215:08 - panel then press this admin button next
215:10 - to mySQL or you can head to this URL to
215:13 - create a table let's go to our databases
215:15 - we should have a database already
215:17 - created in the last video we created a
215:20 - database named businessdb so let's click
215:23 - on it
215:24 - let's begin by creating a table name
215:26 - I'll create a table of users these will
215:29 - be registered users
215:31 - then set the number of columns I'll
215:33 - stick with four
215:34 - then we will hit the create button
215:38 - in this column we will set the name of
215:40 - each column our first column will be for
215:43 - user IDs let's name this column ID we
215:47 - will set the data type to be int
215:50 - we won't specify a length
215:52 - if you would like a default value you
215:54 - can set that here we're going to use the
215:57 - ID field to be set to Auto increment you
216:00 - can set the characters but we will keep
216:02 - that as the default like for some reason
216:04 - if you need I don't know Greek you can
216:06 - use Greek but let's just use the default
216:08 - to add an index you can do that here we
216:12 - will set our ID to be our primary index
216:17 - then I will click the Go Button to
216:20 - enable auto increment on a column you
216:22 - can check the AI button it's for auto
216:25 - increment that should be it for this
216:27 - column let's create a column for
216:29 - usernames
216:30 - the column name will be user
216:32 - for the data type let's say varchar then
216:36 - set a Max size I think 25 is good
216:40 - for our users let's have each user be
216:43 - unique
216:44 - then press go then let's move on to the
216:47 - next column this will be for passwords
216:50 - for the data type let's set that to be
216:53 - char
216:54 - which is right here
216:56 - I recommend hashing passwords in our
216:59 - database we won't be storing plain text
217:01 - passwords in case you know we get hacked
217:03 - or in case somebody uses SQL injection
217:05 - we'll be storing a hash of a password
217:08 - I'll set the size to be 255. encrypting
217:11 - and hashing algorithms are always
217:13 - changing and updating let's future proof
217:15 - our password field just by setting it to
217:17 - something large
217:18 - then let's add a registration date maybe
217:22 - we'll name the column register
217:24 - underscore date
217:27 - let's select not just date but date time
217:31 - I want to know the time that they
217:32 - register
217:34 - for the default let's use a current
217:36 - timestamp
217:37 - that should be good for our table if you
217:39 - would like some SQL code you can preview
217:42 - the SQL
217:44 - this is what we would be writing
217:47 - but we're going to be doing this
217:48 - automatically with phpmyadmin so let's
217:50 - save
217:52 - and we now have our table
217:54 - if I were to go to browse this is our
217:56 - table but there's currently no rows
217:58 - we'll be adding some rows with PHP but
218:01 - for testing purposes let's insert one
218:04 - manually using phpmyadmin
218:06 - so we will insert some test values with
218:09 - our ID it's set to Auto increment we
218:11 - don't necessarily need to put in a value
218:13 - for the user let's say the user is
218:15 - SpongeBob
218:17 - and for the password his password will
218:19 - be pineapple one you can also encrypt
218:22 - this password using password hash we'll
218:25 - cover hashing passwords in the next
218:27 - video with our registration date this is
218:30 - set to a current timestamp so that's
218:32 - going to be done automatically
218:33 - let's press go
218:36 - this would be the SQL query but yeah one
218:40 - row has been inserted let's go back to
218:42 - our table
218:44 - the username is SpongeBob password is
218:47 - pineapple1 and here is the registration
218:49 - date well date and time
218:52 - then to delete a row you can click this
218:54 - delete button then press ok
218:57 - and that is how to create a table in
218:59 - phpmyadmin and in the next topic we will
219:02 - be inserting some rows into our table
219:04 - using PHP
219:07 - hey everybody in today's video I'm going
219:09 - to show you how we can insert data into
219:12 - a MySQL table using PHP at this point in
219:15 - the series I am assuming that you have
219:17 - already established a connection to your
219:19 - mySQL database if you haven't here's
219:22 - some code that will do that in my index
219:24 - file I have included the code to connect
219:27 - my database at the end of my script I am
219:30 - going to close this connection just
219:32 - because I know for a fact I'm going to
219:34 - forget to mention that so I'm doing it
219:35 - now to close a connection you can type
219:37 - my sqli
219:40 - underscore close then pass in the
219:44 - connection
219:46 - our connection is underlined because vs
219:49 - code doesn't recognize it because we're
219:51 - including it from another file but it
219:53 - should work just fine
219:54 - now what we're going to do is write an
219:56 - SQL query I'll store that within a
219:58 - variable
220:00 - SQL this will hold our query
220:03 - So within quotes we can write some SQL
220:06 - query of your choosing we'll do a basic
220:08 - insert
220:09 - insert into the name of the database my
220:13 - databases users
220:17 - then list the columns
220:19 - I will insert a username and a password
220:24 - list the column user
220:26 - password
220:32 - then some values
220:36 - we're going to start with just some
220:38 - plain text
220:39 - my username will be SpongeBob
220:42 - for my password
220:45 - let's say SpongeBob's password is
220:47 - pineapple1
220:49 - then to submit the query we can use the
220:52 - my sqli underscore query function
220:58 - then pass in our connection
221:01 - and our SQL query and that's it again vs
221:06 - code isn't going to recognize our
221:08 - connection because we're importing it if
221:11 - I were to run this query
221:13 - then refresh PHP in my admin
221:16 - we have our submission
221:19 - user ID of one it's set to Auto
221:21 - increment in this case
221:23 - the user is SpongeBob password pineapple
221:27 - and here's the registration date
221:29 - I set the registration date to be a
221:31 - current timestamp yes I am recording at
221:34 - two in the morning because I'm crazy
221:36 - let's say that for some reason we can't
221:38 - register a user maybe I forget a
221:41 - password
221:43 - well we get this fatal error fatal error
221:45 - uncaught mysqli exception
221:48 - we can surround our query with the try
221:50 - block we can try this code if there's
221:53 - any exceptions or errors that pop up we
221:56 - can handle them gracefully let's create
221:58 - a try block we will try some possibly
222:01 - dangerous code
222:03 - then handle any exceptions if they come
222:05 - up
222:07 - if this query is successful then let's
222:10 - Echo
222:12 - user is now registered
222:19 - if we encounter a problem let's catch
222:22 - that
222:22 - the exception we're catching is this one
222:25 - I'm going to copy it paste it
222:28 - then we will Echo
222:31 - could not register
222:35 - user
222:37 - oops gotta fix that
222:39 - all right let's try this again
222:41 - my query is not technically correct but
222:43 - we should be able to handle that
222:45 - exception
222:46 - could not register a user
222:49 - as you can see here
222:50 - with our SQL query let's insert some
222:53 - variables let's declare two let's
222:56 - declare a username
222:58 - username equals
223:01 - Squidward this time
223:04 - and a password
223:06 - equals
223:10 - clarinet 2.
223:13 - with our values within single quotes we
223:17 - will list our variables
223:19 - username
223:22 - and password
223:25 - let's see if this works
223:28 - user is now registered
223:30 - then if we head to phpmyadmin refresh
223:33 - this table
223:34 - we now have an entry for Squidward with
223:37 - the password of clarinet2 art passwords
223:40 - are plain text it would be much better
223:42 - if we were to store a hash of a password
223:44 - just because you know these are plain
223:46 - text it's not secure
223:49 - so let's hash our password
223:52 - we'll create a hash
223:55 - equals we will use the password
223:58 - hash function
224:01 - the two arguments are the password
224:06 - and an option for an algorithm we will
224:08 - use the default
224:10 - password
224:12 - default
224:13 - technically we're using the bcrypt
224:16 - algorithm
224:17 - that's the default currently
224:19 - we will insert our username
224:21 - and our hash in place of our password
224:24 - let's change the username though let's
224:27 - assign
224:28 - Patrick
224:31 - his password will be rock3
224:36 - let's see if this works
224:38 - okay refresh phpmyadmin
224:41 - and there is Patrick
224:44 - user ID3 username is Patrick
224:47 - here's the hash of the password
224:49 - and the registration date all right
224:51 - everybody so that's how to insert data
224:54 - into a MySQL table using PHP
225:00 - hey everybody in today's video I'm going
225:02 - to show you how we can retrieve data
225:04 - from a mySQL database using PHP I have
225:07 - already established a MySQL connection
225:09 - I'm going to include that file that
225:12 - establishes the connection then at the
225:14 - end of my script I will close that
225:16 - connection with the MySQL close function
225:19 - the first thing we'll do is write an SQL
225:21 - query I will store that within a
225:23 - variable named SQL in my table I would
225:26 - like to select a user let's select
225:28 - SpongeBob the query would look something
225:31 - like this let's select let's say
225:34 - everything
225:35 - from our table which I named users
225:39 - where if you don't write a where Clause
225:42 - your query is going to return more than
225:44 - one row I'll show you how we can handle
225:46 - that later select all from users where
225:49 - user is equal to SpongeBob but put that
225:54 - within single quotes
225:57 - this is our SQL query to make a query we
226:01 - can use the my sqli query function
226:06 - we will pass in our connection object
226:10 - then our query SQL
226:13 - if successful this function will return
226:15 - an object we will store that as a
226:18 - variable named result so result is
226:22 - technically an object somewhere within
226:24 - this object there's an associative array
226:27 - to find how many rows are returned from
226:30 - our query function we can place that
226:32 - within an if statement
226:33 - we will use this function mysqli
226:38 - underscore num
226:40 - rows function this function will return
226:43 - how many rows are within our result
226:47 - really it should only be one in this
226:48 - example
226:49 - if there's at least one result
226:52 - we could write a condition such as if
226:55 - the number of rows is greater than zero
226:58 - there's at least one matching row
227:00 - to get that Row from our result let's
227:03 - store that within a variable named row
227:06 - set this equal to the my sqli
227:09 - underscore
227:11 - fetch underscore Asos for associative
227:17 - then pass in our result
227:19 - this function Returns the next available
227:22 - row within our object our row is an
227:26 - associative array we can access this
227:28 - data by a key then be returned one of
227:30 - the values
227:32 - let's Echo
227:34 - row
227:35 - at index of ID
227:38 - then I'll add a break afterwards
227:42 - let's see what we have
227:44 - we have the user ID of one
227:48 - let's get the username
227:51 - I think it's just user
227:53 - one SpongeBob
227:56 - then the registration date
227:59 - reg date so these are the names of the
228:02 - columns
228:04 - yeah here's SpongeBob's ID is username
228:07 - and the registration date
228:10 - those were the fields found within our
228:12 - table
228:13 - now if there are no results let's say
228:15 - we're looking for Sandy
228:18 - well we don't do anything
228:20 - let's add an else clause
228:22 - else let's Echo
228:26 - no results found or maybe no user found
228:31 - no user found that's how to retrieve one
228:35 - row from a table what if you need to
228:37 - retrieve multiple rows
228:39 - we can make some adjustments we would
228:42 - want to utilize a loop I'll enclose this
228:45 - line of code within a while loop
228:52 - while there are rows
228:56 - we will display each user's information
229:01 - let's get rid of the where Clause we
229:03 - will return every user
229:05 - you would just need a looping structure
229:07 - of some sort to Loop through each row
229:10 - within your result alright everybody so
229:12 - that's how to query data from a database
229:14 - you write an SQL query you use the query
229:17 - function this returns an object then
229:20 - you'll need to get each row from the
229:22 - object and then you can do that with
229:24 - this function if you need to return more
229:27 - than one row you can stick that within a
229:29 - loop like a while loop and that is how
229:31 - to query data from a mySQL database in
229:34 - PHP
229:37 - hey everybody in today's video we're
229:39 - going to create a registration form in
229:42 - PHP so sit back relax and enjoy the show
229:47 - a few prerequisites that we'll need for
229:50 - this project is that we'll need a table
229:52 - within a database we have created one in
229:55 - Prior topics we have an ID a user a
229:59 - password and a registration date you'll
230:01 - need a working database connection as
230:03 - well which is what we have done here
230:05 - in my index file I have included that
230:08 - PHP code that contains my connection
230:10 - then we will write a second PHP script
230:14 - within this file
230:17 - we are going to close our MySQL
230:19 - connection because if we don't do it now
230:21 - I know that I'm going to forget later so
230:23 - let's close it now
230:25 - and we are closing our connection
230:28 - let's go to our index file
230:31 - generate some HTML
230:33 - we'll create a pair of form tags
230:40 - for the action
230:42 - we're going to set this to a PHP script
230:44 - within quotes just in case I update the
230:47 - name of this file this script will
230:49 - reflect the changes
230:51 - so let's create a PHP script
230:54 - we will get
230:56 - from our server super Global variable
231:00 - phpself
231:02 - accessing the key of PHP self that will
231:05 - give us the name of the file but this is
231:07 - vulnerable to cross-site scripts we
231:09 - should enclose this within a filter
231:11 - HTML special chars is a good one for
231:14 - this situation
231:18 - then we should set the method equal to
231:21 - post because we're creating a
231:22 - registration form
231:25 - let's add a title to our web page let's
231:28 - use an H2 header tag
231:32 - welcome to
231:35 - fake book
231:37 - it's like Facebook but worse we'll have
231:40 - a user type in a username and a password
231:42 - username
231:44 - add a break
231:46 - add a text box
231:50 - input type
231:52 - equals text
231:54 - the name attribute will be username
231:57 - add a break
232:00 - and I'm just saving and reloading
232:02 - everything as I go along
232:03 - we'll need a password
232:09 - create an input tag set the type equal
232:12 - to password
232:15 - the name will be password as well
232:19 - add a break
232:20 - then let's create a submit button
232:23 - that is also an input tag
232:25 - the type will be submit
232:28 - for the name let's set that to be submit
232:30 - as well
232:33 - then for the value maybe register
232:38 - that looks pretty good
232:40 - okay our form is complete
232:43 - let's go to our PHP script
232:46 - the method of our form is set to post
232:49 - we can detect that with an if statement
232:51 - we will access the server super Global
232:54 - variable
232:55 - and check the request method key
233:00 - so type request method
233:03 - is this equal to post has the request
233:06 - method changed to post
233:08 - if a post request is made we should
233:11 - filter both the username and the
233:13 - password it just in case they contain a
233:14 - malicious script
233:16 - so let's assign our username equal to we
233:20 - will filter the input using the filter
233:23 - input function
233:25 - type input post because we're using post
233:29 - the second argument is the attribute
233:31 - name username
233:34 - then a filter type
233:36 - filter
233:38 - sanitize
233:40 - special
233:41 - chars
233:43 - let's copy this line
233:46 - then paste it directly underneath
233:50 - but change username to password
233:55 - do that here too
233:58 - so that should filter any malicious
234:00 - grips
234:01 - once we have a username and a password
234:02 - that's been filtered we'll check if one
234:05 - of these fields is empty
234:08 - we can use an if statement
234:11 - let's check if our username is empty
234:14 - if
234:15 - empty function our username
234:18 - then we will Echo
234:20 - please enter a username
234:25 - else if
234:27 - our password is empty
234:30 - empty function
234:32 - let's check our password
234:36 - please enter a password
234:40 - Let's test that real quick
234:42 - I'll type in a username but not a
234:44 - password please enter a password
234:46 - I won't type in a username but I'll type
234:48 - in a password
234:51 - please enter a username
234:53 - if we type in both
234:58 - nothing happens but that's good
235:01 - if our username isn't missing and our
235:03 - password isn't missing we can execute
235:05 - and else clause
235:07 - in our database we'll want to store a
235:09 - hash of a password let's take our
235:12 - password
235:13 - declare a hash variable
235:15 - then use the password hash function
235:20 - we will pass in our password
235:23 - then an option let's use password
235:25 - default
235:29 - okay now that we have our hash we need
235:31 - to write an SQL query we'll insert the
235:34 - username and the hash of the password
235:37 - we'll store our SQL query within a
235:40 - variable SQL
235:42 - then we will write the query it's going
235:45 - to be an insert statement
235:47 - insert into
235:49 - the name of the table in this case my
235:52 - table is named users
235:55 - list the columns
235:56 - user and password
236:02 - values
236:05 - list the values
236:07 - we will be inserting our username
236:10 - variable
236:11 - as well as our hash
236:13 - the hash variable
236:16 - then to initiate the query we can use
236:18 - the query function
236:20 - mysqli underscore
236:23 - query
236:24 - pass in our connection as the first
236:26 - argument
236:28 - followed by our SQL query
236:31 - once that's complete we should probably
236:33 - let the user know that they registered
236:35 - successfully
236:37 - let's Echo
236:39 - you are now registered
236:44 - for the username I will type SpongeBob
236:49 - will have a password of pineapple one
236:53 - I'll click register
236:55 - you are now registered let's go to our
236:58 - table
236:59 - refresh I might need to zoom out a
237:02 - little bit
237:03 - and here's the first record user ID one
237:06 - username is SpongeBob
237:08 - this is the hash of the password
237:12 - and I have a registration date one
237:14 - important thing I forgot to mention I'm
237:16 - only allowing in this table unique user
237:18 - IDs
237:20 - if I were to register another user as
237:22 - SpongeBob
237:23 - we might have a little problem
237:26 - SpongeBob
237:28 - I'll make up another password fry cook2
237:32 - well we get a fatal error
237:35 - uncaught MySQL exception we have a
237:38 - duplicate entry for SpongeBob
237:40 - we never really talked much about
237:42 - exception handling but one way in which
237:45 - you could handle this exception is that
237:47 - we can copy the exception name
237:50 - place any code that might cause an
237:52 - exception within a try block
237:59 - then catch that exception
238:03 - in this case it was a MySQL exception
238:08 - then let's Echo
238:10 - that username is taken there's still a
238:13 - lot more you can do with exceptions but
238:15 - that's more of an intermediate topic I
238:17 - would say
238:18 - let's type in SpongeBob again
238:21 - brycook 2 and register that username is
238:25 - taken
238:26 - let's create the username Squidward
238:30 - Squidward will have a password of
238:32 - clarinet 2.
238:34 - you are now registered
238:36 - and here's Squidward
238:39 - all right everybody so I thought that
238:40 - would be a fun final project for us to
238:43 - do to wrap up this video I would look at
238:46 - both object oriented programming and
238:48 - exception handling next hey if you made
238:50 - it this far be sure you've smashed that
238:52 - like button leave a random comment down
238:54 - below and subscribe if you'd like to
238:56 - become a fellow bro

Cleaned transcript:

hey everybody it's your bro hope you're doing well and in today's video I'm going to teach you guys everything you need to know to get started working with PHP so sit back relax and enjoy the show if you would like to be notified if I release new courses in the future be sure to subscribe because I kind of release them randomly that is all PHP is a serverside scripting language it's used to build Dynamic web pages it runs on a server not the user's web browser although haters say PHP is dead it's still used on 70 percent of all known websites I don't know that doesn't sound dead to me many developers prefer PHP for its speed Simplicity and flexibility it's a popular choice for small businesses and Freelancers especially since in the news lately you hear about layoffs in the tech industry PHP was released in 1995 it was originally an acronym for personal home page but that was later changed to PHP hypertext preprocessor to reflect the language's evolution in fact PHP was never intended to be a new programming language it grew organically and out of control until it became the Behemoth that it is today fun fact the mascot of PHP is an elephant which is named elephant Ella PHP find I don't know how I would describe the basics of PHP is as follows a browser sends a request to a server PHP on that server processes that request then the server sends HTML back to the browser our server running PHP can even communicate to a database then back to the web browser PHP is most commonly used with relational databases such as MySQL postgres and Oracle PHP can be written alongside with HTML before beginning the series you'll want to have a solid foundation on HTML you will need to know MySQL but that won't be until about video 20. for your web server I recommend zamp zamp is a crossplatform web server solution stack it's basically a software suite it contains an Apache server MySQL and PHP you'll also need some sort of text editor where are you going going to write the code vs code tends to be the most popular nowadays and that's what I use for my own personal projects we'll write our code with vs code then run our code on our xampp server since we can't run it on a web browser I'll show you how we can download both the xampp server and the vs code text editor now we will begin the installation process of a server that we can execute PHP code within go to this URL apachefriends.org like I said before PHP code is executed on a server and returned to a web browser click on one of the relevant download links for your operating system I'm running Windows I will download the windows version okay for me the installation process has started and it's done so let's open it for setup we're going to click next all we really need is MySQL and phpmyadmin it looks like PHP is already selected for us then next remember this file location my folder containing all of my zamp files is located in my C drive next you can select a language I'll pick English next and give it a minute do you want to start the control panel now we might as well and finish here is the control panel for my zamp server we will start the Apache service if everything works the Apache module is highlighted green that means it's working if you ever need to stop this module you can hit the stop button let's start MySQL as well and our MySQL server is working if you see any red text within this log that means there is an error if you run into any problems just check to see what that error was but everything for me is running fine this control panel will run behind the scenes I can close out of it but it's still running which is important hey this is bro from the future I forgot to mention in this video that if you ever shut down your computer you will have to open up the control panel again and restart these Services yeah I forgot to mention that so be sure to do that now that our xampp server is downloaded we will need that vs code text editor I'm assuming that some of you have that downloaded already but if you don't here's how if you need a text editor I recommend Visual Studio code if you're interested in downloading this text editor head to this URL code.visualstudio.com I'm going to click this blue download button select the correct download link for my operating system I'm running Windows I will select this one then we will run this executable except the license agreement yes I did read it that fast you do have the option of selecting a destination location I'll keep it as the default next next I'll create a desktop icon then next and install we might as well launch vs code then finish I have vs code open along with the modern web browser I'm using Google Chrome in the series we're going to create a new file within our zamp folder so let's open a folder remember that file path for the zamp server that's where you're going to look for me that was in my C drive go to xampp under htdocs we're going to create a new folder new folder I'll name this folder website to contain my website stuff then I will select folder within my website folder I'm going to create a new file I will name this file index.php the reason that I'm naming this file index is because that is the default for a home page so we now have a PHP file in vs code If you're receiving a warning that states cannot validate since a PHP installation could not be found we need to validate the executable path of the PHP executable found within our xampp server to do that we're going to find our settings file it's a Json file PHP validate executable path edit in the settings Json file let me maximize this next to PHP validate executable path we need to find the file path to the PHP executable again within my C drive within my zamp folder go to PHP then copy this file path for the executable I'll right click go to properties copy this location close out of this window paste that executable path then add PHP dot EXE then these may have to be forward slashes let's save on Windows you can press Ctrl s to save close out of these settings and that warning goes away I also recommend a few extensions the first extension is PHP intellisense it should be this one it gives you access to a few tools that are useful for PHP development let's install that plugin then look up the live server extension it offers a live reload feature then lastly PHP server it allows you to serve your project with PHP those are the three extensions that I recommend alright we are now ready to get started in a web browser to access your xampp server you can type localhost as the URL this will bring you to the zamp dashboard we would like to access the website folder of the zamp server so let's add localhost slash the name of that folder website our PHP code will execute on the server and be returned to this web browser whatever the output is to write some PHP code Type left angle bracket question mark PHP wherever our PHP code ends type question mark right angle bracket our PHP code will be between these two angle brackets to display a message you can type Echo either single quotes or double quotes then a semicolon at the end a semicolon is kind of like the period at the end of a sentence in English I will type a message I like pizza to save you can go to the top file save or use the shortcut which I'll be using so for me that's Ctrl s if I were to reload this webpage it displays my message I like pizza to make your life a lot easier we can add a live server extension to your web browser currently I'm using Chrome to add a live server extension I'm going to go to settings extensions open Chrome web store then search live server and that should be this one add to Chrome ADD extension let's close out of these tabs I'm going to go to extensions select live server web extension enable live reload we'll need the actual server address as well as your live server address this URL is the actual server address if you're on a Mac it may contain a port number such as 8080. so let's copy this address go to extensions then add the actual server address now we need the live server address to find this we can go to vs code press this go live button there should be a new tab that pops up copy this address that is the live server address then we will paste it within the live server address of this live server web extension then press apply you may need to restart your web browser as well all right that was localhost Slash website you know what I don't just like pizza I love pizza if I were to save this file it should update automatically see within our website it now says I love pizza let's add a second line with Echo Echo double quotes add a semicolon to the end let's add another line it's really good the output is all on one line to add a line break within your set of quotes you can add a Break Tag I love pizza it's really good to add a comment a comment is used as a note for yourself or other Developers all you have to type is double forward slashes then some message this is a comment our comment is not displayed as output it's mostly just used for notes for a multiline comment you would type forward slash asterisk that will begin a multiline comment this is a multiline comment the end of our PHP script is currently green that means it's being included within this multiline comment wherever you need your multiline comment to end you would type asterisk then forward slash the end of the script is blue again and you can see that this multiline comment isn't being displayed as output now the cool thing about PHP files is that they can contain HTML CSS JavaScript and well of course PHP so I will also include some HTML code within this PHP file so in vs code to generate some boilerplate code you can type exclamation point and then tab we now have some HTML markup within our PHP file within the body of our document I'll add maybe a button I'll create a button to order a pizza I should probably precede this button with a line break so there's our button it currently doesn't do anything but that's just a demonstration that you can include more than just PHP code within a PHP file alright everybody so that is an introduction to PHP in the next video we'll discuss variables hey if you're enjoying this video please let me know by Smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro well hello everybody Welcome to lesson two today I'm going to discuss variables in PHP a variable think of it as a reusable container that holds data we give that container a name that is the variable name there's different data types we'll discuss they include but are not limited to Strings integers floats and booleans there are still more than this but these are a few of the basics for beginners let's get started to declare a variable you type a dollar sign then a unique variable name I'm going to store a user's name a unique identifier could be just name I will set this variable name equal to a string of text so place your string of text within a set of double quotes add a semicolon to the end because we always do that why don't you enter in your first name then to display this variable as output we can type our Echo statement then add the variable name so type dollar sign name semicolon let's save and there is our name rendered as HTML the data type of this variable is a string it's a string of text and it can include spaces add a space followed by your last name as I'll put we're displaying my first name and my last name all as one long string of text if you Echo a message directly that is known as a string literal I will display a message such as hello then I want to add this variable name the easiest way to do that is to add a set of curly braces as a placeholder and within the curly braces add your variable name so dollar sign name hello whatever your name is let's add a few more variables how about a food variable what's the food you like I like pizza of course which we learned from the last video hello name I'll display another message Echo you like at our placeholder our variable name food let's save I'm going to disable this page is not in Dutch for some reason our output is all on one line I'm just going to add a line break a low bro code you like pizza what's another example of a string maybe an email let's declare our variable which we will name email add a set of quotes semicolon to the end uh fake at gmail.com so let's add another line break let's Echo your email is at our placeholder for a variable then our variable name email your email is fake gmail.com that's the string data type it's just a series of text your text can contain numbers such as fake123 gmail.com so even though these are numbers we treat them more as characters we can't use these for any sort of math that's where our next data type comes in integers whole integers an example of a whole integer would be somebody's age let's say that I'm 21 age equals 21. I'm not 21 anymore but I like to think that I still am the data contained within this variable age is an integer we don't have any quotes around this number I will Echo my age variable Echo you are our variable age years old let me add a blind break here there you are 21 years old and int is simply a whole integer you know somebody wouldn't be like half a year old like 21.5 and age would be a whole number another example of a whole integer variable could be users let's create a variable named users and there are maybe two users online you wouldn't have half a user users would be a whole number let's Echo the amount of users there are at a placeholder our variable users online there are two online after the variable users let's add the word users there are two users online one more example of a whole integer could be a quantity you wouldn't have half a product you would have a whole product let's create a variable named quantity I'll just set it to three let's Echo you would like to buy are variable quantity items then a line break you would like to buy three items okay those are whole integers let's discuss floats next a float is a floating Point number it's a number that contains a decimal portion these variables are ins integers they're whole numbers an example of a float could be a grade point average maybe my grade point average is 2.5 so let's Echo your GPA is then our GPA variable then line break your GPA is 2.5 I think we're getting the hang of this I'm going to speed things up another float could be a price with a merry concurrency a price contains dollars and cents with the cents being a decimal portion suppose a pizza is 4.99 let's Echo your Pizza is I'll add my price variable your pizza is price line break your pizza is 4.99 I'm going to add the dollar sign before 4.99 but we have a problem PHP is getting confused because we precede our variable names with the dollar sign undefined variable 4.99 if you would like to display a dollar sign as output you need an escape sequence I will precede my dollar sign with a backslash then it works just fine let me add your your pizza is 4.99 so that's another example of a floating Point number a float another could be a tax rate tax rate I'll make up a tax rate like a sales tax rate 5.1 sounds good let's Echo the sales tax rate is tax rate oop I'm forgetting a dollar sign tax rate percent then a line break the sales tax rate is 5.1 percent those are floats floating Point numbers they're numbers that contain a decimal portion integers are whole numbers the last data type we'll cover are booleans booleans are either true or they're false it's like a light switch it can only be on or off so what are some variables that could be considered booleans what if somebody is employed they either are employed or they're not employed equals true I know there could be online is somebody online or offline maybe a user's offline I will set that to be false what about for sale something is for sale or it's not for sale I'll set that to be true now with booleans when you display them as output you don't see true or false rather this is what you see let's Echo online status colon then I'll add my Boolean variable online so online is false online status and then nothing appears the Boolean values when you output them if it's false it doesn't display anything however if online was true that will output a one one means true zero means false however we won't display zero nothing is displayed for false usually with Boolean variables we don't normally display them as output we use them internally within a program we might use these within an if statement or a loop which we'll discuss in the future but at this point you should be aware of the existence of Boolean variables in summary a Boolean variable is either true or false I'm going to get rid of these Echo statements you can mix and match variables when you display output with Echo I will add two variables this time here's a hypothetical situation you own a pizza restaurant and somebody places an online order for a given amount of pizzas you have ordered let's add our variable quantity X then our variable food you have ordered three x Pizza let's add an S to the end to make it plural you have ordered three x pizzas then let's calculate a total what I'm going to do now is declare a variable but I'm not going to assign it a value quite yet we will calculate a total total equals null no means no value We'll add a value later after displaying our message you have ordered quantity X food let's reassign our total variable equal to our quantity times to use multiplication use an asterisk our variable price so now our total should contain a number let's output it Echo your total is let's add our variable total and see what we have ooh I need a line break I'm forgetting about that you have ordered three x pizzas your total is 14.97 So I need to add a dollar sign or you can pick some other unit of currency however PHP is currently confused because we're preceding our placeholder with a dollar sign so I need to use an escape sequence your total is 14.97 now in my program if I were to change the quantity well this total is going to be updated four pizzas is 19.96 if I were to change the price that would also be reflected now the total is 23.96 all right everybody so those are variables they are just a named container for storing reusable data there are a few different data types strings which are a series of text ins which are whole integers floats which are floating Point numbers and booleans which are either true or false in the next topic we'll have more practice with arithmetic and PHP and well those are variables in PHP hello everybody so in today's topic I'm going to be discussing some basic arithmetic and PHP I'll divide this video into different sections first we have arithmetic operators then the increment and decrement operators followed by operator precedence let's begin with arithmetic operators in my example we have three variables X X will equal a number like 10. then we have Y which I'll set to be two then Z we'll assign z a value later I will set that to be null if I would like to add X and Y together then store the result within Z we'll have to use some addition I could write something like this Z equals our variable X Plus our variable y then I will Echo whatever Z is so 10 plus 2 that's 12. so that's addition I'll go through these pretty quick they're fairly straightforward so 10 minus y would be subtraction x minus y store the results in z the result is eight now multiplication that is an asterisk 10 times 2 is 20. division is a forward slash 10 divided by 2 that is 5. to raise a base to a given power you use double asterisks 10 to the power of 2 is 100 10 times 10 is 100. then we have the modulus operator that will give you the remainder of any division X modulus y well 10 divides by 2 evenly the remainder is zero if y was 3 imagine that we have a group of 10 students and they need to break into groups of three there's going to be one student that's remaining so the percent sign the modulus operator gives you the remainder of any division it's really helpful for determining if a number is even or odd you would just say modulus too if the remainder is 1 that number is odd if it's zero then it's even so those are basic arithmetic operators now we'll cover increment and decrement operators I have a variable which we will name counter I will set counter to be 0 to begin with if I need to increment this variable by 1 as if we're counting normally I would have to write an expression such as this our counter equals our counter plus one then let's Echo our counter variable so the result is one this can be cumbersome to write a shortcut you could do if incrementing a variable by one is replace this part of our expression with plus plus take the variable then add plus plus that will increment your variable by one plus plus is the increment operator for decrement you would use minus minus our counter is now at negative one if I were to set our counter to 10 after decrementing it's now nine use plus plus to increment minus minus two decrement you can increment by a given value too if I would like to count by twos let's set counter to be zero instead of plus plus you would write plus equals then some number counter plus equals 2 will increment my variable by two plus equals three would be three on the flip side to decrement by a given value you would use minus equal some number so zero minus equals two will decrement my variable by two minus equals three would be well three so that is the increment and decrement operators lastly we have operator precedence given a complex arithmetic expression such as this example in which order do we solve each part of this expression we would begin with parentheses beginning from left to right if there's anything within parentheses we would solve that first for example with my expression let's Echo whatever the total currently is so the total for me is 2.999 beginning from left to right solve anything within parentheses first we currently don't have any parentheses then comes any exponents so beginning from left to right look for any exponents we do have five to the power of six let's see what that is five to the power of five do it a third time fourth time fifth time sixth time fifteen thousand six hundred twenty five beginning from left to right solve any multiplication division then modulus modulo is that the right term so we have addition subtraction here we go we have multiplication three times four that's twelve then we have division 12 divided by fifteen thousand six hundred twenty five is point zero zero zero seven six eight yeah then lastly addition and subtraction we have some addition one plus two is three three minus this number point zero zero zero seven six eight is our result 2.99232 that's operator precedence if you have a complex equation solve anything within parentheses first then any exponents multiplication division modulus then lastly addition and subtraction all right everybody in conclusion we have discussed arithmetic operators addition subtraction multiplication division exponents and modulus incremented decrement operators you can take a variable add plus plus to increment it or minus minus two decrement it then lastly operator precedence and well everybody that is basic arithmetic in PHP hey again everybody it's me and in today's topic I'm going to explain the get and post variables in PHP get and post are both special variables technically they're super Global variables but that's a topic for another day just think of them as special variables for now these variables are used to collect data from an HTML form if you have an opening form tag in HTML you can use the action attribute then send some data to some PHP file whatever you list here there's two different methods get and post they each have their own advantages and disadvantages which we'll discuss later for the time being before our PHP script let's create an HTML document in vs code to do that you would type exclamation point then hit tab then be sure to follow our HTML document with a PHP script then I'm going to open up a web browser in our HTML document we're going to create a form a user is going to type in a username a password then to log in they're going to hit a login button let's create that we'll need a label to begin with we'll need to close the label I'll add a line break the label will say user name then we'll add a text box use the input tag it's a selfclosing tag add a line break within the input tag we will set the type to equal text because it's a text box then we will set the name to be user name let's copy our label and our text box paste these two lines again but change username to password this time the type will be password the name will be password so you can type something into your username if you were to type within the password box it should be hidden which is good then lastly We'll add a button we'll use a selfclosing input tag the type will be submit it's a submit button the value is the text on the button let's set that to be a log in so we have a button but it currently doesn't do anything we will enclose all of our elements within a form tag be sure to open it then close it I will indent all of this within my opening form tag I will set the action attribute to be a file in which I want to send this data to I will send this data to the PHP script of the same file so my file is index.php I will list that here index.php if you had a separate PHP file you would just change the file name to reflect that or the file path then we will set the method attribute to be either get or post we'll begin with get so let's type in a username make up a password and this still doesn't do anything within our PHP script we're going to utilize the get variable because we're using the get method let's Echo then type dollar sign underscore the word get so get is a special type of variable it can hold more than one value if you're familiar with arrays it's technically an array within get we have both a username and a password I would like just the username to get just the username after the get variable add a set of square brackets then within a set of quotes type in the name of the information you're getting I would like the username let's see what happens I'm going to save type in a username make up a password login and there's my username now let's do this with the password as well Echo get password so let's refresh everything I'll make up a username type in a password there's my username there's my password I'm going to put my password on a new line I need a line break there's a couple different ways in which we can do this you can use some string concatenation one way to do that is to type dot followed by a line break within quotes I'll do that for the second line as well so that would work my preferred method is to do something like this I'm going to surround my get variable with quotes then add a set of curly braces around our get variable then add a line break bro make up a password log in there we are if using the get variable and you need to add a line break this is my preferred way although there's more than one way use whatever suits you now with get we have one problem if we were to take a look at the URL of this document when using the get method of a form any data sent over to a PHP form is appended to the URL username equals bro and password equals pizza123 there's no security because we're appending some sensitive information such as a password to the URL that's where post comes in I will change the method to post let's see what happens I'll type in my first name make up a password and login so we have an undefined array key if you're using the post method let's change get to be post make up a username type in a password log in there's my username there's my password and if I were to take a look at the URL my sensitive data isn't appended to the URL the post method is more secure than get but they each have their own advantages and disadvantages with the get method data is appended to the URL it's not secure I wouldn't pass any like usernames or passwords using a get method there's a character limit however with the get method bookmarking a page with values as possible get requests can be cached get tends to be better for a search page now with post data is packaged inside the body of the HTTP request it's more secure than get there's no data limit Pages involving a post request can't be bookmarked and the requests are not cached post tends to be better for submitting credentials like a username and a password any sensitive information so if security matters use post if it doesn't get might be better now let's cover an exercise let's clear our PHP form then within the body of our document we will create an order page for a restaurant we will Begin by creating a form we'll need a pair of form tags then be sure to close it within my opening form tag I will set the action attribute to be a file or a file location I will send this data to my index.php file for the method let's use post for my order form let's create a text box for a quantity I'll create a label I'll close it right away let's change the text to quantity then I'll add a line break we'll add a text box input the type is text the name will be quantity we'll use the input tag set the type attribute to B submit then value equals how about total we're calculating a total now within my PHP script let's say we have a food item I'll create a variable item equals make up some food like pizza we'll need a price price equals make up a price 5.99 sounds good then a quantity whatever the user is going to type in that is found within the post variable dollar sign underscore post add a set of square brackets semicolon but then the square brackets I would like the quantity now this is a personal choice what I like to do is that if I'm accessing the get or post super variable I like to store the result within a local variable so I'm going to create a quantity variable quantity equals whatever our quantity is from our HTML form I find caching one of these values within a local variable more convenient to work with so let's Echo a message like an order total you have ordered let's use our quantity to T X what's our item pizzas item I'll add s because it may be plural then we'll calculate a total Echo you know what let's create a total variable as well total I'll set that to be an old because we'll assign a value later total equals quantity times variable price then we'll Echo your total is add a placeholder our variable total then I will precede our placeholder with the dollar sign but we need to use that escape sequence all right let's save everything enter in a quantity I want three pizzas oh we need a line break as well you have ordered three x pizzas your total is 17.97 and if I were to look at the URL we're using the post method so our quantity is not going to be appended to the URL if I were to use get let's replace post with get do that here as well I'm going to type in three pizzas again hit total I can change the url to reflect a different quantity like maybe I want 30 pizzas then resubmit you have ordered 30 pizzas the grand total is 179.70 that's one of the reasons why post is more secure than get you can change the url to reflect a different value alright everybody so that is both the get and post variables in PHP hey if you're enjoying my Series so far let me know by Smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro hey everybody in today's topic I'm going to explain a few useful math related functions in PHP that you might be interested in we'll need an HTML document followed by a PHP script we will enter in some user input via an HTML form so let's create a form in our HTML document open it close it we will set the action equal to B our index page index.php for the method let's use post let's create a label label close it the label will be X we'll have a user enter in a number then let's add an input tag it's a selfclosing tag the type will be text the name will be X then we need a submit button input type equals submit for the value let's say total it's a total button that's good enough for now if I'm using the post super Global variable let's say we need X Type post add a set of square brackets we would like the value of x I will cache this value within a local variable within my PHP script for convenience variable x equals whatever value for x that we receive just so that we're sure that everything's working fine let's Echo whatever X's Echo X So currently there's nothing in there let's type three hit total and there's our number X which is three so here's a few math related functions you may be interested in the first is the absolute value function let's say we have a total variable as well I'll declare this variable but not assign it quite yet I'll set that to be null then later on in my program we can assign total of value total equals to find the absolute value of a number type abs for absolute value followed by a set of parentheses semicolon whatever number or variable you put within this function ABS it will return the absolute value of that number we can either put a number in here or a variable let's put an X so variable X then I will Echo our total so I'm going to save I'll type in negative four this should return positive four which it does negative 100.123 100.123 that is the absolute value function let's cover a few more we have the round function we can round a number let's assign total equal to use the round function then we will pass in our variable X so let's save again refresh that 3.14 rounded is 3. 3.99 would be 4. now to always round down you can use the floor function so let's copy this line replace round with floor we will always round down so 3.99 rounded is 3. 4.99 rounded down is 4. there's also seal meaning sealing which will always round up replace floor with seal let's save refresh everything 3.14 rounded up is 4 4.14 rounded up is 5. for this next example we'll need another number let's copy our label and our text box paste it replace x with Y here and here we'll need two numbers this time let's get whatever Y is so y equals within the post super Global variable we are looking for y we can use the power function to raise a base to a given power let's take our total variable equals power we'll need two numbers or two variables what is X raised to the power of Y so what is 2 to the power of 3. that would be eight two to the power of four is sixteen what about 3 to the power of 3 that is 27 3 to the power of four that is 81. that is the power function you can raise a base to a given power then we have square root I'm going to put that here total equals sqrt add a set of parentheses let's find the square root of x so we don't need Y in this case what is the square root of 100 that is 10. 144 that is 12. that's the square root function we will need three variables let's create another label and a text box the third number will be Z be sure to change the name too then we will create one more variable variable Z post Z then we have the max function total equals Max whatever values or variables you place within the max function the max function will give you the greatest value what is the maximum number between variables X y and z so let's save I'll refresh that one two three the highest number is three Thirty twenty ten the highest number is 30. then we do have the Min function which will give you the minimum what is the minimum number between 10 20 30. the minimum is 10. 3 2 1. the minimum is one that's the Min function the next function is an unusual one it is the pi function total equals Pi function so add a set of parentheses this will print 3.14 and the remaining digits of pi if you ever need Pi you can use the pi function the next one is pretty useful it is the random function total equals Rand this will give you a completely random number I think up to just over 2 billion within the parentheses of the Rand function you can list two numbers for a minimum and a maximum if you're rolling a sixsided dice the minimum would be one the maximum would be six so now we're generating a random number between one and six we can either raise the minimum or raise the maximum for a random number between 1 and 100 within the Rand function the first digit is one the second digit is one hundred so we have 10 85 17 84. if I were to raise the minimum let's say 90 we'll generate a random number between 90 and 100. maybe you could use this for a game now we're going to go over an exercise for this exercise we will have a user enter in a radius the radius of a circle using PHP we will calculate what the circumference would be the area and the volume if that radius is for a sphere so we will need to accept some user input we'll do that with an HTML form so within our HTML document let's create a form then close it the action will equal our index PHP file the method will be post we will need a label close it the label will be radius let's add a text box we need a selfclosing input tag the type will be text the name will be radius because we're accepting a radius then a submit button input type equals submit for the value let's say calculate that's all we need within our PHP script let's create a local radius variable we will get the value from this text box via the post super Global variable let's access the post variable we are looking for the radius and now we have a radius we'll declare a circumference variable I think that's how to spell circumference that will be null to calculate the circumference of a circle we can follow this formula circumference equals 2 times Pi Pi we can use the pi function times our variable radius then let's Echo let's say circumference equals add a placeholder then insert our variable circumference let's say that this is in centimeters then I'll add a line break maybe the radius is five I'll calculate that the circumference is 31.4 and we have a lot of digits after there's one thing I'm going to change real quick I'm going to add a line break after our form for the radius let's say it's 10. I'm going to hit calculate here's our circumference 62.83 and some change centimeters we can use the round function to round to a given digit I would like to round to the second digit after the decimal before we display our output let's reassign circumference equal to use the round function then pass in our circumference but I'm going to make one change normally the round function will round a number to the nearest whole integer to round to a given digit add a comma then that digit place let's round to the second digit so our circumference is 62.83 centimeters let's also calculate the area and the volume we'll need a area variable I'll set that to be null to calculate the area let's set area equal to we'll need the pi function times our radius to the power of 2 we can use the power function enter in our radius to the power of 2. then we can round our area equals round within the round function enter in your area we would like to round to the second digit after the decimal then we will display the area area equals our area variable I think technically that should be centimeter squared so let's save I'll enter in a new radius okay so if our radius is 15 this time I'll calculate that with the radius of 15 their circumference is 94.25 centimeters the area is 706.86 centimeter squared now we'll calculate volume if the radius is for a sphere volume equals no volume equals here's the formula 4 divided by 3 times pi function times our radius to the power of 3 we can use the power function we are raising R radius to the power of three then we will take our volume and round to two decimal places volume comma 2. then we will display the result with Echo volume equals add a placeholder our volume centimeters I think that's cubed technically if our radius is 5 their circumference is 31.42 the area is 78.54 and the volume is 523.60 centimeters cubed all right everybody well I thought that would be some good practice with some math functions now we're a little more comfortable using them if you would like a copy of this code I'll post it in the comments section down below and well those are some useful math related functions in PHP hey welcome back everybody in today's video I'm going to discuss if statements in PHP with an if statement we have a condition if some condition is true we can do something we can run some code however if that condition is false then we don't do it here's a situation suppose we have a website but you have to be 18 years or older to enter we can write a program to check somebody's age let's say we have a variable age age will equal make up a number 21. to write a if statement I would type if then I'll need a condition within parentheses what are we checking let's check to see if our variable age is greater than or equal to 18 then after the set of parentheses add a set of curly braces if this condition is true we can execute some code if it's false we skip over this code so if our age is greater than or equal to 18 let's Echo you may enter this site so I'm going to save run this program you may enter the site what if this condition was false maybe my age is 15. in our if statement this condition is false that means we do not execute this code we skip over it as if it never even happened if you would rather do some other code at the end of your if statement you can add else then add a set of curly braces if this condition is false then skip over this code and execute the else statement instead let's Echo you must be 18 plus 2 enter let's save and here's our other message you must be 18 plus to enter if I were to change age to 21 something that's above or equal to 18 well we execute the first statement this portion of our if statement you may enter the site if this is true do this if not do this instead between if and else you can add else if else if add a set of parentheses and a set of curly braces if our condition is false we would then check any else if statements before resorting to the else statement let's also check if age is equal to zero double equals is the comparison operator you could check to see if two values are equal you don't want to use a single equal sign because that is the assignment operator PHP thinks you're assigning age to be zero use double equals for comparison if somebody's age is zero then let's Echo a different message you were just born I will set variable age to be zero save you were just born this condition was false we skip it this condition was true so we execute it we never reached the else statement however somebody types in negative one well then we resort to the else statement because both of these conditions are false let's change our else if statement let's say else if age is less than or equal to zero let's change this message that wasn't a valid age negative one is not a valid age just to be funny what if we said you were too old too old to enter this site I'll add another else if statement just to demonstrate that we can add multiple else if statements else if age is greater than or equal to 100. then we will Echo you are too old to enter this site if I were to set age to be 101 the result states that you may enter this site the reason that we're executing this if statement and not this else if statement is because starting from the top we check the if statement first if it's false we continue down the line until we reach else age is 101 since this statement is technically true we would execute this code then skip everything else the order of your if and else if statements does matter I'm going to move this section of code to the beginning and make it the if statement first let's check to see if somebody's age is greater than or equal to 100 I will change this section to be else if and that should work you are too old to enter the site you do need to pay attention to the order of your conditions I'll give you another example if statements also work with Boolean variables and values we have a variable adult adult will equal a Boolean value of either true or false let's set that to be true with your condition you can check to see if your variable is equal use double equals for comparison true or false if adult is equal to true then we will Echo you may enter this site adult is true you may enter the site if adult is false then nothing happens so let's add else Echo you must be an adult to enter you must be an adult to enter now there is a shorthand if you're using the comparison operator followed by a Boolean value you could just write the Boolean variable itself that is also valid and that's my preferred way of using Boolean variables within a condition if adult do something so let's set adult to be true you may enter the site if it's false you must be an adult to enter so that is the second example let's go over and exercise we will create a program to calculate somebody's pay including overtime we will need three variables hours I'll set that to be 40 to begin with they're working fulltime a rate as in a rate of pay this person is making fifteen dollars per hour and then a weekly pay I will set that to be null to begin with depending on somebody's hours they may or may not make overtime pay or if they work zero hours they don't receive any pay this week first let's calculate their weekly pay if they work 40 hours or less if hours is less than or equal to 40 then we will calculate our weekly pay with this formula it's only hours times their rate rate of pay then at the end let's Echo you made at our placeholder this week within our placeholder let's display the weekly pay variable pick your unit of currency I'll use American dollars I'll need to add an escape sequence 40 times 15 I think that's 600. you made six hundred dollars this week if we worked 20 hours then we make half of that three hundred dollars what if somebody doesn't work this week you made zero dollars this week what if somebody enters in a negative amount of hours like negative one well somebody made negative money this week let's write a condition to prevent that let's add an if statement then change this statement to be an else if statement if somebody is ours are less than or equal to zero then let's set weekly pay to be zero just in case somebody enters in a negative amount of hours because you can't work a negative amount even if somebody enters in a negative number like negative one or negative 10 our message still displays zero which is what we want lastly let's calculate overtime pay we'll do this within an else statement here's the formula let's set weekly pay equal to the first 40 hours are going to be at the standard rate let's take our rate times 40. then we will add within a set of parentheses we need to calculate the overtime pay maybe an employee Works 50 hours this week let's take hours minus 40. I'm going to add another set of parentheses around this multiplied by rate times 1.5 because with overtime pay at least in the United States I believe you make one and a half times your pay your hourly rate of pay if an employee Works 50 hours this week their new weekly pay will be 825 dollars that is an exercise involving if statements and those are if statements in PHP Hello friends it's me again and in today's topic I'm going to explain logical operators in PHP there's three and or not they're used to combine conditional statements for example if we have a if statement we check a condition using these logical operators we can check more than one condition if using and if that were or we can check if at least one condition is true with the case with not we can reverse a condition if it's true it's now false if it's false it's now true more on that later we can make our conditional statements a little more sophisticated with logical operators here's an example we have a temperature we would like to check to see if our temperature Falls within a certain range let's say we have variable temp short for temperature this will be in Celsius because most of my viewers are from outside of the United States in the United States we use Fahrenheit but use whatever works for you let's say the temperature is 25 degrees Celsius let's write an if statement to check to see if our temperature Falls within a certain range if temp is greater than or equal to zero we'll start with one condition then let's Echo the weather is good our temp is 25 25 degrees Celsius the weather is good what if my temperature was 100 degrees Celsius well the weather is obviously not good right in fact the weather is horrible to make sure our temperature isn't above a certain number we can use the and logical operator which is a double ampersand if our temperature is equal to or above zero and our temperature is less than or equal to 30 30 degrees Celsius then the weather is good this statement is true but this one is false with the and logical operator both conditions must be true in order for us to execute this statement otherwise let's add an else Clause else Echo the weather is bad so 100 degrees Celsius that is not a good temperature the weather is bad what about negative 10 negative 10 degrees Celsius well the weather is still bad 15. the weather is good 15 Falls within our range 15 is greater than or equal to zero and 15 is less than or equal to 30. Now using the orological operator which is two vertical bars at least one of these conditions needs to be true if we're writing the same program using the orological operator this is what I would change let's say if temp is less than zero or temp is greater than 30 then the weather is bad else the weather is good let's change temp to negative 1 million well the weather is bad if our temperature was positive 1 million I believe that's actually a hundred million uh well the weather is obviously bad as well if our temperature is 25 then the weather is good with our temperature being this high this statement is false but this one is true using the orological operator only one of these conditions needs to be true that's another way in which you can write conditions you could use the orological operator use whatever is best for your situation okay let's set temp to something reasonable like 15. all right now I'm going to discuss the not logical operator let's add a variable cloudy this will be a Boolean variable it's either true or false let's set that to be true the temperature is 15 degrees Celsius and the sky is cloudy that's set to true using an if statement if we're checking a Boolean variable we could write cloudy is equal to true but if we're working with booleans we can just short this to if the Boolean variable name that's valid if it's cloudy let's Echo it's it's cloudy else Echo it's sunny let me add one line break line break line break and I think we're good the weather is good it's cloudy using the not to logical operator we can precede our condition with an exclamation point if this condition is true the notchological operator will reverse it essentially so if not cloudy that means it's sunny else it's cloudy so it's cloudy I will change cloudy to be false it's now sunny that's basically the not to logical operator it will reverse the state of your condition meaning you can check to see if something is not true let's go over some practice in this example let's say that your country has elections let's assume that it's a democratic nation in many countries you have to be 18 years or older to vote right I'm assuming maybe we have variable age set the sequel to whatever your age is let's say that I'm 25 this time and we have a Boolean variable named citizen and I will set that to be true we're going to use the and logical operator to see if we can vote so with an if statement if variable age is greater than or equal to 18. I'm in the United States in order to vote you have to be at least 18 years old if we're at least 18 years old and we're a U.S citizen citizen then let's Echo you can vote in my example I'm 25 I'm a citizen both these conditions are true that means I can vote else if one of these statements wasn't true then let's Echo you cannot vote let's say that I am 12 12 years old well I cannot vote I'm too young or if I was not a citizen citizen is false well I cannot vote either another way in which you could write this program is you could say this is a little more complex by the way if age is not greater than or equal to 18 or you are not a citizen then you cannot vote else you can vote I'm 18 but I'm not a citizen I cannot vote I'm 18 but I am a citizen you can vote I would probably stick with the previous example just because it's easier to read but this is another way in which we can use the notch logical operator and the or logical operator let's go over a last example just so that we really get the hang of this we're going to sell movie tickets we will have some Boolean variables we'll have a child variable I will set that to be false to begin with a senior I will set that to be false then a ticket price which I will set to be null to begin with if somebody's a child or a senior they get a discount if child or senior then the ticket price will be uh maybe ten dollars else ticket equals fifteen dollars that's quite a steep discount then at the end of our program let's Echo the ticket price is I'll add a placeholder add variable ticket pick a unit of currency I'll pick American dollars child is set to false we're not a child that's set to false we're not a senior that's set to false the ticket price is 15 the standard this is false or this is false that means we don't execute the statement we move on to the else statement if we were a child let's set that to be true then we get that discount the ticket price is ten dollars if we set child to be false but we're a senior I'll set that to be true we still get that discount all right everybody point being with logical operators there's many different ways in which we can check conditions there's and or not use whatever is best for your situation typically there's more than one way in which you can check a condition well everybody those are logical operators in PHP hey what's going on everybody so in today's video I need to explain switch statements a switch is a replacement to using many lsif statements switches are more efficient and take less code to write compared to using many else if statements here is an example I have a letter grade a student's grade can be a b c d f or if their grade is invalid if we have an else statement that states that letter grade is not valid depending on what our grade is we will execute one of many statements if our grade is a then we will Echo you did great if it's B you did good see you did okay d you did poorly F you failed if we have a grade that isn't valid such as Pizza well that's not a grade Pizza is not a valid grade using many else if statements is fairly inefficient and it's a lot to write to I would like to propose a better solution and that is by using a switch which is the topic of this video to create a switch we will type switch add a set of parentheses then add a set of curly braces within the parentheses of the switch what would we like to examine let's examine our letter grade then we'll probably want to change our letter grade to something valid like a within the switch we're going to create cases one case for each match that we're looking up type case what are we comparing our grade to let's compare our grid to the letter A then add a colon if our grade matches this case we'll write some code what do we want to do let's Echo you did great after all of your code add break to break out of the switch this is the first case let's copy this case underneath it after the break statement let's paste it then we will have case b you did good let's copy this again KC you did okay then d you did poorly case f U failed our grade is currently in a you did great Let's test out case b you did good see you did okay d you did poorly F you failed what if we have a grade that isn't valid like pizza again well nothing happens there were no matching cases we simply exit the switch if none of these cases match you can add a default case type default I can't spell it right today if there are no matching cases what are we gonna do let's Echo some sort of message I'll add a placeholder our grade variable is not valid so Pizza is obviously not a letter grade Pizza is not valid there were no matching cases therefore we resulted to the default case the default case is kind of like the else statement now the reason that you have a break in here let me demonstrate is because you will break out of the switch what if we were missing these break statements temporarily I'm going to remove them let's say that our grade is B you did good you did okay you did poorly you failed B is not valid you need the break statement to break out of the switch wherever there's a match we will execute the code followed underneath then any subsequent code followed after so be sure to include those break statements unless you want to execute every statement afterwards in some cases that could be helpful but not for this one let's go over another example we're going to get the current date I'll create variable date to get the current date we will use the date function within the parentheses of the date function within a set of quotes Type L just to be sure it's working fine let's Echo our date for testing L will give you the day of the week currently for me it's Monday so let's place our date within a switch we'll create a switch parentheses curly braces we are examining our date then we'll need a case case Monday if today is Monday let's Echo I hate Mondays then break so it's Monday I will Echo I hate Mondays so let's copy this case paste it change Monday to Tuesday what can we say for Tuesday it is Taco Tuesday So currently for me it's still Monday just for testing purposes I am going to change our date after we get the current date I just want to be sure that our switch is working what if our date was Tuesday it is Taco Tuesday what if it's Wednesday the work week is half over let's change our case to be Wednesday the work week is half over Thursday it's almost the weekend change our date to be Thursday it's almost the weekend Friday the weekend is here the weekend is here Saturday time to party time to party then Sunday time to let's relax on Sunday time to relax it's optional but we could add a default case if there are no matching cases let's Echo our variable date is not a day let's change our date to something like pizza well Pizza is not a day so I'll remove this line depending on what day you're executing this code it will display a custom message depending on the day of the week like I said today for me it's Monday so my message prints I hate Mondays all right everybody in conclusion a switch is a replacement to using many lcip statements they're more efficient and take less code to write I would recommend a switch if you're checking some value or variable many times over and well everybody those are switches in PHP hey everybody in today's video I need to explain for Loops a for Loop will repeat some code a certain amount of times for example I will display the word hello hello then I will add a line break I can write code once then repeat it however many times that I want with the for Loop to create a for Loop Type 4 parentheses curly braces then place your code you want to be repeated Within These set of curly braces I would like to display the word hello a certain amount of times that's the nice thing about for Loops you can write code once then repeat it but we'll need to calculate how many times we're going to repeat it within the parentheses of the for Loop we can write up to three optional statements each separated with a semicolon the first statement is that we can create a counter it's as if we're assigning a variable a common naming convention for a counter is variable I I meaning index I can set this equal to zero to begin with the next statement is a stopping condition when this condition is no longer true we escape the for loop I would like to display the word hello five times my condition will be variable I is less than five once I is no longer less than 5 we will escape the third optional statement we can use to increment or decrement our counter after each iteration I will increment I by One I plus plus this code will be repeated five times here we are one two three four five instead of displaying the word hello let's display our index I then add a line break I currently holds our counter we set the counter to begin at zero and it will stop when I reaches five zero one two three four maybe we would like to start at one and continue as long as I is less than or equal to five then we're no longer beginning at zero we could change this condition to be ten we will count up to ten or one hundred we will count up to one hundred when you increment your variable you can increment by a different number like two I plus equals two we are now counting up by twos one three five seven if we change our counter to be two we'll start at two then count up by two or maybe we can count up by threes two five eight eleven now to decrement let's begin at 10 our counter will be at ten we'll continue this for loop as long as I is greater than zero then to decrement take I then add minus minus so now we begin at 10 and decrement by one during each iteration or we can even decrement by twos I minus equals two so we begin at ten and we're decrementing by twos so that's a for Loop you repeat some code a certain amount of times there are three optional statements within the for Loop a counter we can declare a condition then we can increment our counter by a certain amount or decrement let's go over an exercise we will create an HTML form in vs code hit exclamation point tab that will generate some HTML code we'll create a form the opening form tag will have an action attribute of our PHP page index.php the method let's assign to post we'll create a label label close it enter a number two count two we will add a text box input type the type is text the name will be counter then a submit button input type equals submit for the value let's say start the user is going to type in a number to count up to we'll need to get that value from the text box let's say variable counter we will access the post super Global variable we would like our counter then we'll create a for Loop four parentheses curly braces we'll need our index for our for Loop so variable I equals zero to begin with we're counting up our condition will be variable I is less than or equal to our counter then we will increment variable I by 1 during each iteration during each iteration let's Echo whatever variable I is then add a line break let's see what happens let's refresh this let's count up to ten I'll enter 10 Press Start then we count up to 10. if you would like to exclude zero we can set I to be one there we are we have counted up to ten or I could pick a different number like 100. Press Start we now count up to 100. now what we're going to do is count down from a number enter a number to count down from we're going to change our for Loop a little bit we will set our counter of I to equal the number that we receive our counter variable will continue as long as I is greater than zero then we will decrement I so let's save you might have to refresh let's count down from 10 Press Start and here we are we have started at 10 and we have counted down to one or I can enter a different number like 100 so we start at 100 then count down to one so that's a for Loop everybody you can repeat some code a certain amount of times you only have to write it once then repeat it however many times that you need and well everybody those are four Loops in PHP hey everybody it's me again today I'm going to explain while Loops in PHP with the while loop you can do some code infinitely while some condition remains true it's very similar to a for Loop but with the for Loop we intend to do some code a limited amount of times with the while loop it may be infinite there's a lot of overlap where you can use either a for Loop or a while loop here's how to create one type while parentheses curly braces within the parentheses we can set a condition let's say we have a counter variable we will count up to ten keep doing this code while counter is less than or equal to 10. another difference between a for Loop and a while loop is that with the while loop we don't have three statements we just have one with the for Loop you can create an index a condition and there's another statement to increment or decrement we don't have that with the while loop so we'll have to set that manually outside of the while loop let's say we have a counter counter will equal zero while counter is less than or equal to 10. let's increment our counter by one counter plus plus then let's Echo our counter variable then add a break so simple enough that should be less than 10. there we escape the while loop when this condition is no longer true it's very similar to a for Loop honestly in this situation I would probably stick with the for Loop because you're still doing something a limited amount of times while Loops tend to be better if you need to do something possibly infinitely let's say we have a stopwatch program we don't know when the user is going to stop the stopwatch we would need to keep on updating our stopwatch until the user presses stop so we could write a program like this instead suppose we have a variable seconds to keep track of the amount of seconds then a Boolean variable named running if our stopwatch is no longer running if somebody hits the stop button we will set that to be false our condition could be a while running is equal to true if this variable is a Boolean we can just shorten this to while running while our stopwatch is running update the time or something I haven't talked about the sleep function yet but we can make our program sleep for a given amount of seconds so let's pretend that we wait one second then after waiting one second let's increment seconds by one then Echo the current amount of seconds and I will add a break I wouldn't recommend running this code we're going to be stuck in what is known as an infinite loop our program has no way of stopping and it might crash your computer you can see that the time just goes on and on forever so let's stop that my computer might crash this code is going to run forever because we have no way of escaping this Loop if you have a while loop you'll want some way to break out of the while loop from inside of it I'm going to create a stop button foreign I now have a stop button let's stop that before it crashes now to escape out of this loop I could write some code like this I'm going to write an if statement I haven't discussed the is set function yet but we can check to see if a button is clicked or not I'm going to access our post variable and I have created a stop button with the name of stop if I click the stop button then let's set running to be false then we can escape out of the while loop else if the user doesn't press the stop button then let's Wait Another Second and update our timer so this program is going to continue until I hit the stop button and it broke there it stopped what you should remember from this is that a while loop will do some code possibly forever while some condition is true you would need some way of making your condition false in this case I just set up a button to stop the timer there is a lot of overlap where you can use either a for Loop or a while loop if you need to do something a limited amount of times use a for Loop if you need to do something a possibly infinite amount of times a while loop might be better and well everybody those are while Loops in PHP why hello again everybody today I need to explain a raise in PHP think of an array as a special type of variable which can hold more than one value at a time in my example I have four different variables food one food two food three food four we have an apple orange banana coconut it can be very inconvenient to have to work with so many variables it would be really nice if I could store all of these values in one place which is what we can do with an array let's delete these variables we will create a special type of variable which is an array to create an array you'll need a variable name to begin with let's say Foods Foods equals to create an array type array add a set of parentheses then the semicolon at the end this is a function which we'll discuss more in the future whatever values you're going to squeeze into this variable just place them within the parentheses we had four variables Apple orange banana coconut separate all of your values with the comma there we go we now have what appears to be a variable but it's technically an array it stores more than one value in one convenient place if I was to Echo my array which I named Foods this is what happens warning a rate to string conversion we can't directly print this array instead you would need to access one of the elements an element is a given position within an array currently we have four elements because there's four values to access one of the elements found within your array after the array name add a set of square brackets then an element number with the raise the first element has an index of zero I would like the first element within my array so the element is going to be zero that will display Apple which is the first element in my array let's do this with the others for practice let's Echo Foods at index one I should probably add a line break so let me do some string concatenation real quick I'll add a line break do that here as well we have apple Orange let's do this with the others Foods at index two is banana Foods at index three that would be coconut what if I attempt to access an element that doesn't exist we only have four elements if I access our array Foods at index four well then we have a warning undefined array key for that is something you do need to pay attention to if you need to display all of the elements of an array there's an easier way of doing this instead of echoing every single element line by line we can use a for each Loop four each at a set of parentheses then a set of curly braces for each take your array Foods as now what we need is a temporary name for each element within the array my personal naming convention if I'm accessing a single element within an array I like to take the array name and set the variable name to be the singular version if we're working with Foods well each element is considered a food for every food in foods if we were working with different values let's say cars my for each Loop may be for every car in Cars but that's just my naming convention So within this for each loop I will Echo each food then I'll add a break line okay let's see what happens here are all the elements in our array to display all of the elements in your array a convenient way to do so is to use a for each Loop there are a lot of useful utilities related to arrays to change one of the elements of an array type the name of the array then we'll list an index number I would like to change the first element in this array to be a pineapple type the name of the array followed by a set of square brackets the first element in my array is zero I will set that to equal a new value Foods at index 0 is now a pineapple pineapple orange banana coconut there is a push function which will add a new element to the end of your array array underscore push function within the set of parentheses type in the name of your array comma then a value at the end of my array I would like to add a pineapple Apple orange banana coconut pineapple you can add more than one value too let's add a kiwi as well Apple orange banana coconut pineapple kiwi that is the array push function you can add one or more elements to the end of your array after you create one then we have the pop function array underscore pop pup will remove the last element in your array place your array name within the set of parentheses array pop Foods now we have apple orange banana our last element coconut was removed then we have shift array underscore shift shift will remove the first element in your array then shift all of the elements over by one within the set of parentheses list your array name we now have an orange banana coconut our Apple was removed it was shifted shifted out of the array we can reverse an array array underscore reverse place your array name within the set of parentheses now this isn't going to work I'll explain why our array is still in the same order Apple orange banana coconut this function returns a new array we can assign the result to a new array such as reversed Foods equals the array reverse function then I could display this our array is now reversed coconut banana orange Apple otherwise the array that's returned we can reassign it to the same array which is what I'll do that does the same thing if you would rather reuse the same array that is how to reverse an array we can count the elements in an array I will Echo use the count function place your array name within the function let me cut this real quick we have four elements within our array use the count function to get the current number of elements within your array all right everybody so that's an array think of it as a special type of variable that can hold more than one value at a time it's a convenient way to store multiple values that are similar or related in place of creating many different variables it's a lot easier to work with an array than several variables and well everybody those are arrays in PHP hey welcome back everybody today I'm going to explain associative arrays it's an array where each element is a key value pair for example we can make an array where each element is a country that's the key and the value is a capital A few other examples could be an ID and a username or an item and a price these would be examples of key value pairs here's an example let's start with a basic array I will create an array of capitals capitals equals we will use the array function we'll begin with keys each key needs to be unique I'll think of four examples we have the USA Japan South Korea then maybe India right now capitals is an array it's not an associative array to change this array into an associative array after each key add an arrow for readability I'm going to place each element on a new line it's not necessary but it's a lot easier for me to read following the arrow we will give each key a value the value in this example will be each country's respective Capital the capital of the USA is Washington DC Japan that's Kyoto South Korea that is Seoul India new Delhi we now have an associative array it's made of key value pairs if you need one of the values at a given key we would then access our associative array capitals at index then place your key within the set of square brackets let's find the capital of the USA then let's Echo whatever the result is and the result is Washington DC if I change the key to Japan we will be given the value at this key of Japan to print all of the key value pairs of our associative array we'll use a for each Loop within the parentheses we're going to write something a little different first we need our associative array capitals as key Arrow value this for each Loop will Loop through all of the key value pairs let's print them Echo I'll add a placeholder let's print each key and each value then I'll add a break line here are the keys and here are the values I'll add an equal sign before key and value just so it's more readable that's how to use a for each Loop to Loop through all the key value pairs in this associative array to change one of the values we need to access this array by a key I'll change the capital of the USA to be maybe Las Vegas let's take our associative array then I would like to access using square brackets USA set this equal to some new value the new value will be Las Vegas when I run this program the value at this key is now Las Vegas that's how to update a key value pair First Look up the key then you can set the value equal to some new value to add a new key value pair we will access our associative array add a set of square brackets then place a new key within a set of quotes within the square brackets let's add China will equal Beijing there's our new key value pair the key is China the value is Beijing the pop function will remove the last pair in this array array underscore pop we will pop our associative array capitals our pairing of India and New Delhi is gone that's how to remove the last pair in this array the shift function will remove the first element array shift pass in your array the USA and Washington DC pair is now gone it's shifted out of the array if you ever need all of the keys in this associative array there is an array Keys function array keys pass in your array of capitals this will return a new array I will assign that to a new array let's name it keys then I'm going to display all of the keys within our array using the for each Loop so let's change this a little bit we have an array of keys and I would like to display as key for every key in Keys let's Echo each key then I'll add a line break here are all of the keys within our associative array if you need the values instead there's a values function array values I'll create a new array named values for every value in values print each value and here are the Capitals all of the values within our associative array you can flip the keys and the values by using the flip function all right flip pass in your array within the set of parentheses this function will return a new associative array we can either create a new associative array or reassign it I'll reassign our associative array then we need to change our for each loop again so we have capitals as key Arrow value then we will display every key and every value key equals value our values are now switched with our keys the capitals are now the keys the countries are the values that is the array flip function if you need to reverse the order of your pairs you can use the reverse function array underscore reverse pass in your array this will return a new array I will reassign it the order in which we originally placed these key value pairs is now reversed India is now at the beginning the USA is now at the end then if you need the amount of key value pairs you can use the count function Echo count capitals let me get rid of this for each Loop to demonstrate we have four pairs within our associative array one two three four all right everybody so it's time for some practice I will delete everything but our associative array we'll create an HTML document so preceding our PHP script using vs code I will type an exclamation point then hit tab to create some sample HTML we'll create a text box a user is going to type in a country hit submit then we will return the value for that Associated country that capital we'll need a form form be sure to close it right away the action will equal index.php the method will be post let's create a label enter a country then we'll need a text box input type equals text the name will be country then a button input type equals submit here we are within our PHP script we have our associative array we'll need to access whatever's within this text box I'll store that within a new variable named Capital singular Capital equals dollar sign underscore post the value we are trying to access is the name country let's see what we have so far just for testing I'm going to Echo our capital if I type in USA then click submit this should return USA to get the value associated with this key USA I will take our associative array capitals at index of a country so in this example it's USA right I can copy this post variable delete this line within the set of quotes I will place the post variable then get rid of the quotes I will reassign Capital to equal whatever value we receive so I will type in this time Japan then this returns Kyoto we could even put this variable within a sentence the capital is our Capital variable if we type India then click submit the capital is New Delhi all right everybody so that's an associative array it's an array made of key value pairs you could create an associative array of countries and capitals ID numbers and usernames or items and a price those are a few examples and well everybody those are associative arrays in PHP hello again everybody today I need to explain two useful PHP functions the first is the is set function the other is the empty function these are two useful functions to determine if HTML elements are filled in or otherwise interacted with the isset function returns true if a variable is declared and not null empty returns true if a variable is not declared false null or is an empty string here's an example let's create a username variable username equals make up some username I am going to Echo then use the is set function Place some value or variable within the parentheses of this function when I run this program we output 1. in PHP one means true if user name was null is set returns false we don't display anything let's go over a few different values using an if statement if is set add a set of parentheses if the is set function returns true let's Echo this variable is set else let's Echo this variable is not set under which circumstances does the is set function return true that function returns true if a variable is declared and not null what if we don't have a variable the is set to function returns false that means we execute this else statement this variable is not set what if we declare a variable and it's null well the variable is not set either what if this value was true this variable is set how about false the variable is set an empty string the variable is set type in a username the variable is also set those are the circumstances in which the is set function will return either true or false now let's use the empty function this function will return true if a variable is not declared false null or an empty string let's change is set to the empty function we will examine our username variable if this variable is empty let's Echo this variable is empty else this variable is not empty if we don't have a variable I'll get rid of our username this variable is empty if username is null the variable is empty still true the variable is not empty false the variable is empty an empty string the variable is still empty type in a username the variable is not empty now what we're going to do is create an HTML login form we'll need a username a password and a login button we can use a combination of the is set and empty functions to determine if our login button is interacted with or our username and password fields are filled in so let's create an HTML document within the body of my document I will create a form then close it right away in the opening form tag we will set the action attribute to equal our PHP document the method let's use post we will need two labels one for username the other for password username let's copy this label paste it change username to password I'll add a text box the name attribute will be set to username I'll add a break line copy this text box paste it underneath password change text to password let's set the name attribute to be password then we need a submit button input type equals submit let's set the name equal to be let's set the name attribute to be a login then I will set the value the text on the button to be log in here's our sample login form using the post super Global variable is technically an associative array which we learned about in the last topic for demonstration purposes I am going to use a for each Loop and iterate over all of the elements within this array let's access our post super Global variable iterate over post as key Arrow value then during each iteration every key every value then add a break line I should probably add a break line after the submit button too you may need to reload your page then if I press log in we will spit out the associative array that's contained within our post super Global variable here are the keys and here are the values our username and password are both empty strings this thing our login key has this value whatever value we set within the HTML element if we hit the login button we can check to see if this key using the is set function we can determine if this value is set using the empty function we can determine if these values are empty which they currently are we can yell at the user like hey what the heck you didn't enter in your username or password I will reuse this for each Loop later let me just turn this into one giant comment now that we know how that works let's check to see if our button is clicked let's write an if statement if is set function access the post super Global variable we are looking for our login button whatever the name is set to for testing purposes let's Echo you tried to log in so if I save I need to reload the page if I press the login button this button is now set you tried to log in we no longer need this line for testing let's save after pressing the login button let's check if our username is filled in let's get the username username equals we are accessing the post super Global variable the key is our username whatever the name is then let's get our password to while we're at it variable password equals the key is password within our if statement we will write an inter if statement if empty function if our username is empty then let's Echo username is missing else we will display a welcome message Echo hello variable username okay let's reload I'm going to press log in without filling in a username username is missing but if I type in a username then log in we get our hello message hello bro code I'll add an else if statement then we'll check to see if our password is missing if empty function we are examining our password then we will Echo password is missing let's save reload type in a username don't type in a password Press login password is missing in order to Output this Hello message we need to both a username and a password type in a username type in a password Pizza one two three Press login and you get your welcome message I'm going to enclose the section of code within a comment block let's go back to our for each Loop there's something I want to explain so let's save reload make up a username type in a password when I press login you can see that our username and password fields are both filled in they're no longer empty this is our associative array contained within the post super Global variable using these if statements the first thing we were checking is if our login button is set which it is it contains a value then we were checking if our username and passwords were empty or not this time they were not empty that's what it looks like behind the scenes when you're accessing the post super Global variable it's made of key value Pairs and you can determine if a value is set or it's empty all right everybody so that is the is set and empty functions in PHP hey everybody in today's topic I'm going to show you how we can work with radio buttons in PHP let's get started to begin we'll need an HTML form I'm pretty sure you know how to create that already within our HTML form the action attribute will be set to our PHP file the method will be post to create a single radio button we can use a selfclosing input tag set the type equal to B radio let's select a credit card I will set the first radio button to have a value of Visa here's our little radio button I'll add some text afterwards let's say Visa then I will add a line break okay let's copy these two lines of markup paste these twice then change the second radio button to be MasterCard then the third will be American Express so let's change these values here are three radio buttons but we have a problem we can select more than one radio button if we would like these within the same group we only ever should be able to select one at a time we need a name attribute name equals let's say credit card be sure to set this attribute for all of the three radio buttons they all need the same name there we can only select one now if these had a different name such as credit card 1 Credit Card two credit card three well they're technically all in different groups we need them all in the same group to select only one then lastly let's add a submit button input type equals submit the name may be confirmed it's a confirm button we're confirming some payment type for the value I will set that to be confirm as well now when I click on this button I would like to Output a message depending on which radio button is selected Let's test to see that everything's working fine though I will create a local variable named credit card I will set credit card equal to now to get one of these values we need to use the post variable whatever we set for the method access post the key we are looking for is credit card whatever the name attribute is set to the name of the group now when I run and reload this we have an undefined array key credit card which is to be expected we're running our PHP script but we have not yet set the credit card key let's enclose our code with an if statement we'll check to see if our confirm button is pressed is it set if it is then assign our variable if parentheses curly braces we will use the is set function which we learned about in the last topic we would like to check to see if our confirm button is set let's access post the key we are looking for is confirm whatever the name is if we press the button then assign our variable of credit card then let's Echo our credit card for testing purposes Echo credit card let's see what happens I'm going to press the confirm button then we get that warning which is a step in the right direction if I make a selection then press confirm we will Echo whatever value is stored within our credit card variable it's going to be one of these three values either Visa Mastercard or American Express before assigning the variable I would like this warning to not display after pressing the confirm button instead let's display a message please select a credit card or something let's create a nested if statement we will use the is set function again this time let's check to see if our credit card is set if our credit card is set then get the value and store it within a variable then for testing let's Echo that credit card if our credit card is not set we can execute an else statement else let's Echo please make a selection if I don't make a selection then press confirm we will Echo this message please make a selection in order to continue we need to make a selection let's select Visa we will output Visa MasterCard then American Express currently we have a variable credit card that has one of these three values one thing you could do with this variable is check to see if it's equal to a certain value I'm going to change my program around a little bit if we press the confirm button and one of these radio buttons is selected then assign our variable let's get rid of this Echo I'll add some if and else if statements this is just for demonstration purposes if our credit card is equal to Visa then let's Echo you selected Visa let's add an else if statement else if credit card is equal to MasterCard you selected MasterCard else if credit card is equal to American Express you selected American Express then else else if credit card doesn't equal one of these three matches then let's Echo please make a selection all right let's see what happens currently if I make a selection such as Visa we will Echo you selected Visa you selected MasterCard you selected American Express but currently if I press the confirm button without making a selection we have some warnings that our credit card variable is undefined but we still execute the else Clause as you can see here one change I'll make is that let's declare our variable credit card but we won't assign it a value credit card equals null then we won't receive that warning that credit card is undefined we have declared it I'll press confirm please make a selection I can select one of these credit cards and we will display a message in this circumstance I would probably use a switch where comparing some value against many matching cases I think a switch would be more efficient so let's create a switch for practice within our switch we are examining our credit card we will examine our credit card against matching cases Visa if our credit card is equal to Visa then let's Echo you selected Visa then add a break statement to break out of the switch let's do this for MasterCard add a case for MasterCard MasterCard you selected MasterCard then American Express American Express you selected American Express then a default case if there are no matching cases let's Echo please make a selection so if I press confirm we will Echo please make a selection if I select Visa you selected Visa you selected MasterCard you selected American Express all right everybody so those are a few different ways in which you can work with radio buttons in PHP to get the value of a given radio button group you can use the post variable then access that key whatever the name is then you can assign the value to a local variable to work with and you can do whatever you want with it in this case I just used a switch and well everybody those are a few different ways in which you can work with radio buttons in PHP well hello again everybody in today's video I'm going to show you how we can work with check boxes in PHP we need a form element I have the action attribute set to my PHP file index.php for the method I'm using post to create a checkbox we can use a selfclosing input tag the type will be check box and here it is if we were to use post we will get a key value pair from this checkbox element the key will be equal to our name attribute let's say that the name is pizza and for the value let's say pizza I'm going to capitalize the value just so that it's easier to differentiate between the key and the value the name is the key the value as well the value then let's add some text Pizza brake element not sure why Google wants to translate this but okay let's copy these two lines of markup then paste them three additional times the second button will be hamburger the third will be hot dog the fourth will be taco let's change the names the values and the text the second checkbox is hamburger then hot dog then Taco here are the four check boxes then we'll need a submit button input type equals submit for the name that will be submit as well now within our PHP script when I press this button I would like to execute some code after we press the submit button I will enclose all of my code with an if statement we will check to see if our submit button is set we'll use the is set function we'll use the post variable we are accessing submit if we click the submit button then do stuff to check to see if a checkbox is set we can use the is set function again we'll use an if statement if is set now we are examining the key of pizza whatever the name attribute is set to if Pizza is set if it's checked what do we want to do let's simply Echo you like pizza when I press Pizza click submit we will display you like pizza let's do this with the other check boxes let's copy this if statement paste it three times then we'll check the other Keys we have hamburger you like hamburgers hot dog you like hot dogs Taco you like tacos oh then let me add a break after each of these sentences because I forgot to do that now I can press any combination of these check boxes if one of these check boxes is checked we'll execute one of these if statements you like pizza you like hot dogs you like tacos alternatively we can determine to see if a check box is empty using the empty function let's copy our if statements change is set to empty empty empty empty if Pizza is unchecked if it's empty we'll Echo you don't like pizza do this for hamburgers you don't like hamburgers hot dogs you don't like hot dogs and Tacos you don't like tacos if I were to click pizza and Tacos again then submit you like pizza you like tacos you don't like hamburgers you don't like hot dogs that's one way in which you can check to see if a check box is set you can use the is set function to determine if it's set or empty to determine if it's empty you can place all of these check boxes in an array but they would all need the same name attribute let's rename the name attribute to foods for all of these check boxes then add a set of straight brackets after each these will all be placed within an array let's get rid of our if statements after pressing the submit button let's create a Foods array then we will get via post the key name which is Foods Foods is technically going to be an array to prove it let's Echo Foods then see what happens Pizza hamburger hot dog taco warning a right to string conversion so Foods is an array we can access elements of an array with an index number Foods at index zero that would be Pizza one is hamburger two is hot dog three is Taco four should be out of bounds undefined array key for you can Loop through all of the elements of an array using a for each Loop for each list your array Foods as food then let's Echo each food then I will add a break Pizza hamburger hot dog taco all right everybody so that's how to work with check boxes in PHP the type set to checkbox the name attribute will be the key and the value as well the value you do have the option of placing all of these check boxes in the same group they would need the same name then add a set of square brackets after and well everybody that's how to work with check boxes and PHP hey everybody in today's video I'm going to explain how we can create functions in PHP with a function you write some code once then reuse it whenever you need it it's reusable code if you ever need to call a written function you type the function name followed by a set of parentheses for example we could have an add function we have a function name then two parentheses I like to think of the parentheses as two telephones talking to each other in order to invoke a function you call it like with the telephone some examples of functions could be add subtract multiply divide you can create all sorts of functions to do various things here's how to create a function we'll create a function to sing Happy Birthday to create a function type function then we're declaring a function name what would you like to name this function I will name it the happy birthday function add a set of parentheses a set of curly braces any code you would like to reuse you place within the set of curly braces I'll create some Happy Birthday song here's my function we write this code once then reuse it whenever we need it if I would like to execute the code within the function I would type the function name in this case it's happy birthday then add a set of parentheses like it's a pair of telephones talking to each other that's how you call a function and here's my birthday message um I forgot some break lines let me put those in real quick that's much better happy birthday dear you happy birthday to you happy birthday dear you you are X years old I know it's kind of a lame song I just made it up on the spot I can call this function as many times as I need it if I would like to sing Happy Birthday three times I would just invoke this function three times there we have sung three verses of happy birthday I'm gonna add another break statement though there so a function is just a section of reusable code you write it once reuse it whenever you need it with coding we try not to repeat code if we don't have to with a function you can send your function some data some values or variable I'm going to send my happy birthday function a string a first name let's say SpongeBob if you send your function some data a value or a variable this would be known as an argument we need a matching parameter a parameter is kind of like a temporary variable let's create a parameter named first name this parameter only exists within the scope of this function when you escape the function this variable no longer exists let's replace U with a placeholder then we will add our parameter our variable first name happy birthday dear first name let's do that here as well then let's try this again happy birthday dear SpongeBob happy birthday to you happy birthday dear SpongeBob you are X years old I could call this function again and pass on a different parameter like Patrick we have a verse of happy birthday but we have sent a different argument Patrick instead of SpongeBob let's do it one more time we will invoke happy birthday then pass in a first name Squidward happy birthday dear Squidward you can pass in more than one argument to a function let's send an age so separate each argument with a comma I don't know how old SpongeBob is according to the lore let's say that he's 30. let's do that with Patrick as well let's say he's 35 then Squidward he seems older maybe he'll be 45. we have two arguments when we invoke this function we should have two parameters for the second parameter let's store these values in a variable named age then we can use this variable for something let's replace x with variable age happy birthday dear SpongeBob you are 30 years old Patrick is 35 years old and Squidward is 45 years old that's how to invoke a function and pass arguments to it but you would need a matching set of parameters now with the function you can return something you'll typically see a return statement at the end of a function let's go over a different example we will create a function to check to see if a number is even or odd function let's name this function is even we will need one parameter a number to invoke this function you type the function name then add a set of parentheses if there's a parameter you need to pass in a value or a variable let's see if the number 11 is even now within our function we need to write some code let's say we have a variable result equals that to see if a number is even or odd you take that number or that variable modulus 2. modulus gives you the remainder of any Division if number divides by 2 evenly the results should be zero if it's odd the result is one then we'll use a return statement and return some value what would we like to return let's return the result now if I Echo after executing this function whatever is returned kinda takes its place then I'm just going to Echo it is 11 even or is it odd that returns one is 10 even or odd that returns zero it's even you could shorten this too let's get rid of our result variable take this section of code and we are returning whatever the outcome is that works too let's write something a little more complicated let's create a function to find the hypotenuse of a right triangle so let's define our function function let's name this function hypotenuse we'll need sides A and B as arguments so set up these matching parameters to find side C we need to follow this equation square root function variable a to the power of 2 plus variable B to the power of two then we will return whatever variable C is I'm going to invoke this function but we need two arguments side a and side B let's say side a is three side B is 4. now this doesn't print anything C should technically be five so after executing this function after it's complete just imagine that we're returning five so let's Echo whatever the result is or we could store it within a variable so now the result is five let's do two different numbers side a will be four side B will be five side C is six point four and some change one last thing I should mention with your parameter names you can declare a type that needs to be passed in for example if I was to send in like a string like find the hypotenuse of pizza and taco well that really doesn't make sense right fatal error uncut type error unsupported operand type string you can list a data type before the variable name to force the arguments to be of that data type I could say these need to be integers I would type int or float for floating Point numbers if I try this again we receive a different type of error uncut type error now I haven't discussed error handling yet but this will come in handy when we get to that point just be aware of that with parameters you can list a data type beforehand then you need to pass in an argument of that exact data type all right everybody so that's a function it's a section of reusable code whenever you would like to use this function you type the function name add a set of parentheses if there are parameter setup you need to pass in a matching set of arguments then you can return something and well everybody those are functions in PHP hey welcome back everybody in today's topic I'm going to explain a few useful string functions you might be interested in let's begin with creating a username assign this your first and last name the first function I'll discuss is the string to lower function I'm going to reassign our username and use the string to lower function then we will pass in our username as an argument then let's Echo our username after we make it lowercase Echo username there my username is all lowercase alternatively there's string to Upper string two upper my name is all uppercase then we have trim will remove any white spaces before or after your string there there's the string pad function we can pad a string up to a certain amount of characters with a character we specify let's say I would like to pad my username to a Max size of 20 characters with zeros here's my new username or maybe we could use forward slashes or something then we have string replace string replace within our string we can replace one character with another you know what let's create a new variable how about a phone number let's say phone phone equals make up some phone number 1234567890 here are the order of arguments what would we like to replace let's replace any dashes that'll be the first argument the second argument is what we're replacing the dashes with let's use an empty string then third is our string or variable containing a string we are reassigning our phone number here's our new phone number with all the dashes removed or we could replace them with something else like a forward slash that is the string replace function then we have string reverse s t r e v let's reverse our username then Echo our new username there it is it's all backwards then we have String Shuffle we can shuffle a string compare strcmp we can compare a string or a variable against another string or variable I'll assign this to a new variable let's say equals so if these two strings are the same then this function will return zero if they're different we'll either return one or negative one think of it as if these two strings are the same string compare returns zero it returns false so that's how to see if two strings are equal then we have the string length function string length let's create a new variable count how many characters are within our string in my string we have eight characters one two three four five six seven eight let's do that with our phone number our phone number has 12 characters that is the string length function we can use the string position function to find the position of a character with my username let's find the first position of a space the character or string you're looking for is the second argument I'll create a new variable index so the index of the first space within my username is three zero one two three let's do that with our phone number then let's find the position of the first Dash which would be three as well zero one two three then we have the substring function sub string we can create a new string from a portion of another string with my username I'll take the first three characters and create a new string I'll create a variable named first name here are the order of arguments take your original string let's say our username the second argument is the starting index I would like to start at the beginning the index will be zero then an ending index I would like to end at this space in my name but if you're using your own first and last name you're going to have a different position so for me I'd like to end at the third index then I will echo my first name we have created a new string from an original string but we have to specify the beginning and ending index this time let's take the last four characters I'll create a new variable last name we'll use the substring function again username now you can list a beginning index and then don't specify an ending index then you'll create a new string all the way up to the end if I set my index to B4 we'll create a new substring with everything after the index of four no matter how long the string is so let's Echo our last name and there's my last name in my example so to get everything after the beginning index just don't list a third argument okay now we have the implode and explode functions with your username add your middle name or maiden name or whatever or a nickname doesn't matter just something we can use the explode function to assign each of these portions of our name into an array let's create an array named full name we will use the explode function we are exploding our username however at which character or characters do we separate each element in our array we'll do so by any spaces in this example so that will be the first argument explode our username let's see if this is actually an array let's Echo our full name warning array to string conversion so that's a good sign that means that our full name is an array you know what let's use a for each Loop to demonstrate for each take our array full name as name then I will Echo each name there here's my array and I've taken each portion of our name and placed them as elements within a new array now we have implode which takes an array and creates a string out of them a single string let's say our username is an array so type your full name then we will use the implode function username equals implode what are we imploding let's implode our username then you can add characters between each element I will add an empty space between each element when we implode it then let's Echo our username Echo username my array is all one long string now or maybe I can separate each element with a dash it's still one string alright everybody so those are a few useful string Methods I think you might be interested in in PHP hey everybody what's going on in today's video I'm going to show you how we can both sanitize and validate user input in PHP we're going to need an HTML form to work with I'll go ahead and create that here's my form we have a text box and a button when I click on the button we'll execute some code I will enclose all of my code with an if statement we will check to see if our login button is set if it's interacted with if set we're accessing post if our login button is interacted with let's get the username from the text box and store that within a local variable then let's Echo hello username so I can type in a username Press login and we are pretending to log in if you don't sanitize or validate your user input somebody could write some malicious code like a crosssite script or SQL injection such as this foreign what I did is just write some malicious JavaScript code to display you have a virus it would be best to prevent code like that from running one way in which we can do that is to add a filter to sanitize any user input instead of assigning our username directly from our post variable we are going to use a function the filter input function and there are three arguments the first argument is input post because we're using the post method if we were using get then this would be input get the second argument is the name of the input which in this case would be username then third is the type of filter I'll put this on a new line because I'm running out of room I would like to remove any special characters used in executing code so there is a filter for that it's filter sanitize special chars I'm going to take this JavaScript code paste it into my username and we'll see if we can execute this code which we cannot instead of executing the code we are using it as output and if I were to right click then go to view page source any special characters are replaced here is that JavaScript code I entered it's not executing because we filtered these special characters if you ever need to filter all characters besides numbers there is filter sanitize number int that's another filter let's create a new text box for an age age the name will be age so again let's create a new variable named age equals filter input input post because we're using post the name of the input is age then the type of filter sanitize number int let's create a new message you are variable age years old if I were to type in Press login we will filter all characters besides any numbers that is the filter sanitize number end filter now maybe we need an email let's create a new text box for an email the name will be email email equals again filter input the first argument is input post or input get if you're using get the name of the attribute is email the third argument is the type of filter sanitize email your email is variable email I'll type in an email then add some illegal characters for an email such as angle brackets and parentheses and this should filter all of the illegal characters which it does here's my email without those illegal characters so those are a few ways in which you can sanitize input now let's validate input using a validate filter if our input doesn't pass a validation test it returns an empty string sanitization will strip certain characters of user input validation if it doesn't pass it just returns an empty string so now we have variable age age equals we'll use filter input again input post because we're using post the name of the input we're filtering is age then the type of filter validate int if our user input isn't a number we will assign an empty string to age it doesn't pass the validation test so let's check that let's use an if statement we can use the empty function if our age is empty that means a user didn't type in a valid number let's Echo that number wasn't valid else if our age is not empty that means they typed in a valid number you are age years old let's run this again uh I'll type in a bunch of characters I'll try and log in uh that number wasn't valid I'm not surprised so now let's type in a valid number and that seems to work using this filter we can check to see if some input is only numbers the next filter is to validate an email to see if it's in a correct format let's copy these two lines of code paste them variable email input post we are getting our email user input filter validate email if our email is empty that email wasn't valid else your email is our variable email okay I'll make up some email Press login that seems to work I'll type in that same email but I'll add some illegal characters like angle brackets and parentheses that email wasn't valid all right everybody so those are a few filters you may be interested in when accepting user input it is a good idea to both sanitize and filter user input just in case a user types in some malicious script you don't want any of that sanitize and validate your user input whenever possible and well everybody that's how to both sanitize and validate user input in PHP well well well look who it is in today's topic I'm going to explain the include function the include function copies the content of a file and includes it in your PHP file a few of the benefits is that sections of your website can become reusable any changes only need to be made in one place for example we could create an HTML document for a header and a footer within each page of our website we can include that same header and footer that header and footer file become reusable here's an example we will create a few files our index file will be our home page let's create one for an about us page about dot PHP another four locations to list our locations for our imaginary business then we'll create an HTML file named header header.html then another named footer footer.html here are the files we'll be working with let's fill in our header file we'll create a standard header for a website for our header let's create a pair of header tags I'll add a title the title will be within a pair of H2 header tags this is my website then we'll create a few links for a navigation bar let's set the first link to have an href attribute equal to our home page which we named index.php be sure to close it the text will be home let's copy this link paste it two times the second link will be for our about page change the text to about then locations locations.php then change the text to locations I'll add a horizontal rule as well that is good enough for our header let's head back to our index file to use the include function within your PHP script let me write that PHP all we have to do is type include it's a function then list the file name or the file path these two files are in the same website folder I only need to include the file name header dot HTML then when I save and reload everything we have our header then I could add some HTML afterwards so let's generate some html text within the body of my HTML I'll add a few sentences this is the home page I'll add a break stuff about your home page and go here then let's add a footer let's go to our footer HTML file I will use a pair of footer tags to create a footer I'll add a horizontal rule let's say author colon space type in your first and last name then I'll add a link for an email at href equals mail to come up with some email I'll add some text then close the anchor tag that's good enough for our footer our footer and our header are now complete let me close out of those we have our index page our about page and our locations page after we display everything that we would like for the home page let's display the footer the footer belongs at the bottom of our web page so let's copy our PHP script after our HTML markup let's include our footer footer.html there it is our header and our footer are reusable we only need to write these once and we can reuse them for every web page with our about page let's generate some HTML I'm going to copy these two lines of our body this is the about page stuff about your about page can go here I'm going to click on the link for our about page but we don't have that header or footer so let's add a PHP script before and after to include those PHP we will use the include function we will include list the file name and or the file path header.html and there is our header do the same thing with the footer PHP we will use the include function we are including our footer footer.html and there is the footer of our web page so now we can navigate between our home page and our about page they're both two completely different pages they have different text but we're reusing the same header and footer okay let's finish this with our locations page I'm just going to copy all of this just to expedite everything this is the locations page stuff about your location page can go here okay let's click on our locations page and we are now within the locations page again we're reusing the same header and the same footer parts of our website are functioning as components they're reusable we don't need to create an individual header for every file for every PHP file we can write them once then simply reuse them the cool thing is too if we need to make any changes they'll be reflected across every web page let me change my email to at gmail.com see my email just changed and that is reflected on every web page it helps with code reusability then let's change our title let's go to our header this is the type in your name bro code website and that change has been reflected across all of our web pages that is the include function you can include the contents of a file inside of your web page it helps with reusability and if you need to make any changes you can do so in just one place and that is the include function in PHP hey everybody Welcome to the wonderful world of cookies a cookie if you don't know basically speaking it's information about a user stored in a user's web browser that's why you might receive targeted advertisements platforms such as YouTube they might remember your browsing preferences and you can store other nonsensitive data now to create a cookie in PHP we will use the set cookie function it's actually pretty simple our cookies are stored as an associative array first is the key our key will be favorite food the second element is the value my favorite food will be Pizza the third argument is an expiration time cookies typically expire after a certain amount of time to set the time we can use the time function then add this is in seconds for one day that would be 86 400 seconds if you need your cookie to expire after two days we can just multiply this by two then let me enclose these within parentheses just for clarity then the next argument is the file path I'll use a forward slash for the default file path and there we are so I'm going to save this now if we open up our web browser I'm going to right click go to inspect you can find your cookies underneath application then go to cookies underneath storage oh look at that we have a cookie the key is favorite food the value is pizza and there is an expiration date here too there it is let's add a few more cookies set cookie favorite drink I will set the value to be coffee this cookie will expire after three days there's our next cookie one more favorite dessert I will pick ice cream this cookie will expire after four days so 86 400 times 4. there we have three cookies favorite dessert favorite drink favorite food now to delete a cookie all you have to do is set the time to minus zero so let's do that for all of these yeah look at that the cookies are gone now let's revert that back and we have cookies again let's print each key value pair from all of our cookies I will use a for each Loop we are accessing the cookie super Global variable our cookies are stored as key value pairs using a for each Loop we can write as key Arrow value I will Echo each key value pair key equals value then a break here are the three cookies we set favorite food equals Pizza favorite drink equals coffee favorite dessert equals ice cream to access one of the values you would need the key maybe I will display an advertisement based on somebody's favorite food maybe we remember what their favorite food is I will use the is set function is set place it within an if statement we will check within our cookies add the key of favorite food if their favorite food key has a value let's display it buy some then let's access our cookie variable at the Key of favorite food okay else Echo I don't know your favorite food our cookie for our favorite food is currently set let me get rid of this for each Loop if our favorite food key has a value that's set will display an advertisement for their favorite food buy some pizza if this cookie wasn't set I'll let it expire by setting the time to minus zero I don't know your favorite food this cookie isn't set we will execute the else claws alright everybody so those are cookies they are just information about a user stored in a user's web browser these are used for targeted advertisements browsing preferences and other nonsensitive data and well everybody that's an introduction to cookies in PHP hey everybody how's it going in today's video I need to explain sessions in PHP because well it's an important topic in PHP a session is a super Global variable that's used to store information on a user to be used across multiple Pages once a session is created a user is assigned a session ID for example these can be used for login credentials once you log into a site like Facebook for example you can visit different pages on that site and stay logged in we'll do something like that with PHP let's get started we have our index PHP file but let's create another our index page will be our login page then we'll create a PHP page named home home.php the idea is that once we log in with our index file we will be redirected to our home page so we have two PHP files Now to create a session before you display any HTML we will use the session start function within my PHP script I will type session start and that's how to start a session then after you start a session then you can add any HTML let's generate some HTML I'll add some text to our HTML page this is the login page then I'll add a hyperlink for the home page we'll use an a tag set the href attribute to equal home dot PHP this goes to the home page then be sure to close it I'll add a break as well perfect after our HTML document let's add another PHP script we can create name value pairs within our session super Global variable let's create a key of username set this equal to a username of your choosing then let's do that with the password as well so we will access our session super Global variable we will create a key of password then make up some password for testing purposes let's Echo our username and our password Echo session we're accessing the key of username then we will be returned to the value then I'll add a break then do this with password as well let's see if this works okay here's my username here's my password they are stored within the session variable but we can access the values with a given key they're in key value pairs I would like these values to be accessible from another page from my home page for demonstration purposes I am going to Echo our username and our password from our home page but we need to create a PHP script so PHP then I will Echo our username and our password let's see what happens it's an experiment so I'm going to save everything on our index page we have our username and our password that works fine but if I were to go to our home page our second page well we don't have a username or a password undefined Global variable session within any additional files that we create we will also need to start a session with the session start function and I'll just copy this you'll need to do this before any HTML is displayed we'll start the session I'll create some HTML I'll copy these two lines but make a few changes to them okay this is the home page then I'll create a link to our index page this goes to the we'll call the login page let's reload this okay this is the home page this goes to the login page we do have our username and our password so I'm just switching between the home page and the login page we can access our session variable from either page as long as you start a session for some additional practice let's change our login page to actually reflect a login page we'll have a text box for both a username and a password and a login button so let's go to our index page so this is the login page let's change a few things around we'll create a form set the action attribute to equal index.php for the method since we're using credentials we should use post let's say username add a line break I guess that can be a label too we'll need a text box input type equals text for the name attribute let's set that to be username add a break let's copy these two lines of markup then paste them change the second username to be password also do that with the name attribute then we need a login button input type equals submit for the name this will be login for the value let's say that this is login as well then let's get rid of these lines I'm going to minimize this Explorer window just so we have more room to work with what we're going to do now is after somebody clicks the login button then we'll assign our session variable to check to see if somebody interacts with our login button we can use the is set function within an if statement if is set let me scroll down a little bit we are accessing our post variable at the Key of login if this button is interacted with if it's set we will assign our session variable we'll create a key of username we will assign whatever is within our text box for our username in a real world scenario I would probably use a filter but just for learning purposes I'm going to keep it simple and not use one maybe in a project we will I need to access our post variable at the Key of username whatever's in our text box we will assign to our session variable of username then do that with our password as well before we log in we have to check to see if our username and our password fields are empty we could write using an if statement if not empty function we are checking if our username is not empty and let's check to see if our password is not empty I'll put that down here if our username is not empty and our password is an empty then let's assign our session variables so for testing purposes let's Echo those values Echo the sessions username I'll add a break then do that with the password all right type in a username make up a password oop that should be a password Field hold on type equals password there we go here's our username here's our password if I were to refresh everything type in either a username or password we shouldn't display anything which is correct if one of these two fields are empty let's add an else clause let's Echo missing username slash password one of those is missing then I'll add a break I'll type in a username but not a password missing username slash password let's type in a password but not a username missing username slash password let's type in both and that seems to work now let's get rid of these Echo statements we no longer need them we were using them for testing purposes what we're going to do now is after hitting the login button we will redirect our browser to our home page there's a function for that it is the header function we'll add that right here after we assign our username and password to jump to our home page within the header function and within quotes we will type location colon space then the name of the page home.php home dot PHP let's save everything make sure you're on your login page I will type a username and a password Press login and we are directed to our home page we are still maintaining that session we have our username and our password still let's create a log out button we'll do this within our home page let's get rid of our hyperlink we'll create a form that just has a button so the action attribute will be home.php or the method let's use post again I will add a button the input type will be submit for the name this will be log out for the value that will be log out as well we will use the is set function to see if our log out button is set so let's use an if statement if is set is our log out button set we will access post the key is log out if this button is set we will use the session destroy function we would like to end our session if we're logging out we will use the session destroy function to destroy the session after logging out let's go back to our login page the index file we will use the header function again set the location to be index.php I will log out and that should bring me back to my login page alright everybody that's how to create a session in PHP you can store information about a user that can be used across multiple pages and well everybody that is an introduction to sessions in PHP hey everybody today we will be discussing the server super Global variable it contains headers paths and script locations it's an associative array that's created by the web server it contains nearly everything you need to know about the current web page environment to access the super Global variable you type dollar sign underscore server then you can access one of the key value pairs so for this demonstration I'm going to create a for each loop we're going to iterate over all of the pairs all of the key value pairs let's take our server as here Arrow value then I will Echo each key value pair key equals value then add a line break let's take a look all right we have a lot going on here here are the key value pairs found within my server super Global variable we're still beginners a lot of this is more for advanced PHP developers I more or less just want to raise awareness that this exists two keys that we're going to be interested in are PHP self and request method phpself is the location of this page the request method is either get or post the default is get if we have an HTML form that has the method set to post after clicking the submit button the request method would equal post let me demonstrate how we can use phpself I am going to create an HTML form let me get rid of this for each Loop the name of my PHP file is index.php the action attribute of my form is set to index.php any information that's posted will be sent to my PHP script however if I were to change the name of this file let's rename our file as home well our action attribute isn't going to be updated I'm going to navigate to our home page localhost.website slash home if I were to type in my name then press submit we're sending our form data to a file that doesn't exist it would be kind of nice if we could update this automatically that's where our server super Global variable can come in in place of a file name let's write a PHP script within the set of quotes we are going to access the server super Global variable at the Key of PHP underscore self this key contains the value of the current file path for this file save and reload everything you may need to navigate to our home page because right now it's set to index okay type in a username press submit and that should work then if we update the name of this file let's rename it to um start I guess that's all I could think of at the moment okay let's navigate to start .php type in a username press submit and that works just fine that's how we can use phpself to get the current file name however with phpself it is vulnerable to something called The crosssite Script we learned about crosssite scripts on the topic of Sanitation and validation if you do use phpself I do recommend enclosing this variable within a filter one that I recommend is HTML special chars so be sure to enclose that that'll avoid any crosssite scripts just be aware that this is something you might see in the future in your own studies at least you know what it is now the other key that we're going to talk about is request method request method is either get or post so if I were to reload everything but not submit anything the request method by default is get so another way to detect if a form is submitted is to access the request method normally we're used to saying if is set then access post then we access our submit button one problem with this is that at least in older web browsers you can submit a form without hitting the submit button there's ways around that a more reliable solution is to take a look at that request method within an if statement let's access our server super Global variable we will take a look at our request method and see if this is equal to post if it is then let's Echo I don't know hello type in a username it doesn't really matter I guess hit submit and we will display hello in the future I would prefer if we stuck with this way of handling post requests just because it's more reliable alright everybody so that's a basic introduction to the server super Global variable they're still way more advanced stuff involving it but I thought I'll at least give you an introduction just so that it doesn't freak you out in the future we'll have a little bit more practice with this when we create our own login form and well everybody that is the server super Global variable in PHP hello hello again everybody today I'm going to be explaining hashing in PHP hashing is the process of transforming sensitive data such as a password into letters numbers and or symbols via a mathematical process it's kind of similar to encryption but it's technically different basically speaking we can hide sensitive data from third parties like hackers in my example I have hashed my password pizza123 this is what my hashing algorithm spat out it appears to be what looks like a bunch of random letters numbers and symbols we might store this in a database then in case that database is compromised well then a third party wouldn't be able to see my original password this is what the third party would see in PHP to create a hash of let's say a password I'll create a password variable make up some password Pizza one two three I will create a hash variable then use the password hash function two arguments are a password then a hashing algorithm the second argument is technically a constant that specifies the algorithm the constant will set is password default if we set our algorithm to be password default and PHP currently we're using the bcrypt algorithm which is a very popular algorithm this hash is what we'll be storing within a database it's protected if I were to Echo my hash this would be the result our password is what is referred to as plain text we can plainly see what it is using the password verify function we can compare a password versus a hash if they're mathematically similar then that password verify function will return true let's write a if statement if password verify then we'll pass in a password and a hash let's say that we get some user input the user types in hamburger 666. then the other argument is going to be our hash just imagine that we're retrieving this hash from a database if our plain text password and our hash are mathematically consistent then this function will return true so let's Echo you are logged in else Echo incorrect password okay is hamburger 666 the same as our hash incorrect password what about hot dog one two one two that is also incorrect maybe pizza one two three oh look at that that's the right password you are logged in the password verify function will verify a plain text password versus a hash if there's a match we return true if not it returns false that's really what hashing is in layman's terms it's transforming sensitive data such as a password in two letters numbers and or symbols via a mathematical process and the purpose is to hide the original data from third parties and that is how to Hash a password in PHP hey welcome back everybody we have finally made it to the portion of the series where we will be connecting to a myosql database at this point in the series you will need to be familiar with mySQL queries I do have a full course on that on my Channel for free it's about three hours but yeah moving forward we will need to know MySQL there's two popular ways to connect to a mySQL database the first being the mysqli extension this is what we'll be using the other is PDO meaning PHP data objects many developers prefer PDO over mysqli because it can connect to more than just a mySQL database I believe you can connect up to 12 additional databases you know postgres being one of them however you would need to know object oriented programming which is an intermediate topic and we have not covered that yet as beginners we'll stick with the mysqli extension it's procedural alright well let's get started we'll need to create a mySQL database within our zamp server you'll need to open up the zamp control panel which is this thing make sure that these two modules Apache and MySQL are both started we will need to access phpmyadmin which you can do so by clicking on the admin button next to mySQL that should bring you to phpmyadmin otherwise you can just type in this web address localhost slash phpmyadmin phpmyadmin allows you to configure your database you can make SQL queries monitor the status export import data we'll be covering just some of the basics to create a database go to the databases tab we will create a database come up with a database name in the MySQL series we created a database named businessdb we'll stick with that but you can really name it anything then we will hit this create button we can create a table but we'll do that in a future topic let's be sure that that database is actually created let's click on our server go to databases yeah it's right here to drop a database you can check the database that you create then press the stop button but we don't want to do that but that's how there is some information we'll need about our MySQL server if you go to user accounts we will need some of this information such as the host name the username of root if there's a password for the server which there currently isn't and that's about it you can edit privileges too but that's outside of the scope of this topic all right we have now created our database so let's close out of phpmyadmin make sure that your MySQL server is running it currently is I'm going to create a separate PHP file just to manage our database connection so let's create a new file I will name this database.php anything related to connecting to our database we will handle within this PHP file this will be a PHP script we will declare a few variables the first will be DB underscore server this holds the name of the server for us that was localhost then DB user that was root a password DB underscore password I'll say just pass we do not have a password I will leave that empty then the name of the database DB underscore name I named my database business DB then we will declare a connection variable we'll shorten this to con meaning connection I will set that to be empty okay these are the variables that we'll need to establish a connection to the mySQL database we will take our connection variable set this equal to the MySQL I underscore connect function there are four arguments within this function the database server name username password and the name of the database let's add these variables as arguments so server user then password then database name let me make some more room I'll put these on a new line just for readability but there should be no change to its functionality if I do this if we establish a successful connection this variable is technically what is known as an object we haven't discussed object oriented programming it will represent our current connection one of a few ways in which we can check to see if our connection is up and running is we can use an if statement then place your connection within the if statement if a connection exists let's Echo you are connected else for testing purposes let's Echo could not connect I will save and reload everything then go to your database PHP file localhost slash website slash database dot PHP you are connected all right I'm going to stop the MySQL server then try and reconnect we get this ugly error message fatal error uncaught mice qli SQL exception for some reason if we can't connect to our database we don't want to display this error to the user we should use some exception handling we don't want to print any ugly error messages to the user they will have no idea what's going on I suggest when we attempt to create a connection we surround this code with the try block this has to do with the topic of exception handling we can try some code that might cause an error such as if we can't connect to our database let me just fix these we will try and make a connection if we encounter this exception I'll copy it we can take some other course of action after our try block let's add catch parentheses curly braces then add the name of that exception within the set of parentheses in place of displaying this error to the user let's Echo a message such as could not connect and I'll steal that here I'll get rid of the self statement so if we encounter this error again we will display could not connect that's a lot more obvious as to what's going on instead of that fatal error message if I were to start the MySQL server again then reload we are now connected this PHP file is now complete make sure to save everything we're going to close it I will head back to our index file let's generate some HTML after our PHP script in the body let's say hello doesn't really matter what you say let me zoom in a little bit since everything related to our database connection is handled within a separate PHP file we can include that within another file within a PHP script at the top of my index page I will use the include function we will include that file database.php to connect to our database so let's see if it works you are connected hello maybe I'll add a new line after could not connect I'll add a line break do that here as well much better technically it's not necessary to tell the user that they're connected to the database we were just more or less doing this for testing purposes one way or another though we should let the user know if there's any problems with the connection so we'll keep this for now if I were to stop the server reload we have that message that says could not connect all right everybody so that's how to connect to a MySQL server in PHP all right everybody so in today's video I'm going to explain how we can create a table using phpmyadmin there's two ways to get here you can either go to your zamp control panel then press this admin button next to mySQL or you can head to this URL to create a table let's go to our databases we should have a database already created in the last video we created a database named businessdb so let's click on it let's begin by creating a table name I'll create a table of users these will be registered users then set the number of columns I'll stick with four then we will hit the create button in this column we will set the name of each column our first column will be for user IDs let's name this column ID we will set the data type to be int we won't specify a length if you would like a default value you can set that here we're going to use the ID field to be set to Auto increment you can set the characters but we will keep that as the default like for some reason if you need I don't know Greek you can use Greek but let's just use the default to add an index you can do that here we will set our ID to be our primary index then I will click the Go Button to enable auto increment on a column you can check the AI button it's for auto increment that should be it for this column let's create a column for usernames the column name will be user for the data type let's say varchar then set a Max size I think 25 is good for our users let's have each user be unique then press go then let's move on to the next column this will be for passwords for the data type let's set that to be char which is right here I recommend hashing passwords in our database we won't be storing plain text passwords in case you know we get hacked or in case somebody uses SQL injection we'll be storing a hash of a password I'll set the size to be 255. encrypting and hashing algorithms are always changing and updating let's future proof our password field just by setting it to something large then let's add a registration date maybe we'll name the column register underscore date let's select not just date but date time I want to know the time that they register for the default let's use a current timestamp that should be good for our table if you would like some SQL code you can preview the SQL this is what we would be writing but we're going to be doing this automatically with phpmyadmin so let's save and we now have our table if I were to go to browse this is our table but there's currently no rows we'll be adding some rows with PHP but for testing purposes let's insert one manually using phpmyadmin so we will insert some test values with our ID it's set to Auto increment we don't necessarily need to put in a value for the user let's say the user is SpongeBob and for the password his password will be pineapple one you can also encrypt this password using password hash we'll cover hashing passwords in the next video with our registration date this is set to a current timestamp so that's going to be done automatically let's press go this would be the SQL query but yeah one row has been inserted let's go back to our table the username is SpongeBob password is pineapple1 and here is the registration date well date and time then to delete a row you can click this delete button then press ok and that is how to create a table in phpmyadmin and in the next topic we will be inserting some rows into our table using PHP hey everybody in today's video I'm going to show you how we can insert data into a MySQL table using PHP at this point in the series I am assuming that you have already established a connection to your mySQL database if you haven't here's some code that will do that in my index file I have included the code to connect my database at the end of my script I am going to close this connection just because I know for a fact I'm going to forget to mention that so I'm doing it now to close a connection you can type my sqli underscore close then pass in the connection our connection is underlined because vs code doesn't recognize it because we're including it from another file but it should work just fine now what we're going to do is write an SQL query I'll store that within a variable SQL this will hold our query So within quotes we can write some SQL query of your choosing we'll do a basic insert insert into the name of the database my databases users then list the columns I will insert a username and a password list the column user password then some values we're going to start with just some plain text my username will be SpongeBob for my password let's say SpongeBob's password is pineapple1 then to submit the query we can use the my sqli underscore query function then pass in our connection and our SQL query and that's it again vs code isn't going to recognize our connection because we're importing it if I were to run this query then refresh PHP in my admin we have our submission user ID of one it's set to Auto increment in this case the user is SpongeBob password pineapple and here's the registration date I set the registration date to be a current timestamp yes I am recording at two in the morning because I'm crazy let's say that for some reason we can't register a user maybe I forget a password well we get this fatal error fatal error uncaught mysqli exception we can surround our query with the try block we can try this code if there's any exceptions or errors that pop up we can handle them gracefully let's create a try block we will try some possibly dangerous code then handle any exceptions if they come up if this query is successful then let's Echo user is now registered if we encounter a problem let's catch that the exception we're catching is this one I'm going to copy it paste it then we will Echo could not register user oops gotta fix that all right let's try this again my query is not technically correct but we should be able to handle that exception could not register a user as you can see here with our SQL query let's insert some variables let's declare two let's declare a username username equals Squidward this time and a password equals clarinet 2. with our values within single quotes we will list our variables username and password let's see if this works user is now registered then if we head to phpmyadmin refresh this table we now have an entry for Squidward with the password of clarinet2 art passwords are plain text it would be much better if we were to store a hash of a password just because you know these are plain text it's not secure so let's hash our password we'll create a hash equals we will use the password hash function the two arguments are the password and an option for an algorithm we will use the default password default technically we're using the bcrypt algorithm that's the default currently we will insert our username and our hash in place of our password let's change the username though let's assign Patrick his password will be rock3 let's see if this works okay refresh phpmyadmin and there is Patrick user ID3 username is Patrick here's the hash of the password and the registration date all right everybody so that's how to insert data into a MySQL table using PHP hey everybody in today's video I'm going to show you how we can retrieve data from a mySQL database using PHP I have already established a MySQL connection I'm going to include that file that establishes the connection then at the end of my script I will close that connection with the MySQL close function the first thing we'll do is write an SQL query I will store that within a variable named SQL in my table I would like to select a user let's select SpongeBob the query would look something like this let's select let's say everything from our table which I named users where if you don't write a where Clause your query is going to return more than one row I'll show you how we can handle that later select all from users where user is equal to SpongeBob but put that within single quotes this is our SQL query to make a query we can use the my sqli query function we will pass in our connection object then our query SQL if successful this function will return an object we will store that as a variable named result so result is technically an object somewhere within this object there's an associative array to find how many rows are returned from our query function we can place that within an if statement we will use this function mysqli underscore num rows function this function will return how many rows are within our result really it should only be one in this example if there's at least one result we could write a condition such as if the number of rows is greater than zero there's at least one matching row to get that Row from our result let's store that within a variable named row set this equal to the my sqli underscore fetch underscore Asos for associative then pass in our result this function Returns the next available row within our object our row is an associative array we can access this data by a key then be returned one of the values let's Echo row at index of ID then I'll add a break afterwards let's see what we have we have the user ID of one let's get the username I think it's just user one SpongeBob then the registration date reg date so these are the names of the columns yeah here's SpongeBob's ID is username and the registration date those were the fields found within our table now if there are no results let's say we're looking for Sandy well we don't do anything let's add an else clause else let's Echo no results found or maybe no user found no user found that's how to retrieve one row from a table what if you need to retrieve multiple rows we can make some adjustments we would want to utilize a loop I'll enclose this line of code within a while loop while there are rows we will display each user's information let's get rid of the where Clause we will return every user you would just need a looping structure of some sort to Loop through each row within your result alright everybody so that's how to query data from a database you write an SQL query you use the query function this returns an object then you'll need to get each row from the object and then you can do that with this function if you need to return more than one row you can stick that within a loop like a while loop and that is how to query data from a mySQL database in PHP hey everybody in today's video we're going to create a registration form in PHP so sit back relax and enjoy the show a few prerequisites that we'll need for this project is that we'll need a table within a database we have created one in Prior topics we have an ID a user a password and a registration date you'll need a working database connection as well which is what we have done here in my index file I have included that PHP code that contains my connection then we will write a second PHP script within this file we are going to close our MySQL connection because if we don't do it now I know that I'm going to forget later so let's close it now and we are closing our connection let's go to our index file generate some HTML we'll create a pair of form tags for the action we're going to set this to a PHP script within quotes just in case I update the name of this file this script will reflect the changes so let's create a PHP script we will get from our server super Global variable phpself accessing the key of PHP self that will give us the name of the file but this is vulnerable to crosssite scripts we should enclose this within a filter HTML special chars is a good one for this situation then we should set the method equal to post because we're creating a registration form let's add a title to our web page let's use an H2 header tag welcome to fake book it's like Facebook but worse we'll have a user type in a username and a password username add a break add a text box input type equals text the name attribute will be username add a break and I'm just saving and reloading everything as I go along we'll need a password create an input tag set the type equal to password the name will be password as well add a break then let's create a submit button that is also an input tag the type will be submit for the name let's set that to be submit as well then for the value maybe register that looks pretty good okay our form is complete let's go to our PHP script the method of our form is set to post we can detect that with an if statement we will access the server super Global variable and check the request method key so type request method is this equal to post has the request method changed to post if a post request is made we should filter both the username and the password it just in case they contain a malicious script so let's assign our username equal to we will filter the input using the filter input function type input post because we're using post the second argument is the attribute name username then a filter type filter sanitize special chars let's copy this line then paste it directly underneath but change username to password do that here too so that should filter any malicious grips once we have a username and a password that's been filtered we'll check if one of these fields is empty we can use an if statement let's check if our username is empty if empty function our username then we will Echo please enter a username else if our password is empty empty function let's check our password please enter a password Let's test that real quick I'll type in a username but not a password please enter a password I won't type in a username but I'll type in a password please enter a username if we type in both nothing happens but that's good if our username isn't missing and our password isn't missing we can execute and else clause in our database we'll want to store a hash of a password let's take our password declare a hash variable then use the password hash function we will pass in our password then an option let's use password default okay now that we have our hash we need to write an SQL query we'll insert the username and the hash of the password we'll store our SQL query within a variable SQL then we will write the query it's going to be an insert statement insert into the name of the table in this case my table is named users list the columns user and password values list the values we will be inserting our username variable as well as our hash the hash variable then to initiate the query we can use the query function mysqli underscore query pass in our connection as the first argument followed by our SQL query once that's complete we should probably let the user know that they registered successfully let's Echo you are now registered for the username I will type SpongeBob will have a password of pineapple one I'll click register you are now registered let's go to our table refresh I might need to zoom out a little bit and here's the first record user ID one username is SpongeBob this is the hash of the password and I have a registration date one important thing I forgot to mention I'm only allowing in this table unique user IDs if I were to register another user as SpongeBob we might have a little problem SpongeBob I'll make up another password fry cook2 well we get a fatal error uncaught MySQL exception we have a duplicate entry for SpongeBob we never really talked much about exception handling but one way in which you could handle this exception is that we can copy the exception name place any code that might cause an exception within a try block then catch that exception in this case it was a MySQL exception then let's Echo that username is taken there's still a lot more you can do with exceptions but that's more of an intermediate topic I would say let's type in SpongeBob again brycook 2 and register that username is taken let's create the username Squidward Squidward will have a password of clarinet 2. you are now registered and here's Squidward all right everybody so I thought that would be a fun final project for us to do to wrap up this video I would look at both object oriented programming and exception handling next hey if you made it this far be sure you've smashed that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
