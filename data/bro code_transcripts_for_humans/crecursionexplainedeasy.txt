With timestamps:

00:02 - hey guys i gotta explain recursion
00:04 - recursion is a programming technique
00:06 - where a function invokes itself from
00:08 - within we break a complex concept into
00:11 - repeatable single steps many problems we
00:14 - can approach iteratively or recursively
00:17 - some of the advantages of recursion
00:19 - include
00:20 - less coderight and typically it's
00:22 - cleaner it's also useful for sorting and
00:25 - searching algorithms however some of the
00:27 - disadvantages of recursion is that it
00:29 - uses more memory and a slower there's a
00:32 - trade-off it's up to you if you'd rather
00:34 - use an iterative approach or a recursive
00:36 - approach here's an example we'll break a
00:38 - complex concept maybe such as walking
00:41 - into repeatable single steps to
00:43 - accomplish the task of walking we would
00:45 - take a single step and then just repeat
00:46 - that a bunch of times we'll do this
00:48 - first iteratively then recursively
00:51 - so let's create a function to walk
00:55 - void
00:56 - walk
00:57 - there will be one parameter a number of
00:59 - steps
01:01 - let's define this walk function
01:05 - we'll use an iterative approach first to
01:07 - do that we can use a for loop
01:09 - we'll set
01:11 - into i equals zero
01:13 - we'll continue this as long as i
01:16 - is less than
01:17 - our steps
01:19 - then increment i by one
01:21 - i will display
01:23 - just you take a step
01:27 - then i'll add a new line
01:30 - so we will invoke this function pass in
01:33 - how many steps we would like to walk i
01:35 - would like to walk 100 steps
01:39 - and here we go
01:41 - we printed you take a step 100 times
01:44 - this is an iterative approach
01:46 - if we were to take a recursive approach
01:49 - we would invoke this function from
01:50 - within itself
01:52 - so i'm going to turn this for loop into
01:54 - an if statement
01:57 - we'll need a base case when do we stop
01:59 - if
02:00 - steps
02:02 - is greater than
02:04 - zero
02:05 - we will display you take a step then i'm
02:08 - going to invoke the walk function from
02:10 - within itself then i will pass in steps
02:13 - minus 1. this would be a recursive
02:16 - approach we're invoking the walk
02:18 - function from within itself
02:20 - you'll end up in a function within a
02:22 - function within a function within a
02:24 - function so on and so forth so when i
02:26 - run this
02:29 - this would do the same thing but we've
02:30 - done so recursively the advantages with
02:33 - recursion is that the code tends to be
02:35 - easier to write i find this if statement
02:38 - a lot easier to understand than that for
02:40 - loop although they're both pretty simple
02:42 - however with recursion it uses more
02:44 - memory and it takes more processing time
02:47 - in the case with our walk function i
02:48 - would probably stick with an iterative
02:50 - approach there's really not much benefit
02:52 - in this case but in the case of let's
02:54 - say a searching algorithm or navigating
02:56 - a tree data structure recursion would
02:59 - really help us with that so let's say we
03:01 - don't have a base case that's when we
03:02 - stop what if i just call the walk
03:04 - function forever
03:09 - well we end up in an infinite loop
03:11 - and we would encounter what's called a
03:13 - stack overflow
03:15 - when you invoke a function you add
03:17 - what's called a frame to the stack when
03:19 - your stack is overloaded you'll
03:20 - encounter a stack overflow so that's one
03:24 - problem with recursion
03:25 - so let's try a different example
03:28 - we'll create a factorial function
03:30 - if you don't remember factorial is a
03:32 - mathematics concept where you take a
03:34 - number and you multiply that number
03:36 - times the previous number minus one
03:38 - times the previous number minus one
03:41 - times the previous number minus one
03:43 - until you reach one you multiply all
03:45 - these numbers and you're given a result
03:47 - i'm going to demonstrate a function to
03:49 - do that both iteratively then
03:50 - recursively let's begin with an
03:52 - iterative approach we will return an
03:55 - integer this function will be named
03:57 - factorial we'll pass in an integer named
04:00 - num
04:01 - i'll immediately display the output
04:03 - standard output
04:05 - factorial then pass in some number maybe
04:08 - 10.
04:10 - let's define this function
04:15 - if i was to take an iterative approach i
04:17 - would write something like this
04:20 - and result this will be a local variable
04:23 - i'll set this equal to one
04:25 - i'll create a for loop
04:29 - and i
04:30 - equals one
04:32 - we'll continue this as long as i is less
04:35 - than or equal to our number
04:37 - increment i by one
04:40 - i will take our result
04:42 - equals result
04:44 - times whatever i currently is
04:47 - at the end of this program we will
04:48 - return result
04:51 - factorial 10 that would be
04:53 - 3
04:55 - eight thousand eight hundred
04:58 - if i was taking a recursive approach i
05:00 - would write something like this we would
05:02 - need a base case when do we stop
05:06 - if num
05:07 - is greater than one
05:10 - we will return
05:12 - num times
05:14 - invoke factorial again
05:17 - our number minus one
05:20 - else we will simply return one
05:24 - this would do the same thing but
05:26 - recursively factorial ten is three
05:28 - million six hundred twenty eight
05:30 - thousand eight hundred
05:32 - those were two different approaches to
05:33 - the same problem when we did this
05:35 - recursively we have a function call
05:38 - inside of a function call inside of a
05:39 - function call inside of a function call
05:41 - you get the idea personally i find a
05:44 - recursive approach to be a lot easier to
05:46 - read and understand although remember it
05:48 - uses more memory and a slower when you
05:50 - start to learn about sorting algorithms
05:52 - that's when recursion is really going to
05:54 - help you quite a lot it will simplify
05:56 - the steps so that's recursion everybody
05:59 - it's a programming technique where a
06:01 - function invokes itself from within we
06:03 - break a complex concept into repeatable
06:06 - single steps whenever you see a function
06:09 - invoking itself from within you'll know
06:11 - that that's recursion hey if you would
06:12 - like a copy of this code i'll post this
06:14 - in the comments section down below and
06:16 - well yeah that's recursion in c plus

Cleaned transcript:

hey guys i gotta explain recursion recursion is a programming technique where a function invokes itself from within we break a complex concept into repeatable single steps many problems we can approach iteratively or recursively some of the advantages of recursion include less coderight and typically it's cleaner it's also useful for sorting and searching algorithms however some of the disadvantages of recursion is that it uses more memory and a slower there's a tradeoff it's up to you if you'd rather use an iterative approach or a recursive approach here's an example we'll break a complex concept maybe such as walking into repeatable single steps to accomplish the task of walking we would take a single step and then just repeat that a bunch of times we'll do this first iteratively then recursively so let's create a function to walk void walk there will be one parameter a number of steps let's define this walk function we'll use an iterative approach first to do that we can use a for loop we'll set into i equals zero we'll continue this as long as i is less than our steps then increment i by one i will display just you take a step then i'll add a new line so we will invoke this function pass in how many steps we would like to walk i would like to walk 100 steps and here we go we printed you take a step 100 times this is an iterative approach if we were to take a recursive approach we would invoke this function from within itself so i'm going to turn this for loop into an if statement we'll need a base case when do we stop if steps is greater than zero we will display you take a step then i'm going to invoke the walk function from within itself then i will pass in steps minus 1. this would be a recursive approach we're invoking the walk function from within itself you'll end up in a function within a function within a function within a function so on and so forth so when i run this this would do the same thing but we've done so recursively the advantages with recursion is that the code tends to be easier to write i find this if statement a lot easier to understand than that for loop although they're both pretty simple however with recursion it uses more memory and it takes more processing time in the case with our walk function i would probably stick with an iterative approach there's really not much benefit in this case but in the case of let's say a searching algorithm or navigating a tree data structure recursion would really help us with that so let's say we don't have a base case that's when we stop what if i just call the walk function forever well we end up in an infinite loop and we would encounter what's called a stack overflow when you invoke a function you add what's called a frame to the stack when your stack is overloaded you'll encounter a stack overflow so that's one problem with recursion so let's try a different example we'll create a factorial function if you don't remember factorial is a mathematics concept where you take a number and you multiply that number times the previous number minus one times the previous number minus one times the previous number minus one until you reach one you multiply all these numbers and you're given a result i'm going to demonstrate a function to do that both iteratively then recursively let's begin with an iterative approach we will return an integer this function will be named factorial we'll pass in an integer named num i'll immediately display the output standard output factorial then pass in some number maybe 10. let's define this function if i was to take an iterative approach i would write something like this and result this will be a local variable i'll set this equal to one i'll create a for loop and i equals one we'll continue this as long as i is less than or equal to our number increment i by one i will take our result equals result times whatever i currently is at the end of this program we will return result factorial 10 that would be 3 eight thousand eight hundred if i was taking a recursive approach i would write something like this we would need a base case when do we stop if num is greater than one we will return num times invoke factorial again our number minus one else we will simply return one this would do the same thing but recursively factorial ten is three million six hundred twenty eight thousand eight hundred those were two different approaches to the same problem when we did this recursively we have a function call inside of a function call inside of a function call inside of a function call you get the idea personally i find a recursive approach to be a lot easier to read and understand although remember it uses more memory and a slower when you start to learn about sorting algorithms that's when recursion is really going to help you quite a lot it will simplify the steps so that's recursion everybody it's a programming technique where a function invokes itself from within we break a complex concept into repeatable single steps whenever you see a function invoking itself from within you'll know that that's recursion hey if you would like a copy of this code i'll post this in the comments section down below and well yeah that's recursion in c plus
