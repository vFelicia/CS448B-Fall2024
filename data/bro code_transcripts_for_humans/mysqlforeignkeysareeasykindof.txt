With timestamps:

00:00 - hey everybody so in this topic I'm going
00:02 - to explain what the foreign key
00:03 - constraint is a foreign key think of it
00:06 - as a primary key from one table that can
00:09 - be found within a different table using
00:11 - a foreign key we can establish a link
00:14 - between two tables there's two primary
00:16 - benefits to this in my transactions
00:19 - table if I were to take a look at the
00:21 - customer idea of who initiated this
00:23 - transaction I could refer to the
00:25 - customers table then find the first and
00:27 - last name of that customer we can do
00:30 - that when we reach the topic of joins
00:32 - but in this video we're going to focus
00:34 - more or less on just creating foreign
00:36 - Keys another benefit when you create a
00:38 - foreign key constraint that would create
00:40 - a link between two tables which prevents
00:43 - any actions that would destroy that link
00:46 - between them so here's an example I have
00:48 - three tables employees products and
00:50 - transactions I'm going to create a new
00:52 - table of customers I'm going to create
00:54 - this table and speed it up feel free to
00:57 - pause the video if you need to
01:11 - here's my table we have a customer ID
01:14 - which is the primary key a first name
01:16 - and a last name let's populate our
01:19 - customers table
01:35 - we have three customers Fred fish Larry
01:38 - Lobster bubble bass each has a unique
01:40 - customer ID we're going to create a link
01:43 - between our customers table and our
01:45 - transactions table via our customer ID
01:48 - I'm going to drop our table transactions
01:51 - drop table transactions
01:54 - we will recreate this table but apply
01:56 - that foreign key constraint so again
01:59 - I'll speed up the footage
02:11 - now what I'm going to do is create a
02:12 - third column to hold our customer ID
02:19 - and the data type isn't I would like to
02:21 - add a foreign key constraint to our
02:23 - customer ID column
02:25 - on the next line
02:27 - I will type
02:28 - foreign key list the column we're
02:31 - applying this foreign key constraint too
02:33 - within parentheses customer ID
02:37 - references
02:39 - our second table the customers table
02:43 - customers
02:44 - then the column of the primary key which
02:47 - was customer
02:49 - ID and that's all you need to do
02:52 - then I will select all from my table
02:55 - transactions
02:59 - here is our table
03:01 - we have a transaction ID this is the
03:03 - primary key the amount of the
03:05 - transaction then the customer ID of who
03:08 - initiated that transaction our customer
03:11 - ID column is the foreign key it points
03:13 - to the customers table based on what the
03:16 - customer ID is we can find the first and
03:18 - last name of that customer to find any
03:20 - active foreign keys
03:22 - go to your table in this case
03:23 - transactions underneath foreign keys
03:26 - this section will display any foreign
03:28 - keys that are applied to this table we
03:30 - currently have one
03:31 - transactions underscore ibfk underscore
03:35 - one
03:36 - if you need to drop a foreign key you
03:38 - would type alter table the name of the
03:42 - table that has the foreign key
03:43 - constraint that would be transactions
03:48 - drop
03:49 - foreign key then the name of this
03:52 - foreign key
03:55 - transactions underscore
03:58 - ibfk underscore one
04:04 - and that foreign key should be gone
04:07 - you could also give your foreign key a
04:09 - unique name
04:11 - alter table the name of the table
04:14 - add
04:15 - constraint
04:17 - then some unique name let's rename that
04:20 - constraint as FK underscore
04:24 - customer
04:25 - ID
04:29 - foreign
04:30 - key
04:32 - the name of the column customer ID
04:37 - references
04:39 - the name of the second table
04:41 - customers then the column that has the
04:44 - primary key
04:45 - customer
04:47 - ID
04:48 - so to apply a foreign key to a table
04:51 - that already exists this would be the
04:53 - syntax you don't necessarily need to
04:56 - name the constraint
04:57 - but if you would like to just add that
04:59 - line add constraint then some unique
05:02 - name
05:03 - let's add this foreign key constraint to
05:05 - a table that already exists
05:07 - it worked if I were to refresh my
05:10 - navigator window we now have a foreign
05:12 - key and it's the one that we gave a name
05:14 - to foreign key customer ID
05:18 - what we're going to do is drop the rows
05:20 - from our transactions table then
05:22 - reinsert them but we will add a value
05:24 - for each foreign key
05:26 - so let's get rid of this
05:29 - delete from transactions
05:35 - then select all from
05:38 - transactions
05:41 - here we are okay so let's insert some
05:43 - new rows
05:45 - I do want to set auto increment to be a
05:48 - thousand so I'm going to do that before
05:49 - we insert some rows alter table
05:53 - transactions
05:55 - Auto
05:57 - increment equals one thousand
06:01 - so let's take a look at transactions
06:07 - then we will insert some new rows
06:10 - insert into
06:12 - transactions
06:15 - R values
06:19 - we had four transactions
06:25 - we will need an amount and the customer
06:30 - ID of who initiated the transaction
06:33 - the first order is for 4.99
06:36 - customer number three initiated this
06:38 - transaction
06:39 - the second order is 289
06:43 - customer number two initiated that
06:45 - transaction
06:47 - 338
06:49 - this is also customer three they
06:51 - returned back the same day
06:54 - 4.99
06:55 - customer number one initiated that
06:57 - transaction
06:59 - we have our primary key from the
07:01 - transactions table as well as our
07:03 - foreign key
07:04 - each of these customer IDs references
07:07 - the customer ID column from the
07:09 - customers table we won't get to explore
07:12 - that until we reach the topic on joins
07:14 - so the other benefit of a foreign key
07:16 - constraint is that we now have a link
07:18 - between our transactions table and to
07:20 - the customers table MySQL will prevent
07:23 - any actions that would destroy that link
07:25 - between them unless we explicitly drop
07:28 - that foreign key constraint I'm going to
07:30 - delete some of our customers
07:33 - delete from customers
07:38 - where
07:40 - customer
07:41 - ID equals three
07:45 - we were right it doesn't appear that we
07:47 - can do so cannot delete or update a
07:49 - parent row a foreign key constraint
07:52 - fails
07:54 - so yeah that's the foreign key
07:55 - constraint it's a primary key from one
07:58 - table that's found also within a
08:00 - different table but when we're working
08:02 - with that different table we would refer
08:04 - to that key as a foreign key we'll have
08:07 - more practice with this when we reach
08:09 - the topic on joins but yeah that is the
08:11 - foreign key constraint in MySQL

Cleaned transcript:

hey everybody so in this topic I'm going to explain what the foreign key constraint is a foreign key think of it as a primary key from one table that can be found within a different table using a foreign key we can establish a link between two tables there's two primary benefits to this in my transactions table if I were to take a look at the customer idea of who initiated this transaction I could refer to the customers table then find the first and last name of that customer we can do that when we reach the topic of joins but in this video we're going to focus more or less on just creating foreign Keys another benefit when you create a foreign key constraint that would create a link between two tables which prevents any actions that would destroy that link between them so here's an example I have three tables employees products and transactions I'm going to create a new table of customers I'm going to create this table and speed it up feel free to pause the video if you need to here's my table we have a customer ID which is the primary key a first name and a last name let's populate our customers table we have three customers Fred fish Larry Lobster bubble bass each has a unique customer ID we're going to create a link between our customers table and our transactions table via our customer ID I'm going to drop our table transactions drop table transactions we will recreate this table but apply that foreign key constraint so again I'll speed up the footage now what I'm going to do is create a third column to hold our customer ID and the data type isn't I would like to add a foreign key constraint to our customer ID column on the next line I will type foreign key list the column we're applying this foreign key constraint too within parentheses customer ID references our second table the customers table customers then the column of the primary key which was customer ID and that's all you need to do then I will select all from my table transactions here is our table we have a transaction ID this is the primary key the amount of the transaction then the customer ID of who initiated that transaction our customer ID column is the foreign key it points to the customers table based on what the customer ID is we can find the first and last name of that customer to find any active foreign keys go to your table in this case transactions underneath foreign keys this section will display any foreign keys that are applied to this table we currently have one transactions underscore ibfk underscore one if you need to drop a foreign key you would type alter table the name of the table that has the foreign key constraint that would be transactions drop foreign key then the name of this foreign key transactions underscore ibfk underscore one and that foreign key should be gone you could also give your foreign key a unique name alter table the name of the table add constraint then some unique name let's rename that constraint as FK underscore customer ID foreign key the name of the column customer ID references the name of the second table customers then the column that has the primary key customer ID so to apply a foreign key to a table that already exists this would be the syntax you don't necessarily need to name the constraint but if you would like to just add that line add constraint then some unique name let's add this foreign key constraint to a table that already exists it worked if I were to refresh my navigator window we now have a foreign key and it's the one that we gave a name to foreign key customer ID what we're going to do is drop the rows from our transactions table then reinsert them but we will add a value for each foreign key so let's get rid of this delete from transactions then select all from transactions here we are okay so let's insert some new rows I do want to set auto increment to be a thousand so I'm going to do that before we insert some rows alter table transactions Auto increment equals one thousand so let's take a look at transactions then we will insert some new rows insert into transactions R values we had four transactions we will need an amount and the customer ID of who initiated the transaction the first order is for 4.99 customer number three initiated this transaction the second order is 289 customer number two initiated that transaction 338 this is also customer three they returned back the same day 4.99 customer number one initiated that transaction we have our primary key from the transactions table as well as our foreign key each of these customer IDs references the customer ID column from the customers table we won't get to explore that until we reach the topic on joins so the other benefit of a foreign key constraint is that we now have a link between our transactions table and to the customers table MySQL will prevent any actions that would destroy that link between them unless we explicitly drop that foreign key constraint I'm going to delete some of our customers delete from customers where customer ID equals three we were right it doesn't appear that we can do so cannot delete or update a parent row a foreign key constraint fails so yeah that's the foreign key constraint it's a primary key from one table that's found also within a different table but when we're working with that different table we would refer to that key as a foreign key we'll have more practice with this when we reach the topic on joins but yeah that is the foreign key constraint in MySQL
