With timestamps:

00:00 - hey everybody today we are moving on to
00:02 - indexes and index allows for the quick
00:05 - lookup of a field however it takes up
00:07 - more memory and slows insert update and
00:10 - remove operations use them wisely
00:12 - utilizing an index if you're familiar
00:15 - with data structures and algorithms we
00:16 - are storing our data as a b tree if
00:20 - there's a field you search for but you
00:21 - don't do many updates I would recommend
00:24 - an index here's an example let's find
00:26 - any students named larrydb.students.find
00:31 - find anybody named Larry
00:36 - I'm going to make one adjustment though
00:38 - let's method chain the explain method
00:41 - and pass in this string
00:43 - execution stats
00:46 - that will give me the execution stats of
00:49 - this query
00:52 - I have five documents within my
00:53 - collection we have examined five
00:56 - documents to find Larry we're performing
00:58 - a linear search through our collection
01:01 - we're examining each document one by one
01:03 - I only have five documents that wouldn't
01:06 - take too long imagine I have thousands
01:08 - or hundreds of thousands of documents
01:10 - well a linear search is going to take a
01:12 - really long time we can speed up the
01:14 - lookup process by applying an index
01:17 - to apply an index to a field you would
01:19 - type something like this
01:21 - DB dot the name of the collection dot
01:24 - create
01:26 - index
01:27 - now what field would you like to apply
01:29 - an index for let's apply an index to our
01:32 - name field Name colon you can arrange
01:35 - the data in your index in ascending
01:38 - order by using one or descending order
01:40 - with negative one
01:42 - so with the name one would be
01:43 - alphabetical starting with a to z
01:47 - let's hit enter this is the name of our
01:50 - index name underscore one
01:53 - let's perform that query one more time
01:55 - DB dot students dot find find anybody
01:59 - named Larry name
02:02 - Larry
02:03 - then we will method chain the explain
02:06 - method
02:08 - pass in the string execution stats
02:12 - let's see what the results are
02:14 - this time we only examined one document
02:17 - examining one document is a lot less
02:20 - time consuming than examining five
02:22 - documents like I said I have a small
02:24 - data set it doesn't appear to make that
02:26 - big of a difference but if you have
02:27 - hundreds of thousands of documents it's
02:29 - going to save you a lot of time
02:31 - to get all your indexes you can use the
02:33 - get indexes method
02:34 - db.students.getindexes
02:39 - and we have two there already is an
02:42 - index applied to object IDs we have that
02:45 - by default and here's the index we
02:47 - created to look up names quickly we have
02:50 - two indexes technically to drop an index
02:52 - you'll need the name let's copy that
02:56 - DB dot students dot drop
03:00 - index
03:01 - place the name of the index within the
03:04 - drop index method
03:06 - and our index is dropped
03:08 - let's take a look at our indexes again
03:12 - db.student.getindexes and our index is
03:14 - gone
03:16 - now if you would like to create an index
03:18 - in compass you go to the indexes tab
03:21 - create index
03:23 - select a type or field name
03:26 - let's create an index for name
03:29 - selected type let's place our name in
03:31 - ascending order you can select more
03:33 - options but that's a little Advanced for
03:35 - us at this level let's begin with the
03:37 - basics
03:38 - and that's how to create an index in
03:40 - compass then to drop the index you just
03:42 - press this trash can icon type the index
03:45 - name
03:46 - underscore one
03:48 - and that's how to drop an index
03:51 - so in conclusion applying an index to a
03:53 - field allows for quick lookup of that
03:55 - field but it takes up more memory and it
03:58 - slows insert update and remove
04:00 - operations because you have to update
04:02 - the binary search tree use indexes
04:04 - wisely personally I would recommend an
04:07 - index if you're doing a lot of searching
04:09 - but not a lot of updating so that's an
04:11 - introduction to indexes in mongodb

Cleaned transcript:

hey everybody today we are moving on to indexes and index allows for the quick lookup of a field however it takes up more memory and slows insert update and remove operations use them wisely utilizing an index if you're familiar with data structures and algorithms we are storing our data as a b tree if there's a field you search for but you don't do many updates I would recommend an index here's an example let's find any students named larrydb.students.find find anybody named Larry I'm going to make one adjustment though let's method chain the explain method and pass in this string execution stats that will give me the execution stats of this query I have five documents within my collection we have examined five documents to find Larry we're performing a linear search through our collection we're examining each document one by one I only have five documents that wouldn't take too long imagine I have thousands or hundreds of thousands of documents well a linear search is going to take a really long time we can speed up the lookup process by applying an index to apply an index to a field you would type something like this DB dot the name of the collection dot create index now what field would you like to apply an index for let's apply an index to our name field Name colon you can arrange the data in your index in ascending order by using one or descending order with negative one so with the name one would be alphabetical starting with a to z let's hit enter this is the name of our index name underscore one let's perform that query one more time DB dot students dot find find anybody named Larry name Larry then we will method chain the explain method pass in the string execution stats let's see what the results are this time we only examined one document examining one document is a lot less time consuming than examining five documents like I said I have a small data set it doesn't appear to make that big of a difference but if you have hundreds of thousands of documents it's going to save you a lot of time to get all your indexes you can use the get indexes method db.students.getindexes and we have two there already is an index applied to object IDs we have that by default and here's the index we created to look up names quickly we have two indexes technically to drop an index you'll need the name let's copy that DB dot students dot drop index place the name of the index within the drop index method and our index is dropped let's take a look at our indexes again db.student.getindexes and our index is gone now if you would like to create an index in compass you go to the indexes tab create index select a type or field name let's create an index for name selected type let's place our name in ascending order you can select more options but that's a little Advanced for us at this level let's begin with the basics and that's how to create an index in compass then to drop the index you just press this trash can icon type the index name underscore one and that's how to drop an index so in conclusion applying an index to a field allows for quick lookup of that field but it takes up more memory and it slows insert update and remove operations because you have to update the binary search tree use indexes wisely personally I would recommend an index if you're doing a lot of searching but not a lot of updating so that's an introduction to indexes in mongodb
