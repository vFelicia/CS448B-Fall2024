With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well and in this video
00:03 - we're going to run some tests on both
00:05 - array lists and linked lists
00:07 - in java so sit back relax and enjoy the
00:10 - show
00:12 - all right let's begin we'll need both a
00:14 - linked list and an arraylist
00:16 - so linked list the data type will be
00:18 - integers and i will name this
00:20 - linked list equals new
00:23 - linked list again the data type is
00:25 - integer add a constructor boom we got
00:27 - ourselves a linked list
00:29 - and now we'll need an arraylist change
00:31 - linked to
00:32 - array this will be named arraylist
00:37 - make sure to pay attention the
00:38 - capitalization equals new arraylist
00:42 - and we'll need to keep track of the time
00:43 - we'll need a start time
00:45 - and time and elapsed time and these will
00:47 - be of the long data type we'll be
00:49 - working with nanoseconds
00:51 - so a long is preferable to an end a long
00:53 - is really just a really long integer
00:55 - think of it that way
00:56 - so we have start time end time
01:01 - and elapsed time
01:06 - okay and now we'll need to populate both
01:08 - our linked list and our arraylist and we
01:10 - can do that with a for loop
01:12 - we'll need a large sample size maybe one
01:14 - million elements that'll be good
01:16 - so int i equals zero we'll continue this
01:19 - as long as i
01:20 - is less than a million and i believe
01:23 - that's about a million
01:24 - yeah we're good okay then increment i by
01:26 - one during each iteration
01:28 - so i'm going to add i to both my linked
01:30 - list and
01:31 - my arraylist so we can add primitives
01:34 - because java has an autoboxing feature
01:36 - so even though these are integer objects
01:39 - we can still add primitives and be sure
01:41 - to add to our arraylist as well
01:43 - so arraylist.ad i okay let's move on
01:46 - now we'll keep track of the time we'll
01:48 - need to assign the start time of value
01:51 - and
01:51 - end time of value before and after our
01:53 - operation
01:54 - so let's say that start time equals and
01:57 - we can get
01:58 - the current time of our jvm by using
02:00 - system
02:01 - dot nano time method and let's take a
02:05 - look
02:05 - so this returns the current value of the
02:08 - running
02:09 - java virtual machines time source in
02:11 - nanoseconds
02:12 - so we will get the start time after we
02:15 - do something i'll just add a note here
02:16 - do something then we will get the end
02:19 - time
02:20 - so end time equals
02:23 - system dot nano time method and to
02:26 - calculate
02:27 - the elapsed time that will be elapsed
02:29 - time equals
02:30 - end time minus start time
02:34 - and then we'll probably want to display
02:36 - this so let's do that
02:37 - system.out.printline and let's say
02:41 - linked list i'll add a tab too
02:46 - plus elapsed time
02:50 - plus ns4 nanoseconds
02:53 - and let's just run this to test it so
02:56 - this portion of code
02:57 - really took right between here took 400
02:59 - nanoseconds
03:01 - okay let's actually do something now so
03:03 - let's get
03:04 - the first element within our linked list
03:06 - linked list
03:08 - dot get zero and let's see how long this
03:11 - takes
03:13 - okay 13 200 nanoseconds
03:16 - now with an arraylist let's copy
03:17 - everything that we have for our linked
03:19 - list
03:21 - and change linked list to arraylist
03:25 - and be sure to do that here as well
03:27 - array
03:28 - list and let's compare these so we are
03:31 - getting the index of zero for both our
03:33 - linked list
03:33 - and arraylist and we will compare them
03:36 - and it appears
03:37 - that our arraylist is slightly faster
03:40 - our linked list took
03:41 - 11 800 nanoseconds and our arraylist
03:44 - took
03:44 - 6700 so it looks like getting
03:47 - the first element of our linked list is
03:50 - going to be a little bit slower than our
03:52 - arraylist
03:52 - this time let's get something right in
03:54 - the middle of our linked list and
03:56 - arraylist
03:56 - so i'm going to turn this line to a
03:58 - comment and we will get
04:00 - the index of 500 000
04:04 - so that's right in the middle and do the
04:05 - same thing with arraylist as well
04:08 - so arraylist dot get
04:11 - 500 000.
04:14 - and let's see how long this takes okay
04:17 - so our linked list took way longer than
04:19 - our array list
04:20 - our linked list took 7.5 million
04:23 - nanoseconds compared to our arraylists
04:26 - 6900 nanoseconds okay so that's still
04:29 - way longer with a linked list
04:31 - now let's try something near the end of
04:33 - our linked list and array list
04:34 - what about the last element linked list
04:38 - die get 999 999
04:42 - so that is the last index in our linked
04:44 - list and array list
04:45 - we have one million elements and this is
04:47 - exclusive
04:48 - and the first element has an index of
04:51 - zero
04:51 - so let's do the same thing with
04:54 - arraylist
04:56 - die get 999 99999
05:00 - and here are the results our linked list
05:02 - took 63 000 nanoseconds compared to our
05:05 - arraylist
05:06 - 17 000. now the reason that our linked
05:08 - list took less time
05:10 - to retrieve and index at the end is
05:12 - because this linked list is a
05:14 - doubly linked list so we can begin at
05:16 - the head and work our way towards the
05:18 - tail or begin at the tail and work our
05:20 - way backwards to the hud
05:21 - so since this index is right at the end
05:23 - it's actually going to be very
05:24 - easy to retrieve this index whereas in
05:28 - the middle is actually going to be the
05:29 - worst possible spot for a linked list
05:31 - because we can start at either end but
05:32 - it's still going to take the same amount
05:34 - of time to get to the middle
05:35 - so it appears that accessing an element
05:37 - from an arraylist is always faster than
05:39 - a linked list and that's to be expected
05:41 - because with an arraylist we have a
05:43 - random access of elements
05:44 - unlike with a linked list we have to
05:46 - begin at one end of our linked list
05:48 - and traverse our linked list until we
05:50 - get to the index that we're looking for
05:52 - now let's add or remove an element from
05:54 - our linked list and array list maybe
05:56 - just remove because it's going to take
05:57 - really the same amount of time
05:58 - so linked list dot remove
06:02 - and let's remove the first element so
06:05 - index
06:05 - zero and do the same thing with
06:07 - arraylist array
06:09 - list dot remove index
06:12 - zero and let's take a look again
06:16 - okay so it appears that our linked list
06:18 - was actually faster this time
06:20 - 17 000 nanoseconds compared to 2.2
06:24 - million nanoseconds of an arraylist and
06:26 - the reason that our arraylist took
06:28 - longer
06:28 - is because we need to shift all elements
06:31 - to the left
06:32 - after removing an element so we had to
06:34 - shift one million elements after
06:35 - removing the first element
06:37 - now let's remove something near the
06:39 - middle so let's remove
06:41 - index number five hundred thousand so
06:43 - linked list
06:44 - dot remove five hundred thousand and do
06:47 - the same
06:48 - thing with the arraylist be sure to
06:50 - comment this line out
06:52 - arraylist dot remove 500
06:56 - 000. and here are the results
06:59 - so it looks like our linked list took a
07:01 - lot longer this time 7 million
07:02 - nanoseconds compared to 1.6 million
07:05 - nanoseconds for an arraylist
07:07 - so with our arraylist there were less
07:09 - elements to shift this time because we
07:11 - were right in the middle
07:13 - but with our linked list we still had to
07:14 - navigate to the middle to remove one of
07:17 - these elements
07:18 - and then let's remove the element at the
07:20 - end of both
07:21 - our linked list and our array list
07:23 - linked list that remove
07:25 - 999 999 and do the same thing with
07:28 - arraylist
07:30 - arraylist.remove 999
07:34 - 999. and this time
07:38 - our linked list is just slightly slower
07:41 - than our arraylist
07:42 - adding or removing elements near the end
07:44 - of an array list is actually fairly easy
07:46 - the closer that we
07:47 - insert or delete near the end the less
07:49 - time it's going to take because we have
07:51 - to shift
07:52 - less elements and with a linked list
07:54 - well this is a doubly linked list
07:56 - so accessing the last element doesn't
07:58 - really take too long
07:59 - if it's near the middle it's going to
08:00 - take forever actually so it seems that
08:03 - in most situations an arraylist is going
08:05 - to be better than a linked list
08:07 - however if you have to do a lot of
08:08 - inserting or deleting
08:10 - especially if it's a large data set a
08:12 - linked list might be better
08:13 - but it seems that an array list is going
08:15 - to be more flexible for most
08:17 - applications
08:18 - so that is linked lists versus array
08:20 - lists if you would like a copy of all
08:22 - this code i will post this to the
08:24 - comment section down below
08:25 - and well yeah that's linked lists versus
08:27 - arraylists and computer science

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video we're going to run some tests on both array lists and linked lists in java so sit back relax and enjoy the show all right let's begin we'll need both a linked list and an arraylist so linked list the data type will be integers and i will name this linked list equals new linked list again the data type is integer add a constructor boom we got ourselves a linked list and now we'll need an arraylist change linked to array this will be named arraylist make sure to pay attention the capitalization equals new arraylist and we'll need to keep track of the time we'll need a start time and time and elapsed time and these will be of the long data type we'll be working with nanoseconds so a long is preferable to an end a long is really just a really long integer think of it that way so we have start time end time and elapsed time okay and now we'll need to populate both our linked list and our arraylist and we can do that with a for loop we'll need a large sample size maybe one million elements that'll be good so int i equals zero we'll continue this as long as i is less than a million and i believe that's about a million yeah we're good okay then increment i by one during each iteration so i'm going to add i to both my linked list and my arraylist so we can add primitives because java has an autoboxing feature so even though these are integer objects we can still add primitives and be sure to add to our arraylist as well so arraylist.ad i okay let's move on now we'll keep track of the time we'll need to assign the start time of value and end time of value before and after our operation so let's say that start time equals and we can get the current time of our jvm by using system dot nano time method and let's take a look so this returns the current value of the running java virtual machines time source in nanoseconds so we will get the start time after we do something i'll just add a note here do something then we will get the end time so end time equals system dot nano time method and to calculate the elapsed time that will be elapsed time equals end time minus start time and then we'll probably want to display this so let's do that system.out.printline and let's say linked list i'll add a tab too plus elapsed time plus ns4 nanoseconds and let's just run this to test it so this portion of code really took right between here took 400 nanoseconds okay let's actually do something now so let's get the first element within our linked list linked list dot get zero and let's see how long this takes okay 13 200 nanoseconds now with an arraylist let's copy everything that we have for our linked list and change linked list to arraylist and be sure to do that here as well array list and let's compare these so we are getting the index of zero for both our linked list and arraylist and we will compare them and it appears that our arraylist is slightly faster our linked list took 11 800 nanoseconds and our arraylist took 6700 so it looks like getting the first element of our linked list is going to be a little bit slower than our arraylist this time let's get something right in the middle of our linked list and arraylist so i'm going to turn this line to a comment and we will get the index of 500 000 so that's right in the middle and do the same thing with arraylist as well so arraylist dot get 500 000. and let's see how long this takes okay so our linked list took way longer than our array list our linked list took 7.5 million nanoseconds compared to our arraylists 6900 nanoseconds okay so that's still way longer with a linked list now let's try something near the end of our linked list and array list what about the last element linked list die get 999 999 so that is the last index in our linked list and array list we have one million elements and this is exclusive and the first element has an index of zero so let's do the same thing with arraylist die get 999 99999 and here are the results our linked list took 63 000 nanoseconds compared to our arraylist 17 000. now the reason that our linked list took less time to retrieve and index at the end is because this linked list is a doubly linked list so we can begin at the head and work our way towards the tail or begin at the tail and work our way backwards to the hud so since this index is right at the end it's actually going to be very easy to retrieve this index whereas in the middle is actually going to be the worst possible spot for a linked list because we can start at either end but it's still going to take the same amount of time to get to the middle so it appears that accessing an element from an arraylist is always faster than a linked list and that's to be expected because with an arraylist we have a random access of elements unlike with a linked list we have to begin at one end of our linked list and traverse our linked list until we get to the index that we're looking for now let's add or remove an element from our linked list and array list maybe just remove because it's going to take really the same amount of time so linked list dot remove and let's remove the first element so index zero and do the same thing with arraylist array list dot remove index zero and let's take a look again okay so it appears that our linked list was actually faster this time 17 000 nanoseconds compared to 2.2 million nanoseconds of an arraylist and the reason that our arraylist took longer is because we need to shift all elements to the left after removing an element so we had to shift one million elements after removing the first element now let's remove something near the middle so let's remove index number five hundred thousand so linked list dot remove five hundred thousand and do the same thing with the arraylist be sure to comment this line out arraylist dot remove 500 000. and here are the results so it looks like our linked list took a lot longer this time 7 million nanoseconds compared to 1.6 million nanoseconds for an arraylist so with our arraylist there were less elements to shift this time because we were right in the middle but with our linked list we still had to navigate to the middle to remove one of these elements and then let's remove the element at the end of both our linked list and our array list linked list that remove 999 999 and do the same thing with arraylist arraylist.remove 999 999. and this time our linked list is just slightly slower than our arraylist adding or removing elements near the end of an array list is actually fairly easy the closer that we insert or delete near the end the less time it's going to take because we have to shift less elements and with a linked list well this is a doubly linked list so accessing the last element doesn't really take too long if it's near the middle it's going to take forever actually so it seems that in most situations an arraylist is going to be better than a linked list however if you have to do a lot of inserting or deleting especially if it's a large data set a linked list might be better but it seems that an array list is going to be more flexible for most applications so that is linked lists versus array lists if you would like a copy of all this code i will post this to the comment section down below and well yeah that's linked lists versus arraylists and computer science
