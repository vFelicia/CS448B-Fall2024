With timestamps:

00:00 - hey how's it going everybody it's you
00:01 - bro hope you're doing well and in
00:03 - today's video I'm going to teach you
00:04 - everything you need to know to get
00:06 - started using mongodb in about an hour
00:08 - so sit back relax and enjoy the show
00:12 - hey if you'd like free stuff you should
00:14 - probably subscribe because I release
00:16 - free courses every once in a while when
00:18 - I feel like it that is all what the heck
00:21 - is mongodb it's a no SQL database
00:24 - management system that can manage a
00:26 - humongous amount of data and it's
00:28 - becoming increasingly popular it's
00:30 - favored by many big tech companies
00:32 - unlike relational database Management
00:35 - Systems mongodb uses a nosql format to
00:39 - store and retrieve data nosql means not
00:42 - only SQL it's where data is stored in
00:45 - various formats besides a traditional
00:47 - SQL table rather than storing our data
00:50 - in rows and columns with the table using
00:52 - SQL we store related data as a single
00:56 - document think of each document as a
00:58 - single row and a table in SQL data in
01:01 - each document is stored as field value
01:03 - pairs similar to a Json format but it's
01:07 - technically bsawn binary JavaScript
01:09 - object notation but it behaves very
01:12 - similar similarly for all intents and
01:13 - purposes the general idea is that data
01:16 - which is frequently accessed together is
01:19 - stored together rather than in Separate
01:21 - Tables because SQL joins quite frankly
01:24 - are a pain in the ass this is how our
01:26 - nosql database is arranged we have a
01:29 - document a document is a group of field
01:32 - value pairs to represent an object a
01:35 - collection is a group of one or more
01:37 - documents and a database is a group of
01:41 - one or more collections this makes
01:43 - working with and scaling our database
01:45 - like really really easy before we do
01:48 - begin there are a few prerequisites for
01:50 - this series we will be working with
01:52 - document objects I would recommend at
01:55 - least some experience with an
01:56 - object-oriented programming language of
01:58 - your choosing it doesn't matter if it's
02:00 - python Java C plus plus C sharp
02:03 - JavaScript doesn't matter just pick one
02:05 - so let's get started I will show you
02:07 - what you need to download
02:08 - all right let's get started everybody
02:10 - here is the installation process for
02:12 - mongodb so go to this website
02:15 - mongodb.com go to resources
02:19 - server
02:21 - on the left sidebar go to installation
02:25 - here's a list of different installation
02:27 - tutorials depending on your operating
02:29 - system I'm running Windows I'll select
02:31 - Windows let's scroll down
02:34 - we're looking for install mongodb
02:37 - Community Edition all you have to do is
02:38 - follow the numbered steps beginning with
02:40 - one we will go to the download Center
02:42 - I'll open this in a new tab because I
02:45 - don't want to close out of this window
02:48 - select the current version
02:51 - select your platform again I'm running
02:53 - Windows
02:54 - and the installation package I'll keep
02:57 - that the same
02:58 - and download
02:59 - pick a place to save the installer to
03:01 - I'll keep it within my documents folder
03:04 - but you choose your own place
03:06 - and I will open this when it's done
03:10 - so we're going to click next
03:12 - accept the license agreement next
03:16 - complete install mongod as a service
03:18 - make sure that's checked
03:20 - next
03:22 - also be sure to install the mongodb
03:24 - compass program it's a graphical user
03:26 - interface
03:28 - then give it a couple minutes
03:32 - now that mongodb is installed we can
03:34 - finish this may open compass compass is
03:37 - a graphical user interface for managing
03:39 - our database we'll be using Compass
03:42 - intermittently
03:43 - in fact I recommend creating a desktop
03:45 - shortcut
03:46 - you just have to open it
03:48 - then to establish a connection you hit
03:50 - the green connect button I'll be using
03:52 - Compass intermittently just to show you
03:54 - how everything works let's also install
03:57 - the mongodb shell
03:59 - to install the shell we're going to go
04:00 - to the left sidebar and where is it
04:03 - there mongodb shell also known as
04:06 - mangosh like oh my gosh
04:09 - we are going to go to the download
04:10 - Center
04:13 - select the current version select your
04:15 - platform I'm running Windows
04:17 - and the package will keep that the same
04:19 - and download
04:22 - we'll open this when it's done
04:24 - we will unzip this folder
04:27 - so right click extract all
04:32 - we will need the file path to the
04:34 - executable let's open this folder
04:37 - go to bin
04:39 - and we can copy this file location let's
04:41 - right click on our executable
04:43 - go to properties copy this file location
04:48 - it should be within the bin folder
04:50 - then we're going to add that file path
04:52 - to our environment variables
04:56 - really we can just search for
04:58 - environment variables
05:01 - we're within system properties go to the
05:04 - advanced tab environment variables
05:07 - underneath system variables let's
05:09 - pretend that this wasn't here
05:11 - click new
05:13 - come up with a variable name sh is
05:16 - good
05:17 - then paste that file location
05:20 - hit okay
05:23 - and close
05:24 - so if we go to that folder
05:27 - and open the executable
05:30 - this is the mongodb shell I'm going to
05:33 - make the font size a little bit bigger
05:38 - to establish a connection to our
05:39 - database type sh
05:43 - and that should establish a connection
05:46 - to clear your screen type CLS
05:49 - to exit type exit
05:52 - personally I don't like using this
05:54 - executable by itself I like using vs
05:57 - code if you would like to use vs code
05:59 - for using the Shell here's how
06:02 - if you would like to use vs code for
06:04 - using the Shell here's how So within vs
06:06 - code we're going to download the mongodb
06:09 - extension so go to extensions
06:11 - search for mongodb
06:14 - it should be this one
06:16 - we will install this extension there
06:19 - should be a new icon for mongodb let's
06:21 - click on it
06:22 - to establish a connection we just have
06:24 - to click on localhost
06:26 - the mongodb connection was successful
06:29 - then to open our terminal right click
06:32 - launch mongodb shell
06:35 - let's minimize this
06:38 - close out of this window pull up this
06:40 - terminal
06:41 - we are utilizing the mongodb Shell with
06:44 - vs code
06:45 - so to exit you type exit
06:48 - to establish a connection you can type
06:49 -  sh
06:52 - to clear your screen you can type CLS
06:54 - and that is everything you need to know
06:56 - to get started
06:59 - everybody here's how we can create and
07:01 - use databases in mongodb to show all
07:04 - databases type show
07:07 - DBS that will give you a list of all
07:10 - current databases I have three admin
07:13 - config and local
07:14 - to use a database type use then select a
07:17 - database name to use admin I can say use
07:20 - admin we have switched to dbadmin now if
07:24 - you use a database that doesn't exist
07:27 - let's say we will create a database for
07:28 - a school use school that's how you can
07:31 - create a database we are now within a
07:34 - new database named School however if I
07:36 - were to show my current databases my
07:39 - school database doesn't show up it's not
07:42 - visible because it's empty we'll need to
07:44 - fill it with something
07:45 - let's add a collection to our school to
07:48 - do that type DB dot we will use the
07:51 - create collection method this method
07:55 - ends with a set of parentheses just like
07:57 - a function or method in typical
07:58 - programming languages within the set of
08:01 - parentheses we are going to pass in an
08:03 - argument for a name for this collection
08:05 - let's create a collection of students
08:09 - and we are returned with OK we have
08:12 - created one new collection
08:14 - let's clear our screen show our
08:16 - databases again show DBS and here is our
08:20 - new database of school
08:22 - currently we are within our school
08:23 - database as you can see next to my
08:25 - cursor to drop this current database you
08:27 - can type DB dot drop
08:31 - database
08:32 - method
08:34 - and our database is dropped
08:37 - let's show our databases again
08:40 - and our school database is no longer
08:42 - there that is how to use create and drop
08:45 - a database in the mongodb Shell if you
08:48 - would like to use Compass here's how
08:52 - we have our three default databases
08:54 - admin config local to create a database
08:57 - you can click this green button
08:59 - we'll need a database name let's say
09:01 - school again
09:02 - we will create a collection of students
09:05 - within our database
09:07 - you can add additional preferences but
09:09 - we'll cover that later
09:10 - we will create our database
09:13 - and here's our database of school there
09:16 - is one collection of students but
09:18 - students doesn't have any documents yet
09:19 - which we'll cover in the next topic to
09:22 - delete a database in mongodb compass
09:24 - select a database from the sidebar then
09:27 - hit the trash can icon to delete it
09:30 - type the name of the database to drop
09:32 - the database
09:33 - so make sure that the name of the
09:34 - database is typed then drop database
09:38 - and that is how to use create and drop a
09:40 - database in mongodb compass
09:43 - all right we're moving on everybody now
09:45 - I'm gonna show you how we can insert
09:47 - documents into a mongodb database let's
09:50 - be sure that we're using our current
09:52 - database in the last topic we were using
09:54 - the database of school
09:56 - let's clear our screen
09:58 - to insert a document within the database
10:01 - we're working with type DB then the name
10:03 - of a collection if a collection is found
10:06 - within this database we have created a
10:08 - collection of students if this
10:11 - collection doesn't exist one will be
10:12 - created for you
10:16 - db.students.we will use the insert one
10:19 - method within the set of parentheses we
10:22 - will place a document which is enclosed
10:24 - within a set of curly braces within the
10:27 - set of curly braces we can list as many
10:29 - field value pairs as we would like
10:32 - let's create a name field with the value
10:34 - of SpongeBob
10:36 - each field value pair is comma separated
10:39 - let's add another field value pair
10:42 - maybe an age age will be 30.
10:46 - then a GPA
10:48 - grade point average
10:50 - SpongeBob has a solid 3.2 GPA
10:54 - let's enter this command
10:56 - that was acknowledged
10:58 - to return all documents within a
11:00 - collection type DB the name of the
11:03 - collection in this case students dot we
11:06 - can use the find method here are the
11:08 - current documents within my collection
11:10 - we only have one
11:11 - here's the object ID that's created
11:14 - automatically the name is SpongeBob age
11:16 - 30 GPA 3.2
11:19 - now you can insert more than one
11:21 - document at a time by using the insert
11:24 - menu function
11:25 - DB type the name of the collection
11:28 - students in this case
11:30 - we will insert many documents we will
11:34 - place all documents to be inserted
11:36 - within an array add a set of straight
11:38 - brackets this is the exact same kind of
11:40 - array from different programming
11:42 - languages however in Python I think that
11:44 - would be a list technically
11:46 - maybe we need to insert three documents
11:49 - we would need three sets of curly braces
11:51 - each comma separated
11:55 - within each set of curly braces we would
11:58 - list all of the different field value
12:00 - pairs so let's begin with the first
12:03 - we have name
12:05 - Patrick
12:08 - separate each field value pair with a
12:10 - comma
12:11 - then we have age of let's make Patrick
12:13 - 38
12:16 - then GPA
12:17 - Patrick is at 1.5
12:21 - that's enough for our first document
12:23 - let's go to the second document move
12:25 - over to the second set of curly braces
12:27 - for the name
12:29 - this will be
12:31 - Sandy
12:34 - Sandy's age is
12:37 - I don't know 27 sounds good
12:40 - GPA Sandy smart she has a solid 4.0
12:45 - then let's go to the last document
12:48 - name
12:50 - maybe Gary
12:53 - 's age is 18.
12:57 - GPA
12:59 - 2.5
13:01 - that's good enough for now this array
13:03 - contains several documents each document
13:06 - is enclosed within a set of curly braces
13:09 - within each document you can have as
13:11 - many field value pairs as you like
13:13 - they all don't need to be consistent
13:15 - let's insert all of these documents they
13:18 - were all acknowledged we have three new
13:19 - object IDs
13:21 - let's use the find method again to
13:23 - display all of them DB dot students dot
13:27 - find here are the four objects found
13:29 - within our database
13:31 - SpongeBob Patrick Sandy Gary
13:34 - that's how to insert documents using the
13:36 - Shell next we'll do the same thing but
13:38 - use Compass instead if you're using
13:40 - Compass here's how to insert documents
13:42 - into a collection here are the four
13:44 - documents we created previously I'm just
13:46 - going to go ahead and delete these
13:50 - to add a new document make sure you're
13:52 - within the current database you're
13:53 - working with go to the current
13:56 - collection RS students we will add data
14:00 - you can import a Json or CSV file or you
14:03 - can type them manually by inserting
14:05 - document
14:06 - a document is pre-generated for you I'm
14:09 - just going to go ahead and delete that
14:11 - we'll Begin by inserting SpongeBob you
14:13 - need a set of curly braces
14:15 - then list all of the name value pairs
14:18 - name SpongeBob
14:21 - separate each field value pair with a
14:23 - comma
14:24 - age 30.
14:26 - GPA 3.2
14:29 - if you have this warning you will need
14:31 - to probably hit the format button that
14:33 - should go away
14:34 - then insert and that is how to insert
14:37 - one document to insert many it's the
14:39 - same process as before
14:42 - but you're going to enclose all of your
14:43 - documents within an array a set of
14:46 - straight brackets
14:47 - so if we need three documents add three
14:51 - sets of curly braces all comma separated
14:54 - we had Patrick
14:58 - age I think he was 38.
15:01 - GPA 1.5
15:06 - name Sandy
15:09 - age 27 I'm going to move this down a
15:12 - little bit so you can see
15:14 - GPA
15:16 - 4.0
15:18 - then name
15:20 - Gary
15:22 - age 18.
15:26 - GPA
15:28 - 2.5
15:30 - let's reformat insert and here are the
15:33 - three documents we have inserted all
15:35 - right and that is how to insert
15:37 - documents into a mongodb database using
15:39 - Compass
15:40 - all right everybody it's about time I
15:42 - discuss some basic data types in mongodb
15:45 - we will Begin by inserting a new
15:47 - document into our students collection
15:51 - db.students.insert1 we're inserting a
15:54 - document add a set of curly braces the
15:57 - first data type I'll discuss is a string
15:59 - suppose we have a field of name a string
16:02 - is a series of text within quotes these
16:04 - can be either double quotes or single
16:06 - quotes but typically I like to put them
16:08 - within double quotes a string is a
16:10 - series of text like a name
16:12 - Like Larry strings can contain spaces we
16:16 - could enter in a first name space then a
16:18 - last name Larry Lobster
16:20 - they can also contain numbers
16:23 - larry123 however in a string we treat
16:25 - the numbers differently we read the
16:27 - Morris characters rather than actual
16:29 - numbers
16:31 - so let's stick with name Larry that's a
16:34 - string it's a series of characters then
16:36 - we have integers and integer is a whole
16:39 - number
16:40 - let's create a field for age Larry will
16:43 - be 32. whole integers don't contain
16:46 - decimal portions it wouldn't make sense
16:48 - to enter in 32.5 we don't really keep
16:51 - track of people's half birthdays and
16:53 - stuff so age would be a whole number
16:55 - those are integers whole numbers
16:58 - then we have doubles a double is a
17:01 - number that contains a decimal portion
17:03 - maybe a grade point average
17:06 - grade point averages typically contain
17:08 - decimals Larry has a 2.8 GPA
17:12 - it's a double because there's a decimal
17:14 - portion
17:15 - integers are whole numbers doubles are
17:18 - numbers that contain a decimal
17:20 - then we have booleans booleans are
17:23 - either true or they're false it's kind
17:26 - of like a light switch it's only on or
17:28 - off there's only two states
17:30 - let's create a field for full time
17:33 - is the student full time this can be
17:35 - either true or false
17:38 - Larry is too busy working out all the
17:40 - time he is a part-time student not a
17:43 - full-time student we'll set that field
17:45 - to be false date objects are pretty
17:47 - popular in mongodb suppose we have a
17:51 - registration date
17:53 - register date
17:54 - to create a date object you can use the
17:56 - new keyword followed by a call to the
17:59 - date Constructor if you don't pass any
18:01 - arguments to the date Constructor you'll
18:03 - use the current time in the UTC time
18:06 - zone
18:06 - otherwise you can pass a date and time
18:08 - like 2023 January 2nd you could add a
18:13 - time too
18:15 - but we'll just stick with the current
18:17 - date and time that's assigned to us
18:19 - those are date objects
18:21 - the next data type is null null means no
18:24 - value I'll create a field for a
18:26 - graduation date
18:28 - and I will set that to be null
18:31 - Larry is a current student but we don't
18:33 - know when he's going to graduate all
18:35 - we're really doing is creating a
18:36 - placeholder we don't have a date yet so
18:39 - we can set that to be null that's to be
18:41 - filled in later
18:42 - so null means no value then we have
18:46 - arrays much like in modern programming
18:48 - languages is kind of like a variable
18:50 - that has more than one value but in
18:53 - mongodb we have a field that can have
18:55 - more than one value let's create a field
18:58 - of courses what courses is Larry
19:01 - enrolled in place all values within a
19:04 - set of straight brackets
19:06 - let's insert multiple values what
19:09 - courses is Larry in maybe he's in
19:11 - biology
19:13 - these values are all comma separated
19:16 - chemistry
19:19 - then calculus
19:22 - so that's an array they're all enclosed
19:24 - within a set of square brackets they
19:27 - allow one field to contain multiple
19:29 - values then we have nested documents
19:32 - this would be good for an address to
19:35 - create a nested document you use a set
19:37 - of curly braces within the nested
19:39 - document we can list some field value
19:41 - pairs how about a street
19:45 - let's come up with a street name one two
19:47 - three fake street is good
19:51 - than a city
19:56 - Bikini Bottom
19:59 - and a zip code
20:02 - one two three four five
20:04 - it is possible to have documents within
20:06 - documents which is what we did with the
20:08 - address let's enter everything to see if
20:10 - it works yeah that was acknowledged
20:14 - let's head to Compass
20:16 - refresh and here is Larry name Larry h32
20:20 - GPA 2.8 full time is set to false he's a
20:24 - part-time student here is Larry's
20:26 - registration date and time we're using
20:28 - the UTC time zone
20:30 - his graduation date is set to null all
20:33 - of his courses that he's in is stored
20:35 - within an array and his address is
20:38 - stored as a nested document alright
20:40 - everybody and those are a few basic data
20:42 - types you should know in mongodb
20:44 - all right everybody today I'm going to
20:46 - show you how we can both sort and limit
20:48 - documents in mongodb to return all
20:51 - documents we can type DB the name of the
20:54 - collection dot then we can use the find
20:56 - method to return all documents to sort
20:59 - these documents in some sort of order
21:01 - again we would type DB the name of the
21:04 - collection students dot find method then
21:07 - we'll do some method chaining after the
21:09 - find method add dot then we will call
21:12 - the sort method
21:14 - the sort method takes a document by
21:16 - which field would we like to sort let's
21:18 - sort names in alphabetical order we
21:21 - would type the name of the field Name
21:22 - colon then one for alphabetical order or
21:26 - negative one for reverse alphabetical
21:28 - order so if we were to sort by
21:31 - alphabetical order here's the results we
21:34 - have Gary then Larry Patrick Sandy
21:37 - SpongeBob then reverse alphabetical
21:39 - order that was
21:46 - Name colon negative one now we have
21:49 - SpongeBob Sandy Patrick Larry Gary let's
21:52 - sort our documents by GPA grade point
21:55 - average
21:57 - so again we use the find method then
22:00 - we'll method chain the sort method we're
22:02 - passing in a document object with our
22:04 - criteria we will sort by GPA in
22:08 - ascending order so we will use one I'm
22:11 - going to copy this because I'm going to
22:12 - use it later
22:14 - okay now we're sorting by GPA Patrick
22:17 - has the lowest GPA 1.5 2.5 2.8 3.2 then
22:23 - 4.
22:25 - to sort our GPA by deciding order we
22:27 - would type GPA negative one
22:30 - then we have Sandy at the top with the
22:32 - gpf4 then SpongeBob with 3.2 2.8 2.5 1.5
22:39 - now we have the limit method we can
22:41 - limit the amount of documents that are
22:43 - returned to us let's type DB dot
22:46 - students dot find method dot limit
22:49 - method
22:50 - we will pass the number of documents we
22:52 - would like return to us as an argument
22:54 - if I would like one document returned to
22:56 - us I will pass in one currently my
22:59 - documents are sorted by object ID this
23:02 - would give us the first document of
23:04 - SpongeBob
23:05 - if I were to use limit 3 we would be
23:08 - returned three documents SpongeBob
23:11 - Patrick Sandy
23:13 - we can combine both the sort and the
23:15 - limit methods too
23:17 - I would like to return the student with
23:19 - the highest GPA we'll use the find
23:21 - method
23:22 - then method chain the sort method
23:25 - we are sorting by GPA
23:28 - we're going to sort in decreasing order
23:30 - so negative one followed by the limit
23:33 - method
23:35 - I would like just one document who has
23:38 - the highest GPA that would be Sandy with
23:41 - a GPA of four
23:42 - who has the lowest GPA we should sort an
23:46 - increasing order that would be one then
23:48 - limit one
23:49 - so Patrick has the lowest GPA of 1.5
23:54 - now let's work with sorting and limiting
23:55 - Encompass to sort the documents in your
23:58 - collection you can press more options
24:01 - then add some sort criteria I will sort
24:04 - by name
24:06 - colon one
24:08 - then find
24:10 - so we have Gary Larry Patrick Sandy
24:12 - SpongeBob
24:14 - then negative one for reverse
24:16 - alphabetical order
24:18 - SpongeBob Sandy Patrick Larry Gary
24:21 - let's sort by GPA
24:24 - GPA negative one that would give us
24:27 - decreasing order so Sandy's at the top
24:31 - to limit the amount of documents that
24:32 - are returned you can enter in a number
24:34 - for the limit box I will limit the
24:36 - records to one so we are returned with
24:38 - Sandy she has the highest GPA limit
24:41 - three would give us the top three
24:42 - students or leave limit MDU to return
24:45 - all documents all right everybody so
24:47 - that is basic sorting and limiting in
24:49 - mongodb
24:51 - hey everybody in this topic I'm going to
24:53 - explain the find method in mongodb to
24:56 - use the find a method type DB the name
24:59 - of the collection you're working with
25:00 - then add the find method that will
25:02 - return all documents within this
25:04 - collection but at times you might not
25:06 - want all documents you might want
25:08 - specific documents here's how we will
25:11 - add some arguments to the find method DB
25:13 - Dot students.find
25:16 - the first argument is a document object
25:18 - the parameter is the query parameter it
25:22 - specifies selection filters maybe you
25:25 - just need one student well you would
25:26 - just list that criteria here
25:29 - I would like any students with the name
25:32 - of SpongeBob
25:34 - that would return any document where the
25:36 - first name is SpongeBob that would
25:38 - return everybody that has that name I'm
25:40 - just going to copy this
25:43 - let's find any students that have a GPA
25:46 - of 4.0 within our document the search
25:49 - filter is GPA 4.0
25:52 - that would give us Sandy
25:55 - let's find if any students are not
25:58 - full-time
26:00 - full time I will set that to be false
26:03 - there is one student Larry full time is
26:06 - set to false
26:07 - the query parameter is very similar to a
26:10 - where clause in SQL you can even use
26:12 - more than one filter search for any
26:15 - student that has a GPA
26:18 - of 4.0 each filter is comma separated as
26:22 - well as full-time being true
26:26 - with my data set this does not return
26:28 - any results but to add more than one
26:31 - filter they're comma separated within a
26:33 - document body
26:35 - with the find method there is a second
26:38 - parameter that is the projection
26:41 - parameter we would pass another document
26:44 - body they're each comma separated if you
26:47 - don't specify the query parameter you
26:49 - would just return all documents with the
26:51 - projection parameter you can return
26:54 - specific Fields maybe you don't want all
26:57 - the information that's available perhaps
26:59 - I would just like each Student's name
27:01 - so we would set the field to be true
27:04 - you can use one as well but my own
27:06 - preference is true just because it's
27:08 - more readable return every document but
27:11 - only give their name
27:13 - and here they are mongodb will give you
27:16 - the ID regardless you can set that to be
27:19 - false within the projection parameter
27:22 - underscore ID false I just want
27:26 - everybody's name
27:28 - there we are SpongeBob Patrick Sandy
27:30 - Gary Larry let's get every student's
27:33 - name as well as their GPA so ID I will
27:36 - set that to be false I don't want that
27:39 - name will be true I would like that
27:42 - GPA will also be true I would like that
27:46 - here is every student's name as well as
27:48 - their GPA
27:49 - so that's the projection parameter if
27:52 - there's a field you would like or don't
27:54 - want you can set that to be either true
27:56 - or false when you display your data all
27:58 - right let's do the same thing with
28:00 - compass
28:01 - with compass this text box is for the
28:04 - find method So within a set of curly
28:07 - braces I would like to find any name
28:10 - that's SpongeBob
28:12 - then press find that returns one result
28:16 - return any student with the GPA of 4.0
28:20 - that's Sandy
28:22 - return any students that are not
28:24 - full-time
28:26 - full-time is false
28:28 - that gives us Larry
28:31 - now if you go to more options there is a
28:33 - projection parameter if you only want
28:35 - some data let's find every student but
28:38 - for the projection parameter I would
28:41 - only like their name I'll set that to be
28:43 - true
28:44 - and their GPA
28:46 - that's true as well
28:49 - again that still gives us the ID let's
28:52 - set that to be false if you don't want
28:53 - that
28:55 - ID
28:56 - false
28:58 - and that should get rid of the ideas
29:00 - here's each Student's name and their GPA
29:03 - all right everybody that's the find
29:04 - method two optional parameters that we
29:07 - can send arguments to are the query
29:09 - parameter that's selection criteria it's
29:12 - similar to a where clause in SQL we're
29:14 - trying to limit the results
29:16 - and the projection parameter that's
29:18 - similar to selected columns in SQL
29:21 - you're looking for specific Fields
29:22 - alright everybody and that is the find
29:24 - method in mongodb well hello again
29:27 - everybody today I will be explaining how
29:29 - we can update documents in mongodb to do
29:32 - that we would type DB the name of the
29:34 - collection we're working with in this
29:36 - case students we can either update one
29:38 - document or update many let's update one
29:42 - we will use the update 1 method there
29:45 - are two parameters set up
29:47 - filter
29:49 - and update
29:51 - filter is the selection criteria for the
29:54 - update So within a set of curly braces
29:57 - we will pass some criteria let's update
30:00 - anybody's name that's SpongeBob
30:07 - it's basically just selection criteria
30:10 - the second parameter it's another
30:12 - document body is the update parameter
30:15 - what are the modifications we would like
30:17 - to apply
30:18 - we will utilize the set operator which
30:22 - is preceded with the dollar sign the set
30:25 - operator replaces the value of a field
30:27 - so after the set operator add a colon
30:30 - then another set of curly braces yes
30:33 - there's a lot of curly braces in mongodb
30:35 - So within this set of curly braces after
30:39 - the set operator that's where we can
30:41 - make our changes you can add or change
30:43 - the value of a field Spongebob doesn't
30:46 - have a full time field
30:49 - we can add that with the set operator if
30:52 - this field already exists we would
30:54 - update it so let's say SpongeBob is a
30:57 - full-time student
30:58 - let's execute this command it was
31:01 - acknowledged that's true we have a
31:03 - matched count of one and a modified
31:05 - count of one let's take a look at
31:07 - Spongebob
31:08 - DB dot students dot find
31:13 - name SpongeBob
31:16 - and here he is he is now a full-time
31:19 - student
31:20 - with your filter argument if you're
31:22 - working with a large data set it is
31:24 - possible that two people can have the
31:26 - same name it would be safer if we were
31:28 - to update by an object ID these IDs are
31:31 - unique for each document let's update
31:33 - but with the filter we will search by
31:35 - object ID
31:37 - so again that's DB dot students dot
31:41 - update one
31:43 - first is the filter parameter
31:46 - within a document body let's select
31:48 - underscore ID colon then paste that
31:52 - object ID for SpongeBob for every
31:55 - document the object ID is unique just in
31:58 - case there's two people named SpongeBob
31:59 - we won't update it looks like I have
32:02 - double underscore ID let me fix that
32:04 - real quick
32:05 - otherwise we'll get a syntax error so
32:07 - select the document that has this object
32:10 - ID then the second argument which is
32:12 - comma separated will be the changes to
32:15 - be made
32:16 - so we will set colon another set of
32:20 - curly braces
32:21 - let's set full time to be false
32:24 - SpongeBob already Works a full-time job
32:27 - he'll just be a part-time student
32:30 - okay that was acknowledged let's take a
32:31 - look at Spongebob again using the find
32:33 - method
32:34 - db.students.find
32:38 - ID colon
32:40 - the unique object ID
32:42 - and here's SpongeBob
32:44 - the full-time field is set to false
32:47 - before it was true but we updated it
32:50 - now you can unset a field too let's get
32:53 - rid of the full time field for SpongeBob
32:55 - DB
32:56 - dot students
32:58 - dot update one
33:02 - we will search by ID
33:05 - then for the second argument we will use
33:08 - the unset operator which will remove a
33:11 - field so within another set of curly
33:13 - braces
33:14 - let's take our full time field colon now
33:19 - to remove a field for the value just set
33:21 - it to be an empty string
33:23 - let's take a look that was acknowledged
33:26 - let's select SpongeBob again
33:28 - db.students.find
33:34 - all right and here's SpongeBob again
33:36 - that full-time field is gone now you can
33:38 - use the unset operator to remove a field
33:41 - now let's talk about update many
33:44 - using the update many method we can
33:46 - update many documents at once
33:48 - DB dot
33:51 - students.update many
33:54 - this method has the same parameters as
33:56 - update 1. if I would like to select
33:58 - every document I will use an empty set
34:00 - of curly braces what are the changes we
34:03 - would like to make
34:04 - let's use the set operator
34:07 - let's set everybody's full-time field
34:11 - to be false
34:13 - if they don't have this field one will
34:16 - be created for them
34:18 - all right let's find every student that
34:20 - was acknowledged
34:21 - db.students.find everybody
34:24 - everybody should have a full-time field
34:26 - that's set to false
34:28 - full time is false
34:30 - here as well
34:31 - yeah and that applies to everybody
34:33 - all right let's unset the full-time
34:36 - field for Gary and Sandy
34:39 - TV DOT
34:41 - students.update one
34:44 - let's select name
34:47 - Gary
34:49 - we will use the unset operator
34:53 - then add the changes to be made
34:56 - full time then we'll remove it by
34:59 - placing an empty string
35:01 - I'm going to copy this line we'll reuse
35:03 - it later
35:04 - that was acknowledged
35:09 - then let's remove full time for Sandy
35:13 - that was acknowledged as well
35:16 - so let's double check DB dot students
35:20 - dot find
35:22 - so SpongeBob and Patrick both have this
35:25 - full-time field
35:27 - Sandy and Gary don't
35:29 - they were unset with the update many
35:32 - method we can check to see if a field
35:34 - exists or doesn't exist within the
35:37 - selection criteria if any student
35:39 - doesn't have a full time field let's
35:41 - update it
35:43 - DB dot
35:45 - students.update many
35:48 - what is the selection criteria
35:51 - let's say the selection criteria is full
35:54 - time field
35:56 - does it not exist we will use the exists
36:00 - operator
36:01 - exists preceded with the dollar sign
36:04 - then add false does this full-time field
36:07 - not exist
36:09 - that's the selection criteria if a
36:12 - document doesn't have the full-time
36:14 - field we'll give them one so the second
36:16 - argument will be the changes to be made
36:19 - we will use the set operator colon
36:22 - another set of curly braces
36:25 - anybody that doesn't have the full-time
36:28 - field let's set that to be true full
36:31 - time true
36:32 - press enter that was acknowledged let's
36:35 - take a look at our students
36:36 - db.students.find
36:39 - all right so Sandy and Gary are both
36:42 - full-time students now SpongeBob Patrick
36:45 - and Larry are not full-time students
36:47 - they're part-time students that's how to
36:50 - update documents in the mongodb Shell
36:51 - you can use update 1 or update many
36:54 - let's do the same thing with compass
36:56 - hello again everybody in compass to
36:59 - update a field of a document you can
37:01 - press the pencil icon to edit the
37:04 - document to remove a field next to the
37:06 - field name you can press the trash can
37:08 - icon to remove it then update
37:11 - to add a field go to the pencil icon
37:14 - again
37:15 - after a field you can add a new field by
37:18 - pressing the plus button to add a field
37:20 - let's add a full time field
37:25 - for the value I will set that to be
37:27 - false for SpongeBob
37:29 - then you can change the data type here
37:31 - we'll change that to be a Boolean
37:34 - then update
37:35 - to change a pre-existing field again go
37:38 - to the pencil icon select your field
37:40 - then you can change one of the values
37:43 - but I'll keep this as false
37:45 - that is how to update documents in
37:47 - compass it's fairly easy and
37:49 - straightforward
37:50 - alright everybody so that is how to
37:52 - update documents in mongodb you can use
37:55 - the update 1 method or update many you
37:58 - pass in a filter for the selection
37:59 - criteria then the modifications within
38:02 - the update parameter and that is how to
38:05 - update documents in mongodb
38:07 - hello again friends it's me again today
38:10 - I will be explaining how we can delete
38:12 - documents in mongodb before we do begin
38:15 - this lesson I recommend exporting your
38:18 - collection we'll be deleting documents
38:20 - adding them back in is kind of a pain in
38:22 - the ass unless we're importing them so
38:24 - let's export our collection
38:26 - export query with filters that's fine
38:30 - select output
38:33 - you can export as a Json file or as a
38:35 - CSV file let's export our collection as
38:37 - a Json file you can also select a
38:40 - destination I'll place this file on my
38:42 - desktop just for convenience
38:44 - and export
38:46 - we'll be importing this Json file at the
38:48 - end of this lesson and close
38:51 - within Compass to delete a document all
38:53 - you do is press the trash can icon then
38:56 - delete it's really easy in compass in
38:59 - the Shell it's a little different
39:01 - in the Shell to delete a document type
39:04 - DB
39:05 - dot the name of the collection students
39:07 - then there's delete one or delete many
39:10 - we'll begin with delete one
39:13 - we have one parameter a filter parameter
39:16 - it's very similar to the find method we
39:19 - list some criteria to search for let's
39:21 - delete anybody with the name of Larry
39:25 - that was acknowledged the delete account
39:28 - is one let's find our
39:30 - studentsdb.students.find
39:33 - and Larry is no longer at the bottom we
39:36 - have Patrick Sandy and Gary remaining
39:40 - we can use delete many to delete more
39:42 - than one document DB dot students dot
39:45 - delete many
39:47 - pass in our criteria
39:49 - anybody that has a full-time field set
39:53 - to false will delete
39:56 - so we have deleted one person that
39:58 - matches this criteria
40:01 - DV dot students dot find
40:05 - we have deleted Patrick
40:07 - we can delete any documents that are
40:09 - missing a field or if a field does exist
40:12 - we can delete that let's delete any
40:15 - document that is missing a registration
40:17 - date
40:18 - DB dot students dot delete many
40:24 - we are checking if there is a
40:26 - registration date field
40:28 - does this field not exist if it doesn't
40:32 - then delete that document we will use
40:35 - the exists operator colon false
40:39 - if this field doesn't exist delete that
40:43 - document
40:45 - so we have deleted two documents if we
40:48 - take a look at our students now
40:50 - db.students.find we no longer have any
40:53 - students so that's how to delete one or
40:56 - many documents with the mongodb shell
40:58 - now if we head back to compass then
41:01 - refresh we have no more students
41:04 - let's import our collection that we
41:06 - exported because we do need some data
41:07 - for this series add data import Json or
41:11 - CSV file
41:13 - we are looking for our students Json
41:16 - file select
41:18 - and import
41:20 - and we're done
41:21 - so that is how to delete documents in
41:24 - mongodb
41:26 - hey everyone today I need to explain
41:28 - comparison operators operators are
41:30 - denoted with the dollar sign comparison
41:33 - operators return data based on value
41:35 - comparisons in previous examples we
41:38 - would type
41:40 - db.students.find then list some criteria
41:43 - like if we're looking for SpongeBob we
41:45 - would say a name SpongeBob now what if
41:48 - you would like to find everybody but
41:50 - SpongeBob well you can use the not
41:53 - equals comparison operator we would
41:56 - enclose it within a document body
41:59 - pre-seed our value with the not equal
42:02 - comparison operator dollar sign and E
42:06 - colon find every name that's not
42:09 - SpongeBob
42:10 - that gives us four records Patrick Sandy
42:14 - Gary Larry
42:16 - SpongeBob isn't within here that is the
42:19 - not equals comparison operator return
42:22 - every document that has a name not equal
42:25 - to SpongeBob
42:27 - let's go over a few more
42:28 - let's cover less than and less than
42:31 - equals two
42:33 - DB dot students dot find
42:36 - everybody that has an age
42:40 - that is less than so dollar sign LT for
42:44 - less than
42:45 - 20.
42:47 - that gives us one document Gary who's
42:50 - 18.
42:51 - or we could use less than equal to
42:55 - change LT to LTE that means R20 is
42:59 - inclusive uh maybe let's change this to
43:01 - 27. return every document where the age
43:04 - field is less than or equal to 27 that
43:09 - would give us two results Sandy who's 27
43:11 - exactly and Gary who's 18. let's do
43:15 - greater than
43:17 - return every document where age is
43:20 - greater than
43:21 - 27.
43:23 - that gives us three documents SpongeBob
43:26 - who's 30. Patrick who's 38 Larry who's
43:29 - 32.
43:31 - let's do greater than equals
43:34 - that would be GTE
43:37 - find everybody that's greater than or
43:39 - equal to 27. that gives us four records
43:43 - SpongeBob Patrick Sandy who's 27 exactly
43:47 - and Larry so that's less than less than
43:50 - equals to greater than and greater than
43:52 - equals to
43:54 - you can use more than one comparison
43:56 - operator to find values within a certain
43:58 - range let's find every student
44:02 - whose GPA is between three and four
44:05 - DB that's students dot find
44:08 - we are searching for GPA
44:12 - let's use the greater than equals to
44:14 - comparison operator
44:16 - return every GPA that's greater than
44:18 - three
44:20 - comma
44:21 - and less than or equal to four
44:25 - so these would be the students that have
44:27 - a good GPA
44:29 - SpongeBob and Sandy SpongeBob has a GPA
44:32 - of 3.2 Sandy's is 4.0
44:35 - you can use more than one comparison
44:37 - operator to give you a range
44:40 - now another good operator is the in
44:42 - operator with the in operator we can
44:45 - return all records that have one of
44:47 - these matching values
44:49 - so db.students.find
44:52 - let's find any student whose name is
44:56 - within this array
44:58 - we will pass in a document body
45:01 - use the in operator colon
45:04 - then list an array an array of values
45:07 - let's find anybody whose name is either
45:09 - SpongeBob Patrick or Sandy So within an
45:13 - array we will list our values
45:15 - return anybody whose name is SpongeBob
45:19 - Patrick
45:21 - or Sandy
45:25 - there SpongeBob Patrick Sandy with the
45:29 - in logical operator you will return all
45:31 - documents where one of the values in
45:34 - this array is found within this field
45:37 - you can also use not in which is nin so
45:41 - let's copy this line
45:43 - clear our screen
45:46 - paste it
45:47 - change in to nin
45:50 - not in
45:52 - return all documents where name doesn't
45:55 - have one of these values
45:58 - that would give us Gary and Larry we are
46:00 - given everybody's name that's not
46:02 - SpongeBob Patrick or Sandy let's switch
46:05 - to Compass and I'll show you how we can
46:07 - do the same thing
46:08 - within Compass you would write your
46:10 - filter within this text box
46:12 - return everybody who has a GPA field
46:17 - that is greater than or equal to three
46:20 - GTE
46:22 - three
46:24 - that gives us SpongeBob and Sandy
46:27 - give us everybody who is let's say age
46:32 - is less than
46:35 - 27.
46:38 - that gives us Gary all right everybody
46:40 - so in conclusion comparison operators
46:42 - return data based on value comparisons
46:45 - and those are comparison operators in
46:47 - mongodb
46:49 - hey everybody today I need to explain
46:50 - logical operators logical operators
46:53 - return data based on Expressions that
46:56 - evaluate to be true or false there's
46:59 - four and or nor and not let's begin with
47:04 - and using the and logical operator we
47:06 - can check to see if two expressions are
47:09 - true
47:10 - let's begin with DB dot students that's
47:13 - the name of the collection we'll use the
47:15 - find method pass in a document object we
47:18 - will use the and logical operator it's
47:21 - preceded with the dollar sign it's an
47:23 - operator then a colon
47:26 - whatever Expressions you would like to
47:28 - check you will place within an array
47:30 - list as many Expressions as you would
47:32 - like let's return any document where the
47:35 - student is a full-time student and their
47:38 - 22 years or younger usually most
47:41 - students when they start college they're
47:43 - between the ages of 18 and 22. so let's
47:45 - find all those students we'll have two
47:47 - conditions we need two document bodies
47:49 - our first condition is full time true
47:54 - give me any student that's a full-time
47:57 - student and our other condition is give
48:01 - me any student that's age is less than
48:04 - or equal to 22. we'll use the less than
48:08 - equals comparison operator
48:10 - colon 22 and that's it
48:14 - we have one student Gary
48:17 - he's 22 and under and a full-time
48:19 - student so with the andological operator
48:22 - you can have more than one condition
48:25 - this condition needs to be true and that
48:28 - condition needs to be true we were given
48:30 - the results of Gary He's the only
48:32 - student that passes these two filters
48:35 - they both evaluated to be true let's
48:37 - copy this method we'll reuse it
48:40 - let's discuss or change and to or
48:45 - with the or logical operator at least
48:48 - one of these conditions need to be true
48:50 - give me anybody that's a full-time
48:52 - student or anybody that's 22 or younger
48:55 - that will give me two documents Sandy
48:58 - she's older than 22 but she's a
49:01 - full-time student
49:02 - Gary is 22 and under and a full-time
49:05 - student so with the or logical operator
49:08 - at least one condition needs to be true
49:11 - so again let's copy this method we'll
49:14 - reuse it then we will talk about nor
49:18 - so with the neurological operator nor we
49:22 - will return any document where these
49:24 - conditions are false this needs to be
49:26 - false as well as this needs to be false
49:29 - it's kind of like and but instead of
49:32 - both conditions being true it's the
49:34 - opposite they both need to be false
49:37 - so that would give me three results
49:38 - SpongeBob he's above 22 he's a part-time
49:42 - student Patrick is 38 he's a part-time
49:45 - student Larry he's 32 he's a part-time
49:48 - student with the neurological operator
49:50 - we need both of these conditions to be
49:53 - false that gave us these three documents
49:56 - for SpongeBob Patrick and Larry lastly
49:58 - we have not suppose I have this query
50:01 - db.students.find
50:05 - any student that is not above 30. I
50:09 - could write something like this age
50:11 - colon will use the less than comparison
50:15 - operator colon
50:17 - 30. find any student under 30. normally
50:20 - this would give me Sandy and Gary you
50:24 - know this does work but what if somebody
50:26 - doesn't have some information for their
50:28 - age like let's change Gary's age to null
50:31 - because in SpongeBob lore Gary is a pet
50:34 - snail his age is in cat years
50:37 - just to make this easy and Compass I'm
50:39 - going to edit Gary's age to be null
50:44 - let's write that query again give me any
50:47 - student whose age is less than 30.
50:50 - well that only gives me Sandy Gary's age
50:53 - is null so another way in which we could
50:55 - return all students that are not 30 or
50:59 - above we can use the not logical
51:01 - operator
51:02 - the not logical operator reverses what
51:05 - you're looking for so let's enclose this
51:08 - document body within another document
51:10 - body
51:13 - then we will use the dollar sign not
51:16 - logical operator but we will change the
51:19 - comparison operator to be greater than
51:21 - equals give me any student that is not
51:25 - greater than or equal to 30. so that
51:28 - should give me both Sandy and Gary even
51:31 - though Gary's age is null in many
51:34 - circumstances you could use less than
51:36 - but a benefit of the not to logical
51:39 - operator is that it would give you null
51:41 - values return any document that doesn't
51:44 - fit this condition basically speaking
51:46 - not just does the opposite alright
51:49 - everybody so those are logical operators
51:51 - they return data based on Expressions
51:53 - that evaluate to be true or false and
51:56 - those are logical operators in mongodb
52:00 - hey everybody today we are moving on to
52:02 - indexes and index allows for the quick
52:05 - lookup of a field however it takes up
52:07 - more memory and slows insert update and
52:10 - remove operations use them wisely
52:12 - utilizing an index if you're familiar
52:15 - with data structures and algorithms we
52:16 - are storing our data as a b tree if
52:20 - there's a field you search for but you
52:21 - don't do many updates I would recommend
52:24 - an index here's an example let's find
52:26 - any students named larrydb dot students
52:30 - dot find
52:31 - find anybody named Larry
52:36 - I'm going to make one adjustment though
52:38 - let's method chain the explain method
52:40 - and pass in this string
52:44 - execution stats
52:46 - that will give me the execution stats of
52:49 - this query
52:52 - I have five documents within my
52:53 - collection we have examined five
52:56 - documents to find Larry we're performing
52:58 - a linear search through our collection
53:01 - we're examining each document one by one
53:03 - I only have five documents that wouldn't
53:06 - take too long imagine I have thousands
53:08 - or hundreds of thousands of documents
53:10 - well a linear search is going to take a
53:12 - really long time we can speed up the
53:14 - lookup process by applying an index
53:17 - to apply an index to a field you would
53:19 - type something like this
53:21 - DB dot the name of the collection dot
53:24 - create index
53:27 - now what field would you like to apply
53:29 - an index for let's apply an index to our
53:32 - name field name called in you can
53:35 - arrange the data in your index in
53:37 - ascending order by using one or
53:39 - descending order with negative one
53:42 - so with a name one would be alphabetical
53:44 - starting with a to z
53:47 - let's hit enter
53:48 - this is the name of our index name
53:50 - underscore one
53:53 - let's perform that query one more time
53:55 - DB dot students dot find
53:58 - anybody named Larry name
54:02 - Larry
54:03 - then we will method chain the explain
54:06 - method
54:08 - pass in the string execution stats
54:12 - let's see what the results are
54:15 - this time we only examined one document
54:17 - examining one document is a lot less
54:20 - time consuming than examining five
54:22 - documents like I said I have a small
54:24 - data set it doesn't appear to make that
54:26 - big of a difference but if you have
54:27 - hundreds of thousands of documents it's
54:29 - going to save you a lot of time
54:31 - to get all your indexes you can use the
54:33 - get indexes method
54:35 - db.students dot get indexes
54:39 - and we have two there already is an
54:42 - index applied to object ideas we have
54:45 - that by default and here's the index we
54:47 - created to look up names quickly we have
54:50 - two indexes technically to drop an index
54:52 - you'll need the name let's copy that
54:56 - DB dot students dot drop
55:00 - index
55:02 - place the name of the index within the
55:04 - drop index method
55:06 - and our index is dropped
55:08 - let's take a look at our indexes again
55:12 - db.student.getindexes and our index is
55:15 - gone
55:16 - now if you would like to create an index
55:18 - in compass you go to the indexes tab
55:21 - create index
55:23 - select a type or field name
55:26 - let's create an index for name
55:28 - select a type let's place our name in
55:31 - ascending order you can select more
55:33 - options but that's a little Advanced for
55:35 - us at this level let's begin with the
55:37 - basics
55:38 - and that's how to create an index in
55:40 - compass then to drop the index you just
55:42 - press this trash can icon type the index
55:45 - name
55:46 - underscore one
55:48 - and that's how to drop an index
55:51 - so in conclusion applying an index to a
55:54 - field allows for quick lookup of that
55:56 - field but it takes up more memory and it
55:58 - slows insert update and remove
56:00 - operations because you have to update
56:02 - the binary search tree use indexes
56:04 - wisely personally I would recommend an
56:07 - index if you're doing a lot of searching
56:09 - but not a lot of updating so that's an
56:11 - introduction to indexes in mongodb
56:15 - hey everybody with the last few minutes
56:16 - remaining of the mongodb in one hour
56:19 - series I thought I'd get a little more
56:21 - in depth with collections as we've
56:22 - learned at the beginning of the series a
56:24 - collection is a group of documents and a
56:27 - database is a group of collections
56:29 - within your database to show collections
56:31 - you can type show collections
56:34 - currently we only have one students
56:36 - let's create another though let's create
56:38 - a collection of teachers
56:40 - we'll use the DB dot create collection
56:45 - method pass in a name for this
56:48 - collection
56:49 - let's create a collection of teachers so
56:53 - this would work however there are some
56:55 - additional options that we can pass in
56:57 - as arguments to this method let's add
56:59 - the next argument it's comma separated
57:01 - another argument that we can pass into
57:03 - this method when creating a collection
57:05 - is a Max size for this collection we
57:08 - will set the kept field to be true
57:10 - that's informing mongodb this collection
57:13 - should have a maximum size this field is
57:16 - either true or false if capped is set to
57:19 - true you do need a minimum size
57:20 - specified
57:22 - so size that's a field then set a size
57:25 - in bytes if you would like a maximum
57:27 - size of 10 megabytes that would be 10
57:29 - million 10 million bytes
57:32 - let me count my zeros yeah that's
57:34 - accurate and or you can have a maximum
57:37 - number of documents
57:39 - you will set the Max field to be some
57:42 - amount of documents I don't want any
57:44 - more than 100 teachers
57:46 - our collection has a maximum size of 10
57:49 - megabytes we've also set that there can
57:52 - be no more than 100 documents in this
57:54 - collection we don't want any more than
57:56 - 100 teachers there are a few more
57:58 - advanced options for collections but
58:00 - that's beyond our level right now but
58:02 - another you may be interested in is auto
58:04 - index ID so that is a separate argument
58:07 - it's comma separated we need a document
58:10 - body
58:12 - Auto index ID
58:15 - this is either true
58:17 - or false
58:19 - based on indexes in the last topic
58:21 - automatically we apply an index to
58:24 - object ideas but we can toggle that to
58:26 - be true or false there are some pros and
58:29 - cons with indexes and index allows for
58:31 - quick lookup but any write operations
58:33 - are a little bit slower I'll set auto
58:36 - index ID to be false let's execute this
58:38 - command
58:39 - all right that was approved let's show
58:42 - our Collections show collections
58:46 - and we have two collections a collection
58:48 - for students and a collection for
58:50 - teachers hey let's create one more for
58:51 - practice let's create one more
58:53 - collection DB dot create collection
58:58 - what's the collection name let's create
59:00 - a collection of courses like what
59:02 - classes can we take at our school
59:04 - that was approved let's show our
59:06 - collections
59:08 - and we have three courses students
59:10 - teachers
59:11 - then to drop a collection you type DB
59:13 - the name of the collection let's drop
59:15 - our courses dot drop method
59:18 - that was dropped let's show our
59:20 - collections again
59:22 - and we are back to two collections a
59:24 - collection of students and a collection
59:26 - of teachers all right everybody that was
59:28 - mongodb in one hour hey if you've made
59:31 - it this far be sure you've smashed that
59:32 - like button leave a random comment down
59:34 - below and subscribe if you'd like to
59:36 - become a fellow bro

Cleaned transcript:

hey how's it going everybody it's you bro hope you're doing well and in today's video I'm going to teach you everything you need to know to get started using mongodb in about an hour so sit back relax and enjoy the show hey if you'd like free stuff you should probably subscribe because I release free courses every once in a while when I feel like it that is all what the heck is mongodb it's a no SQL database management system that can manage a humongous amount of data and it's becoming increasingly popular it's favored by many big tech companies unlike relational database Management Systems mongodb uses a nosql format to store and retrieve data nosql means not only SQL it's where data is stored in various formats besides a traditional SQL table rather than storing our data in rows and columns with the table using SQL we store related data as a single document think of each document as a single row and a table in SQL data in each document is stored as field value pairs similar to a Json format but it's technically bsawn binary JavaScript object notation but it behaves very similar similarly for all intents and purposes the general idea is that data which is frequently accessed together is stored together rather than in Separate Tables because SQL joins quite frankly are a pain in the ass this is how our nosql database is arranged we have a document a document is a group of field value pairs to represent an object a collection is a group of one or more documents and a database is a group of one or more collections this makes working with and scaling our database like really really easy before we do begin there are a few prerequisites for this series we will be working with document objects I would recommend at least some experience with an objectoriented programming language of your choosing it doesn't matter if it's python Java C plus plus C sharp JavaScript doesn't matter just pick one so let's get started I will show you what you need to download all right let's get started everybody here is the installation process for mongodb so go to this website mongodb.com go to resources server on the left sidebar go to installation here's a list of different installation tutorials depending on your operating system I'm running Windows I'll select Windows let's scroll down we're looking for install mongodb Community Edition all you have to do is follow the numbered steps beginning with one we will go to the download Center I'll open this in a new tab because I don't want to close out of this window select the current version select your platform again I'm running Windows and the installation package I'll keep that the same and download pick a place to save the installer to I'll keep it within my documents folder but you choose your own place and I will open this when it's done so we're going to click next accept the license agreement next complete install mongod as a service make sure that's checked next also be sure to install the mongodb compass program it's a graphical user interface then give it a couple minutes now that mongodb is installed we can finish this may open compass compass is a graphical user interface for managing our database we'll be using Compass intermittently in fact I recommend creating a desktop shortcut you just have to open it then to establish a connection you hit the green connect button I'll be using Compass intermittently just to show you how everything works let's also install the mongodb shell to install the shell we're going to go to the left sidebar and where is it there mongodb shell also known as mangosh like oh my gosh we are going to go to the download Center select the current version select your platform I'm running Windows and the package will keep that the same and download we'll open this when it's done we will unzip this folder so right click extract all we will need the file path to the executable let's open this folder go to bin and we can copy this file location let's right click on our executable go to properties copy this file location it should be within the bin folder then we're going to add that file path to our environment variables really we can just search for environment variables we're within system properties go to the advanced tab environment variables underneath system variables let's pretend that this wasn't here click new come up with a variable name sh is good then paste that file location hit okay and close so if we go to that folder and open the executable this is the mongodb shell I'm going to make the font size a little bit bigger to establish a connection to our database type sh and that should establish a connection to clear your screen type CLS to exit type exit personally I don't like using this executable by itself I like using vs code if you would like to use vs code for using the Shell here's how if you would like to use vs code for using the Shell here's how So within vs code we're going to download the mongodb extension so go to extensions search for mongodb it should be this one we will install this extension there should be a new icon for mongodb let's click on it to establish a connection we just have to click on localhost the mongodb connection was successful then to open our terminal right click launch mongodb shell let's minimize this close out of this window pull up this terminal we are utilizing the mongodb Shell with vs code so to exit you type exit to establish a connection you can type sh to clear your screen you can type CLS and that is everything you need to know to get started everybody here's how we can create and use databases in mongodb to show all databases type show DBS that will give you a list of all current databases I have three admin config and local to use a database type use then select a database name to use admin I can say use admin we have switched to dbadmin now if you use a database that doesn't exist let's say we will create a database for a school use school that's how you can create a database we are now within a new database named School however if I were to show my current databases my school database doesn't show up it's not visible because it's empty we'll need to fill it with something let's add a collection to our school to do that type DB dot we will use the create collection method this method ends with a set of parentheses just like a function or method in typical programming languages within the set of parentheses we are going to pass in an argument for a name for this collection let's create a collection of students and we are returned with OK we have created one new collection let's clear our screen show our databases again show DBS and here is our new database of school currently we are within our school database as you can see next to my cursor to drop this current database you can type DB dot drop database method and our database is dropped let's show our databases again and our school database is no longer there that is how to use create and drop a database in the mongodb Shell if you would like to use Compass here's how we have our three default databases admin config local to create a database you can click this green button we'll need a database name let's say school again we will create a collection of students within our database you can add additional preferences but we'll cover that later we will create our database and here's our database of school there is one collection of students but students doesn't have any documents yet which we'll cover in the next topic to delete a database in mongodb compass select a database from the sidebar then hit the trash can icon to delete it type the name of the database to drop the database so make sure that the name of the database is typed then drop database and that is how to use create and drop a database in mongodb compass all right we're moving on everybody now I'm gonna show you how we can insert documents into a mongodb database let's be sure that we're using our current database in the last topic we were using the database of school let's clear our screen to insert a document within the database we're working with type DB then the name of a collection if a collection is found within this database we have created a collection of students if this collection doesn't exist one will be created for you db.students.we will use the insert one method within the set of parentheses we will place a document which is enclosed within a set of curly braces within the set of curly braces we can list as many field value pairs as we would like let's create a name field with the value of SpongeBob each field value pair is comma separated let's add another field value pair maybe an age age will be 30. then a GPA grade point average SpongeBob has a solid 3.2 GPA let's enter this command that was acknowledged to return all documents within a collection type DB the name of the collection in this case students dot we can use the find method here are the current documents within my collection we only have one here's the object ID that's created automatically the name is SpongeBob age 30 GPA 3.2 now you can insert more than one document at a time by using the insert menu function DB type the name of the collection students in this case we will insert many documents we will place all documents to be inserted within an array add a set of straight brackets this is the exact same kind of array from different programming languages however in Python I think that would be a list technically maybe we need to insert three documents we would need three sets of curly braces each comma separated within each set of curly braces we would list all of the different field value pairs so let's begin with the first we have name Patrick separate each field value pair with a comma then we have age of let's make Patrick 38 then GPA Patrick is at 1.5 that's enough for our first document let's go to the second document move over to the second set of curly braces for the name this will be Sandy Sandy's age is I don't know 27 sounds good GPA Sandy smart she has a solid 4.0 then let's go to the last document name maybe Gary 's age is 18. GPA 2.5 that's good enough for now this array contains several documents each document is enclosed within a set of curly braces within each document you can have as many field value pairs as you like they all don't need to be consistent let's insert all of these documents they were all acknowledged we have three new object IDs let's use the find method again to display all of them DB dot students dot find here are the four objects found within our database SpongeBob Patrick Sandy Gary that's how to insert documents using the Shell next we'll do the same thing but use Compass instead if you're using Compass here's how to insert documents into a collection here are the four documents we created previously I'm just going to go ahead and delete these to add a new document make sure you're within the current database you're working with go to the current collection RS students we will add data you can import a Json or CSV file or you can type them manually by inserting document a document is pregenerated for you I'm just going to go ahead and delete that we'll Begin by inserting SpongeBob you need a set of curly braces then list all of the name value pairs name SpongeBob separate each field value pair with a comma age 30. GPA 3.2 if you have this warning you will need to probably hit the format button that should go away then insert and that is how to insert one document to insert many it's the same process as before but you're going to enclose all of your documents within an array a set of straight brackets so if we need three documents add three sets of curly braces all comma separated we had Patrick age I think he was 38. GPA 1.5 name Sandy age 27 I'm going to move this down a little bit so you can see GPA 4.0 then name Gary age 18. GPA 2.5 let's reformat insert and here are the three documents we have inserted all right and that is how to insert documents into a mongodb database using Compass all right everybody it's about time I discuss some basic data types in mongodb we will Begin by inserting a new document into our students collection db.students.insert1 we're inserting a document add a set of curly braces the first data type I'll discuss is a string suppose we have a field of name a string is a series of text within quotes these can be either double quotes or single quotes but typically I like to put them within double quotes a string is a series of text like a name Like Larry strings can contain spaces we could enter in a first name space then a last name Larry Lobster they can also contain numbers larry123 however in a string we treat the numbers differently we read the Morris characters rather than actual numbers so let's stick with name Larry that's a string it's a series of characters then we have integers and integer is a whole number let's create a field for age Larry will be 32. whole integers don't contain decimal portions it wouldn't make sense to enter in 32.5 we don't really keep track of people's half birthdays and stuff so age would be a whole number those are integers whole numbers then we have doubles a double is a number that contains a decimal portion maybe a grade point average grade point averages typically contain decimals Larry has a 2.8 GPA it's a double because there's a decimal portion integers are whole numbers doubles are numbers that contain a decimal then we have booleans booleans are either true or they're false it's kind of like a light switch it's only on or off there's only two states let's create a field for full time is the student full time this can be either true or false Larry is too busy working out all the time he is a parttime student not a fulltime student we'll set that field to be false date objects are pretty popular in mongodb suppose we have a registration date register date to create a date object you can use the new keyword followed by a call to the date Constructor if you don't pass any arguments to the date Constructor you'll use the current time in the UTC time zone otherwise you can pass a date and time like 2023 January 2nd you could add a time too but we'll just stick with the current date and time that's assigned to us those are date objects the next data type is null null means no value I'll create a field for a graduation date and I will set that to be null Larry is a current student but we don't know when he's going to graduate all we're really doing is creating a placeholder we don't have a date yet so we can set that to be null that's to be filled in later so null means no value then we have arrays much like in modern programming languages is kind of like a variable that has more than one value but in mongodb we have a field that can have more than one value let's create a field of courses what courses is Larry enrolled in place all values within a set of straight brackets let's insert multiple values what courses is Larry in maybe he's in biology these values are all comma separated chemistry then calculus so that's an array they're all enclosed within a set of square brackets they allow one field to contain multiple values then we have nested documents this would be good for an address to create a nested document you use a set of curly braces within the nested document we can list some field value pairs how about a street let's come up with a street name one two three fake street is good than a city Bikini Bottom and a zip code one two three four five it is possible to have documents within documents which is what we did with the address let's enter everything to see if it works yeah that was acknowledged let's head to Compass refresh and here is Larry name Larry h32 GPA 2.8 full time is set to false he's a parttime student here is Larry's registration date and time we're using the UTC time zone his graduation date is set to null all of his courses that he's in is stored within an array and his address is stored as a nested document alright everybody and those are a few basic data types you should know in mongodb all right everybody today I'm going to show you how we can both sort and limit documents in mongodb to return all documents we can type DB the name of the collection dot then we can use the find method to return all documents to sort these documents in some sort of order again we would type DB the name of the collection students dot find method then we'll do some method chaining after the find method add dot then we will call the sort method the sort method takes a document by which field would we like to sort let's sort names in alphabetical order we would type the name of the field Name colon then one for alphabetical order or negative one for reverse alphabetical order so if we were to sort by alphabetical order here's the results we have Gary then Larry Patrick Sandy SpongeBob then reverse alphabetical order that was Name colon negative one now we have SpongeBob Sandy Patrick Larry Gary let's sort our documents by GPA grade point average so again we use the find method then we'll method chain the sort method we're passing in a document object with our criteria we will sort by GPA in ascending order so we will use one I'm going to copy this because I'm going to use it later okay now we're sorting by GPA Patrick has the lowest GPA 1.5 2.5 2.8 3.2 then 4. to sort our GPA by deciding order we would type GPA negative one then we have Sandy at the top with the gpf4 then SpongeBob with 3.2 2.8 2.5 1.5 now we have the limit method we can limit the amount of documents that are returned to us let's type DB dot students dot find method dot limit method we will pass the number of documents we would like return to us as an argument if I would like one document returned to us I will pass in one currently my documents are sorted by object ID this would give us the first document of SpongeBob if I were to use limit 3 we would be returned three documents SpongeBob Patrick Sandy we can combine both the sort and the limit methods too I would like to return the student with the highest GPA we'll use the find method then method chain the sort method we are sorting by GPA we're going to sort in decreasing order so negative one followed by the limit method I would like just one document who has the highest GPA that would be Sandy with a GPA of four who has the lowest GPA we should sort an increasing order that would be one then limit one so Patrick has the lowest GPA of 1.5 now let's work with sorting and limiting Encompass to sort the documents in your collection you can press more options then add some sort criteria I will sort by name colon one then find so we have Gary Larry Patrick Sandy SpongeBob then negative one for reverse alphabetical order SpongeBob Sandy Patrick Larry Gary let's sort by GPA GPA negative one that would give us decreasing order so Sandy's at the top to limit the amount of documents that are returned you can enter in a number for the limit box I will limit the records to one so we are returned with Sandy she has the highest GPA limit three would give us the top three students or leave limit MDU to return all documents all right everybody so that is basic sorting and limiting in mongodb hey everybody in this topic I'm going to explain the find method in mongodb to use the find a method type DB the name of the collection you're working with then add the find method that will return all documents within this collection but at times you might not want all documents you might want specific documents here's how we will add some arguments to the find method DB Dot students.find the first argument is a document object the parameter is the query parameter it specifies selection filters maybe you just need one student well you would just list that criteria here I would like any students with the name of SpongeBob that would return any document where the first name is SpongeBob that would return everybody that has that name I'm just going to copy this let's find any students that have a GPA of 4.0 within our document the search filter is GPA 4.0 that would give us Sandy let's find if any students are not fulltime full time I will set that to be false there is one student Larry full time is set to false the query parameter is very similar to a where clause in SQL you can even use more than one filter search for any student that has a GPA of 4.0 each filter is comma separated as well as fulltime being true with my data set this does not return any results but to add more than one filter they're comma separated within a document body with the find method there is a second parameter that is the projection parameter we would pass another document body they're each comma separated if you don't specify the query parameter you would just return all documents with the projection parameter you can return specific Fields maybe you don't want all the information that's available perhaps I would just like each Student's name so we would set the field to be true you can use one as well but my own preference is true just because it's more readable return every document but only give their name and here they are mongodb will give you the ID regardless you can set that to be false within the projection parameter underscore ID false I just want everybody's name there we are SpongeBob Patrick Sandy Gary Larry let's get every student's name as well as their GPA so ID I will set that to be false I don't want that name will be true I would like that GPA will also be true I would like that here is every student's name as well as their GPA so that's the projection parameter if there's a field you would like or don't want you can set that to be either true or false when you display your data all right let's do the same thing with compass with compass this text box is for the find method So within a set of curly braces I would like to find any name that's SpongeBob then press find that returns one result return any student with the GPA of 4.0 that's Sandy return any students that are not fulltime fulltime is false that gives us Larry now if you go to more options there is a projection parameter if you only want some data let's find every student but for the projection parameter I would only like their name I'll set that to be true and their GPA that's true as well again that still gives us the ID let's set that to be false if you don't want that ID false and that should get rid of the ideas here's each Student's name and their GPA all right everybody that's the find method two optional parameters that we can send arguments to are the query parameter that's selection criteria it's similar to a where clause in SQL we're trying to limit the results and the projection parameter that's similar to selected columns in SQL you're looking for specific Fields alright everybody and that is the find method in mongodb well hello again everybody today I will be explaining how we can update documents in mongodb to do that we would type DB the name of the collection we're working with in this case students we can either update one document or update many let's update one we will use the update 1 method there are two parameters set up filter and update filter is the selection criteria for the update So within a set of curly braces we will pass some criteria let's update anybody's name that's SpongeBob it's basically just selection criteria the second parameter it's another document body is the update parameter what are the modifications we would like to apply we will utilize the set operator which is preceded with the dollar sign the set operator replaces the value of a field so after the set operator add a colon then another set of curly braces yes there's a lot of curly braces in mongodb So within this set of curly braces after the set operator that's where we can make our changes you can add or change the value of a field Spongebob doesn't have a full time field we can add that with the set operator if this field already exists we would update it so let's say SpongeBob is a fulltime student let's execute this command it was acknowledged that's true we have a matched count of one and a modified count of one let's take a look at Spongebob DB dot students dot find name SpongeBob and here he is he is now a fulltime student with your filter argument if you're working with a large data set it is possible that two people can have the same name it would be safer if we were to update by an object ID these IDs are unique for each document let's update but with the filter we will search by object ID so again that's DB dot students dot update one first is the filter parameter within a document body let's select underscore ID colon then paste that object ID for SpongeBob for every document the object ID is unique just in case there's two people named SpongeBob we won't update it looks like I have double underscore ID let me fix that real quick otherwise we'll get a syntax error so select the document that has this object ID then the second argument which is comma separated will be the changes to be made so we will set colon another set of curly braces let's set full time to be false SpongeBob already Works a fulltime job he'll just be a parttime student okay that was acknowledged let's take a look at Spongebob again using the find method db.students.find ID colon the unique object ID and here's SpongeBob the fulltime field is set to false before it was true but we updated it now you can unset a field too let's get rid of the full time field for SpongeBob DB dot students dot update one we will search by ID then for the second argument we will use the unset operator which will remove a field so within another set of curly braces let's take our full time field colon now to remove a field for the value just set it to be an empty string let's take a look that was acknowledged let's select SpongeBob again db.students.find all right and here's SpongeBob again that fulltime field is gone now you can use the unset operator to remove a field now let's talk about update many using the update many method we can update many documents at once DB dot students.update many this method has the same parameters as update 1. if I would like to select every document I will use an empty set of curly braces what are the changes we would like to make let's use the set operator let's set everybody's fulltime field to be false if they don't have this field one will be created for them all right let's find every student that was acknowledged db.students.find everybody everybody should have a fulltime field that's set to false full time is false here as well yeah and that applies to everybody all right let's unset the fulltime field for Gary and Sandy TV DOT students.update one let's select name Gary we will use the unset operator then add the changes to be made full time then we'll remove it by placing an empty string I'm going to copy this line we'll reuse it later that was acknowledged then let's remove full time for Sandy that was acknowledged as well so let's double check DB dot students dot find so SpongeBob and Patrick both have this fulltime field Sandy and Gary don't they were unset with the update many method we can check to see if a field exists or doesn't exist within the selection criteria if any student doesn't have a full time field let's update it DB dot students.update many what is the selection criteria let's say the selection criteria is full time field does it not exist we will use the exists operator exists preceded with the dollar sign then add false does this fulltime field not exist that's the selection criteria if a document doesn't have the fulltime field we'll give them one so the second argument will be the changes to be made we will use the set operator colon another set of curly braces anybody that doesn't have the fulltime field let's set that to be true full time true press enter that was acknowledged let's take a look at our students db.students.find all right so Sandy and Gary are both fulltime students now SpongeBob Patrick and Larry are not fulltime students they're parttime students that's how to update documents in the mongodb Shell you can use update 1 or update many let's do the same thing with compass hello again everybody in compass to update a field of a document you can press the pencil icon to edit the document to remove a field next to the field name you can press the trash can icon to remove it then update to add a field go to the pencil icon again after a field you can add a new field by pressing the plus button to add a field let's add a full time field for the value I will set that to be false for SpongeBob then you can change the data type here we'll change that to be a Boolean then update to change a preexisting field again go to the pencil icon select your field then you can change one of the values but I'll keep this as false that is how to update documents in compass it's fairly easy and straightforward alright everybody so that is how to update documents in mongodb you can use the update 1 method or update many you pass in a filter for the selection criteria then the modifications within the update parameter and that is how to update documents in mongodb hello again friends it's me again today I will be explaining how we can delete documents in mongodb before we do begin this lesson I recommend exporting your collection we'll be deleting documents adding them back in is kind of a pain in the ass unless we're importing them so let's export our collection export query with filters that's fine select output you can export as a Json file or as a CSV file let's export our collection as a Json file you can also select a destination I'll place this file on my desktop just for convenience and export we'll be importing this Json file at the end of this lesson and close within Compass to delete a document all you do is press the trash can icon then delete it's really easy in compass in the Shell it's a little different in the Shell to delete a document type DB dot the name of the collection students then there's delete one or delete many we'll begin with delete one we have one parameter a filter parameter it's very similar to the find method we list some criteria to search for let's delete anybody with the name of Larry that was acknowledged the delete account is one let's find our studentsdb.students.find and Larry is no longer at the bottom we have Patrick Sandy and Gary remaining we can use delete many to delete more than one document DB dot students dot delete many pass in our criteria anybody that has a fulltime field set to false will delete so we have deleted one person that matches this criteria DV dot students dot find we have deleted Patrick we can delete any documents that are missing a field or if a field does exist we can delete that let's delete any document that is missing a registration date DB dot students dot delete many we are checking if there is a registration date field does this field not exist if it doesn't then delete that document we will use the exists operator colon false if this field doesn't exist delete that document so we have deleted two documents if we take a look at our students now db.students.find we no longer have any students so that's how to delete one or many documents with the mongodb shell now if we head back to compass then refresh we have no more students let's import our collection that we exported because we do need some data for this series add data import Json or CSV file we are looking for our students Json file select and import and we're done so that is how to delete documents in mongodb hey everyone today I need to explain comparison operators operators are denoted with the dollar sign comparison operators return data based on value comparisons in previous examples we would type db.students.find then list some criteria like if we're looking for SpongeBob we would say a name SpongeBob now what if you would like to find everybody but SpongeBob well you can use the not equals comparison operator we would enclose it within a document body preseed our value with the not equal comparison operator dollar sign and E colon find every name that's not SpongeBob that gives us four records Patrick Sandy Gary Larry SpongeBob isn't within here that is the not equals comparison operator return every document that has a name not equal to SpongeBob let's go over a few more let's cover less than and less than equals two DB dot students dot find everybody that has an age that is less than so dollar sign LT for less than 20. that gives us one document Gary who's 18. or we could use less than equal to change LT to LTE that means R20 is inclusive uh maybe let's change this to 27. return every document where the age field is less than or equal to 27 that would give us two results Sandy who's 27 exactly and Gary who's 18. let's do greater than return every document where age is greater than 27. that gives us three documents SpongeBob who's 30. Patrick who's 38 Larry who's 32. let's do greater than equals that would be GTE find everybody that's greater than or equal to 27. that gives us four records SpongeBob Patrick Sandy who's 27 exactly and Larry so that's less than less than equals to greater than and greater than equals to you can use more than one comparison operator to find values within a certain range let's find every student whose GPA is between three and four DB that's students dot find we are searching for GPA let's use the greater than equals to comparison operator return every GPA that's greater than three comma and less than or equal to four so these would be the students that have a good GPA SpongeBob and Sandy SpongeBob has a GPA of 3.2 Sandy's is 4.0 you can use more than one comparison operator to give you a range now another good operator is the in operator with the in operator we can return all records that have one of these matching values so db.students.find let's find any student whose name is within this array we will pass in a document body use the in operator colon then list an array an array of values let's find anybody whose name is either SpongeBob Patrick or Sandy So within an array we will list our values return anybody whose name is SpongeBob Patrick or Sandy there SpongeBob Patrick Sandy with the in logical operator you will return all documents where one of the values in this array is found within this field you can also use not in which is nin so let's copy this line clear our screen paste it change in to nin not in return all documents where name doesn't have one of these values that would give us Gary and Larry we are given everybody's name that's not SpongeBob Patrick or Sandy let's switch to Compass and I'll show you how we can do the same thing within Compass you would write your filter within this text box return everybody who has a GPA field that is greater than or equal to three GTE three that gives us SpongeBob and Sandy give us everybody who is let's say age is less than 27. that gives us Gary all right everybody so in conclusion comparison operators return data based on value comparisons and those are comparison operators in mongodb hey everybody today I need to explain logical operators logical operators return data based on Expressions that evaluate to be true or false there's four and or nor and not let's begin with and using the and logical operator we can check to see if two expressions are true let's begin with DB dot students that's the name of the collection we'll use the find method pass in a document object we will use the and logical operator it's preceded with the dollar sign it's an operator then a colon whatever Expressions you would like to check you will place within an array list as many Expressions as you would like let's return any document where the student is a fulltime student and their 22 years or younger usually most students when they start college they're between the ages of 18 and 22. so let's find all those students we'll have two conditions we need two document bodies our first condition is full time true give me any student that's a fulltime student and our other condition is give me any student that's age is less than or equal to 22. we'll use the less than equals comparison operator colon 22 and that's it we have one student Gary he's 22 and under and a fulltime student so with the andological operator you can have more than one condition this condition needs to be true and that condition needs to be true we were given the results of Gary He's the only student that passes these two filters they both evaluated to be true let's copy this method we'll reuse it let's discuss or change and to or with the or logical operator at least one of these conditions need to be true give me anybody that's a fulltime student or anybody that's 22 or younger that will give me two documents Sandy she's older than 22 but she's a fulltime student Gary is 22 and under and a fulltime student so with the or logical operator at least one condition needs to be true so again let's copy this method we'll reuse it then we will talk about nor so with the neurological operator nor we will return any document where these conditions are false this needs to be false as well as this needs to be false it's kind of like and but instead of both conditions being true it's the opposite they both need to be false so that would give me three results SpongeBob he's above 22 he's a parttime student Patrick is 38 he's a parttime student Larry he's 32 he's a parttime student with the neurological operator we need both of these conditions to be false that gave us these three documents for SpongeBob Patrick and Larry lastly we have not suppose I have this query db.students.find any student that is not above 30. I could write something like this age colon will use the less than comparison operator colon 30. find any student under 30. normally this would give me Sandy and Gary you know this does work but what if somebody doesn't have some information for their age like let's change Gary's age to null because in SpongeBob lore Gary is a pet snail his age is in cat years just to make this easy and Compass I'm going to edit Gary's age to be null let's write that query again give me any student whose age is less than 30. well that only gives me Sandy Gary's age is null so another way in which we could return all students that are not 30 or above we can use the not logical operator the not logical operator reverses what you're looking for so let's enclose this document body within another document body then we will use the dollar sign not logical operator but we will change the comparison operator to be greater than equals give me any student that is not greater than or equal to 30. so that should give me both Sandy and Gary even though Gary's age is null in many circumstances you could use less than but a benefit of the not to logical operator is that it would give you null values return any document that doesn't fit this condition basically speaking not just does the opposite alright everybody so those are logical operators they return data based on Expressions that evaluate to be true or false and those are logical operators in mongodb hey everybody today we are moving on to indexes and index allows for the quick lookup of a field however it takes up more memory and slows insert update and remove operations use them wisely utilizing an index if you're familiar with data structures and algorithms we are storing our data as a b tree if there's a field you search for but you don't do many updates I would recommend an index here's an example let's find any students named larrydb dot students dot find find anybody named Larry I'm going to make one adjustment though let's method chain the explain method and pass in this string execution stats that will give me the execution stats of this query I have five documents within my collection we have examined five documents to find Larry we're performing a linear search through our collection we're examining each document one by one I only have five documents that wouldn't take too long imagine I have thousands or hundreds of thousands of documents well a linear search is going to take a really long time we can speed up the lookup process by applying an index to apply an index to a field you would type something like this DB dot the name of the collection dot create index now what field would you like to apply an index for let's apply an index to our name field name called in you can arrange the data in your index in ascending order by using one or descending order with negative one so with a name one would be alphabetical starting with a to z let's hit enter this is the name of our index name underscore one let's perform that query one more time DB dot students dot find anybody named Larry name Larry then we will method chain the explain method pass in the string execution stats let's see what the results are this time we only examined one document examining one document is a lot less time consuming than examining five documents like I said I have a small data set it doesn't appear to make that big of a difference but if you have hundreds of thousands of documents it's going to save you a lot of time to get all your indexes you can use the get indexes method db.students dot get indexes and we have two there already is an index applied to object ideas we have that by default and here's the index we created to look up names quickly we have two indexes technically to drop an index you'll need the name let's copy that DB dot students dot drop index place the name of the index within the drop index method and our index is dropped let's take a look at our indexes again db.student.getindexes and our index is gone now if you would like to create an index in compass you go to the indexes tab create index select a type or field name let's create an index for name select a type let's place our name in ascending order you can select more options but that's a little Advanced for us at this level let's begin with the basics and that's how to create an index in compass then to drop the index you just press this trash can icon type the index name underscore one and that's how to drop an index so in conclusion applying an index to a field allows for quick lookup of that field but it takes up more memory and it slows insert update and remove operations because you have to update the binary search tree use indexes wisely personally I would recommend an index if you're doing a lot of searching but not a lot of updating so that's an introduction to indexes in mongodb hey everybody with the last few minutes remaining of the mongodb in one hour series I thought I'd get a little more in depth with collections as we've learned at the beginning of the series a collection is a group of documents and a database is a group of collections within your database to show collections you can type show collections currently we only have one students let's create another though let's create a collection of teachers we'll use the DB dot create collection method pass in a name for this collection let's create a collection of teachers so this would work however there are some additional options that we can pass in as arguments to this method let's add the next argument it's comma separated another argument that we can pass into this method when creating a collection is a Max size for this collection we will set the kept field to be true that's informing mongodb this collection should have a maximum size this field is either true or false if capped is set to true you do need a minimum size specified so size that's a field then set a size in bytes if you would like a maximum size of 10 megabytes that would be 10 million 10 million bytes let me count my zeros yeah that's accurate and or you can have a maximum number of documents you will set the Max field to be some amount of documents I don't want any more than 100 teachers our collection has a maximum size of 10 megabytes we've also set that there can be no more than 100 documents in this collection we don't want any more than 100 teachers there are a few more advanced options for collections but that's beyond our level right now but another you may be interested in is auto index ID so that is a separate argument it's comma separated we need a document body Auto index ID this is either true or false based on indexes in the last topic automatically we apply an index to object ideas but we can toggle that to be true or false there are some pros and cons with indexes and index allows for quick lookup but any write operations are a little bit slower I'll set auto index ID to be false let's execute this command all right that was approved let's show our Collections show collections and we have two collections a collection for students and a collection for teachers hey let's create one more for practice let's create one more collection DB dot create collection what's the collection name let's create a collection of courses like what classes can we take at our school that was approved let's show our collections and we have three courses students teachers then to drop a collection you type DB the name of the collection let's drop our courses dot drop method that was dropped let's show our collections again and we are back to two collections a collection of students and a collection of teachers all right everybody that was mongodb in one hour hey if you've made it this far be sure you've smashed that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
