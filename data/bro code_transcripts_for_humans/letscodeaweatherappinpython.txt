With timestamps:

00:00 - hey uh what's going on everybody so in
00:02 - today's video we're going to create a
00:03 - working weather app that fetches
00:05 - real-time weather data from an API this
00:08 - is a massive project so feel free to
00:10 - take your time take several days or even
00:13 - weeks if you need to complete this heck
00:14 - you can even add this project to your
00:16 - portfolio well let's get started
00:22 - everybody all right let's get started
00:24 - everybody this is a fairly useful API to
00:26 - get real-time weather data the website
00:29 - is open weather map.org
00:31 - you will need your own API key but
00:34 - signing up for an account is free to
00:36 - create an account will go to sign
00:38 - in create an account enter your
00:41 - information and then sign
00:44 - in once you're signed in to find your
00:46 - API key go to this drop down menu go to
00:49 - my API keys and you would just need to
00:52 - copy this API key if the status is
00:55 - inactive you'll need to toggle it to
00:58 - active like
01:00 - so now it may take several minutes for
01:03 - your API key to become active hopefully
01:05 - by the time of this project where we
01:07 - will need it it'll be active I would
01:09 - either leave up this window or copy this
01:12 - key and paste it
01:14 - somewhere if you're new to my python
01:16 - series we have a little bit of setup to
01:18 - do you will need the pi qt5 package
01:21 - installed if you've been following my
01:23 - series you can skip ahead to the
01:25 - following timestamp at this point we'll
01:27 - already have a basic window set up to
01:29 - download P qt5 you can open up a
01:32 - terminal and use pip which is Python's
01:35 - package manager to install pi
01:39 - qt5 and myself I do already have this
01:43 - downloaded once you have this package
01:45 - downloaded and it's within your site
01:47 - packages folder we will need the
01:49 - following Imports we will import CIS CIS
01:53 - means system it handles system variables
01:56 - for your python interpreter we will
01:58 - import the request module to make a
02:01 - request to an
02:02 - API then we'll need widgets widgets are
02:05 - the building blocks of a pi qt5
02:08 - application from the package of Pi
02:10 - qt5 access the module of QT
02:14 - widgets import the following
02:17 - widgets Q
02:20 - application Q
02:23 - widget Q
02:26 - label q line edit
02:30 - Q push
02:32 - button let me put some of these on a new
02:34 - line for
02:37 - readability QV box
02:42 - layout this is a vertical layout
02:45 - manager to work with alignment we'll
02:47 - need the following from the package of
02:49 - Pi qt5 from the module of QT core import
02:54 - the following class QT which is used for
02:58 - alignment so the these are the Imports
03:00 - that you'll need just to be sure that I
03:03 - didn't misspell anything or get the
03:05 - capitalization wrong I'm just going to
03:07 - do a test
03:08 - run no problems processed finished with
03:11 - exit Code
03:13 - Zero sometimes I make one of these
03:15 - characters lower case and then it
03:17 - doesn't
03:18 - work okay we have our Imports we will
03:21 - need to create a class of weather app
03:26 - weather app is going to inherit from the
03:28 - parent of Q widget
03:32 - we will need a Constructor so we'll
03:34 - Define that Dunder init no arguments
03:38 - besid
03:39 - self in case we have arguments to send
03:41 - to the parent we will call the parent
03:44 - with super meaning the super class then
03:47 - call the Constructor but currently we
03:50 - don't have any
03:51 - arguments if we are running our main
03:54 - python file directly we can verify that
03:57 - with the if
03:58 - statement if Dunder name is equal to a
04:02 - string of Dunder
04:06 - main if we are running this file
04:08 - directly then we will create a weather
04:10 - app object otherwise we
04:13 - won't if this statement is true we will
04:15 - do the following we will create an app
04:18 - object app equals call The Constructor
04:22 - within our Q application class but we
04:25 - will pass in the following access the
04:27 - module of CIS then access a RGV which
04:31 - means
04:32 - arguments if we have command line
04:34 - arguments to send to our application
04:36 - this is how we would take care of that
04:38 - but we're not going to be using command
04:40 - line arguments in this video but it's
04:42 - nice to Future proof our code just in
04:44 - case we do we will construct a weather
04:47 - app object weather app equals call The
04:50 - Constructor of our weather app class now
04:53 - this window isn't going to show we have
04:56 - to call the show method of our weather
04:57 - app Weather app
05:00 - doow and now it's going to show for a
05:03 - brief
05:04 - second we need to ensure a clean exit
05:08 - access sis call the exit method within
05:12 - this method we will pass in the
05:13 - following take our app call the execute
05:17 - method which is
05:20 - excore it is a method so we have to call
05:23 - it this method handles events within our
05:26 - application such as closing the window
05:30 - so now our window should stay in place
05:33 - until we close
05:35 - it if you're one of the people that have
05:37 - jumped ahead we have created a class of
05:39 - weather app which inherits from the
05:41 - parent of Q widget we've constructed a
05:44 - weather app object and we're showing it
05:48 - if you've made some Pi qt5 Projects in
05:50 - the past you would just have to change
05:52 - some of these
05:53 - around within the Constructor of our
05:55 - class weather app we will declare the
05:57 - different widgets that belong to our
05:59 - weather app app object we will create a
06:01 - label that prompts the user to enter in
06:03 - a city we will name this city label
06:07 - equals this is a q label
06:10 - widget we can set the initial text of
06:13 - the label let's say
06:15 - enter city
06:18 - name then the second argument is going
06:20 - to be self we are adding this label to
06:24 - our weather app object here's what we
06:26 - have
06:28 - currently we still have to do some CSS
06:30 - formatting but we'll take care of that
06:33 - soon we will need a line edit widget
06:37 - basically a text box we will name it
06:41 - City
06:44 - input the widget is line
06:47 - edit no parameters besides
06:52 - self here is our line edit widget we're
06:55 - not currently using a layout manager
06:58 - these widgets are going to overlap
07:00 - app we need a button self. getet weather
07:08 - button this is a q push
07:11 - button the text on this button will be
07:14 - get weather we are adding this to self
07:18 - our weather app
07:20 - object here's our
07:22 - button when we click on this button
07:25 - we'll make a request to an API for the
07:28 - next following widgets we're going going
07:29 - to add some placeholders just so that we
07:31 - can see what we're doing when we apply
07:33 - CSS
07:34 - styling we need a temperature label to
07:37 - display the temperature
07:39 - temperature
07:41 - label equals a q
07:45 - label temporarily for the label let's
07:48 - say that the temperature is 70° F or
07:52 - pick something else in Celsius so to add
07:54 - a degree symbol if you're using Windows
07:57 - make sure numlock is on hold Alt then on
08:00 - the numpad typee
08:02 - 0176 I will pick 70°
08:05 - fah and then we will add this to
08:08 - self again we're just using this
08:10 - temperature as a placeholder we'll
08:12 - delete it when we do a test
08:14 - run if you would like to include an
08:16 - emoji or some other image we can create
08:19 - a label for that I will name this Emoji
08:23 - label equals a q
08:27 - label I will add an emoji
08:30 - of a son as a placeholder again we're
08:33 - going to delete this when we do a test
08:35 - run we are adding this to
08:40 - self again everything is overlapping
08:42 - that is
08:44 - fine and we need a description of the
08:47 - weather
08:49 - description
08:51 - label equals a q
08:55 - label as a placeholder let's say that
08:58 - it's sunny and we are adding this label
09:01 - to
09:02 - self okay here are all the widgets
09:05 - they're all overlapping so we need to
09:07 - fix
09:09 - that all right moving on everybody so
09:12 - now we have to design the layout of our
09:15 - web app right now all of our widgets are
09:18 - gravitating to the top left corner so I
09:21 - will Define a
09:23 - method to initialize our user interface
09:30 - at the end of this Constructor we will
09:32 - call this method self. initialize UI
09:36 - then call it once we've constructed our
09:39 - widgets we'll format them and design the
09:43 - layout so we are now within our
09:45 - initialized user interface
09:48 - method first let's set the title of our
09:51 - window self. set window
09:56 - title let's say that the title is WEA
10:00 - app so that should change which it
10:04 - does we're going to use a vertical
10:07 - layout manager to handle all the
10:09 - widgets let's name the layout manager
10:12 - vbox equals call The Constructor of the
10:16 - class QV box layout we're going to take
10:20 - our layout manager of vbox then add a
10:24 - widget we will start with the city label
10:27 - that's first
10:30 - we will pass in self. City Lael and
10:33 - we'll do this with the other widgets
10:36 - too we have City
10:41 - input get weather
10:47 - button temperature
10:53 - label Emoji
10:56 - label and then a description label
11:04 - take self our weather app set the layout
11:09 - we will pass in the layout manager of
11:12 - vbox and here's what we have
11:17 - currently all the widgets are arranged
11:19 - in a column now we just have to Center
11:22 - align them horizontally here's
11:26 - how we will take self City
11:31 - label call the set alignment
11:36 - method access the class of
11:39 - QT access the flag of align
11:43 - Center we're going to align all of our
11:45 - widgets in the center except for our
11:48 - weather button currently our button
11:50 - expands to take up the width of the
11:52 - window so we don't need to horizontally
11:55 - align that so we have five widgets to
11:58 - align
12:00 - we have City label City input
12:03 - temperature label Emoji label and
12:07 - description
12:08 - label all of the widgets are going to be
12:11 - arranged in a column
12:13 - horizontally now we just have to apply
12:15 - some CSS styling because right now it's
12:18 - kind of
12:19 - ugly we will apply Styles based on an
12:22 - object name but we have to set that
12:24 - object name so let's start with our city
12:27 - label self. City label
12:32 - call the set object name
12:37 - method pass in a unique ID for this
12:40 - widget I will name it City label I'll
12:43 - keep it the same okay we have to do this
12:45 - with the other widgets
12:47 - too we have a total of
12:50 - six we have City label City
12:55 - input we have the get weather button
13:03 - temperature
13:04 - label Emoji
13:07 - label and description
13:12 - label then we're going to set a style
13:14 - sheet take self our weather app apply a
13:17 - stylesheet with set style
13:21 - sheet we have a lot of properties to
13:23 - write I will do so within a set of
13:25 - triple quotes just to keep everything
13:27 - more organized
13:30 - we can apply CSS Styles based on a class
13:34 - so the class is going to be Q Lael
13:37 - within a set of curly braces we can list
13:38 - multiple CSS properties I will set the
13:41 - font family to be
13:46 - calibri as well as all push buttons Q
13:50 - push
13:52 - button so here's the font although it's
13:55 - still kind of small let's select our ID
13:58 - of City label
13:59 - it's good practice to precede this ID
14:02 - with the name of the class so Q label
14:05 - pound sign the
14:08 - ID we precede the ID with the name of
14:10 - the class just so we're only applying
14:13 - these CSS properties to any ID that's a
14:16 - city label that falls within the class
14:18 - of Q
14:20 - label let's set the font size to be 40
14:24 - pixels let's set the font size to be 40
14:27 - pixels
14:29 - that's
14:30 - better I'll set the font style to be
14:33 - italic font style
14:38 - italic that's pretty
14:41 - good let's select the ID of City input
14:46 - this is a line edit widget q line edit
14:51 - pound the ID of City input within a set
14:55 - of curly
14:56 - braces let's set the font size
14:59 - to be 40
15:07 - pixels we will select our push button
15:09 - which is named get weather button the
15:12 - class is Q push button pound the ID of
15:18 - get weather button within a set of curly
15:20 - braces we will apply the following let's
15:23 - set the font size to be 30 pixels
15:30 - and let's make it bold font weight
15:39 - bold let's select our temperature
15:43 - label the ID is temperature label and
15:46 - this is a q label pound temperature
15:51 - label we will increase the font
15:54 - size font size 75 pixels
16:02 - better let's work on our Emoji
16:07 - next we will select the ID of emoji
16:12 - label the class is Q label the ID is
16:16 - Emoji
16:18 - label we'll set the font size first font
16:22 - size 100 pixels I would like a large
16:26 - image to display emojis properly we're
16:30 - going to use a very specific font we're
16:33 - going to set the font family to be now I
16:36 - don't know if I'm saying this right seg
16:39 - o UI
16:42 - Emoji I probably pronounced this word
16:45 - wrong but I don't
16:48 - care so then our Emoji should display
16:51 - correctly using this font it's
16:56 - colorful then we have the description
16:58 - label of the web
16:59 - that is the last widget description
17:02 - label the class is Q label the ID is
17:06 - description
17:07 - label let's take the font size and set
17:11 - it to be 50
17:15 - pixels all right so this is what our
17:17 - weather app is going to look like we
17:19 - have the city label a text box to enter
17:22 - in a city the get weather button the
17:25 - temperature label an emoji label and a
17:29 - description of the weather currently now
17:31 - we just have to add some functionality
17:33 - because currently this doesn't do
17:36 - anything all right so now we just have
17:38 - to add some functionality to our weather
17:40 - app temporarily I'm going to collapse
17:43 - our initialized user interface method we
17:46 - will Define a few extra methods let's
17:49 - declare a method of get
17:52 - weather no parameters besid self I'll
17:56 - write pass for now as a placeholder
17:59 - we will need a method to display any
18:02 - errors display error there's going to be
18:06 - one argument besid self a message we
18:09 - will pass in an error message if there
18:11 - is
18:13 - one and a method to display weather
18:18 - that's if there's no
18:19 - errors we will need some data our
18:22 - weather
18:24 - data so be sure that you write these
18:26 - three methods
18:29 - back within our initialized user
18:30 - interface method at the
18:35 - bottom we have to connect a signal to a
18:38 - slot when we click on the button with
18:41 - the signal of clicked we will connect a
18:43 - slot of get weather we will access self
18:48 - take our get weather
18:52 - button with a signal of Click we will
18:56 - connect a slot upself dog
19:01 - getwe and I will print a test message
19:04 - just to be sure that it's
19:06 - working you get the
19:10 - weather so I press the button and we
19:13 - will display you get the
19:16 - weather we can get rid of our
19:18 - placeholder text for the temperature our
19:20 - emoji and the weather
19:23 - description so we can delete these
19:26 - strings But be sure to keep self
19:35 - scrolling down to our get weather method
19:38 - when we click the button we're going to
19:40 - create a few local variables the first
19:43 - is going to be our API key equals this
19:49 - will be a
19:50 - string back to the open Weather API you
19:53 - will copy your API key and make sure
19:56 - that it's active you can use the to
19:58 - button to make it inactive and
20:01 - active so make sure that it's
20:05 - active paste your API key within a
20:07 - string please use your own it still may
20:11 - take several minutes for your key to be
20:12 - active just keep that in
20:15 - mind we will need to get the city that
20:17 - we're looking
20:19 - up so let's say we type in
20:22 - Miami I have to get the text from this
20:25 - widget this line edit widget we will
20:28 - create create a local variable of city
20:31 - city equals access our line edit widget
20:35 - it had a name of City
20:39 - input so self. City input to get the
20:43 - text we will call the text
20:45 - method we have the API key and the city
20:49 - now we will create a
20:51 - URL this will be an FST
20:54 - string using the request module we will
20:57 - pass in a URL to make a request
21:00 - to so back to our open Weather API to
21:04 - get the URL for a city we have to go to
21:06 - the tab of
21:08 - API scroll down to current weather data
21:12 - and there's going to be some API
21:15 - documentation to the right we have a
21:17 - link for built-in API request by city
21:20 - name we will copy this
21:24 - URL and paste it within our F string
21:28 - there's two changes we're going to make
21:30 - we will replace city name with City the
21:33 - name of that variable and API space key
21:37 - with API uncore
21:40 - key it doesn't matter what you name
21:42 - these just make sure they're consistent
21:43 - with your
21:45 - variables when we make an API request we
21:47 - will be returned with a response object
21:50 - response equals access our module of
21:55 - requests call the get method then pass
21:58 - in our
22:01 - URL with our response object we have to
22:04 - convert it to a Json
22:06 - format we will be returned with an
22:08 - object we will name this object data
22:11 - it's going to be readable to us data
22:14 - equals take our response object and use
22:17 - the Json method to convert it to a Json
22:20 - format so let's print our data to see
22:23 - what we're working
22:26 - with let's say I look up the the city of
22:32 - Miami so we have one gigantic
22:36 - object this is our weather data we have
22:40 - coordinates such as longitude and
22:43 - latitude a weather
22:45 - description currently in Miami there's
22:48 - broken
22:49 - clouds there's an ID of the
22:52 - weather this is the temperature but it's
22:54 - in
22:55 - kelvin if we scroll all the way to the
22:57 - end
22:59 - we are looking for an HTTP status code
23:02 - which is named Cod short for code 200
23:06 - means that the response was successful
23:09 - depending on what this number is we will
23:11 - display one of a few error messages if
23:14 - our status code is 404 that means the
23:16 - city wasn't found and there's many
23:18 - others so 200 means that the request was
23:23 - successful so let's write the
23:26 - following if our data object at Key of
23:31 - cod if this is equal to 200 if the
23:35 - request was successful then we will call
23:39 - the display weather method self.
23:41 - displayweather
23:43 - but we do have to pass in our
23:47 - data now temporarily I'm just going to
23:51 - print our weather data we'll do some
23:53 - more complex stuff later but I just want
23:56 - to be sure that everything is working
23:59 - so let's look up Los
24:03 - Angeles so here's the weather in Los
24:07 - Angeles there is currently broken
24:10 - clouds and again the status code is 200
24:14 - the request was
24:16 - successful I'll write an else statement
24:18 - for now we will print our data what if
24:22 - we can't find a city for example I will
24:25 - look up the city blah blah blah
24:29 - and get the
24:31 - weather so here's our weather data we
24:34 - have an error code of
24:36 - 404 and a message of City not found
24:40 - let's do some exception handling in case
24:42 - we run into one of these status codes
24:44 - that's not
24:45 - 200 we can get rid of our El
24:48 - statement what we'll do is enclose all
24:51 - of our dangerous code that means any
24:53 - code that might cause an exception
24:56 - within a tri block
24:58 - we will try all of this code and handle
25:02 - any exceptions with an accept block
25:05 - there's two types of exceptions we're
25:07 - looking for the first is an HTTP
25:13 - error HTTP error is an exception raised
25:18 - by the request module when an HTTP
25:21 - request returns a status code that's 400
25:24 - or
25:25 - 500 however this exception is found
25:28 - within in the request module that we've
25:31 - imported so we can't simply just say
25:34 - accept HTTP error we first have to
25:38 - access the request module then access
25:43 - exceptions then we can list the specific
25:46 - exception of HTTP
25:48 - error we'll encounter this exception if
25:51 - the status code is between 400 and 500
25:58 - for now all right
25:59 - pass so there's one more step within our
26:02 - Tri block if we're going to handle any
26:05 - HTTP errors we have to raise an
26:08 - exception within our Tri block because
26:11 - our Tri block by itself normally doesn't
26:13 - catch these we will take our response
26:17 - object and call the raise for status
26:23 - method this method will raise an
26:26 - exception if there's any HT TTP errors
26:29 - normally our Tri block doesn't do that
26:31 - so we have to manually type
26:34 - this there's another type of acception
26:36 - we'll catch and that's the request
26:38 - exception We'll add another block for
26:42 - accept
26:44 - request
26:48 - exception this is found within the
26:50 - request
26:50 - module
26:53 - requests
26:55 - exceptions request exception
26:58 - with a request exception this can be due
27:01 - to network problems invalid URLs
27:04 - exceptions of that
27:05 - nature in case we run into one of those
27:07 - types of exceptions we will execute this
27:10 - block of code but for now I'll write
27:12 - pass we'll get back to it
27:14 - later going back to our accept block
27:17 - where we handle any HTTP errors let's
27:20 - use a match case statement we need to
27:22 - get the status code of our response I'll
27:25 - print that
27:26 - temporarily let's print our response
27:28 - objects status code and see what it
27:34 - is again let's make up a city get the
27:38 - weather we have a status code of 404
27:41 - that means the city wasn't found
27:43 - depending on what this number is the
27:45 - status code we'll use a match case
27:49 - statement so we will match our response
27:53 - objects status code
27:59 - the first case will be
28:03 - 400 that means there's a bad
28:06 - request so let's print the
28:11 - following bad request I'll add a new
28:14 - line
28:16 - character please check your
28:21 - input we'll create a total of I believe
28:24 - eight cases we'll copy what we have
28:30 - so we have
28:31 - 400 401
28:34 - 403 44 that one we're familiar
28:38 - with
28:40 - 500
28:44 - 502
28:47 - 503
28:50 - 504 so for case 401 that means we're
28:54 - unauthorized maybe our API key isn't
28:57 - active yet
28:59 - so let's say
29:04 - unauthorized invalid API
29:11 - key for
29:13 - 403 that means access is denied it's
29:16 - forbidden so let's print
29:21 - forbidden access is
29:26 - denied 4 for is for something that's not
29:30 - found not
29:34 - found City not
29:37 - found 500 is for an internal server
29:42 - error internal server error please try
29:47 - again
29:51 - later 502 is for a bad
29:54 - gateway
29:55 - bad gateway invalid response from the
30:05 - server 503 is for service
30:09 - unavailable service
30:13 - unavailable server is
30:17 - down then 504 is for a Gateway
30:23 - timeout
30:25 - Gateway timeout
30:28 - no response from the
30:35 - server in case there's any unexpected
30:37 - error we can add a wild card of an
30:43 - underscore with our HTTP error let's
30:46 - give it a name as
30:49 - HTTP
30:51 - error and then we'll just print it in
30:53 - case there are no matching cases let's
30:56 - print the following
31:00 - HTTP error
31:02 - occurred I'll add a new
31:05 - line let's convert this to an FST
31:07 - string add a
31:09 - placeholder and then I will print our
31:12 - HTTP
31:14 - eror all right let's do a test
31:17 - run so in case we can't find our city we
31:20 - should encounter a 404
31:22 - error not found City not found
31:26 - eventually we will display this message
31:28 - within our app but we know that it
31:31 - works what if my API key is
31:34 - invalid so I will take my API key set it
31:38 - to be
31:39 - inactive but it might take a few minutes
31:41 - to take
31:43 - effect the status code of our response
31:45 - object should be
31:47 - 401 so this time I'm going to look up a
31:50 - city I have an invalid API
31:53 - key and I get that error message of
31:56 - unauthorized invalid API
31:59 - key all right everybody so I am on day
32:02 - three of working on and recording this
32:04 - topic over the course of the day I
32:06 - thought of one change that I can make
32:08 - we're going to add a few extra accept
32:10 - blocks so we will accept access requests
32:15 - access exceptions we will handle any
32:18 - connection eror
32:24 - exceptions as well as any timeout
32:26 - exceptions
32:33 - and any
32:35 - redirects too many
32:43 - redirects so if we run into a connection
32:46 - error let's say that our internet gets
32:48 - disconnected well we can print something
32:51 - so let's print the
32:52 - following let's print
32:55 - connection error
32:58 - I'll add a new line
33:00 - character check your internet
33:05 - connection if we encounter a timeout
33:08 - then we will print the
33:10 - following we have a time out
33:15 - error the request timed
33:20 - out if we have a too many redirects
33:23 - error that M should be Capital by the
33:25 - way
33:29 - let's
33:30 - State too many
33:36 - redirects check the
33:41 - URL and if there's anything else we
33:43 - don't anticipate I'll give this
33:45 - exception a name of as wreck
33:50 - error and then we'll just print it this
33:53 - is a last resort I'll use an F string
33:58 - request error I'll add a new line I'll
34:02 - add a placeholder then display our
34:05 - request
34:06 - error so I'm actually going to turn off
34:09 - my internet I'll see if I can get a
34:11 - connection error
34:12 - intentionally so my internet is
34:14 - currently off I will attempt to look up
34:17 - a city get the weather and we get a
34:21 - connection air check your internet
34:24 - connection all right my internet is
34:26 - connected again
34:28 - let's perform a test
34:32 - run and we get the weather in
34:36 - Miami now what we're going to do is if
34:38 - we have an
34:40 - error we'll display the error message
34:43 - within the app and not within our
34:46 - console so we're going to replace print
34:50 - with a call to our display error method
34:53 - let me zoom out a little bit so replace
34:56 - print with self dot display error and
35:00 - we're passing in a
35:02 - message so let's replace
35:12 - those one thing I forgot to add although
35:15 - it's not necessary I'm going to add a
35:17 - colon after each initial
35:19 - message I think it'll look
35:22 - better you don't have to do this but I'm
35:25 - OCD about the appearance
35:28 - if we encounter one of these exceptions
35:30 - we'll pass along a message to our
35:33 - display error method and display it
35:35 - within the
35:36 - app let's take our temperature label
35:39 - self. temperature
35:43 - label and set the
35:45 - text to be our message that we pass
35:52 - in let's do a test run let's look up a
35:55 - city that doesn't exist get the
35:58 - weather so we get that error message not
36:01 - found City not found while we're within
36:04 - this method I'm going to change the font
36:06 - size just so that it's a little bit
36:11 - smaller so let's take our temperature
36:14 - label
36:15 - self. temperature label I'm just going
36:17 - to copy this CU I'm
36:19 - lazy I will call the set stylesheet
36:24 - method and pass along a new property let
36:27 - let's set the font size to 30
36:32 - pixels let's look up north
36:35 - pole I don't think that's a
36:38 - city oh I guess it is
36:43 - interesting the North Pole is a city I
36:46 - guess let's look up blah blah
36:50 - blah not found City not
36:53 - found let's do another test what if our
36:56 - API key is invalid I'll just delete one
36:59 - of the
37:01 - digits let's look up Los
37:05 - Angeles unauthorized invalid API
37:08 - key let's change that back again I will
37:12 - turn off my
37:13 - internet then look up
37:17 - Miami Connection Error check your
37:19 - internet connection all right so we know
37:22 - that our exception handling
37:24 - works okay now we're within the display
37:26 - weather method
37:28 - we'll receive an object to represent our
37:31 - data we have to get the temperature but
37:34 - first I'm going to print our data so let
37:37 - me zoom in a little
37:39 - bit let's look up Houston Houston
37:45 - Texas I need the temperature within our
37:48 - data object we are looking for a key of
37:51 - Main and that is right here main
37:54 - contains a dictionary with key value
37:56 - pairs
37:58 - once we've accessed main we have to
38:00 - access temp to get the temperature and
38:02 - this temperature is in kelvin we'll have
38:04 - to convert it to Celsius or Fahrenheit
38:07 - it's your
38:08 - choice so we need to extract this value
38:12 - I will store it as a local variable
38:17 - temperature let's say temperature uncore
38:20 - k for Kelvin equals take our data object
38:25 - access the key of main that's right here
38:29 - then we have to go one level deeper and
38:32 - get the temperature the key is
38:35 - temp then give me the value at the Key
38:38 - of temp and that should return the
38:40 - current temperature so to test it let's
38:43 - print it let's print the temperature in
38:48 - Kelvin so what is the weather in Houston
38:50 - Texas the temperature that
38:53 - is 309 Kelvin
38:57 - let's convert it to Celsius and
39:01 - Fahrenheit let's create temperature C if
39:04 - you want to use celsius if you would
39:06 - rather use Fahrenheit you can skip this
39:08 - step to convert from Kelvin to Celsius
39:11 - we will take our temperature in Kelvin
39:14 - subtract
39:18 - 273.15 then for
39:20 - Fahrenheit let's take temperature f for
39:24 - Fahrenheit equals this is a little more
39:26 - complicated
39:28 - take our temperature in
39:30 - Kelvin time 9 /
39:34 - 5 subtract
39:39 - 45967 okay so let's print the
39:41 - temperature in
39:46 - celsius let's look up
39:50 - Houston 36.467853
39:56 - [Music]
40:01 - 97.6 Dees fah that's pretty
40:05 - hot all right so once we have our
40:08 - temperature let's change the temperature
40:10 - label self. temperature label I'll just
40:14 - copy this then we will set the text I'll
40:18 - use an F
40:20 - string add a placeholder I'll use
40:23 - Fahrenheit but feel free to use
40:25 - celsius then I will add a degree symbol
40:29 - with Windows make sure numb lock is on
40:31 - hold alt then on your numpad type 0176
40:34 - for a degree
40:35 - symbol then f for
40:39 - Fahrenheit let's look up
40:41 - Miami get the weather and here's the
40:45 - temperature
40:47 - 94964 now let's say I would like no
40:49 - digits after the decimal I can add a
40:52 - format specifier after our temperature
40:54 - I'll add a colon 0f
40:57 - to display no
40:59 - decimals let's try that again I will
41:02 - look up Miami get the weather the
41:05 - current temperature in Fahrenheit is 95°
41:10 - Fahrenheit now here's one issue let's
41:13 - say we display an error then display the
41:15 - weather if we display an airror we're
41:17 - going to be changing the font
41:19 - size so let's look up blah blah blah get
41:23 - the weather City not found then let's
41:27 - look look up Miami again get the weather
41:30 - and the font size is a lot smaller so if
41:33 - we display the weather let's reset the
41:36 - font size we can really just copy this
41:39 - line so within the display weather
41:42 - method let's set the font size back to
41:45 - 75 what it was
41:49 - originally let's try that
41:51 - again let's look up a city that doesn't
41:54 - exist get the weather City not found
41:57 - then we'll look up the city that does
41:58 - exist like Miami and get the weather 95°
42:04 - F now let's get a description of the
42:06 - weather we'll display that at the bottom
42:09 - in the center we'll display a picture or
42:10 - an emoji but we'll handle that
42:13 - last now we need a description of the
42:15 - weather like is it sunny is it cloudy is
42:18 - it raining so after we calculate the
42:21 - temperature so I'm going to print our
42:24 - data again
42:27 - let's look up Los
42:31 - Angeles So currently it's 85 degrees
42:34 - Fahrenheit so for the weather
42:36 - description that is found at the Key of
42:40 - weather we're now within a list at index
42:44 - zero within our
42:45 - list we'll look up the key of
42:47 - description which states clear
42:51 - sky so we will create a local variable
42:54 - of weather description
42:59 - equals access our
43:03 - data at the
43:05 - Key of
43:08 - weather there's layers to this we're
43:11 - then within a
43:13 - list and actually it's a list with only
43:16 - one item in
43:17 - it so at the index of
43:21 - zero then at the Key of
43:25 - description that's going to return this
43:28 - description of clear
43:31 - sky so we will take our description
43:34 - label self. description label let me
43:38 - just copy
43:40 - it this one right
43:44 - here then we will set the
43:48 - text and then pass in our weather
43:52 - description what is the weather
43:54 - description of Los Angeles
43:58 - 86° Fahrenheit and there's a clear
44:02 - sky okay now the last thing we're going
44:04 - to do is add an emoji We'll add it right
44:07 - to the center between the temperature
44:09 - and the weather description you don't
44:11 - necessarily have to but I think it'll
44:13 - look cool and that's a good enough
44:16 - reason so let's create another method to
44:18 - handle
44:20 - that we will Define a method of get
44:23 - weather
44:25 - Emoji or picture if you would rather use
44:28 - a picture we don't need self necessarily
44:31 - we're going to need a weather
44:35 - ID this method isn't going to rely on
44:38 - any class data or instance data we could
44:41 - make it a static method I'll add a
44:43 - decorator of static
44:46 - method in summary a static method we
44:49 - haven't covered these for a little bit
44:51 - they belong to a class but don't require
44:53 - any instance specific data or any other
44:56 - methods
44:57 - they're used as more of a utility tool
45:00 - we're going to be passing in a weather
45:02 - ID and returning an
45:06 - emoji I'm going to show you where we can
45:08 - find that weather ID I'll use a print
45:11 - statement I will print our
45:15 - data let's look up Miami again that's
45:18 - the first thing that came to
45:22 - mind now at the Key of weather there's a
45:26 - key of ID
45:27 - and the value is a three-digit number
45:30 - I'll show you this chart depending on
45:32 - what this three-digit number is that
45:34 - corresponds to a certain group of
45:36 - weather so the 200 range is a
45:40 - thunderstorm 300 is a drizzle 500 is
45:43 - rain 600 is
45:46 - snow 700 is atmosphere like if there's a
45:49 - tornado or there's a volcanic
45:53 - eruption 800 exactly is a clear sky
45:57 - anything that's 801 or above refers to
46:00 - clouds so this ID is 803 we have broken
46:04 - clouds depending on what this ID is I
46:08 - would like to return a certain Emoji
46:10 - based on the weather so we need this ID
46:14 - I'll delete our print statement we no
46:16 - longer need it let's say before our
46:18 - weather description we will create a
46:20 - local variable of weather
46:23 - ID
46:24 - equals access our data
46:27 - object then access the key of
46:32 - weather the value at weather is a list
46:36 - but this list only has one item in it so
46:40 - we need the index of operator at zero
46:43 - and then we will access the key of
46:47 - ID the key is ID so our weather ID is
46:52 - going to be a number a three-digit
46:54 - number okay everybody we're near the end
46:57 - so after setting the temperature we're
46:59 - going to set the Emoji label self.
47:04 - Emoji
47:05 - label and call the set text
47:09 - method within the set text method we
47:12 - will call self. getwe Emoji
47:16 - method this will return a string an
47:19 - emoji within a string but we have to
47:22 - pass in our weather
47:24 - ID it's that three-digit number
47:27 - so now we are within our get weather
47:30 - Emoji method depending on the range of
47:33 - that three-digit number we will return
47:35 - one of a few emojis we could use a match
47:38 - case statement I think it's more
47:40 - complicated with the match case
47:41 - statement we'll use LF statements for
47:45 - Simplicity so if our weather
47:49 - ID is greater than or equal to 200 and
47:53 - our weather ID is less than or equal to
47:59 - 232 now we have two conditions here
48:02 - linked with the and logical
48:04 - operator there is a shortcut to this and
48:07 - actually py charm is telling me that
48:08 - there is we can simplify these
48:11 - Expressions instead of two separate
48:14 - conditions we can combine them into one
48:17 - if 200 is less than or equal to our
48:20 - weather ID and our weather ID is less
48:23 - than or equal to 232 if this one
48:26 - combined condition is true then we will
48:29 - return an
48:30 - emoji so to add an emoji on Windows you
48:33 - can hold on the window key and press
48:38 - semicolon so 200 to 232 that's for a
48:42 - thunderstorm depending on the font style
48:44 - of your IDE some of these emojis might
48:47 - not display properly you can always just
48:50 - copy them from some place
48:52 - else I think that's better it's more
48:55 - colorful than else
48:58 - if 300 is less than or equal to our
49:02 - weather
49:04 - ID and our weather ID is less than or
49:07 - equal to
49:09 - 321 this is for a partially cloudy
49:13 - Sky we will
49:16 - return some clouds a partially cloudy
49:20 - sky and again I don't like that one so
49:23 - let's use this one instead
49:28 - else if 500 is less than or equal to our
49:32 - weather
49:33 - ID Which is less than or equal to
49:38 - 531 we will return
49:47 - rain that's
49:51 - better 600 to
49:53 - 622 else if 600 is less than or equal to
49:58 - our weather
50:00 - ID Which is less than or equal to
50:06 - 622 we will return
50:14 - snow so 701 to 741 is missed or fog else
50:20 - if 701 is less than or equal to our
50:25 - weather ID
50:28 - Which is less than or equal to
50:31 - 741 we will return some mist or
50:37 - fog 762 specifically is for ash like
50:41 - from a
50:43 - volcano so else if our weather
50:47 - ID is directly equal to
50:51 - 762 we will return let's return a
50:55 - volcano
51:00 - 771 is for a Squall that's a violent
51:04 - gust of wind else if our weather
51:08 - ID is directly equal to
51:13 - 771 we will
51:18 - return let's return that a violent gust
51:21 - of wind a
51:24 - Squall 781 is for a Tado
51:28 - else if our weather ID is equal to
51:33 - 781 return a
51:39 - tornado 800 exactly is for a clear
51:43 - sky else if our weather ID is equal to
51:49 - 800
51:51 - return a sun a sun emoji
51:56 - else if 801 is less than or equal to our
52:01 - weather
52:03 - ID Which is less than or equal to
52:07 - 804 we will return some
52:17 - clouds now if there are no matches let's
52:21 - return an empty string to not display
52:24 - anything okay let's do a test run
52:29 - let's look up
52:32 - Miami we get scattered clouds it's
52:36 - 94° Los
52:39 - Angeles get the weather we have a clear
52:41 - sky and a sun now there's one fix we
52:44 - need to make let's say that I make up a
52:47 - city again blah blah
52:50 - blah get the weather we should clear our
52:53 - Emoji label and the weather description
52:56 - but we still get that error
52:59 - message so after we display our error
53:02 - within the display error method after we
53:05 - set the text of the temperature label
53:08 - let's take the Emoji label self. Emoji
53:12 - label and call the Clear method to clear
53:16 - it then we have to do this with the
53:18 - description label self. description
53:24 - label and call the Clear method now we
53:28 - should be able to clear it when we get
53:30 - an
53:32 - error okay let's look up
53:34 - Houston get the weather few clouds
53:38 - 98° let's make up a City Pizza City get
53:43 - the weather not found City not found and
53:47 - the Emoji label and the weather
53:49 - description are
53:52 - cleared okay what if I type in nothing
53:54 - what happens let's get the weather
53:57 - we have a bad request please check your
54:00 - input that's if we have an HTTP status C
54:03 - to 400 we handled this exception bad
54:07 - request all right one last City what
54:10 - about Paris let's get the weather it is
54:15 - 68° F and there's light rain all right
54:18 - everybody so that is a weather app that
54:21 - you can make using python add it to your
54:23 - portfolio and thanks for watching

Cleaned transcript:

hey uh what's going on everybody so in today's video we're going to create a working weather app that fetches realtime weather data from an API this is a massive project so feel free to take your time take several days or even weeks if you need to complete this heck you can even add this project to your portfolio well let's get started everybody all right let's get started everybody this is a fairly useful API to get realtime weather data the website is open weather map.org you will need your own API key but signing up for an account is free to create an account will go to sign in create an account enter your information and then sign in once you're signed in to find your API key go to this drop down menu go to my API keys and you would just need to copy this API key if the status is inactive you'll need to toggle it to active like so now it may take several minutes for your API key to become active hopefully by the time of this project where we will need it it'll be active I would either leave up this window or copy this key and paste it somewhere if you're new to my python series we have a little bit of setup to do you will need the pi qt5 package installed if you've been following my series you can skip ahead to the following timestamp at this point we'll already have a basic window set up to download P qt5 you can open up a terminal and use pip which is Python's package manager to install pi qt5 and myself I do already have this downloaded once you have this package downloaded and it's within your site packages folder we will need the following Imports we will import CIS CIS means system it handles system variables for your python interpreter we will import the request module to make a request to an API then we'll need widgets widgets are the building blocks of a pi qt5 application from the package of Pi qt5 access the module of QT widgets import the following widgets Q application Q widget Q label q line edit Q push button let me put some of these on a new line for readability QV box layout this is a vertical layout manager to work with alignment we'll need the following from the package of Pi qt5 from the module of QT core import the following class QT which is used for alignment so the these are the Imports that you'll need just to be sure that I didn't misspell anything or get the capitalization wrong I'm just going to do a test run no problems processed finished with exit Code Zero sometimes I make one of these characters lower case and then it doesn't work okay we have our Imports we will need to create a class of weather app weather app is going to inherit from the parent of Q widget we will need a Constructor so we'll Define that Dunder init no arguments besid self in case we have arguments to send to the parent we will call the parent with super meaning the super class then call the Constructor but currently we don't have any arguments if we are running our main python file directly we can verify that with the if statement if Dunder name is equal to a string of Dunder main if we are running this file directly then we will create a weather app object otherwise we won't if this statement is true we will do the following we will create an app object app equals call The Constructor within our Q application class but we will pass in the following access the module of CIS then access a RGV which means arguments if we have command line arguments to send to our application this is how we would take care of that but we're not going to be using command line arguments in this video but it's nice to Future proof our code just in case we do we will construct a weather app object weather app equals call The Constructor of our weather app class now this window isn't going to show we have to call the show method of our weather app Weather app doow and now it's going to show for a brief second we need to ensure a clean exit access sis call the exit method within this method we will pass in the following take our app call the execute method which is excore it is a method so we have to call it this method handles events within our application such as closing the window so now our window should stay in place until we close it if you're one of the people that have jumped ahead we have created a class of weather app which inherits from the parent of Q widget we've constructed a weather app object and we're showing it if you've made some Pi qt5 Projects in the past you would just have to change some of these around within the Constructor of our class weather app we will declare the different widgets that belong to our weather app app object we will create a label that prompts the user to enter in a city we will name this city label equals this is a q label widget we can set the initial text of the label let's say enter city name then the second argument is going to be self we are adding this label to our weather app object here's what we have currently we still have to do some CSS formatting but we'll take care of that soon we will need a line edit widget basically a text box we will name it City input the widget is line edit no parameters besides self here is our line edit widget we're not currently using a layout manager these widgets are going to overlap app we need a button self. getet weather button this is a q push button the text on this button will be get weather we are adding this to self our weather app object here's our button when we click on this button we'll make a request to an API for the next following widgets we're going going to add some placeholders just so that we can see what we're doing when we apply CSS styling we need a temperature label to display the temperature temperature label equals a q label temporarily for the label let's say that the temperature is 70° F or pick something else in Celsius so to add a degree symbol if you're using Windows make sure numlock is on hold Alt then on the numpad typee 0176 I will pick 70° fah and then we will add this to self again we're just using this temperature as a placeholder we'll delete it when we do a test run if you would like to include an emoji or some other image we can create a label for that I will name this Emoji label equals a q label I will add an emoji of a son as a placeholder again we're going to delete this when we do a test run we are adding this to self again everything is overlapping that is fine and we need a description of the weather description label equals a q label as a placeholder let's say that it's sunny and we are adding this label to self okay here are all the widgets they're all overlapping so we need to fix that all right moving on everybody so now we have to design the layout of our web app right now all of our widgets are gravitating to the top left corner so I will Define a method to initialize our user interface at the end of this Constructor we will call this method self. initialize UI then call it once we've constructed our widgets we'll format them and design the layout so we are now within our initialized user interface method first let's set the title of our window self. set window title let's say that the title is WEA app so that should change which it does we're going to use a vertical layout manager to handle all the widgets let's name the layout manager vbox equals call The Constructor of the class QV box layout we're going to take our layout manager of vbox then add a widget we will start with the city label that's first we will pass in self. City Lael and we'll do this with the other widgets too we have City input get weather button temperature label Emoji label and then a description label take self our weather app set the layout we will pass in the layout manager of vbox and here's what we have currently all the widgets are arranged in a column now we just have to Center align them horizontally here's how we will take self City label call the set alignment method access the class of QT access the flag of align Center we're going to align all of our widgets in the center except for our weather button currently our button expands to take up the width of the window so we don't need to horizontally align that so we have five widgets to align we have City label City input temperature label Emoji label and description label all of the widgets are going to be arranged in a column horizontally now we just have to apply some CSS styling because right now it's kind of ugly we will apply Styles based on an object name but we have to set that object name so let's start with our city label self. City label call the set object name method pass in a unique ID for this widget I will name it City label I'll keep it the same okay we have to do this with the other widgets too we have a total of six we have City label City input we have the get weather button temperature label Emoji label and description label then we're going to set a style sheet take self our weather app apply a stylesheet with set style sheet we have a lot of properties to write I will do so within a set of triple quotes just to keep everything more organized we can apply CSS Styles based on a class so the class is going to be Q Lael within a set of curly braces we can list multiple CSS properties I will set the font family to be calibri as well as all push buttons Q push button so here's the font although it's still kind of small let's select our ID of City label it's good practice to precede this ID with the name of the class so Q label pound sign the ID we precede the ID with the name of the class just so we're only applying these CSS properties to any ID that's a city label that falls within the class of Q label let's set the font size to be 40 pixels let's set the font size to be 40 pixels that's better I'll set the font style to be italic font style italic that's pretty good let's select the ID of City input this is a line edit widget q line edit pound the ID of City input within a set of curly braces let's set the font size to be 40 pixels we will select our push button which is named get weather button the class is Q push button pound the ID of get weather button within a set of curly braces we will apply the following let's set the font size to be 30 pixels and let's make it bold font weight bold let's select our temperature label the ID is temperature label and this is a q label pound temperature label we will increase the font size font size 75 pixels better let's work on our Emoji next we will select the ID of emoji label the class is Q label the ID is Emoji label we'll set the font size first font size 100 pixels I would like a large image to display emojis properly we're going to use a very specific font we're going to set the font family to be now I don't know if I'm saying this right seg o UI Emoji I probably pronounced this word wrong but I don't care so then our Emoji should display correctly using this font it's colorful then we have the description label of the web that is the last widget description label the class is Q label the ID is description label let's take the font size and set it to be 50 pixels all right so this is what our weather app is going to look like we have the city label a text box to enter in a city the get weather button the temperature label an emoji label and a description of the weather currently now we just have to add some functionality because currently this doesn't do anything all right so now we just have to add some functionality to our weather app temporarily I'm going to collapse our initialized user interface method we will Define a few extra methods let's declare a method of get weather no parameters besid self I'll write pass for now as a placeholder we will need a method to display any errors display error there's going to be one argument besid self a message we will pass in an error message if there is one and a method to display weather that's if there's no errors we will need some data our weather data so be sure that you write these three methods back within our initialized user interface method at the bottom we have to connect a signal to a slot when we click on the button with the signal of clicked we will connect a slot of get weather we will access self take our get weather button with a signal of Click we will connect a slot upself dog getwe and I will print a test message just to be sure that it's working you get the weather so I press the button and we will display you get the weather we can get rid of our placeholder text for the temperature our emoji and the weather description so we can delete these strings But be sure to keep self scrolling down to our get weather method when we click the button we're going to create a few local variables the first is going to be our API key equals this will be a string back to the open Weather API you will copy your API key and make sure that it's active you can use the to button to make it inactive and active so make sure that it's active paste your API key within a string please use your own it still may take several minutes for your key to be active just keep that in mind we will need to get the city that we're looking up so let's say we type in Miami I have to get the text from this widget this line edit widget we will create create a local variable of city city equals access our line edit widget it had a name of City input so self. City input to get the text we will call the text method we have the API key and the city now we will create a URL this will be an FST string using the request module we will pass in a URL to make a request to so back to our open Weather API to get the URL for a city we have to go to the tab of API scroll down to current weather data and there's going to be some API documentation to the right we have a link for builtin API request by city name we will copy this URL and paste it within our F string there's two changes we're going to make we will replace city name with City the name of that variable and API space key with API uncore key it doesn't matter what you name these just make sure they're consistent with your variables when we make an API request we will be returned with a response object response equals access our module of requests call the get method then pass in our URL with our response object we have to convert it to a Json format we will be returned with an object we will name this object data it's going to be readable to us data equals take our response object and use the Json method to convert it to a Json format so let's print our data to see what we're working with let's say I look up the the city of Miami so we have one gigantic object this is our weather data we have coordinates such as longitude and latitude a weather description currently in Miami there's broken clouds there's an ID of the weather this is the temperature but it's in kelvin if we scroll all the way to the end we are looking for an HTTP status code which is named Cod short for code 200 means that the response was successful depending on what this number is we will display one of a few error messages if our status code is 404 that means the city wasn't found and there's many others so 200 means that the request was successful so let's write the following if our data object at Key of cod if this is equal to 200 if the request was successful then we will call the display weather method self. displayweather but we do have to pass in our data now temporarily I'm just going to print our weather data we'll do some more complex stuff later but I just want to be sure that everything is working so let's look up Los Angeles so here's the weather in Los Angeles there is currently broken clouds and again the status code is 200 the request was successful I'll write an else statement for now we will print our data what if we can't find a city for example I will look up the city blah blah blah and get the weather so here's our weather data we have an error code of 404 and a message of City not found let's do some exception handling in case we run into one of these status codes that's not 200 we can get rid of our El statement what we'll do is enclose all of our dangerous code that means any code that might cause an exception within a tri block we will try all of this code and handle any exceptions with an accept block there's two types of exceptions we're looking for the first is an HTTP error HTTP error is an exception raised by the request module when an HTTP request returns a status code that's 400 or 500 however this exception is found within in the request module that we've imported so we can't simply just say accept HTTP error we first have to access the request module then access exceptions then we can list the specific exception of HTTP error we'll encounter this exception if the status code is between 400 and 500 for now all right pass so there's one more step within our Tri block if we're going to handle any HTTP errors we have to raise an exception within our Tri block because our Tri block by itself normally doesn't catch these we will take our response object and call the raise for status method this method will raise an exception if there's any HT TTP errors normally our Tri block doesn't do that so we have to manually type this there's another type of acception we'll catch and that's the request exception We'll add another block for accept request exception this is found within the request module requests exceptions request exception with a request exception this can be due to network problems invalid URLs exceptions of that nature in case we run into one of those types of exceptions we will execute this block of code but for now I'll write pass we'll get back to it later going back to our accept block where we handle any HTTP errors let's use a match case statement we need to get the status code of our response I'll print that temporarily let's print our response objects status code and see what it is again let's make up a city get the weather we have a status code of 404 that means the city wasn't found depending on what this number is the status code we'll use a match case statement so we will match our response objects status code the first case will be 400 that means there's a bad request so let's print the following bad request I'll add a new line character please check your input we'll create a total of I believe eight cases we'll copy what we have so we have 400 401 403 44 that one we're familiar with 500 502 503 504 so for case 401 that means we're unauthorized maybe our API key isn't active yet so let's say unauthorized invalid API key for 403 that means access is denied it's forbidden so let's print forbidden access is denied 4 for is for something that's not found not found City not found 500 is for an internal server error internal server error please try again later 502 is for a bad gateway bad gateway invalid response from the server 503 is for service unavailable service unavailable server is down then 504 is for a Gateway timeout Gateway timeout no response from the server in case there's any unexpected error we can add a wild card of an underscore with our HTTP error let's give it a name as HTTP error and then we'll just print it in case there are no matching cases let's print the following HTTP error occurred I'll add a new line let's convert this to an FST string add a placeholder and then I will print our HTTP eror all right let's do a test run so in case we can't find our city we should encounter a 404 error not found City not found eventually we will display this message within our app but we know that it works what if my API key is invalid so I will take my API key set it to be inactive but it might take a few minutes to take effect the status code of our response object should be 401 so this time I'm going to look up a city I have an invalid API key and I get that error message of unauthorized invalid API key all right everybody so I am on day three of working on and recording this topic over the course of the day I thought of one change that I can make we're going to add a few extra accept blocks so we will accept access requests access exceptions we will handle any connection eror exceptions as well as any timeout exceptions and any redirects too many redirects so if we run into a connection error let's say that our internet gets disconnected well we can print something so let's print the following let's print connection error I'll add a new line character check your internet connection if we encounter a timeout then we will print the following we have a time out error the request timed out if we have a too many redirects error that M should be Capital by the way let's State too many redirects check the URL and if there's anything else we don't anticipate I'll give this exception a name of as wreck error and then we'll just print it this is a last resort I'll use an F string request error I'll add a new line I'll add a placeholder then display our request error so I'm actually going to turn off my internet I'll see if I can get a connection error intentionally so my internet is currently off I will attempt to look up a city get the weather and we get a connection air check your internet connection all right my internet is connected again let's perform a test run and we get the weather in Miami now what we're going to do is if we have an error we'll display the error message within the app and not within our console so we're going to replace print with a call to our display error method let me zoom out a little bit so replace print with self dot display error and we're passing in a message so let's replace those one thing I forgot to add although it's not necessary I'm going to add a colon after each initial message I think it'll look better you don't have to do this but I'm OCD about the appearance if we encounter one of these exceptions we'll pass along a message to our display error method and display it within the app let's take our temperature label self. temperature label and set the text to be our message that we pass in let's do a test run let's look up a city that doesn't exist get the weather so we get that error message not found City not found while we're within this method I'm going to change the font size just so that it's a little bit smaller so let's take our temperature label self. temperature label I'm just going to copy this CU I'm lazy I will call the set stylesheet method and pass along a new property let let's set the font size to 30 pixels let's look up north pole I don't think that's a city oh I guess it is interesting the North Pole is a city I guess let's look up blah blah blah not found City not found let's do another test what if our API key is invalid I'll just delete one of the digits let's look up Los Angeles unauthorized invalid API key let's change that back again I will turn off my internet then look up Miami Connection Error check your internet connection all right so we know that our exception handling works okay now we're within the display weather method we'll receive an object to represent our data we have to get the temperature but first I'm going to print our data so let me zoom in a little bit let's look up Houston Houston Texas I need the temperature within our data object we are looking for a key of Main and that is right here main contains a dictionary with key value pairs once we've accessed main we have to access temp to get the temperature and this temperature is in kelvin we'll have to convert it to Celsius or Fahrenheit it's your choice so we need to extract this value I will store it as a local variable temperature let's say temperature uncore k for Kelvin equals take our data object access the key of main that's right here then we have to go one level deeper and get the temperature the key is temp then give me the value at the Key of temp and that should return the current temperature so to test it let's print it let's print the temperature in Kelvin so what is the weather in Houston Texas the temperature that is 309 Kelvin let's convert it to Celsius and Fahrenheit let's create temperature C if you want to use celsius if you would rather use Fahrenheit you can skip this step to convert from Kelvin to Celsius we will take our temperature in Kelvin subtract 273.15 then for Fahrenheit let's take temperature f for Fahrenheit equals this is a little more complicated take our temperature in Kelvin time 9 / 5 subtract 45967 okay so let's print the temperature in celsius let's look up Houston 36.467853 97.6 Dees fah that's pretty hot all right so once we have our temperature let's change the temperature label self. temperature label I'll just copy this then we will set the text I'll use an F string add a placeholder I'll use Fahrenheit but feel free to use celsius then I will add a degree symbol with Windows make sure numb lock is on hold alt then on your numpad type 0176 for a degree symbol then f for Fahrenheit let's look up Miami get the weather and here's the temperature 94964 now let's say I would like no digits after the decimal I can add a format specifier after our temperature I'll add a colon 0f to display no decimals let's try that again I will look up Miami get the weather the current temperature in Fahrenheit is 95° Fahrenheit now here's one issue let's say we display an error then display the weather if we display an airror we're going to be changing the font size so let's look up blah blah blah get the weather City not found then let's look look up Miami again get the weather and the font size is a lot smaller so if we display the weather let's reset the font size we can really just copy this line so within the display weather method let's set the font size back to 75 what it was originally let's try that again let's look up a city that doesn't exist get the weather City not found then we'll look up the city that does exist like Miami and get the weather 95° F now let's get a description of the weather we'll display that at the bottom in the center we'll display a picture or an emoji but we'll handle that last now we need a description of the weather like is it sunny is it cloudy is it raining so after we calculate the temperature so I'm going to print our data again let's look up Los Angeles So currently it's 85 degrees Fahrenheit so for the weather description that is found at the Key of weather we're now within a list at index zero within our list we'll look up the key of description which states clear sky so we will create a local variable of weather description equals access our data at the Key of weather there's layers to this we're then within a list and actually it's a list with only one item in it so at the index of zero then at the Key of description that's going to return this description of clear sky so we will take our description label self. description label let me just copy it this one right here then we will set the text and then pass in our weather description what is the weather description of Los Angeles 86° Fahrenheit and there's a clear sky okay now the last thing we're going to do is add an emoji We'll add it right to the center between the temperature and the weather description you don't necessarily have to but I think it'll look cool and that's a good enough reason so let's create another method to handle that we will Define a method of get weather Emoji or picture if you would rather use a picture we don't need self necessarily we're going to need a weather ID this method isn't going to rely on any class data or instance data we could make it a static method I'll add a decorator of static method in summary a static method we haven't covered these for a little bit they belong to a class but don't require any instance specific data or any other methods they're used as more of a utility tool we're going to be passing in a weather ID and returning an emoji I'm going to show you where we can find that weather ID I'll use a print statement I will print our data let's look up Miami again that's the first thing that came to mind now at the Key of weather there's a key of ID and the value is a threedigit number I'll show you this chart depending on what this threedigit number is that corresponds to a certain group of weather so the 200 range is a thunderstorm 300 is a drizzle 500 is rain 600 is snow 700 is atmosphere like if there's a tornado or there's a volcanic eruption 800 exactly is a clear sky anything that's 801 or above refers to clouds so this ID is 803 we have broken clouds depending on what this ID is I would like to return a certain Emoji based on the weather so we need this ID I'll delete our print statement we no longer need it let's say before our weather description we will create a local variable of weather ID equals access our data object then access the key of weather the value at weather is a list but this list only has one item in it so we need the index of operator at zero and then we will access the key of ID the key is ID so our weather ID is going to be a number a threedigit number okay everybody we're near the end so after setting the temperature we're going to set the Emoji label self. Emoji label and call the set text method within the set text method we will call self. getwe Emoji method this will return a string an emoji within a string but we have to pass in our weather ID it's that threedigit number so now we are within our get weather Emoji method depending on the range of that threedigit number we will return one of a few emojis we could use a match case statement I think it's more complicated with the match case statement we'll use LF statements for Simplicity so if our weather ID is greater than or equal to 200 and our weather ID is less than or equal to 232 now we have two conditions here linked with the and logical operator there is a shortcut to this and actually py charm is telling me that there is we can simplify these Expressions instead of two separate conditions we can combine them into one if 200 is less than or equal to our weather ID and our weather ID is less than or equal to 232 if this one combined condition is true then we will return an emoji so to add an emoji on Windows you can hold on the window key and press semicolon so 200 to 232 that's for a thunderstorm depending on the font style of your IDE some of these emojis might not display properly you can always just copy them from some place else I think that's better it's more colorful than else if 300 is less than or equal to our weather ID and our weather ID is less than or equal to 321 this is for a partially cloudy Sky we will return some clouds a partially cloudy sky and again I don't like that one so let's use this one instead else if 500 is less than or equal to our weather ID Which is less than or equal to 531 we will return rain that's better 600 to 622 else if 600 is less than or equal to our weather ID Which is less than or equal to 622 we will return snow so 701 to 741 is missed or fog else if 701 is less than or equal to our weather ID Which is less than or equal to 741 we will return some mist or fog 762 specifically is for ash like from a volcano so else if our weather ID is directly equal to 762 we will return let's return a volcano 771 is for a Squall that's a violent gust of wind else if our weather ID is directly equal to 771 we will return let's return that a violent gust of wind a Squall 781 is for a Tado else if our weather ID is equal to 781 return a tornado 800 exactly is for a clear sky else if our weather ID is equal to 800 return a sun a sun emoji else if 801 is less than or equal to our weather ID Which is less than or equal to 804 we will return some clouds now if there are no matches let's return an empty string to not display anything okay let's do a test run let's look up Miami we get scattered clouds it's 94° Los Angeles get the weather we have a clear sky and a sun now there's one fix we need to make let's say that I make up a city again blah blah blah get the weather we should clear our Emoji label and the weather description but we still get that error message so after we display our error within the display error method after we set the text of the temperature label let's take the Emoji label self. Emoji label and call the Clear method to clear it then we have to do this with the description label self. description label and call the Clear method now we should be able to clear it when we get an error okay let's look up Houston get the weather few clouds 98° let's make up a City Pizza City get the weather not found City not found and the Emoji label and the weather description are cleared okay what if I type in nothing what happens let's get the weather we have a bad request please check your input that's if we have an HTTP status C to 400 we handled this exception bad request all right one last City what about Paris let's get the weather it is 68° F and there's light rain all right everybody so that is a weather app that you can make using python add it to your portfolio and thanks for watching
