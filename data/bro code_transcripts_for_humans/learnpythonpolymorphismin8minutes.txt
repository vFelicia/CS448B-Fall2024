With timestamps:

00:00 - what is going on everybody so today I
00:02 - got to talk about polymorphism in Python
00:05 - polymorphism is a programming concept
00:07 - it's a Greek word that means to have
00:09 - many forms or faces poly means many
00:13 - morph means form in programming an
00:16 - object can take one of many forms
00:18 - there's two ways to achieve polymorphism
00:20 - one is through inheritance an object
00:22 - could be treated of the same type as a
00:25 - parent class there's also duck typing
00:27 - which we'll talk about in the next topic
00:29 - is this video we're more focused on
00:31 - inheritance what we'll do in this video
00:33 - is create a class of shape we'll write
00:37 - pass as a
00:38 - placeholder we will create a class of
00:41 - circle which will inherit from
00:43 - shape again writing
00:46 - pass class Square inherits from
00:52 - shape class
00:55 - triangle which inherits from shape
01:01 - if I was to create a circle object
01:03 - Circle equals
01:05 - Circle our Circle identifies as a circle
01:09 - and since our Circle class inherits from
01:11 - the shape class our circle is also
01:14 - considered a shape it has two forms it's
01:16 - a circle and it's a shape but our Circle
01:19 - isn't a square or a triangle that could
01:21 - also apply to our Square
01:23 - class our square is a square our square
01:27 - is also considered a shape but our
01:29 - square is not a a circle or a triangle
01:31 - those are two possible forms for our
01:33 - Square it's a square and a shape so
01:36 - let's say we would like to create a list
01:38 - of shapes what do they all have in
01:40 - common well they're all shapes a
01:42 - descriptive name for this list would be
01:45 - shapes equals an empty list I will
01:48 - instantiate a circle object a square
01:53 - object and a triangle
01:55 - object our circle is a circle and a
01:59 - shape our square is a square and a shape
02:02 - our triangle is a triangle and a shape
02:05 - each of these objects has two forms or
02:08 - two faces let's fill in some of these
02:10 - classes let's say that with our shape
02:13 - class we will define an area method
02:16 - Define area I'm going to turn this into
02:19 - an abstract method I'll just write pass
02:22 - to work with abstract classes we need to
02:24 - import that from
02:27 - ABC import capital ABC as well as
02:32 - abstract method preceding the area
02:35 - method I will add a decorator of
02:37 - abstract method our circle square and
02:40 - triangle classes they're all considered
02:42 - shapes they inherit from this class we
02:45 - need to Define an area method for each
02:47 - since they're all considered a shape
02:49 - every shape has an area with our class
02:52 - of circle let's define a
02:55 - Constructor Define
02:58 - innit we will pass it in one argument a
03:01 - radius what is the radius of the circle
03:04 - assign an attribute of radius equals the
03:07 - radius we receive let's do this with
03:10 - square Define in
03:13 - nit one parameter the length of a side
03:18 - self. side equals side then
03:23 - triangle Define
03:27 - innit we have two parameters base and
03:33 - height self. Bas equals Bas self.
03:39 - height equals height all right now let's
03:43 - finish defining these area methods for
03:44 - each
03:46 - class we will
03:50 - return
03:52 - 3.14
03:54 - time self. rius to the^ of
03:58 - two so given a radius that's how to
04:01 - calculate the area of a circle then with
04:04 - our
04:06 - Square Define
04:09 - area we will
04:11 - return
04:13 - self. side to the power of
04:18 - two then with our
04:21 - triangle Define
04:25 - area
04:27 - Return self. base
04:30 - time self. height time
04:35 - 0.5 now we have to pass in some
04:37 - arguments for our Circle we need a
04:39 - radius I'll pick four for the square the
04:42 - length of a side will be five then our
04:45 - triangle the base will be six the height
04:47 - will be seven we're going to write a
04:50 - loop to iterate through our shapes for
04:52 - every shape in
04:55 - shapes then we're going to
04:57 - print for every shape
05:00 - called the area
05:04 - method and that would give me these
05:07 - numbers if you would like you can format
05:09 - the output I'll just use an F
05:15 - string I'll add cm
05:24 - squared much better what if we were to
05:28 - create a class that's completely
05:30 - unrelated to
05:31 - shapes I will create a class of
05:37 - pizza I will Define a
05:40 - Constructor to construct a pizza object
05:43 - we need a
05:45 - topping and a radius what is the radius
05:48 - of the
05:49 - pizza self. topping equals
05:54 - topping self. rius equals radius
06:00 - within my list of shapes I'll add a
06:02 - pizza
06:03 - object but I have to pass in a topping
06:06 - such as
06:09 - pepperoni and what is the radius of the
06:12 - pizza let's say 15 cm so our pizza our
06:17 - pizza class doesn't have an area method
06:19 - here's what happens when I run
06:21 - this we get an attribute error Pizza
06:25 - object has no attribute
06:27 - area our pizza object is considered a
06:30 - pizza but it is not considered a shape
06:33 - it does not inherit from the shape class
06:36 - at the top here you know what a pizza is
06:38 - circular it could be considered a circle
06:41 - so how about this let's take the pizza
06:43 - class it will inherit from the circle
06:46 - class and within our Circle class we're
06:50 - already assigning the radius to the
06:51 - radius attribute so instead of doing
06:54 - that here within the Constructor for our
06:55 - pizza class let's call the super
06:58 - Constructor super which refers to the
07:01 - parent use its
07:03 - Constructor then pass in the radius we
07:06 - receive let's see if this works
07:10 - now that does here is the area of our
07:13 - pizza our pizza is considered a pizza it
07:17 - inherits from the circle class so it's
07:19 - also considered a circle and our Circle
07:22 - class inherits from the shape class our
07:25 - pizza has three forms our pizza is
07:28 - considered a pizza it's also considered
07:30 - a circle and it's also considered a
07:32 - shape it would make sense for it to fit
07:34 - into this list of shapes because our
07:37 - pizza also identifies as a shape so
07:40 - that's polymorphism everybody it's a
07:42 - Greek word meaning to have many forms or
07:44 - faces poly meaning many morph meaning
07:47 - form in Python there's two ways to
07:49 - achieve polymorphism one through
07:51 - inheritance an object could be treated
07:54 - of the same type as a parent and there's
07:56 - also duct typing which we'll discuss
07:58 - more in the next topic
08:00 - stay tuned for that and well everybody
08:02 - that's polymorphism in Python

Cleaned transcript:

what is going on everybody so today I got to talk about polymorphism in Python polymorphism is a programming concept it's a Greek word that means to have many forms or faces poly means many morph means form in programming an object can take one of many forms there's two ways to achieve polymorphism one is through inheritance an object could be treated of the same type as a parent class there's also duck typing which we'll talk about in the next topic is this video we're more focused on inheritance what we'll do in this video is create a class of shape we'll write pass as a placeholder we will create a class of circle which will inherit from shape again writing pass class Square inherits from shape class triangle which inherits from shape if I was to create a circle object Circle equals Circle our Circle identifies as a circle and since our Circle class inherits from the shape class our circle is also considered a shape it has two forms it's a circle and it's a shape but our Circle isn't a square or a triangle that could also apply to our Square class our square is a square our square is also considered a shape but our square is not a a circle or a triangle those are two possible forms for our Square it's a square and a shape so let's say we would like to create a list of shapes what do they all have in common well they're all shapes a descriptive name for this list would be shapes equals an empty list I will instantiate a circle object a square object and a triangle object our circle is a circle and a shape our square is a square and a shape our triangle is a triangle and a shape each of these objects has two forms or two faces let's fill in some of these classes let's say that with our shape class we will define an area method Define area I'm going to turn this into an abstract method I'll just write pass to work with abstract classes we need to import that from ABC import capital ABC as well as abstract method preceding the area method I will add a decorator of abstract method our circle square and triangle classes they're all considered shapes they inherit from this class we need to Define an area method for each since they're all considered a shape every shape has an area with our class of circle let's define a Constructor Define innit we will pass it in one argument a radius what is the radius of the circle assign an attribute of radius equals the radius we receive let's do this with square Define in nit one parameter the length of a side self. side equals side then triangle Define innit we have two parameters base and height self. Bas equals Bas self. height equals height all right now let's finish defining these area methods for each class we will return 3.14 time self. rius to the^ of two so given a radius that's how to calculate the area of a circle then with our Square Define area we will return self. side to the power of two then with our triangle Define area Return self. base time self. height time 0.5 now we have to pass in some arguments for our Circle we need a radius I'll pick four for the square the length of a side will be five then our triangle the base will be six the height will be seven we're going to write a loop to iterate through our shapes for every shape in shapes then we're going to print for every shape called the area method and that would give me these numbers if you would like you can format the output I'll just use an F string I'll add cm squared much better what if we were to create a class that's completely unrelated to shapes I will create a class of pizza I will Define a Constructor to construct a pizza object we need a topping and a radius what is the radius of the pizza self. topping equals topping self. rius equals radius within my list of shapes I'll add a pizza object but I have to pass in a topping such as pepperoni and what is the radius of the pizza let's say 15 cm so our pizza our pizza class doesn't have an area method here's what happens when I run this we get an attribute error Pizza object has no attribute area our pizza object is considered a pizza but it is not considered a shape it does not inherit from the shape class at the top here you know what a pizza is circular it could be considered a circle so how about this let's take the pizza class it will inherit from the circle class and within our Circle class we're already assigning the radius to the radius attribute so instead of doing that here within the Constructor for our pizza class let's call the super Constructor super which refers to the parent use its Constructor then pass in the radius we receive let's see if this works now that does here is the area of our pizza our pizza is considered a pizza it inherits from the circle class so it's also considered a circle and our Circle class inherits from the shape class our pizza has three forms our pizza is considered a pizza it's also considered a circle and it's also considered a shape it would make sense for it to fit into this list of shapes because our pizza also identifies as a shape so that's polymorphism everybody it's a Greek word meaning to have many forms or faces poly meaning many morph meaning form in Python there's two ways to achieve polymorphism one through inheritance an object could be treated of the same type as a parent and there's also duct typing which we'll discuss more in the next topic stay tuned for that and well everybody that's polymorphism in Python
