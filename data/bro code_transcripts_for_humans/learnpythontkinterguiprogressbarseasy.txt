With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro here hope you're doing well and in
00:03 - this video i'm going to teach you guys
00:04 - how we can create a progress bar in
00:06 - python so sit back relax and enjoy the
00:08 - show
00:10 - if you find this video helpful please
00:12 - remember to like
00:14 - comment and subscribe your support will
00:16 - help keep this channel running
00:18 - okay let's create a progress bar but
00:19 - we'll need a few imports to begin
00:22 - the progress bar widget is found within
00:24 - that ttk module so we'll need a separate
00:27 - import from that
00:28 - from tk tkenter dot ttk
00:31 - import everything and we'll import
00:34 - everything from time as well
00:36 - let's create a window window equals tk
00:39 - followed by window.mainloop
00:41 - we're going to add a progress bar and a
00:43 - button to this window
00:44 - when we click on the button it's going
00:46 - to fill our progress bar
00:48 - let's begin by creating a button to
00:50 - begin with let's call this button
00:52 - equals button we're adding this to the
00:55 - window
00:55 - let's set some text text equals maybe
00:58 - download
01:00 - and then a command maybe i'll call this
01:03 - start
01:05 - finish by adding this button to the
01:07 - window and we'll just use pack to do
01:09 - that
01:10 - let's define what our start function
01:12 - does
01:13 - def start we'll fill this in later i'm
01:16 - just going to
01:17 - print nothing just as a placeholder and
01:20 - we should just have a button
01:22 - now let's add a progress bar before this
01:24 - button
01:26 - and we'll call this progress bar just
01:27 - bar for short bar
01:29 - equals progress bar
01:33 - we're adding this to the window
01:37 - we can set an orientation
01:40 - this can be horizontal or vertical later
01:42 - on in this video i'll show you the
01:44 - differences between the two
01:45 - but for now let's set this to horizontal
01:49 - and then i'm going to pack this bar bar
01:52 - dot pack
01:53 - and add some padding pad y
01:56 - equals ten and let's see what we have
02:01 - okay this is our progress bar at the top
02:03 - and this is the button
02:04 - when we click on this button it's going
02:06 - to fill our progress bar
02:08 - but i think i'm going to increase the
02:10 - length of this progress bar
02:12 - let's set this to maybe 300 i believe
02:14 - 100 is the default
02:16 - okay that's not too bad of a size now
02:19 - let's define what our start function
02:21 - does
02:22 - we can actually increase the value of
02:24 - our progress bar
02:25 - by typing in the name of this progress
02:27 - bar here
02:29 - value plus equals some amount let's say
02:33 - 10. so what's going to happen right now
02:37 - is that every time we click on this
02:39 - button it's going to fill
02:40 - our progress bar by 10 out of the total
02:43 - which is 100.
02:47 - let's pretend that we're waiting for a
02:49 - certain amount of tasks to complete
02:52 - so let's define a few variables let's
02:54 - say we have a variable called
02:56 - tasks and let's set this to 10 just to
02:58 - keep it simple
03:00 - and x will represent the current task
03:02 - that we're on and we'll
03:04 - say zero to begin with let's create a
03:06 - while loop
03:08 - while x is less than the amount of tasks
03:12 - that we have we will increment
03:16 - the value of our bar by 10 10
03:19 - 10 for each test that we have which is
03:21 - 10 for a total of 100
03:24 - and we'll want to increment the task
03:26 - that we're on as well
03:27 - which is represented by x so let's
03:30 - increment
03:30 - x by 1 after each iteration of this
03:33 - while loop
03:35 - now when we run this and click download
03:38 - this
03:38 - fills instantly let's add a delay
03:41 - just to simulate each task waiting to be
03:45 - completed
03:46 - so let's add that here let's add a delay
03:49 - by using
03:50 - time dot sleep and let's set this to
03:53 - one second we're going to wait one
03:56 - second
03:56 - and then complete a task
04:00 - what ends up happening now is that
04:01 - nothing appears to be updating
04:03 - well what gives bro you lie to me well
04:05 - that's because
04:06 - the window is waiting to have this
04:08 - progress bar complete
04:10 - before it's actually going to display it
04:12 - being filled so we would want to refresh
04:15 - this window after each iteration of the
04:18 - while loop
04:19 - so at the end of this while loop let's
04:21 - add one thing
04:22 - window dot update underscore idle
04:26 - tasks after each iteration of this while
04:29 - loop it's going to update
04:30 - the window that we have so then when we
04:33 - download something
04:34 - it's going to update our progress bar
04:37 - after each iteration
04:38 - of this while loop until it's completed
04:41 - right about
04:43 - now let's take this a step further by
04:45 - adding a label that displays the current
04:47 - percent of the progress bar that is
04:49 - complete
04:49 - let's add this label after the progress
04:51 - bar but before the button
04:53 - sandwiched right between these two
04:54 - widgets so let's add that here
04:57 - we'll call this label percent label
05:00 - equals label
05:01 - we'll add this to the window and we'll
05:04 - need a text
05:05 - variable text variable equals
05:08 - let's call this percent so the reason
05:10 - that we use a text variable is so that
05:12 - we can update this label with some text
05:15 - after each iteration of our while loop
05:17 - and we'll need to
05:18 - pack this okay within the window near
05:22 - the top
05:23 - let's define percent percent equals
05:26 - string bar this allows us to update
05:29 - percent with some new text and set the
05:32 - percent label with the new text that we
05:34 - have
05:35 - within the while loop but before we
05:37 - update idle tasks
05:40 - let's set what percent is
05:43 - percent dot set
05:46 - and let's say x divided by tasks
05:50 - and then we'll multiply this by 100 i'm
05:52 - just going to put this within its own
05:54 - set of parentheses
05:56 - times 100 and then we'll convert all of
05:59 - this to a string
06:01 - so we can display this along with some
06:03 - text
06:05 - there are a lot of parentheses here so
06:06 - it might be difficult to keep track of
06:08 - all this
06:09 - all right and then we're just going to
06:10 - tack on
06:12 - percent and that's it let's try it
06:18 - so we got 10 20 30
06:22 - 40 50. i'll shut up now one change that
06:25 - i'm gonna make is that i'm going to
06:27 - cast all of this as an integer before we
06:30 - convert it to a string
06:33 - because i do not like that decimal at
06:35 - the end of our percentage
06:37 - so yeah it says 10 20 so on and so forth
06:40 - let's add a label that displays the
06:42 - current task that we're on
06:44 - so let's copy what we have for our
06:46 - percent label and let's rename this as
06:49 - maybe task label
06:52 - task label text variable will equal
06:56 - maybe text and let's define what text is
07:01 - so text is also a string bar
07:04 - and within our while loop let's update
07:06 - the value
07:07 - of our text text dot set
07:12 - will display x plus maybe a forward
07:16 - slash
07:20 - plus our tasks
07:23 - and since we're displaying integers
07:25 - along with some strings
07:27 - we need to convert these two strings and
07:29 - we can use the str function to do that
07:31 - for us
07:34 - so surround x and tasks with str to
07:37 - convert these to strings
07:40 - and then we'll add just plus tasks
07:43 - completed so the value of x will update
07:48 - after each iteration of this while loop
07:50 - let's try it and after clicking download
07:54 - this will display the percentage as well
07:56 - as the amount of tasks that have been
07:58 - completed
07:59 - all the way until it reaches the end
08:03 - let's change this into a more practical
08:06 - example
08:07 - we'll pretend that we're downloading a
08:08 - video game so let's replace
08:10 - or rename tasks as maybe gb for
08:14 - gigabytes
08:15 - and this game will be 100 gigabytes
08:18 - we'll rename x as well so let's refactor
08:21 - rename and change x to maybe download to
08:24 - represent
08:25 - the amount of gigabytes that are
08:27 - downloaded
08:29 - and let's create a variable called speed
08:32 - and
08:32 - let's set this to one all right
08:35 - so while our download is less than the
08:38 - amount of gigabytes for this game
08:40 - will sleep for maybe a portion of a
08:42 - second 0.05 should be good
08:46 - we'll increase the value of our bar
08:49 - by this amount speed
08:52 - divided by gigabytes and then multiply
08:55 - this by
08:56 - 100 for the download
09:00 - we're going to increment this by
09:01 - whatever our speed is
09:03 - and right now it's one so that's the
09:04 - same we can keep percent the same
09:07 - for our text let's change tasks to
09:10 - gigabytes and that's all the changes
09:13 - that we have to make
09:14 - and now when we download something we're
09:17 - kind of pretending that we're
09:18 - downloading
09:19 - a large file or a game you can see that
09:22 - once it reaches 100 it says 100
09:25 - 100 out of 100 gigabytes completed now
09:28 - we can change this to a different value
09:30 - let's say maybe
09:31 - 50 and the speed will be maybe two
09:36 - so this will adjust to accommodate
09:38 - whatever the new file size is as well as
09:40 - the speed
09:41 - and before i forget you can change the
09:43 - orientation to
09:44 - a vertical bar if you so choose
09:48 - so we have this vertical download bar
09:50 - now which could be good for something
09:52 - all right so that's the basics of
09:54 - progress bars in python if you want to
09:56 - copy of all this code
09:57 - i'll post all of this in the comments
09:59 - down below but yeah that's the basics of
10:01 - progress bars in python
10:04 - hey you yeah i'm talking to you if you
10:07 - learn something new
10:08 - then you can help me help you in three
10:11 - easy steps
10:12 - by smashing that like button drop a
10:14 - comment down below
10:15 - and subscribe if you'd like to become a
10:17 - fellow bro
10:32 - [Music]
10:38 - you

Cleaned transcript:

hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create a progress bar in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running okay let's create a progress bar but we'll need a few imports to begin the progress bar widget is found within that ttk module so we'll need a separate import from that from tk tkenter dot ttk import everything and we'll import everything from time as well let's create a window window equals tk followed by window.mainloop we're going to add a progress bar and a button to this window when we click on the button it's going to fill our progress bar let's begin by creating a button to begin with let's call this button equals button we're adding this to the window let's set some text text equals maybe download and then a command maybe i'll call this start finish by adding this button to the window and we'll just use pack to do that let's define what our start function does def start we'll fill this in later i'm just going to print nothing just as a placeholder and we should just have a button now let's add a progress bar before this button and we'll call this progress bar just bar for short bar equals progress bar we're adding this to the window we can set an orientation this can be horizontal or vertical later on in this video i'll show you the differences between the two but for now let's set this to horizontal and then i'm going to pack this bar bar dot pack and add some padding pad y equals ten and let's see what we have okay this is our progress bar at the top and this is the button when we click on this button it's going to fill our progress bar but i think i'm going to increase the length of this progress bar let's set this to maybe 300 i believe 100 is the default okay that's not too bad of a size now let's define what our start function does we can actually increase the value of our progress bar by typing in the name of this progress bar here value plus equals some amount let's say 10. so what's going to happen right now is that every time we click on this button it's going to fill our progress bar by 10 out of the total which is 100. let's pretend that we're waiting for a certain amount of tasks to complete so let's define a few variables let's say we have a variable called tasks and let's set this to 10 just to keep it simple and x will represent the current task that we're on and we'll say zero to begin with let's create a while loop while x is less than the amount of tasks that we have we will increment the value of our bar by 10 10 10 for each test that we have which is 10 for a total of 100 and we'll want to increment the task that we're on as well which is represented by x so let's increment x by 1 after each iteration of this while loop now when we run this and click download this fills instantly let's add a delay just to simulate each task waiting to be completed so let's add that here let's add a delay by using time dot sleep and let's set this to one second we're going to wait one second and then complete a task what ends up happening now is that nothing appears to be updating well what gives bro you lie to me well that's because the window is waiting to have this progress bar complete before it's actually going to display it being filled so we would want to refresh this window after each iteration of the while loop so at the end of this while loop let's add one thing window dot update underscore idle tasks after each iteration of this while loop it's going to update the window that we have so then when we download something it's going to update our progress bar after each iteration of this while loop until it's completed right about now let's take this a step further by adding a label that displays the current percent of the progress bar that is complete let's add this label after the progress bar but before the button sandwiched right between these two widgets so let's add that here we'll call this label percent label equals label we'll add this to the window and we'll need a text variable text variable equals let's call this percent so the reason that we use a text variable is so that we can update this label with some text after each iteration of our while loop and we'll need to pack this okay within the window near the top let's define percent percent equals string bar this allows us to update percent with some new text and set the percent label with the new text that we have within the while loop but before we update idle tasks let's set what percent is percent dot set and let's say x divided by tasks and then we'll multiply this by 100 i'm just going to put this within its own set of parentheses times 100 and then we'll convert all of this to a string so we can display this along with some text there are a lot of parentheses here so it might be difficult to keep track of all this all right and then we're just going to tack on percent and that's it let's try it so we got 10 20 30 40 50. i'll shut up now one change that i'm gonna make is that i'm going to cast all of this as an integer before we convert it to a string because i do not like that decimal at the end of our percentage so yeah it says 10 20 so on and so forth let's add a label that displays the current task that we're on so let's copy what we have for our percent label and let's rename this as maybe task label task label text variable will equal maybe text and let's define what text is so text is also a string bar and within our while loop let's update the value of our text text dot set will display x plus maybe a forward slash plus our tasks and since we're displaying integers along with some strings we need to convert these two strings and we can use the str function to do that for us so surround x and tasks with str to convert these to strings and then we'll add just plus tasks completed so the value of x will update after each iteration of this while loop let's try it and after clicking download this will display the percentage as well as the amount of tasks that have been completed all the way until it reaches the end let's change this into a more practical example we'll pretend that we're downloading a video game so let's replace or rename tasks as maybe gb for gigabytes and this game will be 100 gigabytes we'll rename x as well so let's refactor rename and change x to maybe download to represent the amount of gigabytes that are downloaded and let's create a variable called speed and let's set this to one all right so while our download is less than the amount of gigabytes for this game will sleep for maybe a portion of a second 0.05 should be good we'll increase the value of our bar by this amount speed divided by gigabytes and then multiply this by 100 for the download we're going to increment this by whatever our speed is and right now it's one so that's the same we can keep percent the same for our text let's change tasks to gigabytes and that's all the changes that we have to make and now when we download something we're kind of pretending that we're downloading a large file or a game you can see that once it reaches 100 it says 100 100 out of 100 gigabytes completed now we can change this to a different value let's say maybe 50 and the speed will be maybe two so this will adjust to accommodate whatever the new file size is as well as the speed and before i forget you can change the orientation to a vertical bar if you so choose so we have this vertical download bar now which could be good for something all right so that's the basics of progress bars in python if you want to copy of all this code i'll post all of this in the comments down below but yeah that's the basics of progress bars in python hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
