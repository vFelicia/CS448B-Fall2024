With timestamps:

00:00 - yo what's going on everybody so in
00:02 - today's video I'm going to explain the
00:03 - super keyword in JavaScript super is a
00:06 - keyword that's used in classes to call
00:08 - the Constructor or access the properties
00:11 - and methods of a parent the parent is
00:13 - also known as the super class it's very
00:16 - similar to the this keyword this refers
00:18 - to this object super refers to the
00:21 - parent of that object here's an example
00:24 - we'll use inheritance to create a parent
00:26 - class of animal class animal our animal
00:30 - class will have three children also
00:32 - known as sub classes class rabbit
00:37 - extends
00:41 - animal class fish extends animal class
00:46 - Hawk extends
00:48 - animal We'll add an empty Constructor
00:50 - for now for the animal
00:53 - class then we need a Constructor for the
00:56 - rabbit
00:58 - class
01:02 - so rabbits they'll have a name property
01:06 - age and a run speed we'll assign these
01:09 - properties within the Constructor
01:11 - this.name equals the name that we
01:13 - receive this. AG equals age this.
01:18 - runspeed
01:19 - equals run
01:22 - speed let's copy this Constructor now
01:25 - with fish fish don't have a run speed
01:28 - but they'll have a swim speed
01:30 - let's replace run speed with swim speed
01:34 - copy The Constructor again paste it
01:36 - Hawks in this example won't have a swim
01:38 - speed they'll have a fly speed though
01:41 - replace swim speed with fly speed now
01:44 - let's attempt to create some of these
01:46 - objects const rabbit equals new rabbit
01:52 - we need a name for this rabbit you could
01:54 - just say rabbit or if you want to be
01:55 - creative you could say something like
01:57 - Bugs Bunny uh but let's just stick with
02:01 - rabbit to keep it simple our rabbit will
02:03 - be Oney old and has a run speed of 25 M
02:07 - hour if you use kilometers feel free to
02:09 - use kilometers let's do this with
02:13 - fish const fish equals new
02:17 - fish the name of our fish will be fish
02:21 - our fish is 2 years old and has a swim
02:23 - speed of 12
02:25 - mph then with Hawk const Hawk equal
02:29 - equals New Hawk our Hawk will have a
02:32 - name of Hawk our Hawk will be 3 years
02:35 - old and has a fly speed of 50 m hour so
02:39 - when I run this program we have an
02:41 - uncaught reference error must call Super
02:43 - Constructor in derived class before
02:46 - accessing the this keyword so what
02:48 - JavaScript is telling us is that before
02:50 - we can use the this keyword we have to
02:53 - call the Constructor of the parent the
02:55 - super class within each of these
02:57 - respective Constructors we will invoke
03:00 - The Constructor of the parent the super
03:02 - class with the super keyword so let's do
03:05 - that for each of these
03:08 - Constructors now our program actually
03:10 - runs now so one of the benefits of using
03:12 - Constructors is that if there's any
03:14 - properties that the children all share
03:16 - in common we can send them to the
03:18 - Constructor of the parent as you can see
03:20 - we're repeating ourselves a lot each of
03:22 - these children classes has a name and
03:24 - age property that we're assigning to
03:26 - each we would like to follow the drve
03:28 - principle don't repeat yourself so why
03:31 - don't we write this code once and reuse
03:33 - it so within the Constructor of the
03:35 - parent will accept a name and age
03:40 - property we'll assign this.name equals
03:43 - name and this. age equals age now we can
03:47 - remove that within each of the child
03:48 - classes so we don't repeat
03:51 - ourselves there's less code to right now
03:54 - but we do need to pass in these
03:56 - arguments to the parent Constructor name
03:59 - and age for
04:05 - each and that's all there is to it in
04:08 - this example when we construct an object
04:10 - either a rabbit a fish or a hawk we'll
04:12 - accept three arguments a name age and
04:15 - either a run speed a swim speed or a fly
04:18 - speed depending on the animal that we're
04:19 - creating any properties they assure in
04:22 - common we can send to the parent
04:23 - Constructor it helps with code
04:25 - reusability and there's a lot less to
04:27 - write it's not that evident with three
04:29 - children classes but imagine if you had
04:31 - hundreds of different classes like what
04:33 - if this was Pokémon there's like what a
04:35 - thousand Pokémon now we would have to
04:37 - copy and paste those properties like a
04:39 - thousand times for each if we're
04:40 - constructing individual Pokémon but
04:43 - since all of them share those same
04:44 - properties we can write it in one place
04:47 - and make any changes only in one place
04:50 - so let's test this to see if it works
04:53 - let's
04:55 - console.log our rabbit's name which is
05:00 - named rabbit let's console.log the
05:02 - rabbit's age the rabbit is Oney old and
05:06 - let's see if the rabbit has a run speed
05:09 - 25 as in 25 mph let's do this with fish
05:13 - fish. name fish. AG let's see if the
05:15 - fish has a run
05:17 - speed name is fish Age Two run speed is
05:20 - undefined because fish can't run because
05:22 - they don't have legs but they do have a
05:23 - swim speed though swim speed 12 miles
05:27 - hour then Hawk hawk. name hawk. AG hawk.
05:32 - flyp speed name is Hawk age three the
05:36 - hawk has a fly speed of 50
05:38 - mph so that's how you can use the super
05:40 - keyword in a class to call the
05:42 - Constructor of the parent it helps with
05:44 - code reusability any properties that the
05:47 - children share in common in this case a
05:49 - name and Age The Constructor of the
05:51 - parent can take care of that we don't
05:53 - have to repeat the set of code every
05:55 - single time for each child we write it
05:57 - in one place and reuse it another
05:59 - another thing you can do too with the
06:00 - super keyword is extend a method from
06:02 - the parent so what we're going to do
06:04 - within the animal parent class is create
06:06 - a move
06:08 - method within this method we will
06:11 - console.log the following
06:13 - message the at a placeholder
06:19 - this.name moves at a speed of add a
06:25 - placeholder speed mph for miles per hour
06:29 - hour or if you prefer you can use
06:31 - kilometers our move method will have one
06:34 - parameter a speed that we need to pass
06:36 - in to use So within each of these
06:38 - children classes we'll write a method
06:41 - that also extends the move method of the
06:44 - parent rabbits will have a run
06:48 - method we'll output the following
06:51 - message
06:53 - console.log I'll use a template
06:55 - string this add a
06:58 - placeholder this.
07:00 - name can
07:03 - run let's copy our run method paste it
07:06 - for fish but change swim to run because
07:09 - fish can't run this this. name can
07:14 - swim then with Hawks they'll have a fly
07:18 - method fly this this. name can
07:24 - fly with our rabbit object let's invoke
07:27 - the run method
07:31 - this rabbit can run let's do this with
07:34 - fish fish. swim this fish can swim and
07:39 - hawk. fly method this Hawk can fly
07:43 - within each of these children classes
07:45 - we're going to extend the move method of
07:47 - the parent animal within the run method
07:49 - of our rabbit class not only are we
07:52 - going to Output this
07:53 - message we'll also extend the move
07:56 - method of the parent and display that
07:58 - message as well
07:59 - to refer to the parent class we use the
08:01 - super keyword it's very similar to this
08:04 - but it means the parent use the parents
08:07 - move
08:08 - method but we do have to send a speed
08:11 - argument let's send the Run speed of the
08:14 - Rabbit this. Run speed let's do this
08:18 - with our fish class we'll extend the
08:20 - move method super. move send in this.
08:25 - swimp speed and Hawk super. move this do
08:30 - fly
08:31 - speed now let's take our rabbit use the
08:34 - run method and we should extend the move
08:36 - method this rabbit can run the rabbit
08:40 - moves at a speed of 25
08:42 - mph let's do this with fish fish. swim
08:46 - the fish can swim the fish moves at a
08:48 - speed of 12 mph and hawk hawk. fly
08:53 - method this Hawk can fly the hawk moves
08:56 - at a speed of 50
08:57 - mph so that's how you can use the super
09:00 - keyword to extend a method of a parent
09:03 - all right everybody so that's the super
09:04 - keyword it's a reference to a parent it
09:07 - can be used to call the Constructor of a
09:09 - parent and or access the properties and
09:11 - methods of a parent and well everybody
09:14 - that is the super keyword in
09:20 - JavaScript

Cleaned transcript:

yo what's going on everybody so in today's video I'm going to explain the super keyword in JavaScript super is a keyword that's used in classes to call the Constructor or access the properties and methods of a parent the parent is also known as the super class it's very similar to the this keyword this refers to this object super refers to the parent of that object here's an example we'll use inheritance to create a parent class of animal class animal our animal class will have three children also known as sub classes class rabbit extends animal class fish extends animal class Hawk extends animal We'll add an empty Constructor for now for the animal class then we need a Constructor for the rabbit class so rabbits they'll have a name property age and a run speed we'll assign these properties within the Constructor this.name equals the name that we receive this. AG equals age this. runspeed equals run speed let's copy this Constructor now with fish fish don't have a run speed but they'll have a swim speed let's replace run speed with swim speed copy The Constructor again paste it Hawks in this example won't have a swim speed they'll have a fly speed though replace swim speed with fly speed now let's attempt to create some of these objects const rabbit equals new rabbit we need a name for this rabbit you could just say rabbit or if you want to be creative you could say something like Bugs Bunny uh but let's just stick with rabbit to keep it simple our rabbit will be Oney old and has a run speed of 25 M hour if you use kilometers feel free to use kilometers let's do this with fish const fish equals new fish the name of our fish will be fish our fish is 2 years old and has a swim speed of 12 mph then with Hawk const Hawk equal equals New Hawk our Hawk will have a name of Hawk our Hawk will be 3 years old and has a fly speed of 50 m hour so when I run this program we have an uncaught reference error must call Super Constructor in derived class before accessing the this keyword so what JavaScript is telling us is that before we can use the this keyword we have to call the Constructor of the parent the super class within each of these respective Constructors we will invoke The Constructor of the parent the super class with the super keyword so let's do that for each of these Constructors now our program actually runs now so one of the benefits of using Constructors is that if there's any properties that the children all share in common we can send them to the Constructor of the parent as you can see we're repeating ourselves a lot each of these children classes has a name and age property that we're assigning to each we would like to follow the drve principle don't repeat yourself so why don't we write this code once and reuse it so within the Constructor of the parent will accept a name and age property we'll assign this.name equals name and this. age equals age now we can remove that within each of the child classes so we don't repeat ourselves there's less code to right now but we do need to pass in these arguments to the parent Constructor name and age for each and that's all there is to it in this example when we construct an object either a rabbit a fish or a hawk we'll accept three arguments a name age and either a run speed a swim speed or a fly speed depending on the animal that we're creating any properties they assure in common we can send to the parent Constructor it helps with code reusability and there's a lot less to write it's not that evident with three children classes but imagine if you had hundreds of different classes like what if this was Pokémon there's like what a thousand Pokémon now we would have to copy and paste those properties like a thousand times for each if we're constructing individual Pokémon but since all of them share those same properties we can write it in one place and make any changes only in one place so let's test this to see if it works let's console.log our rabbit's name which is named rabbit let's console.log the rabbit's age the rabbit is Oney old and let's see if the rabbit has a run speed 25 as in 25 mph let's do this with fish fish. name fish. AG let's see if the fish has a run speed name is fish Age Two run speed is undefined because fish can't run because they don't have legs but they do have a swim speed though swim speed 12 miles hour then Hawk hawk. name hawk. AG hawk. flyp speed name is Hawk age three the hawk has a fly speed of 50 mph so that's how you can use the super keyword in a class to call the Constructor of the parent it helps with code reusability any properties that the children share in common in this case a name and Age The Constructor of the parent can take care of that we don't have to repeat the set of code every single time for each child we write it in one place and reuse it another another thing you can do too with the super keyword is extend a method from the parent so what we're going to do within the animal parent class is create a move method within this method we will console.log the following message the at a placeholder this.name moves at a speed of add a placeholder speed mph for miles per hour hour or if you prefer you can use kilometers our move method will have one parameter a speed that we need to pass in to use So within each of these children classes we'll write a method that also extends the move method of the parent rabbits will have a run method we'll output the following message console.log I'll use a template string this add a placeholder this. name can run let's copy our run method paste it for fish but change swim to run because fish can't run this this. name can swim then with Hawks they'll have a fly method fly this this. name can fly with our rabbit object let's invoke the run method this rabbit can run let's do this with fish fish. swim this fish can swim and hawk. fly method this Hawk can fly within each of these children classes we're going to extend the move method of the parent animal within the run method of our rabbit class not only are we going to Output this message we'll also extend the move method of the parent and display that message as well to refer to the parent class we use the super keyword it's very similar to this but it means the parent use the parents move method but we do have to send a speed argument let's send the Run speed of the Rabbit this. Run speed let's do this with our fish class we'll extend the move method super. move send in this. swimp speed and Hawk super. move this do fly speed now let's take our rabbit use the run method and we should extend the move method this rabbit can run the rabbit moves at a speed of 25 mph let's do this with fish fish. swim the fish can swim the fish moves at a speed of 12 mph and hawk hawk. fly method this Hawk can fly the hawk moves at a speed of 50 mph so that's how you can use the super keyword to extend a method of a parent all right everybody so that's the super keyword it's a reference to a parent it can be used to call the Constructor of a parent and or access the properties and methods of a parent and well everybody that is the super keyword in JavaScript
