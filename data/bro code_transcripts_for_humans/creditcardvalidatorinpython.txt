With timestamps:

00:00 - hey everybody in today's topic we'll be
00:02 - creating a credit card validator program
00:04 - in Python it sounds intimidating but
00:06 - it's actually not that bad oh I almost
00:08 - forgot if you need a credit card number
00:10 - to work with you can always look online
00:11 - for test credit card account numbers
00:14 - I've listed the steps here after
00:16 - accepting some user input what we'll
00:18 - need to do is remove any dashes or
00:21 - spaces that the user may enter in to
00:23 - check if this number is valid we will
00:25 - add all digits in the odd places from
00:28 - right to left then we will double every
00:31 - second digit from right to left all of
00:34 - the even numbers basically if the digit
00:37 - doubled is now a two digit number add
00:40 - the two digit numbers together to get a
00:42 - single digit after doubling all your
00:45 - even digits add them together to create
00:47 - a sum of even numbers
00:49 - sum the totals of steps two and three if
00:52 - the sum is divisible by 10 the credit
00:55 - card number is valid
00:56 - we'll tackle this program step by step
00:59 - let's declare all of the variables we'll
01:02 - need throughout our program we'll need
01:03 - to hold the sum of all the odd digits
01:06 - from right to left I'll store that
01:08 - within a variable named sum odd
01:11 - digits
01:13 - I'll set that equal to be zero
01:16 - then we will sum
01:18 - the even digits I'll set that to be zero
01:22 - as well
01:23 - then I will declare a variable named
01:26 - total to store the total
01:28 - all right now let's begin with step one
01:31 - I'll just add a comment
01:34 - step one
01:37 - we will accept some user input
01:39 - we'll store that within a variable named
01:41 - card number
01:43 - equals input
01:46 - will ask the user to enter a credit card
01:50 - number
01:52 - we're not going to Typecast this number
01:54 - we will keep the user input as a string
01:57 - for now at least we'll need to remove
01:59 - any dashes we can do that by reassigning
02:02 - our card number equal to card number
02:05 - then use the built-in replace method of
02:08 - a string
02:09 - we will replace any dashes with
02:13 - an empty string
02:15 - just temporarily I'm going to print our
02:17 - card number just to be sure that we
02:19 - remove the dashes before continuing
02:22 - so enter a credit card number I'm just
02:24 - going to make up a number 1 2 3
02:26 - 4-5678-9012-3456
02:31 - yep and all the dashes have been removed
02:35 - now if the user types in any spaces to
02:38 - separate each of the four digits let's
02:39 - remove those two
02:43 - we will reassign card number equal to
02:46 - card number use the built-in replace
02:48 - method replace any spaces with an empty
02:52 - string let's try this again
02:55 - I'll enter in my card number but
02:57 - separate each group of four digits with
02:59 - the space
03:03 - all of the spaces are gone
03:06 - now with the following steps we're going
03:08 - to be summing the digits from right to
03:10 - left I think the easiest way to do this
03:12 - is to reverse our string
03:15 - and that's fairly simple in Python
03:17 - we will take our card number reassign it
03:21 - equal to card number use the indexing
03:24 - operator
03:25 - there's going to be no beginning index
03:27 - or ending index
03:29 - but we will set the step to be negative
03:30 - one this will reverse our string and
03:33 - reassign it let's test it
03:36 - one two three four five six seven eight
03:38 - nine zero one two three four five six
03:40 - yeah and our string is now reversed
03:44 - so that completes step one we no longer
03:46 - need to print our card number we will
03:49 - move on to step two
03:52 - step two states that we need to add all
03:55 - digits in the odd places from right to
03:57 - left
03:58 - well a string is iterable we can use it
04:01 - within a for Loop for X in our card
04:06 - number
04:08 - we will need every second digit
04:11 - there's no beginning index or ending
04:13 - index but we will set the step to be two
04:15 - we will iterate over every second digit
04:18 - within our card number X will store each
04:21 - digit temporarily
04:23 - so we will take our variable
04:25 - some odd
04:28 - digits
04:29 - equals some odd digits plus X but we can
04:34 - simplify this to some odd digits plus
04:38 - equals X
04:40 - there's one more thing we need to do for
04:42 - step two I'll demonstrate
04:44 - let's type in our credit card number I'm
04:46 - just making up a number again
04:49 - so we have an unsupported operand type
04:52 - we're iterating over a string X is
04:55 - technically a string
04:57 - we would want to Typecast X as an
05:00 - integer
05:01 - let's try that again just to be sure
05:03 - everything works fine
05:08 - okay yeah there's no problems that will
05:11 - complete step two
05:12 - let's move on to step three
05:16 - step three states that we will double
05:18 - every second digit from right to left if
05:22 - the result is a two digit number add the
05:24 - two digit number together to get a
05:26 - single digit
05:28 - with the for Loop 4X in our card number
05:34 - we will iterate over every second digit
05:37 - set the step to B2 however we will begin
05:40 - at the second digit which has an index
05:43 - of one
05:46 - X will store the current digit let's
05:48 - reassign X to B
05:51 - x times two
05:53 - because we're doubling every second
05:55 - digit however we would need to Typecast
05:58 - X as an integer
06:00 - because it's currently a string to see
06:02 - if x is a two digit number we can easily
06:05 - use an if statement if x is greater than
06:08 - or equal to 10.
06:10 - if x is greater than or equal to 10 it
06:13 - should technically be a two digit number
06:15 - right because 10 is a two digit number
06:17 - so if x is a two digit number we'll need
06:20 - to split that number then add them
06:22 - together let's take some
06:25 - even
06:26 - digits
06:28 - plus equals
06:31 - X modulus 10 that would give you the
06:34 - remainder of any division
06:37 - then add 1.
06:42 - the largest that X can be in the
06:44 - scenario is 18 because the largest a
06:46 - single digit can be is 9 in our credit
06:48 - card number so nine times two is
06:51 - eighteen eighteen modulus 10 would give
06:53 - us 8. we would split that number to get
06:55 - one and eight then add those two numbers
06:58 - together to get nine so else
07:02 - X must be less than 10. if that's the
07:05 - case we would take some even digits
07:09 - plus equals whatever X is
07:13 - that completes step three let's move on
07:15 - to step four
07:19 - add together both the sum of the odd
07:22 - digits and sum of the even digits
07:25 - total equals
07:27 - some odd digits plus some even digits
07:33 - then step five step five if our total is
07:38 - divisible by ten it's a valid number
07:42 - if
07:43 - total modulus 10
07:46 - is equal to zero
07:50 - then print
07:53 - valid
07:56 - else
07:58 - print
08:01 - invalid
08:04 - that should complete our program Let's
08:06 - test it
08:07 - enter a credit card number I'm just
08:09 - going to make up something
08:15 - so this is an invalid number
08:17 - for a valid number you can either use
08:19 - your own credit card if you have one or
08:22 - you could find a sample online
08:24 - I'll just use the first one that I find
08:31 - oh yeah that number is valid just for
08:33 - good measure I'll test another
08:38 - yep that one is also valid alright
08:40 - everybody I thought this would be a good
08:42 - project for us to work on it helps us
08:44 - get used to working with strings and
08:46 - Loops as well but yeah that is a credit
08:48 - card validator program in Python

Cleaned transcript:

hey everybody in today's topic we'll be creating a credit card validator program in Python it sounds intimidating but it's actually not that bad oh I almost forgot if you need a credit card number to work with you can always look online for test credit card account numbers I've listed the steps here after accepting some user input what we'll need to do is remove any dashes or spaces that the user may enter in to check if this number is valid we will add all digits in the odd places from right to left then we will double every second digit from right to left all of the even numbers basically if the digit doubled is now a two digit number add the two digit numbers together to get a single digit after doubling all your even digits add them together to create a sum of even numbers sum the totals of steps two and three if the sum is divisible by 10 the credit card number is valid we'll tackle this program step by step let's declare all of the variables we'll need throughout our program we'll need to hold the sum of all the odd digits from right to left I'll store that within a variable named sum odd digits I'll set that equal to be zero then we will sum the even digits I'll set that to be zero as well then I will declare a variable named total to store the total all right now let's begin with step one I'll just add a comment step one we will accept some user input we'll store that within a variable named card number equals input will ask the user to enter a credit card number we're not going to Typecast this number we will keep the user input as a string for now at least we'll need to remove any dashes we can do that by reassigning our card number equal to card number then use the builtin replace method of a string we will replace any dashes with an empty string just temporarily I'm going to print our card number just to be sure that we remove the dashes before continuing so enter a credit card number I'm just going to make up a number 1 2 3 4567890123456 yep and all the dashes have been removed now if the user types in any spaces to separate each of the four digits let's remove those two we will reassign card number equal to card number use the builtin replace method replace any spaces with an empty string let's try this again I'll enter in my card number but separate each group of four digits with the space all of the spaces are gone now with the following steps we're going to be summing the digits from right to left I think the easiest way to do this is to reverse our string and that's fairly simple in Python we will take our card number reassign it equal to card number use the indexing operator there's going to be no beginning index or ending index but we will set the step to be negative one this will reverse our string and reassign it let's test it one two three four five six seven eight nine zero one two three four five six yeah and our string is now reversed so that completes step one we no longer need to print our card number we will move on to step two step two states that we need to add all digits in the odd places from right to left well a string is iterable we can use it within a for Loop for X in our card number we will need every second digit there's no beginning index or ending index but we will set the step to be two we will iterate over every second digit within our card number X will store each digit temporarily so we will take our variable some odd digits equals some odd digits plus X but we can simplify this to some odd digits plus equals X there's one more thing we need to do for step two I'll demonstrate let's type in our credit card number I'm just making up a number again so we have an unsupported operand type we're iterating over a string X is technically a string we would want to Typecast X as an integer let's try that again just to be sure everything works fine okay yeah there's no problems that will complete step two let's move on to step three step three states that we will double every second digit from right to left if the result is a two digit number add the two digit number together to get a single digit with the for Loop 4X in our card number we will iterate over every second digit set the step to B2 however we will begin at the second digit which has an index of one X will store the current digit let's reassign X to B x times two because we're doubling every second digit however we would need to Typecast X as an integer because it's currently a string to see if x is a two digit number we can easily use an if statement if x is greater than or equal to 10. if x is greater than or equal to 10 it should technically be a two digit number right because 10 is a two digit number so if x is a two digit number we'll need to split that number then add them together let's take some even digits plus equals X modulus 10 that would give you the remainder of any division then add 1. the largest that X can be in the scenario is 18 because the largest a single digit can be is 9 in our credit card number so nine times two is eighteen eighteen modulus 10 would give us 8. we would split that number to get one and eight then add those two numbers together to get nine so else X must be less than 10. if that's the case we would take some even digits plus equals whatever X is that completes step three let's move on to step four add together both the sum of the odd digits and sum of the even digits total equals some odd digits plus some even digits then step five step five if our total is divisible by ten it's a valid number if total modulus 10 is equal to zero then print valid else print invalid that should complete our program Let's test it enter a credit card number I'm just going to make up something so this is an invalid number for a valid number you can either use your own credit card if you have one or you could find a sample online I'll just use the first one that I find oh yeah that number is valid just for good measure I'll test another yep that one is also valid alright everybody I thought this would be a good project for us to work on it helps us get used to working with strings and Loops as well but yeah that is a credit card validator program in Python
