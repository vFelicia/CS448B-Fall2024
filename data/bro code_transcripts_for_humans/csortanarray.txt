With timestamps:

00:02 - hey uh what's going on people so in this
00:04 - video we're going to write a small
00:05 - program to sort the elements of an array
00:08 - let's begin with an array of integers
00:10 - and then later we'll create an array of
00:11 - characters the data type will be int and
00:14 - let's name this array
00:16 - and assign some values make sure that
00:18 - they're not in order just make up some
00:19 - numbers that's fine
00:22 - looks good to me now let's calculate the
00:25 - size of our array because we'll need to
00:26 - know how many times we're going to
00:28 - iterate through our array so int size i
00:31 - will set this equal to the size of
00:34 - operator pass in our array this will
00:36 - calculate the size of our array in bytes
00:39 - and to find the number of elements we
00:41 - can divide this by the size of just one
00:44 - element so size of array divided by the
00:47 - size of array at index of zero
00:50 - size will equal the amount of elements
00:52 - within our array and just to keep this
00:55 - code more organized let's declare a
00:57 - function to actually sort all of this
00:59 - for us so we don't have to do that
01:01 - within the main function so let's
01:03 - declare a sort function the return type
01:06 - is void we're not returning anything and
01:08 - let's name this sort
01:10 - and there will be two parameters
01:13 - an array of integers
01:16 - and integer size
01:19 - and let's invoke this function we're
01:21 - invoking sort and then we need to pass
01:23 - in two arguments
01:25 - are array
01:26 - and a size
01:28 - within the sort function we'll need
01:30 - nested loops we can use four loops
01:33 - so the outer for loop will be int i set
01:36 - this equal to zero
01:37 - and we will continue this for loop as
01:39 - long as i
01:40 - is less than the size of our array minus
01:44 - one and then increment i by one and then
01:47 - we need an inner for loop so let's copy
01:49 - our outer for loop paste it and make a
01:51 - few changes
01:53 - so the index for the inner loop will be
01:55 - j
01:56 - and we'll continue this as long as j is
01:58 - less than the size of our array minus
02:01 - one then j plus plus
02:03 - here's what we're doing within our array
02:05 - so we will begin at our first index
02:07 - we're checking to see if the element on
02:09 - the left is greater than the element on
02:11 - the right if so we're going to swap
02:13 - these two values and we'll need the help
02:15 - of a temporary variable much like what
02:17 - we learned in the last topic so let's
02:19 - check to see if the element on the left
02:21 - is greater than the element on the right
02:23 - if it isn't we do nothing
02:25 - so we need an if statement
02:28 - if array
02:30 - at index of j
02:33 - is greater than
02:35 - at index of j plus one
02:38 - we're adding plus one because we're
02:40 - checking the element directly next to
02:42 - the one that we're currently examining
02:44 - so if the number on the left is greater
02:46 - than the number on the right we will
02:48 - perform a basic variable swap
02:51 - so let's declare a variable in temp to
02:54 - temporarily store some value and i will
02:56 - set the sql to array at index of j now i
03:00 - need to move the element on the right
03:02 - over to the element on the left
03:04 - array
03:05 - at index of j
03:07 - equals array at index of j plus one and
03:12 - then lastly whatever's within temp i'm
03:14 - moving that to the element on the right
03:16 - so array at index of j
03:19 - plus one
03:21 - equals
03:22 - temp and that's it so if you would like
03:25 - to optimize this you can set size
03:28 - minus i minus one basically this is a
03:31 - bubble sort so depending on the size of
03:33 - this number it's going to find a final
03:35 - resting place since 9 is going to be the
03:37 - largest it's going to be pushed all the
03:39 - way to the right because we will examine
03:42 - 9 against each of these numbers so once
03:44 - 9 is pushed all the way to the right all
03:47 - these other numbers that are less than 9
03:49 - will be on the left so it's already
03:50 - partially organized and now we just need
03:52 - some way to display the elements of our
03:54 - array so let's declare a print function
03:58 - void and let's name this print array
04:01 - and these will have the same parameters
04:04 - an array of integers and into size
04:07 - and this is a basic for loop
04:10 - so for
04:11 - and i set this equal to zero we will
04:14 - continue this loop as long as i is less
04:16 - than the size of our array
04:18 - and increment i by one
04:21 - and i would like to display each integer
04:24 - and maybe i'll separate these with a
04:25 - space and we are displaying our array at
04:28 - index of i and all we have to do is
04:31 - invoke the print array function
04:34 - and then pass in our array and our size
04:37 - and let's take a look fingers are
04:39 - crossed
04:41 - oh yeah there we go our array is now
04:43 - sorted now if you would like this in
04:45 - descending order all we have to do is
04:47 - switch this if statement around from
04:50 - greater than to less than
04:52 - and our array is sorted in reverse order
04:55 - and we could sort an array of other data
04:57 - types too this time let's sort an array
04:59 - of characters so let's declare an array
05:01 - of characters this time
05:05 - and make up some characters
05:12 - so then to sort an array of characters
05:14 - let's change the data type of our array
05:16 - to characters
05:21 - and then when we display each character
05:23 - make sure that we're using the c format
05:25 - specifier because we were using d before
05:28 - and this should now be sorted
05:32 - yep so that's currently in reverse order
05:34 - so then to switch that around just
05:36 - change the sign
05:38 - all right there you go so yeah everybody
05:40 - that is a simple program to sort the
05:43 - elements of an array this is a basic
05:45 - bubble sort and if you're interested in
05:47 - learning more about sorting algorithms i
05:49 - do have a playlist on data structures
05:51 - and algorithms if you would like a copy
05:53 - of this code i'll post this in the
05:55 - comment section down below and well yeah
05:57 - that's how to sort a simple array in c

Cleaned transcript:

hey uh what's going on people so in this video we're going to write a small program to sort the elements of an array let's begin with an array of integers and then later we'll create an array of characters the data type will be int and let's name this array and assign some values make sure that they're not in order just make up some numbers that's fine looks good to me now let's calculate the size of our array because we'll need to know how many times we're going to iterate through our array so int size i will set this equal to the size of operator pass in our array this will calculate the size of our array in bytes and to find the number of elements we can divide this by the size of just one element so size of array divided by the size of array at index of zero size will equal the amount of elements within our array and just to keep this code more organized let's declare a function to actually sort all of this for us so we don't have to do that within the main function so let's declare a sort function the return type is void we're not returning anything and let's name this sort and there will be two parameters an array of integers and integer size and let's invoke this function we're invoking sort and then we need to pass in two arguments are array and a size within the sort function we'll need nested loops we can use four loops so the outer for loop will be int i set this equal to zero and we will continue this for loop as long as i is less than the size of our array minus one and then increment i by one and then we need an inner for loop so let's copy our outer for loop paste it and make a few changes so the index for the inner loop will be j and we'll continue this as long as j is less than the size of our array minus one then j plus plus here's what we're doing within our array so we will begin at our first index we're checking to see if the element on the left is greater than the element on the right if so we're going to swap these two values and we'll need the help of a temporary variable much like what we learned in the last topic so let's check to see if the element on the left is greater than the element on the right if it isn't we do nothing so we need an if statement if array at index of j is greater than at index of j plus one we're adding plus one because we're checking the element directly next to the one that we're currently examining so if the number on the left is greater than the number on the right we will perform a basic variable swap so let's declare a variable in temp to temporarily store some value and i will set the sql to array at index of j now i need to move the element on the right over to the element on the left array at index of j equals array at index of j plus one and then lastly whatever's within temp i'm moving that to the element on the right so array at index of j plus one equals temp and that's it so if you would like to optimize this you can set size minus i minus one basically this is a bubble sort so depending on the size of this number it's going to find a final resting place since 9 is going to be the largest it's going to be pushed all the way to the right because we will examine 9 against each of these numbers so once 9 is pushed all the way to the right all these other numbers that are less than 9 will be on the left so it's already partially organized and now we just need some way to display the elements of our array so let's declare a print function void and let's name this print array and these will have the same parameters an array of integers and into size and this is a basic for loop so for and i set this equal to zero we will continue this loop as long as i is less than the size of our array and increment i by one and i would like to display each integer and maybe i'll separate these with a space and we are displaying our array at index of i and all we have to do is invoke the print array function and then pass in our array and our size and let's take a look fingers are crossed oh yeah there we go our array is now sorted now if you would like this in descending order all we have to do is switch this if statement around from greater than to less than and our array is sorted in reverse order and we could sort an array of other data types too this time let's sort an array of characters so let's declare an array of characters this time and make up some characters so then to sort an array of characters let's change the data type of our array to characters and then when we display each character make sure that we're using the c format specifier because we were using d before and this should now be sorted yep so that's currently in reverse order so then to switch that around just change the sign all right there you go so yeah everybody that is a simple program to sort the elements of an array this is a basic bubble sort and if you're interested in learning more about sorting algorithms i do have a playlist on data structures and algorithms if you would like a copy of this code i'll post this in the comment section down below and well yeah that's how to sort a simple array in c
