With timestamps:

00:00 - all right let's do this thing so I got
00:02 - to talk about classes and JavaScript
00:04 - classes are an es6 feature that provides
00:07 - a more structured and cleaner way to
00:09 - work with objects compared to the
00:11 - traditional Constructor functions that
00:13 - we're normally used to classes are going
00:16 - to be really helpful when we reach
00:17 - future topics such as the static keyword
00:20 - encapsulation and inheritance in this
00:23 - example I have a Constructor for a
00:25 - product our product needs a name and a
00:27 - price for example we have a shirt and
00:30 - the price is
00:31 - $19.99 instead of using a Constructor
00:33 - method we're instead going to use a
00:35 - class our class will include a
00:38 - Constructor so let's start from the
00:40 - beginning to create a class you type
00:43 - class then the name of the object so our
00:46 - class is going to serve as a blueprint
00:48 - our objects will be products then add a
00:51 - set of curly braces to use a Constructor
00:55 - we can use the Constructor keyword
00:57 - within our
00:58 - class list any par parameters we will
01:00 - have a name and a price for each product
01:04 - we will assign the properties of
01:07 - this.name equals the name parameter that
01:09 - we
01:10 - receive this. price equals price I will
01:15 - also create a
01:17 - function our function will be display
01:21 - product now inside of a class you don't
01:23 - need to use the function
01:25 - keyword when we would like to display
01:28 - this product we will console
01:31 - log product colon space I'll include a
01:36 - placeholder this.
01:39 - name let's also output the
01:42 - price price pick a unit of currency I'll
01:46 - use American
01:48 - dollars this do price let's create some
01:52 - product
01:53 - objects const product one equals to
01:58 - create a new object we have to use that
01:59 - new keyword the name of the class
02:02 - product the Constructor is going to be
02:04 - called automatically but we do need to
02:07 - pass in a name and a price as
02:09 - arguments we will pass in a shirt the
02:14 - price will be
02:16 - $19.99 just to be sure that everything
02:18 - works let's invoke the display product
02:21 - method product one do display product
02:26 - method here are the details of our
02:28 - product object
02:30 - product shirt priced
02:33 - $19.99 let's create a few more so this
02:35 - class is
02:38 - reusable product
02:40 - two will be
02:44 - pants I'll pick 2250 for the
02:48 - price let's display product two product
02:51 - two and we will use the display product
02:53 - method of our
02:55 - class product pants the price is
02:58 - $22.50 uh it looks like I only have one
03:01 - decimal point I'm going to make one
03:02 - change after the price I will use the
03:06 - two fixed method and set this to be two
03:10 - decimals there
03:12 - 2250 all right product three const
03:15 - product 3 equals new
03:19 - product our third product is going to be
03:23 - underwear this underwear is really
03:25 - expensive it's $100 it's really good
03:27 - underwear guys product 3. display
03:31 - product product underwear price
03:34 - $100 here's a challenge round I'm going
03:37 - to add another method this method will
03:39 - have one parameter sales tax we'll
03:42 - create a method to calculate a total
03:44 - including tax so let's create a new
03:47 - method inside of a class we don't need
03:49 - the function keyword calculate total
03:53 - there will be one parameter sales
03:57 - tax all we're going to do is return
04:01 - this. Price Plus to calculate the sales
04:04 - tax we'll take this. price times the
04:09 - sales tax assuming it's a
04:12 - percentage okay let's display product
04:15 - one product one. display product I'm
04:18 - also going to create a constant for the
04:19 - sales tax that's not going to change
04:22 - const sales tax let's say the sales tax
04:26 - is 5%
04:28 - 0.05
04:30 - I will create a variable const total
04:35 - equals let's take product one use the
04:38 - calculate total method but we have to
04:41 - pass in sales tax we can either pass in
04:44 - this number or this
04:47 - variable once we have our total let's
04:49 - display it
04:52 - console.log I'll use a template
04:55 - string total price in parentheses with t
05:02 - tax I'll add a
05:04 - placeholder display the total pick a
05:07 - unit of currency I'll use American
05:09 - dollars then I'll add two fixed two to
05:13 - set it to two decimal
05:15 - places all right our product is a shirt
05:18 - price is $1 199.99 total price with tax
05:21 - is
05:22 - $20.99 let's do this with product two
05:25 - product 2. display product product 2.
05:28 - calculate total
05:31 - pants 2250 total price
05:34 - 2363 let's check out our really
05:36 - expensive underwear product 3. display
05:38 - product product 3. calculate total our
05:42 - underwear is $100 including sales tax
05:45 - it's
05:47 - $15 all right everybody so those are
05:49 - classes they're an es6 feature that
05:51 - provide a more structured and cleaner
05:53 - way to work with objects compared to the
05:56 - traditional Constructor functions that
05:58 - we learned about in the last video
06:00 - classes are going to be really helpful
06:02 - with a few upcoming topics and well
06:04 - everybody those are classes in
06:07 - JavaScript

Cleaned transcript:

all right let's do this thing so I got to talk about classes and JavaScript classes are an es6 feature that provides a more structured and cleaner way to work with objects compared to the traditional Constructor functions that we're normally used to classes are going to be really helpful when we reach future topics such as the static keyword encapsulation and inheritance in this example I have a Constructor for a product our product needs a name and a price for example we have a shirt and the price is $19.99 instead of using a Constructor method we're instead going to use a class our class will include a Constructor so let's start from the beginning to create a class you type class then the name of the object so our class is going to serve as a blueprint our objects will be products then add a set of curly braces to use a Constructor we can use the Constructor keyword within our class list any par parameters we will have a name and a price for each product we will assign the properties of this.name equals the name parameter that we receive this. price equals price I will also create a function our function will be display product now inside of a class you don't need to use the function keyword when we would like to display this product we will console log product colon space I'll include a placeholder this. name let's also output the price price pick a unit of currency I'll use American dollars this do price let's create some product objects const product one equals to create a new object we have to use that new keyword the name of the class product the Constructor is going to be called automatically but we do need to pass in a name and a price as arguments we will pass in a shirt the price will be $19.99 just to be sure that everything works let's invoke the display product method product one do display product method here are the details of our product object product shirt priced $19.99 let's create a few more so this class is reusable product two will be pants I'll pick 2250 for the price let's display product two product two and we will use the display product method of our class product pants the price is $22.50 uh it looks like I only have one decimal point I'm going to make one change after the price I will use the two fixed method and set this to be two decimals there 2250 all right product three const product 3 equals new product our third product is going to be underwear this underwear is really expensive it's $100 it's really good underwear guys product 3. display product product underwear price $100 here's a challenge round I'm going to add another method this method will have one parameter sales tax we'll create a method to calculate a total including tax so let's create a new method inside of a class we don't need the function keyword calculate total there will be one parameter sales tax all we're going to do is return this. Price Plus to calculate the sales tax we'll take this. price times the sales tax assuming it's a percentage okay let's display product one product one. display product I'm also going to create a constant for the sales tax that's not going to change const sales tax let's say the sales tax is 5% 0.05 I will create a variable const total equals let's take product one use the calculate total method but we have to pass in sales tax we can either pass in this number or this variable once we have our total let's display it console.log I'll use a template string total price in parentheses with t tax I'll add a placeholder display the total pick a unit of currency I'll use American dollars then I'll add two fixed two to set it to two decimal places all right our product is a shirt price is $1 199.99 total price with tax is $20.99 let's do this with product two product 2. display product product 2. calculate total pants 2250 total price 2363 let's check out our really expensive underwear product 3. display product product 3. calculate total our underwear is $100 including sales tax it's $15 all right everybody so those are classes they're an es6 feature that provide a more structured and cleaner way to work with objects compared to the traditional Constructor functions that we learned about in the last video classes are going to be really helpful with a few upcoming topics and well everybody those are classes in JavaScript
