With timestamps:

00:00 - hey what's going on everybody so today
00:01 - I'm going to explain why Loops in
00:03 - JavaScript a while loop will repeat some
00:06 - code while some condition is true take
00:09 - this program for example we have a
00:12 - variable username if our username is
00:15 - equal to an empty string then we will
00:18 - console.log you didn't enter your name
00:20 - else console.log hello username if I run
00:24 - this program then check within our
00:26 - console well we didn't enter our
00:29 - username now if I were to change this
00:31 - program to a while loop
00:33 - while our username is equal to an empty
00:36 - string repeat this line of code Forever
00:38 - Until this condition is no longer true
00:41 - then when we escape the while loop we
00:44 - can print the message hello username
00:46 - this is what happens when I run the
00:48 - program
00:50 - we just print this line of code Forever
00:53 - and my computer is probably going to
00:54 - crash
00:58 - I can't seem to stop
01:01 - help okay I think it broke a while loop
01:04 - will continue some code infinitely while
01:07 - this condition is true
01:09 - if it no longer is true then we can
01:11 - escape the while loop if I were to set
01:14 - my username to be something other than
01:16 - an empty string
01:19 - well we never actually enter the while
01:21 - loop we skip over it entirely and go
01:24 - straight to console.log at the end
01:27 - so what we do first is check the
01:29 - condition if it's true then we get
01:31 - sucked into the while loop and execute
01:33 - this forever you usually want some sort
01:36 - of way to exit the while loop while
01:37 - you're in it otherwise you get what is
01:39 - known as an infinite Loop so let's
01:41 - rewrite this program
01:44 - let username equal an empty string while
01:47 - our username is strictly equal to an
01:50 - empty string
01:51 - let's ask the user to enter in their
01:54 - name username equals I'll use a window
01:57 - prompt
02:03 - enter your name
02:06 - okay let's try this again
02:08 - enter your name I'll press ok
02:10 - we can't seem to close this window until
02:13 - we type in something
02:14 - you can see I'm clicking on okay
02:16 - nothing's happening
02:17 - I will type in my name press ok then our
02:21 - console displays hello whatever your
02:24 - name is
02:25 - so that's a benefit of a while loop
02:27 - repeat some code until this condition is
02:30 - no longer true
02:31 - since we populated our username our
02:34 - username was not equal to an empty
02:35 - string we filled username with some
02:37 - characters
02:39 - what if I instead press cancel
02:41 - hello null null means no value
02:44 - username will equal null if I press the
02:47 - cancel button let's append this
02:49 - condition
02:50 - or
02:51 - username is strictly equal to null
02:56 - now I shouldn't be able to continue
02:58 - until I type in something
03:03 - and I can't escape if I hit cancel
03:06 - while one of these conditions is true
03:09 - execute this code Forever
03:11 - let's type in our name again
03:15 - and now we can escape the while loop
03:17 - there's also another variation of a
03:19 - while loop it's known as a do while loop
03:22 - how that works is that you can move
03:23 - while and the condition to the end
03:27 - so we'll place it here
03:29 - then precede the set of curly braces
03:31 - with do so we will always execute this
03:34 - code at least once then check the
03:37 - condition at the end
03:38 - using a do while loop I don't
03:40 - necessarily need to set the username I
03:42 - can set it to be undefined
03:46 - if I set my username to be undefined
03:49 - then use a standard while loop
03:54 - we never execute the while loop our
03:57 - username equals undefined it doesn't
03:59 - equal an empty string or the value null
04:02 - so we skip over the while loop entirely
04:05 - so a do while loop is another variation
04:07 - of a while loop do the code first then
04:10 - check the condition at the end so
04:12 - there's a few different ways you can
04:13 - write the same program
04:15 - all right let's go over another example
04:19 - we'll create three variables let logged
04:22 - in
04:23 - logged in will be false to begin with
04:27 - to log in we have to type in a matching
04:29 - username
04:32 - I will declare a username but not assign
04:34 - it and a password
04:38 - so let's create a while loop
04:41 - how do we escape the while loop let's
04:43 - say
04:44 - while not I'll use the notch logical
04:47 - operator while not logged in
04:51 - once we're logged in once this is true
04:54 - we escape the while loop we will ask a
04:57 - user for their username username equals
05:00 - window
05:01 - dot prompt
05:05 - enter your username
05:09 - let's ask for a password as well
05:14 - password equals enter your password
05:21 - I'll add an if statement within the
05:23 - while loop
05:24 - we'll check to see if our username is
05:28 - strictly equal to then make up some
05:30 - username
05:31 - my user
05:34 - name
05:39 - and if our password
05:42 - is strictly equal to some password like
05:45 - my password
05:48 - if our username and password both match
05:51 - these values then we can log in
05:54 - so logged in will equal true
05:59 - then I'll console.log a confirmation
06:01 - message
06:03 - you are logged in
06:09 - else
06:10 - let's console.log another message
06:14 - invalid credentials
06:19 - please try again
06:22 - all right let's see if this works
06:25 - enter your username
06:28 - I am just going to press ok
06:31 - enter your password I'll type in
06:33 - something legitimate so I'll type in my
06:35 - password
06:36 - uh invalid credentials please try again
06:39 - that's because I didn't type in a
06:40 - username
06:42 - I'll type in my username
06:44 - be sure it matches
06:46 - my username
06:49 - my password
06:51 - and we are now logged in
06:54 - so since we set logged in to be true
06:56 - when we go back to the beginning of our
06:58 - while loop this condition is no longer
07:01 - true while not logged in
07:04 - but since we're logged in we escape the
07:06 - while loop
07:07 - now another variation of this is the do
07:09 - while loop let's cut the condition along
07:12 - with while added to the end
07:14 - then add do to the beginning
07:18 - so we'll check to see if we're logged in
07:20 - at the end
07:21 - it pretty much does the same thing but
07:23 - with one exception in this program how
07:26 - this is different is that I can set
07:28 - logged in to be true to begin with we'll
07:30 - still receive that prompt I'll type in
07:33 - my username type in my password
07:35 - we are currently logged in so we do not
07:37 - continue the while loop if we used a
07:39 - standard while loop
07:42 - And We Begin by being logged in
07:45 - well we never ask for any of this we
07:47 - never enter the while loop
07:48 - while not logged in do all of this but
07:51 - since we are logged in we don't do any
07:53 - of it alright everybody so that's while
07:55 - Loops repeat some code while some
07:58 - condition is true while some condition
08:01 - remains true execute this code Forever
08:03 - Until it's no longer true and well
08:06 - everybody that's while Loops in
08:08 - JavaScript

Cleaned transcript:

hey what's going on everybody so today I'm going to explain why Loops in JavaScript a while loop will repeat some code while some condition is true take this program for example we have a variable username if our username is equal to an empty string then we will console.log you didn't enter your name else console.log hello username if I run this program then check within our console well we didn't enter our username now if I were to change this program to a while loop while our username is equal to an empty string repeat this line of code Forever Until this condition is no longer true then when we escape the while loop we can print the message hello username this is what happens when I run the program we just print this line of code Forever and my computer is probably going to crash I can't seem to stop help okay I think it broke a while loop will continue some code infinitely while this condition is true if it no longer is true then we can escape the while loop if I were to set my username to be something other than an empty string well we never actually enter the while loop we skip over it entirely and go straight to console.log at the end so what we do first is check the condition if it's true then we get sucked into the while loop and execute this forever you usually want some sort of way to exit the while loop while you're in it otherwise you get what is known as an infinite Loop so let's rewrite this program let username equal an empty string while our username is strictly equal to an empty string let's ask the user to enter in their name username equals I'll use a window prompt enter your name okay let's try this again enter your name I'll press ok we can't seem to close this window until we type in something you can see I'm clicking on okay nothing's happening I will type in my name press ok then our console displays hello whatever your name is so that's a benefit of a while loop repeat some code until this condition is no longer true since we populated our username our username was not equal to an empty string we filled username with some characters what if I instead press cancel hello null null means no value username will equal null if I press the cancel button let's append this condition or username is strictly equal to null now I shouldn't be able to continue until I type in something and I can't escape if I hit cancel while one of these conditions is true execute this code Forever let's type in our name again and now we can escape the while loop there's also another variation of a while loop it's known as a do while loop how that works is that you can move while and the condition to the end so we'll place it here then precede the set of curly braces with do so we will always execute this code at least once then check the condition at the end using a do while loop I don't necessarily need to set the username I can set it to be undefined if I set my username to be undefined then use a standard while loop we never execute the while loop our username equals undefined it doesn't equal an empty string or the value null so we skip over the while loop entirely so a do while loop is another variation of a while loop do the code first then check the condition at the end so there's a few different ways you can write the same program all right let's go over another example we'll create three variables let logged in logged in will be false to begin with to log in we have to type in a matching username I will declare a username but not assign it and a password so let's create a while loop how do we escape the while loop let's say while not I'll use the notch logical operator while not logged in once we're logged in once this is true we escape the while loop we will ask a user for their username username equals window dot prompt enter your username let's ask for a password as well password equals enter your password I'll add an if statement within the while loop we'll check to see if our username is strictly equal to then make up some username my user name and if our password is strictly equal to some password like my password if our username and password both match these values then we can log in so logged in will equal true then I'll console.log a confirmation message you are logged in else let's console.log another message invalid credentials please try again all right let's see if this works enter your username I am just going to press ok enter your password I'll type in something legitimate so I'll type in my password uh invalid credentials please try again that's because I didn't type in a username I'll type in my username be sure it matches my username my password and we are now logged in so since we set logged in to be true when we go back to the beginning of our while loop this condition is no longer true while not logged in but since we're logged in we escape the while loop now another variation of this is the do while loop let's cut the condition along with while added to the end then add do to the beginning so we'll check to see if we're logged in at the end it pretty much does the same thing but with one exception in this program how this is different is that I can set logged in to be true to begin with we'll still receive that prompt I'll type in my username type in my password we are currently logged in so we do not continue the while loop if we used a standard while loop And We Begin by being logged in well we never ask for any of this we never enter the while loop while not logged in do all of this but since we are logged in we don't do any of it alright everybody so that's while Loops repeat some code while some condition is true while some condition remains true execute this code Forever Until it's no longer true and well everybody that's while Loops in JavaScript
