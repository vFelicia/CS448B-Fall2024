With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro here hope you're doing well and in
00:03 - this video i'm going to teach you guys
00:04 - how we can create some
00:05 - simple 2d animations in python so sit
00:08 - back relax and enjoy the show
00:12 - if you find this video helpful please
00:14 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:20 - all right my fellow bros in this video
00:22 - we're going to be animating an
00:24 - image on a canvas we're only going to be
00:26 - moving
00:27 - this image up down left and right feel
00:30 - free to download an image that you want
00:31 - to use i'm just going to use
00:32 - this ufo emoji that i found so we'll
00:35 - need
00:36 - two imports at the top from tk enter
00:39 - import everything that's what we usually
00:40 - have
00:41 - we'll also need to import time as well
00:44 - we'll need a window window equals tk
00:47 - followed by window.main loop
00:49 - we'll need a canvas i'm going to call
00:51 - the canvas canvas
00:52 - canvas equals canvas we're adding the
00:55 - canvas to the window
00:57 - i'm going to create something that's
00:58 - called a constant
01:00 - we're going to create a constant for the
01:02 - width and the height
01:03 - of our canvas so a constant is a
01:06 - variable or value that you don't plan on
01:08 - changing later at all
01:10 - and a common naming convention for a
01:12 - constant is that the name of the
01:13 - constant
01:14 - is all uppercase so i want the width
01:17 - and the height of this canvas to be
01:19 - constants so for the width
01:21 - this is going to be all uppercase it's
01:24 - not necessary to make it all uppercase
01:26 - but that's a common naming convention
01:28 - for the width i'm going to set this to
01:29 - 500
01:30 - and the height set to 500 as well
01:33 - and for the width of this canvas i'm
01:35 - going to set the width
01:37 - to equal my constant which is 500
01:40 - and the height to my constant height
01:44 - so the reason that i'm making constants
01:46 - is that we'll be reusing these
01:48 - a lot later in this program so we might
01:50 - as well just declare them now and get it
01:52 - over with
01:53 - so for the canvas we're adding this to
01:55 - the window we're setting the width
01:57 - to our constant of width and the height
01:59 - to our constant of height
02:01 - and we need to follow this by packing
02:02 - this or place
02:04 - canvas dot pack pack to make it simple
02:07 - so we should
02:08 - have a canvas on our window
02:11 - now if you have an image that you want
02:12 - to use we're going to animate it
02:14 - i need to create a photo image from this
02:16 - file it's a png file it's called
02:19 - ufo but yours is probably going to be
02:21 - named something different so don't copy
02:23 - me exactly
02:24 - i need to create a photo image from this
02:26 - i'm going to call this
02:27 - photo underscore image but name it
02:30 - whatever you want
02:31 - this equals photo image and i need to
02:35 - list the file path or the file name
02:37 - since this file is within my project
02:40 - folder i only have to list the file name
02:42 - and for me this is called ufo.png
02:47 - our next step is that we're going to
02:48 - take our photo image and add this photo
02:51 - image to the canvas
02:52 - and we'll also give this image a unique
02:54 - name i'm going to call this my
02:57 - image equals we're going to use the
03:00 - canvases
03:01 - create image function so canvas dot
03:04 - create image there's a few arguments
03:07 - that we need to pass
03:08 - in where we want this image to appear we
03:11 - need a set of coordinates
03:12 - if we want this to appear in the top
03:14 - left corner that is where x is zero
03:16 - and y is 0. for the image we're going to
03:20 - set this equal to
03:21 - our photo image whatever you named this
03:24 - and lastly we should anchor this i'm
03:27 - going to anchor this in the northwest
03:29 - corner to keep it simple and we should
03:31 - have our image
03:33 - on our canvas in the top left corner and
03:35 - here is my ufo that's being piloted by a
03:38 - green alien that's waving to me
03:40 - aliens are usually not that friendly
03:42 - unless they're abducting you our next
03:43 - step is to create a
03:44 - while loop so we'll say while true this
03:47 - will continue forever until we close out
03:49 - of the program
03:50 - if you're looking at the code for a game
03:51 - this might say instead
03:53 - while running running will be a boolean
03:57 - variable that contains either true or
03:59 - false so if this is true while the game
04:01 - is running
04:02 - they're going to continue moving all of
04:04 - the characters on the screen
04:05 - and then if somebody pauses the game or
04:07 - closes out of the game
04:08 - then they'll flip this running variable
04:10 - to false but to keep things simple we'll
04:13 - just say while true but
04:14 - that's something that you might see what
04:16 - we'll want to do is get the coordinates
04:18 - of our image
04:19 - within the canvas and this will return a
04:22 - list of coordinates
04:23 - so let's create a list called
04:25 - coordinates so
04:27 - coordinates equals canvas
04:31 - and we can use the chords
04:34 - function to get the coordinates i guess
04:36 - that's short for coordinates
04:38 - and we're getting the coordinates of my
04:40 - image so we'll pass this into
04:42 - this function and then let's print this
04:45 - just to see what this returns we'll
04:47 - print coordinates
04:51 - okay now to update the window after each
04:53 - cycle
04:54 - of this while loop we can use the update
04:56 - function of our window
04:58 - so window.update will also have this
05:01 - thread sleep for let's say 0.01 seconds
05:04 - so time dot sleep 0.01 so
05:10 - here's a quick rundown of what we have
05:11 - going on so far within this while loop
05:13 - we're going to first get the coordinates
05:15 - of where our image is located
05:18 - we'll print the coordinates to the
05:20 - console window this part isn't required
05:23 - but it's going to help
05:24 - us for learning purposes we'll update
05:26 - this window for any changes
05:28 - and then our thread which is in charge
05:31 - of running the program
05:32 - is going to sleep for i believe that's a
05:35 - hundredth of a second
05:37 - so when we run this our image is staying
05:40 - in place
05:41 - and we know that our while loop is
05:42 - running because it's continuously
05:44 - printing the coordinates
05:45 - the first number is the x position
05:49 - the second number is the y position and
05:52 - now we're going to give our image a
05:53 - speed
05:54 - or velocity i like to call it velocity
05:57 - and in fact i'm going to give this image
05:59 - two velocities one for how fast this
06:01 - image is moving on the x-axis
06:03 - and another for how fast it's moving on
06:05 - the y axis
06:07 - so i'm going to create two variables one
06:09 - called x velocity
06:11 - and i'm going to set this equal to one
06:13 - and y velocity
06:16 - and i'll set this to one as well okay
06:20 - so what we need to do now is update
06:23 - the position of our image so let's do
06:26 - that before we update
06:27 - our window so i'm going to type in the
06:29 - name of the canvas
06:30 - and use the move function this move
06:33 - function takes
06:34 - three arguments what you want to move i
06:37 - want to move
06:37 - my image my ufo and how far i want to
06:41 - move this image on
06:43 - each axis each coordinate so what i want
06:46 - to do
06:46 - is update the x velocity the
06:50 - x position of my image so i'm going to
06:52 - pass
06:53 - in my x velocity variable
06:57 - and then y we'll just keep the same for
06:58 - now so we'll just say zero
07:00 - so after each iteration of this while
07:02 - loop my ufo
07:04 - is going to move one pixel to the right
07:06 - and it's just going to go off into the
07:07 - void forever
07:09 - and now if we replaced x velocity with
07:12 - zero and for y we set this to our y
07:15 - velocity this image is now going to
07:18 - travel
07:19 - down and it will continue into the void
07:21 - forever
07:23 - and then if we combine both of these
07:24 - together
07:27 - we're going to move diagonally down and
07:30 - to the right
07:31 - so what if we want this image to bounce
07:34 - off the walls we're going to add some if
07:35 - statements we're going to begin by just
07:37 - having this image bounce off the left
07:39 - and right walls
07:41 - for now let's set y velocity to zero so
07:44 - that this image is only moving
07:45 - left and right so before we move this
07:49 - image we'll add an if statement we're
07:50 - going to check to see
07:52 - if the x position of our image
07:55 - is either greater than the width of the
07:57 - canvas
07:58 - or if it's less than zero so we take
08:01 - our coordinates and we're going to get
08:03 - the first element from this list
08:05 - so that is zero that is x the x value
08:09 - if coordinates at element zero is
08:11 - greater than
08:12 - or equal to the width of this window and
08:15 - this is a constant
08:18 - so we can just place that here if
08:20 - coordinates
08:21 - well x within our coordinates is greater
08:23 - than or equal to width
08:26 - or coordinates at
08:29 - index 0 is less than 0
08:32 - then we want to reverse the direction or
08:35 - flip the velocity
08:37 - so we want to change our x velocity and
08:39 - make this a
08:40 - negative number one easy way to do that
08:43 - is that we can take
08:44 - x velocity equals x velocity
08:47 - times negative one or another way of
08:50 - writing this
08:50 - is just to say x velocity minus negative
08:54 - velocity now what ends up happening is
08:57 - that
08:58 - when this image reaches the right border
09:00 - it's going to bounce back
09:02 - however it only bounces back after it
09:04 - reaches
09:05 - the top left corner of the image we need
09:07 - to factor in
09:08 - the width of the image as well so we're
09:11 - going to create
09:12 - two new variables and let's do this
09:13 - right before the while loop
09:15 - we'll want to determine what the height
09:17 - and the width are for
09:18 - our photo image that we have so this is
09:20 - what we're going to write
09:22 - let's call these two values image
09:24 - underscore width
09:26 - and image underscore height
09:31 - so we need to determine what the width
09:33 - and the height is for our photo image
09:35 - and there is a function to do that type
09:38 - in the name of the photo image
09:40 - dot and there is a width function
09:44 - and the same thing for height
09:47 - photo image dot height
09:50 - and then we can reuse these so i'm just
09:53 - going to add
09:54 - one line to the sif statement if
09:57 - the x position of our image is greater
10:00 - uh greater than
10:01 - or equal to the width of our window
10:04 - minus the width of our image and i'm
10:07 - just going to put these within
10:08 - parentheses just to keep these more
10:10 - organized
10:11 - and what ends up happening now is that
10:14 - when
10:16 - the right portion of our image hits the
10:19 - right wall it's going to bounce off
10:21 - and let's do the same thing for our y
10:23 - velocity
10:26 - we're going to replace coordinates at
10:29 - index 0 with 1 and change that here as
10:32 - well
10:33 - replace with with height
10:37 - and this is image underscore height
10:40 - and we're going to change the y velocity
10:43 - this time
10:48 - and when we move this image let's also
10:50 - add the
10:51 - y velocity
10:54 - and now our image is just going to
10:57 - bounce off the walls forever
10:58 - but it's kind of predictable since we
11:00 - set x and y
11:02 - to equal one now let's change the speeds
11:04 - to kind of spice things up
11:06 - let's say for the x velocity this is
11:08 - three and y velocity this is now two
11:10 - this is going to go in a completely
11:12 - different direction
11:15 - so you can mess with the speeds however
11:16 - you want so guys how about we add a
11:19 - background image to this
11:20 - well because we can i'm going to reuse
11:23 - this image of space from my java video
11:25 - on this same topic
11:27 - i need to create a photo image from this
11:29 - and i'm going to copy what we did
11:31 - for our normal image that we were moving
11:33 - and animating
11:35 - so this is called space.png well that's
11:38 - the name of my file
11:40 - and i'm going to give this image a
11:41 - different name maybe i'll call this
11:44 - background underscore photo
11:47 - and then i'm going to add this photo to
11:49 - the canvas
11:51 - and i'm going to call this a different
11:53 - name
11:55 - i'll just call this background all right
11:58 - so
11:58 - our window should have a background now
12:02 - and then our image
12:03 - moves on top of the background so make
12:05 - sure you add and create the background
12:07 - before you add any other images
12:09 - otherwise the
12:10 - background might overlap your image
12:12 - alright so that's the basics of some
12:15 - simple animations
12:16 - in python if you want to copy all this
12:18 - code i'll post all of this in the
12:19 - comments down below
12:20 - but yeah that's the basics of some
12:22 - animations in python
12:25 - hey you yeah i'm talking to you if you
12:28 - learn something new
12:29 - then you can help me help you in three
12:32 - easy steps
12:33 - by smashing that like button drop a
12:35 - comment down below
12:37 - and subscribe if you'd like to become a
12:38 - fellow bro
12:54 - [Music]
12:59 - you

Cleaned transcript:

hey what's going on everybody it's your bro here hope you're doing well and in this video i'm going to teach you guys how we can create some simple 2d animations in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running all right my fellow bros in this video we're going to be animating an image on a canvas we're only going to be moving this image up down left and right feel free to download an image that you want to use i'm just going to use this ufo emoji that i found so we'll need two imports at the top from tk enter import everything that's what we usually have we'll also need to import time as well we'll need a window window equals tk followed by window.main loop we'll need a canvas i'm going to call the canvas canvas canvas equals canvas we're adding the canvas to the window i'm going to create something that's called a constant we're going to create a constant for the width and the height of our canvas so a constant is a variable or value that you don't plan on changing later at all and a common naming convention for a constant is that the name of the constant is all uppercase so i want the width and the height of this canvas to be constants so for the width this is going to be all uppercase it's not necessary to make it all uppercase but that's a common naming convention for the width i'm going to set this to 500 and the height set to 500 as well and for the width of this canvas i'm going to set the width to equal my constant which is 500 and the height to my constant height so the reason that i'm making constants is that we'll be reusing these a lot later in this program so we might as well just declare them now and get it over with so for the canvas we're adding this to the window we're setting the width to our constant of width and the height to our constant of height and we need to follow this by packing this or place canvas dot pack pack to make it simple so we should have a canvas on our window now if you have an image that you want to use we're going to animate it i need to create a photo image from this file it's a png file it's called ufo but yours is probably going to be named something different so don't copy me exactly i need to create a photo image from this i'm going to call this photo underscore image but name it whatever you want this equals photo image and i need to list the file path or the file name since this file is within my project folder i only have to list the file name and for me this is called ufo.png our next step is that we're going to take our photo image and add this photo image to the canvas and we'll also give this image a unique name i'm going to call this my image equals we're going to use the canvases create image function so canvas dot create image there's a few arguments that we need to pass in where we want this image to appear we need a set of coordinates if we want this to appear in the top left corner that is where x is zero and y is 0. for the image we're going to set this equal to our photo image whatever you named this and lastly we should anchor this i'm going to anchor this in the northwest corner to keep it simple and we should have our image on our canvas in the top left corner and here is my ufo that's being piloted by a green alien that's waving to me aliens are usually not that friendly unless they're abducting you our next step is to create a while loop so we'll say while true this will continue forever until we close out of the program if you're looking at the code for a game this might say instead while running running will be a boolean variable that contains either true or false so if this is true while the game is running they're going to continue moving all of the characters on the screen and then if somebody pauses the game or closes out of the game then they'll flip this running variable to false but to keep things simple we'll just say while true but that's something that you might see what we'll want to do is get the coordinates of our image within the canvas and this will return a list of coordinates so let's create a list called coordinates so coordinates equals canvas and we can use the chords function to get the coordinates i guess that's short for coordinates and we're getting the coordinates of my image so we'll pass this into this function and then let's print this just to see what this returns we'll print coordinates okay now to update the window after each cycle of this while loop we can use the update function of our window so window.update will also have this thread sleep for let's say 0.01 seconds so time dot sleep 0.01 so here's a quick rundown of what we have going on so far within this while loop we're going to first get the coordinates of where our image is located we'll print the coordinates to the console window this part isn't required but it's going to help us for learning purposes we'll update this window for any changes and then our thread which is in charge of running the program is going to sleep for i believe that's a hundredth of a second so when we run this our image is staying in place and we know that our while loop is running because it's continuously printing the coordinates the first number is the x position the second number is the y position and now we're going to give our image a speed or velocity i like to call it velocity and in fact i'm going to give this image two velocities one for how fast this image is moving on the xaxis and another for how fast it's moving on the y axis so i'm going to create two variables one called x velocity and i'm going to set this equal to one and y velocity and i'll set this to one as well okay so what we need to do now is update the position of our image so let's do that before we update our window so i'm going to type in the name of the canvas and use the move function this move function takes three arguments what you want to move i want to move my image my ufo and how far i want to move this image on each axis each coordinate so what i want to do is update the x velocity the x position of my image so i'm going to pass in my x velocity variable and then y we'll just keep the same for now so we'll just say zero so after each iteration of this while loop my ufo is going to move one pixel to the right and it's just going to go off into the void forever and now if we replaced x velocity with zero and for y we set this to our y velocity this image is now going to travel down and it will continue into the void forever and then if we combine both of these together we're going to move diagonally down and to the right so what if we want this image to bounce off the walls we're going to add some if statements we're going to begin by just having this image bounce off the left and right walls for now let's set y velocity to zero so that this image is only moving left and right so before we move this image we'll add an if statement we're going to check to see if the x position of our image is either greater than the width of the canvas or if it's less than zero so we take our coordinates and we're going to get the first element from this list so that is zero that is x the x value if coordinates at element zero is greater than or equal to the width of this window and this is a constant so we can just place that here if coordinates well x within our coordinates is greater than or equal to width or coordinates at index 0 is less than 0 then we want to reverse the direction or flip the velocity so we want to change our x velocity and make this a negative number one easy way to do that is that we can take x velocity equals x velocity times negative one or another way of writing this is just to say x velocity minus negative velocity now what ends up happening is that when this image reaches the right border it's going to bounce back however it only bounces back after it reaches the top left corner of the image we need to factor in the width of the image as well so we're going to create two new variables and let's do this right before the while loop we'll want to determine what the height and the width are for our photo image that we have so this is what we're going to write let's call these two values image underscore width and image underscore height so we need to determine what the width and the height is for our photo image and there is a function to do that type in the name of the photo image dot and there is a width function and the same thing for height photo image dot height and then we can reuse these so i'm just going to add one line to the sif statement if the x position of our image is greater uh greater than or equal to the width of our window minus the width of our image and i'm just going to put these within parentheses just to keep these more organized and what ends up happening now is that when the right portion of our image hits the right wall it's going to bounce off and let's do the same thing for our y velocity we're going to replace coordinates at index 0 with 1 and change that here as well replace with with height and this is image underscore height and we're going to change the y velocity this time and when we move this image let's also add the y velocity and now our image is just going to bounce off the walls forever but it's kind of predictable since we set x and y to equal one now let's change the speeds to kind of spice things up let's say for the x velocity this is three and y velocity this is now two this is going to go in a completely different direction so you can mess with the speeds however you want so guys how about we add a background image to this well because we can i'm going to reuse this image of space from my java video on this same topic i need to create a photo image from this and i'm going to copy what we did for our normal image that we were moving and animating so this is called space.png well that's the name of my file and i'm going to give this image a different name maybe i'll call this background underscore photo and then i'm going to add this photo to the canvas and i'm going to call this a different name i'll just call this background all right so our window should have a background now and then our image moves on top of the background so make sure you add and create the background before you add any other images otherwise the background might overlap your image alright so that's the basics of some simple animations in python if you want to copy all this code i'll post all of this in the comments down below but yeah that's the basics of some animations in python hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
