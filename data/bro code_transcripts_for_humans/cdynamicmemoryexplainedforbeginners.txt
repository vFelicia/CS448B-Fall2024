With timestamps:

00:02 - hey everybody we finally made it to
00:03 - dynamic memory dynamic memory is memory
00:06 - that is allocated after the program is
00:09 - already compiled and running to allocate
00:11 - dynamic memory we use this new keyword
00:14 - it's an operator it allows us to
00:16 - allocate memory in the heap rather than
00:18 - the stack it's useful when we don't know
00:20 - how much memory we'll need it makes our
00:22 - programs more flexible especially when
00:24 - accepting user input because we have no
00:27 - idea what the user is going to type in
00:29 - here's an example we'll start with a
00:30 - basic integer variable but we'll
00:32 - allocate memory in the heap rather than
00:34 - the stack by using that new keyword i'll
00:36 - create a pointer
00:38 - int
00:39 - the reference operator p
00:42 - num
00:43 - now it's good practice when you declare
00:44 - a pointer but don't assign it right away
00:47 - to give it a value of null meaning no
00:49 - value to allocate memory in the heap
00:51 - rather than the stack i'll take my
00:53 - pointer set the sql to
00:56 - use the new operator then a data type
00:58 - i'll use up enough space in the heap for
01:01 - one integer the new operator will return
01:03 - an address we're storing that address
01:05 - within pnum because it's a pointer it's
01:08 - pointing to a memory location where
01:10 - we're going to store an integer later on
01:12 - in your program whenever you would like
01:13 - to store a value we can use the
01:15 - dereference operator our pointer then
01:18 - assign some value
01:20 - like 21 i don't know just for fun i'm
01:23 - going to display the address that's
01:25 - stored within the pointer
01:27 - address
01:30 - p
01:31 - num
01:33 - then i'll add a new line
01:36 - as well as the value
01:40 - value
01:41 - dereference operator p num
01:46 - our pointer is storing this address and
01:48 - at this address in the heap that address
01:50 - contains this value 21. now it's very
01:54 - good practice if not expected whenever
01:56 - you use the new operator you'll also
01:59 - want to use the delete operator when
02:01 - you're no longer using that memory space
02:03 - so at the end of this program or earlier
02:05 - if you choose
02:06 - we will delete our pointer
02:09 - delete p num
02:11 - we're freeing up the memory at this
02:13 - address if you don't you may cause a
02:15 - memory leak and it's best to avoid that
02:18 - whenever you use the new operator you
02:20 - probably should be using the delete
02:21 - operator someplace within your program
02:23 - here's another example we're going to
02:25 - dynamically create an array let's create
02:28 - an array of grades
02:30 - char
02:31 - then we'll need a pointer
02:33 - the reference operator p
02:35 - grades
02:37 - set this equal to null if we're not
02:39 - going to assign this pointer right away
02:41 - then to dynamically create an array we
02:44 - will take our pointer set the sql to
02:47 - new
02:48 - the data type char
02:50 - if this is an array we add a set of
02:52 - straight brackets within the straight
02:54 - brackets we will list a size if i have
02:56 - five grades to enter in i would type in
02:58 - five but if we already know the size of
03:00 - the array before we even run the program
03:02 - we might as well do that normally like
03:04 - create a normal array there's no point
03:05 - to allocating memory dynamically we
03:07 - would want to do that when we don't know
03:09 - what the size is going to be so i
03:11 - propose we ask for some user input
03:13 - let's say int size
03:17 - we'll create a prompt standard output
03:21 - how many grades to enter in
03:27 - standard input
03:29 - size
03:31 - will dynamically allocate enough memory
03:33 - in the heap depending on how many grades
03:35 - the user has to enter in
03:38 - i'll just create a for loop so that we
03:40 - will ask the user to enter in some
03:41 - grades
03:43 - and i equals zero i will continue this
03:46 - as long as i is less than size
03:48 - increment i by one
03:51 - standard output
03:54 - enter grade
03:56 - number
03:58 - i plus 1 because i will be 0 to begin
04:01 - with
04:02 - and i'm just going to add colon space
04:05 - afterwards
04:07 - standard
04:08 - input
04:10 - p
04:11 - grades that's our pointer now we can
04:14 - either add plus i
04:16 - or use those straight brackets at index
04:19 - of i either way
04:22 - let's display all of the grades
04:25 - and i equals zero i is less than size
04:30 - i plus plus
04:32 - standard output
04:34 - p
04:35 - grades at index of i i'll separate each
04:39 - with the space
04:40 - and remember if we no longer need this
04:42 - array we should delete it to prevent a
04:44 - memory leak
04:45 - if we have to delete an array we'll add
04:47 - a set of straight brackets after delete
04:50 - then our pointer
04:52 - p grades
04:55 - and let's try it
04:58 - how many grades to enter in
05:00 - so we don't know what the user is going
05:01 - to type
05:03 - let's say
05:04 - six grades
05:05 - enter grade one
05:07 - a b c d f a
05:11 - and here are the grades
05:13 - so that's why dynamic memory is useful
05:15 - it's memory that is allocated after the
05:18 - program is already compiled and running
05:20 - we use the new operator to allocate
05:22 - memory in the heap rather than the stack
05:25 - it's useful when we don't know how much
05:27 - memory we will need it makes our
05:29 - programs more flexible especially when
05:31 - accepting user input so that is an
05:34 - introduction to dynamic memory we'll
05:36 - have more practice with this in the
05:37 - future so don't worry if you would like
05:39 - a copy of the code that we worked on
05:41 - i'll post that in the comments section
05:42 - down below and well yeah that's an
05:44 - introduction to dynamic memory in c plus
05:47 - plus

Cleaned transcript:

hey everybody we finally made it to dynamic memory dynamic memory is memory that is allocated after the program is already compiled and running to allocate dynamic memory we use this new keyword it's an operator it allows us to allocate memory in the heap rather than the stack it's useful when we don't know how much memory we'll need it makes our programs more flexible especially when accepting user input because we have no idea what the user is going to type in here's an example we'll start with a basic integer variable but we'll allocate memory in the heap rather than the stack by using that new keyword i'll create a pointer int the reference operator p num now it's good practice when you declare a pointer but don't assign it right away to give it a value of null meaning no value to allocate memory in the heap rather than the stack i'll take my pointer set the sql to use the new operator then a data type i'll use up enough space in the heap for one integer the new operator will return an address we're storing that address within pnum because it's a pointer it's pointing to a memory location where we're going to store an integer later on in your program whenever you would like to store a value we can use the dereference operator our pointer then assign some value like 21 i don't know just for fun i'm going to display the address that's stored within the pointer address p num then i'll add a new line as well as the value value dereference operator p num our pointer is storing this address and at this address in the heap that address contains this value 21. now it's very good practice if not expected whenever you use the new operator you'll also want to use the delete operator when you're no longer using that memory space so at the end of this program or earlier if you choose we will delete our pointer delete p num we're freeing up the memory at this address if you don't you may cause a memory leak and it's best to avoid that whenever you use the new operator you probably should be using the delete operator someplace within your program here's another example we're going to dynamically create an array let's create an array of grades char then we'll need a pointer the reference operator p grades set this equal to null if we're not going to assign this pointer right away then to dynamically create an array we will take our pointer set the sql to new the data type char if this is an array we add a set of straight brackets within the straight brackets we will list a size if i have five grades to enter in i would type in five but if we already know the size of the array before we even run the program we might as well do that normally like create a normal array there's no point to allocating memory dynamically we would want to do that when we don't know what the size is going to be so i propose we ask for some user input let's say int size we'll create a prompt standard output how many grades to enter in standard input size will dynamically allocate enough memory in the heap depending on how many grades the user has to enter in i'll just create a for loop so that we will ask the user to enter in some grades and i equals zero i will continue this as long as i is less than size increment i by one standard output enter grade number i plus 1 because i will be 0 to begin with and i'm just going to add colon space afterwards standard input p grades that's our pointer now we can either add plus i or use those straight brackets at index of i either way let's display all of the grades and i equals zero i is less than size i plus plus standard output p grades at index of i i'll separate each with the space and remember if we no longer need this array we should delete it to prevent a memory leak if we have to delete an array we'll add a set of straight brackets after delete then our pointer p grades and let's try it how many grades to enter in so we don't know what the user is going to type let's say six grades enter grade one a b c d f a and here are the grades so that's why dynamic memory is useful it's memory that is allocated after the program is already compiled and running we use the new operator to allocate memory in the heap rather than the stack it's useful when we don't know how much memory we will need it makes our programs more flexible especially when accepting user input so that is an introduction to dynamic memory we'll have more practice with this in the future so don't worry if you would like a copy of the code that we worked on i'll post that in the comments section down below and well yeah that's an introduction to dynamic memory in c plus plus
