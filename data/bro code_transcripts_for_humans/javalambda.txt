With timestamps:

00:00 - how's it going everybody it's you bro
00:01 - here hope you're doing well and in this
00:03 - video I'm going to teach you guys about
00:04 - Elan de expressions in Java and at the
00:07 - end of this video we're going to work on
00:09 - a project where we can use a lambda
00:11 - expression to have a button perform some
00:14 - sort of action like display a message
00:15 - and we only need to write a single line
00:18 - of code cool right
00:20 - let's get into it if you find this video
00:24 - helpful please remember to Like comment
00:26 - and subscribe
00:27 - your support will help keep this channel
00:29 - running hey everybody we're gonna be
00:32 - discussing lambda expressions and when I
00:34 - say lambda I think of lambo short for
00:37 - Lamborghini for some reason but anyways
00:39 - a lambda expression is a feature for
00:41 - Java 8 and above it's also known as an
00:44 - anonymous method and basically it's a
00:47 - shorter way to write anonymous classes
00:49 - with only one method so in order for us
00:52 - to use a of lambda expression they need
00:55 - to use a functional interface or a
00:57 - predefined functional interface which
01:00 - are basically interfaces that contain
01:03 - only one abstract method and a few
01:05 - examples would be action listeners which
01:08 - we have a little bit of experience with
01:09 - runnable we haven't discussed this yet
01:12 - or our own user-defined functional
01:14 - interface so a lambda expression can be
01:17 - used in any place where a functional
01:20 - interface would normally be required and
01:22 - it has its own syntax we pass in some
01:24 - arguments we use the lambda operator and
01:27 - then we can perform some statements or
01:29 - some block of code so we're going to
01:31 - begin by creating our own user-defined
01:33 - functional interface that won't really
01:36 - do much and then for our second example
01:38 - we're going to apply the same logic to
01:40 - an action listener and then you'll
01:42 - really understand to see why Lomb do
01:44 - expressions are fairly useful so let's
01:46 - begin by creating our own user-defined
01:49 - functional interface so within your
01:51 - project folder we're going to go to file
01:53 - new and then interface not class
01:56 - interface and then let's call this my
02:00 - interface and click finish
02:02 - so now what we have is an interface
02:05 - called my interface but we're going to
02:07 - turn this into a functional interface so
02:10 - the first step and this is just
02:11 - considered good practice before this
02:13 - duck
02:14 - duration of this interface we're going
02:15 - to add a note that says at functional
02:19 - interface and you might have to watch
02:22 - the capitalization here and you can see
02:24 - now that it's yelling at us this is
02:26 - underlined red and it says my interface
02:29 - is not a functional interface so that's
02:31 - what we're gonna have to do so
02:33 - functional interfaces contain only one
02:37 - abstract method so that's what we're
02:39 - going to add next so let's create a
02:41 - method that just displays a message
02:44 - something simple like that so let's make
02:46 - this public void and won't return
02:48 - anything and let's call this method just
02:51 - message and then add the parameters and
02:54 - we'll just have no parameter set up so
02:56 - we now have only one abstract method and
03:00 - this is no longer yelling at us because
03:02 - we added that method in just now so we
03:05 - now have a functional interface and now
03:08 - we can use a lambda expression so let's
03:11 - create an instance of my interface and
03:13 - this is just going to be similar to
03:15 - creating an instance of a class like an
03:18 - object so we type in the name of the
03:20 - interface my interface and let's call
03:23 - this instance my interface again but
03:26 - with a lowercase M so normally with
03:29 - creating and anonymous inner class we
03:32 - would normally type in something like
03:33 - equals new my interface then add a set
03:38 - of parentheses and then we add a code
03:40 - block afterwards right and then we could
03:42 - have this method within here now right
03:45 - so normally we would type in like public
03:48 - void message and then we would actually
03:52 - like do something right so we don't
03:55 - actually have to do that we can use a
03:57 - lambda expression if we want to use this
03:59 - message method so we're going to get rid
04:02 - of all this and then what we're going to
04:07 - type here is equals and then we're going
04:11 - to follow this formula here we're going
04:13 - to list the arguments that we want to
04:15 - receive and we actually don't need to
04:18 - receive any arguments because these
04:20 - parameters are blank so we can just add
04:22 - in a blank set of parentheses and then
04:24 - use the lambda operator which is the
04:26 - arrow
04:27 - and then we can perform some sort of
04:30 - function or method so let's just display
04:32 - like hello world there's something lame
04:34 - like that so hello actually I'll keep it
04:38 - in misspelt like that world alright and
04:41 - then if we were to call this function
04:45 - here it would perform this action and
04:48 - let's try it so we'll list the instance
04:53 - of the interface my interface dot and
04:55 - we'll use the message method that we
05:00 - made and let's run this and it says
05:03 - hello world so now if you want to
05:07 - execute more than just one line of code
05:09 - for your lambda expression you're going
05:10 - to surround this portion with a set of
05:13 - curly braces so let's do that now so
05:16 - after the lambda operator we're just
05:19 - going to enclose this within a set of
05:20 - curly braces and then maybe let's print
05:24 - a second line such as it is a nice day
05:32 - no and let's run this again so with
05:36 - lambda expressions you can perform more
05:39 - than just one line of code so now let's
05:41 - take this a step further we can actually
05:43 - pass in some arguments let's pass in a
05:46 - name so let's create a string variable
05:49 - called name and let's set this equal to
05:52 - whatever your name is for me I'll just
05:54 - type in bro all right and then we're
05:57 - going to change the method within our
06:00 - functional interface and we're going to
06:02 - set up one parameter to begin with so
06:04 - let's set up a string and let's just
06:08 - name it name then within this method
06:12 - call we need to pass in an argument so
06:14 - we're just going to pass in whatever we
06:16 - want it has to be a string so let's just
06:18 - send in our name and now with this
06:21 - formula for a lambda expression anything
06:24 - within parenthesis are the arguments
06:26 - that we want to send and so we need a
06:28 - name we can't reuse name again but let's
06:32 - call it something else like maybe X all
06:34 - right so X is going to be our name when
06:38 - we receive it because remember you can
06:39 - name things when they are received so
06:43 - let's place our name perhaps right here
06:48 - it is a nice day plus X per name and
06:53 - let's try this again hello world it is a
06:58 - nice day bro and let's pass in another
07:01 - argument so how about a character like a
07:06 - symbol so char symbol and I'm thinking
07:10 - maybe like an exclamation point or
07:13 - something so let's create a char value
07:17 - and let's call this symbol equals maybe
07:21 - a an exclamation point and then we need
07:24 - to set up the arguments that we're
07:26 - sending when we use the message method
07:28 - here so we're going to add comma and
07:31 - then symbol and then we need to set up
07:37 - the lambda expression so comma we can't
07:41 - just type in symbol because it's gonna
07:43 - yell at us you can see here that lambda
07:46 - expressions parameter symbol cannot read
07:48 - Eclair another local variable blah blah
07:49 - blah so let's just rename this as Y okay
07:53 - so you can see that it's no longer
07:56 - yelling at us and we can now use this Y
07:59 - variable that we receive so maybe I'll
08:01 - just add it here plus y so then when we
08:05 - run this it says hello world it is a
08:08 - nice day bro exclamation point our X
08:11 - variable which is name and our symbol
08:14 - variable which is y so let's create
08:18 - another instance of my interface and we
08:21 - can actually do something completely
08:22 - different by utilizing this abstract
08:26 - method message so let's create my
08:29 - interface and let's call this my
08:32 - interface to equals and we can follow
08:35 - the same procedure so we need to set up
08:38 - the arguments so with this abstract
08:41 - method this takes a name and a symbol a
08:44 - string and a character so we can set
08:48 - that up here and then use the lambda
08:53 - opera
08:53 - and then we can do something completely
08:55 - different like we could just display
08:58 - system dot out dot print line hello X
09:06 - plus y it doesn't necessarily have to be
09:09 - the same thing okay and then we're going
09:12 - to use my interface two's message
09:16 - function and let's run this and it says
09:19 - hello bro the string literal plus our
09:23 - variable X and our variable Y so you can
09:26 - see that's how functional interfaces are
09:28 - pretty useful since they're abstract you
09:30 - can kind of make these up on the go for
09:32 - each individual interface see both of
09:35 - these interfaces do something completely
09:37 - different so that's our first example
09:39 - for applying a lambda expression for a
09:41 - user-defined functional interface but
09:45 - this is even more useful if you apply
09:47 - Londe expressions to other predefined
09:49 - functional interfaces such as an action
09:52 - listener so what I'm thinking for a
09:54 - second example is that we're going to
09:56 - create a simple jframe with a single
09:59 - button and instead of the complicated
10:01 - process of creating an anonymous inner
10:03 - class for an action listener we're
10:05 - simply just going to use a lambda
10:07 - expression instead so what I'm going to
10:10 - do is maybe just turn all of this into a
10:12 - comment and don't worry if you lose this
10:15 - I will post all of this code and the
10:17 - comments down below and let's create a
10:19 - new class and we don't really need to
10:22 - use this my interface class anymore
10:24 - so going back to our main class so make
10:27 - sure you're within the same project
10:28 - folder go to file new class and let's
10:32 - call this my frame and this is going to
10:35 - extend jframe so extends J frame and
10:40 - then we'll need an import and we'll
10:43 - create a constructor for my frame and
10:46 - then before the constructor we're just
10:49 - going to create a simple button so J
10:52 - button and let's call this my button
10:56 - equals new J button and then let's add
11:01 - some text such as my
11:05 - button all right and then we'll need
11:08 - another import so make sure you have at
11:12 - least these two okay
11:13 - let's work on our frame so we can type
11:16 - in this dot set default close operation
11:21 - then within the parentheses jframe dot
11:25 - exit on close then for the second line
11:30 - let's set a size so this dot set size
11:35 - you can pick any size you want I usually
11:38 - pick four 20 by 4 20 then we need this
11:42 - dot set layout then I usually put null
11:47 - because I don't like layout managers and
11:49 - then lastly this dot set visible and set
11:56 - this to true so let's see what we have
11:58 - so far it should be just a simple jframe
12:00 - oh but we need to create an instance of
12:03 - this class though my bad so within your
12:06 - main class type in my frame and let's
12:09 - call this my frame equals new my frame
12:16 - okay here's our frame let's add a button
12:19 - so going back to my frame we're going to
12:23 - take my button and let's set the balance
12:28 - so set bounds I'll place this where
12:31 - maybe X is 100 y is 100 I'll make the
12:36 - width 100 and the height 100 I'm not too
12:38 - concerned about the aesthetics of this
12:40 - and then we just need to add the button
12:44 - to this frame so this dot add my button
12:50 - okay so it should be on the frame right
12:53 - now but it doesn't quite do anything
12:55 - quite yet all right
12:57 - actually let me extend this to 200 okay
13:01 - that's better
13:02 - so now with this button if we want this
13:04 - button to perform some sort of action we
13:07 - can utilize the action listener
13:09 - interface and we'll add that to this
13:10 - button so my button dot add action
13:15 - listener
13:16 - and do remember that lesson on anonymous
13:18 - inner classes well before with that what
13:21 - we typed in here was new action listener
13:25 - parentheses curly braces and then we had
13:29 - an anonymous inner class here we have
13:32 - this method action performed and then we
13:35 - had a print line such as you clicked a
13:39 - button alright so let's take a look at
13:44 - this action listener interface so with
13:48 - this interface this has one abstract
13:51 - method therefore we can actually place a
13:55 - lambda expression here instead of all of
13:57 - this complex code so we need to follow
14:00 - this formula we need to have arguments
14:03 - within a set of parenthesis the alum des
14:06 - operator and then whatever statements we
14:08 - want to execute within a block of code
14:11 - if there's more than one line we need
14:13 - these curly braces if there's just one
14:15 - line of code we don't need this so going
14:18 - back to my frame let's follow this
14:20 - formula here so we can actually get rid
14:22 - of most of this stuff so let's get rid
14:25 - of the name public void we can get rid
14:29 - of override here and we can get rid of
14:31 - the data type where we just have Eve so
14:34 - E is our arguments action event if then
14:38 - we need to use the lambda operator which
14:40 - is the arrow and then we have these
14:43 - within a set of curly braces since we
14:45 - have just one line of code here we don't
14:47 - necessarily need these so I'm just gonna
14:48 - get rid of these and we can get rid of
14:53 - these extra curly braces as well as well
14:56 - as everything within here and this
14:59 - semicolon okay and here is our lambda
15:02 - expression we just have he is an
15:05 - argument the lambda operator and then
15:07 - whatever code we want to perform and
15:08 - this would work just fine then and you
15:10 - can see that this is a lot less work
15:12 - than what we had before so let's run
15:14 - this and try it out so here's our button
15:16 - my button and when we click on it it
15:18 - says you clicked a button so now how
15:22 - about we add a second button and we'll
15:24 - use another lambda expression that will
15:26 - do something different it's kind of like
15:28 - what we did with the first exam
15:30 - where we created my interface to but
15:33 - this time let's create a second button
15:35 - instead so let's just copy what we have
15:38 - here for my button and change the second
15:40 - line to my button too and let's change
15:44 - it here as well so we'll have my button
15:45 - 1 and my button 2 we can copy all of
15:49 - this code here and simply just paste it
15:51 - but we'll change a few things will
15:53 - change my button to my button too and
15:55 - let's change with the Y position to
15:58 - maybe 200 so go from 100 to 200 and
16:02 - let's display a second message such as
16:04 - this is the second button and for the
16:10 - first button I changed it to this is the
16:12 - first button and then we just need to
16:14 - add this button to our frame so this dot
16:17 - add my button to let's run this now and
16:20 - what we get here is two buttons when you
16:23 - click the first button it says this is
16:26 - the first button and when you click the
16:27 - second button it says this is the second
16:30 - button so you can see that using a
16:32 - lambda expression is extremely useful
16:35 - for functional interfaces or predefined
16:37 - functional interfaces such as
16:39 - actionlistener where you simply just
16:42 - have to write one line of code basically
16:44 - the arguments the alarmed operator and
16:48 - then whatever code you want to perform
16:49 - so that's the basics of lambda
16:51 - expressions this video was meant to
16:53 - serve as more of an introduction to
16:55 - lambda expressions because there's still
16:57 - a lot more you can do but basically it's
17:00 - an anonymous method it's a shorter way
17:02 - to write anonymous classes that utilize
17:05 - a single method and you can use them
17:07 - with a functional interface that contain
17:09 - only one abstract method such as action
17:12 - listener or you can create your own
17:14 - user-defined functional interface so if
17:17 - you would like a copy of all this code
17:19 - I'll post this in the comments down
17:20 - below and well yeah that's how lambda
17:23 - expressions work in Java hey you yeah
17:27 - I'm talking to you if you learn
17:28 - something new then you can help me help
17:31 - you in 3 easy steps by smashing that
17:34 - like button drop a comment down below
17:36 - and subscribe if you'd like to become a
17:38 - fellow bro
17:44 - [Music]

Cleaned transcript:

how's it going everybody it's you bro here hope you're doing well and in this video I'm going to teach you guys about Elan de expressions in Java and at the end of this video we're going to work on a project where we can use a lambda expression to have a button perform some sort of action like display a message and we only need to write a single line of code cool right let's get into it if you find this video helpful please remember to Like comment and subscribe your support will help keep this channel running hey everybody we're gonna be discussing lambda expressions and when I say lambda I think of lambo short for Lamborghini for some reason but anyways a lambda expression is a feature for Java 8 and above it's also known as an anonymous method and basically it's a shorter way to write anonymous classes with only one method so in order for us to use a of lambda expression they need to use a functional interface or a predefined functional interface which are basically interfaces that contain only one abstract method and a few examples would be action listeners which we have a little bit of experience with runnable we haven't discussed this yet or our own userdefined functional interface so a lambda expression can be used in any place where a functional interface would normally be required and it has its own syntax we pass in some arguments we use the lambda operator and then we can perform some statements or some block of code so we're going to begin by creating our own userdefined functional interface that won't really do much and then for our second example we're going to apply the same logic to an action listener and then you'll really understand to see why Lomb do expressions are fairly useful so let's begin by creating our own userdefined functional interface so within your project folder we're going to go to file new and then interface not class interface and then let's call this my interface and click finish so now what we have is an interface called my interface but we're going to turn this into a functional interface so the first step and this is just considered good practice before this duck duration of this interface we're going to add a note that says at functional interface and you might have to watch the capitalization here and you can see now that it's yelling at us this is underlined red and it says my interface is not a functional interface so that's what we're gonna have to do so functional interfaces contain only one abstract method so that's what we're going to add next so let's create a method that just displays a message something simple like that so let's make this public void and won't return anything and let's call this method just message and then add the parameters and we'll just have no parameter set up so we now have only one abstract method and this is no longer yelling at us because we added that method in just now so we now have a functional interface and now we can use a lambda expression so let's create an instance of my interface and this is just going to be similar to creating an instance of a class like an object so we type in the name of the interface my interface and let's call this instance my interface again but with a lowercase M so normally with creating and anonymous inner class we would normally type in something like equals new my interface then add a set of parentheses and then we add a code block afterwards right and then we could have this method within here now right so normally we would type in like public void message and then we would actually like do something right so we don't actually have to do that we can use a lambda expression if we want to use this message method so we're going to get rid of all this and then what we're going to type here is equals and then we're going to follow this formula here we're going to list the arguments that we want to receive and we actually don't need to receive any arguments because these parameters are blank so we can just add in a blank set of parentheses and then use the lambda operator which is the arrow and then we can perform some sort of function or method so let's just display like hello world there's something lame like that so hello actually I'll keep it in misspelt like that world alright and then if we were to call this function here it would perform this action and let's try it so we'll list the instance of the interface my interface dot and we'll use the message method that we made and let's run this and it says hello world so now if you want to execute more than just one line of code for your lambda expression you're going to surround this portion with a set of curly braces so let's do that now so after the lambda operator we're just going to enclose this within a set of curly braces and then maybe let's print a second line such as it is a nice day no and let's run this again so with lambda expressions you can perform more than just one line of code so now let's take this a step further we can actually pass in some arguments let's pass in a name so let's create a string variable called name and let's set this equal to whatever your name is for me I'll just type in bro all right and then we're going to change the method within our functional interface and we're going to set up one parameter to begin with so let's set up a string and let's just name it name then within this method call we need to pass in an argument so we're just going to pass in whatever we want it has to be a string so let's just send in our name and now with this formula for a lambda expression anything within parenthesis are the arguments that we want to send and so we need a name we can't reuse name again but let's call it something else like maybe X all right so X is going to be our name when we receive it because remember you can name things when they are received so let's place our name perhaps right here it is a nice day plus X per name and let's try this again hello world it is a nice day bro and let's pass in another argument so how about a character like a symbol so char symbol and I'm thinking maybe like an exclamation point or something so let's create a char value and let's call this symbol equals maybe a an exclamation point and then we need to set up the arguments that we're sending when we use the message method here so we're going to add comma and then symbol and then we need to set up the lambda expression so comma we can't just type in symbol because it's gonna yell at us you can see here that lambda expressions parameter symbol cannot read Eclair another local variable blah blah blah so let's just rename this as Y okay so you can see that it's no longer yelling at us and we can now use this Y variable that we receive so maybe I'll just add it here plus y so then when we run this it says hello world it is a nice day bro exclamation point our X variable which is name and our symbol variable which is y so let's create another instance of my interface and we can actually do something completely different by utilizing this abstract method message so let's create my interface and let's call this my interface to equals and we can follow the same procedure so we need to set up the arguments so with this abstract method this takes a name and a symbol a string and a character so we can set that up here and then use the lambda opera and then we can do something completely different like we could just display system dot out dot print line hello X plus y it doesn't necessarily have to be the same thing okay and then we're going to use my interface two's message function and let's run this and it says hello bro the string literal plus our variable X and our variable Y so you can see that's how functional interfaces are pretty useful since they're abstract you can kind of make these up on the go for each individual interface see both of these interfaces do something completely different so that's our first example for applying a lambda expression for a userdefined functional interface but this is even more useful if you apply Londe expressions to other predefined functional interfaces such as an action listener so what I'm thinking for a second example is that we're going to create a simple jframe with a single button and instead of the complicated process of creating an anonymous inner class for an action listener we're simply just going to use a lambda expression instead so what I'm going to do is maybe just turn all of this into a comment and don't worry if you lose this I will post all of this code and the comments down below and let's create a new class and we don't really need to use this my interface class anymore so going back to our main class so make sure you're within the same project folder go to file new class and let's call this my frame and this is going to extend jframe so extends J frame and then we'll need an import and we'll create a constructor for my frame and then before the constructor we're just going to create a simple button so J button and let's call this my button equals new J button and then let's add some text such as my button all right and then we'll need another import so make sure you have at least these two okay let's work on our frame so we can type in this dot set default close operation then within the parentheses jframe dot exit on close then for the second line let's set a size so this dot set size you can pick any size you want I usually pick four 20 by 4 20 then we need this dot set layout then I usually put null because I don't like layout managers and then lastly this dot set visible and set this to true so let's see what we have so far it should be just a simple jframe oh but we need to create an instance of this class though my bad so within your main class type in my frame and let's call this my frame equals new my frame okay here's our frame let's add a button so going back to my frame we're going to take my button and let's set the balance so set bounds I'll place this where maybe X is 100 y is 100 I'll make the width 100 and the height 100 I'm not too concerned about the aesthetics of this and then we just need to add the button to this frame so this dot add my button okay so it should be on the frame right now but it doesn't quite do anything quite yet all right actually let me extend this to 200 okay that's better so now with this button if we want this button to perform some sort of action we can utilize the action listener interface and we'll add that to this button so my button dot add action listener and do remember that lesson on anonymous inner classes well before with that what we typed in here was new action listener parentheses curly braces and then we had an anonymous inner class here we have this method action performed and then we had a print line such as you clicked a button alright so let's take a look at this action listener interface so with this interface this has one abstract method therefore we can actually place a lambda expression here instead of all of this complex code so we need to follow this formula we need to have arguments within a set of parenthesis the alum des operator and then whatever statements we want to execute within a block of code if there's more than one line we need these curly braces if there's just one line of code we don't need this so going back to my frame let's follow this formula here so we can actually get rid of most of this stuff so let's get rid of the name public void we can get rid of override here and we can get rid of the data type where we just have Eve so E is our arguments action event if then we need to use the lambda operator which is the arrow and then we have these within a set of curly braces since we have just one line of code here we don't necessarily need these so I'm just gonna get rid of these and we can get rid of these extra curly braces as well as well as everything within here and this semicolon okay and here is our lambda expression we just have he is an argument the lambda operator and then whatever code we want to perform and this would work just fine then and you can see that this is a lot less work than what we had before so let's run this and try it out so here's our button my button and when we click on it it says you clicked a button so now how about we add a second button and we'll use another lambda expression that will do something different it's kind of like what we did with the first exam where we created my interface to but this time let's create a second button instead so let's just copy what we have here for my button and change the second line to my button too and let's change it here as well so we'll have my button 1 and my button 2 we can copy all of this code here and simply just paste it but we'll change a few things will change my button to my button too and let's change with the Y position to maybe 200 so go from 100 to 200 and let's display a second message such as this is the second button and for the first button I changed it to this is the first button and then we just need to add this button to our frame so this dot add my button to let's run this now and what we get here is two buttons when you click the first button it says this is the first button and when you click the second button it says this is the second button so you can see that using a lambda expression is extremely useful for functional interfaces or predefined functional interfaces such as actionlistener where you simply just have to write one line of code basically the arguments the alarmed operator and then whatever code you want to perform so that's the basics of lambda expressions this video was meant to serve as more of an introduction to lambda expressions because there's still a lot more you can do but basically it's an anonymous method it's a shorter way to write anonymous classes that utilize a single method and you can use them with a functional interface that contain only one abstract method such as action listener or you can create your own userdefined functional interface so if you would like a copy of all this code I'll post this in the comments down below and well yeah that's how lambda expressions work in Java hey you yeah I'm talking to you if you learn something new then you can help me help you in 3 easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro
