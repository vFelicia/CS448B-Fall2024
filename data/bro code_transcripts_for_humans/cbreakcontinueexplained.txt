With timestamps:

00:01 - hey everybody so in this video i'm going
00:03 - to explain the break and the continue
00:05 - keywords the break keyword will break
00:08 - out of a loop another place where you
00:09 - see this is a switch within a switch
00:11 - statement continue will skip the current
00:14 - iteration here's an example let's create
00:15 - a for loop that will count up to the
00:17 - number 20. i'll set i equal to b1
00:21 - i will continue this as long as i is
00:23 - less than or equal to 20 then increment
00:26 - i by one
00:28 - standard output i'll display whatever i
00:31 - is then i'll add a new line
00:34 - new line
00:36 - then let's take a look so we have the
00:38 - numbers 1 through 20. i would like to
00:41 - skip the number 13 because 13 is
00:43 - considered an unlucky number i know it's
00:45 - a weird example what i'll do is use an
00:47 - if statement within my for loop
00:50 - if
00:51 - i
00:51 - is equal to 13
00:54 - first we'll break then see what happens
00:56 - if we break where i equals 13
01:01 - then we have the numbers 1 through 12.
01:04 - once we hit 13 we break out of the loop
01:07 - we do not finish the rest of the
01:08 - iterations if we replace break with
01:11 - continue
01:13 - this is instead what happens
01:17 - we have the numbers 1
01:19 - through 20 but the number 13 isn't there
01:22 - so using the continue keyword we skip
01:25 - the current iteration so yeah that's the
01:28 - break and the continue keywords these
01:30 - keywords are available if you need them
01:32 - but where you'll use them it really
01:34 - depends but just so you know they exist
01:36 - and that is the break and the continue
01:38 - keywords in c plus

Cleaned transcript:

hey everybody so in this video i'm going to explain the break and the continue keywords the break keyword will break out of a loop another place where you see this is a switch within a switch statement continue will skip the current iteration here's an example let's create a for loop that will count up to the number 20. i'll set i equal to b1 i will continue this as long as i is less than or equal to 20 then increment i by one standard output i'll display whatever i is then i'll add a new line new line then let's take a look so we have the numbers 1 through 20. i would like to skip the number 13 because 13 is considered an unlucky number i know it's a weird example what i'll do is use an if statement within my for loop if i is equal to 13 first we'll break then see what happens if we break where i equals 13 then we have the numbers 1 through 12. once we hit 13 we break out of the loop we do not finish the rest of the iterations if we replace break with continue this is instead what happens we have the numbers 1 through 20 but the number 13 isn't there so using the continue keyword we skip the current iteration so yeah that's the break and the continue keywords these keywords are available if you need them but where you'll use them it really depends but just so you know they exist and that is the break and the continue keywords in c plus
