With timestamps:

00:00 - hey how's it going everybody it's you
00:01 - bro hope you're doing well and in this
00:02 - video i'm going to teach you guys how we
00:04 - can handle exceptions in java so
00:06 - sit back relax and enjoy the show
00:11 - make sure you like comment and subscribe
00:14 - one like equals one prayer for the
00:16 - youtube algorithm
00:18 - all right guys and gals let's talk about
00:20 - exceptions these are events that occur
00:22 - during the execution of a program that
00:24 - disrupt the normal flow
00:26 - of instructions think of these as
00:28 - unexpected events that occur that will
00:30 - stop your program
00:32 - like if you divide by zero that's
00:34 - referred to as an arithmetic exception
00:36 - and that will stop your program we would
00:38 - like some way to
00:40 - gracefully handle these exceptions and
00:42 - continue on
00:43 - with the set instructions and ignore
00:45 - that exception
00:46 - so let's say we would like to create a
00:48 - program where we divide two numbers and
00:50 - display the result
00:51 - so let's write a program like that so
00:54 - first let's create a scanner
00:55 - scanner scanner equals new scanner
00:58 - within the constructor we're going to
01:00 - say system
01:02 - dot in and we'll create a prompt
01:06 - to enter a number in let's say a whole
01:08 - number enter a
01:10 - pull number two divide
01:13 - let's store this within a variable
01:15 - called int
01:16 - x into x equals scanner dot
01:20 - next int
01:23 - and let's create a second variable
01:25 - called y we'll divide
01:27 - x by y enter a whole number to divide by
01:31 - and we'll store this within variable y
01:34 - and we'll say and z
01:37 - equals x divided by y and we will print
01:40 - the results to the console window
01:42 - system.out.printline let's say result
01:47 - plus z and that should be good okay
01:50 - let's intentionally divide a number by
01:53 - zero enter a whole number to divide
01:55 - five divided by zero boom exception
01:59 - now our console window states exception
02:01 - and thread main
02:02 - and this is the type of exception that
02:04 - we encountered we encountered an
02:06 - arithmetic exception
02:08 - because we divided a number by zero at
02:11 - line eighteen int z equals x divided by
02:14 - y
02:15 - so one way in which we can handle these
02:17 - exceptions and prevent our program from
02:19 - being interrupted
02:20 - is to surround any dangerous code within
02:23 - a try block
02:24 - so we type try outside of the dangerous
02:27 - code and surround all of the dangerous
02:28 - code within a set of curly braces
02:30 - and i'm just going to indent all of this
02:34 - so we're going to try all of this code
02:37 - if we encounter an exception
02:39 - we're going to perform whatever is
02:41 - within our catch block which we will
02:43 - follow this with
02:44 - catch parentheses and then a set of
02:46 - curly braces so we're going to list
02:48 - the type of exception we would like to
02:50 - catch within the parentheses of our
02:52 - catch block
02:53 - so let's attempt to catch an arithmetic
02:55 - exception
02:57 - arithmetic exception and then we'll call
03:00 - this exception
03:01 - e alright so if we
03:05 - encounter an arithmetic exception we're
03:07 - going to instead
03:08 - stop what we're doing within this try
03:10 - block and perform whatever is within
03:12 - our catch block so let's print a message
03:14 - instead
03:16 - you can't divide
03:20 - by zero idiot
03:24 - and let's try this again enter a whole
03:27 - number to divide
03:28 - five divided by zero you can't divide by
03:31 - zero
03:32 - idiot so you can see that our program
03:34 - was not interrupted because we caught
03:36 - the arithmetic exception
03:38 - that we encountered and we instead
03:40 - performed whatever code is within
03:42 - the catch block so here's another type
03:44 - of exception that we might run into
03:47 - what if somebody doesn't enter in a
03:48 - number let's say we enter in a whole
03:50 - number to divide like
03:52 - 5 and we decide to divide by the number
03:55 - pizza
03:56 - well now we encountered an input
03:58 - mismatch exception
04:00 - we can also catch that as well and we
04:02 - can do that within another catch block
04:04 - so this time we'll attempt to catch
04:07 - an input mismatch exception and i'm just
04:10 - going to copy this because i do not feel
04:12 - like typing it
04:13 - input mismatch exception e and
04:16 - let's print something please
04:20 - enter a number omfg
04:26 - and you might have to import something
04:28 - too apparently okay let's try this again
04:31 - enter a whole number to divide let's
04:33 - divide five
04:34 - by pizza again please enter a number
04:38 - omfg so there is a catch block that will
04:41 - catch all exceptions but it's kind of
04:43 - considered
04:44 - lazy to use by itself it's exception
04:48 - e and this will catch basically all
04:50 - exceptions but it's considered good
04:52 - practice
04:52 - to catch and handle individual
04:55 - exceptions
04:56 - and then you can add this in as a last
04:58 - resort if you forget
04:59 - a certain type of exception that you
05:01 - want to catch so
05:02 - a common thing that people will write
05:04 - when they use exception e
05:05 - is something went
05:08 - wrong but it's better to address and
05:11 - handle specific exceptions though
05:14 - so as a last resort we'll just add catch
05:16 - exception e
05:17 - at the very end in case there's anything
05:19 - that we do not anticipate
05:21 - there is one more type of block it's
05:23 - called a finally block
05:25 - a finally block will always execute
05:27 - whether or not we catch an exception
05:30 - so let's add that at the very end
05:32 - finally and then a set of curly braces
05:35 - so just to test this let's print a
05:37 - simple message such as
05:38 - this will always print and then i'll
05:41 - show you some uses later
05:43 - so let's take this seriously for once
05:45 - enter a whole number to divide
05:47 - 5 divided by 1 and we get the result
05:50 - and we still execute whatever is within
05:53 - the finally block
05:54 - now this time let's try and cause an
05:56 - exception enter a whole number two
05:57 - divide
05:58 - five divided by the number pizza we
06:01 - encountered and handled
06:03 - an exception and we still executed
06:05 - whatever is within
06:06 - the finale block now a good use of the
06:09 - finally block is to close any open
06:11 - scanners or files that might be open
06:14 - so let's type in the name of the scanner
06:16 - dot close
06:17 - but we'll need to move the scanner
06:19 - outside the try block because
06:21 - our finally block does not recognize it
06:25 - there we go all right so the finally
06:27 - block
06:28 - is a good thing to add to close any
06:30 - scanners or files that might be open
06:33 - that's all what an exception is it's an
06:35 - event that occurs during the execution
06:37 - of a program
06:38 - that disrupts the normal flow of
06:40 - instructions
06:41 - any code that is considered dangerous
06:43 - you can surround with a try block we can
06:46 - try this code
06:47 - if we encounter any exceptions we have
06:50 - catch blocks
06:51 - that can catch specific exceptions or
06:53 - basically all exceptions and handle them
06:56 - and then lastly you can add a finally
06:58 - block if there's any
06:59 - open scanners or files that you want to
07:01 - close or if there's anything else you
07:03 - want to do before
07:04 - you move on with the rest of the program
07:06 - so that's the basics of exceptions in
07:09 - java if you would like a copy of all
07:10 - this code i will post all of this in the
07:12 - comments down below
07:13 - but yeah that's an introduction to
07:15 - exceptions in java
07:18 - hey you yeah i'm talking to you if you
07:20 - learn something new
07:22 - then you can help me help you in three
07:25 - easy steps
07:26 - by smashing that like button drop a
07:28 - comment down below
07:29 - and subscribe if you'd like to become a
07:31 - fellow bro
07:46 - [Music]
07:52 - you

Cleaned transcript:

hey how's it going everybody it's you bro hope you're doing well and in this video i'm going to teach you guys how we can handle exceptions in java so sit back relax and enjoy the show make sure you like comment and subscribe one like equals one prayer for the youtube algorithm all right guys and gals let's talk about exceptions these are events that occur during the execution of a program that disrupt the normal flow of instructions think of these as unexpected events that occur that will stop your program like if you divide by zero that's referred to as an arithmetic exception and that will stop your program we would like some way to gracefully handle these exceptions and continue on with the set instructions and ignore that exception so let's say we would like to create a program where we divide two numbers and display the result so let's write a program like that so first let's create a scanner scanner scanner equals new scanner within the constructor we're going to say system dot in and we'll create a prompt to enter a number in let's say a whole number enter a pull number two divide let's store this within a variable called int x into x equals scanner dot next int and let's create a second variable called y we'll divide x by y enter a whole number to divide by and we'll store this within variable y and we'll say and z equals x divided by y and we will print the results to the console window system.out.printline let's say result plus z and that should be good okay let's intentionally divide a number by zero enter a whole number to divide five divided by zero boom exception now our console window states exception and thread main and this is the type of exception that we encountered we encountered an arithmetic exception because we divided a number by zero at line eighteen int z equals x divided by y so one way in which we can handle these exceptions and prevent our program from being interrupted is to surround any dangerous code within a try block so we type try outside of the dangerous code and surround all of the dangerous code within a set of curly braces and i'm just going to indent all of this so we're going to try all of this code if we encounter an exception we're going to perform whatever is within our catch block which we will follow this with catch parentheses and then a set of curly braces so we're going to list the type of exception we would like to catch within the parentheses of our catch block so let's attempt to catch an arithmetic exception arithmetic exception and then we'll call this exception e alright so if we encounter an arithmetic exception we're going to instead stop what we're doing within this try block and perform whatever is within our catch block so let's print a message instead you can't divide by zero idiot and let's try this again enter a whole number to divide five divided by zero you can't divide by zero idiot so you can see that our program was not interrupted because we caught the arithmetic exception that we encountered and we instead performed whatever code is within the catch block so here's another type of exception that we might run into what if somebody doesn't enter in a number let's say we enter in a whole number to divide like 5 and we decide to divide by the number pizza well now we encountered an input mismatch exception we can also catch that as well and we can do that within another catch block so this time we'll attempt to catch an input mismatch exception and i'm just going to copy this because i do not feel like typing it input mismatch exception e and let's print something please enter a number omfg and you might have to import something too apparently okay let's try this again enter a whole number to divide let's divide five by pizza again please enter a number omfg so there is a catch block that will catch all exceptions but it's kind of considered lazy to use by itself it's exception e and this will catch basically all exceptions but it's considered good practice to catch and handle individual exceptions and then you can add this in as a last resort if you forget a certain type of exception that you want to catch so a common thing that people will write when they use exception e is something went wrong but it's better to address and handle specific exceptions though so as a last resort we'll just add catch exception e at the very end in case there's anything that we do not anticipate there is one more type of block it's called a finally block a finally block will always execute whether or not we catch an exception so let's add that at the very end finally and then a set of curly braces so just to test this let's print a simple message such as this will always print and then i'll show you some uses later so let's take this seriously for once enter a whole number to divide 5 divided by 1 and we get the result and we still execute whatever is within the finally block now this time let's try and cause an exception enter a whole number two divide five divided by the number pizza we encountered and handled an exception and we still executed whatever is within the finale block now a good use of the finally block is to close any open scanners or files that might be open so let's type in the name of the scanner dot close but we'll need to move the scanner outside the try block because our finally block does not recognize it there we go all right so the finally block is a good thing to add to close any scanners or files that might be open that's all what an exception is it's an event that occurs during the execution of a program that disrupts the normal flow of instructions any code that is considered dangerous you can surround with a try block we can try this code if we encounter any exceptions we have catch blocks that can catch specific exceptions or basically all exceptions and handle them and then lastly you can add a finally block if there's any open scanners or files that you want to close or if there's anything else you want to do before you move on with the rest of the program so that's the basics of exceptions in java if you would like a copy of all this code i will post all of this in the comments down below but yeah that's an introduction to exceptions in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
