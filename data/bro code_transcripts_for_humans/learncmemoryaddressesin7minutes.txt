With timestamps:

00:02 - all right everybody so let's talk about
00:04 - memory memory is an array of bytes
00:07 - within ram and a memory block is a
00:10 - single unit in bytes within memory
00:14 - they're used to hold some value and a
00:17 - memory address is the address of where a
00:20 - memory block is located within ram i
00:23 - like to think of memory as a street with
00:26 - a bunch of different houses and each
00:28 - house is a memory block which can hold
00:31 - some value kind of like they're storing
00:33 - a person and a memory address is the
00:36 - house address on that street where that
00:39 - memory block is located so this would be
00:41 - a street address like one two three fake
00:44 - street so when we declare variable let's
00:46 - say we have char a when we declare a
00:49 - variable we are setting some amount of
00:51 - memory blocks aside to store some value
00:55 - so the memory block that this variable
00:57 - is using up has some memory address and
01:00 - if i assign this variable a value let's
01:03 - say maybe x well then if i was to go
01:05 - into my computer's memory and look for
01:08 - this address i would find this character
01:11 - so imagine we're walking down the street
01:13 - and we are looking for somebody's
01:15 - address so we're going house to house
01:16 - and we find a matching address if i were
01:19 - to open their front door i should
01:21 - probably knock first at least then i
01:23 - will find the character x so that's kind
01:26 - of an analogy i like to use when
01:28 - thinking about memory so let's declare a
01:30 - couple other characters we have char b
01:33 - i'll give this a value of y
01:36 - and char c
01:38 - and i'll give this a character of z okay
01:42 - so let's find the size of each of these
01:44 - characters so i'm going to use a printf
01:46 - statement i'm going to display an
01:48 - integer
01:50 - and the size of each of these characters
01:52 - is within bytes so i'm going to use the
01:55 - size of operator and pass in one of my
01:58 - characters so i'm going to pass in a
02:01 - and i'll do the same thing with b and c
02:06 - so the size of each of these characters
02:10 - is one byte and i think i'm just going
02:12 - to add a new line here
02:16 - much better okay now we can actually
02:18 - access the address of each of these
02:20 - variables so each of these variables is
02:24 - using one block of memory a single block
02:27 - of memory is a byte
02:29 - so within a printf statement i would
02:32 - like to display an address so the format
02:34 - specifier is p
02:37 - and i will use the address of operator
02:40 - then the name of one of my variables
02:42 - so i'll display the address of variables
02:44 - a b
02:46 - and c
02:48 - and then display each on a new line
02:51 - so here are the memory addresses for
02:54 - these three variables these addresses
02:56 - are in hexadecimal these are the street
02:59 - addresses of each of our memory blocks
03:01 - on our fictional street hey uh so this
03:04 - is bro from the future just a quick
03:06 - crash course on hexadecimal values with
03:09 - standard decimal values they use the
03:12 - numbers 0 through 9 but with hexadecimal
03:15 - you use the numbers 0 through 9 as well
03:19 - as a through f so that gives you a total
03:22 - of 16 different values for each digit so
03:26 - that's why there's a mix of numbers and
03:28 - letters
03:29 - so each of these variables uses one
03:32 - memory block they use one byte of memory
03:34 - so beginning with variable a
03:36 - this has this street address but if we
03:39 - go down to the next memory block you can
03:41 - see that there is just one change f goes
03:44 - down to e and then with variable c
03:47 - this address goes down by one so f e d
03:51 - these are contiguous memory blocks
03:53 - they're all next to each other but now
03:55 - if we switch to a different data type
03:57 - like a short we haven't used these in a
03:59 - long time
04:01 - well shorts use two bytes of memory
04:04 - as we can see here so these hexadecimal
04:06 - addresses are now going down by two e d
04:11 - c
04:12 - b a so each of these variables are using
04:16 - two memory blocks we need an even larger
04:19 - house even more memory blocks and they
04:22 - use up two memory addresses
04:24 - and then if i change these two integers
04:26 - well they're going to use up even more
04:28 - memory
04:29 - so integers use four bytes memory and
04:33 - these are the street addresses of these
04:35 - three variables
04:37 - and doubles use double the size of an
04:39 - integer
04:42 - doubles use eight bytes of memory and
04:45 - these street addresses are decrementing
04:47 - by eight if this was a fictional street
04:50 - with houses well doubles use up eight
04:52 - bytes of memory so think of these like
04:55 - mansions they're using up a lot of space
04:57 - now what happens with an array i'm going
04:59 - to declare char a
05:03 - and declare an array this will be an
05:05 - array of characters to begin with so
05:07 - let's say
05:08 - character array b and i'll give this a
05:10 - size of one
05:12 - so i'm going to print the size of a and
05:14 - the size of b
05:16 - as well as their memory addresses
05:18 - our single character a uses one byte and
05:21 - this is the street address of this
05:23 - variable and our array b
05:26 - also uses up one byte and this is the
05:29 - street address of where this array
05:31 - begins if i set the size of this array
05:33 - to two well then my array is going to
05:36 - use two bytes
05:38 - and now it has a different address to
05:41 - accommodate the increased size of the
05:42 - array and if i change this to three it
05:45 - now uses three bytes of memory and it
05:47 - has a new address and if i change the
05:50 - data type of the array we'll have to
05:52 - take that into consideration so a short
05:54 - uses two bytes memory and we need three
05:57 - elements so that's a total of six two
06:00 - times three is six and if i change this
06:03 - to int and int uses four bytes so four
06:06 - times three is twelve and a double
06:10 - is eight so eight times three is
06:12 - twenty-four so yeah that's kind of the
06:14 - basics of memory so memory is an array
06:17 - of bytes within ram think of it like a
06:20 - street and a street contains houses each
06:22 - house is a memory block that can hold
06:25 - some value think of each value as a
06:27 - person living in that house and in order
06:30 - to find a person we have to know their
06:32 - address like a street address c refers
06:35 - to these variables by their street
06:37 - address but that's difficult for us to
06:38 - understand so we just refer to this
06:40 - memory address as a variable name
06:43 - because that's easier for humans to work
06:44 - with so yeah that's some basics of
06:47 - memory and c and in the next video we're
06:49 - going to discuss pointers so if you
06:51 - would like a copy of my notes here i'll
06:53 - post them to the comment section down
06:55 - below and well yeah that's the basics of
06:57 - memory in c

Cleaned transcript:

all right everybody so let's talk about memory memory is an array of bytes within ram and a memory block is a single unit in bytes within memory they're used to hold some value and a memory address is the address of where a memory block is located within ram i like to think of memory as a street with a bunch of different houses and each house is a memory block which can hold some value kind of like they're storing a person and a memory address is the house address on that street where that memory block is located so this would be a street address like one two three fake street so when we declare variable let's say we have char a when we declare a variable we are setting some amount of memory blocks aside to store some value so the memory block that this variable is using up has some memory address and if i assign this variable a value let's say maybe x well then if i was to go into my computer's memory and look for this address i would find this character so imagine we're walking down the street and we are looking for somebody's address so we're going house to house and we find a matching address if i were to open their front door i should probably knock first at least then i will find the character x so that's kind of an analogy i like to use when thinking about memory so let's declare a couple other characters we have char b i'll give this a value of y and char c and i'll give this a character of z okay so let's find the size of each of these characters so i'm going to use a printf statement i'm going to display an integer and the size of each of these characters is within bytes so i'm going to use the size of operator and pass in one of my characters so i'm going to pass in a and i'll do the same thing with b and c so the size of each of these characters is one byte and i think i'm just going to add a new line here much better okay now we can actually access the address of each of these variables so each of these variables is using one block of memory a single block of memory is a byte so within a printf statement i would like to display an address so the format specifier is p and i will use the address of operator then the name of one of my variables so i'll display the address of variables a b and c and then display each on a new line so here are the memory addresses for these three variables these addresses are in hexadecimal these are the street addresses of each of our memory blocks on our fictional street hey uh so this is bro from the future just a quick crash course on hexadecimal values with standard decimal values they use the numbers 0 through 9 but with hexadecimal you use the numbers 0 through 9 as well as a through f so that gives you a total of 16 different values for each digit so that's why there's a mix of numbers and letters so each of these variables uses one memory block they use one byte of memory so beginning with variable a this has this street address but if we go down to the next memory block you can see that there is just one change f goes down to e and then with variable c this address goes down by one so f e d these are contiguous memory blocks they're all next to each other but now if we switch to a different data type like a short we haven't used these in a long time well shorts use two bytes of memory as we can see here so these hexadecimal addresses are now going down by two e d c b a so each of these variables are using two memory blocks we need an even larger house even more memory blocks and they use up two memory addresses and then if i change these two integers well they're going to use up even more memory so integers use four bytes memory and these are the street addresses of these three variables and doubles use double the size of an integer doubles use eight bytes of memory and these street addresses are decrementing by eight if this was a fictional street with houses well doubles use up eight bytes of memory so think of these like mansions they're using up a lot of space now what happens with an array i'm going to declare char a and declare an array this will be an array of characters to begin with so let's say character array b and i'll give this a size of one so i'm going to print the size of a and the size of b as well as their memory addresses our single character a uses one byte and this is the street address of this variable and our array b also uses up one byte and this is the street address of where this array begins if i set the size of this array to two well then my array is going to use two bytes and now it has a different address to accommodate the increased size of the array and if i change this to three it now uses three bytes of memory and it has a new address and if i change the data type of the array we'll have to take that into consideration so a short uses two bytes memory and we need three elements so that's a total of six two times three is six and if i change this to int and int uses four bytes so four times three is twelve and a double is eight so eight times three is twentyfour so yeah that's kind of the basics of memory so memory is an array of bytes within ram think of it like a street and a street contains houses each house is a memory block that can hold some value think of each value as a person living in that house and in order to find a person we have to know their address like a street address c refers to these variables by their street address but that's difficult for us to understand so we just refer to this memory address as a variable name because that's easier for humans to work with so yeah that's some basics of memory and c and in the next video we're going to discuss pointers so if you would like a copy of my notes here i'll post them to the comment section down below and well yeah that's the basics of memory in c
