With timestamps:

00:00 - hey what's going on everybody
00:03 - bro and well and in this video i'm going
00:05 - to explain
00:06 - the media view node in javafx so
00:09 - sit back relax and enjoy the show
00:14 - all right welcome back we're talking
00:15 - about media views today
00:17 - a media view is a viewport in which we
00:19 - can display
00:20 - a video or other media source so the
00:23 - media view node is found underneath
00:25 - controls
00:26 - just drag and drop it anywhere and to
00:28 - increase the dimensions of this media
00:30 - view
00:31 - go to fit width and fit height and pick
00:33 - whatever dimensions that you prefer
00:35 - let's say 500 by 300 and you can change
00:38 - the layout x and layout y properties as
00:40 - well
00:41 - so if i change this to 100 this video
00:44 - would move
00:44 - 100 pixels to the right but i'll set
00:47 - that to zero so it displays in the top
00:48 - left corner so this is the displayable
00:51 - area
00:52 - for our video so this is the media view
00:55 - it's a
00:56 - viewport now let's give this media view
00:59 - a unique id
01:00 - i will call this media view
01:03 - and let's create three buttons a play
01:05 - button pause button and reset button so
01:07 - go to controls
01:08 - drag and drop three buttons place them
01:09 - anywhere preferably not in front of the
01:11 - media view though maybe down at the
01:13 - bottom
01:14 - so we have our three buttons let's
01:16 - change the text
01:17 - the first one will be play button so
01:20 - this will be play
01:21 - all caps then pause
01:24 - then reset and let's give each button a
01:28 - unique id beginning with our play button
01:31 - this will be play button
01:34 - then pause button and reset button
01:41 - so each time that we click on one of
01:43 - these buttons we will call
01:45 - a method but we need to set that so on
01:47 - action
01:48 - for our play button let's say that we
01:50 - will call a method
01:51 - named play media which we need to define
01:54 - later
01:54 - followed by pause media then
01:57 - lastly reset media
02:02 - okay let's make sure that our controller
02:04 - class is linked
02:06 - save and then head to our controller
02:08 - class oh here's a trick that i found to
02:10 - refresh your fxml file right click on
02:12 - your project folder
02:14 - and then go to refresh so you don't need
02:16 - to keep on clicking back and forth to
02:18 - update your fxml file
02:20 - okay so within our controller class we
02:22 - will implement
02:23 - the initializable interface
02:27 - i can never spell it i think i spelt it
02:30 - wrong
02:32 - there we go okay then add any
02:34 - unimplemented methods
02:36 - so we need to declare everything that
02:38 - we'll need so at
02:39 - fxml we're going to inject our media
02:43 - view
02:43 - private media view
02:47 - media view pay attention to the
02:49 - capitalization i'm using
02:50 - camelcase here and we need our buttons
02:54 - at fxml private button
02:57 - we have our play button followed by our
03:00 - pause button
03:02 - and our reset button
03:06 - okay there's a few additional things
03:08 - that we'll need we'll need a file
03:10 - private file file
03:15 - followed by private media
03:18 - media
03:21 - private media player
03:26 - media player now in order for this
03:29 - program to actually run
03:31 - we need to declare these methods of play
03:34 - media pause media and
03:35 - reset media so within our controller
03:37 - class after our initialize method
03:40 - let's declare those methods so we have
03:42 - public void
03:43 - play media
03:47 - then pause media
03:54 - and then reset media public void
03:58 - reset media now to play a video we'll
04:02 - need a video to work with
04:04 - i have this mp4 file of a video that i
04:07 - took when i was in tokyo a number of
04:09 - years ago
04:09 - there was real-life mario kart racing
04:11 - down the street here's the original
04:13 - video that i took
04:20 - so to make this easy i'm going to copy
04:23 - my mp4 file
04:24 - and then paste it within my project
04:26 - folder pay attention
04:28 - to where this file is placed for me it's
04:30 - directly next to my
04:32 - fx build file as well as my libraries so
04:34 - if you're working with a lot of
04:36 - different media sources i recommend
04:38 - creating a separate folder
04:39 - but since we're only working with one i
04:41 - really don't think that's necessary
04:42 - then within your initialize method we're
04:44 - going to finish instantiating our file
04:47 - media and media player objects but let's
04:49 - begin with file
04:50 - file equals new file then in the
04:53 - constructor
04:54 - list the file name or the file path so
04:57 - mine is named
04:58 - mario cart dot mp4
05:02 - then next we're going to create and
05:03 - instantiate our media object
05:05 - now the media object contains
05:07 - information about your file such as the
05:09 - duration
05:10 - metadata tracks and a video resolution
05:13 - so we're going to add
05:14 - our file to our media object on the next
05:16 - line
05:17 - media equals new media
05:21 - then pass in the name of your file file
05:24 - dot
05:25 - 2 u r i followed by
05:28 - dot 2 string
05:31 - now you may or may not run into this
05:33 - exception
05:34 - when you run the program as of now so we
05:37 - ran into
05:38 - a invocation target exception caused by
05:42 - super class access check failed class
05:44 - javafx dot scene
05:46 - dot media so that means that we probably
05:48 - need to add a
05:49 - vm argument to our run configurations so
05:52 - to solve this go to run
05:54 - run configurations then go to your
05:56 - project
05:57 - arguments then under vm arguments you're
06:00 - going to add this line
06:04 - then apply then run and this should work
06:07 - now
06:08 - one other common issue is the placement
06:10 - of your mp4 file
06:12 - if i was to move my mp4 file to my
06:14 - source folder
06:15 - well it's no longer going to be directly
06:17 - within my project folder
06:19 - so if i was to run this now we would
06:21 - encounter an exception because
06:23 - this file will no longer be found one
06:26 - test that you could do if you're having
06:27 - some trouble locating your mp4 file
06:29 - is to take your mp4 file and then paste
06:32 - it to an easy to access place like your
06:34 - desktop
06:35 - then let's right-click go to properties
06:37 - find your location
06:39 - copy this and then precede your file
06:41 - name with the file
06:42 - path so let's run this again and we
06:44 - should be able to at least
06:46 - locate this file now we have our file
06:48 - object as well as our media object
06:51 - our next task is to create our media
06:53 - player object
06:54 - a media player provides the controls for
06:56 - playing media
06:58 - so within our initialize method we will
07:00 - finish instantiating our media
07:02 - player media player equals new
07:05 - media player and within the constructor
07:07 - of our media player we need to pass in a
07:09 - media object that we intend to play
07:13 - now there's going to be a no apparent
07:14 - change but there is one way in which we
07:16 - can test this
07:18 - so within our play media method we're
07:20 - going to take our media player
07:22 - and use the play method and this will at
07:25 - the very least
07:26 - play the audio but we will be unable to
07:28 - see the video
07:32 - so we should hear some go-karts
07:37 - now to view the video we need to add our
07:39 - media player to our media view our media
07:42 - view acts as a viewport
07:44 - to view a video so type mediaview.set
07:49 - media player and we will pass in our
07:51 - media player
07:52 - and we should be able to view the video
07:54 - now
07:57 - so here's my video and i can play it by
07:59 - hitting the play button
08:01 - now let's work out the font function so
08:03 - within
08:04 - the pause media method
08:07 - let's type media player dot pause
08:13 - and honestly it's as simple as that
08:16 - so we should be able to play pause
08:20 - and play and pause again and lastly
08:23 - let's reset
08:25 - so we'll type media player dot
08:28 - seek and this argument is kind of
08:31 - strange we're going to pass
08:32 - in duration dot seconds
08:36 - then pass in 0.0
08:40 - so this will reset the media player to
08:43 - zero
08:46 - so we can play we can pause
08:50 - and we can reset and then play again
08:53 - pause
08:54 - play pause reset oh here's one thing
08:56 - that i noticed that you should be aware
08:58 - of
08:59 - so before you actually play the video if
09:01 - you click reset
09:02 - and then play
09:06 - you will hear the audio but the video
09:08 - will not be running
09:09 - so to fix that we can add this line
09:12 - let's add an if statement within our
09:13 - reset method
09:14 - if media player dot
09:18 - get status does not equal
09:22 - media player dot status
09:26 - dot ready
09:31 - so that should fix that for you
09:34 - so if we were to reset and then play
09:38 - [Music]
09:40 - then the video and the audio will move
09:42 - together if you were to hit reset first
09:44 - before playing
09:45 - well okay everybody that is the media
09:48 - view node it acts as a viewport in which
09:50 - we can view
09:51 - a video or other media source if you
09:53 - would like a copy of this code i will
09:55 - post this to the comment section down
09:57 - below
09:57 - but yeah that is the media view node in
10:01 - javafx

Cleaned transcript:

hey what's going on everybody bro and well and in this video i'm going to explain the media view node in javafx so sit back relax and enjoy the show all right welcome back we're talking about media views today a media view is a viewport in which we can display a video or other media source so the media view node is found underneath controls just drag and drop it anywhere and to increase the dimensions of this media view go to fit width and fit height and pick whatever dimensions that you prefer let's say 500 by 300 and you can change the layout x and layout y properties as well so if i change this to 100 this video would move 100 pixels to the right but i'll set that to zero so it displays in the top left corner so this is the displayable area for our video so this is the media view it's a viewport now let's give this media view a unique id i will call this media view and let's create three buttons a play button pause button and reset button so go to controls drag and drop three buttons place them anywhere preferably not in front of the media view though maybe down at the bottom so we have our three buttons let's change the text the first one will be play button so this will be play all caps then pause then reset and let's give each button a unique id beginning with our play button this will be play button then pause button and reset button so each time that we click on one of these buttons we will call a method but we need to set that so on action for our play button let's say that we will call a method named play media which we need to define later followed by pause media then lastly reset media okay let's make sure that our controller class is linked save and then head to our controller class oh here's a trick that i found to refresh your fxml file right click on your project folder and then go to refresh so you don't need to keep on clicking back and forth to update your fxml file okay so within our controller class we will implement the initializable interface i can never spell it i think i spelt it wrong there we go okay then add any unimplemented methods so we need to declare everything that we'll need so at fxml we're going to inject our media view private media view media view pay attention to the capitalization i'm using camelcase here and we need our buttons at fxml private button we have our play button followed by our pause button and our reset button okay there's a few additional things that we'll need we'll need a file private file file followed by private media media private media player media player now in order for this program to actually run we need to declare these methods of play media pause media and reset media so within our controller class after our initialize method let's declare those methods so we have public void play media then pause media and then reset media public void reset media now to play a video we'll need a video to work with i have this mp4 file of a video that i took when i was in tokyo a number of years ago there was reallife mario kart racing down the street here's the original video that i took so to make this easy i'm going to copy my mp4 file and then paste it within my project folder pay attention to where this file is placed for me it's directly next to my fx build file as well as my libraries so if you're working with a lot of different media sources i recommend creating a separate folder but since we're only working with one i really don't think that's necessary then within your initialize method we're going to finish instantiating our file media and media player objects but let's begin with file file equals new file then in the constructor list the file name or the file path so mine is named mario cart dot mp4 then next we're going to create and instantiate our media object now the media object contains information about your file such as the duration metadata tracks and a video resolution so we're going to add our file to our media object on the next line media equals new media then pass in the name of your file file dot 2 u r i followed by dot 2 string now you may or may not run into this exception when you run the program as of now so we ran into a invocation target exception caused by super class access check failed class javafx dot scene dot media so that means that we probably need to add a vm argument to our run configurations so to solve this go to run run configurations then go to your project arguments then under vm arguments you're going to add this line then apply then run and this should work now one other common issue is the placement of your mp4 file if i was to move my mp4 file to my source folder well it's no longer going to be directly within my project folder so if i was to run this now we would encounter an exception because this file will no longer be found one test that you could do if you're having some trouble locating your mp4 file is to take your mp4 file and then paste it to an easy to access place like your desktop then let's rightclick go to properties find your location copy this and then precede your file name with the file path so let's run this again and we should be able to at least locate this file now we have our file object as well as our media object our next task is to create our media player object a media player provides the controls for playing media so within our initialize method we will finish instantiating our media player media player equals new media player and within the constructor of our media player we need to pass in a media object that we intend to play now there's going to be a no apparent change but there is one way in which we can test this so within our play media method we're going to take our media player and use the play method and this will at the very least play the audio but we will be unable to see the video so we should hear some gokarts now to view the video we need to add our media player to our media view our media view acts as a viewport to view a video so type mediaview.set media player and we will pass in our media player and we should be able to view the video now so here's my video and i can play it by hitting the play button now let's work out the font function so within the pause media method let's type media player dot pause and honestly it's as simple as that so we should be able to play pause and play and pause again and lastly let's reset so we'll type media player dot seek and this argument is kind of strange we're going to pass in duration dot seconds then pass in 0.0 so this will reset the media player to zero so we can play we can pause and we can reset and then play again pause play pause reset oh here's one thing that i noticed that you should be aware of so before you actually play the video if you click reset and then play you will hear the audio but the video will not be running so to fix that we can add this line let's add an if statement within our reset method if media player dot get status does not equal media player dot status dot ready so that should fix that for you so if we were to reset and then play then the video and the audio will move together if you were to hit reset first before playing well okay everybody that is the media view node it acts as a viewport in which we can view a video or other media source if you would like a copy of this code i will post this to the comment section down below but yeah that is the media view node in javafx
