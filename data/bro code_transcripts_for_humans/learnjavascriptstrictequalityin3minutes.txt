With timestamps:

00:00 - so uh yeah it's me again so today I'm
00:03 - gonna explain the strict equality
00:05 - operator which is represented by three
00:07 - equal signs before we dive in let me
00:10 - make a few important distinctions a
00:12 - single equal sign is the assignment
00:14 - operator you usually see it when you
00:15 - assign a value to a variable the
00:18 - comparison operator two equal signs is
00:20 - used to compare two values to see if
00:22 - they're equal now the strict equality
00:24 - operator has a whopping three equal
00:26 - signs it not only Compares if two values
00:29 - are equal but if they have the same data
00:31 - type as well let me give you a
00:33 - demonstration suppose we have a constant
00:36 - named pipe
00:37 - pi equals 3.14 pi in my example has a
00:42 - data type of number
00:44 - I'll create an if statement
00:46 - we will check if pi
00:49 - is equal to the string at 3.14
00:54 - if it is let's console DOT log
01:00 - that is pi
01:02 - else
01:04 - we will console.log
01:07 - that is not pi
01:09 - is the number 3.14 equal to the string
01:12 - 3.14
01:14 - well according to JavaScript that is pi
01:16 - that's because we're using the
01:18 - comparison operator we don't care about
01:20 - the data type we only care about the
01:22 - value are the values equal
01:24 - now if I was using the strict equality
01:27 - operator which is three equal signs
01:30 - well then JavaScript tells me that this
01:32 - is not pi
01:34 - because with the strict equality
01:36 - operator not only do we compare the
01:38 - values but we also compare the data
01:41 - types as well these values are both 3.14
01:44 - but this one is a number data type and
01:47 - we're comparing it to a string so they
01:49 - don't match technically
01:51 - if we were strictly comparing the number
01:53 - 3.14 to the number 3.14 well then we
01:57 - have a match that is pi
02:00 - one case where this is pretty helpful is
02:02 - when you accept user input because user
02:04 - input tends to be a string data type and
02:07 - then just as an extra measure you can
02:09 - use the strict equality operator and
02:11 - then be sure that the value is a number
02:13 - data type
02:14 - there's also the inequality operator it
02:17 - will return true if two values are not
02:20 - equal
02:21 - so let's take
02:23 - shut up this time we will examine if Pi
02:26 - does not equal the string 3.14
02:32 - if these are not equal this condition
02:35 - will evaluate to be true
02:37 - so this is not Pi else this is pi is the
02:42 - number 3.14 not equal to the string 3.14
02:47 - well that is Pi still
02:50 - using the inequality operator these
02:53 - values are still the same the inequality
02:55 - operator will return false then there's
02:58 - the strict inequality operator
03:01 - an exclamation point and two equal signs
03:04 - are the values or the data type
03:06 - different
03:07 - so in this example
03:09 - that is not pi
03:12 - they have the same values but the data
03:14 - type is different
03:15 - if I turned my variable Pi into a string
03:20 - well that is pi now
03:22 - the string 3.14 stored within pi
03:26 - does equal the string 3.14 so this
03:29 - condition turns out to be false so we
03:31 - execute the else statement it might take
03:33 - you a little bit of time to get used to
03:35 - this and that's okay it is a little odd
03:38 - but just in case you see these in the
03:40 - future you'll at least be familiar with
03:42 - them from now on we will try and use the
03:44 - strict equality operator if we can and
03:47 - well everybody that is the strict
03:48 - equality operator and I guess well the
03:51 - inequality operator and strict
03:52 - inequality operator in JavaScript

Cleaned transcript:

so uh yeah it's me again so today I'm gonna explain the strict equality operator which is represented by three equal signs before we dive in let me make a few important distinctions a single equal sign is the assignment operator you usually see it when you assign a value to a variable the comparison operator two equal signs is used to compare two values to see if they're equal now the strict equality operator has a whopping three equal signs it not only Compares if two values are equal but if they have the same data type as well let me give you a demonstration suppose we have a constant named pipe pi equals 3.14 pi in my example has a data type of number I'll create an if statement we will check if pi is equal to the string at 3.14 if it is let's console DOT log that is pi else we will console.log that is not pi is the number 3.14 equal to the string 3.14 well according to JavaScript that is pi that's because we're using the comparison operator we don't care about the data type we only care about the value are the values equal now if I was using the strict equality operator which is three equal signs well then JavaScript tells me that this is not pi because with the strict equality operator not only do we compare the values but we also compare the data types as well these values are both 3.14 but this one is a number data type and we're comparing it to a string so they don't match technically if we were strictly comparing the number 3.14 to the number 3.14 well then we have a match that is pi one case where this is pretty helpful is when you accept user input because user input tends to be a string data type and then just as an extra measure you can use the strict equality operator and then be sure that the value is a number data type there's also the inequality operator it will return true if two values are not equal so let's take shut up this time we will examine if Pi does not equal the string 3.14 if these are not equal this condition will evaluate to be true so this is not Pi else this is pi is the number 3.14 not equal to the string 3.14 well that is Pi still using the inequality operator these values are still the same the inequality operator will return false then there's the strict inequality operator an exclamation point and two equal signs are the values or the data type different so in this example that is not pi they have the same values but the data type is different if I turned my variable Pi into a string well that is pi now the string 3.14 stored within pi does equal the string 3.14 so this condition turns out to be false so we execute the else statement it might take you a little bit of time to get used to this and that's okay it is a little odd but just in case you see these in the future you'll at least be familiar with them from now on we will try and use the strict equality operator if we can and well everybody that is the strict equality operator and I guess well the inequality operator and strict inequality operator in JavaScript
