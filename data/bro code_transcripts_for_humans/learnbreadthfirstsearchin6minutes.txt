With timestamps:

00:00 - all right what's going on people breadth
00:02 - first search breadth first search is a
00:04 - search algorithm for traversing a tree
00:07 - or graph data structure this is done one
00:10 - level at a time rather than one branch
00:13 - at a time like what you see with depth
00:15 - first search here's an example in the
00:17 - previous topic on depth first search we
00:20 - would navigate a graph one branch at a
00:22 - time but in a breadth first search
00:24 - approach we would navigate this graph
00:26 - one level at a time so let's begin at
00:28 - node a and we are attempting to travel
00:31 - to node i instead of a stack we'll use a
00:33 - queue all unvisited nodes we will add to
00:36 - the queue so we're currently at a we'll
00:38 - add that to the queue then add any
00:40 - unvisited adjacent neighbors to the
00:42 - queue as well we have both b and d as
00:45 - neighbors
00:47 - so we will add these to the q
00:50 - then add any unvisited adjacent
00:52 - neighbors of nodes b and d that means we
00:55 - will add
00:56 - c e
00:59 - and g
01:01 - and for the next level we have f
01:03 - and h
01:06 - and lastly i
01:08 - so that is a breadth first search
01:11 - approach we will navigate a graph one
01:13 - level at a time using a cue rather than
01:16 - one branch at a time using a stack like
01:19 - with depth first search let's implement
01:21 - this in code now
01:22 - okay everyone so in my graph i'm
01:25 - utilizing an adjacency matrix we're
01:28 - reusing the same code from the previous
01:30 - few videos and we have a node class that
01:32 - contains some data and i went ahead and
01:35 - populated this graph already it's the
01:37 - same data from the previous few topics
01:39 - heading to our graph class let's create
01:41 - a breadth first search method
01:44 - public
01:45 - void
01:46 - breadth
01:48 - first
01:49 - search
01:50 - and we will take an integer name source
01:54 - this will be the index of the node we
01:56 - would like to begin searching at and
01:58 - with a breadth first search we can
02:00 - utilize a queue
02:03 - so q
02:05 - we will store integers these will be
02:07 - indices
02:09 - and i will name this q
02:11 - equals new
02:14 - now queues are actually interfaces we
02:16 - need to use a data structure that
02:18 - utilizes the queue interface one of
02:20 - which is a linked list
02:25 - okay so we have our queue and we're
02:27 - going to create an array of booleans to
02:29 - mark if a node has been visited or not
02:32 - so let's create a boolean array
02:35 - named visited
02:36 - equals new boolean
02:40 - and the size will be matrix dot length
02:45 - with the node that will begin at let's
02:47 - add that to the queue q
02:49 - dot you can use add
02:51 - or offer
02:54 - and then pass in the index of the
02:56 - starting node
02:57 - then within the boolean array of visited
03:00 - we will mark this as true at index of
03:03 - source
03:04 - equals true and now we'll need a while
03:06 - loop
03:09 - our condition is that we'll continue
03:11 - this while loop
03:12 - while the q's
03:14 - size method
03:16 - does not equal zero we'll assign our
03:19 - source equal to whatever is at the front
03:22 - of the queue
03:23 - q dot pull
03:24 - to remove an element with this code that
03:27 - i've written i've already went ahead and
03:28 - created an arraylist of the nodes to
03:30 - access the data whenever we pull a node
03:33 - i'm going to display the data so this
03:35 - part technically isn't necessary
03:37 - nodes dot get source
03:40 - dot data
03:42 - plus
03:44 - equals visited let's say that we're at
03:46 - node a we're going to iterate over this
03:49 - row and look for any adjacent neighbors
03:51 - so let's use a for loop for that
03:55 - 4 and i
03:56 - equals 0
03:58 - we will continue this as long as i is
04:00 - less than
04:02 - our matrix at index of source
04:05 - dot length
04:07 - this means the length of the row then i
04:09 - plus plus
04:11 - during each iteration let's check to see
04:13 - if this value is one and the node that
04:17 - we're trying to visit has not already
04:19 - been visited if
04:22 - then
04:23 - matrix
04:24 - add indices of source and i
04:29 - is equal to one
04:31 - and visited
04:33 - at index of i
04:35 - is not true so we can use the not
04:38 - logical operator if we have an adjacent
04:40 - neighbor that's not been visited then we
04:42 - will add the index to the queue and that
04:45 - node is going to wait in line
04:47 - q
04:48 - dot offer
04:50 - i and i is an index
04:53 - and then mark this note as visited so
04:55 - take our boolean array visited at index
04:58 - of i
04:59 - set the sequel to true and there we go
05:02 - let's invoke the breadth first search of
05:05 - our graph class then pass in an index of
05:08 - a node we would like to begin at in this
05:10 - example node a has an index of zero b is
05:13 - one c is two so on and so forth so let's
05:17 - perform a breadth first search beginning
05:19 - at node a
05:21 - we will cover these nodes in this order
05:24 - a b c e d let's change this to 1 that
05:27 - would be node b
05:29 - b c e d a
05:32 - 2 is c
05:34 - c d e a b
05:36 - 3 is d
05:37 - we can't go anywhere from node d
05:40 - so only d is visited
05:42 - and e
05:44 - e a c b d
05:46 - now before we wrap things up here are
05:48 - the differences between breadth and
05:50 - depth first searches breadth traverses a
05:53 - graph level by level depth traverses a
05:56 - graph branch by branch
05:58 - breadth utilizes aq depth utilizes a
06:01 - stack breadth tends to be better if the
06:03 - destination is on average close to the
06:06 - start and depth tends to be better if
06:08 - the destination is on average far from
06:11 - the start in a breath first search
06:13 - siblings are visited before children in
06:16 - a depth first search children are
06:18 - visited before siblings and if you ever
06:20 - plan on creating video games depth first
06:22 - searches tend to be more popular than
06:24 - breadth first searches alright everybody
06:26 - that is the breadth first search if you
06:28 - would like a copy of this code i'll post
06:30 - this to the comment section down below
06:32 - don't be afraid to give this video a
06:33 - thumbs up drop a random comment down
06:35 - below and subscribe if you'd like to
06:37 - become a fellow bro

Cleaned transcript:

all right what's going on people breadth first search breadth first search is a search algorithm for traversing a tree or graph data structure this is done one level at a time rather than one branch at a time like what you see with depth first search here's an example in the previous topic on depth first search we would navigate a graph one branch at a time but in a breadth first search approach we would navigate this graph one level at a time so let's begin at node a and we are attempting to travel to node i instead of a stack we'll use a queue all unvisited nodes we will add to the queue so we're currently at a we'll add that to the queue then add any unvisited adjacent neighbors to the queue as well we have both b and d as neighbors so we will add these to the q then add any unvisited adjacent neighbors of nodes b and d that means we will add c e and g and for the next level we have f and h and lastly i so that is a breadth first search approach we will navigate a graph one level at a time using a cue rather than one branch at a time using a stack like with depth first search let's implement this in code now okay everyone so in my graph i'm utilizing an adjacency matrix we're reusing the same code from the previous few videos and we have a node class that contains some data and i went ahead and populated this graph already it's the same data from the previous few topics heading to our graph class let's create a breadth first search method public void breadth first search and we will take an integer name source this will be the index of the node we would like to begin searching at and with a breadth first search we can utilize a queue so q we will store integers these will be indices and i will name this q equals new now queues are actually interfaces we need to use a data structure that utilizes the queue interface one of which is a linked list okay so we have our queue and we're going to create an array of booleans to mark if a node has been visited or not so let's create a boolean array named visited equals new boolean and the size will be matrix dot length with the node that will begin at let's add that to the queue q dot you can use add or offer and then pass in the index of the starting node then within the boolean array of visited we will mark this as true at index of source equals true and now we'll need a while loop our condition is that we'll continue this while loop while the q's size method does not equal zero we'll assign our source equal to whatever is at the front of the queue q dot pull to remove an element with this code that i've written i've already went ahead and created an arraylist of the nodes to access the data whenever we pull a node i'm going to display the data so this part technically isn't necessary nodes dot get source dot data plus equals visited let's say that we're at node a we're going to iterate over this row and look for any adjacent neighbors so let's use a for loop for that 4 and i equals 0 we will continue this as long as i is less than our matrix at index of source dot length this means the length of the row then i plus plus during each iteration let's check to see if this value is one and the node that we're trying to visit has not already been visited if then matrix add indices of source and i is equal to one and visited at index of i is not true so we can use the not logical operator if we have an adjacent neighbor that's not been visited then we will add the index to the queue and that node is going to wait in line q dot offer i and i is an index and then mark this note as visited so take our boolean array visited at index of i set the sequel to true and there we go let's invoke the breadth first search of our graph class then pass in an index of a node we would like to begin at in this example node a has an index of zero b is one c is two so on and so forth so let's perform a breadth first search beginning at node a we will cover these nodes in this order a b c e d let's change this to 1 that would be node b b c e d a 2 is c c d e a b 3 is d we can't go anywhere from node d so only d is visited and e e a c b d now before we wrap things up here are the differences between breadth and depth first searches breadth traverses a graph level by level depth traverses a graph branch by branch breadth utilizes aq depth utilizes a stack breadth tends to be better if the destination is on average close to the start and depth tends to be better if the destination is on average far from the start in a breath first search siblings are visited before children in a depth first search children are visited before siblings and if you ever plan on creating video games depth first searches tend to be more popular than breadth first searches alright everybody that is the breadth first search if you would like a copy of this code i'll post this to the comment section down below don't be afraid to give this video a thumbs up drop a random comment down below and subscribe if you'd like to become a fellow bro
