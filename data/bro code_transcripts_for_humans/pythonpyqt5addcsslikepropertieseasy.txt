With timestamps:

00:00 - hello everybody so in today's video I'm
00:02 - going to explain setting stylesheets in
00:04 - pqt 5 CSS means cascading stylesheets if
00:08 - you're not familiar with CSS you can
00:10 - still follow along but knowing CSS is
00:13 - helpful as a reminder I do have a full
00:15 - free course on YouTube on HTML and CSS
00:18 - if you would like to learn more let's
00:20 - begin for this demonstration we will
00:23 - need the following Imports we will be
00:25 - designing some buttons we will import Q
00:28 - push button
00:30 - we'll be working with the layout manager
00:31 - we will import Q
00:34 - widget and for a horizontal layout
00:37 - manager we will need Q
00:40 - hbx layout so import these three from
00:44 - the module of QT widgets now in previous
00:48 - topics we've set the geometry of our
00:50 - window since we're using a layout
00:52 - manager we don't necessarily need that
00:54 - anymore so I'm going to delete it in the
00:57 - past I have also created a method to
00:58 - initialize our user interface and we are
01:01 - calling that within the Constructor of
01:02 - our main window we will create three
01:05 - push button
01:06 - widgets self do button one will be the
01:09 - first button equals take our Q push
01:13 - button class and call the Constructor we
01:16 - can add text to the button we will pass
01:18 - that as an argument now since we're
01:20 - using a layout manager we don't need to
01:22 - add this button to self our window we
01:25 - don't need to do that let's create two
01:27 - more buttons we'll have button two and
01:31 - button three button two will say number
01:33 - two button three will say number three
01:36 - now we'll create a layout manager under
01:38 - normal circumstances we can't add a
01:40 - layout manager to our main window with
01:42 - main window widgets there's already a
01:44 - specified layout and format we're going
01:47 - to add a layout manager to a central
01:49 - widget and this widget will be added to
01:52 - the main window let's take care of that
01:54 - within our initialized user interface
01:56 - method we will create a central
02:00 - widget equals call The Constructor of Q
02:05 - widget then we will take self that means
02:08 - our window and set the central
02:12 - widget set Central
02:16 - widget then pass in our Central widget
02:19 - to set it then we will create a layout
02:22 - we will call the Constructor within the
02:24 - class of qbox
02:26 - layout let's name this layout hbox for a
02:30 - horizontal box
02:33 - equals call The Constructor within this
02:36 - class we will take our layout of
02:39 - horizontal
02:40 - box then add the following
02:43 - widgets add widget self. button
02:47 - one we'll do this with two and
02:52 - three then the last thing we need to do
02:55 - is take our Central
02:58 - widget call the set layout
03:01 - method then pass in our layout
03:04 - manager and now we should have those
03:06 - three buttons they're all arranged
03:09 - horizontally now we're going to apply
03:11 - some CSS like styling using the method
03:14 - of set style sheet here's how rather
03:17 - than apply these CSS properties
03:19 - individually such as self. button one.
03:22 - set
03:24 - stylesheet and in the past we've passed
03:26 - in individual CSS properties we're
03:29 - instead to set the stylesheet of our
03:31 - window self we have a lot to write
03:35 - instead of double quotes we're going to
03:37 - use triple
03:40 - quotes triple quotes are used to write
03:43 - very long strings in a more organized
03:45 - way all of the CSS properties that we're
03:48 - going to write are going to be within
03:50 - this set of triple quotes so let me give
03:52 - you a demonstration we could
03:54 - individually apply CSS like properties
03:57 - to each of these widgets but we could
03:59 - select an entire class of widgets too
04:02 - let's select the class of Q push
04:04 - button then add a set of curly
04:08 - braces the following CSS properties will
04:11 - apply to all Q push button widgets So
04:15 - currently this is what we have we'll
04:17 - increase the font size for every push
04:20 - button so we will add the following
04:23 - property of font
04:24 - size then set it to be 40 pixels each be
04:28 - sure to end each CSS property with a
04:32 - semicolon so the font size is now 40 for
04:35 - every
04:36 - button let's set the font font family I
04:40 - will pick
04:44 - aial let's add some padding we can add
04:47 - some space around the text and the
04:49 - button
04:51 - itself so with padding if I was to set
04:54 - this to 75
04:57 - pixels we would have 75 pixels worth the
05:00 - space between the text and the border of
05:02 - the button I would like to change the
05:05 - dimensions of the padding so let's apply
05:08 - 15 pixels to the top and bottom of the
05:11 - button and 75 to the
05:14 - sides that's
05:16 - better margin is the space around a
05:19 - button let's set the margin to be 25
05:23 - pixels now the buttons are more spread
05:26 - out if this was 250 they would really be
05:30 - spread out that's margin it's the space
05:33 - around a
05:35 - widget let's set that back to
05:38 - 25 I'm going to change the border
05:42 - border 3 pixel
05:46 - solid this would change the border of
05:49 - the buttons we now have a black border
05:52 - that's three pixels in width if you
05:54 - would like to round the corners we can
05:56 - use border radius I will set that to be
05:58 - 15 pixels
06:01 - with all the buttons the corners are now
06:04 - rounded within our set stylesheet method
06:07 - we're applying all of these CSS like
06:09 - properties to every push button now what
06:13 - if you would like to apply CSS
06:14 - properties to Only One widget rather
06:17 - than all of them here's how with each of
06:20 - our widgets buttons 1 2 and 3 three we
06:23 - need to set an object name let's do that
06:26 - before we call the set stylesheet method
06:28 - we will take our buttons self. button
06:32 - one call the set object name
06:36 - method then pass in a name for this
06:39 - widget we'll keep the name the same as
06:41 - button
06:43 - one so let's do this with button two and
06:46 - button
06:47 - three button two button
06:50 - three within the context of set style
06:53 - sheet we will refer to these widgets by
06:56 - their object name buttons 1 2 and three
07:00 - and now we can select them
07:02 - individually let's say that with button
07:04 - one I would like the background color to
07:07 - be red we're going to access our class
07:10 - of Q push button follow this with a
07:13 - pound sign I like to call it a hash tag
07:16 - then we need the object name button one
07:20 - button one refers to the widget of
07:22 - button one again I kept the name the
07:24 - same then we need a set of curly braces
07:28 - between the set of curly braces we can
07:29 - list one or many different CSS
07:32 - properties let's change the background
07:35 - color I will set it to be
07:39 - red and now the background color of only
07:42 - that button is red and not all of
07:45 - them if I was to set the background
07:47 - color within the class well then all of
07:50 - them would be
07:51 - red okay so with button two I'll just
07:55 - copy what we have and paste
07:57 - it we are selecting the ID
07:59 - of button two let's set the background
08:02 - color to be
08:04 - green so then the background color is
08:07 - now green and button
08:11 - three button three will be
08:17 - blue if you would like a greater variety
08:20 - of colors I recommend looking up a Color
08:22 - Picker you can just Google Color Picker
08:26 - so if I would like a very specific shade
08:28 - of red I can pick that let's go with
08:32 - that there are a few options provided to
08:35 - you you can use hex
08:40 - values now we have a very specific shade
08:42 - of
08:43 - red you can use
08:49 - RGB
08:50 - RGB and close it within a set of
08:53 - parentheses and then paste those
08:55 - numbers or my favorite which is hsl hsl
09:00 - means Hue saturation and
09:04 - lightness we will enclose our values
09:07 - within hsl if you copy these values
09:10 - directly from Google you would have to
09:12 - remove this degree
09:14 - symbol I like hsl because I can also
09:17 - control the saturation and the lightness
09:19 - pretty easily okay let's pick a very
09:22 - specific shade of
09:24 - green that's good I would say I'll use
09:27 - the hsl values
09:32 - hsl remove the degree
09:35 - symbol and now we have a very specific
09:38 - shade of
09:39 - green and
09:42 - blue that's good I would
09:53 - say that's not too bad if you're already
09:57 - familiar with CSS we can apply pseudo
10:00 - classes such as when we hover over one
10:02 - of the buttons here's how let's copy
10:05 - these three
10:06 - blocks then paste them
10:10 - again we can add CSS properties when we
10:14 - hover over something we have to use the
10:16 - hover pseudo class after the ID of each
10:19 - of our buttons we will add colon hover
10:24 - we can apply the following CSS
10:26 - properties when we hover over the
10:28 - buttons all I'm going to do is up the
10:31 - lightness let's say by 20%
10:35 - each then when we hover over one of the
10:37 - buttons the lightness is going to change
10:40 - we apply the new CSS
10:44 - properties all right everybody so that
10:46 - is a more in-depth explanation of the
10:48 - set stylesheet method in pi qt5

Cleaned transcript:

hello everybody so in today's video I'm going to explain setting stylesheets in pqt 5 CSS means cascading stylesheets if you're not familiar with CSS you can still follow along but knowing CSS is helpful as a reminder I do have a full free course on YouTube on HTML and CSS if you would like to learn more let's begin for this demonstration we will need the following Imports we will be designing some buttons we will import Q push button we'll be working with the layout manager we will import Q widget and for a horizontal layout manager we will need Q hbx layout so import these three from the module of QT widgets now in previous topics we've set the geometry of our window since we're using a layout manager we don't necessarily need that anymore so I'm going to delete it in the past I have also created a method to initialize our user interface and we are calling that within the Constructor of our main window we will create three push button widgets self do button one will be the first button equals take our Q push button class and call the Constructor we can add text to the button we will pass that as an argument now since we're using a layout manager we don't need to add this button to self our window we don't need to do that let's create two more buttons we'll have button two and button three button two will say number two button three will say number three now we'll create a layout manager under normal circumstances we can't add a layout manager to our main window with main window widgets there's already a specified layout and format we're going to add a layout manager to a central widget and this widget will be added to the main window let's take care of that within our initialized user interface method we will create a central widget equals call The Constructor of Q widget then we will take self that means our window and set the central widget set Central widget then pass in our Central widget to set it then we will create a layout we will call the Constructor within the class of qbox layout let's name this layout hbox for a horizontal box equals call The Constructor within this class we will take our layout of horizontal box then add the following widgets add widget self. button one we'll do this with two and three then the last thing we need to do is take our Central widget call the set layout method then pass in our layout manager and now we should have those three buttons they're all arranged horizontally now we're going to apply some CSS like styling using the method of set style sheet here's how rather than apply these CSS properties individually such as self. button one. set stylesheet and in the past we've passed in individual CSS properties we're instead to set the stylesheet of our window self we have a lot to write instead of double quotes we're going to use triple quotes triple quotes are used to write very long strings in a more organized way all of the CSS properties that we're going to write are going to be within this set of triple quotes so let me give you a demonstration we could individually apply CSS like properties to each of these widgets but we could select an entire class of widgets too let's select the class of Q push button then add a set of curly braces the following CSS properties will apply to all Q push button widgets So currently this is what we have we'll increase the font size for every push button so we will add the following property of font size then set it to be 40 pixels each be sure to end each CSS property with a semicolon so the font size is now 40 for every button let's set the font font family I will pick aial let's add some padding we can add some space around the text and the button itself so with padding if I was to set this to 75 pixels we would have 75 pixels worth the space between the text and the border of the button I would like to change the dimensions of the padding so let's apply 15 pixels to the top and bottom of the button and 75 to the sides that's better margin is the space around a button let's set the margin to be 25 pixels now the buttons are more spread out if this was 250 they would really be spread out that's margin it's the space around a widget let's set that back to 25 I'm going to change the border border 3 pixel solid this would change the border of the buttons we now have a black border that's three pixels in width if you would like to round the corners we can use border radius I will set that to be 15 pixels with all the buttons the corners are now rounded within our set stylesheet method we're applying all of these CSS like properties to every push button now what if you would like to apply CSS properties to Only One widget rather than all of them here's how with each of our widgets buttons 1 2 and 3 three we need to set an object name let's do that before we call the set stylesheet method we will take our buttons self. button one call the set object name method then pass in a name for this widget we'll keep the name the same as button one so let's do this with button two and button three button two button three within the context of set style sheet we will refer to these widgets by their object name buttons 1 2 and three and now we can select them individually let's say that with button one I would like the background color to be red we're going to access our class of Q push button follow this with a pound sign I like to call it a hash tag then we need the object name button one button one refers to the widget of button one again I kept the name the same then we need a set of curly braces between the set of curly braces we can list one or many different CSS properties let's change the background color I will set it to be red and now the background color of only that button is red and not all of them if I was to set the background color within the class well then all of them would be red okay so with button two I'll just copy what we have and paste it we are selecting the ID of button two let's set the background color to be green so then the background color is now green and button three button three will be blue if you would like a greater variety of colors I recommend looking up a Color Picker you can just Google Color Picker so if I would like a very specific shade of red I can pick that let's go with that there are a few options provided to you you can use hex values now we have a very specific shade of red you can use RGB RGB and close it within a set of parentheses and then paste those numbers or my favorite which is hsl hsl means Hue saturation and lightness we will enclose our values within hsl if you copy these values directly from Google you would have to remove this degree symbol I like hsl because I can also control the saturation and the lightness pretty easily okay let's pick a very specific shade of green that's good I would say I'll use the hsl values hsl remove the degree symbol and now we have a very specific shade of green and blue that's good I would say that's not too bad if you're already familiar with CSS we can apply pseudo classes such as when we hover over one of the buttons here's how let's copy these three blocks then paste them again we can add CSS properties when we hover over something we have to use the hover pseudo class after the ID of each of our buttons we will add colon hover we can apply the following CSS properties when we hover over the buttons all I'm going to do is up the lightness let's say by 20% each then when we hover over one of the buttons the lightness is going to change we apply the new CSS properties all right everybody so that is a more indepth explanation of the set stylesheet method in pi qt5
