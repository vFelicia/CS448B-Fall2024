With timestamps:

00:01 - well well well everybody we have a
00:04 - pretty important lesson today today
00:06 - we're going to talk about functions a
00:08 - function is a block of reusable code if
00:11 - you ever think that you're going to use
00:12 - some section of code more than once you
00:14 - might as well stick it within a function
00:16 - here's an example i'll create a function
00:18 - to sing happy birthday currently our
00:19 - program is within the main function to
00:22 - begin the program we call the main
00:24 - function before the main function we can
00:26 - create a new function for the time being
00:28 - we're going to type
00:30 - void
00:32 - then a unique function name the function
00:34 - name should be descriptive of what it
00:35 - does if i'm going to sing happy birthday
00:38 - let's name this function
00:39 - the happy birthday function
00:42 - then add a set of parentheses then a set
00:44 - of curly braces you can see that this is
00:46 - almost identical to our main function
00:49 - except with the main function we have a
00:50 - return type and return zero what would
00:53 - we like to do when we invoke this
00:54 - function let's sing some of the lyrics
00:56 - to happy birthday
00:59 - standard output
01:01 - happy
01:03 - birthday to you
01:06 - i'll add a new line
01:08 - i'll repeat this a couple times
01:12 - happy birthday dear you
01:14 - happy birthday to you
01:16 - to invoke this function all we have to
01:18 - do is within the main function type the
01:20 - function name followed by a set of
01:23 - parentheses
01:24 - this will call or otherwise known as
01:27 - invoke the function i like to think of
01:29 - the parentheses as a pair of telephones
01:31 - that are talking to each other to use a
01:33 - function you have to call the function
01:35 - call it up on the phone so when i run
01:36 - this code
01:38 - we have the lyrics to happy birthday
01:40 - this function is reusable i can call
01:43 - this function as many times as i want
01:45 - i'll call this function two additional
01:46 - times just to separate these lyrics i'm
01:49 - going to add an additional new line
01:50 - character
01:52 - okay we now should have three verses of
01:55 - happy birthday one
01:58 - two
01:59 - three that's because i called the
02:00 - function well three times
02:03 - a function is just a block of reusable
02:05 - code now what a lot of people do is that
02:08 - they'll declare and define their
02:10 - functions after the main function
02:11 - because it's more readable to many
02:13 - people but there's one issue with this
02:16 - happy birthday was not declared in this
02:18 - scope
02:20 - our programs are read from the top down
02:22 - since we're invoking the happy birthday
02:24 - function before we even know what it is
02:26 - well the compiler doesn't recognize it a
02:28 - solution to this is that before the main
02:30 - function
02:31 - you can declare functions but define
02:33 - them later let's declare happy birthday
02:36 - before the main function
02:39 - then make sure you add a void or a
02:41 - return type
02:43 - so void happy birthday
02:46 - we can now use this function even though
02:48 - it's after the main function
02:51 - a lot of people like to define their
02:52 - functions after the main function it's
02:55 - another way in which you can write it
02:56 - just be sure to at least declare them
02:58 - before the main function now check this
03:00 - out what if we have a variable
03:03 - standard
03:04 - string
03:05 - name
03:06 - assign this whatever your name is
03:09 - i'm going to use this name that's
03:12 - declared in the main function and use it
03:14 - within the happy birthday function
03:17 - let's replace you with the user's name
03:20 - happy birthday to
03:22 - name
03:23 - i'll add a new line
03:27 - then i'll copy this
03:30 - paste it
03:32 - and let's change this line as well
03:43 - all right now when i run this here's the
03:46 - issue
03:49 - name was not declared in the scope
03:52 - think of each function as a house the
03:54 - main function is your house functions
03:56 - outside of the main function would be
03:58 - your neighbors their house functions
04:00 - can't see what's going on inside of
04:02 - other functions you can't see what's
04:04 - going on inside of your neighbor's house
04:06 - you're only familiar with what's going
04:08 - on inside of your own house in order for
04:10 - the happy birthday function to use the
04:12 - main function's name variable it needs
04:14 - to be made aware of it to do that when
04:16 - you invoke a neighboring function you
04:18 - can pass that variable or some other
04:20 - value as an argument so within the
04:23 - parentheses when you invoke that
04:24 - function
04:25 - place your values or variables i would
04:28 - like to make my happy birthday function
04:30 - aware of this name variable within the
04:32 - main function
04:33 - when you send some data over to a
04:35 - function that data is also known as an
04:37 - argument however the receiving function
04:40 - needs a matching set of what are called
04:42 - parameters if this function is going to
04:44 - receive this data this name you need a
04:47 - matching parameter to set up a parameter
04:50 - you first list the data type we will
04:52 - receive a standard
04:55 - string
04:56 - then we can list a parameter name
04:59 - let's say name now this happy birthday
05:01 - function can use this name variable
05:03 - within the main function if you have a
05:05 - function declaration at the top of your
05:07 - program you'll have to add that
05:08 - parameter there as well
05:10 - so happy birthday standard string
05:14 - and we can run this happy birthday to
05:17 - whatever your name is functions aren't
05:19 - aware of what's going on inside of other
05:21 - functions but you can make them aware of
05:23 - any local variables or values by passing
05:26 - them as an argument but you'll need a
05:28 - matching set of parameters the name or
05:30 - otherwise unique identifier of your
05:32 - parameter doesn't necessarily need to
05:35 - have the same name so to say you can
05:37 - name it something else instead of naming
05:39 - our parameter name let's say
05:42 - birthday boy or birthday girl
05:47 - happy birthday to birthday boy
05:51 - and that should work the same so you can
05:53 - rename parameters but let's revert that
05:55 - back
05:56 - now let's pass an age
05:58 - int age
05:59 - equals make up some age i would like to
06:02 - send my age over to the happy birthday
06:04 - function so i will pass that as an
06:07 - additional argument separate each
06:09 - argument with a comma
06:11 - we'll send our name as well as age now
06:13 - we need a matching set of parameters
06:15 - right now the happy birthday function is
06:17 - only equipped to receive a name so
06:20 - we list the data type and age
06:23 - and if you have a function declaration
06:25 - change that there as well
06:28 - then i'll add one more line
06:35 - you
06:36 - are
06:37 - age
06:41 - years old
06:43 - then this should work
06:45 - okay happy birthday to whatever your
06:47 - name is you are whatever your age is
06:50 - years old so that's a function everybody
06:53 - it's a block of reusable code if you
06:55 - think you're going to perform some code
06:57 - more than once you can stick it within a
06:59 - function whenever you need it you just
07:00 - simply call it if you need to make your
07:02 - function aware of any variables you can
07:04 - send them as arguments to that function
07:07 - but you'll need a matching set of
07:08 - parameters in the function definition
07:10 - and the declaration so yeah those are
07:13 - functions everybody your assignment is
07:15 - to create a unique function and post it
07:17 - in the comments section and well yeah
07:19 - those are functions in c plus

Cleaned transcript:

well well well everybody we have a pretty important lesson today today we're going to talk about functions a function is a block of reusable code if you ever think that you're going to use some section of code more than once you might as well stick it within a function here's an example i'll create a function to sing happy birthday currently our program is within the main function to begin the program we call the main function before the main function we can create a new function for the time being we're going to type void then a unique function name the function name should be descriptive of what it does if i'm going to sing happy birthday let's name this function the happy birthday function then add a set of parentheses then a set of curly braces you can see that this is almost identical to our main function except with the main function we have a return type and return zero what would we like to do when we invoke this function let's sing some of the lyrics to happy birthday standard output happy birthday to you i'll add a new line i'll repeat this a couple times happy birthday dear you happy birthday to you to invoke this function all we have to do is within the main function type the function name followed by a set of parentheses this will call or otherwise known as invoke the function i like to think of the parentheses as a pair of telephones that are talking to each other to use a function you have to call the function call it up on the phone so when i run this code we have the lyrics to happy birthday this function is reusable i can call this function as many times as i want i'll call this function two additional times just to separate these lyrics i'm going to add an additional new line character okay we now should have three verses of happy birthday one two three that's because i called the function well three times a function is just a block of reusable code now what a lot of people do is that they'll declare and define their functions after the main function because it's more readable to many people but there's one issue with this happy birthday was not declared in this scope our programs are read from the top down since we're invoking the happy birthday function before we even know what it is well the compiler doesn't recognize it a solution to this is that before the main function you can declare functions but define them later let's declare happy birthday before the main function then make sure you add a void or a return type so void happy birthday we can now use this function even though it's after the main function a lot of people like to define their functions after the main function it's another way in which you can write it just be sure to at least declare them before the main function now check this out what if we have a variable standard string name assign this whatever your name is i'm going to use this name that's declared in the main function and use it within the happy birthday function let's replace you with the user's name happy birthday to name i'll add a new line then i'll copy this paste it and let's change this line as well all right now when i run this here's the issue name was not declared in the scope think of each function as a house the main function is your house functions outside of the main function would be your neighbors their house functions can't see what's going on inside of other functions you can't see what's going on inside of your neighbor's house you're only familiar with what's going on inside of your own house in order for the happy birthday function to use the main function's name variable it needs to be made aware of it to do that when you invoke a neighboring function you can pass that variable or some other value as an argument so within the parentheses when you invoke that function place your values or variables i would like to make my happy birthday function aware of this name variable within the main function when you send some data over to a function that data is also known as an argument however the receiving function needs a matching set of what are called parameters if this function is going to receive this data this name you need a matching parameter to set up a parameter you first list the data type we will receive a standard string then we can list a parameter name let's say name now this happy birthday function can use this name variable within the main function if you have a function declaration at the top of your program you'll have to add that parameter there as well so happy birthday standard string and we can run this happy birthday to whatever your name is functions aren't aware of what's going on inside of other functions but you can make them aware of any local variables or values by passing them as an argument but you'll need a matching set of parameters the name or otherwise unique identifier of your parameter doesn't necessarily need to have the same name so to say you can name it something else instead of naming our parameter name let's say birthday boy or birthday girl happy birthday to birthday boy and that should work the same so you can rename parameters but let's revert that back now let's pass an age int age equals make up some age i would like to send my age over to the happy birthday function so i will pass that as an additional argument separate each argument with a comma we'll send our name as well as age now we need a matching set of parameters right now the happy birthday function is only equipped to receive a name so we list the data type and age and if you have a function declaration change that there as well then i'll add one more line you are age years old then this should work okay happy birthday to whatever your name is you are whatever your age is years old so that's a function everybody it's a block of reusable code if you think you're going to perform some code more than once you can stick it within a function whenever you need it you just simply call it if you need to make your function aware of any variables you can send them as arguments to that function but you'll need a matching set of parameters in the function definition and the declaration so yeah those are functions everybody your assignment is to create a unique function and post it in the comments section and well yeah those are functions in c plus
