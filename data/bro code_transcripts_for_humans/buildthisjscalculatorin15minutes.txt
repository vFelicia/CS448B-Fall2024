With timestamps:

00:00 - hey what's going on everybody in today's
00:02 - video we're going to create a calculator
00:04 - program using HTML CSS and JavaScript so
00:07 - let's get started all right let's do
00:09 - this thing everybody we have a lot of
00:11 - buttons to create but we'll need a
00:13 - container I will create a div element
00:16 - the div element will have an ID of
00:20 - calculator within this div element we'll
00:23 - create an input
00:25 - element the input element will have an
00:27 - ID of display
00:30 - to display the numbers that we type in I
00:33 - don't want somebody to enter in some
00:34 - text for the
00:36 - display I would like this display to be
00:39 - readon I will add the read only property
00:43 - so we can't type in anything even though
00:45 - I'm trying I will create a nested
00:49 - development that has an ID of keys for
00:52 - all of the keys we need to add a lot of
00:55 - buttons we'll begin with the first I
00:57 - will create a button element
01:00 - the text on the button will be plus I
01:03 - will set the onclick attribute of this
01:07 - button to be a JavaScript function we
01:09 - still need to Define this function
01:11 - eventually we'll create a append to
01:16 - display
01:17 - function we have one argument to pass
01:19 - into this JavaScript function a
01:22 - character of
01:24 - plus that's our first button let's copy
01:27 - this button and paste 13 additional
01:31 - times if I counted
01:39 - right okay the second button will be
01:41 - seven the character we're passing in is
01:45 - seven followed by
01:47 - 8
01:50 - 9
01:53 - minus
01:55 - 4
01:57 - 5
01:58 - 6
02:01 - asterisk for
02:04 - multiplication
02:06 - 1
02:07 - 2
02:10 - three forward slash for
02:13 - division then
02:17 - zero and here are the new buttons I'm
02:20 - Mis counted we need to add one
02:22 - more a DOT for a
02:25 - decimal now we need an equals button
02:27 - we're going to arrange that a little
02:29 - different let's create a
02:31 - button with the text of
02:34 - equals the onclick attribute of this
02:37 - specific button is going to be
02:42 - calculate then we need a button to clear
02:45 - our
02:48 - screen the text on this button will be
02:50 - capital c for clear the on click
02:54 - attribute of this button is going to be
02:57 - clear display
03:00 - and that is all the buttons we'll
03:02 - need so let's save everything and let's
03:06 - go to our CSS
03:07 - stylesheet I'm going to zoom back to
03:11 - 100% first let's style all these buttons
03:14 - I will select all
03:16 - buttons for each button I will set the
03:19 - width to be 100
03:22 - pixels the height to be 100 pixels so
03:26 - they're
03:26 - even I would like rounded buttons I will
03:30 - set the Border radius property to be 50
03:34 - pixels so they're
03:36 - circles let's remove the
03:39 - border border
03:42 - none I'll change the background color of
03:44 - the buttons
03:48 - background-color I'll use hsl values
03:51 - I'll set the lightness to be 30% so
03:54 - they're
03:54 - darker for the text of the button I will
03:57 - set the color to be white
04:00 - for the font
04:02 - size I will set that to be three
04:07 - RM set the font weight to be
04:12 - bold then when I hover my cursor over
04:14 - one of the buttons I would like my
04:16 - cursor to be a
04:18 - pointer
04:20 - cursor
04:23 - pointer now we have to arrange these
04:25 - buttons
04:26 - properly let's select the ID of keys
04:31 - keys is a development that's containing
04:33 - all of the
04:34 - buttons this
04:36 - element all of the buttons are
04:40 - within to arrange these buttons in a
04:42 - grid we can set the display
04:45 - property to be a
04:48 - grid for this calculator I would like
04:51 - four columns to do that I will set the
04:55 - grid template columns property to be
05:01 - we'll use the repeat function of CSS I
05:04 - would like four columns then to arrange
05:07 - these buttons evenly you can use 1
05:10 - F FR stands for fractional unit 1 FR
05:15 - indicates that each column should take
05:17 - up an even amount of space so now we
05:20 - have Columns of four if I were to set
05:22 - this to three we would have Columns of
05:24 - three but I'm going to use Columns of
05:26 - four because I would like all of the
05:28 - operators on the left hand side
05:30 - I'll set the Gap to be 10
05:35 - pixels that is the gap between each of
05:38 - the
05:38 - rows then I'll add some
05:40 - padding of 25
05:44 - pixels that's padding around the
05:46 - keys let's select the ID of
05:49 - calculator I'll add that to the top to
05:52 - keep everything
05:54 - organized with our calculator I will
05:57 - select a font family
06:00 - of Ariel with a backup of s
06:04 - serif let's pick a background color for
06:07 - the
06:08 - calculator I will select something
06:12 - darker I'll set the lightness to be
06:16 - 15% I'll round the corners of the
06:20 - calculator border radius 15
06:26 - pixels the corners of the calculator are
06:28 - smooth now
06:30 - then I will set a Max width of the
06:33 - calculator to be 500
06:36 - pixels if any elements overflow I will
06:39 - set that to be
06:41 - hidden this is mostly for our display if
06:44 - we have a very long equation all right
06:47 - next let's select the display right now
06:49 - it's kind of
06:51 - small we are selecting our ID of
06:55 - display let's set the width to be 100%
07:02 - I'll add some padding of 20
07:05 - pixels for the text of the display I
07:07 - will set the font size to
07:10 - be 5
07:14 - RM let's text a line
07:20 - left I'll remove the border border
07:25 - none and I'll change the background
07:27 - color I'll just copy this property
07:29 - because I'm lazy let's increase the
07:31 - lightness to
07:36 - 20% then we'll select the body of our
07:43 - document I will remove all margin margin
07:48 - zero I would like the calculator to be
07:50 - in the middle of my window right now
07:52 - it's in the top left corner if you would
07:54 - prefer it up here you can leave it as
07:57 - is I will set the display to be Flex for
08:01 - Flex
08:03 - box
08:04 - justify content in the center for a
08:09 - horizontal alignment for a vertical
08:12 - alignment we can set
08:15 - align items to be Center but we do need
08:19 - to increase the height of the body of
08:20 - the document so it's
08:23 - 100% I will set the height to be 100 VH
08:27 - for 100% the viewport height that should
08:31 - place the calculator in the middle of
08:32 - the body of our document both
08:34 - horizontally and vertically for the
08:37 - background color I'm going to decrease
08:39 - the lightness
08:40 - slightly for the background color I will
08:43 - set the lightness to be like
08:46 - 95% okay let's go to the bottom of our
08:49 - CSS
08:50 - stylesheet when I hover over one of
08:52 - these buttons I would like to increase
08:54 - the lightness so with all
08:58 - buttons
08:59 - with the hover sudo
09:01 - class change the background color so the
09:05 - lightness is 40% instead of
09:08 - 30 now these buttons light up when we
09:10 - hover our cursor over one of the
09:13 - buttons now when I click on one of the
09:15 - buttons I'll increase the lightness
09:17 - further so it
09:18 - flashes we are selecting the active
09:21 - studo class
09:22 - now let's take our background color
09:25 - property increase the lightness to 50%
09:29 - when we hover over a button it lights up
09:31 - when we click on it it flashes
09:35 - momentarily so with all of these
09:38 - operators I would like all of these
09:39 - operator buttons to be a different color
09:41 - I'll pick orange we're going to give
09:43 - each of these buttons a new class let's
09:46 - head back to our HTML file beginning
09:49 - with the plus button I will set the
09:52 - class equal
09:54 - to operator Das BTN for button
09:59 - so let's copy this class paste it for
10:03 - our minus
10:04 - button multiply
10:06 - button divide button and the clear
10:13 - button now we will select the class of
10:17 - operator BTN for
10:20 - button let's change the background
10:24 - color I'm going to set the background
10:26 - color to be
10:28 - orange
10:30 - I've already pre-picked a
10:34 - color when I hover my cursor over one of
10:37 - the operator buttons I would like the
10:39 - color to be a lighter orange instead of
10:42 - gray let's take our operator button
10:46 - access the hover sudo class I'll
10:48 - increase the lightness to
10:53 - 65% then when I click on one of these
10:56 - buttons I would like the lightness to
10:57 - increase further
10:59 - with the operator button
11:01 - class with the active pseudo class
11:04 - increase the lightness to
11:07 - 75% so when I click on one of the
11:09 - operator buttons it's going to flash
11:12 - momentarily all right and that is all
11:14 - the HTML and CSS that we need now we
11:17 - just need to add functionality let's go
11:19 - to our Javascript
11:20 - file for our Javascript file there's not
11:23 - a lot we have to write first we need to
11:25 - get the display element so what was that
11:28 - ID
11:31 - display const display equals document.
11:36 - getet element by ID get the ID of
11:42 - display we have three functions to
11:45 - create a function for append to display
11:48 - calculate and clear display these three
11:52 - functions function append
11:57 - to display
12:00 - there is one parameter
12:03 - input because we were passing in a
12:05 - character when we call this
12:07 - function then we have a
12:09 - function to clear
12:14 - display then a function to
12:22 - calculate we'll begin with a pen to
12:24 - display all we're going to do is take
12:26 - our display this element access its
12:30 - value append it with plus equals our
12:35 - input and let's see if this works seven
12:40 - I forgot to change the font color of the
12:42 - display so let's do that within our
12:44 - display element let's set the color to
12:47 - be white okay that's much
12:51 - better
12:56 - 7.13 + 5
12:59 - equals okay we know that that works when
13:03 - I click on the clear button I would like
13:04 - to clear this
13:06 - display let's access our display element
13:09 - access the value property set it equal
13:12 - to an empty string
13:17 - 3.14159 when I hit clear it should clear
13:20 - the
13:21 - display lastly we have
13:23 - calculate let's take our display
13:26 - elements value property set it equal to
13:30 - now we're going to use the eval
13:33 - function the eval function takes an
13:35 - expression such as 1 + 2 + 3 and
13:39 - evaluates it and gives a result it's
13:41 - kind of like it's its own built-in
13:43 - calculator so to say evaluate the value
13:47 - within our
13:48 - display display.
13:51 - value so if I add
13:55 - 3.14 plus 1
14:00 - 01 I'm given a result of
14:03 - 4.15 now for some reason if we get an
14:05 - error for example 7 +
14:09 - equals well we have a problem let's go
14:12 - to our
14:13 - console we've encountered an uncaught
14:16 - syntax error because we never finished
14:18 - our equation in the last lesson we
14:20 - learned about error handling this is
14:23 - dangerous code it can cause an error
14:26 - let's surround this code with a tri
14:27 - block
14:29 - we will try this code and catch any
14:32 - errors that
14:34 - happen so we need a catch block now
14:37 - catch any
14:39 - errors we will change the value of the
14:42 - display to equal some text of
14:48 - error all right and that should work
14:53 - 3.14 times equals that results in an
14:57 - error we clear it and then start over
15:02 - what's 1 + 2 + 3 + 4 that would be 10
15:08 - all right everybody so that is a
15:09 - calculator program you can make using
15:12 - JavaScript HTML and CSS impress your
15:18 - friends

Cleaned transcript:

hey what's going on everybody in today's video we're going to create a calculator program using HTML CSS and JavaScript so let's get started all right let's do this thing everybody we have a lot of buttons to create but we'll need a container I will create a div element the div element will have an ID of calculator within this div element we'll create an input element the input element will have an ID of display to display the numbers that we type in I don't want somebody to enter in some text for the display I would like this display to be readon I will add the read only property so we can't type in anything even though I'm trying I will create a nested development that has an ID of keys for all of the keys we need to add a lot of buttons we'll begin with the first I will create a button element the text on the button will be plus I will set the onclick attribute of this button to be a JavaScript function we still need to Define this function eventually we'll create a append to display function we have one argument to pass into this JavaScript function a character of plus that's our first button let's copy this button and paste 13 additional times if I counted right okay the second button will be seven the character we're passing in is seven followed by 8 9 minus 4 5 6 asterisk for multiplication 1 2 three forward slash for division then zero and here are the new buttons I'm Mis counted we need to add one more a DOT for a decimal now we need an equals button we're going to arrange that a little different let's create a button with the text of equals the onclick attribute of this specific button is going to be calculate then we need a button to clear our screen the text on this button will be capital c for clear the on click attribute of this button is going to be clear display and that is all the buttons we'll need so let's save everything and let's go to our CSS stylesheet I'm going to zoom back to 100% first let's style all these buttons I will select all buttons for each button I will set the width to be 100 pixels the height to be 100 pixels so they're even I would like rounded buttons I will set the Border radius property to be 50 pixels so they're circles let's remove the border border none I'll change the background color of the buttons backgroundcolor I'll use hsl values I'll set the lightness to be 30% so they're darker for the text of the button I will set the color to be white for the font size I will set that to be three RM set the font weight to be bold then when I hover my cursor over one of the buttons I would like my cursor to be a pointer cursor pointer now we have to arrange these buttons properly let's select the ID of keys keys is a development that's containing all of the buttons this element all of the buttons are within to arrange these buttons in a grid we can set the display property to be a grid for this calculator I would like four columns to do that I will set the grid template columns property to be we'll use the repeat function of CSS I would like four columns then to arrange these buttons evenly you can use 1 F FR stands for fractional unit 1 FR indicates that each column should take up an even amount of space so now we have Columns of four if I were to set this to three we would have Columns of three but I'm going to use Columns of four because I would like all of the operators on the left hand side I'll set the Gap to be 10 pixels that is the gap between each of the rows then I'll add some padding of 25 pixels that's padding around the keys let's select the ID of calculator I'll add that to the top to keep everything organized with our calculator I will select a font family of Ariel with a backup of s serif let's pick a background color for the calculator I will select something darker I'll set the lightness to be 15% I'll round the corners of the calculator border radius 15 pixels the corners of the calculator are smooth now then I will set a Max width of the calculator to be 500 pixels if any elements overflow I will set that to be hidden this is mostly for our display if we have a very long equation all right next let's select the display right now it's kind of small we are selecting our ID of display let's set the width to be 100% I'll add some padding of 20 pixels for the text of the display I will set the font size to be 5 RM let's text a line left I'll remove the border border none and I'll change the background color I'll just copy this property because I'm lazy let's increase the lightness to 20% then we'll select the body of our document I will remove all margin margin zero I would like the calculator to be in the middle of my window right now it's in the top left corner if you would prefer it up here you can leave it as is I will set the display to be Flex for Flex box justify content in the center for a horizontal alignment for a vertical alignment we can set align items to be Center but we do need to increase the height of the body of the document so it's 100% I will set the height to be 100 VH for 100% the viewport height that should place the calculator in the middle of the body of our document both horizontally and vertically for the background color I'm going to decrease the lightness slightly for the background color I will set the lightness to be like 95% okay let's go to the bottom of our CSS stylesheet when I hover over one of these buttons I would like to increase the lightness so with all buttons with the hover sudo class change the background color so the lightness is 40% instead of 30 now these buttons light up when we hover our cursor over one of the buttons now when I click on one of the buttons I'll increase the lightness further so it flashes we are selecting the active studo class now let's take our background color property increase the lightness to 50% when we hover over a button it lights up when we click on it it flashes momentarily so with all of these operators I would like all of these operator buttons to be a different color I'll pick orange we're going to give each of these buttons a new class let's head back to our HTML file beginning with the plus button I will set the class equal to operator Das BTN for button so let's copy this class paste it for our minus button multiply button divide button and the clear button now we will select the class of operator BTN for button let's change the background color I'm going to set the background color to be orange I've already prepicked a color when I hover my cursor over one of the operator buttons I would like the color to be a lighter orange instead of gray let's take our operator button access the hover sudo class I'll increase the lightness to 65% then when I click on one of these buttons I would like the lightness to increase further with the operator button class with the active pseudo class increase the lightness to 75% so when I click on one of the operator buttons it's going to flash momentarily all right and that is all the HTML and CSS that we need now we just need to add functionality let's go to our Javascript file for our Javascript file there's not a lot we have to write first we need to get the display element so what was that ID display const display equals document. getet element by ID get the ID of display we have three functions to create a function for append to display calculate and clear display these three functions function append to display there is one parameter input because we were passing in a character when we call this function then we have a function to clear display then a function to calculate we'll begin with a pen to display all we're going to do is take our display this element access its value append it with plus equals our input and let's see if this works seven I forgot to change the font color of the display so let's do that within our display element let's set the color to be white okay that's much better 7.13 + 5 equals okay we know that that works when I click on the clear button I would like to clear this display let's access our display element access the value property set it equal to an empty string 3.14159 when I hit clear it should clear the display lastly we have calculate let's take our display elements value property set it equal to now we're going to use the eval function the eval function takes an expression such as 1 + 2 + 3 and evaluates it and gives a result it's kind of like it's its own builtin calculator so to say evaluate the value within our display display. value so if I add 3.14 plus 1 01 I'm given a result of 4.15 now for some reason if we get an error for example 7 + equals well we have a problem let's go to our console we've encountered an uncaught syntax error because we never finished our equation in the last lesson we learned about error handling this is dangerous code it can cause an error let's surround this code with a tri block we will try this code and catch any errors that happen so we need a catch block now catch any errors we will change the value of the display to equal some text of error all right and that should work 3.14 times equals that results in an error we clear it and then start over what's 1 + 2 + 3 + 4 that would be 10 all right everybody so that is a calculator program you can make using JavaScript HTML and CSS impress your friends
