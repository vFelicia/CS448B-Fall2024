With timestamps:

00:02 - all right what's going on people
00:04 - enums enums are a special kind of class
00:07 - that contains a grouping of named
00:09 - integer constants
00:11 - we tend to use enums when we have values
00:13 - that we know will not change
00:15 - so here's an example let's create an
00:16 - enum of planets
00:18 - and we will associate a planet number
00:20 - with each named planet
00:21 - so to create an enum type enum then a
00:24 - unique name
00:25 - kind of like we're creating a class then
00:27 - curly braces
00:28 - so i'm going to add the name of each
00:30 - planet within our solar system beginning
00:32 - with mercury
00:33 - and then separate each with a comma so
00:35 - we have mercury
00:36 - venus earth then just continue on in
00:38 - this pattern
00:42 - this isn't necessary but i like to place
00:44 - each of my members on a new line within
00:46 - an
00:47 - enum i think it's easier to read
00:50 - okay we now have an enum of planets and
00:53 - there's an associated integer
00:55 - with each of these members if we do not
00:57 - explicitly
00:58 - set an integer by default the first
01:01 - member is zero
01:02 - then one two three then you just follow
01:04 - that pattern
01:05 - so let's access one of these members of
01:07 - our enum of planets
01:09 - let's display a message planets
01:12 - dot pluto
01:16 - is a planet so taxes
01:20 - a name of one of these members you type
01:23 - the name of your enum planets
01:25 - dot the name of your named member pluto
01:27 - this will return
01:28 - the name not the integer let's try it
01:32 - pluto is a planet this is no different
01:35 - from using the
01:36 - two string method this will do the same
01:38 - thing pluto
01:40 - is a planet okay now if we need the
01:42 - associated integer
01:43 - with each of these named members we
01:45 - would cast this member
01:47 - as an integer let's change our message
01:49 - around
01:50 - let's say that planets dot mercury
01:54 - is planet number
01:58 - then to access one of the integers
02:00 - stored within a member
02:01 - that would be planets dot the name of a
02:04 - planet
02:05 - mercury and then we will precede this
02:07 - with parentheses
02:09 - and this will convert our named member
02:12 - into an integer so our message
02:15 - is now mercury is planet number zero
02:19 - so these named members always begin with
02:21 - zero but we can change that and set them
02:23 - let's say that mercury equals one venus
02:27 - equals two and then continue on in this
02:29 - pattern
02:33 - let's display pluto as well because
02:36 - pluto is feeling left out
02:38 - planets dot pluto is planet number
02:42 - planets dot pluto then cast as an
02:45 - integer
02:47 - okay mercury is planet number one pluto
02:49 - is planet number nine
02:51 - let's try something a little bit more
02:53 - complex let's create an enum to keep
02:55 - track of the radius of each planet
02:58 - enum planet radius
03:02 - and let me just copy this
03:06 - okay here's the radius of each planet in
03:08 - kilometers
03:09 - mercury is two four three nine
03:13 - six zero five one for venus
03:17 - and then i'll just fast forward the
03:18 - footage you can copy this down if you'd
03:19 - like
03:28 - all right we have the radius and
03:31 - kilometers of each planet
03:33 - so these are in name integer pairs
03:36 - let's create a variable to store the
03:38 - name of one of our planets
03:40 - string name equals what about earth
03:43 - planet radius the name of our enum dot
03:46 - the name of our member earth so if we're
03:49 - going to store this within a string
03:51 - variable we need to use the
03:53 - to string method and then
03:56 - let's display this just to test it let's
03:59 - say
04:00 - planet colon space plus name
04:05 - and this should display just earth
04:07 - planet
04:08 - earth okay let's get the radius of earth
04:13 - int radius equals
04:16 - planet radius dot earth
04:20 - then cast this as an integer
04:26 - console.rightline let's say radius
04:30 - colon space plus radius
04:34 - radius 6371 let me add kilometers
04:39 - so that's kind of the nice thing about
04:41 - enums is that we don't necessarily need
04:43 - to remember all of these numbers
04:45 - it's kind of like restoring variables so
04:47 - to say they are name
04:48 - integer constants that will not change
04:50 - through the life of a program
04:52 - now let's move on to a challenge round
04:54 - let's create a method
04:55 - that will calculate the volume of one of
04:57 - our planets when we pass in a radius
05:00 - public static will return a double
05:05 - and this will be the volume method and
05:08 - there is one parameter
05:09 - the parameter is planet radius
05:12 - and we will name this just radius
05:16 - okay we need to return let's say volume
05:22 - and double volume equals
05:26 - and here's the formula to calculate the
05:29 - volume of a sphere 4.0 divided by 3.0
05:35 - times math dot pi
05:38 - times our radius to the power of 3 so we
05:41 - can use
05:42 - math dot power
05:46 - pass in our radius make sure to cast
05:49 - this as an integer
05:52 - to the power of three
05:56 - and let's call the volume method and
05:58 - store this within a double
06:00 - named volume double volume
06:03 - equals we will invoke the volume method
06:07 - and pass in planet radius
06:10 - dot earth and then we'll display the
06:14 - volume
06:15 - console.writeline volume colon space
06:20 - plus volume and i think that's in
06:24 - cubed kilometers
06:29 - all right and the volume of earth
06:32 - is whatever number this is one zero
06:35 - eight three something something
06:36 - something something cubed kilometers
06:40 - so yeah those are enums they're like a
06:41 - special class that contains a set
06:44 - or grouping of named integer constants
06:47 - we tend to use enums when we have values
06:49 - that we know will not change
06:51 - and to get the integer value from an
06:53 - item you must explicitly convert it to
06:56 - an
06:56 - integer so yeah those are enums if you
06:59 - found this video helpful please be sure
07:00 - to smash that like button
07:02 - leave a random comment down below and
07:04 - subscribe if you'd like to become a
07:05 - fellow bro

Cleaned transcript:

all right what's going on people enums enums are a special kind of class that contains a grouping of named integer constants we tend to use enums when we have values that we know will not change so here's an example let's create an enum of planets and we will associate a planet number with each named planet so to create an enum type enum then a unique name kind of like we're creating a class then curly braces so i'm going to add the name of each planet within our solar system beginning with mercury and then separate each with a comma so we have mercury venus earth then just continue on in this pattern this isn't necessary but i like to place each of my members on a new line within an enum i think it's easier to read okay we now have an enum of planets and there's an associated integer with each of these members if we do not explicitly set an integer by default the first member is zero then one two three then you just follow that pattern so let's access one of these members of our enum of planets let's display a message planets dot pluto is a planet so taxes a name of one of these members you type the name of your enum planets dot the name of your named member pluto this will return the name not the integer let's try it pluto is a planet this is no different from using the two string method this will do the same thing pluto is a planet okay now if we need the associated integer with each of these named members we would cast this member as an integer let's change our message around let's say that planets dot mercury is planet number then to access one of the integers stored within a member that would be planets dot the name of a planet mercury and then we will precede this with parentheses and this will convert our named member into an integer so our message is now mercury is planet number zero so these named members always begin with zero but we can change that and set them let's say that mercury equals one venus equals two and then continue on in this pattern let's display pluto as well because pluto is feeling left out planets dot pluto is planet number planets dot pluto then cast as an integer okay mercury is planet number one pluto is planet number nine let's try something a little bit more complex let's create an enum to keep track of the radius of each planet enum planet radius and let me just copy this okay here's the radius of each planet in kilometers mercury is two four three nine six zero five one for venus and then i'll just fast forward the footage you can copy this down if you'd like all right we have the radius and kilometers of each planet so these are in name integer pairs let's create a variable to store the name of one of our planets string name equals what about earth planet radius the name of our enum dot the name of our member earth so if we're going to store this within a string variable we need to use the to string method and then let's display this just to test it let's say planet colon space plus name and this should display just earth planet earth okay let's get the radius of earth int radius equals planet radius dot earth then cast this as an integer console.rightline let's say radius colon space plus radius radius 6371 let me add kilometers so that's kind of the nice thing about enums is that we don't necessarily need to remember all of these numbers it's kind of like restoring variables so to say they are name integer constants that will not change through the life of a program now let's move on to a challenge round let's create a method that will calculate the volume of one of our planets when we pass in a radius public static will return a double and this will be the volume method and there is one parameter the parameter is planet radius and we will name this just radius okay we need to return let's say volume and double volume equals and here's the formula to calculate the volume of a sphere 4.0 divided by 3.0 times math dot pi times our radius to the power of 3 so we can use math dot power pass in our radius make sure to cast this as an integer to the power of three and let's call the volume method and store this within a double named volume double volume equals we will invoke the volume method and pass in planet radius dot earth and then we'll display the volume console.writeline volume colon space plus volume and i think that's in cubed kilometers all right and the volume of earth is whatever number this is one zero eight three something something something something cubed kilometers so yeah those are enums they're like a special class that contains a set or grouping of named integer constants we tend to use enums when we have values that we know will not change and to get the integer value from an item you must explicitly convert it to an integer so yeah those are enums if you found this video helpful please be sure to smash that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
