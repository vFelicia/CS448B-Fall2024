With timestamps:

00:00 - yo what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to explain
00:05 - multi-processing in python so
00:07 - sit back relax and enjoy the show
00:12 - what's up let's talk about
00:13 - multi-processing multi-processing is
00:16 - the act of running tasks in parallel
00:19 - on a different cpu cores it's different
00:21 - from multi-threading
00:22 - although it sounds similar because with
00:24 - multi-threading
00:25 - we're limited to running one thread at a
00:28 - time
00:29 - because of the gi l that lock which is
00:32 - used for threading
00:33 - we can run threads concurrently but not
00:35 - in parallel
00:36 - however with multi-processing we can
00:38 - create
00:39 - processes and we can run each process in
00:42 - parallel
00:43 - on a different cpu course so with
00:45 - multiprocessing
00:46 - it's better for tasks that are cpu bound
00:50 - where you need heavy cpu usage whereas
00:53 - multi-threading that is better for io
00:56 - bound tasks where you do a lot of
00:57 - waiting around
00:58 - so before we begin i recommend these two
01:00 - imports
01:01 - multi-processing and time let's begin
01:04 - quick note if you're running the windows
01:06 - operating system you'll probably need to
01:08 - add this line
01:09 - if name is equal to main
01:12 - so when we run a program we have a main
01:15 - process
01:16 - that is running and if we create a child
01:18 - process from that process
01:20 - it's going to copy the module that we're
01:22 - currently working with
01:23 - and that child process will create its
01:26 - own children processes and it's going to
01:28 - be a problem
01:29 - so we're going to add this line if name
01:32 - is equal to main
01:33 - so when we create a child process it
01:35 - will copy our module but it's not going
01:37 - to execute it
01:38 - so let's create a main function and a
01:40 - majority of our code is going to be
01:42 - within our main function
01:44 - if you're running a different operating
01:45 - system you probably don't have to do
01:47 - this but if you're running windows
01:48 - you probably will now with
01:50 - multi-processing multi-processing is
01:52 - better for tasks or functions
01:54 - that are cpu bound where they require
01:57 - heavy cpu usage
01:59 - let's say that we have a function named
02:01 - counter
02:02 - and we'll pass in a number to count up
02:04 - to but the number we're going to pass in
02:06 - is a ridiculously large number like a
02:09 - billion so let's create a function that
02:11 - will count
02:11 - from zero so count equals zero and
02:15 - while count is less than
02:18 - our number that we pass in we will
02:20 - increment our counter
02:22 - by one so that is the function that
02:25 - we'll call with our processes that we
02:27 - create
02:28 - now within our main function we'll
02:30 - create a process
02:31 - and to do that you'll need the
02:33 - multi-processing module
02:34 - so import process and cpu count and
02:37 - we'll save this for a little bit later
02:39 - to create a process let's say we have
02:41 - process a
02:42 - a equals process this step is very
02:46 - similar to creating a thread
02:48 - we have a target our target will be our
02:51 - function of counter
02:54 - and if we have arguments we will pass
02:56 - those in
02:57 - so remember with our arguments we have
02:59 - to pass in a tuple
03:00 - since we only have one argument to pass
03:03 - in
03:04 - to differentiate this from an expression
03:06 - we have to add a comma at the end
03:08 - so our number let's say is one billion
03:11 - so that's a million ten million one
03:15 - hundred million
03:16 - one billion let me just verify that okay
03:18 - so that's one billion
03:20 - we're going to count from zero to a
03:22 - billion
03:23 - and in order to start this process a
03:26 - my process use the start function
03:30 - and then i will use some process
03:33 - synchronization by using the
03:34 - join function my main process is going
03:38 - to wait around
03:38 - for my child process of a to finish
03:41 - before continuing
03:43 - and let's print our performance counter
03:46 - so we'll print finished
03:50 - in let's say
03:53 - time dot performance counter
04:00 - seconds okay so let's see how long it'll
04:03 - take to count from zero to
04:05 - a billion using one process i fast
04:07 - forwarded this video but it took my
04:09 - program
04:10 - 56.7 seconds to count from zero to a
04:13 - billion
04:14 - but we can speed this up by using
04:16 - multi-processing let's create a second
04:18 - process named b
04:21 - and i'm going to divide the amount of
04:23 - work in half so
04:24 - each process will count to 500 million
04:27 - half of a billion so let's change a to b
04:32 - and i'm going to group these start
04:33 - functions together
04:37 - just so it's easier to read and then b
04:39 - dot join just to synchronize everything
04:42 - okay and then let's change 1 billion to
04:46 - 500 million for each it's the same
04:49 - amount of work but divided among workers
04:52 - so that is 500 million let's see how
04:54 - well it runs this time
04:56 - so it took my program about 40.3 seconds
04:59 - to finish counting from
05:01 - zero to a billion but i divided that
05:03 - task among
05:04 - different processes each of my two
05:06 - processes counted from zero to
05:08 - 500 million this time so this time let's
05:11 - create
05:11 - four processes so we have
05:15 - a b c and d
05:19 - and we'll need to start them
05:24 - and i'm going to join them
05:28 - now this might not actually speed it up
05:30 - for you and i'll explain why
05:31 - later it depends on the amount of cpu
05:34 - cores that you have
05:35 - okay so oh let's change this to so 250
05:39 - million for each
05:42 - okay see you in a couple seconds
05:46 - okay welcome back so on my computer when
05:49 - i ran
05:49 - four processes and each was counting up
05:52 - to 250 million
05:54 - i could finish my program in 27.3
05:57 - seconds now for me if i created
06:00 - more processes than this it would
06:02 - probably take longer and here's why
06:04 - so you can print the cpu count of your
06:07 - computer using
06:08 - this function of cpu count so if i were
06:11 - to print whatever
06:12 - this function returns i can get the
06:15 - count of the number of additional
06:17 - processes that i can run
06:18 - for the time being i'm just going to
06:20 - comment out this start function because
06:22 - i just want to print whatever this value
06:24 - is so my cpu count on my computer
06:28 - is four so i can run four additional
06:31 - processes
06:32 - but let's attempt to run eight processes
06:35 - so i'm going to copy all these and let's
06:38 - say that we have
06:39 - e f g
06:43 - and h and we will start all those two
06:46 - so give me a second just to start them
06:50 - so a b c d e
06:54 - f g
06:58 - h and then i'm going to join all of them
07:04 - e f g
07:09 - and h okay so
07:12 - let's run this now oh and change the
07:14 - arguments do
07:15 - i keep forgetting to do that so let's
07:17 - say 125 for each
07:20 - so 125 million times 8 is
07:23 - 1 billion okay see you in a bit
07:27 - all right welcome back this time when i
07:29 - had eight processes working
07:31 - it actually took me longer than when i
07:33 - had four processes working
07:35 - when i had four processes working it
07:36 - took me about 27 seconds
07:39 - this time it took 30 seconds when i had
07:41 - eight processes working
07:42 - that's because i had more processes than
07:45 - my cpu count
07:46 - and that's partially because whenever
07:48 - you create a process
07:50 - there's significant overhead with
07:52 - beginning and
07:53 - destroying a process and if i can only
07:55 - run four processes on my computer at
07:58 - one time well then i'm creating
08:00 - additional processes
08:01 - to no extra benefit it's actually
08:03 - hindering the performance of the
08:05 - computer
08:05 - because i'm creating all of these
08:07 - additional processes when it really
08:09 - doesn't help me
08:10 - in conclusion multiprocessing is the
08:12 - concept of
08:13 - running tasks in parallel on different
08:16 - cpu cores
08:17 - it's similar but different from
08:19 - multi-threading because with
08:20 - multi-threading
08:21 - we can run tasks concurrently but
08:23 - they're all taking turns because of the
08:26 - gil with multi-processing we can run
08:29 - all of these different tasks together in
08:31 - parallel
08:32 - multi-processing is better for cpu bound
08:35 - tasks
08:35 - where a task has heavy cpu usage
08:39 - and multi-threading is better for i o
08:41 - bound tasks
08:42 - tasks that involve a lot of waiting
08:44 - around so that's multi-processing if you
08:46 - would like a copy of all this code i
08:48 - will post all of this to the comment
08:49 - section down below
08:51 - but yeah that is how multi-processing
08:53 - works in python
08:55 - hey you yeah i'm talking to you if you
08:58 - learned something new
08:59 - then help me help you in three easy
09:01 - steps
09:02 - by smashing that like button drop a
09:04 - comment down below
09:05 - and subscribe if you'd like to become a
09:07 - fellow bro
09:07 - [Music]
09:30 - you

Cleaned transcript:

yo what's going on everybody it's bro hope you're doing well and in this video i'm going to explain multiprocessing in python so sit back relax and enjoy the show what's up let's talk about multiprocessing multiprocessing is the act of running tasks in parallel on a different cpu cores it's different from multithreading although it sounds similar because with multithreading we're limited to running one thread at a time because of the gi l that lock which is used for threading we can run threads concurrently but not in parallel however with multiprocessing we can create processes and we can run each process in parallel on a different cpu course so with multiprocessing it's better for tasks that are cpu bound where you need heavy cpu usage whereas multithreading that is better for io bound tasks where you do a lot of waiting around so before we begin i recommend these two imports multiprocessing and time let's begin quick note if you're running the windows operating system you'll probably need to add this line if name is equal to main so when we run a program we have a main process that is running and if we create a child process from that process it's going to copy the module that we're currently working with and that child process will create its own children processes and it's going to be a problem so we're going to add this line if name is equal to main so when we create a child process it will copy our module but it's not going to execute it so let's create a main function and a majority of our code is going to be within our main function if you're running a different operating system you probably don't have to do this but if you're running windows you probably will now with multiprocessing multiprocessing is better for tasks or functions that are cpu bound where they require heavy cpu usage let's say that we have a function named counter and we'll pass in a number to count up to but the number we're going to pass in is a ridiculously large number like a billion so let's create a function that will count from zero so count equals zero and while count is less than our number that we pass in we will increment our counter by one so that is the function that we'll call with our processes that we create now within our main function we'll create a process and to do that you'll need the multiprocessing module so import process and cpu count and we'll save this for a little bit later to create a process let's say we have process a a equals process this step is very similar to creating a thread we have a target our target will be our function of counter and if we have arguments we will pass those in so remember with our arguments we have to pass in a tuple since we only have one argument to pass in to differentiate this from an expression we have to add a comma at the end so our number let's say is one billion so that's a million ten million one hundred million one billion let me just verify that okay so that's one billion we're going to count from zero to a billion and in order to start this process a my process use the start function and then i will use some process synchronization by using the join function my main process is going to wait around for my child process of a to finish before continuing and let's print our performance counter so we'll print finished in let's say time dot performance counter seconds okay so let's see how long it'll take to count from zero to a billion using one process i fast forwarded this video but it took my program 56.7 seconds to count from zero to a billion but we can speed this up by using multiprocessing let's create a second process named b and i'm going to divide the amount of work in half so each process will count to 500 million half of a billion so let's change a to b and i'm going to group these start functions together just so it's easier to read and then b dot join just to synchronize everything okay and then let's change 1 billion to 500 million for each it's the same amount of work but divided among workers so that is 500 million let's see how well it runs this time so it took my program about 40.3 seconds to finish counting from zero to a billion but i divided that task among different processes each of my two processes counted from zero to 500 million this time so this time let's create four processes so we have a b c and d and we'll need to start them and i'm going to join them now this might not actually speed it up for you and i'll explain why later it depends on the amount of cpu cores that you have okay so oh let's change this to so 250 million for each okay see you in a couple seconds okay welcome back so on my computer when i ran four processes and each was counting up to 250 million i could finish my program in 27.3 seconds now for me if i created more processes than this it would probably take longer and here's why so you can print the cpu count of your computer using this function of cpu count so if i were to print whatever this function returns i can get the count of the number of additional processes that i can run for the time being i'm just going to comment out this start function because i just want to print whatever this value is so my cpu count on my computer is four so i can run four additional processes but let's attempt to run eight processes so i'm going to copy all these and let's say that we have e f g and h and we will start all those two so give me a second just to start them so a b c d e f g h and then i'm going to join all of them e f g and h okay so let's run this now oh and change the arguments do i keep forgetting to do that so let's say 125 for each so 125 million times 8 is 1 billion okay see you in a bit all right welcome back this time when i had eight processes working it actually took me longer than when i had four processes working when i had four processes working it took me about 27 seconds this time it took 30 seconds when i had eight processes working that's because i had more processes than my cpu count and that's partially because whenever you create a process there's significant overhead with beginning and destroying a process and if i can only run four processes on my computer at one time well then i'm creating additional processes to no extra benefit it's actually hindering the performance of the computer because i'm creating all of these additional processes when it really doesn't help me in conclusion multiprocessing is the concept of running tasks in parallel on different cpu cores it's similar but different from multithreading because with multithreading we can run tasks concurrently but they're all taking turns because of the gil with multiprocessing we can run all of these different tasks together in parallel multiprocessing is better for cpu bound tasks where a task has heavy cpu usage and multithreading is better for i o bound tasks tasks that involve a lot of waiting around so that's multiprocessing if you would like a copy of all this code i will post all of this to the comment section down below but yeah that is how multiprocessing works in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
