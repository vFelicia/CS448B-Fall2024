With timestamps:

00:00 - hey yeah so today I got to explain a
00:02 - checkboxes in pqt 5 to work with
00:05 - checkboxes we will need the following
00:07 - import from the module of widgets from
00:10 - pyqt5 import Q check
00:15 - box to work with different states we
00:18 - will also need the following import from
00:22 - PI qt5 do QT
00:26 - core import QT this module of QT core it
00:31 - contains non- goey classes relevant to
00:34 - Pi qt5 applications so be sure that you
00:37 - get this import as well to create a
00:39 - checkbox I will create this within the
00:42 - Constructor of my main window we will
00:44 - create a checkbox with self the name of
00:47 - the checkbox which I will name
00:49 - checkbox
00:51 - equals call The Constructor of the Q
00:54 - checkbox class the first argument is
00:57 - going to be the text of the checkbox
01:00 - what do you want the check boox to say
01:02 - let's ask do you like
01:07 - food the second argument is the parent
01:09 - widget where we will be adding this
01:11 - checkbox let's say self self will apply
01:15 - to this window we could use a layout
01:17 - manager but I want to keep this lesson
01:19 - as simple as possible we're just going
01:21 - to focus on checkboxes and their
01:24 - functionality so we should have a
01:26 - checkbox however we can barely see it
01:29 - the font is really really small I have a
01:31 - method to initialize the user
01:34 - interface that's where we'll set the
01:36 - stylesheet and the geometry of our
01:39 - checkbox let's set the stylesheet self
01:42 - dot the name of the checkbox
01:45 - checkbox do set Styles sheet method then
01:51 - we can pass in some CSS like properties
01:54 - let's set the font size to be 30 pixels
02:00 - and I will pick a font
02:02 - family font family
02:08 - aial oh and we should change the
02:11 - geometry of the label it's getting cut
02:14 - off self dot the name of the
02:18 - checkbox which is
02:20 - checkbox let's set the
02:23 - geometry pass in some X and Y
02:25 - coordinates for the placement as well as
02:28 - a width and the height I will pick 500
02:32 - and
02:33 - 100 uh maybe I'll move it a little more
02:36 - to the right by 10
02:38 - pixels that's pretty good our checkbox
02:42 - has an initial State it's normally
02:44 - unchecked that's the default Behavior
02:47 - but we could set that to be checked with
02:49 - the following method when the window
02:51 - loads let's take our checkbox self.
02:55 - checkbox call the set checked method
02:59 - then pass in true so then when the
03:02 - window loads the checkbox is already
03:05 - checked but let's keep that as
03:08 - false now this checkbox it doesn't do
03:12 - anything when I check it let's add some
03:16 - functionality we'll take our checkbox
03:19 - connect a signal to a
03:21 - slot the slot can be a function or a
03:24 - method let's define a method within our
03:27 - main window class let's name this me
03:30 - method
03:31 - checkbox changed we will call this
03:34 - method when the state of our checkbox
03:37 - changes there is one parameter besides
03:40 - self a state now the state parameter is
03:44 - going to be provided to us when we
03:46 - interact with our checkbox when we check
03:48 - the checkbox let's print something like
03:50 - a test message you like
03:55 - food we have to connect a signal of
03:58 - State changed to a slot of checkbox
04:01 - changed we will take self dot the name
04:05 - of the checkbox which is
04:07 - checkbox the signal will be State
04:11 - changed to connect a slot to a signal we
04:14 - use the connect method then pass in a
04:18 - function or method name so we are
04:20 - working with
04:21 - methods this method belongs to the
04:24 - window class we'll prefix the method
04:27 - name with self self. checkbox
04:31 - changed so when I run this program when
04:34 - I check the checkbox we execute this
04:37 - method you like food now when I uncheck
04:40 - it I instead would like to display you
04:43 - do not like
04:45 - food so that's where our state is going
04:47 - to come in I'm going to print our state
04:51 - just to see what it
04:52 - is our state is going to be a
04:57 - value when we check the check boox our
05:01 - state has a value of two when we uncheck
05:04 - it it has a value of zero 0 means
05:07 - unchecked two means checked there's also
05:10 - one for partially checked but that's not
05:13 - going to be relevant to this topic so
05:16 - zero or two we could add an if statement
05:19 - such as if state is equal to two then
05:23 - print you like food however that's not
05:26 - really readable other developers looking
05:28 - over your code are going to understand
05:30 - what two is by looking at it instead
05:33 - let's use the following we will access
05:35 - the class of
05:37 - QT there's a built-in constant of
05:42 - checked this also equals two but it's
05:45 - more readable it's a constant so if
05:48 - state is equal to QT checked print you
05:52 - like
05:53 - food I will check the checkbox you like
05:56 - food when I uncheck it nothing happens
06:00 - let's add an else
06:02 - statement else let's
06:04 - print you do not like
06:09 - food so then when I check the checkbox
06:12 - we print you like food when I uncheck it
06:16 - we print you do not like food you like
06:19 - food you do not like food you like food
06:22 - you do not like
06:23 - food all right everybody so that is an
06:26 - introduction to checkboxes in pi qt5

Cleaned transcript:

hey yeah so today I got to explain a checkboxes in pqt 5 to work with checkboxes we will need the following import from the module of widgets from pyqt5 import Q check box to work with different states we will also need the following import from PI qt5 do QT core import QT this module of QT core it contains non goey classes relevant to Pi qt5 applications so be sure that you get this import as well to create a checkbox I will create this within the Constructor of my main window we will create a checkbox with self the name of the checkbox which I will name checkbox equals call The Constructor of the Q checkbox class the first argument is going to be the text of the checkbox what do you want the check boox to say let's ask do you like food the second argument is the parent widget where we will be adding this checkbox let's say self self will apply to this window we could use a layout manager but I want to keep this lesson as simple as possible we're just going to focus on checkboxes and their functionality so we should have a checkbox however we can barely see it the font is really really small I have a method to initialize the user interface that's where we'll set the stylesheet and the geometry of our checkbox let's set the stylesheet self dot the name of the checkbox checkbox do set Styles sheet method then we can pass in some CSS like properties let's set the font size to be 30 pixels and I will pick a font family font family aial oh and we should change the geometry of the label it's getting cut off self dot the name of the checkbox which is checkbox let's set the geometry pass in some X and Y coordinates for the placement as well as a width and the height I will pick 500 and 100 uh maybe I'll move it a little more to the right by 10 pixels that's pretty good our checkbox has an initial State it's normally unchecked that's the default Behavior but we could set that to be checked with the following method when the window loads let's take our checkbox self. checkbox call the set checked method then pass in true so then when the window loads the checkbox is already checked but let's keep that as false now this checkbox it doesn't do anything when I check it let's add some functionality we'll take our checkbox connect a signal to a slot the slot can be a function or a method let's define a method within our main window class let's name this me method checkbox changed we will call this method when the state of our checkbox changes there is one parameter besides self a state now the state parameter is going to be provided to us when we interact with our checkbox when we check the checkbox let's print something like a test message you like food we have to connect a signal of State changed to a slot of checkbox changed we will take self dot the name of the checkbox which is checkbox the signal will be State changed to connect a slot to a signal we use the connect method then pass in a function or method name so we are working with methods this method belongs to the window class we'll prefix the method name with self self. checkbox changed so when I run this program when I check the checkbox we execute this method you like food now when I uncheck it I instead would like to display you do not like food so that's where our state is going to come in I'm going to print our state just to see what it is our state is going to be a value when we check the check boox our state has a value of two when we uncheck it it has a value of zero 0 means unchecked two means checked there's also one for partially checked but that's not going to be relevant to this topic so zero or two we could add an if statement such as if state is equal to two then print you like food however that's not really readable other developers looking over your code are going to understand what two is by looking at it instead let's use the following we will access the class of QT there's a builtin constant of checked this also equals two but it's more readable it's a constant so if state is equal to QT checked print you like food I will check the checkbox you like food when I uncheck it nothing happens let's add an else statement else let's print you do not like food so then when I check the checkbox we print you like food when I uncheck it we print you do not like food you like food you do not like food you like food you do not like food all right everybody so that is an introduction to checkboxes in pi qt5
