With timestamps:

00:00 - what is going on everybody in today's
00:02 - topic we're going to be creating a
00:04 - countdown timer in Python we'll be using
00:06 - what we learned in the previous topics
00:08 - let's begin we'll need to import the
00:11 - time module there's a pretty cool
00:13 - function within the time module that is
00:16 - the sleep function type time dot sleep
00:19 - add a set of parentheses
00:21 - within the set of parentheses our
00:24 - program will essentially sleep for a
00:26 - given amount of seconds like three
00:29 - after three seconds let's print
00:31 - something this is just a demonstration
00:34 - times up
00:39 - when I execute this code nothing happens
00:41 - for three seconds but after three
00:43 - seconds passes it displays our message
00:45 - time's up so you can use the sleep
00:48 - function of the time module to sleep for
00:50 - a given amount of time
00:52 - we will ask the user how long would they
00:55 - like to set the timer for
00:56 - we will create a variable
00:58 - let's say my time my time will be in
01:03 - seconds
01:04 - we will create a prompt
01:06 - enter the time in seconds
01:11 - then we should Typecast our input as an
01:14 - integer
01:17 - we'll need to create a loop we could use
01:19 - either a while loop or a for Loop
01:21 - there's a lot of overlap where you could
01:23 - use either one I'll use a for Loop in
01:25 - this case
01:26 - four will need some sort of counter X
01:29 - in our range
01:33 - 0 through
01:35 - my time
01:39 - after each iteration
01:41 - we will sleep for one second Let's test
01:44 - what we have so far
01:46 - I would like to sleep for three seconds
01:51 - I think that's approximately three but
01:54 - now we are going to print whatever X's
01:57 - print x x is our counter
02:02 - zero one two times up we're getting
02:07 - somewhere
02:08 - but I would like to count backwards what
02:11 - we could do is enclose our range
02:13 - function within the Reversed function
02:18 - but another technique that we can use is
02:20 - by using a step
02:22 - let's replace zero with my time
02:26 - then end at zero but we will set the
02:30 - step to be negative one
02:31 - then we can increment backwards using
02:34 - this function
02:35 - that's another technique too to count
02:37 - backwards so let's wait for three
02:39 - seconds three two one time's up
02:44 - now let's display a digital clock of
02:47 - some sort but we would have to calculate
02:49 - how many hours minutes and seconds there
02:51 - are so let's calculate seconds seconds
02:54 - equals
02:56 - x x is our counter remember
02:59 - modulus 60.
03:02 - within our print statement we'll use an
03:04 - F string
03:05 - we are displaying hours minutes and
03:08 - seconds
03:09 - I'll add some placeholders for each of
03:10 - these fields we have seconds
03:13 - with our digital clock we can't go above
03:16 - 60 for either seconds or minutes that's
03:19 - why I'm using modulus 60. the modulus
03:21 - operator gives you the remainder of any
03:23 - division let's begin at 11.
03:26 - so 11 10 9. so it is counting down but I
03:31 - would like to add some zero padding and
03:33 - we can do that with the format specifier
03:36 - after seconds I will add colon
03:39 - I need to display two digits then zero
03:43 - pad those digits let's try that again
03:45 - I will wait for 11 seconds 11 10 9. yeah
03:50 - and we do have some zero padding so
03:53 - that's looking more and more like a
03:54 - digital clock
03:55 - let's add minutes then
03:57 - so to calculate minutes let's assign
04:00 - variable minutes equal to
04:04 - x divided by 60 because there's 60
04:07 - seconds within a minute but then I'm
04:09 - going to type cast the result as an
04:12 - integer
04:15 - modulus 60. we would not like this field
04:18 - of minutes to go above 60.
04:21 - so let's add a placeholder we're
04:24 - displaying minutes
04:25 - format specifier zero two
04:29 - now I'm going to wait for 65 seconds
04:32 - that is one minute and five seconds
04:35 - then I just want to be sure that we go
04:37 - below a minute
04:39 - yep it's working
04:41 - then let's calculate hours oh by the way
04:43 - to stop your program from running hit
04:45 - this red square up in the corner
04:47 - let's calculate hours
04:49 - equals
04:51 - x divided by three thousand six hundred
04:54 - there's three thousand six hundred
04:56 - seconds in an hour
04:59 - then we will Typecast the result as an
05:02 - integer
05:06 - within our F string we will display
05:09 - hours format specifier zero two
05:14 - then I will run this program let's wait
05:16 - for three thousand six hundred five
05:18 - seconds that is one hour and five
05:21 - seconds
05:23 - and I just want to be sure that we go
05:25 - below one hour
05:27 - yeah all right so that works
05:30 - so the reason that I didn't add modulus
05:32 - 24 I don't have days within my F string
05:36 - we can display any amount of hours I
05:39 - will exclude modulus 24.
05:42 - all right everybody well I thought
05:43 - that'd be some good practice with
05:45 - working with loops we should try and do
05:47 - as many exercises as we can and yeah
05:49 - that is a countdown timer program in
05:52 - Python

Cleaned transcript:

what is going on everybody in today's topic we're going to be creating a countdown timer in Python we'll be using what we learned in the previous topics let's begin we'll need to import the time module there's a pretty cool function within the time module that is the sleep function type time dot sleep add a set of parentheses within the set of parentheses our program will essentially sleep for a given amount of seconds like three after three seconds let's print something this is just a demonstration times up when I execute this code nothing happens for three seconds but after three seconds passes it displays our message time's up so you can use the sleep function of the time module to sleep for a given amount of time we will ask the user how long would they like to set the timer for we will create a variable let's say my time my time will be in seconds we will create a prompt enter the time in seconds then we should Typecast our input as an integer we'll need to create a loop we could use either a while loop or a for Loop there's a lot of overlap where you could use either one I'll use a for Loop in this case four will need some sort of counter X in our range 0 through my time after each iteration we will sleep for one second Let's test what we have so far I would like to sleep for three seconds I think that's approximately three but now we are going to print whatever X's print x x is our counter zero one two times up we're getting somewhere but I would like to count backwards what we could do is enclose our range function within the Reversed function but another technique that we can use is by using a step let's replace zero with my time then end at zero but we will set the step to be negative one then we can increment backwards using this function that's another technique too to count backwards so let's wait for three seconds three two one time's up now let's display a digital clock of some sort but we would have to calculate how many hours minutes and seconds there are so let's calculate seconds seconds equals x x is our counter remember modulus 60. within our print statement we'll use an F string we are displaying hours minutes and seconds I'll add some placeholders for each of these fields we have seconds with our digital clock we can't go above 60 for either seconds or minutes that's why I'm using modulus 60. the modulus operator gives you the remainder of any division let's begin at 11. so 11 10 9. so it is counting down but I would like to add some zero padding and we can do that with the format specifier after seconds I will add colon I need to display two digits then zero pad those digits let's try that again I will wait for 11 seconds 11 10 9. yeah and we do have some zero padding so that's looking more and more like a digital clock let's add minutes then so to calculate minutes let's assign variable minutes equal to x divided by 60 because there's 60 seconds within a minute but then I'm going to type cast the result as an integer modulus 60. we would not like this field of minutes to go above 60. so let's add a placeholder we're displaying minutes format specifier zero two now I'm going to wait for 65 seconds that is one minute and five seconds then I just want to be sure that we go below a minute yep it's working then let's calculate hours oh by the way to stop your program from running hit this red square up in the corner let's calculate hours equals x divided by three thousand six hundred there's three thousand six hundred seconds in an hour then we will Typecast the result as an integer within our F string we will display hours format specifier zero two then I will run this program let's wait for three thousand six hundred five seconds that is one hour and five seconds and I just want to be sure that we go below one hour yeah all right so that works so the reason that I didn't add modulus 24 I don't have days within my F string we can display any amount of hours I will exclude modulus 24. all right everybody well I thought that'd be some good practice with working with loops we should try and do as many exercises as we can and yeah that is a countdown timer program in Python
