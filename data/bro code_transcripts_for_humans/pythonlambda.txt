With timestamps:

00:00 - yo what's going on everybody it's bro
00:02 - hope you're doing well in today's video
00:04 - i'm going to explain
00:05 - lambda functions in python so sit back
00:07 - relax
00:08 - and enjoy the show if you wouldn't mind
00:12 - please like comment and subscribe one
00:15 - like equals one prayer for the youtube
00:17 - algorithm
00:19 - all right ladies and gentlemen let's
00:21 - talk about lambda functions
00:23 - these are functions that are written in
00:24 - one line and use this
00:26 - lambda keyword they accept any number of
00:28 - arguments but they only have
00:30 - one expression think of it as a shortcut
00:32 - they're useful if you need a function
00:34 - for only one use or a short period of
00:36 - time
00:36 - and then you're just planning on
00:38 - throwing away that function afterwards
00:40 - here's the syntax for a lambda function
00:42 - you type lambda
00:43 - you add the parameters followed by a
00:45 - colon and then your expression
00:47 - let's say we have this function named
00:48 - double double accepts one argument that
00:50 - we will name
00:51 - x we're returning x times two
00:53 - effectively doubling it
00:55 - so if i need to call this function i
00:57 - would type double
00:58 - and then pass in a number as an argument
01:00 - so the result if i pass in 5 would be
01:02 - 10.
01:03 - now let's write the same function but
01:04 - instead write it as a lambda function
01:07 - so let me turn these lines into comments
01:10 - now the first step
01:11 - is to type lambda then our parameters we
01:14 - only have one parameter and that is x
01:17 - colon and then our expression we would
01:19 - like to return x
01:20 - times two now this lambda function is
01:22 - going to return a function object and we
01:24 - can assign that much like what we do
01:26 - with variables
01:27 - let's say double equals lambda x colon
01:30 - x times two and in order to call this
01:33 - lambda function
01:34 - we're going to type double then a set of
01:37 - parentheses to
01:38 - call this function and then pass in our
01:39 - arguments so let's say that x
01:42 - equals 5 and then we're going to double
01:44 - it and the result is 10.
01:46 - so that's the syntax for a lambda
01:48 - function you type lambda
01:49 - your parameters colon and then your
01:51 - expression this time let's say that we
01:53 - have two parameters we have two numbers
01:55 - that we want to multiply by each other
01:58 - so let's say that
01:59 - this function will be called multiply
02:01 - multiply
02:02 - equals lambda x
02:05 - comma y because we have two parameters
02:09 - colon followed by our expression we
02:11 - would like to multiply
02:12 - x times y and that is it
02:15 - now in order to call multiply we need to
02:17 - pass in two arguments
02:19 - if i were to pass in just one well we'll
02:21 - have a type error
02:22 - so let's pass in five and maybe six and
02:25 - the result
02:26 - is 30. now let's try three parameters
02:29 - let's say we would like to add three
02:31 - numbers together
02:32 - let's say add lambda x
02:36 - comma y comma z so we have all of our
02:39 - parameters
02:40 - we have our colon here and then we need
02:42 - our expression
02:44 - x plus y plus z
02:47 - and let's add 5 six and seven together
02:50 - the result is 18. now let's try
02:53 - something a little more complex let's
02:55 - pass in some strings this time
02:57 - i'll create a function named full name
03:00 - full name
03:01 - equals lambda
03:04 - first name comma
03:07 - last name the expression is going to be
03:10 - first name plus perhaps a space
03:14 - plus last name now i need to pass in a
03:18 - first name and a last name
03:20 - full name and you can use your own name
03:23 - for this example if you want
03:24 - let's say bro comma code
03:30 - yep this will print your first name and
03:32 - your last name to the console window
03:34 - now let's take it a step further let's
03:36 - say we would like to check somebody's
03:37 - age once using a lambda function we
03:39 - would like to check to see if they're 18
03:41 - or older because they're signing up for
03:42 - something perhaps let's say a credit
03:44 - card
03:45 - so let's create a function object age
03:48 - check equals lambda we have one
03:51 - parameter
03:52 - somebody's age colon and then our
03:54 - expression
03:56 - let's type true if age is greater
04:00 - than or equal to 18
04:03 - else false to call this age track
04:07 - function
04:08 - we need to pass in an age let's say the
04:11 - user is 12
04:13 - and they're trying to sign up for a
04:14 - credit card while this will return false
04:16 - let's say they're 18 now and this will
04:19 - return
04:20 - true so that's a lambda function it's a
04:23 - function
04:23 - that is written in one line using this
04:25 - lambda keyword
04:26 - they accept any number of arguments but
04:28 - they only have one expression
04:30 - think of it like a shortcut and they're
04:32 - useful if you need to use a function
04:34 - only once and then you're just planning
04:35 - on throwing it away afterwards
04:37 - so if you would like a copy of all this
04:38 - code i will post all of this to the
04:40 - comments section down below
04:42 - but yeah those are lambda functions in
04:44 - python
04:46 - hey you yeah i'm talking to you if you
04:48 - learned something new
04:49 - then help me help you in three easy
04:52 - steps
04:52 - by smashing that like button drop a
04:54 - comment down below and subscribe if
04:56 - you'd like to become a fellow bro
05:10 - [Music]
05:20 - you

Cleaned transcript:

yo what's going on everybody it's bro hope you're doing well in today's video i'm going to explain lambda functions in python so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm all right ladies and gentlemen let's talk about lambda functions these are functions that are written in one line and use this lambda keyword they accept any number of arguments but they only have one expression think of it as a shortcut they're useful if you need a function for only one use or a short period of time and then you're just planning on throwing away that function afterwards here's the syntax for a lambda function you type lambda you add the parameters followed by a colon and then your expression let's say we have this function named double double accepts one argument that we will name x we're returning x times two effectively doubling it so if i need to call this function i would type double and then pass in a number as an argument so the result if i pass in 5 would be 10. now let's write the same function but instead write it as a lambda function so let me turn these lines into comments now the first step is to type lambda then our parameters we only have one parameter and that is x colon and then our expression we would like to return x times two now this lambda function is going to return a function object and we can assign that much like what we do with variables let's say double equals lambda x colon x times two and in order to call this lambda function we're going to type double then a set of parentheses to call this function and then pass in our arguments so let's say that x equals 5 and then we're going to double it and the result is 10. so that's the syntax for a lambda function you type lambda your parameters colon and then your expression this time let's say that we have two parameters we have two numbers that we want to multiply by each other so let's say that this function will be called multiply multiply equals lambda x comma y because we have two parameters colon followed by our expression we would like to multiply x times y and that is it now in order to call multiply we need to pass in two arguments if i were to pass in just one well we'll have a type error so let's pass in five and maybe six and the result is 30. now let's try three parameters let's say we would like to add three numbers together let's say add lambda x comma y comma z so we have all of our parameters we have our colon here and then we need our expression x plus y plus z and let's add 5 six and seven together the result is 18. now let's try something a little more complex let's pass in some strings this time i'll create a function named full name full name equals lambda first name comma last name the expression is going to be first name plus perhaps a space plus last name now i need to pass in a first name and a last name full name and you can use your own name for this example if you want let's say bro comma code yep this will print your first name and your last name to the console window now let's take it a step further let's say we would like to check somebody's age once using a lambda function we would like to check to see if they're 18 or older because they're signing up for something perhaps let's say a credit card so let's create a function object age check equals lambda we have one parameter somebody's age colon and then our expression let's type true if age is greater than or equal to 18 else false to call this age track function we need to pass in an age let's say the user is 12 and they're trying to sign up for a credit card while this will return false let's say they're 18 now and this will return true so that's a lambda function it's a function that is written in one line using this lambda keyword they accept any number of arguments but they only have one expression think of it like a shortcut and they're useful if you need to use a function only once and then you're just planning on throwing it away afterwards so if you would like a copy of all this code i will post all of this to the comments section down below but yeah those are lambda functions in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
