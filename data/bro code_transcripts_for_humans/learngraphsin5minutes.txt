With timestamps:

00:02 - all right what's going on everybody
00:03 - graphs a graph is a non-linear
00:06 - aggregation of nodes and edges a node
00:10 - also known as a vertex may contain some
00:12 - piece of data and an edge is a
00:14 - connection between two nodes there are
00:17 - two types of graphs we're going to
00:18 - discuss undirected and directed an
00:21 - example of an undirected graph could be
00:23 - a social network like facebook each node
00:26 - could represent a user and if one user
00:28 - is friends with another user well we
00:31 - could establish a friendship and edge a
00:33 - connection between these two nodes if
00:35 - two nodes are connected they have what
00:37 - is known as adjacency in this example
00:40 - larry is friends with patrick and sandy
00:43 - so larry has adjacency to patrick and
00:46 - sandy patrick is friends with larry
00:49 - sandy spongebob and spongebob is friends
00:51 - with sandy patrick and squidward and
00:53 - squidward is adjacent to only one
00:55 - neighbor spongebob so a social network
00:58 - could be an example of an undirected
01:00 - graph the other type of graph is a
01:02 - directed graph a director graph contains
01:04 - edges that will link one node to another
01:07 - however these are one-way connections in
01:10 - this example node a would have adjacency
01:13 - to node b but not the other way around
01:15 - however it is valid to have one node
01:18 - pointing to another node and that node
01:20 - could point back to the previous node an
01:22 - example of a directed graph could be a
01:24 - street map let's say you're working on a
01:26 - travel app and each node is a possible
01:29 - destination these single edges could be
01:31 - one-way streets and these double edges
01:34 - could be two-way streets you can move
01:35 - back and forth between these two
01:37 - destinations
01:38 - there are two popular ways to represent
01:41 - a graph an adjacency matrix and an
01:44 - adjacency list with an adjacency matrix
01:46 - we could create a 2d array one row and
01:49 - one column for each node if we need to
01:52 - check to see if there's adjacency
01:54 - between two nodes we would first find
01:56 - the index of the node we're beginning at
01:58 - let's say a so we would go to node a and
02:01 - then find the index of the node we're
02:03 - trying to travel to so b so row a column
02:06 - b if there are no edges this would be
02:09 - zero if there is an edge this would be
02:11 - one so since there's one here within row
02:14 - a column b well there's adjacency from
02:17 - node a to node b but if we take a look
02:19 - at row a column c this is zero so
02:22 - there's no adjacency between a to c but
02:24 - if there was well we would replace the
02:26 - zero with one then now there are pros
02:29 - and cons with the matrix one of the
02:31 - benefits is that the runtime complexity
02:33 - to locate an edge is big o of one it's
02:36 - constant all we have to do is find two
02:38 - indices so we have to find the row and
02:41 - the column however the space complexity
02:44 - to store a matrix is big o of v squared
02:47 - v as in the number of vertices that we
02:49 - have but you could also think of that as
02:51 - n and for the number of nodes big o of n
02:54 - squared so since we have five nodes and
02:57 - five columns we would have a total of 25
03:00 - spaces so the benefits of a matrix is
03:02 - that it's very quick to look up an edge
03:04 - however a matrix uses a lot of room so
03:07 - it tends to suit graphs that have a lot
03:09 - of edges on the other hand we have an
03:12 - adjacency list an adjacency list is an
03:15 - array or
03:17 - list of linked lists each element is a
03:20 - separate linked list and each header
03:23 - within the linked list would contain the
03:25 - address of a node if there's adjacency
03:27 - between one node and another we would
03:30 - add the adjacent node to our linked list
03:32 - so to find adjacency between two nodes
03:35 - we would find the node that we're
03:36 - starting at let's see if b is adjacent
03:39 - to e so we would locate index b and
03:42 - travel this linked list until we find
03:44 - the node that we're looking for that
03:46 - means there is adjacency between nodes b
03:48 - and e even if there's a node that is not
03:50 - adjacent to any neighbors we would still
03:52 - want to add it to our adjacency list
03:54 - just in case we do update it here are
03:56 - the pros and cons of an adjacency list
03:58 - the time complexity to locate an element
04:01 - is big o of v v as in the number of
04:04 - vertices you can also think of this as n
04:06 - so this would be big o of n to locate an
04:09 - edge we would first access the node that
04:11 - we're beginning at by an index so let's
04:13 - begin at b and we are looking for
04:15 - adjacency between b and e
04:18 - since each element is a linked list we
04:20 - need to traverse this linked list
04:22 - linearly until we find the node that
04:24 - we're looking for
04:25 - so in that way it's linear however a
04:28 - benefit of a list over a matrix is that
04:31 - they use less space the space complexity
04:33 - of an adjacency list is big o of v plus
04:36 - e v for the number of vertices aka nodes
04:40 - and e for the number of edges so yeah
04:43 - everybody those are graphs a graph can
04:45 - be used to model a network each node is
04:48 - a piece of data within our network and
04:50 - an edge connects nodes so like i said
04:52 - it's a popular way to model networks
04:55 - which don't necessarily have any sort of
04:57 - order so yeah that's an intro to graphs
04:59 - and in the next two topics we'll create
05:01 - our own adjacency matrix and adjacency
05:04 - list hey if you enjoyed this video give
05:06 - it a thumbs up if you have any ideas of
05:08 - where else you could implement a graph
05:10 - let me know in the comment section and
05:12 - of course subscribe if you'd like to
05:13 - become a fellow bro

Cleaned transcript:

all right what's going on everybody graphs a graph is a nonlinear aggregation of nodes and edges a node also known as a vertex may contain some piece of data and an edge is a connection between two nodes there are two types of graphs we're going to discuss undirected and directed an example of an undirected graph could be a social network like facebook each node could represent a user and if one user is friends with another user well we could establish a friendship and edge a connection between these two nodes if two nodes are connected they have what is known as adjacency in this example larry is friends with patrick and sandy so larry has adjacency to patrick and sandy patrick is friends with larry sandy spongebob and spongebob is friends with sandy patrick and squidward and squidward is adjacent to only one neighbor spongebob so a social network could be an example of an undirected graph the other type of graph is a directed graph a director graph contains edges that will link one node to another however these are oneway connections in this example node a would have adjacency to node b but not the other way around however it is valid to have one node pointing to another node and that node could point back to the previous node an example of a directed graph could be a street map let's say you're working on a travel app and each node is a possible destination these single edges could be oneway streets and these double edges could be twoway streets you can move back and forth between these two destinations there are two popular ways to represent a graph an adjacency matrix and an adjacency list with an adjacency matrix we could create a 2d array one row and one column for each node if we need to check to see if there's adjacency between two nodes we would first find the index of the node we're beginning at let's say a so we would go to node a and then find the index of the node we're trying to travel to so b so row a column b if there are no edges this would be zero if there is an edge this would be one so since there's one here within row a column b well there's adjacency from node a to node b but if we take a look at row a column c this is zero so there's no adjacency between a to c but if there was well we would replace the zero with one then now there are pros and cons with the matrix one of the benefits is that the runtime complexity to locate an edge is big o of one it's constant all we have to do is find two indices so we have to find the row and the column however the space complexity to store a matrix is big o of v squared v as in the number of vertices that we have but you could also think of that as n and for the number of nodes big o of n squared so since we have five nodes and five columns we would have a total of 25 spaces so the benefits of a matrix is that it's very quick to look up an edge however a matrix uses a lot of room so it tends to suit graphs that have a lot of edges on the other hand we have an adjacency list an adjacency list is an array or list of linked lists each element is a separate linked list and each header within the linked list would contain the address of a node if there's adjacency between one node and another we would add the adjacent node to our linked list so to find adjacency between two nodes we would find the node that we're starting at let's see if b is adjacent to e so we would locate index b and travel this linked list until we find the node that we're looking for that means there is adjacency between nodes b and e even if there's a node that is not adjacent to any neighbors we would still want to add it to our adjacency list just in case we do update it here are the pros and cons of an adjacency list the time complexity to locate an element is big o of v v as in the number of vertices you can also think of this as n so this would be big o of n to locate an edge we would first access the node that we're beginning at by an index so let's begin at b and we are looking for adjacency between b and e since each element is a linked list we need to traverse this linked list linearly until we find the node that we're looking for so in that way it's linear however a benefit of a list over a matrix is that they use less space the space complexity of an adjacency list is big o of v plus e v for the number of vertices aka nodes and e for the number of edges so yeah everybody those are graphs a graph can be used to model a network each node is a piece of data within our network and an edge connects nodes so like i said it's a popular way to model networks which don't necessarily have any sort of order so yeah that's an intro to graphs and in the next two topics we'll create our own adjacency matrix and adjacency list hey if you enjoyed this video give it a thumbs up if you have any ideas of where else you could implement a graph let me know in the comment section and of course subscribe if you'd like to become a fellow bro
