With timestamps:

00:00 - hey everybody so today I'm going to
00:01 - explain match case statements in Python
00:04 - if you're familiar with other
00:05 - programming languages this is also known
00:08 - as a switch match case statements are
00:10 - alternatives to using many LF
00:14 - statements we execute some code if a
00:17 - value matches a case the benefits of
00:20 - using a match case statement is that
00:22 - they're cleaner and the syntax is more
00:24 - readable in this sample program I have a
00:27 - function there is one parameter a day
00:30 - day will be a number ideally a number 1
00:33 - through 7 depending on this number we'll
00:35 - return a string corresponding to the day
00:37 - of the week if day equals 1 then it is
00:44 - Sunday two it is Monday all the way up
00:48 - to
00:49 - 7 where it will be Saturday I do have an
00:53 - else Clause if we pass in something
00:55 - that's not valid like
00:58 - pizza pizza is not not a day but it
01:01 - really should be not a valid day a
01:03 - cleaner and more readable alternative is
01:06 - to use a match case statement instead of
01:09 - many l if
01:10 - statements here's how I'm going to take
01:13 - my if and many l if statements and
01:15 - enclose them within a match
01:18 - case match case the case is going to be
01:23 - the value we're examining the case will
01:26 - be day
01:28 - colon we're going to to examine our
01:30 - value of day against matching
01:34 - cases we're going to replace if day
01:37 - equals with the following just simply
01:41 - case so let's do that with each of these
01:55 - statements if you have an else Clause
01:57 - you're instead going to have a case of
02:01 - underscore an underscore and a match
02:03 - case statement is a wild card we will
02:06 - perform this case if there are no
02:08 - matching cases this case would function
02:11 - as the else statement here's what we're
02:13 - working with now if I pass in one and
02:17 - return the day of the week we would get
02:20 - Sunday two would be Monday 3 Tuesday
02:27 - s is Saturday and then let's try that
02:31 - day of
02:33 - pizza that is not a valid day a match
02:36 - case statement is an alternative to
02:38 - using many LF statements I find this
02:41 - much easier to read than the many LF
02:43 - statements both would technically
02:45 - function let's go over a second example
02:49 - we will create a function of is
02:52 - weekend we have to pass in a day this
02:55 - time our day is going to be a string
02:58 - such as Monday
03:00 - the value for each case instead of a
03:02 - number is going to be a
03:05 - string if our day matches a case of
03:08 - Sunday let's return how about a Boolean
03:12 - of true we're checking to see if it's
03:14 - the weekend if our day is equal to a
03:18 - case of
03:20 - Monday then we will return false let's
03:24 - do this with the other days I'm going to
03:26 - fast forward the video
03:46 - we will call the function of is weekend
03:48 - then pass in a day of the week such as
03:51 - Monday so is Sunday the weekend that is
03:56 - true
03:58 - Monday that is false
04:02 - Saturday that is true and we do have a
04:06 - wild card case if there are no
04:08 - matches is pizza a day of the weekend
04:11 - that is false there is a way we can
04:14 - modify this match case too we tend to be
04:16 - repeating ourselves a lot the days
04:18 - Monday through Friday all return false
04:22 - we're going to use the orical operator
04:24 - which is represented with a vertical bar
04:27 - if the case of
04:31 - Saturday or Sunday return
04:34 - true if the case is
04:37 - Monday or
04:40 - Tuesday you can get rid of that or
04:48 - Wednesday or
04:54 - Thursday or Friday
05:01 - then we will return
05:03 - false we can keep our Wild Card case so
05:07 - is
05:09 - Saturday part of the weekend that is
05:12 - true is
05:14 - Monday false
05:18 - Sunday true
05:22 - Friday
05:24 - false and
05:27 - pizza we have our Wild Card case that
05:29 - gives us false all right everybody so
05:32 - those are match case statements they're
05:34 - similar to switches in other programming
05:36 - languages they're an alternative to
05:38 - using many lsip statements we execute
05:41 - some code if a value matches a case the
05:45 - benefits is that the code is cleaner and
05:47 - the syntax is more readable and well
05:50 - everybody those are match case
05:51 - statements in Python

Cleaned transcript:

hey everybody so today I'm going to explain match case statements in Python if you're familiar with other programming languages this is also known as a switch match case statements are alternatives to using many LF statements we execute some code if a value matches a case the benefits of using a match case statement is that they're cleaner and the syntax is more readable in this sample program I have a function there is one parameter a day day will be a number ideally a number 1 through 7 depending on this number we'll return a string corresponding to the day of the week if day equals 1 then it is Sunday two it is Monday all the way up to 7 where it will be Saturday I do have an else Clause if we pass in something that's not valid like pizza pizza is not not a day but it really should be not a valid day a cleaner and more readable alternative is to use a match case statement instead of many l if statements here's how I'm going to take my if and many l if statements and enclose them within a match case match case the case is going to be the value we're examining the case will be day colon we're going to to examine our value of day against matching cases we're going to replace if day equals with the following just simply case so let's do that with each of these statements if you have an else Clause you're instead going to have a case of underscore an underscore and a match case statement is a wild card we will perform this case if there are no matching cases this case would function as the else statement here's what we're working with now if I pass in one and return the day of the week we would get Sunday two would be Monday 3 Tuesday s is Saturday and then let's try that day of pizza that is not a valid day a match case statement is an alternative to using many LF statements I find this much easier to read than the many LF statements both would technically function let's go over a second example we will create a function of is weekend we have to pass in a day this time our day is going to be a string such as Monday the value for each case instead of a number is going to be a string if our day matches a case of Sunday let's return how about a Boolean of true we're checking to see if it's the weekend if our day is equal to a case of Monday then we will return false let's do this with the other days I'm going to fast forward the video we will call the function of is weekend then pass in a day of the week such as Monday so is Sunday the weekend that is true Monday that is false Saturday that is true and we do have a wild card case if there are no matches is pizza a day of the weekend that is false there is a way we can modify this match case too we tend to be repeating ourselves a lot the days Monday through Friday all return false we're going to use the orical operator which is represented with a vertical bar if the case of Saturday or Sunday return true if the case is Monday or Tuesday you can get rid of that or Wednesday or Thursday or Friday then we will return false we can keep our Wild Card case so is Saturday part of the weekend that is true is Monday false Sunday true Friday false and pizza we have our Wild Card case that gives us false all right everybody so those are match case statements they're similar to switches in other programming languages they're an alternative to using many lsip statements we execute some code if a value matches a case the benefits is that the code is cleaner and the syntax is more readable and well everybody those are match case statements in Python
