With timestamps:

00:02 - hey everybody welcome back so in today's
00:04 - video we're going to discuss
00:05 - constructors a constructor is a special
00:08 - method within a class that is
00:11 - automatically called when an object is
00:13 - instantiated it's useful for assigning
00:16 - values to attributes as arguments before
00:19 - when we were assigning attributes to an
00:21 - object we would say for example
00:24 - car one dot
00:26 - make equals forward
00:29 - the constructor we can do that
00:31 - automatically here's an example this
00:33 - time let's create a student class
00:36 - class
00:37 - student
00:40 - i'll add a public access modifier what
00:44 - attributes should students have
00:46 - how about a name standard string name
00:50 - int age
00:52 - double gpa sounds good to me
00:55 - then if i need to create a student
00:56 - object i would type the name of the
00:58 - class student
01:00 - a unique identifier for this specific
01:02 - object let's say student1
01:06 - then to assign some of the attributes
01:08 - right away i could use a constructor we
01:10 - do have a constructor that is
01:12 - automatically called behind the scenes
01:15 - but we could explicitly set one up
01:17 - the constructor has the same name as the
01:19 - class
01:21 - in this case student
01:23 - add a set of parentheses add a set of
01:25 - curly braces
01:26 - think of this as a function
01:28 - we can set up parameters
01:30 - when we instantiate a student object we
01:33 - will automatically call this function
01:35 - the constructor then pass arguments
01:38 - let's set up some parameters we have
01:40 - standard string name
01:43 - int age
01:44 - double
01:45 - gpa
01:48 - then when i instantiate a student object
01:50 - i will add a set of parentheses after
01:52 - the object name then pass in my
01:54 - arguments let me just zoom in real quick
01:57 - okay in order to instantiate a student
02:00 - object we need to pass in a name
02:02 - an age and a gpa
02:05 - so for the first student
02:07 - student one's name will be spongebob
02:09 - his age will be
02:11 - i don't know how old spongebob is let's
02:13 - say he's 25.
02:15 - spongebob's gpa will be a solid
02:18 - 3.2
02:20 - when we instantiate our student object
02:22 - we will pass these values as arguments
02:25 - to the constructor
02:27 - now to assign these attributes
02:29 - with these parameters
02:31 - we first need to select these attributes
02:34 - in this example i gave them the same
02:35 - name
02:36 - just to remove ambiguity if i'm
02:39 - referring to these attributes i will
02:41 - type this
02:43 - then an arrow
02:44 - name
02:45 - equals the name of the parameter
02:48 - name
02:50 - this name equals my name parameter
02:53 - this
02:54 - arrow age equals my age parameter
02:58 - this
03:00 - arrow
03:01 - gpa
03:02 - equals my gpa
03:06 - so now let's test this i will display
03:08 - student one's name age and gpa
03:13 - standard
03:14 - output
03:17 - student1
03:18 - dot
03:19 - name
03:20 - add a new line
03:24 - then we have age
03:27 - then gpa
03:31 - okay we got spongebob he's 25 years old
03:34 - his gpa is 3.2
03:36 - so you can see that we don't need to
03:38 - necessarily add these values to these
03:40 - attributes manually
03:42 - you can do that automatically with the
03:43 - constructor so another way in which you
03:45 - may see this constructor set up is with
03:48 - the parameter names being different from
03:50 - the attribute names perhaps instead of
03:52 - name age and gpa let's say x
03:55 - y
03:56 - then z
03:58 - if the attribute names are different
03:59 - from the parameter names you don't need
04:02 - the this keyword
04:05 - you could say name equals x age equals y
04:08 - gpa equals z
04:10 - and this would work too
04:13 - if you prefer this way of doing things
04:14 - you can do that uh just my own personal
04:16 - preference i like to use the this
04:18 - keyword and then keep my parameters the
04:20 - same but that's just me you do you let's
04:22 - create a couple more students and it's
04:24 - kind of nice because we can reuse this
04:26 - constructor
04:27 - let's create student two student student
04:30 - two
04:32 - student two will be patrick
04:35 - i don't know how old patrick is let's
04:36 - say patrick is 40.
04:39 - uh patrick's gpa will be 1.5
04:44 - okay to test this let's display student
04:46 - twos and name age and gpa
04:51 - okay we got patrick he's 40 years old
04:53 - gpa is 1.5
04:55 - one last student
04:57 - student
04:58 - student three
05:00 - student three will be sandy
05:02 - sandy is uh how about 21 years old
05:07 - and sandy's gpa is a perfect 4.0
05:13 - okay now we'll display student three's
05:15 - name
05:16 - age gpa
05:20 - okay we got sandy
05:21 - her age is 21
05:23 - gpa is for well 4.0 let's do one last
05:27 - example just to reinforce our
05:29 - understanding of constructors
05:31 - let's create an entirely new class let's
05:33 - go back to our car class
05:35 - i'm going to get rid of all this so we
05:38 - need a class
05:40 - class car
05:42 - set of curly braces add a semicolon to
05:44 - the end i will add a public axis
05:47 - modifier
05:48 - in the last topic we decided that cars
05:50 - had four attributes
05:52 - a make
05:53 - standard string make
05:56 - a model standard string model
06:01 - int year
06:03 - standard string color
06:07 - now we'll create a constructor for our
06:09 - car objects it has the same name as the
06:11 - class name car
06:14 - set of parenthesis set of curly braces
06:16 - we can set up some parameters
06:18 - we have make model year and color i
06:21 - think i'm just going to copy this to
06:22 - save time
06:24 - you can rename these if you want
06:27 - but i like to keep them the same
06:34 - then i will assign this
06:36 - arrow
06:37 - make equals make
06:40 - this
06:40 - arrow
06:42 - model equals model
06:45 - this
06:47 - arrow
06:48 - year
06:49 - equals year
06:53 - this
06:54 - arrow color
06:56 - equals color
06:58 - when we create a car object we'll need
06:59 - to pass in these arguments
07:03 - i will create car car 1 add a set of
07:06 - parentheses pass in my arguments
07:08 - a make
07:09 - model year and color
07:12 - i'll create a chevy
07:14 - corvette
07:16 - the year will be
07:18 - 2022
07:20 - the color is blue
07:24 - i'm going to display the attributes
07:26 - standard output car 1 dot make
07:30 - i'll add a new line
07:32 - then i will display the model year then
07:35 - color
07:39 - model
07:41 - year
07:42 - color
07:46 - car one is a chevy corvette the year is
07:48 - 2022 the color is blue
07:51 - let's create a second car car car two
07:55 - car two will be a ford
07:59 - mustang
08:02 - the year will be 2023 the color will be
08:05 - red
08:06 - i will display cartoons attributes
08:11 - we have a forward mustang the year is
08:13 - 2023 the color is red
08:15 - so yeah that's a constructor everybody a
08:17 - constructor is a special method that is
08:20 - automatically called when an object is
08:22 - instantiated it's useful for assigning
08:25 - values to attributes as arguments when
08:28 - you create an object from a class
08:30 - add a set of parentheses
08:32 - then add your arguments
08:34 - within the constructor you can assign
08:36 - those arguments to the attributes of
08:38 - that class in the next topic we'll cover
08:41 - overloaded constructors if you're
08:43 - looking for some additional practice
08:45 - in the comments section down below post
08:47 - a class that contains a constructor
08:50 - and well yeah those are constructors in
08:52 - c plus plus

Cleaned transcript:

hey everybody welcome back so in today's video we're going to discuss constructors a constructor is a special method within a class that is automatically called when an object is instantiated it's useful for assigning values to attributes as arguments before when we were assigning attributes to an object we would say for example car one dot make equals forward the constructor we can do that automatically here's an example this time let's create a student class class student i'll add a public access modifier what attributes should students have how about a name standard string name int age double gpa sounds good to me then if i need to create a student object i would type the name of the class student a unique identifier for this specific object let's say student1 then to assign some of the attributes right away i could use a constructor we do have a constructor that is automatically called behind the scenes but we could explicitly set one up the constructor has the same name as the class in this case student add a set of parentheses add a set of curly braces think of this as a function we can set up parameters when we instantiate a student object we will automatically call this function the constructor then pass arguments let's set up some parameters we have standard string name int age double gpa then when i instantiate a student object i will add a set of parentheses after the object name then pass in my arguments let me just zoom in real quick okay in order to instantiate a student object we need to pass in a name an age and a gpa so for the first student student one's name will be spongebob his age will be i don't know how old spongebob is let's say he's 25. spongebob's gpa will be a solid 3.2 when we instantiate our student object we will pass these values as arguments to the constructor now to assign these attributes with these parameters we first need to select these attributes in this example i gave them the same name just to remove ambiguity if i'm referring to these attributes i will type this then an arrow name equals the name of the parameter name this name equals my name parameter this arrow age equals my age parameter this arrow gpa equals my gpa so now let's test this i will display student one's name age and gpa standard output student1 dot name add a new line then we have age then gpa okay we got spongebob he's 25 years old his gpa is 3.2 so you can see that we don't need to necessarily add these values to these attributes manually you can do that automatically with the constructor so another way in which you may see this constructor set up is with the parameter names being different from the attribute names perhaps instead of name age and gpa let's say x y then z if the attribute names are different from the parameter names you don't need the this keyword you could say name equals x age equals y gpa equals z and this would work too if you prefer this way of doing things you can do that uh just my own personal preference i like to use the this keyword and then keep my parameters the same but that's just me you do you let's create a couple more students and it's kind of nice because we can reuse this constructor let's create student two student student two student two will be patrick i don't know how old patrick is let's say patrick is 40. uh patrick's gpa will be 1.5 okay to test this let's display student twos and name age and gpa okay we got patrick he's 40 years old gpa is 1.5 one last student student student three student three will be sandy sandy is uh how about 21 years old and sandy's gpa is a perfect 4.0 okay now we'll display student three's name age gpa okay we got sandy her age is 21 gpa is for well 4.0 let's do one last example just to reinforce our understanding of constructors let's create an entirely new class let's go back to our car class i'm going to get rid of all this so we need a class class car set of curly braces add a semicolon to the end i will add a public axis modifier in the last topic we decided that cars had four attributes a make standard string make a model standard string model int year standard string color now we'll create a constructor for our car objects it has the same name as the class name car set of parenthesis set of curly braces we can set up some parameters we have make model year and color i think i'm just going to copy this to save time you can rename these if you want but i like to keep them the same then i will assign this arrow make equals make this arrow model equals model this arrow year equals year this arrow color equals color when we create a car object we'll need to pass in these arguments i will create car car 1 add a set of parentheses pass in my arguments a make model year and color i'll create a chevy corvette the year will be 2022 the color is blue i'm going to display the attributes standard output car 1 dot make i'll add a new line then i will display the model year then color model year color car one is a chevy corvette the year is 2022 the color is blue let's create a second car car car two car two will be a ford mustang the year will be 2023 the color will be red i will display cartoons attributes we have a forward mustang the year is 2023 the color is red so yeah that's a constructor everybody a constructor is a special method that is automatically called when an object is instantiated it's useful for assigning values to attributes as arguments when you create an object from a class add a set of parentheses then add your arguments within the constructor you can assign those arguments to the attributes of that class in the next topic we'll cover overloaded constructors if you're looking for some additional practice in the comments section down below post a class that contains a constructor and well yeah those are constructors in c plus plus
