With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro hope you're doing well and in this
00:03 - video i'm going to teach you guys about
00:04 - rapper classes
00:05 - in java so sit back relax and enjoy the
00:08 - show
00:12 - you can become a hero and save our
00:13 - channel by smashing that like button
00:15 - drop a comment down below and subscribe
00:17 - if you'd like to become a fellow bro
00:20 - hey welcome back guys and gals in this
00:22 - video i'm going to explain wrapper
00:24 - classes a wrapper class provides a way
00:26 - to use
00:27 - primitive data types as reference data
00:30 - types
00:30 - here are a few examples of primitive
00:33 - data types they include
00:34 - but are not limited to booleans chars
00:37 - ants doubles there's still many more out
00:40 - there such as
00:41 - bytes shorts and floats but here are a
00:44 - few of the more common ones that we've
00:45 - been working with
00:46 - so notice that strings are not within
00:49 - this list of primitive data types
00:51 - that's because strings are already
00:53 - reference data types
00:55 - now reference data types have some
00:56 - advantages and disadvantages
00:58 - a few advantages for one would include
01:00 - that they may contain
01:02 - some useful methods for example take the
01:04 - last video on string methods
01:06 - the string class contains some useful
01:08 - methods and strings
01:10 - are an example of a reference data type
01:13 - also reference data types can be used
01:15 - with certain collections
01:16 - and they can be used with for example
01:18 - arraylists which we'll learn about in
01:20 - the next video
01:21 - and a disadvantage of reference data
01:24 - types over primitive data types
01:26 - for one is that reference data types are
01:28 - slower to access
01:29 - if you need to get the value of a
01:32 - primitive data type
01:33 - that is enclosed within a wrapper class
01:35 - it's going to take more steps
01:37 - so if you're working with millions of
01:38 - numbers well it's going to take a lot
01:41 - more time and a lot more processing
01:42 - power
01:43 - to use reference data types compared to
01:45 - primitive data types
01:46 - because primitive data types are a lot
01:48 - faster
01:50 - so each primitive data type has a
01:52 - corresponding rapper class
01:54 - and there's a naming convention with
01:55 - these for the rapper class
01:57 - the first letter is capital and the
02:00 - entire name
02:01 - is for the most part spelled out so
02:03 - boolean would be boolean with a capital
02:05 - b
02:06 - char would be a character with a capital
02:08 - c int is integer with a capital i
02:11 - and double is still double but with a
02:13 - capital d
02:14 - so let's assign a few primitive data
02:17 - types and use the corresponding
02:18 - wrapper class to create a reference data
02:21 - type
02:22 - so java has this feature called auto
02:25 - boxing and
02:26 - unboxing we can directly assign some
02:28 - primitive values to a wrapper class
02:30 - automatically and here's the definition
02:32 - so auto boxing is the automatic
02:34 - conversion
02:35 - that the java compiler makes between
02:37 - primitive data types
02:39 - and their corresponding object wrapper
02:41 - class so let's use
02:42 - auto boxing to assign a primitive data
02:45 - type a few primitive data types
02:47 - to each corresponding wrapper class so
02:49 - let's begin with a boolean value
02:51 - so we're going to list the data type and
02:53 - it's going to be the wrapper class
02:55 - so boolean with a capital b let's call
02:59 - this variable a
03:01 - equals and then we can just use
03:03 - autoboxing
03:04 - to directly assign a permitted value to
03:07 - this reference data type
03:08 - so i'm going to say that boolean a
03:11 - equals true
03:12 - and that is it and let's assign a few
03:14 - others so we have character
03:17 - character b equals let's assign a
03:20 - character maybe the
03:21 - at symbol integer
03:25 - c equals one two three
03:29 - and double d
03:32 - equals let's say 3.14
03:37 - and what we have done is created four
03:39 - reference data type variables
03:41 - boolean a character b integer c and
03:43 - double d
03:44 - and for fun let's create a string
03:46 - variable as well let's say string
03:48 - e equals whatever your name is
03:51 - so are you beginning to see a pattern
03:53 - here strings are already a reference
03:55 - data type
03:56 - that's why the first letter in the
03:58 - string data type when you declare a
04:00 - variable of this type
04:01 - is capital compared to the primitive
04:04 - data type variables that we've been
04:05 - working with
04:06 - so it's kind of like we've been using
04:08 - reference data types all along
04:10 - when working with strings as we've
04:12 - discussed at the beginning of this video
04:14 - reference data types have a few
04:15 - advantages and disadvantages and one of
04:18 - the advantages
04:19 - is that each wrapper class may contain
04:21 - some useful methods
04:22 - kind of like what we did with the string
04:24 - class in the last video
04:26 - so we already have a string let's look
04:28 - at a few of the methods of
04:30 - boolean wrapper classes so type in the
04:32 - name of the boolean variable a
04:34 - dot and then here are all the methods
04:36 - that you have access to
04:38 - the same thing goes with characters
04:41 - here's a bunch of methods you can use
04:43 - same thing with integers and doubles
04:47 - so reference data types within the
04:49 - wrapper class
04:50 - they have access to some useful methods
04:52 - that you can use for your program
04:54 - not only that but you can use these
04:56 - reference data types with certain
04:57 - collections
04:58 - and we'll be using them for arraylists
05:00 - in the next video
05:02 - so if you need to access the values
05:05 - within a wrapper class
05:06 - well there's a feature called autoboxing
05:08 - and unboxing
05:10 - autoboxing is the automatic conversion
05:12 - that the java compiler makes between
05:14 - primitive data types and their
05:16 - corresponding object wrapper class
05:18 - when we directly assigned some values to
05:21 - each of these reference data types
05:23 - what we have done is auto boxing we
05:25 - automatically converted
05:27 - these primitive values to the
05:29 - corresponding wrapper class
05:31 - automatically but unboxing is the
05:33 - reverse
05:34 - we can convert a wrapper class to its
05:37 - primitive value
05:38 - so what i'm saying is that with unboxing
05:40 - we can treat
05:41 - these reference data type variables as
05:44 - if they were standard primitive values
05:46 - so for example let's say if
05:50 - boolean a is equal to true
05:53 - then we will display this
05:56 - is true so even though this is a
05:59 - reference data type it will still
06:01 - behave as a standard primitive data type
06:04 - because of the unboxing feature and the
06:06 - same thing goes with
06:08 - b except b has to be a character so
06:11 - let's check to see if this is equal to
06:14 - our at sign and this is also true
06:18 - so that is the unboxing feature you can
06:20 - still treat these reference data types
06:22 - as if they were primitives
06:23 - so even though there are a few
06:25 - advantages of wrapper classes over the
06:28 - primitive data type that they may
06:29 - contain
06:30 - there is still the disadvantage that
06:32 - accessing the values contained within a
06:34 - wrapper class
06:35 - still takes a lot more steps compared to
06:37 - using just a raw
06:38 - primitive value so if you're working on
06:41 - a program that contains millions of
06:43 - numbers for example
06:44 - using reference data types using the
06:46 - wrapper class
06:47 - for each primitive value is going to
06:49 - take a lot more steps compared to just
06:51 - using a standard permitted value
06:53 - so primitive values are a lot faster
06:56 - than reference data types
06:57 - so everybody that's the basics of
06:59 - wrapper classes if you would like a copy
07:01 - of all this code i will post all of this
07:03 - in the comments down below
07:05 - don't forget to do me a favor and smash
07:07 - that like button drop a comment down
07:08 - below
07:09 - and subscribe if you'd like to become a
07:10 - fellow bro

Cleaned transcript:

hey what's going on everybody it's your bro hope you're doing well and in this video i'm going to teach you guys about rapper classes in java so sit back relax and enjoy the show you can become a hero and save our channel by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro hey welcome back guys and gals in this video i'm going to explain wrapper classes a wrapper class provides a way to use primitive data types as reference data types here are a few examples of primitive data types they include but are not limited to booleans chars ants doubles there's still many more out there such as bytes shorts and floats but here are a few of the more common ones that we've been working with so notice that strings are not within this list of primitive data types that's because strings are already reference data types now reference data types have some advantages and disadvantages a few advantages for one would include that they may contain some useful methods for example take the last video on string methods the string class contains some useful methods and strings are an example of a reference data type also reference data types can be used with certain collections and they can be used with for example arraylists which we'll learn about in the next video and a disadvantage of reference data types over primitive data types for one is that reference data types are slower to access if you need to get the value of a primitive data type that is enclosed within a wrapper class it's going to take more steps so if you're working with millions of numbers well it's going to take a lot more time and a lot more processing power to use reference data types compared to primitive data types because primitive data types are a lot faster so each primitive data type has a corresponding rapper class and there's a naming convention with these for the rapper class the first letter is capital and the entire name is for the most part spelled out so boolean would be boolean with a capital b char would be a character with a capital c int is integer with a capital i and double is still double but with a capital d so let's assign a few primitive data types and use the corresponding wrapper class to create a reference data type so java has this feature called auto boxing and unboxing we can directly assign some primitive values to a wrapper class automatically and here's the definition so auto boxing is the automatic conversion that the java compiler makes between primitive data types and their corresponding object wrapper class so let's use auto boxing to assign a primitive data type a few primitive data types to each corresponding wrapper class so let's begin with a boolean value so we're going to list the data type and it's going to be the wrapper class so boolean with a capital b let's call this variable a equals and then we can just use autoboxing to directly assign a permitted value to this reference data type so i'm going to say that boolean a equals true and that is it and let's assign a few others so we have character character b equals let's assign a character maybe the at symbol integer c equals one two three and double d equals let's say 3.14 and what we have done is created four reference data type variables boolean a character b integer c and double d and for fun let's create a string variable as well let's say string e equals whatever your name is so are you beginning to see a pattern here strings are already a reference data type that's why the first letter in the string data type when you declare a variable of this type is capital compared to the primitive data type variables that we've been working with so it's kind of like we've been using reference data types all along when working with strings as we've discussed at the beginning of this video reference data types have a few advantages and disadvantages and one of the advantages is that each wrapper class may contain some useful methods kind of like what we did with the string class in the last video so we already have a string let's look at a few of the methods of boolean wrapper classes so type in the name of the boolean variable a dot and then here are all the methods that you have access to the same thing goes with characters here's a bunch of methods you can use same thing with integers and doubles so reference data types within the wrapper class they have access to some useful methods that you can use for your program not only that but you can use these reference data types with certain collections and we'll be using them for arraylists in the next video so if you need to access the values within a wrapper class well there's a feature called autoboxing and unboxing autoboxing is the automatic conversion that the java compiler makes between primitive data types and their corresponding object wrapper class when we directly assigned some values to each of these reference data types what we have done is auto boxing we automatically converted these primitive values to the corresponding wrapper class automatically but unboxing is the reverse we can convert a wrapper class to its primitive value so what i'm saying is that with unboxing we can treat these reference data type variables as if they were standard primitive values so for example let's say if boolean a is equal to true then we will display this is true so even though this is a reference data type it will still behave as a standard primitive data type because of the unboxing feature and the same thing goes with b except b has to be a character so let's check to see if this is equal to our at sign and this is also true so that is the unboxing feature you can still treat these reference data types as if they were primitives so even though there are a few advantages of wrapper classes over the primitive data type that they may contain there is still the disadvantage that accessing the values contained within a wrapper class still takes a lot more steps compared to using just a raw primitive value so if you're working on a program that contains millions of numbers for example using reference data types using the wrapper class for each primitive value is going to take a lot more steps compared to just using a standard permitted value so primitive values are a lot faster than reference data types so everybody that's the basics of wrapper classes if you would like a copy of all this code i will post all of this in the comments down below don't forget to do me a favor and smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro
