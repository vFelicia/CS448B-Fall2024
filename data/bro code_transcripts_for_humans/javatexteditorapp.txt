With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro here hope you're doing well and in
00:03 - this video we're going to be creating a
00:05 - basic text editor in java so sit back
00:08 - relax and enjoy the show
00:12 - if you find this video helpful please
00:13 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - let's get started people let's build a
00:21 - text editor so just so you know this
00:23 - isn't going to be anything that great
00:25 - it's going to be of the walmart great
00:27 - value brand of text editors
00:29 - it's not really going to be that
00:30 - sophisticated just something very basic
00:32 - so let's begin by creating a new java
00:35 - project
00:36 - so file new java project i will call
00:39 - this
00:40 - text editor and then click finish
00:44 - and we will not create a module then
00:46 - within the project folder text editor
00:49 - we're going to create two classes file
00:51 - new
00:52 - class i will call my first class just
00:54 - main just because it contains the main
00:56 - method
00:57 - so make sure to check public static void
00:59 - main
01:00 - and click finish then for our second
01:02 - class we're going to create a new class
01:05 - file new class
01:06 - and i will call this text editor
01:09 - and click finish
01:13 - all right so we have two classes one
01:15 - called main and the other called text
01:16 - editor
01:17 - within my main class i'm going to create
01:18 - an instance of my text editor class
01:21 - so new text editor
01:24 - you can give this a name instance like
01:27 - text editor text editor
01:28 - equals new text editor but i don't
01:30 - really think we'll be
01:31 - doing anything with this named instance
01:34 - this should be fine
01:35 - so we have a new text editor then this
01:38 - class
01:38 - is going to extends the jframe class
01:42 - extends jframe and it's also going to
01:45 - implements
01:46 - the action listener interface so that we
01:48 - can handle
01:49 - events we'll need some imports so we'll
01:52 - include these as we go along
01:54 - and since we're implementing an action
01:56 - listener interface
01:58 - we're going to need to add any
01:59 - unimplemented methods
02:01 - so we'll need to declare and define this
02:03 - action performed method
02:04 - but we'll get back to this later we need
02:06 - to create the constructor for this
02:08 - text editor class so let's do that at
02:09 - the top the constructor name is the same
02:12 - as the class name
02:13 - text editor and we're going to create
02:15 - our frame so
02:16 - with frames we usually say this dot set
02:19 - default close
02:21 - jframe dot exit on close
02:26 - so when you click that right x in the
02:28 - top right corner
02:29 - it's going to close out of the program
02:32 - and we should set a title
02:34 - this dot set title
02:37 - and name this whatever you want i'm
02:39 - going to call mine the bro
02:41 - text editor
02:45 - and we can set a size this dot set size
02:49 - and we can pass in a dimension or a
02:51 - width and a height
02:52 - i will set this to 500 by 500
02:56 - and we can use a flow layout if we want
02:59 - because i like full layouts compared to
03:01 - the standard
03:03 - default border layout manager so this
03:05 - dot
03:06 - set layout or you can set this to null
03:10 - and manually place all the components
03:12 - but
03:12 - i tend to like flow layouts new flow
03:16 - layout and then we'll need an import
03:22 - and we need to this dot set visible to
03:25 - true
03:31 - so here's our window now pay attention
03:34 - to when i run this
03:36 - this will appear in the top left corner
03:38 - if you want this to appear
03:39 - in the middle of your computer screen
03:41 - you can add this line of code
03:43 - this dot set location
03:47 - relative to no so this will appear in
03:50 - the middle of your computer screen
03:51 - or at least close to it much better i
03:55 - sometimes forget to include this line
03:56 - because it's not something i think about
03:58 - all right that is the constructor for
04:00 - now let's create a
04:02 - j text area to add to this frame so
04:05 - let's
04:05 - declare this outside of the constructor
04:07 - but we're going to instantiate it
04:09 - within the constructor so this is a j
04:12 - text area and we will call this
04:16 - text area and within the constructor
04:19 - we'll instantiate this
04:22 - and we'll probably need an import
04:26 - all right so j text area
04:29 - text area equals
04:32 - new j text
04:35 - area
04:39 - now for the time being we're going to
04:41 - add this text area
04:42 - to our frame but eventually we're going
04:44 - to be instead
04:46 - adding this to a scroll pane when we get
04:48 - to that point
04:49 - we just want this text area to be
04:50 - visible while we're working on this
04:53 - and let's set a size for this text area
04:55 - so text
04:56 - area dot set preferred size and we pass
05:00 - in a new dimension new dimension
05:04 - and let's say this will be 450 by 450
05:07 - something slightly smaller than the size
05:09 - of the frame
05:10 - and let's try this here's our text area
05:14 - the font is kind of small so we'll
05:16 - change that later and if we were to keep
05:18 - on typing
05:19 - it's just going to continue off forever
05:21 - we'll want to set the
05:23 - word wrapping to true so that when the
05:25 - text
05:26 - reaches this bright border it's going to
05:29 - move down to the next line
05:31 - so in order to set that it is text
05:35 - area dot set
05:38 - line wrap and we will set this to true
05:43 - let's also add text area dot
05:47 - set rap style word
05:52 - and that's it oh we set this to true as
05:55 - well
05:56 - okay so then when we run this and we
05:59 - were to type in some text
06:01 - if this touches the right border or gets
06:03 - close to it it's going to continue down
06:05 - to the next line
06:06 - let's also change the default font too
06:09 - so
06:10 - text area dot set font and you can pass
06:14 - in a new font
06:17 - new font pick whatever font you want
06:20 - i'll pick
06:21 - arial i'll make this plain so font dot
06:24 - plain
06:26 - and then a size 20 is a good size
06:33 - and this should be slightly larger this
06:37 - is some text cool
06:42 - for this next section we're going to add
06:44 - a scroll pane that contains a scroll bar
06:47 - and we will be adding this text area to
06:49 - the scroll pin
06:50 - and then adding the scroll pane to the
06:52 - frame so let's declare a scroll pin
06:55 - so outside of the constructor j scroll
06:58 - pane we will call this scroll pin
07:02 - and we'll finish instantiating this
07:04 - within the constructor we'll need an
07:05 - import as well so be sure to include
07:07 - that
07:08 - so after the text area let's create our
07:10 - scroll pane
07:11 - so scroll pane equals
07:15 - new j scroll pane
07:18 - and what do we want to add to the scroll
07:19 - pin we're going to add our text area
07:23 - and then instead of adding the text area
07:25 - to the frame
07:26 - we're going to in place add this uh the
07:29 - scroll
07:30 - pin to the frame instead there's a few
07:32 - things we need to set up with the scroll
07:34 - pin
07:34 - so let's set a preferred size we no
07:37 - longer need to do so with our text area
07:41 - so type in the name of the scroll pane
07:44 - and then we can use the set preferred
07:46 - size
07:47 - on the scroll pin and let's add a
07:50 - vertical scroll bar
07:51 - so in order to do that type in the name
07:54 - of the scroll pin
07:56 - dot set vertical scroll bar policy
08:02 - and there is a constant that we need to
08:03 - type in
08:05 - within the method scroll pane
08:08 - constants dot so
08:11 - let's pick vertical scroll bar
08:15 - maybe always you can also add as needed
08:17 - or never
08:18 - let's set this to always and
08:22 - let's take a look at this and for now
08:25 - i'm just going
08:26 - to change the font to something slightly
08:27 - larger just to test the
08:29 - scroll bar okay let's give it a go
08:33 - so here's our scroll bar it's currently
08:35 - not needed but it's still visible
08:37 - so let's type in some text type in
08:40 - whatever you want
08:42 - all right so as the text
08:45 - is being added to the text area you can
08:47 - see that the
08:49 - size of this text area is expanding and
08:51 - the
08:52 - scroll bar will actually move us up and
08:55 - down this text area
08:56 - so cool we know that this is working
08:58 - then now what we're going to do
09:00 - is allow the user to change the size of
09:03 - the font within the text area
09:05 - so we can best do this with a j spinner
09:08 - so that they can adjust
09:10 - the current size of the font so let's
09:12 - declare
09:13 - a j spinner outside of the constructor
09:15 - so j
09:17 - spinner we will call this spinner font
09:20 - size spinner and we will finish
09:24 - instantiating this within the
09:25 - constructor
09:27 - so font size spinner let's add this here
09:33 - font size spinner equals new j
09:37 - spinner and we can set a preferred size
09:41 - to this
09:42 - so font size spinner dot set
09:45 - preferred size new
09:49 - dimension
09:53 - 50 by 25 should be good
09:56 - and then we can set an initial value so
09:59 - font size spinner
10:01 - since our default font will be 20 we can
10:04 - set this to 20.
10:06 - font size spinner dot set value we will
10:09 - pass in
10:10 - 20.
10:13 - okay so with spinners they use something
10:16 - called a change
10:17 - listener since we're already using an
10:20 - action listener this is going to get a
10:21 - little complex
10:22 - but what we could do is that when we add
10:25 - a
10:26 - change listener to this we can just pass
10:28 - in an anonymous
10:30 - change listener so this part is going to
10:32 - be a little funky but
10:34 - it shouldn't be too bad so we're going
10:35 - to add a new
10:38 - change listener within the constructor
10:41 - or within the method of this add change
10:43 - listener
10:44 - so new change listener
10:50 - and we will need to import this and then
10:53 - add any unimplemented methods
10:55 - so what do we want to do when we
10:58 - actually change
10:59 - the value on our spinner well we're
11:01 - going to change the size of the font
11:03 - within the text area
11:04 - so text area dot
11:08 - set font
11:11 - and we will pass in a new font
11:17 - we're going to keep the font styling the
11:19 - same
11:20 - so we will pass in whatever the text
11:23 - area font is currently
11:25 - so text area
11:28 - dot get font
11:33 - and then follow this with dot
11:36 - get family
11:41 - for our second argument we have to
11:43 - separate this with
11:44 - a comma and then we are going to set
11:47 - this to plane so font
11:48 - dot plane and then the size
11:51 - so we need to get the current size of
11:53 - the spinner
11:54 - so to do that we type in font size
11:57 - spinner
11:58 - dot get value
12:02 - and then we will probably need to cast
12:04 - this as an integer
12:06 - so be sure to add this cast
12:10 - and i need one more parenthesis
12:13 - okay then we need to add this font size
12:16 - spinner to the frame
12:17 - so let's add this before we add the
12:20 - scroll pin
12:20 - so this dot add font size spinner
12:26 - now what happens when we run this
12:29 - we have this spinner it's set to 20 by
12:32 - default
12:33 - let's add some text
12:37 - and then if we were to increase this the
12:39 - size of the text
12:40 - is going to increase as well or decrease
12:46 - now if we set this to something massive
12:48 - like 100
12:50 - it's going to take out nearly the entire
12:52 - scroll pin
12:54 - and if you were to keep on increasing
12:56 - the size well then we have our
12:58 - scroll bar to actually scroll through
13:01 - this
13:02 - i think i'm going to add a label that
13:04 - just says font next to this spinner here
13:06 - so let's add that real quick
13:10 - j label we'll call this label actually
13:12 - better yet
13:13 - font label font label
13:16 - add this import
13:20 - and let's add this here
13:24 - font label equals new
13:27 - label actually that's a j label
13:31 - and let's set the text right away to
13:34 - just font
13:35 - and that's it and then we need to add
13:37 - this label
13:38 - so this dot add our
13:41 - font label
13:48 - and i think that's a little bit better
13:50 - we just have some clarification as to
13:51 - what this does
13:52 - it just changes the font for this next
13:56 - section
13:57 - let's let the user change the font color
13:59 - of the text area
14:00 - and we're going to need some help with
14:02 - the j color chooser class
14:04 - but first we'll need a button so let's
14:05 - declare a j button
14:07 - that will launch or create this instance
14:10 - of the
14:10 - j color chooser class so let's create a
14:13 - j button
14:13 - and we will call this font color
14:17 - button we'll need an import
14:22 - and we'll need to and finish
14:23 - instantiating this color button
14:25 - so let's add this after the spinner
14:28 - right here is good font color button
14:31 - equals
14:32 - new j button and we can set some text
14:35 - right away by passing in a string to the
14:37 - constructor
14:38 - so let's say color
14:42 - and we will add this button to the frame
14:45 - so this dot add
14:48 - font color button but i think i'm going
14:52 - to add that after the spinner here
14:55 - we will also need to add an action
14:57 - listener to this button so that it does
14:59 - something when we click on it
15:01 - so font color button dot add
15:04 - action listener since we're implementing
15:07 - the action listener interface
15:09 - we can just pass in this now within the
15:12 - action performed method at the bottom
15:14 - we're going to check to see
15:15 - if the event that happens is our font
15:18 - color button
15:19 - so if e dot get source
15:23 - is equal to our font color button
15:27 - then we're going to create a new
15:28 - instance of our j color chooser so
15:30 - j color chooser
15:34 - we will call this color chooser
15:38 - equals new j color chooser
15:43 - and be sure to include these imports
15:48 - now to get the color we're going to need
15:50 - to show a dialog
15:52 - box and we will assign whatever we
15:55 - choose
15:55 - to a color so color color
15:59 - equals color chooser
16:03 - dot show dialogue
16:08 - we can pass in a parent component we
16:09 - don't have one so let's set this to null
16:12 - we can set a title
16:16 - choose a color but it's not necessary
16:20 - and an initial color if you want a
16:22 - default color
16:23 - i'm going to set this to just black
16:25 - color dot black
16:34 - and then we will need to change the
16:36 - current font color
16:37 - so text area
16:41 - dot set foreground
16:44 - we're going to set this to our color
16:48 - and that's it let's try this
16:54 - let's type in some text
16:57 - i'm going to expand this a little bit
16:59 - make it larger and we can select a color
17:01 - let's change this to red and click ok
17:05 - now all of the text within the text area
17:07 - is red
17:09 - this next part is going to blow your
17:11 - mind we're going to let the user pick a
17:13 - font that they want for our text editor
17:15 - so we're going to need the help of a j
17:17 - combo box so let's declare that at the
17:19 - top
17:21 - j combo box let's call this font
17:24 - box and we'll need an import
17:30 - and we'll finish instantiating this
17:31 - after the color button so right here is
17:34 - good
17:35 - font box equals new j
17:39 - combo box with these j
17:42 - combo boxes we can add options to the
17:45 - stray combo box by passing in
17:47 - an array to this constructor but we'll
17:50 - need to create an
17:51 - array of all the available fonts in java
17:54 - so let's do that right before the font
17:56 - box so let's create
17:58 - an array of strings and we'll call this
18:00 - fonts
18:02 - and we need to get all of the current
18:04 - fonts available
18:05 - in java so what we do for that is we can
18:08 - type in
18:10 - graphics environment
18:16 - dot get local graphics environment
18:19 - dot get available font family names
18:26 - and this will take all the fonts
18:27 - available in java
18:29 - and assign them to our array of strings
18:32 - called fonts
18:34 - and within the constructor of the j
18:36 - combo box we're going to pass in
18:38 - this array of fonts then we'll need to
18:41 - add an action
18:42 - listener to this j combo box so font
18:45 - box dot add action listener
18:48 - since we're implementing the action
18:50 - listener interface
18:52 - we can just pass in this
18:55 - with these combo boxes we can set an
18:57 - initially selected value so let's do
18:59 - that
19:00 - so to do that it is fontbox.set
19:03 - selected either index or item so pass
19:07 - in a font name that you want for the
19:08 - default i'm just going to pick arial
19:10 - because
19:11 - that's what i picked originally for this
19:13 - text area for the default text
19:16 - so i'm just going to set this to arial
19:18 - by default
19:20 - then we need to add this font box to the
19:22 - frame
19:23 - and let's add that after the button this
19:26 - dot add
19:27 - font box and then when we run this
19:31 - we have a drop down menu a combo box
19:34 - with all of the fonts available to us
19:36 - however if we were to select one of
19:38 - these we want to actually change
19:40 - the font because right now it doesn't
19:41 - currently do that so within the action
19:44 - performed method we're going to add an
19:45 - if statement
19:46 - to check to see if the event that is
19:48 - passed in is equal to
19:50 - our font box we're going to add another
19:52 - if statement
19:53 - if e dot get source is
19:56 - equal to our font box
20:01 - then what we're going to do is change
20:03 - the current font for the text area
20:05 - so text area dot set
20:09 - font and we will pass in a new font
20:12 - the only thing that we're going to
20:13 - change is the current font family
20:16 - so font box
20:19 - dot get selected
20:22 - item this is going to get the item of
20:25 - whatever we set the font box to
20:28 - but we'll need to cast this as a string
20:31 - so make sure to add this cast right
20:33 - before this
20:35 - for the next argument we can just set
20:36 - this to plane so
20:38 - font dot plane and then we want to keep
20:42 - the font size the same as what it was
20:45 - previously
20:46 - so for the third argument we're going to
20:49 - get the current size of the text area
20:51 - more specifically the font
20:53 - so text area
20:56 - dot get font
20:59 - followed by dot get size
21:04 - this will keep the font size the same
21:07 - and that is it for the font box let's
21:10 - test this
21:14 - this is some text
21:19 - going to increase the font size a little
21:20 - bit and we should be able to change the
21:22 - font now
21:27 - so pick whatever font you like are
21:30 - wingdings available
21:33 - oh yeah but you can't really display
21:34 - them that's a shame
21:37 - alright so that's it for this portion
21:40 - let's add a menu bar
21:42 - for this menu bar i think we'll only
21:44 - have one tab just for
21:45 - file and we'll only be able to open a
21:48 - file save a file or
21:49 - exit so we'll need to create a menu bar
21:52 - a menu
21:53 - and then some menu items so let's add a
21:56 - menu bar first and we need to declare
21:58 - this
21:59 - j menu bar we will call this
22:02 - menu bar and we will need a menu
22:06 - so that's j menu we will call this
22:10 - file menu and we need some items to add
22:14 - to this file menu so these are j
22:17 - menu items or singular just item
22:21 - and we will have an open item item
22:26 - and then a save item and exit item
22:30 - so save item and exit item
22:37 - and be sure to include these imports too
22:44 - now we need to set up this menu bar
22:46 - first
22:47 - so let's add this after the font box
22:52 - i think i'm just going to add a comment
22:54 - just to section off our menu bar area
22:57 - so this isn't necessary but this will
22:59 - help me organize things
23:06 - all right so we'll have a little section
23:08 - for our menu bar
23:10 - so we need to finish instantiating
23:12 - everything so for our menu bar
23:14 - menu bar equals new j menu
23:18 - bar we'll need to create the
23:22 - file menu so that is file menu
23:25 - equals new j menu and we can set the
23:29 - text right away by passing it into the
23:31 - constructor
23:33 - so we will set this to file kind of like
23:35 - the tab
23:36 - on the top toolbar of your ide so it
23:39 - says file i'm just going to mimic that
23:42 - and we'll need to add some items to this
23:43 - file menu
23:45 - so we need to finish instantiating all
23:47 - of these menu items
23:49 - so we have open item equals
23:52 - new j menu item
23:55 - and we will set the text right away and
23:57 - this will be open
24:01 - so we have open save and exit
24:04 - open item save item
24:10 - the text will be save and then we need
24:13 - to exit
24:16 - exit item and exit
24:21 - this next portion has multiple levels to
24:23 - it we need to add all of these menu
24:25 - items
24:25 - to the menu and then add the menu to the
24:28 - menu bar
24:29 - and lastly add the menu bar to the frame
24:31 - so our first step is to add
24:33 - these menu items to the menu so we type
24:35 - in the name of the menu which is file
24:37 - menu
24:38 - and we use the add function and we're
24:40 - going to add all of these individual
24:42 - menu items
24:43 - so we need to begin with adding our open
24:46 - item
24:47 - j menu item followed by save item and
24:50 - exit item
24:50 - so i'm just going to paste this a few
24:52 - times and we have open item
24:55 - save item and then exit item now we need
24:58 - to add
24:59 - this menu to the menu bar so this time
25:01 - we type in the name of the menu bar
25:04 - dot add and we're adding our file menu
25:07 - this time and lastly we need to add this
25:10 - menu bar
25:11 - to the frame but we don't use add we
25:14 - type in this
25:15 - dot set menu bar and we pass in our menu
25:19 - bar
25:22 - and that's it oh it's set j menu bar
25:26 - i constantly make that mistake so this
25:28 - dot set
25:29 - j menu bar and then when we run this we
25:32 - should have a
25:33 - menu bar at the top so we only have one
25:36 - menu
25:36 - one tab and it has three items open
25:39 - save and exit but we want these to do
25:42 - things
25:42 - so we need to add some action listeners
25:44 - to each of these items
25:47 - so let's do that here
25:52 - so we have open item dot add action
25:55 - listener since we're implementing the
25:57 - action listener interface
25:58 - we can just pass in this so this
26:02 - and let's repeat the process for save
26:04 - item and exit item
26:07 - so we're just adding action listeners to
26:09 - all of these items
26:10 - now let's scroll down to the action
26:12 - performed method we're going to create
26:14 - actions for each of the items within our
26:17 - menu
26:18 - so we have if e.getsource
26:22 - is equal to our open item that's our
26:25 - open button basically then we're going
26:27 - to do something
26:28 - and we'll need to do the same process
26:29 - for save item and exit item
26:32 - so we have save item and exit item
26:35 - actually let's fill an exit item because
26:37 - it's only going to take a second
26:39 - to exit out of your program it is just
26:41 - system.exit and we pass
26:43 - in zero and that's it let's try it
26:48 - so i'm just going to type hello this is
26:51 - kind of lame so let's exit
26:53 - let's go to file and exit it does the
26:56 - same thing as that x button in the top
26:58 - right corner
26:58 - of the window uh but you can also do it
27:01 - here too
27:02 - you know file exit so that's an option
27:04 - available to you
27:05 - let's work on save item next now within
27:09 - the if statement of
27:10 - e.get source is equal to save item we're
27:13 - going to need the help of our
27:14 - jfile chooser class and we will select a
27:17 - file location to save our text to
27:20 - so for the first line we're going to
27:22 - create an instance of our j file chooser
27:25 - class
27:25 - so j file chooser
27:29 - let's call this instance file chooser
27:32 - equals new j file
27:35 - chooser
27:41 - and you can also set a default directory
27:44 - of where you want to begin
27:46 - looking for a file location to save so
27:49 - to do that
27:50 - we type in the name of the file chooser
27:52 - file chooser
27:53 - dot set current directory
27:56 - and we pass in a new file with the file
28:00 - path
28:00 - but if you want the default to be your
28:03 - project folder
28:04 - all you have to do is type in a dot and
28:06 - that's it
28:08 - otherwise you can pass in a file path
28:10 - like c
28:11 - colon slash blah blah blah whatever you
28:13 - want
28:14 - but let's just say i want my file path
28:16 - to begin
28:17 - in my project folder so that is just a
28:19 - dot and at this point we need to
28:21 - open a show save dialog and this returns
28:25 - an integer response so we can actually
28:27 - store this within a variable let's call
28:30 - this variable
28:31 - response and it stores an integer value
28:34 - so we need to type
28:35 - file chooser dot show
28:39 - save dialog not open dialog and if you
28:42 - have a parent component you can add that
28:43 - here but we'll just say null for now
28:46 - so we need to check to see what this
28:48 - response is
28:50 - it's going to be either zero or one so
28:52 - we can check that with an
28:53 - if statement so if response is equal to
28:56 - zero but a better way
28:58 - of writing this would be j file
29:01 - chooser dot approve option
29:05 - so that would be better so if they find
29:10 - a suitable file location then we're
29:12 - going to create a
29:13 - new file and a print writer as well so
29:16 - let's just declare a file file
29:19 - and a print writer and we'll call this
29:22 - file
29:24 - out all right so
29:27 - let's finish instantiating this file
29:29 - file
29:30 - equals new file
29:33 - and we're going to get the current path
29:36 - of the file location that we selected
29:39 - for this response for file chooser
29:42 - so we type file chooser
29:46 - dot get selected file
29:50 - dot get absolute path
29:54 - so that's going to be stored within our
29:56 - file
29:57 - and then we are going to print to
30:01 - our file out print writer so we need to
30:04 - finish
30:04 - instantiating this but we're going to
30:06 - probably need to put this within a try
30:08 - and catch block
30:09 - so let's finish instantiating our print
30:11 - writer so file out
30:14 - equals new print
30:17 - writer and we're going to pass in our
30:20 - file
30:23 - and we'll need to surround this with a
30:26 - try and catch block
30:30 - all right now for the second line of the
30:32 - try block
30:34 - file out dot
30:37 - print line and what we're going to print
30:41 - is
30:41 - text area
30:44 - dot get text
30:48 - and it would be good practice if we were
30:50 - to close this print writer
30:52 - so let's add a finally block
30:55 - so at the end of trying this or if we
30:58 - catch an exception we're still going to
30:59 - close
31:00 - our file out print writer so
31:02 - fileout.close
31:07 - and i think we need to initialize this
31:09 - uh so let's change one thing print
31:11 - writer file out
31:12 - equals null and then we're going to
31:15 - instantiate this within the try block
31:18 - so then we can catch any exceptions that
31:19 - occur so now we should be able to save
31:22 - a file someplace within our computer so
31:25 - let's try this
31:28 - let's change the font slightly maybe 30
31:31 - and a color
31:33 - why not purple and then let's select
31:37 - a font i wonder if there's ink free i
31:40 - think it should be in here
31:42 - uh there it is all right i'll write a
31:45 - poem
31:47 - roses are red
31:50 - violets are blue
31:53 - booty booty booty booty
31:58 - rockin everywhere and we should be able
32:01 - to save this
32:02 - so let's go to file save
32:05 - the default directory is now my project
32:07 - folder but i can save this anywhere
32:09 - let's save this to my desktop and we can
32:12 - pick a file name i will save this as
32:15 - home and be sure to add the file
32:17 - extension
32:18 - so i want to save this as a txt file so
32:21 - that's
32:22 - dot txt you could save this as an html
32:25 - file too if you want to
32:27 - write an html file for a website or
32:29 - something so i'm going to save this as
32:31 - poem.txt and i'm saving this my desktop
32:34 - and this should be saved let's take a
32:36 - look well welcome to my desktop
32:38 - everybody there's a bunch of junk in
32:39 - here but here's that poem that we wrote
32:42 - the font as well as the font color are
32:44 - not going to be saved since this is a
32:46 - plain
32:47 - text file but all of the text is saved
32:49 - from the text editor
32:50 - and here is that poem that we wrote
32:52 - roses are red violets are blue
32:54 - booty booty booty booty rocking
32:55 - everywhere now we can actually edit this
32:58 - save it and then reload this into our
33:00 - text editor program
33:01 - so i actually wrote a haiku for you guys
33:04 - your code is thunder high above and
33:06 - travels far like comment and sub
33:09 - so i'm going to file save and we're just
33:12 - going to keep this as the same
33:13 - name poem.txt now let's go to the
33:16 - open item section of our action
33:18 - performance method and we are going to
33:20 - load this file this time the first two
33:23 - lines of code are the same
33:24 - for the save item portion and we can
33:26 - just copy these
33:27 - just to save some time so it's going to
33:29 - be the same as
33:30 - j file chooser we'll call this file
33:32 - chooser equals new j file chooser
33:34 - and you can set the current directory if
33:36 - you want now an option available to you
33:39 - is that you can apply a filter to only
33:42 - search for
33:42 - certain file extensions so if you want
33:46 - this is how to do that we're going to
33:48 - create a new instance of
33:49 - file name extension
33:53 - filter and we will call this instance
33:55 - just filter
33:57 - equals new file name extension filter
34:01 - but i'm just going to copy this
34:04 - and within the constructor for this file
34:06 - name extension filter
34:08 - we pass in a title as well as a
34:11 - file extension of what we want to look
34:13 - for so if we only want to look for txt
34:16 - files
34:17 - let's say text files this is what's
34:20 - going to appear in the drop down menu
34:22 - and this portion this argument is the
34:25 - file extension
34:26 - so that is txt and in order to apply
34:29 - this filter we need to
34:30 - set the file filter for the file chooser
34:33 - so we type in the name of the file
34:35 - chooser dot
34:37 - set file filter and we pass
34:41 - in our filter which is filter and that's
34:44 - it
34:45 - our next portion is that we're going to
34:47 - show open
34:48 - dialogue and this will return a response
34:51 - so let's store that response within a
34:53 - variable called response
34:55 - so this is normally a one or a zero for
34:57 - the response
34:58 - so into response equals file
35:02 - chooser dot show open
35:06 - dialog be sure you're not clicking show
35:09 - save dialog it's going to be a show open
35:11 - dialog
35:11 - and if there's a parent component you
35:13 - can add that here but we don't have one
35:14 - so let's set this to no
35:16 - then if response
35:19 - is equal to j file
35:23 - chooser dot approve option
35:27 - then we are going to open this file but
35:30 - let's create a new file
35:32 - file file equals
35:36 - new file and within the constructor for
35:40 - this file
35:41 - we're going to pass in file
35:44 - chooser dot get selected
35:47 - file dot get absolute
35:51 - path so let's create a scanner
35:55 - scanner we're going to call this file in
35:58 - kind of like what we did with file out
36:01 - so file in and we'll set this to
36:03 - null for now because we're going to
36:04 - instantiate this within a try and catch
36:06 - block
36:07 - so file in equals
36:11 - new scanner and we are going to
36:14 - pass in our file
36:18 - and then it's going to prompt us for
36:20 - surrounding this with a try and catch
36:21 - block
36:23 - so the second line within the try block
36:25 - we're going to check to see if
36:27 - this file is in fact a file like a
36:30 - legitimate file
36:31 - so if file dot
36:34 - is file then we are going to attempt to
36:39 - read this file so while
36:42 - file in dot has
36:46 - next line
36:50 - then we are going to read this file line
36:53 - by line but we're going to store
36:55 - each line within a variable called line
36:58 - and this is going to be reassigned a
36:59 - value after each
37:01 - iteration of the while loop so string
37:03 - line equals
37:05 - file in dot next
37:08 - line this doesn't add enters
37:11 - to go down the next line when we
37:13 - actually load this
37:14 - so i'm just going to add a new line
37:17 - after
37:18 - each line so this is a new line
37:20 - character
37:23 - and then we are going to append our text
37:25 - area so text
37:26 - area dot append
37:30 - and we are going to append this with our
37:34 - line and then we should
37:36 - close the scanner at the very end so
37:39 - let's add a finally block after the
37:41 - try and catch block finally file in
37:46 - dot close
37:50 - and let's attempt to read that file of
37:52 - the haiku that we wrote
37:54 - currently nothing's within my text
37:56 - editor right well let's open a file
37:59 - let's go to file open and the default
38:02 - directory
38:03 - is set to my project folder but i can
38:05 - look anywhere
38:06 - so that file is on my desktop and since
38:09 - we applied a filter
38:10 - i have either all files that i can
38:11 - search for or just
38:13 - txt files so this will only display
38:16 - folders and
38:17 - txt files so here's my poem poem.txt and
38:20 - i'm going to open this
38:22 - and here's that poem that we wrote your
38:24 - code is thunder
38:25 - high above and travels far like
38:27 - commented sub
38:28 - and then you can change the color and
38:30 - everything too so do whatever you want
38:33 - well everyone that's just how to create
38:35 - a basic text editor there's still way
38:37 - more advanced stuff you can do but
38:39 - since we're just beginners i thought i
38:40 - would hold off on that for now
38:42 - so if you want a copy of all this code
38:44 - i'll post all of this in the comments
38:46 - down below
38:47 - but yeah that's one of a few ways in
38:48 - which you can create a simple
38:50 - text editor in java
38:58 - why are you still watching hey you yeah
39:01 - i'm talking to you
39:02 - if you learn something new then you can
39:04 - help me
39:05 - help you in three easy steps by smashing
39:08 - that like button
39:09 - drop a comment down below and subscribe
39:12 - if you'd like to become a fellow bro
39:14 - [Music]
39:28 - [Music]
39:34 - you

Cleaned transcript:

hey what's going on everybody it's your bro here hope you're doing well and in this video we're going to be creating a basic text editor in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running let's get started people let's build a text editor so just so you know this isn't going to be anything that great it's going to be of the walmart great value brand of text editors it's not really going to be that sophisticated just something very basic so let's begin by creating a new java project so file new java project i will call this text editor and then click finish and we will not create a module then within the project folder text editor we're going to create two classes file new class i will call my first class just main just because it contains the main method so make sure to check public static void main and click finish then for our second class we're going to create a new class file new class and i will call this text editor and click finish all right so we have two classes one called main and the other called text editor within my main class i'm going to create an instance of my text editor class so new text editor you can give this a name instance like text editor text editor equals new text editor but i don't really think we'll be doing anything with this named instance this should be fine so we have a new text editor then this class is going to extends the jframe class extends jframe and it's also going to implements the action listener interface so that we can handle events we'll need some imports so we'll include these as we go along and since we're implementing an action listener interface we're going to need to add any unimplemented methods so we'll need to declare and define this action performed method but we'll get back to this later we need to create the constructor for this text editor class so let's do that at the top the constructor name is the same as the class name text editor and we're going to create our frame so with frames we usually say this dot set default close jframe dot exit on close so when you click that right x in the top right corner it's going to close out of the program and we should set a title this dot set title and name this whatever you want i'm going to call mine the bro text editor and we can set a size this dot set size and we can pass in a dimension or a width and a height i will set this to 500 by 500 and we can use a flow layout if we want because i like full layouts compared to the standard default border layout manager so this dot set layout or you can set this to null and manually place all the components but i tend to like flow layouts new flow layout and then we'll need an import and we need to this dot set visible to true so here's our window now pay attention to when i run this this will appear in the top left corner if you want this to appear in the middle of your computer screen you can add this line of code this dot set location relative to no so this will appear in the middle of your computer screen or at least close to it much better i sometimes forget to include this line because it's not something i think about all right that is the constructor for now let's create a j text area to add to this frame so let's declare this outside of the constructor but we're going to instantiate it within the constructor so this is a j text area and we will call this text area and within the constructor we'll instantiate this and we'll probably need an import all right so j text area text area equals new j text area now for the time being we're going to add this text area to our frame but eventually we're going to be instead adding this to a scroll pane when we get to that point we just want this text area to be visible while we're working on this and let's set a size for this text area so text area dot set preferred size and we pass in a new dimension new dimension and let's say this will be 450 by 450 something slightly smaller than the size of the frame and let's try this here's our text area the font is kind of small so we'll change that later and if we were to keep on typing it's just going to continue off forever we'll want to set the word wrapping to true so that when the text reaches this bright border it's going to move down to the next line so in order to set that it is text area dot set line wrap and we will set this to true let's also add text area dot set rap style word and that's it oh we set this to true as well okay so then when we run this and we were to type in some text if this touches the right border or gets close to it it's going to continue down to the next line let's also change the default font too so text area dot set font and you can pass in a new font new font pick whatever font you want i'll pick arial i'll make this plain so font dot plain and then a size 20 is a good size and this should be slightly larger this is some text cool for this next section we're going to add a scroll pane that contains a scroll bar and we will be adding this text area to the scroll pin and then adding the scroll pane to the frame so let's declare a scroll pin so outside of the constructor j scroll pane we will call this scroll pin and we'll finish instantiating this within the constructor we'll need an import as well so be sure to include that so after the text area let's create our scroll pane so scroll pane equals new j scroll pane and what do we want to add to the scroll pin we're going to add our text area and then instead of adding the text area to the frame we're going to in place add this uh the scroll pin to the frame instead there's a few things we need to set up with the scroll pin so let's set a preferred size we no longer need to do so with our text area so type in the name of the scroll pane and then we can use the set preferred size on the scroll pin and let's add a vertical scroll bar so in order to do that type in the name of the scroll pin dot set vertical scroll bar policy and there is a constant that we need to type in within the method scroll pane constants dot so let's pick vertical scroll bar maybe always you can also add as needed or never let's set this to always and let's take a look at this and for now i'm just going to change the font to something slightly larger just to test the scroll bar okay let's give it a go so here's our scroll bar it's currently not needed but it's still visible so let's type in some text type in whatever you want all right so as the text is being added to the text area you can see that the size of this text area is expanding and the scroll bar will actually move us up and down this text area so cool we know that this is working then now what we're going to do is allow the user to change the size of the font within the text area so we can best do this with a j spinner so that they can adjust the current size of the font so let's declare a j spinner outside of the constructor so j spinner we will call this spinner font size spinner and we will finish instantiating this within the constructor so font size spinner let's add this here font size spinner equals new j spinner and we can set a preferred size to this so font size spinner dot set preferred size new dimension 50 by 25 should be good and then we can set an initial value so font size spinner since our default font will be 20 we can set this to 20. font size spinner dot set value we will pass in 20. okay so with spinners they use something called a change listener since we're already using an action listener this is going to get a little complex but what we could do is that when we add a change listener to this we can just pass in an anonymous change listener so this part is going to be a little funky but it shouldn't be too bad so we're going to add a new change listener within the constructor or within the method of this add change listener so new change listener and we will need to import this and then add any unimplemented methods so what do we want to do when we actually change the value on our spinner well we're going to change the size of the font within the text area so text area dot set font and we will pass in a new font we're going to keep the font styling the same so we will pass in whatever the text area font is currently so text area dot get font and then follow this with dot get family for our second argument we have to separate this with a comma and then we are going to set this to plane so font dot plane and then the size so we need to get the current size of the spinner so to do that we type in font size spinner dot get value and then we will probably need to cast this as an integer so be sure to add this cast and i need one more parenthesis okay then we need to add this font size spinner to the frame so let's add this before we add the scroll pin so this dot add font size spinner now what happens when we run this we have this spinner it's set to 20 by default let's add some text and then if we were to increase this the size of the text is going to increase as well or decrease now if we set this to something massive like 100 it's going to take out nearly the entire scroll pin and if you were to keep on increasing the size well then we have our scroll bar to actually scroll through this i think i'm going to add a label that just says font next to this spinner here so let's add that real quick j label we'll call this label actually better yet font label font label add this import and let's add this here font label equals new label actually that's a j label and let's set the text right away to just font and that's it and then we need to add this label so this dot add our font label and i think that's a little bit better we just have some clarification as to what this does it just changes the font for this next section let's let the user change the font color of the text area and we're going to need some help with the j color chooser class but first we'll need a button so let's declare a j button that will launch or create this instance of the j color chooser class so let's create a j button and we will call this font color button we'll need an import and we'll need to and finish instantiating this color button so let's add this after the spinner right here is good font color button equals new j button and we can set some text right away by passing in a string to the constructor so let's say color and we will add this button to the frame so this dot add font color button but i think i'm going to add that after the spinner here we will also need to add an action listener to this button so that it does something when we click on it so font color button dot add action listener since we're implementing the action listener interface we can just pass in this now within the action performed method at the bottom we're going to check to see if the event that happens is our font color button so if e dot get source is equal to our font color button then we're going to create a new instance of our j color chooser so j color chooser we will call this color chooser equals new j color chooser and be sure to include these imports now to get the color we're going to need to show a dialog box and we will assign whatever we choose to a color so color color equals color chooser dot show dialogue we can pass in a parent component we don't have one so let's set this to null we can set a title choose a color but it's not necessary and an initial color if you want a default color i'm going to set this to just black color dot black and then we will need to change the current font color so text area dot set foreground we're going to set this to our color and that's it let's try this let's type in some text i'm going to expand this a little bit make it larger and we can select a color let's change this to red and click ok now all of the text within the text area is red this next part is going to blow your mind we're going to let the user pick a font that they want for our text editor so we're going to need the help of a j combo box so let's declare that at the top j combo box let's call this font box and we'll need an import and we'll finish instantiating this after the color button so right here is good font box equals new j combo box with these j combo boxes we can add options to the stray combo box by passing in an array to this constructor but we'll need to create an array of all the available fonts in java so let's do that right before the font box so let's create an array of strings and we'll call this fonts and we need to get all of the current fonts available in java so what we do for that is we can type in graphics environment dot get local graphics environment dot get available font family names and this will take all the fonts available in java and assign them to our array of strings called fonts and within the constructor of the j combo box we're going to pass in this array of fonts then we'll need to add an action listener to this j combo box so font box dot add action listener since we're implementing the action listener interface we can just pass in this with these combo boxes we can set an initially selected value so let's do that so to do that it is fontbox.set selected either index or item so pass in a font name that you want for the default i'm just going to pick arial because that's what i picked originally for this text area for the default text so i'm just going to set this to arial by default then we need to add this font box to the frame and let's add that after the button this dot add font box and then when we run this we have a drop down menu a combo box with all of the fonts available to us however if we were to select one of these we want to actually change the font because right now it doesn't currently do that so within the action performed method we're going to add an if statement to check to see if the event that is passed in is equal to our font box we're going to add another if statement if e dot get source is equal to our font box then what we're going to do is change the current font for the text area so text area dot set font and we will pass in a new font the only thing that we're going to change is the current font family so font box dot get selected item this is going to get the item of whatever we set the font box to but we'll need to cast this as a string so make sure to add this cast right before this for the next argument we can just set this to plane so font dot plane and then we want to keep the font size the same as what it was previously so for the third argument we're going to get the current size of the text area more specifically the font so text area dot get font followed by dot get size this will keep the font size the same and that is it for the font box let's test this this is some text going to increase the font size a little bit and we should be able to change the font now so pick whatever font you like are wingdings available oh yeah but you can't really display them that's a shame alright so that's it for this portion let's add a menu bar for this menu bar i think we'll only have one tab just for file and we'll only be able to open a file save a file or exit so we'll need to create a menu bar a menu and then some menu items so let's add a menu bar first and we need to declare this j menu bar we will call this menu bar and we will need a menu so that's j menu we will call this file menu and we need some items to add to this file menu so these are j menu items or singular just item and we will have an open item item and then a save item and exit item so save item and exit item and be sure to include these imports too now we need to set up this menu bar first so let's add this after the font box i think i'm just going to add a comment just to section off our menu bar area so this isn't necessary but this will help me organize things all right so we'll have a little section for our menu bar so we need to finish instantiating everything so for our menu bar menu bar equals new j menu bar we'll need to create the file menu so that is file menu equals new j menu and we can set the text right away by passing it into the constructor so we will set this to file kind of like the tab on the top toolbar of your ide so it says file i'm just going to mimic that and we'll need to add some items to this file menu so we need to finish instantiating all of these menu items so we have open item equals new j menu item and we will set the text right away and this will be open so we have open save and exit open item save item the text will be save and then we need to exit exit item and exit this next portion has multiple levels to it we need to add all of these menu items to the menu and then add the menu to the menu bar and lastly add the menu bar to the frame so our first step is to add these menu items to the menu so we type in the name of the menu which is file menu and we use the add function and we're going to add all of these individual menu items so we need to begin with adding our open item j menu item followed by save item and exit item so i'm just going to paste this a few times and we have open item save item and then exit item now we need to add this menu to the menu bar so this time we type in the name of the menu bar dot add and we're adding our file menu this time and lastly we need to add this menu bar to the frame but we don't use add we type in this dot set menu bar and we pass in our menu bar and that's it oh it's set j menu bar i constantly make that mistake so this dot set j menu bar and then when we run this we should have a menu bar at the top so we only have one menu one tab and it has three items open save and exit but we want these to do things so we need to add some action listeners to each of these items so let's do that here so we have open item dot add action listener since we're implementing the action listener interface we can just pass in this so this and let's repeat the process for save item and exit item so we're just adding action listeners to all of these items now let's scroll down to the action performed method we're going to create actions for each of the items within our menu so we have if e.getsource is equal to our open item that's our open button basically then we're going to do something and we'll need to do the same process for save item and exit item so we have save item and exit item actually let's fill an exit item because it's only going to take a second to exit out of your program it is just system.exit and we pass in zero and that's it let's try it so i'm just going to type hello this is kind of lame so let's exit let's go to file and exit it does the same thing as that x button in the top right corner of the window uh but you can also do it here too you know file exit so that's an option available to you let's work on save item next now within the if statement of e.get source is equal to save item we're going to need the help of our jfile chooser class and we will select a file location to save our text to so for the first line we're going to create an instance of our j file chooser class so j file chooser let's call this instance file chooser equals new j file chooser and you can also set a default directory of where you want to begin looking for a file location to save so to do that we type in the name of the file chooser file chooser dot set current directory and we pass in a new file with the file path but if you want the default to be your project folder all you have to do is type in a dot and that's it otherwise you can pass in a file path like c colon slash blah blah blah whatever you want but let's just say i want my file path to begin in my project folder so that is just a dot and at this point we need to open a show save dialog and this returns an integer response so we can actually store this within a variable let's call this variable response and it stores an integer value so we need to type file chooser dot show save dialog not open dialog and if you have a parent component you can add that here but we'll just say null for now so we need to check to see what this response is it's going to be either zero or one so we can check that with an if statement so if response is equal to zero but a better way of writing this would be j file chooser dot approve option so that would be better so if they find a suitable file location then we're going to create a new file and a print writer as well so let's just declare a file file and a print writer and we'll call this file out all right so let's finish instantiating this file file equals new file and we're going to get the current path of the file location that we selected for this response for file chooser so we type file chooser dot get selected file dot get absolute path so that's going to be stored within our file and then we are going to print to our file out print writer so we need to finish instantiating this but we're going to probably need to put this within a try and catch block so let's finish instantiating our print writer so file out equals new print writer and we're going to pass in our file and we'll need to surround this with a try and catch block all right now for the second line of the try block file out dot print line and what we're going to print is text area dot get text and it would be good practice if we were to close this print writer so let's add a finally block so at the end of trying this or if we catch an exception we're still going to close our file out print writer so fileout.close and i think we need to initialize this uh so let's change one thing print writer file out equals null and then we're going to instantiate this within the try block so then we can catch any exceptions that occur so now we should be able to save a file someplace within our computer so let's try this let's change the font slightly maybe 30 and a color why not purple and then let's select a font i wonder if there's ink free i think it should be in here uh there it is all right i'll write a poem roses are red violets are blue booty booty booty booty rockin everywhere and we should be able to save this so let's go to file save the default directory is now my project folder but i can save this anywhere let's save this to my desktop and we can pick a file name i will save this as home and be sure to add the file extension so i want to save this as a txt file so that's dot txt you could save this as an html file too if you want to write an html file for a website or something so i'm going to save this as poem.txt and i'm saving this my desktop and this should be saved let's take a look well welcome to my desktop everybody there's a bunch of junk in here but here's that poem that we wrote the font as well as the font color are not going to be saved since this is a plain text file but all of the text is saved from the text editor and here is that poem that we wrote roses are red violets are blue booty booty booty booty rocking everywhere now we can actually edit this save it and then reload this into our text editor program so i actually wrote a haiku for you guys your code is thunder high above and travels far like comment and sub so i'm going to file save and we're just going to keep this as the same name poem.txt now let's go to the open item section of our action performance method and we are going to load this file this time the first two lines of code are the same for the save item portion and we can just copy these just to save some time so it's going to be the same as j file chooser we'll call this file chooser equals new j file chooser and you can set the current directory if you want now an option available to you is that you can apply a filter to only search for certain file extensions so if you want this is how to do that we're going to create a new instance of file name extension filter and we will call this instance just filter equals new file name extension filter but i'm just going to copy this and within the constructor for this file name extension filter we pass in a title as well as a file extension of what we want to look for so if we only want to look for txt files let's say text files this is what's going to appear in the drop down menu and this portion this argument is the file extension so that is txt and in order to apply this filter we need to set the file filter for the file chooser so we type in the name of the file chooser dot set file filter and we pass in our filter which is filter and that's it our next portion is that we're going to show open dialogue and this will return a response so let's store that response within a variable called response so this is normally a one or a zero for the response so into response equals file chooser dot show open dialog be sure you're not clicking show save dialog it's going to be a show open dialog and if there's a parent component you can add that here but we don't have one so let's set this to no then if response is equal to j file chooser dot approve option then we are going to open this file but let's create a new file file file equals new file and within the constructor for this file we're going to pass in file chooser dot get selected file dot get absolute path so let's create a scanner scanner we're going to call this file in kind of like what we did with file out so file in and we'll set this to null for now because we're going to instantiate this within a try and catch block so file in equals new scanner and we are going to pass in our file and then it's going to prompt us for surrounding this with a try and catch block so the second line within the try block we're going to check to see if this file is in fact a file like a legitimate file so if file dot is file then we are going to attempt to read this file so while file in dot has next line then we are going to read this file line by line but we're going to store each line within a variable called line and this is going to be reassigned a value after each iteration of the while loop so string line equals file in dot next line this doesn't add enters to go down the next line when we actually load this so i'm just going to add a new line after each line so this is a new line character and then we are going to append our text area so text area dot append and we are going to append this with our line and then we should close the scanner at the very end so let's add a finally block after the try and catch block finally file in dot close and let's attempt to read that file of the haiku that we wrote currently nothing's within my text editor right well let's open a file let's go to file open and the default directory is set to my project folder but i can look anywhere so that file is on my desktop and since we applied a filter i have either all files that i can search for or just txt files so this will only display folders and txt files so here's my poem poem.txt and i'm going to open this and here's that poem that we wrote your code is thunder high above and travels far like commented sub and then you can change the color and everything too so do whatever you want well everyone that's just how to create a basic text editor there's still way more advanced stuff you can do but since we're just beginners i thought i would hold off on that for now so if you want a copy of all this code i'll post all of this in the comments down below but yeah that's one of a few ways in which you can create a simple text editor in java why are you still watching hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
