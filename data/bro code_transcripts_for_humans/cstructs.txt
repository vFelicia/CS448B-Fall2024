With timestamps:

00:02 - okay everybody so let's talk about
00:04 - structs a struct is short for structure
00:07 - think of it as a collection of related
00:09 - members kind of like variables they can
00:12 - be of different data types unlike with
00:14 - arrays structs are listed under one name
00:17 - in a block of memory in order to refer
00:19 - to that struct we can refer to a
00:21 - variable name and then we have access to
00:23 - that block of memory that contains
00:25 - related members and lastly structs are
00:28 - very similar to classes in other
00:31 - languages if you're familiar with more
00:33 - than just c you'll probably know what a
00:35 - class is but there are no methods within
00:37 - a struct it's only members so we can
00:39 - actually use structs to mimic real world
00:42 - objects let's say that maybe we're
00:44 - playing a game and we need two players
00:46 - each player will have a name and a score
00:49 - these will be the members so to create a
00:52 - struct outside of our main function we
00:54 - will type the keyword struct followed by
00:57 - a tag name let's say we are working with
00:59 - players then we need a set of curly
01:02 - braces then end it with a semicolon so
01:05 - any members think of these like
01:06 - variables so let's say we have a
01:08 - character array named name and i'll give
01:11 - this a size of maybe 12.
01:13 - so we will declare these but not assign
01:15 - them we'll do that later and we have an
01:17 - int named score so each player is going
01:21 - to have a name and a score kind of like
01:24 - we're playing an arcade game now to
01:26 - assign some of these values we're going
01:27 - to create a type of variable and a
01:30 - player is going to be kind of the data
01:32 - type so we will type struct
01:35 - then the tag name which was player
01:39 - and then a variable name let's say we
01:40 - have player one and player two so with
01:43 - these structs you can reuse them so we
01:45 - have struct player player one and struct
01:48 - player player two so we can assign
01:51 - values to these members however if we
01:53 - have an array of characters we're going
01:54 - to use the string copy function
01:57 - so let's use the string copy function
02:01 - then to access one of the members you
02:02 - will type the name of that struct so
02:05 - let's say player 1 and then follow this
02:07 - with a dot the dot is a member axis
02:11 - operator so after typing the dot we have
02:13 - access to a name and score member so
02:17 - let's set the player's name equal to
02:19 - whatever your first name is now if
02:21 - you're not working with an array of
02:22 - characters such as an integer you can
02:24 - just access these directly so let's set
02:26 - player ones
02:28 - score to equal maybe four points and we
02:31 - also have player two but we have not
02:33 - assigned values to its members so this
02:36 - time let's assign player two's name and
02:39 - score
02:40 - so we can just copy what we have but
02:42 - change player one to player two player
02:44 - two let's say is bra and player two's
02:47 - score is five now if i would like to
02:50 - display these members i can do so with a
02:52 - print statement so printf let's display
02:56 - our name first so i will use the s
02:58 - format specifier
03:00 - player one dot name and then i'll add a
03:02 - new line then to access player one's
03:05 - score well that's an integer so i will
03:07 - use the d format specifier player one
03:10 - dot score and then let's do the same
03:12 - thing with player two
03:14 - so player two dot name and player 2 dot
03:18 - score so we have our player 1 strux name
03:21 - member as bro and score member set to 4
03:25 - and then our player 2 struct has a name
03:28 - member of bra
03:30 - and a score member of five so yeah
03:32 - that's basically a struct it's a
03:34 - collection of related members think of
03:37 - these kind of like variables they can be
03:40 - of different data types unlike arrays
03:42 - and they are listed under one name in a
03:44 - block of memory so in this example we
03:46 - have player 1 and player 2. player 1 and
03:49 - player 2 refer to different blocks of
03:51 - memory which contain their own unique
03:54 - members if you're familiar with other
03:56 - programming languages they're very
03:58 - similar to classes but they cannot
04:01 - contain any methods so yeah those are
04:03 - structs if you would like a copy of this
04:05 - code i'll post this to the comments
04:06 - section down below and well yeah those
04:08 - are structs in c

Cleaned transcript:

okay everybody so let's talk about structs a struct is short for structure think of it as a collection of related members kind of like variables they can be of different data types unlike with arrays structs are listed under one name in a block of memory in order to refer to that struct we can refer to a variable name and then we have access to that block of memory that contains related members and lastly structs are very similar to classes in other languages if you're familiar with more than just c you'll probably know what a class is but there are no methods within a struct it's only members so we can actually use structs to mimic real world objects let's say that maybe we're playing a game and we need two players each player will have a name and a score these will be the members so to create a struct outside of our main function we will type the keyword struct followed by a tag name let's say we are working with players then we need a set of curly braces then end it with a semicolon so any members think of these like variables so let's say we have a character array named name and i'll give this a size of maybe 12. so we will declare these but not assign them we'll do that later and we have an int named score so each player is going to have a name and a score kind of like we're playing an arcade game now to assign some of these values we're going to create a type of variable and a player is going to be kind of the data type so we will type struct then the tag name which was player and then a variable name let's say we have player one and player two so with these structs you can reuse them so we have struct player player one and struct player player two so we can assign values to these members however if we have an array of characters we're going to use the string copy function so let's use the string copy function then to access one of the members you will type the name of that struct so let's say player 1 and then follow this with a dot the dot is a member axis operator so after typing the dot we have access to a name and score member so let's set the player's name equal to whatever your first name is now if you're not working with an array of characters such as an integer you can just access these directly so let's set player ones score to equal maybe four points and we also have player two but we have not assigned values to its members so this time let's assign player two's name and score so we can just copy what we have but change player one to player two player two let's say is bra and player two's score is five now if i would like to display these members i can do so with a print statement so printf let's display our name first so i will use the s format specifier player one dot name and then i'll add a new line then to access player one's score well that's an integer so i will use the d format specifier player one dot score and then let's do the same thing with player two so player two dot name and player 2 dot score so we have our player 1 strux name member as bro and score member set to 4 and then our player 2 struct has a name member of bra and a score member of five so yeah that's basically a struct it's a collection of related members think of these kind of like variables they can be of different data types unlike arrays and they are listed under one name in a block of memory so in this example we have player 1 and player 2. player 1 and player 2 refer to different blocks of memory which contain their own unique members if you're familiar with other programming languages they're very similar to classes but they cannot contain any methods so yeah those are structs if you would like a copy of this code i'll post this to the comments section down below and well yeah those are structs in c
