With timestamps:

00:00 - hey it's you bro hope you're doing well
00:01 - and in this video i'm going to give you
00:03 - all an overview of the image view node
00:05 - in javafx so sit back relax
00:09 - and enjoy the show if you wouldn't mind
00:13 - please like comment and subscribe one
00:15 - like
00:16 - equals one prayer for the youtube
00:18 - algorithm
00:19 - okay people image view image view is a
00:22 - node used
00:23 - for painting images loaded with images
00:26 - the way that i think of them
00:27 - is that an image is like a photograph
00:30 - and an image view is a picture frame
00:32 - for that photograph it holds an image a
00:35 - photograph
00:36 - for this demonstration i have two images
00:38 - that i would like to use with my image
00:40 - view i have two pictures named
00:42 - shrek1 and shrek2 so what i'm going to
00:44 - do is copy these images from my computer
00:47 - and place them within my application
00:49 - package the same package that contains
00:51 - my main java file my fxml file and my
00:54 - controller
00:55 - if you're working with a lot of images i
00:57 - actually recommend placing your images
00:59 - within
01:00 - a separate folder or a separate package
01:02 - just to keep things organized
01:04 - so let's open up scene builder so right
01:06 - click
01:07 - on your fxml file and go to open with
01:09 - scene builder
01:10 - within scene builder i'm going to use an
01:12 - anchor pane
01:14 - and i'll add a button what i'm planning
01:16 - is that when i click on this button
01:18 - we'll switch from picture 1 to picture
01:20 - 2.
01:21 - now i need an image view node that is
01:23 - located underneath controls
01:25 - so that is right here let me drag and
01:27 - drop it and you can resize it
01:33 - okay let me give this image view a
01:35 - unique id
01:36 - so i will go to code and let's say that
01:39 - this
01:40 - is my image view
01:44 - i'll name this button to my
01:47 - button okay now
01:51 - with our image view we can set a default
01:53 - picture
01:54 - click on your image view then go to
01:57 - properties
01:58 - image and i will set the initial image
02:01 - the default image to shrek 1 and then
02:04 - when i click on this button when the
02:05 - program is running
02:06 - i would like to switch to shrek 2 to be
02:09 - displayed within my image view
02:10 - so click on your picture open
02:14 - let's save this then open up our
02:16 - controller
02:17 - navigate to your fxml file tab because
02:20 - sometimes this doesn't like to update
02:22 - within our controller class we need to
02:24 - inject our fxml document by adding the
02:26 - annotation at
02:27 - fxml let's declare our image view
02:31 - image view my image
02:35 - as well as our button button my
02:39 - button and we'll need to create an
02:42 - image for image to image my
02:45 - image equals new
02:48 - image and within the constructor we have
02:51 - a few things to write in here
02:52 - get class dot
02:56 - get resource as stream
03:00 - and the name of your file your image
03:03 - shrek
03:05 - 2 dot jpg
03:08 - now we need to create a method that we
03:10 - will link to our button to change our
03:12 - image around within our image view
03:14 - so let's say public void
03:18 - display image
03:23 - and we will take my image
03:26 - view dot set image
03:30 - to my image
03:34 - and now we need to link this method with
03:37 - our button
03:37 - using scene builder within scene builder
03:40 - underneath controller
03:41 - add your controller and click on your
03:44 - button
03:45 - go to the code tab the code drop down
03:48 - menu
03:48 - and on action display image and save
03:54 - navigate to your fxml document so that
03:56 - it updates and then we can run this
03:58 - program
04:00 - so we have shrek 1 and when i click on
04:02 - this button we'll switch to shrek 2.
04:05 - we do have some extra time so let me
04:07 - show you all a few useful properties and
04:09 - settings that are available to you with
04:11 - image views
04:12 - so click on your image view and go to
04:14 - properties
04:15 - you can preserve the original ratio
04:19 - you can change the opacity
04:23 - on cursor you can change the cursor that
04:25 - appears when you hover over
04:27 - your image so i set that to hand you can
04:30 - add a special effect
04:31 - like sepia let me reset that
04:36 - or motion blur and there's a few others
04:40 - here as well
04:42 - underneath the layout drop down menu we
04:44 - can change
04:45 - the position of our image view for
04:47 - example i can change
04:49 - layout x to be 0 and then my image view
04:52 - would be
04:53 - left justified layout y would move my
04:56 - image
04:57 - up or down on the y axis if i set layout
05:00 - y
05:00 - to zero then my image will appear at the
05:03 - top
05:04 - and let me reset this to what it was
05:06 - originally
05:07 - we can also rotate our image by moving
05:10 - this thingamabobber around
05:12 - let me restore that you can change the
05:15 - scaling so let's say
05:16 - scale x is two instead of one now our
05:19 - image is super wide and thick
05:23 - scale y will make it taller and leaner
05:26 - and underneath the code drop down menu
05:28 - there's a multitude of different actions
05:31 - that we can take and link to methods
05:33 - within our program based on how we
05:34 - interact with our image view
05:36 - i'm not going to show you all these
05:38 - because there's a lot here but one
05:40 - that is basic would be on mouse entered
05:44 - so if we were to hover our cursor over
05:46 - our image view then we can perform some
05:48 - action
05:49 - let's say we would like to change our
05:51 - image view from image one to image two
05:54 - shrek one to shrek two
05:55 - so i'm going to link my display image
05:57 - method that we created within our
05:59 - controller
06:00 - and let's test it let's head back to our
06:02 - controller and run the program
06:04 - and just as a reminder open your fxml
06:07 - file just so that it updates
06:08 - and let's run this bad boy
06:11 - now if i take my cursor and hover over
06:14 - my image it should change
06:15 - from shrek 1 to shrek 2 which it did
06:19 - well everybody that's a basic overview
06:21 - of
06:22 - the image view node i like to think of
06:24 - the image view node as
06:26 - a picture frame and we load our picture
06:28 - frame with different images
06:30 - different photographs so if you would
06:32 - like a copy of this code
06:34 - i will post all of this to the comment
06:35 - section down below
06:37 - but yeah that's a basic overview of the
06:39 - imageview node in javafx

Cleaned transcript:

hey it's you bro hope you're doing well and in this video i'm going to give you all an overview of the image view node in javafx so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm okay people image view image view is a node used for painting images loaded with images the way that i think of them is that an image is like a photograph and an image view is a picture frame for that photograph it holds an image a photograph for this demonstration i have two images that i would like to use with my image view i have two pictures named shrek1 and shrek2 so what i'm going to do is copy these images from my computer and place them within my application package the same package that contains my main java file my fxml file and my controller if you're working with a lot of images i actually recommend placing your images within a separate folder or a separate package just to keep things organized so let's open up scene builder so right click on your fxml file and go to open with scene builder within scene builder i'm going to use an anchor pane and i'll add a button what i'm planning is that when i click on this button we'll switch from picture 1 to picture 2. now i need an image view node that is located underneath controls so that is right here let me drag and drop it and you can resize it okay let me give this image view a unique id so i will go to code and let's say that this is my image view i'll name this button to my button okay now with our image view we can set a default picture click on your image view then go to properties image and i will set the initial image the default image to shrek 1 and then when i click on this button when the program is running i would like to switch to shrek 2 to be displayed within my image view so click on your picture open let's save this then open up our controller navigate to your fxml file tab because sometimes this doesn't like to update within our controller class we need to inject our fxml document by adding the annotation at fxml let's declare our image view image view my image as well as our button button my button and we'll need to create an image for image to image my image equals new image and within the constructor we have a few things to write in here get class dot get resource as stream and the name of your file your image shrek 2 dot jpg now we need to create a method that we will link to our button to change our image around within our image view so let's say public void display image and we will take my image view dot set image to my image and now we need to link this method with our button using scene builder within scene builder underneath controller add your controller and click on your button go to the code tab the code drop down menu and on action display image and save navigate to your fxml document so that it updates and then we can run this program so we have shrek 1 and when i click on this button we'll switch to shrek 2. we do have some extra time so let me show you all a few useful properties and settings that are available to you with image views so click on your image view and go to properties you can preserve the original ratio you can change the opacity on cursor you can change the cursor that appears when you hover over your image so i set that to hand you can add a special effect like sepia let me reset that or motion blur and there's a few others here as well underneath the layout drop down menu we can change the position of our image view for example i can change layout x to be 0 and then my image view would be left justified layout y would move my image up or down on the y axis if i set layout y to zero then my image will appear at the top and let me reset this to what it was originally we can also rotate our image by moving this thingamabobber around let me restore that you can change the scaling so let's say scale x is two instead of one now our image is super wide and thick scale y will make it taller and leaner and underneath the code drop down menu there's a multitude of different actions that we can take and link to methods within our program based on how we interact with our image view i'm not going to show you all these because there's a lot here but one that is basic would be on mouse entered so if we were to hover our cursor over our image view then we can perform some action let's say we would like to change our image view from image one to image two shrek one to shrek two so i'm going to link my display image method that we created within our controller and let's test it let's head back to our controller and run the program and just as a reminder open your fxml file just so that it updates and let's run this bad boy now if i take my cursor and hover over my image it should change from shrek 1 to shrek 2 which it did well everybody that's a basic overview of the image view node i like to think of the image view node as a picture frame and we load our picture frame with different images different photographs so if you would like a copy of this code i will post all of this to the comment section down below but yeah that's a basic overview of the imageview node in javafx
