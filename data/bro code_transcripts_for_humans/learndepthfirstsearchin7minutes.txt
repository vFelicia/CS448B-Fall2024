With timestamps:

00:00 - all right everybody depth first search
00:02 - depth first search is a search algorithm
00:05 - for traversing a tree or graph data
00:07 - structure we can break this down into
00:09 - three steps when navigating a graph we
00:11 - will pick a route and we will keep on
00:13 - going until we reach a dead end or a
00:15 - previously visited node if we do then we
00:18 - will move on to step three we will
00:20 - backtrack to the last node that has
00:22 - unvisited adjacent neighbors let's
00:24 - navigate this maze using a depth first
00:27 - search approach here's the entrance and
00:29 - here's the exit
00:31 - so the general concept of a death first
00:33 - search is that when we reach more than
00:35 - one adjacent neighbor we're just going
00:36 - to pick a route let's say we prefer
00:38 - right turns over left turns but you can
00:40 - really set any rule that you want when
00:42 - faced with more than one adjacent
00:44 - neighbor i'm just going to pick her out
00:45 - and keep on going
00:47 - and if we reach a dead end then we're
00:49 - just going to backtrack to a node that
00:51 - has some unvisited adjacent neighbors
00:54 - so there's no more place we can go so
00:56 - we're going to backtrack all the way
00:58 - back to this intersection right here
01:00 - this route is unvisited so we will
01:02 - continue going
01:04 - not backtracking yet there's no dead
01:06 - ends but now there is so we backtrack
01:09 - and keep on going
01:11 - so this is what this looks like sped up
01:26 - and we have reached the end
01:28 - let's use a depth first search approach
01:30 - to navigate this graph maybe we're at
01:32 - node a and we need to travel to i but we
01:35 - don't know where i is one way in which
01:37 - we can keep track of our position is to
01:39 - use a stack or in the case of recursion
01:41 - we can use a call stack whenever we
01:43 - visit a node we will push it onto the
01:45 - stack we can either travel to nodes b or
01:47 - d so we will mark d as visited and push
01:51 - this node onto the stack then we can
01:53 - either go to e or g let's go to g
01:56 - we'll push that onto the stack
01:59 - then h
02:00 - e
02:01 - and now we circle the round back to d
02:03 - but d is already marked as visited so
02:05 - we're going to backtrack to a node that
02:07 - has unvisited adjacent neighbors which
02:09 - is a so we will pop all of these nodes
02:12 - off of the stack all the way back to a
02:15 - which has unvisited adjacent neighbors
02:17 - and this time we will go down this route
02:20 - and push all of these nodes onto our
02:21 - stack
02:24 - and we have reached the end using a
02:26 - depth first search approach when
02:28 - simplified you pick a route you keep
02:30 - going when you reach a dead end or a
02:32 - node you already visited you backtrack
02:34 - to a node that has unvisited adjacent
02:36 - neighbors and you repeat steps one
02:38 - through two alright well let's implement
02:40 - this in code now
02:42 - and here we are people so i'm going to
02:45 - be using a graph that utilizes an
02:47 - adjacency matrix if you're using an
02:49 - adjacency list the code's just going to
02:51 - be a little bit different but the
02:53 - concept is really still the same i'm
02:55 - using code from the previous few videos
02:57 - we have a node class a graph class and
03:00 - in the previous videos we've already
03:02 - populated this graph with nodes and
03:04 - edges and then i'm just going to print
03:06 - this this is my adjacency matrix now
03:08 - within the graph class we're going to
03:10 - create a depth first search method and a
03:12 - helper method so this will be public
03:16 - void and we will name this depth
03:18 - first
03:20 - search
03:21 - and there will be one parameter an index
03:23 - of where we would like to begin
03:26 - to keep track of the nodes that we've
03:27 - already visited what some people like to
03:29 - do is that they will create a boolean
03:32 - within their node class such as boolean
03:34 - visited and they'll just mark it as
03:36 - false or true however it's very easy to
03:39 - forget to change these back to false
03:41 - when you exit the depth first search so
03:43 - what i'm going to do instead is create
03:44 - an array of booleans and the size will
03:47 - be equal to the length of the matrix
03:49 - so let's create a boolean array and i
03:52 - will name this visited
03:54 - equals new boolean and the size of our
03:57 - array is the length of our matrix
04:01 - then lastly we will implement a helper
04:04 - function so let's name this dfs
04:08 - helper
04:09 - and we will pass in our source and our
04:11 - boolean array visited then we just need
04:14 - to create this method
04:15 - private void dfs helper and there are
04:18 - two parameters int source and an array
04:21 - of booleans named visited you can either
04:23 - implement a depth first search
04:25 - iteratively using a stack or you can
04:27 - utilize the call stack if you use
04:29 - recursion in this example we're going to
04:31 - use recursion when we invoke this helper
04:33 - function we're going to check to see if
04:35 - the current node that we're on is
04:37 - visited or not and we can use an if
04:39 - statement
04:40 - if our visited array
04:43 - at index of source is equal to true or
04:47 - you could write the shorthand and just
04:49 - say if visited at index of source since
04:52 - this returns a boolean value if we've
04:54 - already visited this node we're going to
04:56 - return else we will mark this node as
04:59 - visited
05:00 - else
05:01 - visited at index of source
05:04 - equals true
05:06 - if you would like although this parts
05:07 - not necessary within my console i'm just
05:10 - going to print that we visited this node
05:12 - so within a print line statement
05:14 - i do have my nodes within an array list
05:16 - i'm just going to access the data of one
05:18 - of these
05:19 - nodes dot get
05:22 - source
05:23 - dot data
05:25 - plus
05:27 - equals visited this part technically
05:29 - isn't necessary but it's going to help
05:31 - with my demonstration in this example
05:33 - maybe we start at node a we need to find
05:36 - any adjacent neighbors if we're using an
05:38 - adjacency matrix we need to iterate over
05:40 - this row we can use a for loop for that
05:45 - so into i equals 0
05:48 - we will continue this as long as i is
05:50 - less than our matrix at index of source
05:55 - dot length this equals the length of a
05:58 - row and then increment i by one we're
06:01 - checking to see if one of these elements
06:02 - is a one that means that's an adjacent
06:05 - neighbor that we can travel to
06:07 - using an if statement
06:09 - if matrix at indices
06:12 - of source
06:14 - and i
06:15 - source is the row that we're working
06:17 - with i is the column if this is equal to
06:20 - 1
06:21 - then we will invoke the dfs helper
06:23 - method again so this is recursive we
06:26 - will pass in i
06:28 - as well as our boolean array named
06:30 - visited if we successfully search
06:32 - through an entire row outside of the for
06:34 - loop let's return and that's it so let's
06:37 - run this within my main class i will
06:39 - call the graphs
06:41 - depth first search method and pass in an
06:44 - index of a starting node so let's begin
06:46 - at zero
06:47 - we visit a first then b c d e let's try
06:52 - b which has an index of one
06:55 - b c d e a
06:57 - c which has an index of two
07:00 - c d e a b okay now pay attention to this
07:04 - this is a directed graph and we're
07:05 - beginning at d
07:07 - there's no place that we can go so we're
07:08 - stuck at d we only visit d
07:11 - and lastly we have e
07:13 - which has an index of four
07:15 - e a b c d
07:17 - alright everybody that is the depth
07:19 - first search algorithm you pick a route
07:22 - you keep going if you reach a dead end
07:24 - or an already visited node you backtrack
07:26 - to a previous node with unvisited
07:28 - adjacent neighbors if you would like a
07:30 - copy of this code i'll post this to the
07:32 - comment section down below don't forget
07:34 - to give this video a thumbs up leave
07:36 - random comment down below and subscribe
07:38 - if you'd like to become a fellow bro

Cleaned transcript:

all right everybody depth first search depth first search is a search algorithm for traversing a tree or graph data structure we can break this down into three steps when navigating a graph we will pick a route and we will keep on going until we reach a dead end or a previously visited node if we do then we will move on to step three we will backtrack to the last node that has unvisited adjacent neighbors let's navigate this maze using a depth first search approach here's the entrance and here's the exit so the general concept of a death first search is that when we reach more than one adjacent neighbor we're just going to pick a route let's say we prefer right turns over left turns but you can really set any rule that you want when faced with more than one adjacent neighbor i'm just going to pick her out and keep on going and if we reach a dead end then we're just going to backtrack to a node that has some unvisited adjacent neighbors so there's no more place we can go so we're going to backtrack all the way back to this intersection right here this route is unvisited so we will continue going not backtracking yet there's no dead ends but now there is so we backtrack and keep on going so this is what this looks like sped up and we have reached the end let's use a depth first search approach to navigate this graph maybe we're at node a and we need to travel to i but we don't know where i is one way in which we can keep track of our position is to use a stack or in the case of recursion we can use a call stack whenever we visit a node we will push it onto the stack we can either travel to nodes b or d so we will mark d as visited and push this node onto the stack then we can either go to e or g let's go to g we'll push that onto the stack then h e and now we circle the round back to d but d is already marked as visited so we're going to backtrack to a node that has unvisited adjacent neighbors which is a so we will pop all of these nodes off of the stack all the way back to a which has unvisited adjacent neighbors and this time we will go down this route and push all of these nodes onto our stack and we have reached the end using a depth first search approach when simplified you pick a route you keep going when you reach a dead end or a node you already visited you backtrack to a node that has unvisited adjacent neighbors and you repeat steps one through two alright well let's implement this in code now and here we are people so i'm going to be using a graph that utilizes an adjacency matrix if you're using an adjacency list the code's just going to be a little bit different but the concept is really still the same i'm using code from the previous few videos we have a node class a graph class and in the previous videos we've already populated this graph with nodes and edges and then i'm just going to print this this is my adjacency matrix now within the graph class we're going to create a depth first search method and a helper method so this will be public void and we will name this depth first search and there will be one parameter an index of where we would like to begin to keep track of the nodes that we've already visited what some people like to do is that they will create a boolean within their node class such as boolean visited and they'll just mark it as false or true however it's very easy to forget to change these back to false when you exit the depth first search so what i'm going to do instead is create an array of booleans and the size will be equal to the length of the matrix so let's create a boolean array and i will name this visited equals new boolean and the size of our array is the length of our matrix then lastly we will implement a helper function so let's name this dfs helper and we will pass in our source and our boolean array visited then we just need to create this method private void dfs helper and there are two parameters int source and an array of booleans named visited you can either implement a depth first search iteratively using a stack or you can utilize the call stack if you use recursion in this example we're going to use recursion when we invoke this helper function we're going to check to see if the current node that we're on is visited or not and we can use an if statement if our visited array at index of source is equal to true or you could write the shorthand and just say if visited at index of source since this returns a boolean value if we've already visited this node we're going to return else we will mark this node as visited else visited at index of source equals true if you would like although this parts not necessary within my console i'm just going to print that we visited this node so within a print line statement i do have my nodes within an array list i'm just going to access the data of one of these nodes dot get source dot data plus equals visited this part technically isn't necessary but it's going to help with my demonstration in this example maybe we start at node a we need to find any adjacent neighbors if we're using an adjacency matrix we need to iterate over this row we can use a for loop for that so into i equals 0 we will continue this as long as i is less than our matrix at index of source dot length this equals the length of a row and then increment i by one we're checking to see if one of these elements is a one that means that's an adjacent neighbor that we can travel to using an if statement if matrix at indices of source and i source is the row that we're working with i is the column if this is equal to 1 then we will invoke the dfs helper method again so this is recursive we will pass in i as well as our boolean array named visited if we successfully search through an entire row outside of the for loop let's return and that's it so let's run this within my main class i will call the graphs depth first search method and pass in an index of a starting node so let's begin at zero we visit a first then b c d e let's try b which has an index of one b c d e a c which has an index of two c d e a b okay now pay attention to this this is a directed graph and we're beginning at d there's no place that we can go so we're stuck at d we only visit d and lastly we have e which has an index of four e a b c d alright everybody that is the depth first search algorithm you pick a route you keep going if you reach a dead end or an already visited node you backtrack to a previous node with unvisited adjacent neighbors if you would like a copy of this code i'll post this to the comment section down below don't forget to give this video a thumbs up leave random comment down below and subscribe if you'd like to become a fellow bro
