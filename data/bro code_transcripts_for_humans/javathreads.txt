With timestamps:

00:00 - how's it going everybody let's bro here
00:02 - hope you're doing well and in this video
00:03 - I'm going to be teaching you guys about
00:05 - threads in Java so let's get into it
00:08 - [Music]
00:09 - if you find this video helpful please
00:12 - remember to Like comment and subscribe
00:15 - your support will help keep this channel
00:17 - running everyone so for this video we're
00:19 - going to be discussing threads this is
00:21 - going to be part 1 of 2 where this video
00:24 - is going to be focusing on explaining
00:26 - what threads are and part 2 will be
00:28 - multi-threading so a thread is defined
00:31 - as a thread of execution in a program I
00:33 - know that kind of sounds redundant it's
00:35 - kind of like a virtual CPU and the JVM
00:39 - the java virtual machine allows an
00:41 - application to have multiple threads
00:43 - running concurrently so each thread can
00:46 - execute parts of your code in parallel
00:48 - with the main thread and each thread has
00:51 - its own priority threads with higher
00:53 - priority are executed in preference
00:55 - compared to threads with a lower
00:57 - priority so with the Java Virtual
01:00 - Machine it will continue to execute
01:02 - threads until either one of the
01:03 - following occurs the exit method of
01:06 - class runtime has been called or all
01:08 - user threads have died then the program
01:11 - stops basically so when the JVM starts
01:14 - up there is a thread which calls the
01:16 - main method this right here and this
01:19 - thread is called main so it's kind of
01:21 - like the thread that starts or begins
01:23 - your program so let's do some practice
01:25 - with the main thread so with threads we
01:28 - can check to see it how many are active
01:30 - with a certain method so we're going to
01:32 - type in the name of the thread class dot
01:35 - and use the active count method and this
01:38 - returns how many threads are currently
01:40 - active however we need to put this
01:42 - within a print line statement so we can
01:44 - actually see it so I'm just going to
01:46 - system that out dot print line and place
01:48 - thread dot active count within here and
01:52 - let's see how many threads are running
01:54 - and it says one thread is currently
01:56 - running and that is our main thread
01:58 - basically and we can also check to see
02:00 - the name of this specific thread so we
02:03 - can use thread dot current thread dot
02:09 - get name so this is going to return the
02:13 - name of the main thread basically and
02:16 - then we'll also need to put this within
02:17 - a print line statement so let's just
02:20 - copy this and paste it within here and
02:23 - I'll probably just turn this into a
02:25 - comment for now all right so the name of
02:28 - the thread that is currently running is
02:30 - named main just like we had in that
02:33 - description just previously we can also
02:35 - change the name of this thread too so we
02:38 - can use the set name method of the
02:41 - thread class so we're going to type in
02:43 - thread and then we want the current
02:48 - thread which is main so thread dot
02:50 - current thread and then what we're gonna
02:54 - type is dot set name and we can name
02:58 - this whatever we want so how about main
03:03 - for no good reason so when we display
03:06 - the name of the current thread it's
03:08 - going to be main with a bunch events
03:12 - it's probably not a practical name I was
03:14 - just being silly
03:15 - so all threads have a priority and we
03:18 - can check to see what a threads priority
03:20 - is so if we want to check the priority
03:23 - of our main thread what we're gonna type
03:25 - is thread dot current thread which is
03:28 - referring to the main thread dot get
03:31 - priority and then of course we need to
03:34 - put this within a print line statement
03:36 - so system dot out dot print line then
03:40 - I'm just going to place this within here
03:43 - and the priority of our main thread is 5
03:48 - so this is on a scale between 1 and 10
03:50 - the higher the number the higher
03:52 - priority for this thread so we can
03:54 - actually change the priority for at
03:56 - thread so let's change the priority for
03:58 - our main thread so I'm just going to
04:00 - type in thread dot current thread which
04:03 - is referring to the main thread and
04:04 - we're going to use the dot set priority
04:08 - method so this is on a scale between 1
04:12 - and 10 10 being the highest the highest
04:14 - priority and 1 being the lowest so if we
04:17 - changed this threads priority to 10 and
04:19 - then we get the priority it's going to
04:21 - display 10 so this main thread now has
04:24 - the highest priority and if we
04:26 - to one it now will have the lowest
04:29 - priority possible then and one other
04:32 - useful method with Reds is that we can
04:34 - check to see if a threat is currently
04:36 - alive so what we can do is use the is
04:39 - alive method so if we want to check to
04:42 - see if our main thread is alive we're
04:44 - gonna type in thread dot current thread
04:46 - dot is alive and then put this within a
04:51 - print line statement so system dot out
04:54 - dot print line and then we are again at
04:57 - saipin thread current thread is alive
05:00 - and it's going to check to see if our
05:03 - main thread is alive and it says it is
05:05 - true all right so one other thing that
05:08 - you can do with threads is that you can
05:09 - have a thread sleep so it's kind of like
05:11 - your program is paused so why don't we
05:14 - make some sort of counter and this will
05:17 - count down by seconds so what I'm going
05:19 - to do is create a for loop and we'll
05:22 - save int I and we'll start at 3 well
05:25 - count down from 3 and then we'll
05:28 - continue this for loop as long as I is
05:30 - greater than 0 and then let's decrement
05:34 - I by 1 each time and then what we're
05:38 - gonna do within this for loop is just
05:40 - display whatever I is and then we're
05:44 - going to type in thread dot sleep and
05:49 - then we can type in how many
05:51 - milliseconds we want this thread to
05:53 - sleep after each iteration of this for
05:55 - loop so let's have this pause for one
05:58 - second so it's kind of like we're
06:00 - counting down now you'll notice that
06:01 - this is underlined read it says
06:03 - unhandled exception type interrupted
06:06 - exception so you can surround this with
06:07 - a try and catch block or add it throws
06:10 - declaration at the top here and that
06:12 - error should go away and then once we
06:14 - exit this loop will just display a
06:16 - message such as you are done okay let's
06:23 - try this so normally when we have a for
06:27 - loop like this it iterates through these
06:29 - almost instantaneously but now if we had
06:32 - thread dot sleep for one second it's
06:34 - kind of like we're counting down by one
06:37 - second at a time then in one second
06:39 - intervals so
06:40 - that's how you can use the thread dot
06:42 - sleep method to have your thread or
06:44 - program sleep for a given amount of time
06:46 - so now what we're gonna do is actually
06:49 - create a second thread along with our
06:51 - main thread and there's one of two ways
06:53 - that we can create another thread I'll
06:54 - show you guys one way in this video and
06:56 - in the next video on multi-threading
06:58 - I'll show you guys another way so one
07:01 - way is that we can create a child class
07:03 - of the thread class so let's go to our
07:05 - project folder go to file new class and
07:09 - let's call this my thread and this my
07:14 - thread class will extends the thread
07:17 - class so my thread is going to inherit
07:19 - everything from the thread class there's
07:21 - actually this method called it run
07:23 - within the thread class and we're going
07:25 - to override that so my thread will do
07:27 - something else so it's going to be a
07:30 - public method that is void and it's
07:32 - called run and since we're overriding
07:36 - this we should probably add a note for
07:38 - good practice that says override because
07:41 - we're overriding this method so when run
07:45 - is executed let's just display that this
07:50 - thread is running okay so this is
07:56 - everything we need to do within our my
07:58 - thread class so let's create an instance
08:01 - of my thread so it's kind of like we're
08:04 - creating an object basically so we're
08:06 - going to type in the name of the class
08:07 - my thread and let's call this thread two
08:12 - equals new my thread and this will
08:19 - create a second thread along with our
08:21 - main thread that is currently running
08:23 - now with the second thread we can use
08:25 - some of these methods that we used for
08:27 - the first thread so let's check to see
08:28 - if this thread is currently alive so
08:31 - what we're going to type is the name of
08:33 - our thread so thread two dot is alive
08:37 - and we're going to put this within a
08:39 - print line statement so system dot out
08:41 - dot print line we're going to check to
08:43 - see if thread two is alive and this
08:47 - returns false and this is the reason why
08:49 - when you start a new thread or create a
08:51 - new thread you need to start it so the
08:54 - it begins basically so we're going to
08:56 - type in thread to dot start and this
09:00 - will start our thread so this will
09:03 - display that this thread is currently
09:06 - alive and also noticed that it executed
09:09 - our run function which just displays
09:11 - this thread is running so it can be
09:14 - tempting to put run here in place of
09:17 - start but if you were to check to see
09:19 - its status here it's going to say that
09:21 - this thread is currently not alive but
09:25 - it does execute our run function so if
09:27 - you want this thread to start you'll
09:28 - want to be sure to use the start
09:30 - function and not just the run function
09:32 - so that's how you can check to see if a
09:35 - thread is currently alive let's go over
09:37 - a few others let's check to see what
09:40 - this threads name is so we're going to
09:43 - type in the name of our thread so thread
09:46 - two dot get name and then put this
09:51 - within a print line statement so
09:52 - assisting that out dot print line thread
09:55 - to get name and the name of this thread
10:00 - is thread - 0 and remember with our main
10:03 - thread that was just named main so we
10:06 - can also change the name of this thread
10:09 - so I'm just going to copy this and
10:11 - before the print line statement we'll
10:15 - just type in thread 2 dot set name and
10:20 - let's change this to maybe second thread
10:24 - or whatever you want so if we were to
10:26 - display the name of our second thread
10:28 - thread 2 it's now named second thread
10:32 - now let's check thread two's parity so
10:35 - we'll type the name of this thread
10:37 - thread 2 dot get priority and then place
10:41 - this within a print line statement again
10:43 - system dot out dot print line thread to
10:46 - get priority and this has a priority of
10:50 - 5 which is the default basically now if
10:54 - you have one thread that creates another
10:57 - thread it's going to inherit the
10:59 - priority of the thread that created it
11:01 - so if we went back to our main thread
11:04 - and we set the priority to let's say
11:07 - the highest priority so this priority of
11:11 - thread too is now going to be 10 since
11:14 - it inherits the priority of the thread
11:16 - that created it which in this case would
11:18 - be main so we can also set the priority
11:21 - like we did here so that is the set
11:24 - priority at method so we're going to
11:26 - type in thread 2 dot set priority and
11:30 - let's set this to 1 so thread 2 now has
11:33 - a priority of 1 then compared to our
11:36 - main thread this by default has a
11:38 - priority of 5 so the main thread has a
11:40 - higher priority than our thread to
11:44 - thread basically so one other thing we
11:47 - can do is that we can check to see how
11:49 - many threads are currently active kind
11:51 - of like what we did with our first
11:52 - example so we're going to use the thread
11:55 - dot active count and I'm going to copy
11:57 - this and paste it and it's going to
12:01 - display how many threads are currently
12:03 - active and it says 1 that's because we
12:06 - need to start thread 2 and now the
12:08 - amount of threads that are currently
12:10 - active is 2 because we needed to start
12:13 - read to know we have one last thing to
12:15 - discuss there's two different kinds of
12:17 - threads they are user threads and daemon
12:20 - threads that sounds kind of cool right
12:22 - so a daemon thread is a low priority
12:24 - thread that runs in the background to
12:27 - perform tasks such as garbage collection
12:30 - and the Java Virtual Machine terminates
12:33 - itself when all user threads which are
12:35 - non daemon threads finish their
12:38 - execution so if we were to create
12:40 - another thread this would normally by
12:42 - default to be a user thread a non daemon
12:45 - --thread but we can actually change it
12:47 - so it is a daemon --thread first let's
12:49 - check to see if it is a demon thread so
12:51 - there's actually a method for this we
12:53 - type the name of the thread so thread 2
12:56 - dot and we'll use the is daemon method
13:00 - and then we need to put this within a
13:02 - print line statement so assisting that
13:04 - out dot print line thread 2 dot is
13:09 - daemon and then we'll display this and
13:12 - run it so it says false so this thread
13:15 - is not a demon thread but we can
13:17 - actually set it so it is so we're going
13:20 - to type in
13:21 - thread to dot set demon true and run
13:28 - this again and it says true so this is a
13:32 - daemon --thread and it runs the program
13:34 - now we can actually change the my thread
13:38 - class and we can check to see if this is
13:41 - a daemon --thread so if this dot is
13:47 - demon will display this is a daemon
13:52 - --thread that is running otherwise else
13:59 - will just display system dot out dot
14:02 - print line this is a user thread that is
14:07 - running alright so if we were to revert
14:12 - this back to false it displays this is a
14:16 - user thread that is running and if we
14:18 - change this to a daemon --thread its
14:22 - going to display this is a daemon
14:25 - --thread that is running so like we said
14:27 - with daemon threads they are low
14:29 - priority threads that run in the
14:31 - background to perform tasks such as
14:33 - garbage collection and the java virtual
14:35 - machine will terminate when all user
14:38 - threads which are non daemon threads
14:40 - finished their execution so it's kind of
14:43 - like the java virtual machine doesn't
14:45 - care if there's daemon threads running
14:47 - the background it'll exit regardless as
14:49 - long as all user threads finish their
14:52 - execution so it's kind of like daemon
14:54 - threads are low priority kind of like
14:56 - what we did with setting the priority
14:58 - for our threads so that's the basics of
15:00 - threads it's kind of like a virtual CPU
15:03 - that has its own like set of
15:05 - instructions and we can have multiple
15:07 - threads running concurrently at the same
15:09 - time and another definition for this is
15:12 - multi-threading and that's something
15:14 - we'll cover in the next lesson so that's
15:16 - the basics of threads if you want a copy
15:18 - of all this code i'll post all of this
15:20 - in the comments down below but yeah
15:22 - that's the basics of threads in Java hey
15:26 - you yeah I'm talking to you if you learn
15:28 - something new then you can help me help
15:31 - you in three easy steps
15:33 - bye
15:34 - smashing that like button drop a comment
15:36 - down below and subscribe if you'd like
15:38 - to become a fellow bro
15:41 - [Music]
15:47 - you
15:49 - [Music]

Cleaned transcript:

how's it going everybody let's bro here hope you're doing well and in this video I'm going to be teaching you guys about threads in Java so let's get into it if you find this video helpful please remember to Like comment and subscribe your support will help keep this channel running everyone so for this video we're going to be discussing threads this is going to be part 1 of 2 where this video is going to be focusing on explaining what threads are and part 2 will be multithreading so a thread is defined as a thread of execution in a program I know that kind of sounds redundant it's kind of like a virtual CPU and the JVM the java virtual machine allows an application to have multiple threads running concurrently so each thread can execute parts of your code in parallel with the main thread and each thread has its own priority threads with higher priority are executed in preference compared to threads with a lower priority so with the Java Virtual Machine it will continue to execute threads until either one of the following occurs the exit method of class runtime has been called or all user threads have died then the program stops basically so when the JVM starts up there is a thread which calls the main method this right here and this thread is called main so it's kind of like the thread that starts or begins your program so let's do some practice with the main thread so with threads we can check to see it how many are active with a certain method so we're going to type in the name of the thread class dot and use the active count method and this returns how many threads are currently active however we need to put this within a print line statement so we can actually see it so I'm just going to system that out dot print line and place thread dot active count within here and let's see how many threads are running and it says one thread is currently running and that is our main thread basically and we can also check to see the name of this specific thread so we can use thread dot current thread dot get name so this is going to return the name of the main thread basically and then we'll also need to put this within a print line statement so let's just copy this and paste it within here and I'll probably just turn this into a comment for now all right so the name of the thread that is currently running is named main just like we had in that description just previously we can also change the name of this thread too so we can use the set name method of the thread class so we're going to type in thread and then we want the current thread which is main so thread dot current thread and then what we're gonna type is dot set name and we can name this whatever we want so how about main for no good reason so when we display the name of the current thread it's going to be main with a bunch events it's probably not a practical name I was just being silly so all threads have a priority and we can check to see what a threads priority is so if we want to check the priority of our main thread what we're gonna type is thread dot current thread which is referring to the main thread dot get priority and then of course we need to put this within a print line statement so system dot out dot print line then I'm just going to place this within here and the priority of our main thread is 5 so this is on a scale between 1 and 10 the higher the number the higher priority for this thread so we can actually change the priority for at thread so let's change the priority for our main thread so I'm just going to type in thread dot current thread which is referring to the main thread and we're going to use the dot set priority method so this is on a scale between 1 and 10 10 being the highest the highest priority and 1 being the lowest so if we changed this threads priority to 10 and then we get the priority it's going to display 10 so this main thread now has the highest priority and if we to one it now will have the lowest priority possible then and one other useful method with Reds is that we can check to see if a threat is currently alive so what we can do is use the is alive method so if we want to check to see if our main thread is alive we're gonna type in thread dot current thread dot is alive and then put this within a print line statement so system dot out dot print line and then we are again at saipin thread current thread is alive and it's going to check to see if our main thread is alive and it says it is true all right so one other thing that you can do with threads is that you can have a thread sleep so it's kind of like your program is paused so why don't we make some sort of counter and this will count down by seconds so what I'm going to do is create a for loop and we'll save int I and we'll start at 3 well count down from 3 and then we'll continue this for loop as long as I is greater than 0 and then let's decrement I by 1 each time and then what we're gonna do within this for loop is just display whatever I is and then we're going to type in thread dot sleep and then we can type in how many milliseconds we want this thread to sleep after each iteration of this for loop so let's have this pause for one second so it's kind of like we're counting down now you'll notice that this is underlined read it says unhandled exception type interrupted exception so you can surround this with a try and catch block or add it throws declaration at the top here and that error should go away and then once we exit this loop will just display a message such as you are done okay let's try this so normally when we have a for loop like this it iterates through these almost instantaneously but now if we had thread dot sleep for one second it's kind of like we're counting down by one second at a time then in one second intervals so that's how you can use the thread dot sleep method to have your thread or program sleep for a given amount of time so now what we're gonna do is actually create a second thread along with our main thread and there's one of two ways that we can create another thread I'll show you guys one way in this video and in the next video on multithreading I'll show you guys another way so one way is that we can create a child class of the thread class so let's go to our project folder go to file new class and let's call this my thread and this my thread class will extends the thread class so my thread is going to inherit everything from the thread class there's actually this method called it run within the thread class and we're going to override that so my thread will do something else so it's going to be a public method that is void and it's called run and since we're overriding this we should probably add a note for good practice that says override because we're overriding this method so when run is executed let's just display that this thread is running okay so this is everything we need to do within our my thread class so let's create an instance of my thread so it's kind of like we're creating an object basically so we're going to type in the name of the class my thread and let's call this thread two equals new my thread and this will create a second thread along with our main thread that is currently running now with the second thread we can use some of these methods that we used for the first thread so let's check to see if this thread is currently alive so what we're going to type is the name of our thread so thread two dot is alive and we're going to put this within a print line statement so system dot out dot print line we're going to check to see if thread two is alive and this returns false and this is the reason why when you start a new thread or create a new thread you need to start it so the it begins basically so we're going to type in thread to dot start and this will start our thread so this will display that this thread is currently alive and also noticed that it executed our run function which just displays this thread is running so it can be tempting to put run here in place of start but if you were to check to see its status here it's going to say that this thread is currently not alive but it does execute our run function so if you want this thread to start you'll want to be sure to use the start function and not just the run function so that's how you can check to see if a thread is currently alive let's go over a few others let's check to see what this threads name is so we're going to type in the name of our thread so thread two dot get name and then put this within a print line statement so assisting that out dot print line thread to get name and the name of this thread is thread 0 and remember with our main thread that was just named main so we can also change the name of this thread so I'm just going to copy this and before the print line statement we'll just type in thread 2 dot set name and let's change this to maybe second thread or whatever you want so if we were to display the name of our second thread thread 2 it's now named second thread now let's check thread two's parity so we'll type the name of this thread thread 2 dot get priority and then place this within a print line statement again system dot out dot print line thread to get priority and this has a priority of 5 which is the default basically now if you have one thread that creates another thread it's going to inherit the priority of the thread that created it so if we went back to our main thread and we set the priority to let's say the highest priority so this priority of thread too is now going to be 10 since it inherits the priority of the thread that created it which in this case would be main so we can also set the priority like we did here so that is the set priority at method so we're going to type in thread 2 dot set priority and let's set this to 1 so thread 2 now has a priority of 1 then compared to our main thread this by default has a priority of 5 so the main thread has a higher priority than our thread to thread basically so one other thing we can do is that we can check to see how many threads are currently active kind of like what we did with our first example so we're going to use the thread dot active count and I'm going to copy this and paste it and it's going to display how many threads are currently active and it says 1 that's because we need to start thread 2 and now the amount of threads that are currently active is 2 because we needed to start read to know we have one last thing to discuss there's two different kinds of threads they are user threads and daemon threads that sounds kind of cool right so a daemon thread is a low priority thread that runs in the background to perform tasks such as garbage collection and the Java Virtual Machine terminates itself when all user threads which are non daemon threads finish their execution so if we were to create another thread this would normally by default to be a user thread a non daemon thread but we can actually change it so it is a daemon thread first let's check to see if it is a demon thread so there's actually a method for this we type the name of the thread so thread 2 dot and we'll use the is daemon method and then we need to put this within a print line statement so assisting that out dot print line thread 2 dot is daemon and then we'll display this and run it so it says false so this thread is not a demon thread but we can actually set it so it is so we're going to type in thread to dot set demon true and run this again and it says true so this is a daemon thread and it runs the program now we can actually change the my thread class and we can check to see if this is a daemon thread so if this dot is demon will display this is a daemon thread that is running otherwise else will just display system dot out dot print line this is a user thread that is running alright so if we were to revert this back to false it displays this is a user thread that is running and if we change this to a daemon thread its going to display this is a daemon thread that is running so like we said with daemon threads they are low priority threads that run in the background to perform tasks such as garbage collection and the java virtual machine will terminate when all user threads which are non daemon threads finished their execution so it's kind of like the java virtual machine doesn't care if there's daemon threads running the background it'll exit regardless as long as all user threads finish their execution so it's kind of like daemon threads are low priority kind of like what we did with setting the priority for our threads so that's the basics of threads it's kind of like a virtual CPU that has its own like set of instructions and we can have multiple threads running concurrently at the same time and another definition for this is multithreading and that's something we'll cover in the next lesson so that's the basics of threads if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of threads in Java hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps bye smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
