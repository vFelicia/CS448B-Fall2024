With timestamps:

00:02 - okay everybody we gotta discuss variable
00:04 - scope i'll explain local variables and
00:07 - global variables local variables are
00:09 - declared inside of a function or block
00:11 - of curly braces such as within the main
00:14 - function or inside of another function
00:16 - global variables are declared outside of
00:18 - all functions you tend to see them at
00:20 - the top of your program there's some
00:22 - major differences between the two let's
00:24 - begin with local variables suppose i
00:26 - have some number int mynum
00:29 - num equals one if i need to display my
00:32 - num i can use standard output
00:34 - my num
00:36 - and of course this will display my num
00:38 - which is one now what if i have a
00:40 - function to display my num
00:42 - void
00:43 - print
00:44 - num
00:46 - let's move this line of code to our
00:48 - print num function
00:52 - i'll need to add a function declaration
00:53 - to the top of my program
00:57 - then we will invoke this function print
01:00 - num
01:01 - okay this isn't gonna work and here's
01:03 - why
01:05 - my num was not declared in this scope
01:07 - functions can't see inside of other
01:09 - functions my function print num has no
01:12 - idea what this mynum variable is
01:15 - mynum is a local variable to the main
01:17 - function that's why we pass arguments to
01:19 - functions
01:21 - we'll make the function aware of this
01:23 - value but you'll need a matching set of
01:24 - parameters int
01:27 - my num
01:29 - then add that to the function
01:30 - declaration int my num
01:33 - and this would work that displays the
01:35 - number one but let's get rid of these
01:36 - parameters
01:39 - it is legal to reuse the same variable
01:42 - name as long as it's within a different
01:43 - scope within the print num function i'll
01:46 - also have a mynum variable that has the
01:48 - same name but i'll give this a different
01:50 - value
01:53 - when printing my num it prints two we
01:56 - have two versions of the same variable
01:58 - and this is fine because they're within
02:00 - different scopes
02:01 - now a global variable is declared
02:03 - outside of all functions you see these
02:05 - at the top of your program i will
02:07 - declare int
02:09 - my num
02:11 - equals three
02:12 - i'm going to delete these two local
02:14 - variables
02:16 - if i was to invoke the print num
02:17 - function and print my num
02:20 - well then that number is three
02:23 - this global variable is also available
02:25 - within the main function
02:26 - so i will print my num here as well
02:28 - within the main function
02:31 - so we have three and three it's best to
02:34 - avoid global variables if you can
02:36 - because it pollutes the global namespace
02:39 - also variables declared within a
02:40 - function are much more secure because
02:43 - like i said functions can't see inside
02:44 - of other functions if we had both local
02:47 - and global variables
02:51 - mynum within the main function will be 1
02:54 - within the print num function it will be
02:55 - 2.
02:56 - if i was to display my num for both of
02:58 - these i'm going to add a new line to
03:00 - each of these
03:04 - new line
03:06 - and new line
03:10 - a function will use any local variables
03:12 - first before resorting to any global
03:14 - variables that's why our print number
03:16 - function prints too and the main
03:18 - function prints one if you'd rather use
03:20 - the global version you can use the scope
03:23 - resolution operator so precede your
03:26 - variable name with two colons that is
03:29 - the scope resolution operator
03:31 - i'll do that here as well
03:33 - in place of using the local version of
03:35 - mynum we will use the global version
03:40 - and we will print three we're using the
03:42 - global version of mynum instead of the
03:44 - local version so yeah that's variable
03:47 - scope local variables are declared
03:49 - inside of a function or anytime you see
03:51 - a set of curly braces a variable
03:53 - declared inside a set of curly braces is
03:56 - hidden to the outside world a global
03:58 - variable is declared outside of all
04:00 - functions and is accessible to all
04:03 - functions within the program like i said
04:05 - you should try and avoid using global
04:06 - variables if you can because it pollutes
04:08 - the global namespace and these variables
04:10 - are less secure so yeah that's variable
04:13 - scope hey if you're enjoying this series
04:15 - let me know by smashing that like button
04:17 - leave a random comment down below and
04:19 - subscribe if you'd like to become a
04:20 - fellow bro

Cleaned transcript:

okay everybody we gotta discuss variable scope i'll explain local variables and global variables local variables are declared inside of a function or block of curly braces such as within the main function or inside of another function global variables are declared outside of all functions you tend to see them at the top of your program there's some major differences between the two let's begin with local variables suppose i have some number int mynum num equals one if i need to display my num i can use standard output my num and of course this will display my num which is one now what if i have a function to display my num void print num let's move this line of code to our print num function i'll need to add a function declaration to the top of my program then we will invoke this function print num okay this isn't gonna work and here's why my num was not declared in this scope functions can't see inside of other functions my function print num has no idea what this mynum variable is mynum is a local variable to the main function that's why we pass arguments to functions we'll make the function aware of this value but you'll need a matching set of parameters int my num then add that to the function declaration int my num and this would work that displays the number one but let's get rid of these parameters it is legal to reuse the same variable name as long as it's within a different scope within the print num function i'll also have a mynum variable that has the same name but i'll give this a different value when printing my num it prints two we have two versions of the same variable and this is fine because they're within different scopes now a global variable is declared outside of all functions you see these at the top of your program i will declare int my num equals three i'm going to delete these two local variables if i was to invoke the print num function and print my num well then that number is three this global variable is also available within the main function so i will print my num here as well within the main function so we have three and three it's best to avoid global variables if you can because it pollutes the global namespace also variables declared within a function are much more secure because like i said functions can't see inside of other functions if we had both local and global variables mynum within the main function will be 1 within the print num function it will be 2. if i was to display my num for both of these i'm going to add a new line to each of these new line and new line a function will use any local variables first before resorting to any global variables that's why our print number function prints too and the main function prints one if you'd rather use the global version you can use the scope resolution operator so precede your variable name with two colons that is the scope resolution operator i'll do that here as well in place of using the local version of mynum we will use the global version and we will print three we're using the global version of mynum instead of the local version so yeah that's variable scope local variables are declared inside of a function or anytime you see a set of curly braces a variable declared inside a set of curly braces is hidden to the outside world a global variable is declared outside of all functions and is accessible to all functions within the program like i said you should try and avoid using global variables if you can because it pollutes the global namespace and these variables are less secure so yeah that's variable scope hey if you're enjoying this series let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
