With timestamps:

00:00 - hey everybody so in today's video I got
00:02 - to explain class lists in JavaScript
00:04 - class list is an element property it's
00:07 - used to interact with an elements list
00:09 - of classes meaning CSS classes by
00:12 - accessing the class list property of an
00:13 - element we can make reusable classes for
00:16 - many elements across your web page if I
00:19 - have a CSS class I can dynamically add
00:22 - remove toggle replace or check to see if
00:25 - an element contains a certain class so
00:28 - what we'll do in this example in our h
00:29 - HTML document is create a button the
00:32 - button will have text of my button the
00:35 - ID of this button will be my button
00:39 - we'll apply a little bit of CSS
00:42 - initially let's select the ID of my
00:45 - button we'll be applying just a few
00:47 - properties let's increase the font
00:50 - size to for
00:53 - RM oh not 43 for go back go back go back
00:58 - I'll add a little bit of margin of 10
01:00 - pixels remove the border with border
01:03 - none border radius to smooth the corners
01:07 - 5
01:09 - pixels and add a little bit of
01:12 - padding 10 pixels by 15 pixels that's
01:16 - good enough for now we're going to
01:18 - create a CSS class of
01:21 - enabled we won't apply it right away
01:23 - though we'll apply this class to this
01:25 - button using JavaScript if an element is
01:28 - enabled let's change the background
01:30 - color to be something
01:33 - blue I'm going to use hsl values
01:38 - though and I will set the font color to
01:41 - be
01:42 - white so this button doesn't have this
01:46 - class yet we'll add that in dynamically
01:48 - using JavaScript we'll create a
01:50 - reference to this button const my button
01:54 - will be the name then we need to select
01:56 - it document. getet element by
02:00 - ID the ID that I'm selecting is my
02:04 - button to add a class to an element take
02:07 - that element my button access the class
02:11 - list property follow this with the add
02:13 - method we will add the name of the class
02:17 - enabled and now my button is enabled we
02:20 - have appended the CSS properties
02:23 - dynamically so if I were to inspect this
02:25 - element I'll right click
02:28 - inspect
02:30 - we have added that class of enabled to
02:33 - the element so my button has an ID and a
02:36 - class of enabled to remove a class again
02:39 - take that element of my button access
02:42 - the class list we will use the remove
02:45 - method we will remove the class of
02:48 - enabled and it's gone let's right click
02:51 - on the element
02:53 - inspect so our class list is empty we
02:57 - have added and then removed that class
02:58 - of enabled we're going to create a new
03:01 - class now of hover when we hover over an
03:04 - element apply these CSS properties it's
03:07 - kind of like we're using the hover sudo
03:10 - class but we're using it a little bit
03:12 - different we can add or remove this
03:13 - class dynamically at will if we apply
03:16 - this class let's set a box Shadow to
03:19 - give the element a 3D pop effect for a
03:22 - horizontal and vertical offset let's set
03:24 - those to be zero each let's add 10
03:26 - pixels for the blur effect and I will
03:28 - set the color to be I don't know let's
03:31 - set it to be black but set the alpha
03:34 - down to like
03:37 - 20% and then when I hover I would also
03:39 - like to set the font weight of that
03:41 - element to be
03:45 - bold let's add the hover
03:49 - class so the appearance of this button
03:51 - changed I would like to apply this class
03:53 - of hover only when I hover my cursor
03:55 - over the element We'll add a mouse over
03:58 - event listener we will take my
04:01 - button add event
04:05 - listener we have an event type and a
04:08 - call back to a function the event type
04:11 - will be Mouse over when we Mouse over
04:14 - this
04:15 - element we are provided with an element
04:18 - object event Arrow do this we will
04:22 - access our event objects Target meaning
04:24 - the button take our class
04:27 - list and add
04:30 - the class of
04:32 - hover and let's see if this works if I
04:35 - hover my cursor over the button we apply
04:37 - the hover class now when I leave the
04:39 - button I would like to remove it really
04:42 - we can just copy the code for the event
04:43 - listener paste it replace Mouse over
04:46 - with mouse out then we will remove that
04:51 - class so now we can apply that class and
04:54 - then remove it with mouse over and mouse
04:57 - out there's also toggle
05:00 - if we toggle a class we'll remove it if
05:03 - that class is present add that class if
05:05 - it's not so let's replace add with
05:09 - toggle do this for both Mouse over and
05:12 - mouse out and that should work the same
05:14 - when we hover our cursor over the button
05:16 - we will toggle the class of hover if we
05:18 - have a mouse out event we will toggle it
05:21 - again to remove
05:25 - it now we're going to use the replace
05:27 - method to replace one class with another
05:30 - we'll create a new class of
05:33 - disabled we'll be replacing the enabled
05:36 - class with the disabled class when we
05:38 - click on the button so with the
05:40 - background color of the disabled class
05:43 - let's set the background color to be
05:45 - gray again I like using hsl for the
05:48 - colors I'll set the lightness to be like
05:51 - 60% I'm trying to get a faded
05:53 - appearance and for the
05:56 - color let's pick a light shade of gray
05:59 - using hsl
06:02 - values I'll set the lightness to be
06:06 - 80% going back to our Javascript file
06:09 - let's add the class of
06:11 - enabled my button access the class list
06:15 - use the add method we will add the class
06:17 - of
06:19 - enabled then we'll add an event listener
06:21 - to the button we will take my button add
06:24 - an event
06:26 - listener we have an event and a call
06:30 - back the event is going to be click I
06:33 - would like to do something when we click
06:34 - on the button we will receive an event
06:37 - Arrow do this take our events
06:41 - Target access the class list we will use
06:45 - the replace method replace the old class
06:48 - with the new class replace the enabled
06:51 - class with the disabled class there's
06:54 - two arguments the old class and the new
06:57 - class replace the old class with the new
07:00 - class then when we click on this button
07:02 - we'll replace the enabled class with the
07:05 - disabled
07:06 - class then we have the contains method
07:09 - if an element contains a class this will
07:11 - return true and if it doesn't it returns
07:13 - false So within our event listener let's
07:17 - add an if
07:18 - statement and an else
07:22 - statement we'll check to see if our
07:25 - events Target access the class list
07:30 - we will use the contains
07:32 - method if we click on the button and the
07:35 - class contains disabled what do we want
07:37 - to
07:39 - do does the class list contain disabled
07:42 - let's change the text content take our
07:45 - events Target access the text content
07:49 - all appended
07:53 - Emoji what's a good one that
07:57 - one else replace enable AED with
08:02 - disabled let's click on the button we'll
08:05 - replace the enabled class with the
08:06 - disabled class our button is now
08:08 - disabled if I were to inspect this
08:11 - element the class is now
08:13 - disabled if I were to click on this
08:15 - button again well our class contains
08:18 - disabled that was true so we end up
08:21 - doing this code where we appended the
08:23 - text content of the button now the nice
08:25 - thing about using class lists HTML
08:28 - elements have a class list property we
08:30 - can reuse CSS classes amongst many HTML
08:33 - elements we'll create an H1 element
08:38 - now the text of this element will be
08:41 - hello I will give this element a unique
08:44 - ID of my H1 I'll increase the font size
08:48 - so we can see
08:50 - it select the ID of my H1 I'll increase
08:54 - the font size let's try 5
08:58 - RM
09:01 - let's create a reference to
09:03 - myh1 const myh1 equals document. getet
09:08 - element by
09:10 - ID the ID that I'm selecting is my
09:13 - H1 We'll add the enabled class to myh1
09:17 - myh1 do
09:19 - classlist do add not ass
09:24 - add
09:27 - enabled and there we go
09:29 - we have added these CSS properties to
09:32 - this
09:33 - element and because I'm lazy I'm going
09:35 - to copy all this code where we add an
09:37 - event listener to my
09:39 - H1 so let's replace my button with my
09:44 - H1 now when we click on this H1 element
09:48 - we can disable it we'll replace the
09:50 - enabled class with the disabled class
09:52 - and if you don't believe me let's take a
09:54 - look the class of my H1 is now disabled
09:59 - if I were to click on this element again
10:01 - well the class list contains disabled so
10:04 - we execute this if statement where we
10:06 - change the text content of that
10:08 - Target now here's a challenge round
10:10 - we're going to create four buttons and
10:13 - store all of those buttons within a node
10:15 - list so let's create a button with the
10:18 - text of the first button being button
10:20 - one I will give this button a class of
10:24 - my
10:25 - buttons let's copy this button paste it
10:28 - three times
10:31 - button one button two button three
10:33 - button
10:35 - four let's remove the CSS for my H1
10:38 - select the class of my
10:42 - buttons keep these three classes of
10:44 - enabled hover and
10:48 - disabled okay let's eliminate all this
10:51 - code we'll create a node list to contain
10:54 - all these buttons we can use const if we
10:56 - don't plan on adding or removing buttons
10:59 - or let if we do let buttons equals
11:04 - document. query selector
11:08 - all select all elements that have a
11:10 - class of my buttons we'll apply our
11:13 - enabled class to all the buttons so we
11:17 - will take our node list of buttons use
11:20 - the for each method for each button
11:23 - within our node list do
11:27 - this take each button
11:29 - access each button's class list property
11:32 - I will add a
11:34 - class of
11:36 - enabled and we have applied that class
11:38 - to all the buttons If you need to remove
11:41 - a class you can do the same but replace
11:43 - add with
11:47 - remove now when we hover our cursor over
11:50 - one of these buttons we will toggle the
11:52 - hover class we need to iterate through
11:55 - our node list of buttons take buttons
11:58 - use the build built in for each
12:00 - method for each button within our node
12:03 - list do
12:05 - this take each button add an event
12:10 - listener the event listener has an event
12:12 - type and a call back to a
12:14 - function the event type will be Mouse
12:17 - over when we hover a cursor over
12:20 - it we will be provided with an event
12:24 - argument Arrow do this access the event
12:27 - object access access the target meaning
12:30 - the button that we hover over access the
12:32 - class list property we will
12:36 - toggle the hover class so when we hover
12:40 - our cursor over one of these elements we
12:42 - will apply the hover
12:46 - class now when our cursor leaves one of
12:48 - these elements we would like to toggle
12:50 - that class again let's copy everything
12:53 - we have here paste it replace Mouse over
12:56 - with mouse out when we leave one of
13:00 - these elements toggle the hover class
13:02 - again to remove that
13:06 - class now when we click on one of the
13:08 - buttons we're going to replace the
13:10 - enabled class with the disabled
13:14 - class take our node list of buttons use
13:18 - the for each
13:20 - method with each button Arrow do this
13:24 - take each button add an event
13:27 - listener
13:30 - we need to select the event type and a
13:33 - call back to a function the event type
13:35 - is going to be
13:37 - click the parameter is event Arrow do
13:41 - this when we click on one of these
13:44 - buttons we'll replace the enabled class
13:46 - with the disabled class take our event
13:49 - object access its Target access the
13:52 - class list
13:53 - property we will
13:56 - replace replace the old class with the
13:58 - new class replace the enabled
14:02 - class with the disabled
14:06 - class and let's see if this works when I
14:09 - click on a button we'll replace the
14:11 - enabled class with the disabled
14:15 - class the last thing we'll do is that
14:18 - when we click on a button that's
14:19 - disabled we'll change the text content
14:22 - we'll have to use the contains method So
14:24 - within our event listener I'll add an if
14:27 - statement if
14:29 - access our event access its Target
14:32 - access the class list property use the
14:35 - contains
14:37 - method does the class list contain the
14:40 - class of disabled if it does we'll
14:43 - access our event access the target of
14:45 - that event change the text content of
14:49 - that element all append an
14:52 - emoji that one I like that emoji if the
14:55 - class list of that element isn't
14:57 - disabled it doesn't contain M the class
14:59 - of disabled we'll execute an El
15:01 - statement where we disable it by
15:04 - replacing the enabled class with the
15:06 - disabled class we have three event
15:08 - listeners Mouse over Mouse out and click
15:12 - we're utilizing all three of these
15:14 - custom classes enabled hover and
15:17 - disabled we can hover over these
15:19 - elements then we'll have Mouse over and
15:21 - mouse out events then when I click on
15:23 - one of these buttons we can apply that
15:25 - disabled class within our click event
15:28 - listener we have an if statement if we
15:31 - click on an element that's already
15:32 - disabled append the text
15:37 - content all right everybody so that is
15:40 - the class list property it's used to
15:42 - interact with an element's list of
15:43 - classes their CSS classes they allow you
15:47 - to make reusable classes for many
15:49 - elements across your web page and well
15:51 - everybody that is the class list
15:53 - property in
15:57 - JavaScript

Cleaned transcript:

hey everybody so in today's video I got to explain class lists in JavaScript class list is an element property it's used to interact with an elements list of classes meaning CSS classes by accessing the class list property of an element we can make reusable classes for many elements across your web page if I have a CSS class I can dynamically add remove toggle replace or check to see if an element contains a certain class so what we'll do in this example in our h HTML document is create a button the button will have text of my button the ID of this button will be my button we'll apply a little bit of CSS initially let's select the ID of my button we'll be applying just a few properties let's increase the font size to for RM oh not 43 for go back go back go back I'll add a little bit of margin of 10 pixels remove the border with border none border radius to smooth the corners 5 pixels and add a little bit of padding 10 pixels by 15 pixels that's good enough for now we're going to create a CSS class of enabled we won't apply it right away though we'll apply this class to this button using JavaScript if an element is enabled let's change the background color to be something blue I'm going to use hsl values though and I will set the font color to be white so this button doesn't have this class yet we'll add that in dynamically using JavaScript we'll create a reference to this button const my button will be the name then we need to select it document. getet element by ID the ID that I'm selecting is my button to add a class to an element take that element my button access the class list property follow this with the add method we will add the name of the class enabled and now my button is enabled we have appended the CSS properties dynamically so if I were to inspect this element I'll right click inspect we have added that class of enabled to the element so my button has an ID and a class of enabled to remove a class again take that element of my button access the class list we will use the remove method we will remove the class of enabled and it's gone let's right click on the element inspect so our class list is empty we have added and then removed that class of enabled we're going to create a new class now of hover when we hover over an element apply these CSS properties it's kind of like we're using the hover sudo class but we're using it a little bit different we can add or remove this class dynamically at will if we apply this class let's set a box Shadow to give the element a 3D pop effect for a horizontal and vertical offset let's set those to be zero each let's add 10 pixels for the blur effect and I will set the color to be I don't know let's set it to be black but set the alpha down to like 20% and then when I hover I would also like to set the font weight of that element to be bold let's add the hover class so the appearance of this button changed I would like to apply this class of hover only when I hover my cursor over the element We'll add a mouse over event listener we will take my button add event listener we have an event type and a call back to a function the event type will be Mouse over when we Mouse over this element we are provided with an element object event Arrow do this we will access our event objects Target meaning the button take our class list and add the class of hover and let's see if this works if I hover my cursor over the button we apply the hover class now when I leave the button I would like to remove it really we can just copy the code for the event listener paste it replace Mouse over with mouse out then we will remove that class so now we can apply that class and then remove it with mouse over and mouse out there's also toggle if we toggle a class we'll remove it if that class is present add that class if it's not so let's replace add with toggle do this for both Mouse over and mouse out and that should work the same when we hover our cursor over the button we will toggle the class of hover if we have a mouse out event we will toggle it again to remove it now we're going to use the replace method to replace one class with another we'll create a new class of disabled we'll be replacing the enabled class with the disabled class when we click on the button so with the background color of the disabled class let's set the background color to be gray again I like using hsl for the colors I'll set the lightness to be like 60% I'm trying to get a faded appearance and for the color let's pick a light shade of gray using hsl values I'll set the lightness to be 80% going back to our Javascript file let's add the class of enabled my button access the class list use the add method we will add the class of enabled then we'll add an event listener to the button we will take my button add an event listener we have an event and a call back the event is going to be click I would like to do something when we click on the button we will receive an event Arrow do this take our events Target access the class list we will use the replace method replace the old class with the new class replace the enabled class with the disabled class there's two arguments the old class and the new class replace the old class with the new class then when we click on this button we'll replace the enabled class with the disabled class then we have the contains method if an element contains a class this will return true and if it doesn't it returns false So within our event listener let's add an if statement and an else statement we'll check to see if our events Target access the class list we will use the contains method if we click on the button and the class contains disabled what do we want to do does the class list contain disabled let's change the text content take our events Target access the text content all appended Emoji what's a good one that one else replace enable AED with disabled let's click on the button we'll replace the enabled class with the disabled class our button is now disabled if I were to inspect this element the class is now disabled if I were to click on this button again well our class contains disabled that was true so we end up doing this code where we appended the text content of the button now the nice thing about using class lists HTML elements have a class list property we can reuse CSS classes amongst many HTML elements we'll create an H1 element now the text of this element will be hello I will give this element a unique ID of my H1 I'll increase the font size so we can see it select the ID of my H1 I'll increase the font size let's try 5 RM let's create a reference to myh1 const myh1 equals document. getet element by ID the ID that I'm selecting is my H1 We'll add the enabled class to myh1 myh1 do classlist do add not ass add enabled and there we go we have added these CSS properties to this element and because I'm lazy I'm going to copy all this code where we add an event listener to my H1 so let's replace my button with my H1 now when we click on this H1 element we can disable it we'll replace the enabled class with the disabled class and if you don't believe me let's take a look the class of my H1 is now disabled if I were to click on this element again well the class list contains disabled so we execute this if statement where we change the text content of that Target now here's a challenge round we're going to create four buttons and store all of those buttons within a node list so let's create a button with the text of the first button being button one I will give this button a class of my buttons let's copy this button paste it three times button one button two button three button four let's remove the CSS for my H1 select the class of my buttons keep these three classes of enabled hover and disabled okay let's eliminate all this code we'll create a node list to contain all these buttons we can use const if we don't plan on adding or removing buttons or let if we do let buttons equals document. query selector all select all elements that have a class of my buttons we'll apply our enabled class to all the buttons so we will take our node list of buttons use the for each method for each button within our node list do this take each button access each button's class list property I will add a class of enabled and we have applied that class to all the buttons If you need to remove a class you can do the same but replace add with remove now when we hover our cursor over one of these buttons we will toggle the hover class we need to iterate through our node list of buttons take buttons use the build built in for each method for each button within our node list do this take each button add an event listener the event listener has an event type and a call back to a function the event type will be Mouse over when we hover a cursor over it we will be provided with an event argument Arrow do this access the event object access access the target meaning the button that we hover over access the class list property we will toggle the hover class so when we hover our cursor over one of these elements we will apply the hover class now when our cursor leaves one of these elements we would like to toggle that class again let's copy everything we have here paste it replace Mouse over with mouse out when we leave one of these elements toggle the hover class again to remove that class now when we click on one of the buttons we're going to replace the enabled class with the disabled class take our node list of buttons use the for each method with each button Arrow do this take each button add an event listener we need to select the event type and a call back to a function the event type is going to be click the parameter is event Arrow do this when we click on one of these buttons we'll replace the enabled class with the disabled class take our event object access its Target access the class list property we will replace replace the old class with the new class replace the enabled class with the disabled class and let's see if this works when I click on a button we'll replace the enabled class with the disabled class the last thing we'll do is that when we click on a button that's disabled we'll change the text content we'll have to use the contains method So within our event listener I'll add an if statement if access our event access its Target access the class list property use the contains method does the class list contain the class of disabled if it does we'll access our event access the target of that event change the text content of that element all append an emoji that one I like that emoji if the class list of that element isn't disabled it doesn't contain M the class of disabled we'll execute an El statement where we disable it by replacing the enabled class with the disabled class we have three event listeners Mouse over Mouse out and click we're utilizing all three of these custom classes enabled hover and disabled we can hover over these elements then we'll have Mouse over and mouse out events then when I click on one of these buttons we can apply that disabled class within our click event listener we have an if statement if we click on an element that's already disabled append the text content all right everybody so that is the class list property it's used to interact with an element's list of classes their CSS classes they allow you to make reusable classes for many elements across your web page and well everybody that is the class list property in JavaScript
