With timestamps:

00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well and in this
00:03 - video we're going to create a game of
00:05 - snake using javascript so sit back relax
00:08 - and enjoy the show
00:10 - hey what is up everybody in this video
00:13 - we're going to create a game of snake
00:15 - let's head to our html file i'll create
00:18 - a div as a container
00:20 - div id equals game
00:24 - container
00:26 - let's close it
00:28 - we'll be using a canvas to draw our
00:29 - components
00:32 - canvas the id will be
00:35 - game
00:36 - board
00:37 - i'm going to go ahead and set the width
00:39 - and the height attributes right away
00:42 - 500 for the width
00:44 - the height will be 500 as well
00:48 - then close the canvas
00:50 - i'll add a score
00:52 - div
00:54 - id equals score
00:57 - let's close the div section the initial
00:59 - score will be set to zero
01:01 - then we'll need a reset button
01:04 - button
01:05 - close it
01:06 - id equals
01:09 - reset button the text is reset
01:13 - okay let's work on our css styling
01:15 - that's everything for our html file
01:18 - let's select our game board
01:20 - game
01:21 - board
01:22 - this is an id i'll add a border
01:25 - border
01:26 - 3 pixel solid is good
01:29 - let's enter everything within our game
01:31 - container
01:35 - game container
01:37 - text
01:38 - align center
01:41 - i'll change the font of the score you
01:43 - can barely see it
01:46 - score
01:48 - font
01:49 - family
01:50 - pick whatever font you like
01:53 - one font that i like is permanent marker
01:56 - permanent
01:58 - marker
01:59 - then a backup of cursive
02:02 - let's change the font size font size 100
02:05 - pixels
02:06 - then let's work on our button next
02:10 - reset button
02:13 - i'll pick the same font family
02:16 - the font size will be 22 pixels
02:21 - a width of 100 pixels
02:25 - a height of 50 pixels
02:30 - border
02:31 - 4 pixels solid
02:35 - border radius to round the corners
02:39 - 15 pixels
02:42 - then
02:42 - cursor
02:44 - pointer when we hover our cursor over
02:46 - this button okay that is our css style
02:48 - sheet and our index.html file let's head
02:51 - to our javascript file
02:54 - we have a lot of variables to declare
02:56 - let's begin with the constants
02:58 - const
02:59 - gameboard
03:01 - equals document dot query
03:05 - selector
03:06 - we are selecting an id
03:09 - that id is game board
03:12 - that's our canvas
03:14 - with a canvas to paint on the canvas we
03:16 - have to get the context
03:19 - const ctx for context
03:23 - equals gameboard
03:25 - dot get
03:28 - context
03:30 - then pass in 2d
03:32 - we'll store our score text as a variable
03:36 - const
03:37 - score
03:38 - text
03:40 - equals document dot
03:43 - query
03:44 - selector
03:46 - we're selecting an id the id is
03:49 - score
03:50 - let's change this id to score text we're
03:53 - already going to have a score variable
03:55 - hey this is future bro so i forgot to
03:58 - change that within my css style sheet
04:00 - make sure you make that change here as
04:01 - well
04:02 - let's select our reset button
04:04 - const
04:06 - reset button
04:08 - equals document dot
04:10 - query selector
04:13 - we are selecting our reset button
04:17 - i'm going to create a variable to hold
04:19 - the width of our game board
04:22 - const
04:23 - game with
04:25 - equals
04:26 - game board dot width
04:29 - then game height
04:31 - const game height
04:34 - equals game board dot
04:36 - height
04:38 - width and height are the attributes that
04:39 - we assigned within our canvas initially
04:42 - when we run this javascript file if we
04:44 - would have declared those within the css
04:46 - file they wouldn't have been available
04:48 - to us right away that's why i assigned
04:50 - these attributes within the element
04:51 - itself inline we're going to assign some
04:54 - colors the first is for the board
04:56 - background
04:58 - const
04:59 - board
05:01 - background
05:02 - equals pick a color i'll just pick white
05:05 - pick a color for your snake
05:08 - const
05:09 - snake color
05:11 - i'll pick light green
05:14 - but feel free to pick a different color
05:16 - i'll add a black border around the snake
05:19 - snake
05:20 - border equals black then we'll need some
05:23 - color for the food
05:25 - const
05:26 - food color
05:28 - equals
05:30 - red it's an apple okay then a unit size
05:33 - what's the size of everything within our
05:35 - game
05:36 - const
05:37 - unit size
05:38 - equals i'll pick 25 pixels now we'll
05:41 - create a couple more variables
05:43 - let
05:44 - running equal false
05:46 - we'll examine running to see if our game
05:48 - is currently running or not
05:50 - let
05:51 - x velocity
05:53 - x velocity will be how far we move on
05:56 - the x-axis every single game tick i will
06:00 - set this to be the unit size we'll be
06:02 - moving 25 pixels on the x-axis every
06:05 - game tick if x velocity is a positive
06:08 - number we'll move to the right if it's
06:10 - negative we'll move to the left then we
06:12 - have y velocity
06:14 - let y
06:16 - velocity equal zero that means we're not
06:19 - moving up or down if we would like to
06:21 - move down we would set this to unit size
06:24 - if we would like to move up we would set
06:26 - that to negative unit size to move up up
06:28 - or down one space one unit but to begin
06:30 - we'll just be moving to the right we'll
06:32 - need the coordinates of our food
06:34 - let
06:35 - food
06:36 - x coordinate
06:37 - let
06:38 - food
06:40 - y
06:41 - we'll calculate these randomly later
06:44 - within a function
06:46 - let
06:47 - score equal zero
06:49 - then we need our snake our snake is
06:51 - going to be an array of objects an array
06:54 - of parts
06:56 - let
06:58 - snake
06:59 - equal
07:01 - straight brackets it's an array
07:03 - and we will create objects an object for
07:05 - each body part each body part will have
07:08 - an x and a y coordinate
07:10 - let's begin with the tail
07:12 - the tail will begin in the top left
07:14 - corner so i will set those coordinates
07:17 - 0 0 is the top left corner
07:19 - initially let's create 5 body parts to
07:22 - the snake but after it eats its food
07:24 - it's going to increase by 1.
07:27 - let's add a second body part this is a
07:29 - separate object separated with a comma
07:32 - but i don't want this in the same space
07:35 - i'll place this next body part to the
07:37 - right of the first one so let's say x is
07:41 - unit size
07:42 - times one or just unit size i suppose
07:46 - okay let's add another body part
07:49 - unit size times two
07:52 - so we'll have three squares
07:54 - okay two more body parts unit size times
07:58 - three
07:59 - unit size times four and that's our
08:02 - snake
08:03 - it's an array of objects body parts each
08:06 - object is a body part of the snake they
08:09 - each have their own x and y coordinates
08:12 - let's add an event listener to our
08:14 - window to listen for key events
08:17 - window dot add
08:19 - event
08:20 - listener
08:22 - the event is key down
08:25 - we'll pass in a callback to a change
08:28 - direction function
08:30 - then we'll add an event listener to our
08:31 - reset button to restart the game
08:34 - reset
08:36 - button
08:37 - dot add
08:38 - event listener
08:41 - when we click
08:44 - we will invoke the reset game function
08:47 - which we still need to declare
08:49 - then we will invoke game start
08:52 - let's declare the functions that we'll
08:53 - need
08:54 - let's begin with the first
08:56 - function
08:57 - game start
09:02 - function
09:03 - next tick
09:08 - function
09:09 - clear
09:10 - board
09:11 - clear board is going to be in charge of
09:13 - repainting the board
09:15 - function
09:17 - create food
09:20 - the create food function will find a
09:21 - random place within our game board to
09:23 - place a food item
09:26 - function
09:27 - draw food
09:30 - we'll need to paint the food within our
09:32 - game board
09:33 - function
09:35 - snake
09:39 - function
09:41 - draw snake
09:45 - function
09:47 - change direction
09:51 - function
09:53 - check
09:54 - game over
09:59 - function
10:00 - display game
10:02 - over
10:04 - then lastly
10:06 - function
10:07 - reset game
10:10 - those are the functions
10:13 - let's begin with the create food
10:15 - function
10:16 - we'll create an inner function
10:19 - function
10:20 - random
10:21 - food
10:23 - there will be two parameters min
10:26 - then max
10:27 - within this function we'll return a
10:29 - random number return rand number
10:34 - so to calculate this number we'll store
10:36 - this within const
10:38 - rand
10:39 - num
10:40 - set the sequel to math
10:42 - dot round
10:45 - math
10:46 - dot random
10:49 - we will multiply this by
10:52 - max
10:53 - minus min
10:56 - plus the minimum if there is one i think
10:58 - i'm going to expand this
11:00 - all right just to demonstrate this i'm
11:02 - going to invoke the random food function
11:04 - and store this within food x
11:08 - food x equals random food
11:11 - we'll pass the minimum 0 then the max
11:15 - game
11:16 - with
11:17 - minus our unit size
11:21 - temporarily i'm just going to display
11:22 - whatever food x is i have to explain
11:25 - something
11:26 - then we will invoke this create food
11:28 - function temporarily
11:30 - i gotta explain something
11:32 - currently when we're generating a random
11:34 - number that random number is between
11:36 - zero then our game width minus our unit
11:39 - size every time i run this i have a
11:41 - random number between that range however
11:43 - i would like to divide the width and the
11:45 - height of my game in two spaces
11:48 - i will take this part of this expression
11:51 - divided by
11:53 - unit
11:54 - size now we'll receive a random space
11:57 - between 0 and 24
12:00 - because 500 divided by 25 our unit size
12:04 - is 25 available spaces
12:08 - to accurately place the food in the top
12:11 - left corner of one of these spaces
12:13 - i will multiply all of this by unit size
12:18 - so every time i refresh this you can see
12:20 - that all of these numbers are divisible
12:22 - by 25.
12:25 - that's what we're looking for let's
12:27 - create food y
12:30 - food y
12:31 - equals the same thing
12:33 - okay that is our crate food function
12:36 - let's move on to the draw food function
12:38 - this is fairly easy we'll take our
12:40 - context
12:42 - set the fill
12:44 - style
12:45 - equal to our food
12:47 - color
12:49 - take our context
12:51 - fill
12:52 - rect to fill a rectangle
12:54 - we need a pair of coordinates
12:56 - food x
12:58 - food y
13:00 - we need a width and a height
13:02 - they are both going to be unit size
13:07 - now if i were to invoke the draw food
13:09 - function
13:11 - after the create food function this will
13:13 - draw a random food item every time we
13:15 - refresh the page
13:17 - that's what we're looking for that
13:19 - completes the create food function and
13:21 - the draw food function i'm going to
13:23 - eliminate these two function calls
13:26 - we're going to fill in the gamestart
13:27 - function
13:29 - we will set running equal to true our
13:32 - game is currently running we'll update
13:35 - the score
13:36 - text
13:38 - text
13:39 - content
13:40 - to equal
13:42 - whatever our score is initially it's
13:44 - going to be zero
13:45 - we'll invoke the create food function
13:49 - then the draw food function
13:52 - then lastly next tick
13:55 - next tick is what we want to do every
13:57 - round
13:58 - every time we update the clock okay
14:00 - every time i refresh this an apple
14:02 - should appear randomly within your game
14:03 - board let's close the game start
14:06 - function we'll work on the next tick
14:07 - function
14:08 - we'll check to see if our game is
14:10 - currently running
14:12 - if running
14:16 - let's invoke the set timeout method
14:19 - set timeout we'll use an arrow function
14:22 - expression
14:24 - there's a lot we have to do we'll list
14:27 - an order of steps first we'll clear the
14:29 - board clear board function
14:33 - followed by
14:34 - draw
14:35 - food
14:37 - move snake
14:40 - draw
14:42 - snake check game over
14:46 - then invoke next tick again
14:51 - so after the right curly brace
14:54 - how often do we want a game tick to
14:56 - occur
14:57 - maybe 75 milliseconds that's a good
14:59 - speed if you would like a slower speed
15:01 - you can increase the number or decrease
15:04 - the number for a faster speed i'll just
15:06 - pick 75.
15:08 - then we'll add an else statement
15:10 - else display
15:13 - game over
15:15 - if our game currently isn't running that
15:18 - means the game's over
15:19 - so that is the next tick function
15:22 - let's work on clear board
15:25 - this is fairly simple
15:26 - we'll take our context
15:29 - set the fill
15:30 - style we'll take our fill style set the
15:33 - sequel to board
15:35 - background
15:36 - this is a color that we picked
15:39 - take our context
15:41 - fill
15:43 - wrecked will begin in the top left
15:45 - corner zero zero
15:49 - will end in the bottom right corner
15:51 - we will take our game width
15:54 - for the width game height for the height
15:57 - that's it for this function
15:59 - let's work on draw snake
16:02 - we'll need to change the fill style
16:04 - context
16:06 - dot fill
16:08 - style
16:10 - equals
16:11 - snake
16:12 - color
16:13 - for my snake i picked green
16:16 - if you have a border we can set the
16:17 - stroke style context dot
16:20 - stroke style
16:23 - equals snake
16:26 - border
16:27 - we'll take our snake it's an array of
16:29 - objects
16:30 - so there is a for
16:32 - each method
16:35 - i'll use an arrow function expression
16:37 - the argument is snake part
16:41 - for every snake part
16:44 - then within curly braces
16:47 - i will take our
16:48 - context fill
16:51 - rectangle
16:54 - snake
16:55 - part
16:56 - each snake part has an x coordinate and
16:58 - a y coordinate so we'll begin painting
17:01 - wherever that snake part currently is on
17:03 - the x-axis
17:05 - and the y-axis
17:08 - what's the width and the height of the
17:09 - snake part
17:11 - well our unit size 25 pixels
17:14 - and the height is 25 as well unit size
17:18 - hey if you have a border we can fill
17:19 - that in
17:23 - let's copy this paste it
17:27 - stroke
17:29 - wrecked
17:30 - looks like i misspelt something clear
17:32 - board phil
17:33 - wrecked
17:34 - not rexed okay and that will draw our
17:37 - snake
17:38 - so now how do we move our snake
17:40 - let's go to the move snake function
17:43 - to move the snake we're going to create
17:44 - a new head of the snake in the direction
17:46 - that we're moving then eliminate the
17:48 - tail
17:50 - const head
17:52 - equals
17:54 - then within curly braces
17:56 - the x-coordinate will be
17:58 - our snake's current head so that has an
18:00 - index of zero take the x-coordinate of
18:03 - that
18:04 - plus
18:05 - our x velocity
18:08 - how far are we moving on the x-axis
18:10 - this will be a positive number if we're
18:12 - going right a negative number if we're
18:14 - going left okay then do the same thing
18:16 - with y
18:17 - y equals snake
18:19 - at index of zero
18:21 - dot y
18:23 - plus the y
18:25 - velocity
18:26 - then to add this new head to our snake
18:29 - we can use the unshift method
18:31 - snake dot on
18:34 - shift
18:35 - head
18:37 - okay so our snake is just expanding now
18:39 - we need to eliminate the tail
18:41 - after each move i'll use an if else
18:43 - statement
18:46 - if
18:49 - else
18:51 - else will be snake dot pop
18:54 - that will eliminate the tail every time
18:56 - that we move
18:57 - uh but i gotta fill in something for now
18:59 - i'm just going to set this to be false
19:02 - just temporarily
19:03 - okay our snake should move now
19:05 - within this if statement we'll check to
19:07 - see if the food was eaten if food
19:11 - is eaten so that's a comment if the head
19:15 - of our snake snake
19:17 - at index zero
19:19 - take the x coordinate we will use the
19:22 - comparison operator is the x-coordinate
19:25 - of our snake
19:26 - equal to the x-coordinate of our food
19:29 - food x
19:31 - and
19:33 - let's copy this portion
19:35 - the y-coordinate of the head of the
19:36 - snake is equal to
19:38 - food y
19:40 - if the head of the snake and the food
19:41 - are overlapping
19:43 - well then the snake has eaten the apple
19:46 - let's increment the player score by one
19:48 - score plus equals one
19:51 - change the score text
19:53 - score
19:54 - text
19:55 - dot text
19:57 - content
19:58 - equals the new score
20:01 - then create a new food object
20:03 - create
20:04 - food we have no way to test this until
20:07 - we can control our snake let's close out
20:09 - of this function
20:11 - then go to the change direction function
20:14 - the change direction function should
20:16 - have one parameter event we invoke this
20:19 - function every time we press a key our
20:21 - window is currently looking for the key
20:23 - down event we'll store this within const
20:26 - key
20:27 - pressed
20:28 - set the sequel to event
20:30 - dot
20:31 - key code
20:33 - so i'm going to display whatever
20:35 - keypressed is currently with console.log
20:38 - i'm going to click on my window and
20:40 - press
20:41 - up down left right
20:44 - each of those four arrow keys has a key
20:46 - number that's what we're looking for
20:49 - in fact i'm going to store those
20:52 - let's say const
20:54 - left
20:55 - equals 37
20:58 - const
20:59 - right equals 39.
21:02 - const
21:04 - up
21:05 - equals 38
21:08 - const down
21:10 - equals 40.
21:11 - actually i'm gonna rearrange these so
21:14 - that they're all in numeric order much
21:16 - better this is how to determine which
21:18 - way our snake is headed
21:20 - i'll store these within some constants
21:23 - const
21:24 - going up
21:26 - equals
21:27 - we'll write a condition
21:29 - is the y velocity of our snake
21:33 - equal to
21:34 - negative
21:36 - unit size
21:38 - so our unit size is currently 25 if the
21:40 - y velocity of the snake is negative 25
21:43 - that means we're moving up so let's do
21:45 - the same with the other directions
21:48 - going up
21:50 - going
21:51 - down
21:53 - going
21:54 - right going
21:56 - left going down is going to be y
21:59 - velocity is equal to
22:02 - unit size positive then x velocity is
22:05 - equal to
22:07 - positive unit size
22:09 - going left is x velocity is equal to
22:12 - negative unit size
22:15 - so these will be boolean variables
22:17 - i'm going to write a switch
22:19 - switch
22:21 - will examine true against many matching
22:24 - cases
22:26 - the first case will be
22:29 - key
22:31 - pressed
22:32 - is equal to
22:34 - left
22:35 - and
22:37 - we are not
22:39 - going right
22:41 - we don't want to be able to move like to
22:43 - the left then immediately to the right
22:45 - because according to the rules of snake
22:47 - if any body parts touch then we lose the
22:49 - game we don't want to accidentally go
22:51 - back into any body parts so if we're
22:53 - going left we can continue to go left
22:55 - otherwise up or down but not right
22:58 - because then we lose the game if we
23:00 - would like to go left then let's set the
23:03 - x
23:04 - velocity equal to negative unit size
23:09 - take our y velocity
23:12 - set that equal to zero we're no longer
23:14 - going up or down
23:15 - then break
23:17 - let's add another case key pressed
23:20 - equals up and we are not
23:22 - going down
23:25 - x velocity equals zero y velocity equals
23:29 - negative unit size
23:32 - we need another case
23:33 - key pressed equals right and we are not
23:37 - going left
23:39 - x velocity equals unit size y velocity
23:43 - equals zero
23:45 - okay last one
23:47 - key pressed equals down
23:50 - and we are not going up
23:54 - x velocity equals zero y velocity equals
23:57 - unit size
24:01 - okay we should be able to control our
24:02 - snake now yeah there we go we can go up
24:05 - left down right
24:07 - so let's eat the apple and we should
24:09 - expand and our score increases now let's
24:12 - work on getting a game over because we
24:14 - can go off the screen currently which we
24:16 - should not be able to do okay let's
24:18 - close out of this function
24:21 - check game over
24:22 - if we pass one of these borders then we
24:25 - have a game over i'll write a switch to
24:27 - check that
24:28 - switch
24:29 - will examine true
24:31 - against many matching cases
24:33 - the first case will be
24:36 - is the head of our snake
24:38 - snake at index 0
24:40 - take the x coordinate is that less than
24:43 - 0
24:44 - that means we went over the left border
24:46 - if this case evaluates to be true well
24:49 - we have a matching case so let's take
24:52 - running set the sequel to false
24:55 - then break
24:57 - so if i go over the left border the game
24:58 - stops running okay let's add another
25:01 - case
25:02 - if the x coordinate of the head of our
25:04 - snake
25:05 - is greater than or equal to the game
25:08 - width
25:10 - now if we go over the right border
25:12 - the game ends
25:15 - take the y coordinate of the head of our
25:17 - snake
25:18 - check to see if it's
25:20 - less
25:21 - than zero that means we go over the top
25:24 - game's over then the last one is
25:28 - case y is greater than or equal to
25:32 - game
25:34 - height we shouldn't be able to go over
25:36 - the bottom border yeah awesome there is
25:38 - another game over condition two if any
25:41 - body parts of the snake overlap to check
25:43 - that i'm going to use a for loop to
25:45 - iterate over the body parts
25:49 - four
25:49 - then our index is going to be i
25:52 - we don't want to begin at the head
25:55 - let i equal one that's why i'm not using
25:58 - the for each method our condition to
26:00 - continue is i is less than snake dot
26:04 - length property
26:06 - increment i by one
26:08 - we'll write an if statement
26:11 - if
26:12 - our snake
26:14 - at index of i that's going to be one of
26:16 - the body parts besides the head because
26:18 - we're starting at one
26:20 - if the x-coordinate of that body part
26:22 - is equal to snake
26:25 - at index of zero
26:27 - take that x coordinate
26:29 - and let's copy this
26:32 - paste it
26:34 - change x to y
26:37 - if the head of our snake is equal to one
26:40 - of the body parts that means the game's
26:42 - over
26:43 - running equals false okay let's test
26:46 - that
26:47 - yeah the game just ended now we'll want
26:49 - to display game over let's close out of
26:51 - the check game over function then head
26:54 - to display game over i'll take the
26:56 - context
26:58 - access the font set the sequel to a font
27:00 - of your choosing i'll pick 50 pixels
27:04 - mv
27:05 - bully
27:06 - context dot fill
27:09 - style
27:10 - pick a color i'll just pick black
27:13 - i'll center the text context
27:16 - text align
27:19 - equals center
27:21 - to draw some text on a canvas we'll type
27:23 - context dot fill
27:26 - text
27:28 - add a string of text
27:30 - game over
27:32 - then your placement i'll put this right
27:34 - in the middle game
27:36 - width divided by two
27:39 - comma
27:40 - game
27:41 - height divided by two
27:44 - then set running
27:46 - equal to false
27:48 - okay so when we hit a border
27:50 - it's game over
27:52 - then when the head of our snake runs
27:53 - into a body part it's also game over
27:56 - the last thing we need to do is set up
27:58 - the reset game function
28:00 - we'll take our score set that back to
28:02 - zero
28:04 - take the x velocity
28:06 - set that equal to unit size
28:10 - take our y velocity
28:13 - set that equal to zero
28:15 - we'll recreate our snake
28:18 - copy that
28:20 - paste it but we're not going to use the
28:23 - let keyword
28:24 - then invoke the game start function
28:29 - so after we get game over we should be
28:31 - able to reset our game
28:33 - yeah sweet well okay then everybody that
28:35 - is a game of snake using javascript if
28:38 - you would like a copy of all this code
28:40 - i'll post this in the comments section
28:41 - down below be sure to check the original
28:44 - playlist and well yeah that's how to
28:46 - create a game of snake using javascript

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video we're going to create a game of snake using javascript so sit back relax and enjoy the show hey what is up everybody in this video we're going to create a game of snake let's head to our html file i'll create a div as a container div id equals game container let's close it we'll be using a canvas to draw our components canvas the id will be game board i'm going to go ahead and set the width and the height attributes right away 500 for the width the height will be 500 as well then close the canvas i'll add a score div id equals score let's close the div section the initial score will be set to zero then we'll need a reset button button close it id equals reset button the text is reset okay let's work on our css styling that's everything for our html file let's select our game board game board this is an id i'll add a border border 3 pixel solid is good let's enter everything within our game container game container text align center i'll change the font of the score you can barely see it score font family pick whatever font you like one font that i like is permanent marker permanent marker then a backup of cursive let's change the font size font size 100 pixels then let's work on our button next reset button i'll pick the same font family the font size will be 22 pixels a width of 100 pixels a height of 50 pixels border 4 pixels solid border radius to round the corners 15 pixels then cursor pointer when we hover our cursor over this button okay that is our css style sheet and our index.html file let's head to our javascript file we have a lot of variables to declare let's begin with the constants const gameboard equals document dot query selector we are selecting an id that id is game board that's our canvas with a canvas to paint on the canvas we have to get the context const ctx for context equals gameboard dot get context then pass in 2d we'll store our score text as a variable const score text equals document dot query selector we're selecting an id the id is score let's change this id to score text we're already going to have a score variable hey this is future bro so i forgot to change that within my css style sheet make sure you make that change here as well let's select our reset button const reset button equals document dot query selector we are selecting our reset button i'm going to create a variable to hold the width of our game board const game with equals game board dot width then game height const game height equals game board dot height width and height are the attributes that we assigned within our canvas initially when we run this javascript file if we would have declared those within the css file they wouldn't have been available to us right away that's why i assigned these attributes within the element itself inline we're going to assign some colors the first is for the board background const board background equals pick a color i'll just pick white pick a color for your snake const snake color i'll pick light green but feel free to pick a different color i'll add a black border around the snake snake border equals black then we'll need some color for the food const food color equals red it's an apple okay then a unit size what's the size of everything within our game const unit size equals i'll pick 25 pixels now we'll create a couple more variables let running equal false we'll examine running to see if our game is currently running or not let x velocity x velocity will be how far we move on the xaxis every single game tick i will set this to be the unit size we'll be moving 25 pixels on the xaxis every game tick if x velocity is a positive number we'll move to the right if it's negative we'll move to the left then we have y velocity let y velocity equal zero that means we're not moving up or down if we would like to move down we would set this to unit size if we would like to move up we would set that to negative unit size to move up up or down one space one unit but to begin we'll just be moving to the right we'll need the coordinates of our food let food x coordinate let food y we'll calculate these randomly later within a function let score equal zero then we need our snake our snake is going to be an array of objects an array of parts let snake equal straight brackets it's an array and we will create objects an object for each body part each body part will have an x and a y coordinate let's begin with the tail the tail will begin in the top left corner so i will set those coordinates 0 0 is the top left corner initially let's create 5 body parts to the snake but after it eats its food it's going to increase by 1. let's add a second body part this is a separate object separated with a comma but i don't want this in the same space i'll place this next body part to the right of the first one so let's say x is unit size times one or just unit size i suppose okay let's add another body part unit size times two so we'll have three squares okay two more body parts unit size times three unit size times four and that's our snake it's an array of objects body parts each object is a body part of the snake they each have their own x and y coordinates let's add an event listener to our window to listen for key events window dot add event listener the event is key down we'll pass in a callback to a change direction function then we'll add an event listener to our reset button to restart the game reset button dot add event listener when we click we will invoke the reset game function which we still need to declare then we will invoke game start let's declare the functions that we'll need let's begin with the first function game start function next tick function clear board clear board is going to be in charge of repainting the board function create food the create food function will find a random place within our game board to place a food item function draw food we'll need to paint the food within our game board function snake function draw snake function change direction function check game over function display game over then lastly function reset game those are the functions let's begin with the create food function we'll create an inner function function random food there will be two parameters min then max within this function we'll return a random number return rand number so to calculate this number we'll store this within const rand num set the sequel to math dot round math dot random we will multiply this by max minus min plus the minimum if there is one i think i'm going to expand this all right just to demonstrate this i'm going to invoke the random food function and store this within food x food x equals random food we'll pass the minimum 0 then the max game with minus our unit size temporarily i'm just going to display whatever food x is i have to explain something then we will invoke this create food function temporarily i gotta explain something currently when we're generating a random number that random number is between zero then our game width minus our unit size every time i run this i have a random number between that range however i would like to divide the width and the height of my game in two spaces i will take this part of this expression divided by unit size now we'll receive a random space between 0 and 24 because 500 divided by 25 our unit size is 25 available spaces to accurately place the food in the top left corner of one of these spaces i will multiply all of this by unit size so every time i refresh this you can see that all of these numbers are divisible by 25. that's what we're looking for let's create food y food y equals the same thing okay that is our crate food function let's move on to the draw food function this is fairly easy we'll take our context set the fill style equal to our food color take our context fill rect to fill a rectangle we need a pair of coordinates food x food y we need a width and a height they are both going to be unit size now if i were to invoke the draw food function after the create food function this will draw a random food item every time we refresh the page that's what we're looking for that completes the create food function and the draw food function i'm going to eliminate these two function calls we're going to fill in the gamestart function we will set running equal to true our game is currently running we'll update the score text text content to equal whatever our score is initially it's going to be zero we'll invoke the create food function then the draw food function then lastly next tick next tick is what we want to do every round every time we update the clock okay every time i refresh this an apple should appear randomly within your game board let's close the game start function we'll work on the next tick function we'll check to see if our game is currently running if running let's invoke the set timeout method set timeout we'll use an arrow function expression there's a lot we have to do we'll list an order of steps first we'll clear the board clear board function followed by draw food move snake draw snake check game over then invoke next tick again so after the right curly brace how often do we want a game tick to occur maybe 75 milliseconds that's a good speed if you would like a slower speed you can increase the number or decrease the number for a faster speed i'll just pick 75. then we'll add an else statement else display game over if our game currently isn't running that means the game's over so that is the next tick function let's work on clear board this is fairly simple we'll take our context set the fill style we'll take our fill style set the sequel to board background this is a color that we picked take our context fill wrecked will begin in the top left corner zero zero will end in the bottom right corner we will take our game width for the width game height for the height that's it for this function let's work on draw snake we'll need to change the fill style context dot fill style equals snake color for my snake i picked green if you have a border we can set the stroke style context dot stroke style equals snake border we'll take our snake it's an array of objects so there is a for each method i'll use an arrow function expression the argument is snake part for every snake part then within curly braces i will take our context fill rectangle snake part each snake part has an x coordinate and a y coordinate so we'll begin painting wherever that snake part currently is on the xaxis and the yaxis what's the width and the height of the snake part well our unit size 25 pixels and the height is 25 as well unit size hey if you have a border we can fill that in let's copy this paste it stroke wrecked looks like i misspelt something clear board phil wrecked not rexed okay and that will draw our snake so now how do we move our snake let's go to the move snake function to move the snake we're going to create a new head of the snake in the direction that we're moving then eliminate the tail const head equals then within curly braces the xcoordinate will be our snake's current head so that has an index of zero take the xcoordinate of that plus our x velocity how far are we moving on the xaxis this will be a positive number if we're going right a negative number if we're going left okay then do the same thing with y y equals snake at index of zero dot y plus the y velocity then to add this new head to our snake we can use the unshift method snake dot on shift head okay so our snake is just expanding now we need to eliminate the tail after each move i'll use an if else statement if else else will be snake dot pop that will eliminate the tail every time that we move uh but i gotta fill in something for now i'm just going to set this to be false just temporarily okay our snake should move now within this if statement we'll check to see if the food was eaten if food is eaten so that's a comment if the head of our snake snake at index zero take the x coordinate we will use the comparison operator is the xcoordinate of our snake equal to the xcoordinate of our food food x and let's copy this portion the ycoordinate of the head of the snake is equal to food y if the head of the snake and the food are overlapping well then the snake has eaten the apple let's increment the player score by one score plus equals one change the score text score text dot text content equals the new score then create a new food object create food we have no way to test this until we can control our snake let's close out of this function then go to the change direction function the change direction function should have one parameter event we invoke this function every time we press a key our window is currently looking for the key down event we'll store this within const key pressed set the sequel to event dot key code so i'm going to display whatever keypressed is currently with console.log i'm going to click on my window and press up down left right each of those four arrow keys has a key number that's what we're looking for in fact i'm going to store those let's say const left equals 37 const right equals 39. const up equals 38 const down equals 40. actually i'm gonna rearrange these so that they're all in numeric order much better this is how to determine which way our snake is headed i'll store these within some constants const going up equals we'll write a condition is the y velocity of our snake equal to negative unit size so our unit size is currently 25 if the y velocity of the snake is negative 25 that means we're moving up so let's do the same with the other directions going up going down going right going left going down is going to be y velocity is equal to unit size positive then x velocity is equal to positive unit size going left is x velocity is equal to negative unit size so these will be boolean variables i'm going to write a switch switch will examine true against many matching cases the first case will be key pressed is equal to left and we are not going right we don't want to be able to move like to the left then immediately to the right because according to the rules of snake if any body parts touch then we lose the game we don't want to accidentally go back into any body parts so if we're going left we can continue to go left otherwise up or down but not right because then we lose the game if we would like to go left then let's set the x velocity equal to negative unit size take our y velocity set that equal to zero we're no longer going up or down then break let's add another case key pressed equals up and we are not going down x velocity equals zero y velocity equals negative unit size we need another case key pressed equals right and we are not going left x velocity equals unit size y velocity equals zero okay last one key pressed equals down and we are not going up x velocity equals zero y velocity equals unit size okay we should be able to control our snake now yeah there we go we can go up left down right so let's eat the apple and we should expand and our score increases now let's work on getting a game over because we can go off the screen currently which we should not be able to do okay let's close out of this function check game over if we pass one of these borders then we have a game over i'll write a switch to check that switch will examine true against many matching cases the first case will be is the head of our snake snake at index 0 take the x coordinate is that less than 0 that means we went over the left border if this case evaluates to be true well we have a matching case so let's take running set the sequel to false then break so if i go over the left border the game stops running okay let's add another case if the x coordinate of the head of our snake is greater than or equal to the game width now if we go over the right border the game ends take the y coordinate of the head of our snake check to see if it's less than zero that means we go over the top game's over then the last one is case y is greater than or equal to game height we shouldn't be able to go over the bottom border yeah awesome there is another game over condition two if any body parts of the snake overlap to check that i'm going to use a for loop to iterate over the body parts four then our index is going to be i we don't want to begin at the head let i equal one that's why i'm not using the for each method our condition to continue is i is less than snake dot length property increment i by one we'll write an if statement if our snake at index of i that's going to be one of the body parts besides the head because we're starting at one if the xcoordinate of that body part is equal to snake at index of zero take that x coordinate and let's copy this paste it change x to y if the head of our snake is equal to one of the body parts that means the game's over running equals false okay let's test that yeah the game just ended now we'll want to display game over let's close out of the check game over function then head to display game over i'll take the context access the font set the sequel to a font of your choosing i'll pick 50 pixels mv bully context dot fill style pick a color i'll just pick black i'll center the text context text align equals center to draw some text on a canvas we'll type context dot fill text add a string of text game over then your placement i'll put this right in the middle game width divided by two comma game height divided by two then set running equal to false okay so when we hit a border it's game over then when the head of our snake runs into a body part it's also game over the last thing we need to do is set up the reset game function we'll take our score set that back to zero take the x velocity set that equal to unit size take our y velocity set that equal to zero we'll recreate our snake copy that paste it but we're not going to use the let keyword then invoke the game start function so after we get game over we should be able to reset our game yeah sweet well okay then everybody that is a game of snake using javascript if you would like a copy of all this code i'll post this in the comments section down below be sure to check the original playlist and well yeah that's how to create a game of snake using javascript
