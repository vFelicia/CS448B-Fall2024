With timestamps:

00:00 - all right everybody in today's video
00:01 - we're going to build a digital clock
00:03 - widget using Python's pt5 Library if
00:07 - you're new to this channel I have
00:09 - previously released a course on pt5 in
00:12 - that series we've downloaded the pi qt5
00:15 - package it's found within the library
00:17 - folder of our virtual environment within
00:19 - our project folder if you don't have
00:22 - this package you will need to download
00:24 - it you can open up a
00:25 - terminal then type the following command
00:28 - pip install
00:30 - Pi qt5
00:32 - enter so I already have it installed be
00:35 - sure that this package of Pi qt5 is
00:38 - within your site packages folder so
00:40 - let's begin at the top of our python
00:43 - file we will need the following Imports
00:45 - import CIS CIS means system this module
00:49 - provides variables used and maintained
00:51 - by the python interpreter we would also
00:53 - need widgets widgets are the building
00:55 - blocks of a guy
00:57 - application from the package of Pi
01:01 - qt5 we need to access the module of QT
01:06 - widgets import the
01:08 - following Q
01:11 - application Q widget this is a generic
01:15 - widget we'll turn our digital clock into
01:18 - its own widget and Q label to work with
01:22 - labels we will be using a layout manager
01:25 - more specifically QV box layout
01:30 - layout there's another import we'll need
01:32 - too from the package of Pi
01:35 - q25 access the module of QT core the QT
01:40 - core module it provides functionality
01:42 - not related to guy components this is
01:45 - where we'll get a timer to keep track of
01:47 - the time from this module we will import
01:50 - Q
01:51 - timer Q time and QT QT is for alignment
01:57 - we will create a class of digital clock
02:02 - instead of inheriting from the main
02:03 - window widget we will inherit from The
02:05 - Base Class of Q widget Q widget is a
02:09 - base class to create our own widgets our
02:11 - digital clock will be a widget we will
02:14 - need a Constructor so let's define that
02:17 - Define init pass and self if there are
02:22 - any arguments to send to the parent we
02:24 - will call the Constructor of the parent
02:26 - the super class
02:28 - super call the init
02:31 - method at the end of The Constructor
02:33 - what I like to do is call a method of
02:35 - initialize UI init UI this will be a
02:40 - separate method Define init UI there are
02:45 - no parameters besides self and for now
02:47 - I'll write pass it's within this method
02:50 - that we will be designing the layout of
02:52 - the digital clock within the Constructor
02:54 - that's where we will be constructing all
02:56 - of the different entities for the clock
02:59 - at the end of my python file I will add
03:01 - the following statement if Dunder name
03:04 - is equal to a string of Dunder
03:08 - main this statement will be true if we
03:11 - are running this program
03:13 - directly to create an application we
03:15 - will create an F object equals call The
03:19 - Constructor within the class Q
03:21 - application as an argument to the
03:23 - Constructor we will pass in the
03:25 - following argument access the module of
03:28 - CIS AR RG V which means arguments this
03:32 - would apply if we're running from
03:33 - command prompt or terminal but we won't
03:35 - be doing that in this video but it's
03:37 - nice just to set it up in case we do in
03:39 - the
03:40 - future now we are going to create a
03:42 - clock object clock equals we will call
03:46 - the Constructor of our digital clock
03:49 - class there are no arguments now the
03:51 - window doesn't appear That's because we
03:54 - have to use the show method of our clock
03:57 - take our clock call the show method
04:00 - now it's only going to appear for a
04:01 - brief
04:02 - second just momentarily I don't know if
04:05 - you saw
04:06 - that to ensure a clean and proper exit
04:09 - of our application we need to call the
04:11 - following method access our module of
04:14 - CIS call the exit method then pass in
04:17 - the following we will take our app
04:20 - object then call the following method e
04:24 - exe C underscore and then a set of
04:27 - parentheses it's a method it's the
04:30 - execute method it starts the main event
04:32 - Loop of the application it also handles
04:35 - events such as key presses Mouse clicks
04:37 - or other user interactions so then we
04:40 - should have a window that stays in place
04:43 - until we
04:44 - exit okay now we have the base
04:46 - functionality all set up we have a class
04:49 - of digital clock that inherits from the
04:51 - Q widget based class we're not going to
04:54 - be using main window in this video
04:56 - within the Constructor of my digital
04:58 - clock I will create a a label
05:01 - self. time label this will be a label
05:05 - that displays the time we will call the
05:07 - Constructor within the class Q label
05:10 - then be sure to pass in we will be
05:12 - adding this label directly to our widget
05:15 - of clock we will need a timer self.
05:19 - timer equals call The Constructor of Q
05:23 - timer then pass in self we are adding
05:27 - the timer to the clock now now with
05:29 - designing the layout of our clock I'll
05:32 - handle that within the initialized user
05:33 - interface
05:35 - method we're going to set a title for
05:37 - the window self. set window title method
05:44 - pass in a string that will be used for
05:46 - the title of the window let's say
05:48 - digital clock then our window should say
05:52 - digital
05:54 - clock let's set the geometry of the
05:57 - window self. set
06:00 - geometry the first two arguments are
06:03 - going to be for the placement of the
06:04 - window where will it appear within your
06:07 - screen so I'll pick something
06:09 - approximately in the middle for me but
06:11 - feel free to change these values then we
06:13 - need a width for the window let's say
06:16 - 300 and a height 100 for the height so
06:20 - my window should appear approximately in
06:22 - the middle of my screen the base width
06:24 - is 300 the base height is 100 now we're
06:28 - going to need a layout manager
06:30 - I will name this layout manager vbox for
06:33 - a vertical box vbox equals call The
06:37 - Constructor within the class QV box this
06:41 - will arrange all of our widgets
06:42 - vertically but we only have one widget a
06:45 - Time label so we will take our layout
06:48 - manager of
06:50 - vbox add widget that's a method we will
06:55 - pass in self. time label as an argument
06:59 - we're add adding our label to this
07:00 - layout manager of
07:02 - vbox then to set the layout we will take
07:05 - self that applies to our clock call the
07:09 - set layout method then pass in our
07:12 - layout manager of
07:14 - vbox So currently if I run this we don't
07:17 - see anything temporarily within our
07:20 - label I will add some text just as a
07:22 - placeholder so we can see what we're
07:24 - working with let's say 12:00
07:29 - so then we should see something at least
07:32 - although the font is kind of small we
07:34 - will be getting rid of this later we
07:37 - just want to be sure that we can see
07:39 - everything all right so after our layout
07:43 - I would like the label to be Center
07:45 - aligned
07:46 - horizontally here's how we can set that
07:48 - up we will take our label self. time
07:53 - label called the set alignment method
08:00 - access the class of
08:03 - qot access a line
08:08 - Center this should Center align our
08:12 - time now let's work on the font I can
08:15 - barely read
08:18 - it we will take our label self. time
08:22 - label set style
08:25 - sheet we can pass in multiple CSS like
08:29 - properties
08:30 - let's set the font size I'll set it to
08:33 - be 150
08:35 - pixels now we can read
08:38 - it you could pick a font but we're going
08:41 - to change that at the end of this video
08:43 - we'll import a custom font but
08:45 - temporarily let's say font family
08:52 - aial you could change the color
08:56 - too so if I set the color to be green
09:00 - then the font color is going to be green
09:03 - but I would like a very specific shade
09:05 - of
09:06 - green you could always Google a Color
09:09 - Picker then pick a very specific color
09:13 - uh let's go with that something that's
09:15 - bright green you can copy the hex value
09:19 - RGB or hsl hsl means Hue saturation and
09:24 - lightness I'll use hsl
09:27 - values for the color we will type hsl
09:31 - add a set of parenthesis then paste
09:33 - those values but there is a degree
09:35 - symbol you do have to get rid of that
09:37 - now the font color is going to be bright
09:39 - green let's change the background color
09:43 - here's how we will take self that
09:46 - applies to our clock then call the set
09:49 - stylesheet
09:51 - method pass in a background
09:54 - color we will set the background color
09:57 - property to be black
10:01 - I think that looks pretty good but it
10:03 - doesn't quite do anything quite yet
10:05 - that's the next step let's create a
10:07 - method to update time no arguments
10:12 - beside self I will create a local
10:14 - variable of current time equals now to
10:18 - get the current time we can access the
10:21 - class of Q
10:23 - time Q time do call the method of
10:28 - current time
10:30 - we will need to convert it to a string
10:31 - we will method chain the two string
10:35 - method within the two string method we
10:38 - will Design the layout of the time so I
10:41 - would like hours first I will type 2 H's
10:44 - colon minutes that's 2 M's cin 2
10:49 - s's to set the text of the label we will
10:51 - take self. time
10:53 - label call the set text method then pass
10:58 - in our current time
11:01 - so if I run this currently we still have
11:03 - our placeholder time let's update it
11:06 - with the current time we can get rid of
11:09 - our placeholder text of 12 we can delete
11:13 - it after we set the font let's call the
11:16 - method of update time self. update
11:22 - time now we should display the current
11:24 - time so me I'm recording this video at
11:27 - 7:44 in the morning
11:30 - if you would like to add AM or PM after
11:32 - your time here's
11:34 - how after our string format specifiers
11:37 - we will add capital A P A means anti-
11:40 - meridium and P means post
11:43 - meridium so then we should display am or
11:46 - p.m. depending on when you're coding
11:48 - this currently the time for me is 7:45
11:52 - a.m. to get the clock to update every
11:55 - second we need to connect our timer
11:58 - widget to a slot of update time we will
12:01 - take our timer self. timer this isn't
12:05 - the time label it's the timer to keep
12:07 - track of the time during a signal of
12:10 - time out we will connect the following
12:15 - slot of self. update time self. update
12:20 - time with our timer we need to trigger a
12:24 - timeout signal every 1,000 milliseconds
12:27 - every second that is to handle that we
12:29 - will take our timer self. timer call the
12:33 - start method then pass in 1,000 from
12:36 - 1,000
12:38 - milliseconds so then when we run this
12:41 - program our clock should update every
12:43 - second and display the new current
12:46 - time as an added bonus if you would like
12:49 - to download a custom font here's how
12:52 - using Google or another search engine I
12:54 - would recommend looking up a font of
12:56 - your choosing so one font that I like is
12:59 - is DS digital what we need is a ttf file
13:03 - meaning true type font I'll just pick
13:06 - this first
13:07 - link so these fonts are pretty good so
13:11 - I'm going to download
13:13 - them I'll pick this specific font DS
13:17 - digigit and again the file extension is
13:20 - ttf so once you have your font move it
13:23 - to your project folder so for
13:25 - convenience we have that ttf file right
13:28 - next to our main python
13:29 - file okay to work with specific fonts we
13:32 - will need the following import from PI
13:37 - qt5 do
13:39 - QT
13:41 - GUI
13:42 - import Q
13:46 - font as well as Q font data
13:52 - base since we're going to use our own
13:55 - custom font we can delete that from the
13:57 - set stylesheet method of our time label
14:00 - so let's set the font right here we will
14:03 - assign a local variable a font
14:06 - ID equals Q font
14:11 - database Q font database is a class for
14:14 - managing and querying fonts available to
14:17 - the application to add a custom font we
14:20 - will call the following method within it
14:22 - add application
14:26 - font within the set of quotes we're
14:29 - going to pass in a file path this can be
14:31 - a relative file path or an absolute file
14:34 - path this ttf file is right next to my
14:37 - main python file I only need the file
14:39 - name my font file is named
14:42 - DS digit and get the file extension of
14:48 - ttf we will create a local variable of
14:51 - font
14:52 - family we will retrieve the name of the
14:55 - font family from this
14:57 - ID again we will access Q font database
15:02 - dot call the
15:05 - application font families method so this
15:09 - method returns a list of font names we
15:12 - will pass in our
15:14 - font
15:16 - ID but there's another step we're going
15:19 - to use the index of operator and get the
15:21 - index of zero this will retrieve the
15:24 - first element of the font family that's
15:27 - because we're working with the list we
15:29 - will need just the first element at
15:31 - index zero now we'll have a font family
15:33 - to work with now to set the font we will
15:37 - create a local variable of my font
15:40 - equals call the class call The
15:43 - Constructor within the class Q
15:48 - font pass in the following arguments our
15:51 - font family that's the first argument
15:55 - and then a font size let's say
15:57 - 150 to set the font we will take our
16:00 - time label
16:01 - self. time
16:04 - label called the set font
16:07 - method then pass in my font our custom
16:12 - font so then we should have our custom
16:14 - font that digital font that we've
16:17 - downloaded all right everybody so that
16:19 - is how to create a digital clock widget
16:21 - using pi qt5

Cleaned transcript:

all right everybody in today's video we're going to build a digital clock widget using Python's pt5 Library if you're new to this channel I have previously released a course on pt5 in that series we've downloaded the pi qt5 package it's found within the library folder of our virtual environment within our project folder if you don't have this package you will need to download it you can open up a terminal then type the following command pip install Pi qt5 enter so I already have it installed be sure that this package of Pi qt5 is within your site packages folder so let's begin at the top of our python file we will need the following Imports import CIS CIS means system this module provides variables used and maintained by the python interpreter we would also need widgets widgets are the building blocks of a guy application from the package of Pi qt5 we need to access the module of QT widgets import the following Q application Q widget this is a generic widget we'll turn our digital clock into its own widget and Q label to work with labels we will be using a layout manager more specifically QV box layout layout there's another import we'll need too from the package of Pi q25 access the module of QT core the QT core module it provides functionality not related to guy components this is where we'll get a timer to keep track of the time from this module we will import Q timer Q time and QT QT is for alignment we will create a class of digital clock instead of inheriting from the main window widget we will inherit from The Base Class of Q widget Q widget is a base class to create our own widgets our digital clock will be a widget we will need a Constructor so let's define that Define init pass and self if there are any arguments to send to the parent we will call the Constructor of the parent the super class super call the init method at the end of The Constructor what I like to do is call a method of initialize UI init UI this will be a separate method Define init UI there are no parameters besides self and for now I'll write pass it's within this method that we will be designing the layout of the digital clock within the Constructor that's where we will be constructing all of the different entities for the clock at the end of my python file I will add the following statement if Dunder name is equal to a string of Dunder main this statement will be true if we are running this program directly to create an application we will create an F object equals call The Constructor within the class Q application as an argument to the Constructor we will pass in the following argument access the module of CIS AR RG V which means arguments this would apply if we're running from command prompt or terminal but we won't be doing that in this video but it's nice just to set it up in case we do in the future now we are going to create a clock object clock equals we will call the Constructor of our digital clock class there are no arguments now the window doesn't appear That's because we have to use the show method of our clock take our clock call the show method now it's only going to appear for a brief second just momentarily I don't know if you saw that to ensure a clean and proper exit of our application we need to call the following method access our module of CIS call the exit method then pass in the following we will take our app object then call the following method e exe C underscore and then a set of parentheses it's a method it's the execute method it starts the main event Loop of the application it also handles events such as key presses Mouse clicks or other user interactions so then we should have a window that stays in place until we exit okay now we have the base functionality all set up we have a class of digital clock that inherits from the Q widget based class we're not going to be using main window in this video within the Constructor of my digital clock I will create a a label self. time label this will be a label that displays the time we will call the Constructor within the class Q label then be sure to pass in we will be adding this label directly to our widget of clock we will need a timer self. timer equals call The Constructor of Q timer then pass in self we are adding the timer to the clock now now with designing the layout of our clock I'll handle that within the initialized user interface method we're going to set a title for the window self. set window title method pass in a string that will be used for the title of the window let's say digital clock then our window should say digital clock let's set the geometry of the window self. set geometry the first two arguments are going to be for the placement of the window where will it appear within your screen so I'll pick something approximately in the middle for me but feel free to change these values then we need a width for the window let's say 300 and a height 100 for the height so my window should appear approximately in the middle of my screen the base width is 300 the base height is 100 now we're going to need a layout manager I will name this layout manager vbox for a vertical box vbox equals call The Constructor within the class QV box this will arrange all of our widgets vertically but we only have one widget a Time label so we will take our layout manager of vbox add widget that's a method we will pass in self. time label as an argument we're add adding our label to this layout manager of vbox then to set the layout we will take self that applies to our clock call the set layout method then pass in our layout manager of vbox So currently if I run this we don't see anything temporarily within our label I will add some text just as a placeholder so we can see what we're working with let's say 1200 so then we should see something at least although the font is kind of small we will be getting rid of this later we just want to be sure that we can see everything all right so after our layout I would like the label to be Center aligned horizontally here's how we can set that up we will take our label self. time label called the set alignment method access the class of qot access a line Center this should Center align our time now let's work on the font I can barely read it we will take our label self. time label set style sheet we can pass in multiple CSS like properties let's set the font size I'll set it to be 150 pixels now we can read it you could pick a font but we're going to change that at the end of this video we'll import a custom font but temporarily let's say font family aial you could change the color too so if I set the color to be green then the font color is going to be green but I would like a very specific shade of green you could always Google a Color Picker then pick a very specific color uh let's go with that something that's bright green you can copy the hex value RGB or hsl hsl means Hue saturation and lightness I'll use hsl values for the color we will type hsl add a set of parenthesis then paste those values but there is a degree symbol you do have to get rid of that now the font color is going to be bright green let's change the background color here's how we will take self that applies to our clock then call the set stylesheet method pass in a background color we will set the background color property to be black I think that looks pretty good but it doesn't quite do anything quite yet that's the next step let's create a method to update time no arguments beside self I will create a local variable of current time equals now to get the current time we can access the class of Q time Q time do call the method of current time we will need to convert it to a string we will method chain the two string method within the two string method we will Design the layout of the time so I would like hours first I will type 2 H's colon minutes that's 2 M's cin 2 s's to set the text of the label we will take self. time label call the set text method then pass in our current time so if I run this currently we still have our placeholder time let's update it with the current time we can get rid of our placeholder text of 12 we can delete it after we set the font let's call the method of update time self. update time now we should display the current time so me I'm recording this video at 744 in the morning if you would like to add AM or PM after your time here's how after our string format specifiers we will add capital A P A means anti meridium and P means post meridium so then we should display am or p.m. depending on when you're coding this currently the time for me is 745 a.m. to get the clock to update every second we need to connect our timer widget to a slot of update time we will take our timer self. timer this isn't the time label it's the timer to keep track of the time during a signal of time out we will connect the following slot of self. update time self. update time with our timer we need to trigger a timeout signal every 1,000 milliseconds every second that is to handle that we will take our timer self. timer call the start method then pass in 1,000 from 1,000 milliseconds so then when we run this program our clock should update every second and display the new current time as an added bonus if you would like to download a custom font here's how using Google or another search engine I would recommend looking up a font of your choosing so one font that I like is is DS digital what we need is a ttf file meaning true type font I'll just pick this first link so these fonts are pretty good so I'm going to download them I'll pick this specific font DS digigit and again the file extension is ttf so once you have your font move it to your project folder so for convenience we have that ttf file right next to our main python file okay to work with specific fonts we will need the following import from PI qt5 do QT GUI import Q font as well as Q font data base since we're going to use our own custom font we can delete that from the set stylesheet method of our time label so let's set the font right here we will assign a local variable a font ID equals Q font database Q font database is a class for managing and querying fonts available to the application to add a custom font we will call the following method within it add application font within the set of quotes we're going to pass in a file path this can be a relative file path or an absolute file path this ttf file is right next to my main python file I only need the file name my font file is named DS digit and get the file extension of ttf we will create a local variable of font family we will retrieve the name of the font family from this ID again we will access Q font database dot call the application font families method so this method returns a list of font names we will pass in our font ID but there's another step we're going to use the index of operator and get the index of zero this will retrieve the first element of the font family that's because we're working with the list we will need just the first element at index zero now we'll have a font family to work with now to set the font we will create a local variable of my font equals call the class call The Constructor within the class Q font pass in the following arguments our font family that's the first argument and then a font size let's say 150 to set the font we will take our time label self. time label called the set font method then pass in my font our custom font so then we should have our custom font that digital font that we've downloaded all right everybody so that is how to create a digital clock widget using pi qt5
