With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to explain
00:04 - how we can detect key events in
00:06 - javafx so sit back relax and enjoy the
00:09 - show
00:12 - all right people so this is how we can
00:14 - detect key events in javafx there's one
00:17 - of a few ways in which we can implement
00:18 - this
00:19 - i found that the easiest way is just to
00:21 - add an event handler to our scene
00:23 - directly within our start method
00:25 - but there's a few changes that we're
00:26 - going to make to our current code
00:28 - we're going to instantiate an instance
00:30 - of a loader object
00:32 - using our fxml file so let's precede the
00:35 - parent root with
00:36 - this line of code fxml loader we will
00:38 - call this object
00:39 - loader equals new fxml
00:43 - loader and within the constructor pass
00:45 - in git class
00:46 - get resource the name of your fxml file
00:49 - and mine is named scene.fxml
00:52 - now we're going to change parent root
00:54 - equals get rid of all this
00:56 - and we will use the load method of our
00:59 - loader object
01:00 - this will load an object hierarchy from
01:03 - an xml document
01:04 - one way in which we can access the
01:06 - properties and methods of a controller
01:08 - is to create and instantiate a
01:10 - controller object within our start
01:12 - method
01:12 - so let's add that maybe here controller
01:16 - whatever the name of your controller
01:18 - class is let's call this controller
01:21 - equals and we need to use our loader
01:23 - object
01:25 - dot get controller
01:29 - so this will create an instance of a
01:31 - controller object for us
01:33 - and this controller object has access to
01:35 - any properties and methods
01:36 - found within your controller class that
01:38 - are defined within so let's define a few
01:40 - methods
01:41 - let's say we have a method named moveup
01:45 - and let's print something
01:46 - system.out.printline
01:49 - moving up move
01:52 - down moving down
01:56 - move left
02:01 - moving left then move right
02:08 - probably all we'll need here moving
02:12 - right okay now with our scene we're
02:16 - going to add an
02:17 - anonymous event handler so after we
02:20 - declare our scene
02:22 - let's type scene dot
02:26 - set on key pressed
02:29 - and we can pass in an event handler new
02:33 - event handler and we're going to list a
02:35 - generic type
02:36 - of key event then add a set of
02:40 - parentheses
02:41 - then curly braces and be sure to add any
02:44 - unimplemented methods
02:46 - so when our scene detects a key event it
02:49 - will call this handle method
02:51 - i'm just going to rename this argument
02:53 - as event
02:54 - now within our handle method let's just
02:56 - be sure that everything's working by
02:58 - testing it
02:59 - let's display the code of the event that
03:02 - occurs that is handled
03:04 - so type the name of your argument event
03:06 - dot
03:07 - get code so when we run this
03:13 - if i was to press on a key it's going to
03:16 - display the key code
03:18 - so wasd up down left
03:21 - right space enter feel free to play
03:23 - around with that
03:24 - this means that we can use the get code
03:27 - method of our
03:28 - event argument so we can detect what key
03:30 - is pressed so within our handle method
03:33 - let's write a switch
03:34 - so let's create a switch and we are
03:37 - going to
03:38 - examine event dot get
03:41 - code and depending on what key is
03:43 - pressed we will call
03:44 - a method from our controller and we
03:47 - already instantiated
03:48 - an instance of our controller so we have
03:51 - access to these properties and methods
03:53 - found within this class
03:54 - so let's create a switch and we need
03:58 - a couple different cases case
04:01 - up so what we'll do is take
04:05 - our controller object that we
04:07 - instantiated near the top here
04:09 - and we will call the move up method
04:13 - and then break okay let's do the same
04:17 - thing for down
04:18 - left and right but i'm just gonna copy
04:20 - this
04:22 - so we have up down move
04:26 - down then we have left
04:31 - move left
04:38 - then right move
04:41 - right we should probably add a default
04:44 - case too
04:46 - so default just break
04:51 - okay let's test this
04:55 - i'm gonna press up down left
04:58 - right moving up down left
05:01 - right cool we can also change this to
05:04 - different keys as well
05:05 - let's say to move up we're going to
05:07 - press the w key
05:08 - down will be s left is a right is d
05:14 - this time i'm going to press w a
05:17 - s d that's one way in which we can
05:20 - detect key events is to add
05:22 - an anonymous event handler directly to
05:24 - our scene now you could shorten this to
05:26 - a lambda expression if we were to do
05:28 - that we would write
05:30 - event then an arrow get rid of your
05:33 - handle method but keep the code within
05:37 - and let me just move this together so
05:40 - this would also work too
05:41 - w a s d
05:44 - so in conclusion everybody that is one
05:47 - way in which we can detect key events
05:49 - we can add an anonymous event handler or
05:52 - a land expression
05:53 - directly to our scene using the set on
05:56 - key pressed
05:56 - method if you would like a copy of all
05:59 - this code i will post this to the
06:00 - comment section down below
06:02 - but yeah that is how to detect key
06:04 - events using javafx

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain how we can detect key events in javafx so sit back relax and enjoy the show all right people so this is how we can detect key events in javafx there's one of a few ways in which we can implement this i found that the easiest way is just to add an event handler to our scene directly within our start method but there's a few changes that we're going to make to our current code we're going to instantiate an instance of a loader object using our fxml file so let's precede the parent root with this line of code fxml loader we will call this object loader equals new fxml loader and within the constructor pass in git class get resource the name of your fxml file and mine is named scene.fxml now we're going to change parent root equals get rid of all this and we will use the load method of our loader object this will load an object hierarchy from an xml document one way in which we can access the properties and methods of a controller is to create and instantiate a controller object within our start method so let's add that maybe here controller whatever the name of your controller class is let's call this controller equals and we need to use our loader object dot get controller so this will create an instance of a controller object for us and this controller object has access to any properties and methods found within your controller class that are defined within so let's define a few methods let's say we have a method named moveup and let's print something system.out.printline moving up move down moving down move left moving left then move right probably all we'll need here moving right okay now with our scene we're going to add an anonymous event handler so after we declare our scene let's type scene dot set on key pressed and we can pass in an event handler new event handler and we're going to list a generic type of key event then add a set of parentheses then curly braces and be sure to add any unimplemented methods so when our scene detects a key event it will call this handle method i'm just going to rename this argument as event now within our handle method let's just be sure that everything's working by testing it let's display the code of the event that occurs that is handled so type the name of your argument event dot get code so when we run this if i was to press on a key it's going to display the key code so wasd up down left right space enter feel free to play around with that this means that we can use the get code method of our event argument so we can detect what key is pressed so within our handle method let's write a switch so let's create a switch and we are going to examine event dot get code and depending on what key is pressed we will call a method from our controller and we already instantiated an instance of our controller so we have access to these properties and methods found within this class so let's create a switch and we need a couple different cases case up so what we'll do is take our controller object that we instantiated near the top here and we will call the move up method and then break okay let's do the same thing for down left and right but i'm just gonna copy this so we have up down move down then we have left move left then right move right we should probably add a default case too so default just break okay let's test this i'm gonna press up down left right moving up down left right cool we can also change this to different keys as well let's say to move up we're going to press the w key down will be s left is a right is d this time i'm going to press w a s d that's one way in which we can detect key events is to add an anonymous event handler directly to our scene now you could shorten this to a lambda expression if we were to do that we would write event then an arrow get rid of your handle method but keep the code within and let me just move this together so this would also work too w a s d so in conclusion everybody that is one way in which we can detect key events we can add an anonymous event handler or a land expression directly to our scene using the set on key pressed method if you would like a copy of all this code i will post this to the comment section down below but yeah that is how to detect key events using javafx
