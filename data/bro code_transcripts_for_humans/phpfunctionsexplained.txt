With timestamps:

00:00 - hey everybody in today's video I'm going
00:01 - to explain how we can create functions
00:03 - in PHP with a function you write some
00:06 - code once then reuse it whenever you
00:09 - need it it's reusable code if you ever
00:11 - need to call a written function you type
00:13 - the function name followed by a set of
00:16 - parentheses for example we could have an
00:18 - add function we have a function name
00:20 - then two parentheses I like to think of
00:22 - the parentheses as two telephones
00:24 - talking to each other in order to invoke
00:26 - a function you call it like with the
00:28 - telephone some examples of functions
00:30 - could be add subtract multiply divide
00:33 - you can create all sorts of functions to
00:35 - do various things here's how to create a
00:37 - function
00:38 - we'll create a function to sing Happy
00:40 - Birthday to create a function type
00:42 - function
00:43 - then we're declaring a function name
00:45 - what would you like to name this
00:47 - function I will name it the happy
00:49 - birthday function add a set of
00:52 - parentheses a set of curly braces
00:54 - any code you would like to reuse you
00:56 - place within the set of curly braces
00:58 - I'll create some Happy Birthday song
01:13 - here's my function we write this code
01:15 - once then reuse it whenever we need it
01:17 - if I would like to execute the code
01:20 - within the function I would type the
01:22 - function name in this case it's happy
01:23 - birthday
01:25 - then add a set of parentheses like it's
01:27 - a pair of telephones talking to each
01:28 - other that's how you call a function
01:31 - and here's my birthday message
01:33 - um I forgot some break lines let me put
01:35 - those in real quick
01:38 - that's much better happy birthday dear
01:40 - you happy birthday to you happy birthday
01:43 - dear you you are X years old I know it's
01:46 - kind of a lame song I just made it up on
01:48 - the spot I can call this function as
01:50 - many times as I need it if I would like
01:52 - to sing Happy Birthday three times I
01:54 - would just invoke this function three
01:56 - times
01:58 - there we have sung three verses of happy
02:00 - birthday I'm gonna add another break
02:02 - statement though there so a function is
02:05 - just a section of reusable code you
02:07 - write it once reuse it whenever you need
02:09 - it with coding we try not to repeat code
02:12 - if we don't have to
02:13 - with the function you can send your
02:15 - function some data some values or
02:18 - variable I'm going to send my happy
02:20 - birthday function a string a first name
02:23 - let's say SpongeBob
02:25 - if you send your function some data a
02:28 - value or a variable this would be known
02:30 - as an argument we need a matching
02:33 - parameter a parameter is kind of like a
02:36 - temporary variable
02:38 - let's create a parameter named
02:41 - first name
02:43 - this parameter only exists within the
02:46 - scope of this function when you escape
02:48 - the function this variable no longer
02:50 - exists
02:52 - let's replace U with the placeholder
02:54 - then we will add our parameter our
02:57 - variable first name happy birthday dear
02:59 - first name
03:01 - let's do that here as well
03:05 - then let's try this again
03:07 - happy birthday dear SpongeBob happy
03:09 - birthday to you happy birthday dear
03:11 - SpongeBob you are X years old I could
03:14 - call this function again and pass on a
03:16 - different parameter like Patrick
03:19 - we have a verse of happy birthday but we
03:21 - have sent a different argument Patrick
03:23 - instead of SpongeBob
03:26 - let's do it one more time we will invoke
03:28 - happy birthday then pass in a first name
03:31 - Squidward
03:32 - happy birthday dear Squidward you can
03:35 - pass in more than one argument to a
03:37 - function
03:38 - let's send an age so separate each
03:41 - argument with a comma I don't know how
03:43 - old SpongeBob is according to the lore
03:45 - let's say that he's 30.
03:47 - let's do that with Patrick as well
03:50 - let's say he's 35 then Squidward he
03:53 - seems older maybe he'll be 45.
03:56 - we have two arguments when we invoke
03:59 - this function we should have two
04:00 - parameters
04:02 - for the second parameter let's store
04:04 - these values in a variable named age
04:06 - then we can use this variable for
04:09 - something let's replace x with variable
04:12 - age
04:15 - happy birthday dear SpongeBob you are 30
04:17 - years old Patrick is 35 years old and
04:20 - Squidward is 45 years old
04:23 - that's how to invoke a function and pass
04:25 - arguments to it but you would need a
04:27 - matching set of parameters
04:29 - now with the function you can return
04:31 - something you'll typically see a return
04:33 - statement at the end of a function let's
04:35 - go over a different example
04:37 - we will create a function to check to
04:39 - see if a number is even or odd
04:42 - function let's name this function is
04:46 - even
04:50 - we will need one parameter
04:52 - a number
04:55 - to invoke this function you type the
04:57 - function name
04:58 - then add a set of parentheses
05:00 - if there's a parameter you need to pass
05:02 - in a value or a variable
05:04 - let's see if the number 11 is even
05:08 - now within our function we need to write
05:10 - some code
05:11 - let's say we have a variable result
05:15 - equals
05:16 - that to see if a number is even or odd
05:18 - you take
05:20 - that number or that variable
05:22 - modulus 2.
05:24 - modulus gives you the remainder of any
05:26 - Division if number divides by 2 evenly
05:29 - the results should be zero if it's odd
05:32 - the result is one
05:34 - then we'll use a return statement and
05:37 - return some value what would we like to
05:39 - return let's return the result
05:42 - now if I Echo
05:44 - after executing this function whatever
05:47 - is returned kinda takes its place
05:50 - then I'm just going to Echo it
05:52 - is 11 even or is it odd that returns one
05:57 - is 10 even or odd that returns zero it's
06:00 - even
06:01 - you could shorten this too let's get rid
06:04 - of our result variable
06:06 - take this section of code
06:08 - and we are returning
06:11 - whatever the outcome is
06:14 - that works too let's write something a
06:16 - little more complicated
06:17 - let's create a function to find the
06:19 - hypotenuse of a right triangle
06:22 - so let's define our function function
06:24 - let's name this function hypotenuse
06:30 - we'll need sides A and B as arguments so
06:34 - set up these matching parameters
06:37 - to find side C we need to follow this
06:40 - equation
06:41 - square root function
06:44 - variable a
06:46 - to the power of 2
06:48 - plus variable B to the power of two
06:53 - then we will return whatever variable C
06:56 - is
06:58 - I'm going to invoke this function but we
07:00 - need two arguments side a and side B
07:04 - let's say side a is three side B is 4.
07:08 - now this doesn't print anything
07:10 - C should technically be five so after
07:13 - executing this function after it's
07:15 - complete just imagine that we're
07:17 - returning five
07:19 - so let's Echo whatever the result is or
07:22 - we could store it within a variable
07:24 - so now the result is five let's do two
07:27 - different numbers side a will be four
07:29 - side B will be five
07:31 - side C is 6.4 and some change
07:36 - one last thing I should mention with
07:38 - your parameter names you can declare a
07:40 - type that needs to be passed in for
07:43 - example if I was to send in like a
07:45 - string like find the hypotenuse of pizza
07:49 - and taco well that really doesn't make
07:52 - sense right fatal error uncut type error
07:55 - unsupported operand type string you can
07:58 - list a data type before the variable
07:59 - name to force the arguments to be of
08:02 - that data type I could say these need to
08:04 - be integers I would type int or float
08:08 - for floating Point numbers
08:10 - if I try this again we receive a
08:13 - different type of error uncut type error
08:15 - now I haven't discussed error handling
08:17 - yet but this will come in handy when we
08:19 - get to that point just be aware of that
08:21 - with parameters you can list a data type
08:23 - beforehand then you need to pass in an
08:26 - argument of that exact data type all
08:28 - right everybody so that's a function
08:29 - it's a section of reusable code whenever
08:32 - you would like to use this function you
08:34 - type the function name add a set of
08:36 - parentheses if there are parameter setup
08:38 - you need to pass in a matching set of
08:40 - arguments then you can return something
08:42 - and well everybody those are functions
08:44 - in PHP

Cleaned transcript:

hey everybody in today's video I'm going to explain how we can create functions in PHP with a function you write some code once then reuse it whenever you need it it's reusable code if you ever need to call a written function you type the function name followed by a set of parentheses for example we could have an add function we have a function name then two parentheses I like to think of the parentheses as two telephones talking to each other in order to invoke a function you call it like with the telephone some examples of functions could be add subtract multiply divide you can create all sorts of functions to do various things here's how to create a function we'll create a function to sing Happy Birthday to create a function type function then we're declaring a function name what would you like to name this function I will name it the happy birthday function add a set of parentheses a set of curly braces any code you would like to reuse you place within the set of curly braces I'll create some Happy Birthday song here's my function we write this code once then reuse it whenever we need it if I would like to execute the code within the function I would type the function name in this case it's happy birthday then add a set of parentheses like it's a pair of telephones talking to each other that's how you call a function and here's my birthday message um I forgot some break lines let me put those in real quick that's much better happy birthday dear you happy birthday to you happy birthday dear you you are X years old I know it's kind of a lame song I just made it up on the spot I can call this function as many times as I need it if I would like to sing Happy Birthday three times I would just invoke this function three times there we have sung three verses of happy birthday I'm gonna add another break statement though there so a function is just a section of reusable code you write it once reuse it whenever you need it with coding we try not to repeat code if we don't have to with the function you can send your function some data some values or variable I'm going to send my happy birthday function a string a first name let's say SpongeBob if you send your function some data a value or a variable this would be known as an argument we need a matching parameter a parameter is kind of like a temporary variable let's create a parameter named first name this parameter only exists within the scope of this function when you escape the function this variable no longer exists let's replace U with the placeholder then we will add our parameter our variable first name happy birthday dear first name let's do that here as well then let's try this again happy birthday dear SpongeBob happy birthday to you happy birthday dear SpongeBob you are X years old I could call this function again and pass on a different parameter like Patrick we have a verse of happy birthday but we have sent a different argument Patrick instead of SpongeBob let's do it one more time we will invoke happy birthday then pass in a first name Squidward happy birthday dear Squidward you can pass in more than one argument to a function let's send an age so separate each argument with a comma I don't know how old SpongeBob is according to the lore let's say that he's 30. let's do that with Patrick as well let's say he's 35 then Squidward he seems older maybe he'll be 45. we have two arguments when we invoke this function we should have two parameters for the second parameter let's store these values in a variable named age then we can use this variable for something let's replace x with variable age happy birthday dear SpongeBob you are 30 years old Patrick is 35 years old and Squidward is 45 years old that's how to invoke a function and pass arguments to it but you would need a matching set of parameters now with the function you can return something you'll typically see a return statement at the end of a function let's go over a different example we will create a function to check to see if a number is even or odd function let's name this function is even we will need one parameter a number to invoke this function you type the function name then add a set of parentheses if there's a parameter you need to pass in a value or a variable let's see if the number 11 is even now within our function we need to write some code let's say we have a variable result equals that to see if a number is even or odd you take that number or that variable modulus 2. modulus gives you the remainder of any Division if number divides by 2 evenly the results should be zero if it's odd the result is one then we'll use a return statement and return some value what would we like to return let's return the result now if I Echo after executing this function whatever is returned kinda takes its place then I'm just going to Echo it is 11 even or is it odd that returns one is 10 even or odd that returns zero it's even you could shorten this too let's get rid of our result variable take this section of code and we are returning whatever the outcome is that works too let's write something a little more complicated let's create a function to find the hypotenuse of a right triangle so let's define our function function let's name this function hypotenuse we'll need sides A and B as arguments so set up these matching parameters to find side C we need to follow this equation square root function variable a to the power of 2 plus variable B to the power of two then we will return whatever variable C is I'm going to invoke this function but we need two arguments side a and side B let's say side a is three side B is 4. now this doesn't print anything C should technically be five so after executing this function after it's complete just imagine that we're returning five so let's Echo whatever the result is or we could store it within a variable so now the result is five let's do two different numbers side a will be four side B will be five side C is 6.4 and some change one last thing I should mention with your parameter names you can declare a type that needs to be passed in for example if I was to send in like a string like find the hypotenuse of pizza and taco well that really doesn't make sense right fatal error uncut type error unsupported operand type string you can list a data type before the variable name to force the arguments to be of that data type I could say these need to be integers I would type int or float for floating Point numbers if I try this again we receive a different type of error uncut type error now I haven't discussed error handling yet but this will come in handy when we get to that point just be aware of that with parameters you can list a data type beforehand then you need to pass in an argument of that exact data type all right everybody so that's a function it's a section of reusable code whenever you would like to use this function you type the function name add a set of parentheses if there are parameter setup you need to pass in a matching set of arguments then you can return something and well everybody those are functions in PHP
