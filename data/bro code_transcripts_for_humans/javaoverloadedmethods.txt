With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro hope you're doing well and in this
00:03 - video i'm going to teach you guys all
00:04 - about overloaded methods in java so
00:06 - sit back relax and enjoy the show
00:12 - if you find this video helpful please
00:13 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - alright everybody let's discuss
00:21 - overloaded methods overloaded methods
00:23 - are methods that share the same name but
00:26 - they have different parameters this is
00:29 - allowed because
00:30 - each method needs its own unique method
00:32 - signature
00:33 - that is the method's name plus its
00:36 - parameters
00:36 - they can share the same name but they
00:38 - would need different parameters to give
00:40 - them each a unique
00:41 - method signature let's create a few
00:44 - overloaded methods
00:45 - perhaps just a few add methods that will
00:47 - add some numbers together
00:49 - outside of our main method let's declare
00:51 - a few overloaded methods
00:53 - so for this example we'll need these to
00:55 - be static let's return an integer so the
00:57 - return type is going to be
00:59 - int and this will be called add
01:02 - and we will accept a few arguments so we
01:04 - need to set up some corresponding
01:06 - parameters let's say int a and
01:10 - int b and we will return
01:13 - the sum return a plus b
01:16 - so let's create another method an
01:18 - overloaded method
01:19 - also called add wait a minute we have a
01:22 - problem
01:23 - so we have two methods that are
01:26 - duplicates
01:27 - duplicate method add and type main they
01:29 - both have
01:30 - the same method signature they both
01:32 - share the same
01:34 - method name as well as the same
01:36 - parameters where they accept
01:37 - two integer values there are two ways in
01:40 - which we can resolve this
01:42 - the first is that we can change one of
01:44 - the method names and this error would go
01:46 - away
01:46 - but that defeats the purpose of
01:48 - overloaded methods the other way
01:50 - is that we can change the parameters
01:52 - that we have for each method
01:54 - let's say we would like two versions
01:56 - maybe even three versions
01:58 - of our add method one that accepts two
02:01 - values
02:01 - another that accepts three values let's
02:04 - say into c
02:05 - return a plus b plus c and another that
02:08 - will accept
02:10 - four values so we'll have int
02:13 - d return a plus b plus c plus d
02:18 - and then our problem went away so let's
02:21 - test these i'm just going to add a print
02:23 - line
02:23 - that states which overloaded method
02:25 - we're using this
02:26 - is overloaded method number
02:30 - one and i'm going to copy this and paste
02:33 - it
02:33 - and we'll change the second instance of
02:36 - this print line to
02:37 - this is overloaded method number two and
02:40 - lastly this is overloaded method
02:42 - number three so let's try this let's say
02:45 - we have an integer
02:46 - int x equals add and we can pass in
02:50 - between
02:51 - two and four integers now i'm going to
02:54 - attempt to pass in
02:55 - a single integer value but we cannot run
02:58 - and compile this because we do not have
03:00 - a matching
03:00 - method signature we can pass in between
03:03 - two
03:04 - and four integers so let's try this
03:07 - by passing in two arguments this time
03:09 - two integer values
03:11 - and then let's display the sum the
03:13 - result
03:14 - system that out that print line our
03:16 - variable of x
03:18 - so we end up using our first overloaded
03:21 - method
03:21 - this is overloaded method number one and
03:23 - this will display
03:24 - the sum a plus b which is three
03:28 - and let's try and use our second
03:30 - overloaded method
03:31 - we need to pass in three integer values
03:34 - as arguments
03:35 - and we are now using our second
03:37 - overloaded method
03:39 - and lastly we can pass in four
03:42 - integer values and we end up using our
03:44 - third overloaded method and we get a sum
03:47 - of 10.
03:48 - and with overloaded methods not only are
03:50 - the numbers of parameters taken into
03:52 - account but the data type
03:54 - for each specific parameter so this time
03:57 - let's create
03:58 - three more add methods but these ones
04:01 - will accept double values instead of
04:04 - integers
04:05 - so let's change any instance of int
04:08 - to double including the return type
04:15 - all right and then i'm going to change
04:17 - the number of the overloaded method that
04:19 - we're using so
04:20 - six five four three two one
04:23 - our first three methods only accept
04:25 - integers and they will accept between
04:28 - two and four integers our next three add
04:31 - methods only accept
04:32 - double values and they accept between
04:35 - two and
04:35 - four double values so we could also pass
04:38 - in some double values to our overloaded
04:41 - methods
04:42 - let's change these to 1.0 2.0
04:46 - 3.0 and 4.0 and we will need to change
04:50 - the data type of our variable x
04:52 - as well so double x add 1.0 through
04:57 - 4.0 and we are now using
05:00 - overloaded method number six which
05:02 - accepts four
05:03 - double arguments in summary overloaded
05:06 - methods are methods that share
05:08 - the same name but have different
05:10 - parameters they can share the same name
05:12 - but they would need different parameters
05:14 - to give each method a unique method
05:16 - signature
05:17 - some factors that are taken into account
05:19 - with parameters
05:20 - are the number of parameters the data
05:23 - type
05:24 - and the order of the values so if you
05:26 - would like a copy of all this code
05:28 - i will post all of this in the comments
05:30 - down below please don't forget to help
05:32 - me out and smash that like button
05:33 - drop a comment down below and subscribe
05:36 - if you'd like to become a fellow bro

Cleaned transcript:

hey what's going on everybody it's your bro hope you're doing well and in this video i'm going to teach you guys all about overloaded methods in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running alright everybody let's discuss overloaded methods overloaded methods are methods that share the same name but they have different parameters this is allowed because each method needs its own unique method signature that is the method's name plus its parameters they can share the same name but they would need different parameters to give them each a unique method signature let's create a few overloaded methods perhaps just a few add methods that will add some numbers together outside of our main method let's declare a few overloaded methods so for this example we'll need these to be static let's return an integer so the return type is going to be int and this will be called add and we will accept a few arguments so we need to set up some corresponding parameters let's say int a and int b and we will return the sum return a plus b so let's create another method an overloaded method also called add wait a minute we have a problem so we have two methods that are duplicates duplicate method add and type main they both have the same method signature they both share the same method name as well as the same parameters where they accept two integer values there are two ways in which we can resolve this the first is that we can change one of the method names and this error would go away but that defeats the purpose of overloaded methods the other way is that we can change the parameters that we have for each method let's say we would like two versions maybe even three versions of our add method one that accepts two values another that accepts three values let's say into c return a plus b plus c and another that will accept four values so we'll have int d return a plus b plus c plus d and then our problem went away so let's test these i'm just going to add a print line that states which overloaded method we're using this is overloaded method number one and i'm going to copy this and paste it and we'll change the second instance of this print line to this is overloaded method number two and lastly this is overloaded method number three so let's try this let's say we have an integer int x equals add and we can pass in between two and four integers now i'm going to attempt to pass in a single integer value but we cannot run and compile this because we do not have a matching method signature we can pass in between two and four integers so let's try this by passing in two arguments this time two integer values and then let's display the sum the result system that out that print line our variable of x so we end up using our first overloaded method this is overloaded method number one and this will display the sum a plus b which is three and let's try and use our second overloaded method we need to pass in three integer values as arguments and we are now using our second overloaded method and lastly we can pass in four integer values and we end up using our third overloaded method and we get a sum of 10. and with overloaded methods not only are the numbers of parameters taken into account but the data type for each specific parameter so this time let's create three more add methods but these ones will accept double values instead of integers so let's change any instance of int to double including the return type all right and then i'm going to change the number of the overloaded method that we're using so six five four three two one our first three methods only accept integers and they will accept between two and four integers our next three add methods only accept double values and they accept between two and four double values so we could also pass in some double values to our overloaded methods let's change these to 1.0 2.0 3.0 and 4.0 and we will need to change the data type of our variable x as well so double x add 1.0 through 4.0 and we are now using overloaded method number six which accepts four double arguments in summary overloaded methods are methods that share the same name but have different parameters they can share the same name but they would need different parameters to give each method a unique method signature some factors that are taken into account with parameters are the number of parameters the data type and the order of the values so if you would like a copy of all this code i will post all of this in the comments down below please don't forget to help me out and smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro
