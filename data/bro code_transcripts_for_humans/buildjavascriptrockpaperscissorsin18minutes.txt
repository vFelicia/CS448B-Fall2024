With timestamps:

00:00 - hey what's going on everybody in today's
00:01 - video we're going to create a game of
00:03 - rock paper scissors using JavaScript so
00:05 - sit back relax and enjoy the show all
00:08 - right let's do this thing we're going to
00:11 - create an H1 heading with text of rock
00:15 - paper scissors for a
00:17 - title we'll create three buttons the
00:20 - first one will be for rock you can add
00:23 - some text of rock but you know what I
00:26 - like using emojis I'm going to use an
00:28 - emoji instead I would like an emoji of a
00:32 - fist and I'm going to zoom in until we
00:35 - add some CSS let's create a button for
00:39 - paper that'll
00:43 - work and
00:46 - scissors maybe a p
00:48 - sign with each of these buttons I will
00:51 - set the onclick event handler equal to a
00:54 - JavaScript function we'll name the
00:56 - function play game now with these
00:59 - functions we're going to to pass in an
01:00 - argument the first will be a string of
01:03 - rock now if you use double quotes HTML
01:06 - is going to be confused where this event
01:08 - handler ends our argument is going to be
01:10 - a string but it's going to be within
01:12 - single quotes because we're already
01:14 - using double quotes let's copy this
01:16 - attribute because I don't feel like
01:17 - typing it again the second argument will
01:20 - be for a string of
01:22 - paper and then
01:26 - scissors let's enclose our buttons
01:28 - within a div element
01:33 - this div element will have an ID of
01:37 - choices let's cut our buttons and paste
01:40 - them within the div element outside of
01:43 - the div element we'll create another div
01:45 - element we will display the Player's
01:48 - Choice player colon
01:52 - space the ID of this development will be
01:56 - player display this will display the
01:59 - word Rock paper or scissors depending on
02:01 - which button we
02:03 - pick let's do this for a
02:05 - computer text will be
02:08 - computer ID computer
02:11 - display we should display a result who
02:16 - won the ID will be result
02:21 - display just for some temporary text I'm
02:23 - going to add it's a tie when we style
02:28 - this with CSS I would like to be able to
02:30 - see the updates we'll get rid of this
02:32 - pretty soon eventually we'll add in a
02:35 - score tracker but we'll do that after
02:36 - our game is at least working okay let's
02:39 - head to our CSS
02:40 - stylesheet I'm going to zoom back to
02:46 - 100% let's select the body of our
02:48 - document I will set the font family to
02:51 - be aiel with the backup of s
02:55 - serif let's set the font weight to be
02:57 - bold throughout this application
03:02 - I will set any margin to be zero around
03:05 - the
03:05 - body use flex boox to display the
03:08 - elements display
03:10 - Flex the flex direction will be a
03:16 - column and align items
03:22 - Center let's select our H1 element I
03:25 - need to increase the font
03:27 - size font size
03:30 - 3.5
03:32 - RM for a color pick a
03:38 - color for me I'll set the lightness to
03:44 - 20% now we're going to select our
03:46 - development of choices actually let's
03:49 - make this a class class
03:53 - choices select the class of
03:57 - choices add margin
04:01 - bottom of 30
04:05 - pixels within this development we need
04:08 - to select all the
04:09 - buttons we will select the class of
04:12 - choices select all buttons within this
04:15 - class we'll increase the font
04:18 - size to 7.5 RM these buttons need to be
04:23 - big I will set a minimum
04:26 - width of 160 pixels
04:30 - add a little bit of margin between each
04:34 - button zero pixels on the top and bottom
04:37 - 10 pixels on the sides for the buttons I
04:40 - would like rounded Corners I would like
04:42 - these buttons to be a
04:43 - circle I can set the Border radius to
04:46 - something massive like 250 pixels that
04:50 - will give us some rounded buttons and
04:52 - pick a background color background
04:57 - color I want something blue
05:01 - I've already pre-picked a color so I'm
05:03 - going to use
05:06 - this now when I hover my cursor over one
05:09 - of the buttons I would like my cursor to
05:12 - change into a
05:13 - pointer and that does work let's also
05:17 - add a transition
05:18 - effect let's change the background color
05:22 - to e is after half a
05:27 - second let's access the hovers class of
05:30 - all the buttons of
05:33 - choices take the background color I'll
05:36 - set the lightness to be 20%
05:38 - lighter each button is going to light up
05:41 - when you hover your cursor over the
05:42 - button then we'll work on the displays
05:45 - next we're going to select the player
05:47 - display and the computer display these
05:49 - are
05:51 - ideas player
05:53 - display and computer
05:58 - display let's set the font size to be
06:01 - 2.5
06:03 - RM and for the result display where it
06:06 - says it's a
06:08 - tie that's the ID of result
06:12 - display set the font
06:15 - size to be 5
06:19 - RM and I'll add some margin to the top
06:21 - and bottom 30 pixels to the top and
06:24 - bottom zero on the
06:26 - sides okay that is good enough for now
06:30 - so we no longer need this placeholder
06:32 - for the result display let's add some
06:34 - functionality we have a lot of constants
06:36 - to declare const choices choices will be
06:40 - an array of strings we'll have
06:43 - rock
06:45 - paper and
06:47 - scissors we need to get the player
06:49 - display and the computer display so we
06:52 - can update them const
06:54 - player display equals document. get
07:00 - element by ID the ID that I'm selecting
07:04 - is player
07:07 - display then we have computer
07:12 - display computer
07:15 - display and result display this one it's
07:19 - empty
07:21 - currently const result display equals
07:25 - document. getet element by ID result
07:28 - display
07:31 - we'll factor in scoring later we need a
07:33 - function of play game that accepts one
07:36 - argument the Player's
07:39 - Choice
07:41 - function play game we have one
07:45 - parameter player
07:48 - choice when we play a new game we have
07:51 - to pick a choice for the computer
07:53 - between rock paper or scissors what we
07:55 - could do is generate a random number
07:57 - between zero and two rock is is index
07:59 - zero paper is index one scissors is
08:01 - index 2 we'll create a constant within
08:04 - play game of computer Choice I'm
08:08 - declaring it within the function so we
08:10 - can update it every time we play a new
08:12 - game equals take our array of
08:17 - choices at index for the index we'll
08:21 - generate that random number using the
08:23 - random method of math math. random
08:26 - method * 3 then we need to round it
08:30 - because it's not going to be a whole
08:32 - number math. floor to round it
08:36 - down so the computer's choice will be a
08:39 - random index between 0o through two
08:42 - which will give us randomly either rock
08:44 - paper or scissors hey this is bro from
08:47 - the future one thing that would be good
08:48 - for us to do is along the way use
08:51 - console.log just to be sure that what
08:53 - we've been writing has been working so
08:56 - within our computer's Choice let's
08:57 - console.log whatever that is
09:01 - so if this does work after clicking one
09:04 - of these buttons the computer is either
09:06 - going to pick rock paper or scissors the
09:08 - computer picked scissors just now
09:10 - scissors scissors it really likes
09:13 - scissors apparently so yeah the players
09:15 - choice is being populated with the
09:17 - string of rock paper or scissors I just
09:19 - wanted to confirm
09:21 - that and we need a result what are we
09:24 - going to display to the
09:26 - screen result will be an empty string
09:28 - for now first let's check to see if the
09:30 - Player's Choice is equal to the
09:32 - computer's choice that means it's a
09:35 - tie if Player's
09:37 - Choice is strictly equal to the
09:40 - computer's Choice maybe we both pick
09:43 - rock well then we'll take our result to
09:45 - be displayed and set it equal to
09:48 - be it's a
09:51 - tie else somebody is going to
09:54 - win let's add an else
09:57 - statement we can use a switch
10:00 - which we can examine a value against
10:02 - matching cases we'll examine the
10:04 - Player's
10:07 - Choice does the Player's Choice match
10:10 - the case of
10:12 - rock do these two values match if so
10:17 - we'll use the tary
10:20 - operator we'll check the condition of if
10:23 - our computer's
10:25 - choice is strictly equal to scissors
10:32 - if so question mark That's the trary
10:35 - operator if we pick Rock and the
10:37 - computer pick scissors we will return
10:40 - you win otherwise if this condition is
10:43 - false well that means the computer
10:46 - picked paper if our choices already
10:48 - don't match and we picked rock that
10:50 - means they either picked scissors or
10:52 - paper if they didn't pick scissors that
10:54 - means they picked paper so they win that
10:57 - means we lose
10:59 - you
11:00 - lose whatever string is returned we're
11:03 - going to assign it to result result
11:06 - equals whatever is returned either you
11:09 - win or you
11:10 - lose then we should add a break after
11:12 - this
11:15 - case all right let's copy this case and
11:18 - everything within
11:19 - it let's paste it if the Player's Choice
11:23 - matches the case of paper and the
11:26 - computer's choice is strictly equal to R
11:30 - that means if that's true you win else
11:34 - you lose let's copy this case and
11:37 - everything within
11:41 - it case
11:44 - scissors if the computer's Choice equals
11:48 - paper then you win otherwise you lose
11:52 - after we move beyond the IFL statements
11:55 - we need to update the text on the screen
11:57 - so we will take the players
12:02 - display set the text content to equal a
12:08 - template string of player colon space
12:12 - add a
12:13 - placeholder the Player's Choice did we
12:17 - pick rock paper or scissors then let's
12:19 - do this with the computer's
12:21 - Choice select the text content of the
12:24 - computer
12:26 - display the text will be computer
12:29 - computer we will display the variable of
12:33 - computer Choice the one that was picked
12:37 - randomly and take our result
12:40 - display which has no text content
12:44 - currently set it equal to be
12:48 - result okay let's see what we have
12:50 - currently let's pick Rock it's a tie
12:54 - paper you win scissors you lose what
12:59 - we'll work on next depending on the
13:00 - result that's displayed if we win I
13:03 - would like the text to be green if we
13:05 - lose I want the text to be red going to
13:08 - our CSS stylesheet we're going to add
13:10 - three
13:12 - classes green
13:15 - text red
13:18 - text pick a font
13:22 - color pick something
13:27 - green
13:31 - and for the red text pick a red font
13:35 - color if we win or lose we're going to
13:38 - add one of these classes to the class
13:40 - list of our result display so going back
13:43 - to our Javascript file after we display
13:46 - the result now we're going to add a
13:50 - switch we're going to examine our
13:54 - result we will add a case of you win
14:00 - if our value matches this case let's
14:02 - take our result display access the class
14:07 - list use the add method add the class of
14:12 - green
14:13 - text then
14:15 - break let's copy this
14:18 - case paste
14:20 - it we will add a case for you
14:25 - lose add the class of red text if we
14:29 - lose let's see what we have
14:33 - currently if we win you get green text
14:37 - if you lose you get red text but now if
14:40 - it's a tie we have red text with each
14:43 - new game we should reset the color back
14:45 - to the
14:46 - original so before updating the color
14:48 - and displaying it let's take our result
14:52 - display access the class list use the
14:55 - remove method remove any class of green
14:58 - test
14:59 - text and red
15:01 - text let's see if this works you lose
15:06 - it's a tie that's black you lose you win
15:10 - the color seem to be working all right
15:13 - now let's add a scoring mechanism we'll
15:15 - have to head back to our HTML
15:17 - file after our result
15:20 - display we're going to create a Dev
15:23 - element the First Development will have
15:25 - a class of score
15:30 - display the text for the score display
15:32 - will be player
15:35 - score colon
15:38 - space then we'll add a span element
15:41 - within with text of zero I will give the
15:45 - span element a unique ID of player score
15:51 - display the reason I'm putting this
15:53 - number within a span element I'm going
15:54 - to style this number different from the
15:56 - rest of the div element the player score
15:59 - okay let's copy this development and
16:01 - paste it we need another for computer
16:04 - computer
16:07 - score the ID of the span element will be
16:09 - computer score
16:11 - display going back to our CSS stylesheet
16:14 - We'll add the following after our result
16:17 - display we will select the class of
16:20 - score
16:21 - display increase the font
16:24 - size font size will be 2
16:27 - RM
16:29 - for the actual numbers I'm going to
16:31 - change the color with the CSS property
16:33 - where the font color is green I'll add
16:35 - an additional selector let's select the
16:38 - ID of player score display I would also
16:43 - like that to be that shade of green and
16:45 - for the red text let's select the ID of
16:50 - computer score
16:52 - display so the computer score that
16:55 - number will be red okay now we just need
16:58 - to add functionality to the scoring
17:01 - mechanism so back to the
17:03 - top we're going to select the ID of
17:07 - player score
17:08 - display const player score display
17:12 - equals document. getet element by
17:15 - ID player score
17:18 - display and we need the same thing for
17:20 - the
17:26 - computer computer score
17:31 - display and we need a score value a
17:34 - number so we can work with it let player
17:38 - score equal Z let computer score equal
17:45 - 0 going to the bottom of this function
17:48 - within our switch within our case of U
17:51 - win we're going to increment our player
17:53 - score player score
17:56 - Plus+ then take our player score
18:00 - display and update
18:03 - it access the text
18:06 - content set it equal to whatever the
18:09 - player score
18:11 - is then let's do this with our
18:15 - computer computer score
18:18 - Plus+ that's if we
18:20 - lose and computer score
18:23 - display equals the computer
18:26 - score and that should be everything
18:28 - thing let's see if this program
18:30 - works you lose you win you win it's a
18:36 - tie you win you win you lose the player
18:41 - score is four the computer score is two
18:44 - all right everybody so that is a game of
18:45 - rock paper scissors you can make using
18:52 - JavaScript

Cleaned transcript:

hey what's going on everybody in today's video we're going to create a game of rock paper scissors using JavaScript so sit back relax and enjoy the show all right let's do this thing we're going to create an H1 heading with text of rock paper scissors for a title we'll create three buttons the first one will be for rock you can add some text of rock but you know what I like using emojis I'm going to use an emoji instead I would like an emoji of a fist and I'm going to zoom in until we add some CSS let's create a button for paper that'll work and scissors maybe a p sign with each of these buttons I will set the onclick event handler equal to a JavaScript function we'll name the function play game now with these functions we're going to to pass in an argument the first will be a string of rock now if you use double quotes HTML is going to be confused where this event handler ends our argument is going to be a string but it's going to be within single quotes because we're already using double quotes let's copy this attribute because I don't feel like typing it again the second argument will be for a string of paper and then scissors let's enclose our buttons within a div element this div element will have an ID of choices let's cut our buttons and paste them within the div element outside of the div element we'll create another div element we will display the Player's Choice player colon space the ID of this development will be player display this will display the word Rock paper or scissors depending on which button we pick let's do this for a computer text will be computer ID computer display we should display a result who won the ID will be result display just for some temporary text I'm going to add it's a tie when we style this with CSS I would like to be able to see the updates we'll get rid of this pretty soon eventually we'll add in a score tracker but we'll do that after our game is at least working okay let's head to our CSS stylesheet I'm going to zoom back to 100% let's select the body of our document I will set the font family to be aiel with the backup of s serif let's set the font weight to be bold throughout this application I will set any margin to be zero around the body use flex boox to display the elements display Flex the flex direction will be a column and align items Center let's select our H1 element I need to increase the font size font size 3.5 RM for a color pick a color for me I'll set the lightness to 20% now we're going to select our development of choices actually let's make this a class class choices select the class of choices add margin bottom of 30 pixels within this development we need to select all the buttons we will select the class of choices select all buttons within this class we'll increase the font size to 7.5 RM these buttons need to be big I will set a minimum width of 160 pixels add a little bit of margin between each button zero pixels on the top and bottom 10 pixels on the sides for the buttons I would like rounded Corners I would like these buttons to be a circle I can set the Border radius to something massive like 250 pixels that will give us some rounded buttons and pick a background color background color I want something blue I've already prepicked a color so I'm going to use this now when I hover my cursor over one of the buttons I would like my cursor to change into a pointer and that does work let's also add a transition effect let's change the background color to e is after half a second let's access the hovers class of all the buttons of choices take the background color I'll set the lightness to be 20% lighter each button is going to light up when you hover your cursor over the button then we'll work on the displays next we're going to select the player display and the computer display these are ideas player display and computer display let's set the font size to be 2.5 RM and for the result display where it says it's a tie that's the ID of result display set the font size to be 5 RM and I'll add some margin to the top and bottom 30 pixels to the top and bottom zero on the sides okay that is good enough for now so we no longer need this placeholder for the result display let's add some functionality we have a lot of constants to declare const choices choices will be an array of strings we'll have rock paper and scissors we need to get the player display and the computer display so we can update them const player display equals document. get element by ID the ID that I'm selecting is player display then we have computer display computer display and result display this one it's empty currently const result display equals document. getet element by ID result display we'll factor in scoring later we need a function of play game that accepts one argument the Player's Choice function play game we have one parameter player choice when we play a new game we have to pick a choice for the computer between rock paper or scissors what we could do is generate a random number between zero and two rock is is index zero paper is index one scissors is index 2 we'll create a constant within play game of computer Choice I'm declaring it within the function so we can update it every time we play a new game equals take our array of choices at index for the index we'll generate that random number using the random method of math math. random method * 3 then we need to round it because it's not going to be a whole number math. floor to round it down so the computer's choice will be a random index between 0o through two which will give us randomly either rock paper or scissors hey this is bro from the future one thing that would be good for us to do is along the way use console.log just to be sure that what we've been writing has been working so within our computer's Choice let's console.log whatever that is so if this does work after clicking one of these buttons the computer is either going to pick rock paper or scissors the computer picked scissors just now scissors scissors it really likes scissors apparently so yeah the players choice is being populated with the string of rock paper or scissors I just wanted to confirm that and we need a result what are we going to display to the screen result will be an empty string for now first let's check to see if the Player's Choice is equal to the computer's choice that means it's a tie if Player's Choice is strictly equal to the computer's Choice maybe we both pick rock well then we'll take our result to be displayed and set it equal to be it's a tie else somebody is going to win let's add an else statement we can use a switch which we can examine a value against matching cases we'll examine the Player's Choice does the Player's Choice match the case of rock do these two values match if so we'll use the tary operator we'll check the condition of if our computer's choice is strictly equal to scissors if so question mark That's the trary operator if we pick Rock and the computer pick scissors we will return you win otherwise if this condition is false well that means the computer picked paper if our choices already don't match and we picked rock that means they either picked scissors or paper if they didn't pick scissors that means they picked paper so they win that means we lose you lose whatever string is returned we're going to assign it to result result equals whatever is returned either you win or you lose then we should add a break after this case all right let's copy this case and everything within it let's paste it if the Player's Choice matches the case of paper and the computer's choice is strictly equal to R that means if that's true you win else you lose let's copy this case and everything within it case scissors if the computer's Choice equals paper then you win otherwise you lose after we move beyond the IFL statements we need to update the text on the screen so we will take the players display set the text content to equal a template string of player colon space add a placeholder the Player's Choice did we pick rock paper or scissors then let's do this with the computer's Choice select the text content of the computer display the text will be computer computer we will display the variable of computer Choice the one that was picked randomly and take our result display which has no text content currently set it equal to be result okay let's see what we have currently let's pick Rock it's a tie paper you win scissors you lose what we'll work on next depending on the result that's displayed if we win I would like the text to be green if we lose I want the text to be red going to our CSS stylesheet we're going to add three classes green text red text pick a font color pick something green and for the red text pick a red font color if we win or lose we're going to add one of these classes to the class list of our result display so going back to our Javascript file after we display the result now we're going to add a switch we're going to examine our result we will add a case of you win if our value matches this case let's take our result display access the class list use the add method add the class of green text then break let's copy this case paste it we will add a case for you lose add the class of red text if we lose let's see what we have currently if we win you get green text if you lose you get red text but now if it's a tie we have red text with each new game we should reset the color back to the original so before updating the color and displaying it let's take our result display access the class list use the remove method remove any class of green test text and red text let's see if this works you lose it's a tie that's black you lose you win the color seem to be working all right now let's add a scoring mechanism we'll have to head back to our HTML file after our result display we're going to create a Dev element the First Development will have a class of score display the text for the score display will be player score colon space then we'll add a span element within with text of zero I will give the span element a unique ID of player score display the reason I'm putting this number within a span element I'm going to style this number different from the rest of the div element the player score okay let's copy this development and paste it we need another for computer computer score the ID of the span element will be computer score display going back to our CSS stylesheet We'll add the following after our result display we will select the class of score display increase the font size font size will be 2 RM for the actual numbers I'm going to change the color with the CSS property where the font color is green I'll add an additional selector let's select the ID of player score display I would also like that to be that shade of green and for the red text let's select the ID of computer score display so the computer score that number will be red okay now we just need to add functionality to the scoring mechanism so back to the top we're going to select the ID of player score display const player score display equals document. getet element by ID player score display and we need the same thing for the computer computer score display and we need a score value a number so we can work with it let player score equal Z let computer score equal 0 going to the bottom of this function within our switch within our case of U win we're going to increment our player score player score Plus+ then take our player score display and update it access the text content set it equal to whatever the player score is then let's do this with our computer computer score Plus+ that's if we lose and computer score display equals the computer score and that should be everything thing let's see if this program works you lose you win you win it's a tie you win you win you lose the player score is four the computer score is two all right everybody so that is a game of rock paper scissors you can make using JavaScript
