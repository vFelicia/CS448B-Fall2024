With timestamps:

00:00 - hey what's going on people it's bro hope
00:02 - you're doing well and in this video i'm
00:03 - going to explain how
00:04 - stages work in java fx so sit back
00:08 - relax and enjoy the show
00:12 - if you wouldn't mind please like comment
00:14 - and subscribe one like
00:16 - equals one prayer for the youtube
00:18 - algorithm
00:19 - welcome one and all in this video we're
00:22 - going to be focusing
00:23 - on stages when i mean stage i'm
00:25 - referring to the stage of a theater or
00:27 - play in that context it's like the stage
00:30 - you performed on during your school's
00:31 - talent show your junior year and you
00:33 - embarrassed yourself in front of the
00:34 - entire school
00:35 - good times a stage is a top level
00:37 - container to hold our
00:38 - fx gui applications it's similar to a
00:41 - jframe and swing
00:42 - in layman's terms it's basically our
00:45 - window so to speak
00:46 - so in this video we'll be customizing
00:48 - our stage in fx
00:50 - let's begin by creating a new fx project
00:52 - if you need to set up your ide to
00:54 - accommodate fx
00:55 - please watch the previous videos in the
00:57 - series let's create a new project i'm
00:59 - using the eclipse ide
01:01 - if you're using intellij idea you'll
01:03 - have a different process but i covered
01:04 - these processes
01:05 - in the previous videos so let's go to
01:08 - file new
01:09 - project javafx project call this project
01:12 - whatever you want i'll call this hellofx
01:15 - finish then if i were to open this
01:17 - project
01:18 - a lot of these objects are not
01:19 - recognized so we just need to make sure
01:21 - that we add our fx library to do that
01:23 - right click on your project folder go to
01:25 - build path
01:26 - add libraries user library next
01:29 - javafx and finish and then we'll just
01:32 - want to be sure that we have our vm
01:34 - arguments or options if you're using
01:36 - intellij setup
01:38 - so right click on your project folder go
01:40 - to run as run configurations
01:42 - arguments and then make sure you have
01:44 - your vm arguments set up
01:45 - and then you can run if you want to now
01:48 - this this
01:49 - is our fx gui it's composed of different
01:51 - layers
01:52 - a stage a scene a scene graph
01:56 - and various nodes it's like a gooey
01:58 - sandwich made of different layers
02:00 - let's break it all down layer by layer
02:02 - let's begin with the stage
02:04 - the stage is a top level container think
02:07 - of it as
02:08 - a window the window for your application
02:10 - it's very similar to
02:11 - a j frame in swing our next layer
02:14 - is a scene we add a scene to the stage
02:18 - and a scene is a drawing surface for
02:20 - graphical content similar to a
02:22 - jpanel in swing next we have a scene
02:26 - graph
02:27 - this is a hierarchical tree of nodes
02:30 - it's a tree data structure to hold and
02:32 - arrange what are called
02:34 - nodes and nodes are all the different
02:36 - components that we add
02:37 - to a scene these can be buttons text
02:40 - boxes
02:41 - images and they are arranged in a tree a
02:44 - hierarchical tree beginning with a root
02:47 - node
02:48 - there's branch nodes and leaf nodes but
02:50 - we'll cover this in a future video
02:52 - you should just be aware that they're
02:54 - out here but we at least need a root
02:56 - node
02:56 - to create a scene and then we add a
02:59 - scene to the stage
03:00 - let's head back to our fx application
03:03 - currently
03:04 - a lot of the work is already done for us
03:06 - and that kind of defeats the purpose of
03:07 - learning how this works
03:09 - so for learning purposes let's delete
03:11 - all of this content within the main
03:13 - class
03:14 - except for the main method but we will
03:15 - clear the main method
03:17 - okay currently our main method extends
03:20 - the application class
03:21 - the application class is the parent
03:23 - class and our main class
03:25 - is the child class so the main class is
03:27 - going to inherit everything that the
03:29 - application class has
03:31 - so in order for this program to work
03:33 - since the application class
03:35 - is the parent class there is an abstract
03:37 - method that we need to inherit
03:40 - and to override so we can just add
03:42 - unimplemented methods
03:43 - so in order for this program to run our
03:46 - main class
03:47 - needs a start method and in order to
03:49 - call
03:50 - the start method it's actually done
03:52 - behind the scenes what we do
03:54 - is call the launch method first within
03:56 - our main method
03:57 - and when we call the main method when we
04:00 - begin this program
04:01 - we receive a string array of what we
04:04 - call arguments
04:05 - and we just need to send our launch
04:08 - method
04:08 - these arguments the launch method is a
04:11 - static method that belongs to the
04:13 - application class
04:15 - and since our main class is a child
04:17 - class of the application class
04:19 - we inherit this method and since this is
04:22 - a static method
04:23 - you could write it as it is currently or
04:25 - you can write it as
04:27 - launch as well but let's just keep it as
04:29 - we have before so
04:31 - the launch method is a static method
04:33 - that we inherit
04:34 - from the application parent class and
04:36 - when you call the launch method we will
04:38 - send
04:39 - our string array of arguments to the
04:41 - launch method
04:42 - and eventually behind the scenes our
04:45 - start method will automatically
04:47 - be called the first thing that we're
04:48 - going to do is to create a stage and
04:50 - when we call the start method
04:52 - we actually receive a stage already with
04:55 - what we had previously before i deleted
04:57 - everything
04:58 - this was called primary stage you can
05:00 - either use this
05:01 - you can name it whatever you want to or
05:03 - we can create our own stage
05:05 - so if you need to create another stage
05:07 - just follow these steps
05:09 - stage come up with a name for the stage
05:11 - i'll call it stage
05:13 - equals new stage
05:16 - all right but since we already have a
05:18 - stage i'm just going to use that
05:20 - and i will rename this as stage to keep
05:22 - things simple so we currently have a
05:24 - stage but if i were to run this
05:27 - we can't actually see the stage so at
05:30 - the end
05:30 - of the start method we're going to use
05:32 - stage
05:33 - dot show to show the stage so you want
05:37 - to be sure to keep
05:38 - this at the end of the start method so
05:41 - now if i were to run this we can
05:42 - actually
05:43 - see the stage but we'll probably want to
05:45 - customize this you can see that it's
05:47 - kind of funky with the colors right now
05:49 - so that's because we need to add a scene
05:51 - to the stage that's the next layer
05:53 - let's add a scene scene and we'll call
05:56 - the scene
05:57 - equals new scene
06:00 - and in order to construct a scene we
06:02 - need to add at least
06:03 - a root node we'll pass in a root node as
06:06 - an argument to the constructor of the
06:08 - scene class
06:09 - but there are various different types of
06:11 - root nodes think of them
06:13 - like layout managers they will dictate
06:16 - how our nodes
06:17 - are components whether they're images
06:20 - text boxes buttons
06:21 - are arranged within a scene but each
06:23 - different type of root node would take
06:25 - me an entire video on
06:27 - explaining how they work and how they
06:28 - arrange the nodes so let's create a
06:30 - very basic type of root node called a
06:33 - group
06:34 - think of it as a grouping of nodes and
06:37 - what people usually do for the root node
06:39 - they will just call this root
06:40 - group root equals new group
06:44 - and we'll need to import something so
06:46 - make sure you're importing the correct
06:48 - import from javafx dot scene these other
06:51 - ones will probably not work
06:53 - so once you have that import we can add
06:55 - the root node
06:56 - to the scene and then we'll add the
06:58 - scene to the stage
06:59 - so at the end before we show the stage
07:02 - we will
07:03 - set the scene stage dot
07:06 - set scene and we will pass in our scene
07:10 - so in summary what we're doing is
07:12 - creating a root node
07:13 - to arrange all of the different nodes
07:15 - that we have are components
07:17 - adding the root node to the scene adding
07:19 - the scene
07:20 - to the stage and then at the end we'll
07:22 - show the stage kind of like it's a play
07:24 - you gotta set the scene
07:25 - before you present the stage this time
07:28 - if i were to run this application
07:31 - with our window our stage that we have
07:33 - we now have a scene added to the stage
07:36 - and do you remember before how we had
07:38 - just a stage while the background on the
07:40 - stage was kind of funky it was
07:41 - white and black and that would change as
07:43 - we resized
07:44 - our stage that we have well now we have
07:46 - a scene added to the stage
07:48 - and our scene is going to resize
07:50 - automatically when we resize
07:52 - the stage and we can change the
07:54 - appearance of our stage and
07:56 - scene as well so let's set the
07:58 - background color of our scene
08:00 - we can pass in a color to the
08:01 - constructor of our scene when we create
08:04 - one
08:04 - so let's say color dot and pick a color
08:07 - may be black
08:08 - so you'll probably need this import as
08:10 - well make sure you get the right one
08:12 - because if you get the wrong import then
08:13 - this will probably not work
08:15 - so now the background of my scene will
08:18 - be black
08:19 - and then you can resize this as well and
08:21 - the scene will adjust accordingly to the
08:23 - size of the stage
08:24 - let's set a title for the stage stage
08:27 - dot
08:27 - set title and we can pass in a string
08:30 - for what we want the title to be
08:32 - stage demo program
08:38 - all right so now with our stage we
08:41 - should now have a title at the top
08:43 - stage demo program let's change the icon
08:46 - in the top left corner of my stage
08:49 - currently it's some sort of lame box so
08:51 - let's change that
08:52 - so i would like to change that icon to
08:54 - the logo of my channel
08:56 - so what i'm going to do is copy my file
08:58 - then go to my
09:00 - source folder and then paste it so
09:03 - with fx fx will begin looking for any
09:06 - images within your source folder
09:08 - with swing it was your project folder so
09:10 - when you paste it make sure it's within
09:12 - your source folder
09:13 - and then i need to make an image out of
09:16 - my file that i have
09:17 - so what i'm going to do is type image
09:21 - and maybe i'll call this icon
09:24 - image icon equals new
09:27 - image and then i'm going to list my
09:30 - file name and or the file path if it's
09:33 - someplace else
09:34 - since this is within my source folder i
09:36 - only need to list the file name
09:38 - and this is icon.png now this is
09:42 - probably going to be something different
09:43 - for you depending on what you named your
09:45 - file
09:45 - and then make sure you get the right
09:46 - import you're looking for import image
09:49 - javafx dot scene dot image
09:52 - and then we can add this icon to my
09:55 - stage that i have
09:56 - so that'll be the next line stage
10:00 - dot get icons
10:04 - follow this with dot add
10:09 - icon and
10:12 - let's give it a try
10:16 - there we go the image that i have is now
10:18 - the icon
10:19 - of my stage and if you have a menu bar
10:21 - at the bottom
10:22 - this will probably change that to you
10:24 - here's a few other useful methods
10:26 - one we can set the width and the height
10:28 - of our stage stage
10:29 - dot set width and pick whatever width
10:33 - you want maybe
10:34 - 420 because 420 is a funny number and
10:36 - i'll set the height to
10:37 - the same number set
10:41 - height and this should change the size
10:44 - of our stage however this is still
10:47 - resizable you can disable that if you
10:49 - need to
10:50 - stage dot set resizable
10:54 - and we will pass in false therefore
10:57 - we should no longer be able to resize
11:00 - this stage you can see that i'm trying
11:01 - but i really can't
11:03 - we can set the x position and y position
11:05 - of where our stage will appear within
11:07 - our computer screen
11:08 - we have to use set x and set y normally
11:11 - with fx fx will place your stage in the
11:14 - middle of your computer screen which is
11:16 - convenient
11:17 - swing doesn't normally do that and let's
11:19 - say stage dot set
11:21 - y and we'll set this to 50. so my stage
11:24 - is now going to appear
11:25 - in the top left corner of my computer
11:27 - screen while approximately
11:30 - and my stage now appears in the top left
11:33 - corner
11:34 - so let me disable that for now and turn
11:36 - those lines into comments
11:38 - oh you guys are going to like this next
11:39 - one we can set our stage to be full
11:41 - screen
11:42 - using the set full screen method and we
11:45 - just need to pass
11:46 - in true so when you run this application
11:49 - your stage is now going to be full
11:52 - screen and if you need to escape
11:53 - just press escape to exit full screen
11:56 - mode and then if you need to change
11:58 - the exit hint as well as the exit key
12:00 - combination
12:01 - normally by default it is escape you can
12:03 - change that if you need to
12:05 - let's begin by changing the exit screen
12:08 - hint so stage dot set
12:11 - full screen exit hint so
12:14 - what we want this to display you
12:18 - can't escape
12:21 - unless you press q
12:25 - and let's change the exit key
12:27 - combination as well
12:29 - stage dot set full screen
12:32 - exit key combination and then
12:36 - as an argument we need to pass in key
12:39 - combination dot value
12:43 - of and let's say q
12:48 - lowercase q all right let's test this
12:53 - you can't escape unless you press q i'm
12:56 - going to press q
12:57 - to escape all right everybody so that's
13:00 - the basics
13:01 - of stages in javafx if you would like a
13:04 - copy of all this
13:05 - i will post all of this in the comments
13:07 - down below and pin it to the top
13:09 - but yeah that's how stages work in
13:12 - javafx
13:14 - hey you yeah i'm talking to you if you
13:16 - learned something new
13:17 - then help me help you in three easy
13:20 - steps
13:20 - by smashing that like button drop a
13:22 - comment down below
13:23 - and subscribe if you'd like to become a
13:25 - fellow bro
13:34 - [Music]
13:47 - foreign

Cleaned transcript:

hey what's going on people it's bro hope you're doing well and in this video i'm going to explain how stages work in java fx so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm welcome one and all in this video we're going to be focusing on stages when i mean stage i'm referring to the stage of a theater or play in that context it's like the stage you performed on during your school's talent show your junior year and you embarrassed yourself in front of the entire school good times a stage is a top level container to hold our fx gui applications it's similar to a jframe and swing in layman's terms it's basically our window so to speak so in this video we'll be customizing our stage in fx let's begin by creating a new fx project if you need to set up your ide to accommodate fx please watch the previous videos in the series let's create a new project i'm using the eclipse ide if you're using intellij idea you'll have a different process but i covered these processes in the previous videos so let's go to file new project javafx project call this project whatever you want i'll call this hellofx finish then if i were to open this project a lot of these objects are not recognized so we just need to make sure that we add our fx library to do that right click on your project folder go to build path add libraries user library next javafx and finish and then we'll just want to be sure that we have our vm arguments or options if you're using intellij setup so right click on your project folder go to run as run configurations arguments and then make sure you have your vm arguments set up and then you can run if you want to now this this is our fx gui it's composed of different layers a stage a scene a scene graph and various nodes it's like a gooey sandwich made of different layers let's break it all down layer by layer let's begin with the stage the stage is a top level container think of it as a window the window for your application it's very similar to a j frame in swing our next layer is a scene we add a scene to the stage and a scene is a drawing surface for graphical content similar to a jpanel in swing next we have a scene graph this is a hierarchical tree of nodes it's a tree data structure to hold and arrange what are called nodes and nodes are all the different components that we add to a scene these can be buttons text boxes images and they are arranged in a tree a hierarchical tree beginning with a root node there's branch nodes and leaf nodes but we'll cover this in a future video you should just be aware that they're out here but we at least need a root node to create a scene and then we add a scene to the stage let's head back to our fx application currently a lot of the work is already done for us and that kind of defeats the purpose of learning how this works so for learning purposes let's delete all of this content within the main class except for the main method but we will clear the main method okay currently our main method extends the application class the application class is the parent class and our main class is the child class so the main class is going to inherit everything that the application class has so in order for this program to work since the application class is the parent class there is an abstract method that we need to inherit and to override so we can just add unimplemented methods so in order for this program to run our main class needs a start method and in order to call the start method it's actually done behind the scenes what we do is call the launch method first within our main method and when we call the main method when we begin this program we receive a string array of what we call arguments and we just need to send our launch method these arguments the launch method is a static method that belongs to the application class and since our main class is a child class of the application class we inherit this method and since this is a static method you could write it as it is currently or you can write it as launch as well but let's just keep it as we have before so the launch method is a static method that we inherit from the application parent class and when you call the launch method we will send our string array of arguments to the launch method and eventually behind the scenes our start method will automatically be called the first thing that we're going to do is to create a stage and when we call the start method we actually receive a stage already with what we had previously before i deleted everything this was called primary stage you can either use this you can name it whatever you want to or we can create our own stage so if you need to create another stage just follow these steps stage come up with a name for the stage i'll call it stage equals new stage all right but since we already have a stage i'm just going to use that and i will rename this as stage to keep things simple so we currently have a stage but if i were to run this we can't actually see the stage so at the end of the start method we're going to use stage dot show to show the stage so you want to be sure to keep this at the end of the start method so now if i were to run this we can actually see the stage but we'll probably want to customize this you can see that it's kind of funky with the colors right now so that's because we need to add a scene to the stage that's the next layer let's add a scene scene and we'll call the scene equals new scene and in order to construct a scene we need to add at least a root node we'll pass in a root node as an argument to the constructor of the scene class but there are various different types of root nodes think of them like layout managers they will dictate how our nodes are components whether they're images text boxes buttons are arranged within a scene but each different type of root node would take me an entire video on explaining how they work and how they arrange the nodes so let's create a very basic type of root node called a group think of it as a grouping of nodes and what people usually do for the root node they will just call this root group root equals new group and we'll need to import something so make sure you're importing the correct import from javafx dot scene these other ones will probably not work so once you have that import we can add the root node to the scene and then we'll add the scene to the stage so at the end before we show the stage we will set the scene stage dot set scene and we will pass in our scene so in summary what we're doing is creating a root node to arrange all of the different nodes that we have are components adding the root node to the scene adding the scene to the stage and then at the end we'll show the stage kind of like it's a play you gotta set the scene before you present the stage this time if i were to run this application with our window our stage that we have we now have a scene added to the stage and do you remember before how we had just a stage while the background on the stage was kind of funky it was white and black and that would change as we resized our stage that we have well now we have a scene added to the stage and our scene is going to resize automatically when we resize the stage and we can change the appearance of our stage and scene as well so let's set the background color of our scene we can pass in a color to the constructor of our scene when we create one so let's say color dot and pick a color may be black so you'll probably need this import as well make sure you get the right one because if you get the wrong import then this will probably not work so now the background of my scene will be black and then you can resize this as well and the scene will adjust accordingly to the size of the stage let's set a title for the stage stage dot set title and we can pass in a string for what we want the title to be stage demo program all right so now with our stage we should now have a title at the top stage demo program let's change the icon in the top left corner of my stage currently it's some sort of lame box so let's change that so i would like to change that icon to the logo of my channel so what i'm going to do is copy my file then go to my source folder and then paste it so with fx fx will begin looking for any images within your source folder with swing it was your project folder so when you paste it make sure it's within your source folder and then i need to make an image out of my file that i have so what i'm going to do is type image and maybe i'll call this icon image icon equals new image and then i'm going to list my file name and or the file path if it's someplace else since this is within my source folder i only need to list the file name and this is icon.png now this is probably going to be something different for you depending on what you named your file and then make sure you get the right import you're looking for import image javafx dot scene dot image and then we can add this icon to my stage that i have so that'll be the next line stage dot get icons follow this with dot add icon and let's give it a try there we go the image that i have is now the icon of my stage and if you have a menu bar at the bottom this will probably change that to you here's a few other useful methods one we can set the width and the height of our stage stage dot set width and pick whatever width you want maybe 420 because 420 is a funny number and i'll set the height to the same number set height and this should change the size of our stage however this is still resizable you can disable that if you need to stage dot set resizable and we will pass in false therefore we should no longer be able to resize this stage you can see that i'm trying but i really can't we can set the x position and y position of where our stage will appear within our computer screen we have to use set x and set y normally with fx fx will place your stage in the middle of your computer screen which is convenient swing doesn't normally do that and let's say stage dot set y and we'll set this to 50. so my stage is now going to appear in the top left corner of my computer screen while approximately and my stage now appears in the top left corner so let me disable that for now and turn those lines into comments oh you guys are going to like this next one we can set our stage to be full screen using the set full screen method and we just need to pass in true so when you run this application your stage is now going to be full screen and if you need to escape just press escape to exit full screen mode and then if you need to change the exit hint as well as the exit key combination normally by default it is escape you can change that if you need to let's begin by changing the exit screen hint so stage dot set full screen exit hint so what we want this to display you can't escape unless you press q and let's change the exit key combination as well stage dot set full screen exit key combination and then as an argument we need to pass in key combination dot value of and let's say q lowercase q all right let's test this you can't escape unless you press q i'm going to press q to escape all right everybody so that's the basics of stages in javafx if you would like a copy of all this i will post all of this in the comments down below and pin it to the top but yeah that's how stages work in javafx hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro foreign
