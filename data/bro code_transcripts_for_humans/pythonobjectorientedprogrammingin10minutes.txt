With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to explain
00:05 - object oriented programming in python so
00:07 - sit back relax and enjoy the show
00:12 - if i could have just a moment of your
00:14 - time please like comment
00:16 - and subscribe i would greatly appreciate
00:18 - it
00:20 - welcome to today's topic on python
00:23 - object-oriented programming
00:24 - also known as p-o-o-p and in today's
00:27 - video we're going to be creating objects
00:29 - an object is an instance of a class by
00:32 - using programming we can create
00:33 - representations of real-life objects so
00:36 - look around you wherever you're sitting
00:38 - or standing right now you are surrounded
00:40 - by objects
00:41 - next to me i have a phone a television
00:44 - some snacks
00:45 - and i'm talking into a microphone point
00:47 - being we can use programming to mimic
00:49 - real world objects by assigning a
00:51 - combination of
00:52 - attributes what an object is or has
00:55 - and methods what an object can do now in
00:58 - order to create an object we'll need to
01:00 - create a class
01:01 - a class can function as a blueprint that
01:03 - will describe what attributes and
01:05 - methods
01:05 - that our distinct type of object will
01:07 - have you can either create your class
01:09 - within your main module
01:11 - or you could create a separate file
01:12 - dedicated solely for your class
01:14 - now to create a class we would type
01:16 - class and then the name of the object
01:18 - that we would like to create so today i
01:20 - would like to create some car objects
01:22 - because i like cars
01:23 - so we would type car and a common naming
01:26 - convention
01:26 - with class names is that they should be
01:28 - capital so car is going to have a
01:30 - capital c
01:31 - and for the time being we need to type
01:33 - in something i'll just type in pass as a
01:35 - placeholder
01:36 - so if you have a small program it may be
01:38 - better to write your class within your
01:40 - main
01:40 - module but if your class is fairly large
01:43 - you may want to consider placing your
01:45 - class within a separate module
01:47 - so if you were to take that route we
01:49 - would go to file
01:50 - new python file and we would name this
01:53 - car
01:54 - click python file and we would declare
01:56 - our class within the separate module
01:58 - so class car and for now i'll type in
02:01 - pass
02:02 - then we just need to import this class
02:04 - so within our main module we would type
02:06 - from the name of the module import the
02:08 - name of the class
02:09 - from car import car now objects can have
02:12 - some combination
02:13 - of attributes and methods attributes
02:15 - describe what an object
02:17 - is or has so what are a few attributes
02:19 - that cars might have
02:20 - they might have a make so let's create a
02:23 - few variables
02:24 - for the time being i'm just going to use
02:25 - none as a placeholder
02:27 - cars can have a model a year
02:32 - and a color
02:35 - now objects can also have methods what
02:38 - kinds of methods could cars perform
02:39 - perhaps a drive method and a stop method
02:42 - so let's define those
02:43 - def let's say drive and we'll have one
02:46 - argument
02:47 - self self refers to the object that is
02:50 - using this method
02:51 - now what do we want to do when we call
02:53 - this method
02:54 - let's say this car
02:57 - is driving let's create a stop method as
03:00 - well
03:01 - tef stop
03:04 - and we will print this
03:08 - car is stopped we now have all of the
03:11 - different attributes and methods we
03:13 - would like our car objects to have but
03:14 - there is one more thing that we need it
03:16 - is a special method called the init
03:18 - method that will construct
03:20 - objects for us in other programming
03:22 - languages this is known as the
03:23 - constructor
03:24 - so we need a special method that will
03:26 - create objects for us
03:27 - so we need to define this method def and
03:30 - the syntax on this
03:31 - is somewhat strange it is two
03:33 - underscores i n i t
03:34 - it's short for initialize 200 scores
03:37 - again and then we need at least
03:38 - self as an argument and then we can
03:40 - actually assign
03:42 - our car objects unique variables so
03:45 - take all of these attributes that we
03:47 - have and we're going to place them
03:48 - within this init method
03:50 - now we can receive arguments when we
03:52 - create car
03:53 - objects but we need to pass them in as
03:56 - arguments
03:56 - to our init method so we need to set up
03:58 - some parameters
04:00 - let's say in order to create a car
04:01 - object we need a make
04:04 - a model a year and a color
04:07 - then when we receive these arguments we
04:09 - can actually assign them to
04:10 - each car's specific attributes but we
04:13 - need to precede each of these with self
04:15 - self is referring to the object that
04:17 - we're currently working on or creating
04:19 - so self.make self.model
04:22 - self.ear and self.color
04:26 - and then when we assign these we're
04:28 - going to say self.make
04:30 - equals whatever make that we receive
04:32 - when it's passed in as an argument
04:34 - self.model equals model and continue
04:37 - that pattern for year
04:38 - and color all right that is all we need
04:42 - for our class car we have a constructor
04:44 - we're assigning
04:45 - arguments that we receive to the
04:47 - attributes of our car
04:48 - object and we also have two methods one
04:52 - for drive and one for stop
04:53 - now we can start creating some car
04:54 - objects so going back to my main file
04:57 - here
04:57 - to create an object we need a unique
04:59 - name for it let's call this
05:01 - first car just car one equals
05:04 - the name of the class car then a set of
05:06 - parentheses
05:07 - now in order to construct a car object
05:10 - we need to pass in a matching
05:11 - set of arguments you can see here that
05:13 - we need to pass in a make a model a year
05:15 - and a color
05:16 - so what kind of car should we make let's
05:18 - say that the make is going to be
05:21 - chevy we need a model
05:24 - perhaps corvette a
05:28 - year 2021 is good and a color let's say
05:31 - blue
05:32 - all right now let's actually access some
05:35 - of these cars attributes
05:36 - and i should probably put this one in a
05:38 - print statement so print car ones
05:41 - make and this should print chevy
05:44 - then we can do the same thing for model
05:47 - year and color
05:48 - so let's change some of these around
05:50 - model
05:52 - year and color
05:57 - yep this object is a chevy corvette 2021
06:00 - and the color is blue
06:01 - and we should have two methods as well
06:03 - so car one i would like this car to use
06:05 - its drive method
06:07 - this car is driving and let's have this
06:10 - car use its stop method
06:11 - car one dot stop
06:16 - this car is stopped there's one thing
06:18 - that i should mention real quick because
06:20 - i forgot to mention it earlier so within
06:22 - our init method you can see that we need
06:24 - five arguments in order to construct a
06:26 - car object
06:27 - self make model year in color but when
06:30 - we pass in our arguments
06:32 - we're not passing in anything for self
06:34 - we only have four arguments here
06:36 - that's because with python we do not
06:38 - need to pass itself
06:40 - that's done automatically for us we're
06:42 - referring to the object that we're
06:44 - dealing with
06:44 - as you can see with our drive and stop
06:46 - method we need to pass
06:48 - in self in order to execute our method
06:51 - but when we call this method we do not
06:53 - need to do so so just remember with
06:55 - python with self we do not need to pass
06:57 - in anything for this argument
06:59 - that is all now the nice thing about
07:01 - this is that we can reuse
07:03 - this class as a blueprint to create more
07:05 - car objects we just call
07:06 - that init method that constructor so
07:08 - this time let's create a second car
07:10 - called
07:10 - car 2 and this will be a different kind
07:13 - of car
07:14 - what kinds of arguments should we pass
07:16 - it let's say this is a
07:18 - ford mustang
07:21 - the year will be 2022 and the color will
07:23 - be red
07:24 - all right let's check car to use
07:26 - attributes
07:29 - and let's have car 2 use its drive and
07:32 - stop method
07:34 - this is a forward mustang the year is
07:35 - 2022. the color is red this car is
07:37 - driving and
07:38 - this car is stopped one other thing that
07:40 - we can do too is that
07:42 - within our methods here let's replace
07:44 - car with the name of the model that
07:46 - we're working with
07:47 - so this plus
07:50 - self dot model plus
07:53 - is driving now this self keyword think
07:56 - of it as
07:57 - you're replacing self with the name of
08:00 - the object that we're working on
08:02 - if car one is using its drive method
08:05 - replace itself with car one
08:07 - if this is car two that called this
08:08 - method then replace itself with
08:10 - car 2. think of it that way and let's do
08:13 - the same thing for stop
08:16 - this plus self dot model
08:20 - plus is stopped all right probably don't
08:23 - need these anymore
08:24 - so let's have car one use its drive and
08:27 - stop method
08:28 - this corvette is driving this corvette
08:30 - is stopped let's try this with car two
08:34 - this mustang is driving this mustang is
08:36 - stopped now you can have them
08:38 - do things independently too let's have
08:39 - car 1 use its drive method and car 2 use
08:42 - the stop method
08:43 - this corvette is driving and this
08:45 - mustang has stopped in conclusion
08:47 - a class can function as a blueprint to
08:50 - create objects
08:51 - we can assign attributes what describe
08:53 - an object
08:54 - is or has and methods what each object
08:57 - can do and then within our class we have
09:00 - a special method called the init method
09:02 - we can pass in some arguments and assign
09:05 - these arguments
09:06 - to each object's attributes and then we
09:09 - can reuse
09:10 - this class as if it was a blueprint so
09:12 - we can create
09:13 - more objects out of it so that is the
09:15 - basics of object-oriented programming in
09:18 - python
09:18 - if you would like a copy of all this
09:20 - code i will post this in the comment
09:22 - section down below
09:23 - but yeah that's the basics of object
09:25 - oriented programming
09:26 - in python hey you
09:30 - yeah i'm talking to you if you learned
09:32 - something new then help me
09:33 - help you in three easy steps by smashing
09:36 - that like button
09:37 - drop a comment down below and subscribe
09:39 - if you'd like to become a fellow bro
09:50 - [Music]
10:03 - you

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to explain object oriented programming in python so sit back relax and enjoy the show if i could have just a moment of your time please like comment and subscribe i would greatly appreciate it welcome to today's topic on python objectoriented programming also known as poop and in today's video we're going to be creating objects an object is an instance of a class by using programming we can create representations of reallife objects so look around you wherever you're sitting or standing right now you are surrounded by objects next to me i have a phone a television some snacks and i'm talking into a microphone point being we can use programming to mimic real world objects by assigning a combination of attributes what an object is or has and methods what an object can do now in order to create an object we'll need to create a class a class can function as a blueprint that will describe what attributes and methods that our distinct type of object will have you can either create your class within your main module or you could create a separate file dedicated solely for your class now to create a class we would type class and then the name of the object that we would like to create so today i would like to create some car objects because i like cars so we would type car and a common naming convention with class names is that they should be capital so car is going to have a capital c and for the time being we need to type in something i'll just type in pass as a placeholder so if you have a small program it may be better to write your class within your main module but if your class is fairly large you may want to consider placing your class within a separate module so if you were to take that route we would go to file new python file and we would name this car click python file and we would declare our class within the separate module so class car and for now i'll type in pass then we just need to import this class so within our main module we would type from the name of the module import the name of the class from car import car now objects can have some combination of attributes and methods attributes describe what an object is or has so what are a few attributes that cars might have they might have a make so let's create a few variables for the time being i'm just going to use none as a placeholder cars can have a model a year and a color now objects can also have methods what kinds of methods could cars perform perhaps a drive method and a stop method so let's define those def let's say drive and we'll have one argument self self refers to the object that is using this method now what do we want to do when we call this method let's say this car is driving let's create a stop method as well tef stop and we will print this car is stopped we now have all of the different attributes and methods we would like our car objects to have but there is one more thing that we need it is a special method called the init method that will construct objects for us in other programming languages this is known as the constructor so we need a special method that will create objects for us so we need to define this method def and the syntax on this is somewhat strange it is two underscores i n i t it's short for initialize 200 scores again and then we need at least self as an argument and then we can actually assign our car objects unique variables so take all of these attributes that we have and we're going to place them within this init method now we can receive arguments when we create car objects but we need to pass them in as arguments to our init method so we need to set up some parameters let's say in order to create a car object we need a make a model a year and a color then when we receive these arguments we can actually assign them to each car's specific attributes but we need to precede each of these with self self is referring to the object that we're currently working on or creating so self.make self.model self.ear and self.color and then when we assign these we're going to say self.make equals whatever make that we receive when it's passed in as an argument self.model equals model and continue that pattern for year and color all right that is all we need for our class car we have a constructor we're assigning arguments that we receive to the attributes of our car object and we also have two methods one for drive and one for stop now we can start creating some car objects so going back to my main file here to create an object we need a unique name for it let's call this first car just car one equals the name of the class car then a set of parentheses now in order to construct a car object we need to pass in a matching set of arguments you can see here that we need to pass in a make a model a year and a color so what kind of car should we make let's say that the make is going to be chevy we need a model perhaps corvette a year 2021 is good and a color let's say blue all right now let's actually access some of these cars attributes and i should probably put this one in a print statement so print car ones make and this should print chevy then we can do the same thing for model year and color so let's change some of these around model year and color yep this object is a chevy corvette 2021 and the color is blue and we should have two methods as well so car one i would like this car to use its drive method this car is driving and let's have this car use its stop method car one dot stop this car is stopped there's one thing that i should mention real quick because i forgot to mention it earlier so within our init method you can see that we need five arguments in order to construct a car object self make model year in color but when we pass in our arguments we're not passing in anything for self we only have four arguments here that's because with python we do not need to pass itself that's done automatically for us we're referring to the object that we're dealing with as you can see with our drive and stop method we need to pass in self in order to execute our method but when we call this method we do not need to do so so just remember with python with self we do not need to pass in anything for this argument that is all now the nice thing about this is that we can reuse this class as a blueprint to create more car objects we just call that init method that constructor so this time let's create a second car called car 2 and this will be a different kind of car what kinds of arguments should we pass it let's say this is a ford mustang the year will be 2022 and the color will be red all right let's check car to use attributes and let's have car 2 use its drive and stop method this is a forward mustang the year is 2022. the color is red this car is driving and this car is stopped one other thing that we can do too is that within our methods here let's replace car with the name of the model that we're working with so this plus self dot model plus is driving now this self keyword think of it as you're replacing self with the name of the object that we're working on if car one is using its drive method replace itself with car one if this is car two that called this method then replace itself with car 2. think of it that way and let's do the same thing for stop this plus self dot model plus is stopped all right probably don't need these anymore so let's have car one use its drive and stop method this corvette is driving this corvette is stopped let's try this with car two this mustang is driving this mustang is stopped now you can have them do things independently too let's have car 1 use its drive method and car 2 use the stop method this corvette is driving and this mustang has stopped in conclusion a class can function as a blueprint to create objects we can assign attributes what describe an object is or has and methods what each object can do and then within our class we have a special method called the init method we can pass in some arguments and assign these arguments to each object's attributes and then we can reuse this class as if it was a blueprint so we can create more objects out of it so that is the basics of objectoriented programming in python if you would like a copy of all this code i will post this in the comment section down below but yeah that's the basics of object oriented programming in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
