With timestamps:

00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm going to show you
00:04 - guys how we can build a basic quiz game
00:07 - in python
00:07 - so sit back relax and enjoy the show
00:13 - if you wouldn't mind please like comment
00:15 - and subscribe
00:16 - one like equals one prayer for the
00:18 - youtube algorithm
00:20 - to begin this project i think it would
00:22 - be wise for us to create a skeletal
00:24 - structure for how this program is going
00:25 - to operate
00:26 - and then we'll fill in the gaps later as
00:27 - we go along so to begin
00:29 - let's define all of the functions that
00:31 - we'll need we'll need four
00:33 - we'll create a function that is named
00:35 - new game whenever we call this function
00:37 - it will create a
00:38 - new quiz game for us and for the time
00:40 - being
00:41 - let's write pass just as a placeholder
00:43 - we'll have a total of four functions
00:45 - new game a function to check our answer
00:51 - a function to display our score
00:56 - and lastly a function to
00:59 - play again
01:05 - all right now i'm just going to add some
01:08 - comments here
01:09 - just to separate each of these functions
01:11 - that we have just so that it's a little
01:12 - bit easier to read
01:13 - although this part is not really
01:15 - necessary so i just want to separate
01:18 - each of these functions for some
01:19 - readability
01:22 - okay those are all the functions that
01:24 - we'll need what we'll need now
01:26 - is some sort of collection to hold all
01:28 - of the questions and answers that we
01:30 - have and i think
01:31 - a dictionary would be perfect for this
01:33 - so what i did is that i created a
01:35 - dictionary named questions
01:37 - a dictionary has key value pairs
01:40 - each key is a question that i would like
01:42 - to ask and each question has an
01:44 - associated value
01:45 - we'll have the user guess between
01:47 - answers of a b
01:49 - c or d so these would be all of the
01:51 - correct answers all of the values within
01:53 - this dictionary
01:54 - so here are some of the questions that i
01:55 - want to ask feel free to come up with
01:57 - your own questions
01:58 - if you would like you can copy the
02:00 - questions that i have they should be
02:01 - posted in the comment section down below
02:03 - so the questions that i'm going to ask
02:05 - are who created python
02:07 - what year was python created python is
02:10 - attributed to which comedy group
02:12 - and lastly is the earth round i couldn't
02:14 - think of a fourth question so i just
02:15 - threw in
02:16 - a random stupid question and the correct
02:18 - answers
02:19 - to all of these questions in order would
02:21 - be a
02:22 - b c and a but feel free to come up with
02:25 - your own
02:26 - well we have our questions but we'll
02:28 - need some sort of collection to hold all
02:30 - of the different possible answers
02:32 - to each of these questions and i think a
02:34 - 2d
02:35 - list would work perfect for this so i
02:37 - have a list
02:38 - of lists a list of tuples could work too
02:41 - i suppose
02:42 - so here are all of the answers for the
02:44 - first question
02:45 - and the correct answer is a i believe
02:48 - his name is
02:49 - guido van rossum hey if you're listening
02:51 - man i'm sorry if i'm mispronouncing your
02:53 - name i'm really trying here
02:54 - the second list corresponds to the
02:56 - second question
02:58 - what year was python created it was
03:00 - created in 1991
03:01 - at least according to wikipedia python
03:04 - is attributed to which comedy group
03:06 - the answer is c monty python like monty
03:09 - python and the holy grail
03:10 - good movie by the way and lastly is the
03:13 - earth round
03:14 - this is a highly debated topic but the
03:16 - answer is
03:17 - a the earth is in fact round so i have a
03:20 - list of lists each list corresponds to
03:23 - a key value pair within my dictionary of
03:26 - questions
03:27 - and this is a lot to type if you want
03:29 - you can just copy the code that i posted
03:31 - in the comments down below
03:32 - just copy and paste and you'll have all
03:34 - of this or if you want you can pause the
03:36 - video and type it i don't care
03:37 - so now that you have your questions and
03:39 - your options we're ready to begin
03:41 - so the first thing that we'll do within
03:42 - our program is to call the
03:44 - new game function to begin a new game so
03:47 - after
03:48 - we have our questions and options
03:49 - created let's create a
03:51 - new game by calling the new game
03:54 - function
03:55 - now when we run this program we'll
03:57 - generate our dictionary of questions
03:59 - and our 2d list of different options for
04:02 - each question
04:03 - and then we will call the new game
04:04 - function to begin a new game
04:06 - so let's head to the new game function
04:08 - and fill in everything within
04:10 - our new game function so at the top
04:12 - let's declare a few things
04:14 - let's say we have a list named guesses
04:17 - and guesses will be an empty list for
04:19 - now i will declare a variable called
04:22 - correct guesses set it equal to zero
04:25 - because we haven't guessed anything yet
04:28 - and we will set a current question
04:30 - number
04:31 - and set the sequel to one to represent
04:33 - the first question
04:35 - okay now we need to display all of the
04:38 - questions within
04:39 - our dictionary of questions and we can
04:42 - use a for loop for that
04:43 - so for key in
04:47 - questions i'm going to
04:50 - print my key
04:55 - and let's just test this okay yeah
04:58 - here's all my questions
05:00 - i think what i'll do is actually print
05:03 - something to separate each question
05:05 - let's say one of these lines i think it
05:09 - would look better with them
05:11 - okay i'll print this line and then we'll
05:13 - move on to a question
05:15 - all right now after re-running this we
05:17 - have each question and i added just a
05:19 - line break between each of these to make
05:21 - it look kind of fancy
05:22 - now i need to display all of the
05:24 - different options for each question
05:26 - and we can do that with a nested for
05:29 - loop
05:30 - so if i were to write 4i in
05:34 - options print i
05:37 - let me show you what happens now with
05:40 - the way this for loop is written now
05:42 - it's going to display
05:43 - all of the different options available
05:45 - to us for the entire quiz game
05:47 - what i would like instead is to display
05:50 - only the first
05:51 - list for the first question and then the
05:53 - second list
05:54 - for the second question and follow that
05:56 - pattern so we're going to change our for
05:58 - loop around
05:59 - 4i in options and we'll set an index
06:02 - for options the index is going to be our
06:05 - question number
06:06 - minus one now remember what i said in
06:09 - previous videos where different
06:11 - collections including lists tuples etc
06:14 - the first element in a collection has an
06:16 - index of zero because computers always
06:18 - start with zero
06:20 - then the next element would therefore
06:21 - have an index of one
06:23 - then two three then you follow that
06:25 - pattern we're using
06:26 - this question number variable as some
06:29 - sort of counter
06:30 - and since we initially set this to one
06:32 - i'm just going to subtract 1
06:34 - so that we effectively receive 0 as the
06:36 - index
06:37 - and now we just need to increment our
06:39 - question number
06:40 - after each iteration so let's do that
06:44 - i will add that to the end here after we
06:46 - finish
06:47 - displaying all of the options let's
06:49 - increment question
06:50 - number by one by typing question num
06:54 - plus equals one and if i were to run
06:56 - this currently
06:58 - we'll display all of the different
06:59 - options for each question
07:01 - who created python here's all of the
07:03 - associated options
07:05 - what year is python created python is
07:07 - attributed to which comedy group
07:09 - and lastly is the earth round now it's
07:12 - time for some user input
07:13 - so i'm going to create a variable called
07:16 - guess
07:17 - and make sure you don't put it within
07:19 - your inner for loop it should be within
07:21 - the outer for loop
07:23 - guess equals input and i'll create a
07:26 - prompt
07:28 - enter a b
07:31 - c or d
07:35 - here's something to consider we would
07:37 - like the user to type in either capital
07:39 - a
07:39 - b c or d with strings they're case
07:42 - sensitive what if the user typed in one
07:44 - of these letters but
07:45 - lowercase if they're correct we would
07:48 - still like to give them their point
07:49 - why don't we take our guess and make it
07:51 - uppercase
07:52 - so guess equals guess and we can make
07:55 - this uppercase
07:56 - using the upper method of strings at the
07:59 - end of this game i'm going to compare
08:01 - our guesses to the correct answers so we
08:04 - have an
08:05 - empty list named guesses and i'm going
08:07 - to append
08:08 - our current guests that we're working on
08:10 - to our list of guesses
08:12 - so guesses dot append
08:15 - and we will append our guess this round
08:19 - now that we have our guess and we've
08:21 - appended our guests to our list of
08:23 - guesses
08:24 - let's check to see if it's the correct
08:26 - answer or not so we're just about to
08:28 - fill in
08:28 - this check answer function next
08:32 - so we are going to call this function
08:34 - and pass in a few items as arguments
08:37 - so let's use the check answer function
08:42 - and we'll pass in the key for the
08:45 - current question that we're on
08:46 - so the key is the correct answer so that
08:49 - would be
08:50 - our questions dot
08:54 - get key
08:58 - this would be the answer and we'll also
09:00 - pass in
09:01 - our guess and we are going to fill in
09:05 - the check answer function but we need to
09:07 - set up the parameters
09:09 - we're receiving effectively our answer
09:12 - as well as our guess
09:15 - so i'm going to name these as answer and
09:18 - guess and we are going to check to see
09:21 - if our answer
09:22 - is equal to our guess if
09:26 - answer is equal to guess
09:31 - let's print something print
09:34 - correct
09:38 - and i think we should give the user a
09:39 - point we'll have our check
09:41 - answer function return one for one point
09:45 - return one else if this is not the
09:48 - correct answer
09:50 - let's print wrong
09:54 - and we will return zero they do not get
09:57 - a point
09:59 - and since this is returning a value we
10:01 - should assign that
10:02 - so let's assign the point we may or may
10:05 - not receive
10:06 - to our variable of correct guesses which
10:08 - is initially set to zero
10:10 - so we'll type correct guesses plus
10:13 - equals check answer and check answer
10:16 - will return
10:17 - one if we scored a point or zero if we
10:19 - did not score a point
10:20 - and make sure you have plus equals
10:22 - because if you just set this to equals
10:25 - then we cannot score more than one point
10:27 - it will either be
10:28 - zero or one so we are effectively
10:31 - incrementing
10:32 - our correct guesses by one for each
10:34 - point that we score
10:36 - and now we're going to work on the
10:38 - display score
10:39 - function and we'll call that at the end
10:41 - after we finish
10:42 - all of our questions that we have so
10:44 - make sure that you do not write this
10:45 - within the for loop it should be outside
10:48 - of it
10:48 - because once we finish iterating through
10:51 - all of our questions we're going to
10:52 - display
10:53 - a final score so let's call the display
10:57 - score function and we'll need to pass in
10:59 - some arguments
11:01 - our correct guesses as well
11:04 - as our list of guesses
11:08 - okay let's head to the display score
11:11 - function
11:12 - so we have as parameters
11:15 - correct guesses as well
11:18 - as guesses i need to remove this pass
11:23 - i'm going to add one of these fancy
11:25 - lines in just to separate the
11:27 - questions from the results and i will
11:29 - print
11:31 - results and maybe another one of these
11:36 - lines
11:37 - okay so i need to print all of the
11:40 - answers
11:43 - answers
11:46 - and i do not want to end on a new line
11:49 - so i'm going to set end
11:51 - equal to nothing and i need to display
11:55 - all of the values within our dictionary
11:58 - all of the answers
12:00 - i will do that using a for loop for
12:03 - i in questions
12:08 - print questions
12:12 - dot get i
12:16 - and i do not want to end on a new line
12:19 - so i'm going to set end equal to
12:21 - nothing effectively and then i'll print
12:23 - a new line
12:25 - okay let's work on the guesses i think
12:27 - i'm just going to copy all this
12:28 - and make some changes i'll replace
12:31 - answers
12:32 - with guesses for
12:35 - i in guesses
12:39 - print i
12:42 - okay let's just be sure that
12:44 - everything's working we're not
12:46 - calculating a score quite yet
12:48 - so i'm just going to answer a
12:51 - then b c and d
12:54 - on second thought after printing each of
12:57 - these answers and guesses i'm going to
12:59 - add a space after each of these
13:01 - so within each of these four loops at
13:03 - the end
13:04 - i will add a space let me try that again
13:07 - a b c d okay
13:11 - not too bad now let's calculate the
13:13 - final score
13:14 - and we're still within our display score
13:16 - function
13:18 - let's set score equal to
13:21 - correct
13:24 - guesses divided by
13:28 - the length of our questions
13:33 - and let me add a set of parentheses
13:35 - around here
13:38 - then i'm going to multiply our score by
13:40 - 100
13:44 - and if you don't want a decimal portion
13:47 - because we'll display a percentage we
13:49 - can cast this as an end
13:51 - okay that all looks good and we'll print
13:54 - the final score
13:56 - print your score
14:00 - is plus
14:04 - we need to cast our score to a string
14:06 - because we're using string concatenation
14:09 - plus i'll add a percent sign
14:13 - all right let's try it i'm intentionally
14:15 - going to get the last question wrong
14:17 - so we should have a 75 if we have four
14:20 - questions
14:22 - so that would be a b c
14:25 - is the earth round what's earth i'm
14:27 - gonna guess d
14:29 - answers a b c a your guess is a b
14:32 - c d your score is 75 okay let's test it
14:36 - but getting all wrong answers d d d
14:39 - d your score is zero percent
14:42 - congratulations
14:43 - and we'll test it one more time but get
14:45 - all the right answers
14:47 - we just want to be sure that we have 100
14:49 - that's a
14:50 - b c a your score is 100
14:55 - now the last thing that you can add is
14:57 - that we can play again if we want and i
14:59 - have a separate function for that
15:01 - if you would like to add this option
15:02 - here's how to do so let's remove
15:04 - that pass let's set a variable named
15:08 - response
15:09 - equal to some input
15:13 - do you want to
15:16 - play again
15:20 - let's ask for yes or no
15:25 - actually let me remove that okay
15:30 - and depending on the user's response it
15:32 - might be a lowercase
15:33 - so let's make it uppercase response
15:35 - equals
15:36 - response and use the upper method
15:42 - if response is equal to
15:45 - yes all caps if response is equal to yes
15:50 - then return true
15:53 - else we will return
15:57 - false and that is it for this function
16:00 - the last thing we need to do
16:01 - is to create a while loop that will
16:03 - continue to ask the player if they want
16:05 - to play again
16:06 - this will be after we call the new game
16:08 - function
16:09 - while play again
16:13 - and remember this will return either
16:15 - true or
16:16 - false depending on the user's response
16:19 - while
16:19 - play again new game
16:23 - and call the new game function to create
16:25 - a new game for us
16:27 - if we escape the while loop that means
16:29 - the user doesn't want to play again
16:31 - so let's print a message
16:34 - such as by e
16:37 - all right let's test it i'm going to get
16:41 - all of the correct answers this time
16:44 - a b c a
16:47 - all right your score is 100 do you want
16:49 - to play again i'm going to type
16:52 - yes all right then we can play again
16:57 - d d d d your score is zero percent do
17:01 - you want to play again
17:02 - no i think i mastered this game
17:05 - bye all right everybody so that's how
17:08 - you can use python to create
17:10 - a simple quiz game i will post all of
17:13 - this code to the comment section down
17:14 - below
17:15 - but well yeah that's a basic quiz game
17:18 - in python for you all
17:21 - hey you yeah i'm talking to you if you
17:24 - learned something new
17:25 - then help me help you in three easy
17:27 - steps
17:28 - by smashing that like button drop a
17:30 - comment down below
17:31 - and subscribe if you'd like to become a
17:33 - fellow bro
17:46 - [Music]
17:55 - you

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to show you guys how we can build a basic quiz game in python so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm to begin this project i think it would be wise for us to create a skeletal structure for how this program is going to operate and then we'll fill in the gaps later as we go along so to begin let's define all of the functions that we'll need we'll need four we'll create a function that is named new game whenever we call this function it will create a new quiz game for us and for the time being let's write pass just as a placeholder we'll have a total of four functions new game a function to check our answer a function to display our score and lastly a function to play again all right now i'm just going to add some comments here just to separate each of these functions that we have just so that it's a little bit easier to read although this part is not really necessary so i just want to separate each of these functions for some readability okay those are all the functions that we'll need what we'll need now is some sort of collection to hold all of the questions and answers that we have and i think a dictionary would be perfect for this so what i did is that i created a dictionary named questions a dictionary has key value pairs each key is a question that i would like to ask and each question has an associated value we'll have the user guess between answers of a b c or d so these would be all of the correct answers all of the values within this dictionary so here are some of the questions that i want to ask feel free to come up with your own questions if you would like you can copy the questions that i have they should be posted in the comment section down below so the questions that i'm going to ask are who created python what year was python created python is attributed to which comedy group and lastly is the earth round i couldn't think of a fourth question so i just threw in a random stupid question and the correct answers to all of these questions in order would be a b c and a but feel free to come up with your own well we have our questions but we'll need some sort of collection to hold all of the different possible answers to each of these questions and i think a 2d list would work perfect for this so i have a list of lists a list of tuples could work too i suppose so here are all of the answers for the first question and the correct answer is a i believe his name is guido van rossum hey if you're listening man i'm sorry if i'm mispronouncing your name i'm really trying here the second list corresponds to the second question what year was python created it was created in 1991 at least according to wikipedia python is attributed to which comedy group the answer is c monty python like monty python and the holy grail good movie by the way and lastly is the earth round this is a highly debated topic but the answer is a the earth is in fact round so i have a list of lists each list corresponds to a key value pair within my dictionary of questions and this is a lot to type if you want you can just copy the code that i posted in the comments down below just copy and paste and you'll have all of this or if you want you can pause the video and type it i don't care so now that you have your questions and your options we're ready to begin so the first thing that we'll do within our program is to call the new game function to begin a new game so after we have our questions and options created let's create a new game by calling the new game function now when we run this program we'll generate our dictionary of questions and our 2d list of different options for each question and then we will call the new game function to begin a new game so let's head to the new game function and fill in everything within our new game function so at the top let's declare a few things let's say we have a list named guesses and guesses will be an empty list for now i will declare a variable called correct guesses set it equal to zero because we haven't guessed anything yet and we will set a current question number and set the sequel to one to represent the first question okay now we need to display all of the questions within our dictionary of questions and we can use a for loop for that so for key in questions i'm going to print my key and let's just test this okay yeah here's all my questions i think what i'll do is actually print something to separate each question let's say one of these lines i think it would look better with them okay i'll print this line and then we'll move on to a question all right now after rerunning this we have each question and i added just a line break between each of these to make it look kind of fancy now i need to display all of the different options for each question and we can do that with a nested for loop so if i were to write 4i in options print i let me show you what happens now with the way this for loop is written now it's going to display all of the different options available to us for the entire quiz game what i would like instead is to display only the first list for the first question and then the second list for the second question and follow that pattern so we're going to change our for loop around 4i in options and we'll set an index for options the index is going to be our question number minus one now remember what i said in previous videos where different collections including lists tuples etc the first element in a collection has an index of zero because computers always start with zero then the next element would therefore have an index of one then two three then you follow that pattern we're using this question number variable as some sort of counter and since we initially set this to one i'm just going to subtract 1 so that we effectively receive 0 as the index and now we just need to increment our question number after each iteration so let's do that i will add that to the end here after we finish displaying all of the options let's increment question number by one by typing question num plus equals one and if i were to run this currently we'll display all of the different options for each question who created python here's all of the associated options what year is python created python is attributed to which comedy group and lastly is the earth round now it's time for some user input so i'm going to create a variable called guess and make sure you don't put it within your inner for loop it should be within the outer for loop guess equals input and i'll create a prompt enter a b c or d here's something to consider we would like the user to type in either capital a b c or d with strings they're case sensitive what if the user typed in one of these letters but lowercase if they're correct we would still like to give them their point why don't we take our guess and make it uppercase so guess equals guess and we can make this uppercase using the upper method of strings at the end of this game i'm going to compare our guesses to the correct answers so we have an empty list named guesses and i'm going to append our current guests that we're working on to our list of guesses so guesses dot append and we will append our guess this round now that we have our guess and we've appended our guests to our list of guesses let's check to see if it's the correct answer or not so we're just about to fill in this check answer function next so we are going to call this function and pass in a few items as arguments so let's use the check answer function and we'll pass in the key for the current question that we're on so the key is the correct answer so that would be our questions dot get key this would be the answer and we'll also pass in our guess and we are going to fill in the check answer function but we need to set up the parameters we're receiving effectively our answer as well as our guess so i'm going to name these as answer and guess and we are going to check to see if our answer is equal to our guess if answer is equal to guess let's print something print correct and i think we should give the user a point we'll have our check answer function return one for one point return one else if this is not the correct answer let's print wrong and we will return zero they do not get a point and since this is returning a value we should assign that so let's assign the point we may or may not receive to our variable of correct guesses which is initially set to zero so we'll type correct guesses plus equals check answer and check answer will return one if we scored a point or zero if we did not score a point and make sure you have plus equals because if you just set this to equals then we cannot score more than one point it will either be zero or one so we are effectively incrementing our correct guesses by one for each point that we score and now we're going to work on the display score function and we'll call that at the end after we finish all of our questions that we have so make sure that you do not write this within the for loop it should be outside of it because once we finish iterating through all of our questions we're going to display a final score so let's call the display score function and we'll need to pass in some arguments our correct guesses as well as our list of guesses okay let's head to the display score function so we have as parameters correct guesses as well as guesses i need to remove this pass i'm going to add one of these fancy lines in just to separate the questions from the results and i will print results and maybe another one of these lines okay so i need to print all of the answers answers and i do not want to end on a new line so i'm going to set end equal to nothing and i need to display all of the values within our dictionary all of the answers i will do that using a for loop for i in questions print questions dot get i and i do not want to end on a new line so i'm going to set end equal to nothing effectively and then i'll print a new line okay let's work on the guesses i think i'm just going to copy all this and make some changes i'll replace answers with guesses for i in guesses print i okay let's just be sure that everything's working we're not calculating a score quite yet so i'm just going to answer a then b c and d on second thought after printing each of these answers and guesses i'm going to add a space after each of these so within each of these four loops at the end i will add a space let me try that again a b c d okay not too bad now let's calculate the final score and we're still within our display score function let's set score equal to correct guesses divided by the length of our questions and let me add a set of parentheses around here then i'm going to multiply our score by 100 and if you don't want a decimal portion because we'll display a percentage we can cast this as an end okay that all looks good and we'll print the final score print your score is plus we need to cast our score to a string because we're using string concatenation plus i'll add a percent sign all right let's try it i'm intentionally going to get the last question wrong so we should have a 75 if we have four questions so that would be a b c is the earth round what's earth i'm gonna guess d answers a b c a your guess is a b c d your score is 75 okay let's test it but getting all wrong answers d d d d your score is zero percent congratulations and we'll test it one more time but get all the right answers we just want to be sure that we have 100 that's a b c a your score is 100 now the last thing that you can add is that we can play again if we want and i have a separate function for that if you would like to add this option here's how to do so let's remove that pass let's set a variable named response equal to some input do you want to play again let's ask for yes or no actually let me remove that okay and depending on the user's response it might be a lowercase so let's make it uppercase response equals response and use the upper method if response is equal to yes all caps if response is equal to yes then return true else we will return false and that is it for this function the last thing we need to do is to create a while loop that will continue to ask the player if they want to play again this will be after we call the new game function while play again and remember this will return either true or false depending on the user's response while play again new game and call the new game function to create a new game for us if we escape the while loop that means the user doesn't want to play again so let's print a message such as by e all right let's test it i'm going to get all of the correct answers this time a b c a all right your score is 100 do you want to play again i'm going to type yes all right then we can play again d d d d your score is zero percent do you want to play again no i think i mastered this game bye all right everybody so that's how you can use python to create a simple quiz game i will post all of this code to the comment section down below but well yeah that's a basic quiz game in python for you all hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
