With timestamps:

00:00 - hey everybody in today's video I'm going
00:01 - to show you how we can add and change
00:03 - HTML elements using JavaScript so sit
00:06 - back relax and enjoy the show I'll break
00:10 - down creating and appending elements to
00:11 - the Dom in three simple steps we'll
00:13 - create the element add any necessary
00:16 - attributes or properties and then append
00:18 - the element to the Dom will be the final
00:20 - step but before we do begin within our
00:22 - HTML file we'll create a few boxes for
00:25 - this exercise these will be
00:28 - developments with an inner paragraph the
00:31 - first will have text of box one with
00:34 - this development I will give it an ID of
00:36 - box one and a class of
00:41 - box let's copy this developement paste
00:44 - it three times for a total of four boxes
00:47 - we'll create box
00:48 - two box
00:51 - three and box
00:55 - four I'll apply the following CSS
00:58 - properties we're selecting the Box class
01:01 - add a border of 3 pixel solid set a
01:03 - width to be 100% and a height of 125
01:08 - pixels and we are ready to begin step
01:11 - one we need to create the element in
01:13 - order to work with it right I will
01:15 - create a constant of new H1 H1 equals we
01:19 - will select our document use the create
01:23 - element method then as a string pass in
01:27 - the type of the element we would like to
01:29 - create
01:30 - we'll create an H1 element we now have
01:32 - an H1 element to work with which we're
01:35 - referencing as new H1 let's add some
01:38 - attributes and CSS properties let's do
01:40 - one for now I will take my new H1
01:44 - element access its text content set it
01:49 - equal to I like
01:53 - pizza and then we just have to append
01:56 - this element to the Dom to do that we
01:59 - will access our Dom with
02:01 - document what element would we like to
02:04 - select let's select the body element of
02:06 - our
02:07 - document and then we will use the append
02:10 - method pass in our HTML element as an
02:13 - argument and there we go there's our H1
02:16 - element when you append an element to a
02:19 - parent this new element is the last
02:22 - child you could prepend if you would
02:24 - like it to be the first child so let's
02:27 - use the prepend method change aend to
02:32 - prepend and it's now at the
02:34 - beginning let's add an additional
02:36 - attribute we will take our new H1
02:38 - element set the ID attribute equal to my
02:44 - H1 and let's see if that worked I will
02:47 - right click on this element inspect
02:50 - it here's our H1 element it's the first
02:53 - child because we're prepending it this
02:56 - H1 element has an ID attribute set to my
02:59 - H1
03:01 - let's change the CSS properties of this
03:03 - element I will access new H1 access its
03:08 - style access its color the font
03:11 - color let's set it to be red but better
03:15 - yet let's set the color to be tomato
03:17 - because I like tomatoes I think that's a
03:20 - better looking shade of red let's also
03:22 - Center the text new H1 access its style
03:27 - access the text align property set it to
03:31 - be
03:32 - Center and the text is now centered when
03:36 - I append this element I would like to
03:38 - append it to within box one I will
03:40 - select box one as the parent rather than
03:43 - the
03:45 - body we will access our document we need
03:48 - to select an element we will select box
03:51 - one we could use document. getet element
03:56 - by ID the ID that I'm going to select
04:00 - is box
04:02 - one I will then follow this with append
04:06 - append our new H1
04:09 - element so our H1 element is now within
04:12 - box one and not outside of it like it
04:14 - was previously I could append this H1
04:17 - element to box two but I would have to
04:19 - select it we will get element by ID
04:23 - select box two to put it within box two
04:26 - box three and box four
04:30 - when I'm appending this element to box
04:32 - one it is the last child of box one if
04:35 - there are any child elements within this
04:37 - box which there is we have a paragraph
04:40 - element that H1 element will come after
04:43 - and not
04:44 - before so if you would like this H1
04:47 - element to be the first child we can
04:49 - prepend it I'm going to copy this
04:51 - because I don't want to rewrite
04:55 - it we will
04:57 - prepend prepend my new H1 element take
05:01 - box one prepend the new H1 element so my
05:05 - H1 element is now at the top it's the
05:07 - first child the paragraph element comes
05:10 - after let's do this with box two box
05:14 - three and box 4 what if we would like to
05:17 - take our H1 element and sandwich it
05:19 - between box one and box two I could
05:22 - select box two and insert that new H1
05:25 - element before it here's how I will
05:28 - create a reference to Box
05:31 - 2
05:33 - equals
05:35 - document. get element by
05:39 - ID we will select the ID of box two
05:43 - access our document access the body
05:47 - because box two is a child element of
05:49 - the body use the insert before method
05:54 - there's two arguments the new
05:57 - element and the current element
06:00 - element the new element is going to be
06:03 - new H1 that's what we're trying to add
06:06 - the current element is the target we're
06:08 - selecting box two insert the new H1
06:12 - element before box two and this is what
06:15 - that looks like this H1 element is now
06:18 - between box one and box two take the new
06:20 - H1 element insert it before Box 2 if we
06:24 - were to do this with box one well then
06:26 - it's going to be before box one let's
06:29 - try this with box
06:32 - 3 our H1 element is before box 3 and box
06:40 - 4 what if these elements don't have
06:46 - IDs how do we select them then here's
06:49 - how we will use Query selector all to
06:52 - select everything that has the Box class
06:55 - I will create a constant of boxes this
06:58 - will be a node the list access our
07:01 - document use Query selector all select
07:06 - everything that has a box class we will
07:10 - use the insert before method access our
07:13 - document access the
07:16 - body insert
07:19 - before we have the new element to add
07:23 - and the current element the new element
07:26 - is new H1 the current element is our
07:30 - node list of boxes we can access a
07:33 - specific element from this node list
07:35 - with an index if I accessed boxes at
07:38 - index zero that would give me box one
07:42 - boxes at index one that's referring to
07:44 - box
07:45 - two box three and box four so you could
07:50 - use Query selector to select many
07:52 - elements store it within a node list
07:55 - then select those specific elements with
07:57 - an index number
08:00 - this is optional but at any time if you
08:02 - need to remove an HTML element here's
08:04 - how let's append our new H1 element we
08:08 - need to select the location in which we
08:10 - can find that element it's within the
08:12 - body of our
08:14 - document document dot body use the
08:20 - remove child method we will remove our
08:23 - new H1
08:25 - element and it's gone what if this H1
08:28 - element was within box one all right I
08:32 - will append our new H1 element to box
08:34 - one and we need to add the IDS back to
08:36 - these boxes because I forgot to do that
08:39 - we're pending our new H1 element to box
08:41 - one when I try and remove it it doesn't
08:44 - work it's still there we need to select
08:48 - box one and not the body of our document
08:50 - because box one is the direct parent of
08:53 - our H1 element not the body the body in
08:55 - this case could be like the
08:57 - grandparent instead of selecting our
08:59 - body we will get the ID of box one or
09:03 - some other element selector to get box
09:05 - one I'll use get element by ID because
09:08 - it's
09:09 - easy get element by ID the ID that I'm
09:14 - selecting is box one remove the new H1
09:17 - element that's found within it and it's
09:20 - gone if at any time you need to remove
09:22 - an element select the parent of that
09:25 - element then follow it with the remove
09:27 - child method pass in the element you're
09:29 - trying to remove as an
09:31 - argument in this last example we're
09:33 - going to work with ordered lists so
09:36 - going to our HTML file we will create an
09:39 - ordered list with a pair of O tags I
09:42 - will give this ordered list an ID of
09:45 - fruits We'll add a few list items the
09:48 - first list item will be for an
09:51 - apple the ID will be
09:55 - apple we'll create a list item element
09:58 - for an or orange ID will be
10:01 - orange and a
10:05 - banana ID
10:08 - banana I'll add a little bit of CSS
10:10 - styling going to the CSS stylesheet I
10:13 - will select the ID of fruits I'll add a
10:18 - border of three pixel solid for this
10:22 - demonstration and increase the font
10:25 - size to 2
10:28 - RM all right and that's what we need to
10:30 - work
10:31 - with we'll now be creating a list item
10:34 - element I will create a constant of new
10:38 - list item equals
10:42 - document. create
10:45 - element what is the type of element
10:47 - we're trying to create a list item
10:50 - element let's set any attributes or
10:52 - properties that's step two let's take
10:55 - our new list item set the text content
10:59 - to equal
11:03 - coconut we'll append this element if I
11:06 - were to append this new list item to the
11:09 - body of my document it's the last child
11:12 - of the body we're not adding it to this
11:14 - ordered list now that we can see it I'm
11:17 - going to add a few more attributes and
11:19 - properties let's take our new list item
11:22 - access its ID attribute set it to be
11:27 - coconut let's change the font
11:30 - weight new list item access the
11:34 - style access the font
11:37 - weight set it to be
11:40 - bold and the background color access the
11:44 - style access the background
11:48 - color I'll set the background color to
11:50 - be light
11:54 - green we have our list item element if I
11:58 - append it to the bot body it's now the
12:00 - last child of the body of my document
12:02 - not this ordered list found within the
12:05 - body if I were to prepend it this is
12:08 - what would happen prepend the new list
12:11 - item it's now the first
12:15 - child now we'll select our ordered list
12:18 - of
12:19 - fruits get element by ID fruits append
12:23 - the new list item and it's now at the
12:26 - end at number four let's let prepend to
12:29 - the ordered
12:32 - list get element by ID fruits prepend
12:36 - our new list item our coconut is now at
12:39 - number
12:41 - one how can we insert our coconut
12:43 - between Apple and Orange here's how
12:46 - since these list item elements have an
12:48 - ID I could use
12:51 - that let's get the ID of orange const
12:56 - orange get element by ID
13:00 - orange instead of selecting the body
13:02 - we're going to select the ordered list
13:05 - that has an ID of fruits document. getet
13:09 - element by ID the ID that I'm selecting
13:13 - is fruits select the ordered list of
13:16 - fruits insert the new list item before
13:20 - the orange our coconut is now at number
13:23 - two let's insert the coconut before the
13:27 - banana the ID was
13:29 - banana const banana insert the new list
13:34 - item before the
13:35 - banana our coconut is now at number
13:38 - three you could insert before Apple too
13:42 - I will get the ID of apple const
13:46 - apple insert the new list item before
13:48 - the
13:49 - apple and it's back at the
13:52 - beginning what if these list items don't
13:54 - have ideas let's eliminate
13:57 - those
14:01 - we would need to use Query selector to
14:03 - select all list items from the ordered
14:05 - list of
14:10 - roots so I'm going to use Query selector
14:13 - all select the ID of fruits then select
14:18 - any list item descendants within this ID
14:22 - this will return a node list that stores
14:24 - all of the current list items within
14:27 - this ordered list
14:29 - we need to select our ordered list of
14:31 - fruits not the body document. getet
14:35 - element by ID I will
14:38 - select our ordered list of
14:41 - fruits insert the new list item before
14:45 - list items at index
14:48 - zero now will'll insert the coconut
14:51 - before the Apple let's increment our
14:53 - index to one our coconut is now before
14:57 - the
14:57 - orange
14:59 - now it's before the banana and now it's
15:02 - after the banana if I need to remove
15:04 - this list item I would need to select it
15:06 - first so let's append the new list item
15:09 - to
15:10 - fruits I will get the ID of the ordered
15:14 - list of fruits remove the child of new
15:18 - list item and it's now
15:21 - gone all right everybody so that is how
15:23 - we can add change and remove HTML
15:26 - elements using JavaScript

Cleaned transcript:

hey everybody in today's video I'm going to show you how we can add and change HTML elements using JavaScript so sit back relax and enjoy the show I'll break down creating and appending elements to the Dom in three simple steps we'll create the element add any necessary attributes or properties and then append the element to the Dom will be the final step but before we do begin within our HTML file we'll create a few boxes for this exercise these will be developments with an inner paragraph the first will have text of box one with this development I will give it an ID of box one and a class of box let's copy this developement paste it three times for a total of four boxes we'll create box two box three and box four I'll apply the following CSS properties we're selecting the Box class add a border of 3 pixel solid set a width to be 100% and a height of 125 pixels and we are ready to begin step one we need to create the element in order to work with it right I will create a constant of new H1 H1 equals we will select our document use the create element method then as a string pass in the type of the element we would like to create we'll create an H1 element we now have an H1 element to work with which we're referencing as new H1 let's add some attributes and CSS properties let's do one for now I will take my new H1 element access its text content set it equal to I like pizza and then we just have to append this element to the Dom to do that we will access our Dom with document what element would we like to select let's select the body element of our document and then we will use the append method pass in our HTML element as an argument and there we go there's our H1 element when you append an element to a parent this new element is the last child you could prepend if you would like it to be the first child so let's use the prepend method change aend to prepend and it's now at the beginning let's add an additional attribute we will take our new H1 element set the ID attribute equal to my H1 and let's see if that worked I will right click on this element inspect it here's our H1 element it's the first child because we're prepending it this H1 element has an ID attribute set to my H1 let's change the CSS properties of this element I will access new H1 access its style access its color the font color let's set it to be red but better yet let's set the color to be tomato because I like tomatoes I think that's a better looking shade of red let's also Center the text new H1 access its style access the text align property set it to be Center and the text is now centered when I append this element I would like to append it to within box one I will select box one as the parent rather than the body we will access our document we need to select an element we will select box one we could use document. getet element by ID the ID that I'm going to select is box one I will then follow this with append append our new H1 element so our H1 element is now within box one and not outside of it like it was previously I could append this H1 element to box two but I would have to select it we will get element by ID select box two to put it within box two box three and box four when I'm appending this element to box one it is the last child of box one if there are any child elements within this box which there is we have a paragraph element that H1 element will come after and not before so if you would like this H1 element to be the first child we can prepend it I'm going to copy this because I don't want to rewrite it we will prepend prepend my new H1 element take box one prepend the new H1 element so my H1 element is now at the top it's the first child the paragraph element comes after let's do this with box two box three and box 4 what if we would like to take our H1 element and sandwich it between box one and box two I could select box two and insert that new H1 element before it here's how I will create a reference to Box 2 equals document. get element by ID we will select the ID of box two access our document access the body because box two is a child element of the body use the insert before method there's two arguments the new element and the current element element the new element is going to be new H1 that's what we're trying to add the current element is the target we're selecting box two insert the new H1 element before box two and this is what that looks like this H1 element is now between box one and box two take the new H1 element insert it before Box 2 if we were to do this with box one well then it's going to be before box one let's try this with box 3 our H1 element is before box 3 and box 4 what if these elements don't have IDs how do we select them then here's how we will use Query selector all to select everything that has the Box class I will create a constant of boxes this will be a node the list access our document use Query selector all select everything that has a box class we will use the insert before method access our document access the body insert before we have the new element to add and the current element the new element is new H1 the current element is our node list of boxes we can access a specific element from this node list with an index if I accessed boxes at index zero that would give me box one boxes at index one that's referring to box two box three and box four so you could use Query selector to select many elements store it within a node list then select those specific elements with an index number this is optional but at any time if you need to remove an HTML element here's how let's append our new H1 element we need to select the location in which we can find that element it's within the body of our document document dot body use the remove child method we will remove our new H1 element and it's gone what if this H1 element was within box one all right I will append our new H1 element to box one and we need to add the IDS back to these boxes because I forgot to do that we're pending our new H1 element to box one when I try and remove it it doesn't work it's still there we need to select box one and not the body of our document because box one is the direct parent of our H1 element not the body the body in this case could be like the grandparent instead of selecting our body we will get the ID of box one or some other element selector to get box one I'll use get element by ID because it's easy get element by ID the ID that I'm selecting is box one remove the new H1 element that's found within it and it's gone if at any time you need to remove an element select the parent of that element then follow it with the remove child method pass in the element you're trying to remove as an argument in this last example we're going to work with ordered lists so going to our HTML file we will create an ordered list with a pair of O tags I will give this ordered list an ID of fruits We'll add a few list items the first list item will be for an apple the ID will be apple we'll create a list item element for an or orange ID will be orange and a banana ID banana I'll add a little bit of CSS styling going to the CSS stylesheet I will select the ID of fruits I'll add a border of three pixel solid for this demonstration and increase the font size to 2 RM all right and that's what we need to work with we'll now be creating a list item element I will create a constant of new list item equals document. create element what is the type of element we're trying to create a list item element let's set any attributes or properties that's step two let's take our new list item set the text content to equal coconut we'll append this element if I were to append this new list item to the body of my document it's the last child of the body we're not adding it to this ordered list now that we can see it I'm going to add a few more attributes and properties let's take our new list item access its ID attribute set it to be coconut let's change the font weight new list item access the style access the font weight set it to be bold and the background color access the style access the background color I'll set the background color to be light green we have our list item element if I append it to the bot body it's now the last child of the body of my document not this ordered list found within the body if I were to prepend it this is what would happen prepend the new list item it's now the first child now we'll select our ordered list of fruits get element by ID fruits append the new list item and it's now at the end at number four let's let prepend to the ordered list get element by ID fruits prepend our new list item our coconut is now at number one how can we insert our coconut between Apple and Orange here's how since these list item elements have an ID I could use that let's get the ID of orange const orange get element by ID orange instead of selecting the body we're going to select the ordered list that has an ID of fruits document. getet element by ID the ID that I'm selecting is fruits select the ordered list of fruits insert the new list item before the orange our coconut is now at number two let's insert the coconut before the banana the ID was banana const banana insert the new list item before the banana our coconut is now at number three you could insert before Apple too I will get the ID of apple const apple insert the new list item before the apple and it's back at the beginning what if these list items don't have ideas let's eliminate those we would need to use Query selector to select all list items from the ordered list of roots so I'm going to use Query selector all select the ID of fruits then select any list item descendants within this ID this will return a node list that stores all of the current list items within this ordered list we need to select our ordered list of fruits not the body document. getet element by ID I will select our ordered list of fruits insert the new list item before list items at index zero now will'll insert the coconut before the Apple let's increment our index to one our coconut is now before the orange now it's before the banana and now it's after the banana if I need to remove this list item I would need to select it first so let's append the new list item to fruits I will get the ID of the ordered list of fruits remove the child of new list item and it's now gone all right everybody so that is how we can add change and remove HTML elements using JavaScript
