With timestamps:

00:01 - hey what's going on everybody so in this
00:03 - video i'm going to explain some useful
00:06 - string methods that you might be
00:08 - interested in let's begin by creating a
00:10 - variable named name standard string
00:14 - name
00:15 - we'll accept some user input we'll need
00:17 - a prompt
00:18 - standard output
00:21 - enter your name
00:25 - a user's name may contain spaces we're
00:27 - better off using the getline function
00:30 - standard
00:32 - getline
00:34 - standard cn
00:39 - name the first useful method is the
00:41 - length method type your string name
00:44 - follow it with dot
00:47 - length parenthesis the length method
00:50 - will give you the length of a string
00:52 - let's write this within an if statement
00:54 - if
00:56 - name dot length method is greater than
00:59 - 12.
01:00 - we'll print a message
01:01 - such as your name can't be over 12
01:04 - characters long
01:06 - standard
01:07 - output
01:09 - your
01:11 - name
01:12 - can't be over 12
01:15 - characters
01:19 - else we'll print a different message
01:21 - standard
01:22 - output
01:26 - welcome
01:30 - the user's name
01:32 - enter your name type in your full name
01:36 - welcome whatever your name is okay now
01:39 - what if our name is over 12 characters
01:44 - type in your full name
01:46 - then just add a bunch of characters
01:49 - your name can't be over 12 characters
01:52 - that is the built-in length method of
01:54 - strings you type a string follow it with
01:57 - dot length parenthesis wherever you
02:00 - invoke this method in that spot you will
02:02 - return the length of that string in
02:04 - characters the empty method will return
02:07 - if a string is empty or not
02:10 - type your string name
02:11 - dot
02:12 - empty parenthesis
02:14 - this returns a boolean value
02:17 - if
02:18 - name is empty
02:21 - we'll display a message
02:24 - you
02:25 - didn't
02:26 - enter your name
02:30 - else
02:35 - hello whatever your name is
02:40 - okay i'm just going to hit enter
02:43 - you didn't enter your name but if i do
02:45 - enter my name
02:46 - it works normally hello whatever your
02:49 - name is that is the empty method of
02:51 - strings you'll check to see if a string
02:54 - is empty or not a useful case of this is
02:56 - to check to see if somebody enters in
02:58 - some user input another is clear
03:01 - name dot clear
03:04 - then let's display our name
03:07 - standard output
03:10 - hello
03:13 - name
03:15 - enter your name type in your first name
03:16 - and last name
03:19 - hello and we don't have a name anymore
03:21 - because that name has been cleared
03:23 - so that is the clear method we can
03:26 - append a string to another string
03:28 - after my name i will use append
03:31 - parentheses within the parentheses we
03:34 - can add a string to the end of another
03:36 - string i'll add at gmail.com
03:40 - standard output
03:44 - your username is now
03:49 - name
03:51 - enter your name
03:55 - your username is your name
03:58 - with at gmail.com appended to it that is
04:01 - the append method
04:02 - we can return a character at a given
04:05 - position within a string
04:08 - standard output
04:10 - type your string name
04:12 - dot at parentheses
04:15 - so the first character in a string has
04:17 - an index of zero i'll display whatever
04:20 - that character is
04:22 - enter your name
04:24 - so the first character in my string is a
04:26 - capital b the character at index 1
04:30 - well that would be
04:32 - r
04:33 - we can insert a character at a given
04:34 - position type your string
04:37 - follow it with insert
04:41 - there will be two arguments we'll list
04:43 - within the parentheses an index so the
04:45 - beginning of our string would have an
04:46 - index of zero comma then what would we
04:49 - like to insert i'll insert the at sign
04:52 - at the beginning of my name
04:55 - then let's display our name
05:05 - okay so we now have the at sign inserted
05:09 - at the beginning of our string or you
05:10 - could pick a different position the
05:12 - index of one would be the second
05:14 - character technically so yeah pick a
05:16 - position then you can insert a string
05:18 - now we can find a certain character i
05:20 - would like to find if there's any spaces
05:22 - within my name name dot find
05:26 - then place a character i'll look for any
05:29 - white spaces this method will give me
05:31 - the position of the first space type in
05:34 - your first name and last name
05:36 - the index of the first white space
05:38 - within my name has an index of three the
05:40 - first character is always zero zero one
05:44 - two three okay then lastly erase
05:47 - name
05:48 - dot erase
05:50 - we can erase a portion of a string we'll
05:53 - need a beginning index
05:55 - and an ending index
05:57 - i'll eliminate the first three
05:58 - characters then we will display our name
06:01 - enter your name
06:05 - okay and that's what's left of my name i
06:07 - deleted the first three characters
06:09 - the first number is the beginning index
06:12 - the second is the ending index it's not
06:14 - inclusive though so yeah those are a few
06:16 - helpful string methods if you would like
06:19 - to know more head to the string class on
06:21 - the c plus dot com website and there's a
06:24 - fairly extensive list hey if you're
06:26 - enjoying the series let me know by
06:28 - smashing that like button leave a random
06:29 - comment down below and subscribe if
06:31 - you'd like to become a fellow bro

Cleaned transcript:

hey what's going on everybody so in this video i'm going to explain some useful string methods that you might be interested in let's begin by creating a variable named name standard string name we'll accept some user input we'll need a prompt standard output enter your name a user's name may contain spaces we're better off using the getline function standard getline standard cn name the first useful method is the length method type your string name follow it with dot length parenthesis the length method will give you the length of a string let's write this within an if statement if name dot length method is greater than 12. we'll print a message such as your name can't be over 12 characters long standard output your name can't be over 12 characters else we'll print a different message standard output welcome the user's name enter your name type in your full name welcome whatever your name is okay now what if our name is over 12 characters type in your full name then just add a bunch of characters your name can't be over 12 characters that is the builtin length method of strings you type a string follow it with dot length parenthesis wherever you invoke this method in that spot you will return the length of that string in characters the empty method will return if a string is empty or not type your string name dot empty parenthesis this returns a boolean value if name is empty we'll display a message you didn't enter your name else hello whatever your name is okay i'm just going to hit enter you didn't enter your name but if i do enter my name it works normally hello whatever your name is that is the empty method of strings you'll check to see if a string is empty or not a useful case of this is to check to see if somebody enters in some user input another is clear name dot clear then let's display our name standard output hello name enter your name type in your first name and last name hello and we don't have a name anymore because that name has been cleared so that is the clear method we can append a string to another string after my name i will use append parentheses within the parentheses we can add a string to the end of another string i'll add at gmail.com standard output your username is now name enter your name your username is your name with at gmail.com appended to it that is the append method we can return a character at a given position within a string standard output type your string name dot at parentheses so the first character in a string has an index of zero i'll display whatever that character is enter your name so the first character in my string is a capital b the character at index 1 well that would be r we can insert a character at a given position type your string follow it with insert there will be two arguments we'll list within the parentheses an index so the beginning of our string would have an index of zero comma then what would we like to insert i'll insert the at sign at the beginning of my name then let's display our name okay so we now have the at sign inserted at the beginning of our string or you could pick a different position the index of one would be the second character technically so yeah pick a position then you can insert a string now we can find a certain character i would like to find if there's any spaces within my name name dot find then place a character i'll look for any white spaces this method will give me the position of the first space type in your first name and last name the index of the first white space within my name has an index of three the first character is always zero zero one two three okay then lastly erase name dot erase we can erase a portion of a string we'll need a beginning index and an ending index i'll eliminate the first three characters then we will display our name enter your name okay and that's what's left of my name i deleted the first three characters the first number is the beginning index the second is the ending index it's not inclusive though so yeah those are a few helpful string methods if you would like to know more head to the string class on the c plus dot com website and there's a fairly extensive list hey if you're enjoying the series let me know by smashing that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
