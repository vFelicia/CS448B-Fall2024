With timestamps:

00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm going to explain
00:05 - what a set is in python so
00:07 - sit back relax and enjoy the show
00:12 - if you wouldn't mind please like comment
00:15 - and subscribe
00:16 - one like equals one prayer for the
00:18 - youtube algorithm
00:20 - a set is a collection which is unordered
00:23 - as well as being
00:24 - unindexed they do not allow any
00:26 - duplicate values
00:27 - for example let's create a set of
00:30 - silverware
00:30 - so in order to create a set we need a
00:32 - name for this set
00:33 - let's call it utensils equals
00:37 - and in order to create a set we need to
00:39 - surround all values with a set
00:41 - of curly braces now let's add a few
00:43 - utensils
00:44 - to the set called utensils let's add a
00:47 - fork
00:49 - a spoon and maybe a knife and that
00:52 - should be good
00:53 - and let's display all of the values for
00:56 - x in utensils
01:00 - print x now with sets
01:04 - they're different from lists because
01:06 - they're unordered as well as being
01:08 - unindexed if i were to print all of the
01:10 - elements in utensils
01:12 - they might not necessarily be in the
01:14 - same order in which we placed them
01:16 - for example when we printed all of the
01:19 - elements found within utensils
01:20 - first we had a knife a fork and then a
01:23 - spoon if i were to run this again
01:25 - they might be in a different order kind
01:27 - of like that
01:28 - so a set is actually faster than a list
01:31 - if you need to check to see if something
01:33 - is within a set compared to a list and
01:36 - they do not allow
01:37 - any duplicate values let me add a bunch
01:40 - of knives and
01:41 - let's see what happens so i'll have a
01:43 - total of three knives
01:45 - but when we print all of the elements of
01:48 - the set
01:48 - only one knife appears so here's a few
01:51 - useful methods
01:52 - of sets the first method is that we can
01:55 - add
01:56 - an item to our set so type in the name
01:58 - of the set
01:59 - in this case it's utensils dot and
02:02 - here's a bunch of methods that you can
02:04 - use
02:04 - i am looking for add and we can add an
02:07 - element to the set
02:08 - i would like to add a napkin
02:12 - and then if we were to print the set we
02:14 - do have a napkin
02:15 - within the set we can also remove an
02:18 - element
02:19 - utensils dot remove
02:22 - and i would like to remove the fork
02:28 - and now our fork is gone we can also
02:31 - clear
02:32 - utensils dot clear
02:36 - and all the elements within our set
02:38 - should be gone
02:40 - so let me turn these lines into a
02:42 - comment
02:43 - all right for this next example we'll
02:45 - need a second set
02:46 - let's create a second set called dishes
02:50 - and then we need a set of curly braces
02:53 - and
02:53 - let's add a bowl
02:56 - a plate and a cup
03:00 - our next method is that we're going to
03:02 - add one set
03:04 - to another by using the update method
03:06 - let's say we would like to add
03:08 - our dishes set to our utensil set so
03:11 - let's type utensils
03:12 - dot and use the update method and within
03:15 - this method we will pass
03:16 - in the set that we would like to add so
03:19 - utensils
03:20 - update dishes this will add all of the
03:22 - elements found within dishes
03:24 - to our utensil set and you can see that
03:26 - when we print our utensils
03:28 - we have a bowl a plate and a cup in here
03:31 - as well
03:32 - and then if i were to switch these
03:33 - around let's say dishes
03:36 - update utensils and then i will
03:40 - print everything found within dishes now
03:43 - there's a fork
03:44 - a spoon and a knife in here as well we
03:47 - can also
03:47 - join two sets together and create a new
03:50 - set entirely
03:52 - so let's create a set called dinner
03:54 - table like we're setting up a dinner
03:56 - table and we need a fork
03:57 - a spoon a knife a bowl a plate and a cup
04:00 - so we have a dinner table set
04:04 - we're going to set the sequel to either
04:06 - utensils
04:08 - dot union
04:11 - dishes or we could do dishes
04:14 - union utensils either way would work and
04:17 - let's display all the elements found
04:19 - within dinner table
04:20 - and we should now have elements from
04:22 - both sets utensils
04:24 - and dishes as well there are also some
04:26 - methods in which we
04:28 - can compare the similarities as well as
04:30 - the differences between the elements
04:32 - found within two sets
04:34 - let's say i would like to check to see
04:36 - what utensils has
04:38 - that dishes doesn't and for this example
04:40 - i think i'll add a knife
04:42 - to my dishes set just so that they have
04:44 - at least one thing in common
04:46 - so i would like to see what utensils has
04:49 - that dishes doesn't so we can do so
04:51 - using the
04:52 - difference method and i will print the
04:54 - results with a print
04:56 - statement so i'm going to compare
04:58 - utensils
04:59 - against dishes utensils dot
05:03 - difference dishes and this will print
05:07 - what utensils has that dishes doesn't
05:10 - which is a
05:11 - fork as well as a spoon and we can
05:14 - reverse the rolls too we could say
05:16 - dishes difference utensils what do
05:20 - dishes have
05:20 - that utensils doesn't and dishes has a
05:24 - cup a bowl and a plate they both have
05:27 - knives
05:27 - so that's why knife isn't appearing we
05:30 - can also check to see
05:31 - if there's anything that they have in
05:33 - common using the
05:34 - intersection method so i'll turn this
05:37 - line into a comment
05:40 - we'll print utensils
05:43 - dot intersection
05:47 - dishes and this will return whatever
05:50 - element
05:50 - that they have in common which is a
05:52 - knife
05:53 - all right everybody in conclusion a set
05:56 - is a collection
05:57 - which is unordered as well as being
06:00 - unindexed
06:01 - they do not allow any duplicate values
06:03 - and you can do things like
06:05 - compare two sets see if there's anything
06:07 - that they have in common any differences
06:09 - and we can add or remove elements to a
06:11 - set if you'd like a copy of all this
06:13 - code i will post all of this in the
06:15 - comments down below
06:16 - don't be afraid to smash that like
06:18 - button drop a comment down below
06:20 - and subscribe if you'd like to become a
06:22 - fellow bro
06:24 - hey you yeah i'm talking to you if you
06:26 - learned something new
06:27 - then help me help you in three easy
06:29 - steps
06:30 - by smashing that like button drop a
06:32 - comment down below and subscribe if
06:34 - you'd like to become a fellow bro
06:48 - [Music]
06:58 - you

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to explain what a set is in python so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm a set is a collection which is unordered as well as being unindexed they do not allow any duplicate values for example let's create a set of silverware so in order to create a set we need a name for this set let's call it utensils equals and in order to create a set we need to surround all values with a set of curly braces now let's add a few utensils to the set called utensils let's add a fork a spoon and maybe a knife and that should be good and let's display all of the values for x in utensils print x now with sets they're different from lists because they're unordered as well as being unindexed if i were to print all of the elements in utensils they might not necessarily be in the same order in which we placed them for example when we printed all of the elements found within utensils first we had a knife a fork and then a spoon if i were to run this again they might be in a different order kind of like that so a set is actually faster than a list if you need to check to see if something is within a set compared to a list and they do not allow any duplicate values let me add a bunch of knives and let's see what happens so i'll have a total of three knives but when we print all of the elements of the set only one knife appears so here's a few useful methods of sets the first method is that we can add an item to our set so type in the name of the set in this case it's utensils dot and here's a bunch of methods that you can use i am looking for add and we can add an element to the set i would like to add a napkin and then if we were to print the set we do have a napkin within the set we can also remove an element utensils dot remove and i would like to remove the fork and now our fork is gone we can also clear utensils dot clear and all the elements within our set should be gone so let me turn these lines into a comment all right for this next example we'll need a second set let's create a second set called dishes and then we need a set of curly braces and let's add a bowl a plate and a cup our next method is that we're going to add one set to another by using the update method let's say we would like to add our dishes set to our utensil set so let's type utensils dot and use the update method and within this method we will pass in the set that we would like to add so utensils update dishes this will add all of the elements found within dishes to our utensil set and you can see that when we print our utensils we have a bowl a plate and a cup in here as well and then if i were to switch these around let's say dishes update utensils and then i will print everything found within dishes now there's a fork a spoon and a knife in here as well we can also join two sets together and create a new set entirely so let's create a set called dinner table like we're setting up a dinner table and we need a fork a spoon a knife a bowl a plate and a cup so we have a dinner table set we're going to set the sequel to either utensils dot union dishes or we could do dishes union utensils either way would work and let's display all the elements found within dinner table and we should now have elements from both sets utensils and dishes as well there are also some methods in which we can compare the similarities as well as the differences between the elements found within two sets let's say i would like to check to see what utensils has that dishes doesn't and for this example i think i'll add a knife to my dishes set just so that they have at least one thing in common so i would like to see what utensils has that dishes doesn't so we can do so using the difference method and i will print the results with a print statement so i'm going to compare utensils against dishes utensils dot difference dishes and this will print what utensils has that dishes doesn't which is a fork as well as a spoon and we can reverse the rolls too we could say dishes difference utensils what do dishes have that utensils doesn't and dishes has a cup a bowl and a plate they both have knives so that's why knife isn't appearing we can also check to see if there's anything that they have in common using the intersection method so i'll turn this line into a comment we'll print utensils dot intersection dishes and this will return whatever element that they have in common which is a knife all right everybody in conclusion a set is a collection which is unordered as well as being unindexed they do not allow any duplicate values and you can do things like compare two sets see if there's anything that they have in common any differences and we can add or remove elements to a set if you'd like a copy of all this code i will post all of this in the comments down below don't be afraid to smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
