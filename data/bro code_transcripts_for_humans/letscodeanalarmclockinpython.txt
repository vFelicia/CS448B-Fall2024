With timestamps:

00:00 - all right everybody so in today's video
00:02 - we're going to create a working alarm
00:03 - clock using
00:05 - [Music]
00:19 - python for this project we will need the
00:21 - following Imports we will import time
00:25 - we'll be updating our clock every second
00:27 - the time module is going to help us with
00:29 - that
00:30 - as well as import date time the date
00:34 - time module allows us to work with
00:36 - string representations of a time in my
00:38 - opinion the easiest way to work with
00:41 - sound effects is to actually use py game
00:44 - so we will import
00:46 - pame now you may need to download the
00:48 - pame package here I'm getting a message
00:51 - that there's no module named pame there
00:54 - might be a link to install it even too
00:56 - one way in which you can download the py
00:58 - game package is to open up a terminal
01:02 - then use pip pip is Python's package
01:04 - manager pip install
01:09 - pame all right we have our three Imports
01:13 - let's create a function to set
01:16 - alarm we have one parameter and alarm
01:21 - time and for now all right
01:24 - pass our alarm time parameter is going
01:27 - to be a string representation of a Time
01:30 - in military
01:31 - time I would like to start this program
01:34 - if I running my main python file
01:36 - directly I can add the following if
01:38 - statement if Dunder name is equal to a
01:43 - string of Dunder
01:45 - main if we are running this main python
01:48 - file directly then we will set the alarm
01:51 - but first we have to prompt the user
01:53 - what they would like to set the alarm to
01:55 - so we will Define a variable of alarm
01:58 - time equals
02:00 - ask for some user input using the input
02:03 - function we will prompt the user to
02:06 - enter the alarm time and give a
02:10 - format hours minutes and
02:14 - seconds again this is going to be in
02:16 - military time once we have our alarm
02:19 - time we will call the set alarm function
02:23 - and pass in our alarm
02:26 - time all right we are now within the set
02:29 - alarm function
02:30 - when we call this function let's print
02:32 - the following I'll use an F
02:35 - string alarm set 4 then include the
02:39 - alarm
02:41 - time you will need an MP3 file to work
02:44 - with if you don't have one available
02:47 - here's one
02:48 - recommendation you could use YouTube's
02:50 - audio library and then search for sound
02:53 - effects or some music these audio files
02:56 - are only allowed for non-commercial use
02:58 - outside of YouTube
03:00 - so you can search for a song or some
03:02 - sound effects find one that you like and
03:04 - download
03:06 - it once you find a song that you like
03:09 - move it to your project
03:12 - folder now I will create a variable of
03:15 - sound file equals this will be a
03:19 - relative or absolute file path my MP3
03:22 - file is right next to my main python
03:24 - file I only need to list the file name I
03:28 - named mine my music and this is an MP3
03:31 - file I'm going to perform a test run
03:34 - we're not going to play our sound quite
03:36 - yet we do have this output that displays
03:39 - that says hello from the pame community
03:41 - let's say I set my alarm to 9:00 a.m.
03:45 - then enter alarm set for 9:00
03:48 - a.m. if you would like to suppress this
03:50 - output for pame we can navigate to our
03:53 - virtual environment go to library pame
03:57 - underneath this file named Dunder in nit
04:03 - let's scroll all the way to the
04:07 - bottom and we should have this if
04:09 - statement we display the version of P
04:11 - game we're using and a print statement
04:13 - of hello from the pame community we
04:15 - could comment this out or even just
04:17 - delete it that is the most simple
04:21 - solution so we shouldn't get that
04:23 - message
04:26 - anymore we're going to create a Boolean
04:28 - variable of is run running is our alarm
04:31 - clock running I will set that to be
04:34 - true while is running while this is true
04:39 - we will continue the alarm
04:42 - clock we need to get the current time
04:46 - current time equals we will access the
04:50 - date time
04:51 - module access the class of date
04:55 - time call the now method to get the time
04:58 - and date right now
05:00 - we could method chain the string format
05:03 - method stf
05:05 - time I would like the hours minutes and
05:08 - seconds but not the date so we will type
05:12 - percent H colon let me zoom out a
05:16 - little percent M for minutes and percent
05:20 - s for
05:22 - seconds we're getting the hours minutes
05:25 - and seconds of the date and time right
05:28 - now and storing it within this variable
05:30 - of current
05:33 - time then I'm going to print the current
05:37 - time we'll perform a test run however
05:40 - currently we're within an infinite loop
05:42 - at the end of the while loop all set is
05:44 - running to be
05:48 - false okay Enter the alarm time let's
05:50 - say 10:00
05:52 - a.m. alarm set for 10:00 a.m. and the
05:56 - time for me right now is 9:42 and 16
05:59 - seconds
06:01 - we'll get rid of this line where we set
06:03 - is running to be false instead I'm going
06:06 - to access the time module and call the
06:09 - Sleep Method we will pass in a number of
06:11 - seconds to sleep so 1
06:14 - second I'll set the alarm to be 10:
06:17 - a.m. now the time should update every
06:20 - second which it
06:23 - is however when the current time is
06:26 - equal to the alarm time we have to
06:28 - trigger the alarm
06:31 - arm so after printing the current time
06:35 - we will write an if statement to check
06:37 - if the current time is equal to the
06:41 - alarm
06:43 - time if this is true then let's print
06:46 - the
06:47 - following wake
06:52 - up and I'll add an emoji cuz it's
06:56 - silly once our alarm triggers we will
06:59 - set is running to be false within the if
07:02 - statement let's do a test run we're not
07:05 - going to play the sound quite
07:08 - yet I will set the alarm to
07:12 - 945 and then I'll come back a little bit
07:18 - later all
07:20 - right once the current time matches the
07:23 - alarm time we print wake up and set is
07:27 - running to be false to exit the while
07:29 - loop Loop and then subsequently exiting
07:32 - the program now we need to play an MP3
07:37 - file we will access our package of
07:40 - pame access the module of
07:44 - mixer so mixer is a module for loading
07:47 - and playing
07:48 - sounds but we have to initialize it but
07:51 - we're going to initialize it with init
07:54 - to
07:55 - initialize the initialize method is
07:57 - another way to call the Constructor we
08:00 - can pass in some keyword arguments for
08:01 - the frequency size channels buffer all
08:05 - that but that might be a little too
08:07 - complicated for us at this level we'll
08:09 - use the default settings by not passing
08:11 - in
08:12 - anything the next step is to load our
08:14 - sound file access the package of pame
08:18 - access the module of
08:21 - mixer access the module of music then
08:25 - call the load method we will load our
08:28 - sound file
08:33 - our sound file contains the file path to
08:35 - our MP3 file once we load our music we
08:38 - have to play it py game.
08:43 - mixer. music called the play
08:47 - Method our MP3 file is only going to
08:50 - play for a brief second I'll demonstrate
08:52 - that I will set the alarm to
08:57 - 949 and just give it a few seconds
09:05 - our sound file stops playing when the
09:08 - program terminates what we need to do
09:11 - next is continue playing our sound file
09:14 - while that sound file is busy we will
09:16 - add a while
09:18 - loop
09:20 - while access py
09:22 - game.
09:26 - mixer.
09:27 - music call the get busy
09:31 - method this returns a
09:33 - Boolean if our song is busy if it's
09:36 - still playing then we will call the time
09:39 - modules Sleep Method and sleep for 1
09:43 - second once the song finishes or we
09:46 - terminate the program prematurely the
09:49 - sound file will no longer be busy so
09:52 - this should be the finished product
09:54 - Let's test it I will set the alarm for
09:58 - 952
10:02 - and we just have to give it some time
10:11 - [Music]

Cleaned transcript:

all right everybody so in today's video we're going to create a working alarm clock using python for this project we will need the following Imports we will import time we'll be updating our clock every second the time module is going to help us with that as well as import date time the date time module allows us to work with string representations of a time in my opinion the easiest way to work with sound effects is to actually use py game so we will import pame now you may need to download the pame package here I'm getting a message that there's no module named pame there might be a link to install it even too one way in which you can download the py game package is to open up a terminal then use pip pip is Python's package manager pip install pame all right we have our three Imports let's create a function to set alarm we have one parameter and alarm time and for now all right pass our alarm time parameter is going to be a string representation of a Time in military time I would like to start this program if I running my main python file directly I can add the following if statement if Dunder name is equal to a string of Dunder main if we are running this main python file directly then we will set the alarm but first we have to prompt the user what they would like to set the alarm to so we will Define a variable of alarm time equals ask for some user input using the input function we will prompt the user to enter the alarm time and give a format hours minutes and seconds again this is going to be in military time once we have our alarm time we will call the set alarm function and pass in our alarm time all right we are now within the set alarm function when we call this function let's print the following I'll use an F string alarm set 4 then include the alarm time you will need an MP3 file to work with if you don't have one available here's one recommendation you could use YouTube's audio library and then search for sound effects or some music these audio files are only allowed for noncommercial use outside of YouTube so you can search for a song or some sound effects find one that you like and download it once you find a song that you like move it to your project folder now I will create a variable of sound file equals this will be a relative or absolute file path my MP3 file is right next to my main python file I only need to list the file name I named mine my music and this is an MP3 file I'm going to perform a test run we're not going to play our sound quite yet we do have this output that displays that says hello from the pame community let's say I set my alarm to 900 a.m. then enter alarm set for 900 a.m. if you would like to suppress this output for pame we can navigate to our virtual environment go to library pame underneath this file named Dunder in nit let's scroll all the way to the bottom and we should have this if statement we display the version of P game we're using and a print statement of hello from the pame community we could comment this out or even just delete it that is the most simple solution so we shouldn't get that message anymore we're going to create a Boolean variable of is run running is our alarm clock running I will set that to be true while is running while this is true we will continue the alarm clock we need to get the current time current time equals we will access the date time module access the class of date time call the now method to get the time and date right now we could method chain the string format method stf time I would like the hours minutes and seconds but not the date so we will type percent H colon let me zoom out a little percent M for minutes and percent s for seconds we're getting the hours minutes and seconds of the date and time right now and storing it within this variable of current time then I'm going to print the current time we'll perform a test run however currently we're within an infinite loop at the end of the while loop all set is running to be false okay Enter the alarm time let's say 1000 a.m. alarm set for 1000 a.m. and the time for me right now is 942 and 16 seconds we'll get rid of this line where we set is running to be false instead I'm going to access the time module and call the Sleep Method we will pass in a number of seconds to sleep so 1 second I'll set the alarm to be 10 a.m. now the time should update every second which it is however when the current time is equal to the alarm time we have to trigger the alarm arm so after printing the current time we will write an if statement to check if the current time is equal to the alarm time if this is true then let's print the following wake up and I'll add an emoji cuz it's silly once our alarm triggers we will set is running to be false within the if statement let's do a test run we're not going to play the sound quite yet I will set the alarm to 945 and then I'll come back a little bit later all right once the current time matches the alarm time we print wake up and set is running to be false to exit the while loop Loop and then subsequently exiting the program now we need to play an MP3 file we will access our package of pame access the module of mixer so mixer is a module for loading and playing sounds but we have to initialize it but we're going to initialize it with init to initialize the initialize method is another way to call the Constructor we can pass in some keyword arguments for the frequency size channels buffer all that but that might be a little too complicated for us at this level we'll use the default settings by not passing in anything the next step is to load our sound file access the package of pame access the module of mixer access the module of music then call the load method we will load our sound file our sound file contains the file path to our MP3 file once we load our music we have to play it py game. mixer. music called the play Method our MP3 file is only going to play for a brief second I'll demonstrate that I will set the alarm to 949 and just give it a few seconds our sound file stops playing when the program terminates what we need to do next is continue playing our sound file while that sound file is busy we will add a while loop while access py game. mixer. music call the get busy method this returns a Boolean if our song is busy if it's still playing then we will call the time modules Sleep Method and sleep for 1 second once the song finishes or we terminate the program prematurely the sound file will no longer be busy so this should be the finished product Let's test it I will set the alarm for 952 and we just have to give it some time
