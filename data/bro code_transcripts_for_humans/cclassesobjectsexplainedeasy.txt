With timestamps:

00:02 - hey everybody so we have finally made it
00:04 - to object-oriented programming an object
00:07 - think of it as a collection of
00:09 - attributes and methods
00:11 - attributes are characteristics of an
00:13 - object methods are functions that an
00:15 - object can perform
00:17 - objects can be used to mimic real world
00:20 - items
00:21 - so look around you right now next to me
00:23 - i have a phone
00:25 - a book and a dog think of attributes as
00:28 - characteristics
00:30 - what kinds of characteristics would a
00:31 - phone have maybe a version number
00:34 - a charge a service provider objects can
00:38 - also contain methods what kinds of
00:40 - actions can a phone perform they can
00:42 - make calls receive calls play games now
00:46 - with a book some of the attributes of a
00:48 - book could be maybe an author number of
00:51 - pages let's see what kinds of methods
00:53 - can a book perform really not much you
00:55 - can open a book and you can close it so
00:58 - those are just a few okay lastly how
01:00 - about a dog object some of the
01:01 - attributes of a dog could be a name an
01:04 - age
01:05 - maybe a breed of dog then what kinds of
01:08 - actions can dogs perform they can eat
01:11 - they can bark they can sleep maybe play
01:14 - fetch so i think you get the idea an
01:16 - object is a collection of attributes and
01:18 - methods now to create an object we can
01:20 - use a class
01:22 - a class acts as a blueprint to create
01:24 - objects let's create a class to create
01:27 - human objects
01:29 - i will type
01:31 - class
01:32 - human
01:33 - curly braces
01:34 - i'm going to add a public access
01:37 - modifier
01:38 - we'll learn about axis modifiers pretty
01:40 - soon i would like these attributes and
01:42 - methods to be publicly accessible let's
01:45 - start with the attributes of humans what
01:47 - kinds of characteristics can humans have
01:50 - how about a name
01:53 - this will be of the string data type
01:56 - i'll declare this attribute but not yet
01:58 - assign it
02:00 - maybe an occupation like a job
02:02 - standard string
02:04 - occupation
02:07 - then maybe an age int age
02:10 - our class human has these attributes
02:13 - humans have a name an occupation and an
02:16 - age that's good enough for this example
02:18 - now let's cover methods a method is a
02:21 - function that belongs to a class it's
02:24 - something that an object can do an
02:26 - action it can perform what sorts of
02:28 - actions should our humans be able to
02:29 - perform how about an eat method
02:33 - void
02:34 - eat
02:36 - i'll just display a message standard
02:38 - output
02:40 - uh let's say this
02:42 - person is eating
02:45 - humans can drink
02:47 - void drink
02:50 - standard output
02:53 - this person is drinking
02:57 - okay one last example
02:59 - how about sleep human sleep right void
03:03 - sleep
03:04 - standard output
03:07 - this person is sleeping
03:12 - good enough oh then make sure we add a
03:14 - semicolon to the end of the class
03:16 - perfect okay so we now have a human
03:19 - class
03:20 - we can use this class as a blueprint to
03:23 - create human objects each human object
03:26 - will have a name an occupation and an
03:29 - age they can also eat drink or sleep
03:33 - they have their own functions which we
03:35 - call methods
03:37 - so to create a human object we will type
03:39 - the name of the class
03:41 - human
03:43 - then a unique identifier
03:46 - how about human one that's creative
03:49 - so human one is an object human one has
03:53 - a name an occupation and an age but we
03:56 - have not assigned these attributes
03:59 - let's say humanone's name human one
04:02 - member axis modifier which is a dot
04:06 - name
04:07 - equals rick
04:10 - then human one's
04:13 - occupation
04:16 - equals scientist
04:20 - human one's
04:22 - age equals 70.
04:25 - let's verify that this worked by
04:27 - printing out these attributes
04:29 - standard output
04:31 - human1 dot name
04:35 - i'll add a new line
04:39 - then let's repeat this for occupation
04:41 - and age
04:43 - human1 dot occupation humanone dot age
04:51 - human one's name is rick his occupation
04:54 - is a scientist his age is 70 years old
04:58 - so this part is kind of similar to
05:00 - structs
05:01 - however objects can also perform actions
05:04 - they have methods
05:06 - rick can eat drink and sleep
05:09 - so to invoke those methods i would type
05:11 - the name of my object human1
05:14 - and let's have human one eat
05:18 - so human1 dot eat
05:20 - add a set of parentheses to invoke this
05:22 - method
05:25 - okay this person is eating
05:27 - let's also test drink and sleep
05:31 - human one dot drink
05:36 - human one dot sleep
05:42 - okay this person is eating this person
05:44 - is drinking this person is sleeping and
05:47 - that is our human human one for more
05:49 - practice let's create a second human
05:52 - human
05:53 - human two
05:56 - i'm going to copy these lines
05:59 - let's change human one to human two
06:03 - human two's name will be morty
06:06 - occupation will be student
06:09 - age what about 15
06:12 - i'm going to display the attributes of
06:14 - human 2 this time
06:16 - then i'll have human 2 invoke its
06:18 - methods
06:19 - eat drink then sleep
06:22 - okay human two's name is morty their
06:25 - occupation is a student
06:27 - morty is 15 years old then morty can
06:29 - perform these actions eat drink and
06:32 - sleep now you can assign some default
06:35 - attributes
06:36 - so let's say that all humans we create
06:38 - will be named rick it's kind of like
06:40 - we're cloning him
06:42 - his occupation will be
06:45 - scientist
06:47 - age will be 70.
06:50 - i'm not going to assign these attributes
06:52 - what i did is that i added some default
06:54 - attributes
06:56 - so we have human one and human two
07:01 - i'll display the attributes of human one
07:03 - first then human two
07:05 - human one dot name
07:07 - occupation age
07:10 - then we have human two's attributes as
07:11 - well
07:12 - so remember i am not assigning these
07:14 - attributes within the main function
07:17 - we have two humans they're both named
07:19 - rick they're both scientists and they're
07:21 - both age 70. okay now here's one last
07:24 - example to really get the hang of
07:26 - objects let's create a different class
07:28 - this time how about cars
07:31 - class car
07:33 - let's add a public axis modifier
07:36 - then what kinds of attributes would cars
07:38 - have
07:39 - perhaps a make
07:41 - standard string make
07:45 - a model
07:46 - standard string model
07:50 - a year that would be an int
07:52 - then maybe a color standard string color
07:57 - you can add some default attributes but
07:59 - i'll just leave those empty for now
08:01 - you can add some methods
08:03 - what kinds of actions can cars take i
08:06 - guess you can accelerate
08:07 - void accelerate
08:11 - standard output uh what can we print
08:15 - you step on the gas
08:21 - then maybe break
08:23 - void break
08:26 - standard output
08:29 - you step on the breaks
08:34 - then be sure to add a semicolon to the
08:36 - end of your class because i always
08:38 - forget to do that
08:39 - okay we now have a car class it acts as
08:42 - a blueprint to create car objects
08:44 - to create an object we would type the
08:46 - name of the class
08:47 - car in this example
08:49 - then a unique identifier for the object
08:51 - let's say
08:53 - then we can assign some of the
08:55 - attributes of this car object
08:57 - car one dot
08:59 - make
09:00 - maybe ford
09:03 - car one
09:04 - dot model
09:08 - equals mustang i like mustangs
09:11 - car one dot year
09:14 - equals 20 23
09:16 - then a color car one dot color
09:20 - maybe silver
09:22 - okay then just to test these let's print
09:24 - these attributes
09:27 - standard output
09:29 - car one
09:30 - dot make
09:32 - i'll add a new line
09:34 - let's copy this line paste it three
09:37 - times
09:39 - then we'll display the model
09:42 - year
09:43 - then color
09:45 - okay our car object is a ford mustang
09:48 - the year is 2023 the color is silver
09:51 - not only does our car have attributes
09:53 - but it has methods actions it can
09:55 - perform as well
09:56 - our car can accelerate and it can break
09:59 - let's test that
10:02 - car one dot
10:04 - accelerate
10:08 - car one dot break
10:12 - okay you step on the gas you step on the
10:15 - brakes
10:16 - then if i need a second car object i can
10:18 - type car
10:20 - car 2
10:21 - then i can assign the attributes and i
10:24 - have access to its methods so yeah
10:26 - that's an object everybody it's a
10:28 - collection of attributes and methods
10:31 - attributes are characteristics of an
10:33 - object methods are functions that an
10:36 - object can perform
10:38 - so yeah those are objects everybody in
10:40 - the next video we're going to cover
10:42 - constructors
10:43 - your assignment is to post a class in
10:45 - the comments section down below so yeah
10:48 - that's an introduction to
10:49 - object-oriented programming in c plus

Cleaned transcript:

hey everybody so we have finally made it to objectoriented programming an object think of it as a collection of attributes and methods attributes are characteristics of an object methods are functions that an object can perform objects can be used to mimic real world items so look around you right now next to me i have a phone a book and a dog think of attributes as characteristics what kinds of characteristics would a phone have maybe a version number a charge a service provider objects can also contain methods what kinds of actions can a phone perform they can make calls receive calls play games now with a book some of the attributes of a book could be maybe an author number of pages let's see what kinds of methods can a book perform really not much you can open a book and you can close it so those are just a few okay lastly how about a dog object some of the attributes of a dog could be a name an age maybe a breed of dog then what kinds of actions can dogs perform they can eat they can bark they can sleep maybe play fetch so i think you get the idea an object is a collection of attributes and methods now to create an object we can use a class a class acts as a blueprint to create objects let's create a class to create human objects i will type class human curly braces i'm going to add a public access modifier we'll learn about axis modifiers pretty soon i would like these attributes and methods to be publicly accessible let's start with the attributes of humans what kinds of characteristics can humans have how about a name this will be of the string data type i'll declare this attribute but not yet assign it maybe an occupation like a job standard string occupation then maybe an age int age our class human has these attributes humans have a name an occupation and an age that's good enough for this example now let's cover methods a method is a function that belongs to a class it's something that an object can do an action it can perform what sorts of actions should our humans be able to perform how about an eat method void eat i'll just display a message standard output uh let's say this person is eating humans can drink void drink standard output this person is drinking okay one last example how about sleep human sleep right void sleep standard output this person is sleeping good enough oh then make sure we add a semicolon to the end of the class perfect okay so we now have a human class we can use this class as a blueprint to create human objects each human object will have a name an occupation and an age they can also eat drink or sleep they have their own functions which we call methods so to create a human object we will type the name of the class human then a unique identifier how about human one that's creative so human one is an object human one has a name an occupation and an age but we have not assigned these attributes let's say humanone's name human one member axis modifier which is a dot name equals rick then human one's occupation equals scientist human one's age equals 70. let's verify that this worked by printing out these attributes standard output human1 dot name i'll add a new line then let's repeat this for occupation and age human1 dot occupation humanone dot age human one's name is rick his occupation is a scientist his age is 70 years old so this part is kind of similar to structs however objects can also perform actions they have methods rick can eat drink and sleep so to invoke those methods i would type the name of my object human1 and let's have human one eat so human1 dot eat add a set of parentheses to invoke this method okay this person is eating let's also test drink and sleep human one dot drink human one dot sleep okay this person is eating this person is drinking this person is sleeping and that is our human human one for more practice let's create a second human human human two i'm going to copy these lines let's change human one to human two human two's name will be morty occupation will be student age what about 15 i'm going to display the attributes of human 2 this time then i'll have human 2 invoke its methods eat drink then sleep okay human two's name is morty their occupation is a student morty is 15 years old then morty can perform these actions eat drink and sleep now you can assign some default attributes so let's say that all humans we create will be named rick it's kind of like we're cloning him his occupation will be scientist age will be 70. i'm not going to assign these attributes what i did is that i added some default attributes so we have human one and human two i'll display the attributes of human one first then human two human one dot name occupation age then we have human two's attributes as well so remember i am not assigning these attributes within the main function we have two humans they're both named rick they're both scientists and they're both age 70. okay now here's one last example to really get the hang of objects let's create a different class this time how about cars class car let's add a public axis modifier then what kinds of attributes would cars have perhaps a make standard string make a model standard string model a year that would be an int then maybe a color standard string color you can add some default attributes but i'll just leave those empty for now you can add some methods what kinds of actions can cars take i guess you can accelerate void accelerate standard output uh what can we print you step on the gas then maybe break void break standard output you step on the breaks then be sure to add a semicolon to the end of your class because i always forget to do that okay we now have a car class it acts as a blueprint to create car objects to create an object we would type the name of the class car in this example then a unique identifier for the object let's say then we can assign some of the attributes of this car object car one dot make maybe ford car one dot model equals mustang i like mustangs car one dot year equals 20 23 then a color car one dot color maybe silver okay then just to test these let's print these attributes standard output car one dot make i'll add a new line let's copy this line paste it three times then we'll display the model year then color okay our car object is a ford mustang the year is 2023 the color is silver not only does our car have attributes but it has methods actions it can perform as well our car can accelerate and it can break let's test that car one dot accelerate car one dot break okay you step on the gas you step on the brakes then if i need a second car object i can type car car 2 then i can assign the attributes and i have access to its methods so yeah that's an object everybody it's a collection of attributes and methods attributes are characteristics of an object methods are functions that an object can perform so yeah those are objects everybody in the next video we're going to cover constructors your assignment is to post a class in the comments section down below so yeah that's an introduction to objectoriented programming in c plus
