With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro hope you're doing well and in this
00:03 - video i'm going to explain
00:04 - methods in java so sit back relax and
00:07 - enjoy the show
00:10 - you can become a hero and save our
00:12 - channel by smashing that like button
00:14 - drop a comment down below and subscribe
00:16 - if you'd like to become a fellow bro
00:19 - all right welcome back guys and gals in
00:21 - this video i'm going to explain methods
00:24 - a method is a block of code that is
00:26 - executed whenever
00:28 - it is called upon for example when we
00:30 - begin our program and execute it
00:32 - we begin by calling the main method
00:35 - that's where we've been writing
00:36 - a majority of our code so anything
00:38 - within this set
00:40 - of curly braces belongs to this main
00:43 - method
00:43 - this time we're going to create our own
00:45 - method that we can call whenever we need
00:47 - it
00:47 - so outside of our main method make sure
00:50 - you don't write this within the main
00:51 - method
00:52 - we're going to create a another method
00:54 - perhaps a method that will display a
00:56 - message such as hello
00:58 - and to begin creating a method we'll
00:59 - need a return type i'll explain return
01:01 - types later on in this video
01:03 - for now we're going to list the word
01:05 - void
01:06 - followed by a method name our main
01:09 - method is called main and a common
01:11 - naming convention
01:12 - for methods is to have the first letter
01:14 - lowercase
01:15 - so let's create a method called hello
01:17 - when we call this method
01:19 - it will display a message such as hello
01:22 - so this will be hello with a lowercase h
01:25 - then we need a set of parentheses and
01:27 - then a set of curly braces
01:29 - anything within the set of curly braces
01:32 - belongs to the hello method
01:33 - and if we call the hello method it's
01:35 - going to perform whatever code is
01:36 - between
01:37 - these two curly braces so what would we
01:39 - like to do when we call this method
01:41 - let's display a message such as hello
01:45 - now within our main method we can call
01:47 - also known as
01:48 - invoking this method so within our main
01:50 - method we can call
01:51 - the hello method whenever we want now we
01:54 - have just one issue that we need to take
01:56 - care of and let me explain we cannot
01:58 - make a static reference to the
02:00 - non-static method hello from the type
02:02 - main
02:03 - so this means that we need to precede
02:06 - this method with the keyword of static
02:08 - because we're calling the hello method
02:11 - from a static method of main right here
02:14 - so normally we do not need to add this
02:17 - keyword of static
02:18 - and if you want to learn more about
02:19 - things that are static i do have a video
02:22 - on it but for now we just need to add
02:24 - this keyword in order for this program
02:26 - to work for this example
02:28 - so when we call the hello method it's
02:30 - going to perform whatever is within
02:32 - our block of code and here it just
02:34 - displays the word hello
02:36 - and we can call this method whenever we
02:38 - want and however many times we want
02:40 - so if we want to display the word hello
02:42 - three times we can just call the method
02:44 - three separate times and this method
02:47 - will perform
02:47 - its task its block of code however many
02:50 - times it is called
02:51 - one feature available to methods is that
02:53 - we can pass a value or
02:55 - a variable to a method when we call it
02:58 - for example we can pass a string
03:01 - variable
03:01 - to represent a name and then we can use
03:04 - that name for something within our block
03:06 - of code
03:07 - so for example let's pass in a name
03:10 - of whatever your name is let's say bro
03:13 - we can pass
03:14 - in a value or a variable so
03:17 - for this example i'm going to pass in a
03:19 - variable called
03:20 - name string name equals pro and i'm
03:23 - going to pass
03:24 - my variable of name into my method
03:27 - so if you want to pass a value or
03:30 - variable to a method
03:32 - when you call that method within the
03:33 - parentheses just list
03:35 - all of the values that you would like to
03:37 - pass to your method
03:39 - the values or variables that you're
03:41 - sending to a method
03:42 - are known as arguments and they can be
03:44 - confused with what's known as
03:46 - parameters in order to pass some values
03:49 - or variables to a method
03:51 - when we declare our method we need a
03:53 - matching set of what's known as
03:55 - parameters
03:56 - think of these as the rules in order to
03:59 - call this method
04:00 - we need a matching set of arguments and
04:03 - parameters
04:04 - currently these are not matching we're
04:06 - passing in a string
04:08 - but there is no matching parameter so
04:10 - this is how to set up a parameter for a
04:12 - method
04:13 - we're first going to begin by listing
04:15 - the data type of the value that our
04:17 - method is expecting
04:18 - so we're passing in a string as an
04:21 - argument
04:22 - so we need a string parameter so we need
04:25 - to first list the data type
04:27 - followed by a name for this value just
04:29 - to make it simple i'm going to call this
04:31 - name
04:32 - so we now have a matching set of
04:34 - arguments
04:35 - and parameters and now since we're
04:37 - passing in our name variable to our
04:40 - method of hello
04:41 - our hello method now has access to a
04:44 - string
04:44 - variable of name and it contains this
04:47 - value of bro
04:48 - so now we can use this name for
04:49 - something let's display
04:51 - hello plus name and when we call this
04:54 - method
04:54 - and pass in our name it's going to
04:56 - display the word hello
04:58 - plus our name hello bro so
05:01 - with parameters you don't necessarily
05:03 - need to keep
05:04 - the names of the values consistent i
05:06 - could change
05:07 - this name to something else like
05:11 - title i guess and then i will switch
05:14 - that around and this will work
05:16 - just the same so these don't necessarily
05:18 - have to be called
05:19 - the same thing the argument and the
05:22 - parameter you can change the name if you
05:23 - want
05:24 - even something like this would work too
05:27 - i don't know why you would write it like
05:28 - that but you can so with methods you can
05:31 - pass in
05:32 - more than one argument as long as you
05:34 - have a matching set of parameters
05:36 - this time let's pass in an integer value
05:39 - let's create an integer variable called
05:41 - age hint age
05:43 - equals and i'll set this to 21 this time
05:46 - so within my hello method i'm going to
05:48 - pass in my name
05:50 - and edge as arguments to my hello method
05:53 - however we have a problem if i attempt
05:56 - to run this
05:57 - we do not have a matching set of
05:59 - arguments
06:00 - name and age and parameters we're
06:03 - passing in a string
06:04 - and an integer and our method has
06:07 - parameters
06:08 - set up to accept only a string so we
06:11 - need to finish
06:12 - setting up the parameters for this hello
06:14 - method so that the arguments
06:16 - and parameters match so we need an
06:19 - integer
06:20 - and we will call this age and then we
06:22 - can use this age variable for something
06:24 - so within another print line statement
06:26 - let's display
06:27 - u r plus h
06:31 - and now this will work because we have a
06:33 - matching set of arguments
06:35 - and parameters and before we finish this
06:38 - video i would like to explain
06:40 - return types we can return a value back
06:43 - to the area in which we called a method
06:46 - so for this example on return types i
06:48 - think this can be best explained with
06:50 - a separate example so i'm going to clear
06:53 - out all of this
06:53 - and create a new example let's say we
06:56 - have two integer values
06:57 - into x this will equal maybe three and
07:00 - into y this will equal four well let's
07:03 - create a method
07:04 - that will add these two numbers and
07:06 - return
07:07 - the sum the result of these two numbers
07:10 - so outside of the main method
07:11 - let's declare a method static normally
07:15 - we would type
07:16 - void if we're not returning anything but
07:18 - if we're going to be returning a value
07:20 - we need to list the data type of the
07:22 - value that we're returning
07:24 - if we're going to add two integers
07:26 - together and return the sum
07:28 - we're going to list the return type as
07:30 - integer because
07:31 - that's the data type of the value that
07:33 - we would like to return
07:34 - we would like to return an integer and
07:37 - then we will list
07:38 - the method name let's call this add
07:40 - parentheses and then a set of curly
07:42 - braces
07:43 - so we cannot normally finish compiling
07:46 - this because if we're listing a return
07:48 - type
07:48 - we need to list a return statement what
07:51 - do we want to return
07:53 - well we're going to return an integer
07:55 - but we'll have to get to that later
07:57 - so let's begin by setting up the
07:59 - parameters for our add method
08:01 - let's say we would like an integer let's
08:04 - call this
08:04 - x and int y so in order to call the add
08:09 - method we need to pass in
08:10 - two arguments two integers
08:14 - so let's call the add method and pass in
08:16 - our variables x
08:17 - and y and within the add method
08:21 - we will add these two numbers together
08:23 - we could store this within
08:24 - a separate variable into z equals
08:28 - x plus y and then we could return
08:31 - our value of z so when we run this
08:35 - what's gonna happen well it doesn't
08:37 - display anything that's because
08:39 - when we return the value of z to this
08:42 - area in which we called
08:43 - our method well we're not currently
08:45 - doing anything with this value
08:47 - so we could store this within a variable
08:50 - or display it directly to the console
08:51 - window
08:52 - so let's store the sum within int
08:55 - z and z equals add x and y
08:59 - so you may have noticed that we declared
09:02 - this variable twice
09:03 - in z within our main method and within
09:06 - our add method
09:07 - this is technically legal because they
09:09 - are known as what's called
09:11 - local variables int z is only recognized
09:14 - by anything
09:15 - within the immediate set of curly braces
09:18 - it's known as a local variable
09:21 - add method does not recognize this int
09:25 - variable of z so we could declare our
09:27 - own to use
09:28 - or you can rename it too it doesn't
09:30 - really matter what you do
09:32 - so we can store the sum of our add
09:35 - method within
09:37 - int z and then do something with it such
09:39 - as display it to the console window
09:42 - system.out.line z so this will display
09:46 - the sum
09:47 - of seven another way in which you could
09:49 - write this we don't necessarily need
09:51 - to store the value in which we're
09:53 - returning to a variable
09:55 - we could just directly display it to the
09:57 - console window too
09:59 - so within my print line i'm going to
10:01 - call the add method
10:03 - and pass in x and y and this will still
10:06 - display
10:06 - seven another way in which we could
10:09 - shorten our method
10:10 - is that we don't need to store the sum
10:12 - within a variable
10:13 - we could just return x plus y
10:17 - so let me clear this line and we could
10:19 - return
10:20 - x plus y and this would be valid too so
10:23 - that's another
10:24 - way of writing this well everybody those
10:27 - are methods they are really just a block
10:30 - of code
10:31 - that is executed whenever it is called
10:33 - upon
10:34 - you can pass in values or variables
10:36 - known as
10:37 - arguments but in order to do so your
10:39 - method when you declare it
10:41 - needs a matching set of parameters and
10:44 - then you could return a value if you
10:46 - need to
10:46 - instead of using the word void just list
10:49 - the data type of the value
10:50 - that you're returning so if you would
10:52 - like a copy of all this code
10:54 - i will post everything in the comments
10:56 - down below and don't forget to smash
10:58 - that like button
10:59 - drop a comment down below and subscribe
11:01 - if you'd like to become a fellow bro

Cleaned transcript:

hey what's going on everybody it's your bro hope you're doing well and in this video i'm going to explain methods in java so sit back relax and enjoy the show you can become a hero and save our channel by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro all right welcome back guys and gals in this video i'm going to explain methods a method is a block of code that is executed whenever it is called upon for example when we begin our program and execute it we begin by calling the main method that's where we've been writing a majority of our code so anything within this set of curly braces belongs to this main method this time we're going to create our own method that we can call whenever we need it so outside of our main method make sure you don't write this within the main method we're going to create a another method perhaps a method that will display a message such as hello and to begin creating a method we'll need a return type i'll explain return types later on in this video for now we're going to list the word void followed by a method name our main method is called main and a common naming convention for methods is to have the first letter lowercase so let's create a method called hello when we call this method it will display a message such as hello so this will be hello with a lowercase h then we need a set of parentheses and then a set of curly braces anything within the set of curly braces belongs to the hello method and if we call the hello method it's going to perform whatever code is between these two curly braces so what would we like to do when we call this method let's display a message such as hello now within our main method we can call also known as invoking this method so within our main method we can call the hello method whenever we want now we have just one issue that we need to take care of and let me explain we cannot make a static reference to the nonstatic method hello from the type main so this means that we need to precede this method with the keyword of static because we're calling the hello method from a static method of main right here so normally we do not need to add this keyword of static and if you want to learn more about things that are static i do have a video on it but for now we just need to add this keyword in order for this program to work for this example so when we call the hello method it's going to perform whatever is within our block of code and here it just displays the word hello and we can call this method whenever we want and however many times we want so if we want to display the word hello three times we can just call the method three separate times and this method will perform its task its block of code however many times it is called one feature available to methods is that we can pass a value or a variable to a method when we call it for example we can pass a string variable to represent a name and then we can use that name for something within our block of code so for example let's pass in a name of whatever your name is let's say bro we can pass in a value or a variable so for this example i'm going to pass in a variable called name string name equals pro and i'm going to pass my variable of name into my method so if you want to pass a value or variable to a method when you call that method within the parentheses just list all of the values that you would like to pass to your method the values or variables that you're sending to a method are known as arguments and they can be confused with what's known as parameters in order to pass some values or variables to a method when we declare our method we need a matching set of what's known as parameters think of these as the rules in order to call this method we need a matching set of arguments and parameters currently these are not matching we're passing in a string but there is no matching parameter so this is how to set up a parameter for a method we're first going to begin by listing the data type of the value that our method is expecting so we're passing in a string as an argument so we need a string parameter so we need to first list the data type followed by a name for this value just to make it simple i'm going to call this name so we now have a matching set of arguments and parameters and now since we're passing in our name variable to our method of hello our hello method now has access to a string variable of name and it contains this value of bro so now we can use this name for something let's display hello plus name and when we call this method and pass in our name it's going to display the word hello plus our name hello bro so with parameters you don't necessarily need to keep the names of the values consistent i could change this name to something else like title i guess and then i will switch that around and this will work just the same so these don't necessarily have to be called the same thing the argument and the parameter you can change the name if you want even something like this would work too i don't know why you would write it like that but you can so with methods you can pass in more than one argument as long as you have a matching set of parameters this time let's pass in an integer value let's create an integer variable called age hint age equals and i'll set this to 21 this time so within my hello method i'm going to pass in my name and edge as arguments to my hello method however we have a problem if i attempt to run this we do not have a matching set of arguments name and age and parameters we're passing in a string and an integer and our method has parameters set up to accept only a string so we need to finish setting up the parameters for this hello method so that the arguments and parameters match so we need an integer and we will call this age and then we can use this age variable for something so within another print line statement let's display u r plus h and now this will work because we have a matching set of arguments and parameters and before we finish this video i would like to explain return types we can return a value back to the area in which we called a method so for this example on return types i think this can be best explained with a separate example so i'm going to clear out all of this and create a new example let's say we have two integer values into x this will equal maybe three and into y this will equal four well let's create a method that will add these two numbers and return the sum the result of these two numbers so outside of the main method let's declare a method static normally we would type void if we're not returning anything but if we're going to be returning a value we need to list the data type of the value that we're returning if we're going to add two integers together and return the sum we're going to list the return type as integer because that's the data type of the value that we would like to return we would like to return an integer and then we will list the method name let's call this add parentheses and then a set of curly braces so we cannot normally finish compiling this because if we're listing a return type we need to list a return statement what do we want to return well we're going to return an integer but we'll have to get to that later so let's begin by setting up the parameters for our add method let's say we would like an integer let's call this x and int y so in order to call the add method we need to pass in two arguments two integers so let's call the add method and pass in our variables x and y and within the add method we will add these two numbers together we could store this within a separate variable into z equals x plus y and then we could return our value of z so when we run this what's gonna happen well it doesn't display anything that's because when we return the value of z to this area in which we called our method well we're not currently doing anything with this value so we could store this within a variable or display it directly to the console window so let's store the sum within int z and z equals add x and y so you may have noticed that we declared this variable twice in z within our main method and within our add method this is technically legal because they are known as what's called local variables int z is only recognized by anything within the immediate set of curly braces it's known as a local variable add method does not recognize this int variable of z so we could declare our own to use or you can rename it too it doesn't really matter what you do so we can store the sum of our add method within int z and then do something with it such as display it to the console window system.out.line z so this will display the sum of seven another way in which you could write this we don't necessarily need to store the value in which we're returning to a variable we could just directly display it to the console window too so within my print line i'm going to call the add method and pass in x and y and this will still display seven another way in which we could shorten our method is that we don't need to store the sum within a variable we could just return x plus y so let me clear this line and we could return x plus y and this would be valid too so that's another way of writing this well everybody those are methods they are really just a block of code that is executed whenever it is called upon you can pass in values or variables known as arguments but in order to do so your method when you declare it needs a matching set of parameters and then you could return a value if you need to instead of using the word void just list the data type of the value that you're returning so if you would like a copy of all this code i will post everything in the comments down below and don't forget to smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro
