With timestamps:

00:00 - okay let's do this everybody we got to
00:02 - talk about the use ref hook in react use
00:05 - ref meaning use reference is very
00:07 - similar to use State use State Stores
00:10 - some sort of value or an object or an
00:12 - array whenever the state value changes
00:15 - use State rerenders the component which
00:18 - isn't always what we want use ref
00:20 - meaning use reference it doesn't cause
00:23 - rerenders when it's value changes use
00:26 - use ref when you want a component to
00:28 - remember some information
00:30 - but you don't want that information to
00:32 - trigger new renders use ref is helpful
00:35 - with accessing and interacting with dom
00:37 - elements handling Focus animations and
00:40 - transitions as well as managing timers
00:42 - and intervals UST State triggers
00:45 - rerenders use ref doesn't in order for
00:48 - us to use the use ref hook we have to
00:50 - import it from
00:52 - react import use ref for this sample
00:55 - program we'll be using UST State
00:57 - originally then we'll switch it up and
00:59 - use use ref to see the differences we'll
01:02 - Begin by using the use State hook we
01:04 - will have a state variable of number and
01:08 - a Setter for number equals U State I
01:12 - will set the initial state of number to
01:14 - be zero we will return a button
01:21 - element the button will have text of
01:24 - Click me I will set the onclick event
01:28 - handler equal to
01:30 - a function of handle click then we just
01:34 - need to declare this
01:36 - function function handle click no
01:39 - parameters what do we want to do when we
01:42 - click on the button let's use the setter
01:44 - for
01:46 - number and increment the previous state
01:49 - of number by
01:51 - one n + one whenever my number updates
01:56 - it's going to cause my component to
01:57 - render I can demonstrate that with the
01:59 - use effect hook so before our function
02:02 - of handle click let's use use effect
02:06 - with use effect if we don't pass in a
02:08 - dependency array we'll perform some code
02:11 - every time this component renders so for
02:14 - this demonstration let's
02:16 - console.log component rendered anytime
02:20 - this component renders use effect is
02:22 - going to execute this code where we
02:24 - display component rendered so I'm going
02:27 - to go to my
02:28 - console
02:31 - when your component mounts you'll render
02:33 - your component twice that's if you're in
02:35 - strict mode just temporarily for this
02:37 - demonstration I am going to remove
02:39 - strict
02:41 - mode so our component renders once on
02:43 - Mount whenever we update the state of a
02:46 - state variable that causes the component
02:48 - to
02:50 - reender that's where use ref comes in
02:54 - use ref doesn't cause a component to
02:55 - render when its value changes it's kind
02:58 - of like an escape hatch
03:00 - so instead of using a state variable
03:02 - we're going to use ref use ref means use
03:05 - reference we're referring to something
03:08 - we will declare a const of ref equals
03:13 - use ref
03:14 - function use ref returns an object an
03:17 - object that has one property of current
03:20 - if you pass in a value to use ref you
03:23 - can set the property of current to some
03:25 - value I will set the current property of
03:28 - my ref object to be zero then within
03:31 - handle click within handle click I will
03:34 - access my ref object access the current
03:38 - property then I'll have access to that
03:40 - value I will set the current property of
03:42 - ref to be ref. current property plus one
03:48 - or we could use the increment
03:51 - operator every time we click the button
03:53 - we will increase the current property of
03:56 - ref by one and then I will display what
03:58 - that value is
04:00 - console.log access our ref object access
04:03 - the current
04:04 - property let's go to inspect
04:08 - console our component rendered once
04:11 - every time I click the button our
04:13 - component isn't
04:14 - rendering we've only rendered it once
04:18 - the value stored within the current
04:20 - property of my ref object is increasing
04:22 - each time I click the button without the
04:24 - component rendering use ref returns an
04:27 - object an object that has one property a
04:31 - property of current let me show you what
04:33 - would happen if I were to
04:36 - console.log ref my
04:42 - reference so here's ref it's an object
04:45 - it's an object with one property when we
04:48 - create this reference the initial value
04:50 - is going to be the initial value we pass
04:52 - in to use ref zero but if I were to
04:55 - change this let's say that the initial
04:57 - value is p
05:01 - Pizza ref is an object an object with
05:04 - one property of current the value stored
05:07 - within my current property is a string
05:09 - of pizza so what we'll do in this next
05:12 - demonstration is create an input
05:16 - element but we do need to wrap all this
05:18 - HTML within a single element because we
05:20 - can only return a single element at a
05:22 - time
05:24 - normally so we will enclose all of our
05:27 - HTML within a div so we have a button
05:30 - and an input element the current
05:33 - property of your ref object can also
05:35 - refer to an HTML element and that's
05:37 - where use ref is really
05:40 - helpful your reference should be
05:42 - descriptive of what you're referencing
05:44 - we will reference this input element I
05:47 - will name this reference as input ref I
05:51 - will set the initial value to be null
05:53 - meaning no value within that HTML
05:56 - element we have to set the ref attribute
05:59 - equal to that reference of input
06:03 - ref the ref attribute of an HTML element
06:06 - it's a special attribute used to create
06:08 - references to elements after our
06:11 - component renders I'm going to
06:13 - console.log input ref we'll take a look
06:16 - at what it
06:22 - contains so here's our input ref object
06:26 - it's an object the property of current
06:28 - is set equal to this input element and
06:31 - this input element is one gigantic HTML
06:35 - object if we make any changes to this
06:37 - HTML element it's not going to cause
06:40 - this component to reender and to even
06:42 - check that I have console.log component
06:45 - rendered within use effect if this
06:47 - component rerenders we'll console.log
06:50 - this message so what would we like to
06:52 - do when we click the button let's take
06:56 - our object of input ref Act access the
06:59 - current property that will give me my
07:02 - HTML element my input element I will use
07:05 - the built-in Focus method to give this
07:08 - element Focus if I were to click on this
07:11 - button our input element is going to
07:13 - have focus and it doesn't cause the
07:15 - component to render just to check that
07:18 - let's go to
07:20 - inspect
07:22 - console our component rendered once when
07:25 - we initially mounted it every time I
07:27 - click the button the component isn't
07:29 - rendering which is good we don't
07:31 - necessarily need the component to render
07:33 - every single
07:34 - time not only that let's change the
07:37 - background color of our text box we can
07:39 - really do anything we want with this
07:40 - HTML element without causing the
07:42 - component to render let's access our
07:44 - input ref object access the current
07:47 - property that will give me this HTML
07:50 - element let's access the style property
07:54 - access the background color and set it
07:56 - to be
07:58 - yellow
08:00 - now when I click the button we have
08:02 - focus and the background color changes
08:05 - of this input element let's create a few
08:07 - more HTML elements let's copy this
08:10 - button and this input element paste it
08:13 - twice we'll have click me one click me2
08:17 - click Me
08:18 - 3 we'll have to create a few more
08:21 - references let's copy our current
08:23 - reference paste it twice input ref 1
08:27 - input ref two input ref three
08:30 - the ref attribute of each input element
08:32 - will be input ref one then input ref two
08:36 - input ref
08:38 - three we'll create two more handle click
08:40 - functions just to keep it
08:42 - simple handle click one handle click two
08:46 - handle click
08:47 - three handle click one handle click two
08:51 - handle click
08:52 - three so we need input ref one input ref
08:56 - two input ref three when we click on one
08:59 - of these buttons the background color is
09:01 - going to change as well as the input
09:03 - element having
09:06 - focus when we click on one of these
09:08 - buttons I need the background color of
09:11 - the other input elements to reset back
09:13 - to normal so really we can just copy
09:15 - what we have for the background color
09:19 - but access input ref 2 and three set the
09:22 - background color to be an empty string
09:24 - for the
09:28 - default
09:37 - if I were to click on button one input
09:39 - ref one is now yellow when I click on
09:42 - button two the background color is
09:45 - yellow input element 1 and three now use
09:48 - the default color and the same thing
09:50 - goes with input element three if I were
09:53 - again to go to
09:54 - inspect
09:57 - console well our component still only
10:00 - rendered once by interacting with these
10:03 - buttons it doesn't cause the component
10:05 - to
10:05 - reender that's because we're using use
10:08 - ref and not use State you don't need to
10:11 - write all this but I changed my program
10:13 - around so it's using use State rather
10:15 - than use ref every time I click one of
10:18 - these buttons now since we're using use
10:20 - State the component
10:21 - rerenders by avoiding rendering when
10:24 - it's not needed it's going to make your
10:26 - component more efficient all right
10:28 - everybody so that is use ref use State
10:31 - rerenders the component when the state
10:33 - value changes use ref means use
10:36 - reference we're storing a reference to
10:38 - something when you use use ref it
10:41 - returns an object an object with one
10:43 - property of current that current
10:45 - property can store a value an array an
10:48 - object or an HTML element when the
10:51 - stored value changes it doesn't cause
10:53 - the component to render this is helpful
10:56 - with accessing and interacting with dom
10:58 - elements handling Focus animations and
11:01 - transitions as well as managing timers
11:03 - and intervals we'll be working with us
11:05 - ref in the next video where we will be
11:07 - making a stopwatch component and well
11:09 - everybody that is the US ref hook in
11:16 - react

Cleaned transcript:

okay let's do this everybody we got to talk about the use ref hook in react use ref meaning use reference is very similar to use State use State Stores some sort of value or an object or an array whenever the state value changes use State rerenders the component which isn't always what we want use ref meaning use reference it doesn't cause rerenders when it's value changes use use ref when you want a component to remember some information but you don't want that information to trigger new renders use ref is helpful with accessing and interacting with dom elements handling Focus animations and transitions as well as managing timers and intervals UST State triggers rerenders use ref doesn't in order for us to use the use ref hook we have to import it from react import use ref for this sample program we'll be using UST State originally then we'll switch it up and use use ref to see the differences we'll Begin by using the use State hook we will have a state variable of number and a Setter for number equals U State I will set the initial state of number to be zero we will return a button element the button will have text of Click me I will set the onclick event handler equal to a function of handle click then we just need to declare this function function handle click no parameters what do we want to do when we click on the button let's use the setter for number and increment the previous state of number by one n + one whenever my number updates it's going to cause my component to render I can demonstrate that with the use effect hook so before our function of handle click let's use use effect with use effect if we don't pass in a dependency array we'll perform some code every time this component renders so for this demonstration let's console.log component rendered anytime this component renders use effect is going to execute this code where we display component rendered so I'm going to go to my console when your component mounts you'll render your component twice that's if you're in strict mode just temporarily for this demonstration I am going to remove strict mode so our component renders once on Mount whenever we update the state of a state variable that causes the component to reender that's where use ref comes in use ref doesn't cause a component to render when its value changes it's kind of like an escape hatch so instead of using a state variable we're going to use ref use ref means use reference we're referring to something we will declare a const of ref equals use ref function use ref returns an object an object that has one property of current if you pass in a value to use ref you can set the property of current to some value I will set the current property of my ref object to be zero then within handle click within handle click I will access my ref object access the current property then I'll have access to that value I will set the current property of ref to be ref. current property plus one or we could use the increment operator every time we click the button we will increase the current property of ref by one and then I will display what that value is console.log access our ref object access the current property let's go to inspect console our component rendered once every time I click the button our component isn't rendering we've only rendered it once the value stored within the current property of my ref object is increasing each time I click the button without the component rendering use ref returns an object an object that has one property a property of current let me show you what would happen if I were to console.log ref my reference so here's ref it's an object it's an object with one property when we create this reference the initial value is going to be the initial value we pass in to use ref zero but if I were to change this let's say that the initial value is p Pizza ref is an object an object with one property of current the value stored within my current property is a string of pizza so what we'll do in this next demonstration is create an input element but we do need to wrap all this HTML within a single element because we can only return a single element at a time normally so we will enclose all of our HTML within a div so we have a button and an input element the current property of your ref object can also refer to an HTML element and that's where use ref is really helpful your reference should be descriptive of what you're referencing we will reference this input element I will name this reference as input ref I will set the initial value to be null meaning no value within that HTML element we have to set the ref attribute equal to that reference of input ref the ref attribute of an HTML element it's a special attribute used to create references to elements after our component renders I'm going to console.log input ref we'll take a look at what it contains so here's our input ref object it's an object the property of current is set equal to this input element and this input element is one gigantic HTML object if we make any changes to this HTML element it's not going to cause this component to reender and to even check that I have console.log component rendered within use effect if this component rerenders we'll console.log this message so what would we like to do when we click the button let's take our object of input ref Act access the current property that will give me my HTML element my input element I will use the builtin Focus method to give this element Focus if I were to click on this button our input element is going to have focus and it doesn't cause the component to render just to check that let's go to inspect console our component rendered once when we initially mounted it every time I click the button the component isn't rendering which is good we don't necessarily need the component to render every single time not only that let's change the background color of our text box we can really do anything we want with this HTML element without causing the component to render let's access our input ref object access the current property that will give me this HTML element let's access the style property access the background color and set it to be yellow now when I click the button we have focus and the background color changes of this input element let's create a few more HTML elements let's copy this button and this input element paste it twice we'll have click me one click me2 click Me 3 we'll have to create a few more references let's copy our current reference paste it twice input ref 1 input ref two input ref three the ref attribute of each input element will be input ref one then input ref two input ref three we'll create two more handle click functions just to keep it simple handle click one handle click two handle click three handle click one handle click two handle click three so we need input ref one input ref two input ref three when we click on one of these buttons the background color is going to change as well as the input element having focus when we click on one of these buttons I need the background color of the other input elements to reset back to normal so really we can just copy what we have for the background color but access input ref 2 and three set the background color to be an empty string for the default if I were to click on button one input ref one is now yellow when I click on button two the background color is yellow input element 1 and three now use the default color and the same thing goes with input element three if I were again to go to inspect console well our component still only rendered once by interacting with these buttons it doesn't cause the component to reender that's because we're using use ref and not use State you don't need to write all this but I changed my program around so it's using use State rather than use ref every time I click one of these buttons now since we're using use State the component rerenders by avoiding rendering when it's not needed it's going to make your component more efficient all right everybody so that is use ref use State rerenders the component when the state value changes use ref means use reference we're storing a reference to something when you use use ref it returns an object an object with one property of current that current property can store a value an array an object or an HTML element when the stored value changes it doesn't cause the component to render this is helpful with accessing and interacting with dom elements handling Focus animations and transitions as well as managing timers and intervals we'll be working with us ref in the next video where we will be making a stopwatch component and well everybody that is the US ref hook in react
