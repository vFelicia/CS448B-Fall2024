With timestamps:

00:00 - well hello everybody today I will be
00:02 - explaining a few different types of
00:04 - collections in Python there's four
00:06 - general purpose collections three of
00:08 - them are lists sets and tuples there are
00:11 - also dictionaries but I'll save that for
00:13 - the next topic because they can be kind
00:15 - of tricky a collection I would think of
00:17 - them as a single variable and I'm saying
00:20 - that within quotes that is used to store
00:23 - multiple values that's how I would
00:25 - explain a collection to a beginner for
00:27 - example let's say we have a variable
00:28 - variable fruit fruit equals some value
00:32 - like Apple
00:34 - and then I can print this fruit
00:37 - which is Apple I could turn this
00:39 - variable into a collection by
00:42 - surrounding my values with either a set
00:44 - of square brackets for a list curly
00:46 - braces for a set or parentheses for a
00:49 - tuple let's begin with the list if I
00:51 - would like to store more than one value
00:53 - in this variable I will surround my
00:55 - values with a set of square brackets
00:57 - this variable is now a list I can store
01:01 - multiple values separated with the comma
01:03 - not only do we have an apple in this
01:05 - variable but we have an orange
01:08 - a banana
01:11 - and coconut
01:13 - one naming convention that I like to use
01:15 - if I declare a collection such as a list
01:18 - set or Tuple I like to take the variable
01:20 - name and make it plural just so that
01:22 - it's more obvious that this is a
01:24 - collection of values
01:26 - technically in the English language
01:27 - fruit would still be plural English is a
01:30 - weird language we now have a list of
01:33 - fruit named fruits
01:35 - if I were to print my list
01:37 - this is the result
01:39 - we have all of our values enclosed with
01:42 - a set of square brackets to access one
01:45 - of these elements found within your list
01:46 - you can use the index operator much like
01:49 - what we can do with strings the first
01:52 - element would have an index of zero
01:54 - that would print my value Apple
01:57 - index of one would be my orange
02:00 - two is banana three coconut what about
02:04 - four
02:05 - we don't have a value there
02:09 - list index out of range each value in a
02:12 - collection is also known as an element
02:14 - if we attempt to access an element
02:16 - that's not found within our collection
02:18 - you'll run into an index error with the
02:21 - index operator you could set a beginning
02:24 - index an ending index and a step I would
02:27 - like the first three elements you could
02:30 - say zero colon
02:32 - three
02:34 - that would give me Apple orange banana
02:36 - technically you don't even need the zero
02:38 - you need that colon though we can even
02:40 - use a step I would like every second
02:42 - element
02:44 - apple banana it's every second element
02:46 - beginning from index zero maybe I would
02:49 - like my fruit backwards I'll set the
02:51 - step to be negative one coconut banana
02:53 - orange Apple you can use the index
02:55 - operator with collections much like you
02:58 - can use with strings
02:59 - another cool thing you can do too with
03:01 - collections is that you can iterate over
03:03 - them with the for Loop four x in my
03:07 - collection fruits
03:10 - what would we like to do I will print
03:12 - whatever X is
03:15 - so we have iterated over our list Apple
03:18 - orange banana coconut now X isn't really
03:21 - too descriptive what you'll see some
03:23 - people do is that with their collection
03:24 - name it's plural their counter will be
03:27 - the singular version of that word if our
03:29 - collection name is fruits let's rename X
03:32 - as fruit singular
03:36 - it's not mandatory but that's a common
03:38 - convention it's more readable that way
03:40 - for every fruit in fruits If This Were
03:43 - cars you could say for car in Cars our
03:47 - counter is storing whatever value is
03:49 - within our collection
03:50 - so what are all the different methods
03:52 - that we can use with collections
03:54 - to list the different methods that are
03:56 - available to a collection you can use
03:59 - the dir function
04:01 - within this function add your collection
04:03 - fruits
04:05 - but we would need to print this let's
04:07 - surround this function with a print
04:09 - statement
04:12 - these are all in alphabetical order we
04:14 - have attributes which I have not
04:16 - explained yet but I will in a future
04:17 - topic but if we scroll to the end
04:20 - we have a bunch of different methods
04:22 - that this list can perform append clear
04:24 - copy account extend index insert pop
04:27 - remove reverse and sort if you would
04:30 - like a description of each of these
04:31 - methods there is a help function help
04:34 - add your collection to the parentheses
04:36 - then we would need to print this
04:44 - here's the description of all the
04:45 - methods and attributes for example we
04:48 - have our sort method and here's a
04:50 - description
04:51 - sort the list in ascending order and
04:53 - return none and then a bunch of other
04:55 - stuff if you ever forget what you're
04:57 - capable of with a list or other
04:58 - collection you can always use the help
05:00 - function to print a description of the
05:02 - attributes and methods available if you
05:05 - need the length of how many elements are
05:07 - within a collection there is the length
05:09 - function
05:11 - return the length of my list fruits
05:15 - then let's print it
05:17 - there's four elements within my list the
05:20 - length function returns four
05:22 - if I were to add an extra element like a
05:25 - pineapple
05:27 - then that number would be five
05:30 - let's remove that
05:32 - using the in operator we can find if a
05:34 - value is within a collection
05:37 - is our value Apple in fruits
05:42 - but then we would need to print this
05:44 - this operator will return a Boolean so
05:47 - let's print whatever that is
05:49 - is Apple in fruits
05:52 - that is true but is pineapple
05:57 - pineapple is not it's false you can use
05:59 - the in operator to find if a value is
06:01 - within a list and that applies for your
06:03 - other collections too
06:05 - with lists they're ordered and
06:07 - changeable duplicates are okay we can
06:11 - change one of these values after we
06:13 - create our list
06:14 - let's take fruits at index of zero
06:18 - I will set the sequel to be a pineapple
06:22 - then let's iterate over our fruit
06:26 - using a for Loop
06:29 - okay the first element is no longer an
06:31 - apple it's a pineapple then orange
06:33 - banana coconut using an index you can
06:36 - reassign one of the values if I were to
06:38 - change zero to one
06:40 - well now we have an apple pineapple
06:42 - banana coconut
06:45 - let's cover some of the methods that are
06:47 - found within a list we can append an
06:49 - element
06:50 - type the name of the list dot append
06:54 - what would we like to append to the end
06:56 - of this list let's append a pineapple
07:01 - I'm going to get rid of this for Loop
07:02 - I'm just going to display my list there
07:04 - we have an apple an orange banana
07:06 - coconut pineapple to add an element to
07:08 - the end of a list use the append method
07:12 - to remove an element you can use the
07:14 - remove method Roots dot remove
07:17 - let's remove our Apple
07:20 - our apple is no longer there we have an
07:22 - orange banana coconut
07:24 - using the insert method we can insert a
07:26 - value at a given index
07:29 - fruits dot insert
07:32 - list and index 0 would be the beginning
07:34 - then a value
07:36 - pineapple
07:40 - now we have a pineapple Apple orange
07:42 - banana coconut
07:44 - the sort method will sort a list
07:46 - fruits.sort
07:49 - these are all in alphabetical order now
07:52 - apple banana coconut orange
07:55 - to reverse a list you would use the
07:57 - reverse method fruits.reverse
08:02 - coconut banana orange Apple
08:04 - however these are not in Reverse
08:06 - alphabetical order these elements are
08:08 - reversed based on the order in which we
08:10 - place them if you would like reverse
08:12 - alphabetical order
08:13 - you can first sort and then reverse
08:18 - now we have orange coconut banana apple
08:21 - to clear a list use the clear method
08:24 - fruits.clear all of the elements are
08:27 - gone
08:30 - we can return the index of a value let's
08:33 - return the index of Apple
08:36 - fruits Dot
08:38 - index list and element
08:41 - then we will need to print this
08:44 - let's print the index that is returned
08:49 - the index of Apple is zero
08:53 - coconut
08:55 - that would be three what if we don't
08:57 - find a value like a pineapple
09:02 - well we have an error pineapple is not
09:04 - in list
09:05 - you could count the amount of times that
09:07 - a value is found within a list because
09:10 - duplicates are okay
09:12 - fruits dot count let's count how many
09:15 - bananas are in this list
09:17 - banana
09:18 - then print it
09:23 - one banana is found within this list
09:27 - how about pineapples
09:30 - there are zero
09:31 - now those are lists surround your values
09:34 - with a set of square brackets these
09:36 - values are ordered and changeable
09:38 - duplicates are okay now let's talk about
09:41 - the next collection which is a set
09:43 - to create a set surround your values
09:45 - instead with a set of curly braces
09:48 - our collection of fruits is now a set a
09:51 - set has different benefits the values
09:54 - are unordered and immutable meaning we
09:56 - can't alter these values however we can
09:59 - add and remove elements a set does not
10:02 - include any duplicates I'm going to
10:04 - delete these methods
10:05 - then print fruits
10:08 - we have all of the same values but
10:11 - they're not in the same order as they
10:12 - were originally a set is unordered if I
10:16 - were to run this again they will likely
10:18 - be in a different order see now we have
10:19 - a banana apple coconut orange
10:22 - to display all of the different
10:23 - attributes and methods of a set
10:26 - you can use the Der function
10:31 - and here's all of them some of these
10:33 - methods are a little more advanced but
10:34 - there's a few we might recognize like
10:36 - add clear copy for an in-depth
10:39 - description of these methods you can use
10:41 - the help function
10:43 - much like what we did before to find the
10:46 - length of our set we can use the length
10:48 - function
10:49 - which is for
10:52 - we can use the in operator to find if a
10:54 - value is found within the set
10:57 - unfortunately pineapples are not within
10:59 - our set
11:00 - now if I was to use the index operator
11:03 - of my set
11:05 - this is what would happen
11:07 - we have an error set object is not
11:10 - subscriptable we're not able to use
11:12 - indexing on a set because they're
11:13 - unordered much like what we can do with
11:15 - a list or a string
11:17 - we can't change the values of a set but
11:20 - we could add or remove elements
11:23 - let's use the add method to add guess
11:26 - what a pineapple
11:30 - that is okay orange Apple pineapple
11:32 - coconut banana
11:35 - we can remove an element fruits dot
11:37 - remove
11:39 - D let's remove our Apple
11:42 - our apple is gone coconut orange banana
11:47 - pop
11:51 - the pop method will remove whatever
11:53 - element is first but it's going to be
11:55 - random though
11:57 - orange coconut banana
11:59 - Apple coconut banana
12:01 - apple banana coconut
12:04 - you can clear fruits dot clear
12:08 - the elements of our set are gone
12:11 - those are a few of the more useful
12:12 - methods for beginners as a summary a set
12:15 - is a collection that is unordered and
12:18 - immutable you can't change the values
12:20 - but adding and removing elements is okay
12:22 - no duplicates are allowed let's try that
12:25 - real quick I'm going to add a second
12:26 - coconut
12:30 - yeah see we only still have one coconut
12:32 - sets may work well if you're working
12:34 - with Constance maybe colors for example
12:37 - you need to find if a color is within a
12:39 - set
12:40 - all right now lastly let's talk about
12:42 - tuples a tuple is a collection that is
12:44 - surrounded with a set of parentheses
12:46 - tuples are ordered and unchangeable
12:50 - duplicates are okay one benefit of a
12:53 - tuple over a list is that tuples are
12:55 - faster than lists if you're working with
12:57 - a collection and it's okay if the
12:59 - collection is ordered and unchangeable
13:01 - you might as well use a tuple because
13:03 - it's faster when I print our Tuple all
13:05 - of these values are surrounded with a
13:07 - set of parentheses
13:08 - again we have the dur function to
13:10 - display the attributes and methods
13:12 - there's not as many for a tuple for
13:14 - methods we only have count and index
13:17 - again there's also help
13:20 - to display a description of these
13:22 - attributes and methods
13:24 - you can find the length of a tuple with
13:26 - the length function we have five
13:28 - elements within here
13:29 - using the in operator we can find if a
13:32 - value is found within our Tuple
13:34 - our pineapple is not within our fruits
13:38 - so there's only two methods we have
13:39 - access to let's find the index of Apple
13:42 - fruits.index
13:45 - Apple then I will print whatever is
13:48 - returned
13:51 - apple is found at index 0. there is also
13:54 - count fruits dot count
13:57 - how many coconuts are found within our
13:59 - Tuple fruits
14:02 - count the Coconuts then print this
14:07 - how many coconuts we have two coconuts
14:10 - and then again with any of these
14:12 - collections they're iterable so you can
14:14 - iterate over them using a for Loop for
14:17 - fruit and fruits
14:20 - yep Apple orange banana coconut coconut
14:23 - all right everybody so those are
14:24 - collections think of them as a single
14:27 - variable used to store multiple values
14:30 - there's four general purpose collections
14:32 - for beginners lists sets tuples and then
14:36 - dictionaries which we'll talk about next
14:38 - each of them has unique benefits lists
14:41 - are ordered and changeable duplicates
14:43 - are okay a set is unordered and
14:46 - immutable but adding and removing
14:48 - elements is okay no duplicates allowed a
14:51 - tuple is ordered and unchangeable
14:53 - duplicates are okay and they are faster
14:57 - than lists use tuples if you can over a
14:59 - list but yeah those are a few
15:01 - collections in Python

Cleaned transcript:

well hello everybody today I will be explaining a few different types of collections in Python there's four general purpose collections three of them are lists sets and tuples there are also dictionaries but I'll save that for the next topic because they can be kind of tricky a collection I would think of them as a single variable and I'm saying that within quotes that is used to store multiple values that's how I would explain a collection to a beginner for example let's say we have a variable variable fruit fruit equals some value like Apple and then I can print this fruit which is Apple I could turn this variable into a collection by surrounding my values with either a set of square brackets for a list curly braces for a set or parentheses for a tuple let's begin with the list if I would like to store more than one value in this variable I will surround my values with a set of square brackets this variable is now a list I can store multiple values separated with the comma not only do we have an apple in this variable but we have an orange a banana and coconut one naming convention that I like to use if I declare a collection such as a list set or Tuple I like to take the variable name and make it plural just so that it's more obvious that this is a collection of values technically in the English language fruit would still be plural English is a weird language we now have a list of fruit named fruits if I were to print my list this is the result we have all of our values enclosed with a set of square brackets to access one of these elements found within your list you can use the index operator much like what we can do with strings the first element would have an index of zero that would print my value Apple index of one would be my orange two is banana three coconut what about four we don't have a value there list index out of range each value in a collection is also known as an element if we attempt to access an element that's not found within our collection you'll run into an index error with the index operator you could set a beginning index an ending index and a step I would like the first three elements you could say zero colon three that would give me Apple orange banana technically you don't even need the zero you need that colon though we can even use a step I would like every second element apple banana it's every second element beginning from index zero maybe I would like my fruit backwards I'll set the step to be negative one coconut banana orange Apple you can use the index operator with collections much like you can use with strings another cool thing you can do too with collections is that you can iterate over them with the for Loop four x in my collection fruits what would we like to do I will print whatever X is so we have iterated over our list Apple orange banana coconut now X isn't really too descriptive what you'll see some people do is that with their collection name it's plural their counter will be the singular version of that word if our collection name is fruits let's rename X as fruit singular it's not mandatory but that's a common convention it's more readable that way for every fruit in fruits If This Were cars you could say for car in Cars our counter is storing whatever value is within our collection so what are all the different methods that we can use with collections to list the different methods that are available to a collection you can use the dir function within this function add your collection fruits but we would need to print this let's surround this function with a print statement these are all in alphabetical order we have attributes which I have not explained yet but I will in a future topic but if we scroll to the end we have a bunch of different methods that this list can perform append clear copy account extend index insert pop remove reverse and sort if you would like a description of each of these methods there is a help function help add your collection to the parentheses then we would need to print this here's the description of all the methods and attributes for example we have our sort method and here's a description sort the list in ascending order and return none and then a bunch of other stuff if you ever forget what you're capable of with a list or other collection you can always use the help function to print a description of the attributes and methods available if you need the length of how many elements are within a collection there is the length function return the length of my list fruits then let's print it there's four elements within my list the length function returns four if I were to add an extra element like a pineapple then that number would be five let's remove that using the in operator we can find if a value is within a collection is our value Apple in fruits but then we would need to print this this operator will return a Boolean so let's print whatever that is is Apple in fruits that is true but is pineapple pineapple is not it's false you can use the in operator to find if a value is within a list and that applies for your other collections too with lists they're ordered and changeable duplicates are okay we can change one of these values after we create our list let's take fruits at index of zero I will set the sequel to be a pineapple then let's iterate over our fruit using a for Loop okay the first element is no longer an apple it's a pineapple then orange banana coconut using an index you can reassign one of the values if I were to change zero to one well now we have an apple pineapple banana coconut let's cover some of the methods that are found within a list we can append an element type the name of the list dot append what would we like to append to the end of this list let's append a pineapple I'm going to get rid of this for Loop I'm just going to display my list there we have an apple an orange banana coconut pineapple to add an element to the end of a list use the append method to remove an element you can use the remove method Roots dot remove let's remove our Apple our apple is no longer there we have an orange banana coconut using the insert method we can insert a value at a given index fruits dot insert list and index 0 would be the beginning then a value pineapple now we have a pineapple Apple orange banana coconut the sort method will sort a list fruits.sort these are all in alphabetical order now apple banana coconut orange to reverse a list you would use the reverse method fruits.reverse coconut banana orange Apple however these are not in Reverse alphabetical order these elements are reversed based on the order in which we place them if you would like reverse alphabetical order you can first sort and then reverse now we have orange coconut banana apple to clear a list use the clear method fruits.clear all of the elements are gone we can return the index of a value let's return the index of Apple fruits Dot index list and element then we will need to print this let's print the index that is returned the index of Apple is zero coconut that would be three what if we don't find a value like a pineapple well we have an error pineapple is not in list you could count the amount of times that a value is found within a list because duplicates are okay fruits dot count let's count how many bananas are in this list banana then print it one banana is found within this list how about pineapples there are zero now those are lists surround your values with a set of square brackets these values are ordered and changeable duplicates are okay now let's talk about the next collection which is a set to create a set surround your values instead with a set of curly braces our collection of fruits is now a set a set has different benefits the values are unordered and immutable meaning we can't alter these values however we can add and remove elements a set does not include any duplicates I'm going to delete these methods then print fruits we have all of the same values but they're not in the same order as they were originally a set is unordered if I were to run this again they will likely be in a different order see now we have a banana apple coconut orange to display all of the different attributes and methods of a set you can use the Der function and here's all of them some of these methods are a little more advanced but there's a few we might recognize like add clear copy for an indepth description of these methods you can use the help function much like what we did before to find the length of our set we can use the length function which is for we can use the in operator to find if a value is found within the set unfortunately pineapples are not within our set now if I was to use the index operator of my set this is what would happen we have an error set object is not subscriptable we're not able to use indexing on a set because they're unordered much like what we can do with a list or a string we can't change the values of a set but we could add or remove elements let's use the add method to add guess what a pineapple that is okay orange Apple pineapple coconut banana we can remove an element fruits dot remove D let's remove our Apple our apple is gone coconut orange banana pop the pop method will remove whatever element is first but it's going to be random though orange coconut banana Apple coconut banana apple banana coconut you can clear fruits dot clear the elements of our set are gone those are a few of the more useful methods for beginners as a summary a set is a collection that is unordered and immutable you can't change the values but adding and removing elements is okay no duplicates are allowed let's try that real quick I'm going to add a second coconut yeah see we only still have one coconut sets may work well if you're working with Constance maybe colors for example you need to find if a color is within a set all right now lastly let's talk about tuples a tuple is a collection that is surrounded with a set of parentheses tuples are ordered and unchangeable duplicates are okay one benefit of a tuple over a list is that tuples are faster than lists if you're working with a collection and it's okay if the collection is ordered and unchangeable you might as well use a tuple because it's faster when I print our Tuple all of these values are surrounded with a set of parentheses again we have the dur function to display the attributes and methods there's not as many for a tuple for methods we only have count and index again there's also help to display a description of these attributes and methods you can find the length of a tuple with the length function we have five elements within here using the in operator we can find if a value is found within our Tuple our pineapple is not within our fruits so there's only two methods we have access to let's find the index of Apple fruits.index Apple then I will print whatever is returned apple is found at index 0. there is also count fruits dot count how many coconuts are found within our Tuple fruits count the Coconuts then print this how many coconuts we have two coconuts and then again with any of these collections they're iterable so you can iterate over them using a for Loop for fruit and fruits yep Apple orange banana coconut coconut all right everybody so those are collections think of them as a single variable used to store multiple values there's four general purpose collections for beginners lists sets tuples and then dictionaries which we'll talk about next each of them has unique benefits lists are ordered and changeable duplicates are okay a set is unordered and immutable but adding and removing elements is okay no duplicates allowed a tuple is ordered and unchangeable duplicates are okay and they are faster than lists use tuples if you can over a list but yeah those are a few collections in Python
