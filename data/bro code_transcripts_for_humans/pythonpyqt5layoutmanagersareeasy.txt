With timestamps:

00:00 - well hello again friends today I got to
00:02 - explain layouts in pi qt5 we'll discuss
00:05 - vertical horizontal and grid layouts but
00:08 - we'll need the following Imports we will
00:10 - be importing Q
00:13 - label Q
00:15 - widget I'm going to put these Imports on
00:18 - a new line just because we have a
00:20 - lot QV for vertical box
00:26 - layout and I'm just going to copy this
00:30 - qh for horizontal box
00:34 - layout and Q grid layout let's be sure
00:39 - that we have all these
00:40 - Imports these classes deal with layout
00:43 - managers they aren't widgets we'll be
00:46 - writing a majority of the code within
00:47 - our main window class however it can get
00:50 - disorganized really quick what will help
00:52 - keep things organized is if we declare a
00:54 - separate function within the main window
00:57 - class this is a common practice that
00:59 - you'll see within Pi qt5 there will be a
01:02 - function for innit for initialize UI for
01:06 - user interface no other arguments
01:08 - besides self and for now I'll write
01:11 - pass when we construct a window object
01:14 - we will call
01:16 - self. init UI to initialize the user
01:21 - interface so anything that deals with
01:23 - the user interface we're going to be
01:25 - writing within this function to help
01:27 - keep our code clean and organized Norm
01:29 - normally we can't add a layout manager
01:31 - to a main window object main window
01:34 - widgets have a specific design and
01:36 - layout structure that's normally
01:38 - incompatible with layout managers what
01:41 - we would need to do is create a generic
01:43 - widget add a layout manager to that
01:46 - widget then add that widget to the main
01:48 - window in order to display the layout
01:51 - within our method to initialize our user
01:53 - interface we are going to create what is
01:56 - called a central
01:58 - widget called The Constructor for Q
02:02 - widget this is a generic widget then we
02:06 - will take self self is our
02:09 - window call the
02:12 - set Central widget method then pass in
02:17 - our Central
02:18 - widget when working with layout managers
02:21 - we will add that layout manager to the
02:23 - central Widget the central widget is
02:26 - then added to the main window
02:30 - So currently this is what we're working
02:32 - with we will need some widgets to
02:34 - organize because right now it's
02:36 - empty let's create a few
02:39 - labels let's say label one equals Q
02:44 - label I'll pass in some text number one
02:48 - okay let's create four additional labels
02:50 - 1 through five I'll just do some copying
02:53 - and pasting
03:00 - all of our labels are
03:02 - overlapping let's add some colors let's
03:05 - take label one use the set stylesheet
03:11 - method then pass in a background color
03:14 - as a CSS
03:15 - property
03:17 - background-color will be
03:21 - red let's copy this line of
03:23 - code paste it four additional times for
03:27 - labels 1 through 5
03:31 - we have a label that is yellow another
03:35 - that is green
03:38 - blue then
03:43 - purple here are the labels they're all
03:45 - overlapping one another that's why we
03:48 - can only see
03:49 - five this is where a layout manager
03:51 - comes in we'll start with the vertical
03:54 - layout we will create a vertical layout
03:57 - manager which we will name V box vbox
04:02 - equals call The Constructor for
04:06 - QV box layout we are calling the
04:10 - Constructor we will take our layout
04:13 - manager call the add widget method then
04:18 - pass in a widget such as label one near
04:21 - the top
04:23 - here we'll do this with the other labels
04:26 - we'll do some copying and
04:27 - pasting add label two 3 4 and
04:32 - five there's one last
04:37 - step we will take our Central widget
04:40 - which we have declared at the top of
04:42 - this
04:43 - function call the set layout
04:47 - method we are setting the layout of our
04:49 - Central
04:50 - widget with the layout manager of vbox
04:54 - vertical box here's the new
04:56 - layout all of our labels all of our
04:59 - widgets are arranged vertically for
05:02 - horizontal we will use qh box layout for
05:07 - horizontal replace any instance of vbx
05:10 - with
05:13 - hbox for the set layout method pass in
05:18 - hbox this allows for a horizontal
05:21 - layout then we have
05:23 - grid Q grid layout replace hbox with
05:28 - grid
05:35 - so what we have to do with grids after
05:37 - adding a widget we have to specify a row
05:39 - and column with separate arguments the
05:42 - row and column both begin with zero so
05:45 - Row one column 1 would be row 0 column 0
05:50 - for label two let's say row 0 column 1
05:55 - label three will be Row one column 0o
06:01 - four will be Row one column 1 then five
06:05 - row one column 2 so here's the current
06:10 - layout we have labels 1 and two both
06:13 - within row zero labels 3 4 and five are
06:16 - both within the second row let's say
06:18 - label five is Row 2 column 2 that would
06:22 - result with something like this we have
06:25 - label five which is purple in row two
06:29 - column too so it depends on how you want
06:31 - to arrange your widgets all right
06:33 - everybody so that is an introduction to
06:35 - layout managers in pi qt5

Cleaned transcript:

well hello again friends today I got to explain layouts in pi qt5 we'll discuss vertical horizontal and grid layouts but we'll need the following Imports we will be importing Q label Q widget I'm going to put these Imports on a new line just because we have a lot QV for vertical box layout and I'm just going to copy this qh for horizontal box layout and Q grid layout let's be sure that we have all these Imports these classes deal with layout managers they aren't widgets we'll be writing a majority of the code within our main window class however it can get disorganized really quick what will help keep things organized is if we declare a separate function within the main window class this is a common practice that you'll see within Pi qt5 there will be a function for innit for initialize UI for user interface no other arguments besides self and for now I'll write pass when we construct a window object we will call self. init UI to initialize the user interface so anything that deals with the user interface we're going to be writing within this function to help keep our code clean and organized Norm normally we can't add a layout manager to a main window object main window widgets have a specific design and layout structure that's normally incompatible with layout managers what we would need to do is create a generic widget add a layout manager to that widget then add that widget to the main window in order to display the layout within our method to initialize our user interface we are going to create what is called a central widget called The Constructor for Q widget this is a generic widget then we will take self self is our window call the set Central widget method then pass in our Central widget when working with layout managers we will add that layout manager to the central Widget the central widget is then added to the main window So currently this is what we're working with we will need some widgets to organize because right now it's empty let's create a few labels let's say label one equals Q label I'll pass in some text number one okay let's create four additional labels 1 through five I'll just do some copying and pasting all of our labels are overlapping let's add some colors let's take label one use the set stylesheet method then pass in a background color as a CSS property backgroundcolor will be red let's copy this line of code paste it four additional times for labels 1 through 5 we have a label that is yellow another that is green blue then purple here are the labels they're all overlapping one another that's why we can only see five this is where a layout manager comes in we'll start with the vertical layout we will create a vertical layout manager which we will name V box vbox equals call The Constructor for QV box layout we are calling the Constructor we will take our layout manager call the add widget method then pass in a widget such as label one near the top here we'll do this with the other labels we'll do some copying and pasting add label two 3 4 and five there's one last step we will take our Central widget which we have declared at the top of this function call the set layout method we are setting the layout of our Central widget with the layout manager of vbox vertical box here's the new layout all of our labels all of our widgets are arranged vertically for horizontal we will use qh box layout for horizontal replace any instance of vbx with hbox for the set layout method pass in hbox this allows for a horizontal layout then we have grid Q grid layout replace hbox with grid so what we have to do with grids after adding a widget we have to specify a row and column with separate arguments the row and column both begin with zero so Row one column 1 would be row 0 column 0 for label two let's say row 0 column 1 label three will be Row one column 0o four will be Row one column 1 then five row one column 2 so here's the current layout we have labels 1 and two both within row zero labels 3 4 and five are both within the second row let's say label five is Row 2 column 2 that would result with something like this we have label five which is purple in row two column too so it depends on how you want to arrange your widgets all right everybody so that is an introduction to layout managers in pi qt5
