With timestamps:

00:00 - what's going on everybody so in today's
00:01 - video I'm going to show you how we can
00:03 - fetch data from an API using JavaScript
00:06 - and at the end of this video we're going
00:07 - to create a project where we can fetch
00:09 - some images of Pokemon depending on what
00:11 - Pokemon you type in so sit back relax
00:14 - and enjoy the show all right people so
00:16 - we got to talk about fetch fetch in
00:18 - JavaScript is a function it's used for
00:20 - making HTTP requests to fetch resources
00:24 - including but not limited to Json styled
00:27 - data images files resour ources of that
00:30 - nature the fetch function simplifies
00:32 - asynchronous data fetching it's used for
00:35 - interacting with apis to retrieve and
00:37 - send data asynchronously over the web
00:41 - fetch has two arguments a URL of the
00:44 - resource and an object an object of
00:47 - options I won't be talking about options
00:49 - in this video that's more advanced
00:51 - JavaScript one of which you may see is a
00:53 - method property the default is get to
00:56 - get a resource you can use post to send
00:59 - some data put to replace some data and
01:03 - delete to delete some data so the
01:05 - default is get but we don't need to
01:08 - explicitly state that we'll just be
01:10 - focusing on getting data with only a URL
01:14 - to fetch something we have to use the
01:15 - fetch function and pass in a URL what I
01:19 - thought we could do for this video is
01:20 - fetch some Pokemon data from the Pokemon
01:22 - API if you want to follow along you can
01:24 - go to this URL I would like to fetch
01:27 - some data on Pikachu
01:30 - because everybody knows about
01:34 - Pikachu and here's some of the data on
01:36 - Pikachu this resource is one gigantic
01:40 - object Pikachu has a name an ID number a
01:44 - type Pikachu is an electric type there's
01:47 - stats such as his attack power HP
01:51 - there's even image Sprites which we'll
01:52 - work with later we will copy this
01:56 - URL and paste it within the fetch
01:58 - function we will pass in a string
02:01 - representation of this URL the fetch
02:04 - function is promise-based it's either
02:06 - going to resolve or reject so we should
02:08 - add a
02:10 - then and a catch method to catch any
02:13 - errors error Arrow do this let's console
02:17 - the error if there's an error once the
02:21 - promise resolves we'll be provided with
02:23 - an object a response object take our
02:27 - response object Arrow do this
02:30 - for the time being let's
02:33 - console.log our response just to see
02:35 - what it is
02:38 - exactly so here's our response
02:41 - object the body contains the data we're
02:44 - looking for for Pikachu this response
02:48 - object has a status code of 200 that
02:50 - means it's okay here's where you may see
02:53 - that status code of 404 if you can't
02:54 - locate a resource it has an okay
02:57 - property if fetching this resource was
02:59 - okay okay this is going to be true if
03:01 - not it's false there's also a URL here
03:04 - too now our next step is to convert it
03:06 - to a readable format there's a few
03:08 - different methods there's array buffer
03:11 - blob text and Json these are all methods
03:16 - we're interested in the Json method in
03:18 - this example so our next step is to take
03:21 - our response object convert it to Json
03:24 - using the Json
03:26 - method this is also promise based once
03:29 - This Promise resolves let's follow this
03:31 - with a then method then take the data
03:34 - our Json data that's going to be
03:36 - returned to
03:37 - us Arrow do this let's console.log my
03:42 - data just to see what it is so after
03:45 - fetching data on Pikachu convert the
03:47 - response object to a Json
03:51 - format and here's my data for Pikachu we
03:54 - have a name an ID Pikachu stats such as
03:59 - his HP p and attack and weit and many
04:02 - more things with this Json data you can
04:05 - access one of the properties I would
04:07 - like just Pikachu's name data. name
04:11 - Pikachu data dot weight how much does
04:16 - Pikachu weigh 60 60 units of something
04:20 - whatever unit of measurement they use in
04:21 - Kanto what is Pikachu's ID 25 near the
04:25 - end of this video we're going to fetch
04:27 - the Sprites of the Pokémon now for some
04:29 - reason if we try and access a Pokemon
04:31 - that doesn't exist as of the filming of
04:33 - this video SpongeBob is still not a
04:39 - Pokemon we get a status code of 404
04:42 - meaning we could not find this resource
04:44 - SpongeBob is not a Pokemon unfortunately
04:47 - so even if we can't locate a resource
04:49 - our promise is still going to resolve
04:51 - it's not going to reject we need to
04:54 - check to see if our response is not okay
04:56 - let me demonstrate I will console.log my
05:00 - response
05:01 - object here's my response object it is
05:04 - not okay your response will be okay if
05:07 - the status is within the 200 range since
05:10 - we have a status of 404 we couldn't
05:12 - locate this resource okay is false we're
05:15 - going to throw an error if our property
05:17 - of okay is false within our first then
05:21 - method we'll write a few statements we
05:23 - need a set of angle brackets before
05:26 - continuing let's check to see if our
05:30 - response access the okay property then
05:34 - use the not logical operator if our
05:37 - response is not okay if it's false we're
05:40 - going to throw a new
05:43 - error and then catch it using the catch
05:46 - method we can write a custom message
05:48 - let's say something like could not fetch
05:53 - resource if our resource is okay we
05:57 - won't execute this code otherwise we
06:00 - will return our response object in a
06:04 - Json
06:06 - format let's try and retrieve Pokemon
06:08 - data on
06:09 - SpongeBob okay we have an error but we
06:12 - have caught this error using the catch
06:14 - method error could not fetch resource
06:17 - then let's get data on Pikachu
06:20 - again and there's Pikachu and his ID
06:26 - number if you would prefer to use a sync
06:28 - and a weit here's how let's delete all
06:33 - this we will create an async function so
06:36 - that we can use a weight within it I
06:38 - will declare a function to fetch data no
06:43 - parameters do all
06:45 - this we will create a try and catch
06:48 - block try and
06:52 - catch catch has one parameter an error
06:56 - if we receive an error let's console. ER
06:59 - error the
07:02 - error within our Tri block we will
07:05 - create a constant of
07:07 - response the fetch function is going to
07:09 - return an object a response object we
07:12 - will
07:13 - await our promise that's returned by
07:17 - fetch then we need to get that URL
07:20 - again let's get data on a different
07:23 - Pokemon another Pokémon that I like is
07:26 - tyion honestly I think tyion is my
07:29 - favorite
07:31 - Pokémon all right here's the stats for
07:34 - tyion I'm going to copy this
07:37 - URL pass it to the fetch function as a
07:40 - string once the promise for fetch
07:43 - resolves we have to see if the response
07:46 - is okay we'll use an if
07:49 - statement if our response
07:52 - object is the okay property not okay if
07:57 - our response is not okay
08:00 - if we can't locate this
08:02 - resource then we will throw a new
08:06 - error let's say could not fetch
08:11 - resource if our response is okay we will
08:15 - create a constant for our
08:17 - data equals await take our response and
08:22 - convert it to
08:23 - Json this also returns a promise that's
08:26 - why we're using a wait then we will
08:28 - console . log our
08:32 - data and then we have to call the fetch
08:34 - data function because I forgot to do
08:37 - that call fetch
08:40 - data and here's the stats for tyion Name
08:45 - tyion ID 157 tyion is a fire
08:50 - type that's how to use a sync and a
08:52 - weight to fetch a
08:54 - resource now that we know what we're
08:56 - doing we're going to create a text box
08:58 - and a button to search a Pokémon and
09:01 - pull up a Sprite of that Pokémon and
09:03 - display it so going to our HTML file we
09:07 - will create an input
09:09 - element with the type attribute of text
09:12 - because it's a text
09:14 - box I will set the ID of this input
09:17 - element to be Pokemon
09:21 - name it's a little small right now we
09:24 - haven't applied any
09:25 - CSS I will add a
09:27 - placeholder uh of enter Pokemon
09:32 - name then we need a button I will create
09:35 - a button
09:36 - element with text of
09:39 - fetch
09:42 - Pokemon I will set the onclick event
09:45 - handler equal to a JavaScript function
09:48 - let's call that function a fetch
09:53 - data then I will add a
09:56 - break after fetching some Pokémon data
10:00 - we have an image to work with I will set
10:02 - the source currently to be an empty
10:04 - string I will display some alternative
10:07 - text if we can't display the image of
10:10 - Pokemon
10:13 - Sprite and I will give this element an
10:16 - ID of Pokemon
10:19 - Sprite to not display the image
10:22 - currently we can access the style access
10:25 - the display property and set it to be
10:28 - none
10:29 - then if we do want to display it we can
10:31 - set display to be a block let's go to
10:34 - our Javascript
10:36 - file within our Tri block we will create
10:39 - a constant of Pokemon name
10:43 - equals
10:45 - document. getet element by ID the ID
10:50 - that I'm selecting is Pokemon
10:55 - name access the value of this input
10:58 - element
10:59 - now if somebody types an uppercase
11:02 - characters I'll take the value make all
11:05 - the letters lowercase I will method
11:08 - chain the two lowercase method two
11:12 - lowercase
11:17 - method with our fetch function we're
11:20 - going to use a template string with a
11:23 - pair of back ticks for the Pokemon's
11:25 - name we will use a placeholder and pass
11:28 - in our Pokemon name
11:31 - variable so now when I type in a
11:34 - Pokemon's name like
11:37 - Bulbasaur we should get data on that
11:39 - Pokemon if it exists so let's go to
11:42 - inspect console and here's data on
11:45 - Bulbasaur Bulbasaur's ID is
11:48 - one Bulbasaur is a grass
11:51 - type and I think he's a poison type too
11:54 - if I'm not
11:55 - mistaken this Json data also has Sprites
11:59 - images of each Pokemon we're going to
12:01 - fetch the front
12:04 - default so we don't need console.log
12:07 - anymore we'll create a
12:10 - constant of Pokemon Sprite to get that
12:13 - image equals take our
12:16 - data access the Sprites
12:19 - property get the front default
12:25 - Sprite then we will get our image
12:27 - element this one that has an ID of
12:30 - Pokemon
12:32 - Sprite const image
12:35 - element equals document. getet element
12:40 - by ID the ID that I'm getting is Pokemon
12:45 - Sprite we will change the CSS of this
12:48 - element take our image
12:51 - element access its source attribute
12:54 - right now it's currently empty our
12:56 - source is an empty string set the source
13:00 - equal to our Pokemon Sprite this is a
13:04 - constant then we will take our image
13:07 - element access the style attribute
13:10 - access the display
13:12 - property and set it equal to be a block
13:15 - because right now it's
13:17 - none now when I type in a Pokemon's name
13:20 - like Charizard and fetch that Pokemon we
13:24 - get the image of that Pokemon it is a
13:27 - little small however it is a
13:30 - Sprite Sprites tend to be very
13:32 - small or we can get
13:36 - Mewtwo or whatever other Pokemon you can
13:38 - think of I think there's like over a
13:40 - thousand Now where's
13:43 - tyion there's tyion all right everybody
13:46 - so that is how to fetch data from an API
13:49 - you got to use the fetch function it's
13:51 - used for making HTTP requests to fetch
13:54 - resources you can fetch Json style data
13:57 - images files the fetch function
13:59 - simplifies asynchronous data fetching
14:02 - it's used for interacting with apis to
14:04 - retrieve and send data asynchronously
14:07 - over the web and well everybody that is
14:09 - how to fetch data from an API using
14:15 - JavaScript

Cleaned transcript:

what's going on everybody so in today's video I'm going to show you how we can fetch data from an API using JavaScript and at the end of this video we're going to create a project where we can fetch some images of Pokemon depending on what Pokemon you type in so sit back relax and enjoy the show all right people so we got to talk about fetch fetch in JavaScript is a function it's used for making HTTP requests to fetch resources including but not limited to Json styled data images files resour ources of that nature the fetch function simplifies asynchronous data fetching it's used for interacting with apis to retrieve and send data asynchronously over the web fetch has two arguments a URL of the resource and an object an object of options I won't be talking about options in this video that's more advanced JavaScript one of which you may see is a method property the default is get to get a resource you can use post to send some data put to replace some data and delete to delete some data so the default is get but we don't need to explicitly state that we'll just be focusing on getting data with only a URL to fetch something we have to use the fetch function and pass in a URL what I thought we could do for this video is fetch some Pokemon data from the Pokemon API if you want to follow along you can go to this URL I would like to fetch some data on Pikachu because everybody knows about Pikachu and here's some of the data on Pikachu this resource is one gigantic object Pikachu has a name an ID number a type Pikachu is an electric type there's stats such as his attack power HP there's even image Sprites which we'll work with later we will copy this URL and paste it within the fetch function we will pass in a string representation of this URL the fetch function is promisebased it's either going to resolve or reject so we should add a then and a catch method to catch any errors error Arrow do this let's console the error if there's an error once the promise resolves we'll be provided with an object a response object take our response object Arrow do this for the time being let's console.log our response just to see what it is exactly so here's our response object the body contains the data we're looking for for Pikachu this response object has a status code of 200 that means it's okay here's where you may see that status code of 404 if you can't locate a resource it has an okay property if fetching this resource was okay okay this is going to be true if not it's false there's also a URL here too now our next step is to convert it to a readable format there's a few different methods there's array buffer blob text and Json these are all methods we're interested in the Json method in this example so our next step is to take our response object convert it to Json using the Json method this is also promise based once This Promise resolves let's follow this with a then method then take the data our Json data that's going to be returned to us Arrow do this let's console.log my data just to see what it is so after fetching data on Pikachu convert the response object to a Json format and here's my data for Pikachu we have a name an ID Pikachu stats such as his HP p and attack and weit and many more things with this Json data you can access one of the properties I would like just Pikachu's name data. name Pikachu data dot weight how much does Pikachu weigh 60 60 units of something whatever unit of measurement they use in Kanto what is Pikachu's ID 25 near the end of this video we're going to fetch the Sprites of the Pokémon now for some reason if we try and access a Pokemon that doesn't exist as of the filming of this video SpongeBob is still not a Pokemon we get a status code of 404 meaning we could not find this resource SpongeBob is not a Pokemon unfortunately so even if we can't locate a resource our promise is still going to resolve it's not going to reject we need to check to see if our response is not okay let me demonstrate I will console.log my response object here's my response object it is not okay your response will be okay if the status is within the 200 range since we have a status of 404 we couldn't locate this resource okay is false we're going to throw an error if our property of okay is false within our first then method we'll write a few statements we need a set of angle brackets before continuing let's check to see if our response access the okay property then use the not logical operator if our response is not okay if it's false we're going to throw a new error and then catch it using the catch method we can write a custom message let's say something like could not fetch resource if our resource is okay we won't execute this code otherwise we will return our response object in a Json format let's try and retrieve Pokemon data on SpongeBob okay we have an error but we have caught this error using the catch method error could not fetch resource then let's get data on Pikachu again and there's Pikachu and his ID number if you would prefer to use a sync and a weit here's how let's delete all this we will create an async function so that we can use a weight within it I will declare a function to fetch data no parameters do all this we will create a try and catch block try and catch catch has one parameter an error if we receive an error let's console. ER error the error within our Tri block we will create a constant of response the fetch function is going to return an object a response object we will await our promise that's returned by fetch then we need to get that URL again let's get data on a different Pokemon another Pokémon that I like is tyion honestly I think tyion is my favorite Pokémon all right here's the stats for tyion I'm going to copy this URL pass it to the fetch function as a string once the promise for fetch resolves we have to see if the response is okay we'll use an if statement if our response object is the okay property not okay if our response is not okay if we can't locate this resource then we will throw a new error let's say could not fetch resource if our response is okay we will create a constant for our data equals await take our response and convert it to Json this also returns a promise that's why we're using a wait then we will console . log our data and then we have to call the fetch data function because I forgot to do that call fetch data and here's the stats for tyion Name tyion ID 157 tyion is a fire type that's how to use a sync and a weight to fetch a resource now that we know what we're doing we're going to create a text box and a button to search a Pokémon and pull up a Sprite of that Pokémon and display it so going to our HTML file we will create an input element with the type attribute of text because it's a text box I will set the ID of this input element to be Pokemon name it's a little small right now we haven't applied any CSS I will add a placeholder uh of enter Pokemon name then we need a button I will create a button element with text of fetch Pokemon I will set the onclick event handler equal to a JavaScript function let's call that function a fetch data then I will add a break after fetching some Pokémon data we have an image to work with I will set the source currently to be an empty string I will display some alternative text if we can't display the image of Pokemon Sprite and I will give this element an ID of Pokemon Sprite to not display the image currently we can access the style access the display property and set it to be none then if we do want to display it we can set display to be a block let's go to our Javascript file within our Tri block we will create a constant of Pokemon name equals document. getet element by ID the ID that I'm selecting is Pokemon name access the value of this input element now if somebody types an uppercase characters I'll take the value make all the letters lowercase I will method chain the two lowercase method two lowercase method with our fetch function we're going to use a template string with a pair of back ticks for the Pokemon's name we will use a placeholder and pass in our Pokemon name variable so now when I type in a Pokemon's name like Bulbasaur we should get data on that Pokemon if it exists so let's go to inspect console and here's data on Bulbasaur Bulbasaur's ID is one Bulbasaur is a grass type and I think he's a poison type too if I'm not mistaken this Json data also has Sprites images of each Pokemon we're going to fetch the front default so we don't need console.log anymore we'll create a constant of Pokemon Sprite to get that image equals take our data access the Sprites property get the front default Sprite then we will get our image element this one that has an ID of Pokemon Sprite const image element equals document. getet element by ID the ID that I'm getting is Pokemon Sprite we will change the CSS of this element take our image element access its source attribute right now it's currently empty our source is an empty string set the source equal to our Pokemon Sprite this is a constant then we will take our image element access the style attribute access the display property and set it equal to be a block because right now it's none now when I type in a Pokemon's name like Charizard and fetch that Pokemon we get the image of that Pokemon it is a little small however it is a Sprite Sprites tend to be very small or we can get Mewtwo or whatever other Pokemon you can think of I think there's like over a thousand Now where's tyion there's tyion all right everybody so that is how to fetch data from an API you got to use the fetch function it's used for making HTTP requests to fetch resources you can fetch Json style data images files the fetch function simplifies asynchronous data fetching it's used for interacting with apis to retrieve and send data asynchronously over the web and well everybody that is how to fetch data from an API using JavaScript
