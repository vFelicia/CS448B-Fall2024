With timestamps:

00:00 - hey how's it going everybody it's your
00:01 - bro hope you're doing well and in this
00:03 - video i'm going to teach you guys all
00:04 - about variables in java so
00:06 - sit back relax and enjoy the show
00:11 - if you find this video helpful please
00:13 - remember to like
00:14 - comment and subscribe your support will
00:16 - help keep this channel running
00:19 - all right guys and gals let's talk about
00:21 - variables
00:22 - now a variable is a placeholder for a
00:25 - value
00:26 - and it behaves as the value that it
00:28 - contains do you remember from either
00:30 - elementary school or middle school when
00:32 - we were working with
00:33 - algebra we usually had to solve for some
00:36 - sort of variable like
00:37 - x or y and x or y contained
00:40 - some sort of numeric value and for all
00:42 - intents and purposes
00:44 - this variable behaved exactly as this
00:47 - value
00:48 - well with programming we can perform
00:50 - something similar to that
00:51 - but we are not limited to just numbers
00:54 - we could also store
00:55 - words whole sentences and these things
00:58 - called boolean values which hold either
01:00 - true or
01:00 - false but if we're going to store a
01:03 - value within a variable
01:04 - we have to list the data type of what
01:06 - we're planning to store within
01:08 - that variable is it going to be a number
01:11 - a word
01:12 - a boolean so we need to discuss data
01:15 - types
01:15 - there are eight primitive data types and
01:18 - a special
01:19 - reference data type called a string
01:21 - anything that i have noted with a star
01:23 - is particularly important
01:25 - so i would pay special attention to
01:27 - these our first data type
01:28 - is boolean this has a size of one
01:31 - bit so it can only hold two values that
01:34 - being
01:35 - true or false if we're attempting to
01:37 - sign a boolean value
01:39 - we would type either equals true or
01:41 - equals false
01:42 - something similar would be let's say we
01:44 - have a light switch program
01:46 - well if the light switch is on we could
01:48 - say that the light switch has a value of
01:51 - true if it's off
01:52 - it has a value of false so this is
01:54 - binary that's why it only uses
01:56 - one bit it only needs one bit of memory
01:59 - to function
02:00 - next we have byte this isn't as
02:02 - important as a few others
02:03 - but with one byte we can hold an integer
02:06 - number between negative 128 to 127
02:09 - because a byte only has one byte of
02:12 - memory
02:13 - a short has two bytes of memory so can
02:15 - hold a
02:16 - larger number between negative 32 000
02:19 - and some change
02:20 - to 32 000 and some change so integers
02:23 - integers are important these use 4 bytes
02:27 - of memory
02:27 - and they can store a number to just
02:30 - under 2 billion
02:31 - to just over 2 billion because they use
02:34 - 4 bytes of memory and a long
02:38 - they use eight bytes of memory so they
02:40 - can hold a very
02:41 - large number in fact they can hold a
02:43 - number between
02:45 - just under negative nine quintillion to
02:48 - just over
02:49 - positive nine quintillion now a float
02:52 - they can store a fractional number
02:55 - specifically
02:56 - up to six to seven digits what makes
02:58 - floats different from
03:00 - these data types on the top here is that
03:03 - bytes shorts integers and longs can only
03:06 - store a whole
03:07 - integer they cannot store this decimal
03:09 - portion
03:10 - so if you're working with a program or a
03:12 - variable
03:13 - that uses a fractional number you'll
03:16 - need to use either a float
03:18 - or a double and a double has more
03:20 - precision it uses eight bytes of memory
03:23 - and it can store a fractional number up
03:25 - to 15 digits
03:26 - so in comparison with a float this has
03:29 - less precision
03:30 - than a double and for an example i just
03:32 - listed a few of the digits of pi
03:34 - with this example we can only store six
03:37 - to seven digits of pi but with a double
03:39 - we can store up to 15. there is one
03:41 - strange convention with floats if you're
03:43 - going to assign a value to a variable
03:46 - that's of the float data type you need
03:48 - to follow the value
03:49 - with the letter f with double variables
03:52 - you actually do not need to do so
03:54 - so that's one major difference when
03:56 - assigning values between
03:57 - these two now let's move on to
03:59 - characters pronounced
04:01 - char for short think of charizard this
04:04 - uses two bytes of memory
04:05 - and this will store a single character
04:08 - letter or ascii value
04:10 - an example would be the letter f but a
04:12 - common convention with
04:14 - assigning values to a char variable is
04:17 - that you need to surround
04:18 - this value with a pair of single quotes
04:21 - and our last data type is the string
04:24 - data type the size really varies because
04:26 - these are
04:27 - reference data types they store a
04:29 - sequence of characters
04:31 - like a word or a sentence you could
04:34 - store a single character within a string
04:36 - but chars and strings behave differently
04:39 - because
04:40 - chars are primitive data types and
04:42 - strings are reference data types
04:44 - so let's distinguish the difference
04:45 - between primitive and reference data
04:47 - types
04:48 - here's a super quick description between
04:50 - the differences of primitive
04:52 - and reference data types primitive data
04:54 - types there are it and we
04:56 - just discussed them they are boolean by
04:58 - short integer longs
05:00 - all those cool things that we just
05:01 - discussed reference data types
05:04 - like strings well there's an unlimited
05:06 - amount because
05:07 - they are user defined primitives store
05:10 - data reference data types store an
05:13 - address
05:14 - primitives can only hold one value
05:16 - reference data types could hold more
05:18 - than one value
05:19 - primitives use less memory compared to
05:21 - reference data types
05:23 - which use more memory and primitive data
05:25 - types are faster compared to reference
05:28 - data types
05:28 - which are slower now you're probably
05:30 - thinking cool story bro but how do we
05:32 - create a variable
05:33 - well i'm glad you asked that question so
05:36 - the first process with
05:37 - creating a variable is that we need to
05:39 - declare
05:40 - the data type of what value that this
05:42 - variable is going to store
05:44 - so come up with a variable name like x
05:48 - and we will precede this variable with
05:51 - the data type of the value that we're
05:52 - planning to store within
05:54 - this variable and then with all
05:55 - statements we follow this
05:57 - with a semicolon at the end the next
06:00 - step
06:00 - is called assignment we will take our
06:02 - variable and assign it equal
06:04 - to some sort of value of the data type
06:07 - that we declared this variable to be
06:09 - but you could combine steps one and two
06:12 - together
06:12 - and this process is called
06:14 - initialization
06:15 - we would take the data type followed by
06:17 - the variable name and set it equal to
06:20 - some value and then add a semicolon at
06:22 - the end to finish the statement
06:24 - so you can either do this in two steps
06:26 - with declaration and assignment
06:28 - or combine them both together which is
06:30 - initialization
06:32 - how about we create a few variables does
06:33 - that sound good to you guys so let's
06:35 - begin with creating an
06:36 - integer variable let's say int x
06:39 - this step is called declaration we are
06:42 - declaring the data type
06:44 - of what value is going to be contained
06:46 - within this variable the second step
06:48 - is called assignment we can assign our
06:50 - variable a value
06:52 - let's say x equals 123 and
06:55 - this step is called assignment or
06:58 - we could combine both of these steps
07:00 - together and this process is called
07:02 - initialization intex equals 123
07:06 - and this would be initialization
07:10 - so we can do stuff with this variable it
07:13 - will behave as the value that it
07:14 - contains
07:16 - we could print this to the console
07:17 - window so within a print or print line
07:19 - statement
07:20 - we could print the value of x so make
07:23 - sure you do not write this within quotes
07:25 - right now this will display the value
07:27 - that is contained within x
07:29 - which is 123 because this variable
07:32 - behaves as the value that it contains if
07:35 - you were to surround this with quotes
07:37 - what we are doing now is printing a
07:39 - string literal
07:41 - you can also print text as well as a
07:43 - variable together
07:45 - let's say we have a sentence a string
07:48 - literal that states
07:49 - my number is
07:52 - and then if we want to do some string
07:54 - concatenation with a variable
07:56 - we would add plus and then the variable
07:58 - name make sure this is not within quotes
08:01 - so this will display the sentence my
08:03 - number is plus our variable
08:05 - and in the console window it states my
08:07 - number is 123. so with integer variables
08:10 - the largest number that you can store
08:12 - within an integer variable
08:13 - is just over 2 billion let's say we are
08:16 - working with an extremely large number
08:18 - like the amount of student debt that i
08:20 - owe well this number is too large to
08:22 - store it within an integer variable
08:25 - we would probably want to use the long
08:27 - data type
08:28 - and one convention with assigning values
08:30 - to a long
08:31 - variable is that you need to follow this
08:34 - number
08:34 - with a capital l for some reason so we
08:37 - can now work with extremely large
08:39 - numbers
08:40 - so this might be useful if you're
08:41 - working with numbers like the speed of
08:43 - light or something
08:44 - so we now have a long variable and we
08:47 - can display
08:48 - this value a few of the other data types
08:50 - that we mentioned were
08:51 - bytes and shorts they have a lesser
08:54 - number that they can store
08:56 - so with bytes you can only store up to i
08:58 - believe 127
09:00 - so we could store like 100 within here
09:03 - and this would be fine but 130 would
09:06 - be a little too much though so we don't
09:08 - tend to use bytes and shorts too much as
09:11 - a beginner because it's just way more
09:12 - convenient to work with integers
09:15 - um but you might use longs every once in
09:17 - a while too but
09:18 - as beginners we're mostly going to be
09:20 - sticking with integers
09:22 - now a double can store a number with a
09:25 - fractional portion with integers we
09:27 - cannot store
09:28 - a decimal portion so if this was 123.01
09:33 - well we cannot store this decimal
09:35 - portion
09:36 - we can only do so with a float or a
09:38 - double
09:39 - so with a float you would type in float
09:42 - for the data type let's create a new
09:43 - variable like
09:44 - y float y equals 3.14
09:48 - and a common convention for assigning
09:50 - numbers
09:51 - well values to float variables is that
09:54 - you have to follow this
09:55 - with f so you can store
09:58 - a number with a decimal portion within a
10:01 - float
10:01 - or a double and then we could display
10:04 - whatever this value is
10:05 - so y is equal to 3.14
10:09 - but people tend to use doubles more
10:10 - because they have more precision
10:12 - and then you do not need this f at the
10:14 - end
10:16 - so this will store up to 15 digits after
10:19 - the decimal portion
10:21 - so we also have booleans let's say
10:24 - boolean
10:25 - z equals this holds either true
10:29 - or false and then we can display
10:32 - what value is within this boolean so if
10:35 - we print
10:35 - our variable z this will display false
10:39 - or we could hold true and this will
10:41 - display
10:42 - true but we can't display anything else
10:44 - besides those two
10:46 - like we cannot hold the word pizza
10:48 - because booleans only hold
10:50 - true or false we have characters
10:53 - char for short char and we don't
10:56 - necessarily need to
10:57 - come up with a variable that's only one
11:00 - letter we could have a name or something
11:02 - that's descriptive for this
11:03 - let's say we have a variable called
11:05 - symbol
11:07 - char symbol equals and then place
11:10 - a character within single quotes let's
11:13 - say we
11:14 - want the at sign so we now have
11:17 - a variable called symbol that contains
11:19 - the at sign
11:21 - so if i were to display this variable
11:23 - symbol to the console window
11:25 - it will display the value that is
11:26 - contained within which is the at sign
11:29 - and lastly we have strings so with
11:31 - strings these start with a capital s
11:34 - because they are of the reference
11:35 - data type anything that's a reference
11:37 - data type begins with a capital letter
11:40 - and let's say we want to store our name
11:42 - so string is the data type
11:44 - let's say the variable name is name
11:47 - equals
11:48 - and to store a string it works similar
11:50 - to a string literal
11:51 - we're going to use a set of double
11:53 - quotes and display
11:55 - or add a bunch of text like my name
11:59 - and then i can now display my name to
12:02 - the console window
12:04 - or i could do some string concatenation
12:05 - too and display
12:07 - the word hello plus my name
12:10 - and within the console window it's now
12:12 - going to display hello
12:14 - bro so that is everything you need to
12:17 - know to get started with
12:18 - variables in java if you would like a
12:20 - copy of all this code i will post all of
12:23 - this in the comments down
12:24 - below don't be afraid to smash that like
12:26 - button
12:27 - drop a comment down below and subscribe
12:29 - if you'd like to become a fellow bro

Cleaned transcript:

hey how's it going everybody it's your bro hope you're doing well and in this video i'm going to teach you guys all about variables in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running all right guys and gals let's talk about variables now a variable is a placeholder for a value and it behaves as the value that it contains do you remember from either elementary school or middle school when we were working with algebra we usually had to solve for some sort of variable like x or y and x or y contained some sort of numeric value and for all intents and purposes this variable behaved exactly as this value well with programming we can perform something similar to that but we are not limited to just numbers we could also store words whole sentences and these things called boolean values which hold either true or false but if we're going to store a value within a variable we have to list the data type of what we're planning to store within that variable is it going to be a number a word a boolean so we need to discuss data types there are eight primitive data types and a special reference data type called a string anything that i have noted with a star is particularly important so i would pay special attention to these our first data type is boolean this has a size of one bit so it can only hold two values that being true or false if we're attempting to sign a boolean value we would type either equals true or equals false something similar would be let's say we have a light switch program well if the light switch is on we could say that the light switch has a value of true if it's off it has a value of false so this is binary that's why it only uses one bit it only needs one bit of memory to function next we have byte this isn't as important as a few others but with one byte we can hold an integer number between negative 128 to 127 because a byte only has one byte of memory a short has two bytes of memory so can hold a larger number between negative 32 000 and some change to 32 000 and some change so integers integers are important these use 4 bytes of memory and they can store a number to just under 2 billion to just over 2 billion because they use 4 bytes of memory and a long they use eight bytes of memory so they can hold a very large number in fact they can hold a number between just under negative nine quintillion to just over positive nine quintillion now a float they can store a fractional number specifically up to six to seven digits what makes floats different from these data types on the top here is that bytes shorts integers and longs can only store a whole integer they cannot store this decimal portion so if you're working with a program or a variable that uses a fractional number you'll need to use either a float or a double and a double has more precision it uses eight bytes of memory and it can store a fractional number up to 15 digits so in comparison with a float this has less precision than a double and for an example i just listed a few of the digits of pi with this example we can only store six to seven digits of pi but with a double we can store up to 15. there is one strange convention with floats if you're going to assign a value to a variable that's of the float data type you need to follow the value with the letter f with double variables you actually do not need to do so so that's one major difference when assigning values between these two now let's move on to characters pronounced char for short think of charizard this uses two bytes of memory and this will store a single character letter or ascii value an example would be the letter f but a common convention with assigning values to a char variable is that you need to surround this value with a pair of single quotes and our last data type is the string data type the size really varies because these are reference data types they store a sequence of characters like a word or a sentence you could store a single character within a string but chars and strings behave differently because chars are primitive data types and strings are reference data types so let's distinguish the difference between primitive and reference data types here's a super quick description between the differences of primitive and reference data types primitive data types there are it and we just discussed them they are boolean by short integer longs all those cool things that we just discussed reference data types like strings well there's an unlimited amount because they are user defined primitives store data reference data types store an address primitives can only hold one value reference data types could hold more than one value primitives use less memory compared to reference data types which use more memory and primitive data types are faster compared to reference data types which are slower now you're probably thinking cool story bro but how do we create a variable well i'm glad you asked that question so the first process with creating a variable is that we need to declare the data type of what value that this variable is going to store so come up with a variable name like x and we will precede this variable with the data type of the value that we're planning to store within this variable and then with all statements we follow this with a semicolon at the end the next step is called assignment we will take our variable and assign it equal to some sort of value of the data type that we declared this variable to be but you could combine steps one and two together and this process is called initialization we would take the data type followed by the variable name and set it equal to some value and then add a semicolon at the end to finish the statement so you can either do this in two steps with declaration and assignment or combine them both together which is initialization how about we create a few variables does that sound good to you guys so let's begin with creating an integer variable let's say int x this step is called declaration we are declaring the data type of what value is going to be contained within this variable the second step is called assignment we can assign our variable a value let's say x equals 123 and this step is called assignment or we could combine both of these steps together and this process is called initialization intex equals 123 and this would be initialization so we can do stuff with this variable it will behave as the value that it contains we could print this to the console window so within a print or print line statement we could print the value of x so make sure you do not write this within quotes right now this will display the value that is contained within x which is 123 because this variable behaves as the value that it contains if you were to surround this with quotes what we are doing now is printing a string literal you can also print text as well as a variable together let's say we have a sentence a string literal that states my number is and then if we want to do some string concatenation with a variable we would add plus and then the variable name make sure this is not within quotes so this will display the sentence my number is plus our variable and in the console window it states my number is 123. so with integer variables the largest number that you can store within an integer variable is just over 2 billion let's say we are working with an extremely large number like the amount of student debt that i owe well this number is too large to store it within an integer variable we would probably want to use the long data type and one convention with assigning values to a long variable is that you need to follow this number with a capital l for some reason so we can now work with extremely large numbers so this might be useful if you're working with numbers like the speed of light or something so we now have a long variable and we can display this value a few of the other data types that we mentioned were bytes and shorts they have a lesser number that they can store so with bytes you can only store up to i believe 127 so we could store like 100 within here and this would be fine but 130 would be a little too much though so we don't tend to use bytes and shorts too much as a beginner because it's just way more convenient to work with integers um but you might use longs every once in a while too but as beginners we're mostly going to be sticking with integers now a double can store a number with a fractional portion with integers we cannot store a decimal portion so if this was 123.01 well we cannot store this decimal portion we can only do so with a float or a double so with a float you would type in float for the data type let's create a new variable like y float y equals 3.14 and a common convention for assigning numbers well values to float variables is that you have to follow this with f so you can store a number with a decimal portion within a float or a double and then we could display whatever this value is so y is equal to 3.14 but people tend to use doubles more because they have more precision and then you do not need this f at the end so this will store up to 15 digits after the decimal portion so we also have booleans let's say boolean z equals this holds either true or false and then we can display what value is within this boolean so if we print our variable z this will display false or we could hold true and this will display true but we can't display anything else besides those two like we cannot hold the word pizza because booleans only hold true or false we have characters char for short char and we don't necessarily need to come up with a variable that's only one letter we could have a name or something that's descriptive for this let's say we have a variable called symbol char symbol equals and then place a character within single quotes let's say we want the at sign so we now have a variable called symbol that contains the at sign so if i were to display this variable symbol to the console window it will display the value that is contained within which is the at sign and lastly we have strings so with strings these start with a capital s because they are of the reference data type anything that's a reference data type begins with a capital letter and let's say we want to store our name so string is the data type let's say the variable name is name equals and to store a string it works similar to a string literal we're going to use a set of double quotes and display or add a bunch of text like my name and then i can now display my name to the console window or i could do some string concatenation too and display the word hello plus my name and within the console window it's now going to display hello bro so that is everything you need to know to get started with variables in java if you would like a copy of all this code i will post all of this in the comments down below don't be afraid to smash that like button drop a comment down below and subscribe if you'd like to become a fellow bro
