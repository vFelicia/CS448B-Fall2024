With timestamps:

00:00 - hey yeah everybody it's your bro hope
00:02 - you're doing well and in this video i'm
00:03 - going to show you one way in which we
00:05 - can create an adjacency matrix in
00:07 - computer science so sit back relax and
00:10 - enjoy the show
00:12 - alright people so an adjacency matrix an
00:15 - adjacency matrix is a 2d array to store
00:18 - ones and zeros to represent edges
00:20 - between nodes there are different
00:22 - variations you could use booleans so you
00:24 - could say true or false depending if
00:27 - there's an edge or not and basically the
00:29 - number of rows and columns in an
00:31 - adjacency matrix is equal to the number
00:34 - of unique nodes the runtime complexity
00:36 - to check an edge is big o of one it's
00:39 - constant and the space complexity is big
00:41 - o of v squared so it uses up a lot of
00:43 - space now let's create our own adjacency
00:46 - matrix they're actually fairly simple so
00:48 - i'm going to create two classes graph
00:50 - and node so file new
00:53 - class i will name this graph
00:56 - finish file new class and i will name
01:00 - this class node
01:02 - so let's say that each node has some
01:04 - data maybe a single character char data
01:08 - and i'll create a constructor
01:10 - node we'll pass in some data when we
01:12 - create a node
01:13 - char
01:14 - data
01:15 - this dot data equals data within the
01:19 - graph class i'm going to declare a 2d
01:21 - array of integers
01:23 - so integer 2d array and i will name this
01:26 - matrix
01:27 - and within the graph constructor
01:30 - we will instantiate our matrix
01:33 - matrix
01:34 - equals
01:35 - new int
01:37 - now we need to declare a size of this
01:39 - matrix when we construct a graph object
01:42 - let's set up a parameter so int size
01:45 - size will be the amount of nodes that we
01:47 - have
01:48 - and the size of this 2d array will be
01:50 - size and size that's why the space
01:53 - complexity is big o of v squared it's
01:56 - the number of vertices squared if we
01:57 - have five nodes well then the size is
01:59 - going to be a total of 25 elements now
02:02 - let's declare a few methods
02:04 - public void
02:06 - add node and then we will pass in a node
02:10 - node node
02:12 - and add edge
02:14 - public void add edge then we need two
02:18 - indices a source and a destination and
02:21 - source int destination dst for short
02:25 - we'll need a method to check an edge
02:28 - public and this will return a boolean
02:30 - value boolean
02:32 - check
02:33 - edge
02:34 - and we'll need a source and destination
02:36 - for parameters
02:38 - and let's create a print method
02:40 - void print
02:43 - okay we'll fill in add a node a little
02:45 - bit later so let's fill in add edge we
02:48 - will pass in a source and a destination
02:50 - two indices
02:51 - so source will be the row destination
02:54 - will be the column so what we're gonna
02:55 - do is take our matrix at index of source
03:00 - and destination
03:01 - and set whatever value is in here which
03:03 - will be zero equal to one that means
03:06 - there's an edge between two nodes and
03:08 - that's really it within the check edge
03:10 - method we're going to check within our
03:12 - matrix if a given value is equal to one
03:15 - if it is return true if not return false
03:19 - so using an if statement let's check to
03:21 - see if matrix at index of source and
03:24 - destination is equal to one that means
03:27 - there's an edge if there is an edge
03:29 - let's return
03:30 - true else we will return false and
03:34 - that's it okay now before we actually
03:37 - print our graph let's actually create a
03:39 - graph
03:40 - so let's get rid of this
03:43 - graph
03:44 - graph equals new graph
03:48 - and we can add some nodes although this
03:50 - method doesn't do anything quite yet but
03:52 - it will in the future
03:53 - and we need to pass in a size uh so
03:55 - let's pass in five we'll create five
03:58 - nodes
03:59 - so to add a node type graph dot add node
04:02 - and this is a method that we created
04:04 - and i will pass in an anonymous node
04:07 - or you can use a named one
04:09 - so we have new node
04:11 - and then to create a node we need to
04:12 - pass in some data because that's what we
04:15 - decided on so let's pass in the letter a
04:18 - so this will be node a
04:20 - and we'll create a few more nodes
04:23 - b c d and e
04:28 - and we also can add edges between these
04:30 - nodes to represent adjacency so to add
04:33 - an edge type graph dot add
04:35 - edge
04:36 - so what we're doing in this example
04:38 - think of each node as having an index
04:40 - number to create an edge between two
04:43 - nodes we will pass in the index number
04:45 - of each node if i need an edge between
04:47 - nodes a and b well each of these has an
04:50 - index number within our matrix so this
04:53 - first node would have an index of 0 and
04:55 - the second node would have an index of
04:56 - one if i need an edge between these two
04:58 - i will add edge between zero and one and
05:01 - let's create a few others
05:03 - so how about b and c
05:06 - so c would have an index of two and c
05:09 - will have 2 edges based on the previous
05:11 - video
05:12 - so c will be connected to d
05:14 - so 2 to 3
05:17 - as well as e
05:18 - so 2 and 4.
05:21 - d won't have any edges this is a
05:24 - directed graph in this example
05:26 - and e has two edges we have e to a that
05:29 - would be four two zero
05:32 - and e to c
05:33 - four and two
05:35 - now let's print our graph graph dot
05:37 - print and we need to fill in this method
05:40 - within the print method of the graph
05:41 - class we just have to print our 2d array
05:44 - and we can use for loops for that
05:46 - so this will be the outer for loop and i
05:49 - equals zero we will continue this as
05:51 - long as i is less than the length of our
05:54 - matrix matrix.length
05:57 - then increments i by 1.
05:59 - so this will iterate over all of the
06:01 - rows in our matrix and then we need a
06:03 - nested for loop so change i to j within
06:06 - the nested loop
06:09 - whatever index we're on we will take
06:11 - matrix at index of i dot length this
06:14 - time as the stopping condition
06:16 - and during each iteration of the inner
06:18 - for loop i will use a print statement
06:21 - and i will print
06:23 - matrix at indices of i
06:26 - and j
06:27 - then i'll add a space between each of
06:29 - these oh then when you exit the inner
06:31 - for loop let's print a new line
06:33 - okay and here's our adjacency matrix
06:36 - each row corresponds to a node as well
06:39 - as each column if there's adjacency
06:41 - between two nodes well then there will
06:43 - be a one at that row and column this
06:45 - next part really isn't necessary this is
06:47 - kind of the general idea of an adjacency
06:49 - matrix but let's add some headers to the
06:51 - rows and columns within the graph class
06:53 - at the top let's create an array list
06:55 - array list and the data type will be
06:59 - node
07:00 - and i will name this nodes
07:02 - when we construct a graph object let's
07:04 - instantiate our nodes arraylist
07:07 - nodes equals new array list
07:13 - and when we add a node we just take our
07:15 - nodes arraylist dot add
07:18 - node
07:20 - and within the print method let's make a
07:22 - few changes
07:23 - so preceding our nested for loops let's
07:26 - print the data found within each node so
07:29 - it serves as a header and i can use it
07:31 - for each loop for this
07:32 - for every node node
07:35 - in nodes
07:38 - then let's print
07:41 - the node's data then maybe i'll add a
07:44 - space
07:45 - oh then add a new line
07:47 - okay there we go each column has the
07:50 - data found within each node and let's
07:52 - also do the same thing with each of
07:53 - these rows i think it would look cool
07:55 - before the inner for loop let's do the
07:58 - same thing
07:59 - let's copy this line
08:02 - but this would be it nodes dot get
08:06 - index
08:07 - of i
08:08 - dot data and let's see how that looks so
08:11 - far okay not too bad but let's add a few
08:14 - spaces
08:15 - so
08:16 - system.out.print
08:17 - and i'll just print two spaces
08:20 - all right there's our adjacency matrix
08:22 - if you're working with more complex data
08:24 - let's say city names i would consider
08:26 - using printf statements instead because
08:28 - you can align things properly and if you
08:31 - do want to check an edge we did create a
08:33 - check edge method so within a print line
08:35 - statement let's invoke the graph dot
08:39 - check edge method
08:41 - and then pass in two indices
08:43 - so let's see if there's an edge between
08:45 - nodes a and b so a has an index of zero
08:49 - b has an index of one there is an edge
08:51 - between these two so this will return
08:53 - true there is an edge this time let's
08:55 - check to see if there's an edge between
08:57 - d
08:58 - and c so d has an index of zero one two
09:02 - three
09:05 - and c has an index of two
09:09 - and this returns false there is no edge
09:11 - all right people so that's an adjacency
09:14 - matrix it's an array to store ones and
09:16 - zeros to represent edges the number of
09:19 - rows and number of columns is equal to
09:21 - the number of unique nodes the runtime
09:24 - complexity to check an edge is big o of
09:26 - one all we need are two indices however
09:29 - the space complexity for an adjacency
09:30 - matrix is big o of v squared take the
09:33 - number of nodes you have and square it
09:35 - so if i have 5 nodes 5 squared is 25 we
09:39 - have 25 elements all right so that's an
09:41 - adjacency matrix if you would like a
09:43 - copy of this code i'll post this to the
09:45 - comment section down below and well yeah
09:47 - that's an adjacency matrix in computer
09:49 - science

Cleaned transcript:

hey yeah everybody it's your bro hope you're doing well and in this video i'm going to show you one way in which we can create an adjacency matrix in computer science so sit back relax and enjoy the show alright people so an adjacency matrix an adjacency matrix is a 2d array to store ones and zeros to represent edges between nodes there are different variations you could use booleans so you could say true or false depending if there's an edge or not and basically the number of rows and columns in an adjacency matrix is equal to the number of unique nodes the runtime complexity to check an edge is big o of one it's constant and the space complexity is big o of v squared so it uses up a lot of space now let's create our own adjacency matrix they're actually fairly simple so i'm going to create two classes graph and node so file new class i will name this graph finish file new class and i will name this class node so let's say that each node has some data maybe a single character char data and i'll create a constructor node we'll pass in some data when we create a node char data this dot data equals data within the graph class i'm going to declare a 2d array of integers so integer 2d array and i will name this matrix and within the graph constructor we will instantiate our matrix matrix equals new int now we need to declare a size of this matrix when we construct a graph object let's set up a parameter so int size size will be the amount of nodes that we have and the size of this 2d array will be size and size that's why the space complexity is big o of v squared it's the number of vertices squared if we have five nodes well then the size is going to be a total of 25 elements now let's declare a few methods public void add node and then we will pass in a node node node and add edge public void add edge then we need two indices a source and a destination and source int destination dst for short we'll need a method to check an edge public and this will return a boolean value boolean check edge and we'll need a source and destination for parameters and let's create a print method void print okay we'll fill in add a node a little bit later so let's fill in add edge we will pass in a source and a destination two indices so source will be the row destination will be the column so what we're gonna do is take our matrix at index of source and destination and set whatever value is in here which will be zero equal to one that means there's an edge between two nodes and that's really it within the check edge method we're going to check within our matrix if a given value is equal to one if it is return true if not return false so using an if statement let's check to see if matrix at index of source and destination is equal to one that means there's an edge if there is an edge let's return true else we will return false and that's it okay now before we actually print our graph let's actually create a graph so let's get rid of this graph graph equals new graph and we can add some nodes although this method doesn't do anything quite yet but it will in the future and we need to pass in a size uh so let's pass in five we'll create five nodes so to add a node type graph dot add node and this is a method that we created and i will pass in an anonymous node or you can use a named one so we have new node and then to create a node we need to pass in some data because that's what we decided on so let's pass in the letter a so this will be node a and we'll create a few more nodes b c d and e and we also can add edges between these nodes to represent adjacency so to add an edge type graph dot add edge so what we're doing in this example think of each node as having an index number to create an edge between two nodes we will pass in the index number of each node if i need an edge between nodes a and b well each of these has an index number within our matrix so this first node would have an index of 0 and the second node would have an index of one if i need an edge between these two i will add edge between zero and one and let's create a few others so how about b and c so c would have an index of two and c will have 2 edges based on the previous video so c will be connected to d so 2 to 3 as well as e so 2 and 4. d won't have any edges this is a directed graph in this example and e has two edges we have e to a that would be four two zero and e to c four and two now let's print our graph graph dot print and we need to fill in this method within the print method of the graph class we just have to print our 2d array and we can use for loops for that so this will be the outer for loop and i equals zero we will continue this as long as i is less than the length of our matrix matrix.length then increments i by 1. so this will iterate over all of the rows in our matrix and then we need a nested for loop so change i to j within the nested loop whatever index we're on we will take matrix at index of i dot length this time as the stopping condition and during each iteration of the inner for loop i will use a print statement and i will print matrix at indices of i and j then i'll add a space between each of these oh then when you exit the inner for loop let's print a new line okay and here's our adjacency matrix each row corresponds to a node as well as each column if there's adjacency between two nodes well then there will be a one at that row and column this next part really isn't necessary this is kind of the general idea of an adjacency matrix but let's add some headers to the rows and columns within the graph class at the top let's create an array list array list and the data type will be node and i will name this nodes when we construct a graph object let's instantiate our nodes arraylist nodes equals new array list and when we add a node we just take our nodes arraylist dot add node and within the print method let's make a few changes so preceding our nested for loops let's print the data found within each node so it serves as a header and i can use it for each loop for this for every node node in nodes then let's print the node's data then maybe i'll add a space oh then add a new line okay there we go each column has the data found within each node and let's also do the same thing with each of these rows i think it would look cool before the inner for loop let's do the same thing let's copy this line but this would be it nodes dot get index of i dot data and let's see how that looks so far okay not too bad but let's add a few spaces so system.out.print and i'll just print two spaces all right there's our adjacency matrix if you're working with more complex data let's say city names i would consider using printf statements instead because you can align things properly and if you do want to check an edge we did create a check edge method so within a print line statement let's invoke the graph dot check edge method and then pass in two indices so let's see if there's an edge between nodes a and b so a has an index of zero b has an index of one there is an edge between these two so this will return true there is an edge this time let's check to see if there's an edge between d and c so d has an index of zero one two three and c has an index of two and this returns false there is no edge all right people so that's an adjacency matrix it's an array to store ones and zeros to represent edges the number of rows and number of columns is equal to the number of unique nodes the runtime complexity to check an edge is big o of one all we need are two indices however the space complexity for an adjacency matrix is big o of v squared take the number of nodes you have and square it so if i have 5 nodes 5 squared is 25 we have 25 elements all right so that's an adjacency matrix if you would like a copy of this code i'll post this to the comment section down below and well yeah that's an adjacency matrix in computer science
