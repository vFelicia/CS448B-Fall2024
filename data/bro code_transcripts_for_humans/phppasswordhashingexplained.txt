With timestamps:

00:00 - hello hello again everybody today I'm
00:02 - going to be explaining hashing in PHP
00:04 - hashing is the process of transforming
00:07 - sensitive data such as a password into
00:10 - letters numbers and or symbols via a
00:13 - mathematical process it's kind of
00:16 - similar to encryption but it's
00:18 - technically different basically speaking
00:20 - we can hide sensitive data from third
00:22 - parties like hackers in my example I
00:25 - have hashed my password
00:27 - pizza123 this is what my hashing
00:29 - algorithm spat out it appears to be what
00:32 - looks like a bunch of random letters
00:34 - numbers and symbols we might store this
00:36 - in a database that in case that database
00:39 - is compromised well then a third party
00:41 - wouldn't be able to see my original
00:42 - password this is what the third party
00:45 - would see in PHP to create a hash of
00:48 - let's say a password I'll create a
00:49 - password variable
00:52 - make up some password
00:55 - Pizza one two three
00:57 - I will create a hash variable
01:01 - then use the password
01:03 - hash function
01:06 - the two arguments are a password
01:10 - then a hashing algorithm the second
01:13 - argument is technically a constant that
01:15 - specifies the algorithm the constant
01:18 - will set is password default
01:21 - if we set our algorithm to be password
01:23 - default and PHP currently we're using
01:26 - the bcrypt algorithm which is a very
01:28 - popular algorithm this hash is what
01:32 - we'll be storing within a database it's
01:34 - protected if I were to Echo my hash
01:39 - this would be the result
01:42 - our password is what is referred to as
01:44 - plain text we can plainly see what it is
01:47 - using the password verify function we
01:50 - can compare a password versus a hash if
01:54 - they're mathematically similar then that
01:56 - password verify function will return
01:58 - true
02:00 - let's write a if statement if
02:04 - password
02:05 - verify then we'll pass in a password and
02:09 - a hash let's say that we get some user
02:11 - input the user types in hamburger 666.
02:17 - then the other argument is going to be
02:19 - our hash
02:21 - just imagine that we're retrieving this
02:23 - hash from a database if our plain text
02:26 - password and our hash are mathematically
02:29 - consistent then this function will
02:32 - return true
02:33 - so let's Echo
02:37 - you are logged in
02:41 - else
02:43 - Echo
02:46 - incorrect password
02:50 - okay is hamburger 666 the same as our
02:53 - hash
02:55 - incorrect password what about hot dog
02:58 - one two one two
03:00 - that is also incorrect
03:02 - maybe pizza one two three
03:05 - oh look at that that's the right
03:06 - password you are logged in
03:09 - the password verify function will verify
03:11 - a plain text password versus a hash if
03:15 - there's a match we return true if not it
03:18 - returns false that's really what hashing
03:20 - is in layman's terms it's transforming
03:22 - sensitive data such as a password into
03:25 - letters numbers and or symbols via a
03:28 - mathematical process and the purpose is
03:31 - to hide the original data from third
03:33 - parties and that is how to Hash a
03:35 - password in PHP

Cleaned transcript:

hello hello again everybody today I'm going to be explaining hashing in PHP hashing is the process of transforming sensitive data such as a password into letters numbers and or symbols via a mathematical process it's kind of similar to encryption but it's technically different basically speaking we can hide sensitive data from third parties like hackers in my example I have hashed my password pizza123 this is what my hashing algorithm spat out it appears to be what looks like a bunch of random letters numbers and symbols we might store this in a database that in case that database is compromised well then a third party wouldn't be able to see my original password this is what the third party would see in PHP to create a hash of let's say a password I'll create a password variable make up some password Pizza one two three I will create a hash variable then use the password hash function the two arguments are a password then a hashing algorithm the second argument is technically a constant that specifies the algorithm the constant will set is password default if we set our algorithm to be password default and PHP currently we're using the bcrypt algorithm which is a very popular algorithm this hash is what we'll be storing within a database it's protected if I were to Echo my hash this would be the result our password is what is referred to as plain text we can plainly see what it is using the password verify function we can compare a password versus a hash if they're mathematically similar then that password verify function will return true let's write a if statement if password verify then we'll pass in a password and a hash let's say that we get some user input the user types in hamburger 666. then the other argument is going to be our hash just imagine that we're retrieving this hash from a database if our plain text password and our hash are mathematically consistent then this function will return true so let's Echo you are logged in else Echo incorrect password okay is hamburger 666 the same as our hash incorrect password what about hot dog one two one two that is also incorrect maybe pizza one two three oh look at that that's the right password you are logged in the password verify function will verify a plain text password versus a hash if there's a match we return true if not it returns false that's really what hashing is in layman's terms it's transforming sensitive data such as a password into letters numbers and or symbols via a mathematical process and the purpose is to hide the original data from third parties and that is how to Hash a password in PHP
