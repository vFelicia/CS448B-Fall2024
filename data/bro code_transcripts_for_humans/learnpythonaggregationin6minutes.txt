With timestamps:

00:00 - hey what's going on everybody so in
00:01 - today's video I'm going to explain
00:02 - aggregation in Python aggregation
00:05 - represents a relationship where one
00:07 - object contains references to one or
00:10 - more independent objects one object acts
00:14 - as a container the whole which can
00:16 - contain other objects the parts so what
00:19 - we'll do in this demonstration is create
00:21 - an object that's going to act as a
00:23 - container we'll create a class of
00:26 - library for now a right pass now a
00:29 - library
00:30 - can contain books we will create a class
00:34 - of
00:35 - book we'll be creating book objects
00:38 - which we will add to our library object
00:41 - the library object is going to act as
00:42 - the whole the container the books are
00:45 - the independent Parts a library can
00:48 - exist without its books and the books
00:51 - can exist without the library that's the
00:53 - main difference between aggregation and
00:55 - composition these classes are
00:57 - independent of one another they can
00:59 - exist without each other with our class
01:02 - of book we'll need a Constructor we will
01:05 - Define our
01:07 - Constructor if we create a book we need
01:11 - a title and an
01:13 - author we will Define a title attribute
01:17 - equals the title that we receive and
01:21 - self. author equals the author that we
01:24 - receive that's all we need for the book
01:27 - class now with the library class we will
01:29 - we'll also need a
01:31 - Constructor Define
01:34 - innit for our library we need a name for
01:37 - the library for example the New York
01:40 - Public
01:41 - Library self. name equals the name that
01:45 - we receive let's construct our library
01:48 - object first Library equals Library we
01:52 - need to pass in a name for this
01:54 - Library let's say New York Public
01:59 - Library
02:01 - so this should run with no problems then
02:04 - we'll create a few books let's say book
02:07 - one equals called the book Constructor
02:10 - we have to pass in a title and an author
02:14 - so pick a few books I will pick Harry
02:16 - Potter Happy
02:21 - Harry Harry
02:23 - Potter and the philosopher stone but I
02:25 - don't want to type the whole title let's
02:27 - just say Harry Potter dot dot dot
02:31 - the author of this book is JK
02:35 - rolling okay let's create another book
02:38 - book two equals
02:42 - book for my next book I'll pick the
02:46 - Hobbit the author is
02:50 - JR R
02:53 - token then book three equals book we
02:58 - need a title and an author
03:00 - I will pick the
03:02 - color of
03:05 - Magic by
03:07 - Terry
03:11 - pratchet we have no problems when
03:13 - running this our library and our books
03:16 - can exist without each other our books
03:19 - are independent so now where aggregation
03:22 - comes in our library object will contain
03:25 - our book objects one way in which we can
03:27 - handle this is that within the
03:29 - Constructor for our library let's create
03:32 - an attribute of
03:34 - books this will be an empty
03:38 - list we'll need a way to add these books
03:42 - to our list of books we will Define a
03:45 - method of add
03:48 - book but we have to pass in a book
03:51 - object when we call this
03:53 - method we're going to access self. books
03:58 - it's a list list have a built-in append
04:01 - method we will append our book to our
04:04 - list of
04:07 - books let's see if this at least runs
04:10 - we're going to take our
04:12 - library call the add book method that we
04:16 - defined then pass in our book object of
04:19 - book
04:20 - one then let's do this with book two and
04:23 - book
04:25 - three and this is run with no problems
04:28 - our books can exist independently of our
04:31 - library our library object is just
04:34 - containing them it's housing these books
04:38 - now if I would like to print all the
04:40 - books in my library I could create a
04:42 - method to do that let's define a method
04:45 - of list books there will be no
04:49 - parameters besides
04:50 - self I'm going to return a list
04:55 - comprehension for every book in self.
04:59 - books remember that books is a list for
05:03 - every book in books Let's return an F
05:07 - string where we display the book's title
05:10 - and the book's
05:12 - author display book. tile the word
05:17 - by book.
05:21 - author okay let's see if this works
05:24 - first I'm going to print the library's
05:27 - name print Li
05:30 - libraryname
05:32 - New York Public
05:35 - Library then I'm going to
05:37 - print access the library objects list
05:42 - books
05:44 - method and here is my list of books
05:47 - although I'm going to reformat this so
05:49 - it looks better I'll use a for
05:52 - Loop for every
05:55 - book in Access our library objects
06:00 - list books method this will return a
06:03 - list we can iterate through it for every
06:07 - book in the list of books print each
06:12 - book all right here is our libraries
06:15 - name and each book in our list of
06:19 - books all right everybody so that's
06:21 - aggregation it represents a relationship
06:23 - where one object the whole contains
06:26 - references to one or more independent
06:29 - objects
06:30 - the books they can exist without one
06:32 - another and well everybody that is
06:34 - aggregation in Python

Cleaned transcript:

hey what's going on everybody so in today's video I'm going to explain aggregation in Python aggregation represents a relationship where one object contains references to one or more independent objects one object acts as a container the whole which can contain other objects the parts so what we'll do in this demonstration is create an object that's going to act as a container we'll create a class of library for now a right pass now a library can contain books we will create a class of book we'll be creating book objects which we will add to our library object the library object is going to act as the whole the container the books are the independent Parts a library can exist without its books and the books can exist without the library that's the main difference between aggregation and composition these classes are independent of one another they can exist without each other with our class of book we'll need a Constructor we will Define our Constructor if we create a book we need a title and an author we will Define a title attribute equals the title that we receive and self. author equals the author that we receive that's all we need for the book class now with the library class we will we'll also need a Constructor Define innit for our library we need a name for the library for example the New York Public Library self. name equals the name that we receive let's construct our library object first Library equals Library we need to pass in a name for this Library let's say New York Public Library so this should run with no problems then we'll create a few books let's say book one equals called the book Constructor we have to pass in a title and an author so pick a few books I will pick Harry Potter Happy Harry Harry Potter and the philosopher stone but I don't want to type the whole title let's just say Harry Potter dot dot dot the author of this book is JK rolling okay let's create another book book two equals book for my next book I'll pick the Hobbit the author is JR R token then book three equals book we need a title and an author I will pick the color of Magic by Terry pratchet we have no problems when running this our library and our books can exist without each other our books are independent so now where aggregation comes in our library object will contain our book objects one way in which we can handle this is that within the Constructor for our library let's create an attribute of books this will be an empty list we'll need a way to add these books to our list of books we will Define a method of add book but we have to pass in a book object when we call this method we're going to access self. books it's a list list have a builtin append method we will append our book to our list of books let's see if this at least runs we're going to take our library call the add book method that we defined then pass in our book object of book one then let's do this with book two and book three and this is run with no problems our books can exist independently of our library our library object is just containing them it's housing these books now if I would like to print all the books in my library I could create a method to do that let's define a method of list books there will be no parameters besides self I'm going to return a list comprehension for every book in self. books remember that books is a list for every book in books Let's return an F string where we display the book's title and the book's author display book. tile the word by book. author okay let's see if this works first I'm going to print the library's name print Li libraryname New York Public Library then I'm going to print access the library objects list books method and here is my list of books although I'm going to reformat this so it looks better I'll use a for Loop for every book in Access our library objects list books method this will return a list we can iterate through it for every book in the list of books print each book all right here is our libraries name and each book in our list of books all right everybody so that's aggregation it represents a relationship where one object the whole contains references to one or more independent objects the books they can exist without one another and well everybody that is aggregation in Python
