With timestamps:

00:00 - why hello again it's me so today I gotta
00:03 - explain stored procedures a stored
00:05 - procedure is prepared SQL code that you
00:08 - can save it's great if there's a query
00:10 - that you write often for example I have
00:12 - this statement it's very verbose there's
00:15 - a lot we have to write if this statement
00:17 - is something I have to write often I
00:19 - could save it and reuse it later this
00:21 - statement will interjoin the
00:23 - transactions table and my customers
00:25 - table then display all customers that
00:27 - made a transaction this statement is
00:29 - very verbose if I have to write the
00:31 - statement often I could save it as a
00:34 - stored procedure I can refer to the
00:36 - nickname that I gave that snippet of
00:37 - code the name I gave this procedure was
00:40 - get customers
00:43 - then I need to call this stored
00:45 - procedure
00:47 - and that does the same thing and it's a
00:49 - lot less to write there's also a few
00:51 - other benefits which we'll discuss at
00:52 - the end of the video let's begin with
00:54 - something simple I would like to select
00:56 - all from my customers table to turn the
01:00 - statement or statements into a stored
01:03 - procedure I will type create
01:07 - procedure
01:08 - then a name for the statement or
01:10 - statements I will name this statement
01:13 - get customers
01:15 - add a set of parentheses
01:18 - type the keyword begin
01:20 - wherever your statement or statements
01:22 - end type end then for clarity I'm going
01:26 - to tab all of my statements between
01:28 - begin and end
01:29 - so we have a problem we're trying to
01:32 - create this procedure however MySQL is
01:34 - stopping at this semicolon here we end
01:37 - all statements with a semicolon rather
01:39 - than at the end our semicolon is known
01:41 - as a delimiter it's kind of like the
01:43 - period at the end of a sentence we're
01:45 - telling MySQL that our statement ends
01:47 - here but we need our statement to end
01:49 - here after the end keyword we can
01:52 - actually change the delimiter
01:53 - temporarily type delimiter before we
01:57 - create the procedure
01:58 - typically when people change their
02:00 - delimiter temporarily they'll either use
02:02 - two forward slashes or two dollar signs
02:05 - I'll stick with the dollar signs because
02:06 - I think that's cooler after we create
02:09 - our procedure let's change our delimiter
02:11 - back to the semicolon MySQL no longer
02:14 - recognizes our semicolon as the
02:16 - delimiter after the end keyword I will
02:19 - use our new delimiter to end this
02:21 - statement that should work now let's
02:24 - execute the statement
02:25 - we have created our procedure I'm going
02:27 - to refresh my navigator window
02:30 - underneath stored procedures we have our
02:32 - stored procedure of get customers
02:35 - to invoke the stored procedure type call
02:38 - the name of the procedure get customers
02:42 - add a set of parentheses then a
02:44 - semicolon
02:46 - that will execute whatever code you
02:48 - stored within your stored procedure to
02:50 - drop a stored procedure you would type
02:52 - drop
02:54 - procedure
02:56 - the name of the procedure
02:58 - get
02:59 - customers
03:01 - let's try another example
03:03 - this time we will send our procedure a
03:07 - piece of data within the set of
03:08 - parentheses a customer ID number such as
03:11 - 1 2 3 4 so on and so forth
03:14 - we will get a customer by their customer
03:17 - ID we will create a procedure
03:23 - I will name this procedure find
03:26 - customer
03:27 - add a set of parentheses to find a
03:30 - customer by their customer ID when we
03:33 - invoke the stored procedure within the
03:35 - set of parentheses we will need to place
03:37 - a customer ID but when we create the
03:40 - stored procedure we have to set up what
03:41 - is called a parameter we will type in
03:44 - then a nickname for that piece of data
03:47 - we're passing in a transaction ID I'll
03:50 - give this parameter a nickname of ID
03:52 - then we need the data type of what we're
03:54 - passing in we're passing in an integer
03:57 - so we have one parameter set up let's
04:00 - use that begin keyword that end keyword
04:04 - list our statement or statements between
04:06 - these two keywords I will select all
04:10 - from my customers table
04:14 - where my customer ID equals the ID that
04:19 - we pass in that nickname
04:22 - we need to change the delimiter because
04:24 - MySQL thinks we're trying to end our
04:26 - statement here but we need it to end
04:28 - after the end keyword so let's change
04:31 - the delimiter to double dollar signs
04:35 - then change it back
04:40 - all right we have created that stored
04:42 - procedure let's invoke it
04:44 - call
04:46 - find customer
04:49 - within the set of parentheses we need to
04:51 - pass in a customer ID number
04:53 - let's pass in one
04:56 - that would give us Fred fish
04:58 - two is Larry Lobster
05:01 - three is bubble Bass
05:04 - five is Pearl crabs when you invoke a
05:07 - stored procedure you can pass in some
05:08 - data depending on what you need exactly
05:11 - for your stored procedure let's drop
05:13 - this procedure then do one last example
05:16 - drop procedure find
05:19 - customer
05:21 - [Music]
05:23 - this time we will send two arguments two
05:25 - pieces of data a first name and a last
05:28 - name
05:29 - create
05:30 - procedure
05:33 - find customer
05:36 - within our set of parentheses the first
05:38 - piece of data we'll pass in will be a
05:41 - first name
05:43 - but first is already a keyword maybe F
05:46 - name meaning first name then the data
05:50 - type let's see for customers the data
05:53 - type of first and last names is
05:56 - varchar50
05:58 - varchar
06:00 - 50.
06:02 - for your next piece of data you would
06:04 - separate that with a comma
06:07 - in
06:08 - our nickname will be lname for last name
06:11 - data type is varchar
06:14 - 50.
06:16 - then I'm just going to put that on a new
06:18 - line for clarity
06:19 - type the begin keyword
06:22 - and
06:24 - write your statements between begin and
06:26 - end
06:27 - we will select all from our customers
06:30 - table
06:32 - where
06:33 - first name equals
06:36 - the name of the data that we pass in
06:39 - and
06:41 - last name equals
06:44 - the other piece of data the second piece
06:46 - the last name
06:49 - again we need to change the delimiter to
06:51 - create this procedure
06:54 - double dollar signs
06:57 - then change it back
07:00 - we have created our stored procedure
07:02 - let's invoke it
07:05 - call find customer
07:08 - within the set of parentheses we will
07:09 - list a first name and a last name
07:13 - Larry
07:15 - comma
07:16 - Lobster
07:18 - get Larry Lobster's information let's
07:21 - find him
07:22 - and there he is customer id2 first name
07:25 - Larry last name Lobster referral ID of
07:27 - one email is L Lobster gmail.com all
07:31 - right everybody that is a sword
07:32 - procedure it's prepared SQL code that
07:35 - you can save it's great if there's a
07:37 - query that you write often a few of the
07:39 - benefits is that it reduces Network
07:41 - traffic it increases performance and is
07:44 - more secure and administrator can grant
07:46 - permission to a user or an application
07:49 - to use a stored procedure one of the
07:51 - downsides though is that it increases
07:53 - memory usage of every connection and
07:55 - well everybody those are stored
07:57 - procedures in MySQL

Cleaned transcript:

why hello again it's me so today I gotta explain stored procedures a stored procedure is prepared SQL code that you can save it's great if there's a query that you write often for example I have this statement it's very verbose there's a lot we have to write if this statement is something I have to write often I could save it and reuse it later this statement will interjoin the transactions table and my customers table then display all customers that made a transaction this statement is very verbose if I have to write the statement often I could save it as a stored procedure I can refer to the nickname that I gave that snippet of code the name I gave this procedure was get customers then I need to call this stored procedure and that does the same thing and it's a lot less to write there's also a few other benefits which we'll discuss at the end of the video let's begin with something simple I would like to select all from my customers table to turn the statement or statements into a stored procedure I will type create procedure then a name for the statement or statements I will name this statement get customers add a set of parentheses type the keyword begin wherever your statement or statements end type end then for clarity I'm going to tab all of my statements between begin and end so we have a problem we're trying to create this procedure however MySQL is stopping at this semicolon here we end all statements with a semicolon rather than at the end our semicolon is known as a delimiter it's kind of like the period at the end of a sentence we're telling MySQL that our statement ends here but we need our statement to end here after the end keyword we can actually change the delimiter temporarily type delimiter before we create the procedure typically when people change their delimiter temporarily they'll either use two forward slashes or two dollar signs I'll stick with the dollar signs because I think that's cooler after we create our procedure let's change our delimiter back to the semicolon MySQL no longer recognizes our semicolon as the delimiter after the end keyword I will use our new delimiter to end this statement that should work now let's execute the statement we have created our procedure I'm going to refresh my navigator window underneath stored procedures we have our stored procedure of get customers to invoke the stored procedure type call the name of the procedure get customers add a set of parentheses then a semicolon that will execute whatever code you stored within your stored procedure to drop a stored procedure you would type drop procedure the name of the procedure get customers let's try another example this time we will send our procedure a piece of data within the set of parentheses a customer ID number such as 1 2 3 4 so on and so forth we will get a customer by their customer ID we will create a procedure I will name this procedure find customer add a set of parentheses to find a customer by their customer ID when we invoke the stored procedure within the set of parentheses we will need to place a customer ID but when we create the stored procedure we have to set up what is called a parameter we will type in then a nickname for that piece of data we're passing in a transaction ID I'll give this parameter a nickname of ID then we need the data type of what we're passing in we're passing in an integer so we have one parameter set up let's use that begin keyword that end keyword list our statement or statements between these two keywords I will select all from my customers table where my customer ID equals the ID that we pass in that nickname we need to change the delimiter because MySQL thinks we're trying to end our statement here but we need it to end after the end keyword so let's change the delimiter to double dollar signs then change it back all right we have created that stored procedure let's invoke it call find customer within the set of parentheses we need to pass in a customer ID number let's pass in one that would give us Fred fish two is Larry Lobster three is bubble Bass five is Pearl crabs when you invoke a stored procedure you can pass in some data depending on what you need exactly for your stored procedure let's drop this procedure then do one last example drop procedure find customer this time we will send two arguments two pieces of data a first name and a last name create procedure find customer within our set of parentheses the first piece of data we'll pass in will be a first name but first is already a keyword maybe F name meaning first name then the data type let's see for customers the data type of first and last names is varchar50 varchar 50. for your next piece of data you would separate that with a comma in our nickname will be lname for last name data type is varchar 50. then I'm just going to put that on a new line for clarity type the begin keyword and write your statements between begin and end we will select all from our customers table where first name equals the name of the data that we pass in and last name equals the other piece of data the second piece the last name again we need to change the delimiter to create this procedure double dollar signs then change it back we have created our stored procedure let's invoke it call find customer within the set of parentheses we will list a first name and a last name Larry comma Lobster get Larry Lobster's information let's find him and there he is customer id2 first name Larry last name Lobster referral ID of one email is L Lobster gmail.com all right everybody that is a sword procedure it's prepared SQL code that you can save it's great if there's a query that you write often a few of the benefits is that it reduces Network traffic it increases performance and is more secure and administrator can grant permission to a user or an application to use a stored procedure one of the downsides though is that it increases memory usage of every connection and well everybody those are stored procedures in MySQL
