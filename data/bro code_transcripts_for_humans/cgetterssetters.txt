With timestamps:

00:02 - all right we have a lot to talk about
00:04 - today
00:04 - getters and setters but before i explain
00:07 - what these are
00:08 - let me explain the situation we have a
00:10 - class car
00:11 - and we have one field within our car
00:13 - class speed
00:14 - so when we construct a car object we
00:17 - need to pass in something for the speed
00:19 - maybe this is miles per hour kilometers
00:21 - per hour doesn't really matter
00:23 - so let's say that somebody takes our car
00:25 - object
00:26 - and changes the speed to like whatever
00:29 - this number is
00:30 - 100 million actually let's make that a
00:33 - billion
00:33 - how can we prevent people from doing
00:35 - this because currently our car is going
00:38 - way too fast
00:39 - so one way in which we could do that is
00:42 - to change
00:42 - this field from public to private
00:46 - but then we can't access it at all
00:48 - another way is to set up
00:49 - getters and setters and this adds
00:52 - security to our program
00:53 - via this concept called encapsulation so
00:56 - we need to first set
00:58 - up a property for this field the
01:00 - property name is the same as the field
01:02 - name
01:02 - except it's capital so type
01:06 - public if you're returning something
01:08 - list the data type
01:10 - then speed and then let's make this
01:12 - capital then add a set of curly braces
01:15 - a property combines the aspects of both
01:18 - fields and
01:18 - methods and it shares the same name with
01:21 - the field so it's kind of like
01:22 - something in between a field and a
01:24 - method and it contains
01:26 - accessors a get and set
01:29 - accessor now to first assign a value
01:32 - we'll need to change our constructor
01:34 - instead of assigning the field speed we
01:36 - will assign
01:37 - the property speed so this has a capital
01:40 - s
01:40 - let's create a get accessor first when
01:43 - we would like to
01:45 - get the value of speed whatever is
01:47 - contained within speed
01:48 - we will use this get accessor so type
01:51 - get
01:51 - curly braces and we will return
01:55 - speed and then we'll need to assign this
01:58 - with
01:58 - the set accessor then make sure you have
02:00 - that semicolon at the end
02:02 - so by using this get accessor this
02:05 - will read whatever values within our
02:08 - field
02:09 - then we'll need a set accessor if we
02:11 - would like this to be
02:12 - writable set curly braces so what we'll
02:15 - do here is set
02:16 - speed equal to value
02:20 - so value is kind of like a parameter
02:22 - properties combine the aspects of both
02:24 - fields and
02:25 - methods so when we assign a value
02:28 - to speed well then this value is going
02:31 - to be
02:32 - this so it's kind of like an argument
02:34 - and a parameter
02:36 - and within our set accessor we can
02:37 - actually set up like some code or some
02:39 - rules or something
02:41 - so if somebody attempts to change the
02:43 - speed we could write an if statement
02:45 - like if value is greater than
02:48 - let's say 500 then we will limit this
02:52 - let's change speed equal to 500 then
02:56 - else speed
03:00 - equals value
03:04 - now car.speed is inaccessible due to its
03:07 - protection level
03:08 - so we need to access instead of the
03:10 - field the properties so that's
03:12 - speed with a capital s and then if we're
03:15 - going to display the value of speed
03:17 - we'll access the property instead of the
03:19 - field so if we attempt to set our speed
03:22 - equal to 1 billion well we will access
03:25 - this set accessor and then it's going to
03:28 - be limited to
03:29 - 500 then so if we attempt to change our
03:31 - speed to 1 billion
03:33 - it will be limited to 500 and then we
03:36 - can still display the value
03:37 - and access it because by having a getter
03:40 - and setter
03:41 - this is both readable and writable
03:44 - so yeah those are getters and setters
03:47 - they are accessors found within
03:49 - a property a property combines the
03:51 - aspect of both fields and
03:53 - methods and if you have a private field
03:56 - you can also set up a property
03:58 - that has getters and setters for more
04:00 - security
04:01 - so yeah those are getters and setters in
04:04 - c sharp

Cleaned transcript:

all right we have a lot to talk about today getters and setters but before i explain what these are let me explain the situation we have a class car and we have one field within our car class speed so when we construct a car object we need to pass in something for the speed maybe this is miles per hour kilometers per hour doesn't really matter so let's say that somebody takes our car object and changes the speed to like whatever this number is 100 million actually let's make that a billion how can we prevent people from doing this because currently our car is going way too fast so one way in which we could do that is to change this field from public to private but then we can't access it at all another way is to set up getters and setters and this adds security to our program via this concept called encapsulation so we need to first set up a property for this field the property name is the same as the field name except it's capital so type public if you're returning something list the data type then speed and then let's make this capital then add a set of curly braces a property combines the aspects of both fields and methods and it shares the same name with the field so it's kind of like something in between a field and a method and it contains accessors a get and set accessor now to first assign a value we'll need to change our constructor instead of assigning the field speed we will assign the property speed so this has a capital s let's create a get accessor first when we would like to get the value of speed whatever is contained within speed we will use this get accessor so type get curly braces and we will return speed and then we'll need to assign this with the set accessor then make sure you have that semicolon at the end so by using this get accessor this will read whatever values within our field then we'll need a set accessor if we would like this to be writable set curly braces so what we'll do here is set speed equal to value so value is kind of like a parameter properties combine the aspects of both fields and methods so when we assign a value to speed well then this value is going to be this so it's kind of like an argument and a parameter and within our set accessor we can actually set up like some code or some rules or something so if somebody attempts to change the speed we could write an if statement like if value is greater than let's say 500 then we will limit this let's change speed equal to 500 then else speed equals value now car.speed is inaccessible due to its protection level so we need to access instead of the field the properties so that's speed with a capital s and then if we're going to display the value of speed we'll access the property instead of the field so if we attempt to set our speed equal to 1 billion well we will access this set accessor and then it's going to be limited to 500 then so if we attempt to change our speed to 1 billion it will be limited to 500 and then we can still display the value and access it because by having a getter and setter this is both readable and writable so yeah those are getters and setters they are accessors found within a property a property combines the aspect of both fields and methods and if you have a private field you can also set up a property that has getters and setters for more security so yeah those are getters and setters in c sharp
