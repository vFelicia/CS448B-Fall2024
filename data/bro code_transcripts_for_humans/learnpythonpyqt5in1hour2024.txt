With timestamps:

00:00 - all right everybody in today's video
00:01 - we're going to get started working with
00:03 - the pi qd5 graphical user interface also
00:06 - known as a goey GUI in this topic we'll
00:09 - be creating a basic window so let's get
00:12 - started all right the first step is that
00:14 - using pip we're going to install the pi
00:16 - qt5 package open up a terminal both py
00:20 - charm and vs code have a built-in
00:21 - terminal that you can
00:23 - use we're going to use pip that is
00:25 - Python's package manager pip install Pi
00:31 - qt5 enter and this might just take a
00:35 - second once your download has finished
00:38 - you should have a package within your
00:39 - site packages folder named Pi qt5 we can
00:43 - work with it as long as we import
00:45 - it first we are going to import the
00:49 - module of CIS CIS meaning system this
00:52 - module provides access to variables used
00:55 - and maintained by the python interpreter
00:57 - then from the package of Pi qt5 do pay
01:02 - attention to the capitalization it's
01:04 - easy to mess that up use dot to access
01:07 - the module of
01:09 - QT widgets widgets are the building
01:13 - blocks of a pi qt5 application they
01:16 - begin with Q that helps distinguish them
01:18 - from widgets from other libraries they
01:20 - typically begin with Q from this module
01:24 - import the following widgets Q
01:28 - application
01:30 - and Q main
01:34 - window here's some boiler plate code
01:36 - that we have to write in order to get
01:37 - this application up and running first we
01:39 - will create a class of main window which
01:44 - will inherit from the class of Cain
01:47 - window by inheriting from the parent of
01:50 - Cain window we can customize our own
01:52 - Windows to display to the user we will
01:55 - need a Constructor let's define that
01:58 - Define Dunder inet
02:00 - there will be no arguments currently
02:02 - besides self and in case we have to pass
02:04 - any arguments to the parent of Cain
02:06 - window we will access the super class
02:09 - that's the parent and call the parents
02:13 - Constructor but currently we don't have
02:15 - any arguments to pass
02:17 - in we will return to this class
02:20 - momentarily let's define a function of
02:23 - main When We Begin this program we will
02:25 - call the function of main to begin the
02:28 - application for now all right
02:31 - pass if we are running this file
02:33 - directly let's add the following if
02:36 - statement if Dunder name is equal to a
02:40 - string of Dunder main if we are running
02:43 - this file directly call the main
02:45 - function in order for us to
02:48 - begin if that's true we will call the
02:50 - function of main within the main
02:53 - function we will create an app object
02:56 - app equals we will call the Constructor
02:59 - for Q application that class but there's
03:03 - one argument that we have to pass in we
03:05 - will access our module of CIS do AR
03:10 - RGV meaning arguments so by passing in
03:14 - this argument this allows Pi QT to
03:17 - process any command line arguments
03:18 - intended for it that's if we use command
03:20 - prompt or terminal we won't be doing
03:22 - that in the series but you may someday
03:24 - in the future it would be a good idea
03:26 - for us to Future proof our code
03:29 - otherwise you may see people pass in an
03:30 - empty list so we now have an app object
03:34 - next we will create a window object
03:36 - window equals call The Constructor for
03:40 - our class of main window currently we
03:43 - don't have any arguments to pass in we
03:45 - have an app object and a window object
03:47 - by calling their respective Constructors
03:50 - now if I run this program currently our
03:52 - window is not going to show the default
03:55 - behavior for a window is to hide it in
03:59 - order to to show our window we will
04:01 - access our window call the show method
04:04 - to show
04:05 - it it's only going to appear for a brief
04:08 - second when I run this
04:10 - script I don't know if you saw it but it
04:13 - pops up for a brief
04:15 - second we need to ensure that the window
04:17 - stays until we interact with it or close
04:20 - it after we show our window we will
04:23 - access our module of
04:25 - CIS called the exit method the exit
04:29 - method method ensures a clean exit of
04:31 - our program within our exit method we
04:34 - will pass in as an argument our app
04:37 - object our app object has a built-in
04:40 - method of
04:43 - excore and this is a method so we can
04:45 - call it this is the execute method there
04:48 - is an underscore character after exec
04:51 - for execute that distinguishes it from
04:54 - the execute method there is a separate
04:56 - version of this execute function that
04:58 - ends with an underscore our apps execute
05:01 - method it waits around for user input
05:03 - and handles events such as if we click
05:05 - buttons press keys or close the window
05:09 - now that we're calling this method when
05:10 - we run our program this window should
05:13 - stay in place we can maximize it
05:17 - minimize it or close
05:20 - it that's all the boiler plate code that
05:23 - we need for a basic window let's
05:25 - customize it within our Constructor for
05:28 - our main window What would would we like
05:30 - to add let's set the title for our
05:33 - window
05:35 - self. set window title method we will
05:40 - pass in a string think of a title for
05:42 - your
05:43 - program my cool first GUI
05:50 - gooey and now we have a new title my
05:53 - cool first goey graphical user
05:56 - interface when this window appears we
05:59 - can can set the geometry of where the
06:01 - window appears and the size of the
06:03 - window access self dot set geometry
06:10 - method there's four
06:12 - arguments X and Y for the X and Y
06:15 - coordinates a width of the window and a
06:18 - height of the window if I were to set X
06:21 - and Y to be both zero this window will
06:24 - appear in the top left corner of my
06:26 - screen I'll also need a width and a
06:28 - height let let's say I don't
06:31 - know 500 for
06:34 - each so now my window is now a square
06:38 - the width and the height are both the
06:39 - same they're both 500 the width is 500
06:42 - pixels the height is 500 pixels with the
06:45 - first two arguments we set the initial
06:48 - placement of our window to be where X is
06:50 - z and y is zero that corresponds to the
06:53 - top left corner if I set the first
06:56 - argument to be
06:57 - 100 well then the window window is going
07:00 - to move to the right by 100 pixels there
07:03 - are ways to Center your window in the
07:05 - very center of your screen but that's a
07:07 - little too advanced for us right now for
07:10 - the time being I'll pick something
07:11 - roughly near the middle of my screen 700
07:15 - pixels on the x axis and 300 on the Y
07:18 - AIS it should appear roughly in the
07:21 - middle but feel free to adjust these
07:23 - values based on the size of your screen
07:25 - we'll discuss layouts in the future now
07:28 - if you would like a a window icon we can
07:31 - change that you will need an image to
07:33 - work with So within my project
07:37 - folder I have a profile picture for my
07:39 - YouTube channel I'll set that to be the
07:42 - icon find an image that you like then
07:45 - add it to your project
07:46 - folder in order to work with icons we'll
07:49 - need to make the following import from
07:52 - PI
07:53 - qt5 that's the package access the module
07:57 - of QT
08:00 - GUI import the following Q icon now we
08:06 - can work with
08:08 - icons after we set the geometry for our
08:12 - window access this object of self this
08:15 - main window call the method of set
08:19 - window
08:21 - icon within this method we will call the
08:24 - Constructor of Q icon we'll pass in
08:28 - either a relative file path or an
08:30 - absolute file path my main python file
08:33 - is right next to my profile picture that
08:36 - image I only need the file name within a
08:39 - string so the name of my image it's
08:42 - going to be different for you depending
08:43 - on what the name of your image is my
08:45 - image is named profile uncore pick and
08:50 - this image is a JPEG
08:53 - jpg then when I run this program I'm
08:57 - using my image as an icon for this
08:59 - window
09:00 - window all right everybody that is how
09:02 - to create a window using pi qt5 and in
09:05 - the next topic we will be creating some
09:08 - labels what's up everybody in today's
09:10 - topic we're going to create some labels
09:12 - using pi qt5 we will import the widget
09:16 - of Q label this label class is used to
09:21 - create label widgets that can display
09:23 - text or images within the Constructor of
09:26 - our main window this is where we'll
09:28 - create a label
09:30 - we will declare a label object label
09:33 - equals call The Constructor for Q
09:36 - label for the text of the label we'll
09:40 - pass in a string that's the first
09:42 - argument let's say the word
09:45 - hello for the second argument we will
09:47 - pass in self self refers to this window
09:51 - object that we're calling and
09:53 - instantiating all right let's do a test
09:57 - run here is my label although you can
10:00 - barely see it the font is really small
10:02 - but it does say
10:04 - hello let's set the font we'll need
10:07 - another
10:08 - import from PI
10:12 - qt5 do
10:15 - QT
10:17 - GUI import Q
10:21 - font by importing the Q font class we
10:24 - can begin working with
10:26 - fonts we're going to take our label call
10:29 - call the set font
10:32 - method within this method we will call
10:34 - the Constructor of Q
10:37 - font pick a font that you would like I
10:40 - will pick aial but feel free to choose
10:43 - really any font then the second argument
10:46 - is a font size I'll pick
10:49 - 30 let's do another test
10:52 - run that's much better let's increase
10:56 - this to 40 for the font size
10:59 - now I'm going to set the geometry of
11:01 - this label such as the positioning and
11:04 - the width and the
11:07 - height let's take our
11:09 - label use the set geometry method we
11:14 - will pass in X and Y coordinates 0 0
11:18 - corresponds to the top left corner for
11:21 - the width let's set the width to be 500
11:23 - and the height to be
11:25 - 100 that's better I'll cover more
11:28 - advanced alignments
11:30 - momentarily let's add a
11:33 - stylesheet pqt does have styles that are
11:36 - very similar to CSS if you would like to
11:38 - learn more about CSS I do have a full
11:40 - course on that topic we will add some
11:43 - CSS like Properties by accessing our
11:46 - label object call the method of set
11:50 - style
11:53 - sheet within this method we will pass in
11:56 - some CSS like properties such as a a
12:00 - color for the color let's say blue these
12:03 - CSS like properties should end with a
12:07 - semicolon and now the font color is blue
12:10 - you could also use RGB values or heximal
12:14 - values you could always look up a Color
12:16 - Picker and pick a very specific
12:20 - color let's pick something
12:23 - green we can either use RGB values or
12:26 - heximal values so I will copy this
12:31 - value so I will paste that heximal value
12:36 - and now we have a very specific shade of
12:39 - green but I think I'll go with something
12:43 - dark such as
12:47 - that so this color is going to be a dark
12:50 - gray
12:51 - color we could set a background color
12:54 - this will be a new string
13:02 - background-color and I will pick a new
13:05 - color I will pick something
13:11 - blue that's a decent
13:17 - color we have a blue background with
13:20 - dark gray
13:22 - text we can set the font to be bold font
13:26 - weight will be bold
13:31 - so the font is now
13:33 - bold the font style can be italic font
13:38 - style
13:41 - italic so our font is italic and we can
13:46 - underline text
13:49 - decoration
13:53 - underline the text on our label is now
13:56 - underlined let's work on positioning
13:58 - next
13:59 - currently my text is left Justified and
14:02 - set to the center
14:03 - vertically to work with alignments we
14:06 - need this import from PI
14:11 - qt5 QT
14:15 - core import
14:18 - QT the class of QT is used for
14:22 - alignments to Center the text of our
14:25 - label at the top vertically we will take
14:27 - our label use the set alignment
14:32 - method then pass in a flag access the
14:35 - class of qot access the flag of align
14:41 - top this will align our text vertically
14:44 - to the
14:48 - top so then our text is aligned
14:51 - vertically to the top rather than the
14:54 - center for the
14:57 - bottom we will use the flag of align
15:03 - bottom we will align vertically on the
15:08 - bottom the text is now on the
15:11 - bottom to align vertically in the
15:14 - center align V
15:19 - Center this will be vertically
15:23 - Center which it was
15:25 - originally now for horizontal alignment
15:28 - we can add the
15:30 - following okay to a line right we will
15:33 - pass in a flag of Al line
15:36 - right
15:40 - horizontally Al line
15:44 - right the text is now all the way to the
15:49 - right for the
15:51 - center align H H for
15:55 - horizontal Center
16:00 - the text is now horizontally aligned in
16:02 - the
16:05 - center for the
16:11 - left align
16:17 - left the text will be aligned to the
16:20 - left we could combine both horizontal
16:23 - and vertical
16:25 - positioning here's how take our label
16:29 - call the set alignment
16:32 - method we will align horizontally in the
16:35 - center follow this with the or bitwise
16:39 - operator which is a vertical bar this
16:41 - allows us to combine Flags we will align
16:44 - horizontally in the center then
16:46 - vertically let's align to the
16:50 - top so our text should be aligned
16:53 - horizontally we're aligned in the center
16:55 - and vertically we're aligned to the top
16:59 - align bottom
17:04 - vertically horizontally we are in the
17:06 - center vertically we're aligned on the
17:08 - bottom then for the very center of our
17:18 - label align horizontal
17:21 - Center and align vertical Center
17:31 - our text will now be in the very middle
17:33 - of our label both horizontally and
17:36 - vertically now there is a shortcut for
17:38 - the very center we don't need both of
17:40 - these
17:42 - flags the shortcut is the
17:45 - following set
17:48 - alignment align
17:51 - Center that will align the text both
17:53 - horizontally and
17:55 - vertically so that is Center and Center
17:59 - all right everybody so that is an
18:00 - introduction to labels in pi
18:03 - qt5 what is going on everybody in
18:05 - today's video I'm going to show you how
18:07 - we can add images to Pi qt5 you will
18:10 - need an image to work with me I'll be
18:12 - using my profile picture for my YouTube
18:14 - channel feel free to take a moment to
18:16 - find a picture of your own maybe a
18:18 - profile picture of yourself we will need
18:20 - the following Imports Q label the most
18:25 - common and straightforward approach to
18:26 - displaying an image is to add an image
18:29 - to a label in order to display it then
18:32 - we will need this other import from PI
18:35 - qt5 that's the package then the module
18:39 - of QT
18:41 - GUI import the class of Q pix map the
18:47 - class of QX map it's used for handling
18:49 - images and provides functionality for
18:51 - loading manipulating and displaying
18:53 - images we will load our image to a q pix
18:56 - map object then add this qix map object
19:00 - to a label in order to display it within
19:03 - our Constructor of our main window we
19:06 - will create a label label equals call
19:09 - the Q label
19:11 - Constructor then pass in self self
19:14 - refers to the window object our window
19:17 - will be the parent widget our label
19:19 - widget is one of its children once we
19:22 - have our label we'll set the geometry of
19:24 - the label label. set geometry method we
19:29 - have to pass in X and Y coordinates as
19:32 - well as a width and height of the label
19:35 - for the coordinates let's say zero for
19:38 - each the label will appear in the top
19:40 - left corner for the width 250 is good
19:44 - and the height 250 as
19:46 - well here's my window the label is going
19:49 - to appear in the top left corner however
19:51 - there's nothing added to the label
19:54 - that's where the widget of Q pix map
19:55 - comes in we will create a pix map object
20:00 - equals call The Constructor of Q pix map
20:05 - we have to pass in a string that
20:07 - represents a relative file path or an
20:09 - absolute file path to our image my image
20:12 - is right next to my main python file I
20:14 - just need the file name the name of my
20:17 - image is profile undor pick and this is
20:20 - a
20:21 - JPEG when I run this we don't see our
20:25 - image we have to add the Pix map object
20:27 - to the label we have to set it here's
20:30 - how take our label use the set pixmap
20:36 - method and pass in our pixmap
20:39 - object and now we can see the image
20:42 - however the image doesn't scale
20:44 - according to the size of the label to
20:47 - enable that we have to call the
20:48 - following
20:49 - method take our label call the set
20:54 - scaled contents method then pass in true
20:58 - our image will now scale to the size of
21:01 - the
21:02 - label if we were to change the size of
21:05 - the label let's say it's 100
21:09 - pixels it will scale down even further
21:12 - or I could even increase it to
21:15 - 500 so now the image takes up the entire
21:18 - width and height of the
21:20 - window let's set that back to
21:25 - 250 there's a few tricks that we can do
21:27 - with positioning of the image we've set
21:30 - our label with an image we can move the
21:32 - label within the confines of the window
21:35 - currently it's set in the top left
21:36 - corner but here's a few tricks that we
21:38 - can do with positioning with our label
21:42 - we will set the geometry
21:46 - again so the top left corner is 0 0 for
21:49 - the
21:50 - coordinates we could pass in 250 and 250
21:54 - again for the width and the height but
21:56 - if we were to change that here when we
21:59 - initially create this label we would
22:01 - have to manually change that here as
22:03 - well I think it would be better if we
22:05 - were to get the current width and height
22:07 - of the label take our label call the
22:10 - width method to get the width same thing
22:12 - applies with the height label. height
22:17 - method that should work
22:19 - fine let's say we would like to take our
22:22 - image and move it to the right side of
22:24 - our window here's how with the x
22:27 - coordinate
22:29 - we're going to access self that means
22:31 - our window called the width
22:35 - method here's what we have currently we
22:38 - can't see the
22:39 - label it was placed outside of the
22:41 - confines of the
22:43 - window let's subtract our labels
22:46 - width label.
22:49 - width I'll put each of these arguments
22:51 - on a new line just to help with
22:56 - readability so now our image is is Right
22:58 - Justified within our
23:00 - window for the bottom right corner we
23:03 - will take the second
23:06 - argument access self. height that's the
23:10 - height of the window that we're
23:12 - instantiating minus our labels
23:16 - height and our image is in the bottom
23:19 - right
23:20 - corner for the bottom left corner we
23:23 - will set X to be
23:27 - zero now here's the tricky part to have
23:30 - our image placed in the center of our
23:32 - window we will take the width of the
23:35 - window minus the width of the label /
23:39 - two for integer division we'll be using
23:42 - double forward slashes we need our
23:44 - pixels to be whole integers so we're
23:46 - going to be using integer Division and
23:48 - not standard division we will round to
23:51 - the nearest whole
23:52 - pixel then we will do this with the
23:54 - height as well
23:59 - and now our image should be in the
24:01 - middle of our
24:03 - window all right everybody and that is
24:05 - how to add an image to your Pi qt5
24:08 - application well hello again friends
24:10 - today I got to explain layouts in pi qt5
24:13 - we'll discuss vertical horizontal and
24:16 - grid layouts but we'll need the
24:17 - following Imports we will be importing Q
24:22 - label Q
24:25 - widget I'm going to put these Imports on
24:27 - a new line just because we have a
24:29 - lot QV for vertical box
24:36 - layout and I'm just going to copy
24:38 - this q h for horizontal box
24:43 - layout and Q grid layout let's be sure
24:48 - that we have all these
24:50 - Imports these classes deal with layout
24:53 - managers they aren't widgets we'll be
24:55 - writing a majority of the code within
24:57 - our main window class
24:59 - however it can get disorganized really
25:01 - quick what will help keep things
25:02 - organized is if we declare a separate
25:04 - function within the main window
25:07 - class this is a common practice that
25:09 - you'll see within Pi qt5 there will be a
25:11 - function for init for initialize UI for
25:15 - user interface no other arguments
25:18 - besides self and for now I'll write
25:21 - pass when we construct a window object
25:24 - we will call Self do init UI
25:29 - to initialize the user
25:30 - interface so anything that deals with
25:32 - the user interface we're going to be
25:34 - writing within this function to help
25:36 - keep our code clean and organized
25:39 - normally we can't add a layout manager
25:41 - to a main window object main window
25:43 - widgets have a specific design and
25:46 - layout structure that's normally
25:48 - incompatible with layout managers what
25:50 - we would need to do is create a generic
25:53 - widget add a layout manager to that
25:55 - widget then add that widget to the main
25:58 - window in order to display the layout
26:00 - within our method to initialize our user
26:03 - interface we are going to create what is
26:05 - called a central widget called The
26:09 - Constructor for Q
26:12 - widget this is a generic widget then we
26:15 - will take self self is our
26:19 - window call the
26:21 - set Central widget method then pass in
26:26 - our Central widget
26:29 - when working with layout managers we
26:31 - will add that layout manager to the
26:33 - central Widget the central widget is
26:36 - then added to the main
26:38 - window so currently this is what we're
26:41 - working with we will need some widgets
26:43 - to organize because right now it's
26:46 - empty let's create a few
26:48 - labels let's say label one equals Q
26:53 - label I'll pass in some text number one
26:57 - okay let's create four additional labels
27:00 - 1 through five I'll just do some copying
27:03 - and
27:08 - pasting all of our labels are
27:12 - overlapping let's add some colors let's
27:15 - take label one use the set stylesheet
27:20 - method then pass in a background color
27:23 - as a CSS
27:25 - property
27:27 - background-color will be
27:30 - red let's copy this line of code paste
27:34 - it four additional times for labels 1
27:37 - through
27:40 - 5 we'll have a label that is yellow
27:43 - another that is
27:45 - green
27:48 - blue then
27:52 - purple here are the labels they're all
27:55 - overlapping one another that's why we
27:57 - can only see five
27:59 - this is where a layout manager comes in
28:02 - we'll start with the vertical layout we
28:04 - will create a vertical layout manager
28:07 - which we will name
28:09 - vbox vbox equals call The Constructor
28:13 - for
28:15 - QV box layout we are calling the
28:20 - Constructor we will take our layout
28:23 - manager call the add widget method then
28:27 - pass in widget such as label one near
28:31 - the top
28:32 - here we'll do this with the other labels
28:35 - we'll do some copying and
28:37 - pasting add Label 2 3 4 and
28:42 - 5 there's one last
28:46 - step we will take our Central widget
28:50 - which we have declared at the top of
28:51 - this
28:52 - function call the set layout
28:56 - method we are set setting the layout of
28:59 - our Central
29:00 - widget with the layout manager a vbx
29:03 - vertical box here's the new
29:06 - layout all of our labels all of our
29:08 - widgets are arranged vertically for
29:12 - horizontal we will use qh box layout for
29:16 - horizontal replace any instance of V box
29:19 - with
29:23 - hbox for the set layout method pass in
29:26 - hbox
29:28 - this allows for a horizontal
29:30 - layout then we have
29:33 - grid Q grid layout replace hbox with
29:43 - grid so what we have to do with grids
29:46 - after adding a widget we have to specify
29:48 - a row and column with separate arguments
29:52 - the row and column both begin with zero
29:54 - so Row one column 1 would be row zero
29:58 - column 0 for label two let's say row 0
30:03 - column 1 Label 3 will be Row one column
30:09 - 0o four will be Row one column 1 then
30:14 - five row one column two so here's the
30:18 - current
30:19 - layout we have labels 1 and two both
30:22 - within row zero labels 3 4 and 5 are
30:25 - both within the second row let's say
30:28 - label 5 is Row 2 column 2 that would
30:32 - result with something like this we have
30:35 - label 5 which is purple in row two
30:38 - column 2 so it depends on how you want
30:41 - to arrange your widgets all right
30:42 - everybody so that is an introduction to
30:44 - layout managers in pi
30:47 - qt5 today I'm going to show you how we
30:49 - can create push button widgets in pi qt5
30:52 - to begin we will need the following
30:54 - Imports Q push button
30:58 - as well as Q label for this
31:01 - demonstration during the previous topic
31:03 - on layout managers within our
31:05 - Constructor for our main window we
31:07 - defined a method of initialize UI for
31:10 - user interface let's be sure that we're
31:12 - calling that method within our
31:14 - Constructor within this method is where
31:16 - we'll be handling managing the user
31:18 - interface to create a button we will
31:20 - call the push button Constructor
31:22 - normally when creating widgets we would
31:24 - want to prefix that widget with self
31:27 - then follow the name of the widget for
31:29 - example button however I'm going to
31:31 - demonstrate what happens when we don't
31:33 - do that because without self we're
31:35 - declaring a local variable we'll get
31:38 - back to that in just a moment let's
31:40 - create a local button object by calling
31:43 - the Q push button
31:45 - Constructor we can pass in some text
31:47 - such as click
31:49 - me we will add this to our window self
31:53 - self refers to our window
31:55 - object let's set the geometry of the
31:57 - button button. set
32:01 - geometry we could use a layout manager
32:04 - but I do want to keep this lesson as
32:05 - simple as possible so let's pick some
32:08 - coordinates I've picked the following
32:11 - for the X and Y coordinates 150 and 200
32:14 - for the width 200 and the height 100
32:18 - here is our button currently the font is
32:20 - a little small so I'm going to set the
32:23 - stylesheet set style sheet
32:29 - I'll just increase the font size we
32:31 - could use Q font but that might be
32:33 - overkill for this
32:35 - demonstration let's just say the font
32:37 - size will be 30
32:39 - pixels now we can read it so we have our
32:43 - button we're going to be connecting our
32:46 - button to a function but we need to
32:48 - Define that function we'll do so within
32:50 - our main window
32:52 - class so we will Define a function of
32:56 - onclick there are are no parameters
32:58 - besid self when we click on the button
33:01 - what would we like to do let's print a
33:05 - test message let's say button clicked
33:09 - and that's
33:12 - it when we click this button nothing
33:15 - happens we have to set up a signal and
33:18 - slot for the button here's
33:21 - how we will take our button dot list a
33:25 - signal a signal is aitt
33:28 - when a widget is interacted with we have
33:30 - to list the type of signal so the signal
33:33 - we're looking for is
33:35 - clicked when we click this button we
33:38 - will perform a slot an action we will
33:42 - take the signal of clicked connect it to
33:45 - a slot connect is a
33:47 - method the slot will be self dot the
33:51 - name of the method on
33:54 - click when we press this button we
33:57 - perform this slot this method of
34:01 - onclick each time I press the button we
34:04 - perform that
34:05 - action not only should we print a
34:08 - message for this demonstration let's set
34:10 - the text to the
34:12 - button so we have
34:14 - button. set text let's change the text
34:20 - to
34:22 - clicked so this actually isn't going to
34:25 - work because we're not prefixing self
34:28 - let me demonstrate what
34:31 - happens we print button clicked but then
34:34 - we have a problem we have an exit code
34:36 - our program was
34:38 - interrupted button is considered local
34:41 - to our initializer method our onclick
34:44 - function doesn't recognize what our
34:45 - button is that's why we're going to
34:47 - prefix our button with self so it
34:50 - belongs to the class of main window and
34:52 - not this method any instance of button
34:55 - we're going to prefix with self
35:00 - and now this should work the text on my
35:03 - button is going to change when I click
35:04 - it
35:08 - clicked you don't have to do this but
35:11 - with my personal coding style whenever I
35:14 - create a variable or an object within a
35:16 - class I like to do so within the
35:18 - Constructor even py charm is giving me a
35:22 - warning when we declare this button I'm
35:25 - going to move it to the Constructor
35:29 - and let me just rearrange
35:32 - everything self. button equals a q push
35:37 - button widget within my initializer
35:39 - method that's when I like to rearrange
35:41 - everything and style it we can also
35:44 - disable buttons when we click on them to
35:47 - do that we will take self. button call
35:51 - the set disabled method then pass and
35:55 - true when I click the button it will be
35:59 - disabled I can no longer click on
36:02 - it for the last part of this
36:04 - demonstration when we click on our
36:06 - button let's change the text of a
36:10 - label let's declare self. Lael within
36:13 - our Constructor equals a q
36:17 - label the text of the label will be
36:20 - hello we will add this label to self the
36:24 - window when we set up the user interface
36:27 - let's set the geometry of the
36:29 - label self. Lael do set
36:34 - geometry we could use a layout manager
36:37 - but just to keep things simple I'm going
36:38 - to set some coordinates 150 for X 300
36:42 - for y the width will be 200 and the
36:46 - height
36:47 - 100 let's change the font
36:50 - size self.
36:53 - label. set style sheet
36:57 - I will set the font size to be
37:02 - 30 maybe
37:05 - 50 better all right within our onclick
37:09 - function let's instead take self.
37:14 - label. set text method then pass in some
37:18 - new text to display we're saying hello
37:22 - but when we click the button let's say
37:26 - goodbye so now when I click the button
37:29 - we will change the text on a separate
37:31 - widget my label which now says
37:34 - goodbye so with buttons you need a
37:37 - signal that's connected to a slot the
37:40 - signal is an event the slot is an action
37:43 - that this widget is going to take when
37:45 - this signal
37:47 - occurs and well everybody that is an
37:49 - introduction to push buttons in pi
37:52 - qt5 hey yeah so today I got to explain a
37:55 - checkboxes in pqt 5 to work with
37:58 - checkboxes we will need the following
38:00 - import from the module of widgets from
38:03 - pqt 5 import Q check
38:08 - box to work with different states we
38:11 - will also need the following import from
38:15 - pqt
38:16 - 5. QT
38:19 - core import QT this module of QT core it
38:24 - contains non- goey classes relevant two
38:27 - Pi qt5 applications so be sure that you
38:30 - get this import as well to create a
38:32 - checkbox I will create this within the
38:35 - Constructor of my main window we will
38:37 - create a checkbox with self the name of
38:40 - the checkbox which I will name
38:42 - checkbox
38:44 - equals call The Constructor of the Q
38:47 - checkbox class the first argument is
38:50 - going to be the text of the checkbox
38:53 - what do you want the checkbox to say
38:55 - let's ask do you like
39:00 - food the second argument is the parent
39:02 - widget where we will be adding this
39:04 - checkbox let's say self self will apply
39:08 - to this window we could use a layout
39:10 - manager but I want to keep this lesson
39:12 - as simple as possible we're just going
39:14 - to focus on checkboxes and their
39:17 - functionality so we should have a
39:19 - checkbox however we can barely see it
39:22 - the font is really small I have a method
39:25 - to initialize the user interface
39:28 - that's where we'll set the stylesheet
39:30 - and the geometry of our
39:32 - checkbox let's set the stylesheet self
39:35 - dot the name of the checkbox
39:38 - checkbox do set Styles sheet method then
39:44 - we can pass in some CSS like properties
39:47 - let's set the font size to be 30
39:52 - pixels and I will pick a font
39:56 - family font family
40:01 - aial oh and we should change the
40:04 - geometry of the label it's getting cut
40:07 - off self do the name of the
40:11 - checkbox which is
40:13 - checkbox let's set the
40:16 - geometry pass in some X and Y
40:19 - coordinates for the placement as well as
40:21 - a width and a height I will pick 500 and
40:25 - 100
40:27 - uh maybe I'll move it a little more to
40:29 - the right by 10
40:31 - pixels that's pretty good our checkbox
40:35 - has an initial State it's normally
40:37 - unchecked that's the default Behavior
40:40 - but we could set that to be checked with
40:42 - the following method when the window
40:44 - loads let's take our checkbox self.
40:48 - checkbox call the set checked method
40:52 - then pass in true so then when the
40:55 - window loads the check checkbox is
40:58 - already
40:59 - checked but let's keep that as
41:02 - false now this checkbox it doesn't do
41:05 - anything when I check it let's add some
41:09 - functionality we'll take our checkbox
41:12 - connect a signal to a
41:14 - slot the slot can be a function or a
41:17 - method let's define a method within our
41:20 - main window class let's name this method
41:24 - checkbox changed we will call this
41:28 - method when the state of our checkbox
41:30 - changes there is one parameter besid
41:33 - self a state now the state parameter is
41:37 - going to be provided to us when we
41:39 - interact with our checkbox when we check
41:41 - the checkbox let's print something like
41:43 - a test message you like
41:48 - food we have to connect a signal of
41:51 - State changed to a slot of checkbox
41:54 - changed we will take self dot the name
41:58 - of the checkbox which is
42:00 - checkbox the signal will be State
42:04 - changed to connect a slot to a signal we
42:08 - use the connect method then pass in a
42:11 - function or method name so we are
42:13 - working with
42:15 - methods this method belongs to the
42:17 - window class we'll prefix the method
42:20 - name with self self. checkbox
42:24 - changed so when I run this program when
42:27 - I check the checkbox we execute this
42:30 - method you like food now when I uncheck
42:33 - it I instead would like to display you
42:36 - do not like
42:38 - food so that's where our state is going
42:40 - to come in I'm going to print our state
42:44 - just to see what it
42:45 - is our state is going to be a
42:51 - value when we check the checkbox our
42:54 - state has a value of two when we uncheck
42:57 - it it has a value of zero zero means
43:01 - unchecked two means checked there's also
43:04 - one for partially checked but that's not
43:06 - going to be relevant to this topic so
43:09 - zero or two we could add an if statement
43:12 - such as if state is equal to two then
43:16 - print you like food however that's not
43:19 - really readable other developers looking
43:21 - over your code aren't going to
43:23 - understand what two is by looking at it
43:25 - instead let's use the following we will
43:27 - access the class of
43:30 - QT there's a built-in constant of
43:35 - checked this also equals two but it's
43:38 - more readable it's a constant so if
43:41 - state is equal to QT checked print you
43:45 - like
43:46 - food I will check the checkbox you like
43:49 - food when I uncheck it nothing
43:52 - happens let's add an else
43:55 - statement else let's
43:58 - print you do not like
44:02 - food so then when I check the checkbox
44:05 - we print you like food when I uncheck it
44:09 - we print you do not like food you like
44:12 - food you do not like food you like food
44:15 - you do not like
44:17 - food all right everybody so that is an
44:19 - introduction to checkboxes in pi
44:22 - qt5 all right let's do this thing today
44:25 - I got to talk about radio buttons in pi
44:27 - qt5 to work with radio buttons we will
44:30 - need the following imports from the
44:32 - module of QT widgets we will need the
44:35 - class of Q radio button as well as Q
44:41 - button group to group together different
44:44 - buttons let's create three radio buttons
44:47 - within the Constructor of my main window
44:50 - we will construct three radio buttons
44:53 - for the first radio button this will be
44:55 - named radio one we will call the
44:57 - Constructor of the class Q radio button
45:01 - then we can pass in some text what is
45:04 - the radio button going to say let's say
45:06 - that we're working with payment options
45:09 - let's say visa for the first option then
45:12 - for the second argument I will pass in
45:14 - self we will add this radio button
45:17 - directly to our window that would be
45:19 - self let's create two more additional
45:21 - radio buttons Radio 2 and radio 3 the
45:25 - text of radio button two will be Master
45:28 - Card and three will be a gift card we
45:32 - are selecting different payment
45:35 - options we need to set the geometry of
45:37 - these radio buttons because we're not
45:39 - using a layout
45:41 - manager I have a method to initialize my
45:43 - user interface this is where I will set
45:46 - the geometry of my radio buttons so
45:49 - let's say self. radio one we will call
45:53 - the set geometry method pass in some
45:56 - coordinates 0 0 is good that applies to
45:59 - the top left corner of my window for the
46:01 - width 300 and the height 50 is good
46:05 - let's do this with radio buttons 2 and
46:08 - three Radio 2 radio 3 we'll just move
46:12 - each radio button down on the Y AIS by
46:14 - 50 pixels each so 50 then
46:18 - 100 here are the three radio buttons
46:22 - however the font is kind of small we can
46:23 - barely see it so let's apply a style
46:26 - sheet
46:28 - here's a trick that we can do with style
46:29 - sheets we can apply multiple CSS like
46:32 - properties to an entire group of widgets
46:35 - rather than having to type them and
46:37 - apply them individually we will select
46:40 - our window of self set the stylesheet of
46:44 - our window with the set stylesheet
46:47 - method we will add a selector the
46:50 - selector is going to be the name of the
46:52 - widget Q radio button in this case then
46:56 - add a set of curly
46:59 - braces we can apply CSS like properties
47:03 - to an entire group of widgets this way
47:06 - so let's set the font size of all radio
47:09 - buttons to be 40
47:13 - pixels
47:15 - better let's set the font
47:18 - family to be
47:20 - aial then I will add a little bit of
47:23 - padding around each radio
47:25 - button padding
47:27 - 10
47:30 - pixels that's pretty good so with radio
47:33 - buttons we can only select one from any
47:36 - one radio button group if I was making a
47:39 - payment I can't pay with a Visa and
47:41 - Mastercard at the same time I can only
47:43 - select one option that's the point of
47:46 - radio buttons we're limited to just one
47:49 - option with the default behavior of Pi
47:52 - qt5 all radio buttons unless explicitly
47:55 - stated are all part of the same group to
47:58 - demonstrate that let's create two
48:00 - additional radio buttons Radio 4 and
48:03 - Radio 5 radio button 4 will be for a
48:07 - payment method rather than a payment
48:09 - type for example we could say we're
48:11 - paying in
48:13 - store radio button 5 will be we're
48:16 - paying online radio buttons 1 through
48:19 - three will be for the payment type radio
48:22 - buttons four and five will be for the
48:24 - payment method we're either paying in
48:26 - store or we're ordering something online
48:29 - we do need to set the geometry for these
48:31 - two radio buttons I'll just copy these
48:34 - two
48:35 - lines add Radio 4 Radio 5 we'll set the
48:39 - y-coordinate of four to be 150 and 5 to
48:43 - B 200 all radio buttons will be within
48:47 - the same button group if I was to select
48:49 - in store we deselect one of these
48:51 - options what I would like is one option
48:54 - from this first group and another option
48:57 - from this other group these buttons are
48:59 - all in the same group I can only select
49:01 - one if I would like to pay with the VISA
49:04 - in store and I click the instore radio
49:07 - button we unselect the radio button for
49:10 - Visa I would like these radio buttons
49:13 - within different groups we need to
49:15 - create two different groups and add them
49:18 - accordingly here's
49:20 - how within our Constructor we will
49:23 - access self declare a button group let's
49:26 - let's name it button group one for
49:29 - Simplicity equals call The Constructor
49:32 - of the class Q button group then pass in
49:36 - to set the parent widget to be the
49:39 - window then we will create button group
49:44 - two we're going to access self select
49:48 - the radio button
49:49 - group button group one call the add
49:55 - button method then pass in a radio
49:59 - button self.
50:02 - radio1 then we'll add Radio 2 and radio
50:07 - three we'll select button group two this
50:11 - time button group
50:13 - two add radio button 4 and radio button
50:19 - 5 the first three radio buttons are
50:22 - within the same group radio buttons four
50:24 - and five are within a different group we
50:26 - can only select one radio button from
50:28 - any one radio button
50:30 - group maybe I would like to pay with a
50:33 - Visa card in store or a MasterCard
50:36 - online or a gift card in store these
50:40 - radio buttons are within different
50:42 - button groups we're limited to one
50:44 - selection in any one radio button group
50:47 - when we select these radio buttons they
50:49 - don't quite do anything for each radio
50:51 - button we have to connect a signal to a
50:54 - slot here's how
50:57 - let's define a method of
51:00 - radio button changed there will be no
51:04 - parameters besides
51:06 - self temporarily I'll write pass we'll
51:09 - fill this in in a
51:11 - moment we will take each radio button
51:14 - let's start with radio one Radio One the
51:18 - signal will be toggled when this radio
51:21 - button is toggled we will connect a slot
51:26 - we will pass in a function or a method
51:30 - self. radio button
51:32 - changed then we will do this with the
51:34 - other radio
51:36 - buttons 1 through
51:42 - five let's print a test
51:45 - message you selected
51:48 - something just to be sure that
51:50 - everything is
51:52 - working you selected
51:54 - something okay we know that that works
51:59 - currently what we're going to need to do
52:02 - is get the sender widget which radio
52:05 - button sent the signal of
52:07 - toggled I will create a local radio
52:11 - button to store that radio button
52:14 - whichever one emitted the signal we can
52:17 - determine that with self. sender method
52:21 - the sender method is going to return the
52:23 - widget that sent the signal so if we
52:26 - select radio button one our radio button
52:29 - will be radio button one if it was five
52:32 - then it's five in this
52:34 - case then we'll determine if our radio
52:37 - button is checked take our radio button
52:40 - use the is checked method this will
52:44 - return a Boolean true or false if it's
52:47 - checked if this returns true then let's
52:50 - print the
52:51 - following I'll use an F string we will
52:54 - get the text of the radio button radio
52:58 - button called the text method to return
53:01 - the text of the radio
53:03 - button is
53:05 - selected all right then let's see if
53:08 - this
53:10 - works let's select Visa Visa is selected
53:14 - MasterCard is selected gift card is
53:16 - selected in store is selected and online
53:20 - is
53:21 - selected that's how to determine which
53:23 - radio button was selected which one is
53:26 - the sender which one sent the signal all
53:30 - right everybody so that is an
53:31 - introduction to radio buttons in
53:35 - pyqt5 why hello everybody today I got to
53:38 - explain line edit widgets in pyqt5 also
53:42 - known as text boxes in pretty much
53:44 - anything ever made ever why are they
53:46 - called line edit widgets I really don't
53:48 - know let's begin from the module of QT
53:51 - widgets we will import the following
53:54 - class of q line
53:57 - edit to create a text box I mean a line
54:00 - edit
54:01 - widget we are accessing our window of
54:04 - self we will call this line edit widget
54:08 - line
54:10 - edit equals call The Constructor of the
54:14 - class q line
54:16 - edit then we will pass in self to add
54:19 - this line edit widget to the
54:23 - window let's set the geometry but we do
54:26 - have a text box in which we can type in
54:29 - stuff I have a method to initialize the
54:32 - user
54:34 - interface within this method I will
54:36 - access
54:37 - self. the line edit widget and set the
54:44 - geometry let's set it in the top left
54:46 - corner where X is 10 Y is 10 set a width
54:50 - 200 is good and a height
54:54 - 40 that's not too bad
54:56 - now the text is really
54:59 - small we can change that by applying a
55:02 - stylesheet access our window with self
55:06 - access our line edit widget then call
55:09 - the set stylesheet
55:13 - method we can pass in some CSS like
55:16 - properties including a font
55:19 - size let's pick 25
55:24 - pixels and here's my new text box we can
55:27 - read the text now let's also change the
55:30 - font
55:32 - family font family I will pick
55:37 - Ariel this text box by itself it really
55:40 - doesn't do anything we need some way to
55:43 - get the text from the text box let's add
55:46 - a button when we click on the button we
55:49 - will get the text from the text box and
55:51 - do something with it cuz right now it
55:53 - doesn't do
55:55 - anything we will need to import Q push
56:00 - button let's create one button self.
56:04 - button equals call The Constructor of
56:08 - the class Q push
56:10 - button let's say that this is a submit
56:13 - button I will pass in a string of submit
56:16 - and we are adding this button to our
56:19 - window and we do need to set the
56:22 - geometry of the button we're not using a
56:24 - layout manager right now
56:27 - access our window with self access our
56:31 - button that we have previously created
56:33 - in our
56:34 - Constructor then call the set geometry
56:38 - method we'll place our button where X is
56:42 - 210 Y is 10 the width will be
56:46 - 100 and the height will be
56:49 - 40 not too bad let's change the font
56:52 - size of the button I'll copy these two
56:55 - lines of code because because I'm
56:57 - lazy instead of selecting our line edit
57:00 - widget we will select our
57:05 - button that's better if I were to click
57:08 - on the button it doesn't do
57:10 - anything we'll set up the signal of
57:13 - clicked to connect to a method that will
57:15 - do
57:17 - something let's define a method of
57:20 - submit we're submitting something we're
57:22 - submitting the text within the text box
57:25 - and for now all right pass we'll get
57:27 - back to this in a
57:29 - second we're going to take our button
57:32 - self. button we'll connect the signal of
57:36 - clicked clicked. connect method we will
57:40 - connect the method of submit self.
57:45 - submit so when we click on the button we
57:47 - will call this method let's print a test
57:51 - message you clicked the button
57:57 - let's type in
57:58 - something press submit and we get our
58:02 - test message you clicked the
58:05 - button let's get the text from the text
58:07 - box then do something with
58:10 - it let's create a local variable of text
58:14 - text equals now we have to get the text
58:18 - from our line edit widget
58:21 - self. line edit that's the widget to get
58:25 - the the text we can use the text method
58:28 - to return the
58:29 - text then let's print the text I'll use
58:33 - an FST string we'll say hello add a
58:37 - placeholder then display the
58:40 - text so
58:42 - now after typing in something why don't
58:45 - you type in your name then press submit
58:48 - we will display hello your
58:51 - name you could add some placeholder text
58:54 - too let's let's do that here let's take
58:58 - self. line edit
59:01 - widget set
59:05 - placeholder
59:08 - text and let's say enter your
59:12 - name when I run this program we have
59:15 - some placeholder text that says enter
59:17 - your name this time I will type in
59:20 - SpongeBob then press submit hello
59:24 - SpongeBob all right everybody so those
59:26 - are line edit widgets also commonly
59:29 - referred to as text boxes and well
59:32 - everybody those are line edit widgets in
59:35 - pyqt5 hello everybody so in today's
59:37 - video I'm going to explain setting style
59:40 - sheets in pyqt5 CSS means cascading
59:43 - stylesheets if you're not familiar with
59:45 - CSS you can still follow along but
59:48 - knowing CSS is helpful as a reminder I
59:51 - do have a full free course on YouTube on
59:53 - HTML and CSS if you would like to learn
59:56 - more let's begin for this demonstration
59:59 - we will need the following Imports we
60:01 - will be designing some buttons we will
60:03 - import Q push
60:05 - button we'll be working with the layout
60:07 - manager we will import Q
60:10 - widget and for a horizontal layout
60:13 - manager we will need
60:15 - qh boox layout so import these three
60:20 - from the module of QT widgets now in
60:23 - previous topics we've set the geometry
60:26 - of our window since we're using a layout
60:28 - manager we don't necessarily need that
60:30 - anymore so I'm going to delete it in the
60:33 - past I have also created a method to
60:35 - initialize our user interface and we are
60:37 - calling that within the Constructor of
60:39 - our main window we will create three
60:41 - push button
60:42 - widgets self. button one will be the
60:45 - first button equals take our Q push
60:49 - button class and call the Constructor we
60:52 - can add text to the button we will pass
60:54 - that as an argument now since we're
60:56 - using a layout manager we don't need to
60:58 - add this button to self our window we
61:01 - don't need to do that let's create two
61:04 - more buttons we'll have button two and
61:07 - button three button two will say number
61:09 - two button three will say number three
61:12 - now we'll create a layout manager under
61:14 - normal circumstances we can't add a
61:16 - layout manager to our main window with
61:18 - main window widgets there's already a
61:20 - specified layout and format we're going
61:23 - to add a layout manager to a central WID
61:25 - widget and this widget will be added to
61:28 - the main window let's take care of that
61:31 - within our initialized user interface
61:32 - method we will create a central
61:37 - widget equals called The Constructor of
61:40 - Q
61:41 - widget then we will take self that means
61:44 - our window and set the central
61:49 - widget set Central widget then pass in
61:54 - our Central widget to set it
61:56 - then we will create a layout we will
61:59 - call the Constructor within the class of
62:01 - qbox
62:02 - layout let's name this layout hbx for a
62:06 - horizontal box
62:09 - equals call The Constructor within this
62:12 - class we will take our layout of
62:15 - horizontal
62:16 - box then add the following
62:19 - widgets add widget self. button
62:24 - one we'll do this with two and
62:29 - three then the last thing we need to do
62:32 - is take our Central
62:34 - widget call the set layout
62:37 - method then pass in our layout
62:40 - manager and now we should have those
62:42 - three buttons they're all arranged
62:45 - horizontally now we're going to apply
62:47 - some CSS like styling using the method
62:50 - of set style sheet here's how rather
62:53 - than apply these CSS properties individ
62:55 - ually such as self. button one. set
63:00 - stylesheet and in the past we've passed
63:02 - in individual CSS properties we're
63:05 - instead going to set the stylesheet of
63:07 - our window self we have a lot to write
63:11 - instead of double quotes we're going to
63:13 - use triple
63:16 - quotes triple quotes are used to write
63:20 - very long strings in a more organized
63:22 - way all of the CSS properties that we're
63:24 - going to write are are going to be
63:26 - within this set of triple quotes so let
63:28 - me give you a demonstration we could
63:31 - individually apply CSS like properties
63:33 - to each of these widgets but we could
63:35 - select an entire class of widgets too
63:38 - let's select the class of Q push
63:41 - button then add a set of curly
63:44 - braces the following CSS properties will
63:48 - apply to all Q push button widgets So
63:51 - currently this is what we have we'll
63:54 - increase the font size for for every
63:56 - push button so we will add the following
63:59 - property of font
64:01 - size then set it to be 40 pixels each be
64:04 - sure to end each CSS property with a
64:08 - semicolon so the font size is now 40 for
64:11 - every
64:12 - button let's set the font font family I
64:17 - will pick
64:20 - aial let's add some padding we can add
64:23 - some space around the text and the
64:25 - button
64:27 - itself so with padding if I was to set
64:31 - this to 75
64:33 - pixels we would have 75 pixels worth the
64:37 - space between the text and the border of
64:39 - the button I would like to change the
64:41 - dimensions of the padding so let's apply
64:44 - 15 pixels to the top and bottom of the
64:47 - button and 75 to the
64:50 - sides that's
64:52 - better margin is the space around a
64:56 - button let's set the margin to be 25
65:00 - pixels now the buttons are more spread
65:02 - out if this was 250 they would really be
65:07 - spread out that's margin it's the space
65:09 - around a
65:11 - widget let's set that back to
65:14 - 25 I'm going to change the border
65:18 - border 3 pixels
65:23 - solid this would change the border of
65:25 - the buttons we now have a black border
65:28 - that's 3 pixels in width if you would
65:30 - like to round the corners we can use
65:32 - border radius I will set that to be 15
65:36 - pixels with all the buttons the corners
65:39 - are now
65:40 - rounded within our set style sheet
65:42 - method we're applying all of these CSS
65:45 - like properties to every push button now
65:49 - what if you would like to apply CSS
65:51 - properties to Only One widget rather
65:53 - than all of them here's how
65:56 - with each of our widgets buttons 1 2 and
65:58 - three we need to set an object name
66:01 - let's do that before we call the set
66:03 - stylesheet method we will take our
66:05 - buttons self. button
66:08 - one call the set object name method then
66:14 - pass in a name for this widget we'll
66:17 - keep the name the same as button
66:19 - one so let's do this with button two and
66:22 - button
66:23 - three button two button
66:27 - three within the context of set
66:29 - stylesheet we will refer to these
66:31 - widgets by their object name buttons 1 2
66:35 - and three and now we can select them
66:39 - individually let's say that with button
66:41 - one I would like the background color to
66:43 - be red we're going to access our class
66:46 - of Q push button follow this with a
66:49 - pound sign i' like to call it a hashtag
66:52 - then we need the object name button one
66:56 - button one refers to the widget of
66:58 - button one again I kept the name the
67:00 - same then we need a set of curly braces
67:04 - between the set of curly braces we can
67:06 - list one or many different CSS
67:08 - properties let's change the background
67:12 - color I will set it to be
67:15 - red and now the background color of only
67:18 - that button is red and not all of
67:21 - them if I was to set the background
67:24 - color within the class well then all of
67:26 - them would be
67:28 - red okay so with button two I'll just
67:31 - copy what we have and paste
67:33 - it we are selecting the ID of button two
67:37 - let's set the background color to be
67:40 - green so then the background color is
67:43 - now green and button
67:48 - three button three will be
67:53 - blue if you would like a greater variety
67:56 - of colors I recommend looking up a Color
67:59 - Picker you can just Google Color Picker
68:02 - so if I would like a very specific shade
68:04 - of red I can pick that let's go with
68:08 - that there are a few options provided to
68:11 - you you can use hex
68:16 - values now we have a very specific shade
68:18 - of
68:20 - red you can use RGB
68:27 - RGB and close it within a set of
68:29 - parentheses and then paste those
68:31 - numbers or my favorite which is hsl hsl
68:36 - means Hue saturation and
68:41 - lightness we will enclose our values
68:43 - within hsl if you copy these values
68:47 - directly from Google you would have to
68:48 - remove this degree
68:50 - symbol I like hsl because I can also
68:53 - control the saturation and the lightness
68:55 - pretty easily okay let's pick a very
68:58 - specific shade of
69:00 - green that's good I would say I'll use
69:03 - the hsl
69:06 - values
69:09 - hsl remove the degree
69:12 - symbol and now we have a very specific
69:14 - shade of
69:15 - green and
69:18 - blue that's good I would say
69:31 - that's not too bad if you're already
69:33 - familiar with CSS we can apply pseudo
69:36 - classes such as when we hover over one
69:38 - of the buttons here's how let's copy
69:41 - these three
69:42 - blocks then paste them
69:47 - again we can add CSS properties when we
69:50 - hover over something we have to use the
69:53 - hover pseudo class after the ID of each
69:56 - of our buttons we will add colon hover
70:00 - we can apply the following CSS
70:02 - properties when we hover over the
70:04 - buttons all I'm going to do is up the
70:07 - lightness let's say by 20%
70:11 - each then when we hover over one of the
70:14 - buttons the lightness is going to change
70:17 - we apply the new CSS
70:20 - properties all right everybody so that
70:22 - is a more in-depth explanation of the
70:25 - set set stylesheet method in pi qt5

Cleaned transcript:

all right everybody in today's video we're going to get started working with the pi qd5 graphical user interface also known as a goey GUI in this topic we'll be creating a basic window so let's get started all right the first step is that using pip we're going to install the pi qt5 package open up a terminal both py charm and vs code have a builtin terminal that you can use we're going to use pip that is Python's package manager pip install Pi qt5 enter and this might just take a second once your download has finished you should have a package within your site packages folder named Pi qt5 we can work with it as long as we import it first we are going to import the module of CIS CIS meaning system this module provides access to variables used and maintained by the python interpreter then from the package of Pi qt5 do pay attention to the capitalization it's easy to mess that up use dot to access the module of QT widgets widgets are the building blocks of a pi qt5 application they begin with Q that helps distinguish them from widgets from other libraries they typically begin with Q from this module import the following widgets Q application and Q main window here's some boiler plate code that we have to write in order to get this application up and running first we will create a class of main window which will inherit from the class of Cain window by inheriting from the parent of Cain window we can customize our own Windows to display to the user we will need a Constructor let's define that Define Dunder inet there will be no arguments currently besides self and in case we have to pass any arguments to the parent of Cain window we will access the super class that's the parent and call the parents Constructor but currently we don't have any arguments to pass in we will return to this class momentarily let's define a function of main When We Begin this program we will call the function of main to begin the application for now all right pass if we are running this file directly let's add the following if statement if Dunder name is equal to a string of Dunder main if we are running this file directly call the main function in order for us to begin if that's true we will call the function of main within the main function we will create an app object app equals we will call the Constructor for Q application that class but there's one argument that we have to pass in we will access our module of CIS do AR RGV meaning arguments so by passing in this argument this allows Pi QT to process any command line arguments intended for it that's if we use command prompt or terminal we won't be doing that in the series but you may someday in the future it would be a good idea for us to Future proof our code otherwise you may see people pass in an empty list so we now have an app object next we will create a window object window equals call The Constructor for our class of main window currently we don't have any arguments to pass in we have an app object and a window object by calling their respective Constructors now if I run this program currently our window is not going to show the default behavior for a window is to hide it in order to to show our window we will access our window call the show method to show it it's only going to appear for a brief second when I run this script I don't know if you saw it but it pops up for a brief second we need to ensure that the window stays until we interact with it or close it after we show our window we will access our module of CIS called the exit method the exit method method ensures a clean exit of our program within our exit method we will pass in as an argument our app object our app object has a builtin method of excore and this is a method so we can call it this is the execute method there is an underscore character after exec for execute that distinguishes it from the execute method there is a separate version of this execute function that ends with an underscore our apps execute method it waits around for user input and handles events such as if we click buttons press keys or close the window now that we're calling this method when we run our program this window should stay in place we can maximize it minimize it or close it that's all the boiler plate code that we need for a basic window let's customize it within our Constructor for our main window What would would we like to add let's set the title for our window self. set window title method we will pass in a string think of a title for your program my cool first GUI gooey and now we have a new title my cool first goey graphical user interface when this window appears we can can set the geometry of where the window appears and the size of the window access self dot set geometry method there's four arguments X and Y for the X and Y coordinates a width of the window and a height of the window if I were to set X and Y to be both zero this window will appear in the top left corner of my screen I'll also need a width and a height let let's say I don't know 500 for each so now my window is now a square the width and the height are both the same they're both 500 the width is 500 pixels the height is 500 pixels with the first two arguments we set the initial placement of our window to be where X is z and y is zero that corresponds to the top left corner if I set the first argument to be 100 well then the window window is going to move to the right by 100 pixels there are ways to Center your window in the very center of your screen but that's a little too advanced for us right now for the time being I'll pick something roughly near the middle of my screen 700 pixels on the x axis and 300 on the Y AIS it should appear roughly in the middle but feel free to adjust these values based on the size of your screen we'll discuss layouts in the future now if you would like a a window icon we can change that you will need an image to work with So within my project folder I have a profile picture for my YouTube channel I'll set that to be the icon find an image that you like then add it to your project folder in order to work with icons we'll need to make the following import from PI qt5 that's the package access the module of QT GUI import the following Q icon now we can work with icons after we set the geometry for our window access this object of self this main window call the method of set window icon within this method we will call the Constructor of Q icon we'll pass in either a relative file path or an absolute file path my main python file is right next to my profile picture that image I only need the file name within a string so the name of my image it's going to be different for you depending on what the name of your image is my image is named profile uncore pick and this image is a JPEG jpg then when I run this program I'm using my image as an icon for this window window all right everybody that is how to create a window using pi qt5 and in the next topic we will be creating some labels what's up everybody in today's topic we're going to create some labels using pi qt5 we will import the widget of Q label this label class is used to create label widgets that can display text or images within the Constructor of our main window this is where we'll create a label we will declare a label object label equals call The Constructor for Q label for the text of the label we'll pass in a string that's the first argument let's say the word hello for the second argument we will pass in self self refers to this window object that we're calling and instantiating all right let's do a test run here is my label although you can barely see it the font is really small but it does say hello let's set the font we'll need another import from PI qt5 do QT GUI import Q font by importing the Q font class we can begin working with fonts we're going to take our label call call the set font method within this method we will call the Constructor of Q font pick a font that you would like I will pick aial but feel free to choose really any font then the second argument is a font size I'll pick 30 let's do another test run that's much better let's increase this to 40 for the font size now I'm going to set the geometry of this label such as the positioning and the width and the height let's take our label use the set geometry method we will pass in X and Y coordinates 0 0 corresponds to the top left corner for the width let's set the width to be 500 and the height to be 100 that's better I'll cover more advanced alignments momentarily let's add a stylesheet pqt does have styles that are very similar to CSS if you would like to learn more about CSS I do have a full course on that topic we will add some CSS like Properties by accessing our label object call the method of set style sheet within this method we will pass in some CSS like properties such as a a color for the color let's say blue these CSS like properties should end with a semicolon and now the font color is blue you could also use RGB values or heximal values you could always look up a Color Picker and pick a very specific color let's pick something green we can either use RGB values or heximal values so I will copy this value so I will paste that heximal value and now we have a very specific shade of green but I think I'll go with something dark such as that so this color is going to be a dark gray color we could set a background color this will be a new string backgroundcolor and I will pick a new color I will pick something blue that's a decent color we have a blue background with dark gray text we can set the font to be bold font weight will be bold so the font is now bold the font style can be italic font style italic so our font is italic and we can underline text decoration underline the text on our label is now underlined let's work on positioning next currently my text is left Justified and set to the center vertically to work with alignments we need this import from PI qt5 QT core import QT the class of QT is used for alignments to Center the text of our label at the top vertically we will take our label use the set alignment method then pass in a flag access the class of qot access the flag of align top this will align our text vertically to the top so then our text is aligned vertically to the top rather than the center for the bottom we will use the flag of align bottom we will align vertically on the bottom the text is now on the bottom to align vertically in the center align V Center this will be vertically Center which it was originally now for horizontal alignment we can add the following okay to a line right we will pass in a flag of Al line right horizontally Al line right the text is now all the way to the right for the center align H H for horizontal Center the text is now horizontally aligned in the center for the left align left the text will be aligned to the left we could combine both horizontal and vertical positioning here's how take our label call the set alignment method we will align horizontally in the center follow this with the or bitwise operator which is a vertical bar this allows us to combine Flags we will align horizontally in the center then vertically let's align to the top so our text should be aligned horizontally we're aligned in the center and vertically we're aligned to the top align bottom vertically horizontally we are in the center vertically we're aligned on the bottom then for the very center of our label align horizontal Center and align vertical Center our text will now be in the very middle of our label both horizontally and vertically now there is a shortcut for the very center we don't need both of these flags the shortcut is the following set alignment align Center that will align the text both horizontally and vertically so that is Center and Center all right everybody so that is an introduction to labels in pi qt5 what is going on everybody in today's video I'm going to show you how we can add images to Pi qt5 you will need an image to work with me I'll be using my profile picture for my YouTube channel feel free to take a moment to find a picture of your own maybe a profile picture of yourself we will need the following Imports Q label the most common and straightforward approach to displaying an image is to add an image to a label in order to display it then we will need this other import from PI qt5 that's the package then the module of QT GUI import the class of Q pix map the class of QX map it's used for handling images and provides functionality for loading manipulating and displaying images we will load our image to a q pix map object then add this qix map object to a label in order to display it within our Constructor of our main window we will create a label label equals call the Q label Constructor then pass in self self refers to the window object our window will be the parent widget our label widget is one of its children once we have our label we'll set the geometry of the label label. set geometry method we have to pass in X and Y coordinates as well as a width and height of the label for the coordinates let's say zero for each the label will appear in the top left corner for the width 250 is good and the height 250 as well here's my window the label is going to appear in the top left corner however there's nothing added to the label that's where the widget of Q pix map comes in we will create a pix map object equals call The Constructor of Q pix map we have to pass in a string that represents a relative file path or an absolute file path to our image my image is right next to my main python file I just need the file name the name of my image is profile undor pick and this is a JPEG when I run this we don't see our image we have to add the Pix map object to the label we have to set it here's how take our label use the set pixmap method and pass in our pixmap object and now we can see the image however the image doesn't scale according to the size of the label to enable that we have to call the following method take our label call the set scaled contents method then pass in true our image will now scale to the size of the label if we were to change the size of the label let's say it's 100 pixels it will scale down even further or I could even increase it to 500 so now the image takes up the entire width and height of the window let's set that back to 250 there's a few tricks that we can do with positioning of the image we've set our label with an image we can move the label within the confines of the window currently it's set in the top left corner but here's a few tricks that we can do with positioning with our label we will set the geometry again so the top left corner is 0 0 for the coordinates we could pass in 250 and 250 again for the width and the height but if we were to change that here when we initially create this label we would have to manually change that here as well I think it would be better if we were to get the current width and height of the label take our label call the width method to get the width same thing applies with the height label. height method that should work fine let's say we would like to take our image and move it to the right side of our window here's how with the x coordinate we're going to access self that means our window called the width method here's what we have currently we can't see the label it was placed outside of the confines of the window let's subtract our labels width label. width I'll put each of these arguments on a new line just to help with readability so now our image is is Right Justified within our window for the bottom right corner we will take the second argument access self. height that's the height of the window that we're instantiating minus our labels height and our image is in the bottom right corner for the bottom left corner we will set X to be zero now here's the tricky part to have our image placed in the center of our window we will take the width of the window minus the width of the label / two for integer division we'll be using double forward slashes we need our pixels to be whole integers so we're going to be using integer Division and not standard division we will round to the nearest whole pixel then we will do this with the height as well and now our image should be in the middle of our window all right everybody and that is how to add an image to your Pi qt5 application well hello again friends today I got to explain layouts in pi qt5 we'll discuss vertical horizontal and grid layouts but we'll need the following Imports we will be importing Q label Q widget I'm going to put these Imports on a new line just because we have a lot QV for vertical box layout and I'm just going to copy this q h for horizontal box layout and Q grid layout let's be sure that we have all these Imports these classes deal with layout managers they aren't widgets we'll be writing a majority of the code within our main window class however it can get disorganized really quick what will help keep things organized is if we declare a separate function within the main window class this is a common practice that you'll see within Pi qt5 there will be a function for init for initialize UI for user interface no other arguments besides self and for now I'll write pass when we construct a window object we will call Self do init UI to initialize the user interface so anything that deals with the user interface we're going to be writing within this function to help keep our code clean and organized normally we can't add a layout manager to a main window object main window widgets have a specific design and layout structure that's normally incompatible with layout managers what we would need to do is create a generic widget add a layout manager to that widget then add that widget to the main window in order to display the layout within our method to initialize our user interface we are going to create what is called a central widget called The Constructor for Q widget this is a generic widget then we will take self self is our window call the set Central widget method then pass in our Central widget when working with layout managers we will add that layout manager to the central Widget the central widget is then added to the main window so currently this is what we're working with we will need some widgets to organize because right now it's empty let's create a few labels let's say label one equals Q label I'll pass in some text number one okay let's create four additional labels 1 through five I'll just do some copying and pasting all of our labels are overlapping let's add some colors let's take label one use the set stylesheet method then pass in a background color as a CSS property backgroundcolor will be red let's copy this line of code paste it four additional times for labels 1 through 5 we'll have a label that is yellow another that is green blue then purple here are the labels they're all overlapping one another that's why we can only see five this is where a layout manager comes in we'll start with the vertical layout we will create a vertical layout manager which we will name vbox vbox equals call The Constructor for QV box layout we are calling the Constructor we will take our layout manager call the add widget method then pass in widget such as label one near the top here we'll do this with the other labels we'll do some copying and pasting add Label 2 3 4 and 5 there's one last step we will take our Central widget which we have declared at the top of this function call the set layout method we are set setting the layout of our Central widget with the layout manager a vbx vertical box here's the new layout all of our labels all of our widgets are arranged vertically for horizontal we will use qh box layout for horizontal replace any instance of V box with hbox for the set layout method pass in hbox this allows for a horizontal layout then we have grid Q grid layout replace hbox with grid so what we have to do with grids after adding a widget we have to specify a row and column with separate arguments the row and column both begin with zero so Row one column 1 would be row zero column 0 for label two let's say row 0 column 1 Label 3 will be Row one column 0o four will be Row one column 1 then five row one column two so here's the current layout we have labels 1 and two both within row zero labels 3 4 and 5 are both within the second row let's say label 5 is Row 2 column 2 that would result with something like this we have label 5 which is purple in row two column 2 so it depends on how you want to arrange your widgets all right everybody so that is an introduction to layout managers in pi qt5 today I'm going to show you how we can create push button widgets in pi qt5 to begin we will need the following Imports Q push button as well as Q label for this demonstration during the previous topic on layout managers within our Constructor for our main window we defined a method of initialize UI for user interface let's be sure that we're calling that method within our Constructor within this method is where we'll be handling managing the user interface to create a button we will call the push button Constructor normally when creating widgets we would want to prefix that widget with self then follow the name of the widget for example button however I'm going to demonstrate what happens when we don't do that because without self we're declaring a local variable we'll get back to that in just a moment let's create a local button object by calling the Q push button Constructor we can pass in some text such as click me we will add this to our window self self refers to our window object let's set the geometry of the button button. set geometry we could use a layout manager but I do want to keep this lesson as simple as possible so let's pick some coordinates I've picked the following for the X and Y coordinates 150 and 200 for the width 200 and the height 100 here is our button currently the font is a little small so I'm going to set the stylesheet set style sheet I'll just increase the font size we could use Q font but that might be overkill for this demonstration let's just say the font size will be 30 pixels now we can read it so we have our button we're going to be connecting our button to a function but we need to Define that function we'll do so within our main window class so we will Define a function of onclick there are are no parameters besid self when we click on the button what would we like to do let's print a test message let's say button clicked and that's it when we click this button nothing happens we have to set up a signal and slot for the button here's how we will take our button dot list a signal a signal is aitt when a widget is interacted with we have to list the type of signal so the signal we're looking for is clicked when we click this button we will perform a slot an action we will take the signal of clicked connect it to a slot connect is a method the slot will be self dot the name of the method on click when we press this button we perform this slot this method of onclick each time I press the button we perform that action not only should we print a message for this demonstration let's set the text to the button so we have button. set text let's change the text to clicked so this actually isn't going to work because we're not prefixing self let me demonstrate what happens we print button clicked but then we have a problem we have an exit code our program was interrupted button is considered local to our initializer method our onclick function doesn't recognize what our button is that's why we're going to prefix our button with self so it belongs to the class of main window and not this method any instance of button we're going to prefix with self and now this should work the text on my button is going to change when I click it clicked you don't have to do this but with my personal coding style whenever I create a variable or an object within a class I like to do so within the Constructor even py charm is giving me a warning when we declare this button I'm going to move it to the Constructor and let me just rearrange everything self. button equals a q push button widget within my initializer method that's when I like to rearrange everything and style it we can also disable buttons when we click on them to do that we will take self. button call the set disabled method then pass and true when I click the button it will be disabled I can no longer click on it for the last part of this demonstration when we click on our button let's change the text of a label let's declare self. Lael within our Constructor equals a q label the text of the label will be hello we will add this label to self the window when we set up the user interface let's set the geometry of the label self. Lael do set geometry we could use a layout manager but just to keep things simple I'm going to set some coordinates 150 for X 300 for y the width will be 200 and the height 100 let's change the font size self. label. set style sheet I will set the font size to be 30 maybe 50 better all right within our onclick function let's instead take self. label. set text method then pass in some new text to display we're saying hello but when we click the button let's say goodbye so now when I click the button we will change the text on a separate widget my label which now says goodbye so with buttons you need a signal that's connected to a slot the signal is an event the slot is an action that this widget is going to take when this signal occurs and well everybody that is an introduction to push buttons in pi qt5 hey yeah so today I got to explain a checkboxes in pqt 5 to work with checkboxes we will need the following import from the module of widgets from pqt 5 import Q check box to work with different states we will also need the following import from pqt 5. QT core import QT this module of QT core it contains non goey classes relevant two Pi qt5 applications so be sure that you get this import as well to create a checkbox I will create this within the Constructor of my main window we will create a checkbox with self the name of the checkbox which I will name checkbox equals call The Constructor of the Q checkbox class the first argument is going to be the text of the checkbox what do you want the checkbox to say let's ask do you like food the second argument is the parent widget where we will be adding this checkbox let's say self self will apply to this window we could use a layout manager but I want to keep this lesson as simple as possible we're just going to focus on checkboxes and their functionality so we should have a checkbox however we can barely see it the font is really small I have a method to initialize the user interface that's where we'll set the stylesheet and the geometry of our checkbox let's set the stylesheet self dot the name of the checkbox checkbox do set Styles sheet method then we can pass in some CSS like properties let's set the font size to be 30 pixels and I will pick a font family font family aial oh and we should change the geometry of the label it's getting cut off self do the name of the checkbox which is checkbox let's set the geometry pass in some X and Y coordinates for the placement as well as a width and a height I will pick 500 and 100 uh maybe I'll move it a little more to the right by 10 pixels that's pretty good our checkbox has an initial State it's normally unchecked that's the default Behavior but we could set that to be checked with the following method when the window loads let's take our checkbox self. checkbox call the set checked method then pass in true so then when the window loads the check checkbox is already checked but let's keep that as false now this checkbox it doesn't do anything when I check it let's add some functionality we'll take our checkbox connect a signal to a slot the slot can be a function or a method let's define a method within our main window class let's name this method checkbox changed we will call this method when the state of our checkbox changes there is one parameter besid self a state now the state parameter is going to be provided to us when we interact with our checkbox when we check the checkbox let's print something like a test message you like food we have to connect a signal of State changed to a slot of checkbox changed we will take self dot the name of the checkbox which is checkbox the signal will be State changed to connect a slot to a signal we use the connect method then pass in a function or method name so we are working with methods this method belongs to the window class we'll prefix the method name with self self. checkbox changed so when I run this program when I check the checkbox we execute this method you like food now when I uncheck it I instead would like to display you do not like food so that's where our state is going to come in I'm going to print our state just to see what it is our state is going to be a value when we check the checkbox our state has a value of two when we uncheck it it has a value of zero zero means unchecked two means checked there's also one for partially checked but that's not going to be relevant to this topic so zero or two we could add an if statement such as if state is equal to two then print you like food however that's not really readable other developers looking over your code aren't going to understand what two is by looking at it instead let's use the following we will access the class of QT there's a builtin constant of checked this also equals two but it's more readable it's a constant so if state is equal to QT checked print you like food I will check the checkbox you like food when I uncheck it nothing happens let's add an else statement else let's print you do not like food so then when I check the checkbox we print you like food when I uncheck it we print you do not like food you like food you do not like food you like food you do not like food all right everybody so that is an introduction to checkboxes in pi qt5 all right let's do this thing today I got to talk about radio buttons in pi qt5 to work with radio buttons we will need the following imports from the module of QT widgets we will need the class of Q radio button as well as Q button group to group together different buttons let's create three radio buttons within the Constructor of my main window we will construct three radio buttons for the first radio button this will be named radio one we will call the Constructor of the class Q radio button then we can pass in some text what is the radio button going to say let's say that we're working with payment options let's say visa for the first option then for the second argument I will pass in self we will add this radio button directly to our window that would be self let's create two more additional radio buttons Radio 2 and radio 3 the text of radio button two will be Master Card and three will be a gift card we are selecting different payment options we need to set the geometry of these radio buttons because we're not using a layout manager I have a method to initialize my user interface this is where I will set the geometry of my radio buttons so let's say self. radio one we will call the set geometry method pass in some coordinates 0 0 is good that applies to the top left corner of my window for the width 300 and the height 50 is good let's do this with radio buttons 2 and three Radio 2 radio 3 we'll just move each radio button down on the Y AIS by 50 pixels each so 50 then 100 here are the three radio buttons however the font is kind of small we can barely see it so let's apply a style sheet here's a trick that we can do with style sheets we can apply multiple CSS like properties to an entire group of widgets rather than having to type them and apply them individually we will select our window of self set the stylesheet of our window with the set stylesheet method we will add a selector the selector is going to be the name of the widget Q radio button in this case then add a set of curly braces we can apply CSS like properties to an entire group of widgets this way so let's set the font size of all radio buttons to be 40 pixels better let's set the font family to be aial then I will add a little bit of padding around each radio button padding 10 pixels that's pretty good so with radio buttons we can only select one from any one radio button group if I was making a payment I can't pay with a Visa and Mastercard at the same time I can only select one option that's the point of radio buttons we're limited to just one option with the default behavior of Pi qt5 all radio buttons unless explicitly stated are all part of the same group to demonstrate that let's create two additional radio buttons Radio 4 and Radio 5 radio button 4 will be for a payment method rather than a payment type for example we could say we're paying in store radio button 5 will be we're paying online radio buttons 1 through three will be for the payment type radio buttons four and five will be for the payment method we're either paying in store or we're ordering something online we do need to set the geometry for these two radio buttons I'll just copy these two lines add Radio 4 Radio 5 we'll set the ycoordinate of four to be 150 and 5 to B 200 all radio buttons will be within the same button group if I was to select in store we deselect one of these options what I would like is one option from this first group and another option from this other group these buttons are all in the same group I can only select one if I would like to pay with the VISA in store and I click the instore radio button we unselect the radio button for Visa I would like these radio buttons within different groups we need to create two different groups and add them accordingly here's how within our Constructor we will access self declare a button group let's let's name it button group one for Simplicity equals call The Constructor of the class Q button group then pass in to set the parent widget to be the window then we will create button group two we're going to access self select the radio button group button group one call the add button method then pass in a radio button self. radio1 then we'll add Radio 2 and radio three we'll select button group two this time button group two add radio button 4 and radio button 5 the first three radio buttons are within the same group radio buttons four and five are within a different group we can only select one radio button from any one radio button group maybe I would like to pay with a Visa card in store or a MasterCard online or a gift card in store these radio buttons are within different button groups we're limited to one selection in any one radio button group when we select these radio buttons they don't quite do anything for each radio button we have to connect a signal to a slot here's how let's define a method of radio button changed there will be no parameters besides self temporarily I'll write pass we'll fill this in in a moment we will take each radio button let's start with radio one Radio One the signal will be toggled when this radio button is toggled we will connect a slot we will pass in a function or a method self. radio button changed then we will do this with the other radio buttons 1 through five let's print a test message you selected something just to be sure that everything is working you selected something okay we know that that works currently what we're going to need to do is get the sender widget which radio button sent the signal of toggled I will create a local radio button to store that radio button whichever one emitted the signal we can determine that with self. sender method the sender method is going to return the widget that sent the signal so if we select radio button one our radio button will be radio button one if it was five then it's five in this case then we'll determine if our radio button is checked take our radio button use the is checked method this will return a Boolean true or false if it's checked if this returns true then let's print the following I'll use an F string we will get the text of the radio button radio button called the text method to return the text of the radio button is selected all right then let's see if this works let's select Visa Visa is selected MasterCard is selected gift card is selected in store is selected and online is selected that's how to determine which radio button was selected which one is the sender which one sent the signal all right everybody so that is an introduction to radio buttons in pyqt5 why hello everybody today I got to explain line edit widgets in pyqt5 also known as text boxes in pretty much anything ever made ever why are they called line edit widgets I really don't know let's begin from the module of QT widgets we will import the following class of q line edit to create a text box I mean a line edit widget we are accessing our window of self we will call this line edit widget line edit equals call The Constructor of the class q line edit then we will pass in self to add this line edit widget to the window let's set the geometry but we do have a text box in which we can type in stuff I have a method to initialize the user interface within this method I will access self. the line edit widget and set the geometry let's set it in the top left corner where X is 10 Y is 10 set a width 200 is good and a height 40 that's not too bad now the text is really small we can change that by applying a stylesheet access our window with self access our line edit widget then call the set stylesheet method we can pass in some CSS like properties including a font size let's pick 25 pixels and here's my new text box we can read the text now let's also change the font family font family I will pick Ariel this text box by itself it really doesn't do anything we need some way to get the text from the text box let's add a button when we click on the button we will get the text from the text box and do something with it cuz right now it doesn't do anything we will need to import Q push button let's create one button self. button equals call The Constructor of the class Q push button let's say that this is a submit button I will pass in a string of submit and we are adding this button to our window and we do need to set the geometry of the button we're not using a layout manager right now access our window with self access our button that we have previously created in our Constructor then call the set geometry method we'll place our button where X is 210 Y is 10 the width will be 100 and the height will be 40 not too bad let's change the font size of the button I'll copy these two lines of code because because I'm lazy instead of selecting our line edit widget we will select our button that's better if I were to click on the button it doesn't do anything we'll set up the signal of clicked to connect to a method that will do something let's define a method of submit we're submitting something we're submitting the text within the text box and for now all right pass we'll get back to this in a second we're going to take our button self. button we'll connect the signal of clicked clicked. connect method we will connect the method of submit self. submit so when we click on the button we will call this method let's print a test message you clicked the button let's type in something press submit and we get our test message you clicked the button let's get the text from the text box then do something with it let's create a local variable of text text equals now we have to get the text from our line edit widget self. line edit that's the widget to get the the text we can use the text method to return the text then let's print the text I'll use an FST string we'll say hello add a placeholder then display the text so now after typing in something why don't you type in your name then press submit we will display hello your name you could add some placeholder text too let's let's do that here let's take self. line edit widget set placeholder text and let's say enter your name when I run this program we have some placeholder text that says enter your name this time I will type in SpongeBob then press submit hello SpongeBob all right everybody so those are line edit widgets also commonly referred to as text boxes and well everybody those are line edit widgets in pyqt5 hello everybody so in today's video I'm going to explain setting style sheets in pyqt5 CSS means cascading stylesheets if you're not familiar with CSS you can still follow along but knowing CSS is helpful as a reminder I do have a full free course on YouTube on HTML and CSS if you would like to learn more let's begin for this demonstration we will need the following Imports we will be designing some buttons we will import Q push button we'll be working with the layout manager we will import Q widget and for a horizontal layout manager we will need qh boox layout so import these three from the module of QT widgets now in previous topics we've set the geometry of our window since we're using a layout manager we don't necessarily need that anymore so I'm going to delete it in the past I have also created a method to initialize our user interface and we are calling that within the Constructor of our main window we will create three push button widgets self. button one will be the first button equals take our Q push button class and call the Constructor we can add text to the button we will pass that as an argument now since we're using a layout manager we don't need to add this button to self our window we don't need to do that let's create two more buttons we'll have button two and button three button two will say number two button three will say number three now we'll create a layout manager under normal circumstances we can't add a layout manager to our main window with main window widgets there's already a specified layout and format we're going to add a layout manager to a central WID widget and this widget will be added to the main window let's take care of that within our initialized user interface method we will create a central widget equals called The Constructor of Q widget then we will take self that means our window and set the central widget set Central widget then pass in our Central widget to set it then we will create a layout we will call the Constructor within the class of qbox layout let's name this layout hbx for a horizontal box equals call The Constructor within this class we will take our layout of horizontal box then add the following widgets add widget self. button one we'll do this with two and three then the last thing we need to do is take our Central widget call the set layout method then pass in our layout manager and now we should have those three buttons they're all arranged horizontally now we're going to apply some CSS like styling using the method of set style sheet here's how rather than apply these CSS properties individ ually such as self. button one. set stylesheet and in the past we've passed in individual CSS properties we're instead going to set the stylesheet of our window self we have a lot to write instead of double quotes we're going to use triple quotes triple quotes are used to write very long strings in a more organized way all of the CSS properties that we're going to write are are going to be within this set of triple quotes so let me give you a demonstration we could individually apply CSS like properties to each of these widgets but we could select an entire class of widgets too let's select the class of Q push button then add a set of curly braces the following CSS properties will apply to all Q push button widgets So currently this is what we have we'll increase the font size for for every push button so we will add the following property of font size then set it to be 40 pixels each be sure to end each CSS property with a semicolon so the font size is now 40 for every button let's set the font font family I will pick aial let's add some padding we can add some space around the text and the button itself so with padding if I was to set this to 75 pixels we would have 75 pixels worth the space between the text and the border of the button I would like to change the dimensions of the padding so let's apply 15 pixels to the top and bottom of the button and 75 to the sides that's better margin is the space around a button let's set the margin to be 25 pixels now the buttons are more spread out if this was 250 they would really be spread out that's margin it's the space around a widget let's set that back to 25 I'm going to change the border border 3 pixels solid this would change the border of the buttons we now have a black border that's 3 pixels in width if you would like to round the corners we can use border radius I will set that to be 15 pixels with all the buttons the corners are now rounded within our set style sheet method we're applying all of these CSS like properties to every push button now what if you would like to apply CSS properties to Only One widget rather than all of them here's how with each of our widgets buttons 1 2 and three we need to set an object name let's do that before we call the set stylesheet method we will take our buttons self. button one call the set object name method then pass in a name for this widget we'll keep the name the same as button one so let's do this with button two and button three button two button three within the context of set stylesheet we will refer to these widgets by their object name buttons 1 2 and three and now we can select them individually let's say that with button one I would like the background color to be red we're going to access our class of Q push button follow this with a pound sign i' like to call it a hashtag then we need the object name button one button one refers to the widget of button one again I kept the name the same then we need a set of curly braces between the set of curly braces we can list one or many different CSS properties let's change the background color I will set it to be red and now the background color of only that button is red and not all of them if I was to set the background color within the class well then all of them would be red okay so with button two I'll just copy what we have and paste it we are selecting the ID of button two let's set the background color to be green so then the background color is now green and button three button three will be blue if you would like a greater variety of colors I recommend looking up a Color Picker you can just Google Color Picker so if I would like a very specific shade of red I can pick that let's go with that there are a few options provided to you you can use hex values now we have a very specific shade of red you can use RGB RGB and close it within a set of parentheses and then paste those numbers or my favorite which is hsl hsl means Hue saturation and lightness we will enclose our values within hsl if you copy these values directly from Google you would have to remove this degree symbol I like hsl because I can also control the saturation and the lightness pretty easily okay let's pick a very specific shade of green that's good I would say I'll use the hsl values hsl remove the degree symbol and now we have a very specific shade of green and blue that's good I would say that's not too bad if you're already familiar with CSS we can apply pseudo classes such as when we hover over one of the buttons here's how let's copy these three blocks then paste them again we can add CSS properties when we hover over something we have to use the hover pseudo class after the ID of each of our buttons we will add colon hover we can apply the following CSS properties when we hover over the buttons all I'm going to do is up the lightness let's say by 20% each then when we hover over one of the buttons the lightness is going to change we apply the new CSS properties all right everybody so that is a more indepth explanation of the set set stylesheet method in pi qt5
