With timestamps:

00:00 - hey what's going on everybody so today
00:02 - I'm going to be explaining 2D lists 2D
00:05 - meaning two-dimensional you do also have
00:07 - the capability of creating 2D tuples I
00:09 - thought today we would use 2D lists just
00:11 - because they're pretty flexible a
00:13 - two-dimensional list is just a list made
00:16 - up of lists it's really useful if you
00:19 - ever need a grid or Matrix of data kinda
00:21 - like an Excel spreadsheet let's create
00:24 - three lists a list of fruit
00:28 - vegetables
00:30 - and meat
00:32 - I'm going to speed up this video feel
00:34 - free to pause if you need to catch up
00:50 - here I have three lists a list of fruit
00:52 - vegetables and meat each of these lists
00:55 - is a one-dimensional list to create a
00:58 - two-dimensional list well you would
00:59 - begin by creating a one-dimensional list
01:01 - let's create a list of groceries
01:05 - all I would need to do is add my
01:07 - individual lists as elements to the
01:10 - outer list the 2D list
01:12 - we have fruits vegetables and meats
01:17 - normally to print a list or your other
01:20 - collections
01:21 - you would print the name the list
01:25 - in my list fruits I have apple orange
01:27 - banana coconut to access or change one
01:29 - of the elements you would type the name
01:31 - of the list then use the index operator
01:33 - so fruits at index of zero is a
01:37 - pineapple again
01:39 - with a 2d list it's a little different
01:41 - if I were to print my 2D list of
01:44 - groceries
01:46 - we would lay out the entire 2D list flat
01:49 - we have individual lists separated with
01:51 - a comma all enclosed within a set of
01:54 - square brackets taking the elements
01:56 - found within our 2D list I'm going to
01:58 - line these up kinda like this
02:01 - it kind of represents a grid or Matrix
02:03 - with rows and columns each individual
02:06 - list resembles a row each element
02:08 - resembles a column if I were to print
02:11 - groceries at index 0
02:14 - in place of returning one element found
02:16 - within one of the lists
02:18 - that would return an entire row so
02:20 - groceries at index 0 is my fruits list
02:24 - groceries at index one
02:26 - is my vegetables list
02:28 - groceries at index two is my meets list
02:31 - for one of the elements found within one
02:34 - of the rows you would need two indices
02:37 - if I need the Apple from the first row
02:39 - within my 2D list of groceries that
02:42 - would be row zero column zero
02:45 - it's kind of like coordinates
02:47 - row 0 column zero that would be my Apple
02:52 - zero one
02:54 - which is an orange
02:56 - zero two is banana zero three is coconut
03:00 - for the next row I would set the first
03:02 - index to be one
03:05 - Row one column zero that would be celery
03:09 - I'm gonna speed run this real quick just
03:11 - to show you all the different elements
03:13 - one one is carrots
03:15 - one two is potatoes if we try to access
03:18 - one three
03:19 - that index is out of range because we
03:22 - only have three elements within this row
03:25 - so then the next row would have an index
03:27 - of two column zero would be chicken
03:33 - two one is fish
03:35 - two two is Turkey
03:37 - Two Three is out of bounds
03:39 - to access an element from a 2d list you
03:42 - would need two indices in place of one
03:44 - because using just one would return the
03:47 - entire row like so
03:49 - now when you declare a 2d list you don't
03:52 - need to necessarily give each inner list
03:54 - a name we could do something like this
03:59 - I'm going to replace these names
04:01 - with the rows
04:06 - I'm just going to put these on a new
04:07 - line to make it more readable
04:14 - there that would work too
04:16 - just separate each inner list with a
04:19 - comma then enclose everything with a set
04:21 - of square brackets
04:22 - if you ever need to iterate over the
04:24 - elements of a 2d list you can use nested
04:27 - Loops if I were to use a single for Loop
04:30 - let's say for every uh maybe collection
04:34 - for every collection in
04:37 - groceries
04:39 - let's print what our collection is
04:45 - using a single for Loop would iterate
04:48 - over the rows but to also iterate over
04:50 - the elements found within each row we
04:53 - would use a nested Loop
04:55 - for every food in our collection
05:01 - let's print what our food is
05:06 - using nested Loops we can iterate over
05:08 - all of the elements found within our 2D
05:10 - list but I'm going to make this more
05:12 - organized like that grid structure we
05:14 - have
05:14 - I'm going to replace the new line
05:16 - character at the end of a print
05:18 - statement with a space
05:20 - then when we exit the nested loop I will
05:23 - print a new line by using just an empty
05:25 - print statement
05:27 - there that kind of resembles our grid
05:28 - structure we have rows
05:32 - and we have columns
05:33 - with two-dimensional collections you're
05:36 - not limited to just lists you could
05:38 - create a list of tuples
05:40 - so the inner rows will be surrounded
05:42 - with a set of parentheses
05:47 - you know this is also valid too
05:49 - or you can make a 2d Tuple it's a tuple
05:52 - that's made up of tuples
05:54 - you could make a tuple made up of sets
05:58 - sets are enclosed with a set of curly
05:59 - braces
06:04 - here we have a tuple made of sets
06:07 - use whatever is best for your own
06:09 - programs
06:10 - let's go over an exercise let's create a
06:13 - two-dimensional keypad that you would
06:14 - normally find on a phone we have three
06:17 - data types a list a set or a tuple
06:21 - the elements in a set are unordered so
06:24 - we can't use that these numbers need to
06:26 - be in order if we have the option a
06:28 - tuple is faster than a list a tuple is
06:31 - ordered and unchangeable so we should
06:33 - use it if we can and that's perfectly
06:35 - fine let's create a 2d Tuple this time I
06:39 - will name this 2D Tuple numpad
06:42 - we have an outer set of parentheses then
06:45 - an intercept of parentheses for each row
06:47 - we will have four rows
06:51 - the first row will be one two three
06:55 - the second row I'm going to put this on
06:57 - a new line
06:59 - four five six
07:02 - the next row will be seven eight nine
07:06 - then the last row will be an asterisk
07:08 - character
07:10 - then zero
07:13 - then the pound sign
07:14 - so numpad in this case is a 2d Tuple
07:18 - let's use a for Loop to iterate over
07:20 - every row this will be the outer loop
07:23 - for every maybe Row for every Row in
07:27 - numpad
07:29 - let's begin by printing our row
07:34 - so we're printing every Row in our
07:36 - numpad but I'd like to remove the
07:38 - parentheses
07:40 - let's create a nested Loop
07:43 - for every
07:45 - maybe numb for numb in row
07:51 - print whatever that num is
07:55 - we have one long vertical line let's
07:58 - replace the new line character at the
08:00 - end of our print statement with the
08:02 - space
08:05 - then when we escape the nested Loop
08:07 - let's print a new line
08:11 - and there is our telephone number pad
08:13 - you can see it's a grid made up of rows
08:15 - and columns
08:17 - so yeah that's a 2d list well a 2d
08:20 - collection it's a collection that's made
08:22 - up of collections then with our numpad
08:24 - we made a 2d Tuple if you ever need a
08:27 - grid or Matrix of data a 2d collection
08:29 - would work perfect and there you have it
08:32 - everybody those are 2D collections in
08:34 - Python

Cleaned transcript:

hey what's going on everybody so today I'm going to be explaining 2D lists 2D meaning twodimensional you do also have the capability of creating 2D tuples I thought today we would use 2D lists just because they're pretty flexible a twodimensional list is just a list made up of lists it's really useful if you ever need a grid or Matrix of data kinda like an Excel spreadsheet let's create three lists a list of fruit vegetables and meat I'm going to speed up this video feel free to pause if you need to catch up here I have three lists a list of fruit vegetables and meat each of these lists is a onedimensional list to create a twodimensional list well you would begin by creating a onedimensional list let's create a list of groceries all I would need to do is add my individual lists as elements to the outer list the 2D list we have fruits vegetables and meats normally to print a list or your other collections you would print the name the list in my list fruits I have apple orange banana coconut to access or change one of the elements you would type the name of the list then use the index operator so fruits at index of zero is a pineapple again with a 2d list it's a little different if I were to print my 2D list of groceries we would lay out the entire 2D list flat we have individual lists separated with a comma all enclosed within a set of square brackets taking the elements found within our 2D list I'm going to line these up kinda like this it kind of represents a grid or Matrix with rows and columns each individual list resembles a row each element resembles a column if I were to print groceries at index 0 in place of returning one element found within one of the lists that would return an entire row so groceries at index 0 is my fruits list groceries at index one is my vegetables list groceries at index two is my meets list for one of the elements found within one of the rows you would need two indices if I need the Apple from the first row within my 2D list of groceries that would be row zero column zero it's kind of like coordinates row 0 column zero that would be my Apple zero one which is an orange zero two is banana zero three is coconut for the next row I would set the first index to be one Row one column zero that would be celery I'm gonna speed run this real quick just to show you all the different elements one one is carrots one two is potatoes if we try to access one three that index is out of range because we only have three elements within this row so then the next row would have an index of two column zero would be chicken two one is fish two two is Turkey Two Three is out of bounds to access an element from a 2d list you would need two indices in place of one because using just one would return the entire row like so now when you declare a 2d list you don't need to necessarily give each inner list a name we could do something like this I'm going to replace these names with the rows I'm just going to put these on a new line to make it more readable there that would work too just separate each inner list with a comma then enclose everything with a set of square brackets if you ever need to iterate over the elements of a 2d list you can use nested Loops if I were to use a single for Loop let's say for every uh maybe collection for every collection in groceries let's print what our collection is using a single for Loop would iterate over the rows but to also iterate over the elements found within each row we would use a nested Loop for every food in our collection let's print what our food is using nested Loops we can iterate over all of the elements found within our 2D list but I'm going to make this more organized like that grid structure we have I'm going to replace the new line character at the end of a print statement with a space then when we exit the nested loop I will print a new line by using just an empty print statement there that kind of resembles our grid structure we have rows and we have columns with twodimensional collections you're not limited to just lists you could create a list of tuples so the inner rows will be surrounded with a set of parentheses you know this is also valid too or you can make a 2d Tuple it's a tuple that's made up of tuples you could make a tuple made up of sets sets are enclosed with a set of curly braces here we have a tuple made of sets use whatever is best for your own programs let's go over an exercise let's create a twodimensional keypad that you would normally find on a phone we have three data types a list a set or a tuple the elements in a set are unordered so we can't use that these numbers need to be in order if we have the option a tuple is faster than a list a tuple is ordered and unchangeable so we should use it if we can and that's perfectly fine let's create a 2d Tuple this time I will name this 2D Tuple numpad we have an outer set of parentheses then an intercept of parentheses for each row we will have four rows the first row will be one two three the second row I'm going to put this on a new line four five six the next row will be seven eight nine then the last row will be an asterisk character then zero then the pound sign so numpad in this case is a 2d Tuple let's use a for Loop to iterate over every row this will be the outer loop for every maybe Row for every Row in numpad let's begin by printing our row so we're printing every Row in our numpad but I'd like to remove the parentheses let's create a nested Loop for every maybe numb for numb in row print whatever that num is we have one long vertical line let's replace the new line character at the end of our print statement with the space then when we escape the nested Loop let's print a new line and there is our telephone number pad you can see it's a grid made up of rows and columns so yeah that's a 2d list well a 2d collection it's a collection that's made up of collections then with our numpad we made a 2d Tuple if you ever need a grid or Matrix of data a 2d collection would work perfect and there you have it everybody those are 2D collections in Python
