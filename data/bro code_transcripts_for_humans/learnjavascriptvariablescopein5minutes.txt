With timestamps:

00:00 - hey what's going on everybody so today
00:01 - I'm going to explain variable scope in
00:04 - JavaScript variable scope is where a
00:06 - variable is recognized and accessible in
00:09 - this beginner's tutorial we'll be
00:10 - discussing the differences between a
00:12 - local scope and a global scope suppose
00:14 - we have a variable let x equals one each
00:18 - variable name needs to be unique within
00:21 - that scope I couldn't declare another
00:23 - variable named X
00:24 - where I set x t equal to if I were to
00:27 - run this we have a syntax error
00:29 - identifier X has already been declared
00:31 - you can reuse the same variable names in
00:34 - your program as long as they're within
00:36 - different scopes
00:37 - to demonstrate let's create two
00:39 - functions function Function One within
00:42 - function one we will declare a variable
00:44 - x x equals one then we will console.log
00:49 - whatever X is
00:51 - then let's create function 2 by copying
00:54 - function one and then paste it
00:57 - function 2 x will equal 2. console.log x
01:03 - if I were to invoke function 1
01:06 - x equals one
01:08 - if I were to invoke function 2 well x
01:11 - equals two
01:13 - so we have two variables with the same
01:15 - name in our program
01:16 - that's legal as long as they have
01:19 - different scopes
01:20 - any variable declared inside of a
01:22 - function has a local scope or anytime
01:25 - you declare a variable within a set of
01:27 - curly braces there's no naming conflicts
01:30 - because they're within different scopes
01:32 - that way you can declare variables with
01:34 - the same name which we've done with X
01:36 - now functions can't see inside of other
01:39 - functions within function 2 we will
01:42 - declare variable y equals two
01:45 - then console.log X within function 1 we
01:49 - will console.log why
01:52 - if I were to invoke function 1 we have
01:55 - an uncaught reference error Y is not
01:57 - defined at Function One
02:00 - functions can't see inside of other
02:01 - functions function one has no idea what
02:05 - Y is we've declared that within another
02:07 - function it's kind of like functions are
02:09 - neighboring houses you can't necessarily
02:12 - see inside of your neighbor's house
02:14 - function 1 has no idea what variable Y
02:17 - is likewise function 2 if I were to
02:20 - invoke it function 2 has no idea what x
02:23 - is
02:23 - each of these variables are declared
02:26 - inside of a function so they have a
02:28 - local scope
02:29 - a global scope for a variable is any
02:31 - variable declared outside of a function
02:33 - with function 1 let's get rid of x
02:38 - and we will console.log X function two
02:41 - we will get rid of y console.log x
02:45 - if I were to declare a variable outside
02:47 - of these functions let x equal 3.
02:51 - I'll invoke function 1 will display X
02:54 - is 3 Let's invoke function two axis 3.
02:58 - any variable declared outside of a
03:01 - function has a global scope it's
03:03 - available through the whole program a
03:06 - global variable is recognized and
03:08 - accessible from anywhere
03:09 - hey this is bro from the future I was
03:12 - editing this video and I thought of a
03:14 - really good analogy for Global variables
03:16 - let's say that a function is a house we
03:19 - live in function one and our neighbor
03:21 - lives in function two we can see inside
03:23 - of function one but we can't see inside
03:26 - of our neighbor's house at function two
03:28 - anything that's declared in the global
03:30 - scope isn't found within any houses it's
03:33 - outside everybody can plainly see it
03:35 - it's kind of like a creepy stalker
03:37 - that's under a street light at three in
03:39 - the morning everybody while inside of
03:41 - their house can still see everything
03:42 - outside that's an analogy I thought was
03:44 - kind of accurate to describe a global
03:46 - scope however it's not recommended to
03:48 - declare Global variables in a large
03:50 - program just because you can have naming
03:53 - conflicts in a large program I might
03:55 - accidentally reuse the variable X or
03:57 - change it somewhere X is a very common
04:00 - name for a variable so in a large
04:01 - program I would stick with local
04:03 - variables but in a small program like
04:06 - this it's fine when inside of a function
04:08 - we'll use any a local instance of a
04:11 - variable first if it's not found we'll
04:13 - look at the global scope So within
04:15 - Function One let's declare X to be one
04:19 - within function 2 will declare X to B2
04:24 - and then within the global scope we have
04:26 - x equals three if I were to declare
04:29 - function one do you think X will equal
04:31 - one or three
04:33 - well it's one
04:35 - if we have two variables with the same
04:37 - name and they're in different Scopes
04:39 - we'll use the local version first that's
04:42 - why X is one and not three if I were to
04:45 - invoke function two well x equals two
04:48 - if these local variables weren't
04:50 - available
04:52 - we would use the global version instead
04:54 - where x equals three
04:57 - all right everybody so that is variable
04:59 - scope it's where a variable is
05:01 - recognized and accessible you have a
05:03 - local scope that's any time a variable
05:05 - is declared within a set of curly braces
05:07 - that variable is then only accessible to
05:11 - anything within that set of curly braces
05:13 - and a global scope is where a variable
05:15 - is declared outside of any functions
05:17 - it's available throughout the whole
05:19 - program and well everybody that is
05:21 - variable scope in JavaScript

Cleaned transcript:

hey what's going on everybody so today I'm going to explain variable scope in JavaScript variable scope is where a variable is recognized and accessible in this beginner's tutorial we'll be discussing the differences between a local scope and a global scope suppose we have a variable let x equals one each variable name needs to be unique within that scope I couldn't declare another variable named X where I set x t equal to if I were to run this we have a syntax error identifier X has already been declared you can reuse the same variable names in your program as long as they're within different scopes to demonstrate let's create two functions function Function One within function one we will declare a variable x x equals one then we will console.log whatever X is then let's create function 2 by copying function one and then paste it function 2 x will equal 2. console.log x if I were to invoke function 1 x equals one if I were to invoke function 2 well x equals two so we have two variables with the same name in our program that's legal as long as they have different scopes any variable declared inside of a function has a local scope or anytime you declare a variable within a set of curly braces there's no naming conflicts because they're within different scopes that way you can declare variables with the same name which we've done with X now functions can't see inside of other functions within function 2 we will declare variable y equals two then console.log X within function 1 we will console.log why if I were to invoke function 1 we have an uncaught reference error Y is not defined at Function One functions can't see inside of other functions function one has no idea what Y is we've declared that within another function it's kind of like functions are neighboring houses you can't necessarily see inside of your neighbor's house function 1 has no idea what variable Y is likewise function 2 if I were to invoke it function 2 has no idea what x is each of these variables are declared inside of a function so they have a local scope a global scope for a variable is any variable declared outside of a function with function 1 let's get rid of x and we will console.log X function two we will get rid of y console.log x if I were to declare a variable outside of these functions let x equal 3. I'll invoke function 1 will display X is 3 Let's invoke function two axis 3. any variable declared outside of a function has a global scope it's available through the whole program a global variable is recognized and accessible from anywhere hey this is bro from the future I was editing this video and I thought of a really good analogy for Global variables let's say that a function is a house we live in function one and our neighbor lives in function two we can see inside of function one but we can't see inside of our neighbor's house at function two anything that's declared in the global scope isn't found within any houses it's outside everybody can plainly see it it's kind of like a creepy stalker that's under a street light at three in the morning everybody while inside of their house can still see everything outside that's an analogy I thought was kind of accurate to describe a global scope however it's not recommended to declare Global variables in a large program just because you can have naming conflicts in a large program I might accidentally reuse the variable X or change it somewhere X is a very common name for a variable so in a large program I would stick with local variables but in a small program like this it's fine when inside of a function we'll use any a local instance of a variable first if it's not found we'll look at the global scope So within Function One let's declare X to be one within function 2 will declare X to B2 and then within the global scope we have x equals three if I were to declare function one do you think X will equal one or three well it's one if we have two variables with the same name and they're in different Scopes we'll use the local version first that's why X is one and not three if I were to invoke function two well x equals two if these local variables weren't available we would use the global version instead where x equals three all right everybody so that is variable scope it's where a variable is recognized and accessible you have a local scope that's any time a variable is declared within a set of curly braces that variable is then only accessible to anything within that set of curly braces and a global scope is where a variable is declared outside of any functions it's available throughout the whole program and well everybody that is variable scope in JavaScript
