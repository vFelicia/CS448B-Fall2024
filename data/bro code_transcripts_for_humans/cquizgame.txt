With timestamps:

00:02 - all right people so now that we know how
00:04 - to create an array of strings i thought
00:06 - this would be a good opportunity for us
00:07 - to create a quiz game so before we begin
00:10 - make sure to include these two header
00:12 - files at the top of your program so
00:14 - let's begin with a 2d array of
00:16 - characters and these will store our
00:18 - questions
00:21 - and i'm going to set a maximum size for
00:23 - each question to 100 bytes
00:26 - and we can go ahead and initialize this
00:27 - array with some questions so remember
00:30 - with strings each string is its own
00:32 - array so let's ask maybe three questions
00:35 - but feel free to pick any amount that
00:37 - you like
00:38 - and come up with any questions you would
00:39 - like as well or you can copy me i don't
00:42 - care
00:45 - what year did the c language debut then
00:48 - separate each string with a comma
00:51 - then just to make this more readable i'm
00:53 - going to go down to the next line
00:55 - so this is question two now
00:59 - who is credited with creating c
01:01 - and one more question
01:06 - what is the predecessor of c so now we
01:09 - have some questions we'll need some
01:11 - options
01:12 - this could be a separate 2d character
01:14 - array
01:16 - char
01:17 - options
01:19 - and i'll copy the dimensions from
01:21 - questions
01:23 - and we'll create four sets of options
01:26 - for each question
01:33 - this is the first set of options for the
01:35 - first question and then let's add a
01:37 - second set of options for the second
01:39 - question
01:51 - and a third set
02:00 - now we'll create an answer key this will
02:01 - be a one-dimensional array
02:04 - so char
02:05 - answers and the size will be three
02:09 - and i will set this equal to
02:11 - my answer key so the correct answers for
02:14 - my quiz are b
02:16 - a
02:18 - b
02:19 - so these will be individual characters
02:21 - all separated with a comma b
02:24 - a
02:25 - b
02:26 - so let's calculate the number of
02:27 - questions that we have
02:29 - so i will declare int
02:31 - number
02:32 - of
02:34 - questions
02:35 - and set the sequel to
02:37 - sizeof operator
02:39 - pass in our two-dimensional array of
02:41 - questions
02:42 - and divide this by one of the elements
02:44 - because they all have the same size
02:46 - questions at index zero and let's
02:50 - declare
02:51 - char guess to store our guess
02:54 - and int score to keep track of the
02:57 - player's score
02:58 - so now let's begin this i will print
03:01 - the title quiz game
03:05 - then add a new line
03:07 - okay now we need to loop through all of
03:09 - the questions so let's use a for loop
03:13 - so we will have an index of i set to
03:16 - zero and i would like to loop through
03:19 - this as long as i is less than the
03:22 - number of questions that we have
03:24 - then increment i by one
03:27 - and to test this let's print our
03:29 - questions
03:31 - so printf
03:33 - we're displaying a string so use the s
03:36 - format specifier
03:38 - questions add index of i
03:42 - and then i'll add a new line character
03:44 - after each printf statement okay let's
03:46 - at least test this so we should cycle
03:48 - through our questions
03:50 - okay here are my questions what year did
03:53 - the c language debut who is credited
03:55 - with creating c
03:56 - what is the predecessor of c
03:59 - and this part isn't necessary but i'm
04:00 - going to add some text decorations
04:03 - i'll just display a bunch of asterisks
04:06 - i'll do that before and after the
04:08 - question
04:09 - and let's try that again oh then add a
04:12 - new line character
04:14 - that's a little bit better
04:16 - after our question let's display the
04:18 - possible options
04:20 - so we will need a nested for loop
04:23 - so four
04:26 - now this parts can be a little bit
04:27 - tricky
04:28 - we need to begin our for loop at every
04:31 - fourth string
04:33 - within our for loop let's set int j
04:36 - equal to
04:38 - i times four
04:41 - so during the first iteration i will be
04:43 - zero so zero times four is zero but
04:47 - during the next iteration of the outer
04:49 - for loop i is going to equal one so one
04:53 - times four is four
04:55 - so that way we will begin the inner for
04:57 - loop with every fourth string within our
05:01 - 2d array of options
05:03 - and the condition is going to be
05:06 - j
05:07 - is less than
05:09 - i times four
05:11 - and then we would like to display four
05:13 - strings
05:14 - this for loop will cycle four times
05:16 - beginning at every fourth string
05:20 - and then we need to increment j by one
05:23 - now let's print every option
05:26 - so this is a string i'll add a new line
05:29 - and we are printing
05:31 - options at index of j
05:34 - and let's test this just to be sure that
05:36 - it works
05:37 - okay so we have our question followed by
05:40 - four possible options
05:43 - now let's accept some user input after
05:45 - the nested for loop currently our
05:47 - program isn't going to wait around for
05:48 - any user input that's why i displayed
05:50 - all the questions and options okay we
05:52 - will create a prompt to have a user type
05:55 - in a guess
05:56 - guess
05:57 - and we will use scanf to accept some
06:00 - user input
06:01 - we are accepting a single character
06:04 - and use the address of operator guess
06:08 - now let me show you what happens when we
06:09 - run this real quick
06:10 - so i'm just going to type in anything
06:12 - let's say a
06:14 - okay so we skipped question two that's
06:16 - because after using scanf when we accept
06:19 - a character we have that new line
06:21 - character within the input buffer so we
06:23 - need to clear that
06:24 - so one way in which we can clear that is
06:26 - to use scanf again
06:30 - use the c format specifier and that's it
06:33 - so this will clear the new line
06:35 - character from input
06:38 - buffer
06:39 - so this should no longer just skip
06:40 - question two
06:42 - okay
06:43 - let's say a
06:44 - b
06:45 - c
06:46 - okay so we know we can accept some user
06:48 - input now
06:50 - now here's one thing what if somebody
06:51 - types in a lowercase character i think
06:54 - that should still count even though
06:55 - we're looking for an uppercase character
06:57 - so let's take our guess
06:59 - and use the two upper function to make
07:01 - it uppercase guess equals 2 upper
07:06 - then pass in yes
07:07 - so basically we're passing in our guess
07:09 - making it uppercase and reassigning it
07:11 - to our guess
07:13 - and let's write an if else statement to
07:15 - check our guess if it's equal to our
07:17 - answer so if else
07:20 - our condition within our if statement if
07:23 - guess
07:24 - is equal to answer at index of i
07:27 - remember that we're still within the for
07:29 - loop the outer for loop so we have that
07:32 - index oh that's answers plural if a
07:35 - user's guess is equal to the answer then
07:38 - let's print correct
07:40 - and then give them one point so
07:42 - printf correct
07:46 - and then increment our score score plus
07:49 - plus
07:51 - else we will print wrong and you can
07:54 - give the correct answer if you would
07:56 - like just do that within here now once
07:58 - we cycle through all of the questions we
08:00 - can display a user score so be sure to
08:02 - do that outside of the for loop the
08:04 - outer for loop that is so let's use
08:07 - printf
08:08 - and display
08:09 - final
08:10 - score so i'm going to display two values
08:15 - so the first will be the player score
08:18 - divided by the number of questions
08:20 - so we have two integers to work with and
08:23 - we are displaying score and number of
08:26 - questions and then if you want you can
08:29 - add some text decoration to make it look
08:30 - cool
08:32 - so i'm going to run through this quiz
08:33 - once and intentionally get one question
08:36 - wrong
08:37 - so what year did the c language debut
08:39 - that would be 1972 that's b
08:42 - who is credited with creating c
08:44 - uh let's say doc brown
08:47 - so d
08:49 - and what is the predecessor of c that
08:51 - would be
08:52 - b okay and my final score is two out of
08:56 - three so let's try that again and this
08:59 - time i will try and get 100
09:01 - so the correct answer is b
09:04 - a dennis ritchie
09:06 - and b
09:08 - and my final score is three out of three
09:11 - so yeah i thought that would be a simple
09:13 - quiz game in c if you would like a copy
09:15 - of this code i'll post this to the
09:16 - comment section down below and well yeah
09:19 - that's a simple quiz game in c

Cleaned transcript:

all right people so now that we know how to create an array of strings i thought this would be a good opportunity for us to create a quiz game so before we begin make sure to include these two header files at the top of your program so let's begin with a 2d array of characters and these will store our questions and i'm going to set a maximum size for each question to 100 bytes and we can go ahead and initialize this array with some questions so remember with strings each string is its own array so let's ask maybe three questions but feel free to pick any amount that you like and come up with any questions you would like as well or you can copy me i don't care what year did the c language debut then separate each string with a comma then just to make this more readable i'm going to go down to the next line so this is question two now who is credited with creating c and one more question what is the predecessor of c so now we have some questions we'll need some options this could be a separate 2d character array char options and i'll copy the dimensions from questions and we'll create four sets of options for each question this is the first set of options for the first question and then let's add a second set of options for the second question and a third set now we'll create an answer key this will be a onedimensional array so char answers and the size will be three and i will set this equal to my answer key so the correct answers for my quiz are b a b so these will be individual characters all separated with a comma b a b so let's calculate the number of questions that we have so i will declare int number of questions and set the sequel to sizeof operator pass in our twodimensional array of questions and divide this by one of the elements because they all have the same size questions at index zero and let's declare char guess to store our guess and int score to keep track of the player's score so now let's begin this i will print the title quiz game then add a new line okay now we need to loop through all of the questions so let's use a for loop so we will have an index of i set to zero and i would like to loop through this as long as i is less than the number of questions that we have then increment i by one and to test this let's print our questions so printf we're displaying a string so use the s format specifier questions add index of i and then i'll add a new line character after each printf statement okay let's at least test this so we should cycle through our questions okay here are my questions what year did the c language debut who is credited with creating c what is the predecessor of c and this part isn't necessary but i'm going to add some text decorations i'll just display a bunch of asterisks i'll do that before and after the question and let's try that again oh then add a new line character that's a little bit better after our question let's display the possible options so we will need a nested for loop so four now this parts can be a little bit tricky we need to begin our for loop at every fourth string within our for loop let's set int j equal to i times four so during the first iteration i will be zero so zero times four is zero but during the next iteration of the outer for loop i is going to equal one so one times four is four so that way we will begin the inner for loop with every fourth string within our 2d array of options and the condition is going to be j is less than i times four and then we would like to display four strings this for loop will cycle four times beginning at every fourth string and then we need to increment j by one now let's print every option so this is a string i'll add a new line and we are printing options at index of j and let's test this just to be sure that it works okay so we have our question followed by four possible options now let's accept some user input after the nested for loop currently our program isn't going to wait around for any user input that's why i displayed all the questions and options okay we will create a prompt to have a user type in a guess guess and we will use scanf to accept some user input we are accepting a single character and use the address of operator guess now let me show you what happens when we run this real quick so i'm just going to type in anything let's say a okay so we skipped question two that's because after using scanf when we accept a character we have that new line character within the input buffer so we need to clear that so one way in which we can clear that is to use scanf again use the c format specifier and that's it so this will clear the new line character from input buffer so this should no longer just skip question two okay let's say a b c okay so we know we can accept some user input now now here's one thing what if somebody types in a lowercase character i think that should still count even though we're looking for an uppercase character so let's take our guess and use the two upper function to make it uppercase guess equals 2 upper then pass in yes so basically we're passing in our guess making it uppercase and reassigning it to our guess and let's write an if else statement to check our guess if it's equal to our answer so if else our condition within our if statement if guess is equal to answer at index of i remember that we're still within the for loop the outer for loop so we have that index oh that's answers plural if a user's guess is equal to the answer then let's print correct and then give them one point so printf correct and then increment our score score plus plus else we will print wrong and you can give the correct answer if you would like just do that within here now once we cycle through all of the questions we can display a user score so be sure to do that outside of the for loop the outer for loop that is so let's use printf and display final score so i'm going to display two values so the first will be the player score divided by the number of questions so we have two integers to work with and we are displaying score and number of questions and then if you want you can add some text decoration to make it look cool so i'm going to run through this quiz once and intentionally get one question wrong so what year did the c language debut that would be 1972 that's b who is credited with creating c uh let's say doc brown so d and what is the predecessor of c that would be b okay and my final score is two out of three so let's try that again and this time i will try and get 100 so the correct answer is b a dennis ritchie and b and my final score is three out of three so yeah i thought that would be a simple quiz game in c if you would like a copy of this code i'll post this to the comment section down below and well yeah that's a simple quiz game in c
