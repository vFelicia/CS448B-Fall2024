With timestamps:

00:00 - hey everybody in this topic I'm going to
00:01 - explain the primary key constraint in
00:04 - MySQL the primary key constraint can be
00:07 - applied to a column where each value in
00:09 - that column must both be unique and not
00:12 - null it's typically used as a unique
00:15 - identifier for example I live in the
00:17 - United States each citizen within the
00:19 - United States has a unique social
00:21 - security number there is a strong
00:24 - possibility that two citizens in the
00:26 - United States share the same first name
00:28 - and last name John Smith for example if
00:30 - we're trying to find John Smith well
00:32 - which one are we referring to we could
00:35 - instead search for a citizen with a
00:37 - unique social security number then we
00:39 - know for sure we have the right person
00:40 - that's kind of the same concept with the
00:42 - primary key also a table can only have
00:44 - one primary key constraint here's an
00:46 - example let's create a temporary table
00:49 - of transactions create table
00:52 - transactions
00:55 - there will only be two columns
00:58 - a transaction
01:00 - ID the data type is int I will set the
01:04 - transaction ID to be the primary key
01:08 - there can be no duplicate transaction
01:10 - IDs with the same value and none of them
01:13 - can be null then we will also have an
01:15 - amount how much was each transaction for
01:18 - the data type will be decimal
01:21 - Max size of five digits Precision of two
01:24 - and that is good enough
01:26 - then I will select all from our table
01:29 - transactions
01:32 - here's our table now to add a primary
01:35 - key constraint to a table that already
01:37 - exists this is the syntax alter table
01:41 - the name of your table
01:44 - add
01:45 - constraint
01:48 - the name of the constraint primary key
01:52 - within parenthesis the column we would
01:54 - like to apply the primary key to
01:57 - transaction ID in this example then
02:00 - semicolon however we have already
02:02 - applied the primary key constraint to
02:04 - our transaction ID column so this isn't
02:06 - going to work but that's how you would
02:08 - add a primary key constraint to a table
02:10 - that already exists Let's test that
02:12 - theory of that limit of one primary key
02:14 - per table I'll attempt to add a primary
02:17 - key to our amount column
02:22 - and it does not appear we can do so
02:24 - multiple a primary key to find so like I
02:27 - said you can only have one primary key
02:29 - per table
02:30 - and that is typically used as the
02:32 - identifier let's take a look at our
02:34 - transactions let's populate this table
02:36 - with a few rows
02:38 - we will insert into our table
02:41 - transactions
02:43 - some values all we need is a transaction
02:46 - ID and an amount for our transaction ID
02:49 - I'll just make up a number all
02:51 - transactions will start in the thousands
02:54 - this will be our first transaction
02:56 - so the amount a customer bought a
02:59 - hamburger and a soda the total was 4.99
03:04 - so let's run this
03:05 - there is our first row for the second
03:08 - transaction the transaction ID will be
03:11 - 1001
03:12 - the customer bought fries and a soda for
03:15 - 289.
03:18 - so that appears to have worked as well
03:20 - now the next customer buys fries and ice
03:23 - cream for 3.38 cents Let's test that
03:26 - theory of each transaction ID having to
03:29 - be unique I'll attempt to insert this
03:31 - row with the same transaction ID as the
03:33 - previous row
03:34 - then let's see what happens
03:37 - duplicate entry 1001 for key
03:40 - transactions.primary yeah it appears
03:42 - that we cannot have two rows with the
03:44 - same primary key they each need to be
03:46 - unique let's change the transaction ID
03:48 - to 1002. that appears to have worked now
03:52 - the next transaction will be a hamburger
03:54 - and soda for 4.49 I will attempt to set
03:59 - the transaction ID to be null
04:02 - which we can't do either column
04:04 - transaction ID cannot be null each value
04:07 - that's set as a primary key can't be
04:09 - null and it needs to be unique so this
04:12 - transaction will have a transaction ID
04:14 - of 1003
04:16 - two rows can share similar data we have
04:19 - two customers that bought both a
04:21 - hamburger and a soda for the same price
04:22 - but each transaction is uniquely
04:24 - identified by the transaction ID which
04:27 - we set as the primary key let's say that
04:29 - somebody comes in to request a refund
04:31 - and they give us a transaction ID well
04:34 - we can easily look that up and refund
04:36 - them whatever the amount was
04:37 - select amount
04:40 - from
04:42 - transactions
04:44 - where
04:45 - transaction
04:47 - ID equals 1003.
04:52 - so we are going to refund to the
04:53 - customer 4.99
04:56 - well all right then everybody that is
04:58 - the primary key constraint it's most
05:00 - commonly used as a unique identifier you
05:03 - usually want a primary key in every
05:05 - table you make each value within a
05:07 - column that is set as the primary key
05:09 - cannot be no and it needs to be unique
05:12 - there can only be one primary key per
05:14 - table typically it's used as a unique
05:16 - identifier for each row and yeah
05:18 - everybody that is the primary key
05:20 - constraint in MySQL

Cleaned transcript:

hey everybody in this topic I'm going to explain the primary key constraint in MySQL the primary key constraint can be applied to a column where each value in that column must both be unique and not null it's typically used as a unique identifier for example I live in the United States each citizen within the United States has a unique social security number there is a strong possibility that two citizens in the United States share the same first name and last name John Smith for example if we're trying to find John Smith well which one are we referring to we could instead search for a citizen with a unique social security number then we know for sure we have the right person that's kind of the same concept with the primary key also a table can only have one primary key constraint here's an example let's create a temporary table of transactions create table transactions there will only be two columns a transaction ID the data type is int I will set the transaction ID to be the primary key there can be no duplicate transaction IDs with the same value and none of them can be null then we will also have an amount how much was each transaction for the data type will be decimal Max size of five digits Precision of two and that is good enough then I will select all from our table transactions here's our table now to add a primary key constraint to a table that already exists this is the syntax alter table the name of your table add constraint the name of the constraint primary key within parenthesis the column we would like to apply the primary key to transaction ID in this example then semicolon however we have already applied the primary key constraint to our transaction ID column so this isn't going to work but that's how you would add a primary key constraint to a table that already exists Let's test that theory of that limit of one primary key per table I'll attempt to add a primary key to our amount column and it does not appear we can do so multiple a primary key to find so like I said you can only have one primary key per table and that is typically used as the identifier let's take a look at our transactions let's populate this table with a few rows we will insert into our table transactions some values all we need is a transaction ID and an amount for our transaction ID I'll just make up a number all transactions will start in the thousands this will be our first transaction so the amount a customer bought a hamburger and a soda the total was 4.99 so let's run this there is our first row for the second transaction the transaction ID will be 1001 the customer bought fries and a soda for 289. so that appears to have worked as well now the next customer buys fries and ice cream for 3.38 cents Let's test that theory of each transaction ID having to be unique I'll attempt to insert this row with the same transaction ID as the previous row then let's see what happens duplicate entry 1001 for key transactions.primary yeah it appears that we cannot have two rows with the same primary key they each need to be unique let's change the transaction ID to 1002. that appears to have worked now the next transaction will be a hamburger and soda for 4.49 I will attempt to set the transaction ID to be null which we can't do either column transaction ID cannot be null each value that's set as a primary key can't be null and it needs to be unique so this transaction will have a transaction ID of 1003 two rows can share similar data we have two customers that bought both a hamburger and a soda for the same price but each transaction is uniquely identified by the transaction ID which we set as the primary key let's say that somebody comes in to request a refund and they give us a transaction ID well we can easily look that up and refund them whatever the amount was select amount from transactions where transaction ID equals 1003. so we are going to refund to the customer 4.99 well all right then everybody that is the primary key constraint it's most commonly used as a unique identifier you usually want a primary key in every table you make each value within a column that is set as the primary key cannot be no and it needs to be unique there can only be one primary key per table typically it's used as a unique identifier for each row and yeah everybody that is the primary key constraint in MySQL
