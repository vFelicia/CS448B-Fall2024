With timestamps:

00:00 - hey people let's do this thing so the
00:02 - static keyword static is a keyword that
00:04 - defines Properties or methods that
00:06 - belong to a class itself rather than the
00:09 - objects created from that class in
00:11 - summary a class owns anything static not
00:15 - the objects so what we're going to do is
00:17 - create a class for math
00:19 - utilities class math util for
00:24 - short we'll create our own version of Pi
00:27 - we'll use the static keyword the name
00:30 - will be Pi Pi will equal
00:33 - 3.14159 just the first few
00:36 - digits I'm going to zoom in a little if
00:39 - I would like the static property I have
00:41 - to access it by its class so let's
00:45 - console.
00:47 - log the name of the class math util dot
00:52 - the name of the property Pi our static
00:55 - property is
00:57 - 3.14159 I don't need to create an object
00:59 - object in order to use this property I
01:02 - don't have to type const math UIL 1
01:07 - equals new math
01:10 - util I would have to type math util one
01:13 - that's the name of this object in order
01:15 - to access Pi all I have to do is type
01:17 - the name of the
01:18 - class and that's pretty convenient
01:21 - anything declared as static belongs to
01:23 - the class itself and not any object
01:26 - created from that class so now we're
01:28 - going to create a static method
01:31 - we'll use the static keyword we'll get a
01:34 - diameter once we pass in a radius as an
01:36 - argument get
01:39 - diameter we have one parameter a
01:42 - radius all we're going to do is return
01:46 - radius time
01:49 - 2 okay let's
01:52 - console.log again we have to type the
01:54 - name of the class matthu till dot the
01:58 - name of the method get
02:00 - diameter we have to pass in a radius
02:02 - though let's pass in
02:04 - 10 our diameter is 20 let's create a new
02:09 - static method for get
02:11 - circumference get
02:15 - circumference the formula is going to be
02:19 - we will be returning 2
02:23 - * this meaning Matthew
02:26 - till.
02:28 - pi
02:30 - times the radius we
02:33 - receive let's
02:37 - console.log let me make the C
02:39 - Capital the name of the class math util
02:43 - dot get
02:45 - circumference pass in a
02:48 - radius the circumference is
02:51 - 62.83 let's create one more for get
02:55 - area static get area we need a r
03:01 - radius we will
03:05 - return this
03:08 - Pi time
03:10 - radius time radius so that's radius
03:17 - squared
03:18 - console.log matthu till the name of the
03:20 - class get area pass in 10 and the area
03:25 - is
03:28 - 31415 in the next example we'll have a
03:30 - mix of regular properties and methods
03:32 - and static properties and methods this
03:35 - will be example
03:37 - two we'll create a class of users class
03:43 - user we'll create a static variable to
03:46 - keep track of the amount of users we
03:49 - create user count I will set that equal
03:52 - to
03:54 - zero I'll include a
03:57 - Constructor let me just space this out a
03:59 - little
04:01 - our Constructor is going to be
04:02 - automatically called when we instantiate
04:05 - a new object we need one argument though
04:07 - when we create a new user we need a
04:10 - username once we have our username we
04:13 - will assign this do username equals
04:18 - username not only that but when we
04:20 - create a new user I'm going to increase
04:22 - our user count by one just so we can
04:26 - keep track of how many users we create
04:28 - so inside the constru RoR you can write
04:30 - additional code it's not only for
04:32 - assigning
04:33 - properties let's take
04:36 - user. user
04:39 - count Plus+ to increment
04:42 - it let's create some user
04:45 - objects const user one equals new user
04:50 - pass in a username I'll pass in
04:55 - SpongeBob then let's
04:58 - console.log user one's
05:02 - username which is
05:05 - SpongeBob let's attempt to access user
05:08 - one's user
05:10 - count with user one's user count we get
05:13 - undefined that's because our user
05:16 - doesn't have user count as a property
05:18 - it's static that means it belongs to the
05:21 - class not any objects created from the
05:23 - class to access user count we have to
05:26 - type the name of the
05:27 - class user in this case
05:30 - we have one
05:32 - user let's see what happens when I
05:34 - create a new user
05:35 - object user 2 will
05:38 - equal
05:40 - Patrick our user count is now two let's
05:44 - display user 2's
05:45 - name yep we have SpongeBob and Patrick
05:48 - the total user count is
05:50 - two let's create a third
05:52 - user user three will be
05:57 - Sandy console.log
06:00 - user 3.
06:02 - username our user count is now
06:05 - three we have a static property that's
06:08 - keeping track of the amount of users we
06:10 - create let's create a method the first
06:13 - one will not be static say
06:16 - hello all we're going to do is
06:21 - console.log I'll use a template
06:24 - string hello my
06:27 - username is add a
06:30 - placeholder this do
06:35 - username let's have user one use there
06:40 - say hello
06:42 - method same thing with user two and user
06:48 - three hello my username is
06:50 - SpongeBob Patrick and Sandy now we'll
06:54 - create a static method we'll get the
06:57 - user
06:58 - count get
07:00 - user
07:03 - count
07:06 - console.log I'll use a template
07:10 - string there are I'll add a
07:14 - placeholder
07:16 - user. user
07:21 - count users
07:24 - online now in order to access this
07:26 - method I have to type the name of the
07:28 - class
07:29 - user. getet user
07:34 - count oops and I can't console. log that
07:38 - user. getet user
07:40 - count there are three users online all
07:44 - right everybody so that is the static
07:45 - keyword it defines properties and
07:47 - methods that belong to a class itself
07:50 - rather than any objects created from
07:51 - that class in summary the class owns
07:54 - anything static not the objects and well
07:58 - that is the static keyword in
08:01 - JavaScript

Cleaned transcript:

hey people let's do this thing so the static keyword static is a keyword that defines Properties or methods that belong to a class itself rather than the objects created from that class in summary a class owns anything static not the objects so what we're going to do is create a class for math utilities class math util for short we'll create our own version of Pi we'll use the static keyword the name will be Pi Pi will equal 3.14159 just the first few digits I'm going to zoom in a little if I would like the static property I have to access it by its class so let's console. log the name of the class math util dot the name of the property Pi our static property is 3.14159 I don't need to create an object object in order to use this property I don't have to type const math UIL 1 equals new math util I would have to type math util one that's the name of this object in order to access Pi all I have to do is type the name of the class and that's pretty convenient anything declared as static belongs to the class itself and not any object created from that class so now we're going to create a static method we'll use the static keyword we'll get a diameter once we pass in a radius as an argument get diameter we have one parameter a radius all we're going to do is return radius time 2 okay let's console.log again we have to type the name of the class matthu till dot the name of the method get diameter we have to pass in a radius though let's pass in 10 our diameter is 20 let's create a new static method for get circumference get circumference the formula is going to be we will be returning 2 * this meaning Matthew till. pi times the radius we receive let's console.log let me make the C Capital the name of the class math util dot get circumference pass in a radius the circumference is 62.83 let's create one more for get area static get area we need a r radius we will return this Pi time radius time radius so that's radius squared console.log matthu till the name of the class get area pass in 10 and the area is 31415 in the next example we'll have a mix of regular properties and methods and static properties and methods this will be example two we'll create a class of users class user we'll create a static variable to keep track of the amount of users we create user count I will set that equal to zero I'll include a Constructor let me just space this out a little our Constructor is going to be automatically called when we instantiate a new object we need one argument though when we create a new user we need a username once we have our username we will assign this do username equals username not only that but when we create a new user I'm going to increase our user count by one just so we can keep track of how many users we create so inside the constru RoR you can write additional code it's not only for assigning properties let's take user. user count Plus+ to increment it let's create some user objects const user one equals new user pass in a username I'll pass in SpongeBob then let's console.log user one's username which is SpongeBob let's attempt to access user one's user count with user one's user count we get undefined that's because our user doesn't have user count as a property it's static that means it belongs to the class not any objects created from the class to access user count we have to type the name of the class user in this case we have one user let's see what happens when I create a new user object user 2 will equal Patrick our user count is now two let's display user 2's name yep we have SpongeBob and Patrick the total user count is two let's create a third user user three will be Sandy console.log user 3. username our user count is now three we have a static property that's keeping track of the amount of users we create let's create a method the first one will not be static say hello all we're going to do is console.log I'll use a template string hello my username is add a placeholder this do username let's have user one use there say hello method same thing with user two and user three hello my username is SpongeBob Patrick and Sandy now we'll create a static method we'll get the user count get user count console.log I'll use a template string there are I'll add a placeholder user. user count users online now in order to access this method I have to type the name of the class user. getet user count oops and I can't console. log that user. getet user count there are three users online all right everybody so that is the static keyword it defines properties and methods that belong to a class itself rather than any objects created from that class in summary the class owns anything static not the objects and well that is the static keyword in JavaScript
