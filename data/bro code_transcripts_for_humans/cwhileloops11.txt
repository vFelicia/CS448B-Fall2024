With timestamps:

00:00 - hey how's it going everybody to bro here
hope you're doing well and in this video
00:03 - we're going to be discussing while loops
in C++ let's get into it
00:09 - so we're gonna be talking about while
loops all while loops are is that we can
00:14 - execute some code repeatedly while some
condition remains true this is how you
00:19 - write a while loop we're just going to
type in wild then we need a set of
00:23 - parentheses and then a set of curly
brackets now within the parentheses this
00:28 - is our condition as long as some
condition within here is true we will
00:34 - execute whatever code is between these
curly brackets over and over and over
00:39 - again but it's also important to add a
way to exit the while loop otherwise
00:44 - you're stuck in what's called an
infinite loop so here's an example of an
00:49 - infinite loop and this is what you don't
want to do alright so we're going to set
00:53 - the condition while one is equal to one
we'll display something maybe a message
00:59 - so see out help I'm trapped in an
infinite loop and then let's add an end
01:11 - line after this all right well let's see
what happens let's run the program
01:20 - alright as you can see it's just
repeating this code that we have within
01:24 - the while loop over and over and over
again and it's not stopping because we
01:28 - don't have any way to exit this while
loop so it's important to add a way to
01:33 - exit your while loop so you can continue
on with the rest of the program as fun
01:37 - as this is it's not practical now I'll
demonstrate a good example of us using a
01:43 - while loop that's actually practical
this time for example we could prompt
01:47 - someone to enter their name and we can
keep on asking them if they don't enter
01:51 - in their name if they try and skip it so
it's a great way to force the user to
01:56 - enter in something maybe some
information because we won't let them
02:00 - continue with the rest of the program
until they do something or enter that
02:04 - information and so let's create an
example of that where we're prompting a
02:08 - user to enter their name and repeatedly
until they actually do so let's create a
02:13 - string variable names a name and we're
not going to assign this right away so
02:18 - this is the syntax for a while loop
again we're just going to type while
02:21 - we're going to
our condition within a set of
02:24 - parentheses and then all of the subsets
of code for the while loop is going to
02:29 - be between two curly brackets so what
we're going to check within the while
02:33 - loop this will be the condition perhaps
if name is empty so we're going to use
02:39 - the string empty function and it will
check to see if our name is empty so if
02:46 - this condition remains true what are we
going to do let's create a prompt - such
02:52 - as please enter your name and we'll add
an endline after this and then we will
03:01 - get twine C in the users name whatever
they type in and then once we exit this
03:10 - while loop will display a welcome
message so C out welcome then the users
03:19 - name all right let's try this all right
please enter your name I'm just going to
03:29 - hit enter to skip this part and it's
having us enter our name again no no no
03:36 - all right so then it's just going to
continue on and on until I actually
03:39 - enter in something so now if I want to
exit this while loop I'll have to type
03:44 - in a name and I can't continue on with
the rest of the program until I do so
03:48 - I'm just going to type in bro hit enter
and we escaped the while loop and it
03:53 - displays our welcome message and it says
welcome bro so that's a good example of
03:57 - us using a while loop that has some
practical uses one thing to pay
04:01 - attention to with while loops is that if
our condition is false from the
04:05 - beginning we will actually skip this
while loop and completely ignore it and
04:10 - continue on with the rest of the program
so an example of this let's say for our
04:15 - name let's assign this value and I'll
just type in an empty space alright so
04:20 - what would happen if we assign this
value and this condition within our
04:25 - while loop is false from the get-go from
the beginning well this is what happens
04:30 - then we just skip it completely so in
order to Eve
04:36 - and enter the while loop the condition
has to be true then if it's not true
04:41 - when we reach the while loop in our
program it will skip it completely if
04:45 - it's false from the beginning now
there's actually a variant of the while
04:49 - loop that solves this problem for us and
it's called a do-while loop we will
04:54 - always perform this subset of code at
least once but then only continue if the
05:00 - condition is true then and I'll give you
guys an example of a do-while loop so
05:05 - let's clear everything we have here and
maybe I'll just make a note that this is
05:09 - a do-while loop there's different
spellings of this but it's essentially
05:13 - the same thing so a good example of this
do you remember from old video games
05:19 - like Oregon Trail where you had to press
Q to quit the game
05:23 - well let's create an example of
something like that involving a do-while
05:27 - loop so while we don't press the Q
button or Q key or entering Q we will
05:33 - continue to play this game that we make
up so let's create a string variable
05:39 - named answer and we're not going to
assign this right away now we're going
05:43 - to use the do-while loop so we're just
going to type in do then a set of curly
05:49 - brackets and then after this we're going
to type in our while loop all right and
05:55 - then you have to finish that off with
the semicolon because I'm forgetting
05:58 - that so we're going to put our condition
between these parentheses at the very
06:03 - end so we will always execute this loop
at least once and then at the end we're
06:09 - going to check to see if this condition
is true if it is then we'll continue
06:13 - with this do-while loop so let's create
a fictional game then it's going to have
06:19 - really very poor graphics all right so
you are playing the game it's just gonna
06:28 - display something really and let's end
line let's make this fun cute and then
06:40 - I'll ask for a prompt if the user wants
to exit perhaps I'll just type in or add
06:46 - a prompt that says maybe press
cute to quit and then let's add a get
06:58 - line here so get line C in and then the
answer and I'll just add one more line
07:08 - of text here just to kind of keep things
organized and separated alright so we're
07:15 - going to execute this do-while loop at
least once and then depending on our
07:20 - answer this will determine if we're
going to exit the do-while loop so we'll
07:25 - need to write some sort of condition
within the while loop so we can check to
07:29 - see if our answer is Q or not and one
way to do this is that we could say
07:36 - answer dot at index zero all right does
not equal Q all right so this will take
07:49 - whatever we type in and if it begins
with the letter Q then we will exit the
07:56 - while loop then as long as it doesn't
equal Q however if they type in capital
08:02 - Q will also have to count for that too
so we're going to use the and logical
08:07 - operator answer at index zero does not
equal uppercase Q all right so let's run
08:21 - this oh then we should probably write a
prompt to let the user know that they
08:25 - have exited the game so you have quit
the game okay we should be good so we're
08:38 - going to perform this code block at
least once and then depending on our
08:42 - answer that will determine if we exit
this game or not so let's try this you
08:50 - are playing the game
QQ press Q to quit um I don't want to
08:55 - quit so I'll just type in still playing
and it says I am still playing the game
09:01 - no I don't want to quit
you know what this game is kind of lame
09:05 - so I want to quit the game so I'm going
to type in Q to quit and it says you
09:10 - have quit the game so you can see that
with a do-while loop
09:13 - you'll always perform this code block at
least once and then at the end we will
09:19 - check our condition then if the
condition evaluates is true we will
09:24 - continue to repeat this do-while loop
over and over again so that's a
09:29 - variation of the while loop it's a
do-while loop and it's if you want to
09:33 - execute this code block at least once
otherwise with the basic while loop you
09:38 - might just skip it completely if the
condition is false from the beginning so
09:44 - that's this topic on while loops I'll
post all the code that we worked on in
09:48 - the comments down below and pin it to
the top and if you're looking for
09:52 - additional practice or a project to work
on why don't you create your own example
09:57 - of a while loop and a do-while loop and
also post it in the comments down below
10:01 - but yeah that is this topic on how while
loops work in C++ heyyou if you enjoyed
10:09 - this lesson then you can help me help
you in 3 easy steps by smashing that
10:14 - like button drop a comment down below
and subscribe if you'd like to become a
10:18 - fellow bro

Cleaned transcript:

hey how's it going everybody to bro here hope you're doing well and in this video we're going to be discussing while loops in C++ let's get into it so we're gonna be talking about while loops all while loops are is that we can execute some code repeatedly while some condition remains true this is how you write a while loop we're just going to type in wild then we need a set of parentheses and then a set of curly brackets now within the parentheses this is our condition as long as some condition within here is true we will execute whatever code is between these curly brackets over and over and over again but it's also important to add a way to exit the while loop otherwise you're stuck in what's called an infinite loop so here's an example of an infinite loop and this is what you don't want to do alright so we're going to set the condition while one is equal to one we'll display something maybe a message so see out help I'm trapped in an infinite loop and then let's add an end line after this all right well let's see what happens let's run the program alright as you can see it's just repeating this code that we have within the while loop over and over and over again and it's not stopping because we don't have any way to exit this while loop so it's important to add a way to exit your while loop so you can continue on with the rest of the program as fun as this is it's not practical now I'll demonstrate a good example of us using a while loop that's actually practical this time for example we could prompt someone to enter their name and we can keep on asking them if they don't enter in their name if they try and skip it so it's a great way to force the user to enter in something maybe some information because we won't let them continue with the rest of the program until they do something or enter that information and so let's create an example of that where we're prompting a user to enter their name and repeatedly until they actually do so let's create a string variable names a name and we're not going to assign this right away so this is the syntax for a while loop again we're just going to type while we're going to our condition within a set of parentheses and then all of the subsets of code for the while loop is going to be between two curly brackets so what we're going to check within the while loop this will be the condition perhaps if name is empty so we're going to use the string empty function and it will check to see if our name is empty so if this condition remains true what are we going to do let's create a prompt such as please enter your name and we'll add an endline after this and then we will get twine C in the users name whatever they type in and then once we exit this while loop will display a welcome message so C out welcome then the users name all right let's try this all right please enter your name I'm just going to hit enter to skip this part and it's having us enter our name again no no no all right so then it's just going to continue on and on until I actually enter in something so now if I want to exit this while loop I'll have to type in a name and I can't continue on with the rest of the program until I do so I'm just going to type in bro hit enter and we escaped the while loop and it displays our welcome message and it says welcome bro so that's a good example of us using a while loop that has some practical uses one thing to pay attention to with while loops is that if our condition is false from the beginning we will actually skip this while loop and completely ignore it and continue on with the rest of the program so an example of this let's say for our name let's assign this value and I'll just type in an empty space alright so what would happen if we assign this value and this condition within our while loop is false from the getgo from the beginning well this is what happens then we just skip it completely so in order to Eve and enter the while loop the condition has to be true then if it's not true when we reach the while loop in our program it will skip it completely if it's false from the beginning now there's actually a variant of the while loop that solves this problem for us and it's called a dowhile loop we will always perform this subset of code at least once but then only continue if the condition is true then and I'll give you guys an example of a dowhile loop so let's clear everything we have here and maybe I'll just make a note that this is a dowhile loop there's different spellings of this but it's essentially the same thing so a good example of this do you remember from old video games like Oregon Trail where you had to press Q to quit the game well let's create an example of something like that involving a dowhile loop so while we don't press the Q button or Q key or entering Q we will continue to play this game that we make up so let's create a string variable named answer and we're not going to assign this right away now we're going to use the dowhile loop so we're just going to type in do then a set of curly brackets and then after this we're going to type in our while loop all right and then you have to finish that off with the semicolon because I'm forgetting that so we're going to put our condition between these parentheses at the very end so we will always execute this loop at least once and then at the end we're going to check to see if this condition is true if it is then we'll continue with this dowhile loop so let's create a fictional game then it's going to have really very poor graphics all right so you are playing the game it's just gonna display something really and let's end line let's make this fun cute and then I'll ask for a prompt if the user wants to exit perhaps I'll just type in or add a prompt that says maybe press cute to quit and then let's add a get line here so get line C in and then the answer and I'll just add one more line of text here just to kind of keep things organized and separated alright so we're going to execute this dowhile loop at least once and then depending on our answer this will determine if we're going to exit the dowhile loop so we'll need to write some sort of condition within the while loop so we can check to see if our answer is Q or not and one way to do this is that we could say answer dot at index zero all right does not equal Q all right so this will take whatever we type in and if it begins with the letter Q then we will exit the while loop then as long as it doesn't equal Q however if they type in capital Q will also have to count for that too so we're going to use the and logical operator answer at index zero does not equal uppercase Q all right so let's run this oh then we should probably write a prompt to let the user know that they have exited the game so you have quit the game okay we should be good so we're going to perform this code block at least once and then depending on our answer that will determine if we exit this game or not so let's try this you are playing the game QQ press Q to quit um I don't want to quit so I'll just type in still playing and it says I am still playing the game no I don't want to quit you know what this game is kind of lame so I want to quit the game so I'm going to type in Q to quit and it says you have quit the game so you can see that with a dowhile loop you'll always perform this code block at least once and then at the end we will check our condition then if the condition evaluates is true we will continue to repeat this dowhile loop over and over again so that's a variation of the while loop it's a dowhile loop and it's if you want to execute this code block at least once otherwise with the basic while loop you might just skip it completely if the condition is false from the beginning so that's this topic on while loops I'll post all the code that we worked on in the comments down below and pin it to the top and if you're looking for additional practice or a project to work on why don't you create your own example of a while loop and a dowhile loop and also post it in the comments down below but yeah that is this topic on how while loops work in C++ heyyou if you enjoyed this lesson then you can help me help you in 3 easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro
