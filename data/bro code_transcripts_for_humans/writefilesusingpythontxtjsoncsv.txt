With timestamps:

00:00 - hey what's going on everybody in today's
00:01 - video I'm going to show you how we can
00:03 - write and output files using python
00:05 - we'll cover plain text Json and CSV
00:08 - files but we'll start with plain text
00:11 - because it's the easiest suppose we have
00:13 - some data that we would like to Output
00:15 - I'll create a variable of text
00:18 - Data think of a food you like I will
00:21 - output I like
00:23 - pizza for convenience we'll create a
00:26 - variable a file path this can be a
00:29 - relative file file path or an absolute
00:31 - file path within this file path we'll
00:34 - need a name for this file I will name
00:36 - this output then include the file
00:38 - extension this will be a txt file a
00:41 - plain text
00:43 - file this is a relative file path when I
00:46 - generate this file it will be within the
00:48 - same project folder as my main python
00:51 - file to create a file we'll write the
00:54 - following with open
00:57 - function pass in our file path
01:01 - and a character of w to write as
01:05 - file and for now I'll write pass there's
01:09 - a few things going on here with is a
01:11 - statement it's used to wrap a block of
01:14 - code to execute if we open a file the
01:17 - width statement will also close that
01:19 - file when we're done with it so we don't
01:21 - need to manually close files when you
01:24 - open a file it is good practice to close
01:26 - it because if you don't you may run into
01:28 - unexpected Behavior the width statement
01:30 - takes care of that for you the open
01:33 - function will return a file object the
01:36 - first parameter is the file path the
01:38 - second parameter is the mode w Is Right
01:42 - X will also write if this file doesn't
01:44 - exist if it already does exist we'll
01:47 - receive an error A is for append to
01:50 - append a file and R is to read but we'll
01:53 - take care of reading in the next video
01:55 - so we will stick with W to write a file
01:58 - the open function returns the file
02:00 - object the first argument is the
02:03 - file the second argument is the mode you
02:07 - can set these to be keyword arguments if
02:09 - it's easier for you to
02:11 - read when the open function returns a
02:14 - file object for us we're using the as
02:16 - keyword to give it a name as file it's
02:20 - kind of like we're instantiating a file
02:22 - object file equals file file is the name
02:26 - of the file object to write to this file
02:29 - we're going to take take our file object
02:31 - use the built-in write method then pass
02:34 - in our text
02:36 - Data then when this is done I'm going to
02:39 - print a confirmation
02:40 - message I'll use an F string let's say
02:44 - text
02:46 - file I'll add our file
02:49 - path place it within single
02:52 - quotes was created let's see what
02:57 - happens text file output. txt was
03:01 - created and here's that
03:03 - file I like
03:06 - pizza we also have the capability of
03:08 - setting an absolute file path let's say
03:11 - I would like to Output this file to my
03:13 - desktop I would just need that location
03:16 - let me just get the location from one of
03:18 - these folders by going to
03:20 - properties I will copy this location
03:23 - this is the location to my
03:25 - desktop but for you it's probably going
03:27 - to be different then I will paste the
03:30 - absolute file path a backs slash is an
03:33 - escape sequence within a string we
03:35 - either could use double backs
03:38 - slashes or a forward
03:43 - slash now let's see if this outputs to
03:45 - my
03:47 - desktop text file here's the file path
03:51 - was created and here's that
03:54 - file it's a plain text file and it says
04:00 - I like
04:02 - pizza so when working with the file path
04:05 - it can be a relative file path or an
04:07 - absolute file path all right now for our
04:11 - text Data there are different modes as
04:13 - well W is for write if we use x we'll
04:18 - write a file if that file doesn't
04:19 - already exist in this case it does on my
04:23 - desktop we already have a file named
04:25 - output and it's a plain text file so
04:27 - when I run this with the mode of X we
04:31 - get a file exists error that file
04:34 - already exists we could catch this
04:37 - exception so that our program isn't
04:39 - interrupted I will copy the name of this
04:44 - error I will place my code within a tri
04:47 - block we will try this code and catch
04:50 - any
04:52 - exceptions except file exists error if
04:56 - this file already exists let's take a
04:59 - different course of action let's print
05:02 - that file already
05:06 - exists so now when I run this again our
05:10 - program isn't interrupted we receive
05:12 - this message that file already
05:15 - exists if I were to delete that
05:19 - file
05:21 - bye-bye then run this
05:23 - again well we create a new file text
05:26 - file that absolute file path was created
05:30 - and here it is
05:32 - again now for the mode there's also a a
05:35 - to append any new data will be appended
05:38 - to that
05:41 - file we get I like pizza I like pizza
05:46 - when a pending data if you would like
05:47 - that data on a new line we can add a new
05:50 - line
05:51 - character W will overwrite a
05:56 - file so we're back to the
05:58 - original when a pending either before or
06:01 - after we write our Text data we could
06:04 - add a new line character let's say let's
06:07 - do that
06:08 - before new line plus our text Data
06:12 - here's the
06:13 - output again we're appending not
06:16 - writing I like pizza I like pizza our
06:20 - second sentence is on a new line let's
06:22 - run this a couple
06:25 - times we should have several lines now
06:31 - let's work with a collection let's say
06:33 - we have a list of
06:35 - employees we'll pick some employees at
06:37 - the Crusty Crab so we have Eugene I
06:41 - guess he is technically the manager I
06:43 - don't know if that counts as an
06:45 - employee
06:47 - Squidward
06:49 - SpongeBob and Patrick Patrick worked at
06:52 - the K Crusty Crab in one episode he
06:55 - counts then we'll have to be sure we're
06:57 - writing our employees
06:59 - this is what's going to
07:01 - happen we have a type error write
07:04 - argument must be a string not a
07:07 - list in order for us to write each item
07:10 - within a list we'll need to iterate over
07:12 - it using some sort of loop we can't
07:14 - write a list or any other collection
07:17 - directly here's what we'll change for
07:21 - every
07:22 - employee in our collection of
07:27 - employees we're iterating over something
07:30 - that is
07:31 - iterable we will access our file object
07:35 - use the right method then write each
07:40 - employee here's the
07:44 - result we get one long string of each
07:47 - item in this
07:48 - list if you prefer after writing each
07:52 - employee we could add a new line
07:54 - character after
08:00 - and here's the
08:01 - output we get each item in our list on a
08:04 - new
08:05 - line or rather than a new line character
08:08 - we could use a
08:10 - space this would output all the
08:12 - employees but space them
08:15 - out now we'll be outputting a Json file
08:18 - in summary a Json file is made of key
08:20 - value pairs for our data let's say we
08:24 - have a dictionary of
08:27 - employee a dictionary is of key value
08:30 - pairs will have a name of
08:35 - SpongeBob SpongeBob's age will be
08:41 - 30 his job his position is that he is a
08:46 - cook so this is the data I would like to
08:49 - Output I'll keep the file path the same
08:52 - we'll change the file extension
08:55 - tojson we will need the help of the Json
08:58 - module let's let's be sure to import
09:00 - that import
09:02 - Json within our width block we'll make
09:05 - the following change we're going to
09:07 - access our Json
09:09 - module use the dump method the dump
09:13 - method will convert our dictionary to a
09:15 - Json string to Output it so we have to
09:18 - pass in our Json data of
09:22 - employee our file as the second
09:25 - argument then for a confirmation message
09:28 - let's print Jon file was created here's
09:31 - the result Json file at this location
09:36 - was
09:38 - created and here's my Json file I'll go
09:40 - to properties we'll confirm it is a Json
09:43 - file it is and I'll open
09:46 - it here's the
09:48 - result now you could add indentation
09:51 - after each key value pair here's
09:54 - how after our second argument our file
09:58 - we can pass in a keyword argument of
10:01 - indent for each key value Pair by how
10:04 - many spaces do we want to indent each
10:06 - let's say
10:08 - four and let's take a
10:11 - look I think that's more readable we're
10:14 - indenting each key value Pair by four
10:17 - spaces so that is a Json file it's a
10:20 - collection of key value
10:23 - pairs a dictionary or anything that uses
10:26 - key value pairs is a great candidate to
10:28 - be output to to a Json
10:30 - file all right now we're going to work
10:33 - with CSV files CSV means comma separated
10:36 - values CSV files are pretty common with
10:39 - a spreadsheet of data like an Excel
10:41 - spreadsheet we will create a 2d data
10:43 - structure of
10:46 - employees this will be a list of
10:50 - lists let's add four
11:00 - we'll need the help of the CSV module
11:02 - import
11:05 - CSV think of our 2D data structure as a
11:08 - table of rows and columns so for the
11:10 - first row I will add name comma
11:16 - age comma
11:19 - job the second row will have a name of
11:23 - SpongeBob age 30 job cook for the next
11:28 - row we'll have have
11:31 - Patrick Patrick will be
11:35 - 37 what is Patrick's job I don't know
11:38 - he's
11:41 - unemployed then we'll have
11:44 - Sandy Sandy will be
11:48 - 27 Sandy is a
11:52 - scientist okay now with our file path
11:55 - the file extension is going to be a CSV
11:57 - file comma separated values within the
12:00 - context of our width block we're going
12:03 - to create a writer object to write to a
12:06 - file writer equals access the CSV module
12:11 - use the writer method of that module
12:14 - then pass in our
12:16 - file writer is an object it provides
12:20 - methods for writing data to a CSV
12:23 - file and then we'll print a confirmation
12:25 - message of CSV file was created here
12:29 - here's the output
12:32 - currently we have a CSV file I'll go to
12:35 - properties to confirm
12:38 - it well we have no output we have to
12:41 - iterate over all the rows in our 2D
12:44 - collection we'll write the following for
12:47 - every Row in our data of
12:53 - employees we'll take our writer object
12:57 - use the right row method
13:00 - and pass in that row that we're
13:01 - iterating
13:02 - over now let's take a
13:08 - look that's better however the writer
13:11 - method gives us a new line after each
13:14 - row so if we would like to prevent that
13:18 - when we open this
13:19 - file I will set the keyword argument of
13:23 - new line equal to no characters an empty
13:28 - string
13:29 - let's take a look
13:32 - again yeah that's much better so this is
13:35 - a CSV file it's made of comma separated
13:40 - values all right everybody so that is an
13:42 - introduction to writing files using
13:44 - python

Cleaned transcript:

hey what's going on everybody in today's video I'm going to show you how we can write and output files using python we'll cover plain text Json and CSV files but we'll start with plain text because it's the easiest suppose we have some data that we would like to Output I'll create a variable of text Data think of a food you like I will output I like pizza for convenience we'll create a variable a file path this can be a relative file file path or an absolute file path within this file path we'll need a name for this file I will name this output then include the file extension this will be a txt file a plain text file this is a relative file path when I generate this file it will be within the same project folder as my main python file to create a file we'll write the following with open function pass in our file path and a character of w to write as file and for now I'll write pass there's a few things going on here with is a statement it's used to wrap a block of code to execute if we open a file the width statement will also close that file when we're done with it so we don't need to manually close files when you open a file it is good practice to close it because if you don't you may run into unexpected Behavior the width statement takes care of that for you the open function will return a file object the first parameter is the file path the second parameter is the mode w Is Right X will also write if this file doesn't exist if it already does exist we'll receive an error A is for append to append a file and R is to read but we'll take care of reading in the next video so we will stick with W to write a file the open function returns the file object the first argument is the file the second argument is the mode you can set these to be keyword arguments if it's easier for you to read when the open function returns a file object for us we're using the as keyword to give it a name as file it's kind of like we're instantiating a file object file equals file file is the name of the file object to write to this file we're going to take take our file object use the builtin write method then pass in our text Data then when this is done I'm going to print a confirmation message I'll use an F string let's say text file I'll add our file path place it within single quotes was created let's see what happens text file output. txt was created and here's that file I like pizza we also have the capability of setting an absolute file path let's say I would like to Output this file to my desktop I would just need that location let me just get the location from one of these folders by going to properties I will copy this location this is the location to my desktop but for you it's probably going to be different then I will paste the absolute file path a backs slash is an escape sequence within a string we either could use double backs slashes or a forward slash now let's see if this outputs to my desktop text file here's the file path was created and here's that file it's a plain text file and it says I like pizza so when working with the file path it can be a relative file path or an absolute file path all right now for our text Data there are different modes as well W is for write if we use x we'll write a file if that file doesn't already exist in this case it does on my desktop we already have a file named output and it's a plain text file so when I run this with the mode of X we get a file exists error that file already exists we could catch this exception so that our program isn't interrupted I will copy the name of this error I will place my code within a tri block we will try this code and catch any exceptions except file exists error if this file already exists let's take a different course of action let's print that file already exists so now when I run this again our program isn't interrupted we receive this message that file already exists if I were to delete that file byebye then run this again well we create a new file text file that absolute file path was created and here it is again now for the mode there's also a a to append any new data will be appended to that file we get I like pizza I like pizza when a pending data if you would like that data on a new line we can add a new line character W will overwrite a file so we're back to the original when a pending either before or after we write our Text data we could add a new line character let's say let's do that before new line plus our text Data here's the output again we're appending not writing I like pizza I like pizza our second sentence is on a new line let's run this a couple times we should have several lines now let's work with a collection let's say we have a list of employees we'll pick some employees at the Crusty Crab so we have Eugene I guess he is technically the manager I don't know if that counts as an employee Squidward SpongeBob and Patrick Patrick worked at the K Crusty Crab in one episode he counts then we'll have to be sure we're writing our employees this is what's going to happen we have a type error write argument must be a string not a list in order for us to write each item within a list we'll need to iterate over it using some sort of loop we can't write a list or any other collection directly here's what we'll change for every employee in our collection of employees we're iterating over something that is iterable we will access our file object use the right method then write each employee here's the result we get one long string of each item in this list if you prefer after writing each employee we could add a new line character after and here's the output we get each item in our list on a new line or rather than a new line character we could use a space this would output all the employees but space them out now we'll be outputting a Json file in summary a Json file is made of key value pairs for our data let's say we have a dictionary of employee a dictionary is of key value pairs will have a name of SpongeBob SpongeBob's age will be 30 his job his position is that he is a cook so this is the data I would like to Output I'll keep the file path the same we'll change the file extension tojson we will need the help of the Json module let's let's be sure to import that import Json within our width block we'll make the following change we're going to access our Json module use the dump method the dump method will convert our dictionary to a Json string to Output it so we have to pass in our Json data of employee our file as the second argument then for a confirmation message let's print Jon file was created here's the result Json file at this location was created and here's my Json file I'll go to properties we'll confirm it is a Json file it is and I'll open it here's the result now you could add indentation after each key value pair here's how after our second argument our file we can pass in a keyword argument of indent for each key value Pair by how many spaces do we want to indent each let's say four and let's take a look I think that's more readable we're indenting each key value Pair by four spaces so that is a Json file it's a collection of key value pairs a dictionary or anything that uses key value pairs is a great candidate to be output to to a Json file all right now we're going to work with CSV files CSV means comma separated values CSV files are pretty common with a spreadsheet of data like an Excel spreadsheet we will create a 2d data structure of employees this will be a list of lists let's add four we'll need the help of the CSV module import CSV think of our 2D data structure as a table of rows and columns so for the first row I will add name comma age comma job the second row will have a name of SpongeBob age 30 job cook for the next row we'll have have Patrick Patrick will be 37 what is Patrick's job I don't know he's unemployed then we'll have Sandy Sandy will be 27 Sandy is a scientist okay now with our file path the file extension is going to be a CSV file comma separated values within the context of our width block we're going to create a writer object to write to a file writer equals access the CSV module use the writer method of that module then pass in our file writer is an object it provides methods for writing data to a CSV file and then we'll print a confirmation message of CSV file was created here here's the output currently we have a CSV file I'll go to properties to confirm it well we have no output we have to iterate over all the rows in our 2D collection we'll write the following for every Row in our data of employees we'll take our writer object use the right row method and pass in that row that we're iterating over now let's take a look that's better however the writer method gives us a new line after each row so if we would like to prevent that when we open this file I will set the keyword argument of new line equal to no characters an empty string let's take a look again yeah that's much better so this is a CSV file it's made of comma separated values all right everybody so that is an introduction to writing files using python
