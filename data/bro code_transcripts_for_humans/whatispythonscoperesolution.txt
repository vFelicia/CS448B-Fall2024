With timestamps:

00:00 - hey friends it's me again today I'm
00:02 - going to explain both variable scope and
00:04 - scope resolution variable scope is where
00:07 - a variable is both visible and
00:09 - accessible with scope resolution when
00:11 - we're using a variable there is a
00:13 - certain order known as the legb rule in
00:16 - which we locate that variable local
00:18 - enclosed Global built-in we'll get to
00:22 - this momentarily let's begin with
00:23 - variable scope
00:25 - I have two functions Function One
00:27 - function two within function 1 a equals
00:30 - 1 then we print a within function 2 b
00:34 - equals 2 then we print B if I were to
00:36 - invoke these functions let's invoke
00:39 - Function One
00:40 - then function two
00:43 - we would print one then two variables
00:46 - declared within a function have a local
00:48 - scope variable a is local to function
00:51 - one variable B is local to function two
00:53 - within function one if I were to print B
00:56 - and function 2 if I were to print a
00:59 - we would run into a name error name B is
01:03 - not defined and the same thing would
01:04 - apply with a functions can't see inside
01:07 - of other functions imagine that we're
01:09 - function one this is our house we can
01:12 - see everything that's going on inside of
01:14 - our house but function two is our
01:16 - neighbor's house we can't see what's
01:18 - going on inside of our neighbor's house
01:20 - we have no idea what B is with function
01:23 - 2 function 2 has no idea what a is
01:26 - that's where variable scope comes in
01:28 - it's where a variable is visible and
01:30 - accessible functions can't see inside of
01:33 - other functions but they can see inside
01:34 - of their own function that's why we
01:37 - sometimes pass arguments to functions so
01:39 - that our functions are aware of them
01:41 - using this concept we could create
01:44 - different versions of the same variable
01:45 - let's rename a to be X and B to be X as
01:49 - well
01:50 - then I will print X
01:54 - we have two different versions of x a
01:57 - local version of X found within function
01:59 - one and a local version of X found
02:01 - within function 2. whenever we utilize a
02:04 - variable we will first look to see if
02:06 - there's any local instance of that
02:08 - variable if there isn't we would move to
02:11 - the enclosed scope with it in closed
02:13 - scope one example is when you have a
02:15 - function declared within another
02:17 - function
02:18 - I'm going to place function 2 within
02:20 - function 1. this is allowed in Python
02:23 - this is a more advanced concept we'll
02:25 - cover this more in the future so I'm
02:27 - going to eliminate this print statement
02:29 - let's get rid of function 2.
02:32 - at the end of function one we will
02:34 - invoke function 2.
02:36 - like I said it's pretty complex we won't
02:39 - be using this until much later within
02:41 - function 2 if I was to print X we would
02:44 - use the local version or x equals 2.
02:48 - if I was to eliminate this variable
02:50 - declaration
02:52 - we would use the enclosed version
02:54 - instead where x equals one there's an
02:57 - order of operations use any local
02:59 - variables first then in closed variables
03:01 - we're printing X within function 2.
03:04 - since X wasn't found within the local
03:06 - scope we would use x within the enclosed
03:09 - scope
03:10 - but like I said that's a more advanced
03:12 - topic you should at least be aware of it
03:14 - let's move on to the global scope Global
03:16 - meaning outside of any functions
03:19 - I will eliminate these variable
03:20 - declarations
03:23 - within function 1 we're printing X and
03:25 - within function two we're also printing
03:27 - X I will declare a global version of X
03:30 - where x equals three
03:33 - X is outside of any functions
03:35 - when I run this program
03:37 - we're printing three twice once for
03:40 - function one and once for function two
03:42 - there's no longer a local version of X
03:45 - for both of these functions if there
03:47 - were we would end up using these local
03:49 - versions instead Function One prints one
03:51 - function two prints two
03:53 - if there's no local version as well as
03:56 - no enclosed version we would move on to
03:58 - the global version where x equals three
04:01 - last in our order is built in I think
04:04 - what we'll do though is from math import
04:07 - e e is an exponential constant
04:10 - I'm going to print what e is
04:13 - e is 2.71
04:16 - e is built in I will create a function
04:18 - to print e Define
04:21 - Function One
04:23 - all I'm doing is printing e then we
04:26 - should invoke it
04:27 - invoke Function One
04:30 - if I was to set e to be a different
04:32 - value
04:33 - like three what we're doing technically
04:35 - is creating two different versions of e
04:38 - variables can share the same name as
04:40 - long as they're within a different scope
04:42 - we have a built-in version of e and a
04:45 - global version of e if I was to print e
04:47 - now it would print my Global version
04:50 - because using the legb order we would
04:53 - first look for any local version of e
04:55 - then enclosed version then Global which
04:59 - we do have one of then lastly built in
05:02 - all right everybody so in conclusion
05:04 - variable scope is just where a variable
05:06 - is both visible and accessible python
05:09 - has a scope resolution order legb if
05:12 - we're using a variable we will first
05:14 - look in the local scope for that
05:16 - variable if we don't find that variable
05:17 - in the local scope we will move over to
05:20 - an enclosed scope then Global then built
05:23 - in we will have more practice with this
05:25 - in the future and well everybody that is
05:27 - both variable scope and scope resolution
05:29 - in Python

Cleaned transcript:

hey friends it's me again today I'm going to explain both variable scope and scope resolution variable scope is where a variable is both visible and accessible with scope resolution when we're using a variable there is a certain order known as the legb rule in which we locate that variable local enclosed Global builtin we'll get to this momentarily let's begin with variable scope I have two functions Function One function two within function 1 a equals 1 then we print a within function 2 b equals 2 then we print B if I were to invoke these functions let's invoke Function One then function two we would print one then two variables declared within a function have a local scope variable a is local to function one variable B is local to function two within function one if I were to print B and function 2 if I were to print a we would run into a name error name B is not defined and the same thing would apply with a functions can't see inside of other functions imagine that we're function one this is our house we can see everything that's going on inside of our house but function two is our neighbor's house we can't see what's going on inside of our neighbor's house we have no idea what B is with function 2 function 2 has no idea what a is that's where variable scope comes in it's where a variable is visible and accessible functions can't see inside of other functions but they can see inside of their own function that's why we sometimes pass arguments to functions so that our functions are aware of them using this concept we could create different versions of the same variable let's rename a to be X and B to be X as well then I will print X we have two different versions of x a local version of X found within function one and a local version of X found within function 2. whenever we utilize a variable we will first look to see if there's any local instance of that variable if there isn't we would move to the enclosed scope with it in closed scope one example is when you have a function declared within another function I'm going to place function 2 within function 1. this is allowed in Python this is a more advanced concept we'll cover this more in the future so I'm going to eliminate this print statement let's get rid of function 2. at the end of function one we will invoke function 2. like I said it's pretty complex we won't be using this until much later within function 2 if I was to print X we would use the local version or x equals 2. if I was to eliminate this variable declaration we would use the enclosed version instead where x equals one there's an order of operations use any local variables first then in closed variables we're printing X within function 2. since X wasn't found within the local scope we would use x within the enclosed scope but like I said that's a more advanced topic you should at least be aware of it let's move on to the global scope Global meaning outside of any functions I will eliminate these variable declarations within function 1 we're printing X and within function two we're also printing X I will declare a global version of X where x equals three X is outside of any functions when I run this program we're printing three twice once for function one and once for function two there's no longer a local version of X for both of these functions if there were we would end up using these local versions instead Function One prints one function two prints two if there's no local version as well as no enclosed version we would move on to the global version where x equals three last in our order is built in I think what we'll do though is from math import e e is an exponential constant I'm going to print what e is e is 2.71 e is built in I will create a function to print e Define Function One all I'm doing is printing e then we should invoke it invoke Function One if I was to set e to be a different value like three what we're doing technically is creating two different versions of e variables can share the same name as long as they're within a different scope we have a builtin version of e and a global version of e if I was to print e now it would print my Global version because using the legb order we would first look for any local version of e then enclosed version then Global which we do have one of then lastly built in all right everybody so in conclusion variable scope is just where a variable is both visible and accessible python has a scope resolution order legb if we're using a variable we will first look in the local scope for that variable if we don't find that variable in the local scope we will move over to an enclosed scope then Global then built in we will have more practice with this in the future and well everybody that is both variable scope and scope resolution in Python
