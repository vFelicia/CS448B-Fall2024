With timestamps:

00:00 - hey what's going on everybody it's your
00:01 - bro hope you're doing well and in this
00:03 - video I'm going to show you how we can
00:04 - start writing SQL using the MySQL
00:07 - workbench so sit back relax and enjoy
00:10 - the show
00:12 - all right let's get started everybody
00:13 - SQL it's an acronym meaning structured
00:17 - query language SQL is used to create
00:20 - retrieve update and delete data from a
00:23 - database suppose we own a business like
00:25 - the Krusty Krab from SpongeBob if we had
00:27 - to manually track all of the
00:29 - transactions by pen and paper well that
00:32 - would be a lot of extra work if we had a
00:34 - database we could keep track of these
00:36 - records electronically and save
00:37 - ourselves a lot of trouble right there's
00:39 - two types of databases I'll discuss
00:41 - relational and non-relational a table in
00:45 - a relational database it resembles an
00:47 - Excel spreadsheet there's rows and
00:49 - columns tables within a relational
00:51 - database can form well relationships
00:53 - with one another and that is done by
00:55 - this concept of keys which I'll explain
00:57 - in a further topic then there's
00:59 - non-relational databases that's where
01:02 - our data is organized in any format but
01:05 - a table this could include Json files
01:07 - key value pairs graph data structures
01:10 - entities of that nature to utilize data
01:13 - in a relational database we would use
01:15 - SQL then with a non-relational database
01:18 - we would use a different language named
01:21 - nosql meaning not only SQL but since
01:25 - this is an SQL series we will be working
01:27 - with SQL and relational databases not
01:30 - non-relational databases to write SQL
01:33 - statements we would need the help of a
01:35 - special piece of software known as a
01:37 - database management system people
01:39 - shorten this to Simply
01:41 - dbms it's a workspace for us to write
01:44 - SQL statements and generally just work
01:46 - with our database it'll make our lives
01:48 - easier there are different dbms systems
01:51 - you can use one of which is MySQL
01:54 - Microsoft SQL Server Oracle and postgres
01:57 - SQL but there's still many more out
01:59 - there each of these database Management
02:01 - Systems all use SQL but there's subtle
02:04 - nuances between these syntax of each
02:06 - database management system if you're
02:08 - familiar with one database management
02:10 - system transitioning to another will
02:12 - take little to no effort at all in this
02:14 - series we will be working with the mySQL
02:17 - database management system and I'll show
02:19 - you how to download that for both
02:20 - Windows and Mac OS
02:23 - hey everybody in this topic I'm going to
02:25 - explain how we can download MySQL using
02:27 - the Windows operating system first of
02:30 - all head to this website mysql.com then
02:33 - go to the downloads tab
02:36 - scroll down look for MySQL Community
02:38 - downloads we'll click on that
02:43 - click on MySQL installer for Windows
02:48 - make sure that we have our Windows
02:50 - operating system selected
02:53 - then download the first installer
02:58 - no thanks just start my download
03:03 - we will open this download once it's
03:05 - complete
03:09 - there are various setup types depending
03:11 - on what packages you need for this
03:13 - series all we need is the server and the
03:16 - workbench we'll select the custom radio
03:19 - button
03:20 - click next
03:22 - we will need the most recent MySQL
03:24 - server
03:28 - add that to products to be installed
03:32 - open applications go to mySQL workbench
03:36 - we will add the most recent workbench
03:40 - we can close out of that there is a
03:42 - shell if you're interested in using that
03:44 - but I will be sticking with the
03:45 - workbench in this series once we have
03:47 - our server and our workbench I will
03:49 - click next
03:51 - then execute
03:54 - looks like there's an error downloading
03:56 - the workbench I'm going to try again
03:58 - and it worked this time for some reason
04:00 - let's click next
04:03 - execute
04:04 - give it some time once the installation
04:07 - status for the server and the workbench
04:09 - is complete we can click on next
04:12 - next
04:14 - I'll keep these default configurations
04:18 - next
04:20 - use strong password encryption for
04:22 - authentication let's click next
04:26 - here we're going to set the root
04:27 - password to access the server think of
04:30 - some password you would like I'm just
04:32 - going to set mine to be password I'll
04:34 - keep it simple
04:38 - yeah of course the password strength is
04:40 - weak you can add user accounts but
04:42 - that'll be outside the scope of this
04:44 - series
04:45 - click next
04:47 - you can start the MySQL server at system
04:49 - startup if you would like I'll keep that
04:52 - on
04:52 - click next
04:55 - then execute
04:57 - then finish
04:59 - then next
05:02 - yeah we might as well start the MySQL
05:04 - workbench after setup
05:07 - if this window doesn't pop up you can
05:09 - easily just search for it just look for
05:11 - MySQL workbench
05:14 - now we should have a local instance
05:16 - we can click on this to access our
05:19 - server let's pretend that this wasn't
05:20 - here I'm going to right click delete
05:22 - connection
05:25 - if you need to set up a connection hit
05:26 - this plus button
05:28 - we'll need a connection name I'll name
05:30 - this Local Host connection method should
05:34 - be standard TCP IP
05:37 - the host name is
05:39 - 127.0.0.1 at Port 3306
05:44 - then press ok
05:47 - so now that we have our connection set
05:49 - up we can click on it type in the
05:51 - password you set for the server mine was
05:53 - simply password
05:56 - you could save the password if you want
05:58 - I might as well
06:00 - then okay
06:02 - and here we are within the MySQL
06:04 - workbench
06:06 - all right everybody in this topic I'm
06:08 - going to explain how we can download
06:09 - MySQL using the Mac operating system
06:13 - first head to this URL mysql.com
06:17 - we will go to the downloads tab
06:22 - scroll down look for MySQL Community
06:25 - downloads
06:27 - we'll need both the server and the
06:29 - workbench but let's start with the
06:30 - server click on this file
06:34 - Mac OS 12 DMG archive click the download
06:38 - button
06:40 - click on this link no thanks just start
06:42 - my download
06:48 - when this DMG archive is finished
06:50 - downloading we can double click on it
06:53 - just give it a second
07:00 - double click on the DMG archive
07:04 - allow
07:07 - click continue
07:11 - you can read the license agreement I'm
07:13 - going to pretend I did hit continue
07:16 - install
07:19 - type in your computer's password if this
07:21 - prompt comes up
07:29 - use strong password encryption hit next
07:33 - then we'll need a password for our
07:34 - server type in whatever password you
07:37 - would like to keep it simple for this
07:39 - lesson I'm just going to set my password
07:40 - to be well password
07:45 - by checking this box MySQL server will
07:48 - start once the installation is complete
07:50 - you might as well keep this checked but
07:52 - for demonstration purposes I'm going to
07:54 - show you how to start the server
07:55 - manually
08:01 - then close
08:04 - I'll go ahead and move the installer to
08:06 - the trash bin
08:07 - we have the server downloaded next we
08:09 - need to download the workbench
08:12 - again head to mysql.com
08:15 - go to downloads
08:18 - scroll down to mySQL Community downloads
08:23 - click on MySQL workbench
08:27 - then hit the blue download button
08:32 - no thanks just start my download
08:39 - then we can double click on this DMG
08:41 - archive when it's finished downloading
08:45 - so double click
08:48 - drag and drop the workbench icon into
08:51 - your applications folder
08:54 - before we access the workbench let's be
08:57 - sure that the MySQL server is running
09:00 - click on the top left Apple logo
09:03 - go to system preferences at the bottom
09:06 - left corner look for MySQL
09:09 - click on it
09:11 - then start MySQL server if it's not
09:14 - started already and you can check this
09:16 - checkbox so that your computer starts up
09:18 - with it running
09:20 - all right you may need to type in your
09:22 - password
09:25 - the server is now running
09:29 - to run the workbench we can go to finder
09:33 - then applications
09:35 - look for the MySQL workbench icon
09:40 - double click on it
09:43 - and here we are within the MySQL
09:45 - workbench
09:46 - to access the server you can click on
09:49 - this local instance connection then type
09:51 - in the password that you originally set
09:53 - for the server
09:54 - but if you're missing this connection
09:56 - you can hit the plus button
09:58 - then create a new connection name I'll
10:00 - name this Local Host
10:03 - use standard tcpip for the connection
10:05 - method
10:06 - hostname should be
10:09 - 127.0.0.1 and Port 3306 then press ok
10:13 - but I already have my connection set up
10:16 - click on your connection type in the
10:18 - password you set for the server
10:22 - then press OK and here we are within
10:25 - MySQL workbench
10:29 - hey everybody in this topic I'm going to
10:32 - show you how we can create alter and
10:34 - drop a database what is a database
10:36 - exactly think of it as a folder it acts
10:39 - as a container tables on the other hand
10:41 - would be the files found within the
10:44 - folder in this topic I'm going to show
10:46 - you how we can create the database
10:47 - itself but we won't be working with any
10:50 - tables until the next topic we'll need
10:53 - to begin by heading to our query window
10:55 - which is this large window right here
10:56 - we're going to write a statement to
10:58 - create a database we will type create
11:01 - there is no case sensitivity in MySQL
11:04 - these keywords such as create they can
11:07 - be all uppercase
11:08 - just the first letter could be capital
11:10 - or you could do all lowercase
11:13 - with the keywords I like to make them
11:15 - all uppercase but that's just me create
11:18 - database
11:20 - and then we'll need a unique database
11:22 - name what about my DB then it's
11:26 - important with all SQL statements to end
11:28 - each statement with a semicolon it's
11:31 - like the period at the end of a sentence
11:33 - that's how we know that the statement is
11:35 - complete so you'll need these three
11:37 - words create database then a database
11:40 - name we just named our database mydb hit
11:43 - this lightning bolt button to execute
11:45 - this statement
11:48 - and in my output window unfortunately I
11:50 - can't increase the font size but I can
11:52 - zoom in this action was successful
11:55 - we have created database mydb if you
11:58 - head to your schemas tab then hit the
12:00 - refresh button you should see a database
12:03 - in here named mydb
12:06 - there's also a database for sys sys is
12:09 - the internal database that MySQL uses
12:12 - we'll want to be sure that we're using
12:14 - the database that we just created to use
12:16 - a database we can either right click on
12:18 - the database
12:19 - then click on set as default schema or
12:22 - you could use a statement
12:24 - use
12:27 - then the name of the database my DB
12:29 - semicolon
12:31 - execute the statement
12:33 - we are now using my database to drop a
12:36 - database type drop
12:39 - database
12:41 - then the name of the database
12:43 - and our database is gone unfortunately
12:46 - we do need a database for this series so
12:48 - let's go ahead and recreate our database
12:51 - create database mydb
12:55 - refresh
12:57 - then just to be sure we're using this
12:59 - database we can either use that keyword
13:01 - use
13:02 - or you can right click on the database
13:04 - and set as default schema
13:06 - all right so we can create use and drop
13:09 - a database how about alter there's two
13:12 - features for beginners I'll mention
13:13 - setting a database to read only the
13:16 - other is enabling encryption let's set
13:18 - our database to be read only type alter
13:22 - database
13:24 - the name of the database
13:27 - read
13:28 - only equals one this statement would
13:32 - make our database read only
13:34 - if a database is in read-only mode we
13:37 - can't make any modifications to it but
13:39 - we can still access the data Within
13:42 - let's attempt to drop our database
13:45 - drop
13:46 - database my DB
13:50 - then we have a red X right here that
13:52 - means we could not complete this action
13:54 - drop database mydb
13:57 - schema my DB is in read-only mode to
14:00 - disable read-only mode you would set
14:02 - read only equal to zero
14:07 - now we would be able to drop this
14:08 - database alright everybody that is how
14:11 - to create use drop and alter a database
14:14 - think of a database as just a folder a
14:17 - folder can hold files the files will be
14:20 - the tables that we'll create which will
14:22 - store within the database and in the
14:24 - next topic I'll show you how we can
14:25 - create some tables
14:29 - hey welcome back everybody in this video
14:31 - I'm going to show you how we can make
14:33 - some tables in MySQL a table in a
14:36 - relational database they consist of rows
14:39 - and columns kind of like an Excel
14:41 - spreadsheet in this topic we're going to
14:43 - create the table and the columns but
14:45 - we'll be populating the rows in the next
14:47 - video to create a table you'll type
14:50 - create
14:51 - table than the name of the table I'll
14:54 - create a table named employees
14:57 - then add a set of parentheses semicolon
14:59 - at the end within the set of parentheses
15:02 - we will list the columns
15:05 - for employees let's have an employee ID
15:09 - comma
15:10 - each column is separated with a comma
15:13 - then a first name
15:16 - last name
15:20 - how about hourly pay that'd be good
15:23 - higher date which date were they hired
15:26 - there's one thing that's missing after
15:29 - each column we need to set the data type
15:31 - of what we're storing within each column
15:34 - exactly is the data going to be whole
15:36 - integers decimals text a timestamp those
15:40 - are data types an employee ID that could
15:43 - be a whole integer the data type will be
15:46 - int add int after the column name
15:49 - a first name that's a series of
15:51 - characters the data type for some text
15:54 - would be VAR Char then within
15:57 - parentheses the maximum amount of
16:00 - characters I think 50 characters is
16:02 - enough for a first name
16:04 - last name
16:06 - varchar
16:07 - 50 is good
16:09 - hourly pay maybe our hourly pay is in
16:13 - dollars and cents we'll need a decimal
16:15 - portion there is a data type
16:18 - that is decimal add a set of parentheses
16:21 - we'll add the maximum amount of digits
16:24 - for our decimal
16:26 - I think 5 should be good
16:28 - then a Precision two for two decimal
16:31 - places
16:32 - the reason that I set the maximum digits
16:34 - of my hourly pay to be five is that I
16:37 - don't anticipate anybody's hourly pay
16:39 - being over
16:41 - 999.99 per hour that's pretty absurd I
16:44 - think five is enough then we have higher
16:47 - date
16:48 - there is a data type which is date if
16:50 - you need to work with dates otherwise
16:52 - there's date time if you need to include
16:54 - the time just the date is fine let's
16:57 - execute the script
17:00 - we have created our table employees if I
17:03 - were to refresh my schemas window
17:05 - underneath tables we have our employees
17:08 - table
17:09 - now I'll show you how we can select a
17:11 - table
17:12 - if you need to select your table you can
17:14 - type select
17:16 - asterisk from the name of the table
17:20 - employees
17:22 - let's take a look
17:24 - here's our table so far there's no rows
17:27 - but there are columns we have employee
17:30 - ID first name last name hourly pay and
17:32 - hire date if you need to rename a table
17:34 - you could type
17:36 - rename
17:38 - table the original name
17:41 - employees
17:43 - two whatever the new name is
17:45 - perhaps workers let's try that
17:49 - rename table employees to workers was
17:52 - successful if I refresh my schemas
17:54 - window
17:55 - the table employees is now known as
17:58 - workers but I think that's stupid let's
18:00 - go back and change it
18:02 - rename table workers to employees
18:07 - to drop a table I discussed this earlier
18:10 - you would type drop table the name of
18:13 - the table I don't want to drop this so
18:16 - I'm not going to execute the statement
18:18 - but that's how you would drop a table
18:20 - drop table the name of the table
18:23 - if you need to alter a table
18:25 - there is the alter keyword
18:27 - let's add a phone number
18:30 - alter
18:32 - table
18:34 - employees
18:36 - I'm going to write this next part of the
18:38 - statement on a new line
18:40 - what do we want to add uh what about a
18:43 - phone number
18:44 - add
18:46 - phone
18:47 - number
18:50 - then we'll need to list the data type of
18:52 - this column
18:53 - varchar is good
18:56 - Max size of 15 characters
19:00 - then we will end this statement
19:04 - execute the script all right we have
19:06 - altered our table
19:07 - let's take a look at our table select
19:10 - asterisk asterisk means all I don't know
19:12 - if I explained that select all from
19:16 - employees
19:18 - we have employee ID first name last name
19:20 - hourly pay higher date
19:23 - then our column phone number
19:25 - let's rename phone number and change it
19:27 - to something else
19:29 - we will again use the altar keyword
19:31 - alter table
19:34 - employees
19:37 - rename
19:39 - column
19:42 - phone number
19:44 - to let's say email
19:51 - okay then let's take a look again select
19:53 - all from employees
19:58 - yeah employee ID first name last name
20:00 - hourly pay higher date then email
20:02 - however the data type has not changed
20:05 - for email
20:06 - I'm going to refresh my schemas then
20:08 - underneath information underneath
20:10 - employees our email column has a max
20:13 - size of 15 characters let's change that
20:17 - alter
20:18 - table
20:20 - employees
20:23 - modify
20:25 - column
20:27 - email then the new data type varchar
20:33 - maybe a hundred characters for an email
20:37 - let's execute this statement
20:40 - refresh our schemas yeah now our email
20:43 - column has a size of 100 characters
20:46 - maybe we need to change the position of
20:48 - our email column if you need to move
20:51 - columns around this is how you can do so
20:53 - let's move our email column so it's
20:55 - after our last name column
20:58 - to do that we would type alter table the
21:01 - name of the table
21:03 - modify the name of the column to be
21:06 - moved
21:07 - email in this case
21:08 - then the data type
21:12 - this email column has a data type of
21:14 - varchar100
21:16 - then after then the name of the column
21:19 - we would like our email column to follow
21:21 - I need my email column to come after my
21:25 - last name column I will type after
21:28 - last name
21:30 - then afterwards I might as well just
21:31 - display everything select all from
21:34 - employees you can write more than one
21:37 - SQL statement
21:39 - here we are employee ID first name last
21:42 - name email hourly pay higher date
21:45 - if you're modifying a column and need it
21:47 - to be first
21:48 - you could just say
21:50 - first
21:54 - email employee ID first name last name
21:56 - hourly pay higher date you can use the
21:59 - after keyword then a column or first if
22:02 - you need the column to be first
22:04 - now to drop a column you would type
22:06 - alter table employees
22:10 - drop
22:13 - column
22:14 - the name of the column to be dropped
22:16 - email
22:18 - our email column is no longer there all
22:22 - right everybody that's how we can create
22:23 - a table and work with the columns in the
22:26 - next video we're either going to talk
22:28 - about data types or learn about
22:30 - inserting rows into our tables I haven't
22:32 - decided yet but we'll probably cover one
22:35 - of those two
22:38 - hey everybody in this topic I'm going to
22:40 - show you how we can insert rows into a
22:43 - table we have a table named employees I
22:45 - will select everything from my table
22:47 - employees
22:51 - here are the columns we have an employee
22:54 - ID first name last name hourly pay and
22:57 - higher date to insert a row into a table
22:59 - we would type insert into the name of
23:04 - the table
23:05 - followed by values parentheses semicolon
23:10 - between this set of parentheses we will
23:13 - add all of the data for a row we will
23:16 - follow this order beginning with
23:18 - employee ID first name last name so on
23:20 - and so forth but we do have to pay
23:22 - attention to the data types too each
23:25 - piece of data will be separated with a
23:27 - comma let's begin with an employee ID
23:29 - the first employee will be Mr Krabs he's
23:33 - the first employee I'll give him an
23:34 - employee ID of one then we'll need a
23:37 - first name I'll put that within quotes
23:39 - because the data type of our first name
23:41 - is varchar basically speaking that's
23:44 - text
23:47 - Mr crab's first name is Eugene according
23:50 - to SpongeBob lore
23:51 - then we have a last name
23:55 - last name crabs
23:57 - hourly pay this is a decimal
24:00 - Mr Krabs hourly pay will be
24:03 - 25.50 I'm just making up numbers here
24:07 - higher date here's the format for a date
24:10 - with anesthetic quotes we will list the
24:12 - year followed by the month then the day
24:15 - I'll set Mr Krabs hired date to be
24:18 - January 2nd 2023
24:21 - now we can execute these statements
24:25 - yeah here we go here's the first row
24:28 - employee ID one
24:30 - first name Eugene last name crabs hourly
24:33 - pay 2550 higher date January 2nd 2023 it
24:37 - can be somewhat tedious to manually
24:39 - insert each row one statement at a time
24:42 - let's insert multiple rows at once to do
24:46 - that after my set of parentheses
24:49 - I will add another set of parentheses
24:51 - each separated with a comma depending on
24:54 - how many rows I would like to enter so I
24:56 - have four employees I would like to
24:57 - enter
24:58 - I will add four sets of parentheses each
25:00 - separated with the combo
25:02 - and let me just do some formatting to
25:04 - make this look pretty
25:08 - each set of parentheses corresponds to a
25:10 - new row so let's enter all the data that
25:13 - we'll need for this table
25:14 - employee ID number two will be
25:19 - Squidward
25:23 - tentacles
25:26 - Squidward's hourly pay will be maybe a
25:29 - solid fifteen dollars
25:32 - Squidward's higher date
25:34 - the year 2023 January
25:37 - I think January 3rd is good
25:39 - all right so that is the next row let's
25:41 - work on employee number three
25:44 - employee number three will be a
25:46 - SpongeBob
25:48 - last name will be
25:50 - Square Pants
25:54 - SpongeBob's hourly pay will be 12.50
25:58 - SpongeBob's higher date is the year 2023
26:01 - January 4th
26:05 - employee for
26:06 - will be Patrick
26:11 - star
26:12 - Patrick's hourly pay will be 12.50 as
26:15 - well
26:17 - higher day
26:19 - 2023 January
26:22 - 5th
26:23 - okay last employee
26:26 - employee ID number five
26:28 - first name Sandy
26:31 - last name
26:33 - cheeks
26:35 - Sandy's hourly pay will be 17.25 she'll
26:39 - be an assistant manager
26:41 - Sandy's start date will be the year 2023
26:45 - January 6th we can execute this
26:49 - statement to insert multiple rows all at
26:51 - once
26:53 - yep here's our table
26:55 - we have five rows each corresponding to
26:58 - a different employee we have Mr Krabs
27:00 - Squidward SpongeBob Patrick and Sandy
27:04 - I'm going to demonstrate what happens
27:06 - when we attempt to insert a row with
27:08 - missing data
27:13 - I will insert employee number six
27:16 - their first name is Sheldon
27:19 - last name Plankton but we will not
27:23 - insert an hourly rate of pay or a higher
27:25 - date here's what will happen
27:28 - so we have an error
27:30 - column count doesn't match the value at
27:33 - count at Row one we're missing data for
27:35 - our hourly pay and higher date you could
27:38 - insert just select columns that is done
27:41 - by adding after the name of the table
27:43 - add a set of parentheses then name the
27:46 - columns you would like to insert data
27:47 - into
27:48 - all we're adding is an employee ID
27:52 - first name
27:55 - then last name
28:00 - okay now we've inserted a new employee
28:02 - but there is data missing and that's
28:04 - okay we plan on hiring Mr Plankton but
28:07 - we have not yet negotiated an hourly pay
28:09 - or start date we still need to run a
28:11 - background check on him but we want to
28:13 - add him to the system at least so if you
28:15 - ever need to insert data into a row but
28:18 - you need to Omit certain columns you can
28:21 - simply just list the name of the columns
28:23 - you would like to sort data into
28:25 - all right everybody that is how to
28:27 - insert rows into a table in MySQL
28:32 - hey everybody in this video I'm going to
28:34 - show you how we can select data from a
28:36 - table to query all of the data from the
28:38 - table we would type select asterisk
28:41 - meaning all from the name of the table
28:44 - in my case we have table employees this
28:48 - statement select all from employees will
28:51 - give me all columns and all rows but
28:54 - sometimes you may not want all of the
28:56 - data here's a scenario your boss gives
28:58 - you a task of retrieving the full name
29:01 - of every employee well we don't need
29:02 - employee ID hourly pay or higher date
29:05 - for that right we just need a list of
29:07 - the first and last names of our
29:08 - employees table in place of the asterisk
29:11 - meaning all we can select specific
29:13 - columns such as first name and last name
29:20 - we have all of the first and last names
29:22 - from our employees table you can change
29:25 - up the order of the columns too this
29:27 - time I would like last name
29:29 - then first name
29:32 - with our query this returned all of the
29:35 - last and first names of all the
29:37 - employees point being you can select
29:39 - specific columns depending on what
29:40 - you're looking for or everything with
29:43 - the asterisk there is a clause known as
29:46 - the where Clause if we're looking for
29:48 - something specific
29:50 - let's add where
29:52 - then what are we looking for exactly we
29:54 - can write some criteria let's select all
29:57 - from employees where employee ID equals
30:02 - one then end your statement with a
30:04 - semicolon
30:06 - this will give us a specific employee
30:08 - the employee that has an ID of one if I
30:11 - set employee ID to B2 that would give us
30:14 - Squidward
30:16 - three would be SpongeBob 4. Patrick I
30:20 - think you get the idea here's an
30:22 - exercise let's find all the data from
30:25 - employees where the first name equals
30:28 - SpongeBob
30:29 - where first name equals
30:33 - Sponge Bob
30:35 - this query will return employee ID3 the
30:39 - first name last name hourly pay and
30:41 - higher date here's another example let's
30:44 - find all employees that have an hourly
30:46 - pay greater than or equal to 15. our
30:49 - criteria will be where
30:52 - hourly
30:53 - pay
30:54 - is greater than we'll use the greater
30:57 - than operator
30:58 - or equal to
31:00 - 15.
31:02 - this returns three employees
31:05 - Mr Krabs Squidward and Sandy
31:08 - all three of them have an hourly pay of
31:11 - 15 per hour or greater it is possible
31:14 - your query can return multiple results
31:16 - let's find anybody that has a higher
31:20 - date
31:21 - less than or equal to
31:25 - perhaps the year 2023
31:28 - January 3rd
31:32 - this query returns two results
31:34 - Eugene Krabs and Squidward Tentacles
31:36 - they both match this criteria and in
31:39 - this case we use the less than or equals
31:41 - to operator another operator you should
31:43 - know about is the not comparison
31:46 - operator it's an exclamation point and
31:48 - an equal sign we will check if something
31:50 - is not equal
31:53 - let's find where employee ID does not
31:58 - equal one
32:01 - who are all the employees that have an
32:03 - ID not equal to one
32:06 - that gives a Squidward SpongeBob Patrick
32:09 - Sandy and Plankton
32:11 - on the other hand if I set this to one
32:13 - that would give us Mr Krabs that is the
32:16 - not comparison operator if you need to
32:18 - check if something is not equal
32:20 - in this next example let's pretend that
32:23 - we're human resources we need to find
32:25 - any employees that do not have a higher
32:27 - date and then begin the paperwork for
32:29 - them currently Plankton's hourly pay and
32:32 - higher date are both set to null null
32:35 - meaning no value
32:36 - in place of saying you know higher date
32:40 - equals null in place of using the equal
32:43 - sign we would type is select all from
32:47 - employees where higher date is null
32:50 - that would return Sheldon Plankton
32:53 - because his higher date is null
32:56 - not equals null that doesn't work
32:59 - it would be is null
33:03 - you could even say is not null
33:06 - that would return every employee that
33:08 - does have a higher date all right
33:10 - everybody so that is how to query data
33:12 - from a table select whatever you're
33:14 - looking for it can be everything
33:16 - or specific columns
33:19 - from a table of your choosing where the
33:23 - results equal some criteria that you set
33:25 - it really depends on what you're looking
33:26 - for and that is how to query data from a
33:29 - table
33:32 - hey everybody in this video I'm going to
33:35 - show you how we can update and delete
33:37 - data from a table
33:38 - in my example we have a table of
33:40 - employees however Sheldon Plankton is
33:43 - missing some information and hourly pay
33:46 - and a higher date let's update those
33:48 - fields to update some data in a table we
33:51 - would use the update keyword
33:54 - the name of the table
33:56 - employees in my example
33:59 - then set which column would we like to
34:02 - interact with first let's interact with
34:04 - hourly pay set
34:07 - hourly
34:08 - pay
34:10 - let's pay Plankton 10 and 25 cents per
34:14 - hour we should probably add a where
34:16 - Clause I need to specifically select
34:20 - Plankton where
34:22 - let's select his employee ID where
34:26 - employee ID equals six
34:31 - then semicolon 10 the statement
34:33 - you could also select Plankton by his
34:36 - first name or last name as well when I
34:39 - execute the script
34:42 - Plankton's hourly pay is now 10.25 cents
34:46 - per hour
34:47 - to update multiple columns you can
34:50 - change more than one field at once after
34:53 - your first change you can add a comma
34:57 - then change another field
34:59 - let's change Plankton's higher date to
35:01 - be the following higher date equals
35:07 - 10
35:08 - 23-0 Dash
35:11 - zero seven
35:12 - I'll make his hourly pay 10.50 I'm
35:14 - feeling generous
35:19 - here we are Plankton's hourly pay is now
35:21 - ten dollars fifty cents his higher date
35:24 - is January 7th 2023.
35:27 - to set a field to null meaning no value
35:31 - you would just say equals null for
35:34 - example let's take Plankton's higher
35:36 - date
35:37 - set the higher date equal to null
35:43 - Plankton's higher date is now null
35:46 - so maybe we're gonna fire him or
35:47 - something
35:48 - in this next example I'll give you a
35:50 - demonstration but you don't want to
35:52 - follow along to update all of the rows
35:55 - within a column you would exclude the
35:57 - where clause
35:59 - if I were to set hourly pay equal to
36:02 - 10.25 that would affect all of the rows
36:05 - after executing this statement
36:08 - the hourly pay for everybody is now
36:11 - 10.25. that's an example of how you
36:14 - could set a column to be one consistent
36:16 - value
36:17 - to delete a row from a table
36:20 - you would type delete
36:23 - from the name of the table
36:25 - now don't write just the statement it
36:28 - will delete all rows in your table
36:30 - here's an example do not do this I will
36:34 - delete from employees
36:36 - there my whole table is gone do not do
36:39 - this be sure to add a where Clause when
36:41 - deleting from a table otherwise this
36:43 - will delete all your rows where
36:46 - employee ID
36:48 - equals six
36:53 - yep and Plankton is no longer there
36:55 - all right everybody that is a super
36:57 - quick video on how to update and delete
37:00 - data from a table
37:03 - hey everybody in this topic I'm going to
37:05 - explain Auto commit commit and rollback
37:08 - Auto commit is a mode by default Auto
37:11 - commit is set to on whenever you execute
37:13 - a transaction within MySQL that
37:15 - transaction is saved what if we were to
37:18 - make a transaction and we need to undo
37:20 - that transaction for example what if we
37:22 - accidentally delete all of the rows of
37:24 - this table don't do what I do but I'll
37:26 - give you a demonstration I accidentally
37:28 - type in delete from employees but I
37:32 - forget to add a where Clause well all my
37:35 - rows are now gone how do I undo these
37:37 - changes well what we're going to do is
37:40 - set auto commit
37:43 - to equal off
37:47 - with this setting set to off our
37:49 - transactions will not save automatically
37:51 - we would need to manually save each
37:54 - transaction it creates a save point so
37:57 - to say
37:59 - I'm going to create a save point by
38:01 - typing commit
38:03 - then execute now I'm going to select my
38:07 - table select all from the name of my
38:10 - table
38:13 - then I'm going to go ahead and delete
38:14 - all the rows
38:17 - delete from employees
38:21 - oh shoot but I forgot to add a where
38:23 - Clause my whole table is gone now
38:25 - luckily we created a safe point with
38:28 - that commit statement
38:30 - to undo these changes
38:32 - I can execute the roll back statement
38:37 - this will restore my current transaction
38:39 - back to the previous save point where we
38:42 - used commit now if I were to select all
38:45 - from the name of my table
38:49 - our table is back to what it previously
38:52 - was
38:52 - and again to save any changes
38:55 - let's say I delete my whole table again
38:57 - delete from
38:59 - employees
39:01 - if I want to save this change I would
39:04 - commit
39:08 - then again I will select my table
39:14 - and that last change is now saved my
39:16 - whole table is gone
39:18 - so yeah that is auto commit commit and
39:21 - roll back by default Auto commit is set
39:23 - to be on any transactions after
39:26 - executing are saved if that mode is set
39:28 - to off you can commit any changes
39:30 - manually to undo any changes use that
39:33 - rollback statement so yeah that is auto
39:35 - commit commit and roll back in MySQL
39:40 - hey everybody in this topic I have a
39:43 - super quick video on getting the current
39:45 - date and time in MySQL let's create a
39:48 - temporary table at the end of this topic
39:49 - we'll delete it
39:51 - create table I'll name this table test
39:55 - we will have three columns
39:58 - the current date I'll name the column my
40:01 - date the data type is date
40:05 - my time the data type is time
40:09 - then we'll combine both
40:11 - my
40:13 - date time the data type is date time
40:17 - let's create this table it was created
40:19 - successfully then I will select all from
40:22 - our table test
40:25 - we have three columns
40:26 - a date a time and a date time which
40:29 - combines both so how do we get the
40:31 - current date maybe we need to create a
40:33 - timestamp of when some event happened
40:35 - maybe a higher date for our employees so
40:38 - I'm going to insert
40:40 - into the name of my table test
40:44 - some values
40:47 - for the current date there is a built-in
40:50 - function
40:51 - current underscore date then add a set
40:54 - of parentheses this function will return
40:56 - the current date
40:59 - for the current time there is a current
41:02 - time function add a set of parentheses
41:05 - to the end of that function
41:08 - for the date time you could just say now
41:10 - the net a set of parentheses
41:13 - after inserting this row let's select
41:16 - all from our table test
41:20 - here's the current date of me filming
41:22 - this video October 21st 2022 the time is
41:26 - seven in the morning
41:28 - the current date time is October 21st
41:30 - 2022 7 in the morning a date time would
41:33 - probably be good for some sort of
41:35 - transaction you need to record for the
41:37 - time being I'm going to set the current
41:39 - time to be null as well as the date time
41:42 - to be null now if you were to take your
41:44 - current date then add plus one
41:46 - this part of my statement would refer to
41:49 - tomorrow
41:50 - October 22nd if you were to take your
41:53 - current date minus one that would
41:56 - technically be yesterday October 20th
41:59 - you could do something similar with your
42:01 - time and date time you can add or
42:03 - subtract seconds but I think that's
42:04 - pretty self-explanatory we don't need
42:07 - this test table anymore so we can delete
42:09 - it
42:10 - drop table test
42:13 - and it's gone
42:15 - all right everybody so that was a super
42:17 - quick topic but I thought I needed to
42:19 - cover it that is how to get the current
42:20 - date time and date time in MySQL
42:26 - hey everybody I have a quick video on
42:29 - the unique constraint the unique
42:31 - constraint ensures that all values in a
42:34 - column are all different that's
42:36 - basically it we can add this constraint
42:38 - when we create a table or after let's
42:40 - create a new table
42:42 - create
42:43 - table
42:44 - let's create a table of products what
42:46 - products do we offer
42:50 - we'll list the columns
42:52 - let's add a product ID
42:56 - the data type will be int
42:59 - product name the data type will be
43:03 - varchar maybe 25 characters then a price
43:09 - the data type will be decimal
43:12 - our price will have a Max size of four
43:15 - digits
43:16 - and a Precision of two decimal places
43:19 - to add the unique constraint select a
43:22 - column after the data type add the
43:25 - keyword unique
43:27 - and that's all you have to do with this
43:29 - keyword unique we can't insert any
43:32 - product names that are the same they all
43:34 - have to be well unique let's create this
43:37 - table
43:39 - let's say that you forget the unique
43:41 - keyword then you create the table what
43:44 - you could do instead
43:46 - is type alter table the name of the
43:50 - table
43:51 - products which we just created
43:54 - add
43:55 - constraint
43:58 - unique
44:01 - the name of the column within
44:03 - parentheses
44:04 - product name
44:08 - if you forget to add a unique constraint
44:10 - to a column after you already create the
44:12 - table this is what you can write
44:15 - however when I run this
44:17 - I do have a warning I already have a
44:19 - unique constraint on that column but
44:22 - yeah that's how you would add a unique
44:23 - constraint to a column in a table you
44:25 - have already created let's select our
44:28 - table select all from
44:31 - products
44:34 - we have a product ID column product name
44:37 - and a price let's insert all of our
44:40 - values
44:41 - insert into the name of our table which
44:45 - is products
44:46 - values will insert maybe four rows
45:01 - we'll need a product ID name then a
45:03 - price for a product name we have a
45:05 - hamburger and the product ID I'm just
45:07 - making up a number is 100.
45:11 - the name is hamburger
45:16 - the price will be 3.99
45:19 - fries will be our next item
45:23 - then we have prize
45:26 - the price will be 189.
45:30 - 102
45:32 - will be soda
45:35 - the price is one dollar even
45:39 - 103 will be ice cream
45:46 - the price will be 149. Let's test the
45:50 - unique constraint that we have added to
45:52 - the product name column suppose that I
45:54 - forget that I have fries on the menu
45:56 - already
45:57 - and I will add another row
46:02 - 104 frize 189 actually let me change the
46:06 - price to maybe something different like
46:08 - 175. here's what happens when I attempt
46:11 - to add two values that are the same
46:14 - duplicate entry fries for Key Products
46:18 - dot product name MySQL is telling us
46:21 - that we have a duplicate under the
46:23 - product name column we have fries twice
46:25 - since we added the unique constraint all
46:28 - values in this column must be different
46:30 - if I were to remove the last column
46:33 - where we have that duplicate
46:37 - well then this would run just fine
46:39 - now let's select everything
46:42 - from products
46:47 - yeah there we go here are the products
46:49 - we have a hamburger fries soda and ice
46:52 - cream all on the menu so yeah that's the
46:54 - unique constraint you can add that
46:56 - constraint when you create a table or
46:58 - after whatever column has that unique
47:00 - constraint all the values need to be
47:03 - different so yeah that's the unique
47:05 - constraint in MySQL
47:09 - hey everybody in this topic I'm going to
47:12 - explain the not null constraint the
47:15 - notch null constraint can be added to a
47:17 - column when you create a table whenever
47:19 - we enter a new row the value within that
47:22 - column can't be null for example I have
47:24 - table products we have a hamburger fries
47:27 - soda ice cream if I were to recreate
47:29 - this table I would type something like
47:31 - this
47:32 - create table
47:35 - products
47:39 - I would list the columns we have product
47:41 - ID the data type is integer
47:45 - product name the data type is varchar I
47:49 - believe I set this to be 25 last time
47:52 - then price
47:54 - that is a decimal
47:56 - we gave this column a Max size of four
47:58 - digits and a Precision of two any column
48:01 - that I do not want to have null values I
48:03 - will simply just add not no this is a
48:07 - constraint now I've already created this
48:09 - table so I'm not going to execute the
48:11 - statement but that's how you would
48:12 - create a table that has the notch null
48:14 - constraint after the column name you
48:16 - just type not null
48:18 - to add the not null constraint to a
48:21 - table that already exists you would
48:23 - instead type alter table the name of the
48:27 - table
48:28 - modify
48:30 - the name of the column
48:33 - the data type of the column
48:35 - in this case decimal
48:37 - four comma two
48:40 - then not null
48:43 - it's a little bit different than the
48:45 - unique constraint in the last topic so
48:47 - let's execute the statement
48:50 - that seemed to work
48:52 - let's add a new item to the menu I will
48:55 - select everything from my products table
48:57 - select from products
49:01 - let's add a new item to the menu and we
49:03 - will test that not null constraint
49:05 - insert into products
49:09 - values
49:12 - we have 104 product ID 104 will be
49:17 - how about a cookie
49:20 - I'm not going to set a price I will say
49:22 - null for the price maybe I'm not decided
49:25 - on what the price is yet after executing
49:28 - the statement well we have an error
49:30 - column price cannot be null
49:33 - since we said that not null constraint
49:35 - on the product price we can't enter a
49:38 - null value we could set this to be zero
49:43 - that's acceptable but it can't be null
49:45 - so yeah everybody that's the not null
49:47 - constraint it's a useful constraint to
49:50 - verify input if there's any column that
49:52 - you don't want to have any null values
49:54 - just add that constraint and yeah that
49:56 - is the not null constraint in MySQL
50:01 - hey everybody in this topic I'm going to
50:03 - explain the check constraint the check
50:05 - constraint is used to limit what values
50:08 - can be placed in a column for example I
50:10 - live in the United States depending on
50:12 - which state you live in there is a
50:14 - minimum hourly wage that employers have
50:16 - to pay in this example let's set an
50:19 - hourly pay to our employees table every
50:21 - employee needs to be paid at least the
50:23 - minimum wage in that region and we can
50:25 - do that with the check constraint we
50:28 - have our table of employees if I were to
50:30 - recreate this table it would look like
50:32 - this
50:44 - I think that was pretty close to add a
50:46 - check to a column at the end of our
50:48 - table this is what we would write
50:52 - check
50:54 - then within parentheses what sort of
50:56 - condition do we want
50:58 - let's check to see if our hourly
51:01 - pay column is greater than or equal to
51:04 - maybe ten dollars per hour that will be
51:06 - the minimum wage in this region this
51:09 - would work if we were to create this
51:10 - table however it's typically a good idea
51:13 - to give your check a name just in case
51:15 - you need to drop it later you can easily
51:17 - identify it so precede check with
51:20 - constraint then a constraint name what
51:24 - about
51:25 - chk meaning check underscore
51:28 - hourly
51:30 - pay
51:31 - this check will be known as check hourly
51:34 - pay so we can identify it then we can
51:36 - drop it or make any changes to it if we
51:38 - need to I do already have an employees
51:40 - table so I'm not going to execute this
51:42 - statement but to add a check constraint
51:44 - to a table you would just add a row like
51:46 - this to the bottom if you instead need
51:48 - to add a check constraint to a table
51:49 - that already exists this would be the
51:52 - syntax
51:53 - alter table the name of the table
51:58 - add constraint
52:00 - then we need a unique name for this
52:02 - constraint
52:03 - check hourly pay
52:06 - that's fine
52:08 - then the check within parentheses
52:11 - hourly
52:12 - pay is greater than or equal to 10.
52:17 - ten dollars per hour
52:20 - okay let's run this
52:21 - yeah that appears to have worked I'm
52:24 - going to select all from employees
52:28 - let's take a look at our table
52:30 - then we will attempt to add a new
52:32 - employee
52:33 - insert into
52:36 - employees
52:38 - values
52:40 - we need an employee ID first name last
52:42 - name hourly pay then a higher date
52:43 - employee ID will be six
52:46 - first name
52:48 - Sheldon
52:52 - plankton
52:54 - for hourly pay let's attempt to pay
52:56 - Plankton maybe five dollars per hour
52:59 - then a higher date
53:02 - [Music]
53:03 - 2023-01-07 let's see if that check
53:06 - constraint kicks in we're paying
53:08 - Plankton under ten dollars per hour
53:11 - yeah it doesn't appear that we can do so
53:13 - check constraint check hourly pay is
53:15 - violated now let's pay Plankton ten
53:18 - dollars per hour
53:20 - yeah that worked just fine if you need
53:23 - to delete a check you would type alter
53:26 - table the name of the table
53:30 - drop check then the name that you gave
53:33 - that check in my case it was check
53:36 - hourly pay
53:40 - and that check has been dropped yeah
53:43 - everybody that is the check constraint
53:45 - it's used to limit what values can be
53:48 - placed in a column it's another useful
53:50 - method for checking input and that is
53:53 - the check constraint in MySQL
53:58 - hey everybody in this topic I'm going to
54:00 - explain the default constraint when
54:03 - inserting a new row if we do not specify
54:05 - a value for a column by default we can
54:08 - add some value that we set here's an
54:10 - example let's select all from our
54:13 - products table select all from products
54:18 - in an earlier example we have a table of
54:20 - products a few items on the menu for
54:22 - sale are hamburgers fries soda and ice
54:24 - cream let's add a few items on the menu
54:26 - that would be free this could include
54:29 - napkins straws forks and spoons
54:31 - something you would commonly see at a
54:33 - fast food restaurant if we're not using
54:35 - the default constraint we would have to
54:37 - enter in those prices manually
54:39 - so let's insert into our table products
54:44 - our values
54:47 - product ID 104 will be
54:51 - a straw the price will be zero dollars
54:54 - and zero cents
54:56 - let's do this all together
55:01 - we have 105.
55:04 - 106
55:05 - 107.
55:08 - product number 105 will be a napkin
55:14 - the napkin is zero dollar zero cents
55:17 - 106 is a plastic fork
55:22 - again zero dollars and zero cents
55:25 - 107 is a plastic spoon
55:30 - the price is zero dollars and zero cents
55:34 - then I will select all from my products
55:38 - table
55:40 - here's our new products table we have
55:43 - our four items that actually cost
55:44 - something then our free items which are
55:47 - included with whatever we buy in place
55:49 - of explicitly stating a price one way in
55:52 - which we can make our lives easier if
55:54 - we're adding a bunch of free items to
55:56 - the menu we could set a default
55:58 - constraint where if we don't explicitly
56:01 - set a price the price will default to be
56:04 - zero it will be free so I'm going to
56:06 - undo everything that we just did
56:09 - delete from products
56:14 - where product ID is greater than or
56:18 - equal to 104.
56:21 - and then we can execute that statement
56:24 - if we were recreating this table with
56:26 - the default constraint we would type
56:28 - create table the name of the table
56:31 - products in this case
56:34 - add our columns we have a product ID
56:38 - the data type is integer
56:41 - we have a product
56:43 - name
56:45 - the data type is VAR chart and I forgot
56:47 - what the size was
56:49 - looks like 25.
56:54 - than a price
56:56 - which is a decimal
56:59 - Max digit size of four Precision of two
57:01 - now let's use the default constraint
57:03 - after the column you would like to add
57:05 - that constraint to type default then
57:08 - some value I will set the default value
57:11 - to be zero dollars and zero cents or you
57:13 - could just say zero too that'd be fine
57:15 - you would just add this constraint when
57:17 - creating a new table however I do
57:19 - already have a products table so this
57:21 - technically wouldn't work because that
57:23 - table already exists now to alter a
57:26 - table to include that constraint you
57:28 - would instead type alter table the name
57:31 - of the table
57:34 - alter the name of the column price
57:38 - set
57:39 - default constraint then the value so
57:42 - zero
57:44 - and that appears to have worked let's
57:46 - select our products table select all
57:48 - from
57:50 - products
57:52 - then we will insert some new rows
57:56 - insert
57:57 - into
57:59 - products
58:02 - than our values
58:05 - so we had four rows
58:12 - 104.
58:15 - that was a straw
58:18 - 105 was a napkin
58:22 - 106.
58:24 - was a fork
58:27 - 107.
58:29 - is a spoon then finished the statement
58:32 - with a semicolon so since we set that
58:35 - default constraint we don't need to
58:36 - explicitly list the price but we are
58:39 - missing one thing though
58:41 - when I execute this statement the column
58:43 - count doesn't match
58:45 - so when we insert into products
58:48 - we will list what we're inserting
58:49 - explicitly the product ID
58:52 - and the product name after our table
58:54 - name within parentheses type
58:57 - product ID then product name now this
59:02 - should work
59:05 - yeah and here's our products table with
59:07 - our four inserts all of the prices were
59:09 - set to zero and we did not need to
59:11 - explicitly state that this time if you
59:14 - don't specify a value you'll use
59:16 - whatever the default is here's another
59:18 - example I think you'll like this one
59:20 - let's say we have a table of
59:21 - transactions after inserting a new
59:24 - transaction we will insert a timestamp
59:26 - of when that transaction took place and
59:29 - that time stamp will be the default
59:30 - create table
59:33 - transactions
59:35 - at the end of this topic we will delete
59:37 - this table so don't get too attached to
59:39 - it
59:40 - we will have three columns
59:43 - transaction
59:45 - ID which will be of the data type
59:48 - integer
59:49 - a transaction amount let's just say
59:51 - amount
59:53 - the data type will be decimal
59:56 - five digits Precision of two is good
60:00 - then a transaction
60:03 - date
60:04 - the data type will be date actually
60:07 - let's make this date time I'd like to
60:09 - include the time of when this
60:10 - transaction happened now for the default
60:13 - constraint after the date time let's add
60:15 - default then the Now function we don't
60:19 - need to explicitly add the date and time
60:22 - that will be done automatically which is
60:24 - kind of cool
60:25 - so I'm going to create this table
60:29 - let's select all from transactions
60:34 - if we're going to insert some values
60:36 - we'll need at least a transaction ID and
60:39 - amount the transaction date will be
60:41 - included automatically
60:43 - so let's insert into
60:47 - transactions
60:50 - some values let's do one at a time
60:54 - the first transaction of the day will
60:55 - have a transaction ID of one I suppose a
60:58 - customer came in and bought a hamburger
61:00 - and a soda for a total of 4.99
61:03 - then we do need to list the transaction
61:06 - ID then the amount
61:08 - after our table name add transaction ID
61:13 - then amount
61:15 - so let's run this
61:17 - yeah cool so there's our transaction ID
61:20 - this was order number one the total
61:22 - amount was 4.99 and we do have a time
61:26 - stamp of when this transaction occurred
61:28 - so the second order of the day
61:30 - will be for a total of 2.89 and that
61:34 - happened at this time then the third
61:37 - order of the day
61:38 - will have a total price of eight dollars
61:41 - 37 cents
61:43 - yep there we are so we don't need this
61:46 - table anymore I'm going to drop table
61:49 - transactions we will recreate this table
61:52 - in the future but I'd rather start fresh
61:55 - all right everybody that is the default
61:57 - constraint when you create a table or
62:00 - alter a table you can set a default
62:02 - value of some value you specify then
62:05 - whenever you insert a row that value
62:07 - will be included automatically which is
62:10 - pretty useful but yeah that is the
62:12 - default constraint in MySQL
62:16 - hey everybody in this topic I'm going to
62:18 - explain the primary key constraint in
62:20 - MySQL the primary key constraint can be
62:23 - applied to a column where each value in
62:26 - that column must both be unique and not
62:29 - null it's typically used as a unique
62:31 - identifier for example I live in the
62:33 - United States each citizen within the
62:36 - United States has a unique social
62:38 - security number there is a strong
62:40 - possibility that two citizens in the
62:42 - United States share the same first name
62:44 - and last name John Smith for example if
62:47 - we're trying to find John Smith well
62:49 - which one are we referring to we could
62:51 - instead search for a citizen with a
62:53 - unique social security number then we
62:55 - know for sure we have the right person
62:56 - that's kind of the same concept with the
62:58 - primary key also a table can only have
63:01 - one primary key constraint here's an
63:03 - example let's create a temporary table
63:05 - of transactions create table
63:08 - transactions
63:11 - there will only be two columns
63:14 - a transaction
63:16 - ID the data type is int I will set the
63:20 - transaction ID to be the primary key
63:25 - there can be no duplicate transaction
63:27 - IDs with the same value and none of them
63:29 - can be null then we will also have an
63:32 - amount how much was each transaction for
63:34 - the data type will be decimal
63:37 - Max size of five digits Precision of two
63:40 - and that is good enough
63:42 - then I will select all from our table
63:45 - transactions
63:49 - here's our table now to add a primary
63:52 - key constraint to a table that already
63:54 - exists this is the syntax alter table
63:57 - the name of your table
64:00 - add
64:01 - constraint
64:04 - the name of the constraint primary key
64:08 - within parentheses the column we would
64:10 - like to apply the primary key to
64:13 - transaction ID in this example then
64:16 - semicolon however we have already
64:18 - applied the primary key constraint to
64:20 - our transaction ID column so this isn't
64:22 - going to work but that's how you would
64:24 - add a primary key constraint to a table
64:26 - that already exists Let's test that
64:28 - theory of that limit of one primary key
64:31 - per table I'll attempt to add a primary
64:34 - key to our amount column
64:39 - and it does not appear we can do so
64:40 - multiple a primary key to find so like I
64:43 - said you can only have one primary key
64:45 - per table
64:46 - and that is typically used as the
64:48 - identifier let's take a look at our
64:51 - transactions let's populate this table
64:53 - with a few rows
64:54 - we will insert into our table
64:58 - transactions
64:59 - some values all we need is a transaction
65:02 - ID and an amount
65:04 - for our transaction ID I'll just make up
65:06 - a number all transactions will start in
65:09 - the thousands
65:10 - this will be our first transaction
65:13 - so the amount a customer bought a
65:16 - hamburger and a soda the total was 4.99
65:20 - so let's run this
65:22 - there is our first row for the second
65:25 - transaction the transaction ID will be
65:27 - 1001
65:29 - the customer bought fries and a soda for
65:31 - 289.
65:34 - so that appears to have worked as well
65:36 - now the next customer buys fries and ice
65:39 - cream for 3.38 cents Let's test that
65:42 - theory of each transaction ID having to
65:45 - be unique I'll attempt to insert this
65:47 - row with the same transaction ID as the
65:49 - previous row
65:51 - then let's see what happens
65:53 - duplicate entry 1001 for key
65:56 - transactions.primary yeah it appears
65:58 - that we cannot have two rows with the
66:00 - same primary key they each need to be
66:02 - unique let's change the transaction ID
66:05 - to 1002. that appears to have worked now
66:08 - the next transaction will be a hamburger
66:11 - and soda for 4.49 I will attempt to set
66:15 - the transaction ID to be null
66:18 - which we can't do either column
66:20 - transaction ID cannot be null each value
66:23 - that's set as a primary key can't be
66:25 - null and it needs to be unique so this
66:28 - transaction will have a transaction ID
66:30 - of 1003
66:32 - two rows can share similar data we have
66:35 - two customers that bought both a
66:37 - hamburger and a soda for the same price
66:38 - but each transaction is uniquely
66:41 - identified by the transaction ID which
66:43 - we set as the primary key let's say that
66:46 - somebody comes in to request a refund
66:48 - and they give us a transaction ID well
66:50 - we can easily look that up and refund
66:52 - them whatever the amount was
66:54 - select amount
66:57 - from
66:58 - transactions
67:00 - where
67:02 - transaction
67:04 - ID equals 1003.
67:08 - so we are going to refund to the
67:10 - customer 4.99
67:12 - well all right then everybody that is
67:14 - the primary key constraint it's most
67:17 - commonly used as a unique identifier you
67:19 - usually want a primary key in every
67:21 - table you make each value within a
67:23 - column that is set as the primary key
67:25 - cannot be no and it needs to be unique
67:28 - there can only be one primary key per
67:30 - table typically it's used as a unique
67:33 - identifier for each row and yeah
67:35 - everybody that is the primary key
67:37 - constraint in MySQL
67:40 - hey everybody in today's topic I'm going
67:43 - to explain the auto increment attribute
67:45 - in MySQL the auto increment attribute
67:48 - can be applied to a column that is set
67:50 - as a key whenever we insert a new row
67:52 - our primary key can be populated
67:55 - automatically then each subsequent row
67:57 - is auto incremented I'm going to
67:59 - recreate this table transactions but
68:01 - first I need to drop it
68:04 - drop table transactions
68:08 - then we will recreate this table but
68:10 - apply that auto increment feature
68:13 - create table transactions
68:19 - there were two columns a transaction
68:22 - ID the data type was int and an amount
68:26 - the data type was decimal
68:29 - five digits Precision of two
68:32 - the auto increment feature can only be
68:34 - applied to a column that is set as a key
68:36 - our transaction ID will set to be the
68:39 - primary key to apply the auto increment
68:42 - feature add the keyword Auto
68:46 - increment
68:48 - Now by default the primary key is going
68:50 - to be set to 1.
68:52 - so after creating this table I will
68:54 - select all from transactions
69:00 - okay we have successfully created our
69:02 - table then I will insert some values
69:06 - insert into
69:08 - transactions
69:11 - R values so we don't need to explicitly
69:14 - insert a transaction ID that'll be done
69:17 - for us automatically but we still need
69:20 - an amount
69:21 - I will insert 4.99 for the first amount
69:23 - since we're not inserting all of the
69:26 - values into a row explicitly we would
69:29 - need to specify what column this value
69:31 - is for
69:33 - that is for the amount
69:36 - okay let us execute this and take a look
69:39 - yeah so the transaction ID was set to
69:42 - one even though we did not manually
69:44 - insert that value
69:45 - let's insert the next amount
69:48 - so we have 289
69:50 - yep transaction ID 2 is 289
69:54 - 3 38
69:57 - transaction ID3
69:59 - 4.99
70:01 - transaction ID of four
70:04 - we could set our primary key to begin at
70:06 - a different value
70:07 - to do that we would type alter table the
70:11 - name of the table
70:14 - Auto
70:15 - increment
70:17 - let's begin at 1000 instead of one
70:21 - then I'm going to go ahead and drop all
70:23 - the rows we'll start fresh
70:26 - delete from
70:28 - transactions
70:31 - select all from
70:33 - transactions
70:36 - okay then let's insert those rows again
70:38 - and see what happens
70:40 - insert into
70:42 - transactions
70:44 - R values
70:47 - 4.99 was the first amount
70:50 - this value is for our amount column
70:54 - now this transaction ID
70:57 - it begins at one thousand then it should
70:59 - Auto increment
71:01 - the next value was 289
71:05 - our next transaction ID is 1001
71:09 - 338
71:11 - 1002
71:13 - then 4.99
71:16 - 1003
71:18 - all right everybody that is the auto
71:20 - increment feature it's a keyword that
71:22 - can be applied to a column that is set
71:24 - as a key whenever we insert a new row
71:27 - our key will be incremented by one for
71:29 - each row that we insert but yeah that is
71:31 - auto increment in MySQL
71:35 - hey everybody so in this topic I'm going
71:38 - to explain what the foreign key
71:39 - constraint is a foreign key think of it
71:42 - as a primary key from one table that can
71:45 - be found within a different table using
71:47 - a foreign key we can establish a link
71:50 - between two tables there's two primary
71:52 - benefits to this in my transactions
71:55 - table if I were to take a look at the
71:57 - customer ID of who initiated this
71:59 - transaction I could refer to the
72:01 - customers table then find the first and
72:04 - last name of that customer we can do
72:06 - that when we reach the topic of joins
72:08 - but in this video we're going to focus
72:10 - more or less on just creating foreign
72:12 - Keys another benefit when you create a
72:14 - foreign key constraint that would create
72:16 - a link between two tables which prevents
72:19 - any actions that would destroy that link
72:22 - between them so here's an example I have
72:24 - three tables employees products and
72:26 - transactions I'm going to create a new
72:28 - table of customers I'm going to create
72:31 - this table and speed it up feel free to
72:33 - pause the video if you need to
72:47 - here's my table we have a customer ID
72:50 - which is the primary key a first name
72:52 - and a last name let's populate our
72:55 - customers table
73:10 - we have three customers Fred fish Larry
73:14 - Lobster bubble bass each has a unique
73:16 - customer ID we're going to create a link
73:19 - between our customers table and our
73:21 - transactions table via our customer ID
73:24 - I'm going to drop our table transactions
73:27 - drop table transactions
73:30 - we will recreate this table but apply
73:33 - that foreign key constraint so again
73:35 - I'll speed up the footage
73:47 - now what I'm going to do is create a
73:49 - third column to hold our customer ID
73:55 - and the data type isn't I would like to
73:57 - add a foreign key constraint to our
73:59 - customer ID column
74:01 - on the next line
74:03 - I will type
74:04 - foreign key list the column we're
74:08 - applying this foreign key constraint too
74:09 - within parentheses customer ID
74:13 - references
74:15 - our second table the customers table
74:19 - customers
74:20 - then the column of the primary key which
74:23 - was customer
74:25 - ID and that's all you need to do
74:28 - then I will select all from my table
74:31 - transactions
74:35 - here is our table
74:37 - we have a transaction ID this is the
74:39 - primary key the amount of the
74:41 - transaction then the customer ID of who
74:45 - initiated that transaction our customer
74:47 - ID column is the foreign key it points
74:49 - to the customers table based on what the
74:52 - customer ideas we can find the first and
74:54 - last name of that customer to find any
74:56 - active foreign keys
74:58 - go to your table in this case
74:59 - transactions underneath foreign keys
75:02 - this section will display any foreign
75:04 - keys that are applied to this table we
75:06 - currently have one
75:08 - transactions underscore ibfk underscore
75:11 - one if you need to drop a foreign key
75:13 - you would type alter table the name of
75:18 - the table that has the foreign key
75:19 - constraint that would be transactions
75:24 - drop
75:25 - foreign key then the name of this
75:29 - foreign key
75:31 - transactions underscore
75:34 - ibfk underscore one
75:40 - and that foreign key should be gone
75:43 - you could also give your foreign key a
75:45 - unique name
75:47 - alter table the name of the table
75:50 - add
75:51 - constraint
75:53 - then some unique name let's rename that
75:56 - constraint as FK underscore
76:00 - customer
76:01 - ID
76:05 - foreign
76:06 - key
76:08 - the name of the column customer ID
76:13 - references
76:15 - the name of the second table
76:17 - customers then the column that has the
76:20 - primary key
76:22 - customer
76:23 - ID
76:24 - so to apply a foreign key to a table
76:27 - that already exists this would be the
76:29 - syntax you don't necessarily need to
76:32 - name the constraint
76:33 - but if you would like to just add that
76:35 - line add constraint then some unique
76:38 - name
76:39 - let's add this foreign key constraint to
76:41 - a table that already exists
76:43 - it worked if I were to refresh my
76:46 - navigator window we now have a foreign
76:48 - key and it's the one that we gave a name
76:50 - to foreign key customer ID
76:54 - what we're going to do is drop the rows
76:56 - from our transactions table then
76:58 - reinsert them but we will add a value
77:00 - for each foreign key
77:02 - so let's get rid of this
77:05 - delete from transactions
77:11 - then select all from
77:14 - transactions
77:17 - here we are okay so let's insert some
77:19 - new rows
77:22 - I do want to set auto increment to be a
77:24 - thousand so I'm going to do that before
77:25 - we insert some rows alter table
77:29 - transactions
77:31 - Auto
77:33 - increment equals one thousand
77:37 - so let's take a look at transactions
77:43 - then we will insert some new rows
77:46 - insert into
77:48 - transactions
77:51 - R values
77:55 - we had four transactions
78:02 - we will need an amount and the customer
78:06 - ID of who initiated the transaction
78:09 - the first order is for 4.99
78:12 - customer number three initiated this
78:14 - transaction
78:15 - the second order is 289
78:19 - customer number two initiated that
78:21 - transaction
78:23 - 338
78:25 - this is also customer three they
78:27 - returned back the same day
78:30 - 4.99
78:31 - customer number one initiated that
78:33 - transaction
78:35 - we have our primary key from the
78:37 - transactions table as well as our
78:39 - foreign key
78:40 - each of these customer IDs references
78:43 - the customer ID column from the
78:46 - customers table we won't get to explore
78:48 - that until we reach the topic on joins
78:50 - so the other benefit of a foreign key
78:52 - constraint is that we now have a link
78:54 - between our transactions table and to
78:57 - the customers table MySQL will prevent
78:59 - any actions that would destroy that link
79:01 - between them unless we explicitly drop
79:04 - that foreign key constraint I'm going to
79:06 - delete some of our customers
79:10 - delete from customers
79:14 - where
79:16 - customer
79:17 - ID equals three
79:21 - we were right it doesn't appear that we
79:23 - can do so cannot delete or update a
79:25 - parent row a foreign key constraint
79:28 - fails
79:30 - so yeah that's the foreign key
79:31 - constraint it's a primary key from one
79:34 - table that's found also within a
79:36 - different table but when we're working
79:38 - with that different table we would refer
79:40 - to that key as a foreign key we'll have
79:43 - more practice with this when we reach
79:45 - the topic on joins but yeah that is the
79:47 - foreign key constraint in MySQL
79:52 - hey everybody welcome back again in
79:54 - today's video I'm going to be explaining
79:56 - joins in MySQL a join is a clause that
79:59 - is used to combine rows from two or more
80:02 - tables based on a related column between
80:04 - them such as a foreign key here's an
80:07 - example I have two tables a table of
80:09 - transactions and a table of customers
80:11 - think of these two tables as a Venn
80:13 - diagram transactions will be the table
80:15 - on the left customers will be the table
80:18 - on the right whatever data they have in
80:20 - common is the middle part of our Venn
80:22 - diagram for my demonstration to make
80:24 - more sense I will need to add a few
80:26 - extra rows feel free to pause the video
80:28 - if you need to catch up I will insert
80:30 - into transactions a new row the amount
80:33 - is one dollar the customer ID is null so
80:36 - not all transactions can have a customer
80:39 - ID that foreign key here's a scenario
80:41 - suppose that somebody comes in pays for
80:44 - a soda with cash well we wouldn't have a
80:47 - customer ID right if a customer instead
80:49 - paid with a credit card we could track
80:51 - who that customer was there may be a
80:53 - customer ID who initiated that credit
80:55 - card charge I'm going to insert this row
80:59 - and here's our new transactions table
81:02 - not all rows have a customer ID
81:05 - then let's add one more customer
81:08 - insert into customers first name last
81:12 - name will be poppy Puff
81:16 - let's select all of our customers now
81:18 - not all transactions have a customer ID
81:21 - and if not all customers have ever
81:24 - initiated a transaction they could be
81:26 - registered as a customer but they have
81:28 - never actually bought anything yet using
81:31 - joins let's take a look at what data
81:33 - these two tables have in common we'll
81:35 - discuss inner joins left joins and right
81:37 - joins let's begin with an inner join to
81:41 - create an inner join between these two
81:43 - tables
81:44 - you would type select all from which
81:48 - table would you like to be on the left
81:49 - think of that Venn diagram our
81:52 - transactions table will be on the left
81:55 - from transactions inner join
81:58 - whatever table you would like to be on
82:00 - the right in this case customers
82:04 - on we're going to join these two tables
82:07 - together by the foreign key from
82:09 - transactions we'll take
82:12 - transactions.the name of the foreign key
82:15 - column which was customer ID
82:18 - equals the table on the right dot the
82:22 - name of the primary key column which was
82:25 - customer ID
82:27 - then we will execute the statement and
82:29 - here's our new table
82:31 - we have created an inner join from these
82:33 - two tables based solely on what they
82:36 - have in common if you remember we don't
82:38 - have that Row for that transaction for
82:40 - one dollar that doesn't have a customer
82:42 - ID as well as our customer poppy puff
82:45 - there's no role for her in this table
82:46 - what we're telling MySQL is to select
82:49 - all rows from these two tables that have
82:52 - matching customer ideas so that's why
82:55 - some data was excluded one thing you
82:58 - could do with a join this applies to
83:00 - left joins and right joins as well you
83:03 - don't necessarily need to display every
83:05 - single column from both tables you can
83:07 - select specific columns
83:10 - let's select our transaction ID the
83:14 - amount
83:15 - the first name
83:17 - then the last name
83:21 - this would make it a lot easier to find
83:23 - the first and last name of who initiated
83:26 - a transaction at a given time we know
83:29 - who bought which order so that is an
83:31 - inner join join together any matching
83:34 - rows based on some Link in this case
83:36 - we're joining these two tables together
83:38 - by their customer ID
83:40 - now with the left join we are going to
83:43 - display everything from the table on the
83:45 - left but let's select all
83:48 - with the left join we will display
83:51 - everything from the table on the left
83:53 - our transactions however if there is a
83:56 - matching customer ID pull in any
83:58 - relevant data from the table on the
84:00 - right even though there's no customer ID
84:02 - with this latest row we're still going
84:05 - to display it with a left join but
84:07 - there's no data to pull in from the
84:09 - right table because there's no
84:10 - registered customer ID
84:12 - with the right join
84:14 - we will display the entire table on the
84:17 - right if there's any matches we will
84:19 - pull in any matching rows from the left
84:21 - we are displaying all of our customers
84:24 - if any of these customers ever initiated
84:26 - a transaction we will include the data
84:29 - from those transactions we still have
84:31 - poppy puff in our table but she has no
84:34 - relevant transactions she never
84:36 - initiated one so yeah everybody those
84:39 - are joins a join is used to combine rows
84:42 - from two or more tables based on a
84:44 - related column between them such as a
84:47 - foreign key like customer ID and that is
84:50 - a quick introduction to joins in MySQL
84:55 - hello again everyone today I will be
84:58 - explaining functions in MySQL a function
85:00 - is a stored program that you can pass
85:02 - parameters into to return a value if you
85:05 - look on mysql's main website there is a
85:08 - huge comprehensive list of functions in
85:10 - this video I'll only be showing you a
85:12 - few of the more useful ones for
85:13 - beginners but just so you know there's a
85:16 - lot of functions out there that do all
85:17 - sorts of things what if I would like to
85:19 - count how many transactions took place
85:21 - on a certain date to do that we can use
85:24 - the count function
85:25 - select count parentheses within my set
85:29 - of parentheses I can place a column then
85:32 - calculate how many rows are within that
85:34 - column let's calculate amount we will
85:36 - count how many rows are within the
85:38 - column amount
85:40 - then we will need a table from our table
85:43 - transactions so you could add a where
85:45 - Clause 2 like where transaction date is
85:48 - on a certain date but I want to keep
85:50 - this video as simple as possible
85:52 - this function will return all of the
85:55 - rows within this column amount which is
85:58 - five we have five transactions within
86:00 - this table now this column header is
86:02 - kind of ugly the column name is count
86:05 - the amount column you could give a
86:07 - column an alias by adding as then some
86:11 - nickname let's say count it's not
86:15 - necessary but if you want to make the
86:16 - column header look pretty or rename it
86:18 - as something you could do that
86:20 - count five we could even rename this
86:24 - column as
86:25 - today is
86:27 - transactions
86:30 - that works too do whatever you want to
86:32 - do
86:33 - let's find you the maximum value of our
86:36 - column amount by using the max function
86:39 - within the set of parentheses pass in
86:41 - your amount column I will give this
86:43 - column an alias of
86:45 - maximum
86:47 - and that is the maximum amount the
86:50 - largest order was 4.99 there's also Min
86:54 - to find the minimum
86:56 - as minimum
86:59 - the smallest order was for one dollar
87:03 - you could do average which is AVG
87:06 - as average the average order is three
87:11 - dollars and 45 cents
87:13 - we can find the sum of a column by using
87:15 - the sum function
87:17 - as some
87:20 - the sum of all of our transactions was
87:22 - 17 and 25 cents for this next example
87:26 - we're going to concatenate the first and
87:28 - last name of our employees
87:30 - select all from
87:33 - employees
87:35 - we have two columns one for a first name
87:37 - the other for a last name we're going to
87:40 - combine these two columns together with
87:42 - the concat function then create a new
87:44 - column named full name here's how to do
87:47 - that
87:50 - select
87:51 - concat
87:54 - first name
87:55 - last name
87:56 - then I'll add an alias as ball name
88:02 - here's what we have so far so we are
88:04 - concatenating the first and last names
88:06 - of our employees uh however we should
88:09 - separate each name with the space
88:11 - within our concat function
88:13 - I'll add a space character
88:16 - surrounded with commas to separate each
88:18 - argument
88:19 - there that's much better
88:21 - so that is the concat function we can
88:23 - concatenate values together such as if
88:26 - you need a column for somebody's full
88:28 - name but yeah those are just a few
88:30 - functions there's still many more we
88:31 - haven't covered but these are a few of
88:33 - the beginner ones you may be interested
88:35 - in but yeah those are functions in MySQL
88:40 - why hello again everybody guess who it's
88:43 - me again today I will be explaining
88:45 - logical operators in MySQL I would think
88:49 - of them as keywords that are used to
88:51 - combine more than one condition for my
88:54 - examples to make more sense I will add
88:56 - one more column a job column so let's
88:59 - alter our table of employees alter table
89:03 - employees add
89:05 - column job the data type will be
89:09 - varchar25 I'll add this column after our
89:13 - hourly pay column
89:16 - then select all from my table employees
89:21 - here is our job column
89:24 - let's add some jobs to our employees
89:27 - let's update employees
89:32 - set job equal to Let's select Mr Krabs
89:36 - he will be a manager
89:38 - then be sure to add a where Clause
89:39 - employee ID equals one
89:44 - Mr Krabs is a manager
89:47 - Squidward will be a cashier employee ID
89:49 - equals two
89:51 - SpongeBob employee ID3 he will be a cook
89:56 - Patrick will also be a cook
90:00 - Sandy will be an assistant manager
90:03 - let's abbreviate the word assistant
90:06 - manager
90:08 - Plankton Plankton will be a janitor
90:13 - how is this related to logical operators
90:15 - you're wondering well using logical
90:17 - operators we can check more than one
90:19 - condition suppose that our boss wants us
90:21 - to find any Cooks that were hired before
90:25 - January 5th how can we write a query
90:27 - that can satisfy those two conditions
90:29 - here's how we will use the and logical
90:32 - operator
90:34 - select all
90:36 - from our table employees
90:38 - using a where Clause we will write two
90:41 - conditions find any employees where the
90:44 - higher date is less than
90:47 - the year 2023
90:50 - January 5th
90:53 - so far this would give us three results
90:56 - Mr Krabs Squidward and SpongeBob from
90:59 - these three employees how do we find any
91:01 - Cooks well we can add the and logical
91:03 - operator
91:05 - and we can write some other condition
91:08 - job is equal to
91:10 - cook
91:12 - there we have SpongeBob
91:15 - he is a cook that was hired before
91:17 - January 5th
91:19 - so that's the and logical operator you
91:22 - will return any results that match these
91:25 - two criteria another logical operator is
91:28 - or you can check more than one condition
91:30 - as long as one of those conditions is
91:32 - true that row will be true let's find
91:35 - any cooks or cashiers
91:38 - where job is equal to cook
91:42 - that gives us both SpongeBob and Patrick
91:45 - they're both Cooks
91:47 - or job is equal to
91:50 - cashier
91:52 - that would also include Squidward he's
91:55 - not a cook but he is a cashier with the
91:58 - or logical operator only one condition
92:01 - needs to be true whereas with the
92:03 - andological operator both conditions
92:06 - must be true so that's the main
92:08 - difference between the and as well as or
92:10 - logical operators
92:12 - with the not logical operator not is a
92:15 - little different not basically reverses
92:17 - anything you say let's find any
92:19 - employees that are not a manager
92:23 - where not
92:25 - job equals
92:27 - manager
92:29 - we have all of our employees besides Mr
92:32 - Krabs we have cashiers Cooks assistant
92:35 - managers and janitors
92:37 - you can combine logical operators too
92:40 - let's find anybody that's not a manager
92:43 - and not an assistant manager let's add
92:47 - and not job equals
92:52 - assistant manager
92:55 - we have everybody besides a manager and
92:58 - besides an assistant manager Mr Krabs
93:02 - and Sandy are not within the results
93:04 - so that is the not logical operator it
93:07 - basically reverses whatever condition
93:09 - you write
93:10 - there's also between
93:12 - is used within a single column
93:15 - it's very similar to the andalogical
93:17 - operator except people prefer to use the
93:20 - between logical operator when working
93:22 - with the same column just because of its
93:24 - readability let's find any employees
93:26 - where the higher date is between January
93:29 - 4th and January 7th where higher date
93:32 - between two values
93:35 - 2023
93:37 - 0 1
93:38 - 0 4
93:40 - and
93:42 - 2023
93:45 - 0 1-07
93:49 - so we have SpongeBob Patrick Sandy
93:51 - Sheldon
93:52 - there's also the in logical operator we
93:55 - can find any values that are within a
93:57 - set let's find where job is in
94:03 - cook
94:06 - cashier
94:08 - or a janitor
94:11 - yep we have a cashier a cook a cook and
94:14 - a janitor there is more than one way to
94:17 - write a query where you need to match
94:18 - more than one condition really the best
94:21 - way depends on your data set basically
94:23 - speaking logical operators are used to
94:26 - check more than one condition but
94:28 - they're done so in different ways
94:29 - depending on the logical operator that
94:31 - you're using but yeah those are logical
94:33 - operators in MySQL
94:37 - hello again people today I'm going to be
94:39 - explaining Wild Card characters there
94:42 - are two the percent and the underscore
94:45 - each of these is used to substitute one
94:48 - or more characters in a string here's an
94:51 - example I have a table of employees what
94:54 - if I need to find any employees whose
94:56 - first name begins with an S well you
94:59 - would think you could write something
95:00 - like this
95:02 - where first name
95:04 - is equal to s
95:06 - now this technically doesn't work here
95:09 - what we're doing is telling MySQL to
95:12 - find any first names that are equal to
95:14 - the character s if I instead need to
95:17 - find any first names that begin with the
95:19 - character S I can type S then the
95:23 - percent wildcard operator the percent
95:25 - wildcard operator represents any number
95:28 - of random characters but there's one
95:30 - more change we need to make still
95:32 - replace the equals operator with the
95:35 - like operator like when used with an
95:38 - aware Clause searches any patterns we
95:41 - will return any first names that begin
95:43 - with the letter s so the results are
95:46 - Squidward SpongeBob Sandy Sheldon their
95:49 - first names all begin with the letter s
95:52 - we could do this with dates too let's
95:54 - find any
95:55 - higher dates in the year 2023
96:00 - technically that would return everything
96:02 - in my example because all the higher
96:04 - dates are in 2023. we can even find if
96:07 - something ends with a character let's
96:09 - find any last names that end with the
96:12 - character r
96:14 - that would return Patrick star star with
96:18 - an r at the end you could add more than
96:20 - one character let's find any first names
96:22 - that start with SP
96:25 - then change last name to first name
96:29 - that would return one result SpongeBob
96:32 - SP on the other hand we have the
96:35 - underscore wildcard character the
96:38 - underscore wildcard character represents
96:40 - one random letter let's find any jobs
96:44 - that have one random character followed
96:48 - by oh okay
96:51 - that would return any Cooks the
96:53 - underscore kind of reminds me of that
96:55 - game Wheel of Fortune MySQL is going to
96:58 - attempt to fill in any blanks with a
97:00 - matching character if we had two
97:02 - underscores
97:03 - well there technically wouldn't be any
97:05 - matches MySQL would technically be
97:08 - looking for a five-letter word where the
97:10 - middle three characters are oh okay but
97:13 - there's no matches
97:15 - here's another example find any higher
97:18 - dates in January
97:20 - higher date is like the year is going to
97:23 - be random we have four digits one two
97:26 - three four
97:27 - a dash character zero one
97:30 - Dash then a day of the month so two
97:33 - underscores
97:35 - again that would return pretty much all
97:37 - of our employees they were all hired in
97:39 - January maybe we don't care about the
97:41 - year or the month but we care about the
97:44 - day of the month
97:45 - so let's replace the month with
97:48 - underscores
97:50 - zero two
97:52 - that would return Mr Krabs zero three
97:56 - that would be Squidward
97:59 - now you could combine these two
98:00 - different wild cards together too let's
98:03 - take a look at our jobs
98:05 - let's find any jobs where the second
98:09 - character is an a
98:11 - I know it's kind of a weird example but
98:13 - hopefully it'll make sense
98:15 - select all from employees where job is
98:18 - like now we're going to combine these
98:20 - two wild characters the second character
98:23 - has to be an a
98:24 - we could use the underscore for the
98:26 - first character a then any amount of
98:30 - random characters afterwards
98:32 - that would return a manager cashier or
98:36 - janitor
98:37 - so yeah those are wild card characters
98:39 - you can use these to substitute one or
98:42 - more characters in a string it's pretty
98:44 - helpful if you need to find if a string
98:46 - starts with some value or ends with some
98:48 - value and those are wild card characters
98:51 - and MySQL
98:54 - hey everyone I have a super quick video
98:57 - on the order by Clause the order by
99:00 - Clause sorts the results of a query in
99:03 - either ascending or descending order
99:05 - based on which column we list here's an
99:08 - example I have a list of employees how
99:11 - can I list all of these employees
99:12 - alphabetically currently they are listed
99:15 - by their employee ID well at the end of
99:17 - my statement I can add an order by
99:20 - Clause order buy then a column to order
99:24 - our Rose by let's order all of these
99:27 - employees by their last name
99:31 - Now by default they will be ordered in
99:34 - ascending order or alphabetical order if
99:36 - you're working with characters for
99:38 - descending order or reverse alphabetical
99:40 - order just add desc for descending
99:45 - now these employees are listed in
99:47 - Reverse alphabetical order or descending
99:49 - order for us sending order that would be
99:51 - ASC but that is the default so you don't
99:55 - explicitly need ASC
99:58 - let's order these employees by their
100:00 - first name
100:01 - first name
100:04 - these employees are listed
100:06 - alphabetically by their first name
100:07 - let's do reverse alphabetical order
100:10 - yeah there we are let's order these
100:13 - employees by their higher date
100:15 - higher date and ascending order
100:18 - you don't even technically need that
100:20 - keyword ascending it would still work
100:22 - just fine now descending
100:25 - I think we have the hang of it now let's
100:27 - select all from transactions there's one
100:30 - more thing I want to show you
100:32 - select all from transactions
100:35 - we have two transactions with the same
100:37 - amount
100:38 - let's order by amount
100:44 - when ordering a column if two values
100:46 - share the same amount we can add an
100:49 - additional column to compare by order by
100:51 - amount but if two amounts are the same
100:54 - order by maybe
100:56 - customer ID
101:01 - these two rows are now flipped
101:03 - so you can order by more than one column
101:06 - if two columns share the same amount
101:09 - then order by some other column
101:12 - then you can add ascending descending
101:15 - however you want to order your table
101:17 - so yeah that is the order by Clause you
101:20 - can order your rows by some column you
101:22 - specify in ascending or descending order
101:25 - but yeah that is the order by clause in
101:28 - MySQL
101:31 - hello it's me again today I will be
101:34 - explaining the limit Clause the limit
101:36 - Clause is used to limit the number of
101:38 - records that are quarried it's very
101:40 - useful if you're working with a lot of
101:42 - data one use is that you can display a
101:45 - large data set on different pages also
101:48 - known as pagination here's an example
101:51 - I have a few customers
101:53 - not very many I'm working with a small
101:56 - data set if I would ever need to limit
101:58 - the amount of customers that are
102:00 - displayed I can add a limit Clause then
102:03 - set how many I would like to display
102:06 - I would like the first customer limit
102:08 - one
102:09 - that would return Fred fish in my
102:11 - example if I need the first two that
102:14 - would be Fred then Larry
102:16 - three is Fred Larry bubble that's kind
102:20 - of a weird first name
102:21 - and then four would be poppy currently
102:24 - these records are organized by customer
102:26 - ID we could combine the limit Clause
102:29 - with the order by clause
102:31 - let's order by last name
102:35 - then limit one
102:38 - that would return bubble bass it's an
102:41 - alphabetical order
102:42 - or we could do last name
102:44 - descending limit one
102:47 - poppy puff has the name and least
102:49 - alphabetical order I guess basically
102:52 - speaking limit limits the number of
102:54 - records that are returned it's very
102:56 - useful in combination with the order by
102:59 - clause which we learned about in the
103:00 - previous topic now with the limit Clause
103:03 - you can add an offset
103:05 - limit
103:07 - one one
103:08 - the first number is the offset limit to
103:11 - one record after the first that should
103:14 - technically return Larry Lobster
103:17 - yep Larry so limit two would add an
103:21 - offset of two
103:23 - which returns bubble Bass
103:25 - limit three would return poppy puff
103:28 - using an offset would be very helpful
103:31 - when working with a large data set if
103:33 - you need to display your records on
103:34 - different pages suppose that our data
103:37 - set is maybe 100 customers I need to
103:40 - display 10 customers per page so the
103:43 - first 10 would be just limit 10.
103:46 - but you know my data set's really small
103:48 - so it's not going to be apparent if I
103:50 - need the next set of 10 customers I can
103:53 - add an offset of 10. although I don't
103:55 - have that many customers to begin with
103:57 - the next set of 10 customers would be an
103:59 - offset of 20 then displayed 10 you know
104:02 - then 30 40 so on and so forth so yeah
104:07 - that's the limit Clause you will limit
104:09 - the results that are queried type limit
104:11 - then some number you could add an offset
104:14 - so display some number of Records after
104:17 - an offset but yeah that is the limit
104:20 - clause in MySQL
104:23 - hey welcome back today I will be
104:26 - explaining the union operator the union
104:28 - operator combines the results of two or
104:31 - more select statements I have created
104:33 - two additional tables I'm only going to
104:35 - be using them temporarily I'll delete
104:37 - them once we're done with this example I
104:39 - have a table of income
104:41 - we have two columns an income name and
104:43 - an amount I've just made up some numbers
104:45 - they're probably not realistic I also
104:48 - have a table of expenses
104:52 - here's my table of expenses we have an
104:54 - expense name and some amount again I
104:57 - just made up some numbers suppose that
104:59 - our boss wants us to print a list of all
105:01 - of our different income versus expenses
105:03 - all in one window well we can easily do
105:07 - that with the Union operator after our
105:10 - first select statement delete the
105:12 - semicolon add Union
105:15 - we now have a window with the results of
105:18 - these two select statements we have
105:20 - income and expenses let's perform a
105:23 - similar operation with our employees and
105:25 - customers table I'm going to drop these
105:27 - tables though they were only temporary
105:30 - drop table income
105:34 - drop table expenses
105:37 - let's begin Mr Krabs our boss he wants
105:41 - us to create a list of everybody that
105:43 - enters the store all employees and all
105:46 - customers while we can join together
105:48 - those select statements with the Union
105:50 - operator but first let's take a look at
105:53 - each of these tables
105:54 - select all from employees
106:01 - we're going to have one problem our
106:03 - employees table has six columns whereas
106:06 - our customers table
106:10 - our customers table has three columns
106:12 - if you're combining two different select
106:15 - statements that have a different amount
106:17 - of columns a union isn't going to work
106:19 - we have a problem the used select
106:22 - statements have a different number of
106:24 - columns in order to join two select
106:27 - statements together they need the same
106:30 - number of columns my employees table has
106:33 - six columns my customers table has three
106:36 - well we could select distinct columns
106:38 - all I need is the first name and the
106:41 - last name of each of these tables
106:43 - first name last name
106:49 - and look at that that works we have now
106:52 - created a list of all of the different
106:54 - people that enter our store both
106:56 - employees and customers
106:59 - there is a different variation of the
107:01 - Union operator that is Union all that
107:04 - would include any duplicates if more
107:06 - than one value is found within each
107:07 - table
107:08 - just temporarily I'm going to insert
107:10 - Plankton into our customers table
107:14 - insert into customers
107:19 - some values
107:22 - customer ID 5 first name Sheldon
107:26 - last name plankton
107:31 - select all from customers
107:36 - Plankton is both in our customers table
107:42 - and our employees table
107:44 - now what would happen if I add a union
107:46 - to those two select statements
107:56 - with just Union by itself union doesn't
107:59 - allow duplicates Sheldon Plankton is
108:02 - only within our list once
108:04 - with Union all you would include
108:06 - duplicates
108:07 - now Sheldon Plankton is in this list
108:10 - twice
108:11 - so use whatever is more fitting for your
108:13 - situation
108:14 - I'm gonna go ahead and delete Plankton
108:17 - from this table of customers
108:20 - all right yeah so that's a union
108:21 - everybody a union combines the results
108:23 - of two or more select statements in
108:26 - order to do so those two or more select
108:28 - statements need the same number of
108:31 - columns but yeah that is the union
108:33 - operator in MySQL
108:37 - hey everybody today I'm going to be
108:39 - explaining self joins a self-join is
108:42 - really just any type of join where you
108:44 - join together another copy of a table to
108:46 - itself they're used to compare rows of
108:49 - the same table they really help with
108:51 - displaying a hierarchy of data so a self
108:53 - join you just join another copy of a
108:55 - table to itself so here's an example I
108:58 - have a table of customers I'm going to
108:59 - create another column named referred by
109:02 - if a customer refer somebody and they
109:05 - register as a new customer maybe they
109:07 - get like a free meal or something let's
109:09 - create a new column within our customers
109:11 - table
109:12 - alter table
109:14 - customers
109:17 - add
109:18 - referral ID
109:20 - the data type will be int
109:23 - then select all from customers
109:26 - now let's populate this column
109:30 - update customers
109:33 - set
109:34 - referral ID
109:38 - equal to one
109:40 - where customer ID equals to
109:46 - our first customer Fred fish he was not
109:49 - referred by anybody that value will be
109:51 - null however Larry Lobster was referred
109:54 - by Fred fish
109:55 - we'll set the referral ID for him to be
109:58 - won
109:59 - Larry Lobster was referred by Fred fish
110:01 - so Fred fish gets a free meal at the
110:04 - Krusty Krab
110:05 - now Larry Lobster he's going to refer
110:07 - both bubble bass and Poppy puff so he'll
110:10 - get two free meals
110:11 - set referral ID equal to 2 where
110:14 - customer ID equals three
110:17 - and four
110:19 - Fred fish referred to Larry Lobster
110:21 - Larry Lobster referred bubble bass and
110:23 - Poppy puff it makes me think of a
110:25 - pyramid scheme I'm going to use a
110:27 - self-joint to replace our referral ID
110:29 - column with the first and last name of
110:33 - the customer that referred one of these
110:34 - people
110:35 - so I'm going to select all
110:38 - Now when using a self join
110:40 - we'll take from our table customers
110:43 - than inner join
110:47 - customers basically we're just joining
110:49 - another copy of a table to itself but
110:51 - we'll need to give these tables what's
110:53 - known as an alias a nickname let's say
110:55 - from customers as maybe a that's the
110:59 - nickname
111:00 - inner join customers as b the original
111:03 - copy of our customers table will be
111:05 - referred to as a the copy will be B they
111:09 - are the exact same table but we have two
111:11 - of them and we'll stitch them together
111:12 - with a join to link these Tables by the
111:15 - referral ID and the customer ID I'll add
111:18 - this additional line on
111:21 - referral
111:23 - ID
111:25 - equals customer ID let's take a look to
111:29 - see what we have so far
111:31 - column referral ID in on Clause is
111:35 - ambiguous
111:36 - am I referring to the referral ID of
111:38 - table a or table B I'm referring to the
111:42 - referral ID of table a what I'll do is
111:44 - prefix this column name with the name of
111:46 - my table followed by dot a DOT referral
111:50 - ID equals I need the customer ID from my
111:54 - table copy which is known as B I will
111:56 - prefix B to this customer ID column
111:59 - the referral ID of table a is linked to
112:03 - the customer ID of table B oh yeah look
112:07 - at that we have joined these two tables
112:09 - the referral ID of table a is linked to
112:12 - the customer ID of table B
112:14 - I don't necessarily need all of these
112:16 - columns we're displaying everything
112:17 - let's select only specific columns I
112:20 - would like a customer ID
112:24 - first name
112:26 - last name
112:28 - now we have one problem with our first
112:30 - name and last name do we mean the first
112:33 - and last name Columns of table a or
112:35 - table B let's prefix these columns with
112:38 - the name of our table the Alias we're
112:40 - using I would like the first name from
112:42 - table a the last name from table a
112:45 - followed by I'm going to put this on a
112:47 - new line just for readability
112:50 - the first name
112:52 - of table B
112:54 - then the last name of table B
113:00 - then be sure to include that within the
113:02 - customer ID too so the customer ID of
113:04 - table a
113:06 - okay we're getting somewhere customer ID
113:08 - first name last name first name last
113:11 - name okay so if somebody were looking at
113:13 - this table they would think why are
113:15 - there two columns for both first name
113:16 - and last name let's concatenate these
113:19 - two columns
113:20 - concat
113:22 - first name last name I'll add a space in
113:25 - between the first name and last name
113:28 - I'm going to give this column an alias
113:30 - as
113:32 - referred by
113:36 - all right there's our table
113:38 - we have all of our customers who were
113:40 - referred by another customer Larry
113:43 - Lobster was referred by Fred fish bubble
113:46 - bass and Poppy puff were both referred
113:48 - by Larry Lobster
113:50 - you could use a different type of join
113:51 - besides an inner join we could use a
113:53 - left join
113:55 - what we're telling MySQL is to display
113:57 - all of our customers on the left table
113:59 - if one of these customers was referred
114:02 - by another customer join those rows as
114:04 - well you can see that with the left join
114:06 - that Fred fish is still within our table
114:07 - but he wasn't referred by anybody that
114:09 - value is null so that's one example of a
114:12 - self-join we're creating another copy of
114:14 - the same table then joining it together
114:16 - to the original but you'll need to give
114:18 - each table an alias a unique nickname
114:21 - here's another example of a self-join
114:23 - let's select all from our employees
114:26 - table
114:29 - in our employees table Mr Krabs is a
114:32 - manager Sandy Cheeks is an assistant
114:34 - manager let's add an additional column
114:37 - named supervisor ID to who does each of
114:39 - these employees report to Squidward
114:42 - SpongeBob and Patrick and Sheldon they
114:44 - will all report to Sandy who's an
114:46 - assistant manager
114:47 - Sandy will report to Mr Krabs he's the
114:50 - main manager and Mr Krabs doesn't report
114:52 - to anybody let's add another column
114:57 - alter table
114:59 - employees
115:02 - add
115:03 - supervisor ID
115:06 - the data type is int
115:09 - and there's our new column
115:13 - update employees
115:17 - set
115:19 - supervisor ID
115:22 - equal to five that would be Sandy she's
115:24 - the assistant manager
115:27 - where
115:28 - employee ID equals two that would be
115:33 - Squidward
115:36 - Squidward is now supervised by Sandy
115:40 - three
115:42 - that's for SpongeBob four is Patrick
115:46 - six is Sheldon Plankton
115:49 - now Sandy her supervisor idea is going
115:52 - to be one she is supervised by Mr Krabs
115:56 - set supervisor ID equal to one where
115:59 - employee ID equals five
116:02 - and here we are
116:04 - using a self join we are going to
116:06 - display the first and last names of all
116:08 - of our employees along with the full
116:10 - name of the person that's supervising
116:13 - them because currently we only have
116:14 - supervisor ID let's utilize a self-join
116:18 - first let's select all
116:21 - from our table employees
116:24 - we'll need to give this table an alias
116:26 - as a that's the original Let's do an
116:29 - inner join inner join
116:31 - employees as b b will be the copy
116:36 - how are we going to link these
116:39 - on the supervisor ID
116:43 - of table a
116:45 - equals the employee ID
116:49 - of table B
116:53 - all right we still have one massive
116:55 - table but we can see here that Sandy
116:58 - appears in multiple rows which is a good
117:00 - start we don't necessarily need all of
117:02 - this let's select the first name
117:06 - and last name
117:07 - of table a a DOT first name
117:10 - a DOT last name
117:13 - then I'm going to concatenate the first
117:15 - and last name of table B so concat
117:19 - B DOT first name
117:23 - I'll add a space between the first name
117:25 - and last name
117:26 - B dot last name
117:30 - I'm gonna give this column an alias
117:31 - that's really ugly
117:33 - as
117:35 - reports two
117:38 - that's much better all right we have our
117:40 - hierarchy of data Squidward SpongeBob
117:43 - Patrick and Sheldon Plankton they all
117:45 - report to Sandy Sandy she reports to Mr
117:49 - Krabs that Mr Krabs doesn't report to
117:51 - anybody if you would like all of your
117:53 - employees even if they don't report to
117:55 - anybody you could instead use a left
117:57 - join
117:58 - because I left join we will display all
118:00 - of the rows from our table on the left
118:02 - so Eugene Krabs is here but he doesn't
118:04 - report to anybody so yeah basically
118:07 - speaking that's a self join you can use
118:09 - any type of join but the tables you use
118:12 - are the same one you use the original
118:14 - table then a copy of that table but
118:17 - you'll need to give them an alias to
118:18 - distinguish them when we're selecting
118:20 - the first and last names of our tables
118:21 - are we referring to the original table
118:24 - which I named as a or the copy because
118:27 - that makes a difference with self-joints
118:29 - they're great if you ever need to
118:30 - display a hierarchy of data involving
118:32 - the same table but yeah that is a
118:34 - self-join in MySQL
118:39 - hey everybody today I'm going to be
118:41 - explaining views views their virtual
118:43 - tables they're not real they're made up
118:46 - of fields and columns from one or more
118:48 - real tables and they can be interacted
118:50 - with as if they were a real table so
118:53 - here's an example I'm going to select
118:55 - all from my employees table
118:59 - our boss Mr Krabs he would like us to
119:02 - create an employee attendance sheet made
119:04 - up of just the first and last names of
119:06 - all the employees well I could create a
119:08 - view that is made from the first and
119:11 - last name Columns of the employees table
119:13 - now A View isn't a real table but it can
119:15 - behave as if it were I may want to
119:18 - create a view of the employee first and
119:19 - last names instead of another table
119:21 - because we try not to repeat data if we
119:24 - don't have to if I had two tables one of
119:27 - employees and another of employee
119:29 - attendance if I need to remove an
119:30 - employee I would need to do so in two
119:32 - places with the view it's always up to
119:34 - date any changes to one or more of these
119:36 - real tables will also update the view so
119:39 - let's create a view of the first and
119:41 - last name of our employees table to
119:43 - create a view you would type create view
119:46 - then the name of the view let's say
119:48 - employee attendance
119:52 - then as I'm going to zoom in a little
119:55 - bit
119:55 - what would we like to select let's
119:57 - select
119:58 - first name
120:00 - last name
120:02 - from a real table let's say from
120:06 - employees
120:09 - so everything was successful
120:12 - let's refresh our schemas window
120:14 - underneath the views category we have a
120:17 - new view employee attendance
120:19 - I'm going to select all from that view
120:24 - name employee
120:26 - attendance
120:28 - and let's see what we got yeah here's
120:31 - our attendance sheet we have the first
120:33 - and last name columns from the employees
120:35 - table this view can be interacted with
120:37 - as if it were a real table
120:40 - I will add order by
120:43 - last name ascending
120:47 - you can use keywords and operators that
120:49 - we've learned about in previous lessons
120:51 - on A View to drop a view you would type
120:53 - drop view the name of The View
120:56 - employee
120:57 - uh tendons
121:01 - and it's gone
121:02 - all right here's another example so
121:04 - views they're always up to date right
121:06 - let's create a view of customer emails
121:10 - select all from customers
121:13 - let's take a look to see what we have so
121:15 - far
121:16 - I'm going to add one more column a
121:18 - column of customer emails
121:21 - alter table
121:24 - customers
121:26 - add column email data type will be
121:30 - varchar I think varchar 50 should be
121:33 - enough space
121:35 - and there's our new column
121:37 - let's update these rows
121:41 - update customers
121:43 - set email equal to the first email will
121:48 - be for Fred fish f
121:51 - isch gmail.com then we'll need a where
121:54 - Clause where customer ID equals one
122:00 - that's our first email
122:02 - customer ID 2 will be L Lobster
122:06 - gmail.com
122:09 - three is B bass gmail.com
122:14 - four will be
122:16 - puff gmail.com everybody really likes
122:20 - Gmail I guess let's create a view from
122:22 - these customer emails
122:25 - create View
122:28 - customer
122:30 - emails
122:32 - as what are we selecting let's select
122:35 - the email column
122:37 - from our customers table
122:41 - let's refresh our schemas window yeah we
122:44 - have a customer emails View
122:46 - then I will select all from customer
122:51 - emails
122:53 - and look at that we have a listing of
122:56 - all the customer emails and we're going
122:58 - to spam these people with coupons or
123:00 - something I don't know when you update
123:02 - one or more of the real tables in your
123:04 - database those views would reflect any
123:06 - changes let's add one more customer so
123:10 - let's take a look at our customers table
123:11 - select all from customers
123:16 - let's add one more customer
123:18 - insert into our customers table
123:23 - some values
123:24 - we have five columns a customer ID
123:28 - first name first name will be pearl
123:31 - last name is crabs
123:35 - referral ID let's say null
123:38 - email will be P crabs gmail.com
123:46 - okay there's our new customer let's take
123:49 - a look at our view let's see if it
123:51 - updated
123:51 - select all from customer
123:56 - emails
123:59 - yeah look at that it's up to date that
124:02 - is one of the benefits of a view it will
124:04 - update automatically because we're using
124:06 - components from real tables any views
124:09 - that use that data will also be updated
124:11 - the other benefit of a view is that we
124:13 - don't have to repeat data in a real
124:14 - table ideally we'd only want to make a
124:17 - change in one place rather than across
124:19 - multiple tables alright that's a view
124:21 - everybody a view is a virtual table
124:23 - based on the results of an SQL statement
124:26 - they're not real tables but they can be
124:29 - interacted with as if they were real the
124:31 - fields found within a view are fields
124:34 - from one or more real tables in the
124:36 - database so yeah those are views in
124:38 - MySQL
124:41 - yeah it's me again and in today's video
124:44 - I need to explain what indexes are in
124:46 - MySQL and index is a type of data
124:49 - structure they are used to find values
124:51 - within a specific column more quickly
124:53 - it's technically a b tree data structure
124:56 - if you're familiar with what that is but
124:58 - if you don't don't worry about it MySQL
125:01 - normally performs searches sequentially
125:03 - through a column if I'm looking for some
125:05 - specific value just scan each value on
125:08 - the way down to see if those values
125:10 - match depending on what I'm looking for
125:11 - it doesn't really take much time if you
125:13 - have a small data set like I do but
125:15 - imagine if you have millions of
125:17 - transactions searching each transaction
125:20 - one by one is going to take a long time
125:22 - we can speed up that process by using an
125:25 - index by applying an index to a column
125:27 - selecting or searching takes less time
125:30 - however updating takes a lot more time
125:33 - so there are some pros and cons with
125:35 - using an index it really depends on the
125:38 - table if I'm working with a table of
125:40 - transactions transaction actions are
125:42 - being updated all the time people are
125:44 - constantly making purchases I don't
125:46 - think our transactions table would be a
125:48 - good candidate for an index we'll be
125:49 - doing a lot of updating but not a lot of
125:51 - searching however with our customers
125:54 - table I think our customers table could
125:56 - benefit we don't update our customers
125:58 - table very often only a new customer
126:00 - comes in every once in a while let's
126:03 - reduce the time it takes to search for a
126:05 - customer with creating an index how
126:08 - exactly do we want to find the customer
126:09 - believe it or not we do have an index
126:11 - with our customer ID already a customer
126:14 - may give you their last name and or
126:16 - first name let's create an index for
126:18 - these we'll start with last name though
126:20 - to show the current indexes of a table
126:23 - you would type show indexes from the
126:27 - name of the table
126:30 - here are the current indexes for our
126:32 - customers table we do have one already
126:34 - and that's for our customer ID that is
126:37 - the primary key we can search for a
126:39 - customer by their customer ID fairly
126:41 - quickly but not so much by their last
126:43 - name or their first name let's apply an
126:46 - index to those columns
126:47 - to create an index you would type create
126:51 - index
126:52 - then a name I will apply an index to our
126:55 - last name column I will name this index
126:57 - last name idx meaning index
127:02 - on the table customers in this case
127:06 - then list a column I will apply an index
127:10 - to our last name
127:11 - we will be doing a lot of searching by a
127:13 - customer's last name so I might as well
127:15 - apply an index
127:17 - so let's execute the statement let's
127:20 - show our indexes again
127:22 - show indexes from customers
127:27 - and here is our new index last name
127:30 - index it's applied to our column last
127:33 - name if I were to search for a customer
127:35 - by last name that process will be sped
127:37 - up now
127:39 - select all from
127:41 - customers where
127:44 - last name is equal to puff
127:50 - so my data set is already very small to
127:52 - begin with there's not going to be a
127:53 - noticeable difference in this example
127:55 - but if I'm working with a million
127:56 - customers using an index would be a lot
127:59 - faster if I were to search by first name
128:01 - instead where first name equals Poppy
128:05 - uh I spelled copy wrong well we don't
128:08 - have an index applied to our first name
128:09 - as of now it would be slower to search
128:12 - for a customer by their first name
128:14 - compared to their last name that first
128:16 - name doesn't have an index realistically
128:18 - we wouldn't search for a customer just
128:20 - by their first name we would do a last
128:22 - name or a last name and a first name
128:25 - that's where multi-column indexes come
128:27 - in
128:29 - to create a multi-column index you would
128:32 - type create
128:34 - index a unique name let's say last name
128:38 - first name
128:41 - idx
128:43 - on our table customers
128:46 - then list the columns in order the order
128:49 - is very important MySQL has what's known
128:52 - as a leftmost prefix with indexes so we
128:56 - will search by last name
128:59 - then first name
129:04 - let's execute the statement show our
129:06 - indexes show indexes from
129:09 - customers
129:12 - here's our last name first name index
129:15 - there's a sequence we're telling MySQL
129:17 - to search by a last name however if
129:20 - there's also a first name include that
129:22 - too there needs to be a last name to
129:25 - utilize this index if I want to I can
129:27 - get rid of this last name index because
129:29 - our last name first name index would do
129:32 - the same thing we can search for a last
129:34 - name as well as a first name if we would
129:36 - like to drop an index you would type
129:38 - alter table the name of the table
129:42 - drop index the name of the index
129:46 - last name index
129:50 - then I'm going to go ahead and show
129:52 - indexes from customers
129:57 - and the last name index is gone
130:00 - now if I was to search for a customer
130:02 - select all from customers
130:05 - where if I were to search for a last
130:08 - name
130:11 - we would benefit by using this
130:13 - multi-column index if I looked for a
130:16 - last name
130:17 - and a first name
130:20 - we would also benefit there's a sequence
130:23 - we would search through any last names
130:25 - first because that's first in the
130:27 - sequence but if I was to search for just
130:30 - a first name we would not utilize this
130:32 - index
130:34 - well everybody that's an index it's a
130:36 - type of data structure that is used to
130:38 - find values more quickly within a
130:40 - specific column MySQL normally searches
130:43 - through a column sequentially the longer
130:46 - the column the more expensive the
130:48 - operation is going to be if you were to
130:50 - apply an index to a column searching and
130:52 - selecting a value takes less time but
130:54 - updating that table takes longer use it
130:57 - if you think a table is a good candidate
130:58 - where you don't update it very often and
131:01 - well yeah those are indexes in MySQL
131:06 - well hello again everybody today I need
131:09 - to explain subqueries they can be pretty
131:11 - complicated but I'll try my best to
131:13 - explain it simply a sub query is just a
131:15 - query within another query you write a
131:18 - query and close it within a set of
131:20 - parentheses whatever value or values are
131:23 - returned from the subquery you would use
131:25 - within an outer query I'll give you a
131:27 - few demonstrations
131:29 - I have an employees table our manager Mr
131:32 - Krabs he needs us to compare every
131:34 - employee's hourly pay with the average
131:36 - hourly pay of our employees table maybe
131:39 - Mr Krabs is going to give people a pay
131:41 - reduction not an increase a pay
131:43 - reduction but he needs to compare the
131:45 - hourly pay of every employee versus the
131:47 - average how can we write something like
131:49 - that a task like that I would say
131:51 - involves at least two steps we need to
131:54 - find the average hourly pay first and
131:56 - then display every employee's first name
131:59 - last name hourly pay then the average
132:01 - pay let's begin with the average pay
132:05 - select
132:06 - average function
132:08 - hourly
132:10 - pay
132:11 - from my employees table
132:16 - so far so good
132:18 - 15.45 is the average hourly pay of an
132:22 - employee how do I use this number
132:23 - whatever value or values are returned
132:27 - from a sub query we can use within a
132:29 - larger outer query let's delete this
132:32 - semicolon I will surround this statement
132:34 - with a set of parentheses I will then
132:37 - write the outer query let's select the
132:40 - first name
132:41 - last name
132:43 - the hourly pay
132:46 - then comma our subquery
132:50 - from
132:52 - employees
132:54 - there we are although I'm going to give
132:56 - the subquery an alias as average pay and
133:01 - I think I'm going to move this to the
133:02 - next line
133:04 - that is much better so we have
133:06 - accomplished our task we have compared
133:08 - every employee's hourly pay versus the
133:11 - average once we complete the subquery
133:13 - whatever value or values are returned
133:16 - from the sub query we would use within
133:17 - the larger picture the outer query just
133:20 - imagine that we replaced the subquery
133:23 - with 15.45 this value is what was
133:27 - returned although you don't want to
133:29 - write a concrete number like this just
133:31 - because the average pay is bound to
133:33 - change writing a sub query like this
133:35 - would calculate our average pay
133:37 - regardless if we add or remove employees
133:39 - let's try a different example let's find
133:41 - every employee that has an hourly pay
133:44 - greater than the average pay so again we
133:47 - can begin with the sub query
133:49 - we need the average pay
133:51 - select average function
133:54 - hourly pay
133:56 - from employees
134:01 - so again we return 15.45
134:05 - I'll use this within a where Clause
134:06 - let's select
134:08 - the first name
134:10 - last name
134:12 - hourly pay
134:15 - from our employees table
134:18 - where the hourly pay is greater than our
134:24 - sub query
134:26 - Mr Krabs and Sandy Cheeks are both
134:29 - making more than the average hourly pay
134:31 - what was returned was
134:34 - 15.45 then it's just a matter of
134:37 - completing the outer query select the
134:39 - first name last name hourly pay from
134:41 - employees
134:42 - where hourly pay is greater than 15.45.
134:46 - it looks complicated but when you break
134:48 - it down into steps it's a lot easier to
134:50 - visualize we're going to cover a
134:53 - completely different example we will be
134:55 - working with customers and transactions
134:57 - I'm going to select all from my
134:59 - transactions table
135:02 - we have a few transactions I would like
135:05 - to find the first name and last name of
135:08 - every customer that has ever placed an
135:11 - order
135:11 - we can do this step by step let's select
135:14 - every customer ID from transactions
135:17 - that's not null
135:19 - select
135:21 - customer ID
135:25 - from
135:26 - transactions
135:29 - where
135:30 - customer ID
135:33 - is not no let's take a look
135:38 - so we do have a few repeats we have one
135:41 - two three and three you can add this
135:44 - distinct keyword if there's any repeats
135:46 - that would eliminate them
135:48 - we have three registered customers that
135:50 - have placed orders in the past customer
135:52 - ID is one two and three but we don't
135:54 - know who these customers are we will use
135:57 - these values within a larger outer query
136:00 - I will surround this query within a set
136:03 - of parentheses
136:04 - eventually we'll use this within a where
136:06 - clause
136:07 - let's select the first name
136:10 - and last name
136:14 - from our customers table
136:16 - where customer
136:19 - ID I will then use the in operator
136:23 - then add my sub query
136:26 - there we are there's our three customers
136:28 - that have placed orders in the past Fred
136:31 - fish Larry Lobster bubble bass this sub
136:34 - query return to the values one two and
136:36 - three imagine that once this query
136:38 - resolves we are left with the values one
136:42 - two three
136:44 - so this outer query makes a lot more
136:46 - sense select the first name and last
136:48 - name from customers
136:50 - where the customer ID is one of these
136:53 - values one two or three you could do the
136:56 - inverse two find the first name and last
136:58 - name of every customer where the
137:01 - customer ID is not in the sub query
137:06 - this query would return every customer
137:09 - that has never placed an order let's
137:11 - send them a coupon in the mail to
137:12 - convince them to place an order we were
137:14 - left with values one two three
137:18 - select the first name and last name from
137:20 - any customers where the customer ID is
137:23 - not in one of these values one two or
137:26 - three Pearl Krabs had an idea five poppy
137:29 - pups was four
137:31 - so yeah that's a sub query everybody
137:33 - it's just a query within a larger query
137:36 - it helps to visualize this step by step
137:39 - imagine that we're completing the
137:40 - subquery first whatever value or values
137:43 - are returned we can use within a larger
137:46 - query and well yeah those are subqueries
137:48 - in MySQL
137:52 - hello everybody today I will be
137:54 - explaining the group by Clause the group
137:56 - I Clause will aggregate all rows by a
138:00 - specific column it's often used with
138:02 - aggregate functions such as the sum
138:05 - function Max Min average count just to
138:08 - name a few for my example I have a table
138:11 - of transactions now if you've been
138:13 - following along in my video series I did
138:16 - add an additional column named order
138:18 - date and filled in a few dates as well
138:20 - as two additional rows if you would like
138:23 - to follow along I would recommend
138:24 - pausing the video adding a new column
138:27 - for order date add these order dates
138:29 - then add to additional rows that's all
138:32 - the data that we'll need in this topic
138:33 - now our boss Mr Krabs he needs us to
138:37 - tell him how much money he made per day
138:40 - what is the sum of all of the amounts
138:42 - per day we have three different dates
138:44 - January 1st January 2nd January 3rd what
138:49 - is the sum of every amount on these days
138:52 - so we can use the group I Clause that
138:54 - would help us
138:55 - we will select
138:57 - the sum
138:59 - of every amount
139:01 - as a column we will also display the
139:04 - order date from
139:07 - transactions
139:10 - then we will Group by we are grouping by
139:14 - our order date
139:16 - Group by order date column
139:20 - yeah look at that there we are here is
139:22 - the sum of every amount that is grouped
139:24 - by these dates here's the total amount
139:27 - we made January 1st the total amount
139:29 - January 2nd the total amount January 3rd
139:32 - let's try a different function how about
139:34 - V Max function what was the maximum
139:37 - amount on each day
139:39 - these are the maximum transactions that
139:42 - have occurred on these dates
139:44 - what about men
139:47 - these are the minimum amounts grouped by
139:49 - order date
139:51 - what's the average order every day
139:53 - you're the averages
139:55 - maybe count
139:57 - how many transactions have taken place
139:59 - each day we have two orders on the first
140:02 - two orders on the second three orders on
140:04 - the third let's try a different column
140:09 - let's Group by customer ID this time how
140:12 - much has each customer spent total we
140:15 - will select
140:16 - the sum of every amount
140:21 - we will also need a column for customer
140:23 - ID
140:26 - from our table
140:28 - transactions then we will Group by the
140:32 - customer ID column this time
140:35 - here is the sum of every amount that
140:38 - each customer has ever spent we do have
140:41 - some rows that don't have a customer ID
140:43 - so we would sum those amounts as well so
140:47 - far the customer with an ID of three
140:48 - they have spent the most amount of money
140:50 - at our establishment what about the max
140:53 - here is the maximum order that each
140:56 - customer has placed
140:58 - the min
141:01 - the average
141:04 - then count
141:07 - here is the amount of times that each
141:09 - customer has ever visited our
141:11 - establishment what if we would like to
141:13 - use a where Clause well using a where
141:15 - Clause along with the group I Clause
141:17 - normally doesn't work for example I
141:19 - would like to display all customers that
141:22 - have visited more than once who are the
141:24 - repeat customers
141:26 - so if I attempt to use a where Clause
141:28 - where
141:29 - count
141:31 - our amount column is greater than one
141:35 - well we would run into an error if you
141:37 - need to use a where clause and you're
141:39 - using the group by Clause you would want
141:42 - to instead use the word having that
141:45 - would do the same thing Group by
141:47 - customer ID where the customer ID has
141:50 - made more than one purchase
141:53 - we are also aggregating all of the
141:55 - customer ideas that are null let's use
141:58 - the and logical operator to remove that
142:00 - and customer ID is not null
142:07 - there we are the customer that has an ID
142:10 - of three they have visited our
142:12 - establishment two times they meet the
142:15 - requirements of this having Clause they
142:17 - have visited our establishment more than
142:19 - once and their customer ID is not null
142:22 - so if you ever need to use a where
142:24 - Clause if you're already using the group
142:26 - I Clause you would instead use having
142:29 - so in conclusion the group by Clause
142:31 - will aggregate all rows by a specific
142:34 - column it's often used with aggregate
142:37 - functions such as sum Max Min average
142:40 - count
142:41 - for example you could Group by an order
142:43 - date what are the total sales per date
142:46 - or by a customer ID how many times has
142:49 - each customer visited our establishment
142:51 - those are just a few examples and well
142:54 - yeah that is the group by clause in
142:56 - MySQL
143:00 - hey again it's me today I'm going to be
143:02 - explaining the roll-up Clause like a
143:04 - fruit roll-up it's an extension of the
143:07 - group by Clause it produces another row
143:10 - and shows the grand total it's also
143:12 - known as a super aggregate value here's
143:15 - an example I have a table of
143:17 - transactions what I would like to do is
143:19 - to group each transaction by the order
143:22 - date then produce a grand total here's
143:25 - what we'll do I'll give you a few
143:26 - different examples let's begin by
143:29 - selecting the sum of the amounts
143:33 - and the order date
143:35 - from our table
143:38 - transactions then we will Group by the
143:42 - order date
143:45 - and there we are we have the sum of
143:47 - every amount per order date using this
143:51 - roll-up Clause I can add an additional
143:53 - row that shows a grand total so to say
143:56 - all I have to do after the group by
143:59 - Clause is ADD with roll up
144:03 - and there you go here's the grand total
144:06 - 7.88 plus 8.37 plus 8.97 is
144:10 - 25.22 here's another example let's count
144:14 - the transaction ideas
144:19 - buy order date
144:23 - we have two transactions on the first
144:25 - two on the second three on the third
144:28 - for a total of seven transactions
144:31 - I'll give you two more examples
144:35 - let's select the count of our
144:38 - transaction ideas
144:40 - per customer
144:42 - I'm going to give this count an alias as
144:46 - number of orders
144:49 - as well as the customer ID column
144:53 - from our table
144:55 - transactions we will Group by customer
144:59 - ID let's see what we have so far
145:03 - then I will add with roll up
145:08 - here are the amount of orders per
145:10 - customer ID the customer with an ID of
145:13 - three has visited here more than once
145:15 - the grand total of the number of orders
145:17 - is seven that's the roll up
145:20 - one last example let's select our
145:22 - employees table
145:23 - select all from employees
145:26 - we will group all of these employees by
145:29 - their employee ID then display a roll-up
145:32 - of all of the hourly pay as a business
145:35 - how much are we spending on all of our
145:37 - employees per hour
145:39 - so let's select the sum of our hourly
145:43 - pay
145:46 - I'll give this an alias as
145:51 - hourly pay I guess it really isn't
145:54 - different from the column name
145:56 - we will display the employee ID as a
145:59 - column
146:00 - from our table employees
146:03 - Group by
146:06 - the employee ID with rollup
146:13 - here's the hourly pay of each employee
146:15 - as well as a grand total if all of our
146:18 - employees are working currently we are
146:20 - spending as a business
146:22 - 92.75 cents per hour
146:25 - well yeah that's the roll-up Clause
146:27 - everybody it's an extension of the group
146:29 - by Clause it produces another row and
146:32 - shows essentially the grand total it's
146:34 - also known as a super aggregate value to
146:38 - include a roll-up after the group by
146:39 - Clause just add with roll up it's
146:42 - probably good for accounting and well
146:44 - yeah that's the roll-up clause in MySQL
146:50 - why hello there everybody today I will
146:52 - be explaining the on delete Clause
146:54 - there's two versions on delete Sentinel
146:57 - and on delete Cascade with on delete set
147:01 - null when a foreign key is deleted we
147:03 - can replace the foreign key with the
147:06 - value no otherwise there's and delete
147:09 - Cascade
147:10 - when a foreign key is deleted delete the
147:13 - entire row here's an example let's take
147:16 - a look at our table transactions select
147:19 - all from
147:20 - transactions
147:23 - in my transactions table the customer ID
147:26 - column is the foreign key what would
147:29 - happen if I were to delete one of these
147:30 - customers let's select all from our
147:33 - customers table
147:35 - I'm going to delete poppy puff she has a
147:37 - customer ID of four
147:40 - delete from customers
147:43 - where customer ID equals four
147:49 - if you run into this error cannot delete
147:51 - or update a parent row a foreign key
147:53 - constraint fails there's a foreign key
147:55 - that's preventing us from deleting this
147:57 - customer because this customer is used
148:00 - elsewhere in a different table like that
148:02 - transaction stable so just temporarily
148:05 - for this demonstration
148:06 - I'm going to set foreign key checks to
148:09 - be zero
148:11 - and that should work our customer with
148:13 - an idea 4 is gone one two three five
148:17 - poppy puff is no longer within our
148:18 - customers table before I forget I'm
148:21 - going to set foreign key checks back to
148:22 - one
148:24 - let's take a look at our transactions
148:26 - table
148:28 - underneath this transaction of 1005
148:31 - we're referencing a customer that
148:33 - doesn't exist the customer with an idea
148:35 - 4 is no longer within our customers
148:37 - table we have a couple options whenever
148:39 - we delete a primary key from another
148:41 - table that's being used as a foreign key
148:43 - as somewhere else
148:44 - we can either replace that value with
148:47 - null or delete the entire row with
148:50 - Cascade with on delete set null we can
148:54 - replace this value with null much like
148:56 - these two rows
148:58 - or on delete Cascade we can delete the
149:01 - entire row let's begin with on delete
149:04 - Sentinel I'm going to reinsert Poppy
149:07 - puff back into our table of customers
149:10 - and there we are poppy puff is back in
149:13 - the customers table
149:14 - now with on delete Sentinel if we're
149:17 - creating a new table
149:19 - let's say I'm recreating my table of
149:21 - transactions after adding the foreign
149:23 - key constraint foreign key our customer
149:25 - ID column references the customer ID
149:29 - column of the customers table I can add
149:32 - this clause on delete set no
149:37 - that's if I'm creating a new table but I
149:40 - already do have a transactions table I
149:42 - don't want to update it
149:44 - however we can update an existing table
149:46 - with this Clause I already do have a
149:48 - foreign key constraint I'm just going to
149:50 - drop it real quick
149:52 - alter table
149:54 - transactions
149:57 - drop
149:58 - foreign
150:00 - key then the name of the foreign key
150:02 - mine is FK underscore customer ID
150:09 - and that key is now dropped we are going
150:11 - to add a foreign key constraint to our
150:13 - transactions table with this clause on
150:16 - delete Sentinel alter table the name of
150:19 - the table
150:21 - add constraint you can give your
150:24 - constraint a name I'll give it the same
150:25 - name as before
150:27 - FK customer ID
150:31 - list the foreign key
150:33 - foreign key
150:36 - my foreign key is customer ID
150:40 - references
150:42 - another table which was customers and
150:45 - what is the primary key of that table
150:48 - customer ID
150:51 - then we will add the clause on delete
150:54 - set no
150:56 - if I delete a customer ID from customers
150:59 - the foreign key of that row will be set
151:02 - to null automatically let's execute this
151:05 - let's take a look at our transactions
151:07 - table select all from transactions I am
151:11 - now going to delete customer number four
151:13 - from the customers table
151:15 - delete from customers
151:18 - where customer ID equals four
151:24 - yeah check that out with our transaction
151:26 - ID of 1005 the customer ID is now null
151:30 - now there's and delete Cascade when a
151:33 - foreign key is deleted we can instead
151:35 - delete the entire row let's go ahead and
151:38 - add poppy puff back to our customers
151:40 - table
151:43 - all right she's back in
151:45 - let's drop the current foreign key
151:47 - constraint of our transactions table
151:50 - alter table transactions
151:54 - drop
151:56 - foreign key
151:58 - FK
152:01 - customer
152:03 - ID or whatever else it's named
152:07 - and that key is now gone we will add the
152:10 - on delete Cascade Clause to a table that
152:13 - already exists
152:15 - alter table
152:17 - transactions
152:20 - add
152:21 - constraint you can come up with the name
152:24 - FK
152:26 - underscore
152:28 - transactions underscore ID list the
152:31 - foreign key
152:35 - foreign key
152:37 - customer ID
152:41 - references
152:43 - the customers table
152:46 - and the primary key of that table is the
152:49 - customer ID
152:51 - then add on delete
152:54 - Cascade
152:59 - let's take a look at our transactions
153:01 - table
153:02 - select all from
153:04 - transactions
153:07 - oh let's update this customer ID real
153:09 - quick I forgot to do that
153:10 - update
153:12 - transactions set customer ID equal to
153:17 - four
153:18 - where
153:20 - transaction
153:22 - ID equals 1005.
153:26 - yeah I forgot to add that back now let's
153:28 - do it
153:30 - delete from
153:33 - customers
153:35 - where
153:37 - customer
153:38 - ID equals four
153:42 - yeah take a look at that the entire row
153:45 - is now gone
153:46 - we have transactions one thousand three
153:48 - one thousand four one thousand six one
153:50 - thousand five is missing because it was
153:52 - referencing the customer with an ID of
153:54 - four we set the foreign key to delete
153:57 - the entire row when that foreign key is
153:59 - deleted that is on delete Cascade well
154:02 - in conclusion everybody on delete is a
154:04 - clause where if you delete a foreign key
154:07 - you can set that value to be null or
154:10 - Cascade which will delete the entire row
154:12 - which has its uses and well yeah that's
154:15 - the on delete clause in MySQL
154:20 - why hello again it's me so today I gotta
154:23 - explain stored procedures a stored
154:25 - procedure is prepared SQL code that you
154:28 - can save it's great if there's a query
154:30 - that you write often for example I have
154:33 - this statement it's very verbose there's
154:35 - a lot we have to write if this statement
154:37 - is something I have to write often I
154:39 - could save it and reuse it later this
154:42 - statement will interjoin the
154:44 - transactions table and my customers
154:46 - table then display all customers that
154:48 - made a transaction this statement is
154:50 - very verbose if I have to write the
154:52 - statement often I could save it as a
154:54 - stored procedure I can refer to the
154:57 - nickname that I gave that snippet of
154:58 - code the name I gave this procedure was
155:00 - get customers
155:03 - then I need to call this stored
155:05 - procedure
155:07 - and that does the same thing and it's a
155:09 - lot less to write there's also a few
155:11 - other benefits which we'll discuss at
155:13 - the end of the video let's begin with
155:15 - something simple I would like to select
155:17 - all from my customers table to turn the
155:21 - statement or statements into a stored
155:23 - procedure I will type create
155:27 - procedure
155:29 - then a name for the statement or
155:31 - statements I will name this statement
155:33 - get customers
155:36 - add a set of parentheses
155:38 - type the keyword begin
155:41 - wherever your statement or statements
155:43 - end type end then for clarity I'm going
155:46 - to tab all of my statements between
155:48 - begin and end
155:50 - so we have a problem we're trying to
155:52 - create this procedure however MySQL is
155:55 - stopping at this semicolon here we end
155:57 - all statements with a semicolon rather
155:59 - than at the end our semicolon is known
156:02 - as a delimiter it's kind of like the
156:04 - period at the end of a sentence we're
156:06 - telling MySQL that our statement ends
156:08 - here but we need our statement to end
156:10 - here after the end keyword we can
156:12 - actually change the delimiter
156:14 - temporarily type delimiter before we
156:17 - create the procedure
156:18 - typically when people change their
156:20 - delimiter temporarily they'll either use
156:23 - two forward slashes or two dollar signs
156:25 - I'll stick with the dollar signs because
156:27 - I think that's cooler after we create
156:29 - our procedure let's change our delimiter
156:31 - back to the semicolon MySQL no longer
156:34 - recognizes our semicolon as the
156:36 - delimiter after the end keyword I will
156:39 - use our new delimiter to end this
156:42 - statement that should work now let's
156:44 - execute the statement
156:46 - we have created our procedure I'm going
156:48 - to refresh my navigator window
156:50 - underneath stored procedures we have our
156:53 - stored procedure of get customers
156:56 - to invoke the stored procedure type call
156:59 - the name of the procedure get customers
157:03 - add a set of parentheses then a
157:05 - semicolon
157:06 - that will execute whatever code you
157:08 - stored within your stored procedure to
157:11 - drop a stored procedure you would type
157:12 - drop
157:15 - procedure
157:16 - the name of the procedure
157:18 - get
157:20 - customers
157:22 - let's try another example
157:24 - this time we will send our procedure a
157:27 - piece of data within the set of
157:29 - parentheses a customer ID number such as
157:32 - 1 2 3 4 so on and so forth
157:35 - we will get a customer by their customer
157:37 - ID we will create a procedure
157:43 - I will name this procedure find
157:46 - customer
157:48 - add a set of parentheses to find a
157:51 - customer by their customer ID when we
157:53 - invoke the stored procedure within the
157:55 - set of parentheses we will need to place
157:58 - a customer ID but when we create the
158:00 - stored procedure we have to set up what
158:02 - is called a parameter we will type in
158:05 - then a nickname for that piece of data
158:07 - we're passing in a transaction ID I'll
158:10 - give this parameter a nickname of ID
158:12 - then we need the data type of what we're
158:14 - passing in we're passing in an integer
158:18 - so we have one parameter set up let's
158:20 - use that begin keyword that end keyword
158:25 - list our statement or statements between
158:27 - these two keywords I will select all
158:31 - from my customers table
158:34 - where my customer ID equals the ID that
158:40 - we pass in that nickname
158:43 - we need to change the delimiter because
158:45 - MySQL thinks we're trying to end our
158:47 - statement here but we need it to end
158:49 - after the end keyword so let's change
158:51 - the delimiter to double dollar signs
158:56 - then change it back
158:58 - [Music]
159:00 - all right we have created that stored
159:02 - procedure let's invoke it
159:05 - call
159:06 - find customer
159:09 - within the set of parentheses we need to
159:11 - pass in a customer ID number
159:13 - let's pass in one
159:16 - that would give us Fred fish
159:19 - two is Larry Lobster
159:21 - three is bubble Bass
159:24 - five is Pearl crabs when you invoke a
159:27 - stored procedure you can pass in some
159:29 - data depending on what you need exactly
159:31 - for your stored procedure let's drop
159:34 - this procedure then do one last example
159:37 - drop procedure find
159:40 - customer
159:41 - [Music]
159:43 - this time we will send two arguments two
159:46 - pieces of data a first name and a last
159:48 - name
159:50 - create
159:51 - procedure
159:53 - find customer
159:56 - within our set of parentheses the first
159:59 - piece of data we'll pass in will be a
160:01 - first name
160:04 - but first is already a keyword maybe F
160:07 - name meaning first name then the data
160:10 - type let's see for customers the data
160:14 - type of first and last names is
160:16 - varchar50
160:19 - varchar
160:20 - 50.
160:22 - for your next piece of data you would
160:24 - separate that with a comma
160:27 - in
160:29 - our nickname will be lname for last name
160:32 - data type is varchar
160:35 - 50.
160:37 - then I'm just going to put that on a new
160:38 - line for clarity
160:40 - type the begin keyword
160:43 - and
160:44 - write your statements between begin and
160:46 - end
160:47 - we will select all from our customers
160:51 - table
160:52 - where
160:54 - first name equals
160:57 - the name of the data that we pass in
161:00 - and
161:02 - last name equals
161:05 - the other piece of data the second piece
161:06 - the last name
161:09 - again we need to change the delimiter to
161:12 - create this procedure
161:14 - double dollar signs
161:17 - then change it back
161:21 - we have created our stored procedure
161:23 - let's invoke it
161:25 - call find customer
161:28 - within the set of parentheses we will
161:30 - list a first name and a last name
161:34 - Larry
161:35 - comma
161:37 - Lobster
161:39 - get Larry Lobster's information let's
161:41 - find him
161:42 - and there he is customer id2 first name
161:45 - Larry last name Lobster referral ID of
161:48 - one email is L Lobster gmail.com all
161:52 - right everybody that is a sword
161:53 - procedure it's prepared SQL code that
161:55 - you can save it's great if there's a
161:57 - query that you write often a few of the
162:00 - benefits is that it reduces Network
162:02 - traffic it increases performance and is
162:05 - more secure and administrator can grant
162:07 - permission to a user or an application
162:09 - to use a stored procedure one of the
162:12 - downsides though is that it increases
162:13 - memory usage of every connection and
162:16 - well everybody those are stored
162:18 - procedures in MySQL
162:22 - hey everybody today I need to explain
162:24 - triggers when an event happens a trigger
162:27 - does something I know that sounds very
162:29 - generic for example when we insert
162:32 - update or delete a record we can use a
162:35 - trigger to check data handle errors or
162:38 - audit tables we could do a plethora of
162:40 - things here's an example I have a table
162:42 - of employees we have an hourly pay
162:45 - column maybe I would like a salary
162:47 - column whenever we add an employee or
162:50 - update our hourly pay the employee's
162:52 - salary will be changed automatically
162:55 - with the trigger before creating a
162:57 - trigger let's update our employees table
162:59 - We'll add a salary column
163:02 - alter table
163:04 - employees
163:06 - add column
163:09 - salary the data type will be decimal
163:13 - 10 digits Precision of two
163:16 - we will place this column after the
163:18 - hourly pay column
163:21 - then select all from our employees table
163:27 - let's see what we have there we are
163:29 - there's our salary column
163:31 - let's update our employees table
163:36 - set our salary column equal to the
163:40 - hourly pay times to calculate an
163:44 - employee's salary using an hourly pay
163:46 - Sheldon Plankton for example take the
163:49 - hourly pay ten dollars per hour there's
163:51 - typically 40 hours in a work week then
163:54 - 52 weeks in a year
163:56 - Plankton would have a salary of twenty
163:58 - thousand eight hundred dollars so a
164:00 - shortcut you could just take the hourly
164:02 - pay times
164:04 - 2080. there are 2080 work hours in a
164:08 - typical year so take the hourly pay
164:11 - times 2080.
164:14 - then we will select all from
164:18 - employees
164:21 - there is everybody's salary currently
164:23 - whenever we update an employee's hourly
164:26 - pay I would like to also update the
164:29 - salary automatically with the trigger I
164:31 - don't want to have to calculate every
164:33 - employee's salary manually you know
164:35 - using a calculator like I just did we're
164:38 - going to create a trigger
164:39 - create trigger
164:42 - then we need a name for this trigger
164:43 - before we update the hourly pay we're
164:46 - going to do something I will name this
164:49 - trigger before
164:50 - hourly pay
164:54 - update
164:55 - we'll use either the keyword before or
164:58 - after
165:00 - do you want to do something before or
165:01 - after I would like to do something
165:03 - before
165:05 - before what before an insert before
165:07 - delete before an update before an update
165:10 - in this case
165:11 - on our table
165:13 - employees
165:15 - then add this line for each row
165:18 - we may be working with more than one row
165:21 - using a trigger so that's why we're
165:23 - including this line This trigger can
165:25 - involve one or more rows now what are we
165:28 - going to do before we update an
165:30 - employee's hourly pay let's set the
165:33 - salary
165:35 - equal to
165:38 - the hourly
165:40 - pay times 2080 because there's 2080 work
165:46 - hours in a typical year
165:48 - okay there's one more thing I'm going to
165:49 - add let's prefix salary and hourly pay
165:52 - with this new keyword new DOT salary new
165:57 - DOT hourly pay MySQL doesn't know if
166:00 - we're referring to the old salary and
166:02 - the old hourly pay we're telling MySQL
166:05 - we're calculating a new salary use the
166:07 - new hourly pay when that's changed in
166:10 - place of the old one okay let's take a
166:12 - look let's execute this statement
166:16 - our trigger has been created in your
166:18 - schemas window to find any triggers go
166:20 - to tables then find that table where we
166:23 - applied the trigger employees
166:26 - then triggers I probably need to refresh
166:28 - this there it is before hourly pay
166:31 - update otherwise you can type show
166:35 - triggers
166:37 - and here's our trigger
166:39 - here's the trigger name event update the
166:42 - table the statement and the timing
166:46 - let's select all from
166:49 - employees
166:52 - Mr Krabs is going to give himself an
166:54 - hourly pay raise because he's greedy
166:56 - let's update our employees table
167:01 - set the hourly
167:04 - pay
167:06 - equal to fifty dollars per hour
167:09 - where our employee ID equals one
167:14 - so Mr crab's salary is about fifty three
167:17 - thousand dollars per year
167:18 - before we update it we will change the
167:21 - salary of this employee
167:24 - from fifty three thousand dollars to
167:26 - over six figures
167:28 - 104 000 that change happened
167:32 - automatically with the trigger before
167:34 - updating the employee's hourly pay we
167:37 - calculated a new salary automatically
167:39 - let's make another change let's increase
167:42 - every employee's hourly pay by one
167:44 - dollar per hour Mr Krabs is now feeling
167:47 - generous
167:48 - update employees we will set the hourly
167:50 - pay equal to whatever the hourly pay
167:54 - currently is
167:55 - plus one
167:57 - we will apply this for every employee we
167:59 - don't need a where clause
168:02 - there everybody is now making one more
168:04 - dollar per hour and the salaries reflect
168:07 - that let's create a new trigger we will
168:10 - calculate a salary whenever we insert a
168:13 - new employee more specifically whenever
168:15 - we insert a new hourly pay right now we
168:17 - have a trigger that only kicks in when
168:20 - we update an hourly pay
168:22 - okay let's delete plankton
168:24 - Plankton got fired
168:26 - delete from employees
168:30 - where employee ID equals six
168:36 - select all from employees
168:41 - their Plankton is now gone
168:44 - let's create a trigger
168:45 - create trigger
168:49 - before
168:50 - hourly pay
168:53 - insert
168:55 - are we doing something after or before
168:59 - we're doing something before an event
169:02 - before are we updating inserting or
169:06 - deleting we are inserting before we
169:09 - insert a new record
169:11 - on our table employees
169:14 - for each row
169:17 - let's set the new
169:20 - salary
169:21 - equal to
169:25 - the new
169:26 - hourly pay
169:29 - times 2080.
169:34 - here is our new trigger
169:36 - let's take a look at our employees table
169:38 - select all from employees
169:43 - let's insert a new employee
169:46 - insert into
169:48 - employees
169:50 - values
169:52 - I'm just going to follow these columns
169:54 - employee ID 6.
169:57 - first name is Sheldon
170:00 - last name plankton
170:04 - hourly pay is ten dollars per hour
170:07 - for the salary I'm going to set this to
170:09 - null our trigger will kick in and set
170:11 - that
170:12 - position
170:14 - janitor
170:17 - higher date
170:18 - 2023 January 7th
170:23 - supervisor idea five
170:25 - let's see if our salary is calculated
170:29 - it was
170:30 - Plankton's hourly pay is ten dollars per
170:32 - hour meaning he has a salary of twenty
170:35 - thousand eight hundred dollars per year
170:36 - I do have a few more examples triggers
170:39 - are something you'll want to master
170:40 - they're really helpful we're going to
170:42 - create a new table this time
170:45 - create table
170:48 - expenses
170:53 - our expenses table will have three
170:55 - columns
170:56 - an expense
170:59 - ID the data type will be int this will
171:02 - be the primary key you could set this
171:05 - column to Auto increment if you want but
171:07 - but that's overkill for this topic I
171:09 - would say I'm going to try and keep it
171:10 - simple
171:12 - expense name
171:15 - the data type is varchar
171:17 - 50 is good I suppose
171:20 - then expense
171:23 - total
171:24 - I will set that to be decimal
171:27 - 10 digits Precision of 2 is fine then
171:30 - let's select everything from our table
171:33 - expenses
171:37 - let's insert some values
171:40 - insert into expenses
171:45 - we have three rows one two three
171:53 - ID of one
171:55 - the expense name is salaries
171:59 - for the value for now I'm going to set
172:00 - that to be zero the second row will be
172:03 - two
172:05 - supplies zero
172:09 - ID of three
172:11 - maybe taxes
172:14 - and zero
172:18 - I will calculate the expense total of my
172:21 - salaries bro
172:24 - update expenses
172:28 - I will set
172:29 - the expense
172:32 - total equal to I'll use a nested query
172:37 - select the sum of salary
172:42 - from
172:44 - employees
172:46 - where our expense name column right here
172:52 - is equal to
172:54 - salaries
172:59 - this is all of these salaries combined
173:01 - from the employees table the total is
173:04 - two hundred fifty four thousand two
173:06 - hundred eighty dollars whenever we
173:08 - delete an employee we will update this
173:11 - value found within another table our
173:13 - expenses table
173:15 - so let's create a trigger
173:17 - create
173:20 - trigger
173:21 - after salary delete
173:27 - are we doing something before
173:29 - or after we're doing something after
173:32 - deleting a salary
173:34 - after delete
173:37 - on
173:38 - employees
173:41 - for each row
173:43 - we will update our expenses table
173:48 - and set the expense
173:52 - total
173:54 - equal to
173:56 - whatever the expense total currently is
174:01 - minus that employee's salary
174:04 - if we're deleting a salary we will refer
174:07 - to that salary as the old salary
174:13 - the net aware Clause where
174:16 - expense
174:17 - name equals
174:21 - salaries
174:25 - okay we have created our trigger
174:29 - let's take a look at our expenses table
174:36 - I'm going to delete Plankton again he's
174:38 - fired
174:40 - delete from employees
174:45 - where employee ID equals six that's
174:49 - plankton
174:51 - then select all from expenses
174:54 - look at that our expense total changed
174:56 - it's now two hundred thirty three
174:58 - thousand dollars
175:00 - let's create a trigger that will update
175:02 - our salaries whenever we insert a new
175:04 - employee
175:07 - create trigger
175:10 - after salary insert
175:15 - we're doing something after this time
175:17 - after an insert
175:20 - on our table employees
175:24 - for each row
175:26 - we will update
175:29 - our expenses table
175:32 - we will set the expense
175:35 - total
175:37 - equal to
175:38 - the expense total
175:40 - plus the employee's new salary
175:44 - new DOT salary
175:47 - where
175:49 - expense
175:51 - name equals
175:55 - salaries
175:59 - let's insert a new employee
176:02 - let's take a look at our expenses table
176:04 - select all from expenses
176:08 - we will insert a new employee
176:10 - insert into
176:12 - employees
176:14 - our values
176:17 - employee ID 6.
176:19 - first name is Sheldon
176:22 - last name plankton
176:25 - hourly pay of ten dollars per hour
176:28 - the salary will be null that will be
176:31 - calculated automatically with the
176:32 - trigger
176:33 - position is
176:35 - janitor
176:37 - higher date 2023-01-07
176:42 - and a supervisor idea5
176:46 - let's see if this expense total will
176:47 - change
176:49 - which it does when we insert a new
176:51 - employee we're specifically a salary our
176:54 - expense total of salaries will be
176:56 - updated one last example that I promised
176:58 - we're done let's create a trigger that
177:01 - will update this value when we change an
177:03 - employee salary and that will probably
177:05 - be the most complicated one
177:08 - let's create
177:10 - a trigger
177:12 - after
177:14 - salary
177:16 - update
177:18 - we're doing something after
177:21 - we update on our table employees
177:26 - for each row
177:30 - let's update
177:32 - expenses
177:35 - set the expense
177:38 - total
177:39 - equal to
177:41 - the expense total Plus
177:45 - the employee's new salary
177:48 - minus the employee's old salary what's
177:51 - the difference we'll find the difference
177:53 - between the employee's new salary and
177:56 - their old salary add that to the expense
177:58 - total
178:00 - where
178:01 - expense
178:03 - name equals
178:06 - salaries
178:10 - we have created our trigger
178:12 - let's select all from expenses
178:18 - Mr Krabs is going to give himself
178:19 - another pay raise
178:21 - update employees
178:25 - set the hourly pay
178:30 - of Mr Krabs to 100 per hour
178:34 - where employee ID equals one
178:41 - our expense total underneath salaries is
178:43 - now changed it's now 356 thousand two
178:47 - hundred dollars
178:48 - well all right everybody that's a
178:50 - trigger in simple words when an event
178:52 - happens do something such as when we
178:55 - insert update or delete something from a
178:58 - table a few of the benefits is that you
179:00 - can check data handle errors and audit
179:03 - tables it's a really helpful tool to
179:05 - have and well everybody those are
179:07 - triggers in MySQL

Cleaned transcript:

hey what's going on everybody it's your bro hope you're doing well and in this video I'm going to show you how we can start writing SQL using the MySQL workbench so sit back relax and enjoy the show all right let's get started everybody SQL it's an acronym meaning structured query language SQL is used to create retrieve update and delete data from a database suppose we own a business like the Krusty Krab from SpongeBob if we had to manually track all of the transactions by pen and paper well that would be a lot of extra work if we had a database we could keep track of these records electronically and save ourselves a lot of trouble right there's two types of databases I'll discuss relational and nonrelational a table in a relational database it resembles an Excel spreadsheet there's rows and columns tables within a relational database can form well relationships with one another and that is done by this concept of keys which I'll explain in a further topic then there's nonrelational databases that's where our data is organized in any format but a table this could include Json files key value pairs graph data structures entities of that nature to utilize data in a relational database we would use SQL then with a nonrelational database we would use a different language named nosql meaning not only SQL but since this is an SQL series we will be working with SQL and relational databases not nonrelational databases to write SQL statements we would need the help of a special piece of software known as a database management system people shorten this to Simply dbms it's a workspace for us to write SQL statements and generally just work with our database it'll make our lives easier there are different dbms systems you can use one of which is MySQL Microsoft SQL Server Oracle and postgres SQL but there's still many more out there each of these database Management Systems all use SQL but there's subtle nuances between these syntax of each database management system if you're familiar with one database management system transitioning to another will take little to no effort at all in this series we will be working with the mySQL database management system and I'll show you how to download that for both Windows and Mac OS hey everybody in this topic I'm going to explain how we can download MySQL using the Windows operating system first of all head to this website mysql.com then go to the downloads tab scroll down look for MySQL Community downloads we'll click on that click on MySQL installer for Windows make sure that we have our Windows operating system selected then download the first installer no thanks just start my download we will open this download once it's complete there are various setup types depending on what packages you need for this series all we need is the server and the workbench we'll select the custom radio button click next we will need the most recent MySQL server add that to products to be installed open applications go to mySQL workbench we will add the most recent workbench we can close out of that there is a shell if you're interested in using that but I will be sticking with the workbench in this series once we have our server and our workbench I will click next then execute looks like there's an error downloading the workbench I'm going to try again and it worked this time for some reason let's click next execute give it some time once the installation status for the server and the workbench is complete we can click on next next I'll keep these default configurations next use strong password encryption for authentication let's click next here we're going to set the root password to access the server think of some password you would like I'm just going to set mine to be password I'll keep it simple yeah of course the password strength is weak you can add user accounts but that'll be outside the scope of this series click next you can start the MySQL server at system startup if you would like I'll keep that on click next then execute then finish then next yeah we might as well start the MySQL workbench after setup if this window doesn't pop up you can easily just search for it just look for MySQL workbench now we should have a local instance we can click on this to access our server let's pretend that this wasn't here I'm going to right click delete connection if you need to set up a connection hit this plus button we'll need a connection name I'll name this Local Host connection method should be standard TCP IP the host name is 127.0.0.1 at Port 3306 then press ok so now that we have our connection set up we can click on it type in the password you set for the server mine was simply password you could save the password if you want I might as well then okay and here we are within the MySQL workbench all right everybody in this topic I'm going to explain how we can download MySQL using the Mac operating system first head to this URL mysql.com we will go to the downloads tab scroll down look for MySQL Community downloads we'll need both the server and the workbench but let's start with the server click on this file Mac OS 12 DMG archive click the download button click on this link no thanks just start my download when this DMG archive is finished downloading we can double click on it just give it a second double click on the DMG archive allow click continue you can read the license agreement I'm going to pretend I did hit continue install type in your computer's password if this prompt comes up use strong password encryption hit next then we'll need a password for our server type in whatever password you would like to keep it simple for this lesson I'm just going to set my password to be well password by checking this box MySQL server will start once the installation is complete you might as well keep this checked but for demonstration purposes I'm going to show you how to start the server manually then close I'll go ahead and move the installer to the trash bin we have the server downloaded next we need to download the workbench again head to mysql.com go to downloads scroll down to mySQL Community downloads click on MySQL workbench then hit the blue download button no thanks just start my download then we can double click on this DMG archive when it's finished downloading so double click drag and drop the workbench icon into your applications folder before we access the workbench let's be sure that the MySQL server is running click on the top left Apple logo go to system preferences at the bottom left corner look for MySQL click on it then start MySQL server if it's not started already and you can check this checkbox so that your computer starts up with it running all right you may need to type in your password the server is now running to run the workbench we can go to finder then applications look for the MySQL workbench icon double click on it and here we are within the MySQL workbench to access the server you can click on this local instance connection then type in the password that you originally set for the server but if you're missing this connection you can hit the plus button then create a new connection name I'll name this Local Host use standard tcpip for the connection method hostname should be 127.0.0.1 and Port 3306 then press ok but I already have my connection set up click on your connection type in the password you set for the server then press OK and here we are within MySQL workbench hey everybody in this topic I'm going to show you how we can create alter and drop a database what is a database exactly think of it as a folder it acts as a container tables on the other hand would be the files found within the folder in this topic I'm going to show you how we can create the database itself but we won't be working with any tables until the next topic we'll need to begin by heading to our query window which is this large window right here we're going to write a statement to create a database we will type create there is no case sensitivity in MySQL these keywords such as create they can be all uppercase just the first letter could be capital or you could do all lowercase with the keywords I like to make them all uppercase but that's just me create database and then we'll need a unique database name what about my DB then it's important with all SQL statements to end each statement with a semicolon it's like the period at the end of a sentence that's how we know that the statement is complete so you'll need these three words create database then a database name we just named our database mydb hit this lightning bolt button to execute this statement and in my output window unfortunately I can't increase the font size but I can zoom in this action was successful we have created database mydb if you head to your schemas tab then hit the refresh button you should see a database in here named mydb there's also a database for sys sys is the internal database that MySQL uses we'll want to be sure that we're using the database that we just created to use a database we can either right click on the database then click on set as default schema or you could use a statement use then the name of the database my DB semicolon execute the statement we are now using my database to drop a database type drop database then the name of the database and our database is gone unfortunately we do need a database for this series so let's go ahead and recreate our database create database mydb refresh then just to be sure we're using this database we can either use that keyword use or you can right click on the database and set as default schema all right so we can create use and drop a database how about alter there's two features for beginners I'll mention setting a database to read only the other is enabling encryption let's set our database to be read only type alter database the name of the database read only equals one this statement would make our database read only if a database is in readonly mode we can't make any modifications to it but we can still access the data Within let's attempt to drop our database drop database my DB then we have a red X right here that means we could not complete this action drop database mydb schema my DB is in readonly mode to disable readonly mode you would set read only equal to zero now we would be able to drop this database alright everybody that is how to create use drop and alter a database think of a database as just a folder a folder can hold files the files will be the tables that we'll create which will store within the database and in the next topic I'll show you how we can create some tables hey welcome back everybody in this video I'm going to show you how we can make some tables in MySQL a table in a relational database they consist of rows and columns kind of like an Excel spreadsheet in this topic we're going to create the table and the columns but we'll be populating the rows in the next video to create a table you'll type create table than the name of the table I'll create a table named employees then add a set of parentheses semicolon at the end within the set of parentheses we will list the columns for employees let's have an employee ID comma each column is separated with a comma then a first name last name how about hourly pay that'd be good higher date which date were they hired there's one thing that's missing after each column we need to set the data type of what we're storing within each column exactly is the data going to be whole integers decimals text a timestamp those are data types an employee ID that could be a whole integer the data type will be int add int after the column name a first name that's a series of characters the data type for some text would be VAR Char then within parentheses the maximum amount of characters I think 50 characters is enough for a first name last name varchar 50 is good hourly pay maybe our hourly pay is in dollars and cents we'll need a decimal portion there is a data type that is decimal add a set of parentheses we'll add the maximum amount of digits for our decimal I think 5 should be good then a Precision two for two decimal places the reason that I set the maximum digits of my hourly pay to be five is that I don't anticipate anybody's hourly pay being over 999.99 per hour that's pretty absurd I think five is enough then we have higher date there is a data type which is date if you need to work with dates otherwise there's date time if you need to include the time just the date is fine let's execute the script we have created our table employees if I were to refresh my schemas window underneath tables we have our employees table now I'll show you how we can select a table if you need to select your table you can type select asterisk from the name of the table employees let's take a look here's our table so far there's no rows but there are columns we have employee ID first name last name hourly pay and hire date if you need to rename a table you could type rename table the original name employees two whatever the new name is perhaps workers let's try that rename table employees to workers was successful if I refresh my schemas window the table employees is now known as workers but I think that's stupid let's go back and change it rename table workers to employees to drop a table I discussed this earlier you would type drop table the name of the table I don't want to drop this so I'm not going to execute the statement but that's how you would drop a table drop table the name of the table if you need to alter a table there is the alter keyword let's add a phone number alter table employees I'm going to write this next part of the statement on a new line what do we want to add uh what about a phone number add phone number then we'll need to list the data type of this column varchar is good Max size of 15 characters then we will end this statement execute the script all right we have altered our table let's take a look at our table select asterisk asterisk means all I don't know if I explained that select all from employees we have employee ID first name last name hourly pay higher date then our column phone number let's rename phone number and change it to something else we will again use the altar keyword alter table employees rename column phone number to let's say email okay then let's take a look again select all from employees yeah employee ID first name last name hourly pay higher date then email however the data type has not changed for email I'm going to refresh my schemas then underneath information underneath employees our email column has a max size of 15 characters let's change that alter table employees modify column email then the new data type varchar maybe a hundred characters for an email let's execute this statement refresh our schemas yeah now our email column has a size of 100 characters maybe we need to change the position of our email column if you need to move columns around this is how you can do so let's move our email column so it's after our last name column to do that we would type alter table the name of the table modify the name of the column to be moved email in this case then the data type this email column has a data type of varchar100 then after then the name of the column we would like our email column to follow I need my email column to come after my last name column I will type after last name then afterwards I might as well just display everything select all from employees you can write more than one SQL statement here we are employee ID first name last name email hourly pay higher date if you're modifying a column and need it to be first you could just say first email employee ID first name last name hourly pay higher date you can use the after keyword then a column or first if you need the column to be first now to drop a column you would type alter table employees drop column the name of the column to be dropped email our email column is no longer there all right everybody that's how we can create a table and work with the columns in the next video we're either going to talk about data types or learn about inserting rows into our tables I haven't decided yet but we'll probably cover one of those two hey everybody in this topic I'm going to show you how we can insert rows into a table we have a table named employees I will select everything from my table employees here are the columns we have an employee ID first name last name hourly pay and higher date to insert a row into a table we would type insert into the name of the table followed by values parentheses semicolon between this set of parentheses we will add all of the data for a row we will follow this order beginning with employee ID first name last name so on and so forth but we do have to pay attention to the data types too each piece of data will be separated with a comma let's begin with an employee ID the first employee will be Mr Krabs he's the first employee I'll give him an employee ID of one then we'll need a first name I'll put that within quotes because the data type of our first name is varchar basically speaking that's text Mr crab's first name is Eugene according to SpongeBob lore then we have a last name last name crabs hourly pay this is a decimal Mr Krabs hourly pay will be 25.50 I'm just making up numbers here higher date here's the format for a date with anesthetic quotes we will list the year followed by the month then the day I'll set Mr Krabs hired date to be January 2nd 2023 now we can execute these statements yeah here we go here's the first row employee ID one first name Eugene last name crabs hourly pay 2550 higher date January 2nd 2023 it can be somewhat tedious to manually insert each row one statement at a time let's insert multiple rows at once to do that after my set of parentheses I will add another set of parentheses each separated with a comma depending on how many rows I would like to enter so I have four employees I would like to enter I will add four sets of parentheses each separated with the combo and let me just do some formatting to make this look pretty each set of parentheses corresponds to a new row so let's enter all the data that we'll need for this table employee ID number two will be Squidward tentacles Squidward's hourly pay will be maybe a solid fifteen dollars Squidward's higher date the year 2023 January I think January 3rd is good all right so that is the next row let's work on employee number three employee number three will be a SpongeBob last name will be Square Pants SpongeBob's hourly pay will be 12.50 SpongeBob's higher date is the year 2023 January 4th employee for will be Patrick star Patrick's hourly pay will be 12.50 as well higher day 2023 January 5th okay last employee employee ID number five first name Sandy last name cheeks Sandy's hourly pay will be 17.25 she'll be an assistant manager Sandy's start date will be the year 2023 January 6th we can execute this statement to insert multiple rows all at once yep here's our table we have five rows each corresponding to a different employee we have Mr Krabs Squidward SpongeBob Patrick and Sandy I'm going to demonstrate what happens when we attempt to insert a row with missing data I will insert employee number six their first name is Sheldon last name Plankton but we will not insert an hourly rate of pay or a higher date here's what will happen so we have an error column count doesn't match the value at count at Row one we're missing data for our hourly pay and higher date you could insert just select columns that is done by adding after the name of the table add a set of parentheses then name the columns you would like to insert data into all we're adding is an employee ID first name then last name okay now we've inserted a new employee but there is data missing and that's okay we plan on hiring Mr Plankton but we have not yet negotiated an hourly pay or start date we still need to run a background check on him but we want to add him to the system at least so if you ever need to insert data into a row but you need to Omit certain columns you can simply just list the name of the columns you would like to sort data into all right everybody that is how to insert rows into a table in MySQL hey everybody in this video I'm going to show you how we can select data from a table to query all of the data from the table we would type select asterisk meaning all from the name of the table in my case we have table employees this statement select all from employees will give me all columns and all rows but sometimes you may not want all of the data here's a scenario your boss gives you a task of retrieving the full name of every employee well we don't need employee ID hourly pay or higher date for that right we just need a list of the first and last names of our employees table in place of the asterisk meaning all we can select specific columns such as first name and last name we have all of the first and last names from our employees table you can change up the order of the columns too this time I would like last name then first name with our query this returned all of the last and first names of all the employees point being you can select specific columns depending on what you're looking for or everything with the asterisk there is a clause known as the where Clause if we're looking for something specific let's add where then what are we looking for exactly we can write some criteria let's select all from employees where employee ID equals one then end your statement with a semicolon this will give us a specific employee the employee that has an ID of one if I set employee ID to B2 that would give us Squidward three would be SpongeBob 4. Patrick I think you get the idea here's an exercise let's find all the data from employees where the first name equals SpongeBob where first name equals Sponge Bob this query will return employee ID3 the first name last name hourly pay and higher date here's another example let's find all employees that have an hourly pay greater than or equal to 15. our criteria will be where hourly pay is greater than we'll use the greater than operator or equal to 15. this returns three employees Mr Krabs Squidward and Sandy all three of them have an hourly pay of 15 per hour or greater it is possible your query can return multiple results let's find anybody that has a higher date less than or equal to perhaps the year 2023 January 3rd this query returns two results Eugene Krabs and Squidward Tentacles they both match this criteria and in this case we use the less than or equals to operator another operator you should know about is the not comparison operator it's an exclamation point and an equal sign we will check if something is not equal let's find where employee ID does not equal one who are all the employees that have an ID not equal to one that gives a Squidward SpongeBob Patrick Sandy and Plankton on the other hand if I set this to one that would give us Mr Krabs that is the not comparison operator if you need to check if something is not equal in this next example let's pretend that we're human resources we need to find any employees that do not have a higher date and then begin the paperwork for them currently Plankton's hourly pay and higher date are both set to null null meaning no value in place of saying you know higher date equals null in place of using the equal sign we would type is select all from employees where higher date is null that would return Sheldon Plankton because his higher date is null not equals null that doesn't work it would be is null you could even say is not null that would return every employee that does have a higher date all right everybody so that is how to query data from a table select whatever you're looking for it can be everything or specific columns from a table of your choosing where the results equal some criteria that you set it really depends on what you're looking for and that is how to query data from a table hey everybody in this video I'm going to show you how we can update and delete data from a table in my example we have a table of employees however Sheldon Plankton is missing some information and hourly pay and a higher date let's update those fields to update some data in a table we would use the update keyword the name of the table employees in my example then set which column would we like to interact with first let's interact with hourly pay set hourly pay let's pay Plankton 10 and 25 cents per hour we should probably add a where Clause I need to specifically select Plankton where let's select his employee ID where employee ID equals six then semicolon 10 the statement you could also select Plankton by his first name or last name as well when I execute the script Plankton's hourly pay is now 10.25 cents per hour to update multiple columns you can change more than one field at once after your first change you can add a comma then change another field let's change Plankton's higher date to be the following higher date equals 10 230 Dash zero seven I'll make his hourly pay 10.50 I'm feeling generous here we are Plankton's hourly pay is now ten dollars fifty cents his higher date is January 7th 2023. to set a field to null meaning no value you would just say equals null for example let's take Plankton's higher date set the higher date equal to null Plankton's higher date is now null so maybe we're gonna fire him or something in this next example I'll give you a demonstration but you don't want to follow along to update all of the rows within a column you would exclude the where clause if I were to set hourly pay equal to 10.25 that would affect all of the rows after executing this statement the hourly pay for everybody is now 10.25. that's an example of how you could set a column to be one consistent value to delete a row from a table you would type delete from the name of the table now don't write just the statement it will delete all rows in your table here's an example do not do this I will delete from employees there my whole table is gone do not do this be sure to add a where Clause when deleting from a table otherwise this will delete all your rows where employee ID equals six yep and Plankton is no longer there all right everybody that is a super quick video on how to update and delete data from a table hey everybody in this topic I'm going to explain Auto commit commit and rollback Auto commit is a mode by default Auto commit is set to on whenever you execute a transaction within MySQL that transaction is saved what if we were to make a transaction and we need to undo that transaction for example what if we accidentally delete all of the rows of this table don't do what I do but I'll give you a demonstration I accidentally type in delete from employees but I forget to add a where Clause well all my rows are now gone how do I undo these changes well what we're going to do is set auto commit to equal off with this setting set to off our transactions will not save automatically we would need to manually save each transaction it creates a save point so to say I'm going to create a save point by typing commit then execute now I'm going to select my table select all from the name of my table then I'm going to go ahead and delete all the rows delete from employees oh shoot but I forgot to add a where Clause my whole table is gone now luckily we created a safe point with that commit statement to undo these changes I can execute the roll back statement this will restore my current transaction back to the previous save point where we used commit now if I were to select all from the name of my table our table is back to what it previously was and again to save any changes let's say I delete my whole table again delete from employees if I want to save this change I would commit then again I will select my table and that last change is now saved my whole table is gone so yeah that is auto commit commit and roll back by default Auto commit is set to be on any transactions after executing are saved if that mode is set to off you can commit any changes manually to undo any changes use that rollback statement so yeah that is auto commit commit and roll back in MySQL hey everybody in this topic I have a super quick video on getting the current date and time in MySQL let's create a temporary table at the end of this topic we'll delete it create table I'll name this table test we will have three columns the current date I'll name the column my date the data type is date my time the data type is time then we'll combine both my date time the data type is date time let's create this table it was created successfully then I will select all from our table test we have three columns a date a time and a date time which combines both so how do we get the current date maybe we need to create a timestamp of when some event happened maybe a higher date for our employees so I'm going to insert into the name of my table test some values for the current date there is a builtin function current underscore date then add a set of parentheses this function will return the current date for the current time there is a current time function add a set of parentheses to the end of that function for the date time you could just say now the net a set of parentheses after inserting this row let's select all from our table test here's the current date of me filming this video October 21st 2022 the time is seven in the morning the current date time is October 21st 2022 7 in the morning a date time would probably be good for some sort of transaction you need to record for the time being I'm going to set the current time to be null as well as the date time to be null now if you were to take your current date then add plus one this part of my statement would refer to tomorrow October 22nd if you were to take your current date minus one that would technically be yesterday October 20th you could do something similar with your time and date time you can add or subtract seconds but I think that's pretty selfexplanatory we don't need this test table anymore so we can delete it drop table test and it's gone all right everybody so that was a super quick topic but I thought I needed to cover it that is how to get the current date time and date time in MySQL hey everybody I have a quick video on the unique constraint the unique constraint ensures that all values in a column are all different that's basically it we can add this constraint when we create a table or after let's create a new table create table let's create a table of products what products do we offer we'll list the columns let's add a product ID the data type will be int product name the data type will be varchar maybe 25 characters then a price the data type will be decimal our price will have a Max size of four digits and a Precision of two decimal places to add the unique constraint select a column after the data type add the keyword unique and that's all you have to do with this keyword unique we can't insert any product names that are the same they all have to be well unique let's create this table let's say that you forget the unique keyword then you create the table what you could do instead is type alter table the name of the table products which we just created add constraint unique the name of the column within parentheses product name if you forget to add a unique constraint to a column after you already create the table this is what you can write however when I run this I do have a warning I already have a unique constraint on that column but yeah that's how you would add a unique constraint to a column in a table you have already created let's select our table select all from products we have a product ID column product name and a price let's insert all of our values insert into the name of our table which is products values will insert maybe four rows we'll need a product ID name then a price for a product name we have a hamburger and the product ID I'm just making up a number is 100. the name is hamburger the price will be 3.99 fries will be our next item then we have prize the price will be 189. 102 will be soda the price is one dollar even 103 will be ice cream the price will be 149. Let's test the unique constraint that we have added to the product name column suppose that I forget that I have fries on the menu already and I will add another row 104 frize 189 actually let me change the price to maybe something different like 175. here's what happens when I attempt to add two values that are the same duplicate entry fries for Key Products dot product name MySQL is telling us that we have a duplicate under the product name column we have fries twice since we added the unique constraint all values in this column must be different if I were to remove the last column where we have that duplicate well then this would run just fine now let's select everything from products yeah there we go here are the products we have a hamburger fries soda and ice cream all on the menu so yeah that's the unique constraint you can add that constraint when you create a table or after whatever column has that unique constraint all the values need to be different so yeah that's the unique constraint in MySQL hey everybody in this topic I'm going to explain the not null constraint the notch null constraint can be added to a column when you create a table whenever we enter a new row the value within that column can't be null for example I have table products we have a hamburger fries soda ice cream if I were to recreate this table I would type something like this create table products I would list the columns we have product ID the data type is integer product name the data type is varchar I believe I set this to be 25 last time then price that is a decimal we gave this column a Max size of four digits and a Precision of two any column that I do not want to have null values I will simply just add not no this is a constraint now I've already created this table so I'm not going to execute the statement but that's how you would create a table that has the notch null constraint after the column name you just type not null to add the not null constraint to a table that already exists you would instead type alter table the name of the table modify the name of the column the data type of the column in this case decimal four comma two then not null it's a little bit different than the unique constraint in the last topic so let's execute the statement that seemed to work let's add a new item to the menu I will select everything from my products table select from products let's add a new item to the menu and we will test that not null constraint insert into products values we have 104 product ID 104 will be how about a cookie I'm not going to set a price I will say null for the price maybe I'm not decided on what the price is yet after executing the statement well we have an error column price cannot be null since we said that not null constraint on the product price we can't enter a null value we could set this to be zero that's acceptable but it can't be null so yeah everybody that's the not null constraint it's a useful constraint to verify input if there's any column that you don't want to have any null values just add that constraint and yeah that is the not null constraint in MySQL hey everybody in this topic I'm going to explain the check constraint the check constraint is used to limit what values can be placed in a column for example I live in the United States depending on which state you live in there is a minimum hourly wage that employers have to pay in this example let's set an hourly pay to our employees table every employee needs to be paid at least the minimum wage in that region and we can do that with the check constraint we have our table of employees if I were to recreate this table it would look like this I think that was pretty close to add a check to a column at the end of our table this is what we would write check then within parentheses what sort of condition do we want let's check to see if our hourly pay column is greater than or equal to maybe ten dollars per hour that will be the minimum wage in this region this would work if we were to create this table however it's typically a good idea to give your check a name just in case you need to drop it later you can easily identify it so precede check with constraint then a constraint name what about chk meaning check underscore hourly pay this check will be known as check hourly pay so we can identify it then we can drop it or make any changes to it if we need to I do already have an employees table so I'm not going to execute this statement but to add a check constraint to a table you would just add a row like this to the bottom if you instead need to add a check constraint to a table that already exists this would be the syntax alter table the name of the table add constraint then we need a unique name for this constraint check hourly pay that's fine then the check within parentheses hourly pay is greater than or equal to 10. ten dollars per hour okay let's run this yeah that appears to have worked I'm going to select all from employees let's take a look at our table then we will attempt to add a new employee insert into employees values we need an employee ID first name last name hourly pay then a higher date employee ID will be six first name Sheldon plankton for hourly pay let's attempt to pay Plankton maybe five dollars per hour then a higher date 20230107 let's see if that check constraint kicks in we're paying Plankton under ten dollars per hour yeah it doesn't appear that we can do so check constraint check hourly pay is violated now let's pay Plankton ten dollars per hour yeah that worked just fine if you need to delete a check you would type alter table the name of the table drop check then the name that you gave that check in my case it was check hourly pay and that check has been dropped yeah everybody that is the check constraint it's used to limit what values can be placed in a column it's another useful method for checking input and that is the check constraint in MySQL hey everybody in this topic I'm going to explain the default constraint when inserting a new row if we do not specify a value for a column by default we can add some value that we set here's an example let's select all from our products table select all from products in an earlier example we have a table of products a few items on the menu for sale are hamburgers fries soda and ice cream let's add a few items on the menu that would be free this could include napkins straws forks and spoons something you would commonly see at a fast food restaurant if we're not using the default constraint we would have to enter in those prices manually so let's insert into our table products our values product ID 104 will be a straw the price will be zero dollars and zero cents let's do this all together we have 105. 106 107. product number 105 will be a napkin the napkin is zero dollar zero cents 106 is a plastic fork again zero dollars and zero cents 107 is a plastic spoon the price is zero dollars and zero cents then I will select all from my products table here's our new products table we have our four items that actually cost something then our free items which are included with whatever we buy in place of explicitly stating a price one way in which we can make our lives easier if we're adding a bunch of free items to the menu we could set a default constraint where if we don't explicitly set a price the price will default to be zero it will be free so I'm going to undo everything that we just did delete from products where product ID is greater than or equal to 104. and then we can execute that statement if we were recreating this table with the default constraint we would type create table the name of the table products in this case add our columns we have a product ID the data type is integer we have a product name the data type is VAR chart and I forgot what the size was looks like 25. than a price which is a decimal Max digit size of four Precision of two now let's use the default constraint after the column you would like to add that constraint to type default then some value I will set the default value to be zero dollars and zero cents or you could just say zero too that'd be fine you would just add this constraint when creating a new table however I do already have a products table so this technically wouldn't work because that table already exists now to alter a table to include that constraint you would instead type alter table the name of the table alter the name of the column price set default constraint then the value so zero and that appears to have worked let's select our products table select all from products then we will insert some new rows insert into products than our values so we had four rows 104. that was a straw 105 was a napkin 106. was a fork 107. is a spoon then finished the statement with a semicolon so since we set that default constraint we don't need to explicitly list the price but we are missing one thing though when I execute this statement the column count doesn't match so when we insert into products we will list what we're inserting explicitly the product ID and the product name after our table name within parentheses type product ID then product name now this should work yeah and here's our products table with our four inserts all of the prices were set to zero and we did not need to explicitly state that this time if you don't specify a value you'll use whatever the default is here's another example I think you'll like this one let's say we have a table of transactions after inserting a new transaction we will insert a timestamp of when that transaction took place and that time stamp will be the default create table transactions at the end of this topic we will delete this table so don't get too attached to it we will have three columns transaction ID which will be of the data type integer a transaction amount let's just say amount the data type will be decimal five digits Precision of two is good then a transaction date the data type will be date actually let's make this date time I'd like to include the time of when this transaction happened now for the default constraint after the date time let's add default then the Now function we don't need to explicitly add the date and time that will be done automatically which is kind of cool so I'm going to create this table let's select all from transactions if we're going to insert some values we'll need at least a transaction ID and amount the transaction date will be included automatically so let's insert into transactions some values let's do one at a time the first transaction of the day will have a transaction ID of one I suppose a customer came in and bought a hamburger and a soda for a total of 4.99 then we do need to list the transaction ID then the amount after our table name add transaction ID then amount so let's run this yeah cool so there's our transaction ID this was order number one the total amount was 4.99 and we do have a time stamp of when this transaction occurred so the second order of the day will be for a total of 2.89 and that happened at this time then the third order of the day will have a total price of eight dollars 37 cents yep there we are so we don't need this table anymore I'm going to drop table transactions we will recreate this table in the future but I'd rather start fresh all right everybody that is the default constraint when you create a table or alter a table you can set a default value of some value you specify then whenever you insert a row that value will be included automatically which is pretty useful but yeah that is the default constraint in MySQL hey everybody in this topic I'm going to explain the primary key constraint in MySQL the primary key constraint can be applied to a column where each value in that column must both be unique and not null it's typically used as a unique identifier for example I live in the United States each citizen within the United States has a unique social security number there is a strong possibility that two citizens in the United States share the same first name and last name John Smith for example if we're trying to find John Smith well which one are we referring to we could instead search for a citizen with a unique social security number then we know for sure we have the right person that's kind of the same concept with the primary key also a table can only have one primary key constraint here's an example let's create a temporary table of transactions create table transactions there will only be two columns a transaction ID the data type is int I will set the transaction ID to be the primary key there can be no duplicate transaction IDs with the same value and none of them can be null then we will also have an amount how much was each transaction for the data type will be decimal Max size of five digits Precision of two and that is good enough then I will select all from our table transactions here's our table now to add a primary key constraint to a table that already exists this is the syntax alter table the name of your table add constraint the name of the constraint primary key within parentheses the column we would like to apply the primary key to transaction ID in this example then semicolon however we have already applied the primary key constraint to our transaction ID column so this isn't going to work but that's how you would add a primary key constraint to a table that already exists Let's test that theory of that limit of one primary key per table I'll attempt to add a primary key to our amount column and it does not appear we can do so multiple a primary key to find so like I said you can only have one primary key per table and that is typically used as the identifier let's take a look at our transactions let's populate this table with a few rows we will insert into our table transactions some values all we need is a transaction ID and an amount for our transaction ID I'll just make up a number all transactions will start in the thousands this will be our first transaction so the amount a customer bought a hamburger and a soda the total was 4.99 so let's run this there is our first row for the second transaction the transaction ID will be 1001 the customer bought fries and a soda for 289. so that appears to have worked as well now the next customer buys fries and ice cream for 3.38 cents Let's test that theory of each transaction ID having to be unique I'll attempt to insert this row with the same transaction ID as the previous row then let's see what happens duplicate entry 1001 for key transactions.primary yeah it appears that we cannot have two rows with the same primary key they each need to be unique let's change the transaction ID to 1002. that appears to have worked now the next transaction will be a hamburger and soda for 4.49 I will attempt to set the transaction ID to be null which we can't do either column transaction ID cannot be null each value that's set as a primary key can't be null and it needs to be unique so this transaction will have a transaction ID of 1003 two rows can share similar data we have two customers that bought both a hamburger and a soda for the same price but each transaction is uniquely identified by the transaction ID which we set as the primary key let's say that somebody comes in to request a refund and they give us a transaction ID well we can easily look that up and refund them whatever the amount was select amount from transactions where transaction ID equals 1003. so we are going to refund to the customer 4.99 well all right then everybody that is the primary key constraint it's most commonly used as a unique identifier you usually want a primary key in every table you make each value within a column that is set as the primary key cannot be no and it needs to be unique there can only be one primary key per table typically it's used as a unique identifier for each row and yeah everybody that is the primary key constraint in MySQL hey everybody in today's topic I'm going to explain the auto increment attribute in MySQL the auto increment attribute can be applied to a column that is set as a key whenever we insert a new row our primary key can be populated automatically then each subsequent row is auto incremented I'm going to recreate this table transactions but first I need to drop it drop table transactions then we will recreate this table but apply that auto increment feature create table transactions there were two columns a transaction ID the data type was int and an amount the data type was decimal five digits Precision of two the auto increment feature can only be applied to a column that is set as a key our transaction ID will set to be the primary key to apply the auto increment feature add the keyword Auto increment Now by default the primary key is going to be set to 1. so after creating this table I will select all from transactions okay we have successfully created our table then I will insert some values insert into transactions R values so we don't need to explicitly insert a transaction ID that'll be done for us automatically but we still need an amount I will insert 4.99 for the first amount since we're not inserting all of the values into a row explicitly we would need to specify what column this value is for that is for the amount okay let us execute this and take a look yeah so the transaction ID was set to one even though we did not manually insert that value let's insert the next amount so we have 289 yep transaction ID 2 is 289 3 38 transaction ID3 4.99 transaction ID of four we could set our primary key to begin at a different value to do that we would type alter table the name of the table Auto increment let's begin at 1000 instead of one then I'm going to go ahead and drop all the rows we'll start fresh delete from transactions select all from transactions okay then let's insert those rows again and see what happens insert into transactions R values 4.99 was the first amount this value is for our amount column now this transaction ID it begins at one thousand then it should Auto increment the next value was 289 our next transaction ID is 1001 338 1002 then 4.99 1003 all right everybody that is the auto increment feature it's a keyword that can be applied to a column that is set as a key whenever we insert a new row our key will be incremented by one for each row that we insert but yeah that is auto increment in MySQL hey everybody so in this topic I'm going to explain what the foreign key constraint is a foreign key think of it as a primary key from one table that can be found within a different table using a foreign key we can establish a link between two tables there's two primary benefits to this in my transactions table if I were to take a look at the customer ID of who initiated this transaction I could refer to the customers table then find the first and last name of that customer we can do that when we reach the topic of joins but in this video we're going to focus more or less on just creating foreign Keys another benefit when you create a foreign key constraint that would create a link between two tables which prevents any actions that would destroy that link between them so here's an example I have three tables employees products and transactions I'm going to create a new table of customers I'm going to create this table and speed it up feel free to pause the video if you need to here's my table we have a customer ID which is the primary key a first name and a last name let's populate our customers table we have three customers Fred fish Larry Lobster bubble bass each has a unique customer ID we're going to create a link between our customers table and our transactions table via our customer ID I'm going to drop our table transactions drop table transactions we will recreate this table but apply that foreign key constraint so again I'll speed up the footage now what I'm going to do is create a third column to hold our customer ID and the data type isn't I would like to add a foreign key constraint to our customer ID column on the next line I will type foreign key list the column we're applying this foreign key constraint too within parentheses customer ID references our second table the customers table customers then the column of the primary key which was customer ID and that's all you need to do then I will select all from my table transactions here is our table we have a transaction ID this is the primary key the amount of the transaction then the customer ID of who initiated that transaction our customer ID column is the foreign key it points to the customers table based on what the customer ideas we can find the first and last name of that customer to find any active foreign keys go to your table in this case transactions underneath foreign keys this section will display any foreign keys that are applied to this table we currently have one transactions underscore ibfk underscore one if you need to drop a foreign key you would type alter table the name of the table that has the foreign key constraint that would be transactions drop foreign key then the name of this foreign key transactions underscore ibfk underscore one and that foreign key should be gone you could also give your foreign key a unique name alter table the name of the table add constraint then some unique name let's rename that constraint as FK underscore customer ID foreign key the name of the column customer ID references the name of the second table customers then the column that has the primary key customer ID so to apply a foreign key to a table that already exists this would be the syntax you don't necessarily need to name the constraint but if you would like to just add that line add constraint then some unique name let's add this foreign key constraint to a table that already exists it worked if I were to refresh my navigator window we now have a foreign key and it's the one that we gave a name to foreign key customer ID what we're going to do is drop the rows from our transactions table then reinsert them but we will add a value for each foreign key so let's get rid of this delete from transactions then select all from transactions here we are okay so let's insert some new rows I do want to set auto increment to be a thousand so I'm going to do that before we insert some rows alter table transactions Auto increment equals one thousand so let's take a look at transactions then we will insert some new rows insert into transactions R values we had four transactions we will need an amount and the customer ID of who initiated the transaction the first order is for 4.99 customer number three initiated this transaction the second order is 289 customer number two initiated that transaction 338 this is also customer three they returned back the same day 4.99 customer number one initiated that transaction we have our primary key from the transactions table as well as our foreign key each of these customer IDs references the customer ID column from the customers table we won't get to explore that until we reach the topic on joins so the other benefit of a foreign key constraint is that we now have a link between our transactions table and to the customers table MySQL will prevent any actions that would destroy that link between them unless we explicitly drop that foreign key constraint I'm going to delete some of our customers delete from customers where customer ID equals three we were right it doesn't appear that we can do so cannot delete or update a parent row a foreign key constraint fails so yeah that's the foreign key constraint it's a primary key from one table that's found also within a different table but when we're working with that different table we would refer to that key as a foreign key we'll have more practice with this when we reach the topic on joins but yeah that is the foreign key constraint in MySQL hey everybody welcome back again in today's video I'm going to be explaining joins in MySQL a join is a clause that is used to combine rows from two or more tables based on a related column between them such as a foreign key here's an example I have two tables a table of transactions and a table of customers think of these two tables as a Venn diagram transactions will be the table on the left customers will be the table on the right whatever data they have in common is the middle part of our Venn diagram for my demonstration to make more sense I will need to add a few extra rows feel free to pause the video if you need to catch up I will insert into transactions a new row the amount is one dollar the customer ID is null so not all transactions can have a customer ID that foreign key here's a scenario suppose that somebody comes in pays for a soda with cash well we wouldn't have a customer ID right if a customer instead paid with a credit card we could track who that customer was there may be a customer ID who initiated that credit card charge I'm going to insert this row and here's our new transactions table not all rows have a customer ID then let's add one more customer insert into customers first name last name will be poppy Puff let's select all of our customers now not all transactions have a customer ID and if not all customers have ever initiated a transaction they could be registered as a customer but they have never actually bought anything yet using joins let's take a look at what data these two tables have in common we'll discuss inner joins left joins and right joins let's begin with an inner join to create an inner join between these two tables you would type select all from which table would you like to be on the left think of that Venn diagram our transactions table will be on the left from transactions inner join whatever table you would like to be on the right in this case customers on we're going to join these two tables together by the foreign key from transactions we'll take transactions.the name of the foreign key column which was customer ID equals the table on the right dot the name of the primary key column which was customer ID then we will execute the statement and here's our new table we have created an inner join from these two tables based solely on what they have in common if you remember we don't have that Row for that transaction for one dollar that doesn't have a customer ID as well as our customer poppy puff there's no role for her in this table what we're telling MySQL is to select all rows from these two tables that have matching customer ideas so that's why some data was excluded one thing you could do with a join this applies to left joins and right joins as well you don't necessarily need to display every single column from both tables you can select specific columns let's select our transaction ID the amount the first name then the last name this would make it a lot easier to find the first and last name of who initiated a transaction at a given time we know who bought which order so that is an inner join join together any matching rows based on some Link in this case we're joining these two tables together by their customer ID now with the left join we are going to display everything from the table on the left but let's select all with the left join we will display everything from the table on the left our transactions however if there is a matching customer ID pull in any relevant data from the table on the right even though there's no customer ID with this latest row we're still going to display it with a left join but there's no data to pull in from the right table because there's no registered customer ID with the right join we will display the entire table on the right if there's any matches we will pull in any matching rows from the left we are displaying all of our customers if any of these customers ever initiated a transaction we will include the data from those transactions we still have poppy puff in our table but she has no relevant transactions she never initiated one so yeah everybody those are joins a join is used to combine rows from two or more tables based on a related column between them such as a foreign key like customer ID and that is a quick introduction to joins in MySQL hello again everyone today I will be explaining functions in MySQL a function is a stored program that you can pass parameters into to return a value if you look on mysql's main website there is a huge comprehensive list of functions in this video I'll only be showing you a few of the more useful ones for beginners but just so you know there's a lot of functions out there that do all sorts of things what if I would like to count how many transactions took place on a certain date to do that we can use the count function select count parentheses within my set of parentheses I can place a column then calculate how many rows are within that column let's calculate amount we will count how many rows are within the column amount then we will need a table from our table transactions so you could add a where Clause 2 like where transaction date is on a certain date but I want to keep this video as simple as possible this function will return all of the rows within this column amount which is five we have five transactions within this table now this column header is kind of ugly the column name is count the amount column you could give a column an alias by adding as then some nickname let's say count it's not necessary but if you want to make the column header look pretty or rename it as something you could do that count five we could even rename this column as today is transactions that works too do whatever you want to do let's find you the maximum value of our column amount by using the max function within the set of parentheses pass in your amount column I will give this column an alias of maximum and that is the maximum amount the largest order was 4.99 there's also Min to find the minimum as minimum the smallest order was for one dollar you could do average which is AVG as average the average order is three dollars and 45 cents we can find the sum of a column by using the sum function as some the sum of all of our transactions was 17 and 25 cents for this next example we're going to concatenate the first and last name of our employees select all from employees we have two columns one for a first name the other for a last name we're going to combine these two columns together with the concat function then create a new column named full name here's how to do that select concat first name last name then I'll add an alias as ball name here's what we have so far so we are concatenating the first and last names of our employees uh however we should separate each name with the space within our concat function I'll add a space character surrounded with commas to separate each argument there that's much better so that is the concat function we can concatenate values together such as if you need a column for somebody's full name but yeah those are just a few functions there's still many more we haven't covered but these are a few of the beginner ones you may be interested in but yeah those are functions in MySQL why hello again everybody guess who it's me again today I will be explaining logical operators in MySQL I would think of them as keywords that are used to combine more than one condition for my examples to make more sense I will add one more column a job column so let's alter our table of employees alter table employees add column job the data type will be varchar25 I'll add this column after our hourly pay column then select all from my table employees here is our job column let's add some jobs to our employees let's update employees set job equal to Let's select Mr Krabs he will be a manager then be sure to add a where Clause employee ID equals one Mr Krabs is a manager Squidward will be a cashier employee ID equals two SpongeBob employee ID3 he will be a cook Patrick will also be a cook Sandy will be an assistant manager let's abbreviate the word assistant manager Plankton Plankton will be a janitor how is this related to logical operators you're wondering well using logical operators we can check more than one condition suppose that our boss wants us to find any Cooks that were hired before January 5th how can we write a query that can satisfy those two conditions here's how we will use the and logical operator select all from our table employees using a where Clause we will write two conditions find any employees where the higher date is less than the year 2023 January 5th so far this would give us three results Mr Krabs Squidward and SpongeBob from these three employees how do we find any Cooks well we can add the and logical operator and we can write some other condition job is equal to cook there we have SpongeBob he is a cook that was hired before January 5th so that's the and logical operator you will return any results that match these two criteria another logical operator is or you can check more than one condition as long as one of those conditions is true that row will be true let's find any cooks or cashiers where job is equal to cook that gives us both SpongeBob and Patrick they're both Cooks or job is equal to cashier that would also include Squidward he's not a cook but he is a cashier with the or logical operator only one condition needs to be true whereas with the andological operator both conditions must be true so that's the main difference between the and as well as or logical operators with the not logical operator not is a little different not basically reverses anything you say let's find any employees that are not a manager where not job equals manager we have all of our employees besides Mr Krabs we have cashiers Cooks assistant managers and janitors you can combine logical operators too let's find anybody that's not a manager and not an assistant manager let's add and not job equals assistant manager we have everybody besides a manager and besides an assistant manager Mr Krabs and Sandy are not within the results so that is the not logical operator it basically reverses whatever condition you write there's also between is used within a single column it's very similar to the andalogical operator except people prefer to use the between logical operator when working with the same column just because of its readability let's find any employees where the higher date is between January 4th and January 7th where higher date between two values 2023 0 1 0 4 and 2023 0 107 so we have SpongeBob Patrick Sandy Sheldon there's also the in logical operator we can find any values that are within a set let's find where job is in cook cashier or a janitor yep we have a cashier a cook a cook and a janitor there is more than one way to write a query where you need to match more than one condition really the best way depends on your data set basically speaking logical operators are used to check more than one condition but they're done so in different ways depending on the logical operator that you're using but yeah those are logical operators in MySQL hello again people today I'm going to be explaining Wild Card characters there are two the percent and the underscore each of these is used to substitute one or more characters in a string here's an example I have a table of employees what if I need to find any employees whose first name begins with an S well you would think you could write something like this where first name is equal to s now this technically doesn't work here what we're doing is telling MySQL to find any first names that are equal to the character s if I instead need to find any first names that begin with the character S I can type S then the percent wildcard operator the percent wildcard operator represents any number of random characters but there's one more change we need to make still replace the equals operator with the like operator like when used with an aware Clause searches any patterns we will return any first names that begin with the letter s so the results are Squidward SpongeBob Sandy Sheldon their first names all begin with the letter s we could do this with dates too let's find any higher dates in the year 2023 technically that would return everything in my example because all the higher dates are in 2023. we can even find if something ends with a character let's find any last names that end with the character r that would return Patrick star star with an r at the end you could add more than one character let's find any first names that start with SP then change last name to first name that would return one result SpongeBob SP on the other hand we have the underscore wildcard character the underscore wildcard character represents one random letter let's find any jobs that have one random character followed by oh okay that would return any Cooks the underscore kind of reminds me of that game Wheel of Fortune MySQL is going to attempt to fill in any blanks with a matching character if we had two underscores well there technically wouldn't be any matches MySQL would technically be looking for a fiveletter word where the middle three characters are oh okay but there's no matches here's another example find any higher dates in January higher date is like the year is going to be random we have four digits one two three four a dash character zero one Dash then a day of the month so two underscores again that would return pretty much all of our employees they were all hired in January maybe we don't care about the year or the month but we care about the day of the month so let's replace the month with underscores zero two that would return Mr Krabs zero three that would be Squidward now you could combine these two different wild cards together too let's take a look at our jobs let's find any jobs where the second character is an a I know it's kind of a weird example but hopefully it'll make sense select all from employees where job is like now we're going to combine these two wild characters the second character has to be an a we could use the underscore for the first character a then any amount of random characters afterwards that would return a manager cashier or janitor so yeah those are wild card characters you can use these to substitute one or more characters in a string it's pretty helpful if you need to find if a string starts with some value or ends with some value and those are wild card characters and MySQL hey everyone I have a super quick video on the order by Clause the order by Clause sorts the results of a query in either ascending or descending order based on which column we list here's an example I have a list of employees how can I list all of these employees alphabetically currently they are listed by their employee ID well at the end of my statement I can add an order by Clause order buy then a column to order our Rose by let's order all of these employees by their last name Now by default they will be ordered in ascending order or alphabetical order if you're working with characters for descending order or reverse alphabetical order just add desc for descending now these employees are listed in Reverse alphabetical order or descending order for us sending order that would be ASC but that is the default so you don't explicitly need ASC let's order these employees by their first name first name these employees are listed alphabetically by their first name let's do reverse alphabetical order yeah there we are let's order these employees by their higher date higher date and ascending order you don't even technically need that keyword ascending it would still work just fine now descending I think we have the hang of it now let's select all from transactions there's one more thing I want to show you select all from transactions we have two transactions with the same amount let's order by amount when ordering a column if two values share the same amount we can add an additional column to compare by order by amount but if two amounts are the same order by maybe customer ID these two rows are now flipped so you can order by more than one column if two columns share the same amount then order by some other column then you can add ascending descending however you want to order your table so yeah that is the order by Clause you can order your rows by some column you specify in ascending or descending order but yeah that is the order by clause in MySQL hello it's me again today I will be explaining the limit Clause the limit Clause is used to limit the number of records that are quarried it's very useful if you're working with a lot of data one use is that you can display a large data set on different pages also known as pagination here's an example I have a few customers not very many I'm working with a small data set if I would ever need to limit the amount of customers that are displayed I can add a limit Clause then set how many I would like to display I would like the first customer limit one that would return Fred fish in my example if I need the first two that would be Fred then Larry three is Fred Larry bubble that's kind of a weird first name and then four would be poppy currently these records are organized by customer ID we could combine the limit Clause with the order by clause let's order by last name then limit one that would return bubble bass it's an alphabetical order or we could do last name descending limit one poppy puff has the name and least alphabetical order I guess basically speaking limit limits the number of records that are returned it's very useful in combination with the order by clause which we learned about in the previous topic now with the limit Clause you can add an offset limit one one the first number is the offset limit to one record after the first that should technically return Larry Lobster yep Larry so limit two would add an offset of two which returns bubble Bass limit three would return poppy puff using an offset would be very helpful when working with a large data set if you need to display your records on different pages suppose that our data set is maybe 100 customers I need to display 10 customers per page so the first 10 would be just limit 10. but you know my data set's really small so it's not going to be apparent if I need the next set of 10 customers I can add an offset of 10. although I don't have that many customers to begin with the next set of 10 customers would be an offset of 20 then displayed 10 you know then 30 40 so on and so forth so yeah that's the limit Clause you will limit the results that are queried type limit then some number you could add an offset so display some number of Records after an offset but yeah that is the limit clause in MySQL hey welcome back today I will be explaining the union operator the union operator combines the results of two or more select statements I have created two additional tables I'm only going to be using them temporarily I'll delete them once we're done with this example I have a table of income we have two columns an income name and an amount I've just made up some numbers they're probably not realistic I also have a table of expenses here's my table of expenses we have an expense name and some amount again I just made up some numbers suppose that our boss wants us to print a list of all of our different income versus expenses all in one window well we can easily do that with the Union operator after our first select statement delete the semicolon add Union we now have a window with the results of these two select statements we have income and expenses let's perform a similar operation with our employees and customers table I'm going to drop these tables though they were only temporary drop table income drop table expenses let's begin Mr Krabs our boss he wants us to create a list of everybody that enters the store all employees and all customers while we can join together those select statements with the Union operator but first let's take a look at each of these tables select all from employees we're going to have one problem our employees table has six columns whereas our customers table our customers table has three columns if you're combining two different select statements that have a different amount of columns a union isn't going to work we have a problem the used select statements have a different number of columns in order to join two select statements together they need the same number of columns my employees table has six columns my customers table has three well we could select distinct columns all I need is the first name and the last name of each of these tables first name last name and look at that that works we have now created a list of all of the different people that enter our store both employees and customers there is a different variation of the Union operator that is Union all that would include any duplicates if more than one value is found within each table just temporarily I'm going to insert Plankton into our customers table insert into customers some values customer ID 5 first name Sheldon last name plankton select all from customers Plankton is both in our customers table and our employees table now what would happen if I add a union to those two select statements with just Union by itself union doesn't allow duplicates Sheldon Plankton is only within our list once with Union all you would include duplicates now Sheldon Plankton is in this list twice so use whatever is more fitting for your situation I'm gonna go ahead and delete Plankton from this table of customers all right yeah so that's a union everybody a union combines the results of two or more select statements in order to do so those two or more select statements need the same number of columns but yeah that is the union operator in MySQL hey everybody today I'm going to be explaining self joins a selfjoin is really just any type of join where you join together another copy of a table to itself they're used to compare rows of the same table they really help with displaying a hierarchy of data so a self join you just join another copy of a table to itself so here's an example I have a table of customers I'm going to create another column named referred by if a customer refer somebody and they register as a new customer maybe they get like a free meal or something let's create a new column within our customers table alter table customers add referral ID the data type will be int then select all from customers now let's populate this column update customers set referral ID equal to one where customer ID equals to our first customer Fred fish he was not referred by anybody that value will be null however Larry Lobster was referred by Fred fish we'll set the referral ID for him to be won Larry Lobster was referred by Fred fish so Fred fish gets a free meal at the Krusty Krab now Larry Lobster he's going to refer both bubble bass and Poppy puff so he'll get two free meals set referral ID equal to 2 where customer ID equals three and four Fred fish referred to Larry Lobster Larry Lobster referred bubble bass and Poppy puff it makes me think of a pyramid scheme I'm going to use a selfjoint to replace our referral ID column with the first and last name of the customer that referred one of these people so I'm going to select all Now when using a self join we'll take from our table customers than inner join customers basically we're just joining another copy of a table to itself but we'll need to give these tables what's known as an alias a nickname let's say from customers as maybe a that's the nickname inner join customers as b the original copy of our customers table will be referred to as a the copy will be B they are the exact same table but we have two of them and we'll stitch them together with a join to link these Tables by the referral ID and the customer ID I'll add this additional line on referral ID equals customer ID let's take a look to see what we have so far column referral ID in on Clause is ambiguous am I referring to the referral ID of table a or table B I'm referring to the referral ID of table a what I'll do is prefix this column name with the name of my table followed by dot a DOT referral ID equals I need the customer ID from my table copy which is known as B I will prefix B to this customer ID column the referral ID of table a is linked to the customer ID of table B oh yeah look at that we have joined these two tables the referral ID of table a is linked to the customer ID of table B I don't necessarily need all of these columns we're displaying everything let's select only specific columns I would like a customer ID first name last name now we have one problem with our first name and last name do we mean the first and last name Columns of table a or table B let's prefix these columns with the name of our table the Alias we're using I would like the first name from table a the last name from table a followed by I'm going to put this on a new line just for readability the first name of table B then the last name of table B then be sure to include that within the customer ID too so the customer ID of table a okay we're getting somewhere customer ID first name last name first name last name okay so if somebody were looking at this table they would think why are there two columns for both first name and last name let's concatenate these two columns concat first name last name I'll add a space in between the first name and last name I'm going to give this column an alias as referred by all right there's our table we have all of our customers who were referred by another customer Larry Lobster was referred by Fred fish bubble bass and Poppy puff were both referred by Larry Lobster you could use a different type of join besides an inner join we could use a left join what we're telling MySQL is to display all of our customers on the left table if one of these customers was referred by another customer join those rows as well you can see that with the left join that Fred fish is still within our table but he wasn't referred by anybody that value is null so that's one example of a selfjoin we're creating another copy of the same table then joining it together to the original but you'll need to give each table an alias a unique nickname here's another example of a selfjoin let's select all from our employees table in our employees table Mr Krabs is a manager Sandy Cheeks is an assistant manager let's add an additional column named supervisor ID to who does each of these employees report to Squidward SpongeBob and Patrick and Sheldon they will all report to Sandy who's an assistant manager Sandy will report to Mr Krabs he's the main manager and Mr Krabs doesn't report to anybody let's add another column alter table employees add supervisor ID the data type is int and there's our new column update employees set supervisor ID equal to five that would be Sandy she's the assistant manager where employee ID equals two that would be Squidward Squidward is now supervised by Sandy three that's for SpongeBob four is Patrick six is Sheldon Plankton now Sandy her supervisor idea is going to be one she is supervised by Mr Krabs set supervisor ID equal to one where employee ID equals five and here we are using a self join we are going to display the first and last names of all of our employees along with the full name of the person that's supervising them because currently we only have supervisor ID let's utilize a selfjoin first let's select all from our table employees we'll need to give this table an alias as a that's the original Let's do an inner join inner join employees as b b will be the copy how are we going to link these on the supervisor ID of table a equals the employee ID of table B all right we still have one massive table but we can see here that Sandy appears in multiple rows which is a good start we don't necessarily need all of this let's select the first name and last name of table a a DOT first name a DOT last name then I'm going to concatenate the first and last name of table B so concat B DOT first name I'll add a space between the first name and last name B dot last name I'm gonna give this column an alias that's really ugly as reports two that's much better all right we have our hierarchy of data Squidward SpongeBob Patrick and Sheldon Plankton they all report to Sandy Sandy she reports to Mr Krabs that Mr Krabs doesn't report to anybody if you would like all of your employees even if they don't report to anybody you could instead use a left join because I left join we will display all of the rows from our table on the left so Eugene Krabs is here but he doesn't report to anybody so yeah basically speaking that's a self join you can use any type of join but the tables you use are the same one you use the original table then a copy of that table but you'll need to give them an alias to distinguish them when we're selecting the first and last names of our tables are we referring to the original table which I named as a or the copy because that makes a difference with selfjoints they're great if you ever need to display a hierarchy of data involving the same table but yeah that is a selfjoin in MySQL hey everybody today I'm going to be explaining views views their virtual tables they're not real they're made up of fields and columns from one or more real tables and they can be interacted with as if they were a real table so here's an example I'm going to select all from my employees table our boss Mr Krabs he would like us to create an employee attendance sheet made up of just the first and last names of all the employees well I could create a view that is made from the first and last name Columns of the employees table now A View isn't a real table but it can behave as if it were I may want to create a view of the employee first and last names instead of another table because we try not to repeat data if we don't have to if I had two tables one of employees and another of employee attendance if I need to remove an employee I would need to do so in two places with the view it's always up to date any changes to one or more of these real tables will also update the view so let's create a view of the first and last name of our employees table to create a view you would type create view then the name of the view let's say employee attendance then as I'm going to zoom in a little bit what would we like to select let's select first name last name from a real table let's say from employees so everything was successful let's refresh our schemas window underneath the views category we have a new view employee attendance I'm going to select all from that view name employee attendance and let's see what we got yeah here's our attendance sheet we have the first and last name columns from the employees table this view can be interacted with as if it were a real table I will add order by last name ascending you can use keywords and operators that we've learned about in previous lessons on A View to drop a view you would type drop view the name of The View employee uh tendons and it's gone all right here's another example so views they're always up to date right let's create a view of customer emails select all from customers let's take a look to see what we have so far I'm going to add one more column a column of customer emails alter table customers add column email data type will be varchar I think varchar 50 should be enough space and there's our new column let's update these rows update customers set email equal to the first email will be for Fred fish f isch gmail.com then we'll need a where Clause where customer ID equals one that's our first email customer ID 2 will be L Lobster gmail.com three is B bass gmail.com four will be puff gmail.com everybody really likes Gmail I guess let's create a view from these customer emails create View customer emails as what are we selecting let's select the email column from our customers table let's refresh our schemas window yeah we have a customer emails View then I will select all from customer emails and look at that we have a listing of all the customer emails and we're going to spam these people with coupons or something I don't know when you update one or more of the real tables in your database those views would reflect any changes let's add one more customer so let's take a look at our customers table select all from customers let's add one more customer insert into our customers table some values we have five columns a customer ID first name first name will be pearl last name is crabs referral ID let's say null email will be P crabs gmail.com okay there's our new customer let's take a look at our view let's see if it updated select all from customer emails yeah look at that it's up to date that is one of the benefits of a view it will update automatically because we're using components from real tables any views that use that data will also be updated the other benefit of a view is that we don't have to repeat data in a real table ideally we'd only want to make a change in one place rather than across multiple tables alright that's a view everybody a view is a virtual table based on the results of an SQL statement they're not real tables but they can be interacted with as if they were real the fields found within a view are fields from one or more real tables in the database so yeah those are views in MySQL yeah it's me again and in today's video I need to explain what indexes are in MySQL and index is a type of data structure they are used to find values within a specific column more quickly it's technically a b tree data structure if you're familiar with what that is but if you don't don't worry about it MySQL normally performs searches sequentially through a column if I'm looking for some specific value just scan each value on the way down to see if those values match depending on what I'm looking for it doesn't really take much time if you have a small data set like I do but imagine if you have millions of transactions searching each transaction one by one is going to take a long time we can speed up that process by using an index by applying an index to a column selecting or searching takes less time however updating takes a lot more time so there are some pros and cons with using an index it really depends on the table if I'm working with a table of transactions transaction actions are being updated all the time people are constantly making purchases I don't think our transactions table would be a good candidate for an index we'll be doing a lot of updating but not a lot of searching however with our customers table I think our customers table could benefit we don't update our customers table very often only a new customer comes in every once in a while let's reduce the time it takes to search for a customer with creating an index how exactly do we want to find the customer believe it or not we do have an index with our customer ID already a customer may give you their last name and or first name let's create an index for these we'll start with last name though to show the current indexes of a table you would type show indexes from the name of the table here are the current indexes for our customers table we do have one already and that's for our customer ID that is the primary key we can search for a customer by their customer ID fairly quickly but not so much by their last name or their first name let's apply an index to those columns to create an index you would type create index then a name I will apply an index to our last name column I will name this index last name idx meaning index on the table customers in this case then list a column I will apply an index to our last name we will be doing a lot of searching by a customer's last name so I might as well apply an index so let's execute the statement let's show our indexes again show indexes from customers and here is our new index last name index it's applied to our column last name if I were to search for a customer by last name that process will be sped up now select all from customers where last name is equal to puff so my data set is already very small to begin with there's not going to be a noticeable difference in this example but if I'm working with a million customers using an index would be a lot faster if I were to search by first name instead where first name equals Poppy uh I spelled copy wrong well we don't have an index applied to our first name as of now it would be slower to search for a customer by their first name compared to their last name that first name doesn't have an index realistically we wouldn't search for a customer just by their first name we would do a last name or a last name and a first name that's where multicolumn indexes come in to create a multicolumn index you would type create index a unique name let's say last name first name idx on our table customers then list the columns in order the order is very important MySQL has what's known as a leftmost prefix with indexes so we will search by last name then first name let's execute the statement show our indexes show indexes from customers here's our last name first name index there's a sequence we're telling MySQL to search by a last name however if there's also a first name include that too there needs to be a last name to utilize this index if I want to I can get rid of this last name index because our last name first name index would do the same thing we can search for a last name as well as a first name if we would like to drop an index you would type alter table the name of the table drop index the name of the index last name index then I'm going to go ahead and show indexes from customers and the last name index is gone now if I was to search for a customer select all from customers where if I were to search for a last name we would benefit by using this multicolumn index if I looked for a last name and a first name we would also benefit there's a sequence we would search through any last names first because that's first in the sequence but if I was to search for just a first name we would not utilize this index well everybody that's an index it's a type of data structure that is used to find values more quickly within a specific column MySQL normally searches through a column sequentially the longer the column the more expensive the operation is going to be if you were to apply an index to a column searching and selecting a value takes less time but updating that table takes longer use it if you think a table is a good candidate where you don't update it very often and well yeah those are indexes in MySQL well hello again everybody today I need to explain subqueries they can be pretty complicated but I'll try my best to explain it simply a sub query is just a query within another query you write a query and close it within a set of parentheses whatever value or values are returned from the subquery you would use within an outer query I'll give you a few demonstrations I have an employees table our manager Mr Krabs he needs us to compare every employee's hourly pay with the average hourly pay of our employees table maybe Mr Krabs is going to give people a pay reduction not an increase a pay reduction but he needs to compare the hourly pay of every employee versus the average how can we write something like that a task like that I would say involves at least two steps we need to find the average hourly pay first and then display every employee's first name last name hourly pay then the average pay let's begin with the average pay select average function hourly pay from my employees table so far so good 15.45 is the average hourly pay of an employee how do I use this number whatever value or values are returned from a sub query we can use within a larger outer query let's delete this semicolon I will surround this statement with a set of parentheses I will then write the outer query let's select the first name last name the hourly pay then comma our subquery from employees there we are although I'm going to give the subquery an alias as average pay and I think I'm going to move this to the next line that is much better so we have accomplished our task we have compared every employee's hourly pay versus the average once we complete the subquery whatever value or values are returned from the sub query we would use within the larger picture the outer query just imagine that we replaced the subquery with 15.45 this value is what was returned although you don't want to write a concrete number like this just because the average pay is bound to change writing a sub query like this would calculate our average pay regardless if we add or remove employees let's try a different example let's find every employee that has an hourly pay greater than the average pay so again we can begin with the sub query we need the average pay select average function hourly pay from employees so again we return 15.45 I'll use this within a where Clause let's select the first name last name hourly pay from our employees table where the hourly pay is greater than our sub query Mr Krabs and Sandy Cheeks are both making more than the average hourly pay what was returned was 15.45 then it's just a matter of completing the outer query select the first name last name hourly pay from employees where hourly pay is greater than 15.45. it looks complicated but when you break it down into steps it's a lot easier to visualize we're going to cover a completely different example we will be working with customers and transactions I'm going to select all from my transactions table we have a few transactions I would like to find the first name and last name of every customer that has ever placed an order we can do this step by step let's select every customer ID from transactions that's not null select customer ID from transactions where customer ID is not no let's take a look so we do have a few repeats we have one two three and three you can add this distinct keyword if there's any repeats that would eliminate them we have three registered customers that have placed orders in the past customer ID is one two and three but we don't know who these customers are we will use these values within a larger outer query I will surround this query within a set of parentheses eventually we'll use this within a where clause let's select the first name and last name from our customers table where customer ID I will then use the in operator then add my sub query there we are there's our three customers that have placed orders in the past Fred fish Larry Lobster bubble bass this sub query return to the values one two and three imagine that once this query resolves we are left with the values one two three so this outer query makes a lot more sense select the first name and last name from customers where the customer ID is one of these values one two or three you could do the inverse two find the first name and last name of every customer where the customer ID is not in the sub query this query would return every customer that has never placed an order let's send them a coupon in the mail to convince them to place an order we were left with values one two three select the first name and last name from any customers where the customer ID is not in one of these values one two or three Pearl Krabs had an idea five poppy pups was four so yeah that's a sub query everybody it's just a query within a larger query it helps to visualize this step by step imagine that we're completing the subquery first whatever value or values are returned we can use within a larger query and well yeah those are subqueries in MySQL hello everybody today I will be explaining the group by Clause the group I Clause will aggregate all rows by a specific column it's often used with aggregate functions such as the sum function Max Min average count just to name a few for my example I have a table of transactions now if you've been following along in my video series I did add an additional column named order date and filled in a few dates as well as two additional rows if you would like to follow along I would recommend pausing the video adding a new column for order date add these order dates then add to additional rows that's all the data that we'll need in this topic now our boss Mr Krabs he needs us to tell him how much money he made per day what is the sum of all of the amounts per day we have three different dates January 1st January 2nd January 3rd what is the sum of every amount on these days so we can use the group I Clause that would help us we will select the sum of every amount as a column we will also display the order date from transactions then we will Group by we are grouping by our order date Group by order date column yeah look at that there we are here is the sum of every amount that is grouped by these dates here's the total amount we made January 1st the total amount January 2nd the total amount January 3rd let's try a different function how about V Max function what was the maximum amount on each day these are the maximum transactions that have occurred on these dates what about men these are the minimum amounts grouped by order date what's the average order every day you're the averages maybe count how many transactions have taken place each day we have two orders on the first two orders on the second three orders on the third let's try a different column let's Group by customer ID this time how much has each customer spent total we will select the sum of every amount we will also need a column for customer ID from our table transactions then we will Group by the customer ID column this time here is the sum of every amount that each customer has ever spent we do have some rows that don't have a customer ID so we would sum those amounts as well so far the customer with an ID of three they have spent the most amount of money at our establishment what about the max here is the maximum order that each customer has placed the min the average then count here is the amount of times that each customer has ever visited our establishment what if we would like to use a where Clause well using a where Clause along with the group I Clause normally doesn't work for example I would like to display all customers that have visited more than once who are the repeat customers so if I attempt to use a where Clause where count our amount column is greater than one well we would run into an error if you need to use a where clause and you're using the group by Clause you would want to instead use the word having that would do the same thing Group by customer ID where the customer ID has made more than one purchase we are also aggregating all of the customer ideas that are null let's use the and logical operator to remove that and customer ID is not null there we are the customer that has an ID of three they have visited our establishment two times they meet the requirements of this having Clause they have visited our establishment more than once and their customer ID is not null so if you ever need to use a where Clause if you're already using the group I Clause you would instead use having so in conclusion the group by Clause will aggregate all rows by a specific column it's often used with aggregate functions such as sum Max Min average count for example you could Group by an order date what are the total sales per date or by a customer ID how many times has each customer visited our establishment those are just a few examples and well yeah that is the group by clause in MySQL hey again it's me today I'm going to be explaining the rollup Clause like a fruit rollup it's an extension of the group by Clause it produces another row and shows the grand total it's also known as a super aggregate value here's an example I have a table of transactions what I would like to do is to group each transaction by the order date then produce a grand total here's what we'll do I'll give you a few different examples let's begin by selecting the sum of the amounts and the order date from our table transactions then we will Group by the order date and there we are we have the sum of every amount per order date using this rollup Clause I can add an additional row that shows a grand total so to say all I have to do after the group by Clause is ADD with roll up and there you go here's the grand total 7.88 plus 8.37 plus 8.97 is 25.22 here's another example let's count the transaction ideas buy order date we have two transactions on the first two on the second three on the third for a total of seven transactions I'll give you two more examples let's select the count of our transaction ideas per customer I'm going to give this count an alias as number of orders as well as the customer ID column from our table transactions we will Group by customer ID let's see what we have so far then I will add with roll up here are the amount of orders per customer ID the customer with an ID of three has visited here more than once the grand total of the number of orders is seven that's the roll up one last example let's select our employees table select all from employees we will group all of these employees by their employee ID then display a rollup of all of the hourly pay as a business how much are we spending on all of our employees per hour so let's select the sum of our hourly pay I'll give this an alias as hourly pay I guess it really isn't different from the column name we will display the employee ID as a column from our table employees Group by the employee ID with rollup here's the hourly pay of each employee as well as a grand total if all of our employees are working currently we are spending as a business 92.75 cents per hour well yeah that's the rollup Clause everybody it's an extension of the group by Clause it produces another row and shows essentially the grand total it's also known as a super aggregate value to include a rollup after the group by Clause just add with roll up it's probably good for accounting and well yeah that's the rollup clause in MySQL why hello there everybody today I will be explaining the on delete Clause there's two versions on delete Sentinel and on delete Cascade with on delete set null when a foreign key is deleted we can replace the foreign key with the value no otherwise there's and delete Cascade when a foreign key is deleted delete the entire row here's an example let's take a look at our table transactions select all from transactions in my transactions table the customer ID column is the foreign key what would happen if I were to delete one of these customers let's select all from our customers table I'm going to delete poppy puff she has a customer ID of four delete from customers where customer ID equals four if you run into this error cannot delete or update a parent row a foreign key constraint fails there's a foreign key that's preventing us from deleting this customer because this customer is used elsewhere in a different table like that transaction stable so just temporarily for this demonstration I'm going to set foreign key checks to be zero and that should work our customer with an idea 4 is gone one two three five poppy puff is no longer within our customers table before I forget I'm going to set foreign key checks back to one let's take a look at our transactions table underneath this transaction of 1005 we're referencing a customer that doesn't exist the customer with an idea 4 is no longer within our customers table we have a couple options whenever we delete a primary key from another table that's being used as a foreign key as somewhere else we can either replace that value with null or delete the entire row with Cascade with on delete set null we can replace this value with null much like these two rows or on delete Cascade we can delete the entire row let's begin with on delete Sentinel I'm going to reinsert Poppy puff back into our table of customers and there we are poppy puff is back in the customers table now with on delete Sentinel if we're creating a new table let's say I'm recreating my table of transactions after adding the foreign key constraint foreign key our customer ID column references the customer ID column of the customers table I can add this clause on delete set no that's if I'm creating a new table but I already do have a transactions table I don't want to update it however we can update an existing table with this Clause I already do have a foreign key constraint I'm just going to drop it real quick alter table transactions drop foreign key then the name of the foreign key mine is FK underscore customer ID and that key is now dropped we are going to add a foreign key constraint to our transactions table with this clause on delete Sentinel alter table the name of the table add constraint you can give your constraint a name I'll give it the same name as before FK customer ID list the foreign key foreign key my foreign key is customer ID references another table which was customers and what is the primary key of that table customer ID then we will add the clause on delete set no if I delete a customer ID from customers the foreign key of that row will be set to null automatically let's execute this let's take a look at our transactions table select all from transactions I am now going to delete customer number four from the customers table delete from customers where customer ID equals four yeah check that out with our transaction ID of 1005 the customer ID is now null now there's and delete Cascade when a foreign key is deleted we can instead delete the entire row let's go ahead and add poppy puff back to our customers table all right she's back in let's drop the current foreign key constraint of our transactions table alter table transactions drop foreign key FK customer ID or whatever else it's named and that key is now gone we will add the on delete Cascade Clause to a table that already exists alter table transactions add constraint you can come up with the name FK underscore transactions underscore ID list the foreign key foreign key customer ID references the customers table and the primary key of that table is the customer ID then add on delete Cascade let's take a look at our transactions table select all from transactions oh let's update this customer ID real quick I forgot to do that update transactions set customer ID equal to four where transaction ID equals 1005. yeah I forgot to add that back now let's do it delete from customers where customer ID equals four yeah take a look at that the entire row is now gone we have transactions one thousand three one thousand four one thousand six one thousand five is missing because it was referencing the customer with an ID of four we set the foreign key to delete the entire row when that foreign key is deleted that is on delete Cascade well in conclusion everybody on delete is a clause where if you delete a foreign key you can set that value to be null or Cascade which will delete the entire row which has its uses and well yeah that's the on delete clause in MySQL why hello again it's me so today I gotta explain stored procedures a stored procedure is prepared SQL code that you can save it's great if there's a query that you write often for example I have this statement it's very verbose there's a lot we have to write if this statement is something I have to write often I could save it and reuse it later this statement will interjoin the transactions table and my customers table then display all customers that made a transaction this statement is very verbose if I have to write the statement often I could save it as a stored procedure I can refer to the nickname that I gave that snippet of code the name I gave this procedure was get customers then I need to call this stored procedure and that does the same thing and it's a lot less to write there's also a few other benefits which we'll discuss at the end of the video let's begin with something simple I would like to select all from my customers table to turn the statement or statements into a stored procedure I will type create procedure then a name for the statement or statements I will name this statement get customers add a set of parentheses type the keyword begin wherever your statement or statements end type end then for clarity I'm going to tab all of my statements between begin and end so we have a problem we're trying to create this procedure however MySQL is stopping at this semicolon here we end all statements with a semicolon rather than at the end our semicolon is known as a delimiter it's kind of like the period at the end of a sentence we're telling MySQL that our statement ends here but we need our statement to end here after the end keyword we can actually change the delimiter temporarily type delimiter before we create the procedure typically when people change their delimiter temporarily they'll either use two forward slashes or two dollar signs I'll stick with the dollar signs because I think that's cooler after we create our procedure let's change our delimiter back to the semicolon MySQL no longer recognizes our semicolon as the delimiter after the end keyword I will use our new delimiter to end this statement that should work now let's execute the statement we have created our procedure I'm going to refresh my navigator window underneath stored procedures we have our stored procedure of get customers to invoke the stored procedure type call the name of the procedure get customers add a set of parentheses then a semicolon that will execute whatever code you stored within your stored procedure to drop a stored procedure you would type drop procedure the name of the procedure get customers let's try another example this time we will send our procedure a piece of data within the set of parentheses a customer ID number such as 1 2 3 4 so on and so forth we will get a customer by their customer ID we will create a procedure I will name this procedure find customer add a set of parentheses to find a customer by their customer ID when we invoke the stored procedure within the set of parentheses we will need to place a customer ID but when we create the stored procedure we have to set up what is called a parameter we will type in then a nickname for that piece of data we're passing in a transaction ID I'll give this parameter a nickname of ID then we need the data type of what we're passing in we're passing in an integer so we have one parameter set up let's use that begin keyword that end keyword list our statement or statements between these two keywords I will select all from my customers table where my customer ID equals the ID that we pass in that nickname we need to change the delimiter because MySQL thinks we're trying to end our statement here but we need it to end after the end keyword so let's change the delimiter to double dollar signs then change it back all right we have created that stored procedure let's invoke it call find customer within the set of parentheses we need to pass in a customer ID number let's pass in one that would give us Fred fish two is Larry Lobster three is bubble Bass five is Pearl crabs when you invoke a stored procedure you can pass in some data depending on what you need exactly for your stored procedure let's drop this procedure then do one last example drop procedure find customer this time we will send two arguments two pieces of data a first name and a last name create procedure find customer within our set of parentheses the first piece of data we'll pass in will be a first name but first is already a keyword maybe F name meaning first name then the data type let's see for customers the data type of first and last names is varchar50 varchar 50. for your next piece of data you would separate that with a comma in our nickname will be lname for last name data type is varchar 50. then I'm just going to put that on a new line for clarity type the begin keyword and write your statements between begin and end we will select all from our customers table where first name equals the name of the data that we pass in and last name equals the other piece of data the second piece the last name again we need to change the delimiter to create this procedure double dollar signs then change it back we have created our stored procedure let's invoke it call find customer within the set of parentheses we will list a first name and a last name Larry comma Lobster get Larry Lobster's information let's find him and there he is customer id2 first name Larry last name Lobster referral ID of one email is L Lobster gmail.com all right everybody that is a sword procedure it's prepared SQL code that you can save it's great if there's a query that you write often a few of the benefits is that it reduces Network traffic it increases performance and is more secure and administrator can grant permission to a user or an application to use a stored procedure one of the downsides though is that it increases memory usage of every connection and well everybody those are stored procedures in MySQL hey everybody today I need to explain triggers when an event happens a trigger does something I know that sounds very generic for example when we insert update or delete a record we can use a trigger to check data handle errors or audit tables we could do a plethora of things here's an example I have a table of employees we have an hourly pay column maybe I would like a salary column whenever we add an employee or update our hourly pay the employee's salary will be changed automatically with the trigger before creating a trigger let's update our employees table We'll add a salary column alter table employees add column salary the data type will be decimal 10 digits Precision of two we will place this column after the hourly pay column then select all from our employees table let's see what we have there we are there's our salary column let's update our employees table set our salary column equal to the hourly pay times to calculate an employee's salary using an hourly pay Sheldon Plankton for example take the hourly pay ten dollars per hour there's typically 40 hours in a work week then 52 weeks in a year Plankton would have a salary of twenty thousand eight hundred dollars so a shortcut you could just take the hourly pay times 2080. there are 2080 work hours in a typical year so take the hourly pay times 2080. then we will select all from employees there is everybody's salary currently whenever we update an employee's hourly pay I would like to also update the salary automatically with the trigger I don't want to have to calculate every employee's salary manually you know using a calculator like I just did we're going to create a trigger create trigger then we need a name for this trigger before we update the hourly pay we're going to do something I will name this trigger before hourly pay update we'll use either the keyword before or after do you want to do something before or after I would like to do something before before what before an insert before delete before an update before an update in this case on our table employees then add this line for each row we may be working with more than one row using a trigger so that's why we're including this line This trigger can involve one or more rows now what are we going to do before we update an employee's hourly pay let's set the salary equal to the hourly pay times 2080 because there's 2080 work hours in a typical year okay there's one more thing I'm going to add let's prefix salary and hourly pay with this new keyword new DOT salary new DOT hourly pay MySQL doesn't know if we're referring to the old salary and the old hourly pay we're telling MySQL we're calculating a new salary use the new hourly pay when that's changed in place of the old one okay let's take a look let's execute this statement our trigger has been created in your schemas window to find any triggers go to tables then find that table where we applied the trigger employees then triggers I probably need to refresh this there it is before hourly pay update otherwise you can type show triggers and here's our trigger here's the trigger name event update the table the statement and the timing let's select all from employees Mr Krabs is going to give himself an hourly pay raise because he's greedy let's update our employees table set the hourly pay equal to fifty dollars per hour where our employee ID equals one so Mr crab's salary is about fifty three thousand dollars per year before we update it we will change the salary of this employee from fifty three thousand dollars to over six figures 104 000 that change happened automatically with the trigger before updating the employee's hourly pay we calculated a new salary automatically let's make another change let's increase every employee's hourly pay by one dollar per hour Mr Krabs is now feeling generous update employees we will set the hourly pay equal to whatever the hourly pay currently is plus one we will apply this for every employee we don't need a where clause there everybody is now making one more dollar per hour and the salaries reflect that let's create a new trigger we will calculate a salary whenever we insert a new employee more specifically whenever we insert a new hourly pay right now we have a trigger that only kicks in when we update an hourly pay okay let's delete plankton Plankton got fired delete from employees where employee ID equals six select all from employees their Plankton is now gone let's create a trigger create trigger before hourly pay insert are we doing something after or before we're doing something before an event before are we updating inserting or deleting we are inserting before we insert a new record on our table employees for each row let's set the new salary equal to the new hourly pay times 2080. here is our new trigger let's take a look at our employees table select all from employees let's insert a new employee insert into employees values I'm just going to follow these columns employee ID 6. first name is Sheldon last name plankton hourly pay is ten dollars per hour for the salary I'm going to set this to null our trigger will kick in and set that position janitor higher date 2023 January 7th supervisor idea five let's see if our salary is calculated it was Plankton's hourly pay is ten dollars per hour meaning he has a salary of twenty thousand eight hundred dollars per year I do have a few more examples triggers are something you'll want to master they're really helpful we're going to create a new table this time create table expenses our expenses table will have three columns an expense ID the data type will be int this will be the primary key you could set this column to Auto increment if you want but but that's overkill for this topic I would say I'm going to try and keep it simple expense name the data type is varchar 50 is good I suppose then expense total I will set that to be decimal 10 digits Precision of 2 is fine then let's select everything from our table expenses let's insert some values insert into expenses we have three rows one two three ID of one the expense name is salaries for the value for now I'm going to set that to be zero the second row will be two supplies zero ID of three maybe taxes and zero I will calculate the expense total of my salaries bro update expenses I will set the expense total equal to I'll use a nested query select the sum of salary from employees where our expense name column right here is equal to salaries this is all of these salaries combined from the employees table the total is two hundred fifty four thousand two hundred eighty dollars whenever we delete an employee we will update this value found within another table our expenses table so let's create a trigger create trigger after salary delete are we doing something before or after we're doing something after deleting a salary after delete on employees for each row we will update our expenses table and set the expense total equal to whatever the expense total currently is minus that employee's salary if we're deleting a salary we will refer to that salary as the old salary the net aware Clause where expense name equals salaries okay we have created our trigger let's take a look at our expenses table I'm going to delete Plankton again he's fired delete from employees where employee ID equals six that's plankton then select all from expenses look at that our expense total changed it's now two hundred thirty three thousand dollars let's create a trigger that will update our salaries whenever we insert a new employee create trigger after salary insert we're doing something after this time after an insert on our table employees for each row we will update our expenses table we will set the expense total equal to the expense total plus the employee's new salary new DOT salary where expense name equals salaries let's insert a new employee let's take a look at our expenses table select all from expenses we will insert a new employee insert into employees our values employee ID 6. first name is Sheldon last name plankton hourly pay of ten dollars per hour the salary will be null that will be calculated automatically with the trigger position is janitor higher date 20230107 and a supervisor idea5 let's see if this expense total will change which it does when we insert a new employee we're specifically a salary our expense total of salaries will be updated one last example that I promised we're done let's create a trigger that will update this value when we change an employee salary and that will probably be the most complicated one let's create a trigger after salary update we're doing something after we update on our table employees for each row let's update expenses set the expense total equal to the expense total Plus the employee's new salary minus the employee's old salary what's the difference we'll find the difference between the employee's new salary and their old salary add that to the expense total where expense name equals salaries we have created our trigger let's select all from expenses Mr Krabs is going to give himself another pay raise update employees set the hourly pay of Mr Krabs to 100 per hour where employee ID equals one our expense total underneath salaries is now changed it's now 356 thousand two hundred dollars well all right everybody that's a trigger in simple words when an event happens do something such as when we insert update or delete something from a table a few of the benefits is that you can check data handle errors and audit tables it's a really helpful tool to have and well everybody those are triggers in MySQL
