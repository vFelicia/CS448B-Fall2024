With timestamps:

00:00 - hey everybody so today I got to talk
00:01 - about a sync and a weight in JavaScript
00:04 - a sync and a weight are two keywords by
00:06 - using these two keywords together they
00:08 - allow you to write asynchronous code in
00:10 - a synchronous manner a sync makes a
00:13 - function return a promise a wait makes
00:16 - an async function wait for a promise
00:18 - we'll discuss async first in this sample
00:21 - program from the last topic we have some
00:23 - chores to do we have to walk the dog
00:25 - clean the kitchen and take out the trash
00:28 - each of these functions returns a
00:29 - promise
00:30 - a promise that can either resolve or
00:32 - reject based on the code that's written
00:34 - if the dog is walked if that's true
00:37 - resolve if it's false reject a function
00:40 - can be declared with a sync a function
00:42 - declared with a sync will return a
00:44 - promise however that promise that's
00:47 - returned doesn't resolve or reject in a
00:50 - way you could say it's an empty promise
00:52 - if I were to run this code this is what
00:56 - happens uncaught reference error resolve
00:59 - is not to find if an asynchronous
01:01 - function returns a promise that either
01:03 - needs to resolve or reject adding a sync
01:06 - to it really doesn't benefit us a sync
01:09 - works together with a weight by using
01:11 - these two keywords together when calling
01:13 - all of these asynchronous functions in
01:15 - order we don't need to Method chain then
01:17 - statements there's a more synchronous
01:19 - manner in which we can write the same
01:21 - code but we'll need to contain it all
01:23 - within an async function async function
01:28 - we'll create a function to do
01:31 - chores then we will need to call this
01:33 - function somewhere let's do so right
01:36 - here first we need to walk the dog walk
01:39 - the dog returns a
01:41 - promise that's where the await keyword
01:43 - comes in await makes an async function
01:46 - wait for a promise before continuing
01:49 - we're going to create a constant of walk
01:52 - dog result equals use the await
01:57 - keyword await walk Dot
02:01 - then we will
02:04 - console.log the walk dog
02:07 - result you walk the dog now let's do
02:11 - this with clean kitchen we're going to
02:13 - be writing this code in a synchronous
02:14 - manner line by line
02:17 - linearly we will create a constant for
02:19 - clean kitchen result equals await the
02:23 - next promise await clean
02:26 - kitchen then
02:28 - console.log
02:30 - clean kitchen result let me close
02:34 - this you walk the
02:36 - dog you clean the
02:38 - kitchen and last we have takeout
02:41 - trash const takeout trash result equals
02:46 - a wait take out the
02:49 - trash then
02:53 - console.log the
02:56 - result you walk the
02:58 - dog you clean the kitchen you take out
03:00 - the trash let's add one more line when
03:03 - we finish everything one more line of
03:05 - code you finished all the chores you
03:09 - walk the dog you clean the kitchen you
03:12 - take out the trash you finished all the
03:14 - chores let me show you what happens if
03:16 - we attempt to use a weight within a
03:18 - function not declared with
03:20 - async uncaught syntax error a weight is
03:24 - only valid in async functions that's why
03:27 - a weight depends on async a weight makes
03:29 - an async function wait for a promise
03:32 - before continuing now if your promises
03:35 - can reject let's say that dog walked is
03:42 - false uncaught in promise you didn't
03:46 - walk the dog we'll surround all of this
03:48 - code within a tri block then catch any
03:58 - errors catch one parameter of
04:01 - error we can
04:04 - console.log or console.
04:07 - error the
04:09 - error you didn't walk the
04:11 - dog all right everybody so that is a
04:14 - sync and a wait a sync makes a function
04:18 - return a promise a wait makes an async
04:21 - function wait for a promise by using
04:24 - these two keywords together we can write
04:26 - asynchronous code in a synchronous
04:29 - manner
04:30 - and well everybody that is a sync and a
04:32 - wait in
04:37 - JavaScript

Cleaned transcript:

hey everybody so today I got to talk about a sync and a weight in JavaScript a sync and a weight are two keywords by using these two keywords together they allow you to write asynchronous code in a synchronous manner a sync makes a function return a promise a wait makes an async function wait for a promise we'll discuss async first in this sample program from the last topic we have some chores to do we have to walk the dog clean the kitchen and take out the trash each of these functions returns a promise a promise that can either resolve or reject based on the code that's written if the dog is walked if that's true resolve if it's false reject a function can be declared with a sync a function declared with a sync will return a promise however that promise that's returned doesn't resolve or reject in a way you could say it's an empty promise if I were to run this code this is what happens uncaught reference error resolve is not to find if an asynchronous function returns a promise that either needs to resolve or reject adding a sync to it really doesn't benefit us a sync works together with a weight by using these two keywords together when calling all of these asynchronous functions in order we don't need to Method chain then statements there's a more synchronous manner in which we can write the same code but we'll need to contain it all within an async function async function we'll create a function to do chores then we will need to call this function somewhere let's do so right here first we need to walk the dog walk the dog returns a promise that's where the await keyword comes in await makes an async function wait for a promise before continuing we're going to create a constant of walk dog result equals use the await keyword await walk Dot then we will console.log the walk dog result you walk the dog now let's do this with clean kitchen we're going to be writing this code in a synchronous manner line by line linearly we will create a constant for clean kitchen result equals await the next promise await clean kitchen then console.log clean kitchen result let me close this you walk the dog you clean the kitchen and last we have takeout trash const takeout trash result equals a wait take out the trash then console.log the result you walk the dog you clean the kitchen you take out the trash let's add one more line when we finish everything one more line of code you finished all the chores you walk the dog you clean the kitchen you take out the trash you finished all the chores let me show you what happens if we attempt to use a weight within a function not declared with async uncaught syntax error a weight is only valid in async functions that's why a weight depends on async a weight makes an async function wait for a promise before continuing now if your promises can reject let's say that dog walked is false uncaught in promise you didn't walk the dog we'll surround all of this code within a tri block then catch any errors catch one parameter of error we can console.log or console. error the error you didn't walk the dog all right everybody so that is a sync and a wait a sync makes a function return a promise a wait makes an async function wait for a promise by using these two keywords together we can write asynchronous code in a synchronous manner and well everybody that is a sync and a wait in JavaScript
