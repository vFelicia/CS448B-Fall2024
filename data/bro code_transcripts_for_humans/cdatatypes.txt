With timestamps:

00:02 - all right what's going on people let's
00:03 - discuss more about data types we
00:05 - discussed a few in the last video but
00:06 - there's a few more that you should be
00:08 - made aware of
00:08 - so chars they store a single character
00:11 - and use the
00:12 - percent c format specifier to display a
00:14 - single character
00:15 - there's an array of characters which can
00:17 - store one or more characters
00:19 - then to display that you use percent s
00:21 - as the format specifier
00:22 - floats they will store a decimal number
00:25 - and we use
00:26 - the percent f format specifier to
00:28 - display a floating point number and then
00:30 - we have integers which only store a
00:33 - whole integer there's no decimal portion
00:35 - and we use percent d to display an
00:37 - integer now along with floats we have
00:39 - doubles
00:40 - doubles have double the precision of a
00:42 - float we can store even more significant
00:44 - digits floats use
00:46 - four bytes of memory they have 32 bits
00:48 - of precision and we can store between
00:50 - six to seven significant digits doubles
00:52 - they have
00:53 - eight bytes of memory double that of
00:55 - floats and they have
00:57 - 64 bits of precision and we can store
00:59 - between 15 to 16 significant digits with
01:02 - my float and my double i'm storing the
01:04 - first
01:05 - several digits of pi i'm going to
01:07 - attempt to display as many digits of pi
01:10 - as i can with a float so i'm going to
01:12 - display these
01:13 - so to display a float use percent f
01:16 - and lf for a double which means long
01:20 - float now by default when i use printf
01:22 - to display a floating point number or a
01:24 - double
01:25 - this will only display the first six to
01:27 - seven digits
01:28 - but we can actually change that we'll
01:29 - discuss more about these in the next
01:31 - video on format specifiers
01:33 - if i would like to display even more
01:35 - digits after the decimal i will add
01:37 - zero point and the amount of digits i
01:39 - would like to display
01:40 - so i would like to display 15 digits
01:42 - after my decimal
01:43 - and i'll do that for my double as well
01:46 - so after the percent signed
01:47 - 0.1 f then add lf and let's take a look
01:51 - at these numbers
01:52 - okay after my two which is i believe the
01:55 - sixth digit after the decimal we
01:57 - actually lose our precision these
01:59 - numbers are not the same
02:00 - but our double will actually retain
02:03 - these numbers
02:04 - so point being a double is even more
02:06 - accurate than a floating point number
02:08 - there is more precision but it uses more
02:10 - memory a double uses eight bytes of
02:12 - memory
02:13 - because of this reason we tend to use
02:14 - doubles a lot more than floats just
02:16 - because they're more precise
02:17 - we don't want to lose our precision next
02:19 - up we have booleans to work with
02:21 - booleans
02:22 - and c include this at the top std bool.h
02:26 - booleans store true or false so they
02:29 - work in binary
02:31 - one represents true and zero represents
02:33 - false
02:34 - so when you need to declare a boolean
02:36 - variable you type
02:37 - bool then a variable name and you set it
02:39 - equal to
02:40 - true or false technically we only need
02:43 - one
02:43 - bit to represent true or false one for
02:46 - true and zero for false
02:48 - but this still uses up one byte of
02:50 - memory and then to display a boolean
02:52 - you can use percent d so if i was to
02:54 - display this boolean
02:56 - variable i would use percent d so
02:59 - one corresponds to true and zero
03:02 - corresponds to false
03:03 - although there are some tricks that we
03:04 - can do in the future where we could
03:06 - display the word to true or the word
03:08 - false
03:09 - but for now we're going to stick with
03:10 - percent d as the format specifier so
03:13 - these work in binary one for true
03:15 - zero for false now another thing that we
03:17 - can do with chars
03:18 - is that we can store a whole integer
03:21 - between the range of
03:22 - negative 128 to positive 127.
03:26 - so in this example we have char f and i
03:28 - will store the integer number 100
03:30 - we can display this number as either a
03:33 - decimal an integer
03:34 - or a character so if i was to display
03:37 - this
03:38 - number as a character we will use the
03:40 - ascii table
03:41 - to convert this number to a character
03:44 - representation
03:45 - the ascii table has a range between 0 to
03:47 - 127
03:48 - so if i was to display this number as a
03:50 - decimal using the percent d format
03:52 - specifier
03:53 - of course this will display as 100 but
03:56 - if i was to convert this to a character
03:58 - using the percent c format specifier
04:01 - this has a corresponding character and
04:03 - that would be
04:04 - lowercase d so i'm actually going to
04:06 - change this to something else what about
04:08 - i don't know uh 120 so let's see what
04:11 - the character representation of that
04:13 - number
04:14 - is and that would be a lowercase x
04:17 - so you can use chars to store more than
04:20 - single characters
04:21 - you can also use them to store a whole
04:23 - integer however the range is between
04:25 - negative 128 to positive 127
04:29 - because they have one byte of memory now
04:31 - there is a keyword
04:33 - unsigned so when you declare a variable
04:35 - that is unsigned
04:37 - we disregard any negative numbers so
04:40 - effectively this doubles our range with
04:42 - our positive numbers
04:43 - so if we have unsigned char we can store
04:47 - a number between
04:48 - 0 to positive 255 because we know we're
04:52 - not going to store
04:52 - a negative number so then if you need to
04:55 - display an
04:56 - unsigned character we can use just
04:58 - percent d i'm going to store 255 within
05:01 - my unsigned chart and that would be of
05:04 - course 255. however if we go beyond this
05:07 - range
05:07 - this will overflow and go back to zero
05:10 - so if i was to display this we have a
05:13 - warning
05:13 - unsigned conversion from int to unsigned
05:17 - chart so then this resets back to zero
05:19 - so if you go beyond
05:20 - the maximum range this will reset all
05:22 - the way back to zero whatever the
05:24 - beginning is
05:25 - so if you add this keyword unsigned you
05:27 - can effectively
05:28 - double the range of positive numbers
05:31 - that you can store within a variable
05:33 - by default most data types are already
05:35 - signed
05:36 - but we don't need to explicitly type
05:38 - that so
05:39 - point being with chars you can store
05:41 - more than a single character you can
05:43 - store a whole integer
05:45 - between ranges negative 128 to positive
05:48 - 127
05:49 - if it's signed if it's unsigned you can
05:52 - store numbers between
05:53 - 0 to 255. you can display them as an
05:56 - integer by using the percent d format
05:58 - specifier
05:59 - or you could convert them to a character
06:02 - using the ascii table
06:03 - by using the percent c format specifier
06:06 - next we have short ins short ins use
06:10 - two bytes of memory they can store a
06:12 - number between negative
06:14 - 32 768 to
06:17 - positive 32 760 because while they use
06:21 - two bytes of memory
06:22 - they can only store a number so large
06:24 - and if it's an unsigned
06:25 - short int the range is instead between
06:29 - 0 to 65 535
06:32 - and we use the percent d format
06:34 - specifier to display a short in
06:36 - so within my printf statement i'm going
06:38 - to display these two numbers
06:40 - so i will display variable h and i h
06:43 - is a short integer and i is an unsigned
06:46 - short integer
06:48 - so these are the maximum values for a
06:50 - short integer
06:51 - and an unsigned short integer and like i
06:54 - discussed with
06:54 - chars if we go beyond this range we will
06:57 - encounter an
06:58 - overflow so i'm going to change this
07:00 - short end to 32768
07:05 - and let's see what number displays so
07:08 - this will overflow
07:09 - and reset this value back to the minimum
07:12 - value which in this case
07:13 - is negative 32 768 and if you do the
07:18 - same thing with the
07:18 - unsigned short integer that would be
07:21 - zero because
07:22 - that's the minimum value for an unsigned
07:25 - short integer
07:26 - so those are short integers they use two
07:28 - bytes of memory and they can store
07:30 - numbers between these ranges depending
07:32 - if it's signed or
07:33 - unsigned oh and another way of writing
07:35 - these you don't necessarily need to
07:37 - declare these with the word and
07:39 - you could just say short and that would
07:41 - do the same thing people usually just
07:43 - call them shorts instead of
07:44 - short ends so those are what shorts are
07:47 - now with integers we kind of discussed
07:49 - this in the last video just briefly
07:50 - integers store a whole number between
07:53 - just under negative 2 billion to just
07:56 - over
07:57 - positive two billion because they use
07:59 - four bytes of memory
08:00 - and we use the percent d format
08:02 - specifier to display
08:04 - a signed integer if that integer is
08:06 - unsigned
08:07 - the range changes from zero to just over
08:11 - positive
08:12 - 4 billion however there is a different
08:15 - format specifier
08:16 - to display an unsigned integer you
08:18 - instead use percent
08:20 - u so then let's display these percent d
08:23 - for a
08:23 - signed integer and percent u
08:26 - for an unsigned integer and these are
08:30 - the
08:30 - maximum numbers and then if i was to
08:33 - exceed the range
08:36 - this again would cause an overflow and
08:38 - reset these numbers
08:39 - back to their minimum values so those
08:42 - are standard integers
08:44 - they use four bytes of memory so they
08:46 - can store numbers between
08:47 - these ranges depending if they're signed
08:49 - or unsigned
08:50 - all right the last data type we're going
08:52 - to talk about for this topic
08:54 - is a long long integer now the reason
08:57 - that we have
08:57 - long twice is that with standard
08:59 - integers these are already considered
09:02 - longs but we don't need to explicitly
09:04 - type long
09:05 - for standard integers so to represent a
09:08 - really large number
09:09 - we can use a long long integer
09:12 - and these use eight bytes of memory the
09:15 - effective range
09:16 - for a signed long long integer is
09:19 - just underneath nine quintillion two
09:22 - just over nine quintillion
09:24 - and the format specifier for a long long
09:27 - integer one that is signed
09:29 - is percent lld now if it's unsigned
09:33 - that changes the range between 0 to just
09:36 - over positive 18 quintillion and the
09:39 - format specifier
09:40 - is percent llu then let's display these
09:43 - so
09:44 - for a signed long long integer that is
09:47 - lld
09:48 - and if it's unsigned that is llu now
09:51 - we'll encounter a warning
09:53 - so this warning applies to our unsigned
09:56 - long
09:56 - long integer integer constant is so
09:59 - large
10:00 - that it is unsigned so one way in which
10:03 - we can prevent that warning is after
10:05 - our number within our unsigned long long
10:08 - integer
10:09 - add a u to the end of this so then we
10:11 - can display this number with no warning
10:13 - so since long long integers use so many
10:16 - bytes they can store
10:17 - a gigantic number we tend to not use
10:20 - long long integers very often because
10:22 - well we don't really have a need for
10:24 - this large of a number but in certain
10:26 - circumstances you might perhaps you're
10:28 - dealing with the speed of light or
10:29 - something
10:30 - you may need to use a long long integer
10:33 - but commonly we use standard integers a
10:35 - lot more
10:35 - well yeah everybody those are even more
10:38 - c data types we likely won't be using
10:40 - most of these but you should still be
10:42 - made aware of their existence
10:43 - i would say that we're going to focus on
10:46 - chars
10:47 - array of chars doubles booleans
10:50 - and integers so pay attention to those
10:53 - ones but you should still be made aware
10:55 - of the existence of other data types
10:57 - just in case you encounter them
10:58 - if you found this video helpful please
11:00 - smash that like button leave a random
11:02 - comment down below
11:03 - and subscribe if you'd like to become a
11:05 - fellow bro

Cleaned transcript:

all right what's going on people let's discuss more about data types we discussed a few in the last video but there's a few more that you should be made aware of so chars they store a single character and use the percent c format specifier to display a single character there's an array of characters which can store one or more characters then to display that you use percent s as the format specifier floats they will store a decimal number and we use the percent f format specifier to display a floating point number and then we have integers which only store a whole integer there's no decimal portion and we use percent d to display an integer now along with floats we have doubles doubles have double the precision of a float we can store even more significant digits floats use four bytes of memory they have 32 bits of precision and we can store between six to seven significant digits doubles they have eight bytes of memory double that of floats and they have 64 bits of precision and we can store between 15 to 16 significant digits with my float and my double i'm storing the first several digits of pi i'm going to attempt to display as many digits of pi as i can with a float so i'm going to display these so to display a float use percent f and lf for a double which means long float now by default when i use printf to display a floating point number or a double this will only display the first six to seven digits but we can actually change that we'll discuss more about these in the next video on format specifiers if i would like to display even more digits after the decimal i will add zero point and the amount of digits i would like to display so i would like to display 15 digits after my decimal and i'll do that for my double as well so after the percent signed 0.1 f then add lf and let's take a look at these numbers okay after my two which is i believe the sixth digit after the decimal we actually lose our precision these numbers are not the same but our double will actually retain these numbers so point being a double is even more accurate than a floating point number there is more precision but it uses more memory a double uses eight bytes of memory because of this reason we tend to use doubles a lot more than floats just because they're more precise we don't want to lose our precision next up we have booleans to work with booleans and c include this at the top std bool.h booleans store true or false so they work in binary one represents true and zero represents false so when you need to declare a boolean variable you type bool then a variable name and you set it equal to true or false technically we only need one bit to represent true or false one for true and zero for false but this still uses up one byte of memory and then to display a boolean you can use percent d so if i was to display this boolean variable i would use percent d so one corresponds to true and zero corresponds to false although there are some tricks that we can do in the future where we could display the word to true or the word false but for now we're going to stick with percent d as the format specifier so these work in binary one for true zero for false now another thing that we can do with chars is that we can store a whole integer between the range of negative 128 to positive 127. so in this example we have char f and i will store the integer number 100 we can display this number as either a decimal an integer or a character so if i was to display this number as a character we will use the ascii table to convert this number to a character representation the ascii table has a range between 0 to 127 so if i was to display this number as a decimal using the percent d format specifier of course this will display as 100 but if i was to convert this to a character using the percent c format specifier this has a corresponding character and that would be lowercase d so i'm actually going to change this to something else what about i don't know uh 120 so let's see what the character representation of that number is and that would be a lowercase x so you can use chars to store more than single characters you can also use them to store a whole integer however the range is between negative 128 to positive 127 because they have one byte of memory now there is a keyword unsigned so when you declare a variable that is unsigned we disregard any negative numbers so effectively this doubles our range with our positive numbers so if we have unsigned char we can store a number between 0 to positive 255 because we know we're not going to store a negative number so then if you need to display an unsigned character we can use just percent d i'm going to store 255 within my unsigned chart and that would be of course 255. however if we go beyond this range this will overflow and go back to zero so if i was to display this we have a warning unsigned conversion from int to unsigned chart so then this resets back to zero so if you go beyond the maximum range this will reset all the way back to zero whatever the beginning is so if you add this keyword unsigned you can effectively double the range of positive numbers that you can store within a variable by default most data types are already signed but we don't need to explicitly type that so point being with chars you can store more than a single character you can store a whole integer between ranges negative 128 to positive 127 if it's signed if it's unsigned you can store numbers between 0 to 255. you can display them as an integer by using the percent d format specifier or you could convert them to a character using the ascii table by using the percent c format specifier next we have short ins short ins use two bytes of memory they can store a number between negative 32 768 to positive 32 760 because while they use two bytes of memory they can only store a number so large and if it's an unsigned short int the range is instead between 0 to 65 535 and we use the percent d format specifier to display a short in so within my printf statement i'm going to display these two numbers so i will display variable h and i h is a short integer and i is an unsigned short integer so these are the maximum values for a short integer and an unsigned short integer and like i discussed with chars if we go beyond this range we will encounter an overflow so i'm going to change this short end to 32768 and let's see what number displays so this will overflow and reset this value back to the minimum value which in this case is negative 32 768 and if you do the same thing with the unsigned short integer that would be zero because that's the minimum value for an unsigned short integer so those are short integers they use two bytes of memory and they can store numbers between these ranges depending if it's signed or unsigned oh and another way of writing these you don't necessarily need to declare these with the word and you could just say short and that would do the same thing people usually just call them shorts instead of short ends so those are what shorts are now with integers we kind of discussed this in the last video just briefly integers store a whole number between just under negative 2 billion to just over positive two billion because they use four bytes of memory and we use the percent d format specifier to display a signed integer if that integer is unsigned the range changes from zero to just over positive 4 billion however there is a different format specifier to display an unsigned integer you instead use percent u so then let's display these percent d for a signed integer and percent u for an unsigned integer and these are the maximum numbers and then if i was to exceed the range this again would cause an overflow and reset these numbers back to their minimum values so those are standard integers they use four bytes of memory so they can store numbers between these ranges depending if they're signed or unsigned all right the last data type we're going to talk about for this topic is a long long integer now the reason that we have long twice is that with standard integers these are already considered longs but we don't need to explicitly type long for standard integers so to represent a really large number we can use a long long integer and these use eight bytes of memory the effective range for a signed long long integer is just underneath nine quintillion two just over nine quintillion and the format specifier for a long long integer one that is signed is percent lld now if it's unsigned that changes the range between 0 to just over positive 18 quintillion and the format specifier is percent llu then let's display these so for a signed long long integer that is lld and if it's unsigned that is llu now we'll encounter a warning so this warning applies to our unsigned long long integer integer constant is so large that it is unsigned so one way in which we can prevent that warning is after our number within our unsigned long long integer add a u to the end of this so then we can display this number with no warning so since long long integers use so many bytes they can store a gigantic number we tend to not use long long integers very often because well we don't really have a need for this large of a number but in certain circumstances you might perhaps you're dealing with the speed of light or something you may need to use a long long integer but commonly we use standard integers a lot more well yeah everybody those are even more c data types we likely won't be using most of these but you should still be made aware of their existence i would say that we're going to focus on chars array of chars doubles booleans and integers so pay attention to those ones but you should still be made aware of the existence of other data types just in case you encounter them if you found this video helpful please smash that like button leave a random comment down below and subscribe if you'd like to become a fellow bro
