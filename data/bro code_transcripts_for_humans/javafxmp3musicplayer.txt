With timestamps:

00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm going to explain
00:05 - now we can make a simple mp3 player
00:06 - using javafx
00:08 - so sit back relax and enjoy the show
00:14 - we're gonna build an mp3 player today so
00:17 - pick a pane of your choosing i'm going
00:19 - to use an anchor pane because they're
00:20 - fairly simple to use
00:22 - and this doesn't need to be so tall
00:25 - that's not too bad
00:26 - okay let's give this pain a unique id
00:30 - for the id let's just say a pane
00:33 - now let's add a label to hold the name
00:35 - of the current song
00:36 - labels are found underneath controls
00:37 - just drag and drop one place it near the
00:39 - top
00:40 - let me increase the font size pick
00:43 - whatever font size that you want
00:45 - maybe a little bit bigger that's not too
00:48 - bad
00:50 - okay then let me expand this
00:55 - and i'm going to center it so go to
00:57 - alignment then center
01:00 - and let's give this label a unique id
01:03 - let's say that this is
01:04 - song label then let's add a progress bar
01:08 - directly underneath
01:10 - so that is found underneath controls
01:12 - progress bar
01:13 - let's place it underneath our label
01:17 - and expand it and this will be song
01:21 - progress bar
01:25 - and we'll need a bunch of buttons for
01:27 - controls that is also found underneath
01:29 - controls
01:30 - let's begin with a play button let's
01:33 - expand it
01:34 - i'll increase the font size too
01:39 - and change text to play
01:42 - let's copy this and paste it the next
01:45 - button will be pause
01:49 - we'll link some methods later on
01:54 - then we have reset to reset the song
02:04 - previous to go to the previous song
02:11 - let me decrease the font size
02:15 - that's good then next to go to the next
02:20 - song
02:23 - okay we'll need a drop down menu of some
02:26 - sort
02:26 - preferably a combo box to change the
02:28 - speed
02:30 - of the song that it's playing
02:34 - okay for the prompt text let's say speed
02:40 - then a volume slider
02:46 - let's use a horizontal slider i think
02:48 - i'm going to expand this a little bit
02:53 - just so we can fit that slider in
03:02 - this combo box of speed i'm just going
03:04 - to give a unique id
03:06 - of speed box or speed combo box works
03:09 - too i suppose
03:11 - and this volume slider let's give an id
03:13 - of
03:14 - volume slider i think i'm going to
03:18 - expand the size of this label
03:19 - so let me drag and drop the buttons down
03:23 - same thing goes with the combo box and
03:25 - our slider
03:26 - and the progress bar and let me increase
03:30 - the size of this label
03:33 - and increase the font size too
03:37 - that's pretty good and i'll change the
03:39 - text let's say
03:41 - mp3 player now what we'll do at this
03:46 - point is give each button a unique id
03:49 - and link a method using on action so
03:52 - let's begin with the play button
03:53 - play button on action play
03:57 - media then go to pause
04:00 - pause button on action
04:03 - pause media
04:07 - reset button
04:10 - reset media okay
04:14 - previous button previous button
04:17 - on action previous
04:21 - media the next button
04:24 - next button
04:28 - next media our combo box we have an idea
04:32 - of speed box
04:33 - on action change speed
04:37 - our volume slider doesn't have a on
04:40 - action section so we're going to add a
04:42 - change
04:42 - listener to that within the initialize
04:44 - method let's just make sure that we have
04:47 - a unique id
04:48 - of volume slider same thing goes with
04:50 - our progress bar
04:51 - song progress bar our label is named
04:55 - song label okay there's a few things
04:57 - that we need to do within our
04:59 - volume slider so click on your volume
05:01 - slider underneath properties let's keep
05:03 - min at zero so zero will be muted
05:06 - basically
05:07 - max will be 200 so we can increase the
05:09 - sound of our music the volume to
05:12 - 200 percent the default will be 100 so
05:14 - let's change
05:15 - value to 100 and that should be it for
05:18 - our volume
05:19 - slider you can also change the color
05:21 - scheme of your nodes by using
05:23 - a css style property so click on a node
05:26 - of your choosing let's change the
05:28 - background color of our pane
05:29 - so i'm going to click on my anchor pin
05:31 - then go to properties
05:33 - then underneath style i can add a css
05:35 - property of my choosing
05:37 - so if i would like black i can type in
05:39 - the word black
05:40 - or i can use a hex value so let's say
05:43 - six twos
05:47 - now we can do something similar with the
05:49 - label and then go to text fill
05:51 - and change the color here so that's
05:53 - another option too
05:54 - and we are done building the layout of
05:56 - our mp3 player let's make sure that our
05:58 - controller class
05:59 - is linked save and then head to our
06:02 - controller class
06:04 - before we forget we should refresh our
06:07 - project so i'm going to go to my project
06:09 - folder and click refresh
06:11 - so in order for this program to run we
06:13 - need to declare all of those different
06:15 - methods that are linked to each button
06:17 - so they can be found within your fxml
06:19 - file
06:21 - then you can see anything underlined in
06:23 - red we'll need to declare as a method
06:25 - so let's head to our controller class
06:27 - and the first method that we'll declare
06:29 - is our initialize method but we need to
06:31 - implement the initialized interface
06:35 - then hover over controller add any
06:37 - unimplemented methods
06:39 - after our initialize method we're going
06:41 - to declare our
06:42 - play media method public void play
06:46 - media followed by pause media
06:50 - let me copy this paste it let's change
06:53 - play to
06:54 - pause media then we have reset media
07:02 - previous media
07:08 - next media
07:13 - change speed and there will be one
07:17 - parameter of
07:18 - action event event action
07:21 - event event
07:25 - we'll also be implementing a timer
07:28 - so let's create a method named begin
07:31 - timer
07:33 - as well as cancel timer
07:39 - okay we should at least be able to run
07:41 - this now
07:44 - so if you need some music to work with
07:46 - you can always head to youtube's audio
07:48 - library and
07:49 - find a couple songs that you like and
07:51 - then there should be a download link
07:52 - underneath each video
07:54 - so find maybe three songs that you like
07:56 - and then we can move on
07:58 - to make my music easy to find within my
08:00 - project folder i'm going to create a
08:02 - new folder and i'm going to name this
08:05 - music then finish
08:09 - so i have a music folder within my
08:11 - project folder
08:12 - find the mp3 files that you downloaded
08:14 - i'm going to copy them
08:16 - go to my music folder and then paste
08:18 - them so we should have
08:19 - a couple mp3 files within our music
08:22 - folder
08:22 - preceding our initialize method we're
08:25 - going to declare everything that we'll
08:26 - need throughout this program
08:28 - so we'll use some xml injection for our
08:31 - pin
08:32 - private pin pane
08:36 - at fxml private
08:39 - label song label
08:44 - then we have a bunch of buttons private
08:48 - button play button
08:52 - followed by pause button
08:57 - reset button previous button
09:02 - then next button
09:06 - at fxml private
09:11 - combo box this is for our speed we're
09:14 - going to list a generic type of string
09:18 - speed box
09:22 - at fxml
09:25 - private slider
09:29 - volume slider
09:33 - at fxml
09:36 - private progress bar
09:40 - song progress bar
09:47 - we're going to create a file to hold our
09:50 - directory
09:51 - of music private
09:54 - file directory
09:58 - as well as an array of files
10:02 - so that would be private file array
10:06 - files
10:10 - and an array list of files private
10:14 - array list will list a generic type
10:18 - of file and this will be named songs
10:22 - this is kind of like our playlist
10:26 - private int song number
10:29 - to keep track of what number song we're
10:31 - on now we'll need
10:33 - some speeds for our speed combo box
10:36 - so that will be an array of integers
10:39 - private int array
10:43 - speeds and list a bunch of different
10:46 - speeds that you want
10:47 - so think of this as in percent so let's
10:49 - say we have 25
10:51 - 50 75 100 will be the default
10:55 - 125 150 175
10:58 - and 200
11:02 - we'll need a timer private
11:05 - timer timer basically the timer is going
11:09 - to keep track of our progress bar and
11:11 - update it every second or so
11:13 - so private timer timer followed by
11:16 - private
11:17 - timer task task
11:22 - and lastly private boolean
11:25 - running we will set this to true or
11:28 - false depending if
11:29 - our player is currently playing a song
11:31 - or not okay it's time to fill in our
11:34 - initialize method
11:35 - so the first thing that we're going to
11:36 - do is initialize our array list of songs
11:39 - this will function as a playlist
11:41 - as well as our directory so within our
11:44 - initialize method
11:46 - take songs equals new
11:49 - array list list engineer type of file
11:56 - and we are going to set our directory
11:59 - equal to
12:00 - new file and pass in the name of this
12:04 - folder
12:08 - music
12:10 - okay so we will take our array of files
12:14 - which is up here and
12:17 - set this equal to directory
12:21 - dot list files
12:24 - so a quick summary about this method is
12:27 - that this method
12:28 - list files will get all of the different
12:30 - files within our directory
12:32 - so if we have three songs in here it's
12:34 - going to store
12:35 - all of these songs within this
12:37 - collection of files
12:38 - so it's going to continue until there's
12:40 - no more
12:42 - so let's check to see if files
12:46 - does not equal no
12:51 - if it does not equal null then we'll
12:53 - create a for each loop
12:56 - for file file
13:00 - in our array of files
13:04 - we will take songs that's our arraylist
13:08 - dot add file
13:12 - just to test this i'm going to
13:15 - system.out.printline each file
13:18 - just so that we know that it's working
13:19 - fine
13:21 - okay not bad okay so i forgot to declare
13:25 - a media and media player object so let's
13:27 - take care of that because i forgot
13:29 - private media media then
13:32 - private media player media
13:36 - player now within our initialize method
13:40 - after our if statement we're going to
13:42 - finish instantiating our media as well
13:44 - as our media player object
13:47 - media equals new media
13:52 - and pass in songs dot
13:56 - get and our index our index is going to
14:00 - be
14:00 - our song number so in the beginning it's
14:03 - going to be zero
14:04 - the beginning of our playlist followed
14:07 - by
14:07 - dot to uri followed by
14:11 - to string
14:14 - then we're going to load our media
14:16 - player with our media object
14:18 - so media player equals
14:22 - new media player
14:25 - then pass in your media object
14:29 - now i'm going to change the text of our
14:31 - song label to reflect the name of the
14:33 - current song that is playing well the
14:35 - initial song that is playing at least
14:37 - song label dot set text and we need to
14:40 - pass in
14:41 - a string so to get the name of the
14:44 - current song
14:45 - type our arraylist of songs songs.get
14:50 - and our index is our song number
14:52 - initially it's going to be zero
14:54 - followed by dot get
14:57 - and let's test this so the first song in
15:00 - my playlist is block party
15:02 - so my song label should be updated with
15:04 - that name
15:06 - blockparty.mp3 we'll be returning to our
15:10 - initialize method a little bit later on
15:11 - let's fill in our play media method just
15:13 - to test it
15:14 - so take media player dot
15:18 - play
15:22 - there so when i click on our play button
15:24 - it should play our song
15:29 - not too bad not too bad let's work on
15:32 - pause next
15:35 - so within our pause media method take
15:37 - our media player
15:39 - and use the pause method
15:42 - let's try it again
15:46 - we can play
15:48 - [Music]
15:50 - and we can pause
15:57 - all right within reset media all we have
15:59 - to type is
16:00 - media player dot seek
16:04 - and we have to pass in a duration
16:07 - our duration is going to be
16:12 - seconds 0.0
16:17 - i guess just zero works due okay let's
16:20 - try the reset button
16:25 - okay play
16:27 - [Music]
16:34 - nice let's fill in our next media method
16:38 - to change to the next song
16:40 - so we'll need to check the current song
16:42 - number if
16:44 - song number is less than
16:47 - our songs dot size
16:51 - minus one then we will move to the next
16:54 - song
16:56 - so we will increment our song number by
16:59 - one
16:59 - song number plus plus this is our index
17:03 - and we will take our media player
17:06 - and use the stop method
17:12 - and we will play it later on and we will
17:15 - load our media with
17:16 - a new file media actually we can copy
17:19 - this part
17:20 - so copy media and a media player these
17:24 - two lines
17:25 - as well as our song label too i suppose
17:27 - let's copy
17:28 - all of those lines and within our if
17:30 - statement within the next media method
17:32 - let's paste these so what would happen
17:36 - if we reached the end of our playlist
17:38 - so let's take a look
17:41 - so i'm just going to hit next next
17:44 - and we can't move past the last song so
17:46 - we would like to go back to the
17:48 - beginning of the playlist
17:49 - so that will be our else statement else
17:53 - let's copy all of this code but we're
17:56 - going to make one change
17:58 - set song number equal to zero
18:02 - so i should be able to cycle through my
18:04 - playlist
18:05 - using the next button so i'm beginning
18:08 - with block party here followed by
18:09 - level up 12 speed then back to block
18:12 - party
18:13 - and let's play these just to be sure
18:14 - that it's working so we have block party
18:19 - level up
18:23 - then 12 speed
18:28 - so if you want these songs to
18:29 - automatically play after hitting the
18:31 - next button
18:32 - you can just add this line we just have
18:34 - to call our play media method
18:36 - at the end so at the end of our if
18:38 - statement
18:39 - play media if you want the song to play
18:41 - automatically after hitting
18:43 - next and add that to your else statement
18:45 - as well
18:49 - so these should play automatically after
18:51 - hitting the next button
18:52 - but you can keep out this feature if you
18:54 - want
19:01 - now let's fill in our previous media
19:03 - method so we can move
19:04 - backwards through our playlist and
19:06 - honestly we just need to copy everything
19:08 - within our next media method
19:10 - and make just three small changes so
19:13 - let's copy all of this
19:14 - then paste it
19:17 - then within our if statement change if
19:20 - song number
19:21 - is greater than zero take our song
19:23 - number
19:24 - and decrement it
19:27 - then change within our else statement
19:30 - song number
19:31 - equals songs dot
19:35 - size method minus one
19:38 - so we should be able to cycle backwards
19:41 - through our playlist now
19:42 - let's try it
19:45 - so i have block party to begin
19:54 - now our next task is to work on our
19:55 - speed box to change the speed of the
19:57 - song that is currently playing currently
19:59 - there's no values
20:00 - so within our initialize method head to
20:03 - the bottom
20:03 - and add these lines of code we'll create
20:05 - a for loop
20:08 - int i equals zero we will continue this
20:12 - for loop as long as i
20:13 - is less than speeds dot
20:17 - length speeds is our array that we
20:19 - initialized in the beginning
20:21 - then increment i by one
20:25 - and after each iteration of this for
20:27 - loop we will take
20:28 - our speed box dot get
20:32 - items then use the
20:35 - add method and pass in a string the
20:38 - string that we're going to pass in
20:39 - is integer dot
20:43 - 2 string
20:47 - our array of speeds at index of i
20:52 - so this should populate our speed box
20:55 - our
20:56 - combo box so we have speeds 25
20:59 - through 200 or whatever speeds that you
21:01 - filled in within this array in the
21:03 - beginning
21:04 - this part isn't necessary but i'm going
21:06 - to add plus
21:07 - percent after each of my speeds just so
21:10 - that it's easier to understand
21:12 - so i have speeds 25 through 200
21:16 - after our for loop we're going to create
21:18 - a reference to
21:19 - our change speed method down at the
21:22 - bottom here
21:24 - so at the end of our initialize method
21:26 - we will take
21:28 - our speed box
21:32 - dot set on
21:35 - action then within the
21:39 - set on action method take
21:42 - this colon colon so we're making a
21:44 - reference to our
21:46 - change speed method
21:49 - then let's fill in our change speed
21:51 - method near the bottom
21:53 - to change the speed of our media player
21:55 - we're going to change the rate
21:57 - media player dot set
22:01 - rate and pass in a double
22:04 - integer dot parse int
22:10 - speed box dot get
22:14 - value
22:17 - then multiply this by 0.01
22:21 - now one issue with our speed box is that
22:24 - we added
22:24 - this percent sign to the end of each
22:27 - value
22:28 - and since we're getting the value then
22:31 - multiplying it by
22:32 - 0.01 we're not going to get the intended
22:35 - results
22:35 - so just to test this i'm going to remove
22:38 - this percent sign
22:40 - then there's one change we're going to
22:41 - make right after
22:43 - so let's play and then change the speed
22:46 - so we have 125
22:56 - [Music]
22:58 - now if you were to keep this percent
23:00 - sign in and append each
23:02 - speed value with a percent at the end
23:04 - this is going to be the result we'll
23:06 - just run into an error really
23:09 - let me change the speed
23:12 - all right so we need to account for this
23:14 - percent sign and one easy way to do that
23:17 - is to create a substring
23:19 - so let me turn this line into a comment
23:24 - so here's the change that we're gonna
23:26 - make after get value we'll create a
23:29 - substring
23:29 - dot sub string
23:34 - we need a beginning and ending index
23:38 - zero comma speed
23:42 - box dot get value
23:46 - followed by dot length
23:50 - method minus one so this should work now
23:58 - so we have all of our speeds plus their
24:00 - percentages
24:03 - and we can change the speed
24:06 - that's real slapper right there
24:17 - [Music]
24:20 - now there's one issue if i were to
24:22 - change the speed of a song
24:25 - it's not going to be retained when we
24:27 - move to the next song
24:28 - here's an example so this first song of
24:31 - mine will play at 200 percent
24:35 - but then if i switch songs it's not
24:37 - going to be at 200
24:38 - it's going to be the default of 100 even
24:41 - though our speed box says 200
24:43 - here's an example
24:48 - so these other songs were playing at 100
24:51 - so after we change songs let's call our
24:54 - change speed method i think the easiest
24:57 - way to do this would be to head to our
24:59 - play media method
25:00 - and before we actually play our media
25:03 - let's change the speed
25:04 - so change speed
25:07 - okay so we need to pass in an argument
25:09 - because there's a parameter of
25:11 - action event event but we can just pass
25:14 - in null
25:17 - okay let's try it so i'm first going to
25:20 - change
25:21 - the speed and then switch songs
25:29 - [Music]
25:37 - okay now check this out what if i was to
25:39 - change songs without changing the volume
25:42 - first
25:45 - so we'll run into an error the reason
25:47 - that this is happening
25:48 - if i were to change songs without
25:50 - changing the speed first
25:52 - is because with our speed combo box if
25:55 - we do not initially select a speed
25:57 - this will have a default value of null
26:01 - and then when we do change our speed
26:03 - what we're doing
26:04 - is that we're taking our speed
26:07 - multiplying it by
26:08 - 0.01 we're basically multiplying null
26:12 - times 0.01 so let's check to see
26:15 - if our value of our speed box is equal
26:19 - to null before changing the speed so
26:22 - within our change
26:23 - speed method let's check to see if our
26:25 - speed box is
26:26 - equal to null if speed
26:30 - box dot get value
26:33 - is equal to null
26:37 - then we will set a default rate media
26:41 - player dot set rate
26:45 - and let's set this to 1.
26:49 - else we can change the speed normally to
26:52 - whatever the
26:53 - speed box value is
26:56 - and let's try it so we should be able to
26:59 - cycle through our songs
27:06 - now we have our volume slider to work on
27:08 - to change the volume of our song that is
27:10 - playing
27:11 - we'll add an anonymous change listener
27:14 - to our volume slider at the end of our
27:16 - initialize method
27:18 - so head to the end of your initialize
27:20 - method
27:21 - and we will take our volume slider
27:24 - dot value property method
27:28 - dot add listener and we're going to pass
27:32 - in
27:32 - an anonymous change listener new
27:36 - change listener then we will add a
27:39 - generic
27:40 - of number then add a set of parentheses
27:44 - then curly braces so be sure to
27:48 - add any unimplemented methods so when
27:50 - you adjust
27:51 - the knob on your volume listener you're
27:54 - going to call this method of changed
27:56 - so what we'll do is take our media
27:59 - player
28:00 - dot set volume and pass in a double
28:04 - and the double that we're going to pass
28:05 - in is the current
28:07 - value of our slider volume slider
28:11 - dot get value method
28:15 - and since we're working on a scale
28:16 - between 0 and 200
28:18 - let's multiply all of this by 0.01
28:22 - so this should work now
28:25 - [Music]
28:29 - if you go all the way to the left you
28:30 - can actually mute it
28:37 - hold on we need to fix something i'm
28:39 - going to change the max
28:41 - to 100 and let's set the initial
28:44 - value to 50 and this is within our fxml
28:48 - file so let's save this
28:50 - and try it again because when i was
28:52 - increasing the volume
28:54 - past the mid mark it wasn't actually
28:56 - going up
28:58 - [Music]
29:06 - now our last mission is to work on our
29:08 - progress bar so
29:09 - after about every second let's update
29:12 - the progress of our progress bar to
29:13 - reflect
29:14 - how much of our song is complete and
29:16 - then once our song is complete
29:18 - our progress bar should be at one
29:20 - hundred percent so let's head to our
29:22 - begin
29:23 - timer method and create a new timer now
29:26 - we've already declared our timer we just
29:28 - need to instantiate it timer
29:30 - equals new timer
29:33 - let's instantiate our task task
29:36 - equals new timer task
29:40 - and there's some code that we have to
29:41 - write in here later
29:44 - and we will take our timer dot schedule
29:47 - at fixed rate
29:48 - and we pass in a timer task a delay and
29:51 - a period
29:52 - or interval time to repeat our task so
29:55 - we have our task
29:56 - let's set our delay to 1 000
29:59 - milliseconds so one second
30:01 - and we will repeat this every 1000
30:03 - milliseconds
30:05 - okay within our timer task within these
30:07 - curly braces
30:09 - let's declare a run method
30:12 - public void
30:15 - run let's take our boolean
30:18 - variable of running and set the sql to
30:20 - true because
30:22 - this is now running and we will create
30:25 - a double value named current
30:28 - and set the sequel to the current time
30:30 - of our song that is elapsed
30:32 - media player dot get
30:36 - current time and this will return a
30:39 - duration object
30:40 - so we need to convert this to seconds so
30:44 - follow this with the
30:45 - two seconds method now we need to get
30:48 - the ending time of our song
30:50 - we can declare another double value
30:52 - named end
30:53 - well variable and equals media
30:57 - get duration this returns a duration
31:00 - object
31:02 - and convert this to seconds
31:07 - and just to test it i'm going to
31:09 - system.out.printline
31:10 - current divided by end
31:14 - then let's take our song
31:17 - bar and use the set progress method
31:21 - and pass in current divided by
31:25 - end now once our song finishes we should
31:28 - cancel our timer so that it's no longer
31:30 - running
31:31 - so at the end of our run method let's
31:33 - check to see
31:34 - if current divided by end is equal
31:37 - to one if this is true
31:41 - then we will call the cancel timer
31:44 - method found near the bottom of our
31:45 - program
31:47 - and within our cancel timer method we
31:50 - will set
31:50 - running equal to false
31:54 - timer dot cancel
31:57 - now there are a few places in which
31:59 - we're going to call the begin timer as
32:01 - well as the cancel timer methods
32:03 - let's begin with the play media method
32:07 - and the first line will be begin
32:10 - timer then within our pause media method
32:13 - let's cancel timer
32:18 - when we click on our reset button we're
32:20 - going to reset
32:21 - our progress bar song progress
32:25 - bar dot set progress
32:28 - pass in zero then within
32:32 - our previous media method after we stop
32:35 - our media player let's check to see if
32:38 - running is set to true
32:40 - if running then we will cancel
32:43 - our timer cancel timer
32:47 - method copy our if statement
32:50 - and place this in the same area within
32:52 - our else statement
32:53 - underneath the previous media method so
32:56 - i'm going to paste this right here
32:59 - then head to next media underneath media
33:02 - player dot stop
33:04 - cancel the current timer within an if
33:06 - statement if running
33:08 - and place that here as well within our
33:10 - else statement
33:11 - all right let's test this now
33:18 - so you can see our progress bar is
33:19 - filling with progress
33:21 - [Music]
33:23 - now you technically don't need this
33:24 - print line statement i was just checking
33:26 - on the percent that our progress bar was
33:28 - filled
33:29 - you can always multiply that by 100 and
33:31 - formatted two to get a percentage
33:34 - okay this is how to change the color of
33:36 - a progress bar the meter
33:38 - that fills up because normally the
33:39 - default is blue so let's add this to our
33:42 - initialize method near the bottom
33:44 - so that would be right here so take song
33:48 - progress bar dot
33:51 - set style and we can add a css property
33:55 - as a string
33:58 - so that would be dash fx dash
34:02 - accent colon space you can add a color
34:05 - name
34:06 - or a hex value so let's say that i would
34:08 - like green to match that would be 0 0
34:11 - ff 0 0 then semicolon
34:14 - so my progress bar should be green now
34:21 - yep it's green
34:22 - [Music]
34:26 - now i'm just going to go over a few bug
34:28 - fixes that i noticed
34:30 - so i'm going to change the delay of my
34:32 - timer to
34:33 - zero because if the progress bar is
34:35 - filled with you know some amount of
34:37 - progress then we switch songs
34:38 - well it still displays that partially
34:41 - filled progress bar for like a second
34:43 - so let's change this to zero one other
34:46 - bug that i noticed that we should fix if
34:48 - i was to change the volume
34:50 - let's say we mute it and then switch
34:52 - songs
34:54 - it'll still play at the normal volume so
34:56 - let's take
34:57 - this line of code media player dot set
34:59 - volume
35:01 - and when we play media let's also change
35:04 - the volume to reflect whatever our
35:06 - volume slider is
35:08 - so that should fix that bug
35:11 - okay yeah you can see that it's all
35:12 - muted now also when we close out of our
35:15 - application
35:16 - using this x button in the corner we're
35:18 - going to do so gracefully
35:20 - using the main java file
35:23 - so when we click on this x button we're
35:26 - going to call automatically
35:27 - the set on close request method of a
35:30 - stage
35:31 - so type the name of your stage minus
35:33 - stage dot set
35:34 - on close request and we're going to pass
35:37 - in an anonymous event
35:39 - handler new event
35:42 - handler and add a generic type
35:45 - of window event
35:48 - parentheses curly braces add any
35:51 - unimplemented methods so we should have
35:53 - a
35:54 - handle method within our anonymous event
35:57 - handler platform
36:00 - dot exit method followed by
36:04 - system dot exit pass
36:08 - in a status of zero
36:11 - so if there's any sort of cleanup that
36:12 - you need to do before a user closes out
36:15 - of your stage
36:16 - you can write that code within the
36:18 - handle method of an anonymous event
36:20 - handler
36:21 - well everybody that is a simple mp3
36:23 - player using javafx if you would like a
36:26 - copy of all this code i will post all of
36:28 - this to the comments section down below
36:29 - don't be afraid to smash that like
36:32 - button
36:32 - drop a random comment down below and
36:35 - subscribe if you'd like to become a
36:38 - fellow

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video i'm going to explain now we can make a simple mp3 player using javafx so sit back relax and enjoy the show we're gonna build an mp3 player today so pick a pane of your choosing i'm going to use an anchor pane because they're fairly simple to use and this doesn't need to be so tall that's not too bad okay let's give this pain a unique id for the id let's just say a pane now let's add a label to hold the name of the current song labels are found underneath controls just drag and drop one place it near the top let me increase the font size pick whatever font size that you want maybe a little bit bigger that's not too bad okay then let me expand this and i'm going to center it so go to alignment then center and let's give this label a unique id let's say that this is song label then let's add a progress bar directly underneath so that is found underneath controls progress bar let's place it underneath our label and expand it and this will be song progress bar and we'll need a bunch of buttons for controls that is also found underneath controls let's begin with a play button let's expand it i'll increase the font size too and change text to play let's copy this and paste it the next button will be pause we'll link some methods later on then we have reset to reset the song previous to go to the previous song let me decrease the font size that's good then next to go to the next song okay we'll need a drop down menu of some sort preferably a combo box to change the speed of the song that it's playing okay for the prompt text let's say speed then a volume slider let's use a horizontal slider i think i'm going to expand this a little bit just so we can fit that slider in this combo box of speed i'm just going to give a unique id of speed box or speed combo box works too i suppose and this volume slider let's give an id of volume slider i think i'm going to expand the size of this label so let me drag and drop the buttons down same thing goes with the combo box and our slider and the progress bar and let me increase the size of this label and increase the font size too that's pretty good and i'll change the text let's say mp3 player now what we'll do at this point is give each button a unique id and link a method using on action so let's begin with the play button play button on action play media then go to pause pause button on action pause media reset button reset media okay previous button previous button on action previous media the next button next button next media our combo box we have an idea of speed box on action change speed our volume slider doesn't have a on action section so we're going to add a change listener to that within the initialize method let's just make sure that we have a unique id of volume slider same thing goes with our progress bar song progress bar our label is named song label okay there's a few things that we need to do within our volume slider so click on your volume slider underneath properties let's keep min at zero so zero will be muted basically max will be 200 so we can increase the sound of our music the volume to 200 percent the default will be 100 so let's change value to 100 and that should be it for our volume slider you can also change the color scheme of your nodes by using a css style property so click on a node of your choosing let's change the background color of our pane so i'm going to click on my anchor pin then go to properties then underneath style i can add a css property of my choosing so if i would like black i can type in the word black or i can use a hex value so let's say six twos now we can do something similar with the label and then go to text fill and change the color here so that's another option too and we are done building the layout of our mp3 player let's make sure that our controller class is linked save and then head to our controller class before we forget we should refresh our project so i'm going to go to my project folder and click refresh so in order for this program to run we need to declare all of those different methods that are linked to each button so they can be found within your fxml file then you can see anything underlined in red we'll need to declare as a method so let's head to our controller class and the first method that we'll declare is our initialize method but we need to implement the initialized interface then hover over controller add any unimplemented methods after our initialize method we're going to declare our play media method public void play media followed by pause media let me copy this paste it let's change play to pause media then we have reset media previous media next media change speed and there will be one parameter of action event event action event event we'll also be implementing a timer so let's create a method named begin timer as well as cancel timer okay we should at least be able to run this now so if you need some music to work with you can always head to youtube's audio library and find a couple songs that you like and then there should be a download link underneath each video so find maybe three songs that you like and then we can move on to make my music easy to find within my project folder i'm going to create a new folder and i'm going to name this music then finish so i have a music folder within my project folder find the mp3 files that you downloaded i'm going to copy them go to my music folder and then paste them so we should have a couple mp3 files within our music folder preceding our initialize method we're going to declare everything that we'll need throughout this program so we'll use some xml injection for our pin private pin pane at fxml private label song label then we have a bunch of buttons private button play button followed by pause button reset button previous button then next button at fxml private combo box this is for our speed we're going to list a generic type of string speed box at fxml private slider volume slider at fxml private progress bar song progress bar we're going to create a file to hold our directory of music private file directory as well as an array of files so that would be private file array files and an array list of files private array list will list a generic type of file and this will be named songs this is kind of like our playlist private int song number to keep track of what number song we're on now we'll need some speeds for our speed combo box so that will be an array of integers private int array speeds and list a bunch of different speeds that you want so think of this as in percent so let's say we have 25 50 75 100 will be the default 125 150 175 and 200 we'll need a timer private timer timer basically the timer is going to keep track of our progress bar and update it every second or so so private timer timer followed by private timer task task and lastly private boolean running we will set this to true or false depending if our player is currently playing a song or not okay it's time to fill in our initialize method so the first thing that we're going to do is initialize our array list of songs this will function as a playlist as well as our directory so within our initialize method take songs equals new array list list engineer type of file and we are going to set our directory equal to new file and pass in the name of this folder music okay so we will take our array of files which is up here and set this equal to directory dot list files so a quick summary about this method is that this method list files will get all of the different files within our directory so if we have three songs in here it's going to store all of these songs within this collection of files so it's going to continue until there's no more so let's check to see if files does not equal no if it does not equal null then we'll create a for each loop for file file in our array of files we will take songs that's our arraylist dot add file just to test this i'm going to system.out.printline each file just so that we know that it's working fine okay not bad okay so i forgot to declare a media and media player object so let's take care of that because i forgot private media media then private media player media player now within our initialize method after our if statement we're going to finish instantiating our media as well as our media player object media equals new media and pass in songs dot get and our index our index is going to be our song number so in the beginning it's going to be zero the beginning of our playlist followed by dot to uri followed by to string then we're going to load our media player with our media object so media player equals new media player then pass in your media object now i'm going to change the text of our song label to reflect the name of the current song that is playing well the initial song that is playing at least song label dot set text and we need to pass in a string so to get the name of the current song type our arraylist of songs songs.get and our index is our song number initially it's going to be zero followed by dot get and let's test this so the first song in my playlist is block party so my song label should be updated with that name blockparty.mp3 we'll be returning to our initialize method a little bit later on let's fill in our play media method just to test it so take media player dot play there so when i click on our play button it should play our song not too bad not too bad let's work on pause next so within our pause media method take our media player and use the pause method let's try it again we can play and we can pause all right within reset media all we have to type is media player dot seek and we have to pass in a duration our duration is going to be seconds 0.0 i guess just zero works due okay let's try the reset button okay play nice let's fill in our next media method to change to the next song so we'll need to check the current song number if song number is less than our songs dot size minus one then we will move to the next song so we will increment our song number by one song number plus plus this is our index and we will take our media player and use the stop method and we will play it later on and we will load our media with a new file media actually we can copy this part so copy media and a media player these two lines as well as our song label too i suppose let's copy all of those lines and within our if statement within the next media method let's paste these so what would happen if we reached the end of our playlist so let's take a look so i'm just going to hit next next and we can't move past the last song so we would like to go back to the beginning of the playlist so that will be our else statement else let's copy all of this code but we're going to make one change set song number equal to zero so i should be able to cycle through my playlist using the next button so i'm beginning with block party here followed by level up 12 speed then back to block party and let's play these just to be sure that it's working so we have block party level up then 12 speed so if you want these songs to automatically play after hitting the next button you can just add this line we just have to call our play media method at the end so at the end of our if statement play media if you want the song to play automatically after hitting next and add that to your else statement as well so these should play automatically after hitting the next button but you can keep out this feature if you want now let's fill in our previous media method so we can move backwards through our playlist and honestly we just need to copy everything within our next media method and make just three small changes so let's copy all of this then paste it then within our if statement change if song number is greater than zero take our song number and decrement it then change within our else statement song number equals songs dot size method minus one so we should be able to cycle backwards through our playlist now let's try it so i have block party to begin now our next task is to work on our speed box to change the speed of the song that is currently playing currently there's no values so within our initialize method head to the bottom and add these lines of code we'll create a for loop int i equals zero we will continue this for loop as long as i is less than speeds dot length speeds is our array that we initialized in the beginning then increment i by one and after each iteration of this for loop we will take our speed box dot get items then use the add method and pass in a string the string that we're going to pass in is integer dot 2 string our array of speeds at index of i so this should populate our speed box our combo box so we have speeds 25 through 200 or whatever speeds that you filled in within this array in the beginning this part isn't necessary but i'm going to add plus percent after each of my speeds just so that it's easier to understand so i have speeds 25 through 200 after our for loop we're going to create a reference to our change speed method down at the bottom here so at the end of our initialize method we will take our speed box dot set on action then within the set on action method take this colon colon so we're making a reference to our change speed method then let's fill in our change speed method near the bottom to change the speed of our media player we're going to change the rate media player dot set rate and pass in a double integer dot parse int speed box dot get value then multiply this by 0.01 now one issue with our speed box is that we added this percent sign to the end of each value and since we're getting the value then multiplying it by 0.01 we're not going to get the intended results so just to test this i'm going to remove this percent sign then there's one change we're going to make right after so let's play and then change the speed so we have 125 now if you were to keep this percent sign in and append each speed value with a percent at the end this is going to be the result we'll just run into an error really let me change the speed all right so we need to account for this percent sign and one easy way to do that is to create a substring so let me turn this line into a comment so here's the change that we're gonna make after get value we'll create a substring dot sub string we need a beginning and ending index zero comma speed box dot get value followed by dot length method minus one so this should work now so we have all of our speeds plus their percentages and we can change the speed that's real slapper right there now there's one issue if i were to change the speed of a song it's not going to be retained when we move to the next song here's an example so this first song of mine will play at 200 percent but then if i switch songs it's not going to be at 200 it's going to be the default of 100 even though our speed box says 200 here's an example so these other songs were playing at 100 so after we change songs let's call our change speed method i think the easiest way to do this would be to head to our play media method and before we actually play our media let's change the speed so change speed okay so we need to pass in an argument because there's a parameter of action event event but we can just pass in null okay let's try it so i'm first going to change the speed and then switch songs okay now check this out what if i was to change songs without changing the volume first so we'll run into an error the reason that this is happening if i were to change songs without changing the speed first is because with our speed combo box if we do not initially select a speed this will have a default value of null and then when we do change our speed what we're doing is that we're taking our speed multiplying it by 0.01 we're basically multiplying null times 0.01 so let's check to see if our value of our speed box is equal to null before changing the speed so within our change speed method let's check to see if our speed box is equal to null if speed box dot get value is equal to null then we will set a default rate media player dot set rate and let's set this to 1. else we can change the speed normally to whatever the speed box value is and let's try it so we should be able to cycle through our songs now we have our volume slider to work on to change the volume of our song that is playing we'll add an anonymous change listener to our volume slider at the end of our initialize method so head to the end of your initialize method and we will take our volume slider dot value property method dot add listener and we're going to pass in an anonymous change listener new change listener then we will add a generic of number then add a set of parentheses then curly braces so be sure to add any unimplemented methods so when you adjust the knob on your volume listener you're going to call this method of changed so what we'll do is take our media player dot set volume and pass in a double and the double that we're going to pass in is the current value of our slider volume slider dot get value method and since we're working on a scale between 0 and 200 let's multiply all of this by 0.01 so this should work now if you go all the way to the left you can actually mute it hold on we need to fix something i'm going to change the max to 100 and let's set the initial value to 50 and this is within our fxml file so let's save this and try it again because when i was increasing the volume past the mid mark it wasn't actually going up now our last mission is to work on our progress bar so after about every second let's update the progress of our progress bar to reflect how much of our song is complete and then once our song is complete our progress bar should be at one hundred percent so let's head to our begin timer method and create a new timer now we've already declared our timer we just need to instantiate it timer equals new timer let's instantiate our task task equals new timer task and there's some code that we have to write in here later and we will take our timer dot schedule at fixed rate and we pass in a timer task a delay and a period or interval time to repeat our task so we have our task let's set our delay to 1 000 milliseconds so one second and we will repeat this every 1000 milliseconds okay within our timer task within these curly braces let's declare a run method public void run let's take our boolean variable of running and set the sql to true because this is now running and we will create a double value named current and set the sequel to the current time of our song that is elapsed media player dot get current time and this will return a duration object so we need to convert this to seconds so follow this with the two seconds method now we need to get the ending time of our song we can declare another double value named end well variable and equals media get duration this returns a duration object and convert this to seconds and just to test it i'm going to system.out.printline current divided by end then let's take our song bar and use the set progress method and pass in current divided by end now once our song finishes we should cancel our timer so that it's no longer running so at the end of our run method let's check to see if current divided by end is equal to one if this is true then we will call the cancel timer method found near the bottom of our program and within our cancel timer method we will set running equal to false timer dot cancel now there are a few places in which we're going to call the begin timer as well as the cancel timer methods let's begin with the play media method and the first line will be begin timer then within our pause media method let's cancel timer when we click on our reset button we're going to reset our progress bar song progress bar dot set progress pass in zero then within our previous media method after we stop our media player let's check to see if running is set to true if running then we will cancel our timer cancel timer method copy our if statement and place this in the same area within our else statement underneath the previous media method so i'm going to paste this right here then head to next media underneath media player dot stop cancel the current timer within an if statement if running and place that here as well within our else statement all right let's test this now so you can see our progress bar is filling with progress now you technically don't need this print line statement i was just checking on the percent that our progress bar was filled you can always multiply that by 100 and formatted two to get a percentage okay this is how to change the color of a progress bar the meter that fills up because normally the default is blue so let's add this to our initialize method near the bottom so that would be right here so take song progress bar dot set style and we can add a css property as a string so that would be dash fx dash accent colon space you can add a color name or a hex value so let's say that i would like green to match that would be 0 0 ff 0 0 then semicolon so my progress bar should be green now yep it's green now i'm just going to go over a few bug fixes that i noticed so i'm going to change the delay of my timer to zero because if the progress bar is filled with you know some amount of progress then we switch songs well it still displays that partially filled progress bar for like a second so let's change this to zero one other bug that i noticed that we should fix if i was to change the volume let's say we mute it and then switch songs it'll still play at the normal volume so let's take this line of code media player dot set volume and when we play media let's also change the volume to reflect whatever our volume slider is so that should fix that bug okay yeah you can see that it's all muted now also when we close out of our application using this x button in the corner we're going to do so gracefully using the main java file so when we click on this x button we're going to call automatically the set on close request method of a stage so type the name of your stage minus stage dot set on close request and we're going to pass in an anonymous event handler new event handler and add a generic type of window event parentheses curly braces add any unimplemented methods so we should have a handle method within our anonymous event handler platform dot exit method followed by system dot exit pass in a status of zero so if there's any sort of cleanup that you need to do before a user closes out of your stage you can write that code within the handle method of an anonymous event handler well everybody that is a simple mp3 player using javafx if you would like a copy of all this code i will post all of this to the comments section down below don't be afraid to smash that like button drop a random comment down below and subscribe if you'd like to become a fellow
