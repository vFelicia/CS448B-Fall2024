With timestamps:

00:02 - hey people i have a super quick video
00:04 - for you today on the differences between
00:06 - the continue and break statements so
00:08 - when using either statements within the
00:10 - context of a loop a continue statement
00:13 - will skip the rest of a section of code
00:15 - and force the next iteration of a loop a
00:18 - break statement will exit out of a loop
00:20 - entirely another place where you see
00:22 - break statements is when used within a
00:24 - switch after each case so here's an
00:26 - example let's say that we would like to
00:28 - count the numbers 1 through 20 but i
00:30 - would like to skip the number 13 because
00:32 - 13 is considered an unlucky number so if
00:35 - i were to write a program like that that
00:36 - would look something like this
00:38 - so let's use a for loop and i will set
00:41 - an index of i equal to one continue this
00:44 - as long as i is less than or equal to 20
00:47 - and then increment i by one then let's
00:49 - print our index so prince f we're
00:52 - displaying an integer and let's display
00:54 - i i'm just going to add a new line
00:56 - character after each iteration when we
00:58 - use a printf statement okay so this is
01:01 - what this looks like we have the numbers
01:03 - 1 through 20. so if i would like to skip
01:06 - the number 13 i can use a continue
01:08 - statement but we need to check to see if
01:10 - i is equal to 13 we can use an if
01:13 - statement
01:16 - so
01:16 - if i is equal to 13
01:19 - then we will continue
01:22 - and let's take a look so we have the
01:24 - numbers 1 through 20 but we are missing
01:27 - 13 so a continue statement will skip the
01:30 - rest of a section of code and force the
01:33 - next iteration of a loop now if this was
01:35 - a break statement this will break out of
01:38 - our loop entirely so once we reach 13
01:42 - then we will exit out of this loop
01:44 - entirely so here we only have the
01:46 - numbers 1 through 12 and then we break
01:50 - we exit out of the loop so that's a
01:52 - quick demonstration of the differences
01:54 - between continue and break the continue
01:56 - statement will skip the rest of a
01:58 - section of code and force the next
02:00 - iteration of a loop a break statement
02:03 - exits out of a loop entirely so yeah
02:05 - that's a super quick video on the
02:07 - differences between the continue and
02:09 - break statements if you would like a
02:11 - copy of this code i'll post this to the
02:12 - comments section down below and well
02:14 - yeah those are the major differences
02:16 - between the continue and break
02:18 - statements in c

Cleaned transcript:

hey people i have a super quick video for you today on the differences between the continue and break statements so when using either statements within the context of a loop a continue statement will skip the rest of a section of code and force the next iteration of a loop a break statement will exit out of a loop entirely another place where you see break statements is when used within a switch after each case so here's an example let's say that we would like to count the numbers 1 through 20 but i would like to skip the number 13 because 13 is considered an unlucky number so if i were to write a program like that that would look something like this so let's use a for loop and i will set an index of i equal to one continue this as long as i is less than or equal to 20 and then increment i by one then let's print our index so prince f we're displaying an integer and let's display i i'm just going to add a new line character after each iteration when we use a printf statement okay so this is what this looks like we have the numbers 1 through 20. so if i would like to skip the number 13 i can use a continue statement but we need to check to see if i is equal to 13 we can use an if statement so if i is equal to 13 then we will continue and let's take a look so we have the numbers 1 through 20 but we are missing 13 so a continue statement will skip the rest of a section of code and force the next iteration of a loop now if this was a break statement this will break out of our loop entirely so once we reach 13 then we will exit out of this loop entirely so here we only have the numbers 1 through 12 and then we break we exit out of the loop so that's a quick demonstration of the differences between continue and break the continue statement will skip the rest of a section of code and force the next iteration of a loop a break statement exits out of a loop entirely so yeah that's a super quick video on the differences between the continue and break statements if you would like a copy of this code i'll post this to the comments section down below and well yeah those are the major differences between the continue and break statements in c
