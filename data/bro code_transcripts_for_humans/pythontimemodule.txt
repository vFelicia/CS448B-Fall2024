With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to show you
00:05 - all a few useful functions related to
00:07 - times and dates using the time module in
00:09 - python so
00:10 - sit back relax and enjoy the show
00:15 - all right everybody so the time module
00:17 - let's begin by importing time
00:19 - and the first thing that i'm going to
00:21 - explain to you while is how we can find
00:23 - our computer's epic
00:24 - also pronounced as epoch so this is a
00:27 - date and time
00:28 - in which your computer thinks time began
00:31 - think of it that way at least
00:32 - so we use our epic as a reference point
00:36 - so to find your computer's epic it's
00:38 - going to vary based on your computer and
00:40 - your operating system
00:41 - so to find your computer's epic type
00:43 - time dot
00:44 - c time and as an argument we will pass
00:47 - in zero
00:48 - now what this method will do is that
00:50 - this method will convert a time
00:52 - expressed in seconds and convert it to a
00:55 - readable string
00:56 - so if i was to pass in 0 and print it
00:59 - well then
00:59 - this will display the date and time
01:02 - which is my epic
01:03 - our reference point so for me my epic is
01:07 - wednesday december 31st 6 p.m
01:11 - so i've just added a note that the c
01:14 - time method will convert a time
01:16 - expressed in seconds since epic and
01:19 - convert it to a
01:20 - readable string a readable date and time
01:24 - so for practice let's pass in perhaps
01:26 - one million seconds and see what date
01:28 - and time that we receive
01:30 - so our c time method will return a date
01:33 - and time
01:34 - one million seconds past this epic here
01:37 - so that would be for me monday january
01:40 - 12th
01:41 - about 7 a.m 1970. our next method is
01:45 - the time method of the time module let's
01:48 - print
01:48 - time dot time method and what this
01:51 - method will do
01:52 - is return the current seconds that have
01:54 - passed
01:55 - since our epic using our computer's
01:57 - clock
01:58 - so the number that i end up with is just
02:01 - over
02:02 - 1.6 billion and this is in seconds
02:05 - so for me billion seconds
02:08 - has passed since that date which is my
02:11 - epic
02:12 - i believe it was december 31st 1969
02:15 - and every time that i rerun this program
02:18 - you can see that the amount of seconds
02:20 - that has passed is actually increasing
02:23 - so
02:23 - that is the time method it will return
02:26 - the current seconds
02:27 - since you're epic using your computer's
02:29 - clock and you know what just for fun
02:32 - let's change the date and time under
02:34 - clock and see what happens
02:36 - so let's change the year to
02:39 - how about the year 2000 change
02:42 - and close so let's see what number we
02:45 - get with the
02:46 - time method now so we get just under
02:50 - 1 billion 948 million seconds have
02:53 - passed
02:54 - and now if you need to retrieve the
02:56 - current date and time
02:58 - well there's one of a few ways in which
02:59 - you could retrieve that
03:01 - but one way is that we can combine both
03:03 - of these methods of
03:04 - the c time method and the time method of
03:07 - the time module
03:08 - so let's print time dot c
03:11 - time and we're going to pass in an
03:14 - amount of seconds
03:15 - into the c time method as an argument so
03:18 - within
03:18 - the c time method we're going to call
03:20 - the time method
03:22 - so the time method will return an amount
03:24 - of seconds
03:25 - since our epic and the c time method
03:28 - will convert
03:28 - that amount of seconds to a readable
03:30 - date and time
03:32 - so the current date and time is saturday
03:35 - january 23rd about 3 p.m 2021
03:39 - now there is more than one way to get
03:40 - the current date and time
03:42 - another way is to use the local time
03:45 - method and the local time method will
03:47 - create a
03:48 - time object based on the current time so
03:51 - what i'm going to do is create a
03:53 - variable called
03:54 - time object and i just need to explain a
03:57 - few things about time objects
03:59 - so to best explain this i'm going to
04:01 - print our time
04:02 - object now a time object is also
04:05 - referred to as a
04:06 - struct time object it is made up of
04:09 - different keyword arguments
04:11 - there's a year a month day
04:14 - hour minutes seconds day of the week
04:17 - day of the year and this keyword
04:20 - argument here has something to do with
04:21 - daylight savings time
04:22 - so there's quite a few uses with time
04:25 - objects
04:26 - and one way is that we can format them
04:28 - however we want because right now
04:30 - this time object is not in a readable
04:33 - format
04:34 - so to convert this time object into a
04:36 - readable string we'll need the help of a
04:38 - separate function
04:40 - and that is the strf time function
04:44 - str is short for string f4 format
04:47 - and time well for time i guess so this
04:50 - function
04:50 - needs two arguments a format and a time
04:54 - object so our strf time function will
04:57 - accept
04:58 - a format and a time object as an
05:01 - argument
05:01 - so our format is really just a string
05:05 - of different directives and to best
05:07 - explain these i'm going to head to
05:09 - python's official documentation on this
05:11 - subject
05:12 - so here i am on python's website
05:14 - regarding the time module and
05:16 - underneath this section on the strf time
05:18 - function
05:19 - there are different directives that we
05:21 - can embed within our format string that
05:24 - we pass in as an argument
05:25 - depending on the directive that we add
05:28 - we can display
05:29 - a certain format of our date and time
05:32 - so for example if i was to pass in let's
05:35 - say
05:36 - percent lowercase a then we will display
05:39 - the time object's weekday name and
05:42 - you're not limited to just one directive
05:44 - you can add any combination of
05:46 - directives
05:47 - so if i was to add percent m well we
05:49 - would display
05:50 - the month of our date time object as a
05:53 - number
05:53 - one through twelve so there's a bunch of
05:55 - directives here and i'm going to be
05:57 - using some of these
05:58 - so within a string for the format
06:01 - argument
06:01 - i'm going to pass in percent capital b
06:04 - for the
06:05 - name of the month percent d
06:08 - for the day percent y
06:11 - for the year percent h
06:14 - for the hour and to format this i'm
06:16 - going to add a colon
06:18 - to separate hours and minutes percent
06:22 - m for minutes colon
06:25 - percent s for seconds
06:28 - and then we are going to assign all of
06:30 - this to a variable
06:32 - let's say local time and
06:35 - local time will be a string so let's
06:37 - print
06:38 - our local time and the current time
06:42 - is january 23rd
06:45 - 2021 about 3 p.m oh and i almost forgot
06:49 - you can also get the
06:51 - utc time that is the coordinated
06:54 - universal time if you know how that
06:56 - works
06:56 - so if you need that you would just use
06:58 - the gm
07:00 - time method for the utc time coordinated
07:03 - universal time
07:05 - okay next up we have the strp
07:08 - time function and this function will
07:10 - parse
07:11 - a string representation of a time and or
07:14 - date
07:15 - and return a time object so we need to
07:17 - pass in
07:18 - a string representing the date and or
07:20 - time as well as a format string
07:23 - so let's create a time string and this
07:25 - variable is going to be a string
07:27 - representation of a date let's say 20th
07:30 - of april
07:31 - 2020 and what we can do is take this
07:34 - string representation of a time and or
07:36 - date
07:37 - and parse it to a time object so we're
07:39 - going to pass in our time
07:41 - string variable as well as a format
07:44 - string
07:44 - so let's say i would like to parse
07:48 - the day so that would be percent d for
07:51 - day
07:52 - then percent b for name of the month
07:56 - and then comma percent y for year
08:00 - this function will create a time object
08:02 - so let's assign that to
08:03 - a variable time object equals time dot
08:06 - strp time we're passing in our string
08:09 - representation of
08:10 - a time or date as well as a format
08:13 - string
08:14 - and we can print our time object using a
08:17 - print statement
08:18 - however this is going to be in a form
08:20 - that is somewhat difficult to read
08:22 - but you can see at least we have a time
08:23 - object with all of these keywords filled
08:26 - in
08:26 - with anything that we passed in via
08:28 - these format directives that we have
08:30 - now the next function is the asc
08:33 - time function and this function accepts
08:36 - a time
08:37 - object or a tuple representation of a
08:40 - relative time
08:41 - so this time let's create a time tuple
08:45 - and we're going to follow this order we
08:47 - can pass in up to
08:48 - nine values the first value is a year so
08:51 - let's pass in perhaps
08:52 - 2020 a month let's say four
08:56 - a day how about 20 4 hours
08:59 - let's say four minutes 20 and seconds
09:02 - maybe zero let me just fix some of the
09:04 - spacing here
09:06 - okay you can also pass in a numbered day
09:08 - of the week
09:09 - um i'm just going to say zero i don't
09:12 - think it's really that important
09:13 - a day of the year zero and
09:16 - negative one or zero for daylight
09:18 - savings time so
09:19 - we created a time tuple and we can pass
09:22 - in a time
09:23 - object or a tuple representation of a
09:26 - time
09:26 - following this formula so let's pass in
09:29 - our time tuple
09:30 - and this will create a time string a
09:33 - string representation of the time that
09:35 - we create
09:36 - and let's print our time string
09:41 - and we should have april 20th
09:44 - about four in the morning the year 2020
09:47 - so that is
09:48 - asc time it will convert a tuple
09:50 - representation of a time and date
09:53 - or a time object and convert it to a
09:55 - readable
09:56 - string now another option is to use m
10:00 - k time and mk time will take a
10:03 - tuple representation of a time or a time
10:06 - object
10:07 - and convert it to seconds since epic
10:10 - so april 20th of the year 2020
10:13 - is about 1.5 billion seconds
10:17 - since our epic date and for me that was
10:19 - december
10:20 - 31st the year 1969 so
10:23 - that is a few useful functions of the
10:26 - time module
10:27 - if you would like a copy of this code i
10:29 - will post all of this to the comment
10:30 - section down below
10:32 - and well yeah that's the time module in
10:34 - python
10:36 - hey you yeah i'm talking to you if you
10:39 - learned something new
10:40 - then help me help you in three easy
10:42 - steps
10:43 - by smashing that like button drop a
10:45 - comment down below
10:46 - and subscribe if you'd like to become a
10:48 - fellow bro
11:01 - [Music]
11:11 - you

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to show you all a few useful functions related to times and dates using the time module in python so sit back relax and enjoy the show all right everybody so the time module let's begin by importing time and the first thing that i'm going to explain to you while is how we can find our computer's epic also pronounced as epoch so this is a date and time in which your computer thinks time began think of it that way at least so we use our epic as a reference point so to find your computer's epic it's going to vary based on your computer and your operating system so to find your computer's epic type time dot c time and as an argument we will pass in zero now what this method will do is that this method will convert a time expressed in seconds and convert it to a readable string so if i was to pass in 0 and print it well then this will display the date and time which is my epic our reference point so for me my epic is wednesday december 31st 6 p.m so i've just added a note that the c time method will convert a time expressed in seconds since epic and convert it to a readable string a readable date and time so for practice let's pass in perhaps one million seconds and see what date and time that we receive so our c time method will return a date and time one million seconds past this epic here so that would be for me monday january 12th about 7 a.m 1970. our next method is the time method of the time module let's print time dot time method and what this method will do is return the current seconds that have passed since our epic using our computer's clock so the number that i end up with is just over 1.6 billion and this is in seconds so for me billion seconds has passed since that date which is my epic i believe it was december 31st 1969 and every time that i rerun this program you can see that the amount of seconds that has passed is actually increasing so that is the time method it will return the current seconds since you're epic using your computer's clock and you know what just for fun let's change the date and time under clock and see what happens so let's change the year to how about the year 2000 change and close so let's see what number we get with the time method now so we get just under 1 billion 948 million seconds have passed and now if you need to retrieve the current date and time well there's one of a few ways in which you could retrieve that but one way is that we can combine both of these methods of the c time method and the time method of the time module so let's print time dot c time and we're going to pass in an amount of seconds into the c time method as an argument so within the c time method we're going to call the time method so the time method will return an amount of seconds since our epic and the c time method will convert that amount of seconds to a readable date and time so the current date and time is saturday january 23rd about 3 p.m 2021 now there is more than one way to get the current date and time another way is to use the local time method and the local time method will create a time object based on the current time so what i'm going to do is create a variable called time object and i just need to explain a few things about time objects so to best explain this i'm going to print our time object now a time object is also referred to as a struct time object it is made up of different keyword arguments there's a year a month day hour minutes seconds day of the week day of the year and this keyword argument here has something to do with daylight savings time so there's quite a few uses with time objects and one way is that we can format them however we want because right now this time object is not in a readable format so to convert this time object into a readable string we'll need the help of a separate function and that is the strf time function str is short for string f4 format and time well for time i guess so this function needs two arguments a format and a time object so our strf time function will accept a format and a time object as an argument so our format is really just a string of different directives and to best explain these i'm going to head to python's official documentation on this subject so here i am on python's website regarding the time module and underneath this section on the strf time function there are different directives that we can embed within our format string that we pass in as an argument depending on the directive that we add we can display a certain format of our date and time so for example if i was to pass in let's say percent lowercase a then we will display the time object's weekday name and you're not limited to just one directive you can add any combination of directives so if i was to add percent m well we would display the month of our date time object as a number one through twelve so there's a bunch of directives here and i'm going to be using some of these so within a string for the format argument i'm going to pass in percent capital b for the name of the month percent d for the day percent y for the year percent h for the hour and to format this i'm going to add a colon to separate hours and minutes percent m for minutes colon percent s for seconds and then we are going to assign all of this to a variable let's say local time and local time will be a string so let's print our local time and the current time is january 23rd 2021 about 3 p.m oh and i almost forgot you can also get the utc time that is the coordinated universal time if you know how that works so if you need that you would just use the gm time method for the utc time coordinated universal time okay next up we have the strp time function and this function will parse a string representation of a time and or date and return a time object so we need to pass in a string representing the date and or time as well as a format string so let's create a time string and this variable is going to be a string representation of a date let's say 20th of april 2020 and what we can do is take this string representation of a time and or date and parse it to a time object so we're going to pass in our time string variable as well as a format string so let's say i would like to parse the day so that would be percent d for day then percent b for name of the month and then comma percent y for year this function will create a time object so let's assign that to a variable time object equals time dot strp time we're passing in our string representation of a time or date as well as a format string and we can print our time object using a print statement however this is going to be in a form that is somewhat difficult to read but you can see at least we have a time object with all of these keywords filled in with anything that we passed in via these format directives that we have now the next function is the asc time function and this function accepts a time object or a tuple representation of a relative time so this time let's create a time tuple and we're going to follow this order we can pass in up to nine values the first value is a year so let's pass in perhaps 2020 a month let's say four a day how about 20 4 hours let's say four minutes 20 and seconds maybe zero let me just fix some of the spacing here okay you can also pass in a numbered day of the week um i'm just going to say zero i don't think it's really that important a day of the year zero and negative one or zero for daylight savings time so we created a time tuple and we can pass in a time object or a tuple representation of a time following this formula so let's pass in our time tuple and this will create a time string a string representation of the time that we create and let's print our time string and we should have april 20th about four in the morning the year 2020 so that is asc time it will convert a tuple representation of a time and date or a time object and convert it to a readable string now another option is to use m k time and mk time will take a tuple representation of a time or a time object and convert it to seconds since epic so april 20th of the year 2020 is about 1.5 billion seconds since our epic date and for me that was december 31st the year 1969 so that is a few useful functions of the time module if you would like a copy of this code i will post all of this to the comment section down below and well yeah that's the time module in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
