With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well and in this video
00:03 - i'm going to be explaining quarks in
00:05 - python so
00:06 - sit back relax and enjoy the show
00:11 - if you wouldn't mind please like comment
00:14 - and subscribe
00:15 - one like equals one prayer for the
00:17 - youtube algorithm
00:19 - all right everybody let's talk about
00:20 - quarkx now this is a parameter that will
00:23 - pack
00:23 - all arguments into a dictionary it's
00:26 - useful so that a function can accept a
00:28 - varying amount of keyword arguments it's
00:31 - identical
00:32 - to args except with args args will
00:35 - accept a varying amount of positional
00:37 - arguments
00:38 - and pack them into a tuple with quarks
00:40 - this will accept a varying amount of
00:42 - keyword arguments
00:43 - and pack them into a dictionary so
00:45 - here's an example of why this would be
00:46 - useful
00:47 - let's say we have a function called
00:49 - hello that accepts
00:50 - two keyword arguments a first name and a
00:52 - last name all this will do is output
00:55 - hello
00:55 - your first name and last name but what
00:58 - if somebody has more than two names
00:59 - let's say somebody has a middle name
01:01 - and for this example i'll just say my
01:03 - middle name is dude
01:05 - so if i were to run this well this hello
01:07 - function is no longer going to work
01:09 - as you can see in the console window we
01:11 - have a type error
01:13 - the hello function got an unexpected
01:15 - keyword argument middle
01:16 - one way in which we can solve this we
01:18 - can use this quark's
01:20 - parameter so we can accept a varying
01:23 - amount
01:23 - of keyword arguments so what we'll do is
01:25 - replace
01:26 - our parameters with two asterisks then
01:30 - quarks now if i would like the same
01:32 - output as i had before i'm going to need
01:34 - to change a few things around in order
01:35 - to access
01:36 - a value within a dictionary you type the
01:38 - name of the dictionary
01:40 - square brackets and then within quotes
01:43 - list
01:43 - your key so i would like to access the
01:46 - value at
01:47 - this key first and let's repeat the
01:50 - process
01:50 - for last name so the key
01:54 - is going to be last we'll access this
01:56 - value
01:57 - at this key and this should work the
01:59 - same as it did before
02:01 - now let's take this a step further let's
02:03 - say we would like to display somebody's
02:05 - full name based on the amount of keyword
02:07 - arguments that they pass into this
02:08 - function
02:09 - well there's a few different ways in
02:11 - which we could do this
02:12 - one easy way is that we could write our
02:14 - program like this
02:16 - let's print the word hello
02:20 - and we will need to iterate once through
02:22 - each key value pair
02:24 - within this dictionary and we can use a
02:26 - for loop to do that
02:27 - so to iterate once through each key
02:29 - value pair in your dictionary
02:31 - we'll type for key value
02:35 - in the name of our dictionary quarks in
02:37 - this case
02:38 - dot items and then we will print
02:42 - each value
02:45 - so there's one more thing that we need
02:47 - to do this kind of works as intended but
02:49 - it's going to print
02:50 - each value including our word hello on a
02:54 - new line
02:55 - so with a standard print statement this
02:57 - will print a new line character
02:59 - after each print statement as if we're
03:01 - hitting enter we can actually change
03:03 - that
03:03 - so after your string add end
03:06 - equals and we can replace that new line
03:08 - character with something else maybe a
03:10 - space and let's do the same thing for
03:13 - our for loop
03:13 - so value comma end and then just add
03:16 - space
03:17 - now this will print all of your names on
03:19 - the same line
03:20 - hello bro dude code and now we can pass
03:23 - in
03:24 - a varying amount of keyword arguments
03:26 - based on how long our name is
03:28 - perhaps we have like a title title
03:30 - equals mr
03:34 - and we can print that as well hello mr
03:36 - bro
03:37 - dude code here's a fun fact of the day
03:39 - you don't necessarily need to name this
03:41 - parameter as quarks the important thing
03:43 - is to have these
03:44 - double asterisks that preceded kwargs is
03:47 - just
03:47 - a common naming convention it's short
03:49 - for keyword arguments
03:51 - you could name this as something else
03:52 - perhaps something more descriptive like
03:54 - names since we're passing in a bunch of
03:56 - names so the name of our dictionary
03:58 - is now names and this would work the
04:00 - same as it did before
04:02 - the important thing is to have these
04:03 - double asterisks that precede the name
04:05 - your dictionary
04:06 - but quarks is the common naming
04:08 - convention
04:09 - well everybody that's all about quarkx
04:11 - it's a parameter that will pack
04:13 - a varying amount of keyword arguments
04:16 - into a
04:17 - dictionary if you would like a copy of
04:19 - all this code i will post this in the
04:21 - comments section down below
04:22 - but yeah that is how quarkx works in
04:25 - python
04:26 - hey you yeah i'm talking to you if you
04:29 - learned something new
04:30 - then help me help you in three easy
04:32 - steps
04:33 - by smashing that like button drop a
04:35 - comment down below
04:36 - and subscribe if you'd like to become a
04:38 - fellow bro
04:42 - [Music]
05:00 - you

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to be explaining quarks in python so sit back relax and enjoy the show if you wouldn't mind please like comment and subscribe one like equals one prayer for the youtube algorithm all right everybody let's talk about quarkx now this is a parameter that will pack all arguments into a dictionary it's useful so that a function can accept a varying amount of keyword arguments it's identical to args except with args args will accept a varying amount of positional arguments and pack them into a tuple with quarks this will accept a varying amount of keyword arguments and pack them into a dictionary so here's an example of why this would be useful let's say we have a function called hello that accepts two keyword arguments a first name and a last name all this will do is output hello your first name and last name but what if somebody has more than two names let's say somebody has a middle name and for this example i'll just say my middle name is dude so if i were to run this well this hello function is no longer going to work as you can see in the console window we have a type error the hello function got an unexpected keyword argument middle one way in which we can solve this we can use this quark's parameter so we can accept a varying amount of keyword arguments so what we'll do is replace our parameters with two asterisks then quarks now if i would like the same output as i had before i'm going to need to change a few things around in order to access a value within a dictionary you type the name of the dictionary square brackets and then within quotes list your key so i would like to access the value at this key first and let's repeat the process for last name so the key is going to be last we'll access this value at this key and this should work the same as it did before now let's take this a step further let's say we would like to display somebody's full name based on the amount of keyword arguments that they pass into this function well there's a few different ways in which we could do this one easy way is that we could write our program like this let's print the word hello and we will need to iterate once through each key value pair within this dictionary and we can use a for loop to do that so to iterate once through each key value pair in your dictionary we'll type for key value in the name of our dictionary quarks in this case dot items and then we will print each value so there's one more thing that we need to do this kind of works as intended but it's going to print each value including our word hello on a new line so with a standard print statement this will print a new line character after each print statement as if we're hitting enter we can actually change that so after your string add end equals and we can replace that new line character with something else maybe a space and let's do the same thing for our for loop so value comma end and then just add space now this will print all of your names on the same line hello bro dude code and now we can pass in a varying amount of keyword arguments based on how long our name is perhaps we have like a title title equals mr and we can print that as well hello mr bro dude code here's a fun fact of the day you don't necessarily need to name this parameter as quarks the important thing is to have these double asterisks that preceded kwargs is just a common naming convention it's short for keyword arguments you could name this as something else perhaps something more descriptive like names since we're passing in a bunch of names so the name of our dictionary is now names and this would work the same as it did before the important thing is to have these double asterisks that precede the name your dictionary but quarks is the common naming convention well everybody that's all about quarkx it's a parameter that will pack a varying amount of keyword arguments into a dictionary if you would like a copy of all this code i will post this in the comments section down below but yeah that is how quarkx works in python hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
