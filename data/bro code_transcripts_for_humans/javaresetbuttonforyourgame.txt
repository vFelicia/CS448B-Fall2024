With timestamps:

00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to teach you
00:04 - guys how we can create a reset button in
00:06 - java so
00:07 - sit back relax and enjoy the show
00:12 - if you find this video helpful please
00:14 - remember to like
00:15 - comment and subscribe your support will
00:18 - help keep this channel running
00:19 - well hello again by popular demand many
00:22 - of you have been asking for a way to
00:24 - create a reset button of sorts for your
00:26 - game
00:27 - i thought it might take some time to
00:28 - explain how to do so with a separate
00:30 - video
00:31 - this is not a one size fits all approach
00:33 - you may need to make some modifications
00:35 - to accommodate your specific game
00:37 - or other application we're just going to
00:39 - be pretending that we're creating a game
00:41 - so this is how to create a reset button
00:43 - so let's begin
00:44 - we'll need a total of three classes for
00:47 - this example
00:48 - we have a class called min let's create
00:50 - another class
00:51 - file new class i will call this
00:54 - game frame click finish game
00:58 - frame will extends jframe
01:03 - and we will need an import let's create
01:06 - the constructor for game frame so at the
01:08 - top
01:08 - game frame and we will
01:12 - also implement the action
01:15 - listener interface
01:19 - include the imports that you need and
01:21 - we'll need to add any unimplemented
01:23 - methods
01:24 - and lastly we'll need one more class so
01:26 - go back to file
01:28 - new class and this class will be called
01:32 - game finish and
01:35 - game will extends j
01:38 - panel and create the constructor for
01:42 - your game so when you create a new game
01:45 - you just call the constructor
01:46 - for this game so within our main method
01:50 - let's call the constructor to create a
01:52 - game frame instance
01:54 - so within the main method new game
01:57 - frame and that's it for this class and
02:00 - within the game frame class we have a
02:02 - few things that we need to do
02:04 - so at the top we're going to declare
02:07 - a game game game we're not going to
02:10 - instantiate it yet we'll get to that
02:12 - within the constructor of game frame and
02:14 - we'll also need a reset button
02:17 - j button and we'll call this reset
02:21 - button and within the game frame we'll
02:24 - finish setting up
02:25 - the frame that we have
02:28 - this is referring to this instance of
02:32 - our game frame this dot set default
02:37 - close operation
02:41 - then j frame exit on close
02:49 - we'll set a size this dot set size
02:53 - pick whatever dimensions you want i will
02:55 - set this to be 600 by 500
02:59 - i'm going to use no layout manager this
03:02 - dot set layout
03:04 - and i will set this to null
03:07 - then at the end this
03:11 - dot set visible and set this to true
03:16 - alright well our frame is taken care of
03:18 - let's work on the reset button next
03:20 - we'll finish instant shading this reset
03:22 - button between the set layout method and
03:24 - the set
03:25 - visible method so between these two
03:28 - lines
03:28 - we'll finish instantiating the reset
03:30 - button reset button equals
03:32 - new j button i'll make some
03:36 - modifications to this reset button
03:37 - reset button dot set text i will set
03:41 - this
03:41 - to reset since we're using
03:46 - no layout manager we'll want to set a
03:48 - size and location
03:51 - i'm going to use the set size method
03:55 - i will set a size of 100 by 50.
04:00 - and a location
04:03 - set location
04:06 - let's say 0 and 200 that should be
04:09 - decent
04:12 - and we need to add an action listener
04:15 - add action listener since we're
04:18 - implementing the action listener
04:19 - interface
04:20 - we can just pass in this and then we
04:23 - should be good
04:24 - all right so after we create our reset
04:26 - button we're going to
04:27 - create an instance of our game class
04:30 - that we have we're going to create a
04:31 - game object
04:33 - game equals new game
04:36 - so we're going to call the constructor
04:38 - for our game class
04:40 - lastly for the game frame constructor we
04:43 - need to add
04:44 - our game as well as our reset button to
04:46 - the frame so at the end before we set
04:48 - everything to be visible
04:50 - this dot add we're going to add our
04:53 - reset button
04:55 - as well as our game this dot
04:58 - add game
05:01 - okay so the constructor for game frame
05:04 - is now done
05:05 - let's head to the action performed
05:06 - method so if somebody clicks on our
05:08 - reset button
05:10 - this is what we're going to do if d dot
05:12 - get source we're going to check to see
05:14 - if the action event is equal to our
05:17 - reset button
05:18 - if get source is equal to
05:22 - our reset button that means
05:25 - somebody clicked our reset button so
05:26 - they would like to reset the game
05:28 - we're going to refer to this this game
05:30 - frame and we're going to remove
05:33 - our current game that we have and we're
05:36 - going to construct a new one
05:38 - game equals new game
05:41 - and we can create a new game by calling
05:44 - the game constructor
05:45 - to construct a new game for us
05:50 - and we'll need to add the game to our
05:53 - frame
05:53 - this dot add game
05:56 - all right well let's run this just to
05:58 - test things so we have
06:00 - our reset button on the left hand side
06:02 - and our game panel
06:04 - will be on the right hand side but we
06:06 - currently cannot see it
06:07 - so this is where our game normally would
06:10 - be but we're not actually going to
06:11 - create a full game
06:13 - but we'll probably want some sort of
06:14 - visual representation just so that we
06:16 - know that our reset button
06:18 - is working so what i'm thinking for this
06:20 - video is that every time
06:22 - we click this reset button we'll
06:24 - generate a
06:25 - new game panel that has a random
06:27 - background color
06:28 - sound good to you guys alright let's try
06:30 - it so within
06:32 - our game class normally for whatever
06:34 - game you're creating
06:36 - the code for your game will go here code
06:38 - for
06:39 - game goes here
06:42 - and we will declare all the components
06:44 - that we'll need for
06:45 - our game so we're just going to generate
06:48 - a random background color instead of
06:50 - creating a full-fledged game
06:52 - so let's create an instance of the
06:54 - random class
06:55 - uh we'll just declare our random
06:58 - instance and then we'll finish
06:59 - instantiating this within the
07:01 - constructor
07:02 - so within the constructor of our game
07:05 - random equals new random
07:09 - and we'll also need to generate a random
07:12 - color for this example
07:13 - so one way in which we can do that is to
07:15 - generate some random
07:17 - rgb values rgb values have a range
07:20 - between
07:21 - 0 and 255 so we would like to generate a
07:24 - random number between
07:25 - that range so let's say int r r for the
07:28 - amount of red that we would like for
07:30 - our color equals random dot
07:33 - next int and within the next int method
07:35 - we're going to pass in
07:37 - 256 that will give us a random number
07:39 - between
07:40 - 0 and 255 and we'll need to repeat the
07:43 - process
07:44 - for green and blue so int g
07:47 - for green equals random dot next in 256
07:51 - and repeat the process
07:52 - for int b b for blue
07:56 - we'll need to finish creating our game
07:58 - panel that we have
07:59 - so at the end this dot set size
08:04 - and i will set this to 500 by 500
08:08 - that will give us a square and set a
08:11 - location
08:12 - this dot set location
08:15 - 100 by zero would be good and lastly we
08:19 - need to
08:20 - set the background color with the random
08:22 - values that we generated
08:24 - this dot set background
08:28 - new color and with the arguments we're
08:31 - going to pass
08:32 - in our values of r g and b
08:37 - and then we should be good we have one
08:40 - issue though
08:41 - and let me explain so this is our make
08:44 - believe game that we have
08:45 - it's just a random color on a background
08:48 - so when we click this reset button it's
08:50 - going to dispose
08:51 - of the current game panel that we have
08:53 - and generate a new one
08:55 - via the constructor that we have however
08:57 - nothing appears to happen
08:58 - when we click on this reset button what
09:01 - we need to do is actually
09:02 - move our frame that we have so we don't
09:05 - want to have to do this every single
09:07 - time we want to update the components
09:09 - on our game frame so there's one line of
09:12 - code that we can add to do that for us
09:15 - so within the action performed method
09:17 - there is just one line that we need to
09:19 - add
09:20 - that will update the components of our
09:21 - game frame whenever we make a change
09:24 - so at the end we'll add swing
09:28 - utilities dot
09:31 - update component tree ui
09:36 - and we would like to update this this
09:38 - refers to
09:39 - our game frame that we have so then when
09:42 - we click our reset button
09:44 - this will generate a new game panel for
09:47 - us
09:47 - and normally you would have the code for
09:49 - your game that you have within
09:51 - probably some sort of constructor so
09:53 - basically we're just
09:55 - disposing of the current instance that
09:57 - we have and we're calling the
09:58 - constructor one more time
10:00 - well everybody that's how to create a
10:02 - reset button for your game or
10:04 - other application in java if you would
10:06 - like a copy of this code i will post
10:08 - this in the comments down below
10:10 - but yeah that's how to create a reset
10:12 - button in java
10:14 - hey you yeah i'm talking to you if you
10:17 - learn something
10:18 - new then you can help me help you in
10:21 - three easy steps
10:22 - by smashing that like button drop a
10:24 - comment down below
10:26 - and subscribe if you'd like to become a
10:27 - fellow bro
10:33 - [Music]
10:40 - [Music]
10:48 - you

Cleaned transcript:

hey what's going on everybody it's bro hope you're doing well and in this video i'm going to teach you guys how we can create a reset button in java so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running well hello again by popular demand many of you have been asking for a way to create a reset button of sorts for your game i thought it might take some time to explain how to do so with a separate video this is not a one size fits all approach you may need to make some modifications to accommodate your specific game or other application we're just going to be pretending that we're creating a game so this is how to create a reset button so let's begin we'll need a total of three classes for this example we have a class called min let's create another class file new class i will call this game frame click finish game frame will extends jframe and we will need an import let's create the constructor for game frame so at the top game frame and we will also implement the action listener interface include the imports that you need and we'll need to add any unimplemented methods and lastly we'll need one more class so go back to file new class and this class will be called game finish and game will extends j panel and create the constructor for your game so when you create a new game you just call the constructor for this game so within our main method let's call the constructor to create a game frame instance so within the main method new game frame and that's it for this class and within the game frame class we have a few things that we need to do so at the top we're going to declare a game game game we're not going to instantiate it yet we'll get to that within the constructor of game frame and we'll also need a reset button j button and we'll call this reset button and within the game frame we'll finish setting up the frame that we have this is referring to this instance of our game frame this dot set default close operation then j frame exit on close we'll set a size this dot set size pick whatever dimensions you want i will set this to be 600 by 500 i'm going to use no layout manager this dot set layout and i will set this to null then at the end this dot set visible and set this to true alright well our frame is taken care of let's work on the reset button next we'll finish instant shading this reset button between the set layout method and the set visible method so between these two lines we'll finish instantiating the reset button reset button equals new j button i'll make some modifications to this reset button reset button dot set text i will set this to reset since we're using no layout manager we'll want to set a size and location i'm going to use the set size method i will set a size of 100 by 50. and a location set location let's say 0 and 200 that should be decent and we need to add an action listener add action listener since we're implementing the action listener interface we can just pass in this and then we should be good all right so after we create our reset button we're going to create an instance of our game class that we have we're going to create a game object game equals new game so we're going to call the constructor for our game class lastly for the game frame constructor we need to add our game as well as our reset button to the frame so at the end before we set everything to be visible this dot add we're going to add our reset button as well as our game this dot add game okay so the constructor for game frame is now done let's head to the action performed method so if somebody clicks on our reset button this is what we're going to do if d dot get source we're going to check to see if the action event is equal to our reset button if get source is equal to our reset button that means somebody clicked our reset button so they would like to reset the game we're going to refer to this this game frame and we're going to remove our current game that we have and we're going to construct a new one game equals new game and we can create a new game by calling the game constructor to construct a new game for us and we'll need to add the game to our frame this dot add game all right well let's run this just to test things so we have our reset button on the left hand side and our game panel will be on the right hand side but we currently cannot see it so this is where our game normally would be but we're not actually going to create a full game but we'll probably want some sort of visual representation just so that we know that our reset button is working so what i'm thinking for this video is that every time we click this reset button we'll generate a new game panel that has a random background color sound good to you guys alright let's try it so within our game class normally for whatever game you're creating the code for your game will go here code for game goes here and we will declare all the components that we'll need for our game so we're just going to generate a random background color instead of creating a fullfledged game so let's create an instance of the random class uh we'll just declare our random instance and then we'll finish instantiating this within the constructor so within the constructor of our game random equals new random and we'll also need to generate a random color for this example so one way in which we can do that is to generate some random rgb values rgb values have a range between 0 and 255 so we would like to generate a random number between that range so let's say int r r for the amount of red that we would like for our color equals random dot next int and within the next int method we're going to pass in 256 that will give us a random number between 0 and 255 and we'll need to repeat the process for green and blue so int g for green equals random dot next in 256 and repeat the process for int b b for blue we'll need to finish creating our game panel that we have so at the end this dot set size and i will set this to 500 by 500 that will give us a square and set a location this dot set location 100 by zero would be good and lastly we need to set the background color with the random values that we generated this dot set background new color and with the arguments we're going to pass in our values of r g and b and then we should be good we have one issue though and let me explain so this is our make believe game that we have it's just a random color on a background so when we click this reset button it's going to dispose of the current game panel that we have and generate a new one via the constructor that we have however nothing appears to happen when we click on this reset button what we need to do is actually move our frame that we have so we don't want to have to do this every single time we want to update the components on our game frame so there's one line of code that we can add to do that for us so within the action performed method there is just one line that we need to add that will update the components of our game frame whenever we make a change so at the end we'll add swing utilities dot update component tree ui and we would like to update this this refers to our game frame that we have so then when we click our reset button this will generate a new game panel for us and normally you would have the code for your game that you have within probably some sort of constructor so basically we're just disposing of the current instance that we have and we're calling the constructor one more time well everybody that's how to create a reset button for your game or other application in java if you would like a copy of this code i will post this in the comments down below but yeah that's how to create a reset button in java hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
