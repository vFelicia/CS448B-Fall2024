With timestamps:

00:00 - hey what's going on everybody so in this
00:01 - video we're going to create a very
00:03 - simple banking program using python this
00:06 - is meant to be more of an exercise to
00:07 - get us used to working with functions
00:09 - when creating a project I like to divide
00:11 - that project into smaller sections then
00:13 - handle them one at a time so we'll do
00:15 - that by declaring all the functions
00:16 - we'll need first with the banking
00:18 - program we'll need to show a user their
00:20 - balance we'll Define a function to show
00:25 - balance for the time being I'll write
00:28 - pass just as a placeholder
00:30 - we'll need to make a deposit
00:33 - Define
00:36 - deposit make a
00:38 - withdrawal
00:39 - Define
00:42 - withdraw near the end of this project we
00:45 - will be creating a main function and
00:46 - placing the main body of our code within
00:48 - it we'll handle that near the end just
00:51 - to contain everything we have our three
00:53 - functions with our banking program we'll
00:55 - need to show a balance make a deposit or
00:58 - make a withdrawal what if some variables
01:00 - we'll need well we'll need a balance
01:03 - which I will set to be zero initially I
01:06 - will also create a Boolean of is running
01:09 - this will be true if at any time we set
01:13 - is running to be false we'll exit the
01:16 - program so with the majority of our code
01:19 - we'll place it within a while loop while
01:22 - is running you can check to see if this
01:24 - is equal to true but since this is a
01:26 - Boolean that's not
01:28 - necessary we will just just say while is
01:31 - running if is running becomes false
01:34 - we'll exit the while loop within our
01:36 - while loop we'll print some sort of
01:38 - Welcome
01:39 - message let's print
01:42 - banking
01:45 - program then list some
01:48 - options let's print
01:51 - one
01:52 - show
01:56 - balance to
02:04 - deposit
02:06 - three will be
02:11 - withdraw for will
02:14 - be
02:17 - exit afterwards we will set a choice
02:21 - variable to equal some user
02:23 - input
02:26 - input enter your choice
02:30 - 1 through 4 We're encouraging a user to
02:33 - type in a number 1 through 4 to select
02:35 - an option do they want to show their
02:37 - balance make a deposit make a withdrawal
02:40 - or exit We'll add a few if and else if
02:43 - statements let's check to see if the
02:46 - user's
02:47 - choice is equal to one that is a string
02:51 - of one our user input is a string data
02:54 - type unless we were to typ cast it to
02:56 - something else if our choice is equal to
02:58 - one we will call call the function to
03:00 - show
03:03 - balance else if our choice is equal to
03:08 - two we will make a deposit by calling
03:12 - the deposit
03:15 - function else if choice is equal to
03:19 - three we will call the withdrawal
03:26 - function else if choice is equal to 4
03:30 - that means we would like to exit so we
03:33 - need to exit this while loop we can do
03:35 - that by setting our variable of is
03:37 - running is this program running equal to
03:40 - be false to exit if somebody types in
03:43 - some input that's not valid we can
03:46 - handle that with an else
03:47 - statement else let's
03:52 - print that is not a valid
03:56 - Choice okay let's see what we're working
03:58 - with currently to test everything we
04:00 - haven't written anything within these
04:02 - functions yet show balance deposit or
04:04 - withdraw so we can type one
04:07 - 2 three and four to
04:12 - exit processed finished with exit Code
04:14 - Zero so we can't exit the program we
04:17 - just have to select option
04:18 - four with this else statement this will
04:21 - execute if we type in something besides
04:23 - the numbers 1 through 4 because there's
04:25 - no other options left so to test that
04:29 - enter your choice Choice 1 through 4 uh
04:31 - I'm just going to type the word poo that
04:34 - is not a valid
04:36 - choice so we know that the else
04:37 - statement is working once we exit the
04:40 - while loop let's print a
04:44 - message that
04:46 - says thank you have a nice
04:55 - day if I was to type four to exit we
04:58 - should exit the program
05:00 - thank you have a nice day let's make
05:03 - that h
05:04 - capital now we'll work on our functions
05:07 - beginning with show balance currently
05:09 - these two variables are Global we don't
05:11 - need to pass them as a parameter to
05:13 - these functions quite yet we will be
05:15 - enclosing all of this code within a main
05:17 - function we'll handle that later though
05:20 - so with show balance all we're going to
05:22 - do is print I'll use an F
05:26 - string your balance
05:29 - is add a dollar sign or other unit of
05:32 - currency of you're choosing add a
05:35 - placeholder our balance
05:38 - variable and let's see what we
05:41 - have I will type one to show balance
05:45 - your balance is
05:47 - 0 I'll display our balance with two
05:50 - decimal places after I will add a format
05:53 - specifier after balance colon. 2f will
05:57 - add two decimal places we covered format
06:00 - specifiers in a previous
06:02 - topic so if I were to run this again
06:04 - type one we show $0 and 0 cents we're
06:09 - displaying two floating Point decimal
06:11 - places now we need to make a deposit
06:14 - that'll be the next
06:16 - function we will Define a local variable
06:19 - of amount equals accept some user
06:23 - input enter an amount to be deposited
06:33 - again when we accept user input it's a
06:35 - string we'll typ cast it to a number a
06:38 - floating Point number because we have to
06:41 - include dollars and
06:43 - cents we'll add some checks though after
06:46 - accepting some user input if our amount
06:49 - is greater than zero we don't want
06:51 - anybody to make a negative
06:55 - deposit let's
06:57 - print that's not a valid
07:04 - amount else we are going to
07:08 - return our amount so this function is
07:12 - going to return
07:15 - something so within our else if
07:17 - statement we will take our
07:21 - balance plus equals the deposit we're
07:24 - being returned with this will add our
07:27 - deposit to our balance balance balance
07:29 - plus equals
07:31 - deposit let's try
07:34 - it let's show our balance our balance is
07:39 - $0 we'll make a deposit of $100
07:45 - exactly again we'll show our balance
07:47 - after making the deposit your balance is
07:51 - $100 let's attempt to deposit negative
07:54 - money we'll select two to make a
07:57 - deposit we'll deposit negative
08:00 - $420
08:02 - 69 that's not a valid
08:04 - amount so we have a problem we have a
08:07 - type error unsupported operand for float
08:11 - and nonone type so within this statement
08:15 - within if within our deposit function
08:18 - we're not returning
08:19 - anything let's just return zero we have
08:23 - to return something and within this if
08:25 - statement we didn't return anything
08:27 - previously we'll either return zero or
08:30 - return a valid
08:32 - amount let's try this
08:35 - again let's make a deposit I will
08:38 - attempt to deposit
08:42 - 42069 that's not a valid amount our
08:44 - program is not crashing that's good now
08:48 - we'll attempt to make a valid deposit
08:52 - $501 then show my balance your balance
08:55 - is
08:57 - $501 okay that is the deposit it
08:59 - function we'll work on the withdraw
09:01 - function
09:05 - next we will create a local variable of
09:08 - amount accept some user
09:12 - input enter amount to
09:16 - be
09:20 - withdrawn our user input is going to be
09:22 - a string we will typ cast it to be a
09:24 - floating Point
09:26 - number we need to check to see if
09:30 - our amount we're trying to
09:32 - withdraw is greater than our
09:35 - balance users shouldn't be able to
09:37 - withdraw more money than what they have
09:38 - in their bank account if the amount is
09:41 - greater than our balance that we have we
09:43 - will
09:46 - print
09:48 - insufficient
09:52 - funds else if the amount somebody's
09:55 - trying to withdraw is less than zero
10:00 - we will print a different
10:03 - message amount must be
10:06 - greater than
10:11 - zero else we will return our valid
10:16 - amount so with our if and else if
10:18 - statements we do need to return
10:19 - something if we take one of these
10:22 - routes we will return
10:27 - zero we're not making any any
10:31 - changes within our else if statement
10:34 - where we select choice three we're going
10:36 - to take our balance minus equals the
10:40 - withdraw
10:41 - amount let's test
10:45 - this banking program let's show our
10:48 - balance our balance is
10:51 - zero we'll make a deposit of
10:55 - $100 show my balance again your balance
10:57 - is $100
11:00 - let's press three to withdraw money
11:02 - enter amount to be withdrawn one1
11:05 - kajillion
11:07 - dollar insufficient funds yeah no
11:10 - kidding Let's attempt to withdraw money
11:13 - again we shouldn't be able to select a
11:16 - negative amount negative $420
11:19 - 69 amount must be greater than
11:23 - zero let's enter in a valid number this
11:25 - time I would like to withdraw $49.99
11:29 - that has appeared to work we'll show our
11:31 - balance again your balance is now
11:35 - $501 then we can exit by pressing four
11:38 - to
11:38 - exit thank you and have a nice
11:41 - day the last few changes I'm going to
11:44 - make is that I'm going to enclose all of
11:46 - this code our main portion of code
11:48 - within a main function just to
11:50 - encapsulate all of our variables and
11:52 - help with
11:53 - readability we will Define a function of
11:57 - main take all of our code within the
11:59 - main body of our program and place it
12:02 - within the function I'm just going to
12:04 - select all of it and indent it at the
12:06 - end of our program we need to call a
12:09 - main function to run
12:11 - it if you're familiar with the statement
12:13 - of if Dunder name is equal to a string
12:19 - of Dunder
12:20 - main that means this program can be
12:23 - imported or run stand alone it is good
12:26 - practice to include this if statement we
12:28 - discussed this in the pr previous video
12:30 - if we're running this program directly
12:32 - execute the main
12:34 - function however our variables of
12:36 - balance and is running they're now
12:38 - enclosed within this local scope these
12:41 - other functions have no idea what these
12:42 - variables are of balance so we need to
12:46 - pass in our balance to those functions
12:48 - of withdraw and show
12:52 - balance when we show our balance we have
12:54 - to pass in our variable of balance same
12:57 - thing with withdraw
12:59 - then set up those
13:01 - parameters within show balance we will
13:03 - have one parameter of balance the same
13:06 - thing with
13:07 - withdraw the last thing I'm going to do
13:09 - is add a little bit of text decoration
13:11 - around my program just to make it look
13:14 - nice so I will print a bunch of
13:19 - asterisks it's not necessary but I think
13:21 - it'll look nice
13:30 - let's add some text decoration before
13:32 - and after the title of banking program
13:35 - also before our
13:38 - choice basically whenever we print
13:41 - anything We'll add some text
13:49 - decoration let's do that with show
13:52 - balance our deposit
14:01 - and within
14:11 - withdraw okay let's run this one last
14:17 - time banking program let's show our
14:23 - balance your balance is 0 we'll make a
14:27 - deposit $100 and 1ent show our balance
14:31 - again your balance is $100
14:35 - And1 we will withdraw money enter an
14:38 - amount to be withdrawn
14:41 - $1,000 insufficient funds let's try that
14:44 - again let's withdraw
14:46 - $50 show our balance again
14:50 - $501 then press for to exit thank you
14:53 - and have a nice day all right everybody
14:55 - that is a simple banking program you can
14:58 - write using python on

Cleaned transcript:

hey what's going on everybody so in this video we're going to create a very simple banking program using python this is meant to be more of an exercise to get us used to working with functions when creating a project I like to divide that project into smaller sections then handle them one at a time so we'll do that by declaring all the functions we'll need first with the banking program we'll need to show a user their balance we'll Define a function to show balance for the time being I'll write pass just as a placeholder we'll need to make a deposit Define deposit make a withdrawal Define withdraw near the end of this project we will be creating a main function and placing the main body of our code within it we'll handle that near the end just to contain everything we have our three functions with our banking program we'll need to show a balance make a deposit or make a withdrawal what if some variables we'll need well we'll need a balance which I will set to be zero initially I will also create a Boolean of is running this will be true if at any time we set is running to be false we'll exit the program so with the majority of our code we'll place it within a while loop while is running you can check to see if this is equal to true but since this is a Boolean that's not necessary we will just just say while is running if is running becomes false we'll exit the while loop within our while loop we'll print some sort of Welcome message let's print banking program then list some options let's print one show balance to deposit three will be withdraw for will be exit afterwards we will set a choice variable to equal some user input input enter your choice 1 through 4 We're encouraging a user to type in a number 1 through 4 to select an option do they want to show their balance make a deposit make a withdrawal or exit We'll add a few if and else if statements let's check to see if the user's choice is equal to one that is a string of one our user input is a string data type unless we were to typ cast it to something else if our choice is equal to one we will call call the function to show balance else if our choice is equal to two we will make a deposit by calling the deposit function else if choice is equal to three we will call the withdrawal function else if choice is equal to 4 that means we would like to exit so we need to exit this while loop we can do that by setting our variable of is running is this program running equal to be false to exit if somebody types in some input that's not valid we can handle that with an else statement else let's print that is not a valid Choice okay let's see what we're working with currently to test everything we haven't written anything within these functions yet show balance deposit or withdraw so we can type one 2 three and four to exit processed finished with exit Code Zero so we can't exit the program we just have to select option four with this else statement this will execute if we type in something besides the numbers 1 through 4 because there's no other options left so to test that enter your choice Choice 1 through 4 uh I'm just going to type the word poo that is not a valid choice so we know that the else statement is working once we exit the while loop let's print a message that says thank you have a nice day if I was to type four to exit we should exit the program thank you have a nice day let's make that h capital now we'll work on our functions beginning with show balance currently these two variables are Global we don't need to pass them as a parameter to these functions quite yet we will be enclosing all of this code within a main function we'll handle that later though so with show balance all we're going to do is print I'll use an F string your balance is add a dollar sign or other unit of currency of you're choosing add a placeholder our balance variable and let's see what we have I will type one to show balance your balance is 0 I'll display our balance with two decimal places after I will add a format specifier after balance colon. 2f will add two decimal places we covered format specifiers in a previous topic so if I were to run this again type one we show $0 and 0 cents we're displaying two floating Point decimal places now we need to make a deposit that'll be the next function we will Define a local variable of amount equals accept some user input enter an amount to be deposited again when we accept user input it's a string we'll typ cast it to a number a floating Point number because we have to include dollars and cents we'll add some checks though after accepting some user input if our amount is greater than zero we don't want anybody to make a negative deposit let's print that's not a valid amount else we are going to return our amount so this function is going to return something so within our else if statement we will take our balance plus equals the deposit we're being returned with this will add our deposit to our balance balance balance plus equals deposit let's try it let's show our balance our balance is $0 we'll make a deposit of $100 exactly again we'll show our balance after making the deposit your balance is $100 let's attempt to deposit negative money we'll select two to make a deposit we'll deposit negative $420 69 that's not a valid amount so we have a problem we have a type error unsupported operand for float and nonone type so within this statement within if within our deposit function we're not returning anything let's just return zero we have to return something and within this if statement we didn't return anything previously we'll either return zero or return a valid amount let's try this again let's make a deposit I will attempt to deposit 42069 that's not a valid amount our program is not crashing that's good now we'll attempt to make a valid deposit $501 then show my balance your balance is $501 okay that is the deposit it function we'll work on the withdraw function next we will create a local variable of amount accept some user input enter amount to be withdrawn our user input is going to be a string we will typ cast it to be a floating Point number we need to check to see if our amount we're trying to withdraw is greater than our balance users shouldn't be able to withdraw more money than what they have in their bank account if the amount is greater than our balance that we have we will print insufficient funds else if the amount somebody's trying to withdraw is less than zero we will print a different message amount must be greater than zero else we will return our valid amount so with our if and else if statements we do need to return something if we take one of these routes we will return zero we're not making any any changes within our else if statement where we select choice three we're going to take our balance minus equals the withdraw amount let's test this banking program let's show our balance our balance is zero we'll make a deposit of $100 show my balance again your balance is $100 let's press three to withdraw money enter amount to be withdrawn one1 kajillion dollar insufficient funds yeah no kidding Let's attempt to withdraw money again we shouldn't be able to select a negative amount negative $420 69 amount must be greater than zero let's enter in a valid number this time I would like to withdraw $49.99 that has appeared to work we'll show our balance again your balance is now $501 then we can exit by pressing four to exit thank you and have a nice day the last few changes I'm going to make is that I'm going to enclose all of this code our main portion of code within a main function just to encapsulate all of our variables and help with readability we will Define a function of main take all of our code within the main body of our program and place it within the function I'm just going to select all of it and indent it at the end of our program we need to call a main function to run it if you're familiar with the statement of if Dunder name is equal to a string of Dunder main that means this program can be imported or run stand alone it is good practice to include this if statement we discussed this in the pr previous video if we're running this program directly execute the main function however our variables of balance and is running they're now enclosed within this local scope these other functions have no idea what these variables are of balance so we need to pass in our balance to those functions of withdraw and show balance when we show our balance we have to pass in our variable of balance same thing with withdraw then set up those parameters within show balance we will have one parameter of balance the same thing with withdraw the last thing I'm going to do is add a little bit of text decoration around my program just to make it look nice so I will print a bunch of asterisks it's not necessary but I think it'll look nice let's add some text decoration before and after the title of banking program also before our choice basically whenever we print anything We'll add some text decoration let's do that with show balance our deposit and within withdraw okay let's run this one last time banking program let's show our balance your balance is 0 we'll make a deposit $100 and 1ent show our balance again your balance is $100 And1 we will withdraw money enter an amount to be withdrawn $1,000 insufficient funds let's try that again let's withdraw $50 show our balance again $501 then press for to exit thank you and have a nice day all right everybody that is a simple banking program you can write using python on
