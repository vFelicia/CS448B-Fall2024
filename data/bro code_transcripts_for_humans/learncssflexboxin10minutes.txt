With timestamps:

00:00 - hey what's going on everybody in this
00:01 - topic I'm gonna give you an introduction
00:03 - to using flexbox in CSS in about 10
00:06 - minutes or so why don't you go ahead and
00:08 - sit back relax and enjoy the show
00:12 - all right let's jump in everybody we
00:14 - have a little bit of setup to do we'll
00:16 - create a development with the class of
00:19 - container
00:21 - within our container class we'll create
00:24 - a few developments we'll create four
00:27 - these will be boxes
00:29 - for the class I will set that to be box
00:32 - the first inner development will have an
00:34 - ID of box one
00:37 - the inner text will be one let's copy
00:40 - our inner development pasted three times
00:42 - for a total of four
00:44 - change box 1 to box two for the next
00:46 - element
00:47 - then three
00:49 - then four and that's all we need for our
00:51 - HTML file let's go to our style sheet
00:55 - we'll style our boxes we will select the
00:57 - Box class
01:00 - I'll set the width to be 150 pixels
01:04 - same thing goes with the height
01:07 - let's change the background colors we'll
01:09 - begin with the ID of box one
01:12 - I will set the background color to be
01:15 - something red
01:16 - I'll use hsl values because I like them
01:20 - let's go with that then let's color box
01:23 - two
01:24 - box two let's make that yellow
01:27 - box three will be green
01:33 - then box four will be blue
01:38 - let's change the font size real quick
01:41 - font size 8 em
01:45 - then text align Center
01:49 - I'll add a border radius just to round
01:51 - the corners border radius 15 pixels
01:56 - and that is all the setup we'll need we
01:58 - are ready to begin
01:59 - with our container class we can Flex all
02:02 - of the elements within this container
02:04 - meaning all of these inner div elements
02:06 - so we'll take our container class dot
02:10 - container
02:11 - then set the display property to be Flex
02:16 - you can see that the positioning of
02:17 - these elements has already changed by
02:20 - default the flex Direction property is
02:24 - set to row
02:25 - you can see that there's no apparent
02:28 - change when I refresh the page
02:29 - for a row but in reverse order we can
02:32 - set Flex direction to be row reverse
02:36 - so now one is on the right hand side
02:38 - followed by two three then four
02:41 - to arrange these elements within a
02:43 - column we can set Flex direction to be
02:45 - column
02:46 - or even column reverse
02:50 - then at the bottom we have one then two
02:52 - three then four
02:54 - so that's Flex Direction let's delete
02:57 - the flex Direction property
02:59 - then we have the justify content
03:02 - property
03:04 - justify content sets the alignment on
03:07 - the main axis think of the x-axis by
03:10 - default it's Flex start there's no
03:13 - apparent change
03:14 - flex and would justify the content at
03:17 - the end
03:18 - see we're beginning with four then three
03:21 - two and one when we had Flex Direction
03:23 - set to row reverse it was one two three
03:27 - four but in this case it's four three
03:29 - two one then there's Center if you need
03:32 - to Center align these elements on the
03:34 - main axis
03:35 - we can place the extra space evenly
03:38 - between each of these elements by
03:40 - setting justify content to space
03:43 - between
03:45 - and if I were to expand this page
03:48 - the space between them is increasing
03:51 - you also have space around
03:55 - the area outside of these elements is
03:57 - also included now with space around
04:00 - then we have space evenly
04:07 - all right and that is the Justified
04:09 - content property we can justify elements
04:12 - on the main axis then there's the cross
04:14 - axis think of it as the y-axis up and
04:17 - down what we'll need to do in this
04:19 - example is expand our container just to
04:22 - show you the size of the container I
04:23 - will add a border to The Container class
04:26 - border 10 pixels
04:28 - solid black
04:31 - here's my current container
04:33 - I will increase the height of the
04:35 - container
04:36 - let's set the height to be 90 viewport
04:40 - height units
04:42 - so this is the total size of my
04:44 - container now
04:46 - ninety percent of the height of the web
04:48 - page
04:49 - what we'll use now is the Align items
04:51 - property which is used for the cross
04:53 - access
04:55 - align Dash items
04:59 - the default is flex start there's no
05:01 - change
05:03 - flex and we'll place these elements at
05:06 - the bottom of our container
05:09 - then there's Center align item Center
05:12 - that will place them in the middle of
05:14 - the Cross axis
05:17 - then there's Baseline
05:20 - so with Baseline the text is going to be
05:23 - aligned they're all the same size though
05:25 - we can't really notice the difference
05:27 - with box one let me change the font size
05:31 - font size 1 em you can see that the
05:34 - number one is aligned with the rest of
05:35 - the characters
05:37 - so if I were to increase the font size
05:39 - you can see that they're still aligned
05:42 - but let's eliminate that font size
05:44 - property
05:45 - let's delete our align items property
05:49 - we'll need more elements let's cop BR4
05:52 - inner developments paste them we should
05:55 - have a total of eight one two three four
05:58 - one two three four you can see that
06:00 - these items are getting squished now
06:01 - they're all being compressed we can set
06:04 - the flex wrap property so with our
06:07 - container I will set the flex wrap
06:10 - property to be wrap
06:13 - these elements will now wrap if there's
06:15 - not enough space if I were to expand the
06:18 - size of my container
06:20 - there's now enough room but if we run
06:21 - out of room they'll be pushed down
06:23 - further down the page
06:25 - by default Flex wrap is no wrap
06:30 - otherwise there's rap reverse
06:35 - now they're in reverse order
06:39 - let's use flex wrap now Flex wrap is
06:43 - used along with another property named
06:46 - align content
06:47 - align content
06:50 - if I were to set align content to be
06:53 - Flex
06:54 - start
06:55 - all of that space between the first row
06:57 - and the second is now gone
07:03 - then there's Flex end
07:11 - Center
07:18 - space evenly
07:28 - then space between
07:35 - use any combination of properties that
07:37 - I've demonstrated
07:38 - let's keep Flex wrap as wrap but I'll
07:41 - use flex start
07:44 - you can also add a gap between the rows
07:46 - and the columns between each of these
07:48 - elements
07:50 - let's set a column Gap
07:52 - column Dash Gap to be one em
07:58 - that adds a gap between each of the
08:00 - columns for the rows that would be row
08:03 - Gap
08:04 - I'll set that to be 1em you can also use
08:06 - pixels as well
08:08 - so here's 2 em
08:13 - 3
08:16 - let's delete our Gap properties
08:20 - all right let's also delete the extra
08:22 - four boxes that we have
08:25 - we're also going to get rid of the flex
08:26 - wrapped property
08:28 - as well as align content
08:32 - there's also the Align self property
08:34 - that can be applied to single elements
08:36 - so with box one I will set a line self
08:40 - to be start that's the default
08:44 - this element will be aligned at the top
08:47 - of our container
08:48 - if I were to change line self to be
08:50 - Center this single element is aligned in
08:53 - the center of my container on the cross
08:56 - axis
08:58 - then we have end that will align at the
09:01 - bottom
09:02 - the Align self property can be applied
09:04 - to any of these elements let's do that
09:06 - with number two
09:09 - line Dash self
09:11 - at the start there is no change
09:14 - Center
09:16 - end
09:18 - okay let's delete the Align self
09:20 - property
09:21 - we can use order to change the order of
09:24 - these elements
09:25 - with box one I will set the order to be
09:28 - one that will place number one at the
09:30 - end
09:31 - negative one would be the beginning
09:34 - which it normally is already
09:37 - with box 2 I'll set the order to be one
09:40 - that will place two at the end but if I
09:43 - set it to be negative one it's now at
09:45 - the beginning
09:46 - all right everybody so that is a quick
09:48 - introduction to flexbox there is a lot
09:51 - to talk about and that is all the time
09:52 - that I have for this topic and well
09:54 - that's an introduction to flexbox in CSS

Cleaned transcript:

hey what's going on everybody in this topic I'm gonna give you an introduction to using flexbox in CSS in about 10 minutes or so why don't you go ahead and sit back relax and enjoy the show all right let's jump in everybody we have a little bit of setup to do we'll create a development with the class of container within our container class we'll create a few developments we'll create four these will be boxes for the class I will set that to be box the first inner development will have an ID of box one the inner text will be one let's copy our inner development pasted three times for a total of four change box 1 to box two for the next element then three then four and that's all we need for our HTML file let's go to our style sheet we'll style our boxes we will select the Box class I'll set the width to be 150 pixels same thing goes with the height let's change the background colors we'll begin with the ID of box one I will set the background color to be something red I'll use hsl values because I like them let's go with that then let's color box two box two let's make that yellow box three will be green then box four will be blue let's change the font size real quick font size 8 em then text align Center I'll add a border radius just to round the corners border radius 15 pixels and that is all the setup we'll need we are ready to begin with our container class we can Flex all of the elements within this container meaning all of these inner div elements so we'll take our container class dot container then set the display property to be Flex you can see that the positioning of these elements has already changed by default the flex Direction property is set to row you can see that there's no apparent change when I refresh the page for a row but in reverse order we can set Flex direction to be row reverse so now one is on the right hand side followed by two three then four to arrange these elements within a column we can set Flex direction to be column or even column reverse then at the bottom we have one then two three then four so that's Flex Direction let's delete the flex Direction property then we have the justify content property justify content sets the alignment on the main axis think of the xaxis by default it's Flex start there's no apparent change flex and would justify the content at the end see we're beginning with four then three two and one when we had Flex Direction set to row reverse it was one two three four but in this case it's four three two one then there's Center if you need to Center align these elements on the main axis we can place the extra space evenly between each of these elements by setting justify content to space between and if I were to expand this page the space between them is increasing you also have space around the area outside of these elements is also included now with space around then we have space evenly all right and that is the Justified content property we can justify elements on the main axis then there's the cross axis think of it as the yaxis up and down what we'll need to do in this example is expand our container just to show you the size of the container I will add a border to The Container class border 10 pixels solid black here's my current container I will increase the height of the container let's set the height to be 90 viewport height units so this is the total size of my container now ninety percent of the height of the web page what we'll use now is the Align items property which is used for the cross access align Dash items the default is flex start there's no change flex and we'll place these elements at the bottom of our container then there's Center align item Center that will place them in the middle of the Cross axis then there's Baseline so with Baseline the text is going to be aligned they're all the same size though we can't really notice the difference with box one let me change the font size font size 1 em you can see that the number one is aligned with the rest of the characters so if I were to increase the font size you can see that they're still aligned but let's eliminate that font size property let's delete our align items property we'll need more elements let's cop BR4 inner developments paste them we should have a total of eight one two three four one two three four you can see that these items are getting squished now they're all being compressed we can set the flex wrap property so with our container I will set the flex wrap property to be wrap these elements will now wrap if there's not enough space if I were to expand the size of my container there's now enough room but if we run out of room they'll be pushed down further down the page by default Flex wrap is no wrap otherwise there's rap reverse now they're in reverse order let's use flex wrap now Flex wrap is used along with another property named align content align content if I were to set align content to be Flex start all of that space between the first row and the second is now gone then there's Flex end Center space evenly then space between use any combination of properties that I've demonstrated let's keep Flex wrap as wrap but I'll use flex start you can also add a gap between the rows and the columns between each of these elements let's set a column Gap column Dash Gap to be one em that adds a gap between each of the columns for the rows that would be row Gap I'll set that to be 1em you can also use pixels as well so here's 2 em 3 let's delete our Gap properties all right let's also delete the extra four boxes that we have we're also going to get rid of the flex wrapped property as well as align content there's also the Align self property that can be applied to single elements so with box one I will set a line self to be start that's the default this element will be aligned at the top of our container if I were to change line self to be Center this single element is aligned in the center of my container on the cross axis then we have end that will align at the bottom the Align self property can be applied to any of these elements let's do that with number two line Dash self at the start there is no change Center end okay let's delete the Align self property we can use order to change the order of these elements with box one I will set the order to be one that will place number one at the end negative one would be the beginning which it normally is already with box 2 I'll set the order to be one that will place two at the end but if I set it to be negative one it's now at the beginning all right everybody so that is a quick introduction to flexbox there is a lot to talk about and that is all the time that I have for this topic and well that's an introduction to flexbox in CSS
