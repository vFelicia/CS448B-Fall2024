With timestamps:

00:00 - how's it going everybody its bro here
00:02 - hope you're doing well and in this video
00:04 - we're going to be discussing
00:05 - multi-threading in Java we're gonna be
00:07 - counting up and counting down at the
00:09 - same time how about that let's get into
00:12 - it if you find this video helpful please
00:16 - remember to Like comment and subscribe
00:19 - your support will help keep this channel
00:21 - running all right everybody let's
00:23 - discuss the definition of
00:24 - multi-threading real quick so this is
00:26 - the process of executing multiple
00:29 - threads simultaneously and it helps
00:31 - maximize the utilization of your CPU and
00:34 - with threads they are independent so
00:36 - they do not affect the execution of
00:38 - other threads and an exception in one
00:41 - thread will not interrupt other threads
00:43 - since they run independently and this is
00:45 - useful for serving multiple clients
00:47 - multiplayer games or other mutually
00:50 - independent tasks so let's do some
00:52 - multi-threading right now so what we're
00:54 - going to be doing for this example is
00:56 - that we're going to create two separate
00:58 - threads and each of these is going to
01:00 - have basically a sub program in the
01:03 - first thread we'll create a simple
01:04 - counter that will start at ten and count
01:06 - down to zero and in the other thread
01:08 - we'll do the same thing we'll have a
01:10 - counter but let's start at zero and then
01:12 - count up to ten and both of these
01:14 - threads are gonna run at the same time
01:16 - and display the results as they continue
01:18 - so there's two different ways of
01:20 - creating a thread the first is that we
01:22 - can create a subclass of the thread
01:24 - class so let's try that so within your
01:26 - project folder go to file new class and
01:30 - let's call this maybe my thread it
01:33 - doesn't really matter just make sure
01:34 - that this subclass extends the thread
01:37 - class and then we're going to need to
01:41 - override the run method of the thread
01:43 - class so we're going to type in public
01:46 - void run parentheses curly braces and
01:50 - since we're overriding a method it's
01:53 - good practice to add at override
01:56 - although it's not necessary so when we
01:59 - start the instance of this thread class
02:02 - it's going to execute this run method so
02:05 - let's create an instance of my thread
02:07 - within our main class so we're going to
02:09 - type in my thread or whatever else you
02:11 - name to this
02:12 - let's call this first thread thread 1
02:15 - equals new my thread all right so when
02:21 - we eventually start this thread it's
02:23 - going to execute this run function so
02:26 - what do we want this to do well this is
02:28 - a great time for us to place our counter
02:31 - program within here so we can do this
02:33 - with a simple for loop so we'll start at
02:35 - 10 and then count down to zero so we'll
02:39 - put for int I set this equal to 10
02:43 - we'll continue I as long as I is greater
02:47 - than zero and then we'll decrement I by
02:50 - one after each iteration of this for
02:53 - loop so within this for loop let's just
02:56 - system that out dot print line maybe
03:00 - thread number one and then we'll display
03:06 - whatever the current value of I is so we
03:10 - don't want this to run like
03:12 - instantaneously maybe we would like some
03:14 - sort of like pause for like 1000
03:17 - milliseconds between each of these
03:18 - iterations to simulate like a countdown
03:20 - so what we can do is just type in thread
03:23 - dot sleep then within here we want this
03:27 - to sleep for 1,000 milliseconds after
03:30 - each iteration and then since we're
03:32 - using this method we have to surround
03:34 - this with a try and catch block so make
03:37 - sure you put that in as well all right
03:39 - so then once we exit this for loop let's
03:41 - just display a message such as thread
03:45 - number 1 is finished all right and
03:51 - that's all there is to it so there's
03:54 - another way that we can create a thread
03:56 - so the other way is that we can create
03:59 - an instance of a class
04:02 - that's implementing the runnable
04:03 - interface and then we can pass this
04:06 - instance within the constructor of a
04:09 - thread object but I'll show you how to
04:11 - do this so within your project folder go
04:14 - to file new class and we're going to be
04:17 - implementing the runnable interface so
04:20 - let's call this class maybe my runnable
04:23 - and click finish
04:25 - so we're going to have my runnable
04:29 - implements runnable and then we need to
04:35 - add unimplemented methods so since we're
04:37 - using an interface we need to use all
04:40 - methods that runnable have within its
04:43 - interface and that is the run method
04:45 - within here so going back to our main
04:49 - class what we're going to do is create
04:51 - an instance of my runnable so my
04:54 - runnable and let's call this runnable
04:58 - one equals new my runnable now the
05:05 - second step is that we're going to take
05:06 - runnable and send this within the
05:10 - constructor as an argument within the
05:12 - thread class when we create an object so
05:14 - we'll type in thread thread not my
05:18 - thread and let's call this thread two
05:21 - equals new thread and then within the
05:27 - parentheses of thread just place your
05:30 - runnable instance within here so this is
05:33 - the other way of creating a thread use a
05:37 - subclass or a class that's implementing
05:39 - the rentable interface create an
05:41 - instance of it and then pass it as an
05:44 - argument to the thread class so there's
05:45 - two ways in which you can create a
05:47 - thread the first way is that you can
05:49 - create a subclass of the thread class so
05:53 - you just create a class name and make
05:55 - sure it extends the thread class and
05:57 - then you have access to a run method and
05:59 - the other way is that you create a class
06:02 - that implements the runnable interface
06:05 - and then you take this instance and pass
06:07 - it as an argument to the constructor of
06:10 - the thread class and then that's how you
06:12 - get your other thread so you can do it
06:14 - either way it depends on how you want to
06:16 - write your program like for this example
06:18 - we've could have done like thread 1 and
06:21 - thread 2 by using the my thread class
06:23 - otherwise we could have done like my
06:26 - runnable 2 and you know thread 2 the
06:29 - other way but for this example I wanted
06:31 - to show you guys both ways but yeah you
06:34 - basically have two different ways of
06:36 - creating threads personally I tend to
06:38 - prefer to you
06:39 - is the runnable class or the runnable
06:42 - interface and then pass this instance as
06:45 - a constructor to the thread class
06:46 - because with this class you can still
06:49 - use inheritance like we can extend
06:51 - another class but if you use this class
06:56 - as a subclass of the thread class well
06:59 - in Java you can only have one parent so
07:01 - we can't like have another class as a
07:04 - parrot we're limited to just one the
07:07 - thread class however we can implement
07:09 - another interface so just from my own
07:12 - experience people tend to use the
07:15 - runnable interface more compared to
07:17 - extending the thread class but do it
07:20 - works for you though but I'm getting off
07:22 - track again so we should probably finish
07:23 - this program so we need to fill in the
07:26 - run method of the my runnable class so
07:30 - what we can do actually is go to the my
07:32 - thread class and copy everything here
07:34 - and make a few changes so I'm going to
07:36 - copy this and then paste it within the
07:39 - run method of the my runnable class so
07:43 - instead of counting down from 10 let's
07:45 - count to 10 starting from zero so we'll
07:47 - set a equal to zero we'll continue this
07:50 - as long as I is less than 10 and then
07:53 - we're going to increment I by 1 each
07:56 - time and then let's change system dot
07:58 - out dot print line thread number one to
08:01 - thread number two and then down here
08:03 - after we exit this for loop will display
08:06 - a thread number two is finished all
08:09 - right so that should be everything so
08:11 - let's go to our main class we're going
08:13 - to start thread 1 and thread 2 so I'll
08:16 - type in thread 1 dot start as well as
08:20 - thread 2 dot start and that's it let's
08:25 - run this so thread 1 starts at 10 thread
08:30 - 2 starts at 0 and you can see that
08:31 - they're both either counting up or
08:33 - counting down depending on you know
08:36 - which one is running but you can see
08:37 - that they're both running at the same
08:39 - time and they finished at the same time
08:41 - so that's one of the great benefits of
08:43 - multi-threading because it's kind of
08:46 - like you can make your own sub program
08:48 - that runs independently so ladies and
08:51 - gentlemen we have successfully multi
08:53 - and one of the great things about
08:55 - multi-threading is that if one of these
08:57 - threads encounters an exception and gets
08:59 - interrupted the other threads will still
09:01 - continue
09:02 - so let's actually intentionally cause an
09:05 - exception so within the run method of
09:08 - the my thread class let's divide a
09:11 - number by zero which we can't
09:13 - mathematically do so I'm actually going
09:15 - to fit this maybe within the for loop so
09:18 - what I'm going to do is just within a
09:21 - print line statement I'm going to divide
09:23 - number one by zero so this will throw an
09:28 - arithmetic exception and let's see what
09:30 - happens now so you can see right off the
09:34 - bat thread one encountered an exception
09:37 - the technical name of the first thread
09:39 - is thread - zero but that is thread 1
09:42 - for all intents and purposes but you can
09:44 - see that even if our thread 1 stopped
09:48 - thread 2 still continued along with our
09:50 - main thread so let's actually take this
09:53 - and then move it within our main class
09:57 - so how about after these threads start
10:00 - thread 1 and thread 2 we'll divide by 0
10:05 - right after these threads start
10:07 - so it says exception and thread main but
10:11 - these threads are still continuing so
10:14 - that's proof that threads can run
10:16 - independently and if one thread
10:17 - encounters an exception the other
10:19 - threads will continue still now there's
10:21 - one method I want to talk to you guys
10:23 - about and that is the join method so the
10:26 - calling thread that calls this join
10:29 - method will actually wait for a
10:31 - specified thread to die until it resumed
10:35 - x' so let's say that we want thread 2 to
10:38 - start right after thread 1 so what we'll
10:41 - do is type in the thread that we're
10:43 - waiting to die or finish basically let's
10:46 - say thread 1 so what ends up happening
10:49 - is that if we type in thread 1 dot
10:51 - joined we're going to pause our main
10:54 - thread until thread 1 is completely done
10:56 - and then we'll need to either surround
10:58 - this with a try and catch block or add
11:00 - throws declaration which I did at the
11:02 - top so if we type in thread 1 join the
11:06 - main thread is going
11:07 - to wait until thread one is finished and
11:09 - then it's going to continue on with the
11:11 - rest of the program so let's try it
11:13 - so thread one is running right now but
11:16 - thread two doesn't appear to start and
11:18 - then once thread one is done thread two
11:21 - will start because our main thread
11:23 - resumes with the rest of the program
11:25 - so it says thread 1 is finished and then
11:28 - thread 2 started right after that so you
11:31 - can also put an amount of milliseconds
11:33 - in here and that allows for like a delay
11:35 - so for example if we put 3,000
11:38 - milliseconds in here the main thread is
11:41 - going to be paused for 3,000
11:43 - milliseconds before the main thread will
11:45 - continue so let's try it again but place
11:48 - 3,000 within here so it's going to wait
11:52 - 3 seconds before thread 2 begins and
11:54 - that seems about right
11:55 - so then thread 1 is about to finish and
11:58 - then thread 2 is going to finish a
12:01 - little bit later right about now with
12:05 - the join map that the calling thread and
12:07 - for this example it's the main thread
12:10 - well wait until the specified thread
12:16 - dies or for X amount of milliseconds hey
12:24 - you know what I forgot to talk about
12:25 - demon threads in this video so I should
12:27 - probably do so before we wrap things up
12:29 - so a demon thread is a background thread
12:31 - it is a non-user thread so user threads
12:35 - and demon threads are kind of like
12:37 - opposites so the Java Virtual Machine
12:39 - will not wait for any demon threads
12:42 - before exiting but as long as there's
12:44 - one user thread the Java Virtual Machine
12:47 - is going to wait to exit until all user
12:50 - threads are finished so let's take our
12:52 - previous example where we divided a
12:54 - number by 0 within our main class so
12:58 - what we did for this example is that the
13:01 - main thread encountered an exception but
13:04 - these other two user threads are still
13:06 - running so since there's at least one
13:09 - user thread that is still running the
13:11 - Java Virtual Machine will not exit until
13:13 - all user threads are complete but if we
13:16 - were to set these as demon threads
13:18 - well the Java Virtual Machine is
13:20 - to exit then as soon as all user threads
13:23 - are finished so let's change these to
13:25 - demon threads so we'll take thread 1 dot
13:28 - set demon and set this to true and we'll
13:32 - do the same thing for thread - so thread
13:37 - 1 and thread 2 will no longer be user
13:39 - threads they are the opposite basically
13:42 - they are demon threads and when we run
13:44 - this program well we don't get that
13:46 - countdown anymore we have an exception
13:49 - and thread main and the Java Virtual
13:51 - Machine actually terminated because
13:53 - there were no more user threads we had
13:56 - some demon threads running in the
13:57 - background but they terminated because
13:59 - the Java Virtual Machine doesn't care if
14:02 - they're running it'll exit regardless so
14:03 - that's the basics of multi-threading and
14:06 - just as a reminder before you go there
14:08 - are two different ways of creating
14:10 - threads I just so happen to use both of
14:12 - these ways for this example you can
14:14 - either create a subclass of the thread
14:17 - parent class or you can implement the
14:19 - runnable interface and pass that
14:22 - instance as an argument to the thread
14:24 - constructor so you can do it either way
14:26 - you might have a preference for one or
14:28 - the other but for this example I just
14:30 - did one of each you don't have to do it
14:32 - exactly in the way that I did so yeah if
14:34 - you want a copy of all this code I'll
14:35 - post this in the comments down below and
14:37 - well that's the basics of
14:39 - multi-threading in Java hey you yeah I'm
14:44 - talking to you if you learn something
14:45 - new then you can help me help you in
14:48 - three easy steps
14:50 - by smashing that like button drop a
14:52 - comment down below and subscribe if
14:55 - you'd like to become a fellow bro
14:57 - [Music]

Cleaned transcript:

how's it going everybody its bro here hope you're doing well and in this video we're going to be discussing multithreading in Java we're gonna be counting up and counting down at the same time how about that let's get into it if you find this video helpful please remember to Like comment and subscribe your support will help keep this channel running all right everybody let's discuss the definition of multithreading real quick so this is the process of executing multiple threads simultaneously and it helps maximize the utilization of your CPU and with threads they are independent so they do not affect the execution of other threads and an exception in one thread will not interrupt other threads since they run independently and this is useful for serving multiple clients multiplayer games or other mutually independent tasks so let's do some multithreading right now so what we're going to be doing for this example is that we're going to create two separate threads and each of these is going to have basically a sub program in the first thread we'll create a simple counter that will start at ten and count down to zero and in the other thread we'll do the same thing we'll have a counter but let's start at zero and then count up to ten and both of these threads are gonna run at the same time and display the results as they continue so there's two different ways of creating a thread the first is that we can create a subclass of the thread class so let's try that so within your project folder go to file new class and let's call this maybe my thread it doesn't really matter just make sure that this subclass extends the thread class and then we're going to need to override the run method of the thread class so we're going to type in public void run parentheses curly braces and since we're overriding a method it's good practice to add at override although it's not necessary so when we start the instance of this thread class it's going to execute this run method so let's create an instance of my thread within our main class so we're going to type in my thread or whatever else you name to this let's call this first thread thread 1 equals new my thread all right so when we eventually start this thread it's going to execute this run function so what do we want this to do well this is a great time for us to place our counter program within here so we can do this with a simple for loop so we'll start at 10 and then count down to zero so we'll put for int I set this equal to 10 we'll continue I as long as I is greater than zero and then we'll decrement I by one after each iteration of this for loop so within this for loop let's just system that out dot print line maybe thread number one and then we'll display whatever the current value of I is so we don't want this to run like instantaneously maybe we would like some sort of like pause for like 1000 milliseconds between each of these iterations to simulate like a countdown so what we can do is just type in thread dot sleep then within here we want this to sleep for 1,000 milliseconds after each iteration and then since we're using this method we have to surround this with a try and catch block so make sure you put that in as well all right so then once we exit this for loop let's just display a message such as thread number 1 is finished all right and that's all there is to it so there's another way that we can create a thread so the other way is that we can create an instance of a class that's implementing the runnable interface and then we can pass this instance within the constructor of a thread object but I'll show you how to do this so within your project folder go to file new class and we're going to be implementing the runnable interface so let's call this class maybe my runnable and click finish so we're going to have my runnable implements runnable and then we need to add unimplemented methods so since we're using an interface we need to use all methods that runnable have within its interface and that is the run method within here so going back to our main class what we're going to do is create an instance of my runnable so my runnable and let's call this runnable one equals new my runnable now the second step is that we're going to take runnable and send this within the constructor as an argument within the thread class when we create an object so we'll type in thread thread not my thread and let's call this thread two equals new thread and then within the parentheses of thread just place your runnable instance within here so this is the other way of creating a thread use a subclass or a class that's implementing the rentable interface create an instance of it and then pass it as an argument to the thread class so there's two ways in which you can create a thread the first way is that you can create a subclass of the thread class so you just create a class name and make sure it extends the thread class and then you have access to a run method and the other way is that you create a class that implements the runnable interface and then you take this instance and pass it as an argument to the constructor of the thread class and then that's how you get your other thread so you can do it either way it depends on how you want to write your program like for this example we've could have done like thread 1 and thread 2 by using the my thread class otherwise we could have done like my runnable 2 and you know thread 2 the other way but for this example I wanted to show you guys both ways but yeah you basically have two different ways of creating threads personally I tend to prefer to you is the runnable class or the runnable interface and then pass this instance as a constructor to the thread class because with this class you can still use inheritance like we can extend another class but if you use this class as a subclass of the thread class well in Java you can only have one parent so we can't like have another class as a parrot we're limited to just one the thread class however we can implement another interface so just from my own experience people tend to use the runnable interface more compared to extending the thread class but do it works for you though but I'm getting off track again so we should probably finish this program so we need to fill in the run method of the my runnable class so what we can do actually is go to the my thread class and copy everything here and make a few changes so I'm going to copy this and then paste it within the run method of the my runnable class so instead of counting down from 10 let's count to 10 starting from zero so we'll set a equal to zero we'll continue this as long as I is less than 10 and then we're going to increment I by 1 each time and then let's change system dot out dot print line thread number one to thread number two and then down here after we exit this for loop will display a thread number two is finished all right so that should be everything so let's go to our main class we're going to start thread 1 and thread 2 so I'll type in thread 1 dot start as well as thread 2 dot start and that's it let's run this so thread 1 starts at 10 thread 2 starts at 0 and you can see that they're both either counting up or counting down depending on you know which one is running but you can see that they're both running at the same time and they finished at the same time so that's one of the great benefits of multithreading because it's kind of like you can make your own sub program that runs independently so ladies and gentlemen we have successfully multi and one of the great things about multithreading is that if one of these threads encounters an exception and gets interrupted the other threads will still continue so let's actually intentionally cause an exception so within the run method of the my thread class let's divide a number by zero which we can't mathematically do so I'm actually going to fit this maybe within the for loop so what I'm going to do is just within a print line statement I'm going to divide number one by zero so this will throw an arithmetic exception and let's see what happens now so you can see right off the bat thread one encountered an exception the technical name of the first thread is thread zero but that is thread 1 for all intents and purposes but you can see that even if our thread 1 stopped thread 2 still continued along with our main thread so let's actually take this and then move it within our main class so how about after these threads start thread 1 and thread 2 we'll divide by 0 right after these threads start so it says exception and thread main but these threads are still continuing so that's proof that threads can run independently and if one thread encounters an exception the other threads will continue still now there's one method I want to talk to you guys about and that is the join method so the calling thread that calls this join method will actually wait for a specified thread to die until it resumed x' so let's say that we want thread 2 to start right after thread 1 so what we'll do is type in the thread that we're waiting to die or finish basically let's say thread 1 so what ends up happening is that if we type in thread 1 dot joined we're going to pause our main thread until thread 1 is completely done and then we'll need to either surround this with a try and catch block or add throws declaration which I did at the top so if we type in thread 1 join the main thread is going to wait until thread one is finished and then it's going to continue on with the rest of the program so let's try it so thread one is running right now but thread two doesn't appear to start and then once thread one is done thread two will start because our main thread resumes with the rest of the program so it says thread 1 is finished and then thread 2 started right after that so you can also put an amount of milliseconds in here and that allows for like a delay so for example if we put 3,000 milliseconds in here the main thread is going to be paused for 3,000 milliseconds before the main thread will continue so let's try it again but place 3,000 within here so it's going to wait 3 seconds before thread 2 begins and that seems about right so then thread 1 is about to finish and then thread 2 is going to finish a little bit later right about now with the join map that the calling thread and for this example it's the main thread well wait until the specified thread dies or for X amount of milliseconds hey you know what I forgot to talk about demon threads in this video so I should probably do so before we wrap things up so a demon thread is a background thread it is a nonuser thread so user threads and demon threads are kind of like opposites so the Java Virtual Machine will not wait for any demon threads before exiting but as long as there's one user thread the Java Virtual Machine is going to wait to exit until all user threads are finished so let's take our previous example where we divided a number by 0 within our main class so what we did for this example is that the main thread encountered an exception but these other two user threads are still running so since there's at least one user thread that is still running the Java Virtual Machine will not exit until all user threads are complete but if we were to set these as demon threads well the Java Virtual Machine is to exit then as soon as all user threads are finished so let's change these to demon threads so we'll take thread 1 dot set demon and set this to true and we'll do the same thing for thread so thread 1 and thread 2 will no longer be user threads they are the opposite basically they are demon threads and when we run this program well we don't get that countdown anymore we have an exception and thread main and the Java Virtual Machine actually terminated because there were no more user threads we had some demon threads running in the background but they terminated because the Java Virtual Machine doesn't care if they're running it'll exit regardless so that's the basics of multithreading and just as a reminder before you go there are two different ways of creating threads I just so happen to use both of these ways for this example you can either create a subclass of the thread parent class or you can implement the runnable interface and pass that instance as an argument to the thread constructor so you can do it either way you might have a preference for one or the other but for this example I just did one of each you don't have to do it exactly in the way that I did so yeah if you want a copy of all this code I'll post this in the comments down below and well that's the basics of multithreading in Java hey you yeah I'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro
