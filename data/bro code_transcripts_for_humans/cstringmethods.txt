With timestamps:

00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm gonna show you all
00:05 - some useful string methods in c
00:06 - sharp so sit back relax and enjoy the
00:09 - show
00:12 - all right everybody here's a few useful
00:14 - string methods that you may be
00:15 - interested in
00:16 - so to begin we'll need a string to work
00:18 - with or a variable containing a string
00:20 - so why don't we create a variable named
00:23 - full name to store your own full name
00:26 - now to access some methods available to
00:28 - strings we'll need to type a string or a
00:31 - variable containing a string
00:32 - then follow this with a dot and there
00:34 - should be a prompt for
00:36 - a whole bunch of methods that we have
00:37 - access to i'll show you some of the more
00:39 - useful ones
00:40 - like two upper full name dot to upper
00:43 - then
00:44 - to invoke this add a set of parentheses
00:46 - then a semicolon to finish this
00:48 - statement
00:48 - but then we'll need to reassign this
00:50 - full name
00:52 - equals full name to upper then we can
00:54 - display
00:55 - our full name and when i run this my
00:57 - name should all be uppercase
01:00 - just like that okay now alternatively
01:03 - there's
01:04 - two lower it's the same process as
01:06 - before
01:07 - but change the method to lower
01:10 - and my name should all be lowercase okay
01:13 - so that's two upper and
01:15 - two lower let's move on for this next
01:18 - example we'll need a phone number
01:20 - so let's create a string named phone
01:23 - number equals and make up some phone
01:26 - number and be sure to include some
01:27 - dashes
01:28 - one two three four five six seven eight
01:30 - nine zero
01:31 - okay what i'm going to do is replace
01:34 - these dashes with a different character
01:37 - so to do that we'll need to use the
01:38 - replace method
01:40 - so phone number dot
01:43 - replace so within the set of parentheses
01:47 - we'll need
01:48 - the character we're going to replace and
01:50 - another character we're going to replace
01:52 - the old character with so i would like
01:54 - to replace
01:55 - all dashes with a forward slash
01:59 - so separate each of these characters
02:01 - with a comma
02:03 - so this will replace my phone number the
02:05 - dash is within the phone number
02:06 - with forward slashes phone number equals
02:09 - phone number dot replace
02:11 - and let's display our phone number with
02:14 - a writeline statement
02:16 - so all of these dashes have been
02:18 - replaced with forward slashes
02:20 - now if you replace these with no
02:22 - characters just an empty set
02:24 - of quotes that will effectively remove
02:26 - those dashes within the phone number
02:28 - which could have some uses too so that
02:31 - is the replace
02:32 - method available to strings next we have
02:35 - the insert method
02:36 - we can insert a character or a string at
02:38 - a given index within
02:40 - a pre-existing string let's say i would
02:42 - like to take my full name and turn it
02:44 - into some sort of username
02:45 - by preceding my first name with the at
02:48 - sign
02:49 - so to do that i can use the insert
02:50 - method i'll create a new
02:52 - variable for this example let's say
02:54 - string username
02:56 - equals full name dot insert
02:59 - and with the insert method we will list
03:01 - an index
03:02 - and what we would like to insert so
03:04 - computers they always start at zero
03:06 - the beginning would be zero that would
03:08 - be the first index
03:09 - so at the beginning index zero i would
03:12 - like to insert
03:13 - an at sign and this will create a new
03:16 - variable called username
03:18 - so i will display that within a
03:20 - rightline statement
03:21 - console.writeline username and my
03:25 - username is now at whatever my full name
03:28 - was
03:29 - now this doesn't necessarily have to be
03:31 - a single character we could
03:32 - say like mr dot and precede
03:35 - my full name with mr and my username
03:39 - is now mr bro code okay so that is the
03:43 - insert
03:43 - method what i'm about to show you next
03:45 - technically
03:46 - isn't a method it's a property but it's
03:48 - found within the same place as methods
03:50 - for strings
03:51 - so to access the length property of a
03:54 - string type a string
03:56 - dot link and you do not add a set of
03:59 - parentheses
03:59 - afterwards that is done with methods so
04:02 - the length property will return
04:04 - the given amount of characters within a
04:06 - string so i'm going to display this
04:08 - within
04:09 - a rightline statement if you need this
04:11 - you can always like assign this to a
04:12 - variable or something
04:14 - but that might be overkill for this
04:16 - lesson so console.writeline
04:18 - the length of my full name and my full
04:20 - name
04:21 - has eight characters in it one potential
04:24 - use of the length property of strings
04:26 - is that let's say that somebody's
04:28 - creating a username and there's a max 12
04:30 - characters
04:30 - well you can get the length of whatever
04:32 - they type in and check to see if it's
04:34 - more than 12 characters
04:35 - this next method is the substring method
04:38 - and it can be a little complex
04:39 - basically speaking we can take a section
04:42 - from an original string
04:43 - and create an entirely new string but we
04:46 - have to specify
04:47 - a position and how many characters you
04:49 - would like to extract
04:51 - from that given position so we'll create
04:54 - two new strings
04:55 - from full name first name and last name
04:57 - using the substring method
04:59 - so let's declare string first name
05:03 - equals full name dot
05:06 - substring okay so within the substring
05:10 - we're going to list
05:11 - an index and the amount of characters
05:13 - afterwards we would like to include
05:15 - within our substring
05:16 - so i would like to take the first three
05:18 - characters from my full name
05:20 - so the index computers always start with
05:22 - zero of the beginning of my
05:24 - string would be zero and i'm going to
05:26 - take three characters
05:27 - after this index so if i was to display
05:31 - my first name now it's going to be
05:34 - bro the first three characters of my
05:36 - full name
05:37 - now let's do the same thing with last
05:39 - name so let's copy what we have
05:42 - change first name to last name but now
05:45 - we have a different index
05:47 - so i would like my substring to begin
05:49 - where the c is
05:50 - so let's count what the index is going
05:52 - to be this would be zero
05:54 - one two three four so let's change
05:57 - zero to four and how many characters
06:00 - would we like to include within our
06:01 - substring
06:02 - one two three four so four
06:06 - comma four and that is my last name so i
06:08 - will display that within
06:10 - a right line statement first name and
06:12 - last name
06:14 - so that is the substring method we can
06:16 - take a section or a slice
06:18 - from an original string and create an
06:20 - entirely new string from it
06:22 - alright everybody those are a few useful
06:25 - string methods
06:26 - but not all of them so if you would like
06:28 - a complete list you can always type a
06:30 - string
06:30 - dot and there should be a pop-up for all
06:33 - of the different string methods you can
06:34 - access
06:35 - and if you highlight one of these
06:36 - there's a description of what they do
06:38 - exactly
06:38 - i only showed you a few of the more
06:40 - useful ones for beginners
06:42 - so if you can give this video a big fat
06:44 - thumbs up drop a random comment down
06:46 - below and well
06:47 - those are some useful string methods in
06:49 - c sharp

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video i'm gonna show you all some useful string methods in c sharp so sit back relax and enjoy the show all right everybody here's a few useful string methods that you may be interested in so to begin we'll need a string to work with or a variable containing a string so why don't we create a variable named full name to store your own full name now to access some methods available to strings we'll need to type a string or a variable containing a string then follow this with a dot and there should be a prompt for a whole bunch of methods that we have access to i'll show you some of the more useful ones like two upper full name dot to upper then to invoke this add a set of parentheses then a semicolon to finish this statement but then we'll need to reassign this full name equals full name to upper then we can display our full name and when i run this my name should all be uppercase just like that okay now alternatively there's two lower it's the same process as before but change the method to lower and my name should all be lowercase okay so that's two upper and two lower let's move on for this next example we'll need a phone number so let's create a string named phone number equals and make up some phone number and be sure to include some dashes one two three four five six seven eight nine zero okay what i'm going to do is replace these dashes with a different character so to do that we'll need to use the replace method so phone number dot replace so within the set of parentheses we'll need the character we're going to replace and another character we're going to replace the old character with so i would like to replace all dashes with a forward slash so separate each of these characters with a comma so this will replace my phone number the dash is within the phone number with forward slashes phone number equals phone number dot replace and let's display our phone number with a writeline statement so all of these dashes have been replaced with forward slashes now if you replace these with no characters just an empty set of quotes that will effectively remove those dashes within the phone number which could have some uses too so that is the replace method available to strings next we have the insert method we can insert a character or a string at a given index within a preexisting string let's say i would like to take my full name and turn it into some sort of username by preceding my first name with the at sign so to do that i can use the insert method i'll create a new variable for this example let's say string username equals full name dot insert and with the insert method we will list an index and what we would like to insert so computers they always start at zero the beginning would be zero that would be the first index so at the beginning index zero i would like to insert an at sign and this will create a new variable called username so i will display that within a rightline statement console.writeline username and my username is now at whatever my full name was now this doesn't necessarily have to be a single character we could say like mr dot and precede my full name with mr and my username is now mr bro code okay so that is the insert method what i'm about to show you next technically isn't a method it's a property but it's found within the same place as methods for strings so to access the length property of a string type a string dot link and you do not add a set of parentheses afterwards that is done with methods so the length property will return the given amount of characters within a string so i'm going to display this within a rightline statement if you need this you can always like assign this to a variable or something but that might be overkill for this lesson so console.writeline the length of my full name and my full name has eight characters in it one potential use of the length property of strings is that let's say that somebody's creating a username and there's a max 12 characters well you can get the length of whatever they type in and check to see if it's more than 12 characters this next method is the substring method and it can be a little complex basically speaking we can take a section from an original string and create an entirely new string but we have to specify a position and how many characters you would like to extract from that given position so we'll create two new strings from full name first name and last name using the substring method so let's declare string first name equals full name dot substring okay so within the substring we're going to list an index and the amount of characters afterwards we would like to include within our substring so i would like to take the first three characters from my full name so the index computers always start with zero of the beginning of my string would be zero and i'm going to take three characters after this index so if i was to display my first name now it's going to be bro the first three characters of my full name now let's do the same thing with last name so let's copy what we have change first name to last name but now we have a different index so i would like my substring to begin where the c is so let's count what the index is going to be this would be zero one two three four so let's change zero to four and how many characters would we like to include within our substring one two three four so four comma four and that is my last name so i will display that within a right line statement first name and last name so that is the substring method we can take a section or a slice from an original string and create an entirely new string from it alright everybody those are a few useful string methods but not all of them so if you would like a complete list you can always type a string dot and there should be a popup for all of the different string methods you can access and if you highlight one of these there's a description of what they do exactly i only showed you a few of the more useful ones for beginners so if you can give this video a big fat thumbs up drop a random comment down below and well those are some useful string methods in c sharp
