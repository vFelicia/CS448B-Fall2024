With timestamps:

00:00 - hey uh so today I'm going to explain
00:02 - click events and how to handle them in
00:04 - react a click event is an interaction
00:07 - when a user clicks on a specific element
00:09 - we can respond to clicks by passing a
00:12 - call back to the onclick event handler
00:15 - in this example we'll create a button
00:17 - let's create a button component go to
00:19 - new
00:20 - file button.
00:24 - jsx we will use a function base
00:28 - component function
00:30 - button then be sure to export it export
00:34 - default
00:35 - button going back to our parent
00:38 - component of app we will need to import
00:40 - our button import button from its
00:45 - location button.
00:48 - jsx then we will create one button
00:53 - component going to our button component
00:56 - we will return a single button element
01:01 - the button will have text of Click
01:05 - me hey for fun I'm just going to add an
01:08 - emoji but you don't have
01:13 - to and I will zoom in so you can see it
01:17 - many HTML elements have an onclick event
01:21 - handler we can set the SQL to a
01:23 - JavaScript callback but we need a
01:25 - function to work with So within our
01:28 - button function we can write an inner
01:31 - function const handle click I will
01:36 - assign this equal to either a function
01:38 - expression or an arrow function I like
01:41 - Arrow functions so I'm going to stick
01:43 - with an arrow function when we click on
01:45 - the button what do we want to do let's
01:49 - console.log the word
01:52 - ouch so we have our function we will set
01:56 - the onclick event handler equal to a
01:59 - callback a call back to this function
02:02 - when we click on the button do this if I
02:05 - went to my console inspect console Let
02:08 - me refresh this if I click on the button
02:12 - we execute this code we will output the
02:14 - word ouch every time I click the
02:18 - button if your function has parameters
02:21 - there's one change we'll need to make
02:23 - let's create a second function const
02:26 - handle Click
02:28 - 2
02:30 - this function will have a parameter of
02:32 - name we'll use an arrow function we will
02:37 - console.log I'll use a template string
02:40 - let's display the
02:42 - name stop clicking
02:46 - me for the onclick event handler we will
02:49 - set a call back of handle click to but
02:53 - we have parameters that means we need to
02:54 - send a matching number of arguments I
02:57 - will send my first name but feel free to
02:59 - use your name name I didn't click on the
03:02 - button yet I'm going to go to inspect
03:05 - console uh Let me refresh all this I
03:08 - didn't click on the button yet but we've
03:10 - already called that function if you add
03:13 - a set of parentheses after a call back
03:15 - you'll invoke it right away so we don't
03:18 - want to do that if we have arguments we
03:19 - need to send to a function we could wrap
03:22 - this call back within a function
03:24 - expression or an arrow function let's
03:26 - use an arrow function when we click on
03:29 - the button
03:30 - do this that will prevent us from
03:32 - calling this function right away so
03:35 - let's refresh
03:36 - everything then when I click on the
03:39 - button then we execute this code bro
03:42 - stop clicking me bro stop clicking me
03:44 - bro stop clicking me so that's how to
03:46 - send arguments to a
03:48 - function now in this next example We'll
03:51 - add some
03:52 - conditions let's set the onclick
03:54 - attribute to be a call back to handle
03:57 - click if you have more than one line of
03:59 - code for your arrow function you'll need
04:01 - to use a set of curly
04:03 - braces let's add a count variable let
04:07 - count equal
04:10 - Z with our handle click function let's
04:13 - have one parameter a name what would we
04:17 - like to do let's check to see if our
04:20 - count
04:21 - variable is less than three if it is
04:25 - let's increase count by
04:28 - one then
04:31 - console.log I'll use a template
04:34 - string let's add our name
04:37 - parameter you clicked me add a
04:41 - placeholder
04:43 - count time or
04:47 - times else if the user clicked me more
04:50 - than three times let's
04:53 - console.log a different
04:55 - message let's
04:57 - say add a placeholder
05:00 - name stop clicking
05:05 - me with the onclick event handler we
05:08 - have a parameter that means we have to
05:10 - wrap this call back within a function
05:12 - expression or an arrow function let's
05:14 - use an arrow function for
05:18 - Simplicity we'll pass in a first name
05:21 - pass in your own first
05:22 - name so let's save and refresh
05:25 - everything go to inspect
05:28 - console when I click on the button once
05:31 - it's going to display bro you clicked me
05:33 - one time bro you clicked me two times
05:37 - bro you clicked me three times after the
05:39 - third time we'll display a different
05:41 - message bro stop clicking me bro stop
05:44 - clicking me bro stop clicking
05:46 - Me So within your functions you can
05:49 - write some
05:50 - conditions now I need to explain the
05:52 - event
05:54 - parameter let's recreate that handle
05:57 - click
05:58 - function const
06:00 - handle click equals with click events
06:04 - were automatically provided with an
06:06 - event argument it's an object that
06:09 - describes the event that occurred but as
06:11 - a parameter people usually shorten the
06:13 - event parameter to be simply
06:16 - e let's print our
06:18 - event
06:21 - console.log e our event we'll need to
06:24 - set the onclick event handler we have
06:27 - one parameter so we need to WP this
06:29 - within an arrow
06:31 - function handle click for the arrow
06:35 - function we'll have e for the parameter
06:38 - and E for an argument for the handle
06:39 - click
06:44 - function let's click on the button we're
06:47 - now outputting the event its type is
06:50 - synthetic base event and it has all of
06:53 - these properties and
06:55 - methods such as where you clicked on the
06:58 - screen there's a Tim stamp and a Target
07:02 - by utilizing this event object that
07:04 - gives us many different possibilities
07:06 - for this demonstration let's change the
07:09 - text content of the
07:10 - button so there should be a Target
07:13 - property here I am going to change the
07:16 - text content that should be a
07:19 - property yep there it
07:23 - is so what we'll do after clicking on
07:27 - the button we will access that event
07:29 - object follow this with DOT that's the
07:33 - property
07:34 - accessor we're selecting the inner
07:36 - target object then selecting the text
07:40 - content property let's set that equal to
07:44 - be
07:45 - ouch so now when you click on the button
07:48 - the text of the button should change to
07:51 - ouch I'm going to add an emoji
07:55 - to there we go okay let's try this again
07:57 - this will be fun click me
08:01 - ouch there's also the on doubleclick
08:04 - event handler instead of onclick you'll
08:07 - say on double click so when we click on
08:10 - the button once now nothing
08:13 - happens but once I
08:15 - doubleclick that's when we'll execute
08:17 - this function now I'm going to double
08:20 - click
08:21 - ouch if you need to handle a double
08:23 - click you just have to use the on double
08:26 - click event
08:27 - handler all right let's move on from
08:29 - using a button this time let's use an
08:32 - image in my assets folder I do have my
08:35 - profile picture from my YouTube channel
08:37 - find a profile picture of yourself or a
08:39 - picture you
08:40 - like we're going to create a new
08:43 - component let's go to our source folder
08:45 - I will name this component profile
08:49 - picture.
08:51 - jsx we will create a function with the
08:55 - name of profile
08:58 - picture
09:00 - then be sure to export it export default
09:04 - profile
09:05 - picture then going back to our app
09:08 - component we will import our profile
09:11 - picture component from its
09:15 - location profile picture.
09:18 - jsx let's include our profile picture
09:21 - component instead of our
09:26 - button all right so within our profile
09:29 - picture component I will store a URL
09:32 - within a constant constant image
09:36 - URL I will list a relative file
09:39 - path so my image is within my assets
09:44 - folder my file location but it might be
09:47 - different for you mine is going to
09:49 - be SL Source SL assets slash the name of
09:56 - the image including the extension mine
09:58 - is profile.
10:01 - jpeg we will return an image
10:05 - element IMG for an image
10:08 - element I will set the source equal to
10:12 - some JavaScript I need to set a curly
10:14 - braces I will set it equal to my image
10:18 - URL and let's see if that worked yes it
10:22 - did but I'm going to zoom out to like
10:25 - 150 my image is
10:28 - small let's add a handle click function
10:31 - const handle click equals an arrow
10:35 - function to test it let's console.log
10:39 - the
10:40 - word
10:42 - ouch then we'll need to set the on click
10:45 - event handler within our
10:47 - image
10:49 - onclick equals a callback to handle
10:54 - click so let's save and refresh
10:56 - everything let's go to inspect console
11:00 - when you click on your image it should
11:02 - display the word ouch every time you
11:04 - click
11:06 - it let's utilize the event object that's
11:09 - generated we have one parameter e for
11:11 - our event that means we'll have to
11:14 - change the call back to Be an Arrow
11:16 - function e for the parameter
11:20 - Arrow handle click we have one argument
11:24 - of e so what should we do now when we
11:29 - click on the image let's hide the image
11:32 - we'll need to access that event
11:34 - object access the target object that's
11:38 - found within access its style then the
11:41 - display
11:43 - property we will set the display to be
11:46 - none when we click on it so then if you
11:49 - were to click on your image it should
11:51 - disappear so by accessing the event
11:54 - object that gives us a load of different
11:56 - possibilities for what we can do all
11:59 - right everybody so that is an
12:00 - introduction to handling click events in
12:02 - react a click event is an interaction
12:05 - when a user clicks on a specific element
12:07 - we can respond to clicks by passing a
12:10 - call back to the onclick event handler
12:12 - and well everybody that is an
12:14 - introduction to click events in
12:19 - react

Cleaned transcript:

hey uh so today I'm going to explain click events and how to handle them in react a click event is an interaction when a user clicks on a specific element we can respond to clicks by passing a call back to the onclick event handler in this example we'll create a button let's create a button component go to new file button. jsx we will use a function base component function button then be sure to export it export default button going back to our parent component of app we will need to import our button import button from its location button. jsx then we will create one button component going to our button component we will return a single button element the button will have text of Click me hey for fun I'm just going to add an emoji but you don't have to and I will zoom in so you can see it many HTML elements have an onclick event handler we can set the SQL to a JavaScript callback but we need a function to work with So within our button function we can write an inner function const handle click I will assign this equal to either a function expression or an arrow function I like Arrow functions so I'm going to stick with an arrow function when we click on the button what do we want to do let's console.log the word ouch so we have our function we will set the onclick event handler equal to a callback a call back to this function when we click on the button do this if I went to my console inspect console Let me refresh this if I click on the button we execute this code we will output the word ouch every time I click the button if your function has parameters there's one change we'll need to make let's create a second function const handle Click 2 this function will have a parameter of name we'll use an arrow function we will console.log I'll use a template string let's display the name stop clicking me for the onclick event handler we will set a call back of handle click to but we have parameters that means we need to send a matching number of arguments I will send my first name but feel free to use your name name I didn't click on the button yet I'm going to go to inspect console uh Let me refresh all this I didn't click on the button yet but we've already called that function if you add a set of parentheses after a call back you'll invoke it right away so we don't want to do that if we have arguments we need to send to a function we could wrap this call back within a function expression or an arrow function let's use an arrow function when we click on the button do this that will prevent us from calling this function right away so let's refresh everything then when I click on the button then we execute this code bro stop clicking me bro stop clicking me bro stop clicking me so that's how to send arguments to a function now in this next example We'll add some conditions let's set the onclick attribute to be a call back to handle click if you have more than one line of code for your arrow function you'll need to use a set of curly braces let's add a count variable let count equal Z with our handle click function let's have one parameter a name what would we like to do let's check to see if our count variable is less than three if it is let's increase count by one then console.log I'll use a template string let's add our name parameter you clicked me add a placeholder count time or times else if the user clicked me more than three times let's console.log a different message let's say add a placeholder name stop clicking me with the onclick event handler we have a parameter that means we have to wrap this call back within a function expression or an arrow function let's use an arrow function for Simplicity we'll pass in a first name pass in your own first name so let's save and refresh everything go to inspect console when I click on the button once it's going to display bro you clicked me one time bro you clicked me two times bro you clicked me three times after the third time we'll display a different message bro stop clicking me bro stop clicking me bro stop clicking Me So within your functions you can write some conditions now I need to explain the event parameter let's recreate that handle click function const handle click equals with click events were automatically provided with an event argument it's an object that describes the event that occurred but as a parameter people usually shorten the event parameter to be simply e let's print our event console.log e our event we'll need to set the onclick event handler we have one parameter so we need to WP this within an arrow function handle click for the arrow function we'll have e for the parameter and E for an argument for the handle click function let's click on the button we're now outputting the event its type is synthetic base event and it has all of these properties and methods such as where you clicked on the screen there's a Tim stamp and a Target by utilizing this event object that gives us many different possibilities for this demonstration let's change the text content of the button so there should be a Target property here I am going to change the text content that should be a property yep there it is so what we'll do after clicking on the button we will access that event object follow this with DOT that's the property accessor we're selecting the inner target object then selecting the text content property let's set that equal to be ouch so now when you click on the button the text of the button should change to ouch I'm going to add an emoji to there we go okay let's try this again this will be fun click me ouch there's also the on doubleclick event handler instead of onclick you'll say on double click so when we click on the button once now nothing happens but once I doubleclick that's when we'll execute this function now I'm going to double click ouch if you need to handle a double click you just have to use the on double click event handler all right let's move on from using a button this time let's use an image in my assets folder I do have my profile picture from my YouTube channel find a profile picture of yourself or a picture you like we're going to create a new component let's go to our source folder I will name this component profile picture. jsx we will create a function with the name of profile picture then be sure to export it export default profile picture then going back to our app component we will import our profile picture component from its location profile picture. jsx let's include our profile picture component instead of our button all right so within our profile picture component I will store a URL within a constant constant image URL I will list a relative file path so my image is within my assets folder my file location but it might be different for you mine is going to be SL Source SL assets slash the name of the image including the extension mine is profile. jpeg we will return an image element IMG for an image element I will set the source equal to some JavaScript I need to set a curly braces I will set it equal to my image URL and let's see if that worked yes it did but I'm going to zoom out to like 150 my image is small let's add a handle click function const handle click equals an arrow function to test it let's console.log the word ouch then we'll need to set the on click event handler within our image onclick equals a callback to handle click so let's save and refresh everything let's go to inspect console when you click on your image it should display the word ouch every time you click it let's utilize the event object that's generated we have one parameter e for our event that means we'll have to change the call back to Be an Arrow function e for the parameter Arrow handle click we have one argument of e so what should we do now when we click on the image let's hide the image we'll need to access that event object access the target object that's found within access its style then the display property we will set the display to be none when we click on it so then if you were to click on your image it should disappear so by accessing the event object that gives us a load of different possibilities for what we can do all right everybody so that is an introduction to handling click events in react a click event is an interaction when a user clicks on a specific element we can respond to clicks by passing a call back to the onclick event handler and well everybody that is an introduction to click events in react
