With timestamps:

00:00 - hey what's going on everybody bro here
00:02 - hope you're doing well and in this video
00:03 - i'm going to teach you guys how we can
00:05 - create a clock program in python so sit
00:07 - back relax and enjoy the show
00:11 - if you find this video helpful please
00:13 - remember to like
00:14 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - all right my fellow bros in this video
00:21 - we're going to be creating a clock
00:22 - gui program so we'll need a few imports
00:25 - from
00:26 - tk enter import everything and
00:30 - from time import everything as well
00:33 - we'll need a window window equals tk
00:36 - followed by window.main loop
00:38 - and in this program we're going to be
00:39 - creating three separate labels
00:41 - one for the time another for the day of
00:43 - the week and another for the date
00:46 - so let's begin with just displaying the
00:48 - time and work on the day of the week and
00:50 - the date later
00:51 - so let's create a label for the time
00:53 - called time
00:55 - label equals label we're adding this to
00:58 - the window
00:59 - and let's set the font because we can
01:01 - i'm going to choose
01:03 - maybe ariel and then a size of 50 so
01:06 - that this is somewhat large
01:08 - i'm going to change the foreground color
01:09 - that is the font color
01:12 - and i will pick a hex value of green so
01:15 - that is
01:15 - zero zero f zero zero but feel free to
01:18 - pick whatever color you want
01:20 - and i'm also going to set the background
01:22 - color and you can pick a hex value or a
01:24 - color name i'm just going to say black
01:27 - and then i am going to pack this label
01:30 - time label dot pack
01:35 - now we're going to call a function and
01:38 - we'll call this update and we'll define
01:40 - what this does
01:41 - after every second has passed we will
01:43 - use a recursive function
01:45 - to keep on updating the time every one
01:48 - second or so
01:49 - so let's define what this function does
01:51 - def
01:52 - update there is a function
01:56 - within the time module called strf time
01:59 - which we can use to return the current
02:01 - time and format it however we want
02:04 - so we're going to actually place this
02:06 - within a string variable
02:08 - and we'll call this time string and this
02:11 - function
02:11 - is strf time i'm actually going to go to
02:15 - python's website just to give you an
02:16 - example of how this works
02:18 - here we are on python's website and this
02:21 - is the
02:21 - strf time function and this converts a
02:25 - tuple
02:25 - representing a time as returned by
02:28 - gm time or local time to a string
02:32 - as specified by the format arguments
02:35 - so when we call this function we can
02:38 - pass in
02:38 - directives as arguments based on what we
02:41 - want to display
02:43 - if we want to display the current time
02:45 - there is a few directives that we can
02:47 - pass
02:47 - in so let's say that we want a 12-hour
02:50 - clock as represented by
02:52 - a decimal number between 1 and 12 well
02:55 - we would pass in
02:56 - percent i as an argument if we want the
02:59 - minutes
03:00 - that would be right here percent m
03:03 - and if we want the seconds that is
03:04 - percent s
03:06 - so we're going to pass in these
03:08 - directives as if they are arguments
03:10 - so within this function we'll pass in
03:14 - those format specifiers or directives so
03:18 - i want
03:19 - percent i followed by
03:22 - percent m and percent
03:26 - s all right uh but these also have to be
03:29 - within quotes so don't forget that
03:31 - because
03:32 - i just did okay
03:35 - this will display the current time oh
03:38 - then we also have to
03:40 - update our time label so time label
03:44 - dot config text
03:48 - equals our time string because remember
03:50 - that this returns a string of text
03:54 - text equals time string so this will
03:57 - display the current time
03:59 - and right now it is six in the morning
04:01 - or so
04:02 - however we just get one long jumbled
04:05 - number
04:06 - so it would be a good idea if we
04:07 - separated some of these numbers
04:09 - so within our strf time function i'm
04:12 - just going to add some colons to
04:14 - separate these values
04:18 - and this will display the current time
04:20 - it is currently 6
04:21 - 46 in the morning let's add am or pm to
04:24 - the end of this
04:25 - so the directive for that is percent
04:28 - lowercase p
04:31 - 6 46 am now how do we update this label
04:35 - every one second to reflect the current
04:37 - time
04:38 - well that's a good question and i'm glad
04:39 - you asked it so we're going to use the
04:42 - time labels after function we pass in
04:46 - a delay and then a function that we want
04:48 - to call after that delay
04:50 - so let's say we want to call this
04:52 - function update
04:53 - every 1000 milliseconds or one second
04:57 - so we'll pass in the delay as an
04:59 - argument 1000 milliseconds
05:01 - and the function that we want to call
05:03 - and we're going to
05:04 - perform what is known as a recursive
05:06 - function we're going to call
05:08 - a function within itself so after 1000
05:12 - seconds we're going to call
05:13 - update again and it's going to repeat
05:15 - the process it's going to return the
05:17 - time
05:18 - and format that time and update
05:21 - our label with the new time so what ends
05:24 - up happening now
05:25 - is that our clock is going to update
05:28 - every
05:29 - 1000 milliseconds now let's add a few
05:32 - other labels
05:33 - let's say the day of the week i'm going
05:35 - to copy what we have here
05:37 - and let's rename this as day label
05:43 - but i probably don't want this to be the
05:45 - same size for the font let's say
05:47 - ink free because i like that font and a
05:50 - size of maybe 25
05:52 - and i'll get rid of the coloring
05:56 - it's the same process as before really
05:59 - so let's replace
06:02 - time string with day string
06:08 - the directive for strf time to display
06:12 - the day of the week
06:13 - is percent a
06:17 - and we're going to replace time label
06:20 - with
06:21 - day label text equals day string
06:26 - and this will display the day of the
06:28 - week and it is currently
06:29 - wednesday and if we want to display
06:34 - the current date we can create a label
06:37 - and we'll call this
06:38 - date label
06:42 - and i'll make the font slightly bigger
06:44 - maybe 30.
06:47 - we'll copy what we have for our day
06:49 - string
06:50 - and rename this as date string
06:57 - so we have a few options for the date i
06:59 - want to display
07:00 - the name of the month the day and then
07:03 - the year
07:04 - so that would be percent capital b
07:08 - percent lowercase d i'm going to add a
07:12 - comma to separate the day and the year
07:14 - and percent capital y
07:18 - and then i want to set the text of my
07:20 - date label to my
07:21 - date string so that this will now
07:24 - display
07:25 - the current date there's just one quick
07:27 - change that i think we should make
07:29 - right now we have three different labels
07:31 - a time label a day label and
07:33 - a date label and right now we're using
07:36 - the after function of the time label
07:38 - so since we have all of these different
07:40 - labels i think we should replace
07:42 - time label with our window because our
07:44 - window has an after function as well
07:47 - so that after 1000 milliseconds has
07:49 - passed
07:50 - we can update the time the day of the
07:52 - week
07:53 - and the date all right so that's the
07:55 - basics of creating a simple clock
07:57 - program in python if you want a copy of
08:00 - all this code
08:00 - i'll post all of this in the comments
08:02 - down below but yeah that's the basics of
08:04 - creating a clock in python
08:06 - hey you yeah i'm talking to you if you
08:09 - learn something new
08:10 - then you can help me help you in three
08:13 - easy steps
08:14 - by smashing that like button drop a
08:17 - comment down below
08:18 - and subscribe if you'd like to become a
08:20 - fellow bro
08:30 - [Music]
08:41 - you

Cleaned transcript:

hey what's going on everybody bro here hope you're doing well and in this video i'm going to teach you guys how we can create a clock program in python so sit back relax and enjoy the show if you find this video helpful please remember to like comment and subscribe your support will help keep this channel running all right my fellow bros in this video we're going to be creating a clock gui program so we'll need a few imports from tk enter import everything and from time import everything as well we'll need a window window equals tk followed by window.main loop and in this program we're going to be creating three separate labels one for the time another for the day of the week and another for the date so let's begin with just displaying the time and work on the day of the week and the date later so let's create a label for the time called time label equals label we're adding this to the window and let's set the font because we can i'm going to choose maybe ariel and then a size of 50 so that this is somewhat large i'm going to change the foreground color that is the font color and i will pick a hex value of green so that is zero zero f zero zero but feel free to pick whatever color you want and i'm also going to set the background color and you can pick a hex value or a color name i'm just going to say black and then i am going to pack this label time label dot pack now we're going to call a function and we'll call this update and we'll define what this does after every second has passed we will use a recursive function to keep on updating the time every one second or so so let's define what this function does def update there is a function within the time module called strf time which we can use to return the current time and format it however we want so we're going to actually place this within a string variable and we'll call this time string and this function is strf time i'm actually going to go to python's website just to give you an example of how this works here we are on python's website and this is the strf time function and this converts a tuple representing a time as returned by gm time or local time to a string as specified by the format arguments so when we call this function we can pass in directives as arguments based on what we want to display if we want to display the current time there is a few directives that we can pass in so let's say that we want a 12hour clock as represented by a decimal number between 1 and 12 well we would pass in percent i as an argument if we want the minutes that would be right here percent m and if we want the seconds that is percent s so we're going to pass in these directives as if they are arguments so within this function we'll pass in those format specifiers or directives so i want percent i followed by percent m and percent s all right uh but these also have to be within quotes so don't forget that because i just did okay this will display the current time oh then we also have to update our time label so time label dot config text equals our time string because remember that this returns a string of text text equals time string so this will display the current time and right now it is six in the morning or so however we just get one long jumbled number so it would be a good idea if we separated some of these numbers so within our strf time function i'm just going to add some colons to separate these values and this will display the current time it is currently 6 46 in the morning let's add am or pm to the end of this so the directive for that is percent lowercase p 6 46 am now how do we update this label every one second to reflect the current time well that's a good question and i'm glad you asked it so we're going to use the time labels after function we pass in a delay and then a function that we want to call after that delay so let's say we want to call this function update every 1000 milliseconds or one second so we'll pass in the delay as an argument 1000 milliseconds and the function that we want to call and we're going to perform what is known as a recursive function we're going to call a function within itself so after 1000 seconds we're going to call update again and it's going to repeat the process it's going to return the time and format that time and update our label with the new time so what ends up happening now is that our clock is going to update every 1000 milliseconds now let's add a few other labels let's say the day of the week i'm going to copy what we have here and let's rename this as day label but i probably don't want this to be the same size for the font let's say ink free because i like that font and a size of maybe 25 and i'll get rid of the coloring it's the same process as before really so let's replace time string with day string the directive for strf time to display the day of the week is percent a and we're going to replace time label with day label text equals day string and this will display the day of the week and it is currently wednesday and if we want to display the current date we can create a label and we'll call this date label and i'll make the font slightly bigger maybe 30. we'll copy what we have for our day string and rename this as date string so we have a few options for the date i want to display the name of the month the day and then the year so that would be percent capital b percent lowercase d i'm going to add a comma to separate the day and the year and percent capital y and then i want to set the text of my date label to my date string so that this will now display the current date there's just one quick change that i think we should make right now we have three different labels a time label a day label and a date label and right now we're using the after function of the time label so since we have all of these different labels i think we should replace time label with our window because our window has an after function as well so that after 1000 milliseconds has passed we can update the time the day of the week and the date all right so that's the basics of creating a simple clock program in python if you want a copy of all this code i'll post all of this in the comments down below but yeah that's the basics of creating a clock in python hey you yeah i'm talking to you if you learn something new then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
