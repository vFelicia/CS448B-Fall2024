With timestamps:

00:02 - hey yeah what's going on people so let's
00:04 - talk about arguments and parameters i
00:06 - have a function named birthday which we
00:08 - discussed in the previous video this
00:10 - will print two lines of text happy
00:13 - birthday dear x you are y years old what
00:16 - i would like to do is replace x with a
00:19 - user's name and y with a user's age so
00:22 - here's how we can write a program like
00:24 - that so let's begin by within the main
00:26 - function declaring two variables a
00:29 - character array named name
00:31 - and assign this your first name and an
00:34 - age and this will be of the int data
00:36 - type and let's say that this will be age
00:39 - and make up some age i like to think
00:40 - that i'm still 21 years old okay so if i
00:43 - try and display a name and age you think
00:46 - this would work right so i'm going to
00:48 - use a format specifier then s to display
00:51 - a string and then i will display our
00:54 - name variable and with y let's display
00:56 - our age so let's use d for our format
00:59 - specifier to display an integer and we
01:01 - will display age now here's the problem
01:04 - you can see that we have some red
01:05 - underlines name is undeclared as well as
01:08 - age here's the deal functions can't see
01:11 - inside of other functions our birthday
01:13 - function is unaware of our name and age
01:16 - variables one way in which we can make
01:19 - our birthday function aware of these is
01:21 - to pass them as arguments when we invoke
01:24 - the birthday function so based on the
01:26 - last topic on functions i mentioned that
01:28 - when we call a function we type the
01:30 - function's name followed by a set of
01:32 - parentheses i like to imagine the set of
01:34 - parentheses as a pair of telephones and
01:36 - these two functions are talking to each
01:38 - other our main function needs to make
01:41 - our birthday function aware of our name
01:43 - and edge variables so what we can do is
01:46 - pass these variables as arguments so
01:48 - between the parentheses we can add our
01:51 - variables separated with a comma so
01:54 - let's pass name and age so anything that
01:57 - you're passing to a function are known
02:00 - as arguments but we need a matching set
02:03 - of parameters within the function
02:05 - declaration so between this set of
02:07 - parentheses we will list our name and
02:10 - age variables but precede each with the
02:13 - data type that we're working with so we
02:15 - have name and age so age
02:18 - is an integer so precede the variable
02:21 - name with int
02:23 - and name is a character array so we're
02:25 - going to precede name with char
02:28 - and then add a set of straight brackets
02:30 - after so these are parameters parameters
02:33 - are what this function needs in order to
02:35 - be executed so this does work
02:38 - happy birthday dear bro you are 21 years
02:41 - old so with parameter setup you can only
02:44 - call this function if you pass a
02:46 - character array as well as an integer if
02:49 - i were to remove these arguments we can
02:51 - no longer call this birthday function
02:54 - error too few arguments to function
02:56 - birthday so when you call a function you
02:58 - can pass some arguments but you need a
03:01 - matching set of parameters and the names
03:03 - of these parameters don't necessarily
03:05 - have to be the same what's important is
03:07 - the order of the arguments and the data
03:10 - type so let's say name is x and age is y
03:13 - so let's replace that here as well
03:16 - and that would work too so yeah those
03:18 - are arguments and parameters arguments
03:21 - are what you're sending a function
03:23 - parameters are what a function expects
03:25 - when it's invoked and the benefits of
03:27 - arguments and parameters is that these
03:30 - functions can talk to each other because
03:32 - functions can't see inside of one
03:34 - another so if you have some variables
03:36 - within a function you can pass them to
03:38 - another function as arguments so yeah
03:40 - those are arguments and parameters if
03:43 - you would like a copy of this code i
03:44 - will post this in the comments section
03:46 - down below and well yeah those are
03:49 - arguments and parameters in c

Cleaned transcript:

hey yeah what's going on people so let's talk about arguments and parameters i have a function named birthday which we discussed in the previous video this will print two lines of text happy birthday dear x you are y years old what i would like to do is replace x with a user's name and y with a user's age so here's how we can write a program like that so let's begin by within the main function declaring two variables a character array named name and assign this your first name and an age and this will be of the int data type and let's say that this will be age and make up some age i like to think that i'm still 21 years old okay so if i try and display a name and age you think this would work right so i'm going to use a format specifier then s to display a string and then i will display our name variable and with y let's display our age so let's use d for our format specifier to display an integer and we will display age now here's the problem you can see that we have some red underlines name is undeclared as well as age here's the deal functions can't see inside of other functions our birthday function is unaware of our name and age variables one way in which we can make our birthday function aware of these is to pass them as arguments when we invoke the birthday function so based on the last topic on functions i mentioned that when we call a function we type the function's name followed by a set of parentheses i like to imagine the set of parentheses as a pair of telephones and these two functions are talking to each other our main function needs to make our birthday function aware of our name and edge variables so what we can do is pass these variables as arguments so between the parentheses we can add our variables separated with a comma so let's pass name and age so anything that you're passing to a function are known as arguments but we need a matching set of parameters within the function declaration so between this set of parentheses we will list our name and age variables but precede each with the data type that we're working with so we have name and age so age is an integer so precede the variable name with int and name is a character array so we're going to precede name with char and then add a set of straight brackets after so these are parameters parameters are what this function needs in order to be executed so this does work happy birthday dear bro you are 21 years old so with parameter setup you can only call this function if you pass a character array as well as an integer if i were to remove these arguments we can no longer call this birthday function error too few arguments to function birthday so when you call a function you can pass some arguments but you need a matching set of parameters and the names of these parameters don't necessarily have to be the same what's important is the order of the arguments and the data type so let's say name is x and age is y so let's replace that here as well and that would work too so yeah those are arguments and parameters arguments are what you're sending a function parameters are what a function expects when it's invoked and the benefits of arguments and parameters is that these functions can talk to each other because functions can't see inside of one another so if you have some variables within a function you can pass them to another function as arguments so yeah those are arguments and parameters if you would like a copy of this code i will post this in the comments section down below and well yeah those are arguments and parameters in c
