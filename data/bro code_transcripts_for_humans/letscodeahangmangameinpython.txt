With timestamps:

00:00 - what's up everybody so in today's video
00:02 - we're going to create a game of hangman
00:04 - using python I thought that this would
00:06 - be a good mini project for us while
00:08 - learning to code it is important to
00:10 - create small projects as you go along
00:12 - here's one that we can make together
00:14 - when creating a project I like to decare
00:16 - the various variables and data
00:17 - structures I'll need first followed by
00:19 - the functions I'll need for this game we
00:22 - will need a set of words one of these
00:26 - words is going to be chosen at random so
00:29 - let's create a few words I'll add some
00:32 - fruit apple
00:35 - orange
00:38 - banana coconut and one more
00:43 - pineapple using the random module let's
00:46 - import that import
00:48 - random using the random module we will
00:51 - pick one of these words at
00:54 - random we won't be able to see what it
00:57 - is but we can guess what the word is one
00:59 - letter a time once we reach six
01:01 - incorrect guesses we lose the game
01:04 - before each guess we will display some
01:07 - asky art which I will name as hangman
01:10 - art this will be a dictionary a
01:13 - dictionary where each key value pair
01:15 - contains a tuple so this is a
01:21 - dictionary of we'll have a key which
01:25 - will be a number and a tuple the key is
01:28 - going to represent the the incorrect
01:30 - number of guesses so we'll start at zero
01:33 - we will display a tupple which will
01:35 - contain some asky art then let me just
01:38 - copy
01:40 - this for one incorrect guess we'll
01:43 - display some different s
01:46 - art I'll just put each on a new line for
01:52 - readability so we're going to go all the
01:54 - way up to
01:55 - six once we hit six incorrect guesses we
01:59 - lose the
02:04 - game each key corresponds to the number
02:07 - of incorrect guesses once we reach six
02:10 - we lose the game each tupple that
02:12 - corresponds to the incorrect number of
02:14 - guesses we will display a certain image
02:17 - if you would like feel free to look in
02:18 - the description of this video if you
02:20 - would like to copy this to save you some
02:22 - time each topple will consist of three
02:24 - rows three
02:27 - strings for no incorrect guesses where
02:30 - incorrect guesses is zero we will
02:33 - display nothing we can't see our hangman
02:37 - person for one incorrect guess we will
02:40 - display their
02:42 - head for two incorrect guesses we will
02:45 - display their head and the main torso of
02:47 - their body which will represent with a
02:49 - vertical
02:51 - bar let me copy this
02:54 - one for three incorrect guesses we will
02:57 - display their left arm represented with
03:00 - the forward
03:02 - slash with four incorrect guesses we
03:04 - will display their right
03:07 - arm however if you use a backslash
03:09 - that's an escape sequence within a
03:11 - string you have to use double backs
03:13 - slashes to literally print a back
03:16 - slash so with five incorrect guesses we
03:19 - will display their left leg of the
03:24 - person then once we reach six incorrect
03:26 - guesses we display the full person
03:29 - that's when we lose of the game when we
03:30 - see the entire person that's some asky
03:33 - art that we can use so let's test it
03:36 - just to be sure that everything is
03:38 - working
03:39 - fine I will
03:41 - print my hangman
03:44 - art at the Key of zero to represent no
03:48 - incorrect
03:49 - guesses okay so when we display this
03:52 - person we're going to have to use some
03:53 - sort of loop for every let's say line in
03:58 - hangman art
04:01 - at index of zero for zero incorrect
04:05 - guesses I will
04:07 - print each
04:11 - line with no incorrect guesses we don't
04:13 - display anything that's
04:15 - correct we can't see the person and
04:18 - that's
04:20 - okay so with one incorrect guess display
04:23 - the dictionary where the key is one that
04:27 - displays the person's head
04:31 - two two would be the main torso of their
04:35 - body
04:37 - three their left
04:39 - arm four their right arm five their left
04:45 - leg and six their right leg once we see
04:49 - the entire person we lose the game so we
04:53 - can delete these two lines of code we no
04:55 - longer need them we know that our
04:57 - dictionary is
04:58 - working I'm going to zoom out a little
05:00 - bit following our dictionary we'll
05:02 - declare the various functions we'll need
05:04 - throughout this program we will Define a
05:06 - function to
05:09 - display man our hangman there will be
05:12 - one parameter wrong
05:17 - guesses and then for the time being I'll
05:19 - write pass we'll fill in this function
05:21 - later when we display our man we need to
05:25 - know the number of incorrect guesses to
05:27 - display the Right image
05:32 - we have a display man function and a
05:36 - display hint
05:39 - function we will have a string of
05:44 - hint then I'll write pass for now our
05:47 - hint is going to be a list a list of
05:50 - underscore characters for each letter
05:52 - that we guess right we'll flip one of
05:55 - those underscores to be a letter if that
05:57 - letter is correct I'll create a function
06:00 - of display
06:03 - answer within this function we will
06:05 - display the correct answer either when
06:08 - we lose the game or win the game and I
06:11 - will write pass we will create a
06:13 - function of main to contain the main
06:16 - body of code of our
06:18 - program again I'll write pass for
06:21 - now I'll add the following if statement
06:25 - if Dunder name is equal to a string of
06:30 - Dunder
06:31 - main if we are running this file
06:33 - directly I would like to call the main
06:35 - function to start the program all right
06:38 - let me zoom out this will be the main
06:40 - skeletal structure of our
06:42 - program import the random module we have
06:45 - our set of words we'll be importing more
06:47 - from a separate file near the end of
06:49 - this video we have a dictionary where
06:51 - the key is a number to represent the
06:53 - number of incorrect guesses and a tuple
06:56 - to display some asky art we have four
06:59 - functions display our man display the
07:01 - hint display the answer and the main
07:03 - function to contain the main body of
07:05 - code all right let's work within our
07:08 - main
07:09 - function within our main function we
07:12 - will create a variable of answer what is
07:15 - the correct answer that we have to guess
07:17 - I will access the random module call the
07:20 - method of choice then pass in our set of
07:24 - words one of these words will be chosen
07:27 - at
07:28 - random let's test that I will print our
07:32 - answer just
07:34 - temporarily we should get a random word
07:37 - apple apple pineapple Apple I guess it
07:41 - really likes apple for some reason there
07:43 - we go we have orange we are choosing a
07:45 - word at
07:47 - random we no longer need this print
07:49 - statement looks like everything is
07:51 - working fine now we'll display our
07:55 - hint our hint is going to be a list of
07:58 - underscore characters
08:00 - I need the number of underscore
08:02 - characters to equal the number of
08:04 - characters in one of these words that is
08:07 - chosen at
08:09 - random so I could multiply my list by
08:14 - the length using the length function of
08:16 - my
08:17 - answer so let's print our
08:21 - hint to see what we're working
08:24 - with with my selected word we have how
08:28 - many underscores one 2 3 4 5 6 7 okay we
08:33 - have a different word 1 2 3 4
08:36 - 5 that is probably Apple it has five
08:41 - characters all right so that's our hint
08:43 - it's a list of underscore characters
08:46 - when we guess a letter if it's correct
08:48 - we'll fill in one of the underscores
08:50 - with that correct
08:52 - character we need to keep track of the
08:54 - number of wrong guesses we'll create a
08:57 - variable of wrong guesses set that equal
09:00 - to be zero when we start the game we're
09:03 - going to keep track of all of the
09:04 - incorrect guesses that we've made we
09:06 - will create a set of
09:09 - guest
09:11 - letters for an empty set we'll call the
09:13 - set function normally in Python you
09:16 - can't create an empty set with just a
09:18 - set of parenthesis we have to use the
09:19 - set function then I will create a
09:22 - Boolean variable of is
09:25 - running set that to be true while our
09:28 - game is running continue playing once we
09:30 - lose or win the game we will switch this
09:33 - to be false to exit the game we will
09:36 - keep this as true when we initially run
09:38 - this program after we declare the
09:41 - variables we'll need within the main
09:43 - function we'll create a loop a while
09:46 - loop while is running we don't need to
09:49 - say while is running is equal to true we
09:53 - don't necessarily need to create that
09:54 - comparison we can just say while is
09:57 - running while this is true continue
09:59 - doing some code so what would we like to
10:02 - do let's call the function of display
10:06 - man but we have to pass in the wrong
10:08 - number of
10:11 - guesses call our function of display man
10:15 - pass in our variable of wrong guesses
10:17 - when we begin the game we would like to
10:20 - display one of these
10:21 - images then we will display our hint
10:24 - then we'll call the function to display
10:26 - our hint
10:29 - pass in our hint that was the list of
10:32 - underscore characters to represent the
10:35 - answer we have to guess we will create a
10:37 - variable of guess and accept some user
10:41 - input we'll prompt the user to enter a
10:46 - letter just in case a user types in a
10:48 - character that's
10:50 - uppercase let's add the lower method to
10:53 - make it
10:54 - lowercase so let's fill in our display
10:57 - man function there's not a lot to write
11:00 - here when we call this function we need
11:03 - to display one of these images based on
11:06 - the wrong number of guesses one of these
11:10 - Keys within the display man function
11:13 - we'll create a for Loop for every line
11:17 - in my hangman art this
11:22 - dictionary at the Key of wrong guesses
11:26 - this will be a number 0 through 6
11:30 - depending on what this number is I will
11:33 - print each
11:35 - line print each line of that
11:39 - Tuple let's see what we're working with
11:41 - we'll do a test
11:43 - run so we are displaying no person we
11:47 - can't see them for testing purposes I'm
11:49 - going to change wrong guesses to be one
11:52 - we're displaying their head
11:54 - two displays their body three
11:59 - displays their left arm
12:02 - four is their right
12:05 - arm five their left leg and
12:10 - six is their full body that's when we
12:14 - lose now you don't necessarily need to
12:16 - do this but I'll add some text
12:19 - decoration before and
12:21 - after I'll add just a bunch of asterisks
12:24 - before and
12:27 - after I think that looks better but you
12:30 - do you let's be sure to set wrong
12:32 - guesses back to
12:34 - zero after we display our hangman we
12:37 - have to display the hint what's the clue
12:39 - we're trying to solve so we will call
12:41 - our display hint function and pass in
12:44 - our list of
12:46 - hint So within the display hint function
12:49 - let me zoom out I will print the
12:52 - following between each character within
12:54 - our hint each underscore we will display
12:57 - a space character
13:01 - strings have a built-in join method
13:03 - we'll call that then pass in our hint
13:06 - for each character within our hint join
13:09 - it by an empty
13:11 - space so now when we do a test
13:15 - run we are displaying an underscore to
13:18 - represent each
13:19 - character each is separated with the
13:22 - space while we're here we'll fill in the
13:25 - display answer function we just have to
13:27 - copy this line of code from from display
13:29 - hint replace hint with answer and that's
13:32 - all we need for the display answer
13:34 - function so let me test that real quick
13:37 - after displaying our hint temporarily I
13:40 - will display our answer just to be sure
13:42 - that it's
13:44 - working yep there's our hint and there's
13:48 - our answer that we have to guess okay
13:51 - let's delete this line of code we don't
13:53 - want to display the
13:54 - answer I was just testing it so the user
13:57 - is going to be able to type in letter to
13:59 - guess such as a for example once we
14:03 - guess a letter if that letter is found
14:06 - within the hint if it's one of these
14:08 - characters we need to switch that
14:10 - underscore to be one of those characters
14:13 - so we'll write the following if
14:15 - statement if our
14:17 - guess is in our
14:21 - answer in is a membership operator if
14:25 - this letter is found within our string
14:27 - of answer we're going to create a Loop
14:29 - we will create a loop that will iterate
14:31 - once for each character within the
14:34 - answer but we don't know the length of
14:36 - the answer because python will choose it
14:38 - at random so let's say for every index
14:42 - we can shorten this to I for I in
14:47 - range the length of my
14:52 - answer let's say the word is Apple the
14:56 - length of the word Apple has five
14:57 - characters this would would return five
15:00 - for I in range five then we will iterate
15:03 - five times we'll iterate this Loop once
15:07 - for the number of characters within my
15:09 - answer we'll check during each
15:12 - iteration if our answer at index of I
15:17 - during the first iteration that will be
15:19 - zero then the second iteration it will
15:21 - be one then two so on and so forth
15:24 - strings are iterable if our answer at
15:27 - index of I is equal to our guess if
15:30 - there's a match if we guess the correct
15:33 - letter then we're going to take our
15:38 - hint at that given index of I and set
15:43 - that equal to be our guess looks like
15:46 - this if statement is outside of the
15:47 - while loop I'm just going to indent it
15:49 - by one somewhere within
15:52 - it okay let's do a test
15:55 - run I'm going to guess the letter A
16:00 - yes we have 1 a let's do something
16:02 - that's probably not in
16:04 - here
16:06 - Q okay so there were no matches we don't
16:09 - end up doing
16:10 - anything so what is this word
16:14 - probably this should be the word
16:16 - orange so let's guess
16:19 - o
16:21 - r
16:23 - n e g all right we know that it works
16:29 - what if somebody types in some input
16:31 - that's not valid before checking if that
16:33 - guess is correct we'll do some input
16:36 - validation what if the user types in a
16:38 - whole word like
16:41 - pizza we want the user to only guess a
16:44 - single character not many
16:47 - characters We'll add the following line
16:50 - if the length of Our Guest that we type
16:54 - in does not equal
16:57 - one then I will print the following
17:01 - message let's say invalid
17:06 - input then we will use the keyword of
17:09 - continue to skip this
17:11 - Loop
17:14 - continue okay enter a letter I will type
17:17 - the word
17:18 - Pizza we get this message of invalid
17:21 - input we skip that Loops current
17:23 - iteration I will guess a there are two
17:27 - A's I will type banana and again we get
17:30 - invalid input we have to guess one
17:32 - letter at a time what if somebody types
17:35 - in a number like one we would like to
17:38 - prevent
17:42 - that so within this if statement I would
17:45 - like to execute this code if our guess
17:49 - is not an alphabetical character I can
17:51 - add the
17:52 - following or not take our guess dot use
17:58 - the the is Alpha
18:01 - method if our guess is an alphabetical
18:04 - character this returns true if it's not
18:07 - an alphabetical character it's false so
18:11 - we are checking if this is not an
18:13 - alphabetical character we execute this
18:16 - code let's try this again I will type in
18:20 - one invalid
18:22 - input
18:25 - 42069 invalid
18:27 - input let's say we guessed the letter A
18:31 - what if we type in a letter we have
18:32 - already guessed I will guess a again if
18:36 - they already guessed a letter I don't
18:38 - want that to count we'll skip the
18:40 - current Loop
18:41 - iteration I'll add another if
18:45 - statement if our
18:48 - guess is
18:50 - in our set of guest
18:54 - letters then I will print the following
18:59 - I'll use an F
19:00 - string our guess
19:04 - is
19:05 - already
19:09 - guest oh one thing I'm forgetting once
19:12 - we check that our guest is not within
19:14 - our guest characters we'll take our
19:16 - guest letters this is a set add the
19:21 - guess we're keeping track of the letters
19:24 - we have already
19:26 - guessed so I will type let's guess a we
19:30 - have 1 a if I were to guess a again we
19:34 - get that message of a is already
19:37 - guessed and then be sure to add continue
19:41 - to skip the current Loop
19:43 - iteration all right now going down to
19:45 - this if statement if guess is in our
19:49 - answer if we guess a character that's
19:51 - incorrect we will take our variable of
19:55 - wrong guesses incremented by one wrong
19:59 - guesses plus equals 1 let's do a test
20:04 - run I will guess
20:06 - a there is an a what about Q There is no
20:11 - Q we display our dictionary where the
20:13 - key is one we display that asky
20:16 - art R is there an R yes there is an
20:20 - R this is probably
20:25 - orange I would like to be sure we
20:27 - display the entire person I will guess
20:30 - some wrong
20:35 - characters we know that that works now
20:38 - we need a win condition if we guess all
20:40 - of the correct characters and display
20:41 - the entire word we'll work on that
20:44 - next if there are no underscore
20:48 - characters not in our
20:52 - hint this will be true if there are no
20:55 - underscore characters in our hint if
20:59 - underscores not in
21:01 - hint we'll call our function of display
21:04 - man pass in the wrong number of
21:08 - guesses call the function of display
21:13 - answer pass in our
21:17 - answer we will
21:19 - print the text of U Win then set our
21:24 - Boolean variable of is running equal to
21:27 - be false
21:30 - let's win this
21:31 - time I already know that this word is
21:33 - probably
21:37 - pineapple let's guess something
21:45 - incorrect there we go we have two wrong
21:47 - guesses but we have correctly guessed
21:50 - the word pineapple you win and we exit
21:53 - the program what if we lose I'll add the
21:56 - following if statement else if our
22:00 - variable of wrong
22:02 - guesses is greater than or equal so the
22:06 - length of our hangman art is a total of
22:10 - seven there's seven total
22:15 - keys but once we hit six we lose the
22:20 - game with this LF statement if the
22:24 - length of our hangman
22:27 - art the the length of our hman art is
22:29 - going to be seven so we are going to
22:32 - subtract 1 for six for a total of
22:35 - six once our wrong guesses is greater
22:39 - than or equal to six that means we lose
22:41 - the game we will call the display man
22:44 - function pass in the wrong number of
22:47 - guesses display what the correct answer
22:50 - should have been display answer pass in
22:53 - our
22:54 - answer we will
22:57 - print you
23:00 - lose then take our Boolean variable of
23:03 - is running set that to be
23:09 - false I'll guess incorrect
23:16 - letters there the word was coconut we
23:19 - have six incorrect guesses we display
23:21 - the entire hangman the correct answer
23:23 - was coconut you
23:25 - lose if you would like to import a
23:28 - larger variety of words we could create
23:30 - a separate python file for that so
23:32 - within our project folder we will create
23:34 - a new python file I will name this
23:38 - python file
23:40 - words list this will be a python
23:44 - file let's take our set of words cut
23:49 - it I'll add a note that these are words
23:53 - for Hangman
23:57 - game Word words will be a set I
24:00 - recommend looking online for a very
24:02 - large set of words that we can use then
24:05 - just copy and paste them within here
24:07 - while browsing online I found an
24:08 - extensive list of animals that I can
24:11 - use so here are all the possible words
24:14 - for my
24:15 - game so from my main python file I have
24:19 - to import this module of words
24:24 - list from the module of words list
24:29 - import
24:30 - words and now I have a greater variety
24:32 - of words I can use let's run this one
24:35 - last time this word has four letters
24:38 - I'll guess the vowels there's an a no E
24:44 - I O there is an
24:47 - O is it
24:49 - Goat
24:51 - nope
24:53 - t r
24:56 - bore all right the word was bore you win
25:00 - all right everybody so that is a game of
25:02 - hangman that we can create using python

Cleaned transcript:

what's up everybody so in today's video we're going to create a game of hangman using python I thought that this would be a good mini project for us while learning to code it is important to create small projects as you go along here's one that we can make together when creating a project I like to decare the various variables and data structures I'll need first followed by the functions I'll need for this game we will need a set of words one of these words is going to be chosen at random so let's create a few words I'll add some fruit apple orange banana coconut and one more pineapple using the random module let's import that import random using the random module we will pick one of these words at random we won't be able to see what it is but we can guess what the word is one letter a time once we reach six incorrect guesses we lose the game before each guess we will display some asky art which I will name as hangman art this will be a dictionary a dictionary where each key value pair contains a tuple so this is a dictionary of we'll have a key which will be a number and a tuple the key is going to represent the the incorrect number of guesses so we'll start at zero we will display a tupple which will contain some asky art then let me just copy this for one incorrect guess we'll display some different s art I'll just put each on a new line for readability so we're going to go all the way up to six once we hit six incorrect guesses we lose the game each key corresponds to the number of incorrect guesses once we reach six we lose the game each tupple that corresponds to the incorrect number of guesses we will display a certain image if you would like feel free to look in the description of this video if you would like to copy this to save you some time each topple will consist of three rows three strings for no incorrect guesses where incorrect guesses is zero we will display nothing we can't see our hangman person for one incorrect guess we will display their head for two incorrect guesses we will display their head and the main torso of their body which will represent with a vertical bar let me copy this one for three incorrect guesses we will display their left arm represented with the forward slash with four incorrect guesses we will display their right arm however if you use a backslash that's an escape sequence within a string you have to use double backs slashes to literally print a back slash so with five incorrect guesses we will display their left leg of the person then once we reach six incorrect guesses we display the full person that's when we lose of the game when we see the entire person that's some asky art that we can use so let's test it just to be sure that everything is working fine I will print my hangman art at the Key of zero to represent no incorrect guesses okay so when we display this person we're going to have to use some sort of loop for every let's say line in hangman art at index of zero for zero incorrect guesses I will print each line with no incorrect guesses we don't display anything that's correct we can't see the person and that's okay so with one incorrect guess display the dictionary where the key is one that displays the person's head two two would be the main torso of their body three their left arm four their right arm five their left leg and six their right leg once we see the entire person we lose the game so we can delete these two lines of code we no longer need them we know that our dictionary is working I'm going to zoom out a little bit following our dictionary we'll declare the various functions we'll need throughout this program we will Define a function to display man our hangman there will be one parameter wrong guesses and then for the time being I'll write pass we'll fill in this function later when we display our man we need to know the number of incorrect guesses to display the Right image we have a display man function and a display hint function we will have a string of hint then I'll write pass for now our hint is going to be a list a list of underscore characters for each letter that we guess right we'll flip one of those underscores to be a letter if that letter is correct I'll create a function of display answer within this function we will display the correct answer either when we lose the game or win the game and I will write pass we will create a function of main to contain the main body of code of our program again I'll write pass for now I'll add the following if statement if Dunder name is equal to a string of Dunder main if we are running this file directly I would like to call the main function to start the program all right let me zoom out this will be the main skeletal structure of our program import the random module we have our set of words we'll be importing more from a separate file near the end of this video we have a dictionary where the key is a number to represent the number of incorrect guesses and a tuple to display some asky art we have four functions display our man display the hint display the answer and the main function to contain the main body of code all right let's work within our main function within our main function we will create a variable of answer what is the correct answer that we have to guess I will access the random module call the method of choice then pass in our set of words one of these words will be chosen at random let's test that I will print our answer just temporarily we should get a random word apple apple pineapple Apple I guess it really likes apple for some reason there we go we have orange we are choosing a word at random we no longer need this print statement looks like everything is working fine now we'll display our hint our hint is going to be a list of underscore characters I need the number of underscore characters to equal the number of characters in one of these words that is chosen at random so I could multiply my list by the length using the length function of my answer so let's print our hint to see what we're working with with my selected word we have how many underscores one 2 3 4 5 6 7 okay we have a different word 1 2 3 4 5 that is probably Apple it has five characters all right so that's our hint it's a list of underscore characters when we guess a letter if it's correct we'll fill in one of the underscores with that correct character we need to keep track of the number of wrong guesses we'll create a variable of wrong guesses set that equal to be zero when we start the game we're going to keep track of all of the incorrect guesses that we've made we will create a set of guest letters for an empty set we'll call the set function normally in Python you can't create an empty set with just a set of parenthesis we have to use the set function then I will create a Boolean variable of is running set that to be true while our game is running continue playing once we lose or win the game we will switch this to be false to exit the game we will keep this as true when we initially run this program after we declare the variables we'll need within the main function we'll create a loop a while loop while is running we don't need to say while is running is equal to true we don't necessarily need to create that comparison we can just say while is running while this is true continue doing some code so what would we like to do let's call the function of display man but we have to pass in the wrong number of guesses call our function of display man pass in our variable of wrong guesses when we begin the game we would like to display one of these images then we will display our hint then we'll call the function to display our hint pass in our hint that was the list of underscore characters to represent the answer we have to guess we will create a variable of guess and accept some user input we'll prompt the user to enter a letter just in case a user types in a character that's uppercase let's add the lower method to make it lowercase so let's fill in our display man function there's not a lot to write here when we call this function we need to display one of these images based on the wrong number of guesses one of these Keys within the display man function we'll create a for Loop for every line in my hangman art this dictionary at the Key of wrong guesses this will be a number 0 through 6 depending on what this number is I will print each line print each line of that Tuple let's see what we're working with we'll do a test run so we are displaying no person we can't see them for testing purposes I'm going to change wrong guesses to be one we're displaying their head two displays their body three displays their left arm four is their right arm five their left leg and six is their full body that's when we lose now you don't necessarily need to do this but I'll add some text decoration before and after I'll add just a bunch of asterisks before and after I think that looks better but you do you let's be sure to set wrong guesses back to zero after we display our hangman we have to display the hint what's the clue we're trying to solve so we will call our display hint function and pass in our list of hint So within the display hint function let me zoom out I will print the following between each character within our hint each underscore we will display a space character strings have a builtin join method we'll call that then pass in our hint for each character within our hint join it by an empty space so now when we do a test run we are displaying an underscore to represent each character each is separated with the space while we're here we'll fill in the display answer function we just have to copy this line of code from from display hint replace hint with answer and that's all we need for the display answer function so let me test that real quick after displaying our hint temporarily I will display our answer just to be sure that it's working yep there's our hint and there's our answer that we have to guess okay let's delete this line of code we don't want to display the answer I was just testing it so the user is going to be able to type in letter to guess such as a for example once we guess a letter if that letter is found within the hint if it's one of these characters we need to switch that underscore to be one of those characters so we'll write the following if statement if our guess is in our answer in is a membership operator if this letter is found within our string of answer we're going to create a Loop we will create a loop that will iterate once for each character within the answer but we don't know the length of the answer because python will choose it at random so let's say for every index we can shorten this to I for I in range the length of my answer let's say the word is Apple the length of the word Apple has five characters this would would return five for I in range five then we will iterate five times we'll iterate this Loop once for the number of characters within my answer we'll check during each iteration if our answer at index of I during the first iteration that will be zero then the second iteration it will be one then two so on and so forth strings are iterable if our answer at index of I is equal to our guess if there's a match if we guess the correct letter then we're going to take our hint at that given index of I and set that equal to be our guess looks like this if statement is outside of the while loop I'm just going to indent it by one somewhere within it okay let's do a test run I'm going to guess the letter A yes we have 1 a let's do something that's probably not in here Q okay so there were no matches we don't end up doing anything so what is this word probably this should be the word orange so let's guess o r n e g all right we know that it works what if somebody types in some input that's not valid before checking if that guess is correct we'll do some input validation what if the user types in a whole word like pizza we want the user to only guess a single character not many characters We'll add the following line if the length of Our Guest that we type in does not equal one then I will print the following message let's say invalid input then we will use the keyword of continue to skip this Loop continue okay enter a letter I will type the word Pizza we get this message of invalid input we skip that Loops current iteration I will guess a there are two A's I will type banana and again we get invalid input we have to guess one letter at a time what if somebody types in a number like one we would like to prevent that so within this if statement I would like to execute this code if our guess is not an alphabetical character I can add the following or not take our guess dot use the the is Alpha method if our guess is an alphabetical character this returns true if it's not an alphabetical character it's false so we are checking if this is not an alphabetical character we execute this code let's try this again I will type in one invalid input 42069 invalid input let's say we guessed the letter A what if we type in a letter we have already guessed I will guess a again if they already guessed a letter I don't want that to count we'll skip the current Loop iteration I'll add another if statement if our guess is in our set of guest letters then I will print the following I'll use an F string our guess is already guest oh one thing I'm forgetting once we check that our guest is not within our guest characters we'll take our guest letters this is a set add the guess we're keeping track of the letters we have already guessed so I will type let's guess a we have 1 a if I were to guess a again we get that message of a is already guessed and then be sure to add continue to skip the current Loop iteration all right now going down to this if statement if guess is in our answer if we guess a character that's incorrect we will take our variable of wrong guesses incremented by one wrong guesses plus equals 1 let's do a test run I will guess a there is an a what about Q There is no Q we display our dictionary where the key is one we display that asky art R is there an R yes there is an R this is probably orange I would like to be sure we display the entire person I will guess some wrong characters we know that that works now we need a win condition if we guess all of the correct characters and display the entire word we'll work on that next if there are no underscore characters not in our hint this will be true if there are no underscore characters in our hint if underscores not in hint we'll call our function of display man pass in the wrong number of guesses call the function of display answer pass in our answer we will print the text of U Win then set our Boolean variable of is running equal to be false let's win this time I already know that this word is probably pineapple let's guess something incorrect there we go we have two wrong guesses but we have correctly guessed the word pineapple you win and we exit the program what if we lose I'll add the following if statement else if our variable of wrong guesses is greater than or equal so the length of our hangman art is a total of seven there's seven total keys but once we hit six we lose the game with this LF statement if the length of our hangman art the the length of our hman art is going to be seven so we are going to subtract 1 for six for a total of six once our wrong guesses is greater than or equal to six that means we lose the game we will call the display man function pass in the wrong number of guesses display what the correct answer should have been display answer pass in our answer we will print you lose then take our Boolean variable of is running set that to be false I'll guess incorrect letters there the word was coconut we have six incorrect guesses we display the entire hangman the correct answer was coconut you lose if you would like to import a larger variety of words we could create a separate python file for that so within our project folder we will create a new python file I will name this python file words list this will be a python file let's take our set of words cut it I'll add a note that these are words for Hangman game Word words will be a set I recommend looking online for a very large set of words that we can use then just copy and paste them within here while browsing online I found an extensive list of animals that I can use so here are all the possible words for my game so from my main python file I have to import this module of words list from the module of words list import words and now I have a greater variety of words I can use let's run this one last time this word has four letters I'll guess the vowels there's an a no E I O there is an O is it Goat nope t r bore all right the word was bore you win all right everybody so that is a game of hangman that we can create using python
