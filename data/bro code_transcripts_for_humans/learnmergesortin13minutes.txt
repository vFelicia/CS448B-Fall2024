With timestamps:

00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well and in this
00:03 - video we're going to discuss
00:04 - the merge sword algorithm in computer
00:07 - science so
00:08 - sit back relax and enjoy the show
00:12 - all right what's going on people merge
00:14 - sword merge sword is
00:16 - a divide and conquer algorithm basically
00:18 - what we do
00:19 - is that we will pass an array as an
00:21 - argument to a
00:22 - merge sort function this function is
00:24 - going to divide our array in two
00:27 - we have a left array and a right array
00:29 - these will be sub-arrays and we will
00:31 - copy the elements over
00:32 - from our original array to our two new
00:35 - sub-arrays
00:36 - and merge sword is a recursive function
00:39 - so at the end of merge sort we will call
00:41 - merge sword again and pass in our
00:43 - subarrays that we create
00:45 - and again the merge sort function is
00:47 - going to divide our arrays in two
00:49 - by creating a two new sub arrays and
00:51 - then copy the elements over
00:52 - and we will stop when our arrays only
00:55 - have a size of one
00:57 - and that's where sorting then merging
00:59 - come in and with the process of merging
01:01 - and sorting we will create a
01:03 - second helper function named merge merge
01:06 - will accept a total of three arguments
01:08 - our left subarray our right subarray and
01:11 - the original subarray in which
01:13 - these elements came from merge is going
01:15 - to take these elements
01:16 - and put them back into their original
01:18 - array which they came from
01:20 - in order and we will do the same thing
01:22 - with the next grouping of arrays
01:24 - until all of these elements are merged
01:26 - back into their original array in which
01:28 - they came from
01:29 - all in order now in practice when we do
01:32 - execute this merge sort function
01:34 - instead of tackling all of these
01:36 - sub-arrays like one
01:37 - layer at a time we will tackle them by
01:40 - one branch at a time
01:42 - so it's going to look a little something
01:43 - like this where we will
01:45 - start with the leftmost branch and then
01:47 - work our way towards the right so i'll
01:49 - speed up the footage and just give you a
01:51 - rundown of how this works in practice
01:54 - [Music]
02:39 - [Music]
03:03 - you
03:05 - [Music]
03:20 - [Music]
03:31 - [Music]
03:42 - [Music]
03:50 - [Music]
03:58 - me
04:00 - [Music]
04:11 - and that ladies and gentlemen is the
04:13 - merge sort algorithm
04:14 - the merge sort algorithm has a runtime
04:17 - complexity
04:18 - of big o of n log n it runs in
04:21 - quasi-linear time along with quick sort
04:23 - and heap sort which we still need to
04:25 - talk about
04:26 - so when working with large data sets
04:28 - merge sort
04:29 - is faster than insertion sort selection
04:31 - sort and bubble sort
04:33 - but on the other hand the emerge sword
04:35 - algorithm uses more space
04:37 - than a bubble sword selection sword and
04:39 - insertion sort because we need to create
04:41 - new subarrays to store elements
04:43 - whereas bubble sort selection sword and
04:45 - insertion sort can sort in place
04:47 - so they use a constant amount of space
04:49 - to do their sorting
04:50 - unlike with merge sort now let's move on
04:53 - to the hands-on portion of this video
04:55 - and create a merge sort function in code
04:57 - now
04:58 - all right well let's get started we'll
05:00 - need an array to work with
05:01 - make up some numbers make sure that
05:03 - they're not in order as well as a for
05:05 - loop to iterate over the elements of our
05:07 - array
05:08 - so currently our array is not in order
05:10 - but that's going to change soon
05:11 - let's invoke a merge sort method that we
05:14 - still need to declare
05:15 - this is going to be a recursive method
05:17 - and we will pass in an array
05:19 - and each time that we invoke this method
05:22 - we will split our
05:23 - array in half create two sub-arrays and
05:25 - then copy the elements over
05:27 - so let's create and declare this method
05:30 - private static void merge sort and we'll
05:33 - need a helper method
05:34 - too and we'll name this merge a helper
05:37 - method is just a method that helps
05:39 - another method basically
05:40 - so private static void merge
05:45 - and there's going to be three parameters
05:47 - within our merge method
05:49 - int left array
05:53 - int right array
05:57 - and int array
06:01 - remember that these are arrays of
06:02 - integers the first thing that we're
06:04 - going to do within our merge
06:06 - sort method is that we need to get the
06:07 - length of our array
06:09 - so let's cache that within a local
06:11 - variable named length
06:14 - int length equals array.length
06:19 - and we'll need a base case too when do
06:20 - we stop recursion
06:22 - if length
06:25 - is less than or equal to one then we
06:28 - shall return
06:30 - and this is our base case basically with
06:32 - this merge sort method we're dividing
06:34 - our ray in two each time if the length
06:36 - is one there's no longer a need to
06:38 - divide our array further
06:40 - and we'll need to find the middle
06:42 - position of our ray
06:45 - int middle equals length divided by two
06:50 - and we'll create two new sub arrays
06:53 - int array left array
06:57 - equals new integer array and
07:00 - the size is middle and we'll create a
07:03 - right array
07:05 - integer array right array the size
07:08 - is length minus middle
07:11 - okay now we need to copy the elements of
07:14 - our original array to our left and right
07:16 - arrays
07:17 - so we'll need two indices int i
07:20 - equals zero this will be for
07:23 - our left array
07:26 - and int j equals
07:30 - zero and this is for our right array
07:37 - then let's create a for loop we don't
07:40 - necessarily need to declare a new
07:42 - index here we can just use i so i'm
07:44 - going to add a semicolon
07:46 - our condition is i is less than
07:49 - length then increment
07:53 - i by 1 during each iteration so our
07:55 - condition
07:56 - is with an if statement if i is less
08:00 - than
08:00 - middle then we will copy an element
08:04 - from our original array to our left
08:06 - array
08:08 - left array at index of i
08:12 - equals array at index of i
08:18 - else we will copy that element
08:21 - to our right array
08:24 - else right array at index
08:28 - of j remember that this index is for the
08:31 - right array
08:32 - equals array at index of i
08:35 - then let's increment j by one
08:39 - okay this is where recursion comes in so
08:41 - outside of this for loop
08:42 - we will call merge sword again
08:45 - and pass in our left array
08:49 - so we'll consistently divide our array
08:51 - in half
08:52 - we'll begin by dividing the left array
08:54 - then the right array
08:56 - with a separate recursive call so left
08:58 - array
08:59 - then right array and then call merge
09:03 - so with merge we have to pass in our
09:04 - left array right array
09:06 - and our original array because we'll put
09:08 - the elements back in order
09:10 - left array right array and our original
09:13 - array that we
09:14 - received as an argument so that is it
09:17 - for the
09:17 - merge sort function let's work on merge
09:20 - next first thing that we're going to do
09:21 - within the merge method is cache
09:23 - the size of our left array and right
09:25 - array within some local variables
09:27 - int left size equals
09:30 - array dot length divided by 2
09:35 - and right size equals
09:38 - array dot length minus
09:41 - left size and then we'll need
09:45 - three indices int i equals zero
09:49 - this is for our original array to keep
09:51 - track of the position
09:53 - l will be in charge of our left array
09:56 - and
09:57 - r will be in charge of our right array
09:59 - and
10:00 - these will be the indices that we're
10:01 - using
10:03 - okay the next part we're going to check
10:06 - the conditions
10:07 - for merging and we can do this with a
10:11 - while loop
10:13 - so our condition is going to be while l
10:16 - is less than left size
10:20 - and r is less than right
10:23 - size so basically while there's elements
10:26 - within
10:27 - both our left array and right array we
10:30 - will continue adding elements to our
10:32 - original array
10:33 - and we'll need to check to see which
10:35 - element is smaller
10:37 - if left array at
10:40 - index of l
10:44 - is less than right array
10:47 - at index of r then we will copy the
10:51 - element
10:51 - from our left array to our original
10:53 - array so we're basically comparing the
10:55 - number on the left to the right
10:57 - and adding whatever number is smaller
10:59 - back to our original array
11:01 - so array at index of i
11:05 - equals left array at
11:08 - index of l then we can increment i
11:13 - increment l
11:17 - so if the number on the left is not
11:19 - smaller than the number on the right we
11:21 - have to copy the element in our right
11:23 - array
11:23 - to our original array and we can use an
11:26 - else statement else
11:28 - array at index of i
11:32 - equals right array at index
11:35 - of our increment i increment r
11:40 - so there's probably going to be one
11:42 - element remaining that we cannot compare
11:44 - to another element because there's only
11:45 - one left
11:46 - so let's write a while loop for that
11:48 - condition
11:51 - while l is less than left size
11:56 - then we will take array at index of i
12:00 - equals left array at index
12:04 - of l increment i
12:08 - increment l
12:11 - then we'll need a another while loop if
12:14 - r
12:15 - is less than right size
12:19 - we will copy the last right element over
12:22 - array at index of i equals
12:26 - right array at index of r
12:30 - increment i increment r
12:33 - and that should be it let's run this
12:38 - and our array is now sorted in
12:41 - conclusion everybody the merge sort
12:43 - algorithm
12:44 - recursively divides an array in two
12:46 - sorts them
12:47 - and then recombines them the merge sort
12:50 - algorithm has a runtime complexity of
12:52 - big o of n log n and a space complexity
12:56 - of big o of n so that is the merge sort
12:59 - algorithm
13:00 - if you would like a copy of this code i
13:02 - will post this to the comment section
13:04 - down below
13:04 - and well yeah that is the merge sword
13:07 - algorithm
13:08 - in computer science hey you
13:11 - yeah i'm talking to you if you learned
13:12 - something new then help me
13:14 - help you in three easy steps by smashing
13:17 - that like button
13:18 - drop a comment down below and subscribe
13:20 - if you'd like to become a fellow bro
13:34 - [Music]
13:44 - you

Cleaned transcript:

hey what's going on everybody it's you bro hope you're doing well and in this video we're going to discuss the merge sword algorithm in computer science so sit back relax and enjoy the show all right what's going on people merge sword merge sword is a divide and conquer algorithm basically what we do is that we will pass an array as an argument to a merge sort function this function is going to divide our array in two we have a left array and a right array these will be subarrays and we will copy the elements over from our original array to our two new subarrays and merge sword is a recursive function so at the end of merge sort we will call merge sword again and pass in our subarrays that we create and again the merge sort function is going to divide our arrays in two by creating a two new sub arrays and then copy the elements over and we will stop when our arrays only have a size of one and that's where sorting then merging come in and with the process of merging and sorting we will create a second helper function named merge merge will accept a total of three arguments our left subarray our right subarray and the original subarray in which these elements came from merge is going to take these elements and put them back into their original array which they came from in order and we will do the same thing with the next grouping of arrays until all of these elements are merged back into their original array in which they came from all in order now in practice when we do execute this merge sort function instead of tackling all of these subarrays like one layer at a time we will tackle them by one branch at a time so it's going to look a little something like this where we will start with the leftmost branch and then work our way towards the right so i'll speed up the footage and just give you a rundown of how this works in practice you me and that ladies and gentlemen is the merge sort algorithm the merge sort algorithm has a runtime complexity of big o of n log n it runs in quasilinear time along with quick sort and heap sort which we still need to talk about so when working with large data sets merge sort is faster than insertion sort selection sort and bubble sort but on the other hand the emerge sword algorithm uses more space than a bubble sword selection sword and insertion sort because we need to create new subarrays to store elements whereas bubble sort selection sword and insertion sort can sort in place so they use a constant amount of space to do their sorting unlike with merge sort now let's move on to the handson portion of this video and create a merge sort function in code now all right well let's get started we'll need an array to work with make up some numbers make sure that they're not in order as well as a for loop to iterate over the elements of our array so currently our array is not in order but that's going to change soon let's invoke a merge sort method that we still need to declare this is going to be a recursive method and we will pass in an array and each time that we invoke this method we will split our array in half create two subarrays and then copy the elements over so let's create and declare this method private static void merge sort and we'll need a helper method too and we'll name this merge a helper method is just a method that helps another method basically so private static void merge and there's going to be three parameters within our merge method int left array int right array and int array remember that these are arrays of integers the first thing that we're going to do within our merge sort method is that we need to get the length of our array so let's cache that within a local variable named length int length equals array.length and we'll need a base case too when do we stop recursion if length is less than or equal to one then we shall return and this is our base case basically with this merge sort method we're dividing our ray in two each time if the length is one there's no longer a need to divide our array further and we'll need to find the middle position of our ray int middle equals length divided by two and we'll create two new sub arrays int array left array equals new integer array and the size is middle and we'll create a right array integer array right array the size is length minus middle okay now we need to copy the elements of our original array to our left and right arrays so we'll need two indices int i equals zero this will be for our left array and int j equals zero and this is for our right array then let's create a for loop we don't necessarily need to declare a new index here we can just use i so i'm going to add a semicolon our condition is i is less than length then increment i by 1 during each iteration so our condition is with an if statement if i is less than middle then we will copy an element from our original array to our left array left array at index of i equals array at index of i else we will copy that element to our right array else right array at index of j remember that this index is for the right array equals array at index of i then let's increment j by one okay this is where recursion comes in so outside of this for loop we will call merge sword again and pass in our left array so we'll consistently divide our array in half we'll begin by dividing the left array then the right array with a separate recursive call so left array then right array and then call merge so with merge we have to pass in our left array right array and our original array because we'll put the elements back in order left array right array and our original array that we received as an argument so that is it for the merge sort function let's work on merge next first thing that we're going to do within the merge method is cache the size of our left array and right array within some local variables int left size equals array dot length divided by 2 and right size equals array dot length minus left size and then we'll need three indices int i equals zero this is for our original array to keep track of the position l will be in charge of our left array and r will be in charge of our right array and these will be the indices that we're using okay the next part we're going to check the conditions for merging and we can do this with a while loop so our condition is going to be while l is less than left size and r is less than right size so basically while there's elements within both our left array and right array we will continue adding elements to our original array and we'll need to check to see which element is smaller if left array at index of l is less than right array at index of r then we will copy the element from our left array to our original array so we're basically comparing the number on the left to the right and adding whatever number is smaller back to our original array so array at index of i equals left array at index of l then we can increment i increment l so if the number on the left is not smaller than the number on the right we have to copy the element in our right array to our original array and we can use an else statement else array at index of i equals right array at index of our increment i increment r so there's probably going to be one element remaining that we cannot compare to another element because there's only one left so let's write a while loop for that condition while l is less than left size then we will take array at index of i equals left array at index of l increment i increment l then we'll need a another while loop if r is less than right size we will copy the last right element over array at index of i equals right array at index of r increment i increment r and that should be it let's run this and our array is now sorted in conclusion everybody the merge sort algorithm recursively divides an array in two sorts them and then recombines them the merge sort algorithm has a runtime complexity of big o of n log n and a space complexity of big o of n so that is the merge sort algorithm if you would like a copy of this code i will post this to the comment section down below and well yeah that is the merge sword algorithm in computer science hey you yeah i'm talking to you if you learned something new then help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro you
