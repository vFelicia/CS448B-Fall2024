With timestamps:

00:02 - all right what's going on everybody hash
00:04 - tables a hash table is a collection of
00:07 - key value pairs each key value pair is
00:10 - known as an entry we have two pieces of
00:13 - data the first is the key and the second
00:16 - is the value in this example let's
00:18 - pretend that we're a teacher and we need
00:20 - to create a hash table of all of our
00:22 - students each student has a name and a
00:25 - unique student id number but these can
00:28 - be of any data type that you would like
00:30 - in this example the key will be an
00:32 - integer and the value will be a string
00:34 - so how do we know at which index to
00:36 - place each of these entries well what we
00:39 - could do is take each key and insert it
00:42 - into a hashcode method the hashcode
00:44 - method will take a key as input plug it
00:47 - into a formula and spit out an integer
00:50 - this integer is known as a hash now if
00:52 - we're finding the hashcode of an integer
00:55 - in java that's actually really easy the
00:57 - formula is the number itself so the hash
01:00 - of 100 is 100 123 is 123. so on and so
01:05 - forth with the other keys so after
01:08 - finding the hash of your key now what
01:10 - can we do these numbers are way too
01:12 - large and the size of our hash table is
01:15 - only 10 elements what we'll do next is
01:17 - take each of these hashes and divide
01:20 - each of them by the capacity the size of
01:23 - our hash table we have 10 elements so
01:26 - take each hash divided by the capacity
01:29 - of our hash table whatever the remainder
01:31 - is we will use the remainder as an index
01:35 - and to find that we will use the modulus
01:37 - operator so 100 divides by 10 evenly the
01:41 - remainder is zero so 100 modulus 10
01:45 - gives us a remainder of zero so
01:47 - spongebob's entry we will place at index
01:51 - 0 within our hash table so the hash of
01:54 - patrick's key is 123. 123 modulus 10
01:58 - gives us a remainder of 3. patrick's
02:01 - entry will be inserted at index 3 of our
02:04 - hash table so here's a little shortcut
02:06 - if you have a number modulus 10 you
02:09 - could find the remainder and that is the
02:10 - last digit 321 modulus 10 will give us a
02:14 - remainder of 1. sandy's entry will be
02:17 - placed at index 1. then squidward's
02:19 - entry will be placed at index 5.
02:23 - 555 modulus 10 is 5 and gary's will be
02:27 - at index 7 following the same pattern
02:29 - now here's one situation what if two
02:32 - hashes are calculated to be the same
02:34 - value that is known as a collision and i
02:37 - can best demonstrate that with a
02:39 - separate example
02:40 - in this next example let's say that each
02:43 - key is now a string each entry is a pair
02:46 - of strings we will first need to find
02:49 - the hash of each of these keys
02:51 - so the hash code of a string uses a
02:54 - different formula basically speaking
02:56 - we're going to take the ascii value of
02:59 - each character within the string and
03:01 - plug it into this formula i went ahead
03:03 - and calculated the hash of each of these
03:06 - strings using this formula of the string
03:09 - hashcode method and the next steps are
03:11 - the same as before take each hash
03:13 - divided by the capacity of our hash
03:16 - table and find the remainder so
03:18 - beginning with the first hash
03:21 - 48625 modulus 10 gives us a remainder of
03:25 - 5 spongebob's entry is now at index 5
03:29 - within our hash table
03:31 - now patrick's will be at index zero now
03:34 - here's sandy's sandy's will also be zero
03:38 - we have a collision both of these
03:40 - entries will be located at the same
03:42 - index so what do we do each of these
03:45 - storage locations is also known as a
03:47 - bucket and the most common resolution
03:50 - for a collision in a hash table is that
03:53 - we will turn each bucket into a linked
03:55 - list if this bucket already has an entry
03:58 - within the first entry we will also add
04:01 - an address to the location of the next
04:04 - entry and keep on adding more if there's
04:07 - more entries within this bucket so in
04:10 - this way this becomes a linked list if
04:12 - we're looking up a key we first go to
04:14 - the index in which it's located if
04:17 - there's more than one entry we will
04:19 - search linearly through this bucket as
04:21 - if it were a linked list until we find
04:24 - the key that we're looking for so that's
04:26 - the most common resolution when there is
04:28 - a collision but ideally you would want
04:31 - each of these entries to be within their
04:32 - own bucket based on the hash of
04:35 - squidward's key squidward's entry has an
04:38 - index of nine and gary gary has an index
04:41 - of five and there's another collision we
04:44 - will add the address of gary's location
04:47 - to the first entry and this bucket
04:49 - becomes a separate linked list this
04:51 - process is known as chaining the less
04:54 - collisions that there are the more
04:56 - efficient that this hash table is going
04:58 - to look up a value ideally you would
05:00 - want each entry to have their own bucket
05:03 - but collisions are possible to reduce
05:05 - the number of collisions you can
05:07 - increase the size of the hash table but
05:09 - then again the hash table is going to
05:11 - use up more memory then so people
05:12 - usually find a balance between the two
05:15 - so yeah those are hash tables in theory
05:17 - let's create our own now all right
05:19 - everybody so let's implement a hash
05:21 - table in java so we will need to declare
05:24 - this hash table and list the data types
05:27 - of our key value pairs if we need to
05:29 - store primitive data types we can use
05:31 - the appropriate wrapper class so let's
05:33 - store integers and strings
05:36 - integer and string the integers will be
05:39 - the key is the strings will be the
05:41 - values we'll map student id numbers and
05:44 - student names and i'll name this hash
05:46 - table just simply table
05:48 - equals new
05:50 - hash table
05:53 - there we go so in java when we create a
05:56 - hash table these have an initial
05:58 - capacity of 11 elements and a load
06:00 - factor of 0.75 so once 75 of our
06:04 - elements are filled this hash table will
06:07 - dynamically expand to accommodate more
06:09 - elements now you can set a different
06:11 - capacity for your hash table instead of
06:13 - 11 let's say 10 to be consistent with
06:16 - our example in the previous part of this
06:17 - lesson and if you would like to change
06:19 - the load factor you can add that as well
06:21 - instead of 75 let's say 50
06:24 - so we would pass in a floating point
06:26 - number
06:27 - so 0.5 then add an f at the end for
06:30 - floating point numbers but in this
06:32 - example let's just keep the load factor
06:34 - consistent so let's start adding some
06:36 - key value pairs to add an element to
06:38 - your hash table use the put method so
06:41 - table dot put and then we will pass in
06:45 - an integer as the key and a string as
06:48 - the value so our first student is
06:50 - spongebob he has a student id of let's
06:53 - say 100
06:54 - and let's pass in a string for the value
06:57 - spongebob
06:58 - okay that is our first student so let's
07:00 - add a couple more from the previous
07:02 - example
07:03 - so we have spongebob
07:05 - patrick with an id of one two three
07:08 - sandy with an id of three two one
07:11 - squidward with an id of five five five
07:16 - and gary with an id of 777
07:20 - now to access one of these values you
07:22 - can use the get method of tables
07:25 - so i'll display this within a print line
07:26 - statement
07:28 - table dot get and i will pass in a key
07:31 - let's get the value at key number 100 so
07:34 - this student is spongebob how can we
07:37 - display all of the key value pairs of a
07:39 - table well we could use a for loop
07:42 - so i'm going to create a for loop
07:45 - and place this within it
07:48 - so to iterate over the keys of our table
07:51 - this is what we can write we can use an
07:53 - enhanced for loop so we are iterating
07:55 - over integers
07:57 - so the data type is integer
07:59 - key
08:01 - colon so to make our hash table iterable
08:03 - we can get all of the keys from our
08:05 - table and put them within a set a set is
08:08 - iterable
08:09 - so we will iterate over table dot key
08:13 - set method
08:14 - this will take all of our keys and
08:16 - return a set and a set is something we
08:18 - can iterate over and within our print
08:20 - line statement let's print each key
08:23 - key
08:24 - plus
08:25 - then maybe i'll add a tab to separate
08:27 - these
08:28 - plus
08:29 - table
08:30 - dot get
08:32 - then pass in whatever our key is okay so
08:35 - after running this
08:37 - this will display all of our key value
08:39 - pairs and if you need to remove an entry
08:42 - well there's a remove method table dot
08:45 - remove then pass in a key let's remove
08:48 - gary so remove the entry with this key
08:51 - 777
08:52 - and gary is no longer within our table
08:55 - but we'll keep them in i'll turn this
08:56 - line into a comment now just to get a
08:58 - better understanding of where these key
09:00 - value pairs are being placed let's also
09:03 - display each hash code for each of these
09:05 - elements
09:06 - so preceding our key let's display each
09:08 - hash code i'll precede our key with a
09:11 - tab
09:15 - and let's display each key's hash code
09:18 - key dot hashcode method if we're using
09:22 - the hash code of integers this will
09:24 - return the primitive integer value
09:27 - represented by the key that we're
09:29 - passing in if we're using the hashcode
09:31 - method of integers well the hash is
09:34 - going to end up being the same integer
09:35 - so you can see that these numbers are
09:37 - the same to calculate an index we can
09:39 - follow the hash with modulus operator
09:42 - then the size of our table
09:44 - we set this to originally be 10.
09:48 - so we have gary at index seven squidward
09:51 - at index five patrick at three sandy at
09:53 - one spongebob at zero now if our data
09:56 - type was strings we would use a
09:58 - different hashing formula so let's
10:00 - change the data type to string and all
10:02 - of these keys are now strings
10:07 - then let's remove modulus 10
10:10 - and change the data type of our for loop
10:12 - to strings
10:13 - string key
10:16 - okay these are the new hashes for each
10:18 - of our keys
10:19 - this key has this hash number this key
10:22 - has this hash number so on and so forth
10:25 - so different data types will have
10:26 - different hash code formulas now let's
10:29 - calculate the element in which each of
10:31 - these entries is going to be placed by
10:33 - adding modulus the size of our hash
10:35 - table 10.
10:39 - so here are the elements and we actually
10:40 - have two collisions we have a collision
10:43 - with these two keys they're both within
10:45 - bucket five as well as these two entries
10:48 - so both of these will be placed into
10:49 - bucket zero since there's more than one
10:52 - entry within the same element we will
10:54 - treat this bucket as a linked list and
10:56 - just iterate over it linearly until we
10:58 - reach the key that we're looking for
11:00 - now one way in which we can avoid
11:01 - collisions is to increase the size of
11:04 - our hash table if we set this to the
11:06 - default of 11 and change this to modulus
11:09 - 11 well then these will be placed within
11:11 - different buckets and you can see that
11:13 - they changed however we still have a
11:15 - collision with spongebob and squidward
11:18 - so what if we increase this to 21.
11:20 - do we have any collisions then
11:23 - nope we do not these keys are within
11:25 - their own buckets
11:27 - all right everybody so in conclusion a
11:29 - hash table is a data structure that
11:32 - stores unique keys to values when you
11:35 - declare a hash table you state the data
11:37 - types of what you're storing and these
11:40 - are reference data types each key value
11:42 - pair is known as an entry and a benefit
11:45 - of hash tables is that they have a fast
11:48 - insertion lookup and deletion of key
11:51 - value pairs but they're not ideal for
11:53 - small data sets since there's a lot of
11:55 - overhead but they're great with large
11:57 - data sets hashing in the context of a
12:00 - hash table takes a key and computes an
12:03 - integer it utilizes a formula which will
12:06 - vary based on the key as input and its
12:08 - data type then to calculate an index we
12:11 - follow this formula we take a hash
12:13 - modulus the capacity of our table to
12:17 - calculate an index each index is also
12:20 - known as a bucket it's an indexed
12:22 - storage location for one or more entries
12:25 - they can store more than one entry in
12:27 - the case of a collision and in case that
12:29 - happens we treat each bucket as a linked
12:31 - list each entry knows where the next
12:34 - entry is located and as we discussed a
12:36 - collision is when a hash function
12:38 - generates the same index for more than
12:40 - one key less collisions equals more
12:43 - efficiency and the runtime complexity of
12:45 - a hash table varies if there are no
12:48 - collisions the best case would be a
12:50 - runtime complexity of big o of one it
12:53 - runs in constant time in case there are
12:55 - exclusively collisions as in we place
12:58 - all of our entries within the same
13:00 - bucket it's going to be one giant linked
13:02 - list and the runtime complexity of a
13:04 - linked list is big o of n it runs in
13:07 - linear time on average the runtime
13:09 - complexity of a hash table will be
13:12 - somewhere within this range so yeah
13:14 - everybody those are hash tables if you
13:16 - would like a copy of all my notes here
13:18 - i'll post them in the comments section
13:19 - down below and well yeah those are hash
13:22 - tables in computer science

Cleaned transcript:

all right what's going on everybody hash tables a hash table is a collection of key value pairs each key value pair is known as an entry we have two pieces of data the first is the key and the second is the value in this example let's pretend that we're a teacher and we need to create a hash table of all of our students each student has a name and a unique student id number but these can be of any data type that you would like in this example the key will be an integer and the value will be a string so how do we know at which index to place each of these entries well what we could do is take each key and insert it into a hashcode method the hashcode method will take a key as input plug it into a formula and spit out an integer this integer is known as a hash now if we're finding the hashcode of an integer in java that's actually really easy the formula is the number itself so the hash of 100 is 100 123 is 123. so on and so forth with the other keys so after finding the hash of your key now what can we do these numbers are way too large and the size of our hash table is only 10 elements what we'll do next is take each of these hashes and divide each of them by the capacity the size of our hash table we have 10 elements so take each hash divided by the capacity of our hash table whatever the remainder is we will use the remainder as an index and to find that we will use the modulus operator so 100 divides by 10 evenly the remainder is zero so 100 modulus 10 gives us a remainder of zero so spongebob's entry we will place at index 0 within our hash table so the hash of patrick's key is 123. 123 modulus 10 gives us a remainder of 3. patrick's entry will be inserted at index 3 of our hash table so here's a little shortcut if you have a number modulus 10 you could find the remainder and that is the last digit 321 modulus 10 will give us a remainder of 1. sandy's entry will be placed at index 1. then squidward's entry will be placed at index 5. 555 modulus 10 is 5 and gary's will be at index 7 following the same pattern now here's one situation what if two hashes are calculated to be the same value that is known as a collision and i can best demonstrate that with a separate example in this next example let's say that each key is now a string each entry is a pair of strings we will first need to find the hash of each of these keys so the hash code of a string uses a different formula basically speaking we're going to take the ascii value of each character within the string and plug it into this formula i went ahead and calculated the hash of each of these strings using this formula of the string hashcode method and the next steps are the same as before take each hash divided by the capacity of our hash table and find the remainder so beginning with the first hash 48625 modulus 10 gives us a remainder of 5 spongebob's entry is now at index 5 within our hash table now patrick's will be at index zero now here's sandy's sandy's will also be zero we have a collision both of these entries will be located at the same index so what do we do each of these storage locations is also known as a bucket and the most common resolution for a collision in a hash table is that we will turn each bucket into a linked list if this bucket already has an entry within the first entry we will also add an address to the location of the next entry and keep on adding more if there's more entries within this bucket so in this way this becomes a linked list if we're looking up a key we first go to the index in which it's located if there's more than one entry we will search linearly through this bucket as if it were a linked list until we find the key that we're looking for so that's the most common resolution when there is a collision but ideally you would want each of these entries to be within their own bucket based on the hash of squidward's key squidward's entry has an index of nine and gary gary has an index of five and there's another collision we will add the address of gary's location to the first entry and this bucket becomes a separate linked list this process is known as chaining the less collisions that there are the more efficient that this hash table is going to look up a value ideally you would want each entry to have their own bucket but collisions are possible to reduce the number of collisions you can increase the size of the hash table but then again the hash table is going to use up more memory then so people usually find a balance between the two so yeah those are hash tables in theory let's create our own now all right everybody so let's implement a hash table in java so we will need to declare this hash table and list the data types of our key value pairs if we need to store primitive data types we can use the appropriate wrapper class so let's store integers and strings integer and string the integers will be the key is the strings will be the values we'll map student id numbers and student names and i'll name this hash table just simply table equals new hash table there we go so in java when we create a hash table these have an initial capacity of 11 elements and a load factor of 0.75 so once 75 of our elements are filled this hash table will dynamically expand to accommodate more elements now you can set a different capacity for your hash table instead of 11 let's say 10 to be consistent with our example in the previous part of this lesson and if you would like to change the load factor you can add that as well instead of 75 let's say 50 so we would pass in a floating point number so 0.5 then add an f at the end for floating point numbers but in this example let's just keep the load factor consistent so let's start adding some key value pairs to add an element to your hash table use the put method so table dot put and then we will pass in an integer as the key and a string as the value so our first student is spongebob he has a student id of let's say 100 and let's pass in a string for the value spongebob okay that is our first student so let's add a couple more from the previous example so we have spongebob patrick with an id of one two three sandy with an id of three two one squidward with an id of five five five and gary with an id of 777 now to access one of these values you can use the get method of tables so i'll display this within a print line statement table dot get and i will pass in a key let's get the value at key number 100 so this student is spongebob how can we display all of the key value pairs of a table well we could use a for loop so i'm going to create a for loop and place this within it so to iterate over the keys of our table this is what we can write we can use an enhanced for loop so we are iterating over integers so the data type is integer key colon so to make our hash table iterable we can get all of the keys from our table and put them within a set a set is iterable so we will iterate over table dot key set method this will take all of our keys and return a set and a set is something we can iterate over and within our print line statement let's print each key key plus then maybe i'll add a tab to separate these plus table dot get then pass in whatever our key is okay so after running this this will display all of our key value pairs and if you need to remove an entry well there's a remove method table dot remove then pass in a key let's remove gary so remove the entry with this key 777 and gary is no longer within our table but we'll keep them in i'll turn this line into a comment now just to get a better understanding of where these key value pairs are being placed let's also display each hash code for each of these elements so preceding our key let's display each hash code i'll precede our key with a tab and let's display each key's hash code key dot hashcode method if we're using the hash code of integers this will return the primitive integer value represented by the key that we're passing in if we're using the hashcode method of integers well the hash is going to end up being the same integer so you can see that these numbers are the same to calculate an index we can follow the hash with modulus operator then the size of our table we set this to originally be 10. so we have gary at index seven squidward at index five patrick at three sandy at one spongebob at zero now if our data type was strings we would use a different hashing formula so let's change the data type to string and all of these keys are now strings then let's remove modulus 10 and change the data type of our for loop to strings string key okay these are the new hashes for each of our keys this key has this hash number this key has this hash number so on and so forth so different data types will have different hash code formulas now let's calculate the element in which each of these entries is going to be placed by adding modulus the size of our hash table 10. so here are the elements and we actually have two collisions we have a collision with these two keys they're both within bucket five as well as these two entries so both of these will be placed into bucket zero since there's more than one entry within the same element we will treat this bucket as a linked list and just iterate over it linearly until we reach the key that we're looking for now one way in which we can avoid collisions is to increase the size of our hash table if we set this to the default of 11 and change this to modulus 11 well then these will be placed within different buckets and you can see that they changed however we still have a collision with spongebob and squidward so what if we increase this to 21. do we have any collisions then nope we do not these keys are within their own buckets all right everybody so in conclusion a hash table is a data structure that stores unique keys to values when you declare a hash table you state the data types of what you're storing and these are reference data types each key value pair is known as an entry and a benefit of hash tables is that they have a fast insertion lookup and deletion of key value pairs but they're not ideal for small data sets since there's a lot of overhead but they're great with large data sets hashing in the context of a hash table takes a key and computes an integer it utilizes a formula which will vary based on the key as input and its data type then to calculate an index we follow this formula we take a hash modulus the capacity of our table to calculate an index each index is also known as a bucket it's an indexed storage location for one or more entries they can store more than one entry in the case of a collision and in case that happens we treat each bucket as a linked list each entry knows where the next entry is located and as we discussed a collision is when a hash function generates the same index for more than one key less collisions equals more efficiency and the runtime complexity of a hash table varies if there are no collisions the best case would be a runtime complexity of big o of one it runs in constant time in case there are exclusively collisions as in we place all of our entries within the same bucket it's going to be one giant linked list and the runtime complexity of a linked list is big o of n it runs in linear time on average the runtime complexity of a hash table will be somewhere within this range so yeah everybody those are hash tables if you would like a copy of all my notes here i'll post them in the comments section down below and well yeah those are hash tables in computer science
