With timestamps:

00:00 - hey everybody so we have finally made it
00:02 - to Python objectoriented Programming
00:05 - this is a very important topic in Python
00:08 - an object is a bundle of related
00:10 - attributes and methods attributes are
00:13 - similar to variables to describe what
00:15 - the object has so look around you right
00:18 - now you are surrounded by different Real
00:20 - World objects next to me I have a phone
00:23 - a cup and a book each of these objects
00:26 - can have different attributes to
00:28 - represent it for example
00:30 - an attribute of the phone next to me
00:32 - could be version number I could set that
00:34 - to be 13 is on could be another
00:37 - attribute is the phone powered on or not
00:39 - that could be true or false or even a
00:42 - price I have a cup next to me what
00:45 - liquid is within the cup in this case
00:47 - coffee what's the temperature of the cup
00:49 - is the cup empty is empty or even a book
00:53 - What's the title of the book that could
00:55 - be a string how many pages does the book
00:58 - have Pages could be another attribute
01:00 - now objects also have the capability to
01:03 - do things they have methods which are
01:06 - functions that belong to an object
01:09 - people mix up functions and methods all
01:11 - the time they're technically different
01:13 - even when teaching I tend to make that
01:15 - mistake calling a method a function and
01:17 - a function a method usually people know
01:19 - what you're referring to though a method
01:21 - is a function that belongs within an
01:23 - object what are some actions these
01:25 - objects can perform with a phone you can
01:29 - make a call or receive a call turn the
01:31 - phone on or turn the phone off those
01:34 - could all be functions with a cup you
01:36 - could fill the cup drink from the cup or
01:39 - empty the cup with a book you can open
01:41 - the book read the book and close the
01:44 - book an object is a bundle of related
01:48 - attributes and methods they can
01:50 - represent real world items to create
01:54 - many objects we'll need to utilize a
01:56 - Class A Class is a type of blueprint
01:59 - used to design the structure and layout
02:02 - of an object we need to design what our
02:05 - objects have their attributes and what
02:08 - they can do their methods we will create
02:11 - a class of car we will create some car
02:14 - objects class
02:18 - car to construct a car object we need a
02:21 - special type of method called a
02:23 - Constructor it works similarly to a
02:25 - function we will Define a function
02:30 - of double underscore init meaning
02:33 - initialize double underscore again and
02:36 - then follow this with a set of
02:37 - parentheses this is our Constructor
02:40 - method we need this method in order to
02:42 - construct objects it's a Dunder method
02:45 - Dunder meaning double underscore that's
02:47 - a future topic I don't want you to be
02:50 - overloaded with information right now
02:52 - all you need to know is that we need
02:53 - this method in order to create objects
02:56 - this method behaves similar to a
02:58 - function we need to set up the
03:00 - parameters self is already provided to
03:03 - us self means this object we're creating
03:06 - right now this car so what are some
03:09 - attributes that a car should have a
03:12 - model that could be a string like a
03:16 - BMW a year that could be a
03:19 - number a
03:21 - color let's add a Boolean of for sale is
03:26 - the car for sale or not that's true or
03:29 - false
03:30 - to assign these attributes we're going
03:32 - to access self self dot the name of the
03:36 - attribute self. model equals the model
03:41 - we
03:42 - receive these are parameters when we
03:45 - receive the name of a model we will
03:47 - assign it to this object let's do this
03:50 - with year self. year equals year self.
03:56 - color equals color self
04:00 - do for sale equals for sale this is an
04:05 - example of a few attributes that a car
04:07 - might have a model year color and if
04:10 - it's for sale or not represented by a
04:13 - Boolean now to construct a car object we
04:15 - need a unique name for this car let's
04:18 - just say car one car 1 equals take the
04:23 - name of the class add a set of
04:25 - parentheses to invoke The Constructor
04:29 - we're going to do this this almost
04:30 - exactly like a function we have
04:32 - parameter set up we need to send a
04:34 - matching number of arguments self is
04:37 - provided to us behind the scenes
04:39 - automatically we need a model year color
04:42 - and if it's for sale or not so pick a
04:45 - car of you're choosing I'll pick my
04:47 - favorite
04:48 - car the model will be a Mustang for the
04:51 - year I'll go with the recent year of
04:54 - 2024 a color I'll pick red is the car
04:59 - for sale
05:00 - I like this car so no I will set that to
05:02 - be false make sure false is
05:05 - capitalized let's see what happens if I
05:08 - attempt to print our car object of car
05:13 - one what we're given is the memory
05:16 - address of this car object where it's
05:19 - located but I would like one of the
05:21 - attributes located at this memory
05:24 - address instead of printing the object
05:26 - itself we're going to access one of the
05:28 - attributes found within this car we will
05:31 - follow the name of the car with a DOT
05:35 - this dot it's known as the attribute
05:37 - access operator I would like the model
05:41 - of car
05:42 - one that would give me
05:45 - Mustang let's access the year take the
05:48 - name of the car car 1 dot the year
05:53 - 2024 followed by the color car 1. color
06:01 - red car one is it for sale we'll print
06:07 - that that is
06:09 - false now let's create a second car
06:12 - we're going to reuse this class to
06:14 - create a second car we will create Car 2
06:18 - equals car we'll pass in some different
06:21 - arguments a Corvette the year will be
06:25 - 2025 the color will be blue is this car
06:29 - for sale let's say that is
06:32 - true instead of accessing car 1's
06:34 - attributes let's access car 2's
06:38 - attributes that would give us a Corvette
06:41 - the year is 2025 the color is blue for
06:45 - sale is set to
06:46 - true or even a third car car 3 equals a
06:52 - new car we will pass in a
06:55 - string of charger the year 2026
07:00 - the color will be yellow is this car for
07:03 - sale let's say that is true as well then
07:06 - I will print car 3's
07:12 - attributes the model is charger the year
07:14 - is 2026 the color is yellow for sale is
07:18 - set to True with classes they can take
07:21 - up a lot of space for better
07:23 - organization you can place them within a
07:25 - new python file so let's cut our class
07:31 - and we will create a new python file
07:33 - within our project folder file new
07:37 - python file the name of this python file
07:40 - is going to be all lowercase
07:44 - car then we will paste the class that we
07:48 - cut
07:49 - originally class car which has a capital
07:53 - c so from our main python file we're
07:56 - going to import our car file our car
07:59 - module
08:00 - mod from the name of the module car
08:04 - import the name of the class car then
08:07 - when I run this program nothing should
08:09 - change we should still have access to
08:11 - all of our car
08:14 - objects you could either keep your
08:16 - classes within your main python file or
08:19 - import them if you would like to
08:20 - organize things let's talk about methods
08:23 - methods are actions that our objects can
08:26 - perform within our class we will Define
08:28 - a method
08:30 - of Drive self is going to be provided to
08:34 - us when we invoke the drive function
08:36 - let's
08:37 - print you drive the car what other
08:42 - things can cars do let's
08:46 - stop we will
08:50 - print you stop the
08:55 - car let's take car one access the drive
09:01 - method you drive the car car 2 also has
09:05 - a drive method you drive the car same
09:08 - thing with car 3 you drive the car let's
09:12 - access the stop
09:14 - method car one.
09:18 - stop car 2.
09:21 - stop and car 3.
09:24 - stop these methods are identical for
09:27 - each car object instead of printing the
09:30 - word car let's insert the model of the
09:33 - car I will convert these print
09:35 - statements to F
09:38 - strings instead of the word car let's
09:40 - add a
09:41 - placeholder let's add
09:43 - self.
09:45 - model self is referring to the object
09:48 - we're currently working with use the
09:51 - attribute AIS operator followed by the
09:53 - name of the attribute let's also do this
09:56 - with the stop method sell
10:00 - do
10:03 - model let's take car one use the drive
10:07 - method you drive the Mustang car
10:11 - one.
10:14 - stop you drive the Mustang you stop the
10:17 - Mustang let's do this with Car
10:19 - 2 you drive the Corvette you stop the
10:23 - Corvette car
10:25 - three you drive the charger you stop the
10:28 - charger
10:30 - now within our F strings let's also
10:32 - insert let's insert the
10:35 - color I'll add a placeholder self. color
10:40 - do this with stop as
10:42 - well
10:44 - self.
10:47 - color you drive the yellow charger you
10:50 - stop the yellow charger car one you
10:54 - drive the red Mustang you stop the red
10:56 - Mustang card two you Drive the blue
10:59 - Corvette you stop the blue Corvette
11:02 - let's add one last
11:04 - method let's create a method to describe
11:07 - our car we'll print the details of the
11:10 - car let's print I'll use an F
11:14 - string add three
11:17 - placeholders let's print self
11:22 - doye followed by self.
11:25 - color then self. model
11:31 - we'll take car 1 use the describe method
11:34 - that we
11:35 - created describe car 1 car 1 is a 2024
11:41 - red Mustang describe Car 2 Car 2 is a
11:46 - 2025 blue Corvette car 3 is a 2026
11:51 - yellow charger all right everybody so
11:54 - those are objects in Python an object is
11:57 - a bundle of related attrib attributes
12:00 - attributes are variables that an object
12:02 - has and methods methods are functions
12:07 - that belong to an object they Define
12:09 - what this object can do and well
12:12 - everybody that is a summary of
12:14 - object-oriented programming using python

Cleaned transcript:

hey everybody so we have finally made it to Python objectoriented Programming this is a very important topic in Python an object is a bundle of related attributes and methods attributes are similar to variables to describe what the object has so look around you right now you are surrounded by different Real World objects next to me I have a phone a cup and a book each of these objects can have different attributes to represent it for example an attribute of the phone next to me could be version number I could set that to be 13 is on could be another attribute is the phone powered on or not that could be true or false or even a price I have a cup next to me what liquid is within the cup in this case coffee what's the temperature of the cup is the cup empty is empty or even a book What's the title of the book that could be a string how many pages does the book have Pages could be another attribute now objects also have the capability to do things they have methods which are functions that belong to an object people mix up functions and methods all the time they're technically different even when teaching I tend to make that mistake calling a method a function and a function a method usually people know what you're referring to though a method is a function that belongs within an object what are some actions these objects can perform with a phone you can make a call or receive a call turn the phone on or turn the phone off those could all be functions with a cup you could fill the cup drink from the cup or empty the cup with a book you can open the book read the book and close the book an object is a bundle of related attributes and methods they can represent real world items to create many objects we'll need to utilize a Class A Class is a type of blueprint used to design the structure and layout of an object we need to design what our objects have their attributes and what they can do their methods we will create a class of car we will create some car objects class car to construct a car object we need a special type of method called a Constructor it works similarly to a function we will Define a function of double underscore init meaning initialize double underscore again and then follow this with a set of parentheses this is our Constructor method we need this method in order to construct objects it's a Dunder method Dunder meaning double underscore that's a future topic I don't want you to be overloaded with information right now all you need to know is that we need this method in order to create objects this method behaves similar to a function we need to set up the parameters self is already provided to us self means this object we're creating right now this car so what are some attributes that a car should have a model that could be a string like a BMW a year that could be a number a color let's add a Boolean of for sale is the car for sale or not that's true or false to assign these attributes we're going to access self self dot the name of the attribute self. model equals the model we receive these are parameters when we receive the name of a model we will assign it to this object let's do this with year self. year equals year self. color equals color self do for sale equals for sale this is an example of a few attributes that a car might have a model year color and if it's for sale or not represented by a Boolean now to construct a car object we need a unique name for this car let's just say car one car 1 equals take the name of the class add a set of parentheses to invoke The Constructor we're going to do this this almost exactly like a function we have parameter set up we need to send a matching number of arguments self is provided to us behind the scenes automatically we need a model year color and if it's for sale or not so pick a car of you're choosing I'll pick my favorite car the model will be a Mustang for the year I'll go with the recent year of 2024 a color I'll pick red is the car for sale I like this car so no I will set that to be false make sure false is capitalized let's see what happens if I attempt to print our car object of car one what we're given is the memory address of this car object where it's located but I would like one of the attributes located at this memory address instead of printing the object itself we're going to access one of the attributes found within this car we will follow the name of the car with a DOT this dot it's known as the attribute access operator I would like the model of car one that would give me Mustang let's access the year take the name of the car car 1 dot the year 2024 followed by the color car 1. color red car one is it for sale we'll print that that is false now let's create a second car we're going to reuse this class to create a second car we will create Car 2 equals car we'll pass in some different arguments a Corvette the year will be 2025 the color will be blue is this car for sale let's say that is true instead of accessing car 1's attributes let's access car 2's attributes that would give us a Corvette the year is 2025 the color is blue for sale is set to true or even a third car car 3 equals a new car we will pass in a string of charger the year 2026 the color will be yellow is this car for sale let's say that is true as well then I will print car 3's attributes the model is charger the year is 2026 the color is yellow for sale is set to True with classes they can take up a lot of space for better organization you can place them within a new python file so let's cut our class and we will create a new python file within our project folder file new python file the name of this python file is going to be all lowercase car then we will paste the class that we cut originally class car which has a capital c so from our main python file we're going to import our car file our car module mod from the name of the module car import the name of the class car then when I run this program nothing should change we should still have access to all of our car objects you could either keep your classes within your main python file or import them if you would like to organize things let's talk about methods methods are actions that our objects can perform within our class we will Define a method of Drive self is going to be provided to us when we invoke the drive function let's print you drive the car what other things can cars do let's stop we will print you stop the car let's take car one access the drive method you drive the car car 2 also has a drive method you drive the car same thing with car 3 you drive the car let's access the stop method car one. stop car 2. stop and car 3. stop these methods are identical for each car object instead of printing the word car let's insert the model of the car I will convert these print statements to F strings instead of the word car let's add a placeholder let's add self. model self is referring to the object we're currently working with use the attribute AIS operator followed by the name of the attribute let's also do this with the stop method sell do model let's take car one use the drive method you drive the Mustang car one. stop you drive the Mustang you stop the Mustang let's do this with Car 2 you drive the Corvette you stop the Corvette car three you drive the charger you stop the charger now within our F strings let's also insert let's insert the color I'll add a placeholder self. color do this with stop as well self. color you drive the yellow charger you stop the yellow charger car one you drive the red Mustang you stop the red Mustang card two you Drive the blue Corvette you stop the blue Corvette let's add one last method let's create a method to describe our car we'll print the details of the car let's print I'll use an F string add three placeholders let's print self doye followed by self. color then self. model we'll take car 1 use the describe method that we created describe car 1 car 1 is a 2024 red Mustang describe Car 2 Car 2 is a 2025 blue Corvette car 3 is a 2026 yellow charger all right everybody so those are objects in Python an object is a bundle of related attrib attributes attributes are variables that an object has and methods methods are functions that belong to an object they Define what this object can do and well everybody that is a summary of objectoriented programming using python
