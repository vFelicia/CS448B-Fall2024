With timestamps:

00:00 - it's your bro hope you're doing well and
00:01 - in this video I'm going to show you guys
00:03 - how you can create your own custom
00:05 - functions in C++ so let's get into it
00:10 - well us programmers we like to reuse
00:12 - code when available and not have to
00:14 - repeat it unless it's necessary so you
00:16 - may encounter a situation where you find
00:18 - yourself repeating some code more times
00:20 - than what you would like so what if I
00:22 - told you there was a way where you can
00:24 - write some code only once and then you
00:26 - can call or reuse that code whenever you
00:28 - want well that's the benefit of a
00:30 - function and we're actually familiar
00:31 - with a few functions already in the last
00:34 - lesson we learned about the printf
00:35 - function another that comes to mind is
00:38 - the length function another is the app
00:42 - function and you may notice that these
00:45 - tend to end with a set of parentheses so
00:48 - with functions they perform some sort of
00:51 - task for us so what I'm going to teach
00:53 - you guys is how to create your own
00:54 - custom function to perform some tasks
00:57 - for you whenever you call it so I have
01:00 - an idea let's create a function that
01:02 - will display a greeting for us so this
01:05 - is the first step you'll want to do in
01:07 - order to create a function we're going
01:09 - to create this function before your main
01:11 - method and we're going to type in the
01:14 - word void and then we need to come up
01:17 - with a name for this function and your
01:20 - name should reflect the task that it
01:22 - performs if we're creating a welcome
01:25 - message we can simply name this function
01:28 - may be welcome and there's a common
01:31 - naming convention with functions you'll
01:34 - want to be sure that the first letter is
01:36 - lowercase then we'll need a set of
01:38 - parentheses and then a semicolon so this
01:41 - is step one we have declared a function
01:43 - what step two is that we want to define
01:46 - what it does so we can do that just by
01:49 - adding a set of curly brackets after the
01:52 - parentheses but before the semicolon
01:57 - that's good enough so we're going to
01:59 - write whatever we want this function to
02:02 - do when it's called within the curly
02:04 - braces so we can perform some sort of
02:07 - maybe message to display so we can see
02:10 - out welcome to my program okay we have
02:20 - successfully created a function named
02:22 - welcome when we
02:23 - call it it's going to do this whatever
02:25 - is between the set of curly braces here
02:28 - now going back to our main method we can
02:31 - call this function whenever we want to
02:32 - perform this task and in this instance
02:35 - we're just displaying one line of code
02:37 - or one message so in order to call a
02:40 - function we're going to type in the name
02:42 - of the function followed by a set of
02:44 - parentheses and then a semicolon at the
02:47 - end so we will perform this task every
02:51 - time we call this function so let's try
02:53 - it yeah welcome to my program just like
02:58 - we anticipated now we can keep on
03:01 - reusing this code too perhaps I want to
03:03 - display a second message well I'm just
03:05 - going to call the welcome function one
03:08 - more time so this will actually display
03:10 - this message twice then welcome to my
03:13 - program welcome to my program but I
03:16 - should probably add an end line after
03:19 - this just to make it look better okay so
03:22 - that's the basics of creating a function
03:24 - let's create another that displays a
03:27 - goodbye message so it's gonna be the
03:29 - same process as before so void maybe
03:32 - we'll call this goodbye set of
03:35 - parentheses then a set of curly braces
03:38 - and then a semicolon all right and then
03:40 - we will display a message that says
03:44 - goodbye yen deal all right so we have
03:50 - two functions now one named welcome and
03:53 - another named goodbye we can call either
03:55 - of these functions whenever we want in
03:57 - our program so for our example we'll
04:00 - call the welcome function and then we
04:02 - can call the goodbye function so goodbye
04:05 - parentheses semicolon let's try this yep
04:12 - welcome to my program goodbye
04:14 - well I believe we have the basics down
04:16 - for declaring and defining a very simple
04:19 - function but let's take it a step
04:21 - further let's take its level two now
04:23 - when you call a function you can also
04:25 - send to that function some information
04:27 - this can be a value a variable or even
04:30 - an object for example let's say that we
04:33 - want to send a name to our welcome
04:35 - function
04:36 - and that welcome function can do
04:38 - something with that name for example we
04:40 - can display a name that we send it along
04:42 - with our greeting so if you want to send
04:45 - a function some information when you
04:47 - call that function you're going to place
04:49 - whatever values you want to send that
04:51 - function within the parentheses let's
04:53 - send our welcome function maybe a first
04:55 - name so I'm just going to type in my
04:56 - first name as a string literal within
04:59 - the parentheses when we call this
05:00 - function so whenever you send a function
05:03 - some information these are called
05:05 - arguments it's the information that
05:07 - you're sending a function think of it
05:09 - like mail the mail or the letter that
05:12 - you're going to be sending is also
05:14 - referred to as an argument all right so
05:17 - this is step one step two with sending
05:19 - an argument to a function is that the
05:21 - function needs to be set up to actually
05:23 - receive this argument and this is done
05:26 - by setting the parameters of the
05:28 - function so within the parentheses of
05:30 - your function definition what we're
05:33 - going to do is that we are going to list
05:36 - the parameters of what we want this
05:39 - function to receive if we want to
05:41 - receive a string that's going to
05:43 - function as a name we're going to write
05:44 - the data type of this argument followed
05:48 - by a unique name for this value so we
05:51 - can just name this name alright so you
05:54 - can see that the red squiggle went away
05:56 - so we can now send a string that will
06:00 - function as a name to our Welcome
06:02 - function kind of like we're sending mail
06:04 - to this function and this function is
06:06 - going to take this name and it can do
06:07 - something with it so we could actually
06:09 - display our name along with the welcome
06:11 - message so I'm just going to add that
06:13 - here and this should work just fine then
06:15 - so let's try it
06:18 - welcome to my program bro now whenever
06:22 - you call a function and it has a set of
06:24 - parameters you need to send a matching
06:27 - set of arguments when you call this
06:29 - function for example if I were to take
06:31 - out this first name the string that I
06:33 - had here and attempted to call this
06:36 - function well there's not a matching set
06:38 - of parameters and arguments when we call
06:41 - this function so this would result in an
06:44 - error then so we can't actually do this
06:46 - unless we were to send some sort of
06:48 - string to this function so let's take
06:50 - this
06:50 - step further let's accept some user
06:52 - input and this time we're going to send
06:55 - two arguments maybe a string and then
06:58 - maybe an age so this will be an integer
07:00 - variable so we need to list the datatype
07:03 - here and then we will call this edge so
07:05 - we can no longer just send a string we
07:08 - also need to send a integer as well so
07:11 - maybe I'll just type in 18 so make sure
07:14 - that each argument is separated with a
07:17 - comma so let's change our program around
07:19 - a little bit so I'm going to copy this
07:22 - and paste it and I will just type in you
07:26 - our age years old there we go and now we
07:39 - have a matching set of arguments and
07:42 - parameters so now we can call this
07:44 - function and perform this task for us so
07:47 - let's try it
07:50 - welcome to my program bro you are 18 yo
07:54 - goodbye now we can send some variables
07:57 - and not just some hard values to a
07:59 - function and let's accept some user
08:01 - input from the user so we're going to
08:04 - declare a string variable named name and
08:07 - an integer variable named perhaps H and
08:11 - we will provide a prompt for the user to
08:14 - type these in enter your name then get
08:23 - line C in comma name just in case they
08:28 - type in a last name but I'm forgetting a
08:32 - semicolon there alright and we will do
08:35 - the same thing with age so C out enter
08:40 - your age en do semicolon C in age all
08:49 - right and now we can actually place
08:52 - variables here because they're going to
08:54 - store whatever values that we assigned
08:56 - to them so we're going to place a name
08:59 - variable and the age variable all right
09:03 - this should
09:04 - now let's try it and to your name bro
09:11 - Washington and to your edge 107 welcome
09:16 - to my program bro Washington you are 107
09:20 - years old
09:20 - oh and one quick note if you're sending
09:22 - some variables over to a function they
09:25 - do not have to have the same name so for
09:28 - example I have named an edge here that
09:30 - we're sending our function we can
09:31 - actually rename these when we receive
09:33 - them so for example I could change this
09:36 - to user name and user edge then you
09:41 - would have to change it to your two if
09:42 - you use them so user name and user edge
09:45 - and this would work just the same then
09:48 - so they don't have to have the same
09:50 - exact variable name if you send some
09:52 - variables over you can rename these
09:54 - alright let's take it a step further
09:56 - let's go to level 4 with functions at
09:59 - least I think we're on level 4 so we can
10:01 - have a function return something so
10:04 - normally we have these set to void this
10:06 - keyword is the return type and we're not
10:09 - currently returning anything when we
10:11 - call a function so I think it would be
10:14 - best if we started a whole new program
10:16 - and if you want to copy this I'll post
10:19 - it in the comments down below so don't
10:21 - worry but I think it would be best if we
10:23 - were to start fresh then well I have an
10:26 - idea let's create a program that will
10:28 - accept two numbers from a user and we
10:31 - will take those two numbers send them to
10:33 - a function the function will add them
10:35 - together and return the result so let's
10:38 - begin that program here let's create two
10:41 - values and these can be double variables
10:44 - so double number one and double number
10:50 - two C out will create a prompt to enter
10:55 - in the first number enter in number one
11:01 - okay then
11:03 - C in number one and let's do the same
11:09 - thing with number two
11:13 - enter in number two and see in number
11:17 - two not three two we're good all right
11:21 - so let's create a function that is named
11:24 - ad and we're going to send two double
11:29 - variables as arguments all right
11:36 - so now we need to create this function
11:38 - called IDI so before when we typed in
11:42 - void this is the return type so we want
11:46 - this function to return a result so we
11:50 - need to list the datatype of what we're
11:53 - returning here so we're going to be
11:55 - returning a double value so instead of
11:58 - void we're going to type in double
12:00 - because we're returning a double value
12:02 - then we're going to list the name of the
12:04 - function and we need to set up the
12:06 - parameters so we're going to receive a
12:09 - double value so we list the datatype
12:11 - here and we will call this maybe num1
12:14 - then we need to set up a second
12:17 - parameter so this is going to be double
12:20 - num2 let's define this function so a set
12:24 - of curly braces and then a semicolon so
12:28 - what do we want this function to do
12:30 - we're going to add these two numbers
12:31 - together we could call this double
12:35 - result we're going to declare and assign
12:39 - this variable right away so num1 plus
12:42 - num2
12:44 - all right lastly we just need to return
12:46 - the result back to this method called
12:51 - this function call so at the end of your
12:53 - function we're going to return whatever
12:55 - we want we're going to return our
12:57 - variable result all right so now when we
13:01 - call this function it's going to add
13:03 - these two numbers together and it's
13:05 - going to return a result but we need to
13:07 - do something with that result so here
13:09 - I'm just going to create a new variable
13:12 - we can call this double result equals
13:18 - whatever there is returned here when we
13:22 - call this function and lastly let's just
13:25 - display our output
13:27 - result so see out your result is result
13:35 - en DL okay let's try this then enter in
13:45 - number one three point five enter number
13:49 - two seven point one your result is ten
13:52 - point six yeah that seems right alright
13:56 - so that's what you do to return a value
13:59 - instead of using that void keyword you
14:03 - write down the data type of what you're
14:05 - returning exactly so just to reinforce
14:07 - this idea of returning a value if you
14:10 - call a function and it returns a value
14:12 - there's a datatype when you define this
14:15 - function the datatype when you define
14:18 - this function has to match the data type
14:20 - of the value that you're returning so if
14:23 - our variable result was maybe an integer
14:26 - we would want to change the return type
14:29 - when we define this function to also be
14:31 - an integer or if this was a string value
14:34 - we would also change the data type in
14:37 - our definition to be a string as well so
14:40 - make sure that the value you're
14:42 - returning and the data type in the
14:44 - definition also match and to my last tip
14:47 - for today is that if you are declaring a
14:49 - function you need to be sure to declare
14:51 - it before the main method because our
14:54 - programs work from the top and work
14:56 - their way down so if I were to move this
14:59 - declaration for this function and moved
15:01 - it to the end this would actually not
15:03 - work then we'll get an error and you can
15:06 - see that here so another trick is that
15:08 - for some reason if you do want your
15:11 - definition for your function to be after
15:14 - the main method you can actually simply
15:16 - just declare the function and not
15:18 - actually give a definition for it yet so
15:21 - you do need a definition before the main
15:23 - method so we'll write that here so that
15:26 - was double add and then we needed a set
15:30 - of parentheses and there were two
15:33 - parameters double num1 and double num2
15:37 - and then we're not going to add a set of
15:40 - curly braces we're just going to add a
15:42 - semicolon so this would work then yeah
15:47 - you can see it here it looks like it's
15:49 - working just fine so with your own
15:50 - program if you really want the
15:52 - definition to be after the main method
15:54 - you can do that but you'll want to be
15:57 - sure you're at least declaring this
15:59 - function before the main method at least
16:01 - but otherwise it depends on how you want
16:03 - your program organized I tend to just
16:06 - declare and define my functions before
16:09 - the main method so do whatever works for
16:11 - you then but I thought I would just
16:12 - mention that so that's the basics of
16:14 - creating functions if you would like a
16:16 - copy of the code we worked on today I'll
16:18 - include all of this in the comments down
16:20 - below both the first example and the
16:23 - second example that we both worked on
16:25 - and if you're looking for additional
16:26 - practice or a project to work on
16:28 - why don't you create your own function
16:30 - and post it in the comments down below
16:32 - but yeah that is how you can create your
16:35 - own custom functions in C++ hey you if
16:39 - you enjoyed this lesson then you can
16:41 - help me help you in three easy steps
16:44 - by smashing that like button drop a
16:46 - comment down below and subscribe if
16:48 - you'd like to become a fellow bro
16:50 - [Music]

Cleaned transcript:

it's your bro hope you're doing well and in this video I'm going to show you guys how you can create your own custom functions in C++ so let's get into it well us programmers we like to reuse code when available and not have to repeat it unless it's necessary so you may encounter a situation where you find yourself repeating some code more times than what you would like so what if I told you there was a way where you can write some code only once and then you can call or reuse that code whenever you want well that's the benefit of a function and we're actually familiar with a few functions already in the last lesson we learned about the printf function another that comes to mind is the length function another is the app function and you may notice that these tend to end with a set of parentheses so with functions they perform some sort of task for us so what I'm going to teach you guys is how to create your own custom function to perform some tasks for you whenever you call it so I have an idea let's create a function that will display a greeting for us so this is the first step you'll want to do in order to create a function we're going to create this function before your main method and we're going to type in the word void and then we need to come up with a name for this function and your name should reflect the task that it performs if we're creating a welcome message we can simply name this function may be welcome and there's a common naming convention with functions you'll want to be sure that the first letter is lowercase then we'll need a set of parentheses and then a semicolon so this is step one we have declared a function what step two is that we want to define what it does so we can do that just by adding a set of curly brackets after the parentheses but before the semicolon that's good enough so we're going to write whatever we want this function to do when it's called within the curly braces so we can perform some sort of maybe message to display so we can see out welcome to my program okay we have successfully created a function named welcome when we call it it's going to do this whatever is between the set of curly braces here now going back to our main method we can call this function whenever we want to perform this task and in this instance we're just displaying one line of code or one message so in order to call a function we're going to type in the name of the function followed by a set of parentheses and then a semicolon at the end so we will perform this task every time we call this function so let's try it yeah welcome to my program just like we anticipated now we can keep on reusing this code too perhaps I want to display a second message well I'm just going to call the welcome function one more time so this will actually display this message twice then welcome to my program welcome to my program but I should probably add an end line after this just to make it look better okay so that's the basics of creating a function let's create another that displays a goodbye message so it's gonna be the same process as before so void maybe we'll call this goodbye set of parentheses then a set of curly braces and then a semicolon all right and then we will display a message that says goodbye yen deal all right so we have two functions now one named welcome and another named goodbye we can call either of these functions whenever we want in our program so for our example we'll call the welcome function and then we can call the goodbye function so goodbye parentheses semicolon let's try this yep welcome to my program goodbye well I believe we have the basics down for declaring and defining a very simple function but let's take it a step further let's take its level two now when you call a function you can also send to that function some information this can be a value a variable or even an object for example let's say that we want to send a name to our welcome function and that welcome function can do something with that name for example we can display a name that we send it along with our greeting so if you want to send a function some information when you call that function you're going to place whatever values you want to send that function within the parentheses let's send our welcome function maybe a first name so I'm just going to type in my first name as a string literal within the parentheses when we call this function so whenever you send a function some information these are called arguments it's the information that you're sending a function think of it like mail the mail or the letter that you're going to be sending is also referred to as an argument all right so this is step one step two with sending an argument to a function is that the function needs to be set up to actually receive this argument and this is done by setting the parameters of the function so within the parentheses of your function definition what we're going to do is that we are going to list the parameters of what we want this function to receive if we want to receive a string that's going to function as a name we're going to write the data type of this argument followed by a unique name for this value so we can just name this name alright so you can see that the red squiggle went away so we can now send a string that will function as a name to our Welcome function kind of like we're sending mail to this function and this function is going to take this name and it can do something with it so we could actually display our name along with the welcome message so I'm just going to add that here and this should work just fine then so let's try it welcome to my program bro now whenever you call a function and it has a set of parameters you need to send a matching set of arguments when you call this function for example if I were to take out this first name the string that I had here and attempted to call this function well there's not a matching set of parameters and arguments when we call this function so this would result in an error then so we can't actually do this unless we were to send some sort of string to this function so let's take this step further let's accept some user input and this time we're going to send two arguments maybe a string and then maybe an age so this will be an integer variable so we need to list the datatype here and then we will call this edge so we can no longer just send a string we also need to send a integer as well so maybe I'll just type in 18 so make sure that each argument is separated with a comma so let's change our program around a little bit so I'm going to copy this and paste it and I will just type in you our age years old there we go and now we have a matching set of arguments and parameters so now we can call this function and perform this task for us so let's try it welcome to my program bro you are 18 yo goodbye now we can send some variables and not just some hard values to a function and let's accept some user input from the user so we're going to declare a string variable named name and an integer variable named perhaps H and we will provide a prompt for the user to type these in enter your name then get line C in comma name just in case they type in a last name but I'm forgetting a semicolon there alright and we will do the same thing with age so C out enter your age en do semicolon C in age all right and now we can actually place variables here because they're going to store whatever values that we assigned to them so we're going to place a name variable and the age variable all right this should now let's try it and to your name bro Washington and to your edge 107 welcome to my program bro Washington you are 107 years old oh and one quick note if you're sending some variables over to a function they do not have to have the same name so for example I have named an edge here that we're sending our function we can actually rename these when we receive them so for example I could change this to user name and user edge then you would have to change it to your two if you use them so user name and user edge and this would work just the same then so they don't have to have the same exact variable name if you send some variables over you can rename these alright let's take it a step further let's go to level 4 with functions at least I think we're on level 4 so we can have a function return something so normally we have these set to void this keyword is the return type and we're not currently returning anything when we call a function so I think it would be best if we started a whole new program and if you want to copy this I'll post it in the comments down below so don't worry but I think it would be best if we were to start fresh then well I have an idea let's create a program that will accept two numbers from a user and we will take those two numbers send them to a function the function will add them together and return the result so let's begin that program here let's create two values and these can be double variables so double number one and double number two C out will create a prompt to enter in the first number enter in number one okay then C in number one and let's do the same thing with number two enter in number two and see in number two not three two we're good all right so let's create a function that is named ad and we're going to send two double variables as arguments all right so now we need to create this function called IDI so before when we typed in void this is the return type so we want this function to return a result so we need to list the datatype of what we're returning here so we're going to be returning a double value so instead of void we're going to type in double because we're returning a double value then we're going to list the name of the function and we need to set up the parameters so we're going to receive a double value so we list the datatype here and we will call this maybe num1 then we need to set up a second parameter so this is going to be double num2 let's define this function so a set of curly braces and then a semicolon so what do we want this function to do we're going to add these two numbers together we could call this double result we're going to declare and assign this variable right away so num1 plus num2 all right lastly we just need to return the result back to this method called this function call so at the end of your function we're going to return whatever we want we're going to return our variable result all right so now when we call this function it's going to add these two numbers together and it's going to return a result but we need to do something with that result so here I'm just going to create a new variable we can call this double result equals whatever there is returned here when we call this function and lastly let's just display our output result so see out your result is result en DL okay let's try this then enter in number one three point five enter number two seven point one your result is ten point six yeah that seems right alright so that's what you do to return a value instead of using that void keyword you write down the data type of what you're returning exactly so just to reinforce this idea of returning a value if you call a function and it returns a value there's a datatype when you define this function the datatype when you define this function has to match the data type of the value that you're returning so if our variable result was maybe an integer we would want to change the return type when we define this function to also be an integer or if this was a string value we would also change the data type in our definition to be a string as well so make sure that the value you're returning and the data type in the definition also match and to my last tip for today is that if you are declaring a function you need to be sure to declare it before the main method because our programs work from the top and work their way down so if I were to move this declaration for this function and moved it to the end this would actually not work then we'll get an error and you can see that here so another trick is that for some reason if you do want your definition for your function to be after the main method you can actually simply just declare the function and not actually give a definition for it yet so you do need a definition before the main method so we'll write that here so that was double add and then we needed a set of parentheses and there were two parameters double num1 and double num2 and then we're not going to add a set of curly braces we're just going to add a semicolon so this would work then yeah you can see it here it looks like it's working just fine so with your own program if you really want the definition to be after the main method you can do that but you'll want to be sure you're at least declaring this function before the main method at least but otherwise it depends on how you want your program organized I tend to just declare and define my functions before the main method so do whatever works for you then but I thought I would just mention that so that's the basics of creating functions if you would like a copy of the code we worked on today I'll include all of this in the comments down below both the first example and the second example that we both worked on and if you're looking for additional practice or a project to work on why don't you create your own function and post it in the comments down below but yeah that is how you can create your own custom functions in C++ hey you if you enjoyed this lesson then you can help me help you in three easy steps by smashing that like button drop a comment down below and subscribe if you'd like to become a fellow bro
