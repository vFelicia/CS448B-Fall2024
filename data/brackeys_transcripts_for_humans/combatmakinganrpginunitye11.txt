With timestamps:

00:02 - so it's the last video on gameplay in
00:04 - the RPG series at least for now
00:05 - congratulations if you've gone this far
00:07 - today we are going to be doing combat
00:09 - and after that it's really up to you
00:11 - Sebastian will still be doing some more
00:12 - videos on implementing graphics he'll be
00:14 - adding a cool enemy model and doing
00:16 - rectal effects and all that fun stuff
00:18 - but I've actually covered all the stuff
00:20 - that I wanted to cover which also means
00:22 - that if you've been following along this
00:24 - far you should have made some pretty
00:25 - cool games as well I would really like
00:27 - to see what you guys have made using
00:29 - this series so if you haven't already
00:30 - tweet me a link or a picture or a gif or
00:33 - something on Twitter at brakus tweet
00:35 - that would be so cool to see on that
00:37 - let's get into the final episode so
00:38 - first let's go to scripts and it's
00:40 - right-click go create c-sharp script and
00:43 - let's create a script that will sit on
00:44 - both our player and our enemy called
00:47 - character combat let's then select that
00:49 - player an enemy and drag it on there now
00:52 - let's open up the script in Visual
00:54 - Studio and the first most essential
00:55 - thing we want to have in here is a
00:57 - public method for attacking so public
01:00 - void attack and this is going to take in
01:02 - a character stance which is going to be
01:05 - the stats of the target that we want to
01:07 - attack so that's called this target
01:08 - stats and now we can actually go
01:11 - straight in here and write Target stats
01:13 - dot take damage and then give it some
01:16 - amount of damage however the amount of
01:18 - damage that we want to do completely
01:19 - depends on the attacking characters
01:21 - stats so we also want a reference to
01:23 - this character stats to that let's
01:25 - create a private variable of type
01:27 - character stats let's call it my stats
01:30 - then inside of the start method let's
01:33 - set my stats equal to get component of
01:36 - type character stats of course we then
01:39 - have to make sure that any object with a
01:41 - character combat also has a character
01:43 - stat component attached I will do that
01:45 - by using require component up here type
01:48 - of character stats now down here instead
01:51 - of writing 20 we can go my stats
01:54 - damage get value and that's the very
01:58 - foundation of our character combat if we
02:00 - save that and go into unity we need to
02:03 - find the place where we trigger this
02:05 - code well we want that to happen
02:06 - whenever we interact with the enemy and
02:09 - remember the enemy component which
02:11 - derives from interactable has a method
02:13 - hold interact which is called whenever
02:15 - we interact with it and we've even
02:17 - inserted a comment here where we say
02:19 - attack the enemy let's open up the
02:21 - script and here we can now trigger an
02:23 - attack but to do that we need a
02:24 - reference to our player well here we can
02:26 - use the fact that in the previous video
02:28 - we created a player manager that always
02:30 - has a reference to the player so up here
02:32 - let's create a player manager call it
02:35 - player manager and in the start method
02:38 - we can set player manager equal to our
02:41 - player manager instance then when we
02:43 - decide to attack we can get a reference
02:45 - to the character combat on our player to
02:47 - do that we use player manager dot player
02:49 - and we then call get component of type
02:52 - character combat let's store this in
02:55 - another variable called character combat
02:58 - and we can just call this something like
02:59 - player combat then just to make sure
03:01 - that we are safe we are going to check
03:03 - if player combat is not equal to null in
03:06 - which case we can go ahead and attack so
03:08 - play a combat dot attack and here we
03:11 - need to specify the target stats for our
03:14 - player well that is of course going to
03:15 - be the enemy itself let's create another
03:17 - component of type character stats let's
03:21 - again call this my stats and in the
03:23 - start method we simply set my stats
03:25 - equal to get component of type character
03:28 - stats and just like we did in the last
03:30 - script we make sure to always have this
03:32 - component on the object now down here
03:36 - when we attack we simply want the player
03:38 - to attack my stats if we now save this
03:41 - and go into unity and hit play we should
03:44 - be able to right click on our enemy and
03:46 - a player will walk right up and start
03:49 - interacting and right away we can see
03:50 - that the enemy takes damage based on our
03:53 - players damage we go back here and equip
03:56 - say the helmet which I know gives a
03:58 - damage buff and then equip it we can see
04:00 - that we now do a greater amount of
04:02 - damage however we can actually spam this
04:04 - button quite a bit and as you can see if
04:07 - we keep doing that our enemy will die
04:09 - that's all fine and dandy but we
04:10 - probably want it cool down on our attack
04:13 - to do that let's open up our character
04:15 - combat and let's create a public float
04:18 - called attack speed let's just default
04:21 - this to one now here you get to set an
04:23 - attack speed for each individual
04:24 - character but since we already have
04:26 - characters
04:27 - that's implemented you can easily make
04:28 - attack speed influenced by the character
04:30 - stats that's something that a lot of
04:32 - games do but for the sake of simplicity
04:34 - I'm just gonna put it here then we can
04:36 - have a private float and we'll call this
04:38 - the attack cooldown this is going to
04:41 - default to zero then every frame so
04:43 - inside of update we want to reduce
04:45 - attack cooldown a tiny bit so we
04:48 - subtract by time.deltatime and when we
04:51 - then decide to attack we check if our
04:53 - attack cooldown has gone below zero and
04:56 - if it has we're ready to attack again so
04:58 - we can go ahead and call take damage on
05:00 - our target stats right after we attacked
05:02 - we also want to set our tech cooldown
05:04 - back so we'll set attack cooldown equal
05:06 - to 1 divided by our attack speed so the
05:10 - greater the attack speed the small did
05:11 - the cool down awesome if we were to save
05:14 - this now and go into unity and hit play
05:16 - we should see that we can still attack
05:17 - but if we spend this button now you can
05:20 - see it says interacting with enemy a lot
05:22 - but only every 1 second it's going to
05:24 - say enemy takes 2 damage so a system is
05:26 - working let's get rid of this annoying
05:28 - spam by opening this up in visual studio
05:30 - just commenting out this message so now
05:32 - no matter how fast I click it's only
05:35 - going to take damage every 1 second and
05:36 - we can adjust this for our player and
05:38 - our enemy independently but our enemy
05:41 - isn't attacking at the moment to change
05:43 - this let's go to our enemy and let's
05:45 - open up the enemy controller in here
05:47 - we've actually already specified the
05:49 - place where we want to attack the target
05:51 - to do that we first need a reference to
05:53 - the character combat sitting on our
05:54 - enemy so you guessed it we're going to
05:56 - go in here and create a character combat
05:58 - variable called say combat and then in
06:01 - the start we can set combat equal to get
06:03 - component of type character combat and
06:05 - then when we decide to attack we can go
06:08 - combat dot attack and again we need to
06:11 - give it a target stats for this we can
06:14 - use our target variable we instantly go
06:16 - target get component of type character
06:19 - stats and we can store this in a
06:21 - character stats variable called target
06:24 - stats just to be sure that we don't get
06:26 - any errors will check if target stats is
06:29 - not equal to null in which case we are
06:32 - ready to go ahead and attack and now we
06:34 - can input target stats into our attack
06:37 - method if we now save this go into unity
06:39 - and hit
06:40 - play we can then walk up to our enemy
06:42 - and once it gets close enough you will
06:44 - see it attacking every one second and if
06:46 - it keeps doing this long enough you can
06:48 - see that our health will finally reach
06:49 - zero and it's going to say player died
06:52 - but currently nothing happens
06:54 - that's because inside of our players
06:56 - stats we're not overriding the die
06:58 - method so here let's create a public
07:00 - override void called die we're called
07:04 - base that died and then we can go ahead
07:06 - and kill the player in some way this
07:09 - could be done by playing a player death
07:11 - animation followed by a game over screen
07:13 - you could pull up a prompt allowing the
07:15 - player to respawn for some penalty or
07:18 - you could simply restart the level
07:20 - in our case we're just going to restart
07:21 - the scene but you can really fill in
07:23 - anything you'd like here but I don't
07:25 - think restarting the scene makes a lot
07:27 - of sense inside our players stats method
07:29 - instead let's call a method on our
07:31 - player manager dot instance code say
07:34 - kill player now we can open up our
07:36 - player manager and here let's create a
07:38 - public void called kill player and all
07:42 - we are going to do here is reload the
07:44 - scene so we'll be using unity engine dot
07:47 - scene management and to load a new scene
07:49 - will go scene manager dot load scene and
07:52 - the scene that we want to load is the
07:53 - currently loaded scene so scene manager
07:56 - get active scene and now we have to do
07:59 - dot build index and close that off so
08:02 - now whenever the player dies it's going
08:04 - to call a method on the play manager
08:06 - called kill player and this method is
08:08 - then going to restart the scene we have
08:10 - serial delays or animation in here I'll
08:12 - leave that up to you to add now when we
08:14 - play get closer to our enemy I'm just
08:16 - gonna select him and bump up the damage
08:18 - so this won't take forever we can see
08:20 - that as soon as we get killed our level
08:22 - gets restarted and we're back to default
08:24 - you can also maybe see a slight bug with
08:27 - our lighting this is something that only
08:29 - happens in the editor but if it's
08:31 - annoying you a whole lot you can always
08:33 - go to the lining panel and disable
08:35 - auto-generate and then hit generate
08:37 - lighting now if we did play and get
08:40 - closer to our enemy and died once more
08:42 - you can see that our lighting States the
08:44 - same however you will have to make sure
08:46 - to go into a lighting panel and
08:47 - regenerate lighting every time you
08:49 - change something about your lighting or
08:51 - environment just keep that in mind I'm
08:53 - just going to
08:53 - it back to auto-generate so now our
08:55 - combat system is working there just a
08:57 - few things that we want to add in order
08:59 - to make it easier when we add combat
09:01 - animation I think the best thing is
09:02 - going to appreciate that one thing is
09:04 - under character combat we need to add an
09:06 - attack delay because currently our
09:08 - attack happens immediately and in
09:11 - reality when dealing with the tank
09:12 - animations you probably don't want to do
09:14 - damage until we reach the point in the
09:15 - animation where we actually do the
09:17 - slicing so let's create a quick
09:19 - co-routine that will allow us to delay
09:21 - or damage to do that we'll right
09:23 - ienumerator we call this do damage we'll
09:26 - take in a character stats just call this
09:29 - stats and it flowed with the delay then
09:32 - we'll wait X amount of seconds as
09:34 - specified by our delay so we'll write
09:36 - yield return new wait for seconds I will
09:40 - put in delay and now we are ready to do
09:42 - the damage so let's take our line up
09:44 - here where we call take damage and paste
09:47 - it down here and here it's not called
09:49 - target stats but just stats and then up
09:51 - here we can simply trigger the kuroh
09:53 - teen so we'll write start co-routine
09:55 - it's called do damage we put in our
09:58 - target stats and we can put in a delay
10:00 - of say one second or even better that's
10:03 - actually make this into a variable so
10:05 - let's create a public float attack delay
10:08 - and set this equal to something like
10:10 - point six by default we then take our
10:12 - attack delay and put it down here and
10:15 - then round off the line with a semicolon
10:16 - now when we save go into unity and hit
10:19 - play because we don't have a tag
10:21 - animations yet the change is going to be
10:22 - very subtle but you should see that when
10:24 - we now attack the enemy there's a slight
10:26 - delay finally when we create an animator
10:28 - controller we also want to notify it
10:30 - whenever we attack to do that let's
10:32 - create a simple callback method and
10:34 - we'll do this using a bit different
10:35 - syntax that we've done before this time
10:37 - we'll write public event system action
10:41 - and we'll call this action on attack now
10:44 - this is basically just a really quick
10:46 - and easy way to create a delicate with a
10:48 - return type of void so we don't return
10:51 - anything and with no arguments we also
10:53 - go through and create the delegate in
10:55 - the same way we've done previously but
10:56 - this is just a lot shorter and easier
10:58 - then down in our attack method will
11:01 - simply make sure to trigger this so if
11:03 - an attack is not equal to null well then
11:05 - we want to call
11:07 - attack and you can see how little syntax
11:08 - is required here and that should pretty
11:10 - much be it for our combat system I wish
11:12 - I had some kind of happy dance animation
11:14 - for this guy to play I think we need to
11:16 - spend Sebastian about that in the
11:17 - comments
11:18 - let's pretty much it for this video
11:20 - congratulations
11:21 - if you made it this far you've completed
11:22 - the entire gameplay part of this series
11:24 - and you are truly awesome thank you so
11:27 - much for following along through all of
11:28 - these videos I hope you enjoyed it as
11:30 - much as I did from here there's still a
11:32 - lot of stuff that you can add to your
11:33 - game I recommend checking out some of my
11:35 - other videos to see if they might make
11:36 - your game better I have one on creating
11:38 - a dialogue system which I know a lot of
11:40 - RPGs need or maybe one on adding audio
11:42 - if you want to create a larger and more
11:44 - interesting environment definitely check
11:45 - out the Mayan temple pack that we
11:47 - recently released on dev assets and just
11:49 - subscribe for more general unity
11:51 - goodness so thank you again so much for
11:53 - watching if you like this series and
11:54 - want to see similar content in the
11:55 - future you can always support me at
11:57 - patreon patreon is an awesome way for
11:59 - you to donate a monthly amount of your
12:01 - choosing
12:01 - it really helps keep us going if that
12:04 - sounds like something you want to do you
12:05 - can go to patreon.com/scishow
12:07 - I'm that thanks for watching and I will
12:09 - see you in the next video thanks of the
12:11 - awesome patreon supporters who donated
12:13 - in Arcis and especially thanks to hence
12:15 - often Derek hems Kirk Faison Merrifield
12:17 - yes / magazine James P psychic mommy
12:19 - Jason Lotito Erin Robert Bund who some
12:22 - Kazaa and Judah Minh if you want to
12:23 - become a patron yourself you can do so
12:25 - at patreon.com slash break ease thanks a
12:27 - lot guys

Cleaned transcript:

so it's the last video on gameplay in the RPG series at least for now congratulations if you've gone this far today we are going to be doing combat and after that it's really up to you Sebastian will still be doing some more videos on implementing graphics he'll be adding a cool enemy model and doing rectal effects and all that fun stuff but I've actually covered all the stuff that I wanted to cover which also means that if you've been following along this far you should have made some pretty cool games as well I would really like to see what you guys have made using this series so if you haven't already tweet me a link or a picture or a gif or something on Twitter at brakus tweet that would be so cool to see on that let's get into the final episode so first let's go to scripts and it's rightclick go create csharp script and let's create a script that will sit on both our player and our enemy called character combat let's then select that player an enemy and drag it on there now let's open up the script in Visual Studio and the first most essential thing we want to have in here is a public method for attacking so public void attack and this is going to take in a character stance which is going to be the stats of the target that we want to attack so that's called this target stats and now we can actually go straight in here and write Target stats dot take damage and then give it some amount of damage however the amount of damage that we want to do completely depends on the attacking characters stats so we also want a reference to this character stats to that let's create a private variable of type character stats let's call it my stats then inside of the start method let's set my stats equal to get component of type character stats of course we then have to make sure that any object with a character combat also has a character stat component attached I will do that by using require component up here type of character stats now down here instead of writing 20 we can go my stats damage get value and that's the very foundation of our character combat if we save that and go into unity we need to find the place where we trigger this code well we want that to happen whenever we interact with the enemy and remember the enemy component which derives from interactable has a method hold interact which is called whenever we interact with it and we've even inserted a comment here where we say attack the enemy let's open up the script and here we can now trigger an attack but to do that we need a reference to our player well here we can use the fact that in the previous video we created a player manager that always has a reference to the player so up here let's create a player manager call it player manager and in the start method we can set player manager equal to our player manager instance then when we decide to attack we can get a reference to the character combat on our player to do that we use player manager dot player and we then call get component of type character combat let's store this in another variable called character combat and we can just call this something like player combat then just to make sure that we are safe we are going to check if player combat is not equal to null in which case we can go ahead and attack so play a combat dot attack and here we need to specify the target stats for our player well that is of course going to be the enemy itself let's create another component of type character stats let's again call this my stats and in the start method we simply set my stats equal to get component of type character stats and just like we did in the last script we make sure to always have this component on the object now down here when we attack we simply want the player to attack my stats if we now save this and go into unity and hit play we should be able to right click on our enemy and a player will walk right up and start interacting and right away we can see that the enemy takes damage based on our players damage we go back here and equip say the helmet which I know gives a damage buff and then equip it we can see that we now do a greater amount of damage however we can actually spam this button quite a bit and as you can see if we keep doing that our enemy will die that's all fine and dandy but we probably want it cool down on our attack to do that let's open up our character combat and let's create a public float called attack speed let's just default this to one now here you get to set an attack speed for each individual character but since we already have characters that's implemented you can easily make attack speed influenced by the character stats that's something that a lot of games do but for the sake of simplicity I'm just gonna put it here then we can have a private float and we'll call this the attack cooldown this is going to default to zero then every frame so inside of update we want to reduce attack cooldown a tiny bit so we subtract by time.deltatime and when we then decide to attack we check if our attack cooldown has gone below zero and if it has we're ready to attack again so we can go ahead and call take damage on our target stats right after we attacked we also want to set our tech cooldown back so we'll set attack cooldown equal to 1 divided by our attack speed so the greater the attack speed the small did the cool down awesome if we were to save this now and go into unity and hit play we should see that we can still attack but if we spend this button now you can see it says interacting with enemy a lot but only every 1 second it's going to say enemy takes 2 damage so a system is working let's get rid of this annoying spam by opening this up in visual studio just commenting out this message so now no matter how fast I click it's only going to take damage every 1 second and we can adjust this for our player and our enemy independently but our enemy isn't attacking at the moment to change this let's go to our enemy and let's open up the enemy controller in here we've actually already specified the place where we want to attack the target to do that we first need a reference to the character combat sitting on our enemy so you guessed it we're going to go in here and create a character combat variable called say combat and then in the start we can set combat equal to get component of type character combat and then when we decide to attack we can go combat dot attack and again we need to give it a target stats for this we can use our target variable we instantly go target get component of type character stats and we can store this in a character stats variable called target stats just to be sure that we don't get any errors will check if target stats is not equal to null in which case we are ready to go ahead and attack and now we can input target stats into our attack method if we now save this go into unity and hit play we can then walk up to our enemy and once it gets close enough you will see it attacking every one second and if it keeps doing this long enough you can see that our health will finally reach zero and it's going to say player died but currently nothing happens that's because inside of our players stats we're not overriding the die method so here let's create a public override void called die we're called base that died and then we can go ahead and kill the player in some way this could be done by playing a player death animation followed by a game over screen you could pull up a prompt allowing the player to respawn for some penalty or you could simply restart the level in our case we're just going to restart the scene but you can really fill in anything you'd like here but I don't think restarting the scene makes a lot of sense inside our players stats method instead let's call a method on our player manager dot instance code say kill player now we can open up our player manager and here let's create a public void called kill player and all we are going to do here is reload the scene so we'll be using unity engine dot scene management and to load a new scene will go scene manager dot load scene and the scene that we want to load is the currently loaded scene so scene manager get active scene and now we have to do dot build index and close that off so now whenever the player dies it's going to call a method on the play manager called kill player and this method is then going to restart the scene we have serial delays or animation in here I'll leave that up to you to add now when we play get closer to our enemy I'm just gonna select him and bump up the damage so this won't take forever we can see that as soon as we get killed our level gets restarted and we're back to default you can also maybe see a slight bug with our lighting this is something that only happens in the editor but if it's annoying you a whole lot you can always go to the lining panel and disable autogenerate and then hit generate lighting now if we did play and get closer to our enemy and died once more you can see that our lighting States the same however you will have to make sure to go into a lighting panel and regenerate lighting every time you change something about your lighting or environment just keep that in mind I'm just going to it back to autogenerate so now our combat system is working there just a few things that we want to add in order to make it easier when we add combat animation I think the best thing is going to appreciate that one thing is under character combat we need to add an attack delay because currently our attack happens immediately and in reality when dealing with the tank animations you probably don't want to do damage until we reach the point in the animation where we actually do the slicing so let's create a quick coroutine that will allow us to delay or damage to do that we'll right ienumerator we call this do damage we'll take in a character stats just call this stats and it flowed with the delay then we'll wait X amount of seconds as specified by our delay so we'll write yield return new wait for seconds I will put in delay and now we are ready to do the damage so let's take our line up here where we call take damage and paste it down here and here it's not called target stats but just stats and then up here we can simply trigger the kuroh teen so we'll write start coroutine it's called do damage we put in our target stats and we can put in a delay of say one second or even better that's actually make this into a variable so let's create a public float attack delay and set this equal to something like point six by default we then take our attack delay and put it down here and then round off the line with a semicolon now when we save go into unity and hit play because we don't have a tag animations yet the change is going to be very subtle but you should see that when we now attack the enemy there's a slight delay finally when we create an animator controller we also want to notify it whenever we attack to do that let's create a simple callback method and we'll do this using a bit different syntax that we've done before this time we'll write public event system action and we'll call this action on attack now this is basically just a really quick and easy way to create a delicate with a return type of void so we don't return anything and with no arguments we also go through and create the delegate in the same way we've done previously but this is just a lot shorter and easier then down in our attack method will simply make sure to trigger this so if an attack is not equal to null well then we want to call attack and you can see how little syntax is required here and that should pretty much be it for our combat system I wish I had some kind of happy dance animation for this guy to play I think we need to spend Sebastian about that in the comments let's pretty much it for this video congratulations if you made it this far you've completed the entire gameplay part of this series and you are truly awesome thank you so much for following along through all of these videos I hope you enjoyed it as much as I did from here there's still a lot of stuff that you can add to your game I recommend checking out some of my other videos to see if they might make your game better I have one on creating a dialogue system which I know a lot of RPGs need or maybe one on adding audio if you want to create a larger and more interesting environment definitely check out the Mayan temple pack that we recently released on dev assets and just subscribe for more general unity goodness so thank you again so much for watching if you like this series and want to see similar content in the future you can always support me at patreon patreon is an awesome way for you to donate a monthly amount of your choosing it really helps keep us going if that sounds like something you want to do you can go to patreon.com/scishow I'm that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in Arcis and especially thanks to hence often Derek hems Kirk Faison Merrifield yes / magazine James P psychic mommy Jason Lotito Erin Robert Bund who some Kazaa and Judah Minh if you want to become a patron yourself you can do so at patreon.com slash break ease thanks a lot guys
