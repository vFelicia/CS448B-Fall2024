With timestamps:

00:00 - thanks for tuning in at
00:02 - braies hello everyone and welcome to
00:05 - video number 17 in make a game a cool
00:08 - series on making a video game in unity
00:11 - So today we're going to be taking a look
00:13 - at something that has been requested
00:15 - quite a lot which is U player spawn
00:18 - points more specifically we're going to
00:20 - take a look at checkpoints so until now
00:23 - whenever our player has died we've
00:25 - simply restarted the scene but what I
00:28 - want to do now is I want to uh have some
00:31 - points scattered out throughout our
00:32 - level which our player will respawn on
00:35 - if he's reached that point then later we
00:39 - can expand and maybe have um some kind
00:42 - of of Life limit uh before the score
00:45 - runs out and all that uh but right now
00:47 - we're just going to set up the
00:49 - checkpoint system itself as always if
00:52 - you have any questions throughout this
00:53 - video I suggest you head over to forum.
00:55 - bra.com where there are many people who
00:58 - are just waiting to answer your
01:00 - questions um I'm also often here as much
01:03 - as I can be and uh you can see that
01:06 - there are a lot of replies on each
01:08 - thread so it's it's very rare that a
01:11 - thread go
01:12 - unanswered cool so as always I've opened
01:15 - up unity and uh I've uh I'm currently
01:19 - using a Unity 4.6 it's out of beta and
01:22 - and now just available uh so as you can
01:26 - see my current version is 4.6 just so
01:28 - you know
01:30 - uh 4.6 also introduces this 2D view up
01:34 - here uh which I've just clicked because
01:37 - we are going to be using or placing some
01:39 - spawn points and uh it makes sense to
01:42 - place them in a 2d view because we are
01:44 - not really using the z-axis when it
01:47 - comes to stuff like
01:48 - that cool so the first thing I want to
01:51 - do here is just select our ball and have
01:54 - a look at how it's currently set up so
01:56 - if we go under a ball Health script
01:58 - which currently handles our health and
02:01 - are respawning uh we can double click
02:03 - that to open it up in mono develop and
02:06 - will open up here I'm just going to zoom
02:08 - in on the code here so you have an
02:10 - easier time reading this and uh let's
02:13 - just maximize it also cool so what we
02:17 - can see here is that we currently have
02:19 - an update function that checks if re is
02:22 - restarting is uh
02:25 - true uh or is false and if it is uh it
02:29 - it starts our level so uh you can see we
02:32 - have an if statement that's checks if we
02:34 - fell below our Max fall distance and uh
02:38 - if if we have it's going to restart our
02:40 - level and make sure to do it just once
02:42 - using this Boolean and inside of the
02:44 - restart level function uh we set first
02:47 - of all is restarting to true we then do
02:50 - some audio work we then work uh wait for
02:53 - the audio clip to stop playing and load
02:55 - the new level and this right here is
02:59 - basically where we can replace uh is is
03:02 - basically what we're going to be
03:03 - replacing so instead of using
03:05 - application. load level and just
03:08 - restarting the level we are going to
03:10 - teleport our player to the nearest spawn
03:13 - or to the furthest spawn point that the
03:16 - player has reached so right here I'm
03:19 - just currently going to say debug.log
03:24 - teleport
03:26 - player like this and it's save
03:30 - so just so we know that that's where
03:32 - we're going to teleport our player but
03:34 - first we need a place to teleport him to
03:37 - so in order to do this let's create an
03:39 - empty game object by pressing control
03:41 - shift n or command shift n if you're on
03:43 - a Mac let's rename this to check point
03:48 - let's zero out the transform by right
03:50 - clicking and hitting reset so a position
03:53 - of zero and a rotation of zero now let's
03:56 - make sure that we're not using the 2D
03:58 - editing tools but instead using the
04:00 - normal transform tools here so we can
04:03 - see and place our object as we want to
04:07 - and let's just move it over here on the
04:09 - third
04:10 - block just somewhere around here it's
04:14 - going to be fine now uh we can go ahead
04:17 - and Mark our checkpoint so we can easily
04:19 - find it in our scene and in order to do
04:21 - this we simply use this drop- down menu
04:23 - uh right to the left of our uh of our
04:26 - object name and we can select some
04:28 - different icons so I'm simply going to
04:30 - select maybe a blue one and you can see
04:33 - that it automatically inserts the
04:35 - checkpoint name uh you could also do
04:37 - some kind of of uh icon like a star or
04:40 - something but I think that uh having
04:43 - descriptive names is often best what we
04:46 - can then do is add a component and this
04:48 - is going to be a physics component and
04:51 - it's going to be a box collider you can
04:53 - go ahead and use a sphere collider but
04:56 - what is awesome about the Box collider
04:58 - is that we can stretch it a lot along
05:00 - the wire and this is simply going to act
05:02 - as a trigger uh that checks if our uh
05:06 - our ball has passed through this point
05:09 - let's say you had a ball that went over
05:11 - here and then down and then around and
05:13 - all that then I would suggest you either
05:16 - um uh didn't stretch this box collider
05:19 - out so much and maybe just made it
05:21 - smaller or you could just go ahead and
05:23 - use a sphere collider instead so if we
05:26 - remove this component and add a physics
05:29 - V collider and then simply bump up the
05:31 - radius here you can see that's going to
05:33 - work just fine as well I'm just for this
05:36 - game as is um actually let's just keep
05:39 - the sphere component I almost like that
05:42 - better so let's just change the radius
05:44 - here to something like
05:45 - 3.5 maybe just four I don't mind this
05:49 - being uh too large uh it's going to save
05:52 - our checkpoint as soon as we inser the
05:54 - radius uh so let's just do three and uh
05:58 - move it up a bit
06:00 - so if we pass through this point uh we
06:03 - want of course to set this uh place we
06:06 - want to spawn to this checkpoint right
06:09 - here um so what we want to do is we want
06:12 - to hit add component new script and then
06:15 - it's going to be of type JavaScript and
06:17 - we're going simply going to call this
06:19 - checkpoint because it's going to store
06:21 - all of the stuff that we need to do with
06:24 - checkpoints now we create an ad double
06:27 - click it to open it up in mono develop
06:30 - and we can just go ahead and delete our
06:31 - both our function start in our function
06:33 - update we're going to be making our own
06:35 - function and this is going to be a ont
06:39 - trigger enter and this is very important
06:42 - that you type it in exactly like this
06:45 - because uh if you get this wrong it's
06:47 - not going to be called and it's going to
06:49 - be very hard to debug because you're not
06:51 - going to get an error if you don't Ty it
06:53 - right it's just not going to work so
06:56 - please check your spelling uh then in
06:59 - inside of these parentheses we are first
07:01 - going to um or what we're going to do
07:04 - inside these parentheses is we're going
07:06 - to store some information about what has
07:09 - entered our trigger and uh then we're
07:12 - going to call it something so we can
07:14 - reference it later so what we're going
07:17 - to call this information um maybe we
07:19 - could do call for collider because some
07:22 - kind of collider has obviously enter
07:24 - that trigger so I'm just going to call
07:26 - it call and it's going to be of type
07:29 - Ider and the collider class here stores
07:33 - all kinds of information it has the
07:35 - transform and therefore the position and
07:37 - rotation it has the name the tag all of
07:41 - the uh components um on the object is
07:45 - also something we can get so we can
07:48 - basically excuse me we can basically use
07:50 - this class to to get all of the
07:52 - information that we want from the uh
07:55 - object that has ins trigger and then I'm
07:58 - going to open up these uh brackets
08:01 - here cool and inside of this function
08:05 - what we want to do is we want to set
08:07 - this kind of global variable to this
08:11 - specific point so let's first go ahead
08:14 - and create a global variable that uh
08:17 - it's it's just going to be one of so we
08:19 - we're going to make make it static and
08:21 - what static means is that it's not bound
08:24 - to any specific version of the
08:26 - checkpoint but it's just one single a
08:29 - global variable that all the checkpoints
08:32 - and other objects can access so if
08:35 - that's confusing to you please bear with
08:37 - me but uh just see how uh I write this
08:40 - out and you might understand it later so
08:42 - let's write static V and we are going to
08:45 - call this um reached point maybe because
08:50 - it's going to store the furthest point
08:53 - that we've reached and uh it's going to
08:55 - be of type Vector 3 and a vector 3 just
08:59 - stores three values and that's going to
09:01 - be our X Y and Z so a vector 3 basically
09:06 - just looks like this um just like uh
09:09 - cartisian
09:11 - coordinates so 2 comma 0 comma 4 for
09:15 - example that's an example of a vector 3
09:19 - so inside of this on trigger entry first
09:22 - thing we want to do is we want to check
09:24 - if it's the player that has entered our
09:26 - collider and not something like the
09:28 - ground
09:29 - so in order to do this we're going to
09:31 - type if call because that's the
09:35 - information about what has entered dot
09:38 - tag is equal to player so if the
09:42 - collider that has entered uh has a tag
09:45 - call player then it's going to call the
09:48 - code that we insert down here and
09:50 - therefore we need to make sure that our
09:51 - ball is indeed tagged as player if not
09:54 - go ahead and add the tag and make sure
09:56 - to tag it
09:57 - here great great so now we know that
10:00 - it's the player that we are colliding
10:03 - with then what we can go ahead and do is
10:05 - simply uh say that our reached point is
10:09 - going to be equal to this collider's
10:13 - position so collider do
10:16 - transform.position
10:22 - oops um or even easier maybe because uh
10:27 - we could just set this to transform that
10:29 - position I actually like that better so
10:32 - if uh what is colliding is the player
10:35 - then we're going to set the point that
10:37 - we reach reached to the current position
10:40 - of our
10:42 - checkpoint but there's one issue with
10:45 - this and I'll just go ahead and show it
10:47 - to you so if we go under our ball Health
10:49 - script instead of uh calling teleport
10:52 - player here we are simply going to say
10:56 - checkpoint Dot and now we can access are
10:59 - static varibles so we're going to just
11:01 - say checkpoint do reached
11:04 - [Music]
11:06 - Point like this and then we can simply
11:09 - set our pos position equal to that so
11:12 - transform. position equals checkpoint do
11:15 - reached point this way we don't need to
11:18 - access a specific checkpoint we can just
11:20 - say any checkpoint has this variable
11:24 - called reached point and we're going to
11:27 - set our position equal to that
11:29 - so now let's save this let's also save
11:32 - the checkpoint and let's head into
11:34 - unity and what we can do is uh simply
11:38 - jump over here and uh try and uh fall
11:41 - down so jump over here and this is where
11:45 - our collider should be uh but you can
11:47 - see that that's currently an issue uh
11:50 - and the the reason why we just fell off
11:53 - there is we need to select our
11:54 - checkpoint and then uh check the is
11:58 - trigger
11:59 - this will actually make it into a
12:01 - trigger so we don't collide with it but
12:03 - it's just going to notice whenever we
12:05 - touch it so what we can do is make this
12:08 - checkpoint into a
12:10 - prefab and I just want to quickly go
12:12 - ahead and Scatter two of these so we're
12:15 - going to place one here and then I'm
12:17 - going to uh drag another checkpoint in
12:20 - and place one over
12:23 - here uh then what we can do is we can
12:25 - simply jump over here so now we've
12:28 - passed the the first checkpoint you can
12:30 - see in the scene view we've passed the
12:31 - first one uh and then I'm going to jump
12:35 - over to the next one and you can see
12:39 - that we've passed the next one and then
12:42 - I'm going to jump back again let's see
12:43 - we are backtracking here to find a Coin
12:46 - or something and now I've passed the
12:49 - first one again and if I now jump down
12:52 - our position should reset to the first
12:55 - one so if I jump down here you can see
12:58 - see that we respawn on the first one and
13:01 - that's not what we want we want to only
13:03 - change our checkpoint position if it's
13:06 - greater than what we've before achieved
13:10 - so what we can do inside of the script
13:12 - here is we can make another if statement
13:15 - it says
13:16 - if uh and then we can say
13:21 - transform oops
13:26 - transform. position do X because we're
13:29 - only getting our x value because we are
13:32 - always traveling along the x- axis uh if
13:35 - again you have some kind of game where
13:37 - it goes around I suggest you look at how
13:39 - to store these checkpoints in a list so
13:42 - you can just check if it's number two or
13:44 - number three you could also just make a
13:47 - variable on the um uh on the um
13:53 - checkpoint that says that has like the
13:56 - number so the order of the checkpoint
13:59 - um but again I'm I suggest you look up
14:02 - what is called an array or a list if
14:07 - you're interested in some more advanced
14:10 - checkpoint
14:12 - mechanics cool so if our
14:14 - transform.position dox is larger than uh
14:18 - the reached point dox so if uh our
14:24 - position here the checkpoint position is
14:27 - uh greater than the uh point that we
14:29 - reached last then we want to change uh
14:34 - the reached point and only then so now
14:38 - let's save this and now if we head in
14:40 - here hit play jump up here now we've
14:44 - pass the first
14:46 - one jump over here pass the second one
14:50 - now go
14:51 - back and pass the first one again and
14:55 - now we jump
14:57 - down see maybe maybe we can jump down
14:59 - here nope oh now we are stuck that's
15:02 - annoying so I'm just going to get the
15:03 - ball here move him
15:05 - up so and now we jump down over here you
15:10 - can see that our position is set to the
15:13 - second one so it's over here and that's
15:17 - perfect and you can see that we can just
15:18 - do this infinitely it will just fall
15:20 - down and then jump to the checkpoint
15:24 - over there or not what's going on here
15:28 - let's see
15:29 - so it looks like we have a bug with our
15:32 - ball health and that's probably because
15:35 - of the is restarting mechanic that we
15:37 - have going on here so let's just check
15:40 - this out so um if we fall down here we
15:46 - check if is restarting is equal to false
15:49 - by default it's going to be equal to
15:51 - false if it is we restart our
15:54 - level when we restart our level we said
15:57 - is restarting to true
15:59 - and then we fall down and all that so
16:02 - there you see we have our issue our
16:04 - issue is simply that is
16:07 - restarting is never equal to false again
16:11 - so instead what we want to do is maybe
16:13 - when we go down here set is
16:16 - restarting
16:19 - restarting back to false let's just go
16:22 - ahead and try that out so now when we
16:25 - hit play and I'm just going to turn up
16:27 - the volume on my computer here so I can
16:30 - hear whether or not the music uh is is
16:33 - playing correctly
16:37 - too so hit
16:41 - play and we're just going to pass the
16:43 - first one and then we're going to jump
16:46 - down game over it says game over and we
16:50 - respawn now we can try that
16:54 - again game over and it does so again so
16:57 - now we can do that infinitely and that's
16:59 - perfect cool so I'm just going to turn
17:02 - off my music again here you should still
17:04 - be able to hear it cool so that's how
17:08 - you solve bugs that's a great example of
17:11 - an annoying bug and I just wanted to
17:13 - show you kind of the process behind how
17:15 - to resolve some of these
17:17 - bugs cool so now we actually have a
17:21 - checkpoint system that is uh working as
17:25 - it should we have uh these checkpoints
17:27 - that we can SC throughout as prefabs and
17:31 - uh we have some method of uh checking
17:34 - whether or not we've actually reached a
17:36 - further point of we just gone back and
17:39 - we also have a way for the ball Health
17:42 - script we can delete this comment now to
17:45 - set its position to the checkpoint that
17:48 - we've reached so that's basically all I
17:51 - wanted to show you in this video I hope
17:54 - you enjoyed it and uh before I go ahead
17:57 - and turn this off I just quickly want to
17:59 - drag our ball here down to prefab too
18:02 - because it's been annoying me that we
18:04 - didn't have a player prefab also I just
18:07 - wanted to quickly clean some of this up
18:10 - so we can take our ball Health our
18:12 - checkpoint our coin pickup game master
18:14 - and main menu script drag them under the
18:17 - scripts folder then we can maybe make a
18:20 - separate folder create folder called um
18:26 - textures and we can drag them uh the
18:29 - different textures and normal maps onto
18:31 - there then another one called
18:37 - prefabs where we can drag our GM music
18:40 - ball chain Hammer checkpoint coin coin
18:44 - effect all of that just drag it under
18:46 - the prefabs folder then we drag our glow
18:50 - particle under the materials
18:52 - folder uh and uh I can see there are two
18:55 - more prefabs here which should go into
18:57 - the prefabs folder then we have the coin
19:00 - rotate that's an animation so let's just
19:02 - go ahead and create an animations folder
19:05 - also
19:09 - animations and uh I think we're just
19:11 - going to leave our scenes in here so now
19:14 - everything is just a bit nicer to look
19:16 - at so that's basically it for this video
19:19 - I hope you enjoyed it and I'll see you
19:21 - in the next
19:27 - one
19:31 - oh

Cleaned transcript:

thanks for tuning in at braies hello everyone and welcome to video number 17 in make a game a cool series on making a video game in unity So today we're going to be taking a look at something that has been requested quite a lot which is U player spawn points more specifically we're going to take a look at checkpoints so until now whenever our player has died we've simply restarted the scene but what I want to do now is I want to uh have some points scattered out throughout our level which our player will respawn on if he's reached that point then later we can expand and maybe have um some kind of of Life limit uh before the score runs out and all that uh but right now we're just going to set up the checkpoint system itself as always if you have any questions throughout this video I suggest you head over to forum. bra.com where there are many people who are just waiting to answer your questions um I'm also often here as much as I can be and uh you can see that there are a lot of replies on each thread so it's it's very rare that a thread go unanswered cool so as always I've opened up unity and uh I've uh I'm currently using a Unity 4.6 it's out of beta and and now just available uh so as you can see my current version is 4.6 just so you know uh 4.6 also introduces this 2D view up here uh which I've just clicked because we are going to be using or placing some spawn points and uh it makes sense to place them in a 2d view because we are not really using the zaxis when it comes to stuff like that cool so the first thing I want to do here is just select our ball and have a look at how it's currently set up so if we go under a ball Health script which currently handles our health and are respawning uh we can double click that to open it up in mono develop and will open up here I'm just going to zoom in on the code here so you have an easier time reading this and uh let's just maximize it also cool so what we can see here is that we currently have an update function that checks if re is restarting is uh true uh or is false and if it is uh it it starts our level so uh you can see we have an if statement that's checks if we fell below our Max fall distance and uh if if we have it's going to restart our level and make sure to do it just once using this Boolean and inside of the restart level function uh we set first of all is restarting to true we then do some audio work we then work uh wait for the audio clip to stop playing and load the new level and this right here is basically where we can replace uh is is basically what we're going to be replacing so instead of using application. load level and just restarting the level we are going to teleport our player to the nearest spawn or to the furthest spawn point that the player has reached so right here I'm just currently going to say debug.log teleport player like this and it's save so just so we know that that's where we're going to teleport our player but first we need a place to teleport him to so in order to do this let's create an empty game object by pressing control shift n or command shift n if you're on a Mac let's rename this to check point let's zero out the transform by right clicking and hitting reset so a position of zero and a rotation of zero now let's make sure that we're not using the 2D editing tools but instead using the normal transform tools here so we can see and place our object as we want to and let's just move it over here on the third block just somewhere around here it's going to be fine now uh we can go ahead and Mark our checkpoint so we can easily find it in our scene and in order to do this we simply use this drop down menu uh right to the left of our uh of our object name and we can select some different icons so I'm simply going to select maybe a blue one and you can see that it automatically inserts the checkpoint name uh you could also do some kind of of uh icon like a star or something but I think that uh having descriptive names is often best what we can then do is add a component and this is going to be a physics component and it's going to be a box collider you can go ahead and use a sphere collider but what is awesome about the Box collider is that we can stretch it a lot along the wire and this is simply going to act as a trigger uh that checks if our uh our ball has passed through this point let's say you had a ball that went over here and then down and then around and all that then I would suggest you either um uh didn't stretch this box collider out so much and maybe just made it smaller or you could just go ahead and use a sphere collider instead so if we remove this component and add a physics V collider and then simply bump up the radius here you can see that's going to work just fine as well I'm just for this game as is um actually let's just keep the sphere component I almost like that better so let's just change the radius here to something like 3.5 maybe just four I don't mind this being uh too large uh it's going to save our checkpoint as soon as we inser the radius uh so let's just do three and uh move it up a bit so if we pass through this point uh we want of course to set this uh place we want to spawn to this checkpoint right here um so what we want to do is we want to hit add component new script and then it's going to be of type JavaScript and we're going simply going to call this checkpoint because it's going to store all of the stuff that we need to do with checkpoints now we create an ad double click it to open it up in mono develop and we can just go ahead and delete our both our function start in our function update we're going to be making our own function and this is going to be a ont trigger enter and this is very important that you type it in exactly like this because uh if you get this wrong it's not going to be called and it's going to be very hard to debug because you're not going to get an error if you don't Ty it right it's just not going to work so please check your spelling uh then in inside of these parentheses we are first going to um or what we're going to do inside these parentheses is we're going to store some information about what has entered our trigger and uh then we're going to call it something so we can reference it later so what we're going to call this information um maybe we could do call for collider because some kind of collider has obviously enter that trigger so I'm just going to call it call and it's going to be of type Ider and the collider class here stores all kinds of information it has the transform and therefore the position and rotation it has the name the tag all of the uh components um on the object is also something we can get so we can basically excuse me we can basically use this class to to get all of the information that we want from the uh object that has ins trigger and then I'm going to open up these uh brackets here cool and inside of this function what we want to do is we want to set this kind of global variable to this specific point so let's first go ahead and create a global variable that uh it's it's just going to be one of so we we're going to make make it static and what static means is that it's not bound to any specific version of the checkpoint but it's just one single a global variable that all the checkpoints and other objects can access so if that's confusing to you please bear with me but uh just see how uh I write this out and you might understand it later so let's write static V and we are going to call this um reached point maybe because it's going to store the furthest point that we've reached and uh it's going to be of type Vector 3 and a vector 3 just stores three values and that's going to be our X Y and Z so a vector 3 basically just looks like this um just like uh cartisian coordinates so 2 comma 0 comma 4 for example that's an example of a vector 3 so inside of this on trigger entry first thing we want to do is we want to check if it's the player that has entered our collider and not something like the ground so in order to do this we're going to type if call because that's the information about what has entered dot tag is equal to player so if the collider that has entered uh has a tag call player then it's going to call the code that we insert down here and therefore we need to make sure that our ball is indeed tagged as player if not go ahead and add the tag and make sure to tag it here great great so now we know that it's the player that we are colliding with then what we can go ahead and do is simply uh say that our reached point is going to be equal to this collider's position so collider do transform.position oops um or even easier maybe because uh we could just set this to transform that position I actually like that better so if uh what is colliding is the player then we're going to set the point that we reach reached to the current position of our checkpoint but there's one issue with this and I'll just go ahead and show it to you so if we go under our ball Health script instead of uh calling teleport player here we are simply going to say checkpoint Dot and now we can access are static varibles so we're going to just say checkpoint do reached Point like this and then we can simply set our pos position equal to that so transform. position equals checkpoint do reached point this way we don't need to access a specific checkpoint we can just say any checkpoint has this variable called reached point and we're going to set our position equal to that so now let's save this let's also save the checkpoint and let's head into unity and what we can do is uh simply jump over here and uh try and uh fall down so jump over here and this is where our collider should be uh but you can see that that's currently an issue uh and the the reason why we just fell off there is we need to select our checkpoint and then uh check the is trigger this will actually make it into a trigger so we don't collide with it but it's just going to notice whenever we touch it so what we can do is make this checkpoint into a prefab and I just want to quickly go ahead and Scatter two of these so we're going to place one here and then I'm going to uh drag another checkpoint in and place one over here uh then what we can do is we can simply jump over here so now we've passed the the first checkpoint you can see in the scene view we've passed the first one uh and then I'm going to jump over to the next one and you can see that we've passed the next one and then I'm going to jump back again let's see we are backtracking here to find a Coin or something and now I've passed the first one again and if I now jump down our position should reset to the first one so if I jump down here you can see see that we respawn on the first one and that's not what we want we want to only change our checkpoint position if it's greater than what we've before achieved so what we can do inside of the script here is we can make another if statement it says if uh and then we can say transform oops transform. position do X because we're only getting our x value because we are always traveling along the x axis uh if again you have some kind of game where it goes around I suggest you look at how to store these checkpoints in a list so you can just check if it's number two or number three you could also just make a variable on the um uh on the um checkpoint that says that has like the number so the order of the checkpoint um but again I'm I suggest you look up what is called an array or a list if you're interested in some more advanced checkpoint mechanics cool so if our transform.position dox is larger than uh the reached point dox so if uh our position here the checkpoint position is uh greater than the uh point that we reached last then we want to change uh the reached point and only then so now let's save this and now if we head in here hit play jump up here now we've pass the first one jump over here pass the second one now go back and pass the first one again and now we jump down see maybe maybe we can jump down here nope oh now we are stuck that's annoying so I'm just going to get the ball here move him up so and now we jump down over here you can see that our position is set to the second one so it's over here and that's perfect and you can see that we can just do this infinitely it will just fall down and then jump to the checkpoint over there or not what's going on here let's see so it looks like we have a bug with our ball health and that's probably because of the is restarting mechanic that we have going on here so let's just check this out so um if we fall down here we check if is restarting is equal to false by default it's going to be equal to false if it is we restart our level when we restart our level we said is restarting to true and then we fall down and all that so there you see we have our issue our issue is simply that is restarting is never equal to false again so instead what we want to do is maybe when we go down here set is restarting restarting back to false let's just go ahead and try that out so now when we hit play and I'm just going to turn up the volume on my computer here so I can hear whether or not the music uh is is playing correctly too so hit play and we're just going to pass the first one and then we're going to jump down game over it says game over and we respawn now we can try that again game over and it does so again so now we can do that infinitely and that's perfect cool so I'm just going to turn off my music again here you should still be able to hear it cool so that's how you solve bugs that's a great example of an annoying bug and I just wanted to show you kind of the process behind how to resolve some of these bugs cool so now we actually have a checkpoint system that is uh working as it should we have uh these checkpoints that we can SC throughout as prefabs and uh we have some method of uh checking whether or not we've actually reached a further point of we just gone back and we also have a way for the ball Health script we can delete this comment now to set its position to the checkpoint that we've reached so that's basically all I wanted to show you in this video I hope you enjoyed it and uh before I go ahead and turn this off I just quickly want to drag our ball here down to prefab too because it's been annoying me that we didn't have a player prefab also I just wanted to quickly clean some of this up so we can take our ball Health our checkpoint our coin pickup game master and main menu script drag them under the scripts folder then we can maybe make a separate folder create folder called um textures and we can drag them uh the different textures and normal maps onto there then another one called prefabs where we can drag our GM music ball chain Hammer checkpoint coin coin effect all of that just drag it under the prefabs folder then we drag our glow particle under the materials folder uh and uh I can see there are two more prefabs here which should go into the prefabs folder then we have the coin rotate that's an animation so let's just go ahead and create an animations folder also animations and uh I think we're just going to leave our scenes in here so now everything is just a bit nicer to look at so that's basically it for this video I hope you enjoyed it and I'll see you in the next one oh
