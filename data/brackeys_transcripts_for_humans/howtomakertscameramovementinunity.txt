With timestamps:

00:00 - in this video we're going to have a look
00:01 - at creating a symbol IPS like camera in
00:03 - unity we create functionality for
00:04 - panning around the world using both the
00:06 - keyboard and the mouse we also have a
00:08 - look at scrolling to zoom in and out we
00:10 - also have a look at how you can put
00:11 - boundaries on your camera and so at the
00:13 - end of the video we'll talk about how
00:14 - you can get more advanced functionality
00:15 - let's get started so in this video we're
00:17 - going to be using the FPS density
00:19 - environment as an example scene if you
00:21 - want to get this for yourself you can go
00:22 - to dev assets calm click on the FPS
00:25 - environment and you can see some of the
00:27 - images read a bit about it and when
00:28 - you're ready you can choose a price and
00:30 - hit the blue button once you download it
00:32 - simply unzip it and double click on the
00:34 - unity package and it's going to open
00:36 - everything up for you you can then just
00:37 - open the example scene and you should be
00:39 - good to go now what I've done for my
00:41 - camera is I've put it pretty much in the
00:43 - center of the scene I've pulled it back
00:45 - a bit on the Z and I've pulled it up on
00:47 - the Y mine is currently sitting at about
00:49 - 60 units I've given it a rotation of
00:52 - around 60 some people like to do a
00:53 - completely flat view meaning 90 degrees
00:56 - other people like an angle it's going to
00:58 - totally depend on your game now I've
00:59 - left the projection add perspective but
01:01 - you can always change it to other
01:03 - graphic to get a completely different
01:04 - look I'm just going to leave it at
01:06 - perspective though and then set the
01:08 - field of view around 40 now we can go
01:10 - and add a new component let's call it
01:11 - the camera controller that's it new
01:14 - script it create an ADD let's open this
01:16 - up in visual studio now there are a
01:17 - bunch of different ways of going about
01:19 - creating a camera controller that's
01:21 - because both input and movement in unity
01:23 - can be handled in a thousand different
01:25 - ways we're just going to have a look at
01:26 - creating something really simple that
01:28 - works and then I'll talk about how you
01:29 - can expand upon this later let's begin
01:31 - by removing our two using text at the
01:33 - very top let's also remove our start
01:35 - method let's instead add a new public
01:37 - float we call this one pan speed this is
01:39 - going to specify the speed at which we
01:41 - will move our camera across the world
01:43 - and will default this to something like
01:44 - 20 and so our camera will move at a
01:46 - speed of 20 units per second we'll then
01:48 - go down into the update method and first
01:50 - off we want to be able to move using the
01:51 - keyboard and so we'll create an if
01:53 - statement here to check if input get key
01:56 - and the key that we want to check for is
01:57 - going to depend on your game I just want
01:59 - to move using the WASD keys so I'm going
02:02 - to check for W and each time we press
02:04 - this key we want to move a little bit
02:06 - forward and we click going here and use
02:07 - transform to translate this will allow
02:09 - us to move our game object in the
02:11 - specified direction but we probably want
02:13 - to be
02:13 - able to move in multiple directions so
02:15 - if we're holding down both W and D we
02:18 - want to move both up and to the right
02:20 - and if we also scrolling we want to be
02:21 - able to zoom in and out at the same time
02:23 - of course we could just call transform
02:25 - that translate multiple times during the
02:27 - update but I think a cleaner way is to
02:29 - up here get the current position of our
02:30 - camera will store this as a vector3
02:33 - we call it pause and set it equal to
02:35 - transform dub position so now we have
02:37 - the XY and z coordinates stored in this
02:39 - path variable and then edit these
02:41 - position coordinates and then once we
02:43 - know our new position how much we need
02:45 - to move in the different directions and
02:46 - how much we need to zoom in or out
02:48 - then we'll update our position so for
02:50 - now we'll just be changing the variable
02:51 - we do that by saying pause dot and then
02:54 - we can change the different coordinates
02:55 - we want to move forward and so we need
02:57 - to modify the Z component we'll add on
02:59 - to that so we'll say plus equals
03:01 - panspeed multiplied with time.deltatime
03:03 - we want to add panspeed because the
03:06 - amount of units we want to move is going
03:07 - to depend on our speed and then we
03:09 - multiply with time delta time to make
03:11 - sure that no matter what framerate we're
03:13 - currently running at we're going to move
03:15 - the same distance time that delta time
03:17 - is simply the amount of time elapsed
03:18 - since we lost your frame and so if we
03:20 - draw a lot of frames per second this
03:22 - number is going to be small therefore
03:24 - we're not going to move that much each
03:25 - frame call and if you only draw a few
03:27 - frames a second time that delta time is
03:29 - going to be larger and therefore we're
03:31 - going to move a greater amount each
03:32 - frame and so we make sure that we move
03:34 - relative to time and not to frame rate
03:37 - of course we also need to apply our new
03:39 - position so we will transform the
03:40 - position and feedback in our position
03:43 - variable so what we're doing is we're
03:45 - storing our current position in a
03:46 - temporary path variable we check if we
03:48 - press the W key if so we want to move
03:50 - forward and so we increase our Z value
03:53 - and then we set our composition equal to
03:55 - our new position so let's save this head
03:57 - back into unity and when we now hit play
03:59 - we should be able to press the W key and
04:01 - then move forward awesome but we can't
04:03 - move in any of the other directions and
04:05 - we can't use our cursor to move so in
04:07 - order to use our cursor to move we want
04:09 - to create a new variable this is also
04:10 - going to be a public float and this is
04:12 - going to specify how close we need to
04:14 - get to the edge of our screen before the
04:16 - camera moves in that direction we'll
04:17 - call this one the pan border thickness
04:20 - and we'll set that equal to ten then
04:22 - down here in our if statement we need to
04:24 - say that we want to move forward if we
04:26 - press the W key
04:27 - and these two vertical bars mean or so
04:30 - that the if statement will be true if
04:31 - this is true or the next condition is
04:34 - true and here we want to get the current
04:36 - position of our mouth sublet go input
04:38 - dot mouth position and this is the
04:40 - current mouth position in pixel
04:41 - coordinates and it records pixel
04:43 - coordinates from the bottom left corner
04:45 - of our screen so what we need to check
04:47 - for is whether or not our mouth position
04:49 - on the y-axis is greater than the height
04:52 - of our screen - our border thickness so
04:55 - we'll do that in here so we'll say if
04:57 - our mouth position dot Y is greater than
04:59 - or equal to our screen height and this
05:03 - is our screen height in pixels - and
05:05 - then the pan border thickness so if we
05:08 - now save this and head into unity again
05:10 - and hit play we can see that we can move
05:11 - using W and by moving our cursor to the
05:14 - top of our screen and you can see that
05:16 - we don't need to touch the edge as long
05:17 - as we get within 10 pixels awesome
05:20 - so now we simply need to add this to the
05:21 - other directions as well to do that we
05:23 - simply duplicate this if statement paste
05:25 - it three more times and for the second
05:27 - one here we want to check if we want to
05:28 - move back so we'll press s and we're
05:31 - going to do this if our mouth position
05:33 - is less than or equal to the pan border
05:36 - thickness now remember that because our
05:38 - origin is at the bottom we no longer
05:40 - need to use screen dot height if our Y
05:42 - position is less than 10 pixels and if
05:45 - it is we now want to subtract the pan
05:47 - speed multiplied with time.deltatime so
05:49 - we just want to move in the opposite
05:51 - direction if you want to move to the
05:52 - right that means if we press the D key
05:54 - we want to check if mouth position dot X
05:57 - is greater than or equal to screen dot
06:00 - with - panforte thickness and we still
06:03 - want to move in the positive direction
06:04 - but we now want to do it on the x axis
06:07 - and to the left here that means a we
06:10 - want to check if mouth position X it's
06:12 - less than or equal to the pan border
06:14 - thickness and again we want to move
06:16 - along the x-axis but in a negative
06:18 - direction and notice how we can make all
06:20 - these changes to our variable and only
06:22 - update our actual position once so let's
06:25 - save that into unity and hit play and
06:26 - you should now see that we can use the
06:28 - vast keys to move and the mouse cursor
06:30 - as well and we can even combine the two
06:33 - if we want to however we have one more
06:35 - problem and that is that we are
06:36 - currently able to move
06:38 - really really far in any given direction
06:40 - and most games probably want to limit
06:42 - how far they can move away from the map
06:44 - of course this limit is going to depend
06:46 - on your map size so let's make a few
06:48 - variables to adjust it will go inside
06:50 - the visual studio we'll make a few lines
06:52 - after we change our petition we do this
06:54 - one axis at a time let's begin with
06:56 - position X we want to set this equal to
06:59 - math clamp and clamp simply allows us to
07:02 - limit a number between a minimum and a
07:04 - maximum value
07:05 - well first off write the value that we
07:06 - want to limit in our case that's
07:08 - position X then we want to write the
07:10 - minimum value and of course we could
07:12 - hard code this in but instead let's go
07:14 - up here and create a few variables we
07:15 - could go ahead and create to public
07:17 - floats one called X limit and one called
07:20 - Z limit but something I find a bit
07:22 - cleaner is simply using a vector - which
07:24 - of course stores both an X and a y value
07:27 - then we can simply map the Y value onto
07:29 - the Z component so in that case we'll go
07:31 - ahead and call it something like pan
07:33 - limit and let's close it off and set it
07:35 - in the inspector down here is the
07:37 - minimum value will have negative pan
07:39 - limit X and that's the positive value
07:41 - we'll have positive pan limit X and
07:44 - close that up with the semicolon and
07:46 - we'll do the same thing on the Z we'll
07:47 - have passed dudley equals master clamp
07:50 - and the value we want to clamp is passed
07:52 - at Z and we want to clamp it between
07:54 - negative pan limit and here we write dot
07:57 - Y but it maps to the Z comma pan limit
08:00 - dot Y so now if we save this and head
08:02 - back into unity we'll get two values
08:04 - that we can adjust one for the X and I
08:06 - want to be able to go 40 units on the x
08:09 - axis in either direction and 50 on the Z
08:12 - let's try and hit play and as you can
08:14 - now see we can only move to negative 40
08:17 - on the X and negative 50 on the Z cool
08:20 - so the final thing that we'll be adding
08:21 - to our script is a way to scroll and
08:23 - here we want to use something that unity
08:25 - has set up in the input manager force if
08:27 - we go edit project settings and then
08:30 - input we can see the different axes
08:31 - unity set up one of them is the mouse
08:34 - scroll wheel
08:35 - this simply detects when we scroll the
08:36 - wheel how fast and in what direction
08:39 - let's copy the name mouse scroll wheel
08:41 - let's go into visual studio and let's
08:43 - get the value of the scroll wheel on
08:45 - this particular update call do that by
08:47 - going input get access and then in
08:49 - quotation marks inserting the mouse
08:51 - scroll wheel
08:52 - axis will round it off with a semicolon
08:54 - and we want to store this in a variable
08:55 - so we'll create a float call it scroll
08:58 - and set it equal to input duck get axis
09:00 - mouse scroll wheel then let's go to the
09:02 - top and add a variable for controlling
09:03 - the scroll speed we'll create a public
09:05 - float scroll speed and set it equal to
09:08 - something like 2 and then right after we
09:11 - get this variable let's change our Y
09:13 - position so we go positioned at y plus
09:15 - equals scroll multiplied with scroll
09:18 - speed multiplied with time.deltatime
09:20 - and we probably need to flip the
09:22 - direction on this but let's just try and
09:24 - hit save and see if it works so if we
09:25 - now hit play in unity we should be able
09:27 - to scroll in and out but we're scrolling
09:29 - really really slowly so what I like to
09:31 - do is go in here and hard-code 100 on
09:34 - top of this and then go option add a 0
09:36 - just so our pan speed and scroll speed
09:38 - around the same value then we can also
09:40 - go into unity select our main camera and
09:42 - make sure to update the scroll speed
09:44 - there as well let's hit play and now
09:46 - we're able to scroll in and out but it
09:48 - is definitely reversed for me so I'm
09:50 - just going to go in here and change this
09:51 - to negative finally we can also clamp
09:53 - our Y position so we can scroll inside
09:56 - of buildings to do that we simply go up
09:58 - here and we had two new variables a
10:00 - public float minimum Y and a public
10:02 - float maximum Y I'm going to set the
10:05 - first one equal to 20 and the second one
10:08 - equal to something like a hundred and
10:10 - twenty let's scroll down and here we
10:11 - simply add another line we go plus y
10:14 - equals math clamp the value we want to
10:17 - clamp is positive Y we want to clamp it
10:19 - between minimum Y and maximum Y and
10:22 - let's close that off with a semicolon
10:24 - so now we've added all of the code that
10:26 - we need to add we can pan with both the
10:28 - keyboard and the mouse we can scroll
10:30 - using the scroll wheel we can control
10:32 - the speed at which we pan and the speed
10:33 - at which we scroll the thickness of the
10:35 - board is around the window limit both
10:37 - our position and assume let's now go
10:39 - back into unity and travel this out you
10:41 - can fly around we can scroll but not too
10:44 - far we can use both the keyboard in the
10:46 - mouse and of course there's the limit to
10:48 - what we can do awesome so this was a
10:50 - pretty basic overview of how you can
10:51 - create an RTS like camera controller
10:53 - however there's still a lot of features
10:55 - that modern games often use on their
10:57 - camera controllers so searched around a
10:59 - bit and actually found it very good as
11:00 - it's stored plug-in called RTS camera
11:03 - that makes it easy to do all the stuff
11:05 - we already have added like keyboard
11:06 - input screen edge input scrolling and
11:09 - movement limiting but it can also do
11:10 - stuff like panning when holding down the
11:12 - mouse following a target rotating based
11:14 - on the keyboard and even automatically
11:16 - adjusting height depending on the height
11:18 - of what you're currently viewing it also
11:20 - adds a bit of smoothing on the camera so
11:22 - everything looks a bit better so of
11:23 - course have a link to this in the
11:24 - description
11:25 - let's pretty much it for this video if
11:26 - you are making an OTS or some other game
11:28 - that requires a I definitely subscribe
11:30 - because I'll be creating a video on the
11:32 - new unity AI slash navmesh system as
11:34 - soon as the high level components get
11:36 - released other than that thanks for
11:37 - watching and I will see you in the next
11:39 - video thanks of the awesome patreon
11:41 - supporters who donated in March and a
11:43 - special thanks to Derek Eames Kirk
11:44 - faithful Merrifield james calhoun and
11:46 - jason Lotito if you want to support the
11:48 - channel and become a picture in yourself
11:49 - you will do so a page in the concise
11:51 - brackets
11:52 - thanks a lot guys

Cleaned transcript:

in this video we're going to have a look at creating a symbol IPS like camera in unity we create functionality for panning around the world using both the keyboard and the mouse we also have a look at scrolling to zoom in and out we also have a look at how you can put boundaries on your camera and so at the end of the video we'll talk about how you can get more advanced functionality let's get started so in this video we're going to be using the FPS density environment as an example scene if you want to get this for yourself you can go to dev assets calm click on the FPS environment and you can see some of the images read a bit about it and when you're ready you can choose a price and hit the blue button once you download it simply unzip it and double click on the unity package and it's going to open everything up for you you can then just open the example scene and you should be good to go now what I've done for my camera is I've put it pretty much in the center of the scene I've pulled it back a bit on the Z and I've pulled it up on the Y mine is currently sitting at about 60 units I've given it a rotation of around 60 some people like to do a completely flat view meaning 90 degrees other people like an angle it's going to totally depend on your game now I've left the projection add perspective but you can always change it to other graphic to get a completely different look I'm just going to leave it at perspective though and then set the field of view around 40 now we can go and add a new component let's call it the camera controller that's it new script it create an ADD let's open this up in visual studio now there are a bunch of different ways of going about creating a camera controller that's because both input and movement in unity can be handled in a thousand different ways we're just going to have a look at creating something really simple that works and then I'll talk about how you can expand upon this later let's begin by removing our two using text at the very top let's also remove our start method let's instead add a new public float we call this one pan speed this is going to specify the speed at which we will move our camera across the world and will default this to something like 20 and so our camera will move at a speed of 20 units per second we'll then go down into the update method and first off we want to be able to move using the keyboard and so we'll create an if statement here to check if input get key and the key that we want to check for is going to depend on your game I just want to move using the WASD keys so I'm going to check for W and each time we press this key we want to move a little bit forward and we click going here and use transform to translate this will allow us to move our game object in the specified direction but we probably want to be able to move in multiple directions so if we're holding down both W and D we want to move both up and to the right and if we also scrolling we want to be able to zoom in and out at the same time of course we could just call transform that translate multiple times during the update but I think a cleaner way is to up here get the current position of our camera will store this as a vector3 we call it pause and set it equal to transform dub position so now we have the XY and z coordinates stored in this path variable and then edit these position coordinates and then once we know our new position how much we need to move in the different directions and how much we need to zoom in or out then we'll update our position so for now we'll just be changing the variable we do that by saying pause dot and then we can change the different coordinates we want to move forward and so we need to modify the Z component we'll add on to that so we'll say plus equals panspeed multiplied with time.deltatime we want to add panspeed because the amount of units we want to move is going to depend on our speed and then we multiply with time delta time to make sure that no matter what framerate we're currently running at we're going to move the same distance time that delta time is simply the amount of time elapsed since we lost your frame and so if we draw a lot of frames per second this number is going to be small therefore we're not going to move that much each frame call and if you only draw a few frames a second time that delta time is going to be larger and therefore we're going to move a greater amount each frame and so we make sure that we move relative to time and not to frame rate of course we also need to apply our new position so we will transform the position and feedback in our position variable so what we're doing is we're storing our current position in a temporary path variable we check if we press the W key if so we want to move forward and so we increase our Z value and then we set our composition equal to our new position so let's save this head back into unity and when we now hit play we should be able to press the W key and then move forward awesome but we can't move in any of the other directions and we can't use our cursor to move so in order to use our cursor to move we want to create a new variable this is also going to be a public float and this is going to specify how close we need to get to the edge of our screen before the camera moves in that direction we'll call this one the pan border thickness and we'll set that equal to ten then down here in our if statement we need to say that we want to move forward if we press the W key and these two vertical bars mean or so that the if statement will be true if this is true or the next condition is true and here we want to get the current position of our mouth sublet go input dot mouth position and this is the current mouth position in pixel coordinates and it records pixel coordinates from the bottom left corner of our screen so what we need to check for is whether or not our mouth position on the yaxis is greater than the height of our screen our border thickness so we'll do that in here so we'll say if our mouth position dot Y is greater than or equal to our screen height and this is our screen height in pixels and then the pan border thickness so if we now save this and head into unity again and hit play we can see that we can move using W and by moving our cursor to the top of our screen and you can see that we don't need to touch the edge as long as we get within 10 pixels awesome so now we simply need to add this to the other directions as well to do that we simply duplicate this if statement paste it three more times and for the second one here we want to check if we want to move back so we'll press s and we're going to do this if our mouth position is less than or equal to the pan border thickness now remember that because our origin is at the bottom we no longer need to use screen dot height if our Y position is less than 10 pixels and if it is we now want to subtract the pan speed multiplied with time.deltatime so we just want to move in the opposite direction if you want to move to the right that means if we press the D key we want to check if mouth position dot X is greater than or equal to screen dot with panforte thickness and we still want to move in the positive direction but we now want to do it on the x axis and to the left here that means a we want to check if mouth position X it's less than or equal to the pan border thickness and again we want to move along the xaxis but in a negative direction and notice how we can make all these changes to our variable and only update our actual position once so let's save that into unity and hit play and you should now see that we can use the vast keys to move and the mouse cursor as well and we can even combine the two if we want to however we have one more problem and that is that we are currently able to move really really far in any given direction and most games probably want to limit how far they can move away from the map of course this limit is going to depend on your map size so let's make a few variables to adjust it will go inside the visual studio we'll make a few lines after we change our petition we do this one axis at a time let's begin with position X we want to set this equal to math clamp and clamp simply allows us to limit a number between a minimum and a maximum value well first off write the value that we want to limit in our case that's position X then we want to write the minimum value and of course we could hard code this in but instead let's go up here and create a few variables we could go ahead and create to public floats one called X limit and one called Z limit but something I find a bit cleaner is simply using a vector which of course stores both an X and a y value then we can simply map the Y value onto the Z component so in that case we'll go ahead and call it something like pan limit and let's close it off and set it in the inspector down here is the minimum value will have negative pan limit X and that's the positive value we'll have positive pan limit X and close that up with the semicolon and we'll do the same thing on the Z we'll have passed dudley equals master clamp and the value we want to clamp is passed at Z and we want to clamp it between negative pan limit and here we write dot Y but it maps to the Z comma pan limit dot Y so now if we save this and head back into unity we'll get two values that we can adjust one for the X and I want to be able to go 40 units on the x axis in either direction and 50 on the Z let's try and hit play and as you can now see we can only move to negative 40 on the X and negative 50 on the Z cool so the final thing that we'll be adding to our script is a way to scroll and here we want to use something that unity has set up in the input manager force if we go edit project settings and then input we can see the different axes unity set up one of them is the mouse scroll wheel this simply detects when we scroll the wheel how fast and in what direction let's copy the name mouse scroll wheel let's go into visual studio and let's get the value of the scroll wheel on this particular update call do that by going input get access and then in quotation marks inserting the mouse scroll wheel axis will round it off with a semicolon and we want to store this in a variable so we'll create a float call it scroll and set it equal to input duck get axis mouse scroll wheel then let's go to the top and add a variable for controlling the scroll speed we'll create a public float scroll speed and set it equal to something like 2 and then right after we get this variable let's change our Y position so we go positioned at y plus equals scroll multiplied with scroll speed multiplied with time.deltatime and we probably need to flip the direction on this but let's just try and hit save and see if it works so if we now hit play in unity we should be able to scroll in and out but we're scrolling really really slowly so what I like to do is go in here and hardcode 100 on top of this and then go option add a 0 just so our pan speed and scroll speed around the same value then we can also go into unity select our main camera and make sure to update the scroll speed there as well let's hit play and now we're able to scroll in and out but it is definitely reversed for me so I'm just going to go in here and change this to negative finally we can also clamp our Y position so we can scroll inside of buildings to do that we simply go up here and we had two new variables a public float minimum Y and a public float maximum Y I'm going to set the first one equal to 20 and the second one equal to something like a hundred and twenty let's scroll down and here we simply add another line we go plus y equals math clamp the value we want to clamp is positive Y we want to clamp it between minimum Y and maximum Y and let's close that off with a semicolon so now we've added all of the code that we need to add we can pan with both the keyboard and the mouse we can scroll using the scroll wheel we can control the speed at which we pan and the speed at which we scroll the thickness of the board is around the window limit both our position and assume let's now go back into unity and travel this out you can fly around we can scroll but not too far we can use both the keyboard in the mouse and of course there's the limit to what we can do awesome so this was a pretty basic overview of how you can create an RTS like camera controller however there's still a lot of features that modern games often use on their camera controllers so searched around a bit and actually found it very good as it's stored plugin called RTS camera that makes it easy to do all the stuff we already have added like keyboard input screen edge input scrolling and movement limiting but it can also do stuff like panning when holding down the mouse following a target rotating based on the keyboard and even automatically adjusting height depending on the height of what you're currently viewing it also adds a bit of smoothing on the camera so everything looks a bit better so of course have a link to this in the description let's pretty much it for this video if you are making an OTS or some other game that requires a I definitely subscribe because I'll be creating a video on the new unity AI slash navmesh system as soon as the high level components get released other than that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in March and a special thanks to Derek Eames Kirk faithful Merrifield james calhoun and jason Lotito if you want to support the channel and become a picture in yourself you will do so a page in the concise brackets thanks a lot guys
