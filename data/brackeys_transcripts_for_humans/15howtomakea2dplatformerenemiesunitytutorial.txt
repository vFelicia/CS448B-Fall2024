With timestamps:

00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to
00:05 - video number 15 in the how to make a 2d
00:08 - platformer course in today's video we're
00:10 - going to make our enemy search for our
00:12 - player whenever he dies so that it will
00:15 - continue chasing him when he spawns back
00:18 - in we're also going to make on the first
00:21 - part at least of the central enemy
00:23 - component which is going to store health
00:26 - and uh other stats and functionality for
00:29 - uh
00:30 - destroying this enemy and maybe making
00:32 - it spawn or something we'll see about
00:35 - that I've planned some of this to tal
00:38 - out completely in my head but I've also
00:41 - left some of it uh for us to figure out
00:43 - together because I think that it's it's
00:45 - good for you to see how uh to kind of
00:47 - figure some of these things out as we go
00:50 - instead of just knowing it already so um
00:54 - without further Ado I'll just do one
00:56 - quick plug here uh because I've just
00:59 - released UPA tool kit uh version two and
01:03 - uh this new version uh is not backwards
01:06 - compatible because it's features a lot
01:09 - and lot of changes uh it's much better
01:12 - now i' I've used a a new method for
01:15 - serialization of your images um it
01:18 - introduces a layer system it's just
01:21 - generally much better uh structured uh
01:24 - so really check it out it's it's totally
01:26 - awesome if you want to make pixel art in
01:28 - unity for free
01:31 - cool so uh as always if you have any
01:34 - questions go to the forums and uh let's
01:36 - just stick right into it so as you can
01:38 - see I have done nothing since we left
01:40 - our scene last time here you can see we
01:43 - have our enemy AI script and our alien
01:46 - spaceship right here and what I want to
01:48 - do with this is just drag it under the
01:51 - prefabs folder so we can spawn multiple
01:53 - enemies
01:54 - later like that and uh you can see when
01:58 - I hit play it will chase after us um and
02:03 - uh if you enable gizmos up here and
02:05 - select the spaceship uh we should also
02:08 - be able to see if we open up the Seeker
02:11 - script here we should be able to see the
02:14 - path that it draws to our player so
02:16 - that's just a bit useful when debugging
02:20 - cool but the issue as is is that when we
02:24 - jump down and we die 2 1 and we hear
02:29 - this spawning sound I'm just going to
02:31 - disable my monitors here you can see
02:34 - that the enemy doesn't chase us it just
02:38 - uh has this point that goes down here
02:40 - but it's stationary so the way to fix
02:43 - this is sticking into the enemy AI
02:46 - script so double click that to open it
02:47 - up in monod
02:49 - develop here I'm just going to zoom in a
02:52 - bit on this maximize it so it's easier
02:55 - for you to read and you can see that we
02:58 - have a few checks here checking if our
03:00 - Target is equal to null and currently we
03:03 - just Panic uh we do the same in the
03:06 - fixed update function and in the update
03:10 - path enumerator method so what we do
03:14 - here is instead of just returning each
03:17 - time we want to now start looking for
03:21 - the player so let's first off make a
03:24 - private
03:25 - Boolean that is going to tell us whether
03:28 - we are looking for the player or not so
03:30 - searching for player it's good to give
03:34 - uh keep these long descriptive names
03:36 - you're going to thank yourself later if
03:38 - your scripts gets uh script gets really
03:41 - long uh and we're just going to default
03:43 - that to false then inside of our start
03:46 - function uh here we can write out uh
03:50 - kind of what we want to happen if our
03:52 - Target equals nor we don't want to panic
03:55 - instead what we want to do is we want to
03:58 - check if we are searching for the the
03:59 - player uh because if we already doing
04:02 - that then we don't want to do anything
04:04 - in here so we're going to say if we are
04:06 - not searching for the player and then we
04:09 - can do some functionality inside of this
04:12 - like this and uh what we then want to do
04:15 - is we first off want to uh set searching
04:18 - for player to true and then we want to
04:22 - actually search and uh in doing this
04:25 - what I want to do is basically call a
04:28 - method more specifically an i enumerator
04:31 - method uh that we can then uh do all our
04:36 - uh searching L logic in and then it's
04:40 - going to call itself uh with some delay
04:44 - if uh we haven't found what we were
04:46 - looking for so it's going to search
04:48 - maybe each second or two times a second
04:51 - or something like that so we don't do
04:53 - our searching every frame because
04:55 - looking through uh a bunch of game
04:58 - objects especially if you have a large
04:59 - scene can be pretty taxing there's no
05:02 - reason to do such a large search every
05:05 - frame so in order to do this uh what I
05:08 - want to do is I want to say start Co
05:10 - routine and in here we can call the
05:14 - method that is going to do our searching
05:16 - and we're just going to call this search
05:18 - for
05:20 - player and remember the open and close
05:23 - parenthesis there so I think this should
05:27 - be good we're going to say that we are
05:28 - starting to search for our player and we
05:30 - going going to call the uh search for
05:33 - player method then down here maybe above
05:36 - the uh update path I enumerator you can
05:39 - put it whever you want we're going to
05:41 - type I
05:43 - enumerator
05:45 - search for player and this should stop
05:48 - being read in a second and then uh open
05:51 - and close our parentheses and then put
05:54 - in some brackets and now you can see
05:56 - that it stops being read up there
05:57 - because now it can find and the method
06:00 - inside of the script uh then what we do
06:03 - inside of this method is um first off we
06:09 - um we want to uh do a game object. find
06:14 - so we uh do game
06:17 - object whoops game
06:20 - object. find game object with tag and
06:23 - make sure this is
06:25 - singular and then in here we can put
06:27 - whatever tag you want I'm just going to
06:29 - put in player uh if you want uh the
06:32 - different enemies to search for
06:33 - different things you can of course make
06:36 - this a variable just a simple string and
06:39 - uh then you can input it in the
06:41 - hierarchy or in the inspector I mean uh
06:44 - I'm just going to hardcoded here um but
06:47 - you might be better off doing something
06:49 - else cool but we want to store this in a
06:53 - temporary rary variable uh called game
06:56 - object of type game object I mean and
06:59 - we're going to call this uh s result for
07:02 - search result the reason why we don't
07:06 - just directly equal Target to this
07:10 - variable or to this value here is that
07:13 - this is going to return a game object so
07:16 - in order for this to be valid we would
07:18 - have to do dot
07:20 - transform and we can't access the trans
07:23 - form parameter if this doesn't find
07:26 - anything so first we store it in a
07:28 - variable then we check if that variable
07:30 - has is is equal to null or not and then
07:33 - we can assign it to the Target so now we
07:36 - say if search
07:38 - result uh is equal to
07:42 - null then we can stop searching so if we
07:46 - if this uh or or then we can uh I'm
07:49 - sorry then we can continue searching and
07:51 - we do this by uh calling again the
07:54 - search for player method but with a
07:57 - short delay so let's type in in yield
08:00 - return new wait 4 seconds remember we've
08:03 - done this down
08:05 - here and then we're going to put in and
08:08 - you could do an update rate again I'm
08:10 - just going to hard code this to
08:13 - 0.5f seconds that's how much is going to
08:16 - to be between each update and then uh
08:20 - down here we can then start a code
08:23 - routine and this is going to be the same
08:25 - code routine that we're currently in so
08:27 - search for player and that way we simply
08:30 - going to Loop so what we have uh yet is
08:34 - that if our Target is equal to null and
08:36 - we are not searching for the player
08:38 - we're going to start searching for the
08:39 - player and make sure that we store this
08:41 - in a variable then it's going to jump
08:43 - down here it's going to find uh the
08:46 - results for uh game object with tag
08:49 - player it's going to store it in a
08:51 - temporary variable we're going to check
08:53 - if it's found something and if it hasn't
08:55 - we're going to wait for half a second
08:58 - and then we're going to repeat uh the
09:00 - searching if it has found something so
09:04 - else if it has found something what we
09:07 - want to do is we want to first off say
09:09 - that we have found what we were looking
09:11 - for so we don't want to uh S search
09:14 - anymore so searching for player equals
09:17 - false we also want to set our Target
09:21 - equal to S result.
09:24 - transform and we also want to return and
09:29 - remember whenever you're inside an iron
09:30 - numerator in order to return we need to
09:33 - put in some kind of bullan value I'm
09:35 - just going to put in false and then
09:38 - lastly we want to start updating our
09:40 - path again because down here what we do
09:42 - when our Target is equal to null is we
09:44 - return and whenever you return out of an
09:47 - i enumerator or any other method that
09:50 - isn't called again uh it's going to stop
09:53 - going so our update path here is simply
09:56 - going to stop stop updating so we want
09:58 - it to or we want to tell it that it
10:01 - should start updating again so we're
10:02 - going to type in start Cod
10:05 - routine update path remember the
10:08 - parenthesis and a semicolon and this way
10:11 - we loop back into the update path method
10:15 - now we can take this uh checking um uh
10:18 - this if statement block up here and we
10:22 - can simply uh copy this and we can
10:25 - replace this one with that and we can
10:28 - replace this one with that now when we
10:31 - hit save hopefully we don't get any
10:34 - errors we do let's see here an object of
10:37 - type convertible to Bull is required for
10:40 - the return statement have has we um have
10:44 - we forgot anything here so here we're
10:47 - going to return false again this is an
10:49 - ion numerator and uh down here we simply
10:53 - going to return so that should fix
10:55 - it indeed it did let's try this out so
10:59 - hit the play
11:00 - button it's going to look for us and
11:02 - it's going to work just fine then when
11:04 - we jump down it's going to stop doing
11:07 - anything when we spawn back in it's
11:10 - going to search for us again and you see
11:12 - the delay there of half a second is not
11:15 - something that you would ever notice uh
11:17 - you might even bump that down to 1
11:19 - second if you are uh really optimizing
11:22 - your game um maybe if you're doing
11:25 - mobile or or anything like that cool so
11:29 - that was the first and most important
11:31 - part of this tutorial sort to say this
11:33 - fixed the most apparent bar uh and I'm
11:36 - just going to close down this enemy AI
11:39 - here and move it into the scripts folder
11:41 - because it's no longer needed and now we
11:43 - can continue on to the stuff that I
11:45 - haven't quite planned out but which
11:48 - should be pretty fun which is uh
11:50 - actually writing out an enemy component
11:53 - uh that is going to be Central for any
11:55 - enemy that we have so let's hit add
11:58 - compon component new script and you can
12:01 - see I've already typed it there enemy
12:03 - and it's going to be of uh type c then
12:06 - we hit create an ad double click it to
12:09 - open it up in mono
12:11 - develop here and uh what I want to do
12:14 - here is basically copy uh a lot of the
12:17 - functionality that we have within our
12:19 - player script because they they're going
12:21 - to be fairly similar so we can simply
12:24 - take all of the stuff inside of the
12:26 - class here copy it in here
12:30 - then we can simply rename player stats
12:32 - to enemy
12:35 - stats U we still going to have a health
12:38 - then we can uh rename this here also to
12:42 - fit enemy stats here and it's going to
12:44 - be a new enemy stats there and then I
12:48 - actually don't want to do player stats I
12:50 - think stats is is quite okay and then
12:53 - down here simply do stats rename that to
12:57 - Stats we can delete the update State
12:59 - function and the fault
13:02 - boundary and uh down here if we don't
13:06 - want this method uh to be called damage
13:08 - player we want this to be called damage
13:12 - enemy and uh then in here we don't want
13:16 - to kill the player whenever our health
13:18 - goes below zero we want it to kill an
13:21 - enemy so we need to go into the game
13:23 - master script and uh do a kill enemy uh
13:28 - method so we're going to do game master.
13:30 - kill enemy and we're going to give it
13:34 - this and uh then we're going to put in a
13:36 - semicolon save that now we can go back
13:39 - into um or into can find the game master
13:44 - script double click that and you can see
13:46 - here whoops that we have a bunch of
13:49 - convenience methods sort of say that
13:51 - handle all of the respawning of the
13:53 - player and the killing of the player uh
13:56 - um separately from the player itself and
13:59 - I want to do the same here with the
14:01 - Enemy because it's just better to have
14:04 - this um Central uh game master that does
14:07 - all of the respawning and all that uh so
14:10 - you don't have to uh reference yourself
14:13 - and uh do weird things when you want to
14:15 - do things after the uh object has been
14:18 - destroyed such as um doing a sound or
14:21 - whatever so what we want to do in here
14:25 - is first of all just kill off the agent
14:27 - spaceship we simp they want to call a
14:29 - destroyer method and uh we do this by
14:33 - making a new method here we're going to
14:36 - call it a public
14:38 - static um void and we're going to call
14:41 - it kill enemy we're going to take in an
14:44 - enemy which we're going to call enemy
14:47 - and uh then inside of the U curly
14:51 - brackets here we simply going to uh call
14:53 - a destroy method and give it as the
14:56 - input the enemy. game object this is
15:00 - very simply similar to The Kill player
15:04 - method up
15:05 - there so let's see if this works we're
15:09 - going to save this out our errors
15:12 - disappear and uh this looks like it
15:16 - looks like it's working but currently we
15:19 - have no way of damaging our spaceship
15:22 - because we actually have a um damage
15:25 - enemy method available but we're not
15:27 - calling it anywhere so as you can see
15:31 - right now when we hit play and click
15:33 - there oops lots of paths here uh it's
15:37 - quite annoying I know you can disable
15:39 - these but first off I just want to see
15:41 - here we hit alien Spa spaceship and did
15:44 - 10 damage we call out these debug.log
15:47 - statements but we are not actually doing
15:50 - any damage so if we double click that
15:52 - it'll take us right to the point in our
15:56 - weapon. CS script which sits on our
16:01 - player somewhere on our player on the
16:04 - arm on the pistol here you can see this
16:07 - script sits right here and inside of
16:09 - this we are not currently doing any
16:11 - damage we simply are calling a debug.log
16:14 - so what we want to do in here is uh
16:17 - maybe we can keep the debug. log for now
16:21 - um it's it's nice to have but we can
16:23 - also check if hit
16:27 - dot actually let's do it this way we're
16:29 - going to store an enemy component call
16:33 - this enemy uh and we're going to equal
16:36 - that to hit. get
16:39 - component whoops hit. game objects for
16:43 - some reason this is not really doing
16:45 - what I wanted to hit. collider do game
16:50 - object or get component yeah we can do a
16:53 - get component directly on that and uh
16:56 - we're going to get the component type of
16:58 - of enemy and uh we're going to Simply
17:01 - close that off and then we're going to
17:03 - check if
17:04 - enemy uh is not equal to
17:08 - null so if we have actually hit an enemy
17:12 - we're going to damage it so we're going
17:13 - to say enemy dot um damage enemy and
17:18 - we're going to give it the damage amount
17:21 - of damage so save that and then in here
17:26 - uh we can
17:29 - make this debug.log
17:31 - statement um exclusive to the enemies so
17:34 - we're only going to call that whenever
17:37 - we actually damage
17:39 - something so now let's close that down
17:42 - clear out the logs here and we can see
17:44 - we have some kind of
17:46 - error I'm going to bring the console log
17:48 - down here so it's easier to
17:51 - read um it has some invalid arguments
17:54 - are we for some reason doing a damage
17:59 - um variable of type float here yes
18:01 - indeed we are so let's make that into an
18:04 - integer let's see if that gives us
18:06 - another error no that just clears it out
18:09 - and let's hit
18:12 - play so now you can see I'm just going
18:16 - to pause here so now you can see that
18:20 - whoops actually I want to maximize this
18:23 - so now you can see that when we are
18:26 - hitting our enemy enough times that it
18:30 - healths its Health goes down it will
18:33 - just destroy itself so that's super cool
18:37 - uh currently we have our alien over here
18:41 - and it stats is set to a 100 health and
18:44 - our pistol is set to do 10 damage so
18:47 - let's see if if that is that is indeed
18:50 - correct uh currently we are shooting
18:52 - really really quickly I'm just going to
18:54 - set that fire rate back down to zero so
18:57 - we only so we need to click each time
19:00 - and I'm going to click 1 2 3 4 5 6 7 8 9
19:04 - 10 and then it goes down so it's uh this
19:08 - is a really cool system because we have
19:11 - the stats isolated we have the weapon
19:13 - isolated we have the destroying isolated
19:16 - in the game master script and uh so this
19:19 - is really flexible and allows us to
19:21 - easily add components such as a enemy
19:25 - health bar which I would very much like
19:27 - to do um
19:29 - soon so that was pretty much all I had
19:32 - to show for this tutorial I hope that
19:34 - you were able to follow uh even though I
19:38 - haven't uh I had not quite planned out
19:41 - everything uh step by step but I just
19:44 - thought it was really important to
19:46 - sometime show you the actual process of
19:49 - figuring these things out so again
19:52 - thanks for watching I hope you enjoyed
19:54 - it and I'll see you in the next
19:57 - video
20:06 - oh

Cleaned transcript:

thanks for tuning in at braies hello everyone and welcome to video number 15 in the how to make a 2d platformer course in today's video we're going to make our enemy search for our player whenever he dies so that it will continue chasing him when he spawns back in we're also going to make on the first part at least of the central enemy component which is going to store health and uh other stats and functionality for uh destroying this enemy and maybe making it spawn or something we'll see about that I've planned some of this to tal out completely in my head but I've also left some of it uh for us to figure out together because I think that it's it's good for you to see how uh to kind of figure some of these things out as we go instead of just knowing it already so um without further Ado I'll just do one quick plug here uh because I've just released UPA tool kit uh version two and uh this new version uh is not backwards compatible because it's features a lot and lot of changes uh it's much better now i' I've used a a new method for serialization of your images um it introduces a layer system it's just generally much better uh structured uh so really check it out it's it's totally awesome if you want to make pixel art in unity for free cool so uh as always if you have any questions go to the forums and uh let's just stick right into it so as you can see I have done nothing since we left our scene last time here you can see we have our enemy AI script and our alien spaceship right here and what I want to do with this is just drag it under the prefabs folder so we can spawn multiple enemies later like that and uh you can see when I hit play it will chase after us um and uh if you enable gizmos up here and select the spaceship uh we should also be able to see if we open up the Seeker script here we should be able to see the path that it draws to our player so that's just a bit useful when debugging cool but the issue as is is that when we jump down and we die 2 1 and we hear this spawning sound I'm just going to disable my monitors here you can see that the enemy doesn't chase us it just uh has this point that goes down here but it's stationary so the way to fix this is sticking into the enemy AI script so double click that to open it up in monod develop here I'm just going to zoom in a bit on this maximize it so it's easier for you to read and you can see that we have a few checks here checking if our Target is equal to null and currently we just Panic uh we do the same in the fixed update function and in the update path enumerator method so what we do here is instead of just returning each time we want to now start looking for the player so let's first off make a private Boolean that is going to tell us whether we are looking for the player or not so searching for player it's good to give uh keep these long descriptive names you're going to thank yourself later if your scripts gets uh script gets really long uh and we're just going to default that to false then inside of our start function uh here we can write out uh kind of what we want to happen if our Target equals nor we don't want to panic instead what we want to do is we want to check if we are searching for the the player uh because if we already doing that then we don't want to do anything in here so we're going to say if we are not searching for the player and then we can do some functionality inside of this like this and uh what we then want to do is we first off want to uh set searching for player to true and then we want to actually search and uh in doing this what I want to do is basically call a method more specifically an i enumerator method uh that we can then uh do all our uh searching L logic in and then it's going to call itself uh with some delay if uh we haven't found what we were looking for so it's going to search maybe each second or two times a second or something like that so we don't do our searching every frame because looking through uh a bunch of game objects especially if you have a large scene can be pretty taxing there's no reason to do such a large search every frame so in order to do this uh what I want to do is I want to say start Co routine and in here we can call the method that is going to do our searching and we're just going to call this search for player and remember the open and close parenthesis there so I think this should be good we're going to say that we are starting to search for our player and we going going to call the uh search for player method then down here maybe above the uh update path I enumerator you can put it whever you want we're going to type I enumerator search for player and this should stop being read in a second and then uh open and close our parentheses and then put in some brackets and now you can see that it stops being read up there because now it can find and the method inside of the script uh then what we do inside of this method is um first off we um we want to uh do a game object. find so we uh do game object whoops game object. find game object with tag and make sure this is singular and then in here we can put whatever tag you want I'm just going to put in player uh if you want uh the different enemies to search for different things you can of course make this a variable just a simple string and uh then you can input it in the hierarchy or in the inspector I mean uh I'm just going to hardcoded here um but you might be better off doing something else cool but we want to store this in a temporary rary variable uh called game object of type game object I mean and we're going to call this uh s result for search result the reason why we don't just directly equal Target to this variable or to this value here is that this is going to return a game object so in order for this to be valid we would have to do dot transform and we can't access the trans form parameter if this doesn't find anything so first we store it in a variable then we check if that variable has is is equal to null or not and then we can assign it to the Target so now we say if search result uh is equal to null then we can stop searching so if we if this uh or or then we can uh I'm sorry then we can continue searching and we do this by uh calling again the search for player method but with a short delay so let's type in in yield return new wait 4 seconds remember we've done this down here and then we're going to put in and you could do an update rate again I'm just going to hard code this to 0.5f seconds that's how much is going to to be between each update and then uh down here we can then start a code routine and this is going to be the same code routine that we're currently in so search for player and that way we simply going to Loop so what we have uh yet is that if our Target is equal to null and we are not searching for the player we're going to start searching for the player and make sure that we store this in a variable then it's going to jump down here it's going to find uh the results for uh game object with tag player it's going to store it in a temporary variable we're going to check if it's found something and if it hasn't we're going to wait for half a second and then we're going to repeat uh the searching if it has found something so else if it has found something what we want to do is we want to first off say that we have found what we were looking for so we don't want to uh S search anymore so searching for player equals false we also want to set our Target equal to S result. transform and we also want to return and remember whenever you're inside an iron numerator in order to return we need to put in some kind of bullan value I'm just going to put in false and then lastly we want to start updating our path again because down here what we do when our Target is equal to null is we return and whenever you return out of an i enumerator or any other method that isn't called again uh it's going to stop going so our update path here is simply going to stop stop updating so we want it to or we want to tell it that it should start updating again so we're going to type in start Cod routine update path remember the parenthesis and a semicolon and this way we loop back into the update path method now we can take this uh checking um uh this if statement block up here and we can simply uh copy this and we can replace this one with that and we can replace this one with that now when we hit save hopefully we don't get any errors we do let's see here an object of type convertible to Bull is required for the return statement have has we um have we forgot anything here so here we're going to return false again this is an ion numerator and uh down here we simply going to return so that should fix it indeed it did let's try this out so hit the play button it's going to look for us and it's going to work just fine then when we jump down it's going to stop doing anything when we spawn back in it's going to search for us again and you see the delay there of half a second is not something that you would ever notice uh you might even bump that down to 1 second if you are uh really optimizing your game um maybe if you're doing mobile or or anything like that cool so that was the first and most important part of this tutorial sort to say this fixed the most apparent bar uh and I'm just going to close down this enemy AI here and move it into the scripts folder because it's no longer needed and now we can continue on to the stuff that I haven't quite planned out but which should be pretty fun which is uh actually writing out an enemy component uh that is going to be Central for any enemy that we have so let's hit add compon component new script and you can see I've already typed it there enemy and it's going to be of uh type c then we hit create an ad double click it to open it up in mono develop here and uh what I want to do here is basically copy uh a lot of the functionality that we have within our player script because they they're going to be fairly similar so we can simply take all of the stuff inside of the class here copy it in here then we can simply rename player stats to enemy stats U we still going to have a health then we can uh rename this here also to fit enemy stats here and it's going to be a new enemy stats there and then I actually don't want to do player stats I think stats is is quite okay and then down here simply do stats rename that to Stats we can delete the update State function and the fault boundary and uh down here if we don't want this method uh to be called damage player we want this to be called damage enemy and uh then in here we don't want to kill the player whenever our health goes below zero we want it to kill an enemy so we need to go into the game master script and uh do a kill enemy uh method so we're going to do game master. kill enemy and we're going to give it this and uh then we're going to put in a semicolon save that now we can go back into um or into can find the game master script double click that and you can see here whoops that we have a bunch of convenience methods sort of say that handle all of the respawning of the player and the killing of the player uh um separately from the player itself and I want to do the same here with the Enemy because it's just better to have this um Central uh game master that does all of the respawning and all that uh so you don't have to uh reference yourself and uh do weird things when you want to do things after the uh object has been destroyed such as um doing a sound or whatever so what we want to do in here is first of all just kill off the agent spaceship we simp they want to call a destroyer method and uh we do this by making a new method here we're going to call it a public static um void and we're going to call it kill enemy we're going to take in an enemy which we're going to call enemy and uh then inside of the U curly brackets here we simply going to uh call a destroy method and give it as the input the enemy. game object this is very simply similar to The Kill player method up there so let's see if this works we're going to save this out our errors disappear and uh this looks like it looks like it's working but currently we have no way of damaging our spaceship because we actually have a um damage enemy method available but we're not calling it anywhere so as you can see right now when we hit play and click there oops lots of paths here uh it's quite annoying I know you can disable these but first off I just want to see here we hit alien Spa spaceship and did 10 damage we call out these debug.log statements but we are not actually doing any damage so if we double click that it'll take us right to the point in our weapon. CS script which sits on our player somewhere on our player on the arm on the pistol here you can see this script sits right here and inside of this we are not currently doing any damage we simply are calling a debug.log so what we want to do in here is uh maybe we can keep the debug. log for now um it's it's nice to have but we can also check if hit dot actually let's do it this way we're going to store an enemy component call this enemy uh and we're going to equal that to hit. get component whoops hit. game objects for some reason this is not really doing what I wanted to hit. collider do game object or get component yeah we can do a get component directly on that and uh we're going to get the component type of of enemy and uh we're going to Simply close that off and then we're going to check if enemy uh is not equal to null so if we have actually hit an enemy we're going to damage it so we're going to say enemy dot um damage enemy and we're going to give it the damage amount of damage so save that and then in here uh we can make this debug.log statement um exclusive to the enemies so we're only going to call that whenever we actually damage something so now let's close that down clear out the logs here and we can see we have some kind of error I'm going to bring the console log down here so it's easier to read um it has some invalid arguments are we for some reason doing a damage um variable of type float here yes indeed we are so let's make that into an integer let's see if that gives us another error no that just clears it out and let's hit play so now you can see I'm just going to pause here so now you can see that whoops actually I want to maximize this so now you can see that when we are hitting our enemy enough times that it healths its Health goes down it will just destroy itself so that's super cool uh currently we have our alien over here and it stats is set to a 100 health and our pistol is set to do 10 damage so let's see if if that is that is indeed correct uh currently we are shooting really really quickly I'm just going to set that fire rate back down to zero so we only so we need to click each time and I'm going to click 1 2 3 4 5 6 7 8 9 10 and then it goes down so it's uh this is a really cool system because we have the stats isolated we have the weapon isolated we have the destroying isolated in the game master script and uh so this is really flexible and allows us to easily add components such as a enemy health bar which I would very much like to do um soon so that was pretty much all I had to show for this tutorial I hope that you were able to follow uh even though I haven't uh I had not quite planned out everything uh step by step but I just thought it was really important to sometime show you the actual process of figuring these things out so again thanks for watching I hope you enjoyed it and I'll see you in the next video oh
