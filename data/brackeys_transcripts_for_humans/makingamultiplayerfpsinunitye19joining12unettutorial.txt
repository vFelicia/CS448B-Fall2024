With timestamps:

00:01 - programming is tough thanks for tuning
00:03 - in at
00:05 - braies hello everyone and welcome to
00:07 - this video on making a multiplayer FPS
00:09 - in unity today we're going to be
00:11 - creating a server browser that will list
00:13 - all of the currently available rooms
00:15 - along with the name of the room and the
00:17 - amount of players currently in that game
00:20 - so that's going to be really fun also
00:22 - thank you so much for helping us reach
00:25 - level one on the patreon page the first
00:28 - goal has been met and that means that I
00:30 - can now guarantee two videos every
00:33 - single week that I'm going to be
00:35 - uploading at least for now Sundays and
00:38 - Wednesdays and of course this schedule
00:40 - might change in the future but two
00:42 - videos a week uh should be it so that's
00:45 - going to be really really exciting also
00:48 - if you want to get over there the
00:50 - patreon page is of course Very Much
00:52 - still running and uh I hope to get a lot
00:55 - further the next goal is uh live streams
00:57 - where we can do some exciting uh Q&A
01:00 - stuff I can help you out with your games
01:02 - and answer questions and uh also we can
01:04 - do some live development that would be
01:06 - really fun uh also in that goal is maybe
01:09 - a game um math Series so kind of math
01:12 - Essentials for game developers that's
01:15 - another thing I really want to create so
01:17 - uh if you want to see those things head
01:18 - on over to the patreon page and yeah
01:20 - without further Ado let's get started so
01:23 - you can see I'm here in unity and
01:24 - basically what we did in the last video
01:26 - was we set up this Host Game UI and what
01:29 - we we can do now is simply duplicate
01:32 - this object and then we'll rename this
01:34 - to join game and we can take this join
01:36 - game object and simply move it over by
01:39 - clicking and dragging and holding down
01:40 - shift to only move it in one axis and uh
01:44 - we can now uh open this up and go and
01:46 - rename this to join game title and then
01:50 - uh change the text as well so this is
01:52 - going to be join game and we can uh
01:55 - remove the input field here but we can
01:57 - also reuse the create room Buton button
02:00 - so this is now going to be our refresh
02:03 - button and it's simply of course going
02:06 - to refresh our server list and uh we can
02:09 - maybe uh disable our on click event for
02:12 - now and change the preferred height to
02:14 - something like 40 just to make it a bit
02:17 - uh Less in your face and then we can
02:19 - change the text itself here to say
02:23 - refresh perfect and in between the join
02:26 - game title and the button is where I
02:28 - want a scroll View view that will uh
02:31 - contain all of the different room uh
02:33 - list items so uh let's right click on
02:35 - the join game here go in the UI and then
02:38 - scroll View and we can now now drag this
02:41 - out and drag it back in to uh position
02:44 - it correctly and we want it to be there
02:46 - under the uh joint game title and then
02:49 - we can go in here and add a component
02:51 - and this is going to be a layout element
02:54 - and we want to go and do preferred uh
02:57 - height and set this to something like
02:58 - 400 and and the great thing about a
03:01 - preferred height is that it's going to
03:03 - try and remain at 400 no M matter what
03:06 - we do unless it runs out of space and
03:09 - then it will shrink itself uh to fit so
03:12 - that's a a really uh great way to think
03:14 - about these preferred values instead of
03:16 - just setting a minimum in which case it
03:18 - will just uh go without the confines of
03:21 - the screen and look super weird so it
03:23 - will just get cut off cool so uh inside
03:27 - of this scroll view we of course going
03:29 - to have a bunch of different uh uh
03:31 - server list item uh objects sitting
03:35 - there and we want the uh scroll view to
03:38 - take care of stuff like fitting
03:40 - everything uh in here and uh allowing us
03:43 - to scroll down if we need to uh for so
03:47 - that's going to do all of that but
03:49 - scroll views can be a bit funky and a
03:52 - bit confusing at time so I'll try and
03:54 - explain this carefully so we have a
03:57 - scroll scroll view itself here and this
03:59 - is going to be our server list or maybe
04:01 - we should call it our room list and then
04:04 - scroll
04:05 - View and under this scroll view we
04:08 - basically have three different things we
04:09 - have two scroll bars a horizontal and a
04:12 - vertical and a viewport which uh
04:15 - contains uh all of our stuff so this
04:18 - contains our actual content and the
04:21 - content object is all of the things that
04:24 - we want to display within our scroll
04:26 - View and uh we basically want to parent
04:30 - all of our list items to this content uh
04:33 - object and what I want to do is I want
04:36 - to have this content object resize
04:38 - itself to fit the size of all of our
04:41 - list items combined and we'll do that in
04:43 - just a second but first what we can do
04:45 - is we can disable our hor horizontal
04:48 - scrolling on the scroll W component and
04:51 - that means we can also simply remove our
04:54 - horizontal scroll bar and that just
04:56 - cleans up uh this uh scroll view just a
04:59 - bit then what we can do is we can find
05:02 - our content object and we can add a new
05:04 - component to this called a vertical
05:06 - layout group uh I'm really a big fan of
05:09 - vertical layout groups as you can see
05:11 - and that means that we can just right
05:13 - click our content go under UI and make a
05:15 - new button and then maybe just drag this
05:18 - out and drag it back in and you can see
05:20 - that our button has now been positioned
05:23 - automatically however I don't want this
05:25 - button to just scale up to be some kind
05:27 - of huge size I want this to have a fixed
05:29 - size
05:30 - and I want our content to scale to that
05:32 - size so what I'll do is go under button
05:35 - add component layout element choose a
05:38 - preferred height of let's say uh 30 is
05:42 - good I think and we'll also go under the
05:44 - content and disable child Force expand
05:47 - on the height uh so that now has uh
05:50 - fixed that problem however our content
05:53 - is not yet resized so all we need to do
05:56 - here is add a component called content
05:59 - SI size fitter and that will if we
06:02 - choose vertical fit preferred size scale
06:06 - it to the preferred size of our elements
06:09 - uh that are parented to this content
06:11 - object so if I duplicate this button to
06:13 - make another one you can see that our
06:15 - content now resizes to fit that button
06:17 - as well and I can go ahead and do this a
06:19 - bunch of times and you can see that we
06:22 - now get this a nice scroll bar uh
06:25 - feature uh enabled and if I hit play
06:28 - here everything will resize to look nice
06:32 - however this scroll bar sometimes can
06:34 - add a bit act a bit funky and all we
06:36 - need to do now is go ahead and find our
06:39 - vertical scroll bar and we you can see
06:41 - it's for some reason it's set our height
06:43 - to zero so we'll just uh bump up our
06:46 - height here and then we can take this
06:48 - object and we can move it to the top and
06:51 - then we can drag it all the way down to
06:53 - size it there and then we want it to
06:55 - scale uh with the height here so I'm
06:57 - going to select scaling on the heart uh
07:01 - this is uh this is the one here so uh
07:03 - now we should be able to hit play and
07:05 - you can see that I can now drag down
07:07 - here to see all of the different buttons
07:10 - and I can also drag on the object itself
07:12 - and I'm just going to go ahead and get
07:14 - rid of this uh uh network manager uh
07:18 - network manager Hut there so just
07:20 - disable the runtime for now so you
07:22 - can see that now that just works now and
07:25 - it's even it even has this nice
07:27 - elasticity to it it's it's kind of nice
07:30 - to use great so uh let's delete some of
07:33 - these buttons here and just focus on the
07:36 - first one and I'm going to rename this
07:38 - to our um room list item this is going
07:42 - to be a single room item and uh it's
07:46 - going to have the name of our room the
07:48 - amount of players in that room and some
07:50 - kind of way of telling the player to
07:52 - click it if he wants to join it so uh
07:54 - the first thing that I want to do is
07:56 - kind of Center our text to the left here
07:59 - and then just bring it out just a tad
08:01 - from the side and this is going to be
08:04 - the room name and then it's going to say
08:07 - like this maybe uh two out of uh six and
08:11 - that's going to be of course the amount
08:13 - of players you're going to have that as
08:14 - a separate text object I'm just going to
08:16 - have it in one uh and then I'm going to
08:19 - rename let's just keep that as text
08:21 - that's fine and then we can duplicate
08:23 - this text object and we can call this
08:25 - one the uh click to join text
08:30 - and all I want to do here is simply move
08:32 - it over uh something like uh here and
08:36 - then I want to uh have this snap to the
08:40 - right there we go and move it out just a
08:42 - bit and this is the click uh and I'm
08:45 - going to put this in parenthesis
08:47 - actually click to join and uh we want to
08:50 - make this a lot smaller something like
08:52 - maybe 12 and I want to make this italic
08:55 - as well so that looks pretty nice uh
08:58 - then it should shows that on all of the
09:00 - buttons so that the player is sure that
09:02 - he just needs to click the uh the thing
09:04 - to get in there so that's great and uh
09:08 - we can now take this here and turn it
09:10 - into a prefab by dragging it into uh our
09:13 - project panel I'm just going to drag it
09:15 - out here as long as I'm working with it
09:16 - and then we'll sort it into the prefabs
09:19 - folder
09:20 - later good so that was actually the
09:23 - essential UI we need except one small
09:27 - thing and that is something that is kind
09:29 - of optional but that I would really like
09:31 - to have so we can now delete this room
09:33 - list item and that is some kind of
09:36 - status text object that shows us well we
09:40 - are currently loading all of this stuff
09:42 - or uh we currently joining a game
09:44 - whatever so when we're not displaying
09:46 - all of the servers that the user can
09:48 - choose I want to have some kind of
09:50 - feedback for the user showing what is
09:52 - currently going on so to do this what I
09:55 - want to do is uh go under our um
09:59 - actually let's just do this from without
10:02 - the scroll view or maybe we can put it
10:06 - inside of the scroll view but uh not
10:08 - inside of the content uh so just
10:10 - something like here and we can put a UI
10:13 - object here and it's just going to be a
10:14 - plain text object and I want to snap
10:17 - this to the uh left uh corner here upper
10:20 - left corner and have it sit somewhere
10:22 - around here U with a font size of 16 a
10:26 - color of completely white and this is
10:28 - going to say maybe maybe uh loading dot
10:31 - dot dot or something like that so uh
10:34 - that's really easy to use and I'm just
10:35 - going to remove the text here so it's
10:37 - nothing by default unless something is
10:38 - happening and this is going to be our
10:40 - status
10:42 - text so that's perfect and uh now we can
10:45 - go ahead and hook some of these up uh to
10:48 - a script so the first thing that I kind
10:50 - of want to do is have a join game a
10:54 - central script for joining a single game
10:57 - and uh we could have this sit on on the
10:59 - uh network manager but we are not going
11:02 - to need the join game um script in other
11:05 - scenes and uh that's why I thought that
11:08 - I would maybe just have it sit either on
11:11 - the join game UI object or maybe on a
11:13 - separate object in the hierarchy so
11:15 - let's go ahead and create an empty here
11:17 - and reset the transform on this and we
11:20 - can go ahead and call this one uh let's
11:23 - just call this one join game and it's
11:26 - going to have a uh script that as well
11:29 - says join game um so that all looks fine
11:33 - and dandy and what we can then do is
11:35 - maybe open up this script in visual
11:38 - studio and this is going to be a fairly
11:39 - long one I can see by the timing that I
11:43 - might have to split this video up into
11:45 - two uh but uh we'll just go ahead and
11:47 - get started with this uh anyway so we
11:51 - are here in visual studio all right and
11:53 - uh first off we're going to be needing a
11:55 - bunch of Nam spaces we're going to be uh
11:58 - using uh Unity engine of course and then
12:01 - unityengine.ui because we want to be
12:04 - messing around with uh some text objects
12:06 - then we want to use system uh.
12:10 - collections. generic because we're going
12:12 - to be using generic lists then we want
12:15 - to be using um Unity engine. networking
12:19 - we are going to be using some networking
12:21 - functions and then finally Unity engine.
12:24 - networking. match because we are going
12:26 - to be using match info or match
12:29 - description is what it's called um to be
12:31 - more specific so that's perfect and what
12:34 - we want to do is first of all set up
12:36 - some kind of reference to our network
12:38 - manager so this is just going to be a
12:39 - private network manager called network
12:42 - manager and we're going to set this uh
12:45 - in the start method where we're going to
12:47 - say network manager equals Network
12:50 - manager.
12:52 - Singleton and uh then we want to check
12:54 - if Network
12:56 - manager. Matchmaker
12:59 - is equal to uh null well then we want to
13:02 - say network manager do uh is it create
13:06 - match or uh it's start Matchmaker so
13:10 - start Matchmaker uh there we go just so
13:13 - to make sure that the matchmaker is
13:15 - actually set up before using it so we
13:17 - did this in the host game script as well
13:19 - right here so you can just duplicate
13:21 - that code if you want to uh then next up
13:24 - we are going to um well the very first
13:26 - thing that we want to do is basically
13:28 - just refresh our list and this is also
13:31 - the very Central uh function that we're
13:33 - going to have is some kind of refresh uh
13:37 - room
13:38 - list or you could simply just call it
13:41 - refresh whatever you want to do here I'm
13:43 - going to call this refresh room list
13:45 - just to be as specific uh when naming My
13:48 - Method as um possible and of course we
13:50 - need a list of rooms to refresh so I'm
13:53 - going to have a list here and it's going
13:55 - to store a series of game objects um you
13:58 - could
13:59 - also make these transforms but I'm just
14:01 - going to do game object and this is
14:03 - going to be a room list and it's going
14:06 - to be equal to a new list of Game
14:09 - objects uh there we go okay and uh
14:13 - that's the first thing that we want to
14:15 - create here and we're going to have more
14:16 - variables but we'll do them those in a
14:19 - second and we're going to have a PO a
14:21 - public void and we want this to be
14:23 - public called refresh room list we want
14:25 - this to be public because we want to
14:27 - call it from a UI button so uh that's um
14:32 - therefore we need it to be public
14:33 - because when we drag it into the on
14:34 - click event uh we need to be able to see
14:37 - it good so uh the actual refreshing here
14:41 - is actually fairly simple we are going
14:43 - to uh go to our network manager so find
14:47 - our network manager here go under the
14:49 - Matchmaker and then we want to list some
14:53 - matches and uh this takes in a series of
14:56 - arguments we are going to have the start
14:58 - page number and this is if you have
15:00 - multiple Pages I'm just going to say uh
15:02 - zero then we want the page size and in
15:06 - our case this is going to be 20 so we'll
15:08 - just list the first 20 elements uh and
15:11 - then we'll have a match name filter this
15:13 - is for searching we don't want to do
15:15 - that and uh then we want a call back
15:18 - back method and this is a method that
15:20 - will be called as soon as it's found a
15:23 - list of matches uh and we are going to
15:25 - make one called on Match list we're
15:28 - going to make this ourselves and then we
15:30 - want our status text so uh we need a
15:33 - reference to our status object so we'll
15:36 - go up here and we'll make a public
15:39 - actually let's make this a serialized
15:41 - field so a serialized field private uh
15:44 - text object and we'll call this one our
15:46 - status and uh we'll go down here and
15:50 - we'll say status. text uh equals and we
15:54 - are now loading some uh elements in here
15:58 - and then in the unmatch list we can set
16:00 - this back to nothing because then we
16:02 - have indeed succeeded in loading these
16:05 - and are now displaying them so we'll
16:07 - create a void and I actually believe
16:10 - this is this has to be public uh so
16:14 - unmatch list and this is going to take
16:16 - in a list match
16:18 - response and we're going to call this
16:20 - the match
16:22 - list and what can we do with this well
16:25 - first off we want to set status. text
16:27 - equal to nothing
16:30 - and then we want to say if match list is
16:33 - equal to null well uh then we haven't
16:37 - found any matches whatsoever it's not
16:39 - that only that we haven't found any
16:41 - matches it's that we weren't successful
16:44 - in retrieving a match list and then
16:45 - there's definitely something wrong here
16:48 - so maybe we should in that case set our
16:50 - status text
16:52 - to um couldn't get matches something
16:57 - like that uh or couldn't get room list
17:02 - something like that would be fine and
17:05 - then we can go ahead and simply return
17:06 - because then we we basically can't do
17:08 - anything so this is only uh this is
17:11 - probably only going to happen when you
17:12 - have some kind of connectivity issue and
17:14 - then it's something that the user should
17:17 - resolve so uh next up we're going to uh
17:20 - clear all of the rooms that are
17:21 - currently in our list so we want to call
17:24 - some kind of clear uh room uh list
17:29 - method and let's just go down and make
17:31 - this right away and this can be private
17:33 - so we're going to make a clear room list
17:36 - and it's not going to take in any
17:38 - arguments whatsoever and what we want to
17:41 - do here is Loop through all of the
17:43 - elements in our room list so for in i i
17:45 - is less than room list.
17:49 - count uh and then we want to uh of
17:52 - course destroy that object so we want to
17:56 - destroy room list I and that's already a
18:01 - game object so we don't need to do
18:02 - anything here so we'll just remove that
18:04 - object uh from our
18:07 - uh uh we'll have all of the objects
18:10 - objects sit under your content and in
18:12 - our case we'll just remove that uh
18:14 - object right away and uh then we want to
18:17 - clear our list so then we can go room
18:20 - list. clear because uh just because we
18:24 - remove the object that uh is referenced
18:27 - in that list does does doesn't mean that
18:30 - the reference is removed from the list
18:32 - we need to do that separately and we do
18:34 - that by calling uh this function here so
18:37 - uh just remember to do that great so now
18:40 - that we've looped through all of that
18:42 - and removed all of the elements uh we
18:44 - can go ahead and now add in some new
18:47 - ones uh and in this case we are going to
18:49 - Loop through this match list response
18:54 - and what is the match list match list
18:57 - respond well it's a uh Json response for
19:02 - list match request and that makes that
19:04 - that means that it's basically just pure
19:08 - data uh containing stuff like uh the
19:11 - name of the matches how many matches and
19:14 - all of that stuff so it's just a list of
19:16 - pure data that we can convert into
19:19 - something that we can use inside of c
19:21 - and in our case we're going to convert
19:24 - uh some of this stuff uh into actual
19:27 - objects uh and I'm I'm going to show you
19:29 - how to do that so uh basically what
19:31 - we'll do here is we'll say for each
19:33 - match description because this match
19:36 - list actually just has a series of match
19:39 - descriptions uh just single match info
19:43 - objects uh and we're going to call each
19:45 - of these match in match
19:48 - list. matches there we go and uh then we
19:53 - can say so for each match that we found
19:57 - uh we can go ahead and make make a new
19:59 - object so we'll make a game object here
20:01 - and we'll call this the room list um
20:06 - item game object and set that equal to a
20:10 - new object that we will instantiate here
20:12 - and in order to do that we need a prefab
20:14 - to instantiate so what do we want to
20:16 - instantiate well we want to have up here
20:19 - another serialized field and this is
20:20 - going to be a private uh game object and
20:23 - this is going to be
20:25 - called um the room list item
20:30 - prefab and there we go so that's what we
20:32 - want to instantiate here and we don't
20:35 - need to set any position because we'll
20:37 - uh have our content or our scroll view
20:40 - set that for us so that's fine and uh
20:43 - all we want to do is simply parented to
20:45 - that scroll view so we'll have to have a
20:48 - reference to the scroll view itself so
20:50 - we'll have a serialized field here and
20:52 - that's going to be a private transform
20:54 - and uh this is going to be uh called
20:57 - Maybe room uh
21:00 - list
21:03 - parent and uh all we want to do uh down
21:06 - here is now that we've created this on
21:08 - list item we want to parent it to our
21:11 - room list parent so we'll simply go room
21:14 - list item go.
21:16 - transform. parent to our room list
21:22 - parent there we go and uh next
21:25 - up I think we'll just skip this next
21:28 - Next Step just for now I think because
21:30 - what we want to do here is now uh have a
21:33 - component sit on the game
21:38 - object that will take care of setting up
21:43 - the name slash amount of
21:49 - users
21:51 - uh as well as setting up a callback
21:56 - function
21:58 - hang in here um that will join the game
22:04 - okay so uh basically what this means is
22:07 - we need to have uh some kind of uh way
22:10 - of setting uh the name equal to the
22:12 - match name setting the amount of users
22:14 - that are in uh the room and we also need
22:17 - a way to know that if we press that
22:20 - button it's going to join the correct
22:22 - room so we need a way of knowing what
22:25 - room to connect to when a button is
22:27 - pressed and we do that using a call back
22:29 - function and we'll create all of that uh
22:31 - in a second so the video got kind of
22:33 - long and I had to split it up into two
22:35 - parts we covered a bunch of stuff in the
22:37 - second one so click the screen now to be
22:39 - taken there as soon as it's ready and
22:41 - I'll see you there so I'm going to start
22:43 - mentioning patreon supporters the
22:45 - following month after they donate so
22:47 - that there won't be any difference from
22:49 - donating at the beginning of the month
22:51 - to the end of the month this way
22:53 - everyone will get a full month of
22:55 - mentions and yeah everyone will be happy
22:57 - so um just wait for uh the next month
23:00 - and you will see your name here so
23:02 - thanks for watching and I'll see you
23:03 - soon

Cleaned transcript:

programming is tough thanks for tuning in at braies hello everyone and welcome to this video on making a multiplayer FPS in unity today we're going to be creating a server browser that will list all of the currently available rooms along with the name of the room and the amount of players currently in that game so that's going to be really fun also thank you so much for helping us reach level one on the patreon page the first goal has been met and that means that I can now guarantee two videos every single week that I'm going to be uploading at least for now Sundays and Wednesdays and of course this schedule might change in the future but two videos a week uh should be it so that's going to be really really exciting also if you want to get over there the patreon page is of course Very Much still running and uh I hope to get a lot further the next goal is uh live streams where we can do some exciting uh Q&A stuff I can help you out with your games and answer questions and uh also we can do some live development that would be really fun uh also in that goal is maybe a game um math Series so kind of math Essentials for game developers that's another thing I really want to create so uh if you want to see those things head on over to the patreon page and yeah without further Ado let's get started so you can see I'm here in unity and basically what we did in the last video was we set up this Host Game UI and what we we can do now is simply duplicate this object and then we'll rename this to join game and we can take this join game object and simply move it over by clicking and dragging and holding down shift to only move it in one axis and uh we can now uh open this up and go and rename this to join game title and then uh change the text as well so this is going to be join game and we can uh remove the input field here but we can also reuse the create room Buton button so this is now going to be our refresh button and it's simply of course going to refresh our server list and uh we can maybe uh disable our on click event for now and change the preferred height to something like 40 just to make it a bit uh Less in your face and then we can change the text itself here to say refresh perfect and in between the join game title and the button is where I want a scroll View view that will uh contain all of the different room uh list items so uh let's right click on the join game here go in the UI and then scroll View and we can now now drag this out and drag it back in to uh position it correctly and we want it to be there under the uh joint game title and then we can go in here and add a component and this is going to be a layout element and we want to go and do preferred uh height and set this to something like 400 and and the great thing about a preferred height is that it's going to try and remain at 400 no M matter what we do unless it runs out of space and then it will shrink itself uh to fit so that's a a really uh great way to think about these preferred values instead of just setting a minimum in which case it will just uh go without the confines of the screen and look super weird so it will just get cut off cool so uh inside of this scroll view we of course going to have a bunch of different uh uh server list item uh objects sitting there and we want the uh scroll view to take care of stuff like fitting everything uh in here and uh allowing us to scroll down if we need to uh for so that's going to do all of that but scroll views can be a bit funky and a bit confusing at time so I'll try and explain this carefully so we have a scroll scroll view itself here and this is going to be our server list or maybe we should call it our room list and then scroll View and under this scroll view we basically have three different things we have two scroll bars a horizontal and a vertical and a viewport which uh contains uh all of our stuff so this contains our actual content and the content object is all of the things that we want to display within our scroll View and uh we basically want to parent all of our list items to this content uh object and what I want to do is I want to have this content object resize itself to fit the size of all of our list items combined and we'll do that in just a second but first what we can do is we can disable our hor horizontal scrolling on the scroll W component and that means we can also simply remove our horizontal scroll bar and that just cleans up uh this uh scroll view just a bit then what we can do is we can find our content object and we can add a new component to this called a vertical layout group uh I'm really a big fan of vertical layout groups as you can see and that means that we can just right click our content go under UI and make a new button and then maybe just drag this out and drag it back in and you can see that our button has now been positioned automatically however I don't want this button to just scale up to be some kind of huge size I want this to have a fixed size and I want our content to scale to that size so what I'll do is go under button add component layout element choose a preferred height of let's say uh 30 is good I think and we'll also go under the content and disable child Force expand on the height uh so that now has uh fixed that problem however our content is not yet resized so all we need to do here is add a component called content SI size fitter and that will if we choose vertical fit preferred size scale it to the preferred size of our elements uh that are parented to this content object so if I duplicate this button to make another one you can see that our content now resizes to fit that button as well and I can go ahead and do this a bunch of times and you can see that we now get this a nice scroll bar uh feature uh enabled and if I hit play here everything will resize to look nice however this scroll bar sometimes can add a bit act a bit funky and all we need to do now is go ahead and find our vertical scroll bar and we you can see it's for some reason it's set our height to zero so we'll just uh bump up our height here and then we can take this object and we can move it to the top and then we can drag it all the way down to size it there and then we want it to scale uh with the height here so I'm going to select scaling on the heart uh this is uh this is the one here so uh now we should be able to hit play and you can see that I can now drag down here to see all of the different buttons and I can also drag on the object itself and I'm just going to go ahead and get rid of this uh uh network manager uh network manager Hut there so just disable the runtime for now so you can see that now that just works now and it's even it even has this nice elasticity to it it's it's kind of nice to use great so uh let's delete some of these buttons here and just focus on the first one and I'm going to rename this to our um room list item this is going to be a single room item and uh it's going to have the name of our room the amount of players in that room and some kind of way of telling the player to click it if he wants to join it so uh the first thing that I want to do is kind of Center our text to the left here and then just bring it out just a tad from the side and this is going to be the room name and then it's going to say like this maybe uh two out of uh six and that's going to be of course the amount of players you're going to have that as a separate text object I'm just going to have it in one uh and then I'm going to rename let's just keep that as text that's fine and then we can duplicate this text object and we can call this one the uh click to join text and all I want to do here is simply move it over uh something like uh here and then I want to uh have this snap to the right there we go and move it out just a bit and this is the click uh and I'm going to put this in parenthesis actually click to join and uh we want to make this a lot smaller something like maybe 12 and I want to make this italic as well so that looks pretty nice uh then it should shows that on all of the buttons so that the player is sure that he just needs to click the uh the thing to get in there so that's great and uh we can now take this here and turn it into a prefab by dragging it into uh our project panel I'm just going to drag it out here as long as I'm working with it and then we'll sort it into the prefabs folder later good so that was actually the essential UI we need except one small thing and that is something that is kind of optional but that I would really like to have so we can now delete this room list item and that is some kind of status text object that shows us well we are currently loading all of this stuff or uh we currently joining a game whatever so when we're not displaying all of the servers that the user can choose I want to have some kind of feedback for the user showing what is currently going on so to do this what I want to do is uh go under our um actually let's just do this from without the scroll view or maybe we can put it inside of the scroll view but uh not inside of the content uh so just something like here and we can put a UI object here and it's just going to be a plain text object and I want to snap this to the uh left uh corner here upper left corner and have it sit somewhere around here U with a font size of 16 a color of completely white and this is going to say maybe maybe uh loading dot dot dot or something like that so uh that's really easy to use and I'm just going to remove the text here so it's nothing by default unless something is happening and this is going to be our status text so that's perfect and uh now we can go ahead and hook some of these up uh to a script so the first thing that I kind of want to do is have a join game a central script for joining a single game and uh we could have this sit on on the uh network manager but we are not going to need the join game um script in other scenes and uh that's why I thought that I would maybe just have it sit either on the join game UI object or maybe on a separate object in the hierarchy so let's go ahead and create an empty here and reset the transform on this and we can go ahead and call this one uh let's just call this one join game and it's going to have a uh script that as well says join game um so that all looks fine and dandy and what we can then do is maybe open up this script in visual studio and this is going to be a fairly long one I can see by the timing that I might have to split this video up into two uh but uh we'll just go ahead and get started with this uh anyway so we are here in visual studio all right and uh first off we're going to be needing a bunch of Nam spaces we're going to be uh using uh Unity engine of course and then unityengine.ui because we want to be messing around with uh some text objects then we want to use system uh. collections. generic because we're going to be using generic lists then we want to be using um Unity engine. networking we are going to be using some networking functions and then finally Unity engine. networking. match because we are going to be using match info or match description is what it's called um to be more specific so that's perfect and what we want to do is first of all set up some kind of reference to our network manager so this is just going to be a private network manager called network manager and we're going to set this uh in the start method where we're going to say network manager equals Network manager. Singleton and uh then we want to check if Network manager. Matchmaker is equal to uh null well then we want to say network manager do uh is it create match or uh it's start Matchmaker so start Matchmaker uh there we go just so to make sure that the matchmaker is actually set up before using it so we did this in the host game script as well right here so you can just duplicate that code if you want to uh then next up we are going to um well the very first thing that we want to do is basically just refresh our list and this is also the very Central uh function that we're going to have is some kind of refresh uh room list or you could simply just call it refresh whatever you want to do here I'm going to call this refresh room list just to be as specific uh when naming My Method as um possible and of course we need a list of rooms to refresh so I'm going to have a list here and it's going to store a series of game objects um you could also make these transforms but I'm just going to do game object and this is going to be a room list and it's going to be equal to a new list of Game objects uh there we go okay and uh that's the first thing that we want to create here and we're going to have more variables but we'll do them those in a second and we're going to have a PO a public void and we want this to be public called refresh room list we want this to be public because we want to call it from a UI button so uh that's um therefore we need it to be public because when we drag it into the on click event uh we need to be able to see it good so uh the actual refreshing here is actually fairly simple we are going to uh go to our network manager so find our network manager here go under the Matchmaker and then we want to list some matches and uh this takes in a series of arguments we are going to have the start page number and this is if you have multiple Pages I'm just going to say uh zero then we want the page size and in our case this is going to be 20 so we'll just list the first 20 elements uh and then we'll have a match name filter this is for searching we don't want to do that and uh then we want a call back back method and this is a method that will be called as soon as it's found a list of matches uh and we are going to make one called on Match list we're going to make this ourselves and then we want our status text so uh we need a reference to our status object so we'll go up here and we'll make a public actually let's make this a serialized field so a serialized field private uh text object and we'll call this one our status and uh we'll go down here and we'll say status. text uh equals and we are now loading some uh elements in here and then in the unmatch list we can set this back to nothing because then we have indeed succeeded in loading these and are now displaying them so we'll create a void and I actually believe this is this has to be public uh so unmatch list and this is going to take in a list match response and we're going to call this the match list and what can we do with this well first off we want to set status. text equal to nothing and then we want to say if match list is equal to null well uh then we haven't found any matches whatsoever it's not that only that we haven't found any matches it's that we weren't successful in retrieving a match list and then there's definitely something wrong here so maybe we should in that case set our status text to um couldn't get matches something like that uh or couldn't get room list something like that would be fine and then we can go ahead and simply return because then we we basically can't do anything so this is only uh this is probably only going to happen when you have some kind of connectivity issue and then it's something that the user should resolve so uh next up we're going to uh clear all of the rooms that are currently in our list so we want to call some kind of clear uh room uh list method and let's just go down and make this right away and this can be private so we're going to make a clear room list and it's not going to take in any arguments whatsoever and what we want to do here is Loop through all of the elements in our room list so for in i i is less than room list. count uh and then we want to uh of course destroy that object so we want to destroy room list I and that's already a game object so we don't need to do anything here so we'll just remove that object uh from our uh uh we'll have all of the objects objects sit under your content and in our case we'll just remove that uh object right away and uh then we want to clear our list so then we can go room list. clear because uh just because we remove the object that uh is referenced in that list does does doesn't mean that the reference is removed from the list we need to do that separately and we do that by calling uh this function here so uh just remember to do that great so now that we've looped through all of that and removed all of the elements uh we can go ahead and now add in some new ones uh and in this case we are going to Loop through this match list response and what is the match list match list respond well it's a uh Json response for list match request and that makes that that means that it's basically just pure data uh containing stuff like uh the name of the matches how many matches and all of that stuff so it's just a list of pure data that we can convert into something that we can use inside of c and in our case we're going to convert uh some of this stuff uh into actual objects uh and I'm I'm going to show you how to do that so uh basically what we'll do here is we'll say for each match description because this match list actually just has a series of match descriptions uh just single match info objects uh and we're going to call each of these match in match list. matches there we go and uh then we can say so for each match that we found uh we can go ahead and make make a new object so we'll make a game object here and we'll call this the room list um item game object and set that equal to a new object that we will instantiate here and in order to do that we need a prefab to instantiate so what do we want to instantiate well we want to have up here another serialized field and this is going to be a private uh game object and this is going to be called um the room list item prefab and there we go so that's what we want to instantiate here and we don't need to set any position because we'll uh have our content or our scroll view set that for us so that's fine and uh all we want to do is simply parented to that scroll view so we'll have to have a reference to the scroll view itself so we'll have a serialized field here and that's going to be a private transform and uh this is going to be uh called Maybe room uh list parent and uh all we want to do uh down here is now that we've created this on list item we want to parent it to our room list parent so we'll simply go room list item go. transform. parent to our room list parent there we go and uh next up I think we'll just skip this next Next Step just for now I think because what we want to do here is now uh have a component sit on the game object that will take care of setting up the name slash amount of users uh as well as setting up a callback function hang in here um that will join the game okay so uh basically what this means is we need to have uh some kind of uh way of setting uh the name equal to the match name setting the amount of users that are in uh the room and we also need a way to know that if we press that button it's going to join the correct room so we need a way of knowing what room to connect to when a button is pressed and we do that using a call back function and we'll create all of that uh in a second so the video got kind of long and I had to split it up into two parts we covered a bunch of stuff in the second one so click the screen now to be taken there as soon as it's ready and I'll see you there so I'm going to start mentioning patreon supporters the following month after they donate so that there won't be any difference from donating at the beginning of the month to the end of the month this way everyone will get a full month of mentions and yeah everyone will be happy so um just wait for uh the next month and you will see your name here so thanks for watching and I'll see you soon
