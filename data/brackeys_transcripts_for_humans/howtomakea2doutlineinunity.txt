With timestamps:

00:00 - hey it's me again mr. schmuck eyebrows
00:03 - at your disposal as you can probably
00:05 - guess we're still working from home so
00:07 - I'm afraid you're stuck with picture me
00:08 - a little while longer so a really common
00:11 - effect to use when creating a game is a
00:13 - 2d outline around your sprite this can
00:16 - be a great way to make a sprite stand
00:18 - out from the background and draw
00:19 - attention to something important but as
00:21 - is often the case with shaders that
00:24 - isn't actually a really easy and solid
00:26 - way to create an outline that is just
00:28 - going to work for everyone
00:29 - instead we kind of have to cheat our way
00:32 - there which quickly becomes a bit hacky
00:35 - that said the technique that I use and
00:37 - that I see used most commonly it's
00:39 - actually really simple to make and it
00:41 - works in most cases if you just follow a
00:43 - few guidelines it basically works by
00:46 - taking the sprite and creating a copy of
00:48 - it we then take this copy colored and
00:51 - offset it towards the left as you can
00:53 - see this crÃªpes a kind of drop shadow
00:55 - effect but if we repeat this process
00:57 - three more times toward right up and
00:59 - down it creates a nice even outline and
01:02 - we can do all this inside of shader
01:04 - graph without writing any code so let's
01:07 - jump into unity and try it out but first
01:09 - this video is sponsored by nvidia nvidia
01:12 - studio is invidious initiative to
01:13 - improve your credit workflow through
01:15 - software optimization and powerful
01:17 - hardware their industry-leading GPUs
01:19 - along with their optimized driver
01:21 - technology allows you to speed up your
01:23 - process in creative programs such as
01:25 - Adobe Unity Maya blender and so on our
01:28 - TX studio systems are specially
01:30 - optimized for real-time ray tracing and
01:32 - significantly decrease the render time
01:34 - right here we're using the razorblade 15
01:36 - studio edition and we were able to
01:38 - smoothly edit color corrected 8k footage
01:40 - and easily simulate 20 million particles
01:43 - at over 60 FPS in unity those of you who
01:45 - already own an NVIDIA GPU can download
01:48 - the latest in video studio driver for
01:50 - increased performance and reliability if
01:52 - you don't already own one check out
01:53 - invidious new lineup of r-tx studio
01:56 - systems by clicking the link in the
01:57 - description for a limited time you can
01:59 - get three months Adobe Creative Cloud
02:00 - for free all right let's get outlining
02:03 - so as you can see i am here in june d
02:06 - and i've gone ahead and set up this very
02:08 - simple player character that i can move
02:10 - around the assets that I'm using here
02:13 - from the gothic
02:13 - then your church pack they're completely
02:15 - free on the acid storm will of course
02:16 - have a link to them in the description
02:18 - and before we get started you want to
02:20 - make sure that you're using you RP and
02:22 - that your project is set up to use the
02:24 - 2d renderer if you're unsure how to do
02:26 - that you can go ahead and watch our
02:27 - previous video on setting up shader
02:29 - graph for 2d again a link for that in
02:32 - the description alright so I want to go
02:33 - ahead and give my player an outline so
02:36 - to do that let's start by going to the
02:38 - project here and let's go under shader
02:40 - 2d renderer and create a sprite on that
02:43 - graph if you still want your sprite to
02:45 - receive lighting you can choose lit
02:46 - graph instead it's really not going to
02:48 - change anything but I'm gonna choose
02:50 - unlit here and I'm going to name it
02:51 - simply sprite outline I'm also just
02:54 - going to right click on this shader and
02:56 - create a material based on it let's call
02:58 - this player and I'm simply going to drag
03:01 - it on to my player object a right away
03:03 - we can see that our player turns into a
03:05 - white box the reason for this is that
03:08 - our shader is currently completely empty
03:10 - and so our player doesn't know what
03:12 - sprite to show let's go ahead and change
03:14 - this by open up our sprite outline
03:16 - shader and I'm actually just going to
03:18 - turn this into a full screen window here
03:21 - and as you can see in here all we have
03:23 - is this empty master node so let's go
03:25 - ahead and load our default sprite sheet
03:27 - into this node to do that we need to
03:30 - create a new property of type texture 2d
03:32 - and let's call it main text and in order
03:36 - for unity to automatically input the
03:38 - right sprite we need to set the
03:39 - reference here to exactly underscore
03:42 - main tanks again we've talked about this
03:44 - in previous videos on shader graph but
03:46 - this is just a value that unity searches
03:48 - for and make sure that this main text
03:50 - here is always going to display our
03:53 - sprite then we can convert this value
03:55 - here so we'll put it into a sample
03:58 - texture node in order to convert it from
04:01 - a texture into an RGB a channel and we
04:04 - can then take this into the color input
04:06 - of our master node and right now we
04:08 - don't really see anything happening in
04:10 - here but that's just because we need to
04:11 - set a default texture here something
04:13 - you're going to hit default and I'm just
04:15 - gonna input the player sprite sheet and
04:18 - right away we can see that it loads into
04:20 - a sample texture and under our main
04:21 - preview if we right click here and
04:23 - change to quad we can clearly see all
04:25 - the sprites making up
04:27 - player and if we save this asset and go
04:29 - back to our scene view we can clearly
04:31 - see that our player is currently showing
04:33 - up in other words unity is now
04:35 - automatically loading the right sprite
04:37 - from our sprite renderer into our shader
04:39 - as you can see right here now with that
04:41 - setup we are ready to create our outline
04:44 - and as we talked about this starts by
04:46 - making a copy of our normal texture so
04:49 - we'll take these two nodes here hit
04:51 - ctrl-c and ctrl-v in order to duplicate
04:54 - them and we're going to go ahead and
04:56 - offset this copy of the texture to the
04:59 - left to do that we need a tiling and
05:01 - offset node so we'll hit space search
05:04 - for tiling and offset and we can then
05:06 - take the output of this node and put it
05:09 - into the UVs of our sample texture node
05:11 - what this does this allow us to offset
05:13 - both the tiling of our sheet as you can
05:16 - see here we can stretch it in and out
05:18 - and it also allows us to adjust the
05:20 - offset and that's exactly what we want
05:23 - to do we want to offset this a tiny bit
05:26 - to the left so to do that let's in put a
05:28 - tiny value something like point zero
05:31 - zero five of course this value is going
05:33 - to depend on your sprite sheet and now
05:35 - these two textures here are going to be
05:37 - slightly different and because of that
05:40 - what we can actually do is subtract one
05:43 - from the other so if we take the Alpha
05:46 - of our offset node here and put it into
05:49 - a subtract node we can then take the
05:52 - alpha of our normal texture here and
05:55 - also put it into that subtract node and
05:57 - what this does is actually show us the
06:00 - difference between these two textures in
06:03 - other words we are only seeing the
06:04 - outline the part of these two textures
06:06 - that aren't the same and this is giving
06:09 - us kind of the drop shadow effect what
06:11 - we can then do with this is multiply it
06:13 - with some colors let's take the output
06:15 - of this put it into a multiply node and
06:17 - let's take some kind of color node here
06:20 - so color and put that into the other
06:23 - input and as for the color here we want
06:25 - to go ahead and pick a bright color I'm
06:27 - just gonna choose some kind of bright
06:29 - orange here and you also want to make
06:31 - sure and this is very important that you
06:32 - set the alpha all the way to the top
06:35 - this way we make sure that our outline
06:37 - won't be transparent and now that we
06:40 - have our
06:40 - the outline here oh it's currently just
06:42 - a drop shadow but you get the point what
06:44 - we can do is add this back on to our
06:46 - original texture and then input it into
06:48 - our master node so let's go ahead and
06:50 - instead of just going directly here
06:52 - let's take this signal and add it
06:55 - together with our drop shadow and take
06:59 - the output of that and put it into our
07:01 - master and right away you can see we
07:03 - have this bright orange outline on the
07:04 - left side of our character in fact we
07:07 - should be able to go ahead and just save
07:08 - this asset go into unity and voila we
07:11 - can now see this bright outline on part
07:14 - of our character now there might be a
07:16 - few things that are preventing this from
07:17 - working on your system depending on your
07:20 - setup so we need to make sure that we
07:22 - follow certain guidelines the first one
07:25 - is that we need to make sure that we
07:26 - leave some room around our sprite the
07:29 - reason for this is that when working
07:30 - with sprites and shaders in 2d we can
07:34 - actually only display things inside of
07:36 - these borders in fact we can preview
07:39 - this by going into wireframe mode and as
07:41 - you can see our sprite here is pretty
07:43 - much just a 2d quad that we are drawing
07:46 - a bunch of color data onto and so if
07:49 - this isn't big enough we won't be able
07:51 - to see the actual outline so how do you
07:54 - leave room around your sprite well you
07:56 - make sure that when you are designing
07:57 - your sprite that you have plenty of room
07:59 - around it and if you're working with
08:01 - multiple sprites like I am here when you
08:03 - go into the sprite editor and slice your
08:06 - sprites you need to make sure that you
08:07 - leave plenty of room around each
08:09 - individual one as you can see I've done
08:11 - that here so I have no problem
08:13 - displaying the outline and sometimes
08:15 - when you're working with just a single
08:17 - sprite like I have this ninja character
08:19 - here again this is freely available on
08:21 - the asset store link in the description
08:23 - Jun is actually going to go ahead and
08:25 - cut the geometry of this 2d mesh to kind
08:28 - of fit the sprite and in most cases this
08:30 - is fine but if you want to make sure
08:31 - that you can have an outline around your
08:33 - character that might not fit too well
08:35 - see if we go into wireframe mode on this
08:38 - character we can see that the mesh is
08:40 - actually fitted to the character so to
08:42 - turn that off we can simply select the
08:44 - character and change the mesh type from
08:46 - tight to full rect and as you can see
08:49 - now it displays the entire image of our
08:52 - character and if we go back into shaded
08:54 - our character still remains the same so
08:56 - let's say workaround for that and the
08:59 - final thing that you want to make sure
09:00 - is that your sprite sheet is completely
09:03 - square if your sprite sheet is stretched
09:06 - in one direction it's actually going to
09:08 - go ahead and stretch the outline as well
09:10 - so just something to keep in mind now
09:13 - with this we can go ahead and add some
09:15 - more stuff to our shader so let's open
09:17 - up our shader and the first thing that
09:19 - we want to do is control the thickness
09:21 - and this is done by simply adjusting the
09:24 - offset so to be able to do this inside
09:26 - of the material let's create a vector 1
09:28 - property let's call it thickness and
09:31 - let's default it to point zero zero five
09:34 - we can also change the mode here from
09:36 - default to slider and this way we can
09:38 - choose two values that we can go between
09:40 - I'm going to set it between zero and
09:42 - point zero five then let's take this
09:45 - thickness value and drag it in here and
09:47 - now we can't just input it directly
09:48 - because we only want the thickness to
09:50 - control the offset on the X so let's
09:53 - instead go from the thickness into a
09:55 - vector two and here we can have the
09:58 - thickness going to the X component we
10:00 - can leave the Y component at zero and
10:02 - then take the output of that onto the
10:04 - offset and that should allow us to
10:06 - control the thickness through the
10:08 - material now let's go ahead and do the
10:09 - same thing for color but we already have
10:11 - a color node here so let's simply right
10:13 - click on this and convert it to a
10:15 - property and that is simply going to put
10:17 - a property up here in our outline called
10:20 - color let's also go ahead and change the
10:22 - mode here from default to HDR which is
10:25 - going to allow us to input higher
10:27 - intensity values to make our outline
10:29 - glow and with these changes let's go
10:31 - ahead and save our asset and if we now
10:33 - select our player material as you can
10:35 - see we have a spider here adjusting the
10:37 - thickness as well as a color value that
10:40 - we can change and even bump up the
10:42 - intensity on to make it glow of course
10:45 - whenever you're working with glow you
10:46 - also need to make sure that you have a
10:47 - bloom post-processing effect enabled we
10:50 - have a whole video dedicated to glow in
10:52 - case you're interested so now that our
10:54 - effect is working let's go ahead and
10:55 - copy it to the other directions starting
10:58 - with the right side and doing this is
11:00 - actually super simple because we can
11:02 - take this entire section and just
11:05 - duplicate it so let's move the
11:07 - and let's remove this connection here
11:09 - and let's instead take all of these
11:12 - notes right here hit ctrl-c and ctrl-v
11:14 - to duplicate them let's move them down
11:17 - here and we now take the thickness here
11:20 - and instead of just inputting this
11:22 - directly into the X of our secondary
11:25 - group of notes here we want to make sure
11:27 - to reverse this to the other side so if
11:29 - we move point zero zero five to the left
11:31 - here we want to move negative point zero
11:34 - zero five to the right over here and we
11:37 - can of course do this by just
11:38 - multiplying with minus one and of course
11:41 - that's a handy note for this so let's go
11:43 - from our thickness into a negate note
11:46 - again this just multiplies with minus
11:48 - one and then from this node into our X
11:51 - and what we now have is both the left
11:53 - and right side of our outline and what
11:56 - we can simply do is add these two
11:58 - together let's take the Alpha of our
12:00 - left side go into an add node let's take
12:03 - the alpha of a right side go into the
12:04 - same add node and this might be a bit
12:07 - hard to see but we now have the same
12:08 - sprite kind of shifted to each side now
12:11 - from here you might think well let's
12:12 - just goes straight into the subtract but
12:15 - since we are adding values together here
12:17 - some of these are actually going to be
12:19 - above one and we want to make sure that
12:21 - our alpha always stays between zero and
12:24 - one so to do that we go from the output
12:27 - here into a clamp node and we're just
12:29 - going to clamp the values between zero
12:31 - and one so anything that's larger is
12:33 - just going to be one anything that's
12:35 - less is just going to be zero it's a
12:37 - very simple node but it's just going to
12:39 - make sure that when we subtract these
12:41 - two nothing weird is going to happen and
12:43 - we can now see that we have an outline
12:45 - on both the left and right side of our
12:47 - character really cool and I'm just going
12:50 - to go ahead and sort these nodes so that
12:52 - they don't look as confusing and just
12:54 - like we've done the left and the right
12:57 - side we can actually take all of these
12:59 - nodes here and copy them in order to
13:02 - create up-and-down and the only thing
13:04 - that we need to change here is instead
13:06 - of going from the thickness to our X
13:09 - we'll go from the thickness to our Y
13:12 - here and the same thing down here except
13:15 - we go from our thickness turn the gate
13:17 - node and then from the eunich eight node
13:18 - instead of going to X we go to
13:20 - why and that's pretty much it so we can
13:23 - now take these two values and add them
13:25 - together so we're going to an add node
13:27 - here to add our two up-and-down
13:30 - directions together and we can then add
13:32 - these two together so we'll go into yet
13:34 - another add node here and that now has
13:37 - all of the directions to add it together
13:39 - left right up and down and then finally
13:41 - we'll go from this into our clamp which
13:44 - goes to subtract multiply with some
13:46 - color and then add everything back
13:48 - together and right away we can see that
13:51 - in our preview our outline is now all
13:53 - the way around our character and if we
13:55 - save this asset and go back into unity
13:58 - voila our character indeed has an
14:00 - outline that goes all the way around
14:03 - awesome and we can of course go ahead
14:05 - and adjust the thickness of this in any
14:07 - way that we'd like we're gonna just the
14:09 - color of this and the glow amount so
14:11 - there's plenty of opportunity to have
14:13 - fun with this of course you will notice
14:16 - that if you go ahead and make the
14:17 - outline really large like I do here our
14:21 - technique will kind of start to falter
14:23 - because we can start seeing the
14:24 - individual copies of the sprite and easy
14:27 - fix for this is to just create more
14:29 - copies diagonally which will kind of
14:32 - help fill this out but I'm just gonna be
14:34 - completely honest it is more of a hacky
14:36 - fix than it is a solution unfortunately
14:39 - that's often how it is with shaders but
14:42 - I'd say for most cases this is going to
14:44 - work just fine
14:45 - I think this outline is as thick as I
14:48 - wanted on this character now if we zoom
14:50 - in here we'll actually notice that this
14:52 - outline is a bit uneven some parts are
14:56 - brighter than others in this case I
14:58 - actually think it looks pretty cool but
15:00 - you might just want a completely solid
15:02 - outline now this doesn't always happen
15:05 - but as you can see sometimes the sprite
15:08 - sheet gets laid out in such a way that
15:09 - there's a bunch of color around the
15:11 - actual character that's the weird color
15:13 - clenching we see here I haven't been
15:15 - able to find out why this happens so if
15:17 - any of you know something about this
15:19 - definitely let us know in the comments
15:21 - but luckily there is an easy fix for
15:23 - this what we can do is simply use the
15:25 - fact that we have an alpha Channel and
15:27 - multiplied into the different color
15:29 - channels in order to get rid of all
15:31 - these colors surrounding it in other
15:33 - before we add all this stuff together
15:35 - we'll take our color channels and
15:37 - multiply them together with our alpha
15:41 - channel in order to remove all of this
15:43 - stuff around the characters now that's
15:45 - just blank and this is great but since
15:47 - we have the Alpha as part of this four
15:49 - channel we're kind of right now
15:50 - multiplying the alpha with itself and we
15:53 - don't want to do that so we'll take the
15:55 - output of this go into a split node
15:57 - we'll go from this split node into a
15:59 - combine node so we'll take the red to
16:02 - red green to green blue to blue and then
16:05 - instead of using the alpha here we'll go
16:07 - from the alpha of our sample texture
16:09 - into our combined node instead there we
16:11 - go and we can then go from our combine
16:13 - node into the add down here so just a
16:17 - tiny extra step or we're really doing
16:19 - here is just making sure to remove all
16:21 - the color around our player by
16:23 - multiplying it with our alpha and then
16:25 - making sure our alpha still stays the
16:27 - same throughout this step but the result
16:29 - of this is that if we go ahead and save
16:31 - our acid and now go into unity we can
16:33 - see that our outline is now completely
16:35 - even so it's not going to be influenced
16:37 - by how our sprite sheet is actually laid
16:39 - out and that's actually it for our
16:42 - outline we can now go ahead and choose a
16:44 - color that we think looks nice we can of
16:46 - course play around with the intensity
16:48 - and if we go ahead and hit play we can
16:51 - move our character around and the
16:52 - outline is going to follow all of the
16:55 - animations awesome that's pretty much it
16:57 - for this video if you enjoyed it make
16:59 - sure to subscribe and bring that
17:01 - notification bell so you don't miss the
17:02 - next one also don't forget to check out
17:04 - invidious studio if you want to optimize
17:06 - your creative work flow and speed up
17:07 - your processes simply click the link in
17:09 - the description to check out invidious
17:11 - line of products on that thanks for
17:13 - watching and I will see you in the next
17:15 - video thanks of the awesome patreon
17:17 - supporters who donated in March and
17:19 - especially thanks to Villa Vatanen Lost
17:21 - violence law barber presser Murphy Leela
17:23 - set Nobby ninja gym shoe pop jazz Daniel
17:26 - - sonic dandy Sam
17:27 - Jacob Sanford magan's wander art no
17:30 - kirisaki Gregory Pierce my cooker bub
17:32 - the mighty Zeus oven Cooper as in the
17:35 - fierce Erasmus v8 kaya is mother Kusa
17:38 - and serious wall you guys Rock

Cleaned transcript:

hey it's me again mr. schmuck eyebrows at your disposal as you can probably guess we're still working from home so I'm afraid you're stuck with picture me a little while longer so a really common effect to use when creating a game is a 2d outline around your sprite this can be a great way to make a sprite stand out from the background and draw attention to something important but as is often the case with shaders that isn't actually a really easy and solid way to create an outline that is just going to work for everyone instead we kind of have to cheat our way there which quickly becomes a bit hacky that said the technique that I use and that I see used most commonly it's actually really simple to make and it works in most cases if you just follow a few guidelines it basically works by taking the sprite and creating a copy of it we then take this copy colored and offset it towards the left as you can see this crÃªpes a kind of drop shadow effect but if we repeat this process three more times toward right up and down it creates a nice even outline and we can do all this inside of shader graph without writing any code so let's jump into unity and try it out but first this video is sponsored by nvidia nvidia studio is invidious initiative to improve your credit workflow through software optimization and powerful hardware their industryleading GPUs along with their optimized driver technology allows you to speed up your process in creative programs such as Adobe Unity Maya blender and so on our TX studio systems are specially optimized for realtime ray tracing and significantly decrease the render time right here we're using the razorblade 15 studio edition and we were able to smoothly edit color corrected 8k footage and easily simulate 20 million particles at over 60 FPS in unity those of you who already own an NVIDIA GPU can download the latest in video studio driver for increased performance and reliability if you don't already own one check out invidious new lineup of rtx studio systems by clicking the link in the description for a limited time you can get three months Adobe Creative Cloud for free all right let's get outlining so as you can see i am here in june d and i've gone ahead and set up this very simple player character that i can move around the assets that I'm using here from the gothic then your church pack they're completely free on the acid storm will of course have a link to them in the description and before we get started you want to make sure that you're using you RP and that your project is set up to use the 2d renderer if you're unsure how to do that you can go ahead and watch our previous video on setting up shader graph for 2d again a link for that in the description alright so I want to go ahead and give my player an outline so to do that let's start by going to the project here and let's go under shader 2d renderer and create a sprite on that graph if you still want your sprite to receive lighting you can choose lit graph instead it's really not going to change anything but I'm gonna choose unlit here and I'm going to name it simply sprite outline I'm also just going to right click on this shader and create a material based on it let's call this player and I'm simply going to drag it on to my player object a right away we can see that our player turns into a white box the reason for this is that our shader is currently completely empty and so our player doesn't know what sprite to show let's go ahead and change this by open up our sprite outline shader and I'm actually just going to turn this into a full screen window here and as you can see in here all we have is this empty master node so let's go ahead and load our default sprite sheet into this node to do that we need to create a new property of type texture 2d and let's call it main text and in order for unity to automatically input the right sprite we need to set the reference here to exactly underscore main tanks again we've talked about this in previous videos on shader graph but this is just a value that unity searches for and make sure that this main text here is always going to display our sprite then we can convert this value here so we'll put it into a sample texture node in order to convert it from a texture into an RGB a channel and we can then take this into the color input of our master node and right now we don't really see anything happening in here but that's just because we need to set a default texture here something you're going to hit default and I'm just gonna input the player sprite sheet and right away we can see that it loads into a sample texture and under our main preview if we right click here and change to quad we can clearly see all the sprites making up player and if we save this asset and go back to our scene view we can clearly see that our player is currently showing up in other words unity is now automatically loading the right sprite from our sprite renderer into our shader as you can see right here now with that setup we are ready to create our outline and as we talked about this starts by making a copy of our normal texture so we'll take these two nodes here hit ctrlc and ctrlv in order to duplicate them and we're going to go ahead and offset this copy of the texture to the left to do that we need a tiling and offset node so we'll hit space search for tiling and offset and we can then take the output of this node and put it into the UVs of our sample texture node what this does this allow us to offset both the tiling of our sheet as you can see here we can stretch it in and out and it also allows us to adjust the offset and that's exactly what we want to do we want to offset this a tiny bit to the left so to do that let's in put a tiny value something like point zero zero five of course this value is going to depend on your sprite sheet and now these two textures here are going to be slightly different and because of that what we can actually do is subtract one from the other so if we take the Alpha of our offset node here and put it into a subtract node we can then take the alpha of our normal texture here and also put it into that subtract node and what this does is actually show us the difference between these two textures in other words we are only seeing the outline the part of these two textures that aren't the same and this is giving us kind of the drop shadow effect what we can then do with this is multiply it with some colors let's take the output of this put it into a multiply node and let's take some kind of color node here so color and put that into the other input and as for the color here we want to go ahead and pick a bright color I'm just gonna choose some kind of bright orange here and you also want to make sure and this is very important that you set the alpha all the way to the top this way we make sure that our outline won't be transparent and now that we have our the outline here oh it's currently just a drop shadow but you get the point what we can do is add this back on to our original texture and then input it into our master node so let's go ahead and instead of just going directly here let's take this signal and add it together with our drop shadow and take the output of that and put it into our master and right away you can see we have this bright orange outline on the left side of our character in fact we should be able to go ahead and just save this asset go into unity and voila we can now see this bright outline on part of our character now there might be a few things that are preventing this from working on your system depending on your setup so we need to make sure that we follow certain guidelines the first one is that we need to make sure that we leave some room around our sprite the reason for this is that when working with sprites and shaders in 2d we can actually only display things inside of these borders in fact we can preview this by going into wireframe mode and as you can see our sprite here is pretty much just a 2d quad that we are drawing a bunch of color data onto and so if this isn't big enough we won't be able to see the actual outline so how do you leave room around your sprite well you make sure that when you are designing your sprite that you have plenty of room around it and if you're working with multiple sprites like I am here when you go into the sprite editor and slice your sprites you need to make sure that you leave plenty of room around each individual one as you can see I've done that here so I have no problem displaying the outline and sometimes when you're working with just a single sprite like I have this ninja character here again this is freely available on the asset store link in the description Jun is actually going to go ahead and cut the geometry of this 2d mesh to kind of fit the sprite and in most cases this is fine but if you want to make sure that you can have an outline around your character that might not fit too well see if we go into wireframe mode on this character we can see that the mesh is actually fitted to the character so to turn that off we can simply select the character and change the mesh type from tight to full rect and as you can see now it displays the entire image of our character and if we go back into shaded our character still remains the same so let's say workaround for that and the final thing that you want to make sure is that your sprite sheet is completely square if your sprite sheet is stretched in one direction it's actually going to go ahead and stretch the outline as well so just something to keep in mind now with this we can go ahead and add some more stuff to our shader so let's open up our shader and the first thing that we want to do is control the thickness and this is done by simply adjusting the offset so to be able to do this inside of the material let's create a vector 1 property let's call it thickness and let's default it to point zero zero five we can also change the mode here from default to slider and this way we can choose two values that we can go between I'm going to set it between zero and point zero five then let's take this thickness value and drag it in here and now we can't just input it directly because we only want the thickness to control the offset on the X so let's instead go from the thickness into a vector two and here we can have the thickness going to the X component we can leave the Y component at zero and then take the output of that onto the offset and that should allow us to control the thickness through the material now let's go ahead and do the same thing for color but we already have a color node here so let's simply right click on this and convert it to a property and that is simply going to put a property up here in our outline called color let's also go ahead and change the mode here from default to HDR which is going to allow us to input higher intensity values to make our outline glow and with these changes let's go ahead and save our asset and if we now select our player material as you can see we have a spider here adjusting the thickness as well as a color value that we can change and even bump up the intensity on to make it glow of course whenever you're working with glow you also need to make sure that you have a bloom postprocessing effect enabled we have a whole video dedicated to glow in case you're interested so now that our effect is working let's go ahead and copy it to the other directions starting with the right side and doing this is actually super simple because we can take this entire section and just duplicate it so let's move the and let's remove this connection here and let's instead take all of these notes right here hit ctrlc and ctrlv to duplicate them let's move them down here and we now take the thickness here and instead of just inputting this directly into the X of our secondary group of notes here we want to make sure to reverse this to the other side so if we move point zero zero five to the left here we want to move negative point zero zero five to the right over here and we can of course do this by just multiplying with minus one and of course that's a handy note for this so let's go from our thickness into a negate note again this just multiplies with minus one and then from this node into our X and what we now have is both the left and right side of our outline and what we can simply do is add these two together let's take the Alpha of our left side go into an add node let's take the alpha of a right side go into the same add node and this might be a bit hard to see but we now have the same sprite kind of shifted to each side now from here you might think well let's just goes straight into the subtract but since we are adding values together here some of these are actually going to be above one and we want to make sure that our alpha always stays between zero and one so to do that we go from the output here into a clamp node and we're just going to clamp the values between zero and one so anything that's larger is just going to be one anything that's less is just going to be zero it's a very simple node but it's just going to make sure that when we subtract these two nothing weird is going to happen and we can now see that we have an outline on both the left and right side of our character really cool and I'm just going to go ahead and sort these nodes so that they don't look as confusing and just like we've done the left and the right side we can actually take all of these nodes here and copy them in order to create upanddown and the only thing that we need to change here is instead of going from the thickness to our X we'll go from the thickness to our Y here and the same thing down here except we go from our thickness turn the gate node and then from the eunich eight node instead of going to X we go to why and that's pretty much it so we can now take these two values and add them together so we're going to an add node here to add our two upanddown directions together and we can then add these two together so we'll go into yet another add node here and that now has all of the directions to add it together left right up and down and then finally we'll go from this into our clamp which goes to subtract multiply with some color and then add everything back together and right away we can see that in our preview our outline is now all the way around our character and if we save this asset and go back into unity voila our character indeed has an outline that goes all the way around awesome and we can of course go ahead and adjust the thickness of this in any way that we'd like we're gonna just the color of this and the glow amount so there's plenty of opportunity to have fun with this of course you will notice that if you go ahead and make the outline really large like I do here our technique will kind of start to falter because we can start seeing the individual copies of the sprite and easy fix for this is to just create more copies diagonally which will kind of help fill this out but I'm just gonna be completely honest it is more of a hacky fix than it is a solution unfortunately that's often how it is with shaders but I'd say for most cases this is going to work just fine I think this outline is as thick as I wanted on this character now if we zoom in here we'll actually notice that this outline is a bit uneven some parts are brighter than others in this case I actually think it looks pretty cool but you might just want a completely solid outline now this doesn't always happen but as you can see sometimes the sprite sheet gets laid out in such a way that there's a bunch of color around the actual character that's the weird color clenching we see here I haven't been able to find out why this happens so if any of you know something about this definitely let us know in the comments but luckily there is an easy fix for this what we can do is simply use the fact that we have an alpha Channel and multiplied into the different color channels in order to get rid of all these colors surrounding it in other before we add all this stuff together we'll take our color channels and multiply them together with our alpha channel in order to remove all of this stuff around the characters now that's just blank and this is great but since we have the Alpha as part of this four channel we're kind of right now multiplying the alpha with itself and we don't want to do that so we'll take the output of this go into a split node we'll go from this split node into a combine node so we'll take the red to red green to green blue to blue and then instead of using the alpha here we'll go from the alpha of our sample texture into our combined node instead there we go and we can then go from our combine node into the add down here so just a tiny extra step or we're really doing here is just making sure to remove all the color around our player by multiplying it with our alpha and then making sure our alpha still stays the same throughout this step but the result of this is that if we go ahead and save our acid and now go into unity we can see that our outline is now completely even so it's not going to be influenced by how our sprite sheet is actually laid out and that's actually it for our outline we can now go ahead and choose a color that we think looks nice we can of course play around with the intensity and if we go ahead and hit play we can move our character around and the outline is going to follow all of the animations awesome that's pretty much it for this video if you enjoyed it make sure to subscribe and bring that notification bell so you don't miss the next one also don't forget to check out invidious studio if you want to optimize your creative work flow and speed up your processes simply click the link in the description to check out invidious line of products on that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in March and especially thanks to Villa Vatanen Lost violence law barber presser Murphy Leela set Nobby ninja gym shoe pop jazz Daniel sonic dandy Sam Jacob Sanford magan's wander art no kirisaki Gregory Pierce my cooker bub the mighty Zeus oven Cooper as in the fierce Erasmus v8 kaya is mother Kusa and serious wall you guys Rock
