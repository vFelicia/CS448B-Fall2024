With timestamps:

00:00 - in this video we'll continue the topic
00:01 - of procedural generation we'll be using
00:03 - what we learned in the previous video
00:04 - about purling noise to generate a
00:06 - terrain in unity let's get started so
00:08 - we're going to be generating our terrain
00:09 - using the built in and fairly old
00:11 - terrain engine why because it's super
00:13 - easy to get working but it's also a big
00:15 - clumsy we'll talk about alternative
00:17 - options later in the video to create a
00:18 - terrain that's right click in the
00:20 - hierarchy go 3d object terrain we can
00:22 - now see in our scene view that a huge
00:24 - terrain has appeared by default if we go
00:26 - under settings this is going to be 500
00:29 - by 500 units I'll have a look at
00:31 - changing this through script later but
00:33 - now let's just go in here and add a new
00:34 - component we can call it Perlin noise or
00:36 - terrain generation I'm just going to
00:37 - call it terrain generator let's double
00:40 - click it to open it up in visual studio
00:41 - let's delete the two using tags at the
00:43 - top and both our methods for now first
00:45 - off we're going to be needing a lot of
00:46 - the same variables that we used in the
00:48 - last video we're going to be using a
00:50 - public int width and will default this
00:53 - to 256 again the same thing for our
00:56 - height but height here can mean
00:58 - different things you can either mean the
01:00 - length of our terrain with the depth
01:02 - when viewed from above in our case this
01:03 - is going to mean the length and then
01:05 - we'll create another variable a public
01:07 - integer that is going to specify the
01:10 - depth meaning the height on the y axis
01:12 - of our terrain I will just to fold this
01:14 - to something like 20 now let's go and
01:16 - make a start method in here we want to
01:19 - get a reference to our terrain component
01:21 - so that we can change the data of our
01:23 - terrain to do that we use get component
01:25 - of type terrain and we can go ahead and
01:28 - store this in a variable so let's create
01:30 - a terrain variable and it's also call it
01:32 - terrain and whenever we want to change
01:34 - properties of our terrain we have to
01:36 - access what is called terrain data to do
01:38 - that we go to rain dot terrain data and
01:41 - if we now write dot you can see all of
01:43 - the different things that we can modify
01:44 - in here so let's go ahead and generate a
01:47 - new terrain data using a separate
01:49 - function which we are going to call
01:50 - generate terrain so this generate
01:53 - terrain method is of course going to
01:55 - return a terrain data we're going to
01:58 - call it generate terrain instead of
02:00 - creating a terrain data from scratch
02:02 - here let's use some of the settings that
02:03 - we set up inside of the inspector to do
02:05 - that we pass in here terrain dot terrain
02:08 - data and we take this in as an argument
02:11 - this is of course going to be terrain
02:12 - data and we'll
02:13 - all it terrain data as well so we are
02:15 - saying that we want to set our terrain
02:16 - data equal to a newly generated terrain
02:19 - which is going to be based off of our
02:21 - current terrain data and now in here we
02:23 - can go and populate it so first off we
02:24 - want to set the dimensions of our
02:26 - terrain we do that by going to rain data
02:28 - dot size we'll set that equal to a new
02:31 - vector3 where the x is going to be our
02:33 - with the Y is going to be our debt and
02:36 - the Z is going to be our height and just
02:38 - like our texture was made up of a whole
02:40 - bunch of different colors one color for
02:42 - each pixel or terrain data consists of a
02:44 - two-dimensional array of floats where
02:46 - each float is the height of our terrain
02:48 - at a given point and we can modify these
02:50 - heights really easily all we do is go to
02:53 - rain data dot set Heights we then give
02:56 - it the starting point which is going to
02:57 - be 0 0 in our case and then we give it a
03:00 - two-dimensional array of floats but of
03:02 - course we want to generate this using
03:03 - protein noise so we'll write another
03:05 - function here we'll call it generate
03:07 - Heights let's close that off and let's
03:10 - begin creating our generate Heights
03:11 - method this is going to return a
03:13 - two-dimensional flow to Ray its name is
03:15 - going to be generate height and that's
03:17 - it now first we want to create a float
03:19 - array to do that we write float Margar
03:21 - that's a two-dimensional array we'll
03:23 - give it a name let's just call it
03:24 - heights and we'll set it equal to a new
03:26 - float array where the width of our array
03:29 - is going to be width and the height of
03:31 - our array is going to be height so you
03:33 - can now imagine this float array as a
03:35 - grid of floats so that each point on our
03:38 - map has a float associated to it and if
03:40 - we now loop through each point we can
03:42 - set the float value equal to assemble
03:44 - from our Perlin noise so we go for int x
03:47 - equals 0 we keep looping as long as X is
03:49 - less than always and each time we'll
03:51 - increment by 1 instead of this we want
03:53 - to create another folder which is going
03:55 - to loop through the Y's it keeps going
03:58 - as long as Y is less than height and we
04:01 - increment by 1 each time there as well
04:03 - now in here we can say height at the x
04:05 - and y position so the current X we're
04:08 - looking at and the current Y we're
04:10 - looking at is going to be equal to some
04:13 - Perlin noise value and this is what
04:16 - we'll generate and we'll do this in the
04:18 - exact same way we did it in the last
04:21 - video so we'll go here and call it
04:22 - something like
04:23 - calculate height and will input the
04:26 - and the wine then we'll create a method
04:28 - that returns a float called calculate
04:31 - height it's going to take in an integer
04:33 - X and an integer Y we're going to make
04:36 - sure to calculate the noise coordinates
04:38 - not as whole numbers but as decimal
04:41 - place numbers so we'll write float X
04:43 - cord equals
04:44 - there we go X divided by width and the
04:47 - same thing with our Y cord Y divided by
04:50 - height and remember we multiply it both
04:52 - of these with a scale in order to be
04:54 - able to zoom in and out let's go up here
04:57 - and add a public float called scale and
05:00 - set it equal to something like 20 by
05:02 - default and then we can multiply with
05:04 - that after each calculation and will
05:07 - then return a sample of our mass Perlin
05:10 - noise at our X chord comma or Y chord
05:14 - and now up here we are grabbing the
05:16 - appropriate float and setting it into a
05:18 - Heights array so up here we are
05:20 - calculating our height at the X&Y
05:22 - position we do that by taking our
05:24 - coordinates and converting them into our
05:26 - noisemap coordinates and then we are
05:28 - returning the value of a Kirlian noise
05:30 - function at those coordinates and we are
05:32 - feeding it into our Heights array now
05:34 - all that's left to do is return this
05:36 - Heights array as soon as we're done
05:38 - looping through it and so we are now
05:40 - generating our Heights correctly and we
05:42 - can also return our terrain data because
05:45 - we have now both set these sides
05:46 - correctly and populated it with a bunch
05:49 - of pipe data and that means that up here
05:51 - is now correctly generating the terrain
05:53 - and feeding it into our terrain
05:55 - component so if we now hit save we
05:57 - should see that if we hit play inside of
05:59 - unity it does indeed do something but
06:02 - what's going on here well the first
06:04 - thing is that it's only affecting a
06:05 - quarter of our terrain that's because
06:07 - that's one more value that we need to
06:09 - adjust other than the size the other
06:11 - thing is that well we aren't getting
06:12 - that much data it looks like everything
06:14 - is just clamped to a single value the
06:16 - reason for that is that we forgot to
06:18 - cast these values down here in true
06:20 - floats so we'll write float in front of
06:23 - both of those and up here before we set
06:25 - terrain data size we're going to
06:27 - in-state terrain data dot height map
06:30 - resolution I will just set that equal to
06:32 - our width plus 1 so now when we save go
06:36 - into unity and hit play we should see
06:39 - our terrain
06:40 - correctly generating and it looks really
06:42 - cool if we start playing here we can go
06:44 - into scene view position our camera the
06:46 - way we want it select our camera switch
06:48 - to the scene view and hit ctrl shift F
06:50 - or command shift if you're on the Mac so
06:53 - now we should be able to see our terrain
06:54 - in the game view we can then go into
06:56 - visual studio and change this to the
06:58 - update method and I don't recommend
07:00 - doing this in the update method unless
07:02 - for testing but if we now hit play and
07:05 - switch to our terrain here go into a
07:07 - terrain generated script we can see that
07:09 - we can now update the scale in real time
07:11 - and we can also update the depth which
07:14 - is going to mean the influence of our
07:16 - noise on the terrain and just like in
07:18 - the last video if you want a random
07:20 - terrain each time well then you're just
07:22 - going to randomize the offset so we're
07:24 - just going here and create a public
07:26 - float offset X default that to a hundred
07:29 - and we'll create one for the Y as well
07:32 - then down here where we calculate our
07:34 - coordinates on our noise map we'll add
07:37 - offset X and offset Y and at the top
07:40 - we'll create a void start where we set
07:43 - off set X equal to random range between
07:47 - 0 and a great number and we do the same
07:50 - thing with offset Y let's save that
07:53 - hidden to unity they play and we can now
07:56 - see that each time we play we get a
07:58 - random terrain and that we can scroll
08:00 - through this to create really
08:02 - interesting effects in fact you could
08:04 - have a look at animating this number
08:06 - over time let's go into visual studio
08:08 - into our update method and let's just
08:10 - say that offset X plus equals time Delta
08:14 - time and we can add a speed onto this
08:16 - let's say 5 if we now say we should see
08:19 - that every frame our terrain is going to
08:21 - be moving and this actually already
08:23 - works with colliders as well if we go in
08:26 - here throw 3d object cue reset the
08:28 - transform on this cube move it into
08:30 - somewhat of the center of our scene I'm
08:32 - going to drag it up and size it up as
08:34 - well let's add a rigidbody to this and
08:37 - we can see that it falls down and
08:39 - collides with our terrain let's pretty
08:41 - much it for this video if you want to
08:43 - learn more about procedural generation
08:44 - which I definitely think you should I
08:46 - will have some good resources for you in
08:48 - the description the primary things that
08:49 - I would want to do difference is
08:50 - probably creating a mesh from scratch
08:52 - instead of using the
08:53 - built-in terrain engine and also having
08:54 - a look at how you can make the noise
08:56 - more interesting a very common method is
08:58 - layering multiple Perlin noise functions
08:59 - with different frequencies on top of
09:01 - each other to create the variety and
09:03 - detail these different layers are
09:05 - commonly referred to as octaves
09:06 - sebastian lake has some really cool
09:08 - tutorials on this and some other cool
09:09 - stuff on procedural generation again
09:11 - check out the links in the description
09:12 - on that thanks for watching and I will
09:14 - see you in the next video thanks to all
09:16 - the awesome patreon supporters who
09:17 - donated in April and a special thanks to
09:20 - Derek Eames Kirk facial Ameri phi james
09:22 - callaghan Sybok Nami Cole Cabral and
09:24 - Jason Lotito
09:25 - if you want to become a picture of
09:26 - yourself you can do so a pinch ENCOM
09:28 - slash Brackley

Cleaned transcript:

in this video we'll continue the topic of procedural generation we'll be using what we learned in the previous video about purling noise to generate a terrain in unity let's get started so we're going to be generating our terrain using the built in and fairly old terrain engine why because it's super easy to get working but it's also a big clumsy we'll talk about alternative options later in the video to create a terrain that's right click in the hierarchy go 3d object terrain we can now see in our scene view that a huge terrain has appeared by default if we go under settings this is going to be 500 by 500 units I'll have a look at changing this through script later but now let's just go in here and add a new component we can call it Perlin noise or terrain generation I'm just going to call it terrain generator let's double click it to open it up in visual studio let's delete the two using tags at the top and both our methods for now first off we're going to be needing a lot of the same variables that we used in the last video we're going to be using a public int width and will default this to 256 again the same thing for our height but height here can mean different things you can either mean the length of our terrain with the depth when viewed from above in our case this is going to mean the length and then we'll create another variable a public integer that is going to specify the depth meaning the height on the y axis of our terrain I will just to fold this to something like 20 now let's go and make a start method in here we want to get a reference to our terrain component so that we can change the data of our terrain to do that we use get component of type terrain and we can go ahead and store this in a variable so let's create a terrain variable and it's also call it terrain and whenever we want to change properties of our terrain we have to access what is called terrain data to do that we go to rain dot terrain data and if we now write dot you can see all of the different things that we can modify in here so let's go ahead and generate a new terrain data using a separate function which we are going to call generate terrain so this generate terrain method is of course going to return a terrain data we're going to call it generate terrain instead of creating a terrain data from scratch here let's use some of the settings that we set up inside of the inspector to do that we pass in here terrain dot terrain data and we take this in as an argument this is of course going to be terrain data and we'll all it terrain data as well so we are saying that we want to set our terrain data equal to a newly generated terrain which is going to be based off of our current terrain data and now in here we can go and populate it so first off we want to set the dimensions of our terrain we do that by going to rain data dot size we'll set that equal to a new vector3 where the x is going to be our with the Y is going to be our debt and the Z is going to be our height and just like our texture was made up of a whole bunch of different colors one color for each pixel or terrain data consists of a twodimensional array of floats where each float is the height of our terrain at a given point and we can modify these heights really easily all we do is go to rain data dot set Heights we then give it the starting point which is going to be 0 0 in our case and then we give it a twodimensional array of floats but of course we want to generate this using protein noise so we'll write another function here we'll call it generate Heights let's close that off and let's begin creating our generate Heights method this is going to return a twodimensional flow to Ray its name is going to be generate height and that's it now first we want to create a float array to do that we write float Margar that's a twodimensional array we'll give it a name let's just call it heights and we'll set it equal to a new float array where the width of our array is going to be width and the height of our array is going to be height so you can now imagine this float array as a grid of floats so that each point on our map has a float associated to it and if we now loop through each point we can set the float value equal to assemble from our Perlin noise so we go for int x equals 0 we keep looping as long as X is less than always and each time we'll increment by 1 instead of this we want to create another folder which is going to loop through the Y's it keeps going as long as Y is less than height and we increment by 1 each time there as well now in here we can say height at the x and y position so the current X we're looking at and the current Y we're looking at is going to be equal to some Perlin noise value and this is what we'll generate and we'll do this in the exact same way we did it in the last video so we'll go here and call it something like calculate height and will input the and the wine then we'll create a method that returns a float called calculate height it's going to take in an integer X and an integer Y we're going to make sure to calculate the noise coordinates not as whole numbers but as decimal place numbers so we'll write float X cord equals there we go X divided by width and the same thing with our Y cord Y divided by height and remember we multiply it both of these with a scale in order to be able to zoom in and out let's go up here and add a public float called scale and set it equal to something like 20 by default and then we can multiply with that after each calculation and will then return a sample of our mass Perlin noise at our X chord comma or Y chord and now up here we are grabbing the appropriate float and setting it into a Heights array so up here we are calculating our height at the X&Y position we do that by taking our coordinates and converting them into our noisemap coordinates and then we are returning the value of a Kirlian noise function at those coordinates and we are feeding it into our Heights array now all that's left to do is return this Heights array as soon as we're done looping through it and so we are now generating our Heights correctly and we can also return our terrain data because we have now both set these sides correctly and populated it with a bunch of pipe data and that means that up here is now correctly generating the terrain and feeding it into our terrain component so if we now hit save we should see that if we hit play inside of unity it does indeed do something but what's going on here well the first thing is that it's only affecting a quarter of our terrain that's because that's one more value that we need to adjust other than the size the other thing is that well we aren't getting that much data it looks like everything is just clamped to a single value the reason for that is that we forgot to cast these values down here in true floats so we'll write float in front of both of those and up here before we set terrain data size we're going to instate terrain data dot height map resolution I will just set that equal to our width plus 1 so now when we save go into unity and hit play we should see our terrain correctly generating and it looks really cool if we start playing here we can go into scene view position our camera the way we want it select our camera switch to the scene view and hit ctrl shift F or command shift if you're on the Mac so now we should be able to see our terrain in the game view we can then go into visual studio and change this to the update method and I don't recommend doing this in the update method unless for testing but if we now hit play and switch to our terrain here go into a terrain generated script we can see that we can now update the scale in real time and we can also update the depth which is going to mean the influence of our noise on the terrain and just like in the last video if you want a random terrain each time well then you're just going to randomize the offset so we're just going here and create a public float offset X default that to a hundred and we'll create one for the Y as well then down here where we calculate our coordinates on our noise map we'll add offset X and offset Y and at the top we'll create a void start where we set off set X equal to random range between 0 and a great number and we do the same thing with offset Y let's save that hidden to unity they play and we can now see that each time we play we get a random terrain and that we can scroll through this to create really interesting effects in fact you could have a look at animating this number over time let's go into visual studio into our update method and let's just say that offset X plus equals time Delta time and we can add a speed onto this let's say 5 if we now say we should see that every frame our terrain is going to be moving and this actually already works with colliders as well if we go in here throw 3d object cue reset the transform on this cube move it into somewhat of the center of our scene I'm going to drag it up and size it up as well let's add a rigidbody to this and we can see that it falls down and collides with our terrain let's pretty much it for this video if you want to learn more about procedural generation which I definitely think you should I will have some good resources for you in the description the primary things that I would want to do difference is probably creating a mesh from scratch instead of using the builtin terrain engine and also having a look at how you can make the noise more interesting a very common method is layering multiple Perlin noise functions with different frequencies on top of each other to create the variety and detail these different layers are commonly referred to as octaves sebastian lake has some really cool tutorials on this and some other cool stuff on procedural generation again check out the links in the description on that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in April and a special thanks to Derek Eames Kirk facial Ameri phi james callaghan Sybok Nami Cole Cabral and Jason Lotito if you want to become a picture of yourself you can do so a pinch ENCOM slash Brackley
