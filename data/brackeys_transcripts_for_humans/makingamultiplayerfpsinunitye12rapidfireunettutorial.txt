With timestamps:

00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to this video on creating a
00:05 - multiplayer FPS in unity today we are
00:08 - going to take a look at creating a
00:09 - weapon manager script that will kind of
00:12 - take some different finality from the
00:14 - weapon shoot and move it into a separate
00:17 - script and this script is going to do
00:19 - stuff like weapon switching in the
00:21 - future for now we're just going to be
00:22 - equipping a single weapon at the
00:24 - beginning of the game so and it's also
00:27 - going to make it a lot easier for us to
00:28 - do weapon specific stuff like have
00:31 - different graphics for different weapons
00:33 - definitely we want different models but
00:36 - maybe also some shooting graphics stuff
00:39 - like bullet trails and muscle flashes
00:42 - and particle effects and stuff like that
00:44 - it's something that I want to implement
00:45 - in maybe the next video and this is
00:47 - going to make it a lot easier and more
00:50 - stable to do that kind of stuff so that
00:53 - yeah that's that's the central part of
00:55 - this video I also want to create
00:58 - rapid-firing so that we can have
01:00 - machine-gun like weapons in the game
01:02 - good so let's just jump right into it so
01:06 - you can see here that I'm in the project
01:08 - and nothing has changed since the last
01:09 - video and I want to go in and select our
01:12 - player here and then find our player
01:14 - shoot script and double click that to
01:16 - open it up in monodevelop so we can kind
01:18 - of have a look at how we currently have
01:20 - things set up
01:22 - and of course it's visual studio that I
01:25 - want to open this in not monodevelop
01:27 - and you can see here that we have this
01:30 - idea of the player weapon which has some
01:32 - very simple information and then a
01:35 - player shoot which has the current
01:38 - weapon that we we have it has a
01:40 - reference to some weapon graphics which
01:43 - sits on the prefab and right at the
01:46 - beginning so it's part of the prefab and
01:48 - we have a weapon layer name and all of
01:51 - these things are something that I want
01:52 - to move out of this script and into a
01:55 - separate one and I think that we should
01:59 - actually just go ahead and create that
02:00 - script right away so let's take our
02:02 - player here and move him into the scene
02:06 - there we go so that we can kind of be
02:09 - configure how things are done first of
02:11 - all I want to go down
02:12 - camera under a weapon holder and take
02:14 - the sci-fi automatic and simply drag it
02:17 - maybe into a prefabs folder first drag
02:21 - it out of the prefab so we're sure that
02:23 - it loses its connection there
02:25 - take the sci-fi automatic and drag it in
02:27 - there then delete it from the scene and
02:30 - then reapply on the player here so that
02:35 - way we can simply spawn that into the
02:37 - weapon holder and that's going to work
02:40 - just fine next up that's why it's so
02:43 - important to have a weapon holder that
02:45 - acts as the base for all of our weapons
02:47 - so that we can simply spawn them in and
02:49 - we don't need to do it much
02:51 - repositioning and at least so we might
02:54 - have some kind of offset variable in the
02:56 - future we'll see how things pan out so
02:59 - we have this very empty player hierarchy
03:02 - here and that's definitely something
03:04 - that we want and let's just hit apply on
03:06 - that you can see we've lost our weapon T
03:09 - affects our connection there then I want
03:11 - to go and hit add component and type in
03:14 - weapon manager new script and hit create
03:16 - an ADD and now let's open this up in
03:18 - mondo in Visual Studio as well and this
03:22 - is going to be using during the engine
03:24 - networking and it's going to derive from
03:27 - a network behavior and this is because
03:29 - we want to check in the script whether
03:31 - or not we on the local client and we're
03:33 - going to be doing that later
03:35 - so the first functionality I want to
03:38 - create here is just in the start method
03:41 - I want to call some kind of function
03:44 - that will equip any kind of weapon so
03:48 - I'm going to add this idea of there may
03:51 - be a primary weapon or a start weapon a
03:54 - current weapon and yeah let's try and
03:57 - sketch this out so we have a serialized
03:58 - field meaning that this is not
04:01 - accessible we just we just want to be
04:04 - able to change this in the inspector and
04:06 - this is going to be a private player
04:09 - weapon and this is going to be our let's
04:12 - say primary weapon for now this could
04:15 - also be weapon one you can call it
04:17 - whatever you want and then we are going
04:19 - to have a private player weapon and this
04:23 - is not going to be a civilized field
04:25 - because
04:25 - don't want this to be visible or
04:27 - changeable in the inspector we only want
04:31 - this to be stored within the weapon
04:32 - manager clash class and this is going to
04:35 - be called our current weapon and I'm
04:39 - actually going to make that a
04:42 - non-capital C and a non-capital P as
04:45 - well good and in the start method I want
04:50 - to have a call another method which we
04:52 - are going to be making now which is a
04:54 - void equip weapon and it's going to take
04:58 - in a player weapon and we're just going
05:01 - to call this weapon you could call it
05:03 - new weapon or next weapon or whatever
05:05 - and it's simply going to say that
05:07 - current weapon equals weapon there we go
05:11 - so it's going to put whatever weapon we
05:13 - give it into the current weapon slot and
05:15 - up here I simply want to call equip
05:17 - weapon and I want to input our primary
05:23 - weapon so when we spawn we equip our
05:25 - primary weapon that makes kind of great
05:27 - sense and in here we of course going to
05:31 - be spawning some graphics but let's just
05:34 - wait with that second the first thing I
05:37 - want to do is kind of implement this
05:38 - into our player shoot script so here we
05:41 - can go ahead and delete this weapon
05:43 - reference here and actually that's just
05:46 - delete the serialized field and then
05:48 - still have a private player weapon and
05:51 - let's call this the current weapon
05:53 - because we want some kind of we want to
05:57 - play a shoot script to also know what
05:59 - our current weapon is and we could
06:01 - definitely change this using some kind
06:03 - of cold back but instead just to keep
06:06 - things a bit symbol and since this
06:08 - player weapon isn't exactly a huge class
06:11 - we're simply going to store it here and
06:13 - then set it in the update method that's
06:15 - going to be just fine and we can go
06:17 - ahead and delete our weapon graphics
06:19 - weapons and we can also take this a
06:23 - weapon layer name and move that into our
06:27 - weapon manager so above everything else
06:30 - we are going to have the weapon layer
06:31 - name and then back in our shoot scripts
06:34 - we now delete this
06:38 - and yeah that all looks just fine and
06:47 - good so in our update method we now
06:49 - simply want to say that our current
06:52 - weapon should be equal to and then we
06:54 - want a reference to our weapon manager
06:57 - so what we'll do here is we'll create a
07:00 - public void and this is going to be
07:04 - called get current weapon and of course
07:08 - it's not going to be a public void it's
07:10 - going to be a public player weapon and
07:12 - it's simply going to return our current
07:16 - weapon so this is simply a kind of
07:20 - utility method that will allow other
07:23 - scripts with the reference to this
07:25 - script to get the current weapon and
07:28 - this way we can in here if we just make
07:31 - sure to require the components will
07:34 - require the weapon manager so we'll make
07:38 - sure that it's always there on the
07:40 - object with this one and then in the
07:43 - start method we said or we create a
07:47 - reference so we need a variable here
07:49 - private weapon manager weapon manager
07:53 - this is all stuff we've done before just
07:55 - in a slightly different manner so weapon
07:58 - manager equals getcomponent weapon
08:01 - manager there we go and again we know
08:04 - it's here because we are requiring it up
08:07 - there and then here we can say current
08:09 - weapon equals weapon manager dot get
08:13 - current weapon there we go and it's
08:16 - going to retrieve that and that's
08:19 - perfect
08:19 - so this way we are always making sure to
08:23 - update on this variable up here and
08:26 - that's definitely something that is very
08:28 - important and I'm just going to put that
08:30 - there so we kind of yeah so it makes
08:34 - sense and then we can take our current
08:37 - weapon here and instead of weapon that
08:39 - range we do current weapon range
08:41 - and current weapon damage and this
08:44 - script should actually be working now
08:46 - with the other type of weapon here and
08:49 - we can actually test this out so
08:52 - if we go in here under the weapon
08:54 - manager and we have a private field here
08:57 - the weapon layer name that isn't
09:00 - assigned that's correct but that's okay
09:04 - because we're currently not
09:05 - instantiating any graphics so if we try
09:07 - this out now we should see that things
09:10 - are actually working however we won't
09:14 - see anything worth seeing so a primary
09:17 - weapon here we could maybe call this one
09:21 - simply a blaster we could give it a
09:26 - damage of maybe 20 and a range of 100 is
09:31 - going to be just fine let's give it a
09:33 - damage of five actually because we are
09:34 - going to make this fire pretty fast so
09:38 - we have the primary weapon there we can
09:40 - then we can hit apply on that we can
09:43 - delete the player here in go and hit
09:45 - play we can select land host and you can
09:49 - see we don't have any graphics but we
09:51 - have no error errors either and we can
09:53 - actually shoot even though it's it's not
09:55 - really showing in any kind of way and if
09:58 - we go and our player one and change the
10:00 - mode here to debug we can inspect our
10:03 - current weapon and you can see that it's
10:05 - set to blaster with the damage of five
10:07 - and a range of a hundred so that is
10:09 - actually working just as we wanted to
10:12 - good so next up let's actually spawn our
10:18 - weapon in and in order to do this we go
10:23 - under our weapon manager here where we
10:26 - say equip weapon and we want to fill in
10:29 - a different some different things here
10:30 - first off I think we should give our
10:32 - player weapon some kind of graphics so
10:36 - in here we'll make a public game object
10:39 - oops
10:40 - game object and we'll call this um yeah
10:48 - we'll call this the weapon graphics or
10:51 - maybe just just graphics and we'll also
10:56 - I'm just repositioning my mic here so
11:00 - there we go
11:04 - cool so we'll also need a public let's
11:11 - do that up here a public float and this
11:14 - is going to be the fire rate so we're
11:18 - going to be needing that in a second for
11:19 - now I'm going to default it to zero this
11:22 - way we can make sure that if it's zero
11:24 - it's a single fire weapon so you have to
11:27 - tap it every time and if it's above that
11:30 - that means it's automatic and therefore
11:33 - we can both just hold in the button and
11:36 - it will shoot at this rate of fire so
11:39 - that's all we need to do within the
11:41 - player weapon script today so now that
11:44 - we have this weapon graphics we can just
11:47 - go ahead and actually spawn the same so
11:49 - we are going to instantiate the weapon
11:53 - dot graphics and we are going to do this
11:56 - at the weapon holder the location so
11:59 - kind of the weapon slot and we want of
12:02 - course again a reference to this so I'm
12:05 - going to go serialized field and let's
12:11 - do private transform let's call this
12:17 - weapon holder then down here we say
12:22 - weapon holder that position and add
12:25 - weapon holder dot rotation there we go
12:31 - we also want a reference to this object
12:33 - so we are going to do game object and
12:35 - let's just call this weapon Ince intz
12:41 - for instance and set that equal to that
12:44 - and we'll also cast it into a game
12:46 - object of course then we can say weapon
12:50 - ins dot transform dot set parent we want
12:58 - to parent it to our weapon holder object
13:00 - so that it will follow our movement
13:02 - around and this is something that we
13:05 - want to do for all of the different
13:07 - clients however there are some clients
13:10 - that we want to or should I
13:15 - the local player we need to set his
13:19 - version of the weapon to a specific
13:22 - layer as we did in the player shoot so
13:24 - if we are if is local player well then
13:28 - we want to say weapon let's say weapon
13:34 - ins dot on layer equals layer mask dot
13:44 - name to layer and then the weapon layer
13:48 - name there we go
13:51 - so we change the layer correctly there
13:53 - only for the local player so I believe
13:58 - that this should be working now yeah
14:03 - everything looks correct over here and
14:06 - over here and there and we just need to
14:10 - make sure that we fill in all of the
14:11 - correct information so let's take our
14:13 - player drag it over here let's take the
14:17 - weapon holder go into camera weapon
14:20 - holder and drag that in that's very
14:22 - important and also under a primary
14:25 - weapon you can see we now have a fire
14:26 - rate we'll mess with that in a second
14:28 - but we also have some graphics and under
14:30 - there we want to drag our prefab so down
14:34 - on the graphics we want to drag in
14:35 - sci-fi automatic and let's hit apply on
14:38 - that let's delete this player object and
14:40 - see if it works so let's hit play land
14:43 - host and you can see that it spawns in
14:45 - on the object just as we wanted it to
14:51 - and if you think that the the object
14:55 - looks a bit weirdly positions that
14:56 - because we had a very wide angle no
14:59 - actually it does look a bit weird let's
15:02 - just see if that is working as we want
15:04 - it to so let's take our sci-fi oops
15:08 - let's hit play here let's go under land
15:11 - host let's find our player one camera
15:14 - weapon holder sci-fi automatic it's
15:17 - correct attacked as weapon but I
15:20 - actually don't really yeah so it's
15:22 - tagged correctly but I actually think
15:25 - that we should do something about this
15:27 - camera because the
15:28 - the gun seems very far away at the
15:31 - moment so let's just fix this very
15:33 - easily what we do is we take our player
15:36 - we find his camera then weapon camera
15:40 - inspected in the scene and instead of
15:42 - further changing the field of view I'm
15:46 - just going to move this camera forward a
15:48 - bit simply like yeah something like
15:50 - point two seven seven or we could take
15:53 - and and move the weapon hold it back a
15:56 - bit too so you can do that here let's
16:02 - try and hit apply on that let's try and
16:06 - delete our player let's see if it looks
16:09 - better that looks much much better if
16:11 - you ask me at least I think it makes the
16:14 - game feel a lot more like you're
16:17 - actually holding the gun and the gun has
16:20 - a proper distance to our player if so
16:25 - that's good and you can of course go
16:27 - ahead and move the camera further but I
16:29 - actually like this quite a lot so let's
16:31 - just stick with that setup for now and
16:34 - you can see that it's probably properly
16:36 - spawning things in and layering them
16:39 - correctly cool so the last actually
16:44 - let's go ahead and try this out on the
16:46 - network before we continue so I'm just
16:48 - going to build this to super client and
16:54 - it's building and it's building
16:57 - hopefully this works on the network I
16:59 - haven't tested it yet so let's see there
17:02 - we go
17:02 - and let's jump back into unity as well
17:05 - wait for it to rebuild the lining there
17:07 - there we go let's hit play on this and
17:10 - this client will act as our host then
17:15 - over here we'll hit land client and yes
17:19 - indeed it is working you can see both
17:22 - our players have guns and they can move
17:24 - around and it's syncing proper properly
17:27 - and yeah that actually looks super duper
17:30 - awesome so on that part of the video is
17:34 - kind of done that's all I wanted to do
17:36 - for the actual and weapon manager script
17:38 - now we can move on to the rapid-fire
17:42 - so let's pop that back in there and
17:44 - maybe drag this down good so if we go
17:49 - back into Visual Studio under our player
17:52 - shoot rapid fire is something that you
17:54 - can do in many different ways
17:56 - some people like going into the update
17:59 - loop and then using time to time to
18:02 - determine when the next time to shoot is
18:04 - I much rather prefer to use kind of a
18:10 - button down to start a method that
18:14 - repeats with a certain interval and then
18:16 - using get button up to cancel that
18:19 - method from repeating and yeah that's
18:22 - kind of how I like to manage it I think
18:25 - it's a bit more stable but whatever you
18:27 - want to do so
18:30 - let's find our update loop here it is
18:35 - right here and you can see that we are
18:37 - currently just checking if we get a the
18:40 - button down called fire one well that's
18:42 - something we want to do if our rate of
18:45 - fire is equal to zero then that's all we
18:49 - want to do so we can go in here and say
18:50 - that if current weapon dot fire rate is
18:53 - equal to or let's say less than or equal
18:56 - to zero then all we want to do is take
19:01 - all of this code just this if statement
19:03 - here and put it in there
19:06 - so that's kind of all we want to happen
19:08 - there if it is not meaning if it's
19:11 - greater than zero
19:12 - what we want to do instead is we want to
19:15 - first of all again check if input get
19:18 - button-down and we put in fire one we
19:24 - use the exact same button well then we
19:28 - want to invoke repeating good see whoops
19:35 - invoke repeating it's right here and the
19:39 - method we want to invoke is shoot and it
19:43 - doesn't matter that it's marked as
19:44 - client down here I believe that it
19:46 - should still work just fine then we give
19:50 - it a time to wait in seconds and that's
19:53 - just going to be zero we want to it to
19:55 - fire immediately
19:56 - and then we give it a repeat rate and
19:58 - that is of course going to be our
20:00 - current weapon dot fire rate and it's
20:03 - not just going to be the fire rate
20:05 - because this is kind of the number of
20:07 - seconds it waits until it repeats so if
20:10 - we want it to be a fire rate and not a
20:12 - fire delay we want to do 1 divided by
20:14 - the fire rate in order to get it not to
20:17 - be an actual rate and then we say if
20:21 - else if we didn't or else if we didn't
20:26 - get the button-down fire one well then
20:27 - we want to check if we got button-up
20:31 - fire 1 so meaning that when we have let
20:37 - go of the fire 1 button we want to say
20:39 - invoke cancel or cancel invoke it is and
20:43 - the invoke that we want to cancel is
20:45 - shoot and again make sure that you spell
20:48 - this correctly it won't throw an error
20:50 - at least not until this part of the code
20:52 - is cold so that should pretty much work
20:56 - and yeah should call the shoot method
21:01 - and in order for us to test whether or
21:03 - not this actually work we're going to go
21:05 - in and call a debug lock simply saying
21:10 - test let's let's let's say shoot shoot
21:15 - good exclamation mark and let's say that
21:20 - make sure you've saved all the scripts
21:22 - let's head back into unity here let's go
21:24 - under our player and start by checking
21:28 - if things still work if we leave the
21:30 - fire rate at 0 so that means that we
21:31 - should only be able to tap fire so let's
21:33 - go under host click and it says shoot
21:36 - and if I hold it in it only sets shoot
21:39 - once so I can click this as many times
21:41 - as I want and it's going to work fine
21:43 - now let's try and change this fire rate
21:45 - to let's say maybe 10 shots a second
21:49 - let's go in here host and if I only
21:52 - click once it only sets it once if I
21:54 - hold it down you can see it goes crazy
21:58 - and as soon as I let go it stops
21:59 - counting so this way I can shoot quickly
22:03 - by tapping or I can simply hold down the
22:07 - gun and it is going to fire like crazy
22:10 - so that is exactly what we wanted it to
22:13 - do in the next video we're going to make
22:15 - this look a lot more impressive by
22:18 - adding some cool gun effects I've messed
22:21 - around with enabling and disabling some
22:24 - particle systems in order to create a
22:26 - cool muscle flash with some smoke
22:28 - I have also I'm also looking into a cool
22:31 - way to do bullet trails and we're
22:34 - definitely also going to have some
22:36 - impact particles so everything is going
22:40 - to be really awesome I hope that you
22:42 - enjoyed this video and I'll see you in
22:44 - the next one

Cleaned transcript:

thanks for tuning in at brakus hello and welcome to this video on creating a multiplayer FPS in unity today we are going to take a look at creating a weapon manager script that will kind of take some different finality from the weapon shoot and move it into a separate script and this script is going to do stuff like weapon switching in the future for now we're just going to be equipping a single weapon at the beginning of the game so and it's also going to make it a lot easier for us to do weapon specific stuff like have different graphics for different weapons definitely we want different models but maybe also some shooting graphics stuff like bullet trails and muscle flashes and particle effects and stuff like that it's something that I want to implement in maybe the next video and this is going to make it a lot easier and more stable to do that kind of stuff so that yeah that's that's the central part of this video I also want to create rapidfiring so that we can have machinegun like weapons in the game good so let's just jump right into it so you can see here that I'm in the project and nothing has changed since the last video and I want to go in and select our player here and then find our player shoot script and double click that to open it up in monodevelop so we can kind of have a look at how we currently have things set up and of course it's visual studio that I want to open this in not monodevelop and you can see here that we have this idea of the player weapon which has some very simple information and then a player shoot which has the current weapon that we we have it has a reference to some weapon graphics which sits on the prefab and right at the beginning so it's part of the prefab and we have a weapon layer name and all of these things are something that I want to move out of this script and into a separate one and I think that we should actually just go ahead and create that script right away so let's take our player here and move him into the scene there we go so that we can kind of be configure how things are done first of all I want to go down camera under a weapon holder and take the scifi automatic and simply drag it maybe into a prefabs folder first drag it out of the prefab so we're sure that it loses its connection there take the scifi automatic and drag it in there then delete it from the scene and then reapply on the player here so that way we can simply spawn that into the weapon holder and that's going to work just fine next up that's why it's so important to have a weapon holder that acts as the base for all of our weapons so that we can simply spawn them in and we don't need to do it much repositioning and at least so we might have some kind of offset variable in the future we'll see how things pan out so we have this very empty player hierarchy here and that's definitely something that we want and let's just hit apply on that you can see we've lost our weapon T affects our connection there then I want to go and hit add component and type in weapon manager new script and hit create an ADD and now let's open this up in mondo in Visual Studio as well and this is going to be using during the engine networking and it's going to derive from a network behavior and this is because we want to check in the script whether or not we on the local client and we're going to be doing that later so the first functionality I want to create here is just in the start method I want to call some kind of function that will equip any kind of weapon so I'm going to add this idea of there may be a primary weapon or a start weapon a current weapon and yeah let's try and sketch this out so we have a serialized field meaning that this is not accessible we just we just want to be able to change this in the inspector and this is going to be a private player weapon and this is going to be our let's say primary weapon for now this could also be weapon one you can call it whatever you want and then we are going to have a private player weapon and this is not going to be a civilized field because don't want this to be visible or changeable in the inspector we only want this to be stored within the weapon manager clash class and this is going to be called our current weapon and I'm actually going to make that a noncapital C and a noncapital P as well good and in the start method I want to have a call another method which we are going to be making now which is a void equip weapon and it's going to take in a player weapon and we're just going to call this weapon you could call it new weapon or next weapon or whatever and it's simply going to say that current weapon equals weapon there we go so it's going to put whatever weapon we give it into the current weapon slot and up here I simply want to call equip weapon and I want to input our primary weapon so when we spawn we equip our primary weapon that makes kind of great sense and in here we of course going to be spawning some graphics but let's just wait with that second the first thing I want to do is kind of implement this into our player shoot script so here we can go ahead and delete this weapon reference here and actually that's just delete the serialized field and then still have a private player weapon and let's call this the current weapon because we want some kind of we want to play a shoot script to also know what our current weapon is and we could definitely change this using some kind of cold back but instead just to keep things a bit symbol and since this player weapon isn't exactly a huge class we're simply going to store it here and then set it in the update method that's going to be just fine and we can go ahead and delete our weapon graphics weapons and we can also take this a weapon layer name and move that into our weapon manager so above everything else we are going to have the weapon layer name and then back in our shoot scripts we now delete this and yeah that all looks just fine and good so in our update method we now simply want to say that our current weapon should be equal to and then we want a reference to our weapon manager so what we'll do here is we'll create a public void and this is going to be called get current weapon and of course it's not going to be a public void it's going to be a public player weapon and it's simply going to return our current weapon so this is simply a kind of utility method that will allow other scripts with the reference to this script to get the current weapon and this way we can in here if we just make sure to require the components will require the weapon manager so we'll make sure that it's always there on the object with this one and then in the start method we said or we create a reference so we need a variable here private weapon manager weapon manager this is all stuff we've done before just in a slightly different manner so weapon manager equals getcomponent weapon manager there we go and again we know it's here because we are requiring it up there and then here we can say current weapon equals weapon manager dot get current weapon there we go and it's going to retrieve that and that's perfect so this way we are always making sure to update on this variable up here and that's definitely something that is very important and I'm just going to put that there so we kind of yeah so it makes sense and then we can take our current weapon here and instead of weapon that range we do current weapon range and current weapon damage and this script should actually be working now with the other type of weapon here and we can actually test this out so if we go in here under the weapon manager and we have a private field here the weapon layer name that isn't assigned that's correct but that's okay because we're currently not instantiating any graphics so if we try this out now we should see that things are actually working however we won't see anything worth seeing so a primary weapon here we could maybe call this one simply a blaster we could give it a damage of maybe 20 and a range of 100 is going to be just fine let's give it a damage of five actually because we are going to make this fire pretty fast so we have the primary weapon there we can then we can hit apply on that we can delete the player here in go and hit play we can select land host and you can see we don't have any graphics but we have no error errors either and we can actually shoot even though it's it's not really showing in any kind of way and if we go and our player one and change the mode here to debug we can inspect our current weapon and you can see that it's set to blaster with the damage of five and a range of a hundred so that is actually working just as we wanted to good so next up let's actually spawn our weapon in and in order to do this we go under our weapon manager here where we say equip weapon and we want to fill in a different some different things here first off I think we should give our player weapon some kind of graphics so in here we'll make a public game object oops game object and we'll call this um yeah we'll call this the weapon graphics or maybe just just graphics and we'll also I'm just repositioning my mic here so there we go cool so we'll also need a public let's do that up here a public float and this is going to be the fire rate so we're going to be needing that in a second for now I'm going to default it to zero this way we can make sure that if it's zero it's a single fire weapon so you have to tap it every time and if it's above that that means it's automatic and therefore we can both just hold in the button and it will shoot at this rate of fire so that's all we need to do within the player weapon script today so now that we have this weapon graphics we can just go ahead and actually spawn the same so we are going to instantiate the weapon dot graphics and we are going to do this at the weapon holder the location so kind of the weapon slot and we want of course again a reference to this so I'm going to go serialized field and let's do private transform let's call this weapon holder then down here we say weapon holder that position and add weapon holder dot rotation there we go we also want a reference to this object so we are going to do game object and let's just call this weapon Ince intz for instance and set that equal to that and we'll also cast it into a game object of course then we can say weapon ins dot transform dot set parent we want to parent it to our weapon holder object so that it will follow our movement around and this is something that we want to do for all of the different clients however there are some clients that we want to or should I the local player we need to set his version of the weapon to a specific layer as we did in the player shoot so if we are if is local player well then we want to say weapon let's say weapon ins dot on layer equals layer mask dot name to layer and then the weapon layer name there we go so we change the layer correctly there only for the local player so I believe that this should be working now yeah everything looks correct over here and over here and there and we just need to make sure that we fill in all of the correct information so let's take our player drag it over here let's take the weapon holder go into camera weapon holder and drag that in that's very important and also under a primary weapon you can see we now have a fire rate we'll mess with that in a second but we also have some graphics and under there we want to drag our prefab so down on the graphics we want to drag in scifi automatic and let's hit apply on that let's delete this player object and see if it works so let's hit play land host and you can see that it spawns in on the object just as we wanted it to and if you think that the the object looks a bit weirdly positions that because we had a very wide angle no actually it does look a bit weird let's just see if that is working as we want it to so let's take our scifi oops let's hit play here let's go under land host let's find our player one camera weapon holder scifi automatic it's correct attacked as weapon but I actually don't really yeah so it's tagged correctly but I actually think that we should do something about this camera because the the gun seems very far away at the moment so let's just fix this very easily what we do is we take our player we find his camera then weapon camera inspected in the scene and instead of further changing the field of view I'm just going to move this camera forward a bit simply like yeah something like point two seven seven or we could take and and move the weapon hold it back a bit too so you can do that here let's try and hit apply on that let's try and delete our player let's see if it looks better that looks much much better if you ask me at least I think it makes the game feel a lot more like you're actually holding the gun and the gun has a proper distance to our player if so that's good and you can of course go ahead and move the camera further but I actually like this quite a lot so let's just stick with that setup for now and you can see that it's probably properly spawning things in and layering them correctly cool so the last actually let's go ahead and try this out on the network before we continue so I'm just going to build this to super client and it's building and it's building hopefully this works on the network I haven't tested it yet so let's see there we go and let's jump back into unity as well wait for it to rebuild the lining there there we go let's hit play on this and this client will act as our host then over here we'll hit land client and yes indeed it is working you can see both our players have guns and they can move around and it's syncing proper properly and yeah that actually looks super duper awesome so on that part of the video is kind of done that's all I wanted to do for the actual and weapon manager script now we can move on to the rapidfire so let's pop that back in there and maybe drag this down good so if we go back into Visual Studio under our player shoot rapid fire is something that you can do in many different ways some people like going into the update loop and then using time to time to determine when the next time to shoot is I much rather prefer to use kind of a button down to start a method that repeats with a certain interval and then using get button up to cancel that method from repeating and yeah that's kind of how I like to manage it I think it's a bit more stable but whatever you want to do so let's find our update loop here it is right here and you can see that we are currently just checking if we get a the button down called fire one well that's something we want to do if our rate of fire is equal to zero then that's all we want to do so we can go in here and say that if current weapon dot fire rate is equal to or let's say less than or equal to zero then all we want to do is take all of this code just this if statement here and put it in there so that's kind of all we want to happen there if it is not meaning if it's greater than zero what we want to do instead is we want to first of all again check if input get buttondown and we put in fire one we use the exact same button well then we want to invoke repeating good see whoops invoke repeating it's right here and the method we want to invoke is shoot and it doesn't matter that it's marked as client down here I believe that it should still work just fine then we give it a time to wait in seconds and that's just going to be zero we want to it to fire immediately and then we give it a repeat rate and that is of course going to be our current weapon dot fire rate and it's not just going to be the fire rate because this is kind of the number of seconds it waits until it repeats so if we want it to be a fire rate and not a fire delay we want to do 1 divided by the fire rate in order to get it not to be an actual rate and then we say if else if we didn't or else if we didn't get the buttondown fire one well then we want to check if we got buttonup fire 1 so meaning that when we have let go of the fire 1 button we want to say invoke cancel or cancel invoke it is and the invoke that we want to cancel is shoot and again make sure that you spell this correctly it won't throw an error at least not until this part of the code is cold so that should pretty much work and yeah should call the shoot method and in order for us to test whether or not this actually work we're going to go in and call a debug lock simply saying test let's let's let's say shoot shoot good exclamation mark and let's say that make sure you've saved all the scripts let's head back into unity here let's go under our player and start by checking if things still work if we leave the fire rate at 0 so that means that we should only be able to tap fire so let's go under host click and it says shoot and if I hold it in it only sets shoot once so I can click this as many times as I want and it's going to work fine now let's try and change this fire rate to let's say maybe 10 shots a second let's go in here host and if I only click once it only sets it once if I hold it down you can see it goes crazy and as soon as I let go it stops counting so this way I can shoot quickly by tapping or I can simply hold down the gun and it is going to fire like crazy so that is exactly what we wanted it to do in the next video we're going to make this look a lot more impressive by adding some cool gun effects I've messed around with enabling and disabling some particle systems in order to create a cool muscle flash with some smoke I have also I'm also looking into a cool way to do bullet trails and we're definitely also going to have some impact particles so everything is going to be really awesome I hope that you enjoyed this video and I'll see you in the next one
