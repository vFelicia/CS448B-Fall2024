With timestamps:

00:00 - [Music]
00:02 - hello everyone and welcome to the
00:05 - shooting tutorial done by Brad keys I am
00:08 - the CEO of Bret keys and in this video
00:10 - we are going to take a look at two
00:12 - different methods for creating our
00:15 - shooting mechanics they are the most
00:18 - used and we won't go into all of the
00:21 - detail with recoil and muscle flashes
00:25 - and stuff like that but I will show you
00:28 - how to script shooting and how to
00:32 - implement it into a game
00:34 - also you can choose on your own which of
00:38 - the methods you want to use it really
00:41 - depends on the style of your game we are
00:44 - going to be implementing this raycast
00:46 - shooting mechanic into our survival game
00:50 - which we have a tutorial series on also
00:54 - on our youtube channel so you can go
00:55 - ahead and check those out if you want to
00:58 - but first of all I have set up a scene
01:01 - here inside of unity to demonstrate the
01:04 - differences between the two kinds of
01:07 - shooting the first one we are going to
01:10 - be taking a look at is what's called
01:13 - prefab shooting or at least I called it
01:16 - that and this kind of shooting effect is
01:21 - pretty much achieved by instantiating a
01:26 - bullet which you have then attached a
01:30 - script to and a rigidbody so you can
01:34 - make it shoot out so you apply some
01:36 - force and then unit sees collision
01:39 - system will do the rest and once it hits
01:42 - something it will check if the it will
01:45 - then send a message to whatever game
01:47 - object it hit that the game object here
01:51 - should apply have applied damage to it
01:54 - and you can change the damage on the
01:56 - bullet itself using this variable but
01:59 - let's just first of all before we get
02:02 - into the scripting let me show you how
02:06 - this actually behaves in game so let's
02:11 - hit play and you can see
02:13 - that I've made this little red bullet
02:16 - and once it hits the enemy the enemy
02:19 - dies and this is because I've set the
02:21 - enemy to have 100 HP health points and
02:27 - I've set the damage also to be 100 so if
02:31 - I go back into a unity into the project
02:37 - pane and select the bulletproof at that
02:39 - I've made we can go under the damage
02:41 - variable and simply change this to
02:43 - something less let's say 50 and
02:46 - therefore when I play the game I need to
02:49 - hit the enemies two times before they
02:52 - disappear but as you can see there can
02:55 - be some errors with this that can be
02:57 - glitches especially if I change this
03:00 - back to 100 especially if we make it so
03:03 - that the bullet goes even faster because
03:08 - realistically a bullet travels so
03:11 - incredibly fast especially with modern
03:16 - weapons of course that you will have to
03:19 - turn this up so you wouldn't even be
03:22 - able to see the bullet so if I open up
03:27 - the prefab shooting script this is how
03:30 - it looks it simply has a variable called
03:33 - the bullet and this is declared as a
03:35 - type rigidbody because we want to later
03:38 - influence the force and the positioning
03:42 - of the rigidbody we simply wanted to
03:44 - shoot out and it also has a speed
03:47 - variable which can then be changed
03:49 - inside of unity it then checks if the
03:53 - player hits the mouse button and if he
03:56 - does we want to instantiate the bullet
04:00 - so instantiate the bullet and the
04:04 - instantiated version of the bullet
04:06 - should be called clone we'd then want to
04:09 - apply a velocity through the clone so
04:13 - clone dot velocity in the direction
04:16 - forward by the speed amount the speed
04:20 - variable and then I've just added that
04:23 - the clone game object should be
04:25 - destroyed after three
04:27 - seconds so that our hierarchy won't be
04:30 - filled up completely so when I play the
04:33 - game and make some bullets you can see
04:36 - them start to disappear after three
04:38 - seconds right so that's the prefab
04:42 - shooting let me just show you how this
04:46 - can be used wrong so I have bye for now
04:49 - and chat this to our main camera the
04:51 - prefab shooting script and if I change
04:54 - up the speed to let's say 200 with which
04:57 - would probably be more realistic first
05:01 - of all the bullet goes really fast in
05:03 - get it can't go through walls also
05:05 - because simply it's too fast for the
05:08 - unit circulation system to handle and
05:11 - well I have to shoot the enemies a whole
05:14 - lot of times before they die even though
05:18 - they should die on just one shot so it
05:22 - can be really effective for creating
05:24 - slower bullets or if you want to be able
05:27 - to throw hand grenades but in general if
05:32 - you want to be precise with your
05:34 - shooting prefab shooting is just not the
05:37 - way so let's go ahead and disable this
05:40 - and select our play into that and enable
05:44 - the raycast shooting which have cost
05:47 - attached to the player and let's just
05:50 - see how this works so I hit play and so
05:57 - we can see that I have made a little
05:59 - particle that appears wherever we hit
06:04 - something and of course I am missing the
06:07 - crosshairs that would be in the center
06:10 - of our scene in this preview
06:13 - scene but so it can be a little
06:15 - difficult to aim but once you get that
06:19 - in place this should work just fine so I
06:22 - can aim at the enemy and they will die
06:25 - and I can pretty much guarantee that
06:28 - this will happen every time one thing
06:31 - though of course the enemies does have
06:34 - to have colliders attached to them but
06:37 - that's also the case with the prefab
06:40 - shooting
06:40 - let's take a look at how rick has
06:43 - shooting actually works so here we have
06:51 - quite a few things going on and most of
06:54 - these are actually because I wanted to
06:56 - show you what the computer does behind
07:00 - the behind the game so this is what the
07:06 - computer does so if I just quickly hit
07:11 - play while I am in this scene view also
07:15 - sorry hit play here there you go you can
07:19 - see that the computer draws a red line
07:23 - between the play of the camera what he
07:26 - is pointing at and the enemy or whatever
07:30 - he's shooting at and so the computer is
07:35 - able to more realistically calculate how
07:38 - the bullet would fly you then have to
07:42 - implement stuff like gravity and other
07:46 - forces that could manipulate the
07:48 - trajectory of the bullet but this is a
07:51 - much much better way to do it so that's
07:56 - pretty much ray cast shooting so if I
07:58 - just quickly open up paint we have in
08:04 - the first example in a prefab shooting
08:09 - example this is the prefab shooting we
08:15 - simply take a point and this can be
08:18 - whatever this would normally be an empty
08:21 - game object this box is an empty game
08:23 - object and we say that from here we want
08:27 - to create a pallet prefab so we
08:29 - instantiate a bullet around that and
08:34 - then later we tell it that we want to
08:37 - fly in a certain direction and this
08:40 - would normally just be forward and this
08:43 - can be done using a speed variable which
08:47 - you can then change inside of unity so
08:51 - that's it for the prefab shooting and
08:53 - because this
08:54 - bullet this bullet prefab has a
08:57 - rigidbody attached to it it will by
08:59 - default collide with things in the same
09:03 - raycast shooting works somewhat similar
09:07 - but a little different so this is the
09:10 - raycast shooting and what we're doing
09:13 - here is we have our player and whenever
09:18 - he presses the button we tell the
09:20 - computer to draw an invisible line let's
09:23 - make this screen from the camera the way
09:27 - he looking he's looking until it hits
09:31 - something whenever it hits something we
09:34 - want to instantiate some particles
09:37 - wherever it hits so here we can
09:40 - instantiate some sparks or some blood
09:43 - then we simply say that we want to send
09:47 - a message to whatever it hits and this
09:51 - means that we can call a function on the
09:54 - game from this script that is attached
09:57 - to the game object that we had so if
09:59 - this was our enemy this is our enemy
10:04 - would then be red we can call a function
10:09 - on the enemy script saying that it needs
10:11 - to lose health so that's basically it
10:16 - for understanding the different methods
10:18 - the one that we are going to be using
10:20 - are in our survival game is the raycast
10:24 - shooting so let me just go ahead and
10:26 - open up the actual is the actual scene
10:29 - from our survival game and this is how
10:33 - the game looks so far we have an enemy
10:37 - down here and let me see if I can find
10:41 - him there yes that's our enemy and
10:45 - because we are just testing some stuff
10:48 - out I want to bring him over to our play
10:51 - so a little village so if I go ahead and
10:54 - hit play
10:59 - we can see him and he he actually also
11:02 - chases us and for now we can only hit
11:06 - him but we want to also create a
11:08 - shooting mechanic so I haven't actually
11:12 - modelled out a gun but this is not
11:16 - important for this tutorial this the gun
11:19 - would simply be graphics for now we just
11:21 - want to create the script that handles
11:23 - the shooting and so if we'd go under the
11:27 - player the main camera we can see that I
11:30 - have made an empty game object called
11:32 - melee and under this melee I have a maze
11:37 - and a sword and so I can parent all of
11:43 - the different weapons that I want to
11:45 - exist in my scene
11:46 - to this melee object so if I go ahead
11:50 - and disable the mace I want to create a
11:53 - new object called gun and for now this
11:56 - is just gonna be in empty car a game
11:58 - object this is where you would bring in
12:00 - your model the gun and I'm just gonna
12:04 - call this cut drag it under the melee
12:10 - game object and let's century off the
12:14 - position and there we go it's pretty
12:22 - much in this century of our camera dick
12:25 - trajectory and a little out from our
12:29 - player that looks good
12:31 - not that it really matters as long as
12:33 - you don't have a model
12:35 - so let's actually add a script now so
12:38 - hit the add component button new script
12:41 - and call this let's call this ray cast
12:46 - shooting ray cast shooting and I'll just
12:52 - quickly capitalize the are actually
12:57 - let's not do that because unity wouldn't
13:00 - like us to so let's open up the script
13:04 - in monodevelop and here we go
13:07 - this is how it looks so let's start
13:10 - writing some shooting functionality
13:12 - we can go ahead and delete the function
13:15 - start because we won't be using that and
13:19 - let's make some variables the first
13:22 - variable you're gonna make is called var
13:25 - and then we are going to write you can
13:31 - write whatever you want but this is
13:33 - basically just gonna store the particles
13:35 - that are going to emit whenever our so
13:39 - called bullet hits something so this
13:41 - could be sparks this could people odd
13:43 - and you could also have different
13:45 - particles emit depending on what you
13:48 - what you actually had so I'm just gonna
13:50 - write our particles actually I'm gonna
13:58 - write effect and then it's gonna be a
14:01 - type transform the next one is gonna be
14:05 - a bar and this is going to be the damage
14:07 - variable so let's write the damage and
14:13 - by default that's set this 200 let's go
14:18 - into our function update now and write
14:22 - some more code so here we're gonna type
14:24 - bar here I think it's gonna be a type
14:31 - raycast
14:34 - see if I can spell this right raycast
14:37 - hit yes and then a VAR ray of type ray
14:45 - and it's going to be a ray and it's
14:50 - going to be equal to camera don't main
14:54 - that screen points to ray a vector
15:03 - parenthesis vector 3 parenthesis screen
15:12 - dot with
15:16 - times zero point 5 comma screen dot
15:23 - height small letters screen dot height 5
15:31 - times 0.5 and then comma 0 end up
15:41 - parentheses and a parenthesis and then a
15:44 - semicolon now what we're doing here is
15:47 - we are creating two variables inside our
15:49 - function updates so these are constantly
15:52 - gonna be changed the first one is kind
15:56 - of is called hits and it's gonna
15:59 - basically store all of the information
16:02 - of the game object that we are going to
16:04 - be hitting so our hit function or hit
16:09 - variable I'm sorry
16:11 - it's gonna store information about our
16:14 - enemy so whenever we send out the line
16:18 - and it hits the enemy it's gonna store
16:23 - information about what we hit and where
16:31 - we hit it so that's its that is
16:34 - something we are going to reference
16:36 - later to found find our stuff and to
16:39 - send a message to the game object that
16:43 - it should lose damage
16:44 - so this is our hit variable now let's go
16:48 - back and see what our ray variable does
16:51 - our array is our actual ray cast so this
16:56 - is our line and here we simply say that
16:59 - the sensory of the screen should be
17:02 - sending out the line straight forward so
17:06 - ray equals camera that main screen
17:09 - points array and the screen points array
17:11 - function will simply take it whatever
17:14 - position on the screen mean that means a
17:17 - 2d coordinate and sent out a lane line
17:22 - straight forward from that
17:23 - and here we declare what where exactly
17:28 - that's going to
17:29 - be and it's gonna be half down our
17:33 - screen so we take the width and it's
17:36 - going to be the width times 0.5 so that
17:40 - means about here and it's going to be
17:43 - the height times 0.5 so that means half
17:46 - of the height width which gives us the
17:49 - center of the screen and on the Z we
17:52 - just wanted to start directly from the
17:54 - camera and so there this is how we
17:58 - actually cast out one of these lines all
18:03 - right so now we want to check if the
18:06 - player actually presses the input mouse
18:10 - button so actually presses the fire
18:12 - button so if input that get mouse button
18:17 - down you can use anything here but I'm
18:20 - going to use the mouse button down zero
18:23 - which means the left mouse button then
18:28 - we want some things to happen so let's
18:29 - open up some parentheses so we can make
18:32 - some logic for this if statement and
18:36 - inside of here we want yet another if
18:39 - statement we want if physics dot raycast
18:47 - so if the raycast actually hits
18:50 - something ray hit 100 and separate them
18:58 - with commas and make sure it you close
19:01 - up the parentheses so this will check
19:06 - this will make sure that it casts out
19:09 - this array that it stores the
19:12 - information in the hit variable and that
19:15 - it only does this if it's inside a range
19:19 - of 100 so that you won't be shooting
19:23 - stuff all the way across the scene but
19:26 - feel free to play around with this
19:28 - variable it really depends on what you
19:31 - want to achieve so let's open up some
19:36 - more brackets
19:38 - so we can have some logic inside of this
19:41 - new if statement and here we're gonna do
19:45 - quite a few things let's start out by
19:47 - just actually writing the dyeing of our
19:52 - enemy so we are going to write hit dart
19:57 - transform that sent message and open
20:03 - parenthesis and call this apply damage
20:11 - comma the damage comment send message
20:19 - options that don't require receiver
20:23 - close up the parenthesis and end with
20:27 - the semicolon now I know that this code
20:30 - can be a lot and it is quite confusing
20:33 - but let me just go what we have going on
20:36 - so far we have the damage variable which
20:40 - is going to simply tell the computer how
20:43 - much we want to damage the arrow and in
20:45 - opponent we have some variables helping
20:49 - us in sending out the array and looking
20:53 - at what it hits and we have some if
20:56 - statements making sure that this only
20:59 - happens when it actually hits something
21:02 - and when the player presses the fire
21:05 - button and if all of these requirements
21:09 - are met then we want to send a message
21:13 - to whatever we hit that it should apply
21:16 - damage I can see that I have misspelled
21:19 - this to Apple damage so apply damage
21:23 - it's very important that this name here
21:27 - is the same as the name of the function
21:29 - that should apply the damage so what's
21:32 - going on here is we say it sold the hit
21:34 - that transformed that send message that
21:36 - we want it to call a function called
21:39 - apply damage and it it has a requirement
21:44 - and that is that it will use the damage
21:48 - variable so we call the apply damage
21:51 - function
21:52 - and sent the damage variable with it and
21:55 - if the the if whatever we hit doesn't
22:01 - have this damage function then we just
22:05 - won't care so it doesn't have to have a
22:09 - receiver then then nothing will happen
22:11 - simply so I'm let's open up the script
22:15 - that will actually be applied damage to
22:17 - so go back into unity let's just quickly
22:21 - see if we have any errors I can see that
22:23 - we have two if physics that drink Astra
22:28 - function update let me see I can't seem
22:36 - to find any errors oh yeah I've missed a
22:38 - parenthesis in the F statement so
22:41 - quickly close that off see if we still
22:44 - have any errors now via error free but I
22:47 - love this thing now we can go and check
22:51 - out our enemy script that's our enemy
22:55 - and this was written in the survival
22:57 - game series tutorial tutorial series and
23:01 - you can just go ahead and check it out
23:02 - but it's a very simple script called
23:04 - enemy health and inside of here you can
23:07 - see that we have a function called apply
23:09 - damage which requires the damage
23:13 - variable and it's simply gonna say that
23:15 - health will be less the amount of damage
23:20 - so health minus equals the damage so we
23:24 - will subtract the damage variable that
23:27 - we are going to be sending from the
23:29 - health all right so I'll just quickly
23:33 - close on some of these scripts so these
23:36 - are the two most important scripts and
23:38 - let's go ahead and test out if this
23:40 - actually works so open up the game hit
23:46 - play and indeed when I click the button
23:51 - and point on the enemy it does disappear
23:55 - from our scene so that's it for the most
23:58 - basic part of ray cast shooting if you
24:01 - also want to apply some particles we can
24:04 - do that
24:05 - let's go back into the raycast shooting
24:08 - script this can be really helpful in
24:10 - showing the player where he hits when he
24:15 - when he misses and so on and so forth
24:18 - so let's write var particle clone equals
24:26 - instantiate and the instantiate function
24:30 - is what you use whenever you want to
24:33 - spawn an object so make an object appear
24:37 - all of this Sutton so open up a
24:41 - parenthesis and type effect the variable
24:45 - effect we declared earlier comma hit dot
24:50 - point comma quaternion dad look rotation
25:02 - open up parenthesis hit dot normal close
25:08 - parentheses close parenthesis and a
25:11 - semicolon now this line makes a new
25:17 - variable called particle clone and this
25:21 - allows us to later delete this when it's
25:23 - done playing but the important part is
25:26 - not this the important part is the
25:29 - instantiate effect at the hit dot point
25:35 - with the rotation of catonian dog luke
25:39 - rotation hit dot normal now if you're
25:44 - not too heavy on math basically what the
25:47 - normal is so I'm gonna open up a new
25:51 - paint document basically what the normal
25:54 - is at least in this case as if we have a
25:58 - circle the normal would be this line so
26:04 - what we're doing is we want if we hit
26:07 - the if we hit the circle from a certain
26:10 - angle let's say we hit it from here we
26:13 - want to make sure that the particles are
26:16 - facing this way out
26:19 - and not omitting inside of the the the
26:23 - circle of the enemy so we wanted to meet
26:25 - amid outwards and this is better done by
26:29 - simply taking the normal of that point
26:34 - and so we can make sure that the
26:37 - particles will emit the correct way and
26:44 - so if we go back into the script editor
26:48 - we simply instantiate the particles at
26:51 - the position where we hit with this
26:56 - normal rotation but you'd really I can
27:00 - understand if it's it's difficult
27:03 - wrapping your head around but for now
27:05 - you can just go ahead and write it in it
27:07 - should work in all cases and then type
27:10 - after that destroy particle cologne and
27:16 - dart game object game object comma after
27:25 - two or three seconds you can choose I'm
27:27 - just gonna write two so this will just
27:29 - make that make sure that we don't have a
27:31 - lot of particles in our scene they will
27:34 - be destroyed after two seconds and let's
27:38 - quickly make a particle for us to
27:43 - instantiate I've done this before hand
27:46 - so I'm just gonna use the one I used
27:48 - inside of the example scene so I have it
27:51 - under the shooting tutorial and then
27:54 - pull it hit so I'm gonna drag that out
27:56 - into my assets folder so that it is
27:59 - select the gun and drag in the ability
28:03 - to hit but you can always do this by
28:06 - making a game object create other
28:08 - particle system chicken around with it
28:11 - until you are satisfied and then just
28:13 - dragging it into the project to make a
28:15 - prefab out of this so now that we have
28:19 - added this effect let's hit play and
28:22 - indeed when I hit the wall you can see
28:25 - the different particle start emitting
28:27 - and when I hit the enemy he dies and the
28:31 - particles
28:32 - so MIT so on that's it for shooting I
28:36 - know this was quite a long video but it
28:39 - is a difficult subject especially when
28:42 - you want to add different forces
28:44 - particle effects and so on and so forth
28:47 - I hope you enjoyed the video and I'll
28:49 - see you in the next one
28:52 - [Music]

Cleaned transcript:

hello everyone and welcome to the shooting tutorial done by Brad keys I am the CEO of Bret keys and in this video we are going to take a look at two different methods for creating our shooting mechanics they are the most used and we won't go into all of the detail with recoil and muscle flashes and stuff like that but I will show you how to script shooting and how to implement it into a game also you can choose on your own which of the methods you want to use it really depends on the style of your game we are going to be implementing this raycast shooting mechanic into our survival game which we have a tutorial series on also on our youtube channel so you can go ahead and check those out if you want to but first of all I have set up a scene here inside of unity to demonstrate the differences between the two kinds of shooting the first one we are going to be taking a look at is what's called prefab shooting or at least I called it that and this kind of shooting effect is pretty much achieved by instantiating a bullet which you have then attached a script to and a rigidbody so you can make it shoot out so you apply some force and then unit sees collision system will do the rest and once it hits something it will check if the it will then send a message to whatever game object it hit that the game object here should apply have applied damage to it and you can change the damage on the bullet itself using this variable but let's just first of all before we get into the scripting let me show you how this actually behaves in game so let's hit play and you can see that I've made this little red bullet and once it hits the enemy the enemy dies and this is because I've set the enemy to have 100 HP health points and I've set the damage also to be 100 so if I go back into a unity into the project pane and select the bulletproof at that I've made we can go under the damage variable and simply change this to something less let's say 50 and therefore when I play the game I need to hit the enemies two times before they disappear but as you can see there can be some errors with this that can be glitches especially if I change this back to 100 especially if we make it so that the bullet goes even faster because realistically a bullet travels so incredibly fast especially with modern weapons of course that you will have to turn this up so you wouldn't even be able to see the bullet so if I open up the prefab shooting script this is how it looks it simply has a variable called the bullet and this is declared as a type rigidbody because we want to later influence the force and the positioning of the rigidbody we simply wanted to shoot out and it also has a speed variable which can then be changed inside of unity it then checks if the player hits the mouse button and if he does we want to instantiate the bullet so instantiate the bullet and the instantiated version of the bullet should be called clone we'd then want to apply a velocity through the clone so clone dot velocity in the direction forward by the speed amount the speed variable and then I've just added that the clone game object should be destroyed after three seconds so that our hierarchy won't be filled up completely so when I play the game and make some bullets you can see them start to disappear after three seconds right so that's the prefab shooting let me just show you how this can be used wrong so I have bye for now and chat this to our main camera the prefab shooting script and if I change up the speed to let's say 200 with which would probably be more realistic first of all the bullet goes really fast in get it can't go through walls also because simply it's too fast for the unit circulation system to handle and well I have to shoot the enemies a whole lot of times before they die even though they should die on just one shot so it can be really effective for creating slower bullets or if you want to be able to throw hand grenades but in general if you want to be precise with your shooting prefab shooting is just not the way so let's go ahead and disable this and select our play into that and enable the raycast shooting which have cost attached to the player and let's just see how this works so I hit play and so we can see that I have made a little particle that appears wherever we hit something and of course I am missing the crosshairs that would be in the center of our scene in this preview scene but so it can be a little difficult to aim but once you get that in place this should work just fine so I can aim at the enemy and they will die and I can pretty much guarantee that this will happen every time one thing though of course the enemies does have to have colliders attached to them but that's also the case with the prefab shooting let's take a look at how rick has shooting actually works so here we have quite a few things going on and most of these are actually because I wanted to show you what the computer does behind the behind the game so this is what the computer does so if I just quickly hit play while I am in this scene view also sorry hit play here there you go you can see that the computer draws a red line between the play of the camera what he is pointing at and the enemy or whatever he's shooting at and so the computer is able to more realistically calculate how the bullet would fly you then have to implement stuff like gravity and other forces that could manipulate the trajectory of the bullet but this is a much much better way to do it so that's pretty much ray cast shooting so if I just quickly open up paint we have in the first example in a prefab shooting example this is the prefab shooting we simply take a point and this can be whatever this would normally be an empty game object this box is an empty game object and we say that from here we want to create a pallet prefab so we instantiate a bullet around that and then later we tell it that we want to fly in a certain direction and this would normally just be forward and this can be done using a speed variable which you can then change inside of unity so that's it for the prefab shooting and because this bullet this bullet prefab has a rigidbody attached to it it will by default collide with things in the same raycast shooting works somewhat similar but a little different so this is the raycast shooting and what we're doing here is we have our player and whenever he presses the button we tell the computer to draw an invisible line let's make this screen from the camera the way he looking he's looking until it hits something whenever it hits something we want to instantiate some particles wherever it hits so here we can instantiate some sparks or some blood then we simply say that we want to send a message to whatever it hits and this means that we can call a function on the game from this script that is attached to the game object that we had so if this was our enemy this is our enemy would then be red we can call a function on the enemy script saying that it needs to lose health so that's basically it for understanding the different methods the one that we are going to be using are in our survival game is the raycast shooting so let me just go ahead and open up the actual is the actual scene from our survival game and this is how the game looks so far we have an enemy down here and let me see if I can find him there yes that's our enemy and because we are just testing some stuff out I want to bring him over to our play so a little village so if I go ahead and hit play we can see him and he he actually also chases us and for now we can only hit him but we want to also create a shooting mechanic so I haven't actually modelled out a gun but this is not important for this tutorial this the gun would simply be graphics for now we just want to create the script that handles the shooting and so if we'd go under the player the main camera we can see that I have made an empty game object called melee and under this melee I have a maze and a sword and so I can parent all of the different weapons that I want to exist in my scene to this melee object so if I go ahead and disable the mace I want to create a new object called gun and for now this is just gonna be in empty car a game object this is where you would bring in your model the gun and I'm just gonna call this cut drag it under the melee game object and let's century off the position and there we go it's pretty much in this century of our camera dick trajectory and a little out from our player that looks good not that it really matters as long as you don't have a model so let's actually add a script now so hit the add component button new script and call this let's call this ray cast shooting ray cast shooting and I'll just quickly capitalize the are actually let's not do that because unity wouldn't like us to so let's open up the script in monodevelop and here we go this is how it looks so let's start writing some shooting functionality we can go ahead and delete the function start because we won't be using that and let's make some variables the first variable you're gonna make is called var and then we are going to write you can write whatever you want but this is basically just gonna store the particles that are going to emit whenever our so called bullet hits something so this could be sparks this could people odd and you could also have different particles emit depending on what you what you actually had so I'm just gonna write our particles actually I'm gonna write effect and then it's gonna be a type transform the next one is gonna be a bar and this is going to be the damage variable so let's write the damage and by default that's set this 200 let's go into our function update now and write some more code so here we're gonna type bar here I think it's gonna be a type raycast see if I can spell this right raycast hit yes and then a VAR ray of type ray and it's going to be a ray and it's going to be equal to camera don't main that screen points to ray a vector parenthesis vector 3 parenthesis screen dot with times zero point 5 comma screen dot height small letters screen dot height 5 times 0.5 and then comma 0 end up parentheses and a parenthesis and then a semicolon now what we're doing here is we are creating two variables inside our function updates so these are constantly gonna be changed the first one is kind of is called hits and it's gonna basically store all of the information of the game object that we are going to be hitting so our hit function or hit variable I'm sorry it's gonna store information about our enemy so whenever we send out the line and it hits the enemy it's gonna store information about what we hit and where we hit it so that's its that is something we are going to reference later to found find our stuff and to send a message to the game object that it should lose damage so this is our hit variable now let's go back and see what our ray variable does our array is our actual ray cast so this is our line and here we simply say that the sensory of the screen should be sending out the line straight forward so ray equals camera that main screen points array and the screen points array function will simply take it whatever position on the screen mean that means a 2d coordinate and sent out a lane line straight forward from that and here we declare what where exactly that's going to be and it's gonna be half down our screen so we take the width and it's going to be the width times 0.5 so that means about here and it's going to be the height times 0.5 so that means half of the height width which gives us the center of the screen and on the Z we just wanted to start directly from the camera and so there this is how we actually cast out one of these lines all right so now we want to check if the player actually presses the input mouse button so actually presses the fire button so if input that get mouse button down you can use anything here but I'm going to use the mouse button down zero which means the left mouse button then we want some things to happen so let's open up some parentheses so we can make some logic for this if statement and inside of here we want yet another if statement we want if physics dot raycast so if the raycast actually hits something ray hit 100 and separate them with commas and make sure it you close up the parentheses so this will check this will make sure that it casts out this array that it stores the information in the hit variable and that it only does this if it's inside a range of 100 so that you won't be shooting stuff all the way across the scene but feel free to play around with this variable it really depends on what you want to achieve so let's open up some more brackets so we can have some logic inside of this new if statement and here we're gonna do quite a few things let's start out by just actually writing the dyeing of our enemy so we are going to write hit dart transform that sent message and open parenthesis and call this apply damage comma the damage comment send message options that don't require receiver close up the parenthesis and end with the semicolon now I know that this code can be a lot and it is quite confusing but let me just go what we have going on so far we have the damage variable which is going to simply tell the computer how much we want to damage the arrow and in opponent we have some variables helping us in sending out the array and looking at what it hits and we have some if statements making sure that this only happens when it actually hits something and when the player presses the fire button and if all of these requirements are met then we want to send a message to whatever we hit that it should apply damage I can see that I have misspelled this to Apple damage so apply damage it's very important that this name here is the same as the name of the function that should apply the damage so what's going on here is we say it sold the hit that transformed that send message that we want it to call a function called apply damage and it it has a requirement and that is that it will use the damage variable so we call the apply damage function and sent the damage variable with it and if the the if whatever we hit doesn't have this damage function then we just won't care so it doesn't have to have a receiver then then nothing will happen simply so I'm let's open up the script that will actually be applied damage to so go back into unity let's just quickly see if we have any errors I can see that we have two if physics that drink Astra function update let me see I can't seem to find any errors oh yeah I've missed a parenthesis in the F statement so quickly close that off see if we still have any errors now via error free but I love this thing now we can go and check out our enemy script that's our enemy and this was written in the survival game series tutorial tutorial series and you can just go ahead and check it out but it's a very simple script called enemy health and inside of here you can see that we have a function called apply damage which requires the damage variable and it's simply gonna say that health will be less the amount of damage so health minus equals the damage so we will subtract the damage variable that we are going to be sending from the health all right so I'll just quickly close on some of these scripts so these are the two most important scripts and let's go ahead and test out if this actually works so open up the game hit play and indeed when I click the button and point on the enemy it does disappear from our scene so that's it for the most basic part of ray cast shooting if you also want to apply some particles we can do that let's go back into the raycast shooting script this can be really helpful in showing the player where he hits when he when he misses and so on and so forth so let's write var particle clone equals instantiate and the instantiate function is what you use whenever you want to spawn an object so make an object appear all of this Sutton so open up a parenthesis and type effect the variable effect we declared earlier comma hit dot point comma quaternion dad look rotation open up parenthesis hit dot normal close parentheses close parenthesis and a semicolon now this line makes a new variable called particle clone and this allows us to later delete this when it's done playing but the important part is not this the important part is the instantiate effect at the hit dot point with the rotation of catonian dog luke rotation hit dot normal now if you're not too heavy on math basically what the normal is so I'm gonna open up a new paint document basically what the normal is at least in this case as if we have a circle the normal would be this line so what we're doing is we want if we hit the if we hit the circle from a certain angle let's say we hit it from here we want to make sure that the particles are facing this way out and not omitting inside of the the the circle of the enemy so we wanted to meet amid outwards and this is better done by simply taking the normal of that point and so we can make sure that the particles will emit the correct way and so if we go back into the script editor we simply instantiate the particles at the position where we hit with this normal rotation but you'd really I can understand if it's it's difficult wrapping your head around but for now you can just go ahead and write it in it should work in all cases and then type after that destroy particle cologne and dart game object game object comma after two or three seconds you can choose I'm just gonna write two so this will just make that make sure that we don't have a lot of particles in our scene they will be destroyed after two seconds and let's quickly make a particle for us to instantiate I've done this before hand so I'm just gonna use the one I used inside of the example scene so I have it under the shooting tutorial and then pull it hit so I'm gonna drag that out into my assets folder so that it is select the gun and drag in the ability to hit but you can always do this by making a game object create other particle system chicken around with it until you are satisfied and then just dragging it into the project to make a prefab out of this so now that we have added this effect let's hit play and indeed when I hit the wall you can see the different particle start emitting and when I hit the enemy he dies and the particles so MIT so on that's it for shooting I know this was quite a long video but it is a difficult subject especially when you want to add different forces particle effects and so on and so forth I hope you enjoyed the video and I'll see you in the next one
