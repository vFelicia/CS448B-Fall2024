With timestamps:

00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to the
00:05 - second video in how to program in C it's
00:09 - been such a long time since the last one
00:11 - and and I'm really sorry about that uh
00:14 - but I've been working on something
00:15 - really cool which you might see from the
00:17 - wallpaper here and I've also been
00:20 - traveling a lot but I'm finally back
00:22 - home and ready to start pumping out some
00:24 - videos so this is just a short one uh
00:26 - but we're going to take a look at
00:27 - something really important which is
00:29 - input and output meaning how we read and
00:32 - write from the
00:33 - console uh so that's super cool but
00:36 - first before we get started I quickly
00:37 - want to show you the all new brais
00:40 - developer Forum as you can see we have a
00:43 - fullon answer section uh where you can
00:46 - ask question and uh and and get answers
00:49 - uh we have a discussion section where
00:51 - you can share opinions about stuff and
00:53 - then we have showcase and collaboration
00:55 - so you can show your work and you can
00:57 - collaborate with other developers it's
00:59 - super awesome awesome and uh here it is
01:01 - this is how it looks so you can see that
01:04 - we have uh infinite scrolling uh there
01:06 - are a statistics there are different
01:09 - categories we have some hot topics so
01:12 - you can see what's trending and some top
01:13 - users which you can very much still um
01:17 - get on top of if you uh join quickly so
01:20 - you can simply click here to start a
01:21 - topic or log in you can join with both
01:24 - both Facebook and Twitter or just fill
01:26 - out the boxes and hit join it's very
01:29 - simple and very easy and I very much
01:31 - hope uh that that you will join and and
01:33 - be part of this quickly expanding
01:35 - Community because we really need to fill
01:38 - this up with users also thank you to all
01:40 - the beta users uh out there who've been
01:43 - uh testing and Reporting bugs it's
01:45 - really been helpful so if you see a bug
01:47 - or want a feature please just go ahead
01:50 - and request it I've made a topic for you
01:52 - to do
01:53 - so great so that was the introduction to
01:56 - today's video let's just go ahead and
01:58 - delve right into it so let's open up
02:01 - xamarin studio and once it's opened up
02:03 - here we're just going to load our first
02:05 - console project
02:08 - solution and now we're back to where we
02:10 - left off in the last video cool so what
02:15 - I really want you to understand right
02:17 - now is that
02:18 - coding you can't just understand
02:22 - everything at the same time you have to
02:23 - take one piece at a time and uh this
02:28 - piece of code right here that is
02:30 - automatically generates can be hard to
02:33 - understand um so things such as classes
02:36 - and namespaces are not always easy to
02:40 - comprehend so what we're going to do is
02:42 - we're going to actually ignore most of
02:44 - this and then we're going to focus on
02:46 - writing a a program that will start up
02:49 - and write something and uh then await
02:51 - some user input so for now we are going
02:54 - to ignore the using system the namespace
02:57 - the class and all we are going to be
02:59 - focusing on is putting code inside these
03:02 - two curly brackets so everything inside
03:05 - these two are important for us right now
03:08 - one thing I will quickly go ahead and
03:10 - say is that this right here is what is
03:13 - called a method it's pretty similar to
03:16 - what you know as a function from Unity
03:18 - script or uh using C in unity uh so and
03:23 - this is a
03:25 - method a method and it's called
03:31 - that's pretty much all we need to know
03:33 - about the syntax here is that this right
03:36 - here is the method
03:38 - name what this method actually does is
03:43 - uh it is called when the program
03:49 - starts that means that everything we put
03:51 - inside these two curly brackets will run
03:54 - as soon as we run the
03:56 - program so that's going to be pretty
03:58 - much our entire program program inside
04:00 - these for now cool so right now you can
04:03 - see that we have one line here called
04:05 - console. right line hello world uh and
04:08 - we're just going to go ahead and delete
04:09 - that because we are going to write
04:11 - something on our own so first off we're
04:14 - going to go ahead and write console so
04:16 - now we are writing to the console so we
04:17 - want to access the console class just
04:21 - like we have a class up here we are
04:23 - writing to the console class classes are
04:25 - going to be more clear to you what they
04:27 - do and and what they can be used for
04:29 - later
04:30 - then we're going to do a DOT which means
04:32 - that we will access all of the stuff
04:35 - inside the class pretty much like if you
04:38 - have a uh category called main uh called
04:42 - console and then we accessing all the
04:44 - subcategories all the function and
04:46 - values inside of that
04:49 - class then we want to uh do write line
04:54 - and you can see that it uh suggests what
04:56 - to do uh while we write it that's super
04:59 - uh
05:00 - super awesome and we can also when we
05:03 - have one of the um one of the objects
05:06 - here uh selected you can see that we can
05:09 - uh view a summary of what it does this
05:12 - right here is a method just like our
05:14 - start uh method here our main method
05:17 - that is called when the program starts
05:20 - the console class has a method called
05:22 - right line that will write the curent
05:25 - line Terminator to the standard output
05:27 - stream that's that basically means it
05:30 - will show a line on the console so we're
05:33 - going to go ahead and do that and then
05:36 - we're going to open up to parenthesis
05:39 - and we're going to end with a SII colon
05:41 - so this right here uh is how you call a
05:44 - function whenever you you want to call a
05:46 - function you you do you f the function
05:49 - then you open and close to uh to
05:51 - parentheses and you close it up with a
05:54 - semicolon which is very important cool
05:57 - so everything inside these two
05:59 - parentheses
06:00 - is what we call a parameter and a
06:03 - parameter is a way to pass a
06:07 - value onto the function so we can simply
06:10 - say hey function please do whatever is
06:14 - inside of your curly
06:16 - brackets and remember to use this value
06:20 - along the
06:21 - way and different functions have
06:24 - different parameters some functions
06:27 - don't even have any parameters
06:30 - and some functions like this one can
06:33 - take multiple different kinds of
06:36 - parameters and to view what kinds of
06:39 - parameters that this function will take
06:42 - what we can do is we can say console
06:46 - do right
06:48 - line and here above the summary which
06:52 - says that uh it writes the line and so
06:55 - and so we can also see that it says one
06:59 - of 19 and that's because this function
07:03 - can be uh called in 19 different ways
07:07 - meaning that it will take 19 different
07:09 - parameters that's a lot uh most of the
07:12 - functions that we are going to be
07:13 - creating maybe takes one but it's
07:16 - because that um we both want to be able
07:18 - to maybe write a number to the console
07:21 - or a full-on sentence or just one single
07:24 - character or maybe a number with
07:27 - decimals um so there are there are many
07:30 - different types of values that we want
07:32 - to send to this function and to view the
07:35 - different uh values uh you do shift and
07:39 - on windows with the number pad you do
07:41 - four and six uh to go back and forth but
07:46 - on Mac I'm pretty sure you can just do
07:48 - shift and then the arrow
07:50 - keys uh to browse through so do shift
07:54 - and then I'm on a window so I'm going to
07:56 - do six to go to the right and you can
07:59 - you can see that here's the first um
08:01 - version of this method that we can call
08:04 - and this takes an an oong and you can
08:07 - see what that does in the description
08:09 - but that's not what we want we don't
08:11 - want a long either this is a uint this
08:14 - is a bull and there is a string and
08:18 - basically I haven't told you about
08:20 - variable types and what all these
08:22 - different uh weird names actually mean
08:25 - but just know that a string is uh
08:28 - basically a sentence it's a series of
08:30 - characters it can be one word or a whole
08:32 - sentence so we're just going to use that
08:35 - one so now we know that this function
08:38 - can take a string value so let's
08:41 - actually give it one so again we have
08:43 - the console. right line and inside of
08:46 - these two parentheses we're going to do
08:48 - these two quotation marks because
08:52 - everything inside these two quation
08:54 - marks is a
08:55 - string so we can do hello
09:00 - so I'm a
09:05 - computer
09:08 - I'm sent from the
09:14 - future and now we actually have a full
09:17 - on line that will write to the console
09:20 - so if we go ahead and play theoretically
09:23 - this should work and it will on Mac on
09:26 - Mac this will execute just fine but on
09:29 - Windows it's not going to work and I'm
09:31 - going to show you why so if we go ahead
09:33 - and hit play up here you can see that it
09:36 - very very quick quickly opens up the
09:38 - console and then closes it back down and
09:42 - the reason why is on Mac whenever it's
09:44 - done doing what it should it will just
09:47 - stay open until you close it but on
09:50 - Windows when a console application is
09:52 - done doing what it should it just
09:54 - automatically
09:56 - closes so what we want to do is we want
09:59 - to a wait for the user to do something
10:02 - before the console
10:03 - closes so to do this we're going to read
10:06 - from the user so again we're going to
10:08 - access the console we're going to do
10:11 - dot then we're going to type
10:14 - read and then you can see we have
10:16 - different kinds of read functions we
10:18 - could do read which reads the next
10:21 - character we could do read key which
10:24 - obtains the next character uh or
10:26 - function key pressed by the user or we
10:29 - could do read line which reads a whole
10:31 - line of characters uh which basically is
10:34 - a
10:35 - string uh but in our case we're just
10:37 - going to do read key so whenever the
10:39 - user presses a key on the keyboard uh
10:43 - the application is going to quit and you
10:46 - can go ahead and do this on Mac also
10:48 - it's it's gener good practice to do so
10:51 - go ahead and do console. re key and this
10:54 - is not going to take any parameters so
10:56 - just open and close the parenthesis and
10:59 - end it up with the
11:00 - semicolon now when we go ahead and hit
11:02 - play you can see it opens up a console
11:05 - saying hello I'm a computer I'm sent
11:07 - from the future and once we press
11:10 - something it will close back down so
11:13 - that's pretty much the end of this video
11:15 - I'm going to do something new which is
11:17 - give you a challenge to complete before
11:20 - the next video where I will show you how
11:23 - it's done what I want you to do is I
11:25 - want you to write out your age and your
11:31 - uh
11:31 - name and then I want you to avoid the
11:35 - user input so I want you to wait for
11:38 - some kind of user input and then write
11:41 - out a new line saying what your favorite
11:44 - color and then finally of course await
11:46 - user input so that the console doesn't
11:50 - uh quit immediately I'm going to show
11:52 - you how this is done in the next video
11:55 - also one Nifty trick if you want to do
11:57 - long sentences on multiple lines instead
12:00 - of just making a new console. right line
12:03 - uh method call every time you want to
12:06 - make a new line you can simply use this
12:09 - character right here so you do backs
12:12 - slash uh so reverse back slash this is
12:16 - and then n that will make a new line so
12:21 - you don't have to put spaces around this
12:23 - because then you will just have
12:24 - unnecessary spaces so just input that
12:26 - character which is the reverse backslash
12:29 - and then an n and then we can do uh
12:32 - let's say uh this is a new line so once
12:37 - we hit play on this you can see that it
12:40 - makes a new line cool so that was all I
12:43 - wanted to show for this video thanks for
12:46 - watching and I'll see you in the next
12:57 - one

Cleaned transcript:

thanks for tuning in at braies hello everyone and welcome to the second video in how to program in C it's been such a long time since the last one and and I'm really sorry about that uh but I've been working on something really cool which you might see from the wallpaper here and I've also been traveling a lot but I'm finally back home and ready to start pumping out some videos so this is just a short one uh but we're going to take a look at something really important which is input and output meaning how we read and write from the console uh so that's super cool but first before we get started I quickly want to show you the all new brais developer Forum as you can see we have a fullon answer section uh where you can ask question and uh and and get answers uh we have a discussion section where you can share opinions about stuff and then we have showcase and collaboration so you can show your work and you can collaborate with other developers it's super awesome awesome and uh here it is this is how it looks so you can see that we have uh infinite scrolling uh there are a statistics there are different categories we have some hot topics so you can see what's trending and some top users which you can very much still um get on top of if you uh join quickly so you can simply click here to start a topic or log in you can join with both both Facebook and Twitter or just fill out the boxes and hit join it's very simple and very easy and I very much hope uh that that you will join and and be part of this quickly expanding Community because we really need to fill this up with users also thank you to all the beta users uh out there who've been uh testing and Reporting bugs it's really been helpful so if you see a bug or want a feature please just go ahead and request it I've made a topic for you to do so great so that was the introduction to today's video let's just go ahead and delve right into it so let's open up xamarin studio and once it's opened up here we're just going to load our first console project solution and now we're back to where we left off in the last video cool so what I really want you to understand right now is that coding you can't just understand everything at the same time you have to take one piece at a time and uh this piece of code right here that is automatically generates can be hard to understand um so things such as classes and namespaces are not always easy to comprehend so what we're going to do is we're going to actually ignore most of this and then we're going to focus on writing a a program that will start up and write something and uh then await some user input so for now we are going to ignore the using system the namespace the class and all we are going to be focusing on is putting code inside these two curly brackets so everything inside these two are important for us right now one thing I will quickly go ahead and say is that this right here is what is called a method it's pretty similar to what you know as a function from Unity script or uh using C in unity uh so and this is a method a method and it's called that's pretty much all we need to know about the syntax here is that this right here is the method name what this method actually does is uh it is called when the program starts that means that everything we put inside these two curly brackets will run as soon as we run the program so that's going to be pretty much our entire program program inside these for now cool so right now you can see that we have one line here called console. right line hello world uh and we're just going to go ahead and delete that because we are going to write something on our own so first off we're going to go ahead and write console so now we are writing to the console so we want to access the console class just like we have a class up here we are writing to the console class classes are going to be more clear to you what they do and and what they can be used for later then we're going to do a DOT which means that we will access all of the stuff inside the class pretty much like if you have a uh category called main uh called console and then we accessing all the subcategories all the function and values inside of that class then we want to uh do write line and you can see that it uh suggests what to do uh while we write it that's super uh super awesome and we can also when we have one of the um one of the objects here uh selected you can see that we can uh view a summary of what it does this right here is a method just like our start uh method here our main method that is called when the program starts the console class has a method called right line that will write the curent line Terminator to the standard output stream that's that basically means it will show a line on the console so we're going to go ahead and do that and then we're going to open up to parenthesis and we're going to end with a SII colon so this right here uh is how you call a function whenever you you want to call a function you you do you f the function then you open and close to uh to parentheses and you close it up with a semicolon which is very important cool so everything inside these two parentheses is what we call a parameter and a parameter is a way to pass a value onto the function so we can simply say hey function please do whatever is inside of your curly brackets and remember to use this value along the way and different functions have different parameters some functions don't even have any parameters and some functions like this one can take multiple different kinds of parameters and to view what kinds of parameters that this function will take what we can do is we can say console do right line and here above the summary which says that uh it writes the line and so and so we can also see that it says one of 19 and that's because this function can be uh called in 19 different ways meaning that it will take 19 different parameters that's a lot uh most of the functions that we are going to be creating maybe takes one but it's because that um we both want to be able to maybe write a number to the console or a fullon sentence or just one single character or maybe a number with decimals um so there are there are many different types of values that we want to send to this function and to view the different uh values uh you do shift and on windows with the number pad you do four and six uh to go back and forth but on Mac I'm pretty sure you can just do shift and then the arrow keys uh to browse through so do shift and then I'm on a window so I'm going to do six to go to the right and you can you can see that here's the first um version of this method that we can call and this takes an an oong and you can see what that does in the description but that's not what we want we don't want a long either this is a uint this is a bull and there is a string and basically I haven't told you about variable types and what all these different uh weird names actually mean but just know that a string is uh basically a sentence it's a series of characters it can be one word or a whole sentence so we're just going to use that one so now we know that this function can take a string value so let's actually give it one so again we have the console. right line and inside of these two parentheses we're going to do these two quotation marks because everything inside these two quation marks is a string so we can do hello so I'm a computer I'm sent from the future and now we actually have a full on line that will write to the console so if we go ahead and play theoretically this should work and it will on Mac on Mac this will execute just fine but on Windows it's not going to work and I'm going to show you why so if we go ahead and hit play up here you can see that it very very quick quickly opens up the console and then closes it back down and the reason why is on Mac whenever it's done doing what it should it will just stay open until you close it but on Windows when a console application is done doing what it should it just automatically closes so what we want to do is we want to a wait for the user to do something before the console closes so to do this we're going to read from the user so again we're going to access the console we're going to do dot then we're going to type read and then you can see we have different kinds of read functions we could do read which reads the next character we could do read key which obtains the next character uh or function key pressed by the user or we could do read line which reads a whole line of characters uh which basically is a string uh but in our case we're just going to do read key so whenever the user presses a key on the keyboard uh the application is going to quit and you can go ahead and do this on Mac also it's it's gener good practice to do so go ahead and do console. re key and this is not going to take any parameters so just open and close the parenthesis and end it up with the semicolon now when we go ahead and hit play you can see it opens up a console saying hello I'm a computer I'm sent from the future and once we press something it will close back down so that's pretty much the end of this video I'm going to do something new which is give you a challenge to complete before the next video where I will show you how it's done what I want you to do is I want you to write out your age and your uh name and then I want you to avoid the user input so I want you to wait for some kind of user input and then write out a new line saying what your favorite color and then finally of course await user input so that the console doesn't uh quit immediately I'm going to show you how this is done in the next video also one Nifty trick if you want to do long sentences on multiple lines instead of just making a new console. right line uh method call every time you want to make a new line you can simply use this character right here so you do backs slash uh so reverse back slash this is and then n that will make a new line so you don't have to put spaces around this because then you will just have unnecessary spaces so just input that character which is the reverse backslash and then an n and then we can do uh let's say uh this is a new line so once we hit play on this you can see that it makes a new line cool so that was all I wanted to show for this video thanks for watching and I'll see you in the next one
