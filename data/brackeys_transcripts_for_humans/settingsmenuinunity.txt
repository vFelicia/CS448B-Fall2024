With timestamps:

00:00 - in this video we'll make an in-game
00:01 - options menu using unity he will be able
00:03 - to just stuff like volume resolution
00:05 - graphics quality and full-screen mode
00:07 - also before we get started I want to
00:09 - mention that my friends over at dev doc
00:11 - have created a huge Christmas calendar
00:13 - giveaway they're giving away a crazy
00:15 - amount of unity assets and other game
00:17 - dev goodness all you need to do is visit
00:19 - the link in the description and enter
00:21 - your email to get a daily chance of
00:23 - winning some of these awesome prizes and
00:25 - don't worry you won't be spammed with
00:26 - all sorts of random email so I really
00:28 - encourage you to check that out and
00:29 - without further ado let's get into the
00:31 - video such you can see I've set up some
00:32 - simple UI for our options menu in here I
00:35 - have a resolution drop-down a
00:37 - full-screen toggle a graphics drop-down
00:39 - and a volume slider if you want to learn
00:42 - how to use the UI system to set up
00:43 - something like this
00:44 - I have plenty of videos that you can
00:46 - check out I definitely recommend
00:47 - watching my previous tutorial on setting
00:49 - up a main menu but if you hit play we
00:51 - can see that these options currently
00:53 - don't do anything I can definitely
00:55 - adjust them but there aren't hooked up
00:56 - to our game in any way so that's what
00:58 - we're going to be doing in this video
00:59 - all the sprites that I'm using in this
01:01 - video are from ultimate game UI it's an
01:03 - amazing pack that's free on the asset
01:05 - store so you should definitely check it
01:06 - out as you can see they have a lot of
01:08 - stuff for you to easily make
01:09 - cool-looking menus but you can of course
01:11 - use any graphics that you'd like so
01:13 - let's begin by configuring our volume
01:15 - slider you can see that I'm using the
01:17 - ordinary slider component
01:19 - now let's hook this up to a script we
01:21 - can place the script any way we want
01:22 - I'm just gonna select my canvas I'm
01:24 - gonna hit add component and let's call
01:26 - it the settings menu
01:27 - it's like c-sharp and hit create an ad
01:29 - when they double click it to open it up
01:31 - in visual studio and the first thing
01:32 - that I want to do is delete our two
01:34 - methods and instead create our own one
01:36 - we'll make sure to mark it as public so
01:38 - that we can trigger it from a slider
01:40 - we'll make it void because we don't want
01:42 - to return anything and let's call it set
01:44 - volume well then take in a value from
01:47 - our slider this is gonna be of type
01:48 - float because we want a value with
01:50 - decimal places and let's just call it
01:52 - volume now we can easily set it up so
01:54 - that whenever we move our slider this
01:56 - function will get called and unity will
01:58 - then feed in the current value of the
02:00 - slider as volume just to show you this
02:02 - happening let's go ahead and write debug
02:04 - deadlock and let's display the volume
02:06 - variable if you now save this go into
02:08 - unity select our volume slider and
02:10 - scroll down to where it says on value
02:12 - chain
02:12 - changed this is an event that will
02:14 - trigger whenever our slider changes we
02:16 - can then add an action to this event by
02:18 - hitting the plus sign let's then
02:20 - dragging the object that our script is
02:21 - sitting on that's in our case the canvas
02:24 - we now view all the components on this
02:25 - canvas I'm gonna go into our settings
02:27 - menu script and you can see that our
02:29 - functions set volume now appears here it
02:31 - also says that it takes in a float but
02:34 - instead of selecting it from the list
02:35 - down here let's go to the top where it
02:38 - says dynamic float and here it also
02:41 - appears the reason why our function gets
02:43 - put to the top is that unity recognizes
02:45 - that our function takes in a float value
02:47 - and so unity will automatically input
02:49 - the value of our slider into that float
02:51 - so let's select the method at the top
02:53 - here and my slider is set to go between
02:55 - negative 80 and 0 I'll show you why in
02:58 - just a second but we should now see that
03:00 - if we hit play and are start to drag on
03:03 - this slider a bunch of messages will
03:05 - appear in our console and that as I
03:07 - decrease the slider the value that they
03:09 - show gets reduced so if I drag it all
03:12 - the way to the bottom we can see it says
03:14 - negative 80 and if I drag it all the way
03:16 - to the top it says zero awesome now all
03:18 - we need to do is use this value to
03:20 - control the volume of our game to do
03:22 - that we'll go window and we'll open up
03:24 - the audio mixer I'm just gonna dock this
03:26 - by the game view and you might already
03:28 - have added a mixer to your game if not
03:31 - we can go and hit the plus sign this
03:33 - will create a mixer in our project panel
03:34 - I'm just gonna rename this to main mixer
03:37 - and if we can create different channels
03:39 - for the different layers of audio in our
03:40 - game we could have one for music one for
03:43 - game plays sounds and so on but we just
03:45 - want to adjust the volume of our master
03:47 - slider we do that by simply dragging on
03:49 - it in here but how do we control this
03:51 - through script well whenever we are
03:53 - working with the audio mixer we have the
03:55 - possibility of exposing parameters this
03:57 - means that we make values editable
03:59 - through scripts in our case we want to
04:01 - expose our volume parameter so I'm gonna
04:03 - select the master group here go to the
04:06 - right where it says volume I'm gonna
04:08 - right click here and hit expose volume
04:11 - of master to script now at the top where
04:13 - it says exposed parameters if we click
04:15 - here we should see a new parameter this
04:18 - is a parameter for the volume and
04:19 - currently it's just called my exposed
04:21 - Prahran let's right-click on this hit
04:23 - rename let's just call it something like
04:25 - volume and the reason
04:26 - my choice my slider to go from zero to
04:29 - negative ad is that this is what our
04:31 - master does it starts off at zero and we
04:33 - then decrease it all the way down to
04:35 - negative eighty so if we now open up our
04:37 - script instead of just showing our
04:38 - volume in the console let's change our
04:40 - volume on the mixer to do that we need a
04:42 - reference to our audio mixer so we'll
04:44 - create a public and to reference an
04:46 - audio mixer we need to be using the
04:47 - Unity engine audio system so at the top
04:50 - here we'll write using Unity engine
04:52 - audio and now we can create a public
04:55 - audio mixer we'll call it
04:57 - audio mixer and then inside of our set
04:58 - volume function will go audio mixer dot
05:01 - set float and the float that we want to
05:03 - set is our volume make sure you spell
05:06 - this in the exact same way that you did
05:08 - when renaming the parameter and we'll
05:10 - then set a value for this parameter in
05:12 - our case we just want to set it to
05:14 - volume so whatever the value of our
05:16 - slider is if we now save this and go
05:18 - into unity we can dock our audio mixer
05:20 - to the right of our game view we can
05:22 - then select our canvas and we now have
05:24 - an empty slot for our audio mixer this
05:26 - is where we'll drag in our main mixer
05:28 - and if we now hit play and drag on a
05:30 - slider we can see the value updating for
05:32 - our master as well awesome so next we
05:35 - want to change the graphics quality of
05:37 - our game well we want to be doing this
05:39 - using our graphics drop-down this is
05:41 - just a standard UI drop-down and I've
05:43 - simply gone in and changed the options
05:45 - to low medium and high you can have as
05:48 - many options as you want here the only
05:50 - thing that we need to make sure is that
05:52 - they match with the graphic settings in
05:54 - unity so if we go edit project settings
05:56 - quality we need to have the same amount
05:59 - of quality levels as you can see I have
06:01 - a high a medium and a low and I'm just
06:03 - going to default to high here now let's
06:05 - go to our canvas and open up our
06:07 - settings menu and we're now ready to add
06:09 - another function again we want to make
06:11 - it public so that we can call it from
06:13 - our drop-down we'll write void let's
06:15 - name the method something like set
06:17 - quality will then take in an integer
06:20 - this is going to be the index of the
06:22 - element that we've chosen so if we
06:23 - select low this is going to be zero
06:26 - medium this is going to be one and high
06:28 - it's going to be two let's call this
06:30 - value something like quality index and
06:32 - this part is actually insanely easy all
06:36 - we need to do is access our quality
06:38 - settings and here we can set
06:40 - the quality level and this method simply
06:42 - takes in our index so we'll input our
06:44 - quality index and that should actually
06:47 - be it and all we need to do is hook up
06:49 - our graphics drop down to call this
06:51 - method to do that we'll scroll down to
06:54 - where it says on value changed again
06:56 - this is an event that will be triggered
06:57 - whenever we change our drop-down let's
06:59 - add an action to this event we want our
07:01 - action to access our canvas object
07:03 - because on a canvas object we have our
07:05 - settings menu and again you'll see our
07:07 - function appears in two places both in
07:09 - the bottom list here which says set
07:11 - quality green seed takes in an integer
07:13 - but also undue dynamic int and this is
07:16 - of course the one that we want to choose
07:18 - because just like with our slider unity
07:20 - will now automatically set our quality
07:22 - index to the index of the element that
07:24 - we chose and so we should see that if we
07:27 - hit play and let's go under edit project
07:29 - settings quality so we can see this
07:31 - updating in real time we then use our
07:33 - drop-down and let's try and change to
07:36 - medium first we can see it changes to
07:38 - medium over here if we then try and
07:40 - select low again we can see the level
07:42 - changing and we also now start to see
07:43 - that things don't look as sharp as they
07:45 - did before let's hurry up and bump that
07:47 - back to high awesome
07:49 - the next thing that we want to hook up
07:50 - is our full screen toggle this is just a
07:52 - simple toggle UI element again let's go
07:55 - to our canvas and open up our settings
07:56 - menu for this we want to create yet
07:58 - another method again it's going to be a
08:00 - public void we called it set full screen
08:03 - this time it's going to take in a
08:05 - boolean because our target is either
08:07 - going to be true or false let's just
08:09 - call it is full screen and this is
08:12 - actually also really simple to change
08:14 - all we need to do is go screen dot full
08:17 - screen and set it equal to our is full
08:20 - screen variable now again we need to
08:22 - hook this up to our UI so we'll go into
08:24 - unity we'll select our full screen
08:25 - toggle at the bottom here where it says
08:27 - on value changed we want to add an
08:29 - action so whenever we mess with our
08:31 - toggle we want something to happen here
08:33 - we want to reference our canvas where
08:35 - our script is we then want to go under
08:37 - our script and again at the top here
08:38 - under dynamic Bowl we should now see our
08:40 - set full screen method and just like
08:43 - with our drop-down and with our slider
08:44 - unity will automatically set the value
08:47 - of our is full screen variable to
08:49 - whatever the value of our toggle is
08:51 - which means that if we just go ahead and
08:53 - here
08:53 - play we can now switch in and out of
08:56 - full screen of course this isn't really
08:58 - visible but that's only because we are
09:00 - playing inside of the editor we can
09:02 - simply build our game in order to see
09:04 - this take effect but before we do that
09:06 - there's a final thing that we want to
09:08 - add I'm of course talking about our
09:09 - resolution drop down again this is just
09:12 - a simple drop down I've just put in
09:13 - three placeholder options these really
09:15 - aren't important and you can simply
09:17 - remove them if you want the reason why
09:18 - is that we don't know beforehand what
09:20 - options we have available this is
09:22 - something that unity will figure out for
09:24 - us because it's going to completely
09:26 - depend on what computer your game will
09:28 - run on so before we start changing the
09:29 - resolution of our game we need to make
09:31 - sure that we have the correct options to
09:34 - do that we'll again select our canvas
09:35 - and open up our settings menu and at the
09:37 - top here will now create a void start
09:40 - method this is of course called as soon
09:42 - as I seen loads and here we want to
09:43 - gather some information about what
09:45 - resolutions we have at our disposal we
09:47 - can get an array which basically just
09:49 - means a list of all the resolutions by
09:52 - going screen dot resolutions and let's
09:54 - go ahead and store these in a variable
09:55 - so we can access them later
09:57 - to do that we'll create a variable at
09:58 - the top called resolution we want to
10:01 - turn this into an array so we'll mark it
10:03 - with two square brackets let's call it
10:05 - resolutions then in the start method
10:07 - we'll set our resolutions variable equal
10:10 - to screen resolutions we now want to go
10:12 - through and add each of the resolutions
10:14 - to our drop-down to do that we need a
10:16 - reference to our drop-down component and
10:18 - because our drop-down is a UI element we
10:20 - need to be using unity engine don't you
10:22 - why let's go to the top here and add a
10:24 - line saying using unity engine dot UI
10:27 - let's then create a variable that will
10:30 - reference our UI element so public
10:31 - drop-down and let's call it resolution
10:34 - drop-down then right after we get a list
10:38 - of all the resolutions we want to clear
10:40 - out the default options that we have on
10:42 - our drop-down to make sure that we start
10:43 - with a clean slate
10:44 - to do that we access our resolution
10:46 - drop-down and we call the function
10:48 - called
10:48 - clear options and now we're ready to add
10:51 - some options to this will be using
10:53 - resolution drop-down dot add options and
10:56 - of course you might think to just put in
10:58 - our resolutions here and call it a day
11:00 - but unfortunately the add options takes
11:03 - in a list of strings and not an array of
11:06 - resolutions
11:07 - so this won't work we have to turn our
11:09 - array of resolutions into a list of
11:11 - nicely formatted strings to do this
11:14 - let's start by creating a list of
11:16 - strings
11:17 - notice how I'm using a different syntax
11:19 - for creating this list that's because
11:21 - this is in fact the list and not an
11:23 - array the only difference is that an
11:25 - array has a fixed size but the size of a
11:27 - list can be changed now we'll give our
11:30 - list a name we'll just call it options
11:32 - and we'll set it equal to a new list of
11:34 - strengths we then loop through each
11:37 - element in our resolutions array so for
11:39 - in I ice less then resolutions dot
11:43 - length I plus plus and for each element
11:45 - we want to create a string called our
11:48 - option and here we could displayed
11:49 - something like the width of our
11:51 - resolution and then plus an X so x and
11:56 - then the height of our resolution so to
11:58 - get the width of our resolution we take
12:00 - the resolution that we're currently
12:01 - looking at which is the eighth element
12:03 - of resolutions and then we can access
12:06 - start with and we do the same thing with
12:08 - height so resolutions and we give it the
12:10 - index I John height and we can then
12:13 - write options dot add to add an element
12:16 - to our options list and here we simply
12:19 - give it the option string that we just
12:21 - created and finally when we're done
12:22 - looping through all the elements will
12:24 - tell a resolution drop down to add some
12:26 - options the options that we want to add
12:28 - is our options list so now just to go
12:30 - through this we clear out all the
12:32 - options in our resolution drop-down we
12:34 - create a list of strings which is going
12:36 - to be our options we then loop through
12:38 - each element in our resolutions array
12:40 - and for each of them we create a nicely
12:42 - formatted string that displays our
12:44 - resolution and we add it to our options
12:46 - list when we're done looping through
12:48 - we'll add our options list to our
12:50 - resolution drop-down if we save this now
12:52 - and go into unity we should get an empty
12:55 - spot here for a resolution drop down
12:56 - here we of course want to drag in or
12:58 - drop down and if we now hit play we
13:01 - should see that we have all the
13:02 - available resolutions in our drop-down
13:04 - the only thing that it doesn't do is
13:06 - select the correct one right off the bat
13:08 - to change this that's going to our
13:09 - script right before we start looping
13:11 - let's create an integer called our
13:13 - current resolution index let's just
13:16 - afford it to zero we'll then go into a
13:18 - for loop and we'll check if
13:20 - allusions to the ith element so the
13:22 - resolution that we're currently looking
13:24 - at is equal to screen dot current
13:27 - resolution so if the current resolution
13:29 - we are looking at is equal to our
13:31 - resolution well then we want to go ahead
13:33 - and set our current resolution index
13:35 - equal to I it's just one slight problem
13:37 - with this and this is extremely annoying
13:40 - and that is that you can't compare two
13:42 - resolution types don't ask me why this
13:44 - isn't in here so we actually have to
13:46 - compare first the width and then the
13:48 - height of both resolutions so
13:50 - resolutions to eye width is equal to
13:53 - screen their current resolution dot
13:54 - width and we'll put in two ands here
13:58 - resolutions to I dot height is equal to
14:02 - screen dot current resolution dot height
14:05 - so now we compare both the width and the
14:07 - height of our resolutions and if they
14:09 - both match up well then we're looking at
14:11 - the correct resolution so we store the
14:13 - index of that and then after we add all
14:15 - the options we can go resolution drop
14:18 - down dot value and set it equal to our
14:21 - current resolution index as well as
14:23 - curve resolution drop down dot refresh
14:25 - shown value in order to actually display
14:28 - it now I know this code doesn't feel
14:30 - pretty but updating resolutions in unity
14:32 - has always been a bit of a hassle but
14:34 - that's alright because this should
14:35 - actually work now so if we save this go
14:37 - into unity and hit play you can see that
14:39 - it automatically sets itself to full HD
14:42 - which I know is indeed the default
14:44 - resolution for my system then we can of
14:46 - course go in here and change it but this
14:48 - doesn't update fortunately updating your
14:50 - resolution is much much easier all we
14:52 - have to do here is create another
14:54 - function just like we did with all our
14:56 - other properties we create a public void
14:59 - set resolution this is going to take in
15:02 - a integer called our resolution index
15:05 - this works in the exact same way that it
15:07 - did for asset quality drop down now
15:10 - inside of this function will write
15:11 - screen dot set resolution now this takes
15:15 - in a width and a height this was a
15:17 - boolean saying whether or not we want
15:18 - the game to be displayed in full screen
15:20 - to get the width and the height we need
15:22 - to simply use a resolution index to find
15:24 - the correct element in our resolutions
15:26 - array so we'll create a resolution
15:28 - variable here let's call it resolution
15:31 - we'll set it equal to resolutions and as
15:33 - the index will
15:34 - our resolution index it's now we've
15:37 - found the resolution that we want to
15:38 - select in our array and we then simply
15:40 - use resolution dart width as well as
15:42 - resolution dart height and as for the
15:44 - fullscreen parameter well let's just use
15:46 - screened at fullscreen just like we did
15:49 - down here so we'll input screen dot
15:51 - fullscreen and wallah if you now save
15:53 - this go into unity select our resolution
15:56 - drop-down scroll to the bottom let's add
15:58 - a new action to our on value change to
16:00 - vend that's dragging our canvas go under
16:02 - our settings menu and choose set
16:04 - resolution as the function we then save
16:07 - our scene go file build settings we'll
16:09 - drag in our scene to the scenes and
16:11 - build
16:11 - let's hit build and run I'm gonna create
16:13 - a separate folder for this and let's
16:15 - name it test build now unity is going to
16:17 - start building our game it's going to
16:19 - open up in full screen and we should now
16:21 - see that we can adjust the resolution of
16:23 - our game truths whether or not we want
16:25 - it to be full screen we change the
16:27 - graphics quality and adjust the volume
16:29 - awesome finally now that we have our
16:31 - settings menu we can go edit project
16:33 - settings go under player and here under
16:36 - standalone player options we can make
16:38 - sure to set display resolution dialog to
16:40 - disabled so that we don't get that
16:42 - annoying default settings window before
16:44 - we play the game and that should be it
16:46 - yay that's pretty much it for this video
16:48 - again if you haven't checked out the
16:50 - Christmas calendar giveaway that's a
16:51 - link for that in the description the
16:53 - deaf dog guys are super nice and
16:54 - definitely deserve a big thanks for
16:56 - setting up this cool event well in that
16:58 - thanks watching and I will see you in
17:00 - the next video thanks all of the awesome
17:01 - patreon supporters who donated in
17:03 - November and especially thanks dude oh
17:05 - man I mean arou see hands off tune Sybok
17:07 - Mamiko Cabral Dan Evans John Perot guard
17:10 - Superman the great James P Thomas Wally
17:12 - Jason the Tito dark heaps Kirk Chaisson
17:14 - Murphy Rob fern James Rogers Alex
17:17 - rickets key man Alice Oh March I'm
17:19 - Robert boon and Peter Locke

Cleaned transcript:

in this video we'll make an ingame options menu using unity he will be able to just stuff like volume resolution graphics quality and fullscreen mode also before we get started I want to mention that my friends over at dev doc have created a huge Christmas calendar giveaway they're giving away a crazy amount of unity assets and other game dev goodness all you need to do is visit the link in the description and enter your email to get a daily chance of winning some of these awesome prizes and don't worry you won't be spammed with all sorts of random email so I really encourage you to check that out and without further ado let's get into the video such you can see I've set up some simple UI for our options menu in here I have a resolution dropdown a fullscreen toggle a graphics dropdown and a volume slider if you want to learn how to use the UI system to set up something like this I have plenty of videos that you can check out I definitely recommend watching my previous tutorial on setting up a main menu but if you hit play we can see that these options currently don't do anything I can definitely adjust them but there aren't hooked up to our game in any way so that's what we're going to be doing in this video all the sprites that I'm using in this video are from ultimate game UI it's an amazing pack that's free on the asset store so you should definitely check it out as you can see they have a lot of stuff for you to easily make coollooking menus but you can of course use any graphics that you'd like so let's begin by configuring our volume slider you can see that I'm using the ordinary slider component now let's hook this up to a script we can place the script any way we want I'm just gonna select my canvas I'm gonna hit add component and let's call it the settings menu it's like csharp and hit create an ad when they double click it to open it up in visual studio and the first thing that I want to do is delete our two methods and instead create our own one we'll make sure to mark it as public so that we can trigger it from a slider we'll make it void because we don't want to return anything and let's call it set volume well then take in a value from our slider this is gonna be of type float because we want a value with decimal places and let's just call it volume now we can easily set it up so that whenever we move our slider this function will get called and unity will then feed in the current value of the slider as volume just to show you this happening let's go ahead and write debug deadlock and let's display the volume variable if you now save this go into unity select our volume slider and scroll down to where it says on value chain changed this is an event that will trigger whenever our slider changes we can then add an action to this event by hitting the plus sign let's then dragging the object that our script is sitting on that's in our case the canvas we now view all the components on this canvas I'm gonna go into our settings menu script and you can see that our functions set volume now appears here it also says that it takes in a float but instead of selecting it from the list down here let's go to the top where it says dynamic float and here it also appears the reason why our function gets put to the top is that unity recognizes that our function takes in a float value and so unity will automatically input the value of our slider into that float so let's select the method at the top here and my slider is set to go between negative 80 and 0 I'll show you why in just a second but we should now see that if we hit play and are start to drag on this slider a bunch of messages will appear in our console and that as I decrease the slider the value that they show gets reduced so if I drag it all the way to the bottom we can see it says negative 80 and if I drag it all the way to the top it says zero awesome now all we need to do is use this value to control the volume of our game to do that we'll go window and we'll open up the audio mixer I'm just gonna dock this by the game view and you might already have added a mixer to your game if not we can go and hit the plus sign this will create a mixer in our project panel I'm just gonna rename this to main mixer and if we can create different channels for the different layers of audio in our game we could have one for music one for game plays sounds and so on but we just want to adjust the volume of our master slider we do that by simply dragging on it in here but how do we control this through script well whenever we are working with the audio mixer we have the possibility of exposing parameters this means that we make values editable through scripts in our case we want to expose our volume parameter so I'm gonna select the master group here go to the right where it says volume I'm gonna right click here and hit expose volume of master to script now at the top where it says exposed parameters if we click here we should see a new parameter this is a parameter for the volume and currently it's just called my exposed Prahran let's rightclick on this hit rename let's just call it something like volume and the reason my choice my slider to go from zero to negative ad is that this is what our master does it starts off at zero and we then decrease it all the way down to negative eighty so if we now open up our script instead of just showing our volume in the console let's change our volume on the mixer to do that we need a reference to our audio mixer so we'll create a public and to reference an audio mixer we need to be using the Unity engine audio system so at the top here we'll write using Unity engine audio and now we can create a public audio mixer we'll call it audio mixer and then inside of our set volume function will go audio mixer dot set float and the float that we want to set is our volume make sure you spell this in the exact same way that you did when renaming the parameter and we'll then set a value for this parameter in our case we just want to set it to volume so whatever the value of our slider is if we now save this and go into unity we can dock our audio mixer to the right of our game view we can then select our canvas and we now have an empty slot for our audio mixer this is where we'll drag in our main mixer and if we now hit play and drag on a slider we can see the value updating for our master as well awesome so next we want to change the graphics quality of our game well we want to be doing this using our graphics dropdown this is just a standard UI dropdown and I've simply gone in and changed the options to low medium and high you can have as many options as you want here the only thing that we need to make sure is that they match with the graphic settings in unity so if we go edit project settings quality we need to have the same amount of quality levels as you can see I have a high a medium and a low and I'm just going to default to high here now let's go to our canvas and open up our settings menu and we're now ready to add another function again we want to make it public so that we can call it from our dropdown we'll write void let's name the method something like set quality will then take in an integer this is going to be the index of the element that we've chosen so if we select low this is going to be zero medium this is going to be one and high it's going to be two let's call this value something like quality index and this part is actually insanely easy all we need to do is access our quality settings and here we can set the quality level and this method simply takes in our index so we'll input our quality index and that should actually be it and all we need to do is hook up our graphics drop down to call this method to do that we'll scroll down to where it says on value changed again this is an event that will be triggered whenever we change our dropdown let's add an action to this event we want our action to access our canvas object because on a canvas object we have our settings menu and again you'll see our function appears in two places both in the bottom list here which says set quality green seed takes in an integer but also undue dynamic int and this is of course the one that we want to choose because just like with our slider unity will now automatically set our quality index to the index of the element that we chose and so we should see that if we hit play and let's go under edit project settings quality so we can see this updating in real time we then use our dropdown and let's try and change to medium first we can see it changes to medium over here if we then try and select low again we can see the level changing and we also now start to see that things don't look as sharp as they did before let's hurry up and bump that back to high awesome the next thing that we want to hook up is our full screen toggle this is just a simple toggle UI element again let's go to our canvas and open up our settings menu for this we want to create yet another method again it's going to be a public void we called it set full screen this time it's going to take in a boolean because our target is either going to be true or false let's just call it is full screen and this is actually also really simple to change all we need to do is go screen dot full screen and set it equal to our is full screen variable now again we need to hook this up to our UI so we'll go into unity we'll select our full screen toggle at the bottom here where it says on value changed we want to add an action so whenever we mess with our toggle we want something to happen here we want to reference our canvas where our script is we then want to go under our script and again at the top here under dynamic Bowl we should now see our set full screen method and just like with our dropdown and with our slider unity will automatically set the value of our is full screen variable to whatever the value of our toggle is which means that if we just go ahead and here play we can now switch in and out of full screen of course this isn't really visible but that's only because we are playing inside of the editor we can simply build our game in order to see this take effect but before we do that there's a final thing that we want to add I'm of course talking about our resolution drop down again this is just a simple drop down I've just put in three placeholder options these really aren't important and you can simply remove them if you want the reason why is that we don't know beforehand what options we have available this is something that unity will figure out for us because it's going to completely depend on what computer your game will run on so before we start changing the resolution of our game we need to make sure that we have the correct options to do that we'll again select our canvas and open up our settings menu and at the top here will now create a void start method this is of course called as soon as I seen loads and here we want to gather some information about what resolutions we have at our disposal we can get an array which basically just means a list of all the resolutions by going screen dot resolutions and let's go ahead and store these in a variable so we can access them later to do that we'll create a variable at the top called resolution we want to turn this into an array so we'll mark it with two square brackets let's call it resolutions then in the start method we'll set our resolutions variable equal to screen resolutions we now want to go through and add each of the resolutions to our dropdown to do that we need a reference to our dropdown component and because our dropdown is a UI element we need to be using unity engine don't you why let's go to the top here and add a line saying using unity engine dot UI let's then create a variable that will reference our UI element so public dropdown and let's call it resolution dropdown then right after we get a list of all the resolutions we want to clear out the default options that we have on our dropdown to make sure that we start with a clean slate to do that we access our resolution dropdown and we call the function called clear options and now we're ready to add some options to this will be using resolution dropdown dot add options and of course you might think to just put in our resolutions here and call it a day but unfortunately the add options takes in a list of strings and not an array of resolutions so this won't work we have to turn our array of resolutions into a list of nicely formatted strings to do this let's start by creating a list of strings notice how I'm using a different syntax for creating this list that's because this is in fact the list and not an array the only difference is that an array has a fixed size but the size of a list can be changed now we'll give our list a name we'll just call it options and we'll set it equal to a new list of strengths we then loop through each element in our resolutions array so for in I ice less then resolutions dot length I plus plus and for each element we want to create a string called our option and here we could displayed something like the width of our resolution and then plus an X so x and then the height of our resolution so to get the width of our resolution we take the resolution that we're currently looking at which is the eighth element of resolutions and then we can access start with and we do the same thing with height so resolutions and we give it the index I John height and we can then write options dot add to add an element to our options list and here we simply give it the option string that we just created and finally when we're done looping through all the elements will tell a resolution drop down to add some options the options that we want to add is our options list so now just to go through this we clear out all the options in our resolution dropdown we create a list of strings which is going to be our options we then loop through each element in our resolutions array and for each of them we create a nicely formatted string that displays our resolution and we add it to our options list when we're done looping through we'll add our options list to our resolution dropdown if we save this now and go into unity we should get an empty spot here for a resolution drop down here we of course want to drag in or drop down and if we now hit play we should see that we have all the available resolutions in our dropdown the only thing that it doesn't do is select the correct one right off the bat to change this that's going to our script right before we start looping let's create an integer called our current resolution index let's just afford it to zero we'll then go into a for loop and we'll check if allusions to the ith element so the resolution that we're currently looking at is equal to screen dot current resolution so if the current resolution we are looking at is equal to our resolution well then we want to go ahead and set our current resolution index equal to I it's just one slight problem with this and this is extremely annoying and that is that you can't compare two resolution types don't ask me why this isn't in here so we actually have to compare first the width and then the height of both resolutions so resolutions to eye width is equal to screen their current resolution dot width and we'll put in two ands here resolutions to I dot height is equal to screen dot current resolution dot height so now we compare both the width and the height of our resolutions and if they both match up well then we're looking at the correct resolution so we store the index of that and then after we add all the options we can go resolution drop down dot value and set it equal to our current resolution index as well as curve resolution drop down dot refresh shown value in order to actually display it now I know this code doesn't feel pretty but updating resolutions in unity has always been a bit of a hassle but that's alright because this should actually work now so if we save this go into unity and hit play you can see that it automatically sets itself to full HD which I know is indeed the default resolution for my system then we can of course go in here and change it but this doesn't update fortunately updating your resolution is much much easier all we have to do here is create another function just like we did with all our other properties we create a public void set resolution this is going to take in a integer called our resolution index this works in the exact same way that it did for asset quality drop down now inside of this function will write screen dot set resolution now this takes in a width and a height this was a boolean saying whether or not we want the game to be displayed in full screen to get the width and the height we need to simply use a resolution index to find the correct element in our resolutions array so we'll create a resolution variable here let's call it resolution we'll set it equal to resolutions and as the index will our resolution index it's now we've found the resolution that we want to select in our array and we then simply use resolution dart width as well as resolution dart height and as for the fullscreen parameter well let's just use screened at fullscreen just like we did down here so we'll input screen dot fullscreen and wallah if you now save this go into unity select our resolution dropdown scroll to the bottom let's add a new action to our on value change to vend that's dragging our canvas go under our settings menu and choose set resolution as the function we then save our scene go file build settings we'll drag in our scene to the scenes and build let's hit build and run I'm gonna create a separate folder for this and let's name it test build now unity is going to start building our game it's going to open up in full screen and we should now see that we can adjust the resolution of our game truths whether or not we want it to be full screen we change the graphics quality and adjust the volume awesome finally now that we have our settings menu we can go edit project settings go under player and here under standalone player options we can make sure to set display resolution dialog to disabled so that we don't get that annoying default settings window before we play the game and that should be it yay that's pretty much it for this video again if you haven't checked out the Christmas calendar giveaway that's a link for that in the description the deaf dog guys are super nice and definitely deserve a big thanks for setting up this cool event well in that thanks watching and I will see you in the next video thanks all of the awesome patreon supporters who donated in November and especially thanks dude oh man I mean arou see hands off tune Sybok Mamiko Cabral Dan Evans John Perot guard Superman the great James P Thomas Wally Jason the Tito dark heaps Kirk Chaisson Murphy Rob fern James Rogers Alex rickets key man Alice Oh March I'm Robert boon and Peter Locke
