With timestamps:

00:00 - thanks for tuning in at
00:02 - braies hello everyone and welcome to
00:04 - video number 23 in the how to make a 2d
00:07 - platformer course at this point we have
00:09 - a lot of subsystems working in our game
00:12 - but we still need to Define when the
00:14 - player loses so we kind of need to
00:17 - introduce this idea of a game over state
00:21 - so that's what we are going to do in
00:22 - this video also if you have any
00:24 - questions go to farm.
00:26 - bre.com so let's open up
00:28 - Unity as you can see I've pretty much
00:31 - left the project as is I've simply uh uh
00:35 - organized it that bit uh I took some uh
00:38 - scripts and plac them in the scripts
00:39 - folder and uh some stuff under the
00:41 - animation folder as well I also notice
00:44 - that we have two additive materials this
00:46 - one is for the muscle flash so I'll call
00:48 - this additive muscle Flash and then we
00:52 - have this additive uh generic particle
00:54 - one so I'll call this additive
00:58 - particle and drag that into into the
01:00 - materials folder as well um so I think
01:04 - that's pretty much all we need to do we
01:06 - might also go ahead and make an audio
01:09 - folder where we can drag in the respond
01:12 - countdown I don't think we are going to
01:13 - be needing a folder for uh physics
01:16 - materials all right so let's just save
01:18 - that you will also notice that uh I have
01:21 - updated my version of unity to Unity
01:24 - 5.3 this introduces a bunch of cool
01:27 - features one of the most exciting on is
01:30 - having uh multiple scenes um or grouping
01:34 - scenes together so you can see multiple
01:36 - scenes in the hierarchy here and load
01:38 - scenes easily and manage scenes at
01:41 - runtime so that's a super cool feature
01:43 - and that allows you to do a lot of
01:45 - streaming assets and uh stuff like that
01:48 - but that's not something we're going to
01:49 - cover in this video so basically what I
01:53 - want to do is uh give our player a
01:56 - certain amount of lives because right
01:58 - now when we die
02:00 - if I play the game here and jump down
02:03 - the player simply
02:06 - respawns and that's just fine however I
02:09 - want to kind of uh introduce a a bigger
02:14 - penalty for uh dying and therefore I
02:16 - think we should have maybe two or three
02:18 - lives and uh when we don't have any more
02:21 - lives we need to kind of start over and
02:23 - begin uh back at Wave 1 so in order to
02:27 - do this I think we should jump into our
02:29 - GM object here and begin coding this
02:32 - idea of player
02:36 - lives so let's open this up in visual
02:38 - studio and you can see that uh we have
02:41 - this uh set up so that we have a
02:44 - instance of our game master and uh
02:46 - that's of course a static one so we can
02:48 - access it through the type and then we
02:51 - have a bunch of uh public variables
02:54 - non-static variables that sit on that
02:56 - instance so that we can easily uh
02:59 - integrate cre it with the unity
03:01 - inspector but this idea of player lives
03:04 - is something that I want to sync uh
03:07 - across and and make very easy to access
03:10 - and therefore I'm going to make it
03:12 - static so I'm going to make a public
03:15 - static
03:17 - integer and uh actually let's make a
03:20 - private one and then let's make an
03:22 - accessor so we'll have a private static
03:25 - int and uh this is going to be a player
03:31 - um I really want to think this through
03:33 - now uh so yeah so this is going to be
03:40 - remaining
03:42 - lives and it's going to start at uh some
03:47 - variable I think we're just going to
03:48 - start it off at three and then we're
03:51 - going to have a
03:53 - public static integer and we'll
03:56 - capitalize this and call it remaining l
03:59 - lives and this is simply going to be a
04:02 - property so if we want to get the
04:04 - variable remaining lives
04:06 - here uh we will simply uh say get return
04:11 - underscore remaining lives this way we
04:14 - can only change the lives remaining
04:16 - inside of the uh GM uh type or class but
04:22 - uh we can get it uh by simply referring
04:24 - to the uh variable
04:27 - type so that's pretty awesome
04:30 - uh then what we can do is uh every time
04:32 - we uh call this uh Kill player method
04:36 - you can see that we currently just
04:37 - destroy the player object and then we uh
04:40 - start this respawn player uh Co routine
04:42 - on the instance of the game master
04:45 - object and uh before we do this we can
04:47 - simply decrement the amount of player
04:49 - lives so we can say player
04:52 - lives or remaining lives it
04:56 - was uh here minus equals
05:00 - one or you can just say minus minus
05:03 - that's up to you I like to write it this
05:06 - way and uh then we can check
05:10 - if underscore remaining
05:14 - lives and uh we want to check if this is
05:17 - less than or equal to zero well then we
05:20 - don't want to respawn the player then we
05:22 - want to end the game so uh this here is
05:26 - going to be an lse statement so we'll
05:29 - just pop that up
05:31 - there and make a tab and here we're
05:34 - going to call some kind of endgame
05:37 - method and I think we are going to make
05:38 - this uh local so we can set up some
05:40 - references uh I don't know whether or
05:43 - not this will be an i
05:45 - numerator um I think we'll just start
05:48 - out by making it a normal uh method and
05:51 - then later we can always add the
05:53 - functionality so uh for now it's going
05:55 - to be a public word and this is going to
05:57 - be end game
06:01 - there we go and here we can simply call
06:04 - gm.
06:05 - ingame like that and it should be fairly
06:08 - easy and in here we'll simply uh make a
06:11 - debug.log statement saying that um uh
06:16 - simply saying game
06:19 - over all right so let's try this out uh
06:23 - and see if it works so I'm going to hit
06:25 - play
06:28 - here you can see that it loads in here
06:30 - and I'm going to jump down three times
06:32 - that was the first
06:35 - one this is going to be the second
06:40 - one and the third time here it says game
06:44 - over and notice that we don't hear the
06:47 - respawn sound and all that so we have
06:49 - this custom uh case that we can fill out
06:51 - with uh some uis some sound effects all
06:54 - that so that's great I also kind of want
06:57 - to have a counter here for how many
06:59 - lives that we are currently at we could
07:02 - make this using some Heights and that
07:04 - would be pretty cool but for now let's
07:06 - just do some text we can always change
07:08 - this later there's no reason to spend
07:10 - time on an unnecessary detail at this
07:12 - point because I think you know how to do
07:14 - most of this so uh let's uh do this
07:17 - under the UI overlay
07:20 - maybe and uh uh we can make a an empty
07:24 - in here that will just expand onto the
07:27 - entire screen and we call this um player
07:34 - info just in case that we want to have
07:36 - more than one thing in here and for now
07:39 - we'll just create a simple text object
07:42 - that will uh anchor to the left hand
07:46 - corner up here at some point we might
07:50 - put it on the player himself down here
07:52 - that might be better
07:54 - actually I almost like that
07:58 - better actually actually let's do that
08:00 - I've thought things through now uh
08:04 - so then we need some hearts if that
08:06 - needs to be
08:08 - cool let's do it up here let's save
08:11 - ourselves the hassle uh of course you
08:13 - can just stick it onto the um uh the
08:16 - player info that is attached to the
08:18 - player object and all that there are
08:19 - plenty of tutorials on doing these
08:21 - Health amounts and and that kind of
08:23 - stuff it's basically just the Sprite
08:25 - that you slice um I won't go into it now
08:28 - so here simply say uh lives and uh a
08:32 - colon and then the amount of lives and
08:34 - we'll just start that off at three and
08:37 - uh the font here is should be Lut steps
08:39 - just as all of the others and I've
08:41 - noticed that some of the fonts sometimes
08:43 - look a bit blurry especially when uh
08:46 - scaled up so in order to compensate for
08:48 - this we can go into the computer pack uh
08:51 - find the Lut steps and change this from
08:54 - uh smooth to hinted raster and the font
08:57 - size to 32 that should get rid of that
09:00 - blurriness you can see how much sharper
09:02 - it looks
09:03 - now uh and uh that looks fairly decent
09:07 - uh but we probably want to move it a bit
09:09 - away from the corner so it's not St up
09:12 - there and I think I want to calze all of
09:16 - these because I like the font uh with
09:18 - capital letters that looks better uh we
09:21 - can maybe also bump up the font size to
09:24 - something like 20 and uh make the color
09:27 - a bit more cool so um we could do a
09:30 - black one with a white outline or maybe
09:34 - the
09:34 - inverse so we'll create create a shadow
09:38 - here instead of an outline and uh just
09:40 - give that a little bit I actually like
09:43 - that a lot so I think we'll just uh
09:47 - stick with that for now and we can
09:48 - always change it later uh we could also
09:50 - color this uh red because it is our
09:52 - lives nope that looks ugly okay uh so
09:56 - this is going to be our text for now and
09:58 - I think we'll just create a simple
10:00 - script here that will um retrieve the
10:02 - info about uh our amount of lives uh to
10:06 - here and uh this is of course not the
10:10 - most ideal way you could uh create some
10:12 - kind of
10:14 - um uh what should we say action or event
10:17 - that triggers whenever am a certain or
10:20 - the lives change and then subscribe this
10:23 - to the event and all that uh but instead
10:25 - we're just going to create a symbol
10:27 - script uh because it's not going to have
10:29 - that much of an overhead so let's just
10:31 - go in here and uh go under new
10:35 - script and uh let's
10:38 - type
10:40 - lives counter UI let's do that and let's
10:44 - also call this the lives
10:48 - counter uh if it wants to update lives
10:51 - counter there we go and let's double
10:54 - click this to open it up in Mano develop
10:56 - we'll just reload everything here or in
10:58 - Visual Studio I should say and uh first
11:01 - off we want to be uh using
11:05 - unityengine.ui
11:06 - and uh we want to create a um let's do a
11:10 - serialized field and make this a private
11:14 - text object and we'll simply call this
11:17 - uh the um lives
11:21 - text um and we want to require that
11:25 - component here require component type of
11:29 - and then we'll call it a text here and
11:33 - at the beginning we simply want to um
11:36 - let's not make this a serialized field
11:38 - that's instead just get it through the
11:39 - start method here or even better the
11:42 - awake method delete that comment there
11:46 - we'll simply set lives text equal to get
11:50 - component uh
11:53 - text cool and uh then in the update
11:56 - method uh we can simply uh
12:01 - find the remaining lives here so we can
12:04 - simply say that game master do remaining
12:07 - lives that is the amount of lives and we
12:09 - can simply say that we want lives text
12:12 - to be equal to that as a string but it
12:17 - will automatically convert it to a
12:19 - string if we do this and then remember
12:21 - to put in lives
12:23 - here and a colon and a
12:27 - space it does convert well then we just
12:30 - do two
12:31 - string and now it should be happy okay
12:34 - it's because we want to do text there
12:37 - all right so of course we could do some
12:39 - checking if the variable has changed and
12:41 - all that but really it's not necessary
12:43 - this is not an expensive call of any
12:45 - sorts so uh we'll just have that sit
12:47 - there and
12:49 - uh if we hit play
12:52 - now and jump down we can see that
12:55 - changes to two immediately so that's
12:58 - perfect
13:00 - cool so now that we have that working uh
13:02 - we can actually Implement some Logic for
13:04 - what happens uh when the game is over
13:07 - and uh again I want to go under our UI
13:10 - overlay and create an uh empty object
13:13 - here because I kind of just want to uh
13:15 - display a uh game over screen uh with a
13:18 - quit button or a restart button and uh
13:21 - so we'll make a uh empty object call
13:26 - this the game
13:27 - over screen or whatever you want to do
13:30 - here uh again we want
13:33 - to fill the screen with this and by the
13:37 - way to do this I'm holding down alt and
13:39 - then clicking and uh then let's make
13:42 - another UI um component here object this
13:46 - should be a panel and we want the
13:49 - texture here to be the wi texture and uh
13:52 - you can go into the game here and see
13:54 - that if we make this uh black and then
13:57 - with a certain opacity
14:00 - something like that looks pretty cool
14:02 - that's fine so that's just going to make
14:04 - sure uh to uh that our UI stands out
14:07 - from the background and uh we just going
14:09 - to call this
14:13 - background and then on top of this we
14:15 - can make another UI uh element and this
14:17 - is going to be a text object and uh it's
14:21 - going to look very much the same to you
14:23 - here so we'll scale this up we actually
14:25 - want this to be
14:27 - centered I think
14:29 - I believe but we'll see and uh we'll
14:32 - change the font type to little put steps
14:36 - we'll bump up the font size we'll also
14:38 - Center this there and
14:41 - there that looks pretty cool uh we want
14:45 - to change this to game over with capital
14:48 - letters uh we want to change the color
14:51 - to a red and I think I want a shadow
14:55 - here that is white completely White
14:59 - and with an offset of th three and minus
15:02 - three something like that and kind of an
15:04 - old school arcadey look uh which I think
15:08 - is pretty cool in here and uh then we
15:10 - can rename this to game over text let's
15:15 - make a few buttons here so we're going
15:17 - to have a UI button and uh we definitely
15:22 - want to size this up there's no reason
15:24 - for it to be so small something like uh
15:27 - that looks fine and again I don't want
15:29 - this uh soft button look I don't think
15:32 - or do
15:34 - I actually we might keep that but I
15:37 - definitely want it to be uh kind of dark
15:40 - maybe even black and then with a bit of
15:43 - opacity it looks pretty cool and uh then
15:47 - the text object should again be Lily put
15:49 - steps a much bigger font
15:52 - size and that's just a an a temporary
15:55 - error um uh if you want to get rid of
15:58 - that you normally can just disable and
16:00 - enable the object there you go uh I
16:02 - don't know why it does that but it's
16:04 - doing been doing it for a long time uh
16:07 - and let's just make uh the text of that
16:09 - button white here and we can call this
16:12 - the
16:13 - quit and we are also going to have
16:21 - a retry button we're going to say retry
16:27 - here and that's really all you have to
16:29 - do I mean this looks kind of okay I
16:32 - definitely think you should spend more
16:34 - time than me on this um maybe I want
16:37 - these to
16:39 - be kind of a gray here and then not
16:42 - transparent I might actually like that
16:46 - better but I don't know we could try
16:49 - adding a Red Shadow let's just try this
16:51 - out just for fun so let's make that red
16:55 - completely
16:57 - non-transparent three
17:01 - and3 h that's not
17:04 - bad we could uh do a bit more here so
17:07 - five and
17:09 - five that's actually kind of fun I might
17:12 - stick with that I don't know uh we can
17:14 - try changing these from UI Sprite to
17:16 - just the uh White texture here um to
17:19 - make it Square yeah that's much better
17:21 - and I actually kind of like the look of
17:23 - this now so we'll change this from the
17:25 - retry button to the this to the uh quit
17:33 - button and that should be all and let's
17:36 - just see how that looks in game you can
17:38 - also see that the mouse over here still
17:39 - works but you can of course customize
17:42 - that uh if you want it to be um more
17:44 - clear uh it could be pretty cool with a
17:47 - scaling effect of some sorts here um now
17:50 - that I've seen this in the game I kind
17:53 - of want to scale the game over uh up
17:55 - even further so let's just give it a t
17:58 - add more there and I think uh that will
18:00 - be good so definitely exper um
18:03 - experiment with this more than I have
18:06 - here um but I kind of want to move on
18:08 - with the video so uh what we could do
18:12 - now here and what I think we should do
18:14 - is have some kind of game over screen
18:16 - manager some kind of object that sits
18:18 - here and uh make sure that everything uh
18:21 - works as it should and uh there are a
18:25 - bunch of ways to do this frankly um
18:28 - but I think we should just add a
18:30 - component and kind of get coding with
18:31 - this um so we'll call this the game
18:36 - over manager game over screen um we call
18:40 - this the wave UI so we'll actually call
18:44 - this the game over UI I think just to
18:46 - stick to our convention and we'll just
18:49 - double click that again reload all and
18:51 - that's fine so uh this is going to be uh
18:54 - using Unity
18:56 - engine. UI
18:59 - and uh we're going to have a bunch of
19:00 - stuff in here first off um actually we
19:05 - might not have that much stuff in here
19:07 - we might not even need a UI reference or
19:12 - need to include the UI namespace um
19:15 - actually the first things that we want
19:16 - to create are some methods that we can
19:19 - call using our buttons that will uh
19:21 - either restart the game or uh quit the
19:25 - game so we'll make a public void here
19:28 - called uh
19:30 - quit and I don't think it needs to take
19:32 - in any arguments which is simply going
19:34 - to call application uh do quit I believe
19:38 - yep and uh it's also going to throw a
19:41 - debug.log just uh because it won't quit
19:45 - our application while uh we're in the
19:46 - editor here uh saying uh
19:50 - application
19:53 - quit something like that and uh yeah so
19:57 - that looks good and then we'll make
19:59 - another public
20:01 - vo and this is going to be the uh
20:04 - retry and uh I think we're simply going
20:07 - to restart the level here so application
20:10 - do load
20:11 - level application.
20:14 - loaded uh
20:17 - level that's not a method
20:20 - nope that's a field good this is good uh
20:25 - looks like this is obsolete okay so this
20:28 - is a feature in the new uh Unity I
20:30 - believe and uh I think this will work
20:33 - but it will tell us that uh there's a
20:35 - newer way to do it yeah so here Unity
20:38 - engine. application. load level in this
20:40 - obsolete use scene manager. load scene
20:42 - instead okay so let's try this out so I
20:45 - haven't actually done this yet so scene
20:48 - manager like this maybe we need to in
20:53 - include something scene manager. load
20:56 - scene so let's just uh load up the
20:57 - document ation here and we'll figure
21:00 - this out together so go to the scripting
21:03 - reference and hopefully this is already
21:06 - uh
21:08 - documented here and let's search for a
21:10 - scene
21:13 - manager here and uh we'll see that we
21:17 - can load a
21:21 - scene all right so name of the scene to
21:24 - load uh scene build index index of the
21:27 - scene
21:29 - uh so we can use either one of those and
21:32 - uh we have to specify a mode uh which is
21:36 - looks like allows you to specify whether
21:39 - or not to load the scene actively uh so
21:43 - um that will basically allows us to load
21:45 - scenes onto other scenes or whether or
21:46 - not the scene that you want to load will
21:49 - will uh replace another scene um but we
21:52 - just want to okay so it's under Unity
21:54 - engine. scene management so uh if we
21:57 - just do scene management okay you
22:00 - actually have to load that in so using
22:03 - Unity
22:05 - engine do scen management right it's
22:08 - right there so now we can say scen
22:11 - manager.
22:14 - load scene and uh we actually don't need
22:18 - to uh specify uh the mode it looks like
22:22 - and uh then we can simply say scene
22:24 - manager. loaded scene no
22:28 - that's not something we can do uh get
22:32 - active
22:34 - scenes get active scene here I think
22:37 - that's uh what we need to do so uh scene
22:41 - manager scene
22:44 - manager. get active scene and that's
22:48 - probably a method something like
22:51 - that should hopefully work or
22:55 - not uh from see scene to uh string that
23:00 - returns a scene get scene at get the
23:03 - scene at index in the blah blah blah get
23:06 - seen by name get seen by Pro by
23:09 - path um okay so I'll just quickly
23:12 - research how to do this and I'll come
23:14 - back in a second all right so that was
23:17 - really really easy all we need to do is
23:19 - uh simply do a DOT here and we have
23:21 - access to both the build index or the
23:24 - name so whatever you want to do here I'm
23:26 - just going to load by the build index
23:28 - because a an integer is a very uh small
23:31 - data type so that's going to be just
23:33 - fine and now when we save this uh it's
23:35 - going to restart the game here we don't
23:37 - need a debug.log statement because I I
23:39 - think this will be pretty clear uh that
23:41 - it's happening so uh we can now see that
23:45 - this uh warning will disappear and we
23:47 - can clear this
23:49 - out here remove all this all right uh
23:55 - and uh now all we need to do is link
23:57 - this up uh to our buttons so we can go
24:01 - under the game over here find the retry
24:03 - button and uh add an onclick event and
24:07 - uh we're going to drag in the game over
24:09 - uh object here go and do game over UI
24:12 - and find the one called retry and under
24:15 - the quit button we'll do exactly the
24:17 - same so add an event game over
24:21 - object game over UI class and find the
24:24 - quid uh method this time so now if we
24:27 - try this out and hit play and we can TW
24:30 - try uh quitting
24:32 - first and the quit currently restarts
24:36 - did I miss this up looks like it so this
24:40 - is actually the quit
24:43 - button and this is the retry button and
24:47 - therefore we need to switch these two so
24:50 - game over UI quit and game over UI retry
24:57 - so let's try try that again that's kind
24:59 - of important that those aren't switched
25:01 - in the final game so let's try quitting
25:03 - you can see it says application quit and
25:05 - if we rryy it uh restarts the game there
25:08 - so that's
25:10 - perfect uh so now that we have all of
25:13 - that uh available for us uh we kind of
25:16 - need some uh some kind of uh transition
25:20 - uh for this uh game over object and I
25:23 - think that we might just uh fade it in
25:26 - um but we should definitely make some
25:27 - kind of uh animation for this and uh in
25:31 - order to do that uh let's add a
25:33 - component here let's make this a
25:36 - um canvas renderer
25:41 - nope remove that a canvas group is what
25:44 - I'm looking for where we can control the
25:46 - alpha of all objects simultaneously and
25:50 - uh do all kinds of stuff just to have
25:52 - that there and uh then we can uh add an
25:55 - animation here so we'll hit create on
25:58 - this and first it will create the
26:01 - animation that we want to have and this
26:03 - is going to be the uh faade game over
26:07 - fade in or something like that that's
26:09 - going to be fine save that and it's
26:11 - automatically going to create a uh game
26:15 - over uh mechanim
26:18 - animator uh so now we can actually do
26:21 - this uh animation right here so uh the
26:24 - first thing that uh we want to do we
26:27 - might try
26:28 - simply fading this in um but actually
26:32 - what I would really like to do is fading
26:35 - in the background and having the other
26:38 - elements kind of pop up U pop in from
26:41 - the sides so I think we should uh try
26:44 - that instead uh so let's just pop out
26:47 - from this mode and create a canvas group
26:49 - here so we can control the alpha and
26:51 - don't need to mess around with the color
26:53 - in case we change that later uh and
26:55 - don't want it to glitch with the
26:56 - animation here so um now we can uh go
27:01 - into animation mode again and uh we can
27:04 - simply uh change the alpha here so it's
27:07 - going to uh start off at zero and then
27:10 - go to uh one so we'll just make this
27:12 - zero here and simply switch these two
27:16 - and I don't know how long we want this
27:18 - animation to be but we'll see in a
27:20 - second so that should fade it in over a
27:23 - period of a second and a second seems
27:26 - just fine actually
27:28 - uh then we have the game over text we of
27:30 - course want to change the position of
27:32 - this uh so um we can start by simply
27:37 - um quickly moving this back and forth
27:41 - here uh so that's going to be our end
27:44 - position it's going to be there and uh
27:47 - down here we simply want to move this
27:49 - out of the frame so this way it goes
27:52 - like this and uh that's going to be just
27:55 - fine we want to do the same with our two
27:57 - button butons so um we can
27:59 - simply um
28:02 - whoops we can take these two and just
28:05 - quickly wiggle them there and
28:10 - uh the X position of both of them I
28:15 - believe should be zero there we go and
28:18 - uh that's going to be our end position
28:20 - so we can drag that over there
28:24 - oops yeah that looks about right what is
28:27 - this
28:28 - this is the
28:31 - um canvas group Alpha I think that's
28:35 - just fine there and uh then here we can
28:38 - take the position of the two and just
28:39 - drag them down by holding shift you can
28:42 - uh drag uh on only one axis at the
28:46 - time so there you can see how that looks
28:50 - I think that looks pretty cool actually
28:52 - so let's just make sure that uh when we
28:55 - are at this point those look like that
28:58 - and this one is at Alpha zero so now we
29:00 - can go under the curves here select all
29:03 - of this focus on it and we can right
29:05 - click and go to flat so that will smooth
29:08 - out the mo uh the motion here and I
29:11 - think we now have a pretty cool fade in
29:13 - animation uh so now we can uh go under
29:16 - our game
29:17 - over uh animator and we can see uh kind
29:21 - of what triggers this and uh I think
29:24 - that we'll just have this triggered uh
29:26 - using the inter Point meaning as soon as
29:28 - we enable this object so we can simply
29:31 - disable it and uh then as soon as we
29:33 - want the game to be over we enable it
29:36 - through code uh and a very very simple
29:39 - way to do this is if we go into our game
29:42 - master object in here we'll uh keep a
29:46 - public uh or a reference to this I'm
29:49 - going to make this a serialized field
29:51 - make it private I know I haven't done
29:53 - this uh with these variables but uh this
29:56 - is better
29:58 - and uh we'll make this a you can either
30:00 - do a uh game over UI or a transform I'm
30:03 - just going to make this a transform and
30:06 - uh we are going to call this the game
30:08 - over
30:10 - UI uh wonder why and uh then when we
30:14 - call the end game method
30:17 - here call the game over debug.log
30:19 - statement all we need to say is game
30:22 - over
30:24 - ui. set
30:26 - active
30:28 - that is a method for game
30:32 - objects game object here do
30:36 - set
30:38 - active and we want to put in true here
30:41 - so I think that should pretty much do it
30:44 - uh all we need to do now is make sure to
30:46 - drag that in uh on the slot here so you
30:49 - can see that says None we drag in the
30:51 - game over object and uh apply
30:55 - this and I think we should try this out
30:57 - so let's hit
30:59 - play Let's jump down a few
31:02 - times you can see our lives are
31:05 - decrement every
31:07 - time here and now when we reach zero it
31:11 - should pop up with the game over
31:13 - screen oh and you can see that it Loops
31:16 - here all right so that looks really dumb
31:18 - uh so let's quickly uh stop it from
31:20 - looping and uh all we need to do is
31:22 - simply select the game over fade in and
31:26 - uh remove the loop time here that will
31:28 - means that will it will only play once
31:30 - let's do this again if you want to test
31:32 - this a bunch of times of of course
31:34 - recommend that you decrease the amount
31:35 - of lives so you don't have to wait uh
31:38 - every time uh but I believe that it
31:40 - should be working now uh so it goes to
31:44 - zero the game over screen comes and you
31:46 - can see that as soon as the enemies
31:48 - don't have a Target uh and we've
31:51 - disappeared over here in the hierarchy
31:54 - uh well then they simply stop chasing uh
31:56 - so it looks like like the game has
31:57 - frozen but it has not and therefore we
32:00 - can still do a bunch of animations and
32:02 - stuff uh if that's what you want it to
32:04 - do so that's super cool a lot of people
32:07 - uh when they make a go game over screen
32:09 - they simply make it pop up and then they
32:11 - freeze time in the game and that's fine
32:14 - for maybe a pause screen uh but with the
32:17 - game over you often want to play some
32:19 - cool sounds have some cool animations
32:21 - and that gets ruined if you pass time uh
32:25 - so I believe this uh the best way to do
32:27 - and you can see that we can now quit it
32:28 - and it says application. quit or retry
32:31 - and we are back in the game at its
32:33 - beginning state so that's basically all
32:36 - I wanted to cover in this video I also
32:38 - think it was pretty long but it's
32:40 - important to have a uh game over state
32:43 - for any game or the game won't be
32:46 - challenging so um I felt this was a
32:48 - really important uh video and I am
32:50 - already looking forward to the next one
32:52 - so I'll see you guys in the next
32:56 - video
33:04 - a

Cleaned transcript:

thanks for tuning in at braies hello everyone and welcome to video number 23 in the how to make a 2d platformer course at this point we have a lot of subsystems working in our game but we still need to Define when the player loses so we kind of need to introduce this idea of a game over state so that's what we are going to do in this video also if you have any questions go to farm. bre.com so let's open up Unity as you can see I've pretty much left the project as is I've simply uh uh organized it that bit uh I took some uh scripts and plac them in the scripts folder and uh some stuff under the animation folder as well I also notice that we have two additive materials this one is for the muscle flash so I'll call this additive muscle Flash and then we have this additive uh generic particle one so I'll call this additive particle and drag that into into the materials folder as well um so I think that's pretty much all we need to do we might also go ahead and make an audio folder where we can drag in the respond countdown I don't think we are going to be needing a folder for uh physics materials all right so let's just save that you will also notice that uh I have updated my version of unity to Unity 5.3 this introduces a bunch of cool features one of the most exciting on is having uh multiple scenes um or grouping scenes together so you can see multiple scenes in the hierarchy here and load scenes easily and manage scenes at runtime so that's a super cool feature and that allows you to do a lot of streaming assets and uh stuff like that but that's not something we're going to cover in this video so basically what I want to do is uh give our player a certain amount of lives because right now when we die if I play the game here and jump down the player simply respawns and that's just fine however I want to kind of uh introduce a a bigger penalty for uh dying and therefore I think we should have maybe two or three lives and uh when we don't have any more lives we need to kind of start over and begin uh back at Wave 1 so in order to do this I think we should jump into our GM object here and begin coding this idea of player lives so let's open this up in visual studio and you can see that uh we have this uh set up so that we have a instance of our game master and uh that's of course a static one so we can access it through the type and then we have a bunch of uh public variables nonstatic variables that sit on that instance so that we can easily uh integrate cre it with the unity inspector but this idea of player lives is something that I want to sync uh across and and make very easy to access and therefore I'm going to make it static so I'm going to make a public static integer and uh actually let's make a private one and then let's make an accessor so we'll have a private static int and uh this is going to be a player um I really want to think this through now uh so yeah so this is going to be remaining lives and it's going to start at uh some variable I think we're just going to start it off at three and then we're going to have a public static integer and we'll capitalize this and call it remaining l lives and this is simply going to be a property so if we want to get the variable remaining lives here uh we will simply uh say get return underscore remaining lives this way we can only change the lives remaining inside of the uh GM uh type or class but uh we can get it uh by simply referring to the uh variable type so that's pretty awesome uh then what we can do is uh every time we uh call this uh Kill player method you can see that we currently just destroy the player object and then we uh start this respawn player uh Co routine on the instance of the game master object and uh before we do this we can simply decrement the amount of player lives so we can say player lives or remaining lives it was uh here minus equals one or you can just say minus minus that's up to you I like to write it this way and uh then we can check if underscore remaining lives and uh we want to check if this is less than or equal to zero well then we don't want to respawn the player then we want to end the game so uh this here is going to be an lse statement so we'll just pop that up there and make a tab and here we're going to call some kind of endgame method and I think we are going to make this uh local so we can set up some references uh I don't know whether or not this will be an i numerator um I think we'll just start out by making it a normal uh method and then later we can always add the functionality so uh for now it's going to be a public word and this is going to be end game there we go and here we can simply call gm. ingame like that and it should be fairly easy and in here we'll simply uh make a debug.log statement saying that um uh simply saying game over all right so let's try this out uh and see if it works so I'm going to hit play here you can see that it loads in here and I'm going to jump down three times that was the first one this is going to be the second one and the third time here it says game over and notice that we don't hear the respawn sound and all that so we have this custom uh case that we can fill out with uh some uis some sound effects all that so that's great I also kind of want to have a counter here for how many lives that we are currently at we could make this using some Heights and that would be pretty cool but for now let's just do some text we can always change this later there's no reason to spend time on an unnecessary detail at this point because I think you know how to do most of this so uh let's uh do this under the UI overlay maybe and uh uh we can make a an empty in here that will just expand onto the entire screen and we call this um player info just in case that we want to have more than one thing in here and for now we'll just create a simple text object that will uh anchor to the left hand corner up here at some point we might put it on the player himself down here that might be better actually I almost like that better actually actually let's do that I've thought things through now uh so then we need some hearts if that needs to be cool let's do it up here let's save ourselves the hassle uh of course you can just stick it onto the um uh the player info that is attached to the player object and all that there are plenty of tutorials on doing these Health amounts and and that kind of stuff it's basically just the Sprite that you slice um I won't go into it now so here simply say uh lives and uh a colon and then the amount of lives and we'll just start that off at three and uh the font here is should be Lut steps just as all of the others and I've noticed that some of the fonts sometimes look a bit blurry especially when uh scaled up so in order to compensate for this we can go into the computer pack uh find the Lut steps and change this from uh smooth to hinted raster and the font size to 32 that should get rid of that blurriness you can see how much sharper it looks now uh and uh that looks fairly decent uh but we probably want to move it a bit away from the corner so it's not St up there and I think I want to calze all of these because I like the font uh with capital letters that looks better uh we can maybe also bump up the font size to something like 20 and uh make the color a bit more cool so um we could do a black one with a white outline or maybe the inverse so we'll create create a shadow here instead of an outline and uh just give that a little bit I actually like that a lot so I think we'll just uh stick with that for now and we can always change it later uh we could also color this uh red because it is our lives nope that looks ugly okay uh so this is going to be our text for now and I think we'll just create a simple script here that will um retrieve the info about uh our amount of lives uh to here and uh this is of course not the most ideal way you could uh create some kind of um uh what should we say action or event that triggers whenever am a certain or the lives change and then subscribe this to the event and all that uh but instead we're just going to create a symbol script uh because it's not going to have that much of an overhead so let's just go in here and uh go under new script and uh let's type lives counter UI let's do that and let's also call this the lives counter uh if it wants to update lives counter there we go and let's double click this to open it up in Mano develop we'll just reload everything here or in Visual Studio I should say and uh first off we want to be uh using unityengine.ui and uh we want to create a um let's do a serialized field and make this a private text object and we'll simply call this uh the um lives text um and we want to require that component here require component type of and then we'll call it a text here and at the beginning we simply want to um let's not make this a serialized field that's instead just get it through the start method here or even better the awake method delete that comment there we'll simply set lives text equal to get component uh text cool and uh then in the update method uh we can simply uh find the remaining lives here so we can simply say that game master do remaining lives that is the amount of lives and we can simply say that we want lives text to be equal to that as a string but it will automatically convert it to a string if we do this and then remember to put in lives here and a colon and a space it does convert well then we just do two string and now it should be happy okay it's because we want to do text there all right so of course we could do some checking if the variable has changed and all that but really it's not necessary this is not an expensive call of any sorts so uh we'll just have that sit there and uh if we hit play now and jump down we can see that changes to two immediately so that's perfect cool so now that we have that working uh we can actually Implement some Logic for what happens uh when the game is over and uh again I want to go under our UI overlay and create an uh empty object here because I kind of just want to uh display a uh game over screen uh with a quit button or a restart button and uh so we'll make a uh empty object call this the game over screen or whatever you want to do here uh again we want to fill the screen with this and by the way to do this I'm holding down alt and then clicking and uh then let's make another UI um component here object this should be a panel and we want the texture here to be the wi texture and uh you can go into the game here and see that if we make this uh black and then with a certain opacity something like that looks pretty cool that's fine so that's just going to make sure uh to uh that our UI stands out from the background and uh we just going to call this background and then on top of this we can make another UI uh element and this is going to be a text object and uh it's going to look very much the same to you here so we'll scale this up we actually want this to be centered I think I believe but we'll see and uh we'll change the font type to little put steps we'll bump up the font size we'll also Center this there and there that looks pretty cool uh we want to change this to game over with capital letters uh we want to change the color to a red and I think I want a shadow here that is white completely White and with an offset of th three and minus three something like that and kind of an old school arcadey look uh which I think is pretty cool in here and uh then we can rename this to game over text let's make a few buttons here so we're going to have a UI button and uh we definitely want to size this up there's no reason for it to be so small something like uh that looks fine and again I don't want this uh soft button look I don't think or do I actually we might keep that but I definitely want it to be uh kind of dark maybe even black and then with a bit of opacity it looks pretty cool and uh then the text object should again be Lily put steps a much bigger font size and that's just a an a temporary error um uh if you want to get rid of that you normally can just disable and enable the object there you go uh I don't know why it does that but it's doing been doing it for a long time uh and let's just make uh the text of that button white here and we can call this the quit and we are also going to have a retry button we're going to say retry here and that's really all you have to do I mean this looks kind of okay I definitely think you should spend more time than me on this um maybe I want these to be kind of a gray here and then not transparent I might actually like that better but I don't know we could try adding a Red Shadow let's just try this out just for fun so let's make that red completely nontransparent three and3 h that's not bad we could uh do a bit more here so five and five that's actually kind of fun I might stick with that I don't know uh we can try changing these from UI Sprite to just the uh White texture here um to make it Square yeah that's much better and I actually kind of like the look of this now so we'll change this from the retry button to the this to the uh quit button and that should be all and let's just see how that looks in game you can also see that the mouse over here still works but you can of course customize that uh if you want it to be um more clear uh it could be pretty cool with a scaling effect of some sorts here um now that I've seen this in the game I kind of want to scale the game over uh up even further so let's just give it a t add more there and I think uh that will be good so definitely exper um experiment with this more than I have here um but I kind of want to move on with the video so uh what we could do now here and what I think we should do is have some kind of game over screen manager some kind of object that sits here and uh make sure that everything uh works as it should and uh there are a bunch of ways to do this frankly um but I think we should just add a component and kind of get coding with this um so we'll call this the game over manager game over screen um we call this the wave UI so we'll actually call this the game over UI I think just to stick to our convention and we'll just double click that again reload all and that's fine so uh this is going to be uh using Unity engine. UI and uh we're going to have a bunch of stuff in here first off um actually we might not have that much stuff in here we might not even need a UI reference or need to include the UI namespace um actually the first things that we want to create are some methods that we can call using our buttons that will uh either restart the game or uh quit the game so we'll make a public void here called uh quit and I don't think it needs to take in any arguments which is simply going to call application uh do quit I believe yep and uh it's also going to throw a debug.log just uh because it won't quit our application while uh we're in the editor here uh saying uh application quit something like that and uh yeah so that looks good and then we'll make another public vo and this is going to be the uh retry and uh I think we're simply going to restart the level here so application do load level application. loaded uh level that's not a method nope that's a field good this is good uh looks like this is obsolete okay so this is a feature in the new uh Unity I believe and uh I think this will work but it will tell us that uh there's a newer way to do it yeah so here Unity engine. application. load level in this obsolete use scene manager. load scene instead okay so let's try this out so I haven't actually done this yet so scene manager like this maybe we need to in include something scene manager. load scene so let's just uh load up the document ation here and we'll figure this out together so go to the scripting reference and hopefully this is already uh documented here and let's search for a scene manager here and uh we'll see that we can load a scene all right so name of the scene to load uh scene build index index of the scene uh so we can use either one of those and uh we have to specify a mode uh which is looks like allows you to specify whether or not to load the scene actively uh so um that will basically allows us to load scenes onto other scenes or whether or not the scene that you want to load will will uh replace another scene um but we just want to okay so it's under Unity engine. scene management so uh if we just do scene management okay you actually have to load that in so using Unity engine do scen management right it's right there so now we can say scen manager. load scene and uh we actually don't need to uh specify uh the mode it looks like and uh then we can simply say scene manager. loaded scene no that's not something we can do uh get active scenes get active scene here I think that's uh what we need to do so uh scene manager scene manager. get active scene and that's probably a method something like that should hopefully work or not uh from see scene to uh string that returns a scene get scene at get the scene at index in the blah blah blah get seen by name get seen by Pro by path um okay so I'll just quickly research how to do this and I'll come back in a second all right so that was really really easy all we need to do is uh simply do a DOT here and we have access to both the build index or the name so whatever you want to do here I'm just going to load by the build index because a an integer is a very uh small data type so that's going to be just fine and now when we save this uh it's going to restart the game here we don't need a debug.log statement because I I think this will be pretty clear uh that it's happening so uh we can now see that this uh warning will disappear and we can clear this out here remove all this all right uh and uh now all we need to do is link this up uh to our buttons so we can go under the game over here find the retry button and uh add an onclick event and uh we're going to drag in the game over uh object here go and do game over UI and find the one called retry and under the quit button we'll do exactly the same so add an event game over object game over UI class and find the quid uh method this time so now if we try this out and hit play and we can TW try uh quitting first and the quit currently restarts did I miss this up looks like it so this is actually the quit button and this is the retry button and therefore we need to switch these two so game over UI quit and game over UI retry so let's try try that again that's kind of important that those aren't switched in the final game so let's try quitting you can see it says application quit and if we rryy it uh restarts the game there so that's perfect uh so now that we have all of that uh available for us uh we kind of need some uh some kind of uh transition uh for this uh game over object and I think that we might just uh fade it in um but we should definitely make some kind of uh animation for this and uh in order to do that uh let's add a component here let's make this a um canvas renderer nope remove that a canvas group is what I'm looking for where we can control the alpha of all objects simultaneously and uh do all kinds of stuff just to have that there and uh then we can uh add an animation here so we'll hit create on this and first it will create the animation that we want to have and this is going to be the uh faade game over fade in or something like that that's going to be fine save that and it's automatically going to create a uh game over uh mechanim animator uh so now we can actually do this uh animation right here so uh the first thing that uh we want to do we might try simply fading this in um but actually what I would really like to do is fading in the background and having the other elements kind of pop up U pop in from the sides so I think we should uh try that instead uh so let's just pop out from this mode and create a canvas group here so we can control the alpha and don't need to mess around with the color in case we change that later uh and don't want it to glitch with the animation here so um now we can uh go into animation mode again and uh we can simply uh change the alpha here so it's going to uh start off at zero and then go to uh one so we'll just make this zero here and simply switch these two and I don't know how long we want this animation to be but we'll see in a second so that should fade it in over a period of a second and a second seems just fine actually uh then we have the game over text we of course want to change the position of this uh so um we can start by simply um quickly moving this back and forth here uh so that's going to be our end position it's going to be there and uh down here we simply want to move this out of the frame so this way it goes like this and uh that's going to be just fine we want to do the same with our two button butons so um we can simply um whoops we can take these two and just quickly wiggle them there and uh the X position of both of them I believe should be zero there we go and uh that's going to be our end position so we can drag that over there oops yeah that looks about right what is this this is the um canvas group Alpha I think that's just fine there and uh then here we can take the position of the two and just drag them down by holding shift you can uh drag uh on only one axis at the time so there you can see how that looks I think that looks pretty cool actually so let's just make sure that uh when we are at this point those look like that and this one is at Alpha zero so now we can go under the curves here select all of this focus on it and we can right click and go to flat so that will smooth out the mo uh the motion here and I think we now have a pretty cool fade in animation uh so now we can uh go under our game over uh animator and we can see uh kind of what triggers this and uh I think that we'll just have this triggered uh using the inter Point meaning as soon as we enable this object so we can simply disable it and uh then as soon as we want the game to be over we enable it through code uh and a very very simple way to do this is if we go into our game master object in here we'll uh keep a public uh or a reference to this I'm going to make this a serialized field make it private I know I haven't done this uh with these variables but uh this is better and uh we'll make this a you can either do a uh game over UI or a transform I'm just going to make this a transform and uh we are going to call this the game over UI uh wonder why and uh then when we call the end game method here call the game over debug.log statement all we need to say is game over ui. set active that is a method for game objects game object here do set active and we want to put in true here so I think that should pretty much do it uh all we need to do now is make sure to drag that in uh on the slot here so you can see that says None we drag in the game over object and uh apply this and I think we should try this out so let's hit play Let's jump down a few times you can see our lives are decrement every time here and now when we reach zero it should pop up with the game over screen oh and you can see that it Loops here all right so that looks really dumb uh so let's quickly uh stop it from looping and uh all we need to do is simply select the game over fade in and uh remove the loop time here that will means that will it will only play once let's do this again if you want to test this a bunch of times of of course recommend that you decrease the amount of lives so you don't have to wait uh every time uh but I believe that it should be working now uh so it goes to zero the game over screen comes and you can see that as soon as the enemies don't have a Target uh and we've disappeared over here in the hierarchy uh well then they simply stop chasing uh so it looks like like the game has frozen but it has not and therefore we can still do a bunch of animations and stuff uh if that's what you want it to do so that's super cool a lot of people uh when they make a go game over screen they simply make it pop up and then they freeze time in the game and that's fine for maybe a pause screen uh but with the game over you often want to play some cool sounds have some cool animations and that gets ruined if you pass time uh so I believe this uh the best way to do and you can see that we can now quit it and it says application. quit or retry and we are back in the game at its beginning state so that's basically all I wanted to cover in this video I also think it was pretty long but it's important to have a uh game over state for any game or the game won't be challenging so um I felt this was a really important uh video and I am already looking forward to the next one so I'll see you guys in the next video a
