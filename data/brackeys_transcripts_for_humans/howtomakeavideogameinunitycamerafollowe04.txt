With timestamps:

00:00 - in this video we'll have a look at
00:01 - making our camera follow the movement of
00:02 - our player not really much to say about
00:04 - that let's just jump into it so as with
00:06 - everything else in game development
00:07 - making the camera follow the player can
00:09 - be done in multiple ways the first and
00:11 - most obvious one is probably just
00:13 - parenting the camera to the player Unity
00:15 - allows us to Nest game objects that
00:17 - means that we can take our camera here
00:19 - selected and drag it under our player we
00:21 - have now parented our main camera to our
00:24 - player and the main camera is now a
00:25 - child of that player this means that
00:28 - whenever we go and move our player the
00:30 - camera is going to move with him however
00:32 - the problem with this is that if we go
00:34 - ahead and rotate our player the camera
00:36 - also rotates with them and that's going
00:38 - to look very weird when we collide with
00:40 - something and the cube starts spinning
00:43 - then the camera is going to spin with it
00:44 - and everything's going to be confusing
00:46 - so what we do instead is we take our
00:48 - camera and unparent it and we make it
00:49 - follow only the position of a player
00:51 - using a script so let's go and hit add
00:53 - component we'll call it something like
00:55 - follow player select C and hit create an
00:57 - ad let's double click it to open it up
00:59 - in Visual Studio and let's clean up the
01:01 - script a bit so let's delete the two
01:02 - using tags up here and let's also delete
01:04 - the start method now just like when we
01:06 - wanted to move our player where we
01:08 - wanted to move him a tiny bit each frame
01:10 - we also want to have our camera snap to
01:12 - the position of our player each frame so
01:14 - we'll put our code inside of the update
01:16 - method however in order to set our
01:17 - camera's position to that of the player
01:19 - we need a reference to the player the
01:21 - easiest way to do this is by making a
01:22 - variable that stores the reference to
01:24 - our player so when we create a variable
01:26 - we write public and so far we've only
01:28 - looked at the basic data types stuff
01:30 - like float integer and string that
01:31 - stores numbers and text but variables
01:34 - can actually also store way more
01:35 - complicated stuff if we go ahead and
01:37 - write transform here we can basically
01:39 - get a link to our player with
01:40 - information about his position rotation
01:43 - and scale remember the component
01:45 - responsible for these things are indeed
01:46 - called a transform so that's what we're
01:48 - getting a reference to then of course we
01:50 - need to name it something but we'll just
01:51 - name it player let's close that with a
01:53 - semicolon and if we just try and hit
01:55 - save now and head back into Unity we see
01:57 - that an empty slot called player now
01:59 - appears all we need to do now to make
02:00 - this player variable point to our
02:02 - specific player is to take the player
02:04 - and drag him into that slot so now every
02:06 - time we write player in our code it
02:08 - refers to that object to test this we
02:10 - can go inside of our update and we can
02:12 - try displaying the position of our
02:13 - player in the console to do that we
02:15 - write debug.log to write a message to
02:17 - the console inside of the parenthesis we
02:19 - then write player do position and we
02:21 - close it off with a semicolon now every
02:23 - frame we should display a message in the
02:25 - console with the position of a player
02:27 - let's save that head back into unity and
02:29 - hit play and if we go and select our
02:31 - console we can now see that position
02:32 - updating if we select our player the two
02:35 - numbers should correspond so we can see
02:37 - here that our player is currently
02:38 - falling and so his y value is rapidly
02:41 - decreasing and it does the same thing in
02:43 - the console we can also see that he's
02:44 - moving a bit forward on the Z again he's
02:46 - also moving forward in the console so
02:48 - now that we have this link between our
02:50 - script and the player we can take the
02:51 - position of our player and feed it to
02:53 - the camera so that stop playing head
02:54 - back into visual studio and instead of
02:56 - writing the position of our player we'll
02:58 - go transform and when whenever we write
03:00 - this with a non- capital T it refers to
03:02 - the transform of our current object that
03:04 - means the object that this script is
03:06 - sitting on it also says so here the
03:08 - transform attached to this game object
03:10 - so by writing transform and then do
03:13 - position we're referring to the position
03:15 - of our camera because our follow player
03:17 - script is sitting on that object and
03:19 - just like we were able to display a
03:20 - position we can also set it equal to
03:22 - something else so now we could move our
03:24 - camera anywhere in the world but we want
03:26 - to move it to a very specific place and
03:28 - that's the position of our player so set
03:30 - it equal to player. position and again
03:32 - we'll close this off with a semicolon so
03:34 - now our camera's position this game
03:36 - object position is going to be set equal
03:38 - to the player position every frame so
03:40 - let's save that head back into unity and
03:42 - technically our code doesn't have any
03:44 - errors but there's a main problem with
03:46 - this let's try zooming out in the scene
03:47 - view so we can see what's going on and
03:49 - hitting play we can see that indeed our
03:51 - camera is following the player but it's
03:53 - following the center of our player and
03:55 - that means that right when we start the
03:57 - game our main camera snaps to be inside
04:00 - the player object you can see that the
04:01 - effect here is that we're getting kind
04:03 - of a firstperson view of course this
04:05 - might be something that you want for
04:06 - your game but in our case I think it
04:08 - would be better if we move our camera a
04:10 - bit back from the player and a tiny bit
04:12 - up to do that we'll create another
04:14 - variable so again we'll write public and
04:16 - I'm going to introduce you to another
04:18 - data type this one is called Vector 3
04:21 - and a vector 3 is actually really really
04:23 - simple all this does is store three
04:25 - numbers a float stores one number with
04:27 - decimal places a vector three stor fores
04:30 - three floats and that makes it really
04:31 - easy to use when it comes to position of
04:33 - data because we have an x a y and a z so
04:36 - if we go ahead and name this one offset
04:38 - save it and go into Unity we should now
04:40 - be able to specify an offset on the X Y
04:43 - and Z value so in our case we wanted to
04:45 - remain centered on the X so we'll leave
04:48 - that at zero but we do want it to lift
04:50 - it a bit on the Y here so we'll set that
04:52 - to something like one and we definitely
04:54 - also want to pull it back so we'll set
04:56 - the Z here to something like -5 so now
04:59 - that we have this offset on the
05:01 - different axes all we need to do is add
05:03 - it onto our player's position so to do
05:05 - that we'll go in here and say player.
05:06 - position and then plus offset and we are
05:09 - very used to seeing the plus here being
05:10 - used between two numbers but unless you
05:12 - have experience with college level math
05:14 - you probably haven't seen it between two
05:16 - vectors how do we add three numbers onto
05:19 - other three numbers it's kind of weird
05:21 - if you want to learn more about what's
05:22 - going on here I have a video on vectors
05:24 - that you should definitely check out
05:26 - basically what's happening is we're
05:27 - taking the exposition of a player which
05:29 - is current is zero and we're adding zero
05:31 - onto that so that's still zero then
05:33 - we're taking the Y which is 1.16 in this
05:36 - case and we're adding one onto that and
05:38 - then finally on our Z this is currently
05:40 - zero as well and we're adding ne5 onto
05:42 - that so that's ne5 on the Z and we keep
05:44 - doing that as the player moves forward
05:46 - so in this case our X would still be
05:48 - zero our y would be 1.16 + 1 which is
05:51 - 2.16 and our Z would be this number - 5
05:54 - which is equal to 1.63 so make sure you
05:57 - save your script and hit play and our
05:59 - camera should now follow all player with
06:01 - the knife's offset position and this is
06:03 - much better than parenting because if we
06:05 - tilt off the ground here you can see the
06:06 - cube rotating but the camera is staying
06:08 - in place so that was pretty much it for
06:10 - this video if you liked it make sure to
06:11 - subscribe so you don't miss a future
06:13 - episode also a lot of you guys have been
06:14 - saying that you aren't notified when I
06:15 - upload a new video so make sure that
06:17 - doesn't happen click the little bell
06:18 - icon next to the Subscribe button and
06:20 - hit send all notifications Why YouTube
06:22 - why do you have to do that oh uh we
06:24 - don't know other than that I will see
06:26 - you in the next video thanks to all the
06:28 - awesome people who donated in January
06:30 - and a special thanks to Derek heemskirk
06:31 - facel marifi James Kell Hound Robert
06:33 - bonam Peter lock and Jason dto if you
06:35 - want to become a patron yourself you can
06:37 - do so at patreon.com Brees thanks a lot
06:40 - guys

Cleaned transcript:

in this video we'll have a look at making our camera follow the movement of our player not really much to say about that let's just jump into it so as with everything else in game development making the camera follow the player can be done in multiple ways the first and most obvious one is probably just parenting the camera to the player Unity allows us to Nest game objects that means that we can take our camera here selected and drag it under our player we have now parented our main camera to our player and the main camera is now a child of that player this means that whenever we go and move our player the camera is going to move with him however the problem with this is that if we go ahead and rotate our player the camera also rotates with them and that's going to look very weird when we collide with something and the cube starts spinning then the camera is going to spin with it and everything's going to be confusing so what we do instead is we take our camera and unparent it and we make it follow only the position of a player using a script so let's go and hit add component we'll call it something like follow player select C and hit create an ad let's double click it to open it up in Visual Studio and let's clean up the script a bit so let's delete the two using tags up here and let's also delete the start method now just like when we wanted to move our player where we wanted to move him a tiny bit each frame we also want to have our camera snap to the position of our player each frame so we'll put our code inside of the update method however in order to set our camera's position to that of the player we need a reference to the player the easiest way to do this is by making a variable that stores the reference to our player so when we create a variable we write public and so far we've only looked at the basic data types stuff like float integer and string that stores numbers and text but variables can actually also store way more complicated stuff if we go ahead and write transform here we can basically get a link to our player with information about his position rotation and scale remember the component responsible for these things are indeed called a transform so that's what we're getting a reference to then of course we need to name it something but we'll just name it player let's close that with a semicolon and if we just try and hit save now and head back into Unity we see that an empty slot called player now appears all we need to do now to make this player variable point to our specific player is to take the player and drag him into that slot so now every time we write player in our code it refers to that object to test this we can go inside of our update and we can try displaying the position of our player in the console to do that we write debug.log to write a message to the console inside of the parenthesis we then write player do position and we close it off with a semicolon now every frame we should display a message in the console with the position of a player let's save that head back into unity and hit play and if we go and select our console we can now see that position updating if we select our player the two numbers should correspond so we can see here that our player is currently falling and so his y value is rapidly decreasing and it does the same thing in the console we can also see that he's moving a bit forward on the Z again he's also moving forward in the console so now that we have this link between our script and the player we can take the position of our player and feed it to the camera so that stop playing head back into visual studio and instead of writing the position of our player we'll go transform and when whenever we write this with a non capital T it refers to the transform of our current object that means the object that this script is sitting on it also says so here the transform attached to this game object so by writing transform and then do position we're referring to the position of our camera because our follow player script is sitting on that object and just like we were able to display a position we can also set it equal to something else so now we could move our camera anywhere in the world but we want to move it to a very specific place and that's the position of our player so set it equal to player. position and again we'll close this off with a semicolon so now our camera's position this game object position is going to be set equal to the player position every frame so let's save that head back into unity and technically our code doesn't have any errors but there's a main problem with this let's try zooming out in the scene view so we can see what's going on and hitting play we can see that indeed our camera is following the player but it's following the center of our player and that means that right when we start the game our main camera snaps to be inside the player object you can see that the effect here is that we're getting kind of a firstperson view of course this might be something that you want for your game but in our case I think it would be better if we move our camera a bit back from the player and a tiny bit up to do that we'll create another variable so again we'll write public and I'm going to introduce you to another data type this one is called Vector 3 and a vector 3 is actually really really simple all this does is store three numbers a float stores one number with decimal places a vector three stor fores three floats and that makes it really easy to use when it comes to position of data because we have an x a y and a z so if we go ahead and name this one offset save it and go into Unity we should now be able to specify an offset on the X Y and Z value so in our case we wanted to remain centered on the X so we'll leave that at zero but we do want it to lift it a bit on the Y here so we'll set that to something like one and we definitely also want to pull it back so we'll set the Z here to something like 5 so now that we have this offset on the different axes all we need to do is add it onto our player's position so to do that we'll go in here and say player. position and then plus offset and we are very used to seeing the plus here being used between two numbers but unless you have experience with college level math you probably haven't seen it between two vectors how do we add three numbers onto other three numbers it's kind of weird if you want to learn more about what's going on here I have a video on vectors that you should definitely check out basically what's happening is we're taking the exposition of a player which is current is zero and we're adding zero onto that so that's still zero then we're taking the Y which is 1.16 in this case and we're adding one onto that and then finally on our Z this is currently zero as well and we're adding ne5 onto that so that's ne5 on the Z and we keep doing that as the player moves forward so in this case our X would still be zero our y would be 1.16 + 1 which is 2.16 and our Z would be this number 5 which is equal to 1.63 so make sure you save your script and hit play and our camera should now follow all player with the knife's offset position and this is much better than parenting because if we tilt off the ground here you can see the cube rotating but the camera is staying in place so that was pretty much it for this video if you liked it make sure to subscribe so you don't miss a future episode also a lot of you guys have been saying that you aren't notified when I upload a new video so make sure that doesn't happen click the little bell icon next to the Subscribe button and hit send all notifications Why YouTube why do you have to do that oh uh we don't know other than that I will see you in the next video thanks to all the awesome people who donated in January and a special thanks to Derek heemskirk facel marifi James Kell Hound Robert bonam Peter lock and Jason dto if you want to become a patron yourself you can do so at patreon.com Brees thanks a lot guys
