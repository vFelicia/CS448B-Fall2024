With timestamps:

00:00 - today we'll get started programming in
00:01 - unity I did a poll asking what language
00:03 - you guys would like to see and the
00:04 - results were well conclusive so today
00:07 - we'll be creating our first script we'll
00:08 - have a look at how you can change
00:09 - properties and even add forces to an
00:11 - object so I'm really excited let's just
00:13 - jump right into it so whenever we want
00:14 - to program in unity we create what is
00:16 - called a script to do this we click on
00:18 - the object that we wanted to sit on in
00:20 - our case the player and we hit add
00:22 - component then we go down here select
00:24 - new script and we can give a name to our
00:27 - script in our case it's going to be
00:28 - something like player movement but you
00:30 - can really choose anything you'd like
00:32 - and we select the language in our case
00:33 - that's going to be C so I create an ad
00:36 - and you can see that Unity adds a new
00:38 - component and that's because scripts and
00:39 - unity are pretty much just custom
00:41 - components that we get to tell what to
00:43 - do it's also created a script file down
00:45 - here in the project panel and that means
00:47 - that we can add it to other objects as
00:48 - well so if we now select our ground we
00:50 - can drag our player movement onto that
00:52 - in order to make it affect the ground as
00:54 - well but we don't want to do that so
00:56 - let's just right click on it and hit
00:57 - remove component so if we go back to our
00:59 - player and double click on a player
01:01 - movement script it's going to open up in
01:03 - your script editor if you're on Windows
01:05 - that's either going to be Visual Studio
01:07 - which is what I'm using or mono develop
01:09 - which is also what you're going to be
01:10 - using on the Mac it's really up to
01:12 - personal preference and you're going to
01:13 - be able to follow along just fine with
01:15 - either so this is what a script looks
01:17 - like just when we create it there's a
01:18 - lot of scary stuff going on here the
01:20 - thing about learning to program is that
01:22 - at first you're just going to have to
01:24 - ignore most of the stuff that's going on
01:26 - to clean it up a little bit we can go
01:27 - ahead and delete the two using tags up
01:29 - here and really the only thing that you
01:31 - should focus on right now is these two
01:34 - functions where it says void start and
01:37 - void update and these are created by
01:38 - unity automatically so let's have a look
01:40 - at the start function up here the neat
01:42 - thing about the start function is that
01:43 - it will run when your game starts that
01:46 - means that whatever code you put between
01:48 - this curly bracket and this curly
01:50 - bracket so that means in here is going
01:52 - to be executed when you start the game
01:54 - do note that in C it doesn't matter how
01:56 - many spaces you have you can really
01:58 - space it out any way you want you can
01:59 - even and put it on separate lines as
02:01 - long as you don't split up a word like
02:03 - this let's just try and see if this is
02:04 - working by displaying a message to
02:06 - ourselves to do that we write debug.log
02:08 - and make sure to have capital letters
02:10 - the same places that I do because C is
02:13 - Cap sensitive then we open up a
02:14 - parenthesis and you can see that it
02:16 - automatically closes one as well then in
02:18 - quotation marks we get to write a
02:20 - message in our case we'll just write
02:21 - something like Hello World make sure you
02:24 - end this line with a semicolon you're
02:26 - going to be doing that a lot whenever
02:27 - you write a command you're going to
02:29 - ended with a semicolon if we now save
02:31 - this by hitting crl s you can see that
02:34 - it saves up here head back into unity
02:36 - and hit play Nothing is really going to
02:38 - happen in our game view however if we go
02:41 - ahead and look at the console here you
02:43 - can see that it now says hello world if
02:45 - you don't already have the console open
02:47 - you can go window and then console so
02:49 - the console here is used by US to debug
02:51 - our code it allows us to write messages
02:53 - by using debug.log followed by our
02:55 - message and it also displays warnings
02:58 - and errors about the code that rewrite
03:00 - so we really have a LoveHate
03:01 - relationship to the console if something
03:03 - isn't working in your game make sure to
03:05 - check the console and see if there's any
03:06 - errors or Warnings they might help you
03:08 - troubleshoot the problem all right so
03:10 - writing hello world in the console is a
03:12 - bit boring let's have a look at what
03:14 - else we can do well in fact we can do
03:16 - pretty much anything in unity we can
03:18 - modify values we can add forces to
03:21 - objects we can add explosions create
03:23 - game timers and menus the possibilities
03:25 - are pretty much endless and that's also
03:27 - kind of what makes programming scary is
03:28 - that you have a lot of fun Tech
03:30 - available to you but let's try and focus
03:32 - on a specific problem so let's say that
03:33 - we want to go into a rigid body and
03:35 - disable gravity for that object to do
03:38 - that we need first of all to reference
03:40 - this rigid body component and unity
03:42 - makes that really easy if we go into our
03:44 - script and go above our functions on
03:46 - this empty space here create some new
03:48 - lines and then write public then the
03:50 - name of our component our component is
03:52 - called rigid body then the name of the
03:54 - component that we want to modify in our
03:56 - case rigid body and now we need to give
03:58 - this reference a name that will use
04:00 - internally so we can call it something
04:02 - like RB for rigid body if we save that
04:05 - and hit back into Unity we should now
04:07 - see an empty slot here with the name of
04:09 - RB we can then take our rid body and
04:12 - drag it into that slot so now whenever
04:14 - we write RB in our script it's going to
04:16 - refer to this particular rigid body that
04:19 - means that if we go back into visual
04:20 - studio and instead of writing debug.log
04:22 - here write something like rb. use
04:25 - gravity we can set that equal to either
04:28 - true or false in our case we're going to
04:30 - set it to false and then of course end
04:32 - with a semicolon so save that let's hit
04:35 - inner unity and let's see if this value
04:37 - isn't going to change when we hit play
04:38 - so let's hit play and indeed the used
04:40 - gravity changes to false we can see that
04:43 - our Cube here is hovering in the air and
04:45 - if we were to duplicate him so that the
04:47 - two would Collide you can see just how
04:49 - cool of an effect that already gives us
04:51 - but this is just editing a tiny little
04:53 - property we can also make our rigid body
04:55 - do different things if we quit playing
04:57 - go back into Visual Studio we can
04:59 - actually add a force to that rigid body
05:01 - so instead of writing rb. use gravity
05:04 - let's write rb. add force and again we
05:07 - open a parenthesis close a parenthesis
05:10 - and then end with a semicolon however
05:12 - you can currently see that this is
05:13 - displaying red and the reason why is
05:15 - that we need to specify a few things
05:17 - these are called function arguments the
05:19 - add force method wants to know how much
05:21 - force it should add in the different
05:22 - directions so we could start with zero
05:25 - on the x- axis we could do something
05:26 - like 200 on the Y and maybe 500 on Z
05:30 - notice how I separate each number with a
05:32 - comma we can then hit save go back into
05:34 - unity and when we now play we should see
05:36 - a force being applied to this object
05:38 - awesome so let's stop playing head back
05:40 - into visual studio and what we want to
05:42 - do is not only add a force in the
05:43 - beginning of the game we want to add a
05:45 - constant force in order to move our
05:47 - object forward to do that we can't use
05:49 - the start method remember this is only
05:51 - called once right when we start the game
05:53 - however our update function is called
05:55 - once per frame that means that whenever
05:57 - the computer draws a new image and it
05:59 - does this multiple times a second this
06:02 - function is going to run so let's again
06:03 - put this on a new line to make things a
06:05 - bit easier to see and we can then write
06:07 - RB do add Force just like we did up here
06:10 - we can input Zer on the X Zer on the Y
06:13 - and let's try 200 on the Z again
06:15 - remember to close it with a semicolon
06:17 - let's also take our entire start
06:18 - function up here and remove it so now we
06:21 - hit save go back into Unity hit play and
06:23 - we should see our Cube just launching
06:25 - into the distance and indeed we do
06:27 - however even though our game currently
06:28 - runs just fine and we get no errors in
06:30 - the console we do actually have an error
06:32 - in our code if we stop playing head back
06:35 - into Visual Studio we can see that
06:36 - everything looks just fine but that's
06:38 - one problem and that is if this method
06:40 - is called once per frame and we add a
06:42 - fixed amount of force each frame how
06:44 - much force we add over a second is
06:46 - actually going to totally depend on our
06:48 - frame rate that means if you have a
06:49 - really good computer that is drawing a
06:51 - bunch of frames a second the cube is
06:53 - going to travel faster than on a slower
06:55 - computer that doesn't run as many frames
06:57 - per second and the frame rate can even
06:58 - vary on the same comp computer if a
07:00 - bunch of stuff is going on on the screen
07:02 - the computer usually slows down a bit in
07:03 - order to handle everything or if
07:05 - something is happening in the background
07:06 - that might also change your frame rate
07:08 - so in order to even out these
07:10 - differences what we do is we multiply
07:12 - this value the 200 here with what is
07:14 - called time. Delta time this is a bit
07:17 - confusing but basically what time. Delta
07:19 - time is is the amount of seconds since
07:21 - the computer drew the last frame so if
07:22 - the update is running 10 times a second
07:24 - this value is going to be 0.1 and if
07:26 - it's running 20 times a second this
07:28 - value is going to be 05 so the higher
07:31 - the frame rate the lower this value is
07:32 - going to get and therefore it's going to
07:34 - even out the advantage that you would
07:35 - get if you were running on a good
07:36 - computer if you don't get this right
07:38 - away that's totally understandable I
07:39 - sure didn't the first time just right
07:41 - after me for now so if we now save this
07:43 - and go back into Unity we should
07:44 - actually see a pretty big difference and
07:46 - that is our cube is not moving now at
07:48 - all and that's because on my system it's
07:50 - drawing a lot of frames and so overall
07:52 - the value gets a lot smaller than it was
07:54 - before the work around for this is super
07:56 - simple we just need to go into our
07:58 - script and make this value bigger I'm
07:59 - just going to add another Zero Save that
08:01 - go into Unity hit play and we should see
08:04 - him just storming off here it doesn't
08:06 - look like much of a difference but now
08:08 - we can at least know that it looks the
08:09 - same way on all systems the final thing
08:11 - we're going to do is yet another one of
08:13 - those it doesn't look like it's wrong
08:14 - but it's actually a little wrong kind of
08:16 - things and that is that Unity really
08:18 - likes it if we use what is called fixed
08:20 - update instead of update for calculating
08:22 - physics and in our case we are using the
08:24 - unity physics system so just make sure
08:26 - that whenever you do physics stuff if
08:28 - you're adding Force or changing velocity
08:30 - do it inside of the fixed update Unity
08:32 - likes that a lot better and it's going
08:34 - to make everything look a lot smoother
08:35 - when you collide with stuff also if you
08:37 - find all this confusing I totally get it
08:39 - one thing that you can do is use the
08:41 - fact that we can make comments inside of
08:43 - our code so you can see this line here
08:45 - is great out that's because it's marked
08:47 - with these two slashes whenever you
08:48 - create two slashes and follow it up with
08:51 - some text that text is not going to be
08:52 - included in your code and so it allows
08:54 - you to say stuff like this so just go
08:56 - through your code and add some comments
08:58 - to help you out you can even add
08:59 - comments at the end of a line also I see
09:01 - a lot of beginners using spaces to
09:03 - indent their code I find it a lot easier
09:05 - to just use tab but it's something
09:07 - programmers have argued about for
09:08 - decades so let's just save our code a
09:10 - final time and enjoy the
09:13 - result until the next video you can of
09:16 - course play around with this by adding
09:17 - more objects into the game let's add
09:19 - another Cube here for example and this
09:21 - already has a box collider so it should
09:23 - actually
09:24 - Collide that's pretty much it for this
09:26 - video I hope you liked it if you did
09:28 - make sure to subscribe so you miss out
09:29 - on future episodes I upload on Sundays
09:31 - and Wednesdays also if you're a fan of
09:33 - the series you can always support me
09:34 - over at patreon patreon allows you to
09:36 - donate a monthly amount of your choosing
09:38 - totally cancelable at any time it's
09:40 - really awesome so if you want to see
09:41 - more content like this or just buy me a
09:43 - cup of coffee you're very welcome over
09:45 - at patreon.com Brees also if you found
09:47 - this programming episode really really
09:49 - difficult you can definitely check out
09:50 - the C beginner course it really focuses
09:52 - on teaching the C language so thanks for
09:55 - watching and I will see you in the next
09:56 - video thanks to all the awesome people
09:58 - who donated in Jan and a special thanks
10:00 - to Derek heemskirk facel marifi James
10:02 - Kell Hound Robert bonam Peter lock and
10:04 - Jason dto if you want to become a patron
10:06 - yourself you can do so at patreon.com
10:08 - Brees thanks a lot guys

Cleaned transcript:

today we'll get started programming in unity I did a poll asking what language you guys would like to see and the results were well conclusive so today we'll be creating our first script we'll have a look at how you can change properties and even add forces to an object so I'm really excited let's just jump right into it so whenever we want to program in unity we create what is called a script to do this we click on the object that we wanted to sit on in our case the player and we hit add component then we go down here select new script and we can give a name to our script in our case it's going to be something like player movement but you can really choose anything you'd like and we select the language in our case that's going to be C so I create an ad and you can see that Unity adds a new component and that's because scripts and unity are pretty much just custom components that we get to tell what to do it's also created a script file down here in the project panel and that means that we can add it to other objects as well so if we now select our ground we can drag our player movement onto that in order to make it affect the ground as well but we don't want to do that so let's just right click on it and hit remove component so if we go back to our player and double click on a player movement script it's going to open up in your script editor if you're on Windows that's either going to be Visual Studio which is what I'm using or mono develop which is also what you're going to be using on the Mac it's really up to personal preference and you're going to be able to follow along just fine with either so this is what a script looks like just when we create it there's a lot of scary stuff going on here the thing about learning to program is that at first you're just going to have to ignore most of the stuff that's going on to clean it up a little bit we can go ahead and delete the two using tags up here and really the only thing that you should focus on right now is these two functions where it says void start and void update and these are created by unity automatically so let's have a look at the start function up here the neat thing about the start function is that it will run when your game starts that means that whatever code you put between this curly bracket and this curly bracket so that means in here is going to be executed when you start the game do note that in C it doesn't matter how many spaces you have you can really space it out any way you want you can even and put it on separate lines as long as you don't split up a word like this let's just try and see if this is working by displaying a message to ourselves to do that we write debug.log and make sure to have capital letters the same places that I do because C is Cap sensitive then we open up a parenthesis and you can see that it automatically closes one as well then in quotation marks we get to write a message in our case we'll just write something like Hello World make sure you end this line with a semicolon you're going to be doing that a lot whenever you write a command you're going to ended with a semicolon if we now save this by hitting crl s you can see that it saves up here head back into unity and hit play Nothing is really going to happen in our game view however if we go ahead and look at the console here you can see that it now says hello world if you don't already have the console open you can go window and then console so the console here is used by US to debug our code it allows us to write messages by using debug.log followed by our message and it also displays warnings and errors about the code that rewrite so we really have a LoveHate relationship to the console if something isn't working in your game make sure to check the console and see if there's any errors or Warnings they might help you troubleshoot the problem all right so writing hello world in the console is a bit boring let's have a look at what else we can do well in fact we can do pretty much anything in unity we can modify values we can add forces to objects we can add explosions create game timers and menus the possibilities are pretty much endless and that's also kind of what makes programming scary is that you have a lot of fun Tech available to you but let's try and focus on a specific problem so let's say that we want to go into a rigid body and disable gravity for that object to do that we need first of all to reference this rigid body component and unity makes that really easy if we go into our script and go above our functions on this empty space here create some new lines and then write public then the name of our component our component is called rigid body then the name of the component that we want to modify in our case rigid body and now we need to give this reference a name that will use internally so we can call it something like RB for rigid body if we save that and hit back into Unity we should now see an empty slot here with the name of RB we can then take our rid body and drag it into that slot so now whenever we write RB in our script it's going to refer to this particular rigid body that means that if we go back into visual studio and instead of writing debug.log here write something like rb. use gravity we can set that equal to either true or false in our case we're going to set it to false and then of course end with a semicolon so save that let's hit inner unity and let's see if this value isn't going to change when we hit play so let's hit play and indeed the used gravity changes to false we can see that our Cube here is hovering in the air and if we were to duplicate him so that the two would Collide you can see just how cool of an effect that already gives us but this is just editing a tiny little property we can also make our rigid body do different things if we quit playing go back into Visual Studio we can actually add a force to that rigid body so instead of writing rb. use gravity let's write rb. add force and again we open a parenthesis close a parenthesis and then end with a semicolon however you can currently see that this is displaying red and the reason why is that we need to specify a few things these are called function arguments the add force method wants to know how much force it should add in the different directions so we could start with zero on the x axis we could do something like 200 on the Y and maybe 500 on Z notice how I separate each number with a comma we can then hit save go back into unity and when we now play we should see a force being applied to this object awesome so let's stop playing head back into visual studio and what we want to do is not only add a force in the beginning of the game we want to add a constant force in order to move our object forward to do that we can't use the start method remember this is only called once right when we start the game however our update function is called once per frame that means that whenever the computer draws a new image and it does this multiple times a second this function is going to run so let's again put this on a new line to make things a bit easier to see and we can then write RB do add Force just like we did up here we can input Zer on the X Zer on the Y and let's try 200 on the Z again remember to close it with a semicolon let's also take our entire start function up here and remove it so now we hit save go back into Unity hit play and we should see our Cube just launching into the distance and indeed we do however even though our game currently runs just fine and we get no errors in the console we do actually have an error in our code if we stop playing head back into Visual Studio we can see that everything looks just fine but that's one problem and that is if this method is called once per frame and we add a fixed amount of force each frame how much force we add over a second is actually going to totally depend on our frame rate that means if you have a really good computer that is drawing a bunch of frames a second the cube is going to travel faster than on a slower computer that doesn't run as many frames per second and the frame rate can even vary on the same comp computer if a bunch of stuff is going on on the screen the computer usually slows down a bit in order to handle everything or if something is happening in the background that might also change your frame rate so in order to even out these differences what we do is we multiply this value the 200 here with what is called time. Delta time this is a bit confusing but basically what time. Delta time is is the amount of seconds since the computer drew the last frame so if the update is running 10 times a second this value is going to be 0.1 and if it's running 20 times a second this value is going to be 05 so the higher the frame rate the lower this value is going to get and therefore it's going to even out the advantage that you would get if you were running on a good computer if you don't get this right away that's totally understandable I sure didn't the first time just right after me for now so if we now save this and go back into Unity we should actually see a pretty big difference and that is our cube is not moving now at all and that's because on my system it's drawing a lot of frames and so overall the value gets a lot smaller than it was before the work around for this is super simple we just need to go into our script and make this value bigger I'm just going to add another Zero Save that go into Unity hit play and we should see him just storming off here it doesn't look like much of a difference but now we can at least know that it looks the same way on all systems the final thing we're going to do is yet another one of those it doesn't look like it's wrong but it's actually a little wrong kind of things and that is that Unity really likes it if we use what is called fixed update instead of update for calculating physics and in our case we are using the unity physics system so just make sure that whenever you do physics stuff if you're adding Force or changing velocity do it inside of the fixed update Unity likes that a lot better and it's going to make everything look a lot smoother when you collide with stuff also if you find all this confusing I totally get it one thing that you can do is use the fact that we can make comments inside of our code so you can see this line here is great out that's because it's marked with these two slashes whenever you create two slashes and follow it up with some text that text is not going to be included in your code and so it allows you to say stuff like this so just go through your code and add some comments to help you out you can even add comments at the end of a line also I see a lot of beginners using spaces to indent their code I find it a lot easier to just use tab but it's something programmers have argued about for decades so let's just save our code a final time and enjoy the result until the next video you can of course play around with this by adding more objects into the game let's add another Cube here for example and this already has a box collider so it should actually Collide that's pretty much it for this video I hope you liked it if you did make sure to subscribe so you miss out on future episodes I upload on Sundays and Wednesdays also if you're a fan of the series you can always support me over at patreon patreon allows you to donate a monthly amount of your choosing totally cancelable at any time it's really awesome so if you want to see more content like this or just buy me a cup of coffee you're very welcome over at patreon.com Brees also if you found this programming episode really really difficult you can definitely check out the C beginner course it really focuses on teaching the C language so thanks for watching and I will see you in the next video thanks to all the awesome people who donated in Jan and a special thanks to Derek heemskirk facel marifi James Kell Hound Robert bonam Peter lock and Jason dto if you want to become a patron yourself you can do so at patreon.com Brees thanks a lot guys
