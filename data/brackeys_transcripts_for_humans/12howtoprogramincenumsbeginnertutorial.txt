With timestamps:

00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to
00:05 - video number 12 in the how to program in
00:07 - C course this video is going to be about
00:11 - enims so I excuse that it's been such a
00:14 - while since the last video but as you
00:16 - can see I've been really busy and also I
00:19 - got sick right after my vacation so uh
00:22 - if my voice sounds kind of weird uh that
00:24 - might be why but uh without uh further
00:28 - Ado I quickly want to mention that uh
00:30 - The brackus Forum is the place to be if
00:32 - you have any questions or the code is
00:35 - not working or something and uh also for
00:38 - you the those of you who are using uh
00:41 - Unity uh I've just released a new
00:44 - version of UPA toolkit on the store that
00:47 - introduces uh blend modes and a bunch of
00:50 - new layer functionality so that's super
00:53 - cool I might make a video about that too
00:56 - uh we'll see cool so let's open up SU
01:00 - studio and get started so enums uh are
01:04 - fairly easy to understand once you know
01:07 - why they are useful so let me just line
01:10 - up a case here where enums would be
01:13 - great so the formal definition of an
01:16 - enum is basically um a uh a type that we
01:21 - create uh consisting of a bunch of
01:24 - constants that we associate with the
01:27 - name uh so an example of an en uh if I
01:31 - just make one up here uh is if we type
01:34 - in enum uh that's just like we type in
01:37 - class or anything else that's a keyword
01:41 - and uh then we give it a name and uh
01:43 - this name could be uh for example uh
01:49 - Direction this is a very common example
01:52 - and uh then we open and close some
01:54 - square brackets and we close it up with
01:56 - a
01:57 - semicolon uh not square brackets Cly
01:59 - brackets and then in here we could do uh
02:03 - north
02:04 - west
02:07 - east and south and they don't need to be
02:10 - in any particular order uh and uh this
02:14 - way down here if we wanted to access
02:16 - this we could uh make a new Direction so
02:19 - we could say uh Direction and Call this
02:23 - uh maybe deer or whatever you want to
02:26 - call this and we could then set it equal
02:29 - to Direction Dot and then it will show
02:31 - the different options that we've given
02:33 - given it so it's basically a uh way to
02:37 - uh Define a bunch of types that are very
02:39 - easily readable uh instead of just uh
02:42 - using an integer to represent uh
02:45 - different things or a string so uh a a
02:48 - good example of when you would use this
02:50 - is uh again we have this idea of a base
02:53 - class called animal and then we derive
02:56 - from that uh into a dog class so this do
02:59 - dark class is derived from animal and so
03:02 - it will inherit all of these uh members
03:05 - and the dark class adds on a public void
03:08 - that will print out uh everything we
03:10 - know about the dark to our console uh so
03:13 - that includes currently the name age and
03:15 - happiness and uh if we should add onto
03:18 - this let's say we wanted to add a dark
03:20 - breed so I found this useful uh list of
03:23 - all dark breeds uh so I wouldn't run out
03:27 - and uh that's one of the weirder
03:29 - searches made today and uh uh basically
03:32 - if we wanted to Define uh a a breed for
03:36 - our dog we could make this a uh public
03:40 - integer called
03:42 - breed and uh then uh let's create a
03:45 - Constructor also here so again all of
03:48 - this with inheritance and Constructors
03:49 - that's covered in an earlier video so
03:52 - let's just quickly make a public doc
03:55 - Constructor here
03:58 - um like this
04:01 - and this will take
04:03 - in a name so we're going to do string
04:08 - name an uh integer for the age and a
04:12 - float for the
04:16 - happiness and then down here uh we'll
04:18 - simply Set uh name equal to the name
04:21 - that we've passed in uh do the same with
04:24 - the
04:25 - age and the heaviness
04:30 - Okay cool so now we have this
04:32 - Constructor set up and uh if we wanted
04:34 - to pass in a breed here uh we could
04:36 - simply go uh in breed and uh set the
04:40 - breed down
04:46 - here and then when we wanted to print
04:49 - this out uh we of course don't want to
04:51 - print a number but then we could uh make
04:53 - a switch statement for example that
04:55 - would check for uh the index of the
04:58 - breed um so we could do a switch for the
05:03 - breed and then we can define a bunch of
05:06 - different uh cases so uh we could Define
05:09 - that if this was uh equal to zero we
05:13 - would print out that the breed was a
05:18 - bulldog and uh and you can just keep on
05:21 - doing that and we we would probably be
05:23 - forced to do a default one also because
05:26 - we uh there are a bunch of breeds uh in
05:30 - the world of dogs and we would probably
05:32 - not be able to write out all of them
05:34 - here so you can see that that's a very
05:36 - cusome way and also it's hard to
05:39 - remember uh which index is associated
05:42 - with what so you would have to
05:43 - constantly check when using this so a
05:46 - better way to do this would maybe to uh
05:49 - turn this into a a string and this could
05:51 - of course be done um so you just change
05:54 - this to string and now we would simply
05:56 - write
05:58 - out the the uh
06:01 - oops write out the breed as we've done
06:04 - with anything else so simply write out
06:06 - the breed here to the console and then
06:09 - down here when we make a a new dog we'll
06:12 - simply say dog and we'll call this one
06:15 - uh Hulk and we'll make it a new dog
06:19 - called Hulk with a uh an age of six and
06:23 - a happiness of
06:25 - 0.7 and uh we could then make the breed
06:29 - a
06:30 - um what do we want to do this time a
06:33 - boxer like this uh but this way when we
06:38 - print out
06:40 - Hulk we will notice that it actually
06:43 - looks fine we can see that it says the
06:44 - breed is a boxer but let's imagine that
06:47 - we have a bit of a bigger program and uh
06:51 - we actually want to do something uh with
06:54 - the knowledge of the breed we don't want
06:56 - to just print it out we actually want to
06:58 - have some logic that depends on what
07:00 - breed it is again we could go in and
07:02 - make a switch statement but this way uh
07:05 - we don't uh we have to actually support
07:08 - all of the different types of breeds and
07:10 - that's maybe not something uh we want I
07:13 - mean there are so many here and uh we
07:15 - don't want to sit in sit there and type
07:17 - in all of them and so our code could be
07:20 - easily broken so what we do instead is
07:23 - we simply limit our possibilities and uh
07:26 - this is especially great if you're
07:28 - working multiple people people because
07:30 - it makes the code very readable and and
07:32 - easy um to uh not up so to say and
07:36 - uh we basically do this by up here
07:38 - creating an
07:40 - enum and uh this will be our uh breed
07:45 - and we do a cap capital B here because
07:47 - we're defining a type and uh we uh
07:50 - simply use the same syntax here to then
07:54 - type in a
07:56 - bulldog a boxer we could do a
08:00 - Chihuahua and uh you could just keep
08:03 - going here
08:04 - Bri and uh you can do as many as you
08:06 - want uh by the way some people like to
08:09 - type it
08:10 - out like
08:12 - this uh and that's completely valid even
08:16 - some people do it like this um and again
08:20 - that's just fine uh but when we are not
08:23 - talking about uh a lot of of of types um
08:26 - of values uh I I like to just to on one
08:30 - one line there so uh now we have all of
08:33 - our different options and you will
08:34 - notice that uh spaces uh cannot be used
08:38 - here um but basically now we have
08:40 - defined this we simply need to turn our
08:43 - type here instead of string into
08:46 - breed and this way down here uh it will
08:51 - simply print out the breed so when we
08:54 - pass in here uh what breed we want we
08:57 - simply do Capital breed dot oops and
09:01 - then you can select whatever one you
09:03 - want so if we want this to be a CH
09:05 - chihuaha called
09:08 - Hulk uh we simply do that and uh we save
09:12 - this and hit play and it's going to say
09:14 - that we can add implicitly convert oh
09:17 - that's because we need to change the
09:19 - type there also we try this again you
09:22 - can see that it prints out that our
09:24 - breed is of type chiawa and you can see
09:27 - that when uh printing out uh an enum uh
09:31 - the uh conversion to a string actually
09:33 - happens automatically if you wanted to
09:35 - uh be specific in telling uh whoever is
09:39 - reading this that it is actually not a
09:41 - string you can of course call the two
09:43 - string uh method um that's a bit more
09:46 - explicit but uh really uh
09:49 - unnecessary cool so that's basically
09:52 - enumerations for you uh one last thing
09:55 - you can Define values for each of these
09:57 - and when I say values I mean
10:00 - integer
10:01 - values um but uh that's not really
10:04 - needed in most cases so I think we'll
10:06 - just uh stay away from that uh but
10:09 - that's enum's uh a basic introduction to
10:13 - enums and and how they can be used so
10:16 - that's basically all for this video I uh
10:20 - hope you enjoyed it and I'll see you in
10:21 - the next one
10:29 - oh

Cleaned transcript:

thanks for tuning in at braies hello everyone and welcome to video number 12 in the how to program in C course this video is going to be about enims so I excuse that it's been such a while since the last video but as you can see I've been really busy and also I got sick right after my vacation so uh if my voice sounds kind of weird uh that might be why but uh without uh further Ado I quickly want to mention that uh The brackus Forum is the place to be if you have any questions or the code is not working or something and uh also for you the those of you who are using uh Unity uh I've just released a new version of UPA toolkit on the store that introduces uh blend modes and a bunch of new layer functionality so that's super cool I might make a video about that too uh we'll see cool so let's open up SU studio and get started so enums uh are fairly easy to understand once you know why they are useful so let me just line up a case here where enums would be great so the formal definition of an enum is basically um a uh a type that we create uh consisting of a bunch of constants that we associate with the name uh so an example of an en uh if I just make one up here uh is if we type in enum uh that's just like we type in class or anything else that's a keyword and uh then we give it a name and uh this name could be uh for example uh Direction this is a very common example and uh then we open and close some square brackets and we close it up with a semicolon uh not square brackets Cly brackets and then in here we could do uh north west east and south and they don't need to be in any particular order uh and uh this way down here if we wanted to access this we could uh make a new Direction so we could say uh Direction and Call this uh maybe deer or whatever you want to call this and we could then set it equal to Direction Dot and then it will show the different options that we've given given it so it's basically a uh way to uh Define a bunch of types that are very easily readable uh instead of just uh using an integer to represent uh different things or a string so uh a a good example of when you would use this is uh again we have this idea of a base class called animal and then we derive from that uh into a dog class so this do dark class is derived from animal and so it will inherit all of these uh members and the dark class adds on a public void that will print out uh everything we know about the dark to our console uh so that includes currently the name age and happiness and uh if we should add onto this let's say we wanted to add a dark breed so I found this useful uh list of all dark breeds uh so I wouldn't run out and uh that's one of the weirder searches made today and uh uh basically if we wanted to Define uh a a breed for our dog we could make this a uh public integer called breed and uh then uh let's create a Constructor also here so again all of this with inheritance and Constructors that's covered in an earlier video so let's just quickly make a public doc Constructor here um like this and this will take in a name so we're going to do string name an uh integer for the age and a float for the happiness and then down here uh we'll simply Set uh name equal to the name that we've passed in uh do the same with the age and the heaviness Okay cool so now we have this Constructor set up and uh if we wanted to pass in a breed here uh we could simply go uh in breed and uh set the breed down here and then when we wanted to print this out uh we of course don't want to print a number but then we could uh make a switch statement for example that would check for uh the index of the breed um so we could do a switch for the breed and then we can define a bunch of different uh cases so uh we could Define that if this was uh equal to zero we would print out that the breed was a bulldog and uh and you can just keep on doing that and we we would probably be forced to do a default one also because we uh there are a bunch of breeds uh in the world of dogs and we would probably not be able to write out all of them here so you can see that that's a very cusome way and also it's hard to remember uh which index is associated with what so you would have to constantly check when using this so a better way to do this would maybe to uh turn this into a a string and this could of course be done um so you just change this to string and now we would simply write out the the uh oops write out the breed as we've done with anything else so simply write out the breed here to the console and then down here when we make a a new dog we'll simply say dog and we'll call this one uh Hulk and we'll make it a new dog called Hulk with a uh an age of six and a happiness of 0.7 and uh we could then make the breed a um what do we want to do this time a boxer like this uh but this way when we print out Hulk we will notice that it actually looks fine we can see that it says the breed is a boxer but let's imagine that we have a bit of a bigger program and uh we actually want to do something uh with the knowledge of the breed we don't want to just print it out we actually want to have some logic that depends on what breed it is again we could go in and make a switch statement but this way uh we don't uh we have to actually support all of the different types of breeds and that's maybe not something uh we want I mean there are so many here and uh we don't want to sit in sit there and type in all of them and so our code could be easily broken so what we do instead is we simply limit our possibilities and uh this is especially great if you're working multiple people people because it makes the code very readable and and easy um to uh not up so to say and uh we basically do this by up here creating an enum and uh this will be our uh breed and we do a cap capital B here because we're defining a type and uh we uh simply use the same syntax here to then type in a bulldog a boxer we could do a Chihuahua and uh you could just keep going here Bri and uh you can do as many as you want uh by the way some people like to type it out like this uh and that's completely valid even some people do it like this um and again that's just fine uh but when we are not talking about uh a lot of of of types um of values uh I I like to just to on one one line there so uh now we have all of our different options and you will notice that uh spaces uh cannot be used here um but basically now we have defined this we simply need to turn our type here instead of string into breed and this way down here uh it will simply print out the breed so when we pass in here uh what breed we want we simply do Capital breed dot oops and then you can select whatever one you want so if we want this to be a CH chihuaha called Hulk uh we simply do that and uh we save this and hit play and it's going to say that we can add implicitly convert oh that's because we need to change the type there also we try this again you can see that it prints out that our breed is of type chiawa and you can see that when uh printing out uh an enum uh the uh conversion to a string actually happens automatically if you wanted to uh be specific in telling uh whoever is reading this that it is actually not a string you can of course call the two string uh method um that's a bit more explicit but uh really uh unnecessary cool so that's basically enumerations for you uh one last thing you can Define values for each of these and when I say values I mean integer values um but uh that's not really needed in most cases so I think we'll just uh stay away from that uh but that's enum's uh a basic introduction to enums and and how they can be used so that's basically all for this video I uh hope you enjoyed it and I'll see you in the next one oh
