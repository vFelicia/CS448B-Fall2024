With timestamps:

00:00 - this video is brought to you by Aron
00:01 - meta thank you so much for donating if
00:03 - you want to support Brees yourself you
00:04 - can go to patreon.com Brees thanks for
00:07 - tuning in at
00:09 - braies hello everyone and welcome to
00:11 - this video on creating a multiplayer PSN
00:13 - Unity today we'll be making a kill feed
00:16 - which basically means that whenever a
00:17 - player kills another player that will
00:20 - display in the top right corner of uh
00:23 - all of the different clients connected
00:25 - so that you will be notified whenever um
00:28 - something happens in the game
00:30 - you can also uh easily turn this into a
00:33 - more generic notification system uh that
00:35 - also says whenever a player dies joins
00:38 - disconnects and even add chat
00:40 - functionality but for now we'll just
00:42 - keep it simple with a kill feed so we'll
00:43 - be building a simple UI for doing that
00:46 - um for uh spawning in these um UI pieces
00:50 - and then deleting them after a certain
00:51 - amount of seconds and we'll also be uh
00:54 - doing a bit of backend integration so
00:56 - that we have an easy way of keeping
00:57 - track of whenever a player is killed and
01:00 - sending on a username of the player and
01:02 - a username of whoever killed him so uh
01:05 - without further Ado let's just jump
01:07 - right into it so you can see I'm here in
01:09 - unity and what I want to begin with is
01:11 - just navigating over to our main level
01:14 - so we have something to build our UI on
01:16 - top of and I want of course to integrate
01:18 - this into our preab called the player UI
01:21 - which is spawned into the game
01:22 - automatically for us so um inside of
01:25 - this we can go ahead and create a UI
01:28 - panel that there we go the panel there
01:31 - and let's make this anchor to the top
01:33 - right and let's definitely size this
01:36 - down something like that and I also want
01:38 - to drag it out a bit uh from the corner
01:41 - something like that looks pretty decent
01:43 - and actually don't want the background
01:45 - here in the game but for now I'll just
01:47 - keep it so we can easily see what's
01:49 - going on and I'm going to rename this
01:51 - one to our kill feed you could also do
01:54 - notifications chat whatever for now this
01:57 - is going to be our kill feed and um what
02:00 - I want to do is add a separate component
02:03 - to this called kill feed and this is
02:05 - going to be a script that we'll create
02:06 - in a second but I just want to go ahead
02:08 - and add it for now and uh under this
02:12 - object is where we will have our UI
02:14 - elements uh for the actual little pieces
02:17 - of information so in here we will have a
02:19 - well a kill or a death or some kind of
02:22 - notification so we'll have a separate
02:25 - panel for that because I want to give
02:27 - that a background and now you can see
02:30 - that the panel here is overlaid on top
02:33 - of the background of our kill feed and I
02:35 - don't want that I want this to first of
02:37 - all be black there we go and I also want
02:41 - this panel here uh to uh have its own
02:45 - height so I want it to definitely uh
02:47 - size on the width here um a stretch on
02:50 - the width but I want it to have a
02:52 - separate height so let's uh go in here
02:54 - and create a uh vertical layout group
02:57 - and we've done this before and and uh
03:00 - you can see we don't want this to expand
03:02 - on the height instead we want to go into
03:04 - our panel here and Define a layout
03:07 - layout element with a preferred height
03:10 - of say
03:12 - 35 so uh this is going to be one kill
03:15 - and we can duplicate these along and I
03:17 - definitely want to uh up the spacing to
03:20 - something like five and apple is being
03:22 - annoying so let's remove that and um
03:25 - yeah that looks pretty good so let's
03:26 - delete the other ones again and this one
03:28 - here is going to be our our kill feed
03:32 - item so this is going to be a single
03:34 - item on the kill feed and uh under this
03:37 - we can create a UI text object as well
03:39 - which is going to display some
03:40 - information about that item so in our
03:43 - place we can say uh in our case we can
03:45 - say something like player one uh killed
03:49 - uh player two and I'll show you
03:51 - something really cool you can do with
03:53 - styling this in a second so let's make
03:55 - this totally white uh let's make it
03:58 - normal let's bump up the F size to
04:00 - something like 18 at least and let's
04:03 - also make sure that this text object is
04:05 - stretched to fit our kill feed item so
04:07 - let's just go up here hold down alt and
04:09 - press in the bottom right corner there
04:11 - we go let's also Center this on the uh
04:15 - vertical axis at least and you can also
04:19 - Center it here but I would actually like
04:21 - to snap it to the right I believe uh I
04:24 - don't know you can also just make it
04:26 - totally centered actually on the left
04:28 - might not be too bad and then what we
04:30 - can do is just move in the text a tiny
04:32 - bit here I actually kind of like that so
04:35 - if we create another item here just to
04:37 - see how what it looks like and maybe um
04:40 - just shorten this a bit I actually
04:42 - really like the look of that so uh
04:44 - that's what we're going to go with cool
04:47 - but again spend more time on the UI than
04:49 - I do as always um so now we can go ahead
04:52 - and remove the background image here you
04:54 - can remove the component I'd like to
04:56 - keep it there I just disable it and um
04:59 - you can see this already looks pretty
05:01 - decent but one thing that a lot of games
05:04 - uh do is um either substitute this
05:07 - killed uh uh name here or string or text
05:12 - U with some kind of Icon U maybe uh say
05:15 - a skull or U maybe an icon for the
05:18 - weapon uh that killed the player and you
05:20 - can definitely throw that in there what
05:22 - you would do is just create another uh
05:25 - layout group but this time a horizontal
05:27 - one and just have a text object here the
05:30 - first one then next you'll have an icon
05:32 - which is just an image and then a third
05:34 - text object as well that's super easy to
05:37 - do uh but since I don't have an icon we
05:39 - won't be doing that uh today and really
05:41 - it's not not necessary it's just one of
05:43 - those um UI things that you can have fun
05:45 - with on your own um and another thing
05:47 - that a lot of games uh do is that they
05:50 - highlight uh the player that killed the
05:53 - other player or um um maybe uh throw
05:56 - different colors in there to make it
05:57 - easier to uh see so what I want to show
06:01 - you now is that you can actually inside
06:03 - of this text component you can use some
06:05 - basic HTML tags so if you've done a bit
06:08 - of HTML or um or whatever you can see
06:13 - that if we write a b like this for bold
06:16 - and then close it off that is indeed
06:19 - going to be marked as bold and you can
06:21 - also do italic with an i here so let's
06:25 - make the last player there italic or you
06:28 - could even do color so let's make this a
06:31 - color equals then we can just do red or
06:33 - you could do some hex heximal color like
06:37 - that but we're just going to do red and
06:39 - then slash color down here and you can
06:41 - see that we've now made that player red
06:43 - so that is something that you can very
06:45 - easily add if you don't want to split
06:47 - this up into several ones and if you
06:49 - want it to be depending on the player so
06:52 - you can associate a color to each player
06:54 - or whatever so uh this is just what
06:56 - we're going to be doing for now I want
06:57 - to highlight the player that killed the
06:59 - other player and I want to make him uh
07:04 - italic so slash I there we go cool so I
07:09 - think that looks pretty good so what we
07:11 - can do now is actually uh add a separate
07:13 - script to the kill feed item as well the
07:17 - same way that we had a separate script
07:19 - for uh the room list and then a room
07:22 - list item so let's find here our room
07:25 - list item there we go and we have a
07:27 - separate SC script I don't remember what
07:29 - it's called now uh for listing those
07:32 - items so we have a kill feed and we have
07:35 - a kill feed item so let's go ahead and
07:38 - separate this out the kill feed item is
07:40 - going to be its own separate prefab just
07:42 - like we have a room list item down here
07:44 - let's drag that into our prefabs folder
07:46 - and now now remove it and uh let's uh
07:49 - also save these changes to our player UI
07:53 - so let's go to player UI and hit
07:57 - apply awesome so how do we want to do
08:01 - this well what I thought we would do is
08:03 - utilize the fact that in all games we
08:06 - have a a game object that is shared by
08:09 - all the objects who join called the game
08:11 - manager it sits right here so what we
08:14 - could do with this game manager is
08:16 - simply add a uh call back method some
08:20 - kind of delegate uh for whenever a
08:22 - player dies so in here we'll
08:26 - add in here we'll add a um
08:30 - public
08:32 - delegate void called on player
08:37 - killed um
08:39 - callback and uh this is going to take in
08:42 - a string with the player killed and a
08:45 - string with the source of the damage and
08:48 - this might be a player or it might be um
08:51 - say fall damage or whatever you could
08:53 - put anything in there and we could even
08:55 - put in an action we could make it
08:57 - something else like instead of on player
08:59 - kill we can just do on event or
09:01 - something and then we could put in an
09:03 - action here um so that it would be um
09:07 - Source did action on player and then you
09:11 - can put a sentence very easily together
09:14 - but for now we'll just do this and then
09:16 - we'll have a
09:18 - public um on player killed call back
09:21 - because uh this here is defining the
09:23 - type the type on player killed call back
09:26 - and then we want to actually create that
09:28 - in a variable we want to uh also just
09:31 - call that on player killed call back but
09:34 - now with a non capital O there and just
09:38 - close that off so again remember what we
09:40 - use callbacks for is whenever we want uh
09:43 - to call multiple methods uh from one
09:47 - place so basically what we are able to
09:49 - do here is have different um objects
09:52 - subscribe to this call back so they say
09:55 - uh whenever this event happens you
09:57 - should call this function and you should
09:58 - call this fun function and all of our
10:00 - different objects can do that that as
10:02 - they join more specifically when our
10:04 - player joins the room we want his uh UI
10:07 - to subscribe to this call back saying
10:10 - that whenever this happens uh you should
10:12 - display something on this UI using this
10:15 - function and then uh what we can do is
10:18 - not worry about all of the different UI
10:20 - elements when we actually calling it so
10:22 - we know that they've subscribed to this
10:24 - method themselves and so when we
10:26 - actually um when a player dies and we
10:28 - want to call this calling uh it it's
10:31 - called invoking the methods um we don't
10:33 - have to have a reference to them we only
10:35 - need a reference to this so that's U the
10:38 - cool thing about this so what this
10:39 - allows us to do is now head into our
10:42 - head into our um player code here where
10:46 - we have a function called die and this
10:49 - is called through an
10:51 - RPC so we we have a function called die
10:53 - here and you can see we said is that to
10:55 - true we increase the uh kills of our
10:58 - source player the one that kills us and
11:01 - we increase our deaths uh well in here
11:04 - we could just as well do game manager do
11:07 - instance and we do need an instance here
11:10 - because this is not static uh I don't
11:12 - know about static voids we won't get
11:14 - into that um so do instance and um then
11:18 - we do uh dot uh what did we call it we
11:22 - call it on player killed call back and
11:25 - then we do do invoke so this is going to
11:28 - call all of the functions subscribe to
11:30 - that and then we pass in our username so
11:34 - our username um is just the one uh that
11:38 - we have declared uh somewhere up here
11:40 - there is the username so that is loaded
11:42 - in and we also feed it the source so the
11:46 - source here is Source player. username
11:50 - and because we're using Source player I
11:52 - only want to do this in case Source
11:54 - player is not equal to null again the
11:56 - reason why we have this if statement is
11:58 - to be a a bit uh safe or secure and
12:02 - that's a good idea and it's also um to
12:05 - um make sure that we allow for other
12:08 - ways to damage players in case there
12:10 - wasn't a source player maybe it was just
12:12 - fall damage well then you can just
12:14 - instead of uh sending over the source
12:16 - player. username then you could do uh
12:18 - down here an L statement saying that the
12:21 - source was
12:22 - well gravity that's a very normal thing
12:26 - to do in these kind of kill feed
12:27 - situations so but for now we'll just
12:30 - leave this in here uh because we don't
12:32 - have any fall damage the only way to die
12:34 - is from other players and um that should
12:37 - indeed invoke the method so now all we
12:39 - need to do is subscribe to that uh event
12:42 - um so in order to do this let's actually
12:45 - build out our kill feed so our kill feed
12:47 - here what this is going to do is in the
12:49 - start method it's going to uh call
12:53 - something on the game manager it's going
12:54 - to go game manager do instance and Dot
12:58 - um
12:59 - um on player kill call back and it's
13:03 - going to add onto that another function
13:05 - that we'll create now so on
13:10 - kill and we can go ahead and create this
13:12 - method right away and we need it to be
13:14 - public because it's going to be called
13:16 - from the game manager whenever you're
13:17 - doing these call back things just make
13:19 - everything public it's much easier that
13:21 - way uh so public void on kill and we
13:25 - need the uh appropriate um parameters
13:28 - here so that is going to be a or
13:30 - arguments it's going to be a string with
13:32 - our player username the player and a
13:36 - string with the
13:38 - source and um then all we do is well for
13:43 - now we could just throw out a debug.log
13:44 - statement uh but yeah let's just do that
13:47 - so we throw our debug.log and then we
13:50 - can say um Source plus
13:54 - killed plus um the player
13:59 - there we go so it's that simple to do um
14:03 - and this should in fact work right away
14:06 - I mean it's not going to display on the
14:07 - UI it should just throw out a debug the
14:09 - log statement but we can see in here
14:11 - that uh whenever um the player spawns
14:15 - whenever the player spawns he also
14:17 - creates a prefab called the player UI
14:20 - and part of the player UI is the kill
14:22 - feed that has this script that means
14:25 - that we are going to register with the
14:26 - game manager that whenever on player
14:28 - kill
14:30 - call back is invoked we want that to
14:33 - call this function using the correct
14:35 - information and then inside of our
14:38 - player whenever we die we want to call
14:41 - that in F that that function we invoke
14:44 - all of them and that is going to point
14:46 - back over here and this is going to be
14:48 - called so uh this should in fact work
14:51 - right away and we should be able to test
14:53 - it out so let's just do a very quick
14:55 - test here um before we build the last
14:58 - thing which is just uh properly
15:00 - integrating it with the UI and then
15:02 - we're uh then we're done so let's just
15:04 - build out the player here and there we
15:06 - go whoops it's a tall player there
15:09 - that's better and uh let me just dog
15:13 - that over here while we uh log in and of
15:16 - course we want to log in using our login
15:19 - menu here let's do things the proper way
15:21 - so test 1 2 3 test 1 2 3 log in let's do
15:25 - the same here test 1 2 3
15:27 - 4 test 1 2 3 4 log in there we go so
15:32 - this one is logged in let's create a
15:33 - test room and there we go we're inside
15:37 - and let's do the same thing here and
15:38 - it's just going to wait to join here
15:40 - we've done this a million times and
15:43 - whenever it's joined there we go we
15:45 - should be able to Now kill this player
15:49 - and see that it says test 1 2 3 4 kill
15:51 - test 1 2 3 and if we go the other way
15:54 - around to kill test 1 2 3 4 it says test
15:57 - 1 2 3 killed test 1 2 3 4 so it flipped
16:01 - correctly and it's reporting it on all
16:03 - of the clients and in fact I have a cool
16:05 - way to show you how to see this inside
16:10 - inside and look who who is joining us
16:12 - here so it's our everyone's favorite cat
16:15 - at least she's mine except for the other
16:18 - one they're equally favorite it's not
16:21 - politically correct to favorite one and
16:23 - I don't anyways uh so you can see here
16:27 - um that we can't see debug me messages
16:30 - inside of our Standalone build so uh
16:33 - what we'll do instead is just uh close
16:35 - down this build here so leave the room
16:36 - and close out there and we'll close this
16:39 - one down as well to check whether or not
16:42 - these uh console messages actually
16:44 - appeared what we can do is find the
16:46 - place that we built uh the client to and
16:49 - in our case that's under our projects
16:51 - then multiplayer FPS tutorial
16:53 - multiplayer FPS
16:55 - builds windows and inside of here if we
16:58 - go into the data folder and under the
17:01 - output log and I know this is quite a
17:04 - pain to go through I'm just going to
17:06 - edit this with the notepad here and
17:09 - scroll
17:11 - down scroll down uh you will see that we
17:16 - have all of our debug.log messages here
17:18 - and if we go down to where the player
17:20 - two has zero Health we can see that test
17:23 - one two 3 kill test 1 2 3 4 awesome so
17:28 - it's it's actually reporting it back
17:30 - here as well so that's awesome so um
17:34 - what we can do now is just integrate
17:36 - this into the UI so in order to do this
17:38 - we take our kill
17:40 - feed and actually we let's build out our
17:44 - kill feed item so uh what we want here
17:47 - is just a reference to our uh text so we
17:50 - want a serialized field and we want to
17:53 - also be using Unity engine. UI and this
17:57 - is going to be a ref again to our text
18:00 - so a text here and we'll just call this
18:03 - one text and then we can do uh a
18:08 - public public void setup and it's going
18:12 - to take in a player and a string
18:18 - Source just passing along the
18:20 - information and then here we said text.
18:22 - text equal to and then we can format
18:25 - this correctly so we'll do um a
18:28 - beginning bold Sign Plus player
18:33 - plus um actually this is the source of
18:36 - course Source plus and then end bold
18:40 - sign and these are called taxs HTML TX
18:44 - and then we do
18:46 - plus
18:47 - killed plus and then a beginning italic
18:51 - Sign Plus the uh player plus the end
18:57 - italic sign
19:01 - all right I believe that was it it's
19:04 - kind of confusing to look at but if I
19:07 - just skim through this everything looks
19:08 - correct so let's try that out and then
19:11 - inside of our kill feed what we do in
19:13 - here is we instantiate that object so
19:16 - let's create a reference to it so let's
19:18 - again make this a calized field and this
19:20 - is just going to be a game object and
19:22 - we'll call this one our kill
19:25 - feed item
19:27 - preap
19:29 - there we go and then down here we
19:31 - instantiate we instantiate a kill feed
19:33 - item prefab and we set this as a parent
19:37 - so this do transform and this is not
19:40 - necessary I'm just stressing it and uh
19:43 - we have a game object here and uh we
19:47 - call that go so we make a temporary
19:49 - variable containing the object that we
19:51 - just uh instantiated which was a kill
19:53 - feed item prefab and then we of course
19:55 - get a component so go.get component in
19:59 - order to get our kill feed item
20:01 - component and then what we can do is
20:04 - just do dot
20:06 - setup and we put in here the player and
20:09 - the source boom there we go I believe
20:15 - that was all so let's make sure to set
20:18 - everything up here so if we find our
20:20 - prefab we find our player UI pre prefab
20:23 - going to the kill feed we need to drag
20:25 - in our kill feed item prefab so that's
20:28 - find that as well kill feed item drag
20:30 - that in there and also select the kill
20:32 - feed item and drag in our text there we
20:35 - go so that should be it so if we now hit
20:38 - save on this and hit build as well uh to
20:42 - build this into a standalone and first
20:44 - let's test this with just U two uh
20:46 - players in the scene and then we'll open
20:48 - up a third one as well just to see if
20:50 - it's working so uh you can see that we
20:52 - have our multiplayer FPS here it's
20:55 - loading up there we go let's boot this
20:57 - up as well let's do test 1 2 3 test 1 2
21:00 - 3 log in do the same here test 1 2 3 4
21:04 - test 1 2 3 4 log in and we can create a
21:07 - test room and we can join that test room
21:11 - over here and we'll wait for it to join
21:13 - we can see nothing appears right away
21:15 - because um we don't have any UI elements
21:18 - to show but as soon as I kill this guy
21:21 - you can see that it appears up here and
21:23 - even with the bold and nalic formatting
21:25 - and you can see it appears over here as
21:28 - well so if we now now kill the other guy
21:31 - here we should see that working too and
21:34 - you can see it disappears while you're
21:35 - in the scene view because the player UI
21:37 - is not active there but if you really
21:39 - want it to be active there you can make
21:41 - it carry over but actually I don't
21:44 - really want it to be there I think it
21:45 - should only be uh inside uh when you're
21:48 - really playing but again you don't
21:50 - necessarily need to make this uh that
21:53 - integrated into the player UI uh you can
21:56 - uh do that however uh you wanted to U be
22:00 - so the only thing that you will notice
22:02 - right now and don't worry about this
22:04 - area that's because I just go out of the
22:07 - editor here it's not going to be an
22:09 - issue whatsoever uh the only reason uh
22:12 - problem here is that our UI doesn't um
22:15 - disappear again so uh this is a very
22:17 - easy fix all we need to do is go into
22:19 - our kill feed item create a start method
22:23 - actually no we don't need to do that uh
22:25 - either we can just do kill feed ah
22:29 - we can do it in here or we could do it
22:30 - inside of a start method under the kill
22:32 - feed item you could in here you could go
22:34 - destroy after actually I want this to be
22:37 - inside of the kill feed so let's do
22:39 - destroy here and we can do that uh what
22:41 - we want to destroy is the game object
22:43 - and we want to do that after
22:46 - say 4 seconds there we go and that
22:50 - should actually take care of it um what
22:52 - you could also do and then in that case
22:54 - I would recommend doing it in here is
22:57 - have some kind of code rtin or some kind
22:59 - of timer um that you use and then after
23:02 - a certain amount of seconds um you are
23:05 - going to play an animation that makes it
23:07 - fade out and when it's done doing that
23:09 - animation uh you can remove it that's
23:11 - just going to make it look a bit more
23:13 - pretty but really there's no difference
23:16 - to the two so uh because there's no
23:18 - difference we're just going to do it uh
23:20 - this
23:21 - way uh so I believe uh that was all we
23:25 - needed to do so um what we can do now is
23:29 - just uh build this one last time to see
23:31 - it
23:32 - working and we should be able to get it
23:36 - up and running here so let's run that
23:38 - and run this and I will show you one
23:41 - last uh kind of UI specific thing that
23:45 - uh you can of course um change if you
23:48 - want to so test 1 2 3 4 test 1 2 3 4 H
23:53 - log in here so let's create a room
23:56 - test and create join the that room over
23:59 - here uh the thing that I want to show
24:01 - you is the order in which uh these uh um
24:05 - these notifications appear so uh
24:07 - normally when you do a kill feed uh the
24:10 - newest piece of information will be
24:12 - pushed to the very top and the on at the
24:14 - bottom will disappear first however I
24:17 - believe with the way that we've set it
24:19 - up right now uh it's going to be the
24:21 - opposite way around so new kill feed uh
24:24 - things will appear at the bottom so what
24:27 - you can do to uh change this is just
24:29 - force your object higher up in the
24:32 - hierarchy you you could do that by
24:34 - renaming and I actually think that Unity
24:36 - has a build-in function for reordering
24:39 - that as well if you want that
24:41 - functionality inside of your game you
24:43 - can easily just Google for um uh
24:45 - changing object order in unity in the
24:48 - hierarchy and you will definitely be
24:51 - good to go or changing order uh uh uh
24:54 - for items in list using unit uh or using
24:57 - yugu
24:59 - uh and uh there's plenty of information
25:01 - on that kind of stuff but it's just one
25:02 - of those again one of those UI specific
25:05 - things that I don't want to spend too
25:06 - much time on so now we can uh kill this
25:09 - player it's going to appear up there and
25:11 - after just a few seconds here you can
25:12 - see that it disappears from both clients
25:16 - so now let's just for fun again find our
25:18 - projects folder uh find our multiplayer
25:21 - FPS there we go under builds windows and
25:24 - we can actually go ahead and create uh
25:26 - or open up another version of this
25:28 - client uh just so we can see this
25:31 - working with three players I think that
25:33 - could be kind of exciting so I'll just
25:35 - pause that and I've actually set up a
25:37 - test player here test 1 2 35 test 1 2 35
25:41 - hit log in there and I shouldn't have
25:43 - chosen uh this similar names when they
25:46 - appear in the kill feed but that's all
25:47 - right so uh we can see now that he's
25:49 - joining and once he's joined let's try
25:52 - killing two uh two players very quickly
25:56 - here so you can see that that indeed
25:58 - shows up and we can do the same thing
26:01 - over here and everything is working so
26:04 - there we go we killed on test 1 2 3 4
26:07 - and we kill test 1 2 3 and you can see
26:09 - that I was correct in assuming that the
26:11 - order would be a little off but again
26:13 - you can definitely uh fix that very
26:15 - quickly and you can see that they are on
26:17 - top of the same spawn point here uh so
26:19 - let's just go ahead and kill those these
26:22 - spawns are even worse than Call of Duty
26:24 - and I can't believe I just said that so
26:26 - U those are definitely going to uh need
26:29 - to be worked on at some point all right
26:32 - so uh that was pretty much all for this
26:34 - video I hope you enjoyed it I thought it
26:35 - was uh really a fun little thing to do
26:38 - something that's pretty essential for
26:39 - any kind of shooter because it's well
26:41 - it's in pretty much all of them these
26:43 - days and uh people are going to be
26:45 - asking for them if they're not there so
26:48 - that was pretty much it I hope you
26:49 - enjoyed it and I will see you in the
26:51 - next video thank you so much to all of
26:53 - the awesome people who donated in
26:55 - September and a special thanks to Aron
26:57 - meta Robert Rose James Kell Hound Kim
27:00 - Ros B andand dang and Vixen P thank you
27:03 - so much for donating you guys are
27:05 - awesome if you want to support breis
27:07 - yourself you can go to patreon.com breis

Cleaned transcript:

this video is brought to you by Aron meta thank you so much for donating if you want to support Brees yourself you can go to patreon.com Brees thanks for tuning in at braies hello everyone and welcome to this video on creating a multiplayer PSN Unity today we'll be making a kill feed which basically means that whenever a player kills another player that will display in the top right corner of uh all of the different clients connected so that you will be notified whenever um something happens in the game you can also uh easily turn this into a more generic notification system uh that also says whenever a player dies joins disconnects and even add chat functionality but for now we'll just keep it simple with a kill feed so we'll be building a simple UI for doing that um for uh spawning in these um UI pieces and then deleting them after a certain amount of seconds and we'll also be uh doing a bit of backend integration so that we have an easy way of keeping track of whenever a player is killed and sending on a username of the player and a username of whoever killed him so uh without further Ado let's just jump right into it so you can see I'm here in unity and what I want to begin with is just navigating over to our main level so we have something to build our UI on top of and I want of course to integrate this into our preab called the player UI which is spawned into the game automatically for us so um inside of this we can go ahead and create a UI panel that there we go the panel there and let's make this anchor to the top right and let's definitely size this down something like that and I also want to drag it out a bit uh from the corner something like that looks pretty decent and actually don't want the background here in the game but for now I'll just keep it so we can easily see what's going on and I'm going to rename this one to our kill feed you could also do notifications chat whatever for now this is going to be our kill feed and um what I want to do is add a separate component to this called kill feed and this is going to be a script that we'll create in a second but I just want to go ahead and add it for now and uh under this object is where we will have our UI elements uh for the actual little pieces of information so in here we will have a well a kill or a death or some kind of notification so we'll have a separate panel for that because I want to give that a background and now you can see that the panel here is overlaid on top of the background of our kill feed and I don't want that I want this to first of all be black there we go and I also want this panel here uh to uh have its own height so I want it to definitely uh size on the width here um a stretch on the width but I want it to have a separate height so let's uh go in here and create a uh vertical layout group and we've done this before and and uh you can see we don't want this to expand on the height instead we want to go into our panel here and Define a layout layout element with a preferred height of say 35 so uh this is going to be one kill and we can duplicate these along and I definitely want to uh up the spacing to something like five and apple is being annoying so let's remove that and um yeah that looks pretty good so let's delete the other ones again and this one here is going to be our our kill feed item so this is going to be a single item on the kill feed and uh under this we can create a UI text object as well which is going to display some information about that item so in our place we can say uh in our case we can say something like player one uh killed uh player two and I'll show you something really cool you can do with styling this in a second so let's make this totally white uh let's make it normal let's bump up the F size to something like 18 at least and let's also make sure that this text object is stretched to fit our kill feed item so let's just go up here hold down alt and press in the bottom right corner there we go let's also Center this on the uh vertical axis at least and you can also Center it here but I would actually like to snap it to the right I believe uh I don't know you can also just make it totally centered actually on the left might not be too bad and then what we can do is just move in the text a tiny bit here I actually kind of like that so if we create another item here just to see how what it looks like and maybe um just shorten this a bit I actually really like the look of that so uh that's what we're going to go with cool but again spend more time on the UI than I do as always um so now we can go ahead and remove the background image here you can remove the component I'd like to keep it there I just disable it and um you can see this already looks pretty decent but one thing that a lot of games uh do is um either substitute this killed uh uh name here or string or text U with some kind of Icon U maybe uh say a skull or U maybe an icon for the weapon uh that killed the player and you can definitely throw that in there what you would do is just create another uh layout group but this time a horizontal one and just have a text object here the first one then next you'll have an icon which is just an image and then a third text object as well that's super easy to do uh but since I don't have an icon we won't be doing that uh today and really it's not not necessary it's just one of those um UI things that you can have fun with on your own um and another thing that a lot of games uh do is that they highlight uh the player that killed the other player or um um maybe uh throw different colors in there to make it easier to uh see so what I want to show you now is that you can actually inside of this text component you can use some basic HTML tags so if you've done a bit of HTML or um or whatever you can see that if we write a b like this for bold and then close it off that is indeed going to be marked as bold and you can also do italic with an i here so let's make the last player there italic or you could even do color so let's make this a color equals then we can just do red or you could do some hex heximal color like that but we're just going to do red and then slash color down here and you can see that we've now made that player red so that is something that you can very easily add if you don't want to split this up into several ones and if you want it to be depending on the player so you can associate a color to each player or whatever so uh this is just what we're going to be doing for now I want to highlight the player that killed the other player and I want to make him uh italic so slash I there we go cool so I think that looks pretty good so what we can do now is actually uh add a separate script to the kill feed item as well the same way that we had a separate script for uh the room list and then a room list item so let's find here our room list item there we go and we have a separate SC script I don't remember what it's called now uh for listing those items so we have a kill feed and we have a kill feed item so let's go ahead and separate this out the kill feed item is going to be its own separate prefab just like we have a room list item down here let's drag that into our prefabs folder and now now remove it and uh let's uh also save these changes to our player UI so let's go to player UI and hit apply awesome so how do we want to do this well what I thought we would do is utilize the fact that in all games we have a a game object that is shared by all the objects who join called the game manager it sits right here so what we could do with this game manager is simply add a uh call back method some kind of delegate uh for whenever a player dies so in here we'll add in here we'll add a um public delegate void called on player killed um callback and uh this is going to take in a string with the player killed and a string with the source of the damage and this might be a player or it might be um say fall damage or whatever you could put anything in there and we could even put in an action we could make it something else like instead of on player kill we can just do on event or something and then we could put in an action here um so that it would be um Source did action on player and then you can put a sentence very easily together but for now we'll just do this and then we'll have a public um on player killed call back because uh this here is defining the type the type on player killed call back and then we want to actually create that in a variable we want to uh also just call that on player killed call back but now with a non capital O there and just close that off so again remember what we use callbacks for is whenever we want uh to call multiple methods uh from one place so basically what we are able to do here is have different um objects subscribe to this call back so they say uh whenever this event happens you should call this function and you should call this fun function and all of our different objects can do that that as they join more specifically when our player joins the room we want his uh UI to subscribe to this call back saying that whenever this happens uh you should display something on this UI using this function and then uh what we can do is not worry about all of the different UI elements when we actually calling it so we know that they've subscribed to this method themselves and so when we actually um when a player dies and we want to call this calling uh it it's called invoking the methods um we don't have to have a reference to them we only need a reference to this so that's U the cool thing about this so what this allows us to do is now head into our head into our um player code here where we have a function called die and this is called through an RPC so we we have a function called die here and you can see we said is that to true we increase the uh kills of our source player the one that kills us and we increase our deaths uh well in here we could just as well do game manager do instance and we do need an instance here because this is not static uh I don't know about static voids we won't get into that um so do instance and um then we do uh dot uh what did we call it we call it on player killed call back and then we do do invoke so this is going to call all of the functions subscribe to that and then we pass in our username so our username um is just the one uh that we have declared uh somewhere up here there is the username so that is loaded in and we also feed it the source so the source here is Source player. username and because we're using Source player I only want to do this in case Source player is not equal to null again the reason why we have this if statement is to be a a bit uh safe or secure and that's a good idea and it's also um to um make sure that we allow for other ways to damage players in case there wasn't a source player maybe it was just fall damage well then you can just instead of uh sending over the source player. username then you could do uh down here an L statement saying that the source was well gravity that's a very normal thing to do in these kind of kill feed situations so but for now we'll just leave this in here uh because we don't have any fall damage the only way to die is from other players and um that should indeed invoke the method so now all we need to do is subscribe to that uh event um so in order to do this let's actually build out our kill feed so our kill feed here what this is going to do is in the start method it's going to uh call something on the game manager it's going to go game manager do instance and Dot um um on player kill call back and it's going to add onto that another function that we'll create now so on kill and we can go ahead and create this method right away and we need it to be public because it's going to be called from the game manager whenever you're doing these call back things just make everything public it's much easier that way uh so public void on kill and we need the uh appropriate um parameters here so that is going to be a or arguments it's going to be a string with our player username the player and a string with the source and um then all we do is well for now we could just throw out a debug.log statement uh but yeah let's just do that so we throw our debug.log and then we can say um Source plus killed plus um the player there we go so it's that simple to do um and this should in fact work right away I mean it's not going to display on the UI it should just throw out a debug the log statement but we can see in here that uh whenever um the player spawns whenever the player spawns he also creates a prefab called the player UI and part of the player UI is the kill feed that has this script that means that we are going to register with the game manager that whenever on player kill call back is invoked we want that to call this function using the correct information and then inside of our player whenever we die we want to call that in F that that function we invoke all of them and that is going to point back over here and this is going to be called so uh this should in fact work right away and we should be able to test it out so let's just do a very quick test here um before we build the last thing which is just uh properly integrating it with the UI and then we're uh then we're done so let's just build out the player here and there we go whoops it's a tall player there that's better and uh let me just dog that over here while we uh log in and of course we want to log in using our login menu here let's do things the proper way so test 1 2 3 test 1 2 3 log in let's do the same here test 1 2 3 4 test 1 2 3 4 log in there we go so this one is logged in let's create a test room and there we go we're inside and let's do the same thing here and it's just going to wait to join here we've done this a million times and whenever it's joined there we go we should be able to Now kill this player and see that it says test 1 2 3 4 kill test 1 2 3 and if we go the other way around to kill test 1 2 3 4 it says test 1 2 3 killed test 1 2 3 4 so it flipped correctly and it's reporting it on all of the clients and in fact I have a cool way to show you how to see this inside inside and look who who is joining us here so it's our everyone's favorite cat at least she's mine except for the other one they're equally favorite it's not politically correct to favorite one and I don't anyways uh so you can see here um that we can't see debug me messages inside of our Standalone build so uh what we'll do instead is just uh close down this build here so leave the room and close out there and we'll close this one down as well to check whether or not these uh console messages actually appeared what we can do is find the place that we built uh the client to and in our case that's under our projects then multiplayer FPS tutorial multiplayer FPS builds windows and inside of here if we go into the data folder and under the output log and I know this is quite a pain to go through I'm just going to edit this with the notepad here and scroll down scroll down uh you will see that we have all of our debug.log messages here and if we go down to where the player two has zero Health we can see that test one two 3 kill test 1 2 3 4 awesome so it's it's actually reporting it back here as well so that's awesome so um what we can do now is just integrate this into the UI so in order to do this we take our kill feed and actually we let's build out our kill feed item so uh what we want here is just a reference to our uh text so we want a serialized field and we want to also be using Unity engine. UI and this is going to be a ref again to our text so a text here and we'll just call this one text and then we can do uh a public public void setup and it's going to take in a player and a string Source just passing along the information and then here we said text. text equal to and then we can format this correctly so we'll do um a beginning bold Sign Plus player plus um actually this is the source of course Source plus and then end bold sign and these are called taxs HTML TX and then we do plus killed plus and then a beginning italic Sign Plus the uh player plus the end italic sign all right I believe that was it it's kind of confusing to look at but if I just skim through this everything looks correct so let's try that out and then inside of our kill feed what we do in here is we instantiate that object so let's create a reference to it so let's again make this a calized field and this is just going to be a game object and we'll call this one our kill feed item preap there we go and then down here we instantiate we instantiate a kill feed item prefab and we set this as a parent so this do transform and this is not necessary I'm just stressing it and uh we have a game object here and uh we call that go so we make a temporary variable containing the object that we just uh instantiated which was a kill feed item prefab and then we of course get a component so go.get component in order to get our kill feed item component and then what we can do is just do dot setup and we put in here the player and the source boom there we go I believe that was all so let's make sure to set everything up here so if we find our prefab we find our player UI pre prefab going to the kill feed we need to drag in our kill feed item prefab so that's find that as well kill feed item drag that in there and also select the kill feed item and drag in our text there we go so that should be it so if we now hit save on this and hit build as well uh to build this into a standalone and first let's test this with just U two uh players in the scene and then we'll open up a third one as well just to see if it's working so uh you can see that we have our multiplayer FPS here it's loading up there we go let's boot this up as well let's do test 1 2 3 test 1 2 3 log in do the same here test 1 2 3 4 test 1 2 3 4 log in and we can create a test room and we can join that test room over here and we'll wait for it to join we can see nothing appears right away because um we don't have any UI elements to show but as soon as I kill this guy you can see that it appears up here and even with the bold and nalic formatting and you can see it appears over here as well so if we now now kill the other guy here we should see that working too and you can see it disappears while you're in the scene view because the player UI is not active there but if you really want it to be active there you can make it carry over but actually I don't really want it to be there I think it should only be uh inside uh when you're really playing but again you don't necessarily need to make this uh that integrated into the player UI uh you can uh do that however uh you wanted to U be so the only thing that you will notice right now and don't worry about this area that's because I just go out of the editor here it's not going to be an issue whatsoever uh the only reason uh problem here is that our UI doesn't um disappear again so uh this is a very easy fix all we need to do is go into our kill feed item create a start method actually no we don't need to do that uh either we can just do kill feed ah we can do it in here or we could do it inside of a start method under the kill feed item you could in here you could go destroy after actually I want this to be inside of the kill feed so let's do destroy here and we can do that uh what we want to destroy is the game object and we want to do that after say 4 seconds there we go and that should actually take care of it um what you could also do and then in that case I would recommend doing it in here is have some kind of code rtin or some kind of timer um that you use and then after a certain amount of seconds um you are going to play an animation that makes it fade out and when it's done doing that animation uh you can remove it that's just going to make it look a bit more pretty but really there's no difference to the two so uh because there's no difference we're just going to do it uh this way uh so I believe uh that was all we needed to do so um what we can do now is just uh build this one last time to see it working and we should be able to get it up and running here so let's run that and run this and I will show you one last uh kind of UI specific thing that uh you can of course um change if you want to so test 1 2 3 4 test 1 2 3 4 H log in here so let's create a room test and create join the that room over here uh the thing that I want to show you is the order in which uh these uh um these notifications appear so uh normally when you do a kill feed uh the newest piece of information will be pushed to the very top and the on at the bottom will disappear first however I believe with the way that we've set it up right now uh it's going to be the opposite way around so new kill feed uh things will appear at the bottom so what you can do to uh change this is just force your object higher up in the hierarchy you you could do that by renaming and I actually think that Unity has a buildin function for reordering that as well if you want that functionality inside of your game you can easily just Google for um uh changing object order in unity in the hierarchy and you will definitely be good to go or changing order uh uh uh for items in list using unit uh or using yugu uh and uh there's plenty of information on that kind of stuff but it's just one of those again one of those UI specific things that I don't want to spend too much time on so now we can uh kill this player it's going to appear up there and after just a few seconds here you can see that it disappears from both clients so now let's just for fun again find our projects folder uh find our multiplayer FPS there we go under builds windows and we can actually go ahead and create uh or open up another version of this client uh just so we can see this working with three players I think that could be kind of exciting so I'll just pause that and I've actually set up a test player here test 1 2 35 test 1 2 35 hit log in there and I shouldn't have chosen uh this similar names when they appear in the kill feed but that's all right so uh we can see now that he's joining and once he's joined let's try killing two uh two players very quickly here so you can see that that indeed shows up and we can do the same thing over here and everything is working so there we go we killed on test 1 2 3 4 and we kill test 1 2 3 and you can see that I was correct in assuming that the order would be a little off but again you can definitely uh fix that very quickly and you can see that they are on top of the same spawn point here uh so let's just go ahead and kill those these spawns are even worse than Call of Duty and I can't believe I just said that so U those are definitely going to uh need to be worked on at some point all right so uh that was pretty much all for this video I hope you enjoyed it I thought it was uh really a fun little thing to do something that's pretty essential for any kind of shooter because it's well it's in pretty much all of them these days and uh people are going to be asking for them if they're not there so that was pretty much it I hope you enjoyed it and I will see you in the next video thank you so much to all of the awesome people who donated in September and a special thanks to Aron meta Robert Rose James Kell Hound Kim Ros B andand dang and Vixen P thank you so much for donating you guys are awesome if you want to support breis yourself you can go to patreon.com breis
