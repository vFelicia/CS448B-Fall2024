With timestamps:

00:04 - [Music]
00:07 - you can't get very far with most games
00:10 - without some player movement as in
00:12 - literally the player can move anywhere
00:14 - without it so in this video we'll create
00:16 - a solid third-person controller with
00:18 - both player and camera movement of
00:20 - course just like with first-person
00:22 - controllers how you want your movement
00:24 - is going to completely depend on your
00:26 - game this of course raises a lot of
00:28 - questions like do you want the rotation
00:30 - of your player to follow the camera do
00:31 - you want smooth or snappy movement
00:33 - should your player be able to strafe run
00:36 - jump and so on and depending on exactly
00:39 - what you need and how you answer these
00:40 - questions your controller is going to
00:42 - look very different so instead of doing
00:44 - something really complicated and
00:45 - specific to one thing let's create a
00:48 - really solid base that works and that
00:50 - you can easily add more on top of but
00:52 - first this video is sponsored by Jason
00:54 - Wyman Jason is an industry professional
00:55 - and he just created a new amazing course
00:58 - on game architecture the course teaches
01:00 - you exactly how to structure your game
01:02 - and code in a professional manner so you
01:04 - avoid all the headaches that you might
01:05 - run into when creating a bigger game
01:07 - you'll learn everything from writing
01:08 - testable code project structure
01:10 - management advanced state machine
01:12 - development and the list goes on the
01:14 - most awesome part is that you will learn
01:16 - everything through building your own
01:17 - unique RPG where you get to build quest
01:20 - systems learn about inventory management
01:21 - and interfaces and even branching
01:24 - dialogue systems new content is
01:26 - constantly being added and you get
01:27 - access to weekly live QA sessions with
01:30 - Jason himself alongside with email
01:32 - support and a discoid channel where you
01:33 - can chat with your fellow students so no
01:35 - more getting stuck on problems you just
01:37 - can solve so sign up using the link in
01:39 - the description and actually we're now
01:42 - launching our first ever hoodie on our
01:44 - merch toy line of code isn't it pretty
01:46 - and it's a brand new breakfast Duggar
01:49 - design created by our awesome editor
01:51 - Thea for the first week they'll be a 20%
01:53 - discount on the hoodie and for those of
01:55 - you who sign up for Jason's course
01:57 - you'll receive a free hoodie as well
01:59 - alright remember to stretch and warm up
02:02 - because we're gonna get moving so you
02:06 - can see him here in unity and I've gone
02:07 - ahead and set up this really quick
02:09 - example scene and of course the first
02:11 - thing that we want to add here is some
02:13 - kind
02:13 - player-character you can of course use
02:15 - your own model if you want but I'm just
02:17 - gonna use some similar shapes in unity
02:19 - for now so let's go to the Hokie here
02:21 - let's right-click go through the object
02:23 - and I'm gonna add in a cylinder I'm
02:25 - gonna hit reset on the transform here
02:27 - and place him somewhere in my level I'm
02:30 - also just going to scale him up a bit on
02:32 - the X and Z and let's make him a bit
02:35 - taller on the Y here so something like
02:38 - one point two by one point eight byte
02:40 - one point two and we're not gonna be
02:42 - needing the collider here since this is
02:44 - just going to act as our graphics so
02:46 - let's go ahead and right-click on a
02:47 - capsule Collider and hit remove
02:48 - component and this will definitely do
02:51 - for now Harvard this gives no indication
02:53 - of what direction our players currently
02:55 - facings let's go ahead and right click
02:57 - on this and create a quick cube object
02:58 - as well and it's just scaled this down
03:01 - to make it a bit smaller and place it
03:03 - somewhere in the front of our players
03:06 - that we can see that this is the forward
03:08 - direction of our player it's not pretty
03:10 - but it will do for now I'm also just
03:13 - going to add a quick read material
03:15 - remove the box Collider on our cube and
03:17 - that's it for our graphics now let's
03:20 - take these objects here and place them
03:22 - under a parent object for our players
03:25 - that's right-click let's create an empty
03:27 - object and it's first of all Center this
03:29 - on a cylinder so let's drag it under our
03:32 - cylinder reset the position here drag it
03:35 - out again and then drag our cylinder
03:38 - under our new game object we then rename
03:40 - our game object to something like
03:42 - third-person player there we go this way
03:46 - we've separated all of our logic which
03:48 - is going to sit on the player himself
03:50 - and all of our graphics which are
03:52 - currently under the cylinder and so we
03:54 - could also rename a cylinder here to
03:56 - graphics all right so we're now ready to
03:59 - create some movement and I think it's a
04:01 - good idea that we start with the camera
04:03 - for this will be using cinema sheen
04:05 - which is unity solution for creating
04:07 - interactive camera movement it makes it
04:09 - really easy to set a pretty advanced
04:11 - camera behavior without writing any code
04:13 - so let's go ahead and open up our window
04:16 - and let's go to the package manager here
04:18 - we need to select all packages and we
04:20 - can then search for cinema sheen simply
04:23 - click on it and go to the bottom to
04:25 - install and update
04:26 - and once this is in your project we can
04:29 - start using it to do this we go to the
04:31 - top on the right says cinema Sheen and
04:33 - here we can create all kinds of camera
04:36 - behavior what we're going to be making
04:38 - is called
04:38 - a freezer camera let's hit create Freder
04:41 - camera and as you can see this creates a
04:43 - new game object with a free look camera
04:45 - component as you can see this is a
04:47 - separate object from our main camera
04:49 - let's go ahead and rename this to
04:52 - third-person camera and what this
04:55 - essentially is going to do is tell our
04:57 - main camera what to do as you can see
04:59 - our main camera now has a brain
05:02 - component and it shows here that the
05:04 - current live camera is the new frida
05:06 - camera this means that it will currently
05:08 - follow the directions of our freezer
05:10 - camera so let's go ahead and set this up
05:13 - the first thing that we want to do is
05:15 - have it follow around our player so
05:17 - let's simply take our third person
05:18 - player and drag it into the follow start
05:20 - we also want to have it constantly look
05:22 - at our player let's take our player
05:24 - object and drag it into the lookup slot
05:26 - and right away if we switch to our game
05:28 - view we can see that our camera is
05:29 - currently looking directly at our player
05:31 - let's just go ahead and dark this to the
05:33 - side here so we can see what's happening
05:34 - now of course currently our camera is
05:36 - way too close to the player so to adjust
05:39 - this we need to go down under where it
05:41 - says orbits now we can think of the
05:44 - camera as having three orbits that we
05:46 - blend between in fact we can actually
05:49 - see these in the scene view there's one
05:51 - at the bottom one in the middle and one
05:53 - at the top and this allows us to adjust
05:55 - camera settings depending on the height
05:57 - of the camera for example it normally
06:00 - works well to have the camera move
06:01 - closer to the player when it gets near
06:03 - the ground so to do this we can position
06:06 - the bottom break here near the ground
06:08 - and give it a pretty small radius so
06:10 - let's start with that let's go over here
06:12 - under our bottom rig let's decrease the
06:14 - height here so that we get close to the
06:16 - ground and let's set the radius to
06:18 - something like 12 there we go let's then
06:21 - set the height of the middle rig to
06:22 - something like maybe 5 and the radius to
06:26 - something like 17 and we can see
06:28 - immediately that because our camera is
06:29 - currently on the middle orbit it gets
06:31 - farther away from the player because we
06:33 - increased the radius and for the height
06:35 - here let's set that to something like 14
06:37 - and give it a radius of 12
06:40 - we also want to set the binding mode
06:41 - here from symbol follow to world space
06:43 - this is because that for this controller
06:46 - we don't want the camera to be
06:47 - influenced by the rotation of the
06:49 - character instead we want the character
06:50 - to move in the direction of the camera
06:52 - and so a camera shouldn't be bound to a
06:54 - player but to the world space instead
06:56 - now we can go ahead and preview our
06:59 - camera settings by simply going up on
07:01 - the access control and changing the
07:03 - y-axis value as you can see this moves
07:06 - our camera up and down and it seems that
07:08 - there is an obstacle in the way here so
07:10 - let's just take our third person player
07:12 - and move it over so that we can see
07:14 - what's happening or we can just hit play
07:17 - and try it out using our mouse and as
07:20 - you can see our camera is moving in and
07:21 - out of the three different orbits
07:23 - awesome now by default this is going to
07:26 - be using this standard Mouse input you
07:28 - can change the input axis names here in
07:31 - case you want to use something else to
07:32 - control the camera or even change the Y
07:34 - and X values manually through script by
07:37 - leaving the input names blank but in my
07:39 - case I just want to use the mouse you
07:42 - can also change the sensitivity here by
07:43 - adjusting the speed I'm gonna set this
07:45 - to four and decrease the acceleration
07:47 - time and I'm also going to increase the
07:49 - speed on the X I'm gonna set this to 450
07:52 - finally you can actually compose your
07:55 - shot for each orbit by going into the
07:57 - corresponding rig in the inspector as
07:59 - you can see we can adjust all these
08:01 - properties here for top middle and
08:03 - bottom rig or even simpler if you turn
08:06 - on game window guides at the top you
08:08 - control this using the guides in the
08:09 - game view so right now I'm on the mill
08:11 - rig and I can go ahead and adjust that
08:13 - sounds and position the player wherever
08:16 - I want really cool but for now I just
08:19 - want this to stay in the center alright
08:21 - so now that our camera is working it's
08:23 - time to get the player moving to do this
08:25 - that select our player that's it a
08:27 - component and we're going to add in a
08:29 - character controller I'm going to set
08:31 - the radius of this to something like
08:33 - point six the height to three point six
08:35 - and that should give us a nice character
08:38 - controller Collider I'm also going to
08:40 - add another component here and that is
08:42 - of course a third person and movement
08:45 - script this is a custom script that we
08:47 - are going to be writing let's double
08:49 - click it to open it up in visual studio
08:50 - now I'm going to go ahead and remove the
08:52 - start function here
08:54 - and the first thing that we need is a
08:55 - reference to our character controller
08:57 - because we're going to be using that to
08:59 - move so let's create a public character
09:01 - controller and let's call it controller
09:04 - you can think of the character
09:05 - controller as the motor that drives our
09:08 - player what we need to do is tell the
09:10 - motor where to go let's also create some
09:12 - kind of speed variable let's create a
09:14 - public float speed let's default it to
09:17 - something like six now with this we can
09:20 - go into our update method and the first
09:23 - thing that we want to do is gather some
09:24 - input
09:25 - now unity is currently working on a new
09:27 - input system the old one is still going
09:29 - to be working for quite a while and
09:31 - that's what we're gonna be using in this
09:33 - video but if you're having issues
09:34 - definitely check out our video on the
09:36 - new input system in case the old one is
09:38 - deprecated now I want to be able to move
09:41 - around using vast and arrow keys so
09:43 - let's go ahead and get some horizontal
09:45 - and vertical import all right float
09:47 - horizontal and let's set this equal to
09:50 - input that get access wrong we're going
09:53 - to be using the raw axis because we
09:55 - don't want any kind of input smoothing
09:57 - we just want the raw input and let's
09:59 - input in here the horizontal axis let's
10:03 - do the same thing with vertical again
10:06 - input get access raw and we'll input
10:10 - vertical so as always the horizontal
10:12 - axis is going to go between negative one
10:14 - and one it's going to be a negative one
10:17 - if you press the a key or the left arrow
10:19 - key and plus one if you press D or right
10:21 - arrow and the same thing for vertical
10:23 - but with the W and s keys or up and down
10:26 - arrows instead we then go ahead and
10:28 - create a vector three here which is
10:30 - going to store our direction and we can
10:32 - set this equal to a new vector3 where we
10:35 - first input our horizontal we then input
10:38 - 0 for the y axis and then the vertical
10:42 - and of course the reason why we are
10:44 - doing it this way is that if we go into
10:46 - unity we want to move our character if
10:48 - we have a look from the top here on the
10:51 - X and z axis but we don't want to move
10:54 - it on the Y and just to make sure that
10:57 - if we hold down two keys and go
10:59 - diagonally that we don't move faster
11:01 - let's go ahead and normalize this then
11:04 - we can check if we are moving in any
11:06 - direction by going
11:07 - direction dot magnitude so the length of
11:11 - our direction vector is greater than or
11:13 - equal to zero point one well in that
11:16 - case we're getting some input to move
11:18 - and we can actually go ahead and move
11:20 - our character by simply going controller
11:22 - dot move here will input the direction
11:25 - will multiply with speed and multiply
11:29 - with time that that's a time in order to
11:31 - make it frame rate independent and if we
11:33 - save this and go into unity we now need
11:35 - to drag in our character controller here
11:38 - we and set the speed to whatever we want
11:39 - and if we play we can start moving in
11:42 - the different directions awesome as you
11:45 - can see this is currently completely
11:47 - independent of where our cameras
11:48 - pointings that we definitely need to
11:50 - have it orient towards the camera and
11:52 - also our player currently isn't rotating
11:54 - to face the direction that he's
11:56 - currently traveling to fix this that's
11:58 - first point or player towards the
11:59 - direction that he is moving to do this
12:01 - we need to take the direction and figure
12:03 - out how much we should rotate our player
12:05 - on the y axis to point in that direction
12:08 - and we do that using the 810 two
12:11 - function so we'll create a float called
12:13 - target angle and set it equal to math f8
12:17 - onto and here will input Direction X
12:20 - come at Direction dot Y now what is a
12:25 - 10/2 well I tend to is a mathematical
12:29 - function that returns the angle between
12:31 - the x-axis and a vector starting at zero
12:33 - and terminating at X comma Y now that
12:36 - might sound pretty complicated but in
12:38 - reality it's actually fairly simple if
12:41 - we just visualize it so here's a
12:43 - coordinate system this represents our
12:45 - scene seen from above with a player in
12:48 - the center the dotted line here is the
12:50 - direction we would like our player to
12:51 - point in we can use the 18:2 function
12:54 - giving it first dy and then the
12:56 - x-coordinate of our direction to get the
12:58 - angle from the x axis to the vector
13:00 - however this assumes that our rotation
13:02 - starts at zero at the x axis and then
13:05 - increases counterclockwise but in unity
13:08 - our character will have a rotation of
13:10 - zero when he is pointing forward and
13:11 - from here it increases clockwise to take
13:14 - this into account we simply pass in the
13:16 - X first then the y coordinate and voila
13:19 - we have the
13:20 - we need and if we have a look at our
13:22 - script that's exactly what we've done we
13:24 - take the attempt to function passing the
13:26 - x coordinate and then the y coordinate
13:28 - of our direction now this will give us
13:30 - an angle in radians so let's just go
13:33 - ahead and multiply this with massive dot
13:36 - radians2degrees in order to convert it
13:39 - into degrees and now we have the angle
13:41 - that we want to use so let's set our
13:43 - rotation by going transform rotation
13:46 - equal to quaternion Euler and this
13:49 - allows us to input three numbers the
13:51 - rotation around our x y&z Stetz put 0
13:55 - around our Y we'll use the target angle
13:57 - and on the Z we'll use 0 as well and
14:00 - whoops it looks like we use the
14:01 - direction that Y here that's of course 0
14:04 - instead we need to use the z axis here
14:06 - there we go and right away we see that
14:09 - our player rotates to face the direction
14:11 - that he's traveling of course he
14:12 - currently snaps really quickly into
14:14 - place let's just go ahead and add some
14:16 - smoothing to this let's create a
14:18 - variable to adjust this called public
14:20 - float turn smooth time instead of the
14:22 - equal to something like 0.1 by default
14:25 - and for this we can use a function
14:27 - called the smooth damp angle so down
14:30 - here before we apply our rotation let's
14:32 - create another float called angle and so
14:35 - it's equal to math if that smooth damp
14:37 - angle here we input our current angle
14:40 - which is transformed that Euler angles
14:42 - dot Y our target angle which is our
14:45 - target angle variable and then we need
14:47 - to give it a reference to a variable
14:49 - that can hold our current smooth
14:51 - velocity and this is just a private
14:53 - variable that we create at the top here
14:55 - so that's create a float turn smooth
14:57 - velocity and all we type down here is
15:00 - Rev turn smooth velocity and the
15:02 - function will handle the rest
15:04 - and finally we input our smooth time so
15:06 - let's put in our turn
15:08 - smooth time now this function is
15:10 - definitely a bit weird but it's a great
15:11 - way of smoothing numbers and
15:13 - particularly angles inside of unity so
15:16 - if we now put in our angle here instead
15:18 - of our target angle we should see that
15:20 - when we move around a player will
15:22 - smoothly turn from one side to the other
15:25 - awesome of course we still need to have
15:27 - the player travel in the direction that
15:29 - our camera is facing so to do that we go
15:33 - into a script and
15:34 - the top here we need a reference to our
15:36 - camera let's create a public transform
15:39 - let's call it cab and now when we go
15:41 - ahead and calculate our target angle
15:43 - here let's simply add on to that cab
15:46 - that Euler angles
15:47 - dot Y and that's really all we need to
15:50 - do we simply need to add the rotation of
15:52 - the camera on the y axis on top of our
15:55 - angle and this is of course going to
15:57 - have our player point the right way but
15:59 - we still need to make sure that we also
16:00 - move in that direction so instead of
16:02 - just using the direction here let's go
16:04 - ahead and create a new vector3 called
16:07 - move direction and that set that equal
16:09 - to quaternion dot Euler zero target
16:13 - angle come as zero and this is why a bit
16:16 - of knowledge of quaternions and vector
16:18 - math come in handy because in order to
16:20 - turn this from a rotation into a
16:22 - direction we will simply multiply our
16:25 - quaternion with vector three dot forward
16:27 - and that should give us the direction we
16:29 - want to move in taking into account the
16:32 - rotation of our camera and so let's just
16:34 - change direction here to move direction
16:37 - and as always when moving we want to
16:39 - normalize this and that is actually it
16:42 - for our script if we save this now and
16:44 - go into unity when they need to
16:46 - reference our camera and for this use
16:48 - the main camera and not a third-person
16:50 - camera use the original main camera here
16:52 - and with that if we play and look in a
16:55 - certain direction and press forward we
16:58 - can see that immediately our player
16:59 - starts to go in that direction
17:01 - we of course also go sideways relative
17:04 - to where we are facing and backwards and
17:06 - so we have a nicely functioning third
17:09 - person character with camera awesome now
17:13 - finally one of the problems that you
17:15 - might see with the current way that
17:16 - we've setup the camera is that because
17:18 - we're able to kind of look everywhere
17:20 - sometimes we might be able to look a
17:23 - place where we can't even see our player
17:25 - anymore and if it gets really bad we can
17:28 - maybe even move a camera inside of
17:31 - obstacles or parts of the level luckily
17:33 - cinema Sheen actually has a feature
17:35 - built in to help avoid this so if we
17:38 - select our third-person camera and go to
17:40 - the bottom here you can see that we can
17:42 - add extensions to our camera and one of
17:46 - these extensions is these
17:48 - machine collider what this basically
17:50 - does is have a camera check if it's
17:52 - currently colliding with something or if
17:54 - there's something in the way of our
17:56 - cameras seeing our character and then
17:58 - moves our camera out of the way it's
18:00 - really easy for us to set up we just
18:02 - want to select what layers we should
18:04 - check whether or not we are colliding
18:05 - with so right here you can see it's
18:07 - currently set to default well I've gone
18:09 - ahead and set all of my environment
18:10 - objects to use the ground layer so in my
18:13 - case I'm just gonna go ahead and change
18:15 - that to ground and then remove the fault
18:18 - here we're also going to have it
18:20 - ignore all players under ignore attack
18:22 - here in select player and then simply
18:25 - give our player that player tag and
18:27 - finally we want to set the strategy from
18:30 - perserve camera height to pull a camera
18:33 - forward this is the behavior that you
18:34 - want in most games and what this
18:37 - basically does if I go ahead and
18:38 - demonstrate here is that if something
18:41 - gets in the way of us seeing our
18:42 - character our camera simply moves
18:44 - forward and if we collide with the
18:46 - obstacle itself the same thing happens
18:49 - you can see we cannot move our camera
18:51 - into this obstacle really really cool I
18:54 - find another thing that really works
18:55 - with this if we go to the top we can
18:57 - change the lens a new clip plane to
19:00 - something smaller which will just help
19:02 - increase our margin of error because we
19:04 - can get closer to an obstacle without
19:06 - our camera clipping through it and
19:08 - finally if you want and this is
19:10 - completely up to you you can add some
19:11 - damping to this so we could go ahead and
19:13 - set this to something like point six and
19:16 - point six and what this will do is just
19:19 - smooth out the movement of our camera
19:21 - this will mean that it sometimes travels
19:23 - through the object but I find that this
19:25 - is actually an okay trade-off in most
19:28 - cases that's completely up to you if you
19:30 - want to add that but I find either way
19:31 - this is just a great way for your camera
19:33 - not to constantly get stuck inside of
19:36 - other objects awesome that's pretty much
19:38 - it for this video if you enjoyed it make
19:40 - sure to subscribe and ring that
19:41 - notification bell so you don't miss the
19:43 - next one now from here it's up to you to
19:45 - start adding more features to your
19:46 - controller as you need them if for
19:48 - example you want to add gravity and
19:50 - jumping to your controller will of
19:51 - course have a link to our first-person
19:53 - controller tutorial where we show
19:55 - exactly how to do that it should be
19:56 - pretty easy to just add to the script of
19:58 - course creating a really
20:00 - extensive controller can take a lot of
20:02 - time and quickly becomes pretty
20:03 - complicated so if you want you can
20:05 - always pick up a third person character
20:07 - controller on the unity asset store I
20:09 - personally recommend this one since it's
20:11 - fairly easy to get started with and it
20:12 - has so many features like driving
20:14 - sliding ragdolls a moving platform
20:17 - system inverse kinematics and the list
20:19 - goes on
20:20 - well of course have a link to that in
20:21 - the description also don't forget to
20:24 - check out jason's course on game
20:26 - architecture learn how to properly make
20:28 - big games by simply clicking the link in
20:30 - the description and get a free hoodie
20:31 - included on that thanks for watching and
20:34 - I'll see you in the next video thanks to
20:37 - the awesome patreon supporters who
20:38 - donated in April and a special thanks to
20:41 - - blank lost to violent stuff forever
20:43 - free Samara Phi John replica studios SRT
20:46 - Mike Luna set Jason you Tesco Navi ninja
20:49 - will avert an endangered - sonic Dona
20:51 - team Gascoigne tanta Sam Jacob Sanford
20:54 - Noah Kiowa sake mark and twenty art
20:56 - Gregory Pierce Michael Cobb of the
20:58 - mighty Zeus oven Cooper else in the
21:01 - fierce Erasmus and serious you guys Rock

Cleaned transcript:

you can't get very far with most games without some player movement as in literally the player can move anywhere without it so in this video we'll create a solid thirdperson controller with both player and camera movement of course just like with firstperson controllers how you want your movement is going to completely depend on your game this of course raises a lot of questions like do you want the rotation of your player to follow the camera do you want smooth or snappy movement should your player be able to strafe run jump and so on and depending on exactly what you need and how you answer these questions your controller is going to look very different so instead of doing something really complicated and specific to one thing let's create a really solid base that works and that you can easily add more on top of but first this video is sponsored by Jason Wyman Jason is an industry professional and he just created a new amazing course on game architecture the course teaches you exactly how to structure your game and code in a professional manner so you avoid all the headaches that you might run into when creating a bigger game you'll learn everything from writing testable code project structure management advanced state machine development and the list goes on the most awesome part is that you will learn everything through building your own unique RPG where you get to build quest systems learn about inventory management and interfaces and even branching dialogue systems new content is constantly being added and you get access to weekly live QA sessions with Jason himself alongside with email support and a discoid channel where you can chat with your fellow students so no more getting stuck on problems you just can solve so sign up using the link in the description and actually we're now launching our first ever hoodie on our merch toy line of code isn't it pretty and it's a brand new breakfast Duggar design created by our awesome editor Thea for the first week they'll be a 20% discount on the hoodie and for those of you who sign up for Jason's course you'll receive a free hoodie as well alright remember to stretch and warm up because we're gonna get moving so you can see him here in unity and I've gone ahead and set up this really quick example scene and of course the first thing that we want to add here is some kind playercharacter you can of course use your own model if you want but I'm just gonna use some similar shapes in unity for now so let's go to the Hokie here let's rightclick go through the object and I'm gonna add in a cylinder I'm gonna hit reset on the transform here and place him somewhere in my level I'm also just going to scale him up a bit on the X and Z and let's make him a bit taller on the Y here so something like one point two by one point eight byte one point two and we're not gonna be needing the collider here since this is just going to act as our graphics so let's go ahead and rightclick on a capsule Collider and hit remove component and this will definitely do for now Harvard this gives no indication of what direction our players currently facings let's go ahead and right click on this and create a quick cube object as well and it's just scaled this down to make it a bit smaller and place it somewhere in the front of our players that we can see that this is the forward direction of our player it's not pretty but it will do for now I'm also just going to add a quick read material remove the box Collider on our cube and that's it for our graphics now let's take these objects here and place them under a parent object for our players that's rightclick let's create an empty object and it's first of all Center this on a cylinder so let's drag it under our cylinder reset the position here drag it out again and then drag our cylinder under our new game object we then rename our game object to something like thirdperson player there we go this way we've separated all of our logic which is going to sit on the player himself and all of our graphics which are currently under the cylinder and so we could also rename a cylinder here to graphics all right so we're now ready to create some movement and I think it's a good idea that we start with the camera for this will be using cinema sheen which is unity solution for creating interactive camera movement it makes it really easy to set a pretty advanced camera behavior without writing any code so let's go ahead and open up our window and let's go to the package manager here we need to select all packages and we can then search for cinema sheen simply click on it and go to the bottom to install and update and once this is in your project we can start using it to do this we go to the top on the right says cinema Sheen and here we can create all kinds of camera behavior what we're going to be making is called a freezer camera let's hit create Freder camera and as you can see this creates a new game object with a free look camera component as you can see this is a separate object from our main camera let's go ahead and rename this to thirdperson camera and what this essentially is going to do is tell our main camera what to do as you can see our main camera now has a brain component and it shows here that the current live camera is the new frida camera this means that it will currently follow the directions of our freezer camera so let's go ahead and set this up the first thing that we want to do is have it follow around our player so let's simply take our third person player and drag it into the follow start we also want to have it constantly look at our player let's take our player object and drag it into the lookup slot and right away if we switch to our game view we can see that our camera is currently looking directly at our player let's just go ahead and dark this to the side here so we can see what's happening now of course currently our camera is way too close to the player so to adjust this we need to go down under where it says orbits now we can think of the camera as having three orbits that we blend between in fact we can actually see these in the scene view there's one at the bottom one in the middle and one at the top and this allows us to adjust camera settings depending on the height of the camera for example it normally works well to have the camera move closer to the player when it gets near the ground so to do this we can position the bottom break here near the ground and give it a pretty small radius so let's start with that let's go over here under our bottom rig let's decrease the height here so that we get close to the ground and let's set the radius to something like 12 there we go let's then set the height of the middle rig to something like maybe 5 and the radius to something like 17 and we can see immediately that because our camera is currently on the middle orbit it gets farther away from the player because we increased the radius and for the height here let's set that to something like 14 and give it a radius of 12 we also want to set the binding mode here from symbol follow to world space this is because that for this controller we don't want the camera to be influenced by the rotation of the character instead we want the character to move in the direction of the camera and so a camera shouldn't be bound to a player but to the world space instead now we can go ahead and preview our camera settings by simply going up on the access control and changing the yaxis value as you can see this moves our camera up and down and it seems that there is an obstacle in the way here so let's just take our third person player and move it over so that we can see what's happening or we can just hit play and try it out using our mouse and as you can see our camera is moving in and out of the three different orbits awesome now by default this is going to be using this standard Mouse input you can change the input axis names here in case you want to use something else to control the camera or even change the Y and X values manually through script by leaving the input names blank but in my case I just want to use the mouse you can also change the sensitivity here by adjusting the speed I'm gonna set this to four and decrease the acceleration time and I'm also going to increase the speed on the X I'm gonna set this to 450 finally you can actually compose your shot for each orbit by going into the corresponding rig in the inspector as you can see we can adjust all these properties here for top middle and bottom rig or even simpler if you turn on game window guides at the top you control this using the guides in the game view so right now I'm on the mill rig and I can go ahead and adjust that sounds and position the player wherever I want really cool but for now I just want this to stay in the center alright so now that our camera is working it's time to get the player moving to do this that select our player that's it a component and we're going to add in a character controller I'm going to set the radius of this to something like point six the height to three point six and that should give us a nice character controller Collider I'm also going to add another component here and that is of course a third person and movement script this is a custom script that we are going to be writing let's double click it to open it up in visual studio now I'm going to go ahead and remove the start function here and the first thing that we need is a reference to our character controller because we're going to be using that to move so let's create a public character controller and let's call it controller you can think of the character controller as the motor that drives our player what we need to do is tell the motor where to go let's also create some kind of speed variable let's create a public float speed let's default it to something like six now with this we can go into our update method and the first thing that we want to do is gather some input now unity is currently working on a new input system the old one is still going to be working for quite a while and that's what we're gonna be using in this video but if you're having issues definitely check out our video on the new input system in case the old one is deprecated now I want to be able to move around using vast and arrow keys so let's go ahead and get some horizontal and vertical import all right float horizontal and let's set this equal to input that get access wrong we're going to be using the raw axis because we don't want any kind of input smoothing we just want the raw input and let's input in here the horizontal axis let's do the same thing with vertical again input get access raw and we'll input vertical so as always the horizontal axis is going to go between negative one and one it's going to be a negative one if you press the a key or the left arrow key and plus one if you press D or right arrow and the same thing for vertical but with the W and s keys or up and down arrows instead we then go ahead and create a vector three here which is going to store our direction and we can set this equal to a new vector3 where we first input our horizontal we then input 0 for the y axis and then the vertical and of course the reason why we are doing it this way is that if we go into unity we want to move our character if we have a look from the top here on the X and z axis but we don't want to move it on the Y and just to make sure that if we hold down two keys and go diagonally that we don't move faster let's go ahead and normalize this then we can check if we are moving in any direction by going direction dot magnitude so the length of our direction vector is greater than or equal to zero point one well in that case we're getting some input to move and we can actually go ahead and move our character by simply going controller dot move here will input the direction will multiply with speed and multiply with time that that's a time in order to make it frame rate independent and if we save this and go into unity we now need to drag in our character controller here we and set the speed to whatever we want and if we play we can start moving in the different directions awesome as you can see this is currently completely independent of where our cameras pointings that we definitely need to have it orient towards the camera and also our player currently isn't rotating to face the direction that he's currently traveling to fix this that's first point or player towards the direction that he is moving to do this we need to take the direction and figure out how much we should rotate our player on the y axis to point in that direction and we do that using the 810 two function so we'll create a float called target angle and set it equal to math f8 onto and here will input Direction X come at Direction dot Y now what is a 10/2 well I tend to is a mathematical function that returns the angle between the xaxis and a vector starting at zero and terminating at X comma Y now that might sound pretty complicated but in reality it's actually fairly simple if we just visualize it so here's a coordinate system this represents our scene seen from above with a player in the center the dotted line here is the direction we would like our player to point in we can use the 182 function giving it first dy and then the xcoordinate of our direction to get the angle from the x axis to the vector however this assumes that our rotation starts at zero at the x axis and then increases counterclockwise but in unity our character will have a rotation of zero when he is pointing forward and from here it increases clockwise to take this into account we simply pass in the X first then the y coordinate and voila we have the we need and if we have a look at our script that's exactly what we've done we take the attempt to function passing the x coordinate and then the y coordinate of our direction now this will give us an angle in radians so let's just go ahead and multiply this with massive dot radians2degrees in order to convert it into degrees and now we have the angle that we want to use so let's set our rotation by going transform rotation equal to quaternion Euler and this allows us to input three numbers the rotation around our x y&z Stetz put 0 around our Y we'll use the target angle and on the Z we'll use 0 as well and whoops it looks like we use the direction that Y here that's of course 0 instead we need to use the z axis here there we go and right away we see that our player rotates to face the direction that he's traveling of course he currently snaps really quickly into place let's just go ahead and add some smoothing to this let's create a variable to adjust this called public float turn smooth time instead of the equal to something like 0.1 by default and for this we can use a function called the smooth damp angle so down here before we apply our rotation let's create another float called angle and so it's equal to math if that smooth damp angle here we input our current angle which is transformed that Euler angles dot Y our target angle which is our target angle variable and then we need to give it a reference to a variable that can hold our current smooth velocity and this is just a private variable that we create at the top here so that's create a float turn smooth velocity and all we type down here is Rev turn smooth velocity and the function will handle the rest and finally we input our smooth time so let's put in our turn smooth time now this function is definitely a bit weird but it's a great way of smoothing numbers and particularly angles inside of unity so if we now put in our angle here instead of our target angle we should see that when we move around a player will smoothly turn from one side to the other awesome of course we still need to have the player travel in the direction that our camera is facing so to do that we go into a script and the top here we need a reference to our camera let's create a public transform let's call it cab and now when we go ahead and calculate our target angle here let's simply add on to that cab that Euler angles dot Y and that's really all we need to do we simply need to add the rotation of the camera on the y axis on top of our angle and this is of course going to have our player point the right way but we still need to make sure that we also move in that direction so instead of just using the direction here let's go ahead and create a new vector3 called move direction and that set that equal to quaternion dot Euler zero target angle come as zero and this is why a bit of knowledge of quaternions and vector math come in handy because in order to turn this from a rotation into a direction we will simply multiply our quaternion with vector three dot forward and that should give us the direction we want to move in taking into account the rotation of our camera and so let's just change direction here to move direction and as always when moving we want to normalize this and that is actually it for our script if we save this now and go into unity when they need to reference our camera and for this use the main camera and not a thirdperson camera use the original main camera here and with that if we play and look in a certain direction and press forward we can see that immediately our player starts to go in that direction we of course also go sideways relative to where we are facing and backwards and so we have a nicely functioning third person character with camera awesome now finally one of the problems that you might see with the current way that we've setup the camera is that because we're able to kind of look everywhere sometimes we might be able to look a place where we can't even see our player anymore and if it gets really bad we can maybe even move a camera inside of obstacles or parts of the level luckily cinema Sheen actually has a feature built in to help avoid this so if we select our thirdperson camera and go to the bottom here you can see that we can add extensions to our camera and one of these extensions is these machine collider what this basically does is have a camera check if it's currently colliding with something or if there's something in the way of our cameras seeing our character and then moves our camera out of the way it's really easy for us to set up we just want to select what layers we should check whether or not we are colliding with so right here you can see it's currently set to default well I've gone ahead and set all of my environment objects to use the ground layer so in my case I'm just gonna go ahead and change that to ground and then remove the fault here we're also going to have it ignore all players under ignore attack here in select player and then simply give our player that player tag and finally we want to set the strategy from perserve camera height to pull a camera forward this is the behavior that you want in most games and what this basically does if I go ahead and demonstrate here is that if something gets in the way of us seeing our character our camera simply moves forward and if we collide with the obstacle itself the same thing happens you can see we cannot move our camera into this obstacle really really cool I find another thing that really works with this if we go to the top we can change the lens a new clip plane to something smaller which will just help increase our margin of error because we can get closer to an obstacle without our camera clipping through it and finally if you want and this is completely up to you you can add some damping to this so we could go ahead and set this to something like point six and point six and what this will do is just smooth out the movement of our camera this will mean that it sometimes travels through the object but I find that this is actually an okay tradeoff in most cases that's completely up to you if you want to add that but I find either way this is just a great way for your camera not to constantly get stuck inside of other objects awesome that's pretty much it for this video if you enjoyed it make sure to subscribe and ring that notification bell so you don't miss the next one now from here it's up to you to start adding more features to your controller as you need them if for example you want to add gravity and jumping to your controller will of course have a link to our firstperson controller tutorial where we show exactly how to do that it should be pretty easy to just add to the script of course creating a really extensive controller can take a lot of time and quickly becomes pretty complicated so if you want you can always pick up a third person character controller on the unity asset store I personally recommend this one since it's fairly easy to get started with and it has so many features like driving sliding ragdolls a moving platform system inverse kinematics and the list goes on well of course have a link to that in the description also don't forget to check out jason's course on game architecture learn how to properly make big games by simply clicking the link in the description and get a free hoodie included on that thanks for watching and I'll see you in the next video thanks to the awesome patreon supporters who donated in April and a special thanks to blank lost to violent stuff forever free Samara Phi John replica studios SRT Mike Luna set Jason you Tesco Navi ninja will avert an endangered sonic Dona team Gascoigne tanta Sam Jacob Sanford Noah Kiowa sake mark and twenty art Gregory Pierce Michael Cobb of the mighty Zeus oven Cooper else in the fierce Erasmus and serious you guys Rock
