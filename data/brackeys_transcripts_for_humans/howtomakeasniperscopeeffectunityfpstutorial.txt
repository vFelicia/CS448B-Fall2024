With timestamps:

00:00 - [Music]
00:02 - and I want to welcome to this video in
00:04 - creating a sniper scope effect this what
00:06 - we'll be creating today it's a really
00:07 - cool effect and it can look pretty
00:08 - complicated but in this video we'll be
00:10 - breaking it down into small tasks that
00:12 - when combined will produce pretty good
00:14 - results on the heater here broke so
00:16 - that's the reason for this silly thing
00:17 - let's just go ahead and get started just
00:19 - assume you're going to be working with
00:20 - today you of course going to need some
00:22 - weapons I'm going to be using the l96
00:24 - sniper rifle that you see here it's part
00:27 - of the modern weapons bundle which also
00:29 - includes the shotgun and these rifles in
00:31 - this pistol and we'll be adding to it as
00:33 - we go it's created by a guy called
00:35 - matias if you want to download the
00:37 - weapons for yourself you can simply go
00:39 - to dev assets comm and you can select
00:41 - the modern weapons pack choose the price
00:43 - that you want you can even grab it for
00:45 - free if you're just unable to support
00:47 - then simply hit pay what you want and
00:49 - it's going to download as a zip file
00:50 - with a unity package that will set
00:52 - everything up for you so now that we
00:54 - have our weapons in here we are pretty
00:56 - much ready to get started and you can
00:58 - see here if i zoom out that I have a
01:00 - rigidbody FPS controller in my scene you
01:03 - can pretty much use any kind of
01:05 - controller that you have I just grabbed
01:07 - this from the standard assets so if you
01:09 - want to get the same one you simply
01:10 - right click go import package and then
01:13 - characters and it's part of the
01:15 - characters folder here under the
01:17 - standard assets folder on the first
01:19 - person character and I simply grab the
01:21 - FPS controller here so that should set
01:23 - everything up and that just means that
01:25 - if we now hit play inside of unity and
01:27 - remember to put a Collider on your
01:28 - ground plane as well we are able to move
01:30 - around the scene and jump and look
01:32 - around and stuff like that so nothing
01:35 - fancy but just helps us set up a very
01:37 - basic first-person controller so now to
01:40 - actually get this gun mounted on our
01:43 - controller we need to kind of drag it
01:45 - under the main camera so let's just go
01:47 - ahead and duplicate the sniper rifle and
01:49 - let's drag it under the main camera and
01:51 - let's reset the transform on this so you
01:54 - can see currently that it's really
01:56 - offset compared to the camera it's
01:58 - actually inside the camera and that's
02:00 - not really desired so to fix this let's
02:02 - go ahead and create an empty game object
02:03 - under the main camera which we'll call a
02:06 - weapon holder and we'll basically just
02:09 - parent all our guns to this weapon
02:11 - holder object it will simply allow a
02:13 - to line up all our guns at once so that
02:16 - we can easily switch out guns if that's
02:18 - part of your game so now let's take our
02:20 - sniper rifle and parent that to the
02:22 - weapon holder and now we can position
02:24 - everything using this empty game object
02:26 - so first of all we need to have a look
02:28 - at where our first-person control is
02:31 - pointing so it's pointing in this
02:32 - direction and so I can see that we need
02:34 - to at least flip this 90 degrees on the
02:37 - Y and now it points into the right
02:39 - direction here but we also need to kind
02:41 - of move it over to the right a little
02:44 - bit
02:44 - adjust the X movement here and
02:46 - definitely also move it forward a bit
02:48 - and from here we can pretty much fine
02:52 - tune all of our values in the inspector
02:54 - so we'll just drag it down a bit on the
02:57 - Y drag it over a bit more on the X and
03:01 - what I really recommend that you do here
03:03 - is bump up the clipping plane so if we
03:07 - select our main camera you can see that
03:08 - our gun is currently being cut off when
03:11 - it gets too close to the camera the
03:13 - reason for this is that we currently
03:15 - have a minimum of 0.3 units from the
03:19 - camera before we start drawing any
03:21 - models and we can simply reduce this by
03:23 - changing this value to something smaller
03:25 - say point zero two and you can see that
03:28 - it's now rendering the entire weapon so
03:31 - what we can do now is go back to our
03:33 - weapon holder and readjust this so
03:35 - probably want to move it over a tad more
03:37 - maybe down even more something like that
03:40 - looks pretty decent and you should of
03:43 - course spend way more time fine-tuning
03:45 - this stuff than I do I just wanted to
03:47 - get this working quite aa fast and easy
03:50 - for the tutorial so let's just say that
03:53 - we are now are really satisfied with our
03:55 - weapon placement we can go ahead and
03:57 - rename this one to our sniper rifle just
04:00 - to keep things very simple and we have a
04:03 - weapon holder and our main camera so the
04:05 - next thing that we want to do is animate
04:07 - our weapon holder we want to have two
04:09 - animations one for when we are not
04:11 - scoped in so when our weapon is idle and
04:14 - one for when we are indeed scoped in so
04:17 - let's select our weapon holder let's go
04:19 - to our animation tab if this is not open
04:22 - you can go to window animation or press
04:24 - control 6 and let's hit create and
04:27 - is going to allow us to create a new
04:28 - animation and I like to keep all of my
04:30 - animation data within one folder so
04:32 - let's do new folder and it's called this
04:35 - one animation we can double click on
04:38 - that and then we can name our animation
04:40 - accordingly I'm going to rename this to
04:42 - idle and you can see that it's now
04:46 - created an idle animation along with a
04:48 - weapon holder controller and this is
04:51 - what is going to mix together different
04:53 - animations in order to transition from
04:56 - one animation to another and define
04:58 - parameters such as shoot the animation
05:01 - lube and what should happen so this is
05:04 - basically controlling the animations and
05:06 - this is the individual animation so
05:08 - let's first create some parameters for
05:10 - our idle animation you can see currently
05:13 - we have no properties in here so nothing
05:15 - will really happen what I think we
05:17 - should do is go and select that weapon
05:20 - holder if you haven't already make sure
05:22 - you're in record mode and you can see
05:23 - that our play buttons are also now red
05:25 - to signify that we are in record mode I
05:28 - think we should simply animate our Y
05:30 - value a tiny tiny bit up and down kind
05:33 - of like we're breathing so let's start
05:35 - at a y-value of minus 0.12 and then we
05:40 - can move forward let's say 2 seconds and
05:42 - I'm just scrolling here and we can maybe
05:45 - animate this arm downwards by simply
05:48 - adding a 2 onto that and then we can
05:51 - just scroll out even further and we can
05:54 - copy the first keyframes over to the 4
05:57 - second mark so if we just play this back
06:00 - you can see that we have a very subtle
06:02 - movement on the gun I kind of like that
06:04 - and we can just smooth this out even
06:06 - more by selecting all the keyframes
06:08 - right-clicking and selecting flat and
06:10 - that's going to make sure that if we
06:12 - have a look at our curves here and we of
06:14 - course need to only look at the Y
06:16 - position and hit F here you can see that
06:18 - it is curving a tiny tiny bit but the
06:22 - values here are so small that it's not
06:24 - going to be super noticeable cool so
06:26 - that's our idle animation now we can
06:28 - shift back to the dope sheet and we can
06:30 - create a new clip and this is of course
06:32 - going to be our scoped in animation and
06:35 - here I just want to call this something
06:37 - like a scoped and we can say that
06:40 - and again we want to select our weapon
06:42 - holder and here I want to reset the
06:45 - x-value I want that to be zero so that
06:48 - our gun is totally centered I also want
06:50 - to move up on the Y and you can see that
06:53 - it's moving very quickly so it's hard
06:54 - for me to fine-tune but if I just hold
06:57 - down alt it's going to allow me to do or
07:00 - adjust this value in much smaller
07:02 - increments so something like negative
07:05 - point one looks pretty good and then we
07:07 - can move in the Z a little bit as well
07:09 - to get the gun really close to our
07:12 - camera something like that and you will
07:15 - notice that I've just put this keyframe
07:17 - at the very beginning of the animation I
07:19 - didn't do any kind of transition you may
07:22 - you may think that we should really
07:23 - start here and then as the animation
07:26 - went on we should transition to on this
07:29 - position but instead of just put it at
07:30 - this start and the reason for this is
07:33 - that we can actually have Meccan in the
07:35 - Unity animation system automatically
07:38 - transition between this and this
07:41 - position for us so we don't need to
07:43 - actually keyframe that in and I'm going
07:45 - to show you that in a second so now that
07:48 - we have these two animations what we can
07:50 - go ahead and do is actually open up our
07:53 - weapon holders so this is again the
07:55 - animation controller what controls what
07:58 - animation we're currently playing so
08:00 - let's just double click that and it's
08:02 - going to open it up in the animator and
08:04 - our animator is basically the editor for
08:08 - the animation controller so again which
08:10 - we differentiate between our animation
08:12 - down here where we create animation
08:14 - clips and the animator where we
08:16 - transition between animation Clips cool
08:20 - so and again if the animator isn't open
08:22 - you go to window and you select animator
08:24 - and you're good to go so you can see
08:26 - here it's selected idle as default clip
08:28 - that's why it's orange and we also have
08:30 - a arrow pointing from the entry which
08:33 - means or the beginning of our game over
08:36 - to the idle animation if it's not
08:37 - already you can always right click and
08:39 - set hit set as layer default state and
08:42 - it's going to change that now we need to
08:45 - create a transition from our idle to our
08:47 - scope so let's right click make
08:49 - transition over to the scope but we
08:52 - don't want this to happen as soon as
08:54 - we start the game right now if we start
08:55 - the game it's going to play the idol and
08:57 - then go straight to the scoped we
08:59 - instead want this to happen when a
09:01 - certain condition is met and that is
09:03 - whenever we choose to scope in using
09:06 - some kind of player input to do this we
09:08 - create what is called a parameter you
09:10 - can see up here we have two tabs the
09:12 - layers and the parameters make sure you
09:14 - are under parameter and then hit the
09:16 - plus sign and we're going to select
09:17 - boolean and the boolean here is
09:20 - something like is scoped or just scoped
09:25 - for short and this is going to control
09:28 - whether or not we are currently scoped
09:30 - in so you can see that I can switch this
09:32 - to default to true or to false we of
09:35 - course want this to be defaulted to
09:36 - false so that when we start a game we're
09:39 - not going to start scoped in then on
09:41 - this transition we are now able to add a
09:44 - condition we simply hit the plus sign
09:45 - here and it will automatically add the
09:48 - scoped parameter and say that we only
09:51 - want this to happen when scoped
09:52 - is true and we can do the same thing
09:56 - when transitioning back so we make a
09:58 - transition from the scoped to the idle
10:01 - animation we select the backwards
10:03 - transition and we add a new condition
10:05 - here that we only want to do this when
10:07 - scoped is now false so that is how we
10:11 - transition between animations however
10:13 - there will be a problem with this and
10:15 - that is we are actually going to wait
10:17 - for idle to finish before we transition
10:21 - to the new animation that's what's
10:23 - called exit time and if we go in and
10:26 - click on this transition here you can
10:28 - see that's currently enabled what we
10:30 - want to do is disable exit time and then
10:33 - instead go in here and say that we want
10:35 - this to have a fixed duration where the
10:38 - transition duration is 0.15 I find that
10:42 - to be a pretty good value and that
10:44 - basically means how quickly we are going
10:45 - to scope in we of course want to do this
10:48 - as well when we are transitioning back
10:50 - to the idle animation so here let's
10:52 - select our backwards transition and
10:54 - remove exit time and it's also set the
10:57 - transition duration to 0.15 and you can
11:00 - have different transition durations if
11:02 - you want to scope in quicker than you
11:04 - are scoped out you can simply change the
11:07 - transition duration
11:08 - on the individual transitions but I want
11:11 - them to have a uniform length so to
11:13 - preview what we just made we can take
11:15 - our animator and duct it over here by
11:17 - the inspector so that we can see our
11:19 - game view we can also just scroll over
11:21 - here to see our different transitions by
11:24 - the way to move around the animator I
11:27 - use the middle mouse button or you could
11:29 - also use alt and then left click and
11:31 - basically what we'll do here is select a
11:34 - weapon holder and when we now hit play
11:37 - we should see the different animations
11:40 - playing you can see currently that the
11:41 - idle is playing and how far it is in its
11:44 - animation cycle if we now hit escape our
11:47 - mouth should appear and don't mind the
11:49 - fact that the view here is still
11:51 - following our mouse movement it's not
11:53 - going to matter what we can do now is go
11:55 - up here and we can see what happens when
11:57 - scope is set to true so if we click that
11:59 - it's going to go into transition over to
12:02 - our scoped animation and when I then
12:05 - click it again it's going to transition
12:07 - back and you can see how much it smooths
12:09 - this out and that is all done by making
12:13 - them itself we didn't have to do that at
12:15 - all so now we're ready to control these
12:17 - animations through script and to do this
12:20 - I'm just going to select the weapon hold
12:21 - the object but you can pretty much place
12:23 - it anywhere you can even add all this
12:25 - logic to an already existing script say
12:28 - you have a script called sniper rifle
12:30 - you can just add the scoping mechanic to
12:32 - that but for the purpose of this
12:34 - tutorial we're going to be creating a
12:35 - separate script
12:36 - let's hit add component and let's call
12:38 - the script something like scope
12:40 - let's hit new script create an ADD and
12:42 - let's just don't click this to open it
12:44 - up in visual studio so let's begin by
12:46 - creating a reference to our animator
12:48 - let's remove these two functions and
12:50 - instead create a public animator and
12:53 - we'll also call it animator with a
12:55 - non-capital a what we want to do is
12:57 - access this animator whenever we want to
13:00 - scope in and out and change the value of
13:02 - our scope parameter that we just created
13:04 - so to do this let's get some input from
13:06 - the player and remember we check for
13:08 - input inside of the update method so
13:11 - let's write void update and inside of
13:14 - the update method we write if input get
13:17 - button down and this will return true
13:20 - when
13:20 - the button that we now specify is click
13:23 - and the button that we want to check for
13:25 - is fire 2 and fire 2 is the right mouse
13:29 - button what you normally use to scope in
13:32 - you can of course write something else
13:34 - here but I'm just going to be using that
13:37 - so inside of the safe statement we can
13:39 - now change some values on the animator
13:40 - to do this we go animator dot set bull
13:44 - and we then specify the name of our
13:47 - boolean parameter that was scoped and
13:49 - remember this needs to be exact because
13:52 - it's not going to throw an error if it's
13:54 - not so just to make sure that we're
13:56 - using the same name here we'll go inside
13:58 - of our animator inside of unity and just
14:01 - copy the name here and paste it in it's
14:04 - very important that you get that right
14:06 - then comma and we then input whether or
14:10 - not we want to set it to true or false
14:12 - but in our case that varies on what it's
14:15 - currently set to we just want to flip it
14:17 - so if it's currently true and we're
14:19 - scrubbed in we want to scope out and the
14:21 - other way around if we're not scoped in
14:23 - and it's set to false we want to set to
14:25 - true in order to scope in so to do that
14:28 - let's keep track of whether or not we're
14:30 - currently scoped in on the easiest way
14:32 - of doing this is just creating a private
14:34 - boolean called
14:36 - is scoped and we default that to false
14:39 - you could also just get the value from
14:41 - this bowl but I think it's better to
14:43 - keep track of this in a separate private
14:45 - variable on the script
14:47 - so basically what we do here is just
14:48 - input whether or not we're currently
14:50 - scoped there we go so if we are scoped
14:53 - we set that to true and if not we set it
14:56 - to false but we also need to flip the
14:59 - value of its scoped to do that before we
15:01 - access the animator we go is scoped
15:05 - equals the opposite of what is scoped
15:09 - currently is so again this means that
15:11 - we'll get the opposite so if it's false
15:14 - this will return true and if it's true
15:17 - it will return false you get it the cool
15:19 - thing about this piece of code is that
15:21 - it's so ridiculously small yet we can
15:24 - animate pretty much anything inside the
15:26 - game and it should actually already be
15:28 - working so if we go to a weapon holder
15:29 - now let's go back to the inspector we
15:32 - just need to drag in the animator
15:33 - and we pretty much hit ready to hit play
15:35 - so now when I right-click we scrub in
15:38 - I'm going to right-click again we scoped
15:40 - out the next thing we want to do is
15:42 - overlay some kind of UI that resembles a
15:45 - scope and I've provided this inside of
15:47 - the modern weapons pack as well so if
15:49 - you double click that after downloading
15:51 - it and access the extra folder you can
15:54 - see in here we have a scope overlay PNG
15:56 - and we simply drag this inside of unity
15:59 - you can use any image I'm just going to
16:01 - be using this one we want to our click
16:04 - on it and change the texture type to
16:06 - sprite 2d and UI and we also probably
16:09 - want to bump up the max size to our 4k
16:13 - so let's just hit apply on all that and
16:15 - it's going to very quickly apply it and
16:17 - you can see that it now is transparent
16:20 - within this scope here so let's right
16:23 - click in the higher Crego UI and then
16:25 - image and it's going to create a new
16:27 - canvas for us along with a 2d image
16:29 - let's go to the scene hit F to focus on
16:31 - it and switch to 2d mode and we can go
16:34 - ahead and change the source image here
16:36 - we want to change that to the scope
16:38 - overlay we just import it we also want
16:40 - to hit set native size to scale this up
16:42 - to match its correct proportions and
16:44 - finally you can see in the game that it
16:47 - already looks pretty good but if we
16:49 - maximize the game view here and I'm
16:51 - doing that by shortcut by simply hitting
16:52 - shift space it doesn't really scale up
16:55 - with the screen so let's go into our
16:57 - canvas and change the UI scale mode to
16:59 - scale with screen size let's slide this
17:02 - all the way over to height so that each
17:04 - time our window gets taller it's going
17:07 - to scale with it awesome so that looks a
17:10 - lot better and I'm actually really
17:11 - satisfied with that
17:13 - now let's rename our image to scope
17:15 - overlay so let's now control this
17:18 - through a script so let's disable it
17:20 - inside of the inspector and let's head
17:22 - into visual studio and we can create a
17:24 - reference to the object so let's go
17:25 - public game object to create a reference
17:27 - let's call it something like scope
17:30 - overlay and then we can simply go to the
17:33 - update method here and type scope
17:35 - overlay whoops scope overlay set active
17:38 - and input the is scoped variable however
17:41 - this is going to propose a problem
17:44 - because if we now go into unity and we
17:46 - remember to hook up the scope overlay
17:48 - here so drag that in there you will
17:50 - notice that when we play it's going to
17:53 - enable the image as soon as we start
17:55 - scoping and we actually want some delay
17:57 - on that because we only want it to
18:00 - appear when we have fully scoped in and
18:02 - the animation is done so we want to add
18:05 - a bit of delay to this the way to do
18:07 - that is by creating a separate function
18:09 - that will control on our scope so we'll
18:13 - create a void on scoped and we'll also
18:16 - create another void called on unscoped
18:20 - and then we simply go down here and we
18:22 - say if arm is scoped we want to call on
18:25 - scoped else we want to call on unscoped
18:30 - awesome but of course we want to delay
18:34 - this a little bit and inside of a normal
18:36 - function in c-sharp we're not able to
18:38 - wait a certain amount of seconds to do
18:41 - that we need to convert this into a
18:42 - kuroh team by instead of typing void we
18:45 - type I enumerator and now when we're
18:49 - calling it we don't want to say on scope
18:51 - we want to say start corrode teen and
18:53 - then on scoped there we go so we just
18:57 - need to wrap that in a separate function
18:59 - call and then down here we can now say
19:01 - yield return new waitforseconds and
19:05 - again if you've never seen a KO routine
19:07 - the syntax here is going to be so super
19:09 - weird but just type after me and know
19:11 - that whatever you put in here is the
19:13 - amount of seconds that it's going to
19:14 - wait before calling the rest of the code
19:17 - so in here we'll put point one five the
19:19 - same number as we did for the transition
19:22 - duration then afterwards here we can set
19:24 - our scope overlay oops
19:27 - scope overlay we can say dot set active
19:30 - to true and up here we can say scope
19:34 - overlaid set active false awesome so
19:38 - that should actually work and now we
19:40 - should have delay so that our on
19:43 - transition will finish before showing
19:46 - the scope and indeed it does and you can
19:47 - see just how much cooler that is next up
19:51 - we of course want to disable the weapon
19:52 - when we are scoped in because right now
19:54 - it's really getting in the way and we
19:56 - also probably want to increase our field
19:59 - of view
19:59 - so that we will get the impression that
20:01 - we are actually assuming and then the
20:03 - scope is actually doing something so to
20:05 - do that we simply add a few references
20:08 - inside of Visual Studio here we need a
20:11 - reference to our gun and we could just
20:13 - disable it but one thing that is way
20:16 - more normal to do is have a separate
20:19 - camera rendering the weapon and then
20:21 - have one camera rendering everything
20:23 - else but this will also help you do is
20:26 - solve problems where your weapon is
20:28 - clipping through other objects if I were
20:31 - to go in here now into the scene go out
20:33 - of the 2d mode here and focus on our
20:35 - rigidbody FPS controller if I then go in
20:38 - here create a 3d object cube and place
20:42 - it in front of the controller here if we
20:46 - then hit play and walk into this cube
20:49 - you can see that our gun is clipping
20:51 - through so to solve this and also easily
20:55 - make us able to disable the graphics of
20:57 - our weapon without removing it from the
21:00 - scene we simply go ahead and create a
21:02 - separate camera to do this we
21:04 - right-click and go armed camera and I'm
21:07 - going to parent this to the normal
21:09 - camera so that it will follow everything
21:11 - that our normal camera does and make
21:13 - sure you reset the transform so that we
21:15 - don't have any kind of weird offset and
21:17 - what we'll do here is now add a lab
21:20 - layer separately for the weapons you can
21:23 - see I've actually already done this to
21:25 - do the same on your system all you need
21:27 - to do is select the weapon holder go
21:29 - layer add layer and you go ahead and
21:31 - type in weapons on the first one here
21:33 - then you go back to the weapon holder
21:35 - and you change the layer to weapons and
21:38 - we want to do that on the children as
21:40 - well so that our sniper rifle will also
21:42 - have the weapons layer assigned now
21:45 - inside of our camera and this is going
21:47 - to be our weapon camera we go and select
21:51 - calling mask here and we'd select
21:53 - nothing except for weapons so we only
21:55 - want this to draw the weapons and you
21:58 - can see that down here and we want to
21:59 - set the arm clear flags to depth only so
22:03 - you can see doesn't render anything like
22:05 - skybox so the color it only renders our
22:08 - gun and we want to set the depth here to
22:10 - 1 to make sure that it's on top of a
22:13 - the camera and again we want to adjust
22:14 - the near plane to point zero one then we
22:18 - select our main camera and in here we
22:20 - remove now on the weapon so under
22:22 - culling mask we disable the weapons and
22:25 - you can see now it doesn't draw that and
22:27 - we can actually set the near flags up
22:28 - again here so we can set them to
22:30 - something like point one a bit higher
22:32 - and now we should see inside the game
22:34 - that it's overlaid the web converting
22:36 - camera on top of the main camera and if
22:38 - we disable the weapon camera weapons are
22:40 - not going to be drawn so now we can go
22:42 - inside of Visual Studio we can add a
22:44 - reference to the weapon camera so we
22:46 - just go public game object weapon camera
22:50 - and then down here we go weapon camera
22:53 - dot said active to true when we're not
22:55 - scoped in and we want to set it to false
22:58 - when we are scoped in so now we should
23:01 - see that if we play here oops we also
23:04 - need to reference this of course and we
23:06 - also need to remove the audio listener
23:08 - the GUI layer and the flare layer on the
23:11 - camera here if we select a weapon holder
23:13 - we can now drag in our weapon camera and
23:15 - now we should see that if we right-click
23:17 - and scope in that our weapon indeed
23:21 - disappears when our overlay is enabled
23:25 - so that's awesome and we can go ahead
23:26 - and remove our cube now because if we
23:29 - play you will notice that that is indeed
23:32 - gone as well
23:33 - we cannot clip through that and this is
23:36 - a very very common trick used in pretty
23:38 - much any first-person shooter these days
23:40 - and some also do a bit of animation when
23:42 - you get close to the wall they normally
23:43 - use this technique on top of that as
23:45 - well so the last thing is just adjusting
23:48 - the fov on the camera if you don't know
23:50 - what if a we is it's basically field of
23:53 - view so the higher this number get the
23:55 - more we're going to be able to see from
23:57 - our surroundings and the smaller it gets
23:59 - the more zoomed in it's going to be in
24:02 - order to adjust this we simply need a
24:03 - reference to the camera here so we
24:05 - simply go in here create a public camera
24:08 - now because we'll be adjusting the
24:09 - camera directly and we'll just call this
24:11 - something like main camera and all we
24:13 - need to do is go down here and when we
24:16 - scope then we want to set main camera
24:18 - field of view and setting it to some
24:20 - smaller numbers say 15 or you could go
24:23 - up here and create a variable for that
24:24 - which we are going to do so we'll
24:26 - in public float called something like
24:28 - scoped fov and we'll set that to 15 up
24:32 - here and we'll also create a private
24:34 - float which is going to store the
24:36 - previous field of view that we had so
24:39 - that we can return back to the normal
24:41 - field of view so we call this either
24:43 - previous field of view or normal fov and
24:47 - we're just going to not default that to
24:49 - anything then down here we want to set
24:51 - normal fov equal to main camera dot
24:54 - field of view and then we want to set
24:56 - main camera dot field of view - scoped
24:59 - fov and then when we unscoped we simply
25:02 - set main camera feel the view back to
25:05 - normal f o V so that should basically be
25:08 - everything we needed to do oh actually
25:11 - of course we need to drag in our camera
25:13 - here so dragged in the main camera and
25:15 - now we can maximize the game hit play
25:17 - and you should see all of these neat
25:19 - elements working together we have
25:21 - animation we have zooming in we have a
25:24 - nice GUI overlay and what you can do of
25:26 - course is adjust to fill the view
25:28 - depending on how much you want this to
25:30 - zoom in and you can also adjust the
25:31 - speed of your controller and how fast
25:34 - you are able to look around to give an
25:37 - impression that the character is
25:39 - actually scoped in and might have
25:41 - difficulty moving and such and you can
25:43 - also add breathing effects all of that
25:45 - is up to you to play around with I just
25:49 - wanted to show you how to create this
25:50 - basic scope effect and we can enjoy the
25:52 - look of these awesome weapons remember
25:54 - if you want to get them you can just go
25:56 - to dev assets calm and if you choose to
25:58 - support that's freaking awesome on the
26:00 - site is powered only by you guys's
26:03 - support so that's pretty much it if
26:04 - you're making a first-person shooter
26:06 - I really suggest you check out this
26:07 - video on making a multiplayer FPS in
26:09 - unity it's a whole series and there's a
26:11 - lot of good stuff in there so I suggest
26:13 - you browse around also if you want to
26:15 - support these videos along with the
26:16 - different development projects such as
26:18 - dev assets you can always become a
26:19 - patron a patron comm slash Brad keys
26:22 - patreon helps you to donate a monthly
26:24 - amount of your choosing and you can
26:25 - cancel it at any time so it's really
26:27 - really awesome other than that I will
26:28 - see you in the next video
26:32 - thanks to all the awesome patreon
26:34 - supporters who donated in December and a
26:36 - special thanks to Sultan al-sharif Derek
26:38 - M jerk face Tamara Phi James Calhoun
26:40 - Robert Bonham and Jason Lotito if you
26:42 - want to become a patron yourself you can
26:44 - do so at patreon.com slash brackets

Cleaned transcript:

and I want to welcome to this video in creating a sniper scope effect this what we'll be creating today it's a really cool effect and it can look pretty complicated but in this video we'll be breaking it down into small tasks that when combined will produce pretty good results on the heater here broke so that's the reason for this silly thing let's just go ahead and get started just assume you're going to be working with today you of course going to need some weapons I'm going to be using the l96 sniper rifle that you see here it's part of the modern weapons bundle which also includes the shotgun and these rifles in this pistol and we'll be adding to it as we go it's created by a guy called matias if you want to download the weapons for yourself you can simply go to dev assets comm and you can select the modern weapons pack choose the price that you want you can even grab it for free if you're just unable to support then simply hit pay what you want and it's going to download as a zip file with a unity package that will set everything up for you so now that we have our weapons in here we are pretty much ready to get started and you can see here if i zoom out that I have a rigidbody FPS controller in my scene you can pretty much use any kind of controller that you have I just grabbed this from the standard assets so if you want to get the same one you simply right click go import package and then characters and it's part of the characters folder here under the standard assets folder on the first person character and I simply grab the FPS controller here so that should set everything up and that just means that if we now hit play inside of unity and remember to put a Collider on your ground plane as well we are able to move around the scene and jump and look around and stuff like that so nothing fancy but just helps us set up a very basic firstperson controller so now to actually get this gun mounted on our controller we need to kind of drag it under the main camera so let's just go ahead and duplicate the sniper rifle and let's drag it under the main camera and let's reset the transform on this so you can see currently that it's really offset compared to the camera it's actually inside the camera and that's not really desired so to fix this let's go ahead and create an empty game object under the main camera which we'll call a weapon holder and we'll basically just parent all our guns to this weapon holder object it will simply allow a to line up all our guns at once so that we can easily switch out guns if that's part of your game so now let's take our sniper rifle and parent that to the weapon holder and now we can position everything using this empty game object so first of all we need to have a look at where our firstperson control is pointing so it's pointing in this direction and so I can see that we need to at least flip this 90 degrees on the Y and now it points into the right direction here but we also need to kind of move it over to the right a little bit adjust the X movement here and definitely also move it forward a bit and from here we can pretty much fine tune all of our values in the inspector so we'll just drag it down a bit on the Y drag it over a bit more on the X and what I really recommend that you do here is bump up the clipping plane so if we select our main camera you can see that our gun is currently being cut off when it gets too close to the camera the reason for this is that we currently have a minimum of 0.3 units from the camera before we start drawing any models and we can simply reduce this by changing this value to something smaller say point zero two and you can see that it's now rendering the entire weapon so what we can do now is go back to our weapon holder and readjust this so probably want to move it over a tad more maybe down even more something like that looks pretty decent and you should of course spend way more time finetuning this stuff than I do I just wanted to get this working quite aa fast and easy for the tutorial so let's just say that we are now are really satisfied with our weapon placement we can go ahead and rename this one to our sniper rifle just to keep things very simple and we have a weapon holder and our main camera so the next thing that we want to do is animate our weapon holder we want to have two animations one for when we are not scoped in so when our weapon is idle and one for when we are indeed scoped in so let's select our weapon holder let's go to our animation tab if this is not open you can go to window animation or press control 6 and let's hit create and is going to allow us to create a new animation and I like to keep all of my animation data within one folder so let's do new folder and it's called this one animation we can double click on that and then we can name our animation accordingly I'm going to rename this to idle and you can see that it's now created an idle animation along with a weapon holder controller and this is what is going to mix together different animations in order to transition from one animation to another and define parameters such as shoot the animation lube and what should happen so this is basically controlling the animations and this is the individual animation so let's first create some parameters for our idle animation you can see currently we have no properties in here so nothing will really happen what I think we should do is go and select that weapon holder if you haven't already make sure you're in record mode and you can see that our play buttons are also now red to signify that we are in record mode I think we should simply animate our Y value a tiny tiny bit up and down kind of like we're breathing so let's start at a yvalue of minus 0.12 and then we can move forward let's say 2 seconds and I'm just scrolling here and we can maybe animate this arm downwards by simply adding a 2 onto that and then we can just scroll out even further and we can copy the first keyframes over to the 4 second mark so if we just play this back you can see that we have a very subtle movement on the gun I kind of like that and we can just smooth this out even more by selecting all the keyframes rightclicking and selecting flat and that's going to make sure that if we have a look at our curves here and we of course need to only look at the Y position and hit F here you can see that it is curving a tiny tiny bit but the values here are so small that it's not going to be super noticeable cool so that's our idle animation now we can shift back to the dope sheet and we can create a new clip and this is of course going to be our scoped in animation and here I just want to call this something like a scoped and we can say that and again we want to select our weapon holder and here I want to reset the xvalue I want that to be zero so that our gun is totally centered I also want to move up on the Y and you can see that it's moving very quickly so it's hard for me to finetune but if I just hold down alt it's going to allow me to do or adjust this value in much smaller increments so something like negative point one looks pretty good and then we can move in the Z a little bit as well to get the gun really close to our camera something like that and you will notice that I've just put this keyframe at the very beginning of the animation I didn't do any kind of transition you may you may think that we should really start here and then as the animation went on we should transition to on this position but instead of just put it at this start and the reason for this is that we can actually have Meccan in the Unity animation system automatically transition between this and this position for us so we don't need to actually keyframe that in and I'm going to show you that in a second so now that we have these two animations what we can go ahead and do is actually open up our weapon holders so this is again the animation controller what controls what animation we're currently playing so let's just double click that and it's going to open it up in the animator and our animator is basically the editor for the animation controller so again which we differentiate between our animation down here where we create animation clips and the animator where we transition between animation Clips cool so and again if the animator isn't open you go to window and you select animator and you're good to go so you can see here it's selected idle as default clip that's why it's orange and we also have a arrow pointing from the entry which means or the beginning of our game over to the idle animation if it's not already you can always right click and set hit set as layer default state and it's going to change that now we need to create a transition from our idle to our scope so let's right click make transition over to the scope but we don't want this to happen as soon as we start the game right now if we start the game it's going to play the idol and then go straight to the scoped we instead want this to happen when a certain condition is met and that is whenever we choose to scope in using some kind of player input to do this we create what is called a parameter you can see up here we have two tabs the layers and the parameters make sure you are under parameter and then hit the plus sign and we're going to select boolean and the boolean here is something like is scoped or just scoped for short and this is going to control whether or not we are currently scoped in so you can see that I can switch this to default to true or to false we of course want this to be defaulted to false so that when we start a game we're not going to start scoped in then on this transition we are now able to add a condition we simply hit the plus sign here and it will automatically add the scoped parameter and say that we only want this to happen when scoped is true and we can do the same thing when transitioning back so we make a transition from the scoped to the idle animation we select the backwards transition and we add a new condition here that we only want to do this when scoped is now false so that is how we transition between animations however there will be a problem with this and that is we are actually going to wait for idle to finish before we transition to the new animation that's what's called exit time and if we go in and click on this transition here you can see that's currently enabled what we want to do is disable exit time and then instead go in here and say that we want this to have a fixed duration where the transition duration is 0.15 I find that to be a pretty good value and that basically means how quickly we are going to scope in we of course want to do this as well when we are transitioning back to the idle animation so here let's select our backwards transition and remove exit time and it's also set the transition duration to 0.15 and you can have different transition durations if you want to scope in quicker than you are scoped out you can simply change the transition duration on the individual transitions but I want them to have a uniform length so to preview what we just made we can take our animator and duct it over here by the inspector so that we can see our game view we can also just scroll over here to see our different transitions by the way to move around the animator I use the middle mouse button or you could also use alt and then left click and basically what we'll do here is select a weapon holder and when we now hit play we should see the different animations playing you can see currently that the idle is playing and how far it is in its animation cycle if we now hit escape our mouth should appear and don't mind the fact that the view here is still following our mouse movement it's not going to matter what we can do now is go up here and we can see what happens when scope is set to true so if we click that it's going to go into transition over to our scoped animation and when I then click it again it's going to transition back and you can see how much it smooths this out and that is all done by making them itself we didn't have to do that at all so now we're ready to control these animations through script and to do this I'm just going to select the weapon hold the object but you can pretty much place it anywhere you can even add all this logic to an already existing script say you have a script called sniper rifle you can just add the scoping mechanic to that but for the purpose of this tutorial we're going to be creating a separate script let's hit add component and let's call the script something like scope let's hit new script create an ADD and let's just don't click this to open it up in visual studio so let's begin by creating a reference to our animator let's remove these two functions and instead create a public animator and we'll also call it animator with a noncapital a what we want to do is access this animator whenever we want to scope in and out and change the value of our scope parameter that we just created so to do this let's get some input from the player and remember we check for input inside of the update method so let's write void update and inside of the update method we write if input get button down and this will return true when the button that we now specify is click and the button that we want to check for is fire 2 and fire 2 is the right mouse button what you normally use to scope in you can of course write something else here but I'm just going to be using that so inside of the safe statement we can now change some values on the animator to do this we go animator dot set bull and we then specify the name of our boolean parameter that was scoped and remember this needs to be exact because it's not going to throw an error if it's not so just to make sure that we're using the same name here we'll go inside of our animator inside of unity and just copy the name here and paste it in it's very important that you get that right then comma and we then input whether or not we want to set it to true or false but in our case that varies on what it's currently set to we just want to flip it so if it's currently true and we're scrubbed in we want to scope out and the other way around if we're not scoped in and it's set to false we want to set to true in order to scope in so to do that let's keep track of whether or not we're currently scoped in on the easiest way of doing this is just creating a private boolean called is scoped and we default that to false you could also just get the value from this bowl but I think it's better to keep track of this in a separate private variable on the script so basically what we do here is just input whether or not we're currently scoped there we go so if we are scoped we set that to true and if not we set it to false but we also need to flip the value of its scoped to do that before we access the animator we go is scoped equals the opposite of what is scoped currently is so again this means that we'll get the opposite so if it's false this will return true and if it's true it will return false you get it the cool thing about this piece of code is that it's so ridiculously small yet we can animate pretty much anything inside the game and it should actually already be working so if we go to a weapon holder now let's go back to the inspector we just need to drag in the animator and we pretty much hit ready to hit play so now when I rightclick we scrub in I'm going to rightclick again we scoped out the next thing we want to do is overlay some kind of UI that resembles a scope and I've provided this inside of the modern weapons pack as well so if you double click that after downloading it and access the extra folder you can see in here we have a scope overlay PNG and we simply drag this inside of unity you can use any image I'm just going to be using this one we want to our click on it and change the texture type to sprite 2d and UI and we also probably want to bump up the max size to our 4k so let's just hit apply on all that and it's going to very quickly apply it and you can see that it now is transparent within this scope here so let's right click in the higher Crego UI and then image and it's going to create a new canvas for us along with a 2d image let's go to the scene hit F to focus on it and switch to 2d mode and we can go ahead and change the source image here we want to change that to the scope overlay we just import it we also want to hit set native size to scale this up to match its correct proportions and finally you can see in the game that it already looks pretty good but if we maximize the game view here and I'm doing that by shortcut by simply hitting shift space it doesn't really scale up with the screen so let's go into our canvas and change the UI scale mode to scale with screen size let's slide this all the way over to height so that each time our window gets taller it's going to scale with it awesome so that looks a lot better and I'm actually really satisfied with that now let's rename our image to scope overlay so let's now control this through a script so let's disable it inside of the inspector and let's head into visual studio and we can create a reference to the object so let's go public game object to create a reference let's call it something like scope overlay and then we can simply go to the update method here and type scope overlay whoops scope overlay set active and input the is scoped variable however this is going to propose a problem because if we now go into unity and we remember to hook up the scope overlay here so drag that in there you will notice that when we play it's going to enable the image as soon as we start scoping and we actually want some delay on that because we only want it to appear when we have fully scoped in and the animation is done so we want to add a bit of delay to this the way to do that is by creating a separate function that will control on our scope so we'll create a void on scoped and we'll also create another void called on unscoped and then we simply go down here and we say if arm is scoped we want to call on scoped else we want to call on unscoped awesome but of course we want to delay this a little bit and inside of a normal function in csharp we're not able to wait a certain amount of seconds to do that we need to convert this into a kuroh team by instead of typing void we type I enumerator and now when we're calling it we don't want to say on scope we want to say start corrode teen and then on scoped there we go so we just need to wrap that in a separate function call and then down here we can now say yield return new waitforseconds and again if you've never seen a KO routine the syntax here is going to be so super weird but just type after me and know that whatever you put in here is the amount of seconds that it's going to wait before calling the rest of the code so in here we'll put point one five the same number as we did for the transition duration then afterwards here we can set our scope overlay oops scope overlay we can say dot set active to true and up here we can say scope overlaid set active false awesome so that should actually work and now we should have delay so that our on transition will finish before showing the scope and indeed it does and you can see just how much cooler that is next up we of course want to disable the weapon when we are scoped in because right now it's really getting in the way and we also probably want to increase our field of view so that we will get the impression that we are actually assuming and then the scope is actually doing something so to do that we simply add a few references inside of Visual Studio here we need a reference to our gun and we could just disable it but one thing that is way more normal to do is have a separate camera rendering the weapon and then have one camera rendering everything else but this will also help you do is solve problems where your weapon is clipping through other objects if I were to go in here now into the scene go out of the 2d mode here and focus on our rigidbody FPS controller if I then go in here create a 3d object cube and place it in front of the controller here if we then hit play and walk into this cube you can see that our gun is clipping through so to solve this and also easily make us able to disable the graphics of our weapon without removing it from the scene we simply go ahead and create a separate camera to do this we rightclick and go armed camera and I'm going to parent this to the normal camera so that it will follow everything that our normal camera does and make sure you reset the transform so that we don't have any kind of weird offset and what we'll do here is now add a lab layer separately for the weapons you can see I've actually already done this to do the same on your system all you need to do is select the weapon holder go layer add layer and you go ahead and type in weapons on the first one here then you go back to the weapon holder and you change the layer to weapons and we want to do that on the children as well so that our sniper rifle will also have the weapons layer assigned now inside of our camera and this is going to be our weapon camera we go and select calling mask here and we'd select nothing except for weapons so we only want this to draw the weapons and you can see that down here and we want to set the arm clear flags to depth only so you can see doesn't render anything like skybox so the color it only renders our gun and we want to set the depth here to 1 to make sure that it's on top of a the camera and again we want to adjust the near plane to point zero one then we select our main camera and in here we remove now on the weapon so under culling mask we disable the weapons and you can see now it doesn't draw that and we can actually set the near flags up again here so we can set them to something like point one a bit higher and now we should see inside the game that it's overlaid the web converting camera on top of the main camera and if we disable the weapon camera weapons are not going to be drawn so now we can go inside of Visual Studio we can add a reference to the weapon camera so we just go public game object weapon camera and then down here we go weapon camera dot said active to true when we're not scoped in and we want to set it to false when we are scoped in so now we should see that if we play here oops we also need to reference this of course and we also need to remove the audio listener the GUI layer and the flare layer on the camera here if we select a weapon holder we can now drag in our weapon camera and now we should see that if we rightclick and scope in that our weapon indeed disappears when our overlay is enabled so that's awesome and we can go ahead and remove our cube now because if we play you will notice that that is indeed gone as well we cannot clip through that and this is a very very common trick used in pretty much any firstperson shooter these days and some also do a bit of animation when you get close to the wall they normally use this technique on top of that as well so the last thing is just adjusting the fov on the camera if you don't know what if a we is it's basically field of view so the higher this number get the more we're going to be able to see from our surroundings and the smaller it gets the more zoomed in it's going to be in order to adjust this we simply need a reference to the camera here so we simply go in here create a public camera now because we'll be adjusting the camera directly and we'll just call this something like main camera and all we need to do is go down here and when we scope then we want to set main camera field of view and setting it to some smaller numbers say 15 or you could go up here and create a variable for that which we are going to do so we'll in public float called something like scoped fov and we'll set that to 15 up here and we'll also create a private float which is going to store the previous field of view that we had so that we can return back to the normal field of view so we call this either previous field of view or normal fov and we're just going to not default that to anything then down here we want to set normal fov equal to main camera dot field of view and then we want to set main camera dot field of view scoped fov and then when we unscoped we simply set main camera feel the view back to normal f o V so that should basically be everything we needed to do oh actually of course we need to drag in our camera here so dragged in the main camera and now we can maximize the game hit play and you should see all of these neat elements working together we have animation we have zooming in we have a nice GUI overlay and what you can do of course is adjust to fill the view depending on how much you want this to zoom in and you can also adjust the speed of your controller and how fast you are able to look around to give an impression that the character is actually scoped in and might have difficulty moving and such and you can also add breathing effects all of that is up to you to play around with I just wanted to show you how to create this basic scope effect and we can enjoy the look of these awesome weapons remember if you want to get them you can just go to dev assets calm and if you choose to support that's freaking awesome on the site is powered only by you guys's support so that's pretty much it if you're making a firstperson shooter I really suggest you check out this video on making a multiplayer FPS in unity it's a whole series and there's a lot of good stuff in there so I suggest you browse around also if you want to support these videos along with the different development projects such as dev assets you can always become a patron a patron comm slash Brad keys patreon helps you to donate a monthly amount of your choosing and you can cancel it at any time so it's really really awesome other than that I will see you in the next video thanks to all the awesome patreon supporters who donated in December and a special thanks to Sultan alsharif Derek M jerk face Tamara Phi James Calhoun Robert Bonham and Jason Lotito if you want to become a patron yourself you can do so at patreon.com slash brackets
