With timestamps:

00:00 - thanks for tuning in at
00:02 - braies hello everyone and welcome to
00:04 - this video on making a 2d platformer
00:06 - course today we're going to be expanding
00:08 - Upon Our upgrade menu we're going to be
00:10 - adding in the idea of money and a way to
00:13 - kind of spend that money I don't know
00:15 - how far we'll go with implementing the
00:17 - actual stat upgrades uh but we should
00:20 - definitely have a more interactive
00:22 - upgrade menu when we are done so that's
00:24 - going to be super fun also I of course
00:26 - want to apologize that it's taking me so
00:28 - long to put out a new video but I've uh
00:31 - been sick I caught the flu and I
00:33 - actually still am a little bit so if you
00:34 - see me coughing uh it's nothing serious
00:37 - but it's not completely gone either so
00:39 - let's just uh dig right into today's
00:42 - video and forget all about uh flu and uh
00:46 - yeah so you can see I've left the
00:47 - project exactly as it was uh in the last
00:50 - video and uh the first thing that I
00:52 - noticed when I turned off the camera is
00:53 - that when we maximize the game here you
00:56 - can see that the astronaut snaps to the
00:58 - left and that looks super dumb really so
01:01 - let's um start out by anchoring him to
01:03 - the center and by the way the shortcut
01:05 - that I'm using to maximize a game or a
01:08 - window is just shift space it's super
01:11 - useful you can maximize any window in
01:13 - Unity by just um pressing shift space
01:16 - while hovering the mouse over it a
01:18 - shortcut that many people don't know so
01:20 - now under the UI uh overlay and then
01:22 - under the upgrade menu we can find our
01:24 - astronaut and we simply want to change
01:27 - this anchor here from the left to the
01:29 - center there there we go so now when we
01:30 - maximize the game everything looks much
01:33 - better cool so the first thing that I
01:35 - want to do here is just go ahead and
01:37 - disable this upgrade menu this way we
01:39 - can uh choose whether or not it needs to
01:41 - be enabled by simply pressing some kind
01:44 - of upgrade button and in our case I want
01:47 - that to be you and just to make sure
01:49 - that the user knows what button to press
01:51 - let's just add a simple text instruction
01:54 - down here so in order to get some text
01:56 - let's just duplicate this uh lives
01:58 - counter it has the Style with the little
02:01 - putut steps in the shadow and we can
02:02 - just just remove that script then we can
02:05 - uh maybe change the position of this
02:08 - whoops I selected the wrong one uh this
02:11 - is going to be
02:13 - um upgrade
02:17 - menu uh notice tool tip press U for
02:23 - upgrade menu there we go uh and we can
02:27 - simply move that down
02:28 - here and we can Center that text and we
02:33 - want it to be a lot bigger actually and
02:35 - we want this to say um
02:38 - press and then we can use some uh ITF
02:41 - Rich text format uh in here as you've
02:44 - maybe seen in HTML programming or stuff
02:47 - like that and uh the I here stands for
02:51 - you can see here the I stands for italic
02:54 - and that will just kind of um tilt our
02:56 - text a bit and that's cool when doing
02:58 - stuff like uh this this here so when we
03:01 - want to notify the user that it's the U
03:04 - button instead of using quotes or
03:06 - something else you can also do B for
03:08 - bold if you think that's cooler it's
03:10 - just fine but I like the uh italic style
03:14 - so press U to
03:17 - open the upgrade menu there we go and uh
03:22 - we actually need these to this to be
03:24 - even larger and we can drag this down
03:26 - here so it's at the very
03:28 - bottom and uh we could maybe uh yeah
03:31 - make sure that's centered everywhere and
03:33 - anchored to the bottom there we go and
03:36 - you can see what that looks like in the
03:38 - game and currently it looks horrible I
03:40 - also want to size down uh this
03:44 - text and uh yeah maybe we should do
03:47 - something like
03:49 - 14 I think that's fine just a very tiny
03:53 - notice down here uh that that is
03:55 - something you can indeed do uh we might
03:57 - want to yeah anchor that to the top here
04:01 - there we go and I think that looks just
04:03 - fine what you can do is make this text
04:06 - flash sometimes or maybe disable it when
04:08 - uh once the user has actually upgraded
04:10 - something you can just put an animation
04:12 - here I'm not going to bother with this
04:14 - since we have a lot to do so yeah I'm
04:17 - just going to skip over it and just
04:19 - leave it there it's not like it's
04:20 - abstracting the screen in any kind of
04:22 - way so uh that's just fine and uh then
04:25 - let's go inside of our game uh Master
04:27 - script double click to open it this up
04:30 - in uh Visual Studio manual develop
04:33 - whatever you're using and in here we
04:35 - will simply add some kind of method for
04:38 - enabling and disabling the uh update
04:42 - menu so uh first off we need a reference
04:44 - just like we have a reference to our
04:45 - game over UI and this is going to be a
04:47 - serialized field and it's going to store
04:50 - a private game object and it's going to
04:53 - be called upgrade
04:55 - menu then all we need is some kind of
04:58 - method on here and uh I think we're
05:01 - going to check for this in the update
05:04 - method here so you can simply say if
05:06 - input. getet key
05:08 - down and the key we want to check for in
05:11 - my case at least here is the U button
05:13 - you can choose any key that you want and
05:16 - you can also add it as a variable that
05:18 - might be better uh but since we have a
05:20 - lot on our plate let's just hard code it
05:22 - for now you know the good practices and
05:24 - you should definitely be doing then I'm
05:26 - just here to show you some new stuff so
05:29 - um and what we can do in here is maybe
05:32 - call some kind of method or we could
05:34 - just TDE code it in here I'm just going
05:35 - to make a quick private void uh which is
05:38 - going to toggle the upgrade
05:43 - menu something like that and that's all
05:46 - we are going to call right
05:49 - here uh awesome so what we then want to
05:52 - say is we want to say that our upgrade
05:54 - menu do set active so we can enable a
05:57 - disable here false is disabled and true
05:59 - is of course enabled and uh we don't
06:02 - want to give it either false or true
06:04 - instead we want to set it to the
06:06 - opposite of what is it currently is
06:08 - therefore the tle and uh we can get its
06:11 - current active state by using upgrad
06:13 - menu. active self you need to use active
06:16 - self because active is uh currently
06:19 - deprecated so and uh in order to make it
06:22 - the opposite of that we simply put a um
06:25 - what's this T this sign here an
06:28 - exclamation mark that right so that will
06:30 - inverse whatever operation we have going
06:34 - cool uh and uh what we can then do um is
06:39 - maybe we need some kind of way to notify
06:44 - other scripts that the upgrade menu is
06:46 - now active because we don't want to
06:50 - pause the game because we have
06:52 - animations going and we want the UI to
06:54 - update and all that but we definitely
06:57 - want some things to stop Happ happening
06:59 - for example we don't want to shoot while
07:02 - the upgrade menus is up we don't want to
07:03 - be able to move we don't want our
07:05 - enemies to chase us and uh there can be
07:08 - more stuff coming maybe you don't want
07:10 - the uh spawner to spawn anything you can
07:13 - think about these things on your own
07:15 - it's definitely up to you how uh how
07:17 - much of this stuff you want to change
07:19 - you can also just leave the game running
07:21 - uh that's completely fine a lot of games
07:23 - do that I just want to disable a few
07:26 - things I want to disable player movement
07:28 - uh player shooting
07:30 - and the fact that enemies chase us I
07:32 - think if we disable those three things
07:35 - uh it's going to be just fine good so in
07:38 - order to do that excuse me uh all we
07:42 - need to do is create what is called a
07:46 - delegate and I don't think we've
07:48 - discussed delegates in this series
07:50 - before so here we go so first off I want
07:53 - to write private delicate void and I'm
07:57 - going to call this um upgrade menu
08:03 - callback and it's not going to take
08:06 - actually we're going to tag in a bullion
08:10 - which is the active state so that's
08:11 - going to be called active so what is a
08:14 - delegate a delegate is basic basically a
08:18 - a way for us to create a um uh a type
08:22 - here that will store a bunch of
08:25 - references to functions so that we can
08:28 - call this delegate or invoked and it
08:33 - will call all of the different functions
08:35 - that are registered to that delegate so
08:38 - basically it allows us to uh without
08:42 - having knowing anything about any
08:44 - functions call some kind of event that
08:46 - will trigger a bunch of things in other
08:48 - scripts that have is uh subscribed to
08:52 - that event and there are a bunch of ways
08:54 - to do this one is using delegates
08:55 - another is using actions a third one is
08:58 - using what is called events uh but I'm
09:01 - just going to go with the old school
09:02 - dedicate here and this is the syntax so
09:05 - here we kind of create uh our type we
09:09 - create a delicate void it doesn't return
09:11 - anything and all of the methods that are
09:14 - subscribed to this will have a Boolean
09:17 - say saying whether or not it's active as
09:19 - an argument and then we create this
09:22 - specific uh instance of this delegate I
09:24 - am going to make this public actually
09:26 - and that's going to be of course a
09:28 - public upgrade menu call back just as
09:31 - when we create an enom class we first
09:34 - decare uh create the type and then we
09:36 - create the instance here and this is uh
09:38 - going to be called on upgrade menu on
09:42 - tacle upgrade menu maybe yeah that's
09:45 - better on toggle
09:48 - upgrade
09:49 - menu and uh we simply close that off so
09:53 - the cool thing about this here is that
09:56 - down here when we Tuggle this we can
09:59 - then say that we want on toggle upgrade
10:01 - menu to invoke all of the methods that
10:05 - have subscribed to this event and uh I
10:08 - will show you how you can register or
10:10 - subscribe to this event in a second but
10:13 - for now we need to pass in whether or
10:14 - not the our upgrade menu is actually
10:16 - active and we do this by simply uh
10:19 - putting in maybe the upgrade menu.
10:22 - active self so if our upgrade menu is
10:26 - active we put that in as an argument
10:28 - this will go go up here and tell this
10:31 - variable here to call all of the methods
10:35 - that have subscribed themselves to this
10:37 - delegate now let's take a look at
10:39 - actually subscribing methods to the
10:41 - delegate because uh this will currently
10:43 - not do a thing uh so what we can do is
10:46 - we can go ahead and find our um uh
10:49 - player maybe this is a good place to
10:52 - start here let's double click on our
10:54 - player and you can see here that I've
10:56 - typed beforehand require component type
10:58 - of plat form to the user control and
11:01 - this is because I want to uh simply Set
11:04 - uh or disable this uh component because
11:06 - it's what allows us to control the
11:08 - player and therefore I want to be able
11:10 - to disable it and uh what we can then do
11:14 - is uh we can create some kind of U
11:16 - method that should be called whenever
11:19 - the upgrade menu tole uh is um or
11:23 - whenever the upgrade menu is tackled uh
11:25 - so we are going to create maybe a a void
11:28 - here called on upgrade
11:32 - menu toggle you can call this whatever
11:35 - you want as long as you tag in as an
11:38 - argument the poll active
11:42 - State and uh all we need to do here is
11:45 - um yeah well we can do a few things here
11:47 - so here we will handle what
11:50 - happens when the upgrade menu is
11:55 - toggled but we need to sync or link this
11:59 - this uh method here subscribe this
12:02 - method to the delegate we just created
12:05 - in the game master which is this one so
12:08 - what do we do we simply go up here under
12:10 - the start method this is a good place to
12:12 - do it you only need to do this once then
12:14 - we go game master. GM to get the
12:16 - instance of our game master dot and then
12:20 - we find the on Tuggle upgrade menu and
12:23 - then we add onto that we use plus
12:26 - equals on upgrade menu
12:30 - toggle now this method down here will be
12:35 - called when this delegate is invoked so
12:39 - that it's that easy and it's super cool
12:41 - because we can we can add as many
12:43 - methods on here as we want to uh so we
12:47 - can do that from other scripts and we
12:48 - will be doing that from other
12:50 - scripts excuse me good so what we can do
12:53 - here is simply uh say that we want to uh
12:57 - get a
12:58 - reference uh to this platform 2D user
13:01 - control so we will say get
13:04 - component platform 2D user control do
13:07 - enabled equals active so if the or
13:11 - actually we want this to be the opposite
13:13 - of active so if our um our update menu
13:16 - is active we don't want our platform to
13:18 - to use the control to be active uh if it
13:21 - if it isn't active if we've closed it
13:23 - down again then we want to be able to
13:24 - move so we want this to be uh to be true
13:27 - good so that's perfect and we also want
13:30 - uh to do the same to our weapon we don't
13:32 - want to be able to shoot while the men
13:35 - menu is up so uh therefore we can maybe
13:37 - uh store this in a temporary variable
13:39 - we'll call this the weapon and we'll
13:42 - find this uh in uh the children
13:45 - hierarchy so get component in children
13:47 - and we'll find the weapon and uh we
13:50 - simply want to check if it's null
13:52 - because we don't have any way of knowing
13:54 - if it's null or not so if it's if weapon
13:57 - is not equal to null well then we simply
14:00 - want to set weapon. enabled equal to the
14:03 - opposite of active there we go so that
14:07 - should work just fine and we can now go
14:09 - ahead and actually test this out just to
14:11 - make the testing clearer I'm going to go
14:13 - ahead and just uh change the alpha on
14:16 - the background here so we can see what's
14:17 - going on in the background so let's go
14:20 - ahead and hit
14:21 - play and uh I'm now going to you can see
14:24 - I can shoot and move I'm going to bring
14:26 - up the update
14:28 - menu
14:29 - uh whoops there's an unassigned uh
14:32 - variable and that's in our GM that's
14:34 - because we haven't actually directag in
14:36 - the upgrade menu there we go that should
14:38 - hopefully do that and uh now we can try
14:41 - again here so again I can shoot and move
14:43 - I press U I can't move and I cannot
14:47 - shoot you can see my arm still moves but
14:49 - that's fine with me we could go ahead
14:50 - and disable that too and that's maybe
14:52 - something you want to do for your game
14:54 - but I don't think it uh really matters
14:56 - here and uh you can see here that we
14:58 - have free to press the different buttons
15:00 - so uh that's perfect however our enemies
15:03 - are still moving so uh just to make sure
15:06 - that we won't be killed while in the
15:09 - upgrade
15:10 - menu I'm going to stop that from
15:13 - happening so uh let's find our uh enemy
15:16 - pre or actually just let's just find our
15:19 - enemy uh script here and uh in this I
15:23 - simply want to
15:25 - require the component type of enemy AI
15:30 - because this sits on the enemy object I
15:32 - just want to make sure that it sits on
15:34 - the enemy object and uh we are going to
15:37 - do the exact same thing here so we can
15:39 - just copy from the player we have this
15:42 - on upgrade menu
15:45 - toggle here where we Define what happens
15:47 - when the upgrade menu is toggled and uh
15:50 - instead of all of this we can simply say
15:52 - that get component enemy AI do enabled
15:56 - is the opposite of active and that's
15:58 - perfect and now we of course need to
16:00 - subscribe or add this to our delegate
16:03 - and we do that by saying gam master. gm.
16:06 - um on toggle upgrade menu plus equals on
16:11 - upgrade menu togle there we go uh and
16:15 - this means that again from one single
16:18 - place we are now invoking uh SE two
16:21 - different methods and we can add as many
16:23 - as we want so now when I hit you and I'm
16:25 - just going to wait for a few enemies you
16:28 - can see that they slowly stop so that's
16:31 - perfect again you can be um more uh
16:36 - detailed about this and make them stop
16:38 - in an instant you can make the uh
16:41 - countdown stop too that won't stop at
16:43 - the moment and you can do all of that
16:45 - stuff I'm just showing you the basic
16:47 - idea of how to implement this stuff so
16:50 - uh that's perfect then we can now bring
16:51 - up the background again uh because we
16:53 - don't uh want to uh see anything but the
16:56 - upgrade menu uh at least not in this
16:59 - game good so let me just check the time
17:02 - here see how far we are we're actually
17:05 - pretty far ahead already but I did
17:07 - promise you that we would Implement some
17:09 - kind of money so let's go ahead and do
17:11 - that uh just very quickly so first off
17:15 - uh I want to find our game master here
17:17 - open that up and I want to add a new
17:21 - static variable so we're going to have
17:23 - here a public static integer which is
17:26 - going to be our
17:27 - money and uh I also want to make a
17:30 - serialized field and this is going to be
17:33 - a private integer uh which is our
17:36 - starting money so I want us to be able
17:38 - to um uh change this in the hierarchy
17:42 - and therefore we need to find our start
17:44 - method and we write where we set our
17:46 - remaining lives equal to Max lives we
17:48 - can also set our uh
17:52 - money to the
17:55 - start in money there we go
18:58 - open uh up the script in uh Visual
19:01 - Studio come
19:03 - on come on Unity work with me here there
19:06 - we go and we can just duplicate the
19:08 - other script in here and we of course
19:11 - want to change the uh class name to
19:14 - money cter UI and we want to change this
19:18 - variable name here to
19:20 - money
19:23 - uh money
19:25 - count money
19:27 - amount I don't know maybe we should just
19:30 - do a money
19:32 - text like that and uh we want this to be
19:36 - money and it should just take instead of
19:39 - the remaining lives it's going to take
19:41 - game master. money. twring there we go
19:45 - so it's it will simply pull that in the
19:47 - update method and it's not going to take
19:50 - uh require too much performance or or
19:52 - anything as long as you on the desktop
19:54 - or in the web browser if you're on
19:56 - mobile you might want to make that into
19:59 - some kind of co- routine that will check
20:01 - at a fixed rate or maybe you can use a
20:04 - delicate to update it whatever you want
20:06 - to do so now when we hit play we should
20:08 - see this changing to not zero we should
20:12 - see it changing to 100 um let's find our
20:16 - game master object oh our starting money
20:18 - is actually zero so that's perfect
20:20 - things are working we can apply this
20:22 - prefab and now we should see it changing
20:23 - to 100 here there we go so that's
20:26 - perfect and uh uh the very last thing
20:30 - that I want to do is just begin uh the
20:33 - upgrade menu script maybe actually
20:39 - new I think it's a good idea to wait
20:42 - with your upgrade menu script uh to the
20:44 - next video so what we have here is um a
20:47 - working idea of money we have some kind
20:49 - of dis way of displaying our money we
20:52 - have a way of uh opening and closing our
20:54 - upgrade menu and uh this is now uh
20:57 - working while we want to do in the next
20:59 - video is have a way of loading in our
21:02 - stats updating the stats and spending
21:05 - money actually one last thing that I
21:07 - want to do is I want to also add some
21:09 - kind of uh money display here so we'll
21:12 - take our money counter and paste it in
21:14 - here just above the background would be
21:17 - nice and we can move it over here and
21:20 - make some room for
21:22 - it Center it and scale it
21:26 - up something like that I actually want
21:29 - this to be a bit
21:31 - smaller 30
21:33 - maybe uh looks just
21:35 - fine yeah oh and we of course want to
21:38 - Anchor this
21:40 - to the top probably yeah now we go so
21:44 - now we have our money displayed in the
21:46 - upgrade menu as well that's pretty
21:48 - important if you want to keep track of
21:50 - kind of how much money youve got while
21:53 - purchasing stuff so that is perfect and
21:56 - we can close that and minimize that I'm
21:58 - going to maximize the game here and just
22:01 - uh see if everything is working and if
22:03 - it is that is going to conclude this
22:05 - video so we can see we can jump around
22:07 - the money has updated uh I'm now going
22:10 - to press U here and we can press the
22:13 - different upgrade buttons uh and we can
22:15 - press U again and it's going to close
22:18 - that off so that is just perfect you
22:21 - will notice that a um uh enemy actually
22:25 - died when while I had the upgrade menu
22:28 - open and that's because his physics
22:30 - didn't uh stop uh him from hitting me
22:34 - while the upgrade menu was open so if
22:36 - that's something you want to fix you can
22:37 - definitely just uh disable the rigid
22:40 - body along with the Enemy uh AI I
22:43 - definitely recommend you do that or
22:44 - maybe temporarily turn him kinematic or
22:48 - something like that um and uh we
22:51 - actually have another error here so what
22:54 - we simply want to
22:56 - do is
22:59 - yeah it's been destroyed then we simply
23:02 - want to check if get component enemy
23:06 - AI uh
23:10 - oh I see so if this is not equal to null
23:17 - the objetive type enemy has destroyed
23:19 - but you're still trying to access it um
23:23 - your script should either check if it is
23:24 - null or you should not destroy the
23:26 - object I see there we go so we can maybe
23:29 - check if this is equal to null this is
23:32 - kind of weird let's try
23:36 - this can it be null and then called
23:39 - through a
23:40 - delegate this is some kind of edge
23:43 - case let's try
23:48 - it
23:50 - yeah that's
23:54 - weird okay I know what's going on we
23:57 - want to stop subscrib in whenever we
23:59 - kill this object yeah that's what we
24:01 - want to do so we want to remove this uh
24:07 - from from the delegate when we die yeah
24:11 - perfect okay so we'll simply say that
24:14 - void on
24:17 - Destroy think that is something I I know
24:20 - that on dis on enabled is definitely
24:24 - implemented so let's just try this and
24:27 - then we want to uh remove move it from
24:30 - here so minus equals it's a good thing I
24:33 - noticed this in the video don't have to
24:35 - clean it up in the next one I've been
24:38 - trying to wrap this up like three times
24:40 - it's embarrassing let's keep going um
24:43 - let's see here so when we kill an
24:49 - enemy no it's still doing it let's find
24:52 - out if uh this is even being called here
24:56 - so uh
24:59 - let's just throw a debug
25:06 - statement there we go I'm sure we'll
25:08 - notice
25:14 - that if this doesn't work I'm just going
25:16 - to have to take a minute to figure out
25:18 - what's going on here so okay so that is
25:22 - actually being called and I can see
25:25 - that oh no it's working
25:30 - that is weird
25:33 - Behavior maybe I didn't save it properly
25:35 - before if I delete this now I might not
25:38 - have saved this let's try this out one
25:41 - last time just to see I might have been
25:45 - too impatient I didn't understand why it
25:48 - wasn't working so hopefully it does now
25:51 - so now there are no
25:53 - errors if I destroy those guys yeah so
25:56 - that's perfect let's just um for good uh
26:00 - order sake uh do that under the uh
26:03 - player as well so if this player is
26:05 - destroyed we also want to uh remove that
26:08 - from the delegate so uh gm.on toggle
26:10 - upgrade menu minus equal that good save
26:14 - that clear that things are working now I
26:17 - can do my outro so thanks for watching
26:20 - guys uh we'll fix the rest of the uh
26:22 - upgrade menu in the next video I'm
26:24 - looking forward to that so yeah that
26:27 - that was all I'll see you guys guys in
26:28 - the next
26:30 - [Music]
26:39 - video

Cleaned transcript:

thanks for tuning in at braies hello everyone and welcome to this video on making a 2d platformer course today we're going to be expanding Upon Our upgrade menu we're going to be adding in the idea of money and a way to kind of spend that money I don't know how far we'll go with implementing the actual stat upgrades uh but we should definitely have a more interactive upgrade menu when we are done so that's going to be super fun also I of course want to apologize that it's taking me so long to put out a new video but I've uh been sick I caught the flu and I actually still am a little bit so if you see me coughing uh it's nothing serious but it's not completely gone either so let's just uh dig right into today's video and forget all about uh flu and uh yeah so you can see I've left the project exactly as it was uh in the last video and uh the first thing that I noticed when I turned off the camera is that when we maximize the game here you can see that the astronaut snaps to the left and that looks super dumb really so let's um start out by anchoring him to the center and by the way the shortcut that I'm using to maximize a game or a window is just shift space it's super useful you can maximize any window in Unity by just um pressing shift space while hovering the mouse over it a shortcut that many people don't know so now under the UI uh overlay and then under the upgrade menu we can find our astronaut and we simply want to change this anchor here from the left to the center there there we go so now when we maximize the game everything looks much better cool so the first thing that I want to do here is just go ahead and disable this upgrade menu this way we can uh choose whether or not it needs to be enabled by simply pressing some kind of upgrade button and in our case I want that to be you and just to make sure that the user knows what button to press let's just add a simple text instruction down here so in order to get some text let's just duplicate this uh lives counter it has the Style with the little putut steps in the shadow and we can just just remove that script then we can uh maybe change the position of this whoops I selected the wrong one uh this is going to be um upgrade menu uh notice tool tip press U for upgrade menu there we go uh and we can simply move that down here and we can Center that text and we want it to be a lot bigger actually and we want this to say um press and then we can use some uh ITF Rich text format uh in here as you've maybe seen in HTML programming or stuff like that and uh the I here stands for you can see here the I stands for italic and that will just kind of um tilt our text a bit and that's cool when doing stuff like uh this this here so when we want to notify the user that it's the U button instead of using quotes or something else you can also do B for bold if you think that's cooler it's just fine but I like the uh italic style so press U to open the upgrade menu there we go and uh we actually need these to this to be even larger and we can drag this down here so it's at the very bottom and uh we could maybe uh yeah make sure that's centered everywhere and anchored to the bottom there we go and you can see what that looks like in the game and currently it looks horrible I also want to size down uh this text and uh yeah maybe we should do something like 14 I think that's fine just a very tiny notice down here uh that that is something you can indeed do uh we might want to yeah anchor that to the top here there we go and I think that looks just fine what you can do is make this text flash sometimes or maybe disable it when uh once the user has actually upgraded something you can just put an animation here I'm not going to bother with this since we have a lot to do so yeah I'm just going to skip over it and just leave it there it's not like it's abstracting the screen in any kind of way so uh that's just fine and uh then let's go inside of our game uh Master script double click to open it this up in uh Visual Studio manual develop whatever you're using and in here we will simply add some kind of method for enabling and disabling the uh update menu so uh first off we need a reference just like we have a reference to our game over UI and this is going to be a serialized field and it's going to store a private game object and it's going to be called upgrade menu then all we need is some kind of method on here and uh I think we're going to check for this in the update method here so you can simply say if input. getet key down and the key we want to check for in my case at least here is the U button you can choose any key that you want and you can also add it as a variable that might be better uh but since we have a lot on our plate let's just hard code it for now you know the good practices and you should definitely be doing then I'm just here to show you some new stuff so um and what we can do in here is maybe call some kind of method or we could just TDE code it in here I'm just going to make a quick private void uh which is going to toggle the upgrade menu something like that and that's all we are going to call right here uh awesome so what we then want to say is we want to say that our upgrade menu do set active so we can enable a disable here false is disabled and true is of course enabled and uh we don't want to give it either false or true instead we want to set it to the opposite of what is it currently is therefore the tle and uh we can get its current active state by using upgrad menu. active self you need to use active self because active is uh currently deprecated so and uh in order to make it the opposite of that we simply put a um what's this T this sign here an exclamation mark that right so that will inverse whatever operation we have going cool uh and uh what we can then do um is maybe we need some kind of way to notify other scripts that the upgrade menu is now active because we don't want to pause the game because we have animations going and we want the UI to update and all that but we definitely want some things to stop Happ happening for example we don't want to shoot while the upgrade menus is up we don't want to be able to move we don't want our enemies to chase us and uh there can be more stuff coming maybe you don't want the uh spawner to spawn anything you can think about these things on your own it's definitely up to you how uh how much of this stuff you want to change you can also just leave the game running uh that's completely fine a lot of games do that I just want to disable a few things I want to disable player movement uh player shooting and the fact that enemies chase us I think if we disable those three things uh it's going to be just fine good so in order to do that excuse me uh all we need to do is create what is called a delegate and I don't think we've discussed delegates in this series before so here we go so first off I want to write private delicate void and I'm going to call this um upgrade menu callback and it's not going to take actually we're going to tag in a bullion which is the active state so that's going to be called active so what is a delegate a delegate is basic basically a a way for us to create a um uh a type here that will store a bunch of references to functions so that we can call this delegate or invoked and it will call all of the different functions that are registered to that delegate so basically it allows us to uh without having knowing anything about any functions call some kind of event that will trigger a bunch of things in other scripts that have is uh subscribed to that event and there are a bunch of ways to do this one is using delegates another is using actions a third one is using what is called events uh but I'm just going to go with the old school dedicate here and this is the syntax so here we kind of create uh our type we create a delicate void it doesn't return anything and all of the methods that are subscribed to this will have a Boolean say saying whether or not it's active as an argument and then we create this specific uh instance of this delegate I am going to make this public actually and that's going to be of course a public upgrade menu call back just as when we create an enom class we first decare uh create the type and then we create the instance here and this is uh going to be called on upgrade menu on tacle upgrade menu maybe yeah that's better on toggle upgrade menu and uh we simply close that off so the cool thing about this here is that down here when we Tuggle this we can then say that we want on toggle upgrade menu to invoke all of the methods that have subscribed to this event and uh I will show you how you can register or subscribe to this event in a second but for now we need to pass in whether or not the our upgrade menu is actually active and we do this by simply uh putting in maybe the upgrade menu. active self so if our upgrade menu is active we put that in as an argument this will go go up here and tell this variable here to call all of the methods that have subscribed themselves to this delegate now let's take a look at actually subscribing methods to the delegate because uh this will currently not do a thing uh so what we can do is we can go ahead and find our um uh player maybe this is a good place to start here let's double click on our player and you can see here that I've typed beforehand require component type of plat form to the user control and this is because I want to uh simply Set uh or disable this uh component because it's what allows us to control the player and therefore I want to be able to disable it and uh what we can then do is uh we can create some kind of U method that should be called whenever the upgrade menu tole uh is um or whenever the upgrade menu is tackled uh so we are going to create maybe a a void here called on upgrade menu toggle you can call this whatever you want as long as you tag in as an argument the poll active State and uh all we need to do here is um yeah well we can do a few things here so here we will handle what happens when the upgrade menu is toggled but we need to sync or link this this uh method here subscribe this method to the delegate we just created in the game master which is this one so what do we do we simply go up here under the start method this is a good place to do it you only need to do this once then we go game master. GM to get the instance of our game master dot and then we find the on Tuggle upgrade menu and then we add onto that we use plus equals on upgrade menu toggle now this method down here will be called when this delegate is invoked so that it's that easy and it's super cool because we can we can add as many methods on here as we want to uh so we can do that from other scripts and we will be doing that from other scripts excuse me good so what we can do here is simply uh say that we want to uh get a reference uh to this platform 2D user control so we will say get component platform 2D user control do enabled equals active so if the or actually we want this to be the opposite of active so if our um our update menu is active we don't want our platform to to use the control to be active uh if it if it isn't active if we've closed it down again then we want to be able to move so we want this to be uh to be true good so that's perfect and we also want uh to do the same to our weapon we don't want to be able to shoot while the men menu is up so uh therefore we can maybe uh store this in a temporary variable we'll call this the weapon and we'll find this uh in uh the children hierarchy so get component in children and we'll find the weapon and uh we simply want to check if it's null because we don't have any way of knowing if it's null or not so if it's if weapon is not equal to null well then we simply want to set weapon. enabled equal to the opposite of active there we go so that should work just fine and we can now go ahead and actually test this out just to make the testing clearer I'm going to go ahead and just uh change the alpha on the background here so we can see what's going on in the background so let's go ahead and hit play and uh I'm now going to you can see I can shoot and move I'm going to bring up the update menu uh whoops there's an unassigned uh variable and that's in our GM that's because we haven't actually directag in the upgrade menu there we go that should hopefully do that and uh now we can try again here so again I can shoot and move I press U I can't move and I cannot shoot you can see my arm still moves but that's fine with me we could go ahead and disable that too and that's maybe something you want to do for your game but I don't think it uh really matters here and uh you can see here that we have free to press the different buttons so uh that's perfect however our enemies are still moving so uh just to make sure that we won't be killed while in the upgrade menu I'm going to stop that from happening so uh let's find our uh enemy pre or actually just let's just find our enemy uh script here and uh in this I simply want to require the component type of enemy AI because this sits on the enemy object I just want to make sure that it sits on the enemy object and uh we are going to do the exact same thing here so we can just copy from the player we have this on upgrade menu toggle here where we Define what happens when the upgrade menu is toggled and uh instead of all of this we can simply say that get component enemy AI do enabled is the opposite of active and that's perfect and now we of course need to subscribe or add this to our delegate and we do that by saying gam master. gm. um on toggle upgrade menu plus equals on upgrade menu togle there we go uh and this means that again from one single place we are now invoking uh SE two different methods and we can add as many as we want so now when I hit you and I'm just going to wait for a few enemies you can see that they slowly stop so that's perfect again you can be um more uh detailed about this and make them stop in an instant you can make the uh countdown stop too that won't stop at the moment and you can do all of that stuff I'm just showing you the basic idea of how to implement this stuff so uh that's perfect then we can now bring up the background again uh because we don't uh want to uh see anything but the upgrade menu uh at least not in this game good so let me just check the time here see how far we are we're actually pretty far ahead already but I did promise you that we would Implement some kind of money so let's go ahead and do that uh just very quickly so first off uh I want to find our game master here open that up and I want to add a new static variable so we're going to have here a public static integer which is going to be our money and uh I also want to make a serialized field and this is going to be a private integer uh which is our starting money so I want us to be able to um uh change this in the hierarchy and therefore we need to find our start method and we write where we set our remaining lives equal to Max lives we can also set our uh money to the start in money there we go open uh up the script in uh Visual Studio come on come on Unity work with me here there we go and we can just duplicate the other script in here and we of course want to change the uh class name to money cter UI and we want to change this variable name here to money uh money count money amount I don't know maybe we should just do a money text like that and uh we want this to be money and it should just take instead of the remaining lives it's going to take game master. money. twring there we go so it's it will simply pull that in the update method and it's not going to take uh require too much performance or or anything as long as you on the desktop or in the web browser if you're on mobile you might want to make that into some kind of co routine that will check at a fixed rate or maybe you can use a delicate to update it whatever you want to do so now when we hit play we should see this changing to not zero we should see it changing to 100 um let's find our game master object oh our starting money is actually zero so that's perfect things are working we can apply this prefab and now we should see it changing to 100 here there we go so that's perfect and uh uh the very last thing that I want to do is just begin uh the upgrade menu script maybe actually new I think it's a good idea to wait with your upgrade menu script uh to the next video so what we have here is um a working idea of money we have some kind of dis way of displaying our money we have a way of uh opening and closing our upgrade menu and uh this is now uh working while we want to do in the next video is have a way of loading in our stats updating the stats and spending money actually one last thing that I want to do is I want to also add some kind of uh money display here so we'll take our money counter and paste it in here just above the background would be nice and we can move it over here and make some room for it Center it and scale it up something like that I actually want this to be a bit smaller 30 maybe uh looks just fine yeah oh and we of course want to Anchor this to the top probably yeah now we go so now we have our money displayed in the upgrade menu as well that's pretty important if you want to keep track of kind of how much money youve got while purchasing stuff so that is perfect and we can close that and minimize that I'm going to maximize the game here and just uh see if everything is working and if it is that is going to conclude this video so we can see we can jump around the money has updated uh I'm now going to press U here and we can press the different upgrade buttons uh and we can press U again and it's going to close that off so that is just perfect you will notice that a um uh enemy actually died when while I had the upgrade menu open and that's because his physics didn't uh stop uh him from hitting me while the upgrade menu was open so if that's something you want to fix you can definitely just uh disable the rigid body along with the Enemy uh AI I definitely recommend you do that or maybe temporarily turn him kinematic or something like that um and uh we actually have another error here so what we simply want to do is yeah it's been destroyed then we simply want to check if get component enemy AI uh oh I see so if this is not equal to null the objetive type enemy has destroyed but you're still trying to access it um your script should either check if it is null or you should not destroy the object I see there we go so we can maybe check if this is equal to null this is kind of weird let's try this can it be null and then called through a delegate this is some kind of edge case let's try it yeah that's weird okay I know what's going on we want to stop subscrib in whenever we kill this object yeah that's what we want to do so we want to remove this uh from from the delegate when we die yeah perfect okay so we'll simply say that void on Destroy think that is something I I know that on dis on enabled is definitely implemented so let's just try this and then we want to uh remove move it from here so minus equals it's a good thing I noticed this in the video don't have to clean it up in the next one I've been trying to wrap this up like three times it's embarrassing let's keep going um let's see here so when we kill an enemy no it's still doing it let's find out if uh this is even being called here so uh let's just throw a debug statement there we go I'm sure we'll notice that if this doesn't work I'm just going to have to take a minute to figure out what's going on here so okay so that is actually being called and I can see that oh no it's working that is weird Behavior maybe I didn't save it properly before if I delete this now I might not have saved this let's try this out one last time just to see I might have been too impatient I didn't understand why it wasn't working so hopefully it does now so now there are no errors if I destroy those guys yeah so that's perfect let's just um for good uh order sake uh do that under the uh player as well so if this player is destroyed we also want to uh remove that from the delegate so uh gm.on toggle upgrade menu minus equal that good save that clear that things are working now I can do my outro so thanks for watching guys uh we'll fix the rest of the uh upgrade menu in the next video I'm looking forward to that so yeah that that was all I'll see you guys guys in the next video
