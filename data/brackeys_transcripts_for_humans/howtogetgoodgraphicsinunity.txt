With timestamps:

00:00 - when it comes to graphics there are a
00:01 - lot of opinions and I think that's
00:03 - mostly because of how vague the term
00:04 - graphics really is I remember while back
00:06 - watching a video from extra credits
00:08 - talking about the difference between
00:09 - graphics and aesthetics but graphics
00:12 - define the visual fidelity of a game or
00:14 - in other words the amount of detail and
00:16 - aesthetics is the actual visual style of
00:18 - the game now I will argue any day that
00:19 - aesthetics is hugely more important than
00:21 - graphics and I think there are countless
00:23 - examples of games that manage to look
00:25 - beautiful with very similar graphics
00:27 - however it's definitely useful to know
00:29 - what rendering techniques or graphics
00:31 - help define a certain look Unreal Engine
00:33 - is an example of an engine that for a
00:35 - long time has been praised for its
00:36 - amazing graphics something that unity
00:38 - has often been critiqued on but unity
00:40 - ants undergone a lot of changes recently
00:42 - in terms of rendering capability and I
00:44 - love the stuff that makes Unreal look
00:45 - like unreal it's now available inside
00:47 - the unity editor so here's a short guide
00:49 - on how you can configure unity to give
00:51 - more that realistic unreal look we'll be
00:53 - taking this graphically symbol scene and
00:55 - turning it into this let's get started
00:57 - so the first thing that we want to do is
00:58 - go to edit project settings and player
01:01 - and here under the desktop version we
01:03 - want to go to other settings and this
01:05 - option is fairly hidden but we can
01:07 - actually change the color space from
01:08 - gamma to linear now this is probably the
01:11 - one option that has the biggest impact
01:13 - on the visual look of your game the Col
01:15 - space determines the maths used by unity
01:17 - when mixing colors in lighting
01:18 - calculations or reading values from
01:20 - textures a big advantage of using linear
01:22 - color space is that the cult's applied
01:23 - to shaders will brighten linearly as
01:25 - light intensity increases with the
01:27 - alternative gamma caused face brightness
01:29 - will often begin to turn to white as the
01:31 - values go up this often leads to a very
01:33 - washed out learn next up we can go
01:35 - window lighting and then settings and in
01:38 - here want to make sure that we have a
01:39 - skybox selected if we have an outdoor
01:41 - scene and if we do we can go under
01:43 - environment lighting and change our
01:44 - source to skybox now this is going to
01:47 - add in some ambient light based on our
01:49 - skybox
01:50 - you can see it helps everything feel
01:51 - more part of the scene now this scene is
01:53 - completely rendered in real time however
01:55 - a lot of the detail lighting you see in
01:57 - triple-a games it's actually baked into
02:00 - the scene I want going to light my
02:01 - baking in this video but I'll have a
02:03 - link in the description if you want to
02:04 - learn more next we can go and adjust our
02:06 - quality settings to that we go edit
02:08 - project settings
02:09 - quality we want to set this to ultra we
02:12 - leave the pixel account at
02:13 - team make sure to select full wrist and
02:15 - forced on for the textures and we
02:17 - actually want to get rid of the
02:18 - anti-aliasing
02:19 - that's because we'll apply this later as
02:21 - a post-processing effect we make sure to
02:23 - check all of these check boxes under
02:25 - shadows will select very high resolution
02:27 - and I'm actually going to increase the
02:28 - shadow distance quite a bit now this is
02:30 - very far for a shadow distance but I
02:32 - think it works well for this scene we
02:34 - then go select our camera here we want
02:35 - to change the rendering path to deferred
02:38 - in for rendering each object is rendered
02:40 - in a pass for each light that effects it
02:42 - therefore each object might be rendered
02:44 - multiple times depending on how many
02:45 - lights are within range with deferred
02:47 - rendering however the render cost of
02:49 - lighting is proportional to the number
02:50 - of pixels the light illuminates instead
02:53 - of the number of lights themselves as a
02:55 - result you're no longer bound by the
02:56 - amount of lights that you wish to render
02:58 - on screen however deferred rendering
03:00 - actually has a much bigger upfront
03:02 - performance cost so what solution is
03:04 - best for you completely depends on your
03:05 - game in general if you're building a
03:07 - desktop application and plan to have
03:09 - lots of light in your scene go with
03:11 - deferred if you're building for mobile
03:12 - or VR and plan to have fewer lights in
03:15 - your scene go with forward I'll have a
03:17 - link in the description to where you can
03:18 - learn more we then enable allow HDR and
03:21 - disable MSAA dynamic range defines how
03:24 - very bright or dark colors are captured
03:27 - by cameras in your scene HDR stands for
03:29 - high dynamic range and can be used to
03:31 - capture colors with much greater
03:33 - precision than the standard LDR or low
03:36 - dynamic range this means that we don't
03:37 - lose detail in over or underexposed
03:39 - areas but we still have to define how
03:42 - all of this color data maps to the much
03:44 - lower range on our display this is done
03:46 - with a post-processing effect called
03:47 - tone mapping so you can see the visual
03:49 - appearance of our scene has already
03:50 - changed quite a bit but the very big
03:52 - difference between a default scene in
03:54 - unreal and one in unity is post
03:56 - processing because by default unreal
03:58 - applies a lot of post-processing effects
04:01 - to get these in unity we go window asset
04:03 - store here we'll search for the post
04:05 - processing stack this is a series of
04:07 - post-processing effects made by Unity
04:09 - themselves let's hit download and import
04:12 - of course have a link for this in the
04:14 - description let's hit import again you
04:16 - should now see a post processing folder
04:17 - appear in your project panel we then
04:19 - select our main camera hit add component
04:22 - and search for post processing and here
04:24 - we'll select the post processing
04:25 - behavior
04:26 - takes in a profile to create a profile
04:29 - will right click in the project go
04:30 - create post-processing profile we'll
04:33 - just call this CC for color correction
04:34 - we then select our main camera and drag
04:36 - that in now if we select our CC profile
04:39 - you can see all of the different effects
04:40 - that we now have available to us the
04:42 - first one we want to enable is color
04:44 - grading under here we have the
04:45 - possibility of adjusting or tone matter
04:47 - tone mapping is where we decide how our
04:49 - HDR color data would be displayed on
04:52 - screen in unity we can either configure
04:54 - this ourselves or use a preset provided
04:56 - to us called filmic this uses the Asus
04:58 - filmic tone mapping curve which is also
05:00 - the default term mapping curve in Unreal
05:02 - Engine 4 if you want to learn more about
05:03 - the math behind this curve I will have a
05:05 - link in the description and by default
05:07 - we can choose from two profiles neutral
05:09 - where we can adjust everything ourselves
05:11 - or filmic and you can see right away our
05:13 - scene just pops so much more next we can
05:16 - enable eye adaptation while playing this
05:18 - will mimic the effect of your eye
05:19 - adjusting to a certain brightness level
05:21 - by automatically changing the exposure
05:22 - of the camera based on the brightness of
05:24 - the scene after enabling the tone mapper
05:26 - and iadapt ation you often have to go in
05:28 - and adjust some of your brightness
05:30 - levels I'm gonna go to lighting and bump
05:31 - up the ambient light to two as well as
05:33 - select my directional light and change
05:35 - the intensity from four to seven let's
05:37 - then go back to a post-processing and
05:39 - the rest of the effects are fairly small
05:41 - changes we of course want to add in some
05:43 - motion blur you can control how much
05:44 - motion blur you want using this slider
05:46 - the bigger the number the more the
05:48 - motion blur unreal also includes a
05:50 - vignette by default let's enable this
05:52 - and maybe bump down the intensity a bit
05:53 - if you don't have the possibility of
05:55 - baking your lighting you'll often also
05:56 - see ambient occlusion applied as
05:58 - approach processing effect let's enable
06:00 - it and you can see the shadowing that
06:01 - now gets applied to objects that are
06:02 - close to each other I mean of course
06:04 - adjust stuff like the radius and the
06:06 - intensity we can also add in a bit of
06:08 - bloom
06:08 - I want this effect to be very subtle
06:10 - I'll bump down the radius a bit and the
06:12 - intensity as well finally we can get rid
06:14 - of these ragged edges by applying
06:15 - anti-aliasing by default this is going
06:17 - to use a fairly light technique called
06:19 - fast approximate anti-aliasing let's
06:21 - just scale up our game view here and hit
06:23 - play so you can see how that looks now
06:25 - this definitely gets rid of the ragged
06:26 - edges but you will see a lot of
06:28 - flickering on the screen this is
06:29 - something that I often see people
06:30 - complaining about in unity but now with
06:32 - the new post-processing stack we have
06:34 - the possibility to fix this the same way
06:36 - that unreal does by using another method
06:37 - called temporal anti-aliasing you
06:40 - see this gets rid of almost all of the
06:42 - jitter and makes the movement of the
06:43 - camera feels so much more smooth and one
06:45 - thing that I also want to do with a
06:46 - quick is good to color grading and bump
06:48 - up the post exposure a bit that
06:50 - definitely looks a lot better if you
06:51 - want to learn more about post-processing
06:53 - I have a dedicated video on the subject
06:54 - now that's about all the quick to apply
06:56 - graphics settings I can think of now of
06:58 - course a million other things that you
06:59 - can do to amp up the graphical quality
07:01 - of your game some that come to mind are
07:03 - using reflection probes for real-time
07:04 - reflections and emission maps combined
07:06 - with bloom to get nice glowing surfaces
07:08 - also most people primarily use the
07:10 - standard shader that comes with unity
07:12 - now this is a really good shader because
07:14 - it allows you to very easily get PPR
07:16 - materials in your game but it does have
07:18 - a few limitations when it comes to
07:20 - high-end rendering if you want stuff
07:21 - like refraction translucency and dynamic
07:24 - weather if things get a lot more tricky
07:26 - luckily there's a great plugin available
07:27 - on the unity asset store called the
07:29 - upper shader it works in much the same
07:31 - way as the standard shader but on
07:33 - steroids now this acid is not free but I
07:35 - do recommend it for anyone who's going
07:37 - for a super realistic look that's pretty
07:39 - much it for this video remember that you
07:41 - can make super beautiful game with even
07:43 - the simplest of technology as long as
07:45 - you remember to have fun and get
07:46 - creative also remember to subscribe for
07:48 - more tutorial can tent and other than
07:50 - that thanks for watching and I will see
07:52 - you in the next video thanks to all the
07:54 - awesome patreon supporters who donated
07:55 - in August and a special thanks to hats
07:58 - off - yes pamekasan Thomas Wally stone
08:00 - gamer
08:00 - Sybok Nami chase nate'd Oh Derek heaps
08:02 - Kirk face Samara Phi who some casa
08:04 - kudamon aaron robert pond and peter lock
08:07 - if your name's not on the list I'll make
08:08 - sure to include it in videos later this
08:10 - month and the next month as well you
08:12 - guys Rock

Cleaned transcript:

when it comes to graphics there are a lot of opinions and I think that's mostly because of how vague the term graphics really is I remember while back watching a video from extra credits talking about the difference between graphics and aesthetics but graphics define the visual fidelity of a game or in other words the amount of detail and aesthetics is the actual visual style of the game now I will argue any day that aesthetics is hugely more important than graphics and I think there are countless examples of games that manage to look beautiful with very similar graphics however it's definitely useful to know what rendering techniques or graphics help define a certain look Unreal Engine is an example of an engine that for a long time has been praised for its amazing graphics something that unity has often been critiqued on but unity ants undergone a lot of changes recently in terms of rendering capability and I love the stuff that makes Unreal look like unreal it's now available inside the unity editor so here's a short guide on how you can configure unity to give more that realistic unreal look we'll be taking this graphically symbol scene and turning it into this let's get started so the first thing that we want to do is go to edit project settings and player and here under the desktop version we want to go to other settings and this option is fairly hidden but we can actually change the color space from gamma to linear now this is probably the one option that has the biggest impact on the visual look of your game the Col space determines the maths used by unity when mixing colors in lighting calculations or reading values from textures a big advantage of using linear color space is that the cult's applied to shaders will brighten linearly as light intensity increases with the alternative gamma caused face brightness will often begin to turn to white as the values go up this often leads to a very washed out learn next up we can go window lighting and then settings and in here want to make sure that we have a skybox selected if we have an outdoor scene and if we do we can go under environment lighting and change our source to skybox now this is going to add in some ambient light based on our skybox you can see it helps everything feel more part of the scene now this scene is completely rendered in real time however a lot of the detail lighting you see in triplea games it's actually baked into the scene I want going to light my baking in this video but I'll have a link in the description if you want to learn more next we can go and adjust our quality settings to that we go edit project settings quality we want to set this to ultra we leave the pixel account at team make sure to select full wrist and forced on for the textures and we actually want to get rid of the antialiasing that's because we'll apply this later as a postprocessing effect we make sure to check all of these check boxes under shadows will select very high resolution and I'm actually going to increase the shadow distance quite a bit now this is very far for a shadow distance but I think it works well for this scene we then go select our camera here we want to change the rendering path to deferred in for rendering each object is rendered in a pass for each light that effects it therefore each object might be rendered multiple times depending on how many lights are within range with deferred rendering however the render cost of lighting is proportional to the number of pixels the light illuminates instead of the number of lights themselves as a result you're no longer bound by the amount of lights that you wish to render on screen however deferred rendering actually has a much bigger upfront performance cost so what solution is best for you completely depends on your game in general if you're building a desktop application and plan to have lots of light in your scene go with deferred if you're building for mobile or VR and plan to have fewer lights in your scene go with forward I'll have a link in the description to where you can learn more we then enable allow HDR and disable MSAA dynamic range defines how very bright or dark colors are captured by cameras in your scene HDR stands for high dynamic range and can be used to capture colors with much greater precision than the standard LDR or low dynamic range this means that we don't lose detail in over or underexposed areas but we still have to define how all of this color data maps to the much lower range on our display this is done with a postprocessing effect called tone mapping so you can see the visual appearance of our scene has already changed quite a bit but the very big difference between a default scene in unreal and one in unity is post processing because by default unreal applies a lot of postprocessing effects to get these in unity we go window asset store here we'll search for the post processing stack this is a series of postprocessing effects made by Unity themselves let's hit download and import of course have a link for this in the description let's hit import again you should now see a post processing folder appear in your project panel we then select our main camera hit add component and search for post processing and here we'll select the post processing behavior takes in a profile to create a profile will right click in the project go create postprocessing profile we'll just call this CC for color correction we then select our main camera and drag that in now if we select our CC profile you can see all of the different effects that we now have available to us the first one we want to enable is color grading under here we have the possibility of adjusting or tone matter tone mapping is where we decide how our HDR color data would be displayed on screen in unity we can either configure this ourselves or use a preset provided to us called filmic this uses the Asus filmic tone mapping curve which is also the default term mapping curve in Unreal Engine 4 if you want to learn more about the math behind this curve I will have a link in the description and by default we can choose from two profiles neutral where we can adjust everything ourselves or filmic and you can see right away our scene just pops so much more next we can enable eye adaptation while playing this will mimic the effect of your eye adjusting to a certain brightness level by automatically changing the exposure of the camera based on the brightness of the scene after enabling the tone mapper and iadapt ation you often have to go in and adjust some of your brightness levels I'm gonna go to lighting and bump up the ambient light to two as well as select my directional light and change the intensity from four to seven let's then go back to a postprocessing and the rest of the effects are fairly small changes we of course want to add in some motion blur you can control how much motion blur you want using this slider the bigger the number the more the motion blur unreal also includes a vignette by default let's enable this and maybe bump down the intensity a bit if you don't have the possibility of baking your lighting you'll often also see ambient occlusion applied as approach processing effect let's enable it and you can see the shadowing that now gets applied to objects that are close to each other I mean of course adjust stuff like the radius and the intensity we can also add in a bit of bloom I want this effect to be very subtle I'll bump down the radius a bit and the intensity as well finally we can get rid of these ragged edges by applying antialiasing by default this is going to use a fairly light technique called fast approximate antialiasing let's just scale up our game view here and hit play so you can see how that looks now this definitely gets rid of the ragged edges but you will see a lot of flickering on the screen this is something that I often see people complaining about in unity but now with the new postprocessing stack we have the possibility to fix this the same way that unreal does by using another method called temporal antialiasing you see this gets rid of almost all of the jitter and makes the movement of the camera feels so much more smooth and one thing that I also want to do with a quick is good to color grading and bump up the post exposure a bit that definitely looks a lot better if you want to learn more about postprocessing I have a dedicated video on the subject now that's about all the quick to apply graphics settings I can think of now of course a million other things that you can do to amp up the graphical quality of your game some that come to mind are using reflection probes for realtime reflections and emission maps combined with bloom to get nice glowing surfaces also most people primarily use the standard shader that comes with unity now this is a really good shader because it allows you to very easily get PPR materials in your game but it does have a few limitations when it comes to highend rendering if you want stuff like refraction translucency and dynamic weather if things get a lot more tricky luckily there's a great plugin available on the unity asset store called the upper shader it works in much the same way as the standard shader but on steroids now this acid is not free but I do recommend it for anyone who's going for a super realistic look that's pretty much it for this video remember that you can make super beautiful game with even the simplest of technology as long as you remember to have fun and get creative also remember to subscribe for more tutorial can tent and other than that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in August and a special thanks to hats off yes pamekasan Thomas Wally stone gamer Sybok Nami chase nate'd Oh Derek heaps Kirk face Samara Phi who some casa kudamon aaron robert pond and peter lock if your name's not on the list I'll make sure to include it in videos later this month and the next month as well you guys Rock
