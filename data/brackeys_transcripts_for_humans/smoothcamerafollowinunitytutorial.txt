With timestamps:

00:00 - in this video we're gonna have a look at
00:01 - creating a smooth camera follow script
00:03 - this is something that I see a lot of
00:04 - beginners having trouble with a lot of
00:06 - people either get weird controls or
00:08 - jittery movement and are just confused
00:09 - about the whole situation in general so
00:11 - hopefully you will find this video
00:12 - useful also special thanks to Commander
00:14 - Firestone 38 for his support on patreon
00:16 - if you want to support these videos you
00:18 - can go to patreon.com/scishow started so
00:21 - have this scene setup with a simple cube
00:23 - that we can control around the platforms
00:25 - but the camera of course is currently
00:27 - stationary let's change this by
00:28 - selecting the camera going at component
00:31 - and we want to create a script called
00:32 - camera father it's 2 C sharp and it
00:35 - create an ADD let's double click it to
00:37 - open it up in visual studio now first
00:39 - off we can go ahead and delete the two
00:40 - using tags at the top and we can also
00:42 - delete both our methods the first thing
00:44 - that we need is a reference to what we
00:46 - want to follow in our case that's going
00:48 - to be the player let's go ahead and
00:49 - create a public transform remember we
00:52 - use transform whenever we want to get
00:53 - information about position rotation and
00:55 - scale and we can call this variable our
00:57 - target will also need a variable that
00:59 - defines how quickly our camera will snap
01:01 - to the target because we'll be smoothing
01:03 - out our camera movement we need to be
01:04 - able to adjust the smooth amount so
01:06 - right below this will create an oddly
01:08 - public variable this one is going to be
01:10 - of type float and let's call it our
01:11 - smooth speed so the higher this value is
01:14 - the faster our camera is going to lock
01:17 - on to our target and so the smaller it
01:19 - is the more time we are going to spend
01:21 - smoothing you want to place this
01:22 - somewhere between 0 and 1 I'm just going
01:25 - to fold it to 0.125
01:27 - so let's start locking onto a target we
01:30 - want to do that inside of a method so
01:32 - let's go void and this is where I see a
01:34 - lot of people going wrong especially
01:36 - people new to unity because the logic
01:38 - here goes well I want to snap my camera
01:40 - to the target and I don't want to do
01:42 - this only in start because if our target
01:44 - moves well then we want the camera to
01:46 - move with it and so the reasoning goes
01:47 - let's do this every frame and so people
01:50 - write update here the problem with this
01:52 - however is that our targets position is
01:54 - often also edited in the update method
01:56 - and so we get a situation where the
01:58 - target and camera is kind of competing
02:00 - to go first and that results in weird
02:03 - jittery behavior what we can do instead
02:05 - is actually change this to something
02:06 - called late update late update is the
02:09 - exact same thing as update except it's
02:12 - run
02:13 - laughter and so now we know by the time
02:15 - that this function is called our target
02:17 - has already done all its movement so
02:19 - let's test this out by first setting
02:20 - transform position
02:22 - our cameras current position equal to
02:24 - our targets position so target position
02:27 - and when we now save this and head into
02:29 - unity we can see our two variables
02:31 - appear in the inspector let's take our
02:33 - player and drag it into the target slot
02:35 - now when we hit play we should see that
02:37 - our camera snaps directly to the
02:39 - position of our player so our camera is
02:41 - currently inside of our player this is
02:43 - not really something we want we
02:45 - definitely want to offset the position
02:47 - of our camera but you can see that it
02:49 - does follow the play around and that
02:51 - everything feels very smooth so let's go
02:53 - and add an offset let's create our
02:54 - offset as a variable so that we can
02:56 - easily tweak it in the inspector will
02:58 - create a public vector three and the
03:01 - reason that I'm creating a vector three
03:02 - here is that I want to be able to offset
03:04 - our camera on all three axes want to be
03:06 - able to pull it back on the Z move it up
03:09 - on the wire a little bit and maybe even
03:10 - play with the X let's call this variable
03:12 - offset and we don't need to put in any
03:14 - defaults here
03:15 - then down here where we set our current
03:17 - position equal to our target position we
03:19 - can actually just add our offset onto
03:22 - that position so we simply write plus
03:24 - offset if you're unfamiliar with vector
03:27 - math this might seem weird we're not
03:29 - adding two numbers here we're adding two
03:31 - vectors but this actually works out in
03:33 - this simplest way possible when adding
03:34 - two vectors together we simply add
03:36 - together each component so we add the X
03:38 - of our target position with the X of our
03:40 - offset and the same thing with y and z
03:42 - so now when we save this and go into
03:44 - unity and hit play we have an offset
03:46 - variable and we can control this at run
03:49 - time so I'm just gonna take my Z value
03:50 - here and bring it back and you can
03:52 - notice our camera zooming out I can do
03:54 - the same thing with my Y and with my ex
03:57 - I'm gonna set my X to 0 Y to 2 and Z to
04:01 - negative 10 we can then right click on
04:02 - the component hit copy component exit
04:05 - play mode right click again and hit
04:07 - paste component values and now when we
04:09 - play we should actually already have a
04:11 - nice camera follow script but we have
04:13 - just a few things missing we still need
04:15 - to make our camera smoothly lag behind
04:16 - our player and we also need our camera
04:18 - to always face the player because right
04:20 - now if I increased in Y well then we
04:22 - lose track of our player to smooth out
04:24 - our movement let's take the position of
04:25 - our target
04:26 - that's the offset and store this in
04:28 - another variable will make this of type
04:30 - vector three and we can call this
04:32 - desired position and so if we don't want
04:36 - any smoothing we can simply set
04:38 - transform drop position equal to desired
04:40 - position directly and if you want to
04:42 - smooth we simply add another step in
04:43 - here we create another vector three we
04:46 - call this the smooth position and set it
04:49 - equal to vector three dollar lope stands
04:52 - for linear interpolation and is the
04:54 - process of smoothly going from one point
04:56 - point a to another point B so this
04:59 - method first off takes in our current
05:01 - position which is our starting point for
05:03 - that we'll right transform dot position
05:05 - it then takes in our desired position
05:08 - our end point let's put in our desired
05:10 - position and finally it takes in a float
05:13 - called T it's called T here because we
05:15 - often want to loop over time but T is
05:18 - actually just any value between zero and
05:20 - one when it's zero this method is going
05:22 - to give us the first position which is
05:24 - currently transformed our position when
05:26 - it's one it's going to give us the
05:28 - second position which is currently
05:29 - desired position and if it's anywhere in
05:32 - between well then it's going to give us
05:33 - a mix of the two so what we want to do
05:36 - here is actually input or smooth speed
05:39 - having then set our current position
05:41 - equal to our smooth position so what's
05:43 - happening now is that every frame we get
05:45 - the position that we want to snap to we
05:47 - use vector 3doodler to get a bit closer
05:49 - to that position and how much closer we
05:51 - get depends on our smooth speed if our
05:53 - smooth speed was one well then we would
05:56 - move the entire way on one frame if it
05:58 - was 0.5 well then we would move half the
06:00 - way each frame if this is hard to wrap
06:03 - your head around I totally understand it
06:04 - definitely was for me at first I think
06:06 - we should just try it out in unity and
06:08 - you can see what it looks like now
06:09 - depending on the way that you're
06:10 - currently handling movement this might
06:12 - turn out really smooth or you might get
06:14 - a bid of triggering motion I've searched
06:16 - around the farms trying to figure out
06:18 - why this happens according to unity
06:20 - documentation late update should always
06:22 - be called after everything else I did
06:24 - however find a solution to this if we go
06:27 - into visual studio we instantly go in
06:29 - and replace late with fixed update and
06:31 - so now we're actually updating our
06:33 - position in the fixed update physics
06:35 - loop don't ask me why this works but
06:37 - when we now hit play you can see just
06:38 - how smooth that is
06:39 - if anyone has a good explanation for
06:41 - this please post it in the comments
06:43 - finally we can have our camera always
06:45 - look at our player this is super simple
06:47 - to do we simply want to call transform
06:49 - look at and the object that we want to
06:52 - look at is our target this way unity
06:54 - will do all of the rotational
06:56 - calculation for us let's say that go
06:58 - into unity hit play and voila a smooth
07:01 - follow script it's working
07:03 - and we can see just how easy it is to
07:05 - update the way that we view our player
07:07 - there of course a million ways that you
07:09 - can expand upon this system if you want
07:11 - you can also pick up a camera solution
07:12 - from the unity asset store some of these
07:14 - allow you to do much more advanced
07:16 - camera stuff like having multiple
07:17 - targets setting up framing camera shakes
07:20 - transitions all that stuff I'll have
07:22 - some links in the description that's
07:24 - pretty much it for this video I hope you
07:26 - enjoyed it if you did make sure to
07:27 - subscribe so you don't miss the future
07:28 - one also if you have any questions you
07:30 - can go to from Rockies comm thanks
07:32 - watching and I will see you in the next
07:33 - video
07:34 - thanks to all the awesome patreon
07:35 - supporters who donated in May and a
07:37 - special thanks to Derek huge jerk face
07:39 - of Mara Phi Stone gamer
07:41 - Cmdr Firestone 38 Thomas voice james
07:44 - calhoun cyborg mommie adjacent Lotito
07:47 - if you want to become a picture in
07:48 - yourself you can do so at patreon.com
07:49 - slash brackets

Cleaned transcript:

in this video we're gonna have a look at creating a smooth camera follow script this is something that I see a lot of beginners having trouble with a lot of people either get weird controls or jittery movement and are just confused about the whole situation in general so hopefully you will find this video useful also special thanks to Commander Firestone 38 for his support on patreon if you want to support these videos you can go to patreon.com/scishow started so have this scene setup with a simple cube that we can control around the platforms but the camera of course is currently stationary let's change this by selecting the camera going at component and we want to create a script called camera father it's 2 C sharp and it create an ADD let's double click it to open it up in visual studio now first off we can go ahead and delete the two using tags at the top and we can also delete both our methods the first thing that we need is a reference to what we want to follow in our case that's going to be the player let's go ahead and create a public transform remember we use transform whenever we want to get information about position rotation and scale and we can call this variable our target will also need a variable that defines how quickly our camera will snap to the target because we'll be smoothing out our camera movement we need to be able to adjust the smooth amount so right below this will create an oddly public variable this one is going to be of type float and let's call it our smooth speed so the higher this value is the faster our camera is going to lock on to our target and so the smaller it is the more time we are going to spend smoothing you want to place this somewhere between 0 and 1 I'm just going to fold it to 0.125 so let's start locking onto a target we want to do that inside of a method so let's go void and this is where I see a lot of people going wrong especially people new to unity because the logic here goes well I want to snap my camera to the target and I don't want to do this only in start because if our target moves well then we want the camera to move with it and so the reasoning goes let's do this every frame and so people write update here the problem with this however is that our targets position is often also edited in the update method and so we get a situation where the target and camera is kind of competing to go first and that results in weird jittery behavior what we can do instead is actually change this to something called late update late update is the exact same thing as update except it's run laughter and so now we know by the time that this function is called our target has already done all its movement so let's test this out by first setting transform position our cameras current position equal to our targets position so target position and when we now save this and head into unity we can see our two variables appear in the inspector let's take our player and drag it into the target slot now when we hit play we should see that our camera snaps directly to the position of our player so our camera is currently inside of our player this is not really something we want we definitely want to offset the position of our camera but you can see that it does follow the play around and that everything feels very smooth so let's go and add an offset let's create our offset as a variable so that we can easily tweak it in the inspector will create a public vector three and the reason that I'm creating a vector three here is that I want to be able to offset our camera on all three axes want to be able to pull it back on the Z move it up on the wire a little bit and maybe even play with the X let's call this variable offset and we don't need to put in any defaults here then down here where we set our current position equal to our target position we can actually just add our offset onto that position so we simply write plus offset if you're unfamiliar with vector math this might seem weird we're not adding two numbers here we're adding two vectors but this actually works out in this simplest way possible when adding two vectors together we simply add together each component so we add the X of our target position with the X of our offset and the same thing with y and z so now when we save this and go into unity and hit play we have an offset variable and we can control this at run time so I'm just gonna take my Z value here and bring it back and you can notice our camera zooming out I can do the same thing with my Y and with my ex I'm gonna set my X to 0 Y to 2 and Z to negative 10 we can then right click on the component hit copy component exit play mode right click again and hit paste component values and now when we play we should actually already have a nice camera follow script but we have just a few things missing we still need to make our camera smoothly lag behind our player and we also need our camera to always face the player because right now if I increased in Y well then we lose track of our player to smooth out our movement let's take the position of our target that's the offset and store this in another variable will make this of type vector three and we can call this desired position and so if we don't want any smoothing we can simply set transform drop position equal to desired position directly and if you want to smooth we simply add another step in here we create another vector three we call this the smooth position and set it equal to vector three dollar lope stands for linear interpolation and is the process of smoothly going from one point point a to another point B so this method first off takes in our current position which is our starting point for that we'll right transform dot position it then takes in our desired position our end point let's put in our desired position and finally it takes in a float called T it's called T here because we often want to loop over time but T is actually just any value between zero and one when it's zero this method is going to give us the first position which is currently transformed our position when it's one it's going to give us the second position which is currently desired position and if it's anywhere in between well then it's going to give us a mix of the two so what we want to do here is actually input or smooth speed having then set our current position equal to our smooth position so what's happening now is that every frame we get the position that we want to snap to we use vector 3doodler to get a bit closer to that position and how much closer we get depends on our smooth speed if our smooth speed was one well then we would move the entire way on one frame if it was 0.5 well then we would move half the way each frame if this is hard to wrap your head around I totally understand it definitely was for me at first I think we should just try it out in unity and you can see what it looks like now depending on the way that you're currently handling movement this might turn out really smooth or you might get a bid of triggering motion I've searched around the farms trying to figure out why this happens according to unity documentation late update should always be called after everything else I did however find a solution to this if we go into visual studio we instantly go in and replace late with fixed update and so now we're actually updating our position in the fixed update physics loop don't ask me why this works but when we now hit play you can see just how smooth that is if anyone has a good explanation for this please post it in the comments finally we can have our camera always look at our player this is super simple to do we simply want to call transform look at and the object that we want to look at is our target this way unity will do all of the rotational calculation for us let's say that go into unity hit play and voila a smooth follow script it's working and we can see just how easy it is to update the way that we view our player there of course a million ways that you can expand upon this system if you want you can also pick up a camera solution from the unity asset store some of these allow you to do much more advanced camera stuff like having multiple targets setting up framing camera shakes transitions all that stuff I'll have some links in the description that's pretty much it for this video I hope you enjoyed it if you did make sure to subscribe so you don't miss the future one also if you have any questions you can go to from Rockies comm thanks watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in May and a special thanks to Derek huge jerk face of Mara Phi Stone gamer Cmdr Firestone 38 Thomas voice james calhoun cyborg mommie adjacent Lotito if you want to become a picture in yourself you can do so at patreon.com slash brackets
