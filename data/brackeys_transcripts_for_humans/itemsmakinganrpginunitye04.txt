With timestamps:

00:00 - in this video we're going to implement
00:01 - items for our game as well as laying the
00:03 - foundation for our inventory system and
00:05 - if you haven't seen it already Sebastian
00:06 - did the previous video on implementing
00:08 - the player character so go to his
00:10 - channel and check that out other than
00:11 - that let's get into it so as you can see
00:12 - in the previous video sebes set up this
00:14 - nice player character let's create an
00:16 - item here that he can pick up let's go
00:17 - to the Hier key right click go 3D object
00:20 - and Cube this is going to be the
00:21 - temporary graphic for our object let's
00:23 - scale it down a bit and move it over
00:25 - let's also give this some more fancy
00:27 - material let's right click go create
00:29 - material let's just call this material
00:30 - item let's drag it onto there and change
00:33 - the tint to a say shiny yellow now it
00:36 - looks like something we want to pick up
00:37 - let's now select the cube and rename it
00:39 - to test item and let's now create a
00:41 - script that will allow us to pick this
00:43 - item up to do that we'll hit add
00:45 - component and we'll create a script
00:46 - called item pickup we of course select C
00:49 - and hit create an ad and now the thing
00:50 - about the script is that an item is an
00:53 - interactable and so we don't want to
00:54 - write all the code for focusing an item
00:56 - walking to it and interacting with it
00:58 - once again instead we'll simply derived
01:00 - from interactable which is the script we
01:02 - created in video 2 we can also delete
01:04 - our two methods and everything under
01:06 - system dark collections now without
01:08 - adding any code here if we just save
01:10 - this and select the item in unity we can
01:13 - see that we now have a radius and an
01:15 - interaction transform that's because
01:17 - we've now inherited all the values and
01:19 - methods inside of our interactable class
01:21 - now one thing that's pretty annoying
01:22 - about our interactable in its current
01:24 - state is that we get a no reference
01:26 - exception until we go ahead and drag in
01:27 - a transform I want to change this by
01:29 - just opening up the interactable going
01:31 - to the bottom where we drawing our Gizmo
01:34 - and in here I simply want to say that if
01:36 - interactable transform is equal to null
01:39 - well then that set interaction transform
01:41 - equal to our own transform this will
01:43 - just make sure that we don't get any
01:45 - errors in the inspector so if we now
01:47 - clear this and select our test item you
01:49 - can see it automatically selects our own
01:51 - one and now the radius is displaying but
01:53 - of course we do want to add a bit of
01:54 - extra code to our item pickup the first
01:56 - thing we need to do is Define what
01:58 - happens when we decide to inter act with
02:00 - your object and remember inside of our
02:02 - interactable script we created a virtual
02:04 - method for this exact purpose so all we
02:06 - need to do is simply go into our item
02:08 - pickup and override this method we'll
02:10 - write public override void and then
02:13 - interact if you use autocomplete it will
02:16 - automatically insert this base. interact
02:19 - call this means that it goes back into
02:21 - our interactable and executes all the
02:23 - code inside of our interact method we
02:25 - then add code before that or after that
02:27 - right now we only write out a message
02:29 - but I'm still going to leave this in
02:30 - here in case we want to add more later
02:32 - and after that we can go ahead and pick
02:34 - up the item so we'll call some kind of
02:36 - method here which we'll call pick up
02:38 - we'll then create this method so void
02:40 - pickup and in here we can start by
02:42 - writing out a message saying that we are
02:44 - picking up an item then we want to add
02:48 - our item to our inventory and then
02:50 - finally remove our game object from the
02:52 - scene so we'll just call destroy game
02:54 - object if we now save this go into unity
02:57 - and hit play you should see that when we
02:59 - right click to focus the item we will
03:01 - walk over to it and pick it up but we
03:03 - still need a way to define properties
03:05 - for our item currently there's not much
03:07 - to tweak here we want to give our item a
03:09 - name an icon later on with equipment we
03:12 - want to modify stats on our player so we
03:14 - need to Define some kind of item data
03:16 - object you could do that using some kind
03:18 - of data serialization format such as
03:20 - Json or XML or you could use a very very
03:24 - handy feature in unity called scriptable
03:26 - objects scriptable objects are basically
03:28 - custom assets that you can create inside
03:30 - of your project and then set properties
03:32 - for each object in our case we'll go
03:34 - ahead and create a c script called item
03:37 - this is going to act as the blueprint
03:39 - for all of our scriptable objects so if
03:41 - we now open this up we'll delete our two
03:43 - methods and our collection namespaces
03:46 - and then we want to derive not from mono
03:48 - Behavior because we don't want the
03:49 - script to sit on a game object instead
03:51 - we want to derive from scriptable object
03:53 - and now we need to think about what all
03:55 - of our items is going to need remember
03:57 - we're making a blueprint here so all of
03:59 - our items is going to need a name and
04:01 - we'll just default that to new item
04:03 - you'll see a green line under the name
04:05 - here that's because any object actually
04:07 - already has a property called name and
04:09 - so there's a conflict when we also
04:11 - create one called name you could go in
04:13 - here and put say item name but instead
04:16 - I'm just going to put a new here in
04:18 - front of the variable which means that
04:19 - we're going to be overwriting the old
04:21 - definition and using this one instead
04:23 - then we'll also want an icon that will
04:24 - show up in our inventory for that we'll
04:26 - create a public Sprite call it icon and
04:29 - set it equal to null by default and at
04:31 - some point Sebastian is going to add
04:33 - some nice equipment to our character
04:35 - when he does this he's going to equip
04:36 - our character with some default wear and
04:38 - when we replace that default wear we
04:40 - don't necessarily want it cluttering up
04:41 - our inventory so we'll just go in here
04:43 - and add a public bullan stating whether
04:46 - or not this is a default item and we'll
04:49 - just set this equal to false by default
04:52 - so now we've kind of sketched out what
04:53 - properties we want our item objects to
04:55 - have again later we'll add equipment
04:57 - types armor modifiers damage modif and
05:00 - so on but these values will be shared by
05:02 - all items but one thing we still need to
05:04 - do is tell Unity how we want to create
05:05 - new items this can be done super easily
05:08 - by using an attribute it's called the
05:09 - create asset menu here we can give our
05:12 - item a default file name we'll just set
05:14 - it equal to new item and a menu name
05:16 - this is where we're going to navigate in
05:18 - order to create our item we'll put ours
05:20 - under inventory item now if we save our
05:22 - script go into unity and then right
05:25 - click in our project panel go create we
05:27 - will see a new tab here called in
05:29 - inventory and under there we'll see an
05:32 - item if we press this a new object is
05:34 - created in our project panel this is our
05:35 - scriptable objects we can give this a
05:37 - name in the project I'm just going to
05:39 - call it test item and then we can fill
05:41 - out all of our variables let's call it
05:43 - the helmet of protection we'll just
05:45 - leave the icon blank for now and we
05:47 - don't want this to be a default item and
05:48 - we can now go ahead and create as many
05:50 - items here as we want in fact let's go
05:52 - ahead and create a folder for all of our
05:54 - items let's drag our test item into
05:56 - there so now all we need to do is link
05:58 - our test item with our item pickup
06:00 - script to do that let's open up item
06:02 - pickup in here let's create a public
06:05 - item and let's just call it item and now
06:08 - we can access all the values under that
06:09 - item if we write item dot we can see
06:12 - both the icon the default item and the
06:14 - name right here so instead of saying
06:17 - picking up item let's say picking up and
06:19 - then follow by the name of the item
06:21 - let's save that drag our test item into
06:23 - the item slot hit play and now when we
06:25 - pick up the item it's going to say
06:27 - interacting with test item and then
06:29 - picking up helmet of protection awesome
06:32 - so now we know what item we are picking
06:33 - up but currently we're just making it
06:35 - disappear what we really want to do is
06:37 - add it to some kind of inventory to do
06:39 - that let's create another C script let's
06:42 - call it inventory let's also create an
06:44 - empty game object in our scene reset the
06:46 - transform and call it say game manager
06:50 - let's then drag it to the top so we can
06:51 - always see it and here we want to add
06:53 - all of the scripts that control the
06:54 - General State of our game I'm going to
06:56 - add my inventory here but you could
06:58 - definitely also put it on the player
07:00 - let's open it up and we do want to
07:01 - delete our two methods but for this one
07:03 - we'll keep all the name spaces and
07:05 - that's because we want access to the
07:06 - list type because Central for any
07:08 - inventory is a list of items so let's
07:11 - create a public list of type item let's
07:14 - call this list items and set it equal to
07:17 - a new list of items then we can create a
07:19 - method for adding a new item let's go
07:21 - public void add and here we want to take
07:24 - in an item called say item and we then
07:27 - simply want to add this item to the
07:28 - items list to do that we go items do add
07:31 - and in here we put our item we also want
07:34 - to make a method called remove this is
07:36 - also going to take in an item and you
07:39 - guessed it this time we just want to go
07:40 - items. remove and then put in the item
07:43 - there are a few cases where we don't
07:45 - want to add an item remember how we
07:46 - created our is default item variable
07:49 - well this is where we want to take it
07:50 - into account we don't want to go ahead
07:51 - and add this item if it's a default item
07:53 - so in here we'll write if our item is
07:56 - not a default item well then we want to
07:58 - go ahead and add it to our inventory of
08:00 - course we also need to call these
08:02 - methods inside of our item pickup we've
08:04 - already said that this is where we want
08:05 - to add the item to the inventory but we
08:07 - need a reference to our inventory we
08:09 - could just go find object of type
08:11 - inventory and then call the add method
08:14 - on whatever we find but this is fairly
08:16 - taxing instead what we'll do is go into
08:18 - our inventory and here we'll create a
08:20 - very simple Singleton pattern now this
08:23 - is not a video dedicated to Singleton so
08:25 - we won't be making a true Singleton
08:27 - pattern in fact I'll just show you the
08:28 - easiest way all to get this working but
08:31 - hopefully you'll get the idea if you
08:32 - want to learn more about Singleton I'll
08:34 - have a link in the description the first
08:35 - thing we'll do is create a public static
08:38 - and this is why it becomes a bit weird
08:39 - we'll create a public static inventory
08:41 - that's why we're creating a variable
08:43 - with the same type as our class we'll
08:45 - call this variable the instance then
08:47 - we'll make an awake method and in here
08:50 - we'll set instance equal to this so
08:53 - basically what we're doing here is we're
08:55 - creating a static variable meaning a
08:57 - variable that's shared by all instances
08:59 - of a class and we're calling it instance
09:02 - then when starting the game we are
09:03 - setting the instance equal to this
09:05 - particular component that means that we
09:07 - always be able to access this particular
09:09 - inventory component by simply going
09:12 - inventory. instance it also means that
09:14 - you should only have one inventory at
09:17 - all times in fact let's go ahead and
09:19 - write if instance is not equal to null
09:22 - well then we want to warn ourselves
09:23 - because we've clearly done something
09:24 - wrong so let's go debug. warning saying
09:27 - more than one instance of inventory
09:32 - found and we then return out of this
09:34 - method now this piece of code can be
09:36 - pretty confusing to understand at first
09:38 - but it's something that you will see on
09:39 - so many different scripts especially
09:41 - scripts sitting on some kind of game
09:42 - manager and since this part of the code
09:44 - is not really related to the purpose of
09:46 - the class I like to hide it away at the
09:48 - top to do that we'll use a region we'll
09:51 - call this region the Singleton and then
09:53 - at the end here we'll use end region
09:56 - that just means that we can take this
09:57 - entire piece of code and collapse it
09:59 - it's always here so we know it's using a
10:01 - Singleton but we don't have to look at
10:02 - the actual code if we then save that and
10:05 - go into our item pickup now instead of
10:07 - using find object of type we can simply
10:09 - write inventory do instance and there we
10:12 - go we now have a reference to our
10:13 - inventory script so now we can call add
10:16 - on that script and the item that we want
10:17 - to add here is the item variable let's
10:20 - then save that go into unity and hit
10:22 - play and if we have a look at our
10:24 - inventory script it currently has no
10:26 - items if we then pick up this item it's
10:28 - going to say that that we have one item
10:30 - and the item is going to be our test
10:32 - item awesome so that's the very
10:34 - Foundation of our inventory but there's
10:36 - still some common things that any
10:37 - inventory should have the first thing is
10:39 - of course limited space let's go ahead
10:41 - and create a public integer called space
10:44 - and set it equal to say 20 slots then
10:46 - when trying to add a new item we'll
10:48 - check if items. count is greater than or
10:52 - equal to or space variable if it is well
10:55 - then we want to debug that log that we
10:57 - don't have enough room
11:00 - and then return out of the method and if
11:02 - we get past this if statement we do have
11:04 - enough room and so we want to add the
11:05 - item however this is currently going to
11:07 - lead to a bug because in the event that
11:09 - we don't have enough room we don't want
11:11 - to consume the item we want it to still
11:13 - sit in the scene but inside of our item
11:14 - pickup we destroy the game object
11:16 - regardless we try and add the item and
11:19 - whether it's successful or not it's
11:20 - still going to destroy it so what we'll
11:22 - do is go into our inventory and add a
11:25 - return type of B here we're going to
11:27 - return false if we didn't pick up the
11:29 - item and if we did we're going to return
11:32 - true now we can save this and not use it
11:34 - at all we don't have to worry about the
11:36 - return type but in the case of picking
11:38 - it up we definitely want to know whether
11:39 - or not we were successful so we'll
11:41 - create a bol here called was picked up
11:43 - and we'll set that equal to the result
11:45 - of our ad method we then check if the
11:48 - item was picked up and if it was we want
11:50 - to destroy our game object now if we go
11:52 - into unity and try decreasing our space
11:54 - to say two we then duplicate our test
11:57 - item a few times let's play and let's
11:59 - let's try and pick some of these up so
12:00 - the first time it gets added to our
12:02 - inventory the second time it does so as
12:04 - well but the third time it says picking
12:07 - up helmet of protection not enough room
12:09 - and as you can see it hasn't been added
12:11 - to our inventory and it's not
12:12 - disappeared from our scene if we were to
12:14 - go ahead and decrease the amount of
12:16 - items we have well now we can pick it up
12:18 - in the next video we're going to be
12:19 - displaying our inventory on screen we'll
12:22 - also allow you to manage it by removing
12:24 - items and be using the same interface
12:26 - for later equipping them but in order to
12:28 - update that UI we want to know when the
12:30 - inventory has changed in other words
12:32 - when have we added or removed an item to
12:34 - do that we'll go into the inventory and
12:36 - we'll create what is called a delegate a
12:38 - delegate is basically an event that you
12:40 - can subscribe different methods to when
12:42 - you then trigger the event all of the
12:44 - subscribed methods will be called we'll
12:46 - create a public delegate and you can
12:48 - actually return values in delegates as
12:50 - well we'll just write void though we'll
12:52 - call it on item changed then we want to
12:55 - open and close some parentheses and put
12:56 - a semicolon now we've defined our
12:58 - delicate type next we need to implement
13:00 - it to do that we create a public on item
13:03 - changed and we'll call this our on item
13:06 - changed callback now if you've never
13:08 - seen the delegate before this is a lot
13:10 - of weird syntax but this allows us to do
13:12 - some really great stuff now we can have
13:14 - different methods subscribe to this
13:15 - event we'll do that when creating our UI
13:18 - but we already know when we want to call
13:20 - it we of course want to do that when we
13:21 - add a new item so after adding a new
13:23 - item we'll go on item Chang call back.
13:27 - invoke this means that we are triggering
13:30 - the event and so we want our UI to
13:31 - update when doing this we want to make
13:33 - sure that we actually have some method
13:35 - subscrib to this call back if not we'll
13:37 - get an error so we'll just make sure to
13:38 - check if on item change call back is not
13:41 - equal to null and if it's not well then
13:44 - we can go ahead and call invoke we can
13:45 - just copy this code and paste it to the
13:47 - bottom of our remove function as well so
13:50 - now whenever something is changing on
13:51 - our inventory we triggering on item
13:54 - changed call back this is going to be
13:56 - super handy in the next episode and
13:57 - that's it the hardest part is actually
14:00 - done now and we're getting pretty close
14:01 - to being able to add all the cool stuff
14:03 - to our RPG so I hope you'll hang in
14:05 - there that's pretty much it for this
14:06 - video If you enjoyed it make sure to
14:08 - subscribe so you don't miss a future one
14:09 - the next video on adding UI to our
14:11 - inventory should be out next Wednesday
14:13 - so make sure to subscribe for that also
14:14 - remember you can download both the
14:16 - environment and player character of Dev
14:18 - assets and if you get stuck at any point
14:19 - you can download the project from GitHub
14:21 - both links are in the description other
14:23 - than that thanks for watching and I will
14:24 - see you in the next video thanks to all
14:26 - the awesome patreon supporters who
14:28 - donated in July and a special thanks to
14:30 - H huun Cole cabal Will goat yesper
14:32 - melson Thomas vley stone gamer cybor
14:35 - mummy Jason natto Derek Heir faal marifi
14:38 - Robert Bund and Peter lock if your
14:40 - name's not on the list I will make sure
14:41 - to include you in videos later this
14:43 - month and the next month as well thanks
14:45 - a lot guys

Cleaned transcript:

in this video we're going to implement items for our game as well as laying the foundation for our inventory system and if you haven't seen it already Sebastian did the previous video on implementing the player character so go to his channel and check that out other than that let's get into it so as you can see in the previous video sebes set up this nice player character let's create an item here that he can pick up let's go to the Hier key right click go 3D object and Cube this is going to be the temporary graphic for our object let's scale it down a bit and move it over let's also give this some more fancy material let's right click go create material let's just call this material item let's drag it onto there and change the tint to a say shiny yellow now it looks like something we want to pick up let's now select the cube and rename it to test item and let's now create a script that will allow us to pick this item up to do that we'll hit add component and we'll create a script called item pickup we of course select C and hit create an ad and now the thing about the script is that an item is an interactable and so we don't want to write all the code for focusing an item walking to it and interacting with it once again instead we'll simply derived from interactable which is the script we created in video 2 we can also delete our two methods and everything under system dark collections now without adding any code here if we just save this and select the item in unity we can see that we now have a radius and an interaction transform that's because we've now inherited all the values and methods inside of our interactable class now one thing that's pretty annoying about our interactable in its current state is that we get a no reference exception until we go ahead and drag in a transform I want to change this by just opening up the interactable going to the bottom where we drawing our Gizmo and in here I simply want to say that if interactable transform is equal to null well then that set interaction transform equal to our own transform this will just make sure that we don't get any errors in the inspector so if we now clear this and select our test item you can see it automatically selects our own one and now the radius is displaying but of course we do want to add a bit of extra code to our item pickup the first thing we need to do is Define what happens when we decide to inter act with your object and remember inside of our interactable script we created a virtual method for this exact purpose so all we need to do is simply go into our item pickup and override this method we'll write public override void and then interact if you use autocomplete it will automatically insert this base. interact call this means that it goes back into our interactable and executes all the code inside of our interact method we then add code before that or after that right now we only write out a message but I'm still going to leave this in here in case we want to add more later and after that we can go ahead and pick up the item so we'll call some kind of method here which we'll call pick up we'll then create this method so void pickup and in here we can start by writing out a message saying that we are picking up an item then we want to add our item to our inventory and then finally remove our game object from the scene so we'll just call destroy game object if we now save this go into unity and hit play you should see that when we right click to focus the item we will walk over to it and pick it up but we still need a way to define properties for our item currently there's not much to tweak here we want to give our item a name an icon later on with equipment we want to modify stats on our player so we need to Define some kind of item data object you could do that using some kind of data serialization format such as Json or XML or you could use a very very handy feature in unity called scriptable objects scriptable objects are basically custom assets that you can create inside of your project and then set properties for each object in our case we'll go ahead and create a c script called item this is going to act as the blueprint for all of our scriptable objects so if we now open this up we'll delete our two methods and our collection namespaces and then we want to derive not from mono Behavior because we don't want the script to sit on a game object instead we want to derive from scriptable object and now we need to think about what all of our items is going to need remember we're making a blueprint here so all of our items is going to need a name and we'll just default that to new item you'll see a green line under the name here that's because any object actually already has a property called name and so there's a conflict when we also create one called name you could go in here and put say item name but instead I'm just going to put a new here in front of the variable which means that we're going to be overwriting the old definition and using this one instead then we'll also want an icon that will show up in our inventory for that we'll create a public Sprite call it icon and set it equal to null by default and at some point Sebastian is going to add some nice equipment to our character when he does this he's going to equip our character with some default wear and when we replace that default wear we don't necessarily want it cluttering up our inventory so we'll just go in here and add a public bullan stating whether or not this is a default item and we'll just set this equal to false by default so now we've kind of sketched out what properties we want our item objects to have again later we'll add equipment types armor modifiers damage modif and so on but these values will be shared by all items but one thing we still need to do is tell Unity how we want to create new items this can be done super easily by using an attribute it's called the create asset menu here we can give our item a default file name we'll just set it equal to new item and a menu name this is where we're going to navigate in order to create our item we'll put ours under inventory item now if we save our script go into unity and then right click in our project panel go create we will see a new tab here called in inventory and under there we'll see an item if we press this a new object is created in our project panel this is our scriptable objects we can give this a name in the project I'm just going to call it test item and then we can fill out all of our variables let's call it the helmet of protection we'll just leave the icon blank for now and we don't want this to be a default item and we can now go ahead and create as many items here as we want in fact let's go ahead and create a folder for all of our items let's drag our test item into there so now all we need to do is link our test item with our item pickup script to do that let's open up item pickup in here let's create a public item and let's just call it item and now we can access all the values under that item if we write item dot we can see both the icon the default item and the name right here so instead of saying picking up item let's say picking up and then follow by the name of the item let's save that drag our test item into the item slot hit play and now when we pick up the item it's going to say interacting with test item and then picking up helmet of protection awesome so now we know what item we are picking up but currently we're just making it disappear what we really want to do is add it to some kind of inventory to do that let's create another C script let's call it inventory let's also create an empty game object in our scene reset the transform and call it say game manager let's then drag it to the top so we can always see it and here we want to add all of the scripts that control the General State of our game I'm going to add my inventory here but you could definitely also put it on the player let's open it up and we do want to delete our two methods but for this one we'll keep all the name spaces and that's because we want access to the list type because Central for any inventory is a list of items so let's create a public list of type item let's call this list items and set it equal to a new list of items then we can create a method for adding a new item let's go public void add and here we want to take in an item called say item and we then simply want to add this item to the items list to do that we go items do add and in here we put our item we also want to make a method called remove this is also going to take in an item and you guessed it this time we just want to go items. remove and then put in the item there are a few cases where we don't want to add an item remember how we created our is default item variable well this is where we want to take it into account we don't want to go ahead and add this item if it's a default item so in here we'll write if our item is not a default item well then we want to go ahead and add it to our inventory of course we also need to call these methods inside of our item pickup we've already said that this is where we want to add the item to the inventory but we need a reference to our inventory we could just go find object of type inventory and then call the add method on whatever we find but this is fairly taxing instead what we'll do is go into our inventory and here we'll create a very simple Singleton pattern now this is not a video dedicated to Singleton so we won't be making a true Singleton pattern in fact I'll just show you the easiest way all to get this working but hopefully you'll get the idea if you want to learn more about Singleton I'll have a link in the description the first thing we'll do is create a public static and this is why it becomes a bit weird we'll create a public static inventory that's why we're creating a variable with the same type as our class we'll call this variable the instance then we'll make an awake method and in here we'll set instance equal to this so basically what we're doing here is we're creating a static variable meaning a variable that's shared by all instances of a class and we're calling it instance then when starting the game we are setting the instance equal to this particular component that means that we always be able to access this particular inventory component by simply going inventory. instance it also means that you should only have one inventory at all times in fact let's go ahead and write if instance is not equal to null well then we want to warn ourselves because we've clearly done something wrong so let's go debug. warning saying more than one instance of inventory found and we then return out of this method now this piece of code can be pretty confusing to understand at first but it's something that you will see on so many different scripts especially scripts sitting on some kind of game manager and since this part of the code is not really related to the purpose of the class I like to hide it away at the top to do that we'll use a region we'll call this region the Singleton and then at the end here we'll use end region that just means that we can take this entire piece of code and collapse it it's always here so we know it's using a Singleton but we don't have to look at the actual code if we then save that and go into our item pickup now instead of using find object of type we can simply write inventory do instance and there we go we now have a reference to our inventory script so now we can call add on that script and the item that we want to add here is the item variable let's then save that go into unity and hit play and if we have a look at our inventory script it currently has no items if we then pick up this item it's going to say that that we have one item and the item is going to be our test item awesome so that's the very Foundation of our inventory but there's still some common things that any inventory should have the first thing is of course limited space let's go ahead and create a public integer called space and set it equal to say 20 slots then when trying to add a new item we'll check if items. count is greater than or equal to or space variable if it is well then we want to debug that log that we don't have enough room and then return out of the method and if we get past this if statement we do have enough room and so we want to add the item however this is currently going to lead to a bug because in the event that we don't have enough room we don't want to consume the item we want it to still sit in the scene but inside of our item pickup we destroy the game object regardless we try and add the item and whether it's successful or not it's still going to destroy it so what we'll do is go into our inventory and add a return type of B here we're going to return false if we didn't pick up the item and if we did we're going to return true now we can save this and not use it at all we don't have to worry about the return type but in the case of picking it up we definitely want to know whether or not we were successful so we'll create a bol here called was picked up and we'll set that equal to the result of our ad method we then check if the item was picked up and if it was we want to destroy our game object now if we go into unity and try decreasing our space to say two we then duplicate our test item a few times let's play and let's let's try and pick some of these up so the first time it gets added to our inventory the second time it does so as well but the third time it says picking up helmet of protection not enough room and as you can see it hasn't been added to our inventory and it's not disappeared from our scene if we were to go ahead and decrease the amount of items we have well now we can pick it up in the next video we're going to be displaying our inventory on screen we'll also allow you to manage it by removing items and be using the same interface for later equipping them but in order to update that UI we want to know when the inventory has changed in other words when have we added or removed an item to do that we'll go into the inventory and we'll create what is called a delegate a delegate is basically an event that you can subscribe different methods to when you then trigger the event all of the subscribed methods will be called we'll create a public delegate and you can actually return values in delegates as well we'll just write void though we'll call it on item changed then we want to open and close some parentheses and put a semicolon now we've defined our delicate type next we need to implement it to do that we create a public on item changed and we'll call this our on item changed callback now if you've never seen the delegate before this is a lot of weird syntax but this allows us to do some really great stuff now we can have different methods subscribe to this event we'll do that when creating our UI but we already know when we want to call it we of course want to do that when we add a new item so after adding a new item we'll go on item Chang call back. invoke this means that we are triggering the event and so we want our UI to update when doing this we want to make sure that we actually have some method subscrib to this call back if not we'll get an error so we'll just make sure to check if on item change call back is not equal to null and if it's not well then we can go ahead and call invoke we can just copy this code and paste it to the bottom of our remove function as well so now whenever something is changing on our inventory we triggering on item changed call back this is going to be super handy in the next episode and that's it the hardest part is actually done now and we're getting pretty close to being able to add all the cool stuff to our RPG so I hope you'll hang in there that's pretty much it for this video If you enjoyed it make sure to subscribe so you don't miss a future one the next video on adding UI to our inventory should be out next Wednesday so make sure to subscribe for that also remember you can download both the environment and player character of Dev assets and if you get stuck at any point you can download the project from GitHub both links are in the description other than that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in July and a special thanks to H huun Cole cabal Will goat yesper melson Thomas vley stone gamer cybor mummy Jason natto Derek Heir faal marifi Robert Bund and Peter lock if your name's not on the list I will make sure to include you in videos later this month and the next month as well thanks a lot guys
