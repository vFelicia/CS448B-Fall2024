With timestamps:

00:00 - this video will have a look at reversing
00:01 - time mister of you because of a hell way
00:03 - to find we're done it's going to look
00:04 - something like this let's get into it so
00:06 - here we have a simple scene with the
00:08 - first person character and a bunch of
00:09 - red cubes stacked on top of each other
00:12 - each one of these cubes has a box
00:13 - Collider and a rigidbody so if we go
00:16 - ahead and hit play we can run around the
00:17 - scene and we can click to create
00:19 - explosions I'll have a download link for
00:21 - the project in the description so in
00:23 - order to create the effect that time is
00:24 - rewinding let's go ahead and add a
00:26 - script to each one of our cubes to do
00:28 - that I'll go under prefabs and find the
00:30 - red box prefab you'll add a new
00:33 - component let's call it time body you're
00:36 - going to choose C sharp and a crane ad
00:38 - let's now double click this to open it
00:40 - up in Visual Studio and the first thing
00:42 - that we want is a way to keep track of
00:43 - whether or not we want to rewind time to
00:46 - do that let's use some keyboard input
00:48 - let's first off create a variable at the
00:50 - top let's make this public so it shows
00:52 - up in the inspector let's make it of
00:54 - type bold and it's called it is
00:56 - rewinding by default it's going to be
00:59 - false then inside of our update method
01:01 - let's go ahead and make an if statement
01:02 - that checks if we are pressing a rewind
01:04 - button so we go input dot get key down
01:08 - and you can use any key here the key
01:10 - that I'll be using is the return key
01:12 - otherwise known as enter so to get that
01:15 - key we write key code return so when we
01:18 - first press the key we want to set is
01:20 - rewinding equal to true but we also want
01:23 - to modify some settings on our rigidbody
01:25 - so let's go ahead and wrap this in a
01:27 - function called start rewind then we
01:30 - also want to check when we release the
01:32 - key so we write if input don't get key
01:35 - up and again checking for key code dot
01:39 - return so when we stop pressing the key
01:41 - we want to stop rewind now let's create
01:44 - these two methods that's first off
01:46 - create void
01:47 - start rewind and in here we want to set
01:51 - its rewinding equal to true and in our
01:55 - other method which is going to be called
01:57 - stop rewind
01:58 - we'll set its rewinding equal to false
02:01 - if you want you can go ahead and make
02:03 - these two methods public this way we can
02:06 - access them from other scripts and this
02:08 - is going to allow us to rewind each
02:10 - individual object through another script
02:12 - we could for example create a
02:14 - line gun that would rewind the time for
02:16 - any object hit with it we would simply
02:18 - go ahead and make these two public it's
02:21 - probably also a good idea to go and make
02:22 - this variable private but for now we
02:25 - want to see it in the inspector so now
02:27 - when we save this and hit into unity we
02:29 - should see that each and every one of
02:30 - our cubes has the time body script and
02:32 - that when we play and hold down enter
02:35 - it's going to be marked as true and when
02:37 - we then again release it shifts back to
02:39 - false now in order to actually rewind
02:41 - the position and rotation of an object
02:43 - we first have to keep track of it in
02:45 - other words we have to record some
02:47 - information to do that we'll use a list
02:49 - remember that whenever we use lists we
02:52 - have to make sure that the system that
02:53 - collections that generic namespace is
02:55 - included at the top so let's begin
02:57 - simple let's keep track of only our
02:59 - objects position to do that we create a
03:01 - list that is going to store vector
03:03 - threes for positional data and we can go
03:06 - ahead and call it positions at the start
03:08 - of our game will then set positions
03:10 - equal to a new list of vector threes so
03:13 - by default there is nothing in our list
03:15 - while we're not rewinding we want to add
03:17 - new elements to it this list is going to
03:20 - store the object's position over time
03:22 - meaning that each element in the list is
03:24 - going to be the position at a given
03:26 - point in time we refer to these points
03:28 - in time as frames but instead of
03:30 - updating it every single frame we can
03:33 - instead updated every physics iteration
03:35 - that means that instead of adding new
03:37 - elements inside of update we'll add it
03:39 - inside of fixed update this is better
03:41 - because fixed update most often will run
03:43 - slower than update and also on a fixed
03:45 - timer so we won't get any issues with
03:48 - playback speed let's go in here and
03:49 - write void fixed update in here we want
03:53 - to check if we are currently rewinding
03:55 - if we are we want to go ahead and do the
03:57 - logic related to rewinding and so we can
03:59 - call some kind of method called say
04:01 - rewind and if we're not we want to
04:03 - record some information so let's go
04:05 - ahead and make another method for that
04:07 - called record will create a rewrite
04:09 - method in a second let's create a method
04:12 - called record and in here we want to go
04:15 - ahead and add new elements to our list
04:17 - to do that we go positions dot add now
04:20 - this adds an element to the end of the
04:23 - list that means that in the beginning of
04:25 - our list we'll have the oldest positions
04:27 - at the end we'll have the newest ones
04:28 - you can definitely do it this way but I
04:30 - like doing it the opposite way we're the
04:32 - newest positions are those at index zero
04:35 - because I'd like to think of it kind of
04:36 - like stacking positions on top of each
04:38 - other where the newest place item is
04:40 - always going to be at the top and so
04:42 - instead of using add to add it to the
04:43 - end of the list let's use insert and the
04:46 - index that we want to insert at is zero
04:49 - which means at the very start the item
04:51 - that we want to insert
04:52 - it's our composition which is of course
04:54 - transform dot position so now each
04:57 - fistic iteration we are calling the
04:59 - record method and our record method make
05:01 - sure to insert a log of our position at
05:03 - the current time so now we're ready to
05:05 - create the rewind method all we need to
05:07 - do each physically duration is read the
05:09 - next element in the list let's go ahead
05:11 - and create that method here we want to
05:13 - set our current position meaning
05:14 - transform drop position equal to the
05:18 - first element in our list which is our
05:20 - positions list of index 0 and then after
05:23 - getting that position we want to remove
05:25 - that element and so we'll go positions
05:27 - dot remove add and we want to remove at
05:31 - index 0 so if we now save this and hit
05:34 - enter unity you should get no errors and
05:36 - when we now play shoot and then hold
05:38 - down return we see all of our objects
05:41 - returning to their previous positions
05:43 - however there are few problems the first
05:45 - one is of course we're not keeping track
05:47 - of the object's rotation and so will
05:49 - things look a bit weird the second one
05:51 - is that while we're rewinding unity
05:53 - still trying to apply physics on top and
05:55 - so it's probably better that we set our
05:57 - rigidbody as kinematic while rewinding
05:59 - and the final thing is that when we
06:01 - reach the end of our list we get an
06:03 - argument out of range exception because
06:05 - we've gone through all of our positional
06:06 - data let's start by fixing the error
06:08 - what we need to do here is simply add an
06:10 - if statement if and we want to check if
06:13 - there are more elements in our list so
06:15 - we'll check if positions dot count is
06:18 - greater than zero if it is well then we
06:20 - can go ahead and continue rewinding
06:22 - however if it is not well then we want
06:24 - to stop rewinding immediately that
06:27 - should get rid of that error force so
06:29 - let's just try hitting play shooting and
06:32 - winding back time and we should see no
06:35 - more errors let's also make sure to set
06:37 - a rigid body as kinematic while
06:38 - rewinding to do that we need a red
06:40 - two rigid bodies so let's go ahead and
06:42 - create a rigid body call it OB and
06:45 - inside of our start method we'll set our
06:47 - be equal to get component of type rigid
06:51 - body of course if your object doesn't
06:53 - have a rigid body you can simply skip
06:54 - this step we can then go to where we
06:56 - start and stop rewinding when we start
06:58 - we want to set our P that is kinematic
07:00 - equal to true and when we stop we want
07:03 - to set our be that is kinematic to false
07:06 - now if we watch our rigid body to the
07:08 - right here
07:09 - we can see that when I hold down enter
07:11 - it is true and when I let go it's false
07:14 - finally we can start keeping track of
07:16 - rotation as well to do that we could go
07:19 - in here and add another list fall of our
07:21 - rotations however I think a better way
07:23 - is have one list store objects that keep
07:26 - track of both position and rotation
07:28 - let's go ahead and create such a class
07:30 - to do that we're going to unity we right
07:32 - click in the project panel hit create
07:34 - c-sharp script and now this class is
07:36 - going to store it to values our position
07:38 - and our rotation
07:39 - let's call it point in time now let's
07:43 - double click on point in time and let's
07:45 - modify this a bit first of all we don't
07:47 - need to be using any of the system stuff
07:48 - we don't need this to derive from
07:50 - monobehaviour
07:51 - and we don't need any methods instead
07:53 - what we need is a public vector three
07:56 - storing our position and a public
07:59 - quaternion storing our rotation we then
08:02 - create a constructor for this class that
08:04 - makes it easier to set these values when
08:07 - they gave public point in time this is
08:10 - going to take in a victor three let's
08:12 - write underscore position so that we can
08:14 - distinguish this from the position up
08:16 - here and a rotation let's write
08:18 - Kryptonian underscore rotation now in
08:22 - this constructor that set position equal
08:24 - to underscore position and rotation
08:26 - equal to underscore rotation now when we
08:29 - save this and go into our time body
08:31 - script instead of storing a list of
08:33 - vector threes let's store a list of
08:35 - points in time of course make sure to
08:38 - change the type down here as well and
08:40 - let's rename the variables from
08:41 - positions to points in time by the way
08:45 - to do quick refractory in visual studio
08:47 - I hold down control and press R twice
08:50 - it's a pretty handy shortcut now if we
08:52 - scroll down to a rewind mess
08:54 - we can set up position equal to this
08:57 - point in time directly so let's instead
08:59 - get our first point in time and store it
09:01 - in a temporary variable the variable is
09:03 - of course going to be of type point in
09:05 - time and it's call it point in time with
09:08 - a non capital P it's going to be equal
09:10 - to the first element in our list then we
09:12 - can set our position equal to that point
09:15 - in time dub position and our rotation
09:18 - equal to that point in time dot notation
09:21 - we have the same issue when recording we
09:24 - can't record our position directly
09:26 - instead we have to go in here and create
09:28 - a new point in time and we want to feed
09:31 - it first our position transform dot
09:34 - position and then our rotation transform
09:37 - dot rotation and by the way this is also
09:40 - why we created a constructor the
09:41 - constructor allows us to simply insert
09:43 - our position and our rotation was
09:45 - creating the object otherwise we would
09:47 - have to create it in a temporary
09:48 - variable and then change each value one
09:51 - by one so now if we save this and head
09:53 - into unity we should see that our
09:55 - objects will keep track of both position
09:57 - and rotation and so our rewind starts to
10:00 - look really smooth awesome of course you
10:03 - want to be careful that we don't try and
10:04 - keep track of too many point in time
10:06 - currently I have about 50 cubes in my
10:08 - scene and each of them now have a list
10:10 - where every single physics iteration
10:13 - which normally sits around fifty times a
10:15 - second a new point in time gets recorded
10:17 - that means in one second will already
10:19 - have recorded about 2500 values let's in
10:23 - one second and so you can imagine that
10:25 - if you leave this for say a minute this
10:27 - value quickly becomes ridiculous so what
10:30 - we probably want to do is put a limit on
10:32 - how far back in time we can go now most
10:34 - games have this as a gameplay thing you
10:36 - can't win back time more than five
10:38 - seconds but you can see now that there's
10:40 - also a very practical reason why so
10:42 - let's now go into visual studio and try
10:44 - and add this and the best way we can do
10:45 - this is by keeping track of how many
10:47 - values are currently in a point in time
10:49 - list so inside of our record method we
10:51 - can check if points in time dot count is
10:56 - greater than some value now normally
10:58 - fixedupdate will run fifty times a
11:00 - second and so if we insert 50 here we
11:02 - check if more than one second has gone
11:04 - by and so if you want to check for five
11:06 - seconds we'll insert two on
11:08 - and fifty but of course your fixedupdate
11:10 - might run on a different timer and
11:12 - sometimes we even have to adjust this
11:14 - during a game so what one stud do is
11:16 - going here and make a quick calculation
11:18 - first we can use time dot fix Delta time
11:21 - to get the time between each fixed
11:23 - object call and so one divided by that
11:25 - it's going to be the amount of time so
11:27 - fixed update runs a second so normally
11:30 - this is going to say 1 divided by 0.02
11:33 - which is going to equal 50 of course we
11:36 - can now multiply this number if you want
11:38 - to record for more than one second we
11:40 - could for example simply multiply this
11:42 - with five so now if this value here is
11:45 - 50 this is going to multiply with five
11:47 - and so this side is going to say 250 now
11:51 - some of you might notice that this can
11:52 - be written either by simply multiplying
11:54 - this number into this number and so we
11:57 - can actually simply write 5 divided by
11:59 - fixed at a time however this is
12:01 - currently a floating point number and so
12:03 - we need to convert this into an integer
12:05 - because the number of points in time we
12:07 - have is an integer value and so let's
12:09 - write mass dot round this is going to
12:13 - round the float that we insert to the
12:15 - nearest integer we want to insert the
12:17 - result of our calculation so if you got
12:19 - confused along the way here's what we're
12:20 - doing we're checking if you have more
12:22 - points in time that we would get during
12:24 - 5 seconds and if we do well then more
12:27 - than 5 seconds have elapsed that means
12:29 - that we need to start over writing and
12:30 - so inside these brackets would then
12:33 - start removing from our list so that's
12:35 - called points in time dot remove add and
12:38 - the index that we want to remove at is
12:40 - the bottom of a list because remember
12:43 - our oldest entries are at the bottom and
12:45 - so to remove from the bottom of a list
12:47 - will go point in time count minus 1 so
12:52 - now during the first 5 seconds of our
12:53 - record will simply add new elements to a
12:55 - point in time and when we get past 2 5
12:58 - seconds
12:58 - we'll start removing from the bottom of
13:00 - our list and adding to the top so when
13:03 - we now save this and head into unity and
13:05 - hit play we can play around with these
13:07 - red cubes for about five seconds and
13:09 - when we then start rewinding we should
13:12 - see that after 5 seconds of rewind stops
13:14 - because our system has no information
13:16 - about what happened before of course you
13:18 - can tweak this value in any way you want
13:20 - I'm just going to make it into a
13:22 - variable at the top so you can do that
13:23 - easily let's make it a public float
13:26 - called record time and then fold it to
13:29 - five seconds
13:30 - it's then put record time down here and
13:32 - finally at the top that's also turn or
13:35 - rewinding into a private variable so we
13:38 - can't edit it through the inspector from
13:40 - here I just encourage you to have fun
13:42 - with the rewind system there's lots of
13:44 - stuff you can do with this lets pretty
13:46 - much it for this video if you enjoyed it
13:48 - make sure to subscribe to the Dome it's
13:49 - a future one also if you're interested
13:51 - in more time related stuff check out my
13:52 - video on creating a bullet time effect
13:54 - on that thanks for watching and I will
13:56 - see you in the next video thanks to of
13:58 - the awesome patreon supporters who
13:59 - donated in May and a special thanks to
14:02 - Derek huge jerk face of Mara Phi stoned
14:04 - gamer gmvi feinstone 38 Thomas Roy Lee
14:07 - James Calhoun cyborg Romney and Jason
14:10 - the teeter if you want to become a
14:11 - picture in yourself you can do so at
14:13 - patreon.com slash brekkie

Cleaned transcript:

this video will have a look at reversing time mister of you because of a hell way to find we're done it's going to look something like this let's get into it so here we have a simple scene with the first person character and a bunch of red cubes stacked on top of each other each one of these cubes has a box Collider and a rigidbody so if we go ahead and hit play we can run around the scene and we can click to create explosions I'll have a download link for the project in the description so in order to create the effect that time is rewinding let's go ahead and add a script to each one of our cubes to do that I'll go under prefabs and find the red box prefab you'll add a new component let's call it time body you're going to choose C sharp and a crane ad let's now double click this to open it up in Visual Studio and the first thing that we want is a way to keep track of whether or not we want to rewind time to do that let's use some keyboard input let's first off create a variable at the top let's make this public so it shows up in the inspector let's make it of type bold and it's called it is rewinding by default it's going to be false then inside of our update method let's go ahead and make an if statement that checks if we are pressing a rewind button so we go input dot get key down and you can use any key here the key that I'll be using is the return key otherwise known as enter so to get that key we write key code return so when we first press the key we want to set is rewinding equal to true but we also want to modify some settings on our rigidbody so let's go ahead and wrap this in a function called start rewind then we also want to check when we release the key so we write if input don't get key up and again checking for key code dot return so when we stop pressing the key we want to stop rewind now let's create these two methods that's first off create void start rewind and in here we want to set its rewinding equal to true and in our other method which is going to be called stop rewind we'll set its rewinding equal to false if you want you can go ahead and make these two methods public this way we can access them from other scripts and this is going to allow us to rewind each individual object through another script we could for example create a line gun that would rewind the time for any object hit with it we would simply go ahead and make these two public it's probably also a good idea to go and make this variable private but for now we want to see it in the inspector so now when we save this and hit into unity we should see that each and every one of our cubes has the time body script and that when we play and hold down enter it's going to be marked as true and when we then again release it shifts back to false now in order to actually rewind the position and rotation of an object we first have to keep track of it in other words we have to record some information to do that we'll use a list remember that whenever we use lists we have to make sure that the system that collections that generic namespace is included at the top so let's begin simple let's keep track of only our objects position to do that we create a list that is going to store vector threes for positional data and we can go ahead and call it positions at the start of our game will then set positions equal to a new list of vector threes so by default there is nothing in our list while we're not rewinding we want to add new elements to it this list is going to store the object's position over time meaning that each element in the list is going to be the position at a given point in time we refer to these points in time as frames but instead of updating it every single frame we can instead updated every physics iteration that means that instead of adding new elements inside of update we'll add it inside of fixed update this is better because fixed update most often will run slower than update and also on a fixed timer so we won't get any issues with playback speed let's go in here and write void fixed update in here we want to check if we are currently rewinding if we are we want to go ahead and do the logic related to rewinding and so we can call some kind of method called say rewind and if we're not we want to record some information so let's go ahead and make another method for that called record will create a rewrite method in a second let's create a method called record and in here we want to go ahead and add new elements to our list to do that we go positions dot add now this adds an element to the end of the list that means that in the beginning of our list we'll have the oldest positions at the end we'll have the newest ones you can definitely do it this way but I like doing it the opposite way we're the newest positions are those at index zero because I'd like to think of it kind of like stacking positions on top of each other where the newest place item is always going to be at the top and so instead of using add to add it to the end of the list let's use insert and the index that we want to insert at is zero which means at the very start the item that we want to insert it's our composition which is of course transform dot position so now each fistic iteration we are calling the record method and our record method make sure to insert a log of our position at the current time so now we're ready to create the rewind method all we need to do each physically duration is read the next element in the list let's go ahead and create that method here we want to set our current position meaning transform drop position equal to the first element in our list which is our positions list of index 0 and then after getting that position we want to remove that element and so we'll go positions dot remove add and we want to remove at index 0 so if we now save this and hit enter unity you should get no errors and when we now play shoot and then hold down return we see all of our objects returning to their previous positions however there are few problems the first one is of course we're not keeping track of the object's rotation and so will things look a bit weird the second one is that while we're rewinding unity still trying to apply physics on top and so it's probably better that we set our rigidbody as kinematic while rewinding and the final thing is that when we reach the end of our list we get an argument out of range exception because we've gone through all of our positional data let's start by fixing the error what we need to do here is simply add an if statement if and we want to check if there are more elements in our list so we'll check if positions dot count is greater than zero if it is well then we can go ahead and continue rewinding however if it is not well then we want to stop rewinding immediately that should get rid of that error force so let's just try hitting play shooting and winding back time and we should see no more errors let's also make sure to set a rigid body as kinematic while rewinding to do that we need a red two rigid bodies so let's go ahead and create a rigid body call it OB and inside of our start method we'll set our be equal to get component of type rigid body of course if your object doesn't have a rigid body you can simply skip this step we can then go to where we start and stop rewinding when we start we want to set our P that is kinematic equal to true and when we stop we want to set our be that is kinematic to false now if we watch our rigid body to the right here we can see that when I hold down enter it is true and when I let go it's false finally we can start keeping track of rotation as well to do that we could go in here and add another list fall of our rotations however I think a better way is have one list store objects that keep track of both position and rotation let's go ahead and create such a class to do that we're going to unity we right click in the project panel hit create csharp script and now this class is going to store it to values our position and our rotation let's call it point in time now let's double click on point in time and let's modify this a bit first of all we don't need to be using any of the system stuff we don't need this to derive from monobehaviour and we don't need any methods instead what we need is a public vector three storing our position and a public quaternion storing our rotation we then create a constructor for this class that makes it easier to set these values when they gave public point in time this is going to take in a victor three let's write underscore position so that we can distinguish this from the position up here and a rotation let's write Kryptonian underscore rotation now in this constructor that set position equal to underscore position and rotation equal to underscore rotation now when we save this and go into our time body script instead of storing a list of vector threes let's store a list of points in time of course make sure to change the type down here as well and let's rename the variables from positions to points in time by the way to do quick refractory in visual studio I hold down control and press R twice it's a pretty handy shortcut now if we scroll down to a rewind mess we can set up position equal to this point in time directly so let's instead get our first point in time and store it in a temporary variable the variable is of course going to be of type point in time and it's call it point in time with a non capital P it's going to be equal to the first element in our list then we can set our position equal to that point in time dub position and our rotation equal to that point in time dot notation we have the same issue when recording we can't record our position directly instead we have to go in here and create a new point in time and we want to feed it first our position transform dot position and then our rotation transform dot rotation and by the way this is also why we created a constructor the constructor allows us to simply insert our position and our rotation was creating the object otherwise we would have to create it in a temporary variable and then change each value one by one so now if we save this and head into unity we should see that our objects will keep track of both position and rotation and so our rewind starts to look really smooth awesome of course you want to be careful that we don't try and keep track of too many point in time currently I have about 50 cubes in my scene and each of them now have a list where every single physics iteration which normally sits around fifty times a second a new point in time gets recorded that means in one second will already have recorded about 2500 values let's in one second and so you can imagine that if you leave this for say a minute this value quickly becomes ridiculous so what we probably want to do is put a limit on how far back in time we can go now most games have this as a gameplay thing you can't win back time more than five seconds but you can see now that there's also a very practical reason why so let's now go into visual studio and try and add this and the best way we can do this is by keeping track of how many values are currently in a point in time list so inside of our record method we can check if points in time dot count is greater than some value now normally fixedupdate will run fifty times a second and so if we insert 50 here we check if more than one second has gone by and so if you want to check for five seconds we'll insert two on and fifty but of course your fixedupdate might run on a different timer and sometimes we even have to adjust this during a game so what one stud do is going here and make a quick calculation first we can use time dot fix Delta time to get the time between each fixed object call and so one divided by that it's going to be the amount of time so fixed update runs a second so normally this is going to say 1 divided by 0.02 which is going to equal 50 of course we can now multiply this number if you want to record for more than one second we could for example simply multiply this with five so now if this value here is 50 this is going to multiply with five and so this side is going to say 250 now some of you might notice that this can be written either by simply multiplying this number into this number and so we can actually simply write 5 divided by fixed at a time however this is currently a floating point number and so we need to convert this into an integer because the number of points in time we have is an integer value and so let's write mass dot round this is going to round the float that we insert to the nearest integer we want to insert the result of our calculation so if you got confused along the way here's what we're doing we're checking if you have more points in time that we would get during 5 seconds and if we do well then more than 5 seconds have elapsed that means that we need to start over writing and so inside these brackets would then start removing from our list so that's called points in time dot remove add and the index that we want to remove at is the bottom of a list because remember our oldest entries are at the bottom and so to remove from the bottom of a list will go point in time count minus 1 so now during the first 5 seconds of our record will simply add new elements to a point in time and when we get past 2 5 seconds we'll start removing from the bottom of our list and adding to the top so when we now save this and head into unity and hit play we can play around with these red cubes for about five seconds and when we then start rewinding we should see that after 5 seconds of rewind stops because our system has no information about what happened before of course you can tweak this value in any way you want I'm just going to make it into a variable at the top so you can do that easily let's make it a public float called record time and then fold it to five seconds it's then put record time down here and finally at the top that's also turn or rewinding into a private variable so we can't edit it through the inspector from here I just encourage you to have fun with the rewind system there's lots of stuff you can do with this lets pretty much it for this video if you enjoyed it make sure to subscribe to the Dome it's a future one also if you're interested in more time related stuff check out my video on creating a bullet time effect on that thanks for watching and I will see you in the next video thanks to of the awesome patreon supporters who donated in May and a special thanks to Derek huge jerk face of Mara Phi stoned gamer gmvi feinstone 38 Thomas Roy Lee James Calhoun cyborg Romney and Jason the teeter if you want to become a picture in yourself you can do so at patreon.com slash brekkie
