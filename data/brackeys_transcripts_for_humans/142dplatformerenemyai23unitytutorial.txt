With timestamps:

00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome back to enemy AI
00:06 - inside of unity this is part two or Part
00:09 - B I haven't decided yet in the 2d
00:12 - platformer course under AI and today we
00:16 - are going to be using the navigation
00:19 - mesh that we set up in the last video to
00:22 - get something moving inside our first
00:25 - scene so as you can see I'm here back in
00:28 - unity and I've I have my a star path
00:33 - finding object right here where we set
00:35 - up a great graph that looks like this
00:38 - but this graph is pretty boring if we
00:41 - have nothing that can actually move
00:43 - inside it so this video here is gonna be
00:47 - pretty scripting heavy so if you have a
00:50 - hard time following along I just want to
00:52 - skip ahead what you can do is you can
00:55 - simply download the 2d assets pack
00:59 - available at brackish comm to get the
01:01 - final script we have sprites and scripts
01:04 - and audio and GUI elements and all kinds
01:06 - of cool stuff inside of this pack cool
01:10 - so let's get started with the video so
01:12 - what we're going to do here is we're
01:14 - going to go under the 2d assets pack
01:16 - then under sprites on the 2d platformer
01:19 - and we're going to import my symbol
01:21 - agent spaceship here the reason why
01:23 - there's so much empty space is because
01:26 - I've made some room if we want to say
01:28 - make variations inside of the same
01:31 - sprite sheet or if we wanted to make
01:33 - animations now let's drag this inside of
01:36 - unity and let's set it up so we're gonna
01:39 - set the sprite mode to multiple we're
01:42 - going to change the pixels per unit to
01:45 - let's try 10 and the filter mode we're
01:48 - gonna set to point now go into the
01:51 - sprite editor and we're gonna simply
01:53 - slice automatically here and it's gonna
01:57 - slice it up pretty fine now we can hit
01:59 - apply and we can exit out of the sprite
02:02 - editor and it should have applied our
02:04 - import settings by now if not hit apply
02:07 - cool now we can open this up and we can
02:11 - see that we have
02:13 - enemy which can simply be dragged into
02:15 - the scene so I'm gonna head back into 2d
02:17 - mode zoom in a bit and drag him in here
02:21 - I think his size is pretty fine maybe a
02:25 - bit too large for our current needs this
02:28 - is gonna be a pretty small enemy I think
02:30 - we can maybe compare his size to our
02:32 - players so if we go under sprites and
02:36 - select the astronaut sprite sheet there
02:39 - those pixels per unit are set to 18 so I
02:43 - think I'm gonna set try at least setting
02:46 - the enemy to the same here mmm that's
02:50 - too small I think we're gonna do
02:52 - something like 13 and we're gonna leave
02:54 - it at that for now then I'm also going
02:56 - to drag this alien spaceship under the
02:59 - sprites folder come so our alien
03:03 - spaceship we are simply gonna name this
03:05 - rename this without the underscore oh
03:09 - and what we are going to do is a hit add
03:14 - component and we are going to add a
03:17 - nother pipe pathfinding script this is
03:21 - also included with the a-star
03:23 - pathfinding project so again you will
03:26 - need a star so if you haven't watched
03:29 - the previous video you should go ahead
03:30 - and do that now
03:31 - so go into pathfinding and we're gonna
03:34 - find this seeker any AI you do inside of
03:37 - a star path finding it's going to need
03:40 - the secret component attached to it but
03:43 - we're not going to be messing around
03:45 - with any settings so we can simply
03:47 - collapse this then let's hit add
03:50 - component and we're going to add a
03:53 - rigidbody 2d there are many ways of
03:55 - actually moving your character I mean a
03:58 - star takes care of all of the path
04:02 - finding in that it's going to know where
04:04 - you want your character to move but it's
04:07 - not going to actually move your
04:08 - character so a simple way to do that is
04:11 - using the rigidbody2d component provided
04:14 - by unity you could also use some kind of
04:17 - custom made character controller or
04:19 - maybe find a plucking on the asset store
04:21 - but a symbol and pretty nice way is
04:24 - using the input building
04:26 - physics so let's hit the rigidbody2d add
04:29 - component and the mass we are going to
04:32 - leave at 1 and we're gonna mess around
04:34 - with a few of the other settings later
04:37 - but first off I just want to set the
04:39 - gravity scale to zero so he doesn't fall
04:41 - down as soon as we try playtesting now
04:45 - let's hit add component let's create a
04:47 - new script let's call this enemy AI you
04:52 - might want to be more specific if you
04:54 - want more enemies but I think I'm just
04:56 - gonna create this huge master script
04:58 - that does it all basically so let's hit
05:01 - create an ad and this guy here is gonna
05:05 - be relatively simple to start out with
05:07 - he's simply going to be kind of behaving
05:10 - like a zombie would in that he will just
05:13 - find the nearest path to us and then
05:16 - just fly over there and that's it and
05:18 - when he reaches our destination we might
05:23 - make him stop at some point I don't know
05:26 - how much time we're going to have in
05:28 - this tutorial so we'll see about that
05:30 - but we're definitely going to make him
05:33 - follow us
05:34 - so let's double-click this enemy AI and
05:38 - then maybe we can make him shoot and all
05:41 - that stuff later and I'm just going to
05:44 - zoom in here and what we want to do is
05:47 - get rid of this using system data
05:49 - collection that is pretty rarely used
05:51 - actually I hate the fact that it it
05:54 - imports it automatically and instead
05:57 - we're gonna say using pathfinding and
06:01 - this basically is the link between our
06:05 - script right here and the a-star
06:09 - pathfinding projects AI engine so this
06:13 - right here will import a start path
06:15 - finding the namespace into our project
06:18 - so we can access the classes that we
06:21 - need in order to create nice path
06:24 - winding then we're going to delete the
06:26 - Istana methods and we're going to start
06:29 - out by requiring some components just to
06:33 - make sure that we don't add this to a
06:35 - game object that doesn't have a
06:37 - rigidbody and a seek
06:39 - so we're gonna type required component
06:42 - type of rigidbody2d and we can simply
06:49 - duplicate this down here and stuff
06:52 - rigidbody2d we are going to write seeker
06:56 - then inside of the monobehaviour class
06:59 - we are going to write or the enemy AI
07:02 - class we are going to write public
07:05 - transform we want this to show up in the
07:08 - inspector so we can assign it and we're
07:10 - gonna call this target then next up we
07:14 - are going to have a public float which
07:18 - we are going to call update delay and
07:22 - we're gonna T for this to about 1
07:25 - actually let's just call this update
07:27 - rate and we're gonna set this to maybe 2
07:30 - times a second that's better
07:32 - I like the rate better than the delay
07:34 - that just confuses people that you have
07:36 - to do smaller values to get it high and
07:39 - all that was simply gonna divide this
07:42 - number never mind that we're gonna
07:45 - continue we're gonna need two private
07:47 - variables the first one is going to be
07:49 - our seeker which we are going to
07:51 - reference um we're simply gonna call
07:53 - that Seager and the other one is going
07:55 - to be our 2d rigidbody so recently gonna
07:57 - call that RB it's pretty common in the
07:59 - forums to call it our B so I'm gonna
08:01 - stick to that naming convention then we
08:04 - are going to store a reference to the
08:06 - cat or a store the calculated path
08:13 - public path path and also we are going
08:19 - to have the a ice speed and this is
08:25 - going to be per second so it's not
08:29 - framerate dependent and it's going to be
08:32 - a public float and we're gonna call it
08:35 - speed and we are going to fold it to
08:36 - maybe 300 then we're gonna have a public
08:41 - forced mode to D and we're simply kind
08:45 - of called this if mode and basically
08:48 - basically what a force mode is is it's
08:51 - just a way to change
08:53 - force and impulse so it's just a way to
08:57 - control the way the force is applied to
09:00 - our rigid body and it just gives up some
09:04 - control in the editor as to how we want
09:06 - our enemy to behave so it's it's a very
09:10 - simple enum that we can just change
09:13 - between in the inspector then next up
09:17 - you're gonna want a private pool and
09:19 - that is going to tell us whether or not
09:22 - a path ascended and actually I want this
09:25 - to be public because then we can access
09:27 - it later if we want like to see if our
09:30 - if our AI is moving or if it's currently
09:35 - searching for something and we're gonna
09:38 - set it to false but I don't want it to
09:41 - show up in the inspector oops
09:44 - public boom so right before I'm gonna do
09:49 - these square brackets and inside of
09:51 - those I'm gonna type hide in inspecting
09:54 - that will make sure that it's public but
09:56 - it won't show up in the inspector pretty
09:59 - cool
10:00 - next up is our max distance from the AI
10:04 - to a waypoint
10:05 - foot to continue to the next Waypoint so
10:09 - we're gonna call this we're gonna store
10:12 - it in a public float and we're going to
10:13 - call it next Waypoint distance we're
10:19 - gonna set it to equal to three so this
10:22 - is basically how close do we need to get
10:25 - to a waypoint before it says okay we've
10:27 - reached that point and it can continue
10:30 - on so the max distance from the AI to a
10:37 - waypoint for it to continue to the next
10:44 - Waypoint cool I'm simply gonna do
10:49 - caching up here and this is going to be
10:56 - how many times a second each second we
11:03 - will update our path
11:07 - we simply want to do this a limited
11:09 - number of times just so we don't clutter
11:11 - the computer unnecessarily and this is
11:14 - of course gonna be what to chase and
11:18 - we're almost done with creating
11:20 - variables here I know it's quite a lot
11:22 - and it it probably looks scary but but
11:28 - it really is and I will walk slowly
11:30 - through this and hopefully you will
11:33 - follow along if not it's completely
11:35 - understandable ai is something that
11:39 - frightens many developers and frankly
11:42 - it's it's it's a job that has tried to
11:45 - be made intuitive over the years and I
11:48 - think that now we've reached the point
11:50 - where there are many good solutions to
11:52 - AI but it's still it's still it's still
11:56 - a whole category that you have to get in
11:58 - the mindset of and this Waypoint thing
12:01 - and path finding and OneNote connects to
12:04 - the other and all that so please bear
12:06 - with me here it might be confusing in
12:08 - the beginning so I think we're just
12:11 - gonna skip the rest of the variables and
12:13 - then expand onto this later this is
12:15 - basically the core of what we're gonna
12:17 - need and this should be work really
12:20 - nicely so what we want to do here is
12:23 - create a start method so let's type void
12:25 - start and inside of this myth method we
12:30 - are going to first off assign our seeker
12:32 - so we're simply gonna say seeker equals
12:35 - get component type seeker and then we
12:39 - will assign our rigidbody so our B
12:41 - equals get component of type rigidbody
12:45 - 2d oops capital R there or it's gonna
12:50 - try and access our local rigidbody but
12:53 - you don't want then we're gonna check if
12:56 - our target is equal to null so if we
12:59 - haven't assigned a target I think we're
13:04 - simply gonna add debug that lock we can
13:09 - input some kind of target searching here
13:12 - and we are going to do that later so if
13:15 - we doesn't don't have a target we're
13:17 - gonna search for one but for now we
13:19 - assembly can
13:20 - make it spit out an errand and the world
13:23 - would burn so we're gonna say no player
13:26 - found panic and then we're going to
13:32 - return there and down here then we can
13:38 - use our target and we're going to say
13:42 - that seeker we are going to access the
13:47 - stat path method and this is part of the
13:50 - a-star project and this is going to take
13:55 - a few parameters first off is the our
13:59 - current current position which is
14:01 - transform dot position that's our start
14:06 - point and then we're gonna put in our
14:08 - target position which is target that
14:11 - position and then we are going to put in
14:15 - on path complete and what this will do
14:22 - here I'm gonna write it out as a comment
14:24 - is start a new path to the target
14:30 - position and return the result to the on
14:38 - path complete function method gonna call
14:43 - it a method and this might be weird the
14:47 - fact that we are inputting a function as
14:50 - an argument and I get why but it's
14:55 - actually very very useful in this case
14:58 - so I'm gonna write some more here write
15:01 - some more I'm not done with this method
15:03 - I'm just gonna remind myself and then
15:06 - I'm quickly gonna show you what we can
15:08 - do with this so what we can do is we can
15:10 - make a function here which is going to
15:14 - be public I think we're gonna of type
15:17 - void and we are going to call it on path
15:21 - complete we could have called it
15:22 - anything we liked as long as we changed
15:25 - it up here also and as an argument we're
15:28 - gonna take path I mean it's certainly
15:30 - gonna short this with P
15:32 - and this is pretty much the hardest part
15:35 - of this inside of this we are simply
15:38 - going to maybe debunk that lay lock
15:43 - we got a path did it have an arrow and
15:54 - then we can put in P dot error then down
16:02 - here we can say if we didn't have an
16:04 - arrow so if not P dot error it's just a
16:09 - bool then we can
16:12 - oops then we can say that path equals P
16:16 - and we can set our current waypoint to
16:23 - zero
16:24 - whoops Hammond I created the current
16:26 - weight point variable oops nope I
16:29 - skipped one
16:30 - so here private this is going to be
16:35 - private int oh yes int current Waypoint
16:42 - excuse me yeah I just confused myself
16:44 - way too much this is was not necessary
16:47 - but I'll explain in a sec so Ambria the
16:51 - description for this is simply the
16:54 - Waypoint we are currently moving towards
17:01 - and this is referenced with an index
17:06 - that's why it's an integer so um sorry
17:09 - here okay so what we are doing here is
17:11 - we are saying that it should start a
17:13 - path and it should start it from our
17:17 - current position to the target position
17:19 - and when it's done creating this path
17:26 - it's going to call the on path complete
17:28 - function this is down here it's going to
17:31 - put in the path that it's just made then
17:35 - we check and write out a large saying if
17:38 - it had an error so this P dot error is
17:41 - basically just a way to check if our
17:43 - path was successful
17:45 - and if it didn't have an arrow so if it
17:48 - it found the correct path we're gonna
17:51 - set our current path to the path that it
17:53 - found so we can simply update our
17:56 - calculated path up here
17:58 - and we are going to set the way our
18:01 - current Waypoint to zero so the Waypoint
18:05 - that we will start at on this path is
18:08 - simply going to be zero so that we don't
18:10 - start on the mid in the middle of the
18:12 - path or at the end if that makes any
18:15 - sense
18:16 - awesome if not bear with me
18:19 - we'll continue here
18:28 - you

Cleaned transcript:

thanks for tuning in at brakus hello everyone and welcome back to enemy AI inside of unity this is part two or Part B I haven't decided yet in the 2d platformer course under AI and today we are going to be using the navigation mesh that we set up in the last video to get something moving inside our first scene so as you can see I'm here back in unity and I've I have my a star path finding object right here where we set up a great graph that looks like this but this graph is pretty boring if we have nothing that can actually move inside it so this video here is gonna be pretty scripting heavy so if you have a hard time following along I just want to skip ahead what you can do is you can simply download the 2d assets pack available at brackish comm to get the final script we have sprites and scripts and audio and GUI elements and all kinds of cool stuff inside of this pack cool so let's get started with the video so what we're going to do here is we're going to go under the 2d assets pack then under sprites on the 2d platformer and we're going to import my symbol agent spaceship here the reason why there's so much empty space is because I've made some room if we want to say make variations inside of the same sprite sheet or if we wanted to make animations now let's drag this inside of unity and let's set it up so we're gonna set the sprite mode to multiple we're going to change the pixels per unit to let's try 10 and the filter mode we're gonna set to point now go into the sprite editor and we're gonna simply slice automatically here and it's gonna slice it up pretty fine now we can hit apply and we can exit out of the sprite editor and it should have applied our import settings by now if not hit apply cool now we can open this up and we can see that we have enemy which can simply be dragged into the scene so I'm gonna head back into 2d mode zoom in a bit and drag him in here I think his size is pretty fine maybe a bit too large for our current needs this is gonna be a pretty small enemy I think we can maybe compare his size to our players so if we go under sprites and select the astronaut sprite sheet there those pixels per unit are set to 18 so I think I'm gonna set try at least setting the enemy to the same here mmm that's too small I think we're gonna do something like 13 and we're gonna leave it at that for now then I'm also going to drag this alien spaceship under the sprites folder come so our alien spaceship we are simply gonna name this rename this without the underscore oh and what we are going to do is a hit add component and we are going to add a nother pipe pathfinding script this is also included with the astar pathfinding project so again you will need a star so if you haven't watched the previous video you should go ahead and do that now so go into pathfinding and we're gonna find this seeker any AI you do inside of a star path finding it's going to need the secret component attached to it but we're not going to be messing around with any settings so we can simply collapse this then let's hit add component and we're going to add a rigidbody 2d there are many ways of actually moving your character I mean a star takes care of all of the path finding in that it's going to know where you want your character to move but it's not going to actually move your character so a simple way to do that is using the rigidbody2d component provided by unity you could also use some kind of custom made character controller or maybe find a plucking on the asset store but a symbol and pretty nice way is using the input building physics so let's hit the rigidbody2d add component and the mass we are going to leave at 1 and we're gonna mess around with a few of the other settings later but first off I just want to set the gravity scale to zero so he doesn't fall down as soon as we try playtesting now let's hit add component let's create a new script let's call this enemy AI you might want to be more specific if you want more enemies but I think I'm just gonna create this huge master script that does it all basically so let's hit create an ad and this guy here is gonna be relatively simple to start out with he's simply going to be kind of behaving like a zombie would in that he will just find the nearest path to us and then just fly over there and that's it and when he reaches our destination we might make him stop at some point I don't know how much time we're going to have in this tutorial so we'll see about that but we're definitely going to make him follow us so let's doubleclick this enemy AI and then maybe we can make him shoot and all that stuff later and I'm just going to zoom in here and what we want to do is get rid of this using system data collection that is pretty rarely used actually I hate the fact that it it imports it automatically and instead we're gonna say using pathfinding and this basically is the link between our script right here and the astar pathfinding projects AI engine so this right here will import a start path finding the namespace into our project so we can access the classes that we need in order to create nice path winding then we're going to delete the Istana methods and we're going to start out by requiring some components just to make sure that we don't add this to a game object that doesn't have a rigidbody and a seek so we're gonna type required component type of rigidbody2d and we can simply duplicate this down here and stuff rigidbody2d we are going to write seeker then inside of the monobehaviour class we are going to write or the enemy AI class we are going to write public transform we want this to show up in the inspector so we can assign it and we're gonna call this target then next up we are going to have a public float which we are going to call update delay and we're gonna T for this to about 1 actually let's just call this update rate and we're gonna set this to maybe 2 times a second that's better I like the rate better than the delay that just confuses people that you have to do smaller values to get it high and all that was simply gonna divide this number never mind that we're gonna continue we're gonna need two private variables the first one is going to be our seeker which we are going to reference um we're simply gonna call that Seager and the other one is going to be our 2d rigidbody so recently gonna call that RB it's pretty common in the forums to call it our B so I'm gonna stick to that naming convention then we are going to store a reference to the cat or a store the calculated path public path path and also we are going to have the a ice speed and this is going to be per second so it's not framerate dependent and it's going to be a public float and we're gonna call it speed and we are going to fold it to maybe 300 then we're gonna have a public forced mode to D and we're simply kind of called this if mode and basically basically what a force mode is is it's just a way to change force and impulse so it's just a way to control the way the force is applied to our rigid body and it just gives up some control in the editor as to how we want our enemy to behave so it's it's a very simple enum that we can just change between in the inspector then next up you're gonna want a private pool and that is going to tell us whether or not a path ascended and actually I want this to be public because then we can access it later if we want like to see if our if our AI is moving or if it's currently searching for something and we're gonna set it to false but I don't want it to show up in the inspector oops public boom so right before I'm gonna do these square brackets and inside of those I'm gonna type hide in inspecting that will make sure that it's public but it won't show up in the inspector pretty cool next up is our max distance from the AI to a waypoint foot to continue to the next Waypoint so we're gonna call this we're gonna store it in a public float and we're going to call it next Waypoint distance we're gonna set it to equal to three so this is basically how close do we need to get to a waypoint before it says okay we've reached that point and it can continue on so the max distance from the AI to a waypoint for it to continue to the next Waypoint cool I'm simply gonna do caching up here and this is going to be how many times a second each second we will update our path we simply want to do this a limited number of times just so we don't clutter the computer unnecessarily and this is of course gonna be what to chase and we're almost done with creating variables here I know it's quite a lot and it it probably looks scary but but it really is and I will walk slowly through this and hopefully you will follow along if not it's completely understandable ai is something that frightens many developers and frankly it's it's it's a job that has tried to be made intuitive over the years and I think that now we've reached the point where there are many good solutions to AI but it's still it's still it's still a whole category that you have to get in the mindset of and this Waypoint thing and path finding and OneNote connects to the other and all that so please bear with me here it might be confusing in the beginning so I think we're just gonna skip the rest of the variables and then expand onto this later this is basically the core of what we're gonna need and this should be work really nicely so what we want to do here is create a start method so let's type void start and inside of this myth method we are going to first off assign our seeker so we're simply gonna say seeker equals get component type seeker and then we will assign our rigidbody so our B equals get component of type rigidbody 2d oops capital R there or it's gonna try and access our local rigidbody but you don't want then we're gonna check if our target is equal to null so if we haven't assigned a target I think we're simply gonna add debug that lock we can input some kind of target searching here and we are going to do that later so if we doesn't don't have a target we're gonna search for one but for now we assembly can make it spit out an errand and the world would burn so we're gonna say no player found panic and then we're going to return there and down here then we can use our target and we're going to say that seeker we are going to access the stat path method and this is part of the astar project and this is going to take a few parameters first off is the our current current position which is transform dot position that's our start point and then we're gonna put in our target position which is target that position and then we are going to put in on path complete and what this will do here I'm gonna write it out as a comment is start a new path to the target position and return the result to the on path complete function method gonna call it a method and this might be weird the fact that we are inputting a function as an argument and I get why but it's actually very very useful in this case so I'm gonna write some more here write some more I'm not done with this method I'm just gonna remind myself and then I'm quickly gonna show you what we can do with this so what we can do is we can make a function here which is going to be public I think we're gonna of type void and we are going to call it on path complete we could have called it anything we liked as long as we changed it up here also and as an argument we're gonna take path I mean it's certainly gonna short this with P and this is pretty much the hardest part of this inside of this we are simply going to maybe debunk that lay lock we got a path did it have an arrow and then we can put in P dot error then down here we can say if we didn't have an arrow so if not P dot error it's just a bool then we can oops then we can say that path equals P and we can set our current waypoint to zero whoops Hammond I created the current weight point variable oops nope I skipped one so here private this is going to be private int oh yes int current Waypoint excuse me yeah I just confused myself way too much this is was not necessary but I'll explain in a sec so Ambria the description for this is simply the Waypoint we are currently moving towards and this is referenced with an index that's why it's an integer so um sorry here okay so what we are doing here is we are saying that it should start a path and it should start it from our current position to the target position and when it's done creating this path it's going to call the on path complete function this is down here it's going to put in the path that it's just made then we check and write out a large saying if it had an error so this P dot error is basically just a way to check if our path was successful and if it didn't have an arrow so if it it found the correct path we're gonna set our current path to the path that it found so we can simply update our calculated path up here and we are going to set the way our current Waypoint to zero so the Waypoint that we will start at on this path is simply going to be zero so that we don't start on the mid in the middle of the path or at the end if that makes any sense awesome if not bear with me we'll continue here you
