With timestamps:

00:00 - in this video we create something that's
00:01 - been missing for a long time that is of
00:02 - course a way to complete a level we'll
00:04 - have a look at triggers UI loading the
00:06 - next level in the queue and the most fun
00:08 - part animation let's go let's begin by
00:10 - creating a trigger that will place at
00:11 - the end of our level let's go to the
00:13 - high key right click go 3D object and
00:15 - then Cube It's also switch to 3D mode
00:18 - here reset the transform on the cube hit
00:20 - F to focus on it let's set the x scale
00:22 - to 15 the same as our platform let's set
00:25 - the Y to something like five and the Z
00:28 - to something like five as well we'll
00:29 - also drag it up a bit let's set the Y
00:31 - position to three this way it stands on
00:33 - our platform let's switch to Top Mode by
00:35 - clicking the Y AIS and switch to
00:37 - isometric by clicking the center we can
00:39 - now zoom out and drag him to the end of
00:42 - our level let's also rename this to
00:44 - something like end end point and Trigger
00:47 - anything you like and you will notice
00:48 - right now that if we switch back to
00:50 - perspective view we can of course see
00:51 - the trigger and we don't want this to be
00:53 - noticeable in game so let's just go
00:54 - ahead and disable the mesh renderer you
00:56 - can of course remove it completely I
00:57 - just like having it here for easy
00:59 - positioning we of course keep the Box
01:00 - collider but remember to check is
01:02 - trigger and if we go ahead and put a
01:03 - script on this it should actually
01:05 - trigger but in the editor it can be kind
01:07 - of annoying if we can't see our object
01:09 - let's just select our object go up here
01:10 - and select the box and we can actually
01:12 - choose an icon I'm going to select the
01:14 - green label here and now even though our
01:16 - object is invisible we always have this
01:18 - scen label to show where our endpoint is
01:20 - and we can of course click it to select
01:21 - it pretty cool let's now create a script
01:23 - that will communicate with our game
01:24 - manager to let it know that we've
01:26 - reached the end of our level to do that
01:28 - we go add component and we call it
01:30 - something like in trigger let's say
01:32 - create an ad and double click it let's
01:33 - delete our using tags and our two
01:35 - methods now just like we can detect a
01:37 - collision by using void on Collis enter
01:40 - we can detect if something has hit our
01:41 - trigger by using void on trigger enter
01:45 - note that on collision enter will not
01:47 - work if your collider is marked as
01:49 - trigger you need to write on trigger
01:50 - enter instead we then open and close
01:52 - some parentheses and some curly brackets
01:55 - now whenever we hit our trigger we need
01:56 - to tell our game manager to display some
01:58 - UI in the screen to do that we first
02:00 - need a reference to a game manager of
02:02 - course we could use find object of type
02:04 - as shown in the last video but I think
02:06 - here it makes sense to just reference it
02:07 - directly so let's create a new public
02:09 - game manager and call it game manager
02:12 - with a non- capital G we can then go
02:13 - down here and write game manager Dot and
02:16 - now we have the ability to call a
02:18 - function on the game manager of course
02:19 - we haven't really created a function
02:21 - that we want to call yet so now let's go
02:22 - back into unity and open up our game
02:25 - manager script in here we have code for
02:26 - ending the game if we hit something and
02:28 - then restarting it but we also need a
02:30 - function to call if we actually succeed
02:32 - so let's go in here and create another
02:34 - public void again remember the order
02:36 - doesn't matter it could be up here down
02:38 - here and even below the restart method
02:40 - as long as it's not within another
02:42 - method so let's write public void and
02:44 - let's call this one complete level and
02:46 - for now I'm just going to go ahead and
02:47 - throw a debug.log statement saying
02:49 - something like level one let's save that
02:52 - go back into our in trigger script and
02:54 - now we should be able to access that
02:56 - function game manager Dot and then
02:58 - complete level of course we also need to
03:00 - actually make this reference let's find
03:02 - our end object and drag our game manager
03:04 - under the empty slot now if we hit play
03:06 - and actually manage to reach the end of
03:08 - our level you can see that it displays
03:10 - in the console level one this will also
03:12 - display if any other objects collides
03:14 - with our trigger so make sure it doesn't
03:16 - touch anything but our player if you
03:17 - have problems with other objects
03:19 - touching the trigger you can use pretty
03:20 - much the same technique as we did with
03:22 - our player Collis to check what object
03:24 - has collided and only act if it was
03:26 - tagged as player So currently displaying
03:28 - a message in the console is a bit Bor
03:30 - let's instead show some UI to let the
03:31 - user know that he did it let's go into
03:33 - the canvas right click and create a new
03:36 - UI panel let's also switch to 2D mode
03:39 - and hit F to focus on it as you can see
03:40 - a panel is basically just an image that
03:42 - currently fits the entire screen and it
03:44 - will always resize to fit it instead of
03:46 - using the default background Source
03:48 - image I'm actually going to go in here
03:49 - and change it to none this just means
03:51 - that our image will be a blank color I'm
03:53 - going to make it completely white and
03:55 - remove the transparency by bumping up
03:56 - the alpha I'm going to rename it to
03:58 - something like level complete and I'm
04:00 - going to right click on the object go UI
04:03 - and add some text I'm going to scale up
04:04 - the boundaries of our text centered on
04:07 - both the X and Y and change the font to
04:09 - something robotto let's choose Roboto
04:11 - thin let's bump up the font size to
04:13 - something like 100 and let's change the
04:15 - text to level I'm also going to change
04:17 - the name of the object to level and then
04:20 - duplicate it and this one is going to be
04:21 - named complete let's also change the
04:24 - text to complete I'm doing this in
04:26 - capital to increase the dramatic effect
04:28 - let's change the font here to robotto
04:31 - bold drag it down and I'm holding down
04:33 - shift to only drag it on one axis let's
04:35 - bump down the font size to something
04:37 - like 53 and I'm just going to put them a
04:40 - bit closer together select both of the
04:42 - objects and drag them up a bit as well
04:44 - very simplistic but I think it looks
04:45 - pretty good and this will of course also
04:47 - scale with our screen also I want to
04:49 - take this text object that displays our
04:51 - score and just rename it to score it's
04:53 - good to stay organized finally let's
04:55 - take our level complete and disable it
04:57 - this way we don't start with level
04:58 - complete on the screen let's now take
05:00 - our game manager and add a bit of code
05:02 - first off we need a reference to our UI
05:04 - so that we can enable it when we
05:05 - complete the level to do that we create
05:07 - a public game object and we call it
05:09 - something like complete level UI then
05:12 - under our complete level function we
05:14 - write complete level UI Dot and then set
05:17 - active and in here we can write false if
05:19 - we want to disable it or true if we want
05:21 - to enable it and of course we want to
05:23 - enable it so we write true let's save
05:25 - that go into Unity reference our UI
05:28 - notice that I can create a reference
05:30 - even though the object is disabled let's
05:31 - try and hit play and we should now see
05:33 - that once we reach our trigger the UI
05:35 - will display it's not currently animated
05:37 - in any way so it looks a bit boring but
05:39 - at least it works so let's go ahead and
05:41 - create an animation to do that we find
05:43 - our level complete and we enable it so
05:45 - we can see what we're doing we also need
05:46 - the animation window so let's go window
05:48 - animation make sure you choose animation
05:51 - and not anime door there's the
05:52 - difference there the animation window as
05:54 - you can see here has a timeline and
05:56 - allows you to animate different
05:57 - properties on any object in unity the
05:59 - anime is responsible for playing
06:02 - animations and transitioning from one
06:03 - animation to another because we only
06:05 - need a single animation here we don't
06:07 - need to focus on the animator but on the
06:09 - animation let's go to the animation
06:10 - window here let's hit create let's
06:12 - create a separate folder because
06:13 - animations quickly stack up let's call
06:16 - this folder animation and under this
06:17 - let's create a new animation called
06:19 - level complete notice if we go to the
06:21 - project panel there's now a animation
06:23 - folder and inside are two assets the
06:26 - first one is the animation itself we
06:27 - need to disable looping because we only
06:29 - want the animation to happen once the
06:31 - second one is the animation controller
06:33 - and this is what we edit in the animator
06:34 - notice how I can drag this animation
06:36 - into the animator and how we can make
06:38 - transitions from one animation to
06:40 - another now this is of course the same
06:41 - animation so it's not going to do much
06:43 - but imagine we can have a whole network
06:45 - of animations in here to create very
06:47 - complex behaviors I'm just going to undo
06:49 - those now you can see that it's
06:50 - automatically added the level complete
06:52 - animation and made it orange this means
06:53 - that it will play as the first animation
06:55 - that means as soon as our level complete
06:57 - gets enabled so we don't have to trigger
06:59 - it anyway it's just going to play by
07:00 - itself so let's go to the scene view so
07:02 - we can see what we're doing and let's go
07:03 - back to the animation window as well
07:05 - notice how the play buttons are red
07:07 - that's because we are in record mode and
07:09 - now any changes we make to the object
07:10 - are going to be recorded as key frames
07:13 - for example if we go forward about a
07:14 - second go under the color of the image
07:16 - and bump down the alpha we can now see
07:18 - that a key frame is created at the 1
07:20 - second Mark and at the zc Mark in the
07:23 - beginning the alpha is normal and it's
07:24 - then going to start fading out and this
07:26 - is only happening on the background of
07:28 - course we need to reverse the this so
07:29 - we'll take our two key frames and change
07:31 - their precisions we can also make it a
07:33 - bit quicker there we go so now our
07:34 - background fades in and we probably need
07:36 - to do something similar to our two text
07:38 - objects so let's select our level let's
07:40 - maybe go a bit forward and change the
07:42 - alpha to zero let's do the same thing
07:44 - with our complete now again we have to
07:46 - flip these key frames so let's take the
07:48 - bottom two key frames here which is the
07:49 - alpha of our complete and level text
07:52 - move that forward and move these ones
07:54 - back let's have them start fading in a
07:55 - bit later than the background so now if
07:57 - we play this back we can see that it
07:59 - Fates to White and then the text fades
08:01 - in I think that looks pretty cool so now
08:03 - that we're satisfied with that we can go
08:04 - out of record mode and we can once again
08:06 - disable our level complete object and
08:08 - that's it if we now play the game this
08:10 - animation should automatically
08:12 - play awesome now you can do a lot more
08:14 - with the unity animation system the last
08:16 - thing that I'm going to show you here is
08:18 - that if we zoom out and go forward a bit
08:20 - we can actually have things happen
08:21 - through script at a certain point in our
08:23 - animation in our case we want to load
08:25 - the next level after a few seconds so
08:27 - let's go forward towards the 2C mark I'm
08:29 - just going to put it here and add an
08:31 - event now this animation event allows us
08:33 - to select a function you can see how
08:35 - many things are here by default what we
08:37 - want to do is create a small script that
08:39 - sits on the level complete object in
08:40 - order for the event to work it has to
08:42 - sit on the same object that we are
08:43 - animating and the script will just load
08:45 - a new level so let's go here and add a
08:47 - new component this one we called
08:48 - something like level complete we can
08:50 - double click it to open it up in Visual
08:52 - Studio we can clean up as usual and now
08:54 - we can create a public void called
08:56 - something like load Next Level notice
08:59 - how even even though we don't have any
09:00 - more code than this we can now save this
09:02 - and when we go back into unity and
09:04 - select our animation event go on do
09:06 - function and go down a bit at the very
09:08 - bottom we see load Next Level so now
09:11 - whenever we reach this point in our
09:13 - animation it's going to automatically
09:15 - call load next level in our script and
09:17 - now in here we can change the scene of
09:19 - course to do that we need to write using
09:21 - Unity engine do scene management then
09:23 - down here we write scene manager do load
09:25 - scene and then the name of the scene
09:27 - that we want to load but of course the
09:28 - scene that we want to load is going to
09:30 - depend on what level we're currently on
09:32 - we just want to load the next one in the
09:33 - queue so what we do is instead of using
09:36 - the name we use the build index remember
09:38 - if we go into Unity go file and then
09:40 - build settings we can see all of the
09:42 - different scenes that we want to include
09:44 - when we export the game currently we
09:46 - only have one here and that's level one
09:48 - each scene in this list has a build
09:50 - index that's the number to the right so
09:52 - what we can do is simply ask Unity to
09:54 - load the scene with the build index that
09:56 - is equal to our currently loaded scene
09:58 - plus one so in case we on level one
10:00 - which has an index of zero we want to
10:02 - load 0 + 1 which is 1 which is going to
10:05 - equal level two so to do that in Visual
10:07 - Studio we simply write scene manager do
10:10 - get active scene to get the scene that
10:12 - we're currently on and then build index
10:15 - to get the build index of the Senor Curr
10:17 - on and then we write plus one and we
10:19 - close it off and that's actually all we
10:21 - need to do so we can now save this and
10:22 - of course in unity we need to now make
10:24 - sure that there's always another level
10:26 - waiting if we just run out of scenes it
10:28 - is going to create an error so just make
10:30 - sure to create a scene congratulating
10:31 - the player when you speed all the levels
10:33 - I think we'll have a look at doing that
10:35 - in the next video for now we can just go
10:36 - ahead and duplicate our current level so
10:38 - let's save our current scene by hitting
10:39 - crl S command s if you're on the Mac
10:42 - let's then select level one press contrl
10:44 - D to duplicate let's double click on
10:46 - level two and we can now see that level
10:47 - two is open up here and what we can do
10:49 - to make this look a bit different is
10:50 - just delete all of the obstacles except
10:52 - the first one and we can maybe just move
10:54 - this over so if we save this level two
10:56 - looks like this and level one looks like
10:58 - this if if we then drag level two under
11:00 - level one we can see that two build
11:02 - indexes and if we now run level one we
11:05 - should see that when we reach the end of
11:06 - our level it's going to display the UI
11:08 - and then load the next scene and of
11:10 - course if we reach the end of that scene
11:11 - it's going to throw an error because
11:13 - there are no more scenes added to the
11:14 - build settings but we'll fix that don't
11:16 - worry that was pretty much all I had to
11:17 - show for this video renewing the end of
11:19 - the series I still want to dedicate at
11:21 - least one more video to wrap things up
11:22 - and then we can have a look at exporting
11:24 - everything to the platforms that you
11:25 - want the series has been really fun to
11:27 - make so far but I don't want to have too
11:28 - many videos one series instead I want to
11:30 - make more videos with Standalone
11:32 - subjects that can apply to many games
11:33 - that of course also means that I will
11:35 - make lots of more videos that are
11:36 - relevant to this series so don't worry
11:38 - lots more to come of course make sure to
11:40 - subscribe if you aren't already all
11:41 - right thanks guys I'll see you in the
11:43 - next video thanks to all the awesome
11:44 - people who donated in February and a
11:46 - special thanks to Derek hirk facel
11:48 - marifi James cound and Jason litto if
11:51 - you want to become a patron yourself you
11:52 - can do so at

Cleaned transcript:

in this video we create something that's been missing for a long time that is of course a way to complete a level we'll have a look at triggers UI loading the next level in the queue and the most fun part animation let's go let's begin by creating a trigger that will place at the end of our level let's go to the high key right click go 3D object and then Cube It's also switch to 3D mode here reset the transform on the cube hit F to focus on it let's set the x scale to 15 the same as our platform let's set the Y to something like five and the Z to something like five as well we'll also drag it up a bit let's set the Y position to three this way it stands on our platform let's switch to Top Mode by clicking the Y AIS and switch to isometric by clicking the center we can now zoom out and drag him to the end of our level let's also rename this to something like end end point and Trigger anything you like and you will notice right now that if we switch back to perspective view we can of course see the trigger and we don't want this to be noticeable in game so let's just go ahead and disable the mesh renderer you can of course remove it completely I just like having it here for easy positioning we of course keep the Box collider but remember to check is trigger and if we go ahead and put a script on this it should actually trigger but in the editor it can be kind of annoying if we can't see our object let's just select our object go up here and select the box and we can actually choose an icon I'm going to select the green label here and now even though our object is invisible we always have this scen label to show where our endpoint is and we can of course click it to select it pretty cool let's now create a script that will communicate with our game manager to let it know that we've reached the end of our level to do that we go add component and we call it something like in trigger let's say create an ad and double click it let's delete our using tags and our two methods now just like we can detect a collision by using void on Collis enter we can detect if something has hit our trigger by using void on trigger enter note that on collision enter will not work if your collider is marked as trigger you need to write on trigger enter instead we then open and close some parentheses and some curly brackets now whenever we hit our trigger we need to tell our game manager to display some UI in the screen to do that we first need a reference to a game manager of course we could use find object of type as shown in the last video but I think here it makes sense to just reference it directly so let's create a new public game manager and call it game manager with a non capital G we can then go down here and write game manager Dot and now we have the ability to call a function on the game manager of course we haven't really created a function that we want to call yet so now let's go back into unity and open up our game manager script in here we have code for ending the game if we hit something and then restarting it but we also need a function to call if we actually succeed so let's go in here and create another public void again remember the order doesn't matter it could be up here down here and even below the restart method as long as it's not within another method so let's write public void and let's call this one complete level and for now I'm just going to go ahead and throw a debug.log statement saying something like level one let's save that go back into our in trigger script and now we should be able to access that function game manager Dot and then complete level of course we also need to actually make this reference let's find our end object and drag our game manager under the empty slot now if we hit play and actually manage to reach the end of our level you can see that it displays in the console level one this will also display if any other objects collides with our trigger so make sure it doesn't touch anything but our player if you have problems with other objects touching the trigger you can use pretty much the same technique as we did with our player Collis to check what object has collided and only act if it was tagged as player So currently displaying a message in the console is a bit Bor let's instead show some UI to let the user know that he did it let's go into the canvas right click and create a new UI panel let's also switch to 2D mode and hit F to focus on it as you can see a panel is basically just an image that currently fits the entire screen and it will always resize to fit it instead of using the default background Source image I'm actually going to go in here and change it to none this just means that our image will be a blank color I'm going to make it completely white and remove the transparency by bumping up the alpha I'm going to rename it to something like level complete and I'm going to right click on the object go UI and add some text I'm going to scale up the boundaries of our text centered on both the X and Y and change the font to something robotto let's choose Roboto thin let's bump up the font size to something like 100 and let's change the text to level I'm also going to change the name of the object to level and then duplicate it and this one is going to be named complete let's also change the text to complete I'm doing this in capital to increase the dramatic effect let's change the font here to robotto bold drag it down and I'm holding down shift to only drag it on one axis let's bump down the font size to something like 53 and I'm just going to put them a bit closer together select both of the objects and drag them up a bit as well very simplistic but I think it looks pretty good and this will of course also scale with our screen also I want to take this text object that displays our score and just rename it to score it's good to stay organized finally let's take our level complete and disable it this way we don't start with level complete on the screen let's now take our game manager and add a bit of code first off we need a reference to our UI so that we can enable it when we complete the level to do that we create a public game object and we call it something like complete level UI then under our complete level function we write complete level UI Dot and then set active and in here we can write false if we want to disable it or true if we want to enable it and of course we want to enable it so we write true let's save that go into Unity reference our UI notice that I can create a reference even though the object is disabled let's try and hit play and we should now see that once we reach our trigger the UI will display it's not currently animated in any way so it looks a bit boring but at least it works so let's go ahead and create an animation to do that we find our level complete and we enable it so we can see what we're doing we also need the animation window so let's go window animation make sure you choose animation and not anime door there's the difference there the animation window as you can see here has a timeline and allows you to animate different properties on any object in unity the anime is responsible for playing animations and transitioning from one animation to another because we only need a single animation here we don't need to focus on the animator but on the animation let's go to the animation window here let's hit create let's create a separate folder because animations quickly stack up let's call this folder animation and under this let's create a new animation called level complete notice if we go to the project panel there's now a animation folder and inside are two assets the first one is the animation itself we need to disable looping because we only want the animation to happen once the second one is the animation controller and this is what we edit in the animator notice how I can drag this animation into the animator and how we can make transitions from one animation to another now this is of course the same animation so it's not going to do much but imagine we can have a whole network of animations in here to create very complex behaviors I'm just going to undo those now you can see that it's automatically added the level complete animation and made it orange this means that it will play as the first animation that means as soon as our level complete gets enabled so we don't have to trigger it anyway it's just going to play by itself so let's go to the scene view so we can see what we're doing and let's go back to the animation window as well notice how the play buttons are red that's because we are in record mode and now any changes we make to the object are going to be recorded as key frames for example if we go forward about a second go under the color of the image and bump down the alpha we can now see that a key frame is created at the 1 second Mark and at the zc Mark in the beginning the alpha is normal and it's then going to start fading out and this is only happening on the background of course we need to reverse the this so we'll take our two key frames and change their precisions we can also make it a bit quicker there we go so now our background fades in and we probably need to do something similar to our two text objects so let's select our level let's maybe go a bit forward and change the alpha to zero let's do the same thing with our complete now again we have to flip these key frames so let's take the bottom two key frames here which is the alpha of our complete and level text move that forward and move these ones back let's have them start fading in a bit later than the background so now if we play this back we can see that it Fates to White and then the text fades in I think that looks pretty cool so now that we're satisfied with that we can go out of record mode and we can once again disable our level complete object and that's it if we now play the game this animation should automatically play awesome now you can do a lot more with the unity animation system the last thing that I'm going to show you here is that if we zoom out and go forward a bit we can actually have things happen through script at a certain point in our animation in our case we want to load the next level after a few seconds so let's go forward towards the 2C mark I'm just going to put it here and add an event now this animation event allows us to select a function you can see how many things are here by default what we want to do is create a small script that sits on the level complete object in order for the event to work it has to sit on the same object that we are animating and the script will just load a new level so let's go here and add a new component this one we called something like level complete we can double click it to open it up in Visual Studio we can clean up as usual and now we can create a public void called something like load Next Level notice how even even though we don't have any more code than this we can now save this and when we go back into unity and select our animation event go on do function and go down a bit at the very bottom we see load Next Level so now whenever we reach this point in our animation it's going to automatically call load next level in our script and now in here we can change the scene of course to do that we need to write using Unity engine do scene management then down here we write scene manager do load scene and then the name of the scene that we want to load but of course the scene that we want to load is going to depend on what level we're currently on we just want to load the next one in the queue so what we do is instead of using the name we use the build index remember if we go into Unity go file and then build settings we can see all of the different scenes that we want to include when we export the game currently we only have one here and that's level one each scene in this list has a build index that's the number to the right so what we can do is simply ask Unity to load the scene with the build index that is equal to our currently loaded scene plus one so in case we on level one which has an index of zero we want to load 0 + 1 which is 1 which is going to equal level two so to do that in Visual Studio we simply write scene manager do get active scene to get the scene that we're currently on and then build index to get the build index of the Senor Curr on and then we write plus one and we close it off and that's actually all we need to do so we can now save this and of course in unity we need to now make sure that there's always another level waiting if we just run out of scenes it is going to create an error so just make sure to create a scene congratulating the player when you speed all the levels I think we'll have a look at doing that in the next video for now we can just go ahead and duplicate our current level so let's save our current scene by hitting crl S command s if you're on the Mac let's then select level one press contrl D to duplicate let's double click on level two and we can now see that level two is open up here and what we can do to make this look a bit different is just delete all of the obstacles except the first one and we can maybe just move this over so if we save this level two looks like this and level one looks like this if if we then drag level two under level one we can see that two build indexes and if we now run level one we should see that when we reach the end of our level it's going to display the UI and then load the next scene and of course if we reach the end of that scene it's going to throw an error because there are no more scenes added to the build settings but we'll fix that don't worry that was pretty much all I had to show for this video renewing the end of the series I still want to dedicate at least one more video to wrap things up and then we can have a look at exporting everything to the platforms that you want the series has been really fun to make so far but I don't want to have too many videos one series instead I want to make more videos with Standalone subjects that can apply to many games that of course also means that I will make lots of more videos that are relevant to this series so don't worry lots more to come of course make sure to subscribe if you aren't already all right thanks guys I'll see you in the next video thanks to all the awesome people who donated in February and a special thanks to Derek hirk facel marifi James cound and Jason litto if you want to become a patron yourself you can do so at
