With timestamps:

00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to this video on making a
00:06 - multiplayer FPS in unity today we are
00:08 - going to be adding some cool particle
00:10 - systems to our game so in this video
00:12 - we're going to be adding both a death
00:14 - explosion effect and a respawn particle
00:18 - effect we're also going to be changing
00:20 - between the scene and the player camera
00:22 - so it will look super cool when we die
00:25 - we can see the entire map and stuff like
00:27 - that so that's going to look super
00:30 - awesome and be a lot of fun so without
00:32 - further ado let's just jump right into
00:34 - today's video here and now you can see
00:37 - that I'm here in unity and the first
00:39 - thing that I want to take a look at is
00:40 - just how it looks right now when we play
00:43 - the game so if I go under our player and
00:45 - double click or play your script here
00:48 - and I'm just going to say yes to all of
00:53 - this there we go and just remove those
00:56 - two you can see here that we have a
00:58 - piece of code that we've written in an
01:01 - earlier video and that it's commented
01:03 - and I'm just going to uncomment this and
01:05 - you can just write it back in just copy
01:07 - it here if you haven't have deleted this
01:10 - for some reason and this is simply for
01:12 - testing on the respawn mechanic we
01:15 - simply say that if we press the key K
01:19 - for kill we add a bunch of damage to our
01:22 - player so this will just allow us to
01:24 - kill ourselves here commit suicide and
01:27 - when we do we can see what happens so if
01:30 - I hit play now I'm going to land host
01:32 - and hit K you can see that I become
01:35 - unable to move but there's no kind of
01:38 - visual feedback for what's going on and
01:40 - if we have a look in the scene view what
01:42 - happens is basically we just our freeze
01:44 - in place and the physics actually is
01:49 - still applied and nothing really happens
01:52 - so the first thing that we could take a
01:54 - look at doing here is maybe adding in
01:57 - some particles more specifically an
02:00 - explosion effect so if we go under
02:02 - standard assets particle systems and
02:04 - then prefabs and again in order to
02:07 - import this we simply right-click go
02:09 - import package and then particle systems
02:11 - if you don't have this folder
02:13 - then we can take the explosion prefab
02:15 - here and drag that in this is going to
02:17 - act as a base for our cool explosion
02:20 - effect and you will see in a moment what
02:23 - this looks like so if we just drag this
02:25 - up a bit from the ground just to add a Y
02:28 - of one let's try that and try and hit
02:30 - play you will see that this explosion is
02:32 - huge it looks super cool but it's also
02:35 - very large and therefore unity has
02:38 - provided this cool particle system
02:39 - multiplier so we set this to something
02:42 - like point four it should scale the
02:44 - particle system down and it does however
02:47 - the smoke surrounding it still looks
02:50 - super weird so let's try and configure
02:53 - this a bit in order on to have the smoke
02:57 - black not be affected by this particle
02:59 - system multiplayer on multiplier will
03:02 - create a sub object so simply create an
03:05 - empty object here and reset the
03:07 - transform when it's parented under the
03:09 - explosion and let's just call this
03:11 - something like particles it doesn't
03:13 - really matter let's take all the objects
03:15 - here except the smoke black and move
03:18 - them under there and then we're going to
03:20 - break the prefab instance but that's
03:22 - fine with me because we're going to be
03:23 - turning this into a separate prefab in a
03:25 - second anyways then we can take our
03:28 - particle system multiplayer and multi
03:31 - player multiplier and then copy that
03:34 - component and remove it and then paste
03:37 - it as new on the particles object we can
03:41 - do the same with the explosion physics
03:43 - force you can also just go ahead and
03:45 - simply delete that component if you want
03:48 - to this is simply going to add an
03:50 - explosion force so any rigidbody objects
03:52 - nearby will be affected by the explosion
03:55 - we're just going to keep this in for now
03:57 - and then we might change it later so
04:00 - then we have this smoke black here and
04:02 - this is what we want to change and first
04:05 - off we could maybe set the duration a
04:07 - bit shorter something like 0.5 and let's
04:11 - just Center it on this we can also take
04:13 - the shape here because it's currently
04:15 - huge and set that to a radius of 1 and
04:18 - let's try this again it's already much
04:21 - better we can then maybe change the
04:22 - lifetime actually the duration here I
04:26 - wanted that to be
04:27 - yeah point five is going to be fine and
04:29 - then on the lifetime we can set that to
04:32 - something like I know between 0.7 and
04:38 - 1.2 let's try and simulate that that
04:41 - looks much better let's actually do one
04:44 - here
04:44 - I like 1.2 better and the start size
04:50 - here they've said that between 75 and
04:54 - 150 maybe ah maybe 130 it's better so
04:59 - let's try and simulate that and that
05:01 - looks much better so it's now I a much
05:04 - less dramatic effect and it should look
05:07 - much cooler we can also quality the
05:09 - emission here and change the rate to
05:11 - something like 8 just to thin up the
05:13 - smoke a bit and I think that looks super
05:15 - cool so we're just going to stick with
05:18 - that and we can now take this and make
05:20 - it into a new prefab so let's go under
05:22 - our prefabs folder and drag the
05:25 - explosion in there good so we are now
05:28 - ready to code the instantiation of this
05:32 - explosion so let's select our player and
05:35 - go to our player script double click
05:37 - that again and let's first off set up a
05:39 - quick reference to that explosion object
05:43 - so let's do a serialize field private
05:45 - game object and this is going to be the
05:48 - death effect and all we want to do is
05:52 - find the place where we died remember we
05:54 - have this OPC client RPC code take
05:57 - damage and if of course because this is
06:00 - a client IPC it means that it is called
06:02 - on all of the our different clients
06:05 - whenever a game object takes damage and
06:07 - therefore on the die method here is
06:10 - called inside of this will also be
06:12 - executed on all of the clients so that's
06:14 - perfect for spawning in temporary
06:16 - effects because it's going to spawn on
06:18 - each separate clients and it's not going
06:21 - to be handled over the network in any
06:23 - way it's going to be spawned actually
06:25 - locally on the client so that's just
06:28 - fine and what we can do here is maybe
06:31 - just quickly add in some comments so
06:34 - what we do here is we disabled
06:37 - components
06:39 - and we don't want here we disable the
06:44 - collider and here we spawn a death
06:51 - effect and we simply do this by using
06:54 - the instantiate method and what we want
06:57 - to spawn is the we call the death effect
07:00 - and we want to spawn this at our current
07:03 - position so transform that position and
07:05 - the rotation really doesn't matter so
07:08 - we're just going to use quaternion that
07:10 - identity and so we get a zero zero zero
07:12 - rotation and let's just store a quick
07:15 - reference to this so we can delete it
07:17 - after a couple of seconds so we want
07:19 - clutter up the hierarchy so we'll make a
07:22 - temporary game object here called let's
07:25 - just say graphics GFX instance and set
07:29 - that equal to the instantiated object
07:31 - and we need to cast that to the type
07:33 - game object and then down here we can
07:36 - simply say that we want to destroy this
07:39 - our graphics instance after let's say
07:42 - three seconds this way we get give the
07:45 - smoke plenty of time to dissolve good
07:48 - and all we need to do now is simply wait
07:51 - for this lot here to appear and then
07:54 - let's just lock this inspector go on to
07:57 - our prefabs folder and drag the
07:58 - explosion into the death effects lab and
08:01 - we can now unlock that again and let's
08:03 - hit play and see if this is actually
08:04 - working so we can take our scene view
08:07 - and just talk it over there so we can
08:10 - see what's going on in the scene here
08:12 - and we can spawn in and we can move over
08:15 - here and then press K and you can see
08:17 - that a cool explosion now spawns and I
08:20 - think that looks super nice so what we
08:22 - need to do now is actually disable the
08:25 - player graphics so you can see currently
08:28 - under our player we have this disabled
08:30 - undeath array and this will disable and
08:33 - certain the components added to this
08:36 - array when well when we died and what we
08:40 - could do is we could go through all of
08:42 - the different renderers associated with
08:45 - our graphics under the different
08:47 - graphics objects and add them in here
08:50 - but that would be tedium and
08:53 - yeah we don't want to do that so what we
08:56 - do instead is we go up here and then we
08:58 - create a new array and this array is
09:01 - going to disable objects entire game
09:04 - objects instead and this is going to be
09:06 - the disabled game objects I'm death and
09:11 - what we simply want to do here is first
09:15 - off up here in the setup we don't need
09:17 - to do that we also do it here so we can
09:22 - simply copy this for loop and here we
09:25 - want to disable able game objects
09:31 - instead of just components and we can
09:34 - change this to disabled game objects on
09:37 - death and do the same here and instead
09:40 - of using that enable I'm setting that to
09:42 - a boolean we use that set active and
09:44 - then we put in false right here so then
09:47 - we just disable all of that and we can
09:50 - just take this inside entire for loop
09:52 - and duplicate it for down here so here
09:55 - we want to then set all of them to true
09:59 - again we want to enable them again so
10:01 - here we set components active and here
10:07 - we also enable game objects that's a
10:16 - better way to put it here so enable the
10:19 - components there we go and for the
10:24 - components we remembered whether or not
10:26 - they were enabled before and then set
10:28 - them back to that state for the game
10:30 - objects here we're just enabling them
10:32 - again that's going to be fine for now if
10:34 - we run into some problems later we are
10:37 - going to change that of course so here
10:39 - we want to enable the collider as well
10:41 - there we go and that's going to work
10:45 - just fine and I think we are already
10:49 - ready to add some game objects that we
10:53 - want it to disable and the first one
10:56 - that comes to mind is the entire
10:57 - graphics object so we can just add that
10:59 - to the array and this doesn't include
11:02 - the weapon but you will see that I
11:06 - game object disappears here so when I
11:08 - press K the guy disappears and that
11:11 - looks already much better however I want
11:15 - to also disable the weapon and the
11:17 - weapon sits under the camera object and
11:21 - that's fine because I want to also
11:23 - disable the camera however when we
11:26 - disable the camera I want to make sure
11:28 - that our scene camera gets enabled
11:31 - instead so if we were to go ahead and
11:35 - drag the entire camera object in here
11:37 - that's going to disable the camera the
11:40 - weapon camera the weapon holder and now
11:42 - all of the stuff under that all of the
11:44 - weapons and that's going to be fine
11:46 - however it's going to say that the scene
11:48 - is missing a full screen camera and
11:50 - that's because our scene camera here is
11:52 - still disabled so let's create a way
11:56 - through script for us to enable that and
11:59 - control its current state and I think
12:01 - the way that we're going to do that is
12:03 - currently if we take a look at our
12:06 - player setup script
12:07 - we're simply finding our main camera and
12:10 - setting that to active or are not active
12:14 - and that's fine as long as we only have
12:18 - a very limited amount of cameras and we
12:20 - always control that the scene cameras is
12:22 - tagged as the main camera and it's it's
12:25 - okay however I think a better way for
12:28 - this for us to do this would have the
12:30 - game manager would be to have the game
12:33 - manager to control the state of the
12:36 - scene camera it will have a reference to
12:38 - what camera is the scene camera and it
12:40 - will have a method that will enable and
12:42 - disable it so that's what we are going
12:44 - to do and therefore we are simply going
12:47 - to delete all of this we're going to
12:50 - delete the scene camera reference up
12:52 - here and we are going to change the code
12:54 - down here what I basically want to do is
12:57 - have some kind of method on the game
13:00 - manager so we can say game manager
13:02 - instance and then we can call some kind
13:05 - of method here let's go ahead and create
13:07 - that method now so if we jump over to
13:09 - our game manager open that up and make a
13:12 - reference to our scene camera so just
13:17 - put a slot here a private
13:20 - and this is just going to be a game
13:22 - object because I want to disable the
13:23 - entire game object so we don't have
13:25 - multiple audio listeners and so we
13:28 - disable the flan the GUI layer and stuff
13:30 - like that so a private game object and
13:32 - this is just going to store the scene
13:34 - camera and then what we can do down here
13:36 - so we can make a public void code maybe
13:40 - set scene camera active State States
13:47 - whatever set scene camera active and
13:50 - then we have a boolean here called is
13:53 - active that will control whether or not
13:57 - it's currently enabled and then what we
14:00 - do is first off we want to check if the
14:02 - scene camera is equal to null well then
14:05 - we want to not do anything inside of
14:08 - this math method and simply just return
14:10 - we simply want to just quit out of that
14:12 - method and if it is not equal to null
14:14 - meaning that it's equal to something
14:16 - well then we want to set say scene
14:19 - camera that set active and then we want
14:22 - to pass in the is active variable that
14:25 - we have passed in over here good and
14:28 - remember to do this check because we are
14:30 - calling this from the on disable method
14:32 - and therefore it might be equal to null
14:34 - that is something that happens so unless
14:37 - you want to have error messages it's a
14:39 - good idea to do that check then we can
14:41 - now just on the instance here find the
14:44 - method called set scene camera active
14:49 - and we can set that to true when we are
14:53 - not no longer in the scene we want to
14:57 - just set the seat or no longer active as
14:59 - a player when we are destroyed then we
15:01 - want to set that scene camera to active
15:04 - at another point we might be
15:05 - transitioning to some kind of menu scene
15:07 - but this is what we're doing for now
15:09 - then under our player object we can call
15:12 - the exact same method then that is the
15:14 - cool part so now in here under the die
15:17 - method here we can check that if we are
15:21 - the local player if is local player and
15:24 - again we only want to execute this for
15:28 - the local player because we whenever a
15:31 - player dies it's only
15:33 - camera that should change it would be
15:35 - weird if you killed someone and then you
15:37 - were taking to the scene a camera that
15:40 - would just that doesn't make sense we
15:42 - only want it for the guy that is
15:44 - actually killed and here we switch
15:48 - camera and we simply do game-manager dot
15:54 - instance dot set scene camera active to
15:58 - true yeah there we go
16:00 - so we want to set that true and we can
16:03 - copy this line of code go down to the
16:05 - set defaults and here again we want to
16:08 - have we want to copy the if statement
16:11 - also so there we go and now we want to
16:16 - set it to false by because when we are
16:19 - responding and we call the set defaults
16:21 - we want the scene camera active to be
16:23 - false as well good so we save that and
16:27 - let's try and hit play here and let's
16:31 - select our land host and something is
16:36 - not working and I bet that is because we
16:38 - we didn't get an error but we did not
16:42 - either reference a scene camera and
16:45 - that's something you need to do so let's
16:47 - do that and now he'll play and select
16:51 - land host here you can see the scene
16:52 - camera gets disabled if we now kill off
16:55 - this guy we can see it switches to the
16:57 - scene camera and it switches back on
16:59 - however it will also notice that it
17:03 - doesn't turn off the in-game UI so if I
17:05 - press K here it's there and it's frozen
17:08 - but it's there so we want to disable
17:10 - that temporarily and they a very simple
17:15 - way to do this ah a very simple way to
17:19 - do this is if we look under the player
17:22 - set on script we already have a
17:25 - reference to our current player UI the
17:29 - player UI instance it's up here so if we
17:32 - just went ahead and made this public and
17:36 - we don't want to be able to see this in
17:39 - the unity inspector so we'll tag this as
17:42 - a hide and inspector so we don't see it
17:44 - but we do want to be able to access it
17:47 - what we can then do is we can go under
17:50 - our player script I'm first off we want
17:53 - to make sure that we have a player's
17:55 - setup on on the same object so we don't
17:59 - get any null references here so we want
18:02 - to require component type of player
18:04 - setup this way we don't have to do any
18:05 - error checking and then inside of our
18:09 - this local player here when we set the
18:11 - scene camera state we can also say get
18:14 - component the type play your setup dot
18:20 - set active oops I mean dot um and it's
18:26 - called player something with player UI
18:29 - play you our instance dot side active
18:31 - and then we can set that to false so
18:34 - whenever we enable the camera we disable
18:37 - the player UI and we of course want to
18:38 - invert that down there good so now when
18:43 - we and we don't need to reference
18:46 - anything so now when we hit play so like
18:48 - land host and kill the sky you can see
18:52 - that the UI disappears and that we will
18:54 - be that way with any kind of in-game UI
18:56 - we create under this object so also the
18:58 - crosshair disappears and everything is
19:01 - just perfect good so on the next thing
19:05 - that I kind of wanted to take a look at
19:07 - here if we see everything's working with
19:10 - that and we have our player here and the
19:13 - death effect the final thing I wanted to
19:16 - take a look at is a cool respawn prefab
19:20 - so let's go ahead and actually create
19:22 - this in the game so first off let's go
19:25 - into standard assets particle systems
19:27 - prefabs again you can import this if
19:29 - it's not there and I want to base my
19:31 - effect off of the fireworks effect I
19:33 - think this is a super cool effect
19:35 - however I don't want all these trails
19:38 - and the smoke I only want the explosion
19:40 - sub emitter and we're going to break the
19:43 - prefab instance that's fine and we can
19:44 - delete the rest of the particle system
19:47 - and I want to rename this to something
19:49 - like spawn effect and my phone is going
19:52 - off you excuse me for a second I'm just
19:55 - going to turn that off very quickly and
19:58 - hopefully we can continue
20:00 - the video here cool so we can call this
20:03 - the spawn effect and we can maybe just
20:04 - move this up one unit and if we zoom in
20:08 - on this you can see just how cool this
20:10 - effect actually is and what I want to do
20:13 - is I want to turn off looping on this I
20:15 - want to change the duration to something
20:18 - like 1 and I want to change the lifetime
20:21 - - let's say point somewhere between 0.5
20:25 - and 1 maybe there we go
20:29 - so that just brought the effect down a
20:31 - bit but I think still think it has this
20:33 - very cool bright and colorful feel to it
20:36 - which is definitely nice to have in the
20:38 - game so yeah I am really satisfied with
20:41 - that and you can of course tweak this on
20:43 - to death you can do anything you want
20:45 - with that I'm just going to now drag
20:47 - this under the prefabs folder turn it
20:50 - into a prefab and let's just very
20:52 - quickly do the code that will spawn the
20:55 - same so under our player objects we will
20:58 - go up here scroll scroll it's becoming
21:01 - quite the script this one and let's just
21:04 - duplicate that instead of a death effect
21:06 - if we now want a spawn effect and we
21:11 - don't want to spawn this in when we die
21:13 - of course instead we want to spawn this
21:15 - in a good place to do it would be under
21:19 - the respawn method however our respawn
21:22 - method is only called when we have died
21:25 - not when we first into the game
21:29 - however I'd set defaults method is
21:32 - called also when we enter the game so I
21:35 - want to put the code in there however I
21:37 - also want to move this set defaults
21:41 - method down after we set our current
21:45 - position because this way we won't spawn
21:48 - in the particles at the place where we
21:51 - died instead we will spawn them in at
21:53 - our new spawn location and things won't
21:55 - look weird so that's a quite an
21:57 - important step and then we can go and do
22:00 - our set defaults here and we can just
22:02 - make a new comment here called create
22:05 - spawn effect and it's going to do the
22:09 - exact same as when we we were spawning a
22:12 - death effect up here
22:14 - let's just copy that part of the code
22:16 - change the name here to spawn effect and
22:19 - everything else should work just fine so
22:23 - now when we add when we say that head
22:25 - back into unity we should have a field
22:28 - there that we can now populate and we
22:30 - want to lock that go into our prefabs go
22:34 - into our spawn effect and drag that in
22:36 - there and now we should hopefully see
22:40 - this working so nice like land host you
22:43 - can see that we have this cool respawn
22:46 - effect and I can go and destroy my
22:47 - player and it's going to spawn there
22:50 - with the cool-looking effect and I'm
22:52 - just going to demonstrate that this is
22:54 - working over the network so let's go
22:56 - ahead and hit control B or command B if
22:58 - you're on the Mac to make a standalone
23:00 - build that we can test this on and it is
23:04 - going to wake work in almost every way
23:08 - except one that I will show you and
23:10 - that's not something we're going to be
23:11 - fixing today and I will explain why so
23:14 - let's go ahead and and hit play here
23:17 - select host over here and that is
23:20 - working then select client here and you
23:23 - can see here that was the part that
23:25 - wasn't working when we join as a client
23:28 - it spawns for both the current your own
23:32 - player but also on all of the other
23:36 - players that are currently active and
23:37 - we'll talk about that in a second but
23:39 - first let me just show you that if I
23:41 - kill this guy he explodes and he spawns
23:45 - back in beautifully and it's the same if
23:48 - I do this for the other one I'm not
23:50 - going to show you that all right now
23:51 - because well then I can't see that but
23:55 - you can see here it works just fine on
23:58 - this system as well as this one so
24:00 - that's super cool so as soon as the
24:03 - objects are actually in the game
24:05 - everything works on fine the only issue
24:08 - is when you spawn is in sa client and I
24:11 - can show you this again
24:12 - if I press client here now whoops okay
24:16 - so we have some weird functionality
24:18 - going on here maybe things didn't work
24:21 - quite as well as we wanted them to so if
24:25 - I kill myself here
24:28 - that looks just fine oh and this was
24:31 - also a result of what I'm going to talk
24:33 - about of okay of course so the reason
24:37 - why we have this weird functionality is
24:39 - because we have of the way we have set
24:41 - up our player script so if we go under
24:44 - our player here we can see that we have
24:47 - this set up method and this set up
24:50 - method is super nice because it sets our
24:54 - object up just as we want it to be set
24:57 - up the problem is not with this method
25:00 - the problem is is with how it's called
25:03 - because currently this set up method is
25:06 - called for all of the different clients
25:10 - and that means that on all of the
25:14 - different players as well and that means
25:16 - that if I am a player and I want to join
25:20 - a lobby and this Lobby currently has
25:23 - four players in it and I'm the fifth
25:25 - player well then I am going to join that
25:28 - lobby I only want to call this setup
25:30 - method that sets all of the defaults
25:33 - values and stuff like that and creates a
25:37 - spawn prefab I only want that to be
25:40 - called on this player I want it to be
25:43 - called on all the clients with I want
25:45 - all of them to spawn in the coop prefabs
25:47 - and update the fact that I've updated
25:51 - this object but I don't want it to be on
25:54 - called for all of the different objects
25:57 - because this way all of the players will
26:00 - be reset when just a single player
26:02 - spawns and that's the current way we
26:04 - have it set up and that of course
26:07 - doesn't work because if we look under
26:09 - our set default method we have for
26:11 - example resetting the health of this guy
26:13 - we're also spawning in some particle
26:15 - systems and stuff like that and that
26:17 - means that when we spawn in any kind of
26:21 - player he will make sure that all of the
26:23 - other players health is reset and that's
26:26 - not something we want that is
26:28 - unfortunately not something we're going
26:30 - to be changing in this video because it
26:32 - requires some restructuring of how we
26:35 - have this of how we call this method you
26:37 - can see currently we just call it in the
26:39 - start
26:39 - method and frankly I think this is going
26:42 - to be a lot easier to to do when we
26:45 - actually create some kind of network
26:46 - manager on our own and this way we can
26:49 - I'll call this kind of set of methods
26:51 - through that and have very more control
26:53 - so we're going to have to leave this for
26:56 - now because this video is already very
26:58 - long just know that I am aware of this
27:01 - bug and that I definitely want to fix
27:03 - that in a coming video so I I will look
27:08 - into it for sure
27:09 - so with on that set that was the
27:12 - particle systems here and I hope you
27:14 - enjoyed it I think particle systems are
27:16 - one of the most fun parts of using unity
27:18 - yeah so that was it for this video I
27:20 - hope you enjoyed it and I'll see you in
27:22 - the next one

Cleaned transcript:

thanks for tuning in at brakus hello and welcome to this video on making a multiplayer FPS in unity today we are going to be adding some cool particle systems to our game so in this video we're going to be adding both a death explosion effect and a respawn particle effect we're also going to be changing between the scene and the player camera so it will look super cool when we die we can see the entire map and stuff like that so that's going to look super awesome and be a lot of fun so without further ado let's just jump right into today's video here and now you can see that I'm here in unity and the first thing that I want to take a look at is just how it looks right now when we play the game so if I go under our player and double click or play your script here and I'm just going to say yes to all of this there we go and just remove those two you can see here that we have a piece of code that we've written in an earlier video and that it's commented and I'm just going to uncomment this and you can just write it back in just copy it here if you haven't have deleted this for some reason and this is simply for testing on the respawn mechanic we simply say that if we press the key K for kill we add a bunch of damage to our player so this will just allow us to kill ourselves here commit suicide and when we do we can see what happens so if I hit play now I'm going to land host and hit K you can see that I become unable to move but there's no kind of visual feedback for what's going on and if we have a look in the scene view what happens is basically we just our freeze in place and the physics actually is still applied and nothing really happens so the first thing that we could take a look at doing here is maybe adding in some particles more specifically an explosion effect so if we go under standard assets particle systems and then prefabs and again in order to import this we simply rightclick go import package and then particle systems if you don't have this folder then we can take the explosion prefab here and drag that in this is going to act as a base for our cool explosion effect and you will see in a moment what this looks like so if we just drag this up a bit from the ground just to add a Y of one let's try that and try and hit play you will see that this explosion is huge it looks super cool but it's also very large and therefore unity has provided this cool particle system multiplier so we set this to something like point four it should scale the particle system down and it does however the smoke surrounding it still looks super weird so let's try and configure this a bit in order on to have the smoke black not be affected by this particle system multiplayer on multiplier will create a sub object so simply create an empty object here and reset the transform when it's parented under the explosion and let's just call this something like particles it doesn't really matter let's take all the objects here except the smoke black and move them under there and then we're going to break the prefab instance but that's fine with me because we're going to be turning this into a separate prefab in a second anyways then we can take our particle system multiplayer and multi player multiplier and then copy that component and remove it and then paste it as new on the particles object we can do the same with the explosion physics force you can also just go ahead and simply delete that component if you want to this is simply going to add an explosion force so any rigidbody objects nearby will be affected by the explosion we're just going to keep this in for now and then we might change it later so then we have this smoke black here and this is what we want to change and first off we could maybe set the duration a bit shorter something like 0.5 and let's just Center it on this we can also take the shape here because it's currently huge and set that to a radius of 1 and let's try this again it's already much better we can then maybe change the lifetime actually the duration here I wanted that to be yeah point five is going to be fine and then on the lifetime we can set that to something like I know between 0.7 and 1.2 let's try and simulate that that looks much better let's actually do one here I like 1.2 better and the start size here they've said that between 75 and 150 maybe ah maybe 130 it's better so let's try and simulate that and that looks much better so it's now I a much less dramatic effect and it should look much cooler we can also quality the emission here and change the rate to something like 8 just to thin up the smoke a bit and I think that looks super cool so we're just going to stick with that and we can now take this and make it into a new prefab so let's go under our prefabs folder and drag the explosion in there good so we are now ready to code the instantiation of this explosion so let's select our player and go to our player script double click that again and let's first off set up a quick reference to that explosion object so let's do a serialize field private game object and this is going to be the death effect and all we want to do is find the place where we died remember we have this OPC client RPC code take damage and if of course because this is a client IPC it means that it is called on all of the our different clients whenever a game object takes damage and therefore on the die method here is called inside of this will also be executed on all of the clients so that's perfect for spawning in temporary effects because it's going to spawn on each separate clients and it's not going to be handled over the network in any way it's going to be spawned actually locally on the client so that's just fine and what we can do here is maybe just quickly add in some comments so what we do here is we disabled components and we don't want here we disable the collider and here we spawn a death effect and we simply do this by using the instantiate method and what we want to spawn is the we call the death effect and we want to spawn this at our current position so transform that position and the rotation really doesn't matter so we're just going to use quaternion that identity and so we get a zero zero zero rotation and let's just store a quick reference to this so we can delete it after a couple of seconds so we want clutter up the hierarchy so we'll make a temporary game object here called let's just say graphics GFX instance and set that equal to the instantiated object and we need to cast that to the type game object and then down here we can simply say that we want to destroy this our graphics instance after let's say three seconds this way we get give the smoke plenty of time to dissolve good and all we need to do now is simply wait for this lot here to appear and then let's just lock this inspector go on to our prefabs folder and drag the explosion into the death effects lab and we can now unlock that again and let's hit play and see if this is actually working so we can take our scene view and just talk it over there so we can see what's going on in the scene here and we can spawn in and we can move over here and then press K and you can see that a cool explosion now spawns and I think that looks super nice so what we need to do now is actually disable the player graphics so you can see currently under our player we have this disabled undeath array and this will disable and certain the components added to this array when well when we died and what we could do is we could go through all of the different renderers associated with our graphics under the different graphics objects and add them in here but that would be tedium and yeah we don't want to do that so what we do instead is we go up here and then we create a new array and this array is going to disable objects entire game objects instead and this is going to be the disabled game objects I'm death and what we simply want to do here is first off up here in the setup we don't need to do that we also do it here so we can simply copy this for loop and here we want to disable able game objects instead of just components and we can change this to disabled game objects on death and do the same here and instead of using that enable I'm setting that to a boolean we use that set active and then we put in false right here so then we just disable all of that and we can just take this inside entire for loop and duplicate it for down here so here we want to then set all of them to true again we want to enable them again so here we set components active and here we also enable game objects that's a better way to put it here so enable the components there we go and for the components we remembered whether or not they were enabled before and then set them back to that state for the game objects here we're just enabling them again that's going to be fine for now if we run into some problems later we are going to change that of course so here we want to enable the collider as well there we go and that's going to work just fine and I think we are already ready to add some game objects that we want it to disable and the first one that comes to mind is the entire graphics object so we can just add that to the array and this doesn't include the weapon but you will see that I game object disappears here so when I press K the guy disappears and that looks already much better however I want to also disable the weapon and the weapon sits under the camera object and that's fine because I want to also disable the camera however when we disable the camera I want to make sure that our scene camera gets enabled instead so if we were to go ahead and drag the entire camera object in here that's going to disable the camera the weapon camera the weapon holder and now all of the stuff under that all of the weapons and that's going to be fine however it's going to say that the scene is missing a full screen camera and that's because our scene camera here is still disabled so let's create a way through script for us to enable that and control its current state and I think the way that we're going to do that is currently if we take a look at our player setup script we're simply finding our main camera and setting that to active or are not active and that's fine as long as we only have a very limited amount of cameras and we always control that the scene cameras is tagged as the main camera and it's it's okay however I think a better way for this for us to do this would have the game manager would be to have the game manager to control the state of the scene camera it will have a reference to what camera is the scene camera and it will have a method that will enable and disable it so that's what we are going to do and therefore we are simply going to delete all of this we're going to delete the scene camera reference up here and we are going to change the code down here what I basically want to do is have some kind of method on the game manager so we can say game manager instance and then we can call some kind of method here let's go ahead and create that method now so if we jump over to our game manager open that up and make a reference to our scene camera so just put a slot here a private and this is just going to be a game object because I want to disable the entire game object so we don't have multiple audio listeners and so we disable the flan the GUI layer and stuff like that so a private game object and this is just going to store the scene camera and then what we can do down here so we can make a public void code maybe set scene camera active State States whatever set scene camera active and then we have a boolean here called is active that will control whether or not it's currently enabled and then what we do is first off we want to check if the scene camera is equal to null well then we want to not do anything inside of this math method and simply just return we simply want to just quit out of that method and if it is not equal to null meaning that it's equal to something well then we want to set say scene camera that set active and then we want to pass in the is active variable that we have passed in over here good and remember to do this check because we are calling this from the on disable method and therefore it might be equal to null that is something that happens so unless you want to have error messages it's a good idea to do that check then we can now just on the instance here find the method called set scene camera active and we can set that to true when we are not no longer in the scene we want to just set the seat or no longer active as a player when we are destroyed then we want to set that scene camera to active at another point we might be transitioning to some kind of menu scene but this is what we're doing for now then under our player object we can call the exact same method then that is the cool part so now in here under the die method here we can check that if we are the local player if is local player and again we only want to execute this for the local player because we whenever a player dies it's only camera that should change it would be weird if you killed someone and then you were taking to the scene a camera that would just that doesn't make sense we only want it for the guy that is actually killed and here we switch camera and we simply do gamemanager dot instance dot set scene camera active to true yeah there we go so we want to set that true and we can copy this line of code go down to the set defaults and here again we want to have we want to copy the if statement also so there we go and now we want to set it to false by because when we are responding and we call the set defaults we want the scene camera active to be false as well good so we save that and let's try and hit play here and let's select our land host and something is not working and I bet that is because we we didn't get an error but we did not either reference a scene camera and that's something you need to do so let's do that and now he'll play and select land host here you can see the scene camera gets disabled if we now kill off this guy we can see it switches to the scene camera and it switches back on however it will also notice that it doesn't turn off the ingame UI so if I press K here it's there and it's frozen but it's there so we want to disable that temporarily and they a very simple way to do this ah a very simple way to do this is if we look under the player set on script we already have a reference to our current player UI the player UI instance it's up here so if we just went ahead and made this public and we don't want to be able to see this in the unity inspector so we'll tag this as a hide and inspector so we don't see it but we do want to be able to access it what we can then do is we can go under our player script I'm first off we want to make sure that we have a player's setup on on the same object so we don't get any null references here so we want to require component type of player setup this way we don't have to do any error checking and then inside of our this local player here when we set the scene camera state we can also say get component the type play your setup dot set active oops I mean dot um and it's called player something with player UI play you our instance dot side active and then we can set that to false so whenever we enable the camera we disable the player UI and we of course want to invert that down there good so now when we and we don't need to reference anything so now when we hit play so like land host and kill the sky you can see that the UI disappears and that we will be that way with any kind of ingame UI we create under this object so also the crosshair disappears and everything is just perfect good so on the next thing that I kind of wanted to take a look at here if we see everything's working with that and we have our player here and the death effect the final thing I wanted to take a look at is a cool respawn prefab so let's go ahead and actually create this in the game so first off let's go into standard assets particle systems prefabs again you can import this if it's not there and I want to base my effect off of the fireworks effect I think this is a super cool effect however I don't want all these trails and the smoke I only want the explosion sub emitter and we're going to break the prefab instance that's fine and we can delete the rest of the particle system and I want to rename this to something like spawn effect and my phone is going off you excuse me for a second I'm just going to turn that off very quickly and hopefully we can continue the video here cool so we can call this the spawn effect and we can maybe just move this up one unit and if we zoom in on this you can see just how cool this effect actually is and what I want to do is I want to turn off looping on this I want to change the duration to something like 1 and I want to change the lifetime let's say point somewhere between 0.5 and 1 maybe there we go so that just brought the effect down a bit but I think still think it has this very cool bright and colorful feel to it which is definitely nice to have in the game so yeah I am really satisfied with that and you can of course tweak this on to death you can do anything you want with that I'm just going to now drag this under the prefabs folder turn it into a prefab and let's just very quickly do the code that will spawn the same so under our player objects we will go up here scroll scroll it's becoming quite the script this one and let's just duplicate that instead of a death effect if we now want a spawn effect and we don't want to spawn this in when we die of course instead we want to spawn this in a good place to do it would be under the respawn method however our respawn method is only called when we have died not when we first into the game however I'd set defaults method is called also when we enter the game so I want to put the code in there however I also want to move this set defaults method down after we set our current position because this way we won't spawn in the particles at the place where we died instead we will spawn them in at our new spawn location and things won't look weird so that's a quite an important step and then we can go and do our set defaults here and we can just make a new comment here called create spawn effect and it's going to do the exact same as when we we were spawning a death effect up here let's just copy that part of the code change the name here to spawn effect and everything else should work just fine so now when we add when we say that head back into unity we should have a field there that we can now populate and we want to lock that go into our prefabs go into our spawn effect and drag that in there and now we should hopefully see this working so nice like land host you can see that we have this cool respawn effect and I can go and destroy my player and it's going to spawn there with the coollooking effect and I'm just going to demonstrate that this is working over the network so let's go ahead and hit control B or command B if you're on the Mac to make a standalone build that we can test this on and it is going to wake work in almost every way except one that I will show you and that's not something we're going to be fixing today and I will explain why so let's go ahead and and hit play here select host over here and that is working then select client here and you can see here that was the part that wasn't working when we join as a client it spawns for both the current your own player but also on all of the other players that are currently active and we'll talk about that in a second but first let me just show you that if I kill this guy he explodes and he spawns back in beautifully and it's the same if I do this for the other one I'm not going to show you that all right now because well then I can't see that but you can see here it works just fine on this system as well as this one so that's super cool so as soon as the objects are actually in the game everything works on fine the only issue is when you spawn is in sa client and I can show you this again if I press client here now whoops okay so we have some weird functionality going on here maybe things didn't work quite as well as we wanted them to so if I kill myself here that looks just fine oh and this was also a result of what I'm going to talk about of okay of course so the reason why we have this weird functionality is because we have of the way we have set up our player script so if we go under our player here we can see that we have this set up method and this set up method is super nice because it sets our object up just as we want it to be set up the problem is not with this method the problem is is with how it's called because currently this set up method is called for all of the different clients and that means that on all of the different players as well and that means that if I am a player and I want to join a lobby and this Lobby currently has four players in it and I'm the fifth player well then I am going to join that lobby I only want to call this setup method that sets all of the defaults values and stuff like that and creates a spawn prefab I only want that to be called on this player I want it to be called on all the clients with I want all of them to spawn in the coop prefabs and update the fact that I've updated this object but I don't want it to be on called for all of the different objects because this way all of the players will be reset when just a single player spawns and that's the current way we have it set up and that of course doesn't work because if we look under our set default method we have for example resetting the health of this guy we're also spawning in some particle systems and stuff like that and that means that when we spawn in any kind of player he will make sure that all of the other players health is reset and that's not something we want that is unfortunately not something we're going to be changing in this video because it requires some restructuring of how we have this of how we call this method you can see currently we just call it in the start method and frankly I think this is going to be a lot easier to to do when we actually create some kind of network manager on our own and this way we can I'll call this kind of set of methods through that and have very more control so we're going to have to leave this for now because this video is already very long just know that I am aware of this bug and that I definitely want to fix that in a coming video so I I will look into it for sure so with on that set that was the particle systems here and I hope you enjoyed it I think particle systems are one of the most fun parts of using unity yeah so that was it for this video I hope you enjoyed it and I'll see you in the next one
