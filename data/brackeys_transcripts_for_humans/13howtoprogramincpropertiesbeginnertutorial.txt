With timestamps:

00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to video number 13 in the how to
00:06 - program in c-sharp course in today's
00:09 - video we're going to have a look at
00:10 - properties also called getters and
00:13 - setters and a property basically allows
00:16 - us to kind of control how we access and
00:21 - change a variable so and that's a very
00:26 - loose definition but I'll show you
00:28 - exactly why this is useful in just a
00:30 - moment
00:30 - first I quickly want to mention that if
00:32 - you have any questions simply go to farm
00:34 - table brackets that come you can write
00:37 - questions there and get answers find the
00:40 - solution to problems in your code and
00:43 - even suggest tutorials if you have any
00:45 - cool ideas so as always let's open up
00:50 - samer in studio and let me give you a
00:52 - good example of a property that is
00:57 - already created for us so when we are
01:00 - using c-sharp and we make sure to import
01:05 - the system namespace that's a class
01:08 - available to us that I haven't shown you
01:10 - yet this is called the date time class
01:13 - and it handles everything you want to do
01:17 - with dates and time on the system so if
01:22 - we want to get the current system time
01:24 - we would maybe create a new variable
01:26 - called a current time and it should of
01:31 - course be of type date time and we would
01:33 - set it equal to date time dot now and
01:36 - you can see that it tells us that this
01:40 - is a public static variable of type
01:42 - date/time and you can see in here that
01:45 - it says get and that's because we are
01:48 - not actually allowed to change this
01:51 - variable if we were able to change this
01:53 - it would say both get colon or semicolon
01:57 - then set semicolon but this only says
02:01 - get and that means that this is a
02:05 - read-only property so basically this is
02:09 - very very good because it allows us to
02:12 - get the current time
02:13 - and then print it out so let me just
02:15 - show you that this gets our current time
02:17 - and deeds is 7:30 and it's the data is
02:21 - right there but we cannot actually
02:25 - change the time on our system it would
02:27 - be ridiculous if every time we made a
02:29 - console application we could just change
02:31 - the current time so it's very good that
02:34 - we have this restriction and as you will
02:36 - come to know a lot of what programming
02:41 - is is restricting yourself and your
02:44 - teammates from doing something stupid I
02:47 - mean when your program becomes more
02:49 - complex everything is about making stuff
02:52 - very clear and also restricting you from
02:57 - doing things you're going to regret Oh
02:59 - which will break the application so
03:03 - let's actually have an a look at
03:06 - creating our own get a property or own
03:10 - getter and setter so let's say that we
03:13 - are making a game and we want to create
03:15 - a class for our player that is going to
03:18 - contain for many an information about
03:20 - our players such as health and man and
03:23 - run speed and all kinds of things for
03:26 - now we are simply going to focus on
03:28 - creating a health variable for this
03:31 - player so we might go in and create a
03:33 - public integer and call this health and
03:36 - set it equal to a default of a hundred
03:38 - now inside of our main we might create a
03:41 - player and we might call him Tom and set
03:46 - him equal to a new player
03:49 - like that and in here we can both print
03:53 - out Tom's Hill and we can also change
03:57 - tom's health so we'd say tom dot health
04:01 - equals 40 and we can print out Tom's
04:05 - health now that we've set equal to 40 so
04:07 - this should print out a hundred because
04:09 - that's what it defaults to set it to 40
04:12 - and then print out it's the new value
04:15 - which is of course 40 so when we play
04:17 - this you can see 100 and then 40 so that
04:21 - works just as we intended it to but
04:24 - let's say that our player class gets a
04:27 - lot more complicated and we don't want
04:30 - to just change the health no we want to
04:33 - create a method that damages our player
04:35 - because that way we can maybe create
04:37 - some hit particles and a damage
04:41 - animation and the sound when the bullet
04:44 - hits and we can do all kinds of stuff we
04:47 - don't just want to change the health
04:49 - behind the scenes all the time so we
04:52 - maybe want to create a public void
04:55 - called damage and this is going to take
04:58 - in an integer with the damage amount and
05:03 - it's simply going to say that health
05:06 - minus equals the damage amount and this
05:11 - is all fine and dandy we can go in here
05:12 - and we can say Tom that damage and we
05:16 - can maybe damage him by 50 and you
05:19 - should have 50 left so then we can print
05:22 - out we can write out Tom's health after
05:29 - we damage him so you can see it now says
05:32 - 50 and we can have all a bunch of logic
05:35 - in here but a problem would then be if
05:38 - you later continued on to it working on
05:41 - something else or another person on your
05:44 - team went back to this and wanted to
05:46 - damage the player and instead of using
05:48 - Tom damaged they simply went in and said
05:51 - Tom health minus minus equals 50 well
05:57 - this is a problem because now Tom with
05:59 - would lose health and it would
06:02 - play a sound or an animation or update
06:05 - the GUI or his health bar or anything
06:08 - like that his health would simply go
06:12 - down behind the scenes and that would be
06:15 - an issue so a what we need to do is
06:18 - simply restrict this from happening so
06:21 - you might be thinking but let's just go
06:23 - in and make this into a private variable
06:24 - and that's fine we can call Tom damage
06:28 - and damage him by let's say 30 this time
06:30 - but now we're not actually able to write
06:33 - out his health so the solution to this
06:37 - problem is making a get only or a yeah
06:43 - get a an access only or get only
06:46 - property so in order to do this we
06:50 - basically need to create what looks like
06:52 - two variables the first one is going to
06:54 - be a private integer and this is the and
06:58 - I'm going to call this underscore health
06:59 - because it's going to be only accessed
07:02 - from within our own player class and
07:04 - this is going to store the actual health
07:07 - of our player and therefore we can also
07:09 - set this equal to a default value such
07:11 - as 100 then we create a public integer
07:15 - and this is the actual property and this
07:18 - is and this is not going to be
07:20 - underscore this is simply going to be
07:22 - health and instead of setting this equal
07:24 - to something or just closing this off
07:26 - with a semicolon in fact we're not going
07:29 - to be using a semicolon at all instead
07:31 - we open and close two curly brackets and
07:34 - I'm going to put these down on and some
07:38 - separate lines here and inside of this
07:40 - we then write get and again we are going
07:44 - to open and close some curly brackets
07:47 - and then we say return underscore health
07:52 - so this is I get only property so
07:56 - basically what this does is it says that
07:59 - whenever we try to get the current
08:02 - health of our player it's simply going
08:04 - to return the private health amount and
08:08 - this means that we cannot actually
08:11 - change the health variable unless we are
08:14 - inside the same class
08:16 - and are able to say underscore health
08:18 - minus equals damage so down here in our
08:22 - main method we can now damage tom by
08:26 - saying tom damage and we can print out
08:28 - tom dot health but we cannot actually
08:31 - say tom dot health minus equals 20 or
08:36 - equals 20 because this is a read only
08:41 - variable and you can say if I try and do
08:43 - this it says property are indexes
08:45 - indexer cannot be assigned to it is
08:48 - read-only so that's super cool and that
08:53 - makes our code much more safe so now
08:56 - when we hit play you can see it it
08:57 - prints out 70 because we start at a
08:59 - hundred then we call the damage method
09:03 - which subtracts our private health
09:06 - amount by whatever we passed in and what
09:09 - we passed in was 30 so this is now equal
09:12 - to 70 and then down here we access the
09:16 - property here which is this health
09:19 - variable and that simply gives us the
09:22 - value here so it might look kind of
09:27 - crazy to do all of this but it's a very
09:30 - important thing to start doing and this
09:34 - is basically the same as doing this some
09:38 - people like to do this on the same line
09:40 - just say get and in here simply say
09:44 - return on the score health and remember
09:47 - this semicolon there and you can see
09:49 - that that looks a lot smaller and more
09:52 - compressed but maybe not as readable
09:55 - that's completely up to you for now I'm
09:57 - going to do it this the other way
10:00 - because I think it's easier to kind of
10:02 - figure out what's going on so that's
10:05 - super cool but let's say that we want to
10:08 - get rid of this damage damage method and
10:12 - actually just want to change our
10:14 - variable by by using the access you here
10:20 - so at the moment we can of course only
10:23 - get our health we can also make a setter
10:26 - for our health we could just remove this
10:29 - and do
10:30 - instead or and not be able to actually
10:33 - print it out but for now we'll just keep
10:35 - this scatter so down here we are going
10:38 - to say set and on the order in which you
10:41 - do this doesn't matter you can create
10:43 - the setter before the getter or this way
10:46 - around so the seller is pretty similar
10:49 - and what we do here is simply reset
10:52 - underscore health we set this variable
10:54 - up here equal to what every we pass in
10:58 - or we set this equal to so that value
11:01 - that we set it equal to down here when
11:03 - we say that we want to print out time
11:08 - that health and then we want Tom dot
11:12 - health to be equal to 20 this value here
11:18 - up here will be called value so that's
11:23 - the keyword for getting that right there
11:26 - so when we print this out here Tom
11:29 - health it should say 20 so basically
11:32 - this is the exact same as simply using a
11:36 - normal variable when you create the
11:38 - standard getter and the standard setter
11:41 - it's the exactly the same as simply
11:44 - making a public integer and using that
11:47 - but we can do more with this with other
11:50 - than just limiting what whether or not
11:53 - we can get our set values we can also
11:56 - change the way that we get and set a
11:59 - variable and what do I mean by this well
12:01 - at the moment here when we change tom's
12:04 - a health and print it out it simply does
12:06 - so it's it changes 100 to 20 but let's
12:09 - say that we want to kind of limit our
12:12 - health let's say that we only wanted to
12:14 - go between zero and a hundred because
12:17 - 100 might be our maximum health and it
12:21 - would be kind of weird if our player
12:22 - could just be healed infinitely or be
12:26 - damaged so than his health was suddenly
12:30 - negative so if we wanted to limit this
12:33 - health what we can do inside of the
12:35 - setter here is we instead of just
12:37 - blindly setting setting it equal to the
12:40 - value we pass in the
12:42 - say that if he'll or if I'm sorry if a
12:47 - value is smaller than or equal to zero
12:54 - oops then we want to set underscore
13:00 - health equal to 0 else if value is
13:08 - greater than or equal to a hundred well
13:16 - then we want to set underscore health
13:18 - equal to a hundred and else meaning if
13:23 - it's not smaller than or equal to zero
13:26 - or not greater than or equal to a
13:28 - hundred so it's somewhere between 1 and
13:30 - 99 well then we simply want to set our
13:34 - health equal to value so this might look
13:40 - very confusing to you and I will admit
13:42 - that getters and setters comes with some
13:46 - syntax but basically what we can do now
13:50 - is amazing so down here we can say that
13:53 - Tom dot health minus equals 200 so let's
13:57 - say that he falls off a cliff and he
14:00 - takes 200 damage well now we ensured
14:02 - that he will have a health amount of
14:05 - ceará and then we might let's say want
14:08 - to heal him by 400 well that will now we
14:14 - have ensured that his health will only
14:16 - go up to the maximum which is which is
14:20 - 100 so even though we write this we've
14:24 - made sure that it only goes from the
14:27 - default hundred down to zero and up to a
14:33 - hundred so that's basically getters and
14:37 - setters for you if we wanted to make
14:39 - this code even more pretty we could go
14:42 - in here and have a a max health
14:47 - a private int called max health and we
14:52 - could simply reference the Mad Max
14:55 - health here and here and that would
14:58 - maybe be even cooler but for now I think
15:02 - we're just going to stick with this so
15:05 - I'm just going to go over the code one
15:08 - last time here just to those of you who
15:10 - think still thinks this is difficult so
15:14 - what we're doing is we are defining this
15:16 - custom class called player and the
15:19 - player is going to have a health
15:20 - variable and we create this first we
15:24 - make it private because we don't want to
15:26 - directly be able to access this variable
15:29 - then we set it equal to a hundred by
15:32 - default however we we want to be able to
15:35 - change the variable just making sure as
15:39 - we go along that is going to be stay
15:41 - between 0 and 100 to do this we create
15:45 - the normal getter that will simply
15:47 - return our health amount whenever we we
15:51 - want it we also create a setter that
15:54 - will check if the value is within this
15:57 - boundary and if not limited to either
16:00 - zero or a hundred and if it is within
16:05 - this boundary boundary it's simply going
16:09 - to set the health value equal to
16:13 - whatever was passed in so if we're down
16:15 - here try and write out the default
16:21 - health it's going to say a hundred then
16:23 - we subtract 200 and it's going to go up
16:27 - here and try and set it and it's going
16:29 - to say that the value here is is
16:32 - actually less than or equal to zero and
16:35 - therefore we want to set it equal to
16:36 - zero and that's all it's going to do and
16:38 - then it's going to write out the zero
16:40 - here and then here it's going to add 400
16:45 - so it's going to go here again under the
16:47 - setter and say ok so the value is not
16:50 - less than or equal to zero but it is
16:54 - greater than or equal to 100 so it's
16:57 - going to set health equal to 100 and
16:59 - it's then going to write out
17:01 - that hundred then down here if we were
17:04 - to set health equal to fifty and then
17:08 - write that out then it would go up here
17:12 - and it would say okay we want to set the
17:14 - variable it's not less than or equal to
17:18 - zero it's not greater than or equal to
17:21 - 100 so instead we simply set it equal to
17:24 - the value we passed passed in which is
17:27 - currently 50 and then it's going to
17:29 - print this out by using together I'm
17:33 - returning the health so I hope you
17:36 - really cut that and and now know why
17:39 - these getters and setters are useful and
17:42 - don't worry you'll master them in no
17:45 - time at this point we've come very far
17:48 - into writing c-sharp code and you should
17:51 - be able to write most programs out there
17:53 - just using the tools you have now from
17:56 - this point on it's it's just about
17:58 - making your code more reusable and
18:03 - awesome so now let's run this last time
18:06 - and it's going to print out a hundred
18:09 - zero one hundred again and then finally
18:15 - print out 50 cool so I hope you enjoyed
18:19 - this video and I'll see you in the next
18:21 - one

Cleaned transcript:

thanks for tuning in at brakus hello and welcome to video number 13 in the how to program in csharp course in today's video we're going to have a look at properties also called getters and setters and a property basically allows us to kind of control how we access and change a variable so and that's a very loose definition but I'll show you exactly why this is useful in just a moment first I quickly want to mention that if you have any questions simply go to farm table brackets that come you can write questions there and get answers find the solution to problems in your code and even suggest tutorials if you have any cool ideas so as always let's open up samer in studio and let me give you a good example of a property that is already created for us so when we are using csharp and we make sure to import the system namespace that's a class available to us that I haven't shown you yet this is called the date time class and it handles everything you want to do with dates and time on the system so if we want to get the current system time we would maybe create a new variable called a current time and it should of course be of type date time and we would set it equal to date time dot now and you can see that it tells us that this is a public static variable of type date/time and you can see in here that it says get and that's because we are not actually allowed to change this variable if we were able to change this it would say both get colon or semicolon then set semicolon but this only says get and that means that this is a readonly property so basically this is very very good because it allows us to get the current time and then print it out so let me just show you that this gets our current time and deeds is 730 and it's the data is right there but we cannot actually change the time on our system it would be ridiculous if every time we made a console application we could just change the current time so it's very good that we have this restriction and as you will come to know a lot of what programming is is restricting yourself and your teammates from doing something stupid I mean when your program becomes more complex everything is about making stuff very clear and also restricting you from doing things you're going to regret Oh which will break the application so let's actually have an a look at creating our own get a property or own getter and setter so let's say that we are making a game and we want to create a class for our player that is going to contain for many an information about our players such as health and man and run speed and all kinds of things for now we are simply going to focus on creating a health variable for this player so we might go in and create a public integer and call this health and set it equal to a default of a hundred now inside of our main we might create a player and we might call him Tom and set him equal to a new player like that and in here we can both print out Tom's Hill and we can also change tom's health so we'd say tom dot health equals 40 and we can print out Tom's health now that we've set equal to 40 so this should print out a hundred because that's what it defaults to set it to 40 and then print out it's the new value which is of course 40 so when we play this you can see 100 and then 40 so that works just as we intended it to but let's say that our player class gets a lot more complicated and we don't want to just change the health no we want to create a method that damages our player because that way we can maybe create some hit particles and a damage animation and the sound when the bullet hits and we can do all kinds of stuff we don't just want to change the health behind the scenes all the time so we maybe want to create a public void called damage and this is going to take in an integer with the damage amount and it's simply going to say that health minus equals the damage amount and this is all fine and dandy we can go in here and we can say Tom that damage and we can maybe damage him by 50 and you should have 50 left so then we can print out we can write out Tom's health after we damage him so you can see it now says 50 and we can have all a bunch of logic in here but a problem would then be if you later continued on to it working on something else or another person on your team went back to this and wanted to damage the player and instead of using Tom damaged they simply went in and said Tom health minus minus equals 50 well this is a problem because now Tom with would lose health and it would play a sound or an animation or update the GUI or his health bar or anything like that his health would simply go down behind the scenes and that would be an issue so a what we need to do is simply restrict this from happening so you might be thinking but let's just go in and make this into a private variable and that's fine we can call Tom damage and damage him by let's say 30 this time but now we're not actually able to write out his health so the solution to this problem is making a get only or a yeah get a an access only or get only property so in order to do this we basically need to create what looks like two variables the first one is going to be a private integer and this is the and I'm going to call this underscore health because it's going to be only accessed from within our own player class and this is going to store the actual health of our player and therefore we can also set this equal to a default value such as 100 then we create a public integer and this is the actual property and this is and this is not going to be underscore this is simply going to be health and instead of setting this equal to something or just closing this off with a semicolon in fact we're not going to be using a semicolon at all instead we open and close two curly brackets and I'm going to put these down on and some separate lines here and inside of this we then write get and again we are going to open and close some curly brackets and then we say return underscore health so this is I get only property so basically what this does is it says that whenever we try to get the current health of our player it's simply going to return the private health amount and this means that we cannot actually change the health variable unless we are inside the same class and are able to say underscore health minus equals damage so down here in our main method we can now damage tom by saying tom damage and we can print out tom dot health but we cannot actually say tom dot health minus equals 20 or equals 20 because this is a read only variable and you can say if I try and do this it says property are indexes indexer cannot be assigned to it is readonly so that's super cool and that makes our code much more safe so now when we hit play you can see it it prints out 70 because we start at a hundred then we call the damage method which subtracts our private health amount by whatever we passed in and what we passed in was 30 so this is now equal to 70 and then down here we access the property here which is this health variable and that simply gives us the value here so it might look kind of crazy to do all of this but it's a very important thing to start doing and this is basically the same as doing this some people like to do this on the same line just say get and in here simply say return on the score health and remember this semicolon there and you can see that that looks a lot smaller and more compressed but maybe not as readable that's completely up to you for now I'm going to do it this the other way because I think it's easier to kind of figure out what's going on so that's super cool but let's say that we want to get rid of this damage damage method and actually just want to change our variable by by using the access you here so at the moment we can of course only get our health we can also make a setter for our health we could just remove this and do instead or and not be able to actually print it out but for now we'll just keep this scatter so down here we are going to say set and on the order in which you do this doesn't matter you can create the setter before the getter or this way around so the seller is pretty similar and what we do here is simply reset underscore health we set this variable up here equal to what every we pass in or we set this equal to so that value that we set it equal to down here when we say that we want to print out time that health and then we want Tom dot health to be equal to 20 this value here up here will be called value so that's the keyword for getting that right there so when we print this out here Tom health it should say 20 so basically this is the exact same as simply using a normal variable when you create the standard getter and the standard setter it's the exactly the same as simply making a public integer and using that but we can do more with this with other than just limiting what whether or not we can get our set values we can also change the way that we get and set a variable and what do I mean by this well at the moment here when we change tom's a health and print it out it simply does so it's it changes 100 to 20 but let's say that we want to kind of limit our health let's say that we only wanted to go between zero and a hundred because 100 might be our maximum health and it would be kind of weird if our player could just be healed infinitely or be damaged so than his health was suddenly negative so if we wanted to limit this health what we can do inside of the setter here is we instead of just blindly setting setting it equal to the value we pass in the say that if he'll or if I'm sorry if a value is smaller than or equal to zero oops then we want to set underscore health equal to 0 else if value is greater than or equal to a hundred well then we want to set underscore health equal to a hundred and else meaning if it's not smaller than or equal to zero or not greater than or equal to a hundred so it's somewhere between 1 and 99 well then we simply want to set our health equal to value so this might look very confusing to you and I will admit that getters and setters comes with some syntax but basically what we can do now is amazing so down here we can say that Tom dot health minus equals 200 so let's say that he falls off a cliff and he takes 200 damage well now we ensured that he will have a health amount of ceará and then we might let's say want to heal him by 400 well that will now we have ensured that his health will only go up to the maximum which is which is 100 so even though we write this we've made sure that it only goes from the default hundred down to zero and up to a hundred so that's basically getters and setters for you if we wanted to make this code even more pretty we could go in here and have a a max health a private int called max health and we could simply reference the Mad Max health here and here and that would maybe be even cooler but for now I think we're just going to stick with this so I'm just going to go over the code one last time here just to those of you who think still thinks this is difficult so what we're doing is we are defining this custom class called player and the player is going to have a health variable and we create this first we make it private because we don't want to directly be able to access this variable then we set it equal to a hundred by default however we we want to be able to change the variable just making sure as we go along that is going to be stay between 0 and 100 to do this we create the normal getter that will simply return our health amount whenever we we want it we also create a setter that will check if the value is within this boundary and if not limited to either zero or a hundred and if it is within this boundary boundary it's simply going to set the health value equal to whatever was passed in so if we're down here try and write out the default health it's going to say a hundred then we subtract 200 and it's going to go up here and try and set it and it's going to say that the value here is is actually less than or equal to zero and therefore we want to set it equal to zero and that's all it's going to do and then it's going to write out the zero here and then here it's going to add 400 so it's going to go here again under the setter and say ok so the value is not less than or equal to zero but it is greater than or equal to 100 so it's going to set health equal to 100 and it's then going to write out that hundred then down here if we were to set health equal to fifty and then write that out then it would go up here and it would say okay we want to set the variable it's not less than or equal to zero it's not greater than or equal to 100 so instead we simply set it equal to the value we passed passed in which is currently 50 and then it's going to print this out by using together I'm returning the health so I hope you really cut that and and now know why these getters and setters are useful and don't worry you'll master them in no time at this point we've come very far into writing csharp code and you should be able to write most programs out there just using the tools you have now from this point on it's it's just about making your code more reusable and awesome so now let's run this last time and it's going to print out a hundred zero one hundred again and then finally print out 50 cool so I hope you enjoyed this video and I'll see you in the next one
