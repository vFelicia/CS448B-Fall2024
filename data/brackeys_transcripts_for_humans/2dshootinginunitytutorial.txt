With timestamps:

00:00 - when it comes to shooting in unity
00:01 - there's really two ways to go about it
00:03 - you can do it using prefabs or ray casts
00:06 - and which method you choose depends on
00:08 - what you want to achieve if you want
00:10 - your player to shoot bullets that travel
00:12 - through the air and takes time to reach
00:14 - the target using prefabs is probably the
00:16 - way to go
00:17 - with this method we basically create a
00:19 - bullet prefab and then spawn in a copy
00:21 - of it every time we want to shoot we can
00:24 - then apply forces to the bullet in order
00:26 - to make it move and check to see if it
00:28 - collides with anything in which case we
00:29 - can make it explode and apply damage
00:32 - another way to make your player shoot is
00:34 - by using ray casts instead of your
00:36 - bullets traveling through the air we
00:38 - instantly shoot out an invisible line
00:40 - that checks whether or not we hit
00:42 - anything in that direction the result is
00:44 - a much quicker and precise shot like we
00:46 - see in modern first-person shooters like
00:48 - Call of Duty or counter-strike the two
00:50 - methods are actually very similar we use
00:53 - the same code for triggering the
00:54 - shooting and the same code for applying
00:56 - damage so with that explanation let's
00:59 - get right to it
01:00 - but first let's not jump the gun on this
01:02 - one this video is sponsored by Dennis
01:04 - Ventura Dennis is an awesome game dev
01:06 - tutor who's just launched a new course
01:08 - on udemy the complete c-sharp master
01:10 - class this course will make you
01:12 - completely comfortable writing code in
01:13 - c-sharp and using it for programming
01:15 - your own games in unity it will give you
01:18 - knowledge on many different aspects of
01:19 - c-sharp and teach topics like databases
01:22 - link and WPF and much more at the end of
01:25 - the class you will even have made three
01:27 - games on your own if this sounds like
01:28 - something you're interested in simply
01:30 - click leave in the description to get
01:31 - started and get a discount all right
01:33 - let's start shooting
01:35 - no matter what method that we'd like to
01:38 - use there are a few things that we need
01:40 - to set up one of these is that we need
01:41 - to create a fire point and a fire point
01:43 - is really as simple as it sounds it's
01:45 - just the point from where we want to
01:47 - fire our bullets so if we go ahead and
01:49 - select our player here and right-click
01:51 - on him we can create an empty object and
01:53 - we can then take this object and move it
01:55 - to the place that we would like to fire
01:56 - from so in my case I'm going to move it
01:58 - just outside the barrel here we then
02:00 - rename this object to fire point and now
02:03 - if we take our game view and dock it to
02:06 - the side here and play we can see that
02:08 - as we move the fire point indeed follows
02:10 - our player and if we move to the other
02:12 - direction it
02:13 - so flips however we can also see that
02:16 - the direction of the fire point isn't
02:18 - actually changing and this is a problem
02:20 - because if we try to shoot using this we
02:22 - would fire to the right when we are
02:24 - facing right and we were also fired to
02:25 - the right when we were facing left and
02:27 - so we would hit ourselves and that
02:28 - wouldn't be too pretty and the reason
02:30 - for this it's actually a mistake that I
02:32 - made in the character controller if
02:34 - you're using another movement script
02:35 - this might not happen to you
02:36 - but so those of you who followed our
02:38 - guide on 2d movement we need to select
02:40 - our player and find our character
02:42 - controller 2d and if we open this up
02:44 - it's a really big and complicated script
02:46 - but at the very bottom we have some code
02:48 - for flipping the character and in here I
02:51 - thought it was a good idea to flip the
02:52 - player by inverting the scale on the X
02:54 - but instead it would be much better if
02:56 - we simply rotate the player so let's
02:58 - replace this entire piece of code here
03:00 - with transform rotate and then we want
03:03 - to rotate by a zero on the X 180 on the
03:07 - Y and 0 on the Z and that should do the
03:10 - trick so now if we go and play select
03:12 - our fire point we can see that as we
03:14 - move to the different sides the
03:16 - direction of our fire point is also
03:18 - flipped awesome so now we're ready to
03:20 - start creating our weapon and to do this
03:23 - we'll select our player I'm just gonna
03:25 - collapse the script again let's hit add
03:26 - component and let's type in weapon we
03:29 - want to create a new script
03:30 - let's hit create an ad let's double
03:32 - click it to open it up in visual studio
03:33 - and for now this script is actually
03:35 - going to be really simple we can go in
03:38 - and remove the start method and in step
03:40 - we want to create a reference to our
03:41 - fire point so that we can use it later
03:43 - so in here we'll write public transform
03:46 - and let's call this variable fire point
03:49 - then if we save that we can go into
03:51 - unity and we can also simply take our
03:53 - fire point and drag it into this empty
03:55 - slot and at this point we're ready to
03:57 - start shooting and of course the first
03:59 - thing that we need to figure out is when
04:01 - to shoot so inside of our update method
04:03 - let's create an if statement and what we
04:05 - want to check for here is some player
04:07 - input so we go input dot get button down
04:11 - so this is triggered whenever we push a
04:13 - button and the button that we want to
04:14 - look for is fire one will then close the
04:17 - parentheses and open and close some
04:19 - curly brackets and now every time we
04:21 - press the fire button we want to go
04:23 - ahead and shoot and this is not a
04:25 - function that unity has
04:27 - this is something that we need to create
04:28 - ourselves so let's go down here under
04:30 - the update method let's write void chute
04:33 - open and close some parentheses and some
04:35 - curly brackets so now every time we
04:37 - press the fire button it's going to call
04:40 - the shoot method and everything inside
04:42 - of these two curly brackets is going to
04:45 - be executed so this is where we'll put
04:47 - all of our shooting logic if you want to
04:49 - change what button to press in order to
04:51 - fire you can always go into unity go
04:54 - edit project settings input and find the
04:57 - fire one at the top here and we see
04:59 - currently the button to press is Mouse
05:01 - zero which is left Mouse but you can
05:03 - change this to anything that you'd like
05:05 - I'm gonna change it to space and at this
05:08 - point what we need to do next is going
05:10 - to depend on what method you choose
05:11 - let's start by focusing on prefab
05:13 - shooting so here we first want to go
05:15 - ahead and create a bullet
05:17 - let's save the script and head into
05:18 - unity and in here we want to first
05:20 - create a sprite so that's right click in
05:22 - the hierarchy go to the object and
05:23 - select sprite and the sprite that you
05:25 - want to use here is completely up to you
05:27 - I'm just gonna go under sprite here and
05:29 - search for shot and have this pretty
05:31 - cool shot - sprite I think that looks
05:33 - pretty good and then gonna take this
05:35 - object and rename it to pull it and
05:37 - there are a few things that we need to
05:39 - add to this object the first one is a
05:41 - rigidbody 2d this object will apply
05:44 - physics to a bullet and allow it to
05:46 - travel through air you can play around
05:48 - with these settings to get your bullet
05:49 - to behave in different ways now I don't
05:51 - want any gravity on my bullet I just
05:53 - wanted to travel in a straight path so
05:55 - I'm gonna set gravity scale to zero I
05:57 - also don't want it to be able to rotate
05:58 - in any way so I'm gonna go into
06:00 - constraints and freeze the rotation and
06:02 - finally I really recommend setting
06:03 - collision detection from discrete to
06:06 - continuous this is gonna help the bullet
06:08 - detect all the objects if it's traveling
06:10 - really quickly now the next component we
06:12 - need is a circle Collider so let's hit
06:14 - add component and search for circle
06:16 - Collider 2d I'm just gonna open this up
06:18 - and check that the collider is pretty
06:19 - close to our sprite I think that looks
06:21 - pretty good I'm also going to mark this
06:23 - Collider as a trigger and this is
06:25 - because I don't want my bullet to bounce
06:27 - around the environment I just wanted to
06:29 - notice when it hit something and then
06:30 - explode but you can definitely leave it
06:32 - as a normal Collider if you wanted to
06:34 - keep bouncing around so now we can take
06:36 - this bullet and turn it into a prefabs
06:38 - let's drag it from the arc
06:40 - into our assets folder and we then
06:43 - deleted from our scene so now we have
06:45 - this bullet prefab that we can make
06:46 - copies from let's go into our weapon
06:48 - script and let's create a reference to
06:50 - this object so we'll create a public
06:52 - game object let's name it bullet prefab
06:55 - and then inside of our shoot method we
06:58 - simply want to spawn a bullet into our
07:00 - world remember whenever we want to spawn
07:02 - an object we use instantiate we then
07:05 - feed it the object that we want to spawn
07:06 - so in our case that's our bullet prefab
07:08 - then we need to choose where we want to
07:10 - spawn it we want to spawn it at fire
07:12 - point dot position and then with what
07:15 - rotation and we want to use fire point
07:17 - rotation so we close that off with HTML
07:20 - colon and now if we save this and go
07:22 - into unity and select our player we can
07:25 - see at the bottom here we have the
07:26 - bullet prefab slot here we can take a
07:29 - bullet prefab and drag it in there and
07:31 - now if we play and try to shoot we can
07:34 - see that we are indeed instantiating
07:36 - bullets into a world of course this
07:38 - bullet currently aren't going anywhere
07:40 - but they're definitely there next we can
07:43 - go to I'll pull it and create a new
07:45 - script on this bullet let's just call
07:47 - the script pull it
07:48 - let's take crane add and open it up in
07:50 - visual studio and what we want to do in
07:52 - here is actually really simple in fact
07:54 - we don't even need an update method all
07:56 - we need to do is that right when the
07:58 - bullet spawns so inside of the start
08:01 - method we want to tell the pilot to fly
08:03 - forward to do this we need a speed so
08:05 - we'll go up here and create a public
08:06 - float speed and set it to something like
08:10 - 20 and we also need a reference to a
08:12 - rigidbody since it's our rigidbody that
08:15 - controls our bullet so create a public
08:17 - rigidbody 2d let's just call it RB then
08:21 - inside of our start method we can tell a
08:23 - rigidbody to move so RP dot velocity the
08:27 - velocity is our current speed of the
08:29 - rigidbody on the three axis and we want
08:31 - to set this equal to the forward
08:33 - direction so transform dot and we don't
08:37 - actually want to use forward here
08:38 - because that moves on the set axis and
08:40 - we're making a 2-d game so we don't use
08:42 - this set axis at all is that we want to
08:44 - use right and we then multiply this with
08:47 - our speed so we're basically just saying
08:49 - hey rigidbody please move right
08:51 - according to our speed and
08:54 - if we save this we can see that we now
08:55 - have a speed variable that we can adjust
08:57 - as well as a slot for our rigid body
08:59 - that we can simply drag in and now if we
09:01 - play and try and shoot we can see that
09:03 - our bullet indeed does move forward
09:06 - awesome of course the next step is to
09:08 - have our bullet actually register when
09:11 - it hits something and if we hit an enemy
09:13 - we want to apply some damage to do this
09:16 - we go into our bullet script we used a
09:18 - really handy function in unity called
09:20 - ontriggerenter so we'll write void on
09:23 - trigger enter 2 D will open closed some
09:27 - parenthesis and some curly brackets and
09:29 - of course as the name suggests this
09:31 - function will be called whenever
09:32 - something enters our trigger in our case
09:34 - whenever out bullet hits something and
09:36 - when that happens we want to do some
09:38 - different things we could for example
09:40 - destroy I'll pull it and maybe before we
09:42 - do that we can print out the name of the
09:44 - object that we hit but in order to get
09:46 - some information about the object we
09:48 - need to go up here and add an argument
09:50 - we want to add a Collider 2d and we'll
09:53 - call this something like hit info
09:54 - because it will store information about
09:56 - what we hit then inside of a function we
09:59 - can go debug log in order to print out a
10:02 - message and we want to print out hit
10:04 - info dot name so the name of the object
10:06 - that we hit if we save this and go to
10:09 - unity and play the game we then shoot
10:11 - our enemy and you can see as soon as our
10:13 - bullet hits our enemy it prints out
10:15 - enemy pretty cool and of course if we
10:18 - shoot in the opposite direction nothing
10:20 - happens because we didn't hit anything
10:22 - awesome of course we don't just want to
10:24 - print out enemy we actually want to
10:26 - damage our enemy and currently on my
10:29 - enemy I have this box Collider as well
10:31 - as an enemy script and this is a fairly
10:34 - simple script that you can easily just
10:36 - copy from the screen here what we're
10:38 - doing is just giving our enemies some
10:39 - health and then we are adding a function
10:41 - that allows it to take damage of course
10:44 - we want to specify how much damage so it
10:46 - takes in an argument with exactly that
10:48 - we then subtract from our health the
10:50 - amount of damage specified and if our
10:52 - health goes below zero well then we want
10:55 - to die so that takes us down here and
10:57 - this simply creates a death effect as
10:59 - well as destroys the enemy fairly simple
11:03 - stuff the only thing to take note of
11:04 - here is that in order to trigger this
11:06 - take
11:07 - which function I've marked it as public
11:09 - so that we can now go inside of our
11:11 - bullet script and called it from in here
11:13 - so what we want to do here is go hit
11:15 - info dot get component of type enemy so
11:19 - we try and find an enemy component on
11:20 - the object that we hit of course we
11:23 - aren't always going to be hitting an
11:24 - enemy so we're not sure that there's
11:26 - gonna be a component there and because
11:27 - of this we want to store this in a
11:29 - variable the variable is going to be of
11:31 - type enemy and it's just call it enemy
11:33 - also and right after here we want to
11:35 - check if enemy is not equal to null so
11:38 - if we actually found an enemy component
11:40 - on the object that we hit well in this
11:42 - case we can go enemy dot take damage and
11:45 - call the function that just showed you
11:46 - and here we can input any number we
11:48 - could put 30 damage 40 damage whatever
11:51 - you'd like or we could go to the top and
11:53 - create a variable for this so we'll
11:55 - create a public integer let's call it
11:57 - damaged and set it equal to 40 by
11:59 - default and then we can simply input our
12:01 - damaged variable down here and now we
12:03 - should see that whenever we play and
12:05 - shoot our enemy the health of our enemy
12:07 - gets reduced and once we reach zero or
12:10 - enemy explodes super coal and if you
12:13 - want to make this look even cooler we
12:15 - can create a tiny impact effect whenever
12:17 - a bullet collides with something in fact
12:19 - I've gone ahead and prepared a prefab
12:21 - here called impact effect and this is
12:23 - just a sprite renderer with some
12:25 - animation let me just add it to the
12:26 - scene here and play it back so that you
12:28 - can see very simple I've also gone under
12:31 - the animation and made sure to disable
12:33 - looping so inside of our bullet script
12:36 - we could create a public game object
12:39 - impact effect and then whenever we hit
12:42 - something we could simply create an
12:44 - impact effect so instantiate impact
12:46 - effect the place where we want to create
12:48 - it is transformed our position and
12:51 - transform rotation let's save that going
12:54 - to unity select our bullet and now under
12:57 - our bullet script we now have an empty
12:59 - impact effect let's drag our impact
13:02 - effect prefab under there hit play and
13:04 - now every time we hit our enemy we can
13:07 - see a tiny impact effect gets created
13:09 - and the same thing if we hit anything
13:11 - else like a platform pretty cool and
13:13 - also we can delete this again so that is
13:15 - how you can do prefab based shooting now
13:18 - that's wine time back a bit and see what
13:20 - we can do with break
13:21 - casting so this time we have no bullet
13:22 - prefabs flying around instead we do
13:24 - everything inside of our weapon script
13:27 - which currently looks like this and of
13:29 - course the first step to ray casting is
13:31 - sending out a ray to do that we use
13:34 - physics 2d dot ray cast and this will
13:37 - send out a ray from a point and then in
13:39 - a certain direction and the point that
13:41 - we want to fire from is of course fire
13:43 - point position and the direction is fire
13:46 - point dot right and this will go ahead
13:48 - and send out a ray it's really that
13:50 - simple to do of course we need to store
13:52 - some information about what we hit if we
13:55 - hit anything at all and to do that we'll
13:57 - go ahead and create a variable here
13:59 - called ray cast hit 2d and we'll call it
14:02 - something like hit info because it
14:04 - stores information about what we hit
14:06 - then right underneath here we can say
14:08 - that if hit info and this is just a very
14:11 - simple way of writing if we hit
14:13 - something well then we could for example
14:15 - print out the name of what we hit so we
14:17 - could go debug that log hit info dot
14:20 - transform dot name now if we save this
14:23 - and go into unity and hit play and try
14:25 - to shoot in the direction of our enemy
14:27 - we can see that a prints enemy whereas
14:30 - if we shoot in the opposite direction
14:31 - nothing happens so indeed this is
14:33 - working but it's currently completely
14:36 - invisible and it's not even damaging our
14:38 - enemy in any way
14:39 - luckily applying damage to our enemy in
14:41 - this way is just a simple as with rakish
14:44 - shooting in fact the code is pretty much
14:46 - identical first we take the hidden foe
14:48 - object we go under its transform and try
14:50 - to get a component on the object called
14:53 - enemy of course we're not always going
14:55 - to be hitting an enemy so we want to
14:56 - store the result of this in an enemy
14:59 - variable I will just call it enemy as
15:00 - well then we'll check if we actually hit
15:03 - an enemy so if enemy is not equal to
15:05 - null well then we can call enemy dot
15:07 - take damage and input some damaged
15:10 - amount and the last time we put this
15:11 - code on our bullet script but now we
15:13 - simply have it here in the same script
15:15 - so we'll also put our damage variable
15:17 - here let's go public int damage and set
15:20 - it to 40 by default and let's then
15:22 - simply pass that in down here and now if
15:25 - we play the game with our enemy selected
15:26 - and try and shoot we can see that the
15:28 - health does indeed go down and when it
15:30 - reaches zero our enemy dies but again
15:33 - this is totally in this
15:34 - we want some kind of graphic showing
15:36 - what's happening so we could add an
15:38 - impact effect just like we did with Ray
15:40 - cash shooting and it's really just a
15:42 - symbol we create a public game object
15:44 - call it impact effect and then if we hit
15:47 - something
15:48 - we instantiate the impact effect at the
15:51 - point that we hit so hit info dot point
15:53 - and the rotation here doesn't matter so
15:56 - we'll simply use catonian dud identity
15:58 - which is basically just a very fancy way
16:00 - of saying no rotation and so we could
16:02 - select our player and drag our impact
16:04 - effect into the slot and now we still
16:06 - can't see any kind of bullet but we are
16:08 - able to see the impact effect itself so
16:11 - the last thing that we need to add is
16:13 - some visual feedback showing where we
16:15 - shot and for this I really like to use a
16:17 - line so we'll right click here and go
16:19 - and do effects and create a line and by
16:22 - default this is not going to be visible
16:23 - and that's because of a couple of things
16:25 - first of all we want to go to the order
16:27 - in layer here and bump that up to make
16:29 - sure it's drawn on top of everything
16:30 - else and also if we go under positions
16:32 - we can see the two positions that
16:34 - currently make up our line it goes from
16:36 - 0 0 0 to 0 0 1 and so it's only changing
16:40 - in the z-axis which we can't see from a
16:42 - 2d perspective so instead let's change
16:44 - that to 0 and try and move it on the X
16:47 - of course we can also adjust the
16:48 - appearance of a line if we go under
16:50 - color we get this gradient editor where
16:52 - we can adjust the color over the length
16:54 - of our line so if we want it to tend it
16:57 - in any way we do that there I'm just
16:59 - gonna leave it white we can also add
17:01 - some int gap vertices if you don't like
17:03 - it being completely square just to round
17:05 - it off a bit and finally we can adjust
17:06 - it with by simply dragging on this line
17:08 - here so I think something like this
17:10 - looks pretty nice
17:11 - I want it to be fairly subtle we can
17:13 - also go to the top here and tell it to
17:15 - use world space so that we can't really
17:17 - move it anywhere unless we change the
17:19 - positions in our array now let's take
17:21 - this line and drag it under the player
17:23 - and let's try to control it through our
17:24 - script first we need a reference to it
17:26 - so we'll create a public line renderer
17:28 - let's just call it line renderer then
17:31 - whenever we shoot and hit something we
17:33 - want a line to go from the point where
17:35 - we shot to the point where we hit so we
17:37 - can go line renderer dot set position
17:40 - and we want to set the first position so
17:42 - index 0 - fire point dot position well
17:47 - then set our end positions
17:48 - line renderer that said position one to
17:51 - hit info dot point and that should work
17:55 - just fine however we don't always hit
17:58 - something and in the case that we don't
17:59 - hit anything we just want our line to
18:01 - continue infinitely in space or at least
18:04 - give the appearance that it does to do
18:06 - that we'll use the same code so we'll
18:08 - copy it and then create and felis to
18:10 - these if statements or in the case that
18:11 - we don't hit something we can use these
18:13 - same two lines we want to set the start
18:15 - position to our fire point however we
18:18 - don't have an end position so instead
18:20 - we'll use fire point dot position and
18:23 - then add on to that fire point dot write
18:26 - x say a hundred so it's those of you who
18:30 - aren't too familiar with vector math
18:31 - basically what we're doing here is we're
18:33 - taking the start position and we're just
18:35 - shifting it 100 units forward so now if
18:37 - we save that and select our player and
18:39 - drag in the line we can see that
18:41 - whenever we fire our line will be drawn
18:43 - between us and the point that we hit
18:45 - pretty cool of course currently our line
18:47 - is always visible to change this will
18:50 - select a line and disable the line
18:51 - renderer and then inside of our script
18:53 - whenever we shoot we want to enable it
18:55 - so we'll go line renderer dot enabled
18:58 - equals true we then want to wait for a
19:00 - very tiny amount of time in fact we only
19:02 - want to wait one frame so we'll wait one
19:06 - frame I'll show you how to do this in a
19:08 - sec and then we want to disable it again
19:10 - so a line renderer dot enabled equals
19:12 - false and the way that we wait one frame
19:15 - in unity is actually fairly simple
19:17 - however we can't do it inside of a
19:19 - normal function instead we need to turn
19:21 - this into what we call a co-wrote team
19:23 - and curl teams are fairly simple to use
19:25 - but their syntax is pretty scary
19:28 - so just right after me for now instead
19:29 - of void here we'll write I in numerator
19:32 - so now we've turned it into a routine we
19:35 - can't just call it the normal way
19:36 - instead we need to add start co-routine
19:39 - because we want to tell unity that it's
19:41 - a kuroh teen and we want to start it and
19:42 - then inside of the parentheses we'll put
19:44 - our function and so now we can go down
19:47 - here and we can wait a frame and to do
19:49 - that we write yield return zero
19:55 - again how co-routines work is the
19:57 - subject for another video for now just
19:59 - right after me and of course have a link
20:01 - to where you can learn more in the
20:02 - description and now we can simply save
20:05 - and head into unity and maximize our
20:07 - game and everything should be working so
20:10 - let's try and fire and indeed everything
20:12 - is working awesome that's pretty much it
20:15 - for this video if you enjoyed it make
20:16 - sure to subscribe and bring that
20:18 - notification bell so you don't miss the
20:20 - next one also make sure to follow our
20:21 - new Instagram for updates and behind the
20:24 - scenes stuff also don't forget to check
20:25 - out the complete C sharp master class
20:27 - using the link in the description on
20:28 - that thanks for watching and I will see
20:30 - you in the next video thanks of the
20:45 - awesome patreon supporters who donated
20:47 - in August and a special thanks to
20:49 - Alexander player simmer io cheater 3d
20:51 - infinity PPR - VR systems Sybok mommy
20:54 - Thirteen's kirk personify thanks so long
20:56 - Lilith Clinton Vince Kuya Ronan Tynan
20:59 - Sullivan for presea Timah for the park
21:01 - James P Bruins cat now Kiyosaki Gregory
21:03 - Pierce Larry tweet cure Swedish key
21:05 - James Rogers propfan
21:07 - Robert boon Anthony patent and Erasmus
21:09 - you guys Rock

Cleaned transcript:

when it comes to shooting in unity there's really two ways to go about it you can do it using prefabs or ray casts and which method you choose depends on what you want to achieve if you want your player to shoot bullets that travel through the air and takes time to reach the target using prefabs is probably the way to go with this method we basically create a bullet prefab and then spawn in a copy of it every time we want to shoot we can then apply forces to the bullet in order to make it move and check to see if it collides with anything in which case we can make it explode and apply damage another way to make your player shoot is by using ray casts instead of your bullets traveling through the air we instantly shoot out an invisible line that checks whether or not we hit anything in that direction the result is a much quicker and precise shot like we see in modern firstperson shooters like Call of Duty or counterstrike the two methods are actually very similar we use the same code for triggering the shooting and the same code for applying damage so with that explanation let's get right to it but first let's not jump the gun on this one this video is sponsored by Dennis Ventura Dennis is an awesome game dev tutor who's just launched a new course on udemy the complete csharp master class this course will make you completely comfortable writing code in csharp and using it for programming your own games in unity it will give you knowledge on many different aspects of csharp and teach topics like databases link and WPF and much more at the end of the class you will even have made three games on your own if this sounds like something you're interested in simply click leave in the description to get started and get a discount all right let's start shooting no matter what method that we'd like to use there are a few things that we need to set up one of these is that we need to create a fire point and a fire point is really as simple as it sounds it's just the point from where we want to fire our bullets so if we go ahead and select our player here and rightclick on him we can create an empty object and we can then take this object and move it to the place that we would like to fire from so in my case I'm going to move it just outside the barrel here we then rename this object to fire point and now if we take our game view and dock it to the side here and play we can see that as we move the fire point indeed follows our player and if we move to the other direction it so flips however we can also see that the direction of the fire point isn't actually changing and this is a problem because if we try to shoot using this we would fire to the right when we are facing right and we were also fired to the right when we were facing left and so we would hit ourselves and that wouldn't be too pretty and the reason for this it's actually a mistake that I made in the character controller if you're using another movement script this might not happen to you but so those of you who followed our guide on 2d movement we need to select our player and find our character controller 2d and if we open this up it's a really big and complicated script but at the very bottom we have some code for flipping the character and in here I thought it was a good idea to flip the player by inverting the scale on the X but instead it would be much better if we simply rotate the player so let's replace this entire piece of code here with transform rotate and then we want to rotate by a zero on the X 180 on the Y and 0 on the Z and that should do the trick so now if we go and play select our fire point we can see that as we move to the different sides the direction of our fire point is also flipped awesome so now we're ready to start creating our weapon and to do this we'll select our player I'm just gonna collapse the script again let's hit add component and let's type in weapon we want to create a new script let's hit create an ad let's double click it to open it up in visual studio and for now this script is actually going to be really simple we can go in and remove the start method and in step we want to create a reference to our fire point so that we can use it later so in here we'll write public transform and let's call this variable fire point then if we save that we can go into unity and we can also simply take our fire point and drag it into this empty slot and at this point we're ready to start shooting and of course the first thing that we need to figure out is when to shoot so inside of our update method let's create an if statement and what we want to check for here is some player input so we go input dot get button down so this is triggered whenever we push a button and the button that we want to look for is fire one will then close the parentheses and open and close some curly brackets and now every time we press the fire button we want to go ahead and shoot and this is not a function that unity has this is something that we need to create ourselves so let's go down here under the update method let's write void chute open and close some parentheses and some curly brackets so now every time we press the fire button it's going to call the shoot method and everything inside of these two curly brackets is going to be executed so this is where we'll put all of our shooting logic if you want to change what button to press in order to fire you can always go into unity go edit project settings input and find the fire one at the top here and we see currently the button to press is Mouse zero which is left Mouse but you can change this to anything that you'd like I'm gonna change it to space and at this point what we need to do next is going to depend on what method you choose let's start by focusing on prefab shooting so here we first want to go ahead and create a bullet let's save the script and head into unity and in here we want to first create a sprite so that's right click in the hierarchy go to the object and select sprite and the sprite that you want to use here is completely up to you I'm just gonna go under sprite here and search for shot and have this pretty cool shot sprite I think that looks pretty good and then gonna take this object and rename it to pull it and there are a few things that we need to add to this object the first one is a rigidbody 2d this object will apply physics to a bullet and allow it to travel through air you can play around with these settings to get your bullet to behave in different ways now I don't want any gravity on my bullet I just wanted to travel in a straight path so I'm gonna set gravity scale to zero I also don't want it to be able to rotate in any way so I'm gonna go into constraints and freeze the rotation and finally I really recommend setting collision detection from discrete to continuous this is gonna help the bullet detect all the objects if it's traveling really quickly now the next component we need is a circle Collider so let's hit add component and search for circle Collider 2d I'm just gonna open this up and check that the collider is pretty close to our sprite I think that looks pretty good I'm also going to mark this Collider as a trigger and this is because I don't want my bullet to bounce around the environment I just wanted to notice when it hit something and then explode but you can definitely leave it as a normal Collider if you wanted to keep bouncing around so now we can take this bullet and turn it into a prefabs let's drag it from the arc into our assets folder and we then deleted from our scene so now we have this bullet prefab that we can make copies from let's go into our weapon script and let's create a reference to this object so we'll create a public game object let's name it bullet prefab and then inside of our shoot method we simply want to spawn a bullet into our world remember whenever we want to spawn an object we use instantiate we then feed it the object that we want to spawn so in our case that's our bullet prefab then we need to choose where we want to spawn it we want to spawn it at fire point dot position and then with what rotation and we want to use fire point rotation so we close that off with HTML colon and now if we save this and go into unity and select our player we can see at the bottom here we have the bullet prefab slot here we can take a bullet prefab and drag it in there and now if we play and try to shoot we can see that we are indeed instantiating bullets into a world of course this bullet currently aren't going anywhere but they're definitely there next we can go to I'll pull it and create a new script on this bullet let's just call the script pull it let's take crane add and open it up in visual studio and what we want to do in here is actually really simple in fact we don't even need an update method all we need to do is that right when the bullet spawns so inside of the start method we want to tell the pilot to fly forward to do this we need a speed so we'll go up here and create a public float speed and set it to something like 20 and we also need a reference to a rigidbody since it's our rigidbody that controls our bullet so create a public rigidbody 2d let's just call it RB then inside of our start method we can tell a rigidbody to move so RP dot velocity the velocity is our current speed of the rigidbody on the three axis and we want to set this equal to the forward direction so transform dot and we don't actually want to use forward here because that moves on the set axis and we're making a 2d game so we don't use this set axis at all is that we want to use right and we then multiply this with our speed so we're basically just saying hey rigidbody please move right according to our speed and if we save this we can see that we now have a speed variable that we can adjust as well as a slot for our rigid body that we can simply drag in and now if we play and try and shoot we can see that our bullet indeed does move forward awesome of course the next step is to have our bullet actually register when it hits something and if we hit an enemy we want to apply some damage to do this we go into our bullet script we used a really handy function in unity called ontriggerenter so we'll write void on trigger enter 2 D will open closed some parenthesis and some curly brackets and of course as the name suggests this function will be called whenever something enters our trigger in our case whenever out bullet hits something and when that happens we want to do some different things we could for example destroy I'll pull it and maybe before we do that we can print out the name of the object that we hit but in order to get some information about the object we need to go up here and add an argument we want to add a Collider 2d and we'll call this something like hit info because it will store information about what we hit then inside of a function we can go debug log in order to print out a message and we want to print out hit info dot name so the name of the object that we hit if we save this and go to unity and play the game we then shoot our enemy and you can see as soon as our bullet hits our enemy it prints out enemy pretty cool and of course if we shoot in the opposite direction nothing happens because we didn't hit anything awesome of course we don't just want to print out enemy we actually want to damage our enemy and currently on my enemy I have this box Collider as well as an enemy script and this is a fairly simple script that you can easily just copy from the screen here what we're doing is just giving our enemies some health and then we are adding a function that allows it to take damage of course we want to specify how much damage so it takes in an argument with exactly that we then subtract from our health the amount of damage specified and if our health goes below zero well then we want to die so that takes us down here and this simply creates a death effect as well as destroys the enemy fairly simple stuff the only thing to take note of here is that in order to trigger this take which function I've marked it as public so that we can now go inside of our bullet script and called it from in here so what we want to do here is go hit info dot get component of type enemy so we try and find an enemy component on the object that we hit of course we aren't always going to be hitting an enemy so we're not sure that there's gonna be a component there and because of this we want to store this in a variable the variable is going to be of type enemy and it's just call it enemy also and right after here we want to check if enemy is not equal to null so if we actually found an enemy component on the object that we hit well in this case we can go enemy dot take damage and call the function that just showed you and here we can input any number we could put 30 damage 40 damage whatever you'd like or we could go to the top and create a variable for this so we'll create a public integer let's call it damaged and set it equal to 40 by default and then we can simply input our damaged variable down here and now we should see that whenever we play and shoot our enemy the health of our enemy gets reduced and once we reach zero or enemy explodes super coal and if you want to make this look even cooler we can create a tiny impact effect whenever a bullet collides with something in fact I've gone ahead and prepared a prefab here called impact effect and this is just a sprite renderer with some animation let me just add it to the scene here and play it back so that you can see very simple I've also gone under the animation and made sure to disable looping so inside of our bullet script we could create a public game object impact effect and then whenever we hit something we could simply create an impact effect so instantiate impact effect the place where we want to create it is transformed our position and transform rotation let's save that going to unity select our bullet and now under our bullet script we now have an empty impact effect let's drag our impact effect prefab under there hit play and now every time we hit our enemy we can see a tiny impact effect gets created and the same thing if we hit anything else like a platform pretty cool and also we can delete this again so that is how you can do prefab based shooting now that's wine time back a bit and see what we can do with break casting so this time we have no bullet prefabs flying around instead we do everything inside of our weapon script which currently looks like this and of course the first step to ray casting is sending out a ray to do that we use physics 2d dot ray cast and this will send out a ray from a point and then in a certain direction and the point that we want to fire from is of course fire point position and the direction is fire point dot right and this will go ahead and send out a ray it's really that simple to do of course we need to store some information about what we hit if we hit anything at all and to do that we'll go ahead and create a variable here called ray cast hit 2d and we'll call it something like hit info because it stores information about what we hit then right underneath here we can say that if hit info and this is just a very simple way of writing if we hit something well then we could for example print out the name of what we hit so we could go debug that log hit info dot transform dot name now if we save this and go into unity and hit play and try to shoot in the direction of our enemy we can see that a prints enemy whereas if we shoot in the opposite direction nothing happens so indeed this is working but it's currently completely invisible and it's not even damaging our enemy in any way luckily applying damage to our enemy in this way is just a simple as with rakish shooting in fact the code is pretty much identical first we take the hidden foe object we go under its transform and try to get a component on the object called enemy of course we're not always going to be hitting an enemy so we want to store the result of this in an enemy variable I will just call it enemy as well then we'll check if we actually hit an enemy so if enemy is not equal to null well then we can call enemy dot take damage and input some damaged amount and the last time we put this code on our bullet script but now we simply have it here in the same script so we'll also put our damage variable here let's go public int damage and set it to 40 by default and let's then simply pass that in down here and now if we play the game with our enemy selected and try and shoot we can see that the health does indeed go down and when it reaches zero our enemy dies but again this is totally in this we want some kind of graphic showing what's happening so we could add an impact effect just like we did with Ray cash shooting and it's really just a symbol we create a public game object call it impact effect and then if we hit something we instantiate the impact effect at the point that we hit so hit info dot point and the rotation here doesn't matter so we'll simply use catonian dud identity which is basically just a very fancy way of saying no rotation and so we could select our player and drag our impact effect into the slot and now we still can't see any kind of bullet but we are able to see the impact effect itself so the last thing that we need to add is some visual feedback showing where we shot and for this I really like to use a line so we'll right click here and go and do effects and create a line and by default this is not going to be visible and that's because of a couple of things first of all we want to go to the order in layer here and bump that up to make sure it's drawn on top of everything else and also if we go under positions we can see the two positions that currently make up our line it goes from 0 0 0 to 0 0 1 and so it's only changing in the zaxis which we can't see from a 2d perspective so instead let's change that to 0 and try and move it on the X of course we can also adjust the appearance of a line if we go under color we get this gradient editor where we can adjust the color over the length of our line so if we want it to tend it in any way we do that there I'm just gonna leave it white we can also add some int gap vertices if you don't like it being completely square just to round it off a bit and finally we can adjust it with by simply dragging on this line here so I think something like this looks pretty nice I want it to be fairly subtle we can also go to the top here and tell it to use world space so that we can't really move it anywhere unless we change the positions in our array now let's take this line and drag it under the player and let's try to control it through our script first we need a reference to it so we'll create a public line renderer let's just call it line renderer then whenever we shoot and hit something we want a line to go from the point where we shot to the point where we hit so we can go line renderer dot set position and we want to set the first position so index 0 fire point dot position well then set our end positions line renderer that said position one to hit info dot point and that should work just fine however we don't always hit something and in the case that we don't hit anything we just want our line to continue infinitely in space or at least give the appearance that it does to do that we'll use the same code so we'll copy it and then create and felis to these if statements or in the case that we don't hit something we can use these same two lines we want to set the start position to our fire point however we don't have an end position so instead we'll use fire point dot position and then add on to that fire point dot write x say a hundred so it's those of you who aren't too familiar with vector math basically what we're doing here is we're taking the start position and we're just shifting it 100 units forward so now if we save that and select our player and drag in the line we can see that whenever we fire our line will be drawn between us and the point that we hit pretty cool of course currently our line is always visible to change this will select a line and disable the line renderer and then inside of our script whenever we shoot we want to enable it so we'll go line renderer dot enabled equals true we then want to wait for a very tiny amount of time in fact we only want to wait one frame so we'll wait one frame I'll show you how to do this in a sec and then we want to disable it again so a line renderer dot enabled equals false and the way that we wait one frame in unity is actually fairly simple however we can't do it inside of a normal function instead we need to turn this into what we call a cowrote team and curl teams are fairly simple to use but their syntax is pretty scary so just right after me for now instead of void here we'll write I in numerator so now we've turned it into a routine we can't just call it the normal way instead we need to add start coroutine because we want to tell unity that it's a kuroh teen and we want to start it and then inside of the parentheses we'll put our function and so now we can go down here and we can wait a frame and to do that we write yield return zero again how coroutines work is the subject for another video for now just right after me and of course have a link to where you can learn more in the description and now we can simply save and head into unity and maximize our game and everything should be working so let's try and fire and indeed everything is working awesome that's pretty much it for this video if you enjoyed it make sure to subscribe and bring that notification bell so you don't miss the next one also make sure to follow our new Instagram for updates and behind the scenes stuff also don't forget to check out the complete C sharp master class using the link in the description on that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in August and a special thanks to Alexander player simmer io cheater 3d infinity PPR VR systems Sybok mommy Thirteen's kirk personify thanks so long Lilith Clinton Vince Kuya Ronan Tynan Sullivan for presea Timah for the park James P Bruins cat now Kiyosaki Gregory Pierce Larry tweet cure Swedish key James Rogers propfan Robert boon Anthony patent and Erasmus you guys Rock
