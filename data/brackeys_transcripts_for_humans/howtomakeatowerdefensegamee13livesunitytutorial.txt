With timestamps:

00:00 - this video is brought to you by our own
00:01 - Metta thank you so much for donating if
00:03 - you want to support breakage yourself
00:04 - you can go to patreon.com/scishow cheese
00:06 - thanks for tuning in at brac ease hello
00:11 - I want to welcome to this video and
00:12 - critic and tower defense game in unity
00:13 - today we'll be adding a large calendar
00:15 - to our player stats and will also be
00:17 - displaying that on the UI we'll also
00:19 - start creating a game manager that will
00:22 - do something whenever we run out of
00:24 - lives right now we'll just throw a debug
00:26 - padlock statement and we'll also add
00:28 - some health to our enemies and a cool
00:30 - death effect whenever they die so let's
00:32 - just get right into it so you can see
00:34 - I'm here in unity and what I want to
00:36 - begin with is adding some way to keep
00:37 - track of how many lives we have left
00:39 - let's find our player stats crypt and
00:41 - double click that to open a table in
00:43 - visual studio and then we can add a new
00:45 - variable to this and this is also going
00:47 - to be a public static variable just like
00:49 - our money so we'll make a public static
00:51 - integer with the amount of lives then
00:54 - we'll also create a public integer that
00:57 - is non-static with the amount of lives
00:59 - that we want to start with so our start
01:01 - lives and we'll just default that to
01:02 - something like 20 then down in our start
01:05 - method we said lives equal to start
01:08 - lives whoops
01:10 - start lives there we go so whenever we
01:14 - start the game our lives will be
01:15 - initialized with them with a value of 20
01:17 - but right now we can't really see this
01:20 - happening so in order to display this on
01:22 - the screen let's create some UI you can
01:25 - see that we have our first canvas here
01:27 - and this is the overlay canvas that is
01:30 - just put on top of the screen we also
01:32 - have another canvas here which is our
01:34 - world canvas that is shown at the bottom
01:36 - of our map let's go and hit and rename
01:38 - these properly so let's have this be our
01:41 - overlay canvas and this one be the
01:46 - bottom canvas so now that they are named
01:50 - accordingly we can go ahead and
01:52 - duplicate our bottom canvas by pressing
01:54 - ctrl D or command D if you're on the Mac
01:55 - and let's just move this up I will also
01:58 - switch to the front or the top view here
02:01 - by pressing on the y-axis this will just
02:03 - give me a bit of overview of what's
02:05 - going on and switch to the 2d tools over
02:07 - here so that we can easily manipulate
02:09 - the canvas so now that we've moved this
02:12 - up to the top
02:13 - this is where I want to display our
02:14 - lives so let's rename this here to on
02:17 - top canvas and let's also maybe change
02:22 - the format of this a tiny bit so the
02:25 - first thing that I want to do is change
02:26 - the scale something like 0.1 times 0.1
02:30 - times 0.1 and that makes it really huge
02:34 - then I want to fit it back in here with
02:36 - our map and just drag it up a bit and
02:39 - make some more room then I want to take
02:42 - our money element here and just flat out
02:45 - delete that and instead let's edit our
02:47 - timer so right now you can see it scales
02:49 - with our screen again make sure that it
02:51 - does that by going to stretch and
02:53 - holding down alt and clicking in the
02:54 - bottom right corner and then what we can
02:56 - do is maybe centering this on the X here
03:00 - and then snapping it to the bottom so
03:02 - that it will sit right on top of our map
03:05 - then we can maybe take our entire canvas
03:07 - and drag it down a little bit to
03:09 - decrease the distance from our map to
03:12 - the font and then we can rename this one
03:14 - to our lives and let's put some actual
03:17 - text in here so let's say on 20 lives
03:20 - and let's just increase the size of this
03:23 - so we can put our font size to something
03:25 - like maybe 204 and I think that looks
03:29 - pretty good and we can maybe even
03:31 - decrease the size here or the distance
03:33 - here from the map just drag it down a
03:34 - tiny bit more so I think overall this
03:38 - looks pretty great and I think it's very
03:41 - dramatic displaying the lives in such a
03:43 - big way so it's pretty essential to
03:45 - display important information in large
03:48 - places so that the user can't help but
03:51 - notice how many lives he has left so now
03:53 - what we can do is maybe link this so
03:55 - that it will actually change with our
03:57 - action live amount so let's go on to on
04:01 - to our lives here and create a new
04:02 - component just like we added the money
04:04 - you I will have a very little symbol
04:06 - script here called the lives UI let's
04:09 - just hit create an add on that and
04:10 - double-click it to open it up in visual
04:12 - studio and it's just reload this and you
04:15 - can see that we can just quickly edit
04:17 - this class first off we'll be
04:19 - implementing unity engine dot UI so that
04:22 - we can now create a variable up here
04:24 - with a reference to our
04:26 - text and then we'll call this one the
04:28 - live text then what we can do is every
04:31 - time in the update function and yes this
04:33 - might not again be the most efficient
04:35 - way but because our game is so small
04:37 - this is really not going to matter if
04:39 - you're pushing to mobile you might want
04:41 - to consider doing this in a curio team
04:43 - instead or having it linked to the
04:45 - player stats in some way but for now we
04:47 - can simply go and check for this each
04:51 - time we do the update and we're simply
04:53 - going to check if or you have check we
04:55 - can simply going to set live text here
05:00 - live text add text equal to player stats
05:02 - dot lives there you go and that should
05:07 - of course this is now an integer so we
05:09 - need to convert it into a string but we
05:11 - actually don't need to do this whenever
05:13 - we add a string on to it and we want to
05:15 - add space lives on to the number here
05:19 - and that actually makes unity convert
05:22 - this interesting automatically but if
05:24 - you want to be explicit you can just as
05:26 - well do to string in there just to be
05:29 - very clear about what you're doing but
05:31 - that's completely up to you so now that
05:33 - we've actually done this we can go back
05:34 - into unity and we of course want to link
05:37 - our text object up to the script so
05:39 - let's just drag our text into the lives
05:42 - text field cool so this will actually
05:46 - not be noticeable if you just hit play
05:48 - right now we won't get any arrows but
05:49 - nothing will change and that that's
05:51 - because our lives will they start at 20
05:53 - and they don't change in any way so what
05:56 - we'll do is just go to our game master
05:57 - going to play your stats and then change
06:00 - our start lives to something like twelve
06:02 - just to see them change so let's hit
06:04 - play here and they will now say twelve
06:06 - lives so that's awesome so let's just
06:08 - put this at one for testing and we can
06:11 - see what happens when we decrease the
06:14 - lives and we when we go to zero so let's
06:16 - have a look at that I also want to
06:18 - change the wave spawn here where the
06:20 - time between waves should be ten instead
06:22 - of twenty I think that's too much and I
06:25 - will also go into our prefabs and find
06:27 - our enemy and make sure to increase the
06:30 - speed here to fifty just when testing so
06:32 - we don't have to wait that long
06:34 - then while I'll do is double click on
06:36 - the enemy script and let's have a look
06:38 - at what happens when he
06:40 - the last Waypoint which is the end of
06:43 - his path so in this case we want to
06:45 - reduce the amount of lives the player
06:49 - has and we probably want to destroy all
06:51 - our enemy here so right now we are
06:54 - simply destroying the enemy and then
06:56 - returning I want to put this into a
06:58 - separate function so we have a clear
07:00 - overview of what's going on so whenever
07:02 - you have the ability to group little
07:04 - pieces of coastal code like this for
07:06 - example changing the amount of lives and
07:09 - destroying the object which is can all
07:11 - be categorized under path ended or end
07:16 - path or something like that then you
07:20 - pretty much want to do that so let's
07:21 - just put the destroy call in here and
07:25 - let's now call end path here and then we
07:29 - can set lives or player stats dot lives
07:34 - - - that means - equals 1 cool so now
07:39 - when we go in and hit play we should see
07:41 - that our little enemy spawns and he runs
07:46 - through and you can see there's the cat
07:48 - tail on the cam here and when he reaches
07:50 - the end our lives changed to zero say hi
07:53 - all right and you can see when we have
07:56 - more enemies spawn here when they go
07:58 - through we should get to negative 1 and
08:00 - then negative 2 of course we don't want
08:02 - that to happen we want something special
08:04 - to happen whenever we reach a lives
08:07 - amount of serum so let's go ahead and
08:09 - add this functionality one thing you
08:11 - could do here is have some kind of
08:13 - method that you call on the player stats
08:15 - to reduce the lives and just instead of
08:18 - just changing it directly you could have
08:22 - some method in here some public method
08:24 - called reduce or subtract lives or
08:28 - whatever and then you could have that
08:30 - keep track of how many lives we have and
08:32 - if that goes below zero we could have a
08:35 - call to a separate object say a game
08:37 - manager that will then do some stuff but
08:40 - instead of interlinking them in all
08:42 - these ways because that is maybe a bit
08:44 - more advanced and something that I
08:46 - recommend you do if you want to create a
08:48 - very large games with lot of moving
08:50 - components and that needs to be very
08:52 - optimized inst
08:54 - we'll just create a game manager that
08:56 - simply sits and checks our life's amount
08:58 - and then handles everything locally if
09:01 - you want to do it the other way I
09:02 - suggest you look at the 2d platformer
09:04 - course because that shows a lot of ways
09:06 - to do that kind of stuff and how to kind
09:08 - of cheat your way to some singles and
09:10 - objects if that is something that
09:12 - interests you so let's just go ahead and
09:15 - create a new component here on the game
09:16 - master and let's call this one our game
09:19 - manager and this will be kind of
09:22 - essential for whenever we need to end
09:24 - the game restart a game maybe pause a
09:28 - game at a later point we'll see so on
09:30 - what we're doing here is we'll have a
09:32 - update method which we have here and
09:35 - that is going to check if player stats
09:38 - dot lives is less than and whoops let's
09:42 - close that one it's less than or equal
09:44 - to zero so in case we reach zero lives
09:49 - or for some reason if two player or two
09:52 - enemies enter at the same time and we
09:54 - reach minus one lives or so then we want
09:57 - to end the game so let's do and game and
10:01 - let's make this a separate function here
10:04 - and game I mean just make it private
10:06 - because we only want to call it from
10:08 - inside of the game manager itself and
10:11 - we'll just for now throw a debug
10:12 - deadlock statement saying that the game
10:15 - is ended so game over and then you could
10:18 - of course go ahead and restart the level
10:20 - here using something like a scene
10:22 - manager dot our load scene or load level
10:26 - and then you could use the currently
10:28 - active level or you could prompt the
10:30 - user with some kind of in screen we can
10:32 - do lots of stuff here and we'll
10:34 - definitely add something in at a later
10:35 - point but for now we just to throw this
10:38 - debug deadlock statement and that's
10:39 - pretty much it however one thing that
10:42 - you will notice is if we go ahead and
10:44 - try this out and this should definitely
10:45 - work is that when we reach zero lives
10:49 - here so our enemies spawned and he goes
10:51 - through the entire path and once he
10:54 - reaches the end it's Pam's game over
10:56 - down here and we only want to do that
10:59 - once because if we want to display some
11:02 - kind of game over screen
11:03 - we don't want 20 or 30 or 100 game over
11:06 - screens popping up
11:07 - in just a few seconds we only want one
11:10 - so what we do is simply add a boolean up
11:14 - here and you can make this a private
11:15 - boolean you could also make it a public
11:17 - static if you want all the objects to
11:19 - know whether or not the game has ended
11:21 - and we'll call this one game end it and
11:24 - set it equal to false by default and
11:27 - then down here we'll set game ended
11:30 - equal to true and then up here in our
11:35 - update method we can say that if the
11:38 - game has ended well then we just want to
11:40 - return them we don't want to continue
11:42 - down and do all this other stuff we
11:44 - simply exit out of the loop awesome so
11:48 - now when we hit play and see that our
11:50 - enemy runs through the map and he's
11:53 - gonna do that pretty quickly excuse me
11:57 - and reaches the end here it says game
12:00 - over just once and there you go awesome
12:03 - so the next thing that I wanted to do
12:05 - was add some way of damaging our enemies
12:08 - because right now when we add a tower
12:11 - and it shoots the enemy the bullet then
12:14 - simply destroys the enemy object and
12:16 - nothing really happens I want to be able
12:18 - to add some more money to our play area
12:23 - I want to have a cool death effect and
12:25 - maybe even have the ability to give
12:28 - different damage amounts to different
12:30 - bullets so that we can have different
12:32 - turrets damage in different ways that's
12:35 - a lot of different so what we'll do is
12:37 - we will find the place where we
12:39 - currently destroy our enemies and that
12:42 - is inside of our scripts and then if we
12:46 - find our bullet c-sharp script here and
12:49 - double click that to open it up in
12:50 - visual studio and you can see that down
12:53 - here where we have a function called
12:55 - damage it simply destroys the enemy so
12:58 - what we'll do instead here is have some
13:01 - function inside of our enemy that will
13:05 - allow us to take damage so let's go into
13:06 - our enemy here and begin by adding a new
13:09 - variable and this is going to be a
13:10 - public integer and this is going to be
13:13 - our health and we'll just default that
13:15 - to say 100 but you can of course input
13:17 - anything that you want then we'll create
13:21 - a new method and this is going to be a
13:23 - public void because we'll access it from
13:26 - without the class that will access it
13:28 - from a bullock class using a reference
13:30 - and then we'll call this one take damage
13:33 - and we'll specify the amount of damage
13:36 - as a parameter here so as an argument
13:38 - and that is going to be an integer with
13:41 - the amount and then we'll simply say
13:43 - that our health - equals our amount so
13:47 - we'll just subtract the amount from our
13:49 - health and then we can say that if
13:51 - health is less than or equal to zero so
13:55 - in case we die well then we want to call
13:58 - some kind of die method and that is yet
14:00 - another method that we want to create so
14:02 - let's just create a private method here
14:04 - called die and we no longer need this to
14:06 - be public because we don't we are
14:08 - calling this from inside of this
14:09 - function and that of course it's on the
14:12 - class so that can just be a private
14:14 - variable and all we'll do here for now
14:18 - is just destroy the object so right now
14:20 - we'll just destroy the game object and
14:21 - then in a moment we'll create a cool
14:23 - effect whenever this happens and we'll
14:26 - also make sure to add some money so once
14:30 - we've done that we can go into a bullet
14:31 - and now we want a way of using this
14:34 - transform enemy so this enemy transform
14:36 - and then are getting the component
14:40 - called enemy on that object because
14:42 - right now the enemy transform is this
14:45 - entire object right here we want to seek
14:47 - down this particular component here the
14:50 - enemy component and we'll want to go
14:52 - into that and call this particular
14:54 - function so the way that we do that is
14:56 - by first getting the component and to do
14:59 - this we simply go enemy that get
15:01 - component and the component we want to
15:04 - get is of type enemy then we can store
15:08 - this component in a variable we call of
15:10 - type enemy and we'll just call this e
15:13 - the reason why I call it e here we could
15:16 - just as well call it enemy but we need
15:17 - to differentiate between this new
15:19 - variable which is the component and the
15:21 - other one whoops and the other one which
15:25 - is our entire object so this is the
15:28 - entire transform so on what we could do
15:31 - as well as just call this one enemy go
15:33 - for a game object
15:34 - something like that and then have this
15:36 - one the enemy but I'll just call it e
15:38 - for short then what we do is say e dot
15:41 - take damage and now we can simply pass
15:44 - in some amount we could pass in a fixed
15:46 - amount of 20 damage or we could go up
15:48 - here and add a damage parameter to our
15:51 - bullet so let's just do that so let's
15:53 - create a variable here a public integer
15:55 - with the damage and set that equal to 50
15:58 - by default this way we can go into all
16:00 - of the different bullet prefabs such as
16:02 - the missile and the bullet and later we
16:05 - might have some other stuff in there and
16:07 - change the damage individually for each
16:09 - one then down here we pass in the damage
16:12 - and that makes sure to throw it over to
16:14 - the take damage which is over here one
16:17 - thing that might happen is we might get
16:19 - an enemy who doesn't have an enemy
16:22 - component this might be something that
16:23 - we want to happen purposefully in the
16:27 - future
16:27 - or we might just well screw up so what
16:30 - we'll do here is we'll just check if E
16:32 - is not equal to null well then we want
16:36 - to do this if it is then we're screwed
16:40 - awesome and then we can delete the
16:42 - destroy thing down here we really don't
16:44 - need that cool so this should actually
16:47 - work so if we now go in here and
16:52 - everything is set up and we'll just
16:54 - change the speed of our enemy back to
16:56 - say ten and you can see we have a health
16:59 - here and on our bullet we also have a
17:02 - damage and the same thing with our if we
17:05 - find it here our missile launcher also
17:07 - or not our missile launcher our missile
17:10 - also has a damage so we could of course
17:12 - change these around so what we can do
17:15 - now is simply hit play and wait for an
17:20 - enemy to spawn and we can just add a few
17:22 - turrets here and you can see one two
17:24 - shots and then the enemy is dead so it
17:27 - does take two shots now to kill the
17:29 - enemy that's awesome so the next thing
17:32 - that we could could do here is find our
17:35 - enemy and then add some more
17:37 - functionality whenever he dies for
17:39 - example we could add on some money so
17:41 - and this is why we grew up into small
17:43 - functions here is so we can very easily
17:45 - go in and add more functionality and
17:47 - have a and very clearly see where the
17:50 - functionality should go and of course we
17:52 - want to add more money only when our
17:54 - enemy dies so we can go up here and make
17:57 - this another variable it's going to be a
18:01 - public integer and this could be the
18:04 - value or the price or whatever let's
18:08 - just put value here you could also say
18:10 - money or money gain whatever it will
18:13 - just put value in here and we'll have
18:16 - this default to something like I don't
18:18 - know the prices here are 100 and 250 so
18:21 - let's make one of these give say $50 and
18:25 - we'll just down here say play your stats
18:30 - play your stats dart money plus equals
18:34 - our value Kol so that should actually
18:40 - work so if we now hit play and kill up
18:42 - one of these guys and you can see very
18:44 - clearly here it's going to take two
18:46 - shots one and two and our money just
18:49 - increased by 50 sorry I said you see
18:52 - here it says start build money left 300
18:54 - plus 50 is 350 and we can just keep on
18:58 - doing this and on money will decrease
19:02 - whenever we build an increase whenever
19:03 - we shoot something awesome so the last
19:07 - thing here is just adding in a cool
19:09 - effect so let's actually create that
19:11 - cool effect and we'll use one of the
19:13 - prefabs here as a starting point so
19:16 - let's use our we'll use the bullet
19:21 - impact effect as a starting point so
19:23 - let's drag this inside of a scene focus
19:25 - in on it I'm going to shift away from
19:27 - the top view here and just move it up a
19:30 - tiny bit something like that looks fine
19:32 - and then we can rename this to UM enemy
19:37 - death effect and Wow Apple wants me to
19:42 - spend money there we go
19:43 - and then we can read rag this into our
19:46 - prefabs folder there we go so make it
19:48 - into a new prefabs that we don't
19:49 - overwrite the old one and let's
19:52 - configure some stuff here so the first
19:54 - thing is I want to go into my renderer
19:55 - actually the first thing is I wanted to
19:57 - enable looping and said that too
19:59 - and hit simulate Barrios now we can see
20:02 - the changes correctly so I want to go
20:05 - into my renderer and change the material
20:07 - here to the material of our enemy there
20:10 - we go
20:10 - so that it will look like the enemy
20:12 - shatters into multiple pieces and I'm
20:15 - going to go pretty quickly through this
20:17 - so let's go into our shape let's change
20:19 - the radius to one and we don't want to
20:21 - change anything else here let's go into
20:23 - emission change this to something like
20:25 - between maybe fifteen and twenty that's
20:29 - going to be plenty and then we can go up
20:32 - here change the stat life time that's
20:35 - going to be fine the start speed to
20:37 - somewhere between zero and five sounds
20:39 - fine on by me and then the start size
20:42 - between 0.25 and point three five just
20:47 - to make them a bit clearer to see there
20:50 - we go are everything else here can be
20:53 - left on touch we could put in a bit of
20:55 - start rotation so I'm gonna do a hundred
20:57 - there and randomize that by one there we
20:59 - go
21:00 - I think I think that looks pretty good
21:03 - then what we can do is go down and find
21:07 - our collision tab and we'll just make
21:10 - sure to kind of raise these a bit above
21:12 - the ground and we do that by going in
21:13 - here changing the radius scale to one
21:16 - there you go it pops up and everything
21:18 - looks much better and I kind of like how
21:20 - this is looking now um and maybe we can
21:24 - just disable interior collection
21:26 - interior collisions and everything else
21:30 - is good awesome
21:32 - so that is kind of the effect that I'm
21:34 - going for and you can of course spend
21:35 - more time it will also be cool to add in
21:38 - a light just as we did with the missile
21:41 - exploding effect just to make things a
21:44 - bit more dramatic but I'll leave that up
21:45 - to you so we can now hit apply on this
21:47 - as soon as we've turned up looping of
21:50 - course and I'll let's delete this from
21:52 - our scene let's go in and add the
21:54 - ability to spawn this in through code so
21:56 - we'll need a reference to the effect
22:00 - here so we'll make a public game object
22:02 - and we've done this multiple time this
22:04 - is going to be our on death effect then
22:08 - we can go down here to where we want it
22:11 - to be spawned we'll call instant
22:13 - we'll pass in our death effect as the
22:16 - prefab will say that we want to spawn it
22:19 - at our current position which is
22:20 - transformed a position and with no
22:23 - rotation which means quaternion dot
22:26 - identity and we'll of course make sure
22:29 - to store this in a variable called
22:32 - effect and cast it into a game object
22:35 - there we go
22:36 - and then this way we can make sure to
22:38 - destroy that effect after say five
22:41 - seconds just to clean up the scene a
22:43 - little bit and I'm going to add the
22:45 - money here way at the top kind of group
22:48 - things a bit better something like that
22:51 - looks really neat and now if we find our
22:55 - enemy prefab we have a slot here for the
22:58 - death effect let's drag our enemy death
23:00 - effect into that slot hit up no applying
23:03 - there because it's in our project and
23:04 - hit play and things should look freaking
23:08 - awesome so let's try this out and indeed
23:12 - it does so I really like that effect
23:14 - it's very solid it's very clean it could
23:17 - definitely do with some bigger
23:18 - explosions and some light effects but
23:21 - I'll leave that up to you I think you
23:22 - can definitely get away with these
23:24 - graphics and I think they're really
23:26 - funny and cotugno so let's just keep it
23:29 - this way for now so that was pretty much
23:31 - it for this video I hope you enjoyed it
23:33 - and I'll see you in the next one thank
23:34 - you so much to all of the awesome people
23:36 - who donated in September and especially
23:38 - thanks to our own Metta Robert Roach
23:40 - James Calhoun Kim Rose cuccos Bao and
23:43 - Antoine and vixen pea thank you so much
23:46 - for donating you guys are awesome if you
23:48 - want to support practice yourself you
23:49 - could go to patreon.com/scishow

Cleaned transcript:

this video is brought to you by our own Metta thank you so much for donating if you want to support breakage yourself you can go to patreon.com/scishow cheese thanks for tuning in at brac ease hello I want to welcome to this video and critic and tower defense game in unity today we'll be adding a large calendar to our player stats and will also be displaying that on the UI we'll also start creating a game manager that will do something whenever we run out of lives right now we'll just throw a debug padlock statement and we'll also add some health to our enemies and a cool death effect whenever they die so let's just get right into it so you can see I'm here in unity and what I want to begin with is adding some way to keep track of how many lives we have left let's find our player stats crypt and double click that to open a table in visual studio and then we can add a new variable to this and this is also going to be a public static variable just like our money so we'll make a public static integer with the amount of lives then we'll also create a public integer that is nonstatic with the amount of lives that we want to start with so our start lives and we'll just default that to something like 20 then down in our start method we said lives equal to start lives whoops start lives there we go so whenever we start the game our lives will be initialized with them with a value of 20 but right now we can't really see this happening so in order to display this on the screen let's create some UI you can see that we have our first canvas here and this is the overlay canvas that is just put on top of the screen we also have another canvas here which is our world canvas that is shown at the bottom of our map let's go and hit and rename these properly so let's have this be our overlay canvas and this one be the bottom canvas so now that they are named accordingly we can go ahead and duplicate our bottom canvas by pressing ctrl D or command D if you're on the Mac and let's just move this up I will also switch to the front or the top view here by pressing on the yaxis this will just give me a bit of overview of what's going on and switch to the 2d tools over here so that we can easily manipulate the canvas so now that we've moved this up to the top this is where I want to display our lives so let's rename this here to on top canvas and let's also maybe change the format of this a tiny bit so the first thing that I want to do is change the scale something like 0.1 times 0.1 times 0.1 and that makes it really huge then I want to fit it back in here with our map and just drag it up a bit and make some more room then I want to take our money element here and just flat out delete that and instead let's edit our timer so right now you can see it scales with our screen again make sure that it does that by going to stretch and holding down alt and clicking in the bottom right corner and then what we can do is maybe centering this on the X here and then snapping it to the bottom so that it will sit right on top of our map then we can maybe take our entire canvas and drag it down a little bit to decrease the distance from our map to the font and then we can rename this one to our lives and let's put some actual text in here so let's say on 20 lives and let's just increase the size of this so we can put our font size to something like maybe 204 and I think that looks pretty good and we can maybe even decrease the size here or the distance here from the map just drag it down a tiny bit more so I think overall this looks pretty great and I think it's very dramatic displaying the lives in such a big way so it's pretty essential to display important information in large places so that the user can't help but notice how many lives he has left so now what we can do is maybe link this so that it will actually change with our action live amount so let's go on to on to our lives here and create a new component just like we added the money you I will have a very little symbol script here called the lives UI let's just hit create an add on that and doubleclick it to open it up in visual studio and it's just reload this and you can see that we can just quickly edit this class first off we'll be implementing unity engine dot UI so that we can now create a variable up here with a reference to our text and then we'll call this one the live text then what we can do is every time in the update function and yes this might not again be the most efficient way but because our game is so small this is really not going to matter if you're pushing to mobile you might want to consider doing this in a curio team instead or having it linked to the player stats in some way but for now we can simply go and check for this each time we do the update and we're simply going to check if or you have check we can simply going to set live text here live text add text equal to player stats dot lives there you go and that should of course this is now an integer so we need to convert it into a string but we actually don't need to do this whenever we add a string on to it and we want to add space lives on to the number here and that actually makes unity convert this interesting automatically but if you want to be explicit you can just as well do to string in there just to be very clear about what you're doing but that's completely up to you so now that we've actually done this we can go back into unity and we of course want to link our text object up to the script so let's just drag our text into the lives text field cool so this will actually not be noticeable if you just hit play right now we won't get any arrows but nothing will change and that that's because our lives will they start at 20 and they don't change in any way so what we'll do is just go to our game master going to play your stats and then change our start lives to something like twelve just to see them change so let's hit play here and they will now say twelve lives so that's awesome so let's just put this at one for testing and we can see what happens when we decrease the lives and we when we go to zero so let's have a look at that I also want to change the wave spawn here where the time between waves should be ten instead of twenty I think that's too much and I will also go into our prefabs and find our enemy and make sure to increase the speed here to fifty just when testing so we don't have to wait that long then while I'll do is double click on the enemy script and let's have a look at what happens when he the last Waypoint which is the end of his path so in this case we want to reduce the amount of lives the player has and we probably want to destroy all our enemy here so right now we are simply destroying the enemy and then returning I want to put this into a separate function so we have a clear overview of what's going on so whenever you have the ability to group little pieces of coastal code like this for example changing the amount of lives and destroying the object which is can all be categorized under path ended or end path or something like that then you pretty much want to do that so let's just put the destroy call in here and let's now call end path here and then we can set lives or player stats dot lives that means equals 1 cool so now when we go in and hit play we should see that our little enemy spawns and he runs through and you can see there's the cat tail on the cam here and when he reaches the end our lives changed to zero say hi all right and you can see when we have more enemies spawn here when they go through we should get to negative 1 and then negative 2 of course we don't want that to happen we want something special to happen whenever we reach a lives amount of serum so let's go ahead and add this functionality one thing you could do here is have some kind of method that you call on the player stats to reduce the lives and just instead of just changing it directly you could have some method in here some public method called reduce or subtract lives or whatever and then you could have that keep track of how many lives we have and if that goes below zero we could have a call to a separate object say a game manager that will then do some stuff but instead of interlinking them in all these ways because that is maybe a bit more advanced and something that I recommend you do if you want to create a very large games with lot of moving components and that needs to be very optimized inst we'll just create a game manager that simply sits and checks our life's amount and then handles everything locally if you want to do it the other way I suggest you look at the 2d platformer course because that shows a lot of ways to do that kind of stuff and how to kind of cheat your way to some singles and objects if that is something that interests you so let's just go ahead and create a new component here on the game master and let's call this one our game manager and this will be kind of essential for whenever we need to end the game restart a game maybe pause a game at a later point we'll see so on what we're doing here is we'll have a update method which we have here and that is going to check if player stats dot lives is less than and whoops let's close that one it's less than or equal to zero so in case we reach zero lives or for some reason if two player or two enemies enter at the same time and we reach minus one lives or so then we want to end the game so let's do and game and let's make this a separate function here and game I mean just make it private because we only want to call it from inside of the game manager itself and we'll just for now throw a debug deadlock statement saying that the game is ended so game over and then you could of course go ahead and restart the level here using something like a scene manager dot our load scene or load level and then you could use the currently active level or you could prompt the user with some kind of in screen we can do lots of stuff here and we'll definitely add something in at a later point but for now we just to throw this debug deadlock statement and that's pretty much it however one thing that you will notice is if we go ahead and try this out and this should definitely work is that when we reach zero lives here so our enemies spawned and he goes through the entire path and once he reaches the end it's Pam's game over down here and we only want to do that once because if we want to display some kind of game over screen we don't want 20 or 30 or 100 game over screens popping up in just a few seconds we only want one so what we do is simply add a boolean up here and you can make this a private boolean you could also make it a public static if you want all the objects to know whether or not the game has ended and we'll call this one game end it and set it equal to false by default and then down here we'll set game ended equal to true and then up here in our update method we can say that if the game has ended well then we just want to return them we don't want to continue down and do all this other stuff we simply exit out of the loop awesome so now when we hit play and see that our enemy runs through the map and he's gonna do that pretty quickly excuse me and reaches the end here it says game over just once and there you go awesome so the next thing that I wanted to do was add some way of damaging our enemies because right now when we add a tower and it shoots the enemy the bullet then simply destroys the enemy object and nothing really happens I want to be able to add some more money to our play area I want to have a cool death effect and maybe even have the ability to give different damage amounts to different bullets so that we can have different turrets damage in different ways that's a lot of different so what we'll do is we will find the place where we currently destroy our enemies and that is inside of our scripts and then if we find our bullet csharp script here and double click that to open it up in visual studio and you can see that down here where we have a function called damage it simply destroys the enemy so what we'll do instead here is have some function inside of our enemy that will allow us to take damage so let's go into our enemy here and begin by adding a new variable and this is going to be a public integer and this is going to be our health and we'll just default that to say 100 but you can of course input anything that you want then we'll create a new method and this is going to be a public void because we'll access it from without the class that will access it from a bullock class using a reference and then we'll call this one take damage and we'll specify the amount of damage as a parameter here so as an argument and that is going to be an integer with the amount and then we'll simply say that our health equals our amount so we'll just subtract the amount from our health and then we can say that if health is less than or equal to zero so in case we die well then we want to call some kind of die method and that is yet another method that we want to create so let's just create a private method here called die and we no longer need this to be public because we don't we are calling this from inside of this function and that of course it's on the class so that can just be a private variable and all we'll do here for now is just destroy the object so right now we'll just destroy the game object and then in a moment we'll create a cool effect whenever this happens and we'll also make sure to add some money so once we've done that we can go into a bullet and now we want a way of using this transform enemy so this enemy transform and then are getting the component called enemy on that object because right now the enemy transform is this entire object right here we want to seek down this particular component here the enemy component and we'll want to go into that and call this particular function so the way that we do that is by first getting the component and to do this we simply go enemy that get component and the component we want to get is of type enemy then we can store this component in a variable we call of type enemy and we'll just call this e the reason why I call it e here we could just as well call it enemy but we need to differentiate between this new variable which is the component and the other one whoops and the other one which is our entire object so this is the entire transform so on what we could do as well as just call this one enemy go for a game object something like that and then have this one the enemy but I'll just call it e for short then what we do is say e dot take damage and now we can simply pass in some amount we could pass in a fixed amount of 20 damage or we could go up here and add a damage parameter to our bullet so let's just do that so let's create a variable here a public integer with the damage and set that equal to 50 by default this way we can go into all of the different bullet prefabs such as the missile and the bullet and later we might have some other stuff in there and change the damage individually for each one then down here we pass in the damage and that makes sure to throw it over to the take damage which is over here one thing that might happen is we might get an enemy who doesn't have an enemy component this might be something that we want to happen purposefully in the future or we might just well screw up so what we'll do here is we'll just check if E is not equal to null well then we want to do this if it is then we're screwed awesome and then we can delete the destroy thing down here we really don't need that cool so this should actually work so if we now go in here and everything is set up and we'll just change the speed of our enemy back to say ten and you can see we have a health here and on our bullet we also have a damage and the same thing with our if we find it here our missile launcher also or not our missile launcher our missile also has a damage so we could of course change these around so what we can do now is simply hit play and wait for an enemy to spawn and we can just add a few turrets here and you can see one two shots and then the enemy is dead so it does take two shots now to kill the enemy that's awesome so the next thing that we could could do here is find our enemy and then add some more functionality whenever he dies for example we could add on some money so and this is why we grew up into small functions here is so we can very easily go in and add more functionality and have a and very clearly see where the functionality should go and of course we want to add more money only when our enemy dies so we can go up here and make this another variable it's going to be a public integer and this could be the value or the price or whatever let's just put value here you could also say money or money gain whatever it will just put value in here and we'll have this default to something like I don't know the prices here are 100 and 250 so let's make one of these give say $50 and we'll just down here say play your stats play your stats dart money plus equals our value Kol so that should actually work so if we now hit play and kill up one of these guys and you can see very clearly here it's going to take two shots one and two and our money just increased by 50 sorry I said you see here it says start build money left 300 plus 50 is 350 and we can just keep on doing this and on money will decrease whenever we build an increase whenever we shoot something awesome so the last thing here is just adding in a cool effect so let's actually create that cool effect and we'll use one of the prefabs here as a starting point so let's use our we'll use the bullet impact effect as a starting point so let's drag this inside of a scene focus in on it I'm going to shift away from the top view here and just move it up a tiny bit something like that looks fine and then we can rename this to UM enemy death effect and Wow Apple wants me to spend money there we go and then we can read rag this into our prefabs folder there we go so make it into a new prefabs that we don't overwrite the old one and let's configure some stuff here so the first thing is I want to go into my renderer actually the first thing is I wanted to enable looping and said that too and hit simulate Barrios now we can see the changes correctly so I want to go into my renderer and change the material here to the material of our enemy there we go so that it will look like the enemy shatters into multiple pieces and I'm going to go pretty quickly through this so let's go into our shape let's change the radius to one and we don't want to change anything else here let's go into emission change this to something like between maybe fifteen and twenty that's going to be plenty and then we can go up here change the stat life time that's going to be fine the start speed to somewhere between zero and five sounds fine on by me and then the start size between 0.25 and point three five just to make them a bit clearer to see there we go are everything else here can be left on touch we could put in a bit of start rotation so I'm gonna do a hundred there and randomize that by one there we go I think I think that looks pretty good then what we can do is go down and find our collision tab and we'll just make sure to kind of raise these a bit above the ground and we do that by going in here changing the radius scale to one there you go it pops up and everything looks much better and I kind of like how this is looking now um and maybe we can just disable interior collection interior collisions and everything else is good awesome so that is kind of the effect that I'm going for and you can of course spend more time it will also be cool to add in a light just as we did with the missile exploding effect just to make things a bit more dramatic but I'll leave that up to you so we can now hit apply on this as soon as we've turned up looping of course and I'll let's delete this from our scene let's go in and add the ability to spawn this in through code so we'll need a reference to the effect here so we'll make a public game object and we've done this multiple time this is going to be our on death effect then we can go down here to where we want it to be spawned we'll call instant we'll pass in our death effect as the prefab will say that we want to spawn it at our current position which is transformed a position and with no rotation which means quaternion dot identity and we'll of course make sure to store this in a variable called effect and cast it into a game object there we go and then this way we can make sure to destroy that effect after say five seconds just to clean up the scene a little bit and I'm going to add the money here way at the top kind of group things a bit better something like that looks really neat and now if we find our enemy prefab we have a slot here for the death effect let's drag our enemy death effect into that slot hit up no applying there because it's in our project and hit play and things should look freaking awesome so let's try this out and indeed it does so I really like that effect it's very solid it's very clean it could definitely do with some bigger explosions and some light effects but I'll leave that up to you I think you can definitely get away with these graphics and I think they're really funny and cotugno so let's just keep it this way for now so that was pretty much it for this video I hope you enjoyed it and I'll see you in the next one thank you so much to all of the awesome people who donated in September and especially thanks to our own Metta Robert Roach James Calhoun Kim Rose cuccos Bao and Antoine and vixen pea thank you so much for donating you guys are awesome if you want to support practice yourself you could go to patreon.com/scishow
