With timestamps:

00:00 - thanks for tuning in at brakus hello
00:04 - everyone welcome to video number 19 in
00:06 - how to make it to the platform a course
00:08 - in today's video we're going to take a
00:11 - look at creating an enemy health bar but
00:13 - we're gonna do this by creating a fairly
00:16 - generic status indicator script so we're
00:19 - going to be able to expand onto this
00:21 - later such as adding an ammo display
00:25 - something maybe if we want a kind of
00:27 - manna all that stuff and also will
00:31 - hopefully be able to use this both for
00:33 - the enemy and for the player so what
00:38 - that should be pretty cool but before we
00:40 - get into it I just quickly want to
00:41 - mention that if you have any questions
00:43 - go to forum brackets to come and also
00:46 - and not many people know this break is
00:49 - actually has an apparel store so if you
00:52 - want some cool breccia Smerch or some
00:54 - I'm a developer t-shirts there's also a
00:58 - write code one they come in many
01:00 - different shapes and forms and colors so
01:04 - if you think that's cool check it out
01:06 - and also a lot of people ask me how they
01:09 - can kind of help support brackets well
01:12 - one way is of course donating that's
01:16 - completely optional but links are in the
01:18 - description or if you want to get
01:20 - something cool out of it you can always
01:21 - buy a t-shirt that's a percentage of
01:24 - what it costs also goes to me so that
01:28 - definitely helps out a lot cool so now
01:31 - that I've self promoted a little bit
01:33 - let's go ahead and open up unity and as
01:36 - you can see I'm currently using the dark
01:38 - skin but of course all the features that
01:42 - we're going to be using are available in
01:44 - unity personal Edition so yeah the first
01:48 - thing that we want to do here is to set
01:50 - up the UI for what we're going to be
01:51 - making so we kind of had so we have a
01:54 - reference so we can see what's changing
01:56 - and to do this I'll go into the scene
01:58 - view and select our alien spaceship and
02:01 - on him I'll right-click on the UI and
02:03 - create a and image and you can see that
02:08 - it spawns in this huge canvas if you
02:11 - just selected and hit
02:12 - so what we'll do with this is first off
02:15 - we'll call this status indicator and
02:19 - we'll drag this under the alien
02:21 - spaceship then we'll change the render
02:24 - mode to world space so that we can
02:26 - parent it to our alien space alien
02:29 - spaceship and have it follow around and
02:32 - next up we are going to bump the width
02:36 - let's just reset the transform actually
02:39 - down here and let's make it a width of
02:42 - 100 and a height of 400 which should be
02:44 - default and next up we can change the
02:47 - scale so basically instead of just like
02:50 - making it really really small by just
02:53 - dragging in on this box and setting the
02:56 - width and height really low we want to
02:58 - change the scale because else we are not
03:00 - going to have any pixels to work with
03:02 - inside of this area we want a hundred
03:05 - five hundred pixels to work with at
03:07 - least when starting out and then simply
03:09 - scaling and those pixels down so
03:12 - basically we want to set this like zero
03:15 - point one so one one seven one and then
03:19 - we can just change to the scaling tool
03:22 - by hitting R and simply just scale it
03:25 - down even further something like that
03:29 - looks pretty good and now we can drag it
03:32 - up and maybe make it a bit smaller here
03:35 - and and for that I'm not going to be
03:36 - using the scale I only use the scale
03:38 - uniformly so that's very important okay
03:42 - so next up we can take our image and
03:44 - simply snap it to scale with our entire
03:47 - canvas and basically I just want to
03:50 - bring this down to make it look a bit
03:53 - more like a health bar and then we
03:56 - wanted to basically snap to the bottom
03:59 - and scale with its width and in order to
04:03 - do that we'll simply click this right
04:05 - here also because we want this to scale
04:09 - in kind of from the right here to the
04:12 - left we'll have to change our pivot
04:14 - point so you can either drag that over
04:16 - here in the middle to the left or you
04:19 - can simply change the values for it here
04:22 - so you can see the only thing that we
04:24 - need to change is some
04:25 - set the X here to zero and it will snap
04:27 - to the left century cool so now you can
04:31 - see that if we change
04:32 - oops that must be an error if we change
04:35 - the canvas here it scales and with it
04:37 - and it doesn't scale on the y axis cool
04:43 - so uh next up I think is a let's do some
04:49 - text also that displays our health so
04:52 - let's make this bar here green and then
04:56 - later maybe we can make it change color
04:59 - depending on how much health and we have
05:02 - left that's definitely something that I
05:04 - wanted you but I think right now we
05:07 - should just kind of get it to where we
05:10 - wanted and then later we can do that
05:12 - kind of tweaking that's also fun
05:15 - challenge if you look up unity gradients
05:17 - so and we'll just rename this to health
05:21 - bar and next up we'll make a text object
05:25 - and you'll notice that this starts out
05:27 - pretty big and with this we just want to
05:30 - place it on let's see at the top here
05:35 - and so that it goes from the left to the
05:39 - right and we want to scale with that but
05:43 - we want it to be kind of parented to the
05:45 - top here so therefore you can select
05:47 - this one cool and whoops what we can do
05:52 - now is simply take the whole status
05:53 - indicator and bring it down a bit we can
05:55 - also change the font size to something
05:57 - like 10 and then we'll change the text
06:01 - here to something like 100 out of 100 HP
06:05 - will change the color to completely
06:07 - white and we'll make this a bold text
06:11 - object next up we'll simply drag this
06:15 - down something like that and then we can
06:18 - again bump this down something like that
06:21 - looks fairly decent and you will notice
06:24 - right now that our health bar is
06:26 - rendering very it almost pixel perfect I
06:31 - mean it's it's very sharp on the edges
06:33 - but on the text object is
06:37 - currently almost blurred out it's very
06:40 - clear that this is not very high
06:42 - resolution but and the reason for this
06:45 - and I'll show you just we'll just call
06:47 - this health text the reason for this is
06:51 - if we go into the status indicator we
06:53 - currently have a very low dynamic pixels
06:56 - per unit so PPU pixels per unit is what
07:00 - kind of help that helps us define the
07:02 - resolution per unit that this object
07:05 - should be drawn with so the higher the
07:08 - number you put here on the more
07:10 - calculations the computer will have to
07:12 - do but at the same time the higher
07:14 - resolution we will get and you don't
07:16 - need to change this much in order for it
07:20 - to get drastically better you can see
07:22 - just from one to two it gets a whole lot
07:25 - better and for this I'll put mine all
07:28 - the way up to five that might be a bit
07:30 - too much but I think and then that's a
07:32 - pretty fine number to begin with so you
07:35 - can see that that's completely crisp and
07:38 - this might not look extremely nice on
07:42 - the recording because of how it kind of
07:45 - calculates pixels but I'll show you that
07:48 - it looks pretty fine when I play the
07:50 - game here so that's something you can
07:52 - mess around with cool so next up I maybe
07:55 - just want to bring this in just a tad so
07:57 - if you want to scale from the center you
08:00 - can simply hold down alt while dragging
08:02 - and it'll do that so I think we'll put
08:05 - this at 75 and 17 so if you want my
08:10 - exact numbers you can get them there
08:13 - cool so now that we kind of had have
08:16 - that in place I think it's time to go
08:20 - ahead and actually make this update via
08:23 - script so let's make a status indicator
08:26 - script and this is of course going to be
08:28 - of type C C sharp status indicator let's
08:33 - double click this and it will open up in
08:36 - Visual Studio and again if you want a
08:38 - tutorial on setting up visual studio to
08:40 - work nicely with unity I just recently
08:43 - made one of those so we are going to
08:45 - exclude using a system that collection
08:48 - but instead we're gonna use a system a
08:51 - unity engine Jud unity engine that UI
08:55 - cool and we're gonna set up some
08:57 - references here
08:58 - the first reference I want to keep these
09:02 - values private because I don't want them
09:04 - to be accessed by other scripts but at
09:08 - the same time I want them to show up in
09:10 - the unity editor so we can drag them in
09:12 - so a cool way to do this is simply write
09:14 - out private and then the type and that's
09:16 - gonna be a type rect transform so we can
09:19 - change the scale on that and we are just
09:22 - gonna call this healthbar rect or
09:26 - something like that
09:27 - I think that's gonna be fine and next up
09:30 - a private text object called health text
09:36 - and if we want these to actually show up
09:41 - we can use this attribute here called
09:44 - serialize field so that will make them
09:47 - show up in the editor even though they
09:49 - are private and that's of course and the
09:52 - exact same as writing this I just like
09:55 - to be explicit with that kind of stuff
09:58 - cool and next up we'll maybe do some
10:04 - checking if we have these components I
10:08 - think we are so inside of an awake
10:12 - statement here let's actually just make
10:15 - this a start statement for now at least
10:17 - we'll say if health bar rect is equal to
10:21 - null you complain a bit so debugged add
10:25 - large error and will say no health bar
10:30 - object referenced and this is from the
10:39 - status indicator
10:45 - and we'll just copy this and would you
10:50 - have text status indicator no health
10:53 - text object referenced cool so I don't
10:57 - want to return or anything I just want
10:59 - to easily be able to see this in the
11:01 - console awesome so next up we'll make a
11:05 - public void and this is going to set the
11:10 - health so assuming that we have these
11:13 - components I think we're just going to
11:15 - assume that every status indicator has a
11:17 - health but if not we can just simply
11:21 - have stuff like manna or ammo points
11:25 - again that doesn't necessarily need to
11:28 - be applied but we'll get into that so
11:32 - public void set health and what we want
11:35 - to do in here is basically we want to
11:37 - pass in a few things so the first one is
11:39 - the int max health or let's do the
11:43 - current one first sort of current and
11:45 - then int max and notice that I'm doing
11:48 - these underscores that's just to be very
11:51 - explicit about this being a a private
11:55 - variable that is only accessible within
11:59 - the scope of this method so I do that
12:03 - that a lot when when kind of showing
12:06 - that this is passed in as an argument
12:08 - are created inside the method that's up
12:12 - to you if you want to take on that
12:13 - naming convention it's fairly standard
12:15 - in in c-sharp cool so once we have that
12:20 - in here we can simply calculate out and
12:24 - this is going to be a floating point
12:25 - value we're going to calculate out kind
12:29 - of the percentage of our maximum health
12:32 - that we currently have and actually
12:34 - let's make that a number between zero
12:36 - and one so we'll just call this one
12:39 - value and again because I'm creating
12:41 - this inside the method and it won't be
12:43 - accessible out here I'm gonna do the
12:45 - underscore and we're gonna set this
12:47 - equal to the current health divided by
12:51 - max health and we'll make sure that we
12:54 - cast this into a float
12:57 - awesome next up what we can do is we can
13:01 - simply set our health by rect dot local
13:05 - scale I think yes local scale equal to a
13:11 - new vector3 and in here we're gonna do
13:18 - value that's going to be our X so that's
13:20 - going to be go between zero and one
13:22 - depending on how much health we have and
13:25 - then one and one we just want the others
13:30 - other parts to remain the same we could
13:33 - also make sure that if we've made some
13:36 - changes to the other parts if we kind of
13:40 - scale them I think right now we're just
13:42 - gonna do one F but we could also do
13:45 - something like this actually we're just
13:50 - gonna do these four cuts for orders sake
13:55 - cone so that's gonna change the scale of
13:59 - our health by and next up we just want
14:01 - to change our text so we're just going
14:03 - to do health text that text equals and
14:07 - then we'll put in the current amount of
14:10 - health then we'll do a plus sign because
14:12 - we want to do the the slash there and
14:16 - then the maximum health and then we'll
14:20 - do space HP something like that however
14:24 - we however you want to format this is
14:26 - completely up to you I know that this is
14:29 - currently hard-coded and there are
14:32 - better ways to do that but I think this
14:33 - will be more than fine for now I mean
14:36 - it's the game is not that complicated as
14:39 - of as of yet it ain't broken we're not
14:43 - gonna fix it Colm so let's save that and
14:45 - this script should actually be error
14:48 - free and it should actually be working
14:50 - but currently we don't have anything
14:53 - calling this set health method and
14:56 - that's what we are going to implement
14:57 - plan implement into our enemy script so
15:02 - first off let's just make sure to set up
15:04 - our health bar and our health text at a
15:10 - later point if you want
15:11 - do the changing of colors on the health
15:14 - bar what we would do is in here simply
15:18 - grab the image component get then change
15:22 - the color of that image component and
15:24 - set it equal to a gradient that you've
15:28 - created up here public gradient where
15:31 - the value you used to live through that
15:35 - gradient would be underscore value so if
15:39 - that makes any sense
15:40 - awesome if not we are probably gonna get
15:43 - into it I don't want to promise it
15:44 - because we have so much to do but I know
15:46 - that unity cookie I think they I believe
15:50 - they're I believe they're called no
15:52 - that's wrong
15:54 - it was nearly cookie it's cooking with
15:56 - unity they have a tutorial on doing that
16:01 - awesome so let's move on so let's dig
16:04 - into our alien spaceship and open up the
16:07 - enemy script here and we're gonna expand
16:09 - just a bit on this because this is a
16:11 - very simple way to do a custom class but
16:15 - I kind of want to set this up in a bit
16:18 - more usable fashion
16:20 - so basically currently we only have a
16:22 - health we don't have any value storing
16:25 - the maximum amount of health that we
16:27 - allowed to have so if we wanted to do
16:29 - some healing that wouldn't be possible
16:32 - and again if we want to show our maximum
16:34 - health that's not currently possible
16:36 - either so let's change this around a bit
16:39 - so inside of our enemies stats we'll do
16:42 - a public int called max health and we
16:46 - want default this to anything just yet
16:48 - then we'll also do another another
16:50 - public int and this is going to be
16:54 - called current health actually I want to
16:56 - change this to max health to be
16:58 - non-capital and the same with this
17:01 - current health but I also want to create
17:04 - a private int called underscore current
17:09 - health so don't quite think we've gone
17:11 - over getters and setters yet so getters
17:15 - and setters are basically a way to
17:17 - control how we how we go about changing
17:22 - the value of a variable and that's why
17:24 - we have
17:25 - I get part on what we do when we
17:28 - want to retrieve what is inside the
17:31 - variable and we have a set part which
17:33 - basically allows us to change how we
17:37 - change a value in a very alpha variable
17:42 - so basically inside of this current
17:44 - health what we do is instead of whoops
17:48 - just making a semicolon we open up some
17:51 - brackets on a new line call and in here
17:57 - will basically be changing this private
18:01 - integer that's gonna store the number
18:04 - that we want to store but we're gonna be
18:06 - accessing it through this public Gator
18:09 - Get Set variable so first off let's
18:13 - create a getter so when ever we want to
18:15 - get something get our current health
18:18 - from this private variable we'll simply
18:21 - return return that variable so get just
18:26 - returns our current health but when we
18:30 - want to set it we don't just want to set
18:33 - the variable we want to make sure that
18:36 - it is between zero and our max health
18:40 - this will make sure that we don't ever
18:42 - go get a negative health amount and that
18:46 - we never get healed or whatever we want
18:48 - to do above our max health amount so
18:52 - that's a super cool thing that we can do
18:55 - very easily by just using a by using
18:58 - this set keyword so if we just wanted to
19:02 - set our current health equal to whatever
19:06 - value that we wanted we would simply say
19:09 - that underscore current health equals
19:12 - value that's the standard getter and
19:14 - setter and you've might seen it you
19:17 - might have seen it before if you've
19:19 - looked at some longer a c-sharp scripts
19:22 - but what we want to do is basically we
19:25 - want to clamp this between two values so
19:29 - we are gonna do math dot clamp and we're
19:33 - gonna say the value that we want to
19:35 - clamp is called value that's like
19:38 - of the keyword that we use for the value
19:41 - that this variable is set equal to and
19:45 - then the minimum is going to be zero and
19:48 - the maximum is going to be our max
19:52 - health so this will ensure that every
19:56 - time we change our current health we're
19:59 - going to it's going to be clamped
20:01 - between zero and our maximum amount of
20:03 - health and for some reason I've made an
20:07 - error here of some kind so what's going
20:10 - on I'll just save this out out in a
20:13 - second and we'll see what's wrong but
20:17 - first we'll just change our damage enemy
20:20 - here this is going to be change to
20:21 - current health so whenever we want to
20:24 - access it or change it we use the nun
20:27 - underscore version because that's kind
20:29 - of our accessor kind of what we have to
20:33 - go through in order to get to our actual
20:36 - current health so if that's very
20:38 - confusing to you at the moment I get it
20:41 - just note that this is a very handy way
20:43 - to control values so let's just try and
20:48 - save this and see what's going on here
20:51 - cannot implicitly convert time float to
20:56 - int and that's because we put an F here
20:59 - and the rest is integer values so we'll
21:02 - just do that and I think that should be
21:05 - fine yeah we are using the float version
21:09 - of math that clamp we wanted to use the
21:12 - integer version and cool so now that we
21:15 - have that in place another thing I want
21:17 - to do with the enemy stats is I want to
21:19 - make sure that we've said I am current
21:24 - health equal to our max health at the
21:26 - very beginning of our game so first off
21:29 - let's set a default amount for our max
21:33 - health and let's simply do that up here
21:37 - for now we could make a class
21:39 - constructor but let's just put it there
21:41 - and then down here I want to make a
21:46 - method that will allow us to initialize
21:49 - such very
21:51 - so right now it's simply our current
21:53 - health later it might be the mana and
21:56 - current mana and all that stuff but
22:00 - basically I just want to have a public
22:01 - void here called in it that will take
22:04 - care of all those kinds of variables
22:06 - that will have to be set up at at
22:09 - compile time or at the beginning of run
22:12 - time so inside of this init method we're
22:16 - simply gonna set our current health
22:18 - equal to our max health and it's that
22:22 - easy if we wanted to have an opponent
22:25 - begin or start its life with only a
22:29 - percentage of our max health we could
22:32 - create another public method here called
22:34 - or another public variable of type float
22:38 - and we'll just call this maybe start
22:43 - percent health something like that and
22:46 - we're going to default it to 1f and then
22:49 - you can simply say that the current
22:52 - health equals max health health time
22:54 - start percent health or something like
22:57 - that so you can check off some of an
23:00 - employment an opponent's health inside
23:03 - the unity editor but for now we're just
23:06 - gonna go with this and then we're going
23:08 - to go into a start method and in here we
23:13 - are simply gonna set say that our stats
23:17 - dot we're simply gonna say it's that
23:22 - starting it and also up here instead of
23:26 - just creating that there I think we are
23:28 - gonna say in our start method that we
23:30 - want stats to be equal to a new enemy
23:35 - stats that way we have complete control
23:38 - over when when it will create an add
23:41 - object now I'm starting to doubt this
23:45 - actually let's do this that's let the
23:47 - editor take care of that cool so but we
23:50 - definitely want to in need it inside of
23:52 - the start method there are so many ways
23:54 - to do this kind of stuff because we are
23:56 - really just creating a lot of code to
23:58 - not get very much done but it's
24:01 - important once you get a
24:02 - a bit of a bigger game which is this is
24:04 - which this is becoming and that you do
24:07 - this stuff because it will really help
24:09 - limit errors later and also if you're
24:12 - working multiple people on a project
24:14 - this is a necessity because it really
24:17 - gives a lot more freedom to the level
24:20 - editors awesome so now that we are in
24:24 - knitting the stats we simply want a
24:27 - reference to our status indicators so
24:30 - we're gonna make a public status
24:32 - indicator and again I don't want this to
24:34 - be public I actually want it to be
24:35 - private but I want it to be accessible
24:38 - in unity so we're gonna make a private
24:40 - serialize field and it's gonna be of
24:43 - type status indicator and I'm just gonna
24:46 - do status indicator for the name here
24:49 - the non capital S and then in the start
24:52 - method we'll set status indicator or
24:57 - check if status indicator it's equal to
25:03 - no and here we could say that we want to
25:10 - print out a an error if it's equal to
25:13 - null or we could just make this an
25:15 - optional part and I think we're gonna do
25:18 - that so not every enemy or whatever is
25:21 - going to need a status indicator but it
25:23 - can have one if it wants so therefore
25:26 - we're gonna make a header up here and
25:28 - headers are a property draw and an
25:32 - attribute that will allow you to just
25:35 - type in something inside of the unity
25:37 - editor or inside of the inspector at
25:41 - what we are going to type here is just
25:44 - optional just mark that as meant as an
25:47 - optional feature so if we go down here
25:49 - you will be able to see that once this
25:54 - refreshes that we have a status
25:56 - indicator and that it currently says
25:58 - optional right above so that's a pretty
26:00 - nice way of structuring your inspectors
26:05 - so if static aiders indicator is
26:09 - not equal to null we want to set health
26:15 - and we want to say current health oops
26:20 - want to set stats that current health
26:24 - come as stats dot max health awesome
26:31 - and next up under the enemy here down
26:35 - below here after we kill it if we don't
26:39 - need to handle its health if we just
26:42 - kill it right away but we will if it
26:44 - doesn't die so down here we are simply
26:48 - gonna set the health the same way so
26:52 - we're just gonna check if it's secret to
26:53 - Nollan if it isn't we're gonna set the
26:55 - health there awesome I think that was
26:58 - pretty much everything we needed to do
27:00 - so now we can simply go into our stats
27:03 - here and for some reason that's
27:05 - defaulting to zero so there we go 90
27:08 - folding two hundred and I will simply
27:11 - drag in the status indicator oops and
27:14 - now we can hit play and when we shoot
27:18 - this guy you can see his health going
27:21 - down until he dies so that was a lot of
27:24 - code for not much functionality but this
27:27 - is going to be so easy to build on top
27:30 - of later we can add a bunch of different
27:33 - functionality and I just wanted to kind
27:35 - of give you this cool playground where
27:38 - you can add a bunch of different cool
27:40 - Mechanics for your game because it's
27:43 - gonna be a symbol as just adding it into
27:47 - the enemy stats class and then just
27:52 - changing it or changing it with a method
27:56 - inside of the enemy and just making sure
27:59 - that you pass that on to a method on the
28:01 - status indicator so it's it's fairly
28:04 - simple to get gameplay mechanics and
28:08 - kind of this a database of values and
28:11 - the graphics to work together awesome so
28:15 - that was basically everything for this
28:17 - video I'm just gonna play around with
28:19 - this for a bit just show you how this is
28:22 - working and I guess I'll see you in the
28:24 - next video

Cleaned transcript:

thanks for tuning in at brakus hello everyone welcome to video number 19 in how to make it to the platform a course in today's video we're going to take a look at creating an enemy health bar but we're gonna do this by creating a fairly generic status indicator script so we're going to be able to expand onto this later such as adding an ammo display something maybe if we want a kind of manna all that stuff and also will hopefully be able to use this both for the enemy and for the player so what that should be pretty cool but before we get into it I just quickly want to mention that if you have any questions go to forum brackets to come and also and not many people know this break is actually has an apparel store so if you want some cool breccia Smerch or some I'm a developer tshirts there's also a write code one they come in many different shapes and forms and colors so if you think that's cool check it out and also a lot of people ask me how they can kind of help support brackets well one way is of course donating that's completely optional but links are in the description or if you want to get something cool out of it you can always buy a tshirt that's a percentage of what it costs also goes to me so that definitely helps out a lot cool so now that I've self promoted a little bit let's go ahead and open up unity and as you can see I'm currently using the dark skin but of course all the features that we're going to be using are available in unity personal Edition so yeah the first thing that we want to do here is to set up the UI for what we're going to be making so we kind of had so we have a reference so we can see what's changing and to do this I'll go into the scene view and select our alien spaceship and on him I'll rightclick on the UI and create a and image and you can see that it spawns in this huge canvas if you just selected and hit so what we'll do with this is first off we'll call this status indicator and we'll drag this under the alien spaceship then we'll change the render mode to world space so that we can parent it to our alien space alien spaceship and have it follow around and next up we are going to bump the width let's just reset the transform actually down here and let's make it a width of 100 and a height of 400 which should be default and next up we can change the scale so basically instead of just like making it really really small by just dragging in on this box and setting the width and height really low we want to change the scale because else we are not going to have any pixels to work with inside of this area we want a hundred five hundred pixels to work with at least when starting out and then simply scaling and those pixels down so basically we want to set this like zero point one so one one seven one and then we can just change to the scaling tool by hitting R and simply just scale it down even further something like that looks pretty good and now we can drag it up and maybe make it a bit smaller here and and for that I'm not going to be using the scale I only use the scale uniformly so that's very important okay so next up we can take our image and simply snap it to scale with our entire canvas and basically I just want to bring this down to make it look a bit more like a health bar and then we wanted to basically snap to the bottom and scale with its width and in order to do that we'll simply click this right here also because we want this to scale in kind of from the right here to the left we'll have to change our pivot point so you can either drag that over here in the middle to the left or you can simply change the values for it here so you can see the only thing that we need to change is some set the X here to zero and it will snap to the left century cool so now you can see that if we change oops that must be an error if we change the canvas here it scales and with it and it doesn't scale on the y axis cool so uh next up I think is a let's do some text also that displays our health so let's make this bar here green and then later maybe we can make it change color depending on how much health and we have left that's definitely something that I wanted you but I think right now we should just kind of get it to where we wanted and then later we can do that kind of tweaking that's also fun challenge if you look up unity gradients so and we'll just rename this to health bar and next up we'll make a text object and you'll notice that this starts out pretty big and with this we just want to place it on let's see at the top here and so that it goes from the left to the right and we want to scale with that but we want it to be kind of parented to the top here so therefore you can select this one cool and whoops what we can do now is simply take the whole status indicator and bring it down a bit we can also change the font size to something like 10 and then we'll change the text here to something like 100 out of 100 HP will change the color to completely white and we'll make this a bold text object next up we'll simply drag this down something like that and then we can again bump this down something like that looks fairly decent and you will notice right now that our health bar is rendering very it almost pixel perfect I mean it's it's very sharp on the edges but on the text object is currently almost blurred out it's very clear that this is not very high resolution but and the reason for this and I'll show you just we'll just call this health text the reason for this is if we go into the status indicator we currently have a very low dynamic pixels per unit so PPU pixels per unit is what kind of help that helps us define the resolution per unit that this object should be drawn with so the higher the number you put here on the more calculations the computer will have to do but at the same time the higher resolution we will get and you don't need to change this much in order for it to get drastically better you can see just from one to two it gets a whole lot better and for this I'll put mine all the way up to five that might be a bit too much but I think and then that's a pretty fine number to begin with so you can see that that's completely crisp and this might not look extremely nice on the recording because of how it kind of calculates pixels but I'll show you that it looks pretty fine when I play the game here so that's something you can mess around with cool so next up I maybe just want to bring this in just a tad so if you want to scale from the center you can simply hold down alt while dragging and it'll do that so I think we'll put this at 75 and 17 so if you want my exact numbers you can get them there cool so now that we kind of had have that in place I think it's time to go ahead and actually make this update via script so let's make a status indicator script and this is of course going to be of type C C sharp status indicator let's double click this and it will open up in Visual Studio and again if you want a tutorial on setting up visual studio to work nicely with unity I just recently made one of those so we are going to exclude using a system that collection but instead we're gonna use a system a unity engine Jud unity engine that UI cool and we're gonna set up some references here the first reference I want to keep these values private because I don't want them to be accessed by other scripts but at the same time I want them to show up in the unity editor so we can drag them in so a cool way to do this is simply write out private and then the type and that's gonna be a type rect transform so we can change the scale on that and we are just gonna call this healthbar rect or something like that I think that's gonna be fine and next up a private text object called health text and if we want these to actually show up we can use this attribute here called serialize field so that will make them show up in the editor even though they are private and that's of course and the exact same as writing this I just like to be explicit with that kind of stuff cool and next up we'll maybe do some checking if we have these components I think we are so inside of an awake statement here let's actually just make this a start statement for now at least we'll say if health bar rect is equal to null you complain a bit so debugged add large error and will say no health bar object referenced and this is from the status indicator and we'll just copy this and would you have text status indicator no health text object referenced cool so I don't want to return or anything I just want to easily be able to see this in the console awesome so next up we'll make a public void and this is going to set the health so assuming that we have these components I think we're just going to assume that every status indicator has a health but if not we can just simply have stuff like manna or ammo points again that doesn't necessarily need to be applied but we'll get into that so public void set health and what we want to do in here is basically we want to pass in a few things so the first one is the int max health or let's do the current one first sort of current and then int max and notice that I'm doing these underscores that's just to be very explicit about this being a a private variable that is only accessible within the scope of this method so I do that that a lot when when kind of showing that this is passed in as an argument are created inside the method that's up to you if you want to take on that naming convention it's fairly standard in in csharp cool so once we have that in here we can simply calculate out and this is going to be a floating point value we're going to calculate out kind of the percentage of our maximum health that we currently have and actually let's make that a number between zero and one so we'll just call this one value and again because I'm creating this inside the method and it won't be accessible out here I'm gonna do the underscore and we're gonna set this equal to the current health divided by max health and we'll make sure that we cast this into a float awesome next up what we can do is we can simply set our health by rect dot local scale I think yes local scale equal to a new vector3 and in here we're gonna do value that's going to be our X so that's going to be go between zero and one depending on how much health we have and then one and one we just want the others other parts to remain the same we could also make sure that if we've made some changes to the other parts if we kind of scale them I think right now we're just gonna do one F but we could also do something like this actually we're just gonna do these four cuts for orders sake cone so that's gonna change the scale of our health by and next up we just want to change our text so we're just going to do health text that text equals and then we'll put in the current amount of health then we'll do a plus sign because we want to do the the slash there and then the maximum health and then we'll do space HP something like that however we however you want to format this is completely up to you I know that this is currently hardcoded and there are better ways to do that but I think this will be more than fine for now I mean it's the game is not that complicated as of as of yet it ain't broken we're not gonna fix it Colm so let's save that and this script should actually be error free and it should actually be working but currently we don't have anything calling this set health method and that's what we are going to implement plan implement into our enemy script so first off let's just make sure to set up our health bar and our health text at a later point if you want do the changing of colors on the health bar what we would do is in here simply grab the image component get then change the color of that image component and set it equal to a gradient that you've created up here public gradient where the value you used to live through that gradient would be underscore value so if that makes any sense awesome if not we are probably gonna get into it I don't want to promise it because we have so much to do but I know that unity cookie I think they I believe they're I believe they're called no that's wrong it was nearly cookie it's cooking with unity they have a tutorial on doing that awesome so let's move on so let's dig into our alien spaceship and open up the enemy script here and we're gonna expand just a bit on this because this is a very simple way to do a custom class but I kind of want to set this up in a bit more usable fashion so basically currently we only have a health we don't have any value storing the maximum amount of health that we allowed to have so if we wanted to do some healing that wouldn't be possible and again if we want to show our maximum health that's not currently possible either so let's change this around a bit so inside of our enemies stats we'll do a public int called max health and we want default this to anything just yet then we'll also do another another public int and this is going to be called current health actually I want to change this to max health to be noncapital and the same with this current health but I also want to create a private int called underscore current health so don't quite think we've gone over getters and setters yet so getters and setters are basically a way to control how we how we go about changing the value of a variable and that's why we have I get part on what we do when we want to retrieve what is inside the variable and we have a set part which basically allows us to change how we change a value in a very alpha variable so basically inside of this current health what we do is instead of whoops just making a semicolon we open up some brackets on a new line call and in here will basically be changing this private integer that's gonna store the number that we want to store but we're gonna be accessing it through this public Gator Get Set variable so first off let's create a getter so when ever we want to get something get our current health from this private variable we'll simply return return that variable so get just returns our current health but when we want to set it we don't just want to set the variable we want to make sure that it is between zero and our max health this will make sure that we don't ever go get a negative health amount and that we never get healed or whatever we want to do above our max health amount so that's a super cool thing that we can do very easily by just using a by using this set keyword so if we just wanted to set our current health equal to whatever value that we wanted we would simply say that underscore current health equals value that's the standard getter and setter and you've might seen it you might have seen it before if you've looked at some longer a csharp scripts but what we want to do is basically we want to clamp this between two values so we are gonna do math dot clamp and we're gonna say the value that we want to clamp is called value that's like of the keyword that we use for the value that this variable is set equal to and then the minimum is going to be zero and the maximum is going to be our max health so this will ensure that every time we change our current health we're going to it's going to be clamped between zero and our maximum amount of health and for some reason I've made an error here of some kind so what's going on I'll just save this out out in a second and we'll see what's wrong but first we'll just change our damage enemy here this is going to be change to current health so whenever we want to access it or change it we use the nun underscore version because that's kind of our accessor kind of what we have to go through in order to get to our actual current health so if that's very confusing to you at the moment I get it just note that this is a very handy way to control values so let's just try and save this and see what's going on here cannot implicitly convert time float to int and that's because we put an F here and the rest is integer values so we'll just do that and I think that should be fine yeah we are using the float version of math that clamp we wanted to use the integer version and cool so now that we have that in place another thing I want to do with the enemy stats is I want to make sure that we've said I am current health equal to our max health at the very beginning of our game so first off let's set a default amount for our max health and let's simply do that up here for now we could make a class constructor but let's just put it there and then down here I want to make a method that will allow us to initialize such very so right now it's simply our current health later it might be the mana and current mana and all that stuff but basically I just want to have a public void here called in it that will take care of all those kinds of variables that will have to be set up at at compile time or at the beginning of run time so inside of this init method we're simply gonna set our current health equal to our max health and it's that easy if we wanted to have an opponent begin or start its life with only a percentage of our max health we could create another public method here called or another public variable of type float and we'll just call this maybe start percent health something like that and we're going to default it to 1f and then you can simply say that the current health equals max health health time start percent health or something like that so you can check off some of an employment an opponent's health inside the unity editor but for now we're just gonna go with this and then we're going to go into a start method and in here we are simply gonna set say that our stats dot we're simply gonna say it's that starting it and also up here instead of just creating that there I think we are gonna say in our start method that we want stats to be equal to a new enemy stats that way we have complete control over when when it will create an add object now I'm starting to doubt this actually let's do this that's let the editor take care of that cool so but we definitely want to in need it inside of the start method there are so many ways to do this kind of stuff because we are really just creating a lot of code to not get very much done but it's important once you get a a bit of a bigger game which is this is which this is becoming and that you do this stuff because it will really help limit errors later and also if you're working multiple people on a project this is a necessity because it really gives a lot more freedom to the level editors awesome so now that we are in knitting the stats we simply want a reference to our status indicators so we're gonna make a public status indicator and again I don't want this to be public I actually want it to be private but I want it to be accessible in unity so we're gonna make a private serialize field and it's gonna be of type status indicator and I'm just gonna do status indicator for the name here the non capital S and then in the start method we'll set status indicator or check if status indicator it's equal to no and here we could say that we want to print out a an error if it's equal to null or we could just make this an optional part and I think we're gonna do that so not every enemy or whatever is going to need a status indicator but it can have one if it wants so therefore we're gonna make a header up here and headers are a property draw and an attribute that will allow you to just type in something inside of the unity editor or inside of the inspector at what we are going to type here is just optional just mark that as meant as an optional feature so if we go down here you will be able to see that once this refreshes that we have a status indicator and that it currently says optional right above so that's a pretty nice way of structuring your inspectors so if static aiders indicator is not equal to null we want to set health and we want to say current health oops want to set stats that current health come as stats dot max health awesome and next up under the enemy here down below here after we kill it if we don't need to handle its health if we just kill it right away but we will if it doesn't die so down here we are simply gonna set the health the same way so we're just gonna check if it's secret to Nollan if it isn't we're gonna set the health there awesome I think that was pretty much everything we needed to do so now we can simply go into our stats here and for some reason that's defaulting to zero so there we go 90 folding two hundred and I will simply drag in the status indicator oops and now we can hit play and when we shoot this guy you can see his health going down until he dies so that was a lot of code for not much functionality but this is going to be so easy to build on top of later we can add a bunch of different functionality and I just wanted to kind of give you this cool playground where you can add a bunch of different cool Mechanics for your game because it's gonna be a symbol as just adding it into the enemy stats class and then just changing it or changing it with a method inside of the enemy and just making sure that you pass that on to a method on the status indicator so it's it's fairly simple to get gameplay mechanics and kind of this a database of values and the graphics to work together awesome so that was basically everything for this video I'm just gonna play around with this for a bit just show you how this is working and I guess I'll see you in the next video
