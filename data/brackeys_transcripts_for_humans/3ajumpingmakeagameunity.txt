With timestamps:

00:02 - hello 1-over come to the third video and
00:06 - make a game a series on making a cool
00:09 - little video game in unity in the last
00:13 - video we made our first script and I
00:16 - talked about components and game objects
00:19 - and overall how to use unity to do
00:23 - coding functionality and in this one we
00:26 - are going to expand on some of the code
00:28 - we made the last time to make our ball
00:30 - jump and we are also going to make a
00:33 - script that makes our main camera follow
00:37 - our ball around and we're also going to
00:40 - talk about 3d perspective and yeah it's
00:43 - going to be a lot of fun so first off
00:47 - let's open up the unity I've already
00:50 - done this and let me just explain the
00:52 - first group we are going to be making
00:54 - here it's this one and basically what we
01:00 - want to do is we want to check if we
01:04 - press a button and if the and this could
01:09 - be any button this could be a W this
01:11 - could be the the spacebar it could be
01:15 - anything but if the player presses a
01:17 - button and the ball is currently
01:20 - standing on something we want to check
01:23 - for this because else we would be able
01:25 - to jump a unlimited amounts of times in
01:30 - the air and therefore almost fly so we
01:33 - want to check if the ball is standing on
01:35 - something before you can jump well then
01:38 - we want to make the ball jump and we do
01:42 - this by adding velocity on the y axis if
01:47 - you don't know this 3d space is composed
01:50 - by three axes a normal screen just uses
01:56 - two so it's 2d surface uses two axes and
01:58 - these are normally called the X and the
02:01 - y axis and this is what makes up
02:05 - everything you see on a 2d display but
02:08 - once we add the depth in 3d we get dizzy
02:12 - axis so whenever you want up both to
02:15 - jump if we look at it from this
02:17 - perspective here we want him to jump in
02:21 - the y-axis so we add velocity now that's
02:26 - the first thing we're going to be making
02:28 - I know this is the second thing and it
02:30 - all looks very confusing but trust me
02:33 - it's not we'll get into it
02:35 - don't worry so cool so today we're just
02:38 - going to be doing all kinds of fancy
02:40 - scripting stuff to make our game fun to
02:43 - play and and then the next time we can
02:46 - do some level design and make it look
02:48 - cool
02:49 - ok so I've talked enough already let's
02:52 - double click the ball control script
02:54 - which is the one we are going to be
02:56 - changing so double-click it to open it
03:00 - up in monodevelop
03:01 - and it opened up on my other monitor so
03:03 - that we have it I'll just zoom in here
03:06 - so you guys can see and ok so first off
03:11 - let's make the variable we are going to
03:13 - be needing this one is called jump
03:15 - height or strength or weigh whatever you
03:20 - want to call it I'll call it jump height
03:22 - and by default this is going to be equal
03:25 - to 8 that's just an estimate of how
03:30 - large the numbers should be I actually
03:32 - can't remember quite exactly then we
03:36 - want to make a private variable and this
03:39 - is something we are going to be using
03:41 - just in a sec and basically to explain
03:45 - what a private variable is let me first
03:47 - explain the variable link so the
03:49 - variable is a container of information
03:52 - it's basically a box where we can put
03:55 - everything in and then later open it and
03:58 - use it in a script like we do here we
04:00 - make a box with the rotation and then we
04:03 - open it and access everything in it and
04:06 - then we use it with the Delta time
04:08 - that's that's the basic idea of it but
04:12 - we also have different kinds of boxes we
04:15 - have a a box which we can change inside
04:18 - of unity so if that's just a normal
04:21 - variable this can only be accessed
04:23 - inside of the script or by changing
04:26 - in the inspector panel then we have
04:30 - private variables like the one we are
04:33 - going to be making now called private
04:36 - var and this is basically a closed box
04:39 - which you can only access inside of this
04:43 - script which wants show up in the
04:45 - inspector and then of course we have
04:48 - static variables these are these are
04:51 - often confused with public variables and
04:53 - what they do is it's basically a box
04:56 - open to everyone so all the other
04:59 - scripts can also accessed it but we'll
05:04 - just leave startup with a private
05:07 - variable here we'll get into using the
05:10 - other ones at some point probably so a
05:13 - private bar and we are going to call
05:15 - this this falling and the reason why we
05:18 - want this to be private is because we
05:20 - don't want to be able to change this
05:22 - inside of unity this is only something
05:25 - we need in the script and this is going
05:27 - to be equal to false
05:28 - remember the semi code cool now in the
05:33 - function update let's go down the low
05:36 - area where we handle the rotation and
05:39 - actually right above that let's make a
05:41 - new line and then two slashes like this
05:45 - tube dashes and that means a comment so
05:49 - whenever we make these two signs we can
05:51 - write whatever and it won't do anything
05:55 - it's only a comment on the script so
05:58 - here we can write handle rotation handle
06:05 - ball rotation let's call it lat
06:10 - but you can write everything you want so
06:12 - if you find that I tell you something
06:14 - you'll find hard to remember please
06:16 - write a comment about it or something
06:18 - you you wouldn't be able to just look at
06:20 - and know what is write a comment it's
06:22 - great and it makes it easier for others
06:24 - to read your code too okay moving on I'm
06:29 - really rambling today
06:30 - sorry ok so now we want to add
06:35 - now we want to check for input so we
06:37 - type if open a parenthesis and if
06:42 - statements I'll explain that in a sec
06:45 - let's first type input dot get key down
06:51 - open parenthesis key code that W you can
06:58 - also do that space I'll do that W close
07:03 - the parenthesis close the other
07:05 - parenthesis and then make to bracket
07:09 - keys okay so this all looks very
07:12 - confusing it's not you might get the
07:15 - basic idea if statements are made for
07:18 - checking if things are true if things
07:20 - happen if things are equal to other
07:23 - things it's made for checking all kinds
07:27 - of stuff and therefore if so if the
07:32 - requirements inside of these parentheses
07:34 - are met then it will call all of the
07:38 - code it will do all of the actions we
07:42 - put inside of these two bracket keys
07:44 - that's what an if statement does an if
07:47 - statements are some of the most used
07:49 - things in coding now let's take a look
07:53 - at the requirement we put here it's
07:54 - called input gate key down so if we get
07:57 - the key pressed called keiko w and there
08:03 - are many ways to write this we could
08:05 - also do get button down and then jump
08:13 - this is actually a better way to do it
08:16 - though it's not always set up correctly
08:18 - we'll have a look at buttons later
08:22 - probably but for now we'll just type get
08:24 - key down key code dot W like that and
08:32 - then close it off awesome
08:34 - so there are also different kinds of
08:38 - input events we could also just say get
08:41 - key this is if you want something to
08:43 - happen all the time when you're pressing
08:46 - a button so this
08:48 - is this will call the function as long
08:50 - as you're pressing the button get key
08:53 - down we'll call it only when you press
08:55 - it which means once and get key up we'll
08:58 - call it when you release the button
09:00 - which again means once inside of this
09:04 - will now type rigid body again just when
09:10 - we as we did when we access the when we
09:15 - access the rotation or the torque we
09:18 - will now access the velocity and then we
09:23 - will do it in the dot y axis which means
09:27 - up and down and we want this to be equal
09:30 - to jump height so basically we are
09:35 - setting a velocity for our object on the
09:38 - y axis to the jump height which is 8
09:41 - which means it will go up if this was
09:43 - negative 8 it would go down and cool now
09:49 - that we have that in place let's go
09:51 - ahead and test it out you will notice
09:53 - that we haven't used our private
09:55 - variable date yet we'll get to that in a
09:57 - second I just want to show you what we
09:59 - have so far so if we hit play now and
10:04 - remember we already have the script
10:06 - attached to our ball so we don't have to
10:08 - do that again we can see it's sitting
10:10 - right there and we have the jump height
10:12 - variable and if we hit jump or W we can
10:16 - see up a ball jumping nicely and we can
10:19 - combine this with our ability to move
10:22 - and all of a sudden we have a pretty fun
10:24 - game there is one problem though if I
10:28 - press W a whole lot I ball goes flying
10:32 - and I can do that an infinite number of
10:35 - times so to get rid of this again we
10:39 - will make sure to check if it's standing
10:41 - on something for this unity has made a
10:44 - function we can use normally when you
10:48 - check the things you use the if
10:49 - statement I just showed you but this
10:53 - time we're not going to use the if
10:54 - statement we are going to use the a
10:57 - separate function so outside the
11:00 - function update that's
11:01 - again type function and this one is
11:04 - called on collision stay this is
11:09 - something unity made for us in order to
11:12 - check for stuff like if we are on the
11:16 - ground it's a really great feature but
11:19 - it's unusual to check for something
11:22 - outside an if statement so this is
11:25 - really only when you're doing collision
11:27 - and triggers then you type in in a
11:30 - separate function if you want to check
11:32 - for something in all other cases you use
11:34 - the if statement as a general rule so
11:38 - open up the bracket keys and in here we
11:41 - can type is falling should be equal to
11:45 - false because now with when we collide
11:49 - with something or stand on an object we
11:52 - are not falling awesome then we can go
11:57 - under the if statement here we can go
12:01 - and tell we can add something to our if
12:04 - statement basically we want to check
12:07 - whether or not we are falling so instead
12:11 - of making a separate if statement inside
12:13 - of this one we could do that we could
12:15 - make it look like this make the separate
12:20 - if statement in here and then just
12:23 - change this then we will simply use the
12:29 - + sign to check for multiple things so
12:32 - but right next to the input that get
12:35 - button-down key code W we will make a
12:38 - space use the two and symbols and needs
12:45 - to be two of them another space and now
12:50 - we can just type another requirement
12:51 - which needs to be met this one is of
12:55 - course is falling should be equal to
12:59 - false and whenever you check if any
13:02 - variable is something you use to equals
13:05 - if you only want to assign a variable or
13:08 - tell the variable to be something you
13:10 - use one equals
13:11 - all of this is not something I I you
13:16 - should remember just off of the top of
13:18 - your head it will come slowly but surely
13:20 - surely but now you can just type after
13:23 - me and then you will get it in the
13:26 - future
13:26 - I promise so it and is falling is equal
13:30 - to false so if we on the ground and then
13:35 - of course if we do jump then we want our
13:38 - is falling to be true because now we are
13:44 - not longer on the ground we have just
13:47 - jumped we have added our velocity we
13:50 - cannot be on the ground any longer so
13:52 - now that we have this code let's go
13:55 - ahead and save it and we should have a
13:57 - beautifully working jump function so
14:00 - let's go ahead and jump a few times and
14:03 - there I was actually able to jump twice
14:07 - and this is because because it's a
14:10 - really good idea to move the is falling
14:13 - outside of this if statement and put it
14:17 - right there the reason why is not
14:20 - something I'm going to explain it's a
14:23 - longer just make sure to put it there
14:26 - and it should handle the code correctly
14:29 - it's something about how unity reads
14:31 - code now we should be able to jump just
14:35 - right up and down and roll from side to
14:38 - side and if I just keep on pressing the
14:40 - button I can only jump once we hit
14:43 - something great so now we got our basic
14:47 - controls working congratulations that's
14:50 - the first part of this video I'm going
14:54 - to go ahead and cut the video of here
14:56 - guys since else it's going to going to
14:59 - continue off in the distance but well it
15:02 - Part B will be out soon hopefully I will
15:06 - I will not take too long before it comes
15:10 - out don't worry so thanks for watching
15:12 - and I'll see you in the next video

Cleaned transcript:

hello 1over come to the third video and make a game a series on making a cool little video game in unity in the last video we made our first script and I talked about components and game objects and overall how to use unity to do coding functionality and in this one we are going to expand on some of the code we made the last time to make our ball jump and we are also going to make a script that makes our main camera follow our ball around and we're also going to talk about 3d perspective and yeah it's going to be a lot of fun so first off let's open up the unity I've already done this and let me just explain the first group we are going to be making here it's this one and basically what we want to do is we want to check if we press a button and if the and this could be any button this could be a W this could be the the spacebar it could be anything but if the player presses a button and the ball is currently standing on something we want to check for this because else we would be able to jump a unlimited amounts of times in the air and therefore almost fly so we want to check if the ball is standing on something before you can jump well then we want to make the ball jump and we do this by adding velocity on the y axis if you don't know this 3d space is composed by three axes a normal screen just uses two so it's 2d surface uses two axes and these are normally called the X and the y axis and this is what makes up everything you see on a 2d display but once we add the depth in 3d we get dizzy axis so whenever you want up both to jump if we look at it from this perspective here we want him to jump in the yaxis so we add velocity now that's the first thing we're going to be making I know this is the second thing and it all looks very confusing but trust me it's not we'll get into it don't worry so cool so today we're just going to be doing all kinds of fancy scripting stuff to make our game fun to play and and then the next time we can do some level design and make it look cool ok so I've talked enough already let's double click the ball control script which is the one we are going to be changing so doubleclick it to open it up in monodevelop and it opened up on my other monitor so that we have it I'll just zoom in here so you guys can see and ok so first off let's make the variable we are going to be needing this one is called jump height or strength or weigh whatever you want to call it I'll call it jump height and by default this is going to be equal to 8 that's just an estimate of how large the numbers should be I actually can't remember quite exactly then we want to make a private variable and this is something we are going to be using just in a sec and basically to explain what a private variable is let me first explain the variable link so the variable is a container of information it's basically a box where we can put everything in and then later open it and use it in a script like we do here we make a box with the rotation and then we open it and access everything in it and then we use it with the Delta time that's that's the basic idea of it but we also have different kinds of boxes we have a a box which we can change inside of unity so if that's just a normal variable this can only be accessed inside of the script or by changing in the inspector panel then we have private variables like the one we are going to be making now called private var and this is basically a closed box which you can only access inside of this script which wants show up in the inspector and then of course we have static variables these are these are often confused with public variables and what they do is it's basically a box open to everyone so all the other scripts can also accessed it but we'll just leave startup with a private variable here we'll get into using the other ones at some point probably so a private bar and we are going to call this this falling and the reason why we want this to be private is because we don't want to be able to change this inside of unity this is only something we need in the script and this is going to be equal to false remember the semi code cool now in the function update let's go down the low area where we handle the rotation and actually right above that let's make a new line and then two slashes like this tube dashes and that means a comment so whenever we make these two signs we can write whatever and it won't do anything it's only a comment on the script so here we can write handle rotation handle ball rotation let's call it lat but you can write everything you want so if you find that I tell you something you'll find hard to remember please write a comment about it or something you you wouldn't be able to just look at and know what is write a comment it's great and it makes it easier for others to read your code too okay moving on I'm really rambling today sorry ok so now we want to add now we want to check for input so we type if open a parenthesis and if statements I'll explain that in a sec let's first type input dot get key down open parenthesis key code that W you can also do that space I'll do that W close the parenthesis close the other parenthesis and then make to bracket keys okay so this all looks very confusing it's not you might get the basic idea if statements are made for checking if things are true if things happen if things are equal to other things it's made for checking all kinds of stuff and therefore if so if the requirements inside of these parentheses are met then it will call all of the code it will do all of the actions we put inside of these two bracket keys that's what an if statement does an if statements are some of the most used things in coding now let's take a look at the requirement we put here it's called input gate key down so if we get the key pressed called keiko w and there are many ways to write this we could also do get button down and then jump this is actually a better way to do it though it's not always set up correctly we'll have a look at buttons later probably but for now we'll just type get key down key code dot W like that and then close it off awesome so there are also different kinds of input events we could also just say get key this is if you want something to happen all the time when you're pressing a button so this is this will call the function as long as you're pressing the button get key down we'll call it only when you press it which means once and get key up we'll call it when you release the button which again means once inside of this will now type rigid body again just when we as we did when we access the when we access the rotation or the torque we will now access the velocity and then we will do it in the dot y axis which means up and down and we want this to be equal to jump height so basically we are setting a velocity for our object on the y axis to the jump height which is 8 which means it will go up if this was negative 8 it would go down and cool now that we have that in place let's go ahead and test it out you will notice that we haven't used our private variable date yet we'll get to that in a second I just want to show you what we have so far so if we hit play now and remember we already have the script attached to our ball so we don't have to do that again we can see it's sitting right there and we have the jump height variable and if we hit jump or W we can see up a ball jumping nicely and we can combine this with our ability to move and all of a sudden we have a pretty fun game there is one problem though if I press W a whole lot I ball goes flying and I can do that an infinite number of times so to get rid of this again we will make sure to check if it's standing on something for this unity has made a function we can use normally when you check the things you use the if statement I just showed you but this time we're not going to use the if statement we are going to use the a separate function so outside the function update that's again type function and this one is called on collision stay this is something unity made for us in order to check for stuff like if we are on the ground it's a really great feature but it's unusual to check for something outside an if statement so this is really only when you're doing collision and triggers then you type in in a separate function if you want to check for something in all other cases you use the if statement as a general rule so open up the bracket keys and in here we can type is falling should be equal to false because now with when we collide with something or stand on an object we are not falling awesome then we can go under the if statement here we can go and tell we can add something to our if statement basically we want to check whether or not we are falling so instead of making a separate if statement inside of this one we could do that we could make it look like this make the separate if statement in here and then just change this then we will simply use the + sign to check for multiple things so but right next to the input that get buttondown key code W we will make a space use the two and symbols and needs to be two of them another space and now we can just type another requirement which needs to be met this one is of course is falling should be equal to false and whenever you check if any variable is something you use to equals if you only want to assign a variable or tell the variable to be something you use one equals all of this is not something I I you should remember just off of the top of your head it will come slowly but surely surely but now you can just type after me and then you will get it in the future I promise so it and is falling is equal to false so if we on the ground and then of course if we do jump then we want our is falling to be true because now we are not longer on the ground we have just jumped we have added our velocity we cannot be on the ground any longer so now that we have this code let's go ahead and save it and we should have a beautifully working jump function so let's go ahead and jump a few times and there I was actually able to jump twice and this is because because it's a really good idea to move the is falling outside of this if statement and put it right there the reason why is not something I'm going to explain it's a longer just make sure to put it there and it should handle the code correctly it's something about how unity reads code now we should be able to jump just right up and down and roll from side to side and if I just keep on pressing the button I can only jump once we hit something great so now we got our basic controls working congratulations that's the first part of this video I'm going to go ahead and cut the video of here guys since else it's going to going to continue off in the distance but well it Part B will be out soon hopefully I will I will not take too long before it comes out don't worry so thanks for watching and I'll see you in the next video
