With timestamps:

00:00 - in this video we'll be making a system
00:01 - for character stats I'll make it easy to
00:03 - define stuff like health armor and
00:05 - damage and to have our equipment modify
00:07 - our stats also implement a method for
00:10 - taking damage that take these stats into
00:12 - consideration also if you didn't know so
00:14 - best in the previous video in the series
00:15 - so you can go to this channel to check
00:17 - that out let's get into it so as we can
00:18 - see it's better to set up some of the
00:20 - graphics for equipment we now start with
00:22 - some default wear and if we pick up some
00:25 - of the items here on the ground they
00:27 - will now appear in our inventory with
00:29 - the correct sprites and we can then
00:30 - equip them on to our character but
00:33 - currently the items have no effect on
00:34 - gameplay if we look under the items
00:37 - folder we can go under objects and here
00:39 - we have all the scriptable objects for
00:41 - our armor we'll see that each one has a
00:43 - armor and a damage modifier and the same
00:47 - thing for our default where I'm actually
00:49 - gonna select all of our default wear and
00:51 - set both of those to zero but we're
00:53 - currently not using these modifiers in
00:55 - any way to do that let's go under our
00:58 - scripts folder let's right-click go
01:00 - create folder and let's create one for
01:02 - all of our stats in here we'll create a
01:04 - script called character stats this will
01:07 - be responsible for keeping track of all
01:08 - the stats on all characters in the game
01:11 - and we'll make it in such a way that we
01:12 - can derive from it in order to create
01:14 - custom logic for our player and our
01:16 - enemies we'll also create another
01:18 - c-sharp script and this is just going to
01:20 - be called stat this will be afraid the
01:22 - symbol object representing a single stat
01:24 - such as armor or damage also just notice
01:27 - that I want to go out of debug mode in
01:29 - my inspector here let's begin by opening
01:31 - up our stat script let's the leader two
01:33 - methods and we don't want to derive from
01:35 - monobehaviour
01:36 - instead we want to go ahead and mark
01:38 - this class a system dot serializable
01:40 - remember we do this whenever we want
01:42 - unity to serialize a custom class which
01:45 - means that the fields inside of this
01:46 - class will show up in the inspector will
01:48 - then create a public integer called base
01:50 - value as the name suggests this will be
01:52 - the starting value for the given stat we
01:55 - do want this to show in the inspector
01:56 - but that's actually no reason for this
01:58 - to be public because we don't want to be
02:00 - able to access this directly this should
02:02 - only be set inside of the inspector and
02:04 - then when we want to get the value for
02:06 - us that we want to do that using a
02:08 - method so that we make sure to always
02:09 - apply modifiers before returning the
02:12 - value
02:12 - so we'll create a simple method called
02:14 - get value that returns an int to do that
02:16 - we go public int get value and right now
02:20 - we don't have any modifiers so we can
02:21 - simply return base value but we'll add
02:24 - those in a sec and now we don't need
02:26 - this to be public anymore so we can mark
02:28 - this as private and then in order to
02:30 - still make this editable in the
02:31 - inspector will mark it as serialize
02:34 - field if we now save this and go into
02:37 - our character stats here let's remove
02:39 - the two namespaces at the top and the
02:41 - two methods and now we can create a
02:43 - public stat called say damage let's also
02:47 - create one for armor if we then save
02:50 - this go into unity select our player and
02:53 - drag our character stats onto here we
02:55 - can see that we now have these two stats
02:57 - under which we can edit the base value
03:00 - awesome so each character now has a
03:02 - damage and armor value but we also want
03:05 - each character to have some health
03:07 - amount you could have this be a stat as
03:09 - well but I actually don't want to be
03:11 - able to add modifiers to health so
03:13 - simply keep this as an integer we call
03:16 - it max health and we'll just default it
03:18 - to say 100 we'll also create a public
03:21 - int which we'll call the current health
03:23 - and we'll make this a property of type
03:25 - get and then private set what this means
03:28 - is that any other class will be able to
03:31 - get this value but we can only set this
03:33 - value from within this class so for now
03:36 - create and awake method and in here we
03:39 - set current health equal to max health
03:42 - that's totally fine however if we try to
03:44 - do this from another class it wouldn't
03:46 - let us the next thing that we want all
03:48 - characters to be able to do is take
03:50 - damage so we'll create a public void
03:52 - called take damage and this will take in
03:54 - a damage and mount the simplest way to
03:56 - apply damage to her character is by
03:59 - simply subtracting it from our current
04:01 - health
04:01 - so we'll say current health minus equals
04:04 - damage and we can maybe also print out a
04:06 - message saying what happened in the
04:08 - console so we'll go deeper deadlock he
04:11 - will print out transform name then we'll
04:13 - say takes and then our damage amount of
04:17 - damage then we want to check if our
04:20 - current health has reached or gone below
04:22 - zero if it has we want the character to
04:24 - die to the go
04:25 - if current health is less than or equal
04:28 - to zero well then we want to call some
04:30 - kind of die method and how the character
04:32 - dies is completely going to depend on
04:35 - what character we're talking about we
04:37 - probably want enemies to either play a
04:38 - death animation or turn into physics
04:41 - ragdolls we might also want them to drop
04:43 - loot or trigger a cutscene but for the
04:46 - player we probably want some kind of
04:47 - game over screen or some way to respawn
04:49 - so the best way to do this is actually
04:51 - just make a public virtual void called
04:54 - die that we can then override for both
04:57 - the enemy and the player so here we want
04:59 - to die in some way this method is meant
05:03 - to be overwritten and then we can maybe
05:05 - just throw in a debug the LARC statement
05:07 - saying that transform that name died but
05:11 - our damage calculation is currently
05:13 - super simple let's utilize the fact that
05:15 - we have an armor stat and use this to
05:17 - lessen the damage in other words we can
05:19 - simply take our damage and subtract our
05:21 - armor stat remember to get the value of
05:23 - this type we go dot get value of course
05:26 - we might get a case here where we have a
05:28 - large amount of armor than incoming
05:30 - damage and that means that we simply
05:32 - want nothing to happen but right now
05:34 - this would actually make our damage
05:36 - negative and when subtracting with a
05:38 - negative number the result is positive
05:40 - which means that if our armor value is
05:42 - currently greater than the damage we
05:44 - would actually be healed and we don't
05:46 - want that to avoid that we'll make sure
05:48 - to clamp our damage between zero and int
05:51 - max value so now our damage should never
05:54 - go below zero so now we have a structure
05:56 - in place for taking damage but we
05:58 - currently don't have any combat let's go
06:00 - in here and add an update method and
06:04 - we're gonna add a quick test in here
06:05 - where we check if we press the T key T
06:10 - for tests and if we do well then we want
06:12 - to take some damage and we'll just set
06:14 - the damage amount here to say ten now if
06:16 - we save that go into unity and hit play
06:18 - will also switch into debug mode we can
06:21 - see that our current health is currently
06:23 - 100 if we then press the T key it says
06:26 - player takes 10 damage and the current
06:28 - health is now reduced to 90 if we bump
06:31 - up the base value for our armor let's
06:33 - just set it to 5 and then try and do the
06:35 - same thing we can see that it says
06:37 - player takes 5 damage
06:39 - and now the health is only reduced to 85
06:41 - so already our system is working but our
06:43 - damage and armor values are still
06:45 - unaffected by equipment to change that
06:48 - let's get rid of our character stats and
06:50 - instead create a new C sharp script
06:52 - called player stats we can then derive
06:54 - player stats from character stats and
06:57 - here we can use the fact that in our
06:58 - equipment manager equipment manager dot
07:02 - instance we put in a callback method for
07:04 - whenever a new item was equipped we call
07:06 - this on equipment changed we can now
07:09 - create our own method inside of this
07:10 - class and subscribe it to this callback
07:12 - let's call this method on equipment
07:14 - changed let's go ahead and create it
07:17 - down here void on equipment changed and
07:20 - this is going to take in a piece of
07:22 - equipment which is the new item and a
07:25 - piece of equipment called the old item
07:27 - just as we defined it inside of the
07:29 - equipment manager in order to apply
07:31 - these modifiers let's go into our stat
07:33 - and here we can create a list of all of
07:35 - the modifiers currently on this stat
07:37 - let's create a private list of integers
07:40 - and we'll call it modifiers a by default
07:43 - we'll set it equal to a new list of
07:45 - integers then we can create a public
07:48 - void add modifier which takes in an
07:52 - integer called modifier here we want to
07:55 - check if the modifier is not equal to
07:57 - zero in which case we want to add this
08:00 - to the modifiers list we do that by
08:02 - calling modifier stud ad and feeding in
08:05 - the modifier that we want to add and
08:07 - we'll do the exact same thing for
08:09 - removing modifiers let's create a public
08:11 - void called remove modifier this also
08:14 - takes in an integer called modifier here
08:16 - we also check if modifier is not equal
08:19 - to null in which case we'll call
08:21 - modifiers dot remove and feed it the
08:24 - modifier passed in if we save this now
08:27 - and go into our player stats we then go
08:29 - armored dot add modifier new item dot
08:32 - our my modifier and the same thing for
08:34 - damaged damaged stud add modifier new
08:37 - item dot damage modifier and of course
08:41 - we only want to do this if our new item
08:43 - is not equal to null and we can do the
08:46 - exact same thing for our old item but in
08:48 - Reverse so if old item is not equal to
08:51 - null with
08:52 - we want to go armored remove modifier
08:54 - old item dot armor modifier and damage
08:59 - don't remove modifier old item dot
09:02 - damage modifier so now every time an
09:04 - item gets equipped this method gets
09:06 - called and we make sure to add and
09:08 - remove the appropriate modifiers if we
09:10 - now save this go into unity
09:12 - make sure that we're in debug mode in
09:14 - the inspector select our player drag in
09:16 - our new player stat script we can give
09:18 - the damage here base value of say 5 and
09:21 - just leave the armor at a base value of
09:23 - zero we should then be able to hit play
09:25 - see that we currently have no modifiers
09:27 - for the damage or armor if we then pick
09:29 - up our equipment here and we then start
09:32 - to equip it let's equip the helmet first
09:34 - we can see now that a modifier of 1 gets
09:36 - added to our damage and a modifier of 2
09:39 - gets added to our armor and it will keep
09:41 - on adding more modifiers as we equip
09:44 - more items so now with all three items
09:46 - equipped you can see the different
09:47 - modifiers that are now added to our
09:49 - armor and damage and just to make sure
09:51 - this is working we can see that our
09:52 - armor has a base value of zero but it
09:55 - has two modifiers one of +2 and one of
09:58 - +3 so all our incoming damage should now
10:00 - be reduced by 5 so if we take 10 damage
10:03 - we should only subtract 5 health but if
10:05 - I press T it still says player takes 10
10:07 - damage the reason for this is that
10:09 - inside of our stat when getting the
10:11 - value we are currently only returning
10:12 - the base value in here we need to create
10:14 - an integer called final value and we'll
10:17 - set this equal to base value will then
10:19 - need to loop through all of the values
10:21 - in our modifiers list and add them to
10:23 - our final value a quick way to do this
10:25 - is using modifiers dot for each so for
10:29 - each element in our modifiers list and
10:31 - we'll call the given element x will then
10:34 - want to add X onto the final values of
10:36 - final value plus equals X and then
10:39 - instead of returning the base value we
10:41 - want to return final value let's say
10:43 - that going to unity hit play we'll make
10:46 - sure to equip all of our items so again
10:48 - we have an armor of 5 and when I now
10:51 - press T the player only takes 5 damage
10:54 - and that should be it for player stats
10:56 - let's pretty much it for this video if
10:58 - you enjoyed it make sure to subscribe so
10:59 - don't miss the future one also if you
11:00 - haven't checked out the Mayan temple
11:02 - pack that we recently released on dev
11:04 - assets I definitely recommend
11:06 - you do sir I would love to see an RPG
11:07 - with that theme and in general I would
11:09 - like to see more of what you are doing
11:10 - so if you've been making a game using
11:12 - these tutorials or maybe one of the
11:14 - packs on dev assets definitely treat me
11:16 - some pictures at brackets we are really
11:18 - excited to see what you guys are doing
11:19 - on that thanks for watching and I will
11:20 - see you in the next video thanks to all
11:23 - the awesome patreon supporters who
11:24 - donated in August and a special thanks
11:26 - to hence off-tune yes pamekasan Thomas
11:28 - Wally stone gamer
11:29 - Sybok Nami chase nate'd Oh Derek heaps
11:31 - Kirk face Tamara with some casa
11:33 - kudamon Erin Robert punt and Peter lock
11:36 - if your name's not on the list I will
11:37 - make sure to include it in videos later
11:39 - this month and the next month as well
11:40 - you guys Rock

Cleaned transcript:

in this video we'll be making a system for character stats I'll make it easy to define stuff like health armor and damage and to have our equipment modify our stats also implement a method for taking damage that take these stats into consideration also if you didn't know so best in the previous video in the series so you can go to this channel to check that out let's get into it so as we can see it's better to set up some of the graphics for equipment we now start with some default wear and if we pick up some of the items here on the ground they will now appear in our inventory with the correct sprites and we can then equip them on to our character but currently the items have no effect on gameplay if we look under the items folder we can go under objects and here we have all the scriptable objects for our armor we'll see that each one has a armor and a damage modifier and the same thing for our default where I'm actually gonna select all of our default wear and set both of those to zero but we're currently not using these modifiers in any way to do that let's go under our scripts folder let's rightclick go create folder and let's create one for all of our stats in here we'll create a script called character stats this will be responsible for keeping track of all the stats on all characters in the game and we'll make it in such a way that we can derive from it in order to create custom logic for our player and our enemies we'll also create another csharp script and this is just going to be called stat this will be afraid the symbol object representing a single stat such as armor or damage also just notice that I want to go out of debug mode in my inspector here let's begin by opening up our stat script let's the leader two methods and we don't want to derive from monobehaviour instead we want to go ahead and mark this class a system dot serializable remember we do this whenever we want unity to serialize a custom class which means that the fields inside of this class will show up in the inspector will then create a public integer called base value as the name suggests this will be the starting value for the given stat we do want this to show in the inspector but that's actually no reason for this to be public because we don't want to be able to access this directly this should only be set inside of the inspector and then when we want to get the value for us that we want to do that using a method so that we make sure to always apply modifiers before returning the value so we'll create a simple method called get value that returns an int to do that we go public int get value and right now we don't have any modifiers so we can simply return base value but we'll add those in a sec and now we don't need this to be public anymore so we can mark this as private and then in order to still make this editable in the inspector will mark it as serialize field if we now save this and go into our character stats here let's remove the two namespaces at the top and the two methods and now we can create a public stat called say damage let's also create one for armor if we then save this go into unity select our player and drag our character stats onto here we can see that we now have these two stats under which we can edit the base value awesome so each character now has a damage and armor value but we also want each character to have some health amount you could have this be a stat as well but I actually don't want to be able to add modifiers to health so simply keep this as an integer we call it max health and we'll just default it to say 100 we'll also create a public int which we'll call the current health and we'll make this a property of type get and then private set what this means is that any other class will be able to get this value but we can only set this value from within this class so for now create and awake method and in here we set current health equal to max health that's totally fine however if we try to do this from another class it wouldn't let us the next thing that we want all characters to be able to do is take damage so we'll create a public void called take damage and this will take in a damage and mount the simplest way to apply damage to her character is by simply subtracting it from our current health so we'll say current health minus equals damage and we can maybe also print out a message saying what happened in the console so we'll go deeper deadlock he will print out transform name then we'll say takes and then our damage amount of damage then we want to check if our current health has reached or gone below zero if it has we want the character to die to the go if current health is less than or equal to zero well then we want to call some kind of die method and how the character dies is completely going to depend on what character we're talking about we probably want enemies to either play a death animation or turn into physics ragdolls we might also want them to drop loot or trigger a cutscene but for the player we probably want some kind of game over screen or some way to respawn so the best way to do this is actually just make a public virtual void called die that we can then override for both the enemy and the player so here we want to die in some way this method is meant to be overwritten and then we can maybe just throw in a debug the LARC statement saying that transform that name died but our damage calculation is currently super simple let's utilize the fact that we have an armor stat and use this to lessen the damage in other words we can simply take our damage and subtract our armor stat remember to get the value of this type we go dot get value of course we might get a case here where we have a large amount of armor than incoming damage and that means that we simply want nothing to happen but right now this would actually make our damage negative and when subtracting with a negative number the result is positive which means that if our armor value is currently greater than the damage we would actually be healed and we don't want that to avoid that we'll make sure to clamp our damage between zero and int max value so now our damage should never go below zero so now we have a structure in place for taking damage but we currently don't have any combat let's go in here and add an update method and we're gonna add a quick test in here where we check if we press the T key T for tests and if we do well then we want to take some damage and we'll just set the damage amount here to say ten now if we save that go into unity and hit play will also switch into debug mode we can see that our current health is currently 100 if we then press the T key it says player takes 10 damage and the current health is now reduced to 90 if we bump up the base value for our armor let's just set it to 5 and then try and do the same thing we can see that it says player takes 5 damage and now the health is only reduced to 85 so already our system is working but our damage and armor values are still unaffected by equipment to change that let's get rid of our character stats and instead create a new C sharp script called player stats we can then derive player stats from character stats and here we can use the fact that in our equipment manager equipment manager dot instance we put in a callback method for whenever a new item was equipped we call this on equipment changed we can now create our own method inside of this class and subscribe it to this callback let's call this method on equipment changed let's go ahead and create it down here void on equipment changed and this is going to take in a piece of equipment which is the new item and a piece of equipment called the old item just as we defined it inside of the equipment manager in order to apply these modifiers let's go into our stat and here we can create a list of all of the modifiers currently on this stat let's create a private list of integers and we'll call it modifiers a by default we'll set it equal to a new list of integers then we can create a public void add modifier which takes in an integer called modifier here we want to check if the modifier is not equal to zero in which case we want to add this to the modifiers list we do that by calling modifier stud ad and feeding in the modifier that we want to add and we'll do the exact same thing for removing modifiers let's create a public void called remove modifier this also takes in an integer called modifier here we also check if modifier is not equal to null in which case we'll call modifiers dot remove and feed it the modifier passed in if we save this now and go into our player stats we then go armored dot add modifier new item dot our my modifier and the same thing for damaged damaged stud add modifier new item dot damage modifier and of course we only want to do this if our new item is not equal to null and we can do the exact same thing for our old item but in Reverse so if old item is not equal to null with we want to go armored remove modifier old item dot armor modifier and damage don't remove modifier old item dot damage modifier so now every time an item gets equipped this method gets called and we make sure to add and remove the appropriate modifiers if we now save this go into unity make sure that we're in debug mode in the inspector select our player drag in our new player stat script we can give the damage here base value of say 5 and just leave the armor at a base value of zero we should then be able to hit play see that we currently have no modifiers for the damage or armor if we then pick up our equipment here and we then start to equip it let's equip the helmet first we can see now that a modifier of 1 gets added to our damage and a modifier of 2 gets added to our armor and it will keep on adding more modifiers as we equip more items so now with all three items equipped you can see the different modifiers that are now added to our armor and damage and just to make sure this is working we can see that our armor has a base value of zero but it has two modifiers one of +2 and one of +3 so all our incoming damage should now be reduced by 5 so if we take 10 damage we should only subtract 5 health but if I press T it still says player takes 10 damage the reason for this is that inside of our stat when getting the value we are currently only returning the base value in here we need to create an integer called final value and we'll set this equal to base value will then need to loop through all of the values in our modifiers list and add them to our final value a quick way to do this is using modifiers dot for each so for each element in our modifiers list and we'll call the given element x will then want to add X onto the final values of final value plus equals X and then instead of returning the base value we want to return final value let's say that going to unity hit play we'll make sure to equip all of our items so again we have an armor of 5 and when I now press T the player only takes 5 damage and that should be it for player stats let's pretty much it for this video if you enjoyed it make sure to subscribe so don't miss the future one also if you haven't checked out the Mayan temple pack that we recently released on dev assets I definitely recommend you do sir I would love to see an RPG with that theme and in general I would like to see more of what you are doing so if you've been making a game using these tutorials or maybe one of the packs on dev assets definitely treat me some pictures at brackets we are really excited to see what you guys are doing on that thanks for watching and I will see you in the next video thanks to all the awesome patreon supporters who donated in August and a special thanks to hence offtune yes pamekasan Thomas Wally stone gamer Sybok Nami chase nate'd Oh Derek heaps Kirk face Tamara with some casa kudamon Erin Robert punt and Peter lock if your name's not on the list I will make sure to include it in videos later this month and the next month as well you guys Rock
