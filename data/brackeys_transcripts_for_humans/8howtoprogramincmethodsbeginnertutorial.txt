With timestamps:

00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome to video number
00:05 - eight in how to program in c sharp in
00:08 - today's video we're going to have a look
00:10 - at methods this is mostly going to be
00:13 - just an introduction to what can we do
00:15 - with methods and how to rewrite them out
00:18 - but of course we might have an more
00:21 - in-depth look later so what are methods
00:25 - well for the beginner methods are
00:28 - basically a way to group together code
00:30 - to make it much easier to read but once
00:34 - you start getting a bit more advanced
00:36 - using parameters and return types
00:39 - methods are really are really really
00:42 - useful for doing all kinds of of things
00:45 - such as reusing code organizing code and
00:49 - and really making your code more
00:53 - flexible so methods are also commonly
00:56 - known as functions in c-sharp and that's
00:59 - because it's an object-oriented
01:01 - programming language so those two terms
01:03 - are interchangeable in other languages
01:06 - they might not mean exactly the same
01:08 - join it generally you can say that a
01:11 - method will always be a function a
01:13 - function won't always be a method though
01:16 - but in c-sharp it will so before we get
01:20 - started today I just quickly want to
01:22 - mention that i if you are a rapid unity
01:24 - user i've created an extension for unity
01:28 - called UPA toolkit where you can make
01:31 - pixel-art
01:31 - inside of unity itself if you don't know
01:33 - you know decent awesome game engine
01:35 - which I have plenty of tutorials on and
01:37 - I've just relieved it released a new
01:39 - version way which introduces a layer
01:43 - system so you could get that on the
01:44 - asset store just wanted to do a quick
01:46 - plug that cool so let's open up our
01:50 - salmon studio project I'm going to zoom
01:52 - in on the code here by the way I've been
01:54 - getting quite a few questions as to why
01:57 - I'm using salmon studio trust me it's
02:00 - not really something that I enjoy very
02:02 - much I don't think that examine studio
02:05 - is the best IDE out there by any means
02:07 - but it's very accessible it's very easy
02:10 - to use and it's very
02:13 - Abell for both pc and mac which was a
02:15 - requirement for this tutorial if you are
02:18 - using a PC or Windows computer I
02:21 - definitely recommend that you check out
02:24 - Visual Studio instead
02:26 - that's Microsoft's own IDE and if you're
02:29 - using Mac you have something called
02:31 - Xcode available which is also really
02:34 - really good but if you want everything
02:36 - to look exactly like I have it here
02:37 - trust me for the things we're going to
02:39 - be doing seminarian studio is fine cool
02:42 - so let's take right into it as you can
02:45 - see here whenever we start up with a
02:46 - project we have a function here or
02:49 - method called main and we've just
02:51 - ignored this until now except for this
02:54 - comment here that says it's a method
02:56 - called main and it's called when the
02:58 - program starts because pretty much any
03:01 - kind of application has what is called
03:03 - an entry function and this is basic
03:06 - basically a method that is called when
03:10 - every the program starts and this is
03:12 - where you start calling other functions
03:14 - and your whole program begins because it
03:17 - would be a really borrowing program if
03:19 - nothing happened when it started so
03:22 - that's basically what this is when
03:24 - you're doing c-sharp the main function
03:27 - is the start function and then from here
03:31 - we can do some code and in here we've
03:33 - written all kinds of code we have done
03:35 - while loops and for loops but what if we
03:39 - have this larger application let's say
03:42 - we want to have an application that does
03:44 - multiple things well instead of writing
03:46 - everything out and just continuing on
03:49 - and on and on in the main function we
03:51 - can split this up into different methods
03:54 - so for example if we wanted to agreed
03:57 - the user we could have a method that
04:00 - does this so let's create one now so
04:03 - under the the public static void main
04:08 - we're going to type another method down
04:10 - here make sure that it's inside of the
04:13 - same class and of course inside of the
04:15 - same namespace so just under here we're
04:18 - going to type public just use the same
04:20 - syntax as you see up here static void
04:23 - and this for now is what we are going to
04:26 - type
04:27 - in front of every function then you're
04:29 - going to type in the name and we're
04:31 - going to maybe type in greed user and
04:35 - then what you want to do and you want to
04:38 - have this for any method of any kind you
04:41 - want to have an open and close
04:43 - parenthesis and you notice that in here
04:46 - we have what is called an argument we
04:49 - are not going to have that yet we're
04:51 - going to look at that later and then
04:53 - we're going to open and close some
04:54 - brackets I'm just going to bump this
04:57 - down here to make it more readable and
04:58 - then in here we can write some code for
05:02 - example we could say console dot write
05:04 - line and we're going to type in hello
05:08 - world like this and then what we do up
05:15 - here is we can call this method so this
05:18 - is basically how we define a method and
05:21 - this is a method definition and this up
05:24 - here is going to be a method call so
05:27 - we're going to type in greed user we're
05:30 - going to put in the parentheses and
05:32 - we're going to end with a semicolon you
05:35 - might see that this looks very familiar
05:36 - to console that read key but we do
05:40 - exactly the same the reason why is that
05:42 - concert that rekey as with pretty much
05:45 - anything we've been doing until now is a
05:48 - method the same is console.writeline
05:51 - that has an argument and and so on so
05:54 - the programming is really just calling
05:58 - and defining a bunch of methods in order
06:01 - to do different stuff so now when we run
06:04 - this program it's going to start out in
06:06 - our entry function which is the main
06:08 - function it's going to call the greed
06:10 - user function so it's going to go down
06:12 - here and it's going to write out hello
06:15 - world then when it's done with that it's
06:18 - going to go back here and it's going to
06:20 - print out console or it's going to wait
06:23 - for an input so let's try it and hit
06:27 - play you can see it opens up a console
06:30 - window hello world is printed and when
06:32 - we type something it closes so that's a
06:36 - the most basic use form for a a a method
06:40 - much cool about this is that we can have
06:42 - different methods we can have them call
06:44 - each other let's say we could maybe call
06:47 - another method here that would maybe do
06:49 - and let's say if we wanted to after
06:52 - greeting the user we could maybe say
06:54 - wait for user input then we can have
06:57 - that as a function or we could have it
07:01 - up here wait for some user input then we
07:06 - could maybe
07:07 - process input and then we could maybe
07:13 - print output so and this is what many
07:19 - simple programs look like it's just on
07:22 - these different groupings of
07:24 - functionality into functions that we
07:27 - then call in a specific order so the
07:32 - cool thing about this is that it's not
07:34 - only used used to group together
07:37 - functionality it's also used pretty much
07:41 - as a utility of some sort I like to
07:44 - think of methods as a machine where are
07:48 - you tell the Machine that it needs to do
07:50 - something and then it does so but the
07:54 - machine can get more advanced you can
07:57 - also give the Machine some kind of input
07:59 - and then it does something with that
08:02 - input and if the machine is really
08:04 - awesome
08:05 - it will also give you an output back so
08:09 - let's have a look at the first instance
08:13 - here where we just say that the machine
08:15 - should do something and it does that's
08:16 - what we have here the second instance is
08:19 - where we give some the Machine some
08:22 - input that it then does something with
08:24 - let's try writing one of those methods
08:26 - so I'm going to delete this here and
08:28 - delete this here so again we start with
08:31 - public static void we call this maybe
08:35 - add let's say we want to add to two
08:40 - numbers together and then print out the
08:42 - result so we open and close the
08:45 - parenthesis and we put we open and close
08:48 - some brackets here and in here we can
08:51 - then add together some numbers but let's
08:53 - say
08:54 - up here in the main function we know
08:56 - which numbers we should add when well
08:59 - then we need to some way of calling the
09:03 - method but also giving it some numbers
09:06 - that it should add together this is
09:09 - where arguments come in so arguments or
09:12 - parameters if you will a way of path
09:15 - passing input into a method from the
09:19 - place that it's called so if we say that
09:22 - we want to add together two integers we
09:26 - can type in here in CH int num1 this
09:29 - looks very much like available take
09:31 - declaration and really it is comma two
09:34 - another one int num2 now we know that
09:40 - this method wants to have passed in two
09:44 - numbers say we were separated by a comma
09:47 - so up here we can now write maybe four
09:50 - and eight and you can see that it wants
09:54 - here an input of first number one and
09:58 - then number two and both of type integer
10:01 - so this is the way that we pass input to
10:04 - the function and then inside of the
10:06 - method itself we can then do num1 plus
10:10 - num2 and we can maybe just print this
10:14 - out so we can do console dot bright line
10:18 - num1 plus num2 let's try this out so hit
10:24 - play you can see it writes out the
10:26 - number 12 and we can of course give it
10:29 - any two numbers that we would like up
10:31 - here ten and eight that's going to write
10:33 - out 18 and so on what you can also do is
10:38 - have multiple different methods with the
10:41 - same name but with different different
10:43 - arguments so let's say that we have
10:46 - another method called add that doesn't
10:49 - take in just two arguments but takes in
10:51 - a third one to numb three here and we're
10:54 - going to add numb three down here two
10:57 - and then up here we can first add
11:02 - together ten and eight and then we can
11:04 - maybe also add together ten eight and
11:07 - um - and we can see that it just
11:10 - automatically knows that this should
11:12 - call the method here and this should
11:15 - call the method down here let's try this
11:18 - out again the play and it it shows the
11:21 - numbers 18 and 20 hmm great great so
11:26 - that was the second instance if we want
11:28 - to give our method some kind of input
11:30 - I'm just going to delete the second
11:33 - method there and the method here but I'm
11:36 - going to keep the add method because
11:38 - let's say that we don't want to just
11:40 - print out the numbers but we want to use
11:43 - the result of the calculation up here so
11:46 - we can use it for all different kind of
11:48 - stuff maybe checking if it's larger than
11:51 - some value
11:52 - maybe printing it out maybe using it for
11:55 - a further calculation just as part of
11:58 - some calculation then we can do all
12:00 - kinds of stuff up here if we have some
12:03 - way of retrieving the result from the
12:06 - method so in order to do this instead of
12:09 - writing out the result here we use what
12:13 - is called a return type and the way you
12:18 - do this is instead of writing public
12:21 - static void we write something else
12:24 - right here because what void actually
12:28 - means is return nothing that's what we
12:31 - type when we don't want the method to go
12:34 - back and insert anything here when we
12:37 - just wanted to do something here with
12:38 - the input that it's given but if we
12:41 - wanted to give something back
12:43 - we can type that we right here the type
12:47 - that we want to give back in this case
12:49 - we want to give back an integer number
12:51 - so we write int here then what we can do
12:56 - is instead of writing console.writeline
12:59 - and then adding the numbers together we
13:02 - simply write return followed by what we
13:06 - want to return so we write num1 plus
13:10 - num2 so now what this method does is it
13:15 - when it is called it's going to take in
13:18 - two numbers it's gonna
13:21 - them together and it's going to give
13:23 - back the result that's going to return
13:25 - an integer value that we can get then
13:28 - use up here so what we do up here in
13:31 - order to use this value and right now we
13:34 - are simply going to write out the result
13:36 - so we're going to say console dot write
13:39 - line and then in here we can use this
13:42 - basically as any other variable we can
13:45 - simply go like this or maybe we could
13:48 - store it in a variable here called
13:50 - result so we're going to type int result
13:52 - equals add like this so now we can
13:56 - simply say that different variables
13:58 - should equal the result of this
14:00 - calculation because we are returning a
14:02 - number and then in here we could write
14:04 - out the result so this makes our code
14:09 - much more flexible it makes the method
14:11 - here much more reusable
14:13 - and it just looks very cool so now when
14:17 - we hit play you can see that as before
14:19 - it writes out the number 18 but now
14:21 - we're able to do much more with this for
14:23 - example we could check if result is
14:30 - greater than 10 then we want to console
14:35 - dot readline result is larger than 10
14:46 - and if it's not else console dot
14:53 - readline result is smaller than or equal
15:02 - to whoops
15:06 - 210 so and by the way this is just
15:12 - shorthand notation I'm just leaving out
15:14 - the brackets here I'm just going to put
15:17 - them in to make it a bit easier for you
15:20 - to follow I'm just way to use to not not
15:24 - typing them when you only need one
15:26 - single line of code you can just leave
15:28 - them out but it is generally better
15:31 - practice to to get them in there because
15:33 - sometimes you just
15:34 - want to add something to them there and
15:37 - then then you're going to put them in
15:40 - anyway so like this so now you can see
15:43 - that when we are getting the value back
15:46 - like this we can do different stuff with
15:48 - it such as checking the result which is
15:51 - what we're doing here so if we if we
15:56 - play now we should see that the result
15:59 - is larger than 10 and indeed we do and
16:04 - if we maybe type in our 1 and 8 it's
16:08 - going to say the result is smaller than
16:10 - or equal to 10 so that was this
16:14 - introduction to methods with this you're
16:18 - going to be able to write the majority
16:20 - of methods yet you're going to write in
16:22 - your programming career if you
16:24 - understand return types already that's
16:26 - really great a lot of people have a hard
16:29 - time understanding exactly what that
16:31 - does if you don't well then you were
16:34 - probably part of the majority and for
16:37 - now you can just type after me but it's
16:40 - good to just know that it exists and
16:42 - that don't worry you will master it I
16:45 - sure was very confused about this when I
16:48 - started so great thank you for watching
16:52 - the whole way through this video I hope
16:54 - you've learned something and I'll see
16:55 - you in the next video

Cleaned transcript:

thanks for tuning in at brakus hello everyone and welcome to video number eight in how to program in c sharp in today's video we're going to have a look at methods this is mostly going to be just an introduction to what can we do with methods and how to rewrite them out but of course we might have an more indepth look later so what are methods well for the beginner methods are basically a way to group together code to make it much easier to read but once you start getting a bit more advanced using parameters and return types methods are really are really really useful for doing all kinds of of things such as reusing code organizing code and and really making your code more flexible so methods are also commonly known as functions in csharp and that's because it's an objectoriented programming language so those two terms are interchangeable in other languages they might not mean exactly the same join it generally you can say that a method will always be a function a function won't always be a method though but in csharp it will so before we get started today I just quickly want to mention that i if you are a rapid unity user i've created an extension for unity called UPA toolkit where you can make pixelart inside of unity itself if you don't know you know decent awesome game engine which I have plenty of tutorials on and I've just relieved it released a new version way which introduces a layer system so you could get that on the asset store just wanted to do a quick plug that cool so let's open up our salmon studio project I'm going to zoom in on the code here by the way I've been getting quite a few questions as to why I'm using salmon studio trust me it's not really something that I enjoy very much I don't think that examine studio is the best IDE out there by any means but it's very accessible it's very easy to use and it's very Abell for both pc and mac which was a requirement for this tutorial if you are using a PC or Windows computer I definitely recommend that you check out Visual Studio instead that's Microsoft's own IDE and if you're using Mac you have something called Xcode available which is also really really good but if you want everything to look exactly like I have it here trust me for the things we're going to be doing seminarian studio is fine cool so let's take right into it as you can see here whenever we start up with a project we have a function here or method called main and we've just ignored this until now except for this comment here that says it's a method called main and it's called when the program starts because pretty much any kind of application has what is called an entry function and this is basic basically a method that is called when every the program starts and this is where you start calling other functions and your whole program begins because it would be a really borrowing program if nothing happened when it started so that's basically what this is when you're doing csharp the main function is the start function and then from here we can do some code and in here we've written all kinds of code we have done while loops and for loops but what if we have this larger application let's say we want to have an application that does multiple things well instead of writing everything out and just continuing on and on and on in the main function we can split this up into different methods so for example if we wanted to agreed the user we could have a method that does this so let's create one now so under the the public static void main we're going to type another method down here make sure that it's inside of the same class and of course inside of the same namespace so just under here we're going to type public just use the same syntax as you see up here static void and this for now is what we are going to type in front of every function then you're going to type in the name and we're going to maybe type in greed user and then what you want to do and you want to have this for any method of any kind you want to have an open and close parenthesis and you notice that in here we have what is called an argument we are not going to have that yet we're going to look at that later and then we're going to open and close some brackets I'm just going to bump this down here to make it more readable and then in here we can write some code for example we could say console dot write line and we're going to type in hello world like this and then what we do up here is we can call this method so this is basically how we define a method and this is a method definition and this up here is going to be a method call so we're going to type in greed user we're going to put in the parentheses and we're going to end with a semicolon you might see that this looks very familiar to console that read key but we do exactly the same the reason why is that concert that rekey as with pretty much anything we've been doing until now is a method the same is console.writeline that has an argument and and so on so the programming is really just calling and defining a bunch of methods in order to do different stuff so now when we run this program it's going to start out in our entry function which is the main function it's going to call the greed user function so it's going to go down here and it's going to write out hello world then when it's done with that it's going to go back here and it's going to print out console or it's going to wait for an input so let's try it and hit play you can see it opens up a console window hello world is printed and when we type something it closes so that's a the most basic use form for a a a method much cool about this is that we can have different methods we can have them call each other let's say we could maybe call another method here that would maybe do and let's say if we wanted to after greeting the user we could maybe say wait for user input then we can have that as a function or we could have it up here wait for some user input then we could maybe process input and then we could maybe print output so and this is what many simple programs look like it's just on these different groupings of functionality into functions that we then call in a specific order so the cool thing about this is that it's not only used used to group together functionality it's also used pretty much as a utility of some sort I like to think of methods as a machine where are you tell the Machine that it needs to do something and then it does so but the machine can get more advanced you can also give the Machine some kind of input and then it does something with that input and if the machine is really awesome it will also give you an output back so let's have a look at the first instance here where we just say that the machine should do something and it does that's what we have here the second instance is where we give some the Machine some input that it then does something with let's try writing one of those methods so I'm going to delete this here and delete this here so again we start with public static void we call this maybe add let's say we want to add to two numbers together and then print out the result so we open and close the parenthesis and we put we open and close some brackets here and in here we can then add together some numbers but let's say up here in the main function we know which numbers we should add when well then we need to some way of calling the method but also giving it some numbers that it should add together this is where arguments come in so arguments or parameters if you will a way of path passing input into a method from the place that it's called so if we say that we want to add together two integers we can type in here in CH int num1 this looks very much like available take declaration and really it is comma two another one int num2 now we know that this method wants to have passed in two numbers say we were separated by a comma so up here we can now write maybe four and eight and you can see that it wants here an input of first number one and then number two and both of type integer so this is the way that we pass input to the function and then inside of the method itself we can then do num1 plus num2 and we can maybe just print this out so we can do console dot bright line num1 plus num2 let's try this out so hit play you can see it writes out the number 12 and we can of course give it any two numbers that we would like up here ten and eight that's going to write out 18 and so on what you can also do is have multiple different methods with the same name but with different different arguments so let's say that we have another method called add that doesn't take in just two arguments but takes in a third one to numb three here and we're going to add numb three down here two and then up here we can first add together ten and eight and then we can maybe also add together ten eight and um and we can see that it just automatically knows that this should call the method here and this should call the method down here let's try this out again the play and it it shows the numbers 18 and 20 hmm great great so that was the second instance if we want to give our method some kind of input I'm just going to delete the second method there and the method here but I'm going to keep the add method because let's say that we don't want to just print out the numbers but we want to use the result of the calculation up here so we can use it for all different kind of stuff maybe checking if it's larger than some value maybe printing it out maybe using it for a further calculation just as part of some calculation then we can do all kinds of stuff up here if we have some way of retrieving the result from the method so in order to do this instead of writing out the result here we use what is called a return type and the way you do this is instead of writing public static void we write something else right here because what void actually means is return nothing that's what we type when we don't want the method to go back and insert anything here when we just wanted to do something here with the input that it's given but if we wanted to give something back we can type that we right here the type that we want to give back in this case we want to give back an integer number so we write int here then what we can do is instead of writing console.writeline and then adding the numbers together we simply write return followed by what we want to return so we write num1 plus num2 so now what this method does is it when it is called it's going to take in two numbers it's gonna them together and it's going to give back the result that's going to return an integer value that we can get then use up here so what we do up here in order to use this value and right now we are simply going to write out the result so we're going to say console dot write line and then in here we can use this basically as any other variable we can simply go like this or maybe we could store it in a variable here called result so we're going to type int result equals add like this so now we can simply say that different variables should equal the result of this calculation because we are returning a number and then in here we could write out the result so this makes our code much more flexible it makes the method here much more reusable and it just looks very cool so now when we hit play you can see that as before it writes out the number 18 but now we're able to do much more with this for example we could check if result is greater than 10 then we want to console dot readline result is larger than 10 and if it's not else console dot readline result is smaller than or equal to whoops 210 so and by the way this is just shorthand notation I'm just leaving out the brackets here I'm just going to put them in to make it a bit easier for you to follow I'm just way to use to not not typing them when you only need one single line of code you can just leave them out but it is generally better practice to to get them in there because sometimes you just want to add something to them there and then then you're going to put them in anyway so like this so now you can see that when we are getting the value back like this we can do different stuff with it such as checking the result which is what we're doing here so if we if we play now we should see that the result is larger than 10 and indeed we do and if we maybe type in our 1 and 8 it's going to say the result is smaller than or equal to 10 so that was this introduction to methods with this you're going to be able to write the majority of methods yet you're going to write in your programming career if you understand return types already that's really great a lot of people have a hard time understanding exactly what that does if you don't well then you were probably part of the majority and for now you can just type after me but it's good to just know that it exists and that don't worry you will master it I sure was very confused about this when I started so great thank you for watching the whole way through this video I hope you've learned something and I'll see you in the next video
