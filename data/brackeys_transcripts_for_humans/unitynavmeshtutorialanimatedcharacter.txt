With timestamps:

00:00 - in the previous video we learned how to
00:01 - make our navmesh change at runtime in
00:03 - this video we'll learn how to use links
00:05 - to connect together multiple navmesh
00:07 - surfaces
00:08 - we'll also finish things off by
00:09 - implementing an animated character to
00:12 - replace our cylinder also this video is
00:14 - sponsored by unity so let's jump right
00:16 - into it so as you can see here I have a
00:18 - simple scene with two ground
00:20 - elements both of these are just simple
00:23 - cube x' and I've gone ahead and named
00:25 - one ground one and the other one ground
00:27 - two and if I go to my nav mesh here I
00:30 - can hit bake and you can see that both
00:32 - surfaces are walkable to our agent but
00:35 - there's of course a gap between them so
00:38 - if we were to select our player now we
00:40 - can see that we have the nav mesh agent
00:42 - and I've gone ahead and added to play a
00:43 - controller that we created in the last
00:45 - video and if we play we can move around
00:48 - one of the ground planes but there's no
00:50 - way for us to go to the other one to
00:53 - change this we can use a nav mesh link
00:55 - to connect them together we'll go to our
00:57 - hierarchy right click and hit create
00:59 - empty we'll reset the transform and
01:02 - let's rename it to link let's also add a
01:06 - new component and we want to add a nav
01:08 - mesh link and if we now assume in we can
01:10 - see this illustration of two arrows
01:13 - connecting two points we can of course
01:15 - control where we want these points to be
01:18 - I'm just gonna take the entire object
01:19 - and hold down control while rotating to
01:22 - make it span from one surface to the
01:25 - other I'm also going to go ahead and
01:26 - move it up so that these rings here are
01:29 - placed right on top of the surface and
01:31 - this is pretty crazy but that's pretty
01:33 - much all we need to do if we now go into
01:35 - our game and hit play we can now click
01:38 - on the opposing surface and our nav mesh
01:41 - will use this link to transition from
01:43 - one to the other you will notice that if
01:45 - we click over here our agent has to go
01:47 - through the link in order to reach that
01:49 - position if you look closely you can see
01:52 - that the agent speeds up when using the
01:54 - link this is the agent exhibiting jump
01:56 - like behavior when creating a nav mesh
01:59 - link we aren't creating a surface
02:01 - instead think of it more like a
02:03 - teleporter where when we meet the start
02:05 - of the link it will simply quickly move
02:07 - the agent to the other side of the link
02:10 - there also some different properties
02:12 - that we can modify on
02:13 - michl Inc most importantly we have the
02:16 - width this allows us to make our link
02:18 - wider so that our player can use it over
02:20 - a greater area if for example we wanted
02:22 - to make pretty much this entire gap into
02:25 - a link we would just increase the width
02:27 - in order to do that and if I now hit
02:29 - play and tell a player to move you can
02:31 - see that he just uses the shortest path
02:33 - there we can also choose whether or not
02:35 - we want the link to be bi-directional if
02:37 - we disable this our player will only be
02:39 - able to use the link one way in our case
02:42 - we'll be able to walk across here but we
02:45 - won't be able to transition back and
02:47 - then as with the other nav mesh
02:49 - components we can also choose a area
02:51 - type for this link but right now we're
02:53 - just using a link to connect between two
02:55 - parts of the same nav mesh we can
02:57 - actually use things to connect between
02:59 - multiple nav mesh surfaces an instance
03:01 - of where this is particularly useful is
03:04 - if you are loading in your level in
03:05 - chunks and you want each part of your
03:08 - level to have a separate nav mesh well
03:10 - then every time you load in a new part
03:12 - of your level you can simply connect it
03:13 - together with the old one using links
03:16 - and everything should work just fine so
03:18 - if we go ahead and select our nav mesh
03:20 - here we can actually duplicate it I'm
03:23 - gonna name the first one nav mesh one
03:24 - and the second one I'm going to drag to
03:27 - the top and named nav mesh two and then
03:29 - gonna select my first ground here and
03:32 - add it to a layer this one is going to
03:34 - be ground one and I'm also going to add
03:36 - another layer which is ground two then
03:39 - if we go to our ground one we need to
03:41 - assign ground one here and for ground
03:43 - two will assign ground two if we then
03:46 - select our first nav mesh we can make
03:48 - sure to not include ground - and we'll
03:51 - hit bake so now this only includes the
03:53 - first ground and for our second nav mesh
03:55 - we can make sure to not include ground
03:58 - one and hit big on this as well and now
04:00 - this only includes our second ground so
04:03 - if I disable one of these we can see
04:05 - that they are now on two different nav
04:07 - mesh surfaces and if we hit play you'll
04:10 - see that our link still works just fine
04:13 - between them so that just opens up a
04:15 - whole another world of possibilities and
04:17 - now that we have a great amount of
04:19 - control over our nav mesh it's time to
04:21 - replace this boring looking character
04:23 - with a coal animated one to do that I'm
04:26 - going to open up example 5
04:27 - here in here I just have a simple level
04:30 - I'm gonna select my navmesh and hit bake
04:32 - and on this level I have the
04:34 - player-character with pretty much all
04:36 - the same settings as before as well as
04:38 - the player controller and we of course
04:40 - want to get rid of this boring cylinder
04:42 - to do that we'll go to the top here and
04:44 - we'll right-click and remove the mesh
04:47 - renderer we'll also remove the capsule
04:49 - Collider as well as the mesh filter so
04:52 - now our player is pretty much invisible
04:53 - instead we want to add in a character
04:56 - called Loman as always if you want to
04:58 - get these example scenes as well as the
05:00 - character that we're going to be using
05:01 - visit the link in the description so if
05:03 - we go under example 5 Loman there's a
05:06 - folder here called Loman in here we have
05:09 - some different folders for our character
05:10 - we're gonna go under models and we're
05:12 - gonna select lilo body now if we select
05:15 - it we can see our simple low poly
05:18 - character try this to our player we'll
05:20 - simply drag it under all player object
05:22 - and right away we're gonna see it in our
05:25 - scene we won't be applying any animation
05:27 - just yet so I'm gonna right click on the
05:28 - animator and remove it and now if we go
05:31 - into our scene view and hit F to focus
05:33 - on him we can make sure to position all
05:35 - player correctly I'm just gonna reset
05:37 - the transform so that he's completely
05:39 - centered on our object and then gonna go
05:41 - under all player and I'm gonna go to our
05:44 - nav mesh agent and remove the base
05:46 - offset so I'm gonna set that to zero and
05:48 - that should snap our Collider right in
05:50 - place and then we can go ahead and place
05:52 - him on the ground here I also want to
05:54 - make our graphics a tiny bit bigger so
05:56 - I'm gonna select little body change to
05:58 - the scaling tool by hitting R and just
06:01 - kill him up a tad I'm also going to go
06:03 - and do the materials and assign the low
06:05 - body material to him so now if we go and
06:08 - he'll play we will be able to move him
06:11 - around our scene just as before but of
06:14 - course it's very boring when he doesn't
06:16 - have any animation applied so how do we
06:19 - go about this well so far we've been
06:21 - using some simple graphics to illustrate
06:23 - our player and whenever we've moved the
06:26 - player in a given direction we haven't
06:28 - been changing those graphics at all and
06:30 - that's just fine when using a simple
06:33 - shape but now that we're using a
06:35 - character we want him to animate as he
06:38 - moves forward and more importantly with
06:40 - one
06:40 - this animation to line up with the way
06:43 - that he's moving in order for this sort
06:45 - of animation to the natural we wanted to
06:47 - look like the characters feet are the
06:50 - one that is driving forward the motion
06:52 - in other words we have to always make
06:54 - sure to synch up our animation with the
06:57 - actual movement in most cases there are
06:59 - two ways to go about this the first one
07:01 - is moving the character using the nav
07:04 - mesh agent this is not far from what
07:06 - we've been doing so far we have our nav
07:08 - mesh agent it wants to go in a certain
07:10 - direction and so it goes ahead and moves
07:12 - in that direction then for any given
07:14 - point we could simply overlay some
07:16 - animation on top of this movement and
07:19 - then do our best to try and synchronize
07:21 - the animation to the movement the way
07:23 - that we'd probably do this is by asking
07:24 - for each point what the current speed of
07:27 - the agent is and then adjusting the
07:29 - animation speed and what animation to
07:32 - play depending on if the character is
07:33 - moving quickly in which case we want to
07:35 - run if he's moving slowly in which case
07:38 - we want to walk and if he's not moving
07:40 - at all in which case we just wanna go
07:42 - and play some kind of idle animation and
07:44 - this is fine for very simple animation
07:46 - but things quickly become more complex
07:48 - because our character is not only moving
07:50 - forward
07:51 - he's also turning to the sides and this
07:54 - should be shown in the animation and it
07:56 - also requires a lot of work to try and
07:58 - synchronize the two perfectly the second
08:00 - way to go about it is using animation to
08:03 - move forward our character here we have
08:05 - the agent running in the background so
08:08 - for any given point we are still running
08:10 - the nav mesh agent but instead of just
08:12 - having it move forward our character for
08:15 - each point we're asking where should we
08:17 - go and we then play an animation that
08:20 - moves us in that direction and so here
08:22 - the animation itself is what drives the
08:25 - player forward now this method also
08:27 - requires some tweaking and quite a bit
08:29 - of code but luckily unity recognizes
08:31 - this and have created a script that does
08:33 - exactly this the script I'm talking
08:36 - about is the third person character
08:38 - script it's part of the standard assets
08:40 - and I've also included it in the example
08:42 - scene if we go ahead and add this to our
08:44 - player it's going to add a bunch of
08:46 - different components but most of these
08:48 - we can pretty much leave as is as for
08:51 - the third person character script itself
08:53 - I found that the
08:54 - fault values for just fine so I'm just
08:56 - gonna collapse that the same thing goes
08:58 - for the rigidbody and as for the capsule
09:01 - Collider we just need to make sure to
09:03 - fit this to a character I'm gonna
09:04 - increase the height to two and move it
09:07 - up by one that's all we need to do here
09:09 - now we can go to a nav mesh agent and
09:11 - change the speed to one and we can
09:13 - pretty much leave all the other settings
09:14 - one thing that we do have to set up is
09:17 - our animator and this is because we need
09:20 - to specify what animation we want to use
09:22 - as well as how this animation should be
09:24 - applied to the bones first of all we
09:27 - need to apply an animator controller if
09:29 - we go under Lomond animation we can see
09:32 - the humanoid controller right here
09:33 - we'll go and drag that in and as for the
09:36 - Avatar we want to be using the Loman
09:38 - avatar so we'll go under little body
09:40 - select the little body avatar and drag
09:43 - that in as well and now a player is
09:45 - actually set up to use animation if we
09:48 - select him and open up our animated
09:51 - window we can see how all the different
09:53 - animations correspond to each other we
09:55 - have a bunch of different animations in
09:57 - here like a death animation you win
09:59 - animation and animation when airborne
10:01 - and when crouching and under the
10:03 - locomotion we have a bunch of different
10:06 - animations for movement in the left hand
10:08 - corner we have some different parameters
10:10 - and the cool thing is that our third
10:13 - person character script will go ahead
10:15 - and adjust all these animations
10:17 - accordingly depending on the situation
10:19 - so pretty much all we need to do is
10:22 - start using our third person character
10:24 - script to do that we'll open up our
10:26 - player controller and here we want to
10:28 - add a tiny bit of code the first thing
10:31 - that we want is a reference to a third
10:32 - person character and whenever we're
10:34 - using something from the standard assets
10:37 - we need to go to the top and say using
10:39 - unity standard assets and in our case we
10:43 - want to go under your characters and use
10:45 - the third person character so now we can
10:47 - create a new variable a public third
10:50 - person character and we'll just call it
10:52 - character then we also want to create a
10:55 - start method so we'll go void start and
10:58 - in here we simply want to tell our agent
11:01 - not to update its rotation this is
11:04 - because our rotation is handled by the
11:06 - character so we go agent
11:08 - daaad update rotation equals false and
11:12 - now we're pretty much set up now we
11:14 - simply need to move our character
11:16 - through the third person character
11:18 - script to do this we'll go to the bottom
11:20 - of our update method and to move our
11:22 - character will use character dot move
11:25 - and this takes in a vector three that
11:28 - defines where we want to move and
11:30 - whether or not we want to crouch or jump
11:32 - and as we talked about where we want to
11:35 - move is determined by our agent and here
11:37 - we can use a super handy parameter under
11:40 - our agent called desired velocity as the
11:42 - name suggests the side velocity is where
11:45 - our agent would like to move at this
11:47 - given point so we'll input agent dot
11:50 - desired velocity and then we'll write
11:52 - false because we don't want to crouch
11:54 - and false because we don't want to jump
11:57 - now of course there's no reason for us
11:58 - to move if we've already reached the end
12:01 - of our path so we're gonna put an if
12:03 - statement here saying if agent dot
12:05 - remaining distance and as we can see
12:08 - here the remaining distance is the
12:10 - distance between the agent's position
12:12 - and the destination on the current path
12:14 - so in the case that our remaining
12:16 - distance is greater than agent dot
12:19 - stopping distance and we set this to
12:22 - point two inside of the inspector well
12:24 - then we still want to move so in that
12:27 - case we still want to call characters
12:29 - move and if not meaning that our agent
12:33 - has reached its final destination along
12:35 - the path well then we want to stop our
12:38 - character from moving and this is maybe
12:40 - a tiny bit counterintuitive but in order
12:42 - to stop our character we actually do
12:44 - have to call move but instead of giving
12:46 - it an actual movement we simply feed it
12:49 - vector 3.0 and so we say stop moving and
12:53 - again we want to input false and false
12:55 - and that's pretty much all we need to do
12:58 - in the case that we still want to move
13:00 - and haven't reached our destination
13:01 - we'll go ahead and move according to the
13:05 - desired velocity of our agent and if we
13:07 - then reach our destination we'll go
13:09 - ahead and stop moving it's actually that
13:12 - simple if we then save and go into unity
13:15 - we now have an empty field for a third
13:17 - person character we'll go ahead and drag
13:19 - that right in and now when we hit
13:22 - a we should see that right away our
13:24 - character transitions to an idle
13:26 - animation and if we start moving our
13:29 - character will realistically animate to
13:32 - the desired position
13:33 - notice how when the character is not
13:35 - moving very quickly he's only using a
13:38 - walk animation if he's moving more
13:40 - quickly he transitions to a run and
13:42 - whenever he's running around corners he
13:45 - will go ahead and tilt his body to show
13:47 - this we can also take our animator and
13:50 - move it to the right here and this will
13:53 - actually allow us to see what animations
13:55 - are currently playing so we can see how
13:58 - we're transitioning our turn and forward
14:01 - motion in order to play the correct
14:03 - animation so from here it's just up to
14:05 - you to have fun and get creative that's
14:08 - pretty much it for this video and this
14:10 - navmesh series if you want to learn more
14:11 - about navmesh or if you have any
14:13 - questions I suggest you check out the
14:14 - documentation that will of course be a
14:16 - link for that in the description now we
14:18 - have plenty of more unity videos coming
14:20 - so make sure to subscribe to get
14:21 - notified once they out on that thanks
14:23 - for watching and I will see you in the
14:25 - next video thanks of the awesome patreon
14:28 - supporters who donated in February and
14:30 - especially thanks to encode We Trust
14:32 - Patrick McKinley Diego Frank
14:34 - Tristan town dying guy and Buffy o
14:36 - infinity PBR yo Rio myrrh and soft tune
14:38 - sighs mommy Turkey's Kirk fatal Murphy
14:41 - beard I double tap 45 James P J delay
14:44 - Superman the great giant burger guard
14:46 - Dennis Sullivan
14:47 - Jason Latino Alex wicked ski beyond
14:49 - Farooq knob sweet lean smile enough Jin
14:51 - Sasha hafsteinn Sunni Arabs and Gregory
14:53 - Pierce James Rogers Robert Boone Derman
14:56 - Rob fan and Erasmus you guys Rock

Cleaned transcript:

in the previous video we learned how to make our navmesh change at runtime in this video we'll learn how to use links to connect together multiple navmesh surfaces we'll also finish things off by implementing an animated character to replace our cylinder also this video is sponsored by unity so let's jump right into it so as you can see here I have a simple scene with two ground elements both of these are just simple cube x' and I've gone ahead and named one ground one and the other one ground two and if I go to my nav mesh here I can hit bake and you can see that both surfaces are walkable to our agent but there's of course a gap between them so if we were to select our player now we can see that we have the nav mesh agent and I've gone ahead and added to play a controller that we created in the last video and if we play we can move around one of the ground planes but there's no way for us to go to the other one to change this we can use a nav mesh link to connect them together we'll go to our hierarchy right click and hit create empty we'll reset the transform and let's rename it to link let's also add a new component and we want to add a nav mesh link and if we now assume in we can see this illustration of two arrows connecting two points we can of course control where we want these points to be I'm just gonna take the entire object and hold down control while rotating to make it span from one surface to the other I'm also going to go ahead and move it up so that these rings here are placed right on top of the surface and this is pretty crazy but that's pretty much all we need to do if we now go into our game and hit play we can now click on the opposing surface and our nav mesh will use this link to transition from one to the other you will notice that if we click over here our agent has to go through the link in order to reach that position if you look closely you can see that the agent speeds up when using the link this is the agent exhibiting jump like behavior when creating a nav mesh link we aren't creating a surface instead think of it more like a teleporter where when we meet the start of the link it will simply quickly move the agent to the other side of the link there also some different properties that we can modify on michl Inc most importantly we have the width this allows us to make our link wider so that our player can use it over a greater area if for example we wanted to make pretty much this entire gap into a link we would just increase the width in order to do that and if I now hit play and tell a player to move you can see that he just uses the shortest path there we can also choose whether or not we want the link to be bidirectional if we disable this our player will only be able to use the link one way in our case we'll be able to walk across here but we won't be able to transition back and then as with the other nav mesh components we can also choose a area type for this link but right now we're just using a link to connect between two parts of the same nav mesh we can actually use things to connect between multiple nav mesh surfaces an instance of where this is particularly useful is if you are loading in your level in chunks and you want each part of your level to have a separate nav mesh well then every time you load in a new part of your level you can simply connect it together with the old one using links and everything should work just fine so if we go ahead and select our nav mesh here we can actually duplicate it I'm gonna name the first one nav mesh one and the second one I'm going to drag to the top and named nav mesh two and then gonna select my first ground here and add it to a layer this one is going to be ground one and I'm also going to add another layer which is ground two then if we go to our ground one we need to assign ground one here and for ground two will assign ground two if we then select our first nav mesh we can make sure to not include ground and we'll hit bake so now this only includes the first ground and for our second nav mesh we can make sure to not include ground one and hit big on this as well and now this only includes our second ground so if I disable one of these we can see that they are now on two different nav mesh surfaces and if we hit play you'll see that our link still works just fine between them so that just opens up a whole another world of possibilities and now that we have a great amount of control over our nav mesh it's time to replace this boring looking character with a coal animated one to do that I'm going to open up example 5 here in here I just have a simple level I'm gonna select my navmesh and hit bake and on this level I have the playercharacter with pretty much all the same settings as before as well as the player controller and we of course want to get rid of this boring cylinder to do that we'll go to the top here and we'll rightclick and remove the mesh renderer we'll also remove the capsule Collider as well as the mesh filter so now our player is pretty much invisible instead we want to add in a character called Loman as always if you want to get these example scenes as well as the character that we're going to be using visit the link in the description so if we go under example 5 Loman there's a folder here called Loman in here we have some different folders for our character we're gonna go under models and we're gonna select lilo body now if we select it we can see our simple low poly character try this to our player we'll simply drag it under all player object and right away we're gonna see it in our scene we won't be applying any animation just yet so I'm gonna right click on the animator and remove it and now if we go into our scene view and hit F to focus on him we can make sure to position all player correctly I'm just gonna reset the transform so that he's completely centered on our object and then gonna go under all player and I'm gonna go to our nav mesh agent and remove the base offset so I'm gonna set that to zero and that should snap our Collider right in place and then we can go ahead and place him on the ground here I also want to make our graphics a tiny bit bigger so I'm gonna select little body change to the scaling tool by hitting R and just kill him up a tad I'm also going to go and do the materials and assign the low body material to him so now if we go and he'll play we will be able to move him around our scene just as before but of course it's very boring when he doesn't have any animation applied so how do we go about this well so far we've been using some simple graphics to illustrate our player and whenever we've moved the player in a given direction we haven't been changing those graphics at all and that's just fine when using a simple shape but now that we're using a character we want him to animate as he moves forward and more importantly with one this animation to line up with the way that he's moving in order for this sort of animation to the natural we wanted to look like the characters feet are the one that is driving forward the motion in other words we have to always make sure to synch up our animation with the actual movement in most cases there are two ways to go about this the first one is moving the character using the nav mesh agent this is not far from what we've been doing so far we have our nav mesh agent it wants to go in a certain direction and so it goes ahead and moves in that direction then for any given point we could simply overlay some animation on top of this movement and then do our best to try and synchronize the animation to the movement the way that we'd probably do this is by asking for each point what the current speed of the agent is and then adjusting the animation speed and what animation to play depending on if the character is moving quickly in which case we want to run if he's moving slowly in which case we want to walk and if he's not moving at all in which case we just wanna go and play some kind of idle animation and this is fine for very simple animation but things quickly become more complex because our character is not only moving forward he's also turning to the sides and this should be shown in the animation and it also requires a lot of work to try and synchronize the two perfectly the second way to go about it is using animation to move forward our character here we have the agent running in the background so for any given point we are still running the nav mesh agent but instead of just having it move forward our character for each point we're asking where should we go and we then play an animation that moves us in that direction and so here the animation itself is what drives the player forward now this method also requires some tweaking and quite a bit of code but luckily unity recognizes this and have created a script that does exactly this the script I'm talking about is the third person character script it's part of the standard assets and I've also included it in the example scene if we go ahead and add this to our player it's going to add a bunch of different components but most of these we can pretty much leave as is as for the third person character script itself I found that the fault values for just fine so I'm just gonna collapse that the same thing goes for the rigidbody and as for the capsule Collider we just need to make sure to fit this to a character I'm gonna increase the height to two and move it up by one that's all we need to do here now we can go to a nav mesh agent and change the speed to one and we can pretty much leave all the other settings one thing that we do have to set up is our animator and this is because we need to specify what animation we want to use as well as how this animation should be applied to the bones first of all we need to apply an animator controller if we go under Lomond animation we can see the humanoid controller right here we'll go and drag that in and as for the Avatar we want to be using the Loman avatar so we'll go under little body select the little body avatar and drag that in as well and now a player is actually set up to use animation if we select him and open up our animated window we can see how all the different animations correspond to each other we have a bunch of different animations in here like a death animation you win animation and animation when airborne and when crouching and under the locomotion we have a bunch of different animations for movement in the left hand corner we have some different parameters and the cool thing is that our third person character script will go ahead and adjust all these animations accordingly depending on the situation so pretty much all we need to do is start using our third person character script to do that we'll open up our player controller and here we want to add a tiny bit of code the first thing that we want is a reference to a third person character and whenever we're using something from the standard assets we need to go to the top and say using unity standard assets and in our case we want to go under your characters and use the third person character so now we can create a new variable a public third person character and we'll just call it character then we also want to create a start method so we'll go void start and in here we simply want to tell our agent not to update its rotation this is because our rotation is handled by the character so we go agent daaad update rotation equals false and now we're pretty much set up now we simply need to move our character through the third person character script to do this we'll go to the bottom of our update method and to move our character will use character dot move and this takes in a vector three that defines where we want to move and whether or not we want to crouch or jump and as we talked about where we want to move is determined by our agent and here we can use a super handy parameter under our agent called desired velocity as the name suggests the side velocity is where our agent would like to move at this given point so we'll input agent dot desired velocity and then we'll write false because we don't want to crouch and false because we don't want to jump now of course there's no reason for us to move if we've already reached the end of our path so we're gonna put an if statement here saying if agent dot remaining distance and as we can see here the remaining distance is the distance between the agent's position and the destination on the current path so in the case that our remaining distance is greater than agent dot stopping distance and we set this to point two inside of the inspector well then we still want to move so in that case we still want to call characters move and if not meaning that our agent has reached its final destination along the path well then we want to stop our character from moving and this is maybe a tiny bit counterintuitive but in order to stop our character we actually do have to call move but instead of giving it an actual movement we simply feed it vector 3.0 and so we say stop moving and again we want to input false and false and that's pretty much all we need to do in the case that we still want to move and haven't reached our destination we'll go ahead and move according to the desired velocity of our agent and if we then reach our destination we'll go ahead and stop moving it's actually that simple if we then save and go into unity we now have an empty field for a third person character we'll go ahead and drag that right in and now when we hit a we should see that right away our character transitions to an idle animation and if we start moving our character will realistically animate to the desired position notice how when the character is not moving very quickly he's only using a walk animation if he's moving more quickly he transitions to a run and whenever he's running around corners he will go ahead and tilt his body to show this we can also take our animator and move it to the right here and this will actually allow us to see what animations are currently playing so we can see how we're transitioning our turn and forward motion in order to play the correct animation so from here it's just up to you to have fun and get creative that's pretty much it for this video and this navmesh series if you want to learn more about navmesh or if you have any questions I suggest you check out the documentation that will of course be a link for that in the description now we have plenty of more unity videos coming so make sure to subscribe to get notified once they out on that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in February and especially thanks to encode We Trust Patrick McKinley Diego Frank Tristan town dying guy and Buffy o infinity PBR yo Rio myrrh and soft tune sighs mommy Turkey's Kirk fatal Murphy beard I double tap 45 James P J delay Superman the great giant burger guard Dennis Sullivan Jason Latino Alex wicked ski beyond Farooq knob sweet lean smile enough Jin Sasha hafsteinn Sunni Arabs and Gregory Pierce James Rogers Robert Boone Derman Rob fan and Erasmus you guys Rock
