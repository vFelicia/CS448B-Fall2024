With timestamps:

00:00 - hello everyone welcome to this video on
00:01 - creating a line write a replica this is
00:03 - a live stream recording so if something
00:06 - messes up well that's not much I can do
00:09 - about it so this is what we're going to
00:11 - be doing today we're going to be making
00:12 - this game here where if we hit play we
00:16 - can draw out a level using our mouse and
00:19 - we can draw as many lines as we want and
00:22 - then we can hit enter or space and the
00:25 - player will play through it and you can
00:28 - see that I've even added some forces to
00:30 - these lines that's totally optional you
00:32 - can pretty much do anything you want
00:34 - with it and it's just something that's
00:36 - really really fun to play around with we
00:38 - can even make lines while the game is so
00:40 - say I'm playing so yeah really really
00:44 - fun thing and let's just jump right into
00:46 - it so let's start by creating a new
00:49 - project let's go to file new project and
00:52 - that's called is something like line Rin
00:55 - writer replica there we go and let's
01:01 - check out 2d and now I'm just going to
01:02 - put it in my projects folder go ahead
01:05 - and hit create project and unity is
01:06 - going to create all the necessary meta
01:08 - files in the background here while we
01:10 - wait and I'm just going to see if
01:12 - everything's working ah looks like it
01:16 - could you get start could could I get it
01:19 - stuck in a circle yeah definitely could
01:21 - there's many ways to mess this up that's
01:23 - how it is when you create a sandbox game
01:25 - and let's start by taking our main
01:27 - camera here and just changing the
01:29 - background color to a complete white as
01:31 - in the original and I'm also going to
01:33 - change the size of our orthographic
01:36 - camera here to eight just assume things
01:39 - out a little bit and yeah let's actually
01:43 - begin by just bringing our player into
01:46 - the scene so that's I have this player
01:48 - graphic here it's a PSD file again this
01:51 - will be on github when I upload the
01:52 - entire project after we're done um at
01:55 - least before or at least sometime
01:57 - tomorrow depends on when we are when we
02:00 - get done here but you can pretty much
02:03 - use anything you like you can even use
02:04 - the default sprites that come with the
02:07 - movie so let's just drag this into the
02:08 - project panel and I'm just going to go
02:10 - ahead and change the pixels per unit
02:12 - here to something
02:13 - 800 and change the mag size to something
02:16 - like 128 I think is going to be pretty
02:19 - good just so when we drag it in here
02:21 - it's not going to fit the entire screen
02:23 - let's also maybe take this guy and drag
02:26 - it up a bit just to place them in the
02:28 - corner of the left corner so that we
02:30 - have some space to work with and that's
02:32 - also a thing that you should really go
02:33 - ahead and create if you serious about
02:35 - making this game is some way to move
02:38 - around the camera so you can create
02:39 - levels that are bigger than what you can
02:42 - fit on a single screen and then when you
02:44 - play have the camera somehow follow the
02:46 - player but we can talk about ways of
02:48 - doing that later now let's get the basic
02:52 - things in place and that is of course a
02:54 - rigidbody let's add a rigidbody 2d and I
02:57 - don't think we really need to change
02:59 - anything here you might want to bump up
03:01 - the gravity scale and that kind of makes
03:04 - the game feel like it plays a lot faster
03:06 - because I'll put player Falls faster and
03:09 - so he the forces or he rides down slopes
03:13 - faster but I'm just going to leave it at
03:15 - 1 and I'm going to change the body type
03:18 - to static so that when we play he's not
03:21 - going to fall anywhere he's just going
03:23 - to sit there for now I'm also going to
03:25 - focus on him by hitting F in the scene
03:27 - view and add another component and this
03:30 - one is going to be our capsule Collider
03:33 - 2d this is also a fairly new nice
03:36 - addition to the 2d system the capsule
03:38 - Collider and I'm just going to go ahead
03:41 - and change this to horizontal and I
03:44 - think the axe x value is fine somewhere
03:47 - around here somewhere around 1 and I'm
03:51 - just going to bump down the Y a bit and
03:52 - I'm also going to kind of shift it down
03:55 - just to place it where his um let's see
04:02 - here
04:02 - just a place to kind of at the bottom
04:05 - here we don't want it to be affecting
04:07 - the stickman just the vehicle cool so
04:13 - now that we have him there and he has
04:18 - physics and everything we can go ahead
04:19 - and create something for him to ride on
04:22 - and um
04:24 - yeah people are asking what this is it
04:27 - is a guy on a sled
04:28 - I'm really sorry that it looks so bad I
04:31 - tried to create something that was kind
04:34 - of like the original but still I didn't
04:36 - want to be cover right slap so yeah this
04:39 - was all I could come up with pretty
04:42 - embarrassing all right so let's go ahead
04:47 - and do some scripting so the first thing
04:49 - that we need is some weight for us to
04:52 - create a line and change the points in
04:55 - that line and to do that let's go ahead
04:58 - and create an empty game object let's
05:00 - reset the transform and call this one
05:02 - line let's also add a component called
05:06 - the line renderer and we'll also add a
05:09 - edge Collider so this is responsible for
05:13 - graphics this is responsible for physics
05:16 - collisions then we can take our line
05:18 - renderer here and we can open the
05:20 - positions array and this defaults to
05:22 - positions 1 at 0 0 0 and 1 at 0 0 1 and
05:27 - because 1 is in the depth we can
05:29 - actually see the line so let's change
05:31 - that to zero and instead have it go like
05:33 - 1 5 d X and now we can see a
05:36 - ridiculously large line that is also
05:39 - purple so let's go ahead and bump down
05:41 - the width here to change the size of it
05:44 - and I'm just going to say to something
05:46 - like point zero eight and let's also add
05:50 - some other color and we could do that by
05:53 - first adding a material some people just
05:55 - go down here and try and change the
05:57 - color that's not going to work because
05:59 - we need a material to actually use that
06:01 - color to display to display the object
06:04 - on screen so let's go down here and
06:06 - right click or create and then materials
06:08 - and we can call this something like line
06:10 - Matt no need to complicate it further
06:13 - than that let's also select the line and
06:15 - drag the line Matt into the material
06:18 - slot now of course online matt is
06:21 - currently a standard shader I think it's
06:23 - a lot better if we change this to
06:24 - something like a sprite default and this
06:28 - will allow us to change the color
06:29 - through the color mode here so or
06:32 - through the gradient editor and that's
06:34 - all that also means that we could have
06:36 - the first part of it be black and then
06:38 - have it
06:38 - fade out but I'm just going to make the
06:40 - entire line black one thing that could
06:43 - be pretty cool to experiment with is
06:45 - having kind of the edges of it fade out
06:49 - and we could do that by having a very
06:51 - very narrow fade out here at the end I'm
06:54 - just going to fade it to white here so
06:56 - have this be black and then this be
07:00 - black as well and this then the sinks on
07:03 - the final part here be white but you can
07:05 - see the problem with this occurring and
07:07 - that is we can't have a fade out between
07:10 - on the two points so yeah it doesn't
07:15 - look too good I experimented with that
07:16 - but wasn't you happy with it so I'm just
07:19 - going to cut it off and we could also
07:20 - give it some corner vertices something
07:23 - like and actually we might need to have
07:28 - this be something like five here just to
07:30 - kind of smooth it in the end actually we
07:33 - might need to do more three five I think
07:37 - five could be pretty good but because
07:39 - it's so small and our line it has a very
07:42 - very low risk I don't think we're going
07:44 - to be yeah using this too much I'm just
07:46 - going to set both of them to five now
07:48 - and then we can always experiment with
07:49 - it later this will just smooth off the
07:52 - ends and round out the corners that's
07:54 - all we're doing inside it starting some
07:56 - actual extra vertices and this is going
07:59 - to cost you a little bit on performance
08:00 - so now that we have our line set up we
08:03 - need to control it through its script
08:05 - and we do that by adding a new component
08:07 - and we'll call it something like well we
08:10 - can just call the line let's double
08:12 - click this to open it up in visual
08:14 - studio and I'm just going to wait for
08:16 - wishes to do to load up here take a
08:20 - little sip of water and it's loading up
08:24 - on my secondary monitor so let me just
08:27 - drag it over cone so the first things
08:30 - that we're going to be needing um is
08:33 - references to of course the line
08:35 - renderer and the edge Collider so let's
08:37 - go ahead and create two public variables
08:39 - and so we can just drag them in in the
08:40 - inspector so we'll have the public line
08:43 - renderer and we'll call this something
08:45 - like fly and render um I will have the
08:48 - public edge Collider and
08:51 - it's an edge Collider 2d and we'll call
08:53 - that one edge cold or edge Collider if
08:56 - you will I'm just going to call it edge
08:58 - cold and um yes so now we can already go
09:01 - inside of unity if we save that and
09:03 - reference the two just to make sure that
09:05 - we don't forget there we go
09:07 - and next up we need on some kind of way
09:12 - to store the points so I would like to
09:16 - create either an array or much easier a
09:19 - list of all of the points that we're
09:21 - going to be using for a line and in
09:24 - order to use a list make sure to be
09:26 - using system dot collections dot generic
09:30 - this way we can go ahead and write lists
09:32 - here and we want the list of vector twos
09:35 - a list of two-dimensional points and
09:37 - we'll call this one point remember the
09:40 - difference between a list and an array
09:42 - is that an array is great for storing X
09:45 - amount of items but only if you don't
09:48 - need to change the size of it if you
09:50 - need to change the size of an array you
09:52 - actually need to create a whole new
09:54 - array and set it equal to that so it's
09:57 - not resizable but it is more performant
09:59 - however if you do need to resize your
10:02 - list use a generic list this allows you
10:06 - to add things at the end remove things
10:08 - add index points it's super awesome but
10:12 - it is less performant so it's always a
10:14 - decision you have to do do I need to
10:16 - resize or do or not and we do so we're
10:19 - using a list then we need some kind of
10:22 - public void and the reason why I'm
10:25 - making this public is because I want it
10:27 - to be accessed from the script that is
10:28 - going to be creating these lines and we
10:31 - are going to call it something like
10:32 - update line and this is a method we'll
10:35 - call in the update loop whenever we are
10:37 - actually still working on the line as
10:39 - soon as it's finished we're not going to
10:41 - be using this script at all and so this
10:44 - function is not going to be called but
10:46 - each frame that we are currently drawing
10:48 - on the line we're going to be calling
10:49 - this update line method and that means
10:51 - that it allows us to do different points
10:53 - it allows us to or different things it
10:56 - allows us to insert new points and also
10:58 - to set up the line if it hasn't already
11:00 - been set up for example we need to check
11:03 - if points
11:05 - the sequel to no because if it is we
11:07 - need to go ahead and make sure that
11:09 - points equals a new list of vector Q so
11:14 - this way we instantiate our list and now
11:16 - we can go ahead and add elements to it
11:18 - so we'll create some kind of set point
11:20 - or add point method and we'll add that
11:23 - in a second and then we can just return
11:25 - out of the function then down here under
11:29 - this in case we have already said about
11:32 - points array and and this is not our
11:34 - first point we can go ahead and check
11:38 - check if the mouse has moved enough for
11:43 - us to insert new point and if it has
11:51 - insert point at mouse position and we'll
11:57 - go ahead and do that in just a sec first
11:59 - off let's create our set point method so
12:01 - let's go void set point and of course
12:05 - whenever we are setting a point we need
12:07 - to insert the position of the point and
12:09 - we'll do that as a vector two so this is
12:11 - going to take in a vector two called
12:14 - points and we'll make sure to also feed
12:16 - this into the update line because we
12:19 - could of course just get our mouse
12:21 - position here do we want to do that I
12:25 - don't actually think we do kind of
12:30 - debating on that now I think we want to
12:32 - feed it into the function it's it's
12:33 - cleaner this way so we'll pass a vaca to
12:36 - point on into this function as well and
12:39 - we'll pass that on to the set point
12:40 - method so that means that when we're
12:43 - creating the line and updating it we are
12:45 - giving it almost position calling it
12:47 - point and we're feeding it into the set
12:49 - point method so that down here we can
12:50 - again use our mouse position referred to
12:53 - as point and um in here we can then go
12:57 - and access our points array so we can go
13:00 - points dots add add a new point and
13:03 - we're just going to be adding the point
13:05 - vector to that we feed into the function
13:08 - which is going to be a mouse position
13:09 - all the time and then down here we can
13:15 - say line renderer
13:18 - dot and we need to say something like
13:22 - point non positions
13:25 - that's the name equals point dot count
13:30 - so we're going to um or we currently
13:34 - keep track of the points locally we have
13:36 - an array or a list up here of points and
13:39 - we add points onto that list but we need
13:42 - to also apply that to the line renderer
13:44 - and the way that we do that is first of
13:46 - all set the number of positions on our
13:48 - line when you run the number of points
13:49 - equal to the length of our points list
13:52 - then we also need to go and add the new
13:55 - point to that list so we go line
13:57 - renderer third set position and the
14:00 - position that we want to set here is add
14:02 - the index which is at the bottom of the
14:06 - list so the point that we just added we
14:08 - want that index and we want to insert
14:10 - that point so in our case that's going
14:12 - to be points dot count minus one because
14:16 - remember if we have indexes that goes
14:19 - zero one two three let's imagine on that
14:22 - we have a links on a list length of
14:25 - three so we have 1 or 0 1 2 and so the
14:30 - last index is going to be 2 which is 3
14:33 - minus 1 yeah
14:35 - so that's why we take the length here or
14:37 - the count and subtract 1 and so we get
14:40 - the last index in the on list and we're
14:44 - also going to of course feed in now the
14:45 - points cool and this is a lot easier for
14:50 - the edge Collider actually for the edge
14:52 - Collider within the go edge call dot
14:54 - points and set it equal to points
14:58 - however that's one slight problem with
15:01 - this and that is edge collided up points
15:03 - is actually an array and it's kind of
15:07 - weird for me that it's an array when it
15:09 - needs to be resized at runtime I don't
15:11 - know why you need it shows to do do that
15:13 - I'm sure they had a good reason but we
15:15 - do therefore need to convert our points
15:18 - list here into an array before we could
15:20 - feed it in and the way we do that is by
15:23 - using points dot to array boom and we're
15:28 - done is that is it's just a single
15:29 - function call really really
15:32 - to do so now we should be setting points
15:35 - and we should be able to update our line
15:39 - but we still don't check or we currently
15:42 - only insert a single point and that is
15:44 - at the very beginning when we set up a
15:46 - line we still need to check if the mouse
15:50 - is moved enough for us to insert new
15:51 - points and if it has do it and that's
15:55 - what we're going to be doing now so in
15:57 - order to do that we need some way of
15:58 - checking the distance between the
16:00 - previously inserted point and the
16:02 - current point or the current mouse
16:05 - position and the way we do that is by
16:09 - using an if statement and we're going to
16:11 - check if and we're going to get the last
16:15 - point in the array or in the list and we
16:19 - do that by using points dot and this is
16:22 - very nice
16:23 - currently we don't have access to a
16:26 - function called last which simply just
16:29 - gets us the last point in the arm in the
16:33 - list so what we need to do is I actually
16:35 - go in here and access using points count
16:39 - minus 1 and we can totally do that
16:41 - that's legitimate and it should get us
16:43 - what we need the problem with this or I
16:48 - mean it's just not very clean instead we
16:50 - could go up here and say using system
16:53 - dot link and this simply allows us to
16:57 - convert this piece of messy code into
16:59 - points dot slash there we go and it gets
17:03 - us the same thing so that's a really
17:04 - nice thing to to use if you need to do
17:07 - this sort of calculation a lot and of
17:11 - course we need to check the distance
17:12 - between so we will say something like
17:14 - vector to distance between points last
17:18 - and the current point and if that is
17:22 - armed let me see if I grab the syntax
17:25 - right looks like it if that is greater
17:28 - than and then some value I'm just going
17:30 - to space my points out with about 0.1
17:33 - you can turn this into its load up here
17:35 - if you want it to be configurable in the
17:36 - inspector I'm just going to hard code it
17:38 - in here
17:39 - and if it is meaning if the distance
17:41 - between our last point and our current
17:43 - point is greater than 1 we'll go ahead
17:45 - and insert
17:46 - so we'll see say set point and feeding
17:49 - the point if not nothing is going to
17:52 - happen the point here that we're trying
17:54 - to update with it's just going to be
17:56 - ignored so really really cool we could
17:59 - also maybe rename this one to Mouse
18:01 - position I think that's a little clearer
18:04 - because currently it's not a point it's
18:06 - only a point when we insert it down here
18:08 - so here it's just our mouse position
18:10 - it's it's better this way it's cleaner
18:12 - and by the way the way that I did a
18:14 - quick renaming of all the variables at
18:16 - the same time this way you can control
18:18 - our are so hold down control and press R
18:22 - twice and this allows us to refracture
18:24 - the variable and you can see just how
18:26 - nice that is just hit enter when you're
18:28 - done
18:29 - cool so um I'll leave that's all we
18:34 - needed to add to the script one final
18:36 - thing and this is something that's also
18:38 - a bit weird with the edge Collider and
18:41 - that is we can't actually have an edge
18:43 - Collider with only one point it needs to
18:46 - have at least two points it makes sense
18:48 - because you cannot create a line from a
18:50 - single point but it will go into an
18:52 - error so what we'll do instead on that
18:54 - instead of just inserting it down here
18:57 - it will check if points dot count is
19:01 - greater than 1 and if it is we'll go
19:04 - ahead and do this so we need to make
19:06 - sure that we have at least two points
19:07 - before we try and create some kind of
19:10 - collision so let's say that and hit into
19:13 - unity and of course you know in part of
19:14 - this is that we can't actually see this
19:16 - in action because we need a script to
19:18 - control it so let's take a line and
19:20 - create a prefab out of it and it's
19:23 - deleted from our scene let's then also
19:25 - maybe save our scene great called
19:27 - something like main level I think is
19:30 - going to be good let's also create
19:32 - another empty again reset the transform
19:34 - and this is going to be on line creator
19:36 - and or our draw manager or whatever you
19:41 - want to do I'm going to call it the line
19:42 - creator and I'm also going to create a
19:44 - script called line creator and this is
19:47 - what group is going to take actual input
19:50 - from the player and then create these
19:52 - lines procedurally as we go so this is
19:55 - going to be controlling and spawning in
19:58 - lines as we go
19:59 - all right so let me just have a look in
20:01 - the chat here if everything is looking
20:03 - good today to be everything looks good
20:10 - that's awesome yeah cool let's do it
20:25 - okay so the line design creator here
20:28 - what do we need first off we need some
20:31 - way of getting input from the player and
20:33 - of course whenever we want to check for
20:35 - input we do it in the update method so
20:37 - we check every single frame we want to
20:39 - check if we press the mouse button and
20:42 - we do that by using input don't get
20:45 - mouse button down and the mouse button
20:48 - that we want is zero meaning the left
20:51 - mouse button it's the first one so we
20:53 - index it with zero one is the middle and
20:55 - two is the right so I'm just going to be
20:58 - using zero here if we actually get this
21:01 - mouse button down we want to instantiate
21:03 - a new line so let's go up here and let's
21:06 - create a reference of type game object
21:09 - to our line prefab and let's call this
21:12 - one line prefab then down here if we
21:15 - actually press the button will go and
21:17 - instantiate on line prefab and the
21:20 - precision really doesn't matter so we
21:22 - can just go ahead and ignore that I will
21:24 - however store this in a variable of type
21:26 - game object and we can call this
21:29 - something like line tio for game object
21:33 - then we can use this game object to get
21:36 - the line script sitting on the object so
21:39 - we'll go up here and create a line and
21:43 - we'll call this something like active
21:45 - line then down here we can set active
21:49 - line equal to line go guards get
21:53 - component of type line and that's all we
21:57 - need to do so if we now head into unity
22:00 - we should be able to now our access our
22:03 - line prefab and we'll just drag that in
22:06 - there and not much is going to happen
22:10 - because we are only actually creating
22:12 - the line
22:13 - and setting our active line equal to it
22:15 - but we're not setting any points yet so
22:18 - if we hit play and we start drawing here
22:19 - you can see that we spawn in the line
22:21 - and we keep doing that every time you
22:24 - click but you can see they aren't really
22:26 - following the position of our mouse so
22:29 - two unchanged that and let me just see
22:32 - here yep to change that what we do is we
22:35 - go in and call the functions that we
22:37 - just created more specifically we go in
22:39 - and say active line dot and then update
22:43 - line and what we want to feed it is our
22:46 - mouse position so let's go ahead and get
22:47 - a vector two with our mouse position and
22:50 - this is equal to arm input guard mouse
22:54 - position but remember Mouse position is
22:56 - in screen coordinates when pixel
23:01 - coordinates and we need to convert that
23:03 - to both coordinates we do that by saying
23:05 - camera main dot screen two world point
23:11 - and then inserting input dot mouse
23:15 - position there we go and then we can
23:18 - take our mouse position and feed it into
23:20 - the update line method so that should
23:23 - actually make sure that when we draw a
23:26 - line here whoops
23:28 - and of course we need a reference
23:30 - somewhere what's going on oh of course
23:34 - we're doing this before we actually have
23:36 - an active line so we're getting null
23:38 - reference exceptions so what we need to
23:40 - do is only do this if active line is not
23:44 - equal to no then we can go ahead and
23:47 - access it and change or call the update
23:51 - line method and also we can just put
23:55 - this in here as well we'll have another
23:57 - if statement saying if input dot get
24:01 - mouse button up off again zero index
24:05 - zero the first mouse button which is
24:07 - left mouse click will go in here and set
24:11 - active line equal to no so we'll just go
24:14 - ahead and make sure that this is no
24:16 - longer going to be cold when you release
24:18 - the mouse button and that should
24:19 - actually be most of it I think now when
24:21 - we clear hit play
24:24 - and try and draw voila it's working oh
24:29 - my god this is awesome
24:31 - and we can of course try this out if we
24:33 - go and select a player and change his
24:35 - body type to dynamic he's going to fall
24:38 - down and you can see him interacting
24:39 - with the physics here we can actually
24:41 - even draw on top of him and create some
24:44 - weird behavior here probably shouldn't
24:47 - do that but you can see that we can now
24:49 - draw anything that we would like and you
24:51 - can definitely very easily turn this
24:53 - into some kind of artistic application
24:56 - you can see I'm kind of doing that
24:57 - already it's a smiley really creepy one
25:04 - alright that's bad
25:05 - yep not the best of artists but it's
25:09 - actually working and all of these lines
25:10 - are as we can see if we go and hit play
25:12 - here all these lines have both line
25:16 - renderers with all these points but edge
25:18 - colliders as well as you can see
25:21 - represented with the green line here so
25:24 - that's really really nice so the next
25:26 - thing is of course having some kind of
25:28 - goodies on mechanism for our players so
25:32 - that he will actually be able to
25:33 - interact without us having to go through
25:36 - the editor and change the body type so
25:38 - we need to do is access the rigidbody
25:41 - and change the body type to dynamic or
25:43 - through script and we'll do that by add
25:46 - a new script and we'll call this one
25:50 - let's just call it player well
25:54 - double-click it to open it up in visual
25:56 - studio and in here we can first of all
25:59 - create a reference to rigidbody so we
26:01 - need a public rigidbody 2d and we'll
26:04 - call it RB then in the update method
26:07 - will check for input and we'll check if
26:09 - input dot get button-down and the button
26:13 - that we want to check for is currently
26:15 - called jump it's the space button and
26:17 - it's called jump by default I'm just
26:19 - going to call this one something like
26:20 - start and then we can go and change the
26:23 - default value or the default name and um
26:27 - if we get the bun down start we want to
26:31 - go ahead and say our B dot body type
26:35 - equals rigid body type 2d
26:38 - dot and then dynamic cool that should
26:43 - actually be all of course we still need
26:45 - to go into the input manager and
26:47 - actually change it or it's not going to
26:48 - register and we also need to reference
26:50 - our rigidbody2d
26:52 - there so let's go and say edit project
26:54 - settings input under our axes will now
26:57 - sound find the jump and actually it's
27:01 - this one because this one is for the
27:02 - control and we don't really care about
27:04 - that right now
27:05 - and we'll change the name here to play
27:08 - oops
27:09 - so I can slow that cool so now we should
27:12 - be able to hit play draw oh oh start did
27:18 - I call it start I meant to write play
27:20 - here whatever start or play same thing
27:23 - save that and hopefully now gives us no
27:27 - errors oh it's so neat that it actually
27:29 - complains when we run the game and not
27:31 - only when it's used that's it's amazing
27:34 - I would have been a start on that for
27:36 - way too long so we can draw a line hit
27:38 - space and boom our character is standing
27:42 - on the line okay I think it's boring to
27:49 - to get him moving a bit more what we
27:52 - need to do is change the physics map so
27:55 - currently by default on any kind of
27:59 - physics object in unity will the light
28:01 - just flashed on the arm friction is
28:05 - going to be turned up fairly high and we
28:07 - don't want this for this game of course
28:08 - because on snow and ice the friction is
28:11 - of course low which is what enables you
28:13 - to write fast with your sled that's why
28:16 - we go split writing in the winter and
28:19 - not on grass so let's go in here in the
28:22 - project panel that's right click and hit
28:24 - create and then select the physics
28:27 - material 2d make sure it's 2 T and we'll
28:30 - make this the line phys map and we'll
28:34 - set the friction to zero you can add a
28:36 - bit of bounciness and you can definitely
28:38 - play around with this so you can create
28:40 - separate lines with separate physics
28:42 - materials some with more friction some
28:44 - with bouncing X let's I mean endless
28:47 - possibilities you can create trampolines
28:49 - and have them fly around but we'll have
28:51 - a look at that in
28:52 - second but for now we'll just go under
28:54 - our line here and we'll take the lines
28:56 - this Matt and drag that under the
28:59 - physics material on the edge Collider
29:01 - now when we hit play we should already
29:03 - see that all player actually slides and
29:08 - that's a lot more exciting cool and let
29:13 - me just show you what that looks like if
29:15 - we change the bounciness on this we can
29:17 - change it to something like seven let's
29:21 - see what that looks like
29:23 - wait I mean this is not really playable
29:27 - but it's it's a lot of fun so you can
29:29 - see how you can play around with this
29:31 - some reason that wasn't registering but
29:34 - that's just probably because I drew on
29:37 - some of it so I'll just let the
29:38 - bounciness back to zero and the final
29:42 - thing that I did in the demo I mean
29:43 - we're pretty much done with what I
29:44 - originally set out to do was add kind of
29:49 - a force surface platform surface
29:54 - affected to the thing component and the
29:58 - cool thing about this component is that
30:00 - it will kind of drive your player
30:02 - forward because right now if we go ahead
30:03 - and make a arm a flat line here our
30:09 - player is just going to fall down and
30:10 - not much is going to happen he is going
30:12 - to move a little bit probably but then
30:15 - comes install and that's not really
30:17 - exciting of course you want some lines
30:19 - to be like that but the original game
30:21 - also has these red lines which boost the
30:26 - player on and that's what we can do
30:28 - really easily so let's select our line
30:30 - here and let's let's actually create
30:33 - multiple versions of the line we'll have
30:35 - this one be line on the score normal
30:38 - we'll have this one be line on the score
30:42 - bouncy and I'm just going to go in here
30:47 - and duplicate the line v mat and make
30:50 - this the line system an underscore
30:53 - bouncy not bounce bounce G and bump up
30:59 - the bouncing is to something like 0.7
31:01 - and have this one be the
31:03 - standard or normal and this way we can
31:07 - go into a line bouncy here and select
31:09 - the bouncy one now we can also go and
31:11 - duplicate this one more time I'm just
31:13 - going to duplicate the normal and have
31:15 - this one be our first cone and on our
31:19 - boost here we'll go ahead and add a new
31:23 - component and we can go under physics 2d
31:26 - and you can see all of the fun stuff
31:27 - that you can do with this you can add
31:28 - area vectors and all this stuff I'm just
31:31 - going to go ahead and add the surface
31:32 - effect of 2d I'm just going to set this
31:35 - to everything and also make sure that on
31:38 - the edge Collider you click used by
31:40 - effector this will kind of link these
31:42 - two components together then on the
31:45 - force we can add something like maybe 8
31:48 - on the speed and we'll leave the speed
31:50 - variation and for scale as is now also
31:52 - some of the options down here to play
31:54 - around with so if we now go under our
31:57 - line creator and change a line prefab to
32:00 - boost we should be able to use this line
32:04 - so drawn here you can see just how much
32:08 - quicker
32:09 - this guy will ride along we can even
32:11 - write directly up speed health
32:13 - so just kind of makes it more fun if
32:15 - you're able to do that and it actually
32:17 - whoa okay so that's an arrow that you
32:20 - might run into in order to fix that
32:21 - let's select our player and let's make
32:24 - sure to go under dynamic and check off
32:27 - our continuous instead of the screen
32:30 - that's going to help you a little bit
32:32 - that means that when that we shouldn't
32:35 - get those kind of passing through
32:36 - collided problems you can see it's a lot
32:39 - more accurate now good thing that we
32:41 - noticed that I'd completely forgotten to
32:43 - do that so we now actually have all of
32:46 - the elements that was in the original
32:48 - game even a bouncy one we can also go
32:50 - ahead and add a separate line here
32:52 - called passed through pass through and
32:58 - all we could do for this one is simply
33:01 - disable the edge Collider and this just
33:03 - means that whenever we are let's take
33:08 - our line creator whenever we draw with
33:12 - this one it's going to have no effect
33:15 - whatsoever so you can see
33:17 - we can draw a bunch of lines here we can
33:19 - then switch out with the normal one here
33:22 - we can then switch out with the bouncy
33:25 - one for for this one and then we can
33:28 - switch out with the boost for the last
33:30 - one and you should now see that when we
33:33 - play it we pass through those this one
33:36 - is normal this one bounces and this one
33:38 - kind of boosters upwards so we already
33:41 - have a lot of stuff to play around with
33:43 - and all you need to do is insert a bit
33:45 - of code here to switch between them
33:46 - preferably some UI to do it as well so
33:49 - you don't have to remember a lot of
33:51 - shortcuts it's really really easy to do
33:53 - if you don't know how to hook up a UI
33:55 - with um standard gameplay functions you
33:58 - can always check out my crash course on
34:00 - the unity 4.3 GUI I believe that's what
34:04 - it was called I have a crash course on
34:07 - the unity GUI and how you can link up
34:09 - buttons with functions so that's
34:11 - probably the next natural step here you
34:13 - could also go ahead and program
34:15 - something for the camera that would
34:17 - allow you to follow the position of your
34:19 - player as soon as you are unleashing and
34:21 - also have a script that allows you to
34:24 - move around the camera when dragging or
34:26 - something like that maybe using the
34:28 - arrow keys would make it a lot better so
34:30 - that we can create much larger levels
34:33 - and if you want to go completely nuts
34:35 - you could even or create um flags for
34:39 - checkpoints or end in screens or
34:42 - whatever a way to restart the level
34:44 - would be really nice and maybe even a
34:46 - way to save and load levels but that's a
34:50 - completely other thing that would be
34:51 - something like storing and all of the
34:54 - different lines and all their points and
34:57 - then inserting them again at a later
34:58 - point it's a bit more complicated but
35:01 - it's a challenge that that I think a lot
35:02 - of you is are good enough to want to
35:06 - kind of take on so yeah I hope you
35:08 - enjoyed the tutorial part of this
35:10 - livestream I think will transition over
35:12 - to the Q&A part as at least as if
35:15 - everyone is cool with it
35:20 - yeah just looking in the chat here to
35:23 - see if everything's good it is cool so
35:27 - yeah I think we'll wrap up the tutorial
35:29 - pretty pretty quick one today but I
35:31 - think that's alright and we'll just get
35:33 - going with the Q&A just leaves us more
35:35 - time to keep that so let me switch over
35:38 - to my other layout here there we go
35:42 - hello guys I'm on the big screen and you
35:45 - guys lie in here that's wrong so ask
35:49 - away with anything that you would like I
35:51 - am here to answer your questions
35:56 - umm this game would be cool with
36:00 - multiplayer yeah that that could be
36:03 - really fun actually okay kind of an kind
36:07 - of a co-op experience where you have to
36:09 - complete different things with one guy
36:11 - drawing and the other guy moving around
36:12 - that could actually be really really fun
36:14 - I think you could hook that up pretty
36:16 - easily using the Unity networking system
36:19 - so if one of you guys make that
36:20 - definitely posted on the forums and I
36:22 - would I would love to see it that could
36:24 - be really fun um let's see here can you
36:30 - add one video to how to make a quiz game
36:32 - which will teach us how to save
36:34 - unanswered questions slash list for
36:37 - later use arm I'm probably not going to
36:40 - be adding another video on the course
36:42 - because it's pretty much wrapped up in
36:45 - my opinion but it should be pretty easy
36:48 - to do you should look into player press
36:51 - and if you want some more sophisticated
36:54 - saving and loading you should look into
36:56 - some kind of data saving system like XML
37:00 - JSON something like that but just begin
37:04 - with player press it's the easiest and
37:06 - fastest to get running
37:11 - let's see any marketing tips especially
37:14 - about getting youtubers and streamers to
37:16 - feature your game yeah see that's the
37:18 - that's a difficult one when I originally
37:21 - created a game before before YouTube or
37:26 - anything like that my strategy was to do
37:28 - YouTube I mean this this channel was
37:31 - created with the sole purpose of
37:33 - of kind of being a way of me to create
37:36 - an audience to direct towards one of my
37:38 - games and it ended up being its
37:40 - standalone thing but it's definitely a
37:43 - kind of hard hard thing to do because
37:47 - marketing quickly requires the budget I
37:51 - think the first thing that you can
37:53 - probably do is design your game with our
37:55 - youtubers and streamers in mind make it
38:00 - attractive for them to play make it
38:02 - something that's very easy to pick up
38:04 - and maybe something that has a fun twist
38:06 - to it
38:06 - I mean Daniel SMD is a good example of a
38:09 - guy who's really really good at that and
38:11 - who's also done a lot of collaborative
38:13 - work with different youtubers who could
38:17 - then feature him when he released his
38:19 - games
38:20 - I believe he he made what the box I
38:22 - believe that was the name of the game
38:25 - what the Box am I correct here yeah and
38:29 - that's been a huge success for him as
38:31 - far as I can tell and it's been played a
38:33 - lot on YouTube so if you want to kind of
38:35 - see how to do it right check out what
38:38 - the box
38:40 - why'd you disable image upload on your
38:43 - forum because I'm afraid for my servers
38:45 - that's actually is a symbol answer and I
38:48 - have some issues with it arm when
38:50 - testing out you can see a friend is in
38:52 - the screen I was dancing or asking a lot
38:56 - of stupid questions so I'll kill you
38:58 - and also you will be banned so when
39:05 - you're putting out the next video for
39:07 - the running game tutorial I'm not sure
39:12 - what tutorial you're talking about
39:14 - we run again I fit the platform in one
39:19 - how I created an immune system run a
39:22 - game I don't I'm not sure
39:24 - have to specify I'm sorry yes he even
39:27 - people in the chat here know what the
39:29 - box so really really well done what game
39:36 - would I like to recreate next
39:39 - I have no idea I actually had a hard
39:43 - time coming up with this one today but
39:45 - when I did that just had so much fun so
39:47 - I had to do it but yeah let me know if
39:51 - you have some good ideas of what you
39:52 - want to see in a live stream of course
39:54 - make it something that could
39:55 - realistically be done within like an
39:57 - hour's time frame but yeah I'm very open
40:01 - to suggestions do you have any tips for
40:06 - new unity uses when it comes to
40:08 - practicing genetic features and
40:10 - scripting in c-sharp yeah I might have a
40:15 - few tips um first one is use the
40:19 - toriel's and don't be afraid to copy
40:21 - code that's probably the first thing if
40:23 - you can just get something working then
40:26 - that's amazing
40:28 - no matter how much of it you've copied
40:29 - no matter how little originality is in
40:33 - your original idea doesn't matter just
40:37 - try and get something working I promise
40:39 - you it's going to be harder than you
40:40 - think and then you're going to learn so
40:42 - much trying to do it and that that's the
40:44 - most important thing try and set
40:48 - realistic goals don't start with I'm
40:51 - going to make the next call duty start
40:52 - with something smaller like I'm going to
40:55 - make something where when I click the
40:57 - screen the box will turn red and you
41:00 - learn a lot of stuff by doing that you
41:02 - learn about materials renderers
41:04 - properties you learn about input there's
41:07 - a lot of stuff in that and variables and
41:09 - references and functions and all that
41:11 - stuff so start small and yes definitely
41:15 - just use as many resources as possible
41:18 - if it's available to you why not use it
41:22 - so yeah you can always learn the hard
41:26 - way at a later point and also copying
41:29 - people's code is amazing you have to
41:31 - read it and kind of adjust it to your
41:33 - own game and maybe even experiment with
41:35 - it in order to get it to do something a
41:36 - bit different and that's a perfect
41:39 - learning process when you don't feel
41:41 - totally familiar with the syntax or
41:43 - don't know the API and so you have to
41:45 - sit with the scripting reference for a
41:47 - long time what I did
41:49 - um a temporary Niagara could be fun um
41:52 - what's my favorite our unity feature
41:56 - that's a really good question I don't
41:59 - think with unity it comes down to one
42:01 - feature because I don't think that unity
42:03 - necessarily is leading in any kind of
42:07 - particular subject
42:10 - I mean graphics wise they're engines
42:13 - that are prettier and more advanced than
42:15 - unity programming wise and order what in
42:19 - terms of what you can do with
42:20 - performance that are there are custom
42:22 - engines that are quickly there are
42:24 - engines that can do more impressive
42:25 - specific stuff and stuff like that and
42:28 - unity only recently did stuff like a
42:30 - really move into version control and
42:32 - collaboration and unity cloud services
42:36 - is pretty impressive I must give them
42:38 - that but I don't think it's with unity
42:40 - that it's one particular thing I think
42:42 - my favorite unity feature is the first
42:46 - of all how quick I can work in unity and
42:48 - also just the easy of use it it's just
42:51 - so quick to get something working in
42:53 - unity and that's because of the way that
42:56 - they've designed the editor and some of
42:58 - the choices they've made when it comes
42:59 - to scripting and and that whole
43:02 - component system it's just it's awesome
43:05 - so yeah that's probably the best the
43:08 - best part will I ever do a big and scary
43:12 - project like rule 18 does I think
43:14 - recently I've enjoyed a lot to do very
43:17 - small isolated projects and if I'm
43:19 - working on a series it's going to be a
43:22 - small one and the reason why is I think
43:25 - big scary projects often get very hard
43:28 - to maintain and most importantly you
43:31 - lose 95% of your audience after the
43:35 - first 10 videos and that's not something
43:37 - that I necessarily want to do because I
43:40 - feel like a lot of the stuff that I
43:43 - explained later on in the videos it's
43:45 - not because it's too hard for the other
43:47 - 95% to understand it's just that there's
43:51 - so much stuff in such a series when you
43:55 - create a big game that is not relevant
43:57 - to each and every person that is only
44:00 - specific to the game and it's not that
44:02 - it's hard or
44:03 - that it's particularly good to learn
44:06 - it's just something that you have to go
44:07 - through and that's not really something
44:09 - I want to focus on I've done on courses
44:12 - that are really long that's me teaches
44:14 - you how to create a game from scratch
44:16 - and then to completion pretty much and
44:18 - exporting make a game isn't a good
44:21 - example of that the 2d platformer course
44:24 - while maybe being ended a bit abruptly
44:27 - shows a lot of the game design process
44:29 - so I would like to focus on more smaller
44:32 - standalone subjects and I can see my
44:34 - black screen there but but then again
44:39 - I'll never say never I mean it's also
44:41 - there's also a lot of fun stuff about
44:43 - working on the logic project especially
44:45 - if I had the ability to to include you
44:49 - guys more as cool a team did so maybe
44:54 - fairly giving the components that are
44:56 - underused by other developers oh that's
45:02 - a good question that are underused by
45:04 - all the developers ah I don't know about
45:07 - that one
45:08 - I feel like unity really excels at their
45:11 - 2d physics stuff it's been so easy I
45:13 - mean I just found the the surface
45:16 - effector here a lot of this spring and
45:18 - buoyancy and all that physics stuff it's
45:21 - just so handy to have at your fingertips
45:25 - other than that I don't know favorite
45:29 - component the rigidbody just so much fun
45:32 - underused component don't have a good
45:36 - answer sorry
45:38 - do you have any videos on Perlin noise
45:39 - world generation if not is that
45:41 - something you'd like to do I'd love to
45:43 - do something with particular world
45:44 - generation especially using Perlin noise
45:47 - because it's available through the unity
45:50 - math deaf library by default and so be
45:54 - pretty relevant to just pick that up
45:55 - create a procedural terrain maybe even a
45:59 - procedural mesh if we don't want to use
46:01 - the default terrain system because that
46:03 - drives me crazy every time I look at it
46:05 - that could be really fun there are
46:08 - really good tutorials on that especially
46:10 - a written tutorial that I saw at one
46:12 - point but still yeah
46:15 - if it can be done enough one to two
46:17 - videos I would love to pick it up but it
46:19 - is for your advanced users and might be
46:23 - too no I would love to do it yeah when I
46:27 - get time let's see how can make it
46:36 - tutorial can you ever make a tutorial on
46:39 - how to make it to the platform or if I'm
46:41 - going to make a new video I'll probably
46:43 - not publish a new video on that for a
46:45 - long time I don't know if I'll ever
46:48 - publish a new video in that particular
46:50 - series I feel like I covered everything
46:52 - that I wanted to cover in that
46:53 - particular series however I do want to
46:55 - do more 2 e videos and I do want to
46:58 - create more there could be relevant for
47:00 - this series I would just grab it up and
47:02 - a standalone thing so I don't think I
47:03 - will necessarily continue the course on
47:07 - with another video let's see what game
47:18 - genre is the easiest to work on you guys
47:22 - are asking the hardest questions that's
47:25 - a very general general generic question
47:27 - and I'm having a hard time to say only a
47:30 - single genre I mean gameplay wise it's
47:35 - often easiest to get something rkd up
47:38 - and running pretty quick and that's also
47:40 - been the theme of these videos I mean
47:42 - something with simple movement something
47:45 - where the core gameplay risks on very
47:48 - very simple mechanics might be something
47:52 - physics based just often the easiest
47:55 - thing to get up and running because
47:56 - physics just so quickly feels fun if you
48:00 - give a bit of control over some kind of
48:02 - physics object it gets it gets it gets
48:05 - fun really quickly but some harder stuff
48:09 - is the opposite where where your content
48:12 - creation is so important and you have to
48:14 - create a lot of levels and items and
48:19 - objects and characters and textures and
48:22 - more you have to do a lot of coding that
48:25 - only applies to certain products parts
48:27 - of your game stuff like RPG
48:28 - especially multiple and especially its
48:30 - massive but also stuff like RTS games is
48:35 - very very programming intensive so I
48:37 - would say easiest is probably something
48:41 - in the arcade genre but it's a
48:44 - generalization that's that's just how it
48:47 - is how do I get good inspirations for
48:52 - new game ideas that's a good question I
48:54 - actually do that by playing old games I
48:56 - feel like I'm not the best when it comes
48:58 - to game ideas often I'll rip off the
49:00 - game and kind of do a twist and I'll
49:04 - call it my own thing but I think that's
49:06 - how pretty much the entire game
49:08 - development industry works it's very
49:10 - rare to see a completely unique gameplay
49:13 - element that's never been done before
49:14 - and frankly you can never guarantee that
49:17 - your game on idea is unique of course if
49:20 - you're going to claim that it's an
49:22 - unique idea you need to do a lot of
49:24 - research but I never do that I just make
49:27 - something and if it's fun it's fun I
49:30 - mean the biggest games ever have all
49:33 - been rig offs of some games that have
49:35 - done the same thing before them but in a
49:37 - slightly different way or with less cute
49:40 - graphics or smaller marketing budget
49:43 - example Angry Birds probably one of the
49:47 - biggest mobile games ever and it's just
49:50 - the same thing as a million other
49:52 - Miniclip games before it so yeah how it
49:56 - is but I would say playing playing games
49:59 - is a good source of inspiration
50:00 - sometimes I'll just browse mini games
50:03 - looking for something that feels fun to
50:06 - do and maybe gives me some kind of
50:08 - inspiration let's see oh the okay we're
50:18 - asking for the best for the how to make
50:21 - a video game series story of course
50:23 - that's kind of in this Runner I see it
50:25 - um yeah I mean new video out probably
50:33 - Sunday I think I'll try to upload a
50:39 - video for that series once a week and
50:41 - then
50:43 - normally that Sunday and then Wednesday
50:46 - I try or Wednesday sorry someone pointed
50:50 - out that I pronounced it wrong I say
50:53 - Wednesday now
50:55 - yeah I'll upload that either Wednesday
50:57 - or Sunday and then the other day I would
50:59 - like to do a standalone video each week
51:01 - so you can be pretty sure to see asking
51:04 - at least one video a week in that series
51:06 - come worry about it it's a fun series by
51:09 - the way I don't think we'll go on much
51:10 - longer because I've pretty much curd
51:13 - covered all the essential things that I
51:15 - wanted to have in this series and again
51:16 - I don't want to create a very long one
51:18 - but we'll probably land around 10 videos
51:21 - or something like that what would you
51:24 - say is the best software for pixel 2d
51:26 - design it has to be free oh if it has to
51:30 - be free I don't know
51:33 -  is good for pretty much anything
51:36 - good piece of software and it's free I
51:39 - use Photoshop so that's not free there
51:42 - are a lot of online tools if you just
51:44 - want to do easy pixels all right just
51:48 - search for pixel art all online and
51:51 - there are a bunch of whip in web
51:55 - services that help you do that you could
51:57 - use one of those I even created an
51:59 - editor extension for unity at some point
52:01 - that that allows you to create pixel art
52:03 - it's called pixel art toolkit it's
52:07 - available on the asset store for free
52:08 - it's not been maintained for a long time
52:11 - so I have no idea if it still works
52:14 - um but yeah the Chad is saying Pisco
52:20 - check out Pisco what is the weirdest
52:23 - game I have made I ever made
52:26 - I've made some weird games with friends
52:27 - it's always really fun to put your
52:29 - friends in games recently um we had a
52:33 - day here where we just thought let's
52:37 - make something together and most of my
52:39 - friends are not game developments of
52:41 - developers actually pretty much none of
52:43 - them are like real life friends um but
52:47 - still they think it's really fun to
52:48 - participate and we try and try and make
52:51 - something together we're basically put
52:53 - them in front of the green screen
52:55 - than do really ridiculous thing in sub
52:57 - time motion put them into the game and
52:59 - they could be the main characters of a
53:01 - platformer it was about my friend who
53:04 - lost the guitar and he wanted to find it
53:07 - and we had him do some voice acting as
53:09 - well really silly my other friend was
53:12 - the evil villain gave him ain't kind of
53:16 - bad like wings and had him case around
53:19 - yeah stupid things that's probably the
53:21 - answer probably not but it's the one
53:23 - that I can remember yeah I'm from I'm
53:26 - from Denmark when what did you study I
53:29 - did not go to university I fairly
53:32 - recently about a year ago finished up
53:34 - not a year ago little under a year ago
53:37 - finished up give nation which is pretty
53:40 - much like high school and I went to our
53:44 - high if you know it send the it's pretty
53:48 - central to the city and thanks for all
53:52 - the compliments guys you guys Rock um
53:55 - can I please make a quick tutorial with
53:57 - the crossword or scramble playing system
54:00 - maybe could be fun to do I've never
54:04 - played many of those games myself I
54:06 - don't really enjoy them too much mostly
54:09 - because I really really suck at quiz
54:11 - games I know I've made a quiz game
54:13 - tutorial but it's ridiculous how bad I
54:16 - am um but yeah I might consider it do
54:23 - slash will you do a Ludum little diary
54:26 - live streams so I haven't actually done
54:28 - a lot of diary live stream and that's
54:30 - for a few reasons the first one is I'm
54:32 - not a very experienced large streamer
54:34 - and so I get really exhausted when wind
54:37 - live-streaming I can pretty much only
54:39 - livestream like one and a half hour and
54:41 - I am tired of course it's doing a lot of
54:46 - diary livestream it's a different thing
54:47 - you don't have to interact this much
54:50 - with the camera and such because yeah
54:52 - you would have no time to do coding but
54:55 - I actively idea of streaming for such a
54:58 - long time it messes me up um yeah but
55:03 - again maybe some time right now I'm just
55:06 - enjoying
55:08 - doing a lot and re-recording some stuff
55:10 - where I want to and mixing it up into a
55:12 - standalone video that's normally what I
55:14 - do and you can check those out if you
55:16 - want you can just search for Ludum dare
55:18 - you on my youtube channel and there are
55:19 - some pretty tightly edited videos
55:22 - showing how I created my games please
55:25 - stop spamming guys please do a draw my
55:29 - life that's a really really good idea I
55:31 - don't know why I haven't done those yet
55:33 - probably because of my drawing skills oh
55:35 - no you guys saw them before I should do
55:39 - a draw my life where only draw in design
55:41 - writer replica which is made no promises
55:45 - but yeah a drama life could actually be
55:48 - really really fun I would love to do
55:49 - that can you make a tutorial and XML
55:55 - serialization perhaps or JSON something
56:00 - along those lines I would love to do
56:01 - something with saving and loading I
56:03 - think it's time I bring up my notes here
56:06 - to run write down some of these ideas
56:08 - because there's no way I'm going to
56:11 - remember all of them if I don't do this
56:12 - so let me just give me one second so
56:15 - saving loading XML JSON and of course
56:23 - maybe just unities to play a press will
56:26 - see and drama like cool will you ever
56:36 - make a small RPG game tutorial maybe
56:38 - maybe that's sometimes if you decide to
56:40 - make a new tutorial series can you make
56:42 - an RTS that's a very very big game to
56:44 - make so I don't think I'll be making an
56:46 - entire RTS might do points of it might
56:48 - do unit control or you can kind of
56:50 - control those guys around and have them
56:52 - spend different formations that could be
56:54 - pretty fun maybe do something with
56:56 - camera penny there are a lot of lot of
56:59 - possibilities you can hire an artist for
57:02 - drama life all that's cheating no don't
57:05 - want to do that can I do a tutorial on
57:12 - adding multiplayer to things fairly
57:15 - generic subject it really depends on the
57:17 - game what you need to do but maybe
57:22 - let's see I love RPG games who would be
57:34 - awesome to see tutorial on it yeah
57:37 - RPG games are really really fun to work
57:40 - on they are just so huge and they cry so
57:42 - much code Oh
57:45 - maybe part of it again we can maybe
57:48 - break it up into smaller segments I'll
57:51 - think of it think about it umm yes this
57:57 - is the end we went through the entire
57:59 - tutorial part and this is the Q&A and I
58:03 - think we'll also wrap this out fairly
58:05 - soon so final questions guys um I had a
58:09 - lot of fun I mean I always love doing
58:10 - these live streams you guys are just
58:12 - awesome to UM to hang around with and
58:17 - yeah so what's my favorite game Jesus
58:22 - with the hard question can you guys ask
58:24 - something because require a lot of
58:26 - thought I should prepare questions in
58:29 - advance my favorite game probably the
58:36 - game that I spend the most time playing
58:38 - its World of Warcraft and I have a
58:40 - certain love for the placing style we
58:45 - are then the characters everything is
58:47 - just fun so if I have to pick a single
58:50 - one it would probably be that then again
58:54 - counter-strike is really getting really
58:56 - fun played that way too much ah do you
59:02 - really have to choose will you keep this
59:07 - video boss or upload to youtube for us
59:09 - um it will be available just after we
59:12 - are finished as Avadh on Twitch but it
59:14 - they take it down after two weeks so
59:16 - make sure to also upload it to YouTube
59:18 - tomorrow afternoon don't worry about it
59:21 - you will have it as long as you want
59:24 - umm what class did I have in whoa and
59:29 - what's the forecast that is I played a
59:31 - lot of different classes tell it in
59:34 - ah they all gone hunter-warrior
59:42 - warlock but had pretty much all of them
59:45 - in Maxwell at some point again I played
59:48 - way too much guys way too much
59:52 - I don't play too much anymore one once
59:54 - in a while I pick it up played recently
59:56 - with a friend but that's always fun but
59:58 - I can't stand playing it alone I have to
60:00 - play friends um let's see train
60:06 - simulation would be great yeah maybe so
60:12 - Turo some specific components and some
60:14 - ideas on what to do with them yeah
60:16 - example line renderer can be used to
60:17 - draw trails to check and explain the
60:19 - variables of the component that could be
60:21 - a pretty fun thing to do actually kind
60:23 - of base an entire series off a component
60:26 - yeah
60:28 - I'll consider that I'll write it down
60:30 - video based on component I drew no 3d
60:37 - modeling if yes please make it tutorial
60:39 - I know a little bit of 3d modeling I'm
60:41 - very I'm a really really bad artist so
60:44 - what I can do with it it's very limited
60:45 - but I know many of the tools and I know
60:48 - my way around pointer and my hand some
60:52 - of the 3d modeling software that you
60:54 - probably don't know um so I know the
60:56 - whole slang I know the ways that things
60:59 - are done I'm just really really bad you
61:03 - think so I might be able to do with
61:05 - tutorials at blend at some point a
61:08 - tutorial on Blender at some point but
61:10 - it's not going to be right now I'm gonna
61:14 - write that down here small slender
61:16 - tutorial and that's going to have to be
61:19 - a small series a 3d racing game I would
61:23 - love to do that as well actually a cool
61:25 - guy called Theo is currently working on
61:27 - a realistic car for dev assets and when
61:31 - that gets done I will probably have a
61:32 - look at creating something with that
61:35 - that could be really fun
61:36 - it looks amazing currently the renders
61:38 - are beautiful he's still working on it
61:40 - but it's going to be really good also I
61:42 - haven't mentioned that at all if you
61:44 - guys like this livestream the reason why
61:46 - we are able to
61:47 - good is because of the patreon
61:49 - supporters patreon is a way for you to
61:51 - donate a monthly amount of your choosing
61:53 - and it's castable at any time and it's
61:56 - really awesome it what allows me to do
61:58 - this and if you want to support me and
62:01 - the videos and the live streams you can
62:03 - go to patreon.com/scishow she lies I'm
62:08 - it's hard for me to get in contact with
62:11 - all of you guys but I'm I write a lot
62:14 - with the patreon supporter so if you
62:16 - want to get kind of come friends or
62:19 - something it's a good place to reach me
62:21 - so patron comm / gratis and thanks to
62:24 - the people who are already supporting
62:26 - you guys Rock and also if you want to
62:28 - get cool free 3d models you can go to
62:32 - dev assets calm its play what you want
62:35 - you can choose any price whatsoever you
62:36 - can even download them for free
62:38 - and there's a desert environment that
62:41 - looks awesome
62:41 - that we just released I'm actually just
62:45 - going to go ahead and switch my screen
62:47 - over here so you can so you can see it
62:50 - here whoops there we go
62:53 - let's hear so if you go to dev access
62:56 - calm you can see here there is the new
62:59 - FPS environment and it looks just
63:02 - amazing it's created by a guy called Sam
63:05 - trust awesome guy and here's the video
63:08 - for it so you can get an idea of how
63:10 - that looks
63:11 - everything is just rendered in unity
63:14 - it's ready to use out of the box it
63:16 - comes with an example scene like over 30
63:20 - or 40 models all PP are really high
63:23 - quality and it's yeah it's just awesome
63:25 - they're also modern weapons it wasted
63:28 - props pack and a variety of all these
63:32 - stuff so you can also check out the 2d
63:34 - mega pack which I created which seems to
63:36 - be very popular so has stuff like
63:39 - platformers top-down shooters tower
63:41 - defense gold miner stuff all kinds of
63:44 - sprites check it out so yeah services
63:48 - comm just wanted to give that I
63:49 - mentioned and yeah okay so I think that
63:56 - is it for now can we create 2d asset for
63:58 - deficits if you want to create some ass
64:01 - you can write to apply add brackish comm
64:05 - apply at brackish calm
64:07 - it's the email address I definitely want
64:10 - to bring some more 2d stuff on that
64:11 - since it seems to be pretty popular so
64:14 - currently it's almost only 3d stuff cool
64:18 - thank you so much guys I'm going to wrap
64:20 - up the stream now I had so much fun you
64:23 - guys Rock and yeah see you in the next
64:26 - video so thank you so much bye bye
64:27 - everyone thanks of the awesome people
64:30 - who donated in February and a special
64:32 - thanks to Derek huge jerk face we'll
64:33 - never find James Callaghan and Jason
64:35 - Nintendo if you want to become a picture
64:37 - in yourself you can do so a picture that
64:38 - comes that's brekkie thanks a lot guys

Cleaned transcript:

hello everyone welcome to this video on creating a line write a replica this is a live stream recording so if something messes up well that's not much I can do about it so this is what we're going to be doing today we're going to be making this game here where if we hit play we can draw out a level using our mouse and we can draw as many lines as we want and then we can hit enter or space and the player will play through it and you can see that I've even added some forces to these lines that's totally optional you can pretty much do anything you want with it and it's just something that's really really fun to play around with we can even make lines while the game is so say I'm playing so yeah really really fun thing and let's just jump right into it so let's start by creating a new project let's go to file new project and that's called is something like line Rin writer replica there we go and let's check out 2d and now I'm just going to put it in my projects folder go ahead and hit create project and unity is going to create all the necessary meta files in the background here while we wait and I'm just going to see if everything's working ah looks like it could you get start could could I get it stuck in a circle yeah definitely could there's many ways to mess this up that's how it is when you create a sandbox game and let's start by taking our main camera here and just changing the background color to a complete white as in the original and I'm also going to change the size of our orthographic camera here to eight just assume things out a little bit and yeah let's actually begin by just bringing our player into the scene so that's I have this player graphic here it's a PSD file again this will be on github when I upload the entire project after we're done um at least before or at least sometime tomorrow depends on when we are when we get done here but you can pretty much use anything you like you can even use the default sprites that come with the movie so let's just drag this into the project panel and I'm just going to go ahead and change the pixels per unit here to something 800 and change the mag size to something like 128 I think is going to be pretty good just so when we drag it in here it's not going to fit the entire screen let's also maybe take this guy and drag it up a bit just to place them in the corner of the left corner so that we have some space to work with and that's also a thing that you should really go ahead and create if you serious about making this game is some way to move around the camera so you can create levels that are bigger than what you can fit on a single screen and then when you play have the camera somehow follow the player but we can talk about ways of doing that later now let's get the basic things in place and that is of course a rigidbody let's add a rigidbody 2d and I don't think we really need to change anything here you might want to bump up the gravity scale and that kind of makes the game feel like it plays a lot faster because I'll put player Falls faster and so he the forces or he rides down slopes faster but I'm just going to leave it at 1 and I'm going to change the body type to static so that when we play he's not going to fall anywhere he's just going to sit there for now I'm also going to focus on him by hitting F in the scene view and add another component and this one is going to be our capsule Collider 2d this is also a fairly new nice addition to the 2d system the capsule Collider and I'm just going to go ahead and change this to horizontal and I think the axe x value is fine somewhere around here somewhere around 1 and I'm just going to bump down the Y a bit and I'm also going to kind of shift it down just to place it where his um let's see here just a place to kind of at the bottom here we don't want it to be affecting the stickman just the vehicle cool so now that we have him there and he has physics and everything we can go ahead and create something for him to ride on and um yeah people are asking what this is it is a guy on a sled I'm really sorry that it looks so bad I tried to create something that was kind of like the original but still I didn't want to be cover right slap so yeah this was all I could come up with pretty embarrassing all right so let's go ahead and do some scripting so the first thing that we need is some weight for us to create a line and change the points in that line and to do that let's go ahead and create an empty game object let's reset the transform and call this one line let's also add a component called the line renderer and we'll also add a edge Collider so this is responsible for graphics this is responsible for physics collisions then we can take our line renderer here and we can open the positions array and this defaults to positions 1 at 0 0 0 and 1 at 0 0 1 and because 1 is in the depth we can actually see the line so let's change that to zero and instead have it go like 1 5 d X and now we can see a ridiculously large line that is also purple so let's go ahead and bump down the width here to change the size of it and I'm just going to say to something like point zero eight and let's also add some other color and we could do that by first adding a material some people just go down here and try and change the color that's not going to work because we need a material to actually use that color to display to display the object on screen so let's go down here and right click or create and then materials and we can call this something like line Matt no need to complicate it further than that let's also select the line and drag the line Matt into the material slot now of course online matt is currently a standard shader I think it's a lot better if we change this to something like a sprite default and this will allow us to change the color through the color mode here so or through the gradient editor and that's all that also means that we could have the first part of it be black and then have it fade out but I'm just going to make the entire line black one thing that could be pretty cool to experiment with is having kind of the edges of it fade out and we could do that by having a very very narrow fade out here at the end I'm just going to fade it to white here so have this be black and then this be black as well and this then the sinks on the final part here be white but you can see the problem with this occurring and that is we can't have a fade out between on the two points so yeah it doesn't look too good I experimented with that but wasn't you happy with it so I'm just going to cut it off and we could also give it some corner vertices something like and actually we might need to have this be something like five here just to kind of smooth it in the end actually we might need to do more three five I think five could be pretty good but because it's so small and our line it has a very very low risk I don't think we're going to be yeah using this too much I'm just going to set both of them to five now and then we can always experiment with it later this will just smooth off the ends and round out the corners that's all we're doing inside it starting some actual extra vertices and this is going to cost you a little bit on performance so now that we have our line set up we need to control it through its script and we do that by adding a new component and we'll call it something like well we can just call the line let's double click this to open it up in visual studio and I'm just going to wait for wishes to do to load up here take a little sip of water and it's loading up on my secondary monitor so let me just drag it over cone so the first things that we're going to be needing um is references to of course the line renderer and the edge Collider so let's go ahead and create two public variables and so we can just drag them in in the inspector so we'll have the public line renderer and we'll call this something like fly and render um I will have the public edge Collider and it's an edge Collider 2d and we'll call that one edge cold or edge Collider if you will I'm just going to call it edge cold and um yes so now we can already go inside of unity if we save that and reference the two just to make sure that we don't forget there we go and next up we need on some kind of way to store the points so I would like to create either an array or much easier a list of all of the points that we're going to be using for a line and in order to use a list make sure to be using system dot collections dot generic this way we can go ahead and write lists here and we want the list of vector twos a list of twodimensional points and we'll call this one point remember the difference between a list and an array is that an array is great for storing X amount of items but only if you don't need to change the size of it if you need to change the size of an array you actually need to create a whole new array and set it equal to that so it's not resizable but it is more performant however if you do need to resize your list use a generic list this allows you to add things at the end remove things add index points it's super awesome but it is less performant so it's always a decision you have to do do I need to resize or do or not and we do so we're using a list then we need some kind of public void and the reason why I'm making this public is because I want it to be accessed from the script that is going to be creating these lines and we are going to call it something like update line and this is a method we'll call in the update loop whenever we are actually still working on the line as soon as it's finished we're not going to be using this script at all and so this function is not going to be called but each frame that we are currently drawing on the line we're going to be calling this update line method and that means that it allows us to do different points it allows us to or different things it allows us to insert new points and also to set up the line if it hasn't already been set up for example we need to check if points the sequel to no because if it is we need to go ahead and make sure that points equals a new list of vector Q so this way we instantiate our list and now we can go ahead and add elements to it so we'll create some kind of set point or add point method and we'll add that in a second and then we can just return out of the function then down here under this in case we have already said about points array and and this is not our first point we can go ahead and check check if the mouse has moved enough for us to insert new point and if it has insert point at mouse position and we'll go ahead and do that in just a sec first off let's create our set point method so let's go void set point and of course whenever we are setting a point we need to insert the position of the point and we'll do that as a vector two so this is going to take in a vector two called points and we'll make sure to also feed this into the update line because we could of course just get our mouse position here do we want to do that I don't actually think we do kind of debating on that now I think we want to feed it into the function it's it's cleaner this way so we'll pass a vaca to point on into this function as well and we'll pass that on to the set point method so that means that when we're creating the line and updating it we are giving it almost position calling it point and we're feeding it into the set point method so that down here we can again use our mouse position referred to as point and um in here we can then go and access our points array so we can go points dots add add a new point and we're just going to be adding the point vector to that we feed into the function which is going to be a mouse position all the time and then down here we can say line renderer dot and we need to say something like point non positions that's the name equals point dot count so we're going to um or we currently keep track of the points locally we have an array or a list up here of points and we add points onto that list but we need to also apply that to the line renderer and the way that we do that is first of all set the number of positions on our line when you run the number of points equal to the length of our points list then we also need to go and add the new point to that list so we go line renderer third set position and the position that we want to set here is add the index which is at the bottom of the list so the point that we just added we want that index and we want to insert that point so in our case that's going to be points dot count minus one because remember if we have indexes that goes zero one two three let's imagine on that we have a links on a list length of three so we have 1 or 0 1 2 and so the last index is going to be 2 which is 3 minus 1 yeah so that's why we take the length here or the count and subtract 1 and so we get the last index in the on list and we're also going to of course feed in now the points cool and this is a lot easier for the edge Collider actually for the edge Collider within the go edge call dot points and set it equal to points however that's one slight problem with this and that is edge collided up points is actually an array and it's kind of weird for me that it's an array when it needs to be resized at runtime I don't know why you need it shows to do do that I'm sure they had a good reason but we do therefore need to convert our points list here into an array before we could feed it in and the way we do that is by using points dot to array boom and we're done is that is it's just a single function call really really to do so now we should be setting points and we should be able to update our line but we still don't check or we currently only insert a single point and that is at the very beginning when we set up a line we still need to check if the mouse is moved enough for us to insert new points and if it has do it and that's what we're going to be doing now so in order to do that we need some way of checking the distance between the previously inserted point and the current point or the current mouse position and the way we do that is by using an if statement and we're going to check if and we're going to get the last point in the array or in the list and we do that by using points dot and this is very nice currently we don't have access to a function called last which simply just gets us the last point in the arm in the list so what we need to do is I actually go in here and access using points count minus 1 and we can totally do that that's legitimate and it should get us what we need the problem with this or I mean it's just not very clean instead we could go up here and say using system dot link and this simply allows us to convert this piece of messy code into points dot slash there we go and it gets us the same thing so that's a really nice thing to to use if you need to do this sort of calculation a lot and of course we need to check the distance between so we will say something like vector to distance between points last and the current point and if that is armed let me see if I grab the syntax right looks like it if that is greater than and then some value I'm just going to space my points out with about 0.1 you can turn this into its load up here if you want it to be configurable in the inspector I'm just going to hard code it in here and if it is meaning if the distance between our last point and our current point is greater than 1 we'll go ahead and insert so we'll see say set point and feeding the point if not nothing is going to happen the point here that we're trying to update with it's just going to be ignored so really really cool we could also maybe rename this one to Mouse position I think that's a little clearer because currently it's not a point it's only a point when we insert it down here so here it's just our mouse position it's it's better this way it's cleaner and by the way the way that I did a quick renaming of all the variables at the same time this way you can control our are so hold down control and press R twice and this allows us to refracture the variable and you can see just how nice that is just hit enter when you're done cool so um I'll leave that's all we needed to add to the script one final thing and this is something that's also a bit weird with the edge Collider and that is we can't actually have an edge Collider with only one point it needs to have at least two points it makes sense because you cannot create a line from a single point but it will go into an error so what we'll do instead on that instead of just inserting it down here it will check if points dot count is greater than 1 and if it is we'll go ahead and do this so we need to make sure that we have at least two points before we try and create some kind of collision so let's say that and hit into unity and of course you know in part of this is that we can't actually see this in action because we need a script to control it so let's take a line and create a prefab out of it and it's deleted from our scene let's then also maybe save our scene great called something like main level I think is going to be good let's also create another empty again reset the transform and this is going to be on line creator and or our draw manager or whatever you want to do I'm going to call it the line creator and I'm also going to create a script called line creator and this is what group is going to take actual input from the player and then create these lines procedurally as we go so this is going to be controlling and spawning in lines as we go all right so let me just have a look in the chat here if everything is looking good today to be everything looks good that's awesome yeah cool let's do it okay so the line design creator here what do we need first off we need some way of getting input from the player and of course whenever we want to check for input we do it in the update method so we check every single frame we want to check if we press the mouse button and we do that by using input don't get mouse button down and the mouse button that we want is zero meaning the left mouse button it's the first one so we index it with zero one is the middle and two is the right so I'm just going to be using zero here if we actually get this mouse button down we want to instantiate a new line so let's go up here and let's create a reference of type game object to our line prefab and let's call this one line prefab then down here if we actually press the button will go and instantiate on line prefab and the precision really doesn't matter so we can just go ahead and ignore that I will however store this in a variable of type game object and we can call this something like line tio for game object then we can use this game object to get the line script sitting on the object so we'll go up here and create a line and we'll call this something like active line then down here we can set active line equal to line go guards get component of type line and that's all we need to do so if we now head into unity we should be able to now our access our line prefab and we'll just drag that in there and not much is going to happen because we are only actually creating the line and setting our active line equal to it but we're not setting any points yet so if we hit play and we start drawing here you can see that we spawn in the line and we keep doing that every time you click but you can see they aren't really following the position of our mouse so two unchanged that and let me just see here yep to change that what we do is we go in and call the functions that we just created more specifically we go in and say active line dot and then update line and what we want to feed it is our mouse position so let's go ahead and get a vector two with our mouse position and this is equal to arm input guard mouse position but remember Mouse position is in screen coordinates when pixel coordinates and we need to convert that to both coordinates we do that by saying camera main dot screen two world point and then inserting input dot mouse position there we go and then we can take our mouse position and feed it into the update line method so that should actually make sure that when we draw a line here whoops and of course we need a reference somewhere what's going on oh of course we're doing this before we actually have an active line so we're getting null reference exceptions so what we need to do is only do this if active line is not equal to no then we can go ahead and access it and change or call the update line method and also we can just put this in here as well we'll have another if statement saying if input dot get mouse button up off again zero index zero the first mouse button which is left mouse click will go in here and set active line equal to no so we'll just go ahead and make sure that this is no longer going to be cold when you release the mouse button and that should actually be most of it I think now when we clear hit play and try and draw voila it's working oh my god this is awesome and we can of course try this out if we go and select a player and change his body type to dynamic he's going to fall down and you can see him interacting with the physics here we can actually even draw on top of him and create some weird behavior here probably shouldn't do that but you can see that we can now draw anything that we would like and you can definitely very easily turn this into some kind of artistic application you can see I'm kind of doing that already it's a smiley really creepy one alright that's bad yep not the best of artists but it's actually working and all of these lines are as we can see if we go and hit play here all these lines have both line renderers with all these points but edge colliders as well as you can see represented with the green line here so that's really really nice so the next thing is of course having some kind of goodies on mechanism for our players so that he will actually be able to interact without us having to go through the editor and change the body type so we need to do is access the rigidbody and change the body type to dynamic or through script and we'll do that by add a new script and we'll call this one let's just call it player well doubleclick it to open it up in visual studio and in here we can first of all create a reference to rigidbody so we need a public rigidbody 2d and we'll call it RB then in the update method will check for input and we'll check if input dot get buttondown and the button that we want to check for is currently called jump it's the space button and it's called jump by default I'm just going to call this one something like start and then we can go and change the default value or the default name and um if we get the bun down start we want to go ahead and say our B dot body type equals rigid body type 2d dot and then dynamic cool that should actually be all of course we still need to go into the input manager and actually change it or it's not going to register and we also need to reference our rigidbody2d there so let's go and say edit project settings input under our axes will now sound find the jump and actually it's this one because this one is for the control and we don't really care about that right now and we'll change the name here to play oops so I can slow that cool so now we should be able to hit play draw oh oh start did I call it start I meant to write play here whatever start or play same thing save that and hopefully now gives us no errors oh it's so neat that it actually complains when we run the game and not only when it's used that's it's amazing I would have been a start on that for way too long so we can draw a line hit space and boom our character is standing on the line okay I think it's boring to to get him moving a bit more what we need to do is change the physics map so currently by default on any kind of physics object in unity will the light just flashed on the arm friction is going to be turned up fairly high and we don't want this for this game of course because on snow and ice the friction is of course low which is what enables you to write fast with your sled that's why we go split writing in the winter and not on grass so let's go in here in the project panel that's right click and hit create and then select the physics material 2d make sure it's 2 T and we'll make this the line phys map and we'll set the friction to zero you can add a bit of bounciness and you can definitely play around with this so you can create separate lines with separate physics materials some with more friction some with bouncing X let's I mean endless possibilities you can create trampolines and have them fly around but we'll have a look at that in second but for now we'll just go under our line here and we'll take the lines this Matt and drag that under the physics material on the edge Collider now when we hit play we should already see that all player actually slides and that's a lot more exciting cool and let me just show you what that looks like if we change the bounciness on this we can change it to something like seven let's see what that looks like wait I mean this is not really playable but it's it's a lot of fun so you can see how you can play around with this some reason that wasn't registering but that's just probably because I drew on some of it so I'll just let the bounciness back to zero and the final thing that I did in the demo I mean we're pretty much done with what I originally set out to do was add kind of a force surface platform surface affected to the thing component and the cool thing about this component is that it will kind of drive your player forward because right now if we go ahead and make a arm a flat line here our player is just going to fall down and not much is going to happen he is going to move a little bit probably but then comes install and that's not really exciting of course you want some lines to be like that but the original game also has these red lines which boost the player on and that's what we can do really easily so let's select our line here and let's let's actually create multiple versions of the line we'll have this one be line on the score normal we'll have this one be line on the score bouncy and I'm just going to go in here and duplicate the line v mat and make this the line system an underscore bouncy not bounce bounce G and bump up the bouncing is to something like 0.7 and have this one be the standard or normal and this way we can go into a line bouncy here and select the bouncy one now we can also go and duplicate this one more time I'm just going to duplicate the normal and have this one be our first cone and on our boost here we'll go ahead and add a new component and we can go under physics 2d and you can see all of the fun stuff that you can do with this you can add area vectors and all this stuff I'm just going to go ahead and add the surface effect of 2d I'm just going to set this to everything and also make sure that on the edge Collider you click used by effector this will kind of link these two components together then on the force we can add something like maybe 8 on the speed and we'll leave the speed variation and for scale as is now also some of the options down here to play around with so if we now go under our line creator and change a line prefab to boost we should be able to use this line so drawn here you can see just how much quicker this guy will ride along we can even write directly up speed health so just kind of makes it more fun if you're able to do that and it actually whoa okay so that's an arrow that you might run into in order to fix that let's select our player and let's make sure to go under dynamic and check off our continuous instead of the screen that's going to help you a little bit that means that when that we shouldn't get those kind of passing through collided problems you can see it's a lot more accurate now good thing that we noticed that I'd completely forgotten to do that so we now actually have all of the elements that was in the original game even a bouncy one we can also go ahead and add a separate line here called passed through pass through and all we could do for this one is simply disable the edge Collider and this just means that whenever we are let's take our line creator whenever we draw with this one it's going to have no effect whatsoever so you can see we can draw a bunch of lines here we can then switch out with the normal one here we can then switch out with the bouncy one for for this one and then we can switch out with the boost for the last one and you should now see that when we play it we pass through those this one is normal this one bounces and this one kind of boosters upwards so we already have a lot of stuff to play around with and all you need to do is insert a bit of code here to switch between them preferably some UI to do it as well so you don't have to remember a lot of shortcuts it's really really easy to do if you don't know how to hook up a UI with um standard gameplay functions you can always check out my crash course on the unity 4.3 GUI I believe that's what it was called I have a crash course on the unity GUI and how you can link up buttons with functions so that's probably the next natural step here you could also go ahead and program something for the camera that would allow you to follow the position of your player as soon as you are unleashing and also have a script that allows you to move around the camera when dragging or something like that maybe using the arrow keys would make it a lot better so that we can create much larger levels and if you want to go completely nuts you could even or create um flags for checkpoints or end in screens or whatever a way to restart the level would be really nice and maybe even a way to save and load levels but that's a completely other thing that would be something like storing and all of the different lines and all their points and then inserting them again at a later point it's a bit more complicated but it's a challenge that that I think a lot of you is are good enough to want to kind of take on so yeah I hope you enjoyed the tutorial part of this livestream I think will transition over to the Q&A part as at least as if everyone is cool with it yeah just looking in the chat here to see if everything's good it is cool so yeah I think we'll wrap up the tutorial pretty pretty quick one today but I think that's alright and we'll just get going with the Q&A just leaves us more time to keep that so let me switch over to my other layout here there we go hello guys I'm on the big screen and you guys lie in here that's wrong so ask away with anything that you would like I am here to answer your questions umm this game would be cool with multiplayer yeah that that could be really fun actually okay kind of an kind of a coop experience where you have to complete different things with one guy drawing and the other guy moving around that could actually be really really fun I think you could hook that up pretty easily using the Unity networking system so if one of you guys make that definitely posted on the forums and I would I would love to see it that could be really fun um let's see here can you add one video to how to make a quiz game which will teach us how to save unanswered questions slash list for later use arm I'm probably not going to be adding another video on the course because it's pretty much wrapped up in my opinion but it should be pretty easy to do you should look into player press and if you want some more sophisticated saving and loading you should look into some kind of data saving system like XML JSON something like that but just begin with player press it's the easiest and fastest to get running let's see any marketing tips especially about getting youtubers and streamers to feature your game yeah see that's the that's a difficult one when I originally created a game before before YouTube or anything like that my strategy was to do YouTube I mean this this channel was created with the sole purpose of of kind of being a way of me to create an audience to direct towards one of my games and it ended up being its standalone thing but it's definitely a kind of hard hard thing to do because marketing quickly requires the budget I think the first thing that you can probably do is design your game with our youtubers and streamers in mind make it attractive for them to play make it something that's very easy to pick up and maybe something that has a fun twist to it I mean Daniel SMD is a good example of a guy who's really really good at that and who's also done a lot of collaborative work with different youtubers who could then feature him when he released his games I believe he he made what the box I believe that was the name of the game what the Box am I correct here yeah and that's been a huge success for him as far as I can tell and it's been played a lot on YouTube so if you want to kind of see how to do it right check out what the box why'd you disable image upload on your forum because I'm afraid for my servers that's actually is a symbol answer and I have some issues with it arm when testing out you can see a friend is in the screen I was dancing or asking a lot of stupid questions so I'll kill you and also you will be banned so when you're putting out the next video for the running game tutorial I'm not sure what tutorial you're talking about we run again I fit the platform in one how I created an immune system run a game I don't I'm not sure have to specify I'm sorry yes he even people in the chat here know what the box so really really well done what game would I like to recreate next I have no idea I actually had a hard time coming up with this one today but when I did that just had so much fun so I had to do it but yeah let me know if you have some good ideas of what you want to see in a live stream of course make it something that could realistically be done within like an hour's time frame but yeah I'm very open to suggestions do you have any tips for new unity uses when it comes to practicing genetic features and scripting in csharp yeah I might have a few tips um first one is use the toriel's and don't be afraid to copy code that's probably the first thing if you can just get something working then that's amazing no matter how much of it you've copied no matter how little originality is in your original idea doesn't matter just try and get something working I promise you it's going to be harder than you think and then you're going to learn so much trying to do it and that that's the most important thing try and set realistic goals don't start with I'm going to make the next call duty start with something smaller like I'm going to make something where when I click the screen the box will turn red and you learn a lot of stuff by doing that you learn about materials renderers properties you learn about input there's a lot of stuff in that and variables and references and functions and all that stuff so start small and yes definitely just use as many resources as possible if it's available to you why not use it so yeah you can always learn the hard way at a later point and also copying people's code is amazing you have to read it and kind of adjust it to your own game and maybe even experiment with it in order to get it to do something a bit different and that's a perfect learning process when you don't feel totally familiar with the syntax or don't know the API and so you have to sit with the scripting reference for a long time what I did um a temporary Niagara could be fun um what's my favorite our unity feature that's a really good question I don't think with unity it comes down to one feature because I don't think that unity necessarily is leading in any kind of particular subject I mean graphics wise they're engines that are prettier and more advanced than unity programming wise and order what in terms of what you can do with performance that are there are custom engines that are quickly there are engines that can do more impressive specific stuff and stuff like that and unity only recently did stuff like a really move into version control and collaboration and unity cloud services is pretty impressive I must give them that but I don't think it's with unity that it's one particular thing I think my favorite unity feature is the first of all how quick I can work in unity and also just the easy of use it it's just so quick to get something working in unity and that's because of the way that they've designed the editor and some of the choices they've made when it comes to scripting and and that whole component system it's just it's awesome so yeah that's probably the best the best part will I ever do a big and scary project like rule 18 does I think recently I've enjoyed a lot to do very small isolated projects and if I'm working on a series it's going to be a small one and the reason why is I think big scary projects often get very hard to maintain and most importantly you lose 95% of your audience after the first 10 videos and that's not something that I necessarily want to do because I feel like a lot of the stuff that I explained later on in the videos it's not because it's too hard for the other 95% to understand it's just that there's so much stuff in such a series when you create a big game that is not relevant to each and every person that is only specific to the game and it's not that it's hard or that it's particularly good to learn it's just something that you have to go through and that's not really something I want to focus on I've done on courses that are really long that's me teaches you how to create a game from scratch and then to completion pretty much and exporting make a game isn't a good example of that the 2d platformer course while maybe being ended a bit abruptly shows a lot of the game design process so I would like to focus on more smaller standalone subjects and I can see my black screen there but but then again I'll never say never I mean it's also there's also a lot of fun stuff about working on the logic project especially if I had the ability to to include you guys more as cool a team did so maybe fairly giving the components that are underused by other developers oh that's a good question that are underused by all the developers ah I don't know about that one I feel like unity really excels at their 2d physics stuff it's been so easy I mean I just found the the surface effector here a lot of this spring and buoyancy and all that physics stuff it's just so handy to have at your fingertips other than that I don't know favorite component the rigidbody just so much fun underused component don't have a good answer sorry do you have any videos on Perlin noise world generation if not is that something you'd like to do I'd love to do something with particular world generation especially using Perlin noise because it's available through the unity math deaf library by default and so be pretty relevant to just pick that up create a procedural terrain maybe even a procedural mesh if we don't want to use the default terrain system because that drives me crazy every time I look at it that could be really fun there are really good tutorials on that especially a written tutorial that I saw at one point but still yeah if it can be done enough one to two videos I would love to pick it up but it is for your advanced users and might be too no I would love to do it yeah when I get time let's see how can make it tutorial can you ever make a tutorial on how to make it to the platform or if I'm going to make a new video I'll probably not publish a new video on that for a long time I don't know if I'll ever publish a new video in that particular series I feel like I covered everything that I wanted to cover in that particular series however I do want to do more 2 e videos and I do want to create more there could be relevant for this series I would just grab it up and a standalone thing so I don't think I will necessarily continue the course on with another video let's see what game genre is the easiest to work on you guys are asking the hardest questions that's a very general general generic question and I'm having a hard time to say only a single genre I mean gameplay wise it's often easiest to get something rkd up and running pretty quick and that's also been the theme of these videos I mean something with simple movement something where the core gameplay risks on very very simple mechanics might be something physics based just often the easiest thing to get up and running because physics just so quickly feels fun if you give a bit of control over some kind of physics object it gets it gets it gets fun really quickly but some harder stuff is the opposite where where your content creation is so important and you have to create a lot of levels and items and objects and characters and textures and more you have to do a lot of coding that only applies to certain products parts of your game stuff like RPG especially multiple and especially its massive but also stuff like RTS games is very very programming intensive so I would say easiest is probably something in the arcade genre but it's a generalization that's that's just how it is how do I get good inspirations for new game ideas that's a good question I actually do that by playing old games I feel like I'm not the best when it comes to game ideas often I'll rip off the game and kind of do a twist and I'll call it my own thing but I think that's how pretty much the entire game development industry works it's very rare to see a completely unique gameplay element that's never been done before and frankly you can never guarantee that your game on idea is unique of course if you're going to claim that it's an unique idea you need to do a lot of research but I never do that I just make something and if it's fun it's fun I mean the biggest games ever have all been rig offs of some games that have done the same thing before them but in a slightly different way or with less cute graphics or smaller marketing budget example Angry Birds probably one of the biggest mobile games ever and it's just the same thing as a million other Miniclip games before it so yeah how it is but I would say playing playing games is a good source of inspiration sometimes I'll just browse mini games looking for something that feels fun to do and maybe gives me some kind of inspiration let's see oh the okay we're asking for the best for the how to make a video game series story of course that's kind of in this Runner I see it um yeah I mean new video out probably Sunday I think I'll try to upload a video for that series once a week and then normally that Sunday and then Wednesday I try or Wednesday sorry someone pointed out that I pronounced it wrong I say Wednesday now yeah I'll upload that either Wednesday or Sunday and then the other day I would like to do a standalone video each week so you can be pretty sure to see asking at least one video a week in that series come worry about it it's a fun series by the way I don't think we'll go on much longer because I've pretty much curd covered all the essential things that I wanted to have in this series and again I don't want to create a very long one but we'll probably land around 10 videos or something like that what would you say is the best software for pixel 2d design it has to be free oh if it has to be free I don't know is good for pretty much anything good piece of software and it's free I use Photoshop so that's not free there are a lot of online tools if you just want to do easy pixels all right just search for pixel art all online and there are a bunch of whip in web services that help you do that you could use one of those I even created an editor extension for unity at some point that that allows you to create pixel art it's called pixel art toolkit it's available on the asset store for free it's not been maintained for a long time so I have no idea if it still works um but yeah the Chad is saying Pisco check out Pisco what is the weirdest game I have made I ever made I've made some weird games with friends it's always really fun to put your friends in games recently um we had a day here where we just thought let's make something together and most of my friends are not game developments of developers actually pretty much none of them are like real life friends um but still they think it's really fun to participate and we try and try and make something together we're basically put them in front of the green screen than do really ridiculous thing in sub time motion put them into the game and they could be the main characters of a platformer it was about my friend who lost the guitar and he wanted to find it and we had him do some voice acting as well really silly my other friend was the evil villain gave him ain't kind of bad like wings and had him case around yeah stupid things that's probably the answer probably not but it's the one that I can remember yeah I'm from I'm from Denmark when what did you study I did not go to university I fairly recently about a year ago finished up not a year ago little under a year ago finished up give nation which is pretty much like high school and I went to our high if you know it send the it's pretty central to the city and thanks for all the compliments guys you guys Rock um can I please make a quick tutorial with the crossword or scramble playing system maybe could be fun to do I've never played many of those games myself I don't really enjoy them too much mostly because I really really suck at quiz games I know I've made a quiz game tutorial but it's ridiculous how bad I am um but yeah I might consider it do slash will you do a Ludum little diary live streams so I haven't actually done a lot of diary live stream and that's for a few reasons the first one is I'm not a very experienced large streamer and so I get really exhausted when wind livestreaming I can pretty much only livestream like one and a half hour and I am tired of course it's doing a lot of diary livestream it's a different thing you don't have to interact this much with the camera and such because yeah you would have no time to do coding but I actively idea of streaming for such a long time it messes me up um yeah but again maybe some time right now I'm just enjoying doing a lot and rerecording some stuff where I want to and mixing it up into a standalone video that's normally what I do and you can check those out if you want you can just search for Ludum dare you on my youtube channel and there are some pretty tightly edited videos showing how I created my games please stop spamming guys please do a draw my life that's a really really good idea I don't know why I haven't done those yet probably because of my drawing skills oh no you guys saw them before I should do a draw my life where only draw in design writer replica which is made no promises but yeah a drama life could actually be really really fun I would love to do that can you make a tutorial and XML serialization perhaps or JSON something along those lines I would love to do something with saving and loading I think it's time I bring up my notes here to run write down some of these ideas because there's no way I'm going to remember all of them if I don't do this so let me just give me one second so saving loading XML JSON and of course maybe just unities to play a press will see and drama like cool will you ever make a small RPG game tutorial maybe maybe that's sometimes if you decide to make a new tutorial series can you make an RTS that's a very very big game to make so I don't think I'll be making an entire RTS might do points of it might do unit control or you can kind of control those guys around and have them spend different formations that could be pretty fun maybe do something with camera penny there are a lot of lot of possibilities you can hire an artist for drama life all that's cheating no don't want to do that can I do a tutorial on adding multiplayer to things fairly generic subject it really depends on the game what you need to do but maybe let's see I love RPG games who would be awesome to see tutorial on it yeah RPG games are really really fun to work on they are just so huge and they cry so much code Oh maybe part of it again we can maybe break it up into smaller segments I'll think of it think about it umm yes this is the end we went through the entire tutorial part and this is the Q&A and I think we'll also wrap this out fairly soon so final questions guys um I had a lot of fun I mean I always love doing these live streams you guys are just awesome to UM to hang around with and yeah so what's my favorite game Jesus with the hard question can you guys ask something because require a lot of thought I should prepare questions in advance my favorite game probably the game that I spend the most time playing its World of Warcraft and I have a certain love for the placing style we are then the characters everything is just fun so if I have to pick a single one it would probably be that then again counterstrike is really getting really fun played that way too much ah do you really have to choose will you keep this video boss or upload to youtube for us um it will be available just after we are finished as Avadh on Twitch but it they take it down after two weeks so make sure to also upload it to YouTube tomorrow afternoon don't worry about it you will have it as long as you want umm what class did I have in whoa and what's the forecast that is I played a lot of different classes tell it in ah they all gone hunterwarrior warlock but had pretty much all of them in Maxwell at some point again I played way too much guys way too much I don't play too much anymore one once in a while I pick it up played recently with a friend but that's always fun but I can't stand playing it alone I have to play friends um let's see train simulation would be great yeah maybe so Turo some specific components and some ideas on what to do with them yeah example line renderer can be used to draw trails to check and explain the variables of the component that could be a pretty fun thing to do actually kind of base an entire series off a component yeah I'll consider that I'll write it down video based on component I drew no 3d modeling if yes please make it tutorial I know a little bit of 3d modeling I'm very I'm a really really bad artist so what I can do with it it's very limited but I know many of the tools and I know my way around pointer and my hand some of the 3d modeling software that you probably don't know um so I know the whole slang I know the ways that things are done I'm just really really bad you think so I might be able to do with tutorials at blend at some point a tutorial on Blender at some point but it's not going to be right now I'm gonna write that down here small slender tutorial and that's going to have to be a small series a 3d racing game I would love to do that as well actually a cool guy called Theo is currently working on a realistic car for dev assets and when that gets done I will probably have a look at creating something with that that could be really fun it looks amazing currently the renders are beautiful he's still working on it but it's going to be really good also I haven't mentioned that at all if you guys like this livestream the reason why we are able to good is because of the patreon supporters patreon is a way for you to donate a monthly amount of your choosing and it's castable at any time and it's really awesome it what allows me to do this and if you want to support me and the videos and the live streams you can go to patreon.com/scishow she lies I'm it's hard for me to get in contact with all of you guys but I'm I write a lot with the patreon supporter so if you want to get kind of come friends or something it's a good place to reach me so patron comm / gratis and thanks to the people who are already supporting you guys Rock and also if you want to get cool free 3d models you can go to dev assets calm its play what you want you can choose any price whatsoever you can even download them for free and there's a desert environment that looks awesome that we just released I'm actually just going to go ahead and switch my screen over here so you can so you can see it here whoops there we go let's hear so if you go to dev access calm you can see here there is the new FPS environment and it looks just amazing it's created by a guy called Sam trust awesome guy and here's the video for it so you can get an idea of how that looks everything is just rendered in unity it's ready to use out of the box it comes with an example scene like over 30 or 40 models all PP are really high quality and it's yeah it's just awesome they're also modern weapons it wasted props pack and a variety of all these stuff so you can also check out the 2d mega pack which I created which seems to be very popular so has stuff like platformers topdown shooters tower defense gold miner stuff all kinds of sprites check it out so yeah services comm just wanted to give that I mentioned and yeah okay so I think that is it for now can we create 2d asset for deficits if you want to create some ass you can write to apply add brackish comm apply at brackish calm it's the email address I definitely want to bring some more 2d stuff on that since it seems to be pretty popular so currently it's almost only 3d stuff cool thank you so much guys I'm going to wrap up the stream now I had so much fun you guys Rock and yeah see you in the next video so thank you so much bye bye everyone thanks of the awesome people who donated in February and a special thanks to Derek huge jerk face we'll never find James Callaghan and Jason Nintendo if you want to become a picture in yourself you can do so a picture that comes that's brekkie thanks a lot guys
