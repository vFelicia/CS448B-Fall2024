With timestamps:

00:00 - everyone and welcome to this video ooh
00:02 - well this is new anyway something that I
00:05 - personally really think is fun to do is
00:07 - top-down shooting it's actually quite
00:09 - different from regular top-down movement
00:11 - like we showed how to do in a recent
00:12 - video because the player always needs to
00:14 - point towards the mouse so in this video
00:16 - we'll set up a top-down player complete
00:18 - with movement aiming and shooting but
00:21 - first this video is sponsored by Jason
00:22 - Wyman if you haven't already heard about
00:24 - him he's the creator of the amazing
00:25 - unity 3d master class which takes you
00:28 - all the way from the very fundamentals
00:29 - of game dev to using unity on a
00:31 - professional level it will teach you the
00:33 - principles of solid coat architecture
00:34 - and how to build a variety of game types
00:36 - what's so cool about this course is that
00:38 - you get to work alongside other students
00:41 - and get live one-on-one help from Jason
00:43 - himself he also has an amazing VR course
00:45 - which will teach you how to work with VR
00:47 - and even make a game and then you will
00:49 - have made multiple finished games and
00:51 - even have the opportunity to customize
00:53 - and show off your unique work to the
00:54 - class sign up now and the first 50
00:56 - people will get a free t-shirt from line
00:58 - of code as well as a big discount and
01:00 - other bonuses on both courses simply
01:03 - click the link in the description to get
01:04 - started also I'm really excited to
01:06 - announce that we will be attending unite
01:08 - Copenhagen later this month if you've
01:10 - never been to unite it's a huge game
01:12 - developer conference hosted by unity and
01:14 - I hear this one is going to be
01:16 - particularly big of course it's in
01:17 - Copenhagen which is also our home city
01:20 - and the event will be taking place from
01:21 - the 23rd to the 26th of September
01:24 - tickets up for grabs now and since we
01:26 - are also going we talked to unity and
01:28 - they agreed to give everyone a 20%
01:30 - discount simply click the link in
01:32 - description and use this coupon code
01:33 - note that this doesn't work for training
01:35 - day passes but I really hope to see a
01:37 - lot of you there alright with that said
01:39 - let's get shooting so as you can see
01:43 - I've set up a quick exam scene here
01:45 - these rights that I'm using for the
01:46 - environment is from the tiny RPG forest
01:49 - pack and for the player I'm going to be
01:51 - using a soldier from the armored
01:52 - soldiers 2d pack that links in the
01:54 - description for both if you want to use
01:56 - them and they're of course 100% free so
01:59 - from the armored soldiers pack I've gone
02:00 - ahead and taking this sprite right here
02:03 - from the PSD file it's just a simple red
02:06 - soldier sprite you can use any sprite
02:08 - that you'd like I'm just going to go
02:09 - ahead and set the order in layer 210
02:11 - here to make sure that he appears on top
02:13 - of it
02:13 - thing else and are we ready to start
02:15 - setting up our player so the first thing
02:17 - that he needs is a rigidbody I'm gonna
02:19 - hit add component and search for a rigid
02:21 - body 2d I'm gonna set the gravity scale
02:23 - to zero to make sure that he doesn't
02:25 - fall down and I'm also going to freeze
02:27 - his rotation on the Z this is not
02:30 - because we don't want him to rotate we
02:32 - definitely want him to do that but we
02:34 - want to be able to control that rotation
02:35 - ourselves this way we can make sure that
02:37 - he always points toward the mouse and
02:39 - that he won't go of course if he
02:41 - collides with something and with that we
02:43 - can add our player movement script the
02:45 - play movement script is of course going
02:47 - to be responsible for moving around our
02:49 - player but it's also going to take care
02:51 - of aiming so let's go ahead and hit add
02:53 - component here let's write player
02:55 - movement let's say create an ad let's
02:58 - double click to open it up in visual
03:00 - studio so first of all we can go ahead
03:02 - and delete the start method here and we
03:04 - of course going to need a few variables
03:06 - the first of which is a float to control
03:09 - our movement speed let's call it move
03:11 - speed and set it equal to five by
03:13 - default we also need a reference to our
03:16 - rigidbody component because this is the
03:18 - one that's going to be moving around our
03:19 - player so let's create a public
03:21 - rigidbody 2d and let's call it RB now of
03:25 - course whenever we're doing movement in
03:27 - unity we want to split it up into two
03:29 - functions we want to use our update
03:31 - function for getting the input for our
03:34 - movement so this is where we will
03:35 - trigger our movement and then we'll use
03:37 - a void fixed update function for
03:39 - actually moving our player based on this
03:41 - input so let's start by gathering some
03:43 - input in our update function here we're
03:45 - going to be using input get access raw
03:48 - and first of all we want the horizontal
03:51 - axis and we of course want to store this
03:53 - in a variable so that we can access it
03:55 - inside of our fixed update let's go
03:57 - ahead and create a vector - let's call
04:00 - it movement and then inside of our
04:02 - update we can set movement on our x
04:04 - equal to input that get access raw
04:06 - horizontal we then do the same thing for
04:09 - our Y so movement at y equals input that
04:12 - get access raw and this time we'll of
04:15 - course use vertical so we're now
04:17 - gathering our input on the X and the y
04:19 - and we can then use that to actually
04:21 - move around our player inside of the
04:23 - fixedupdate so he will write RB to
04:26 - access the
04:27 - body will use a function called move
04:29 - position and this will simply move our
04:32 - object to the position that we input in
04:35 - our case we want to move it to our
04:36 - current position so our bdub position
04:38 - plus our movement vector and we can then
04:41 - multiply this with our move speed to be
04:44 - able to control the speed of this
04:45 - movement as well as time that fixed
04:47 - Delta time in order to make sure that
04:49 - the speed of a movement will not depend
04:51 - on how many times a fixed update is
04:53 - called so this should give us a nice
04:55 - smooth uniform movement in fact if we
04:58 - just save this we can jump into unity
05:00 - select our soldier drag in our rigidbody
05:03 - 2d component to the RB slot and then hit
05:06 - play and as you can see I can now move
05:08 - around the player using the WASD keys or
05:12 - the arrow keys really cool so now that
05:15 - our movement is in place we can start to
05:17 - look at aiming and the idea of this is
05:20 - exactly the same we find some input
05:22 - inside of our update method and we aim
05:25 - inside of the fixed update so first of
05:27 - all to get some input will be using
05:29 - input dot Mouse position and this is
05:32 - simply the current position of our mouse
05:34 - in pixel coordinates and this is exactly
05:36 - what we want
05:38 - however our game doesn't exist in pixel
05:40 - coordinates
05:41 - it exists in in-game units so we need to
05:44 - convert this position from a screen
05:46 - point to a world point and we do this
05:48 - using a simple function on our camera of
05:51 - course that means we need a reference to
05:53 - our camera so that's going here and
05:54 - create a public camera and let's just
05:57 - call it cat we can then access this
06:00 - camera by going cab dot and then use the
06:03 - function called screen to world point so
06:06 - this will convert our mouse position
06:07 - from pixel coordinates to world units
06:10 - there we go and we then store this in
06:12 - another variable so let's create another
06:14 - vector - let's call it Mouse position or
06:17 - just Mouse pause for short and it said
06:19 - Mouse pause equal to our cam that screen
06:23 - to world point where we input our mouse
06:25 - position so now that we know exactly
06:28 - where our mouse is all we need to do is
06:30 - rotate our plate to face that point and
06:33 - we do this in two steps so the first
06:37 - thing that we need to do is get the
06:38 - direction to our mouse position from
06:41 - where we are currently standing to do
06:43 - this we simply subtract the two vectors
06:45 - so we'll create a vector tool this is
06:47 - going to be the direction that we want
06:49 - to look in and it's going to simply be
06:51 - equal to our mouse position minus our
06:54 - current position if you're never dealt
06:56 - with vector math before this might be
06:58 - completely new to you but if you take
07:00 - two vectors and subtract them you're
07:02 - going to get a vector that points from
07:04 - one to the other
07:05 - so in this case if we have our player
07:08 - position right here and we have our
07:09 - mouse position up here we're simply
07:12 - going to subtract the two vectors and
07:14 - get a victory the points from a player
07:15 - to a mouse position however in order to
07:18 - actually rotate our player we don't just
07:20 - need a direction instead we need an
07:23 - angle in other words we need to know
07:25 - what to set or the rotation of our
07:27 - player to in order to point in that
07:29 - direction to do this we use a function
07:31 - called a tan 2 so we'll create a float
07:35 - call it angle and this is the z-rotation
07:38 - and we'll set it equal to math F dot add
07:41 - 10 to and here we're going to input a
07:44 - few things so what is at 10 - well at n
07:48 - 2 is a function it's a mathematical
07:50 - function that returns the angle between
07:52 - the x-axis and a 2d vector starting at 0
07:55 - and terminating at X comma Y so that
07:59 - might sound really complicated but in
08:01 - reality it's actually fairly graphically
08:03 - simple so here's a graph explaining at
08:05 - 10 - if we imagine our player is
08:08 - standing at the center here and we
08:10 - imagine that this black dot here is our
08:12 - mouse position at this time well then we
08:15 - can simply use the attend to function
08:17 - where we input the x and y position of
08:19 - our mouse and it's then going to find
08:21 - the angle from our x axis to this
08:24 - directional vector and that's exactly
08:25 - what we need because we already have
08:27 - this directional vector here pointing
08:29 - from our player to the mouse it's what
08:31 - we created just here so we're simply
08:33 - going to take our x and y of a look to
08:36 - your vector and this is a tiny weird
08:38 - quirk with the attend to function is
08:40 - that it takes in the Y first and then
08:43 - the X so we're going to put in look dude
08:46 - y and then look dear dot X that's all we
08:51 - need of course attend to returns the
08:53 - angle in
08:53 - radians so we need to change that to
08:56 - degrees and so we'll multiply with math
08:58 - if rad to degree and this is simply a
09:03 - constant it's 57 point two nine five
09:06 - seven eight you can see it here and it's
09:08 - just a conversion from radians to
09:10 - degrees it's it's that simple and
09:13 - finally I found by testing this that in
09:15 - order to get my plate to point in the
09:16 - right direction I need to offset this
09:19 - with ninety degrees so if your player is
09:22 - actually following the mouse but always
09:24 - pointing at a ninety degree angle then
09:26 - you can always subtract or add 90
09:28 - degrees to suit your needs here and
09:30 - finally we can apply this to our players
09:32 - so we'll simply go our P dot rotation
09:34 - equals the angle that we just calculated
09:37 - so if we now save that and go into unity
09:39 - and here we need to reference our camera
09:42 - some sim you're going to drag in our
09:43 - main cam here and let's then hit play as
09:46 - you can see our player is now looking in
09:49 - the direction of my mouse at all times
09:51 - really really cool and we can of course
09:54 - move him around at the same time awesome
09:57 - so at this point we are moving around
09:59 - and we are aiming and so we are ready to
10:01 - start shooting some stuff and the first
10:04 - thing that we're going to do here is add
10:05 - a fire point this is just an empty
10:08 - object that we'll specify from where we
10:10 - want to instantiate our bullets so in my
10:12 - case for the soldier here I'm gonna
10:14 - right click hit create empty and I'm
10:16 - gonna press W to switch to the move tool
10:18 - here and I'm simply going to take this
10:21 - object here and move it to the end of
10:23 - the soldiers barrel you can move this to
10:26 - anywhere you want your bullet to fire
10:28 - from I'm simply going to call this the
10:30 - fire point and that's pretty much it for
10:32 - that we of course also need to create a
10:35 - bullet now I've taken another sprite
10:37 - from the armored soldiers pack you can
10:39 - of course use any sprite that you'd like
10:40 - I'm simply going to click and drag this
10:42 - in and here is what I'm going to be
10:45 - using as a bullet of course in order to
10:48 - make this into an actual bullet we need
10:50 - to give it a rigidbody 2d again we'll
10:53 - set the gravity scale to zero and we'll
10:55 - just leave all the other properties as
10:57 - is I'm also going to add a Collider to
11:00 - this bullet so that we can lady register
11:01 - whenever it hits something I'm just
11:03 - going to use a symbol box Collider 2d
11:06 - I'm gonna hit edit Collider here and
11:08 - just place it around the bullet so now
11:12 - that we've set up our bullet we can go
11:13 - ahead and drag it into our project panel
11:15 - and this is going to make a prefab out
11:18 - of it
11:18 - so then we can remove it from our scene
11:20 - and we then create a script that is
11:22 - going to spawn in this bullet whenever
11:24 - we need it so on our soldier here that's
11:26 - go ahead and create another script now
11:28 - and it's called this one shooting let's
11:31 - hit new script create an ad again I'm
11:33 - gonna delete the start method here and
11:35 - instead I'm gonna add in a few variables
11:37 - I'm gonna create a public transform and
11:40 - this is simply going to be a reference
11:42 - to our fire point object I'm also going
11:45 - to create a public game object and this
11:47 - is going to reference all pullet prefab
11:49 - that we just created and finally let's
11:52 - create a public float which is going to
11:54 - control the bullet force and let's just
11:56 - default that to something like 20 now
11:59 - inside of our update we can check
12:00 - whenever we want to fire so we'll go if
12:02 - input that get button down and the
12:06 - button that we want to check for here is
12:08 - fire one file one is one of those
12:10 - default input bindings in unity if you
12:13 - haven't changed it it's going to be
12:14 - bound to Mouse one now remember that
12:16 - unity is currently working the entire
12:18 - input system I cannot imagine this not
12:20 - working for quite a while but if it is
12:23 - giving you issues definitely check out
12:25 - our dedicated video on the new input
12:27 - system you should be able to just slap
12:29 - that right into this script alright so
12:31 - whenever we press this button we want to
12:33 - go ahead and shoot so let's create a
12:34 - dedicated function for that let's just
12:37 - call it shoot and let's go ahead and
12:39 - make it down here so we'll write avoid
12:41 - shoot problem close some parentheses and
12:44 - curly brackets and this function is
12:46 - actually going to be fairly simple we
12:49 - want to do two things in here first of
12:51 - all we want to create a bullet at our
12:53 - fire point and second of all we want to
12:55 - apply a lot of force to this bullet to
12:57 - make it fly out of the gun so let's
12:59 - start by creating the bullet we do this
13:01 - using the instantiate function here we
13:04 - feed it the prefab that we want to
13:05 - create so we want to make a bullet
13:07 - prefab we also give it a position so we
13:11 - want to spawn it at fire point position
13:13 - as well as a rotation we want to use
13:16 - fire point rotation there we go
13:19 - that creates our
13:20 - however we also need to be able to
13:22 - reference this bullet in order to
13:24 - modified afterwards in our case we want
13:26 - to add a force to it so to retain a
13:29 - connection to the bullet we're going to
13:30 - write game object fold it and set it
13:33 - equal to the instantiated bullet this
13:36 - way we can now use this bullet variable
13:38 - so in order to access the rigidbody 2d
13:40 - we'll use bullet dot getcomponent
13:44 - rigidbody 2d there we go
13:48 - and we then store this in another
13:50 - variable so we'll create a rigidbody 2d
13:52 - call it RB and set it equal to the rigid
13:55 - 2d of the bullet and finally we can then
13:58 - access this RB and use the function add
14:01 - force and so we can add a force in the
14:05 - direction of a fire point dot up vector
14:08 - multiplied with a bullet force and the
14:11 - force mode here force mode to D is going
14:14 - to be impulse because we want to add an
14:17 - instant force impulse to the rigidbody
14:19 - 2d so again what's happening here will
14:22 - be instantiating spawning in our bullet
14:24 - we're saying at this point we want to
14:26 - name it bullet so that we can access it
14:28 - later
14:28 - we then access this bullet and get the
14:31 - rigidbody 2d component on the bullet we
14:33 - call this component RB we use it to
14:36 - access a function on the component
14:38 - called ad force where we add a force in
14:41 - the fire pointed up vector multiplied
14:44 - with the bullet force I totally
14:46 - understand if you find this code
14:47 - confusing it is definitely a bit
14:49 - confusing just know that we're creating
14:51 - the bullet and we're making it fly at a
14:54 - high velocity and with that let's try
14:56 - and save this go into unity here we'll
14:59 - dragon off fire point also dragon a
15:01 - bullet prefab and if we now hit play and
15:04 - click our mouse we can see that a bullet
15:07 - indeed does fly out it also kind of
15:10 - collides with everything that it touches
15:12 - and it just simply stays there but we do
15:16 - definitely have bullets and we can now
15:17 - shoot all around which is really cool so
15:21 - the final thing that we need to do is of
15:23 - course make our bullet react to it
15:24 - hitting something so to do this we can
15:26 - simply go to up all the prefab and add a
15:29 - new component and here we'll create a
15:31 - pullet script let's double click it to
15:33 - open it up
15:34 - and we can remove both the update and
15:36 - the start function here because all we
15:39 - need in here is a function that triggers
15:41 - whenever we collide with something and
15:43 - unity of course has one of these by
15:45 - default it's called void on collision
15:49 - into 2d now this function also takes in
15:52 - an argument of type collision 2d and we
15:56 - can just call it well
15:58 - collision and what this is doing is
16:00 - simply gathering some information about
16:01 - what happened in this collision so in
16:04 - here we can get some information about
16:05 - what we hit so the collider that we made
16:08 - contact with we also get the relative
16:10 - velocity between the two colliding
16:12 - objects that's a bunch of information in
16:14 - here and this is of course super useful
16:16 - if you want to damage whatever you hit
16:18 - because you can access components on the
16:21 - colliding object however for now all we
16:23 - want to do is just add a cool explosion
16:25 - effect and remove our bullet so to do
16:28 - this we need a reference to a prefab
16:30 - that we can instantiate with this
16:32 - explosion so we'll create a public game
16:34 - object let's call it hid effect and I've
16:38 - actually already gone ahead and prepared
16:40 - an effect using some sprites I had from
16:42 - another asset store pack called Warped
16:45 - caves of course have a link to this in
16:47 - the description as well
16:48 - but I've simply gone ahead and created a
16:50 - short animation out of these that well
16:52 - place a tiny explosion so I'm simply
16:55 - going to go to my bullet here and just
16:58 - drag in this hit effect you can use
17:01 - anything you'd like you can also use
17:02 - particle effects if you want to and then
17:04 - inside of our script we can just
17:05 - instantiate it in the exact same way
17:07 - that we did with our bullets so let's go
17:09 - instantiate we want to instantiate the
17:12 - hit effect want to do that at the
17:14 - current position of our bullet so
17:16 - transformed up position and we really
17:19 - don't care what way this is rotated so
17:21 - we'll just use the default rotation
17:24 - which is referred to as quaternion dot
17:26 - identity yes we use this super weird
17:30 - word for just saying no rotation and of
17:33 - course we also want to remove a bullet
17:35 - afterwards so we'll call destroy game
17:38 - object and just to be good with our code
17:40 - we also want to make sure that we clean
17:42 - up all of these hid effects so we're
17:44 - simply going to create a temporary
17:46 - variable
17:47 - that is going to story reference to it
17:49 - just like we did with a bullet and then
17:51 - call the destroy function on this effect
17:54 - and just delayed by say five seconds so
17:56 - this way all hit effects are going to be
17:58 - removed after five seconds just so they
18:01 - don't lie around RC so with that let's
18:03 - hit save
18:04 - let's go back into unity and let's try
18:07 - and play and as you can see when we now
18:09 - shoot and hit something with our bullet
18:11 - it explodes and disappears really really
18:16 - really cold now of course there are a
18:17 - bunch of other stuff that you can do
18:20 - with shooting most importantly you
18:22 - probably want to add some damage in case
18:24 - you are fighting enemies and this of
18:27 - course also other ways of shooting to
18:29 - explore this is what I refer to as
18:31 - prefab shooting because we are
18:33 - instantiating a prefab or a game object
18:35 - and having it fly through our scene
18:37 - however another really common way is
18:39 - reka shooting where we simply do
18:41 - everything through code and this way we
18:44 - can have the bullet hit instantaneously
18:46 - which is really cool for stuff like
18:47 - lasers luckily we have a video dedicated
18:49 - to 2d shooting that takes a look at all
18:52 - these things
18:52 - I also recommend adding stuff like
18:54 - muscle flares to your player and just a
18:57 - bunch of other flavorful effects so I
18:59 - definitely encourage you to have fun
19:00 - with it but this should be a nice
19:02 - starting point that's pretty much it for
19:04 - this video if you enjoyed it make sure
19:05 - to subscribe so don't miss the next one
19:07 - definitely learn more about unite
19:08 - Copenhagen using the link in the
19:10 - description remember tickets do sell out
19:12 - quite fast also don't forget to check
19:14 - out Jason's courses simply click the
19:16 - link in the description to get a free
19:17 - t-shirt and get started on that thanks
19:20 - for watching and I will see you in the
19:21 - next video which is going to be on the
19:24 - community game jam
19:32 - thanks of the awesome patreon supporters
19:34 - who donated in July and a special thanks
19:36 - to infinity PPR Dennis Sullivan does the
19:38 - violence love forever Chris face Samara
19:40 - Phi David Lipka louisette Ronan Daniel T
19:43 - sonic jacob sanford consensus current
19:45 - says no Kiyosaki Gregory piers Allison
19:48 - the fierce Erasmus and cool Swedish ski
19:50 - you guys Rock

Cleaned transcript:

everyone and welcome to this video ooh well this is new anyway something that I personally really think is fun to do is topdown shooting it's actually quite different from regular topdown movement like we showed how to do in a recent video because the player always needs to point towards the mouse so in this video we'll set up a topdown player complete with movement aiming and shooting but first this video is sponsored by Jason Wyman if you haven't already heard about him he's the creator of the amazing unity 3d master class which takes you all the way from the very fundamentals of game dev to using unity on a professional level it will teach you the principles of solid coat architecture and how to build a variety of game types what's so cool about this course is that you get to work alongside other students and get live oneonone help from Jason himself he also has an amazing VR course which will teach you how to work with VR and even make a game and then you will have made multiple finished games and even have the opportunity to customize and show off your unique work to the class sign up now and the first 50 people will get a free tshirt from line of code as well as a big discount and other bonuses on both courses simply click the link in the description to get started also I'm really excited to announce that we will be attending unite Copenhagen later this month if you've never been to unite it's a huge game developer conference hosted by unity and I hear this one is going to be particularly big of course it's in Copenhagen which is also our home city and the event will be taking place from the 23rd to the 26th of September tickets up for grabs now and since we are also going we talked to unity and they agreed to give everyone a 20% discount simply click the link in description and use this coupon code note that this doesn't work for training day passes but I really hope to see a lot of you there alright with that said let's get shooting so as you can see I've set up a quick exam scene here these rights that I'm using for the environment is from the tiny RPG forest pack and for the player I'm going to be using a soldier from the armored soldiers 2d pack that links in the description for both if you want to use them and they're of course 100% free so from the armored soldiers pack I've gone ahead and taking this sprite right here from the PSD file it's just a simple red soldier sprite you can use any sprite that you'd like I'm just going to go ahead and set the order in layer 210 here to make sure that he appears on top of it thing else and are we ready to start setting up our player so the first thing that he needs is a rigidbody I'm gonna hit add component and search for a rigid body 2d I'm gonna set the gravity scale to zero to make sure that he doesn't fall down and I'm also going to freeze his rotation on the Z this is not because we don't want him to rotate we definitely want him to do that but we want to be able to control that rotation ourselves this way we can make sure that he always points toward the mouse and that he won't go of course if he collides with something and with that we can add our player movement script the play movement script is of course going to be responsible for moving around our player but it's also going to take care of aiming so let's go ahead and hit add component here let's write player movement let's say create an ad let's double click to open it up in visual studio so first of all we can go ahead and delete the start method here and we of course going to need a few variables the first of which is a float to control our movement speed let's call it move speed and set it equal to five by default we also need a reference to our rigidbody component because this is the one that's going to be moving around our player so let's create a public rigidbody 2d and let's call it RB now of course whenever we're doing movement in unity we want to split it up into two functions we want to use our update function for getting the input for our movement so this is where we will trigger our movement and then we'll use a void fixed update function for actually moving our player based on this input so let's start by gathering some input in our update function here we're going to be using input get access raw and first of all we want the horizontal axis and we of course want to store this in a variable so that we can access it inside of our fixed update let's go ahead and create a vector let's call it movement and then inside of our update we can set movement on our x equal to input that get access raw horizontal we then do the same thing for our Y so movement at y equals input that get access raw and this time we'll of course use vertical so we're now gathering our input on the X and the y and we can then use that to actually move around our player inside of the fixedupdate so he will write RB to access the body will use a function called move position and this will simply move our object to the position that we input in our case we want to move it to our current position so our bdub position plus our movement vector and we can then multiply this with our move speed to be able to control the speed of this movement as well as time that fixed Delta time in order to make sure that the speed of a movement will not depend on how many times a fixed update is called so this should give us a nice smooth uniform movement in fact if we just save this we can jump into unity select our soldier drag in our rigidbody 2d component to the RB slot and then hit play and as you can see I can now move around the player using the WASD keys or the arrow keys really cool so now that our movement is in place we can start to look at aiming and the idea of this is exactly the same we find some input inside of our update method and we aim inside of the fixed update so first of all to get some input will be using input dot Mouse position and this is simply the current position of our mouse in pixel coordinates and this is exactly what we want however our game doesn't exist in pixel coordinates it exists in ingame units so we need to convert this position from a screen point to a world point and we do this using a simple function on our camera of course that means we need a reference to our camera so that's going here and create a public camera and let's just call it cat we can then access this camera by going cab dot and then use the function called screen to world point so this will convert our mouse position from pixel coordinates to world units there we go and we then store this in another variable so let's create another vector let's call it Mouse position or just Mouse pause for short and it said Mouse pause equal to our cam that screen to world point where we input our mouse position so now that we know exactly where our mouse is all we need to do is rotate our plate to face that point and we do this in two steps so the first thing that we need to do is get the direction to our mouse position from where we are currently standing to do this we simply subtract the two vectors so we'll create a vector tool this is going to be the direction that we want to look in and it's going to simply be equal to our mouse position minus our current position if you're never dealt with vector math before this might be completely new to you but if you take two vectors and subtract them you're going to get a vector that points from one to the other so in this case if we have our player position right here and we have our mouse position up here we're simply going to subtract the two vectors and get a victory the points from a player to a mouse position however in order to actually rotate our player we don't just need a direction instead we need an angle in other words we need to know what to set or the rotation of our player to in order to point in that direction to do this we use a function called a tan 2 so we'll create a float call it angle and this is the zrotation and we'll set it equal to math F dot add 10 to and here we're going to input a few things so what is at 10 well at n 2 is a function it's a mathematical function that returns the angle between the xaxis and a 2d vector starting at 0 and terminating at X comma Y so that might sound really complicated but in reality it's actually fairly graphically simple so here's a graph explaining at 10 if we imagine our player is standing at the center here and we imagine that this black dot here is our mouse position at this time well then we can simply use the attend to function where we input the x and y position of our mouse and it's then going to find the angle from our x axis to this directional vector and that's exactly what we need because we already have this directional vector here pointing from our player to the mouse it's what we created just here so we're simply going to take our x and y of a look to your vector and this is a tiny weird quirk with the attend to function is that it takes in the Y first and then the X so we're going to put in look dude y and then look dear dot X that's all we need of course attend to returns the angle in radians so we need to change that to degrees and so we'll multiply with math if rad to degree and this is simply a constant it's 57 point two nine five seven eight you can see it here and it's just a conversion from radians to degrees it's it's that simple and finally I found by testing this that in order to get my plate to point in the right direction I need to offset this with ninety degrees so if your player is actually following the mouse but always pointing at a ninety degree angle then you can always subtract or add 90 degrees to suit your needs here and finally we can apply this to our players so we'll simply go our P dot rotation equals the angle that we just calculated so if we now save that and go into unity and here we need to reference our camera some sim you're going to drag in our main cam here and let's then hit play as you can see our player is now looking in the direction of my mouse at all times really really cool and we can of course move him around at the same time awesome so at this point we are moving around and we are aiming and so we are ready to start shooting some stuff and the first thing that we're going to do here is add a fire point this is just an empty object that we'll specify from where we want to instantiate our bullets so in my case for the soldier here I'm gonna right click hit create empty and I'm gonna press W to switch to the move tool here and I'm simply going to take this object here and move it to the end of the soldiers barrel you can move this to anywhere you want your bullet to fire from I'm simply going to call this the fire point and that's pretty much it for that we of course also need to create a bullet now I've taken another sprite from the armored soldiers pack you can of course use any sprite that you'd like I'm simply going to click and drag this in and here is what I'm going to be using as a bullet of course in order to make this into an actual bullet we need to give it a rigidbody 2d again we'll set the gravity scale to zero and we'll just leave all the other properties as is I'm also going to add a Collider to this bullet so that we can lady register whenever it hits something I'm just going to use a symbol box Collider 2d I'm gonna hit edit Collider here and just place it around the bullet so now that we've set up our bullet we can go ahead and drag it into our project panel and this is going to make a prefab out of it so then we can remove it from our scene and we then create a script that is going to spawn in this bullet whenever we need it so on our soldier here that's go ahead and create another script now and it's called this one shooting let's hit new script create an ad again I'm gonna delete the start method here and instead I'm gonna add in a few variables I'm gonna create a public transform and this is simply going to be a reference to our fire point object I'm also going to create a public game object and this is going to reference all pullet prefab that we just created and finally let's create a public float which is going to control the bullet force and let's just default that to something like 20 now inside of our update we can check whenever we want to fire so we'll go if input that get button down and the button that we want to check for here is fire one file one is one of those default input bindings in unity if you haven't changed it it's going to be bound to Mouse one now remember that unity is currently working the entire input system I cannot imagine this not working for quite a while but if it is giving you issues definitely check out our dedicated video on the new input system you should be able to just slap that right into this script alright so whenever we press this button we want to go ahead and shoot so let's create a dedicated function for that let's just call it shoot and let's go ahead and make it down here so we'll write avoid shoot problem close some parentheses and curly brackets and this function is actually going to be fairly simple we want to do two things in here first of all we want to create a bullet at our fire point and second of all we want to apply a lot of force to this bullet to make it fly out of the gun so let's start by creating the bullet we do this using the instantiate function here we feed it the prefab that we want to create so we want to make a bullet prefab we also give it a position so we want to spawn it at fire point position as well as a rotation we want to use fire point rotation there we go that creates our however we also need to be able to reference this bullet in order to modified afterwards in our case we want to add a force to it so to retain a connection to the bullet we're going to write game object fold it and set it equal to the instantiated bullet this way we can now use this bullet variable so in order to access the rigidbody 2d we'll use bullet dot getcomponent rigidbody 2d there we go and we then store this in another variable so we'll create a rigidbody 2d call it RB and set it equal to the rigid 2d of the bullet and finally we can then access this RB and use the function add force and so we can add a force in the direction of a fire point dot up vector multiplied with a bullet force and the force mode here force mode to D is going to be impulse because we want to add an instant force impulse to the rigidbody 2d so again what's happening here will be instantiating spawning in our bullet we're saying at this point we want to name it bullet so that we can access it later we then access this bullet and get the rigidbody 2d component on the bullet we call this component RB we use it to access a function on the component called ad force where we add a force in the fire pointed up vector multiplied with the bullet force I totally understand if you find this code confusing it is definitely a bit confusing just know that we're creating the bullet and we're making it fly at a high velocity and with that let's try and save this go into unity here we'll dragon off fire point also dragon a bullet prefab and if we now hit play and click our mouse we can see that a bullet indeed does fly out it also kind of collides with everything that it touches and it just simply stays there but we do definitely have bullets and we can now shoot all around which is really cool so the final thing that we need to do is of course make our bullet react to it hitting something so to do this we can simply go to up all the prefab and add a new component and here we'll create a pullet script let's double click it to open it up and we can remove both the update and the start function here because all we need in here is a function that triggers whenever we collide with something and unity of course has one of these by default it's called void on collision into 2d now this function also takes in an argument of type collision 2d and we can just call it well collision and what this is doing is simply gathering some information about what happened in this collision so in here we can get some information about what we hit so the collider that we made contact with we also get the relative velocity between the two colliding objects that's a bunch of information in here and this is of course super useful if you want to damage whatever you hit because you can access components on the colliding object however for now all we want to do is just add a cool explosion effect and remove our bullet so to do this we need a reference to a prefab that we can instantiate with this explosion so we'll create a public game object let's call it hid effect and I've actually already gone ahead and prepared an effect using some sprites I had from another asset store pack called Warped caves of course have a link to this in the description as well but I've simply gone ahead and created a short animation out of these that well place a tiny explosion so I'm simply going to go to my bullet here and just drag in this hit effect you can use anything you'd like you can also use particle effects if you want to and then inside of our script we can just instantiate it in the exact same way that we did with our bullets so let's go instantiate we want to instantiate the hit effect want to do that at the current position of our bullet so transformed up position and we really don't care what way this is rotated so we'll just use the default rotation which is referred to as quaternion dot identity yes we use this super weird word for just saying no rotation and of course we also want to remove a bullet afterwards so we'll call destroy game object and just to be good with our code we also want to make sure that we clean up all of these hid effects so we're simply going to create a temporary variable that is going to story reference to it just like we did with a bullet and then call the destroy function on this effect and just delayed by say five seconds so this way all hit effects are going to be removed after five seconds just so they don't lie around RC so with that let's hit save let's go back into unity and let's try and play and as you can see when we now shoot and hit something with our bullet it explodes and disappears really really really cold now of course there are a bunch of other stuff that you can do with shooting most importantly you probably want to add some damage in case you are fighting enemies and this of course also other ways of shooting to explore this is what I refer to as prefab shooting because we are instantiating a prefab or a game object and having it fly through our scene however another really common way is reka shooting where we simply do everything through code and this way we can have the bullet hit instantaneously which is really cool for stuff like lasers luckily we have a video dedicated to 2d shooting that takes a look at all these things I also recommend adding stuff like muscle flares to your player and just a bunch of other flavorful effects so I definitely encourage you to have fun with it but this should be a nice starting point that's pretty much it for this video if you enjoyed it make sure to subscribe so don't miss the next one definitely learn more about unite Copenhagen using the link in the description remember tickets do sell out quite fast also don't forget to check out Jason's courses simply click the link in the description to get a free tshirt and get started on that thanks for watching and I will see you in the next video which is going to be on the community game jam thanks of the awesome patreon supporters who donated in July and a special thanks to infinity PPR Dennis Sullivan does the violence love forever Chris face Samara Phi David Lipka louisette Ronan Daniel T sonic jacob sanford consensus current says no Kiyosaki Gregory piers Allison the fierce Erasmus and cool Swedish ski you guys Rock
