With timestamps:

00:00 - [Music]
00:04 - hello everyone and welcome to the 15th
00:07 - video in our create a survival game
00:09 - series done by bra keys I am the CEO of
00:11 - bra keys and today we are going to be
00:14 - taking a look at Advanced AI so
00:17 - scripting more advanced enemy
00:19 - functionality it's going to be awesome
00:22 - and it's going to be difficult um so if
00:25 - this is uh too much for you at any point
00:28 - you can always just go ahead and
00:30 - download the script from our website or
00:32 - uh simply go with the AI Syle uh version
00:36 - which is also available for download and
00:38 - which I have made an a video on earlier
00:41 - but that's it for the intro as always I
00:44 - have opened up unity and let me just
00:47 - quickly clean up from the last tutorial
00:51 - I did which was actually not uh title as
00:54 - a part of the series it was more like a
00:57 - standalone video where I showed how to
01:00 - create a gun and create some shooting
01:02 - mechanics and there we made this script
01:05 - this rast shooting so I'm just going to
01:07 - go ahead and drag that under the scripts
01:10 - and this bullet hit uh which was a
01:12 - particle with some Sparks emitting and
01:15 - I'm just going to drag that under the
01:17 - prefabs except that nothing has changed
01:21 - um if we go under the player the main
01:23 - camera the Mele you can see that there
01:25 - is now a gun object which is just just
01:28 - an empty game object with the Rea
01:31 - shooting script um so that's pretty much
01:35 - it now let's go ahead and get started so
01:38 - select the enemy which I have dragged
01:40 - over to the town so we can test uh some
01:44 - stuff with him without having to run a
01:46 - whole lot let's go ahead and disable the
01:49 - AI symbol I'll just keep it for now and
01:52 - let's hit the add component and new
01:55 - script and call this um you could do AI
01:58 - you could do Advanced AI I'm going to
02:00 - type Advanced AI so Advanced AI it's
02:05 - going to be a type JavaScript as always
02:07 - and there we go um one thing to keep in
02:10 - mind though with the script we are not
02:12 - going to be using the capsule collider
02:15 - we are going to be using some more
02:17 - advanced movement where we can apply
02:19 - gravity and some forces so that our
02:23 - enemy will actually be able to uh fall
02:26 - to the ground fall down uh different uh
02:30 - places and collide with wall walls and
02:33 - such instead of just going through them
02:36 - so we'll disable the capsule collider by
02:39 - right clicking remove
02:41 - component and hit the add component
02:44 - button go to physics and now changed it
02:47 - to the character controller um this
02:50 - gives us a whole lot more different uh
02:55 - possibilities and settings and scripting
02:58 - functionality that we can can play
03:00 - around with now let's go ahead and
03:02 - actually create the advanced AI script
03:06 - and the way I want to do this is simply
03:08 - use what we made in the last tutorial
03:10 - with the simple Ai and uh modify it a
03:14 - bit so let's go ahead and double click
03:16 - the advanced
03:19 - AI to open it up in mono develop and
03:22 - there it is and we can just go ahead in
03:25 - under the simple AI under the scripts
03:28 - folder and open that as well
03:32 - there it is and let's just go ahead for
03:34 - now and copy all of this over to our
03:37 - Advanced
03:39 - Ai and delete the prma
03:42 - strict and so now they look also very uh
03:47 - similar and uh all right let's go ahead
03:50 - and adding some stuff now first of all I
03:54 - want to create a bunch of
03:57 - variables because currently we have a
03:59 - set up so whenever our object chases
04:03 - something uh it is done in the function
04:06 - called attack I would want to change
04:09 - this name to
04:12 - Chase and so also when we called it in
04:14 - the if distance we want this to be
04:17 - changed
04:20 - Chase and we are going to change the
04:23 - name of this attack range to chase
04:27 - range and add yet another variable up
04:30 - here called Chase range which is going
04:33 - to be
04:35 - 15 and the attack range is now going to
04:39 - be a whole lot less we could try
04:41 - something like
04:44 - 1.5 because our um our melee distance is
04:49 - uh about
04:50 - 1.5 five that's what I have set it up to
04:54 - be and so um that's it for changing the
04:58 - change r range just to make it
05:01 - everything a little more clear now we
05:04 - can go ahead and add some more stuff
05:07 - let's add a um a actual attack function
05:13 - so
05:16 - function
05:20 - attack the
05:26 - parenthesis and uh so we just type that
05:29 - in there and then in a second we'll add
05:31 - some logic too but first I want to
05:34 - change how the um how the enemy actually
05:39 - behaves and moves because at the uh
05:43 - moment the enemy behaves through a
05:47 - transform position so it simply draws a
05:50 - line and moves in the direction of that
05:53 - line and that line will always Point
05:55 - towards the player um but that doesn't
06:00 - enable stuff like collision and gravity
06:03 - uh so we actually want to use the
06:05 - building function in the uh cure
06:08 - controller to take care of the
06:11 - movement so this is done by uh making
06:15 - some new variables so let's make a new
06:18 - variable and let's call this let me see
06:23 - let's call this the
06:25 - controller so just actually let's just
06:28 - call the controller
06:30 - and it's going to be a type
06:33 - character
06:37 - controller like
06:40 - that and let's also make a another
06:44 - variable called
06:46 - gravity just making some space variable
06:53 - gravity and
06:56 - uh so gravity and let's set this to a
07:00 - type float and it's going to be equal
07:04 - to by default I would say 20 is a very
07:07 - good amount um so just type
07:11 - 20 then we are going to make a private
07:15 - variable called move
07:21 - Direction
07:24 - move
07:27 - Direction and
07:29 - it's going to be a type Vector
07:33 - 3 and it's going to be equal
07:36 - to Vector
07:39 - 3
07:41 - equals uh no Vector 3 do
07:45 - [Music]
07:47 - Z so um this is simply a 3D coordinate
07:51 - and uh it's just going to be 0 0 0 and
07:56 - uh we have the gravity um it's pretty
07:59 - much
08:00 - self-explanatory and the variable
08:02 - controller is just so we can actually
08:05 - call the movement through the
08:06 - controllers look let's go ahead into
08:09 - unity and see the controller now
08:12 - appearing and what you're going to do
08:14 - here is You're simply going to grab this
08:17 - uh component and drag it under the
08:19 - character controller also let's remember
08:22 - to assign the player to a
08:24 - Target and uh these two things can
08:27 - always be done through scripting in the
08:29 - start function for example uh or if you
08:31 - have the player is spawning uh during
08:34 - the game you can have a function
08:37 - assigning the two variables using the
08:39 - game object. find and the uh get
08:44 - component so let's go ahead and uh open
08:47 - up the script
08:48 - again and uh let's now start uh
08:53 - implementing some stuff so uh under the
08:59 - Chase let me see where do we have it
09:02 - there uh under our Chase we now want to
09:05 - write some different things so first of
09:09 - all I would like the render outmaterial
09:11 - docolor to go down under the actual
09:14 - Chase function so I'll just quickly move
09:20 - that down here I just like it better
09:24 - that way
09:27 - oops and delete the
09:30 - spaces and we could go ahead and do the
09:32 - same with the uh look distance I don't
09:35 - know
09:37 - um here
09:40 - the look at we'll just move that under
09:43 - the actual look at
09:47 - function so and in the chase here it's
09:51 - this line we want to change because as
09:54 - you can see it it is
09:56 - translating it is moving in the forward
10:00 - position with a certain
10:02 - speed and we want this to be done
10:05 - through the character controller and I I
10:08 - won't explain exactly how it works but
10:11 - just know that you can create realistic
10:14 - movement this way so let's type move
10:17 - Direction equals transform.
10:23 - forward new line move
10:27 - Direction time
10:31 - equals move
10:35 - speed and new section move
10:39 - Direction actually I'll also make a
10:42 - section between the renderer and the
10:44 - move Direction stuff move Direction
10:48 - doy minus equals
10:55 - gravity times time do Delta time and if
11:00 - you uh can't remember time. Delta time
11:02 - simply um handles the uh time scaling
11:07 - and frame rate problems that you might
11:09 - have and uh right below this line we're
11:13 - going to write controller the variable
11:16 - starring the
11:17 - controller
11:22 - move in the move
11:27 - Direction time
11:31 - time time. Delta
11:37 - time all right so this pretty much takes
11:40 - care of the New Movement
11:43 - functionality let's take a look at
11:45 - what's actually happening here so first
11:48 - off we want the move direction to be
11:51 - equal to the forward movement so we want
11:54 - the direction that it should move to be
11:56 - forward then we want the move speed to
11:59 - in influence the move Direction so that
12:01 - we can tell it how fast it should move
12:05 - then we want the move direction to doy
12:08 - meaning the up and down to uh be
12:11 - influenced by the gravity
12:13 - variable and then at last we want to
12:16 - actually move the
12:18 - controller so let's go into our game and
12:21 - see if this
12:22 - works so I've opened up Unity here and
12:27 - uh let's go ahead and hit play
12:32 - and you can see the character control
12:34 - the character is now looking at us and
12:36 - then it indeed it starts
12:38 - moving once we get close enough and
12:43 - um I don't know if you can see this but
12:46 - it actually stays on the
12:48 - ground and we should also be able um to
12:54 - show that it collides with walls so if I
12:58 - drag it on into the town and hit
13:02 - play it actually
13:04 - stops on the other side of the
13:07 - wall so um that's it for making it
13:11 - collide and move more realistically now
13:13 - we have a few more things to add because
13:16 - we also want this to attack and we want
13:19 - it to rotate a bit different um or um
13:25 - maybe no we'll save that for another
13:27 - tutorial for now we just want to create
13:29 - create the attacking
13:31 - also so to do this let's create some
13:34 - functionality in the attack function and
13:37 - let's also make sure that the attack
13:39 - function is being called let's first
13:42 - make sure that it's being called so here
13:45 - under the if distance is uh is less than
13:50 - the TR Chase range then it should
13:53 - Chase I want to create a new if state
13:56 - statement right above that so if
14:04 - distance is less
14:07 - than attack
14:12 - range then we wanted to open up the
14:16 - brackets attack soal the attack
14:22 - function
14:24 - now if I just do it like this then our
14:28 - enemy
14:29 - won't actually stop whenever it's
14:32 - attacking so now if I hit
14:36 - play it will just keep on chasing me and
14:41 - uh it can Buck out in the positioning
14:43 - and push me uh which is not something we
14:46 - want even though it's trying to attack
14:49 - me so we want it to stop in a somewhat
14:52 - uh Fair uh range and then start
14:55 - attacking and if I then get out of its
14:58 - attack range we want it to start
15:00 - changing chasing again and this is done
15:03 - by making this if statement into an else
15:07 - if so this if St statement says if the
15:11 - distance is like less than attack range
15:14 - so if the enemy is able to
15:17 - attack then it should attack but then it
15:20 - should also stop chasing so if that is
15:25 - not the case else so if these
15:30 - requirements isn't met then we wanted to
15:35 - check if the distance is is under the
15:38 - chase range and then chases so if we do
15:40 - it this way and hit play even though we
15:44 - don't have any logic inside of a attack
15:46 - function once it gets inside of that
15:49 - range it stops and we can easily
15:53 - increase the range uh by going into our
15:58 - enemy uh by selecting our enemy and
16:02 - going under the advanced AI script and
16:05 - taking the attack range and bumping it
16:07 - up so let's say uh let's try out with a
16:11 - three and uh wait it maximized the wrong
16:16 - window there we go so now it should
16:19 - actually attack and there you go in the
16:21 - distance of three units it
16:24 - stops so uh let's just change that back
16:28 - to 1.
16:29 - five and uh make some attack
16:32 - functionality so go under the function
16:35 - attack and inside of this we want to do
16:39 - uh quite a few things we want to type
16:42 - the
16:43 - debug do
16:47 - log
16:49 - attack and the
16:51 - debug.log is useful for many things I
16:55 - like to use it uh for bug fixing if I am
16:59 - not sure what is being called or if it's
17:03 - just simply telling myself that I need
17:06 - to place some logic here so for now we
17:09 - won't actually be scripting the damaging
17:11 - of the player and the dying of the
17:13 - player but we will be scripting
17:15 - everything except that so we will be
17:18 - making everything that handles when the
17:21 - player should lose damage and maybe even
17:23 - how much but we won't be scripting what
17:26 - actually happens so this this could be I
17:30 - could name this
17:32 - insert attack here so that could be an
17:36 - animation or some other logic so let's
17:39 - see what actually happens here a deall
17:43 - dolog will
17:45 - be will be shown inside of the console
17:48 - window so when I hit play and the enemy
17:52 - goes near and starts attacking you can
17:54 - see a whole lot of debug. logs start
17:58 - appear appear inside of the console
18:00 - window and this is of course way too
18:02 - much uh at as is the uh the enemy is
18:09 - attacking us every frame so that's
18:12 - really not what we want we wanted to be
18:15 - attacking with a um interval of about 1
18:19 - to 2
18:20 - seconds so let's script that now this
18:25 - can be a little hard to understand but
18:27 - let's start out by making some variables
18:30 - in the
18:31 - top so under the damping we want to type
18:37 - VAR attack
18:39 - repeat time equals
18:45 - 1 make some more
18:47 - space private
18:50 - VAR attack
18:54 - time is going to be a type
18:56 - float I'm going to explain all of this
18:59 - in one second now let's just write it
19:02 - [Music]
19:03 - out another variable called attack
19:07 - now is going to be equal to
19:12 - true and uh you could make this
19:15 - private I'm going to go ahead and do
19:18 - that all right so I just got interrupted
19:21 - but we'll continue where we left off I'm
19:23 - sorry about this um one thing I noticed
19:26 - is that we don't actually need the the
19:28 - attack now since we are calling the
19:31 - attack through a function and not an if
19:33 - statement so uh we'll just leave that uh
19:37 - or or we'll just delete that and uh let
19:39 - me go ahead and quickly explain what
19:41 - these two variables are going to do for
19:43 - us the variable attack repeat time is
19:47 - the amount of seconds that will uh pass
19:50 - by between every attack so the enemy
19:53 - hits us and the attack attack repeat
19:56 - time is the interval between every hit
20:00 - uh the private VAR attack time is going
20:04 - to store the time. time and uh time.
20:09 - time can be a little difficult to
20:11 - understand but let's just quickly go
20:14 - ahead and store it so function start we
20:17 - want to store it in the start function
20:20 - because uh time. time cannot be stored
20:23 - inside of the variable declaration we
20:26 - have to do this when the game actually
20:28 - start so we're going to type function
20:30 - start and inside of the function start
20:32 - we're going to type attack time equals
20:36 - time.
20:38 - time and I S my
20:41 - colon all right so uh this will help us
20:44 - in counting out the
20:47 - interval so now let's uh go down to the
20:50 - function attack and actually create the
20:54 - code so in the function attack we're
20:57 - going to type if
21:00 - if time.
21:04 - time is greater
21:06 - than attack
21:13 - time and open up the brackets we want
21:17 - the debug lock statement to be inside of
21:20 - these
21:22 - brackets like that and under the
21:27 - attacking itself under the insert attack
21:30 - here we want to type attack
21:32 - time equals
21:36 - time do
21:38 - time
21:40 - plus
21:41 - attack repeat
21:44 - time tag
21:48 - repeat
21:50 - time and so what we are doing here is we
21:54 - are basically checking if we can attack
21:57 - again use the current
22:00 - time and the uh which we are storing in
22:03 - a variable and uh then adding up with
22:07 - the attack repeat time which is the
22:10 - intervals so uh that's basically it for
22:15 - the uh spacing out of the attacking so
22:18 - uh let's go ahead and try to hit play go
22:21 - under the console so we can see what
22:23 - happens so our enemy gets near it
22:26 - attacks it attacks
22:29 - and you can slowly see the different
22:31 - attack locks start appearing in the
22:33 - console just like they
22:37 - should so um and uh this variable can of
22:40 - course be tweaked inside of the enemy so
22:43 - you can just go ahead and re uh increase
22:46 - or reduce the attack repeat time
22:48 - depending on which kind of weapon um the
22:51 - enemy is wielding and how strong he is
22:54 - and different factors so that's it for
22:57 - that
22:59 - now let's go back into the script
23:01 - because I want to create one more thing
23:02 - to make our enemy a little more
23:05 - realistic and this is uh a function that
23:08 - simply uh makes it so that uh whenever
23:12 - we uh hit the enemy the enemy gets more
23:16 - mad at us and therefore will change
23:18 - chase us longer we'll move faster
23:21 - because now he's running after us he's
23:24 - Furious and uh also he will look more
23:27 - after us so they look at distance will
23:29 - also be
23:30 - increased and because we have already
23:34 - made a um a system where we send out a
23:40 - uh function or send out a message to
23:43 - whatever we hit that the function apply
23:45 - damage should be called we can just make
23:47 - a function called apply damage and open
23:51 - up the brackets and inside of here write
23:53 - whatever we want to happen when the
23:55 - enemy gets hit and in this case I want
23:58 - the change Chase range to
24:03 - be increased by
24:06 - 30 I also want the move speed to be
24:10 - increased by two and I want the look at
24:15 - distance to be
24:17 - increased by
24:20 - 40 and therefore whenever we go into
24:22 - Unity again and hit
24:25 - play and select our enemy in the heart
24:28 - key and take a look at the right hand
24:31 - side at the different variables here so
24:34 - we hit play you can see that right now
24:38 - the look at distance is at 25 the chase
24:40 - range is at 15 and the move speed is at
24:44 - five when I hit it everything goes up
24:48 - and now it's harder to escape the Rage
24:50 - of the
24:52 - enemy so uh that is it for the advanced
24:56 - part of this AI to tutorial I hope you
25:00 - enjoyed it and uh I know that some
25:03 - things I did not explain all the way
25:06 - through but that's because this is
25:08 - mostly a beginner's tutorial and
25:10 - therefore I don't expect you to
25:12 - understand everything at the moment um
25:16 - but there you go now you have some
25:18 - pretty damn decent um enemy AI which you
25:22 - can Implement into pretty much any game
25:25 - of this type and uh thank you for
25:29 - watching I'll see you in the next video
25:34 - [Music]

Cleaned transcript:

hello everyone and welcome to the 15th video in our create a survival game series done by bra keys I am the CEO of bra keys and today we are going to be taking a look at Advanced AI so scripting more advanced enemy functionality it's going to be awesome and it's going to be difficult um so if this is uh too much for you at any point you can always just go ahead and download the script from our website or uh simply go with the AI Syle uh version which is also available for download and which I have made an a video on earlier but that's it for the intro as always I have opened up unity and let me just quickly clean up from the last tutorial I did which was actually not uh title as a part of the series it was more like a standalone video where I showed how to create a gun and create some shooting mechanics and there we made this script this rast shooting so I'm just going to go ahead and drag that under the scripts and this bullet hit uh which was a particle with some Sparks emitting and I'm just going to drag that under the prefabs except that nothing has changed um if we go under the player the main camera the Mele you can see that there is now a gun object which is just just an empty game object with the Rea shooting script um so that's pretty much it now let's go ahead and get started so select the enemy which I have dragged over to the town so we can test uh some stuff with him without having to run a whole lot let's go ahead and disable the AI symbol I'll just keep it for now and let's hit the add component and new script and call this um you could do AI you could do Advanced AI I'm going to type Advanced AI so Advanced AI it's going to be a type JavaScript as always and there we go um one thing to keep in mind though with the script we are not going to be using the capsule collider we are going to be using some more advanced movement where we can apply gravity and some forces so that our enemy will actually be able to uh fall to the ground fall down uh different uh places and collide with wall walls and such instead of just going through them so we'll disable the capsule collider by right clicking remove component and hit the add component button go to physics and now changed it to the character controller um this gives us a whole lot more different uh possibilities and settings and scripting functionality that we can can play around with now let's go ahead and actually create the advanced AI script and the way I want to do this is simply use what we made in the last tutorial with the simple Ai and uh modify it a bit so let's go ahead and double click the advanced AI to open it up in mono develop and there it is and we can just go ahead in under the simple AI under the scripts folder and open that as well there it is and let's just go ahead for now and copy all of this over to our Advanced Ai and delete the prma strict and so now they look also very uh similar and uh all right let's go ahead and adding some stuff now first of all I want to create a bunch of variables because currently we have a set up so whenever our object chases something uh it is done in the function called attack I would want to change this name to Chase and so also when we called it in the if distance we want this to be changed Chase and we are going to change the name of this attack range to chase range and add yet another variable up here called Chase range which is going to be 15 and the attack range is now going to be a whole lot less we could try something like 1.5 because our um our melee distance is uh about 1.5 five that's what I have set it up to be and so um that's it for changing the change r range just to make it everything a little more clear now we can go ahead and add some more stuff let's add a um a actual attack function so function attack the parenthesis and uh so we just type that in there and then in a second we'll add some logic too but first I want to change how the um how the enemy actually behaves and moves because at the uh moment the enemy behaves through a transform position so it simply draws a line and moves in the direction of that line and that line will always Point towards the player um but that doesn't enable stuff like collision and gravity uh so we actually want to use the building function in the uh cure controller to take care of the movement so this is done by uh making some new variables so let's make a new variable and let's call this let me see let's call this the controller so just actually let's just call the controller and it's going to be a type character controller like that and let's also make a another variable called gravity just making some space variable gravity and uh so gravity and let's set this to a type float and it's going to be equal to by default I would say 20 is a very good amount um so just type 20 then we are going to make a private variable called move Direction move Direction and it's going to be a type Vector 3 and it's going to be equal to Vector 3 equals uh no Vector 3 do Z so um this is simply a 3D coordinate and uh it's just going to be 0 0 0 and uh we have the gravity um it's pretty much selfexplanatory and the variable controller is just so we can actually call the movement through the controllers look let's go ahead into unity and see the controller now appearing and what you're going to do here is You're simply going to grab this uh component and drag it under the character controller also let's remember to assign the player to a Target and uh these two things can always be done through scripting in the start function for example uh or if you have the player is spawning uh during the game you can have a function assigning the two variables using the game object. find and the uh get component so let's go ahead and uh open up the script again and uh let's now start uh implementing some stuff so uh under the Chase let me see where do we have it there uh under our Chase we now want to write some different things so first of all I would like the render outmaterial docolor to go down under the actual Chase function so I'll just quickly move that down here I just like it better that way oops and delete the spaces and we could go ahead and do the same with the uh look distance I don't know um here the look at we'll just move that under the actual look at function so and in the chase here it's this line we want to change because as you can see it it is translating it is moving in the forward position with a certain speed and we want this to be done through the character controller and I I won't explain exactly how it works but just know that you can create realistic movement this way so let's type move Direction equals transform. forward new line move Direction time equals move speed and new section move Direction actually I'll also make a section between the renderer and the move Direction stuff move Direction doy minus equals gravity times time do Delta time and if you uh can't remember time. Delta time simply um handles the uh time scaling and frame rate problems that you might have and uh right below this line we're going to write controller the variable starring the controller move in the move Direction time time time. Delta time all right so this pretty much takes care of the New Movement functionality let's take a look at what's actually happening here so first off we want the move direction to be equal to the forward movement so we want the direction that it should move to be forward then we want the move speed to in influence the move Direction so that we can tell it how fast it should move then we want the move direction to doy meaning the up and down to uh be influenced by the gravity variable and then at last we want to actually move the controller so let's go into our game and see if this works so I've opened up Unity here and uh let's go ahead and hit play and you can see the character control the character is now looking at us and then it indeed it starts moving once we get close enough and um I don't know if you can see this but it actually stays on the ground and we should also be able um to show that it collides with walls so if I drag it on into the town and hit play it actually stops on the other side of the wall so um that's it for making it collide and move more realistically now we have a few more things to add because we also want this to attack and we want it to rotate a bit different um or um maybe no we'll save that for another tutorial for now we just want to create create the attacking also so to do this let's create some functionality in the attack function and let's also make sure that the attack function is being called let's first make sure that it's being called so here under the if distance is uh is less than the TR Chase range then it should Chase I want to create a new if state statement right above that so if distance is less than attack range then we wanted to open up the brackets attack soal the attack function now if I just do it like this then our enemy won't actually stop whenever it's attacking so now if I hit play it will just keep on chasing me and uh it can Buck out in the positioning and push me uh which is not something we want even though it's trying to attack me so we want it to stop in a somewhat uh Fair uh range and then start attacking and if I then get out of its attack range we want it to start changing chasing again and this is done by making this if statement into an else if so this if St statement says if the distance is like less than attack range so if the enemy is able to attack then it should attack but then it should also stop chasing so if that is not the case else so if these requirements isn't met then we wanted to check if the distance is is under the chase range and then chases so if we do it this way and hit play even though we don't have any logic inside of a attack function once it gets inside of that range it stops and we can easily increase the range uh by going into our enemy uh by selecting our enemy and going under the advanced AI script and taking the attack range and bumping it up so let's say uh let's try out with a three and uh wait it maximized the wrong window there we go so now it should actually attack and there you go in the distance of three units it stops so uh let's just change that back to 1. five and uh make some attack functionality so go under the function attack and inside of this we want to do uh quite a few things we want to type the debug do log attack and the debug.log is useful for many things I like to use it uh for bug fixing if I am not sure what is being called or if it's just simply telling myself that I need to place some logic here so for now we won't actually be scripting the damaging of the player and the dying of the player but we will be scripting everything except that so we will be making everything that handles when the player should lose damage and maybe even how much but we won't be scripting what actually happens so this this could be I could name this insert attack here so that could be an animation or some other logic so let's see what actually happens here a deall dolog will be will be shown inside of the console window so when I hit play and the enemy goes near and starts attacking you can see a whole lot of debug. logs start appear appear inside of the console window and this is of course way too much uh at as is the uh the enemy is attacking us every frame so that's really not what we want we wanted to be attacking with a um interval of about 1 to 2 seconds so let's script that now this can be a little hard to understand but let's start out by making some variables in the top so under the damping we want to type VAR attack repeat time equals 1 make some more space private VAR attack time is going to be a type float I'm going to explain all of this in one second now let's just write it out another variable called attack now is going to be equal to true and uh you could make this private I'm going to go ahead and do that all right so I just got interrupted but we'll continue where we left off I'm sorry about this um one thing I noticed is that we don't actually need the the attack now since we are calling the attack through a function and not an if statement so uh we'll just leave that uh or or we'll just delete that and uh let me go ahead and quickly explain what these two variables are going to do for us the variable attack repeat time is the amount of seconds that will uh pass by between every attack so the enemy hits us and the attack attack repeat time is the interval between every hit uh the private VAR attack time is going to store the time. time and uh time. time can be a little difficult to understand but let's just quickly go ahead and store it so function start we want to store it in the start function because uh time. time cannot be stored inside of the variable declaration we have to do this when the game actually start so we're going to type function start and inside of the function start we're going to type attack time equals time. time and I S my colon all right so uh this will help us in counting out the interval so now let's uh go down to the function attack and actually create the code so in the function attack we're going to type if if time. time is greater than attack time and open up the brackets we want the debug lock statement to be inside of these brackets like that and under the attacking itself under the insert attack here we want to type attack time equals time do time plus attack repeat time tag repeat time and so what we are doing here is we are basically checking if we can attack again use the current time and the uh which we are storing in a variable and uh then adding up with the attack repeat time which is the intervals so uh that's basically it for the uh spacing out of the attacking so uh let's go ahead and try to hit play go under the console so we can see what happens so our enemy gets near it attacks it attacks and you can slowly see the different attack locks start appearing in the console just like they should so um and uh this variable can of course be tweaked inside of the enemy so you can just go ahead and re uh increase or reduce the attack repeat time depending on which kind of weapon um the enemy is wielding and how strong he is and different factors so that's it for that now let's go back into the script because I want to create one more thing to make our enemy a little more realistic and this is uh a function that simply uh makes it so that uh whenever we uh hit the enemy the enemy gets more mad at us and therefore will change chase us longer we'll move faster because now he's running after us he's Furious and uh also he will look more after us so they look at distance will also be increased and because we have already made a um a system where we send out a uh function or send out a message to whatever we hit that the function apply damage should be called we can just make a function called apply damage and open up the brackets and inside of here write whatever we want to happen when the enemy gets hit and in this case I want the change Chase range to be increased by 30 I also want the move speed to be increased by two and I want the look at distance to be increased by 40 and therefore whenever we go into Unity again and hit play and select our enemy in the heart key and take a look at the right hand side at the different variables here so we hit play you can see that right now the look at distance is at 25 the chase range is at 15 and the move speed is at five when I hit it everything goes up and now it's harder to escape the Rage of the enemy so uh that is it for the advanced part of this AI to tutorial I hope you enjoyed it and uh I know that some things I did not explain all the way through but that's because this is mostly a beginner's tutorial and therefore I don't expect you to understand everything at the moment um but there you go now you have some pretty damn decent um enemy AI which you can Implement into pretty much any game of this type and uh thank you for watching I'll see you in the next video
