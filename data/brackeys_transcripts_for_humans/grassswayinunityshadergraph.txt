With timestamps:

00:00 - in this video we'll use shader graph to
00:01 - create a grass shader that sways in the
00:03 - wind while we'll be using grass as an
00:05 - example the shader can easily be used
00:07 - for other kinds of foliage to achieve
00:09 - this effect will be using vertex
00:11 - displacement what this means is that
00:13 - we'll be using shader graph to control
00:15 - the positions of the vertices in our
00:17 - mesh in our case we want to take these
00:18 - vertices and offset them in a way that
00:20 - feels like they're being affected by
00:22 - wind
00:23 - in fact vertex displacement can be used
00:25 - to create all kinds of cool-looking
00:26 - effects from waves in water to swimming
00:29 - fish also this video is sponsored by
00:32 - unity and special thanks to Jack
00:34 - d'hubert Andrew cannon go John Shannon
00:36 - infinity PBR and glassful entertainment
00:39 - for their support on patreon also I just
00:41 - recovered from a cold so if my voice
00:42 - sounds a bit off I apologize that is why
00:44 - and with that let's get started in this
00:47 - video we'll be using the HD render
00:48 - pipeline but you can of course get a
00:50 - very similar result using lightweight
00:51 - the project here is already set up for
00:54 - each GRP will of course have a link in
00:55 - the description on how to do this in
00:57 - case you're interested so first we need
00:59 - to make sure that HTTP is up-to-date to
01:02 - do this we'll go window let's select the
01:04 - package manager we'll make sure to show
01:06 - preview packages and scroll to where it
01:08 - says High Definition render pipeline now
01:10 - mine is already up to date otherwise you
01:12 - will have an option here to update it
01:14 - now as you can see I've gone ahead and
01:15 - set up a simple example scene here I
01:18 - just have a cube as the floor and then I
01:20 - have these different grass objects
01:22 - spread out now the assets that I'm using
01:24 - here are really simple as you can see I
01:27 - have the grass mesh which is basically
01:29 - just a collection of intersecting planes
01:31 - and then I have three textures that
01:34 - we're going to be using if you want to
01:35 - download these assets I'll of course
01:37 - have a link to them in the description
01:38 - but as you can see our grass doesn't
01:40 - currently look a lot like grass so let's
01:42 - go ahead and change this with a shader
01:44 - let's go to a project and hit create
01:46 - we'll go under your shader and because
01:48 - we're using HDR P will go under HDR P
01:51 - and select the lit graph this is much
01:53 - like the PBR graph for light weight we
01:55 - and then name our shader I'm just gonna
01:57 - call it grass and we can then double
01:59 - click it to open it in shader graph so
02:02 - before we actually start modifying this
02:03 - shader let's go ahead and change a
02:05 - preview to instead of showing a sphere
02:07 - it will actually show our grass object
02:10 - to do this we'll right click hit custom
02:12 - mesh
02:13 - and then we can simply select our grass
02:15 - mesh there we go and first what I would
02:17 - like to do is start with what I like to
02:19 - call the base shader and buy the base
02:21 - shader I mean the part of the shader
02:22 - that allows us to plug in a few textures
02:25 - to make a grass actually look like grass
02:27 - now in our case we have three different
02:29 - textures the first one of these is the
02:31 - base color so let's go to our blackboard
02:34 - here and let's create a new texture and
02:36 - we'll call this one base color and
02:38 - that's the default texture that's go
02:40 - ahead and select our green grass albedo
02:42 - we can then take this texture from our
02:45 - blackboard and make a node out of it now
02:47 - you might think that you can just plug
02:48 - this directly into our base color but
02:50 - because this is a texture and our base
02:52 - color is a vector3 we first need to go
02:55 - through a sample texture node and we
02:58 - then take the output of this node and
03:00 - plug it into our base color as you can
03:02 - see our grass is now colored however we
03:04 - can't actually see the shape of our
03:06 - grass yet and the reason for this is
03:08 - that we also need to take the Alpha of
03:10 - our base color and plug into the Alpha
03:13 - stat and by default this isn't going to
03:15 - change anything the reason for this is
03:17 - that we need to go to our lid master
03:18 - settings so press this car here and
03:20 - change the surface type from opaque to
03:23 - transparent because we want everything
03:25 - around our grass to be transparent and
03:27 - as you can see this already kind of
03:29 - works we also need to go down here and
03:31 - select alpha clipping to make sure
03:33 - everything around our glass won't be
03:35 - included so stuff like specular lighting
03:37 - will disappear and there we go our grass
03:40 - is starting to look like grass you'll
03:42 - also see that if we look at our grass
03:43 - from behind it disappears the reason for
03:47 - this is that we need a grass to be
03:48 - double-sided to do this we'll go to the
03:50 - double sided parameter and change from
03:52 - disabled to flipped normals and we now
03:55 - see our grass from behind as well
03:58 - awesome so now we can go ahead and
04:00 - create our next texture 2d we call this
04:02 - one metallic let's change the default
04:05 - texture to the blue one here let's also
04:08 - drag this in let's hook it up to a
04:10 - sampler texture node now this texture is
04:12 - pretty cool because it's created in such
04:14 - a way that the different color channels
04:15 - contain different information about our
04:18 - material so the red channel here is
04:20 - meant to control the metallic property
04:23 - the green channel will control the
04:25 - smoothness and the alpha chain
04:27 - is going to control our ambient
04:29 - occlusion such you can see that's
04:31 - already made the grass look a lot more
04:32 - realistic and added a lot of depth and
04:35 - we're now ready to add the last texture
04:37 - so let's go ahead and create a texture
04:38 - 2d and this is going to be a normal map
04:41 - I'm gonna set the default texture here
04:43 - to the green grass normal I'm gonna make
04:45 - a bit of space for this let's drag it in
04:47 - let's hook it up to a saml texture node
04:49 - now for this one we want to change the
04:51 - type from default to normal because
04:53 - we're working with a normal map and we
04:55 - can just go ahead and plug this directly
04:57 - into the normal slot and that's pretty
04:59 - much it for the base part of our shader
05:01 - I'm just gonna go ahead and collapse all
05:03 - these let's hit save acid and if we head
05:06 - back into unity we can select the
05:08 - material that is currently applied to
05:10 - all of our grass meshes and here we can
05:12 - change the Shady to Shady grass grass
05:15 - and as you can see we now have grass in
05:18 - our scene really really cold so that
05:20 - concludes the base shader now we need to
05:23 - add vertex animation to actually make
05:25 - the grass move with the wind to do this
05:27 - we modified the position input of the
05:29 - lit master node now this is done in
05:31 - three steps first we get the position of
05:34 - our objects vertices in world space wall
05:37 - space means that the position is
05:38 - relative to the center of our scene we
05:41 - use the X&Y positions to create UVs and
05:43 - offset these UVs over time for the
05:46 - second step we generate some noise in
05:48 - world space based on the UVs think of it
05:50 - like we are overlaying a scrolling noise
05:52 - texture on top of our entire scene that
05:55 - will affect all of our grass now based
05:57 - on this noise texture we can push and
05:59 - pull the grass on the x-axis for low
06:01 - values or black parts we pull on the
06:04 - vertices and for high values or white
06:06 - parts we push on them now we could stop
06:09 - here but the effect would look pretty
06:10 - weird because the grass would be moving
06:12 - equally from top to bottom instead for
06:15 - our third step we want to make sure the
06:17 - bottom of a grass stays in place to do
06:19 - this we need to create a gradient that
06:21 - goes from bottom to top where the bottom
06:23 - value is zero and the top value is one
06:26 - this means that at the bottom we'll have
06:28 - low values that result in no or little
06:30 - movement and at the top we will have
06:32 - higher values resulting in more movement
06:34 - to create this gradient we use the local
06:36 - you've ease of our grass model as you
06:38 - can see from the grass textures a model
06:40 - is set
06:40 - in such a way where the bottom of the
06:42 - texture is at the bottom of the model
06:44 - and the top of the texture is at the top
06:46 - of the model because you v's go from 0
06:48 - to 1 naturally we just use the y-axis of
06:51 - amylose movies as our gradient now if
06:54 - that confused you in any way I
06:55 - completely understand
06:57 - you've ease and vertices can be hard to
06:58 - wrap your head around at first if you'd
07:00 - like to get a deeper understanding of
07:02 - the two we have a small video series on
07:04 - mesh generation that I recommend you
07:05 - check out or you can just follow me for
07:07 - now so this here is the base part of our
07:09 - shading now for step one the very first
07:12 - thing that we want to do is create a
07:13 - precision node this is simply going to
07:16 - get the position of our vertices in
07:18 - world space we're also going to create a
07:20 - tiling and offset node as the name
07:23 - suggests this allows us to offset UVs in
07:25 - our case we want to do this over time to
07:27 - create the scrolling effect so we'll
07:29 - take the position of our vertices and
07:31 - input that as our UVs and then to offset
07:34 - them over time we first need to create a
07:36 - time node and we could plug this in
07:38 - directly or we could create a property
07:40 - that allows us to control how fast this
07:42 - should be so let's go ahead and do this
07:45 - let's create a vector two because we
07:47 - want to control it on both the X and the
07:49 - y let's call it wind movement I'm just
07:53 - going to fold it to six on the X and
07:55 - zero on the Y and let's drag it in here
07:58 - so now we can simply multiply our time
08:00 - with our wind movements let's take our
08:02 - time here pull it out into a multiply
08:04 - node and take our wind movement and plug
08:06 - it into the other part of our multiply
08:08 - node let's take the output here and plug
08:10 - it into the offset and I'm just gonna
08:13 - collapse this here and pull them
08:14 - together to create a bit of space and
08:16 - while we're not seeing anything yet that
08:18 - is pretty much it for step one we've now
08:21 - created the UVs and they are being
08:23 - offset over time next step is adding the
08:26 - noise let's go ahead and create a
08:28 - gradient noise node as you can see this
08:30 - creates some pseudo random noise and we
08:32 - can go ahead and control the scale of it
08:34 - right here in fact let's go ahead and
08:36 - change the scale based on a property so
08:38 - let's go ahead and create a vector one
08:40 - let's call it wind density and let's
08:43 - just fold it to something like two let's
08:46 - drag it in here and plug it into our
08:49 - scale call and you might have guessed it
08:51 - at this point but our gradient noise has
08:53 - a UV input
08:54 - let's go ahead and take the UVs from our
08:56 - tiling an offset node and just plug them
08:58 - right in there and you can now see that
08:59 - our noise is scrolling by over time
09:02 - based on our wind movement and that we
09:04 - can zoom in and out based on the wind
09:06 - density really cool again I'm just gonna
09:09 - collapse some of this to make some more
09:11 - room and we want to play around with
09:12 - this noise a bit to give it this
09:14 - strength that we want so the first
09:16 - problem with our noise as it is is that
09:17 - all the values are currently going
09:19 - between zero and one from black to white
09:21 - now by itself that's fine but the
09:23 - problem in our case is that if all the
09:26 - values are positive we're always going
09:28 - to be pushing on the grass we also want
09:30 - to pull it back so since all the values
09:32 - are between zero and one we can really
09:34 - simply change this by just subtracting
09:36 - by 0.5 so let's take the output here put
09:40 - it into a subtract node let's just
09:42 - subtract 5.5 this way our noise will now
09:45 - go between negative 0.5 and positive 0.5
09:49 - and you might already kind of start to
09:51 - feel how this organic like movement can
09:53 - be used to emulate stuff like wind of
09:55 - course we want to be able to control
09:57 - this strength of our wind so let's go
09:59 - ahead and create a vector one for this
10:01 - as well let's call it wind strength and
10:04 - let's default this 2.3 we'll simply take
10:07 - this wind strength and multiplied
10:09 - together with the noise so we'll create
10:10 - a multiply node here and plug those two
10:13 - in so we've now just reduced the
10:15 - strength of our wind a bit and by
10:17 - strength I mean how harshly our wind is
10:19 - going to influence our grass so at this
10:21 - point we have a scrolling noise texture
10:23 - the next thing that we want to do is use
10:25 - this noise to offset the exposition of
10:28 - our vertices so let's go ahead and take
10:30 - all of this and make some more room and
10:31 - again we can go ahead and get the
10:33 - current position of our vertices
10:34 - specimen riding position let's go ahead
10:37 - and output this into a split node this
10:40 - is going to take our three components XY
10:43 - and z and separate them as you can see
10:45 - it's named them RG and B and the a
10:48 - channel can just be ignored so if we
10:50 - want to offset on the X we need to
10:52 - modify the our channel in fact let's
10:55 - just take our noise here and add it
10:57 - right on top let's create an ADD node
10:59 - let's take the output of our noise let's
11:02 - take the X of our position so the our
11:04 - channel here and add them together and
11:06 - you can now see the effect
11:08 - that our noise has on our x-axis really
11:11 - cool let's move this over here and again
11:14 - let's make some more space now the other
11:16 - two components y&z we want to stay the
11:18 - same let's use a combine note to take
11:21 - the X into our our channel
11:24 - the Y to the Y and the Z to the Z there
11:28 - we go
11:28 - so we're just keeping the same values
11:30 - here but we are adding the noise on top
11:32 - of our X awesome and that is it for step
11:35 - two now at this point we are ready to
11:37 - see how this looks in the scene then the
11:39 - problem is that our coordinates are
11:41 - currently in world space and as you can
11:43 - see a master node wants the position in
11:46 - object space in other words we need to
11:48 - convert from being relative to the
11:50 - center of a scene to being relative to
11:52 - the center of our object luckily there
11:54 - is a handy note that will do this
11:56 - conversion for us it's called the
11:58 - transform node and we use it to simply
12:01 - convert from wall space to object space
12:03 - now in light-weight we would go ahead
12:06 - and simply plug this right in and then
12:09 - plug it directly into the position on a
12:11 - master node however as you can see our
12:13 - preview disappears that's because this
12:16 - doesn't work in HDR P because it uses
12:18 - camera relative rendering because of
12:21 - this we first need to subtract our
12:22 - camera position the light weight you can
12:24 - completely skip this step but all we
12:26 - need to do is before we transform our
12:28 - position we need to subtract so we'll
12:31 - add a subtract node here and the value
12:33 - that we need to subtract is our camera
12:35 - position so camera position there we go
12:38 - and we can then put that into the
12:40 - transform node so just a tiny extra step
12:43 - that we need to do because of how the
12:45 - renderer works and now if we save the
12:47 - asset and head into unity we can see the
12:49 - noise working on our grass of course it
12:52 - currently looks really weird that's
12:54 - mostly because we need to adjust the
12:56 - settings for our grass let's go ahead
12:58 - and select our grass material and I
13:00 - think the main problem here is that our
13:02 - wind density is way too high I'm gonna
13:05 - go ahead and dial this down to something
13:06 - like point zero six and already I think
13:09 - that starts to look a lot more like wind
13:12 - we can also see the definite problem of
13:14 - a grass moving with the base as well so
13:18 - let's go ahead and change this with the
13:19 - third and final step
13:21 - so to make sure the bottom of the grass
13:23 - stays fixed to the ground we need to
13:25 - first of all create a gradient based on
13:27 - our UVs so let's again add some more
13:29 - space here and we want to do this before
13:32 - we start converting everything into
13:35 - object space and getting the UVs of our
13:38 - object is super simple we just create a
13:40 - UV node and this now has the UVs of a
13:44 - model nice we discussed we want to use
13:46 - the y axis of our UV s so we need to
13:49 - split this using a split node and only
13:52 - take the Y axis which is the green
13:54 - Channel in fact let's just try and
13:56 - preview this and as you can see this
13:59 - creates a really nice gradient going
14:00 - from black to white so we'll take this
14:03 - gradient here and we'll use it to
14:06 - interpolate between the offset position
14:08 - that we created here and the default
14:11 - position that our vertices have to do
14:14 - this we're going to use a lobe node so
14:17 - herbs tends for linear interpolation and
14:19 - it's going to allow us to transition
14:21 - between two values based on a third
14:24 - value now that sounds more complicated
14:26 - than it really is all that we do is that
14:29 - we plug in our first value which is the
14:31 - default position of our vertices so just
14:34 - the position here we're simply going to
14:36 - plug that into value AE then we take the
14:38 - second value so in our case that's the
14:40 - offset position of our vertices so that
14:43 - is the output of our combined node here
14:45 - and we want to plant between the two
14:48 - based on the gradient of our UVs here so
14:50 - we'll simply input that as the T value
14:52 - so when T is zero and our gradient is
14:55 - black we're going to be using the
14:57 - default position and as we get higher
14:59 - and our gradient becomes more white and
15:01 - we get closer to one we're going to be
15:03 - using more of the offset position so
15:06 - really cool and we now just take the
15:08 - output of this and put it into a
15:09 - subtract node to all of the conversion
15:12 - from world to object space and that
15:14 - pretty much concludes our entire grass
15:16 - shader if we now just move this over to
15:18 - make it look a bit neater and hit save
15:21 - asset and go into unity voila we can see
15:25 - it working as you can see the base of
15:27 - our grass stays fixed to the ground and
15:29 - as we get higher and higher more and
15:31 - more of the grass is influenced we can
15:33 - also see that it looks
15:35 - fairly nice and random and that the
15:37 - grass is kind of moving together in
15:39 - chunks you can of course always go into
15:41 - the material settings and change stuff
15:43 - like how much the wind moves let's try
15:45 - and double that to get kind of more
15:47 - rapid changes you can also change the
15:49 - wind strength if you wanted to more
15:51 - heavily influence the grass this might
15:54 - be a bit much and you can change the
15:56 - wind density to control if you want to
15:58 - move different parts locally or if you
16:00 - want the grass to kind of move together
16:02 - as a unit awesome that's pretty much it
16:06 - for this video if you want to learn more
16:07 - about vertex displacement or how you can
16:09 - get more advanced with vegetation in
16:11 - general we'll definitely have some
16:13 - things for that in the description also
16:14 - thanks to unity we are flying to GDC
16:16 - this week which means that won't be a
16:18 - video next Sunday however we will be
16:21 - live-streaming the unity GDC keynote on
16:23 - march 18 at 5 p.m. Pacific time so stay
16:27 - tuned for that and that thanks for
16:28 - watching and I will see you in the next
16:30 - video thanks of the awesome patreon
16:34 - supporters who donated in February and
16:36 - special thanks to James P Jake Gilbert
16:38 - and you can link Oh John Shannon
16:39 - infinity PPR
16:40 - Sybok Nami Dennis Sullivan Travis Dylan
16:43 - face Tamara Phi Lila set Ronan Tintin
16:45 - fence Cuba Chris mechanical mind thanks
16:47 - so long custom Sue Ellen
16:49 - Gregor Pearce cool Swedish key rock pain
16:51 - Tim afforda Park Erasmus and Noah
16:53 - Kiyosaki you guys Rock

Cleaned transcript:

in this video we'll use shader graph to create a grass shader that sways in the wind while we'll be using grass as an example the shader can easily be used for other kinds of foliage to achieve this effect will be using vertex displacement what this means is that we'll be using shader graph to control the positions of the vertices in our mesh in our case we want to take these vertices and offset them in a way that feels like they're being affected by wind in fact vertex displacement can be used to create all kinds of coollooking effects from waves in water to swimming fish also this video is sponsored by unity and special thanks to Jack d'hubert Andrew cannon go John Shannon infinity PBR and glassful entertainment for their support on patreon also I just recovered from a cold so if my voice sounds a bit off I apologize that is why and with that let's get started in this video we'll be using the HD render pipeline but you can of course get a very similar result using lightweight the project here is already set up for each GRP will of course have a link in the description on how to do this in case you're interested so first we need to make sure that HTTP is uptodate to do this we'll go window let's select the package manager we'll make sure to show preview packages and scroll to where it says High Definition render pipeline now mine is already up to date otherwise you will have an option here to update it now as you can see I've gone ahead and set up a simple example scene here I just have a cube as the floor and then I have these different grass objects spread out now the assets that I'm using here are really simple as you can see I have the grass mesh which is basically just a collection of intersecting planes and then I have three textures that we're going to be using if you want to download these assets I'll of course have a link to them in the description but as you can see our grass doesn't currently look a lot like grass so let's go ahead and change this with a shader let's go to a project and hit create we'll go under your shader and because we're using HDR P will go under HDR P and select the lit graph this is much like the PBR graph for light weight we and then name our shader I'm just gonna call it grass and we can then double click it to open it in shader graph so before we actually start modifying this shader let's go ahead and change a preview to instead of showing a sphere it will actually show our grass object to do this we'll right click hit custom mesh and then we can simply select our grass mesh there we go and first what I would like to do is start with what I like to call the base shader and buy the base shader I mean the part of the shader that allows us to plug in a few textures to make a grass actually look like grass now in our case we have three different textures the first one of these is the base color so let's go to our blackboard here and let's create a new texture and we'll call this one base color and that's the default texture that's go ahead and select our green grass albedo we can then take this texture from our blackboard and make a node out of it now you might think that you can just plug this directly into our base color but because this is a texture and our base color is a vector3 we first need to go through a sample texture node and we then take the output of this node and plug it into our base color as you can see our grass is now colored however we can't actually see the shape of our grass yet and the reason for this is that we also need to take the Alpha of our base color and plug into the Alpha stat and by default this isn't going to change anything the reason for this is that we need to go to our lid master settings so press this car here and change the surface type from opaque to transparent because we want everything around our grass to be transparent and as you can see this already kind of works we also need to go down here and select alpha clipping to make sure everything around our glass won't be included so stuff like specular lighting will disappear and there we go our grass is starting to look like grass you'll also see that if we look at our grass from behind it disappears the reason for this is that we need a grass to be doublesided to do this we'll go to the double sided parameter and change from disabled to flipped normals and we now see our grass from behind as well awesome so now we can go ahead and create our next texture 2d we call this one metallic let's change the default texture to the blue one here let's also drag this in let's hook it up to a sampler texture node now this texture is pretty cool because it's created in such a way that the different color channels contain different information about our material so the red channel here is meant to control the metallic property the green channel will control the smoothness and the alpha chain is going to control our ambient occlusion such you can see that's already made the grass look a lot more realistic and added a lot of depth and we're now ready to add the last texture so let's go ahead and create a texture 2d and this is going to be a normal map I'm gonna set the default texture here to the green grass normal I'm gonna make a bit of space for this let's drag it in let's hook it up to a saml texture node now for this one we want to change the type from default to normal because we're working with a normal map and we can just go ahead and plug this directly into the normal slot and that's pretty much it for the base part of our shader I'm just gonna go ahead and collapse all these let's hit save acid and if we head back into unity we can select the material that is currently applied to all of our grass meshes and here we can change the Shady to Shady grass grass and as you can see we now have grass in our scene really really cold so that concludes the base shader now we need to add vertex animation to actually make the grass move with the wind to do this we modified the position input of the lit master node now this is done in three steps first we get the position of our objects vertices in world space wall space means that the position is relative to the center of our scene we use the X&Y positions to create UVs and offset these UVs over time for the second step we generate some noise in world space based on the UVs think of it like we are overlaying a scrolling noise texture on top of our entire scene that will affect all of our grass now based on this noise texture we can push and pull the grass on the xaxis for low values or black parts we pull on the vertices and for high values or white parts we push on them now we could stop here but the effect would look pretty weird because the grass would be moving equally from top to bottom instead for our third step we want to make sure the bottom of a grass stays in place to do this we need to create a gradient that goes from bottom to top where the bottom value is zero and the top value is one this means that at the bottom we'll have low values that result in no or little movement and at the top we will have higher values resulting in more movement to create this gradient we use the local you've ease of our grass model as you can see from the grass textures a model is set in such a way where the bottom of the texture is at the bottom of the model and the top of the texture is at the top of the model because you v's go from 0 to 1 naturally we just use the yaxis of amylose movies as our gradient now if that confused you in any way I completely understand you've ease and vertices can be hard to wrap your head around at first if you'd like to get a deeper understanding of the two we have a small video series on mesh generation that I recommend you check out or you can just follow me for now so this here is the base part of our shading now for step one the very first thing that we want to do is create a precision node this is simply going to get the position of our vertices in world space we're also going to create a tiling and offset node as the name suggests this allows us to offset UVs in our case we want to do this over time to create the scrolling effect so we'll take the position of our vertices and input that as our UVs and then to offset them over time we first need to create a time node and we could plug this in directly or we could create a property that allows us to control how fast this should be so let's go ahead and do this let's create a vector two because we want to control it on both the X and the y let's call it wind movement I'm just going to fold it to six on the X and zero on the Y and let's drag it in here so now we can simply multiply our time with our wind movements let's take our time here pull it out into a multiply node and take our wind movement and plug it into the other part of our multiply node let's take the output here and plug it into the offset and I'm just gonna collapse this here and pull them together to create a bit of space and while we're not seeing anything yet that is pretty much it for step one we've now created the UVs and they are being offset over time next step is adding the noise let's go ahead and create a gradient noise node as you can see this creates some pseudo random noise and we can go ahead and control the scale of it right here in fact let's go ahead and change the scale based on a property so let's go ahead and create a vector one let's call it wind density and let's just fold it to something like two let's drag it in here and plug it into our scale call and you might have guessed it at this point but our gradient noise has a UV input let's go ahead and take the UVs from our tiling an offset node and just plug them right in there and you can now see that our noise is scrolling by over time based on our wind movement and that we can zoom in and out based on the wind density really cool again I'm just gonna collapse some of this to make some more room and we want to play around with this noise a bit to give it this strength that we want so the first problem with our noise as it is is that all the values are currently going between zero and one from black to white now by itself that's fine but the problem in our case is that if all the values are positive we're always going to be pushing on the grass we also want to pull it back so since all the values are between zero and one we can really simply change this by just subtracting by 0.5 so let's take the output here put it into a subtract node let's just subtract 5.5 this way our noise will now go between negative 0.5 and positive 0.5 and you might already kind of start to feel how this organic like movement can be used to emulate stuff like wind of course we want to be able to control this strength of our wind so let's go ahead and create a vector one for this as well let's call it wind strength and let's default this 2.3 we'll simply take this wind strength and multiplied together with the noise so we'll create a multiply node here and plug those two in so we've now just reduced the strength of our wind a bit and by strength I mean how harshly our wind is going to influence our grass so at this point we have a scrolling noise texture the next thing that we want to do is use this noise to offset the exposition of our vertices so let's go ahead and take all of this and make some more room and again we can go ahead and get the current position of our vertices specimen riding position let's go ahead and output this into a split node this is going to take our three components XY and z and separate them as you can see it's named them RG and B and the a channel can just be ignored so if we want to offset on the X we need to modify the our channel in fact let's just take our noise here and add it right on top let's create an ADD node let's take the output of our noise let's take the X of our position so the our channel here and add them together and you can now see the effect that our noise has on our xaxis really cool let's move this over here and again let's make some more space now the other two components y&z we want to stay the same let's use a combine note to take the X into our our channel the Y to the Y and the Z to the Z there we go so we're just keeping the same values here but we are adding the noise on top of our X awesome and that is it for step two now at this point we are ready to see how this looks in the scene then the problem is that our coordinates are currently in world space and as you can see a master node wants the position in object space in other words we need to convert from being relative to the center of a scene to being relative to the center of our object luckily there is a handy note that will do this conversion for us it's called the transform node and we use it to simply convert from wall space to object space now in lightweight we would go ahead and simply plug this right in and then plug it directly into the position on a master node however as you can see our preview disappears that's because this doesn't work in HDR P because it uses camera relative rendering because of this we first need to subtract our camera position the light weight you can completely skip this step but all we need to do is before we transform our position we need to subtract so we'll add a subtract node here and the value that we need to subtract is our camera position so camera position there we go and we can then put that into the transform node so just a tiny extra step that we need to do because of how the renderer works and now if we save the asset and head into unity we can see the noise working on our grass of course it currently looks really weird that's mostly because we need to adjust the settings for our grass let's go ahead and select our grass material and I think the main problem here is that our wind density is way too high I'm gonna go ahead and dial this down to something like point zero six and already I think that starts to look a lot more like wind we can also see the definite problem of a grass moving with the base as well so let's go ahead and change this with the third and final step so to make sure the bottom of the grass stays fixed to the ground we need to first of all create a gradient based on our UVs so let's again add some more space here and we want to do this before we start converting everything into object space and getting the UVs of our object is super simple we just create a UV node and this now has the UVs of a model nice we discussed we want to use the y axis of our UV s so we need to split this using a split node and only take the Y axis which is the green Channel in fact let's just try and preview this and as you can see this creates a really nice gradient going from black to white so we'll take this gradient here and we'll use it to interpolate between the offset position that we created here and the default position that our vertices have to do this we're going to use a lobe node so herbs tends for linear interpolation and it's going to allow us to transition between two values based on a third value now that sounds more complicated than it really is all that we do is that we plug in our first value which is the default position of our vertices so just the position here we're simply going to plug that into value AE then we take the second value so in our case that's the offset position of our vertices so that is the output of our combined node here and we want to plant between the two based on the gradient of our UVs here so we'll simply input that as the T value so when T is zero and our gradient is black we're going to be using the default position and as we get higher and our gradient becomes more white and we get closer to one we're going to be using more of the offset position so really cool and we now just take the output of this and put it into a subtract node to all of the conversion from world to object space and that pretty much concludes our entire grass shader if we now just move this over to make it look a bit neater and hit save asset and go into unity voila we can see it working as you can see the base of our grass stays fixed to the ground and as we get higher and higher more and more of the grass is influenced we can also see that it looks fairly nice and random and that the grass is kind of moving together in chunks you can of course always go into the material settings and change stuff like how much the wind moves let's try and double that to get kind of more rapid changes you can also change the wind strength if you wanted to more heavily influence the grass this might be a bit much and you can change the wind density to control if you want to move different parts locally or if you want the grass to kind of move together as a unit awesome that's pretty much it for this video if you want to learn more about vertex displacement or how you can get more advanced with vegetation in general we'll definitely have some things for that in the description also thanks to unity we are flying to GDC this week which means that won't be a video next Sunday however we will be livestreaming the unity GDC keynote on march 18 at 5 p.m. Pacific time so stay tuned for that and that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in February and special thanks to James P Jake Gilbert and you can link Oh John Shannon infinity PPR Sybok Nami Dennis Sullivan Travis Dylan face Tamara Phi Lila set Ronan Tintin fence Cuba Chris mechanical mind thanks so long custom Sue Ellen Gregor Pearce cool Swedish key rock pain Tim afforda Park Erasmus and Noah Kiyosaki you guys Rock
