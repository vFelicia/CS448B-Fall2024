With timestamps:

00:00 - this video is brought to you by our own
00:01 - Metta thank you so much for donating if
00:03 - you want to support breakage yourself
00:04 - you can go to patreon.com/scishow so we
00:07 - want to welcome to the first video in
00:08 - the patreon funded game math theory a
00:10 - series that covers essential
00:12 - mathematical concepts that you will
00:13 - definitely run into during your game
00:15 - development career today we will be
00:17 - looking at vectors before we get into
00:19 - how a vector is defined let's have a
00:21 - look at why they're useful vectors are
00:23 - often used when we want to move a
00:24 - character around the scene let's say
00:26 - that we want to move our character two
00:27 - units to the right and one unit up what
00:30 - we essentially do is create a vector
00:31 - which we represent with an arrow that
00:33 - points in that direction we can then add
00:35 - this vector on to the position of our
00:37 - character to make him move if we were to
00:39 - write down this vector mathematically we
00:41 - would write to one because the vector
00:44 - moves to one the x + 1 on the Y we say
00:47 - that a vector is defined by direction
00:48 - and a length in our case the direction
00:50 - of the vector is where we want our
00:52 - character to point and the length of the
00:54 - vector is how far our character should
00:56 - walk in that direction if we wanted our
00:58 - character to then move one unit to the
01:00 - left we would make a new vector with the
01:02 - coordinates minus one zero because the
01:04 - vector goes minus 1 on the X and zero on
01:07 - the Y however you will quickly notice
01:09 - that the coordinates only show what the
01:11 - vector looks like and not where we
01:12 - should place it in the scene that is
01:14 - because vectors don't have any inherent
01:16 - position that allows us to draw it
01:18 - anywhere we want it is only when we
01:20 - combine it with the position of our
01:22 - character that the vector adds anything
01:24 - meaningful to our example now let's look
01:26 - at another example where victors come in
01:28 - handy say we have a scene with two
01:30 - players player a and player B and we
01:32 - want to find the distance between the
01:34 - two well both players have a position
01:36 - which means where they are in
01:37 - relationship to the center of our level
01:39 - in this example player a has a position
01:41 - of two one because he's two units from
01:44 - the center on the X and one unit from
01:45 - the center on the Y likewise player B
01:48 - has a position of 1/4 because he's one
01:51 - unit from the center on the X and four
01:53 - units from the center on the Y we can
01:54 - now create a vector that points from
01:56 - player a to player B to do this we
01:58 - subtract the position of player a from
02:00 - the position of player B this is done in
02:03 - the easiest way possible by first
02:04 - subtracting the X components 1 minus 2
02:07 - equals -1 then we subtract the Y
02:10 - components 4 minus 1 equals
02:13 - three and the result is a vector with
02:15 - the coordinates minus one three let's
02:17 - try to draw this in our scene we can see
02:19 - that the vector correct it goes from
02:20 - player a to player B but how do we
02:23 - calculate the length of this vector that
02:25 - is in fact really easy the length of a
02:27 - vector can be written as the square root
02:29 - of x squared plus y squared note that
02:32 - the length of a vector is referred to as
02:34 - the vectors magnitude if you wonder why
02:36 - the length of a vector is defined using
02:38 - this particular formula you can try to
02:40 - think of the vector as the hypotenuse of
02:42 - the triangle created by the vector
02:43 - coordinates and then use Pythagoras
02:45 - theorem to calculate the length of that
02:47 - side but you could of course just use
02:49 - the formula as is so if we want to
02:51 - calculate the distance between our
02:53 - players we simply insert the x and y
02:55 - coordinates of the vector into the
02:57 - formula and voila the distance from
02:59 - player a to player B is three point one
03:01 - six units the same thing is extremely
03:04 - easy to do in three dimensions as well
03:05 - all the vectors now simply have a third
03:07 - component the z axis which is also added
03:10 - into the formula at this point you might
03:12 - be thinking why do I need to know all of
03:14 - this my game engine has an easy function
03:16 - for getting the distance between two
03:17 - points in space well an example of why
03:20 - this knowledge might be useful to you is
03:21 - the fact that it has just allowed us to
03:23 - make a very important optimization in
03:25 - our code say that we are making a racing
03:27 - game and we have two players a and B who
03:30 - are competing to reach the goal and in
03:32 - our game we want to display who is
03:34 - currently ahead in that case we might
03:35 - subtract the position of each player
03:37 - from the position of the goal to get two
03:39 - vectors from our players to the goal we
03:41 - could then get the length of each vector
03:43 - using the form left from before and
03:44 - compare them to find out which car is
03:46 - closest however using the square root of
03:48 - Raider can be pretty taxing on the
03:50 - computer and doing this calculation a
03:52 - lot of times during a game might lead to
03:53 - performance issues since that we could
03:55 - simply remove the square root and only
03:57 - compare the remaining x squared plus y
03:59 - squared this doesn't give us the actual
04:01 - length of the two vectors but it still
04:03 - shows what vectors greater than the
04:04 - other which makes it perfect for doing a
04:06 - comparison between the two so that is
04:08 - pretty much all I have to show for this
04:10 - video if you're interested in learning
04:11 - more about vectors that's the link for
04:13 - that in the description hope you enjoyed
04:15 - the first part of game math Theory next
04:17 - I hope to cover the magic of sine waves
04:19 - if you want to support the series you
04:21 - can do so on my patreon page thanks for
04:23 - watching and I'll see you in the next
04:25 - thank you so much to all of the awesome
04:26 - patreon supporters who donated in August
04:28 - and the special thanks to our and Metta
04:30 - Robert Rogers Calhoun Vixen P and Andrew
04:33 - K

Cleaned transcript:

this video is brought to you by our own Metta thank you so much for donating if you want to support breakage yourself you can go to patreon.com/scishow so we want to welcome to the first video in the patreon funded game math theory a series that covers essential mathematical concepts that you will definitely run into during your game development career today we will be looking at vectors before we get into how a vector is defined let's have a look at why they're useful vectors are often used when we want to move a character around the scene let's say that we want to move our character two units to the right and one unit up what we essentially do is create a vector which we represent with an arrow that points in that direction we can then add this vector on to the position of our character to make him move if we were to write down this vector mathematically we would write to one because the vector moves to one the x + 1 on the Y we say that a vector is defined by direction and a length in our case the direction of the vector is where we want our character to point and the length of the vector is how far our character should walk in that direction if we wanted our character to then move one unit to the left we would make a new vector with the coordinates minus one zero because the vector goes minus 1 on the X and zero on the Y however you will quickly notice that the coordinates only show what the vector looks like and not where we should place it in the scene that is because vectors don't have any inherent position that allows us to draw it anywhere we want it is only when we combine it with the position of our character that the vector adds anything meaningful to our example now let's look at another example where victors come in handy say we have a scene with two players player a and player B and we want to find the distance between the two well both players have a position which means where they are in relationship to the center of our level in this example player a has a position of two one because he's two units from the center on the X and one unit from the center on the Y likewise player B has a position of 1/4 because he's one unit from the center on the X and four units from the center on the Y we can now create a vector that points from player a to player B to do this we subtract the position of player a from the position of player B this is done in the easiest way possible by first subtracting the X components 1 minus 2 equals 1 then we subtract the Y components 4 minus 1 equals three and the result is a vector with the coordinates minus one three let's try to draw this in our scene we can see that the vector correct it goes from player a to player B but how do we calculate the length of this vector that is in fact really easy the length of a vector can be written as the square root of x squared plus y squared note that the length of a vector is referred to as the vectors magnitude if you wonder why the length of a vector is defined using this particular formula you can try to think of the vector as the hypotenuse of the triangle created by the vector coordinates and then use Pythagoras theorem to calculate the length of that side but you could of course just use the formula as is so if we want to calculate the distance between our players we simply insert the x and y coordinates of the vector into the formula and voila the distance from player a to player B is three point one six units the same thing is extremely easy to do in three dimensions as well all the vectors now simply have a third component the z axis which is also added into the formula at this point you might be thinking why do I need to know all of this my game engine has an easy function for getting the distance between two points in space well an example of why this knowledge might be useful to you is the fact that it has just allowed us to make a very important optimization in our code say that we are making a racing game and we have two players a and B who are competing to reach the goal and in our game we want to display who is currently ahead in that case we might subtract the position of each player from the position of the goal to get two vectors from our players to the goal we could then get the length of each vector using the form left from before and compare them to find out which car is closest however using the square root of Raider can be pretty taxing on the computer and doing this calculation a lot of times during a game might lead to performance issues since that we could simply remove the square root and only compare the remaining x squared plus y squared this doesn't give us the actual length of the two vectors but it still shows what vectors greater than the other which makes it perfect for doing a comparison between the two so that is pretty much all I have to show for this video if you're interested in learning more about vectors that's the link for that in the description hope you enjoyed the first part of game math Theory next I hope to cover the magic of sine waves if you want to support the series you can do so on my patreon page thanks for watching and I'll see you in the next thank you so much to all of the awesome patreon supporters who donated in August and the special thanks to our and Metta Robert Rogers Calhoun Vixen P and Andrew K
