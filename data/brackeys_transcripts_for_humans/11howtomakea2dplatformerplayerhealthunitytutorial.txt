With timestamps:

00:00 - thanks for tuning in at brakus no one
00:03 - will come to video number eleven in the
00:06 - how to make a 2d platformer course in
00:08 - today's video we're going to be taking a
00:10 - look at what will happen and when our
00:13 - player falls to the ground because right
00:16 - now it doesn't look too good I mean the
00:19 - background sprites are revealed and he
00:22 - just Falls to infinity and all that so
00:24 - that's what we're going to take care of
00:25 - today and we're also going to implement
00:27 - some it like a cool framework some
00:31 - systems that we're going to be using for
00:33 - future functionality so awesome video
00:37 - today also I just quickly want to say
00:40 - that if you have any questions
00:42 - throughout this video please go ahead
00:44 - and visit forum Pacis calm where i among
00:48 - many other developers are ready to
00:51 - answer your questions it's amazing we
00:53 - just hit a thousand members and we have
00:56 - an average reply per thread of just
01:01 - about 6 so that means for every third
01:03 - thread there is an average of just about
01:06 - 6 replies so it's a really great place
01:08 - to go for answers cool so that intro out
01:14 - of the way let's just go ahead and get
01:15 - started so first off let's clamp the
01:19 - camera you can see I've created its do
01:22 - list here and the first thing we want to
01:24 - do is make sure that the camera doesn't
01:27 - reveal all of the different stuff going
01:30 - on here we just wanted to stop simply so
01:33 - we can do that by clamping it and what I
01:35 - mean by that is we are going to select
01:37 - our main camera we're going to double
01:39 - click on the camera to the fellow script
01:42 - to open it up in monodevelop then we're
01:44 - just going to zoom in on this a bit and
01:46 - then down here right before we apply the
01:51 - new position that we've created here and
01:55 - done all the calculations to right
01:58 - before we apply that to the transform
02:01 - position of the actual camera we want to
02:04 - do what is called clamming it so we want
02:06 - to create a arrow we want to set this
02:10 - new position
02:12 - a new vector3 which we are then going to
02:17 - give a new position data X we want the X
02:20 - to remain the same no reason not to be
02:23 - able to move on the x axis then we want
02:26 - to do all of the clamping here so we're
02:29 - going to do that in the sec and then we
02:31 - want the seed to be just new position
02:33 - dot Z and just close that off so by
02:38 - clamping what I mean is we are going to
02:40 - use the math dot clamp function and what
02:43 - this does math that clamp is it takes in
02:49 - three values all of them floats the
02:52 - first one is the value that we want to
02:54 - clamp and then a minimum and a maximum
02:56 - value and it will simply make sure that
02:59 - the value that we put in which is going
03:01 - to be our new position that Y doesn't
03:04 - exceed or go below the minimum and
03:07 - maximum value so if the the position is
03:11 - more than what we want it to be is
03:13 - simply going to set it to the max value
03:15 - that we give it so first off we are
03:18 - going to say new position dot y the
03:20 - system this is the value that we want to
03:24 - clamp comma then the minimum value and
03:27 - in here we can do maybe a variable
03:30 - that's sets it but I'm just going to
03:33 - hard-code it 2-1 just for a second and
03:36 - then the maximum which we don't really
03:40 - want to put anything any restrictions on
03:43 - so let's just do math dot infinity and
03:46 - then close it off remember to close off
03:49 - the parenthesis there or it's going to
03:51 - throw an error so what we can do now is
03:53 - we can simply scroll up here make
03:55 - another public float public float and
03:59 - simply call this maybe why pause
04:06 - restriction or boundary or whatever you
04:09 - want to do and we can simply set this to
04:13 - maybe minus one to start out with so we
04:16 - can simply put that down here so Y
04:19 - position restriction and that's
04:22 - basically it so now when we save this
04:24 - heading to unity you
04:25 - see that we have a new float here that
04:28 - we can adjust and when we now it play
04:30 - and try to jump down you can see that
04:34 - our camera simply locks in place so
04:37 - that's super awesome and it's really
04:39 - cool because our guy falls behind the
04:41 - foreground and so he almost like
04:43 - disappears cool so next thing we're
04:49 - going to do we are going to take a look
04:51 - at the to-do list is what is creating a
04:54 - player script and this plane script is
04:57 - going to do it can host all that kinds
05:00 - of different functionality today it's
05:03 - just going to take care of him falling
05:05 - and dying but we could do large lots
05:08 - lots of stuff in the future with this so
05:12 - let's make a new script of types c-sharp
05:16 - put it on the player and let's just call
05:18 - this player now we can double click this
05:21 - to open it up in monodevelop
05:22 - and let's go ahead and first off to lead
05:25 - the to default functions we are not
05:27 - going to be needing those right now at
05:29 - least and the first thing that we want
05:34 - to do inside of this player script is
05:36 - create a player stats class because what
05:41 - we could do inside of this is make a
05:43 - variable a public float called health
05:46 - and d fold it to let's say 100 and then
05:51 - we could do all kinds of different stuff
05:53 - with this health we could have functions
05:55 - that maybe subtracts or adds to it or
05:59 - whatever you want to do just like we
06:02 - normally do but since this public class
06:06 - player is so diverse and can do so many
06:09 - things I mean our player is going to do
06:11 - all kinds of stuff maybe in the future
06:13 - then having just a health value here can
06:18 - be confusing when it's maybe bundled in
06:21 - with all kinds of other different
06:23 - functionality so what we are going to do
06:25 - instead is we are going to use a class
06:27 - within a class to kind of group
06:32 - functionality together so let's just
06:35 - keep this public float health for now
06:36 - and then let's make a public class
06:39 - us inside of the player class and let's
06:42 - call this player stats so this class is
06:46 - going to hold everything that has to do
06:49 - with the player stats so just make again
06:54 - this is a player stats class so we can
06:57 - simply open and close the brackets and
06:59 - inside of here is where we are then
07:02 - going to put our health just like this
07:08 - then we want to actually stored an
07:11 - instance of this player stats class in a
07:15 - variable because right now if we would
07:17 - say in the start function whoops I just
07:21 - wrote some JavaScript so let's say if we
07:24 - in the for example start function we're
07:27 - to now let's say subtract the health
07:30 - with ten then this would not work
07:37 - because we have to access the health
07:40 - within the player stats class so you
07:42 - might think well then let's just write
07:44 - player stats dot health but this will
07:47 - not work either because this class that
07:50 - we've made here is like the definition
07:52 - of a class we have to also create an
07:56 - instance for it so what we do is we use
08:00 - we create a public and now we treat the
08:04 - player stats class as a type so we
08:07 - simply say we want to create a public
08:09 - player stats variable and we're just
08:13 - going to call this maybe player stats
08:15 - with a non capital P just to know that
08:18 - this let let people know that this is an
08:21 - instance and we equal it to a new player
08:24 - stats like this and remember the
08:29 - parentheses to for initializing it and
08:32 - then in here we then you say player
08:36 - stats but with a non capital P so now we
08:39 - are taking this definition of how the
08:43 - class should look and creating it in a
08:45 - variable we are instantiating it
08:47 - creating an instance of it of the new
08:50 - player stats class and
08:53 - we're changing the health value so but
08:56 - we don't want to just start out
08:58 - subtracting health instead we want to
09:00 - create a damage player method that we
09:03 - can call whenever we want to damage the
09:05 - player in any way this can be called for
09:07 - example from an enemy or from the player
09:10 - script itself and it's really up to you
09:15 - whether or not you want to do this
09:17 - inside of the player stats class or out
09:20 - here but just for making this a bit
09:24 - easier to understand maybe I'm going to
09:26 - do it within the player class so we're
09:31 - going to write public void we want this
09:37 - to be a public method because we're
09:38 - going to call it from other scripts we
09:40 - don't want it to be static because we
09:42 - still want a reference to the player I'm
09:44 - getting very programmatically correct
09:47 - now because we are so fine in the series
09:50 - if there are some things you don't quite
09:52 - catch up on yet that's completely fine
09:55 - this class and instances of classes and
09:57 - all that can be really difficult for
09:59 - people to understand in the beginning
10:00 - but just bear with me so we're going to
10:03 - create a public void and we are going to
10:05 - call this damaged player and yes this is
10:09 - a single m2 those of you who've been
10:11 - with with me from the beginning and now
10:15 - we are going to simply take in an
10:17 - argument we've talked about arguments
10:20 - before which is going to be a float and
10:24 - actually let's make the health an
10:26 - integer there's no reason for that being
10:28 - a float so let's just do health as an
10:31 - integer and here we'll do an int as well
10:34 - so we'll do an integer and we're going
10:38 - to call this damage you could also call
10:41 - it amount whatever you want to do and
10:43 - inside of this we are going to take the
10:45 - player stats with a non-capital P and we
10:49 - gonna say dot health minus equals damage
10:56 - and what we can do now is we can then
10:59 - check if our health player stats
11:06 - dot health is less than or equal to zero
11:11 - and if it is we are going to kill the
11:17 - player oops
11:23 - and that's basically all we're going to
11:28 - do inside of the player class right now
11:31 - so now we can create a game master
11:34 - script with a kill player method so to
11:39 - do this what we do is we we head inside
11:42 - of unity and we find our GM object hit
11:49 - add component new script and to create a
11:52 - c-sharp script called game master we
11:55 - could be killing the player from the
11:58 - player object itself from the player
12:00 - script but let's say we want to do stuff
12:03 - like respawning or maybe creating some
12:06 - particles or adding delays or animations
12:09 - whatever we want to do it's great to do
12:12 - this outside of the game object that
12:14 - we're destroying so therefore I like to
12:18 - have a game master class that takes care
12:21 - of stuff like instantiating and removing
12:26 - players or enemies or whatever so let's
12:30 - hit create an ADD let's double click
12:32 - this to open it up in monodevelop let's
12:35 - delete the two standard functions and
12:38 - inside of this game a master class we
12:41 - simply want to start out by creating a
12:43 - public void and we're going to call this
12:49 - kill player and all of all this function
12:55 - is going to do for now is simply destroy
12:59 - the player but we need a a reference to
13:04 - the player that we want to destroy so
13:07 - what we can do is we can put in an
13:10 - argument here just like we've done so
13:12 - many times before and we could give it a
13:15 - type of game object or a transform
13:18 - calling it players
13:20 - here and then simply putting in the
13:22 - player here but instead what we could
13:26 - pass it is the player player class as a
13:32 - a type we simply pass it in this player
13:36 - type because then we can start to change
13:39 - its maybe change it health its health or
13:43 - do different things in here now we have
13:46 - access to all of this stuff so we're
13:49 - just going to pass it the the player
13:52 - here and then we're going the inside the
13:55 - destroy we're going to do player game
13:57 - object because the destroy expects a
13:59 - game object to destroy so if that didn't
14:03 - make too much sense again just ignore it
14:05 - you can also put in the game object for
14:07 - now it's going to wake just as fine but
14:10 - with this we are more future-proof now
14:14 - we want to actually call this kill
14:18 - player and we can do that here so now we
14:21 - just want to say game master dot kill
14:25 - whoops forgot we want this to be a
14:28 - public static void because we don't want
14:32 - a reference to the game master every
14:34 - time we want to kill a player we simply
14:36 - make it static so we can kill it from
14:39 - everywhere and then we pass the
14:41 - reference to our player in here so now
14:45 - it's a static we can simply write game
14:47 - master dot kill player and pass it
14:52 - simply type in this this is the crib
14:57 - equivalent of writing game object if
15:00 - that was one you wanted to pass or
15:03 - transform if that was what you wanted to
15:05 - send over instead we are just going to
15:08 - send it with the player so we simply
15:11 - type this and now everything is actually
15:16 - working just fine you can see that we
15:18 - have no errors but nothing will actually
15:22 - happen because we have no method of
15:24 - checking whether not with we fell down
15:27 - so that's the the next thing we are
15:30 - going to do almost the final point is we
15:33 - kill the player if he falls down so to
15:36 - do this we are going to make an update
15:38 - function inside of the player class here
15:41 - so we're going to do right before the
15:45 - damage player you're going to say Perez
15:47 - no this is just going to be avoided and
15:49 - we're going to call it update and inside
15:51 - of the update function all we want to
15:53 - check for it is if let's say if the
16:01 - transform dot position dot Y is less
16:08 - than or equal to and then we could do
16:11 - maybe minus 20 we can try with that
16:14 - maybe maybe let's even yeah let's even
16:18 - add a variable that that will store this
16:24 - number so but if it's less than or equal
16:28 - to minus 20 we are simply going to
16:30 - damage our player and we are going to
16:34 - damage him with math dot infinity so
16:39 - that's going to make sure to kill him
16:41 - just going to turn up the brightness on
16:44 - my display here cool so if it's if we
16:48 - fell down to this point or under we are
16:53 - going to damage our player with infinity
16:55 - which is then going to call the game
16:57 - master kill player which is going to
17:00 - destroy the player object this is a very
17:02 - complex way of doing something pretty
17:05 - simple but now we can add all kinds of
17:08 - stuff to this I mean we can maybe make
17:10 - death animations or create certain music
17:14 - and a respawn timer and all that stuff
17:17 - now becomes very easy to do so now that
17:21 - we've set this up let's just quickly
17:22 - make a variable called let's do player
17:28 - is to fall Y position or fall boundary
17:36 - and we can call this or equal this to
17:41 - let's do negative 20 and it's of course
17:44 - going to be of type
17:46 - em and then we can simply instead of
17:49 - writing negative 20 here no hard-coding
17:52 - we can simply put in the fall boundary
17:54 - so now we have access to it inside of
17:58 - unity and everything should now be
18:00 - working so if we select our player you
18:02 - whoops we have an error okay so I'm back
18:06 - I don't know what I was thinking there
18:08 - of course math that infinity doesn't is
18:12 - not able to be cast into a a integer so
18:16 - what we're going to do instead is we're
18:17 - simply going to put in a very high
18:18 - number it's it's it's that basic so
18:20 - let's just do nine nine nine nine nine
18:22 - nine and we're going to make sure that
18:25 - our player is killed this way and now
18:28 - when we go into unity should see no
18:30 - errors and indeed our fault boundary
18:32 - appears and what is wrong here our
18:38 - health is not appearing and this is a
18:41 - trap that many many new unity users fall
18:44 - into they say I created this class I've
18:47 - I've make sure that it's we've create an
18:51 - instance of the class but I can't see
18:54 - the variables in the inspector even
18:57 - though I've made sure that the health is
18:59 - public and the reason why is we need to
19:03 - tell unity that this is a serializable
19:06 - class so to do this right before the
19:10 - player stats class we're going to create
19:13 - these two brackets and inside of them
19:16 - right system dot serializable so this
19:20 - will make sure that when we save this
19:23 - and head into unity we can now see the
19:26 - class and it's even collapsible and the
19:28 - health and we can just change it in here
19:31 - so now when we hit play and jump down we
19:35 - are going to get an error but everything
19:36 - is going to work other than that so you
19:39 - can see that our player was removed but
19:43 - now our main camera is throwing us an
19:46 - error and that's the reason why is it it
19:49 - no longer has a target to follow and so
19:52 - we get a missing reference exception so
19:56 - let's just open up the camera to the
19:58 - follow script and
19:59 - the update function before we do
20:01 - anything else we simply want to type in
20:04 - if target is equal to null then return
20:13 - this will make sure that this code will
20:15 - only get called when it has a target to
20:19 - follow so now when we hit play and that
20:22 - was the last thing on our list now
20:24 - everything should work we followed seven
20:28 - steps and now when we jump down our
20:32 - player gets deleted and our main camera
20:36 - stands still so that was it for handling
20:40 - what happens when we fall it down I
20:42 - think we're going to have to wait with
20:44 - respawning the player until the next
20:47 - video so thanks for watching I hope you
20:49 - enjoyed it and that you were able to
20:52 - follow along with all of this coding but
20:54 - once you understand these methods of
20:56 - building systems inside of of c-sharp
21:00 - you can suddenly do much more powerful
21:03 - things and things later on when your
21:05 - project get more complex will get more
21:08 - much much easier so again thanks for
21:11 - watching and I'll see you in the next
21:13 - video
21:14 - [Music]
21:16 - you
21:16 - [Music]

Cleaned transcript:

thanks for tuning in at brakus no one will come to video number eleven in the how to make a 2d platformer course in today's video we're going to be taking a look at what will happen and when our player falls to the ground because right now it doesn't look too good I mean the background sprites are revealed and he just Falls to infinity and all that so that's what we're going to take care of today and we're also going to implement some it like a cool framework some systems that we're going to be using for future functionality so awesome video today also I just quickly want to say that if you have any questions throughout this video please go ahead and visit forum Pacis calm where i among many other developers are ready to answer your questions it's amazing we just hit a thousand members and we have an average reply per thread of just about 6 so that means for every third thread there is an average of just about 6 replies so it's a really great place to go for answers cool so that intro out of the way let's just go ahead and get started so first off let's clamp the camera you can see I've created its do list here and the first thing we want to do is make sure that the camera doesn't reveal all of the different stuff going on here we just wanted to stop simply so we can do that by clamping it and what I mean by that is we are going to select our main camera we're going to double click on the camera to the fellow script to open it up in monodevelop then we're just going to zoom in on this a bit and then down here right before we apply the new position that we've created here and done all the calculations to right before we apply that to the transform position of the actual camera we want to do what is called clamming it so we want to create a arrow we want to set this new position a new vector3 which we are then going to give a new position data X we want the X to remain the same no reason not to be able to move on the x axis then we want to do all of the clamping here so we're going to do that in the sec and then we want the seed to be just new position dot Z and just close that off so by clamping what I mean is we are going to use the math dot clamp function and what this does math that clamp is it takes in three values all of them floats the first one is the value that we want to clamp and then a minimum and a maximum value and it will simply make sure that the value that we put in which is going to be our new position that Y doesn't exceed or go below the minimum and maximum value so if the the position is more than what we want it to be is simply going to set it to the max value that we give it so first off we are going to say new position dot y the system this is the value that we want to clamp comma then the minimum value and in here we can do maybe a variable that's sets it but I'm just going to hardcode it 21 just for a second and then the maximum which we don't really want to put anything any restrictions on so let's just do math dot infinity and then close it off remember to close off the parenthesis there or it's going to throw an error so what we can do now is we can simply scroll up here make another public float public float and simply call this maybe why pause restriction or boundary or whatever you want to do and we can simply set this to maybe minus one to start out with so we can simply put that down here so Y position restriction and that's basically it so now when we save this heading to unity you see that we have a new float here that we can adjust and when we now it play and try to jump down you can see that our camera simply locks in place so that's super awesome and it's really cool because our guy falls behind the foreground and so he almost like disappears cool so next thing we're going to do we are going to take a look at the todo list is what is creating a player script and this plane script is going to do it can host all that kinds of different functionality today it's just going to take care of him falling and dying but we could do large lots lots of stuff in the future with this so let's make a new script of types csharp put it on the player and let's just call this player now we can double click this to open it up in monodevelop and let's go ahead and first off to lead the to default functions we are not going to be needing those right now at least and the first thing that we want to do inside of this player script is create a player stats class because what we could do inside of this is make a variable a public float called health and d fold it to let's say 100 and then we could do all kinds of different stuff with this health we could have functions that maybe subtracts or adds to it or whatever you want to do just like we normally do but since this public class player is so diverse and can do so many things I mean our player is going to do all kinds of stuff maybe in the future then having just a health value here can be confusing when it's maybe bundled in with all kinds of other different functionality so what we are going to do instead is we are going to use a class within a class to kind of group functionality together so let's just keep this public float health for now and then let's make a public class us inside of the player class and let's call this player stats so this class is going to hold everything that has to do with the player stats so just make again this is a player stats class so we can simply open and close the brackets and inside of here is where we are then going to put our health just like this then we want to actually stored an instance of this player stats class in a variable because right now if we would say in the start function whoops I just wrote some JavaScript so let's say if we in the for example start function we're to now let's say subtract the health with ten then this would not work because we have to access the health within the player stats class so you might think well then let's just write player stats dot health but this will not work either because this class that we've made here is like the definition of a class we have to also create an instance for it so what we do is we use we create a public and now we treat the player stats class as a type so we simply say we want to create a public player stats variable and we're just going to call this maybe player stats with a non capital P just to know that this let let people know that this is an instance and we equal it to a new player stats like this and remember the parentheses to for initializing it and then in here we then you say player stats but with a non capital P so now we are taking this definition of how the class should look and creating it in a variable we are instantiating it creating an instance of it of the new player stats class and we're changing the health value so but we don't want to just start out subtracting health instead we want to create a damage player method that we can call whenever we want to damage the player in any way this can be called for example from an enemy or from the player script itself and it's really up to you whether or not you want to do this inside of the player stats class or out here but just for making this a bit easier to understand maybe I'm going to do it within the player class so we're going to write public void we want this to be a public method because we're going to call it from other scripts we don't want it to be static because we still want a reference to the player I'm getting very programmatically correct now because we are so fine in the series if there are some things you don't quite catch up on yet that's completely fine this class and instances of classes and all that can be really difficult for people to understand in the beginning but just bear with me so we're going to create a public void and we are going to call this damaged player and yes this is a single m2 those of you who've been with with me from the beginning and now we are going to simply take in an argument we've talked about arguments before which is going to be a float and actually let's make the health an integer there's no reason for that being a float so let's just do health as an integer and here we'll do an int as well so we'll do an integer and we're going to call this damage you could also call it amount whatever you want to do and inside of this we are going to take the player stats with a noncapital P and we gonna say dot health minus equals damage and what we can do now is we can then check if our health player stats dot health is less than or equal to zero and if it is we are going to kill the player oops and that's basically all we're going to do inside of the player class right now so now we can create a game master script with a kill player method so to do this what we do is we we head inside of unity and we find our GM object hit add component new script and to create a csharp script called game master we could be killing the player from the player object itself from the player script but let's say we want to do stuff like respawning or maybe creating some particles or adding delays or animations whatever we want to do it's great to do this outside of the game object that we're destroying so therefore I like to have a game master class that takes care of stuff like instantiating and removing players or enemies or whatever so let's hit create an ADD let's double click this to open it up in monodevelop let's delete the two standard functions and inside of this game a master class we simply want to start out by creating a public void and we're going to call this kill player and all of all this function is going to do for now is simply destroy the player but we need a a reference to the player that we want to destroy so what we can do is we can put in an argument here just like we've done so many times before and we could give it a type of game object or a transform calling it players here and then simply putting in the player here but instead what we could pass it is the player player class as a a type we simply pass it in this player type because then we can start to change its maybe change it health its health or do different things in here now we have access to all of this stuff so we're just going to pass it the the player here and then we're going the inside the destroy we're going to do player game object because the destroy expects a game object to destroy so if that didn't make too much sense again just ignore it you can also put in the game object for now it's going to wake just as fine but with this we are more futureproof now we want to actually call this kill player and we can do that here so now we just want to say game master dot kill whoops forgot we want this to be a public static void because we don't want a reference to the game master every time we want to kill a player we simply make it static so we can kill it from everywhere and then we pass the reference to our player in here so now it's a static we can simply write game master dot kill player and pass it simply type in this this is the crib equivalent of writing game object if that was one you wanted to pass or transform if that was what you wanted to send over instead we are just going to send it with the player so we simply type this and now everything is actually working just fine you can see that we have no errors but nothing will actually happen because we have no method of checking whether not with we fell down so that's the the next thing we are going to do almost the final point is we kill the player if he falls down so to do this we are going to make an update function inside of the player class here so we're going to do right before the damage player you're going to say Perez no this is just going to be avoided and we're going to call it update and inside of the update function all we want to check for it is if let's say if the transform dot position dot Y is less than or equal to and then we could do maybe minus 20 we can try with that maybe maybe let's even yeah let's even add a variable that that will store this number so but if it's less than or equal to minus 20 we are simply going to damage our player and we are going to damage him with math dot infinity so that's going to make sure to kill him just going to turn up the brightness on my display here cool so if it's if we fell down to this point or under we are going to damage our player with infinity which is then going to call the game master kill player which is going to destroy the player object this is a very complex way of doing something pretty simple but now we can add all kinds of stuff to this I mean we can maybe make death animations or create certain music and a respawn timer and all that stuff now becomes very easy to do so now that we've set this up let's just quickly make a variable called let's do player is to fall Y position or fall boundary and we can call this or equal this to let's do negative 20 and it's of course going to be of type em and then we can simply instead of writing negative 20 here no hardcoding we can simply put in the fall boundary so now we have access to it inside of unity and everything should now be working so if we select our player you whoops we have an error okay so I'm back I don't know what I was thinking there of course math that infinity doesn't is not able to be cast into a a integer so what we're going to do instead is we're simply going to put in a very high number it's it's it's that basic so let's just do nine nine nine nine nine nine and we're going to make sure that our player is killed this way and now when we go into unity should see no errors and indeed our fault boundary appears and what is wrong here our health is not appearing and this is a trap that many many new unity users fall into they say I created this class I've I've make sure that it's we've create an instance of the class but I can't see the variables in the inspector even though I've made sure that the health is public and the reason why is we need to tell unity that this is a serializable class so to do this right before the player stats class we're going to create these two brackets and inside of them right system dot serializable so this will make sure that when we save this and head into unity we can now see the class and it's even collapsible and the health and we can just change it in here so now when we hit play and jump down we are going to get an error but everything is going to work other than that so you can see that our player was removed but now our main camera is throwing us an error and that's the reason why is it it no longer has a target to follow and so we get a missing reference exception so let's just open up the camera to the follow script and the update function before we do anything else we simply want to type in if target is equal to null then return this will make sure that this code will only get called when it has a target to follow so now when we hit play and that was the last thing on our list now everything should work we followed seven steps and now when we jump down our player gets deleted and our main camera stands still so that was it for handling what happens when we fall it down I think we're going to have to wait with respawning the player until the next video so thanks for watching I hope you enjoyed it and that you were able to follow along with all of this coding but once you understand these methods of building systems inside of of csharp you can suddenly do much more powerful things and things later on when your project get more complex will get more much much easier so again thanks for watching and I'll see you in the next video you
