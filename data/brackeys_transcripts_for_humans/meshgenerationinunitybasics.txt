With timestamps:

00:00 - one of the really powerful things you
00:01 - can do with programming is generating
00:03 - your own meshes this is used in a bunch
00:05 - of games from minecraft to no man's sky
00:08 - to create effects like water or entire
00:10 - procedurally generated walls so in this
00:13 - video we'll start by creating our first
00:14 - mesh through code but first this video
00:16 - is sponsored by specialist from
00:18 - improvable special Louis is a cloud
00:20 - platform that makes it easier than ever
00:22 - to build and host online games it comes
00:24 - with a set of tools to host your game
00:26 - globally and deployed within seconds
00:28 - they just launched a really awesome
00:29 - integration with unity called the
00:31 - spatial OS game development kit the GDK
00:34 - comes with the FPS starter project and a
00:36 - set of pre-made feature modules that
00:38 - enable online gameplay out of the box
00:40 - you get libraries for it transforms
00:42 - shooting and a character controller all
00:44 - working in a multiplayer environment all
00:46 - the source is there and you can get
00:47 - started now building on top of the FPS
00:49 - started project it is completely free to
00:51 - download and start developing but you
00:53 - will of course need a valid unity
00:54 - license to use to TDK so if you want to
00:57 - make your own online multiplayer game
00:58 - simply click the link in description and
01:00 - get started
01:01 - also special thanks to Andrew Cullen
01:02 - Enco art Arman true VR systems simmer I
01:05 - owe extender player Cheeta 3d weather
01:07 - maker and infinity PPR for that support
01:09 - on patreon alright let's generate some
01:11 - objects so the first thing that we need
01:13 - to do is create an object for our mesh
01:15 - to do this we'll go create empty and
01:18 - let's name it something like mesh
01:19 - generator we can also reset our
01:22 - transform here and we now need to add
01:24 - two components to this object we need to
01:26 - add a mesh filter as well as a mesh
01:29 - renderer the mesh filter stores the mesh
01:32 - itself which contains all the
01:34 - information about the shape of our
01:36 - object if you're going here we can see
01:37 - that there are some default meshes to
01:39 - choose from such as a cubic capsule a
01:41 - cylinder and a plane the mesh renderer
01:44 - is responsible for taking this data and
01:46 - rendering the objects so we can actually
01:48 - see it this is also where we can apply a
01:50 - material so to generate our own mesh we
01:53 - of course need to create a script that
01:54 - does this
01:55 - let's hit add component and let's create
01:57 - a script called mesh generator and let's
02:00 - double click this to open it up in
02:01 - visual studio now a mesh can contain a
02:03 - bunch of different data that effects our
02:06 - object but the most important data which
02:08 - we're going to focus on in this video is
02:10 - vertices and triangles and unity any
02:13 - mesh is made up of
02:14 - a bunch of points called vertices each
02:16 - one of these vertices has a position in
02:19 - the world if we look at a quad we can
02:21 - see that it is made up of four vertices
02:24 - one for each corner and again each
02:26 - vertex has a position we can store these
02:29 - positions one after the other in an
02:31 - array this is what we call the vertex
02:33 - array now of course objects and Yundi
02:36 - are made up of more than points we still
02:38 - need to fill in the shape to do this we
02:40 - use triangles in the case of our quad
02:43 - here we can split up into two triangles
02:44 - the first triangle is made up of point 0
02:47 - 1 & 2 to show this triangle we would add
02:51 - the numbers 0 1 & 2 to another array
02:53 - this is the triangle array the second
02:56 - triangle is made up of point 1 2 & 3 to
03:00 - also show this triangle we add these
03:01 - numbers to our array as well notice how
03:04 - the two triangles have no problem
03:06 - sharing the same points we'll probably
03:07 - talk more about this in the future
03:09 - now that's one slight issue with the way
03:11 - we've set up our triangle array here and
03:13 - that is something called back face
03:15 - culling back face culling is a process
03:17 - that eliminates the backsides of
03:19 - triangles in other words if a triangle
03:21 - isn't facing in the right direction it's
03:23 - not going to be drawn most engines use
03:25 - this process for performance reasons
03:27 - because normally there's no reason to
03:29 - draw the inside of an object after all
03:32 - it's not going to be seen the way that
03:33 - unity determines what direction a
03:35 - triangle is facing is the order in which
03:37 - we feed it the points of our triangle in
03:40 - unity triangles are drawn clockwise this
03:43 - is fine for our first triangle here we
03:46 - go from 0 to 1 to 2 which is in the
03:49 - clockwise direction however for our
03:51 - second triangle we're currently going
03:53 - from 1 to 2 to 3 which is
03:55 - counterclockwise and so this triangle is
03:58 - facing the wrong way to fix this we can
04:00 - simply reorder the points for a second
04:02 - triangle to something like 1 2 3 to 2
04:05 - you can see we're now feeding the points
04:07 - clockwise in fact the order doesn't
04:09 - matter as long as it's clockwise we
04:11 - could just as well input 2 2 1 2 3 and
04:14 - it would work great now I know this can
04:16 - be super hard to wrap your head around
04:18 - in the beginning but as you start to
04:19 - experiment with it on your own I promise
04:22 - it gets much easier to visualize so
04:24 - inside of our script we can now create
04:26 - two arrays we can
04:27 - create an array of vertices and of
04:29 - course each vertex has three points so
04:32 - we'll make it a vector3 array and let's
04:35 - call it vertices we'd also create an
04:37 - array of triangles and this just needs
04:39 - to be an integer array let's call it
04:41 - triangles of course we also need to
04:43 - create a mesh objects
04:45 - luckily creating a new mesh is super
04:47 - easy let's first create a variable at
04:49 - the top here that we can store it in
04:51 - it's gonna be of type mesh and let's
04:53 - just call it mesh with a non-capital M
04:54 - then inside of our start method we can
04:56 - simply set mesh equal to a new mesh and
05:00 - that's all we need to do we've now
05:01 - created a new mesh object of course we
05:03 - also need to make sure to add this mesh
05:05 - that we just created to our mesh filter
05:08 - and doing this is pretty much just as
05:10 - easy we simply use getcomponent to get
05:12 - our mesh filter and we can then go dot
05:15 - mesh and set the mesh equal to the mesh
05:17 - we just created I'm just gonna go to the
05:19 - top of the class here and add require
05:22 - component type of mesh filter and this
05:25 - is just an attribute to make sure that
05:27 - there's always a mesh filter on the same
05:29 - object as the script just so we don't
05:31 - try to add a mesh to nothing also I'm
05:33 - just gonna get rid of the update method
05:35 - here so now we're ready to create the
05:37 - shape of our object let's create a
05:38 - separate function for this called create
05:40 - shape we then go void create shape there
05:44 - we go
05:45 - and inside this function we can first
05:46 - define some vertices and then some
05:49 - triangles to create vertices we go
05:51 - vertices equals a new vector3 array and
05:54 - we'll make sure to include the brackets
05:56 - we then open and close some curly
05:59 - brackets and at the end of these we'll
06:01 - add a semicolon as well and if you
06:03 - haven't seen this syntax before it's
06:04 - pretty handy it basically just allows us
06:06 - to specify a bunch of elements we want
06:08 - in our array so let's start by creating
06:10 - the first triangle here for that we'll
06:12 - need three points so I'm gonna create a
06:14 - new vector3 and this is going to be the
06:17 - first point it's going to start at zero
06:19 - zero zero I'm gonna create a comma here
06:22 - and now we can take this and copy it and
06:24 - paste it two more times now make sure to
06:27 - remove the last comma here so now we
06:28 - have three points but they're all
06:30 - currently at the center the second point
06:32 - here will offset by one on the Z so
06:35 - we'll go zero zero one and the third
06:37 - point that's offset that by one on the x
06:40 - going to be one zero zero and the y is
06:42 - going to be the same for all of them
06:44 - then we need to specify some triangles
06:46 - and we'll use the exact same syntax for
06:48 - this so we'll go triangles equals a new
06:51 - integer array we'll open a close some
06:53 - curly brackets add a semicolon and in
06:56 - here we can now specify the first
06:57 - triangle so this is going to go from
06:59 - point zero two one two two and that
07:02 - should actually be it we've now added a
07:04 - triangle however we haven't actually
07:06 - told our mesh to use any of this data
07:08 - let's do that in a separate function so
07:11 - we'll create a function here called
07:12 - update mesh and let's put it down here
07:15 - so void update mesh and in here we first
07:18 - want to make sure to clear our mesh for
07:20 - any previous data so we'll go mesh that
07:22 - clear and we can then simply input our
07:25 - vertex and triangle arrayed so mesh dot
07:27 - vertices equals vertices and mesh
07:30 - triangles equals triangles it's that
07:33 - symbol if we save this now and go into
07:36 - unity and hit play voila we're now
07:39 - generating a simple triangle mesh now of
07:41 - course notice that it's currently
07:42 - lacking a material and such shows this
07:44 - pretty ugly purple color but to change
07:46 - this we can simply go to the mesh
07:48 - renderer and choose a material if we
07:50 - just choose default diffuse there we go
07:52 - it's now affected by lighting now
07:54 - lighting is currently going to look a
07:56 - bit weird on our objects this might not
07:58 - be that clear here because we're just
08:00 - using a simple flat triangle but if you
08:02 - create more complex objects you're
08:04 - definitely going to see it and even just
08:06 - by changing around the light here you
08:07 - can see that it behaves pretty weirdly
08:09 - in fact it gets really bright when we
08:11 - shine it from underneath the reason for
08:13 - this is that unity uses another set of
08:16 - data called normals to calculate how
08:18 - lighting should look we could create
08:20 - this data ourselves much in the same way
08:22 - that we've done for vertices and
08:24 - triangles but 99% of the time we can
08:27 - have unity do this automatically which
08:29 - is really cool in fact doing this is as
08:31 - simple as going mesh dot recalculate
08:34 - normals and that's it
08:36 - if we say that make sure to assign a
08:38 - material again here because we assigned
08:40 - it in play mode and so it wasn't saved
08:42 - and play we can see that already it
08:44 - looks much brighter because the light is
08:46 - actually shining down on the surface now
08:48 - as we change around the lighting it
08:50 - actually reacts to the direction
08:53 - a fairly realistic fashion awesome so
08:55 - let's add an extra triangle to make our
08:57 - object into a quad doing this is super
08:59 - simple all we need to edit is the create
09:01 - shape method
09:01 - in fact for our vertices we just need to
09:04 - add one more point for the fourth corner
09:06 - of our quad so let's add a comma here we
09:09 - can go new vector3 and this is going to
09:11 - go one on the X zero on the Y and one on
09:14 - the Z as well and as for our triangles
09:17 - as we talked about earlier we now need
09:19 - to go 1 3 then 2 and if we save this and
09:22 - head into unity and play there we go we
09:25 - now have a quad pretty cool and as with
09:28 - any other object we can rotate it we can
09:30 - scale it we can move it around
09:32 - it's basically a completely normal unity
09:34 - object we can even add physics to it
09:36 - without any problem
09:38 - awesome and just to show you what would
09:40 - have happened if we didn't do the
09:42 - triangles in the correct order say we
09:44 - just went 1 2 and then 3 for the second
09:47 - triangle here you can see the result is
09:49 - that we're only drawing one triangle and
09:52 - if I go ahead and flip to the other side
09:54 - you can see the other triangle appears
09:56 - you can also see that it appears
09:58 - completely black because unity can't
10:00 - really calculate lighting on this
10:01 - because how do you light an object that
10:04 - looks like this so yeah we'll definitely
10:06 - just put that back awesome
10:09 - that's pretty much it for this video if
10:10 - you enjoyed it make sure to subscribe
10:12 - and ring that notification bell so you
10:13 - don't miss the next one also if you want
10:15 - to make your own online multiplayer game
10:17 - don't forget to click the link in the
10:18 - description and check out spacial OS
10:20 - also let us know if you like this type
10:22 - of more advanced tutorial this is of
10:23 - course just the tip of the iceberg when
10:25 - it comes to mesh generation there's
10:27 - still a bunch of stuff we could cover it
10:28 - like how to generate terrain or how to
10:30 - add color data to your meshes so again
10:32 - if you want to see anything like that
10:33 - definitely let us know in the comments
10:35 - on that thanks for watching and I will
10:37 - see you in the next video thanks of the
10:39 - awesome patreon supporters who donated
10:40 - in September and especial thanks to
10:42 - Andrew Kononenko art arming to VR
10:44 - systems simmer IO extended player
10:46 - cheetah 3d Jeff Johnson infinity PBR
10:49 - Sybok mummy danny sullivan chris sheriff
10:51 - abdullah pizza murphy thanks alone clear
10:53 - the set Vincent and skewer shreya ste
10:55 - der Kim's Kirk Ronan team a polar bear
10:58 - Bruins cat Noah Kiyosaki brother
11:00 - Larry tweed James Rogers Rob Baron
11:02 - become Vania Erasmus Robert bunker
11:05 - Jackson James P Anthony patent Q Swedish
11:07 - key and every see you guys
11:09 - ruff

Cleaned transcript:

one of the really powerful things you can do with programming is generating your own meshes this is used in a bunch of games from minecraft to no man's sky to create effects like water or entire procedurally generated walls so in this video we'll start by creating our first mesh through code but first this video is sponsored by specialist from improvable special Louis is a cloud platform that makes it easier than ever to build and host online games it comes with a set of tools to host your game globally and deployed within seconds they just launched a really awesome integration with unity called the spatial OS game development kit the GDK comes with the FPS starter project and a set of premade feature modules that enable online gameplay out of the box you get libraries for it transforms shooting and a character controller all working in a multiplayer environment all the source is there and you can get started now building on top of the FPS started project it is completely free to download and start developing but you will of course need a valid unity license to use to TDK so if you want to make your own online multiplayer game simply click the link in description and get started also special thanks to Andrew Cullen Enco art Arman true VR systems simmer I owe extender player Cheeta 3d weather maker and infinity PPR for that support on patreon alright let's generate some objects so the first thing that we need to do is create an object for our mesh to do this we'll go create empty and let's name it something like mesh generator we can also reset our transform here and we now need to add two components to this object we need to add a mesh filter as well as a mesh renderer the mesh filter stores the mesh itself which contains all the information about the shape of our object if you're going here we can see that there are some default meshes to choose from such as a cubic capsule a cylinder and a plane the mesh renderer is responsible for taking this data and rendering the objects so we can actually see it this is also where we can apply a material so to generate our own mesh we of course need to create a script that does this let's hit add component and let's create a script called mesh generator and let's double click this to open it up in visual studio now a mesh can contain a bunch of different data that effects our object but the most important data which we're going to focus on in this video is vertices and triangles and unity any mesh is made up of a bunch of points called vertices each one of these vertices has a position in the world if we look at a quad we can see that it is made up of four vertices one for each corner and again each vertex has a position we can store these positions one after the other in an array this is what we call the vertex array now of course objects and Yundi are made up of more than points we still need to fill in the shape to do this we use triangles in the case of our quad here we can split up into two triangles the first triangle is made up of point 0 1 & 2 to show this triangle we would add the numbers 0 1 & 2 to another array this is the triangle array the second triangle is made up of point 1 2 & 3 to also show this triangle we add these numbers to our array as well notice how the two triangles have no problem sharing the same points we'll probably talk more about this in the future now that's one slight issue with the way we've set up our triangle array here and that is something called back face culling back face culling is a process that eliminates the backsides of triangles in other words if a triangle isn't facing in the right direction it's not going to be drawn most engines use this process for performance reasons because normally there's no reason to draw the inside of an object after all it's not going to be seen the way that unity determines what direction a triangle is facing is the order in which we feed it the points of our triangle in unity triangles are drawn clockwise this is fine for our first triangle here we go from 0 to 1 to 2 which is in the clockwise direction however for our second triangle we're currently going from 1 to 2 to 3 which is counterclockwise and so this triangle is facing the wrong way to fix this we can simply reorder the points for a second triangle to something like 1 2 3 to 2 you can see we're now feeding the points clockwise in fact the order doesn't matter as long as it's clockwise we could just as well input 2 2 1 2 3 and it would work great now I know this can be super hard to wrap your head around in the beginning but as you start to experiment with it on your own I promise it gets much easier to visualize so inside of our script we can now create two arrays we can create an array of vertices and of course each vertex has three points so we'll make it a vector3 array and let's call it vertices we'd also create an array of triangles and this just needs to be an integer array let's call it triangles of course we also need to create a mesh objects luckily creating a new mesh is super easy let's first create a variable at the top here that we can store it in it's gonna be of type mesh and let's just call it mesh with a noncapital M then inside of our start method we can simply set mesh equal to a new mesh and that's all we need to do we've now created a new mesh object of course we also need to make sure to add this mesh that we just created to our mesh filter and doing this is pretty much just as easy we simply use getcomponent to get our mesh filter and we can then go dot mesh and set the mesh equal to the mesh we just created I'm just gonna go to the top of the class here and add require component type of mesh filter and this is just an attribute to make sure that there's always a mesh filter on the same object as the script just so we don't try to add a mesh to nothing also I'm just gonna get rid of the update method here so now we're ready to create the shape of our object let's create a separate function for this called create shape we then go void create shape there we go and inside this function we can first define some vertices and then some triangles to create vertices we go vertices equals a new vector3 array and we'll make sure to include the brackets we then open and close some curly brackets and at the end of these we'll add a semicolon as well and if you haven't seen this syntax before it's pretty handy it basically just allows us to specify a bunch of elements we want in our array so let's start by creating the first triangle here for that we'll need three points so I'm gonna create a new vector3 and this is going to be the first point it's going to start at zero zero zero I'm gonna create a comma here and now we can take this and copy it and paste it two more times now make sure to remove the last comma here so now we have three points but they're all currently at the center the second point here will offset by one on the Z so we'll go zero zero one and the third point that's offset that by one on the x going to be one zero zero and the y is going to be the same for all of them then we need to specify some triangles and we'll use the exact same syntax for this so we'll go triangles equals a new integer array we'll open a close some curly brackets add a semicolon and in here we can now specify the first triangle so this is going to go from point zero two one two two and that should actually be it we've now added a triangle however we haven't actually told our mesh to use any of this data let's do that in a separate function so we'll create a function here called update mesh and let's put it down here so void update mesh and in here we first want to make sure to clear our mesh for any previous data so we'll go mesh that clear and we can then simply input our vertex and triangle arrayed so mesh dot vertices equals vertices and mesh triangles equals triangles it's that symbol if we save this now and go into unity and hit play voila we're now generating a simple triangle mesh now of course notice that it's currently lacking a material and such shows this pretty ugly purple color but to change this we can simply go to the mesh renderer and choose a material if we just choose default diffuse there we go it's now affected by lighting now lighting is currently going to look a bit weird on our objects this might not be that clear here because we're just using a simple flat triangle but if you create more complex objects you're definitely going to see it and even just by changing around the light here you can see that it behaves pretty weirdly in fact it gets really bright when we shine it from underneath the reason for this is that unity uses another set of data called normals to calculate how lighting should look we could create this data ourselves much in the same way that we've done for vertices and triangles but 99% of the time we can have unity do this automatically which is really cool in fact doing this is as simple as going mesh dot recalculate normals and that's it if we say that make sure to assign a material again here because we assigned it in play mode and so it wasn't saved and play we can see that already it looks much brighter because the light is actually shining down on the surface now as we change around the lighting it actually reacts to the direction a fairly realistic fashion awesome so let's add an extra triangle to make our object into a quad doing this is super simple all we need to edit is the create shape method in fact for our vertices we just need to add one more point for the fourth corner of our quad so let's add a comma here we can go new vector3 and this is going to go one on the X zero on the Y and one on the Z as well and as for our triangles as we talked about earlier we now need to go 1 3 then 2 and if we save this and head into unity and play there we go we now have a quad pretty cool and as with any other object we can rotate it we can scale it we can move it around it's basically a completely normal unity object we can even add physics to it without any problem awesome and just to show you what would have happened if we didn't do the triangles in the correct order say we just went 1 2 and then 3 for the second triangle here you can see the result is that we're only drawing one triangle and if I go ahead and flip to the other side you can see the other triangle appears you can also see that it appears completely black because unity can't really calculate lighting on this because how do you light an object that looks like this so yeah we'll definitely just put that back awesome that's pretty much it for this video if you enjoyed it make sure to subscribe and ring that notification bell so you don't miss the next one also if you want to make your own online multiplayer game don't forget to click the link in the description and check out spacial OS also let us know if you like this type of more advanced tutorial this is of course just the tip of the iceberg when it comes to mesh generation there's still a bunch of stuff we could cover it like how to generate terrain or how to add color data to your meshes so again if you want to see anything like that definitely let us know in the comments on that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in September and especial thanks to Andrew Kononenko art arming to VR systems simmer IO extended player cheetah 3d Jeff Johnson infinity PBR Sybok mummy danny sullivan chris sheriff abdullah pizza murphy thanks alone clear the set Vincent and skewer shreya ste der Kim's Kirk Ronan team a polar bear Bruins cat Noah Kiyosaki brother Larry tweed James Rogers Rob Baron become Vania Erasmus Robert bunker Jackson James P Anthony patent Q Swedish key and every see you guys ruff
