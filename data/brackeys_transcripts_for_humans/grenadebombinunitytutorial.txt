With timestamps:

00:00 - in this explosive video we're going to
00:01 - create some bombs and grenades in unity
00:03 - towards the end it should look something
00:05 - like this
00:06 - let's just jump right into it so
00:08 - normally hand grenades can be split up
00:09 - into three parts
00:11 - part one means throwing the grenade but
00:13 - two is waiting X amount of seconds
00:15 - during which the grenade can bounce off
00:17 - the environment and part three years of
00:19 - course an explosion here we both want to
00:21 - create some kind of visual effect add
00:22 - forces to nearby objects as well as
00:24 - damage them so these are the three steps
00:27 - that will be following during this video
00:28 - let's start by focusing on the second
00:30 - one
00:31 - cerise assemble scene with some crates
00:32 - and some bottles from the western props
00:34 - pack if you want to use the same model
00:36 - so you can download them for free by
00:37 - using the link in the description so
00:39 - let's go ahead and add a grenade to our
00:41 - scene I've created a very similar
00:42 - grenade model in blender
00:44 - please don't make fun of it you can of
00:45 - course use any model that you'd like I'm
00:47 - just gonna take mine here and place it
00:49 - into the scene I'm also going to drag it
00:51 - up here and place it somewhere in the
00:53 - middle of the crates now we want to
00:54 - apply physics to this grenade so let's
00:57 - go ahead and add a new component and the
00:58 - first thing that we'll need is a
00:59 - Collider I think a capsule Collider
01:01 - works pretty well here if we open this
01:03 - up we can of course adjust the radius
01:05 - let's shrink that down a little bit we
01:07 - can also adjust the height and you can
01:09 - see this goes in the wrong direction so
01:11 - I'm gonna adjust this from Y to Z and
01:13 - now we can fit this to the grenade so I
01:15 - think that's close enough and the next
01:17 - component that we want to add is of
01:18 - course a rigidbody so now we should see
01:21 - that if we rotate our object over a
01:23 - little bit and hit play it's going to
01:25 - fall and land on our crates of course
01:27 - I've also made sure to go ahead and add
01:29 - a rigidbody and a box Collider on each
01:32 - of the crates as well as the bottles
01:34 - you'll also notice that there is
01:36 - currently a destructible script sitting
01:38 - on each of these objects this is in no
01:40 - way required and we'll talk about why
01:42 - it's here later so now our grenade is
01:44 - physics enabled and we're ready to give
01:46 - it some logic let's select our grenade
01:48 - let's hit add component and let's create
01:50 - a new script called grenade let's like C
01:52 - sharp and hit crane ad let's double
01:54 - click the script open it up in Visual
01:56 - Studio and the first thing that we want
01:57 - to add at the very top of our script is
01:59 - a variable that will control the delay
02:01 - before Ocwen aid explodes so we'll
02:03 - create a public float we'll call it
02:05 - delay and set it equal to about 3
02:07 - seconds and whenever we want to delay an
02:10 - action through script there are multiple
02:12 - ways to go about it one
02:13 - that I think works really well and that
02:15 - it's also fairly simple is by using a
02:17 - countdown variable so we'll go in here
02:19 - and create another float this one
02:21 - doesn't need to be public because we
02:22 - don't need to change it manually through
02:24 - the inspector we'll call it countdown
02:26 - then in our start method will set
02:28 - countdown equal to our delay so right
02:31 - when this grenade spawns its countdown
02:32 - is going to be three seconds then every
02:35 - frame so inside of our update loop we
02:37 - are going to reduce our countdown a tiny
02:39 - bit we're going to say countdown minus
02:41 - equals time Delta time remember time
02:44 - that Delta time is the amount of time
02:46 - path since we drew the last frame and if
02:48 - we reduce by this amount each frame
02:50 - we're essentially reducing our countdown
02:52 - by one each second so then what we can
02:54 - do is check if our countdown reaches
02:57 - zero so if countdown is less than or
02:59 - equal to zero
03:00 - well then three seconds have passed and
03:02 - we're ready to go ahead and explode for
03:05 - this we'll create a separate function
03:07 - void explode and this method is where
03:10 - we'll handle step three for now we can
03:12 - just throw a debug deadlock saying boom
03:15 - if we now save this script go into unity
03:18 - and hit play we can see that our innate
03:20 - false and after three seconds it says
03:23 - boom in the console however currently
03:25 - it's spams boom a whole bunch of times a
03:28 - second and we really only wanted to say
03:30 - this once
03:31 - to solve this we'll create another
03:33 - variable at the top this one is going to
03:35 - be of type boolean and we'll call it has
03:37 - exploded by default this is going to be
03:39 - false then when we're checking if our
03:41 - countdown has reached zero we also want
03:44 - to check if has exploded is equal to
03:46 - false and we can write this in shorthand
03:48 - notation by simply putting an
03:50 - exclamation mark in front of has
03:51 - exploded so now we only call explode if
03:54 - we haven't already exploded and then
03:56 - right after we explode we said has
03:58 - exploded to true now if we save this and
04:01 - hit play once more we should see that
04:03 - after three seconds we only get one
04:05 - message in the console awesome so now
04:08 - we're ready for step three I've been
04:10 - looking forward to this one now for this
04:12 - step will replace our message with some
04:14 - actual logic now this step can also be
04:16 - split into multiple parts and you might
04:18 - not want to have all of them depending
04:20 - on your game
04:21 - the first part is showing some kind of
04:23 - explosion effect the second is finding
04:25 - all nearby objects
04:27 - once we have these objects we can add
04:29 - forces to them in order to make them
04:31 - move away from the explosion as well as
04:33 - damage them and finally we want to get
04:36 - rid of our grenade so the first and last
04:38 - step here is actually really easy to
04:40 - show a cool effect we simply need to
04:42 - instantiate some particles to do that we
04:44 - first need a reference to the particles
04:46 - that we want to create we'll create a
04:48 - public game object and we'll call it
04:51 - explosion effect then when we want to
04:54 - show the effect we simply instantiate
04:56 - our explosion effect and we'll do that
04:59 - at the grenades current position and
05:01 - rotation so we'll use transform dot
05:03 - position
05:04 - come and transform dart rotation and
05:06 - that's really all we need to do here the
05:08 - last step is also really simple to
05:10 - remove the grenade we'll simply called
05:12 - destroy and then we'll insert our game
05:15 - object which is to create itself so now
05:17 - our grenade should visually be working
05:19 - if we save this go into unity and select
05:22 - our c√ºneyt you can see that we now have
05:24 - a slot for our explosion effect now I'm
05:26 - using the unity particle pack which is
05:29 - free of the asset store I'll of course
05:30 - have a link for this in the description
05:32 - and one of the particle effects that you
05:34 - get here is a big explosion effect so
05:37 - now if we hit play and wait the three
05:38 - seconds we should see that we get a big
05:41 - explosion effect and that the grenade
05:42 - disappears from both our scene and our
05:45 - hierarchy but our surrounding objects
05:47 - are still completely untouched to change
05:49 - this that start by getting our nearby
05:51 - objects and unity actually has a really
05:54 - useful method for this it's called
05:55 - physics dot overlap sphere this allows
05:59 - us to define a sphere at a given
06:01 - position with the radius that we choose
06:03 - and then unity will give us a list of
06:05 - all the objects that are colliding with
06:07 - this sphere so if we input the current
06:09 - position of our grenade transform drop
06:11 - position as well as the radius that we
06:14 - want and we can go up here and create
06:16 - another variable for that we'll create a
06:18 - public float blast radius or assembly
06:20 - radius I will default this to about five
06:23 - units so now we can insert that down
06:25 - here so we'll insert our radius and now
06:27 - this method will return an array of all
06:29 - the colliders overlapping with the
06:31 - sphere we now store these colliders in
06:33 - an array so we'll go Collider array and
06:36 - remember an array is basically just a
06:38 - list of items with a fixed length
06:40 - we can call our array colliders and set
06:43 - it equal to our function now we can go
06:46 - through each Collider so we'll use for
06:48 - each Collider the college Collider that
06:51 - we're looking at nearby object
06:54 - so for each nearby object in our
06:56 - colliders array we'll both add some
07:00 - force and some damage and let's begin by
07:02 - adding some force to do this we'll get a
07:05 - component on the nearby object that
07:07 - we're looking at so nearby object dark
07:09 - get component and we want a component of
07:11 - the type rigidbody will then store this
07:14 - in a variable so we'll do rigidbody call
07:16 - it RP and set it equal to the component
07:18 - that we find however not all nearby
07:21 - objects are necessarily rigid bodies so
07:24 - we do have to check here if RB is not
07:27 - equal to null in which case there is a
07:30 - rigidbody on the nearby object and
07:32 - therefore we can go ahead and add a
07:34 - force so we can write R be dot ad and
07:37 - the mistake here would be to just go add
07:39 - force we'd have to calculate a direction
07:41 - as well a magnitude of the force
07:43 - depending on the distance between the
07:45 - current object we're looking at and the
07:47 - grenade and yadda-yadda-yadda
07:48 - of course this can be done but a much
07:50 - simpler way is using the built in ad
07:52 - explosion force that's right as always
07:55 - unit is created an awesome function to
07:57 - help us do this this will do all the
07:59 - appropriate calculations for us all we
08:01 - need to do is simply give it an
08:02 - explosion force and we'll of course make
08:05 - another variable for this at the top so
08:07 - we'll do public float force and we'll
08:09 - default this to something quite high so
08:11 - we'll do 700 and then here we'll write
08:13 - explosion force as well as the origin of
08:16 - the explosion so that is our current
08:18 - transformed position as well as an
08:20 - explosion radius and here we'll simply
08:22 - input our radius and whoops I wrote
08:25 - explosion force here recently named it
08:27 - force so just to go through this quickly
08:29 - we are getting all of the nearby objects
08:31 - we are looping through each of them
08:33 - we're searching for a rigidbody on each
08:35 - object and if it has one then we add a
08:38 - force pointing away from the grenade if
08:40 - we now save this go into unity and hit
08:43 - play on top of the usual particles we
08:45 - should see some cool forces being
08:47 - applied to the environment however all
08:49 - of our objects are still completely
08:50 - intact what we need is a cool way of
08:53 - destroying these
08:55 - luckily I've created a video on this
08:56 - subject using the same models it's a
08:58 - fairly easy effect to achieve but it can
09:00 - look super cool and that's also why we
09:02 - have a destructible script sitting on
09:04 - each of the crates and bottles now let's
09:06 - try and open this up in the video on
09:08 - shattering we set it up so whenever we
09:10 - click on an object it's going to get
09:11 - destroyed now we can really simply tweak
09:13 - this script to work with our grenade so
09:15 - instead of waiting for the player to
09:17 - click on the object we'll simply make
09:18 - the method public so we can call it from
09:20 - our grenade script and we'll rename it
09:22 - to something simple like destroy if we
09:25 - then save this and go into our grenade
09:27 - script we can do pretty much the same
09:28 - thing we're doing with our rigidbody but
09:30 - with our destructible script instead so
09:32 - first we use nearby object getcomponent
09:35 - to get our destructible component we
09:37 - then store this in a variable of type
09:39 - destructible we'll just call it test and
09:41 - set it equal to the nearby object we
09:43 - then check if test is not equal to null
09:45 - in which case we can call the destroy
09:48 - method that we just created if we now
09:50 - save this and try playing we should see
09:52 - that after three seconds our objects get
09:55 - destroyed however currently all of the
09:57 - pieces just land on top of each other
09:59 - that's because our forces aren't being
10:01 - applied to the individual pieces and
10:03 - since we achieve this effect by
10:04 - replacing the original objects with a
10:06 - bunch of pieces we aren't actually
10:08 - applying any forces at all so instead
10:10 - what we need to do is split this for
10:12 - each statement into two the first one is
10:14 - going to destroy any objects and the
10:17 - second one is going to add forces so we
10:19 - actually need to search for colliders
10:21 - twice the first one will search for
10:23 - colliders to destroy and the second time
10:25 - we'll search for colliders to add forces
10:26 - to so we'll rename this variable to
10:28 - colliders to destroy let's now copy this
10:32 - line and paste it down here and this
10:34 - time we'll call it colliders to move we
10:37 - can then create a new forage statement
10:39 - where we again want to look through all
10:40 - the colliders we'll call each one nearby
10:43 - object just like we did before but this
10:45 - time we want to look through our
10:46 - colliders to move instead of our
10:49 - colliders to destroy we can then take
10:51 - off the logic that add forces remove
10:54 - them from the first for each statement
10:55 - and instead paste it to the second one
10:57 - and now our code should make sense we
10:59 - find all the objects that we want to
11:01 - destroy and destroy them and we find all
11:03 - the objects that we want to add forces
11:05 - to and we move them let's try and save
11:07 - this and this time
11:08 - we should see the effect working and
11:10 - indeed we do man I love explosions so
11:13 - that's it for step two and three of
11:15 - course we still need a way to throw a
11:17 - grenade now this step can be done in a
11:19 - bunch of different ways and it's going
11:21 - to completely depend on the game that
11:23 - you're making in this case we'll imagine
11:25 - that we're creating a first person
11:26 - shooter and we'll throw the grenade
11:28 - toward the center of our screen to do
11:30 - that we'll select our camera we'll add a
11:31 - new component and we'll call it grenade
11:33 - thrower here we can remove the start
11:37 - method and instead create a public float
11:39 - which is going to be our throw force we
11:41 - can default this to something like 40
11:43 - then inside of our update method we want
11:45 - to check if we've pressed the grenade
11:47 - key in our case let's just use the left
11:49 - mouse button
11:50 - so if input dot get mouse button down
11:54 - the button that we want to check for is
11:55 - the left mouse button which is zero and
11:58 - if we press this button well then we
12:00 - want to throw a grenade again we'll
12:02 - create this in a separate function void
12:04 - throw grenade and here we first need to
12:07 - instantiate a grenade so again we'll go
12:09 - to the top and create another public
12:11 - variable this one of type game object
12:13 - and this will be a reference to our
12:14 - grenade prefab let's save this and go
12:17 - into unity we need to create a prefab
12:19 - from a grenade and let's also just
12:21 - adjust the force down to maybe 200 when
12:24 - the integrin aide and drag it into the
12:26 - project panel and we can now see the
12:28 - prefab here let's remove it from our
12:29 - scene and instead select our main camera
12:31 - where we can now drag in our grenade
12:33 - into the grenade prefab slot so now we
12:36 - can simply instantiate our grenade
12:38 - prefab at the current position of our
12:40 - camera and using the same rotation as
12:42 - our camera of course this script doesn't
12:45 - need to be placed at your camera's
12:47 - position we could place it on any object
12:48 - pointing in the direction that you want
12:50 - to throw your grenade we then get a
12:52 - reference to the newly created grenade
12:54 - to do that we'll create a game object
12:56 - call it grenade and set it equal to the
12:58 - grenade that we just instantiate it we
13:00 - can then apply a forward force to our
13:02 - grenade to do this we need to get the
13:04 - rigidbody so again we'll go rigidbody RB
13:07 - and set it equal to grenade dart
13:09 - getcomponent of type rigidbody and we'll
13:13 - just assume that the grenade prefab
13:15 - we're using has a rigidbody so we can
13:17 - simply call RB add force and here we
13:19 - give it a direction the direct
13:21 - of course wherever our camera is looking
13:23 - so in our case that would be transformed
13:26 - forward we can then multiply this with
13:28 - our throw force and there you have it
13:31 - now whenever we press our left mouse
13:32 - button we call throw grenade which is
13:35 - then going to create a grenade get the
13:37 - rigid body on that grenade tell the
13:38 - rigid body to add a force in the forward
13:41 - direction and to adjust the force
13:43 - depending on a throw force and the last
13:45 - thing that we need to do here is change
13:46 - the force mode because this is not a
13:48 - force that we apply over time and
13:50 - because we don't care about the mass of
13:52 - our grenade will change the force mode
13:54 - to velocity change if we now save this
13:56 - and hit play you will now see that if I
13:59 - press my left mouse button we throw a
14:00 - grenade and after three seconds it
14:02 - explodes of course the force might be a
14:04 - bit too much here so let's try 20
14:06 - instead and you can really go nuts and
14:08 - throw as many grenades as you'd like so
14:11 - that's pretty much it for this video if
14:12 - you enjoyed it make sure to subscribe so
14:14 - don't miss the future one also
14:15 - definitely check out the video on
14:16 - destructible x' if you haven't already
14:18 - on that thanks for watching and I will
14:20 - see you in the next video thanks of the
14:22 - awesome patreon supporters who donated
14:24 - in October and a special thanks to Judy
14:26 - Minh Armand pence off-tune Cobra
14:28 - Superman the great James P Thomas Wally
14:31 - Sybok mummy Jason the Tito Derek Ames
14:33 - Kirk fatal Murphy Manolis Nick Lang Erin
14:37 - Robert Bund and Peter Locke you guys
14:39 - Rock

Cleaned transcript:

in this explosive video we're going to create some bombs and grenades in unity towards the end it should look something like this let's just jump right into it so normally hand grenades can be split up into three parts part one means throwing the grenade but two is waiting X amount of seconds during which the grenade can bounce off the environment and part three years of course an explosion here we both want to create some kind of visual effect add forces to nearby objects as well as damage them so these are the three steps that will be following during this video let's start by focusing on the second one cerise assemble scene with some crates and some bottles from the western props pack if you want to use the same model so you can download them for free by using the link in the description so let's go ahead and add a grenade to our scene I've created a very similar grenade model in blender please don't make fun of it you can of course use any model that you'd like I'm just gonna take mine here and place it into the scene I'm also going to drag it up here and place it somewhere in the middle of the crates now we want to apply physics to this grenade so let's go ahead and add a new component and the first thing that we'll need is a Collider I think a capsule Collider works pretty well here if we open this up we can of course adjust the radius let's shrink that down a little bit we can also adjust the height and you can see this goes in the wrong direction so I'm gonna adjust this from Y to Z and now we can fit this to the grenade so I think that's close enough and the next component that we want to add is of course a rigidbody so now we should see that if we rotate our object over a little bit and hit play it's going to fall and land on our crates of course I've also made sure to go ahead and add a rigidbody and a box Collider on each of the crates as well as the bottles you'll also notice that there is currently a destructible script sitting on each of these objects this is in no way required and we'll talk about why it's here later so now our grenade is physics enabled and we're ready to give it some logic let's select our grenade let's hit add component and let's create a new script called grenade let's like C sharp and hit crane ad let's double click the script open it up in Visual Studio and the first thing that we want to add at the very top of our script is a variable that will control the delay before Ocwen aid explodes so we'll create a public float we'll call it delay and set it equal to about 3 seconds and whenever we want to delay an action through script there are multiple ways to go about it one that I think works really well and that it's also fairly simple is by using a countdown variable so we'll go in here and create another float this one doesn't need to be public because we don't need to change it manually through the inspector we'll call it countdown then in our start method will set countdown equal to our delay so right when this grenade spawns its countdown is going to be three seconds then every frame so inside of our update loop we are going to reduce our countdown a tiny bit we're going to say countdown minus equals time Delta time remember time that Delta time is the amount of time path since we drew the last frame and if we reduce by this amount each frame we're essentially reducing our countdown by one each second so then what we can do is check if our countdown reaches zero so if countdown is less than or equal to zero well then three seconds have passed and we're ready to go ahead and explode for this we'll create a separate function void explode and this method is where we'll handle step three for now we can just throw a debug deadlock saying boom if we now save this script go into unity and hit play we can see that our innate false and after three seconds it says boom in the console however currently it's spams boom a whole bunch of times a second and we really only wanted to say this once to solve this we'll create another variable at the top this one is going to be of type boolean and we'll call it has exploded by default this is going to be false then when we're checking if our countdown has reached zero we also want to check if has exploded is equal to false and we can write this in shorthand notation by simply putting an exclamation mark in front of has exploded so now we only call explode if we haven't already exploded and then right after we explode we said has exploded to true now if we save this and hit play once more we should see that after three seconds we only get one message in the console awesome so now we're ready for step three I've been looking forward to this one now for this step will replace our message with some actual logic now this step can also be split into multiple parts and you might not want to have all of them depending on your game the first part is showing some kind of explosion effect the second is finding all nearby objects once we have these objects we can add forces to them in order to make them move away from the explosion as well as damage them and finally we want to get rid of our grenade so the first and last step here is actually really easy to show a cool effect we simply need to instantiate some particles to do that we first need a reference to the particles that we want to create we'll create a public game object and we'll call it explosion effect then when we want to show the effect we simply instantiate our explosion effect and we'll do that at the grenades current position and rotation so we'll use transform dot position come and transform dart rotation and that's really all we need to do here the last step is also really simple to remove the grenade we'll simply called destroy and then we'll insert our game object which is to create itself so now our grenade should visually be working if we save this go into unity and select our c√ºneyt you can see that we now have a slot for our explosion effect now I'm using the unity particle pack which is free of the asset store I'll of course have a link for this in the description and one of the particle effects that you get here is a big explosion effect so now if we hit play and wait the three seconds we should see that we get a big explosion effect and that the grenade disappears from both our scene and our hierarchy but our surrounding objects are still completely untouched to change this that start by getting our nearby objects and unity actually has a really useful method for this it's called physics dot overlap sphere this allows us to define a sphere at a given position with the radius that we choose and then unity will give us a list of all the objects that are colliding with this sphere so if we input the current position of our grenade transform drop position as well as the radius that we want and we can go up here and create another variable for that we'll create a public float blast radius or assembly radius I will default this to about five units so now we can insert that down here so we'll insert our radius and now this method will return an array of all the colliders overlapping with the sphere we now store these colliders in an array so we'll go Collider array and remember an array is basically just a list of items with a fixed length we can call our array colliders and set it equal to our function now we can go through each Collider so we'll use for each Collider the college Collider that we're looking at nearby object so for each nearby object in our colliders array we'll both add some force and some damage and let's begin by adding some force to do this we'll get a component on the nearby object that we're looking at so nearby object dark get component and we want a component of the type rigidbody will then store this in a variable so we'll do rigidbody call it RP and set it equal to the component that we find however not all nearby objects are necessarily rigid bodies so we do have to check here if RB is not equal to null in which case there is a rigidbody on the nearby object and therefore we can go ahead and add a force so we can write R be dot ad and the mistake here would be to just go add force we'd have to calculate a direction as well a magnitude of the force depending on the distance between the current object we're looking at and the grenade and yaddayaddayadda of course this can be done but a much simpler way is using the built in ad explosion force that's right as always unit is created an awesome function to help us do this this will do all the appropriate calculations for us all we need to do is simply give it an explosion force and we'll of course make another variable for this at the top so we'll do public float force and we'll default this to something quite high so we'll do 700 and then here we'll write explosion force as well as the origin of the explosion so that is our current transformed position as well as an explosion radius and here we'll simply input our radius and whoops I wrote explosion force here recently named it force so just to go through this quickly we are getting all of the nearby objects we are looping through each of them we're searching for a rigidbody on each object and if it has one then we add a force pointing away from the grenade if we now save this go into unity and hit play on top of the usual particles we should see some cool forces being applied to the environment however all of our objects are still completely intact what we need is a cool way of destroying these luckily I've created a video on this subject using the same models it's a fairly easy effect to achieve but it can look super cool and that's also why we have a destructible script sitting on each of the crates and bottles now let's try and open this up in the video on shattering we set it up so whenever we click on an object it's going to get destroyed now we can really simply tweak this script to work with our grenade so instead of waiting for the player to click on the object we'll simply make the method public so we can call it from our grenade script and we'll rename it to something simple like destroy if we then save this and go into our grenade script we can do pretty much the same thing we're doing with our rigidbody but with our destructible script instead so first we use nearby object getcomponent to get our destructible component we then store this in a variable of type destructible we'll just call it test and set it equal to the nearby object we then check if test is not equal to null in which case we can call the destroy method that we just created if we now save this and try playing we should see that after three seconds our objects get destroyed however currently all of the pieces just land on top of each other that's because our forces aren't being applied to the individual pieces and since we achieve this effect by replacing the original objects with a bunch of pieces we aren't actually applying any forces at all so instead what we need to do is split this for each statement into two the first one is going to destroy any objects and the second one is going to add forces so we actually need to search for colliders twice the first one will search for colliders to destroy and the second time we'll search for colliders to add forces to so we'll rename this variable to colliders to destroy let's now copy this line and paste it down here and this time we'll call it colliders to move we can then create a new forage statement where we again want to look through all the colliders we'll call each one nearby object just like we did before but this time we want to look through our colliders to move instead of our colliders to destroy we can then take off the logic that add forces remove them from the first for each statement and instead paste it to the second one and now our code should make sense we find all the objects that we want to destroy and destroy them and we find all the objects that we want to add forces to and we move them let's try and save this and this time we should see the effect working and indeed we do man I love explosions so that's it for step two and three of course we still need a way to throw a grenade now this step can be done in a bunch of different ways and it's going to completely depend on the game that you're making in this case we'll imagine that we're creating a first person shooter and we'll throw the grenade toward the center of our screen to do that we'll select our camera we'll add a new component and we'll call it grenade thrower here we can remove the start method and instead create a public float which is going to be our throw force we can default this to something like 40 then inside of our update method we want to check if we've pressed the grenade key in our case let's just use the left mouse button so if input dot get mouse button down the button that we want to check for is the left mouse button which is zero and if we press this button well then we want to throw a grenade again we'll create this in a separate function void throw grenade and here we first need to instantiate a grenade so again we'll go to the top and create another public variable this one of type game object and this will be a reference to our grenade prefab let's save this and go into unity we need to create a prefab from a grenade and let's also just adjust the force down to maybe 200 when the integrin aide and drag it into the project panel and we can now see the prefab here let's remove it from our scene and instead select our main camera where we can now drag in our grenade into the grenade prefab slot so now we can simply instantiate our grenade prefab at the current position of our camera and using the same rotation as our camera of course this script doesn't need to be placed at your camera's position we could place it on any object pointing in the direction that you want to throw your grenade we then get a reference to the newly created grenade to do that we'll create a game object call it grenade and set it equal to the grenade that we just instantiate it we can then apply a forward force to our grenade to do this we need to get the rigidbody so again we'll go rigidbody RB and set it equal to grenade dart getcomponent of type rigidbody and we'll just assume that the grenade prefab we're using has a rigidbody so we can simply call RB add force and here we give it a direction the direct of course wherever our camera is looking so in our case that would be transformed forward we can then multiply this with our throw force and there you have it now whenever we press our left mouse button we call throw grenade which is then going to create a grenade get the rigid body on that grenade tell the rigid body to add a force in the forward direction and to adjust the force depending on a throw force and the last thing that we need to do here is change the force mode because this is not a force that we apply over time and because we don't care about the mass of our grenade will change the force mode to velocity change if we now save this and hit play you will now see that if I press my left mouse button we throw a grenade and after three seconds it explodes of course the force might be a bit too much here so let's try 20 instead and you can really go nuts and throw as many grenades as you'd like so that's pretty much it for this video if you enjoyed it make sure to subscribe so don't miss the future one also definitely check out the video on destructible x' if you haven't already on that thanks for watching and I will see you in the next video thanks of the awesome patreon supporters who donated in October and a special thanks to Judy Minh Armand pence offtune Cobra Superman the great James P Thomas Wally Sybok mummy Jason the Tito Derek Ames Kirk fatal Murphy Manolis Nick Lang Erin Robert Bund and Peter Locke you guys Rock
