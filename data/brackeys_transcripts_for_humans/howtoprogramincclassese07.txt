With timestamps:

00:00 - - Congratulations, you've
made it to the eighth
00:02 - and final video in this
seizure programming course.
00:05 - In this video, we're going
to be talking about classes.
00:08 - Classes are extremely useful
00:10 - because they allow us to
build our own data structures.
00:13 - Now, what do I mean by that?
00:15 - Well, C sharp is an object-oriented
programming language.
00:18 - This means that we try to
use code to describe objects
00:22 - and we mostly do this using classes.
00:25 - Say for example, we're
creating a video game
00:27 - and would like to add some
cute cats to the game.
00:30 - Well, in this case, we
would create a cat class
00:33 - that tries to describe what a cat is.
00:35 - Think of it like we are
creating a blueprint for a cat.
00:38 - Then when we want to spawn
a cat into our world,
00:41 - we do this based on the blueprint.
00:43 - This is called creating
an instance of the class.
00:46 - Now that might sound very
abstract, but I promise you,
00:49 - it's going to make sense in just a second.
00:51 - In fact, let's just have a look
00:52 - at how to create a class right away,
00:54 - but first this video is sponsored
by the Unity Asset Store.
00:57 - Soon, the Asset Store will
be launching a new feature
01:00 - called, Support the Creator.
01:01 - This feature allows users to
give the creator of an asset
01:04 - more than the original asking price.
01:06 - This also includes free assets
01:08 - and a hundred percent
of the additional amount
01:10 - will go directly to the creator.
01:12 - So keep an eye on the Asset
Store and Unity socials
01:14 - for this announcement.
01:15 - This is such a great feature,
01:17 - as it's the perfect way
to thank the creators
01:19 - for taking the time to make assets
01:21 - that help you with your projects.
01:23 - And to celebrate this new feature,
01:24 - we've just launched a free 2D
Mega Pack on the Asset Store.
01:28 - The pack includes all 2D
Assets we've ever created
01:31 - for tutorials or game projects,
01:33 - everything from
environments to characters,
01:35 - to various items sprites and UI,
01:37 - plus a few sounds to get you started.
01:39 - And of course the pack
will use the support
01:41 - the creator feature as
soon as it goes live.
01:43 - So I definitely encourage
you to go check out the pack
01:45 - on the Unity Asset Store.
01:46 - Simply click the link in the description,
01:48 - and of course stay tuned
for the new feature
01:50 - also specially thanks to Mastro2k
01:52 - for his support on Patreon.
01:54 - So to create a cat class, meaning
the blueprint for our cat,
01:57 - we first need to think about
how we want to define a cat
02:00 - in a programme and then try
to describe it through code.
02:03 - In my case, I think a cat should at least
02:05 - have a name and an age.
02:08 - And these are things that we
can describe using variables.
02:11 - We probably also want our cat
to be able to do some things.
02:14 - In my case, I would like
it to be able to say meow,
02:17 - and this is something that we
can describe using a method.
02:20 - So let's try this out in code.
02:21 - To create a class in code,
we first need to go outside
02:25 - of the programme class
we've been using so far.
02:27 - Then we write class followed by the name.
02:30 - In my case, I'm just going to write cat
02:32 - and then some curly brackets.
02:33 - And that's it, we've
now created a cat class.
02:36 - Now we can add some code in
here that describes a cat.
02:39 - So we'll create variables
for the name and age
02:43 - and note that I'm putting public
02:44 - in front the variables here.
02:46 - We'll talk about why later in the video,
02:48 - then we can create some methods as well.
02:50 - Let's create a meow method
02:52 - that simply prints out
that the cat says meow.
02:54 - Not that I'm putting public
02:55 - in front of the method here as well.
02:57 - Again, we'll talk about why later
02:59 - and that's it for the
blueprint of our class.
03:02 - If we just run our programme now
03:04 - nothing is going to happen though.
03:05 - This is because after
creating the blueprint,
03:08 - we also need to make a cat
object based on that blueprint.
03:11 - Again, we call this creating
an instance of the class,
03:14 - and this is also what
makes classes so powerful
03:17 - because we can create many
instances from the same class.
03:21 - In our case, we could
create two different cats
03:23 - using the same cat class.
03:25 - To do this in code,
03:26 - we simply go to where we
would like to create our cats.
03:29 - In this case, let's just
do it inside of Main.
03:31 - And from here, it's just
like creating a variable.
03:33 - We write the type of the variable first,
03:35 - In this case, it's a type
that we've created ourselves
03:37 - called cat, then the name I'm
just going to call it cat one.
03:41 - Then we can set it equal to a new cat,
03:43 - open and close some parentheses
and put in as semi colon.
03:47 - And there we go, we've now created
03:48 - an instance of the cat
class called cat one.
03:51 - From there, we can access
properties and methods
03:54 - inside the class by using the dot.
03:56 - This allows us to set the name and the age
03:59 - and to call in the meow method.
04:00 - As you can see, cat one is
a kitten named Cat Stevens,
04:04 - and we can easily create another cat
04:05 - with different properties.
04:07 - Cat two is an older cat named
Meowly Cyrus. (laughing)
04:12 - So that's the basic idea.
04:14 - I know that this is probably a bit hard
04:15 - to wrap your head around at the moment,
04:17 - but don't worry, you'll get
the hang of it in no time.
04:20 - So let's jump into VA's code
and try it out ourselves.
04:23 - So let's imagine that we're
making a game in the fantasy
04:25 - (mumbles) and we want to create a wizard.
04:28 - Well, in this case we
would probably create
04:29 - some kind of wizard class.
04:31 - So to do that, we go outside
of our default programme class.
04:35 - I'm just going to go to the
top here we write class,
04:39 - then the name of the class in this case,
04:40 - it's going to be wizard.
04:42 - And then we open and
close two curly brackets.
04:44 - And in here we can start
to describe our wizard
04:47 - through code, so first off
let's create some variables.
04:50 - So I'm going to create a public string,
04:53 - storing the wizard's name.
04:54 - I'm also going to create a
string which is going to store
04:57 - the wizard's favourite spell.
04:59 - I'm also going to create an integer,
05:01 - which is going to keep track
05:02 - of how many spell slots
we have left, and finally,
05:05 - different wizards might have
different experience levels
05:08 - and might be able to level
up as we proceed in the game.
05:11 - So I'm also going to create a public float
05:13 - called experience.
05:16 - And this is actually already
enough first to start using
05:18 - this wizard class.
05:20 - We've now declared this class
05:22 - and are ready to instantiate it.
05:24 - So let's go inside of main here
05:26 - and try to create a wizard
based on this class.
05:28 - I'm going to type in wizard,
then the name of the variable,
05:32 - in my case, I'm just
going to go wizard one
05:34 - and I'm going to set it
equal to a new wizard.
05:37 - And at this point we can use the dot.
05:40 - So wizard one dot to access
to different properties
05:43 - that we've created for this class.
05:45 - So I'm going to first offset
the name to something like
05:49 - Parry Hopper.
05:50 - I'm also going to fill
out the other variables.
05:52 - So we'll do the favourite spell.
05:55 - I'm going to do Unexpecto Patronum.
05:59 - We can also give this
wizard some spell slots.
06:01 - So we'll go wizard one
dot spell slots equals,
06:04 - and let's just default this to two.
06:06 - And finally we can set
the experience level
06:08 - of our wizard to zero.
06:10 - And remember whenever
we are changing a float,
06:13 - it's a good idea to put an
F right after the number.
06:16 - When we're just setting it equal to zero,
06:18 - this doesn't matter,
06:19 - but if we were using a decimal place here,
06:22 - it is going to give us an error
06:23 - unless we remember to do that.
06:25 - But again, I'm just going
to set it equal to zero.
06:28 - So we've now declared a wizard class.
06:30 - We've created an instance of it
06:32 - and set a bunch of the properties,
06:34 - but the wizard is still pretty boring
06:36 - because there are no
methods for us to use.
06:38 - So let's go ahead and create some methods
06:40 - that describe what we want
a wizard to be able to do.
06:44 - So we'll go inside of
our wizard class here
06:46 - and we'll create a public void
06:48 - and let's give him the
ability to cast a spell.
06:51 - So I'm going to write cast spell here,
06:53 - and let's just print out
that we cast a spell.
06:56 - So we'll go console dot writeline,
06:58 - then the name of the wizard plus casts,
07:02 - and then the name of the favourite spell.
07:04 - But remember casting a
spell requires a spell slot.
07:08 - So right after we've cast a spell,
07:10 - let's going in and decrease
our spell slots by one.
07:14 - So we can go spell slots minus equal one,
07:17 - or just spell slots
minus minus four short.
07:20 - So now every time we cast a spell,
07:22 - we're going to decrease our spell slots.
07:24 - In fact, let's try this out.
07:26 - So inside of our Main here,
we'll go and access wizard one,
07:30 - we'll call the cast spell method
07:32 - and just show that this
changes are spell slots,
07:35 - let's just print out how many spell slots
07:36 - we have before and after.
07:38 - So I'm going to go console
dot writeline spell slots,
07:43 - and then wizard one dot spell slots.
07:45 - And I'm going to take
this line and past it
07:47 - after we cast a spell as well.
07:50 - So if we now run this programme,
07:51 - we can see that we start
out with two spells slots,
07:54 - then Parry Hopper casts,
Unexpecto Patronum,
07:57 - and now we only have one
spell slot left, awesome.
08:00 - And we can actually use this to determine
08:02 - whether or not we're even
able to cast a spell.
08:06 - So inside of our cast spell method here,
08:08 - let's create an if statement that says
08:10 - that we only want to cast a spell
08:11 - if our spell slots variable
is greater than zero.
08:15 - So we need to have at least one spell slot
08:17 - in order to cast a spell.
08:19 - And if this is the case, well,
08:21 - then we can go ahead and put
in our spell casting code.
08:24 - And if it's not the case,
08:26 - so we'll go ahead and put in an else here.
08:28 - Well, then we can write
out some things like
08:31 - console dot writeline.
08:33 - The name of the wizard
is out of spell slots
08:37 - and therefore we can't cast the spell
08:39 - and even cooler, whenever we cast a spell,
08:42 - we are probably gaining some
valuable wizard experience.
08:46 - So let's go ahead, when
we cast this spell,
08:48 - other than just reducing the spell slots,
08:51 - let's also increased our experience a bit.
08:53 - So I'm going to increase so
plus equals our experience
08:56 - with something like 0.3.
08:59 - And if we test this out now,
we can go into main here
09:03 - and let's remove these
console dot writelines here,
09:06 - and let's just try
casting, say three spells,
09:10 - and then print out the amount
of experience we've gained.
09:13 - So console dot writeline experience,
09:17 - and then wizard one dot experience.
09:20 - So now we're just casting three spells
09:21 - and checking the experience.
09:23 - And if we run the programme,
we can see that Parry Hopper
09:25 - casts Unexpecto Patronum two times,
09:28 - and then he's out of spells slots.
09:31 - And that's right, because
if we go ahead and check,
09:34 - we set the spell slots to two.
09:36 - Then we cast two spells and the third time
09:38 - it simply says that
he's out of spell slots.
09:41 - And therefore we only
increased the experience
09:43 - by 0.3 two times,
09:45 - and so our overall experience
gained is 0.6, awesome.
09:49 - Of course it would make
sense for us to create
09:51 - a way that our wizard can
gain back spell slots.
09:54 - So to do that, let's go ahead
and create another public void
09:58 - create another method here
and let's call it meditate.
10:02 - And this allows our wizard to sit down
10:04 - and chill out for a bit to
regain some spell slots.
10:07 - So in here we ride console dot writeline
10:10 - then the name of the wizard
meditates to regain spell slots.
10:16 - And then we set the
spell slots back to two.
10:19 - It's that easy, so now we can
try casting these spells here,
10:24 - and then we can maybe try meditating
10:27 - and then casting some more spells
10:29 - and seeing how much
experience we end up with.
10:32 - So let's try and run this programme.
10:33 - We can see that we cast two spells,
10:36 - then we run out of spell slots.
10:37 - Then we meditate to regain them
10:39 - and we're able to cast two more spells.
10:41 - And our overall experience
is now 1.2, awesome.
10:45 - Now while this code is working,
10:47 - we're currently using a lot of
lines to create a new wizard.
10:51 - So at this point it would be a good idea
10:53 - to create a class
constructor for our wizard.
10:56 - Constructors basically allows us to choose
10:58 - what happens when a class is created.
11:00 - Most of the time we use
this to set some variables,
11:03 - right When the class is instantiated,
11:05 - just like we're doing here.
11:07 - For example, when creating a wizard,
11:09 - we always want him to have a
name and a favourite spell.
11:12 - It doesn't make any sense to have a wizard
11:14 - where these variables haven't
been assigned a value.
11:16 - Also, we probably want
to make these spell slots
11:19 - and experience a default value
instead of having to set it
11:22 - every time we're creating a wizard.
11:24 - And we can make it quick
and easy to do these things,
11:26 - using a constructor, so
to create a constructor,
11:29 - we go to our class and I'm
just going to create this
11:32 - right after our variables.
11:34 - The syntax for this is
actually pretty easy.
11:37 - We go public, then we write
the name of the class.
11:40 - So in this case wizard,
then we open and close
11:44 - some parentheses and some curly brackets.
11:47 - So notice that the syntax
here is almost the same
11:49 - as if we were creating a method.
11:51 - We're just not writing the return tab.
11:53 - And when writing a constructor,
11:55 - I like to think of it like
we're writing a method
11:57 - that is called write when
the class is created.
11:59 - So what does this allow us to do?
12:01 - Well, it allows us to
simply set our spell slots
12:04 - equal to two right in here,
12:05 - and we can set our
experience to zero as well.
12:09 - So now we don't need to do that down here
12:11 - because it's automatically done
12:13 - when we're creating a new wizard,
12:15 - but I'd also like us to
be able to put in a name
12:18 - and a favourite spell
inside of these parentheses
12:20 - instead of having to do it
on separate lines like this,
12:23 - where we might forget.
12:24 - So to do that, we go up here
12:26 - and just like when we're
creating parameters for a method,
12:29 - we can create parameters
for constructor as well.
12:32 - So I'm going to type in string here,
12:34 - and I'm going to allow
ourselves to type in a name.
12:37 - However, if I call this variable name,
12:39 - then both the variable up here
12:41 - and the parameter is
going to be called name.
12:43 - So instead, it's pretty standard
12:45 - to just use an underscore here.
12:47 - Two is the differentiate between the two.
12:49 - So I'm going to create an underscore name
12:51 - and a string called
underscore favourite spell.
12:55 - And now inside of our constructor,
12:57 - we can set our name equal to
the name that was passed in.
13:01 - So name equals underscore
name and our favourite spell
13:05 - equal to the favourite
spell that was passed in.
13:07 - So favourite spell equals
underscore favourite spell.
13:10 - And what this allows us
to do now is down here
13:13 - when we are creating our wizard,
instead of these two lines,
13:17 - we pass in this data as parameters.
13:20 - So the name is going to be Parry Hopper,
13:22 - and the favourite spell is going to be
13:25 - Unexpecto Patronum, awesome.
13:28 - And you can see just how much cleaner
13:30 - that makes creating a new wizard.
13:32 - And if we run our programme,
it works exactly the same way.
13:36 - Now I'm just going to get
rid of some of the code here
13:38 - to simplify it a bit.
13:39 - So we're creating a wizard
and we're casting one spell,
13:42 - and we can easily create a second one.
13:44 - So we'll go wizard, wizard
two equals a new wizard,
13:49 - for the name here, I'm going
to type in Glindalf Marlinson.
13:53 - And the favourite spell here
is going to be Abracadabra.
13:57 - And we're going to have him
cast a spell as well, awesome.
14:01 - And again, while this code is working,
14:03 - so far, all the variables and methods
14:05 - we have created have begun
with the word public.
14:08 - If we have a look at our class here,
14:10 - all of our variables start with public
14:13 - and all of our methods do as well.
14:15 - Well, this is called an access modifier
14:17 - and it defines where we can access
14:19 - the variable and methods from.
14:21 - So far, there are two access modifiers
14:24 - that you should know, public and private.
14:27 - Public means that we can access
it from outside the class.
14:31 - This means that we can
change the variables
14:33 - and code the methods by using the dot,
14:35 - just like we've been doing inside of Main.
14:38 - We can go wizard one dot
14:41 - and see all of the methods and properties.
14:43 - Private on the other hand
means that we can only access
14:45 - the variable or method from
inside the class itself.
14:49 - Notice how our spell slots
aren't appearing here.
14:52 - That's because I just
changed that to private.
14:55 - And so you can't see it
from outside of the class,
14:57 - but we can still access
it from the inside.
15:00 - So all of our methods
changing this variable
15:02 - inside the class will be just fine.
15:04 - And because the spell slots and experience
15:06 - should only be changed by
casting spells and meditating,
15:09 - it would probably be a good idea to change
15:11 - the access modifier of
these variables to private.
15:15 - So I'm going to do that.
15:17 - One thing to note though,
15:18 - is that we can also simply
remove this keyword.
15:21 - This is the same as writing private.
15:24 - If nothing is here, it
just defaults to private.
15:27 - So for now I recommend
that you do this explicitly
15:30 - just to be really clear
about what's going on,
15:32 - but you can of course
do the shorthand version
15:34 - and not write anything.
15:36 - Now, another thing that we used a lot
15:38 - in our previous video on
methods, was the static keyboard.
15:42 - We currently see this down
here before our main method.
15:45 - Now the static keyword can be used
15:48 - in addition to public and private.
15:51 - When we add static to a variable,
15:53 - it means that the variable
belongs to the type itself
15:56 - rather than to a specific instance.
15:59 - So what does that mean?
16:01 - Well, I like to think of it this way.
16:03 - When we add static variable,
16:05 - that variable is now shared
16:06 - by all the instances of the class.
16:08 - This can be really handy.
16:10 - Say we want to keep track of
how many wizards we've created.
16:14 - In this case we could use this
static variable to do this.
16:16 - So inside of our wizard class,
16:18 - let's create a public static integer
16:21 - and call it something like count.
16:24 - It's standard practise
to always capitalise
16:26 - the first letter in a static variable.
16:28 - Of course, whenever we create a wizard,
16:31 - the constructor is called,
16:32 - and so we can go into the constructor here
16:35 - and increase our count variable by one.
16:38 - So every time we are creating a wizard,
16:40 - our count is going to be increased by one.
16:42 - And whenever we'd like
to know how many wizards
16:44 - we've created, we can simply access count
16:46 - by using the wizard type,
let's try this out in Main.
16:49 - So if I go down here after
we've created the two wizards,
16:53 - I can simply write out how
many wizards we've created
16:56 - by going console dot writeline
16:59 - and then passing in wizard dot count.
17:02 - See how we're not referring
to a specific wizard instance,
17:06 - we're just accessing the
general wizard class.
17:09 - This is what a static
variable allows us to do.
17:12 - And the same thing applies to methods.
17:14 - When we use console dot writeline,
17:16 - we're accessing a console class
17:18 - and calling a static
method called writeline.
17:21 - We don't need to create an
instance of console to do this.
17:24 - So you'll definitely
encounter the static keyword
17:26 - a lot when programming,
17:27 - and it does take a bit of getting used to,
17:29 - but now you know what the
general idea is when you see it.
17:32 - And if we just try and
run this programme now,
17:35 - we can see that Parry Hopper
casts Unexpecto Patronum,
17:38 - Glindalf Marlinson casts abracadabra,
17:41 - and we have created two wizards, awesome.
17:44 - Now, since this is the last video,
17:46 - this week's challenge is
going to be a bit different.
17:49 - I of course, encourage you
to play around with classes.
17:51 - In fact, I think you
should expand on the idea
17:53 - of a wizard class to include functionality
17:56 - like drinking potions,
casting more spells,
17:58 - taking damage and so on.
18:00 - But most importantly, I challenge
you to think of a project
18:04 - that you would like to make,
and then get started making it.
18:07 - It doesn't have to be too complicated.
18:09 - In fact, I recommend that
you keep it fairly simple,
18:11 - but you now have the skills
18:12 - to start creating your own programmes.
18:14 - There is of course, so much more to learn,
18:16 - but it's time that you
start putting your skills
18:18 - to good use.
18:19 - So whether you want to continue
making console applications
18:22 - like calculators, text-based
RPGs, or to do lists,
18:25 - or you have a specific
software you want to get into
18:28 - just get started.
18:30 - And of course, if you
want to make video games,
18:32 - I really recommend you
check out our video series
18:34 - on creating your first game
from scratch using Unity.
18:37 - It uses C sharp, and you
should be more than ready
18:40 - to start that journey.
18:41 - Well, of course, I have a link
for that in the description.
18:43 - So good luck on your future
development endeavours.
18:46 - And remember that the most
important thing is to have fun
18:49 - and that's pretty much it for
this video and this series,
18:51 - if you enjoyed it, make sure to subscribe
18:53 - and ring that notification bells,
18:54 - so don't miss the next one.
18:56 - Also, don't forget to
check out our 2D Mega Pack
18:58 - on the Unity Asset Store,
19:00 - by using the link in the description.
19:01 - And remember to keep an eye out
19:03 - on the support the creative feature.
19:04 - Other than that, thanks for watching
19:06 - and I will see you in the next video.
19:08 - Thanks to all the
awesome patron supporters
19:10 - who donated in August and
especially thanks to Dante Sam,
19:13 - Lost to Violence, Loved
Forever, NiftyliuS, Scott McKee,
19:16 - Faisal Marafie, Replica Studios,
Leo Lesetre, Nubby Ninja,
19:19 - Jason Uritescu, Piano
Sathornlak, Bobby Reynolds,
19:22 - Donatien Gascoin, Marc-Antoine
Girard, Jacob Stanford,
19:25 - Michail Korobov, Naoki Iwasaki,
Gregory Pierce, Owen Cooper,
19:29 - TheMightyZeus, Alison the
Fierce, Erasmus, I Love Brackeys,
19:32 - SiriusWolf, Fred Mastro,
Hassaan Sher, Stormed Daniels,
19:36 - Dennis Solomon, Game Dev
Tutorials and Max Randolf.
19:39 - You guys rock.

Cleaned transcript:

Congratulations, you've made it to the eighth and final video in this seizure programming course. In this video, we're going to be talking about classes. Classes are extremely useful because they allow us to build our own data structures. Now, what do I mean by that? Well, C sharp is an objectoriented programming language. This means that we try to use code to describe objects and we mostly do this using classes. Say for example, we're creating a video game and would like to add some cute cats to the game. Well, in this case, we would create a cat class that tries to describe what a cat is. Think of it like we are creating a blueprint for a cat. Then when we want to spawn a cat into our world, we do this based on the blueprint. This is called creating an instance of the class. Now that might sound very abstract, but I promise you, it's going to make sense in just a second. In fact, let's just have a look at how to create a class right away, but first this video is sponsored by the Unity Asset Store. Soon, the Asset Store will be launching a new feature called, Support the Creator. This feature allows users to give the creator of an asset more than the original asking price. This also includes free assets and a hundred percent of the additional amount will go directly to the creator. So keep an eye on the Asset Store and Unity socials for this announcement. This is such a great feature, as it's the perfect way to thank the creators for taking the time to make assets that help you with your projects. And to celebrate this new feature, we've just launched a free 2D Mega Pack on the Asset Store. The pack includes all 2D Assets we've ever created for tutorials or game projects, everything from environments to characters, to various items sprites and UI, plus a few sounds to get you started. And of course the pack will use the support the creator feature as soon as it goes live. So I definitely encourage you to go check out the pack on the Unity Asset Store. Simply click the link in the description, and of course stay tuned for the new feature also specially thanks to Mastro2k for his support on Patreon. So to create a cat class, meaning the blueprint for our cat, we first need to think about how we want to define a cat in a programme and then try to describe it through code. In my case, I think a cat should at least have a name and an age. And these are things that we can describe using variables. We probably also want our cat to be able to do some things. In my case, I would like it to be able to say meow, and this is something that we can describe using a method. So let's try this out in code. To create a class in code, we first need to go outside of the programme class we've been using so far. Then we write class followed by the name. In my case, I'm just going to write cat and then some curly brackets. And that's it, we've now created a cat class. Now we can add some code in here that describes a cat. So we'll create variables for the name and age and note that I'm putting public in front the variables here. We'll talk about why later in the video, then we can create some methods as well. Let's create a meow method that simply prints out that the cat says meow. Not that I'm putting public in front of the method here as well. Again, we'll talk about why later and that's it for the blueprint of our class. If we just run our programme now nothing is going to happen though. This is because after creating the blueprint, we also need to make a cat object based on that blueprint. Again, we call this creating an instance of the class, and this is also what makes classes so powerful because we can create many instances from the same class. In our case, we could create two different cats using the same cat class. To do this in code, we simply go to where we would like to create our cats. In this case, let's just do it inside of Main. And from here, it's just like creating a variable. We write the type of the variable first, In this case, it's a type that we've created ourselves called cat, then the name I'm just going to call it cat one. Then we can set it equal to a new cat, open and close some parentheses and put in as semi colon. And there we go, we've now created an instance of the cat class called cat one. From there, we can access properties and methods inside the class by using the dot. This allows us to set the name and the age and to call in the meow method. As you can see, cat one is a kitten named Cat Stevens, and we can easily create another cat with different properties. Cat two is an older cat named Meowly Cyrus. (laughing) So that's the basic idea. I know that this is probably a bit hard to wrap your head around at the moment, but don't worry, you'll get the hang of it in no time. So let's jump into VA's code and try it out ourselves. So let's imagine that we're making a game in the fantasy (mumbles) and we want to create a wizard. Well, in this case we would probably create some kind of wizard class. So to do that, we go outside of our default programme class. I'm just going to go to the top here we write class, then the name of the class in this case, it's going to be wizard. And then we open and close two curly brackets. And in here we can start to describe our wizard through code, so first off let's create some variables. So I'm going to create a public string, storing the wizard's name. I'm also going to create a string which is going to store the wizard's favourite spell. I'm also going to create an integer, which is going to keep track of how many spell slots we have left, and finally, different wizards might have different experience levels and might be able to level up as we proceed in the game. So I'm also going to create a public float called experience. And this is actually already enough first to start using this wizard class. We've now declared this class and are ready to instantiate it. So let's go inside of main here and try to create a wizard based on this class. I'm going to type in wizard, then the name of the variable, in my case, I'm just going to go wizard one and I'm going to set it equal to a new wizard. And at this point we can use the dot. So wizard one dot to access to different properties that we've created for this class. So I'm going to first offset the name to something like Parry Hopper. I'm also going to fill out the other variables. So we'll do the favourite spell. I'm going to do Unexpecto Patronum. We can also give this wizard some spell slots. So we'll go wizard one dot spell slots equals, and let's just default this to two. And finally we can set the experience level of our wizard to zero. And remember whenever we are changing a float, it's a good idea to put an F right after the number. When we're just setting it equal to zero, this doesn't matter, but if we were using a decimal place here, it is going to give us an error unless we remember to do that. But again, I'm just going to set it equal to zero. So we've now declared a wizard class. We've created an instance of it and set a bunch of the properties, but the wizard is still pretty boring because there are no methods for us to use. So let's go ahead and create some methods that describe what we want a wizard to be able to do. So we'll go inside of our wizard class here and we'll create a public void and let's give him the ability to cast a spell. So I'm going to write cast spell here, and let's just print out that we cast a spell. So we'll go console dot writeline, then the name of the wizard plus casts, and then the name of the favourite spell. But remember casting a spell requires a spell slot. So right after we've cast a spell, let's going in and decrease our spell slots by one. So we can go spell slots minus equal one, or just spell slots minus minus four short. So now every time we cast a spell, we're going to decrease our spell slots. In fact, let's try this out. So inside of our Main here, we'll go and access wizard one, we'll call the cast spell method and just show that this changes are spell slots, let's just print out how many spell slots we have before and after. So I'm going to go console dot writeline spell slots, and then wizard one dot spell slots. And I'm going to take this line and past it after we cast a spell as well. So if we now run this programme, we can see that we start out with two spells slots, then Parry Hopper casts, Unexpecto Patronum, and now we only have one spell slot left, awesome. And we can actually use this to determine whether or not we're even able to cast a spell. So inside of our cast spell method here, let's create an if statement that says that we only want to cast a spell if our spell slots variable is greater than zero. So we need to have at least one spell slot in order to cast a spell. And if this is the case, well, then we can go ahead and put in our spell casting code. And if it's not the case, so we'll go ahead and put in an else here. Well, then we can write out some things like console dot writeline. The name of the wizard is out of spell slots and therefore we can't cast the spell and even cooler, whenever we cast a spell, we are probably gaining some valuable wizard experience. So let's go ahead, when we cast this spell, other than just reducing the spell slots, let's also increased our experience a bit. So I'm going to increase so plus equals our experience with something like 0.3. And if we test this out now, we can go into main here and let's remove these console dot writelines here, and let's just try casting, say three spells, and then print out the amount of experience we've gained. So console dot writeline experience, and then wizard one dot experience. So now we're just casting three spells and checking the experience. And if we run the programme, we can see that Parry Hopper casts Unexpecto Patronum two times, and then he's out of spells slots. And that's right, because if we go ahead and check, we set the spell slots to two. Then we cast two spells and the third time it simply says that he's out of spell slots. And therefore we only increased the experience by 0.3 two times, and so our overall experience gained is 0.6, awesome. Of course it would make sense for us to create a way that our wizard can gain back spell slots. So to do that, let's go ahead and create another public void create another method here and let's call it meditate. And this allows our wizard to sit down and chill out for a bit to regain some spell slots. So in here we ride console dot writeline then the name of the wizard meditates to regain spell slots. And then we set the spell slots back to two. It's that easy, so now we can try casting these spells here, and then we can maybe try meditating and then casting some more spells and seeing how much experience we end up with. So let's try and run this programme. We can see that we cast two spells, then we run out of spell slots. Then we meditate to regain them and we're able to cast two more spells. And our overall experience is now 1.2, awesome. Now while this code is working, we're currently using a lot of lines to create a new wizard. So at this point it would be a good idea to create a class constructor for our wizard. Constructors basically allows us to choose what happens when a class is created. Most of the time we use this to set some variables, right When the class is instantiated, just like we're doing here. For example, when creating a wizard, we always want him to have a name and a favourite spell. It doesn't make any sense to have a wizard where these variables haven't been assigned a value. Also, we probably want to make these spell slots and experience a default value instead of having to set it every time we're creating a wizard. And we can make it quick and easy to do these things, using a constructor, so to create a constructor, we go to our class and I'm just going to create this right after our variables. The syntax for this is actually pretty easy. We go public, then we write the name of the class. So in this case wizard, then we open and close some parentheses and some curly brackets. So notice that the syntax here is almost the same as if we were creating a method. We're just not writing the return tab. And when writing a constructor, I like to think of it like we're writing a method that is called write when the class is created. So what does this allow us to do? Well, it allows us to simply set our spell slots equal to two right in here, and we can set our experience to zero as well. So now we don't need to do that down here because it's automatically done when we're creating a new wizard, but I'd also like us to be able to put in a name and a favourite spell inside of these parentheses instead of having to do it on separate lines like this, where we might forget. So to do that, we go up here and just like when we're creating parameters for a method, we can create parameters for constructor as well. So I'm going to type in string here, and I'm going to allow ourselves to type in a name. However, if I call this variable name, then both the variable up here and the parameter is going to be called name. So instead, it's pretty standard to just use an underscore here. Two is the differentiate between the two. So I'm going to create an underscore name and a string called underscore favourite spell. And now inside of our constructor, we can set our name equal to the name that was passed in. So name equals underscore name and our favourite spell equal to the favourite spell that was passed in. So favourite spell equals underscore favourite spell. And what this allows us to do now is down here when we are creating our wizard, instead of these two lines, we pass in this data as parameters. So the name is going to be Parry Hopper, and the favourite spell is going to be Unexpecto Patronum, awesome. And you can see just how much cleaner that makes creating a new wizard. And if we run our programme, it works exactly the same way. Now I'm just going to get rid of some of the code here to simplify it a bit. So we're creating a wizard and we're casting one spell, and we can easily create a second one. So we'll go wizard, wizard two equals a new wizard, for the name here, I'm going to type in Glindalf Marlinson. And the favourite spell here is going to be Abracadabra. And we're going to have him cast a spell as well, awesome. And again, while this code is working, so far, all the variables and methods we have created have begun with the word public. If we have a look at our class here, all of our variables start with public and all of our methods do as well. Well, this is called an access modifier and it defines where we can access the variable and methods from. So far, there are two access modifiers that you should know, public and private. Public means that we can access it from outside the class. This means that we can change the variables and code the methods by using the dot, just like we've been doing inside of Main. We can go wizard one dot and see all of the methods and properties. Private on the other hand means that we can only access the variable or method from inside the class itself. Notice how our spell slots aren't appearing here. That's because I just changed that to private. And so you can't see it from outside of the class, but we can still access it from the inside. So all of our methods changing this variable inside the class will be just fine. And because the spell slots and experience should only be changed by casting spells and meditating, it would probably be a good idea to change the access modifier of these variables to private. So I'm going to do that. One thing to note though, is that we can also simply remove this keyword. This is the same as writing private. If nothing is here, it just defaults to private. So for now I recommend that you do this explicitly just to be really clear about what's going on, but you can of course do the shorthand version and not write anything. Now, another thing that we used a lot in our previous video on methods, was the static keyboard. We currently see this down here before our main method. Now the static keyword can be used in addition to public and private. When we add static to a variable, it means that the variable belongs to the type itself rather than to a specific instance. So what does that mean? Well, I like to think of it this way. When we add static variable, that variable is now shared by all the instances of the class. This can be really handy. Say we want to keep track of how many wizards we've created. In this case we could use this static variable to do this. So inside of our wizard class, let's create a public static integer and call it something like count. It's standard practise to always capitalise the first letter in a static variable. Of course, whenever we create a wizard, the constructor is called, and so we can go into the constructor here and increase our count variable by one. So every time we are creating a wizard, our count is going to be increased by one. And whenever we'd like to know how many wizards we've created, we can simply access count by using the wizard type, let's try this out in Main. So if I go down here after we've created the two wizards, I can simply write out how many wizards we've created by going console dot writeline and then passing in wizard dot count. See how we're not referring to a specific wizard instance, we're just accessing the general wizard class. This is what a static variable allows us to do. And the same thing applies to methods. When we use console dot writeline, we're accessing a console class and calling a static method called writeline. We don't need to create an instance of console to do this. So you'll definitely encounter the static keyword a lot when programming, and it does take a bit of getting used to, but now you know what the general idea is when you see it. And if we just try and run this programme now, we can see that Parry Hopper casts Unexpecto Patronum, Glindalf Marlinson casts abracadabra, and we have created two wizards, awesome. Now, since this is the last video, this week's challenge is going to be a bit different. I of course, encourage you to play around with classes. In fact, I think you should expand on the idea of a wizard class to include functionality like drinking potions, casting more spells, taking damage and so on. But most importantly, I challenge you to think of a project that you would like to make, and then get started making it. It doesn't have to be too complicated. In fact, I recommend that you keep it fairly simple, but you now have the skills to start creating your own programmes. There is of course, so much more to learn, but it's time that you start putting your skills to good use. So whether you want to continue making console applications like calculators, textbased RPGs, or to do lists, or you have a specific software you want to get into just get started. And of course, if you want to make video games, I really recommend you check out our video series on creating your first game from scratch using Unity. It uses C sharp, and you should be more than ready to start that journey. Well, of course, I have a link for that in the description. So good luck on your future development endeavours. And remember that the most important thing is to have fun and that's pretty much it for this video and this series, if you enjoyed it, make sure to subscribe and ring that notification bells, so don't miss the next one. Also, don't forget to check out our 2D Mega Pack on the Unity Asset Store, by using the link in the description. And remember to keep an eye out on the support the creative feature. Other than that, thanks for watching and I will see you in the next video. Thanks to all the awesome patron supporters who donated in August and especially thanks to Dante Sam, Lost to Violence, Loved Forever, NiftyliuS, Scott McKee, Faisal Marafie, Replica Studios, Leo Lesetre, Nubby Ninja, Jason Uritescu, Piano Sathornlak, Bobby Reynolds, Donatien Gascoin, MarcAntoine Girard, Jacob Stanford, Michail Korobov, Naoki Iwasaki, Gregory Pierce, Owen Cooper, TheMightyZeus, Alison the Fierce, Erasmus, I Love Brackeys, SiriusWolf, Fred Mastro, Hassaan Sher, Stormed Daniels, Dennis Solomon, Game Dev Tutorials and Max Randolf. You guys rock.
