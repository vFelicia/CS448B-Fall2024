With timestamps:

00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to this third video on creating
00:06 - a tower defense game in unity so today
00:08 - we are going to be creating a wave
00:09 - spawner that will of course spawn in
00:12 - waves of enemies so that's going to be a
00:14 - lot of fun we are going to be creating a
00:15 - very bare-bones version of a wave
00:18 - spawner because we're only going to have
00:19 - one type of enemy that we will spawning
00:22 - in groups and we're only going to have
00:24 - one spawn point so it's it's very simple
00:26 - actually if you want something more
00:28 - configurable that has all of these stuff
00:32 - like you can have different levels with
00:34 - different enemies and different spawn
00:36 - points well then you should check out my
00:38 - two-part series on the channel on
00:40 - creating a wave spawner it's kind of a
00:42 - standalone miniseries and it has all the
00:45 - functionality that you're going to need
00:47 - basically but we are probably going to
00:49 - modify this anyways to to do more stuff
00:52 - later so without further ado I will just
00:54 - show you here before we get started that
00:57 - the project is now in github so if you
00:59 - go to the link in description you can go
01:01 - and download the entire project with
01:04 - everything that I've made and you can
01:06 - just open it up in unity or you can grab
01:08 - scripts from it or whatever you want so
01:10 - if you have a trouble with something I
01:12 - just want to mess around with my project
01:14 - you can go here hit clone or download
01:16 - and download a zip file or you can of
01:18 - course use github to clone it as we go
01:20 - along and if you want an older version
01:22 - then you can go to commits here and you
01:25 - can select whatever version you want and
01:27 - you can see right now there's only video
01:29 - - that's of course going to be video
01:30 - three four and five and so on but video
01:34 - one is not actually here I'm sorry but I
01:36 - forgot to do it with the first video so
01:39 - everything starts at video number two
01:40 - sorry one happen again good so without
01:43 - further ado let's open up unity and get
01:46 - started with the video so let's
01:48 - right-click and hit create empty and
01:50 - let's rename this to game master and
01:53 - this object right here is going to have
01:56 - different scripts that manages the game
01:59 - we could also call it game manager or
02:00 - just manage your scripts or whatever I'm
02:03 - going to call it game master and let's
02:05 - make a new script on this cold wave
02:08 - spawner and then we can have just a
02:09 - series of scripts here so let's double
02:12 - click on that to open it up
02:13 - in Visual Studio and the basics of a
02:15 - wave spawner is in fact well pretty
02:18 - basics we are just going to use the
02:21 - instantiate command pretty excessively
02:24 - and then make sure to time it in some
02:27 - way so what we're going to do is we're
02:29 - going to delete these two methods to
02:31 - begin with and then let's make a public
02:34 - and we're going to make this a transform
02:37 - and this is going to be the prefab of
02:39 - the enemy that we want to spawn so this
02:41 - is just going to be our enemy prefab and
02:43 - this is what we could later turn into
02:45 - some kind of level that will rise and
02:48 - difficulty or some different enemies
02:50 - that we can choose from but for now
02:51 - let's just choose this one single enemy
02:53 - that we've made and then we want of
02:56 - course on some public float which is
03:00 - going to be the time between waves or
03:03 - the countdown timer or whatever you want
03:06 - to call this and this is going to be
03:08 - just for testing purposes I'm going to
03:12 - set this to 5 but in reality you
03:14 - probably want it to be longer then what
03:17 - we want to do is we want to go into the
03:19 - update method and we want to have some
03:22 - kind of way of managing time and what I
03:24 - thought we would do is create a private
03:26 - variable here a private float that we
03:29 - call the countdown and we might want
03:32 - some kind of way of getting this number
03:34 - or using this number to display it on
03:37 - the screen but for now it will just be
03:38 - behind the scenes and we might change
03:40 - this in this video in fact if we are
03:42 - fast and this is going to start off at
03:45 - whatever you want the time however long
03:49 - you want it to take before it spawns the
03:51 - first wave so that might not be 5 or
03:54 - that might exactly be 5 so I'm going to
03:56 - set this to 2 so that it takes the 2
03:59 - seconds until it spawns the first wave
04:01 - and then what I'm going to do is I'm
04:04 - going to go into the update method here
04:06 - and I'm going to say that if countdown
04:09 - is less than or equal to 0 so if our
04:12 - timer has reached the serial mark well
04:15 - then we want to start spawning some
04:16 - enemies so we are going to make a a
04:19 - method down here that is going to say
04:21 - spawned wave and that's going to be
04:24 - responsible for spawning an entire group
04:27 - of enemies right so right now we can
04:29 - just use a debug that likes statement
04:31 - here that says a wave incoming something
04:35 - like that and then we can close that off
04:37 - and then here we want of course to call
04:41 - the spawn wave method that we just
04:43 - created so that will jump down here and
04:45 - execute this code and then we want to
04:47 - set the countdown timer again because we
04:51 - don't want it to stay at zero and then
04:53 - just keep counting down to negative one
04:55 - negative two no we want this to be set
04:57 - then to the time between waves so um and
05:00 - then we need some kind of way of
05:02 - decreasing this countdown timer we
05:04 - wanted to go down by one every second
05:07 - and we want to do this every frame so we
05:09 - can say that countdown - equals time
05:13 - Delta time and again timed at Delta time
05:15 - is the time amount of time passed since
05:19 - the last time we drew a frame so if we
05:21 - just do this it's going to mean that it
05:24 - will reduce countdown by one every
05:26 - second and we'll do so fluently so what
05:30 - we are doing here is we are creating a
05:32 - countdown float that is going to
05:35 - decrease with time and when it reaches
05:39 - zero we spawn a wave and we reset it to
05:41 - five seconds okay so that's all we're
05:44 - doing and let's try and save this and
05:45 - see if it actually works Oh our spawn
05:48 - wave spawn is here let's make sure to
05:50 - find our enemy prefab and drag it in
05:53 - here let's make sure to delete these
05:56 - enemies and now hit play and we should
05:58 - see that after two seconds we get a wave
06:01 - incoming and then after a following five
06:04 - seconds we should get another wave
06:05 - incoming and that was so that's perfect
06:08 - so whenever we spawn a wave we basically
06:10 - want to spawn a group of enemies and to
06:14 - determine how many enemies that's going
06:16 - to be there's lots of different stuff
06:18 - that we could do we could either make an
06:21 - array of waves with an enemy type and
06:24 - the number of enemies we want to spawn
06:26 - and the delay between them and all that
06:28 - and that's what we do in the wave
06:30 - spawner a short series so you can check
06:32 - that out if that's what you want or if
06:34 - we are lazy we could use the wave number
06:37 - the number of waves that we've been
06:40 - through that we've encountered to tell
06:43 - how many enemies we want to spawn so
06:45 - that the difficulty will increase as we
06:47 - go through another way and you can do
06:50 - this using some kind of function you
06:52 - could use some kind of polynomial that's
06:55 - not like for we will take the wave
06:59 - number and we will square it and that
07:01 - will be how many enemies we will face
07:04 - but we could also just use well the wave
07:08 - number to determine how many enemies
07:11 - it's going to be so the first wave wave
07:13 - will be one enemy and the second to and
07:15 - so on so that's what we're going to do
07:17 - for now
07:17 - and then we can come in and change it
07:19 - later which we will probably do so the
07:22 - spawn wave here is now just going to
07:24 - spawn some kind of wave number and we
07:27 - will loop through this using a for
07:29 - statement but first we need to create
07:31 - this wave number and that's going to be
07:34 - a private integer and we are going to
07:36 - call this the either wave number or wave
07:39 - index I think we will start this at one
07:42 - and therefore I'm going to call this the
07:44 - actual wave number and that's going to
07:47 - be one there we go and then every time
07:50 - we spawn a wave we can take a wave
07:52 - number and increase it when we are done
07:56 - spawning and yeah that all makes sense
08:00 - and but this is actually yeah that's the
08:03 - current wave number everything is good
08:04 - good so on what we can do here now is
08:07 - that we can loop through this wave
08:09 - number so we can use a for statement and
08:11 - if you have hit tab here twice it's
08:13 - going to auto fill this order completed
08:16 - and for I is less than and then we use
08:20 - wave number that's going to be at the
08:24 - amount of enemies and then for each of
08:26 - these we can spawn and enemy and that's
08:29 - another method that we are going to be
08:30 - creating so let's do a void spawn enemy
08:33 - and this is going to be a very short
08:34 - method but it's good to split it up into
08:37 - different methods and then add stuff to
08:39 - those methods that we as we go and we
08:41 - are going to instantiate what are we
08:43 - going to instantiate well we are going
08:44 - to instantiate our enemy prefab and now
08:49 - we need to determine where to
08:50 - instantiate this and therefore I want to
08:53 - go up here
08:53 - I want to create a reference to some
08:56 - kind of spawn location public transform
09:01 - and we are going to call this spawn
09:03 - point and that's again something we'll
09:06 - reference in the inspector and then we
09:08 - can scroll down here again on this spawn
09:10 - enemy so we'll spawn the enemy prefab at
09:13 - spawn point dot position at spawn point
09:18 - dot rotation there we go
09:20 - and now we've spawned this enemy and we
09:22 - don't need to worry about D spawning it
09:24 - or anything that will be handled by our
09:27 - pathfinding system so that's fine we are
09:30 - actually done whoops we are actually
09:32 - done with this script for now so if we
09:35 - go back into unity now and find out game
09:37 - master we should have another empty slot
09:40 - and that's going to be for the spawn
09:41 - point so we can go ahead and create some
09:44 - kind of empty object or we could just
09:47 - use our start node so if we go in the
09:49 - game master find a start node and drag
09:52 - that in there that should actually do it
09:55 - so when now when we hit play we are
09:58 - still gun not going to have any visual
10:00 - representation of what's going on but we
10:02 - can see that we just spawned an enemy
10:04 - and after five seconds it should
10:05 - hopefully spawn two enemies which it did
10:09 - however each of these enemies you can
10:12 - see here that it's spawning lots of
10:14 - enemies but there are multiple enemies
10:16 - on top of each other and that's a
10:18 - problem so how do we space these out
10:20 - well we could do the same have some kind
10:23 - of float variable up here that we reset
10:26 - some kind of countdown separate from the
10:29 - other countdown or we could use what is
10:31 - called a KO routine and this is a super
10:34 - handy super awesome way of kind of
10:38 - creating these subroutines these ways of
10:42 - odd executing code separate from our
10:46 - main piece of code so we have this main
10:48 - countdown that spawns waves and then we
10:50 - have this separate wave spawner that has
10:54 - its own timing and runs in its own
10:57 - separate way and the way to do this is
10:59 - we simply turn this here this method
11:02 - here the spawn wave into a cover routine
11:04 - how do we do this well in a very
11:07 - fusing way so if we go up here we type
11:11 - in using system dark collections the
11:13 - namespace I removed earlier but I wanted
11:16 - to show you that that's why it's there
11:17 - that's primarily what you use it for in
11:20 - unity most of the time so using system
11:22 - dark collections and that allows us to
11:24 - write this weird I in numerator here and
11:28 - the I in numerator instead of void
11:31 - allows us now to pause this piece of
11:35 - code so we can actually wait X amount of
11:38 - seconds before continuing so what we can
11:41 - do here is we can spawn an enemy and
11:43 - then after we've spawned an enemy we can
11:45 - say yield return new wait for seconds
11:49 - and this is a lot of weird syntax and
11:50 - I'm not going to explain it in detail
11:53 - and then we could maybe
11:54 - wait point two seconds so we could maybe
11:57 - wait like half a second or you could
11:59 - turn this up this here into some kind of
12:02 - variable that we can adjust but for now
12:04 - I think I'll just hard-coded in here so
12:07 - that will indeed spawn status spawn wave
12:11 - loop through it spawn an enemy wait
12:13 - point five seconds spawn another enemy
12:15 - wait point five seconds and so on and
12:18 - then it will increase the wave number
12:20 - and I just realized that since we are
12:23 - waiting within this spawn wave it might
12:26 - be a good idea to increase the wave
12:28 - number up here and then have it start at
12:31 - zero instead and actually I'm going to
12:34 - rename this to wave index it's just
12:36 - cleaners just feels more nice okay so
12:40 - I'm the only thing that we need to
12:42 - realize here is whenever we create an
12:44 - eye enumerator we can't just call the
12:46 - method like this this is not the way
12:48 - that you start a corroding instead we
12:51 - simply write start co-routine and then
12:54 - we input the spawn wave in here and
12:58 - remember to open and close the
12:59 - parentheses to indicate that we are
13:01 - talking about a function so that was all
13:04 - we needed to do and now when we go back
13:06 - here we should hopefully see this piece
13:08 - of code working so when we hit play now
13:10 - we should see after two seconds it
13:13 - spawns one enemy then we wait another
13:16 - five seconds and it should spawn too
13:18 - with an interval of point five
13:21 - seconds and that's it's just going to
13:24 - keep doing this as the difficulty
13:26 - increases and you can see we actually
13:27 - already have a pretty nice scaling
13:30 - system for making more and more
13:31 - difficult enemies you will also realize
13:34 - that at some point we are going to start
13:36 - spawning enemies on top of each other
13:38 - because the it's going to take so long
13:41 - to spawn a wave and that there's not
13:43 - going to be enough time to finish
13:45 - spawning it before another wave starts
13:47 - and that's of course a problem with our
13:49 - system but that's not something we'll
13:50 - worry about yet I think we have more
13:53 - important stuff to implement and then
13:56 - later we can look at that kind of stuff
13:59 - so now when we are save this we have
14:02 - that done and let me just check the on
14:05 - time here yeah so I think we just have
14:08 - time to maybe our display this countdown
14:11 - on a timer on the UI so let's just do
14:15 - that really quickly because it makes
14:17 - this system feel a lot nicer so let's
14:20 - right-click over here and create off
14:22 - first UI element so let's go into UI and
14:24 - this is going to be a symbol text object
14:27 - let's go to the canvas now hit F to
14:30 - focus on that and that's giant but that
14:32 - it should be huge and then let's switch
14:34 - to 2d mode and switch our controls here
14:37 - over to the 2d controls let's find our
14:39 - text object and let's Center this on the
14:42 - top so if you hold down alt and click
14:45 - here it's going to snap it anchor it to
14:47 - the top and move it to the top and now
14:49 - we can hit F to focus in on this once
14:51 - more we can then move it down by holding
14:54 - shift to snap it to this axis right here
14:56 - and then we can maybe scale this up to
15:00 - make some more room and I'm using old
15:01 - here to scale in all the axes and we can
15:04 - move it down some more then we can
15:05 - Center it on the X and Center it on the
15:08 - Y and then we can maybe just input some
15:11 - kind of number here so I'm just going to
15:13 - input 20 I'm going to scale this up
15:16 - quite a bit something like I don't know
15:18 - maybe 80 that's very large let's try 70
15:22 - and then we can also change the color of
15:25 - this change the color of this to
15:28 - probably a Y this one I'm going to want
15:32 - here but we should really mess around
15:34 - with
15:34 - is some more in the future I know this
15:37 - looks kind of weird but we are going to
15:38 - moving and be moving around the camera
15:40 - anyway so it's going to be looking a
15:43 - little weird but what we can do is maybe
15:44 - add some kind of shadow just to make it
15:46 - stand out from the white on our level so
15:49 - let's just write in shadow here and that
15:52 - just helps it pop just a bit and we can
15:54 - maybe increase the shadow here a tiny
15:57 - bit something like that and I'm also
16:00 - going to make this a bold number to make
16:02 - it stand out even more so now we
16:04 - actually have this number that looks
16:06 - fairly decent and yeah and we can of
16:11 - course edit that and again I insist that
16:14 - you spend more time on the UI than I do
16:16 - we'll probably also find some kind of
16:18 - cool font I don't like the Arial default
16:22 - fund but for now this is going to work
16:24 - just fine and this is going to be
16:26 - renamed to the on wave countdown timer
16:31 - and what we can then do is we can jump
16:34 - back into a visual studio here and we
16:38 - can add a reference to this and change
16:40 - it in the update method so that's what
16:42 - we're going to do so we're going to go
16:44 - in here and add a reference and let's
16:47 - actually add that right by the time
16:50 - between waves so this is going to be a
16:52 - public oops a public and then we want a
16:55 - reference to a text object so we are
16:57 - going to be using Unity engine ton UI
17:00 - that will allow us to reference eight
17:02 - texts and we're going to call this the
17:05 - wave countdown text like that and then
17:08 - in the update method as we go through
17:12 - here and we're going to do this after we
17:14 - change the countdown I believe it's
17:18 - really important I don't know
17:20 - sure let's do that and then that set our
17:23 - wave countdown text don't text to be
17:26 - equal to countdown and we want this to
17:29 - be to string to convert it to a string
17:32 - and to avoid that this has all kinds of
17:39 - float numbers all kinds of decimal
17:42 - places is what it's called we are going
17:44 - to actually do something kind of cool
17:47 - here so we're going to say
17:48 - math dot floor and that's going to
17:51 - simply cut off all of the decimal places
17:54 - and only leave the first one and then
17:57 - that is what we want to turn into a
17:59 - string so we're going to math dot Floyd
18:01 - and then do a two string right after
18:04 - that something like that so floor will
18:07 - simply cut off all of the decimal places
18:10 - it's not going to round or anything it's
18:12 - simply going to well always round down
18:15 - then to an integer value and it still is
18:18 - still in a float data type but it is a
18:21 - whole number so that's what that's going
18:24 - to do and then we probably want to since
18:26 - we are flowing it we probably want to
18:28 - add one so if we just if we just add one
18:33 - here I think that's actually let's try
18:36 - this out so let's hit play here and see
18:39 - what happens to this number oh of course
18:40 - we need a reference so in our game
18:42 - master we should drag in the wave
18:45 - countdown text there we go and now we
18:47 - should see it says one zero and you can
18:50 - see it skips the five there and that's
18:52 - kind of what I wanted to avoid but then
18:55 - again it kind of jumps quickly that's
18:58 - annoying
18:59 - so what we can do instead is we could
19:02 - try and round this so if we round this
19:05 - number off we can see now it says two
19:09 - one zero
19:09 - and five four three two one and that's
19:13 - fine so you can see jumps a bit there
19:15 - but that's okay I think we'll live with
19:18 - that if we want to change that what we
19:21 - can do is make the time between waves
19:23 - something like five point five and now
19:26 - that should actually be fixed here so
19:29 - there we go so now it won't jump in time
19:31 - so that's perfect and yeah that's a
19:34 - working countdown timers so that's great
19:37 - that's basically all I wanted to show
19:39 - you for this video I hope you enjoyed it
19:41 - I can't wait for the next one I think
19:42 - this series is really fun to work on so
19:45 - without further adieu thanks for
19:47 - watching and I'll see you in the next
19:48 - video so I'm going to start mentioning
19:50 - patreon supporters the following month
19:52 - after they donate so that there won't be
19:54 - any difference from donating at the
19:56 - beginning of the month to the end of the
19:58 - month this way everyone will get a full
20:01 - month of May
20:02 - and yeah everyone will be happy so just
20:05 - wait for the next month and you will see
20:07 - your name here so thanks for watching
20:09 - and I'll see you soon

Cleaned transcript:

thanks for tuning in at brakus hello and welcome to this third video on creating a tower defense game in unity so today we are going to be creating a wave spawner that will of course spawn in waves of enemies so that's going to be a lot of fun we are going to be creating a very barebones version of a wave spawner because we're only going to have one type of enemy that we will spawning in groups and we're only going to have one spawn point so it's it's very simple actually if you want something more configurable that has all of these stuff like you can have different levels with different enemies and different spawn points well then you should check out my twopart series on the channel on creating a wave spawner it's kind of a standalone miniseries and it has all the functionality that you're going to need basically but we are probably going to modify this anyways to to do more stuff later so without further ado I will just show you here before we get started that the project is now in github so if you go to the link in description you can go and download the entire project with everything that I've made and you can just open it up in unity or you can grab scripts from it or whatever you want so if you have a trouble with something I just want to mess around with my project you can go here hit clone or download and download a zip file or you can of course use github to clone it as we go along and if you want an older version then you can go to commits here and you can select whatever version you want and you can see right now there's only video that's of course going to be video three four and five and so on but video one is not actually here I'm sorry but I forgot to do it with the first video so everything starts at video number two sorry one happen again good so without further ado let's open up unity and get started with the video so let's rightclick and hit create empty and let's rename this to game master and this object right here is going to have different scripts that manages the game we could also call it game manager or just manage your scripts or whatever I'm going to call it game master and let's make a new script on this cold wave spawner and then we can have just a series of scripts here so let's double click on that to open it up in Visual Studio and the basics of a wave spawner is in fact well pretty basics we are just going to use the instantiate command pretty excessively and then make sure to time it in some way so what we're going to do is we're going to delete these two methods to begin with and then let's make a public and we're going to make this a transform and this is going to be the prefab of the enemy that we want to spawn so this is just going to be our enemy prefab and this is what we could later turn into some kind of level that will rise and difficulty or some different enemies that we can choose from but for now let's just choose this one single enemy that we've made and then we want of course on some public float which is going to be the time between waves or the countdown timer or whatever you want to call this and this is going to be just for testing purposes I'm going to set this to 5 but in reality you probably want it to be longer then what we want to do is we want to go into the update method and we want to have some kind of way of managing time and what I thought we would do is create a private variable here a private float that we call the countdown and we might want some kind of way of getting this number or using this number to display it on the screen but for now it will just be behind the scenes and we might change this in this video in fact if we are fast and this is going to start off at whatever you want the time however long you want it to take before it spawns the first wave so that might not be 5 or that might exactly be 5 so I'm going to set this to 2 so that it takes the 2 seconds until it spawns the first wave and then what I'm going to do is I'm going to go into the update method here and I'm going to say that if countdown is less than or equal to 0 so if our timer has reached the serial mark well then we want to start spawning some enemies so we are going to make a a method down here that is going to say spawned wave and that's going to be responsible for spawning an entire group of enemies right so right now we can just use a debug that likes statement here that says a wave incoming something like that and then we can close that off and then here we want of course to call the spawn wave method that we just created so that will jump down here and execute this code and then we want to set the countdown timer again because we don't want it to stay at zero and then just keep counting down to negative one negative two no we want this to be set then to the time between waves so um and then we need some kind of way of decreasing this countdown timer we wanted to go down by one every second and we want to do this every frame so we can say that countdown equals time Delta time and again timed at Delta time is the time amount of time passed since the last time we drew a frame so if we just do this it's going to mean that it will reduce countdown by one every second and we'll do so fluently so what we are doing here is we are creating a countdown float that is going to decrease with time and when it reaches zero we spawn a wave and we reset it to five seconds okay so that's all we're doing and let's try and save this and see if it actually works Oh our spawn wave spawn is here let's make sure to find our enemy prefab and drag it in here let's make sure to delete these enemies and now hit play and we should see that after two seconds we get a wave incoming and then after a following five seconds we should get another wave incoming and that was so that's perfect so whenever we spawn a wave we basically want to spawn a group of enemies and to determine how many enemies that's going to be there's lots of different stuff that we could do we could either make an array of waves with an enemy type and the number of enemies we want to spawn and the delay between them and all that and that's what we do in the wave spawner a short series so you can check that out if that's what you want or if we are lazy we could use the wave number the number of waves that we've been through that we've encountered to tell how many enemies we want to spawn so that the difficulty will increase as we go through another way and you can do this using some kind of function you could use some kind of polynomial that's not like for we will take the wave number and we will square it and that will be how many enemies we will face but we could also just use well the wave number to determine how many enemies it's going to be so the first wave wave will be one enemy and the second to and so on so that's what we're going to do for now and then we can come in and change it later which we will probably do so the spawn wave here is now just going to spawn some kind of wave number and we will loop through this using a for statement but first we need to create this wave number and that's going to be a private integer and we are going to call this the either wave number or wave index I think we will start this at one and therefore I'm going to call this the actual wave number and that's going to be one there we go and then every time we spawn a wave we can take a wave number and increase it when we are done spawning and yeah that all makes sense and but this is actually yeah that's the current wave number everything is good good so on what we can do here now is that we can loop through this wave number so we can use a for statement and if you have hit tab here twice it's going to auto fill this order completed and for I is less than and then we use wave number that's going to be at the amount of enemies and then for each of these we can spawn and enemy and that's another method that we are going to be creating so let's do a void spawn enemy and this is going to be a very short method but it's good to split it up into different methods and then add stuff to those methods that we as we go and we are going to instantiate what are we going to instantiate well we are going to instantiate our enemy prefab and now we need to determine where to instantiate this and therefore I want to go up here I want to create a reference to some kind of spawn location public transform and we are going to call this spawn point and that's again something we'll reference in the inspector and then we can scroll down here again on this spawn enemy so we'll spawn the enemy prefab at spawn point dot position at spawn point dot rotation there we go and now we've spawned this enemy and we don't need to worry about D spawning it or anything that will be handled by our pathfinding system so that's fine we are actually done whoops we are actually done with this script for now so if we go back into unity now and find out game master we should have another empty slot and that's going to be for the spawn point so we can go ahead and create some kind of empty object or we could just use our start node so if we go in the game master find a start node and drag that in there that should actually do it so when now when we hit play we are still gun not going to have any visual representation of what's going on but we can see that we just spawned an enemy and after five seconds it should hopefully spawn two enemies which it did however each of these enemies you can see here that it's spawning lots of enemies but there are multiple enemies on top of each other and that's a problem so how do we space these out well we could do the same have some kind of float variable up here that we reset some kind of countdown separate from the other countdown or we could use what is called a KO routine and this is a super handy super awesome way of kind of creating these subroutines these ways of odd executing code separate from our main piece of code so we have this main countdown that spawns waves and then we have this separate wave spawner that has its own timing and runs in its own separate way and the way to do this is we simply turn this here this method here the spawn wave into a cover routine how do we do this well in a very fusing way so if we go up here we type in using system dark collections the namespace I removed earlier but I wanted to show you that that's why it's there that's primarily what you use it for in unity most of the time so using system dark collections and that allows us to write this weird I in numerator here and the I in numerator instead of void allows us now to pause this piece of code so we can actually wait X amount of seconds before continuing so what we can do here is we can spawn an enemy and then after we've spawned an enemy we can say yield return new wait for seconds and this is a lot of weird syntax and I'm not going to explain it in detail and then we could maybe wait point two seconds so we could maybe wait like half a second or you could turn this up this here into some kind of variable that we can adjust but for now I think I'll just hardcoded in here so that will indeed spawn status spawn wave loop through it spawn an enemy wait point five seconds spawn another enemy wait point five seconds and so on and then it will increase the wave number and I just realized that since we are waiting within this spawn wave it might be a good idea to increase the wave number up here and then have it start at zero instead and actually I'm going to rename this to wave index it's just cleaners just feels more nice okay so I'm the only thing that we need to realize here is whenever we create an eye enumerator we can't just call the method like this this is not the way that you start a corroding instead we simply write start coroutine and then we input the spawn wave in here and remember to open and close the parentheses to indicate that we are talking about a function so that was all we needed to do and now when we go back here we should hopefully see this piece of code working so when we hit play now we should see after two seconds it spawns one enemy then we wait another five seconds and it should spawn too with an interval of point five seconds and that's it's just going to keep doing this as the difficulty increases and you can see we actually already have a pretty nice scaling system for making more and more difficult enemies you will also realize that at some point we are going to start spawning enemies on top of each other because the it's going to take so long to spawn a wave and that there's not going to be enough time to finish spawning it before another wave starts and that's of course a problem with our system but that's not something we'll worry about yet I think we have more important stuff to implement and then later we can look at that kind of stuff so now when we are save this we have that done and let me just check the on time here yeah so I think we just have time to maybe our display this countdown on a timer on the UI so let's just do that really quickly because it makes this system feel a lot nicer so let's rightclick over here and create off first UI element so let's go into UI and this is going to be a symbol text object let's go to the canvas now hit F to focus on that and that's giant but that it should be huge and then let's switch to 2d mode and switch our controls here over to the 2d controls let's find our text object and let's Center this on the top so if you hold down alt and click here it's going to snap it anchor it to the top and move it to the top and now we can hit F to focus in on this once more we can then move it down by holding shift to snap it to this axis right here and then we can maybe scale this up to make some more room and I'm using old here to scale in all the axes and we can move it down some more then we can Center it on the X and Center it on the Y and then we can maybe just input some kind of number here so I'm just going to input 20 I'm going to scale this up quite a bit something like I don't know maybe 80 that's very large let's try 70 and then we can also change the color of this change the color of this to probably a Y this one I'm going to want here but we should really mess around with is some more in the future I know this looks kind of weird but we are going to moving and be moving around the camera anyway so it's going to be looking a little weird but what we can do is maybe add some kind of shadow just to make it stand out from the white on our level so let's just write in shadow here and that just helps it pop just a bit and we can maybe increase the shadow here a tiny bit something like that and I'm also going to make this a bold number to make it stand out even more so now we actually have this number that looks fairly decent and yeah and we can of course edit that and again I insist that you spend more time on the UI than I do we'll probably also find some kind of cool font I don't like the Arial default fund but for now this is going to work just fine and this is going to be renamed to the on wave countdown timer and what we can then do is we can jump back into a visual studio here and we can add a reference to this and change it in the update method so that's what we're going to do so we're going to go in here and add a reference and let's actually add that right by the time between waves so this is going to be a public oops a public and then we want a reference to a text object so we are going to be using Unity engine ton UI that will allow us to reference eight texts and we're going to call this the wave countdown text like that and then in the update method as we go through here and we're going to do this after we change the countdown I believe it's really important I don't know sure let's do that and then that set our wave countdown text don't text to be equal to countdown and we want this to be to string to convert it to a string and to avoid that this has all kinds of float numbers all kinds of decimal places is what it's called we are going to actually do something kind of cool here so we're going to say math dot floor and that's going to simply cut off all of the decimal places and only leave the first one and then that is what we want to turn into a string so we're going to math dot Floyd and then do a two string right after that something like that so floor will simply cut off all of the decimal places it's not going to round or anything it's simply going to well always round down then to an integer value and it still is still in a float data type but it is a whole number so that's what that's going to do and then we probably want to since we are flowing it we probably want to add one so if we just if we just add one here I think that's actually let's try this out so let's hit play here and see what happens to this number oh of course we need a reference so in our game master we should drag in the wave countdown text there we go and now we should see it says one zero and you can see it skips the five there and that's kind of what I wanted to avoid but then again it kind of jumps quickly that's annoying so what we can do instead is we could try and round this so if we round this number off we can see now it says two one zero and five four three two one and that's fine so you can see jumps a bit there but that's okay I think we'll live with that if we want to change that what we can do is make the time between waves something like five point five and now that should actually be fixed here so there we go so now it won't jump in time so that's perfect and yeah that's a working countdown timers so that's great that's basically all I wanted to show you for this video I hope you enjoyed it I can't wait for the next one I think this series is really fun to work on so without further adieu thanks for watching and I'll see you in the next video so I'm going to start mentioning patreon supporters the following month after they donate so that there won't be any difference from donating at the beginning of the month to the end of the month this way everyone will get a full month of May and yeah everyone will be happy so just wait for the next month and you will see your name here so thanks for watching and I'll see you soon
