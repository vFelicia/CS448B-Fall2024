With timestamps:

00:00 - - So far, we've only made
programmes that would
00:01 - do the same thing every time.
00:04 - While that is cool,
programming doesn't start
00:06 - to get really interesting before we can
00:08 - have our programme
determine what to do next
00:10 - based on what we tell it.
00:11 - This is where the IF statement comes in.
00:14 - IF statements allow us
to check for a condition
00:16 - and execute different code
00:17 - depending on if its true or false.
00:19 - Say, for example, we want
to create a quiz game.
00:22 - Here, we need to check if the
player's answers are correct.
00:25 - We can, of course, do that
using an IF statement.
00:28 - In this case, we could have the
programme ask something like
00:30 - "What's the best movie
trilogy of all time?"
00:33 - We could then collect
some input from the player
00:35 - and check if it corresponds
to the correct answer.
00:37 - If it does, and the user
typed in "Lord of the Rings,"
00:40 - we can print out "Correct!"
00:42 - If it doesn't, and the user
typed in anything else,
00:45 - we can print out "Incorrect,"
00:46 - and send them to the
fiery depths of Mordor.
00:49 - (beep)
00:49 - So, IF statements is one
of the most essential tools
00:52 - for any programmer.
00:53 - But, before we get into it,
00:55 - this video is sponsored by Denis Panjuta.
00:57 - Denis is an awesome game dev tutor,
00:58 - who just updated his super successful
01:00 - complete C# masterclass.
01:02 - This class will make you
01:03 - super comfortable writing code in C#,
01:05 - and using it for programming
your own games in Unity.
01:08 - It will give you knowledge
on many different aspects
01:10 - of C# and teach topics such as databases,
01:13 - link in WPF, and much more.
01:15 - At the end of the course,
01:16 - you will even have made
three games on your own.
01:18 - If this sounds like something
you're interested in,
01:20 - simply click the link in the
description to get started
01:22 - and get a massive discount.
01:23 - Now, when we want to
write an IF statement,
01:25 - the syntax is actually quite simple.
01:27 - We write "if," then some parentheses,
01:30 - and then we open and
close some curly brackets.
01:32 - Inside the parenthesis,
we put our condition.
01:35 - In other words, what we want to check for.
01:37 - In the case of our quiz game,
01:38 - we probably have some kind
of player-answer variable
01:41 - that holds whatever the player typed in.
01:43 - We can check if this is
equal to Lord of the Rings.
01:46 - If it is, our condition is met,
01:48 - then everything inside
of the curly brackets
01:50 - will be executed.
01:51 - So, in this case, we
would print out "Correct."
01:54 - Of course, we often want
to define what happens
01:56 - if the condition isn't met.
01:58 - If this is the case, we
use an IF/else statement.
02:01 - This is as simple as writing
"else" at the bottom,
02:03 - followed by two curly brackets,
02:05 - where we can put what we want to happen
02:06 - if the condition isn't met.
02:08 - In this case, we would
print out "Incorrect."
02:11 - (indistinct)
02:14 - Mordor!
02:15 - Now, we can use different
symbols to create conditions.
02:18 - The double equals means "is equal to,"
02:20 - and an exclamation sign and an equal sign
02:23 - means "is not equal to."
02:24 - If we are dealing with numbers,
02:26 - the greater than or less than signs
02:29 - can be used to check if
a number is greater than
02:31 - or less than the other number.
02:33 - If we put an equal sign after that,
02:35 - it means "greater than or equal to,"
02:38 - or "less than or equal to."
02:40 - Of course, I don't expect you
to remember this right away,
02:43 - so here's a table that you
can look at if in doubt.
02:46 - With that, let's write some code.
02:49 - Let's say you're going to
the cinema to watch a movie
02:51 - and you want to buy a ticket.
02:53 - Well, using IF statements,
02:54 - we can create a programme
that allows you to do this.
02:57 - So let's, first of all,
use "Console.WriteLine"
03:00 - to just print out something like
03:02 - "Welcome! Tickets are
$5. Please insert cash."
03:09 - Then we can have the
user insert some cash.
03:12 - In our case, let's store
this in an integer.
03:14 - So, we'll create an integer called "cash,"
03:17 - and set it equal to "Console.ReadLine."
03:21 - Remember, like we talked about in
03:22 - our last video on variables,
03:24 - we first have to convert
this to an integer.
03:26 - So, we'll use "Convert.ToInt32,"
03:30 - and wrap the parentheses
around the "ReadLine."
03:33 - There we go.
03:34 - So, we've now asked the
user to input some cash,
03:36 - and the user can then type in a number,
03:38 - which is the amount of
dollars they put in.
03:41 - What we can then do is use an
IF statement to do something
03:45 - based on how much they put in.
03:47 - So, we'll make some new lines here,
03:48 - and we'll write "if," then parenthesis,
03:51 - and then we'll write the condition.
03:53 - In our case, we can check "if (cash < 5),"
03:58 - because the ticket price is five dollars.
04:00 - In this case, the user
hasn't put in enough money.
04:03 - So, we can go ahead and open
and close some curly brackets,
04:06 - and I'm just going to put them down here
04:08 - on a separate line so it's very clear
04:10 - that inside of these curly brackets
04:12 - is what is going to happen
if this condition is true.
04:16 - We can just put something in here like
04:17 - "Console.WriteLine("That's
no enough money.");"
04:22 - There we go.
04:23 - So if the user inputs
less than five dollars,
04:25 - we can going to print out
that that's not enough.
04:27 - Right away, if we run this
programme, we can see it says
04:30 - "Welcome! Tickets are
$5. Please insert cash."
04:34 - I'm going to type in "3" here,
04:36 - and it says "That's not enough money."
04:38 - Awesome.
04:39 - Of course, we also want
to write what happens
04:41 - when the user inputs enough.
04:43 - For that, we can use an IF/else.
04:45 - So, right now we're saying,
04:46 - if we input less than
five dollars, do this.
04:49 - Then, after that, we can write "else,"
04:52 - so in all other cases.
04:54 - Again, I'm going to put
this on a separate line
04:57 - just to make it easier to read.
04:58 - So, if the user inputs
five dollars or more,
05:01 - then we can write "Here is your ticket,"
05:05 - and print out a ticket for them.
05:07 - Again, if we run this programme now,
05:09 - and we type in five dollars,
05:11 - it says "Here's your ticket."
05:12 - Awesome.
05:13 - But if the user inputs
more than five dollars,
05:16 - we want to give them their
ticket as well as some change.
05:20 - So, we actually need to add a
separate condition for this.
05:23 - We can do this using an else/IF.
05:25 - So, if the user inputs
less the five dollars,
05:27 - we write out "That's not enough money."
05:29 - If not, then we can check.
05:31 - So, "else if (cash == 5)."
05:35 - If the user inputs a exactly five dollars,
05:37 - then we can write out
"Here's your ticket."
05:40 - If not - so we can put
another else statement here -
05:43 - if not...well then it's
not less than five dollars
05:46 - and its not equal to five dollars,
05:48 - so it's more than five dollars.
05:50 - Here, we can go ahead and calculate
05:52 - how much change we should
give back to the user.
05:55 - So we can use a variable,
call it "change,"
05:58 - and set it equal to the
amount of cash that is put in,
06:01 - minus five, which is the ticket price.
06:04 - So, that's how much we want to give back.
06:07 - So, we can write out
06:08 - "Console.Writeline
06:11 - ("Here is your ticket and" +
change + "dollars in change.")"
06:17 - There we go.
06:18 - So, we basically have three
different states here:
06:20 - less than five dollars,
equal to five dollars,
06:22 - or more than five dollars.
06:24 - We are using this by
just chaining together
06:26 - IF and else/IF statements.
06:28 - Really, really cool.
06:29 - If we go ahead and run this now,
06:32 - we can see that if we input
more than five dollars,
06:35 - so I'm going to put in eight dollars here,
06:37 - it says "Here's your ticket
and 3 dollars in change."
06:41 - Awesome.
06:42 - So, that's a great way to
start using IF statements
06:44 - in your code to do different things
06:46 - depending on whether or
not a condition is met.
06:50 - Let's have a look at another example.
06:52 - So, imagine that we're at a theme park,
06:54 - and we want to create a programme
06:56 - that checks whether or
not people are allowed
06:58 - to go onto a rollercoaster.
07:00 - In this case, we want to determine this
07:02 - based on the age and height of the user.
07:04 - So, as you can see at the top here,
07:06 - I'm declaring two variables:
07:07 - an integer for the age
07:09 - and an integer for the height.
07:10 - So, two simple numbers,
07:12 - and then asking the
user to input their age,
07:14 - and collecting it just like we did before.
07:17 - After that, I ask the
user to input their height
07:19 - in centimetres
07:20 - and, again, we collect
that just like before.
07:23 - If I just quickly run this programme,
07:25 - we can see that I can input an age.
07:27 - Let's just do "24",
07:29 - and a height, let's just do "190."
07:32 - There we go.
07:32 - So, we can now use IF
statements to determine
07:35 - if the user can enter the rollercoaster
07:37 - based on these two variables.
07:39 - So, just like before, we
can create some lines.
07:41 - We can check "if(age >= 18)."
07:47 - Well, then, we can write out
07:48 - "Console.WriteLine("You can enter!")"
07:53 - Notice how this time,
07:54 - I'm just leaving the
curly bracket up here.
07:56 - It does the exact same thing.
07:58 - If this is harder for you to read,
07:59 - feel free to put it on a separate line,
08:02 - but this is just shorter and, kind of,
08:03 - the standard practise these days.
08:05 - So, now we are saying that anyone
08:06 - who is 18 or older can
enter the rollercoaster.
08:10 - We also want to check if
the person is tall enough.
08:13 - To do this, we could go in here
08:15 - and create another IF
statement inside the other one,
08:18 - so we could go "if(height >= 160),"
08:26 - then the person can enter.
08:27 - Then, put this in here.
08:29 - This is called nesting
because we are putting
08:31 - one IF statement inside of another,
08:34 - but there's actually an
easier way to do this.
08:37 - So, instead of creating two IF statements,
08:39 - we can just go up here,
08:41 - and add another condition
that needs to be met.
08:44 - To do that, we use two ampersand signs.
08:46 - This means "and."
08:48 - So, "if(age >= 18 && height >= 160),"
08:56 - well then, this condition is met
08:57 - and we can go ahead and
write "You can enter!"
09:00 - If not, we'll put an "else" here,
09:03 - "Console.WriteLine("You don't
meet the requirements.")"
09:09 - If we try and run this,
we can put in an age.
09:13 - Let's say 22 - that's old enough -
09:15 - and a height - let's do something
that isn't tall enough -
09:18 - so, let's just input 140.
09:20 - As you can see, it says "You
don't meet the requirements,"
09:23 - because only one of the
variables is correct.
09:25 - Whereas, if we re-run the
programme and input 22
09:29 - and then, let's say, 190,
09:31 - it says "You can enter."
09:33 - Just like we can check whether
both of these conditions
09:36 - are true,
09:37 - we can also check if just one of them is.
09:40 - That's the "or" sign or "||."
09:43 - So, this means that the condition is met
09:45 - if either of these two are true.
09:47 - So, if we're older than 18
09:49 - or our height is greater than 160.
09:52 - If we save that and run it now,
09:54 - we can input an age of "14,"
which is not old enough,
09:57 - and then a height which is large enough,
09:59 - so 180, we can see that
it says "You can enter,"
10:02 - because, now, one of
the conditions is met.
10:04 - So, that's how you can work
with multiple conditions.
10:07 - Awesome.
10:08 - Now, for the challenge
before the next video,
10:10 - I would like you to create a programme
10:12 - - kind of a game, actually -
10:14 - where the player has
to solve math problems.
10:17 - An example of this could be "10 * 2 + 3."
10:21 - So, the answer to this is, of course, 23.
10:27 - So, you have to show the user problem,
10:29 - have them input an answer,
10:30 - and if the answer is correct,
10:32 - you can tell the user that it's correct.
10:34 - If not, you have to tell
them that it's wrong.
10:36 - So, in my programme here,
I'm showing "15 + 2 * 2."
10:39 - That fifteen plus four, or nineteen,
10:42 - which is correct, and it tells me so.
10:44 - Then, it actually gives
me another problem.
10:46 - Let's say I get this answer
wrong and say that's twelve,
10:49 - which is wrong and it shows that.
10:51 - Then, there's a final one here,
10:53 - and I believe the answer to this is six,
10:57 - which is correct.
10:58 - So, I've just put in three problems here.
11:00 - You can put in as many as you want,
11:02 - but that is your challenge
for the next video.
11:05 - So, before we end, I just
want show you one quick thing,
11:08 - which is the switch statement.
11:10 - So, here I have an example,
where it asks the user
11:13 - to input a number between one and five.
11:16 - We, then, collect the
number as we normally do,
11:19 - and then we want to do something
11:20 - based on what number was passed in.
11:22 - So, we have all of
these IF statements here
11:25 - to check for the different cases.
11:27 - So, if the number is "1,"
11:29 - then we just write out
"One" in the Console.
11:31 - Else, if it's "2," we write out "Two."
11:33 - If it's "3," we write out "Three,"
11:34 - and the same with four and five.
11:37 - While this is totally valid,
11:39 - and it should work,
11:39 - in fact, if we run our
programme and type in a number-
11:42 - I'm going to type in "Three" here,
11:44 - we can see that it prints out "3."
11:46 - However, whenever we are
dealing with a single variable,
11:49 - that can have many different values,
11:51 - and we want to do something
based on the value,
11:54 - that is the perfect example
11:56 - of where a switch
statement is really useful.
11:59 - So, instead of writing this
chain of IF statements here,
12:01 - we can actually delete that,
12:03 - and we can write "switch."
12:05 - We then give it the variable
that we want to check for.
12:08 - In my case, I called that "num,"
12:10 - and then open and close
some curly brackets.
12:13 - Inside of these, we can then create code
12:16 - for the different cases.
12:17 - So, in the case that "num" here is one,
12:21 - so "case 1:"
12:24 - and then underneath here,
we put in what happens.
12:27 - So, in our case, we want
to want to write out
12:29 - "Console.WriteLine("One");"
12:33 - We can multiple lines of code here,
12:35 - we can do more stuff,
12:36 - or we could just end it
here by typing "break;"
12:41 - So, that is the syntax.
12:42 - So, we're basically saying
that we want to switch
12:44 - based on the "num" variable,
12:46 - and in the case that it's "One,"
12:48 - we go ahead and do something.
12:49 - In our case, we write out
"One" and then we break.
12:52 - We can do that for all
of the different cases.
12:54 - So, we could go "case 2:,"
12:57 - so in the case that this number is two,
12:59 - we write out "Two,"
13:02 - and then "break;"
13:03 - We can keep going like this
13:05 - for all of the different numbers,
13:06 - so I'm just going to do that.
13:08 - (smooth music)
13:11 - So, as you can see,
13:12 - while this works in the
exact same way as before,
13:15 - and it takes up just the
same amount of space,
13:17 - it actually makes it much
easier to tell what's going on.
13:20 - We're switching based
on the "num" variable
13:22 - and we can clearly see
the different cases.
13:24 - The cool thing about a
switch is that we're not sure
13:27 - that we're going to pass in
a value between one and five.
13:30 - So, we can actually put
in a default case here,
13:34 - which is going to happen if
none of these cases are met.
13:38 - So, in this case, we could just write out
13:39 - "Console.Writeline("Default"),"
13:43 - and then, again, a "break;"
13:45 - Now, if we run this programme here,
13:47 - and if we type a value that
isn't between one and five -
13:50 - let's say, "7,"
13:52 - we can see it says "Default."
13:53 - So, for all other values that
aren't added as a case here,
13:57 - it's just going to go
to the default state.
14:00 - So, that's a switch statement.
14:01 - There's really not more to it.
14:03 - You can choose if you want
to use this or IF statements.
14:05 - It's completely up to you.
14:07 - That's pretty much it for this video.
14:08 - If you enjoyed it, make sure to subscribe
14:10 - and ring that notification bell so
14:11 - you don't miss the next one.
14:12 - As always, you can find my
solution to this week's challenge
14:15 - on the Brackeys forum.
14:16 - There's, of course, a link
to that in the description.
14:18 - Also, make sure to go check out
14:19 - the complete C# masterclass
by clicking the link
14:22 - in the description.
14:23 - On that, thanks for watching
14:24 - and I will see you in the next video!
14:31 - Thanks to the awesome Patreon supporters
14:32 - who donated in June,
14:34 - and a special thanks to
Nubby Ninja, faisal marafie,
14:36 - Lost to Violence, Loved Forever,
SRT Mike, Piano Sathornlak,
14:40 - Replica Studios, Jason
Uritescu, Léo Lesêtre,
14:43 - Alison the Fierce, Michail
Korobov, Owen Cooper,
14:45 - Gregory Pierce, Naoki Iwasaki,
Dante_Sam, Donatien Gascoin,
14:49 - SiriusWolf, TheMightyZeus, Jacob Sanford,
14:51 - Marc-Antoine Girard, and Erasmus.
14:53 - You guys rock.

Cleaned transcript:

So far, we've only made programmes that would do the same thing every time. While that is cool, programming doesn't start to get really interesting before we can have our programme determine what to do next based on what we tell it. This is where the IF statement comes in. IF statements allow us to check for a condition and execute different code depending on if its true or false. Say, for example, we want to create a quiz game. Here, we need to check if the player's answers are correct. We can, of course, do that using an IF statement. In this case, we could have the programme ask something like "What's the best movie trilogy of all time?" We could then collect some input from the player and check if it corresponds to the correct answer. If it does, and the user typed in "Lord of the Rings," we can print out "Correct!" If it doesn't, and the user typed in anything else, we can print out "Incorrect," and send them to the fiery depths of Mordor. (beep) So, IF statements is one of the most essential tools for any programmer. But, before we get into it, this video is sponsored by Denis Panjuta. Denis is an awesome game dev tutor, who just updated his super successful complete C# masterclass. This class will make you super comfortable writing code in C#, and using it for programming your own games in Unity. It will give you knowledge on many different aspects of C# and teach topics such as databases, link in WPF, and much more. At the end of the course, you will even have made three games on your own. If this sounds like something you're interested in, simply click the link in the description to get started and get a massive discount. Now, when we want to write an IF statement, the syntax is actually quite simple. We write "if," then some parentheses, and then we open and close some curly brackets. Inside the parenthesis, we put our condition. In other words, what we want to check for. In the case of our quiz game, we probably have some kind of playeranswer variable that holds whatever the player typed in. We can check if this is equal to Lord of the Rings. If it is, our condition is met, then everything inside of the curly brackets will be executed. So, in this case, we would print out "Correct." Of course, we often want to define what happens if the condition isn't met. If this is the case, we use an IF/else statement. This is as simple as writing "else" at the bottom, followed by two curly brackets, where we can put what we want to happen if the condition isn't met. In this case, we would print out "Incorrect." (indistinct) Mordor! Now, we can use different symbols to create conditions. The double equals means "is equal to," and an exclamation sign and an equal sign means "is not equal to." If we are dealing with numbers, the greater than or less than signs can be used to check if a number is greater than or less than the other number. If we put an equal sign after that, it means "greater than or equal to," or "less than or equal to." Of course, I don't expect you to remember this right away, so here's a table that you can look at if in doubt. With that, let's write some code. Let's say you're going to the cinema to watch a movie and you want to buy a ticket. Well, using IF statements, we can create a programme that allows you to do this. So let's, first of all, use "Console.WriteLine" to just print out something like "Welcome! Tickets are $5. Please insert cash." Then we can have the user insert some cash. In our case, let's store this in an integer. So, we'll create an integer called "cash," and set it equal to "Console.ReadLine." Remember, like we talked about in our last video on variables, we first have to convert this to an integer. So, we'll use "Convert.ToInt32," and wrap the parentheses around the "ReadLine." There we go. So, we've now asked the user to input some cash, and the user can then type in a number, which is the amount of dollars they put in. What we can then do is use an IF statement to do something based on how much they put in. So, we'll make some new lines here, and we'll write "if," then parenthesis, and then we'll write the condition. In our case, we can check "if (cash < 5)," because the ticket price is five dollars. In this case, the user hasn't put in enough money. So, we can go ahead and open and close some curly brackets, and I'm just going to put them down here on a separate line so it's very clear that inside of these curly brackets is what is going to happen if this condition is true. We can just put something in here like "Console.WriteLine("That's no enough money.");" There we go. So if the user inputs less than five dollars, we can going to print out that that's not enough. Right away, if we run this programme, we can see it says "Welcome! Tickets are $5. Please insert cash." I'm going to type in "3" here, and it says "That's not enough money." Awesome. Of course, we also want to write what happens when the user inputs enough. For that, we can use an IF/else. So, right now we're saying, if we input less than five dollars, do this. Then, after that, we can write "else," so in all other cases. Again, I'm going to put this on a separate line just to make it easier to read. So, if the user inputs five dollars or more, then we can write "Here is your ticket," and print out a ticket for them. Again, if we run this programme now, and we type in five dollars, it says "Here's your ticket." Awesome. But if the user inputs more than five dollars, we want to give them their ticket as well as some change. So, we actually need to add a separate condition for this. We can do this using an else/IF. So, if the user inputs less the five dollars, we write out "That's not enough money." If not, then we can check. So, "else if (cash == 5)." If the user inputs a exactly five dollars, then we can write out "Here's your ticket." If not so we can put another else statement here if not...well then it's not less than five dollars and its not equal to five dollars, so it's more than five dollars. Here, we can go ahead and calculate how much change we should give back to the user. So we can use a variable, call it "change," and set it equal to the amount of cash that is put in, minus five, which is the ticket price. So, that's how much we want to give back. So, we can write out "Console.Writeline ("Here is your ticket and" + change + "dollars in change.")" There we go. So, we basically have three different states here less than five dollars, equal to five dollars, or more than five dollars. We are using this by just chaining together IF and else/IF statements. Really, really cool. If we go ahead and run this now, we can see that if we input more than five dollars, so I'm going to put in eight dollars here, it says "Here's your ticket and 3 dollars in change." Awesome. So, that's a great way to start using IF statements in your code to do different things depending on whether or not a condition is met. Let's have a look at another example. So, imagine that we're at a theme park, and we want to create a programme that checks whether or not people are allowed to go onto a rollercoaster. In this case, we want to determine this based on the age and height of the user. So, as you can see at the top here, I'm declaring two variables an integer for the age and an integer for the height. So, two simple numbers, and then asking the user to input their age, and collecting it just like we did before. After that, I ask the user to input their height in centimetres and, again, we collect that just like before. If I just quickly run this programme, we can see that I can input an age. Let's just do "24", and a height, let's just do "190." There we go. So, we can now use IF statements to determine if the user can enter the rollercoaster based on these two variables. So, just like before, we can create some lines. We can check "if(age >= 18)." Well, then, we can write out "Console.WriteLine("You can enter!")" Notice how this time, I'm just leaving the curly bracket up here. It does the exact same thing. If this is harder for you to read, feel free to put it on a separate line, but this is just shorter and, kind of, the standard practise these days. So, now we are saying that anyone who is 18 or older can enter the rollercoaster. We also want to check if the person is tall enough. To do this, we could go in here and create another IF statement inside the other one, so we could go "if(height >= 160)," then the person can enter. Then, put this in here. This is called nesting because we are putting one IF statement inside of another, but there's actually an easier way to do this. So, instead of creating two IF statements, we can just go up here, and add another condition that needs to be met. To do that, we use two ampersand signs. This means "and." So, "if(age >= 18 && height >= 160)," well then, this condition is met and we can go ahead and write "You can enter!" If not, we'll put an "else" here, "Console.WriteLine("You don't meet the requirements.")" If we try and run this, we can put in an age. Let's say 22 that's old enough and a height let's do something that isn't tall enough so, let's just input 140. As you can see, it says "You don't meet the requirements," because only one of the variables is correct. Whereas, if we rerun the programme and input 22 and then, let's say, 190, it says "You can enter." Just like we can check whether both of these conditions are true, we can also check if just one of them is. That's the "or" sign or "||." So, this means that the condition is met if either of these two are true. So, if we're older than 18 or our height is greater than 160. If we save that and run it now, we can input an age of "14," which is not old enough, and then a height which is large enough, so 180, we can see that it says "You can enter," because, now, one of the conditions is met. So, that's how you can work with multiple conditions. Awesome. Now, for the challenge before the next video, I would like you to create a programme kind of a game, actually where the player has to solve math problems. An example of this could be "10 * 2 + 3." So, the answer to this is, of course, 23. So, you have to show the user problem, have them input an answer, and if the answer is correct, you can tell the user that it's correct. If not, you have to tell them that it's wrong. So, in my programme here, I'm showing "15 + 2 * 2." That fifteen plus four, or nineteen, which is correct, and it tells me so. Then, it actually gives me another problem. Let's say I get this answer wrong and say that's twelve, which is wrong and it shows that. Then, there's a final one here, and I believe the answer to this is six, which is correct. So, I've just put in three problems here. You can put in as many as you want, but that is your challenge for the next video. So, before we end, I just want show you one quick thing, which is the switch statement. So, here I have an example, where it asks the user to input a number between one and five. We, then, collect the number as we normally do, and then we want to do something based on what number was passed in. So, we have all of these IF statements here to check for the different cases. So, if the number is "1," then we just write out "One" in the Console. Else, if it's "2," we write out "Two." If it's "3," we write out "Three," and the same with four and five. While this is totally valid, and it should work, in fact, if we run our programme and type in a number I'm going to type in "Three" here, we can see that it prints out "3." However, whenever we are dealing with a single variable, that can have many different values, and we want to do something based on the value, that is the perfect example of where a switch statement is really useful. So, instead of writing this chain of IF statements here, we can actually delete that, and we can write "switch." We then give it the variable that we want to check for. In my case, I called that "num," and then open and close some curly brackets. Inside of these, we can then create code for the different cases. So, in the case that "num" here is one, so "case 1" and then underneath here, we put in what happens. So, in our case, we want to want to write out "Console.WriteLine("One");" We can multiple lines of code here, we can do more stuff, or we could just end it here by typing "break;" So, that is the syntax. So, we're basically saying that we want to switch based on the "num" variable, and in the case that it's "One," we go ahead and do something. In our case, we write out "One" and then we break. We can do that for all of the different cases. So, we could go "case 2," so in the case that this number is two, we write out "Two," and then "break;" We can keep going like this for all of the different numbers, so I'm just going to do that. (smooth music) So, as you can see, while this works in the exact same way as before, and it takes up just the same amount of space, it actually makes it much easier to tell what's going on. We're switching based on the "num" variable and we can clearly see the different cases. The cool thing about a switch is that we're not sure that we're going to pass in a value between one and five. So, we can actually put in a default case here, which is going to happen if none of these cases are met. So, in this case, we could just write out "Console.Writeline("Default")," and then, again, a "break;" Now, if we run this programme here, and if we type a value that isn't between one and five let's say, "7," we can see it says "Default." So, for all other values that aren't added as a case here, it's just going to go to the default state. So, that's a switch statement. There's really not more to it. You can choose if you want to use this or IF statements. It's completely up to you. That's pretty much it for this video. If you enjoyed it, make sure to subscribe and ring that notification bell so you don't miss the next one. As always, you can find my solution to this week's challenge on the Brackeys forum. There's, of course, a link to that in the description. Also, make sure to go check out the complete C# masterclass by clicking the link in the description. On that, thanks for watching and I will see you in the next video! Thanks to the awesome Patreon supporters who donated in June, and a special thanks to Nubby Ninja, faisal marafie, Lost to Violence, Loved Forever, SRT Mike, Piano Sathornlak, Replica Studios, Jason Uritescu, Léo Lesêtre, Alison the Fierce, Michail Korobov, Owen Cooper, Gregory Pierce, Naoki Iwasaki, Dante_Sam, Donatien Gascoin, SiriusWolf, TheMightyZeus, Jacob Sanford, MarcAntoine Girard, and Erasmus. You guys rock.
