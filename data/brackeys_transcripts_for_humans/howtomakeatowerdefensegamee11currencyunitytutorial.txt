With timestamps:

00:00 - this video is brought to you by our own
00:01 - Metta thank you so much for donating if
00:03 - you want to support breakage yourself
00:04 - you can go to patreon.com/scishow geez
00:06 - thanks for tuning in at brac ease hello
00:11 - I want to welcome to this video on
00:12 - creating a tower defense game in unity
00:14 - today we'll be adding currency to the
00:15 - game along with a cost for each charge
00:18 - so we can't just build them infinitely
00:20 - we also be tidying up how we are built
00:23 - turrets in the build manager and how
00:25 - that is connected to each individual
00:27 - node so will make it a bit safer and
00:29 - definitely easier to use so without
00:31 - further ado let's just jump right into
00:33 - it as you can see I'm here in unity and
00:35 - what I really want to begin with is our
00:38 - shop so I will undo canvas and then shop
00:40 - we can see that we have this sharp
00:42 - script let the two buttons are linked to
00:44 - and they just called call purchase
00:47 - standard turret and purchase missile
00:49 - launcher on that shop
00:51 - script let's double click that to open
00:53 - it up in visual studio and here we can
00:55 - see what is actually happening all we
00:57 - really do is we call set turret to build
01:00 - on the build manager and then we pass in
01:02 - some prefab that is actually also
01:04 - sitting on the build manager I think we
01:07 - should go ahead and clean this up quite
01:09 - a bit because instead of setting the
01:11 - turret to build using some prefab that
01:13 - is located under the build manager what
01:16 - I thought that we would do is create a
01:17 - separate class that has and called
01:20 - something like turret arm blueprint
01:24 - where we would have a prefab and then a
01:27 - cost and then what we will do is we will
01:30 - simply set that on the build manager so
01:33 - that the build manager can then be
01:34 - responsible for subtracting that cost in
01:38 - our amount of money and actually
01:40 - building it using the prefab so let's
01:43 - just go ahead and create this class
01:44 - right away and this is just going to be
01:46 - a c-sharp script and we'll call this our
01:49 - turret blueprint down here and let's
01:54 - double click on that to open it up and
01:56 - just reload all here and let's try that
01:59 - one more time there we go
02:00 - and we don't want this to be a mono
02:02 - behavior because we don't want it to be
02:04 - a component in unity we won't don't want
02:06 - to need to attach this to any game
02:09 - object but we definitely do want to be
02:11 - able to see the field
02:13 - here inside of the inspectors so
02:15 - therefore we are going to go ahead and
02:16 - mark this as system that serializable
02:19 - and I will show you why we need to make
02:21 - this in a second all this really means
02:23 - is that unity will go ahead and save and
02:26 - load the values inside of this class for
02:29 - us and that means that they are visible
02:31 - in the inspector and therefore we can
02:34 - edit them so let's just go ahead and
02:36 - create a public variable here and this
02:39 - is going to be a game object and this is
02:41 - going to be the prefab of this chart and
02:44 - then we'll also have a public integer on
02:47 - storing the course the cost of this
02:50 - turret and we can definitely add more
02:52 - things in here but for now we'll just
02:53 - add these two values then what we can do
02:56 - inside of our shop is that we can now
02:58 - create a public variable and as the type
03:03 - will now put into our it blueprint so we
03:05 - just created a class here that we are
03:07 - now using as the type and and this is
03:10 - going to be our standard turret and
03:13 - we'll also have a public blueprint for
03:16 - our missile launcher there we go and you
03:21 - can see that if I save this now and then
03:23 - hit into unity here and select our shop
03:27 - we now have a standard turret if we open
03:30 - that up we have a prefab where of course
03:32 - we need to drag our standard prefab and
03:35 - a cost that we can just go ahead and set
03:37 - to something like 100 and we also have a
03:39 - missile launcher and we need to drag
03:42 - that in as well
03:43 - but I will just quickly show you what
03:44 - happens if I remove this system that
03:47 - serializable well that means that unity
03:50 - won't know how to serialize the data
03:52 - meaning that it won't know how to save
03:54 - the data and therefore it does know on
03:57 - how to show it in the inspector either
03:59 - so it doesn't show up there so therefore
04:02 - we need to every time we create a class
04:05 - that we want to show up in the inspector
04:07 - with multiple fields we need to market
04:10 - our system serializable so we can see
04:13 - that it's it's back here and we lost the
04:16 - information here so we're going to set
04:17 - the cost of the first one 200 the second
04:20 - one so maybe on to 50 and then we'll
04:22 - drag in the true prefabs here this
04:24 - standard turd
04:26 - and our missile launcher there we go
04:29 - cool and now we can go ahead and use it
04:31 - utilize the fact that we have these two
04:33 - blueprints so instead of calling
04:36 - everything on the build manager here we
04:38 - can simply go ahead and remove all of
04:40 - this and maybe rename it a bit as well
04:42 - so instead of having this on the name of
04:45 - this method be purchased and a turd will
04:48 - have it be select standard turd instead
04:51 - because the transaction only happens
04:53 - when we actually place on the turret and
04:56 - therefore we aren't subtracting any
04:58 - money yet so let's just call this Lee
05:00 - select standard chart and select missile
05:02 - launcher and then we can go ahead and
05:05 - rename this as well so we'll rename this
05:07 - to select turret to build turret to
05:12 - build and we'll do the same down here
05:16 - and we can go ahead and now remove these
05:18 - two and then instead let's pass in let's
05:22 - pass in the standard turret and the
05:25 - missile launcher so now we need to go
05:28 - into a build manager of course and allow
05:30 - ourselves to do this but you can see how
05:32 - this makes sense we have a method that
05:34 - just tells the build manager to select
05:36 - the turret that we have up here so now
05:39 - we can find our build manager and we can
05:42 - go down here and instead of having this
05:44 - set turret to build here we'll create an
05:46 - entirely new function and this will look
05:49 - of course a public void and we'll call
05:52 - it select turret to build and it's going
05:56 - to take in a turret blueprint which is
05:58 - just going to be the turret here you can
06:00 - also call that turret blueprint if you
06:02 - want and then our tour to build
06:04 - currently has the type of game object
06:06 - let's go ahead and change that to a
06:07 - turret blueprint as well so that is as
06:10 - well aware of both the prefab and the
06:12 - cost and so now we can just say turret
06:15 - to build equals deterrent blueprint that
06:20 - was passed in to this electorate build
06:23 - function cool so that will change that
06:26 - correctly and now what we can do is we
06:29 - can go ahead and have a look at how we
06:31 - actually purchase or actually place down
06:34 - these turrets so if we go into our know
06:38 - script I remember this sits on every
06:40 - single node that and the node means a
06:44 - buildable place means a platform that we
06:47 - can build something on top of you can
06:49 - see here that um if we get a mouse down
06:53 - it's going to get the tart to build and
06:57 - it's going to build it right in here and
06:59 - I thought it would be a lot cleaner to
07:01 - have the build manager actually do the
07:03 - building of the turret so let's separate
07:06 - this code out and let's do that by first
07:08 - getting rid of the get turret to build
07:10 - method so inside of a build manager here
07:13 - and what we are going to do is we're
07:15 - simply going to remove this method
07:17 - entirely and we still need a some kind
07:21 - of way to check if we have a church
07:23 - selected so previously we would say if
07:26 - build manager get tart to build was
07:28 - equal to null then we didn't want to
07:30 - highlight on the the node when hovering
07:33 - over it and we didn't want to be able to
07:35 - build anything of course because we
07:37 - can't build null but instead what we'll
07:40 - do is we'll go into the build manager
07:42 - here and create a nifty little or use a
07:46 - nifty little trick here where we are
07:48 - type in public and then we are going to
07:51 - do bold can build like that and then we
07:56 - open up and close these armed curly
08:00 - brackets we type in get return and then
08:05 - we do our turn to build it's not equal
08:08 - to null and then remember to close that
08:11 - off with a semicolon
08:13 - so this syntax might be really new to
08:15 - you or it might just be trivial I will
08:18 - try and explain what we're doing here
08:19 - this is called a property and it's
08:21 - called a property because we only allow
08:23 - it to actually get something we only
08:26 - allow ourselves to get something from
08:29 - this variable this variable can never be
08:31 - set and it's pretty much the equivalent
08:33 - of writing a small function that will
08:36 - just check if tart to build is equal to
08:38 - null and then or is not equal to null
08:41 - and then return the result so what we
08:43 - will be doing is we are saying that we
08:44 - want a public pool variable called can
08:47 - build and when we try to use that say if
08:50 - we can build
08:51 - and instantly going to check if dirt to
08:53 - build is not equal to null and if it
08:56 - isn't equal to no it's going to return
08:58 - true so we can build and else it's going
09:01 - to return false so we can't build so
09:03 - that is the idea with this our property
09:05 - but you could also make this as a
09:07 - function as well so in here we can now
09:09 - just right
09:10 - if build manager that can build and it
09:14 - was that easy so that just makes more
09:17 - sense syntax wise and we're going to go
09:19 - ahead and do the same thing up here so
09:21 - build manager that can build and then we
09:23 - will return if we can so let's just put
09:27 - an exclamation mark in front of those
09:29 - two of course if we can build we want to
09:31 - proceed down here all right so I think
09:36 - we are getting there slowly so now we
09:38 - can take all of this code here and let's
09:41 - move that in to the build manager so
09:44 - let's instead make a function on the
09:46 - build manager call something like our
09:48 - build turret let's just say build char
09:52 - it on and then we'll pass in this node
09:55 - so if we go into our build manager here
09:57 - then let's create a function and this is
10:00 - going to be a public void build turret
10:04 - on and the reason why I'm saying on is
10:07 - we want to build it on a particular node
10:09 - and we'll have that passed in as an
10:12 - argument here so we'll have the node
10:14 - passed in and what we can do here
10:17 - actually I'll just write all this code
10:19 - here once again so we make sure we don't
10:21 - you make any errors so we want to
10:23 - instantiate our Terr to build dot prefab
10:27 - so that's the current turret that we
10:29 - have selected we want it to be
10:31 - instantiated at node transformed up
10:34 - position so the node that we have
10:36 - specified this is where we want to build
10:38 - the turret we want to use that the
10:41 - position of that node and we want to add
10:45 - on to that node dot um and it's I think
10:50 - it's offset position offset there we go
10:53 - so we want to add that value onto that
10:55 - or we could simply go into the node here
10:57 - and create a little helper function
10:59 - which I definitely think that we should
11:01 - do and this is just going to be a public
11:03 - arm
11:05 - vector3 and we'll call this our get
11:09 - built position and this is just going to
11:14 - return transformed up position plus our
11:18 - position offset so now in here instead
11:22 - of doing all this we can simply say node
11:24 - get build position there we go
11:27 - and finally we want a rotation and we're
11:31 - just going to use quaternion identity so
11:34 - we won't rotate it at all and what we
11:37 - can now do is we can do game object and
11:39 - store this in a temporary variable we'll
11:42 - just call that one turret and we'll cast
11:45 - it as a game object as well remember
11:47 - we've done this before we've cast it
11:48 - into a game object and called the turret
11:51 - and now we can simply say node dot
11:53 - turret except we need to go into the
11:56 - node here and we need to change this to
11:59 - public and this actually makes a lot of
12:01 - sense for us because you might want to
12:03 - have some nodes with a turret already
12:05 - placed when you start the game some
12:08 - levels you might want to restrict the
12:10 - user or help the user depending on what
12:12 - you choose to have built on top of that
12:15 - turret so what we'll do in here is we'll
12:18 - just make this and just put a disclaimer
12:21 - here inside of the editor on that we
12:24 - will just saying optional so this is
12:27 - just an optional parameter and that just
12:30 - means that if we go into unity now and I
12:35 - think we might have to just wait until
12:38 - we finish it all here so we'll just wait
12:41 - a second here so we'll say no dot turret
12:44 - we are now able to do that equals
12:46 - deterred that we just built and I
12:50 - believe that is all so now we are
12:52 - actually ready to do some currency but
12:54 - let's just see if this is working so we
12:56 - should see this error disappear here and
12:58 - now if we select if we select a node
13:03 - here you will see that we are able to
13:06 - optionally put a turd in here so it just
13:09 - says optional and that is really the
13:12 - only function that this has here the
13:15 - header only displays a bit of text here
13:18 - in the editor
13:18 - help ourselves but it is definitely
13:21 - usable especially because if you just
13:24 - see this game object and you haven't put
13:25 - optional here
13:26 - it looks scary it looks like something
13:29 - should definitely be there come so
13:32 - everything should be working now and we
13:34 - should hit play and we should be able to
13:36 - select the chart except we can and
13:39 - that's because we've lost the connection
13:41 - of these buttons so we need to select
13:43 - standard turret item we need to go shop
13:45 - and then instead of purchase standard
13:48 - turret it is now select standard turret
13:52 - and the missile launcher as well so
13:54 - we'll go shop and then select missile
13:57 - launcher go so now we should be able to
13:59 - hit play and select the turret and place
14:02 - it around and do the same with the
14:04 - missile launcher ok so that's awesome
14:07 - and if we go into the code here I just
14:09 - want to walk you through what is
14:11 - happening so inside of our shop we these
14:14 - methods are called when we click
14:16 - something and they call it method on the
14:18 - build manager called select chart to
14:20 - build and then we pass in the turret
14:22 - that we want to build in our case either
14:24 - the standard or the missile launcher
14:26 - which are defined by these turret
14:28 - blueprints which is basically just a
14:30 - prefab and a cost and then we are going
14:34 - to the build manager here so this is the
14:36 - function that is a cold and it just sets
14:38 - the chart to build here which is a
14:40 - private variable a private turret
14:42 - blueprint equal to that chart that we
14:45 - passed in and then later when we want to
14:47 - actually build it when we want to place
14:49 - it and that happens on the node whenever
14:52 - we click the node it's going to say if
14:54 - everything is of ok ok of course if we
14:56 - can build and all that then it's going
14:59 - to call build turret on that node on the
15:02 - build manager so it just passes itself
15:04 - on to the build manager that then builds
15:08 - the turret hard to build on top of that
15:11 - node with the correct position and all
15:14 - that and make sure to set no tattered
15:16 - equal to that turret so the node itself
15:18 - is aware of what turret is on top of it
15:21 - and if we go in here and hit play and I
15:24 - will show this here and I will just hit
15:27 - escape here and find a node here let's
15:31 - just find
15:32 - let's say use the third one from the
15:34 - left here if we go and place and note or
15:37 - a turret on top of that you can see that
15:39 - the optional turret here now says
15:42 - standard turret and that is if we click
15:44 - on it a reference to that specific
15:47 - turret here so it's a reference to that
15:49 - turret that we can then do stuff with
15:52 - such as maybe sell at a later point or
15:54 - upgrade or whatever you really want to
15:58 - do there cone so I believe that that was
16:03 - all of the changes to how we do this
16:05 - stuff that we needed to mega now it's
16:07 - really really easy to add the actual
16:10 - currency in here so on now we can just
16:13 - go on our game master here and add a
16:15 - component you could put it onto the
16:17 - build manager you could make a separate
16:19 - one called currency I think I'm going to
16:21 - go ahead and make one called maybe
16:23 - player stats and then we'll have stuff
16:26 - like currency in there on the money of
16:29 - course and I will have maybe the
16:31 - remaining lives left that the player has
16:34 - and you can keep track of other stuff as
16:37 - well the amount of damage the player has
16:39 - done if you want the player to have a
16:41 - level or a base that you could upgrade
16:45 - or whatever related to the player any
16:47 - statistics here we're going to put them
16:49 - in here and now we can simply go public
16:53 - um static int and this is going to be
16:58 - our money and then we'll go public
17:00 - integer and this is going to be our
17:03 - start money and again remember we make
17:05 - this a public integer because we want to
17:07 - edit this inside the inspector and we
17:09 - make this a public static integer
17:11 - because we want to this to be accessible
17:14 - with using only the player stats type
17:17 - without requiring an instance or a
17:20 - reference to any particular object in
17:23 - the scene so public in start money will
17:26 - just default that to something crazy
17:28 - like 400 we'll be able to afford a lot
17:31 - of turrets and then we'll create a start
17:34 - method here and when we start the game
17:37 - we just want to set money equal to start
17:40 - start money and you might now say why
17:44 - don't we just set
17:46 - money up here equal to 400 and then
17:48 - remove all of the other stuff and the
17:50 - reason why is that static variables will
17:53 - carry on from one scene to another so if
17:56 - you were to reload the scene and use
17:58 - that as a way to reset the game money
18:01 - would the amount of money that we have
18:04 - would carry over and so if the player is
18:06 - broke he will start off with no money
18:09 - left so that is kind of important to do
18:12 - cool so now we can set that in here we
18:17 - have the start money in here and that
18:18 - also makes it very easy to edit inside
18:20 - of the inspector doing it this way and
18:22 - then we'll find our build manager and
18:25 - under the build chart on what we want to
18:28 - do here is we want to now check if
18:30 - player stats dot money is greater or is
18:36 - less than um to build dot cost so
18:41 - if we don't have enough money what we
18:43 - want to do is we will simply want to
18:45 - return and then we might display
18:47 - something on the screen at a later point
18:49 - but for now we'll just say are not
18:51 - enough money or not enough gold whatever
18:54 - you want to call it let's just say not
18:56 - enough money to build that ah cool and
19:03 - if we do have enough money we're just
19:06 - going to proceed down here and in that
19:09 - case we want to say players that that
19:11 - money - equals turd to build costs so
19:15 - that we remember to subtract the cost of
19:18 - our turret from our money amount and
19:20 - what we will do here is we just want to
19:23 - say debug deadlock Mon turd
19:27 - built um money left and just display our
19:33 - amount of money that we have left so
19:36 - we're just going to go play your stats
19:37 - dot money at a later point maybe already
19:40 - in the next video we are definitely
19:42 - going to display our amount of currency
19:45 - on the screen but I have some different
19:48 - UI changes that I want to make so I
19:50 - think I'm going to pack all of them into
19:52 - one video I have some really cool ideas
19:55 - about how we can overlay the text here
19:56 - and make things look a bit better
19:59 - and we might also want a price tag for
20:01 - the turrets down here as well so if we
20:04 - now go in here and hit play you can see
20:07 - we can't do anything until we click a
20:09 - turret here and we're going to purchase
20:11 - it and it says chart built money left
20:13 - 300 and that is correct 400 minus 100 is
20:18 - 300 and if we now build a missile
20:20 - launcher here you can see a missile
20:23 - launcher selected toward build money
20:25 - left 50 and now we can't actually go
20:27 - ahead and place anything because it says
20:29 - not enough money to build that and one
20:32 - really really cool thing that we could
20:34 - add at a later point is so that when you
20:37 - select the turret and hover over one of
20:39 - these arm uh notes here that it might
20:42 - show um the turret that we want to build
20:46 - and maybe make that to red if um if we
20:50 - don't have enough money to build it or
20:51 - something like that at least change the
20:53 - color of our hover over or um yeah you
20:56 - get the idea so that is definitely
20:58 - something that could be added in and
21:00 - something that you might experiment with
21:02 - on your own and until the next video can
21:05 - of course go ahead and add the currency
21:06 - on the UI here just as we did with our
21:09 - on time we're up here it shouldn't be
21:11 - very different so that was basically all
21:13 - I wanted to show you in this video I
21:15 - thought it's really exciting and um in
21:17 - the next one again I hope to do some UI
21:20 - so without further ado thanks for
21:22 - watching and I will see you in the next
21:24 - video thank you so much to all of the
21:25 - awesome patreon supporters who donated
21:27 - in August and a special thanks to our
21:29 - own Metta Robert Roach james calhoun
21:31 - vixen p and andrew kay
21:37 - you

Cleaned transcript:

this video is brought to you by our own Metta thank you so much for donating if you want to support breakage yourself you can go to patreon.com/scishow geez thanks for tuning in at brac ease hello I want to welcome to this video on creating a tower defense game in unity today we'll be adding currency to the game along with a cost for each charge so we can't just build them infinitely we also be tidying up how we are built turrets in the build manager and how that is connected to each individual node so will make it a bit safer and definitely easier to use so without further ado let's just jump right into it as you can see I'm here in unity and what I really want to begin with is our shop so I will undo canvas and then shop we can see that we have this sharp script let the two buttons are linked to and they just called call purchase standard turret and purchase missile launcher on that shop script let's double click that to open it up in visual studio and here we can see what is actually happening all we really do is we call set turret to build on the build manager and then we pass in some prefab that is actually also sitting on the build manager I think we should go ahead and clean this up quite a bit because instead of setting the turret to build using some prefab that is located under the build manager what I thought that we would do is create a separate class that has and called something like turret arm blueprint where we would have a prefab and then a cost and then what we will do is we will simply set that on the build manager so that the build manager can then be responsible for subtracting that cost in our amount of money and actually building it using the prefab so let's just go ahead and create this class right away and this is just going to be a csharp script and we'll call this our turret blueprint down here and let's double click on that to open it up and just reload all here and let's try that one more time there we go and we don't want this to be a mono behavior because we don't want it to be a component in unity we won't don't want to need to attach this to any game object but we definitely do want to be able to see the field here inside of the inspectors so therefore we are going to go ahead and mark this as system that serializable and I will show you why we need to make this in a second all this really means is that unity will go ahead and save and load the values inside of this class for us and that means that they are visible in the inspector and therefore we can edit them so let's just go ahead and create a public variable here and this is going to be a game object and this is going to be the prefab of this chart and then we'll also have a public integer on storing the course the cost of this turret and we can definitely add more things in here but for now we'll just add these two values then what we can do inside of our shop is that we can now create a public variable and as the type will now put into our it blueprint so we just created a class here that we are now using as the type and and this is going to be our standard turret and we'll also have a public blueprint for our missile launcher there we go and you can see that if I save this now and then hit into unity here and select our shop we now have a standard turret if we open that up we have a prefab where of course we need to drag our standard prefab and a cost that we can just go ahead and set to something like 100 and we also have a missile launcher and we need to drag that in as well but I will just quickly show you what happens if I remove this system that serializable well that means that unity won't know how to serialize the data meaning that it won't know how to save the data and therefore it does know on how to show it in the inspector either so it doesn't show up there so therefore we need to every time we create a class that we want to show up in the inspector with multiple fields we need to market our system serializable so we can see that it's it's back here and we lost the information here so we're going to set the cost of the first one 200 the second one so maybe on to 50 and then we'll drag in the true prefabs here this standard turd and our missile launcher there we go cool and now we can go ahead and use it utilize the fact that we have these two blueprints so instead of calling everything on the build manager here we can simply go ahead and remove all of this and maybe rename it a bit as well so instead of having this on the name of this method be purchased and a turd will have it be select standard turd instead because the transaction only happens when we actually place on the turret and therefore we aren't subtracting any money yet so let's just call this Lee select standard chart and select missile launcher and then we can go ahead and rename this as well so we'll rename this to select turret to build turret to build and we'll do the same down here and we can go ahead and now remove these two and then instead let's pass in let's pass in the standard turret and the missile launcher so now we need to go into a build manager of course and allow ourselves to do this but you can see how this makes sense we have a method that just tells the build manager to select the turret that we have up here so now we can find our build manager and we can go down here and instead of having this set turret to build here we'll create an entirely new function and this will look of course a public void and we'll call it select turret to build and it's going to take in a turret blueprint which is just going to be the turret here you can also call that turret blueprint if you want and then our tour to build currently has the type of game object let's go ahead and change that to a turret blueprint as well so that is as well aware of both the prefab and the cost and so now we can just say turret to build equals deterrent blueprint that was passed in to this electorate build function cool so that will change that correctly and now what we can do is we can go ahead and have a look at how we actually purchase or actually place down these turrets so if we go into our know script I remember this sits on every single node that and the node means a buildable place means a platform that we can build something on top of you can see here that um if we get a mouse down it's going to get the tart to build and it's going to build it right in here and I thought it would be a lot cleaner to have the build manager actually do the building of the turret so let's separate this code out and let's do that by first getting rid of the get turret to build method so inside of a build manager here and what we are going to do is we're simply going to remove this method entirely and we still need a some kind of way to check if we have a church selected so previously we would say if build manager get tart to build was equal to null then we didn't want to highlight on the the node when hovering over it and we didn't want to be able to build anything of course because we can't build null but instead what we'll do is we'll go into the build manager here and create a nifty little or use a nifty little trick here where we are type in public and then we are going to do bold can build like that and then we open up and close these armed curly brackets we type in get return and then we do our turn to build it's not equal to null and then remember to close that off with a semicolon so this syntax might be really new to you or it might just be trivial I will try and explain what we're doing here this is called a property and it's called a property because we only allow it to actually get something we only allow ourselves to get something from this variable this variable can never be set and it's pretty much the equivalent of writing a small function that will just check if tart to build is equal to null and then or is not equal to null and then return the result so what we will be doing is we are saying that we want a public pool variable called can build and when we try to use that say if we can build and instantly going to check if dirt to build is not equal to null and if it isn't equal to no it's going to return true so we can build and else it's going to return false so we can't build so that is the idea with this our property but you could also make this as a function as well so in here we can now just right if build manager that can build and it was that easy so that just makes more sense syntax wise and we're going to go ahead and do the same thing up here so build manager that can build and then we will return if we can so let's just put an exclamation mark in front of those two of course if we can build we want to proceed down here all right so I think we are getting there slowly so now we can take all of this code here and let's move that in to the build manager so let's instead make a function on the build manager call something like our build turret let's just say build char it on and then we'll pass in this node so if we go into our build manager here then let's create a function and this is going to be a public void build turret on and the reason why I'm saying on is we want to build it on a particular node and we'll have that passed in as an argument here so we'll have the node passed in and what we can do here actually I'll just write all this code here once again so we make sure we don't you make any errors so we want to instantiate our Terr to build dot prefab so that's the current turret that we have selected we want it to be instantiated at node transformed up position so the node that we have specified this is where we want to build the turret we want to use that the position of that node and we want to add on to that node dot um and it's I think it's offset position offset there we go so we want to add that value onto that or we could simply go into the node here and create a little helper function which I definitely think that we should do and this is just going to be a public arm vector3 and we'll call this our get built position and this is just going to return transformed up position plus our position offset so now in here instead of doing all this we can simply say node get build position there we go and finally we want a rotation and we're just going to use quaternion identity so we won't rotate it at all and what we can now do is we can do game object and store this in a temporary variable we'll just call that one turret and we'll cast it as a game object as well remember we've done this before we've cast it into a game object and called the turret and now we can simply say node dot turret except we need to go into the node here and we need to change this to public and this actually makes a lot of sense for us because you might want to have some nodes with a turret already placed when you start the game some levels you might want to restrict the user or help the user depending on what you choose to have built on top of that turret so what we'll do in here is we'll just make this and just put a disclaimer here inside of the editor on that we will just saying optional so this is just an optional parameter and that just means that if we go into unity now and I think we might have to just wait until we finish it all here so we'll just wait a second here so we'll say no dot turret we are now able to do that equals deterred that we just built and I believe that is all so now we are actually ready to do some currency but let's just see if this is working so we should see this error disappear here and now if we select if we select a node here you will see that we are able to optionally put a turd in here so it just says optional and that is really the only function that this has here the header only displays a bit of text here in the editor help ourselves but it is definitely usable especially because if you just see this game object and you haven't put optional here it looks scary it looks like something should definitely be there come so everything should be working now and we should hit play and we should be able to select the chart except we can and that's because we've lost the connection of these buttons so we need to select standard turret item we need to go shop and then instead of purchase standard turret it is now select standard turret and the missile launcher as well so we'll go shop and then select missile launcher go so now we should be able to hit play and select the turret and place it around and do the same with the missile launcher ok so that's awesome and if we go into the code here I just want to walk you through what is happening so inside of our shop we these methods are called when we click something and they call it method on the build manager called select chart to build and then we pass in the turret that we want to build in our case either the standard or the missile launcher which are defined by these turret blueprints which is basically just a prefab and a cost and then we are going to the build manager here so this is the function that is a cold and it just sets the chart to build here which is a private variable a private turret blueprint equal to that chart that we passed in and then later when we want to actually build it when we want to place it and that happens on the node whenever we click the node it's going to say if everything is of ok ok of course if we can build and all that then it's going to call build turret on that node on the build manager so it just passes itself on to the build manager that then builds the turret hard to build on top of that node with the correct position and all that and make sure to set no tattered equal to that turret so the node itself is aware of what turret is on top of it and if we go in here and hit play and I will show this here and I will just hit escape here and find a node here let's just find let's say use the third one from the left here if we go and place and note or a turret on top of that you can see that the optional turret here now says standard turret and that is if we click on it a reference to that specific turret here so it's a reference to that turret that we can then do stuff with such as maybe sell at a later point or upgrade or whatever you really want to do there cone so I believe that that was all of the changes to how we do this stuff that we needed to mega now it's really really easy to add the actual currency in here so on now we can just go on our game master here and add a component you could put it onto the build manager you could make a separate one called currency I think I'm going to go ahead and make one called maybe player stats and then we'll have stuff like currency in there on the money of course and I will have maybe the remaining lives left that the player has and you can keep track of other stuff as well the amount of damage the player has done if you want the player to have a level or a base that you could upgrade or whatever related to the player any statistics here we're going to put them in here and now we can simply go public um static int and this is going to be our money and then we'll go public integer and this is going to be our start money and again remember we make this a public integer because we want to edit this inside the inspector and we make this a public static integer because we want to this to be accessible with using only the player stats type without requiring an instance or a reference to any particular object in the scene so public in start money will just default that to something crazy like 400 we'll be able to afford a lot of turrets and then we'll create a start method here and when we start the game we just want to set money equal to start start money and you might now say why don't we just set money up here equal to 400 and then remove all of the other stuff and the reason why is that static variables will carry on from one scene to another so if you were to reload the scene and use that as a way to reset the game money would the amount of money that we have would carry over and so if the player is broke he will start off with no money left so that is kind of important to do cool so now we can set that in here we have the start money in here and that also makes it very easy to edit inside of the inspector doing it this way and then we'll find our build manager and under the build chart on what we want to do here is we want to now check if player stats dot money is greater or is less than um to build dot cost so if we don't have enough money what we want to do is we will simply want to return and then we might display something on the screen at a later point but for now we'll just say are not enough money or not enough gold whatever you want to call it let's just say not enough money to build that ah cool and if we do have enough money we're just going to proceed down here and in that case we want to say players that that money equals turd to build costs so that we remember to subtract the cost of our turret from our money amount and what we will do here is we just want to say debug deadlock Mon turd built um money left and just display our amount of money that we have left so we're just going to go play your stats dot money at a later point maybe already in the next video we are definitely going to display our amount of currency on the screen but I have some different UI changes that I want to make so I think I'm going to pack all of them into one video I have some really cool ideas about how we can overlay the text here and make things look a bit better and we might also want a price tag for the turrets down here as well so if we now go in here and hit play you can see we can't do anything until we click a turret here and we're going to purchase it and it says chart built money left 300 and that is correct 400 minus 100 is 300 and if we now build a missile launcher here you can see a missile launcher selected toward build money left 50 and now we can't actually go ahead and place anything because it says not enough money to build that and one really really cool thing that we could add at a later point is so that when you select the turret and hover over one of these arm uh notes here that it might show um the turret that we want to build and maybe make that to red if um if we don't have enough money to build it or something like that at least change the color of our hover over or um yeah you get the idea so that is definitely something that could be added in and something that you might experiment with on your own and until the next video can of course go ahead and add the currency on the UI here just as we did with our on time we're up here it shouldn't be very different so that was basically all I wanted to show you in this video I thought it's really exciting and um in the next one again I hope to do some UI so without further ado thanks for watching and I will see you in the next video thank you so much to all of the awesome patreon supporters who donated in August and a special thanks to our own Metta Robert Roach james calhoun vixen p and andrew kay you
