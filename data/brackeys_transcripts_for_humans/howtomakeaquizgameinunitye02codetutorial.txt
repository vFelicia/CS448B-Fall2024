With timestamps:

00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to the
00:05 - second video on making a quiz game in
00:07 - unity in this video we're going to start
00:09 - programming the game in C and today
00:12 - we're only going to be programming the
00:14 - back end some of the actual
00:16 - functionality and then in the next video
00:18 - we'll have a look at showing this on the
00:20 - UI so today we'll only be using uh
00:23 - Visual Studio to program in uh you can
00:25 - of course use mono develop that comes
00:27 - with unity it doesn't matter that's just
00:30 - the uh script editor and uh then we'll
00:33 - be using the unity console to display
00:35 - what we're making so that's all so
00:37 - without further do let's jump right into
00:39 - Unity here and you can see the project
00:41 - is exactly as we left it the last time
00:44 - uh and if I go into the material UI you
00:46 - can see that we uh used the starter
00:48 - scene here I now want to uh rename this
00:51 - to our main level and I want to take
00:54 - this and drag it under the assets folder
00:57 - just so we have our main level scene
00:59 - here on you could also just call it main
01:01 - or whatever actually I'm just going to
01:03 - call it main since the idea of levels is
01:06 - not something we're working with in this
01:08 - game now let's go ahead and create an
01:10 - empty object by right clicking in the
01:12 - higher key and select create empty let's
01:15 - drag this to the top let's reset the
01:17 - transform and rename this to uh game
01:21 - manager and this is going to host the
01:23 - central script containing all of the
01:25 - logic that our game needs and one second
01:28 - let me just move wire out the way here
01:31 - uh so the game manager containing all of
01:34 - the uh game logic it will uh load in
01:37 - questions it will choose a random
01:39 - question it will check whether or not
01:40 - it's true or false and it will uh load
01:43 - the next question so that's what that
01:44 - will do and then we also going to add a
01:47 - separate script down here so right click
01:50 - create C script and we're going to call
01:52 - this one question because this is going
01:54 - to be storing uh what information we
01:57 - want to have for each question and now
01:59 - we we can go ahead and double click this
02:01 - and you can see again mine is opening in
02:04 - visual studio uh if yours is opening in
02:07 - Mano develop that's just fine it's not
02:09 - going to make any actual difference it's
02:11 - just going to look a tiny bit different
02:14 - here so you can see here uh that uh we
02:16 - can first off delete these two using
02:19 - tags because we are not going to uh be
02:21 - using either Unity engine or uh system.
02:25 - collections we can delete the derived
02:27 - from mono behavior and we can delete
02:30 - these two starter methods so we just
02:32 - have an empty class and C is of course
02:35 - an objectoriented programming language
02:38 - and that means that we have the ability
02:40 - to sketch out and describe different
02:43 - objects in our game and the first object
02:45 - we're creating here is a question and
02:48 - that's not only the um question itself I
02:51 - mean that could be um is their water on
02:55 - Mars uh that's just a simple string we
02:58 - also need to have some kind of
02:59 - understanding of an answer so that could
03:02 - be one example or multiple answer
03:05 - options should also be within this
03:07 - question class so whatever information
03:10 - is associated with a single question is
03:13 - something we are going to store in here
03:16 - and uh the first thing I want to do here
03:18 - is I want to tag this as a system.
03:22 - serializable and all this means is that
03:24 - it will notify unity and the system that
03:28 - this class uh can be saved and store
03:31 - information and the cool thing uh that
03:34 - this will allow us to do is edit it in
03:36 - the inspector when we implemented later
03:38 - so we can uh make all of our different
03:41 - questions not in here but inside of
03:43 - unity and that's going to be true luxury
03:47 - so the first thing that we want to do
03:49 - here is make a public string this is
03:51 - this of course being some kind of text
03:54 - and uh this string is going to be called
03:56 - fact because in my game I want um uh to
04:00 - display a series of facts that are
04:03 - either true or false and then the user
04:04 - can guess whether or not they are true
04:06 - or false so the question here is going
04:09 - to be the fact it could also be the uh
04:12 - actual question you can't do question
04:14 - here and then simply Call It by Say
04:15 - question. question but I'm going to call
04:18 - this fact and then we're going to have a
04:20 - public Boolean that is either true or
04:22 - false and this is going to store whether
04:24 - or not the fact is true so this is just
04:27 - going to be called is true and notice
04:30 - that I'm not setting any defaults for
04:32 - this I'm not setting them to any
04:34 - particular values I'm just saying that
04:36 - this is what needs to be inside of the
04:38 - question class now we can move on to uh
04:41 - the other script we created which is the
04:44 - game manager script and uh here we can
04:47 - uh keep both Unity engine and system.
04:49 - collections we are going to be needing
04:51 - them
04:52 - both and uh derived from mono behavior
04:55 - however we are going to remove these two
04:58 - methods and the first first thing that
05:00 - we want to create here is uh some kind
05:02 - of list of questions more specifically
05:06 - we're going to be using an array
05:08 - remember in C we have two different ways
05:11 - uh that primarily two different ways of
05:14 - storing a series of data and uh those
05:18 - are called arrays and lists and they
05:21 - both list just a bunch of data that are
05:24 - associated with a number in the list but
05:27 - the array is used when we don't need to
05:29 - resize the list and the list is used
05:33 - when we do need to resize it at runtime
05:36 - so you can see here because we are
05:39 - always going to have a fixed set of
05:41 - questions uh that we specify beforehand
05:44 - before running the game we can use an
05:46 - array and to declare an array we do a
05:48 - public question so uh we don't want this
05:52 - to be a single question we want this to
05:53 - be an array so we go like that and uh
05:56 - then we call this questions so this is
05:59 - this is a list of uh questions uh
06:03 - specified by the question
06:05 - class then inside of our start method
06:08 - and this is called whenever we start the
06:10 - game or we reload the scene well we want
06:14 - to have some kind of uh uh well right
06:17 - now we have a list that stores all of
06:20 - the different uh questions we've created
06:22 - and if we go ahead and minimize visual
06:24 - studio and go back into unity and select
06:26 - the game manager you can see here that
06:28 - it's already appeared in the inspector
06:30 - again you need to make sure that you've
06:32 - tagged the questing class as system
06:34 - that's serializable or it's not going to
06:36 - appear but if we go over here now we
06:38 - have this array and we can make this a
06:40 - size of three and we now have three
06:43 - different element three different
06:44 - questions in here that we can configure
06:47 - so the first fact could be um I am a
06:54 - genius and I apparently don't seem to be
06:57 - because I can't spell genius so I am
07:00 - super
07:01 - cool and this of course just happens to
07:04 - be true uh we have another fact which is
07:07 - violets are
07:09 - red and that's not uh that's not true
07:13 - and then we have uh the final uh
07:15 - statement or fact and that is that 2 + 2
07:18 - equal 4 and that happens to be true also
07:21 - so now we have created three different
07:23 - questions and uh We've specified whether
07:26 - or not they are true we can simply
07:27 - collapse these and now we know they are
07:30 - there so that is what is stored inside
07:33 - of this questions array however when
07:36 - running the game we want to keep track
07:38 - of which questions we have already
07:41 - answered and uh the way that I want to
07:44 - pick questions is I want to pick a
07:46 - random question but I don't want to be
07:48 - able to pick the same one twice and
07:50 - therefore we need a private and now we
07:54 - don't need an array we need a list
07:56 - because I want this list to contain all
07:58 - of the different questions in the
08:00 - beginning and then and as we answer more
08:02 - and more questions I want to remove them
08:05 - from the list so this is going to be a
08:08 - private and then it's going to be a
08:09 - static and the reason why I'm making
08:12 - this uh a static
08:15 - question uh is because I want uh this um
08:20 - question list to persist between scene
08:23 - so when we reload the scene to load in
08:26 - the next question on this uh um it's
08:29 - going to remember what is stored so I
08:32 - want to make a private static and in
08:34 - order to use a list we're going to go up
08:36 - here and say using
08:39 - system. collections. generic and now we
08:42 - have access to lists so a private static
08:46 - list and the syntax is a bit different
08:48 - here and then we're going to put in the
08:50 - question like that and then close it off
08:55 - uh or of course we need a name U so the
08:57 - name here should be uh
09:03 - unanswered
09:08 - unanswered this is not correct there we
09:11 - go unanswered
09:13 - questions and uh simply close that off
09:16 - then in the start method when we start
09:19 - our game we want to load in all of the
09:22 - different questions into the unanswered
09:24 - question so that when we begin our game
09:26 - for the first time all of the questions
09:29 - that we have available will be
09:32 - unanswered but we only want to do this
09:34 - when starting up the game we don't want
09:37 - this when changing scenes and start is
09:39 - loaded every time we change a scene or
09:42 - re reload a scene and therefore we need
09:44 - some kind of method for checking whether
09:47 - or not we've already done this when we
09:50 - haven't done this meaning by default
09:52 - before we load these questions in
09:54 - there's nothing in this list therefore
09:57 - it is marked as null
09:59 - so what we can simply do is check if
10:02 - unanswered questions is equal to
10:05 - null meaning there's nothing in the
10:08 - unanswered questions list well then we
10:10 - can go ahead and say that unanswered
10:13 - questions equals questions however
10:16 - there's a tiny problem with this uh and
10:18 - I'll show you that in a second the first
10:21 - thing that I want to point out is it is
10:23 - actually possible for there to be whoops
10:27 - looks like I hit a button there for
10:29 - there to be um zero elements in the list
10:33 - but for it to not be marked as null and
10:36 - that is if we have have answered all of
10:39 - the questions uh meaning that we've done
10:42 - this step and then gone through all of
10:44 - the questions then the amount of
10:46 - questions in the list will be zero but
10:49 - it has still been declared so it's not
10:51 - equal to null and therefore we need to
10:53 - also
10:55 - check uh if um if on answered questions
11:00 - do count meaning the elements and the
11:03 - number of elements in the list is equal
11:06 - to zero then we just want to start over
11:08 - and this is of course the or so we'll do
11:11 - this step if this is true or if this is
11:15 - true then down here we can't directly
11:17 - set a list equal to an array we simply
11:20 - want to take all of the things in the
11:21 - array and load it into the list and in
11:24 - order to do that easily we can go up
11:26 - here and say using system. link
11:29 - and uh what this does is it offers a
11:32 - bunch of methods to make stuff like this
11:34 - very easy so we we have now uh have the
11:37 - ability to say questions. to list and
11:40 - it's going to be a questions list and
11:42 - top that off and that will do that step
11:45 - four so um to wrap up what we've done
11:48 - here is we've created a an array of
11:50 - questions that we fill in in the
11:52 - inspector then when we begin the game
11:55 - for the very first time here uh we make
11:58 - sure to load those questions into a list
12:00 - of unanswered questions so the next task
12:04 - would be to get some kind of a random
12:08 - question and uh the current question
12:10 - that we uh the user can answer is
12:13 - something that we are going to store in
12:14 - a private variable so we're going to
12:16 - have a private uh question and this is
12:19 - singular because it's only one question
12:21 - at a time that the user can answer and
12:24 - uh this uh private uh question is going
12:26 - to be um call current
12:30 - [Music]
12:31 - question there we go and then down here
12:34 - we simply say um pick random question
12:37 - choose random question get random
12:39 - question whatever you want to do I'm
12:41 - just going to say get random
12:45 - question is what we want to do here and
12:47 - now we need to specify what that means
12:50 - so we'll say void get random questionis
12:53 - we're going to make a function here that
12:55 - does this for us so uh in here what we
12:58 - need to do is we need to choose a random
13:01 - number between zero and the number of
13:03 - elements in the unanswered questions
13:06 - list this way we get an index a random
13:09 - index that points to a random element in
13:12 - the list and we'll store this as an
13:14 - integer so this is going to be the
13:16 - random question index and it's going to
13:19 - be equal to random. range this will give
13:22 - us random
13:25 - dot do range there we go this will give
13:29 - us a random integer between zero and the
13:32 - number of elements in the unanswered
13:34 - questions list with which is unanswered
13:38 - questions.
13:40 - count there we go and round that off and
13:44 - what we can do now is we can
13:46 - temporarily uh we can set current
13:48 - question equal to and then unanswered
13:51 - questions and then we want the element
13:54 - at index random question index
14:00 - there we go so uh let's say right now we
14:03 - have uh three elements in the list this
14:05 - will get a um either uh zero one or two
14:10 - to access that element let's say we get
14:13 - a a one here this is going to be now one
14:17 - then it's going to take element number
14:19 - one out of the list and put it into
14:21 - current question so we can access it up
14:24 - here uh or from where we want inside the
14:27 - script the cool thing now is that we can
14:29 - simply go ahead and remove that same
14:32 - question so from the list now it's
14:34 - already answered actually it's just
14:36 - loaded in but we'll just U pretend like
14:39 - we've already answered it it's going to
14:41 - be basically the same thing the only
14:43 - Edge case would be if we went to a menu
14:45 - of some sorts um when right when this
14:48 - was happening before we actually
14:50 - answered it um but um that's some weird
14:53 - behavior that we are not going to um be
14:55 - uh thinking about so uh the next thing
14:57 - we want to do here we want to say and
15:00 - unanswer questions. remove add and this
15:04 - means that we specify an
15:06 - index uh of an element that we want to
15:08 - remove and that's of course going to be
15:10 - the random question index and now it's
15:13 - gone from the list it's simp simply like
15:16 - it was never there and uh we can uh make
15:19 - sure this way that we don't pick the
15:21 - same question
15:22 - twice good so now that we've gotten a
15:25 - random question let's just try and print
15:27 - this out in the cont so we can see that
15:29 - this is actually working so let's say
15:31 - debug.log and again we going to be
15:34 - displaying this in the UI in in a later
15:36 - video right now I simply want to see if
15:38 - this is working so we're going to print
15:42 - out uh current question. fact and then
15:47 - plus uh and I'm just going to make a
15:49 - space and then say is space plus current
15:54 - question do is true so we're going to
15:57 - print out the fact
15:59 - and whether or not it's true let's try
16:02 - that for a second and we are going to do
16:04 - this every time we uh hit uh play so if
16:07 - we go to the console
16:09 - here it should show one of these and the
16:12 - corresponding bullan
16:15 - value so we can see here it says violets
16:18 - are red is false and if we go there you
16:21 - can see it's marked as false we can now
16:24 - uh simply restart the game here it uh
16:27 - picked the same one we can try that
16:29 - again now it says I am super cool is
16:32 - true and indeed we said that to true
16:35 - however true it might actually be and
16:37 - now you can see that actually chose the
16:39 - last one here so it says 2 + 2 = 4 and
16:42 - that is true so you can see that it's
16:44 - now correctly choosing a random question
16:48 - it's not it uh does uh sometimes change
16:52 - uh the same qu or choose the same
16:54 - question over and over but that's
16:56 - because we are actually right now
16:57 - restarting the game and not just
16:59 - reloading the level when we get to the
17:01 - actual level reloading you will see this
17:03 - working so uh that was basically it for
17:07 - uh this video in the next one we'll have
17:09 - a look at uh implementing this with the
17:11 - UI to make it more responsive we'll uh
17:14 - Implement what is going to happen
17:16 - whenever we choose whether or not it's
17:18 - true or false and maybe even displayed
17:21 - um in some way so uh we'll have a look
17:23 - at that yeah so I hope you enjoyed this
17:25 - video If you like this format uh please
17:28 - let let me know in the comments and also
17:29 - I have a lot more coming don't worry so
17:31 - thanks for watching and I'll see you in
17:33 - the next
17:34 - [Music]
17:43 - video

Cleaned transcript:

thanks for tuning in at braies hello everyone and welcome to the second video on making a quiz game in unity in this video we're going to start programming the game in C and today we're only going to be programming the back end some of the actual functionality and then in the next video we'll have a look at showing this on the UI so today we'll only be using uh Visual Studio to program in uh you can of course use mono develop that comes with unity it doesn't matter that's just the uh script editor and uh then we'll be using the unity console to display what we're making so that's all so without further do let's jump right into Unity here and you can see the project is exactly as we left it the last time uh and if I go into the material UI you can see that we uh used the starter scene here I now want to uh rename this to our main level and I want to take this and drag it under the assets folder just so we have our main level scene here on you could also just call it main or whatever actually I'm just going to call it main since the idea of levels is not something we're working with in this game now let's go ahead and create an empty object by right clicking in the higher key and select create empty let's drag this to the top let's reset the transform and rename this to uh game manager and this is going to host the central script containing all of the logic that our game needs and one second let me just move wire out the way here uh so the game manager containing all of the uh game logic it will uh load in questions it will choose a random question it will check whether or not it's true or false and it will uh load the next question so that's what that will do and then we also going to add a separate script down here so right click create C script and we're going to call this one question because this is going to be storing uh what information we want to have for each question and now we we can go ahead and double click this and you can see again mine is opening in visual studio uh if yours is opening in Mano develop that's just fine it's not going to make any actual difference it's just going to look a tiny bit different here so you can see here uh that uh we can first off delete these two using tags because we are not going to uh be using either Unity engine or uh system. collections we can delete the derived from mono behavior and we can delete these two starter methods so we just have an empty class and C is of course an objectoriented programming language and that means that we have the ability to sketch out and describe different objects in our game and the first object we're creating here is a question and that's not only the um question itself I mean that could be um is their water on Mars uh that's just a simple string we also need to have some kind of understanding of an answer so that could be one example or multiple answer options should also be within this question class so whatever information is associated with a single question is something we are going to store in here and uh the first thing I want to do here is I want to tag this as a system. serializable and all this means is that it will notify unity and the system that this class uh can be saved and store information and the cool thing uh that this will allow us to do is edit it in the inspector when we implemented later so we can uh make all of our different questions not in here but inside of unity and that's going to be true luxury so the first thing that we want to do here is make a public string this is this of course being some kind of text and uh this string is going to be called fact because in my game I want um uh to display a series of facts that are either true or false and then the user can guess whether or not they are true or false so the question here is going to be the fact it could also be the uh actual question you can't do question here and then simply Call It by Say question. question but I'm going to call this fact and then we're going to have a public Boolean that is either true or false and this is going to store whether or not the fact is true so this is just going to be called is true and notice that I'm not setting any defaults for this I'm not setting them to any particular values I'm just saying that this is what needs to be inside of the question class now we can move on to uh the other script we created which is the game manager script and uh here we can uh keep both Unity engine and system. collections we are going to be needing them both and uh derived from mono behavior however we are going to remove these two methods and the first first thing that we want to create here is uh some kind of list of questions more specifically we're going to be using an array remember in C we have two different ways uh that primarily two different ways of storing a series of data and uh those are called arrays and lists and they both list just a bunch of data that are associated with a number in the list but the array is used when we don't need to resize the list and the list is used when we do need to resize it at runtime so you can see here because we are always going to have a fixed set of questions uh that we specify beforehand before running the game we can use an array and to declare an array we do a public question so uh we don't want this to be a single question we want this to be an array so we go like that and uh then we call this questions so this is this is a list of uh questions uh specified by the question class then inside of our start method and this is called whenever we start the game or we reload the scene well we want to have some kind of uh uh well right now we have a list that stores all of the different uh questions we've created and if we go ahead and minimize visual studio and go back into unity and select the game manager you can see here that it's already appeared in the inspector again you need to make sure that you've tagged the questing class as system that's serializable or it's not going to appear but if we go over here now we have this array and we can make this a size of three and we now have three different element three different questions in here that we can configure so the first fact could be um I am a genius and I apparently don't seem to be because I can't spell genius so I am super cool and this of course just happens to be true uh we have another fact which is violets are red and that's not uh that's not true and then we have uh the final uh statement or fact and that is that 2 + 2 equal 4 and that happens to be true also so now we have created three different questions and uh We've specified whether or not they are true we can simply collapse these and now we know they are there so that is what is stored inside of this questions array however when running the game we want to keep track of which questions we have already answered and uh the way that I want to pick questions is I want to pick a random question but I don't want to be able to pick the same one twice and therefore we need a private and now we don't need an array we need a list because I want this list to contain all of the different questions in the beginning and then and as we answer more and more questions I want to remove them from the list so this is going to be a private and then it's going to be a static and the reason why I'm making this uh a static question uh is because I want uh this um question list to persist between scene so when we reload the scene to load in the next question on this uh um it's going to remember what is stored so I want to make a private static and in order to use a list we're going to go up here and say using system. collections. generic and now we have access to lists so a private static list and the syntax is a bit different here and then we're going to put in the question like that and then close it off uh or of course we need a name U so the name here should be uh unanswered unanswered this is not correct there we go unanswered questions and uh simply close that off then in the start method when we start our game we want to load in all of the different questions into the unanswered question so that when we begin our game for the first time all of the questions that we have available will be unanswered but we only want to do this when starting up the game we don't want this when changing scenes and start is loaded every time we change a scene or re reload a scene and therefore we need some kind of method for checking whether or not we've already done this when we haven't done this meaning by default before we load these questions in there's nothing in this list therefore it is marked as null so what we can simply do is check if unanswered questions is equal to null meaning there's nothing in the unanswered questions list well then we can go ahead and say that unanswered questions equals questions however there's a tiny problem with this uh and I'll show you that in a second the first thing that I want to point out is it is actually possible for there to be whoops looks like I hit a button there for there to be um zero elements in the list but for it to not be marked as null and that is if we have have answered all of the questions uh meaning that we've done this step and then gone through all of the questions then the amount of questions in the list will be zero but it has still been declared so it's not equal to null and therefore we need to also check uh if um if on answered questions do count meaning the elements and the number of elements in the list is equal to zero then we just want to start over and this is of course the or so we'll do this step if this is true or if this is true then down here we can't directly set a list equal to an array we simply want to take all of the things in the array and load it into the list and in order to do that easily we can go up here and say using system. link and uh what this does is it offers a bunch of methods to make stuff like this very easy so we we have now uh have the ability to say questions. to list and it's going to be a questions list and top that off and that will do that step four so um to wrap up what we've done here is we've created a an array of questions that we fill in in the inspector then when we begin the game for the very first time here uh we make sure to load those questions into a list of unanswered questions so the next task would be to get some kind of a random question and uh the current question that we uh the user can answer is something that we are going to store in a private variable so we're going to have a private uh question and this is singular because it's only one question at a time that the user can answer and uh this uh private uh question is going to be um call current question there we go and then down here we simply say um pick random question choose random question get random question whatever you want to do I'm just going to say get random question is what we want to do here and now we need to specify what that means so we'll say void get random questionis we're going to make a function here that does this for us so uh in here what we need to do is we need to choose a random number between zero and the number of elements in the unanswered questions list this way we get an index a random index that points to a random element in the list and we'll store this as an integer so this is going to be the random question index and it's going to be equal to random. range this will give us random dot do range there we go this will give us a random integer between zero and the number of elements in the unanswered questions list with which is unanswered questions. count there we go and round that off and what we can do now is we can temporarily uh we can set current question equal to and then unanswered questions and then we want the element at index random question index there we go so uh let's say right now we have uh three elements in the list this will get a um either uh zero one or two to access that element let's say we get a a one here this is going to be now one then it's going to take element number one out of the list and put it into current question so we can access it up here uh or from where we want inside the script the cool thing now is that we can simply go ahead and remove that same question so from the list now it's already answered actually it's just loaded in but we'll just U pretend like we've already answered it it's going to be basically the same thing the only Edge case would be if we went to a menu of some sorts um when right when this was happening before we actually answered it um but um that's some weird behavior that we are not going to um be uh thinking about so uh the next thing we want to do here we want to say and unanswer questions. remove add and this means that we specify an index uh of an element that we want to remove and that's of course going to be the random question index and now it's gone from the list it's simp simply like it was never there and uh we can uh make sure this way that we don't pick the same question twice good so now that we've gotten a random question let's just try and print this out in the cont so we can see that this is actually working so let's say debug.log and again we going to be displaying this in the UI in in a later video right now I simply want to see if this is working so we're going to print out uh current question. fact and then plus uh and I'm just going to make a space and then say is space plus current question do is true so we're going to print out the fact and whether or not it's true let's try that for a second and we are going to do this every time we uh hit uh play so if we go to the console here it should show one of these and the corresponding bullan value so we can see here it says violets are red is false and if we go there you can see it's marked as false we can now uh simply restart the game here it uh picked the same one we can try that again now it says I am super cool is true and indeed we said that to true however true it might actually be and now you can see that actually chose the last one here so it says 2 + 2 = 4 and that is true so you can see that it's now correctly choosing a random question it's not it uh does uh sometimes change uh the same qu or choose the same question over and over but that's because we are actually right now restarting the game and not just reloading the level when we get to the actual level reloading you will see this working so uh that was basically it for uh this video in the next one we'll have a look at uh implementing this with the UI to make it more responsive we'll uh Implement what is going to happen whenever we choose whether or not it's true or false and maybe even displayed um in some way so uh we'll have a look at that yeah so I hope you enjoyed this video If you like this format uh please let let me know in the comments and also I have a lot more coming don't worry so thanks for watching and I'll see you in the next video
