With timestamps:

00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to this video in the how to make
00:05 - a 2d platformer course today we are
00:07 - going to be upgrading our upgrade menu
00:09 - and we are going to be centralizing our
00:12 - player stats in a separate script where
00:15 - we can have stuff like our health which
00:17 - we already have and then a speed
00:20 - variable you can also add stuff like
00:22 - weapon damage multipliers and everything
00:24 - in one place so that other components
00:27 - and other scripts can sync up to that
00:29 - change the values and then get them back
00:31 - and that's going to make it much easier
00:33 - for our upgrade menu to just connect to
00:35 - the player stats and handle everything
00:37 - there so that's going to be super fun
00:40 - hopefully we're also going to be hooking
00:41 - it up to the UI so we can actually see
00:44 - some upgrading and yeah without further
00:46 - ado let's just take right into it so you
00:49 - can see that I'm here in unity and the
00:51 - first thing that I want to do is find
00:52 - our player and double click on the
00:54 - player script itself when we open this
00:57 - up in monodevelop you'll notice that we
00:59 - of course have this stats class and we
01:02 - also have an instance of that class so
01:04 - let me just drag over the window here
01:07 - and we can actually just delete the
01:08 - system that collections actually we're
01:11 - going to be using that in a second so
01:12 - let's not do that however you can see
01:15 - that we have this system that's
01:16 - realisable and this is a public class
01:18 - and it's actually separate from the rest
01:20 - in the script and this is what I want to
01:22 - use as a base for our new monobehaviour
01:24 - that we're going to be adding so let's
01:26 - copy that using control X let's just cut
01:30 - it out and then delete this a player
01:32 - stats reference let's say that hit back
01:35 - into unity and of course now we're going
01:37 - to get some errors because these stats
01:39 - no longer exist and then we can go in
01:41 - here or I mean not on the player but on
01:45 - the game object and here add the player
01:48 - stats this way we are separating our
01:50 - player stats from the actual player game
01:52 - object so that we can remember what
01:55 - stats we have and what upgrades we have
01:57 - applied even though our player dies and
02:00 - then responds so we can apply that back
02:02 - in that's a much better way of doing it
02:04 - so let's double click on this now
02:06 - opening up in monodevelop
02:08 - and now we can simply copy the class
02:10 - from before in here and
02:13 - sure to make this a monobehaviour we can
02:16 - remove the system that serializable and
02:18 - we can change this from a public void in
02:20 - it that we need to call from somewhere
02:22 - else and simply make this a void wake so
02:26 - we can simply set that up in the awake
02:28 - method so that was pretty easy we can
02:31 - delete the system dark collections there
02:33 - and now we need a way for our player to
02:36 - reference this player stats and just
02:38 - like we did with our game master where
02:41 - we had this static variable that stored
02:43 - the instance of our player of our game
02:46 - master we're going to do the same with
02:48 - our players stats I'm just going to show
02:51 - you what it is I'm talking about so if
02:52 - we go on our game master you can see
02:54 - that we have this public static game
02:56 - master called GM and this is the actual
02:59 - instance that lives in our scene and we
03:00 - set that equal to our game master in the
03:04 - awake method so we're going to be doing
03:06 - the same here with the player stats it's
03:08 - a very simple design pattern that makes
03:10 - everything much easier so let's do a
03:12 - public static player stats and we can
03:17 - just go ahead and call this instance and
03:19 - then we can make inside of the awake
03:22 - function we can say if instance oops
03:26 - if instance is equal to null well then
03:30 - we want to set instance equal to this
03:32 - and this of course refers to the player
03:36 - stats instance that the awake function
03:38 - is running on cool and this way we can
03:41 - simply go into our player script and we
03:43 - can delete the stats that in it and then
03:47 - the stats here every time it says that
03:49 - we are going to replace that with player
03:52 - stats dot instance and if we want to
03:57 - optimize this instead of using player
03:59 - stats that instance every time we can
04:01 - cast this in a variable so that's
04:03 - exactly what we're going to do so up
04:05 - here we can create a private I'll play
04:09 - your stats and we're just going to call
04:12 - this player stats or if we want to keep
04:15 - the same naming convention we can just
04:17 - call it stats and but then in the start
04:21 - method method we set stats equal to our
04:24 - player stats
04:26 - that instance and this way we have a
04:29 - reference to that stat subject so that's
04:33 - perfect then we can just save everything
04:34 - and leave it in here and we don't really
04:37 - need to do anything at all and we can
04:40 - just head out into unity make sure we
04:42 - don't have any errors which we don't and
04:44 - you can see here now that the player
04:46 - stats is the one that has the ability to
04:48 - change these this stuff so the max
04:50 - health of our player is now controlled
04:53 - under the TM object under the player
04:55 - stats script so if we play here we
04:57 - should see that everything is currently
04:59 - working and it seems that it is you can
05:02 - see here if I let this guy hit me we
05:06 - actually lose health so that's perfect
05:08 - and I'm just going to go ahead and
05:10 - disable the ha my monitors here so that
05:13 - the audio won't be feeding through the
05:15 - mic great so the next thing that we can
05:18 - do is add some kind of health
05:19 - regeneration because if we want our
05:21 - player to level up his health his max
05:24 - health it would be great if we could
05:26 - actually you just utilize that the max
05:28 - health has changed so let's just have
05:31 - the health go up over time and this is a
05:34 - very easy thing to do we simply head
05:37 - into our player script we find the
05:42 - actually we could do this inside of the
05:44 - update method but instead instead let's
05:46 - create some kind of our repeating invoke
05:50 - so some kind of method that repeats
05:53 - itself as at a fixed rate and it's great
05:57 - to do it this way because we want health
06:00 - only to go up in discrete numbers we
06:03 - have an integer we only wanted to go up
06:05 - with whole numbers so we can say
06:07 - something like two times a second we
06:10 - should add one to our health for example
06:13 - so let's first off go ahead and make a
06:15 - public float here and this is going to
06:20 - be the health regen rate but again
06:23 - instead of having this inside of our
06:26 - player script let's go ahead and
06:27 - decentralized or or centralize this into
06:30 - our players stat script so we can have a
06:33 - public
06:36 - float and this is going to be the region
06:38 - raid and we can default that to to
06:42 - perfect and then we can go inside of our
06:45 - player and then what we can do is we can
06:47 - make some kind of method here called
06:50 - regen health and this is just going to
06:54 - regen one health each time it's cold so
06:57 - we can say that we want our stats dot
07:02 - health or current health to be plus
07:05 - equals and then one it's that simple and
07:10 - then we need to of course update this on
07:13 - the status indicator so you can see here
07:15 - we need to call status indicator that
07:18 - said health using stat stat current
07:21 - health and stat stat max health great
07:24 - and what we can then do is we can have
07:28 - the stat method invoke this so under a
07:32 - start method we can use invoke repeating
07:35 - and we can give the method name regen
07:39 - health we can give it a time until it
07:42 - starts rejoining and that's just going
07:44 - to be the same as our repeat rate so
07:47 - that it doesn't regen right when we
07:50 - spawn but after the repeat rate it it
07:53 - does and we can simply use that's that
07:56 - regen rate mmm and maybe we should
07:59 - actually rename this to our health regen
08:03 - rate just to be more specific and you
08:08 - can see easily updates in here and then
08:10 - we can use again stats that health regen
08:13 - rate for the amount of time that it
08:16 - should wait before repeating so now this
08:19 - should actually be working and we can
08:20 - try and hit play here and of course we
08:23 - will need to lose some health so let's
08:27 - wait for an enemy to appear there is one
08:31 - and wait for him to damages and you can
08:33 - see now that our health goes up but it
08:38 - goes up only once every two seconds and
08:41 - that's because we need to use one
08:43 - divided by our region rate because right
08:47 - now our region rate rate
08:49 - specifying the amount of times that we
08:52 - needed to wait we need to actually have
08:54 - the rate be one divided by that so this
08:58 - is perfect and now we can try this again
09:00 - and see if it's working and now we
09:05 - should see we generate two times a
09:10 - second and indeed it does it might be a
09:13 - bit too small on your screen I'm going
09:15 - to maximize this in a second so you can
09:17 - see that it's actually working but trust
09:19 - me it is so that's perfect then we can
09:22 - drum jump down and respond here and you
09:24 - will notice that when we respond we have
09:26 - an issue and that's because when we
09:28 - respawn our maximum health is still zero
09:33 - and that's because when we are if I'm
09:38 - the update function here if we jump down
09:40 - we damage the player with a lot and then
09:43 - you can see here that we are check if
09:47 - our current health is less than or equal
09:49 - to zero which is it then is it would be
09:52 - exactly zero well then we want to kill
09:54 - the player but there's nowhere in here
09:57 - where we set our current health back to
10:00 - the maximum health you can see here we
10:03 - have the kill player and then under our
10:05 - if I find our game manager or game
10:13 - master here we have the kill player
10:16 - there we go it simply destroys the
10:18 - object and it goes in two remaining
10:21 - lives and all this but it doesn't
10:22 - actually reinitialize the stats and we
10:25 - don't want it to we only wanted to go
10:27 - back to the maximum amount of health
10:29 - everything else that we have upgraded
10:31 - such as our speed we don't want that to
10:34 - be reset so all we need to really do is
10:36 - inside of the play script here on the
10:38 - damage player after we kill the player
10:44 - so that needs to be up here in the start
10:48 - method all we need to do here is simply
10:50 - say that's that that current health
10:52 - should be equal to stats that maximum
10:55 - health just to make sure we do this
10:58 - inside of our players stats right at the
11:01 - beginning
11:02 - down here in the awake but we actually
11:04 - don't need to do that we can do it
11:06 - inside of our player method instead so
11:08 - now when we try and hit play here and we
11:13 - jump down we should see that when we
11:16 - respawn our health resets to the max
11:18 - health and indeed it does so that's
11:20 - perfect and that's pretty much all we
11:23 - needed to do there now we can go ahead
11:25 - and maybe move our speed inside of this
11:30 - player stats as well so if we take a
11:32 - look at our player we have a platformer
11:35 - character 2d script and this has a max
11:37 - speed that is indeed our movement speed
11:39 - so if we double-click on this we can go
11:42 - ahead and just remove this from in here
11:44 - we don't want it there anymore then we
11:47 - can go into the player stats and add a
11:49 - new variable in here instead and this is
11:51 - just going to be the public float and
11:53 - we're going to call this movement speed
11:55 - and set it equal to the default 10 as it
11:58 - was in the other one and then all we
12:01 - need to do is inside of a platformer
12:03 - character 2d script find the place where
12:05 - we use the max speed which was here and
12:08 - then instead of max speed right player
12:11 - stats dot instance and then dot movement
12:16 - speed cool and now it will draw from
12:20 - that every time we need to move less of
12:22 - course ways to optimize this but it's
12:25 - really not going to matter in most cases
12:27 - so now let's try and hit play you can
12:30 - see we can still move and if I go into
12:32 - the DM object and tie this up you can
12:35 - see we now move a lot quicker so we have
12:38 - the opportunity to now upgrade that as
12:40 - well and you can do this with any kind
12:43 - of variable in the game for example
12:45 - under the player we have a pistol you
12:48 - can do this with the fire rate and the
12:50 - weapon as or and the damage as well
12:52 - however if you want to change out the
12:55 - weapon it doesn't make sense to directly
12:57 - take these stats from the arm from the
13:02 - player stats because then it won't
13:04 - change depending on the weapon so what
13:06 - you could do instead is have some kind
13:08 - of multiplier on the players stats here
13:12 - just something like
13:15 - 1 1.2 1.3 that multiplies the damage and
13:20 - the fire rate for the given weapon and
13:22 - you can simply implement that in the
13:24 - weapon by instead of using the damage
13:26 - variable directly used damage dot or
13:29 - damaged x player stats instance dot
13:34 - damage multiplier and then you can
13:36 - upgrade that inside the menu so that
13:38 - would be a great way to do that I'm not
13:41 - going to show it here but if it's
13:42 - something you want to see also weapon
13:44 - switching and maybe buying other weapons
13:46 - definitely leave that suggestion in the
13:49 - comment and we might do it so cool that
13:53 - was it for moving everything inside of
13:55 - the player stats now we can go ahead and
13:57 - actually make this changeable or
14:00 - editable in the upgrade menu so if we go
14:03 - under UI overlay and find our upgrade
14:05 - menu we need to create a script to
14:07 - handle this upgrade menu and you can see
14:10 - that our hierarchy hughes or a project
14:12 - panel is getting a bit cluttered so
14:14 - let's go ahead and take a on your
14:16 - manager drag it under the scripts and do
14:18 - the same with our player stats and our
14:22 - money County UI perfect then we can go
14:27 - ahead and find our upgrade menu again
14:29 - hit add component and now we want to add
14:32 - an upgrade menu cool and we need to
14:37 - remember that this is only enabled
14:38 - whenever the whenever the game object is
14:43 - enabled which means when we have the
14:45 - upgrade menu open on our screen so
14:48 - that's perfect we don't need to take
14:50 - care of that so the first thing that I
14:52 - want to do is display our current health
14:55 - and our current speed and in order to do
14:57 - that we need a reference to the UI
14:59 - elements we have for displaying that so
15:02 - I'm going to be using unity engine unity
15:06 - engine UI and we want to serialize field
15:10 - here the first one is going to be a
15:12 - private text and this is going to be our
15:15 - health or maybe um your health text you
15:20 - could do something like current health
15:21 - text or whatever but it's it's actually
15:23 - the max health so yeah just health text
15:26 - is fine for now
15:26 - and
15:29 - excuse me we don't want to default this
15:31 - to anything we want to edit this inside
15:33 - the inspector okay so we can simply
15:39 - duplicate that and use it down here and
15:41 - this is going to be our speed text and
15:44 - then what I want to do is I want to well
15:48 - okay so they're multiple way of ways of
15:52 - doing this one is to have some kind of
15:55 - method that updates the health text and
15:58 - the speed text and then we call that
16:00 - method let's say whenever we open the
16:03 - upgrade menu and then we call it
16:07 - whenever we press a button to upgrade
16:10 - something because then it might change
16:12 - another way is simply to do it every
16:14 - frame but let's actually do a bit of
16:17 - optimization here and do it the first
16:19 - way the correct way sort of say the best
16:21 - way at least and that is to have a void
16:24 - which is going to update values and this
16:30 - is going to set health text text equal
16:33 - to player stats and let's also actually
16:36 - do a reference to our player stats so
16:38 - let's have a private actually let's do
16:41 - that beneath our fields here a private
16:45 - player stats and we're just going to
16:48 - call that stats and then inside of a
16:50 - void start we're going to set stats
16:54 - equal to players stats dot instance
17:00 - great so health text dot text equals
17:04 - stat stud max health dot two string cool
17:10 - and we can just do speed text dot text
17:15 - equal stats dot movement speed dot two
17:20 - string perfect and that should basically
17:23 - be all we need to do except we need to
17:25 - of course call this so we want this to
17:28 - be called whenever this game object is
17:30 - enabled that means whenever we will
17:31 - bring up our upgrade menu so void on
17:34 - enable
17:36 - and we simply update the values there
17:39 - then we can also call it whenever we
17:41 - change something so this should now load
17:44 - in the correct value so let's try and
17:46 - hit play here oh of course we need a
17:48 - reference to the to object so under our
17:51 - upgrade menu and there are attributes on
17:55 - our health attribute we have the health
17:57 - amount let's drag that in there under
17:59 - the Speed attribute we have the amount
18:01 - there and that should be all so let's
18:04 - try and hit play and now we hit you and
18:10 - this says 120 hundred 610 that's not
18:13 - correct object reference not set to
18:15 - instance off an object so what's going
18:18 - on here let's double click this and for
18:23 - some reason that isn't working I think
18:27 - that maybe our stats are never set which
18:32 - would be annoying so what we'll do is
18:35 - instead we'll have this reference inside
18:38 - of the unable let's try that okay so hit
18:44 - you and now it's working so you can see
18:46 - it says 100 and it says 10 however we of
18:50 - course wanted to say health 120 and
18:54 - speed 10 so we simply need to add on to
18:57 - this so we'll go like this health and
19:05 - speed good and you can of course make
19:09 - this into some kind of variable you
19:11 - committed in the inspector or something
19:12 - like health prefix or whatever but now
19:16 - for now we're just going to hard code
19:17 - that in that's not super important and
19:19 - you can see that these two values now
19:21 - update so that's perfect the next thing
19:23 - we need is some kind of way to upgrade
19:25 - this so whenever we're dealing with UI
19:28 - buttons inside of you you need a screwy
19:31 - system all we need to do is make some
19:33 - kind of publicly available function that
19:36 - they can call so we simply need to say
19:38 - public void and this is going to be
19:41 - upgrade health and we'll call that from
19:47 - the button and all this needs to do
19:50 - is edit the our player stats in some
19:53 - kind of wait so we can say stats dot max
19:56 - health and then x equals and then some
19:59 - kind of multiplier and I think that
20:02 - multiplet multiplier should either be
20:05 - available inside of the upgrade menu or
20:07 - inside of the our player stats script
20:10 - for now we are just going to make this
20:11 - available in the upgrade menu itself so
20:14 - what I want to do is have a serialized
20:16 - field here so we're not going to be
20:18 - using an outside of this script and make
20:21 - it private and this is going to be a
20:22 - float and it's going to be the health
20:25 - multiplier that's not correct multi
20:31 - prior I think that's correct and we can
20:34 - make that something like 1.3 so every
20:39 - time that we upgrade our health it's
20:42 - going to get give it 30% more health
20:46 - than before so stats that max health x
20:49 - equals health multiplier and then we
20:54 - want to update values good and that is
21:00 - not working and the reason why it's not
21:03 - working is because this is an integer
21:06 - variable and now it needs to convert
21:08 - that so we say that this is equal to max
21:11 - health times health multiplayer
21:15 - multiplier stats and if we convert read
21:23 - this to an integer how do we need to go
21:26 - about this one second so we need some
21:30 - kind of way to tell it ah I think this
21:34 - is correct so let's just try this of
21:37 - course we need to call this from the
21:39 - button right so we have the health
21:42 - upgrade button here and you can see that
21:44 - we've already added an on click event so
21:47 - all we need to do here is simply take
21:49 - the upgrade menu there drag it in there
21:54 - go on the function upgrade menu and find
21:57 - the upgrade health so now when we hit
21:59 - play and we hit you I'm hit
22:03 - you can see that it upgrades to 129 and
22:07 - it rounds down there because that's just
22:10 - what integers do by default so you can
22:12 - see here that we can now upgrade our
22:14 - health and this will of course scale
22:17 - nonlinearly because we are adding by a
22:20 - percentage so that's just fine and if we
22:24 - want there are multiple ways to do this
22:26 - we can add some fancy math we can
22:28 - instead of adding just 30% each time we
22:31 - can have it go by it's some kind of
22:35 - polynomial function and there are many
22:39 - weights and ways to do this but for now
22:41 - this is going to work just fine if you
22:43 - if you want to investigate this further
22:46 - you can go on on google and search for
22:49 - something like stat scaling function or
22:53 - something like that and check out the
22:55 - many different possibilities for how you
22:57 - want your stats to scale good and we of
23:01 - course need to add the same here for our
23:05 - speed so upgrade speed and that's going
23:08 - to do the same except now we're not
23:10 - talking about max health now we're
23:11 - talking about movement speed we're doing
23:14 - that there and we of course now need a
23:18 - movement speed multiplier so speed
23:23 - multiplier habits do movement speed both
23:28 - supplier and that's just going to be the
23:32 - same for us right now you can tweak
23:34 - these numbers and it's important you do
23:35 - to make the game the most fun as
23:38 - possible and this is already in a float
23:40 - so that's fine movement speed multiplied
23:43 - with multiplied with movement speed
23:48 - multiplier that's going to be fine and
23:50 - then it upgrades the values and all we
23:52 - need to do is find our speed attribute
23:54 - our upgrade button and drag in our
23:57 - upgrade menu and find the function
24:00 - called upgrade speed perfect so let's
24:04 - try and hit play here
24:07 - and pressed you upgrade upgrade
24:10 - everything is working and it's also
24:12 - updating inside of the games you can see
24:14 - here that our max max health I'll wind
24:16 - up and of course it needs to regenerate
24:18 - to that amount of health but it is
24:20 - indeed working and if I just upgrade our
24:23 - speed a bunch here whoa that went crazy
24:27 - so it's clipping now because it's it's
24:29 - so crazy our speed multipliers way too
24:31 - big here and we also kind of need to
24:34 - truncate the numbers here so let me just
24:37 - find the best way to truncate that
24:39 - number and I'll be right back
24:41 - okay so I think all we need to really do
24:43 - here simply use math that round to round
24:47 - this off to an integer number we could
24:49 - add some kind of amount of decimals but
24:52 - I think this is going to be plenty for
24:54 - what we're doing and I also want to
24:56 - maybe tweak our movement multiplier just
24:59 - a bid so if we find our upgrade menu
25:02 - here take our movement speed multiplier
25:05 - and change it to something like one
25:07 - point one so if we hit upgrade here and
25:09 - I'll great a few times ah
25:11 - that's a bit too little so let's do one
25:14 - point to see how that works so this is
25:19 - fun so we can quickly get moving very
25:22 - very fast so that's perfect
25:25 - and everything should be working now so
25:27 - the last thing that we really have to do
25:29 - on this upgrade menu is some kind of way
25:33 - to spend our money and to disable our
25:35 - ability to upgrade things when we don't
25:38 - have enough money so that's going to be
25:41 - for the next video since this is already
25:43 - very long I hope you enjoyed this
25:46 - introduction on kind of how to shave an
25:48 - upgrade menu through code and how you
25:50 - can have player stats that other scripts
25:53 - have a reference to and just use but
25:56 - knots that are not spread out through
25:59 - the game that's a lot less confusing
26:02 - good so thanks for watching I hope you
26:05 - enjoyed it and I'll see you in the next
26:06 - video

Cleaned transcript:

thanks for tuning in at brakus hello and welcome to this video in the how to make a 2d platformer course today we are going to be upgrading our upgrade menu and we are going to be centralizing our player stats in a separate script where we can have stuff like our health which we already have and then a speed variable you can also add stuff like weapon damage multipliers and everything in one place so that other components and other scripts can sync up to that change the values and then get them back and that's going to make it much easier for our upgrade menu to just connect to the player stats and handle everything there so that's going to be super fun hopefully we're also going to be hooking it up to the UI so we can actually see some upgrading and yeah without further ado let's just take right into it so you can see that I'm here in unity and the first thing that I want to do is find our player and double click on the player script itself when we open this up in monodevelop you'll notice that we of course have this stats class and we also have an instance of that class so let me just drag over the window here and we can actually just delete the system that collections actually we're going to be using that in a second so let's not do that however you can see that we have this system that's realisable and this is a public class and it's actually separate from the rest in the script and this is what I want to use as a base for our new monobehaviour that we're going to be adding so let's copy that using control X let's just cut it out and then delete this a player stats reference let's say that hit back into unity and of course now we're going to get some errors because these stats no longer exist and then we can go in here or I mean not on the player but on the game object and here add the player stats this way we are separating our player stats from the actual player game object so that we can remember what stats we have and what upgrades we have applied even though our player dies and then responds so we can apply that back in that's a much better way of doing it so let's double click on this now opening up in monodevelop and now we can simply copy the class from before in here and sure to make this a monobehaviour we can remove the system that serializable and we can change this from a public void in it that we need to call from somewhere else and simply make this a void wake so we can simply set that up in the awake method so that was pretty easy we can delete the system dark collections there and now we need a way for our player to reference this player stats and just like we did with our game master where we had this static variable that stored the instance of our player of our game master we're going to do the same with our players stats I'm just going to show you what it is I'm talking about so if we go on our game master you can see that we have this public static game master called GM and this is the actual instance that lives in our scene and we set that equal to our game master in the awake method so we're going to be doing the same here with the player stats it's a very simple design pattern that makes everything much easier so let's do a public static player stats and we can just go ahead and call this instance and then we can make inside of the awake function we can say if instance oops if instance is equal to null well then we want to set instance equal to this and this of course refers to the player stats instance that the awake function is running on cool and this way we can simply go into our player script and we can delete the stats that in it and then the stats here every time it says that we are going to replace that with player stats dot instance and if we want to optimize this instead of using player stats that instance every time we can cast this in a variable so that's exactly what we're going to do so up here we can create a private I'll play your stats and we're just going to call this player stats or if we want to keep the same naming convention we can just call it stats and but then in the start method method we set stats equal to our player stats that instance and this way we have a reference to that stat subject so that's perfect then we can just save everything and leave it in here and we don't really need to do anything at all and we can just head out into unity make sure we don't have any errors which we don't and you can see here now that the player stats is the one that has the ability to change these this stuff so the max health of our player is now controlled under the TM object under the player stats script so if we play here we should see that everything is currently working and it seems that it is you can see here if I let this guy hit me we actually lose health so that's perfect and I'm just going to go ahead and disable the ha my monitors here so that the audio won't be feeding through the mic great so the next thing that we can do is add some kind of health regeneration because if we want our player to level up his health his max health it would be great if we could actually you just utilize that the max health has changed so let's just have the health go up over time and this is a very easy thing to do we simply head into our player script we find the actually we could do this inside of the update method but instead instead let's create some kind of our repeating invoke so some kind of method that repeats itself as at a fixed rate and it's great to do it this way because we want health only to go up in discrete numbers we have an integer we only wanted to go up with whole numbers so we can say something like two times a second we should add one to our health for example so let's first off go ahead and make a public float here and this is going to be the health regen rate but again instead of having this inside of our player script let's go ahead and decentralized or or centralize this into our players stat script so we can have a public float and this is going to be the region raid and we can default that to to perfect and then we can go inside of our player and then what we can do is we can make some kind of method here called regen health and this is just going to regen one health each time it's cold so we can say that we want our stats dot health or current health to be plus equals and then one it's that simple and then we need to of course update this on the status indicator so you can see here we need to call status indicator that said health using stat stat current health and stat stat max health great and what we can then do is we can have the stat method invoke this so under a start method we can use invoke repeating and we can give the method name regen health we can give it a time until it starts rejoining and that's just going to be the same as our repeat rate so that it doesn't regen right when we spawn but after the repeat rate it it does and we can simply use that's that regen rate mmm and maybe we should actually rename this to our health regen rate just to be more specific and you can see easily updates in here and then we can use again stats that health regen rate for the amount of time that it should wait before repeating so now this should actually be working and we can try and hit play here and of course we will need to lose some health so let's wait for an enemy to appear there is one and wait for him to damages and you can see now that our health goes up but it goes up only once every two seconds and that's because we need to use one divided by our region rate because right now our region rate rate specifying the amount of times that we needed to wait we need to actually have the rate be one divided by that so this is perfect and now we can try this again and see if it's working and now we should see we generate two times a second and indeed it does it might be a bit too small on your screen I'm going to maximize this in a second so you can see that it's actually working but trust me it is so that's perfect then we can drum jump down and respond here and you will notice that when we respond we have an issue and that's because when we respawn our maximum health is still zero and that's because when we are if I'm the update function here if we jump down we damage the player with a lot and then you can see here that we are check if our current health is less than or equal to zero which is it then is it would be exactly zero well then we want to kill the player but there's nowhere in here where we set our current health back to the maximum health you can see here we have the kill player and then under our if I find our game manager or game master here we have the kill player there we go it simply destroys the object and it goes in two remaining lives and all this but it doesn't actually reinitialize the stats and we don't want it to we only wanted to go back to the maximum amount of health everything else that we have upgraded such as our speed we don't want that to be reset so all we need to really do is inside of the play script here on the damage player after we kill the player so that needs to be up here in the start method all we need to do here is simply say that's that that current health should be equal to stats that maximum health just to make sure we do this inside of our players stats right at the beginning down here in the awake but we actually don't need to do that we can do it inside of our player method instead so now when we try and hit play here and we jump down we should see that when we respawn our health resets to the max health and indeed it does so that's perfect and that's pretty much all we needed to do there now we can go ahead and maybe move our speed inside of this player stats as well so if we take a look at our player we have a platformer character 2d script and this has a max speed that is indeed our movement speed so if we doubleclick on this we can go ahead and just remove this from in here we don't want it there anymore then we can go into the player stats and add a new variable in here instead and this is just going to be the public float and we're going to call this movement speed and set it equal to the default 10 as it was in the other one and then all we need to do is inside of a platformer character 2d script find the place where we use the max speed which was here and then instead of max speed right player stats dot instance and then dot movement speed cool and now it will draw from that every time we need to move less of course ways to optimize this but it's really not going to matter in most cases so now let's try and hit play you can see we can still move and if I go into the DM object and tie this up you can see we now move a lot quicker so we have the opportunity to now upgrade that as well and you can do this with any kind of variable in the game for example under the player we have a pistol you can do this with the fire rate and the weapon as or and the damage as well however if you want to change out the weapon it doesn't make sense to directly take these stats from the arm from the player stats because then it won't change depending on the weapon so what you could do instead is have some kind of multiplier on the players stats here just something like 1 1.2 1.3 that multiplies the damage and the fire rate for the given weapon and you can simply implement that in the weapon by instead of using the damage variable directly used damage dot or damaged x player stats instance dot damage multiplier and then you can upgrade that inside the menu so that would be a great way to do that I'm not going to show it here but if it's something you want to see also weapon switching and maybe buying other weapons definitely leave that suggestion in the comment and we might do it so cool that was it for moving everything inside of the player stats now we can go ahead and actually make this changeable or editable in the upgrade menu so if we go under UI overlay and find our upgrade menu we need to create a script to handle this upgrade menu and you can see that our hierarchy hughes or a project panel is getting a bit cluttered so let's go ahead and take a on your manager drag it under the scripts and do the same with our player stats and our money County UI perfect then we can go ahead and find our upgrade menu again hit add component and now we want to add an upgrade menu cool and we need to remember that this is only enabled whenever the whenever the game object is enabled which means when we have the upgrade menu open on our screen so that's perfect we don't need to take care of that so the first thing that I want to do is display our current health and our current speed and in order to do that we need a reference to the UI elements we have for displaying that so I'm going to be using unity engine unity engine UI and we want to serialize field here the first one is going to be a private text and this is going to be our health or maybe um your health text you could do something like current health text or whatever but it's it's actually the max health so yeah just health text is fine for now and excuse me we don't want to default this to anything we want to edit this inside the inspector okay so we can simply duplicate that and use it down here and this is going to be our speed text and then what I want to do is I want to well okay so they're multiple way of ways of doing this one is to have some kind of method that updates the health text and the speed text and then we call that method let's say whenever we open the upgrade menu and then we call it whenever we press a button to upgrade something because then it might change another way is simply to do it every frame but let's actually do a bit of optimization here and do it the first way the correct way sort of say the best way at least and that is to have a void which is going to update values and this is going to set health text text equal to player stats and let's also actually do a reference to our player stats so let's have a private actually let's do that beneath our fields here a private player stats and we're just going to call that stats and then inside of a void start we're going to set stats equal to players stats dot instance great so health text dot text equals stat stud max health dot two string cool and we can just do speed text dot text equal stats dot movement speed dot two string perfect and that should basically be all we need to do except we need to of course call this so we want this to be called whenever this game object is enabled that means whenever we will bring up our upgrade menu so void on enable and we simply update the values there then we can also call it whenever we change something so this should now load in the correct value so let's try and hit play here oh of course we need a reference to the to object so under our upgrade menu and there are attributes on our health attribute we have the health amount let's drag that in there under the Speed attribute we have the amount there and that should be all so let's try and hit play and now we hit you and this says 120 hundred 610 that's not correct object reference not set to instance off an object so what's going on here let's double click this and for some reason that isn't working I think that maybe our stats are never set which would be annoying so what we'll do is instead we'll have this reference inside of the unable let's try that okay so hit you and now it's working so you can see it says 100 and it says 10 however we of course wanted to say health 120 and speed 10 so we simply need to add on to this so we'll go like this health and speed good and you can of course make this into some kind of variable you committed in the inspector or something like health prefix or whatever but now for now we're just going to hard code that in that's not super important and you can see that these two values now update so that's perfect the next thing we need is some kind of way to upgrade this so whenever we're dealing with UI buttons inside of you you need a screwy system all we need to do is make some kind of publicly available function that they can call so we simply need to say public void and this is going to be upgrade health and we'll call that from the button and all this needs to do is edit the our player stats in some kind of wait so we can say stats dot max health and then x equals and then some kind of multiplier and I think that multiplet multiplier should either be available inside of the upgrade menu or inside of the our player stats script for now we are just going to make this available in the upgrade menu itself so what I want to do is have a serialized field here so we're not going to be using an outside of this script and make it private and this is going to be a float and it's going to be the health multiplier that's not correct multi prior I think that's correct and we can make that something like 1.3 so every time that we upgrade our health it's going to get give it 30% more health than before so stats that max health x equals health multiplier and then we want to update values good and that is not working and the reason why it's not working is because this is an integer variable and now it needs to convert that so we say that this is equal to max health times health multiplayer multiplier stats and if we convert read this to an integer how do we need to go about this one second so we need some kind of way to tell it ah I think this is correct so let's just try this of course we need to call this from the button right so we have the health upgrade button here and you can see that we've already added an on click event so all we need to do here is simply take the upgrade menu there drag it in there go on the function upgrade menu and find the upgrade health so now when we hit play and we hit you I'm hit you can see that it upgrades to 129 and it rounds down there because that's just what integers do by default so you can see here that we can now upgrade our health and this will of course scale nonlinearly because we are adding by a percentage so that's just fine and if we want there are multiple ways to do this we can add some fancy math we can instead of adding just 30% each time we can have it go by it's some kind of polynomial function and there are many weights and ways to do this but for now this is going to work just fine if you if you want to investigate this further you can go on on google and search for something like stat scaling function or something like that and check out the many different possibilities for how you want your stats to scale good and we of course need to add the same here for our speed so upgrade speed and that's going to do the same except now we're not talking about max health now we're talking about movement speed we're doing that there and we of course now need a movement speed multiplier so speed multiplier habits do movement speed both supplier and that's just going to be the same for us right now you can tweak these numbers and it's important you do to make the game the most fun as possible and this is already in a float so that's fine movement speed multiplied with multiplied with movement speed multiplier that's going to be fine and then it upgrades the values and all we need to do is find our speed attribute our upgrade button and drag in our upgrade menu and find the function called upgrade speed perfect so let's try and hit play here and pressed you upgrade upgrade everything is working and it's also updating inside of the games you can see here that our max max health I'll wind up and of course it needs to regenerate to that amount of health but it is indeed working and if I just upgrade our speed a bunch here whoa that went crazy so it's clipping now because it's it's so crazy our speed multipliers way too big here and we also kind of need to truncate the numbers here so let me just find the best way to truncate that number and I'll be right back okay so I think all we need to really do here simply use math that round to round this off to an integer number we could add some kind of amount of decimals but I think this is going to be plenty for what we're doing and I also want to maybe tweak our movement multiplier just a bid so if we find our upgrade menu here take our movement speed multiplier and change it to something like one point one so if we hit upgrade here and I'll great a few times ah that's a bit too little so let's do one point to see how that works so this is fun so we can quickly get moving very very fast so that's perfect and everything should be working now so the last thing that we really have to do on this upgrade menu is some kind of way to spend our money and to disable our ability to upgrade things when we don't have enough money so that's going to be for the next video since this is already very long I hope you enjoyed this introduction on kind of how to shave an upgrade menu through code and how you can have player stats that other scripts have a reference to and just use but knots that are not spread out through the game that's a lot less confusing good so thanks for watching I hope you enjoyed it and I'll see you in the next video
