With timestamps:

00:00 - so you've made a game and everything
00:01 - place nicely except the player has no
00:03 - way to save his progress well fear not
00:05 - in this video we'll have a look at
00:07 - saving game data locally and safely but
00:10 - first this video is sponsored by
00:11 - expressvpn expressvpn has several
00:14 - locations in over 90 different countries
00:16 - and is the fastest VPN provider out
00:18 - there by using a VPN you increase your
00:20 - security anonymity and it protects you
00:23 - from hackers expressvpn even uses a
00:25 - strong 256 bit encryption to help
00:27 - protect all your data for me one of the
00:29 - biggest perks has been that it lets me
00:31 - stream the office which isn't available
00:33 - in my country so thanks to express VPN
00:36 - for allowing me to experience Twite in
00:37 - HD a membership is less than $7 a month
00:40 - and they even offer a 30-day money-back
00:42 - guarantee so take back your internet
00:44 - privacy today and find out how you can
00:46 - get three months free by clicking the
00:48 - link in the description now whenever it
00:50 - comes to storing data in unity there are
00:52 - a few different ways to go about it
00:54 - the quickest and easiest way is by using
00:56 - the built-in player prefs
00:57 - with player prefs we can easily store
00:59 - single variables one by one I've already
01:02 - shown how you can use this to create a
01:03 - high score system so if that's something
01:05 - you're interested in definitely check
01:07 - out that video however it's not a great
01:09 - solution for saving player progress
01:10 - since it's really only meant to handle
01:12 - very small amounts of data and it's not
01:15 - at all secure another way is using a
01:17 - simple file format like JSON or XML to
01:20 - store your data the good thing about
01:21 - these formats is that they're designed
01:24 - to be super simple and easy to modify in
01:27 - fact you can just open them with a text
01:28 - editor and start changing stuff this
01:30 - makes them perfect for making your game
01:32 - multiple or for creating simple data
01:35 - bases during development to store stuff
01:36 - like items abilities and so on they can
01:39 - even be uploaded to a web server and
01:41 - displayed in the browser however this
01:43 - strength is also their weakness they're
01:46 - super easy to modify which also makes
01:48 - them not at all secure and so not ideal
01:51 - for saving player progress luckily there
01:53 - is a third option creating our own
01:55 - custom binary files custom binary files
01:58 - are very hard to read and modify because
02:01 - well they're in binary which also makes
02:03 - them much more secure and creating a
02:05 - binary file is actually fairly simple oh
02:07 - and yes this works on mobile as well so
02:10 - we start by creating a class in unity
02:11 - that contains the data we won
02:13 - as public variables we could for example
02:15 - have a string a float a bowl and an int
02:19 - array keep in mind that data types
02:21 - specific to unity like vector 3 or color
02:23 - aren't serializable this is not a big
02:26 - issue since these classes can often be
02:28 - represented using just the 4 based
02:30 - datatypes
02:30 - I make the 3 for example could just as
02:32 - well be stored in a float array with 3
02:35 - elements now when we have the variables
02:37 - that we want to store we mark the class
02:38 - as serializable the next step is to use
02:41 - a binary formatting the goal of the
02:43 - binary formatter is to read the data of
02:45 - any class we feed it and turn it into
02:47 - binary zeros at once
02:49 - we then create a new file on the system
02:50 - through code where the binary format you
02:53 - can put this data when we want to load
02:55 - the data back into our game we simply
02:57 - open up the file have the binary
02:58 - formatted converted back from binary and
03:01 - put it into the unity class so with that
03:04 - explanation let's get started so I've
03:05 - gone ahead and set up this simple
03:07 - example level in here we have a player
03:09 - and this player has basically three
03:11 - primary pieces of data
03:13 - the first one is his position and I've
03:15 - created a player movement script that is
03:17 - going to change this over time he also
03:19 - has a player script containing a level
03:21 - and some health and just to visualize
03:24 - this a bit more I've created some UI
03:26 - here that has the level the health and
03:28 - the position shown the assets that I'm
03:30 - using for the UI is from the ultimate
03:32 - game UI pack it's available on the unity
03:34 - asset store you can of course pick it up
03:36 - if you think it's cool but it's not
03:37 - required in any way and if we play we
03:39 - can see that the position indeed does
03:41 - change over time and we can use these
03:43 - buttons here to adjust the level and
03:44 - health and as we do that these things
03:47 - are going to update under our player we
03:48 - can see the position and the level and
03:50 - health updating so now that we know what
03:52 - data we're working with let's try and
03:54 - create a class that will contain this
03:56 - data so if we open up our player script
03:58 - we can see that we have two variables in
04:00 - here we have a public in for the level
04:02 - and one for the health I also have a few
04:05 - methods in here but these are just for
04:06 - updating UI so you can just ignore those
04:08 - and of course on top of these two
04:10 - variables we also have a victor 3
04:12 - storing or position but this is inside
04:14 - of the transform component let's go
04:16 - ahead and create a class that will store
04:18 - these three pieces of data so inside of
04:20 - our assets that's right click go create
04:22 - C sharp script let's call it player data
04:25 - and open it up in vicious 2
04:27 - so let's go ahead and remove the two
04:29 - methods we can also delete the amount of
04:31 - behavior because this is not going to
04:32 - act as a component in our game so now we
04:34 - have a completely empty class and we're
04:37 - ready to start populating it with some
04:39 - variables the first one is pretty simple
04:41 - it's a public int containing the level
04:43 - then we'll have another public int
04:45 - containing the health and as for the
04:47 - position you might want to go ahead and
04:49 - create a public vector3 containing the
04:51 - position however as we talked about we
04:54 - aren't able to serialize stuff that is
04:56 - unity specific like a vector3 so instead
04:59 - let's go ahead and create a float array
05:01 - that is going to store three elements
05:03 - one for each coordinate in our position
05:05 - so now we've defined our data but we
05:08 - still need to tell the class how to get
05:09 - this from the player so to do this let's
05:11 - create a constructor for our class if
05:13 - you've never worked with constructors
05:15 - before they pretty much act as set up
05:18 - functions for our class so let's create
05:20 - a public player data and this is the
05:23 - syntax for creating a constructor this
05:25 - is going to take in the data from our
05:27 - player so it's going to take the player
05:29 - script and let's just call it player now
05:31 - we can take the data from our player
05:32 - script and store it inside of these
05:34 - three variables so we can go level
05:36 - equals player level and that's probably
05:39 - the simplest case we simply go to our
05:41 - player script and take the level
05:43 - variable and put it inside of our little
05:45 - variable in our data class we do the
05:47 - exact same thing for a health deposit
05:49 - health equal to player dot health
05:51 - however in the case of our position we
05:53 - do need to convert a little bit so here
05:56 - we can set our position equal to a new
05:58 - float array and this is going to have
06:00 - three elements one for the X 1 for the Y
06:02 - and one value Z and we can now go
06:04 - through and access each one of these
06:06 - elements that will start with the X so
06:08 - position index 0 is going to be equal to
06:11 - player will access the transform so dot
06:14 - transform dot position dot X and we can
06:18 - simply copy this line and paste it two
06:20 - more times so we'll access the second
06:23 - coordinate which is the Y and the third
06:25 - coordinate which is the Z so let's
06:27 - change these to y and z so you can see
06:30 - how really easily we can take these more
06:32 - advanced data types like a vector three
06:34 - and convert them to what they really are
06:35 - basically just an array of floats if you
06:38 - wanted to store a color you could do the
06:40 - exact same
06:41 - have one element for the red one for
06:43 - green one for blue and then maybe a
06:45 - fourth one for alpha so now that we've
06:48 - created I'll play a data class we're
06:49 - ready to continue but there's one very
06:51 - very important thing that we need to
06:53 - remember to do first and that is go to
06:55 - the top of this class and as an
06:58 - attribute so inside of these two square
07:00 - brackets market as system dot
07:03 - serializable and this just means that we
07:05 - will be able to save it in a file so
07:07 - let's save this class now let's head
07:10 - into unity and let's create another
07:12 - c-sharp script so right-click create
07:15 - c-sharp
07:16 - and this one is going to be responsible
07:18 - for actually doing this saving so let's
07:20 - call it something like save system let's
07:22 - double click to open it up in Visual
07:24 - Studio again we're going to delete the
07:25 - two functions here and remove the
07:27 - monobehaviour and actually want to go
07:29 - ahead and mark this class as static a
07:31 - static class is just a class that can't
07:33 - be instantiated because we don't want to
07:35 - accidentally create multiple versions of
07:37 - our save system except we want to make
07:39 - sure that we include the appropriate
07:41 - namespaces we can go ahead and remove
07:43 - system dart collections however we do
07:46 - want to be using system dot IO system
07:49 - dot IO is the namespace we use whenever
07:51 - we want to work with files on our
07:53 - operating system so we'll use this when
07:55 - creating and opening the actual save
07:57 - file then we also need to be using
07:58 - system runtime dart serialization dot
08:03 - for matters that binary yes that is
08:06 - indeed a thing if you have a hard time
08:07 - remembering this don't worry I do too
08:10 - I almost always look it up and as you
08:12 - might have guessed from the name of it
08:13 - this will allow us to access the binary
08:15 - formatter so let's go ahead and create a
08:17 - state function let's make it public
08:19 - static so we can call it from anywhere
08:21 - without an instance void and let's call
08:24 - it save player the function is going to
08:27 - take in a player and it's call him later
08:29 - now the first thing that we need to do
08:31 - is create a binary format or for us to
08:34 - use so I'll do binary format let's call
08:37 - it formatter and set it equal to a new
08:39 - binary formatter next we want to create
08:42 - a file to save to but first we probably
08:44 - want to decide where this file should be
08:46 - saved so let's create a string called
08:49 - path and set it equal to well the
08:52 - location of a file and
08:54 - could go ahead and just input some kind
08:57 - of location on your system here and the
08:59 - file would be saved to that location
09:01 - however the path that you want to use is
09:04 - probably going to completely depend on
09:06 - the operating system a path that works
09:07 - on Windows probably doesn't work on Mac
09:09 - and it's definitely not going to work on
09:11 - iOS or Android and also we probably
09:14 - don't want to make it too apparent where
09:15 - we're saving these files we don't want
09:17 - it to be inside of the project folder or
09:19 - some obvious location
09:21 - luckily unity has a really handy
09:22 - function called application dot
09:24 - persistent data path and this is just
09:27 - going to get a path to a data directory
09:29 - on the operating system that isn't going
09:31 - to suddenly change then we can add
09:33 - anything to this so we can create a stop
09:36 - file called player dot and since we're
09:38 - actually making our own file here and
09:40 - it's just a binary file we can use any
09:42 - file type that we want that's right it's
09:45 - completely up to you what you want to
09:46 - write I'm gonna write fun just to make
09:49 - this tutor a bit more fun and it's close
09:51 - it off now on a new line we can create a
09:53 - new file and each time we are working
09:55 - with a file we use this concept of a
09:57 - file stream a file stream is exactly
10:00 - what it sounds like it's a stream of
10:01 - data contained in a file and we can use
10:03 - a particular file stream to read and
10:05 - write from a file so let's create a
10:07 - variable of type file stream let's call
10:09 - it stream and set it equal to a new file
10:12 - stream here we want to give it the path
10:14 - and then we can define the file mode and
10:16 - this is whether or not we want to open
10:18 - the file or create one app into an
10:20 - already existing file or some other
10:22 - options we're just gonna do create so
10:25 - now we've created this file on our
10:26 - system and we're ready to write to it so
10:28 - let's go ahead and create some player
10:30 - data let's call it data and let's set it
10:32 - equal to a new player data and because
10:35 - we created this handy constructor here
10:38 - we can actually just go ahead and pass
10:40 - in our player and all this code is going
10:43 - to be run which means that the player
10:45 - data class actually just sets up itself
10:47 - so now that we have all the appropriate
10:49 - data formatted the way that it should be
10:51 - we're ready to insert this into a file
10:53 - let's do formatter dot serialize which
10:57 - means that we're going to write data to
10:59 - the file first this needs a file stream
11:01 - we'll input our stream variable and then
11:03 - some data in our case our player data
11:06 - finally when you're done writing data
11:08 - the file we want to close it off so will
11:10 - it go stream dot close and that's all
11:13 - the code that we need for saving let's
11:14 - also create a variable for loading some
11:16 - data public static and here we don't
11:19 - want to input void since we're going to
11:21 - be loading some data we probably want to
11:22 - return this data so let's create a
11:25 - public static player data let's call it
11:28 - load player and the first thing that we
11:30 - want to do in cure is get a path similar
11:33 - to what we did up here I'm just going to
11:35 - go ahead and copy this line for now if
11:36 - you want to make it a bit cleaner you
11:38 - can maybe separate this out from the two
11:39 - functions so that if you change it in
11:41 - one place it's going to change in both
11:43 - for now we'll just copy it we're then
11:46 - going to check if a file exists in this
11:48 - path so if file dot exists we want to
11:52 - check for the path then we want to call
11:55 - some code and if it does not well then
11:59 - we want to do some kind of error
12:01 - let's do debug that log error and we'll
12:04 - say save file not found in and it will
12:08 - output the path then we can just return
12:10 - no however if we do find a file which
12:14 - hopefully we do well then we want to do
12:16 - actually a lot of the same stuff that we
12:18 - do up here when saving the player first
12:20 - we want to open up a binary format err
12:22 - so binary format err
12:24 - let's call it formatter equals a new
12:27 - binder formatter
12:28 - then we want to open up a file stream so
12:32 - we want to go file stream stream equals
12:36 - new file stream again we'll feed it the
12:38 - path but this time we don't want to do
12:40 - fan mode create instead we want to do
12:43 - found out stud open to open up the
12:45 - already existing save file then we can
12:47 - read from this stream by going formatter
12:50 - dot DS serialized so it's not going to
12:53 - change it from binary back to the old
12:55 - readable format and the only thing that
12:57 - we need to feed it is the stream from a
12:59 - file we then store this data as with
13:01 - anything else in a variable so let's
13:04 - create a player data variable that's
13:06 - called Danna and set it equal to the
13:07 - result and it's going to give you a red
13:10 - line here and that's because we need to
13:11 - cast this we need to tell it what type
13:13 - of data we are working with so we're
13:15 - going to format it as player data so now
13:18 - we've cast this information into a
13:20 - player data type
13:21 - and finally we can go ahead and return
13:24 - the data of course there's one very
13:26 - important thing that we forgot and that
13:28 - is we always need to close the file
13:31 - stream so here we want to go stream dot
13:34 - close otherwise you're going to get some
13:36 - weird-looking errors and that is
13:38 - actually everything that we need to do
13:40 - for our save system which means that we
13:42 - are pretty much ready to try this out if
13:44 - we save this now and go into unity to
13:46 - make sure that we don't have any errors
13:48 - we actually have all the components
13:50 - needed to now save and load this data
13:53 - the only thing that's left to decide is
13:55 - when to trigger this behavior and that's
13:57 - completely up to you you can save at the
13:59 - end of a level you can save every ten
14:02 - seconds you can say when the user exits
14:04 - the game or you can save using buttons
14:06 - and I've gone ahead and created two
14:08 - buttons here a Save button and a load
14:10 - button so let's just trigger some code
14:12 - based on these buttons if you want to be
14:14 - really proper about this you can do it
14:15 - in some kind of game manager I'm just
14:17 - gonna do it inside the player script so
14:19 - here I'm gonna create two public
14:21 - functions so that we can call them from
14:22 - the buttons one is going to be public
14:25 - void safe player and here all we need to
14:28 - do is go save system and because this is
14:31 - a static class and function we can go
14:33 - dot save player and that's all we need
14:37 - then we can feed it in the player that
14:38 - we want to save in our case this player
14:41 - so we can just write this and it's also
14:43 - create a public void load player again
14:46 - we access the save system and we do load
14:49 - player and of course this outputs a
14:51 - player data so we want to take that data
14:53 - and put it back into our player let's
14:55 - create a player data variable let's call
14:57 - it data and set it equal to what we get
15:00 - when loading and then we can go level
15:02 - equals data level health equal start
15:06 - health and for the position that's
15:08 - create a vector3
15:09 - called position and let's say position
15:11 - at X equal to data drop position and
15:15 - then we'll take the first element and
15:17 - that's actually copy this a few times so
15:19 - the second one is going to be Y the
15:21 - third one is going to be Z and it's
15:23 - going to go from 0 to 1 to 2 and then
15:26 - finally let's set transform start
15:28 - position equal to this position variable
15:31 - so now we've loaded back in our player
15:33 - data
15:34 - if we save this and go to unity we can
15:37 - now find the save and load buttons so
15:39 - I'm gonna select my Save button here I'm
15:41 - gonna go add an on click event and this
15:44 - is referencing an object I'm gonna drag
15:46 - in the player let's go under the player
15:48 - function and call this save player
15:50 - method and let's do the same thing for
15:52 - loading so load button add an event it's
15:55 - going to access the player object find
15:57 - the player script and call the load
15:59 - player function so now we should see
16:01 - that if we play and go ahead and mix
16:03 - around our level and health here so
16:05 - let's see we've increased to level seven
16:08 - our health is gone down to 28 and you
16:10 - can take note of our current position
16:11 - here that's save and if our game then
16:14 - changes that say we go up a few levels
16:16 - let's say to nine our health goes up
16:20 - again to 40 or 42 and this is our new
16:24 - position and we then hit load everything
16:27 - snaps right back and the cool thing is
16:29 - that this will even persist between game
16:32 - sessions so if we close down the game or
16:34 - change this around and then stop playing
16:36 - go back in and hit play again
16:38 - and we then hit load it's going to snap
16:41 - right back to these values and if we
16:43 - want to override our safe well then we
16:45 - simply hit save again so if we want to
16:47 - now have these values we can hit save
16:49 - let's stop playing hit play again hit
16:51 - load and voila everything's gonna update
16:54 - to the new values yay so that's pretty
16:57 - much it for this video now you can
16:59 - quickly see that it might become pretty
17:00 - slow and cumbersome to work with these
17:02 - files as the project gets bigger for
17:04 - each part of your game you need to
17:05 - create a save load function and a data
17:08 - class to convert from game play data to
17:10 - data that can be stored and while these
17:12 - files are hard to edit it can be done so
17:15 - if you're looking for a more long-term
17:16 - solution I really recommend picking up
17:19 - an asset like easy save it's just going
17:21 - to save you so much time and hassle it
17:23 - allows you to save unity specific data
17:25 - it can handle a bunch of data at once it
17:27 - can encrypt the data to make it really
17:29 - secure and you can even use it to save
17:31 - and load from the web I've used it
17:33 - before and really recommend it if you
17:35 - want to check it out this of course a
17:36 - link in the description also make sure
17:38 - to check out expressvpn
17:39 - simply click link in the description to
17:41 - find out how you can get three months
17:42 - for free other than that thanks for
17:44 - watching and I will see you in the next
17:46 - video
17:47 - thanks to of the awesome patreon
17:49 - supporters who donated in October and
17:51 - especially thanks to Andrew Cohen inco
17:53 - art Armand true VR systems simmer IO
17:55 - extended Blair Cheeta 3d Jeff Johnson
17:57 - infinity PBR Sybok mommy
17:59 - Danny Sullivan Chris Sheriff Abdullah
18:01 - pizza Murphy thanks along clear the set
18:03 - Fintan fence qeh shreya ste Turkish Kirk
18:06 - Ronan Tim Apple debauch burns cat Noah
18:08 - Kubasaki Gregory appears Larry tweet
18:10 - James Rogers Rathbun pecan Vania Erasmus
18:13 - Robert Bund car Jackson James P Anthony
18:16 - Patton pure sweet husky and a greasy you
18:18 - guys Rock

Cleaned transcript:

so you've made a game and everything place nicely except the player has no way to save his progress well fear not in this video we'll have a look at saving game data locally and safely but first this video is sponsored by expressvpn expressvpn has several locations in over 90 different countries and is the fastest VPN provider out there by using a VPN you increase your security anonymity and it protects you from hackers expressvpn even uses a strong 256 bit encryption to help protect all your data for me one of the biggest perks has been that it lets me stream the office which isn't available in my country so thanks to express VPN for allowing me to experience Twite in HD a membership is less than $7 a month and they even offer a 30day moneyback guarantee so take back your internet privacy today and find out how you can get three months free by clicking the link in the description now whenever it comes to storing data in unity there are a few different ways to go about it the quickest and easiest way is by using the builtin player prefs with player prefs we can easily store single variables one by one I've already shown how you can use this to create a high score system so if that's something you're interested in definitely check out that video however it's not a great solution for saving player progress since it's really only meant to handle very small amounts of data and it's not at all secure another way is using a simple file format like JSON or XML to store your data the good thing about these formats is that they're designed to be super simple and easy to modify in fact you can just open them with a text editor and start changing stuff this makes them perfect for making your game multiple or for creating simple data bases during development to store stuff like items abilities and so on they can even be uploaded to a web server and displayed in the browser however this strength is also their weakness they're super easy to modify which also makes them not at all secure and so not ideal for saving player progress luckily there is a third option creating our own custom binary files custom binary files are very hard to read and modify because well they're in binary which also makes them much more secure and creating a binary file is actually fairly simple oh and yes this works on mobile as well so we start by creating a class in unity that contains the data we won as public variables we could for example have a string a float a bowl and an int array keep in mind that data types specific to unity like vector 3 or color aren't serializable this is not a big issue since these classes can often be represented using just the 4 based datatypes I make the 3 for example could just as well be stored in a float array with 3 elements now when we have the variables that we want to store we mark the class as serializable the next step is to use a binary formatting the goal of the binary formatter is to read the data of any class we feed it and turn it into binary zeros at once we then create a new file on the system through code where the binary format you can put this data when we want to load the data back into our game we simply open up the file have the binary formatted converted back from binary and put it into the unity class so with that explanation let's get started so I've gone ahead and set up this simple example level in here we have a player and this player has basically three primary pieces of data the first one is his position and I've created a player movement script that is going to change this over time he also has a player script containing a level and some health and just to visualize this a bit more I've created some UI here that has the level the health and the position shown the assets that I'm using for the UI is from the ultimate game UI pack it's available on the unity asset store you can of course pick it up if you think it's cool but it's not required in any way and if we play we can see that the position indeed does change over time and we can use these buttons here to adjust the level and health and as we do that these things are going to update under our player we can see the position and the level and health updating so now that we know what data we're working with let's try and create a class that will contain this data so if we open up our player script we can see that we have two variables in here we have a public in for the level and one for the health I also have a few methods in here but these are just for updating UI so you can just ignore those and of course on top of these two variables we also have a victor 3 storing or position but this is inside of the transform component let's go ahead and create a class that will store these three pieces of data so inside of our assets that's right click go create C sharp script let's call it player data and open it up in vicious 2 so let's go ahead and remove the two methods we can also delete the amount of behavior because this is not going to act as a component in our game so now we have a completely empty class and we're ready to start populating it with some variables the first one is pretty simple it's a public int containing the level then we'll have another public int containing the health and as for the position you might want to go ahead and create a public vector3 containing the position however as we talked about we aren't able to serialize stuff that is unity specific like a vector3 so instead let's go ahead and create a float array that is going to store three elements one for each coordinate in our position so now we've defined our data but we still need to tell the class how to get this from the player so to do this let's create a constructor for our class if you've never worked with constructors before they pretty much act as set up functions for our class so let's create a public player data and this is the syntax for creating a constructor this is going to take in the data from our player so it's going to take the player script and let's just call it player now we can take the data from our player script and store it inside of these three variables so we can go level equals player level and that's probably the simplest case we simply go to our player script and take the level variable and put it inside of our little variable in our data class we do the exact same thing for a health deposit health equal to player dot health however in the case of our position we do need to convert a little bit so here we can set our position equal to a new float array and this is going to have three elements one for the X 1 for the Y and one value Z and we can now go through and access each one of these elements that will start with the X so position index 0 is going to be equal to player will access the transform so dot transform dot position dot X and we can simply copy this line and paste it two more times so we'll access the second coordinate which is the Y and the third coordinate which is the Z so let's change these to y and z so you can see how really easily we can take these more advanced data types like a vector three and convert them to what they really are basically just an array of floats if you wanted to store a color you could do the exact same have one element for the red one for green one for blue and then maybe a fourth one for alpha so now that we've created I'll play a data class we're ready to continue but there's one very very important thing that we need to remember to do first and that is go to the top of this class and as an attribute so inside of these two square brackets market as system dot serializable and this just means that we will be able to save it in a file so let's save this class now let's head into unity and let's create another csharp script so rightclick create csharp and this one is going to be responsible for actually doing this saving so let's call it something like save system let's double click to open it up in Visual Studio again we're going to delete the two functions here and remove the monobehaviour and actually want to go ahead and mark this class as static a static class is just a class that can't be instantiated because we don't want to accidentally create multiple versions of our save system except we want to make sure that we include the appropriate namespaces we can go ahead and remove system dart collections however we do want to be using system dot IO system dot IO is the namespace we use whenever we want to work with files on our operating system so we'll use this when creating and opening the actual save file then we also need to be using system runtime dart serialization dot for matters that binary yes that is indeed a thing if you have a hard time remembering this don't worry I do too I almost always look it up and as you might have guessed from the name of it this will allow us to access the binary formatter so let's go ahead and create a state function let's make it public static so we can call it from anywhere without an instance void and let's call it save player the function is going to take in a player and it's call him later now the first thing that we need to do is create a binary format or for us to use so I'll do binary format let's call it formatter and set it equal to a new binary formatter next we want to create a file to save to but first we probably want to decide where this file should be saved so let's create a string called path and set it equal to well the location of a file and could go ahead and just input some kind of location on your system here and the file would be saved to that location however the path that you want to use is probably going to completely depend on the operating system a path that works on Windows probably doesn't work on Mac and it's definitely not going to work on iOS or Android and also we probably don't want to make it too apparent where we're saving these files we don't want it to be inside of the project folder or some obvious location luckily unity has a really handy function called application dot persistent data path and this is just going to get a path to a data directory on the operating system that isn't going to suddenly change then we can add anything to this so we can create a stop file called player dot and since we're actually making our own file here and it's just a binary file we can use any file type that we want that's right it's completely up to you what you want to write I'm gonna write fun just to make this tutor a bit more fun and it's close it off now on a new line we can create a new file and each time we are working with a file we use this concept of a file stream a file stream is exactly what it sounds like it's a stream of data contained in a file and we can use a particular file stream to read and write from a file so let's create a variable of type file stream let's call it stream and set it equal to a new file stream here we want to give it the path and then we can define the file mode and this is whether or not we want to open the file or create one app into an already existing file or some other options we're just gonna do create so now we've created this file on our system and we're ready to write to it so let's go ahead and create some player data let's call it data and let's set it equal to a new player data and because we created this handy constructor here we can actually just go ahead and pass in our player and all this code is going to be run which means that the player data class actually just sets up itself so now that we have all the appropriate data formatted the way that it should be we're ready to insert this into a file let's do formatter dot serialize which means that we're going to write data to the file first this needs a file stream we'll input our stream variable and then some data in our case our player data finally when you're done writing data the file we want to close it off so will it go stream dot close and that's all the code that we need for saving let's also create a variable for loading some data public static and here we don't want to input void since we're going to be loading some data we probably want to return this data so let's create a public static player data let's call it load player and the first thing that we want to do in cure is get a path similar to what we did up here I'm just going to go ahead and copy this line for now if you want to make it a bit cleaner you can maybe separate this out from the two functions so that if you change it in one place it's going to change in both for now we'll just copy it we're then going to check if a file exists in this path so if file dot exists we want to check for the path then we want to call some code and if it does not well then we want to do some kind of error let's do debug that log error and we'll say save file not found in and it will output the path then we can just return no however if we do find a file which hopefully we do well then we want to do actually a lot of the same stuff that we do up here when saving the player first we want to open up a binary format err so binary format err let's call it formatter equals a new binder formatter then we want to open up a file stream so we want to go file stream stream equals new file stream again we'll feed it the path but this time we don't want to do fan mode create instead we want to do found out stud open to open up the already existing save file then we can read from this stream by going formatter dot DS serialized so it's not going to change it from binary back to the old readable format and the only thing that we need to feed it is the stream from a file we then store this data as with anything else in a variable so let's create a player data variable that's called Danna and set it equal to the result and it's going to give you a red line here and that's because we need to cast this we need to tell it what type of data we are working with so we're going to format it as player data so now we've cast this information into a player data type and finally we can go ahead and return the data of course there's one very important thing that we forgot and that is we always need to close the file stream so here we want to go stream dot close otherwise you're going to get some weirdlooking errors and that is actually everything that we need to do for our save system which means that we are pretty much ready to try this out if we save this now and go into unity to make sure that we don't have any errors we actually have all the components needed to now save and load this data the only thing that's left to decide is when to trigger this behavior and that's completely up to you you can save at the end of a level you can save every ten seconds you can say when the user exits the game or you can save using buttons and I've gone ahead and created two buttons here a Save button and a load button so let's just trigger some code based on these buttons if you want to be really proper about this you can do it in some kind of game manager I'm just gonna do it inside the player script so here I'm gonna create two public functions so that we can call them from the buttons one is going to be public void safe player and here all we need to do is go save system and because this is a static class and function we can go dot save player and that's all we need then we can feed it in the player that we want to save in our case this player so we can just write this and it's also create a public void load player again we access the save system and we do load player and of course this outputs a player data so we want to take that data and put it back into our player let's create a player data variable let's call it data and set it equal to what we get when loading and then we can go level equals data level health equal start health and for the position that's create a vector3 called position and let's say position at X equal to data drop position and then we'll take the first element and that's actually copy this a few times so the second one is going to be Y the third one is going to be Z and it's going to go from 0 to 1 to 2 and then finally let's set transform start position equal to this position variable so now we've loaded back in our player data if we save this and go to unity we can now find the save and load buttons so I'm gonna select my Save button here I'm gonna go add an on click event and this is referencing an object I'm gonna drag in the player let's go under the player function and call this save player method and let's do the same thing for loading so load button add an event it's going to access the player object find the player script and call the load player function so now we should see that if we play and go ahead and mix around our level and health here so let's see we've increased to level seven our health is gone down to 28 and you can take note of our current position here that's save and if our game then changes that say we go up a few levels let's say to nine our health goes up again to 40 or 42 and this is our new position and we then hit load everything snaps right back and the cool thing is that this will even persist between game sessions so if we close down the game or change this around and then stop playing go back in and hit play again and we then hit load it's going to snap right back to these values and if we want to override our safe well then we simply hit save again so if we want to now have these values we can hit save let's stop playing hit play again hit load and voila everything's gonna update to the new values yay so that's pretty much it for this video now you can quickly see that it might become pretty slow and cumbersome to work with these files as the project gets bigger for each part of your game you need to create a save load function and a data class to convert from game play data to data that can be stored and while these files are hard to edit it can be done so if you're looking for a more longterm solution I really recommend picking up an asset like easy save it's just going to save you so much time and hassle it allows you to save unity specific data it can handle a bunch of data at once it can encrypt the data to make it really secure and you can even use it to save and load from the web I've used it before and really recommend it if you want to check it out this of course a link in the description also make sure to check out expressvpn simply click link in the description to find out how you can get three months for free other than that thanks for watching and I will see you in the next video thanks to of the awesome patreon supporters who donated in October and especially thanks to Andrew Cohen inco art Armand true VR systems simmer IO extended Blair Cheeta 3d Jeff Johnson infinity PBR Sybok mommy Danny Sullivan Chris Sheriff Abdullah pizza Murphy thanks along clear the set Fintan fence qeh shreya ste Turkish Kirk Ronan Tim Apple debauch burns cat Noah Kubasaki Gregory appears Larry tweet James Rogers Rathbun pecan Vania Erasmus Robert Bund car Jackson James P Anthony Patton pure sweet husky and a greasy you guys Rock
