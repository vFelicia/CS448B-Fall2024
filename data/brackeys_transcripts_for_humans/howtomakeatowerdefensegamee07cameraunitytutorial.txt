With timestamps:

00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to this video and creating a
00:05 - tower defense game in unity today we are
00:07 - going to be creating a camera controller
00:09 - that will allow us to move around our
00:10 - camera in the scene in kind of an RTS
00:14 - inspired way so if you ever played
00:15 - Warcraft or Starcraft you know how the
00:18 - camera feels and that's what we're going
00:20 - to be emulating today so if you use the
00:22 - WASD Keys you can pan around or you can
00:25 - simply move your mouse to the edges of
00:28 - the screen and the camera will follow in
00:31 - that direction or you can use the scroll
00:33 - view to zoom in and out so that's what
00:37 - we're going to be making today and
00:38 - without further ado let's jump into
00:40 - unity make sure you have the camera
00:42 - selected hit add component and add a new
00:45 - camera controller script so this is of
00:48 - course going to be C sharp and you can
00:50 - just go ahead and woops open this up in
00:52 - Visual Studio and let's delete the
00:54 - system data collections namespace we're
00:56 - not going to be needing it and let's
00:58 - just keep the update method in here
01:00 - we'll be needing that in a second so the
01:02 - first variable that we're going to be
01:04 - are using is a pan speed and panning is
01:08 - when you move around on the flat plane
01:10 - so that means in our x and c axis so
01:14 - we're going to be making a public float
01:16 - pan speed and set that to something like
01:19 - 30 I think that's going to be a good
01:21 - amount then we can jump into the update
01:24 - method and again we want to check for
01:26 - input in two ways first we want to check
01:29 - for a key press so which we go if input
01:32 - dot get key down or actually we're just
01:36 - going to be using gate key because we
01:38 - want to move every frame every frame
01:40 - that we hold down a certain key and for
01:43 - that we use K key not only when we press
01:46 - it get key down or release it kakie up
01:48 - but every frame so and the key that we
01:51 - want to be checking for is the W key and
01:54 - then we can go ahead and add some
01:56 - functionality to the safe statement and
01:58 - what we will do is use what is called
02:00 - transform dot translate and transform
02:03 - that translate is the easiest way of
02:06 - moving an object because we are not
02:08 - using the physics system to do any
02:10 - collision checks or anything like that
02:12 - we simply move
02:14 - in a direction with the certain distance
02:17 - and that is specified specified by our
02:21 - translation vector three variable and in
02:24 - our case we are going to be using vector
02:26 - three dot forward so when we press the W
02:30 - key we will move forward and let me just
02:32 - quickly explain what this means so
02:35 - vector three dot forward is basically
02:38 - the same as writing new vector 3 where
02:42 - we specify coordinates 0 0 1 that is all
02:47 - that vector 3 forward is then if we want
02:51 - to add on a speed the pan speed instead
02:54 - of 1 here we would write pan speed and
02:57 - to do that what we do is we just
03:00 - multiply by pan speed and that will
03:03 - insert pan speed in here because 0
03:06 - multiplied by pan speed is 0 0 again
03:10 - multiplied pipe and speed is again 0 and
03:13 - 1 multiplied by pan speed is pan speed
03:15 - so that is the exact same so we can just
03:19 - multiply and it will put the variable in
03:21 - here and that's what we're going to do
03:23 - here so we'll take vector 3 dot forward
03:25 - and multiply that with pan speed and
03:28 - then we will multiply it with another
03:30 - variable so we get this effect here
03:32 - time.deltatime and the reason again why
03:36 - we multiply with time that the time is
03:38 - because we want our the speed at which
03:41 - we move our camera to be completely
03:43 - independent of our current frame rate so
03:46 - if you are one computer that is faster
03:48 - than another or if that's happening a
03:50 - lot of stuff at once you won't see a
03:52 - change in movement speed so we'll
03:55 - multiply that with time delta time the
03:58 - amount of time the passed since the last
04:00 - frame was drawn so this should actually
04:03 - work already and we could go in here and
04:05 - hit play and you will notice a slight
04:08 - flaw with this and that is if we now
04:11 - travel you it looks like we assuming in
04:14 - and the reason why is we're not using
04:17 - this forward axis right here we instead
04:21 - using the local axis of a camera so
04:24 - because our camera is rotated 65 degrees
04:28 - we've rotated the forward axis as well
04:30 - so we want to switch to the global space
04:33 - and we do that by writing comma space
04:37 - dot world and now it will be relative to
04:41 - the world coordinates and therefore
04:43 - ignore the rotation of our camera so
04:47 - that should work now and now we can add
04:49 - another input to this if statement so we
04:53 - both want this to happen if we get the
04:55 - key w or and or is represented by two
04:59 - vertical bars or if our mouse is at the
05:04 - top of the screen and how do we check
05:06 - for this well we use the fact so when
05:09 - our mouse is at the top of the screen
05:10 - here now we want to check for the mouse
05:14 - position and we have a variable in here
05:17 - called input dot mouse position which is
05:20 - basically a vector3
05:22 - storing the current coordinates of our
05:24 - mouse and these coordinates are relative
05:28 - to this bottom left corner so when the
05:32 - mouse is down here it's zero zero and
05:34 - then from now on it depends on the
05:37 - resolution of your display so if I move
05:40 - it up here and let's say that this is
05:42 - something like 400 pixels tall well then
05:46 - if I move it up here it might go to 10
05:48 - 20 30 40 and then when I reach the top
05:51 - here it will be at 400 so what we can do
05:55 - is we can say that if our mouse position
05:57 - is greater than and then use the current
06:00 - height of our display in our case maybe
06:02 - 400 subtract say 10 from that so that
06:06 - will be 390 and then say if our mouse is
06:10 - greater than or our mouse position Y is
06:13 - greater than those 390 that means that
06:16 - we are somewhere up here that means that
06:18 - we are only 10 pixels from the edge of
06:21 - the screen and therefore we want to move
06:23 - so we can use input done Mouse position
06:26 - dot Y and say if that is greater than or
06:30 - equal to the current height of our
06:34 - screen screen dot height - and then some
06:38 - kind of a buffer there and
06:40 - we are going to put this into a variable
06:42 - and this is going to be another public
06:44 - float called pan border thickness and
06:48 - let's set that equal to 10 so if our if
06:55 - we get the key W or our mouse dot Y is
07:00 - greater than or equal to screen dot
07:03 - height - pan border thickness that will
07:06 - make sure to check if we are within 10
07:09 - pixels of the top of our screen cool and
07:13 - then we can simply duplicate this and
07:15 - add three more the first one is going to
07:21 - be in the s direction so that means that
07:24 - we want to move or translate backwards
07:27 - and we want to do that when we are at
07:30 - the bottom of our screen and again up
07:32 - and down is on the Y so we want to use
07:35 - input Mouse position Y and we want to
07:38 - check if that is less than or equal to
07:41 - pan border thickness so down here it
07:44 - will be 0 when we move it up it will be
07:47 - 10 20 30 and we only want this to happen
07:49 - when it's between 0 and 10 so down here
07:53 - cool and then we don't want to move
07:56 - forward we want to move back and we can
07:59 - do that as well by simply putting a
08:01 - minus in front of the forward or we
08:04 - could use vector 3 back which I'm going
08:07 - to do then we want to move to the right
08:09 - so I'm going to be using the D key for
08:11 - that and now we are checking on the
08:13 - x-axis not the Y and we want to check if
08:16 - we are greater than or equal to screen
08:18 - dot with now because again we are now
08:21 - moving over here and then minus pan
08:25 - border thickness so we will get this
08:27 - distance here good and then we want to
08:32 - move to the right so vector 3 right and
08:35 - finally the left which is going to be
08:39 - the a key it's also going to be on the X
08:42 - it's going to be smaller than or equal
08:44 - to and it's going to be just equal to
08:48 - can4t thickness and we want to move to
08:51 - the left
08:51 - okay so that
08:53 - should actually be all and don't worry
08:55 - if you get a bit confused in this I
08:57 - totally get why it's a new way of
09:00 - thinking if you've never done this
09:02 - before it kind of seems a little bit
09:04 - crazy but it's necessary and its really
09:08 - rock-solid
09:09 - so that's nothing wrong with the code
09:12 - it's just a bit weird to understand at
09:14 - first so this should be on working and
09:17 - we can now go ahead and hit play and we
09:20 - should see that when I use the W yes D
09:24 - and a that works and if we go ahead and
09:28 - use the borders here to pan so I think
09:32 - this feels super natural and you will
09:35 - all just also notice that if we go
09:37 - beyond the kind of confines of our
09:40 - screen it still keeps going and that's
09:43 - fine for your game maybe but I think we
09:47 - should just have a quick way of
09:48 - disabling that or disabling the movement
09:51 - so we can adjust things over here
09:53 - without the camera going crazy um so
09:56 - we'll just leave that in here and what
09:59 - we're going to do here is simply have
10:01 - some kind of private variable up here
10:04 - and this is just going to be a bowl cold
10:06 - um I don't know do movement something
10:11 - like that and we'll just default that to
10:14 - true and then we can say that if do
10:18 - movement is equal to false so if we
10:21 - won't do movement well then we simply
10:23 - return then we don't call any of this
10:25 - code down here and then we can change
10:28 - this variable using some key that we
10:31 - know let's just use escape so if input
10:33 - get key down and then we do key code key
10:39 - code dot escape well then we want to set
10:46 - do movement equal to the opposite of do
10:50 - movement so we want to toggle that so if
10:52 - it's true we said it false if it's false
10:54 - we set it true so that should be it and
10:57 - this will allow us to simply hit play
10:59 - here notice how we can move around then
11:02 - I hit escape and it's disabled and then
11:04 - I hit escape again
11:05 - and we are back to MU
11:07 - moving so just an easy way and that's
11:10 - going to be really really great haha
11:13 - later when we do testing and want to
11:15 - change stuff while the game is running
11:17 - cool so the next thing is scrolling and
11:21 - when it comes to zooming in and out
11:24 - there are a bunch of different ways of
11:26 - doing it we are going to be doing it the
11:28 - most simple way at all which is just
11:32 - moving our camera up and down on the y
11:35 - axis and then constraining that movement
11:38 - so it doesn't go below the floor or go
11:41 - crazy high up into the sky
11:43 - however some really cool effect is if
11:47 - you rotate the camera depending on the
11:49 - height of it so that when you view the
11:52 - world from above it will or when you are
11:55 - a great distance from the ground you
11:58 - will be viewing it from above and then
12:01 - as you scroll down you rotate your
12:03 - camera sideways so that it gives the
12:06 - impression that you're now standing on
12:08 - the ground and that you're now viewing
12:11 - more of your world than just whatever
12:13 - you sumed in on it's a super cool effect
12:16 - and if this is something that you want
12:18 - for your game and along with a bunch of
12:20 - other customization and stuff like that
12:23 - I have a super cool foreign thread
12:26 - thread that I will link to in the
12:28 - description so if you want to be more
12:30 - nerdy about your camera controller go
12:33 - there you won't be disappointed
12:36 - ok so but for now let's just implement
12:39 - the most basic of functionality here so
12:41 - let's make some more room and let's get
12:45 - our scroll view and when it comes to
12:48 - scrolling it's a bit more difficult than
12:51 - using get key or say checking for
12:55 - whether or not the mouse position is
12:57 - within some range this is discrete I
13:01 - mean this is a boolean state it's either
13:05 - true or false
13:07 - either we got a key or we didn't get a
13:10 - key press however when we use the scroll
13:13 - view we'll have the scroll wheel just
13:17 - like when we do a joystick movement
13:20 - we are able to control the speed we're
13:23 - able to scroll quickly or slowly or not
13:25 - at all and that is where we use input
13:30 - get access so if we go into unity here
13:34 - they've made a super easy way for us to
13:37 - utilize this fact and that will allow us
13:40 - to very simply when you have a numpad or
13:44 - when you have some kind of trackpad on
13:47 - your your laptop you're able to control
13:50 - the speed at which you want to scroll
13:51 - and some mice does is does it up as well
13:55 - mine Scrolls at a fixed rate but some
13:57 - some doesn't do it as well and what
14:01 - you're able to do then is implement this
14:04 - as a float numbers so that when you
14:06 - scroll quickly it will be a greater
14:09 - number than if you scroll slowly and if
14:12 - you scroll in the opposite direction it
14:13 - will be a negative number so we have
14:15 - some kind of number representation and
14:17 - if you go to edit project settings input
14:20 - and find the mouse scroll wheel here and
14:23 - this is the what unity has called that
14:27 - number so if we simply use this mouse
14:29 - scroll wheel here and we get that by
14:31 - using input get axis and then inputting
14:37 - that name in a string and we can store
14:39 - this in a float and we'll just call this
14:41 - scroll and set that equal to that and
14:44 - then we can maybe just debug log this
14:46 - out so I can show you how this works so
14:49 - again my scroll scroll wheel is kind of
14:53 - boring in that it Scrolls in the
14:55 - intervals so it won't look super cool
14:57 - here but you can see that if I scroll up
14:59 - we get point one even point two
15:02 - sometimes if I scroll really quickly we
15:05 - should be able to get some point threes
15:07 - in there and then scroll down we get
15:10 - some negative numbers so we can control
15:13 - how quickly and in watch Direction we're
15:16 - scrolling cool then we can use this
15:19 - variable and let's use it in such a way
15:21 - that we begin by starring our current
15:25 - position so we'll do a vector3 and call
15:28 - this pause for precision and make that
15:30 - equal to transform that position our
15:33 - current position
15:33 - and let's go in here and find position
15:36 - dot y and set and add on to that
15:42 - actually let's subtract that I think
15:44 - that would be better for the direction
15:46 - of scrolling so subtract from that our
15:49 - scroll multiplied with our scroll speed
15:54 - and we'll have to go up here and create
15:56 - a public float with us scroll speed and
16:01 - set that to something like five I
16:03 - believe scroll speed multiplied with
16:08 - time to Delta time so you can see here
16:10 - now that we are using this variable here
16:13 - that will in my case be something like
16:15 - between minus point three and point
16:18 - three multiplying with our speed I'm
16:21 - multiplying it with time two Delta time
16:23 - and you are going to go in here and add
16:26 - some kind of a larger factor like a
16:30 - thousand because the scroll wheel will
16:34 - values are quite small so I'm just going
16:37 - to throw up thousand in there and that
16:39 - will probably take care of that and then
16:41 - we can go down here and apply the
16:43 - position back in so we can go in and say
16:46 - transform position equals position Y or
16:51 - not position that why but just position
16:53 - and we should see that this is working
16:56 - now so if I clear on the console hit
17:00 - play I am able to scroll up and down the
17:06 - only problem is this is not clamped so
17:08 - what this means is if I scroll further
17:12 - we can scroll through the ground and
17:15 - things start looking super weird and we
17:17 - can also scroll crazy high up in them in
17:20 - the air here in such a way that well it
17:24 - looks super weird with the ground and
17:26 - everything so to fix this we'll simply
17:30 - clamp this number so we'll go up here
17:32 - and add another public float and this is
17:35 - going to be our minimum Y and this is
17:37 - going to be equal to something like 10
17:38 - and another public float called our
17:42 - maximum Y which is equal to 80 then we
17:46 - go down here
17:47 - we say position dot y equals math clamp
17:53 - and the value that we want to restrict
17:57 - is Y and we want to make sure that it is
17:59 - between our minimum Y and our maximum Y
18:04 - so this will restrict position that Y to
18:08 - be between minimum and maximum which
18:12 - means that it will be between 10 and 80
18:17 - so if we'd play here now we should be
18:20 - able to move around all that we should
18:21 - be able to scroll down but not further
18:23 - than this and this is definitely also as
18:25 - far as I want us to be able to go and
18:27 - then if we scroll up we won't be able to
18:29 - scroll up higher than this here and you
18:32 - can do the same or use the same
18:34 - technique to control the panning so that
18:37 - we can pan crazy to the right or back
18:40 - and forwards or something like that
18:42 - and I definitely recommend that you go
18:44 - under the forum thread if you want to
18:46 - make your camera control movement thing
18:49 - super fine-tuned and feature packed but
18:53 - for now this is going to work for a game
18:55 - and I want to focus on some of the more
18:57 - important gameplay elements so that will
19:00 - be coming in the next video so thanks
19:03 - for watching and I'll see you soon thank
19:05 - you so much to all of the awesome
19:06 - patreon supporters who donated in July
19:09 - and a special thanks to vixen famous ode
19:11 - and UK and Locke's game TV these videos
19:14 - wouldn't be possible without you

Cleaned transcript:

thanks for tuning in at brakus hello and welcome to this video and creating a tower defense game in unity today we are going to be creating a camera controller that will allow us to move around our camera in the scene in kind of an RTS inspired way so if you ever played Warcraft or Starcraft you know how the camera feels and that's what we're going to be emulating today so if you use the WASD Keys you can pan around or you can simply move your mouse to the edges of the screen and the camera will follow in that direction or you can use the scroll view to zoom in and out so that's what we're going to be making today and without further ado let's jump into unity make sure you have the camera selected hit add component and add a new camera controller script so this is of course going to be C sharp and you can just go ahead and woops open this up in Visual Studio and let's delete the system data collections namespace we're not going to be needing it and let's just keep the update method in here we'll be needing that in a second so the first variable that we're going to be are using is a pan speed and panning is when you move around on the flat plane so that means in our x and c axis so we're going to be making a public float pan speed and set that to something like 30 I think that's going to be a good amount then we can jump into the update method and again we want to check for input in two ways first we want to check for a key press so which we go if input dot get key down or actually we're just going to be using gate key because we want to move every frame every frame that we hold down a certain key and for that we use K key not only when we press it get key down or release it kakie up but every frame so and the key that we want to be checking for is the W key and then we can go ahead and add some functionality to the safe statement and what we will do is use what is called transform dot translate and transform that translate is the easiest way of moving an object because we are not using the physics system to do any collision checks or anything like that we simply move in a direction with the certain distance and that is specified specified by our translation vector three variable and in our case we are going to be using vector three dot forward so when we press the W key we will move forward and let me just quickly explain what this means so vector three dot forward is basically the same as writing new vector 3 where we specify coordinates 0 0 1 that is all that vector 3 forward is then if we want to add on a speed the pan speed instead of 1 here we would write pan speed and to do that what we do is we just multiply by pan speed and that will insert pan speed in here because 0 multiplied by pan speed is 0 0 again multiplied pipe and speed is again 0 and 1 multiplied by pan speed is pan speed so that is the exact same so we can just multiply and it will put the variable in here and that's what we're going to do here so we'll take vector 3 dot forward and multiply that with pan speed and then we will multiply it with another variable so we get this effect here time.deltatime and the reason again why we multiply with time that the time is because we want our the speed at which we move our camera to be completely independent of our current frame rate so if you are one computer that is faster than another or if that's happening a lot of stuff at once you won't see a change in movement speed so we'll multiply that with time delta time the amount of time the passed since the last frame was drawn so this should actually work already and we could go in here and hit play and you will notice a slight flaw with this and that is if we now travel you it looks like we assuming in and the reason why is we're not using this forward axis right here we instead using the local axis of a camera so because our camera is rotated 65 degrees we've rotated the forward axis as well so we want to switch to the global space and we do that by writing comma space dot world and now it will be relative to the world coordinates and therefore ignore the rotation of our camera so that should work now and now we can add another input to this if statement so we both want this to happen if we get the key w or and or is represented by two vertical bars or if our mouse is at the top of the screen and how do we check for this well we use the fact so when our mouse is at the top of the screen here now we want to check for the mouse position and we have a variable in here called input dot mouse position which is basically a vector3 storing the current coordinates of our mouse and these coordinates are relative to this bottom left corner so when the mouse is down here it's zero zero and then from now on it depends on the resolution of your display so if I move it up here and let's say that this is something like 400 pixels tall well then if I move it up here it might go to 10 20 30 40 and then when I reach the top here it will be at 400 so what we can do is we can say that if our mouse position is greater than and then use the current height of our display in our case maybe 400 subtract say 10 from that so that will be 390 and then say if our mouse is greater than or our mouse position Y is greater than those 390 that means that we are somewhere up here that means that we are only 10 pixels from the edge of the screen and therefore we want to move so we can use input done Mouse position dot Y and say if that is greater than or equal to the current height of our screen screen dot height and then some kind of a buffer there and we are going to put this into a variable and this is going to be another public float called pan border thickness and let's set that equal to 10 so if our if we get the key W or our mouse dot Y is greater than or equal to screen dot height pan border thickness that will make sure to check if we are within 10 pixels of the top of our screen cool and then we can simply duplicate this and add three more the first one is going to be in the s direction so that means that we want to move or translate backwards and we want to do that when we are at the bottom of our screen and again up and down is on the Y so we want to use input Mouse position Y and we want to check if that is less than or equal to pan border thickness so down here it will be 0 when we move it up it will be 10 20 30 and we only want this to happen when it's between 0 and 10 so down here cool and then we don't want to move forward we want to move back and we can do that as well by simply putting a minus in front of the forward or we could use vector 3 back which I'm going to do then we want to move to the right so I'm going to be using the D key for that and now we are checking on the xaxis not the Y and we want to check if we are greater than or equal to screen dot with now because again we are now moving over here and then minus pan border thickness so we will get this distance here good and then we want to move to the right so vector 3 right and finally the left which is going to be the a key it's also going to be on the X it's going to be smaller than or equal to and it's going to be just equal to can4t thickness and we want to move to the left okay so that should actually be all and don't worry if you get a bit confused in this I totally get why it's a new way of thinking if you've never done this before it kind of seems a little bit crazy but it's necessary and its really rocksolid so that's nothing wrong with the code it's just a bit weird to understand at first so this should be on working and we can now go ahead and hit play and we should see that when I use the W yes D and a that works and if we go ahead and use the borders here to pan so I think this feels super natural and you will all just also notice that if we go beyond the kind of confines of our screen it still keeps going and that's fine for your game maybe but I think we should just have a quick way of disabling that or disabling the movement so we can adjust things over here without the camera going crazy um so we'll just leave that in here and what we're going to do here is simply have some kind of private variable up here and this is just going to be a bowl cold um I don't know do movement something like that and we'll just default that to true and then we can say that if do movement is equal to false so if we won't do movement well then we simply return then we don't call any of this code down here and then we can change this variable using some key that we know let's just use escape so if input get key down and then we do key code key code dot escape well then we want to set do movement equal to the opposite of do movement so we want to toggle that so if it's true we said it false if it's false we set it true so that should be it and this will allow us to simply hit play here notice how we can move around then I hit escape and it's disabled and then I hit escape again and we are back to MU moving so just an easy way and that's going to be really really great haha later when we do testing and want to change stuff while the game is running cool so the next thing is scrolling and when it comes to zooming in and out there are a bunch of different ways of doing it we are going to be doing it the most simple way at all which is just moving our camera up and down on the y axis and then constraining that movement so it doesn't go below the floor or go crazy high up into the sky however some really cool effect is if you rotate the camera depending on the height of it so that when you view the world from above it will or when you are a great distance from the ground you will be viewing it from above and then as you scroll down you rotate your camera sideways so that it gives the impression that you're now standing on the ground and that you're now viewing more of your world than just whatever you sumed in on it's a super cool effect and if this is something that you want for your game and along with a bunch of other customization and stuff like that I have a super cool foreign thread thread that I will link to in the description so if you want to be more nerdy about your camera controller go there you won't be disappointed ok so but for now let's just implement the most basic of functionality here so let's make some more room and let's get our scroll view and when it comes to scrolling it's a bit more difficult than using get key or say checking for whether or not the mouse position is within some range this is discrete I mean this is a boolean state it's either true or false either we got a key or we didn't get a key press however when we use the scroll view we'll have the scroll wheel just like when we do a joystick movement we are able to control the speed we're able to scroll quickly or slowly or not at all and that is where we use input get access so if we go into unity here they've made a super easy way for us to utilize this fact and that will allow us to very simply when you have a numpad or when you have some kind of trackpad on your your laptop you're able to control the speed at which you want to scroll and some mice does is does it up as well mine Scrolls at a fixed rate but some some doesn't do it as well and what you're able to do then is implement this as a float numbers so that when you scroll quickly it will be a greater number than if you scroll slowly and if you scroll in the opposite direction it will be a negative number so we have some kind of number representation and if you go to edit project settings input and find the mouse scroll wheel here and this is the what unity has called that number so if we simply use this mouse scroll wheel here and we get that by using input get axis and then inputting that name in a string and we can store this in a float and we'll just call this scroll and set that equal to that and then we can maybe just debug log this out so I can show you how this works so again my scroll scroll wheel is kind of boring in that it Scrolls in the intervals so it won't look super cool here but you can see that if I scroll up we get point one even point two sometimes if I scroll really quickly we should be able to get some point threes in there and then scroll down we get some negative numbers so we can control how quickly and in watch Direction we're scrolling cool then we can use this variable and let's use it in such a way that we begin by starring our current position so we'll do a vector3 and call this pause for precision and make that equal to transform that position our current position and let's go in here and find position dot y and set and add on to that actually let's subtract that I think that would be better for the direction of scrolling so subtract from that our scroll multiplied with our scroll speed and we'll have to go up here and create a public float with us scroll speed and set that to something like five I believe scroll speed multiplied with time to Delta time so you can see here now that we are using this variable here that will in my case be something like between minus point three and point three multiplying with our speed I'm multiplying it with time two Delta time and you are going to go in here and add some kind of a larger factor like a thousand because the scroll wheel will values are quite small so I'm just going to throw up thousand in there and that will probably take care of that and then we can go down here and apply the position back in so we can go in and say transform position equals position Y or not position that why but just position and we should see that this is working now so if I clear on the console hit play I am able to scroll up and down the only problem is this is not clamped so what this means is if I scroll further we can scroll through the ground and things start looking super weird and we can also scroll crazy high up in them in the air here in such a way that well it looks super weird with the ground and everything so to fix this we'll simply clamp this number so we'll go up here and add another public float and this is going to be our minimum Y and this is going to be equal to something like 10 and another public float called our maximum Y which is equal to 80 then we go down here we say position dot y equals math clamp and the value that we want to restrict is Y and we want to make sure that it is between our minimum Y and our maximum Y so this will restrict position that Y to be between minimum and maximum which means that it will be between 10 and 80 so if we'd play here now we should be able to move around all that we should be able to scroll down but not further than this and this is definitely also as far as I want us to be able to go and then if we scroll up we won't be able to scroll up higher than this here and you can do the same or use the same technique to control the panning so that we can pan crazy to the right or back and forwards or something like that and I definitely recommend that you go under the forum thread if you want to make your camera control movement thing super finetuned and feature packed but for now this is going to work for a game and I want to focus on some of the more important gameplay elements so that will be coming in the next video so thanks for watching and I'll see you soon thank you so much to all of the awesome patreon supporters who donated in July and a special thanks to vixen famous ode and UK and Locke's game TV these videos wouldn't be possible without you
