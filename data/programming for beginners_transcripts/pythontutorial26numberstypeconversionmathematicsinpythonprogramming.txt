00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about numbers type conversion and
00:05 - Mathematics in Python Programming so
00:08 - guys in Python the number data types are
00:10 - used to store the numeric values so
00:13 - python supports integers floating Point
00:15 - numbers and complex numbers which we are
00:17 - going to see with the help of examples
00:19 - as well so they are defined as end float
00:22 - and complex classes in Python so as you
00:25 - can see this end is a data type which
00:27 - holds the signed integers of non-limited
00:30 - length and then we have float as well
00:32 - which holds the floating decimal points
00:35 - and its accurate up to 15 decimal places
00:37 - so in case you want the 15 decimal
00:40 - places for a number you can use the
00:41 - float class in the Python Programming
00:44 - and also we have the complex data type
00:46 - which holds the complex numbers so guys
00:48 - let us check this with the help of
00:49 - examples now over here so let's say I
00:51 - want to print the simple integer so over
00:54 - here I will simply say num1 it is equal
00:57 - to 10 and then inside the print function
00:59 - we can simply provide num1 so let me
01:02 - just save this file and try running this
01:04 - code now so as you can see 10 is getting
01:06 - displayed similarly we can have the
01:08 - float and complex data type as well so
01:10 - I'll just copy paste these lines of code
01:11 - over here I'll put num2 it is equal to
01:15 - 5.76 and then over here we will print
01:18 - num2 as the variable name and then let's
01:20 - say we have num3 in which case let's say
01:22 - we have the complex number that is 3
01:25 - plus 2 J so this is the format in which
01:28 - we provide the complex number in Python
01:30 - and then we provide the num3 as the
01:33 - variable name over here so let me just
01:35 - save this file and try running this code
01:36 - now so as you can see we are getting the
01:38 - integer over here then we have 5.76 and
01:41 - then we have 3 plus 2 J all these
01:44 - numbers are getting printed now in order
01:46 - to see what is the data type of each and
01:48 - every number variable that we have
01:50 - provided we can simply provide the type
01:53 - function over here and enclose the
01:55 - variable name so as you can see this
01:57 - type function will help us in order to
02:00 - find the data type of the variable so
02:02 - num1 is the variable and we have
02:04 - enclosed it within the type function and
02:07 - then similarly we will say pi and then
02:09 - num2 will be enclosed over here and then
02:12 - let's say we want to find the type of
02:14 - this that is num3 variable as well so we
02:17 - provide the type function so instead of
02:20 - printing the values we will be printing
02:22 - the data types of all these variables
02:24 - now so let me just save this file and
02:26 - try running this code now so as you can
02:28 - see in the sequence we are getting all
02:30 - the data types the first number that is
02:32 - num1 it is of integer data type since we
02:34 - have stored the integer value then next
02:36 - we have the float that's because we have
02:38 - stored the float value and then we have
02:41 - the complex data type so in this way we
02:43 - can easily use the type function in
02:45 - order to find the data type of any
02:47 - variable in Python Programming now guys
02:50 - over here let us understand the number
02:51 - system so basically the numbers that we
02:53 - have seen so far are of the decimal that
02:55 - is base 10 number system but in computer
02:58 - programming we need to work with binary
03:00 - that is base 2 then we also have
03:02 - hexadecimal that is base 16 and octal
03:05 - that is base 8 number systems as well so
03:08 - how do we work with these number systems
03:10 - can we represent them in the Python
03:11 - Programming yes we can so as you can see
03:14 - the binary numbers can be represented by
03:16 - using the 0b prefix the b letter can be
03:19 - lower case or uppercase character
03:21 - similarly we have the octal that is the
03:23 - base 8 number so we can have the prefix
03:25 - that is 0 and O and Then followed by
03:28 - hexadecimal which is having the prefix
03:30 - that is 0x so guys let us check this
03:32 - with the help of examples now over here
03:34 - let's say we want to have a number which
03:36 - is of a binary data type so let's say we
03:39 - have num1 and then let's say we want to
03:41 - represent the number 8 with the help of
03:43 - its binary representation so we have
03:46 - 1000 which is the binary representation
03:48 - but this is a simple base 10 number that
03:51 - we have provided in order to make this
03:53 - as a binary number we have to provide
03:55 - the prefix that is 0b so as you can see
03:58 - 0 B is the prefix and then and next time
04:00 - when we print this number so over here
04:02 - we can simply put into this number so
04:05 - let me just save this file and try
04:06 - running this code now so as you can see
04:08 - we are getting eight instead of one
04:10 - thousand so 1000 is the binary
04:12 - representation of the number eight and
04:14 - when we provide the zero B which means
04:16 - it tells the python interpreter to treat
04:19 - this as the binary representation and
04:21 - print this number that is num1 in the
04:23 - base 10 format over here similarly we
04:26 - can have the octal numbers and the
04:27 - hexadecimal numbers as well so let's say
04:29 - in the octal numbers what we do is
04:31 - instead of 0b we provide 0 o and then
04:34 - let's say we just provide 10 as the
04:36 - number over here let me just save this
04:38 - file and try running this code now so
04:40 - octal number that is 10 it is being
04:42 - represented as the number 8 in the
04:44 - decimal format and that is what we are
04:46 - getting over here what will be the octal
04:48 - number that is 15 in this case so let me
04:50 - save this file and try running this code
04:52 - now as you can see 13 we are getting
04:54 - which is of the decimal format similarly
04:56 - let's say we want to represent the hexa
04:58 - decimal number so let us say see what
05:00 - will be the base 10 number for this
05:01 - hexadecimal number that is 0x15 so let
05:04 - me just save this file and try running
05:06 - this code so as you can see 21 is the
05:08 - decimal number now let's say we want to
05:10 - print 15 as the decimal number but we
05:13 - want to represent it as the hexadecimal
05:16 - number so we have something called as F
05:18 - over here the numbers it is going from 0
05:20 - to 9 and then a to F characters as far
05:23 - as hexadecimal representations are
05:25 - concerned so let me just save this file
05:27 - and try running this code now so as you
05:29 - can see 15 is getting printed over here
05:31 - so if you are familiar with the number
05:33 - systems then you must be knowing about
05:34 - what are the different values when we
05:37 - say hexadecimal octal and binary numbers
05:39 - over here and if you are not familiar
05:41 - then no need to worry about it it is
05:43 - just the formats in which the numbers
05:44 - are being stored and are being
05:46 - represented now very important topic the
05:48 - type conversion in Python so basically
05:51 - in Programming type conversion is the
05:53 - process of converting one type of number
05:55 - into another so in some cases we might
05:58 - want the float number to be converted to
06:00 - the integer number or the integer number
06:03 - to be converted to a complex number and
06:05 - so on based on the requirements so
06:07 - operations like addition subtraction
06:09 - convert integers to float implicitly so
06:12 - it is very important to note that
06:14 - whenever you are going from the integer
06:16 - to the float number it will be done
06:18 - automatically that's because float is
06:20 - taking extra memory compared to the
06:22 - integers so whenever you are going from
06:24 - a lower memory data type to the higher
06:27 - memory data type it will be done
06:29 - automatically but the same is not
06:30 - applicable when you go from a higher
06:32 - data type to the lower data type that's
06:34 - because there is some kind of a loss of
06:36 - data in that case so let us see how the
06:39 - integer gets automatically converted to
06:41 - the float value as you can see over here
06:43 - we have the print statement which is
06:45 - taking one operand that is the integer
06:47 - on the left hand side and a float number
06:49 - on the right hand side so let me just
06:50 - copy this line of code and we will print
06:53 - this over here so let me just save this
06:55 - file and try running this code so what
06:57 - exactly is happening over here is this
06:59 - is is a float number that is 2.0 and
07:01 - this is the integer number but an
07:03 - integer and a float number cannot be
07:05 - added so basically implicitly this
07:08 - integer is being converted to 1.0 behind
07:12 - the scenes and then that 1.0 is being
07:15 - added to 2.0 and after that we get the
07:18 - result as 3.0 similarly let's say if we
07:20 - have 2.45 over here so the result should
07:24 - be 3.45 in this case after this integer
07:27 - is being converted to the float number
07:29 - so let me just save this file and try
07:31 - running this code now as you can see
07:32 - 3.45 is getting displayed and this is
07:35 - how the implicit type conversion happens
07:37 - in Python Programming now what is the
07:40 - explicit type conversion so we can also
07:42 - use built-in functions like integer that
07:45 - is as you can see this is the end
07:46 - function name followed by the open and
07:48 - close parenthesis that will help us to
07:51 - convert any complex number or the float
07:53 - number to the integer it can also help
07:55 - us in order to convert the string to the
07:58 - integer as well we also also have the
08:00 - float and then we also have the complex
08:02 - function to convert between types
08:04 - explicitly so let's say we only want the
08:07 - integer format to be displayed over here
08:09 - that is the sum should be in the integer
08:11 - format so what we will do is for this
08:13 - 2.45 we have to explicitly convert this
08:16 - to the integer the left hand side is
08:19 - already integer we want to convert the
08:21 - right hand side to the integer so before
08:23 - this number we have to provide the int
08:25 - function name and then the number needs
08:27 - to be enclosed within the open and close
08:29 - parenthesis so this is the way that we
08:32 - can explicitly convert a data type to
08:35 - another data type so 2.45 that is the
08:38 - float number will get converted to the
08:40 - integer number over here so in this case
08:42 - there will be a loss of data the point
08:45 - 45 will be removed and only 2 will be
08:47 - considered over here so 2 plus 1 the 3
08:50 - should be the sum of this addition
08:52 - operation so let me just save this file
08:54 - and try running this code now so as you
08:56 - can see 3 is getting displayed so since
08:58 - there is a loss of data over here since
09:00 - we are going from a higher memory data
09:02 - type to the lower memory data type that
09:04 - is why we are required to provide the
09:06 - explicit data conversion functions guys
09:09 - similarly you can convert the string
09:10 - data type as well so let's say we have a
09:12 - string it is equal to 12 and what we
09:14 - want to do is let's say I want to add 10
09:17 - to this particular string so string is
09:19 - represented in this format that is it
09:21 - needs to be enclosed between the double
09:23 - quotes or the single quotes over here so
09:25 - what I want to do is let's say I want to
09:27 - add a 10 to this particular string so I
09:29 - just say 10 plus Str over here so what
09:32 - we are doing exactly is this is the
09:34 - integer and this is a string data type
09:36 - we are trying to add both these things
09:38 - over here so let me just save this file
09:39 - and try running this code so it says
09:41 - type error unsupported operand that is
09:44 - Type S for plus integer and string so we
09:47 - cannot add an integer with the string
09:49 - over here so we need to convert this
09:51 - string to the integer so similarly we
09:54 - can use the end function that we have
09:55 - seen just now and enclose this string
09:58 - variable inside the open and close
10:00 - parenthesis and that is how the string
10:02 - will get converted to the integer after
10:04 - which we can add it to other integers as
10:06 - well so let me just save this file now
10:07 - and try running this code so as you can
10:09 - see 22 is the result 10 plus 12 which is
10:12 - 22 and that is what we are getting in
10:14 - the form of integer so in this way you
10:16 - can convert the data types to another
10:18 - data types as well by using such kind of
10:21 - functions now let us talk about python
10:23 - mathematics so python offers the math
10:25 - module to carry out different
10:27 - mathematics like trigonometry logarithms
10:29 - probability and statistics Etc so for
10:33 - example I have certain lines of code
10:34 - over here what I will do is I'll simply
10:36 - copy and paste these lines of code since
10:38 - I am little bit lazy in order to type
10:40 - the entire code so basically this is
10:43 - very important we use the import keyword
10:45 - which we have already seen previously in
10:47 - order to import a particular module in
10:49 - Python programming language and then
10:51 - math is the name of the module now by
10:54 - using this module that is a library we
10:56 - can use the various variables and the
10:58 - functions that are present inside this
11:00 - math module so we have Pi variables we
11:02 - have the COS that belongs to the
11:04 - trigonometry functions then we have
11:06 - exponent as well log tan syn Edge and we
11:09 - also have the factorial function for
11:11 - which we have already returned the code
11:12 - in the previous video so there is a
11:14 - built-in function in order to find the
11:16 - factorial of a number over here as well
11:18 - so let me just save this file and
11:20 - running this code now so as you can see
11:22 - we are getting all the results over here
11:23 - first of all we are getting the pi value
11:25 - which is 3.14 and then COS of math Pi it
11:29 - is giving us minus 1 and then 22 026
11:32 - which is the exponent of 10 and then log
11:34 - 10 it is equal to 3.0 then we are
11:37 - getting sin h of 1 it is equal to 1.17
11:40 - and factorial of 6 we are getting 720
11:43 - can you guess what is the factorial of
11:45 - the number 4 so try to find out what is
11:47 - the factorial of 4 by using the Python
11:50 - programming language on your own as a
11:52 - homework for you and comment in the
11:54 - comment section below what will be the
11:55 - answer of the factorial 4. so Guys these
11:57 - are some of the things that you should
11:59 - know as far as numbers and Mathematics
12:01 - are concerned in the Python programming
12:03 - language please make sure that you like
12:04 - this video so that it reaches to more
12:06 - people and subscribe to this channel so
12:08 - that you get the notifications on
12:09 - upcoming videos as well the next video
12:11 - that we are going to talk about is
12:13 - random module in Python Programming so
12:16 - stay tuned