00:00 - so now we will see grid layout in CSS so
00:03 - guys basically the CSS grid layout
00:05 - module offers a grid based layout system
00:08 - with the help of rows and columns which
00:11 - makes it very easy to design the web
00:13 - pages without having to use the float
00:16 - and the position CSS properties that we
00:18 - had seen previously so guys we will
00:20 - check with the help of examples how you
00:22 - can easily design the web pages with the
00:25 - help of the grid layout using CSS so
00:28 - guys first of all we will understand
00:30 - understand the concepts of rows and
00:31 - columns in the grid layout in CSS so
00:34 - over here on the browser let us move to
00:36 - the sketch pad first of all so guys what
00:38 - is the meaning of grid layout in CSS so
00:41 - basically we have the concept of rows
00:43 - and columns as far as the grid layout is
00:45 - concerned so basically the horizontal
00:48 - lines as you can see this is one row
00:50 - over here and then we have the second
00:52 - row in this case so this is the second
00:55 - row that we have included and so on
00:57 - there can be multiple rows in the grid
00:59 - layout over here so guys let us label
01:01 - these rows in this case so let me add
01:03 - the text over here so basically we have
01:06 - Row one over here so basically this is
01:08 - Row one and then guys similarly we have
01:11 - row two and Row three as well so these
01:13 - are the three rows that we have included
01:15 - in our grid layout now guys similarly we
01:17 - have the columns as well that can be
01:20 - defined as far as the grid layout is
01:21 - concerned so basically the vertical
01:24 - lines that are going from top to bottom
01:27 - these are the columns that can be
01:28 - defined inside the the grid layout so
01:31 - let us have three columns over here so
01:33 - as you can see these are the column 1 2
01:35 - and then three respectively so guys
01:37 - basically the grid items are aligned in
01:39 - such a way that they will be present in
01:41 - the row and the column format over here
01:44 - and then guys we also have some more
01:45 - properties such as column Gap so over
01:48 - here you can see that there is a gap
01:50 - over here in this case so this is
01:51 - nothing but it is a column Gap that we
01:54 - can Define with the help of CSS
01:55 - properties that we are going to see and
01:57 - also there's a gap between the row over
02:00 - here between Row one and row two and
02:02 - then between row two and Row three so
02:04 - Guys these are nothing but the row gaps
02:06 - and the column gaps that we are going to
02:08 - Define by default there will be no gaps
02:11 - between the rows and columns but we can
02:13 - include them with the help of CSS
02:15 - properties so guys this is the basic
02:17 - understanding as far as the grid layout
02:20 - in the CSS is concerned so guys let us
02:22 - check some of the examples now basically
02:24 - we can Define the container as a grid
02:27 - layout with the help of the display CSS
02:30 - property so guys let us move to the vs
02:32 - code over here and simply we are going
02:34 - to define the diff tag with the class
02:36 - container and inside this container we
02:38 - are going to have multiple grid items so
02:41 - guys let us say we have the diff tag
02:44 - with the class item over here and the
02:46 - first item is having the number one so
02:49 - guys similarly we are going to have
02:51 - multiple items in this case so guys as
02:53 - you can see we have the D text with the
02:55 - numbers from 1 to 9 let me just save
02:57 - this file now and try reloading this
02:59 - page on the browser browser to see how
03:00 - it looks like so as you can see these
03:02 - are nothing but the diff tags that are
03:04 - getting displayed from 1 to 9 and since
03:07 - by default the diff tags are having the
03:09 - display equal to block that is why all
03:11 - the numbers are getting displayed on the
03:13 - new line over here guys let us provide
03:15 - certain CSS properties now in order to
03:18 - make a grid layout out of this container
03:20 - over here so guys basically we have this
03:22 - class container in this case and then
03:25 - what we will say is display it is equal
03:27 - to grid this time so that we can make a
03:29 - grid layout out of it now guys apart
03:31 - from this we will also have certain
03:33 - background color so that we can identify
03:36 - the background of the container as well
03:38 - as the items over here and then we will
03:40 - also have certain padding that we can
03:42 - provide so padding is equal to 20 pixels
03:45 - in this case let me just save this file
03:47 - now and try reloading this page once
03:49 - again on the browser so as you can see
03:51 - we have the background color for the
03:53 - grid container over here now guys by
03:55 - default the grid layout is having just
03:57 - one column over here let us provide
04:00 - certain CSS properties to this diff tags
04:03 - as well which is present inside the
04:04 - container so over here we will provide
04:07 - container class and then followed by the
04:09 - space character and Then followed by the
04:11 - diff tag which means whatever diff tags
04:13 - are present inside the container will
04:16 - have these CSS properties that we are
04:18 - going to Define so guys first of all let
04:20 - us have certain background color over
04:22 - here so let's say we provide the
04:23 - background color of yellow in this case
04:26 - and also we will provide the padding of
04:28 - 10 pixels over here let me just save
04:30 - this file now and try reloading this
04:32 - page one again on the browser so as you
04:34 - can see we have the yellow background
04:37 - color for all the diff tags inside this
04:39 - container grid layout and all the diff
04:41 - tags currently are displayed on the new
04:44 - lines over here now guys let us say we
04:46 - want to arrange all these items into
04:48 - three rows and three columns just like
04:50 - how we have designed the layout over
04:53 - here so what we can do is inside the
04:55 - container class in this case we have the
04:57 - CSS property that is grid template
04:59 - columns and then guys inside this grid
05:02 - template columns CSS property we can
05:05 - Define how many number of columns we
05:07 - want inside our grid layout so guys by
05:09 - default it is just having one column
05:11 - over here and we are supposed to provide
05:13 - the width of all the columns which are
05:15 - separated by the space character so guys
05:17 - let's say we want the width to be set
05:20 - automatically by the browser so simply
05:22 - we can provide the auto keyword now this
05:24 - means only one column will be present so
05:27 - let me just save this file now to show
05:29 - how it looks like and reload this page
05:31 - on the browser as you can see there is
05:33 - no change right now that's because we
05:35 - are telling the grid layout to have only
05:37 - one column over here in order to have
05:39 - multiple columns we need to provide the
05:42 - space character and provide the second
05:44 - parameter as well you can provide any
05:46 - width in terms of pixels or any other
05:48 - length measurement over here we are
05:50 - setting it as Auto in this case so
05:52 - basically this is the two column grid
05:55 - layout since we have provided Auto
05:57 - keyword twice over here let me just save
05:59 - this file now and try reloading this
06:01 - page once again on the browser so now if
06:03 - you can see the first div element that
06:06 - is having one is displayed over here and
06:08 - then we have the second column in this
06:10 - case now guys in order to identify these
06:12 - two columns over here let us provide
06:14 - certain colum Gap like we have seen in
06:17 - our design these are nothing but the
06:19 - column gaps in between the columns so
06:21 - how we can do that so again over here we
06:24 - can provide the column Gap CSS property
06:27 - so as you can see this is the column Gap
06:29 - CSS property and let's say we want to
06:31 - provide the cap of 20 pixels over here
06:33 - let me just save this file now and try
06:35 - reloading this page once again on the
06:37 - browser so as you can see we have
06:39 - provided the column gap of 20 pixels in
06:41 - this case and that is helping us in
06:44 - order to segregate The Columns over here
06:46 - similarly we can divide the rows as well
06:48 - so in this case we can also provide the
06:51 - row Gap CSS property so this is the
06:53 - property that we can use and we can
06:55 - provide 20 pixels over here so let me
06:58 - just save this file now and try
06:59 - reloading this page so as you can see in
07:02 - between the rows we are getting the gaps
07:04 - over here and this is how we can create
07:06 - the grid layout and also provide the
07:08 - column Gap and the row Gap over here now
07:11 - guys apart from this if you want to
07:13 - increase the number of columns then what
07:15 - you have to do is simply inside the grid
07:17 - template columns you can provide the
07:19 - third parameter which means another
07:22 - column will be added over here and the
07:24 - existing data will be adjusted
07:26 - accordingly so let me just save this
07:28 - file now and try reloading this page
07:30 - once again on the browser so as you can
07:32 - see now we are having the three columns
07:35 - and the three rows grid layout over here
07:37 - as per our requirement and this is the
07:39 - same design that we had drawn over here
07:41 - on the sketch pad so guys in this way
07:43 - you can have the grid layout with the
07:46 - help of the display equal to grid and
07:48 - then using the grid template columns CSS
07:51 - property and also providing the column
07:53 - Gap and the row Gap over here now guys
07:55 - we can also provide certain other
07:57 - properties let's say if we want to
07:59 - Sender this text inside the div element
08:01 - that is the child element inside the
08:03 - container so what we can do is simply we
08:06 - can provide the text align it is equal
08:07 - to Center over here let me just reload
08:10 - this page so as you can see all the text
08:12 - are now aligned at the center of the
08:14 - diff tag we can also have the fourth
08:16 - column over here so what we will do is
08:19 - let's say we want the fourth column to
08:20 - be small let's say we want the width of
08:22 - the fourth column to be 20 pixels over
08:24 - here so simply after the space character
08:27 - instead of providing the auto key word
08:29 - will provide the 20 pixels as the width
08:32 - of the fourth column over here let me
08:34 - just save this file now and try
08:36 - reloading this page once again on the
08:37 - browser so as you can see the fourth
08:40 - column is now added and it is only
08:42 - having 20 pixels as the width of that
08:44 - particular column and the other columns
08:47 - are taking the remaining space
08:49 - automatically that's because we have
08:50 - provided the auto keyword over here
08:53 - let's say we want the second column to
08:54 - have the width of 100 pixels so simply
08:57 - instead of having the auto keyword we we
08:59 - will provide the length as 100 pixels
09:01 - over here let me increase the width of
09:03 - fourth column to 40 pixels as well since
09:06 - it is very small right now and now when
09:08 - we reload the page as you can see now
09:10 - this is 100 pixels wide and then this is
09:12 - 40 pixels wide over here and the first
09:15 - and the third column are automatically
09:17 - taking the width as per the keyword that
09:19 - we have provided inside the grid
09:20 - template columns over here so guys in
09:22 - this way you can Define the different
09:24 - CSS properties as far as grid layout is
09:27 - concerned so far we have seen how we can
09:29 - and use the grid value for the display
09:31 - CSS property we have also seen how we
09:34 - can Define the grid layout with the help
09:36 - of grid template columns which will
09:38 - Define the number of columns over here
09:40 - and then apart from this we have also
09:42 - seen the column Gap and the row Gap in
09:44 - this case now guys there is a shorthand
09:46 - method that you can use for the column
09:48 - Gap and the row Gap over here so instead
09:50 - of having 20 pixels for both the CSS
09:53 - properties simply you can provide the
09:55 - Gap CSS property over here so guys first
09:58 - of all you need to provide the row Gap
10:00 - in this case so let's say we provide 20
10:02 - pixels as the row Gap and this time let
10:04 - us say we want to increase the column
10:06 - Gap so we provide 30 pixels as column
10:08 - Gap so guys first of all the first
10:11 - parameter that is taken by the Gap CSS
10:13 - property is the row Gap over here and
10:15 - the second parameter is the column Gap
10:18 - let me just save this file now and try
10:20 - reloading this page you will notice that
10:22 - the row Gap will be same but the column
10:24 - Gap will be increased now so when we
10:26 - reload this page as you can see this
10:27 - column Gap is 30 pixel wide and the row
10:30 - Gap is 20 pixels wide over here so guys
10:33 - you can provide the required gap between
10:35 - the items of the grid layout as per your
10:38 - requirements apart from this let us now
10:41 - understand what is the meaning of the
10:42 - grid lines now guys since we have
10:44 - provided all these elements inside the
10:46 - grid layout all these diff tags are
10:49 - called as the grid items over here and
10:52 - then guys on the extreme left there's a
10:54 - grid line in this case so if I show you
10:56 - back again in the sketch pad so before
10:59 - is column 1 there is a virtual vertical
11:01 - line over here which is line one in this
11:04 - case and then between column 1 and
11:06 - column 2 there is a second line over
11:08 - here and then we have the third line in
11:10 - this case and then there is a fourth
11:12 - line over here similarly we have the
11:14 - lines for the rows as well so over here
11:16 - we have the virtual line before Row one
11:19 - and then between Row one and row two we
11:21 - have the second line and so on there are
11:24 - lines in this case that we can use over
11:26 - here now guys how we can use these lines
11:29 - I I will show you with the help of the
11:30 - other CSS properties over here so
11:33 - basically we have something called as
11:35 - grid column start and then grid column
11:37 - end so guys let's say as per your
11:39 - requirement over here on the user
11:41 - interface you want the first number to
11:44 - occupy two columns over here so guys
11:46 - currently it is occupying just one
11:48 - column that is the first column in this
11:50 - case but let's say if you want to
11:51 - increase the width in such a way that it
11:54 - should occupy two columns over here that
11:56 - is First Column and second column so we
11:58 - can simply use the grid column start and
12:01 - grid column and CSS properties so guys
12:04 - let us check that as well so over here
12:06 - what we will do is for the first element
12:08 - over here we will provide the ID that is
12:11 - one in this case and we are going to use
12:13 - this ID in the style. CSS file so over
12:16 - here we will Define the ID that is one
12:19 - with the help of the hash character and
12:21 - then we are going to use the grid column
12:23 - start over here so guys basically we
12:25 - have the grid column start and it should
12:27 - start from the first line over here so
12:30 - guys this is the significance of
12:32 - understanding the grid lines basically
12:33 - this item should start from the grid
12:36 - line one over here and it should end in
12:38 - this case after the second column which
12:40 - means the grid line two is present over
12:43 - here between the column 1 and column 2
12:45 - and the grid line three is present over
12:47 - here between column 2 and column 3 so we
12:50 - are supposed to provide the numbers from
12:52 - 1 up to three over here so basically the
12:55 - grid column start will start from the
12:58 - number one and the grid column end
13:01 - should have the value of three over here
13:03 - so that the first item should occupy the
13:06 - space between the column 1 and column
13:08 - two in this case so guys when we provide
13:10 - the end as three let me just save this
13:12 - file now and try reloading this page
13:14 - once again on the browser you will
13:16 - notice that now the first element is
13:18 - taking the span of two columns that is
13:21 - the First Column and the second column
13:22 - and the other div elements are adjusted
13:25 - accordingly and all of them are taking
13:27 - just one column so guys this is the way
13:29 - way you can use the grid column start
13:31 - and grid column and CSS property in
13:34 - order to make the HTML element occupy
13:37 - multiple number of columns over here we
13:39 - also have the shorthand method for this
13:42 - so simply we can have the grid column in
13:44 - this case so guys let's say we provide
13:46 - grid column CSS property and over here
13:49 - we provide the column start as one and
13:51 - then followed by the forward slash and
13:53 - then simply we can provide the grid
13:55 - column and parameter value that is three
13:57 - over here let me just save this file now
13:59 - and try reloading this page once again
14:01 - on the browser as you can see it is now
14:03 - taking the space of two columns that is
14:05 - first and second now guys let us say we
14:07 - want to increase the width up to three
14:10 - columns over here so simply we need to
14:12 - provide the grid line number four over
14:14 - here let me just save this file now and
14:16 - try reloading this page once again on
14:18 - the browser so as you can see the first
14:20 - element is now taking the space of three
14:23 - columns that is first second and third
14:25 - by using the grid line numbers from 1 up
14:27 - to four over here so so guys this is the
14:29 - second line and then we have the third
14:31 - vertical line followed by the fourth
14:33 - vertical line apart from this instead of
14:35 - providing the line numbers for the grid
14:37 - column CSS property you can also provide
14:40 - the span keyword and then we can number
14:43 - the number of columns to be used in
14:45 - order to make the div element occupy
14:47 - those many number of columns so guys
14:49 - when we provide this pen so let's say we
14:51 - want this particular item to occupy only
14:54 - two columns over here so simply we
14:56 - provide span keyword followed by two
14:58 - columns in this case case let me just
14:59 - save this file now and try reloading
15:01 - this page once again on the browser so
15:03 - as you can see the first element is now
15:05 - occupying the space of two columns over
15:08 - here so guys similarly you can use the
15:10 - grid row start and grid row end as well
15:13 - and apart from that you can also use the
15:15 - grid row CSS property as the shorthand
15:17 - method so guys let us check that as well
15:20 - let's say if you want the First Column
15:22 - to have the two number of rows over here
15:24 - which means it will occupy two rows in
15:27 - this case so what we can do is simply we
15:29 - can provide the grid row over here so
15:32 - this is the CSS property that we are
15:34 - providing and then it is going from the
15:37 - first grid line up to Second and then
15:39 - the third grid line in this case so guys
15:42 - simply we can provide one followed by
15:43 - forward slash and then three over here
15:46 - so that it takes two number of rows as
15:48 - far as the first element is concerned
15:51 - let me just save this file now and try
15:53 - reloading this page once again on the
15:54 - browser as you can see now it is taking
15:57 - two number of rows as far as as the
15:59 - vertical spacing is concerned we can
16:02 - also provide the span keyword over here
16:04 - but this time we have to provide the
16:06 - number two instead of three since we are
16:08 - providing the span keyword let me just
16:10 - save this file now and try reloading
16:12 - this page as you can see it is taking
16:14 - two rows over here if you want it to
16:16 - occupy three rows so simply we can
16:18 - provide span three in this case let me
16:20 - just reload this page as you can see now
16:22 - it is taking the three rows as far as
16:25 - the vertical spacing is concerned so
16:27 - guys in this way you can easily use the
16:28 - the grid column or the grid row CSS
16:31 - properties based on your project
16:32 - requirement now guys apart from this we
16:34 - also have some other properties that is
16:37 - justify content over here so similar to
16:39 - how we have seen in the flex layout
16:41 - model the justify content will help us
16:44 - in order to align the items as far as
16:46 - horizontal alignment is concerned so
16:48 - guys let us check justify content with
16:50 - the help of example over here so inside
16:53 - the container class what we will do is
16:55 - let's say we have the justify content
16:57 - CSS property over here and we want all
16:59 - the elements to be present at the center
17:02 - of the container so simply we can
17:04 - provide the center value over here let
17:06 - me just save this file now and try
17:08 - reloading this page once again on the
17:10 - browser as you can see all the elements
17:12 - are now at the center of the container
17:15 - which is having the background color
17:16 - that is aqua so guys in this way you can
17:19 - simply use the justify content as well
17:21 - if you want a certain space to be in
17:23 - between all the elements as far as
17:25 - horizontal alignment is concerned you
17:27 - can provide the space between value as
17:30 - well so let me just save this file now
17:32 - and try reloading this page so as you
17:34 - can see in between all the elements
17:35 - there are equal spaces and then we have
17:38 - other values as well we can also provide
17:40 - space evenly over here so as you can see
17:42 - there's even spaces on the left and the
17:45 - right of all the div elements as far as
17:47 - horizontal spacing is concerned apart
17:50 - from this we also have the vertical
17:52 - spacing that you can use based on the
17:54 - Align content CSS property so let us
17:57 - check that as well so when we provide
17:59 - align content CSS property let's say we
18:01 - want all the elements to be at the
18:03 - center as far as vertical alignment is
18:05 - concerned so we provide the center value
18:08 - let me just reload this page once again
18:09 - on the browser so all the elements are
18:11 - currently at the center as far as
18:13 - vertical alignment is concerned we can
18:15 - provide some other values as well so
18:17 - let's say we provide the start value and
18:19 - reload this page so as you can see there
18:21 - is no change right now so what we will
18:23 - do is let us increase the height of this
18:25 - div container over here so simply we
18:28 - will provide the height value and then
18:30 - let's say we provide 300 pixels as the
18:32 - value of the container height so as you
18:34 - can see the height has been increased
18:37 - now and since we have provided align
18:39 - content at the start all the diff tags
18:42 - are at the start as far as the vertical
18:44 - alignment is concerned which means they
18:46 - are at the top of the container let's
18:48 - say we want them to be at the center of
18:50 - the container so simply we can provide
18:52 - the center value let me just reload this
18:54 - page as you can see now the div elements
18:57 - are present at the center of this div
18:59 - container as far as the vertical
19:01 - alignment is concerned and let us get
19:04 - them all at the end of the container
19:06 - which means at the bottom of the
19:07 - container so when we reload this page as
19:10 - you can see all of them are at the
19:12 - bottom which means they are aligned at
19:14 - the bottom of this particular container
19:16 - tag so guys in this way you can simply
19:19 - use the justify content and the Align
19:21 - content over here in order to align the
19:24 - items inside the grid layout now guys
19:26 - apart from this we have something called
19:28 - as grid area as well which is a
19:30 - shorthand method in order to use the
19:32 - grid row and the grid column over here
19:35 - so guys let us check the example of this
19:37 - as well so what we will do is simply I'm
19:39 - going to remove the grid row and the
19:41 - grid column that we had used previously
19:44 - for the first diff tag over here let me
19:46 - just reload this page once again on the
19:48 - browser also we will remove the height
19:51 - of the container over here so as you can
19:53 - see this is the container which is
19:55 - having the diff text inside the grid
19:57 - layout and then guys apart from this we
19:59 - will also make the width of all the
20:01 - columns as Auto in this case so let me
20:03 - just remove this 100 pixels and make it
20:06 - as Auto over here and also the 40 pixels
20:09 - as Auto in this case so that all the
20:11 - columns are now having the equal width
20:13 - over here now guys apart from this we
20:14 - will also remove the justify and the
20:16 - Align content in this case so that all
20:18 - the diff tags take up the available
20:21 - space on the left and the right as well
20:23 - so as you can see this is a simple grid
20:25 - layout inside the container now guys by
20:27 - using the grid area we can Define the
20:29 - grid row and the grid column start and
20:32 - the end CSS property so guys let us
20:34 - check that as well so what we will do is
20:36 - for the first element let us say we want
20:39 - this element to have two number of rows
20:41 - and two number of columns so basically
20:44 - this much area must be occupied by the
20:46 - first row so simply we can provide the
20:49 - grid area shorthand CSS property over
20:52 - here and the first value that is
20:54 - expected inside the grid area is the
20:56 - grid start row so in this case we have
20:59 - the start row as one and then followed
21:01 - by the forward slash and then it is
21:03 - expecting the grid column start which is
21:06 - again the First Column over here so
21:08 - again we provide one over here apart
21:10 - from this we have the slash character
21:12 - and then it is expecting the grid row
21:14 - end which means it should end at the
21:17 - third line over here as far as the row
21:19 - line is concerned so this is the first
21:21 - line second line and then this is the
21:23 - third line over here so simply we can
21:25 - provide three in this case followed by
21:27 - the sled
21:29 - and then we can provide the column line
21:31 - as well which is in this case we want
21:34 - the first element to be over here so
21:36 - basically this is first second and the
21:38 - third line as far as the column line is
21:40 - concerned so we have the grid column end
21:43 - as well let me just save this file now
21:45 - and try reloading this page once again
21:47 - on the browser so as you can see the
21:49 - first element is now taking the space of
21:52 - two rows and two columns respectively so
21:55 - guys in this way you can easily use the
21:57 - grid area as well now guys apart from
21:59 - this this grid area will be useful in
22:02 - order to order the elements also so
22:05 - basically let's say we want this fifth
22:07 - column to be present at this particular
22:10 - position where the element two is
22:12 - present so what we can do is first of
22:14 - all for the element five we are going to
22:16 - define the ID that is five over here so
22:19 - simply we have defined the ID of five
22:21 - and then what we will do is simply we
22:23 - will provide hash character and then the
22:25 - ID that is five over here and we are
22:27 - supposed to Define the grid area in this
22:30 - case so that we can order the elements
22:33 - inside the grid layout so guys it is not
22:35 - necessary that whatever sequence that
22:37 - you have provided inside the HTML
22:39 - elements with that same sequence all the
22:41 - items must be displayed but you can
22:43 - order them based on your project
22:45 - requirements over here so we want this
22:47 - particular Fifth Element to be present
22:49 - at this second position with the help of
22:51 - the CSS property that is grid area in
22:54 - this case so guys what we have to do is
22:56 - we need to identify the row line and the
22:59 - column line for this particular position
23:02 - so the row line is starting from the one
23:04 - and it is ending at two over here so let
23:06 - us Define that first of all so we start
23:09 - from the row line that is one over here
23:11 - and then we have to end it at second row
23:13 - line in this case and then guys we also
23:16 - have to provide the column start and the
23:18 - column end so this is column line one
23:20 - and then followed by column line two
23:22 - over here and then we have three in this
23:24 - case so we should start from the column
23:26 - line three and then end to to the column
23:29 - line four over here so when we say three
23:31 - that is the column start and Then
23:33 - followed by four as the fourth parameter
23:35 - over here so guys this is the grid area
23:38 - that we have defined so using this we
23:40 - can get the Fifth Element at this
23:42 - particular position since we have
23:44 - provided the grid area CSS property so
23:47 - let me just save this file now and try
23:49 - reloading this page once again on the
23:50 - browser as you can see this Fifth
23:52 - Element is now getting displayed at this
23:54 - position and then all the elements have
23:57 - adjusted accordingly based on the grid
23:59 - layout so guys in this way you can
24:01 - easily use the grid area CSS property as
24:03 - well so that you can order the HTML
24:06 - elements based on your project
24:07 - requirements inside the grid layout so
24:09 - Guys these are some of the CSS
24:11 - properties that you can use as far as
24:13 - the grid layout and CSS is concerned
24:15 - comment in the comment section below
24:17 - whether you have learned something out
24:18 - of this video please make sure that you
24:20 - like this video so that it reaches to
24:22 - more people and subscribe to this
24:23 - channel so that you get the
24:25 - notifications on upcoming videos as well
24:27 - the next video that we going to talk
24:29 - about is an exercise on grid layout in
24:31 - CSS in order to make the sidebar and the
24:34 - content so stay tuned