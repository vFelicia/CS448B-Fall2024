00:00 - in the next few hours we are going to
00:01 - learn a lot about the Python programming
00:03 - language with the help of the examples
00:06 - and python programs as well while you're
00:08 - watching this video please make sure
00:10 - that you pause this video and practice
00:12 - on your own so that on different inputs
00:14 - you get different output and that is how
00:16 - you are going to learn about the Python
00:18 - programming language you can also watch
00:20 - my other Python tutorial and Python
00:22 - program videos which are available for
00:24 - free on YouTube the link to those
00:26 - playlist I have given in the description
00:28 - section below and we are going to cover
00:30 - all the basics about the Python
00:32 - programming language so let's get
00:34 - started Python tutorial for beginners so
00:36 - if you're completely new to programming
00:38 - languages and want to start with the
00:40 - Python programming language then this
00:42 - video series is for you and it doesn't
00:44 - matter even if you have learned the
00:46 - other programming languages such as Java
00:48 - C C++ and if you're going to learn the
00:51 - Python language for the first time you
00:53 - can watch these video so that we can get
00:55 - started from the completely beginner
00:57 - level and we reach up to the
00:58 - intermediate and expert level as we go
01:01 - through the different concepts of the
01:02 - Python programming language so guys
01:04 - first of all we are going to check the
01:06 - environment setup using the Python
01:08 - language and we are going to use the VSS
01:10 - code as the editor now over here vs
01:12 - stands for visual studio and we are
01:14 - going to use the visual studio code
01:16 - editor in order to write our python
01:18 - programs apart from this vs code setup
01:21 - we are also going to see how do we write
01:23 - the first python code and execute it so
01:26 - guys basically I have written down the
01:27 - steps to install the vs code editor and
01:30 - python interpreter over here so first of
01:32 - all we are going to install VSS code
01:34 - using this link that I have already
01:36 - provided in the description section so
01:38 - when you hit this URL in the browser
01:40 - this is the page that is going to open
01:42 - from where you can easily download the
01:44 - visual studio code it depends on your
01:46 - operating system which installer you
01:48 - want to download you can also download
01:50 - for Windows Mac OS and Linux systems
01:53 - over here so it depends on your
01:54 - operating system once you have
01:56 - downloaded this and installed the vs
01:58 - code on your machine machine the next
02:00 - step is to install python extension in
02:03 - VSS code so guys once you have installed
02:05 - the visual studio code this is the get
02:07 - started page that you will see in the
02:09 - visual studio code ID so over here first
02:12 - of all you are supposed to install the
02:14 - python extension so on the left hand
02:16 - side as you can see there is an
02:18 - extensions button over here on which you
02:20 - can click and then this particular
02:22 - section will open so over here in the
02:24 - search bar you are supposed to type
02:25 - python so once you type python there
02:28 - will be list of extensions that will be
02:30 - available for you so guys this is the
02:32 - extension that you have to install over
02:34 - here so as you can see python
02:36 - intellisense file lens and this is a
02:38 - description that you can see on the
02:40 - right hand side so since I have already
02:42 - installed this python extension on this
02:44 - Visual Studio code I am getting this
02:46 - uninstall button but you will be getting
02:48 - the install button over here if you have
02:50 - not already installed this particular
02:52 - extension guys this python extension
02:54 - helps us in order to write the python
02:56 - programs very efficiently it allows us
02:59 - to have the code completion feature
03:01 - along with this we can also run the
03:03 - python code and have the output from
03:06 - within the visual studio code itself so
03:08 - guys it is very important extension if
03:10 - you are going to Learn Python and want
03:12 - to write the python programs now guys
03:13 - coming to the next step we have to
03:15 - install the python interpretor using
03:18 - this link that I have already provided
03:19 - in the description so once you open this
03:22 - URL in the browser over here this is the
03:24 - page that will open for you and this is
03:26 - the official website of the Python
03:28 - programming language from where you can
03:30 - download the latest version for Windows
03:33 - over here since my machine is Windows I
03:35 - will be downloading this Python and the
03:37 - latest version is
03:39 - 3.11.1 it might so happen that you are
03:41 - watching this video in the future for
03:43 - which the latest version might be
03:45 - something else so you can download the
03:46 - latest version of the Python interpretor
03:48 - from here apart from this you can also
03:50 - get the links to the installer if you're
03:52 - using some other operating system over
03:54 - here so guys once you have installed
03:56 - python on your machine you can quickly
03:58 - open command prompt so over here in the
04:00 - command prompt you can simply type py
04:03 - followed by double hyphen characters and
04:06 - then you provide version and then when
04:08 - you press enter as you can see python
04:12 - 3.11.1 this is the version of python
04:14 - that is already installed on my machine
04:16 - you might have some separate version but
04:18 - the command will be same in order to
04:19 - check whether the python is successfully
04:22 - installed on your machine now guys after
04:24 - successful installation what you have to
04:26 - do is the last step is to connect this
04:28 - python interpreter in vs code so we
04:30 - select the python interpreter in VSS
04:32 - code so over here you have to come on
04:35 - the settings on the bottom left and then
04:38 - over here you can see the command pallet
04:40 - you can also have the shortcut key as
04:42 - Control Plus shift plus P if you're
04:44 - using the keyboard keys and then when
04:46 - you click on this on the search bar you
04:48 - have to type Python and then colon and
04:50 - then we have select interpreter so as
04:52 - you can see this is the option and when
04:54 - you click on this as you can see this
04:56 - python 3.1.1 is getting displayed over
04:59 - over here which you are supposed to
05:00 - select in order to select the python
05:03 - interpretor now guys what we are doing
05:05 - over here is we are connecting this
05:07 - python interpretor with this Visual
05:09 - Studio code so that whenever we write
05:11 - the python code our program gets
05:13 - executed successfully on the vs code
05:16 - itself now guys it might so happen that
05:18 - you don't get this option that's because
05:20 - you have installed python after
05:22 - installing vs code so you can simply
05:24 - restart this vs code in order to get
05:27 - this option over here and once you
05:28 - select thist option you are ready in
05:31 - order to write the python programs in
05:33 - the vs code IDE so guys just by using
05:36 - these four steps of installation you can
05:38 - quickly get started in order to write
05:40 - the python programs in the vs code and
05:42 - all the steps have been documented in
05:44 - this official documentation of the
05:46 - visual Studio website so you can check
05:48 - the content of this documentation as
05:50 - well the link I have given in the
05:51 - description already now guys we are
05:53 - going to write the first code in Python
05:55 - so what we are going to do is we are
05:57 - just going to close these tabs over over
05:59 - here and we are going to open this
06:01 - Explorer over here it is saying no
06:03 - folder opened initially so what you can
06:05 - do is you can create the folder
06:07 - initially in order to organize all your
06:10 - python programs so basically I'm going
06:12 - to just create a new folder over here
06:14 - and I'm going to say python so this is
06:17 - the name of the folder and then I'll
06:19 - select this folder over here so as you
06:21 - can see a new folder that is python has
06:23 - been created now you can write python
06:25 - programs inside this python folder you
06:27 - can have any other folder in any of the
06:30 - directories it depends on you where you
06:32 - want to store the python codes that you
06:34 - will be writing from now on so what we
06:36 - will be doing is as you can see this is
06:38 - the icon it says new file so we will be
06:40 - clicking on this new file and let's say
06:42 - I provide the name of the Python program
06:45 - as python followed by underscore and
06:47 - then we have code followed by dot we
06:50 - have py so guys this is very important
06:52 - that after typing the name of the file
06:55 - we have to append it with py this is the
06:58 - extension of the pyth Python program and
07:00 - this extension will help the vs code in
07:02 - order to interpret that this is the
07:04 - python code and it should execute this
07:07 - code using the python interpretor so
07:09 - guys I'm going to press enter over here
07:11 - and once we press enter this python
07:13 - code. py it is going to open
07:15 - automatically over here now simply we
07:17 - can print some content in our Python
07:19 - program as the first code in Python so
07:21 - over here we have something called as
07:23 - print statement as you can see once we
07:25 - type print it is auto suggesting us what
07:27 - are the different keywords that we can
07:28 - use so so when we press enter over here
07:31 - this print gets selected automatically
07:33 - now inside the open and close
07:35 - parenthesis what we are supposed to do
07:37 - is we can type one particular statement
07:39 - that is the name of the YouTube channel
07:41 - that is programming for beginners which
07:44 - you should definitely subscribe so this
07:46 - is a string that is a statement that we
07:48 - have given over here and this is the
07:50 - very simple Python program that we can
07:52 - write and what this will do is it will
07:54 - simply print this content that is
07:56 - programming for beginners on the console
07:58 - so guys over here you have to come on
08:00 - file and then you can click on save or
08:02 - else you can use the control+ S on the
08:05 - keyboard in order to save the file which
08:07 - I'm going to do in the upcoming videos
08:09 - as well so first of all you save this
08:11 - file and simply you have to come on this
08:13 - top right corner over here you can see
08:15 - this run python file button over here so
08:17 - when you click on this run python file
08:20 - the terminal will open and it will
08:22 - execute this file that is python code.
08:24 - py that we have simply created over here
08:27 - and as you can see programming for
08:28 - beginners string is getting printed so
08:30 - guys in this way we have written the
08:32 - very first code in the python and using
08:34 - the print statement we have printed the
08:36 - programming for beginners we can print
08:39 - any other statement over here as well so
08:41 - let's say I'll provide this as a
08:44 - statement and then when we save this
08:46 - file and try running this code once
08:48 - again as you can see this is a statement
08:50 - is getting printed over here on the
08:52 - terminal so guys this is the way we can
08:53 - easily set up our python interpreter
08:56 - along with the editor that is Visual
08:58 - Studio code you you can use any other
09:00 - editor that you want such as you can
09:02 - simply use the notepad file as well but
09:04 - you will not get such strong features
09:06 - which are provided by the visual studio
09:08 - code in the notepad file apart from that
09:10 - you can also use notepad++ or we have a
09:13 - very popular ID that is py charm and
09:16 - apart from that we have many other
09:17 - editors that you can use but vs code is
09:20 - one of the lightweight editors that you
09:22 - can use when you are writing the python
09:24 - programs python keywords and identifiers
09:27 - so guys keywords are nothing but these
09:29 - are the reserved words in Python so
09:31 - basically these are the words that we
09:33 - cannot use as the identifiers now what
09:36 - are identifiers these are nothing but
09:38 - these are the names that are given to
09:40 - variables functions classes and many
09:42 - other objects that we are going to see
09:44 - in the upcoming videos as well so guys
09:46 - for examples as you can see over here
09:48 - the examples for keywords are true and
09:50 - then we have false if condition else
09:53 - condition LF so Guys these are certain
09:56 - keywords that you must be aware if you
09:57 - have already learned some other
09:59 - programming language and if not then you
10:02 - don't have to worry but we are going to
10:04 - learn about these keywords in the
10:06 - upcoming videos as well you just need to
10:08 - know that these are certain keywords
10:10 - which cannot be used anywhere else apart
10:12 - from their own functionalities so guys
10:15 - over here in order to make it more easy
10:17 - for you I have the list of all the
10:19 - python keywords over here as you can see
10:21 - false none true and many other keywords
10:24 - are present that have specific
10:26 - functionality as far as Python
10:28 - programming languages is concerned and
10:29 - you cannot use them apart from their own
10:32 - functionality where they are supposed to
10:34 - be used now apart from this what are the
10:36 - examples of the identifiers as you can
10:38 - see message this is a particular name
10:41 - that we have given to a string another
10:43 - example is language which can Define
10:45 - another language such as a Korean
10:47 - language or the Hindi language English
10:49 - language or Spanish or French language
10:52 - or any other language which can be
10:53 - defined using this variable we also have
10:56 - other identifier such as number count so
10:59 - so this is nothing but these are certain
11:00 - names that are given to a particular
11:03 - variable so we should not mix up between
11:05 - the keywords and identifiers whenever we
11:07 - are writing the python programs so guys
11:09 - let us check this with the help of some
11:10 - examples over here so as you can see in
11:12 - this ID we have the output of the
11:15 - previous example that we have executed
11:17 - so simply we can type CLS that is the
11:19 - command in order to clear the content of
11:22 - the terminal over here when we press
11:24 - enter the entire terminal is cleared and
11:26 - then what we will do is as you can see
11:28 - previously we had written a print
11:30 - statement and inside this we had given
11:32 - the content that this is a statement
11:34 - what we can do is this value can be
11:36 - assigned to another variable which is
11:38 - called as the identifier so I will just
11:41 - remove this line over here and before
11:43 - this what I will do is let's say I
11:45 - provide Str Str as the identifier name
11:48 - followed by equal to and then in between
11:51 - the double codes I'm supposed to provide
11:53 - the string that is this is a statement
11:55 - that we had printed over here using the
11:57 - print statement and then what we we can
11:59 - do is in this print inside the open and
12:02 - close parenthesis over here we can
12:04 - simply provide this s Str which is the
12:06 - identifier so guys what exactly is
12:08 - happening over here is we have provided
12:10 - the content that we want to print and we
12:13 - have stored that content in a particular
12:15 - identifier so this is called a
12:17 - identifier over here that is St Str
12:19 - which is nothing but a name over here
12:21 - which is given to this particular value
12:23 - and we can simply provide this name that
12:25 - is Str Str over here and when we save
12:27 - this file and try running this code now
12:29 - so as you can see this is a statement is
12:31 - getting printed so it doesn't matter
12:33 - what content is provided over here we
12:35 - can provide some other statement as well
12:38 - like programming for beginners which is
12:40 - the name of the YouTube channel which
12:41 - you should definitely subscribe if you
12:43 - have not subscribed it already so when
12:45 - we save this file and try running this
12:47 - code as you can see programming for
12:49 - beginners is getting printed now so it
12:51 - depends on what value is being stored in
12:53 - this particular variable which is also
12:55 - called as identifier we can give any
12:57 - name to this ident Iden ify let's say
12:59 - instead of St Str we can simply give
13:02 - statement as the name of this variable
13:04 - but we have to change it in the print
13:06 - statement as well so I'll just copy the
13:08 - statement variable and paste this over
13:10 - here so guys this is nothing but
13:12 - identifier it is also called as a
13:14 - variable since we are storing some
13:16 - particular value inside this variable I
13:18 - click on Save and when I run this code
13:20 - once again again it is printing the same
13:22 - content that is programming for
13:24 - beginners so guys this is one example of
13:26 - identifier and in similar way we can
13:28 - have any other name to the identifier
13:30 - and along with that we are supposed to
13:32 - provide the value now apart from that
13:35 - can we use the keywords as the variable
13:37 - names so let us check this so let's say
13:39 - if I provide if keyword over here so
13:42 - instead of this statement over here I
13:44 - provide if and then let's say if I print
13:47 - this if so what will happen let me just
13:50 - save this file and try running this code
13:52 - so as you can see it is providing the
13:54 - syntax error that is invalid syntax and
13:57 - we can see if equal to so over here it
13:59 - is pointing out so as I've already told
14:01 - you we cannot use keywords as the
14:04 - identifier since they have their own
14:06 - meaning as far as python programs are
14:08 - concerned so we need to avoid the
14:10 - keywords being used as the identifiers
14:12 - and we should give some other names
14:14 - apart from all these keywords that are
14:16 - being displayed over here which we are
14:18 - going to learn in the upcoming videos as
14:19 - well guys it will only come with
14:21 - practice that you will come to know that
14:23 - which are the python keywords and which
14:25 - you are not supposed to use as the
14:27 - identifiers so don't need to worry you
14:29 - just stick with me till the end of this
14:31 - video series and we are going to learn a
14:32 - lot about the python programs now there
14:34 - are certain rules while naming the
14:37 - identifiers so as you can see
14:38 - identifiers cannot be a keyword which we
14:40 - have just proved by providing the if
14:43 - keyword over here and then apart from
14:45 - that identifiers are case sensitive so
14:48 - Guys these are two different identifiers
14:50 - let's say I provide Str Str over here
14:52 - which is one identifier we can simply
14:54 - print this using the print statement
14:56 - over here and then let's say we have
14:58 - another it identifier as St Str so over
15:00 - here we can have a different statement
15:02 - so let's say I simply provide the string
15:05 - over here so what will happen is if I
15:07 - save this file entery running this code
15:09 - now it is saying programming for
15:11 - beginners but Str Str and Str Str both
15:13 - the identifiers are same the only
15:15 - difference is these characters are
15:17 - uppercase characters whereas this s Str
15:19 - has lowercase characters but when we
15:22 - provide this Str Str over here in the
15:23 - print statement let me just save this
15:25 - file enter I running this code as you
15:27 - can see this time string is getting
15:29 - printed that's because we have saved the
15:31 - string in this particular identify that
15:33 - is capital Str Str so guys this proves
15:36 - that identifiers are case sensitive and
15:38 - you have to take caution while you are
15:40 - naming your identifiers over here apart
15:42 - from that it can have a sequence of
15:44 - letters and digits as well however it
15:47 - must begin with a letter or a underscore
15:49 - the first letter of an identifier cannot
15:51 - be a digit so basically we are supposed
15:53 - to start with the letter or it can also
15:56 - be a underscore over here and then white
15:58 - spaces are not allowed and apart from
16:01 - that we cannot use special symbols like
16:03 - exclamation mark at the rate hashtag and
16:06 - dollar sign and so on so there are
16:08 - certain special characters which cannot
16:10 - be used while you're naming your
16:11 - identifiers so python variables
16:14 - constants and literals so guys what are
16:16 - python variables so in programming a
16:18 - variable is a container that is a
16:20 - storage area to hold data so as we have
16:23 - seen previously a number is a variable
16:26 - and we can provide the value that is 10
16:29 - so previously we had seen a string
16:30 - variable in which we had stored some
16:32 - statement whereas we can also have the
16:35 - integer values being stored in the
16:37 - variables so over here if we move to our
16:39 - Visual Studio code so we can simply type
16:42 - number that is the variable name which
16:44 - can be assigned a value so equal to 10
16:47 - so this is nothing but an integer value
16:49 - being assigned to a variable which is
16:51 - named as a number we can also have the
16:53 - string so let's say programming for
16:55 - beginners so we have programming for
16:58 - beginers s see string over here which
17:00 - can be assigned to a variable and the
17:02 - variable name can be given as Str Str or
17:05 - it can be also given as message or any
17:07 - other name that you want to give while
17:09 - writing your Python program so Guys
17:11 - these are nothing but variables which
17:12 - can be used later on in the program
17:14 - basically their functionality is to
17:16 - store some values so in this case number
17:18 - is storing the value that is 10 and this
17:20 - Str Str variable is storing the value
17:23 - that is programming for beginner string
17:25 - now guys it is very important to note
17:26 - that python is a type in referred
17:28 - language so you don't have to explicitly
17:31 - Define the variable type it
17:33 - automatically knows that 10 is an
17:35 - integer and declares the number variable
17:37 - as the integer so guys basically it
17:40 - depends on the value that we are
17:42 - providing so just because you are typing
17:44 - number as the name of the variable it
17:46 - doesn't mean that it has to be
17:48 - necessarily having the integer value you
17:51 - can also have the string value as well
17:53 - so when I copy this and paste this over
17:55 - here the number will have programming
17:57 - for beginners but guys this doesn't make
17:59 - any sense over here but programmatically
18:01 - this is also possible that's because we
18:03 - don't have to provide any data type over
18:06 - here in the python programs so whatever
18:08 - the value is data type will be given to
18:10 - that particular variable based on the
18:12 - value that is being provided to the
18:14 - variable this is very important Point as
18:16 - far as python programs are concerned in
18:18 - other programming languages such as Java
18:20 - or C++ we have a very strict data type
18:23 - that needs to be provided before we
18:25 - provide our variable names over here and
18:28 - guys this is also one of the advantages
18:30 - of using the Python program it allows us
18:32 - to write the code quickly compared to
18:34 - other programming languages now guys
18:36 - moving forward what is the python
18:38 - constant so basically a constant is a
18:40 - special type of variable whose value
18:42 - cannot be changed so for example as you
18:45 - can see the pi value is 3.14 so over
18:48 - here guys before defining the constant
18:50 - variable what we can do is if we simply
18:52 - print this variable over here that is
18:55 - print followed by number that is being
18:57 - given inside the parenthesis I'll save
18:59 - this file and try running this code now
19:01 - so as you can see programming for
19:03 - beginners is getting printed that's
19:04 - because the value is given as
19:06 - programming for beginners let's say I
19:07 - provide the integer that is 20 over here
19:10 - and then when I save this file enter I
19:12 - running this code now the number should
19:14 - have the value that is 20 and that is
19:16 - what should be printed so as you can see
19:18 - when we run this code 20 is getting
19:20 - printed over here so whatever value is
19:22 - being stored and whichever variable we
19:24 - want to print the content of that
19:25 - variable will be printed now coming to
19:27 - the constants that we have just defined
19:30 - so in Python let's say if you provide pi
19:32 - equal to 3.14 over here so instead of
19:35 - this number we provide Pi it is equal to
19:38 - 3.14 I'll just remove this line of code
19:41 - and then simply I'll provide pi over
19:42 - here so what will happen is it will
19:44 - display this value that is 3.14 I'll
19:47 - save this file and try running this code
19:49 - now as you can see 3.14 is getting
19:51 - printed but guys what is the use of this
19:53 - constant basically we are saying that Pi
19:56 - is constant over here that's because us
19:58 - using this nomenclature that is the
20:00 - constant variable must have all the
20:02 - characters as the upper case so this can
20:04 - Define that it is a constant over here
20:07 - but is it actually a constant no in this
20:10 - case since again we can use pi over here
20:12 - and we can provide some other values as
20:14 - well such as 5.15 over here so when I
20:17 - save this file Ander try running this
20:19 - code now it is saying now that Pi is
20:21 - having 5.15 which is the latest value so
20:24 - guys there is no concept of python
20:26 - constants over here right now but what
20:28 - we can do is we can save this value in
20:30 - some other file so let's say I create
20:32 - another file over here and name it as
20:34 - constant followed by the extension that
20:36 - is py over here when we press enter we
20:39 - can simply provide this statement that
20:41 - is pi equal to 3.14 I just copy this and
20:44 - paste this over here so we have provided
20:46 - pi equal to 3.14 now what we can do is
20:50 - coming to this python code what we can
20:52 - do is we can use the import keyword now
20:55 - guys this import keyword is used in
20:58 - order to import some other python files
21:00 - into this file so that we can use the
21:03 - content of that other python files over
21:05 - here so we are going to import this
21:07 - constant. py in our python code program
21:10 - so import we can say constant over here
21:13 - so when we type constant as you can see
21:15 - constant is getting Auto suggested over
21:17 - here that's the very important feature
21:19 - of the intellisense which is included in
21:21 - the python extension that we had
21:23 - installed so we provide constant over
21:25 - here and what we have to do is while
21:27 - printing we can simply provide this
21:29 - constant over here that is constant
21:32 - followed by Dot and then as you can see
21:34 - Pi is getting Auto suggested that's
21:36 - because we had defined pi over here so
21:38 - we simply have to provide Pi so what
21:41 - will happen is it will print the value
21:44 - of the pi so when we save this file and
21:46 - try running this code now once again it
21:48 - says module constant has no attribute Pi
21:51 - so guys that may be because we have not
21:53 - saved this file that is constant let me
21:55 - come over here and save this file over
21:56 - here once again and I'll go to this
21:58 - python code and then run this file once
22:01 - again so as you can see now 3.14 is
22:03 - getting displayed so guys if you want to
22:05 - use some constant values you can have a
22:07 - separate file that is constant. py in
22:10 - which you can store all the constant
22:12 - variables let's say we have another
22:14 - variable over here that is St Str and
22:16 - then we provide string s the value so
22:19 - this Str Str can also be treated as a
22:21 - constant for which the values never
22:23 - change while we are executing the code
22:25 - I'll save this file over here and let's
22:27 - say if I want to print the string as
22:29 - well so I'll copy this line of code
22:31 - paste this over here and instead of Pi
22:33 - we will provide Str Str now so we
22:36 - provide constant. pi and constant. St
22:38 - strr also so when we save this file and
22:40 - try running this code now we get both
22:42 - the things that is 3.14 we get the
22:44 - string value as well so if you want to
22:46 - use the constants in Python you can have
22:48 - a separate file all of the constants can
22:51 - be defined over there and then you can
22:53 - import that constant file and use the
22:55 - various variables that you have defined
22:57 - as constant in order to write your
22:59 - python programs so guys moving forward
23:01 - over here what are python literals
23:03 - literals are representations of fixed
23:05 - values in a program they can be numbers
23:08 - characters or strings etc for example
23:11 - hello world is one of the literal then
23:13 - 12 is another literal 23.0 and then C
23:17 - character true false Etc so guys
23:19 - literals are nothing but these values so
23:22 - basically this value it is a literal
23:24 - this particular name that we have given
23:26 - is the identifier or also called as
23:29 - variable but in this case it is a
23:30 - constant now this variable becomes
23:32 - constant when the value cannot be
23:34 - changed but we can change this anytime
23:36 - in this code but not over here an
23:39 - identifier can be a constant when we
23:41 - don't want to change its value anytime
23:43 - in our Python program and again the
23:45 - string value inside the double codes it
23:47 - is a literal python data types in which
23:50 - numeric string list tle set are included
23:54 - so Guys these are the different data
23:56 - types that we can see in this this video
23:58 - and the upcoming videos as well so
24:00 - basically in computer programming data
24:02 - types specify the type of data that can
24:04 - be stored inside a variable so for
24:06 - example number it is equal to 24 so 24
24:10 - value belongs to the numeric data type
24:13 - and this is the integer value inside the
24:15 - numeric data type we have many other
24:17 - data types such as integer value then we
24:19 - have float value as well in which there
24:21 - is a decimal point we have a complex
24:23 - value as well in which as you can see
24:25 - this expression that is 1 + 2J this is a
24:28 - complex expression so all these are
24:30 - having numeric data types over here so
24:32 - number over here is a numeric data type
24:35 - or the integer as you can see 24 is the
24:37 - value if it was 24.5 then we would say
24:41 - that number variable is of float data
24:43 - type so guys let us check this with the
24:44 - help of example what we can do is we can
24:46 - simply copy these lines of code over
24:49 - here I'll copy this and we'll paste this
24:51 - over here now what we will do is this
24:53 - constant. py that we had created
24:55 - previously I'll just remove from our
24:57 - python folder over here since it is no
24:59 - longer needed and we will simply keep
25:02 - python code. py where we are going to
25:04 - write all the programs over here so guys
25:07 - over here I'll simply replace the
25:09 - content of this file by this content
25:12 - I'll save this file and over here in the
25:14 - terminal I'll simply clear the screen so
25:16 - as you can see num one it is defined as
25:18 - five which is the integer that is being
25:20 - assigned to num one so the data type
25:22 - over here will be the integer data type
25:24 - and using this print statement what we
25:26 - are doing is we are using using this num
25:28 - one and then followed by comma is of
25:31 - type which means num one will be printed
25:34 - that is five will be printed and then we
25:36 - will have is of type string being
25:38 - printed and then type this is another
25:40 - method that is being used in order to
25:42 - get the type of a variable so as you can
25:44 - see this is the syntax that first we
25:47 - provide type and Then followed by open
25:49 - and close parenthesis and over here
25:51 - inside this we have num one that is the
25:53 - variable name guys similarly we have
25:55 - provided num 2 as 2.0 and the same thing
25:58 - we are doing that is we are finding the
26:00 - type over here and then in the num three
26:02 - as well we are getting the type of this
26:04 - num three variable let me just save this
26:06 - file enter running this code now so as
26:09 - you can see five is of type class in so
26:12 - this is of the integer data type 2.0
26:15 - since it is having the decimal over here
26:17 - it is saying it is of type float over
26:19 - here and 1 + 2 J it is of type complex
26:23 - over here so these are all numeric data
26:25 - types and inside the numeric data type y
26:28 - these are described as integer float and
26:30 - complex values now apart from this guys
26:32 - we have other data types as well such as
26:34 - string that we had seen previously we
26:36 - have list as well tle and set so guys
26:39 - let us check this one at a time so over
26:41 - here what we will do is simply I'll
26:43 - provide Str Str and then I provide the
26:45 - Str Str value as programming for
26:49 - beginners so what we will do over here
26:51 - is we want to find the type of this Str
26:54 - Str variable so what we can do is we can
26:57 - simp simply have the print statement
26:59 - followed by open and close parenthesis
27:01 - and we can simply have the type function
27:04 - so guys as you can see type is being
27:05 - Auto suggested over here we will select
27:07 - this and inside the open and close
27:09 - parenthesis we will use this variable so
27:11 - I'll just copy this and paste this over
27:13 - here that is Str Str and then when we
27:15 - save this file and try running this code
27:17 - now as you can see class that is St Str
27:20 - is getting printed over here we can also
27:22 - have some string value over here that is
27:24 - first of all we are going to type St Str
27:27 - that is the value of this s Str and Then
27:29 - followed by comma and then we can simply
27:32 - have is of type inside the single Cotes
27:36 - over here guys it is very important that
27:38 - whenever you want to type certain
27:40 - characters we should either have it
27:42 - inside the single quotes or double codes
27:44 - as we have seen over here and then when
27:46 - we save this file and running this code
27:48 - it will show us the data type of this
27:50 - string with the most sensible statement
27:52 - so as you can see programming for
27:54 - beginners this is the string value that
27:55 - we have given and then is of type now
27:58 - this is of type we have provided over
28:00 - here and then this type function that is
28:03 - Str Str it is returning the type of this
28:05 - Str Str variable which is class Str Str
28:08 - over here so this is of string data type
28:10 - now guys this Str Str over here it
28:12 - stands for string and not the name of
28:14 - this variable if I provide here
28:16 - something else then it will be more
28:18 - sensible so let's say if I provide
28:20 - statement over here as the name I'll
28:22 - copy this and paste this over here and
28:24 - when we run this code once again so as
28:26 - you can see it says class St Str is of
28:29 - type class St Str so since we have not
28:31 - replaced this St Str with the statement
28:33 - that is why we are not getting it
28:34 - properly I'll run this code once again
28:36 - now so as you can see programming for
28:38 - beginners which is the value of this
28:40 - statement variable over here and then is
28:42 - of type and then we have class Str Str
28:45 - over here now apart from this we have
28:47 - other data types as well such as list
28:49 - which can be defined as the square
28:50 - brackets so what we have to do is let's
28:53 - say I provide list one as the name of
28:55 - the variable and then equal to now guys
28:58 - list is nothing but it is a data type
29:00 - that have collection of elements so over
29:02 - here let's say we have collection of
29:04 - strings so let's say we have collection
29:06 - of fruits over here so the first fruit
29:08 - is Apple followed by comma and then
29:11 - again we have double quotes and then we
29:13 - have mango so all the elements are being
29:15 - separated using the comma over here as
29:17 - you can see and then let's say we have
29:20 - banana over here as the third fruit so
29:23 - what we can do is we can simply have
29:25 - print statement over here and then we
29:27 - can have type of this list one so I'll
29:31 - say list one over here when we save this
29:33 - file and TR running this code now as you
29:35 - can see class list is getting printed so
29:38 - this is of data type that is list over
29:40 - here similarly we have tle and set as
29:43 - well which we are going to see in the
29:44 - upcoming videos what are the different
29:46 - contents of these data types and how do
29:48 - we use them and when do we use them so
29:50 - guys for now you just need to remember
29:52 - that whatever value that we provide to a
29:54 - particular variable automatically that
29:56 - data type will will be assigned to that
29:58 - particular variable python type
30:00 - conversion basically we are going to
30:02 - learn about converting data types of
30:04 - variables so type conversion is the
30:06 - process of converting data of one type
30:09 - to another so for example converting
30:12 - string data to integer so guys it can so
30:15 - happen that you have got a number in the
30:17 - form of a string and before you add it
30:20 - to another number you need to convert
30:22 - that string data type to the integer
30:24 - data type so how do we do that by using
30:27 - the python type conversion so basically
30:29 - there are two types of type conversion
30:31 - in the python the implicit conversion
30:33 - which is automatically done so this is
30:35 - automatic type conversion so basically
30:38 - when this automatic type conversion
30:39 - happens is whenever you are converting
30:42 - from a data type that is of small size
30:45 - to the larger size let's say integer
30:47 - data type it takes four bbes as the
30:50 - memory but the float it takes 8 bytes as
30:53 - the memory so what will happen is over
30:55 - here whenever you are are going to add
30:58 - integer along with the float the result
31:01 - will be stored in the float itself
31:03 - that's because you are going from the
31:04 - integer that is having the lower size to
31:07 - the float data type which is having the
31:08 - larger size over here so guys in that
31:11 - case automatic type conversion happens
31:13 - in order to avoid the data loss and
31:15 - there is another type of conversion that
31:17 - is explicit conversion in which you have
31:19 - to convert the data types manually so
31:21 - this is also called manual type
31:23 - conversion so guys over here what you
31:25 - have to do is you have to type cast from
31:28 - one data type to another so we will
31:30 - check that with the help of examples as
31:32 - well so first of all we will check the
31:33 - implicit conversion so as you can see
31:35 - this is the example that is example one
31:38 - we have the integer number is 123 but
31:41 - the float number is 1.23 so this float
31:43 - number is having decimal but this
31:45 - integer number is not having decimal and
31:47 - then the new number which is going to
31:49 - add both the numbers that is integer
31:51 - number and the float number but guys
31:53 - this is the integer and this is the
31:55 - float so what should be the result let
31:57 - us check this with the help of our
31:58 - python code execution so I'll just copy
32:01 - these lines of code over here and then
32:03 - I'll paste this over here guys what I
32:05 - will do is I'll simply hide this section
32:07 - which is the Explorer section because we
32:09 - are going to write all the programs in
32:11 - the same file over here so when we save
32:13 - this file and then when we try running
32:15 - this code nothing will happen guys
32:17 - that's because what we have done is we
32:19 - have initialized the integer number we
32:21 - have initialized the float number as
32:23 - well and what we are doing is we are
32:24 - just adding both the numbers and we are
32:27 - assigning the result in the new number
32:29 - but we are not printing anything so we
32:31 - are supposed to print something over
32:32 - here what we will do is we will print
32:35 - and first of all what do we print let us
32:37 - say we want to find the type of this
32:39 - variable that is new number so we can
32:41 - simply provide type function and then
32:43 - inside this we will provide the new
32:45 - number over here that is the name of the
32:47 - variable and then what we will be doing
32:49 - is we will print the value of this new
32:52 - number so we will simply have another
32:54 - print statement and we will say new
32:56 - number over here so first of all we will
32:58 - get the type so that we will come to
33:00 - know what data type is being assigned to
33:02 - this new number that's because we are
33:04 - adding an integer number and the float
33:06 - number together so let me just save this
33:08 - file and try running this code now so as
33:10 - you can see class float so this proves
33:13 - that float is being stored over here in
33:15 - the new number that's because when we
33:17 - add an integer and the float number the
33:20 - highest data type that is the float
33:22 - number will be assigned to this result
33:24 - number that is the new number over here
33:26 - so that is why type of new number is
33:27 - being displayed as flow and what will be
33:29 - the result of this addition 123 + 1.23
33:33 - it is giving us the result as
33:36 - 12423 which is being displayed by using
33:38 - this line of code over here wherein we
33:40 - are printing this new number variable
33:43 - the value of this new number will be
33:44 - displayed now guys coming to next
33:46 - example as you can see example two we
33:49 - have the number string but this is of
33:51 - the string data type why so because we
33:53 - have provided this number inside the
33:55 - single codes over here here as I have
33:57 - told you whenever we are providing the
33:59 - single quote or the double quote the
34:01 - value inside those quotes are treated as
34:04 - the string and then we have another
34:06 - variable that is num integer and this is
34:08 - the simple number so this number is
34:10 - going to be treated as an integer but
34:12 - what happens when we add both these
34:14 - numbers over here that is new integer
34:16 - since this is the integer type so
34:18 - nothing will happen over here but num
34:20 - string so basically this is of the
34:21 - string data type and we cannot add a
34:24 - string to the integer we are using the
34:26 - plus operator in order to add the two
34:28 - numbers over here since num integer is a
34:30 - number over here so guys let us check
34:32 - what happens I'll just copy these lines
34:34 - of code and paste this over here and
34:37 - what we will do is we will simply print
34:39 - the value of this Num Sum so over here
34:42 - we have num underscore sum over here
34:45 - that is the result variable let me just
34:47 - save this file and try running this code
34:48 - now so as you can see it is giving us
34:50 - some error Num Sum It is equal to so
34:52 - this expression is being printed over
34:54 - here and we are getting the message as
34:56 - type error unsupported operand type for
35:00 - plus that is integer and string so what
35:02 - it is saying is this plus operator it is
35:05 - having unsupported operants now what are
35:07 - the unsupported operants the first
35:09 - operant is integer which it is showing
35:11 - over here as int and the second one is
35:13 - Str Str which is string over here so
35:15 - guys what we are supposed to do is we
35:17 - are supposed to convert the string to
35:19 - the integer this num integer is already
35:21 - of the integer data type but this num
35:24 - string is not of the integer data type
35:26 - and that is why we are getting this
35:27 - error so guys how do we convert this num
35:30 - string to the integer data type we
35:32 - simply have to provide this variable
35:34 - that is num string inside the open and
35:37 - close parenthesis and before this
35:39 - parenthesis we simply have to provide
35:41 - the data type to which we need to
35:43 - convert this num string to that is the
35:45 - integer so we simply provide int that is
35:48 - the integer data type so as you can see
35:50 - this is the format we have first
35:52 - enclosed this variable that is num
35:54 - string inside the open and close par
35:56 - parenthesis and then we have provide int
35:59 - before this open parenthesis over here
36:01 - and this is how this num string will be
36:03 - converted to the integer data type so
36:05 - the value will be 12 over here and this
36:07 - num integer is having the value as 23
36:10 - which is again the integer and the sum
36:12 - will be stored in this num suum so let
36:14 - me just save this file ENT running this
36:16 - code now so as you can see 35 is being
36:18 - displayed over here because 23 + 12 is
36:22 - 35 and that is what we are getting over
36:24 - here so guys this is the manual type
36:26 - conversion so whenever we are coming
36:28 - from a data type that is having the high
36:30 - memory to a low memory such as the
36:33 - string to the integer we are supposed to
36:35 - do a manual type conversion and that is
36:37 - what we have done over here so Guys
36:39 - these were the two examples as far as
36:41 - automatic and manual type conversions
36:43 - are concerned which are also called
36:44 - implicit and explicit conversion
36:47 - wherever possible python will
36:48 - automatically convert the data types of
36:50 - the variables but wherever it is not
36:52 - possible it will give you the warning at
36:54 - least or else it will give you the error
36:56 - while you are running your Python
36:58 - program so basic input and output in
37:00 - Python Programming so guys in this
37:02 - tutorial we will learn simple ways to
37:04 - display output to the users and take
37:07 - input from users in Python with the help
37:09 - of examples now guys as we have seen
37:11 - previously in Python we can simply use
37:14 - the print function to print the output
37:16 - so let us check this with the help of
37:18 - example over here so I simply want to
37:20 - print a statement so let's say I want to
37:22 - print programming for beginners that is
37:25 - the name of this YouTube channel Channel
37:27 - which you should definitely subscribe if
37:28 - you have not subscribed it yet so once
37:31 - we provide the string inside the double
37:33 - codes we can simply save this file and
37:35 - try running this code now so on the
37:37 - terminal we will be able to see this
37:39 - string getting printed that is
37:40 - programming for beginners I have missed
37:42 - out an O character over here so this is
37:45 - the correct string so programming for
37:46 - beginners is the string that we want to
37:48 - print and that is what we have got over
37:50 - here in the terminal now guys even with
37:52 - this print function over here this is a
37:54 - function and it takes certain parameter
37:57 - so parameters are nothing but certain
37:58 - values that you can provide to the
38:00 - function so as you can see the actual
38:02 - syntax of the print function accepts
38:05 - five parameters so basically we have
38:07 - only provided one parameter over here
38:09 - this can be treated as a parameter that
38:11 - is the value that we want to print now
38:13 - apart from this we also have other
38:15 - parameters as well so object is the
38:17 - parameter which is nothing but the value
38:19 - to be printed apart from that we have
38:21 - separator then we have end parameter
38:24 - file and then flush parameter so these
38:26 - are the five parameters and these are
38:28 - the descriptions of each and every
38:30 - parameter so over here the separator
38:32 - which is an optional parameter since we
38:34 - have not provided any separator over
38:36 - here it allows us to separate multiple
38:39 - objects inside print so let's say after
38:42 - this string I want to provide another
38:43 - number over here so let's say 1 2 3 4 is
38:46 - the number that I want to provide now I
38:48 - want these objects that is one is
38:50 - programming for beginners which is a
38:51 - string and another object that is a
38:53 - number to be separated using commas so
38:56 - what we we will do is after providing
38:58 - comma we will use the SCP that is
39:00 - another parameter as you can see vs code
39:03 - is providing us the auto completion
39:04 - feature over here so we just need to
39:06 - select that and then we need to provide
39:09 - single codes and inside this we provide
39:12 - comma followed by the space character so
39:14 - guys what will happen is all the objects
39:16 - will be separated by using this comma
39:18 - and the space character over here it
39:20 - depends on your requirement how many
39:22 - objects you want to provide inside this
39:24 - print statement so let me just save this
39:26 - file try running this code now so as you
39:28 - can see programming for beginners and
39:30 - then we have this comma followed by the
39:32 - space character and then we have this 1
39:34 - 2 3 4 object being printed over here we
39:37 - can have another object so let's say I
39:39 - provide another string that is another
39:42 - statement over here so let me just save
39:44 - this file Ander try running this code
39:45 - now so we are getting an error invalid
39:47 - syntax perhaps you forgot a comma so
39:50 - basically after providing each and every
39:52 - object we have to separate it using the
39:54 - comma over here and then let me just
39:56 - save this file ENT I running this code
39:58 - now so as you can see programming for
39:59 - beginners followed by comma and then we
40:01 - have space characters and then we have 1
40:03 - 2 3 4 again we have comma and then space
40:06 - character and then we have another
40:07 - statement so guys in this way we can use
40:09 - the separator parameter as well in order
40:12 - to separate the different objects inside
40:14 - the print function now going to next
40:16 - parameter which is end over here which
40:18 - is again optional by default it is the
40:20 - Slash and character in which case the
40:22 - control flow goes to the next line
40:24 - Whenever there is another object that is
40:26 - getting printed over here so as you can
40:28 - see it allows us to add specific values
40:30 - like new line or tab character so guys
40:33 - let's say we have this print function
40:35 - over here I'll just remove this part of
40:37 - the line over here and let's say I have
40:39 - another print function in which case I
40:41 - am providing another statement so let's
40:43 - say we have another statement over here
40:46 - so guys what will happen is by default
40:48 - this end parameter is having the Slash
40:50 - and character which means the control
40:52 - flow should go to the new line Whenever
40:54 - there is a next print state statement
40:56 - that is encountered so let me just save
40:58 - this file and try running this code now
41:00 - so as you can see programming for
41:01 - beginner string is getting printed in
41:03 - first line and on the second line
41:05 - another statement is getting printed now
41:07 - what if we want both these statements to
41:09 - be printed on the same line but they are
41:12 - present in the different print function
41:14 - so what we will have to do is in the
41:16 - first print function I will provide a
41:18 - comma over here and then we have the end
41:21 - parameter so as you can see this end
41:23 - parameter we have to select and then
41:25 - inside the double course I'll simply
41:27 - provide the full stop followed by the
41:29 - space character so guys what is
41:30 - happening over here is after the string
41:33 - is getting printed at the end of the
41:35 - line we are providing this full stop and
41:37 - then followed by the space character and
41:39 - then whenever there is a next string
41:41 - that is encountered by the control flow
41:43 - it will get printed on the same line so
41:45 - let me just save this file and try
41:47 - running this code now so as you can see
41:49 - programming for beginners and then we
41:51 - have a full stop and then we have the
41:52 - space character as well and then we have
41:54 - another statement that is getting
41:56 - printed so guys we can also use this end
41:59 - parameter if we want multiple print
42:01 - functions to be used but all the objects
42:04 - need to be printed on the same line the
42:06 - other two parameters are file which is
42:08 - again optional where the values are
42:10 - printed so basically by default the
42:12 - values are printed on the screen and
42:14 - that is why its default value is system.
42:17 - STD out which means it should print on
42:19 - the screen you can also provide some
42:21 - file path over here so that the content
42:24 - can be written in the file apart from
42:25 - that we also have the flush which is
42:27 - again an optional parameter it is a
42:29 - Boolean specifying if the output is
42:31 - flushed or buffered so by default it is
42:33 - having the false value so Guys these two
42:35 - parameters you can practice on your own
42:37 - as a homework for you apart from that
42:39 - guys it is very important that how do
42:41 - you take input from the user in Python
42:44 - Programming so basically while
42:46 - programming we might want to take the
42:48 - input from the user in Python we can use
42:51 - the input function so as you can see we
42:53 - have a variable over here or we can say
42:55 - ident identifier it is equal to we have
42:58 - used the input function so guys this
43:00 - input function it will take a parameter
43:03 - which will be kind of a label which will
43:04 - be printed on the screen for the user as
43:07 - a instruction so we are asking the user
43:09 - to enter a number and the number that
43:11 - will be entered by the user will be
43:13 - stored in this numb variable over here
43:16 - so guys let us check this with the help
43:17 - of example now I'll just remove these
43:19 - lines of code so what we have to do is
43:22 - let's say we provide the number variable
43:24 - it is equal to we have to use the input
43:26 - function as you can see this is the
43:28 - function that is being suggested by the
43:30 - VSS code over here and then using the
43:32 - open and close parenthesis inside this
43:35 - we have to provide a string inside the
43:37 - double codes so we can simply provide
43:39 - enter a number now this is a instruction
43:42 - to the user to enter the number now guys
43:44 - what we can do is we can print this
43:46 - number now we can easily print this by
43:48 - using a string so let's say we provide
43:50 - the string over here that is
43:52 - entered number is and Then followed by
43:56 - by colon and then after this object we
43:58 - have to provide a comma and then we can
44:00 - provide the number variable to be
44:02 - printed so we have provided the number
44:04 - variable over here let me just save this
44:06 - file andent try running this code now so
44:08 - as you can see it is asking the user
44:10 - over here to enter a number so what I
44:12 - will provide is simply I will provide 10
44:14 - as the number and then when I press
44:16 - enter as you can see entered number is
44:19 - 10 so this string is getting printed
44:22 - along with the number that is being
44:23 - entered by the user now guys it is very
44:25 - important important to note that
44:27 - whenever we are using this input
44:28 - function the input that is taken by the
44:31 - user will be of the type string over
44:33 - here so if we print the type of this
44:35 - number variable over here let me just do
44:38 - that so we simply provide data type of
44:42 - number colon and then what we have to do
44:44 - is after comma we have to use the type
44:47 - function and inside this function we
44:49 - have to provide the number variable let
44:51 - me just save this file enter I running
44:53 - this code now enter a number so let's
44:55 - say I provide 10 as the number as you
44:57 - can see enter number is 10 and after
44:59 - this data type of number it is class
45:02 - string so this is of string data type so
45:05 - whatever input is being taken from the
45:07 - user it will be stored as a string so
45:10 - what we have to do is we have to convert
45:12 - it into a number now since this is a
45:14 - string we cannot add another number to
45:16 - this particular number so let's say if
45:17 - we try to add some another number over
45:20 - here so we simply do number + 5 over
45:22 - here let me just save this file enter I
45:24 - running this code now so when we provide
45:27 - 10 as the number when I press enter as
45:30 - you can see it says can only concatenate
45:32 - string not end that's because we are
45:34 - trying to concatenate a string with a
45:37 - number over here that is the integer so
45:39 - what we have to do is we have to convert
45:42 - this input into an integer so we can
45:45 - simply provide int over here and then
45:47 - the entire input function needs to be
45:49 - inclosed within the open and close
45:51 - parenthesis so guys this we had seen
45:53 - previously as well this is the explicit
45:55 - type type conversion over here which is
45:57 - the manual type conversion in which we
45:59 - are converting the string data type to
46:01 - the integer data type and now we will
46:03 - have the integer over here which can
46:05 - simply be added with another integer so
46:07 - let me just save this file and try
46:09 - running this code now so as you can see
46:11 - enter a number this time let's say I
46:13 - provide 15 as the number and then when I
46:15 - press enter as you can see entered
46:17 - number is so what is happening is this
46:20 - number that is 15 was taken and then
46:22 - five was added to this number and that
46:24 - is why 15 + 5 is 20 and this number is
46:27 - getting printed over here and you can
46:29 - see this data type of number now it is
46:31 - of the type integer that's because we
46:34 - have used the type conversion over here
46:36 - so guys this is the way you can take
46:37 - input from the user make sure that
46:39 - whenever you're using the input function
46:42 - the data that is being entered by the
46:44 - user is of the type string and you need
46:46 - to convert it into the appropriate data
46:48 - type before you can use the other
46:50 - operators arithmetic operators in Python
46:53 - Programming so guys arithmetic operators
46:55 - I used to perform mathematical
46:57 - operations like addition subtraction
47:00 - multiplication and many other operations
47:02 - which can be done using the integers or
47:05 - the numbers in Python so guys for
47:07 - example let's say we provide the print
47:09 - function over here and inside this
47:11 - function we provide 5 + 6 as the
47:13 - parameter so what will happen is the
47:15 - plus operator is being used over here in
47:17 - order to add these two numbers that is
47:19 - five and six and the result that is 11
47:22 - will be printed so let us quickly check
47:24 - this with the help of example over here
47:26 - so what we will do is we will use the
47:27 - print function and inside this
47:29 - parenthesis we will simply provide 5 + 6
47:33 - over here and when we just save this
47:34 - file and try running this code now so as
47:37 - you can see 11 is getting printed so
47:39 - guys what we have done over here is we
47:40 - have simply used the plus operator in
47:43 - order to add two numbers we can also do
47:45 - this by using the variables as well so
47:48 - let's say we provide numb one it is
47:50 - equal to 10 and let's say we provide num
47:52 - two it is equal to 20 and then let's say
47:55 - I I provide sum it is equal to num 1
47:59 - plus num 2 over here so guys basically
48:02 - once again we have used this plus
48:03 - operator in order to add two numbers
48:06 - that is num one and num two for which
48:08 - the values are 10 and 20 respectively
48:11 - and the result will be stored in this
48:12 - sum and when we provide this sum inside
48:15 - the print statement we will get that
48:17 - result so let me just save this file and
48:19 - try running this code now so as you can
48:21 - see 30 is getting printed that is a sum
48:23 - of 10 + 20 over here so guys this is one
48:26 - of the arithmetic operator that is plus
48:28 - is being used in order to add the two
48:30 - numbers apart from this addition we have
48:33 - other operators as well as you can see
48:35 - subtraction we have in which the two
48:37 - numbers can be subtracted so over here 4
48:39 - - 2 it is equal to 2 so over here minus
48:42 - operator is being used we have
48:44 - multiplication as well in which multiply
48:47 - operator is used in order to multiply
48:49 - two numbers we have division as well in
48:52 - order to divide the two numbers so as
48:54 - you can see 4 divided by 2 it is equal
48:56 - to 2 so we are getting the quotient over
48:58 - here and we have the modular operator as
49:01 - well which can be used by using this
49:03 - person operator so guys what happens is
49:05 - 5 person 2 what this will do is it will
49:08 - divide the number on the left hand side
49:10 - that is five by the number on right hand
49:12 - side that is 2 so 5 / 2 it will give us
49:15 - the quotient as two but the remainder
49:17 - will be one and we will be getting the
49:19 - remainder of this operation that is one
49:21 - over here and similarly we have power
49:23 - operator as well so as we can see four
49:25 - and then 2 * multiplication symbol over
49:28 - here which is the power symbol and then
49:30 - two which means 4 * 4 will be done which
49:33 - is equal to 16 so basically this is
49:35 - nothing but the square of the number in
49:37 - this case it is the square of this
49:39 - number that is four so guys let us check
49:41 - all these operators with the help of
49:43 - examples over here so what we will do is
49:45 - first of all we will print and add two
49:48 - numbers so let's say we provide 10 as
49:50 - first number and 20 as the second number
49:52 - so this is the addition of two numbers
49:54 - let's say we want want to subtract two
49:56 - numbers over here and the two numbers
49:58 - are let's say 20 and then minus what we
50:00 - do is we will minus 15 over here let's
50:03 - say the third expression is
50:05 - multiplication so I will simply provide
50:07 - five as the number multiplied by seven
50:09 - as another number the next operator is
50:11 - the Divide operator so let's say I
50:13 - provide the print statement over here
50:15 - and we provide 50 as one number divided
50:18 - by 10 as another number and then we have
50:21 - another print statement let's say we
50:23 - want to find the remainder after
50:25 - dividing two numbers so let's say 40 is
50:28 - one number and then we provide
50:30 - percentage sign and then we provide 15
50:33 - as the second number and then the last
50:35 - operator that is the power operator I
50:37 - simply provide five s the number and
50:39 - then two times multiplication over here
50:41 - which means power and then I provide two
50:44 - is the second number so guys let me just
50:45 - save this file and try running this code
50:48 - we will check the results of all these
50:49 - operations over here so as you can see
50:51 - the first print statement that is 10 +
50:53 - 20 it is providing us 30 as the result
50:56 - and this is the correct result over here
50:58 - 20 - 15 should be 5 and that is what we
51:00 - are getting over here as 5 and then 5 *
51:04 - 7 it is equal to 35 and we are getting
51:06 - 35 over here then 50 divided 10 should
51:09 - give us the quotient that is 5 and we
51:11 - are getting 5.0 over here and then 40%
51:15 - 15 which means 40 is divided by 15 and
51:18 - then what is the remainder is getting
51:20 - returned to this print function and 10
51:22 - is getting returned why 40 ID 15 the
51:26 - quotient will be 2 that is 15 * 2 is 30
51:29 - but the remaining number will be 10
51:31 - which will be the remainder and that is
51:33 - what we are getting over here as the 10
51:35 - as the remainder and then 5 power 2
51:37 - which means 5 * 5 is done over here and
51:40 - 5 * 5 is 25 and that is what we are
51:43 - getting over here so Guys these are
51:45 - certain arithmetic operators that you
51:47 - can use which include addition
51:49 - subtraction multiplication division and
51:52 - then finding the remainder of the two
51:54 - numbers by dividing them them and then
51:56 - we can also find the power of the number
51:58 - so guys you can use them based on your
52:00 - requirements assignment operators in
52:02 - Python Programming so guys the
52:04 - assignment operators are used to assign
52:06 - values to variables so as you can see in
52:08 - this example the number variable is
52:10 - assigned the value that is five so this
52:12 - is the assignment operator that is equal
52:14 - to over here apart from that we have
52:17 - other operators as well so as you can
52:19 - see this is the assignment operator that
52:21 - is used in order to assign some value to
52:23 - a particular variable we also have
52:25 - addition assignment in which we use the
52:28 - plus operator first followed by the
52:30 - equal to symbol so guys what exactly
52:32 - happens over here is let's say if we
52:34 - provide this expression over here that
52:36 - is a and Then followed by plus symbol
52:38 - and then equal to operator and Then
52:40 - followed by this value that is 1 so this
52:43 - is nothing but it is the expression that
52:45 - is a equal to a + 1 so basically 1 is
52:48 - getting added to this variable that is a
52:51 - and then it is getting stored in the
52:52 - same variable that is a so guys let us
52:54 - check the this with the help of example
52:56 - over here so first of all I will provide
52:58 - the number variable and we will provide
53:01 - a value that is five over here so this
53:03 - is a simple assignment operator we can
53:05 - simply use the print function in order
53:08 - to print this number so when we provide
53:10 - number as the parameter to this print
53:12 - function and when we just save this file
53:14 - and try running this code now so as you
53:16 - can see on the terminal five is getting
53:18 - printed that is the value of this number
53:20 - now let's say we want to add 10 to this
53:23 - number so we can do this in two ways so
53:25 - first of all we can simply use the plus
53:27 - operator that we had seen previously so
53:29 - number equal to number followed by plus
53:32 - operator and then 10 so guys this is one
53:34 - of the arithmetic operators that we had
53:36 - seen previously that is used in order to
53:39 - add two numbers so number + 10 in this
53:42 - case it will be 5 + 10 that is 15 and 15
53:45 - will get assigned to this number and it
53:47 - will be printed by using this line of
53:49 - code over here let me just save this
53:50 - file and try running this code now so as
53:52 - you can see 15 is getting printed now
53:55 - guys there is another way in order to
53:57 - add this 10 to this number so we will
53:59 - simply remove this part of the code over
54:01 - here and then what we have to do is we
54:03 - have to provide number followed by plus
54:05 - operator and then equal to operator and
54:08 - then the number that we want to add to
54:10 - this number that is 10 so guys what is
54:12 - happening over here is this is the
54:14 - shorthand method for the same expression
54:16 - that we had written previously so it is
54:18 - equal to number equal to number + 10 so
54:23 - guys this is the expression that is work
54:25 - looking over here behind the scenes and
54:27 - 10 is getting added to this number and
54:29 - the result is getting stored in this
54:31 - number variable itself let me just save
54:33 - this file and try running this code now
54:35 - so as you can see 15 is getting printed
54:37 - over here guys this is nothing but a
54:39 - comment that we have provided I can just
54:41 - remove this part over here and let's say
54:43 - I want to add 15 now so we provide 15 as
54:47 - the number so 5 + 15 should be 20 let me
54:49 - just save this file and try running this
54:51 - code now so as you can see 20 is getting
54:53 - printed and this is how we can use one
54:55 - of the assignment operators in order to
54:58 - add two numbers let us move to another
55:00 - assignment operator we have the
55:01 - subtraction assignment as well in which
55:04 - case we have to use minus operator
55:06 - followed by equal to symbol in which
55:08 - case this expression will get computed
55:10 - that is a it is equal to a minus 3 in
55:13 - this case when we provide a minus
55:15 - operator followed by equal to operator
55:17 - and then 3 similarly we have
55:19 - multiplication assignment in which
55:21 - multiply and equal to are used in
55:23 - combination we have division assignment
55:25 - as well in which case divide and equal
55:27 - to is used remainder assignment in which
55:30 - case this percent sign is used along
55:32 - with the equal to symbol and exponent
55:34 - assignment as well in which case the two
55:37 - times multiplication symbol is used and
55:39 - then equal to operator is used in order
55:41 - to compute the power of the numbers so
55:43 - guys let us check the remaining
55:45 - assignment operators with the help of
55:46 - examples over here so what we have to do
55:49 - is the number variable is already five
55:51 - and to this number we can simply change
55:53 - the assignment operators so so let's say
55:55 - I want to subtract some number over here
55:57 - so what we will do is number then minus
56:00 - equal to operator let's say I want to
56:02 - remove two from this number so it is
56:04 - nothing but 5 - 2 in which case the
56:07 - answer should be three so let me just
56:08 - save this file and try running this code
56:10 - now so as you can see three is getting
56:12 - printed if I want to multiply this
56:14 - number so I'll simply replace this minus
56:17 - by multiplication symbol and let's say I
56:19 - provide four over here as the number so
56:22 - this should be 5 * 4 let us check what
56:24 - will be the result so 5 * 4 is 20 in
56:27 - this case let's say I want to use the
56:29 - Divide operator so we can simply use the
56:32 - divide and then equal to symbol and
56:34 - let's say I provide the number over here
56:36 - as three so let me just save this file
56:38 - and try running this code now so 5
56:40 - divided by 3 will give us 1.66 as the
56:43 - result and that is what we are getting
56:45 - over here now guys similarly let's say I
56:47 - want to find the remainder while we
56:49 - divide five by three over here so we
56:51 - simply have to replace this divide
56:53 - Operator by the person operator over
56:55 - here and let me just save this file ENT
56:57 - running this code now so 5 / 3 the
57:00 - quotient will be 1 in this case and the
57:02 - remainder will be two in case we don't
57:04 - want the decimal output over here so two
57:07 - is the remainder and that is what we are
57:09 - getting over here and the last operator
57:11 - that is the exponent operator over here
57:13 - so we simply provide the multiplication
57:15 - symbol two times and then equal to
57:17 - operator and then let's say we provide
57:19 - two over here so this is nothing but 5 *
57:22 - 5 that is the square of the number that
57:25 - is five let me just save this file and
57:27 - try running this code now so it is 25
57:29 - over here if you provide this as three
57:31 - so what will happen is five will be
57:33 - multiplied by the same number that is
57:35 - five three times over here so let me
57:37 - just save this file and running this
57:38 - code now so as you can see 5 multiplied
57:40 - by 5 is 25 and then 25 multiplied by 5
57:44 - again will give us 125 as the result and
57:46 - guys this is how we can use the
57:48 - assignment operators based on our
57:50 - requirements as the shorthand methods in
57:53 - order to carry out the mathematical
57:55 - operations on the numbers comparison
57:58 - operators in Python Programming so guys
58:00 - the comparison operators compare two
58:02 - values or the variables and return a
58:05 - Boolean result that can be a true or a
58:07 - false value so let's say for example as
58:10 - you can see we have two variables over
58:12 - here that is a is equal to 3 and b is
58:15 - equal to 5 so when we print this
58:17 - statement and inside this we have a
58:19 - comparison operator that is greater than
58:21 - operator over here that is a greater
58:24 - than b so what is happening behind the
58:26 - scenes is there is a check whether this
58:28 - variable that is a is it greater than b
58:31 - so if we see 3 is not greater than 5
58:34 - over here in which case the return value
58:36 - will be false over here but in case when
58:38 - the value of a is greater than b then
58:41 - this particular expression that a is
58:43 - greater than b will return us True Value
58:45 - so guys let us check this with the help
58:47 - of example over here so let's say we
58:49 - have the variable a it is equal to 3 and
58:51 - the variable B it is equal to 5 and then
58:54 - when we we have this comparison operator
58:56 - over here we use the print statement we
58:58 - say a greater than b so guys this
59:01 - particular operator is the greater than
59:04 - symbol over here which can be treated as
59:06 - the comparison operator in order to
59:08 - compare the two variables or the two
59:10 - numbers as well so let me just save this
59:12 - file and try running this code now so as
59:15 - you can see we are getting false as the
59:16 - result that's because the value of a is
59:19 - three and the value of B is 5 in which
59:21 - case a is not greater than b and that is
59:24 - why we are getting false over here guys
59:26 - similarly we have other comparison
59:28 - operators as well as you can see we have
59:31 - is equal to so basically 3 equal to
59:34 - equal to 5 no in this case because both
59:36 - these numbers are not equal so that is
59:38 - why this expression will give us the
59:40 - result as false over here similarly we
59:42 - have not equal to in which case it will
59:45 - give us true that's because the two
59:46 - numbers are not equal so we use the
59:49 - exclamation mark followed by the equal
59:51 - operator in order to check the not equal
59:53 - to expression and then we have the
59:55 - greater than sign as we have seen just
59:57 - now greater than symbol similarly we
59:59 - have less than symbol over here so this
60:01 - less than symbol will give us true over
60:03 - here that's because 3 is less than 5 and
60:05 - we also have greater than or equal to so
60:08 - guys basically what happens is let's say
60:10 - if the value of a and b both are three
60:12 - so basically is three greater than three
60:15 - no in this case so false will be
60:17 - returned but when we provide greater
60:19 - than or equal to which means we are
60:21 - checking that the two variables should
60:23 - be at least equal or greater than so in
60:26 - that case when both the values are three
60:29 - so 3 greater than or equal to three will
60:31 - give us true in this case similarly we
60:33 - will have less than or equal to symbol
60:36 - as the less than symbol and equal to
60:38 - symbol combination so guys let us check
60:40 - all these with the help of examples over
60:42 - here so we have checked the greater than
60:44 - symbol over here let us check the less
60:46 - than symbol so we will simply provide
60:48 - print a less than b over here which
60:51 - should return us true in this case
60:53 - that's because the value of of a is
60:55 - actually less than the value of B over
60:57 - here let me just save this file and try
60:59 - running this code now so as you can see
61:01 - first expression is false that's because
61:03 - a greater than b no in this case but is
61:05 - a less than b yes in this case and that
61:08 - is why we are getting true over here let
61:09 - us check some more comparison operators
61:12 - over here we provide the print statement
61:14 - is a equal to B over here and then let
61:17 - us provide another operator that is a
61:20 - not equal to B in this case and then we
61:23 - have another operator that is a less
61:26 - than or equal to B and then we have
61:28 - another operator that is a greater than
61:31 - or equal to B in this case so guys we
61:33 - have provided all the comparison
61:35 - operators over here let me just save
61:36 - this file and try running this code now
61:38 - so as you can see these are the results
61:40 - over here so the first result is false
61:42 - that's because a is not greater than b a
61:45 - is less than b yes in this case so that
61:47 - is why we are getting true over here is
61:49 - a equal to B no in this case because 3
61:51 - is not equal to 5 so we are getting
61:53 - false as the result then is a not equal
61:57 - to B yes both numbers are not equal and
61:59 - that is why we are getting true over
62:01 - here is a less than or equal to B so is
62:04 - 3 less than or equal to B yes in this
62:06 - case so that is why we are getting true
62:08 - and is a greater than or equal to B no
62:11 - in this case and that is why we are
62:13 - getting false over here now guys let us
62:15 - see what happens when B is also equal to
62:18 - a so we have provided both the values as
62:20 - three over here let me just save this
62:22 - file and try running this code now as
62:24 - you can see we are getting the results
62:25 - over here so the first result is false
62:28 - that's because is a greater than b no in
62:31 - this case they are equal and then the
62:33 - second result is also false is a less
62:35 - than b no in this case both are false
62:37 - over here so Guys these are false that's
62:40 - because we are not checking whether they
62:41 - are equal or not but in the last two
62:44 - operators as you can see over here the
62:46 - last two results are true that's because
62:48 - we have included the equal to symbol so
62:50 - a less than or equal to B yes in this
62:53 - case that's because a is equal to B and
62:55 - is a greater than or equal to B yes in
62:58 - this case since a is actually equal to B
63:01 - so both these operators will return us
63:02 - true whereas both these operators will
63:05 - return us false whenever both the
63:06 - numbers that we are comparing have the
63:08 - same value now guys apart from this the
63:10 - third operator that is a is equal to B
63:13 - yes in this case and that is why we are
63:14 - getting true over here and is a not
63:16 - equal to B no in this case since A and B
63:19 - both are equal so this will return as
63:21 - false and that is what we are getting
63:23 - over here so Guys these are certain
63:24 - comparison operators that you will be
63:26 - using in the upcoming videos as well
63:29 - when we are going to check the if else
63:31 - statement and we will also be using the
63:33 - V loop as well in which case we have to
63:35 - use these comparison operators to go
63:37 - inside the loop or else to come out of
63:40 - the loop logical operators in Python
63:42 - Programming so guys The Logical
63:44 - operators are used to check whether an
63:46 - expression is true or false so they are
63:49 - used in decision making so as you can
63:51 - see for example let's say the value of
63:53 - variable that is a is equal to 5 and the
63:56 - value of B variable is 6 over here and
63:59 - we have the print statement over here
64:01 - and there are two conditions that we are
64:03 - checking first of all whether a is
64:05 - greater than two so in this case the
64:07 - return will be true over here that's
64:09 - because the value of a that is five is
64:11 - actually greater than two over here and
64:13 - then as you can see this end keyword
64:16 - this is nothing but this is one of the
64:17 - logical operators it is being used in
64:20 - order to check the multiple conditions
64:22 - and the second condition that is being
64:23 - checked over here is whether B is
64:26 - greater than or equal to 6 so in this
64:28 - case since B is equal to 6 so yes in
64:30 - this case it is also true so basically
64:33 - since both the Expressions over here
64:34 - that is the second expression and the
64:36 - first expression is true and because
64:38 - this end logical wants all the
64:41 - Expressions to be true the return for
64:43 - the entire expression will be true over
64:45 - here so as you can see these are certain
64:47 - logical operators over here first of all
64:49 - we have the end operator which means A
64:51 - and B it is true only if both the the
64:54 - oper that is a and b are true over here
64:56 - similarly we have r as well so as you
64:59 - can see A or B in this case only one
65:01 - oper needs to be true that is only one
65:04 - condition needs to be true over here so
65:06 - this will be true if at least one of the
65:08 - operant is true and then we also have
65:10 - the not operator in which case we can
65:12 - use it as not a so it will be true if
65:15 - the operant is false and it will be
65:17 - false when operant is true over here so
65:19 - guys let us check all this with the help
65:21 - of examples over here so let's say we
65:23 - have the variable that is a is equal to
65:26 - 5 and B it is equal to 6 over here so we
65:29 - simply have the print statement and
65:31 - let's say we provide the condition that
65:33 - is a is it greater than two over here
65:36 - and we also have another condition so
65:38 - using the end logical operator over here
65:41 - we can combine multiple conditions so
65:43 - next time we will be checking whether B
65:45 - is greater than or equal to 6 so guys in
65:48 - this case both these conditions that is
65:50 - a greater than two will return as true
65:52 - and then B is greater than or equal to 6
65:54 - will also return as true so this entire
65:57 - expression will be true over here so let
65:59 - me just save this file and try running
66:00 - this code now so as you can see true is
66:03 - getting returned over here now what if
66:04 - one of the conditions is false over here
66:07 - so what we have to do is let's say I
66:09 - provide a less than two in which case
66:11 - this particular expression will become
66:13 - false so let me just save this file and
66:15 - try running this code now so as you can
66:17 - see false is getting return that's
66:19 - because one of the Expressions while
66:20 - using the end logical operator is false
66:23 - over here and according to rules all the
66:25 - Expressions while using the end logical
66:28 - operator must be true in order to return
66:30 - the true as the result now guys if we
66:32 - check the same conditions that is both
66:34 - these conditions by using the or logical
66:37 - operator so we simply have to provide or
66:39 - over here and let me just save this file
66:41 - and try running this code now so as you
66:43 - can see true is getting returned that's
66:45 - because the second expression over here
66:47 - is true and the first expression over
66:49 - here is false so anyway the or logical
66:51 - operator wants one of the conditions to
66:53 - be true and that is why we are getting
66:55 - the true as the result over here what if
66:57 - we make the second condition false over
66:59 - here so let me just change this
67:01 - expression to B less than 6 over here
67:04 - let me just save this file and try
67:05 - running this code now so as you can see
67:07 - false is getting returned that's because
67:09 - is a less than 2 no in this case so
67:12 - false is getting returned over here and
67:14 - is B less than 6 over here no in this
67:16 - case it is equal to 6 so this expression
67:18 - is also false so the entire expression
67:21 - is false and that is the only
67:23 - combination where the or logical
67:25 - operator will return us the false result
67:27 - now guys when do we use this not
67:29 - operator over here so let's say I have
67:31 - just a simple expression so over here I
67:34 - will provide is a less than 4 over here
67:37 - so in this case is a less than 4 no so
67:40 - it should return false so let us save
67:41 - this file and try running this code now
67:43 - so it is returning false over here but
67:46 - what if we want the opposite of this
67:48 - result so if the result of any of the
67:50 - expression is false we want to print
67:52 - true but if the result result of any
67:54 - expression is true we want to return it
67:56 - as false so what we have to do is we
67:58 - simply have to provide not logical
68:00 - operator and the expression needs to be
68:03 - provided within the parenthesis over
68:05 - here as we can see so let me just save
68:07 - this file now so since it was returning
68:10 - false by using the not logical operator
68:12 - it should now return true so let me just
68:14 - run this code once again so it is
68:16 - returning true over here similarly if
68:18 - let's say this particular expression
68:20 - turns out to be true so we will get
68:22 - false as the result so let's say I
68:24 - provide a greater than 4 so is a for
68:27 - which the value is five over here is it
68:29 - greater than four yes in this case so
68:32 - this will return as true but since we
68:33 - are using the not logical operator it
68:36 - will return this True Result to false
68:38 - and it will be printed so let me just
68:40 - save this file and try running this code
68:42 - now so as you can see false is getting
68:44 - returned over here and it is being
68:45 - printed so Guys these are certain
68:47 - logical operators that we will be using
68:49 - in the upcoming videos as well when we
68:51 - are going to use the if else statement
68:53 - apart from that we will be also using
68:55 - the while loops and other control
68:57 - statements as well where we are going to
68:59 - use these logical operators so guys
69:01 - practice on your own so that on
69:03 - different inputs you get different
69:05 - outputs bitwise operators in Python
69:07 - Programming so guys The bitwise
69:09 - Operators act on operant as if they were
69:12 - strings of binary digits so they operate
69:15 - bit by bit hence this is the name that
69:17 - is the bitwise operator so first of all
69:19 - let us understand what are the binary
69:21 - numbers so over here for example as you
69:23 - can see the number one is being
69:25 - represented in the binary form as 0 and
69:28 - 1 now before this the number zero it
69:30 - will be represented as 0 0 that means
69:33 - the binary form can only have two types
69:36 - of digits that is either 0 or 1 so 0 can
69:39 - be represented as all numbers being zero
69:42 - then one can be represented as the
69:44 - rightmost number can become one and the
69:46 - left number is zero over here now for
69:48 - the number two what will happen is this
69:50 - number that is one over here on the
69:52 - right hand side it will go go on the
69:54 - left hand side so this zero has become
69:56 - one over here and this one will become
69:58 - zero and that is what we can see over
70:00 - here that is 1 0 it is the binary form
70:02 - of the number that is two and then the
70:04 - next time this zero will be converted to
70:06 - one so you can see 1 one is the binary
70:09 - representation of the number three and
70:11 - so on the other numbers are also being
70:13 - displayed over here in the form of
70:15 - binary representation now guys as the
70:17 - name suggest The bitwise Operators
70:19 - operate on these kinds of numbers over
70:22 - here so let's say x it is equal to 10
70:24 - which is an integer over here it will be
70:27 - represented as this number in the binary
70:29 - form and why it is equal to 4 which is
70:32 - represented as this number in the binary
70:34 - form over here it is represented as 1 0
70:38 - as you can see over here and on the left
70:40 - hand side we can prefix any number of
70:42 - zeros that we want so basically what are
70:44 - the different types of bitwise operator
70:46 - as you can see we have end over here so
70:48 - bitwise end what this will do is if we
70:50 - do x and y basically all these dig
70:53 - digits that is first zero over here it
70:55 - will be kind of multiplied with the
70:58 - first digit of this number over here so
71:00 - it will be zero in this case so first
71:02 - four digits will be zero because all the
71:04 - digits in both the numbers are zero now
71:06 - over here this one it will be multiplied
71:08 - by zero over here and that is why we
71:10 - will get zero over here in this case and
71:12 - then this zero will be multiplied by one
71:14 - over here so again we will get zero and
71:17 - since the other two numbers are already
71:18 - zero over here we will get zero so this
71:20 - is how the bitwise end operator will
71:23 - work it will simply multiply the binary
71:25 - digits of the number now what happens in
71:27 - the bitwise or it will be the addition
71:29 - of those binary numbers over here so as
71:32 - you can see we have 1 0 1 0 so 1 + 0 the
71:36 - result will be 1 over here and that is
71:38 - what is being displayed as you can see
71:40 - now 0 + 1 will be again 1 over here then
71:42 - 1 + 0 again it will be 1 over here and
71:45 - the next number that is 0 and 0 it will
71:47 - be zero over here now guys what if one
71:49 - is encountered on the left hand side and
71:51 - on the right hand side as well so since
71:53 - since binary numbers can only be
71:55 - represented by two digits that is 0 and
71:57 - 1 so 1 + 1 will be 1 in this case and
72:00 - guys similarly we will see what will be
72:02 - the result of the other bitwise
72:04 - operators so let us move to the vs code
72:06 - now over here let us say x it is equal
72:09 - to 10 and let's say y it is equal to 4
72:12 - over here and now let us print all the
72:14 - results of the bitwise operations over
72:16 - here so we will simply have the print
72:18 - function and then we will say x and then
72:21 - bitwise end operator followed by y over
72:24 - here similarly we will have other
72:25 - operators that is bitwise or and then we
72:28 - have bitwise not bitwise XR bitwise
72:31 - right shift and then we have left shift
72:33 - so over here I'll simply copy and paste
72:35 - this line of code over
72:37 - here now one by one I will change the
72:39 - operator over here it will be bitwise or
72:42 - so we use this symbol over here and for
72:44 - bitwise not we have to use only one
72:47 - variable over here so we will be using X
72:49 - in this case and this is the bitwise not
72:51 - over here for bitwise or we use the rais
72:53 - to symbol over here so X ra to Y and
72:56 - then for right shift and left shift we
72:58 - have to use the greater than symbol and
73:00 - then some particular number to Define
73:02 - how many times we want to shift the
73:04 - digit so let's say we want to shift two
73:06 - times over here and then the left shift
73:08 - as well we want to shift two times over
73:10 - here so Guys these are certain bitwise
73:12 - operators as you can see so let me just
73:14 - save this file and try running this code
73:15 - to see the results of all these bitwise
73:19 - operators so as you can see we are
73:21 - getting the results over here so for
73:23 - first of all it is displaying zero
73:24 - that's because we have seen the result
73:26 - over here which was all zero numbers and
73:28 - that is why we are getting the numerical
73:30 - number as zero over here in the next
73:32 - case that is bitwise or we are getting
73:35 - this number which is represented as 14
73:37 - in the decimal form so that is what we
73:39 - are getting that is 14 over here now not
73:42 - of X so basically not of X it is - 11
73:45 - over here and that is what we are
73:46 - getting that is1 and then X xor Y so
73:50 - over here the result is 14 and that is
73:52 - what we are getting that is 14 over here
73:54 - guys all these results are in decimal
73:56 - format if you try converting these
73:59 - decimal format numbers into binary
74:01 - numbers you will get all these results
74:03 - that are being displayed inside the
74:04 - parenthesis over here the pit wise right
74:07 - shift number so basically we are
74:08 - reducing the number so from 10 the
74:10 - number is being reduced to two over here
74:13 - as you can see this is the binary format
74:15 - and the same thing is being displayed as
74:16 - the result over here that is two and
74:18 - then when we shift on the left hand side
74:20 - we are increasing the number so
74:22 - basically we are getting the result as
74:24 - 40 from 10 so as you can see This is 40
74:27 - over here now guys in the right shift
74:28 - what happens is we are prefixing more
74:31 - zeros on the left hand side so basically
74:33 - this 1 Z will go to the right hand side
74:35 - and only this 1 Z will remain as you can
74:38 - see over here this one Z is remaining
74:40 - whereas when we do left shift after this
74:42 - 1 0 1 0 two more zeros will be appended
74:45 - and that is what we can see over here
74:47 - that is one Z and then after this one
74:49 - Zer and these two zeros were appended on
74:51 - the right and that is why the number has
74:53 - increase so Guys these bitwise operators
74:55 - are very important when you learn about
74:57 - mathematics and mathematical problems to
74:59 - be solved and as far as competitive
75:01 - programming is concerned many problems
75:03 - can be solved by using these bitwise
75:05 - operators so membership operators in
75:07 - Python Programming so guys in Python in
75:10 - and not in these are some of the
75:12 - membership operators over here and they
75:14 - are used to test whether a value or a
75:16 - variable is a found in a sequence now
75:19 - what is a sequence it can be of any data
75:21 - type it can be a string or or else it
75:23 - can be a list as well it can be a tle it
75:26 - can be a set or a dictionary so guys we
75:28 - are going to check this with the help of
75:30 - examples over here as you can see the
75:32 - operator so first operator is n this is
75:35 - one of the keywords that can be used and
75:37 - it belongs to a membership operator so
75:40 - it will be true if the value or the
75:42 - variable on the left hand side is found
75:44 - in the sequence and on the other side
75:46 - that is the opposite of n is not in over
75:49 - here and it will be true if the value or
75:51 - a variable on the left hand side height
75:53 - is not found in the sequence so guys
75:55 - basically these membership operators can
75:58 - be used in order to check whether a
75:59 - particular value is present in a
76:01 - particular variable or not so let us
76:03 - check this with the help of examples now
76:05 - so let's say over here I have a very
76:07 - simple string that is Str Str it is
76:09 - equal to programming for beginners which
76:12 - is the name of this YouTube channel
76:14 - which you should definitely subscribe if
76:16 - you have not done so so guys let's say
76:18 - if I want to find this capital P whether
76:20 - it is present or not inside this string
76:22 - so over here so what we will do is we
76:24 - will simply have the print function and
76:26 - inside the parenthesis we will have the
76:28 - single Cotes and I will say capital P
76:31 - over here and we will use the membership
76:33 - operator that is in over here as you can
76:35 - see vs code is suggesting us this in
76:37 - keyword over here which is the
76:38 - membership operator now what we will do
76:41 - is on the right hand side of this in
76:43 - keyword we will have the sequence that
76:45 - is Str Str which is the string object so
76:47 - what we are asking the program is to
76:49 - find whether this P character is it
76:51 - present in this St are string or not so
76:54 - in keyword is being used so let me just
76:56 - save this file and try running this code
76:58 - now if it is present then it will return
77:00 - true or else it will return false over
77:02 - here so I'm running this code over here
77:04 - as you can see true is being displayed
77:06 - that's because we have found P right at
77:08 - the start of the string now what if I
77:10 - change this character to a small P so
77:12 - over here I'm changing this character to
77:14 - a small case P character over here and
77:16 - guys this is K sensitive so if small p
77:19 - is not found in the entire string then
77:21 - it will be false so let me just save
77:22 - this file enter I running this code now
77:24 - so as you can see false is getting
77:26 - displayed that's because we don't have a
77:28 - small p over here in this entire string
77:30 - but we have the uppercase P character at
77:33 - the start of the string so guys this is
77:34 - the functionality of the in operator
77:37 - over here now as you can see in has
77:39 - returned us the false result over here
77:41 - which means this small case character
77:43 - that is p it is not present inside the
77:45 - string what if we reverse this that
77:47 - means what if we use the reverse of this
77:49 - membership operator we will simply do
77:51 - not n over here that means we are
77:53 - checking whether this small p is it not
77:56 - present in the string yes it is not
77:58 - present and it should return us the True
78:00 - Result so let me just save this file and
78:01 - try running this code now so as you can
78:03 - see we are getting true over here so
78:05 - guys in and not in membership operators
78:08 - both are opposite to each other if one
78:10 - operator is returning true in one of the
78:13 - conditions so the other operator will
78:15 - return us the false result in the same
78:17 - condition now this example we have taken
78:19 - as far as a string is concerned as I
78:21 - have told you we can also use list tle
78:24 - sets and dictionary as well so let us
78:26 - take another example with the list guys
78:28 - in the upcoming videos we are going to
78:30 - learn more about these objects for now
78:32 - you just need to know that what is the
78:34 - syntax of a list if we are defining a
78:36 - particular set of elements so over here
78:38 - let's say I want to have the list of
78:40 - fruits so I will just name the variable
78:43 - as fruits over here and then on the
78:45 - right hand side the way that we Define
78:47 - the list is by using the open and close
78:49 - square brackets over here so as you can
78:51 - see this list is getting getting
78:53 - suggested over here and that is what we
78:55 - are going to Define now inside this open
78:57 - and close square brackets we are going
78:59 - to have the list of strings having the
79:01 - name of the fruits so let's say we have
79:03 - the double coat first and then we will
79:05 - say mango and then the second fruit
79:07 - let's say we have apple and then the
79:09 - third fruit let's say we have banana and
79:12 - then let's say we have the fourth fruit
79:14 - is orange over here so Guys these are
79:16 - certain fruits that we have defined in
79:18 - our list and the name of the variable is
79:20 - fruits over here now inside this fruits
79:23 - list we need to check whether there is a
79:24 - particular fruit that is present or not
79:26 - so I'll just remove this part inside the
79:29 - print statement over here and let's say
79:31 - I want to find whether inside this list
79:33 - the banana fruit is present or not so we
79:35 - will simply have banana and then after
79:38 - that we will simply have in and then
79:40 - followed by we will simply put fruits
79:43 - that is the variable name over here so
79:45 - guys this is the list on the right hand
79:47 - side of this in operator and on the left
79:49 - hand side we are providing one value
79:51 - which needs to be found whether it is
79:53 - present inside the fruits variable or
79:55 - not so let me just save this file and
79:57 - try running this code now so as you can
79:59 - see true is getting returned that's
80:01 - because this banana fruit is actually
80:03 - present in the fruit list over here now
80:05 - let us say we provide some another fruit
80:07 - over here let's say we want to find
80:09 - whether pineapple is present in the
80:11 - fruits list or not so we have provided
80:13 - pineapple over here let me just save
80:15 - this file and try running this code now
80:17 - so it is saying false as we can see we
80:19 - have not defined pineapple in our list
80:22 - of fruits and that is why we are getting
80:23 - false over here and if we change the
80:25 - operator that is from in to not in over
80:28 - here so let's say I provide not in and
80:30 - we use the same value that is pineapple
80:32 - let me just save this file enter I
80:34 - running this code now so it will be the
80:35 - opposite of false so as you can see true
80:37 - is getting displayed now that's because
80:39 - pineapple is actually not present in the
80:41 - list of roots that we have defined if
80:44 - else statement in Python Programming so
80:46 - guys in computer programming we use the
80:48 - if statement to run a block of code only
80:52 - when a c certain condition is met so for
80:54 - example as you can see assigning grades
80:56 - that is a b c based on the marks
80:59 - obtained by a student so basically over
81:01 - here in this case we will be using the
81:03 - if condition now what can be the
81:05 - conditions we can say that if the
81:07 - percentage of the student is above 90%
81:10 - so assign grade A in the same way if the
81:13 - percentage is above 75% then assign
81:16 - Grade B and if the percentage is above
81:19 - 65% but less than 75% then assign grade
81:23 - C so during such conditions we have to
81:26 - use the if else statement over here now
81:28 - similarly in Python there are three
81:30 - forms of if else statement so we are
81:33 - going to check all these forms of
81:34 - statements one at a time with the help
81:36 - of examples the first part is the if
81:38 - statement in which case we are going to
81:40 - Simply have the if statement over here
81:42 - along with the condition and the block
81:44 - of code the next form will be if L
81:46 - statement in which case we will also
81:48 - have the else block over here and the
81:50 - third form of the IFL statement will be
81:53 - first we will be having the if statement
81:55 - and Then followed by the AL if statement
81:57 - in which case we have another condition
81:59 - over here and then finally we have the
82:01 - else statement over here so let us check
82:03 - all this with the help of examples in
82:05 - the vs code so over here let's say we
82:07 - have the value of x it is equal to 10
82:10 - now what we have to do is we have to
82:12 - provide the if condition over here so as
82:15 - you can see when we type if keyword over
82:17 - here vs code is suggesting us that we
82:19 - can use this if keyword so we are going
82:21 - to use this and then we are supposed to
82:23 - have some condition so we can say x
82:26 - greater than 5 over here so guys this is
82:28 - one of the comparison operators that we
82:30 - have already seen previously it will
82:32 - check whether this left hand side
82:34 - variable is it greater than the value
82:36 - that is present on the right hand side
82:38 - so guys this is one of the conditions
82:39 - that we are going to check and then
82:41 - followed by a colon over here so guys
82:44 - this is the format in which we provide
82:45 - the if condition and if this condition
82:48 - that is whether X is greater than 5 if
82:50 - it is true then we want to come inside
82:53 - this and there will be the block of code
82:55 - we need to have certain statements over
82:57 - here so we will say print and we can
82:59 - simply put the string that is X is
83:02 - greater than 5 over here since that is
83:05 - the condition that we have checked so
83:07 - this is the very simple code that we can
83:09 - have with the if condition over here let
83:11 - me just save this file and try running
83:13 - this code now so as you can see it is
83:15 - displaying X is greater than 5 now guys
83:18 - this is just one statement that we have
83:20 - provided inside the if condition we we
83:22 - can also have multiple lines of code
83:24 - inside this block over here after the if
83:26 - condition so we simply have to press
83:28 - enter and provide the another print
83:31 - statement and let's say we will simply
83:33 - put we have checked X so we have a very
83:37 - G statement over here that is we have
83:39 - checked X over here let me just save
83:41 - this file and try running this code now
83:43 - so as you can see X is greater than 5
83:45 - this thing is getting printed and this
83:47 - statement that is we have checked X is
83:49 - also getting printed so all the lines of
83:51 - code that is present inside the block
83:54 - after this condition that we have
83:56 - provided in the if statement will be
83:58 - executed only when this condition that
84:00 - is X greater than 5 is true now what if
84:03 - this condition is not true so let's say
84:05 - I provide X less than 5 over here in
84:08 - which case this condition will become
84:09 - false so what will happen is the control
84:11 - flow will not go inside this block and
84:14 - it will not print these statements over
84:16 - here let us verify this I will just save
84:19 - this file and try running this code now
84:21 - so as you can see nothing is getting
84:23 - printed over here that's because these
84:25 - lines of code are not getting executed
84:27 - because this condition was false now how
84:29 - do we verify that we have to come out of
84:32 - this block so basically we have indented
84:34 - this code that is there are some space
84:36 - characters over here in this line that
84:38 - is why these lines of code over here are
84:40 - treated to be present inside the block
84:43 - after this condition we have to come out
84:45 - of that block over here so we simply
84:47 - press enter and then we press backspace
84:50 - so that the cursor is aligned to this if
84:52 - condition over here now we can simply
84:54 - provide another print statement and I
84:56 - will simply say outside if statement so
85:00 - over here we say outside if statement
85:03 - now guys this line of code it will
85:05 - confirm that the control flow has come
85:07 - out of the if block over here so let me
85:09 - just save this file now and try running
85:11 - this code so as you can see we are
85:12 - getting outside if statement that's
85:15 - because X less than five condition was
85:17 - false and that is why these two lines of
85:19 - code were not printed and then the
85:21 - control flow came out of the if
85:23 - condition and then this line that is
85:25 - outside if statement was printed so guys
85:27 - it is very important that you follow
85:29 - this indentation as far as your python
85:31 - programs are concerned you might get
85:33 - incorrect output if you don't follow
85:35 - such indentations properly now let us
85:37 - move to another form of if statement so
85:40 - over here the second form is we provide
85:42 - the else part as well so the first part
85:43 - we have already seen that is using the
85:45 - if statement let us now use the else
85:47 - statement as well so over here what we
85:49 - will do is first of all we will check
85:51 - whether X X is greater than 5 and then
85:54 - we will print that is X is greater than
85:56 - 5 over here now what if X is not greater
85:59 - than 5 that means it is less than or
86:01 - equal to 5 so we have to define the lse
86:04 - part over here so first of all we have
86:05 - to remove this indentation part so I'll
86:08 - just press on backspace and then we
86:10 - provide the else keyword as you can see
86:12 - vs code is suggesting us this else
86:14 - keyword over here we will use this and
86:16 - then followed by colon and then we can
86:18 - go inside this block of code and
86:20 - similarly we will have another statement
86:23 - in this case we will say X is not
86:25 - greater than 5 so we are checking
86:28 - whether X is greater than 5 and we will
86:30 - say x is greater than 5 if this
86:32 - condition is true and if this is not
86:34 - true then it will go in the lse part and
86:36 - it will say X is not greater than five
86:39 - and after this part of code gets
86:40 - executed the control flow will come over
86:43 - here and it will print this statement
86:44 - that is outside if statement over here
86:46 - so let me just save this file enter I
86:48 - running this code now so as you can see
86:50 - it says X is greater than 5 so over here
86:53 - since the value of x it is 10 it is
86:55 - printing X is greater than 5 after this
86:58 - x greater than 5 condition is true and
87:00 - then after that we are getting outside
87:02 - if statement so the control flow did not
87:04 - go inside this else part that's because
87:07 - it went inside this if part and this
87:09 - line of code was executed so guys the
87:12 - control flow can only go inside one
87:14 - block of code if this condition is true
87:16 - then it will come out it will not go
87:18 - inside the else part and if this
87:20 - condition becomes false then it will go
87:22 - over here in the else part and execute
87:24 - that line of code so let us check that
87:26 - second scenario now what if X is not
87:29 - greater than 5 so we will change the
87:31 - value of x and let us say the X values
87:33 - is 2 now so in this case is X greater
87:36 - than 5 no in this case so this line of
87:38 - code that is X is not greater than 5
87:40 - should get printed let me just save this
87:42 - file andent I running this code now so
87:45 - as you can see X is not greater than
87:47 - five this line of code is getting
87:49 - printed that's because the condition was
87:51 - false and the control Flow came in the
87:53 - lse part and it executed this line of
87:55 - code after this outside if statement got
87:58 - printed over here as you can see on the
88:00 - console so guys this is one of the
88:01 - examples of the if else statement that
88:03 - we can use guys there will be many
88:05 - instances where you will be using this
88:07 - if else statement in your actual
88:09 - programs so make sure that you practice
88:11 - on your own now after this let us see
88:14 - another part that is we have the L if as
88:16 - well so guys let us take this example
88:18 - over here that is of grading system so
88:20 - if the percentage is greater than than
88:22 - 90 we have to assign the grade that is a
88:24 - If the percentage is greater than 75 but
88:27 - less than 90 then we will say the grade
88:29 - is B and if the percentage is greater
88:32 - than 65 but less than 75 then we have to
88:35 - put the grade as C so guys let us move
88:37 - to the code over here let us clear all
88:39 - these lines of code and over here we
88:41 - will simply have the percentage variable
88:43 - and let's say we have 95 as the
88:45 - percentage initially and then we have
88:47 - another variable that is grade let's say
88:49 - it is equal to D initially so we have
88:52 - this character that is D over here now
88:54 - what we have to do is we have to provide
88:56 - the if condition and the first condition
88:58 - is whether the percentage is above 90 so
89:01 - over here we will say inside the if
89:03 - condition first of all whether this
89:04 - percentage is it above 90 over here so
89:08 - we will simply have percentage greater
89:10 - than 90 and if this is true then we have
89:12 - to provide colon and then we have to
89:14 - make the value of this grade as a so
89:17 - grade it is equal to a over here inside
89:19 - the single codes now we have another
89:22 - condition that is if the percentage is
89:23 - greater than 75 but if it is less than
89:26 - or equal to 90 then it should be B so
89:29 - what we have to do is we can use the L
89:31 - If part over here so we have L if
89:33 - keyword so as you can see vs code is
89:35 - suggesting us this L if keyword over
89:37 - here followed by we have to check
89:40 - whether this percentage again is it
89:42 - greater than 75 so over here if it is
89:45 - greater than 75 then we have to come in
89:47 - this block of code and then after this
89:50 - again we have to assign the value to
89:52 - this grade variable and this time the
89:53 - value will be B over here so we will
89:56 - assign the value to grade as B and then
89:58 - after this we will again have the L If
90:01 - part over here and we need to check
90:02 - whether the percentage is greater than
90:04 - 65 or not and then in that case we have
90:07 - to provide C so over here we will say l
90:10 - if percentage it is greater than 65 in
90:14 - this case and then if this is true then
90:17 - we have to provide the grade value as C
90:20 - over here and then guys we can also have
90:22 - the else part over here and we can
90:24 - simply provide that the grade in the lse
90:27 - part it can be D over here in case the
90:29 - percentage is less than 65 so we can
90:32 - have gr as D and then finally we will
90:34 - have the print statement over here so we
90:36 - have the print function and we will
90:38 - simply provide the grade value so the
90:40 - grade is and then we have comma and then
90:43 - the grade variable over here so guys
90:46 - over here as you can see initially the
90:47 - percentage is 95 so it should go inside
90:50 - the first if statement so let let me
90:52 - just save this file now and try running
90:53 - this code so as you can see we are
90:55 - getting some error over here at the else
90:57 - part so over here we have forgot to
90:59 - provide the colon after the else part so
91:01 - it is very important that we provide the
91:03 - colon after any of these keywords that
91:05 - we have used and the conditions that we
91:07 - have used so let me just save this file
91:09 - and try running this code now so as you
91:11 - can see the grade is a that's because
91:13 - the percentage value is 95 and in this
91:16 - case percentage is greater than 90 and
91:18 - that is why the grade is being assigned
91:20 - as the value as a Now what is the
91:22 - percentage value is not greater than 90
91:24 - so let's say we provide the percentage
91:26 - value as 85 so in this case the control
91:28 - flow will come over here it will check
91:30 - whether percentage greater than 90 no in
91:32 - this case then it will go inside the L
91:34 - If part so is percentage greater than 75
91:37 - yes in this case so this line of code
91:40 - that is grade equal to B will get
91:42 - executed and then the control flow will
91:43 - come directly out of the if else
91:45 - statement and it will print the grade
91:47 - over here let me just save this file and
91:49 - try running this code now so as you can
91:51 - see the grade is being assigned the
91:52 - value as B so grade is B is getting
91:55 - printed over here similarly let's say we
91:57 - provide the percentage value as 70 so
92:00 - this time this condition that is
92:01 - percentage greater than 65 will get
92:03 - executed because the previous conditions
92:06 - are already false in this case so let me
92:08 - just save this file and try running this
92:09 - code now so grade must be C so as you
92:12 - can see the grade is C over here and
92:14 - what if the percentage is less than 65
92:16 - so let's say we provide the percentage
92:18 - of 60 so finally the lse part that is
92:20 - grade equal to T will get executed so
92:23 - let me just save this file and try
92:24 - running this code now so now in this
92:26 - case the grid is D so in this way we can
92:28 - easily use the IFL statement we can also
92:31 - use the L if keyword in order to check
92:34 - the intermediate conditions over here
92:36 - for Loop in Python Programming so guys
92:38 - in computer programming Loops are used
92:41 - to repeat a block of code so let's say
92:43 - for example if we want to show a message
92:46 - 10 times we don't have to print that 10
92:49 - number of times over here we can simply
92:51 - use the Loop in order to repeat the same
92:53 - message again and again 10 times so in
92:56 - Python the fall Loop is used to run a
92:58 - block of code for a certain number of
93:01 - times so in this example we have
93:02 - considered 10 we can have any number of
93:05 - iterations so basically it is used to
93:07 - iterate over any sequences such as list
93:10 - tle string Etc so guys this is the
93:13 - syntax of the Fall Loop in Python
93:14 - Programming so first of all we have the
93:16 - for keyword followed by a particular
93:19 - value or a variable and then we have the
93:21 - in keyword which is a kind of a
93:23 - membership operator that we have seen
93:25 - previously and then we have the sequence
93:27 - now this sequence can be anything it can
93:29 - be a list tle or any other sequence over
93:32 - here so let us check this with the help
93:33 - of examples now so over here what we
93:36 - will do is let's say we have the
93:37 - variable name as X and we have the list
93:40 - of numbers over here so in order to
93:42 - define the list we have the open and
93:43 - close square brackets and we have the
93:45 - list of numbers let's say we have one
93:47 - followed by two and then we have three 4
93:51 - and then five so we have the top five
93:54 - numbers over here inside this list that
93:56 - is defined in the variable X now what we
93:58 - want to do is we want to print all these
94:00 - numbers one at a time on the separate
94:02 - lines so we can simply use the for Loop
94:05 - over here so for and what we will do is
94:08 - let's say we provide value as the
94:10 - variable name and then we provide the in
94:13 - keyword which is the membership operator
94:15 - and after this on the right hand side of
94:17 - the in keyword we are supposed to have
94:19 - the sequence so the sequence in this
94:21 - case is the variable that is X over here
94:23 - so this is the format of the Fall Loop
94:25 - whenever we are going to iterate through
94:27 - a list or a sequence now inside this we
94:29 - can have the block of code over here so
94:32 - we simply want to print all the values
94:34 - so we have the print function and we can
94:36 - simply provide this value that is
94:38 - variable so guys what is happening
94:39 - behind the scenes is this x that is the
94:42 - list of all the numbers one at a time
94:45 - the number is being assigned to this
94:47 - variable that is value so first of all
94:49 - one will get assigned to value and this
94:51 - value Val that is one will get printed
94:53 - and then the control flow will go back
94:55 - again in the sequence that is X it will
94:57 - check whether there is a next element or
94:58 - not so two will get printed and then
95:01 - again three and then four and then five
95:03 - and then after this when the control
95:05 - flow comes over here it sees that there
95:07 - is no other element after this Fifth
95:09 - Element so the control flow will come
95:11 - out of this fall Loop and then the other
95:13 - lines of code after this fall Loop will
95:15 - get printed so guys let me just save
95:17 - this file enter I running this code now
95:19 - so as you can see all the numbers are
95:21 - getting printed over here on the
95:22 - terminal that is 1 2 3 4 5 now guys
95:26 - let's say we want all these numbers to
95:28 - be printed on the same line so
95:30 - previously we had seen that we have
95:32 - certain parameters in the print function
95:34 - that will help us in order to print the
95:36 - values in a specific way so over here we
95:39 - have one of the parameters that is end
95:41 - over here so we provide end and this
95:43 - parameter helps us in order to separate
95:45 - the different elements that we want to
95:47 - print so what we are going to do is I'm
95:50 - going to separate all the the numbers
95:51 - using the comma character so I have
95:53 - provided the comma character over here
95:55 - so all the numbers that were printed on
95:57 - the different lines will get printed on
95:59 - the same line now so let me just save
96:01 - this file and try running this code now
96:03 - so as you can see 1 2 3 4 5 is getting
96:06 - printed we are getting this additional
96:08 - comma over here at the end that's
96:09 - because after the last value is getting
96:11 - printed the comma is appended after that
96:14 - last value so guys this is one of the
96:16 - ways in which we can use the fall Loop
96:17 - in order to carry out our operations now
96:20 - guys there is another important thing
96:21 - that you must know in Python the fall
96:23 - loop with python range can also be used
96:26 - so in Python a range is a series of
96:28 - values between two numeric intervals we
96:31 - use the Python's built-in function that
96:33 - is range to define a range of values so
96:36 - let's say we want to define the top 10
96:38 - numbers over here we can simply use the
96:40 - range function instead of defining them
96:42 - one at a time like how we have defined
96:44 - in this list so basically in order to
96:47 - have the top 10 numbers we have to
96:49 - manually Define it as 1 to 10/ over here
96:51 - but we can also get rid of this part we
96:54 - can have the range method over here so
96:56 - as you can see when we type range vs
96:58 - code is suggesting us this function that
97:00 - is range over here and we simply have to
97:02 - provide a number over here so let's say
97:04 - we provide 10 as the number so what is
97:06 - happening is the list of 10 numbers over
97:08 - here is getting assigned to the variable
97:11 - that is X over here starting from the
97:13 - number zero up to the number that is 9
97:15 - so over here we will be seeing all the
97:17 - numbers starting from zero up to 9 over
97:20 - here the last number that is 10 is
97:22 - excluded from the list so if we Simply
97:24 - Save this file enter running this code
97:26 - now we will get these numbers that is 0
97:28 - 1 2 3 4 5 6 7 8 9 so 10 numbers are
97:33 - getting displayed over here that's
97:34 - because we have provided 10 inside the
97:36 - range buil in method what if we provide
97:38 - 20 over here so 0 to 19 numbers will be
97:41 - displayed so let me just save this file
97:43 - and TR running this code now so as you
97:45 - can see 0 to 19 is getting displayed so
97:48 - guys let's say if someone had told you
97:50 - write a python program in order to print
97:53 - top 20 numbers starting from the number
97:55 - 0 up to 19 so instead of having the
97:58 - print statements 20 number of times and
98:01 - writing each and every number inside the
98:03 - print statement we can simply have the
98:05 - range method over here and we can use
98:08 - the fall Loop in order to iterate
98:10 - through the list that we have already
98:12 - defined over here and that is how we
98:14 - simplify the problem that is given to us
98:16 - and write the Python program now guys
98:18 - there is another variation over here
98:20 - python fall loop with the else part so
98:22 - after this fall Loop we can also have
98:25 - the else part that will mandatorily get
98:27 - executed after we reach the end of this
98:30 - sequence that we have provided in the
98:32 - fall Loop so what we will do is we will
98:34 - simply come out of this block of code
98:36 - and we will have the else part over here
98:38 - and we will simply print outside fall
98:41 - Loop over here so we have outside fall
98:45 - Loop so guys what will happen is after
98:48 - the control flow comes out of this fall
98:50 - Loop the control flow will go inside
98:52 - this lse part and it will execute this
98:54 - line of code and print outside fall loop
98:56 - on the console now guys this print
98:58 - statement will be printed on the same
99:00 - line that's because we have provided the
99:02 - end part over here and there is a comma
99:04 - over here so you can expect the string
99:06 - to be present on this same line over
99:08 - here so let me just save this file enter
99:10 - I running this code now so as you can
99:12 - see 0 to 19 that is all the numbers are
99:15 - getting printed and then the last line
99:17 - that is outside fall Loop is getting
99:18 - printed over here so in case you want
99:21 - want to print something or carry out
99:22 - certain operations after the execution
99:25 - of the Fall Loop you can have the else
99:27 - part as well and it will carry out the
99:29 - operations over here after the end of
99:31 - this sequence is reached so guys this is
99:33 - the main functionality of the Fall Loop
99:35 - that is in order to iterate through the
99:37 - sequence we can also have the sequence
99:39 - of list of strings as well we can also
99:41 - have tle or dictionary as well so guys
99:44 - it depends on your requirements as to
99:46 - what exactly you want to find out
99:48 - through the python programs while loop
99:50 - in Python Programming so guys previously
99:52 - we have seen how the fall Loop works in
99:54 - the Python Programming now the python y
99:57 - Loop is used to run a specific code
99:59 - until a certain condition is met so
100:02 - basically in the fall Loop there was no
100:03 - such condition that we had provided but
100:06 - it was iterating through a list that we
100:08 - had provided in the form of a variable
100:10 - but over here this is the synex of the
100:12 - while loop first of all we have the
100:14 - while keyword over here and then we have
100:16 - a certain condition and if this
100:19 - condition is true then only the control
100:21 - flow will go inside the body of the
100:23 - while loop and then again the control
100:25 - flow will come over here it will check
100:26 - the condition again and if the condition
100:29 - is true once again it will again go
100:31 - inside the body of this while loop so
100:33 - guys again and again the control flow
100:35 - will come inside the while loop until
100:37 - and unless the condition becomes false
100:39 - so when this condition becomes false the
100:41 - control flow will come out of this while
100:43 - loop and that is how the while loop is
100:45 - going to work in the Python Programming
100:47 - so guys let us check this with the help
100:48 - of examples now so let's say we want to
100:50 - to print the first five numbers that is
100:52 - 1 to five so over here initially we can
100:55 - have the variable that is I it is equal
100:57 - to 1 and the second variable that is J
101:00 - it is equal to 5 so this is the starting
101:02 - point that is I equal to 1 and the
101:04 - ending point is J is equal to 5 so
101:07 - basically we can have a while loop over
101:09 - here we will simply have the while
101:11 - keyword and the condition that we have
101:13 - to give is whether I is less than or
101:16 - equal to J and up to that condition we
101:19 - want to print the value of I so
101:21 - basically it is I less than or equal to
101:24 - J over here so if this condition is true
101:27 - we want to print the value of I which
101:29 - will be one initially so basically I
101:31 - want to print this number that is I over
101:34 - here now guys what exactly is happening
101:36 - over here is I's value is 1 initially J
101:39 - value is five initially so is I less
101:41 - than or equal to J in the first instance
101:44 - yes in this case so I will be printed
101:46 - which is equal to 1 so again it will go
101:48 - inside the Y Loop and it will check
101:50 - whether the one is less than or equal to
101:52 - 5 yes in this case so guys we are not
101:54 - changing any of the values that is I or
101:57 - J over here so this will be infinite
101:59 - Loop because again and again the
102:01 - condition will be true and the number
102:03 - that is I which is equal to 1 will get
102:06 - printed indefinitely so what we have to
102:08 - do is we have to increment the value of
102:10 - I because after one we want to print the
102:12 - value that is two over here so what we
102:14 - will do is we will simply add 1 to I so
102:17 - I it is equal to I + 1 we can also use
102:21 - the Shand method that is I + equal to 1
102:24 - over here so what will happen now is I's
102:27 - value is updated to I + 1 which will be
102:29 - two now so is 2 less than or equal to 5
102:32 - yes in this case and then again two will
102:34 - get printed and then I will again get
102:36 - incremented over here so the I's value
102:38 - will be three next time I's value will
102:40 - be four and then again I's value will be
102:43 - five and then ultimately when I's value
102:45 - is 6 this condition will become false
102:48 - that's because 6 is not less than or
102:50 - equal to 5 and the control flow will
102:52 - come out of the while loop so guys let
102:54 - me just save this file and try running
102:55 - this code now so as you can see all the
102:58 - numbers that is 1 2 3 4 5 is getting
103:00 - printed after the I's value is five over
103:03 - here five is getting printed now I's
103:05 - value becomes 6 over here that's because
103:07 - 5 + 1 will be 6 and is 6 less than or
103:10 - equal to 5 because the J's value is five
103:12 - over here in this case so no the
103:14 - condition becomes false and the control
103:16 - flow comes out of the while loop now
103:18 - what if we want to print all these
103:20 - numbers on the same line so simply
103:22 - inside the print statement we can have
103:24 - the comma and then we can have the end
103:26 - operator and then let's say we want to
103:28 - separate all the numbers with the space
103:29 - characters so inside the double codes we
103:32 - have provided the space character over
103:33 - here so let me just save this file and
103:35 - try running this code now so as you can
103:37 - see 1 2 3 4 5 is getting printed over
103:40 - here we can have any numbers over here
103:42 - let's say I is starting from 11 and
103:44 - let's say we want J is equal to 20 so in
103:47 - this case 11 to 20 should get printed
103:49 - let me just save this file ENT are
103:51 - running this code now so as you can see
103:53 - 11 12 13 14 and up to 20 numbers are
103:57 - getting printed over here so guys this
103:59 - is the main functionality of the Y Loop
104:01 - it is going to have a certain condition
104:03 - and if this condition is true the block
104:06 - of code inside the while loop will get
104:08 - executed and once the condition becomes
104:10 - false control flow comes out of the
104:12 - while loop now guys we can also use the
104:14 - lse part with the while loop so over
104:16 - here as you can see python while loop
104:18 - with the lse part so a while Loop can
104:21 - have an optional else block as well the
104:23 - else part is executed after the
104:25 - condition in the while loop evaluates to
104:28 - false so basically after this while loop
104:30 - we can also have the else part which is
104:32 - optional so we can have the else part
104:34 - over here what we will do is we will
104:36 - simply have the print statement that is
104:38 - outside the while loop so we have the
104:41 - print function and we will say outside
104:44 - while loop over here so let me just save
104:47 - this file inter I running this code now
104:49 - so as you can see 11 12 13 up to 20
104:52 - numbers are getting printed and then on
104:54 - the same line the outside while loop the
104:57 - statement that we have provided in the
104:58 - else part is getting printed so this is
105:00 - the functionality of the else part after
105:02 - the Y Loop it is optional if you want to
105:05 - have we can have it or else we don't
105:06 - need to have it but guys the important
105:08 - thing is inside the while loop we can
105:10 - provide a particular condition and the
105:12 - control flow will go again and again
105:14 - inside the while loop until the
105:16 - condition is true once a condition
105:18 - becomes false the control flow will come
105:20 - out of the V Loop now guys what you
105:22 - should use whether you should use the
105:24 - python for Loop or python V Loop over
105:26 - here so guys basically they are used
105:28 - based on the specific requirements so as
105:30 - you can see fall Loop is usually used
105:32 - when the number of iterations is known
105:35 - so as we had seen previously in the fall
105:37 - Loop we provide a particular sequence
105:39 - and iterate through that sequence by
105:41 - giving one value at a time to a variable
105:44 - and we use that variable inside the
105:46 - block of the Fall Loop but in the while
105:48 - loop there is a condition so while loop
105:50 - is is usually used when the number of
105:52 - iterations are unknown so we don't know
105:53 - the number of iterations we don't have
105:55 - the sequence of elements or the list of
105:57 - numbers through which we want to iterate
105:59 - so basically we provide the condition in
106:02 - the while loop So based on these
106:03 - requirements you can choose whether you
106:05 - want to use the while loop or you want
106:07 - to use the fall Loop but guys it is very
106:09 - important that you practice both these
106:11 - Loops the implementation of these Loops
106:13 - are very important as far as Python
106:15 - Programming is concerned so break and
106:17 - continue keywords in Python Programming
106:20 - so guys these are two important keywords
106:22 - in Python Loops that is break keyword
106:24 - and the continue keywords basically
106:26 - these are used in the loops in order to
106:28 - carry out certain operations so the
106:30 - breake statement is used in order to
106:33 - terminate the loop immediately when it
106:35 - is encountered so whenever we are
106:37 - executing certain code inside the for or
106:40 - the while loop if there is certain
106:42 - condition we can use the break statement
106:44 - in order to come out of the loop and
106:46 - then on the contrary we have the
106:48 - continue statement as well so the
106:50 - continue Contin statement is used to
106:51 - skip the current iteration of the loop
106:54 - and control flow of the program goes to
106:56 - the next iteration so guys let us check
106:59 - both of these keywords with the help of
107:01 - examples over here so let's say first of
107:03 - all we will be using the fall Loop in
107:05 - order to print the top 10 numbers that
107:07 - is 0 to 9 so let's say we have 4 x and
107:11 - then we have the in membership operator
107:13 - and then we have the range built-in
107:15 - method in order to print the numbers so
107:18 - let's say we have the range of 10
107:19 - numbers over here after the colon let's
107:22 - say we want to print all these numbers
107:24 - so what we will do is we will simply put
107:26 - print X and in order to get all the
107:28 - numbers on the same line I'm going to
107:30 - put end parameter over here and just
107:33 - have the space character over here so
107:35 - let me just save this file and try
107:36 - running this code now so as you can see
107:39 - we are getting the top 10 numbers that
107:40 - is 0 1 2 3 up to 9 over here but guys
107:44 - let's say now there is a requirement
107:46 - that before printing this six number we
107:48 - want to come out of the loop and and we
107:50 - only want to print from 0 to 5 and if we
107:53 - are required to keep this false
107:55 - statement as it is what we have to do is
107:57 - once we encounter the number six inside
108:00 - the fall Loop we have to come out of the
108:02 - Fall Loop so how that can be done
108:04 - basically we will have the if statement
108:06 - over here so inside this fall Loop we
108:08 - are having the if statement over here
108:10 - and we are going to check whether this x
108:12 - value is it equal to six over here so
108:15 - this is the relational operator that is
108:17 - equal to equal to we are trying to check
108:19 - whether this X variable is it equal to 6
108:22 - and if it is equal to 6 then we can
108:24 - simply come out of the loop by using the
108:26 - break statement so after the colon over
108:28 - here we will simply put the break
108:31 - keyword so once we put this code over
108:34 - here that is if xal to 6 we are putting
108:37 - the break statement the control flow
108:39 - will come out of the loop when the x
108:41 - value is equal to 6 so let me just save
108:43 - this file and try running this code now
108:45 - to see what happens so as you can see 0
108:47 - 1 2 3 and then up to five numbers are
108:50 - getting getting printed and once a
108:51 - control flow comes over here next time
108:53 - the value of x will become 6 and it will
108:56 - check whether X is equal to 6 yes in
108:58 - this case and since this condition is
109:00 - true the control flow goes inside the if
109:03 - statement and this break statement is
109:05 - encountered which makes the control flow
109:07 - come out of this fall Loop over here now
109:09 - similar operation is being carried out
109:11 - when we use the while loop as well so
109:13 - let's say I is equal to 1 over here and
109:16 - let's say we want to print the first 10
109:18 - numbers once again so what we will do is
109:20 - we will say while we can simply put I
109:23 - less than or equal to 10 over here and
109:25 - then after the colon we can simply have
109:27 - the print function over here and we will
109:29 - print the value of I and then let's say
109:31 - I provide the end parameter as the space
109:34 - character over here so that all the
109:35 - numbers that is the value of I is
109:38 - printed on the same line so let me just
109:39 - save this file and try running this code
109:41 - now so we have entered the infinite Loop
109:43 - over here I have just interrupted the
109:45 - printing of the numbers the mistake that
109:47 - we have done is we have not incremented
109:49 - the value of I over here so what we will
109:51 - do is simply we will increment the value
109:53 - of I by I + 1 over here let me just save
109:56 - this file and try running this code now
109:58 - once again so as you can see 1 to 10
110:00 - numbers are getting printed now again
110:02 - let's say we want to print only the
110:04 - numbers from 1 to 7 so when the number
110:07 - eight is encountered we want to come out
110:09 - of the while loop instead of printing
110:11 - the 8 9 10 numbers so we can simply put
110:14 - the if condition over here if I is equal
110:18 - to 8 then what we have to do is we have
110:20 - have to use the break statement over
110:21 - here so let me just save this file and
110:23 - try running this code now in this case
110:25 - the top seven number should get printed
110:27 - and after 8 is encountered the control
110:29 - flow should come out of this while loop
110:31 - over here so I'm running this code now
110:34 - so as you can see 1 to 7 is getting
110:36 - printed over here so guys this is the
110:37 - main functionality of the break keyword
110:39 - let us now understand how continue works
110:41 - as you can see the continue statement is
110:43 - used in order to skip the iteration of
110:46 - the loop and the control flow of the
110:47 - program goes to the next iteration let
110:50 - let us understand this with the help of
110:51 - example over here we will take the same
110:53 - example that is for I in and then the
110:56 - range that is 0 to 9 over here so over
110:59 - here we will provide the number 10
111:01 - inside the range built-in function so
111:03 - what we will do is we will simply print
111:05 - the value of I over here and then we
111:08 - will end it with the space character let
111:10 - me just run this code once so I'll just
111:12 - run this code over here as you can see 0
111:14 - to 9 is getting printed now guys let's
111:16 - say I don't want this number five over
111:19 - here that is being printed Ed in the
111:20 - range 0 to 9 so what we can do is simply
111:23 - I will put a condition over here if this
111:26 - I's value equal to five then what we
111:29 - have to do is we don't want to print
111:31 - that number right so after this colon we
111:34 - can simply put the continue keyword so
111:36 - guys what will happen is once the I's
111:38 - value is five the control flow comes
111:41 - inside the if condition and the control
111:43 - flow will encounter this continue
111:44 - keyword so what exactly will happen is
111:47 - instead of going to the next statement
111:49 - over here the control flow directly goes
111:51 - back again to the fall Loop and goes to
111:53 - the next number so next time the I value
111:55 - will be six and this time since this
111:57 - condition will be false it will print
111:59 - this number that is six over here so in
112:01 - short what is happening is when the
112:03 - value of I is five it will not get
112:06 - printed over here with the help of this
112:07 - print statement so let us check this so
112:09 - I'll save this file and try running this
112:11 - code now so as you can see we are
112:13 - getting 0 1 2 3 4 and then there is no
112:16 - number five but after four we have six
112:19 - directly and and then we have 7 8 9 so
112:21 - guys in this way continue keyword works
112:24 - so let's say if I only want to print the
112:26 - even numbers so what will happen is
112:28 - let's say I don't want the odd numbers
112:30 - so how do we check that in the if
112:32 - condition we can simply put I person 2
112:36 - is it equal to 1 over here because every
112:39 - odd number if it is divided by two it
112:42 - will give us the remainder as one and
112:43 - that is what we are checking so all the
112:45 - odd numbers will not be printed but only
112:48 - even numbers will be printed so let me
112:50 - just save this file andent try running
112:51 - this code now so as you can see only
112:53 - even numbers between 0 to 9 is getting
112:56 - printed that is 0 2 4 6 and then 8 and
113:00 - guys this is the functionality of the
113:01 - continue keyword that is in order to
113:03 - make the control flow go back to the
113:06 - fall Loop for the next iteration and
113:08 - guys that is the main functionality of
113:10 - the continue keyword in order to skip
113:12 - the current iteration and go back to the
113:14 - next iteration inside the loop now guys
113:16 - similarly you can use the continue
113:18 - keyword with the while loop as well so
113:19 - that code I'll leave up to you so that
113:21 - you can practice on your own in order to
113:23 - learn more about it pass statement in
113:25 - Python Programming so guys in Python
113:27 - Programming the past statement is a null
113:30 - statement which can be used as a
113:32 - placeholder for future code so basically
113:34 - let's say you have a certain function or
113:37 - you have something else like you can
113:38 - have a while loop or the if condition as
113:40 - well and you want to implement the logic
113:43 - inside this Loop or the if condition
113:45 - later on in the future so you can use
113:47 - the past statement in this case so so as
113:50 - you can see suppose we have a loop or a
113:51 - function that is not implemented yet but
113:54 - we want to implement it in the future in
113:56 - such cases we can use the past statement
113:59 - but now you will ask me we can also put
114:01 - the commment inside this block that is
114:03 - inside the fall Loop or the if condition
114:05 - as well so why do we use the past
114:07 - statement so guys let us understand this
114:09 - with the help of example so first of all
114:11 - we will understand the past statement
114:13 - over here so let's say we have the I's
114:15 - value as one over here and then we have
114:17 - the if condition so inside the if
114:20 - condition what we are doing is we are
114:21 - just checking whether I is less than or
114:24 - equal to 10 and then we have a colon and
114:27 - let's say we have the print statement
114:29 - over here and then we say yes less than
114:32 - 10 so we put yes less than 10 over here
114:36 - and then what we will do is we will have
114:38 - another print statement and I will say
114:41 - outside if statement so guys this is a
114:45 - very simple code first of all we have
114:48 - initialized the variable I to the value
114:50 - equal to 1 and then we have the if
114:53 - condition I is less than or equal to 10
114:55 - and we are Simply Having the print
114:57 - statement over here and then after this
114:59 - if condition we have printed that we
115:01 - have come outside the if loow let me
115:03 - just save this file and try running this
115:05 - code now so it says yes less than 10 and
115:08 - it also says yes outside the if
115:10 - statement now let's say I have some plan
115:12 - in order to implement some logic over
115:14 - here but I don't have the exact logic
115:17 - right now so something else will be repl
115:19 - placing this line of code over here so
115:21 - let's say I simply put a command and say
115:24 - that to be
115:26 - implemented in future so we have the
115:30 - statement over here that is to be
115:31 - implemented in future now remember guys
115:33 - this is a command that using the hash
115:36 - character over here we are putting the
115:38 - commment inside the if statement so let
115:40 - me just save this file and try running
115:42 - this code before running this code you
115:43 - can already see that with this print
115:45 - function we are getting the red
115:47 - underline but still we will go and run
115:49 - this code now so as you can see line six
115:51 - print outside if statement so expected
115:54 - and intended block after if statement on
115:57 - line three so basically the root cause
115:59 - is over here that is inside the if
116:01 - condition so what it is saying is inside
116:03 - the if condition we have not provided
116:06 - any block of code that is there is no
116:09 - logic inside the if condition that we
116:11 - have provided previously we had simply
116:13 - provided the print function which works
116:15 - already but this thing is not working so
116:17 - what we can simply do is instead of
116:20 - providing the comment we can simply
116:22 - provide the pass statement so guys what
116:24 - happens with the pass statement is The
116:26 - Interpreter understands that there is no
116:28 - block of code right now inside the if
116:31 - condition and it needs to be ignored for
116:33 - now as far as execution of the code is
116:35 - concerned but with the comment the code
116:38 - doesn't understand such comment and
116:39 - basically it throws the error and that
116:41 - is what we have got previously so let me
116:43 - just save this file now and try running
116:45 - this code hopefully we should not get
116:47 - this error now so I'm just running this
116:49 - code once again so as you can see
116:51 - outside if statement is getting executed
116:54 - and basically this pass statement has
116:56 - helped us in order to make the control
116:58 - flow understand that there is no logic
117:00 - that is being implemented inside this if
117:03 - condition for now but in the future we
117:05 - will be implementing such logic and for
117:07 - now you can just ignore it and pass to
117:09 - the upcoming lines of code over here so
117:11 - guys this is the main functionality of
117:13 - the past statement you can use it
117:15 - whenever you have the requirement of
117:16 - implementing some logic in the future
117:18 - inside the if condition or the fall Loop
117:21 - or Y Loop or even in the defined
117:23 - functions as well which we are going to
117:25 - see in the upcoming videos functions in
117:27 - Python Programming so guys we will learn
117:29 - about the python function and the
117:31 - function expressions with the help of
117:33 - examples so basically a function is a
117:36 - block of code that performs a specific
117:39 - task so it can be any task that you want
117:41 - to implement based on your requirements
117:44 - but it is the block of code that you can
117:45 - put inside the function and that block
117:48 - of code will have your for
117:49 - implementation of the logic now suppose
117:52 - you need to create a program to create a
117:54 - circle and color it so there are two
117:56 - task over here that is first of all in
117:58 - order to create a circle and the second
118:01 - thing is to color it so you can create
118:03 - two functions to solve this problem that
118:05 - is the first function will be to create
118:07 - a circle and that will be one function
118:09 - and another function will be to create a
118:12 - color over here so basically what we
118:13 - have done is we have divided a complex
118:16 - problem into smaller chunks which makes
118:18 - it easier to understand the program and
118:21 - reuse the functions as well so there are
118:23 - two types of functions so first of all
118:25 - we have already seen some standard
118:27 - Library functions as well one of the
118:29 - example is the print statement that is
118:30 - the print function so these are buil-in
118:32 - functions in Python that are available
118:35 - to use so let us check some examples of
118:37 - standard Library functions over here so
118:39 - previously we have seen the print
118:41 - statement so this is nothing but one of
118:43 - the built-in functions which take
118:45 - multiple parameters so one of the
118:47 - parameters is the value so when we are
118:49 - providing programming for beginners the
118:52 - string which is the name of the YouTube
118:54 - channel as well which you should
118:56 - definitely subscribe so this is the
118:58 - string that we have provided to the
119:00 - print function and this string is being
119:02 - passed to the print built-in method and
119:05 - behind the scenes this print function is
119:07 - having some sort of code that will help
119:10 - us in order to print the statement on
119:12 - the terminal so when we save this file
119:14 - and try running this code now basically
119:16 - this programming for beginners is
119:17 - getting printed what we have done we
119:19 - have just called that function and the
119:21 - implementation is behind the scenes so
119:24 - this is one example of a built-in
119:26 - function similarly we have another
119:28 - buil-in function that is range which
119:30 - helps us in order to have the list of
119:32 - numbers from zero up to the number that
119:34 - we have provided so let's say we provide
119:37 - the number 10 so it will provide us all
119:39 - the numbers before 10 starting from zero
119:41 - so this is another buil-in function so
119:43 - similarly we have other standard Library
119:45 - functions as well now you can also have
119:48 - the user defined functions so in case
119:50 - your requirement is not fulfilled by
119:53 - using one of the standard functions that
119:55 - is being provided by python you can have
119:57 - your own user defined functions also so
120:00 - we can create our own functions based on
120:02 - our requirements and this is the syntax
120:05 - that is first of all we have this
120:06 - keyword that is DF which means Define
120:09 - and then we have the function name so
120:11 - this function name will be the name of
120:13 - the function like this range is the name
120:15 - of the function then the print function
120:17 - the print name is the function name over
120:19 - there so similarly we can have our own
120:21 - function name and after that we have the
120:23 - list of arguments we can have any number
120:25 - of arguments over here inside that we
120:27 - will have the function body where our
120:30 - implementation code will be present and
120:32 - then we can also have the optional
120:34 - return statement which means it will
120:36 - return some value so over here as you
120:38 - can see this is the example we have the
120:40 - defined keyword and Then followed by the
120:42 - greed function over here so it is not
120:45 - taking any arguments for now it is
120:47 - simply printing some statement that is
120:48 - inside inside greed function now how do
120:50 - we call this function simply we use the
120:53 - function name that is greed followed by
120:55 - open and close parenthesis and then we
120:57 - call the print function and we say
120:59 - outside function so guys let us check
121:01 - this with the help of example over here
121:03 - so simply we will have the defined
121:05 - keyword so DF and let's say we have sum
121:08 - and then underscore numbers so basically
121:11 - what we are doing over here is we will
121:13 - be adding two numbers so over here we
121:15 - have the open and close parenthesis and
121:17 - then after that we have a colon and
121:19 - let's say we have the number a it is
121:22 - equal to 10 and then we have number B it
121:24 - is equal to 20 we want to print the sum
121:27 - of these numbers so we simply provide
121:30 - print function inside this and we say A
121:33 - + B and then we can also have the string
121:36 - over here let's say we have sum of A and
121:40 - B and then we have colon and then after
121:43 - this we have comma and then we have a
121:45 - plus b over here so guys this is the
121:47 - function that we have already defined we
121:49 - have two numbers that is a is equal to
121:51 - 10 and B is equal to 20 now if we Simply
121:54 - Save this file and try running this code
121:56 - we will not get anything so as you can
121:58 - see there is no print statement which is
122:00 - helping us in order to print something
122:02 - on the terminal why so because this code
122:05 - is present inside a function which is
122:07 - not called yet so we need to call this
122:09 - function that is some numbers so how do
122:11 - we call it by simply calling the name so
122:14 - we simply have to provide some numbers
122:16 - over here and then open and close
122:18 - parenthesis and that's it we have simply
122:20 - called this function which will make the
122:22 - control flow go to this particular
122:24 - function over here and inside it will go
122:26 - it will check that a value is 10 B value
122:29 - is 20 and it will print sum of A and B
122:32 - it will carry out this operation that is
122:34 - a plus b so let me just save this file
122:36 - and try running this code now so as you
122:38 - can see sum of A and B it is equal to 30
122:41 - and that is how we can simply provide
122:43 - the function now guys why do we write
122:45 - this function just to add two numbers so
122:47 - let's say you have a scenario you have a
122:50 - it is equal to 10 and then we have B it
122:52 - is equal to 20 and you want to print the
122:54 - sum so you can simply provide print a +
122:58 - b so you will get the answer as 30 now
123:01 - with the same requirement you have
123:02 - another requirement as well in the same
123:04 - code that is with this particular
123:06 - addition you want to add more two numers
123:08 - so what you will do is you will simply
123:10 - copy and paste these lines of code once
123:12 - again that is the three lines of code
123:14 - over here but this time the age value is
123:16 - something else so let's say we have
123:18 - something like 50
123:19 - and then 60 over here so what will
123:21 - happen is with this print statement it
123:23 - will print the sum of these two numbers
123:25 - now let's say there is another
123:26 - requirement in which case all the sum
123:28 - needs to be printed at once and you have
123:30 - two more numbers so you will again copy
123:32 - these lines of code and then again paste
123:35 - this over here and then let's say the
123:36 - numbers are 100 and then 200 over here
123:39 - that is B is 200 so let me just save
123:41 - this file and TR running this code now
123:43 - so what is happening is all the sum is
123:45 - getting printed once that is 30 110 and
123:48 - 300 but let's say similarly if you have
123:51 - 10 sets of A and B values in this way
123:54 - and you want to print all the sum of
123:56 - those numb so what you will do so your
123:58 - code will become little bit complicated
124:00 - and it will be little bit lengthy as
124:02 - well so in order to avoid this what you
124:04 - can do is you can simply have the
124:06 - function and inside the function you can
124:08 - have those variables and have the sum of
124:11 - those variables so in order to achieve
124:13 - your task that is have the sum of
124:15 - multiple numbers over here in one screen
124:17 - and using the function fun what you can
124:19 - simply do is you can pass these values
124:22 - that is 10 20 50 60 and 120 while
124:26 - calling the function that is some number
124:28 - so I'll just remove these lines of code
124:30 - now over here and what we will do is I
124:32 - will simply provide the parameters that
124:34 - is the arguments over here that is a and
124:36 - Then followed by comma and then we have
124:38 - B now these A and B are not required
124:41 - because the values will come whenever
124:43 - this function is being called so I'll
124:45 - just remove these lines of code over
124:47 - here you will simply have one print
124:49 - statement inside the function and the
124:51 - sum of A and B it is A + B so this sum
124:54 - will get printed over here while calling
124:56 - the function you're supposed to provide
124:58 - the A and B value so what we will simply
125:00 - do is I will simply call this some
125:02 - numbers over here and I will provide the
125:05 - values of A and B so what we had
125:07 - provided we had provided 10 and 20 and
125:09 - then again we had the requirement that
125:11 - is to add the other two numbers which
125:13 - were 50 and 60 so again I will just copy
125:17 - paste the sum numbers function
125:19 - and provide the different values this
125:21 - time and then again I will copy and
125:23 - paste this once again with some
125:25 - different values so 100 and 200 so as
125:28 - you can see our code has become little
125:30 - bit cleaner instead of having three
125:32 - lines of code in order to add two
125:34 - numbers every time for which our code
125:37 - has also become lengthy we have a very
125:39 - short code and it is very clean as well
125:41 - it is very readable as well so let me
125:43 - just save this file now and try running
125:44 - this code so as you can see we are
125:46 - getting sum of A and B it is 30 sum of A
125:49 - and B it is 110 and sum of A and B it is
125:52 - equal to 300 you can also customize your
125:55 - function in order to have the values of
125:58 - A and B over here so we can simply say
126:00 - over here we have the double quotes and
126:03 - then we have comma and then we have a
126:05 - over here and then we have double codes
126:08 - and then we have and keyword double
126:11 - codes and then B value and then comma
126:14 - and then double quotes over here before
126:15 - the colar so as you can see A and B
126:17 - values can also be printed so let me
126:19 - just save this file and try running this
126:21 - code now so as you can see 10 and 20
126:23 - were passed first time so it is saying
126:25 - sum of 10 20 is 30 then sum of 50 and 60
126:28 - it is 110 and then sum of 100 and 200 is
126:31 - 300 you can call this function any
126:33 - number of times with different values in
126:35 - order to get the different sum over here
126:38 - I'll say 200 + 300 again and then let's
126:41 - say I provide 400 and 500 over here let
126:45 - me just save this file and try running
126:46 - this code all the sums are getting
126:48 - printed Ed and our code is also very
126:50 - clean over here so guys this is the main
126:52 - functionality of using python functions
126:54 - you can simply have the defined keyword
126:56 - followed by the function name and then
126:58 - this arguments list is optional over
127:00 - here you can pass it or if you don't
127:02 - want to pass it there is no need to pass
127:04 - so as you can see over here python
127:06 - function arguments this we have already
127:08 - covered that is in order to pass the
127:09 - argument now one last thing is return
127:11 - statement so because we have not checked
127:13 - any return statement over here so return
127:16 - is nothing but it will return some value
127:18 - so let's say instead of having the print
127:20 - statement over here we want the print
127:22 - statement outside the function so what
127:25 - we can simply do is we can simply return
127:28 - the expression that is a plus b so we
127:30 - can have the return keyword over here so
127:33 - it will say return A+ B so simply
127:35 - whatever value were being passed over
127:37 - here that is 10 and 20 it will return
127:40 - the sum that is 10 + 20 it is equal to
127:42 - 30 to this code and over here we should
127:45 - have something in order to catch that
127:47 - value so I'll just remove these lines of
127:49 - code for now and then let's say in order
127:51 - to catch the value I provide the sum
127:54 - variable so this sum variable is
127:56 - assigned the value that is being
127:58 - returned from the sum numbers over here
128:00 - which is equal to the sum of these two
128:02 - numbers and then simply we can have the
128:04 - print statement in order to print the
128:06 - sum value so some variable can be
128:09 - printed so let me just save this file
128:10 - andent I running this code now so as you
128:12 - can see 30 is getting printed that's
128:14 - because we have passed 10 and 20 over
128:16 - here also to make it more short what we
128:18 - can do is instead of storing the value
128:21 - inside this variable we can simply have
128:23 - the print statement and inside the print
128:25 - statement we can simply call the sum
128:27 - numbers function so as you can see we
128:29 - have the print statement inside this we
128:31 - are calling the sum numbers 10 and 20 so
128:34 - it will return 10 + 20 it is equal to 30
128:36 - so let me just save this file enter I
128:38 - running this code now so 30 is being
128:40 - printed let's say I change the numbers
128:41 - to 20 and 50 over here so 20 + 50 should
128:45 - be 70 let me just run this code so 70 is
128:48 - getting printed and based on the
128:50 - requirement you can format the print
128:52 - function that is you can have any
128:53 - statements being printed over here along
128:55 - with the sum of the numbers so guys this
128:57 - is one of the examples of how you can
128:59 - Define the functions and use them you
129:01 - can have any other logic inside the
129:03 - functions that you want to implement
129:05 - based on your requirements so guys
129:07 - practice on your own so that on
129:08 - different inputs you get different
129:10 - output function arguments in Python
129:13 - Programming so guys in computer
129:14 - programming a function argument is a
129:16 - value that is accepted by a function
129:19 - which we have already seen in the
129:20 - previous video as well now the function
129:22 - argument with default values so in
129:25 - Python we can provide default values to
129:27 - function arguments so we use the equal
129:29 - operator to provide default values and
129:32 - this is a syntax that is DF keyword we
129:34 - use followed by add numbers that is the
129:36 - function name and then we assign some
129:38 - default values to the variables so guys
129:40 - let us check this with the help of
129:42 - examples so over here previously we had
129:44 - seen that the some numbers function that
129:47 - we had used in order to add two numbers
129:50 - it was having two parameters so over
129:52 - here A and B were the parameters and we
129:54 - were simply printing the sum of these
129:56 - two numbers that is A+ B inside the
129:59 - print function and then we were simply
130:00 - calling this function over here so some
130:03 - numbers so let's say we have two numbers
130:05 - as 10 and 20 so I'll just save this file
130:08 - and try running this code now so guys
130:10 - this is a very simple method that is
130:11 - some numbers which takes two arguments A
130:14 - and B it is just adding those two
130:16 - numbers and printing them and the
130:17 - function is being called over here the
130:19 - result is being displayed that is 30
130:21 - based on the value that we pass now guys
130:23 - there is another important thing this
130:25 - function argument can also have the
130:27 - default values so let's say if we don't
130:30 - provide these values that is a and b
130:32 - over here so what happens in this case
130:34 - so let me save this file ENT I running
130:36 - this code now as you can see it says
130:38 - some numbers missing two required
130:41 - positional arguments that is a and b so
130:43 - guys there is an error that's because
130:45 - the program is expecting us to provide
130:48 - the these two values that is a and b
130:50 - which we have not provided while calling
130:52 - the function so let's say in your
130:53 - requirement you want to call the
130:55 - function but sometimes there will not be
130:58 - any value while calling that function so
131:00 - what you can do is you can provide some
131:02 - default values to this A and B so how do
131:05 - you do that you can simply provide the
131:07 - default values over here when you are
131:09 - defining this function so over here we
131:11 - have a it is equal to 10 and let's say B
131:14 - is equal to 20 so these are nothing but
131:17 - some default values that we have
131:19 - provided so let's say next time whenever
131:21 - there is a su numbers function that is
131:23 - being called without any value of a and
131:25 - b so these values will be used that is a
131:28 - is equal to 10 and B is equal to 20 and
131:31 - a + b sum will be returned so let me
131:33 - just save this file now and try running
131:35 - this code so as you can see 30 is being
131:37 - returned over here now let's say you
131:39 - provide one argument that is a value you
131:41 - have but B value you don't have so what
131:44 - you will do is simply you will provide a
131:46 - it is equal to 5050 so let's say you
131:48 - want A's value as 50 but you don't have
131:51 - B value so B value will be automatically
131:53 - taken from here that is B is equal to 20
131:56 - we save this file and try running this
131:58 - code now so as you can see 70 is getting
132:00 - printed that's because A's value you
132:02 - have provided which is 50 which replaces
132:05 - this default value that is 10 so this
132:07 - time a is 50 and B was already 20 and it
132:10 - is not being provided over here so B's
132:12 - value will be considered as 20 and the
132:14 - sum will be displayed over here so guys
132:16 - this is the way that the default value
132:18 - vales in the arguments work now guys
132:20 - there is another thing that is python
132:21 - keyword argument in keyword arguments
132:24 - the arguments are assigned based on the
132:26 - name of the arguments so for example
132:28 - first name and then last name so guys we
132:30 - will continue with the same example over
132:32 - here let's say we have the arguments As
132:35 - A and B we will just remove these
132:37 - default values over here now what we
132:39 - will do is while printing the sum we
132:41 - will also print the value of a and b so
132:43 - over here we will have the statement
132:45 - that is sum of and then we have a is
132:48 - equal to then we will provide a value
132:51 - and then we have comma once again and
132:53 - then let's say we have double quotes and
132:55 - we have emphas character over here and B
132:58 - is equal to then we should have the B
133:01 - value as well and then we have the equal
133:03 - to operator over here and then we have a
133:06 - + b so guys what exactly we are doing is
133:09 - sum of a equal to we are printing the
133:12 - value of a and b is equal to we are
133:15 - printing the value of B and then equal =
133:18 - to a + b so this is nothing but we are
133:20 - formatting the string so it will have
133:22 - the statement over here that is sum of a
133:24 - is equal to 10 and B is equal to 20
133:27 - equal to 10 + 20 which is equal to 30 so
133:30 - we have just formatted the string over
133:32 - here so that we can get the value of a
133:34 - and b that is being passed so what we
133:36 - can do is simply let's say I provide 10
133:38 - and 30 over here which will be assigned
133:40 - to A and B over here in this case so let
133:43 - me just save this file and try running
133:45 - this code now as you can see sum of a is
133:48 - equal to 10 so this first parameter that
133:51 - is 10 was being assigned to this
133:53 - variable that is a and then next time we
133:55 - have and B is equal to 30 so this value
133:58 - that is 30 was assigned to this variable
134:00 - that is B over here and that is why B is
134:02 - equal to 30 and then we have equal to 40
134:05 - which is the sum of both these numbers
134:07 - now guys let's say we want to
134:08 - Interchange these values we want to
134:11 - display the a value is 30 and B value as
134:14 - 10 over here so what we can do is simply
134:17 - we can keep this 10 and 30 in the same
134:19 - sequence but we can assign it by using
134:21 - the variable name so over here B is
134:23 - equal to 30 so what we are doing exactly
134:26 - is this variable name that is B we are
134:28 - using that variable name while calling
134:30 - that function and we are assigning that
134:32 - values so B value will be 10 in this
134:34 - case and then we say a is equal to 30 so
134:37 - basically what we have done is we have
134:39 - interchanged the values we have kept the
134:41 - sequence of values over here but the
134:43 - variable will be having different values
134:45 - first B will be assigned the value that
134:47 - is 10 over here and then a will be
134:49 - assigned the value as 30 in this case so
134:51 - let me just save this file and try
134:53 - running this code now so as you can see
134:55 - sum of a is equal to 30 so a was
134:58 - assigned the value as 30 and B is equal
135:00 - to 10 so B was assigned the value as 10
135:03 - and the sum will be 40 in this case so
135:05 - if you don't want to follow the sequence
135:07 - in which it is present inside the
135:09 - function definition the arguments values
135:11 - you can provide their names over here
135:13 - and provide the values to the variable
135:16 - names so guys this is another way in
135:18 - order to pass the arguments now there is
135:20 - another thing that is python function
135:22 - with arbitrary arguments so sometimes we
135:24 - do not know in advance a number of
135:26 - arguments that will be passed into a
135:28 - function to handle this kind of
135:30 - situation we can use the arbitrary
135:32 - arguments and then this is the syntax
135:34 - that is we use the star character over
135:36 - here so let's say in this case we just
135:38 - have two parameters over here but let's
135:40 - say if we have more than two parameters
135:42 - and we don't know what is the number of
135:44 - parameters that will be present so what
135:46 - we can simply do is we can simply have
135:48 - the star character over here and then we
135:51 - can have the variable names over here
135:53 - numbers is the arguments that we are
135:55 - providing and then what we will do is
135:57 - let's say we want to provide the sum of
135:58 - all the numbers so sum it is equal to
136:01 - zero in this case and then we will go
136:04 - with the help of for Loop so for X in
136:08 - numbers so basically this is kind of a
136:10 - list over here that we are providing and
136:12 - we are going to iterate all the numbers
136:14 - inside the list and then we have colon
136:16 - and then we can have sum it is equal to
136:19 - sum + x and then after this we can have
136:23 - the print statement so we can simply put
136:26 - sum of all numbers colon and then we can
136:31 - simply have the sum variable name now
136:33 - guys in the same way we can call this
136:35 - function that is sum numbers and we can
136:37 - have any number of arguments now this
136:39 - time so basically this T Numbers will
136:42 - help us in order to have any number of
136:43 - arguments so let's say we simply provide
136:45 - the number one and let me save this file
136:47 - and and try running this code now you
136:49 - can see sum of all numbers it is equal
136:51 - to one because one was the only number
136:53 - that we have provided I'll simply copy
136:55 - and paste this line of code and let's
136:57 - say I provide top five numbers so 1 2 3
137:00 - 4 5 so this time we are having five
137:03 - arguments now so first time it was just
137:05 - one argument this time it is five
137:07 - arguments so basically the number of
137:09 - arguments is dynamic we don't know how
137:11 - many number of arguments will be coming
137:13 - over here in this function in this case
137:15 - we can use this star character along
137:17 - with the argument name so let me just
137:19 - save this file Ander I running this code
137:21 - now as you can see the first line it is
137:23 - saying sum of all numbers it is one the
137:25 - next line is sum of all numbers it is 15
137:28 - so 1 + 2 is 3 + 3 is 6 + 4 is 10 and
137:32 - then + 5 it is 15 over here let's say we
137:35 - have another line of code we call the
137:37 - sum numbers once again we provide 10 +
137:40 - 20 + 100 this time so only three numbers
137:43 - let me just save this file and try
137:45 - running this code now this time the sum
137:47 - of all numbers it is equal to 130 so
137:49 - basically 10 + 20 is 30 + 100 it is
137:52 - equal to 130 so guys this is another way
137:55 - you can provide only one argument along
137:57 - with the star if you are not sure how
138:00 - many number of arguments can be passed
138:02 - while calling this function so recursion
138:04 - function in Python Programming so guys
138:06 - in Python we know that a function can
138:09 - call other functions as well it is even
138:11 - possible for the function to call itself
138:14 - and when the function call itself it's
138:16 - called recursive function so basically
138:18 - these type of construct are termed as
138:20 - recursive functions whenever a function
138:22 - calls itself from inside its body so for
138:25 - example the factorial of a number is the
138:28 - product of all the integers from one up
138:31 - to that number so if you see the example
138:33 - the factorial of 6 which is denoted as 6
138:36 - and then exclamation mark it is equal to
138:39 - 1 * 2 * 3 * 4 * 5 * 6 which is equal to
138:46 - 720 and this is is the factorial of the
138:48 - number that is six so guys we can find
138:50 - the factorial of any number by using the
138:52 - recursive function so let us understand
138:54 - how recursive functions work with the
138:56 - help of example over here so let's say
138:59 - we have the factorial function in this
139:02 - case so factorial is the name and then
139:04 - let's say if we provide the variable
139:06 - name as X over here so what we will do
139:08 - is we will simply have to provide the
139:11 - condition over here that is if x is
139:13 - equal to 1 we have to return one in this
139:16 - case so guys always remember that
139:18 - whenever we are having the recursive
139:20 - function we need to have the end point
139:22 - we need to have a limit on which we need
139:24 - to return some basic number over here so
139:27 - this is the limit in this case that is
139:29 - when the value of x is equal to 1 that
139:32 - is at the lowest level the function
139:34 - needs to return the value which is one
139:36 - and then if it is not one then we can
139:38 - call that function once again now how do
139:40 - we call that function we simply use the
139:43 - x value that is the current x value and
139:45 - then we multiply that number with the
139:48 - factorial of x -1 so this time we
139:51 - provide x -1 in this case and one more
139:54 - thing that we can do in order to return
139:56 - this result is we can have the return
139:58 - keyword so guys we will understand this
140:01 - function in detail now before which we
140:03 - will just call this function over here
140:05 - that is factorial and let's say I
140:07 - provide the number that is six that we
140:09 - have already seen for which the
140:11 - factorial of 6 must be 720 and what we
140:13 - will do is since this factorial function
140:16 - is returning this value that is return X
140:18 - multiplied by this recursive function we
140:21 - will catch the value in the result so
140:23 - result it is equal to factorial of six
140:26 - and we will simply have the print
140:27 - statement saying that
140:30 - factorial is and then colon and then we
140:33 - can simply provide result variable over
140:35 - here so let me just save this file and
140:37 - try running this code guys no need to
140:39 - worry over here I will make you
140:41 - understand each and every line of code
140:42 - over here and how it works so just stick
140:44 - with me till the end of this video so as
140:46 - you can see factorial is 720 so this is
140:49 - the result so we have got the correct
140:51 - result over here now let us understand
140:54 - the working of this recursive function
140:56 - so what exactly is happening over here
140:57 - is we have defined the function that is
140:59 - factorial in this case now result is the
141:02 - variable name for which we will get the
141:04 - value from this factorial function that
141:06 - we have called so basically the control
141:08 - statement comes over here factorial of 6
141:11 - so the control statement will go to the
141:13 - definition of this function so x value
141:15 - is six right now so what we will do is
141:17 - we will understand over here one step at
141:19 - a time so right now X it is equal to 6
141:22 - in this case so is x value equal to 1 no
141:26 - in this case so the control flow will
141:27 - come over here and it will check this
141:29 - expression that is x * factorial of x -
141:33 - 1 so this expression we will put over
141:34 - here that is 6 which is the value of x
141:37 - multiplied by factorial of x - 1 so x
141:42 - value is 6 so X - 1 will be equal to 5
141:45 - in this case now what will happen is now
141:47 - factorial of five is being called over
141:49 - here so what is the factorial of five
141:51 - the control flow will go back again to
141:53 - this function and that is why we call it
141:55 - as recursive because from the body of
141:57 - this function we are calling the
141:59 - function itself now this time x value is
142:01 - five so is x equal to 1 no in this case
142:04 - so this time again this expression will
142:06 - be called so x value will be five in
142:09 - this case and multiplied by factorial of
142:11 - x - 1 which will be 4 so again next time
142:14 - what will happen is 5 *
142:17 - factorial of 4 will be called now what
142:19 - is the factorial of four so again the
142:21 - control flow will come over here it will
142:23 - check whether X is equal to 1 no in this
142:26 - case so again this expression will be
142:28 - computed so this time it will be X is
142:31 - equal 4 * the factorial of 4 - 1 which
142:35 - is 3 right now and then again now x
142:38 - value is 3 so again it will be 3
142:40 - multiplied by factorial of 2 in this
142:44 - case and then the last statement that is
142:46 - 2 multi by factorial of 1 in this case
142:49 - now when the factorial of one is being
142:51 - called what will happen is factorial of
142:54 - X which will be factorial of 1 in this
142:56 - case so X is equal to 1 yes in this case
142:59 - so it will return true and the control
143:01 - flow will not go over here to carry out
143:03 - the computation of this expression so
143:05 - return one will return to the factorial
143:08 - of one function so in this case
143:10 - factorial of 1 will become 1 over here
143:13 - now 2 * 1 is equal to 2 and this result
143:16 - will be returned to this function that
143:18 - was called so 2 * 1 is 2 so 2 will be
143:22 - returned over here 3 * 2 is 6 so
143:25 - factorial of 3 will become 6 and 6 will
143:28 - be returned over here 6 * 4 is 24 so
143:32 - factorial of 4 will have 24 as the
143:35 - result and then 24 * by 5 which is equal
143:38 - to 120 and that value will be returned
143:40 - to this function called that is 120 and
143:43 - then 120 * 6 will be 720 which is the
143:47 - last expression that was computed and
143:49 - that is what we will get over here that
143:51 - is the result will be 720 in this case
143:54 - and that is what we got 720 over here
143:56 - now guys similarly we have seen that the
143:58 - factorial of 4 is equal to 24 so this
144:01 - result we can get simply by calling the
144:04 - factorial function with the value four
144:06 - as the argument so let me just save this
144:08 - file enter I running this code so as you
144:10 - can see factorial is 24 similarly we can
144:13 - get the factorial of 3 which is equal to
144:16 - 6 so we can simply put three over here
144:19 - and then let me just save this file and
144:20 - try running this code so factorial is
144:23 - six in this case and guys that is how
144:25 - the recursive function works this is
144:26 - just one example that is in order to
144:28 - find the factorial we can have any kind
144:31 - of implementation code based on your
144:32 - requirements provided the requirement
144:34 - can be fulfilled by using the recursive
144:36 - functions if we see one more example
144:38 - let's say we want to find the factorial
144:40 - of the number that is 10 let me just run
144:42 - this code once again so it says
144:45 - 3628 and that is what we get as the
144:48 - factorial of 10 comment in the comment
144:50 - section below whether this result is
144:52 - correct or not so guys please practice
144:54 - on your own so that on different inputs
144:55 - you get different output and that is how
144:57 - you are going to learn more about Python
144:59 - Programming so guys there are certain
145:01 - advantages and disadvantages of
145:03 - recursive function as you can see
145:04 - recursive functions make the code look
145:06 - clean and elegant so we have made the
145:08 - code very clean and elegant over here a
145:11 - complex task can be broken down into
145:13 - simpler sub problems using recursion so
145:16 - we can have any number that is 100 or
145:18 - 200 and get the factorial of that number
145:21 - just by using these lines of code over
145:23 - here and then sequence generation is
145:25 - easier with recursion than using some
145:27 - nested iteration now what are the
145:29 - disadvantages sometimes the logic behind
145:31 - recursion is hard to follow through so
145:33 - basically as you have seen as I have
145:35 - told you that there must be some end
145:37 - point that you need to provide so
145:39 - basically this is the end point in this
145:41 - factorial function based on your
145:43 - requirements there must be some end
145:44 - point up to which you need to re
145:46 - restrict the call of the function from
145:49 - its body itself so that condition you
145:51 - need to identify based on the
145:53 - requirement and recursive calls are
145:55 - expensive they are inefficient as they
145:57 - take up a lot of memory and time and the
145:59 - recursive functions are hard to debug so
146:01 - guys basically these are certain
146:03 - disadvantages so it depends on your
146:05 - requirements what exactly you want to
146:06 - implement and accordingly you can use
146:08 - the recursive functions Anonymous or
146:11 - Lambda function in Python Programming so
146:13 - guys in Python an anonymous or Lambda
146:15 - function is a special type of function
146:18 - without the function name so we use the
146:21 - Lambda keyword instead of DF that is
146:23 - defined to create a Lambda function so
146:26 - as you can see this is the syntax
146:28 - previously we had used the DF keyword in
146:31 - order to create the normal functions but
146:33 - this time we are going to use the
146:34 - keyword that is Lambda along with the
146:37 - arguments which are optional over here
146:39 - and then followed by a colon and then we
146:41 - have the expression so this is one of
146:43 - the examples of the Lambda function over
146:45 - here we have the Lambda keyword followed
146:47 - by the colon over here and then we have
146:50 - the expression that is we are printing
146:52 - the hello world string and this entire
146:54 - function that is the anonymous function
146:56 - which is not having any name over here
146:59 - is being assigned to a variable that is
147:01 - greed and then this GRE needs to be
147:03 - called as you can see call the Lambda
147:05 - over here along with the open and close
147:07 - parenthesis so when we have this line of
147:09 - code over here this Lambda function will
147:11 - be called and hello world will be
147:13 - printed on the screen so guys let us
147:15 - check this with the help of example
147:16 - example over here so what we will do is
147:18 - simply we will have the Lambda keyword
147:21 - first of all and Then followed by a
147:23 - colon and then let's say we want to
147:25 - print the name of this YouTube channel
147:27 - that is programming for beginners which
147:29 - you should definitely subscribe if you
147:30 - have not done so so we have programming
147:33 - for beginners over here so this is a
147:36 - Lambda function or the anonymous
147:38 - function without having any name and
147:40 - then let's say we assign it to a
147:42 - variable and we can simply provide the
147:44 - variable name as Str Str and then we
147:46 - have the equal to operator over here now
147:49 - what we have to do is simply we need to
147:50 - call this s Str variable so over here on
147:53 - the new line we will have S Str followed
147:56 - by open and close parenthesis and this
147:58 - is the way that we call the anonymous
148:00 - function so let me just save this file
148:01 - and try running this code
148:04 - now so as you can see programming for
148:06 - beginners is getting printed over here
148:08 - and this is one of the simple examples
148:11 - as far as Anonymous function or Lambda
148:13 - function is concerned in Python
148:14 - Programming now guys very important
148:16 - thing what if you have certain arguments
148:18 - which you want to print so this is kind
148:20 - of a static function which is having a
148:22 - fixed string that you want to print but
148:24 - let's say you want to provide some
148:26 - string over here while calling the
148:28 - function so in case let's say we have
148:30 - this argument as this is a string that
148:34 - we want to print so this Str Str that is
148:37 - the Lambda function is being called but
148:39 - this value needs to be caught by this
148:42 - Lambda function over here so what we can
148:44 - simply do is we can take this argument
148:46 - after this Lambda keyword as we have
148:48 - seen in this syntax after the Lambda
148:50 - keyword we have the list of arguments
148:52 - that we can take and use them in the
148:55 - form of Expressions over here so what we
148:57 - will do is let's say I provide Lambda
148:59 - and Then followed by X so this x
149:01 - variable will have this value whatever
149:03 - we pass while we are calling this Str
149:05 - Str function that is the anonymous
149:07 - function so this x we can use in our
149:09 - expression inside this Lambda function
149:11 - so let's say I provide a label over here
149:14 - string past and then for followed by
149:17 - colon and then I have comma and Then
149:19 - followed by this x variable which is
149:21 - being passed so this is a string it is
149:23 - one of the arguments that we are passing
149:25 - to the Lambda expression and the X
149:27 - variable will be assigned this value and
149:30 - it will be printed by using this print
149:32 - statement so let me just save this file
149:33 - and try running this code now so as you
149:36 - can see string passed this label is
149:38 - getting printed and then the value of x
149:40 - which was passed from this calling of
149:42 - the Lambda function over here that is
149:45 - this is a string and the same thing is
149:47 - getting printed over here so guys this
149:48 - is the way that we can pass arguments or
149:51 - parameters to our Lambda or Anonymous
149:53 - functions over here now guys there is
149:55 - another variation can we have the
149:56 - multiple arguments let's say we have two
149:59 - or more numbers for which we need to
150:01 - find the sum of those numbers can we
150:03 - find the sum of those numbers by using
150:05 - the Lambda function so let us quickly
150:07 - check this with the help of examples
150:09 - over here so what we will do is again we
150:11 - will Define the Lambda function over
150:13 - here so we have Lambda keyword and this
150:15 - time we will take two numbers so let's
150:17 - say the two numbers are stored in these
150:18 - variables that is X and Y and Then
150:20 - followed by a colon and then what we can
150:22 - do is simply we can print the sum of
150:24 - these two numbers so we put x + y over
150:27 - here so this is the expression print x +
150:30 - y and over here in the Lambda we have
150:32 - defined the two variables over here now
150:35 - what we can do is we can assign it to
150:36 - another variable so let's say we have
150:39 - addore numbers as the variable name so
150:42 - we have addcore numbers and then Lambda
150:45 - keyword followed by these two two
150:46 - variables that is X and Y and then print
150:49 - x + y over here so what we can simply do
150:51 - is we can call this add numbers and
150:54 - provide the two numbers that we want to
150:56 - add so we just use this add numbers over
150:59 - here and then let's say the two numbers
151:00 - that we provide is 10 and 20 so we are
151:03 - expecting the sum that is 10 + 20 to be
151:06 - displayed by using this expression over
151:08 - here so let me just save this file enter
151:10 - I running this code now so as you can
151:12 - see we are getting some syntax error
151:14 - Lambda expression parameters cannot not
151:16 - be parenthesized so what we can do is we
151:18 - can simply remove these parenthesis that
151:21 - we have provided so when we are
151:22 - providing multiple arguments in the
151:24 - Lambda function we need not have to
151:26 - provide the parenthesis we can separate
151:28 - them using the commas over here so let
151:30 - me just save this file and try running
151:31 - this code so as you can see 30 is
151:33 - getting displayed we can format the
151:35 - string and have some label as well so
151:37 - what we can do is we have the double
151:39 - codes over here and we say sum of
151:42 - numbers and then colon and then comma x
151:45 - + y so let me just save this file and
151:47 - try running this code now as you can see
151:49 - sum of numbers that is 30 is getting
151:51 - displayed another way that we can print
151:53 - the sum of these numbers is just by
151:55 - returning the sum of these numbers and
151:57 - printing them over here outside the
151:59 - Lambda function so while returning any
152:01 - of the Expressions we need not have to
152:03 - have the return keyword we can simply
152:05 - have the expression over here so as you
152:06 - can see the two numbers were passed that
152:08 - is 10 and 20 it will be taken by this
152:10 - Lambda function in the form of X and Y X
152:13 - + Y will be computed and then it will be
152:16 - returned to this function which was
152:18 - called by using the add numbers now we
152:20 - can simply print this so we can have the
152:23 - print function over here and inside the
152:25 - print function we call the add numbers
152:27 - with these two numbers let's say this
152:28 - time we provide some other numbers that
152:30 - is 100 and let's say 150 so the sum
152:33 - should be 100 + 150 which should be 250
152:36 - over here let me just save this file and
152:37 - try running this code now so as you can
152:39 - see 250 is getting printed and again we
152:42 - can have some labels over here in order
152:44 - to Define exactly what this function is
152:46 - doing so guys practice on your own so
152:48 - that on different inputs you get
152:49 - different output this Lambda function
152:51 - becomes very important which is also
152:53 - called Anonymous function when you don't
152:55 - want to define the function explicitly
152:57 - and you have very less number of
152:58 - operations to be carried out by using
153:00 - this Anonymous function so variable
153:02 - scope in Python Programming so guys in
153:05 - Python we can declare variables in three
153:07 - different Scopes so these are local
153:10 - scope Global scope and a non-local scope
153:13 - so we will check all these Scopes one by
153:15 - one with the help of exam examples so
153:16 - first of all what are local variables so
153:19 - when we declare the variables inside a
153:21 - function these variables will have a
153:23 - local scope that is within the function
153:25 - only we cannot access them outside the
153:28 - function so let us check this with the
153:30 - help of examples now over here so let's
153:32 - say we have a function over here by
153:33 - using the DF keyword we Define the
153:36 - function that is ADD and then after the
153:38 - open and close parenthesis we have a
153:40 - colon over here and let's say we have
153:42 - two variables that is a it is equal to
153:44 - 10 and then we have B it is equal to 20
153:48 - and then we just want to print the sum
153:50 - of these two numbers so we will simply
153:52 - do print of a + b over here and then we
153:55 - can simply call this function by using
153:57 - the function name that is ADD followed
153:59 - by open and close parenthesis so let me
154:01 - just save this file andent try running
154:02 - this code now so as you can see 30 that
154:05 - is a sum of 10 and 20 is getting
154:07 - displayed now guys let us say I want to
154:09 - access these variables that is a and b
154:12 - which is defined in this function that
154:14 - is ADD so can we do that from outside
154:17 - this function that we have defined so
154:19 - let us check that so let us say I want
154:21 - to print the value of a over here so
154:23 - when we provide print followed by the
154:26 - variable name that is a so let me just
154:28 - save this file and try running this code
154:29 - to see what happens so as you can see we
154:32 - are getting some error name error name a
154:34 - is not defined so guys because we have
154:37 - defined the variables that is a and b
154:39 - inside the function that is ADD we can
154:42 - only access them within this function
154:45 - and not outside of this function and
154:47 - that is what we call it as a local scope
154:49 - now if the same thing that is print a if
154:51 - we just remove from here and we print
154:54 - over here that is within the function
154:56 - and then we need to call that function
154:58 - so that the control flow goes inside
155:00 - that function and print both these
155:02 - statements now this time we are
155:04 - accessing the value of a from within
155:06 - that function so we should be able to
155:09 - access that variable so let me just save
155:11 - this file and try running this code now
155:13 - so as you can see we are not getting any
155:14 - error first of all we are printing the
155:16 - value of a that is 10 as you can see 10
155:18 - is getting displayed and then print a
155:21 - plus b so 30 is getting displayed which
155:23 - is the sum of those two variables so
155:25 - guys this is the local scope which means
155:27 - the variable that is defined within the
155:29 - function can only be accessed from that
155:32 - function itself now guys let us move to
155:34 - another scope as you can see we have
155:35 - Global variables as well so a variable
155:38 - declared outside of the function or in a
155:41 - global scope is known as a global
155:44 - variable so this means that a Global
155:46 - variable can be accessed inside or
155:49 - outside of a function so what this means
155:51 - so basically let's say when we have this
155:54 - a is equal to 10 outside of this
155:56 - function so I'll just remove this line
155:57 - of code over here and before this
155:59 - function is defined we assign the
156:02 - variable that is a so when we use a
156:04 - particular variable outside of this
156:06 - function this variable is called as a
156:08 - global variable so this variable can be
156:11 - used from within the function also and
156:13 - outside of the function also so we have
156:15 - the same function that is ADD over here
156:17 - and then B value it is equal to 20 so we
156:20 - have the print and then what I will do
156:22 - is I will say inside function so that we
156:26 - can identify that this statement is from
156:29 - within the function itself so inside
156:31 - function and then we will print the
156:33 - value of a and then print a plus b that
156:36 - is the sum of these two numbers will be
156:38 - displayed over here and then what I will
156:40 - do is I will again copy this line of
156:42 - code and paste this over here and then
156:44 - I'll say outside function function so we
156:47 - have outside function over here so first
156:49 - of all this line of code that is outside
156:51 - function and then the value of a will
156:53 - get printed and then add will be called
156:55 - and then what will happen is inside
156:57 - function and value of a will be printed
157:00 - and then a plus b will get printed over
157:02 - here so let me just save this file and
157:03 - try running this code now as you can see
157:06 - outside function the value is 10 since
157:08 - we have provided the global variable
157:10 - over here and from within that function
157:12 - itself we can access the value of a
157:15 - again and that is what we are getting
157:16 - inside function it is equal to 10 and
157:19 - then 30 is the sum of these two numbers
157:21 - that is A+ B so guys this is the way
157:24 - that we can use the global variables so
157:26 - in case you want to use the same
157:28 - variable in the multiple functions in
157:30 - the same program you can Define that
157:32 - variable as a global variable which is
157:34 - also called as a global scope now guys
157:36 - moving to another scope over here that
157:38 - is the nonlocal variables so non-local
157:41 - variables are used in nested functions
157:44 - whose local scope is not defined find
157:46 - which means that the variable can be
157:47 - neither in the local nor the global
157:50 - scope so guys let us check this with the
157:51 - help of examples now over here so in
157:53 - this case in order to use the non-local
157:56 - scope we will have to use the nested
157:58 - function so I'll just remove all these
158:00 - lines of code over here and what we will
158:02 - do is let's say inside this function
158:04 - that is ADD which is the outer function
158:06 - I'll just name it as the outer over here
158:08 - so that it becomes little easy in order
158:10 - to identify the functions so let's say
158:12 - we have the variable a for which the
158:13 - value is 10 over here now let's say we
158:16 - have a nested function which means a
158:18 - function that is present inside another
158:20 - function is called a nested function and
158:22 - we'll name this function as the inner so
158:24 - that we can identify that this is the
158:26 - inner function now what we can do is we
158:28 - can have the variable once again that is
158:30 - a over here but this time we will be
158:33 - using the non-local keyword so as you
158:35 - can see there is a keyword called
158:37 - non-local which we can use in order to
158:40 - assign a value to the variable and this
158:42 - also identifies that this variable is a
158:44 - non-local variable now let's say we
158:46 - assign some other value over here to a
158:48 - so let's say a it is equal to 20 in this
158:51 - case and what we will do is let's say we
158:53 - want to print this value of a now how we
158:55 - will print this is we will say inner and
158:58 - Then followed by colon and then we will
159:00 - say a so this means that we are printing
159:02 - the value of a from the inner function
159:05 - by using this label and then we will
159:07 - come out of this function and what we
159:09 - will do is we will be in the outer
159:12 - function right now so currently we are
159:13 - in the outer function and we will simp
159:15 - call this inner function so we can
159:18 - simply call the inner function over here
159:20 - and then after that let's say we want to
159:22 - print this value of a once again so I'll
159:24 - just copy this line and then paste this
159:26 - over here over here I'll just put the
159:28 - label as outer so guys this is the
159:31 - program that we have return we just have
159:33 - the outer function over here we have the
159:35 - variable that is 10 and then we have the
159:37 - inner function inside this we have
159:39 - Define the non-local variable that is a
159:42 - and then a is being assigned the value
159:43 - of 20 again we are printing the value of
159:46 - a over here by using the inner label and
159:49 - then we are calling this inner function
159:51 - from the outer function itself and then
159:53 - we are printing the value of a by using
159:55 - the outer label over here now the last
159:58 - thing that we have to do is we have to
159:59 - call this outer function because we have
160:01 - not call this yet so over here we will
160:04 - say outer and then we have this open and
160:08 - close parenthesis so let me just save
160:10 - this file enter running this code now so
160:12 - as you can see inner is being assigned
160:14 - the value as 20 and that is what we had
160:16 - done over here so when inner was called
160:19 - over here the non-local variable that is
160:21 - a it makes the value as 20 and then this
160:24 - inner it is equal to 20 is getting
160:26 - displayed now guys what is happening is
160:28 - when we are using this non-local keyword
160:31 - this means that we are telling python
160:33 - that this variable needs to be seen as a
160:35 - non-local variable which means it is
160:37 - equal to this variable as well so when
160:40 - we are doing a is equal to 20 so this
160:42 - value of a will become 20 and this value
160:45 - of a will also become 20 over here and
160:48 - that is why for this inner we are
160:49 - getting 20 and for outer also if you see
160:52 - on the second line the value is 20 right
160:54 - now so this assignment of a is equal to
160:56 - 20 is being treated as a non-local
160:59 - assignment and the values of the
161:01 - variable a wherever it is being assigned
161:03 - will be changed to the value that is 20
161:05 - in this case so guys this is very
161:07 - important concept whenever we are using
161:09 - the nonlocal variable what if we simply
161:11 - have the local variable and we don't
161:13 - Define this in this way so let's say
161:15 - I'll just comment out this line of code
161:17 - over here that is non-local a now this
161:19 - time A's value that is 20 right now is
161:21 - being treated as a local variable inside
161:24 - the inner function and outside the inner
161:27 - function that is in the outer function
161:29 - the a value is currently 10 over here so
161:32 - let us check what will be the output
161:34 - I'll just save this file and try running
161:35 - this code now so as you can see inner it
161:37 - is equal to 20 and right now outer it
161:40 - becomes 10 that's because we have not
161:42 - used the nonlocal keyword over here
161:45 - within within the nested function that
161:47 - is the inner function that we had
161:48 - defined so guys this is very important
161:50 - concept if you want to change the values
161:52 - of all the variable that is in the outer
161:55 - function as well as in the inner
161:56 - function we can use the non-local
161:58 - keyword while assigning the value to the
162:01 - variable and then all the values for
162:03 - that variable will be updated so guys
162:05 - this is the functionality of the
162:06 - non-local variable and I hope you have
162:08 - understood the functionalities of the
162:11 - different variable Scopes in Python that
162:13 - is local variables Global variables and
162:15 - non-local variables Global keyword in
162:18 - Python Programming so guys in Python the
162:20 - global keyword allows us to modify the
162:23 - variable outside of the current scope so
162:26 - it is used to create a global variable
162:28 - and make changes to the variable in a
162:30 - local context so guys let us check this
162:32 - with the help of example now over here
162:34 - so let's say we have a global variable
162:36 - that is a and the value is equal to 10
162:39 - so let's say we have a function over
162:40 - here and the function name is ADD so
162:43 - what we will do is so let's say we have
162:44 - a variable B for which the value is
162:46 - equal to 20 and we want to print the sum
162:49 - of these two numbers that is a and b a
162:51 - is the global variable and B is the
162:53 - local variable for this function that is
162:56 - ADD so we can simply print a + b over
162:59 - here and then what we can do is we can
163:00 - simply call this function that is ADD
163:02 - followed by open and close parenthesis
163:04 - so let me just save this file and try
163:06 - running this code now so as you can see
163:08 - 30 is getting displayed we are using the
163:10 - global variable we are using the local
163:12 - variable and we are adding both the
163:14 - variables over here now guys let us say
163:16 - I want to change the value of a to some
163:19 - other value so what I will do is let's
163:21 - say I come inside this function and I do
163:23 - a it is equal to 30 so what we have done
163:26 - over here is This Global variable that
163:28 - is a for which the value was 10 I have
163:31 - just updated the value to 30 over here
163:33 - and B value I'll keep it same that is 20
163:36 - and I want to print the sum of these two
163:38 - numbers I have called this function that
163:40 - is ADD so let me just save this file and
163:42 - try running this code now so as you can
163:44 - see 50 is getting displayed so we have
163:46 - assigned some other value to a that is
163:48 - 30 over here now guys let us say what we
163:51 - do is I'll just increment the value of a
163:53 - by 10 so over here a it is equal to a +
163:57 - 10 over here so this expression we are
163:59 - using so what happens in this case let
164:01 - me just save this file and try running
164:03 - this code now so as you can see we are
164:05 - getting some error over here Unbound
164:07 - local error cannot access local variable
164:10 - a where it is not associated with a
164:13 - value so basically what is happening
164:15 - over here is local preference is given
164:18 - first so over here a is equal to a + 10
164:21 - it is trying to find out the expression
164:24 - that is a + 10 but it doesn't have any
164:26 - local instance of the variable a and
164:29 - that is why we are getting this error
164:31 - that cannot access local variable a
164:34 - where it is not associated with a value
164:36 - so what we can do in this case is we can
164:38 - tell the python interpreter that we
164:40 - already have defined the variable a for
164:43 - which the value is 10 already and that
164:46 - 10 value is supposed to be taken when we
164:48 - are Computing this expression that is a
164:50 - + 10 so how do we do that before this
164:53 - line of code over here we use the global
164:56 - keyword So This Global keyword followed
164:58 - by the variable a so this tells the
165:00 - python interpretor that the variable a
165:03 - needs to be treated as a global variable
165:06 - and this time a + 10 in this case the
165:09 - A's value will be taken as 10 and 10 +
165:11 - 10 which is 20 will be assigned to this
165:13 - a variable so let let me just save this
165:15 - file now and try running this code so as
165:18 - you can see we are not getting any error
165:19 - now and we are getting the sum of two
165:21 - numbers that is 40 over here how because
165:23 - the a value is 10 and 10 + 10 is equal
165:26 - to 20 so 20 is being assigned to this
165:28 - variable that is A and B's value is also
165:30 - 20 so 20 + 20 will become 40 over here
165:33 - which is getting printed so guys this is
165:35 - the way that we can use the global
165:36 - keyword in order to tell the python
165:39 - interpretor that this variable needs to
165:41 - be treated as a global variable for
165:43 - which we have already defined it over
165:45 - here as the global scope now guys there
165:47 - is another variation over here that is
165:48 - global keyword in nested functions so we
165:51 - already have a example over here so I'll
165:53 - just copy this example and paste this in
165:56 - our VSS code editor so we'll copy this
165:58 - and paste this over here so what exactly
166:00 - we are doing over here is we are having
166:02 - the outer function for which the number
166:04 - is equal to 20 and then we have a nested
166:07 - function that is the inner function over
166:08 - here and we are saying that a global
166:11 - keyword is there for which the variable
166:13 - is num and then num it is equal = to 25
166:16 - now this means that we are declaring the
166:18 - num variable as a global variable over
166:21 - here for which the value will be 25
166:23 - right now so what is happening is print
166:26 - before calling in a function this num
166:28 - value will get printed but as I've told
166:30 - you the local preference is first so
166:32 - what should happen so we will check
166:34 - which value will get printed over here
166:36 - before calling the inner function and
166:38 - then the inner function will be called
166:40 - during which the global num for which
166:42 - num is equal to 25 will get assigned
166:44 - over here and then print after calling
166:47 - inner function and then we will print
166:49 - the num value once again and then after
166:51 - this we are calling the outer function
166:53 - so that all these print statements can
166:55 - get executed and then after that outside
166:58 - both function we will again print the
166:59 - value of this numb variable so let me
167:01 - just save this file and try running this
167:03 - code now so as you can see before
167:05 - calling in a function so where we are
167:07 - over here that is before calling in a
167:09 - function the value of num it is equal to
167:12 - 20 in this case how so basically this
167:15 - num value that is 20 it was assigned
167:17 - over here in the outer function and then
167:19 - the control statement went over here
167:22 - before going inside the inner function
167:24 - because it was not called yet so before
167:26 - calling inner function num value is 20
167:28 - that is what we had assigned over here
167:30 - now inner function was called and then
167:32 - we have after calling in a function the
167:34 - value of this variable was printed once
167:36 - again so after calling in a function it
167:39 - is again 20 why so because guys over
167:42 - here we have provided the global keyword
167:45 - so this means that we are creating
167:47 - another variable for which the scope is
167:49 - global and not local in this case and
167:52 - then the num variable over here for
167:54 - which the value is 25 this num variable
167:56 - is created with the global scope and not
167:58 - the local scope so basically right now
168:01 - as far as local scope is concerned
168:03 - within this outer function it is still
168:06 - 20 over here and that is what we are
168:08 - getting the value of num variable s 20
168:11 - even after calling the inner function
168:13 - and then what happens is outside the
168:15 - outer function when we come once again
168:17 - so outside both the function now the num
168:20 - value will be what 25 that's because we
168:22 - had defined a global variable over here
168:25 - for which the num value was taken as 25
168:28 - and that is what we are getting outside
168:30 - both function it is equal to 25 so guys
168:32 - it is little bit complex to understand
168:34 - for the very first time but with
168:35 - practice you will understand what are
168:37 - the different concepts as far as this
168:39 - Global keyword is concerned and where to
168:41 - use them modules in Python Programming
168:44 - so guys as our program grows bigger it
168:46 - may contain many lines of code so
168:49 - instead of putting everything in a
168:50 - single file as we have done so far we
168:53 - can use modules to separate codes in
168:55 - separate files as per their
168:57 - functionality so basically we can
168:59 - separate the codes and we can create
169:01 - separate files based on the
169:02 - functionality of the file that we are
169:04 - going to create so this will make our
169:06 - code organized and easier to maintain
169:09 - now a module is a file that contains
169:11 - code to perform a specific task so like
169:14 - let's say if we want to add two numbers
169:16 - we can have a function inside another
169:19 - file and we can call it as a module so a
169:22 - module may contain variables functions
169:24 - classes and many other things so as you
169:26 - can see over here for example there's a
169:28 - python module that is addition what we
169:31 - have done is we have defined a function
169:33 - over here so we have the add that is the
169:35 - function name which takes two parameters
169:37 - A and B so a plus b which is the sum of
169:40 - these two variables will be stored in
169:41 - the result variable and this result
169:44 - variable is returned with the help of
169:46 - this return statement so guys this is
169:47 - one of the functions which can be
169:49 - present inside one module which is
169:51 - created as a separate file so guys let
169:53 - us check this with the help of example
169:54 - how we can create the module so
169:56 - basically when we go over here in the
169:58 - Explorer as we have seen previously we
170:00 - were using python unor code file in
170:03 - order to create all our programs but
170:05 - what if we want to create another file
170:07 - and have a function inside that file so
170:09 - we can come over here we can create a
170:12 - new file and let's say we want to name
170:14 - it as addition and Then followed by dot
170:17 - py which is the extension of the Python
170:19 - programming language so as you can see
170:21 - we have created this addition. py which
170:23 - is another python file over here so what
170:26 - we will do is let's say we have a
170:27 - function over here so Define add which
170:30 - takes two parameters that is a and b and
170:32 - then after colon what we will do is we
170:34 - will have the result variable which will
170:37 - have the addition of these two numbers
170:39 - that is a and b which will be passed
170:41 - over here and then we are going to
170:43 - return this result so so return result
170:46 - so basically this function is going to
170:48 - take two values that is in the form of a
170:50 - and b and return the sum of these two
170:52 - values now this code is being written in
170:54 - another file that is addition. py so how
170:57 - do we call it from the main file that is
170:59 - python code over here so what I will do
171:01 - is first of all we are going to save
171:03 - this file over here and switch back to
171:05 - our main file over here that is Python
171:07 - code. py and what I will do is over here
171:11 - we are going to import this module so
171:13 - this python file that we have created
171:15 - right now this is kind of a module so
171:18 - how do we import that module we are
171:20 - going to use the import keyword followed
171:22 - by the name of that module so the name
171:24 - of the module is the file name itself so
171:27 - we are going to provide addition so as
171:29 - you can see vs code is providing us this
171:31 - addition value over here which is part
171:33 - of the autocomplete feature of this
171:35 - editor so we are going to select this
171:37 - now what we can do is we can call this
171:39 - add function since we have already
171:41 - imported this module over here so simply
171:43 - what we will have to do is we are going
171:45 - to use this module name that is addition
171:47 - followed by Dot and then as you can see
171:49 - we have this add method and there will
171:51 - be many other methods that will be
171:53 - present which will come by default
171:55 - whenever we are going to create new
171:57 - python files in this way so basically we
171:59 - are interested in using this add method
172:01 - so when we select this and then we have
172:03 - to provide the two values so what we
172:05 - will do is we will say 10 comma 20 now
172:08 - guys what is happening is this add
172:10 - function it is going to take two values
172:11 - that we have already passed and it is
172:13 - going to return the result so we are
172:15 - supposed to take that result in another
172:17 - variable over here so let's say we
172:19 - provide sum as the variable name which
172:21 - is going to take the return from this
172:23 - add function over here which will be the
172:25 - sum of these two numbers and then we can
172:27 - simply print the value of the sum
172:29 - variable so over here we will say sum of
172:33 - numbers followed by colon and then comma
172:36 - we have the sum variable name so guys
172:38 - let me just save this file now and try
172:39 - running this code so as you can see sum
172:42 - of numbers it is 30 right now so
172:44 - basically what we have done is we have
172:46 - created a module which is the user
172:48 - defined module over here and then we
172:50 - have created a new function inside that
172:52 - module which is going to take two values
172:54 - in the form of a and b and it is going
172:56 - to return the sum of these two values
172:59 - and then what we have done is we have
173:01 - imported that module that is addition
173:03 - and called the function that is the add
173:06 - function which is going to take two
173:07 - values as we had defined in the addition
173:09 - module and the sum will be stored in
173:11 - this sum variable over here and we have
173:13 - printed that sum variable so this is the
173:15 - classic example of a user defined module
173:18 - over here guys similarly there are
173:19 - multiple modules which are built in
173:21 - inside the Python programming language
173:24 - so as you can see there are certain
173:25 - important notes over here python has
173:27 - tons of standard modules so for now we
173:29 - have just seen the user defined module
173:31 - right now we are also going to take the
173:33 - example of a standard module now the
173:35 - standard modules can be imported the
173:37 - same way as we import our user defined
173:40 - modules so let us take the example of a
173:42 - standard module in this case we we will
173:44 - take the example with the math Library
173:46 - module so what we will do is we will
173:48 - remove these lines of code over here and
173:50 - then we can simply import the math
173:52 - Library so as you can see over here once
173:55 - we put the M character as you can see
173:57 - these all are modules that are built in
173:59 - inside the Python programming language
174:01 - we are interested in this math Library
174:03 - over here so when we import math and
174:05 - then we can use the math Library over
174:08 - here and then followed by dot we can see
174:10 - many other functions and variables that
174:12 - are already present the thing that we
174:14 - are interested in is the pi value so as
174:16 - you can see we can get the pi value
174:18 - which is approximately equal to 3.14 and
174:21 - the same thing we can get from the math
174:23 - library and by using the pi variable
174:25 - over here so what we can do is let's say
174:27 - we provide the variable name as value
174:30 - and math. Pi is the value that we want
174:32 - to store in this value variable and we
174:35 - can simply provide the print statement
174:37 - and then we can say pi value is followed
174:41 - by colon and then we can simply put the
174:44 - value that is the variable name so guys
174:46 - what is exactly happening over here is
174:48 - we are importing the math Library which
174:50 - is the built-in Library over here which
174:52 - is a built-in module inside the Python
174:54 - programming language and then inside
174:56 - that we have certain variables and
174:58 - functions as well one of the variables
175:00 - is pi which is having a value and that
175:03 - value we are getting by using this math.
175:05 - Pi statement and then we are assigning
175:08 - it to this user defined variable that is
175:10 - value and the same thing we are printing
175:12 - over here with this particular string
175:13 - that is pi value is followed by colon
175:16 - and then the value variable over here
175:18 - let me just save this file and try
175:20 - running this code now so as you can see
175:22 - pi value is we can see this
175:25 - 3.141592 and so on it is a huge number
175:28 - after the decimal point so guys this is
175:30 - another way in order to use the standard
175:32 - modules that are already present in the
175:35 - Python programming language next we are
175:37 - going to see how do we use the python
175:39 - import with renaming so far we have
175:41 - imported the libraries and used the
175:43 - names of those libraries or modules
175:46 - along with the function name or the
175:47 - variable name but what we can do is we
175:49 - can rename these libraries while
175:51 - importing them so after this import math
175:54 - we have to use the S keyword followed by
175:57 - m so guys this is nothing but it is a
175:59 - shorthand method that we can use in
176:01 - order to name this library right now so
176:03 - instead of typing this math Library over
176:06 - here we can simply use the M character
176:07 - over here because that is what we have
176:09 - defined that is import math as M so we
176:12 - can use M everywhere wherever we are
176:14 - going to use the math so let me just
176:16 - save this file now and try running this
176:17 - code we will see the same output that is
176:20 - pi value is
176:21 - 3.1415 and so on so guys the idea over
176:24 - here is you need not have to type the
176:26 - entire name of the module in this case
176:28 - whenever you are going to refer to a
176:30 - particular method or a function or a
176:33 - variable inside the module but you can
176:35 - use that simple one character or the two
176:37 - characters that you have used while
176:40 - importing the module now guys there is
176:42 - another way python from and and then
176:44 - import statement so over here what we
176:46 - can do is let's say if we only want to
176:48 - use the pi variable in this case so
176:51 - exactly what we are doing is we are
176:52 - importing all the methods that is the
176:54 - functions as well as the variables but
176:56 - let's say if we only want the pi
176:58 - variable so what we can simply do is we
177:01 - can use the from and then we can use the
177:03 - module name that is math and then we can
177:06 - simply import the variable so import and
177:09 - pi over here so as you can see we can
177:11 - use this statement as well that is from
177:14 - followed by the module name and then
177:15 - import and then what exactly we want to
177:18 - import we can just mention that and then
177:20 - after this we can simply use the pi
177:22 - variable name in order to assign it to
177:25 - another variable name or over here we
177:26 - can simply put pi as well so we can
177:29 - simply put Pi in the print statement
177:31 - also so let me just save this file and
177:33 - try running this code as you can see we
177:35 - are getting the same output that is pi
177:37 - value is so and so so basically in order
177:39 - to get the specific variable or the
177:41 - method we can use this statement that is
177:43 - by using the from followed by the module
177:46 - name and then we have the import keyword
177:48 - and then the name of that specific
177:50 - variable or the method now guys one last
177:52 - thing as far as python modules are
177:53 - concerned there is a buil-in function
177:56 - that is D which is directory it is a
177:58 - built-in function in Python in order to
178:01 - get all the variables and the function
178:03 - names inside the module so let's say I
178:05 - provide import math over here so we have
178:08 - import math and then what we can do is
178:11 - we can simply get the directory in this
178:14 - case we simply have to provide the DI
178:16 - function and Then followed by open and
178:18 - close parenthesis and let's say we
178:20 - provide the math Library over here
178:22 - inside the DI function so let me just
178:24 - save this file and running this code now
178:26 - so guys nothing is happening over here
178:28 - that's because we have not provided the
178:29 - print statement so probably we'll
178:31 - provide the print statement and enclose
178:33 - the statement inside the print function
178:35 - let me just save this file and try
178:36 - running this code now as you can see we
178:38 - are getting the list of all the methods
178:40 - and the variables that are present
178:42 - inside the math Library so guys this is
178:44 - a very huge list over here as you can
178:46 - see we have A1 then a12 A1 Ed and then
178:50 - so on we are getting all the method
178:52 - names we are also getting the variables
178:54 - as you can see we are having pi over
178:56 - here and so on guys similarly what we
178:57 - can do is let's say I import this
178:59 - Edition module which is a userdefined
179:01 - module that we have already seen so I
179:04 - import this Edition module and inside of
179:06 - this math I provide this addition module
179:10 - name so let me save this file so one of
179:12 - the methods that is present is add over
179:14 - here so this should be listed now so
179:16 - I'll just run this code now over here so
179:18 - as you can see add method is getting
179:20 - displayed apart from that there are many
179:22 - other built-in variable names that are
179:25 - present which gets generated whenever we
179:27 - create new modules over here so guys
179:29 - this di function can be very useful in
179:31 - order to check which are the different
179:33 - variables and functions are present
179:35 - inside that module that we have already
179:37 - defined or if it is a built-in module
179:40 - that is provided by the Python
179:41 - programming language packages in pyth
179:43 - Python Programming so guys a package is
179:46 - a container that contains various
179:48 - functions to perform specific task so
179:50 - for example let's say the math package
179:52 - that we had seen previously it includes
179:54 - the square root function to perform the
179:57 - square root of a number and this math
179:59 - package we had imported previously as
180:01 - well so while working on big projects we
180:03 - have to deal with large amount of code
180:05 - and writing everything together in the
180:07 - same file will make our code look messy
180:10 - and we also want our code to be readable
180:12 - so we cannot refer that so instead we
180:15 - can separate our code into multiple
180:17 - files by keeping the related code
180:19 - together inside the packages so let us
180:22 - check what a package model structure in
180:24 - Python Programming looks like so over
180:26 - here as you can see we have a package
180:28 - that is game at the outside and in order
180:30 - to make the python interpreter
180:33 - understand that this is a package we
180:34 - need to have a file with this name that
180:36 - is underscore underscore followed by in
180:39 - it and then 2 * underscore followed by
180:41 - do PI so this is the file that that will
180:44 - tell the python interpreter to treat
180:46 - this game as one of the packages and
180:48 - then inside that we can have more sub
180:50 - packages so as you can see we have a sub
180:52 - package called sound inside which there
180:54 - are different sounds that can be present
180:56 - we have another sub package that is
180:58 - image and then we have another sub
180:59 - package that is level and in all these
181:02 - sub packages we have this underscore
181:04 - underscore in it followed by two *
181:06 - underscore and then dot Pi these files
181:09 - must be present in order to make the
181:10 - python interpreter understand that these
181:13 - are the sub packages inside the main
181:15 - package that is game so guys let us
181:17 - check this with the help of examples how
181:19 - we can create the packages and how we
181:21 - can use them in our projects so
181:22 - basically this is our main code that is
181:24 - python code over here what I will do is
181:27 - I will come out of this and I'll create
181:29 - a new folder so let's say I create the
181:32 - game folder over here and inside this
181:34 - folder what we have to do is we will be
181:36 - creating these sub packages over here
181:38 - but before creating the sub packages let
181:40 - us create this file that is the init
181:42 - file which will tell the pyth python
181:44 - interpreter that this is a package so we
181:46 - will come over here we say new file and
181:48 - then 2 * underscore we have n it and
181:51 - then underscore dop so this is one of
181:54 - the files over here which will tell the
181:56 - python interpretor that this is a
181:58 - package and we will keep the file as
182:00 - blank over here for now and we will come
182:02 - to this game and then again we will
182:04 - create another folder this time it is
182:07 - going to be the sound package so we have
182:09 - sound package over here and inside this
182:11 - we will again create a file that is the
182:13 - in file so we have init file over here
182:17 - so we will keep this init file as it is
182:20 - for now so we have created game and then
182:22 - inside that we have a sub package that
182:24 - is sound let us create a file inside the
182:26 - sound package so what we will do is
182:28 - inside this we will create a new file
182:31 - over here and then we will say load. py
182:34 - and inside this file let's say we Define
182:36 - the function that is load and then we
182:39 - have a colon over here so what we will
182:41 - do is we will simply have the print
182:43 - state statement and we will say
182:45 - inside sound package and load function
182:52 - so guys this will tell us that we are
182:53 - inside the sound package and inside the
182:56 - load function over here now guys let us
182:58 - say we want to create another sub
183:00 - package that is level and we want to
183:02 - create the start python file over here
183:04 - so what we will have to do is we again
183:06 - come to this game and then we create
183:08 - another folder and then we have this
183:10 - level subpackage and inside this package
183:13 - again we will create the init file so we
183:15 - have this init do py over here we will
183:19 - keep this file blank for now and then
183:21 - what we will do is over here inside the
183:23 - level we will create another new file
183:25 - and we will say start. py so this is
183:28 - another python file and what we can do
183:30 - is we can Define the function that is
183:33 - start followed by open and close
183:35 - parenthesis and then we can simply have
183:37 - the print function so guys what I'm
183:39 - going to do is I'm just going to copy
183:41 - and paste this print statement from here
183:44 - so we print and paste this over here and
183:47 - I'll say inside level package and start
183:51 - function guys we will just rename this
183:53 - function name as start followed by
183:56 - underscore function so that we come to
183:58 - know that this is the function that we
183:59 - are calling same thing we are going to
184:01 - do with the load as well so underscore
184:04 - function over here so guys pretty much
184:06 - we have created some good packages over
184:08 - here the outer package is the game and
184:10 - then we have two packages that is level
184:12 - and sound each of those sub packages are
184:14 - having the init file over here and then
184:16 - they are having their own functions that
184:18 - is start and load. py so now we will
184:21 - come out of this package that is outside
184:23 - the game package and we already have our
184:25 - main file that is python undor code so
184:28 - what we have to do is let's say we want
184:30 - to call those functions that is start.
184:32 - py and over here that is low. py so what
184:35 - we have to do is first of all we need to
184:37 - import the packages so while importing
184:40 - what we can do is import followed by
184:42 - game as as you can see this game is
184:44 - coming now this is the autocomplete
184:46 - feature of the VSS code which is very
184:48 - good so we can use this game followed by
184:50 - dot as you can see both the sub packages
184:52 - that we had created are also being
184:54 - suggested over here so what we can do is
184:56 - let's say we provide level over here
184:58 - followed by Dot and then as you can see
185:01 - start that is the python file name that
185:03 - is start. py is getting suggested so we
185:06 - will use this so this is the way that we
185:08 - can import one of the files inside the
185:11 - existing packages so over here we have
185:13 - created the user defined packages and
185:15 - the user defined files which are having
185:17 - the user defined functions as well and
185:19 - those functions we are going to call now
185:21 - we can simply provide the print function
185:23 - and Then followed by again we will use
185:25 - the package name followed by Dot and
185:28 - then the subpackage name that is level
185:30 - followed by Dot and then the start that
185:32 - is the name of the Python file followed
185:35 - by dot as you can see we are getting the
185:37 - start function as the suggestion so we
185:39 - will use this and then after the start
185:41 - function we have the open and close
185:43 - parenthesis since it is the function
185:45 - over here so let me just save this file
185:47 - and try running this code to see what
185:48 - will be the output as you can see inside
185:51 - level package and start function so this
185:53 - is a string that we had provided in our
185:56 - start function over here that is inside
185:58 - level package and start function let's
186:00 - say we want to call this load function
186:02 - over here so what we can do is again we
186:04 - will have the print statement and Then
186:06 - followed by in the same way we are going
186:09 - to call the load function so game
186:11 - followed by we need to get the s sound
186:13 - sub package so over here we are not
186:15 - getting the sound subpackage that's
186:17 - because we have not imported the sound
186:19 - yet so again we are going to have
186:21 - another import and then we have G
186:23 - followed by dot this time we are going
186:25 - to import the sound sub package followed
186:27 - by Dot and then we have load so now this
186:30 - time once we provide dot as you can see
186:32 - sound is getting Auto suggested over
186:34 - here so sound followed by dot we have
186:36 - load and then load function over here
186:39 - open and close parenthesis let me just
186:41 - save this file and try running this code
186:42 - now as you can see inside level package
186:45 - and start function and again inside
186:47 - sound package and load function is
186:49 - getting printed because that is the
186:50 - content that we had provided over here
186:53 - so guys this is the way that we can
186:54 - import different packages and the files
186:57 - inside those packages and call those
186:59 - functions as well now guys previously I
187:01 - have shown you what is the shorthand
187:03 - method so instead of typing everything
187:05 - that is packages and sub packages over
187:07 - here we can simply use the Shand method
187:09 - over here while importing the library so
187:12 - after this we have the space character
187:14 - followed by the as keyword and then
187:16 - let's say I provide the name as the
187:18 - level and over here I provide the name
187:20 - as sound so what we can do is simply we
187:24 - can use the level and sound over here so
187:27 - let's say I provide level followed by
187:29 - Dot and then we have start function and
187:31 - over here once again this entire thing
187:33 - can be replaced and we can provide sound
187:36 - because that is the name that we have
187:38 - given to this package and the library
187:40 - hierarchy that we have imported so let
187:42 - me just save this file and try running
187:44 - this code pretty much the output will be
187:46 - same that is those two strings are
187:47 - getting printed over here once again as
187:49 - you can see but this is the shorthand
187:51 - method that we can use so guys this is
187:53 - the way that you can organize your code
187:55 - into different packages and write
187:58 - different methods as well inside those
188:00 - packages and the python files hopefully
188:02 - you have got enough knowledge about the
188:04 - packages in order to create your next
188:06 - big project as far as Python programming
188:08 - language is concerned numbers type
188:10 - conversion and Mathematics in Python
188:13 - programming so guys in Python the number
188:15 - data types are used to store the numeric
188:18 - values so python supports integers
188:20 - floating Point numbers and complex
188:22 - numbers which we are going to see with
188:24 - the help of examples as well so they are
188:26 - defined as int float and complex classes
188:29 - in Python so as you can see this int is
188:32 - a data type which holds the signed
188:34 - integers of non-limited length and then
188:37 - we have float as well which holds the
188:39 - floating decimal points and its accurate
188:41 - up to 15 decimal places so in case you
188:44 - want the 15 decimal places for a number
188:46 - you can use the float class in the
188:49 - Python Programming and also we have the
188:51 - complex data type which holds the
188:52 - complex numbers so guys let us check
188:54 - this with the help of examples now over
188:56 - here so let's say I want to print the
188:58 - simple integer so over here I will
189:00 - simply say num one it is equal to 10 and
189:04 - then inside the print function we can
189:06 - simply provide num one so let me just
189:08 - save this file and try running this code
189:10 - now so as you can see 10 is getting
189:11 - displayed similar we can have the float
189:14 - and complex data type as well so I'll
189:16 - just copy paste these lines of code over
189:18 - here I'll put num two it is equal to
189:21 - 5.76 and then over here we will print
189:24 - num 2 as the variable name and then
189:26 - let's say we have num 3 in which case
189:28 - let's say we have the complex number
189:30 - that is 3 + 2 J so this is the format in
189:34 - which we provide the complex number in
189:36 - Python and then we provide the num3 as
189:38 - the variable name over here so let me
189:40 - just save this file and try running this
189:42 - code now so as you can see we are
189:44 - getting the integer over here then we
189:45 - have 5.76 and then we have 3 + 2 J all
189:49 - these numbers are getting printed now in
189:51 - order to see what is the data type of
189:53 - each and every number variable that we
189:56 - have provided we can simply provide the
189:59 - type function over here and enclose the
190:01 - variable name so as you can see this
190:03 - type function will help us in order to
190:06 - find the data type of the variable so
190:08 - num one is the variable and we have
190:10 - enclosed it within the type function and
190:12 - and then similarly we will say type and
190:15 - then num two will be enclosed over here
190:17 - and then let's say we want to find the
190:19 - type of this that is num three variable
190:22 - as well so we provide the type function
190:25 - so instead of printing the values we
190:27 - will be printing the data types of all
190:29 - these variables now so let me just save
190:31 - this file and try running this code now
190:33 - so as you can see in the sequence we are
190:35 - getting all the data types the first
190:37 - number that is num one it is of integer
190:39 - data type since we have stored the
190:41 - integer value the next we have the float
190:43 - that's because we have stored the float
190:45 - value and then we have the complex data
190:47 - type so in this way we can easily use
190:49 - the type function in order to find the
190:52 - data type of any variable in Python
190:54 - Programming now guys over here let us
190:56 - understand the number system so
190:58 - basically the numbers that we have seen
190:59 - so far are of the decimal that is base
191:02 - 10 number system but in computer
191:04 - programming we need to work with binary
191:06 - that is base 2 then we also have
191:08 - hexadecimal that is base 16 and octal
191:11 - that is base 8 number system systs as
191:13 - well so how do we work with these number
191:15 - systems can we represent them in the
191:17 - Python Programming yes we can so as you
191:19 - can see the binary numbers can be
191:21 - represented by using the Zer B prefix
191:24 - the b letter can be lowercase or
191:26 - uppercase character similarly we have
191:27 - the octal that is the base 8 number so
191:30 - we can have the prefix that is 0 and O
191:33 - and Then followed by hexadecimal which
191:35 - is having the prefix that is 0x so guys
191:37 - let us check this with the help of
191:39 - examples now over here let's say we want
191:41 - to have a number which is of of a binary
191:43 - data type so let's say we have num one
191:46 - and then let's say we want to represent
191:47 - the number eight with the help of its
191:49 - binary representation so we have 1,000
191:53 - which is the binary representation but
191:55 - this is a simple base 10 number that we
191:57 - have provided in order to make this as a
191:59 - binary number we have to provide the
192:01 - prefix that is 0 B so as you can see 0 B
192:04 - is the prefix and then next time when we
192:06 - print this number so over here we can
192:08 - simply print this number so let me just
192:11 - save this file enter running this code
192:13 - now so as you can see we are getting
192:14 - eight instead of 1,000 so 1,000 is the
192:17 - binary representation of the number
192:19 - eight and when we provide the z b which
192:22 - means it tells the python interpreter to
192:24 - treat this as the binary representation
192:27 - and print this number that is num one in
192:29 - the base 10 format over here similarly
192:31 - we can have the octal numbers and the
192:33 - hexadecimal numbers as well so let's say
192:35 - in the octal numbers what we do is
192:37 - instead of 0 B we provide 0 o and then
192:40 - let's say we just provide 10 as the
192:42 - number over here let me just save this
192:44 - file and try running this code now so
192:46 - octal number that is 10 it is being
192:48 - represented as the number eight in the
192:50 - decimal format and that is what we are
192:52 - getting over here what will be the octal
192:54 - number that is 15 in this case so let me
192:56 - just save this file and try running this
192:57 - code now as you can see 13 we are
192:59 - getting which is of the decimal format
193:01 - similarly let's say we want to represent
193:03 - the hexad decimal number so let us see
193:05 - what will be the Bas stand number for
193:07 - this hexadecimal number that is 0x15 so
193:10 - let me just save this file and try
193:11 - running this code so as you can see 21
193:13 - is the decimal number now let's say we
193:16 - want to print 15 as the decimal number
193:19 - but we want to represent it as the
193:21 - hexadecimal number so we have something
193:23 - called as F over here the numbers it is
193:25 - going from 0 to 9 and then a to F
193:28 - characters as far as hexadecimal
193:30 - representations are concerned so let me
193:32 - just save this file and try running this
193:34 - code now so as you can see 15 is getting
193:36 - printed over here so if you are familiar
193:38 - with the number systems then you must be
193:40 - knowing about what are the different
193:41 - values when we say hexadecimal octal and
193:44 - binary numbers over here and if you're
193:46 - not familiar then no need to worry about
193:48 - it it is just the formats in which the
193:50 - numbers are being stored and are being
193:52 - represented now very important topic the
193:54 - type conversion in Python so basically
193:56 - in Programming type conversion is the
193:59 - process of converting one type of number
194:01 - into another so in some cases we might
194:04 - want the float number to be converted to
194:06 - the integer number or the integer number
194:08 - to be converted to a complex number and
194:10 - so on based on the requirements so
194:13 - operations like addition subtraction
194:15 - convert integers to float implicitly so
194:18 - it is very important to note that
194:20 - whenever you are going from the integer
194:22 - to the float number it will be done
194:24 - automatically that's because float is
194:26 - taking extra memory compared to the
194:28 - integers so whenever you are going from
194:30 - a lower memory data type to the higher
194:32 - memory data type it will be done
194:34 - automatically but the same is not
194:36 - applicable when you go from a higher
194:38 - data type to the lower data type that's
194:40 - because there is some kind of a loss of
194:42 - data in that case so let us see how the
194:44 - integer gets automatically converted to
194:47 - the float value as you can see over here
194:49 - we have the print statement which is
194:50 - taking one operant that is the integer
194:53 - on the left hand side and a float number
194:55 - on the right hand side so let me just
194:56 - copy this line of code and we will print
194:59 - this over here so let me just save this
195:01 - file enter I running this code so what
195:03 - exactly is happening over here is this
195:05 - is a float number that is 2.0 and this
195:07 - is the integer number but an integer and
195:10 - a float number cannot be added so basic
195:12 - basically implicitly this integer is
195:15 - being converted to 1.0 behind the scenes
195:18 - and then that 1.0 is being added to 2.0
195:22 - and after that we get the result as 3.0
195:25 - similarly let's say if we have 2.45 over
195:28 - here so the result should be 3.45 in
195:31 - this case after this integer is being
195:33 - converted to the float number so let me
195:35 - just save this file and try running this
195:37 - code now as you can see 3.45 is getting
195:40 - displayed and this is how the implicit
195:42 - it type conversion happens in Python
195:44 - Programming now what is the explicit
195:46 - type conversion so we can also use
195:48 - built-in functions like integer that is
195:51 - as you can see this is the int function
195:53 - name followed by the open and close
195:54 - parenthesis that will help us to convert
195:57 - any complex number or the float number
195:59 - to the integer it can also help us in
196:02 - order to convert the string to the
196:04 - integer as well we also have the float
196:06 - and then we also have the complex
196:08 - function to convert between types
196:10 - explicitly so let's say we only only
196:12 - want the integer format to be displayed
196:14 - over here that is the sum should be in
196:16 - the integer format so what we will do is
196:18 - for this 2.45 we have to explicitly
196:22 - convert this to the integer the left
196:24 - hand side is already integer we want to
196:26 - convert the right hand side to the
196:27 - integer so before this number we have to
196:30 - provide the int function name and then
196:32 - the number needs to be enclosed within
196:34 - the open and close parenthesis so this
196:37 - is the way that we can explicitly
196:39 - convert a data type to another data type
196:41 - so two 2.45 that is the float number
196:44 - will get converted to the integer number
196:47 - over here so in this case there will be
196:49 - a loss of data the 45 will be removed
196:52 - and only two will be considered over
196:54 - here so 2 + 1 the three should be the
196:56 - sum of this addition operation so let me
196:59 - just save this file and try running this
197:01 - code now so as you can see three is
197:02 - getting displayed so since there is a
197:04 - loss of data over here since we are
197:06 - going from a higher memory data type to
197:09 - the lower memory data type that is why
197:10 - we are required to Prov the explicit
197:13 - data conversion functions guys similarly
197:15 - you can convert the string data type as
197:17 - well so let's say we have string it is
197:19 - equal to 12 and what we want to do is
197:21 - let's say I want to add 10 to this
197:24 - particular string so string is
197:25 - represented in this format that is it
197:27 - needs to be enclosed between the double
197:29 - coaches or the single coach over here so
197:31 - what I want to do is let's say I want to
197:32 - add 10 to this particular string so I
197:35 - just say 10 plus Str Str over here so
197:38 - what we are doing exactly is this is the
197:40 - integer and this is a string data type
197:42 - we we are trying to add both these
197:43 - things over here so let me just save
197:45 - this file and try running this code so
197:47 - it says type error unsupported operant
197:49 - that is Type S for plus integer and
197:52 - string so we cannot add an integer with
197:55 - a string over here so we need to convert
197:57 - this string to the integer so similarly
197:59 - we can use the int function that we have
198:01 - seen just now and enclose this string
198:04 - variable inside the open and close
198:06 - parenthesis and that is how the string
198:08 - will get converted to the integer after
198:10 - which we can add it to other integers as
198:12 - well so let me just save this file now
198:13 - and try running this code so as you can
198:15 - see 22 is the result 10 + 12 which is 22
198:19 - and that is what we are getting in the
198:20 - form of integer so in this way you can
198:22 - convert the data types to another data
198:24 - types as well by using such kind of
198:26 - functions now let us talk about python
198:28 - mathematics so python offers the math
198:31 - module to carry out different
198:33 - mathematics like trigonometry logarithms
198:35 - probability and statistics Etc so for
198:38 - example I have certain lines of code
198:40 - over here what I will do is I'll simply
198:42 - copy and paste these lines of code since
198:44 - I'm a little bit lazy in order to type
198:46 - the entire code so basically this is
198:48 - very important we use the import keyword
198:51 - which we have already seen previously in
198:53 - order to import a particular module in
198:55 - Python programming language and then
198:57 - math is the name of the module now by
198:59 - using this module that is a library we
199:02 - can use the various variables and the
199:04 - functions that are present inside this
199:05 - math module so we have Pi variable we
199:08 - have the cost that belongs to the
199:10 - trigonometry functions then we have
199:12 - exponent as well log 10 sin Edge and we
199:15 - also have the factorial function for
199:17 - which we have already return returned
199:18 - the code in the previous video so there
199:20 - is a built-in function in order to find
199:22 - the factorial of a number over here as
199:24 - well so let me just save this file and
199:26 - running this code now so as you can see
199:27 - we are getting all the results over here
199:29 - first of all we are getting the pi value
199:31 - which is 3.14 and then cost of math Pi
199:34 - it is giving us Min -1 and then
199:37 - 22,26 which is the exponent of 10 and
199:39 - then log 10 it is equal to 3. 0 then we
199:42 - are getting sin edge of 1 it is equal to
199:45 - 1.17 and factorial of 6 we are getting
199:48 - 720 can you guess what is the factorial
199:50 - of the number four so try to find out
199:53 - what is the factorial of four by using
199:55 - the Python programming language on your
199:57 - own as a homework for you and comment in
199:59 - the comment section below what will be
200:01 - the answer of the factorial 4 random
200:03 - module in Python Programming so guys
200:05 - python offers the random module to
200:07 - Generate random numbers or to pick a
200:10 - random item from an iterator so we are
200:12 - going to check this with the help of
200:14 - examples now over here so first of all
200:16 - we are supposed to import the random
200:18 - module in this way and then as you can
200:20 - see we are printing a random range over
200:22 - here we are using the random module
200:24 - followed by the dot operator and then we
200:26 - are using the Rand range function in
200:29 - order to find the random range over here
200:31 - so let us move to the vs code over here
200:33 - in order to check the examples so first
200:36 - of all we will be importing the random
200:38 - module so we have import followed by
200:40 - random over here next let's say I want
200:43 - to print the random range so what we
200:45 - will do is we will have the print
200:46 - function and inside that we will be
200:48 - using the random module that we have
200:51 - just imported followed by Dot and as you
200:53 - can see vs code is suggesting us many
200:55 - other variables and the method names as
200:58 - well that we can use so we are going to
201:00 - say random range over here and the range
201:03 - it should be between 10 and 20 so we
201:06 - provide 10 comma 20 s the range so let
201:09 - me just save this file now and try
201:10 - running this code so as you you can see
201:12 - we are getting 12 over here which is the
201:14 - part of this random range that is 10 and
201:16 - 20 let's say we want the number to be
201:18 - between 100 and 200 over here so let me
201:21 - save this file and try running this code
201:23 - now after making changes as you can see
201:25 - we are getting the 178 similarly let's
201:27 - say if you want to throw the dice and
201:29 - only numbers that are present on the
201:31 - dice is between 1 to six so you can use
201:34 - this random range function inside the
201:36 - random module and provide 1 comma 6s the
201:39 - number in order to get the number so as
201:41 - as you can see we are getting four over
201:43 - here next time when we run this and then
201:45 - we are getting two over here so you can
201:47 - use this function in order to develop
201:49 - your next game as far as throwing a dice
201:51 - is concerned now similarly we can also
201:54 - have the list as you can see we have the
201:55 - list one and then we have five
201:57 - characters over here let's say out of
201:59 - these characters we want to select one
202:01 - of the characters so you can use the
202:03 - choice function inside the random module
202:06 - so let us check this with the help of
202:07 - example now over here so let's say we
202:09 - have the list of the programming
202:11 - languages so we name it as the list one
202:14 - as the variable name and then what are
202:16 - the programming languages so one is
202:18 - Python and then let's say we have Java
202:21 - as another programming language then
202:23 - let's say we have C++ and then let's say
202:26 - we have Swift as another programming
202:28 - language so these are certain
202:30 - programming languages now let's say out
202:31 - of all these four values we want to
202:34 - select one of the values randomly so
202:36 - what we can do is we can have the print
202:38 - function and then we can use this random
202:41 - module name followed by Dot and then we
202:43 - have the choice function name and inside
202:46 - this function we have to provide the
202:48 - list variable so we provide list one
202:51 - over here so basically we are passing
202:53 - this list one to this Choice function
202:55 - and asking the choice function to select
202:57 - one of the values from this list of
202:59 - values so let me just save this file and
203:01 - try running this code now so as you can
203:03 - see we are getting the Swift value as
203:05 - the random value if we run this code
203:07 - once again we will get some different
203:09 - value so as you can see we are getting
203:10 - Java this time then we run again we are
203:13 - getting python this time and then if we
203:15 - run again we are again getting Java so
203:17 - every time we will get a different value
203:19 - whenever we are using this particular
203:20 - function now let's say we want to print
203:22 - this list so what we will do is I'll
203:24 - just remove this part of the print
203:26 - statement and I'll simply provide a list
203:28 - one that is the variable name for that
203:30 - list let me just save this file enter I
203:32 - running this code now so as you can see
203:34 - we are getting this list of values now
203:36 - before this what we can do is we are
203:38 - saying original list over here as the
203:41 - label so we say original list now
203:43 - exactly what we want to do is we want to
203:45 - shuffle this list let's say this
203:47 - sequence of data that we have inside the
203:49 - list we want to shuffle it so what we
203:52 - can do is simply we can use the random
203:55 - module name over here followed by Dot
203:57 - and it also has something called as
203:59 - Shuffle function so this will help us in
204:01 - order to shuffle all the values of this
204:04 - list that we provide so Shuffle followed
204:06 - by inside the open and close parenthesis
204:09 - we provide the list one variable name
204:11 - and then after that what we can do is we
204:14 - can simply print this list content once
204:16 - again and then we can simply put
204:18 - shuffled list over here instead of
204:20 - original list so before shuffling we are
204:22 - printing the original list over here
204:24 - which will print the values in this
204:26 - sequence and then after shuffling it
204:28 - will print the shuffled list over here
204:30 - where the values will be shuffled in
204:32 - this case so let me just save this file
204:34 - and try running this code now as you can
204:35 - see original list we are getting python
204:38 - Java C++ and Swift and then shuffled
204:40 - list it is Java Swift C++ and then
204:43 - python so we have just shuffled the list
204:45 - the values were completely shuffled
204:47 - inside the list and were printed on the
204:49 - screen now guys let's say very randomly
204:51 - you want to generate some kind of
204:54 - element so what you can do is simply
204:55 - have the print statement over here and
204:57 - simply use the random module in this
205:00 - case so I'll just remove this part of
205:02 - this line and then we can have the
205:05 - random followed by dot we have something
205:07 - called as random function over here this
205:10 - line of code will generate any element
205:12 - over here so let me just save this file
205:13 - and try running this code so as you can
205:15 - see we are getting a float number
205:18 - 0.104 and so on and then let me just run
205:21 - this code once again as you can see we
205:22 - are getting another number over here and
205:25 - then let me just run this code 0.99 so
205:28 - this line of code is helping us in order
205:30 - to generate the random numbers over here
205:32 - in this case so guys this is the way
205:34 - that you can use random module over here
205:36 - in this case in order to randomly
205:38 - generate some numbers or randomly
205:40 - Shuffle the value values inside the list
205:42 - that is present list in Python
205:44 - Programming so guys a list is a
205:46 - collection of similar or different types
205:48 - of data so for example suppose we need
205:51 - to record the age of five students so
205:54 - instead of creating five separate
205:56 - variables we can simply create a list so
205:59 - as you can see this is the way that we
206:00 - create the list first of all on the left
206:02 - hand side we have the variable name and
206:05 - then on the right hand side inside the
206:07 - open and close square brackets we have
206:09 - the list of elements which are separated
206:11 - using the commas so I'll just copy this
206:14 - line of code over here and then let us
206:16 - move to the vs code and paste this so as
206:18 - you can see on the left hand side it is
206:20 - the variable name of the list and on the
206:22 - right hand side we have the age of all
206:24 - the students over here and simply we can
206:26 - print the list by using the print
206:29 - function after this we can provide the
206:31 - variable name that is list so let me
206:33 - just save this file enter I running this
206:34 - code now as you can see we are getting
206:36 - the list of all the elements in the
206:38 - sequence that we had provided over here
206:41 - it is very important that all these
206:43 - elements are separated using the commas
206:45 - over here now guys the list can have the
206:47 - same kind of elements that is this one
206:49 - is having the list of integers data type
206:52 - only but we can also have the string as
206:55 - well in between so let's say we have a
206:57 - string called John over here in between
207:00 - this list of elements so this is also
207:03 - possible it will not throw any error
207:05 - while we are running this code so let me
207:07 - just save this file andent I running
207:08 - this code now as you can see we are
207:10 - getting the list of all all the values
207:12 - 17 18 and then we are getting John and
207:14 - then 19 and then 14 so this is a kind of
207:17 - a heterogeneous list whereas when we
207:19 - have the same kind of data type in the
207:22 - list then it is called the homogeneous
207:24 - list now how do we access the python
207:26 - list element so basically this is one
207:28 - way in order to access the list but what
207:30 - if we want to access only a single
207:32 - element by using this print statement we
207:35 - have accessed all the elements over here
207:37 - but in case we want to access a
207:39 - particular element from this list then
207:41 - what we can do is in Python each item in
207:44 - a list is associated with a number so
207:46 - the number is known as a list index so
207:49 - basically all these numbers that is the
207:51 - elements of the list that are present
207:53 - inside the list so these are associated
207:56 - with the indexes which starts from zero
207:58 - so the 17 number is at the zeroth index
208:01 - 18 number is at the first index and so
208:04 - on this is at the second index third
208:06 - index and then so on so basically these
208:08 - elements can be accessed using these
208:11 - indices so as you can see we can access
208:13 - elements of an array using the index
208:15 - number now how do we access them so what
208:17 - we can do is we simply come over here
208:19 - I'll simply change this to the number 15
208:22 - that was there previously and what we
208:24 - have to do is let's say I want to access
208:26 - this element that is the fourth element
208:28 - so what will be the index so this is
208:30 - zeroth index then we have one and then
208:32 - two and then three so this is the third
208:34 - index so we can access by using the
208:36 - variable name followed by open and close
208:39 - square brackets and inside those
208:41 - brackets we have to provide the index
208:43 - number that is three in this case which
208:45 - represents this number that is 19 so let
208:47 - me save this file and try running this
208:49 - code now as you can see we are just
208:51 - getting 19 over here previously we were
208:53 - getting the entire list when we don't
208:55 - provide this index number I'll save this
208:57 - file so as you can see all the values
208:59 - are getting printed but when we provide
209:01 - the index number let's say I want to
209:03 - print 18 this time which is at the index
209:05 - one after this index which is zero so I
209:08 - provide list of one over here save this
209:10 - file and run this code so as you can see
209:12 - 18 is getting displayed and this is how
209:15 - it is one way in order to access a
209:17 - particular single element inside this
209:19 - list by using the index number now it is
209:22 - also possible that we provide the
209:24 - negative index in Python so python
209:26 - allows negative indexing for its
209:28 - sequences the index of minus one refers
209:31 - to the last item minus 2 to the second
209:34 - last item and so on so for now we know
209:36 - that the zero index is the first element
209:39 - over here and then the first index is
209:40 - the second element but what about the
209:42 - last element let's say we don't know the
209:45 - length of the list like how many
209:46 - elements are present inside the list and
209:48 - we want to get the last element over
209:50 - here so since the first element is at
209:53 - the zero index the previous index that
209:55 - is before zero which is minus1 it will
209:58 - point to the last index of this list
210:01 - that is 14 over here so what if we
210:03 - simply do list of minus one in this case
210:06 - so I'll just provide minus1 in this case
210:09 - let me save this file inter running this
210:11 - code as you can see we are getting 14 so
210:13 - basically the minus1 index will point to
210:16 - the last element of the list in this
210:19 - case let's say we want to get the second
210:21 - last element so in this case we will
210:23 - simply provide min-2 so after minus1 we
210:26 - are having min-2 which will be the
210:27 - previous element of the last element so
210:30 - let me just save this file and try
210:31 - running this code now so as you can see
210:33 - 19 is getting displayed now and this is
210:35 - the way that we can also use the
210:37 - negative indexing as far as accessing
210:39 - the last elements of the list list are
210:41 - concerned now there is another concept
210:43 - of slicing in Python list so in Python
210:46 - it is possible to access a section of
210:48 - items from the list using the slicing
210:51 - operator which is nothing but a colon
210:53 - not just a single item so let's say we
210:56 - want to access the second and third
210:58 - elements inside the list so we have to
211:00 - use the slicing operator in this case
211:02 - now what is the slicing operator while
211:04 - providing the indices inside the open
211:06 - and close brackets we have to provide
211:09 - the indices and separate them using
211:11 - using the colon so what is the index of
211:13 - the second element it is one over here
211:15 - since the first element is having the
211:16 - zeroth index we don't want that we want
211:18 - to start from the first index and then
211:20 - we also want the second index so this
211:23 - time we have to provide the next number
211:25 - that is at the third index now so after
211:28 - this one that is the first index we have
211:30 - to provide colon and then we provide
211:32 - three over here so three is not included
211:35 - in this case please remember that
211:37 - whenever you are providing the ending
211:39 - index that element will not be included
211:41 - whenever you are using the slicing
211:43 - operator over here so the elements that
211:45 - will be considered in this case will be
211:46 - at the index one and at the index 2
211:49 - which means 18 and 15 so let me save
211:51 - this file and try running this code now
211:53 - as you can see we are getting 18 and 15
211:55 - only let's say you want to get all the
211:58 - elements starting from this 18 so this
212:00 - index is 18 right now and there is no
212:03 - end index that you want to specify over
212:05 - here so we simply have to remove this
212:07 - three and then we can simply specify one
212:09 - followed by the col so this will make
212:12 - python interpretor to consider all the
212:14 - elements after the first element
212:16 - including the first element itself so
212:18 - let me just save this file now and try
212:20 - running this code so as you can see we
212:21 - are getting all the elements that is 18
212:23 - 15 19 and 14 starting from the first
212:27 - index over here so guys this is the way
212:29 - that we can use slicing in the python
212:31 - list also in order to consider all the
212:33 - list elements over here we need not have
212:35 - to specify any of the indexes if we
212:37 - simply provide the colon over here all
212:39 - the elements will be con considered let
212:41 - me just save this file and try running
212:42 - this code now so as you can see all the
212:45 - elements are getting considered but this
212:46 - thing is kind of a redundant over here
212:48 - that's because if we simply provide the
212:50 - variable name that is list still all the
212:52 - elements will be considered so if we run
212:54 - this code once again so all the elements
212:56 - are being considered over here only when
212:58 - you want to consider the subset of this
213:01 - list you have to use the slicing inside
213:03 - the python list now let us move to the
213:05 - next concept how do we add the elements
213:07 - to a python list so there are two ways
213:09 - to add the elements in the python list
213:11 - the first way is to use the upend
213:13 - function which will help us in order to
213:16 - add a single item in the list and the
213:18 - second way is to use the extend function
213:20 - in order to add another list to the
213:22 - already existing list so let us check
213:24 - this with the help of examples now over
213:26 - here let's say we already have this list
213:28 - of values inside the list variable and
213:31 - now we want to add more elements so what
213:33 - we will do is we will say list followed
213:35 - by Dot and then we have something called
213:37 - as append so this is a function which
213:39 - will take a single element and it will
213:41 - add to the end of this list so let's say
213:43 - I want to provide 25 as the age of
213:46 - another student so let me just save this
213:48 - file now and try running this code so as
213:51 - you can see this element that is 25 it
213:53 - is already added at the end of the list
213:55 - now and in this way we can use the upend
213:58 - function to add more elements inside the
214:00 - list now let's say we have another list
214:02 - over here let's say I provide a list one
214:04 - and the numbers I provide is 1A 2 comma
214:07 - 3 over here so three elements are there
214:09 - and we want to add all these elements to
214:11 - the original list that is list variable
214:14 - so what we can do is we can use the
214:16 - extend function in this case so we have
214:17 - to use this list variable which is the
214:19 - original list variable followed by Dot
214:22 - and then we have the extend function and
214:24 - inside the parenthesis we have to
214:26 - provide this argument that is list one
214:29 - which is another variable having the
214:30 - list of elements and now if we print
214:33 - this list it will have the updated list
214:35 - of values so let me just save this file
214:37 - and try running this code now so as you
214:39 - can see after this 14 1 2 3 elements are
214:42 - also getting added over here since we
214:44 - have used the extend function in this
214:46 - case let us move to another section can
214:48 - we change the list items so basically
214:51 - the python list are mutable meaning list
214:53 - are changeable and we can change items
214:56 - of a list by assigning new values using
214:58 - equal to operator so what I will do over
215:01 - here is I'll just remove these lines of
215:02 - code so I'll simply provide the original
215:05 - list over here so we will say
215:08 - original list followed by colon and then
215:11 - we will print the list so let me just
215:12 - save this file and try running this code
215:14 - now we have the original list over here
215:17 - I'll just spell this correctly so we
215:19 - have the original list 17 18 15 19 and
215:22 - then 14 now let's say at the third
215:24 - position that is 15 we want to change
215:26 - this element to 10 now this is being
215:28 - referred to the second index over here
215:30 - so this is zero index then one and then
215:33 - second index so what we have to do is
215:35 - simply we have to provide list followed
215:37 - by inside the square brackets we will
215:39 - provide the index number number that is
215:41 - two and then equal to the new value that
215:43 - is 10 that we want to replace it with
215:45 - and then again what we will do is I'll
215:47 - simply copy this line of code and paste
215:49 - this over here and then we will say
215:51 - updated list and let me just save this
215:54 - file now and try running this code so
215:56 - basically as you can see original list
215:58 - it is having 15 at the third position
216:01 - over here that is at the second index
216:02 - and the updated list is having the
216:04 - number 10 at the same second index over
216:06 - here and this is the way that we can
216:08 - update the list elements so since python
216:10 - list are mutable we can change the
216:12 - elements of the list as well now
216:14 - removing an element from the list so
216:16 - there are two ways either we can use the
216:18 - D function or else we can use the remove
216:21 - function as well so let's say over here
216:22 - we have the original list now so I'll
216:24 - just remove these lines of code and then
216:26 - we can use the deel function and Then
216:29 - followed by list and let's say I want to
216:32 - remove this fourth element that is at
216:34 - the index three which is 19 so I'll just
216:36 - provide list of three in this case and
216:38 - then what I will do is I will print the
216:40 - updated list once again so I'll just
216:42 - change this to updated list so basically
216:45 - we are using the de method over here and
216:48 - deleting the third index inside this
216:51 - list so let me just save this file and
216:52 - try running this code now so as you can
216:54 - see we are getting the updated list as
216:56 - 17 18 15 and 14 this element that is 19
216:59 - it was removed already now instead of
217:02 - this we can also use the remove method
217:04 - so in that case we have to use the
217:06 - variable name first in the deel method
217:09 - that is the delete method we simply used
217:11 - the function name and provided the
217:13 - element from the list in order to remove
217:15 - from that list but over here we have to
217:17 - provide the variable name followed by
217:19 - Dot and then we can simply use the
217:21 - remove function and Then followed by the
217:24 - position so which position we want to
217:25 - remove so let's say I want to remove
217:27 - this element that is 18 over here so in
217:29 - this case we have to provide the value
217:32 - of the element that is present inside
217:33 - the list so in this case we provide 18
217:36 - in the previous example that we have
217:39 - taken using the D method we used the
217:42 - index number of the element that is
217:44 - present inside the list but in this case
217:46 - we have to use the value in order to
217:48 - remove it so I'll just save this file
217:49 - and try running this code now as you can
217:51 - see 18 was present in the original list
217:54 - but in the updated list we don't have 18
217:56 - it is 17 15 19 and 14 and in this way we
217:59 - can remove the elements from the list as
218:01 - well now very important operation how do
218:03 - we iterate through a list so basically
218:05 - we can use the for Loop to iterate over
218:08 - the elements of a list so till now what
218:10 - we have seen is we have just used the
218:12 - list that is the variable name in order
218:14 - to print the elements of those list now
218:16 - if you notice we are getting the square
218:18 - brackets over here open and close square
218:20 - brackets within which all the elements
218:22 - are getting printed but let's say we
218:24 - don't want those square brackets and one
218:26 - by one we want to print all the elements
218:28 - at a time so what we can simply do is
218:30 - use the for Loop and we have seen in the
218:33 - previous videos as well the syntax of
218:35 - the Fall Loop we have to use the for
218:37 - keyword followed by let's say a
218:39 - temporary variable name that is item
218:41 - followed by the in keyword and then we
218:43 - have to provide the sequence at is list
218:46 - and then after that we have the colon
218:48 - and then we can have the print statement
218:50 - over here now in the print statement if
218:52 - we only provide one item that is item in
218:55 - this case so every time all the elements
218:58 - will be printed on the separate lines
219:00 - over here so let us just try this code
219:02 - so we'll just save this file and try
219:03 - running this code now as you can see 17
219:06 - 18 15 19 14 all the elements are getting
219:09 - printed on the separate lines what if we
219:11 - want all the elements to be present on
219:13 - the same line so what we can do is after
219:16 - providing comma over here we have the
219:19 - end parameter inside the print function
219:21 - and this end parameter we can have the
219:23 - comma as the character by which we can
219:26 - separate all the elements so by default
219:28 - this is slashing character which means
219:30 - the next element will be printed on the
219:32 - next line but if we specify this in this
219:34 - way all the elements will be printed on
219:36 - the same line so let me just save this
219:38 - file now and try running this code so as
219:40 - you can see all the elements are getting
219:42 - printed on the same line in the same
219:44 - sequence that is present inside this
219:45 - list so in this way we can iterate
219:47 - through all the elements inside the list
219:49 - that are present by using the fall Loop
219:51 - over here now another important thing
219:53 - how do we find the list so we have
219:55 - something called as python list length
219:57 - so in Python we use the Ln function to
220:01 - find the number of elements present in a
220:03 - list so we can have any number of
220:04 - elements inside the list over here so
220:06 - there is no limit on the number of
220:08 - elements that we are supposed to have in
220:10 - inside the python list so in case if we
220:12 - want to find the number of elements
220:14 - inside the list we can simply use the
220:16 - length function so we can simply print
220:19 - this and then we can have Ln which is a
220:22 - function and then we can provide the
220:24 - variable name of the list inside this
220:26 - Len function over here so it will return
220:29 - us the count of the elements inside the
220:31 - list so let me just save this file and
220:32 - try running this code now as you can see
220:35 - five that is the count of the number of
220:37 - elements inside the list is present over
220:39 - here if we provide some more elements
220:41 - over here let's say I have provided five
220:43 - more elements inside the list let me
220:44 - just save this file now and try running
220:46 - this code so we are getting the updated
220:48 - count that is 10 so 10 is the number of
220:50 - elements set are present inside the list
220:52 - and that is how we can easily find the
220:55 - length of the list in this case by using
220:57 - the Ln function over here so Guys these
220:59 - were certain operations as far as list
221:01 - variable is concerned please make sure
221:03 - that you practice on your own and as a
221:05 - homework for you there is something
221:06 - called as a sort function which can help
221:08 - you in order to sort all the elements
221:11 - inside the list so you can practice on
221:13 - your own as a homework for you in order
221:15 - to sort the elements inside the python
221:17 - list and print on your own tle in Python
221:20 - Programming so guys a tupple in Python
221:22 - is similar to a list basically the
221:24 - difference between the two is that we
221:26 - cannot change the elements of a tle once
221:29 - it is assigned whereas we can change the
221:31 - elements of a list so previously in the
221:33 - examples of the list that we have seen
221:35 - we were able to change the elements
221:38 - inside the list but the same thing
221:39 - cannot not be done with the elements
221:41 - that are present inside the Tuple so how
221:43 - do we create a tupple a tupple is
221:45 - created by placing all the items that is
221:48 - elements inside the parenthesis so we
221:50 - have this open and close parenthesis
221:52 - whereas in the list we were using open
221:54 - and close square brackets now these are
221:56 - supposed to be separated by commas over
221:58 - here the parenthesis are optional
222:01 - however it is a good practice to use
222:02 - them so a tle can have any number of
222:05 - items and they may be of different types
222:07 - that is integer float list string Etc so
222:11 - guys let us check this with the help of
222:12 - example now over here as you can see we
222:14 - have my tle which is the name of the
222:16 - variable that we have given and 1 2 3
222:19 - these are the elements that is present
222:20 - inside the Tuple if you notice we have
222:23 - this open and close parenthesis inside
222:25 - of the square brackets and that is the
222:27 - difference between the list and the tle
222:29 - over here so let us move to the vs code
222:31 - and simply we will provide tle one as
222:34 - the variable name over here equal to
222:36 - followed by open and close parenthesis
222:38 - and let's say we Define five elements 1
222:40 - to five over here so this is nothing but
222:43 - we have defined the tle and we can
222:45 - simply print this tle by using the
222:47 - variable name tle one over here so let
222:49 - me just save this file and try running
222:51 - this code now as you can see we are
222:53 - getting all the elements that is 1 2 3 4
222:55 - 5 and in this way we have easily created
222:58 - and printed the tle elements over here
223:00 - now guys an important thing over here
223:02 - let's say you want to create a python
223:04 - tupple with only one element so in this
223:06 - case what happens is let's say if you
223:08 - provide where one that is variable one
223:10 - over here and you provide double Cotes
223:12 - that is hello with this open and close
223:15 - parenthesis in this case this will be
223:17 - considered as a string whereas in the
223:19 - variable two what you do is after this
223:22 - hello you provide a comma so in this
223:24 - case it will be considered as a tle so
223:26 - this is very important thing if you want
223:28 - to create a tupple with just a one
223:30 - element you have to use the comma after
223:33 - providing that element over here let us
223:35 - check this with the help of examples now
223:37 - over here let's say I provide where one
223:40 - in this case and then open and close
223:42 - parenthesis and then let's say we have
223:45 - hello over here and then I'll just copy
223:47 - this line of code and paste this and
223:49 - I'll simply provide comma after this
223:51 - element so what we will do is I'll just
223:54 - name this variable name as where two so
223:56 - let us now confirm the data types of
223:58 - both the variables so we will say print
224:00 - and then inside this we will use a type
224:02 - function in order to find the data type
224:05 - of where one so we provide where one
224:08 - over here and I'll simply copy and paste
224:10 - this line of code and we provide where
224:12 - to over here so let me just save this
224:14 - file now and try running this code so as
224:16 - you can see first one it is showing us
224:18 - that it is a string and the second thing
224:20 - is showing us that it is a tuple now in
224:22 - case if we simply remove this comma from
224:25 - this tle so what happens so let me just
224:27 - save this file and try running this code
224:29 - once again as you can see it has become
224:30 - string now both are strings right now if
224:33 - we provide comma over here and comma
224:35 - over here as well so both the variables
224:38 - will be turned to the topple data type
224:40 - so guys this is very important if you
224:42 - want to have only one element inside the
224:44 - Tuple make sure that that element is
224:47 - followed by a comma over here in order
224:49 - to make that data type as a tle now guys
224:51 - moving to next section how do we access
224:53 - the python tupple elements so there are
224:56 - multiple ways in order to access the
224:58 - elements over here first of all is
224:59 - indexing so this we have already seen
225:01 - previously by using the index number we
225:04 - can access the elements of the tle so
225:06 - let's say we have tupple one over here
225:09 - and we have five elements 1 2 3 4 5 so
225:13 - how do we access these elements by using
225:15 - the indexes so we simply have to provide
225:18 - the doule one that is the variable name
225:20 - and Then followed by open and close
225:22 - square brackets this time and let's say
225:24 - we want to print the element that is
225:27 - three over here every time remember guys
225:29 - that the index it starts from zero so
225:31 - this first element that is number one it
225:34 - is at the index zero and then the second
225:36 - element that is number two it is at the
225:38 - index one and then the the third element
225:40 - that is number three it is at the index
225:42 - two over here so we provide the number
225:45 - that is two which is the index number in
225:47 - this case so this will tell the python
225:49 - interpretor to access the element that
225:52 - is at the index number two for this
225:54 - variable that is tle one so over here
225:57 - what will happen is the index number
225:58 - zero is this and then index number one
226:00 - is this and then we have index number
226:02 - two which is three over here and this
226:04 - element should be printed so let me just
226:06 - save this file and try running this code
226:08 - now so as you can see three is getting
226:10 - printed similarly let's say if you want
226:12 - to print this number two which is at the
226:14 - index one in this case so we have to
226:16 - provide one inside this open and close
226:18 - square brackets so let me save this file
226:21 - and try running this code now so two is
226:23 - getting printed this time so guys this
226:25 - is one way in order to access the
226:27 - elements by using the indexing we also
226:30 - have something called as negative
226:31 - indexing so let's say if you don't know
226:34 - the number of elements that are present
226:36 - inside the Tuple whereas there is a way
226:38 - in order to find the length of the the
226:39 - tle but in case you want to access the
226:42 - last element of this Tuple over here so
226:44 - you already know that the first element
226:46 - is at the index zero so let me just
226:49 - print that so over here we provide tle
226:51 - one followed by the index number that is
226:53 - zero in this case I'll save this file
226:55 - and try running this code so one is
226:57 - getting printed now let's say you want
226:59 - to print the last element but you don't
227:01 - know at which index it is so we have
227:03 - something called as negative indexing in
227:05 - which case before the zero index the
227:08 - index that is minus one it will point to
227:10 - the last element of this tle that is
227:13 - five over here so when we provide minus
227:15 - one in this case this element that is
227:18 - five should get printed so let me save
227:20 - this file and try running this code now
227:22 - so five is getting printed similarly if
227:24 - you want to get the second last element
227:27 - of this tle you can simply provide minus
227:29 - two over here so when we provide minus
227:32 - two and run this code so four is getting
227:34 - displayed which is the second last
227:36 - element so this is like a cycle over
227:38 - here when you use the negative indexing
227:40 - the last elements of this tle will start
227:43 - getting printed over here and then guys
227:45 - you can also use the slicing
227:47 - functionality as we have already seen
227:49 - with the list so basically let's say if
227:50 - you want to print the subset of this tle
227:53 - between 2 to 4 so what you can do is
227:56 - what is the index of this element that
227:57 - is two it is zero and then one so at the
228:00 - first Index this two is present so we
228:02 - will provide one over here followed by a
228:05 - colon and then what is the index of the
228:08 - element that we want that is four so the
228:10 - index is it is 0 1 2 and then this index
228:14 - is three but we don't want to specify
228:16 - three because this is excluded so the
228:18 - next index which is four we have to
228:20 - specify that index which will be not
228:22 - included in our slicing operator so when
228:24 - we provide four over here always
228:26 - remember that this index on the left
228:28 - hand side will be considered but this
228:30 - index will not be considered the fourth
228:32 - index will not be considered but before
228:34 - this that is the third index will be
228:36 - considered while printing the statement
228:38 - so let me just save this file and try
228:40 - running this code now so as you can see
228:42 - 2 3 and four is getting printed the last
228:45 - index that is four which is having the
228:47 - element five this will not be considered
228:49 - because it is not included in the
228:50 - slicing operator so these are some of
228:52 - the ways that you can use in order to
228:54 - access the python tupple elements over
228:57 - here now python tupple methods there are
228:59 - two methods only that is count and index
229:02 - over here what is count so basically in
229:04 - order to get the number of occurrences
229:06 - of a particular element you can use the
229:08 - count method so over here while using
229:11 - the count function we have to use the
229:13 - variable name followed by Dot and then
229:15 - as you can see count and index these are
229:18 - the only two methods the other methods
229:20 - such as appending or removing or
229:21 - deleting the elements are not present
229:23 - that's because as I've already told you
229:25 - the tle inside python are not mutable
229:28 - which means we cannot change the
229:30 - elements once they are assigned over
229:32 - here so when we provide count we have to
229:35 - provide one of the elements inside that
229:37 - tle so let's say we want to find the
229:39 - occurrence of the element that is two
229:40 - over here in this case that means how
229:42 - many times this number two is occurring
229:44 - so let me save this file now and try
229:46 - running this code so as you can see the
229:48 - count is one over here that's because
229:50 - only one occurrence of number two is
229:52 - present let's say I provide some more
229:53 - occurrences over here so I provide the
229:55 - number two two times over here so the
229:58 - total count becomes three in this case
230:00 - over here we have two and then two more
230:02 - twos are present so basically the total
230:04 - count is three let me just run this code
230:06 - once again so number of twos that are
230:08 - present over here inside the topple is
230:10 - three and that is what we are getting
230:12 - over here and this is the main
230:13 - functionality of the count function now
230:16 - the another function that is index so if
230:18 - you want to get the index of a
230:20 - particular element you can use the index
230:22 - function so after this dot we have
230:24 - something called as index and then
230:27 - inside the open and close parenthesis we
230:29 - have to provide the element for which we
230:31 - want to find the index so let's say I
230:33 - want to find the index of this element
230:35 - that is number five over here so it is
230:37 - four basically let me just save this
230:39 - file and try running this code and
230:41 - confirm so as you can see four that is
230:43 - the index of this element is getting
230:45 - printed over here so Guys these
230:46 - functions you can use based on your
230:48 - requirements as far as tupple is
230:49 - concerned now one very important thing
230:51 - iterating through a tupple in Python so
230:54 - we can use the for Loop to iterate over
230:56 - the elements of a tupple so basically we
230:58 - have seen this in the previous video as
230:59 - well so far we have printed the elements
231:01 - of the tupple by using the variable name
231:04 - in this way so let me just save this
231:05 - file now and try running this code as
231:07 - you can see all the elements are getting
231:09 - printed but there is a problem over here
231:11 - we are getting this open and close
231:13 - parenthesis also while printing these
231:15 - elements what if we only want to print
231:17 - single element at a time so we can
231:19 - simply use the for Loop and iterate
231:22 - through all the elements over here
231:23 - inside the tle so we use the for keyword
231:26 - followed by let's say the temporary
231:28 - variable as the item and then we have
231:30 - the in keyword and then the name of the
231:32 - variable that is the sequence which is
231:34 - tle one in this case and then we simply
231:37 - have to print this item that is item
231:40 - variable now what will happen is all the
231:42 - items will be printed on separate lines
231:45 - over here because by default the end
231:47 - parameter of this print function is
231:49 - having the slend character so let me
231:51 - just save this file and try running this
231:53 - code now as you can see all the elements
231:55 - are getting printed on the new line what
231:57 - if we want all the elements to be
231:59 - present on the same line separated by
232:01 - comma over here so we simply have to
232:03 - provide comma and then there is
232:04 - something called as end parameter for
232:06 - this print function so we use that and
232:09 - inside the double codes we provide the
232:11 - comma over here which will be kind of a
232:13 - separate for all those Elements which
232:15 - will be printed on the terminal so let
232:17 - me just save this file now and try
232:19 - running this code so as you can see all
232:21 - the elements now are getting printed on
232:23 - the same line and they are separated
232:25 - with a comma if you want a space
232:27 - character after comma that can also be
232:29 - done you provide comma followed by the
232:31 - space character let me just save this
232:33 - file now and try running this code so
232:35 - all the elements are separated with a
232:37 - comma character and then a space
232:39 - character additionally for a better
232:40 - readability so guys this is another way
232:43 - you can use the for Loop in order to
232:45 - iterate through all the elements of the
232:47 - Tuple now let us understand what are the
232:49 - different advantages of a tupple over
232:51 - list in Python so we generally use
232:53 - tuples for heterogeneous that is
232:55 - different data types and list for
232:57 - homogeneous which means similar data
232:59 - types so in a tle you can have the
233:01 - different data types as well so
233:03 - basically the tupple is being used for
233:05 - that purpose only and we cannot change
233:07 - the elements inside the tupple so since
233:10 - tuples are immutable which means you
233:12 - cannot change a data inside the tupple
233:14 - once they are assigned iterating through
233:16 - a tupple is faster than with a list so
233:18 - behind the scenes what is happening is
233:20 - the program already knows that the
233:22 - tupple elements will not be changed and
233:24 - for this reason the tupple is little bit
233:26 - faster compared to the list so there is
233:28 - a slight performance boost over here now
233:30 - tles that contain immutable elements can
233:33 - be used as a key for a dictionary as
233:36 - well with a list this is not possible so
233:38 - inside a dictionary as you must be
233:40 - knowing there are key value Pairs and
233:42 - the elements of the tle can be
233:43 - considered as keys for the dictionary if
233:46 - you have data that doesn't change
233:47 - implementing it as a tle will guarantee
233:50 - that it remains right protected so
233:52 - nobody can change the elements of a tle
233:55 - if you want some data to be fixed
233:57 - whenever you are implementing the list
233:59 - of elements that should be present in a
234:01 - sequence and that must not be changed so
234:04 - Guys these are certain advantages of a
234:05 - tle over a list in Python Programming
234:08 - string in py Pyon programming so guys in
234:10 - computer programming a string is a
234:12 - sequence of characters so for example as
234:15 - you can see this hello word it is the
234:17 - string which is the sequence of
234:19 - characters that is h e l o so this is a
234:23 - string containing the sequence of these
234:25 - characters and we call it as a string
234:27 - now we use the single quotes or double
234:29 - quotes to represent a string in Python
234:32 - so basically whenever we are defining a
234:34 - string we use the sequence of characters
234:36 - which are supposed to be enclosed Within
234:38 - These double codes or else we can use
234:40 - the single codes as well so as you can
234:42 - see for example Str Str that is the
234:44 - variable name that we have taken over
234:46 - here followed by the equal to operator
234:49 - we have the string that is programming
234:50 - for beginners which is the name of the
234:52 - YouTube channel which you should
234:54 - definitely subscribe and this is
234:55 - enclosed within the two double codes
234:57 - over here so let us check this with the
234:59 - help of example now we have Str Str it
235:01 - is equal to inside the double codes we
235:04 - can provide our string that is
235:06 - programming for beginners over here and
235:09 - then simply we can print the string by
235:11 - using the print function so we have
235:12 - print followed by open and close
235:14 - parenthesis and then we provide this St
235:17 - variable name let me just save this file
235:19 - now and try running this code as you can
235:21 - see programming for beginners is getting
235:23 - printed now now what are the different
235:24 - operations how do we access string
235:27 - characters in Python so let's say if I
235:29 - only want to print this character that
235:32 - is p over here how can we do that so one
235:35 - way in order to do that is by using the
235:37 - indexing which means we can use the
235:39 - index number basically the indexes that
235:42 - we have seen in the list and tle in the
235:44 - previous videos are also applicable over
235:47 - here for Strings as well so this letter
235:49 - that is p can be accessed by using the
235:52 - index number which starts from zero so
235:54 - this is the zeroth index number which
235:56 - defines this P character the next
235:58 - character that is R it is at the first
236:00 - index number and then the next character
236:02 - is at the second index number and so on
236:05 - so we can simply use the variable name
236:07 - and then inside the open and close
236:09 - square brackets we can provide the index
236:11 - number so over here after the variable
236:14 - name inside the open and close square
236:16 - brackets as you can see we provide the
236:18 - index number that is zero which will
236:20 - point to this character that is p over
236:22 - here so let me just save this file and
236:24 - try running this code now as you can see
236:26 - p is getting printed over here now let's
236:29 - say we want this o to be printed so what
236:31 - is the index number for this so the
236:33 - first one is zero index and then we have
236:35 - first index over here and then this o is
236:38 - at the second index number so we provide
236:40 - number two that is inside the open and
236:43 - close square brackets let me just save
236:45 - this file now and try running this code
236:47 - so as you can see o is getting printed
236:49 - and in this way if you want to access a
236:51 - single character from the string you can
236:53 - use the index number in order to access
236:56 - them now there is another variation we
236:58 - can also use the negative indexing which
237:00 - means the negative index numbers can
237:03 - also be used in order to access the last
237:06 - elements of the string so let's say if
237:08 - you want want to access the last element
237:10 - first element is having the index number
237:12 - zero and the previous index number that
237:14 - is before the number zero we have minus
237:16 - one in the number system so minus1 will
237:19 - refer to the last element inside this
237:22 - sequence of characters which is s over
237:24 - here so when we provide minus one in
237:26 - this case inside the open and close
237:28 - brackets so let me just save this file
237:30 - and try running this code as you can see
237:32 - s is getting printed so minus one is
237:35 - pointing to this character that is s
237:37 - what will be the second last character
237:39 - it will be minus two in this case so
237:41 - when we provide minus two save this file
237:43 - enter I running this code so as you can
237:45 - see this R is getting printed over here
237:48 - and in this way we have the negative
237:50 - indexing Concept in Python Programming
237:52 - now there is another way we can use the
237:54 - slicing operator in order to print the
237:57 - subset of the sequence of characters so
238:00 - let's say if we only want this
238:02 - programming word to be printed instead
238:05 - of programming for beginners that is the
238:07 - entire string so what we can do is so we
238:09 - have to mention the indices in order to
238:11 - print these characters only so it starts
238:14 - from zero and then we have 1 2 3 4 5 6 7
238:20 - 8 9 10 and then we have to take extra
238:24 - index number that is 11th as well
238:26 - because that last index number is not
238:29 - included whenever we are using the
238:30 - slicing operator so the indexes will be
238:33 - between 0 to 11 in this case so how do
238:35 - we provide that range we provide zero
238:37 - first that is the left left hand side
238:39 - index followed by the colon and then we
238:41 - provide 11 that is the second index up
238:43 - to which all the characters must be
238:45 - taken and printed over here so as you
238:47 - can see this is the slicing of the
238:49 - sequence of characters let me just save
238:51 - this file enter I running this code now
238:53 - as you can see programming is getting
238:55 - printed over here let's say we want to
238:57 - include the characters up to F so we
238:59 - have to provide the index up to O over
239:02 - here so basically this was the 11th
239:04 - index and then we have 12th and then 13
239:06 - so over here what we can do is we can
239:08 - simply provide 13 in this case so let me
239:11 - save this file now and try running this
239:13 - code so as you can see programming word
239:15 - is getting considered and then after
239:17 - that we have the space and then f is
239:19 - also considered which is at the 12th
239:20 - index there is another way we can do
239:22 - this instead of providing this zero
239:25 - index we can just remove this so by
239:27 - default it will take from the start of
239:29 - the string that is all the characters
239:31 - starting from the zero index over here
239:33 - so let me just save this file and try
239:34 - running this code now so as you can see
239:36 - again we are getting the same output
239:38 - that that is programming up to the F
239:40 - character over here what if we want from
239:42 - this o character which is at the 13th
239:44 - position up to the last position so what
239:47 - we can do is we can simply provide the
239:49 - 13th index number which will start the
239:51 - string from this particular character
239:53 - and Then followed by colon and there is
239:55 - no need to provide the last index
239:57 - because we want all the characters to be
239:59 - included so this is the slicing operator
240:01 - for us we have the 13 index number and
240:03 - then colon over here let me just save
240:05 - this file now and try running this code
240:07 - so as you can see after after F we are
240:09 - getting o r over here and then we have
240:11 - the space character and then we have the
240:13 - beginners as well so this is the way
240:14 - that we can use the slicing in Python in
240:17 - order to get the substring from the
240:19 - entire string that we have already
240:21 - defined now guys very important python
240:23 - strings are immutable so in Python
240:25 - strings are immutable that means the
240:27 - characters of a string cannot be changed
240:29 - so let's say this first character that
240:31 - is p if we want to change that character
240:33 - so what we will do is we will provide
240:35 - Str Str and Then followed by zero and
240:37 - then in instead of this P character
240:39 - let's say I want to provide the
240:41 - character Q over here and then let me
240:43 - just print this string once again so we
240:46 - will simply print the string let me just
240:48 - save this file and try running this code
240:50 - now as you can see we are getting the
240:52 - type error string object does not
240:54 - support item assignment so we cannot
240:56 - change any of the characters over here
240:58 - but there is another way to do this what
241:00 - we can do is simply we can copy this
241:02 - entire string value and paste this over
241:05 - here and then again instead of P we can
241:07 - provide Q over here but this time we
241:10 - have to remove this index number so this
241:12 - is possible because we are providing the
241:15 - reassignment of the string variable so
241:17 - let us check this we'll save this file
241:18 - and try running this code now as you can
241:20 - see we are getting Q over here and all
241:23 - the other characters are same so
241:24 - basically by immutable we mean that we
241:27 - cannot change a particular Single
241:29 - Character inside the string by using the
241:31 - index number for that particular
241:33 - character but in case if you want to
241:35 - reassign the entire string that can be
241:37 - done by using such reassignments
241:40 - operator now guys there is another
241:41 - important functionality in Python
241:43 - multi-line strings are allowed so
241:46 - basically we can also create a
241:47 - multi-line string in Python so for this
241:50 - we use the triple double codes or triple
241:52 - single codes over here so what we will
241:54 - do is let's say I'll just remove these
241:55 - lines of code and then I'll say Str Str
241:58 - it is equal to three * double codes over
242:01 - here we will use and then I will say
242:04 - this is first line and then on the next
242:08 - line we will say this is another line so
242:12 - this is basically the multi-line string
242:13 - that we have defined so how do we print
242:16 - this simply by using the normal way that
242:18 - is print function followed by the name
242:20 - of the string that is Str Str variable
242:22 - let me just save this file and try
242:24 - running this code as you can see the
242:26 - format in which we have return return
242:28 - the string that is the three double
242:30 - codes were there over here followed by
242:31 - on the next line we were having this is
242:33 - first line and then this is another line
242:36 - and then we were having another double
242:37 - codes over over here so these double
242:39 - codes followed by space characters and
242:41 - then between those space characters this
242:43 - is another line if we don't want these
242:45 - space characters soon after the double
242:47 - codes are being mentioned we have to
242:49 - provide the strings over here so the
242:52 - start of the double codes at the same
242:53 - line we are having this is first line
242:56 - and this is another line and then we
242:57 - have the three double codes on that same
242:59 - line so let me save this file now and
243:01 - try running this code so basically this
243:03 - is the format so whatever format we
243:06 - follow in this three double codes so
243:08 - three single codes the same format will
243:10 - be followed while printing those lines
243:12 - on the terminal now what are the python
243:14 - string operations basically you can
243:16 - compare two strings with the equal to
243:17 - operator over here as you can see so
243:19 - let's say we have two strings over here
243:21 - string one it is equal to let's say we
243:24 - have John and then string two it is
243:27 - equal to let's say we have the name
243:29 - Peter over here so we have Peter so what
243:32 - we will do is simply we will print Str
243:34 - str1 it is equal to Str str2 so this is
243:38 - nothing but we are comparing two strings
243:40 - by using the equal to equal to operator
243:42 - which we have done previously as well
243:44 - while we were using the relational
243:45 - operators in order to compare two
243:47 - numbers we can compare two strings in
243:49 - the same way as well it will either
243:51 - return true or false based on whether
243:53 - they are equal or not so let me just
243:55 - save this file and try running this code
243:56 - now as you can see we are getting false
243:59 - that's because the names are different
244:00 - so what if we make the names same so
244:02 - I'll just copy this value and paste this
244:04 - over here now both the strings are same
244:06 - St str1 and Str str2 both are having the
244:09 - value that is John so let me just run
244:10 - this code now as we can see we are
244:12 - getting true over here that's because
244:14 - both the strings are same in this case
244:16 - now there is another operation how do we
244:18 - join the two or more strings so we can
244:20 - do so by using the plus operator so
244:22 - let's say we go back over here once
244:24 - again we provide the string to as Peter
244:27 - and we want to join both the strings so
244:29 - in this case instead of equal to equal
244:31 - to what we will do is we will specify
244:33 - the string one that is St str1 and then
244:36 - plus operator and then followed by St
244:38 - str2 in this case so let me just save
244:41 - this file now and try running this code
244:43 - as you can see we are getting John Peter
244:45 - over here continuously there is no space
244:47 - character so either we can provide a
244:48 - space character over here or else we can
244:51 - have the space character inside the
244:53 - print function as well so we can have
244:55 - the double codes inside which we can
244:57 - have the space character and then again
244:59 - we have to use the plus operator in
245:01 - order to join these strings so let me
245:03 - just save this file now and try running
245:05 - this code so as you can see we are
245:06 - getting John Peter and then there is a
245:08 - space character in between so we can
245:11 - join multiple strings as well by using
245:13 - the plus operator over here the same
245:15 - plus operator will be used in order to
245:17 - add two numbers if these variables are
245:19 - numbers but in our case these variables
245:21 - are strings and that is why it is being
245:23 - used in order to join the two strings in
245:25 - this case now how do we iterate through
245:27 - a python string so basically we can
245:29 - iterate through a string by using the
245:31 - fall Loop so let us check this with the
245:33 - help of example now let's say we have
245:35 - string one over here we provide four
245:37 - follow followed by S which is the
245:39 - temporary variable and then we have the
245:41 - in keyword followed by Str str1 I'll
245:44 - just make this as item so that it is
245:46 - more user friendly in order to
245:48 - understand so basically Str str1 which
245:50 - is having the sequence of characters one
245:53 - character at a time will be assigned to
245:54 - this item variable and the control flow
245:57 - will go inside this fall Loop now inside
245:59 - this we can simply have the item being
246:01 - printed so when we provide item over
246:04 - here inside the print function and when
246:06 - we save this file enter IUN this code as
246:08 - you can see all the characters that is j
246:10 - o h n these are getting printed on
246:13 - separate lines how do we get them on the
246:15 - same line so what we can do is we can
246:17 - provide the end operator equal to we can
246:20 - simply provide the double codes and we
246:22 - don't have to provide anything over here
246:24 - if we want to separate all the
246:25 - characters with a comma we can provide
246:27 - comma over here as well so let me save
246:29 - this file and try running this code as
246:31 - you can see John is getting printed but
246:33 - all the characters are getting separated
246:35 - using the comma we can simply remove
246:37 - this comma over here I'll save this file
246:39 - and try running this code now as you can
246:41 - see we are getting John over here so
246:43 - since we have provided this end
246:45 - parameter with nothing but simply double
246:47 - codes we are getting all the characters
246:49 - or else when we don't provide this
246:51 - parameter by default the end parameter
246:54 - is having the Slash and character due to
246:55 - which all the items will be printed on
246:58 - the new lines there is another important
247:00 - thing how do we find the python string
247:02 - length so basically we can use the Len
247:04 - method to find the length of the string
247:06 - so let's say we have programming for
247:08 - beginner string over here so I'll just
247:10 - type programming for beginners and we
247:14 - want to find the length of the string
247:16 - that means how many characters are
247:18 - present inside the string so we can
247:20 - simply use the Len function that is the
247:22 - length function in order to print the
247:24 - count of the characters inside the
247:26 - string so we can have the L and function
247:29 - followed by inside the open and close
247:32 - parenthesis we have the variable name
247:34 - that is s Str over here so let me save
247:36 - this file and try running this code code
247:38 - so it is saying object of type type has
247:40 - no lens so basically we have provided
247:42 - Str Str over here instead we have to
247:44 - provide St Str one which is the variable
247:47 - name so that was the mistake so let me
247:48 - just save this file now and try running
247:50 - this code as you can see 25 we are
247:53 - getting that is the number of characters
247:55 - that are present inside the string let's
247:57 - say I add some more characters over here
247:59 - I provide 1 two which means I have added
248:01 - two more characters inside the string so
248:04 - that should be 27 in this case so when
248:06 - we just save this file now and try
248:08 - running this code we get 27 as the count
248:10 - which is the updated count of number of
248:12 - characters inside the string and that is
248:14 - how this length function will work in
248:17 - order to return you one particular
248:19 - integer which is the count of the number
248:21 - of characters inside the string now guys
248:23 - there is another important thing string
248:25 - membership test so basically this we
248:27 - have already seen we can test if a
248:29 - substring exist within a string or not
248:31 - using the keyword in so we have already
248:34 - used the fall loop as well and in the
248:35 - membership operator we have used the in
248:38 - keyword in order to find a particular
248:40 - letter is present or not inside the
248:42 - string so that you can take as a
248:43 - homework for you so that you can
248:45 - practice on your own you can find out
248:47 - whether the character X is present
248:49 - inside the string or not and if it is
248:51 - present then you should display true and
248:53 - if it is not present then you should
248:54 - display false comment in the comment
248:56 - section below what is the output of your
248:58 - program while using this membership
249:00 - operator that is in now guys very
249:02 - important thing there is something
249:03 - called as Escape sequences in Python now
249:05 - the escape sequence is used to escape
249:08 - some of the characters present inside a
249:10 - string so what we have done over here is
249:12 - while providing the string we are
249:15 - enclosing it using the double Cotes but
249:17 - what if the double quotes is a part of
249:19 - this string let's say I want to provide
249:21 - a double quotes over here before
249:23 - beginners so as you can see after
249:25 - providing the double codes we are
249:26 - getting a red underline over here which
249:28 - means there is some issue so what we can
249:30 - do is in order to avoid this issue and
249:33 - to make this as a part of this string we
249:35 - have to use the Escape character which
249:37 - means we have to use a back slash
249:39 - character over here just before the
249:41 - special character so this is the way
249:43 - that we use the Escape character we use
249:45 - the back slash character over here once
249:47 - and then followed by our special
249:49 - character which is causing the issue and
249:51 - in this case this double quat will be
249:53 - the part of the string now so let me
249:55 - just save this file and try running this
249:56 - code currently we are getting the length
249:58 - of the string what we will do is I'll
250:00 - just remove this length function so that
250:02 - we can print the value of the string so
250:04 - I'll just save this file and try running
250:06 - this code as you can the programming for
250:08 - and then we are getting the double codes
250:10 - over here which is the part of the
250:12 - string and then we have the beginners
250:13 - over here so this is the way in case you
250:15 - want to escape certain characters or
250:17 - special characters we can use the back
250:20 - slash which is known as the Escape
250:22 - character in Python Programming now guys
250:24 - there is another way in order to print
250:25 - the string by using the python string
250:27 - formatting so as you can see for example
250:29 - let's say we have the name that is John
250:31 - and we have age it is equal to 25 so one
250:34 - way that we can print both that is name
250:36 - and age is by using the multiple objects
250:38 - inside the print statement so let us
250:41 - check this so we have name over here
250:43 - which is John right now and then let's
250:46 - say we have age it is equal to 25 and we
250:50 - want to print both that is name and age
250:52 - within one print function so what we
250:54 - will do is we will say name is followed
250:58 - by comma and then we provide name and
251:00 - then again comma and then we have double
251:02 - codes and then we provide end age is
251:07 - followed by comma and then we have age
251:10 - over here so what we have done is this
251:12 - string will be printed that is name is
251:14 - followed by this name value will be
251:17 - taken from this variable that's because
251:19 - we have provided it outside the double
251:21 - quotes over here and after providing
251:23 - this comma and then again there is a
251:25 - comma and then we have a normal string
251:27 - label that is end ages and then we are
251:29 - specifying the age so this is one way in
251:32 - order to print both that is name and age
251:34 - in the same print statement so let me
251:36 - just save this file now and try running
251:38 - this code so as you can see name is John
251:41 - and age is 25 over here but guys this
251:44 - can be confusing since we have to use
251:46 - multiple commas over here as well as
251:48 - multiple double quotes as well so there
251:49 - is another way in order to print the
251:52 - same string so what we can do is again
251:54 - we can have the print function but this
251:56 - time what we will do is in the open and
251:59 - close parenthesis we provide the F
252:01 - character followed by single codes over
252:03 - here so inside the single codes we can
252:06 - provide the variable name that is name
252:09 - and age as well so in this case if we
252:11 - want to get the value of this name
252:13 - variable we have to enclose it within
252:16 - the curly braces so these are the curly
252:18 - braces as you can see we have the open
252:20 - and close curly braces and inside this
252:23 - we provide name over here so if we do it
252:25 - in this way we provide the F character
252:27 - and then inside the single codes inside
252:30 - the curly braces we have the name over
252:32 - here it will print the value that is
252:34 - Shan so let me just save this file and
252:36 - try running this code code as you can
252:38 - see John is getting printed which is the
252:39 - value of this name variable now we want
252:42 - to print the entire string that is we
252:44 - also want the labels so before this name
252:47 - that we have provided we can simply
252:49 - provide the string that is name is and
252:51 - Then followed by open and close braces
252:53 - and inside the braces it will be name
252:56 - variable name and then we can simply
252:58 - provide end age is followed by open and
253:02 - close braces and then we can provide the
253:05 - age variable name so so guys this is the
253:07 - format we have the F character and
253:10 - inside the single codes as you can see
253:12 - we have provided the string label that
253:13 - his name is and Then followed by open
253:16 - and close curly braces inside which we
253:18 - provide our variable name and Then
253:20 - followed by end ages or any other string
253:23 - label that you want to Define and then
253:25 - we can have the variable name that is
253:27 - age over here inside the open and close
253:29 - curly braces so let me just save this
253:31 - file now and try running this code as
253:33 - you can see we have the perfect string
253:35 - that we wanted that his name is John and
253:37 - age is 25 so this is another way we can
253:40 - use the python string formatting by
253:42 - using this F character inside the print
253:44 - function in order to print the string in
253:46 - the way that we want to print so Guys
253:48 - these are certain things as far as
253:50 - strings are concerned in Python
253:51 - programming language sets in Python
253:54 - Programming so guys a set is a
253:56 - collection of a unique data which means
253:59 - that the elements in a set cannot be
254:01 - duplicate elements so over here you can
254:03 - easily create a set in the python
254:05 - basically in Python weate create the
254:07 - sets by placing all the elements inside
254:10 - the curly braces separated by comma so
254:13 - guys previously we have seen that for
254:14 - the list we are using the open and close
254:17 - square brackets for the tle we use the
254:19 - open and close parenthesis and over here
254:21 - for sets we are using the open and close
254:24 - curly braces so we will check this with
254:26 - the help of examples as well a set can
254:28 - have any number of items and they may be
254:31 - of different types so as you can see it
254:33 - can be of the integer float tle or
254:35 - string data type or any other data type
254:38 - but a set cannot have mutable elements
254:40 - like list sets or dictionaries as its
254:43 - elements so guys this is very important
254:45 - you cannot have another list set or a
254:48 - dictionary which we are going to see in
254:50 - the upcoming videos over here we cannot
254:52 - have these kinds of data types inside a
254:54 - particular set now let us check the
254:56 - creation of set with the help of example
254:58 - now over here so let's say I provide set
255:00 - one as the variable name and then we
255:03 - provide the equal to symbol followed by
255:05 - the open and close curly bra bra es so
255:07 - inside these braces we have to provide
255:09 - the elements of the set so let's say we
255:11 - have the set of integers we have 1 2 3 4
255:15 - and then five so guys we have five
255:17 - elements over here 1 to five which are
255:19 - the elements of this set and simply we
255:21 - can print all these elements inside the
255:24 - set by using the print function over
255:26 - here and then we can say set
255:30 - elements R and then colon and then we
255:33 - can have set one that is the variable
255:36 - name so guys let me just save this file
255:38 - and try running this code now so as you
255:40 - can see we are getting set elements are
255:42 - we are getting all the elements that is
255:43 - 1 2 3 4 five and guys this is the way
255:46 - that we can create a set in the Python
255:48 - Programming now guys it is very
255:50 - important that we cannot have the
255:51 - duplicate items in this set so let's say
255:54 - I provide some more numbers over here
255:56 - which are already present in this set so
255:58 - let's say two and three are already
256:00 - present I provide this 2 and three once
256:02 - again so when we do this so right now we
256:04 - have seven number of elements but let me
256:06 - just save this file now and try running
256:08 - this code to see how many elements get
256:10 - printed so as you can see only five
256:12 - elements are getting printed so those
256:14 - two elements at is 2 and three will not
256:16 - be considered once again while printing
256:18 - them because we cannot have duplicate
256:20 - elements we can only have the unique
256:23 - elements inside the set and guys this is
256:25 - the main functionality of having the set
256:27 - data structure in Python Programming So
256:30 - based on your requirements if you don't
256:31 - want the duplicate elements to be
256:33 - present you can use the set data
256:35 - structure in the Python program
256:36 - programming language now guys how do we
256:38 - create an empty set in the python so
256:40 - basically creating an empty set is a bit
256:43 - tricky so empty curly braces if we use
256:46 - then it will make a empty dictionary in
256:48 - Python so basically when we create a
256:50 - dictionary we again use the curly braces
256:52 - so let us check this with the help of
256:54 - example now over here what happens if we
256:56 - create the empty set so let's say we
256:59 - provide set one it is equal to open and
257:01 - close curly braces as you can see we
257:03 - have not provided any element and this
257:05 - is the empty set but let me just print
257:08 - the type of this variable over here so
257:10 - we will simply use the type function and
257:13 - then provide the set one as the variable
257:15 - name so guys what will be the type of
257:17 - this set one variable so let me just
257:19 - save this file now and try running this
257:21 - code as you can see it is saying that
257:23 - class it is a dictionary data type so
257:26 - this set one variable is of the data
257:28 - type dictionary by default when we
257:30 - provide the open and close curly braces
257:33 - how do we make it as a empty set data
257:35 - type so what what we have to do is
257:37 - instead of using the open and close
257:39 - curly braces we have to use the set
257:42 - function so there is something called a
257:44 - set function over here as you can see vs
257:46 - code is suggesting us so this set
257:48 - function followed by the open and close
257:50 - parenthesis will help us to create a new
257:52 - empty set over here so let me just save
257:55 - this file now and try running this code
257:57 - over here what we are trying to do is
257:58 - again we are trying to print the type of
258:01 - this set one but this time it should be
258:03 - of the set data type so let me just run
258:05 - this code now
258:07 - so as you can see we are getting the set
258:09 - data type over here previously we were
258:10 - getting the dictionary so in order to
258:13 - have the empty set in Python Programming
258:15 - we can use the set function over here
258:17 - now very important question how do we
258:19 - add the set items in Python so basically
258:22 - sets are mutable which means we can add
258:24 - and remove items from the set however
258:27 - since they are unordered indexing has no
258:29 - meaning so guys basically if you must
258:32 - have noticed there is no one order in
258:34 - which the set items were printed
258:36 - previously so let us check this once
258:38 - again over here we provide set one it is
258:41 - equal to and let's say we provide some
258:43 - elements that is three 2 4 1 5 and then
258:47 - let me just print this set one over here
258:51 - so we provide set one inside the print
258:54 - function let me just run this code as
258:56 - you can see we are getting 1 2 3 4 5
258:58 - this is not of the same order in which
259:00 - we have provided these elements inside
259:03 - the set so we cannot use index numbers
259:05 - over here as well in order to access
259:07 - these elements one at a time since the
259:09 - way in which the elements inside the set
259:12 - are printed are not in a particular
259:14 - order now guys how do we add new
259:16 - elements to this set so basically we
259:19 - cannot access or change an element of a
259:21 - set using the indexing or slicing but we
259:24 - can use the add method to add an item to
259:27 - a set so let us say I want to add
259:29 - another element over here so basically
259:32 - what we will do is we will say initial
259:35 - set and then col
259:37 - and then we provide set one and then
259:39 - let's say we provide set one dot we have
259:42 - something called as ADD over here as you
259:44 - can see this is a function that we can
259:46 - use in order to add elements inside the
259:49 - set so let's say we provide 10 as the
259:51 - number to be added to this particular
259:53 - set that is set one and then again we
259:55 - want to print that set one so I'll just
259:57 - copy this and paste this over here and
260:00 - then we have updated set over here so we
260:03 - have updated set and then set one being
260:05 - printed so let me just save this file
260:07 - and try running this code now so as you
260:09 - can see initial set it is 1 2 3 4 5 and
260:12 - then after adding this element we are
260:14 - getting the updated set as 1 2 3 4 5 and
260:18 - then the last element that is 10 over
260:19 - here which is being added by using the
260:21 - add method and this is the way that we
260:24 - can add the elements inside the set
260:26 - remember that the order in which they
260:28 - are added will not be followed while
260:30 - printing them so you cannot rely on the
260:32 - order in which the set elements will be
260:34 - printed on Console now guys another
260:37 - important thing how do we remove an
260:38 - element from the set so we can use the
260:40 - discard method to remove the specified
260:43 - element from a set so let us say after
260:45 - adding this we want to remove the
260:48 - element that is three from this set so
260:50 - what we can do is we can provide set one
260:53 - and then followed by Dot and then we can
260:55 - have discard method in order to remove
260:57 - the element we need to provide the
260:59 - element which needs to be removed so
261:02 - over here we provide the number three
261:04 - which will be removed from the set one
261:06 - and then again let me just copy this
261:08 - line of code and paste this over here so
261:10 - that we can print the updated set after
261:13 - removing so over here we say updated set
261:16 - after removing three and then let me
261:20 - just save this file and try running this
261:22 - code now so as you can see we are
261:23 - getting 1 2 4 5 and then 10 so the
261:27 - element three is being removed after
261:29 - using the discard method over here and
261:31 - guys this is the way that we can remove
261:33 - the elements from the set now guys there
261:35 - is another way in order to to access the
261:37 - elements inside the set we can iterate
261:39 - over a set in Python by using the fall
261:42 - Loop so this can be easily done by using
261:44 - the fall Loop over here so what I will
261:46 - do is I'll just clear these lines of
261:48 - code and then we will say for and then
261:51 - item in set one so this is the syntax
261:54 - that we use while using the fall Loop
261:57 - and then we can have the print statement
261:59 - over here guys notice that till now we
262:01 - were printing the elements of the set by
262:03 - using the set one variable and that is
262:05 - why we were getting getting the starting
262:07 - and the ending open and close curly
262:09 - braces over here but this time let's say
262:12 - we don't want those but we want only
262:14 - those numbers that is the elements
262:16 - inside the set to be printed so we can
262:18 - easily use the for Loop and iterate
262:21 - through each and every item inside the
262:23 - set and this is the way that we can do
262:25 - so we provide the print statement over
262:28 - here and inside the item variable one at
262:31 - a time all the elements will be printed
262:33 - over here so let me just save this file
262:35 - now and try running this code so as you
262:37 - can see we are getting 1 2 3 4 5 now all
262:40 - these numbers are on a different line
262:42 - what we can do is we can use the end
262:44 - parameter of the print function so over
262:47 - here we provide the end parameter and
262:49 - then we simply provide the space
262:50 - character so that all the items are
262:53 - separated by the space characters over
262:55 - here so let me just save this file now
262:57 - and try running this code so as you can
262:59 - see we are getting 1 2 3 4 5 which are
263:01 - the elements of this set if you want all
263:03 - these numbers to be separated by commas
263:06 - what will we can do is inside of the
263:07 - space character we can provide the comma
263:09 - and let me just save this file and try
263:11 - running this code once again as you can
263:13 - see we are getting 1 2 3 4 5 and all the
263:15 - elements are being separated using the
263:18 - comma character now guys how do we find
263:20 - the number of set elements so we can use
263:22 - the Len method that is the length method
263:25 - to find the number of elements that is
263:27 - present inside the set so what we can do
263:29 - is simply we can provide the print
263:31 - statement over here and we can simply
263:33 - say that length of set is and then colon
263:39 - and then we can simply use the alen
263:41 - method and then inside this method we
263:44 - can provide the set one that is the
263:45 - variable name so let me just save this
263:48 - file now and try running this code so as
263:50 - we can see length of set is five so
263:52 - basically since five elements are
263:54 - present over here we are getting the
263:55 - length as five what if we provide some
263:58 - more elements let's say I provide 6 7
264:00 - and let's say I provide some more
264:01 - duplicate elements over here that is 1 2
264:04 - and then three so over here there are
264:06 - total 10 elements out of which three
264:08 - elements are duplicate so what is the
264:10 - exact length of the set so let me just
264:12 - save this file now and try running this
264:14 - code so as you can see length of set is
264:16 - seven so even though we are having 10
264:19 - items inside the set but out of those 10
264:21 - items three items are duplicate items so
264:24 - those duplicate items will not be
264:26 - considered it will be considered only
264:28 - once and that is why we are getting the
264:30 - length of this set s 7even now guys very
264:33 - important thing about the set operations
264:35 - we can carry out different set
264:36 - operations in Python Programming one is
264:39 - Union of two sets which can be done by
264:41 - using the union method or this or symbol
264:44 - over here we can also have the set
264:46 - intersection which can be implemented by
264:49 - using the intersection method and then
264:51 - we also have the difference between the
264:53 - two sets which means we can use the
264:55 - difference method or the minus symbol
264:57 - over here so guys let us check all these
264:59 - operations one at a time so over here
265:01 - what we will do is we will have two sets
265:04 - over here we will say set one it is is
265:06 - equal to 1 2 and then 3 and then let's
265:09 - say we have set two it is equal to 3 4
265:13 - and then 5 now guys let's say we want to
265:15 - find the Union first so what we will do
265:18 - is we will say Union and then we will
265:21 - simply say set one followed by Dot and
265:24 - then we have the union method followed
265:26 - by the parameter needs to be set two
265:29 - over here because that is the another
265:31 - set that we want to find the union of
265:33 - similarly we will do the intersection
265:35 - and difference as well so I'll just copy
265:37 - and paste these lines of code over here
265:40 - we will say intersection in this case
265:43 - and then we will simply change the union
265:46 - method to intersection over here and
265:48 - then over here we will say
265:51 - difference so difference and then
265:53 - instead of this Union we will say
265:55 - difference so guys basically what we are
265:58 - doing over here is these are all the set
266:00 - operations the union will find all the
266:03 - elements that are present in set one and
266:05 - set two and all the elements will be
266:07 - unique in the intersection part we will
266:10 - get all the elements that are common in
266:12 - both the sets which means three in this
266:14 - case and then in the difference we will
266:16 - find all the elements that are present
266:18 - in set one but not present in set two so
266:21 - guys let me just save this file now and
266:23 - try running this code to see what will
266:24 - be the results of all these operations
266:27 - so as you can see the union is giving us
266:29 - one 2 3 4 5 which means all the elements
266:32 - that are present in set one and set 2 so
266:35 - we are having 1 2 3 in set one and then
266:38 - in set two the three is already printed
266:40 - and then it is printing four and five as
266:42 - well in intersection we are getting only
266:44 - three that's because the element three
266:47 - is the only element which is common in
266:49 - both the sets for the difference
266:51 - operation we are getting only one and
266:53 - two that's because these are the only
266:54 - two elements which are present in set
266:56 - one but not present in set two so Guys
266:59 - these are certain set operations that
267:01 - can be implemented with Python
267:02 - Programming apart from this there are
267:04 - multiple built-in methods that you can
267:06 - use as far as sets are concerned so when
267:08 - we provide the variable name that is set
267:10 - one followed by dot as you can see these
267:12 - are all the methods that can be used
267:15 - based on your requirements dictionary in
267:17 - Python Programming so guys the python
267:19 - dictionary is an ordered collection of
267:22 - items it stores elements in the form of
267:25 - key value pairs so basically on the left
267:27 - hand side we have a key and on the right
267:30 - hand side we have the value and such key
267:32 - value pairs are known as dictionary in
267:34 - Python programming now guys the keys are
267:37 - unique identifiers that are associated
267:40 - with each value so basically we cannot
267:42 - have duplicate keys in a dictionary
267:44 - whereas we can have the duplicate values
267:46 - in the dictionary so as you can see for
267:48 - example over here on left hand side we
267:50 - are having the keys on right hand side
267:52 - we are having the values so Nepal Italy
267:55 - and England these are certain Keys over
267:58 - here and they are capital that is
267:59 - Katmandu Rome and then London these are
268:02 - the values on the right hand side so how
268:04 - do we create a in Python we can have any
268:07 - variable name in this case and after the
268:09 - equal to symbol inside the open and
268:12 - close curly braces we are having the key
268:14 - value pairs so since this is a string we
268:16 - are enclosing it within the double codes
268:18 - over here and then after the key that is
268:21 - Nepal we are providing a colon in this
268:23 - case followed by the value which is
268:25 - again inside the double codes and then
268:28 - separated by commas we have more key
268:30 - value pairs over here so guys this is
268:32 - the way that we can create the
268:34 - dictionary so guys let us check this
268:35 - with the help of examples now over here
268:37 - so let us say we have dict1 that is the
268:40 - variable name followed by equal to and
268:43 - then let's say we provide the same data
268:45 - over here so I'll just copy and paste
268:47 - this line so we have copied the same key
268:50 - value pairs over here now simply we can
268:52 - print this key value P by using the
268:54 - print function and Then followed by
268:56 - dict1 which is the variable name so let
268:59 - me just save this file and try running
269:00 - this code now as you can see we are
269:02 - getting all the key value pirs over here
269:04 - being printed on the console so guys
269:06 - this is the way that we can create the
269:08 - dictionary along with the key value P
269:10 - that we want to store inside the
269:12 - dictionary now how do we add elements to
269:14 - a python dictionary so we can add the
269:17 - elements to a dictionary using the name
269:19 - of the dictionary with open and close
269:21 - square brackets so guys over here what
269:23 - we will do is we will say initial
269:28 - dictionary so this label we have added
269:31 - so that we can identify that this is the
269:33 - initial dictionary now what we will do
269:35 - is we will add one more key value pair
269:37 - inside the same dictionary so what we
269:40 - have to do is we have to use this
269:41 - variable name that is dict1 followed by
269:44 - open and close square brackets and
269:46 - inside this we have to provide the key
269:49 - so let's say the key over here we
269:51 - provide India is the key and then the
269:53 - capital of India it is Delhi so over
269:56 - here the value that we have to provide
269:57 - is Delhi in this case so what we have
270:00 - done is we have provided the variable
270:02 - name and Then followed by the open and
270:04 - close square bracket and inside those
270:06 - brackets we have to provide the key in
270:08 - this case it is a string and then we
270:10 - have equal to followed by the value for
270:12 - this key which is again another string
270:15 - and then guys what we will do is let's
270:16 - say we want to print this entire
270:18 - dictionary once again so we will print
270:20 - this and over here we will say updated
270:23 - dictionary and then again dict1 so let
270:26 - me just save this file and try running
270:28 - this code now so as you can see we have
270:30 - the updated dictionary as we have Nepal
270:33 - Italy England and then the last element
270:35 - that we have added just now is the key
270:38 - that is India and Delhi that is the
270:40 - capital of India as the value so guys
270:42 - this is the way that we can add elements
270:45 - inside the dictionary in the form of key
270:47 - value pairs now guys how do we change
270:49 - the value of a dictionary so we can
270:51 - again use the open and close square
270:53 - brackets in order to change the value
270:55 - associated with a particular key so guys
270:57 - let us check this with the help of
270:59 - example now so over here what we will do
271:01 - is let's say we have added this key
271:03 - value pair that is for India we have the
271:06 - capital that is Delhi but now let us say
271:08 - instead of having the capital as the
271:10 - value we can provide any city as the
271:13 - value for this country so what we can do
271:15 - is again we can provide the variable
271:18 - name that is dict1 and then for this key
271:21 - that is India we want to update the
271:23 - value so let's say this time the value
271:25 - that we provide is Mumbai which is a
271:28 - very popular city in India so we provide
271:31 - Mumbai over here and then again we are
271:33 - printing this dictionary once again so
271:35 - let me just save this file now and try
271:36 - running this code so as you can see the
271:39 - updated dictionary first time it is
271:41 - showing India that is Delhi and then the
271:43 - second time that is updated dictionary
271:45 - it is showing India and this time the
271:47 - value it is Mumbai in this case so guys
271:50 - this is the way the same way is used in
271:52 - order to add the key value pair and in
271:54 - order to update the key value pair as
271:57 - well we have to make sure that whatever
271:59 - key we want to update it is K sensitive
272:02 - if let's say I provide the small I over
272:04 - here so in this this case it will add a
272:06 - key value pair since this India is not
272:09 - matching with this India that's because
272:11 - over here we are having the capital I
272:13 - and over here we are having the small I
272:15 - so let me save this file now and try
272:17 - running this code this time we are
272:18 - getting the five key value pairs in this
272:20 - case so India Delhi and then we have the
272:23 - small I and then Mumbai so guys make
272:25 - sure that whenever you are updating the
272:27 - key value pairs the key of the
272:29 - dictionary must exactly match with the
272:31 - existing keys that are present in the
272:33 - dictionary now guys how do we access the
272:35 - elements from the dictionary so in
272:37 - Python we use the keys to access their
272:39 - corresponding values so let us check
272:41 - this with the help of examples now over
272:43 - here so let's say we have these three
272:45 - key value pairs as the original
272:47 - dictionary now we only want to print the
272:49 - value of this particular key that is
272:51 - Nepal over here so what we will do is we
272:53 - will simply have the print statement and
272:55 - then we will say dict1 that is the
272:58 - variable name followed by open and close
273:00 - square brackets and we simply provide
273:03 - this key that is Nepal over here so
273:05 - inside the double codes we provide Nepal
273:07 - over here so let me just save this file
273:09 - and try running this code now so as you
273:11 - can see we are getting the value of this
273:13 - key that is Nepal similarly if we
273:15 - provide Italy as the key so I'll just
273:18 - replace Nepal by Italy over here so as
273:21 - you can see we are getting the value as
273:23 - Rome because the value for this key that
273:26 - is Italy is Rome over here so in this
273:28 - way we can easily access the values of
273:30 - the keys that we want to print now guys
273:32 - how do we remove the elements from the
273:34 - dictionary so so we use the D statement
273:37 - to remove an element from the dictionary
273:39 - so what we will do is let's say I want
273:41 - to print the original dictionary over
273:44 - here so we will say
273:47 - original
273:48 - dictionary and then colon and then we
273:51 - say dict1 now guys what we will do is
273:54 - let's say I want to delete this key
273:57 - value pair that is Nepal and kand so we
274:00 - will use delete and Then followed by
274:02 - dict1 and then open and close square
274:05 - brackets and inside this we have the
274:07 - double codes and we simply provide the
274:09 - key over here that is Nepal so this
274:11 - statement will help us in order to
274:13 - delete this particular key that is Nepal
274:16 - and Katmandu over here so let me just
274:18 - print this dictionary once again so over
274:21 - here we have updated dictionary and then
274:25 - let me just save this file now and try
274:26 - running this code so as you can see
274:28 - original dictionary we are getting all
274:30 - the three key value pairs that is Nepal
274:33 - Italy and England over here along with
274:35 - their values but the updated dictionary
274:37 - it is giving us only two key value pairs
274:40 - that is Italy that is Rome and for
274:42 - England we are getting London so over
274:45 - here this key value pair that is for
274:47 - Nepal we are having the Katmandu value
274:49 - this was removed because of this
274:51 - particular statement that we have used
274:53 - in order to remove the Nepal key and its
274:56 - value as well now guys as far as
274:58 - dictionary membership test is concerned
275:00 - we can test if a key is in a dictionary
275:03 - or not using the keyword in so in
275:05 - keyword is used in order to check the
275:07 - membership test so note that the
275:09 - membership test is only for the keys and
275:11 - not for the values so guys let's say
275:13 - over here I'll just remove these lines
275:15 - of code so for this original dictionary
275:18 - we want to find whether the key Italy is
275:20 - present inside the dictionary or not so
275:23 - we will say print and then we can simply
275:26 - say Italy and then we use the in keyword
275:30 - followed by dict1 so guys what exactly
275:33 - we are doing is we are checking whether
275:35 - this string it is present in dict1 or
275:37 - not so let me just save this file and
275:39 - try running this code so as you can see
275:41 - it is showing us true over here that's
275:43 - because the key Italy is present inside
275:45 - the dictionary but the same thing is not
275:47 - applicable when we provide one of the
275:49 - values inside the dictionary so let's
275:51 - say we provide Rome as the value over
275:54 - here so Rome in dict1 so let me just
275:57 - save this file and try running this code
275:59 - so as you can see it is showing us false
276:01 - that's because Rome is the value and it
276:03 - is not one of the keys that are present
276:05 - inside the dictionary so guys we can
276:07 - also use the in keyword in order to
276:09 - check whether a particular key is
276:11 - present inside the dictionary and it is
276:13 - only applicable for the list of keys
276:15 - over here now guys we can also iterate
276:18 - through the dictionary by using the fall
276:20 - Loop over here so what we can do is
276:22 - simply we can use the for Loop in order
276:24 - to print all the key value pairs so over
276:27 - here we have the for keyword followed by
276:30 - let's say we provide the key variable
276:33 - name and then we provide the in key
276:35 - keyword and Then followed by the
276:36 - variable name that is dict1 and then
276:39 - colon so what we will do is we will
276:41 - simply have the print statement and then
276:43 - let's say we want to print the key value
276:45 - p in the particular format so we will
276:48 - say key in this case and Then followed
276:50 - by comma and then let's say we provide
276:54 - Arrow over here and then after this we
276:57 - provide the value so how do we access
276:59 - the value we provide the dict1 that is
277:02 - the variable name and then inside the
277:05 - open and close square brackets we
277:06 - provide the key in this case so guys
277:08 - basically what is happening over here is
277:10 - all the keys that are present inside
277:12 - this variable one at a time it will be
277:15 - assigned to this key and this key we are
277:17 - printing on the left hand side and then
277:19 - we are having the hyphen and the arrow
277:21 - symbol and then using this key variable
277:24 - we are getting the value from this
277:26 - dictionary in this case so guys let me
277:28 - just save this file now and try running
277:29 - this code so as you can see we are
277:31 - getting Nepal so Katmandu is the value
277:34 - then for the key Italy we are getting
277:36 - Rome as the value and for England we are
277:38 - getting the London as the value so guys
277:40 - this is the way that we can use the fall
277:42 - Loop in order to iterate through all the
277:45 - key value pairs inside the dictionary
277:47 - file reading in Python Programming so
277:49 - guys a file is a container in computer
277:52 - storage devices used for storing data so
277:55 - when we want to read from a file we need
277:58 - to open it first when we are done it
278:01 - needs to be closed so that the resources
278:03 - that are tied with the file are read so
278:05 - guys we are going to check this with the
278:07 - help of example how we can open the file
278:09 - in order to read the content of the file
278:12 - and then after that we can close the
278:14 - file as well so basically in Python a
278:16 - file operation takes place in the
278:18 - following order first of all we have to
278:20 - open the file then the next thing is we
278:22 - read the file content and then after
278:24 - reading the file content we close the
278:27 - file so basically the first operation
278:28 - that is opening the file we can use the
278:31 - open method to open a file so as you can
278:33 - see for example over here we are
278:35 - providing the variable name on the left
278:38 - hand side and then on the right hand
278:39 - side we have the open function and then
278:42 - we have the path of the file where the
278:44 - file is stored and then by default it is
278:47 - opened in the read mode we can also use
278:49 - the second parameter and provide the
278:52 - character that is R for reading the file
278:54 - and in order to write into the file we
278:56 - use W as the character over here in this
278:59 - case and then guys after this we can
279:01 - read the file in Python by using the
279:03 - read method so basically this variable
279:05 - that we had used on the left hand side
279:07 - we can use the same variable over here
279:09 - in order to call the function that is
279:12 - read and this will help us in order to
279:14 - read the content into the variable that
279:17 - is read content and then in order to
279:19 - close the file we can simply use the
279:21 - close method so guys let us check all
279:23 - this with the help of example now over
279:25 - here so let's say we have the variable
279:27 - name that is file one and then followed
279:29 - by equal to and then we use the function
279:31 - name that is open in order to open the
279:34 - file and then inside the open and close
279:36 - parenthesis we are going to have the
279:39 - path of the file that we want to open so
279:41 - guys over here I have the test file for
279:44 - which I have written some content over
279:46 - here so we have these four lines inside
279:48 - the test file so what we can do is so
279:50 - guys we have to copy the entire path of
279:52 - this directory this is very important in
279:55 - whichever directory your file is you
279:57 - have to copy the entire path of that
279:59 - directory and paste this into your code
280:01 - so that your code can access that
280:03 - directory and the file that you want to
280:05 - read so basically over here inside the
280:08 - double codes we have to provide the
280:10 - directory path and Then followed by the
280:12 - name of the file that we want to read so
280:14 - over here I'll just copy the name of the
280:16 - file that is the test file and paste
280:19 - this over here followed by txt now guys
280:21 - it is very important that while you're
280:23 - copying the directory path you will be
280:25 - getting this back slashes over here so
280:27 - you have to provide another back slash
280:30 - since this one back slash is acting as
280:32 - the Escape character so you have to
280:34 - provide two back slashes over here every
280:36 - time that you are providing the
280:38 - directory path so I'll just provide
280:40 - extra back slashes over here at every
280:42 - instance in this directory path so guys
280:44 - this is our entire path over here
280:47 - followed by the test file that is the
280:48 - file name and then the extension that is
280:51 - txt now guys the second step is to read
280:54 - this file so the first step is completed
280:56 - that we have opened the file now the
280:58 - next step is to read the content so we
281:00 - will say read uncore content as the
281:04 - variable able name followed by equal to
281:07 - we use this file one variable that we
281:09 - have used in order to open the file
281:11 - followed by Dot and then we have the
281:13 - read method so this method will help us
281:16 - in order to read the content into this
281:19 - read content variable and then guys
281:21 - simply we can print the read content
281:24 - variable so over here we can say read
281:26 - content so let me just save this file
281:28 - now and try running this code so as you
281:30 - can see we are getting all the four
281:32 - lines that are present inside the test
281:34 - file so if I open the test file over
281:36 - here once again it says this is a test
281:38 - line in a test file so the same line is
281:41 - printed over here on the console this is
281:44 - a test line in a test file similarly we
281:46 - have the other three lines it is this is
281:48 - another test line then we have this is
281:50 - third line and then this is fourth line
281:53 - in test file so all those lines that are
281:55 - present inside the test file are being
281:58 - printed over here on the console so guys
282:00 - this is one of the easiest way that you
282:02 - can open the file in a particular
282:04 - directory read the content by using the
282:07 - read function and then you can print the
282:10 - content of the file by using the print
282:11 - function now guys after these operations
282:14 - are completed what you have to do is you
282:16 - have to close the file which is very
282:17 - important so as you can see when we are
282:19 - done with performing operations on the
282:21 - file we need to properly close the file
282:24 - now closing a file will free up the
282:26 - resources that were tied with the file
282:29 - it is done using the close method in
282:31 - Python so basically after printing the
282:33 - content what we can do is simply we can
282:36 - provide file one followed by Dot and
282:38 - then we can have the close method being
282:41 - called so let me just save this file now
282:43 - and before running this code we will
282:45 - have another print function over here
282:47 - and we will print the statement that is
282:49 - file is closed in order to confirm that
282:52 - the control flow has reached the final
282:54 - statement over here in our code so let
282:57 - me just save this file now and try
282:58 - running this code so as you can see all
283:00 - the four lines are being printed over
283:02 - here from the file once again and then
283:04 - we also getting file is closed being
283:06 - printed over here and in this way we
283:08 - have already closed the file by using
283:10 - the close function as well so guys this
283:12 - is the way you can read the content of
283:14 - the file just by using these four lines
283:17 - of code we can easily read the entire
283:20 - content of any of the file that we want
283:22 - to read based on our requirements with
283:24 - open syntax to read the file in Python
283:27 - Programming so guys in Python we can use
283:30 - the with open syntax to automatically
283:32 - close the file and as you can see in
283:34 - this example we have the syntax that is
283:36 - first of all we have the with keyword
283:38 - followed by the open function and then
283:41 - we have the path of the file along with
283:43 - the file name and then the second
283:45 - parameter is the read mode of the file
283:48 - and then we have the as keyword over
283:50 - here followed by the variable name and
283:52 - then after this colon we can read the
283:54 - content by using the read method and
283:56 - then we can simply Print it Now guys the
283:58 - advantage of using this with open syntax
284:01 - in order to read the content of the file
284:04 - is is that it automatically closes the
284:06 - file so previously we had seen that by
284:08 - using these four lines of code we can
284:11 - simply open the file read the content
284:14 - and print the content over here and this
284:16 - fourth line over here that is close
284:18 - method was used in order to close the
284:21 - file that we had opened but this is not
284:23 - required if we are using the with open
284:26 - syntax so let us check this with the
284:27 - help of example now over here I'll just
284:29 - clear these lines of code and simply we
284:32 - will provide the with keyword first
284:34 - followed by open function and then we
284:37 - have the open and close parenthesis and
284:40 - inside this we have to provide the path
284:42 - of the file that we want to read so we
284:44 - are going to read the same file that we
284:46 - had used previously that is the test
284:47 - file so first of all we have to provide
284:50 - the directory path so over here I'll
284:52 - just copy the directory path over here
284:54 - and paste this over here and then we
284:57 - have the file name to be red so I'll
284:59 - just copy this file name and paste this
285:01 - over here followed by txt now guys it is
285:04 - very important that we have the double
285:06 - slash characters in order to avoid any
285:09 - of the issues that might occur due to
285:11 - the Escape characters so over here I'm
285:14 - just providing the double back slash
285:15 - characters at every instance inside the
285:18 - directory path and then after this this
285:21 - is the first parameter which is the path
285:23 - of the file that we want to read and the
285:25 - second parameter that we have is the
285:27 - mode in which we want to open the file
285:30 - so we provide R in this case so this
285:32 - means that we are opening the file in
285:34 - the read mode and then guys after this
285:37 - after this open function we have the S
285:39 - keyword and Then followed by the
285:41 - variable name so let's say we provide
285:43 - file one in this case now this file one
285:46 - that is the variable name can be used in
285:48 - order to read the content of the file so
285:51 - after this colon we can go to the next
285:53 - line and then we can have another
285:56 - variable that is read content in this
285:58 - case followed by equal to and then we
286:01 - can have file one followed by Dot and
286:03 - then we have the read method so guys
286:05 - this line of code is responsible in
286:07 - order to read the content of the file
286:10 - and store the content inside the read
286:12 - content variable name and then guys we
286:14 - can simply have the print function in
286:16 - order to print the content of the file
286:19 - so guys this is the way that we can use
286:21 - the with open syntax along with this we
286:23 - are using the read method in order to
286:25 - read the content and printing the
286:27 - content over here now it is very
286:29 - important to note that we need not have
286:31 - to provide this line of statement that
286:33 - is file 1 do close in this case that's
286:35 - because when we are using the with open
286:37 - syntax the file will be automatically
286:39 - closed after the read operation is
286:42 - completed so I'll just remove this line
286:44 - of code since it is not required so guys
286:46 - let me just save this file now and try
286:48 - running this code so as you can see we
286:49 - are getting all the content of the file
286:52 - that is all the four lines over here
286:54 - that is present inside the test file so
286:56 - we are getting this is a test line in a
286:58 - test file and then we are having the
287:00 - this is another test line so whatever
287:02 - content is there we are getting it over
287:04 - here inside our program let me just
287:06 - remove these third and fourth line over
287:08 - here and then I'll just save this file
287:10 - now inside the test file and then what
287:12 - we will do is we will run this code once
287:14 - again this time we should only get the
287:16 - starting two lines that's because we
287:18 - have removed the third and fourth line
287:20 - from the test file so I'll just save
287:21 - this file and try running this code now
287:24 - so as you can see we are getting this is
287:25 - a test line in a test file and the
287:27 - second line this is another test line so
287:29 - only two lines over here are getting
287:32 - printed so guys this is the way that we
287:33 - can can use the with open syntax in
287:36 - order to read the content of the file
287:38 - print it on the console or do whatever
287:41 - based on the requirements of your
287:42 - project now it is important to note that
287:44 - we need not have to close the file
287:46 - explicitly after carrying out the
287:48 - operations with the file that we have
287:50 - opened so file writing in Python
287:52 - Programming so guys in Python a file
287:55 - operation takes place in the following
287:57 - order so basically first of all we have
287:59 - to open the file then secondly we can
288:02 - write into the file that we we have
288:04 - opened and the last step is to close the
288:06 - file so these are the operations in this
288:09 - order in which we have to follow while
288:11 - writing the content into the file now
288:13 - there are two things we need to remember
288:15 - while writing to a file so first of all
288:17 - if we try to open a file that doesn't
288:20 - exist so a new file will be created in
288:22 - this case so guys we are going to check
288:24 - this with the help of example as well
288:26 - and in the second case if a file already
288:29 - exist then its content is erased and new
288:32 - content is added to the file again so
288:34 - Guys these are the two important things
288:36 - that you should know while writing into
288:38 - the file if the file is not already
288:40 - present then a new file will be created
288:43 - and if the file is already present then
288:45 - the existing content will be removed and
288:47 - the new content will be added into the
288:49 - file so guys the first operation is
288:51 - opening the file over here in which case
288:54 - we can use the open method to open the
288:56 - file and this is the example we have the
288:59 - variable on the left hand side and then
289:01 - we have the open method followed by the
289:04 - name of the file over here along with
289:05 - the entire path if it is present in some
289:08 - other directory and Then followed by the
289:10 - second parameter that is W which stands
289:12 - for the right mode so guys let us check
289:14 - this with the help of example now over
289:16 - here so what we will do is we will say
289:18 - file one which is the variable name
289:20 - followed by equal to and then we have
289:23 - the open method in this case so we have
289:25 - to provide the name of the file along
289:27 - with the directory path inside the
289:29 - parenthesis and the double quotes over
289:31 - here so what we will do is we are going
289:33 - to use use this directory over here in
289:35 - order to create a new file and write the
289:38 - content into the file so guys over here
289:40 - there are only two files that is Python
289:42 - tutorial and test file we are going to
289:45 - create a third file that is output.txt
289:48 - in which we are going to write the
289:50 - content by using the code over here so
289:52 - basically I'm going to paste the entire
289:54 - directory path and in order to avoid any
289:57 - errors I'll just use the double back
289:59 - slashes over here since these are the
290:01 - Escape characters so we provide the
290:03 - double back slashes and then at the end
290:06 - we have to provide the name of the file
290:08 - so I'll simply provide output.txt in
290:11 - this case and then guys the second
290:12 - parameter needs to be the writing mode
290:15 - so over here inside the double Cotes we
290:17 - can say w which means we are opening the
290:20 - file in the right mode in this case now
290:22 - guys we have completed the first step
290:24 - now what is the next step writing into
290:26 - the file so basically writing in a file
290:28 - in a python so after we open a file we
290:30 - use the write method to write the
290:33 - content in the file and this is the way
290:35 - as you can see in this example we have
290:37 - the variable name that is file one
290:39 - followed by Dot and then we have the
290:41 - write method and then the content that
290:43 - we want to write into the file so guys
290:46 - basically what we will do is on the
290:48 - second line over here we will say file
290:50 - one followed by Dot and then we have the
290:52 - write method this write method can be
290:55 - used in order to write the content into
290:57 - the file and it takes certain parameters
290:59 - the parameters will be the string or the
291:01 - integer numbers that you want to print
291:03 - or store inside the file so guys let's
291:06 - say I want to provide this is first line
291:11 - in
291:13 - output file so guys this is the content
291:16 - that we want to write into the file and
291:19 - this is the way that we can use the
291:21 - write function in order to write the
291:22 - content into the file and it takes the
291:25 - parameter as the string which we want to
291:27 - store inside the file now after writing
291:29 - what we have to do is we have to close
291:31 - the file so when we are done with
291:33 - performance operations on the file we
291:35 - need to properly close the file closing
291:38 - a file will free up the resources that
291:40 - were tied with the file it is done using
291:42 - the close method in Python so as you can
291:45 - see in this example we have file 1.
291:47 - close so over here we can simply provide
291:50 - file 1 do close in this case and then
291:54 - open and close parenthesis it doesn't
291:56 - take any parameters over here so guys
291:58 - let me just save this file now before
292:00 - running this code I'll show you the
292:01 - directory once again we have only two
292:04 - files over here that is Python tutorial
292:06 - and test file we are going to have a
292:08 - third file over here that is the
292:09 - output.txt that will be created after
292:12 - execution of this code so before running
292:14 - this code what I will do is I'll have
292:16 - the print statement so that we get the
292:18 - confirmation that the code is executed
292:21 - so we will say file
292:24 - created
292:27 - successfully so this is the statement
292:29 - that will be printed after all the lines
292:31 - of code are executed so guys let me just
292:34 - save this file now and try running this
292:35 - code so as you can see we are getting
292:37 - file created successfully and if we go
292:40 - inside the directory now as you can see
292:42 - we are getting the third file over here
292:43 - that is the output in this case so if we
292:46 - open this file as you can see this is
292:48 - first line in output file and this is
292:50 - what we have printed by using our
292:52 - program this is first line in output
292:55 - file the same statement is being printed
292:57 - over here it is being stored in our
292:59 - output file and guys this is the way
293:01 - that we have created a new new file by
293:04 - using the python codee in a particular
293:06 - directory that we wanted and also return
293:09 - the content into the file by using the
293:12 - two methods that is first of all we have
293:14 - used the open function in order to open
293:17 - the file in the right mode and then we
293:19 - have used the write function in order to
293:21 - write the content into the file now guys
293:24 - let us say we have another scenario in
293:26 - the same file we want to update the
293:28 - first line to this is first line and
293:31 - I'll just remove this in output file
293:33 - cont content over here so we have the
293:35 - short message that is this is first line
293:37 - and then what I will do is we have
293:39 - another statement so again we will have
293:42 - the file 1. write and then we can say
293:45 - this is second line in this case so guys
293:47 - we are having the two lines over here
293:49 - now and this will act as a kind of
293:51 - update now that's because we already
293:53 - have this output.txt file in this
293:56 - directory and now what we are doing is
293:58 - simply we are opening it once again and
294:01 - these lines will be stored in the file
294:03 - and guys remember that while you are
294:05 - opening the existing file what we
294:07 - already saw is the content is erased and
294:10 - the new content is added to the file so
294:12 - basically these two lines will be
294:14 - printed inside the output.txt file and
294:17 - now what we will do is for this print
294:18 - function we will say file updated
294:21 - successfully so guys let me just save
294:23 - this file now before running this code
294:25 - I'll show you that file once again over
294:28 - here we have the output file I'll just
294:30 - open this file we are having this is
294:31 - first line in a output put file so let
294:34 - me just close this now and what we will
294:36 - do is we will run this code so as you
294:39 - can see file updated successfully we are
294:41 - getting this message we'll go to the
294:43 - directory to check what is the content
294:45 - so as you can see both the statements
294:47 - are getting printed over here this is
294:49 - first line and Then followed by this is
294:51 - second line now guys what happened is
294:53 - both the lines have continued on the
294:55 - same line but we can have them on the
294:57 - separate lines as well so what we can do
294:59 - is in our code we can simply provide the
295:01 - slashing character the end of the first
295:04 - line over here so that the control flow
295:06 - goes to the next line while printing
295:08 - this statement that is this is second
295:10 - line so guys let me just save this file
295:12 - and try running this code now once again
295:14 - so it says file updated successfully we
295:16 - come back over here in the directory we
295:19 - open the output file now as you can see
295:21 - this is first line and then we have on
295:23 - the other line This is second line over
295:26 - here so guys in this way we can easily
295:27 - write the content in the file we can
295:30 - also have the multiple lines of content
295:32 - being stor St in the file that we opened
295:35 - by using the Python programming language
295:37 - guys this concept of reading and writing
295:39 - the files are very important as far as
295:41 - your project requirements are concerned
295:43 - so please make sure that you practice on
295:44 - your own so that on different inputs you
295:46 - get different output apart from this can
295:49 - we use the with open syntax in order to
295:52 - write a file so you can try this as a
295:54 - homework for you you can watch my
295:55 - previous video as well in which I have
295:57 - explained you how we can use the with
295:59 - open syntax in order to read the file
296:02 - and in which cas case we don't have to
296:04 - close the file that's because it is
296:06 - automatically handled by this with open
296:08 - Syntax for us so please treat this as a
296:10 - homework for you and comment in the
296:12 - comment section below whether you were
296:14 - able to use the with open syntax in
296:16 - order to write into the file directory
296:18 - and file management in Python
296:20 - Programming so guys a directory is a
296:22 - collection of files and subdirectories
296:25 - so basically a directory inside another
296:28 - directory is known as a subd directory
296:30 - over here and python has the OS module
296:33 - to that provides us with many useful
296:35 - methods to work with directories and
296:37 - files as well so this we are going to
296:39 - check with the help of examples as well
296:41 - it is very important to note that over
296:43 - here we have a very important module
296:46 - that is OS so this package we are going
296:48 - to import in the python code so first of
296:51 - all we are going to check how do we get
296:52 - the current directory in Python by using
296:55 - the get CWD method inside this OS module
296:59 - so let us move to the vs code over here
297:01 - so the very first thing that we have to
297:03 - do is we have to import the OS module so
297:06 - once we have imported the OS module we
297:08 - can simply print the current working
297:10 - directory so over here we have the print
297:12 - statement followed by inside the
297:14 - parenthesis we will use this OS followed
297:17 - by Dot and then we have the get CWD that
297:21 - is the method in order to get the
297:23 - current working directory over here so
297:25 - let me just save this file now and try
297:26 - running this code it will print the
297:28 - current working directory as you can see
297:30 - it is inside the C drive followed by the
297:32 - users and then we have the user folder
297:35 - followed by the python so this is the
297:37 - directory in which this particular code
297:39 - is present as you can see over here we
297:41 - can see the entire PA that is users user
297:44 - and then Python and inside this python
297:46 - folder we have this file that is python
297:48 - undor code so this is the very simple
297:51 - method in order to get the current
297:52 - working directory in Python programming
297:55 - language now let us move to another task
297:57 - now how do we change the directory in
297:59 - the python so we have something called
298:01 - as CHD R this is another method followed
298:04 - by we have to provide the path as the
298:06 - parameter to this particular function so
298:09 - what we will do is let us say we have
298:11 - this particular directory over here I'm
298:13 - going to copy this and we are going to
298:15 - change the current working directory to
298:17 - this particular directory path that we
298:20 - have just copied so what we will do is
298:22 - before this line of code which gets us
298:24 - the current working directory we will
298:26 - change the current working directory
298:28 - over here so again we are going to use
298:29 - the OS module name followed by Dot and
298:32 - then we we have something called a CH HD
298:35 - iir so as you can see this is the method
298:37 - that we can use and then inside this we
298:40 - have to provide the path of the
298:41 - directory to which we want to change the
298:43 - directory so basically I'm going to
298:45 - paste this and this is the path that we
298:47 - are going to change the directory to so
298:49 - let me just save this file now and try
298:51 - running this code so as you can see we
298:53 - are getting some error over here uni
298:54 - code Escape codec can't decode bites in
298:57 - position 2 three so what we have to do
298:59 - is we have to escape these back slashes
299:02 - over here so I'm providing another back
299:04 - slash character over here on all the
299:06 - instances of the back slash characters
299:08 - so let me just save this file now and
299:10 - try running this code so as you can see
299:12 - after changing the directory I'm once
299:14 - again getting the current working
299:16 - directory over here by calling this get
299:18 - CWD method and then you can see this
299:21 - that is the entire path that we have
299:23 - changed the directory to that path is
299:25 - getting printed on the console right now
299:27 - so guys this is the way that we can
299:28 - easily change a directory to any
299:30 - directory that we want now let us move
299:32 - to another task over here how do we list
299:35 - the directories and files in Python so
299:37 - what we are going to do is let us list
299:39 - all the subd directories and the files
299:41 - that are present in a particular
299:42 - directory so I'm going to move one stage
299:44 - back over here so as you can see inside
299:46 - the languages we have datart Java and
299:48 - python so we want to list down all the
299:51 - sub directories over here so how do we
299:53 - do that we have something called as list
299:56 - di method that will help us in order to
299:58 - list all the directories and the files
300:00 - so over here in the vs code what I will
300:02 - do is I'll go one step behind so we are
300:05 - going to remove this python we have to
300:07 - go up to the languages part and then
300:09 - after this what we will do is we will
300:11 - simply print the directory list so over
300:14 - here we have OS followed by Dot and then
300:17 - we have list directory so as you can see
300:19 - we have used the chdir method in order
300:22 - to change a directory and inside that
300:24 - directory I want to list all the
300:26 - subdirectories over here and this should
300:28 - be followed by the open and close
300:30 - parenthesis because this is a function
300:32 - so let me just save this file now and
300:33 - try running this code so as you can see
300:35 - we are getting do Java and then python
300:38 - so Guys these are the subfolders that
300:40 - are present inside this directory that
300:42 - is do Java and python let us move one
300:45 - step behind once again over here we can
300:47 - see programming for beginers and there
300:49 - are multiple sub directories and files
300:51 - as well so what we can do is over here
300:54 - I'll just move one step back I'll just
300:56 - remove these languages part over here
300:58 - and then let me just save this file now
300:59 - and try running this code as you can see
301:01 - we are getting all the files and sub
301:03 - directories we have description python.
301:05 - txt then description. txt then these are
301:08 - the subdirectories without any
301:10 - extensions over here then we have
301:11 - thumbnails 1 thumbnails 1. PPT which is
301:14 - a PowerPoint presentation we have videos
301:17 - and then the YouTube channel as well
301:18 - which are subd directories next let us
301:20 - move to another task so over here as you
301:23 - can see making a new directory in Python
301:25 - so how we can do that by using the mkdir
301:29 - method so basically this is another
301:31 - method inside the OS module so in order
301:33 - to make a new directory what we will do
301:35 - is again we will go to our original
301:37 - directory path over here I'll just copy
301:40 - this and paste this over here inside the
301:42 - code so we'll just paste this over here
301:45 - in order to change the directory and
301:46 - I'll just Escape these back slashes so
301:49 - we just need to provide another back/
301:52 - character in order to escape them so we
301:54 - have escaped all the instances of the
301:56 - back/ characters over here so basically
301:58 - first of all we are changing the
302:00 - directory and inside this directory now
302:02 - after this folder over here that is
302:04 - python which is having just three files
302:07 - over here we are going to create a subd
302:09 - directory so basically in our code what
302:12 - we will do is over here instead of print
302:14 - statement we have the OS followed by Dot
302:17 - and then we have
302:19 - mkd so this method is being suggested by
302:21 - the vs code and over here inside the
302:23 - parenthesis it is going to take the
302:25 - parameter which is going to be the name
302:27 - of the subd directory so we are going to
302:29 - provide the name as the test so let me
302:31 - just save this file now and try running
302:33 - this
302:34 - code so over here nothing is being
302:36 - displayed over here that's because we
302:38 - have not provided any of the print
302:39 - statements but over here if we come to
302:42 - our directory as you can see it has
302:44 - created a new subdirectory that is test
302:46 - over here which is going to be an empty
302:48 - subd directory so it doesn't have any
302:50 - directory or files over here so
302:52 - basically this is the way that we can
302:54 - create the subd directories now let us
302:56 - move to another task over here how do we
302:59 - rename a directory or a file so
303:01 - basically we can use the rame method
303:03 - that is the rename function inside the
303:05 - OS module and provide the first
303:07 - parameter as the old name which is the
303:09 - existing name and the second parameter
303:11 - is the new name that we want to rename
303:13 - it to so let us move to the vs code over
303:16 - here what we will do is we have already
303:18 - created the directory so I'll just
303:20 - remove this line of code and then we
303:22 - will say OS followed by Dot and then we
303:24 - have something called as rename method
303:27 - so this method takes two parameters the
303:29 - first parameter is the name of the
303:30 - directory or the file that we want to
303:32 - change the name of so let us say I just
303:34 - copy this directory name that is test
303:37 - over here and then I'll just paste this
303:39 - over here so we have test and then let's
303:41 - say we want to rename it to test one so
303:44 - I'll just provide test one over here so
303:46 - this test should be renamed to test one
303:49 - and then as a confirmation I'll just
303:51 - provide the print statement and then we
303:54 - will say
303:55 - rename
303:57 - successful and then let me just save
303:59 - this file now and try running this code
304:01 - as you can see rename successful is
304:02 - already printed over here if we go to
304:04 - our directory as you can see test one is
304:06 - being displayed over here so the
304:08 - directory name which was named as test
304:10 - previously has been renamed to test one
304:13 - over here so guys this is the way that
304:15 - we can rename a particular directory in
304:17 - the same way we can rename the file
304:19 - names as well now let us move to another
304:21 - task over here how do we remove a
304:23 - directory or a file in Python so we can
304:25 - simply use the rmd method in order to
304:28 - remove the directory and remove method
304:31 - in order to remove the the file name so
304:33 - this method that is remov in order to
304:35 - delete the file I'll leave it up to you
304:37 - as a homework for you so that you can
304:39 - practice on your own and comment in the
304:41 - comment section below whether you were
304:42 - successfully able to delete the file in
304:45 - this example we are going to remove the
304:47 - directory that we have just created so
304:48 - we are going to remove this test One
304:50 - Directory so what we have to do is I'll
304:52 - just remove this line of code and then
304:55 - we will say OS followed by Dot and then
304:57 - we have rmdir method and then inside
305:01 - this it takes the param as the name of
305:03 - the subd directory that we want to
305:05 - remove so we will say test one over here
305:08 - and then as a confirmation we will say
305:10 - delete successful so let me just save
305:12 - this file now enter running this code as
305:15 - you can see delete successful is printed
305:17 - and when we move to the directory as you
305:18 - can see the test one directory that we
305:20 - had created is no longer existing right
305:23 - now so basically we have successfully
305:25 - deleted the directory in the same way
305:27 - you can delete the files as well by
305:29 - using the remove method which is the
305:31 - homework for you so guys practice on
305:32 - your own so that on different inputs you
305:34 - get different outputs we have seen a lot
305:36 - of functions that is present inside the
305:38 - OS module apart from this you can also
305:41 - provide the OS module over here followed
305:43 - by Dot and you can see there are many
305:45 - other methods that we have not covered
305:47 - but you can practice on your own so that
305:49 - based on the requirements you can use
305:50 - them in order to accomplish your task
305:53 - exceptions in Python Programming so guys
305:55 - an exception is an unexpected event that
305:58 - occurs during the program execution so
306:01 - let's say for example if we have this
306:03 - divide by zero variable and then we do
306:06 - the assignment in such a way that we
306:08 - divide this number that is five by 0
306:10 - then we get divide by Z exception that's
306:13 - because this is a runtime exception and
306:15 - we cannot divide any number by zero so
306:18 - the above code causes an exception as it
306:21 - is not possible to divide a number by
306:23 - zero errors that occur at run time after
306:26 - passing the syntax test are called
306:29 - exceptions or logical errors so guys
306:31 - basically there will be many exceptions
306:33 - that you will come across when you are
306:34 - going to write python programs and these
306:37 - exceptions are going to be the runtime
306:39 - exceptions after passing the syntax test
306:41 - that we have already seen in our vs code
306:43 - editor so basically these exceptions
306:46 - occur when we try to open a file for
306:49 - reading that does not exist that is file
306:51 - not found error so basically this is one
306:53 - of the exceptions in the Python
306:55 - programming language in which case if
306:57 - let's say you are trying to open a file
306:59 - which is not present in the directory
307:01 - then we will have file not found error
307:04 - over here then if we try to divide a
307:06 - number by zero then we will get zero
307:08 - division error and then again if we try
307:11 - to import a module that does not exist
307:13 - then we are going to get the import
307:15 - error and so on so basically there are
307:17 - many built-in exceptions that we can see
307:20 - by using this print statement inside the
307:22 - directory we have this locals and then
307:24 - we specify this builtins in order to get
307:26 - the list of exceptions that is already
307:28 - built in in the Python programming
307:30 - language so this we are going to check
307:32 - with the help of example as well what we
307:34 - are going to do is we are going to see
307:36 - how the exception occurs in the Python
307:38 - program so over here let's say we have
307:40 - the variable that is number over here
307:42 - and we have the number that is 5 divided
307:44 - by 0 so in this case we are dividing a
307:47 - number by 0o syntactically this is
307:50 - correct over here vs code will not throw
307:52 - any error but during the run time we
307:54 - will get the error which we call it as
307:56 - the exception so over here when we print
307:59 - this number so we say value of number is
308:04 - followed by colon and then let's say we
308:07 - provide this number variable so let me
308:09 - just save this file now and try running
308:11 - this code so as you can see we are
308:13 - getting this zero division error
308:15 - division by zero which is not possible
308:17 - we cannot divide any number by zero now
308:20 - let me show you another exception let's
308:22 - say we are going to open a file in this
308:24 - particular directory and the file name
308:26 - is test one which doesn't occur inside
308:29 - this directory so let me just copy this
308:31 - directory part
308:32 - and we will open that file which is test
308:34 - one which is not present so over here we
308:37 - provide the variable name as file one it
308:39 - is equal to we say open and then with
308:42 - this we have the parameter that is the
308:44 - directory path we have just copied over
308:47 - here we will just Escape these back
308:49 - slash characters so that we don't get
308:51 - any error over here for the backs
308:53 - slashes and then at the end what we are
308:55 - going to do is after this we are going
308:57 - to provide test 1.txt now this file name
309:01 - as I have showed you over here it is not
309:03 - present test one is not present over
309:05 - here so we are trying to open that by
309:08 - using this test 1.txt file name so now
309:11 - what we will do is simply we will save
309:13 - this file enter are running this code
309:14 - now so as you can see file not found
309:17 - error is being displayed no such file or
309:20 - directory and then this file name is
309:21 - being mentioned over here what if we
309:23 - provide the correct file name let's say
309:25 - I provide this test file as the name of
309:27 - the file so I'll just copy this file
309:29 - name and paste this over here at the end
309:32 - instead of test one so I'll just paste
309:34 - this over here and then let me just save
309:35 - this file now and try running this code
309:37 - so now as you can see nothing happens we
309:39 - are not printing anything but there is
309:41 - no exception that is being printed over
309:43 - here on the terminal that's because this
309:46 - particular file name is actually present
309:48 - and hence there is no file not found
309:50 - error that is being displayed over here
309:52 - like how we have seen previously with
309:54 - the test 1.txt file so Guys these are
309:57 - certain exceptions that might occur when
309:59 - you are going to work with the python
310:00 - projects and such exeptions are
310:02 - inevitable we cannot avoid them but we
310:05 - can handle them so we are going to see
310:07 - exception handling in the upcoming
310:09 - videos as well how we are going to
310:11 - handle them but it is very important for
310:13 - you to know that these exceptions might
310:15 - occur when you're going to work with the
310:17 - Python programming language now guys let
310:19 - us see the list of all the built-in
310:21 - exceptions that are present inside the
310:22 - Python programming language so I'll just
310:24 - copy this line of code and then we'll
310:26 - paste this over here so as you can see
310:28 - this is a print statement and inside
310:30 - this we have the DI fun function and
310:32 - inside that we also have the locals
310:35 - function and then we provide the builtin
310:37 - attribute over here so let me just save
310:39 - this file now and try running this code
310:42 - as you can see we have got the list of
310:43 - all the exceptions that are present
310:46 - inside the Python programming language
310:48 - so there are multiple errors that might
310:49 - occur which includes arithmetic error
310:51 - then we have assertion error attribute
310:53 - error base exception so there are many
310:56 - errors that you can see over here file
310:58 - not found error this is one of the
311:00 - exceptions that we have just checked and
311:02 - then we also have this zero division
311:03 - error which we just saw when we divide
311:06 - any number by zero so guys there are
311:07 - multiple exceptions that might occur
311:09 - which are already built in inside the
311:11 - Python programming language and you can
311:13 - practice on your own to see which
311:15 - exception occurs on which particular
311:17 - input exception handling with try accept
311:20 - blog so guys basically it is important
311:23 - to handle exceptions that we have
311:24 - already seen in Python we use the try
311:27 - accept Block in order to handle the
311:30 - exception and this is the syntax in
311:32 - order to handle the exceptions in Python
311:34 - so basically first of all we have the
311:36 - try keyword followed by the colon and
311:39 - then we have the code that may cause the
311:41 - exception for example we can have a
311:43 - number being divided by zero in which
311:46 - case Zero division error might occur
311:48 - which is the exception and not only the
311:50 - zero division exception but if any
311:52 - exception that occurs inside this Tri
311:55 - block we can have the accept block just
311:57 - following this dry Block in order to
312:00 - catch that exception so basically in
312:01 - inside this accept block we have the
312:04 - code in order to run when the exception
312:06 - occurs so guys this we are going to
312:08 - check with the help of examples now so
312:10 - over here in the vs code what we will do
312:12 - is let's say we want to divide a number
312:15 - by zero so we want to provide that code
312:17 - inside the tri block so we have this TR
312:20 - keyword followed by the colon and then
312:23 - over here what we will do is we will say
312:25 - number variable it is equal to 10 / 0 so
312:29 - guys if we try to run this code over
312:31 - over here 10 ided 0 for which the zero
312:34 - division error will occur which is one
312:36 - of the exceptions in the Python
312:38 - Programming so what we have to do is we
312:40 - have to catch that exception inside the
312:42 - accept blog so over here what we have to
312:45 - do is we have to provide the accept
312:47 - keyword followed by the colon and then
312:49 - we can have the code in order to handle
312:51 - that exception so over here we can
312:53 - simply provide the print statement and
312:55 - then we can say number cannot be divided
313:00 - by 0 Z over here so guys this is the
313:04 - code that we are going to execute if the
313:06 - number is getting divided by 0o and the
313:08 - zero division error is occurring so let
313:10 - me just save this file now and try
313:12 - running this code so as you can see
313:14 - number cannot be divided by zero this
313:16 - line of statement is getting executed
313:19 - over here and this is the line that is
313:20 - getting printed now guys what would have
313:22 - happened if we don't have this try and
313:24 - accept block so let us just comment out
313:26 - these blocks over here so instead of
313:29 - this we are just having number it is
313:30 - equal to 10/ by 0 and then let me just
313:33 - comment out this line as well so number
313:36 - is equal to 10 / 0 only this line of
313:39 - code is there let me just save this file
313:41 - and try running this code as you can see
313:43 - we are getting zero division error
313:45 - division by zero and this is the
313:47 - exception that we are getting on the
313:48 - terminal so over here since we have not
313:50 - properly handled this exception this is
313:53 - the way that we are getting the output
313:55 - but we can have the proper output in
313:57 - this way like we can have a particular
313:59 - statement being printed by using this
314:02 - try and accept block so over here we
314:04 - have just provided the try block and
314:06 - after this we have provided the accept
314:08 - block as well we have provided a
314:10 - beautiful statement that is a user
314:12 - friendly statement which says number
314:14 - cannot be divided by zero and when we
314:16 - just save this file and try running this
314:18 - code now it says number cannot be
314:20 - divided by zero if the exception is
314:22 - occurring over here inside the tri block
314:25 - now guys let's say if there is no
314:26 - exception occurring inside the tri block
314:28 - so still the print statement will be
314:30 - executed let us just check that so over
314:33 - here instead of 10 / 0 we will say 10 /
314:36 - 2 in which case the answer will be 5 and
314:39 - that will be stored in this number
314:40 - variable and there is no exception that
314:42 - is occurring over here on this line of
314:44 - code so let me just save this file now
314:46 - what we will do is as a confirmation we
314:48 - will come out of this try and accept
314:50 - blocks and over here we will say end of
314:54 - code so we can just confirm that this is
314:57 - the line that is getting executed at the
315:00 - end of the code so when here let me just
315:02 - save this file and tryy running this
315:03 - code now as you can see end of code is
315:06 - getting displayed now that is because
315:07 - there is no zero division error that is
315:09 - occurring inside the tri block that is
315:11 - because we have changed the expression
315:13 - from 10 / 0 to 10 / 2 now guys there is
315:17 - another thing that you can do catching
315:19 - the specific exceptions in Python so as
315:21 - you can see this is the example over
315:23 - here we have the tri block and then
315:25 - let's say we have the variable name as
315:27 - even numbers and this is the python list
315:30 - as you can see we have 2 4 6 8 which is
315:32 - the list of numbers all are even numbers
315:35 - and what we are trying to do is we are
315:36 - going to print the even numbers with the
315:39 - index five over here but guys as you can
315:41 - see this is the index zero then we have
315:43 - index one then we have index 2 and then
315:46 - three so three is the final index the
315:48 - total length of the list is four and
315:50 - three is the final index that we can
315:52 - access but we are trying to access the
315:55 - index that is five so basically we
315:57 - should get the index out of bound error
315:59 - over here but we can also specify the
316:02 - different exceptions that we have seen
316:04 - so far so basically while providing the
316:06 - except keyword we can provide the zero
316:09 - division error over here which will say
316:11 - denominator cannot be zero and then we
316:13 - also have the accept keyword followed by
316:15 - the index error so in this case since we
316:18 - are having the multiple except logs it
316:20 - depends on the control flow the control
316:22 - flow will check that which type of
316:25 - exception is occurring and based on that
316:27 - exception it will try to match that
316:29 - exception is this exception related to
316:31 - to zero division error no in this case
316:34 - so is it matching with the index error
316:36 - yes since it is related to the index
316:38 - that we are trying to access which is
316:40 - not possible so it will print this
316:42 - statement that is index out of bound so
316:44 - let us check this block of code over
316:46 - here I'll just copy this and paste this
316:48 - in the VSS code since I'm little bit
316:50 - lazy in order to type all this code once
316:52 - again so over here let me just save this
316:54 - file and try running this code now as
316:56 - you can see it says index out of bound
316:58 - that's because the exception that is
317:00 - matching in inside this Tri block is the
317:03 - index error and this is the print
317:05 - statement that we are supposed to print
317:07 - if there is an index error that is
317:09 - occurring now guys let's say you want to
317:11 - print this denominator cannot be zero
317:13 - statement so what we have to do is we
317:16 - have to make sure that inside the tri
317:18 - block there is a divide by Z expression
317:21 - so what we will do is over here I'll
317:23 - just remove these lines of code and we
317:24 - will simply say number it is equal to 10
317:27 - / 0 so in this case divide by 0
317:30 - expression is is occuring and that is
317:32 - why we will get the zero division error
317:34 - and in this case we should get this
317:36 - statement that is denominator cannot be
317:38 - zero so let me just save this file now
317:40 - and try running this code as you can see
317:42 - denominator cannot be zero statement is
317:44 - getting printed so guys it depends on
317:46 - you you can have the specific exceptions
317:49 - being specified over here and each
317:51 - exception will be handled differently
317:53 - this is just a print statement that we
317:55 - have included over here you can have any
317:57 - code inside these accept blocks that you
318:00 - want to use based on your requirements
318:02 - of the project but guys remember that
318:04 - whatever matching exceptions that is
318:06 - occurring inside the tri block the
318:07 - control flow will try to match with
318:09 - those exceptions one at a time and once
318:12 - it matches with a particular accept
318:14 - block it will try to execute those lines
318:16 - of code inside that block now guys let
318:18 - us move to another task over here python
318:21 - try with lse claw so basically in some
318:23 - situations we might want to run a
318:25 - certain block of code if the code block
318:28 - inside try runs without any errors so
318:31 - for for these cases you can use the
318:32 - optional else keyword with the try
318:34 - statement so guys what happens is
318:36 - sometimes there will be no errors that
318:38 - are occurring over here I'll just remove
318:40 - these lines of code so I'll just keep
318:42 - one except block over here and I'll just
318:44 - remove this exception as well that is
318:46 - zero division error so what we are doing
318:49 - over here is denominator cannot be zero
318:51 - I'll just save this file and try running
318:53 - this code so this denominator cannot be
318:55 - zero is getting printed over here but
318:57 - guys what if this denominator is not
318:59 - zero let's see if I provide the
319:01 - denominator as two so in this case this
319:04 - statement will not get printed that's
319:05 - because there is no exception that is
319:08 - occurring and if there is no exception
319:09 - occurring no code in the accept block
319:12 - over here will get executed but what if
319:15 - we want to execute some line of code so
319:17 - over here we can simply provide the else
319:20 - part so basically what happens is let's
319:22 - say inside the tri block if we don't
319:24 - have any exception that is occurring so
319:27 - no block of code that is inside the
319:29 - except block will get executed uted but
319:32 - let's say in the end if we have this
319:33 - else block so whatever code we provide
319:35 - over here it will get executed only when
319:38 - there is no exception that is occurring
319:40 - over here inside the tri block so over
319:42 - here what we will do is we will say
319:44 - print we will simply say inside L block
319:48 - so guys this is the code let me just
319:50 - save this file now and try running this
319:52 - code as you can see there is no
319:53 - denominator cannot be zero that is
319:55 - getting printed but over here we are
319:57 - getting inside lse block that's because
320:00 - since there is no EX ception that is
320:01 - occurring the control flow is not going
320:04 - inside the except block but it sees that
320:06 - we have the else block over here so it
320:08 - executes those lines of code inside the
320:10 - lse block now guys what if there is an
320:12 - exception that is occurring so let's say
320:14 - if we provide this as 10 / by 0 as the
320:18 - expression so let me just save this file
320:20 - now this line should get printed over
320:22 - here but whether this lse part will get
320:24 - executed let us check that so let me
320:26 - just run this code once again as you can
320:28 - see denominator cannot be zero is
320:30 - getting printed but the code in the lse
320:32 - part is not getting printed that's
320:34 - because since the exception has occurred
320:37 - we are getting into the accept block but
320:39 - not into the else block so guys this is
320:41 - very important in case the accept block
320:43 - is not getting executed we can have the
320:46 - else Block in order to execute some
320:48 - lines of code that you want to execute
320:50 - let us move to another task over here we
320:52 - have something called as python try
320:54 - finally so guys this is another
320:56 - important concept as far as exception
320:58 - handling in Python is concerned so
321:00 - basically in Python the finally block is
321:03 - always executed no matter whether there
321:05 - is an exception or not so the finally
321:08 - block is optional and for each Tri block
321:11 - there can be only one finally block so
321:14 - guys what we will do is basically the
321:16 - understanding behind the finally block
321:17 - is irrespective of whether there is an
321:20 - exception that is occurring or not the
321:22 - code in the finally block will be
321:23 - executed so here we will simply have the
321:26 - finally keyword followed by the colon
321:29 - and then we will say inside finally blog
321:32 - so over here we will simply have double
321:34 - codes and inside this we will say inside
321:38 - finally block so guys first of all we
321:41 - will check when there is an exception
321:43 - that is occurring this line of code will
321:45 - get printed and we will not go inside
321:47 - the lse part but the control flow will
321:49 - go inside this finally block over here
321:51 - so let me just save this file now and
321:52 - try running this code so as you can see
321:55 - denominator cannot be zero which is this
321:57 - line of statement which is getting
321:58 - printed and then it is not going in the
322:00 - lse part but it is going in the finally
322:02 - part so it says inside finally block so
322:05 - over here exception has occurred and the
322:07 - control flow is going in the finally
322:09 - block now let us say there is no
322:11 - exception that is occurring we say 10 /
322:13 - 5 over here so let me just save this
322:15 - file now enter I running this code it
322:18 - says inside lse block so basically there
322:21 - is no exception that is occurring so the
322:23 - control flow is not going inside this
322:25 - except block but it is going inside the
322:28 - else block so over here as I have told
322:30 - you if the control flow doesn't go
322:32 - inside the accept block and if there is
322:34 - a else block basically this line of code
322:36 - will get executed and then at the end we
322:39 - have the finally block which is getting
322:40 - executed as you can see inside finally
322:43 - block so irrespective whether there is
322:45 - an exception that is occurring or not
322:47 - inside the tri block the finally block
322:50 - will be executed every time now guys
322:52 - where this thing is important basically
322:54 - let's say if you have the database
322:56 - connection or if you have file opened so
322:58 - you can close that file or close that
323:00 - database connection inside the finally
323:03 - block over here after carrying out your
323:05 - operations in the tri block which might
323:07 - have certain exceptions that might occur
323:09 - during the run time so guys during such
323:11 - instances the finally block becomes very
323:14 - important in order to execute those
323:16 - lines of code irrespective whether there
323:19 - was an exception that has occurred
323:21 - inside the tri block or not custom
323:23 - exceptions in Python Programming so guys
323:25 - in Python we can Define custom
323:27 - exceptions by creating a new class that
323:30 - is derived DED from the buil-in
323:31 - exception class so guys that we are
323:34 - going to check with the help of examples
323:35 - as well as you can see this is the
323:37 - syntax we have the class keyword
323:40 - followed by the space character and then
323:42 - we have the name of the exception that
323:44 - we want to create which is going to be
323:46 - the user defin exception and this is the
323:48 - way that we inherit another class inside
323:50 - the parenthesis after the user defined
323:53 - name we have the exception class name so
323:56 - guys whatever attributes and behaviors
323:58 - that are present inside the exception
324:00 - will get inherited to this custom error
324:03 - user defined exception over here and
324:05 - then we can have a statement over here
324:07 - inside this custom error as to why this
324:09 - error is being raised over here and then
324:11 - followed by the pass keyword and then
324:14 - guys we can have our own code that is
324:15 - the try and accept block and then inside
324:18 - the try block based on the conditions we
324:20 - can raise this custom error based on our
324:22 - requirements and once it is raised it
324:24 - will be handled by using the accept
324:26 - keyword over here followed by the custom
324:29 - error exception and then we can can have
324:31 - the block of code in order to handle the
324:33 - exception so guys let us check this with
324:35 - the help of example now over here first
324:37 - of all we are going to have the user
324:38 - Define exception so over here let's say
324:41 - we have the class and the exception that
324:43 - we are going to have is let's say we are
324:45 - having the voting application and we
324:48 - have to check whether a particular
324:50 - person is having the age that is greater
324:52 - than 18 if the age is less than 18 and
324:54 - the person is not eligible to vote then
324:57 - we are going to call this particular
324:59 - exception that we are going to fine so
325:01 - we are going to Simply name the
325:03 - exception as the age error over here so
325:05 - we have age error and then it should
325:08 - inherit the exception class so over here
325:10 - we are going to say exception and Then
325:13 - followed by colon and then we can simply
325:15 - say raise when person age is less than
325:21 - 18 so if the person age is less than 18
325:24 - he or she is not eligible to vote and
325:26 - this is the exception that is going to
325:28 - be raised so over here we are going to
325:30 - to have the pass statement and now guys
325:33 - what we will do is we will have our
325:35 - lines of code over here inside the tri
325:37 - block so over here we will ask the user
325:39 - in order to enter the age so over here
325:42 - we will have age variable it is equal to
325:45 - we are going to take the input from the
325:47 - user and it says enter age and then we
325:51 - have colon and then what we will do is
325:53 - we will check if this age is less than
325:55 - 18 so we will simply say if age is less
326:00 - than 18 followed by colon if the entered
326:03 - age is less than 18 we have to raise
326:05 - this age error exception so I'll just
326:07 - copy this and paste this over here first
326:10 - of all we have to use the raise keyword
326:12 - followed by the age error over here so
326:15 - basically if age is less than 18 then we
326:17 - have to raise the age error and then
326:20 - what we can do is we can catch that
326:22 - error over here inside the accept block
326:24 - so accept block followed by the age
326:26 - error over here and then we have the
326:28 - colon and then we can simply say say
326:31 - print and over here person is not
326:34 - eligible to vote so guys this is a
326:37 - statement that is going to be printed
326:39 - when the age is less than 18 but what if
326:41 - the age is not less than 18 and if it is
326:44 - greater than 18 so the person is
326:46 - eligible to vote so what we will do is
326:48 - we can have the else part over here
326:50 - which will get executed when this
326:52 - exception is not occurring inside the
326:54 - Trib blog so over here we can simply
326:57 - provide the print statement and we will
326:59 - say person is eligible to vote now guys
327:04 - this statement we can also have inside
327:06 - the tri block as well we can also have
327:09 - after this if statement we can have the
327:11 - else part and the same print statement
327:13 - over here so it depends on you how you
327:15 - want to structure your code this is
327:17 - another way in order to provide the else
327:19 - part and this will be executed only when
327:21 - there is no exception that is occurring
327:23 - inside the tri block and then optionally
327:25 - you can also have the finally block as
327:27 - well which will help you to execute
327:29 - certain lines of code irrespective
327:31 - whether the exception has occurred
327:33 - inside the triy block or not so guys let
327:35 - me just save this file now and try
327:36 - running this code now so it says enter
327:39 - age so let's say we provide the age is
327:41 - 23 over here and then when we press
327:43 - enter it says less than not supported
327:46 - between instances of Str Str and int so
327:49 - guys by default whenever we take any
327:51 - input from the user it takes the input
327:53 - as the string so basically this age data
327:56 - type is string right now we want to
327:57 - convert it to the integer so we can
327:59 - simply convert this string into integer
328:02 - over here we can provide the int and
328:04 - inside the parenthesis we can take the
328:06 - entire input over here so guys let me
328:08 - just save this file now and try running
328:09 - this code once again we will provide the
328:11 - age as 23 and when we press enter it
328:14 - says person is eligible to vote so
328:17 - basically what we have done over here is
328:18 - we have converted the string data type
328:21 - to the integer data type by enclosing
328:23 - this entire input by the in and now let
328:26 - us run this code once again now so that
328:28 - we can catch this exception when the AG
328:30 - is less than 18 so guys let's say when
328:32 - the age is 17 over here in which case
328:35 - the age is less than 18 right now when
328:38 - we press enter it says person is not
328:40 - eligible to vote so what has happened
328:42 - over here is since the age was less than
328:45 - 18 the raise age error has helped us in
328:48 - order to throw this exception that is
328:50 - the age error and what has happened is
328:52 - the control flow has come over here to
328:54 - this accept block and it printed this
328:56 - line of code that is person is not
328:59 - eligible to vote so that is the same
329:01 - string that is getting printed over here
329:03 - person is not eligible to vote and
329:05 - previously it was printing this
329:07 - statement that is person is eligible to
329:09 - vote when the age was greater than or
329:11 - equal to 18 now guys when the age is 18
329:14 - Again the person will be eligible to
329:16 - vote that's because the condition that
329:18 - we have given over here in order to
329:19 - raise the error is age less than 18 so
329:22 - let us check that once again over here
329:24 - when we run this code once again when we
329:27 - say 18 as the age it says person is
329:29 - eligible ible to vote so the person will
329:32 - be not eligible to vote only when the
329:34 - age is less than 18 and not equal to 18
329:38 - so guys this is the way that we can
329:39 - create our own user defined custom
329:42 - exception over here and call that
329:44 - Exception by using the raise keyword
329:46 - inside the tri block and catch that
329:48 - exception using the accept block over
329:51 - here and handle it accordingly based on
329:53 - our requirements object oriented
329:55 - programming in Python so guys we are
329:57 - going to check the classes and objects
329:59 - with the help of example
330:00 - python is a versatile programming
330:02 - language that supports various
330:04 - programming Styles including
330:06 - objectoriented programming through the
330:08 - use of objects and classes which we are
330:10 - going to see with the help of examples
330:12 - as well now an object is any entity that
330:16 - has attributes and behaviors so for
330:18 - example a parrot is an object and it has
330:22 - multiple attributes as you can see there
330:24 - are multiple attributes that can be
330:26 - present which is name then we have age
330:28 - color and so on apart from that it also
330:31 - has certain Behavior such as whether it
330:33 - can dance or not so dancing is one of
330:35 - the behavior whether it can sing or not
330:37 - so singing is another Behavior now I'm
330:39 - not sure whether a parrot can really
330:41 - dance or not but these are certain
330:43 - behaviors that we can consider in order
330:45 - to understand classes and objects now
330:47 - guys similarly a class is a blueprint
330:50 - for that object so basically these
330:52 - objects are having the attributes and
330:54 - behaviors and the values will be stored
330:56 - in these objects but the blueprint will
330:58 - be present inside the class so basically
331:00 - this class can be treated as a template
331:03 - which has certain attributes and
331:05 - behaviors being defined over here and we
331:07 - can create multiple objects related to
331:09 - that class so we are going to check with
331:11 - the help of example how do we create a
331:13 - class parrot with the attributes as name
331:16 - and age so let us move to the vs code
331:18 - over here the very first thing that we
331:19 - have to create is the class so basically
331:22 - we have to provide the class keyword
331:24 - followed by the name of the class so
331:26 - let's say the parrot is the name of the
331:28 - class over here and then we have a colon
331:31 - and then we can have different
331:32 - attributes so one of the attributes is
331:34 - name over here we will assign it with a
331:36 - empty string and then we have age as
331:39 - well we will assign it as zero over here
331:41 - as the initial value now Guys these are
331:43 - the two attributes that we have defined
331:45 - for this class that is pared now we can
331:47 - create different objects out of this
331:50 - class now this class is acting as a
331:52 - blueprint or we can say as a template in
331:54 - order to create multiple objects so we
331:57 - will come out of this class and what we
331:59 - will do is we will create the objects
332:01 - for this class so let's say we have
332:03 - parot one followed by equal to operator
332:06 - and then we can simply provide the name
332:08 - of the class that is parot followed by
332:10 - the open and close parenthesis so this
332:12 - is the way that we can initialize an
332:14 - object for this class that is parad and
332:17 - then we can use this object in order to
332:20 - initialize these attributes that is name
332:22 - and age so over here what we will do is
332:25 - we will use this parot one object
332:27 - followed by Dot and as you can see we
332:29 - are getting getting this name and age
332:31 - being Auto suggested by the vs code
332:33 - that's because we have already defined
332:35 - these attributes inside this blueprint
332:37 - that is class parrot so over here we are
332:40 - going to provide the name as the name of
332:42 - the parrot one object so let's say we
332:45 - provide the name as blue over here and
332:47 - then let's say we also want to provide
332:49 - the age of this parrot object so again
332:51 - we will provide parrot one followed by
332:53 - Dot and then we have the age attribute
332:55 - let's say it is 2 years old so we have
332:57 - two as the parr's age now guys let's say
333:00 - we want to create another object with
333:02 - another name and age so again we will
333:04 - copy these lines of code and paste this
333:07 - over here what I will do is instead of
333:09 - parot 1 we will say parot 2 because this
333:12 - is another object so this is the second
333:14 - object that we are creating by using
333:17 - this parrot class and over here again we
333:19 - will say parot 2. name and parrot 2. AG
333:23 - so let's say the name of the parot two
333:25 - is Vu and its age is five over here so 5
333:28 - years so guys over here we have we have
333:30 - created two objects for this class that
333:32 - is parot similarly we can create any
333:34 - number of objects that we want it's very
333:37 - important to note that while creating
333:39 - the objects we provide this variable
333:41 - name on the left hand side and on the
333:42 - right hand side we provide the name of
333:44 - the class followed by the open and close
333:46 - parenthesis and then we can call the
333:48 - different attributes of that class in
333:50 - order to initialize them now guys after
333:53 - these objects are being initialized with
333:54 - their names and age we can simply print
333:57 - them on the console so what we can do is
333:59 - we can have the print statement with the
334:01 - formatting being enabled so over here
334:04 - inside the print statement we can have
334:06 - the F followed by the double codes and
334:08 - then what we can do is open and close
334:09 - curly braces inside this we can have the
334:12 - parent 1 do name over here is and Then
334:16 - followed by curly braces parot 1. Ag and
334:20 - then we can have years old so guys
334:23 - basically what is happening over here is
334:25 - inside the open and close curly braces
334:27 - we can provide the variable names in all
334:29 - order to get their values being printed
334:32 - inside the print statement so this parot
334:34 - 1. name will give us the value of this
334:37 - variable that is blue over here and then
334:39 - followed by is and then again we will
334:41 - get parot 1. AG which is two in this
334:45 - case so blue is 2 years old so this is a
334:48 - statement that should get printed and
334:50 - then similarly we can copy this line of
334:52 - code and paste this over here and
334:54 - instead of parot 1 we can simply say
334:56 - parot 2 so we have parot 2. name and
334:59 - then par 2. AG so guys let me just save
335:02 - this file now and try running this code
335:04 - as you can see blue is 2 years old this
335:07 - is what is getting printed by using the
335:09 - first print statement and over here
335:11 - again we are getting Vu is 5 years old
335:14 - so this is the second print statement
335:16 - that is helping us in order to print
335:17 - this particular statement so guys this
335:19 - is the way that we can easily create a
335:21 - class in this case we have created the
335:23 - pared class and we have two attributes
335:25 - that is name and age you can have any
335:27 - number of attributes for the class based
335:29 - on on your requirements and apart from
335:31 - that while creating the objects you can
335:33 - have the values for those attributes
335:35 - based on those particular individual
335:37 - objects and then you can call those
335:39 - attributes by using the objects that you
335:41 - have just initialized by using this
335:43 - statement that is the object on the left
335:45 - hand side followed by equal to operator
335:48 - and then we have the class name followed
335:49 - by the open and close parenthesis this
335:52 - is called instantiating of the object or
335:54 - we can also call it as initializing an
335:56 - object in Python Programming inheritance
335:59 - in Python programming so guys
336:00 - inheritance is a way of creating a new
336:03 - class for using details of an existing
336:06 - class so this we are going to check with
336:07 - the help of examples as well the newly
336:10 - formed class is a derived class which is
336:12 - also called as a child class and
336:14 - similarly the existing class is a base
336:17 - class or the parent class so guys what
336:19 - we are doing over here is we are already
336:21 - creating a parent class that is also
336:23 - called as a base class over here and
336:26 - then we also create a child class for
336:28 - which the attribute are derived from the
336:31 - parent class from here and this is what
336:33 - is called as The Inheritance now what
336:35 - will be inherited all the attributes
336:37 - provided that they are public along with
336:39 - the methods will be inherited by the
336:41 - child class so guys let us check python
336:43 - inheritance with the help of example now
336:45 - over here so let us switch to the vs
336:47 - code first of all we will create the
336:49 - parent class so let us say we have the
336:51 - class that is called as animal over here
336:54 - and inside this animal class we will
336:55 - Define two functions that is eat and
336:57 - sleep so we will have DF keyword
337:00 - followed by eat that is function one and
337:03 - then inside the parenthesis we are going
337:05 - to have the parameter that is self
337:07 - always remember guys whenever we are
337:09 - calling the function inside the class it
337:12 - is going to take a single parameter
337:14 - which is going to be the object by
337:15 - default so we need to catch that object
337:18 - with any name as a parameter over here
337:20 - so we have given the name of this
337:21 - parameter as self over here so that we
337:23 - can identify that this is the object and
337:26 - then we can use this object as well in
337:28 - order to access its attributes and
337:30 - inside this eat function we are going to
337:32 - have a simple print statement and we
337:34 - will say I can eat so guys this is a
337:37 - statement that is going to be printed
337:39 - when we call the eat function using the
337:41 - animal object and then similarly we will
337:43 - have the Sleep Method as well so we have
337:46 - def keyword followed by Sleep Method and
337:49 - then again we will have the parameter as
337:51 - the self which will be passed by default
337:53 - and then inside this again we are going
337:55 - to have the print statement and we can
337:57 - say I can sleep so Guys these are two
338:00 - methods or functions that we have
338:02 - defined inside the parent class that is
338:04 - the animal class now guys how do we
338:06 - inherit these methods to another class
338:09 - so let's say we have another class over
338:11 - here which will be a child class of the
338:13 - animal class so we are going to have
338:15 - another class and let's say the name of
338:17 - the class is dog over here and then in
338:19 - order to have its attributes and
338:22 - functions of the super class that is the
338:24 - animal after this name of the class that
338:26 - is dog we have to provide open and close
338:29 - parenthesis and inside this parenthesis
338:31 - we have to provide the name of the super
338:33 - class that is animal in this case so
338:36 - this particular class that is animal we
338:38 - want to inherit its attributes and
338:40 - functions inside the child class that is
338:42 - dog so this is the way that we inherit
338:45 - the super class and now we can have a
338:47 - colon over here and then we can have the
338:50 - attributes and the functions of this
338:51 - class that is dog class separated so
338:54 - over here we are going to have the DF
338:56 - keyword followed by let's say I'm simply
338:59 - going to have have the display method
339:00 - over here and it is going to take one
339:02 - parameter that is self and then we are
339:04 - simply going to print that we are inside
339:08 - doc class so this particular statement
339:12 - will be printed whenever we are going to
339:13 - call this display method over here so
339:16 - guys this is the way that python
339:17 - inheritance Works what I will do is I'll
339:19 - just zoom out little bit so that you can
339:21 - see the entire code at once so over here
339:23 - we have created the super class that is
339:25 - the animal class and then we are
339:27 - creating another class that is called as
339:29 - the child class and after the name of
339:31 - the child class we are providing the
339:33 - name of the super class over here that
339:35 - is the parent class inside the open and
339:38 - close parenthesis and what this will do
339:40 - is the eat and sleep methods will be now
339:43 - available inside the dog class as well
339:45 - so guys why this is important so let us
339:47 - come out of this class now and what we
339:50 - will do is let us create the object of
339:52 - this class that is the dog class so what
339:54 - I will do over here is we will create
339:57 - dog one that is the object of the dog
339:59 - class class followed by equal to and
340:01 - then the name of the class that is dog
340:03 - over here so we have created one object
340:05 - of the dog class now guys ideally we
340:08 - have seen that we can call the display
340:10 - method which belongs to the dog class so
340:12 - we can do that over here so I'm going to
340:15 - call the dog one object followed by Dot
340:18 - and then we have the display method so
340:20 - after this we are going to have the open
340:22 - and close parentheses let me just save
340:24 - this file first and try running this
340:26 - code now so as you can see we are
340:28 - getting we are ins inside dog class
340:30 - which means this statement is getting
340:32 - printed now guys do we have any other
340:34 - method apart from this display method
340:36 - yes we do have and those are eat and
340:38 - sleep methods why so because we have
340:41 - inherited the methods from the animal
340:43 - class by using the python inheritance so
340:45 - basically we can use this object name
340:48 - that is dog one in order to call eat and
340:51 - sleep methods over here so if we call
340:53 - both the method so I'll say dog one
340:56 - followed by Dot and then as you can see
340:58 - vs code is in us this eat method as well
341:01 - so we have eat followed by open and
341:03 - close parenthesis and then again we will
341:05 - call the dog one object followed by Dot
341:07 - and then Sleep Method is also being
341:09 - suggested by the vs code so we are going
341:11 - to call both the methods over here so
341:13 - let me just save this file now and try
341:15 - running this code so as you can see we
341:17 - are getting all the three statements
341:19 - that is we are inside dog class I can
341:22 - eat and I can sleep which are the
341:24 - statements that are being printed by
341:26 - using these methods respectively so guys
341:28 - this is the power of python inheritance
341:31 - we can use the different attributes and
341:33 - the methods that were defined in a super
341:35 - class inside the sub class by using the
341:38 - object of the child class over here
341:40 - which is also called as the subass over
341:42 - here guys it is very important to note
341:44 - that whenever we are defining the
341:46 - methods inside the class we need to
341:48 - provide one parameter over here which is
341:50 - going to be the object that will be
341:52 - passed so behind the scenes what is
341:54 - happening over here is when we call dog
341:56 - 1. display over here the dog one object
342:00 - is being passed with this display method
342:02 - even though we are not providing any
342:04 - parameter over here but behind the
342:06 - scenes the object is being passed over
342:08 - here and it needs to be caught by this
342:10 - particular method what happens if we
342:12 - don't provide this parameter let us
342:14 - check this so I'll just remove the self
342:16 - keyword over here and I'll just save
342:17 - this file now over here we are not
342:20 - receiving any parameter as we can see so
342:22 - let me just run this code now so as you
342:24 - can see type error dog. display takes
342:27 - zero positional arguments but one was
342:29 - given so basically behind the scenes
342:31 - this dog one object is being passed and
342:34 - we need to have a parameter over here
342:36 - while defining the function and that is
342:38 - the reason why we had given this self
342:40 - parameter name in order to identify that
342:43 - this is the object of this particular
342:45 - class that is dog so let me just save
342:47 - this file now and try running this code
342:48 - once again so as you can see there are
342:50 - no more errors that are getting
342:51 - displayed and all the three statements
342:53 - are getting displayed over here now guys
342:55 - what are the uses of inheritance so as
342:57 - you can see since a child class can
342:59 - inherit all the functionalities of the
343:01 - parents class this allows code
343:03 - reusability so as you can see over here
343:05 - we need not have to provide the eat and
343:08 - sleep methods once again inside the dog
343:10 - class and we were able to access both
343:13 - these methods by using the object of the
343:15 - dog class without actually providing the
343:17 - definition of those methods over here
343:19 - once a functionality is developed you
343:21 - can simply inherit it no need to
343:23 - reinvent the wheel this allows for
343:25 - cleaner code and easier to maintain now
343:28 - since you can also add your own
343:29 - functionalities in the child class you
343:31 - can inherit only the useful
343:33 - functionalities and Define other
343:35 - required features so guys based on your
343:37 - requirement it depends on you which
343:39 - class you want to inherit and create the
343:41 - child classes and the parent classes
343:43 - over here based on your project
343:44 - requirements Constructor in Python
343:47 - Programming now guys a python
343:49 - Constructor is a function inside a class
343:51 - that helps us to initialize certain
343:53 - attributes of a class so far we have
343:55 - seen creating the class attributes and
343:58 - the functions and while initializing the
344:00 - attributes of the classes object we use
344:02 - the object name followed by the dot and
344:05 - then the attribute name but is there a
344:07 - better way in order to initialize those
344:09 - attributes inside the class yes it is so
344:12 - we have something called as double *
344:14 - underscore followed by in it and then
344:16 - again double times underscore followed
344:18 - by open and close parenthesis which is a
344:21 - Constructor function that is called
344:23 - whenever a new object of that class is
344:26 - instantiated so guys let us check this
344:28 - with the help of example example now so
344:29 - let us move to the VSS code what we will
344:32 - do is we will create a class that is
344:34 - called as the parot class over here and
344:36 - we will Define two attributes so over
344:38 - here we have the name which is of the
344:40 - string data type so let's say we have
344:41 - the empty string initially and then
344:44 - let's say we have the age attribute
344:46 - which is defined as zero over here which
344:48 - is the integer so guys what we will do
344:50 - is let us say we want to create the
344:53 - object of this class so what we have to
344:55 - do is let's say we provide the object
344:57 - name as parot one followed y equal to
344:59 - operator and then we have the name of
345:01 - the class that is parent followed by
345:03 - open and close parenthesis now guys so
345:06 - far what we had done is in order to
345:08 - initialize both these attributes we were
345:10 - calling this object name followed by Dot
345:13 - and then the name of the attribute so
345:15 - let us do that first so we are going to
345:17 - use the parot one object over here
345:19 - followed by Dot and then let's say the
345:22 - name of the parrot it is blue over here
345:24 - so we provide the name of the parrot and
345:27 - then we also provide the AG age of the
345:29 - parrot so let's say parrot 1. AG it is
345:32 - equal to 2 years old and then we can
345:34 - simply print the name and age of this
345:36 - parrot so let us say we provide the
345:38 - print method over here and we provide
345:40 - the parrot one object so parot one
345:43 - followed by Dot and then we have name is
345:46 - and then again we want to get the age so
345:48 - parot 1. age and then we have years old
345:53 - so over here blue is 2 years old will be
345:56 - displayed so let us save this file now
345:58 - and try running this code so as you can
346:00 - see blue is 2 years old so guys this is
346:03 - the conventional way that we had seen so
346:05 - far in order to instanciate an object of
346:08 - the class and also assign the values to
346:10 - the attributes of that class so is there
346:12 - a better way in order to assign these
346:14 - values to these attributes yes we can do
346:16 - so by using the Constructor so what we
346:19 - can do is we can simply remove these two
346:21 - lines of code over here so I'll just
346:22 - remove them and then guys inside this
346:25 - class we are going to have the innit
346:27 - method which is the Constructor so over
346:29 - here we are going to have the DF keyword
346:32 - followed by double * underscore and then
346:35 - we have the in it so as you can see vs
346:37 - code is suggesting us this method which
346:39 - we are going to use so in it and it is
346:41 - going to take one parameter by default
346:43 - as I have already told you previously
346:45 - whenever we are going to call any method
346:48 - inside the class the object that is used
346:50 - in order to call that method is also
346:52 - passed by default behind the scenes so
346:55 - the self parameter represents the object
346:57 - of this parro class over here I'll just
346:59 - remove this part and what we are going
347:01 - to do is we are going to take both these
347:04 - attributes that is name and age as the
347:06 - parameters so over here after this self
347:08 - we are going to have comma and then we
347:11 - are going to have name one so guys I'm
347:13 - naming this as name one so that you
347:15 - don't get confused between this name and
347:17 - this name one so this name one will be
347:19 - passed as the parameter when this
347:21 - Constructor is being called over here
347:23 - and then followed by comma we also have
347:25 - age one and then what we can do is for
347:27 - this self that is the object followed by
347:30 - dot we can have name it is equal to name
347:34 - one over here and then again we can have
347:36 - the self followed by Dot and then age it
347:39 - is equal to age 1 so what we are simply
347:42 - doing over here is the name and age
347:44 - attributes of this object the object is
347:47 - being represented by self and then self.
347:49 - name it will be assigned with the value
347:52 - of this name one that is being passed
347:54 - same thing for the age as well the self.
347:57 - age the value will be pass by using this
347:59 - age one parameter over here and both
348:02 - these values will be assigned to name
348:03 - and age attributes now guys when exactly
348:06 - this Constructor is being called so
348:08 - basically whenever you are going to
348:10 - create an object and call this class
348:12 - over here that is the parrot class The
348:15 - Constructor will be called so while
348:16 - instantiating this object we also need
348:19 - to pass the name and age for this
348:21 - particular instance of the class so what
348:23 - we will do is let's say we take the same
348:25 - name that is blue over here so we
348:27 - provide the first parameter is the name
348:29 - of the parot followed by comma and then
348:32 - we provide the age that is 2 years old
348:34 - which is the second parameter so guys
348:36 - when the control flow comes over here it
348:38 - sees that the class is being called with
348:41 - these two parameters and we also have
348:43 - the Constructor so basically this parot
348:45 - one will be assigned to this parameter
348:47 - that is self and then this name and age
348:49 - will be assigned to this name one and
348:51 - age one and this name and age will be
348:53 - assigned those values respectively and
348:56 - then we can simply have this print
348:58 - statement in order to print the same
349:00 - statement that we had seen previously as
349:02 - well so let me just save this file now
349:04 - and try running this code so as you can
349:06 - see we are getting the same statement
349:07 - that is blue is 2 years old that's
349:09 - because we have provided the same name
349:11 - and the same age let's say we provide a
349:14 - different name over here so let's say we
349:15 - provide Vu and it is 5 years old so let
349:18 - me just save this file now and try
349:19 - running this code as you can see Vu is 5
349:22 - years old is getting displayed over here
349:24 - so guys in this way what we have done is
349:26 - while instantiating the op object we are
349:29 - passing the values or the attributes
349:31 - that are present inside that class for
349:33 - which the values are getting assigned
349:35 - now guys another important functionality
349:37 - of this Constructor is we can also
349:39 - remove these attributes that are being
349:41 - declared so there is no need of
349:43 - declaring these attributes over here so
349:45 - I'll just remove these lines of code
349:47 - over here and what exactly is happening
349:49 - is while this Constructor is being
349:51 - called the interpretor comes to know
349:53 - that this name and age are the
349:55 - attributes of this class that is the
349:57 - parent class over here and it assigns
349:59 - the values that are being passed to name
350:01 - one and age one so to make it more
350:03 - simple let us say we name this parrot as
350:06 - first parrot over here for which the age
350:08 - is 2 years old and let's say I provide
350:11 - another parrot so I'll just copy this
350:13 - line of code and paste this over here
350:15 - and then I provide this as parrot to and
350:17 - then we can say second parrot over here
350:20 - which is 5 years old so we'll say 5
350:22 - years old and then we will print both
350:24 - the parrots over here inside the print
350:25 - statement I'll just copy these lines of
350:27 - code and paste this over here and then
350:29 - we can say parot 2. name and then again
350:32 - over here parot 2. AG so let me just
350:34 - save this file now and try running this
350:36 - code so as you can see first parot is 2
350:39 - years old and second parot is 5 years
350:41 - old both the statements are getting
350:43 - displayed over here so guys this is the
350:45 - way that you can Define The Constructor
350:46 - inside the class by using the underscore
350:49 - uncore init method and Then followed by
350:52 - the self that is being passed
350:54 - automatically as one of the parameters
350:56 - and then you can have any number of
350:58 - parameters being passed over here inside
351:00 - the Constructor which can be used as the
351:02 - values for the attributes of the class
351:04 - that you have defined and those values
351:06 - need to be passed whenever you are
351:08 - creating a new object for that class
351:10 - encapsulation in Python Programming so
351:13 - guys encapsulation is one of the key
351:15 - features in objectoriented programming
351:18 - because encapsulation refers to the
351:20 - bundling of attributes and methods
351:23 - inside a single class so we have seen so
351:25 - far the various attributes and methods
351:27 - that we have been been creating inside
351:29 - the class that functionality of the
351:31 - Python Programming is called
351:33 - encapsulation now it prevents outer
351:35 - classes from accessing and changing
351:37 - attributes and methods of a class so far
351:40 - we have seen that all the attributes and
351:42 - methods were public in nature but in
351:44 - this case we are going to create some
351:46 - private attributes which cannot be
351:48 - directly accessed outside the class so
351:51 - this also helps us to achieve data
351:53 - hiding over here now in Python we denote
351:56 - private attributes using the unders
351:58 - score as the prefix either we can have
352:00 - the single underscore or the double
352:02 - underscore so let us check this with the
352:04 - help of example now over here as you can
352:06 - see in this example we have the class
352:08 - computer and then we also have the
352:10 - Constructor that is in it followed by
352:12 - the self which is the parameter for that
352:14 - object that is being passed and then
352:16 - self. Max price so as you can see over
352:19 - here we have the prefix that is double
352:21 - uncore followed by Max price so this is
352:24 - one of the attributes of this computer
352:26 - class over here and we are providing the
352:28 - value of 900 to this Max price over here
352:31 - inside the Constructor now apart from
352:33 - this Constructor we have more couple of
352:35 - functions inside this class as you can
352:37 - see we have the sell function over here
352:39 - which simply prints the selling price is
352:41 - the self followed by Dot and then the
352:43 - max price so basically this statement
352:45 - will help us in order to print this
352:47 - value that is the max price value of the
352:49 - computer and then we have another method
352:52 - that is set max price which takes the
352:54 - object that is using the self and then
352:56 - it also takes the price price over here
352:59 - so in case you want to set another Max
353:01 - price for this computer you can use this
353:03 - set max price function what it will do
353:06 - is it will simply update the value of
353:08 - the max price of the computer as you can
353:10 - see with this particular statement so
353:12 - guys let us check this with the help of
353:14 - example now what I will do is I'll
353:15 - simply copy these lines of code since
353:17 - I'm little bit lazy in order to type
353:19 - them again so we are going to paste it
353:21 - inside the vs code so over here what we
353:24 - are going to do is we are going to print
353:26 - the max price of the computer computer
353:28 - so first of all we are going to create
353:30 - the object that is comp one over here
353:32 - followed by equal to and then we have
353:35 - the computer class name so basically
353:37 - since a Constructor is not taking any
353:39 - other parameter apart from this self
353:41 - which is the object itself so we need
353:43 - not have to provide any parameter over
353:45 - here while instantiating this object
353:47 - that is comp one now what we will do is
353:49 - simply we will call the cell function
353:51 - over here that is this particular
353:53 - function so we can use the comp one
353:55 - object followed by Dot and then we have
353:58 - the cell function so after this open and
354:01 - close parenthesis so let me just save
354:03 - this file now and try running this code
354:04 - so basically this print statement should
354:07 - get executed and it should be displayed
354:09 - on the terminal so I'll just run this
354:10 - code now as you can see selling price is
354:13 - 900 so what exactly happened is when the
354:16 - control Flow came over here that is comp
354:18 - one it is equal to computer the
354:20 - Constructor of this class that is the
354:21 - init method was called and inside this
354:24 - what we have done is this private
354:27 - attribute so guys BAS basically this
354:28 - double uncore denotes that this is the
354:30 - private attribute of the computer class
354:33 - so basically this private attribute was
354:35 - initialized inside the Constructor and a
354:37 - value of 900 was being assigned to this
354:40 - particular attribute and then what we
354:42 - did is when the control Flow came over
354:44 - here that is while calling the sell
354:46 - function basically this print statement
354:48 - was executed so selling price it is
354:51 - equal to this self. Max price got
354:54 - printed over here which is 900 right now
354:56 - now guys let us do another thing what we
354:58 - will do is we will try to access this
355:01 - private attribute from outside of this
355:03 - class so over here we will call comp one
355:06 - once again followed by Dot and then we
355:09 - can call this private attribute that is
355:11 - the max price so as you can see this Max
355:13 - price is getting suggested by the VSS
355:15 - code so we will call this Max price and
355:17 - what we will do is we will try to assign
355:19 - another value that is 1,000 over here to
355:22 - this Max price and then again let us say
355:24 - we want to call this print statement so
355:27 - again we will call this cell method over
355:29 - here so I'll just copy this line of code
355:31 - and paste this over here let me just
355:33 - save this file now and try running this
355:34 - code so as you can see selling price 900
355:37 - this is the statement that was printed
355:39 - by calling the first sell method and
355:42 - then the second time the sell method was
355:43 - called again the selling price was equal
355:45 - to 900 so guys why so that's because
355:49 - this Max price is the private attribute
355:51 - and we directly cannot access this
355:53 - attribute by using this object we need
355:56 - to have another method inside the
355:58 - computer class in order to assign
356:01 - another value to the private attribute
356:03 - and that is why we have this method that
356:05 - is the set max price along with the
356:07 - parameter price which it is going to
356:10 - take in order to replace the existing
356:12 - Max price over here so what we can do is
356:15 - we are going to call the comp one object
356:18 - once again followed by Dot and this time
356:20 - instead of directly accessing this Max
356:23 - price we are going to call this set max
356:25 - price over here so set max price and it
356:28 - is expecting two parameters the first
356:30 - parameter is the self which is going to
356:32 - be passed by default which is going to
356:34 - be the comp one object and then the
356:36 - second parameter is the price which we
356:38 - are going to pass to this method so
356:40 - again what we will do is simply we are
356:42 - going to provide this th000 price that
356:44 - we try to assign to the max price
356:47 - directly over here so set max price and
356:49 - then again let's say we want to print
356:51 - the selling price over here so again we
356:53 - are going to call the sell method once
356:55 - again so comp 1. sell so over here the
356:58 - only difference is we are calling the
357:00 - method that is the set max price and we
357:02 - are passing the value of the new Max
357:04 - price over here which is going to be
357:06 - passed to this price and then the max
357:08 - price value will be the updated price
357:11 - that we have just said so guys let me
357:12 - just save this file now and try running
357:14 - this code so as you can see selling
357:16 - price 900 and then selling price 900
357:19 - once again and the third time that we
357:20 - tried by using the set max price over
357:23 - here it was 1,000 so this time it is
357:25 - selling price it is equal to 1,000 so
357:27 - guys by using this method in order to
357:30 - set the value of a private attribute we
357:33 - were successfully able to update the
357:36 - value of this private attribute and this
357:38 - is the main functionality which we call
357:39 - it as encapsulation as far as
357:41 - objectoriented programming in Python is
357:44 - concerned so guys let us run this code
357:46 - once again by a different value let's
357:47 - say the max price over here we set it to
357:50 - 2,000 so let me just save this file now
357:51 - and try running this code so this time
357:53 - the selling price is coming over here
357:55 - once again as 2,000 and guys this this
357:57 - is the way in order to hide certain
358:00 - attributes of a class you can have them
358:02 - as the private attribute by prefixing
358:04 - and use the different methods in order
358:07 - to set their values by using the objects
358:10 - of that class method overriding in
358:12 - Python Programming so guys method
358:14 - overriding in Python is a way of letting
358:17 - method of a subass override the method
358:20 - of a super class so let's say for
358:22 - instance inside the super class we have
358:25 - a method that is eat and then inside the
358:27 - the subass we also have the same method
358:30 - with the same name that is eight so
358:32 - basically the method inside the subass
358:35 - will be executed instead of the method
358:37 - that is present inside the super class
358:39 - so let us check this with the help of
358:41 - example now over here so as you can see
358:43 - this is the class that is animal which
358:45 - is being treated as the parent class or
358:47 - the super class and over here we have
358:49 - the attribute that is the name of the
358:51 - animal and it has a function that is the
358:53 - eat and it takes one parameter that is
358:55 - self over here it simply prints
358:57 - statement that is I can eat now guys
359:00 - again we have another class over here
359:02 - that is the dog which inherits this
359:04 - parent class that is animal and again
359:06 - what is happening over here is this eat
359:08 - is being inherited by this dog class but
359:11 - the dog class is also having its own eat
359:14 - method over here so as you can see this
359:16 - eat method is once again present inside
359:18 - the dog class and it is printing its own
359:21 - statement that is I like to eat bones so
359:23 - guys what we will do over here is I'll
359:25 - just simply copy these lines of code and
359:27 - paste it in the vs code and let us check
359:30 - the functionality of the method
359:31 - overriding and how it can be used in
359:34 - your project based on your requirement
359:36 - so I'll just remove certain commments
359:37 - over here so as you can see we have this
359:39 - parent class that is animal and then we
359:41 - have the child class that is dog over
359:44 - here both are having the eat method so
359:46 - what we will do is first of all I'll
359:48 - just comment out these lines that is
359:50 - this particular function is not present
359:52 - let's say inside the dog class I'll
359:54 - simply provide the pass statement over
359:56 - here so what L is happening first of all
359:59 - we have the animal class which is having
360:00 - the eat function and this dog class it
360:03 - is inheriting the animal class so the
360:05 - dog class will have access to this
360:07 - function that is eat over here so I can
360:09 - eat will be displayed so what we will do
360:12 - is first of all we will create the
360:14 - object of this dog class so let's say we
360:16 - have dog one it is equal to and then the
360:19 - name of the class that is dog over here
360:21 - and simply what we can do is since the
360:23 - dog class is inheriting the animal class
360:26 - we can use the eat method of the animal
360:29 - so we can simply use the dog one object
360:32 - followed by Dot and then we have the eat
360:34 - method being called followed by open and
360:36 - close parenthesis so guys over here
360:38 - simply if we save this file and try
360:40 - running this code now as you can see I
360:42 - can e is being displayed over here which
360:45 - is the print statement inside the E
360:47 - function of the animal class now guys
360:49 - let us say we have the same method that
360:51 - is eight with a different print function
360:53 - inside the dog class so I'll just remove
360:55 - this pass statement and also remove
360:58 - these commments over here so basically
361:00 - now what will happen whether the eat
361:02 - function of the animal class will be
361:03 - called or the eat function of the dog
361:06 - class will be called so let us check
361:07 - this so I'll just save this file now and
361:09 - try running this code once again as you
361:11 - can see I like to eat bones this
361:13 - particular statement is getting printed
361:15 - which is the statement from the eat
361:17 - function of the dog class so basically
361:19 - whenever we have the method with the
361:21 - same name inside the parent and the
361:23 - child class the method of the child
361:26 - class will be called over here and that
361:28 - is what we call it as method overriding
361:30 - now guys why method overriding is
361:32 - important so let's say you have the
361:34 - animal class over here this is a very
361:36 - generic statement that I can eat
361:38 - basically it doesn't specify what the
361:40 - animal can eat but let's say you want to
361:43 - have the child classes over here which
361:45 - inherits the parent class and you want
361:47 - to be more specific so what the dog
361:49 - likes to eat basically the dog likes to
361:52 - eat bones over here so you can have the
361:54 - same method name inside the child class
361:57 - and print a different message in this
361:59 - case and that is what we have done in
362:00 - this example so method overriding is
362:02 - very important as far as objectoriented
362:05 - programming in Python is concerned and
362:06 - you can use them in your own Project
362:08 - based on your requirements super method
362:11 - in Python inheritance so guys basically
362:13 - in Python inheritance we can use method
362:16 - overriding to call the method of a
362:18 - subass but if we need to access the
362:21 - super class method from the subass we
362:24 - can use the super method so this is what
362:26 - we are going to check with the help of
362:28 - examples now over here first of all we
362:30 - are going to check that how method
362:31 - overriding works and then we are going
362:33 - to see how we can use the super method
362:36 - in order to call the method of the super
362:39 - class so let us check this with the help
362:40 - of examples in the vs code so first of
362:42 - all we are going to have the parent
362:44 - class so let's say we have the animal
362:46 - class as the parent class and basically
362:48 - we are going to have one function inside
362:50 - this class that is e and this function
362:53 - is going to take one parameter by
362:55 - default which is the object and we are
362:57 - going to name it as self over here and
362:59 - simply we can print the statement that
363:01 - is I can eat so we have I can eat
363:06 - statement over here so basically
363:07 - whenever we are going to call this
363:09 - method of the animal class it is going
363:12 - to print I can eat guys before this we
363:14 - can also provide the prefix that is
363:16 - animal so that we can identify that this
363:18 - is the method from the animal class now
363:20 - guys let us say we have another class
363:22 - that is the dog class which inherits the
363:24 - attributes and the functions of this
363:26 - animal class which is the super class so
363:29 - we have the class dog over here and
363:31 - inside the parenthesis we have animal
363:33 - and this is how we achieve python
363:35 - inheritance by using the parent class
363:38 - inside the parenthesis while defining
363:40 - the child class over here followed by a
363:42 - colon and then what we will do is first
363:44 - of all we have the P statement so that
363:46 - we don't have any code inside this so
363:49 - what we are going to do is since we are
363:50 - inheriting the animal class inside the
363:53 - dog class so basically we have access to
363:55 - this function that is e over here so we
363:58 - are going to create the object of this
364:00 - dog class as dog one it is equal to dog
364:03 - over here and then open and close
364:05 - parenthesis and for this dog one
364:07 - followed by dot as you can see eat
364:10 - method is getting suggested by the VSS
364:12 - code so we can use this function in
364:14 - order to call it followed by open and
364:16 - close parenthesis so let me just save
364:18 - this file now and try running this code
364:20 - so as you can see animal I can eat so
364:22 - this statement is getting printed that's
364:24 - because we have provided the statement
364:26 - inside the eat function of the animal
364:28 - class but guys for this dog class this
364:31 - statement that is animal I can eat is
364:33 - not very specific let's say we want to
364:35 - be little bit specific over here and we
364:37 - want to say that the dog likes to eat
364:39 - bones over here so what we can do is
364:41 - simply we can have the same method name
364:44 - and we can change the print statement
364:47 - inside that method name inside the dog
364:49 - class so what I will do is I'll just
364:51 - copy these lines of code and instead of
364:53 - the P statement I'll provide certain
364:55 - code over here that is the copied code
364:58 - from the animal class so over here we
365:00 - have the same method with the same name
365:02 - but inside this what we will do is
365:04 - instead of animal over here we will
365:06 - provide dog and over here we will say I
365:09 - like to eat bones so guys basically this
365:14 - statement is little bit more specific it
365:16 - says that this is the dog and it likes
365:18 - to eat bones so we have provided the
365:20 - method with the same name similar to
365:22 - that of the method that is present
365:24 - inside the animal now guys we need not
365:26 - have to change anything over here this
365:28 - dog one object will call the eat
365:30 - function and due to Method overriding
365:33 - this function of the dog class will be
365:35 - called and not this particular statement
365:38 - will be called over here so let me just
365:39 - save this file now and try running this
365:41 - code so as you can see dog I like to eat
365:44 - bones so basically this print statement
365:46 - is getting executed which proves that
365:49 - this eat function is being called which
365:51 - belongs to the dog class and this is
365:53 - what we call it as a method overriding
365:55 - now guys there is a requirement where do
365:57 - we use the super method over here as we
365:59 - have seen the super method can be used
366:01 - in order to access the super class
366:03 - method so let's say before printing this
366:06 - statement that is dog like to eat bones
366:08 - over here what we want is we also want
366:11 - to print this statement that is animal I
366:13 - can eat so what we can do is while
366:16 - calling this eat method when the control
366:18 - flow goes over here we can go inside
366:20 - this function and we can use the super
366:23 - keyword so basically this is another
366:25 - method followed by open and close close
366:27 - parenthesis so internally what is
366:29 - happening over here is this super will
366:31 - refer to the parent class that is animal
366:33 - over here so what we can do is while
366:35 - referring to this animal class we can
366:37 - access this function that is eat
366:39 - function of the animal class so after
366:41 - the Super method we can provide dot
366:44 - followed by as you can see eat function
366:46 - is being suggested by the vs code over
366:49 - here so we can use this eat function
366:50 - followed by open and close parenthesis
366:53 - so basically this is the way in order to
366:55 - access the method of a super class from
366:57 - the subass over here by using the super
367:00 - method so guys whenever you're dealing
367:02 - with method overriding over here the
367:04 - method of the subass will be called by
367:06 - default and in case you want to also
367:09 - call the method of the super class you
367:11 - can use the super method followed by
367:13 - that method name in order to call the
367:15 - method of the super class so guys
367:17 - practice on your own so that on
367:19 - different inputs you get different
367:20 - outputs multiple inheritance in Python
367:23 - Programming so guys previously we have
367:25 - seen the single inheritance but in this
367:27 - video we are going to check the multiple
367:29 - inheritance in Python so a class can be
367:31 - derived from more than one super class
367:34 - in Python basically this is called
367:36 - multiple inheritance so basically the
367:38 - derived class will be having the
367:40 - multiple super classes in this case so
367:42 - for example a class bat is derived from
367:46 - Super classes that is mammal and a
367:48 - winged animal so basically this mammal
367:50 - and winged animal will be treated as the
367:52 - parent classes and this bad class will
367:55 - be the subass or the child class which
367:57 - can be derived from both of these super
367:59 - classes over here so it makes sense
368:01 - because B is a mamal as well as it is a
368:04 - winged animal so let us check this with
368:06 - the help of the example code now in the
368:08 - vs code so over here first of all we
368:10 - will create a class that is called as
368:12 - mamal over here and inside the mammal
368:14 - what we will do is we will Define the
368:16 - function and we will simply say mammal
368:19 - uncore info so this particular function
368:22 - it is going to take one parameter at
368:24 - itself which is the object itself and
368:26 - and basically we are going to Simply
368:28 - print the statement that we are inside
368:33 - mammal function so as you can see we are
368:36 - simply printing V are inside mamal
368:38 - function in order to identify that the
368:40 - control flow has come over here inside
368:42 - the mamal info function and then again
368:45 - we will have another parent class over
368:47 - here that is winged animal so we say
368:50 - winged animal over here and this time
368:53 - what we will do is again we will have
368:55 - the function but over here we will say
368:58 - winged uncore info so this particular
369:01 - method belongs to the winged animal over
369:03 - here and then again it is going to take
369:05 - the parameter as the cells and then
369:07 - again I'm simply going to copy this
369:09 - print statement over here and paste this
369:12 - inside the winged info and we will say
369:14 - we are inside winged animal function so
369:17 - we say we are inside winged animal
369:19 - function now guys we have created two
369:22 - classes over here which will be treated
369:23 - as the parent classes now we will be
369:25 - defining a third class that will be the
369:27 - child class of both these classes so
369:30 - basically we will have the class that is
369:32 - called as B over here and how do we
369:34 - mention the multiple super classes
369:36 - whenever we are defining the sub classes
369:38 - over here so basically inside the
369:40 - parenthesis we will have both these
369:42 - classes separated by a comma so first of
369:45 - all we will have the meml class over
369:46 - here followed by comma and then again we
369:49 - will have the winged animal class over
369:51 - here in the same way you can have any
369:53 - number of classes separated by commas
369:56 - over here in order to achieve multiple
369:57 - inheritance and then after this we will
370:00 - have the colon and then again we will
370:02 - have another method which will belong to
370:04 - this B Class over here so over here we
370:07 - will have the bore info method and then
370:10 - which will take the self as the
370:12 - parameter and then we have the colon
370:14 - over here again we will have the print
370:16 - statement we will say we are inside bad
370:19 - function so it says we are inside bad
370:21 - function now guys inside this bad class
370:23 - we have this bad info function and apart
370:26 - from from this we also have this mammal
370:28 - info and winged info functions since
370:30 - both these functions are derived from
370:32 - these classes that is mammal and winged
370:34 - animal over here so we can access all
370:37 - these functions from the object that we
370:38 - create for the bad class so let us come
370:41 - out of these classes and what we will do
370:43 - is let's say I provide the object that
370:45 - is B one it is equal to B over here so
370:49 - we have created the object of this bad
370:51 - class in this case and then when we
370:53 - provide the bad one object followed by
370:55 - dot as you can see we are getting all
370:57 - the three functions as the suggestions
370:59 - by the vs code over here that's because
371:02 - all the three functions are accessible
371:03 - by this bad one object over here so
371:06 - first of all we will say B info and Then
371:08 - followed by open and close parenthesis
371:10 - and then again we will say b 1 dot let's
371:13 - call mammal info in this case so we have
371:15 - mamal info as well as the third function
371:18 - that is BET one followed by Dot and then
371:21 - we have the winged info over here and
371:23 - then open and close parenthesis so all
371:25 - these three statements will be printed
371:27 - one at a time based on the functions
371:29 - that is being called by the control flow
371:31 - so let me just save this file now and
371:32 - try running this code in order to
371:34 - confirm the same so as you can see first
371:36 - of all we have called the bad info so we
371:38 - are inside bad function is being
371:40 - displayed and then again we are inside
371:42 - mamal function is being displayed that's
371:44 - because mammal info is being called the
371:46 - second time and third function is being
371:48 - called that is winged info and we are
371:50 - getting we are inside winged animal
371:52 - function so guys in this way we have
371:53 - also achieved multiple inheritance over
371:56 - here in case the functions that you want
371:58 - to use are present in the multiple
372:00 - classes as you can see over here you can
372:02 - have multiple classes being inherited by
372:05 - the derived class which we also call it
372:07 - as a subass over here and this paired
372:09 - class is acting as a subass and both
372:12 - these classes that are mammal and winged
372:14 - animal are acting as the parent classes
372:16 - now guys let us move to another task
372:18 - over here what do you mean by Method
372:20 - resolution order in Python that is mro
372:23 - so if two super classes have the same
372:25 - method name and the derived class calls
372:28 - that method then python uses the mro to
372:31 - search for the right method to call so
372:33 - guys over here we have seen how multiple
372:35 - inheritance can be achieved but what if
372:38 - the method names in both the super
372:41 - classes that is in the memal class and
372:42 - the winged animal class are same so what
372:45 - we will do is instead of this memal info
372:47 - we will keep it as display over here and
372:50 - instead of winged info again we will
372:52 - call it as display so basically this
372:54 - time what is happening over here is both
372:57 - these classes that is mammal class and
372:58 - winged animal classes are having the
373:01 - same method name that is display and
373:03 - what we are doing we are creating the
373:05 - subass that is bad and inheriting both
373:07 - these classes that is mammal and winged
373:09 - animal over here and this time both
373:12 - these display methods are getting
373:14 - inherited by this bad function now which
373:16 - method will be called when we use the
373:19 - object of this bad method let us check
373:21 - that so basically I'll have to remove
373:23 - these lines of code since these
373:24 - functions are no longer present but but
373:26 - instead of that what we will do is we
373:28 - will say B one followed by Dot and then
373:30 - we have another function that is display
373:32 - so we have only one function that's
373:34 - because the name of these functions are
373:36 - same in both the parent classes and Then
373:39 - followed by open and close parenthesis
373:41 - so guys over here inside the bad
373:43 - function we have the bad info which will
373:45 - be called by using the bad one object
373:48 - and then the next time what we are doing
373:49 - is we are using the B one object in
373:52 - order to call the display method now
373:54 - which display method will be executed of
373:56 - these two let us check that with the
373:58 - help of execution so I'll just save this
374:00 - file now and try running this code now
374:02 - so as you can see we are getting we are
374:05 - inside bad function which is this
374:07 - statement that is getting printed that
374:08 - is obvious that's because we have called
374:10 - the bad info function over here and next
374:13 - time when we call the display method it
374:15 - is saying we are inside maml function so
374:18 - guys basically this print statement was
374:20 - executed which proves that the display
374:22 - method of the maml class is being called
374:24 - over here why so that's because when we
374:26 - are creating the child class the first
374:29 - parent class is being given the highest
374:31 - priority over here so first the control
374:33 - flow will check whether this display
374:35 - method is it present in the first parent
374:37 - class if not then it will go to the
374:40 - second parent class over here inside the
374:42 - manual class it is finding that the
374:44 - display function is present and that is
374:46 - what is getting printed over here so it
374:48 - is the leftmost class that will be used
374:51 - in order to call the method which is
374:53 - present in multiple parent classes over
374:56 - here so what if we provide wind animal
374:58 - as the first class so what we will do is
375:00 - I'll just remove this mammal class from
375:02 - here on the left hand side we will
375:04 - provide winged animal and Then followed
375:06 - by comma and then on the right hand side
375:07 - we provide mamal so over here again we
375:10 - have just changed the order in which the
375:12 - inheritance is being done over here both
375:14 - these classes are still the parent
375:16 - classes of this child class that is bed
375:18 - class now let us check which statement
375:20 - will be printed when we call the display
375:22 - method over here so let me just save
375:24 - this file now and try running this code
375:26 - as you can see we are getting we are
375:28 - inside winged animal function so guys
375:30 - basically this winged animal function
375:33 - that is display function was called and
375:35 - we are getting this statement that is we
375:37 - are inside winged animal function that's
375:39 - because this time we have provided
375:41 - winged animal as the leftmost class and
375:44 - the control flow found this particular
375:46 - display method inside the winged animal
375:49 - class over here which is the parent
375:50 - class of the bed class so guys this is
375:52 - very important as far as method
375:54 - resolution order is concerned concerned
375:56 - the leftmost class is being given the
375:58 - highest priority as far as the same
376:00 - names of the methods are concerned so
376:03 - guys practice on your own so that on
376:04 - different inputs you get different
376:06 - outputs multi-level inheritance in
376:08 - Python Programming so guys in Python not
376:11 - only can we derive a class from the
376:13 - super class but you can also derive a
376:16 - class from the already derived class
376:18 - over here which means we can create a
376:20 - child class from the already existing
376:22 - another child class so this form of
376:24 - inheritance is known as is multi-level
376:26 - inheritance so as you can see in this
376:28 - syntax it will get more clear over here
376:31 - so first of all we have the class that
376:33 - is the super class and we have the super
376:35 - class methods and variables over here
376:37 - next what we have is class derived class
376:39 - one and this is deriving the super class
376:42 - which is the parent class over here it
376:44 - will have its own derived class one
376:47 - functions and variables now there is a
376:49 - third class called as derived Class 2
376:51 - which is deriving this child class that
376:54 - is derived class one over here and that
376:56 - is what we have mentioned over here
376:58 - inside the parenthesis and this is
377:00 - called as multi-level inheritance so let
377:03 - us check this with the help of examples
377:05 - now how we can Implement multi-level
377:07 - inheritance in Python so basically first
377:09 - of all we will have the class that is
377:11 - the super class over here so inside the
377:13 - super class what we will do is we will
377:15 - Define the method that is simply super
377:18 - class over here and then after this we
377:20 - have the parenthesis and we say self
377:23 - over here and we can simply provide a
377:25 - print statement and we can say we are
377:28 - inside super class so over here we are
377:31 - simply providing the statement that is
377:33 - we are inside the super class and then
377:35 - we will have another class which will be
377:37 - the child class of the super class so we
377:39 - will say derived one over here as the
377:42 - child class of which class it is of the
377:44 - super class so basically we have the
377:46 - super class inside this parenthesis
377:49 - which means we are inheriting all the
377:51 - properties of the super class into this
377:53 - derived one class and then again it is
377:56 - having its own function that is derived
377:58 - one over here so we say derived one it
378:00 - takes one parameter that is self which
378:02 - is the object itself and then we can
378:05 - simply provide this print statement I'll
378:07 - just copy this and paste this over here
378:09 - and change the content of the statement
378:11 - that is V are inside derived one class
378:15 - so we say derived one class and then
378:17 - guys similarly we have the derived two
378:19 - class as well so I'll just copy these
378:21 - lines of code and paste this over here
378:24 - this time the parent class will be the
378:27 - derived one class so over here we will
378:29 - say derived to one so basically this
378:32 - child class it is getting inherited in
378:34 - the derived two class over here so we
378:36 - have named it as derived two and the
378:39 - parent class is derived one over here
378:41 - and it is having its own method so we
378:43 - will say derived two in this case which
378:45 - is taking self as the parameter and then
378:47 - print we are inside derived two class
378:50 - right now so basically what is happening
378:52 - is inside the derived two class we will
378:54 - also have derived two function we will
378:57 - also have derived one function and we
378:59 - will also have the super class function
379:01 - which was inherited by the derived one
379:04 - class over here so we will have all the
379:06 - three functions in the derived to two
379:08 - class whereas in the derived to one
379:10 - class we will only have this derived to
379:13 - one function and the super class
379:14 - function over here so let us check the
379:16 - implementation of all these classes by
379:19 - using the objects so let us say we
379:21 - create the object that is D2 for the
379:23 - derived two class so over here we will
379:25 - provide the derived to class and then
379:28 - what we will do is simply we will call
379:30 - the functions by using the object name
379:32 - that is D2 followed by dot as you can
379:35 - see we are getting all these methods
379:36 - that is derived one derived two and the
379:38 - super class so first of all we will call
379:41 - the super class over here and then we
379:43 - have D2 followed by Dot and then we can
379:45 - call the derived one function over here
379:47 - followed by derived two function so D2
379:50 - followed by Dot and then we have the
379:52 - derived two function as well so
379:54 - basically all the three functions can be
379:56 - accessed by using the object of the
379:59 - derived 2 class because that is the
380:01 - child class of this derived one class
380:03 - which is again the child class of the
380:05 - super class over here so let us save
380:07 - this file now and try running this code
380:09 - so as you can see we are getting we are
380:11 - inside super class then we are inside a
380:13 - derived one class and we are inside
380:16 - derived two class so all the print
380:18 - statements are getting executed when the
380:20 - object is of the derived two class but
380:22 - guys what happens if we create the
380:24 - object of the derived one class and use
380:27 - all these functions so let us change
380:29 - this from derived 2 to derived one over
380:32 - here so as you can see we can access the
380:34 - super class function we can also access
380:36 - the derived one function but over here
380:39 - this derived two function is coming with
380:41 - a different color which means we cannot
380:43 - access it so let us check this once
380:45 - again so D2 followed by Dot and then we
380:48 - do not have the derived two function why
380:50 - so because we have created the object of
380:53 - the derived one class which will only
380:55 - have access to derived one that is its
380:57 - own function apart from that it will
380:59 - also have the access of the super class
381:01 - function since it was inherited from the
381:04 - super class so guys we cannot call the
381:06 - derived two function over here so what
381:08 - if we try to access the derived two
381:10 - function let us check that so I'll just
381:12 - save this file now and try running this
381:14 - code so as you can see the first two
381:16 - statements are getting printed that is
381:18 - we are inside super class and then we
381:20 - are inside derived one class but then
381:23 - next time the derived two class when the
381:25 - control control flow comes over here it
381:26 - is throwing the error that is derived
381:29 - one object has no attribute that is
381:31 - derived two so basically it is saying
381:33 - that inside this derived one class over
381:35 - here we do not have any function which
381:38 - matches with this derived two function
381:40 - over here that we are trying to call so
381:42 - guys you have to be very careful when
381:43 - you are implementing this multi-level
381:45 - inheritance only those functions will be
381:48 - accessible to those objects of the
381:50 - classes which are at the lowest level at
381:52 - the middle level some of the functions
381:54 - will not be accessible and if we create
381:56 - the object of the parent class then that
381:59 - object will not be able to access the
382:01 - functions of the child classes over here
382:03 - operator overloading in Python
382:05 - Programming so guys in Python we can
382:07 - change the way operators work for user
382:10 - defined types so for example the plus
382:13 - operator will perform arithmetic
382:15 - addition on two numbers in the same way
382:18 - it will merge the two list as well or
382:20 - else if we are dealing with the two
382:22 - strings then it can concatenate two
382:24 - strings so the same Plus operator can
382:26 - perform multiple operations depending on
382:29 - the operants whether they are numbers or
382:31 - whether they are strings or list so this
382:33 - feature in Python that allows the same
382:36 - operator to have different meaning
382:38 - according to the context is called
382:40 - operator overloading so this we are
382:43 - going to check with the help of examples
382:44 - as well apart from this there are
382:46 - certain special functions in Python so
382:48 - basically the class functions that begin
382:51 - with the double underscore are called
382:53 - special functions in Python they are
382:55 - called double underscore functions
382:57 - because they have a double underscore
382:59 - prefix and suffix such as as you can see
383:02 - this in it which can be treated as the
383:04 - Constructor of a class it is one
383:06 - function which starts and ends with the
383:08 - double underscore in the same way the
383:11 - plus operator can be overridden by using
383:13 - this double underscore followed by add
383:16 - and then double underscore again and
383:18 - then open and close parenthesis so guys
383:20 - let us check operator overloading
383:22 - implementation in action using the vs
383:24 - code over here so we'll see the very
383:26 - basic examples first of all so let's say
383:28 - we have num one it is equal to 10 and
383:31 - then number two that is num 2 it is
383:34 - equal to 20 so if we simply print num 1
383:38 - + num 2 over here so num 1 + num 2 so
383:42 - basically it is 10 + 20 which is 30 in
383:45 - this case so when we just save this file
383:47 - now and try running this code so as you
383:49 - can see we are getting the result as 30
383:51 - but what if these variables are strings
383:54 - so instead of numbers let's say okay if
383:55 - we enclose them within the double Cotes
383:58 - this means that we have a string over
384:00 - here that is 1 Z that is 10 and then
384:03 - over here as well we have another string
384:05 - that is 20 so when we do num 1 plus num
384:07 - 2 instead of 30 we will get the
384:10 - concatenation of this string which means
384:12 - 10 will be followed by 20 in this case
384:14 - when we try to print the statement so
384:16 - let me just save this file now and try
384:18 - running this code so as you can see we
384:19 - are getting 1020 so guys we have not
384:22 - changed anything over here the operator
384:24 - is same and and the operants are also
384:26 - same the only thing is we have changed
384:28 - the values to the string and that is
384:30 - what operator overloading means that is
384:32 - by using the same operator we can have
384:35 - the different results based on the
384:37 - operant values now guys let us check how
384:39 - operator overloading can be implemented
384:41 - when we are dealing with classes over
384:43 - here so let's say we have a class that
384:45 - is named as point over here and this
384:47 - class let's say we have a Constructor
384:49 - inside it so we have init method inside
384:53 - this so init method it will take one
384:55 - parameter that is self and what we will
384:57 - do is let's say it has two attributes
384:59 - over here so self dox so the point class
385:03 - it will have two attributes that is X
385:05 - and Y coordinates so over here let's say
385:08 - we provide the x value by using the
385:10 - parameter that we are getting so let's
385:12 - say we have X1 over here and let's say
385:14 - we have y1 over here so self.x it will
385:17 - be equal to X1 and then again we will
385:20 - have self do y it is equal to y1 in this
385:23 - case so whenever we are creating the
385:25 - object by using the point class over
385:27 - here the Constructor that is in it
385:29 - method will be called along with the two
385:31 - points that we will be passing and those
385:33 - two points will be assigned the values
385:35 - to these variables that is X and Y over
385:37 - here now guys in order to override the
385:40 - two string method we also have another
385:42 - method that is double underscore and
385:44 - then Str Str so as you can see apart
385:46 - from this we have many other functions
385:48 - that can be used when we provide the
385:50 - double underscore so vs code is
385:52 - suggesting us the entire list of
385:54 - functions which we can use in our python
385:56 - code so over here we are going to use
385:58 - this St Str and then we are going to
386:00 - have our custom code inside this s Str
386:03 - so what we are going to do is we are
386:04 - simply going to print the values of this
386:07 - X and Y so how do we do that we are
386:09 - going to use the formatting part and
386:11 - then inside this we are going to call
386:13 - the self followed by Dot and then we
386:15 - have X and then again we have comma over
386:18 - here and then again we call the self.y
386:22 - so over here we are simply printing the
386:23 - X and Y values which are separated by
386:25 - the comma over here and then guys let's
386:27 - say we want to override the plus
386:29 - operator over here so before having the
386:32 - function inside the class what I will do
386:34 - is first of all we will create the
386:35 - object so let's say P1 is the object
386:38 - name it is equal to point which is the
386:41 - class over here and what we do is we do
386:43 - 1A 2 that is X and Y values over here
386:47 - and then let's say we have another point
386:48 - that is P2 it is equal to point and then
386:52 - this time we are going to provide the X
386:53 - and Y coordinates as 2 and three over
386:56 - here and what we want to do is we want
386:58 - to print the sum of both these points
387:00 - that is P1 plus P2 so guys in this case
387:04 - we are using this plus operator and then
387:06 - these are the operators that is P1 and
387:08 - P2 so how do we have the custom
387:10 - implementation of this plus operator
387:12 - over here which we will call it as the
387:14 - operator overloading as well so as we
387:16 - have seen over here we have something
387:18 - called as double underscore and then add
387:20 - and then double underscore so this
387:22 - represents the plus operator as well so
387:25 - we can use this method inside the class
387:27 - in order to have our custom
387:29 - implementation of addition of both these
387:32 - points so over here we have DF followed
387:34 - by double underscore and then we have
387:37 - the add method over here followed by
387:38 - double underscore and then we have the
387:41 - open and close parenthesis and then
387:43 - inside the parenthesis we will provide
387:44 - the self as the parameter now guys apart
387:47 - from the self parameter basically when
387:48 - we do P1 + P2 it is simply P1 dot this
387:53 - particular function that is we are going
387:55 - to Define followed by this P2 which will
387:58 - be a parameter so we need to catch this
388:00 - as the second parameter over here so
388:02 - what we will do is after the self we
388:04 - will have another parameter and we will
388:06 - name it as other over here so what we
388:07 - can do is over here we can create
388:09 - another variable that is X it is equal
388:12 - to self do X over here plus we need to
388:15 - use another parameter that is other
388:17 - which represents the other point that is
388:20 - P2 in this case so over here we will say
388:22 - other do X in this case and then the
388:25 - same way we are going to have another
388:27 - variable that is y it is equal to self
388:30 - doy plus other do y in this case and
388:34 - then guys what we have to do is simply
388:36 - we need to return the point of both
388:38 - these values that we have found that is
388:40 - X and Y so basically return point of X
388:44 - comma Y in this case so we have X comma
388:47 - y so guys this is the implementation of
388:49 - our addition operator we are doing the
388:51 - operator overloading in this case so
388:53 - basically p1+ P2 it is same as P1
388:57 - followed by Dot and then the add
388:59 - function being called along with the
389:01 - parameter that is P2 so in this case
389:03 - this function will be called and it will
389:05 - return point of X comma Y and basically
389:08 - while returning this we are providing
389:10 - the print statement so behind the scenes
389:12 - this function will be called in order to
389:14 - print the statement so guys basically
389:16 - over here inside of the print statement
389:18 - we need to have the return statement
389:20 - over here so I'll just remove this part
389:22 - over here and we will say return
389:24 - followed by double codes and then inside
389:27 - this double Cotes we will be using the
389:28 - formatting so let's say we have zero and
389:31 - then comma and then let's say we have
389:32 - one followed by Dot and then we have
389:35 - format over here and inside this format
389:37 - we need to provide the x and y values so
389:39 - self. X and then comma and then we have
389:42 - self.y in this case so basically this is
389:45 - the way in which we are going to print
389:47 - the values that is of X and Y so guys
389:50 - let me just save this file now and try
389:52 - running this code so as you can see we
389:54 - are getting the coordinates as 3 and 5
389:57 - this x and x values are getting added so
389:59 - 1 + 2 it is equal to 3 and then 2 + 3 it
390:03 - is equal to five so we are getting five
390:05 - over here so guys basically what we have
390:07 - done is if you see the main code over
390:09 - here we have just defined P1 and P2
390:12 - which are simply the points and if we
390:14 - were not having this implementation
390:16 - inside the class that is the string and
390:18 - the addition part then we won't be able
390:20 - to add both these points directly
390:23 - because by default this plus operator
390:25 - can only handle numbers or strings Or
390:27 - List over here but in order to handle
390:29 - the custom classes we need to define the
390:32 - custom functions as well inside those
390:34 - classes and according to our requirement
390:36 - we can have the code inside those custom
390:38 - functions guys we can also change the
390:40 - formatting over here in order to change
390:42 - the formatting we can say that X it is
390:44 - equal to this particular thing and then
390:47 - after comma we can have y it is equal to
390:50 - self.y part over here so let me just
390:52 - save this file now and try running this
390:54 - code so as you can see we have changed
390:55 - the formatting xit is equal to 3 and Y
390:58 - is equal to 5 so whatever format that
391:00 - you want to print in or whatever code
391:02 - you want to have inside this Str Str
391:04 - method you can have it accordingly based
391:06 - on your requirements so guys this is
391:08 - operator overloading for you with the
391:10 - same operator you can have multiple
391:13 - implementations and it can have
391:14 - different meanings as far as operant are
391:17 - concerned similarly we have other
391:18 - special functions and the other operator
391:21 - overloading functions as well as you can
391:23 - see we have this in it which initializes
391:25 - the attributes of the object which we
391:27 - have already seen as far as class
391:29 - Constructors are concerned then we have
391:31 - Str Str which returns a string
391:32 - representation of the object that is
391:34 - what we have implemented over here it
391:37 - returns a string implementation of the
391:39 - object that is point x comma Y and then
391:41 - we also have Len which Returns the
391:43 - length of the object then add which adds
391:46 - the two objects so over here we have
391:48 - implemented the add method which adds
391:51 - two objects over here which is P1 and P2
391:53 - that is what we have achieved in this
391:55 - particular program apart from that we
391:57 - also have this call function which calls
391:59 - the objects of the class like a normal
392:02 - function guys apart from this we can
392:03 - also have other operator overloading
392:06 - functions as well for addition we have
392:08 - seen P1 + P2 which means P1 Dot and then
392:12 - underscore uncore add will be called in
392:14 - which case the parameter will be P2
392:16 - similarly we can have the subtraction
392:19 - multiplication the power of two objects
392:21 - and then we can have division as well
392:23 - and then we can have flow divion and
392:25 - many other mathematical operations can
392:28 - be achieved by using the operator
392:30 - overloading just how we have done in
392:32 - this program overloading comparison
392:34 - operators in Python Programming so guys
392:36 - previously we have seen how we can
392:38 - overload the plus operator in the python
392:41 - so python also allows us to overload
392:44 - comparison operators as well such as
392:46 - less than or greater than or less than
392:48 - or equal to or else greater than or
392:50 - equal to and so on many other comparison
392:53 - operators are present in Python
392:55 - Programming which can be overloaded so
392:57 - for example as you can see we have the
392:59 - class that is person and then we have
393:01 - the Constructor which takes the
393:02 - parameter is the self and then name and
393:05 - age is taken so basically this name and
393:07 - age are being assigned to the name and
393:10 - age attributes of the class and then we
393:12 - have the overloading of the less than
393:14 - operator over here in this case so as
393:16 - you can see we have the function DF and
393:19 - Then followed by underscore uncore LT
393:22 - which refers to the less than sign over
393:24 - over here and then double underscore
393:26 - once again and then it takes one object
393:28 - that is the self object over here it
393:30 - takes the other object that is the
393:32 - second object so what we can do is we
393:34 - can create the two objects over here
393:36 - that is P1 it is equal to person the
393:39 - name is allies and the age is 20 years
393:41 - old and then we have P2 that is another
393:44 - person the name is Bob and the person is
393:46 - 30 years old so guys basically what we
393:48 - are doing is we are printing over here
393:50 - P1 less than P2 so we are checking
393:53 - whether P1 is less than P2 or not so
393:55 - what exactly will happen is instead of
393:57 - this less than the control flow will go
394:00 - over here to this particular function
394:02 - because we have provided the comparison
394:04 - operator overloading over here so the
394:07 - first object will be P1 in this case
394:09 - which will be assigned to self and the
394:11 - second object will be P2 over here which
394:13 - will be assigned to the other and self.
394:16 - age will be compared whether it is less
394:18 - than the other dot age over here if it
394:20 - is yes then it will return true or else
394:23 - it will return false false so guys let
394:25 - us implement this in our vs code over
394:27 - here so let's say we have the class
394:29 - person in this case and then what do we
394:32 - do is we Define The Constructor over
394:34 - here so DF keyword followed by the init
394:37 - function in this case so I'm going to
394:39 - implement the Constructor over here so
394:41 - what we will do is let's say we have
394:43 - self do name it is equal to the name
394:46 - will be taken as the parameter over here
394:48 - so let's say I provide name one and then
394:50 - age one over here so that we can
394:52 - identify them so name it is equal to
394:55 - name 1 and then we have self. AG it is
394:58 - equal to AG 1 so the name and age will
395:01 - be coming as the parameters when we are
395:03 - going to initialize the object when we
395:05 - are creating the object of the person
395:07 - class and those name and age will be
395:10 - assigned to these variable names that is
395:12 - name and age and then guys what we will
395:14 - do is we will be doing the comparison
395:16 - operator overloading so over here we are
395:18 - going to Define double underscore and
395:21 - then LT over here so which refers to the
395:24 - less than operator in this case and it
395:26 - is going to take two parameters one is
395:28 - the self parameter and then the other
395:31 - object so here the second parameter is
395:33 - the other object and this thing is
395:35 - simply going to return the comparison of
395:37 - the two ages over here so this will be
395:40 - return self. AG is it less than the
395:44 - other do age so over here we are simply
395:46 - going to compare whether self. AG is
395:49 - less than other do age or not if yes
395:51 - then return true or else return false so
395:54 - guys what we will do is we will create
395:56 - two person objects over here so let's
395:58 - say P1 it is equal to the person and
396:01 - let's say the first person name is Tom
396:04 - and Tom is 10 years old in this case and
396:07 - then let's say we have P2 it is equal to
396:10 - person and let's say the name of this
396:12 - person is Harry and Harry is 20 years
396:15 - old so guys what we will do is simply we
396:17 - need to print two statements comparing
396:19 - the ages of both the person so we will
396:22 - say P1 is it less than P2 then it will
396:25 - return true or false so is P1 less than
396:27 - P2 yes in this case because p1's age is
396:30 - 10 and p2's age is 20 and that is what
396:33 - this particular function will be
396:35 - implementing and returning the result
396:37 - and over here again we will say print P2
396:40 - is less than P1 this time so P2 less
396:43 - than P1 this time so is P2 less than P1
396:46 - so what will happen is is 20 less than
396:49 - 10 no in this case so this should return
396:51 - false so let me just save this file now
396:53 - and iy running this code
396:54 - so as you can see for first statement we
396:56 - are getting it as true and for second
396:58 - statement we are getting the result as
396:59 - false to make it more understandable
397:02 - what we can do is we can provide the
397:03 - statements over here is Tom
397:07 - younger than Harry question mark and
397:12 - then we can have a comma over here and
397:15 - similarly we can have such statement in
397:17 - the second print statement as well so
397:19 - over here we will say is Harry younger
397:23 - than Tom in this case so we have is
397:26 - Harry younger than Tom so let me just
397:28 - save this file now and I running this
397:29 - code so as you can see is Tom younger
397:32 - than Harry so Tom age is 10 and Harry's
397:35 - age is 20 right now so it is returning
397:37 - true that Tom is younger than Harry and
397:40 - second time is Harry younger than Tom
397:42 - Harry is 20 years old Tom is 10 years
397:45 - old so it is saying is Harry younger
397:47 - than Tom no in this case so that is why
397:48 - we are getting the result as false what
397:50 - if we have another person with the same
397:52 - name that is Tom who is 30 years old so
397:55 - over here we will update the age of Tom
397:57 - that is another person who is 30 years
398:00 - old and we are comparing it with the
398:01 - same person that is Harry which is 20
398:04 - years old so let me just save this file
398:06 - now and try running this code this time
398:08 - is Tom younger than Harry no in this
398:10 - case because Tom is Elder than Harry
398:12 - right now so we are getting false and in
398:14 - the second statement is Harry younger
398:16 - than Tom yes because 20 is less than 30
398:18 - this time so we are getting true in this
398:20 - case so guys this is the way that we can
398:22 - implement the comparison an operator
398:24 - overloading as far as Python Programming
398:27 - is concerned iterator in Python
398:29 - Programming so guys iterators are
398:31 - methods that iterate collections like
398:33 - list tles Etc using an iterator method
398:37 - we can Loop through an object and return
398:40 - its elements so we have already seen how
398:42 - we can iterate through the list and tles
398:44 - as well using the fall Loop but we can
398:46 - also have our custom iterators in order
398:49 - to iterate through the different
398:51 - elements inside the list so that we are
398:53 - going to check with the help of examples
398:55 - as well now we can use the iter method
398:58 - which represents the iterator to
399:00 - initialize the iterator and the next
399:02 - method to go through the iterator so
399:05 - guys let us check this with the help of
399:06 - example now over here in the vs code so
399:09 - what we will do is let's say we have the
399:11 - list that is named as list one and then
399:13 - let's say we have the list of numbers in
399:15 - this case so we have 1 2 3 4 and then
399:18 - five so guys how do we get the iterator
399:21 - to this particular list over here so
399:23 - what we can do is simply we can have the
399:25 - name of the variable that is iterator it
399:28 - is equal to and then we can use the
399:30 - function name that is iter this is one
399:33 - of the functions that will return us the
399:35 - iterator over here and inside this
399:37 - function it will take one parameter
399:39 - which will be the list one in this case
399:41 - so basically the list or tle it goes as
399:44 - the parameter to this function that is
399:46 - it and it Returns the iterator over here
399:49 - and then we can use this iterator in
399:52 - order to get the elements of this list
399:54 - so what we will do is let's say we have
399:56 - the print function and then we can use
399:59 - the next function in this case inside
400:01 - the print so as you can see vs code is
400:03 - suggesting us this next function over
400:05 - here which will take the iterator as the
400:08 - parameter so we provide the iterator as
400:10 - the parameter so what will happen is
400:13 - this thing will point to the first
400:14 - element to the list over here so let me
400:17 - just save this file now and try running
400:18 - this code so as you can see we are
400:20 - getting one in this case now what we can
400:22 - do is again we can can have another
400:24 - print statement in order to print the
400:27 - second element so over here I have just
400:29 - copied and pasted this line of code and
400:31 - then let me just save this file now on
400:33 - the next line we should get the second
400:35 - element that is two so as you can see we
400:37 - are getting one and then we are also
400:39 - getting two over here so similarly we
400:41 - can get all the elements in this case by
400:43 - using the it method we have C the
400:46 - iterator over here and by using this
400:48 - iterator as the parameter to the next
400:51 - function we have got the element itself
400:53 - so guys this is the very basic way in
400:55 - which we can use the iterator along with
400:57 - the next function now guys let us check
400:59 - this with the help of the Fall Loop
401:01 - working of fall loop with the iterators
401:03 - so what we can do is instead of printing
401:05 - these statements multiple times we can
401:07 - simply use this iterator inside the fall
401:10 - Loop so over here we can have for and
401:12 - then element in and then we can provide
401:15 - this iterator so this iterator is having
401:18 - all the elements right now and we are
401:20 - going to iterate through this iterator
401:22 - and one at a time time all the elements
401:24 - will be assigned to this element
401:26 - variable and inside this fall Loop we
401:29 - can simply provide the element over here
401:31 - so we can provide element and in order
401:34 - to have all the elements on the same
401:36 - line when we are providing the print
401:38 - statement we can have the end parameter
401:40 - over here which is Slash and by default
401:42 - which means a control flow goes to the
401:44 - new line so in this case we want it to
401:46 - be on the same line so we will separate
401:48 - all the elements by using one space
401:50 - character over here so let me just save
401:52 - this file now inter running this code so
401:55 - as you can see we are getting 1 2 3 4 5
401:57 - on the same line we can also separate
401:59 - them by using a comma and a space
402:01 - character so I've just provided comma in
402:03 - the end parameter I'll just save this
402:05 - file now and try running this code so as
402:07 - you can see we are getting 1 2 3 4 five
402:10 - separated by commas so guys this is the
402:12 - way that we can use the fall Loop along
402:14 - with the iterator in order to go through
402:17 - all the elements inside the list we can
402:19 - also do this directly by using the list
402:21 - one as well so when we provide list one
402:24 - which is containing all the elements
402:25 - over here so instead of having the
402:27 - iterator as well we can use the list one
402:29 - so let me just save this file now and
402:31 - try running this code so the same output
402:33 - will be displayed that is all the
402:35 - elements of the list now guys where this
402:37 - iterator becomes important is whenever
402:39 - we are creating the custom classes and
402:41 - we want to iterate through the custom
402:43 - iterator that we want to create so guys
402:45 - let us check it with the help of example
402:47 - now so guys what are the important
402:49 - points while building the custom
402:50 - iterators so building an iterator from
402:53 - scrip is easy in Python we just have to
402:56 - implement the double uncore iter
402:59 - followed by double uncore method so this
403:02 - is one of the custom methods that we
403:03 - have to implement inside the class along
403:06 - with this we also have to implement the
403:08 - double underscore next Double underscore
403:11 - method over here inside the same class
403:14 - so these are the two methods that are
403:15 - important which needs to be implemented
403:17 - inside the class while building the
403:19 - custom iterators so this iter method it
403:23 - returns the iterator object itself if
403:26 - required some initialization can be
403:28 - performed in this method and the second
403:30 - method that is the next method over here
403:33 - it must return the next item in the
403:35 - sequence on reaching the end and in
403:38 - subsequent calls it must raise stop
403:40 - iteration so guys let us check this with
403:42 - the help of examples as well so over
403:45 - here what we will do is we will
403:46 - implement the power of two class over
403:48 - here which means we are going to find
403:50 - the results of the power of the number
403:52 - that is two so we are going to have the
403:54 - class which is going to be named as
403:56 - power two in this case and what we will
403:59 - do is we will have the Constructor over
404:01 - here so we have the init method in this
404:04 - case and init method it will take the
404:06 - maximum number up to which we need to
404:08 - find the Power of Two over here so
404:10 - basically apart from self we will have
404:13 - the max value as well so over here we
404:15 - will say self. Max it is equal to Max so
404:18 - while creating the object of this class
404:21 - we will be providing the max number up
404:23 - to to which we need to find the Power of
404:25 - Two And then guys as we have seen in
404:27 - order to build the custom iterator we
404:29 - need to have the two functions so first
404:31 - of all we will have the iter function
404:34 - over here so we have iter function and
404:37 - Then followed by open and close
404:39 - parentheses this will again take the
404:41 - parameter as self and what we will do is
404:43 - the initial value that is self do n so
404:46 - we have the variable that is n which is
404:48 - equal to Zer right now so we will find
404:51 - the powers of two starting from 0 up to
404:54 - the number that is Max that we have
404:55 - provided while creating the object of
404:58 - the power two class over here so what we
405:00 - are going to do is self do n it is equal
405:03 - to zero and this thing is going to
405:05 - return a iterator which is going to be
405:07 - the self itself so over here we are
405:09 - returning the iterator that is the self
405:12 - itself and then guys we are going to
405:13 - also Define the next method over here so
405:16 - we have DF followed by double underscore
405:19 - and then we have the next method
405:21 - followed by double underscore and then
405:23 - then again we are going to have the self
405:25 - as the parameter so over here what we
405:28 - will do is first of all we need to check
405:30 - whether the value of n is it less than
405:32 - or equal to the value of Max that we
405:34 - have provided so over here we will
405:36 - provide the if condition and inside the
405:38 - parenthesis we will say whether self do
405:41 - n is this less than or equal to Max that
405:45 - is self do Max in this case so we have
405:48 - self. Max and if yes then we are going
405:50 - to have the result what is the result it
405:53 - is equal to 2 ra to the power of n so it
405:56 - will be 2 * by * by double times and
406:00 - then self do n in this case so over here
406:02 - we are getting the current value of n we
406:04 - are checking whether it is less than or
406:06 - equal to Max and if yes then we are
406:08 - finding 2 ra to that number that is n
406:11 - over here and the result will be stored
406:13 - in this result variable next what we are
406:15 - going to do is we are going to increment
406:17 - the value of n by 1 so it is going to be
406:20 - self do n + = to 1 so we are
406:24 - incrementing the value of n by 1 so that
406:27 - the next time the control flow comes
406:28 - over here it will find that the value of
406:30 - n is incremented by one and then after
406:33 - this we simply have to return result in
406:36 - this case for which we have already
406:37 - found the result over here so guys this
406:40 - is the case when n is less than or equal
406:42 - to Max but what if the N is incremented
406:44 - in such a way that it becomes greater
406:46 - than the maximum number which we have
406:48 - already provided for which we don't want
406:50 - to find the Power of Two so over here
406:53 - inside the lse part what we will do is
406:55 - we will raise the stop iteration so over
406:57 - here we can simply provide raise stop
407:00 - iteration so we have this exception that
407:03 - is raise stop iteration over here which
407:04 - is one of the built-in exceptions now
407:07 - guys what we can do is simply we can
407:08 - create the object of this power two
407:10 - class over here that we have created so
407:13 - what we can do is let's say we provide
407:15 - the object name that is I it is equal to
407:18 - power two over here and the maximum
407:20 - number for which we want to find the
407:22 - power of 2 is three right now so what
407:25 - this will do is when we create this
407:26 - object I the control flow it sees that
407:28 - for this particular power two class we
407:31 - have a Constructor that is in it and it
407:33 - will take the number that is Max so over
407:35 - here we have provided the max as three
407:38 - so self. max that is this particular
407:40 - variable will have the value S three
407:42 - over here and then guys in order to find
407:45 - the iterator we will name it as the
407:46 - iterator variable it is equal to it R
407:50 - this method and then inside this method
407:52 - we need to pass this object that is I so
407:55 - what exactly will happen is the control
407:57 - flow will see that for this particular
407:59 - class we have the user defined iter
408:02 - method so it will come over here and
408:04 - initially the value of n will be set as
408:07 - zero in this case so we have zero to
408:09 - start with and at the end we have Max
408:11 - that is the value of three and then guys
408:14 - what we have to do is we have to iterate
408:15 - through this iterator over here so we
408:18 - already have the iterator next time when
408:20 - we call this next method the control
408:22 - flow comes with over here it will see
408:24 - that the value of n it is zero right now
408:26 - and it is less than or equal to Max so 2
408:29 - to 0 the first result it will be equal
408:31 - to 1 and that same result will be passed
408:34 - over here as the return statement and
408:36 - before that n will be incremented and
408:38 - the updated value of n will be one in
408:40 - this case so over here we can simply
408:42 - provide the print statement and we can
408:44 - say next over here and inside the
408:46 - parenthesis we will have the iterator as
408:48 - the parameter so guys let me just save
408:50 - this file now and try running this code
408:52 - so as you can see we getting the result
408:53 - as one and next time what we will do is
408:56 - again we will copy paste these lines of
408:58 - code three times over here so let me
409:00 - just save this file now and try running
409:01 - this code as you can see we are getting
409:03 - 1 2 4 and 8 which is equal to 2 to 0 is
409:07 - 1 2 to 1 is 2 2 2 is 4 2 to 3 is 8 and
409:12 - next time when we print the value once
409:14 - again over here so what will happen is 2
409:16 - to 4 will be found and in this case
409:19 - since n value is not less than or equal
409:21 - to Max so raise stop iteration will be
409:24 - called over here and we will get some
409:26 - other statement being printed on the
409:28 - terminal so let me just save this file
409:30 - now and try running this code so as you
409:32 - can see we have got 1 2 4 and 8 and
409:34 - after this as you can see Ray stop
409:37 - iteration was called while calling the
409:39 - next function over here so guys this is
409:41 - the way that we can build our custom
409:43 - iterators whenever we are dealing with
409:45 - our custom classes we just need to
409:47 - Define two methods over here that is
409:49 - iter which stands for iterator which
409:52 - will return an it data over here and
409:54 - then we also have to define the next
409:56 - method which will return us the next
409:58 - element to be used as far as our
410:01 - requirements are concerned in the Python
410:02 - program so guys you can have any logic
410:04 - over here this is just an example that
410:06 - we have taken that is in order to find
410:08 - the Power of Two you can have any logic
410:11 - based on your requirements and raise the
410:13 - exception in any manner that you want
410:15 - based on your requirements generators in
410:17 - Python Programming so guys in Python a
410:20 - generator is a function that returns an
410:22 - iterate
410:23 - that produces a sequence of values when
410:26 - iterated over so basically a generator
410:28 - is nothing but it is a function that
410:30 - will help us in order to generate the
410:32 - sequence of values and we can iterate
410:34 - through those values now generators are
410:37 - very useful when we want to produce a
410:39 - large sequence of values but we don't
410:41 - want to store all of them in memory at
410:43 - once so guys we are going to check this
410:45 - with the help of examples as well how
410:47 - generators are very memory efficient as
410:49 - far as Python Programming is concerned
410:52 - now similar to defining a normal
410:54 - function we can define a generator
410:56 - function using the DF keyword but
410:59 - instead of the return statement we use
411:01 - the yield statement so as you can see
411:03 - this is the syntax of the generator
411:05 - function we have the DF keyword followed
411:07 - by the name of the function it can take
411:10 - any argument over here and as you can
411:11 - see one of the statements must be
411:13 - including the yield keyword over here so
411:16 - this statement will yield something
411:17 - instead of returning the value so
411:19 - basically the yield keyword is used to
411:22 - produce a a value from the generator and
411:24 - pause the generator functions execution
411:27 - until the next value is requested so
411:29 - guys let us check this with the help of
411:31 - example code now we are going to check
411:33 - how the python generators work with the
411:35 - help of the debugging so guys let's say
411:37 - we Define the function over here using
411:38 - the DF keyword and Then followed by the
411:41 - name of the function that is the num
411:43 - generator so we are going to generate
411:45 - some numbers over here so we have this
411:47 - numb generator function and then it is
411:49 - going to take the argument as the
411:51 - maximum value up to which we want to
411:53 - generate the numbers and then after this
411:55 - colon what we will do is we will
411:57 - initialize the value of n it is equal to
412:00 - Z and then what we will do is we will
412:02 - have the while loop and it is going to
412:04 - check whether this n is it less than or
412:07 - equal to Max so over here we are going
412:09 - to give the condition that this n value
412:12 - must be less than or equal to this max
412:14 - value over here so the number it starts
412:16 - from zero and then it will go up to the
412:18 - number that is Max which will be given
412:20 - as the parameter while calling this
412:22 - gener Ator so guys what we have to do is
412:24 - we have to use the yield keyword so over
412:26 - here what we will be doing is whatever
412:28 - the N value is we will be providing that
412:31 - value so we will be returning that value
412:33 - so we provide this statement that is
412:35 - yield n and then after this what we will
412:37 - do is we will increment the value of n
412:39 - so n plus it is equal to 1 so we will
412:42 - increment the value of n by 1 over here
412:45 - so guys this is the way we have created
412:47 - the generator function now how do we
412:49 - call it so guys outside this function we
412:51 - will be having the for Loop and then we
412:53 - will get all the values that is being
412:55 - generated by this num generator over
412:57 - here in the item so we have item and
412:59 - then in and then followed by the
413:02 - function name that is the generator name
413:04 - over here so guys we're calling this
413:05 - generator it is expecting one argument
413:07 - so we are going to give this number as
413:10 - five over here so the numbers will be
413:12 - from 0er up to five in this case and
413:14 - then we will provide colon and simply we
413:17 - are going to print the item in this case
413:19 - so we have item and then let's say in
413:21 - order to get all all the numbers on the
413:23 - same line we will have the end parameter
413:26 - and we will separate all the numbers
413:27 - using the space character inside this
413:29 - end parameter over here so guys let me
413:32 - just save this file now and try running
413:33 - this code so as you can see it is
413:35 - generating all the numbers that is 0 1 2
413:38 - 3 4 5 so guys this is the way that the
413:40 - generator works now guys you will ask me
413:43 - like what is the difference like we can
413:45 - also have the range over here in order
413:47 - to get all the numbers from 0 to 5 so
413:49 - what is the importance of writing this
413:51 - generator as a function over here so
413:53 - guys the important advantage of using
413:55 - this generator is it is very memory
413:58 - efficient so when we are saying that
413:59 - yield n that means only one number at a
414:02 - time is getting generated over here zero
414:05 - is getting generated only once and then
414:07 - we have one over here then we have two
414:09 - over here so all these numbers are not
414:11 - being stored in the memory but during
414:13 - the run time individual numbers are
414:16 - getting generated one at a time by using
414:18 - this num generator so guys let us check
414:21 - this how it works using the debugging so
414:23 - what I will do is I'll provide a break
414:25 - point over here on the fall Loop and
414:27 - then we will say run and then we will
414:29 - say start debugging over here so one at
414:31 - a time we will come to know what are the
414:33 - different steps that the control flow is
414:35 - going through so over here as you can
414:37 - see the control flow has stopped over
414:39 - here now let us go inside this so I'll
414:41 - click on this step into action over here
414:44 - so when we click on this as you can see
414:45 - the control flow has come over here
414:47 - that's because the num generator with
414:49 - five has been called right now and then
414:52 - again we will click on this to go to the
414:54 - next step so we are on the Y Loop now
414:56 - and then what it is doing is it is
414:58 - yielding this value that is n so when we
415:01 - press once again so as you can see it
415:03 - has come back over here print the item
415:06 - so basically what has happened is it has
415:08 - returned the value of n that is zero and
415:10 - it is assigned to this variable that is
415:13 - item so again when we press on this step
415:15 - into as you can see the zero is getting
415:18 - printed now so basically the item got
415:20 - printed after the statement that is
415:22 - sealed and was executed and then next
415:25 - time once again the control flow has
415:27 - gone to the fall loop again it says that
415:30 - num generator we need to call so the
415:32 - control flow will see that the previous
415:34 - time it was returned from here so the
415:36 - control flow will go to the next line
415:38 - that is n is equal to n + 1 so the value
415:41 - of n will be incremented now and then
415:43 - again we go to step into two we go to
415:45 - the while loop once again and then again
415:48 - yield n this time the value of n will be
415:50 - one so n is being returned and is
415:52 - assigned to this item and then again we
415:54 - will print the value of item so as you
415:56 - can see one is getting printed once
415:58 - again and then when we press the step
416:00 - into actions once again as you can see
416:03 - two is getting printed now and then
416:05 - again the next time three should get
416:07 - printed as you can see three is getting
416:08 - printed so guys basically the main
416:10 - advantage of this generator function is
416:13 - to generate one number at a time and not
416:16 - store all the numbers in the memory so
416:19 - this is the memory efficient operation
416:21 - that is being carried out by this
416:23 - generator in the Python Programming so
416:25 - guys when we press on this continue then
416:27 - the other number should get printed over
416:28 - here now guys let us move to another
416:30 - task we have something called as python
416:32 - generator expression so basically in
416:35 - Python a generator expression is a
416:37 - concise way to create a generator object
416:40 - so basically this is the syntax that is
416:42 - expression followed by for and then we
416:45 - have item in iterable so guys let us
416:47 - check this as well with the help of
416:48 - example now what we will do is we will
416:50 - have the square generator so basically
416:52 - this generator will be used in order to
416:55 - get the square of the numbers it is
416:58 - equal to what we will do is as we have
417:00 - seen over here this is the syntax first
417:02 - of all we are going to have the
417:03 - expression inside the parenthesis and
417:05 - then we are going to have the for
417:07 - keyword followed by item and then in the
417:09 - iterable so we can simply find the
417:11 - square of the number by multiplying that
417:13 - number by itself so what we are going to
417:15 - do is we will say I multiplied by I now
417:18 - from where this I will come we will have
417:20 - the for keyword and then then this I
417:23 - will come from here that is I in and
417:26 - then we can say range and then we can
417:28 - simply provide the number that is five
417:30 - so basically this range will help us to
417:32 - generate the numbers from 0 to 4 and one
417:35 - at a time all the numbers that is 0 to 4
417:37 - will be assigned to this variable that
417:39 - is I and then I multiplied by I will be
417:42 - generated and it will be assigned to
417:44 - this generator and we can simply iterate
417:46 - through this generator in order to print
417:48 - all the numbers that is the square of
417:50 - these numbers over here so guys how we
417:52 - will do that we will simply use the for
417:55 - Loop now and then over here we will say
417:57 - element in and then we can simply have
418:00 - the square generator over here and then
418:02 - we can simply provide the print
418:04 - statement and we can print the element
418:06 - so guys basically this is going to print
418:09 - the square of the numbers going from
418:11 - zero up to four over here in this case
418:13 - so let me just save this file now and
418:15 - try running this code so as you can see
418:17 - square of 0 it is 0er square of 1 is 1
418:20 - the next number is 2 so 2 2 2 are 4 and
418:23 - then the next number is three so square
418:25 - of three is 9 and then the next number
418:27 - that is four the square of 4 is 16 over
418:29 - here so guys this is the way that we can
418:31 - use the python generator expression as
418:34 - we have seen over here in order to
418:36 - generate the numbers and one at a time
418:38 - iterate through them by using the fall
418:40 - Loop over here now guys why do we use
418:42 - this python generator so basically it is
418:44 - very easy to implement as compared to
418:47 - the iterables that we have seen
418:48 - previously you can easily generate the
418:50 - generators in order to iterate through
418:53 - them another important Advantage is it
418:55 - is memory efficient as we have seen that
418:57 - only one item at a time is getting
419:00 - returned whenever we are using the
419:02 - generator function so we use the yield
419:04 - keyword instead of the return keyword in
419:07 - order to return the individual elements
419:09 - inside the generator it also represents
419:11 - the infinite stream of data so basically
419:13 - whenever we are going to implement the
419:16 - infinite stream of data it becomes very
419:18 - important that we can use the generator
419:20 - so as you can see for example we have
419:22 - this all even function over here n value
419:25 - is initialized as zero and then we can
419:27 - say while true yield n value so over
419:29 - here one value of n will be returned at
419:32 - a time so basically this is very memory
419:34 - efficient over here we are not storing
419:37 - all the values in a particular list but
419:39 - we are generating one number at a time
419:41 - next time the value of n will be
419:43 - incremented by two in this case so guys
419:45 - generators are very important whenever
419:47 - you are going to deal with programs
419:49 - which requires memory efficiency
419:51 - closures in Python programming so guys
419:53 - python closure is a nested function that
419:56 - allows us to access variables of the
419:58 - outer function even after the outer
420:01 - function is closed so guys we will check
420:03 - this with the help of examples as well
420:05 - so what this python closure means is
420:07 - whenever we are having the inner
420:09 - function inside the outer function and
420:11 - when we are using the variable of the
420:14 - outer function inside the inner function
420:16 - still we can access that variable from
420:19 - the inner function itself even after the
420:21 - outer function function execution is
420:23 - completed so guys over here we have the
420:25 - function that is the Creed and over here
420:27 - what we are doing is we are providing
420:29 - the variable that is name and the value
420:31 - is drawn over here and what we are doing
420:33 - is we are returning an anonymous
420:35 - function so in this case we have to
420:37 - return the function which will be
420:39 - assigned to the variable so we are
420:41 - returning Lambda and then we are saying
420:43 - hi and then this name so guys basically
420:45 - what we have to do is when we are
420:47 - calling this greed function we are
420:49 - assigning the value to this message so
420:52 - what will be the return value over here
420:54 - it will be this Anonymous function which
420:56 - will be returned and it will be assigned
420:59 - to this message variable and since it is
421:01 - a function now we have to use the open
421:03 - and close parenthesis while calling this
421:06 - function that is message and we can call
421:08 - it inside the print function as well
421:10 - since it is going to return this string
421:12 - over here so guys let us check this with
421:13 - the help of example now so we are going
421:15 - to have the function that is GRE over
421:18 - here which is not going to take any
421:20 - parameter and then inside this we are
421:22 - going to have the name let's say we
421:24 - initialize the name as Peter and then
421:26 - what we are going to do is we are going
421:28 - to return an anonymous function in this
421:30 - case so let's say the anonymous function
421:33 - it is Lambda followed by colon and then
421:36 - we are simply going to provide the
421:37 - string that is high followed by plus and
421:40 - then the name that we have already
421:42 - defined over here for which the value is
421:44 - Peter so guys this is the way that we
421:46 - can have the anonymous function now this
421:49 - Anonymous function will be assigned to
421:51 - another variable when the greed function
421:54 - is called so over here we will say
421:56 - message it is equal to this greed
421:59 - function so this greed function is being
422:01 - called what the control flow will do is
422:04 - it will see that the name value is
422:06 - parameter and it will say high name and
422:08 - this entire Anonymous function will be
422:10 - assigned to this message now we can
422:12 - simply call this message and print the
422:14 - statement so over here we will have the
422:16 - print statement and we can call this
422:19 - message variable but it is a function
422:21 - now since this greed function is
422:23 - returning the anonymous function we have
422:25 - to provide this open and close
422:27 - parenthesis over here along with the
422:29 - message variable name so guys let me
422:30 - just save this file now and try running
422:32 - this code so as you can see we are
422:34 - getting the message that is high Peter
422:36 - so guys over here this function is being
422:39 - treated as a closure now why so because
422:42 - as you can see we are printing this
422:44 - message function and the execution of
422:46 - this function is already over that is
422:48 - the outer function execution is already
422:51 - over but the name parameter is present
422:54 - inside the outer function still we can
422:56 - access it by calling the variable that
422:58 - is outside of the greed function and
423:01 - guys this is what we call it as a python
423:03 - closure wherein we can access the
423:05 - variable of the outer function from the
423:07 - inner function now guys let us check
423:09 - another example so let's say we have a
423:11 - function over here so we say DF followed
423:14 - by the function name that is calculate
423:16 - which is not going to take any parameter
423:18 - and then over here let's say we provide
423:20 - the value of n it is equal equal to 1
423:22 - and then what we will do is we will have
423:25 - another inner function over here so we
423:27 - say DF followed by Inner and then this
423:30 - is another function so what this
423:32 - function will do is it will access the
423:34 - variable that is in the outer function
423:37 - that is the variable n and it will add
423:39 - two to it so basically what we have to
423:41 - do is we have to use the nonlocal
423:43 - keyword over here in order to access
423:45 - that variable after this we have to
423:48 - increment the value of n by 2 so n plus
423:51 - it is equal to 2 over here and then we
423:53 - will say return n in this case so guys
423:56 - basically what this is doing is it is
423:58 - taking this variable that is n and then
424:01 - it is incrementing the value of n by 2
424:03 - and then it is returning so guys
424:05 - basically it is going to only return the
424:07 - odd number starting from three over here
424:09 - since the initial value of n is 1 and
424:12 - what we will do is the outer function
424:14 - that is calculate it is going to Simply
424:17 - return this inner function over here so
424:19 - we say return inner in this case so guys
424:23 - basically whenever we are going to call
424:24 - this calculate it is going to return
424:27 - this function that is inner which will
424:28 - be assigned to another variable outside
424:31 - of this calculate function so let's say
424:33 - we have a variable that is odd it is
424:35 - equal to we call this function that is
424:38 - calculate over here so what this will do
424:40 - is the control flow will see that we
424:42 - have called the calculate function it
424:43 - will come over here and then n will be
424:46 - assigned the value that is one and then
424:48 - it is going to return inner so basically
424:51 - this is getting returned that is the
424:52 - inner function is getting returned and
424:54 - it will be assigned to this odd variable
424:56 - so next time we can simply call this odd
424:59 - variable in order to get the value of
425:02 - this n so let us check that what we can
425:04 - do is we can simply provide the print
425:06 - statement and inside this we can call
425:08 - this odd function over here so this odd
425:11 - function is going to call this inner
425:13 - function it is going to see that the
425:14 - non-local N the value is 1 right now so
425:17 - it will do n + it is equal to 2 so the
425:20 - latest value of n will be three and that
425:22 - value will be returned and it will be
425:24 - displayed over here so guys let me just
425:25 - save this file and try running this code
425:27 - now so as you can see three is getting
425:29 - displayed similarly if we want to get
425:31 - more values so I'm going to Simply copy
425:34 - and paste these lines of code that is we
425:35 - are going to print more odd numbers over
425:38 - here so I'll just save this file now and
425:39 - try running this code as you can see we
425:41 - are getting three and then the next odd
425:43 - number will be five and then the next
425:44 - odd number will be seven so guys
425:46 - basically we have only called the outer
425:48 - function that is calculate once but this
425:51 - is the the importance of the Python
425:53 - closure it remembers what the previous
425:55 - value of n was and continuously it
425:58 - increments the value of n by two and
426:00 - that is what we are getting over here so
426:02 - guys this is the way that we can
426:03 - Implement python closures decorators in
426:06 - Python Programming so guys a python
426:08 - decorator is a function that takes in a
426:11 - function as a argument and returns it by
426:14 - adding some functionality so basically
426:16 - we are going to define a function that
426:18 - will take another function as a
426:19 - parameter and it will return it with
426:21 - some added functionality and that
426:24 - function that we are going to create is
426:26 - called a python decorator so as you can
426:28 - see in this example we have something
426:30 - called as make pretty which is going to
426:32 - take another function as the parameter
426:34 - and inside this we are having the inner
426:36 - function over here which is going to
426:38 - Simply print I got decorated and then
426:41 - after that it is going to call that
426:43 - function which was passed as a parameter
426:45 - to this make pretty function and after
426:47 - this there's a return inner function
426:49 - which is going to be returned by this
426:51 - outer function so how can we call it so
426:53 - basically we have another function that
426:55 - is ordinary which is going to Simply
426:57 - print I am ordinary so basically we are
427:00 - going to call this make pretty function
427:02 - which is the outer function over here
427:04 - and we are going to pass this ordinary
427:06 - function that we have created over here
427:09 - so this ordinary function is going as
427:11 - the parameter to this make pretty
427:13 - function and the control flow is
427:14 - returning this inner function with the
427:16 - help of the statement so basically this
427:18 - variable will get the inner function
427:20 - over here and when we are going to call
427:23 - this decorated function variable along
427:25 - with the open and close parenthesis this
427:27 - particular inner function will be called
427:29 - so first of all this print statement
427:31 - will be called and then this ordinary
427:33 - function will be called so guys let us
427:34 - check this with the help of example as
427:36 - well so that you get the clear picture
427:38 - of what a python decorator means so
427:41 - basically first of all let's say we
427:43 - Define the function that is ordinary
427:45 - function over here and what we are going
427:47 - to do is we are simply going to print
427:49 - the statement that is I am ordinary so
427:53 - guys how do we call this function simply
427:55 - by using the name of this function we
427:57 - can call it so basically we are going to
427:59 - use the name of the function followed by
428:01 - open and close parenthesis so let me
428:03 - just save this file now and try running
428:05 - this code so as you can see I am
428:07 - ordinary is getting displayed but what
428:09 - is the main aim of python decorators it
428:11 - is going to take this function as the
428:13 - parameter and return it with some
428:16 - additional functionality so let's say we
428:18 - have another function over here and the
428:20 - name of that function we will keep it as
428:22 - make pretty and then this thing is going
428:25 - to take another function as the
428:26 - parameter so let's say we provide the
428:29 - function as the variable name and then
428:31 - after this we have a colon and then
428:33 - inside this we are going to have another
428:35 - nested function which we call it as
428:37 - inner and this thing is not going to
428:39 - take any parameter and then after this
428:42 - simply we are going to print that I am
428:44 - decorated over here so I am decorated
428:48 - and then after this we are going to call
428:51 - this function which was passed as the
428:53 - parameter to the make pretty so we'll
428:55 - just call this function using the open
428:57 - and close parenthesis and then after
428:59 - this what we will do is this make pretty
429:02 - will return the inner function over here
429:04 - so basically we are going to call the
429:07 - return inner over here so now whenever
429:09 - we are going to call this make pretty
429:11 - function we have to assign it to the
429:13 - variable and that variable will be
429:15 - having this instance of the inner
429:17 - function so what we will do is instead
429:19 - of calling this ordinary function we
429:21 - will say decorated that is the variable
429:23 - name followed by equal to and we will
429:26 - call this make pretty function over here
429:28 - so I'll just copy this and paste this
429:29 - over here and with this make pretty what
429:32 - we are going to do is we are going to
429:34 - pass this ordinary function because it
429:36 - is expecting a function over here as the
429:38 - parameter so I'm going to pass this
429:40 - ordinary we'll just copy and paste over
429:42 - here so guys basically this function is
429:44 - going to return another function that
429:46 - will be inner so this entire function
429:49 - will be returned and assigned to this
429:51 - decorated variable now we can call this
429:53 - decorated variable as a function in
429:55 - order to call the statements that are
429:57 - present inside this inner function so
429:59 - what we are going to do is simply we are
430:01 - going to call this decorated along with
430:03 - the open and close parenthesis over here
430:06 - so let me just save this file now and
430:07 - try running this code so as you can see
430:10 - instead of just I am ordinary we are
430:12 - getting I am decorated over here because
430:14 - this function is getting called so first
430:16 - of all this statement that is I am
430:18 - decorated is getting printed on the
430:20 - terminal after this we have this
430:22 - function called so what is this function
430:24 - called this is nothing but this is the
430:25 - ordinary function that is supposed to be
430:27 - called so this IM ordinary is getting
430:30 - printed as the second line so guys this
430:32 - is the way that we can use the python
430:33 - decorators in order to add some
430:35 - functionality to the existing functions
430:38 - we can use the python decorator which is
430:40 - another function and it is going to
430:42 - return another inner function over here
430:44 - as we have seen apart from this after
430:46 - calling this function we can also have
430:48 - some other statements such as I am
430:51 - already decorated so we can say I am
430:54 - already decorated and before this we can
430:57 - say I am being decorated so basically
431:00 - this is the process of getting decorated
431:02 - and then over here it will print I am
431:04 - ordinary and then again I am already
431:06 - decorated will get printed over here so
431:09 - let me just save this file once again
431:10 - and try running this code so as you can
431:12 - see these three statements are getting
431:14 - printed over here now guys apart from
431:16 - this there is another way in order to
431:17 - mention these decorators so add symbol
431:20 - with decorator as you can see instead of
431:22 - assigning the function call to a
431:24 - variable that we have done just now over
431:27 - here we are assigning this function call
431:29 - to this particular variable that is
431:31 - decorated python provides a much more
431:33 - elegant way to achieve this
431:35 - functionality using the add symbol so
431:37 - over here we can also use the at the
431:39 - rate symbol in order to call this make
431:42 - pretty function so what we have to do is
431:44 - I'll just remove these lines of codes so
431:46 - basically this lines of codes are not
431:48 - required and instead of that we can
431:50 - simply call the ordinary function over
431:53 - here but in order to get it decorated
431:55 - what we have to do is before this
431:57 - ordinary function we have to use at
431:59 - theate symbol followed by The Decorator
432:02 - name that is this function name which is
432:04 - make pretty so over here we will say
432:07 - make pretty so guys in this way when we
432:09 - call this ordinary it is going to check
432:11 - that yes we are having The Decorator
432:13 - over here and this function will be
432:15 - called which will return these
432:16 - statements which we have already seen so
432:19 - let me just save this file now and try
432:20 - run running this code so as you can see
432:22 - all these three statements are again
432:24 - getting printed over here so we have not
432:26 - called the make pry directly but we have
432:28 - called the ordinary function which is
432:30 - the base function and for that we are
432:32 - having The Decorator that is make pretty
432:34 - guys let us take another example as far
432:36 - as decorators are concerned with the
432:38 - help of numbers over here so what we are
432:40 - going to do is let's say we have the
432:42 - divide function so divide function takes
432:45 - two parameters that is X comma y it is
432:47 - simply going to divide X by y over here
432:50 - so we are going to have return x / Y in
432:55 - this case now guys let's say we call
432:57 - this function so basically we need to
432:59 - call this function with the help of two
433:01 - numbers so let's say first we call 2
433:02 - comma 5 and then let me just save this
433:04 - file now and try running this code so we
433:06 - are not getting any result that's
433:08 - because we are returning x / y instead
433:11 - of that let us print the operation so
433:13 - print x / y so let me just save this
433:16 - file now and try running this code as
433:17 - you can see we are getting the result as
433:19 - 0.4 but but guys let's say I want to
433:22 - divide one more number so let's say we
433:24 - have divide 2 comma 0 now this time the
433:27 - denominator is 0o and we cannot divide
433:30 - any number by zero so let me just save
433:32 - this file now and try running this code
433:34 - so as you can see we are getting zero
433:35 - division error that is division by 0
433:38 - that is the exception that is occurring
433:40 - for this statement that is divide 2
433:42 - comma 0 so guys let's say we want to
433:44 - handle this exception with the help of
433:45 - python decorator so what we will do is
433:47 - we will have another function over here
433:49 - which will act as a py decorator for
433:52 - this divide function and we will name
433:54 - this function as smart divide it is
433:56 - going to check whether the denominator
433:58 - is zero or not and then only it will
434:00 - divide the two numbers so over here it
434:03 - is going to take one parameter that is
434:05 - the function as the argument and then we
434:08 - are going to have colon and then inside
434:10 - this we are going to have the inner
434:12 - function over here now this inner
434:14 - function is also going to take two
434:15 - parameters since the original function
434:17 - that is divide we are calling it with
434:19 - two parameters over here so again inside
434:22 - the inner function we will have X comma
434:24 - Y and then after this simply we are
434:26 - going to have the print statement and we
434:28 - will say I am going to
434:32 - divide X and Y so in this case I am
434:35 - going to divide comma X and then comma
434:38 - and then we have end and then comma we
434:41 - have y in this case so basically we are
434:43 - just printing the statement that is I am
434:45 - going to divide X and Y and then after
434:48 - this we are going to check whether this
434:49 - value that is y which is the denominator
434:52 - whether it is equal to Z or not so we
434:54 - will say if y it is equal to Z then we
434:58 - can simply print the statement that is
435:02 - denominator is
435:04 - zero and then we say cannot divide so
435:09 - basically when the denominator is zero
435:11 - we cannot divide and we have to return
435:13 - back so we will say return in this case
435:15 - so when Y is zero then denominator is
435:18 - zero cannot divide statement should get
435:20 - printed and the control flow should
435:22 - return back or else if Y is not zero
435:25 - then we need to call this divide
435:27 - function over here which was passed as a
435:29 - parameter as you can see so over here we
435:31 - say return and then we say function and
435:35 - then we have to pass both these
435:36 - parameters that is X and Y in this case
435:39 - so we say x comma Y and then guys after
435:42 - this coming out of this inner function
435:44 - we have to return this inner function
435:46 - from this smart divide so we say return
435:49 - inner so as you can see this is our
435:51 - python decorator function that will help
435:53 - us in order to check whether the
435:55 - denominator is zero if it is zero then
435:57 - it will print the statement that we
435:59 - cannot divide the two numbers if it is
436:01 - not zero then this particular function
436:03 - that is divide needs to be called now
436:05 - guys when we are calling this divide we
436:07 - also need to call this smart divide so
436:09 - as we have seen with the etherate
436:11 - operator before this function that is
436:13 - divide we have to provide at the rate
436:15 - and then we have to provide smart divide
436:17 - so when this divide function is being
436:19 - called the control FL flow will go over
436:21 - here and it will check that we have the
436:23 - python decorator in this case so the
436:25 - control flow will come over here and all
436:27 - the operations will be carried out as we
436:29 - have just discussed so guys let me just
436:31 - save this file now and try running this
436:33 - code so as you can see this time we are
436:35 - getting I am going to divide 2 and 5
436:38 - that's because the first time that we
436:39 - provided the numbers were 2 and 5 in
436:41 - this case so the answer was 0.4 and the
436:44 - next time is I am going to divide two
436:47 - and zero the second statement which
436:48 - contains two and zero numers as the X
436:51 - and Y values we are getting denominator
436:54 - is zero cannot divide so guys over here
436:56 - we have successfully used the python
436:58 - decorator in order to handle the
437:01 - exception that was occurring when we
437:02 - were dividing the two numbers where
437:04 - denominator was zero in this case so
437:06 - property decorator in Python Programming
437:09 - so guys Python Programming provides us
437:11 - with a builtin property decorator which
437:14 - makes usage of getter and Setters much
437:17 - easier in objectoriented programming so
437:19 - guys previously we had had seen the
437:21 - objectoriented programming in Python
437:23 - whenever we are going to have the
437:24 - private variables it is very important
437:27 - that we have the Getters and Setters for
437:29 - them so that they cannot be directly
437:31 - accessed but they can only be accessed
437:33 - using the getter and Setter functions so
437:36 - guys we will check with the help of
437:37 - examples how we can use the property
437:39 - decorator in Python so this is the
437:41 - example code that we are going to use
437:43 - let's say we have the class Celsius over
437:45 - here and initially we have the
437:47 - Constructor which takes the temperature
437:49 - as the argument and this temperature
437:51 - value will be assigned to another
437:53 - variable that is the temperature
437:54 - variable belonging to this class Celsius
437:57 - and then we also have another function
437:59 - that is 2 Fahrenheit which will convert
438:01 - this Celsius temperature to the
438:03 - Fahrenheit temperature so guys let us
438:05 - check this with the help of example as
438:07 - well I'll quickly copy these lines of
438:09 - code and paste this over here so as you
438:11 - can see what we have done is we have the
438:13 - Constructor it is going to take one
438:14 - parameter that is the temperature by
438:16 - default the value will be zero if
438:18 - temperature value is not provided and we
438:21 - have another function that is 2
438:22 - Fahrenheit it takes the same temperature
438:24 - it multiplies by 1.8 and adds 32 to this
438:28 - Celsius temperature and this is the
438:30 - function in order to convert the deg
438:32 - Celsius to degree fahren so guys over
438:34 - here what we are going to do is we are
438:36 - going to create the object so guys let's
438:39 - say we create an object the name of the
438:41 - object is human it is equal to we call
438:43 - the class name over here that is CSUS
438:46 - and we don't pass any argument so by
438:48 - default the temperature will be taken as
438:50 - zero in this case and let's say the
438:52 - human body temperature just for the sake
438:54 - of example is 37 so we are going to use
438:57 - this object that is human followed by
438:59 - Dot and then we have temperature and
439:02 - then we can simply assign it a value so
439:04 - we can say equal to and then 37 so guys
439:07 - what this statement will do is this 37
439:09 - value will be assigned to the variable
439:11 - that is temperature of this class that
439:13 - is Celsius so basically it is a public
439:16 - variable right now and then we can
439:18 - simply print these values so we can
439:20 - first of all print the temperature of
439:22 - this human object so we say human
439:25 - followed by Dot and then we say
439:27 - temperature over here and then again in
439:29 - order to get the temperature in
439:31 - fahrenheit what we can do is we can call
439:34 - human followed by Dot and then two
439:36 - Fahrenheit so this is the function that
439:38 - is going to convert the temperature from
439:41 - De Celsius to De fahren so guys let me
439:44 - just save this file now and try running
439:46 - this code so as you can see we are
439:47 - getting 37 as the de cius temperature
439:50 - and then after converting to Fahrenheit
439:52 - since we are taking the floating number
439:54 - over here and based on this formula we
439:57 - are getting the decimal points and the
439:58 - value is 98.6 so guys this is the way
440:01 - that we can use the objectoriented
440:03 - programming in Python now guys there is
440:05 - a very important point the temperature
440:07 - in de celius cannot go to less than -
440:12 - 273.15 so this is the maximum negative
440:14 - value in De celius that it can go but
440:17 - guys over here there is no such
440:19 - restrictions we can keep it -300 as well
440:22 - so when we say 300 over here and let me
440:25 - just save this file now and try running
440:27 - this code as you can see we are getting
440:29 - -300 and - 508 as dee Celsius and degree
440:33 - Fahrenheit respectively but guys this
440:35 - implementation is not correct since the
440:38 - maximum negative de cus temperature that
440:40 - can go is up to -
440:43 - 273.15 so what we can do is we can use
440:46 - the Getters and Setters so suppose we
440:48 - want to extend the usable of the Celsius
440:51 - class defined above we know that the
440:53 - temperature of any object cannot reach
440:56 - below
440:57 - 273.15 de C so what we have to do is we
441:01 - have to make this temperature as a
441:03 - private variable and we have to use the
441:05 - getter and Setter functions but guys in
441:07 - order to make this variable as private
441:10 - variable we have to prefix a single or
441:12 - double underscore before this variable
441:15 - and to do that to all the existing
441:17 - instances will be little bit difficult
441:19 - if we we are using this variable many
441:21 - times inside the class so what we can do
441:24 - is we can use the property decorator of
441:26 - the Python that is being provided as the
441:28 - feature in order to accomplish our task
441:31 - of getting the Getters and Setters as
441:33 - well and in order to make this variable
441:35 - as private as well so instead of
441:37 - changing the existing instances of the
441:39 - variable we can simply first of all
441:42 - Define the Getters and Setters so we
441:44 - will say DF followed by get temperature
441:47 - this get temperature function is going
441:49 - to take one parameter that is self which
441:51 - is the object itself and then what we
441:53 - will say is we are going to Simply
441:55 - return this temperature so we will say
441:57 - self followed by Dot and then single
442:00 - underscore or you can also use the
442:01 - double underscore in this case and we
442:04 - are going to say temperature so guys
442:06 - this is acting as a private variable
442:08 - over here and in order to identify that
442:10 - we have come inside the get temperature
442:12 - we will have the print statement and we
442:14 - will say getting value so guys this is
442:17 - the statement that will be printed apart
442:19 - from that the temperature will be
442:21 - returned over here and then guys
442:22 - similarly what we will do is we will
442:24 - also have the set a function so we have
442:26 - set temperature in this case I'll just
442:28 - copy and paste this function name and we
442:31 - will say set temperature over here and
442:33 - we will take self as the parameter and
442:35 - apart from that we will also take the
442:36 - value that is coming in order to set the
442:39 - temperature and then after this we have
442:41 - to check whether this value is it less
442:43 - than -
442:44 - 273.15 that is what we have mentioned
442:47 - over here so I'm going to Simply copy
442:49 - this value and we are going to have the
442:51 - condition if value less than this value
442:55 - over here so if the value is less than -
442:58 - 273.15 then we will simply print the
443:00 - statement that this temperature is not
443:02 - possible so
443:06 - temperature
443:08 - below -
443:10 - 273.15 is not possible and then we have
443:14 - to return back so we will say return in
443:17 - this case and then guys the next
443:18 - statement should be if the value Val is
443:20 - not less than this particular value then
443:22 - we have to assign that value to the self
443:25 - temperature over here so I'm just going
443:26 - to copy this variable name and paste
443:29 - this over here it will be equal to this
443:31 - value that has been just passed to this
443:34 - Setter function so guys we have already
443:36 - defined the getter and Setter function
443:38 - now the main problem over here is we are
443:40 - using the underscore in this case as the
443:43 - prefix whereas we were not using the
443:45 - underscore in this case so guys we can
443:47 - use the property decorator now over here
443:50 - in order to assign those values so what
443:52 - we have to do is inside this class
443:54 - itself that is Celsius class we can
443:56 - simply provide the variable name that is
443:58 - temperature it is equal to we say
444:01 - property in this case so guys this is
444:03 - the built-in class that is provided by
444:05 - the python in order to solve the
444:07 - challenge that we are facing right now
444:09 - so basically we are going to provide the
444:11 - property and then after this we simply
444:13 - provide the getter and set a function
444:15 - name so over here we say get temperature
444:17 - followed by comma and then we say set
444:20 - temperature in this case so guys
444:22 - basically we provide the geta function
444:24 - that is get temperature and set
444:25 - temperature is the parameter to this
444:27 - property decorator over here so guys
444:29 - python will come to know that for this
444:31 - temperature we have to use this getter
444:33 - and this Setter in this case so now what
444:35 - will happen is whenever we are going to
444:37 - call human. temperature it sees that
444:40 - there is a getter function in this case
444:42 - and it will try to assign this -300 in
444:45 - which case the set temperature will be
444:47 - called and this particular condition
444:49 - that we have just find will be checked
444:50 - whether it is less than -
444:53 - 273.15 if yes then this particular
444:55 - statement will be displayed and the
444:57 - control flow will return back if this
444:59 - condition is false then basically the
445:01 - temperature value will be over return so
445:03 - guys let me just save this file now and
445:04 - try running this code so as you can see
445:06 - first of all human it is equal to
445:08 - Celsius so basically human do
445:10 - temperature it is equal to -300 so over
445:13 - here what it is trying to do is it is
445:15 - trying to call this set temperature
445:17 - function and since the value is -3 300
445:20 - that was passed from here the value is
445:22 - less than this particular value and that
445:24 - is why temperature below
445:27 - 273.15 is not possible statement is
445:30 - getting printed over here now guys next
445:32 - time what is happening is the print
445:33 - statement human do temperature so the
445:36 - control flow is trying to get the value
445:38 - of the temperature so it is saying
445:40 - getting value over here and then after
445:42 - this initially by default the
445:44 - temperature was Zero which was never
445:46 - overridden over here and that is why we
445:48 - are getting it as zero and next time we
445:50 - are getting the value in terms of
445:52 - Fahrenheit over here so basically this 2
445:55 - Fahrenheit function is again calling the
445:57 - get temperature over here so again we
445:59 - are getting the value in this case and
446:01 - since this is zero this multiplication
446:03 - expression becomes zero over here and we
446:05 - are getting 32 as the value so we are
446:07 - getting 32 as the value now so guys
446:09 - let's say we provide -200 this time so
446:12 - basically this temperature below this
446:14 - particular value is not possible should
446:16 - not be printed in this case so let me
446:18 - just save this file now and try running
446:20 - this code so as you can see we are
446:22 - getting value -200 was set and 2
446:25 - Fahrenheit it is - 328 as the value that
446:28 - is getting displayed in degree
446:30 - Fahrenheit so guys this is the way that
446:32 - we can use the property decorator with
446:34 - the help of Getters and Setters whenever
446:36 - we want to hide a particular variable
446:38 - inside the class and make it as a
446:40 - private variable so guys please make
446:42 - sure that you practice on your own so
446:43 - that on different inputs you get
446:45 - different outputs so we have come to the
446:47 - conclusion of the Python programming
446:48 - language hopefully you have got enough
446:50 - knowledge about the Python language and
446:52 - you should practice on your own so that
446:54 - on different inputs you get different
446:55 - outputs and that is how you are going to
446:57 - learn more about the Python language so
447:00 - that's it in this video I'll see you in
447:01 - the next video till then stay tuned