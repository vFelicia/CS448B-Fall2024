00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about recursion function in Python
00:05 - Programming so guys in Python we know
00:08 - that a function can call other functions
00:10 - as well it is even possible for the
00:12 - function to call itself and when the
00:14 - function call itself it's called
00:16 - recursive function so basically these
00:19 - type of construct are termed as
00:20 - recursive functions whenever a function
00:22 - calls itself from inside its body so for
00:25 - example the factorial of a number is the
00:28 - product of all the integers from 1 up to
00:31 - that number so if you see the example
00:33 - the factorial of 6 which is denoted as 6
00:36 - and then exclamation mark it is equal to
00:39 - 1 multiplied by 2 multiplied by 3
00:41 - multiplied by 4 multiplied by 5
00:44 - multiplied by 6 which is equal to 720
00:46 - and this is the factorial of the number
00:49 - that is 6. so guys we can find the
00:50 - factorial of any number by using the
00:53 - recursive function so let us understand
00:54 - how recursive functions work with the
00:56 - help of example over here so let's say
00:59 - we have the factorial function in this
01:02 - case so factorial is the name and then
01:04 - let's say if you provide the variable
01:06 - name as X over here so what we will do
01:09 - is we will simply have to provide the
01:11 - condition over here that is if x is
01:13 - equal to 1 we have to return 1 in this
01:16 - case so guys always remember that
01:18 - whenever we are having the recursive
01:20 - function we need to have the end point
01:22 - we need to have a limit on which we need
01:25 - to return some basic number over here so
01:27 - this is the limit in this case that is
01:29 - when the value of x is equal to 1 that
01:32 - is at the lowest level the function
01:34 - needs to return the value which is 1 and
01:36 - then if it is not 1 then we can call
01:39 - that function once again now how do we
01:40 - call that function we simply use the x
01:43 - value that is the current x value and
01:46 - then we multiply that number with the
01:48 - factorial of x minus 1 so this time we
01:51 - provide x minus 1 in this case and one
01:54 - more thing that we can do in order to
01:56 - return this result is we can have the
01:58 - return keyword so guys we will
01:59 - understand this function in detail now
02:02 - before which we will just call this
02:04 - function over here that is factorial and
02:06 - let's say I provide the number that is 6
02:09 - that we have already seen for which the
02:11 - factorial of 6 must be 720 and what we
02:14 - will do is since this factorial function
02:16 - is returning this value Let Us return X
02:18 - multiplied by this recursive function we
02:21 - will catch the value in the result so
02:23 - result it is equal to factorial of 6 and
02:26 - we will simply have the print statement
02:28 - saying that factorial is and then colon
02:33 - and then we can simply provide result
02:35 - variable over here so let me just save
02:37 - this file and try running this code guys
02:39 - no need to worry over here I will make
02:40 - you understand each and every line of
02:42 - code over here and how it works so just
02:44 - stick with me till the end of this video
02:46 - so as you can see factorial is 720 so
02:49 - this is the result so we have got the
02:51 - correct result over here now let us
02:53 - understand the working of this recursive
02:55 - function so what exactly is happening
02:57 - over here is we have defined the
02:59 - function that is factorial in this case
03:01 - now result is the variable name for
03:04 - which we will get the value from this
03:06 - factorial function that we have called
03:07 - so basically the control statement comes
03:09 - over here factorial of 6 so the control
03:12 - statement will go to the definition of
03:13 - this function so x value is 6 right now
03:16 - so what we will do is we will understand
03:18 - over here one step at a time so right
03:20 - now X it is equal to 6 in this case so
03:24 - is x value equal to 1 no in this case so
03:27 - the control flow will come over here and
03:28 - it will check this expression that is X
03:30 - multiplied by factorial of x minus 1. so
03:33 - this expression we will put over here
03:35 - that is 6 which is the value of x
03:37 - multiplied by factorial of x minus 1 so
03:42 - x value is 6 so x minus 1 will be equal
03:44 - to 5 in this case now what will happen
03:47 - is now factorial of 5 is being called
03:49 - over here so what is the factorial of 5
03:51 - the control flow will go back again to
03:53 - this function and that is why we call it
03:55 - as recursive because from the body of
03:57 - this function we are calling the
03:59 - function itself now this time x value is
04:02 - 5 so is x equal to 1 no in this case so
04:05 - this time again this expression will be
04:07 - called so x value will be 5 in this case
04:09 - and multiplied by factorial of x minus 1
04:12 - which will be 4 so again next time what
04:14 - will happen is 5 multiplied by factorial
04:18 - of 4 will be called now what is the
04:20 - factorial of 4 so again the control flow
04:22 - will come over here it will check
04:24 - whether X is equal to 1 no in this case
04:27 - so again this expression will be
04:28 - computed so this time it will be X is
04:31 - equal to 4 multiplied by the factorial
04:34 - of 4 minus 1 which is 3 right now and
04:36 - then again now x value is 3 so again it
04:40 - will be 3 multiplied by factorial of 2
04:43 - in this case and then the last statement
04:46 - that is 2 multiplied by factorial of 1
04:48 - in this case now when the factorial of 1
04:51 - is being called what will happen is
04:53 - factorial of X which will be factorial
04:55 - of 1 in this case so X is equal to 1 yes
04:58 - in this case so it will return true and
05:01 - the control flow will not go over here
05:02 - to carry out the computation of this
05:04 - expression so return 1 will return to
05:07 - the factorial of 1 function so in this
05:10 - case factorial of 1 will become 1 over
05:12 - here now 2 multiplied by 1 is equal to 2
05:15 - and this result will be returned to this
05:18 - function that was called so 2 multiplied
05:20 - by 1 is 2 so 2 will be returned over
05:23 - here 3 multiplied by 2 is 6 so factorial
05:26 - of 3 will become 6 and 6 will be
05:28 - returned over here 6 multiplied by 4 is
05:31 - 24 so factorial of 4 will have 24 as the
05:35 - result and then 24 multiplied by 5 which
05:37 - is equal to 120 and that value will be
05:40 - returned to this function call that is
05:42 - 120 and then 120 multiplied by 6 will be
05:46 - 720 which is the last expression that
05:48 - was computed and that is what we will
05:50 - get over here that is the result will be
05:52 - 720 in this case and that is what we got
05:55 - 720 over here now guys similarly we have
05:58 - seen that the factorial of 4 is equal to
06:00 - 24 so this result we can get simply by
06:03 - calling the factorial function with the
06:06 - value 4 as the argument so let me just
06:08 - save this file and try running this code
06:10 - so as you can see factorial is 24.
06:13 - similarly we can get the factorial of 3
06:15 - which is equal to 6 so we can simply put
06:18 - 3 over here and then let me just save
06:20 - this file and try running this code so
06:22 - factorial is 6 in this case and guys
06:24 - that is how the recursive function works
06:26 - this is just one example that is in
06:28 - order to find the factorial we can have
06:30 - any kind of implementation code based on
06:32 - your requirements provided the
06:34 - requirement can be fulfilled by using
06:36 - the recursive functions if we see one
06:38 - more example let's say we want to find
06:40 - the factorial of the number that is 10
06:42 - let me just run this code once again so
06:44 - it says three six two double a double
06:46 - zero and that is what we get as the
06:48 - factorial of 10. comment in the comment
06:50 - section below whether this result is
06:52 - correct or not so guys please practice
06:54 - on your own so that on different inputs
06:56 - you get different output and that is how
06:57 - you are going to learn more about python
06:59 - programming so guys there are certain
07:01 - advantages and disadvantages of
07:03 - recursive function as you can see
07:04 - recursive functions make the code look
07:07 - clean and elegant so we have made the
07:09 - code very clean and elegant over here a
07:11 - complex task can be broken down into
07:13 - simpler sub problems using recursion so
07:16 - we can have any number that is 100 or
07:18 - 200 and get the factorial of that number
07:20 - just by using these lines of code over
07:23 - here and then sequence generation is
07:25 - easier with recursion than using some
07:27 - nested iteration now what are the
07:29 - disadvantages sometimes the logic behind
07:31 - recursion is hard to follow through so
07:33 - basically as you have seen as I have
07:35 - told you that there must be some end
07:37 - point that you need to provide so
07:39 - basically this is the end point in this
07:41 - factorial function based on your
07:43 - requirements there must be some end
07:45 - point up to which you need to restrict
07:47 - the call of the function from its body
07:50 - itself so that condition you need to
07:52 - identify based on the requirement and
07:54 - recursive calls are expensive they are
07:56 - inefficient as they take up a lot of
07:58 - memory and time and the recursive
08:00 - functions are hard to debug so guys
08:02 - basically these are certain
08:03 - disadvantages so it depends on your
08:05 - requirements what exactly you want to
08:07 - implement and accordingly you can use
08:08 - the recursive functions please make sure
08:10 - that you like this video so that it
08:12 - reaches to more people and subscribe to
08:14 - the channel so that you get the
08:15 - notifications on upcoming videos as well
08:17 - the next video that we are going to talk
08:19 - about is anonymous function in Python
08:21 - Programming so stay tuned