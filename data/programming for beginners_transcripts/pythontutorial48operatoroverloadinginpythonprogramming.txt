00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about operator overloading in Python
00:06 - Programming so guys in Python we can
00:08 - change the way operators work for user
00:11 - defined types so for example the plus
00:13 - operator will perform arithmetic
00:16 - addition on two numbers in the same way
00:18 - it will merge the tool list as well or
00:21 - else if we are dealing with the two
00:23 - strings then it can concatenate two
00:25 - strings so the same plus operator can
00:27 - perform multiple operations depending on
00:30 - the operands whether they are numbers or
00:32 - whether they are strings or list so this
00:34 - feature in Python that allows the same
00:37 - operator to have different meaning
00:39 - according to the context is called
00:41 - operator overloading so this we are
00:44 - going to check with the help of examples
00:45 - as well apart from this there are
00:47 - certain special functions in Python so
00:49 - basically the class functions that begin
00:51 - with the double underscore are called
00:54 - special functions in Python they are
00:56 - called double underscore functions
00:58 - because they have a double under the
01:00 - scope prefix and suffix such as as you
01:03 - can see this init which can be treated
01:05 - as the Constructor of a class it is one
01:07 - function which starts and ends with the
01:09 - double underscore in the same way the
01:11 - plus operator can be overridden by using
01:14 - this double underscore followed by add
01:17 - and then double underscore again and
01:19 - then open and close parenthesis so guys
01:21 - let us check operator overloading
01:23 - implementation in action using the vs
01:25 - code over here so we'll see the very
01:27 - basic examples first of all so let's say
01:29 - we have num1 it is equal to 10 and then
01:32 - number two that is num2 it is equal to
01:35 - 20 so if we simply Print num1 Plus num2
01:40 - over here so num 1 plus num2 so
01:43 - basically it is 10 plus 20 which is 30
01:45 - in this case so when we just save this
01:47 - file now and try running this code
01:49 - so as you can see we are getting the
01:51 - result as 30 but what if these variables
01:54 - are strings so instead of numbers let's
01:56 - say if we enclose them within the double
01:58 - quotes this means that we have a string
02:01 - over here that is 1 0 that is 10 and
02:03 - then over here as well we have another
02:05 - string that is 20. so when we do num 1
02:08 - plus num2 instead of 30 we will get the
02:11 - concatenation of this string which means
02:13 - 10 will be followed by 20 in this case
02:15 - when we try to print the statement so
02:17 - let me just save this file now and try
02:19 - running this code so as you can see we
02:20 - are getting 10 20 so guys we have not
02:23 - changed anything over here the operator
02:25 - is same and the operands are also same
02:27 - the only thing is we have changed the
02:29 - values to the string and that is what
02:31 - operator overloading means that is by
02:34 - using the same operator we can have the
02:36 - different results based on the operands
02:38 - values now guys let us check how
02:40 - operator overloading can be implemented
02:42 - when we are dealing with classes over
02:44 - here okay let's say we have a class that
02:46 - is named as point over here and this
02:48 - class let's say we have a Constructor
02:50 - inside it so we have init method inside
02:54 - this so init method it will take one
02:56 - parameter that is self and what we will
02:58 - do is let's say it has two attributes
03:00 - over here so self dot X so the point
03:03 - class it will have two attributes that
03:05 - is X and Y coordinates so over here
03:08 - let's say we provide the x value by
03:10 - using the parameter that we are getting
03:12 - so let's say we have X1 over here and
03:15 - let's say we have y1 over here so self
03:17 - dot X it will be equal to X1 and then
03:20 - again we will have self dot y it is
03:23 - equal to y1 in this case so whenever we
03:25 - are creating the object by using the
03:27 - point class over here the Constructor
03:29 - that is init method will be called along
03:31 - with the two points that we will be
03:33 - passing and those two points will be
03:35 - assigned the values to these variables
03:37 - it is X and Y over here now guys in
03:39 - order to overwrite the two string method
03:42 - we also have another method that is
03:43 - double underscore and then Str so as you
03:46 - can see apart from this we have many
03:48 - other functions that can be used when we
03:51 - provide the double underscore so vs code
03:53 - is suggesting us the entire list of
03:55 - functions which we can use in our python
03:57 - code so over here we are going to use
03:59 - this Str and then we are going to have
04:01 - our custom code inside this Str so what
04:04 - we are going to do is we are simply
04:06 - going to print the values of this X and
04:08 - Y so how do we do that we are going to
04:10 - use the formatting part and then inside
04:12 - this we are going to call the cell
04:14 - followed by Dot and then we have X and
04:17 - then again we have comma over here and
04:20 - then again we call the self dot y so
04:23 - over here we are simply printing the X
04:24 - and Y values which are separated by the
04:27 - comma over here and then guys let's say
04:28 - we want to override the plus operator
04:30 - over here so before having the function
04:33 - inside the class what I will do is first
04:35 - of all we will create the object so
04:37 - let's say P1 is the object name it is
04:40 - equal to point which is the class over
04:42 - here and what we do is we do 1 comma 2
04:45 - that is X and Y values over here and
04:48 - then let's say we have another point
04:49 - that is P2 it is equal to point and then
04:53 - this time we are going to provide the X
04:54 - and Y coordinates as 2 and 3 over here
04:57 - and what we want to do is we want to
05:00 - print the sum of both these points that
05:01 - is P1 plus P2 so guys in this case we
05:05 - are using this plus operator and then
05:07 - these are the operands that is P1 and P2
05:09 - so how do we have the custom
05:10 - implementation of this plus operator
05:13 - over here which we will call it as the
05:15 - operator overloading as well so as we
05:17 - have seen over here we have something
05:19 - called as double underscore and then add
05:21 - and then double underscore so this
05:23 - represents the plus operator as well so
05:26 - we can use this method inside the class
05:28 - in order to have our custom
05:30 - implementation of addition of both these
05:33 - points so over here we have def followed
05:35 - by double underscore and then we have
05:37 - the add method over here followed by
05:39 - double underscore and then we have the
05:42 - open and close parent asset and then
05:43 - inside the parenthesis we will provide
05:45 - the self as the parameter now guys apart
05:47 - from the self parameter basically when
05:49 - we do P1 plus P2 it is simply P1 dot
05:54 - this particular function that is we are
05:56 - going to Define followed by this P2
05:58 - which will be a parameter so we need to
06:00 - catch this as the second parameter over
06:02 - here so what we will do is after the
06:04 - cell we will have another parameter and
06:06 - we will name it as other over here so
06:08 - what we can do is over here we can
06:10 - create another variable that is X it is
06:12 - equal to self dot X over here plus we
06:16 - need to use another parameter that is
06:18 - other which represents the other point
06:20 - that is P2 in this case so over here we
06:23 - will say other dot X in this case and
06:26 - then the same way we are going to have
06:27 - another variable that is y it is equal
06:30 - to cell dot y plus other dot Y in this
06:35 - case and then guys what we have to do is
06:36 - simply we need to return the point of
06:39 - both these values that we have found
06:40 - that is X and Y so basically return
06:43 - point of X comma Y in this case so we
06:47 - have X comma y so guys this is the
06:49 - implementation of our addition operator
06:51 - we are doing the operator overloading in
06:54 - this case so basically P1 plus P2 it is
06:57 - same as V1 followed by Dot and then the
07:00 - add function being called along with the
07:02 - parameter that is P2 so in this case
07:04 - this function will be called and it will
07:06 - return point of X comma Y and basically
07:09 - while returning this we are providing
07:11 - the print statement so behind the scenes
07:13 - this function will be called in order to
07:15 - print the statement so guys basically
07:17 - over here instead of the print statement
07:19 - we need to have the return statement
07:21 - over here so I'll just remove this part
07:23 - over here and we will say return
07:25 - followed by double quotes and then
07:27 - inside this double close we will be
07:29 - using the formatting so let's say we
07:31 - have 0 and then comma and then let's say
07:33 - we have one followed by Dot and then we
07:36 - have format over here and inside this
07:38 - format we need to provide the x and y
07:40 - values so self dot X and then comma and
07:43 - then we have self dot Pi in this case so
07:45 - basically this is the way in which we
07:47 - are going to print the values that is of
07:50 - X and Y so guys let me just save this
07:52 - file now and try running this code so as
07:54 - you can see we are getting the
07:56 - coordinates as 3 and 5 this x and x
07:59 - values are getting added so 1 plus 2 it
08:01 - is equal to 3 and then 2 plus 3 it is
08:04 - equal to 5 so we are getting 5 over here
08:06 - so guys basically what we have done is
08:08 - if you see the main code over here we
08:10 - have just defined the P1 and P2 which
08:13 - are simply the points and if we were not
08:15 - having this implementation inside the
08:18 - class that is the string and the
08:19 - addition part then we won't be able to
08:21 - add both these points directly because
08:24 - by default this plus operator can only
08:26 - handle numbers or strings Or List over
08:29 - here but in order to handle the custom
08:31 - classes we need to define the custom
08:33 - functions as well inside those classes
08:35 - and according to our requirement we can
08:37 - have the code inside those custom
08:39 - functions guys we can also change the
08:41 - formatting over here in order to change
08:43 - the formatting we can say that X it is
08:45 - equal to this particular thing and then
08:48 - after comma we can have y it is equal to
08:50 - self dot Y part over here so let me just
08:53 - save this file now enter try running
08:54 - this code so as you can see we have
08:56 - changed the formatting exit is equal to
08:58 - 3 and Y is equal to 5 so whatever format
09:01 - that you want to print in or whatever
09:03 - code you want to have inside this Str
09:05 - method you can have it accordingly based
09:07 - on your requirements so guys this is
09:09 - operator overloading for you with the
09:11 - same operator you can have multiple
09:13 - implementations and it can have
09:15 - different meanings as far as operands
09:17 - are concerned similarly we have other
09:19 - special functions and the other operator
09:21 - overloading functions as well as you can
09:24 - see we have this init which initializes
09:26 - the attributes of the object which we
09:28 - have already seen as far as class
09:30 - Constructors are concerned then we have
09:32 - Str which returns a string
09:33 - representation of the object that is
09:35 - what we have implemented over here it
09:37 - returns a string implementation of the
09:40 - object that is point x comma Y and then
09:42 - we also have Len which Returns the
09:44 - length of the object then add which adds
09:47 - the two objects so over here we have
09:49 - implemented the add method which adds
09:52 - two objects over here which is P1 and P2
09:54 - that is what we have achieved in this
09:56 - particular program apart from that we
09:58 - also have this call function which calls
10:00 - the objects of the class like a normal
10:02 - function guys apart from this we can
10:04 - also have other operator overloading
10:07 - functions as well for addition we have
10:09 - seen P1 plus P2 which means P1 Dot and
10:12 - then underscore underscore add will be
10:15 - called in which case the parameter will
10:16 - be P2 similarly we can have the
10:18 - subtraction multiplication the power of
10:21 - two objects and then we can have
10:23 - division as well and then we can have
10:25 - low division and many other mathematical
10:27 - operations can be achieved by using the
10:30 - operator overloading just how we have
10:32 - done in this program so guys practice on
10:34 - your own so that on different inputs you
10:36 - get different outputs please make sure
10:38 - that you like this video so that it
10:40 - reaches to more people and subscribe to
10:42 - this channel so that you get the
10:43 - notifications on upcoming videos as well
10:45 - the next video that we are going to talk
10:47 - about is overloading comparison
10:49 - operators in Python Programming so stay
10:52 - tuned