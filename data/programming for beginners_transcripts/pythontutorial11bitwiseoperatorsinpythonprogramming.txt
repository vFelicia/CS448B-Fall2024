00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about bitwise operators in Python
00:05 - Programming so guys The bitwise
00:07 - Operators act on operands as if they
00:10 - were strings of binary digits so they
00:13 - operate a bit by bit hence this is the
00:15 - name that is the bitwise operator so
00:17 - first of all let us understand what are
00:19 - the binary numbers so over here for
00:21 - example as you can see the number one is
00:23 - being represented in the binary form as
00:26 - 0 and 1. now before this the number 0 it
00:29 - will be represented as 0 0 that means
00:31 - the binary form can only have two types
00:34 - of digits that is either 0 or 1 so 0 can
00:37 - be represented as all numbers being 0
00:40 - then 1 can be represented as the
00:42 - rightmost number can become 1 and the
00:44 - left number is 0 over here now for the
00:47 - number 2 what will happen is this number
00:49 - that is 1 over here on the right hand
00:51 - side it will go on the left hand side so
00:53 - this 0 has become 1 over here and this
00:55 - one will become 0 and that is what we
00:57 - can see over here that is 1 0 it is the
01:00 - a binary form of the number that is 2
01:02 - and then the next time this 0 will be
01:04 - converted to 1 so you can see 1 1 as the
01:07 - binary representation of the number 3
01:09 - and so on the other numbers are also
01:11 - being displayed over here in the form of
01:13 - binary representation now guys as the
01:16 - name suggests the bitwise operators
01:17 - operate on these kinds of numbers over
01:20 - here so let's say x it is equal to 10
01:22 - which is an integer over here it will be
01:25 - represented as this number in the binary
01:27 - form and why it is equal to 4 which is
01:30 - represented as this number in the binary
01:32 - form over here it is represented as 1 0
01:35 - 0 as you can see over here and on the
01:38 - left hand side we can prefix any number
01:40 - of zeros that we want so basically what
01:42 - are the different types of bitwise
01:43 - operator as you can see we have end over
01:46 - here so bitwise and what this will do is
01:48 - if we do x and y basically all these
01:51 - digits that is first 0 over here it will
01:54 - be kind of multiplied with the first
01:56 - digit of this number over here so it
01:58 - will be 0 in this case so for first four
02:00 - digits will be 0 because all the digits
02:02 - in both the numbers are 0. now over here
02:04 - this one it will be multiplied by 0 over
02:07 - here and that is why we will get 0 over
02:09 - here in this case and then this 0 will
02:11 - be multiplied by 1 over here so again we
02:14 - will get 0 and since the other two
02:16 - numbers are already 0 over here we will
02:18 - get 0. so this is how the bitwise and
02:20 - operator will work it will simply
02:22 - multiply the binary digits of the number
02:24 - now what happens in the bitwise or it
02:27 - will be the addition of those binary
02:29 - numbers over here so as you can see we
02:31 - have 1 0 1 0 so 1 plus 0 the result will
02:34 - be 1 over here and that is what is being
02:36 - displayed as you can see now 0 plus 1
02:39 - will be again 1 over here then 1 plus 0
02:41 - again it will be 1 over here and the
02:43 - next number that is 0 and 0 it will be 0
02:46 - over here now guys what if 1 is
02:48 - encountered on the left hand side and on
02:50 - the right hand side as well so since
02:51 - binary numbers can only be represented
02:54 - by two digits that is 0 and 1 so 1 plus
02:57 - 1 will be 1 in this case and guys
02:59 - similarly we will say see what will be
03:00 - the result of the other bitwise
03:02 - operators so let us move to the vs code
03:04 - now over here let us say x it is equal
03:07 - to 10 and let's say y it is equal to 4
03:10 - over here and now let us print all the
03:12 - results of the bitwise operations over
03:14 - here so we will simply have the print
03:16 - function and then we will say x and then
03:19 - bitwise and operator followed by y over
03:22 - here similarly we will have other
03:24 - operators that is bitwise or and then we
03:26 - have bitwise not bitwise xor bit wise
03:29 - right shift and then we have left shift
03:31 - so over here I'll simply copy and paste
03:33 - this line of code over here
03:36 - now one by one I will change the
03:38 - operator over here it will be bitwise or
03:40 - so we use this symbol over here and for
03:43 - bitwise not we have to use only one
03:45 - variable over here so we will be using X
03:47 - in this case and this is the bit Y is
03:49 - not over here for bitwise or we use the
03:51 - raise to symbol over here so X raised to
03:54 - Y and then for right shift and left
03:56 - shift we have to use the greater than
03:58 - symbol and then some particular number
04:00 - to Define how many times we want to
04:02 - shift the digit so let's say we want to
04:04 - shift two times over here and then the
04:06 - left shift as well we want to shift two
04:08 - times over here so Guys these are
04:09 - certain bitwise operators as you can see
04:11 - so let me just save this file and try
04:13 - running this code to see the results of
04:15 - all these bitwise operators
04:18 - people so as you can see we are getting
04:20 - the results over here so first of all it
04:22 - is displaying 0 that's because we have
04:24 - seen the result over here which was all
04:26 - zero numbers and that is why we are
04:27 - getting the numerical number as 0 over
04:29 - here in the next case that is bitwise or
04:32 - we are getting this number which is
04:34 - represented as 14 in the decimal form so
04:37 - that is what we are getting that is 14
04:38 - over here now not of X so basically not
04:42 - of X it is minus 11 over here and that
04:44 - is what we are getting that is negative
04:45 - 11 and then X X or Y so over here the
04:49 - result is 14 and that is what we are
04:51 - getting that is 14 over here guys all
04:53 - these results are in decimal format if
04:56 - you try converting these decimal format
04:58 - numbers into binary numbers you will get
05:00 - all these results that are being
05:02 - displayed inside the parenthesis over
05:04 - here the bitwise right shift number so
05:06 - basically we are reducing the number so
05:08 - from 10 the number is being reduced to 2
05:10 - over here as you can see this is the
05:12 - binary format and the same thing is
05:14 - being displayed as the result over here
05:16 - that is 2 and then when we shift on the
05:18 - left hand side side we are increasing
05:19 - the number so basically we are getting
05:21 - the result as 40 from 10 so as you can
05:24 - see This is 40 over here now guys in the
05:26 - right shift what happens is we are
05:28 - prefixing more zeros on the left hand
05:30 - side so basically this one zero will go
05:32 - to the right hand side and only this one
05:34 - zero will remain as you can see over
05:36 - here this 1 0 is remaining whereas when
05:39 - we do left shift after this one zero one
05:41 - zero two more zeros will be appended and
05:43 - that is what we can see over here that
05:45 - is 1 0 and then after this one zero and
05:48 - these two zeros were appended on the
05:50 - right and that is why the number has
05:51 - increased so Guys these bitwise
05:53 - operators are very important when you
05:54 - learn about mathematics and mathematical
05:56 - problems to be solved and as far as
05:58 - competitive programming is concerned
06:00 - many problems can be solved by using
06:02 - these bitwise operators so guys practice
06:04 - on your own so that on different inputs
06:07 - you get the different outputs please
06:08 - make sure that you like this video so
06:10 - that it reaches to more people and
06:12 - subscribe to this channel so that you
06:13 - get the notifications on upcoming videos
06:15 - as well the next video that we are going
06:17 - to talk about is membership operators in
06:19 - Python Programming so stay tuned