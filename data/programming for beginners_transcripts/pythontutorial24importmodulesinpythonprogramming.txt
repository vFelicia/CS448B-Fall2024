00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about modules in Python Programming so
00:06 - guys as our program grows bigger it may
00:09 - contain many lines of code so instead of
00:11 - putting everything in a single file as
00:13 - we have done so far we can use modules
00:16 - to separate codes in separate files as
00:18 - per their functionality so basically we
00:21 - can separate the codes and we can create
00:23 - separate files based on the
00:24 - functionality of the file that we are
00:26 - going to create so this will make our
00:28 - code organized and easier to maintain
00:30 - now a module is a file that contains
00:33 - code to perform a specific task so like
00:36 - let's say if we want to add two numbers
00:38 - we can have a function inside another
00:41 - file and we can call it as a module so a
00:44 - module may contain variables functions
00:46 - classes and many other things so as you
00:48 - can see over here for example there's a
00:50 - python module that is addition what we
00:52 - have done is we have defined the
00:54 - function over here so we have the ad
00:56 - that is the function name which takes
00:58 - two parameters A and B so a plus b which
01:01 - is the sum of these two variables will
01:03 - be stored in the result variable and
01:05 - this result variable is returned with
01:07 - the help of this return statement so
01:09 - guys this is one of the functions which
01:10 - can be present inside one module which
01:12 - is created as a separate file so guys
01:14 - let us check this with the help of
01:15 - example how we can create the module so
01:18 - basically when we go over here in the
01:20 - Explorer as we have seen previously we
01:22 - were using python underscore code file
01:25 - in order to create all our programs but
01:27 - what if we want to create another file
01:29 - and have a function inside that file so
01:31 - we can come over here we can create a
01:33 - new file and let's say we want to name
01:36 - it as addition and Then followed by dot
01:39 - py which is the extension of the Python
01:41 - programming language so as you can see
01:43 - we have created this addition dot py
01:45 - which is another python file over here
01:47 - so what we will do is let's say we have
01:49 - a function over here so Define add which
01:52 - takes two parameters that is a and b and
01:54 - then after colon what we will do is we
01:56 - will have the result variable which will
01:59 - have the addition of these two numbers
02:00 - that is a and b which will be passed
02:02 - over here and then we are going to
02:04 - return this result so return result so
02:08 - basically this function is going to take
02:10 - two values that is in the form of a and
02:12 - b and return the sum of these two values
02:14 - now this code is being written in
02:16 - another file that is addition dot py so
02:18 - how do we call it from the main file
02:20 - that is python underscore code over here
02:22 - so what I will do is first of all we are
02:24 - going to save this file over here and
02:26 - switch back to our main file over here
02:28 - that is python underscore code.py and
02:31 - what I will do is over here we are going
02:33 - to import this module so this python
02:36 - file that we have created right now this
02:38 - is kind of a module so how do we import
02:40 - that module we are going to use the
02:43 - import keyword followed by the name of
02:45 - that module so the name of the module is
02:47 - the file name itself so we are going to
02:50 - provide addition so as you can see vs
02:52 - code is providing us this addition value
02:54 - over here which is part of the
02:55 - autocomplete feature of this editor so
02:57 - we are going to select this now what we
02:59 - can do is we can call this add function
03:01 - since we have already imported this
03:03 - module over here so simply what we will
03:05 - have to do is we are going to use this
03:07 - module name that is addition followed by
03:10 - Dot and then as you can see we have this
03:12 - add method and there will be many other
03:14 - methods that will be present which will
03:16 - come by default whenever we are going to
03:18 - create new python files in this way so
03:20 - basically we are interested in using
03:22 - this add method so when we select this
03:24 - and then we have to provide the two
03:26 - values so what we will do is we will say
03:28 - 10 comma 20. Now guys what is happening
03:31 - is this add function it is going to take
03:33 - two values that we have already passed
03:35 - and it is going to return the result so
03:37 - we are supposed to take that result in
03:39 - another variable over here so let's say
03:41 - we provide some as the variable name
03:43 - which is going to take the return from
03:45 - this add function over here which will
03:46 - be the sum of these two numbers and then
03:48 - we can simply print the value of the sum
03:51 - variable so over here we will say sum of
03:54 - numbers followed by colon and then comma
03:57 - we have the sum variable name so guys
04:00 - let me just save this file now and try
04:01 - running this code
04:03 - so as you can see sum of numbers it is
04:05 - 30 right now so basically what we have
04:07 - done is we have created a module which
04:09 - is the user defined module over here and
04:12 - then we have created a new function
04:13 - inside that module which is going to
04:15 - take two values in the form of a and b
04:17 - and it is going to return the sum of
04:20 - these two values and then what we have
04:22 - done is we have imported that module
04:24 - that is addition and called the function
04:27 - that is the add function which is going
04:28 - to take two values as we had defined in
04:31 - the addition module and the sum will be
04:33 - stored in this sum variable over here
04:34 - and we have printed that some variables
04:36 - so this is the classic example of a user
04:39 - defined module over here guys similarly
04:41 - there are multiple modules which are
04:43 - built in inside the Python programming
04:45 - language so as you can see there are
04:47 - certain important nodes over here python
04:49 - has tons of standard modules so for now
04:51 - we have just seen the user defined
04:53 - module right now we are also going to
04:55 - take the example of a standard module
04:57 - now the standard modules can be imported
04:59 - the same way as we import our user
05:02 - defined modules so let let us take the
05:03 - example of a standard module in this
05:05 - case we will take the example with the
05:07 - math Library module so what we will do
05:09 - is we will remove these lines of code
05:11 - over here and then we can simply import
05:13 - the math Library so as you can see over
05:16 - here once we put the M character as you
05:18 - can see these all are modules that are
05:20 - built in inside the Python programming
05:22 - language we are interested in this math
05:24 - Library over here so when we import math
05:27 - and then we can use the math Library
05:29 - over here and then followed by dot we
05:31 - can see many other functions and
05:33 - variables that are already present the
05:35 - thing that we are interested in is the
05:37 - pi value so as you can see we can get
05:39 - the pi value which is approximately
05:41 - equal to 3.14 and the same thing we can
05:44 - get from the math library and by using
05:46 - the pi variable over here so what we can
05:48 - do is let's say we provide the variable
05:50 - name as value and math dot Pi is the
05:53 - value that we want to store in this
05:55 - value variable and we can simply provide
05:58 - the print statement and then we can say
06:00 - pi value is followed by colon and then
06:04 - we can simply put the value that is the
06:07 - variable name so guys what is exactly
06:09 - happening over here is we are importing
06:11 - the math Library which is the built-in
06:13 - Library over here which is a built-in
06:15 - module inside the Python programming
06:16 - language and then inside that we have
06:19 - certain variables and functions as well
06:21 - one of the variables is pi which is
06:23 - having a value and that value we are
06:25 - getting by using this math dot Pi
06:28 - statement and then we are assigning it
06:30 - to this user defined variable that is
06:32 - value and the same thing we are printing
06:34 - over here with this particular string
06:35 - that is pi value is followed by colon
06:38 - and then the value variable over here
06:40 - let me just save this file and try
06:42 - running this code now so as you can see
06:43 - pi value is we can see this
06:47 - 3.141592 and so on it is a huge number
06:49 - after the decimal point so guys this is
06:51 - another way in order to use the standard
06:54 - modules that are already present in the
06:56 - Python programming language next we are
06:58 - going to see how do we use the python
07:01 - import with renaming so far we you have
07:03 - imported the libraries and used the
07:05 - names of those libraries or modules
07:07 - along with the function name or the
07:09 - variable name but what we can do is we
07:11 - can rename these libraries while
07:13 - importing them so after this import math
07:16 - we have to use the as keyword followed
07:18 - by m so guys this is nothing but it is a
07:21 - shorthand method that we can use in
07:23 - order to name this library right now so
07:25 - instead of typing this math Library over
07:27 - here we can simply use the M character
07:29 - over here because that is what we have
07:31 - defined that is import math as M so we
07:34 - can use M everywhere wherever we are
07:36 - going to use the math so let me just
07:38 - save this file now and try running this
07:39 - code we will see the same output that is
07:41 - pi value is
07:43 - 3.1415 and so on so guys the idea over
07:46 - here is you need not have to type the
07:48 - entire name of the module in this case
07:50 - whenever you are going to refer to a
07:52 - particular method or a function or a
07:55 - variable inside the module but you can
07:57 - use that simple one character or the two
07:59 - characters that you have used while
08:01 - importing the module now guys there is
08:04 - another way python from and then import
08:06 - statement so over here what we can do is
08:08 - let's say if we only want to use the pi
08:10 - variable in this case so exactly what we
08:13 - are doing is we are importing all the
08:15 - methods that is the functions as well as
08:17 - the variables but let's say if we only
08:19 - want the pi variable so what we can
08:21 - simply do is we can use the from and
08:24 - then we can use the module name that is
08:26 - math and then we can simply import the
08:29 - variable so import and pi over here so
08:32 - as you can see we can use this statement
08:34 - as well that is from followed by the
08:36 - module name and then import and then
08:38 - what exactly we want to import we can
08:40 - just mention that and then after this we
08:42 - can simply use the pi variable name in
08:45 - order to assign it to another variable
08:47 - name or over here we can simply put pi
08:49 - as well so we can simply put Pi in the
08:52 - print statement also so let me just save
08:54 - this file and try running this code as
08:56 - you can see we are getting the same
08:57 - output that is pi value is so and so so
09:00 - basically in order to get the specific
09:02 - way variable or the method we can use
09:04 - this statement that is by using the from
09:06 - followed by the module name and then we
09:08 - have the import keyword and then the
09:10 - name of that specific variable or the
09:12 - method now guys one last thing as far as
09:14 - python modules are concerned there is a
09:16 - built-in function that is dir which is
09:19 - directory it is a built-in function in
09:21 - Python in order to get all the variables
09:24 - and the function names inside the module
09:26 - so let's say I provide import math over
09:29 - here so we have import math and then
09:32 - what we can do is we can simply get the
09:34 - directory in this case we simply have to
09:37 - provide the dir function and Then
09:39 - followed by open and close parenthesis
09:41 - and let's say we provide the math
09:42 - Library over here inside the dir
09:44 - function so let me just save this file
09:46 - and try running this code now so guys
09:48 - nothing is happening over here that's
09:50 - because we have not provided the print
09:51 - statement so probably it will provide
09:53 - the print statement and enclose the
09:55 - statement inside the print function let
09:57 - me just save this file and try running
09:58 - this code now as you can see we are
10:00 - getting the list of all the methods and
10:02 - the variable data present inside the
10:04 - math Library so guys this is a very huge
10:07 - list over here as you can see we have a
10:09 - 10 then 8 and 2 a 10 H and then so on we
10:12 - are getting all the method names we are
10:15 - also getting the variables as you can
10:16 - see we are having pi over here and so on
10:18 - guys similarly what we can do is let's
10:20 - say I import this addition module which
10:22 - is a user defined module that we have
10:24 - already seen so I import this addition
10:27 - module and inside of this math I provide
10:30 - this addition module name so let me save
10:33 - this file so one of the methods that is
10:35 - present is ADD over here so this should
10:37 - be listed now so I'll just run this code
10:39 - now over here so as you can see add
10:41 - method is getting displayed apart from
10:43 - there there are many other built-in
10:45 - variable names that are present which
10:47 - gets generated whenever we create a new
10:49 - modules over here so guys this dir
10:51 - function can be very useful in order to
10:54 - check which are the different variables
10:55 - and functions are present inside that
10:58 - module that we have already defined or
11:00 - if it is a built-in module that is
11:02 - provided by the Python programming
11:04 - language so guys so far you have learned
11:05 - a lot about the user defined modules and
11:08 - the built-in modules and how you can use
11:10 - them please make sure that you practice
11:11 - on your own so that on different inputs
11:13 - you get different outputs please make
11:15 - sure that you like this video so that it
11:16 - reaches to more people and subscribe to
11:19 - this channel so that you get the
11:20 - notifications on upcoming videos as well
11:22 - the next video that we are going to talk
11:23 - about is package in Python Programming
11:26 - so stay tuned