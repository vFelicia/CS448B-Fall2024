00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about exception handling with try accept
00:06 - block so guys basically it is important
00:08 - to handle exceptions that we have
00:10 - already seen in Python we use the try
00:13 - accept Block in order to handle the
00:15 - exception and this is the syntax in
00:18 - order to handle the exceptions in Python
00:20 - so basically first of all we have the
00:22 - try keyword followed by the colon and
00:24 - then we have the code that may cause the
00:27 - exception for example we can have a
00:29 - number being divided by 0 in which case
00:32 - 0 division error might occur which is
00:34 - the exception and not only the zero
00:36 - division exception but if any exception
00:38 - that occurs inside this try block we can
00:41 - have the accept block just following
00:43 - this try Block in order to catch that
00:46 - exception so basically inside this
00:48 - accept block we have the code in order
00:50 - to run when the exception occurs so guys
00:53 - this we are going to check with the help
00:54 - of examples now so over here in the vs
00:57 - code what we will do is let's say we
00:59 - want to divide a number by 0 so we want
01:02 - to provide that code inside the try
01:04 - block so we have this try keyword
01:06 - followed by the colon and then over here
01:09 - what we will do is we will say number
01:11 - variable it is equal to 10 divided by 0.
01:15 - so guys if we try to run this code over
01:17 - here 10 divided by 0 for which the zero
01:20 - division error will occur which is one
01:22 - of the exceptions in the Python
01:23 - Programming so what we have to do is we
01:25 - have to catch that exception inside the
01:28 - accept block so over here what we have
01:30 - to do is we have to provide the accept
01:32 - keyword followed by the colon and then
01:35 - we can have the code in order to handle
01:37 - that exceptions over here we can simply
01:39 - provide the print statement and then we
01:41 - can say number cannot be divided by 0
01:47 - over here so guys this is the code that
01:50 - we are going to execute if the number is
01:52 - getting divided by 0 and the zero
01:54 - division error is occurring so let me
01:56 - just save this file now and try running
01:58 - this code so as you can see number
01:59 - cannot be divided by 0 this line of
02:03 - statement is getting executed over here
02:05 - and this is the line that is getting
02:06 - printed now guys what would have
02:08 - happened if we don't have this try and
02:10 - accept a block so let us just comment
02:12 - out these blocks over here so instead of
02:14 - this we are just having number it is
02:16 - equal to 10 divided by 0 and then let me
02:19 - just comment out this line as well so
02:21 - number is equal to 10 divided by 0 only
02:24 - this line of code is there let me just
02:26 - save this file and try running this code
02:28 - as you can see we are getting 0 division
02:30 - error division by 0 and this is the
02:32 - exception that we are getting on the
02:34 - terminal so over here since we have not
02:36 - properly handled this exception this is
02:38 - the way that we are getting the output
02:40 - but we can have the proper output in
02:43 - this way like we can have a particular
02:45 - statement being printed by using this
02:47 - trial accept block so over here we have
02:50 - just provided the try block and after
02:52 - this we have provided the accept block
02:54 - as well we have provided a beautiful
02:56 - statement that is a user-friendly
02:58 - statement which says number cannot be
03:01 - divided by 0 and when we just save this
03:03 - file and try running this code now it
03:05 - says number cannot be divided by 0 if
03:07 - the exception is occurring over here
03:09 - inside the dry block now guys let's say
03:11 - there is no exception occurring inside
03:13 - the try block so still the print
03:15 - statement will be executed let us check
03:17 - that so over here instead of 10 divided
03:20 - by 0 we will say 10 divided by 2 in
03:22 - which case the answer will be 5 and that
03:25 - will be stored in this number variable
03:26 - and there is no exception that is
03:28 - occurring over here on this line of code
03:30 - so let me just save this file now what
03:32 - we will do is as a confirmation we will
03:34 - come out of this try and accept block
03:36 - and over here we will say end of code so
03:40 - we can just confirm that this is the
03:43 - line that is getting executed at the end
03:46 - of the code so over here let me just
03:48 - save this file and try running this code
03:49 - now as you can see end of code is
03:51 - getting displayed now that is because
03:53 - there is no zero division error that is
03:55 - occurring inside the try block that is
03:57 - because we have changed the expression
03:59 - from 10 divided by 0 to 10 divided by 2
04:02 - because there is another thing that you
04:03 - can do catching the specific exceptions
04:06 - in Python so as you can see this is the
04:08 - example over here we have the try block
04:10 - and then let's say we have the variable
04:12 - name as even numbers and this is the
04:14 - python list as you can see we have 2 4 6
04:17 - 8 which is the list of numbers all are
04:19 - even numbers and what we are trying to
04:21 - do is we are going to print the even
04:24 - numbers with the index 5 over here but
04:27 - guys as you can see this is the index 0
04:28 - then we have index 1 then we have index
04:31 - 2 and then three so three is the final
04:33 - index the total length of the list is 4
04:36 - and 3 is the final index that we can
04:38 - access but we are trying to access the
04:40 - index that is 5 so basically we should
04:42 - get the index out of bound error over
04:45 - here but we can also specify the
04:47 - different exceptions that we have seen
04:49 - so far so basically while providing the
04:52 - accept keyword we can provide the zero
04:54 - division error over here which will say
04:57 - denominator cannot be zero and then we
04:59 - also have the accept keyword followed by
05:01 - the index error so in this case since we
05:04 - are having the multiple accept logs it
05:06 - depends on the control flow the control
05:08 - flow will check that which type of
05:10 - exception is occurring and based on that
05:13 - exception it will try to match that
05:15 - exception is this exception related to
05:17 - zero division error no in this case so
05:19 - is it matching with the index error yes
05:22 - since it is related to the index that we
05:24 - are trying to access which is not
05:26 - possible so it will print this statement
05:28 - that is index out of bound so let us
05:30 - check this block of code over here I
05:32 - just copy this and paste this in the vs
05:35 - code since I am little bit lazy in order
05:36 - to type all this code once again so over
05:39 - here let me just save this file and try
05:40 - running this code now as you can see it
05:42 - says index out of bound that's because
05:45 - the exception that is matching inside
05:47 - this try block is the index error and
05:50 - this is the print statement that we are
05:52 - supposed to print if there is an index
05:54 - error that is occurring now guys let's
05:56 - say you want to print this denominator
05:58 - cannot be zero statement so what we have
06:01 - to do is we have to make sure that
06:03 - inside the dry block there is a divided
06:05 - by zero expression so what we will do is
06:07 - over here I'll just remove these lines
06:09 - of code and we will simply say number it
06:12 - is equal to 10 divided by 0. so in this
06:15 - case divide by 0 expression is occurring
06:17 - and that is why we will get the zero
06:19 - division error and in this case we
06:21 - should get this statement that is
06:22 - denominator cannot be zero so let me
06:24 - just save this file now and try running
06:26 - this code as you can see denominator
06:28 - cannot be zero statement is getting
06:30 - printed so guys it depends on you you
06:32 - can have the specific exceptions being
06:35 - specified over here and each exception
06:37 - will be handled differently this is just
06:40 - a print statement that we have included
06:42 - over here you can have any code inside
06:44 - these except blocks that you want to use
06:46 - based on your requirements of the
06:48 - project but guys remember that whatever
06:50 - matching exceptions that is occurring
06:52 - inside the dry block the control flow
06:54 - will try to match with those exceptions
06:56 - one at a time and once it matches with a
06:59 - particular acceptable block it will try
07:01 - to execute those lines of code inside
07:03 - that block now guys let us move to
07:05 - another task over here python try with
07:07 - as Clause so basically in some
07:09 - situations we might want to run a
07:11 - certain block of code if the code block
07:13 - inside try runs without any errors so
07:16 - for these cases you can use the optional
07:19 - else keyword with the try statement so
07:21 - guys what happens is sometimes there
07:23 - will be no errors that are occurring
07:24 - over here I'll just remove these lines
07:26 - of code so I'll just keep one accept
07:28 - block over here and I'll just remove
07:30 - this exception as well that is zero
07:32 - division error so what we are doing over
07:35 - here is denominator cannot be 0 I'll
07:37 - just save this file and try running this
07:39 - code so this denominator cannot be 0 is
07:41 - getting printed over here but guys what
07:43 - if this denominator is not 0 let's say
07:46 - if I provide the denominator as 2 so in
07:48 - this case this statement will not get
07:50 - printed that's because there is no
07:52 - exception that is occurring and if there
07:54 - is no exception occurring no code in the
07:57 - accept block over here will get executed
08:00 - but what if we want to execute some line
08:02 - of code so over here we can simply
08:04 - provide the else part so basically what
08:07 - happens is let's say inside the try
08:09 - block if we don't have any exception
08:11 - that is occurring so no block of code
08:13 - that is inside the accept block will get
08:16 - executed but let's say in the end if we
08:18 - have this else clock so whatever code we
08:21 - provide over here it will get executed
08:23 - only when there is no exception that is
08:25 - occurring over here inside the dry block
08:27 - so over here what we will do is we will
08:29 - say print we will simply say inside else
08:33 - block so guys this is the code let me
08:35 - just save this file now and try running
08:37 - this code as you can see there is no
08:39 - denominator cannot be 0 that is getting
08:41 - printed but over here we are getting
08:43 - inside else block that's because since
08:46 - there is no exception that is occurring
08:47 - the control flow is not going inside the
08:50 - accept block but it says that we have
08:52 - the else block over here so it executes
08:54 - those lines of code inside the else
08:56 - block now guys what if there is an
08:58 - exception that is occurring so I let's
09:00 - say if we provide this as 10 divided by
09:03 - 0 as the expression so let me just save
09:05 - this file now this line should get
09:07 - printed over here but whether this else
09:09 - part will get executed let us check that
09:11 - so let me just run this code once again
09:13 - as you can see denominator cannot be 0
09:15 - is getting printed but the code in the
09:18 - else part is not getting printed so
09:20 - that's because since the exception has
09:21 - occurred we are getting into the accept
09:24 - block but not into the else block so
09:26 - guys this is very important in case the
09:28 - accept block is not getting executed we
09:31 - can have the else Block in order to
09:33 - execute some lines of code that you want
09:35 - to execute now let us move to another
09:37 - task over here we have something called
09:39 - as python try finally so guys this is
09:41 - another important concept as far as
09:43 - exception handling in Python is
09:45 - concerned so basically in Python the
09:47 - finally block is always executed no
09:50 - matter whether there is an exception or
09:52 - not so the finally block is optional and
09:55 - for each try block there can be only one
09:58 - finally block so guys what you will do
10:00 - is basically the understanding behind
10:02 - the finally block is irrespective of
10:04 - whether there is an exception that is
10:06 - occurring or not the code in the finally
10:08 - block will be executed so over here we
10:11 - will simply have the finally keyword
10:13 - followed by the colon and then we will
10:15 - say inside finally block so over here we
10:19 - will simply have double quotes and
10:21 - inside this we will say inside finally
10:24 - blocked
10:26 - so guys first of all we will check when
10:28 - there is an exception that is occurring
10:29 - this line of code will get printed and
10:31 - we will not go inside the else part but
10:34 - the control flow will go inside this
10:35 - finally block over here so let me save
10:37 - this file now and try running this code
10:39 - so as you can see denominator cannot be
10:41 - 0 which is this line of statement which
10:43 - is getting printed and then it is not
10:45 - going in the else part but it is going
10:47 - in the finally part so it says inside
10:49 - finally block so over here exception has
10:52 - occurred and the control flow is going
10:54 - in the finally block now let us say
10:56 - there is no exception that is occurring
10:58 - we say 10 divided by 5 over here so let
11:00 - me just save this file now and try
11:02 - running this code it says inside else
11:05 - block so basically there is no exception
11:07 - that is occurring so the control flow is
11:09 - not going inside this accept block but
11:12 - it is going inside the else blocks over
11:14 - here as I have told you if the control
11:16 - flow doesn't go inside the accept block
11:18 - and if there is a else block basically
11:20 - this line of code will get executed and
11:23 - then at the end we have the final block
11:25 - which is getting executed as you can see
11:27 - inside finally block so irrespective
11:30 - whether there is an exception that is
11:32 - occurring or not inside the dry block
11:34 - the finally block will be executed every
11:37 - time now guys where this thing is
11:39 - important basically let's say if you
11:40 - have the database connection or if you
11:43 - have file opened so you can close that
11:45 - file or close that database connection
11:47 - inside the finally block over here after
11:50 - carrying out your operations in the dry
11:52 - block which might have certain
11:53 - exceptions that might occur during the
11:55 - run time so guys during such instances
11:57 - the finally block becomes very important
12:00 - in order to execute those lines of code
12:02 - irrespective whether there was an
12:05 - exception that has occurred inside the
12:07 - dry block or not so guys practice on
12:09 - your own so that on different inputs you
12:11 - get different outputs please make sure
12:13 - that you like this video so that it
12:14 - reaches to more people and subscribe to
12:16 - this channel so that you get the
12:17 - notifications on upcoming videos as well
12:19 - the next video that we are going to talk
12:21 - about is custom exceptions in Python
12:24 - Programming so stay tuned and