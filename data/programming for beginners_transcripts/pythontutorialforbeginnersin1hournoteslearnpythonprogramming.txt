00:00 - in the next few hours we are going to
00:01 - learn a lot about the Python programming
00:03 - language with the help of the examples
00:06 - and python programs as well while you're
00:08 - watching this video please make sure
00:10 - that you pause this video and practice
00:12 - on your own so that on different inputs
00:14 - you get different output and that is how
00:16 - you are going to learn about the Python
00:18 - programming language you can also watch
00:20 - my other Python tutorial and Python
00:22 - program videos which are available for
00:24 - free on YouTube the link to those
00:26 - playlist I have given in the description
00:28 - section below and we are going to cover
00:30 - all the basics about the Python
00:32 - programming language so let's get
00:34 - started Python tutorial for beginners so
00:36 - if you're completely new to programming
00:38 - languages and want to start with the
00:40 - Python programming language then this
00:42 - video series is for you and it doesn't
00:44 - matter even if you have learned the
00:46 - other programming languages such as Java
00:48 - C C++ and if you're going to learn the
00:51 - Python language for the first time you
00:53 - can watch these video so that we can get
00:55 - started from the completely beginner
00:57 - level and we reach up to the
00:58 - intermediate and expert level as we go
01:01 - through the different concepts of the
01:02 - Python programming language so guys
01:04 - first of all we are going to check the
01:06 - environment setup using the Python
01:08 - language and we are going to use the VSS
01:10 - code as the editor now over here vs
01:12 - stands for visual studio and we are
01:14 - going to use the visual studio code
01:16 - editor in order to write our python
01:18 - programs apart from this vs code setup
01:21 - we are also going to see how do we write
01:23 - the first python code and execute it so
01:26 - guys basically I have written down the
01:27 - steps to install the vs code editor and
01:30 - python interpreter over here so first of
01:32 - all we are going to install VSS code
01:34 - using this link that I have already
01:36 - provided in the description section so
01:38 - when you hit this URL in the browser
01:40 - this is the page that is going to open
01:42 - from where you can easily download the
01:44 - visual studio code it depends on your
01:46 - operating system which installer you
01:48 - want to download you can also download
01:50 - for Windows Mac OS and Linux systems
01:53 - over here so it depends on your
01:54 - operating system once you have
01:56 - downloaded this and installed the vs
01:58 - code on your machine machine the next
02:00 - step is to install python extension in
02:03 - VSS code so guys once you have installed
02:05 - the visual studio code this is the get
02:07 - started page that you will see in the
02:09 - visual studio code ID so over here first
02:12 - of all you are supposed to install the
02:14 - python extension so on the left hand
02:16 - side as you can see there is an
02:18 - extensions button over here on which you
02:20 - can click and then this particular
02:22 - section will open so over here in the
02:24 - search bar you are supposed to type
02:25 - python so once you type python there
02:28 - will be list of extensions that will be
02:30 - available for you so guys this is the
02:32 - extension that you have to install over
02:34 - here so as you can see python
02:36 - intellisense file lens and this is a
02:38 - description that you can see on the
02:40 - right hand side so since I have already
02:42 - installed this python extension on this
02:44 - Visual Studio code I am getting this
02:46 - uninstall button but you will be getting
02:48 - the install button over here if you have
02:50 - not already installed this particular
02:52 - extension guys this python extension
02:54 - helps us in order to write the python
02:56 - programs very efficiently it allows us
02:59 - to have the code completion feature
03:01 - along with this we can also run the
03:03 - python code and have the output from
03:06 - within the visual studio code itself so
03:08 - guys it is very important extension if
03:10 - you're are going to Learn Python and
03:11 - want to write the python programs now
03:13 - guys coming to the next step we have to
03:15 - install the python interpretor using
03:18 - this link that I have already provided
03:19 - in the description so once you open this
03:22 - URL in the browser over here this is the
03:24 - page that will open for you and this is
03:26 - the official website of the Python
03:28 - programming language from where you can
03:30 - download the latest version for Windows
03:33 - over here since my machine is Windows I
03:35 - will be downloading this Python and the
03:37 - latest version is
03:39 - 3.11.1 it might so happen that you are
03:41 - watching this video in the future for
03:43 - which the latest version might be
03:45 - something else so you can download the
03:46 - latest version of the Python interpretor
03:48 - from here apart from this you can also
03:50 - get the links to the installer if you're
03:52 - using some other operating system over
03:54 - here so guys once you have installed
03:56 - python on your machine you can quickly
03:58 - open command prompt so over here in the
04:00 - command prompt you can simply type py
04:03 - followed by double hyphen characters and
04:06 - then you provide version and then when
04:08 - you press enter as you can see python
04:12 - 3.11.1 this is the version of python
04:14 - that is already installed on my machine
04:16 - you might have some separate version but
04:18 - the command will be same in order to
04:19 - check whether the python is successfully
04:22 - installed on your machine now guys after
04:24 - successful installation what you have to
04:26 - do is the last step is to connect this
04:28 - python interpreter in vs code so we
04:30 - select the python interpreter in VSS
04:32 - code so over here you have to come on
04:35 - the settings on the bottom left and then
04:38 - over here you can see the command pallet
04:40 - you can also have the shortcut key as
04:42 - Control Plus shift plus P if you're
04:44 - using the keyboard keys and then when
04:46 - you click on this on the search bar you
04:48 - have to type Python and then colon and
04:50 - then we have select interpreter so as
04:52 - you can see this is the option and when
04:54 - you click on this as you can see this
04:56 - python 3.1.1 is getting displayed over
04:59 - over here which you are supposed to
05:00 - select in order to select the python
05:03 - interpretor now guys what we are doing
05:05 - over here is we are connecting this
05:07 - python interpretor with this Visual
05:09 - Studio code so that whenever we write
05:11 - the python code our program gets
05:13 - executed successfully on the vs code
05:16 - itself now guys it might so happen that
05:18 - you don't get this option that's because
05:20 - you have installed python after
05:22 - installing vs code so you can simply
05:24 - restart this vs code in order to get
05:27 - this option over here and once you
05:28 - select thist option you are ready in
05:31 - order to write the python programs in
05:33 - the vs code IDE so guys just by using
05:36 - these four steps of installation you can
05:38 - quickly get started in order to write
05:40 - the python programs in the vs code and
05:42 - all the steps have been documented in
05:44 - this official documentation of the
05:46 - visual Studio website so you can check
05:48 - the content of this documentation as
05:50 - well the link I have given in the
05:51 - description already now guys we are
05:53 - going to write the first code in Python
05:55 - so what we are going to do is we are
05:57 - just going to close these tabs over over
05:59 - here and we are going to open this
06:01 - Explorer over here it is saying no
06:03 - folder opened initially so what you can
06:05 - do is you can create the folder
06:07 - initially in order to organize all your
06:10 - python programs so basically I'm going
06:12 - to just create a new folder over here
06:14 - and I'm going to say python so this is
06:17 - the name of the folder and then I'll
06:19 - select this folder over here so as you
06:21 - can see a new folder that is python has
06:23 - been created now you can write python
06:25 - programs inside this python folder you
06:27 - can have any other folder in any of the
06:30 - directories it depends on you where you
06:32 - want to store the python codes that you
06:34 - will be writing from now on so what we
06:36 - will be doing is as you can see this is
06:38 - the icon it says new file so we will be
06:40 - clicking on this new file and let's say
06:42 - I provide the name of the Python program
06:45 - as python followed by underscore and
06:47 - then we have code followed by dot we
06:50 - have py so guys this is very important
06:52 - that after typing the name of the file
06:55 - we have to append it with py this is the
06:58 - extension of the pyth Python program and
07:00 - this extension will help the vs code in
07:02 - order to interpret that this is the
07:04 - python code and it should execute this
07:07 - code using the python interpretor so
07:09 - guys I'm going to press enter over here
07:11 - and once we press enter this python
07:13 - code. py it is going to open
07:15 - automatically over here now simply we
07:17 - can print some content in our Python
07:19 - program as the first code in Python so
07:21 - over here we have something called as
07:23 - print statement as you can see once we
07:25 - type print it is auto suggesting us what
07:27 - are the different keywords that we can
07:28 - use so so when we press enter over here
07:31 - this print gets selected automatically
07:33 - now inside the open and close
07:35 - parenthesis what we are supposed to do
07:37 - is we can type one particular statement
07:39 - that is the name of the YouTube channel
07:41 - that is programming for beginners which
07:44 - you should definitely subscribe so this
07:46 - is a string that is a statement that we
07:48 - have given over here and this is the
07:50 - very simple Python program that we can
07:52 - write and what this will do is it will
07:54 - simply print this content that is
07:56 - programming for beginners on the console
07:58 - so guys over here you have to come on
08:00 - file and then you can click on save or
08:02 - else you can use the control+ S on the
08:05 - keyboard in order to save the file which
08:07 - I'm going to do in the upcoming videos
08:09 - as well so first of all you save this
08:11 - file and simply you have to come on this
08:13 - top right corner over here you can see
08:15 - this run python file button over here so
08:17 - when you click on this run python file
08:20 - the terminal will open and it will
08:22 - execute this file that is python code.
08:24 - py that we have simply created over here
08:27 - and as you can see programming for
08:28 - beginners string is getting printed so
08:30 - guys in this way we have return the very
08:32 - first code in the python and using the
08:34 - print statement we have printed the
08:36 - programming for beginners we can print
08:39 - any other statement over here as well so
08:41 - let's say I'll provide this as a
08:44 - statement and then when we save this
08:46 - file and try running this code once
08:48 - again as you can see this is a statement
08:50 - is getting printed over here on the
08:52 - terminal so guys this is the way we can
08:53 - easily set up our python interpreter
08:56 - along with the editor that is Visual
08:58 - Studio code you you can use any other
09:00 - editor that you want such as you can
09:02 - simply use the notepad file as well but
09:04 - you will not get such strong features
09:06 - which are provided by the visual studio
09:08 - code in the notepad file apart from that
09:10 - you can also use notepad++ or we have a
09:13 - very popular ID that is py charm and
09:16 - apart from that we have many other
09:17 - editors that you can use but vs code is
09:20 - one of the lightweight editors that you
09:22 - can use when you are writing the python
09:24 - programs python data types in which
09:27 - numeric string list
09:29 - set are included so Guys these are the
09:31 - different data types that we can see in
09:34 - this video and the upcoming videos as
09:35 - well so basically in computer
09:37 - programming data type specify the type
09:39 - of data that can be stored inside a
09:42 - variable so for example number it is
09:44 - equal to 24 so 24 value belongs to the
09:48 - numeric data type and this is the
09:50 - integer value inside the numeric data
09:52 - type we have many other data types such
09:54 - as integer value then we have float
09:56 - value as well in which there is a
09:58 - decimal point we have a complex value as
10:00 - well in which as you can see this
10:02 - expression that is 1 + 2 J this is a
10:04 - complex expression so all these are
10:06 - having numeric data types over here so
10:09 - number over here is a numeric data type
10:11 - or the integer as you can see 24 is the
10:14 - value if it was 24.5 then we would say
10:17 - that number variable is of float data
10:19 - type so guys let us check this with the
10:21 - help of example what we can do is we can
10:23 - simply copy these lines of code over
10:25 - here I'll copy this and we'll paste this
10:28 - over here now what we will do is this
10:29 - constant. py that we had created
10:32 - previously I'll just remove from our
10:34 - python folder over here since it is no
10:36 - longer needed and we will simply keep
10:38 - python code. py where we are going to
10:41 - write all the programs over here so guys
10:43 - over here I'll simply replace the
10:46 - content of this file by this content
10:48 - I'll save this file and over here in the
10:50 - terminal I'll simply clear the screen so
10:52 - as you can see num one it is defined as
10:54 - five which is the integer that is being
10:56 - assigned to num one so the data type
10:58 - over over here will be the integer data
11:00 - type and using this print statement what
11:02 - we are doing is we are using this num
11:04 - one and then followed by comma is of
11:07 - type which means num one will be printed
11:10 - that is five will be printed and then we
11:12 - will have is of type string being
11:14 - printed and then type this is another
11:17 - method that is being used in order to
11:19 - get the type of a variable so as you can
11:21 - see this is the syntax that first we
11:23 - provide type and Then followed by open
11:25 - and close parenthesis and over here
11:27 - inside this we have num one that is the
11:30 - variable name guys similarly we have
11:32 - provided num 2 as 2.0 and the same thing
11:34 - we are doing that is we are finding the
11:36 - type over here and then in the num three
11:38 - as well we are getting the type of this
11:40 - num three variable let me just save this
11:43 - file enter are running this code now so
11:45 - as you can see five is of type class in
11:48 - so this is of the integer data type 2.0
11:51 - since it is having the decimal over here
11:54 - it is saying it is of type float over
11:56 - here and 1 + 2 J it is of type type
11:59 - complex over here so these are all
12:01 - numeric data types and inside the
12:03 - numeric data types these are described
12:05 - as integer float and complex values now
12:08 - apart from this guys we have other data
12:10 - types as well such as string that we had
12:11 - seen previously we have list as well tle
12:14 - and set so guys let us check this one at
12:16 - a time so over here what we will do is
12:19 - simply I'll provide Str Str and then I
12:21 - provide the Str Str value as programming
12:24 - for beginners so what we will do over
12:28 - here is we want to find the type of this
12:30 - Str Str variable so what we can do is we
12:33 - can simply have the print statement
12:35 - followed by open and close parenthesis
12:37 - and we can simply have the type function
12:40 - so guys as you can see type is being
12:41 - Auto suggested over here we will select
12:43 - this and inside the open and close
12:45 - parenthesis we will use this variable so
12:48 - I'll just copy this and paste this over
12:49 - here that is St Str and then when we
12:51 - save this file and try running this code
12:53 - now as you can see class that is St Str
12:56 - is getting printed over here we can also
12:58 - have have some string value over here
13:00 - that is first of all we are going to
13:02 - type Str Str that is the value of this
13:04 - Str Str and Then followed by comma and
13:07 - then we can simply have is of type
13:11 - inside the single codes over here guys
13:13 - it is very important that whenever you
13:15 - want to type certain characters we
13:17 - should either have it inside the single
13:19 - codes or double codes as we have seen
13:21 - over here and then when we save this
13:23 - file ENT I running this code it will
13:25 - show us the data type of this string
13:27 - with the more sensible statements so as
13:29 - you can see programming for beginners
13:31 - this is the string value that we have
13:32 - given and then is of type now this is of
13:35 - type we have provided over here and then
13:38 - this type function that is St Str it is
13:40 - returning the type of this Str Str
13:42 - variable which is class St Str over here
13:45 - so this is a string data type now guys
13:47 - this Str Str over here it stands for
13:49 - string and not the name of this variable
13:52 - if I provide here something else then it
13:54 - will be more sensible so let's say if I
13:56 - provide statement over here as the name
13:58 - I'll copy copy this and paste this over
14:00 - here and when we run this code once
14:02 - again so as you can see it says class s
14:04 - Str is of type class s Str so since we
14:07 - have not replaced this Str Str with the
14:09 - statement that is why we are not getting
14:10 - it properly I'll run this code once
14:13 - again now so as you can see programming
14:14 - for beginners which is the value of this
14:16 - statement variable over here and then is
14:19 - of type and then we have class St Str
14:21 - over here now apart from this we have
14:23 - other data types as well such as list
14:25 - which can be defined as the square
14:27 - brackets so what we have to do is let's
14:29 - say I provide list one as the name of
14:31 - the variable and then equal to now guys
14:34 - list is nothing but it is a data type
14:36 - that have collection of elements so over
14:39 - here let's say we have collection of
14:40 - strings so let's say we have collection
14:43 - of fruits over here so the first root is
14:45 - Apple followed by comma and then again
14:48 - we have double quotes and then we have
14:50 - mango so all the elements are being
14:52 - separated using the comma over here as
14:54 - you can see and then let's say we have
14:56 - banana over here as the third fruit so
14:59 - what we can do is we can simply have
15:01 - print statement over here and then we
15:04 - can have type of this list one so I'll
15:07 - say list one over here when we save this
15:10 - file and TR running this code now as you
15:12 - can see class list is getting printed so
15:14 - this is of data type that is list over
15:16 - here similarly we have tle and set as
15:19 - well which we are going to see in the
15:20 - upcoming videos what are the different
15:22 - contents of these data types and how do
15:24 - we use them and when do we use them so
15:26 - guys for now you just need to remember
15:28 - that whatever value that we provide to a
15:30 - particular variable automatically that
15:33 - data type will be assigned to that
15:34 - particular variable basic input and
15:37 - output in Python Programming so guys in
15:39 - this tutorial we will learn simple ways
15:41 - to display output to the users and take
15:44 - input from users in Python with the help
15:46 - of examples now guys as we have seen
15:48 - previously in Python we can simply use
15:51 - the print function to print the output
15:53 - so let us check this with the help of
15:55 - example over here so I simply want to
15:57 - print a statement so let's say I want to
15:59 - print programming for beginners that is
16:02 - the name of this YouTube channel which
16:04 - you should definitely subscribe if you
16:06 - have not subscribed it yet so once we
16:08 - provide the string inside the double
16:10 - codes we can simply save this file and
16:12 - try running this code now so on the
16:14 - terminal we will be able to see the
16:16 - string getting printed that is
16:18 - programming for beginners I have missed
16:20 - out an O character over here so this is
16:22 - the correct string so programming for
16:24 - beginners is the string that we want to
16:25 - print and that is what we have got over
16:27 - here in the ter teral now guys even with
16:29 - this print function over here this is a
16:31 - function and it takes certain parameters
16:34 - so parameters are nothing but certain
16:36 - values that you can provide to the
16:37 - function so as you can see the actual
16:39 - syntax of the print function accepts
16:42 - five parameters so basically we have
16:44 - only provided one parameter over here
16:46 - this can be treated as a parameter that
16:48 - is the value that we want to print now
16:50 - apart from this we also have other
16:52 - parameters as well so object is the
16:54 - parameter which is nothing but the value
16:56 - to be printed apart from that we have
16:59 - separator then we have end parameter
17:01 - file and then flush parameter so these
17:03 - are the five parameters and these are
17:05 - the descriptions of each and every
17:07 - parameter so over here the separator
17:09 - which is an optional parameter since we
17:11 - have not provided any separator over
17:13 - here it allows us to separate multiple
17:16 - objects inside print so let's say after
17:19 - this string I want to provide another
17:21 - number over here so let's say 1 2 3 4 is
17:23 - the number that I want to provide now I
17:25 - want these objects that is one is
17:27 - programming for which is a string and
17:29 - another object that is a number to be
17:31 - separated using commas so what we will
17:34 - do is after providing comma we will use
17:36 - the SCP that is another parameter as you
17:39 - can see vs code is providing us the
17:41 - autoc completion feature over here so we
17:43 - just need to select that and then we
17:45 - need to provide single codes and inside
17:48 - this we provide comma followed by the
17:50 - space character so guys what will happen
17:52 - is all the objects will be separated by
17:55 - using this comma and the space character
17:57 - over here it depends on on your
17:58 - requirement how many objects you want to
18:00 - provide inside this print statement so
18:02 - let me just save this file and try
18:04 - running this code now so as you can see
18:06 - programming for beginners and then we
18:08 - have this comma followed by the space
18:10 - character and then we have this 1 2 3 4
18:12 - object being printed over here we can
18:14 - have another object so let's say I
18:16 - provide another string that is another
18:19 - statement over here so let me just save
18:21 - this file enter I running this code now
18:23 - so we are getting an error invalid
18:25 - syntax perhaps you forgot a comma so
18:27 - basically after providing each and every
18:29 - object we have to separate it using the
18:31 - comma over here and then let me save
18:33 - this file and try running this code now
18:35 - so as you can see programming for
18:37 - beginners followed by comma and then we
18:38 - have space characters and then we have 1
18:40 - 2 3 4 again we have comma and then space
18:43 - character and then we have another
18:44 - statement so guys in this way we can use
18:46 - the separator parameter as well in order
18:49 - to separate the different objects inside
18:51 - the print function now going to next
18:53 - parameter which is end over here which
18:55 - is again optional by default it is the
18:57 - SL and character in which case the
18:59 - control flow goes to the next line
19:01 - Whenever there is another object that is
19:03 - getting printed over here so as you can
19:05 - see it allows us to add specific values
19:08 - like new line or tab character so guys
19:10 - let's say we have this print function
19:12 - over here I'll just remove this part of
19:14 - the line over here and let's say I have
19:16 - another print function in which case I
19:18 - am providing another statement so let's
19:20 - say we have another statement over here
19:24 - so guys what will happen is by default
19:26 - this end parameter is having the Slash
19:28 - character which means the control flow
19:30 - should go to the new line Whenever there
19:32 - is a next print statement that is
19:34 - encountered so let me just save this
19:36 - file ENT running this code now so as you
19:38 - can see programming for beginner string
19:39 - is getting printed in first line and on
19:42 - the second line another statement is
19:43 - getting printed now what if we want both
19:46 - these statements to be printed on the
19:48 - same line but they are present in the
19:50 - different print function so what we will
19:52 - have to do is in the first print
19:54 - function I will provide a comma over
19:56 - here and then we have the end end
19:58 - parameter so as you can see this end
20:00 - parameter we have to select and then
20:02 - inside the double codes I'll simply
20:04 - provide the full stop followed by the
20:06 - space character so guys what is
20:08 - happening over here is after the string
20:10 - is getting printed at the end of the
20:12 - line we are providing this full stop and
20:14 - then followed by the space character and
20:16 - then whenever there is a next string
20:18 - that is encountered by the control flow
20:20 - it will get printed on this same line so
20:22 - let me just save this file and try
20:24 - running this code now so as you can see
20:26 - programming for beginners and then we
20:28 - have a full stop and then we have the
20:30 - space character as well and then we have
20:32 - another statement that is getting
20:33 - printed so guys we can also use this end
20:36 - parameter if we want multiple print
20:38 - functions to be used but all the objects
20:41 - need to be printed on the same line the
20:43 - other two parameters are file which is
20:45 - again optional where the values are
20:47 - printed so basically by default the
20:49 - values are printed on the screen and
20:51 - that is why it's default value is
20:53 - system. STD out which means it should
20:56 - print on the screen you can also Al
20:58 - provide some file path over here so that
21:00 - the content can be return in the file
21:02 - apart from that we also have the flush
21:04 - which is again an optional parameter it
21:06 - is a Boolean specifying if the output is
21:08 - flushed or buffered so by default it is
21:11 - having the false value so Guys these two
21:13 - parameters you can practice on your own
21:14 - as a homework for you apart from that
21:17 - guys it is very important that how do
21:19 - you take input from the user in Python
21:21 - Programming so basically while
21:23 - programming we might want to take the
21:25 - input from the user in Python we can use
21:28 - the input function so as you can see we
21:31 - have a variable over here or we can say
21:33 - identifier it is equal to we have used
21:35 - the input function so guys this input
21:38 - function it will take a parameter which
21:40 - will be kind of a label which will be
21:42 - printed on the screen for the user as a
21:44 - instruction so we are asking the user to
21:47 - enter a number and the number that will
21:49 - be entered by the user will be stored in
21:51 - this numb variable over here so guys let
21:54 - us check this with the help of example
21:55 - now I'll just remove these lines of code
21:58 - so what we have to do is let's say we
21:59 - provide the number variable it is equal
22:02 - to we have to use the input function as
22:04 - you can see this is the function that is
22:06 - being suggested by the vs code over here
22:08 - and then using the open and close
22:10 - parenthesis inside this we have to
22:12 - provide a string inside the double codes
22:15 - so we can simply provide enter a number
22:18 - now this is a instruction to the user to
22:20 - enter the number now guys what we can do
22:22 - is we can print this number now we can
22:25 - easily print this by using a string so
22:27 - let's say we provide the string over
22:28 - here that is
22:30 - entered number is and Then followed by
22:33 - colon and then after this object we have
22:35 - to provide a comma and then we can
22:37 - provide the number variable to be
22:39 - printed so we have provided the number
22:41 - variable over here let me just save this
22:43 - file enter I running this code now so as
22:45 - you can see it is asking the user over
22:47 - here to enter a number so what I will
22:49 - provide is simply I will provide 10 as
22:51 - the number and then when I press enter
22:54 - as you can see entered number is 10 so
22:57 - this this string is getting printed
22:59 - along with the number that is being
23:00 - entered by the user now guys it is very
23:03 - important to note that whenever we are
23:05 - using this input function the input that
23:07 - is taken by the user will be of the type
23:10 - string over here so if we print the type
23:12 - of this number variable over here let me
23:14 - just do that so we simply provide data
23:17 - type of number colon and then what we
23:21 - have to do is after comma we have to use
23:24 - the type function and inside this
23:26 - function we have to provide the number
23:28 - variable let me just save this file and
23:29 - try running this code now enter a number
23:32 - so let's say I provide 10 as the number
23:34 - as you can see enter number is 10 and
23:36 - after this data type of number it is
23:39 - class string so this is of string data
23:42 - type so whatever input is being taken
23:44 - from the user it will be stored as a
23:46 - string so what we have to do is we have
23:48 - to convert it into a number now since
23:51 - this is a string we cannot add another
23:53 - number to this particular number so
23:54 - let's say if we try to add some another
23:56 - number over here so so we simply do
23:58 - number + 5 over here let me just save
24:01 - this file enter I running this code now
24:03 - so when we provide 10 as the number when
24:06 - I press enter as you can see it says can
24:08 - only concatenate string not end that's
24:11 - because we are trying to concatenate a
24:13 - string with a number over here that is
24:16 - the integer so what we have to do is we
24:18 - have to convert this input into an
24:20 - integer so we can simply provide int
24:23 - over here and then the entire input
24:26 - function needs to be enclosed Within the
24:28 - open and close parenthesis so guys this
24:30 - we had seen previously as well this is
24:31 - the explicit type conversion over here
24:34 - which is the manual type conversion in
24:36 - which we are converting the string data
24:38 - type to the integer data type and now we
24:40 - will have the integer over here which
24:42 - can simply be added with another integer
24:44 - so let me just save this file and try
24:46 - running this code now so as you can see
24:48 - enter a number this time let's say I
24:50 - provide 15 as the number and then when I
24:53 - press enter as you can see entered
24:55 - number is so what is happening is this
24:57 - number that is 15 was taken and then
25:00 - five was added to this number and that
25:02 - is why 15 + 5 is 20 and this number is
25:04 - getting printed over here and you can
25:06 - see this data type of number now it is
25:09 - of the type integer that's because we
25:11 - have used the type conversion over here
25:13 - so guys this is the way you can take
25:14 - input from the user make sure that
25:16 - whenever you're using the input function
25:19 - the data that is being entered by the
25:21 - user is of the type string and you need
25:23 - to convert it into the appropriate data
25:25 - type before you can use the other
25:27 - operators arithmetic operators in Python
25:30 - Programming so guys arithmetic operators
25:32 - are used to perform mathematical
25:35 - operations like addition subtraction
25:37 - multiplication and many other operations
25:40 - which can be done using the integers or
25:42 - the numbers in Python so guys for
25:44 - example let's say we provide the print
25:46 - function over here and inside this
25:48 - function we provide 5 + 6 as the
25:50 - parameter so what will happen is the
25:52 - plus operator is being used over here in
25:54 - order to add these two numbers that is
25:57 - five and six and the result that is 11
25:59 - will be printed so let us quickly check
26:01 - this with the help of example over here
26:03 - so what we will do is we will use the
26:05 - print function and inside this
26:07 - parenthesis we will simply provide 5 + 6
26:10 - over here and when we just save this
26:12 - file and try running this code now so as
26:14 - you can see 11 is getting printed so
26:16 - guys what we have done over here is we
26:18 - have simply used the plus operator in
26:20 - order to add two numbers we can also do
26:23 - this by using the variables as well so
26:25 - let's say we provide num one it is equal
26:27 - to 10 and let's say we provide num 2 it
26:30 - is equal to 20 and then let's say I
26:33 - provide sum it is equal to num 1 plus
26:36 - num 2 over here so guys basically once
26:39 - again we have used this plus operator in
26:42 - order to add two numbers that is num one
26:44 - and num two for which the values are 10
26:46 - and 20 respectively and the result will
26:49 - be stored in this sum and when we
26:51 - provide this sum inside the print
26:53 - statement we will get that result so let
26:55 - me just save this file and try running
26:57 - this code now so as you can see 30 is
26:59 - getting printed that is the sum of 10 +
27:01 - 20 over here so guys this is one of the
27:04 - arithmetic operator that is plus is
27:06 - being used in order to add the two
27:07 - numbers apart from this addition we have
27:10 - other operators as well as you can see
27:12 - subtraction we have in which the two
27:14 - numbers can be subtracted so over here 4
27:16 - - 2 it is equal to 2 so over here minus
27:20 - operator is being used we have
27:21 - multiplication as well in which multiply
27:24 - operator is used in order to multiply
27:26 - two numbers we have division as well in
27:29 - order to divide the two numbers so as
27:31 - you can see 4 divided by 2 it is equal
27:34 - to 2 so we are getting the coent over
27:36 - here and we have the modular operator as
27:38 - well which can be used by using this
27:40 - percent operator so guys what happens is
27:42 - 5 person two what this will do is it
27:45 - will divide the number on the left hand
27:47 - side that is five by the number on right
27:49 - hand side that is 2 so 5 divided by 2 it
27:52 - will give us the quotient as two but the
27:54 - remainder will be one and we will be
27:56 - getting the remainder of this this
27:57 - operation that is one over here and
27:59 - similarly we have power operator as well
28:01 - so as we can see four and then 2 *
28:04 - multiplication symbol over here which is
28:06 - the power symbol and then two which
28:08 - means 4 * 4 will be done which is equal
28:11 - to 16 so basically this is nothing but
28:13 - the square of the number in this case it
28:15 - is the square of this number that is
28:17 - four so guys let us check all these
28:19 - operators with the help of examples over
28:21 - here so what we will do is first of all
28:23 - we will print and add two numbers so
28:26 - let's say we provide 10 is for first
28:27 - number and 20 is the second number so
28:30 - this is the addition of two numbers
28:32 - let's say we want to subtract two
28:33 - numbers over here and the two numbers
28:35 - are let's say 20 and then minus what we
28:38 - do is we will minus 15 over here let's
28:40 - say the third expression is
28:42 - multiplication so I will simply provide
28:44 - five as the number multiplied by seven
28:47 - as another number the next operator is
28:48 - the Divide operator so let's say I
28:50 - provide the print statement over here
28:52 - and we provide 50 as one number divided
28:55 - by 10 as another number and then we have
28:58 - another print statement let's say we
29:00 - want to find the remainder after
29:03 - dividing two numbers so let's say 40 is
29:05 - one number and then we provide
29:07 - percentage sign and then we provide 15
29:10 - as the second number and then the last
29:12 - operator that is the power operator I
29:14 - simply provide five as the number and
29:17 - then two times multiplication over here
29:19 - which means power and then I provide two
29:21 - as the second number so guys let me just
29:23 - save this file and try running this code
29:25 - we will check the results of all these
29:26 - operation over here so as you can see
29:28 - the first print statement that is 10 +
29:30 - 20 it is providing us 30 as the result
29:33 - and this is the correct result over here
29:35 - 20 - 15 should be 5 and that is what we
29:38 - are getting over here as 5 and then 5 *
29:41 - 7 it is equal to 35 and we are getting
29:43 - 35 over here then 50 ided 10 should give
29:46 - us the quotient that is 5 and we are
29:49 - getting 5.0 over here and then 40% 15
29:52 - which means 40 is divided by 15 and then
29:55 - what is the remainder is getting
29:57 - returned to this print function and 10
29:59 - is getting returned why 40 divided by 15
30:03 - the quotient will be two that is 15
30:05 - multiplied by 2 is 30 but the remaining
30:07 - number will be 10 which will be the
30:09 - remainder and that is what we are
30:10 - getting over here is the 10 as the
30:12 - remainder and then 5 power 2 which means
30:15 - 5 * 5 is done over here and 5 * 5 is 25
30:19 - and that is what we are getting over
30:21 - here so Guys these are certain
30:23 - arithmetic operators that you can use
30:25 - which include addition subtraction
30:27 - multiplication division and then finding
30:30 - the remainder of the two numbers by
30:32 - dividing them and then we can also find
30:34 - the power of the number so guys you can
30:36 - use them based on your requirements
30:38 - logical operators in Python Programming
30:40 - so guys The Logical operators are used
30:42 - to check whether an expression is true
30:45 - or false so they are used in decision
30:47 - making so as you can see for example
30:50 - let's say the value of variable that is
30:52 - a is equal to 5 and the value of B
30:55 - variable is 6 over here and we have the
30:57 - print statement over here and there are
30:59 - two conditions that we are checking
31:01 - first of all whether a is greater than
31:03 - two so in this case the return will be
31:05 - true over here that's because the value
31:07 - of a that is five is actually greater
31:09 - than two over here and then as you can
31:12 - see this end keyword this is nothing but
31:14 - this is one of the logical operators it
31:16 - is being used in order to check the
31:18 - multiple conditions and the second
31:20 - condition that is being checked over
31:21 - here is whether B is greater than or
31:24 - equal to 6 so in this case since B is
31:26 - equal to so yes in this case it is also
31:29 - true so basically since both the
31:31 - Expressions over here that is the second
31:33 - expression and the first expression is
31:35 - true and because this end logical wants
31:38 - all the Expressions to be true the
31:40 - return for the entire expression will be
31:42 - true over here so as you can see these
31:44 - are certain logical operators over here
31:46 - first of all we have the end operator
31:48 - which means A and B it is true only if
31:51 - both the operant that is a and b are
31:53 - true over here similarly we have r as
31:55 - well so as you can see a or B in this
31:58 - case only one oper needs to be true that
32:00 - is only one condition needs to be true
32:02 - over here so this will be true if at
32:04 - least one of the operant is true and
32:07 - then we also have the not operator in
32:09 - which case we can use it as not a so it
32:12 - will be true if the operant is false and
32:14 - it will be false when operant is true
32:16 - over here so guys let us check all this
32:18 - with the help of examples over here so
32:20 - let's say we have the variable that is a
32:22 - is equal to 5 and B it is equal to 6
32:25 - over here so we simply have the print
32:27 - statement and let's say we provide the
32:30 - condition that is a is it greater than
32:32 - two over here and we also have another
32:35 - condition so using the end logical
32:37 - operator over here we can combine
32:39 - multiple conditions so next time we will
32:41 - be checking whether B is greater than or
32:44 - equal to 6 so guys in this case both
32:46 - these conditions that is a greater than
32:48 - two will return as true and then B is
32:50 - greater than or equal to 6 will also
32:52 - return as true so this entire expression
32:55 - will be true over here so let me just
32:57 - save this file and try running this code
32:58 - now so as you can see true is getting
33:00 - returned over here now what if one of
33:02 - the conditions is false over here so
33:04 - what we have to do is let's say I
33:06 - provide a less than 2 in which case this
33:09 - particular expression will become false
33:11 - so let me just save this file and try
33:12 - running this code now so as you can see
33:14 - false is getting returned that's because
33:16 - one of the Expressions while using the
33:18 - end logical operator is false over here
33:21 - and according to rules all the
33:23 - Expressions while using the end logical
33:25 - operator must be true in order to return
33:27 - the true s the result now guys if we
33:29 - check the same conditions that is both
33:31 - these conditions by using the or logical
33:34 - operator so we simply have to provide or
33:36 - over here and let me just save this file
33:38 - and try running this code now so as you
33:40 - can see true is getting returned that's
33:42 - because the second expression over here
33:44 - is true and the first expression over
33:46 - here is false so anyway the or logical
33:49 - operator wants one of the conditions to
33:51 - be true and that is why we are getting
33:52 - the true as the result over here what if
33:54 - we make the second condition false over
33:57 - over here so let me just change this
33:59 - expression to B less than 6 over here
34:01 - let me just save this file and try
34:03 - running this code now so as you can see
34:05 - false is getting returned that's because
34:07 - is a less than 2 no in this case so
34:09 - false is getting returned over here and
34:11 - is B less than 6 over here no in this
34:14 - case it is equal to six so this
34:15 - expression is also false so the entire
34:18 - expression is false and that is the only
34:20 - combination where the or logical
34:22 - operator will return us the false result
34:25 - now guys when do we use this not oper
34:27 - data over here so let's say I have just
34:28 - a simple expression so over here I will
34:31 - provide is a less than 4 over here so in
34:35 - this case is a less than four no so it
34:37 - should return false so let us save this
34:39 - file and try running this code now so it
34:41 - is returning false over here but what if
34:43 - we want the opposite of this result so
34:46 - if the result of any of the expression
34:48 - is false we want to print true but if
34:51 - the result of any expression is true we
34:53 - want to return it as false so what we
34:55 - have to do is we simply have to to
34:57 - provide not logical operator and the
34:59 - expression needs to be provided within
35:02 - the parenthesis over here as we can see
35:04 - so let me just save this file now so
35:06 - since it was returning false by using
35:08 - the not logical operator it should now
35:10 - return true so let me just run this code
35:12 - once again so it is returning true over
35:15 - here similarly if let's say this
35:16 - particular expression turns out to be
35:18 - true so we will get false as the result
35:21 - so let's say I provide a greater than
35:23 - four so is a for which the value is five
35:26 - over here is it greater than four yes in
35:28 - this case so this will return as true
35:30 - but since we are using the not logical
35:32 - operator it will return this True Result
35:35 - to false and it will be printed so let
35:37 - me just save this file and try running
35:39 - this code now so as you can see false is
35:41 - getting returned over here and it is
35:42 - being printed so Guys these are certain
35:44 - logical operators that we will be using
35:47 - in the upcoming videos as well when we
35:48 - are going to use the if else statement
35:51 - apart from that we will be also using
35:53 - the while loops and other control
35:55 - statements as well where we are going to
35:57 - use these logical operators so guys
35:59 - practice on your own so that on
36:00 - different inputs you get different
36:02 - outputs if else statement in Python
36:05 - Programming so guys in computer
36:06 - programming we use the if statement to
36:09 - run a block of code only when a certain
36:12 - condition is meant so for example as you
36:14 - can see assigning grades that is a b c
36:17 - based on the marks obtained by a student
36:20 - so basically over here in this case we
36:22 - will be using the if condition now what
36:24 - can be the conditions we can say that If
36:26 - the percentage of the student is above
36:29 - 90% so assign grade A in the same way if
36:32 - the percentage is above 75% then assign
36:36 - Grade B and if the percentage is above
36:39 - 65% but less than 75% then assign grade
36:43 - C so during such conditions we have to
36:45 - use the if else statement over here now
36:47 - similarly in Python there are three
36:49 - forms of if else statement so we are
36:52 - going to check all these forms of
36:54 - statements one at a time with the help
36:55 - of examples the first part is the if
36:57 - statement in which case we are going to
36:59 - Simply have the if statement over here
37:01 - along with the condition and the block
37:03 - of code the next form will be if else
37:06 - statement in which case we will also
37:08 - have the else block over here and the
37:10 - third form of the if else statement will
37:12 - be first we will be having the if
37:14 - statement and Then followed by the L if
37:16 - statement in which case we have another
37:18 - condition over here and then finally we
37:20 - have the else statement over here so let
37:22 - us check all this with the help of
37:24 - examples in the vs code so over here
37:26 - let's say we have the value of x it is
37:29 - equal to 10 now what we have to do is we
37:31 - have to provide the if condition over
37:33 - here so as you can see when we type if
37:35 - keyword over here vs code is suggesting
37:38 - us that we can use this if keyword so we
37:40 - are going to use this and then we are
37:42 - supposed to have some condition so we
37:44 - can say x greater than 5 over here so
37:47 - guys this is one of the comparison
37:49 - operators that we have already seen
37:50 - previously it will check whether this
37:52 - left hand side variable is it greater
37:54 - than the value that is present on the
37:56 - right right hand side so guys this is
37:58 - one of the conditions that we are going
37:59 - to check and then followed by a colon
38:02 - over here so guys this is the format in
38:04 - which we provide the if condition and if
38:07 - this condition that is whether X is
38:08 - greater than five if it is true then we
38:11 - want to come inside this and there will
38:13 - be the block of code we need to have
38:15 - certain statements over here so we will
38:18 - say print and we can simply put the
38:20 - string that is X is greater than 5 over
38:24 - here since that is the condition that we
38:26 - have check so this is the very simple
38:28 - code that we can have with the if
38:30 - condition over here let me just save
38:31 - this file and try running this code now
38:33 - so as you can see it is displaying X is
38:36 - greater than 5 now guys this is just one
38:38 - statement that we have provided inside
38:40 - the if condition we can also have
38:42 - multiple lines of code inside this block
38:44 - over here after the if condition so we
38:47 - simply have to press enter and provide
38:49 - the another print statement and let's
38:51 - say we will simply put we have check X
38:55 - so we have a very general statement over
38:57 - here that is we have checked X over here
38:59 - let me just save this file andent
39:01 - running this code now so as you can see
39:03 - X is greater than 5 this thing is
39:05 - getting printed and this statement that
39:07 - is we have checked X is also getting
39:09 - printed so all the lines of code that is
39:12 - present inside the block after this
39:14 - condition that we have provided in the
39:16 - if statement will be executed only when
39:19 - this condition that is X greater than 5
39:21 - is true now what if this condition is
39:23 - not true so let's say I provide X less
39:26 - than five over here in which case this
39:28 - condition will become false so what will
39:30 - happen is the control flow will not go
39:32 - inside this block and it will not print
39:35 - these statements over here let us verify
39:37 - this I will just save this file and try
39:39 - running this code now so as you can see
39:41 - nothing is getting printed over here
39:43 - that's because these lines of code are
39:45 - not getting executed because this
39:47 - condition was false now how do we verify
39:49 - that we have to come out of this block
39:52 - so basically we have indented this code
39:54 - that is there are some space characters
39:56 - over here in this line that is why these
39:58 - lines of code over here are treated to
40:00 - be present inside the block after this
40:03 - condition we have to come out of that
40:05 - block over here so we simply press enter
40:08 - and then we press backspace so that the
40:10 - cursor is aligned to this if condition
40:12 - over here now we can simply provide
40:14 - another print statement and I will
40:16 - simply say outside if statement so over
40:20 - here we say outside if statement now
40:23 - guys this line of code it will confirm
40:25 - that the control flow has come out of
40:27 - the if block over here so let me just
40:29 - save this file now and try running this
40:30 - code so as you can see we are getting
40:32 - outside if statement that's because X
40:35 - less than 5 condition was false and that
40:37 - is why these two lines of code were not
40:39 - printed and then the control Flow came
40:42 - out of the if condition and then this
40:44 - line that is outside if statement was
40:46 - printed so guys it is very important
40:48 - that you follow this indentation as far
40:50 - as your python programs are concerned
40:52 - you might get incorrect output if you
40:54 - don't follow such indentations proper
40:56 - properly now let us move to another form
40:58 - of if statement so over here the second
41:00 - form is we provide the else part as well
41:02 - so the first part we have already seen
41:04 - that is using the if statement let us
41:06 - now use the else statement as well so
41:08 - over here what we will do is first of
41:10 - all we will check whether X is greater
41:12 - than 5 and then we will print that is X
41:15 - is greater than 5 over here now what if
41:17 - X is not greater than 5 that means it is
41:20 - less than or equal to 5 so we have to
41:22 - define the lse part over here so first
41:24 - of all we have to remove this index
41:26 - orentation part so I'll just press on
41:28 - backspace and then we provide the else
41:30 - keyword as you can see vs code is
41:32 - suggesting us this else keyword over
41:34 - here we will use this and then followed
41:36 - by colon and then we can go inside this
41:38 - block of code and similarly we will have
41:41 - another print statement in this case we
41:43 - will say X is not greater than 5 so we
41:46 - are checking whether X is greater than 5
41:49 - and we will say x is greater than five
41:51 - if this condition is true and if this is
41:53 - not true then it will go in the else
41:55 - part and it it will say X is not greater
41:57 - than 5 and after this part of code gets
42:00 - executed the control flow will come over
42:02 - here and it will print this statement
42:04 - that is outside if statement over here
42:06 - so let me just save this file enter
42:07 - running this code now so as you can see
42:10 - it says X is greater than 5 so over here
42:12 - since the value of x it is 10 it is
42:15 - printing X is greater than 5 after this
42:17 - x greater than 5 condition is true and
42:20 - then after that we are getting outside
42:22 - if statement so the control flow did not
42:24 - go inside this else part that's because
42:26 - it went inside this if part and this
42:29 - line of code was executed so guys the
42:31 - control flow can only go inside one
42:33 - block of code if this condition is true
42:36 - then it will come out it will not go
42:38 - inside the else part and if this
42:40 - condition becomes false then it will go
42:42 - over here in the else part and execute
42:44 - that line of code so let us check that
42:46 - second scenario now what if X is not
42:48 - greater than 5 so we will change the
42:50 - value of x and let us say the X values
42:53 - is 2 now so in this case is X greater
42:55 - than 5 no in this case so this line of
42:58 - code that is X is not greater than 5
43:00 - should get printed let me just save this
43:02 - file enter I running this code now so as
43:04 - you can see X is not greater than 5 this
43:07 - line of code is getting printed that's
43:09 - because the condition was false and the
43:11 - control Flow came in the else part and
43:13 - it executed this line of code after this
43:16 - outside if statement got printed over
43:18 - here as you can see on the console so
43:20 - guys this is one of the examples of the
43:21 - if else statement that we can use guys
43:24 - there will be many instances where you
43:25 - will be using this if else statement in
43:28 - your actual programs so make sure that
43:30 - you practice on your own now after this
43:32 - let us see another part that is we have
43:35 - the LF as well so guys let us take this
43:37 - example over here that is of grading
43:39 - system so if the percentage is greater
43:41 - than 90 we have to assign the grade that
43:43 - is a If the percentage is greater than
43:45 - 75 but less than 90 then we will say the
43:49 - grade is B and if the percentage is
43:51 - greater than 65 but less than 75 then we
43:54 - have to put the grade as C so guys let
43:56 - us move to the code over here let us
43:58 - clear all these lines of code and over
44:00 - here we will simply have the percentage
44:02 - variable and let's say we have 95 as the
44:05 - percentage initially and then we have
44:07 - another variable that is great let's say
44:09 - it is equal to D initially so we have
44:11 - this character that is D over here now
44:13 - what we have to do is we have to provide
44:15 - the if condition and the first condition
44:17 - is whether the percentage is above 90 so
44:20 - over here we will say inside the if
44:22 - condition first of all whether this
44:24 - percentage is it above 90 over here so
44:27 - we will simply have percentage greater
44:29 - than 90 and if this is true then we have
44:32 - to provide colon and then we have to
44:34 - make the value of this grade as a so
44:36 - grade it is equal to a over here inside
44:39 - the single codes now we have another
44:41 - condition that is if the percentage is
44:43 - greater than 75 but if it is less than
44:46 - or equal to 90 then it should be B so
44:48 - what we have to do is we can use the LF
44:51 - part over here so we have L if keyword
44:53 - so as you can see vs code is suggesting
44:55 - us this this L if keyword over here
44:57 - followed by we have to check whether
45:00 - this percentage again is it greater than
45:02 - 75 so over here if it is greater than 75
45:06 - then we have to come in this block of
45:07 - code and then after this again we have
45:10 - to assign the value to this grade
45:11 - variable and this time the value will be
45:14 - B over here so we will assign the value
45:16 - to grade as B and then after this we
45:18 - will again have the L part over here and
45:21 - we need to check whether the percentage
45:23 - is greater than 65 or not and then in
45:26 - that case we have to provide C so over
45:28 - here we will say l if percentage it is
45:32 - greater than 65 in this case and then if
45:35 - this is true then we have to provide the
45:38 - grade value as C over here and then guys
45:41 - we can also have the else part over here
45:43 - and we can simply provide that the grade
45:45 - in the lse part it can be D over here in
45:48 - case the percentage is less than 65 so
45:51 - we can have gr as D and then finally we
45:53 - will have the print statement over here
45:55 - so we have we have the print function
45:57 - and we will simply provide the grade
45:58 - value so the grade is and then we have
46:02 - comma and then the grade variable over
46:04 - here so guys over here as you can see
46:06 - initially the percentage is 95 so it
46:08 - should go inside the first if statement
46:10 - so let me just save this file now and
46:12 - try running this code so as you can see
46:14 - we are getting some error over here at
46:16 - the else part so over here we have
46:18 - forgot to provide the colon after the
46:20 - else part so it is very important that
46:22 - we provide the colon after any of these
46:24 - keywords that we have used and the
46:26 - conditions that we have used so let me
46:28 - just save this file and try running this
46:29 - code now so as you can see the grade is
46:31 - a that's because the percentage value is
46:34 - 95 and in this case percentage is
46:36 - greater than 90 and that is why the
46:38 - grade is being assigned as the value as
46:40 - a now what if the percentage value is
46:42 - not greater than 90 so let's say we
46:44 - provide the percentage value as 85 so in
46:47 - this case the control flow will come
46:48 - over here it will check whether the
46:50 - percentage greater than 90 no in this
46:52 - case then it will go inside the L If
46:54 - part so is percentage greater than 75
46:57 - yes in this case so this line of code
46:59 - that is grade equal to B will get
47:01 - executed and then the control flow will
47:03 - come directly out of the if else
47:05 - statement and it will print the grade
47:07 - over here let me just save this file and
47:08 - try running this code now so as you can
47:10 - see the grade is being assign the value
47:12 - as B so grade is B is getting printed
47:14 - over here similarly let's say we provide
47:17 - the percentage value as 70 so this time
47:20 - this condition that is percentage
47:21 - greater than 65 will get executed
47:24 - because the previous conditions are all
47:25 - already false in this case so let me
47:27 - just save this file and try running this
47:29 - code now so grade must be C so as you
47:31 - can see the grade is C over here and
47:33 - what if the percentage is less than 65
47:35 - so let's say we provide the percentage
47:37 - as 60 so finally the lse part that is
47:40 - grade equal to T will get executed so
47:43 - let me just save this file and try
47:44 - running this code now so now in this
47:46 - case the grid is D so in this way we can
47:48 - easily use the IFL statement we can also
47:50 - use the AL if keyword in order to check
47:53 - the intermediate conditions over here
47:55 - for Loop in Python Programming so guys
47:58 - in computer programming Loops are used
48:00 - to repeat a block of code so let's say
48:03 - for example if we want to show a message
48:05 - 10 times we don't have to print that 10
48:08 - number of times over here we can simply
48:10 - use the loop in order to repeat the same
48:13 - message again and again 10 times so in
48:15 - Python the fall Loop is used to run a
48:18 - block of code for a certain number of
48:20 - times so in this example we have
48:22 - considered 10 we can have any number of
48:24 - iterations so basically it is used to
48:26 - iterate over any sequences such as list
48:29 - tupple string Etc so guys this is the
48:32 - syntax of the Fall Loop in Python
48:34 - Programming so first of all we have the
48:36 - for keyword followed by a particular
48:38 - value or a variable and then we have
48:40 - this in keyword which is a kind of a
48:43 - membership operator that we have seen
48:44 - previously and then we have the sequence
48:47 - now this sequence can be anything it can
48:49 - be a list tle or any other sequence over
48:51 - here so let us check this with the help
48:53 - of examples now so over here what we we
48:55 - will do is let's say we have the
48:57 - variable name as X and we have the list
48:59 - of numbers over here so in order to
49:01 - define the list we have the open and
49:03 - close square brackets and we have the
49:05 - list of numbers let's say we have one
49:07 - followed by two and then we have three
49:10 - four and then five so we have the top
49:13 - five numbers over here inside this list
49:15 - that is defined in the variable X now
49:17 - what we want to do is we want to print
49:19 - all these numbers one at a time on the
49:21 - separate lines so we can simply use the
49:24 - fall Loop over here so for and what we
49:27 - will do is let's say we provide value as
49:29 - the variable name and then we provide
49:31 - the in keyword which is the membership
49:34 - operator and after this on the right
49:36 - hand side of the in keyword we are
49:38 - supposed to have the sequence so the
49:39 - sequence in this case is the variable
49:41 - that is X over here so this is the
49:43 - format of the Fall Loop whenever we are
49:45 - going to iterate through a list or a
49:47 - sequence now inside this we can have the
49:49 - block of code over here so we simply
49:51 - want to print all the values so we have
49:54 - the print function and we can can simply
49:56 - provide this value that is variable so
49:58 - guys what is happening behind the scenes
50:00 - is this x that is the list of all the
50:02 - numbers one at a time the number is
50:05 - being assigned to this variable that is
50:07 - value so first of all one will get
50:09 - assigned to value and this value that is
50:11 - one will get printed and then the
50:13 - control flow will go back again in the
50:15 - sequence that is X it will check whether
50:17 - there is a next element or not so two
50:19 - will get printed and then again three
50:21 - and then four and then five and then
50:23 - after this when the control flow comes
50:25 - over here it sees that there is no other
50:27 - element after this Fifth Element so the
50:29 - control flow will come out of this fall
50:31 - Loop and then the other lines of code
50:33 - after this fall Loop will get printed so
50:35 - guys let me just save this file enter I
50:37 - running this code now so as you can see
50:39 - all the numbers are getting printed over
50:41 - here on the terminal that is 1 2 3 4 5
50:45 - now guys let's say we want all these
50:47 - numbers to be printed on the same line
50:49 - so previously we had seen that we have
50:51 - certain parameters in the print function
50:53 - that will help us in order to print the
50:56 - values in a specific way so over here we
50:58 - have one of the parameters that is end
51:00 - over here so we provide end and this
51:03 - parameter helps us in order to separate
51:05 - the different elements that we want to
51:07 - print so what we are going to do is I'm
51:09 - going to separate all the numbers using
51:11 - the comma character so I have provided
51:13 - the comma character over here so all the
51:15 - numbers that were printed on the
51:17 - different lines will get printed on the
51:19 - same line now so let me just save this
51:20 - file enter I running this code now so as
51:23 - you can see 1 2 3 4 5 is is getting
51:25 - printed we are getting this additional
51:27 - comma over here at the end that's
51:29 - because after the last value is getting
51:31 - printed the comma is appended after that
51:33 - last value so guys this is one of the
51:35 - ways in which we can use the fall Loop
51:37 - in order to carry out our operations now
51:39 - guys there is another important thing
51:41 - that you must know in Python the fall
51:43 - loop with python range can also be used
51:45 - so in Python a range is a series of
51:48 - values between two numeric intervals we
51:50 - use the Python's built-in function that
51:52 - is range to define a range of values so
51:55 - let's say we want to define the top 10
51:57 - numbers over here we can simply use the
52:00 - range function instead of defining them
52:02 - one at a time like how we have defined
52:04 - in this list so basically in order to
52:06 - have the top 10 numbers we have to
52:08 - manually Define it as 1 to 10 over here
52:11 - but we can also get rid of this part we
52:13 - can have the range method over here so
52:15 - as you can see when we type range vs
52:17 - code is suggesting us this function that
52:19 - is range over here and we simply have to
52:21 - provide a number over here so let's say
52:23 - we provide 10 as the number so what is
52:25 - happening is the list of 10 numbers over
52:28 - here is getting assigned to the variable
52:30 - that is X over here starting from the
52:32 - number0 up to the number that is N9 so
52:35 - over here we will be seeing all the
52:36 - numbers starting from zero up to 9 over
52:39 - here the last number that is 10 is
52:41 - excluded from the list so if we Simply
52:43 - Save this file enter running this code
52:45 - now we will get these numbers that is 0
52:47 - 1 2 3 4 5 6 7 8 9 so 10 numbers are
52:52 - getting displayed over here that's
52:53 - because we have provided 10 inside the
52:55 - range built-in method what if we provide
52:58 - 20 over here so 0 to 19 numbers will be
53:01 - displayed so let me just save this file
53:02 - and running this code now so as you can
53:04 - see 0 to 19 is getting displayed so guys
53:07 - let's say if someone had told you write
53:09 - a Python program in order to print top
53:13 - 20 numbers starting from the number 0o
53:15 - up to 19 so instead of having the print
53:18 - statements 20 number of times and
53:20 - writing each and every number inside the
53:23 - print statement we can simply have the
53:25 - range method over here and we can use
53:27 - the fall Loop in order to iterate
53:29 - through the list that we have already
53:31 - defined over here and that is how we
53:33 - simplify the problem that is given to us
53:36 - and write the Python program now guys
53:38 - there is another variation over here
53:40 - python fall loop with the else part so
53:42 - after this fall Loop we can also have
53:44 - the else part that will mandatorily get
53:46 - executed after we reach the end of this
53:49 - sequence that we have provided in the
53:51 - fall Loop so what we will do is we will
53:53 - simply come out of this block of of code
53:55 - and we will have the else part over here
53:58 - and we will simply print outside fall
54:00 - Loop over here so we have
54:03 - outside for Loop so guys what will
54:06 - happen is after the control flow comes
54:08 - out of this fall Loop the control flow
54:10 - will go inside this L's part and it will
54:12 - execute this line of code and print
54:14 - outside fall loop on the console now
54:17 - guys this print statement will be
54:18 - printed on the same line that's because
54:21 - we have provided the end part over here
54:23 - and there is a comma over here so you
54:24 - can expect the string to be present on
54:27 - this same line over here so let me just
54:28 - save this file enter I running this code
54:30 - now so as you can see 0 to 19 that is
54:33 - all the numbers are getting printed and
54:35 - then the last line that is outside fall
54:37 - Loop is getting printed over here so in
54:39 - case you want to print something or
54:41 - carry out certain operations after the
54:44 - execution of the Fall Loop you can have
54:46 - the lse part as well and it will carry
54:48 - out the operations over here after the
54:50 - end of this sequence is reached so guys
54:52 - this is the main functionality of the
54:54 - Fall Loop that is in order to iterate
54:56 - through the sequence we can also have
54:58 - the sequence of list of strings as well
55:00 - we can also have tle or dictionary as
55:02 - well so guys it depends on your
55:04 - requirements as to what exactly you want
55:06 - to find out through the python programs
55:09 - while loop in Python Programming so guys
55:11 - previously we have seen how the fall
55:13 - Loop works in the Python Programming now
55:15 - the python y Loop is used to run a
55:18 - specific code until a certain condition
55:20 - is met so basically in the fall Loop
55:22 - there was no such condition that we had
55:24 - provided did but it was iterating
55:26 - through a list that we had provided in
55:28 - the form of a variable but over here
55:31 - this is the syntax of the Y Loop first
55:33 - of all we have the while keyword over
55:35 - here and then we have a certain
55:37 - condition and if this condition is true
55:39 - then only the control flow will go
55:41 - inside the body of the while loop and
55:43 - then again the control flow will come
55:45 - over here it will check the condition
55:47 - again and if the condition is true once
55:49 - again it will again go inside the body
55:51 - of this while loop so guys again and
55:53 - again the control flow will come inside
55:55 - the while loop until and unless the
55:57 - condition becomes false so when this
55:59 - condition becomes false the control flow
56:01 - will come out of this while loop and
56:03 - that is how the while loop is going to
56:05 - work in the Python Programming so guys
56:07 - let us check this with the help of
56:08 - examples now so let's say we want to
56:10 - print the first five numbers that is 1
56:12 - to 5 so over here initially we can have
56:14 - the variable that is I it is equal to 1
56:17 - and the second variable that is J it is
56:19 - equal to 5 so this is the starting point
56:22 - that is I equal to 1 and the ending
56:24 - point is J is equal to 5 so basically we
56:27 - can have a while loop over here we will
56:29 - simply have the while keyword and the
56:31 - condition that we have to give is
56:33 - whether I is less than or equal to J and
56:36 - up to that condition we want to print
56:39 - the value of I so basically it is I less
56:42 - than or equal to J over here so if this
56:45 - condition is true we want to print the
56:47 - value of I which will be one initially
56:50 - so basically I want to print this number
56:53 - that is I over here now guys what
56:55 - exactly is happening over here is I's
56:57 - value is 1 initially J value is five
56:59 - initially so is I less than or equal to
57:01 - J in the first instance yes in this case
57:04 - so I will be printed which is equal to 1
57:06 - so again it will go inside the Y Loop
57:09 - and it will check whether one is less
57:11 - than or equal to 5 yes in this case so
57:13 - guys we are not changing any of the
57:15 - values that is I or J over here so this
57:17 - will be infinite Loop because again and
57:20 - again the condition will be true and the
57:22 - number that is I which is equal to 1
57:25 - will get printed indefinitely so what we
57:27 - have to do is we have to increment the
57:29 - value of I because after one we want to
57:31 - print the value that is two over here so
57:33 - what we will do is we will simply add 1
57:35 - to I so I it is equal to I + 1 we can
57:40 - also use the Shand method that is I +
57:43 - equal to 1 over here so what will happen
57:45 - now is I's value is updated to I + 1
57:48 - which will be 2 now so is 2 less than or
57:50 - equal to 5 yes in this case and then
57:53 - again two will get printed and then then
57:55 - I will again get incremented over here
57:57 - so the I's value will be three next time
57:59 - I's value will be four and then again
58:01 - I's value will be five and then
58:03 - ultimately when I's value is six this
58:06 - condition will become false that's
58:07 - because 6 is not less than or equal to 5
58:10 - and the control flow will come out of
58:12 - the while loop so guys let me just save
58:14 - this file and try running this code now
58:16 - so as you can see all the numbers that
58:17 - is 1 2 3 4 5 is getting printed after
58:20 - the I's value is five over here five is
58:23 - getting printed now I I's value becomes
58:25 - 6 over here that's because 5 + 1 will be
58:27 - 6 and is 6 less than or equal to 5
58:30 - because the J's value is five over here
58:32 - in this case so no the condition becomes
58:34 - false and the control flow comes out of
58:36 - the while loop now what if we want to
58:38 - print all these numbers on the same line
58:41 - so simply inside the print statement we
58:43 - can have the comma and then we can have
58:45 - the end operator and then let's say we
58:47 - want to separate all the numbers with
58:48 - the space characters so inside the
58:50 - double codes we have provided the space
58:52 - character over here so let me just save
58:54 - this file and try running this code now
58:56 - so as you can see 1 2 3 4 5 is getting
58:59 - printed over here we can have any
59:00 - numbers over here let's say I is
59:02 - starting from 11 and let's say we want J
59:05 - is equal to 20 so in this case 11 to 20
59:08 - should get printed let me just save this
59:10 - file and running this code now so as you
59:12 - can see 11 12 13 14 and up to 20 numbers
59:16 - are getting printed over here so guys
59:18 - this is the main functionality of the Y
59:20 - Loop it is going to have a certain
59:22 - condition and if this condition is true
59:24 - the block of code inside the while loop
59:27 - will get executed and once the condition
59:29 - becomes false control flow comes out of
59:32 - the while loop now guys we can also use
59:34 - the lse part with the while loop so over
59:35 - here as you can see python while loop
59:38 - with the lse part so a while loop can
59:40 - have an optional else block as well the
59:43 - else part is executed after the
59:45 - condition in the while loop evaluates to
59:47 - false so basically after this while loop
59:50 - we can also have the lse part which is
59:52 - optional so we can have the lse part
59:54 - over here what we will do is we will
59:56 - simply have the print statement that is
59:58 - outside the while loop so we have the
60:00 - print function and we will say outside
60:04 - while loop over here so let me just save
60:06 - this file inter I running this code now
60:09 - so as you can see 11 12 13 up to 20
60:11 - numbers are getting printed and then on
60:13 - the same line the outside while loop the
60:16 - statement that we have provided in the
60:18 - lse part is getting printed so this is
60:20 - the functionality of the else part after
60:22 - the Y Loop it is optional if you want to
60:24 - have we can have it or else we don't
60:26 - need to have it but guys the important
60:28 - thing is inside the V Loop we can
60:30 - provide a particular condition and the
60:32 - control flow will go again and again
60:33 - inside the while loop until the
60:35 - condition is true once a condition
60:37 - becomes false the control flow will come
60:39 - out of the while loop now guys what you
60:41 - should use whether you should use the
60:43 - python for Loop or python while loop
60:45 - over here so guys basically they are
60:47 - used based on the specific requirements
60:49 - so as you can see fall Loop is usually
60:51 - used when the number of iterations is
60:54 - known so as we had seen previously in
60:56 - the fall Loop we provide a particular
60:58 - sequence and iterate through that
61:00 - sequence by giving one value at a time
61:02 - to a variable and we use that variable
61:04 - inside the block of the Fall Loop but in
61:07 - the while loop there is a condition so
61:09 - while loop is usually used when the
61:10 - number of iterations are unknown so we
61:12 - don't know the number of iterations we
61:14 - don't have the sequence of elements or
61:16 - the list of numbers through which we
61:18 - want to iterate so basically we provide
61:20 - the condition in the while loop So based
61:22 - on these requirements you can choose
61:24 - whether you want to use the while loop
61:26 - or you want to use the fall Loop but
61:28 - guys it is very important that you
61:30 - practice both these Loops the
61:31 - implementation of these Loops are very
61:33 - important as far as Python Programming
61:35 - is concerned so functions in Python
61:37 - Programming so guys we will learn about
61:39 - the python function and the function
61:41 - expressions with the help of examples so
61:44 - basically a function is a block of code
61:47 - that performs a specific task so it can
61:49 - be any task that you want to implement
61:52 - based on your requirements but it is the
61:54 - block block of code that you can put
61:56 - inside the function and that block of
61:58 - code will have your implementation of
62:00 - the logic now suppose you need to create
62:02 - a program to create a circle and color
62:05 - it so there are two task over here that
62:07 - is first of all in order to create a
62:09 - circle and the second thing is to color
62:11 - it so you can create two functions to
62:13 - solve this problem that is the first
62:15 - function will be to create a circle and
62:18 - that will be one function and another
62:20 - function will be to create a color over
62:22 - here so basically what we have done is
62:23 - we have divided a complex problem into
62:26 - smaller chunks which makes it easier to
62:29 - understand the program and reuse the
62:31 - functions as well so there are two types
62:33 - of functions so first of all we have
62:35 - already seen some standard Library
62:37 - functions as well one of the example is
62:39 - the print statement that is the print
62:41 - function so these are built-in functions
62:43 - in Python that are available to use so
62:45 - let us check some examples of standard
62:47 - Library functions over here so
62:49 - previously we have seen the print
62:50 - statement so this is nothing but one of
62:53 - the buil-in functions which take
62:54 - multiple parameters so one of the
62:57 - parameters is the value so when we are
62:59 - providing programming for beginners the
63:02 - string which is the name of the YouTube
63:04 - channel as well which you should
63:05 - definitely subscribe so this is the
63:07 - string that we have provided to the
63:09 - print function and this string is being
63:12 - passed to the print built-in method and
63:14 - behind the scenes this print function is
63:17 - having some sort of code that will help
63:19 - us in order to print the statement on
63:22 - the terminal so when we save this file
63:24 - enter by running this code now basically
63:26 - this programming for beginners is
63:27 - getting printed what we have done we
63:29 - have just called that function and the
63:31 - implementation is behind the scenes so
63:33 - this is one example of a buil-in
63:35 - function similarly we have another
63:37 - built-in function that is range which
63:39 - helps us in order to have the list of
63:42 - numbers from zero up to the number that
63:44 - we have provided so let's say we provide
63:46 - the number 10 so it will provide us all
63:49 - the numbers before 10 starting from zero
63:51 - so this is another built-in function so
63:53 - similarly we have other standard Library
63:55 - functions as well now you can also have
63:58 - the user defined functions so in case
64:00 - your requirement is not fulfilled by
64:02 - using one of the standard functions that
64:04 - is being provided by python you can have
64:07 - your own user defined functions also so
64:10 - we can create our own functions based on
64:12 - our requirements and this is the syntax
64:14 - that is first of all we have this
64:16 - keyword that is DF which means Define
64:19 - and then we have the function name so
64:21 - this function name will be the name of
64:22 - the function like this range is the name
64:25 - of the function then the print function
64:27 - the print name is the function name over
64:29 - there so similarly we can have our own
64:31 - function name and after that we have the
64:33 - list of arguments we can have any number
64:35 - of arguments over here inside that we
64:37 - will have the function body where our
64:39 - implementation code will be present and
64:42 - then we can also have the optional
64:44 - return statement which means it will
64:46 - return some value so over here as you
64:48 - can see this is the example we have the
64:50 - defined keyword and Then followed by the
64:52 - greed function over here so it is not
64:54 - taking any arguments for now it is
64:56 - simply printing some statement that is
64:58 - inside GRE function now how do we call
65:00 - this function simply we use the function
65:03 - name that is greed followed by open and
65:05 - close parenthesis and then we call the
65:07 - print function and we say outside
65:09 - function so guys let us check this with
65:11 - the help of example over here so simply
65:13 - we will have the defined keyword so D EF
65:16 - and let's say we have sum and then
65:18 - underscore numbers so basically what we
65:21 - are doing over here is we will be adding
65:23 - two numbers so over here we have the
65:25 - open and close parenthesis and then
65:27 - after that we have a colon and let's say
65:29 - we have the number a it is equal to 10
65:32 - and then we have number B it is equal to
65:35 - 20 we want to print the sum of these
65:37 - numbers so we simply provide print
65:40 - function inside this and we say A + B
65:44 - and then we can also have the string
65:45 - over here let's say we have sum of A and
65:50 - B and then we have colon and then after
65:53 - this we have comma and then we have a
65:55 - plus b over here so guys this is the
65:57 - function that we have already defined we
65:59 - have two numbers that is a is equal to
66:01 - 10 and B is equal to 20 now if we Simply
66:04 - Save this file and try running this code
66:06 - we will not get anything so as you can
66:07 - see there is no print statement which is
66:10 - helping us in order to print something
66:12 - on the terminal why so because this code
66:14 - is present inside a function which is
66:16 - not called yet so we need to call this
66:19 - function that is some numbers so how do
66:21 - we call it by simply calling the name so
66:23 - we simply have to provide some numbers
66:25 - over here and then open and close
66:28 - parenthesis and that's it we have simply
66:30 - called this function which will make the
66:32 - control flow go to this particular
66:34 - function over here and inside it will go
66:36 - it will check that a value is 10 B value
66:39 - is 20 and it will print sum of A and B
66:42 - it will carry out this operation that is
66:44 - a plus b so let me just save this file
66:46 - and try running this code now so as you
66:48 - can see sum of A and B it is equal to 30
66:51 - and that is how we can simply provide
66:53 - the function now now guys why do we
66:54 - write this function just to add two
66:56 - numbers so let's say you have a scenario
66:58 - you have a is equal to 10 and then we
67:01 - have B it is equal to 20 and you want to
67:04 - print the sum so you can simply provide
67:06 - print a + b so you will get the answer
67:09 - as 30 now with the same requirement you
67:11 - have another requirement as well in the
67:14 - same code that is with this particular
67:16 - addition you want to add more two numers
67:18 - so what you will do is you will simply
67:20 - copy and paste these lines of code once
67:22 - again that is the three lines of code
67:24 - over here but this time the age value is
67:26 - something else so let's say we have
67:27 - something like 50 and then 60 over here
67:30 - so what will happen is with this print
67:32 - statement it will print the sum of these
67:33 - two numbers now let's say there is
67:35 - another requirement in which case all
67:37 - the sum needs to be printed at once and
67:39 - you have two more numbers so you will
67:41 - again copy these lines of code and then
67:44 - again paste this over here and then
67:45 - let's say the numbers are 100 and then
67:48 - 200 over here that is B is 200 so let me
67:51 - just save this file enter running this
67:52 - code now so what is happening happening
67:54 - is all the sum is getting printed once
67:56 - that is 30 110 and 300 but let's say
67:59 - similarly if you have 10 sets of A and B
68:02 - values in this way and you want to print
68:04 - all the sum of those numbers so what you
68:07 - will do so your code will become little
68:09 - bit complicated and it will be little
68:11 - bit lengthy as well so in order to avoid
68:13 - this what you can do is you can simply
68:15 - have the function and inside the
68:17 - function you can have those variables
68:19 - and have the sum of those variables so
68:21 - in order to achieve your task that is
68:23 - have the sum of multiple numbers over
68:25 - here in one screen and using the
68:28 - function what you can simply do is you
68:30 - can pass these values that is 10 20 50
68:33 - 60 and 120 while calling the function
68:37 - that is some number so I'll just remove
68:38 - these lines of code now over here and
68:41 - what we will do is I will simply provide
68:43 - the parameters that is the arguments
68:45 - over here that is a and Then followed by
68:47 - comma and then we have B now these A and
68:50 - B are not required because the values
68:52 - will come whenever this function
68:53 - function is being called so I'll just
68:55 - remove these lines of code over here you
68:57 - will simply have one print statement
68:59 - inside the function and the sum of A and
69:01 - B it is A+ B so this sum will get
69:04 - printed over here while calling the
69:06 - function you're supposed to provide the
69:08 - A and B value so what we will simply do
69:10 - is I will simply call this Su numbers
69:12 - over here and I will provide the values
69:15 - of A and B so what we had provided we
69:17 - had provided 10 and 20 and then again we
69:20 - had the requirement that is to add the
69:22 - other two numbers which were 50 and 60
69:25 - so again I will just copy paste this sum
69:27 - numbers function and provide the
69:29 - different values this time and then
69:31 - again I will copy and paste this once
69:33 - again with some different values so 100
69:36 - and 200 so as you can see our code has
69:39 - become little bit cleaner instead of
69:41 - having three lines of code in order to
69:43 - add two numbers every time for which our
69:46 - code has also become lengthy we have a
69:48 - very short code and it is very clean as
69:50 - well it is very readable as well so let
69:52 - me just save this file now and try
69:54 - running this code so as you can see we
69:56 - are getting sum of A and B it is 30 sum
69:59 - of A and B it is 110 and sum of A and B
70:02 - it is equal to 300 you can also
70:04 - customize your function in order to have
70:07 - the values of A and B over here so we
70:09 - can simply say over here we have the
70:12 - double codes and then we have comma and
70:14 - then we have a over here and then we
70:17 - have double codes and then we have and
70:19 - keyword double codes and then B value
70:22 - and then comma and then double codes
70:24 - over here before the colon so as you can
70:26 - see A and B values can also be printed
70:29 - so let me just save this file and
70:30 - running this code now so as you can see
70:32 - 10 and 20 were passed first time so it
70:34 - is saying sum of 10 20 it is 30 then sum
70:37 - of 50 and 60 it is 110 and then sum of
70:40 - 100 and 200 is 300 you can call this
70:42 - function any number of times with
70:44 - different values in order to get the
70:46 - different sum over here I'll say 200 +
70:49 - 300 again and then let's say I provide
70:52 - 400 and 500 over here let me just save
70:55 - this file and try running this code all
70:57 - the sums are getting printed and our
70:59 - code is also very clean over here so
71:01 - guys this is the main functionality of
71:02 - using python functions you can simply
71:04 - have the defined keyword followed by the
71:06 - function name and then this arguments
71:08 - list is optional over here you can pass
71:11 - it or if you don't want to pass it there
71:13 - is no need to pass so as you can see
71:15 - over here python function arguments this
71:17 - we have already covered that is in order
71:18 - to pass the argument now one last thing
71:20 - is return statement so guys we have not
71:23 - checked any return statement over here
71:25 - so return is nothing but it will return
71:27 - some value so let's say instead of
71:29 - having the print statement over here we
71:31 - want the print statement outside the
71:33 - function so what we can simply do is we
71:36 - can simply return the expression that is
71:38 - A + B so we can have the return keyword
71:41 - over here so it will say return a plus b
71:44 - so simply whatever value were being
71:46 - passed over here that is 10 and 20 it
71:49 - will return the sum that is 10 + 20 it
71:51 - is equal to 30 to this code code and
71:54 - over here we should have something in
71:56 - order to catch that value so I'll just
71:58 - remove these lines of code for now and
72:00 - then let's say in order to catch the
72:02 - value I provide the sum variable so this
72:04 - sum variable is assigned the value that
72:07 - is being returned from the sum numbers
72:09 - over here which is equal to the sum of
72:11 - these two numbers and then simply we can
72:13 - have the print statement in order to
72:15 - print the sum value so some variable can
72:18 - be printed so let me just save this file
72:20 - and try running this code now so as you
72:22 - can see 30 is getting printed Ed that's
72:24 - because we have passed 10 and 20 over
72:26 - here also to make it more short what we
72:28 - can do is instead of storing the value
72:31 - inside this variable we can simply have
72:33 - the print statement and inside the print
72:35 - statement we can simply call the sum
72:37 - numbers function so as you can see we
72:39 - have the print statement inside this we
72:41 - are calling the sum numbers 10 and 20 so
72:43 - it will return 10 + 20 it is equal to 30
72:46 - so let me just save this file enter I
72:47 - running this code now so 30 is being
72:49 - printed let's say I change the numbers
72:51 - to 20 and 50 over here so 20 + 50 should
72:55 - be 70 let me just run this code so 70 is
72:58 - getting printed and based on the
72:59 - requirement you can format the print
73:01 - function that is you can have any
73:03 - statements being printed over here along
73:05 - with the sum of the numbers so guys this
73:07 - is one of the examples of how you can
73:09 - Define the functions and use them you
73:11 - can have any other logic inside the
73:13 - functions that you want to implement
73:15 - based on your requirements so guys
73:16 - practice on your own so that on
73:18 - different inputs you get different
73:20 - output list in Python Programming so
73:22 - guys a list is a collection of similar
73:24 - or different types of data so for
73:27 - example suppose we need to record the
73:29 - age of five students so instead of
73:31 - creating five separate variables we can
73:34 - simply create a list so as you can see
73:36 - this is the way that we create the list
73:38 - first of all on the left hand side we
73:40 - have the variable name and then on the
73:42 - right hand side inside the open and
73:44 - close square brackets we have the list
73:46 - of elements which are separated using
73:48 - the commas so I'll just copy this line
73:51 - of code over here and then let us move
73:53 - move to the vs code and paste this so as
73:55 - you can see on the left hand side it is
73:57 - the variable name of the list and on the
73:59 - right hand side we have the age of all
74:01 - the students over here and simply we can
74:03 - print the list by using the print
74:06 - function after this we can provide the
74:08 - variable name that is list so let me
74:10 - just save this file enter I running this
74:11 - code now as you can see we are getting
74:13 - the list of all the elements in the
74:15 - sequence that we had provided over here
74:18 - it is very important that all these
74:20 - elements are separated using the commas
74:22 - over here now guys the list can have the
74:24 - same kind of elements that is this one
74:26 - is having the list of integers data type
74:29 - only but we can also have the string as
74:32 - well in between so let's say we have a
74:34 - string called John over here in between
74:37 - this list of elements so this is also
74:40 - possible it will not throw any errors
74:42 - while we are running this code so let me
74:44 - just save this file and try running this
74:46 - code now as you can see we are getting
74:47 - the list of all the values 17 18 and
74:50 - then we are getting John and then 19 and
74:52 - then 14 so this is a kind of a
74:54 - heterogeneous list whereas when we have
74:57 - the same kind of data type in the list
74:59 - then it is called the homogeneous list
75:01 - now how do we access the python list
75:03 - element so basically this is one way in
75:05 - order to access the list but what if we
75:08 - want to access only a single element by
75:10 - using this print statement we have
75:12 - accessed all the elements over here but
75:14 - in case we want to access a particular
75:17 - element from this list then what we can
75:19 - do is in Python each item in a list is
75:22 - associated with a number number so the
75:24 - number is known as a list index so
75:26 - basically all these numbers that is the
75:28 - elements of the list that are present
75:30 - inside the list so these are associated
75:33 - with the indexes which starts from zero
75:35 - so the 17 number is at the zeroth index
75:38 - 18 number is at the first index and so
75:41 - on this is at the second index third
75:43 - index and then so on so basically these
75:45 - elements can be access using these
75:48 - indexes so as you can see we can access
75:50 - elements of an array using the index
75:52 - number now how do we access them so what
75:54 - we can do is we simply come over here
75:57 - I'll simply change this to the number 15
75:59 - that was there previously and what we
76:01 - have to do is let's say I want to access
76:04 - this element that is the fourth element
76:05 - so what will be the index so this is
76:07 - zeroth index then we have one and then
76:09 - two and then three so this is the third
76:11 - index so we can access by using the
76:13 - variable name followed by open and close
76:16 - square brackets and inside those
76:18 - brackets we have to provide the index
76:20 - number that is three in this case which
76:22 - represents this number that is 19 so let
76:24 - me save this file and try running this
76:26 - code now as you can see we are just
76:28 - getting 19 over here previously we were
76:30 - getting the entire list when we don't
76:32 - provide this index number I'll save this
76:34 - file so as you can see all the values
76:36 - are getting printed but when we provide
76:38 - the index number let's say I want to
76:40 - print 18 this time which is at the index
76:42 - one after this index which is zero so I
76:45 - provide list of one over here save this
76:47 - file and run this code so as you can see
76:49 - 18 is getting displayed and this is how
76:52 - it is one way in order to access a
76:54 - particular single element inside this
76:56 - list by using the index number now it is
76:59 - also possible that we provide the
77:01 - negative index in Python so python
77:03 - allows negative indexing for its
77:05 - sequences the index of minus1 refers to
77:08 - the last item minus 2 to the second last
77:11 - item and so on so for now we know that
77:13 - the zero index is the first element over
77:16 - here and then the first index is the
77:17 - second element but what about the last
77:20 - element let's say we don't know the
77:22 - length of the list like how many
77:23 - elements are present inside the list and
77:25 - we want to get the last element over
77:27 - here so since the first element is at
77:30 - the zero index the previous index that
77:32 - is before zero which is minus1 it will
77:35 - point to the last index of this list
77:38 - that is 14 over here so what if we
77:40 - simply do list of minus1 in this case so
77:43 - I'll just provide minus1 in this case
77:46 - let me save this file and try running
77:48 - this code as you can see we are getting
77:50 - 14 so basically the minus1 index will
77:53 - will point to the last element of the
77:55 - list in this case let's say we want to
77:57 - get the second last element so in this
77:59 - case we will simply provide min-2 so
78:02 - after minus1 we are having min-2 which
78:04 - will be the previous element of the last
78:06 - element so let me just save this file
78:08 - andent TR running this code now so as
78:09 - you can see 19 is getting displayed now
78:12 - and this is the way that we can also use
78:14 - the negative indexing as far as
78:16 - accessing the last elements of the list
78:18 - are concerned now there is another
78:19 - concept of slicing in Python list so in
78:22 - py it is possible to access a section of
78:25 - items from the list using the slicing
78:28 - operator which is nothing but a colon
78:30 - not just a single item so let's say we
78:33 - want to access the second and third
78:35 - elements inside the list so we have to
78:37 - use the slicing operator in this case
78:39 - now what is the slicing operator while
78:41 - providing the indices inside the open
78:43 - and close brackets we have to provide
78:46 - the indices and separate them using the
78:48 - colon so what is the index of the second
78:50 - element it is one over here since the
78:52 - first ele element is having the zeroth
78:54 - index we don't want that we want to
78:56 - start from the first index and then we
78:58 - also want the second index so this time
79:00 - we have to provide the next number that
79:02 - is at the third index now so after this
79:05 - one that is the first index we have to
79:07 - provide colon and then we provide three
79:10 - over here so three is not included in
79:12 - this case please remember that whenever
79:14 - you are providing the ending index that
79:16 - element will not be included whenever
79:18 - you are using the slicing operator over
79:21 - here so the elements that will be
79:22 - considered in this case will be at the
79:24 - index one and at the index 2 which means
79:26 - 18 and 15 so let me save this file and
79:28 - try running this code now as you can see
79:31 - we are getting 18 and 15 only let's say
79:33 - you want to get all the elements
79:35 - starting from this 18 so this index is
79:38 - 18 right now and there is no end index
79:40 - that you want to specify over here so we
79:43 - simply have to remove this three and
79:45 - then we can simply specify one followed
79:47 - by the colon so this will make python
79:49 - interpreter to consider all the elements
79:52 - after the first element including the
79:54 - first element itself so let me just save
79:56 - this file now and try running this code
79:58 - so as you can see we are getting all the
79:59 - elements that is 18 15 19 and 14
80:02 - starting from the first index over here
80:05 - so guys this is the way that we can use
80:06 - slicing in the python list also in order
80:09 - to consider all the list elements over
80:11 - here we need not have to specify any of
80:13 - the indexes if we simply provide the
80:15 - colon over here all the elements will be
80:17 - considered let me just save this file
80:19 - andent try running this code now so as
80:21 - you can see all the elements are get
80:22 - getting considered but this thing is
80:24 - kind of a redundant over here that's
80:26 - because if we simply provide the
80:27 - variable name that is list still all the
80:29 - elements will be considered so if we run
80:32 - this code once again so all the elements
80:33 - are being considered over here only when
80:35 - you want to consider the subset of this
80:38 - list you have to use the slicing inside
80:40 - the python list now let us move to the
80:42 - next concept how do we add the elements
80:44 - to a python list so there are two ways
80:46 - to add the elements in the python list
80:48 - the first way is to use the upend
80:50 - function which will help us in order
80:52 - order to add a single item in the list
80:54 - and the second way is to use the extend
80:57 - function in order to add another list to
80:59 - the already existing list so let us
81:01 - check this with the help of examples now
81:03 - over here let's say we already have this
81:05 - list of values inside the list variable
81:08 - and now we want to add more elements so
81:10 - what we will do is we will say list
81:11 - followed by Dot and then we have
81:13 - something called as append so this is a
81:15 - function which will take a single
81:17 - element and it will add to the end of
81:19 - this list so let's say I want to provide
81:21 - 25 s age of another student so let me
81:24 - just save this file now and try running
81:26 - this code so as you can see this element
81:29 - that is 25 it is already added at the
81:31 - end of the list now and in this way we
81:33 - can use the upend function to add more
81:36 - elements inside the list now let's say
81:38 - we have another list over here let's say
81:40 - I provide a list one and the numbers I
81:42 - provide is 1 comma 2 comma 3 over here
81:45 - so three elements are there and we want
81:47 - to add all these elements to the
81:48 - original list that is list variable so
81:51 - what we can do is we can use use the
81:53 - extend function in this case so we have
81:54 - to use this list variable which is the
81:56 - original list variable followed by Dot
81:59 - and then we have the extend function and
82:01 - inside the parenthesis we have to
82:03 - provide this argument that is list one
82:06 - which is another variable having the
82:07 - list of elements and now if we print
82:10 - this list it will have the updated list
82:12 - of values so let me just save this file
82:14 - and try running this code now so as you
82:16 - can see after this 14 1 2 3 elements are
82:19 - also getting added over here since we
82:21 - have used the extend function in this
82:23 - case let us move to another section can
82:25 - we change the list items so basically
82:28 - the python list are mutable meaning list
82:30 - are changeable and we can change items
82:33 - of a list by assigning new values using
82:35 - equal to operator so what I will do over
82:38 - here is I'll just remove these lines of
82:39 - code so I'll simply provide the original
82:42 - list over here so we will say
82:45 - original list followed by colon and then
82:48 - we will print the list so let me just
82:50 - save this file and try running this code
82:51 - now we have the the original list over
82:53 - here I'll just spell this correctly so
82:56 - we have the original list 17 18 15 19
82:59 - and then 14 now let's say at the third
83:01 - position that is 15 we want to change
83:03 - this element to 10 now this is being
83:05 - referred to the second index over here
83:07 - so this is zero index then one and then
83:10 - second index so what we have to do is
83:12 - simply we have to provide list followed
83:14 - by inside the square brackets we will
83:16 - provide the index number that is two and
83:18 - then equal to the new value that is 10
83:21 - that we want to replace it with with and
83:23 - then again what we will do is I'll
83:24 - simply copy this line of code and paste
83:26 - this over here and then we will say
83:28 - updated list and let me just save this
83:31 - file now and try running this code so
83:33 - basically as you can see original list
83:35 - it is having 15 at the third position
83:38 - over here that is at the second index
83:39 - and the updated list is having the
83:41 - number 10 at the same second index over
83:43 - here and this is the way that we can
83:45 - update the list elements so since python
83:47 - list are mutable we can change the
83:49 - elements of the list as well now
83:51 - removing an element from the list so
83:53 - there are two ways either we can use the
83:55 - D function or else we can use the remove
83:58 - function as well so let's say over here
83:59 - we have the original list now so I'll
84:01 - just remove these lines of code and then
84:03 - we can use the D function and Then
84:06 - followed by list and let's say I want to
84:09 - remove this fourth element that is at
84:11 - the index three which is 19 so I'll just
84:13 - provide list of three in this case and
84:15 - then what I will do is I will print the
84:17 - updated list once again so I'll just
84:19 - change this to updated list so basically
84:22 - we are using the de method over here and
84:25 - deleting the third index inside this
84:28 - list so let me just save this file and
84:29 - try running this code now so as you can
84:31 - see we are getting the updated list as
84:33 - 17 18 15 and 14 this element that is 19
84:37 - it was removed already now instead of
84:39 - this we can also use the remove method
84:41 - so in that case we have to use the
84:43 - variable name first in the deel method
84:46 - that is the delete method we simply used
84:48 - the function name and provided the
84:50 - element from the list in order to remove
84:52 - remove from that list but over here we
84:54 - have to provide the variable name
84:56 - followed by Dot and then we can simply
84:57 - use the remove function and Then
85:00 - followed by the position so which
85:01 - position we want to remove so let's say
85:03 - I want to remove this element that is 18
85:05 - over here so in this case we have to
85:07 - provide the value of the element that is
85:10 - present inside the list so in this case
85:12 - we provide 18 in the previous example
85:15 - that we have taken using the deel method
85:18 - we used the index number of the element
85:21 - that is present inside theist but in
85:22 - this case we have to use the value in
85:24 - order to remove it so I'll just save
85:26 - this file and try running this code now
85:28 - as you can see 18 was present in the
85:30 - original list but in the updated list we
85:32 - don't have 18 it is 17 15 19 and 14 and
85:36 - in this way we can remove the elements
85:37 - from the list as well now very important
85:39 - operation how do we iterate through a
85:41 - list so basically we can use the for
85:43 - Loop to iterate over the elements of a
85:46 - list so till now what we have seen is we
85:48 - have just used the list that is the
85:50 - variable name in order to print the
85:52 - elements of those list now if you notice
85:54 - we are getting the square brackets over
85:56 - here open and close square brackets
85:58 - within which all the elements are
85:59 - getting printed but let's say we don't
86:01 - want those square brackets and one by
86:03 - one we want to print all the elements at
86:05 - a time so what we can simply do is use
86:07 - the for Loop and we have seen in the
86:10 - previous videos as well the syntax of
86:12 - the for Loop we have to use the for
86:14 - keyword followed by let's say a
86:16 - temporary variable name that is item
86:18 - followed by the in keyword and then we
86:20 - have to provide the sequence set is list
86:23 - and then after that we have the colon
86:25 - and then we can have the print statement
86:27 - over here now in the print statement if
86:29 - we only provide one item that is item in
86:32 - this case so every time all the elements
86:35 - will be printed on the separate lines
86:37 - over here so let us just try this code
86:39 - so we'll just save this file and try
86:41 - running this code now as you can see 17
86:43 - 18 15 19 14 all the elements are getting
86:46 - printed on the separate lines what if we
86:48 - want all the elements to be present on
86:50 - the same line so what we we can do is
86:53 - after providing comma over here we have
86:55 - the end parameter inside the print
86:58 - function and this end parameter we can
87:00 - have the comma as the character by which
87:03 - we can separate all the elements so by
87:05 - default this is Slash and character
87:07 - which means the next element will be
87:08 - printed on the next line but if we
87:10 - specify this in this way all the
87:12 - elements will be printed on the same
87:14 - line so let me just save this file now
87:15 - and try running this code so as you can
87:18 - see all the elements are getting printed
87:19 - on the same line in the same sequence
87:21 - that is present inside this list so in
87:23 - this way we can iterate through all the
87:25 - elements inside the list that are
87:26 - present by using the fall Loop over here
87:29 - now another important thing how do we
87:30 - find the list so we have something
87:33 - called as python list length so in
87:35 - Python we use the Ln function to find
87:38 - the number of elements present in a list
87:40 - so we can have any number of elements
87:42 - inside the list over here so there is no
87:44 - limit on the number of elements that we
87:46 - are supposed to have inside the python
87:48 - list so in case if we want to find the
87:50 - number of elements inside the the list
87:52 - we can simply use the length function so
87:55 - we can simply print this and then we can
87:58 - have Ln which is a function and then we
88:00 - can provide the variable name of the
88:02 - list inside this Len function over here
88:05 - so it will return us the count of the
88:07 - elements inside the list so let me just
88:09 - save this file and try running this code
88:11 - now as you can see five that is the
88:12 - count of the number of elements inside
88:15 - the list is present over here if we
88:16 - provide some more elements over here
88:18 - let's say I have provided five more
88:20 - elements inside the list let me just
88:22 - save this file now and try running this
88:23 - code so we are getting the updated count
88:25 - that is 10 so 10 is the number of
88:27 - elements set up present inside the list
88:29 - and that is how we can easily find the
88:32 - length of the list in this case by using
88:34 - the Len function over here so Guys these
88:36 - were certain operations as far as list
88:38 - variable is concerned please make sure
88:40 - that you practice on your own and as a
88:42 - homework for you there is something
88:43 - called as a sort function which can help
88:45 - you in order to sort all the elements
88:48 - inside the list so you can practice on
88:50 - your own as a homework for you in order
88:52 - to sort the elements inside the python
88:54 - list and print on your own so we have
88:56 - come to the conclusion of the Python
88:58 - programming language hopefully you have
89:00 - got enough knowledge about the Python
89:01 - language and you should practice on your
89:03 - own so that on different inputs you get
89:05 - different outputs and that is how you
89:07 - are going to learn more about the Python
89:09 - language so that's it at this video I'll
89:11 - see you in the next video till then stay
89:14 - tuned