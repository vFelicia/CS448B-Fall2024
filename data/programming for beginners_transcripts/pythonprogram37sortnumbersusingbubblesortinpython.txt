00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to write
00:03 - Python program to sort numbers using
00:06 - bubble sort algorithm now guys the
00:08 - bubble sort uses a straightforward logic
00:10 - that works by repeating swapping the
00:13 - adjacent elements if they are not in the
00:15 - right order so guys basically we are
00:17 - going to compare a pair of numbers and
00:19 - then we will swap them if they are not
00:21 - in the correct order now it Compares One
00:24 - Pair at a time and swaps if the first
00:26 - element is greater than the second
00:28 - element otherwise move further to the
00:30 - next pair of elements for comparison so
00:33 - guys basically we are going to take one
00:34 - pair at a time and swap the numbers if
00:37 - the first element is greater than the
00:39 - second element over here so as you can
00:41 - see for example we have this list one
00:43 - and then we have these numbers that is
00:44 - five three eight six seven and then two
00:47 - now it compares the first two elements
00:49 - and here 5 is greater than 3 and then
00:52 - swap with each other now we get the new
00:55 - list that is three five eight six seven
00:58 - two so guys basically the first two num
00:59 - numbers are compared over here and if
01:02 - the first element is greater than the
01:04 - second element then we need to swap both
01:06 - the numbers and that is why we have got
01:07 - this result that is three five eight six
01:10 - seven two now in the second comparison
01:12 - again we will take this number that is
01:14 - the second element with the third
01:16 - element over here that is eight so since
01:18 - 5 is less than 8 then there is no
01:20 - swapping that is occurring and that is
01:22 - why we have caught three five eight six
01:24 - seven two the positions are not changed
01:26 - over here now in the third comparison
01:28 - what we do is we take the number eight
01:30 - so since 8 is greater than 6 now that is
01:33 - the next number we swap both these
01:35 - numbers that is six and eight so guys in
01:37 - this way we compare a pair of numbers at
01:40 - a time and ultimately we get all the
01:43 - numbers sorted after the end of the
01:45 - program so guys let us check this Python
01:47 - program in order to implement the bubble
01:49 - short algorithm in vs code so guys over
01:52 - here what we will do is the very first
01:54 - thing is we are going to define the list
01:56 - that is list one and then we will keep
01:58 - the same list over here that is the this
02:00 - list that we have seen so I'll just copy
02:02 - this and paste this over here now guys
02:04 - what we will do is I'll simply print the
02:06 - original list over here so we will say
02:08 - original list
02:11 - and then colon and then we can simply
02:14 - provide the list one over here so we
02:16 - have list one and then what we can do is
02:19 - simply I'll copy and paste this line of
02:20 - code again but this time we will be
02:22 - printing the sorted list over here and
02:25 - it will be returned from a function so
02:27 - we are going to define a function over
02:29 - here the function name will be bubble
02:31 - sort so over here we have Bubble
02:33 - underscore sort and then it is going to
02:35 - take one parameter that is the list one
02:37 - so guys this list one we are going to
02:39 - pass to this bubble sort function which
02:41 - we are going to Define now as a
02:43 - parameter so guys basically what we can
02:45 - do is before this list one we can Define
02:48 - this bubble sort function so we have def
02:51 - keyword followed by this bubble sort
02:53 - function name so I'll just copy this and
02:55 - paste this over here and it is going to
02:57 - take the parameter which will be list
02:58 - one again so guys basically this list
03:01 - one is being passed as a parameter to
03:03 - this bubble sort and we are taking it
03:05 - over here as the parameter now guys we
03:07 - can use the for Loop in order to iterate
03:10 - through all these elements of the list
03:12 - and sort them accordingly so basically
03:14 - we are going to have the first for Loop
03:16 - for I in range and then this range it
03:20 - will go from 0 up to guys we have to go
03:22 - from 0 up to the second last element
03:24 - over here because after this last
03:26 - element there is no other element that
03:28 - will be remaining in order to compare
03:30 - them so basically it will be the length
03:33 - of this list 1 minus 1 in this case so
03:36 - over here we will say length of list one
03:39 - that is being passed and then minus 1 in
03:42 - this case so basically the length of
03:43 - this list is 6 so 6 minus 1 it will be 5
03:46 - so it will go from 0 up to 5 in which
03:49 - case it will only go from 0 up to 4
03:52 - because the last element will not be
03:54 - considered so this is 0 1 2 3 and then 4
03:57 - so this is the second last element up to
04:00 - which this for Loop will be iterating so
04:02 - after this we have colon and then what
04:04 - we have to do is we have to have the
04:06 - nested loop again so we have for J in
04:09 - range and then again this will be going
04:12 - to the second last element over here so
04:14 - the second last element it will be equal
04:16 - to length of list one again so we have
04:19 - length of list 1 and then minus 1 in
04:22 - this case so guys both these four Loops
04:24 - are going up to the second last element
04:25 - over here because after the last element
04:28 - we don't have any other elements which
04:30 - can be compared with that last element
04:31 - over here now guys this jth element is
04:34 - pointing to the first element over here
04:36 - right now so what we have to do is we
04:38 - have to compare this J the element with
04:40 - J plus 1 over here so simply we can
04:42 - check over here if list one that is this
04:46 - list one of J element so this J is
04:49 - element this 5 is it greater than 3 so
04:52 - over here we will check is it Greater
04:55 - then list one of J plus 1 this time so
04:59 - we say J plus 1 over here so guys if
05:01 - this condition is true which means that
05:03 - J is element that is the first element
05:05 - is greater than the second element then
05:07 - we need to swap both the elements so
05:10 - over here what we will do is we will
05:12 - provide a temporary variable and then we
05:15 - will assign it the value of the J the
05:18 - position over here that is 5 is being
05:20 - stored in this temporary variable and
05:22 - then we need to assign the second
05:23 - element to the first element and then
05:25 - the first element which was stored in
05:27 - the temporary variable should be stored
05:28 - in the second element over here so we
05:30 - can simply provide list one of J it is
05:34 - equal to list 1 of J plus 1 this time so
05:38 - the second element is assigned to the
05:40 - first element and then what we can do is
05:43 - the second element that is list one of J
05:46 - plus 1 it will be assigned the value of
05:48 - the temporary variable that is stamp
05:50 - over here so guys in this way if the
05:52 - first element is greater than the second
05:54 - element over here we are simply swapping
05:56 - both the elements and then after this a
05:59 - control flow will go to the next J
06:00 - element that is the second element over
06:02 - here now next time this 5 which will be
06:04 - at this position that is the second
06:06 - element will be compared with this third
06:09 - element over here and then again based
06:11 - on the condition the elements will be
06:13 - solved and the entire list will be
06:15 - sorted accordingly now guys after both
06:17 - these for Loops what we can do is simply
06:19 - we can return the list 1 which is having
06:21 - the sorted number so over here we are
06:23 - just returning the list one now guys let
06:25 - me just save this file now and try
06:26 - running this code so as you can see we
06:28 - have the original list as five three
06:31 - eight six seven two and then the sorted
06:33 - list we are having it as two three five
06:36 - six seven eight so in the sorted list we
06:38 - are having all the numbers which are
06:40 - already sorted now so guys this is a
06:42 - very simple sorting algorithm that is
06:44 - the bubble sort algorithm that you can
06:46 - use in order to sort the list of
06:48 - elements guys after each iteration of
06:50 - this outer for Loop we have the largest
06:53 - number being placed at the last position
06:55 - followed by the second last position and
06:58 - so on so you can verify that by printing
07:00 - the list after this in a for Loop so
07:03 - over here what we can do is simply we
07:05 - can print the list one over here so we
07:07 - have list one because basically you will
07:10 - be able to see all the steps that are
07:12 - happening inside the outer for Loop so
07:15 - let me just save this file now and try
07:16 - running this code so we have provided
07:18 - the print statement after the outer for
07:20 - Loop it should be inside the outer for
07:23 - Loop and outside the inner for Loop so
07:25 - after this in a for Loop we have this
07:27 - print statement which is present inside
07:29 - the outer for Loop over here let me just
07:32 - save this file now and try running this
07:34 - code once again so as you can see the
07:36 - original list it is
07:37 - 538672 now the largest number out of all
07:41 - these numbers it is equal to 8 so 8 is
07:43 - being placed over here at the last
07:45 - position after the first iteration of
07:47 - the outer for low now after the second
07:49 - iteration of the outer for Loop the next
07:52 - highest number is 7 which is coming at
07:54 - the second last position and then the
07:56 - next has number is six which is coming
07:57 - at the third last position and so on all
08:00 - the numbers are getting sorted over here
08:03 - the highest numbers are getting placed
08:05 - at the correct position after each
08:07 - iteration of the outer for Loop in the
08:09 - bubble sort and then guys in the and we
08:12 - have this three two five six seven eight
08:14 - so the last highest number that is three
08:16 - it is getting the correct position over
08:18 - here so we are getting two three five
08:20 - six seven eight and then we are
08:22 - returning the sorted list over here now
08:24 - guys let us check another list of
08:25 - numbers over here in order to see
08:27 - whether it works with the other set of
08:28 - numbers or not so let's say we have 100
08:30 - over here and then comma we have minus 2
08:33 - and then we have 45 and then we have
08:37 - let's say 32 and then let's say we have
08:40 - negative 10 and then the last number
08:42 - let's say we have 9 over here so let me
08:45 - just save this file now and try running
08:46 - this code once again so as you can see
08:49 - we have the sorted list as minus 10
08:51 - minus 2 9 32 45 and then 100 so guys
08:55 - this bubble short algorithm works
08:57 - perfectly in order to sort the list of
08:59 - numbers whatever list of numbers you are
09:01 - providing you will get the sorted list
09:03 - at the end of this program please make
09:05 - sure that you practice on your own so
09:07 - that on different inputs you get
09:08 - different outputs make sure that you
09:10 - like this video so that it reaches to
09:12 - more people and subscribe to the channel
09:14 - so that you get the notifications on
09:15 - upcoming videos as well the next video
09:17 - that we are going to talk about is
09:19 - Python program to print the right
09:21 - triangle star pattern so stay tuned