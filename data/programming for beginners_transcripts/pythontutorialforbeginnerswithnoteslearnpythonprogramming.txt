00:00 - in the next few hours we are going to
00:01 - learn a lot about the Python programming
00:03 - language with the help of the examples
00:06 - and python programs as well while you're
00:08 - watching this video please make sure
00:10 - that you pause this video and practice
00:12 - on your own so that on different inputs
00:14 - you get different output and that is how
00:16 - you are going to learn about the Python
00:18 - programming language you can also watch
00:20 - my other Python tutorial and Python
00:22 - program videos which are available for
00:24 - free on YouTube the link to those
00:26 - playlist I have given in the description
00:28 - section below and we are going to cover
00:30 - all the basics about the Python
00:32 - programming language so let's get
00:34 - started Python tutorial for beginners so
00:36 - if you're completely new to programming
00:38 - languages and want to start with the
00:40 - Python programming language then this
00:42 - video series is for you and it doesn't
00:44 - matter even if you have learned the
00:46 - other programming languages such as Java
00:48 - C C++ and if you're going to learn the
00:51 - Python language for the first time you
00:53 - can watch these video so that we can get
00:55 - started from the completely beginner
00:57 - level and we reach up to the
00:58 - intermediate and expert level as we go
01:01 - through the different concepts of the
01:02 - Python programming language so guys
01:04 - first of all we are going to check the
01:06 - environment setup using the Python
01:08 - language and we are going to use the VSS
01:10 - code as the editor now over here vs
01:12 - stands for visual studio and we are
01:14 - going to use the visual studio code
01:16 - editor in order to write our python
01:18 - programs apart from this vs code setup
01:21 - we are also going to see how do we write
01:23 - the first python code and execute it so
01:26 - guys basically I have written down the
01:27 - steps to install the vs code editor and
01:30 - python interpreter over here so first of
01:32 - all we are going to install VSS code
01:34 - using this link that I have already
01:36 - provided in the description section so
01:38 - when you hit this URL in the browser
01:40 - this is the page that is going to open
01:42 - from where you can easily download the
01:44 - visual studio code it depends on your
01:46 - operating system which installer you
01:48 - want to download you can also download
01:50 - for Windows Mac OS and Linux systems
01:53 - over here so it depends on your
01:54 - operating system once you have
01:56 - downloaded this and installed the vs
01:58 - code on your machine machine the next
02:00 - step is to install python extension in
02:03 - VSS code so guys once you have installed
02:05 - the visual studio code this is the get
02:07 - started page that you will see in the
02:09 - visual studio code ID so over here first
02:12 - of all you are supposed to install the
02:14 - python extension so on the left hand
02:16 - side as you can see there is an
02:18 - extensions button over here on which you
02:20 - can click and then this particular
02:22 - section will open so over here in the
02:24 - search bar you are supposed to type
02:25 - python so once you type python there
02:28 - will be list of extensions that will be
02:30 - available for you so guys this is the
02:32 - extension that you have to install over
02:34 - here so as you can see python
02:36 - intellisense file lens and this is a
02:38 - description that you can see on the
02:40 - right hand side so since I have already
02:42 - installed this python extension on this
02:44 - Visual Studio code I am getting this
02:46 - uninstall button but you will be getting
02:48 - the install button over here if you have
02:50 - not already installed this particular
02:52 - extension guys this python extension
02:54 - helps us in order to write the python
02:56 - programs very efficiently it allows us
02:59 - to have the code completion feature
03:01 - along with this we can also run the
03:03 - python code and have the output from
03:06 - within the visual studio code itself so
03:08 - guys it is very important extension if
03:10 - you are going to Learn Python and want
03:12 - to write the python programs now guys
03:13 - coming to the next step we have to
03:15 - install the python interpretor using
03:18 - this link that I have already provided
03:19 - in the description so once you open this
03:22 - URL in the browser over here this is the
03:24 - page that will open for you and this is
03:26 - the official website of the Python
03:28 - programming language from where you can
03:30 - download the latest version for Windows
03:33 - over here since my machine is Windows I
03:35 - will be downloading this Python and the
03:37 - latest version is
03:39 - 3.11.1 it might so happen that you are
03:41 - watching this video in the future for
03:43 - which the latest version might be
03:45 - something else so you can download the
03:46 - latest version of the Python interpretor
03:48 - from here apart from this you can also
03:50 - get the links to the installer if you're
03:52 - using some other operating system over
03:54 - here so guys once you have installed
03:56 - python on your machine you can quickly
03:58 - open command prompt so over here in the
04:00 - command prompt you can simply type py
04:03 - followed by double hyphen characters and
04:06 - then you provide version and then when
04:08 - you press enter as you can see python
04:12 - 3.11.1 this is the version of python
04:14 - that is already installed on my machine
04:16 - you might have some separate version but
04:18 - the command will be same in order to
04:19 - check whether the python is successfully
04:22 - installed on your machine now guys after
04:24 - successful installation what you have to
04:26 - do is the last step is to connect this
04:28 - python interpreter in vs code so we
04:30 - select the python interpreter in VSS
04:32 - code so over here you have to come on
04:35 - the settings on the bottom left and then
04:38 - over here you can see the command pallet
04:40 - you can also have the shortcut key as
04:42 - Control Plus shift plus P if you're
04:44 - using the keyboard keys and then when
04:46 - you click on this on the search bar you
04:48 - have to type Python and then colon and
04:50 - then we have select interpreter so as
04:52 - you can see this is the option and when
04:54 - you click on this as you can see this
04:56 - python 3.1.1 is getting displayed over
04:59 - over here which you are supposed to
05:00 - select in order to select the python
05:03 - interpretor now guys what we are doing
05:05 - over here is we are connecting this
05:07 - python interpretor with this Visual
05:09 - Studio code so that whenever we write
05:11 - the python code our program gets
05:13 - executed successfully on the vs code
05:16 - itself now guys it might so happen that
05:18 - you don't get this option that's because
05:20 - you have installed python after
05:22 - installing vs code so you can simply
05:24 - restart this vs code in order to get
05:27 - this option over here and once you
05:28 - select thist option you are ready in
05:31 - order to write the python programs in
05:33 - the vs code IDE so guys just by using
05:36 - these four steps of installation you can
05:38 - quickly get started in order to write
05:40 - the python programs in the vs code and
05:42 - all the steps have been documented in
05:44 - this official documentation of the
05:46 - visual Studio website so you can check
05:48 - the content of this documentation as
05:50 - well the link I have given in the
05:51 - description already now guys we are
05:53 - going to write the first code in Python
05:55 - so what we are going to do is we are
05:57 - just going to close these tabs over over
05:59 - here and we are going to open this
06:01 - Explorer over here it is saying no
06:03 - folder opened initially so what you can
06:05 - do is you can create the folder
06:07 - initially in order to organize all your
06:10 - python programs so basically I'm going
06:12 - to just create a new folder over here
06:14 - and I'm going to say python so this is
06:17 - the name of the folder and then I'll
06:19 - select this folder over here so as you
06:21 - can see a new folder that is python has
06:23 - been created now you can write python
06:25 - programs inside this python folder you
06:27 - can have any other folder in any of the
06:30 - directories it depends on you where you
06:32 - want to store the python codes that you
06:34 - will be writing from now on so what we
06:36 - will be doing is as you can see this is
06:38 - the icon it says new file so we will be
06:40 - clicking on this new file and let's say
06:42 - I provide the name of the Python program
06:45 - as python followed by underscore and
06:47 - then we have code followed by dot we
06:50 - have py so guys this is very important
06:52 - that after typing the name of the file
06:55 - we have to append it with py this is the
06:58 - extension of the pyth Python program and
07:00 - this extension will help the vs code in
07:02 - order to interpret that this is the
07:04 - python code and it should execute this
07:07 - code using the python interpretor so
07:09 - guys I'm going to press enter over here
07:11 - and once we press enter this python
07:13 - code. py it is going to open
07:15 - automatically over here now simply we
07:17 - can print some content in our Python
07:19 - program as the first code in Python so
07:21 - over here we have something called as
07:23 - print statement as you can see once we
07:25 - type print it is auto suggesting us what
07:27 - are the different keywords that we can
07:28 - use so so when we press enter over here
07:31 - this print gets selected automatically
07:33 - now inside the open and close
07:35 - parenthesis what we are supposed to do
07:37 - is we can type one particular statement
07:39 - that is the name of the YouTube channel
07:41 - that is programming for beginners which
07:44 - you should definitely subscribe so this
07:46 - is a string that is a statement that we
07:48 - have given over here and this is the
07:50 - very simple Python program that we can
07:52 - write and what this will do is it will
07:54 - simply print this content that is
07:56 - programming for beginners on the console
07:58 - so guys over here you have to come on
08:00 - file and then you can click on save or
08:02 - else you can use the control+ S on the
08:05 - keyboard in order to save the file which
08:07 - I'm going to do in the upcoming videos
08:09 - as well so first of all you save this
08:11 - file and simply you have to come on this
08:13 - top right corner over here you can see
08:15 - this run python file button over here so
08:17 - when you click on this run python file
08:20 - the terminal will open and it will
08:22 - execute this file that is python code.
08:24 - py that we have simply created over here
08:27 - and as you can see programming for
08:28 - beginners string is getting printed so
08:30 - guys in this way we have return the very
08:32 - first code in the python and using the
08:34 - print statement we have printed the
08:36 - programming for beginners we can print
08:39 - any other statement over here as well so
08:41 - let's say I'll provide this as a
08:44 - statement and then when we save this
08:46 - file and try running this code once
08:48 - again as you can see this is a statement
08:50 - is getting printed over here on the
08:52 - terminal so guys this is the way we can
08:53 - easily set up our python interpreter
08:56 - along with the editor that is Visual
08:58 - Studio code you you can use any other
09:00 - editor that you want such as you can
09:02 - simply use the notepad file as well but
09:04 - you will not get such strong features
09:06 - which are provided by the visual studio
09:08 - code in the notepad file apart from that
09:10 - you can also use notepad++ or we have a
09:13 - very popular ID that is py charm and
09:16 - apart from that we have many other
09:17 - editors that you can use but vs code is
09:20 - one of the lightweight editors that you
09:22 - can use when you are writing the python
09:24 - programs python variables constants and
09:27 - literals so guys what are pyth variables
09:30 - so in programming a variable is a
09:32 - container that is a storage area to hold
09:35 - data so as we have seen previously a
09:37 - number is a variable and we can provide
09:40 - the value that is 10 so previously we
09:42 - had seen a string variable in which we
09:44 - had stored some statement whereas we can
09:46 - also have the integer values being
09:48 - stored in the variables so over here if
09:51 - we move to our Visual Studio code so we
09:53 - can simply type number that is the
09:55 - variable name which can be assigned a
09:58 - value so equal Al to 10 so this is
10:00 - nothing but an integer value being
10:02 - assigned to a variable which is named as
10:04 - a number we can also have the string so
10:06 - let's say programming for beginners so
10:09 - we have programming for beginners as the
10:11 - string over here which can be assigned
10:14 - to a variable and the variable name can
10:16 - be given as Str Str or it can be also
10:18 - given as message or any other name that
10:21 - you want to give while writing your
10:22 - Python program Guys these are nothing
10:24 - but variables which can be used later on
10:26 - in the program basically their
10:27 - functionality is to store some values so
10:30 - in this case number is storing the value
10:32 - that is 10 and this Str Str variable is
10:34 - storing the value that is programming
10:36 - for beginner string now guys it is very
10:38 - important to note that python is a type
10:40 - inferred language so you don't have to
10:43 - explicitly Define the variable type it
10:45 - automatically knows that 10 is an
10:47 - integer and declares the number variable
10:50 - as the integer so guys basically it
10:53 - depends on the value that we are
10:54 - providing so just because you are typing
10:56 - number as the name of the variable it
10:59 - doesn't mean that it has to be
11:00 - necessarily having the integer value you
11:03 - can also have the string value as well
11:05 - so when I copy this and paste this over
11:08 - here the number will have programming
11:10 - for beginners but guys this doesn't make
11:12 - any sense over here but programmatically
11:14 - this is also possible that's because we
11:16 - don't have to provide any data type over
11:18 - here in the python programs so whatever
11:20 - the value is data type will be given to
11:23 - that particular variable based on the
11:25 - value that is being provided to the
11:26 - variable this is very important Point as
11:28 - far as as python programs are concerned
11:30 - in other programming languages such as
11:32 - Java or C++ we have a very strict data
11:35 - type that needs to be provided before we
11:38 - provide our variable names over here and
11:41 - guys this is also one of the advantages
11:42 - of using the Python program it allows us
11:45 - to write the code quickly compared to
11:47 - other programming languages now guys
11:48 - moving forward what is the python
11:50 - constant so basically a constant is a
11:53 - special type of variable whose value
11:55 - cannot be changed so for example as you
11:57 - can see the pi value is 3.14 so over
12:00 - here guys before defining the constant
12:03 - variable what we can do is if we simply
12:05 - print this variable over here that is
12:07 - print followed by number that is being
12:10 - given inside the parenthesis I'll save
12:12 - this file and TR running this code now
12:14 - so as you can see programming for
12:15 - beginners is getting printed that's
12:17 - because the value is given as
12:18 - programming for beginners let's say I
12:20 - provide the integer that is 20 over here
12:23 - and then when I save this file enter I
12:24 - running this code now the number should
12:26 - have the value that is 20 and that is
12:29 - should be printed so as you can see when
12:30 - we run this code 20 is getting printed
12:33 - over here so whatever value is being
12:34 - stored and whichever variable we want to
12:36 - print the content of that variable will
12:38 - be printed now coming to the constants
12:41 - that we have just defined so in Python
12:44 - let's say if you provide pi equal to
12:46 - 3.14 over here so instead of this number
12:49 - we provide Pi it is equal to 3.14 I'll
12:51 - just remove this line of code and then
12:53 - simply I'll provide pi over here so what
12:56 - will happen is it will display this
12:58 - value that is 3 3.14 I'll save this file
13:00 - and try running this code now as you can
13:02 - see 3.14 is getting printed but guys
13:05 - what is the use of this constant
13:06 - basically we are saying that Pi is
13:08 - constant over here that's because using
13:10 - this nomenclature that is the constant
13:13 - variable must have all the characters as
13:15 - the upper case so this can Define that
13:18 - it is a constant over here but is it
13:20 - actually a constant no in this case
13:22 - since again we can use pi over here and
13:25 - we can provide some other values as well
13:27 - such as 5.1 5 over here so when I save
13:30 - this file entery running this code now
13:32 - it is saying now that Pi is having 5.15
13:35 - which is the latest value so guys there
13:37 - is no concept of python constants over
13:39 - here right now but what we can do is we
13:41 - can save this value in some other file
13:43 - so let's say I create another file over
13:45 - here and name it as constant followed by
13:48 - the extension that is py over here when
13:50 - we press enter we can simply provide
13:53 - this statement that is Pi = to 3.14 I'll
13:56 - just copy this and paste this over here
13:58 - so we we have provided pi equal to 3.14
14:01 - now what we can do is coming to this
14:03 - python code what we can do is we can use
14:06 - the import keyword now guys this import
14:09 - keyword is used in order to import some
14:12 - other python files into this file so
14:14 - that we can use the content of that
14:16 - other python files over here so we are
14:18 - going to import this constant. py in our
14:21 - python code program so import we can say
14:24 - constant over here so when we type
14:26 - constant as you can see constant is
14:28 - getting getting Auto suggested over here
14:30 - that's the very important feature of the
14:32 - intellisense which is included in the
14:34 - python extension that we had installed
14:36 - so we provide constant over here and
14:39 - what we have to do is while printing we
14:41 - can simply provide this constant over
14:43 - here that is constant followed by Dot
14:45 - and then as you can see Pi is getting
14:48 - Auto suggested that's because we had
14:49 - defined pi over here so we simply have
14:52 - to provide Pi so what will happen is it
14:55 - will print the value of the pi so when
14:57 - we save this file and try running this
14:59 - code now once again it says module
15:01 - constant has no attribute Pi so guys
15:04 - that may be because we have not saved
15:06 - this file that is constant let me come
15:07 - over here and save this file over here
15:09 - once again and I'll go to this python
15:11 - code and then run this file once again
15:13 - so as you can see now 3.14 is getting
15:16 - displayed so guys if you want to use
15:18 - some constant values you can have a
15:20 - separate file that is constant. py in
15:22 - which you can store all the constant
15:24 - variables let's say we have another
15:26 - variable over here that is St Str and
15:29 - then we provide string s the value so
15:32 - this Str Str can also be treated as a
15:34 - constant for which the values never
15:35 - change while we are executing the code
15:38 - I'll save this file over here and let's
15:39 - say if I want to print the string as
15:42 - well so I'll copy this line of code
15:44 - paste this over here and instead of Pi
15:46 - we will provide St Str now so we provide
15:49 - constant. pi and constant do s Str also
15:52 - so when we save this file and try
15:53 - running this code now we get both the
15:55 - things that is 3.14 we get the string
15:57 - value as well so if you want to use the
15:59 - constants in Python you can have a
16:01 - separate file all of the constants can
16:03 - be defined over there and then you can
16:05 - import that constant file and use the
16:08 - various variables that you have defined
16:09 - as constant in order to write your
16:11 - python programs so guys moving forward
16:13 - over here what are python literals
16:15 - literals are representations of fixed
16:17 - values in a program they can be numbers
16:20 - characters or strings etc for example
16:23 - hello world is one of the literal then
16:25 - 12 is another literal 23.0 Z and then C
16:29 - character true false Etc so guys
16:32 - literals are nothing but these values so
16:34 - basically this value it is a literal
16:37 - this particular name that we have given
16:39 - is the identifier or also called as
16:41 - variable but in this case it is a
16:43 - constant now this variable becomes
16:45 - constant when the value cannot be
16:47 - changed but we can change this any time
16:49 - in this code but not over here an
16:51 - identifier can be a constant when we
16:53 - don't want to change its value anytime
16:56 - in our Python program and again the
16:58 - string string value inside the double
17:00 - codes it is a literal python data types
17:02 - in which numeric string list tle set are
17:06 - included so Guys these are the different
17:08 - data types that we can see in this video
17:10 - and the upcoming videos as well so
17:12 - basically in computer programming data
17:14 - type specify the type of data that can
17:17 - be stored inside a variable so for
17:19 - example number it is equal to 24 so 24
17:22 - value belongs to the numeric data type
17:25 - and this is the integer value inside the
17:28 - numeric data type we have many other
17:29 - data types such as integer value then we
17:32 - have float value as well in which there
17:34 - is a decimal point we have a complex
17:36 - value as well in which as you can see
17:38 - this expression that is 1 + 2J this is a
17:41 - complex expression so all these are
17:43 - having numeric data types over here so
17:45 - number over here is a numeric data type
17:47 - or the integer as you can see 24 is the
17:50 - value if it was 24.5 then we would say
17:53 - that number variable is of float data
17:55 - type so guys let us check this with the
17:57 - help of example what we can do is we can
17:59 - simply copy these lines of code over
18:01 - here I'll copy this and we'll paste this
18:04 - over here now what we will do is this
18:06 - constant. py that we had created
18:08 - previously I'll just remove from our
18:10 - python folder over here since it is no
18:12 - longer needed and we will simply keep
18:14 - python code. py where we are going to
18:17 - write all the programs over here so guys
18:19 - over here I'll simply replace the
18:22 - content of this file by this content
18:24 - I'll save this file and over here in the
18:26 - terminal I'll simply clear the script so
18:28 - as you can see num one it is defined as
18:30 - five which is the integer that is being
18:33 - assigned to num one so the data type
18:35 - over here will be the integer data type
18:37 - and using this print statement what we
18:39 - are doing is we are using this num one
18:41 - and then followed by comma is of type
18:44 - which means num one will be printed that
18:46 - is five will be printed and then we will
18:48 - have is of type string being printed and
18:51 - then type this is another method that is
18:53 - being used in order to get the type of a
18:56 - variable so as you can see this is the
18:58 - syntax that first we provide type and
19:00 - Then followed by open and close
19:02 - parenthesis and over here inside this we
19:04 - have num one that is the variable name
19:07 - guys similarly we have provided num 2s
19:09 - 2.0 and the same thing we are doing that
19:11 - is we are finding the type over here and
19:13 - then in the num three as well we are
19:15 - getting the type of this num three
19:17 - variable let me just save this file
19:19 - enter are running this code now so as
19:21 - you can see five is of type Class end so
19:25 - this is of the integer data type 2.0
19:28 - since it is having the decimal over here
19:30 - it is saying it is of type float over
19:32 - here and 1 + 2 J it is of type complex
19:36 - over here so these are all numeric data
19:38 - types and inside the numeric data types
19:40 - these are described as integer float and
19:43 - complex values now apart from this guys
19:45 - we have other data types as well such as
19:47 - string that we had seen previously we
19:49 - have list as well tle and set so guys
19:52 - let us check this one at a time so over
19:54 - here what we will do is simply I'll
19:55 - provide Str Str and then I provide the
19:58 - Str Str value as programming for
20:02 - beginners so what we will do over here
20:04 - is we want to find the type of this Str
20:06 - Str variable so what we can do is we can
20:09 - simply have the print statement followed
20:12 - by open and close parenthesis and we can
20:14 - simply have the type function so guys as
20:17 - you can see type is being Auto suggested
20:18 - over here we will select this and inside
20:21 - the open and close parenthesis we will
20:23 - use this variable so I'll just copy this
20:25 - and paste this over here that is St Str
20:27 - and then when we save this file and try
20:29 - running this code now as you can see
20:31 - class that is Str Str is getting printed
20:33 - over here we can also have some string
20:35 - value over here that is first of all we
20:37 - are going to type St Str that is the
20:40 - value of this St Str and Then followed
20:42 - by comma and then we can simply have is
20:46 - of type inside the single codes over
20:49 - here guys it is very important that
20:51 - whenever you want to type certain
20:52 - characters we should either have it
20:54 - inside the single codes or double codes
20:57 - as we have seen over here and then when
20:58 - we save this file ENT running this code
21:01 - it will show us the data type of this
21:02 - string with a more sensible statement so
21:05 - as you can see programming for beginners
21:07 - this is the string value that we have
21:08 - given and then is of type now this is of
21:11 - type we have provided over here and then
21:14 - this type function that is St Str it is
21:16 - returning the type of this Str Str
21:18 - variable which is class St Str over here
21:21 - so this is a string data type now guys
21:23 - this Str Str over here it stands for
21:25 - string and not the name of this variable
21:28 - if I provide here something else then it
21:30 - will be more sensible so let's say if I
21:32 - provide statement over here as the name
21:34 - I'll copy this and paste this over here
21:36 - and when we run this code once again so
21:39 - as you can see it says class s Str is of
21:41 - type class s Str so since we have not
21:43 - replaced this Str Str with the statement
21:45 - that is why we are not getting it
21:47 - properly I'll run this code once again
21:49 - now so as you can see programming for
21:51 - beginners which is the value of this
21:52 - statement variable over here and then is
21:55 - of type and then we have class Str Str
21:57 - over here here now apart from this we
21:59 - have other data types as well such as
22:01 - list which can be defined as the square
22:03 - brackets so what we have to do is let's
22:05 - say I provide list one as the name of
22:08 - the variable and then equal to now guys
22:10 - list is nothing but it is a data type
22:13 - that have collection of elements so over
22:15 - here let's say we have collection of
22:16 - strings so let's say we have collection
22:19 - of fruits over here so the first fruit
22:21 - is Apple followed by comma and then
22:24 - again we have double quotes and then we
22:26 - have mango so all the elements are being
22:28 - separated using the comma over here as
22:30 - you can see and then let's say we have
22:33 - banana over here as the third fruit so
22:35 - what we can do is we can simply have
22:37 - print statement over here and then we
22:40 - can have type of this list one so I'll
22:43 - say list one over here when we save this
22:46 - file and try running this code now as
22:48 - you can see class list is getting
22:50 - printed so this is of data type that is
22:52 - list over here similarly we have tle and
22:55 - set as well which we are going to see in
22:56 - the upcoming videos what are the
22:58 - different contents of these data types
23:00 - and how do we use them and when do we
23:02 - use them so guys for now you just need
23:04 - to remember that whatever value that we
23:06 - provide to a particular variable
23:08 - automatically that data type will be
23:10 - assigned to that particular variable
23:12 - basic input and output in Python
23:14 - Programming so guys in this tutorial we
23:16 - will learn simple ways to display output
23:18 - to the users and take input from users
23:21 - in Python with the help of examples now
23:24 - guys as we have seen previously in
23:26 - Python we can simply use the print print
23:28 - function to print the output so let us
23:30 - check this with the help of example over
23:32 - here so I simply want to print a
23:34 - statement so let's say I want to print
23:36 - programming for beginners that is the
23:39 - name of this YouTube channel which you
23:40 - should definitely subscribe if you have
23:42 - not subscribed it yet so once we provide
23:45 - the string inside the double codes we
23:47 - can simply save this file and try
23:49 - running this code now so on the terminal
23:51 - we will be able to see the string
23:53 - getting printed that is programming for
23:55 - beginners I have missed out an O
23:56 - character over here so this is the
23:58 - correct string so programming for
24:00 - beginners is the string that we want to
24:02 - print and that is what we have got over
24:04 - here in the terminal now guys even with
24:06 - this print function over here this is a
24:08 - function and it takes certain parameters
24:10 - so parameters are nothing but certain
24:12 - values that you can provide to the
24:13 - function so as you can see the actual
24:16 - syntax of the print function accepts
24:18 - five parameters so basically we have
24:20 - only provided one parameter over here
24:22 - this can be treated as a parameter that
24:24 - is the value that we want to print now
24:26 - apart from this we also have other
24:28 - parameters as well so object is the
24:30 - parameter which is nothing but the value
24:33 - to be printed apart from that we have
24:35 - separator then we have end parameter
24:37 - file and then flush parameter so these
24:40 - are the five parameters and these are
24:42 - the descriptions of each and every
24:43 - parameter so over here the separator
24:45 - which is an optional parameter since we
24:48 - have not provided any separator over
24:49 - here it allows us to separate multiple
24:52 - objects inside print so let's say after
24:55 - this string I want to provide another
24:57 - number over here so let's say 1 2 3 4 is
24:59 - the number that I want to provide now I
25:02 - want these objects that is one is
25:03 - programming for beginners which is a
25:05 - string and another object that is a
25:07 - number to be separated using commas so
25:09 - what we will do is after providing comma
25:12 - we will use the SCP that is another
25:14 - parameter as you can see vs code is
25:16 - providing us the autoc completion
25:18 - feature over here so we just need to
25:20 - select that and then we need to provide
25:23 - single codes and inside this we provide
25:25 - comma followed by the space character so
25:28 - guys what will happen is all the objects
25:30 - will be separated by using this comma
25:32 - and the space character over here it
25:34 - depends on your requirement how many
25:35 - objects you want to provide inside this
25:37 - print statement so let me just save this
25:39 - file and try running this code now so as
25:42 - you can see programming for beginners
25:44 - and then we have this comma followed by
25:46 - the space character and then we have
25:47 - this 1 2 3 4 object being printed over
25:50 - here we can have another object so let's
25:52 - say I provide another string that is
25:54 - another statement over here so let me
25:57 - just say save this file andery running
25:58 - this code now so we are getting an error
26:00 - invalid syntax perhaps you forgot a
26:03 - comma so basically after providing each
26:05 - and every object we have to separate it
26:07 - using the comma over here and then let
26:09 - me save this file and try running this
26:11 - code now so as you can see programming
26:13 - for beginners followed by comma and then
26:15 - we have space characters and then we
26:16 - have 1 2 3 4 again we have comma and
26:18 - then space character and then we have
26:20 - another statement so guys in this way we
26:22 - can use the separator parameter as well
26:25 - in order to separate the different
26:26 - objects inside the print function now
26:29 - going to next parameter which is end
26:31 - over here which is again optional by
26:33 - default it is the slend character in
26:35 - which case the control flow goes to the
26:37 - next line Whenever there is another
26:39 - object that is getting printed over here
26:41 - so as you can see it allows us to add
26:43 - specific values like new line or tab
26:45 - character so guys let's say we have this
26:47 - print function over here I'll just
26:49 - remove this part of the line over here
26:51 - and let's say I have another print
26:53 - function in which case I am providing
26:55 - another statement so let's say we have
26:57 - have another statement over here so guys
27:00 - what will happen is by default this end
27:03 - parameter is having the Slash and
27:04 - character which means the control flow
27:06 - should go to the new line Whenever there
27:08 - is a next print statement that is
27:10 - encountered so let me just save this
27:12 - file and try running this code now so as
27:14 - you can see programming for beginner
27:15 - string is getting printed in first line
27:17 - and on the second line another statement
27:19 - is getting printed now what if we want
27:22 - both these statements to be printed on
27:24 - the same line but they are present in
27:26 - the different print function so what we
27:28 - will have to do is in the first print
27:30 - function I will provide a comma over
27:32 - here and then we have the end parameter
27:35 - so as you can see this end parameter we
27:37 - have to select and then inside the
27:39 - double codes I'll simply provide the
27:41 - full stop followed by the space
27:43 - character so guys what is happening over
27:45 - here is after the string is getting
27:47 - printed at the end of the line we are
27:49 - providing this full stop and then
27:51 - followed by the space character and then
27:53 - whenever there is a next string that is
27:55 - encountered by the control flow it will
27:57 - get printed on the same line so let me
27:59 - just save this file and try running this
28:01 - code now so as you can see programming
28:03 - for beginners and then we have a full
28:05 - stop and then we have the space
28:06 - character as well and then we have
28:08 - another statement that is getting
28:09 - printed so guys we can also use this end
28:12 - parameter if we want multiple print
28:15 - functions to be used but all the objects
28:17 - need to be printed on the same line the
28:19 - other two parameters are file which is
28:21 - again optional where the values are
28:23 - printed so basically by default the
28:25 - values are printed on the screen and
28:27 - that is why its default value is system.
28:30 - STD out which means it should print on
28:32 - the screen you can also provide some
28:34 - file path over here so that the content
28:37 - can be return in the file apart from
28:39 - that we also have the flush which is
28:40 - again an optional parameter it is a
28:42 - Boolean specifying if the output is
28:44 - flushed or buffered so by default it is
28:47 - having the false value so Guys these two
28:49 - parameters you can practice on your own
28:51 - as a homework for you apart from that
28:53 - guys it is very important that how do
28:55 - you take input from the user in Python
28:58 - Programming so basically while
28:59 - programming we might want to take the
29:02 - input from the user in Python we can use
29:04 - the input function so as you can see we
29:07 - have a variable over here or we can say
29:09 - identifier it is equal to we have used
29:12 - the input function so guys this input
29:14 - function it will take a parameter which
29:16 - will be kind of a label which will be
29:18 - printed on the screen for the user as a
29:21 - instruction so we are asking the user to
29:23 - enter a number and the number that will
29:25 - be entered by the user will be stored in
29:28 - this num variable over here so guys let
29:30 - us check this with the help of example
29:32 - now I'll just remove these lines of code
29:34 - so what we have to do is let's say we
29:36 - provide the number variable it is equal
29:38 - to we have to use the input function as
29:40 - you can see this is the function that is
29:42 - being suggested by the vs code over here
29:44 - and then using the open and close
29:46 - parenthesis inside this we have to
29:49 - provide a string inside the double codes
29:51 - so we can simply provide enter a number
29:54 - now this is a instruction to the user to
29:56 - enter the number now guys what we can do
29:58 - is we can print this number now we can
30:01 - easily print this by using a string so
30:03 - let's say we provide the string over
30:04 - here that is
30:06 - entered number is and Then followed by
30:09 - colon and then after this object we have
30:12 - to provide a comma and then we can
30:14 - provide the number variable to be
30:15 - printed so we have provided the number
30:17 - variable over here let me just save this
30:19 - file andent try running this code now so
30:21 - as you can see it is asking the user
30:23 - over here to enter a number so what I
30:25 - will provide is simply I will provide 10
30:28 - as the number and then when I press
30:29 - enter as you can see entered number is
30:32 - 10 so this string is getting printed
30:35 - along with the number that is being
30:37 - entered by the user now guys it is very
30:39 - important to note that whenever we are
30:41 - using this input function the input that
30:44 - is taken by the user will be of the type
30:46 - string over here so if we print the type
30:48 - of this number variable over here let me
30:51 - just do that so we simply provide data
30:53 - type of number colon and and then what
30:57 - we have to do is after comma we have to
31:00 - use the type function and inside this
31:02 - function we have to provide the number
31:04 - variable let me just save this file
31:05 - enter I running this code now enter a
31:08 - number so let's say I provide 10 as the
31:10 - number as you can see enter number is 10
31:12 - and after this data type of number it is
31:15 - class string so this is of string data
31:18 - type so whatever input is being taken
31:20 - from the user it will be stored as a
31:22 - string so what we have to do is we have
31:24 - to convert it into a number now since
31:27 - this is a string we cannot add another
31:29 - number to this particular number so
31:30 - let's say if we try to add some another
31:32 - number over here so we simply do number
31:35 - + 5 over here let me just save this file
31:37 - enter I running this code now so when we
31:40 - provide 10 as the number when I press
31:42 - enter as you can see it says can only
31:45 - concatenate string not end that's
31:47 - because we are trying to concatenate a
31:50 - string with a number over here that is
31:52 - the integer so what we have to do is we
31:54 - have to convert this input into an
31:57 - integer so we can simply provide int
31:59 - over here and then the entire input
32:02 - function needs to be enclosed within the
32:04 - open and close parenthesis so guys this
32:06 - we had seen previously as well this is
32:08 - the explicit type conversion over here
32:10 - which is the manual type conversion in
32:12 - which we are converting the string data
32:14 - type to the integer data type and now we
32:16 - will have the integer over here which
32:18 - can simply be added with another integer
32:21 - so let me just save this file and try
32:22 - running this code now so as you can see
32:25 - enter a number this time let's say I
32:27 - provide 15 as the number and then when I
32:29 - press enter as you can see entered
32:31 - number is so what is happening is this
32:33 - number that is 15 was taken and then
32:36 - five was added to this number and that
32:38 - is why 15 + 5 is 20 and this number is
32:41 - getting printed over here and you can
32:42 - see this data type of number now it is
32:45 - of the type integer that's because we
32:47 - have used the type conversion over here
32:49 - so guys this is the way you can take
32:51 - input from the user make sure that
32:53 - whenever you're using the input function
32:55 - the data that is being entered by the
32:57 - user is of the type string and you need
32:59 - to convert it into the appropriate data
33:01 - type before you can use the other
33:03 - operators arithmetic operators in Python
33:06 - Programming so guys arithmetic operators
33:09 - are used to perform mathematical
33:11 - operations like addition subtraction
33:14 - multiplication and many other operations
33:16 - which can be done using the integers or
33:18 - the numbers in Python so guys for
33:20 - example let's say we provide the print
33:22 - function over here and inside this
33:24 - function we provide 5 + 6 as the
33:27 - parameter so what will happen is the
33:29 - plus operator is being used over here in
33:31 - order to add these two numbers that is
33:33 - five and six and the result that is 11
33:35 - will be printed so let us quickly check
33:37 - this with the help of example over here
33:39 - so what we will do is we will use the
33:41 - print function and inside this
33:43 - parenthesis we will simply provide 5 + 6
33:46 - over here and when we just save this
33:48 - file and try running this code now so as
33:50 - you can see 11 is getting printed so
33:52 - guys what we have done over here is we
33:54 - have simply used the plus operator in
33:56 - order to to add two numbers we can also
33:59 - do this by using the variables as well
34:01 - so let's say we provide num one it is
34:03 - equal to 10 and let's say we provide num
34:06 - 2 it is equal to 20 and then let's say I
34:09 - provide sum it is equal to num 1 plus
34:13 - num two over here so guys basically once
34:15 - again we have used this plus operator in
34:18 - order to add two numbers that is num one
34:20 - and num two for which the values are 10
34:23 - and 20 respectively and the result will
34:25 - be stored in this sum and when we
34:27 - provide this sum inside the print
34:29 - statement we will get that result so let
34:31 - me just save this file and try running
34:33 - this code now so as you can see 30 is
34:35 - getting printed that is the sum of 10 +
34:37 - 20 over here so guys this is one of the
34:40 - arithmetic operator that is plus is
34:42 - being used in order to add the two
34:44 - numbers apart from this addition we have
34:46 - other operators as well as you can see
34:48 - subtraction we have in which the two
34:50 - numbers can be subtracted so over here 4
34:53 - - 2 it is equal to 2 so over here minus
34:56 - operator is is being used we have
34:58 - multiplication as well in which multiply
35:00 - operator is used in order to multiply
35:02 - two numbers we have division as well in
35:05 - order to divide the two numbers so as
35:07 - you can see 4 / 2 it is equal to 2 so we
35:10 - are getting the quotient over here and
35:12 - we have the modular operator as well
35:14 - which can be used by using this percent
35:17 - operator so guys what happens is 5% 2
35:20 - what this will do is it will divide the
35:22 - number on the left hand side that is
35:23 - five by the number on right hand side
35:25 - that is two so 5 ID 2 it will give us
35:28 - the quotient as 2 but the remainder will
35:31 - be one and we will be getting the
35:33 - remainder of this operation that is 1
35:35 - over here and similarly we have power
35:36 - operator as well so as we can see four
35:39 - and then 2 * multiplication symbol over
35:41 - here which is the power symbol and then
35:43 - 2 which means 4 * 4 will be done which
35:46 - is equal to 16 so basically this is
35:49 - nothing but the square of the number in
35:51 - this case it is the square of this
35:52 - number that is four so guys let us check
35:55 - all these operators with the help of
35:56 - examples over here so what we will do is
35:59 - first of all we will print and add two
36:01 - numbers so let's say we provide 10 as
36:03 - first number and 20 is the second number
36:06 - so this is the addition of two numbers
36:08 - let's say we want to subtract two
36:09 - numbers over here and the two numbers
36:11 - are let's say 20 and then minus what we
36:14 - do is we will minus 15 over here let's
36:17 - say the third expression is
36:18 - multiplication so I will simply provide
36:20 - five as the number multiplied by seven
36:23 - as another number the next operator is
36:25 - the Divide operator so let's say I
36:27 - provide the print statement over here
36:29 - and we provide 50 as one number divided
36:31 - by 10 as another number and then we have
36:35 - another print statement let's say we
36:37 - want to find the remainder after
36:39 - dividing two numbers so let's say 40 is
36:41 - one number and then we provide
36:44 - percentage sign and then we provide 15
36:46 - as the second number and then the last
36:48 - operator that is the power operator I
36:51 - simply provide five as the number and
36:53 - then two times multiplication over here
36:55 - which means power and then I provide two
36:57 - as the second number so guys let me just
36:59 - save this file and try running this code
37:01 - we will check the results of all these
37:03 - operations over here so as you can see
37:05 - the first print statement that is 10 +
37:07 - 20 it is providing us 30 as the result
37:09 - and this is the correct result over here
37:11 - 20 - 15 should be five and that is what
37:14 - we are getting over here as 5 and then 5
37:16 - * by 7 it is equal to 35 and we are
37:19 - getting 35 over here then 50 ided 10
37:22 - should give us the quotient that is 5
37:24 - and we are getting 5.0 over here and
37:27 - then 40% 15 which means 40 is divided by
37:30 - 15 and then what is the remainder is
37:33 - getting returned to this print function
37:35 - and 10 is getting returned why 40
37:38 - divided 15 the quotient will be 2 that
37:40 - is 15 * 2 is 30 but the remaining number
37:44 - will be 10 which will be the remainder
37:46 - and that is what we are getting over
37:47 - here is the 10 as the remainder and then
37:50 - 5 power 2 which means 5 * 5 is done over
37:53 - here and 5 * 5 is 25 and that is what we
37:56 - are getting over here so Guys these are
37:58 - certain arithmetic operators that you
38:01 - can use which include addition
38:03 - subtraction multiplication division and
38:05 - then finding the remainder of the two
38:07 - numbers by dividing them and then we can
38:09 - also find the power of the number so
38:11 - guys you can use them based on your
38:13 - requirements logical operators in Python
38:16 - Programming so guys The Logical
38:17 - operators are used to check whether an
38:20 - expression is true or false so they are
38:23 - used in decision making so as you can
38:25 - see for example let's say the value of
38:27 - variable that is a is equal to 5 and the
38:30 - value of B variable is 6 over here and
38:32 - we have the print statement over here
38:34 - and there are two conditions that we are
38:36 - checking first of all whether a is
38:38 - greater than two so in this case the
38:40 - return will be true over here that's
38:42 - because the value of a that is five is
38:45 - actually greater than two over here and
38:47 - then as you can see this end keyword
38:49 - this is nothing but this is one of the
38:51 - logical operators it is being used in
38:53 - order to check the multiple conditions
38:55 - and the second condition that is being
38:57 - checked over here is whether B is
38:59 - greater than or equal to 6 so in this
39:02 - case since B is equal to 6 so yes in
39:04 - this case it is also true so basically
39:06 - since both the Expressions over here
39:08 - that is the second expression and the
39:10 - first expression is true and because
39:12 - this end logical wants all the
39:14 - Expressions to be true the return for
39:16 - the entire expression will be true over
39:19 - here so as you can see these are certain
39:20 - logical operators over here first of all
39:22 - we have the end operator which means A
39:25 - and B it is true true only if both the
39:27 - operant that is a and b are true over
39:30 - here similarly we have r as well so as
39:32 - you can see A or B in this case only one
39:35 - operant needs to be true that is only
39:37 - one condition needs to be true over here
39:39 - so this will be true if at least one of
39:41 - the operant is true and then we also
39:43 - have the not operator in which case we
39:46 - can use it as not a so it will be true
39:49 - if the operant is false and it will be
39:51 - false when operant is true over here so
39:53 - guys let us check all this with the help
39:55 - of examples over here so let's say we
39:57 - have the variable that is a is equal to
39:59 - 5 and B it is equal to 6 over here so we
40:02 - simply have the print statement and
40:04 - let's say we provide the condition that
40:07 - is a is it greater than two over here
40:09 - and we also have another condition so
40:11 - using the and logical operator over here
40:14 - we can combine multiple conditions so
40:16 - next time we will be checking whether B
40:19 - is greater than or equal to 6 so guys in
40:21 - this case both these conditions that is
40:23 - a greater than two will return as true
40:26 - and then B is greater than or equal to 6
40:28 - will also return as true so this entire
40:30 - expression will be true over here so let
40:32 - me just save this file and try running
40:34 - this code now so as you can see true is
40:36 - getting returned over here now what if
40:38 - one of the conditions is false over here
40:40 - so what we have to do is let's say I
40:42 - provide a less than 2 in which case this
40:45 - particular expression will become false
40:47 - so let me just save this file and try
40:49 - running this code now so as you can see
40:51 - false is getting returned that's because
40:52 - one of the Expressions while using the
40:54 - end logical operator is false over here
40:57 - and according to rules all the
40:59 - Expressions while using the end logical
41:01 - operator must be true in order to return
41:04 - the true as the result now guys if we
41:06 - check the same conditions that is both
41:08 - these conditions by using the or logical
41:10 - operator so we simply have to provide or
41:13 - over here and let me just save this file
41:14 - and try running this code now so as you
41:16 - can see true is getting returned that's
41:18 - because the second expression over here
41:20 - is true and the first expression over
41:22 - here is false so anyway the all logical
41:25 - operator wants one of the conditions to
41:27 - be true and that is why we are getting
41:29 - the true as the result over here what if
41:31 - we make the second condition false over
41:33 - here so let me just change this
41:35 - expression to B less than 6 over here
41:38 - let me just save this file and try
41:39 - running this code now so as you can see
41:41 - false is getting return that's because
41:43 - is a less than 2 no in this case so
41:45 - false is getting returned over here and
41:47 - is B less than 6 over here no in this
41:50 - case it is equal to six so this
41:51 - expression is also false so the entire
41:54 - expression is false and that is the only
41:56 - combination where the or logical
41:59 - operator will return us the false result
42:01 - now guys when do we use this not
42:02 - operator over here so let's say I have
42:04 - just a simple expression so over here I
42:07 - will provide is a less than 4 over here
42:10 - so in this case is a less than four no
42:13 - so it should return false so let us save
42:15 - this file and try running this code now
42:17 - so it is returning false over here but
42:19 - what if we want the opposite of this
42:21 - result so if the result of any of the
42:23 - expression is false we want to print
42:26 - true but if the result of any expression
42:28 - is true we want to return it as false so
42:31 - what we have to do is we simply have to
42:33 - provide not logical operator and the
42:36 - expression needs to be provided within
42:38 - the parenthesis over here as we can see
42:40 - so let me just save this file now so
42:42 - since it was returning false by using
42:44 - the not logical operator it should now
42:46 - return true so let me just run this code
42:49 - once again so it is returning true over
42:51 - here similarly if let's say this
42:53 - particular expression turns out to be
42:54 - true so we will get for FS as the result
42:57 - so let's say I provide a greater than 4
43:00 - so is a for which the value is 5 over
43:02 - here is it greater than four yes in this
43:05 - case so this will return as true but
43:07 - since we are using the not logical
43:09 - operator it will return this True Result
43:11 - to false and it will be printed so let
43:13 - me just save this file and try running
43:15 - this code now so as you can see false is
43:17 - getting returned over here and it is
43:19 - being printed so Guys these are certain
43:20 - logical operators that we will be using
43:23 - in the upcoming videos as well when we
43:25 - are going to use the if else statement
43:27 - apart from that we will be also using
43:29 - the while loops and other control
43:31 - statements as well where we are going to
43:33 - use these logical operators so guys
43:35 - practice on your own so that on
43:37 - different inputs you get different
43:38 - outputs IFL statement in Python
43:41 - Programming so guys in computer
43:43 - programming we use the if statement to
43:45 - run a block of code only when a certain
43:48 - condition is met so for example as you
43:51 - can see assigning grades that is a b c
43:54 - based on the marks obtained by a student
43:56 - so basically over here in this case we
43:58 - will be using the if condition now what
44:00 - can be the conditions we can say that if
44:03 - the percentage of the student is above
44:05 - 90% so assign grade A in the same way if
44:09 - the percentage is above 75% then assign
44:12 - Grade B and if the percentage is above
44:15 - 65% but less than 75% then assign grade
44:19 - C so during such conditions we have to
44:21 - use the if else statement over here now
44:24 - similarly in Python there are three
44:26 - forms of if else statement so we are
44:28 - going to check all these forms of
44:30 - statements one at a time with the help
44:32 - of examples the first part is the if
44:34 - statement in which case we are going to
44:35 - Simply have the if statement over here
44:37 - along with the condition and the block
44:39 - of code the next form will be if else
44:42 - statement in which case we will also
44:44 - have the else block over here and the
44:46 - third form of the if else statement will
44:48 - be first we will be having the if
44:50 - statement and Then followed by the AL if
44:52 - statement in which case we have another
44:54 - condition over here and then then
44:56 - finally we have the else statement over
44:58 - here so let us check all this with the
44:59 - help of examples in the vs code so over
45:02 - here let's say we have the value of x it
45:05 - is equal to 10 now what we have to do is
45:07 - we have to provide the if condition over
45:10 - here so as you can see when we type if
45:12 - keyword over here vs code is suggesting
45:14 - us that we can use this if keyword so we
45:16 - are going to use this and then we are
45:18 - supposed to have some condition so we
45:20 - can say x greater than 5 over here so
45:23 - guys this is one of the comparison
45:25 - operators that we have already seen
45:27 - previously it will check whether this
45:29 - left hand side variable is it greater
45:30 - than the value that is present on the
45:32 - right hand side so guys this is one of
45:34 - the conditions that we are going to
45:36 - check and then followed by a colon over
45:38 - here so guys this is the format in which
45:40 - we provide the if condition and if this
45:43 - condition that is whether X is greater
45:45 - than 5 if it is true then we want to
45:48 - come inside this and there will be the
45:50 - block of code we need to have certain
45:52 - statements over here so we will say
45:54 - print and we can simply put the string
45:56 - that is X is greater than 5 over here
46:01 - since that is the condition that we have
46:02 - checked so this is the very simple code
46:04 - that we can have with the if condition
46:06 - over here let me just save this file and
46:08 - try running this code now so as you can
46:10 - see it is displaying X is greater than 5
46:13 - now guys this is just one statement that
46:15 - we have provided inside the if condition
46:18 - we can also have multiple lines of code
46:20 - inside this block over here after the if
46:22 - condition so we simply have to press
46:24 - enter and provide the another print
46:27 - statement and let's say we will simply
46:29 - put we have check X so we have a very G
46:33 - statement over here that is we have
46:34 - checked X over here let me just save
46:36 - this file and TR running this code now
46:38 - so as you can see X is greater than 5
46:40 - this thing is getting printed and this
46:42 - statement that is we have checked X is
46:44 - also getting printed so all the lines of
46:47 - code that is present inside the block
46:50 - after this condition that we have
46:51 - provided in the if statement will be
46:54 - executed only when this condition that
46:56 - is X greater than 5 is true now what if
46:58 - this condition is not true so let's say
47:01 - I provide X less than 5 over here in
47:03 - which case this condition will become
47:05 - false so what will happen is the control
47:07 - flow will not go inside this block and
47:10 - it will not print these statements over
47:12 - here let us verify this I will just save
47:14 - this file and try running this code now
47:17 - so as you can see nothing is getting
47:18 - printed over here that's because these
47:20 - lines of code are not getting executed
47:23 - because this condition was false now how
47:25 - do we very ify that we have to come out
47:27 - of this block so basically we have
47:29 - indented this code that is there are
47:31 - some space characters over here in this
47:33 - line that is why these lines of code
47:35 - over here are treated to be present
47:37 - inside the block after this condition we
47:40 - have to come out of that block over here
47:42 - so we simply press enter and then we
47:44 - press backspace so that the cursor is
47:46 - aligned to this if condition over here
47:49 - now we can simply provide another print
47:51 - statement and I will simply say outside
47:54 - if statement so over here we say outside
47:58 - if statement now guys this line of code
48:00 - it will confirm that the control flow
48:02 - has come out of the if block over here
48:04 - so let me just save this file now and
48:06 - try running this code so as you can see
48:08 - we are getting outside if statement
48:10 - that's because X less than five
48:12 - condition was false and that is why
48:14 - these two lines of code were not printed
48:16 - and then the control Flow came out of
48:18 - the if condition and then this line that
48:20 - is outside if statement was printed so
48:23 - guys it is very important that you
48:24 - follow this intent ination as far as
48:26 - your python programs are concerned you
48:28 - might get incorrect output if you don't
48:30 - follow such indentations properly now
48:33 - let us move to another form of if
48:34 - statement so over here the second form
48:36 - is we provide the else part as well so
48:38 - the first part we have already seen that
48:40 - is using the if statement let us now use
48:42 - the else statement as well so over here
48:45 - what we will do is first of all we will
48:47 - check whether X is greater than 5 and
48:49 - then we will print that is X is greater
48:52 - than 5 over here now what if X is not
48:54 - greater than 5 that that means it is
48:56 - less than or equal to 5 so we have to
48:58 - define the else part over here so first
49:00 - of all we have to remove this
49:02 - indentation part so I'll just press on
49:04 - backspace and then we provide the else
49:06 - keyword as you can see vs code is
49:08 - suggesting us this else keyword over
49:10 - here we will use this and then followed
49:12 - by colon and then we can go inside this
49:15 - block of code and similarly we will have
49:17 - another print statement in this case we
49:19 - will say X is not greater than 5 so we
49:22 - are checking whether X is greater than 5
49:25 - and we will say x is greater than 5 if
49:27 - this condition is true and if this is
49:29 - not true then it will go in the else
49:31 - part and it will say X is not greater
49:34 - than 5 and after this part of code gets
49:36 - executed the control flow will come over
49:38 - here and it will print this statement
49:40 - that is outside if statement over here
49:42 - so let me just save this file enter
49:44 - running this code now so as you can see
49:46 - it says X is greater than 5 so over here
49:49 - since the value of x it is 10 it is
49:51 - printing X is greater than 5 after this
49:53 - x greater than 5 condition is true and
49:56 - then after that we are getting outside
49:58 - if statement so the control flow did not
50:00 - go inside this else part that's because
50:02 - it went inside this if part and this
50:05 - line of code was executed so guys the
50:07 - control flow can only go inside one
50:09 - block of code if this condition is true
50:12 - then it will come out it will not go
50:14 - inside the lse part and if this
50:16 - condition becomes false then it will go
50:18 - over here in the lse part and execute
50:20 - that line of code so let us check that
50:22 - second scenario now what if X is not
50:24 - greater than 5 so we will change the
50:26 - value of x and let us say the X values
50:29 - is 2 now so in this case is X greater
50:31 - than 5 no in this case so this line of
50:34 - code that is X is not greater than 5
50:36 - should get printed let me just save this
50:38 - file enter I running this code now so as
50:40 - you can see X is not greater than 5 this
50:43 - line of code is getting printed that's
50:45 - because the condition was false and the
50:47 - control Flow came in the lse part and it
50:50 - executed this line of code after this
50:52 - outside if statement got printed over
50:54 - here as you can see on the console so
50:56 - guys this is one of the examples of the
50:58 - if else statement that we can use guys
51:00 - there will be many instances where you
51:02 - will be using this if El statement in
51:04 - your actual programs so make sure that
51:06 - you practice on your own now after this
51:09 - let us see another part that is we have
51:11 - the L if as well so guys let us take
51:13 - this example over here that is of
51:15 - grading system so if the percentage is
51:17 - greater than 90 we have to assign the
51:19 - grade that is a If the percentage is
51:21 - greater than 75 but less than 90 then we
51:24 - will say the Great is B and if the
51:26 - percentage is greater than 65 but less
51:29 - than 75 then we have to put the grade as
51:31 - C so guys let us move to the code over
51:33 - here let us clear all these lines of
51:35 - code and over here we will simply have
51:37 - the percentage variable and let's say we
51:40 - have 95 as the percentage initially and
51:42 - then we have another variable that is
51:44 - great let's say it is equal to D
51:46 - initially so we have this character that
51:48 - is D over here now what we have to do is
51:50 - we have to provide the if condition and
51:52 - the first condition is whether the
51:54 - percentage is is above 90 so over here
51:57 - we will say inside the if condition
51:59 - first of all whether this percentage is
52:01 - it above 90 over here so we will simply
52:04 - have percentage greater than 90 and if
52:07 - this is true then we have to provide
52:08 - colon and then we have to make the value
52:11 - of this grade as a so grade it is equal
52:13 - to a over here inside the single codes
52:16 - now we have another condition that is if
52:18 - the percentage is greater than 75 but if
52:21 - it is less than or equal to 90 then it
52:23 - should be B so what we have to do is we
52:26 - can use the L If part over here so we
52:28 - have L if keyword so as you can see vs
52:31 - code is suggesting us this L if keyword
52:33 - over here followed by we have to check
52:35 - whether this percentage again is it
52:38 - greater than 75 so over here if it is
52:41 - greater than 75 then we have to come in
52:43 - this block of code and then after this
52:45 - again we have to assign the value to
52:47 - this grade variable and this time the
52:49 - value will be B over here so we will
52:51 - assign the value to grade as B and then
52:54 - after this we will again have the AL
52:56 - part over here and we need to check
52:58 - whether the percentage is greater than
53:00 - 65 or not and then in that case we have
53:02 - to provide C so over here we will say l
53:05 - if percentage it is greater than 65 in
53:10 - this case and then if this is true then
53:13 - we have to provide the grade value as C
53:16 - over here and then guys we can also have
53:18 - the else part over here and we can
53:20 - simply provide that the grade in the lse
53:22 - part it can be D over here in case the
53:25 - percentage is less than 65 so we can
53:27 - have gr s d and then finally we will
53:30 - have the print statement over here so we
53:32 - have the print function and we will
53:33 - simply provide the grade value so the
53:36 - grade is and then we have comma and then
53:39 - the grade variable over here so guys
53:41 - over here as you can see initially the
53:43 - percentage is 95 so it should go inside
53:45 - the first if statement so let me just
53:47 - save this file now and try running this
53:49 - code so as you can see we are getting
53:51 - some error over here at the else part so
53:53 - over here we have forgot to provide the
53:55 - colon after the else part so it is very
53:57 - important that we provide the colon
53:59 - after any of these keywords that we have
54:01 - used and the conditions that we have
54:03 - used so let me just save this file and
54:05 - try running this code now so as you can
54:07 - see the grade is a that's because the
54:09 - percentage value is 95 and in this case
54:12 - percentage is greater than 90 and that
54:14 - is why the grade is being assigned as
54:16 - the value as a now what if the
54:17 - percentage value is not greater than 90
54:20 - so let's say we provide the percentage
54:22 - value as 85 so in this case the control
54:24 - flow will come over over here it will
54:25 - check whether percentage greater than 90
54:27 - no in this case then it will go inside
54:30 - the L If part so is percentage greater
54:32 - than 75 yes in this case so this line of
54:35 - code that is grade equal to B will get
54:37 - executed and then the control flow will
54:39 - come directly out of the if lse
54:41 - statement and it will print the grade
54:43 - over here let me just save this file and
54:45 - try running this code now so as you can
54:46 - see the grade is being assigned the
54:48 - value as B so grade is B is getting
54:50 - printed over here similarly let's say we
54:53 - provide the percentage value as 7 so
54:55 - this time this condition that is
54:57 - percentage greater than 65 will get
54:59 - executed because the previous conditions
55:01 - are already false in this case so let me
55:03 - just save this file Ander I running this
55:05 - code now so grade must be C so as you
55:07 - can see the grade is C over here and
55:09 - what if the percentage is less than 65
55:11 - so let's say we provide the percentage
55:13 - of 60 so finally the lse part that is
55:16 - grade equal to T will get executed so
55:19 - let me just save this file and try
55:20 - running this code now so now in this
55:22 - case the grid is D so in this way we can
55:24 - easily use use the IFL statement we can
55:26 - also use the L if keyword in order to
55:29 - check the intermediate conditions over
55:31 - here for Loop in Python Programming so
55:34 - guys in computer programming Loops are
55:36 - used to repeat a block of code so let's
55:39 - say for example if we want to show a
55:41 - message 10 times we don't have to print
55:44 - that 10 number of times over here we can
55:46 - simply use the loop in order to repeat
55:49 - the same message again and again 10
55:51 - times so in Python the fall Loop is used
55:53 - to run a block of code for a certain
55:56 - number of times so in this example we
55:58 - have considered 10 we can have any
56:00 - number of iterations so basically it is
56:02 - used to iterate over any sequences such
56:05 - as list tle string Etc so guys this is
56:08 - the syntax of the Fall Loop in Python
56:10 - Programming so first of all we have the
56:12 - for keyword followed by a particular
56:14 - value or a variable and then we have
56:17 - this in keyword which is a kind of a
56:19 - membership operator that we have seen
56:21 - previously and then we have the sequence
56:23 - now this sequence can be anything it can
56:25 - be a list tle or any other sequence over
56:27 - here so let us check this with the help
56:29 - of examples now so over here what we
56:31 - will do is let's say we have the
56:33 - variable name as X and we have the list
56:35 - of numbers over here so in order to
56:37 - define the list we have the open and
56:39 - close square brackets and we have the
56:41 - list of numbers let's say we have one
56:43 - followed by two and then we have three 4
56:47 - and then five so we have the top five
56:49 - numbers over here inside this list that
56:51 - is defined in the variable X now what we
56:54 - want to do is we we want to print all
56:56 - these numbers one at a time on the
56:58 - separate lines so we can simply use the
57:00 - for Loop over here so for and what we
57:03 - will do is let's say we provide value as
57:05 - the variable name and then we provide
57:08 - the in keyword which is the membership
57:10 - operator and after this on the right
57:12 - hand side of the in keyword we are
57:14 - supposed to have the sequence so the
57:16 - sequence in this case is the variable
57:18 - that is X over here so this is the
57:19 - format of the Fall Loop whenever we are
57:21 - going to iterate through a list or a
57:23 - sequence now in inside this we can have
57:25 - the block of code over here so we simply
57:28 - want to print all the values so we have
57:30 - the print function and we can simply
57:32 - provide this value that is variable so
57:34 - guys what is happening behind the scenes
57:36 - is this x that is the list of all the
57:39 - numbers one at a time the number is
57:41 - being assigned to this variable that is
57:43 - value so first of all one will get
57:45 - assigned to value and this value that is
57:47 - one will get printed and then the
57:49 - control flow will go back again in the
57:51 - sequence that is X it will check whether
57:53 - there is a next element or not so two
57:55 - will get printed and then again three
57:57 - and then four and then five and then
57:59 - after this when the control flow comes
58:01 - over here it sees that there is no other
58:03 - element after this Fifth Element so the
58:06 - control flow will come out of this fall
58:07 - Loop and then the other lines of code
58:09 - after this fall Loop will get printed so
58:12 - guys let me just save this file enter I
58:13 - running this code now so as you can see
58:16 - all the numbers are getting printed over
58:17 - here on the terminal that is 1 2 3 4 5
58:21 - now guys let's say we want all these
58:23 - numbers to be printed on the the same
58:25 - line so previously we had seen that we
58:27 - have certain parameters in the print
58:29 - function that will help us in order to
58:31 - print the values in a specific way so
58:34 - over here we have one of the parameters
58:36 - that is end over here so we provide end
58:38 - and this parameter helps us in order to
58:40 - separate the different elements that we
58:42 - want to print so what we are going to do
58:45 - is I'm going to separate all the numbers
58:47 - using the comma character so I have
58:49 - provided the comma character over here
58:51 - so all the numbers that were printed on
58:53 - the different lines will get printed on
58:55 - the same line now so let me just save
58:57 - this file enter I running this code now
58:59 - so as you can see 1 2 3 4 5 is getting
59:02 - printed we are getting this additional
59:03 - comma over here at the end that's
59:05 - because after the last value is getting
59:07 - printed the comma is appended after that
59:09 - last value so guys this is one of the
59:11 - ways in which we can use the fall Loop
59:13 - in order to carry out our operations now
59:15 - guys there is another important thing
59:17 - that you must know in Python the fall
59:19 - loop with python range can also be used
59:22 - so in Python a range is a series of
59:24 - values between two numeric intervals we
59:26 - use the Python's buil-in function that
59:28 - is range to define a range of values so
59:31 - let's say we want to define the top 10
59:34 - numbers over here we can simply use the
59:36 - range function instead of defining them
59:38 - one at a time like how we have defined
59:40 - in this list so basically in order to
59:42 - have the top 10 numbers we have to
59:44 - manually Define it as 1 to 10 over here
59:47 - but we can also get rid of this part we
59:49 - can have the range method over here so
59:51 - as you can see when we type range vs
59:54 - code is suggest in us this function that
59:55 - is range over here and we simply have to
59:57 - provide a number over here so let's say
59:59 - we provide 10 as the number so what is
60:02 - happening is the list of 10 numbers over
60:04 - here is getting assigned to the variable
60:06 - that is X over here starting from the
60:08 - number zero up to the number that is 9
60:11 - so over here we will be seeing all the
60:13 - numbers starting from zero up to 9 over
60:15 - here the last number that is 10 is
60:17 - excluded from the list so if we Simply
60:19 - Save this file enter running this code
60:21 - now we will get these numbers that is 0
60:24 - 1 2 2 3 4 5 6 7 8 9 so 10 numbers are
60:28 - getting displayed over here that's
60:30 - because we have provided 10 inside the
60:32 - range buil-in method what if we provide
60:34 - 20 over here so 0 to 19 numbers will be
60:37 - displayed so let me just save this file
60:38 - and try running this code now so as you
60:41 - can see 0 to 19 is getting displayed so
60:43 - guys let's say if someone had told you
60:45 - write a Python program in order to print
60:48 - top 20 numbers starting from the number
60:51 - 0o up to 19 so instead of having the
60:54 - print statements 20 number of times and
60:56 - writing each and every number inside the
60:59 - print statement we can simply have the
61:01 - range method over here and we can use
61:03 - the fall Loop in order to iterate
61:06 - through the list that we have already
61:08 - defined over here and that is how we
61:09 - simplify the problem that is given to us
61:12 - and write the Python program now guys
61:14 - there is another variation over here
61:16 - python for loop with the lse part so
61:18 - after this fall Loop we can also have
61:20 - the else part that will mandatorily get
61:23 - executed after we reach the end of this
61:26 - sequence that we have provided in the
61:27 - fall Loop so what we will do is we will
61:29 - simply come out of this block of code
61:31 - and we will have the else part over here
61:34 - and we will simply print outside fall
61:36 - Loop over here so we have
61:39 - outside for Loop so guys what will
61:42 - happen is after the control flow comes
61:44 - out of this fall Loop the control flow
61:46 - will go inside this L's part and it will
61:49 - execute this line of code and print
61:51 - outside fall loop on the console now
61:53 - guys this print state statement will be
61:55 - printed on the same line that's because
61:57 - we have provided the end part over here
61:59 - and there is a comma over here so you
62:01 - can expect the string to be present on
62:03 - this same line over here so let me just
62:05 - save this file enter running this code
62:06 - now so as you can see 0 to 19 that is
62:10 - all the numbers are getting printed and
62:11 - then the last line that is outside fall
62:13 - Loop is getting printed over here so in
62:16 - case you want to print something or
62:17 - carry out certain operations after the
62:20 - execution of the Fall Loop you can have
62:22 - the else part as well and it will carry
62:24 - out the operations over here after the
62:26 - end of this sequence is reached so guys
62:29 - this is the main functionality of the
62:30 - Fall Loop that is in order to iterate
62:32 - through the sequence we can also have
62:34 - the sequence of list of strings as well
62:36 - we can also have tle or dictionary as
62:39 - well so guys it depends on your
62:40 - requirements as to what exactly you want
62:43 - to find out through the python programs
62:45 - while loop in Python Programming so guys
62:48 - previously we have seen how the fall
62:49 - Loop works in the Python Programming now
62:51 - the python y Loop is used to run a
62:54 - specific code until a certain condition
62:56 - is met so basically in the fall Loop
62:58 - there was no such condition that we had
63:00 - provided but it was iterating through a
63:03 - list that we had provided in the form of
63:05 - a variable but over here this is the
63:07 - syntax of the Y Loop first of all we
63:10 - have the while keyword over here and
63:12 - then we have a certain condition and if
63:14 - this condition is true then only the
63:16 - control flow will go inside the body of
63:18 - the while loop and then again the
63:20 - control flow will come over here it will
63:22 - check the condition again and if the
63:24 - condition is true once again it will
63:26 - again go inside the body of this while
63:28 - loop so guys again and again the control
63:30 - flow will come inside the while loop
63:32 - until and unless the condition becomes
63:34 - false so when this condition becomes
63:36 - false the control flow will come out of
63:38 - this while loop and that is how the V
63:40 - Loop is going to work in the Python
63:42 - Programming so guys let us check this
63:44 - with the help of examples now so let's
63:45 - say we want to print the first five
63:47 - numbers that is 1 to 5 so over here
63:50 - initially we can have the variable that
63:51 - is I it is equal to 1 and the second
63:54 - variable that is J it is equal to 5 so
63:57 - this is the starting point that is I
63:59 - equal to 1 and the ending point is J is
64:01 - equal to 5 so basically we can have a
64:04 - while loop over here we will simply have
64:06 - the while keyword and the condition that
64:08 - we have to give is whether I is less
64:11 - than or equal to J and up to that
64:13 - condition we want to print the value of
64:16 - I so basically it is I less than or
64:19 - equal to J over here so if this
64:22 - condition is true we want to print the
64:23 - value Val of I which will be one
64:25 - initially so basically I want to print
64:28 - this number that is I over here now guys
64:31 - what exactly is happening over here is
64:33 - I's value is 1 initially J value is five
64:35 - initially so is I less than or equal to
64:37 - J in the first instance yes in this case
64:40 - so I will be printed which is equal to 1
64:42 - so again it will go inside the Y Loop
64:45 - and it will check whether 1 is less than
64:47 - or equal to 5 yes in this case so guys
64:49 - we are not changing any of the values
64:51 - that is I or J over here so this will be
64:54 - infinite Loop because again and again
64:56 - the condition will be true and the
64:58 - number that is I which is equal to 1
65:01 - will get printed indefinitely so what we
65:03 - have to do is we have to increment the
65:05 - value of I because after one we want to
65:08 - print the value that is two over here so
65:10 - what we will do is we will simply add
65:11 - one to I so I it is equal to I + 1 we
65:16 - can also use the Shand method that is I
65:18 - + = to 1 over here so what will happen
65:21 - now is I's value is updated to I + 1
65:24 - which will be 2 now so is 2 less than or
65:26 - equal to 5 yes in this case and then
65:29 - again two will get printed and then I
65:31 - will again get incremented over here so
65:33 - the I's value will be three next time
65:35 - I's value will be four and then again
65:37 - I's value will be five and then
65:39 - ultimately when I's value is 6 this
65:42 - condition will become false that's
65:43 - because 6 is not less than or equal to 5
65:46 - and the control flow will come out of
65:48 - the while loop so guys let me just save
65:50 - this file and try running this code now
65:52 - so as you can see all the numbers set is
65:54 - 1 2 3 4 5 is getting printed after the
65:57 - I's value is five over here five is
65:59 - getting printed now I's value becomes 6
66:02 - over here that's because 5 + 1 will be 6
66:04 - and is 6 less than or equal to 5 because
66:06 - the J's value is five over here in this
66:08 - case so no the condition becomes false
66:11 - and the control flow comes out of the
66:13 - while loop now what if we want to print
66:15 - all these numbers on the same line so
66:17 - simply inside the print statement we can
66:19 - have the comma and then we can have the
66:21 - end operator and then let's say we want
66:23 - to separate all the numbers with the
66:25 - space characters so inside the double
66:27 - codes we have provided the space
66:28 - character over here so let me just save
66:30 - this file and try running this code now
66:32 - so as you can see 1 2 3 4 5 is getting
66:35 - printed over here we can have any
66:37 - numbers over here let's say I is
66:38 - starting from 11 and let's say we want J
66:41 - is equal to 20 so in this case 11 to 20
66:44 - should get printed let me just save this
66:46 - file and try running this code now so as
66:48 - you can see 11 12 13 14 and up to 20
66:52 - numbers are getting printed over here
66:54 - here so guys this is the main
66:55 - functionality of the Y Loop it is going
66:57 - to have a certain condition and if this
67:00 - condition is true the block of code
67:02 - inside the while loop will get executed
67:04 - and once the condition becomes false
67:06 - control flow comes out of the while loop
67:09 - now guys we can also use the else part
67:11 - with the while loop so over here as you
67:12 - can see python while loop with the else
67:14 - part so a while loop can have an
67:17 - optional else block as well the else
67:19 - part is executed after the condition in
67:21 - the while loop evaluates to FAL so
67:24 - basically after this while loop we can
67:26 - also have the else part which is
67:28 - optional so we can have the else part
67:30 - over here what we will do is we will
67:32 - simply have the print statement that is
67:34 - outside the while loop so we have the
67:36 - print function and we will say outside
67:40 - while loop over here so let me just save
67:43 - this file and I running this code now so
67:45 - as you can see 11 12 13 up to 20 numbers
67:48 - are getting printed and then on the same
67:50 - line the outside while loop the
67:52 - statement that we have Pro provided in
67:54 - the else part is getting printed so this
67:56 - is the functionality of the else part
67:58 - after the Y Loop it is optional if you
68:00 - want to have we can have it or else we
68:02 - don't need to have it but guys the
68:04 - important thing is inside the V Loop we
68:06 - can provide a particular condition and
68:08 - the control flow will go again and again
68:10 - inside the V Loop until the condition is
68:12 - true once a condition becomes false the
68:14 - control flow will come out of the V Loop
68:16 - now guys what you should use whether you
68:18 - should use the python for Loop or python
68:21 - while loop over here so guys basically
68:23 - they are used based on the specific
68:25 - requirements so as you can see fall Loop
68:27 - is usually used when the number of
68:29 - iterations is known so as we had seen
68:31 - previously in the fall Loop we provide a
68:34 - particular sequence and iterate through
68:36 - that sequence by giving one value at a
68:38 - time to a variable and we use that
68:40 - variable inside the block of the Fall
68:42 - Loop but in the while loop there is a
68:44 - condition so while loop is usually used
68:46 - when the number of iterations are
68:48 - unknown so we don't know the number of
68:50 - iterations we don't have the sequence of
68:52 - elements or the list of numbers through
68:54 - which we want to iterate so basically we
68:56 - provide the condition in the while loop
68:58 - So based on these requirements you can
69:00 - choose whether you want to use the while
69:02 - loop or you want to use the fall Loop
69:04 - but guys it is very important that you
69:06 - practice both these Loops the
69:07 - implementation of these Loops are very
69:09 - important as far as Python Programming
69:12 - is concerned functions in Python
69:14 - Programming so guys we will learn about
69:16 - the python function and the function
69:18 - expressions with the help of examples so
69:20 - basically a function is a block of code
69:23 - that performs a specific task so it can
69:25 - be any task that you want to implement
69:28 - based on your requirements but it is the
69:30 - block of code that you can put inside
69:32 - the function and that block of code will
69:34 - have your implementation of the logic
69:37 - now suppose you need to create a program
69:39 - to create a circle and color it so there
69:42 - are two task over here that is first of
69:44 - all in order to create a circle and the
69:46 - second thing is to color it so you can
69:48 - create two functions to solve this
69:50 - problem that is the first function will
69:52 - be to create a circle and that will be
69:54 - one function and another function will
69:56 - be to create a color over here so
69:58 - basically what we have done is we have
70:00 - divided a complex problem into smaller
70:03 - chunks which makes it easier to
70:05 - understand the program and reuse the
70:07 - functions as well so there are two types
70:09 - of functions so first of all we have
70:11 - already seen some standard Library
70:13 - functions as well one of the example is
70:15 - the print statement that is the print
70:17 - function so these are built-in functions
70:19 - in Python that are available to use so
70:22 - let us check some examples of stand that
70:23 - Library functions over here so
70:25 - previously we have seen the print
70:27 - statement so this is nothing but one of
70:29 - the buil-in functions which take
70:31 - multiple parameters so one of the
70:33 - parameters is the value so when we are
70:35 - providing programming for beginners the
70:38 - string which is the name of the YouTube
70:40 - channel as well which you should
70:41 - definitely subscribe so this is the
70:43 - string that we have provided to the
70:46 - print function and this string is being
70:48 - passed to the print built-in method and
70:50 - behind the scenes this print function is
70:53 - having some sort of code that will help
70:56 - us in order to print the statement on
70:58 - the terminal so when we save this file
71:00 - and try running this code now basically
71:02 - this programming for beginners is
71:03 - getting printed what we have done we
71:05 - have just called that function and the
71:07 - implementation is behind the scenes so
71:10 - this is one example of a built-in
71:11 - function similarly we have another
71:13 - built-in function that is range which
71:15 - helps us in order to have the list of
71:18 - numbers from zero up to the number that
71:20 - we have provided so let's say we provide
71:22 - the number 10 so it will provide us all
71:25 - the numbers before 10 starting from zero
71:27 - so this is another built-in function so
71:29 - similarly we have other standard Library
71:31 - functions as well now you can also have
71:34 - the user defined functions so in case
71:36 - your requirement is not fulfilled by
71:39 - using one of the standard functions that
71:41 - is being provided by python you can have
71:43 - your own user defined functions also so
71:46 - we can create our own functions based on
71:48 - our requirements and this is the syntax
71:51 - that is first of all we have this
71:52 - keyword that is d EF which means Define
71:55 - and then we have the function name so
71:57 - this function name will be the name of
71:59 - the function like this range is the name
72:01 - of the function then the print function
72:03 - the print name is the function name over
72:05 - there so similarly we can have our own
72:07 - function name and after that we have the
72:09 - list of arguments we can have any number
72:11 - of arguments over here inside that we
72:13 - will have the function body where our
72:16 - implementation code will be present and
72:18 - then we can also have the optional
72:20 - return statement which means it will
72:22 - return some value so over here as you
72:24 - can see this is the example we have the
72:26 - defined keyword and Then followed by the
72:28 - greed function over here so it is not
72:30 - taking any arguments for now it is
72:32 - simply printing some statement that is
72:34 - inside GRE function now how do we call
72:37 - this function simply we use the function
72:39 - name that is greed followed by open and
72:41 - close parenthesis and then we call the
72:43 - print function and we say outside
72:45 - function so guys let us check this with
72:47 - the help of example over here so simply
72:49 - we will have the defined keyword so D EF
72:52 - and let's say we have sum and then
72:54 - underscore numbers so basically what we
72:57 - are doing over here is we will be adding
72:59 - two numbers so over here we have the
73:01 - open and close parenthesis and then
73:03 - after that we have a colon and let's say
73:06 - we have the number a it is equal to 10
73:09 - and then we have number B it is equal to
73:11 - 20 we want to print the sum of these
73:13 - numbers so we simply provide print
73:16 - function inside this and we say A + B
73:20 - and then we can also have the string
73:21 - over here let's say we have
73:23 - sum of A and B and then we have colon
73:29 - and then after this we have comma and
73:31 - then we have a + b over here so guys
73:33 - this is the function that we have
73:34 - already defined we have two numbers that
73:36 - is a is equal to 10 and B is equal to 20
73:39 - now if we Simply Save this file and try
73:41 - running this code we will not get
73:43 - anything so as you can see there is no
73:45 - print statement which is helping us in
73:47 - order to print something on the terminal
73:49 - why so because this code is present
73:51 - inside a function which is not called
73:53 - yet so we need to call this function
73:55 - that is some numbers so how do we call
73:57 - it by simply calling the name so we
74:00 - simply have to provide some numbers over
74:02 - here and then open and close parenthesis
74:05 - and that's it we have simply called this
74:07 - function which will make the control
74:08 - flow go to this particular function over
74:10 - here and inside it will go it will check
74:13 - that a value is 10 B value is 20 and it
74:16 - will print sum of A and B it will carry
74:19 - out this operation that is a plus b so
74:21 - let me just save this file and try
74:22 - running this code now so as you can see
74:25 - sum of A and B it is equal to 30 and
74:27 - that is how we can simply provide the
74:29 - function now guys why do we write this
74:31 - function just to add two numbers so
74:33 - let's say you have a scenario you have a
74:35 - it is equal to 10 and then we have B it
74:38 - is equal to 20 and you want to print the
74:40 - sum so you can simply provide print a +
74:44 - b so you will get the answer as 30 now
74:46 - with the same requirement you have
74:48 - another requirement as well in the same
74:50 - code that is with this particular
74:52 - addition you want want to add more two
74:54 - numbers so what you will do is you will
74:56 - simply copy and paste these lines of
74:58 - code once again that is the three lines
74:59 - of code over here but this time the age
75:02 - value is something else so let's say we
75:03 - have something like 50 and then 60 over
75:06 - here so what will happen is with this
75:07 - print statement it will print the sum of
75:09 - these two numbers now let's say there is
75:11 - another requirement in which case all
75:13 - the sum needs to be printed at once and
75:15 - you have two more numbers so you will
75:17 - again copy these lines of code and then
75:20 - again paste this over here and then
75:22 - let's say the numbers are 100
75:23 - and then 200 over here that is B 200 so
75:27 - let me just save this file enter running
75:28 - this code now so what is happening is
75:30 - all the sum is getting printed once that
75:32 - is 30 110 and 300 but let's say
75:35 - similarly if you have 10 sets of A and B
75:38 - values in this way and you want to print
75:41 - all the sum of those numbers so what you
75:43 - will do so your code will become little
75:45 - bit complicated and it will be little
75:47 - bit lengthy as well so in order to avoid
75:50 - this what you can do is you can simply
75:52 - have the function and inside the
75:53 - function you can have those variables
75:55 - and have the sum of those variables so
75:57 - in order to achieve your task that is
76:00 - have the sum of multiple numbers over
76:02 - here in one screen and using the
76:04 - function what you can simply do is you
76:06 - can pass these values that is 10 20 50
76:09 - 60 and 120 while calling the function
76:13 - that is some number so I'll just remove
76:15 - these lines of code now over here and
76:17 - what we will do is I will simply provide
76:19 - the parameters that is the arguments
76:21 - over here that is a and then follow by
76:23 - comma and then we have B now these A and
76:26 - B are not required because the values
76:28 - will come whenever this function is
76:30 - being called so I'll just remove these
76:32 - lines of code over here you will simply
76:34 - have one print statement inside the
76:36 - function and the sum of A and B it is a
76:39 - plus b so this sum will get printed over
76:41 - here while calling the function you're
76:43 - supposed to provide the A and B value so
76:45 - what we will simply do is I will simply
76:47 - call this Su numbers over here and I
76:50 - will provide the values of A and B so
76:52 - what we have had provided we had
76:54 - provided 10 and 20 and then again we had
76:56 - the requirement that is to add the other
76:58 - two numbers which were 50 and 60 so
77:01 - again I will just copy paste this sum
77:03 - numbers function and provide the
77:06 - different values this time and then
77:08 - again I will copy and paste this once
77:10 - again with some different values so 100
77:12 - and 200 so as you can see our code has
77:15 - become little bit cleaner instead of
77:17 - having three lines of code in order to
77:20 - add two numbers every time for which our
77:22 - code has also become lengthy we have a
77:24 - very short code and it is very clean as
77:26 - well it is very readable as well so let
77:29 - me just save this file now and try
77:30 - running this code so as you can see we
77:32 - are getting sum of A and B it is 30 sum
77:35 - of A and B it is 110 and sum of A and B
77:38 - it is equal to 300 you can also
77:40 - customize your function in order to have
77:43 - the values of A and B over here so we
77:45 - can simply say over here we have the
77:48 - double quotes and then we have comma and
77:50 - then we have a over here and then we
77:53 - have double codes and then we have and
77:55 - keyword double codes and then B value
77:59 - and then comma and then double codes
78:00 - over here before the colon so as you can
78:02 - see A and B values can also be printed
78:05 - so let me just save this file and try
78:06 - running this code now so as you can see
78:09 - 10 and 20 were passed first time so it
78:11 - is saying sum of 10 20 it is 30 then sum
78:13 - of 50 and 60 it is 110 and then sum of
78:16 - 100 and 200 it is 300 you can call this
78:18 - function any number of times with
78:20 - different values in order to get the PR
78:23 - sum over here I'll say 200 + 300 again
78:26 - and then let's say I provide 400 and 500
78:30 - over here let me just save this file and
78:32 - try running this code all the sums are
78:34 - getting printed and our code is also
78:36 - very clean over here so guys this is the
78:37 - main functionality of using python
78:39 - functions you can simply have the
78:41 - defined keyword followed by the function
78:43 - name and then this arguments list is
78:45 - optional over here you can pass it or if
78:48 - you don't want to pass it there is no
78:49 - need to pass so as you can see over here
78:51 - python function argument ments this we
78:53 - have already covered that is in order to
78:55 - pass the argument now one last thing is
78:57 - return statement so guys we have not
78:59 - checked any return statement over here
79:01 - so return is nothing but it will return
79:03 - some value so let's say instead of
79:05 - having the print statement over here we
79:07 - want the print statement outside the
79:09 - function so what we can simply do is we
79:12 - can simply return the expression that is
79:15 - A + B so we can have the return keyword
79:18 - over here so it will say return a plus b
79:21 - so simply whatever value we being being
79:23 - passed over here that is 10 and 20 it
79:25 - will return the sum that is 10 + 20 it
79:27 - is equal to 30 to this code and over
79:30 - here we should have something in order
79:32 - to catch that value so I'll just remove
79:34 - these lines of code for now and then
79:37 - let's say in order to catch the value I
79:38 - provide the sum variable so this sum
79:41 - variable is assigned the value that is
79:43 - being returned from the sum numbers over
79:45 - here which is equal to the sum of these
79:47 - two numbers and then simply we can have
79:49 - the print statement in order to print
79:52 - the some value so some variable can be
79:55 - printed so let me just save this file
79:56 - and try running this code now so as you
79:58 - can see 30 is getting printed that's
80:00 - because we have passed 10 and 20 over
80:02 - here also to make it more short what we
80:04 - can do is instead of storing the value
80:07 - inside this variable we can simply have
80:09 - the print statement and inside the print
80:11 - statement we can simply call the sum
80:13 - numbers function so as you can see we
80:15 - have the print statement inside this we
80:17 - are calling the sum numbers 10 and 20 so
80:19 - it will return 10 + 20 it is equal to 30
80:22 - so let let me just save this file enter
80:23 - I running this code now so 30 is being
80:25 - printed let's say I change the numbers
80:27 - to 20 and 50 over here so 20 + 50 should
80:31 - be 70 let me just run this code so 70 is
80:34 - getting printed and based on the
80:36 - requirement you can format the print
80:37 - function that is you can have any
80:39 - statements being printed over here along
80:41 - with the sum of the numbers so guys this
80:43 - is one of the examples of how you can
80:45 - Define the functions and use them you
80:47 - can have any other logic inside the
80:49 - functions that you want to implement
80:51 - based on your requirements so guys
80:53 - practice on your own so that on
80:54 - different inputs you get different
80:56 - output list in Python Programming so
80:58 - guys a list is a collection of similar
81:01 - or different types of data so for
81:03 - example suppose we need to record the
81:05 - age of five students so instead of
81:08 - creating five separate variables we can
81:10 - simply create a list so as you can see
81:13 - this is the way that we create the list
81:14 - first of all on the left hand side we
81:16 - have the variable name and then on the
81:18 - right hand side inside the open and
81:21 - close square brackets we have the list
81:23 - of elements which are separated using
81:25 - the commas so I'll just copy this line
81:27 - of code over here and then let us move
81:29 - to the vs code and paste this so as you
81:31 - can see on the left hand side it is the
81:33 - variable name of the list and on the
81:35 - right hand side we have the age of all
81:37 - the students over here and simply we can
81:40 - print the list by using the print
81:42 - function after this we can provide the
81:44 - variable name that is list so let me
81:46 - just save this file enter TR I running
81:47 - this code now as you can see we are
81:49 - getting the list of all the elements in
81:51 - the sequence that we had provided over
81:54 - here it is very important that all these
81:56 - elements are separated using the commas
81:58 - over here now guys the list can have the
82:01 - same kind of elements that is this one
82:03 - is having the list of integers data type
82:06 - only but we can also have the string as
82:08 - well in between so let's say we have a
82:10 - string called John over here in between
82:13 - this list of elements so this is also
82:16 - possible it will not throw any errors
82:18 - while we are running this code so let me
82:20 - just save this file and try running this
82:22 - code now as you can see we are getting
82:23 - the list of all the values 17 18 and
82:26 - then we are getting John and then 19 and
82:28 - then 14 so this is a kind of a
82:31 - heterogeneous list whereas when we have
82:33 - the same kind of data type in the list
82:35 - then it is called the homogeneous list
82:37 - now how do we access the python list
82:39 - element so basically this is one way in
82:42 - order to access the list but what if we
82:44 - want to access only a single element by
82:46 - using this print statement we have
82:48 - accessed all the elements over here but
82:50 - in case we want to access a particular
82:53 - element from this list then what we can
82:55 - do is in Python each item in a list is
82:58 - associated with a number so the number
83:00 - is known as a list index so basically
83:03 - all these numbers that is the elements
83:05 - of the list that are present inside the
83:07 - list so these are associated with the
83:09 - indexes which starts from zero so the 17
83:12 - number is at the zeroth index 18 number
83:15 - is at the first index and so on this is
83:17 - at the second index third index and then
83:20 - so on so basically these elements can be
83:23 - accessed using these indexes so as you
83:25 - can see we can access elements of an
83:27 - array using the index number now how do
83:29 - we access them so what we can do is we
83:32 - simply come over here I'll simply change
83:34 - this to the number 15 that was there
83:36 - previously and what we have to do is
83:38 - let's say I want to access this element
83:40 - that is the fourth element so what will
83:42 - be the index so this is zeroth index
83:44 - then we have one and then two and then
83:46 - three so this is the third index so we
83:48 - can access by using the variable name
83:51 - followed by open and close close square
83:53 - brackets and inside those brackets we
83:55 - have to provide the index number that is
83:57 - three in this case which represents this
83:59 - number that is 19 so let me save this
84:01 - file and try running this code now as
84:03 - you can see we are just getting 19 over
84:05 - here previously we were getting the
84:07 - entire list when we don't provide this
84:09 - index number I'll save this file so as
84:11 - you can see all the values are getting
84:13 - printed but when we provide the index
84:15 - number let's say I want to print 18 this
84:17 - time which is at the index one after
84:19 - this index which is zero so I provide
84:21 - list of one over here save this file and
84:24 - run this code so as you can see 18 is
84:26 - getting displayed and this is how it is
84:28 - one way in order to access a particular
84:31 - single element inside this list by using
84:34 - the index number now it is also possible
84:36 - that we provide the negative index in
84:38 - Python so python allows negative
84:40 - indexing for its sequences the index of
84:43 - minus1 refers to the last item minus 2
84:46 - to the second last item and so on so for
84:49 - now we know that the zero index is the
84:51 - first element of over here and then the
84:53 - first index is the second element but
84:55 - what about the last element let's say we
84:57 - don't know the length of the list like
84:59 - how many elements are present inside the
85:01 - list and we want to get the last element
85:03 - over here so since the first element is
85:06 - at the zero index the previous index
85:09 - that is before 0o which is minus one it
85:11 - will point to the last index of this
85:14 - list that is 14 over here so what if we
85:17 - simply do list of minus1 in this case so
85:20 - I'll just provide minus1 in this case
85:22 - let me just save this file and try
85:24 - running this code as you can see we are
85:26 - getting 14 so basically the minus1 index
85:29 - will point to the last element of the
85:31 - list in this case let's say we want to
85:33 - get the second last element so in this
85:35 - case we will simply provide minus 2 so
85:38 - after minus1 we are having min-2 which
85:40 - will be the previous element of the last
85:42 - element so let me just save this file
85:44 - andent running this code now so as you
85:46 - can see 19 is getting displayed now and
85:48 - this is the way that we can also use the
85:50 - negative indexing as far as accessing
85:52 - the last elements of the list are
85:54 - concerned now there is another concept
85:56 - of slicing in Python list so in Python
85:59 - it is possible to access a section of
86:01 - items from the list using the slicing
86:04 - operator which is nothing but a colon
86:06 - not just a single item so let's say we
86:09 - want to access the second and third
86:11 - elements inside the list so we have to
86:13 - use the slicing operator in this case
86:15 - now what is the slicing operator while
86:17 - providing the indices inside the open
86:19 - and close brackets we have to provide
86:22 - the indexes and separate them using the
86:24 - colon so what is the index of the second
86:26 - element it is one over here since the
86:28 - first element is having the zero index
86:30 - we don't want that we want to start from
86:32 - the first index and then we also want
86:34 - the second index so this time we have to
86:37 - provide the next number that is at the
86:39 - third index now so after this one that
86:42 - is the first index we have to provide
86:44 - colon and then we provide three over
86:46 - here so three is not included in this
86:48 - case please remember that whenever you
86:51 - are providing the ending index that
86:53 - element will not be included whenever
86:55 - you are using the slicing operator over
86:57 - here so the elements that will be
86:58 - considered in this case will be at the
87:00 - index one and at the index 2 which means
87:02 - 18 and 15 so let me save this file and
87:05 - try running this code now as you can see
87:07 - we are getting 18 and 15 only let's say
87:10 - you want to get all the elements
87:11 - starting from this 18 so this index is
87:14 - 18 right now and there is no end index
87:17 - that you want to specify over here so we
87:19 - simply have to remove this three and
87:21 - then we can simp simply specify one
87:23 - followed by the colon so this will make
87:25 - python interpreter to consider all the
87:28 - elements after the first element
87:29 - including the first element itself so
87:31 - let me just save this file now and try
87:33 - running this code so as you can see we
87:35 - are getting all the elements that is 18
87:37 - 15 19 and 14 starting from the first
87:40 - index over here so guys this is the way
87:42 - that we can use slicing in the python
87:44 - list also in order to consider all the
87:46 - list elements over here we need not have
87:48 - to specify any of the indexes if we
87:50 - simply provide the Colum learn over here
87:52 - all the elements will be considered let
87:54 - me just save this file enter I running
87:56 - this code now so as you can see all the
87:58 - elements are getting considered but this
88:00 - thing is kind of a redundant over here
88:01 - that's because if we simply provide the
88:03 - variable name that is list still all the
88:06 - elements will be considered so if we run
88:08 - this code once again so all the elements
88:10 - are being considered over here only when
88:12 - you want to consider the subset of this
88:14 - list you have to use the slicing inside
88:16 - the python list now let us move to the
88:18 - next concept how do we add the elements
88:20 - to a python list so there are two ways
88:22 - to add the elements in the python list
88:25 - the first way is to use the upend
88:27 - function which will help us in order to
88:29 - add a single item in the list and the
88:31 - second way is to use the extend function
88:33 - in order to add another list to the
88:35 - already existing list so let us check
88:38 - this with the help of examples now over
88:39 - here let's say we already have this list
88:41 - of values inside the list variable and
88:44 - now we want to add more elements so what
88:46 - we will do is we will say list followed
88:48 - by Dot and then we have something called
88:50 - as append so this is a function which
88:52 - will take a single element and it will
88:54 - add to the end of this list so let's say
88:56 - I want to provide 25 as the age of
88:59 - another student so let me just save this
89:01 - file now and try running this code so as
89:04 - you can see this element that is 25 it
89:06 - is already added at the end of the list
89:08 - now and in this way we can use the upend
89:11 - function to add more elements inside the
89:13 - list now let's say we have another list
89:15 - over here let's say I provide a list one
89:17 - and the numbers I provide is 1 comma 2
89:20 - comma 3 over here so three elements are
89:22 - there and we want to add all these
89:24 - elements to the original list that is
89:26 - list variable so what we can do is we
89:28 - can use the extend function in this case
89:30 - so we have to use this list variable
89:32 - which is the original list variable
89:34 - followed by Dot and then we have the
89:36 - extend function and inside the
89:38 - parenthesis we have to provide this
89:40 - argument that is list one which is
89:42 - another variable having the list of
89:44 - elements and now if we print this list
89:46 - it will have the updated list of values
89:49 - so let me just save this file and try
89:51 - running this code now so as you can see
89:53 - after this 14 1 2 3 elements are also
89:56 - getting added over here since we have
89:58 - used the extend function in this case
90:00 - let us move to another section can we
90:02 - change the list items so basically the
90:04 - python list are mutable meaning list are
90:07 - changeable and we can change items of a
90:09 - list by assigning new values using equal
90:12 - to operator so what I will do over here
90:14 - is I'll just remove these lines of code
90:16 - so I'll simply provide the original list
90:19 - over here so we will say original
90:22 - list followed by colon and then we will
90:24 - print the list so let me just save this
90:26 - file and try running this code now we
90:28 - have the original list over here I'll
90:30 - just spell this correctly so we have the
90:32 - original list 17 18 15 19 and then 14
90:36 - now let's say at the third position that
90:37 - is 15 we want to change this element to
90:40 - 10 now this is being referred to the
90:42 - second index over here so this is zero
90:45 - index then one and then second index so
90:47 - what we have to do is simply we have to
90:49 - provide list followed by inside the
90:51 - square brackets we will provide the
90:53 - index number that is two and then equal
90:55 - to the new value that is 10 that we want
90:57 - to replace it with and then again what
91:00 - we will do is I'll simply copy this line
91:02 - of code and paste this over here and
91:04 - then we will say updated list and let me
91:07 - just save this file now and try running
91:08 - this code so basically as you can see
91:11 - original list it is having 15 at the
91:13 - third position over here that is at the
91:15 - second index and the updated list is
91:17 - having the number 10 at the same second
91:19 - index over here and this is the way that
91:21 - we can update the list elements so since
91:23 - python list are mutable we can change
91:25 - the elements of the list as well now
91:27 - removing an element from the list so
91:29 - there are two ways either we can use the
91:31 - de function or else we can use the
91:33 - remove function as well so let's say
91:35 - over here we have the original list now
91:37 - so I'll just remove these lines of code
91:39 - and then we can use the D function and
91:42 - Then followed by list and let's say I
91:44 - want to remove this fourth element that
91:47 - is at the index three which is 19 so
91:49 - I'll just provide list of three in this
91:51 - case and then what I will do is I will
91:53 - print the updated list once again so
91:55 - I'll just change this to updated list so
91:58 - basically we are using the de method
92:00 - over here and deleting the third index
92:03 - inside this list so let me just save
92:05 - this file and try running this code now
92:07 - so as you can see we are getting the
92:08 - updated list as 17 18 15 and 14 this
92:12 - element that is 19 it was removed
92:14 - already now instead of this we can also
92:16 - use the remove method so in that case we
92:18 - have to use the variable name first in
92:21 - the D L method that is the delete method
92:23 - we simply used the function name and
92:25 - provided the element from the list in
92:27 - order to remove from that list but over
92:30 - here we have to provide the variable
92:31 - name followed by Dot and then we can
92:33 - simply use the remove function and Then
92:36 - followed by the position so which
92:38 - position we want to remove so let's say
92:39 - I want to remove this element that is 18
92:42 - over here so in this case we have to
92:44 - provide the value of the element that is
92:46 - present inside the list so in this case
92:48 - we provide 18 in the previous example
92:51 - that we have taken using the deel method
92:54 - we used the index number of the element
92:57 - that is present inside the list but in
92:59 - this case we have to use the value in
93:00 - order to remove it so I'll just save
93:02 - this file and try running this code now
93:04 - as you can see 18 was present in the
93:06 - original list but in the updated list we
93:08 - don't have 18 it is 17 15 19 and 14 and
93:12 - in this way we can remove the elements
93:13 - from the list as well now very important
93:15 - operation how do we iterate through a
93:17 - list so basically we can use the for
93:20 - Loop to iterate over the elements of a
93:22 - list so till now what we have seen is we
93:24 - have just used the list that is the
93:26 - variable name in order to print the
93:28 - elements of those list now if you notice
93:30 - we are getting the square brackets over
93:32 - here open and close square brackets
93:34 - within which all the elements are
93:35 - getting printed but let's say we don't
93:37 - want those square brackets and one by
93:39 - one we want to print all the elements at
93:41 - a time so what we can simply do is use
93:44 - the for Loop and we have seen in the
93:46 - previous videos as well the syntax of
93:48 - the Fall Loop we have to use the for
93:50 - keyword followed by by let's say a
93:52 - temporary variable name that is item
93:54 - followed by the in keyword and then we
93:57 - have to provide the sequence at is list
93:59 - and then after that we have the colon
94:01 - and then we can have the print statement
94:03 - over here now in the print statement if
94:05 - we only provide one item that is item in
94:08 - this case so every time all the elements
94:11 - will be printed on the separate lines
94:13 - over here so let us just try this code
94:15 - so we'll just save this file and try
94:17 - running this code now as you can see 17
94:19 - 18 15 19 14 all the elements are getting
94:22 - printed on the separate lines what if we
94:24 - want all the elements to be present on
94:27 - the same line so what we can do is after
94:29 - providing comma over here we have the
94:32 - end parameter inside the print function
94:34 - and this end parameter we can have the
94:37 - comma as the character by which we can
94:39 - separate all the elements so by default
94:41 - this is Slash and character which means
94:43 - the next element will be printed on the
94:45 - next line but if we specify this in this
94:47 - way all the elements will be printed on
94:50 - the same line so let me just say save
94:51 - this file now and try running this code
94:53 - so as you can see all the elements are
94:55 - getting printed on the same line in the
94:57 - same sequence that is present inside
94:58 - this list so in this way we can iterate
95:00 - through all the elements inside the list
95:02 - that are present by using the fall Loop
95:04 - over here now another important thing
95:06 - how do we find the list so we have
95:08 - something called as python list length
95:11 - so in Python we use the Ln function to
95:14 - find the number of elements present in a
95:16 - list so we can have any number of
95:18 - elements inside the list over here so
95:19 - there is no limit on the number of
95:21 - elements that we are supposed to have
95:23 - inside the python list so in case if we
95:25 - want to find the number of elements
95:27 - inside the list we can simply use the
95:30 - length function so we can simply print
95:32 - this and then we can have Ln which is a
95:35 - function and then we can provide the
95:37 - variable name of the list inside this
95:40 - Len function over here so it will return
95:42 - us the count of the elements inside the
95:44 - list so let me just save this file and
95:46 - try running this code now as you can see
95:48 - five that is the count of the number of
95:50 - elements inside the list list is present
95:52 - over here if you provide some more
95:53 - elements over here let's say I have
95:55 - provided five more elements inside the
95:57 - list let me just save this file now and
95:59 - try running this code so we are getting
96:00 - the updated count that is 10 so 10 is
96:03 - the number of elements set are present
96:05 - inside the list and that is how we can
96:07 - easily find the length of the list in
96:09 - this case by using the Ln function over
96:11 - here so Guys these were certain
96:13 - operations as far as list variable is
96:15 - concerned please make sure that you
96:16 - practice on your own and as a homework
96:18 - for you there is something called as a
96:20 - sort function which can help you in
96:22 - order to sort all the elements inside
96:24 - the list so you can practice on your own
96:27 - as a homework for you in order to sort
96:29 - the elements inside the python list and
96:31 - print on your own tle in Python
96:33 - Programming so guys a tle in Python is
96:36 - similar to a list basically the
96:37 - difference between the two is that we
96:40 - cannot change the elements of a tle once
96:42 - it is assigned whereas we can change the
96:44 - elements of a list so previously in the
96:47 - examples of the list that we have seen
96:49 - we were able to change the elements
96:51 - inside the list but the same thing
96:53 - cannot be done with the elements that
96:54 - are present inside the tupple so how do
96:57 - we create a tupple a tupple is created
96:59 - by placing all the items that is
97:01 - elements inside the parenthesis so we
97:03 - have this open and close parenthesis
97:05 - whereas in the list we were using open
97:07 - and close square brackets now these are
97:09 - supposed to be separated by commas over
97:12 - here the parenthesis are optional
97:14 - however it is a good practice to use
97:16 - them so a tle can have any number of
97:18 - items and they may be of different types
97:21 - at integer float list string Etc so guys
97:24 - let us check this with the help of
97:25 - example now over here as you can see we
97:27 - have my tle which is the name of the
97:29 - variable that we have given and 1 2 3
97:32 - these are the elements that is present
97:34 - inside the Tuple if you notice we have
97:36 - this open andclose parenthesis inside of
97:38 - the square brackets and that is the
97:40 - difference between the list and the
97:42 - tupple over here so let us move to the
97:44 - vs code and simply we will provide tle
97:46 - one as the variable name over here equal
97:49 - to followed by open and close parent
97:51 - thesis and let's say we Define five
97:53 - elements one to five over here so this
97:55 - is nothing but we have defined the tle
97:57 - and we can simply print this tle by
98:00 - using the variable name tle one over
98:02 - here so let me just save this file and
98:04 - try running this code now as you can see
98:06 - we are getting all the elements that is
98:07 - 1 2 3 4 5 and in this way we have easily
98:10 - created and printed the tle elements
98:13 - over here now guys an important thing
98:15 - over here let's say you want to create a
98:17 - python tle with only one element so in
98:19 - this case what happens is let let's say
98:21 - if you provide where one that is
98:23 - variable one over here and you provide
98:25 - double Cotes that is hello with this
98:27 - open and close parenthesis in this case
98:29 - this will be considered as a string
98:32 - whereas in the variable two what you do
98:34 - is after this hello you provide a comma
98:36 - so in this case it will be considered as
98:38 - a tupple so this is very important thing
98:41 - if you want to create a tupple with just
98:43 - a one element you have to use the comma
98:46 - after providing that element over here
98:48 - let us check this with the help of
98:49 - examples now over here let's say I
98:51 - provide where one in this case and then
98:55 - open and close parenthesis and then
98:57 - let's say we have hello over here and
98:59 - then I'll just copy this line of code
99:01 - and paste this and I'll simply provide
99:03 - comma after this element so what we will
99:06 - do is I'll just name this variable name
99:08 - as where to so let us now confirm the
99:10 - data types of both the variables so we
99:13 - will say print and then inside this we
99:15 - will use the type function in order to
99:17 - find the data type of where one so we
99:20 - provide where one over here and I'll
99:22 - simply copy and paste this line of code
99:24 - and we provide where two over here so
99:26 - let me just save this file now and try
99:28 - running this code so as you can see
99:30 - first one it is showing us that it is a
99:32 - string and the second thing is showing
99:34 - us that it is a tle now in case if we
99:36 - simply remove this comma from this tle
99:39 - so what happens so let me just save this
99:40 - file and try running this code once
99:42 - again as you can see it has become
99:44 - string now both are strings right now if
99:46 - we provide comma over here and comma
99:48 - over here as well so both the VAR
99:51 - variables will be turned to the tupple
99:53 - data type so guys this is very important
99:55 - if you want to have only one element
99:57 - inside the tupple make sure that that
99:59 - element is followed by a comma over here
100:02 - in order to make that data type as a tle
100:04 - now guys moving to next section how do
100:06 - we access the python tupple elements so
100:09 - there are multiple ways in order to
100:10 - access the elements over here first of
100:12 - all is indexing so this we have already
100:14 - seen previously by using the index
100:17 - number we can access the elements of the
100:19 - tle so let's say we have dle one over
100:21 - here and we have five elements 1 2 3 4 5
100:26 - so how do we access these elements by
100:28 - using the indices so we simply have to
100:31 - provide the dou one that is the variable
100:33 - name and Then followed by open and close
100:35 - square brackets this time and let's say
100:38 - we want to print the element that is
100:40 - three over here every time remember guys
100:42 - that the index it starts from zero so
100:45 - this first element that is number one it
100:47 - is at the index zero and then the second
100:49 - element that is number two it it is at
100:51 - the index one and then the third element
100:53 - that is number three it is at the index
100:56 - two over here so we provide the number
100:58 - that is two which is the index number in
101:00 - this case so this will tell the python
101:02 - interpretor to access the element that
101:05 - is at the index number two for this
101:08 - variable that is tle one so over here
101:10 - what will happen is the index number
101:12 - zero is this and then index number one
101:14 - is this and then we have index number
101:16 - two which is three over here and this
101:17 - element should be printed so let me just
101:19 - save this file and running this code now
101:22 - so as you can see three is getting
101:23 - printed similarly let's say if you want
101:25 - to print this number two which is at the
101:27 - index one in this case so we have to
101:30 - provide one inside this open and close
101:32 - square brackets so let me save this file
101:34 - and try running this code now so two is
101:36 - getting printed this time so guys this
101:38 - is one way in order to access the
101:40 - elements by using the indexing we also
101:43 - have something called as negative
101:44 - indexing so let's say if you don't know
101:47 - the number of elements that are present
101:49 - inside the Tuple whereas there is is a
101:51 - way in order to find the length of the
101:52 - Tuple but in case you want to access the
101:55 - last element of this Tuple over here so
101:58 - you already know that the first element
102:00 - is at the index zero so let me just
102:02 - print that so over here we provide tle
102:04 - one followed by the index number that is
102:07 - zero in this case I'll save this file
102:08 - and try running this code so one is
102:10 - getting printed now let's say you want
102:12 - to print the last element but you don't
102:14 - know at which index it is so we have
102:16 - something called as negative indexing in
102:19 - which case before the zero index the
102:21 - index that is minus1 it will point to
102:24 - the last element of this doule that is
102:26 - five over here so when we provide minus
102:29 - one in this case this element that is
102:31 - five should get printed so let me save
102:33 - this file and try running this code now
102:35 - so five is getting printed similarly if
102:37 - you want to get the second last element
102:40 - of this tle you can simply provide minus
102:42 - 2 over here so when we provide minus two
102:45 - and run this code so four is getting
102:47 - displayed which is the second last
102:49 - element so this is like a cycle over
102:51 - here when you use the negative indexing
102:54 - the last elements of this tle will start
102:56 - getting printed over here and then guys
102:58 - you can also use the slicing
103:00 - functionality as we have already seen
103:02 - with the list so basically let's say if
103:04 - you want to print the subset of this tle
103:06 - between 2 to 4 so what you can do is
103:09 - what is the index of this element that
103:11 - is two it is zero and then one so at the
103:13 - first Index this two is present so we
103:15 - will provide one over here followed by a
103:18 - colon and then what is the in index of
103:21 - the element that we want that is four so
103:24 - the index is it is 0 1 2 and then this
103:27 - index is three but we don't want to
103:29 - specify three because this is excluded
103:31 - so the next index which is four we have
103:33 - to specify that index which will be not
103:35 - included in our slicing operator so when
103:38 - we provide four over here always
103:40 - remember that this index on the left
103:41 - hand side will be considered but this
103:44 - index will not be considered the fourth
103:46 - index will not be considered but before
103:48 - this set is the third index will be
103:49 - considered while printing the statement
103:52 - so let me just save this file and try
103:53 - running this code now so as you can see
103:55 - 2 3 and four is getting printed the last
103:58 - index set is four which is having the
104:00 - element five this will not be considered
104:02 - because it is not included in the
104:04 - slicing operator so these are some of
104:06 - the ways that you can use in order to
104:08 - access the python tupple elements over
104:10 - here now python tupple methods there are
104:13 - two methods only that is count and index
104:15 - over here what is count so basically in
104:18 - order to get the number of occurrences
104:20 - of a particular element you can use the
104:22 - count method so over here while using
104:24 - the count function we have to use the
104:26 - variable name followed by Dot and then
104:29 - as you can see count and index these are
104:31 - the only two methods the other methods
104:33 - such as appending or removing or
104:35 - deleting the elements are not present
104:37 - that's because as I already told you the
104:39 - tupple inside python are not mutable
104:42 - which means we cannot change the
104:43 - elements once they are assigned over
104:45 - here so when we provide count we have to
104:48 - provide one of the elements inside that
104:50 - t so let's say we want to find the
104:52 - occurrence of the element that is two
104:54 - over here in this case that means how
104:56 - many times this number two is occurring
104:58 - so let me save this file now and try
104:59 - running this code so as you can see the
105:01 - count is one over here that's because
105:03 - only one occurrence of number two is
105:05 - present let's say I provide some more
105:07 - occurrences over here so I provide the
105:09 - number two two times over here so the
105:11 - total count becomes three in this case
105:13 - over here we have two and then two more
105:15 - twos are present so basically the total
105:17 - count is three let me just run this code
105:19 - once again so so number of twos that are
105:21 - present over here inside the tle is
105:23 - three and that is what we are getting
105:25 - over here and this is the main
105:26 - functionality of the count function now
105:29 - the another function that is index so if
105:31 - you want to get the index of a
105:34 - particular element you can use the index
105:36 - function so after this dot we have
105:38 - something called as index and then
105:40 - inside the open and close parenthesis we
105:42 - have to provide the element for which we
105:44 - want to find the index so let's say I
105:46 - want to find the index of this element
105:48 - that is number five over here so it is
105:50 - four basically let me just save this
105:52 - file and try running this code and
105:54 - confirm so as you can see four that is
105:56 - the index of this element is getting
105:58 - printed over here so Guys these
105:59 - functions you can use based on your
106:01 - requirements as far as tupple is
106:03 - concerned now one very important thing
106:05 - iterating through a tupple in Python so
106:07 - we can use the fall Loop to iterate over
106:09 - the elements of a tle so basically we
106:11 - have seen this in the previous video as
106:13 - well so far we have printed the elements
106:15 - of the tle by using the variable name in
106:17 - this way so let me save this file now
106:19 - and try running this code as you can see
106:21 - all the elements are getting printed but
106:23 - there is a problem over here we are
106:24 - getting this open and close parenthesis
106:27 - also while printing these elements what
106:29 - if we only want to print single element
106:32 - at a time so we can simply use the for
106:34 - Loop and iterate through all the
106:35 - elements over here inside the tupple so
106:38 - we use the for keyword followed by let's
106:40 - say the temporary variable as the item
106:42 - and then we have the in keyword and then
106:45 - the name of the variable that is the
106:46 - sequence which is tle one in this case
106:49 - and then we simply have to print this
106:51 - item that is item variable now what will
106:54 - happen is all the items will be printed
106:56 - on separate lines over here because by
106:59 - default the end parameter of this print
107:02 - function is having the Slash and
107:03 - character so let me just save this file
107:05 - and try running this code now as you can
107:07 - see all the elements are getting printed
107:09 - on the new line what if we want all the
107:11 - elements to be present on the same line
107:13 - separated by comma over here so we
107:15 - simply have to provide comma and then
107:17 - there is something called as end
107:19 - parameter for this print function so we
107:21 - use that and inside the double codes we
107:24 - provide the comma over here which will
107:26 - be kind of a separat for all those
107:28 - Elements which will be printed on the
107:30 - terminal so let me just save this file
107:32 - now and try running this code so as you
107:34 - can see all the elements now are getting
107:36 - printed on the same line and they are
107:38 - separated with a comma if you want a
107:40 - space character after comma that can
107:42 - also be done you provide comma followed
107:44 - by the space character let me just save
107:46 - this file now and try running this code
107:48 - so all the elements are separate ated
107:50 - with a comma character and then a space
107:52 - character additionally for a better
107:54 - readability so guys this is another way
107:56 - you can use the for Loop in order to
107:58 - iterate through all the elements of the
108:01 - tupple now let us understand what are
108:02 - the different advantages of a tuple over
108:04 - list in Python so we generally use tles
108:07 - for heterogeneous that is different data
108:09 - types and list for homogeneous which
108:11 - means similar data types so in a tuple
108:14 - you can have the different data types as
108:16 - well so basically the tupple is being
108:18 - used for that purpose only and we cannot
108:20 - change the elements inside the tupple so
108:23 - since tles are immutable which means you
108:25 - cannot change the data inside the Tuple
108:27 - once they are assigned iterating through
108:29 - a tupple is faster than with a list so
108:32 - behind the scenes what is happening is
108:34 - the program already knows that the
108:35 - tupple elements will not be changed and
108:37 - for this reason the tupple is little bit
108:39 - faster compared to the list so there is
108:41 - a slight performance boost over here now
108:44 - tles that contain immutable elements can
108:46 - be used as a key for a dictionary as
108:49 - well with a list this is not possible so
108:51 - inside a dictionary as you must be
108:53 - knowing there are key value Pairs and
108:55 - the elements of the tle can be
108:57 - considered as keys for the dictionary if
108:59 - you have data that doesn't change
109:01 - implementing it as a tle will guarantee
109:03 - that it remains right protected so
109:05 - nobody can change the elements of a
109:07 - tuple if you want some data to be fixed
109:10 - whenever you are implementing the list
109:12 - of elements that should be present in a
109:15 - sequence and that must not be changed so
109:17 - Guys these are certain advantages of a
109:19 - tle over a listen Python Programming
109:21 - sets in Python Programming so guys a set
109:24 - is a collection of a unique data which
109:26 - means that the elements in a set cannot
109:29 - be duplicate elements so over here you
109:31 - can easily create a set in the python
109:34 - basically in Python we create the sets
109:36 - by placing all the elements inside the
109:38 - curly braces separated by comma so guys
109:41 - previously we have seen that for the
109:43 - list we are using the open and close
109:45 - square brackets for the tle we use the
109:47 - open and close parenthesis and over here
109:50 - here for sets we are using the open and
109:52 - close curly braces so we will check this
109:54 - with the help of examples as well a set
109:56 - can have any number of items and they
109:58 - may be of different types so as you can
110:01 - see it can be of the integer float tle
110:04 - or string data type or any other data
110:06 - type but a set cannot have mutable
110:08 - elements like list sets or dictionaries
110:11 - as its elements so guys this is very
110:13 - important you cannot have another list
110:16 - set or a dictionary which we are going
110:18 - to see in the upcoming videos over here
110:20 - we cannot have these kinds of data types
110:22 - inside a particular set now let us check
110:24 - the creation of set with the help of
110:26 - example now over here so let's say I
110:28 - provide set one as the variable name and
110:31 - then we provide the equal to symbol
110:33 - followed by the open and close curly
110:35 - braces so inside these braces we have to
110:37 - provide the elements of the set so let's
110:39 - say we have the set of integers we have
110:42 - 1 2 3 4 and then five so guys we have
110:45 - five elements over here 1 to five which
110:47 - are the elements of this set and simply
110:49 - we can print all these elements inside
110:52 - the set by using the print function over
110:54 - here and then we can say set
110:58 - elements R and then colon and then we
111:01 - can have set one that is the variable
111:04 - name so guys let me just save this file
111:06 - and try running this code now so as you
111:08 - can see we are getting set elements are
111:10 - we are getting all the elements that is
111:12 - 1 2 3 4 5 and guys this is the way that
111:15 - we can create a set in the Python
111:16 - Programming now guys it is very
111:18 - important that we cannot have the
111:20 - duplicate items in this set so let's say
111:22 - I provide some more numbers over here
111:24 - which are already present in this set so
111:26 - let's say two and three are already
111:28 - present I provide this two and three
111:30 - once again so when we do this so right
111:32 - now we have seven number of elements but
111:34 - let me just save this file now and try
111:36 - running this code to see how many
111:38 - elements get printed so as you can see
111:40 - only five elements are getting printed
111:42 - so those two elements that is two and
111:44 - three will not be considered once again
111:46 - while printing them because we cannot
111:48 - have duplicate elements we can only have
111:50 - the unique elements inside the set and
111:53 - guys this is the main functionality of
111:55 - having the set data structure in Python
111:57 - Programming So based on your
111:59 - requirements if you don't want the
112:00 - duplicate elements to be present you can
112:02 - use the set data structure in the Python
112:05 - programming language now guys how do we
112:07 - create an empty set in the python so
112:09 - basically creating an empty set is a bit
112:11 - tricky so empty curly braces if we use
112:14 - then it will make a empty dictionary in
112:16 - Python so basically when we create a
112:18 - dictionary we again use the curly braces
112:21 - so let us check this with the help of
112:22 - example now over here what happens if we
112:24 - create the empty set so let's say we
112:27 - provide set one it is equal to open and
112:29 - close curly braces as you can see we
112:32 - have not provided any element and this
112:33 - is the empty set but let me just print
112:36 - the type of this variable over here so
112:38 - we will simply use the type function and
112:41 - then provide the set one as the variable
112:44 - name so guys what will be the type of
112:46 - this set one variable so let me just
112:48 - save this file now and try running this
112:49 - code code as you can see it is saying
112:51 - that class it is a dictionary data type
112:54 - so this set one variable is of the data
112:56 - type dictionary by default when we
112:58 - provide the open and close curly braces
113:01 - how do we make it as a empty set data
113:04 - type so what we have to do is instead of
113:06 - using the open and close curly braces we
113:09 - have to use the set function so there is
113:11 - something called a set function over
113:13 - here as you can see vs code is
113:15 - suggesting us so this set function
113:17 - followed by the open and close
113:18 - parenthesis will help help us to create
113:20 - a new empty set over here so let me just
113:23 - save this file now and try running this
113:24 - code over here what we are trying to do
113:26 - is again we are trying to print the type
113:29 - of this set one but this time it should
113:31 - be of the set data type so let me just
113:33 - run this code now so as you can see we
113:36 - are getting the set data type over here
113:38 - previously we were getting the
113:39 - dictionary so in order to have the empty
113:42 - set in Python Programming we can use the
113:44 - set function over here now very
113:46 - important question how do we add the set
113:48 - items in Python so basically sets are
113:51 - mutable which means we can add and
113:53 - remove items from the set however since
113:56 - they are unordered indexing has no
113:58 - meaning so guys basically if you must
114:00 - have noticed there is no one order in
114:03 - which the set items were printed
114:05 - previously so let us check this once
114:07 - again over here we provide set one it is
114:09 - equal to and let's say we provide some
114:11 - elements that is 3 2 4 1 5 and then let
114:16 - me just print this set one over here so
114:20 - we provide set one inside the print
114:22 - function let me just run this code as
114:24 - you can see we are getting 1 2 3 4 5
114:26 - this is not of the same order in which
114:29 - we have provided these elements inside
114:31 - the set so we cannot use index numbers
114:33 - over here as well in order to access
114:36 - these elements one at a time since the
114:38 - way in which the elements inside the set
114:40 - are printed are not in a particular
114:43 - order now guys how do we add new
114:45 - elements to this set so basically we
114:47 - cannot access or change an element of a
114:49 - set set using the indexing or slicing
114:52 - but we can use the add method to add an
114:55 - item to a set so let us say I want to
114:57 - add another element over here so
115:00 - basically what we will do is we will say
115:02 - initial set and then colon and then we
115:06 - provide set one and then let's say we
115:08 - provide set one dot we have something
115:11 - called as ADD over here as you can see
115:13 - this is a function that we can use in
115:15 - order to add elements inside the set so
115:18 - let's say we provide 10 as the number to
115:20 - be added to this particular set that is
115:22 - set one and then again we want to print
115:25 - that set one so I'll just copy this and
115:26 - paste this over here and then we have
115:29 - updated set over here so we have updated
115:32 - set and then set one being printed so
115:34 - let me just save this file and try
115:35 - running this code now so as you can see
115:38 - initial set it is 1 2 3 4 5 and then
115:41 - after adding this element we are getting
115:43 - the updated set as 1 2 3 4 5 and then
115:46 - the last element that is 10 over here
115:48 - which is being added by using the add
115:50 - method and this is the way that we can
115:52 - add the elements inside the set remember
115:55 - that the order in which they are added
115:57 - will not be followed while printing them
115:59 - so you cannot rely on the order in which
116:02 - the set elements will be printed on
116:04 - Console now guys another important thing
116:06 - how do we remove an element from the set
116:08 - so we can use the discard method to
116:10 - remove the specified element from a set
116:12 - so let us say after adding this we want
116:15 - to remove the element that is three from
116:18 - this set so what we can do is we can
116:20 - provide set one and then followed by Dot
116:23 - and then we can have discard method in
116:25 - order to remove the element we need to
116:27 - provide the element which needs to be
116:29 - removed so over here we provide the
116:31 - number three which will be removed from
116:33 - the set one and then again let me just
116:36 - copy this line of code and paste this
116:38 - over here so that we can print the
116:40 - updated set after removing so over here
116:43 - we say updated set after removing three
116:48 - and then let me just save this file and
116:49 - try running this code now so as you can
116:51 - see we are getting 1 2 4 5 and then 10
116:55 - so the element three is being removed
116:57 - after using the discard method over here
116:59 - and guys this is the way that we can
117:01 - remove the elements from the set now
117:03 - guys there is another way in order to
117:04 - access the elements inside the set we
117:07 - can iterate over a set in Python by
117:09 - using the fall Loop so this can be
117:11 - easily done by using the fall Loop over
117:13 - here so what I will do is I'll just
117:15 - clear these lines of code and then we
117:17 - will say for and then item in set one so
117:22 - this is the syntax that we use while
117:24 - using the fall Loop and then we can have
117:26 - the print statement over here guys
117:28 - notice that till now we were printing
117:30 - the elements of the set by using the set
117:32 - one variable and that is why we were
117:34 - getting the starting and the ending open
117:37 - and close curly braces over here but
117:39 - this time let's say we don't want those
117:41 - but we want only those numbers that is
117:43 - the elements inside the set to be
117:45 - printed so we can easily use the for
117:48 - Loop and it through each and every item
117:51 - inside the set and this is the way that
117:53 - we can do so we provide the print
117:55 - statement over here and inside the item
117:58 - variable one at a time all the elements
118:00 - will be printed over here so let me just
118:03 - save this file now and try running this
118:04 - code so as you can see we are getting 1
118:06 - 2 3 4 5 now all these numbers are on a
118:09 - different line what we can do is we can
118:12 - use the end parameter of the print
118:14 - function so over here we provide the end
118:16 - parameter and then we simply provide the
118:18 - space character so that all the items
118:21 - are separated by the space characters
118:23 - over here so let me just save this file
118:25 - now and try running this code so as you
118:27 - can see we are getting 1 2 3 4 5 which
118:29 - are the elements of this set if you want
118:32 - all these numbers to be separated by
118:33 - commas what we can do is instead of the
118:35 - space character we can provide the comma
118:38 - and let me just save this file and try
118:39 - running this code once again as you can
118:41 - see we are getting 1 2 3 4 5 and all the
118:44 - elements are being separated using the
118:46 - comma character now guys how do we find
118:48 - the number of set elements so we can use
118:51 - the Len method that is the length method
118:53 - to find the number of elements that is
118:55 - present inside the set so what we can do
118:58 - is simply we can provide the print
118:59 - statement over here and we can simply
119:01 - say that length of set is and then colon
119:07 - and then we can simply use the alen
119:10 - method and then inside this method we
119:12 - can provide the set one that is the
119:14 - variable name so let me just save this
119:16 - file now and try running this code so as
119:18 - we can see length of set is five so
119:20 - basically since five elements are
119:22 - present over here we are getting the
119:24 - length as five what if we provide some
119:26 - more elements let's say I provide 6 7
119:28 - and let's say I provide some more
119:30 - duplicate elements over here that is 1 2
119:33 - and then three so over here there are
119:35 - total 10 elements out of which three
119:37 - elements are duplicate so what is the
119:39 - exact length of the set so let me just
119:41 - save this file now and try running this
119:42 - code so as you can see length of set is
119:45 - seven so even though we are having 10
119:47 - items inside the set but out of those 10
119:50 - items three items are duplicate items so
119:53 - those duplicate items will not be
119:54 - considered it will be considered only
119:56 - once and that is why we are getting the
119:58 - length of this set s seven now guys very
120:01 - important thing about the set operations
120:03 - we can carry out different set
120:05 - operations in Python Programming one is
120:07 - Union of two sets which can be done by
120:10 - using the union method or this or symbol
120:13 - over here we can also have the set
120:15 - intersection which can be implemented by
120:17 - using the intersection method and then
120:19 - we also have the difference between the
120:21 - two sets which means we can use the
120:23 - difference method or the minus symbol
120:26 - over here so guys let us check all these
120:28 - operations one at a time so over here
120:30 - what we will do is we will have two sets
120:32 - over here we will say set one it is
120:34 - equal to 1 2 and then 3 and then let's
120:37 - say we have set two it is equal to 3 4
120:41 - and then 5 now guys let's say we want to
120:44 - find the Union first so what we will do
120:46 - is we will say Union and then we will
120:49 - simply say set one followed by Dot and
120:52 - then we have the union method followed
120:55 - by the parameter needs to be set two
120:57 - over here because that is the another
120:59 - set that we want to find the union of
121:02 - similarly we will do the intersection
121:03 - and difference as well so I'll just copy
121:06 - and paste these lines of code over here
121:08 - we will say intersection in this case
121:11 - and then we will simply change the union
121:14 - method to intersection over here and
121:17 - then over here we will say
121:19 - difference so difference and then inside
121:22 - of this Union we will say difference so
121:25 - guys basically what we are doing over
121:27 - here is these are all the set operations
121:29 - the union will find all the elements
121:32 - that are present in set one and set two
121:34 - and all the elements will be unique in
121:36 - the intersection part we will get all
121:39 - the elements that are common in both the
121:41 - sets which means three in this case and
121:43 - then in the difference we will find all
121:45 - the elements that are present in set one
121:47 - but not present in set set two so guys
121:50 - let me just save this file now and try
121:51 - running this code to see what will be
121:53 - the results of all these operations so
121:55 - as you can see the union is giving us 1
121:58 - 2 3 4 5 which means all the elements
122:01 - that are present in set 1 and set 2 so
122:03 - we are having 1 2 three in set one and
122:06 - then in set two the three is already
122:08 - printed and then it is printing four and
122:10 - five as well in intersection we are
122:12 - getting only three that's because the
122:14 - element three is the only element which
122:16 - is common in both the sets for the
122:19 - difference operation we are getting only
122:20 - one and two that's because these are the
122:22 - only two elements which are present in
122:24 - set one but not present in set two so
122:27 - Guys these are certain set operations
122:29 - that can be implemented with Python
122:31 - Programming apart from this there are
122:32 - multiple built-in methods that you can
122:34 - use as far as sets are concerned so when
122:37 - we provide the variable name that is set
122:38 - one followed by dot as you can see these
122:41 - are all the methods that can be used
122:43 - based on your requirements dictionary in
122:45 - Python Programming so guys the python
122:48 - dictionary is an an ordered collection
122:50 - of items it stores elements in the form
122:53 - of key value pairs so basically on the
122:55 - left hand side we have a key and on the
122:58 - right hand side we have the value and
123:00 - such key value pairs are known as
123:02 - dictionary in Python Programming now
123:04 - guys the keys are unique identifiers
123:07 - that are associated with each value so
123:09 - basically we cannot have duplicate keys
123:12 - in a dictionary whereas we can have the
123:14 - duplicate values in the dictionary so as
123:16 - you can see for example over here on
123:18 - left hand side we are having the keys on
123:20 - right hand side we are having the values
123:22 - so Nepal Italy and England these are
123:25 - certain Keys over here and they are
123:27 - capital that is Katmandu Rome and then
123:30 - London these are the values on the right
123:32 - hand side so how do we create a
123:34 - dictionary in Python we can have any
123:36 - variable name in this case and after the
123:38 - equal to symbol inside the open and
123:40 - close curly braces we are having the key
123:42 - value pairs so since this is a string we
123:45 - are enclosing it within the double
123:46 - quotes over here and then after the key
123:49 - that is Nepal we are providing a colon
123:51 - in this case followed by the value which
123:54 - is again inside the double codes and
123:56 - then separated by commas we have more
123:59 - key value pairs over here so guys this
124:00 - is the way that we can create the
124:02 - dictionary so guys let us check this
124:04 - with the help of examples now over here
124:06 - so let us say we have dict1 that is the
124:09 - variable name followed by equal to and
124:11 - then let's say we provide the same data
124:14 - over here so I'll just copy and paste
124:16 - this line so we have copied the same key
124:18 - value pirs over here now simply we can
124:20 - print this key value pairs by using the
124:22 - print function and Then followed by
124:25 - dict1 which is the variable name so let
124:27 - me just save this file and try running
124:29 - this code now as you can see we are
124:31 - getting all the key value pirs over here
124:33 - being printed on the console so guys
124:35 - this is the way that we can create the
124:36 - dictionary along with the key value P
124:39 - that we want to store inside the
124:41 - dictionary now how do we add elements to
124:43 - a python dictionary so we can add the
124:45 - elements to a dictionary using the name
124:47 - of the dictionary with open and close
124:49 - square brackets so guys over here what
124:52 - we will do is we will say initial
124:57 - dictionary so this label we have added
124:59 - so that we can identify that this is the
125:01 - initial dictionary now what we will do
125:03 - is we will add one more key value pair
125:06 - inside the same dictionary so what we
125:08 - have to do is we have to use this
125:10 - variable name that is dict1 followed by
125:12 - open and close square brackets and
125:15 - inside this we have to provide the key
125:17 - so let's say the key over here we
125:19 - provide India is the key and then the
125:21 - capital of India it is Delhi so over
125:24 - here the value that we have to provide
125:26 - is Delhi in this case so what we have
125:28 - done is we have provided the variable
125:30 - name and Then followed by the open and
125:32 - close square brackets and inside those
125:35 - brackets we have to provide the key in
125:37 - this case it is a string and then we
125:38 - have equal to followed by the value for
125:41 - this key which is again another string
125:43 - and then guys what we will do is let's
125:45 - say we want to print this entire
125:47 - dictionary once again so we will print
125:48 - print this and over here we will say
125:51 - updated dictionary and then again dict1
125:54 - so let me just save this file and try
125:56 - running this code now so as you can see
125:58 - we have the updated dictionary as we
126:00 - have Nepal Italy England and then the
126:03 - last element that we have added just now
126:05 - is the key that is India and Delhi that
126:08 - is the capital of India as the value so
126:10 - guys this is the way that we can add
126:12 - elements inside the dictionary in the
126:14 - form of key value pairs now guys how do
126:16 - we change the value of a dictionary so
126:19 - we can again use the open and close
126:21 - square brackets in order to change the
126:23 - value associated with a particular key
126:25 - so guys let us check this with the help
126:27 - of example now so over here what we will
126:29 - do is let's say we have added this key
126:31 - value pair that is for India we have the
126:34 - capital that is Delhi but now let us say
126:36 - instead of having the capital as the
126:38 - value we can provide any city as the
126:41 - value for this country so what we can do
126:43 - is again we can provide the variable
126:46 - name that is dict1 and then for this key
126:49 - that is India we want to update the
126:52 - value so let's say this time the value
126:54 - that we provide is Mumbai which is a
126:56 - very popular city in India so we provide
126:59 - Mumbai over here and then again we are
127:01 - printing this dictionary once again so
127:03 - let me just save this file now and try
127:05 - running this code so as you can see the
127:07 - updated dictionary first time it is
127:09 - showing India that is Delhi and then the
127:12 - second time that is updated dictionary
127:14 - it is showing India and this time the
127:16 - value it is Mumbai in this case so guys
127:18 - this is the way the same way is used in
127:20 - order to add the key value pair and in
127:23 - order to update the key value pair as
127:25 - well we have to make sure that whatever
127:27 - key we want to update it is Cas
127:30 - sensitive if let's say I provide the
127:32 - small I over here so in this case it
127:34 - will add a key value pair since this
127:36 - India is not matching with this India
127:39 - that's because over here we are having
127:40 - the capital I and over here we are
127:42 - having the small I so let me save this
127:44 - file now and try running this code this
127:46 - time we are getting the five key value
127:48 - pairs in this case so India Delhi and
127:51 - then we have the small I and then Mumbai
127:53 - so guys make sure that whenever you are
127:55 - updating the key value PA the key of the
127:57 - dictionary must exactly match with the
128:00 - existing keys that are present in the
128:01 - dictionary now guys how do we access the
128:03 - elements from the dictionary so in
128:05 - Python we use the keys to access their
128:08 - corresponding values so let us check
128:09 - this with the help of examples now over
128:11 - here so let's say we have these three
128:13 - key value pairs as the original
128:15 - dictionary now we only want to print the
128:17 - value of this particular key that is
128:19 - Nepal over here so what we will do is we
128:21 - will simply have the print statement and
128:24 - then we will say dict1 that is the
128:27 - variable name followed by open and close
128:29 - square brackets and we simply provide
128:31 - this key that is Nepal over here so
128:33 - inside the double codes we provide Nepal
128:36 - over here so let me just save this file
128:37 - and try running this code now so as you
128:39 - can see we are getting the value of this
128:41 - key that is Nepal similarly if we
128:43 - provide Italy as the key so I'll just
128:47 - replace Nepal by Italy over here so as
128:49 - you can see we are getting the value as
128:51 - Rome because the value for this key that
128:54 - is Italy is Rome over here so in this
128:56 - way we can easily access the values of
128:58 - the keys that we want to print now guys
129:01 - how do we remove the elements from the
129:02 - dictionary so we use the D statement to
129:05 - remove an element from the dictionary so
129:08 - what we will do is let's say I want to
129:10 - print the original dictionary over here
129:13 - so we will say
129:15 - original
129:17 - dictionary and then colon and then we
129:20 - say dict1 now guys what we will do is
129:23 - let's say I want to delete this key
129:25 - value pair that is Nepal and Katmandu so
129:28 - we will use delete and Then followed by
129:31 - dict1 and then open and close square
129:33 - brackets and inside this we have the
129:36 - double codes and we simply provide the
129:38 - key over here that is Nepal so this
129:39 - statement will help us in order to
129:41 - delete this particular key that is Nepal
129:44 - and Katmandu over here so let me just
129:47 - print this dictionary once again so over
129:50 - here we have updated dictionary and then
129:53 - let me just save this file now and try
129:55 - running this code so as you can see
129:57 - original dictionary we are getting all
129:59 - the three key value pairs that is Nepal
130:01 - Italy and England over here along with
130:03 - their values but the updated dictionary
130:06 - it is giving us only two key value pairs
130:08 - that is Italy that is Rome and for
130:10 - England we are getting London so over
130:13 - here this key value pair that is for
130:15 - Nepal we are having the Katmandu value
130:17 - this was removed because of this
130:20 - particular statement that we have used
130:22 - in order to remove the Nepal key and its
130:24 - value as well now guys as far as
130:26 - dictionary membership test is concerned
130:29 - we can test if a key is in a dictionary
130:31 - or not using the keyword in so in
130:34 - keyword is used in order to check the
130:36 - membership test so note that the
130:38 - membership test is only for the keys and
130:40 - not for the values so guys let's say
130:42 - over here I'll just remove these lines
130:43 - of code so for this original dictionary
130:46 - we want to find whether the key Italy is
130:49 - present inside the dictionary or not so
130:52 - we will say print and then we can simply
130:54 - say Italy and then we use the in keyword
130:58 - followed by dict1 so guys what exactly
131:01 - we are doing is we are checking whether
131:03 - this string it is present in dict1 or
131:06 - not so let me just save this file and
131:07 - try running this code so as you can see
131:09 - it is showing us true over here that's
131:11 - because the key Italy is present inside
131:14 - the dictionary but the same thing is not
131:16 - applicable when we provide one of the
131:18 - values inside the dictionary so let's
131:20 - say we provide Rome as the value over
131:22 - here so Rome in dict1 so let me just
131:25 - save this file and try running this code
131:27 - so as you can see it is showing us false
131:29 - that's because Rome is the value and it
131:31 - is not one of the keys that are present
131:33 - inside the dictionary so guys we can
131:35 - also use the in keyword in order to
131:37 - check whether a particular key is
131:40 - present inside the dictionary and it is
131:42 - only applicable for the list of keys
131:44 - over here now guys we can also iterate
131:46 - through the dictionary by using using
131:48 - the fall Loop over here so what we can
131:50 - do is simply we can use the fall Loop in
131:52 - order to print all the key value pairs
131:55 - so over here we have the for keyword
131:57 - followed by let's say we provide the key
132:00 - variable name and then we provide the in
132:03 - keyword and Then followed by the
132:05 - variable name that is dict1 and then
132:07 - colon so what we will do is we will
132:10 - simply have the print statement and then
132:12 - let's say we want to print the key value
132:14 - PS in the particular format so we will
132:16 - say key in this case and Then followed
132:19 - by comma and then let's say we provide
132:22 - Arrow over here and then after this we
132:25 - provide the value so how do we access
132:27 - the value we provide the dict1 that is
132:30 - the variable name and then inside the
132:33 - open and close square brackets we
132:35 - provide the key in this case so guys
132:37 - basically what is happening over here is
132:39 - all the keys that are present inside
132:41 - this variable one at a time it will be
132:43 - assigned to this key and this key we are
132:46 - printing on the left hand side and then
132:48 - we are having the hyphen and the arrow
132:50 - symbol and then using this key variable
132:52 - we are getting the value from this
132:54 - dictionary in this case so guys let me
132:56 - just save this file now and try running
132:58 - this code so as you can see we are
133:00 - getting Nepal so Katmandu is the value
133:02 - then for the key Italy we are getting
133:04 - Rome as the value and for England we are
133:07 - getting the London as the value so guys
133:09 - this is the way that we can use the fall
133:11 - Loop in order to iterate through all the
133:13 - key value pairs inside the dictionary
133:15 - file reading in Python Programming so
133:18 - guys a file is a container in computer
133:20 - storage devices used for storing data so
133:23 - when we want to read from a file we need
133:26 - to open it first when we are done it
133:29 - needs to be closed so that the resources
133:31 - that are tied with the file are freed so
133:33 - guys we are going to check this with the
133:35 - help of example how we can open the file
133:38 - in order to read the content of the file
133:40 - and then after that we can close the
133:42 - file as well so basically in Python a
133:44 - file operation takes place in the
133:46 - following order first of first of all we
133:48 - have to open the file then the next
133:50 - thing is we read the file content and
133:52 - then after reading the file content we
133:54 - close the file so basically the first
133:56 - operation that is opening the file we
133:58 - can use the open method to open a file
134:01 - so as you can see for example over here
134:03 - we are providing the variable name on
134:05 - the left hand side and then on the right
134:07 - hand side we have the open function and
134:10 - then we have the path of the file where
134:12 - the file is stored and then by default
134:15 - it is opened in the read mode we can ALS
134:17 - Al use the second parameter and provide
134:20 - the character that is R for reading the
134:22 - file and in order to write into the file
134:25 - we use W as the character over here in
134:27 - this case and then guys after this we
134:29 - can read the file in Python by using the
134:31 - read method so basically this variable
134:34 - that we had used on the left hand side
134:36 - we can use the same variable over here
134:38 - in order to call the function that is
134:40 - read and this will help us in order to
134:43 - read the content into the variable that
134:45 - is read content and then in order to
134:47 - close the file we can simply use the
134:49 - close method so guys let us check all
134:51 - this with the help of example now over
134:53 - here so let's say we have the variable
134:55 - name that is file one and then followed
134:57 - by equal to and then we use the function
135:00 - name that is open in order to open the
135:02 - file and then inside the open and close
135:05 - parenthesis we are going to have the
135:07 - path of the file that we want to open so
135:09 - guys over here I have the test file for
135:12 - which I have written some content over
135:14 - here so we have these four lines inside
135:16 - the test file so what we can do is so
135:18 - guys we have to copy the entire path of
135:20 - this directory this is very important in
135:23 - whichever directory your file is you
135:25 - have to copy the entire path of that
135:27 - directory and paste this into your code
135:30 - so that your code can access that
135:31 - directory and the file that you want to
135:34 - read so basically over here inside the
135:36 - double codes we have to provide the
135:38 - directory path and Then followed by the
135:40 - name of the file that we want to read so
135:42 - over here I'll just copy the name of the
135:45 - file that is the test file and paste
135:47 - this over over here followed by txt now
135:50 - guys it is very important that while
135:51 - you're copying the directory path you
135:53 - will be getting this back slashes over
135:55 - here so you have to provide another back
135:57 - slash since this one back slash is
136:00 - acting as the Escape character so you
136:02 - have to provide two back slashes over
136:04 - here every time that you are providing
136:06 - the directory path so I'll just provide
136:08 - extra back slashes over here at every
136:11 - instance in this directory path so guys
136:13 - this is our entire path over here
136:15 - followed by the test file that is the
136:17 - file name name and then the extension
136:19 - that is txt now guys the second step is
136:21 - to read this file so the first step is
136:24 - completed that we have opened the file
136:26 - now the next step is to read the content
136:28 - so we will say read uncore content as
136:32 - the variable name followed by equal to
136:35 - we use this file one variable that we
136:37 - have used in order to open the file
136:40 - followed by Dot and then we have the
136:41 - read method so this method will help us
136:44 - in order to read the content into this
136:47 - read read content variable and then guys
136:49 - simply we can print the read content
136:52 - variable so over here we can say read
136:55 - content so let me just save this file
136:57 - now and try running this code so as you
136:59 - can see we are getting all the four
137:00 - lines that are present inside the test
137:02 - file so if I open the test file over
137:04 - here once again it says this is a test
137:07 - line in a test file so the same line is
137:10 - printed over here on the console this is
137:12 - a test line in a test file similarly we
137:15 - have the other three lines it is this is
137:17 - another test line then we have this is
137:19 - third line and then this is fourth line
137:21 - in test file so all those lines that are
137:24 - present inside the test file are being
137:26 - printed over here on the console so guys
137:28 - this is one of the easiest way that you
137:30 - can open the file in a particular
137:33 - directory read the content by using the
137:35 - read function and then you can print the
137:38 - content of the file by using the print
137:40 - function now guys after these operations
137:42 - are completed what you have to do is you
137:44 - have to close the file which is very
137:46 - important so as you can see when we are
137:48 - done with performing operations on the
137:50 - file we need to properly close the file
137:53 - now closing a file will free up the
137:55 - resources that were tied with the file
137:57 - it is done using the close method in
137:59 - Python so basically after printing the
138:02 - content what we can do is simply we can
138:04 - provide file one followed by Dot and
138:07 - then we can have the close method being
138:09 - called so let me just save this file now
138:11 - and before running this code we will
138:13 - have another print function over here
138:15 - and we will print the statement that is
138:17 - file is closed in order to confirm that
138:20 - the control flow has reached the final
138:23 - statement over here in our code so let
138:25 - me just save this file now and try
138:26 - running this code so as you can see all
138:29 - the four lines are being printed over
138:30 - here from the file once again and then
138:32 - we are also getting file is closed being
138:34 - printed over here and in this way we
138:36 - have already closed the file by using
138:39 - the close function as well so guys this
138:41 - is the way you can read the content of
138:42 - the file just by using these four lines
138:45 - of code we can easily read the entire
138:48 - content of any of the file that we want
138:50 - to read based on our requirements file
138:53 - writing in Python Programming so guys in
138:55 - Python a file operation takes place in
138:58 - the following order so basically first
139:00 - of all we have to open the file then
139:03 - secondly we can write into the file that
139:05 - we have opened and the last step is to
139:07 - close the file so these are the
139:09 - operations in this order in which we
139:11 - have to follow while writing the content
139:13 - into the file now there are two things
139:15 - we need to remember while writing to a
139:17 - file so first of all if we try to open a
139:20 - file that doesn't exist so a new file
139:23 - will be created in this case so guys we
139:25 - are going to check this with the help of
139:26 - example as well and in the second case
139:29 - if a file already exist then its content
139:32 - is erased and new content is added to
139:35 - the file again so Guys these are the two
139:37 - important things that you should know
139:39 - while writing into the file if the file
139:41 - is not already present then a new file
139:43 - will be created and if the file is
139:45 - already present then the existing
139:47 - content will be removed and the new
139:49 - content will be added into the file so
139:51 - guys the first operation is opening the
139:53 - file over here in which case we can use
139:56 - the open method to open the file and
139:59 - this is the example we have the variable
140:01 - on the left hand side and then we have
140:02 - the open method followed by the name of
140:05 - the file over here along with the entire
140:08 - path if it is present in some other
140:10 - directory and Then followed by the
140:11 - second parameter that is W which stands
140:14 - for the right mode so guys let us check
140:16 - this with the help of example now over
140:18 - here so what we will do is we will say
140:20 - file one which is the variable name
140:22 - followed by equal to and then we have
140:24 - the open method in this case so we have
140:27 - to provide the name of the file along
140:29 - with the directory path inside the
140:31 - parenthesis and the double codes over
140:33 - here so what we will do is we are going
140:35 - to use this directory over here in order
140:37 - to create a new file and write the
140:39 - content into the file so guys over here
140:42 - there are only two files that is Python
140:44 - tutorial and test file we are going to
140:46 - create a third file that is output.txt
140:49 - in which we are going to write the
140:51 - content by using the code over here so
140:53 - basically I'm going to paste the entire
140:56 - directory path and in order to avoid any
140:58 - errors I'll just use the double back
141:00 - slashes over here since these are the
141:02 - Escape characters so we provide the
141:04 - double back slashes and then at the end
141:07 - we have to provide the name of the file
141:09 - so I'll simply provide output.txt in
141:12 - this case and then guys the second
141:14 - parameter needs to be the writing mode
141:17 - so over here inside the double codes we
141:19 - can say w which means we are opening the
141:21 - file in the right mode in this case now
141:23 - guys we have completed the first step
141:25 - now what is the next step writing into
141:27 - the file so basically writing in a file
141:29 - in a python so after we open a file we
141:32 - use the write method to write the
141:34 - content in the file and this is the way
141:36 - as you can see in this example we have
141:38 - the variable name that is file one
141:40 - followed by Dot and then we have the
141:42 - write method and then the content that
141:45 - we want to write into the file so guys
141:47 - basically what we will do is on the
141:49 - second line over here we will say file
141:51 - one followed by Dot and then we have the
141:54 - right method this write method can be
141:56 - used in order to write the content into
141:58 - the file and it takes certain parameters
142:01 - the parameters will be the string or the
142:03 - integer numbers that you want to print
142:05 - or store inside the file so guys let's
142:07 - say I want to provide this is first line
142:13 - in
142:14 - output file so this is the content that
142:18 - we want to write into the file and this
142:20 - is the way that we can use the write
142:22 - function in order to write the content
142:24 - into the file and it takes the parameter
142:27 - as the string which we want to store
142:29 - inside the file now after writing what
142:31 - we have to do is we have to close the
142:33 - file so when we are done with performing
142:35 - operations on the file we need to
142:37 - properly close the file closing a file
142:40 - will free up the resources that were
142:41 - tied with the file it is done using the
142:44 - close method in Python so as you can see
142:46 - in this example we have file 1. close so
142:50 - over here we can simply provide file 1.
142:53 - close in this case and then open and
142:56 - close parenthesis it doesn't take any
142:58 - parameters over here so guys let me just
143:00 - save this file now before running this
143:02 - code I'll show you the directory once
143:04 - again we have only two files over here
143:06 - that is Python tutorial and test file we
143:08 - are going to have a third file over here
143:10 - that is the output.txt that will be
143:13 - created after execution of this code so
143:15 - before running this code what I will do
143:17 - is I'll have the print statement so that
143:19 - we get the confirmation that the code is
143:21 - executed so we will say file
143:26 - created
143:29 - successfully so this is the statement
143:31 - that will be printed after all the lines
143:33 - of code are executed so guys let me just
143:35 - save this file now and try running this
143:37 - code so as you can see we are getting
143:39 - file created successfully and if we go
143:41 - inside the directory now as you can see
143:43 - we are getting the third file over here
143:45 - that is the output in this case so so if
143:47 - we open this file as you can see this is
143:49 - first line in output file and this is
143:52 - what we have printed by using our
143:54 - program this is first line in output
143:56 - file the same statement is being printed
143:59 - over here it is being stored in our
144:01 - output file and guys this is the way
144:03 - that we have created a new file by using
144:06 - the python code in a particular
144:08 - directory that we wanted and also return
144:10 - the content into the file by using the
144:13 - two methods that is first of all we have
144:15 - used the open function in order to open
144:18 - the file in the right mode and then we
144:20 - have used the right function in order to
144:23 - write the content into the file now guys
144:25 - let us say we have another scenario in
144:27 - the same file we want to update the
144:29 - first line to this is first line and
144:32 - I'll just remove this in output file
144:34 - content over here so we have the short
144:36 - message that is this is first line and
144:39 - then what I will do is we have another
144:41 - statement so again we will have the file
144:43 - 1. write and then we can say this is
144:47 - second line in this case so guys we are
144:49 - having the two lines over here now and
144:51 - this will act as a kind of update now
144:54 - that's because we already have this
144:55 - output.txt file in this directory and
144:58 - now what we are doing is simply we are
145:00 - opening it once again and these lines
145:03 - will be stored in the file and guys
145:05 - remember that while you are opening the
145:08 - existing file what we already saw is the
145:10 - content is erased and the new content is
145:13 - added to the file so basically these two
145:15 - lines will be printed inside the
145:17 - output.txt file and now what we will do
145:19 - is for this print function we will say
145:21 - file updated successfully so guys let me
145:24 - just save this file now before running
145:26 - this code I'll show you that file once
145:28 - again over here we have the output file
145:31 - I'll just open this file we are having
145:33 - this is first line in a output file so
145:35 - let me just close this now and what we
145:37 - will do is we will run this code so as
145:40 - you can see file updated successfully we
145:42 - are getting this message we'll go to the
145:44 - directory to check what is the content
145:46 - so as you can see both the statements
145:48 - are getting printed over here this is
145:50 - first line and Then followed by this is
145:52 - second line now guys what happened is
145:54 - both the lines have continued on the
145:56 - same line but we can have them on the
145:58 - separate lines as well so what we can do
146:00 - is in our code we can simply provide the
146:03 - slashing character at the end of the
146:05 - first line over here so that the control
146:07 - flow goes to the next line while
146:09 - printing this statement that is this is
146:11 - second line so guys let me just save
146:13 - this file and try running this code now
146:15 - once again so it says file up
146:17 - successfully we come back over here in
146:19 - the directory we open the output file
146:22 - now as you can see this is first line
146:24 - and then we have on the other line This
146:26 - is second line over here so guys in this
146:28 - way we can easily write the content in
146:30 - the file we can also have the multiple
146:33 - lines of content being stored in the
146:35 - file that we opened by using the Python
146:37 - programming language guys this concept
146:39 - of reading and writing the files are
146:41 - very important as far as your project
146:43 - requirements are concerned so please
146:45 - make sure that you practice on your own
146:46 - so that that on different inputs you get
146:48 - different output apart from this can we
146:50 - use the with open syntax in order to
146:53 - write a file so you can try this as a
146:55 - homework for you you can watch my
146:57 - previous video as well in which I have
146:59 - explained you how we can use the with
147:01 - open syntax in order to read the file
147:04 - and in which case we don't have to close
147:06 - the file that's because it is
147:07 - automatically handled by this with open
147:09 - syntax for us so please treat this as a
147:11 - homework for you and comment in the
147:13 - comment section below whether you were
147:15 - able to use the with open syntax in
147:18 - order to write into the file
147:19 - objectoriented programming in Python so
147:22 - guys we are going to check the classes
147:24 - and objects with the help of examples
147:26 - python is a versatile programming
147:28 - language that supports various
147:30 - programming Styles including
147:31 - objectoriented programming through the
147:34 - use of objects and classes which we are
147:36 - going to see with the help of examples
147:38 - as well now an object is any entity that
147:41 - has attributes and behaviors so for
147:44 - example a parrot is an object and it has
147:47 - multiple attributes as you can see there
147:49 - are multiple attributes that can be
147:51 - present which is name then we have age
147:54 - color and so on apart from that it also
147:56 - has certain Behavior such as whether it
147:59 - can dance or not so dancing is one of
148:01 - the behavior whether it can sing or not
148:03 - so singing is another Behavior now I'm
148:05 - not sure whether a parrot can really
148:07 - dance or not but these are certain
148:08 - behaviors that we can consider in order
148:10 - to understand classes and objects now
148:13 - guys similarly a class is a blueprint
148:15 - for that object so basically these
148:17 - objects are having the attributes and
148:19 - behaviors and the values will be stored
148:21 - in these objects but the blueprint will
148:24 - be present inside the class so basically
148:26 - this class can be treated as a template
148:28 - which has certain attributes and
148:30 - behaviors being defined over here and we
148:33 - can create multiple objects related to
148:35 - that class so we are going to check with
148:36 - the help of example how do we create a
148:39 - class parrot with the attributes as name
148:41 - and age so let us move to the vs code
148:43 - over here the very first thing that we
148:45 - have to create is the class class so
148:47 - basically we have to provide the class
148:49 - keyword followed by the name of the
148:51 - class so let's say the parot is the name
148:54 - of the class over here and then we have
148:56 - a colon and then we can have different
148:58 - attributes so one of the attributes is
149:00 - name over here we will assign it with a
149:02 - empty string and then we have age as
149:04 - well we will assign it as zero over here
149:07 - as the initial value now Guys these are
149:09 - the two attributes that we have defined
149:10 - for this class that is parro now we can
149:13 - create different objects out of this
149:15 - class now this class is acting as a
149:17 - blueprint or we can say as a template in
149:20 - order to create multiple objects so we
149:22 - will come out of this class and what we
149:24 - will do is we will create the objects
149:27 - for this class so let's say we have
149:29 - parot one followed by equal to operator
149:32 - and then we can simply provide the name
149:33 - of the class that is parot followed by
149:36 - the open and close parenthesis so this
149:38 - is the way that we can initialize an
149:40 - object for this class that is parent and
149:42 - then we can use this object in order to
149:45 - initialize the these attributes that is
149:47 - name and age so over here what we will
149:50 - do is we will use this parot one object
149:52 - followed by Dot and as you can see we
149:55 - are getting this name and age being Auto
149:57 - suggested by the VSS code that's because
149:59 - we have already defined these attributes
150:02 - inside this blueprint that is class
150:04 - parrot so over here we are going to
150:06 - provide the name as the name of the
150:08 - parrot one object so let's say we
150:10 - provide the name as blue over here and
150:12 - then let's say we also want to provide
150:14 - the age of this parot object so so again
150:16 - we will provide parot one followed by
150:19 - Dot and then we have the age attribute
150:21 - let's say it is 2 years old so we have
150:23 - two as the parrot's age now guys let's
150:25 - say we want to create another object
150:27 - with another name and age so again we
150:30 - will copy these lines of code and paste
150:32 - this over here what I will do is instead
150:34 - of parot 1 we will say parot 2 because
150:38 - this is another object so this is the
150:40 - second object that we are creating by
150:42 - using this parot class and over here
150:44 - again we will say parot 2 do name and
150:47 - Par 2. AG so let's say the name of the
150:50 - parot 2 is Vu and its age is five over
150:53 - here so 5 years so guys over here we
150:55 - have created two objects for this class
150:57 - that is parro similarly we can create
151:00 - any number of objects that we want it's
151:02 - very important to note that while
151:04 - creating the objects we provide this
151:06 - variable name on the left hand side and
151:08 - on the right hand side we provide the
151:09 - name of the class followed by the open
151:11 - and close parenthesis and then we can
151:14 - call the different attributes of that
151:15 - class in order to initialize them now
151:18 - guys after these objects are being
151:19 - initialized with their names and age we
151:21 - can simply print them on the console so
151:24 - what we can do is we can have the print
151:26 - statement with the formatting being
151:28 - enabled so over here inside the print
151:30 - statement we can have the F followed by
151:32 - the double codes and then what we can do
151:34 - is open and close curly braces inside
151:36 - this we can have the parent one do name
151:39 - over here is and Then followed by curly
151:42 - braces parot 1. Ag and then we can have
151:47 - ear old so guys basically what is
151:49 - happening over here is inside the open
151:51 - and close curly braces we can provide
151:53 - the varable names in order to get their
151:56 - values being printed inside the print
151:58 - statement so this parot 1. name will
152:01 - give us the value of this variable that
152:03 - is blue over here and then followed by
152:05 - is and then again we will get parot 1.
152:09 - age which is two in this case so blue is
152:12 - 2 years old so this is a statement that
152:14 - should get printed and then similarly we
152:17 - can copy this line of code and paste
152:18 - this over here and instead of parot 1 we
152:21 - can simply say parot 2 so we have parot
152:24 - 2. name and then par 2.age so guys let
152:27 - me just save this file now and try
152:28 - running this code as you can see blue is
152:31 - 2 years old this is what is getting
152:33 - printed by using the first print
152:35 - statement and over here again we are
152:37 - getting Vu is 5 years old so this is the
152:40 - second print statement that is helping
152:42 - us in order to print this particular
152:44 - statement so guys this is the way that
152:45 - we can easy easily create a class in
152:47 - this case we have created the parot
152:49 - class and we have two attributes that is
152:51 - name and age you can have any number of
152:53 - attributes for the class based on your
152:55 - requirements and apart from that while
152:57 - creating the objects you can have the
152:59 - values for those attributes based on
153:01 - those particular individual objects and
153:04 - then you can call those attributes by
153:05 - using the objects that you have just
153:07 - initialized by using this statement that
153:10 - is the object on the left hand side
153:11 - followed by equal to operator and then
153:14 - we have the class name followed by the
153:15 - open close parenthesis this is called
153:18 - instantiating of the object or we can
153:20 - also call it as initializing an object
153:22 - in Python Programming inheritance in
153:24 - Python Programming so guys inheritance
153:27 - is a way of creating a new class for
153:29 - using details of an existing class so
153:32 - this we are going to check with the help
153:33 - of examples as well the newly formed
153:36 - class is a derived class which is also
153:38 - called as a child class and similarly
153:40 - the existing class is a base class or
153:43 - the parent class so guys what we are
153:45 - doing over here is we are already
153:47 - creating a parent class that is also
153:49 - called as a base class over here and
153:51 - then we also create a child class for
153:54 - which the attributes are derived from
153:56 - the parent classroom here and this is
153:58 - what is called as The Inheritance now
154:00 - what will be inherited all the
154:02 - attributes provided that they are public
154:04 - along with the methods will be inherited
154:06 - by the child class so guys let us check
154:09 - python inheritance with the help of
154:10 - example now over here so let us switch
154:12 - to the vs code first of all we will
154:14 - create the parent class so let let us
154:16 - say we have the class that is called as
154:18 - animal over here and inside this animal
154:20 - class we will Define two functions that
154:22 - is eat and sleep so we will have DF
154:25 - keyword followed by eat that is function
154:28 - one and then inside the parenthesis we
154:31 - are going to have the parameter that is
154:32 - self always remember guys whenever we
154:34 - are calling the function inside the
154:36 - class it is going to take a single
154:38 - parameter which is going to be the
154:40 - object by default so we need to catch
154:42 - that object with any name as a parameter
154:45 - over here so we we have given the name
154:46 - of this parameter as s over here so that
154:49 - we can identify that this is the object
154:51 - and then we can use this object as well
154:53 - in order to access its attributes and
154:56 - inside this eat function we are going to
154:58 - have a simple print statement and we
155:00 - will say I can eat so guys this is a
155:03 - statement that is going to be printed
155:04 - when we call the eat function using the
155:07 - animal object and then similarly we will
155:09 - have the Sleep Method as well so we have
155:11 - DF keyword followed by Sleep Method and
155:15 - then again we will have the parameter is
155:16 - the self which will be passed by default
155:19 - and then inside this again we are going
155:20 - to have the print statement and we can
155:23 - say I can sleep so Guys these are two
155:26 - methods or functions that we have
155:27 - defined inside the parent class that is
155:30 - the animal class now guys how do we
155:32 - inherit these methods to another class
155:34 - so let's say we have another class over
155:36 - here which will be a child class of the
155:38 - animal class so we are going to have
155:40 - another class and let's say the name of
155:42 - the class is dog over here and then in
155:45 - order to have its attributes and
155:47 - functions of the super class that is the
155:49 - animal after this name of the class that
155:52 - is dog we have to provide open and close
155:55 - parenthesis and inside this parenthesis
155:57 - we have to provide the name of the super
155:59 - class that is animal in this case so
156:01 - this particular class that is animal we
156:03 - want to inherit its attributes and
156:06 - functions inside the child class that is
156:08 - dog so this is the way that we inherit
156:11 - the super class and now we can have a
156:13 - colon over here and then we can have the
156:15 - attri and the functions of this class
156:17 - that is dog class separately so over
156:19 - here we are going to have the DF keyword
156:22 - followed by let's say I am simply going
156:24 - to have the display method over here and
156:27 - it is going to take one parameter that
156:28 - is self and then we are simply going to
156:31 - print that we are inside doc class so
156:36 - this particular statement will be
156:37 - printed whenever we are going to call
156:39 - this display method over here so guys
156:41 - this is the way that python inheritance
156:43 - Works what I will do is I'll just zoom
156:45 - out little bit so that you can see the
156:47 - entire code at once so over here we have
156:49 - created the super class that is the
156:51 - animal class and then we are creating
156:53 - another class that is called as the
156:55 - child class and after the name of the
156:57 - child class we are providing the name of
156:59 - the super class over here that is the
157:01 - parent class inside the open and close
157:03 - parenthesis and what this will do is the
157:06 - eat and sleep methods will be now
157:08 - available inside the dog class as well
157:11 - so guys why this is important so let us
157:13 - come out of this class now and what we
157:15 - will do is let us create the object of
157:18 - this class that is the dog class so what
157:20 - I will do over here is we will create
157:22 - dog one that is the object of the dog
157:24 - class followed by equal to and then the
157:27 - name of the class that is dog over here
157:29 - so we have created one object of the dog
157:32 - class now guys ideally we have seen that
157:34 - we can call the display method which
157:36 - belongs to the dog class so we can do
157:38 - that over here so I'm going to call the
157:41 - dog one object followed by Dot and then
157:44 - we have the display method so after this
157:46 - we are going to have the open and close
157:48 - parenthesis let me just save this file
157:50 - first and try running this code now so
157:52 - as you can see we are getting we are
157:54 - inside dog class which means this
157:56 - statement is getting printed now guys do
157:58 - we have any other method apart from this
158:01 - display method yes we do have and those
158:03 - are eat and sleep methods why so because
158:06 - we have inherited the methods from the
158:08 - animal class by using the python
158:10 - inheritance so basically we can use this
158:12 - object name that is dog one in order to
158:15 - call eat and sleep methods over here so
158:18 - if we call both the methods so I'll say
158:20 - dog one followed by Dot and then as you
158:23 - can see vs code is suggesting us this
158:25 - eat method as well so we have eat
158:27 - followed by open and close parenthesis
158:29 - and then again we will call the dog one
158:32 - object followed by Dot and then Sleep
158:34 - Method is also being suggested by the vs
158:36 - code so we are going to call both the
158:38 - methods over here so let me just save
158:40 - this file now and try running this code
158:42 - so as you can see we are getting all the
158:44 - three statements that is we are inside
158:46 - dog class I can eat and I can sleep
158:49 - which are the statements that are being
158:51 - printed by using these methods
158:53 - respectively so guys this is the power
158:55 - of python inheritance we can use the
158:57 - different attributes and the methods
158:59 - that were defined in a super class
159:01 - inside the subass by using the object of
159:04 - the child class over here which is also
159:06 - called as the subass over here guys it
159:08 - is very important to note that whenever
159:10 - we are defining the methods inside the
159:12 - class we need to provide one parameter
159:15 - over here which is going to be the
159:17 - object that will be passed so behind the
159:19 - scenes what is happening over here is
159:21 - when we call dog 1. display over here
159:24 - the dog one object is being passed with
159:26 - this display method even though we are
159:28 - not providing any parameter over here
159:31 - but behind the scenes the object is
159:33 - being passed over here and it needs to
159:35 - be caught by this particular method what
159:37 - happens if we don't provide this
159:38 - parameter let us check this so I'll just
159:40 - remove the self keyword over here and
159:42 - I'll just save this file now over here
159:44 - we are not receiving any parameter as we
159:47 - can see so let me just run this code now
159:49 - so as you can see type error dog.
159:51 - display takes zero positional arguments
159:54 - but one was given so basically behind
159:56 - the scenes this dog one object is being
159:59 - passed and we need to have a parameter
160:01 - over here while defining the function
160:03 - and that is the reason why we had given
160:05 - this self parameter name in order to
160:08 - identify that this is the object of this
160:10 - particular class that is dog so let me
160:12 - just save this file now and try running
160:13 - this code once again so as you can see
160:15 - there are no more errors that are
160:17 - getting displayed and all the three
160:18 - statements are getting displayed over
160:20 - here now guys what are the uses of
160:22 - inheritance so as you can see since a
160:24 - child class can inherit all the
160:25 - functionalities of the parents class
160:27 - this allows code reusability so as you
160:30 - can see over here we need not have to
160:32 - provide the eat and sleep methods once
160:35 - again inside the dog class and we were
160:37 - able to access both these methods by
160:39 - using the object of the dog class
160:41 - without actually providing the
160:43 - definition of those methods over here
160:45 - once a functionality is developed you
160:46 - can simply inherit it no need to
160:48 - reinvent the wheel this allows for
160:51 - cleaner code and easier to maintain now
160:53 - since you can also add your own
160:55 - functionalities in the child class you
160:57 - can inherit only the useful
160:58 - functionalities and Define other
161:00 - required features so guys based on your
161:02 - requirement it depends on you which
161:05 - class you want to inherit and create the
161:07 - child classes and the parent classes
161:09 - over here based on your project
161:10 - requirements Constructor in Python
161:12 - Programming now guys a python
161:14 - Constructor is a function inside a class
161:17 - that helps us to initialize certain
161:19 - attributes of a class so far we have
161:21 - seen creating the class attributes and
161:23 - the functions and while initializing the
161:25 - attributes of the classes object we use
161:28 - the object name followed by the dot and
161:30 - then the attribute name but is there a
161:33 - better way in order to initialize those
161:35 - attributes inside the class yes it is so
161:37 - we have something called as double times
161:40 - underscore followed by in it and then
161:42 - again double * underscore followed by
161:44 - open and close par parenthesis which is
161:46 - a Constructor function that is called
161:48 - whenever a new object of that class is
161:51 - instantiated so guys let us check this
161:53 - with the help of example now so let us
161:55 - move to the vs code what we will do is
161:57 - we will create a class that is called as
162:00 - the parot class over here and we will
162:02 - Define two attributes so over here we
162:04 - have the name which is of the string
162:05 - data type so let's say we have the empty
162:08 - string initially and then let's say we
162:10 - have the age attribute which is defined
162:12 - as zero over here which is the integer
162:15 - so what we will do is let us say we want
162:17 - to create the object of this class so
162:20 - what we have to do is let's say we
162:21 - provide the object name as parot one
162:24 - followed by equal to operator and then
162:26 - we have the name of the class that is
162:28 - parent followed by open and close
162:30 - parenthesis now guys so far what we had
162:32 - done is in order to initialize both
162:34 - these attributes we were calling this
162:36 - object name followed by Dot and then the
162:39 - name of the attribute so let us do that
162:41 - first so we are going to use the parot
162:43 - one object over here followed by Dot and
162:46 - then let's say the name of the parrot it
162:49 - is blue over here so we provide the name
162:51 - of the parrot and then we also provide
162:53 - the age of the parrot so let's say
162:56 - parrot 1. AG it is equal to 2 years old
162:59 - and then we can simply print the name
163:01 - and age of this parrot so let us say we
163:03 - provide the print method over here and
163:05 - we provide the parrot one object so
163:08 - parot one followed by Dot and then we
163:10 - have name is and then again we want to
163:13 - get the a so parot 1 Dot age and then we
163:17 - have years old so over here blue is 2
163:20 - years old will be displayed so let us
163:22 - save this file now and try running this
163:24 - code so as you can see blue is 2 years
163:27 - old so guys this is the conventional way
163:29 - that we had seen so far in order to
163:32 - instantiate an object of the class and
163:34 - also assign the values to the attributes
163:36 - of that class so is there a better way
163:38 - in order to assign these values to these
163:41 - attributes yes we can do so by using the
163:43 - Constructor so what we can do is we can
163:45 - simply remove these two lines of code
163:47 - over here so I'll just remove them and
163:49 - then guys inside this class we are going
163:51 - to have the innit method which is the
163:53 - Constructor so over here we are going to
163:56 - have the DF keyword followed by double *
163:59 - underscore and then we have the init so
164:01 - as you can see vs code is suggesting us
164:03 - this method which we are going to use so
164:06 - init and it is going to take one
164:07 - parameter by default as I have already
164:09 - told you previously whenever we are
164:11 - going to call any method inside the
164:14 - class the object that is used in order
164:16 - to call that method is also passed by
164:19 - default behind the scenes so the self
164:21 - parameter represents the object of this
164:23 - parro class over here I'll just remove
164:25 - this part and what we are going to do is
164:27 - we are going to take both these
164:29 - attributes that is name and age as the
164:31 - parameters so over here after the self
164:34 - we are going to have comma and then we
164:36 - are going to have name one so guys I'm
164:38 - naming this as name one so that you
164:40 - don't get confused between this name and
164:42 - this name one so this name one will be
164:44 - passed as the parameter when this
164:46 - Constructor is being called over here
164:48 - and then followed by comma we also have
164:50 - age one and then what we can do is for
164:53 - this self that is the object followed by
164:55 - dot we can have name it is equal to name
164:59 - one over here and then again we can have
165:02 - the self followed by Dot and then AG it
165:05 - is equal to H 1 so what we are simply
165:07 - doing over here is the name and age
165:10 - attributes of this object the object is
165:12 - being represented by self and then self
165:15 - name it will be assigned with the value
165:17 - of this name one that is being passed
165:20 - same thing for the age as well the self.
165:22 - age the value will be passed by using
165:25 - this age one parameter over here and
165:27 - both these values will be assigned to
165:29 - name and age attributes now guys when
165:31 - exactly this Constructor is being called
165:33 - so basically whenever you are going to
165:35 - create an object and call this class
165:38 - over here that is the parot class the
165:40 - Constructor will be called so while
165:42 - instantiating this object we also need
165:44 - to pass the name and age for this
165:46 - particular instance of the class so what
165:48 - we will do is let's say we take the same
165:51 - name that is blue over here so we
165:53 - provide the first parameter is the name
165:55 - of the parot followed by comma and then
165:57 - we provide the age that is 2 years old
166:00 - which is the second parameter so guys
166:02 - when the control flow comes over here it
166:04 - sees that the class is being called with
166:06 - these two parameters and we also have
166:08 - the Constructor so basically this parro
166:10 - one will be assigned to this parameter
166:13 - that is self and then this name and age
166:15 - will be assigned to this name one and
166:17 - age one and this name and age will be
166:19 - assigned those values respectively and
166:21 - then we can simply have this print
166:23 - statement in order to print the same
166:25 - statement that we had seen previously as
166:27 - well so let me just save this file now
166:29 - and try running this code so as you can
166:31 - see we are getting the same statement
166:33 - that is blue is 2 years old that's
166:35 - because we have provided the same name
166:37 - and the same age let's say we provide a
166:39 - different name over here so let's say we
166:41 - provide wo and it is 5 years old so let
166:43 - me just save this file now and try
166:45 - running this code as you can see who is
166:47 - 5 years old is getting displayed over
166:49 - here so guys in this way what we have
166:51 - done is while instantiating the object
166:54 - we are passing the values or the
166:56 - attributes that are present inside that
166:58 - class for which the values are getting
167:00 - assigned now guys another important
167:02 - functionality of this Constructor is we
167:04 - can also remove these attributes that
167:06 - are being declared so there is no need
167:08 - of declaring these attributes over here
167:11 - so I'll just remove these lines of code
167:13 - over here and what exactly is happening
167:15 - is while this Constructor is being
167:16 - called the interpretor comes to know
167:19 - that this name and age are the
167:21 - attributes of this class that is the
167:22 - pared class over here and it assigns the
167:25 - values that are being passed to name one
167:27 - and age one so to make it more simple
167:29 - let us say we name this parrot as first
167:32 - parrot over here for which the age is 2
167:34 - years old and let's say I provide
167:36 - another parrot so I'll just copy this
167:38 - line of code and paste this over here
167:40 - and then I provide this as parot to and
167:43 - then we can say second parot over over
167:45 - here which is 5 years old so we'll say 5
167:47 - years old and then we will print both
167:49 - the parrots over here inside the print
167:51 - statement I'll just copy these lines of
167:53 - code and paste this over here and then
167:55 - we can say parot 2. name and then again
167:57 - over here parot 2. AG so let me just
168:00 - save this file now and try running this
168:02 - code so as you can see first parot is 2
168:04 - years old and second parot is 5 years
168:07 - old both the statements are getting
168:08 - displayed over here so guys this is the
168:10 - way that you can Define the Constructor
168:12 - inside the class by using the _
168:15 - underscore init method and Then followed
168:17 - by the self that is being passed
168:19 - automatically as one of the parameters
168:22 - and then you can have any number of
168:23 - parameters being passed over here inside
168:25 - the Constructor which can be used as the
168:27 - values for the attributes of the class
168:30 - that you have defined and those values
168:32 - need to be passed whenever you are
168:33 - creating a new object for that class
168:36 - encapsulation in Python Programming so
168:38 - guys encapsulation is one of the key
168:41 - features in objectoriented programming
168:43 - because encaps ulation refers to the
168:46 - bundling of attributes and methods
168:48 - inside a single class so we have seen so
168:50 - far the various attributes and methods
168:53 - that we have been creating inside the
168:55 - class that functionality of the Python
168:57 - Programming is called encapsulation now
168:59 - it prevents outer classes from accessing
169:02 - and changing attributes and methods of a
169:04 - class so far we have seen that all the
169:07 - attributes and methods were public in
169:08 - nature but in this case we are going to
169:11 - create some private attributes which
169:13 - cannot be directly accessed outside the
169:16 - class so this also helps us to achieve
169:18 - data hiding over here now in Python we
169:21 - denote private attributes using the
169:23 - underscore as the prefix either we can
169:25 - have the single underscore or the double
169:27 - underscore so let us check this with the
169:29 - help of example now over here as you can
169:31 - see in this example we have the class
169:33 - computer and then we also have the
169:35 - Constructor that is in it followed by
169:37 - the self which is the parameter for that
169:39 - object that is being passed and then
169:42 - self. Max price so as you can see over
169:44 - here we have the prefix that is double
169:46 - uncore followed by Max price so this is
169:49 - one of the attributes of this computer
169:52 - class over here and we are providing the
169:54 - value of 900 to this Max price over here
169:56 - inside the Constructor now apart from
169:58 - this Constructor we have more couple of
170:00 - functions inside this class as you can
170:02 - see we have the cell function over here
170:04 - which simply prints the selling prices
170:07 - the self followed by Dot and then the
170:09 - max price so basically this statement
170:11 - will help us in order to print this
170:13 - value that is the max price value of the
170:15 - computer and then we have another method
170:17 - that is set max price which takes the
170:20 - object that is using the self and then
170:22 - it also takes the price over here so in
170:25 - case you want to set another Max price
170:27 - for this computer you can use this set
170:29 - max price function what it will do is it
170:32 - will simply update the value of the max
170:34 - price of the computer as you can see
170:36 - with this particular statement so guys
170:38 - let us check this with the help of
170:39 - example now what I will do is I'll
170:41 - simply copy these lines of code since
170:43 - I'm little bit lazy in order order to
170:45 - type them again so we are going to paste
170:46 - it inside the vs code so over here what
170:49 - we are going to do is we are going to
170:51 - print the max price of the computer so
170:54 - first of all we are going to create the
170:56 - object that is comp one over here
170:58 - followed by equal to and then we have
171:00 - the computer class name so basically
171:03 - since a Constructor is not taking any
171:04 - other parameter apart from this self
171:06 - which is the object itself so we need
171:08 - not have to provide any parameter over
171:10 - here while instantiating this object
171:12 - that is comp one now what we will do is
171:15 - simply we will call the cell function
171:17 - over here that is this particular
171:18 - function so we can use the comp one
171:21 - object followed by Dot and then we have
171:23 - the cell function so after this open and
171:26 - close parenthesis so let me just save
171:28 - this file now and try running this code
171:30 - so basically this print statement should
171:32 - get executed and it should be displayed
171:34 - on the terminal so I'll just run this
171:36 - code now as you can see selling price is
171:38 - 900 so what exactly happened is when the
171:41 - control Flow came over here that is comp
171:43 - one it is equal to computer The
171:45 - Constructor of this class that is the
171:47 - init method was called and inside this
171:50 - what we have done is this private
171:52 - attribute so guys basically this double
171:54 - uncore denotes that this is the private
171:56 - attribute of the computer class so
171:58 - basically this private attribute was
172:00 - initialized inside the Constructor and a
172:03 - value of 900 was being assigned to this
172:06 - particular attribute and then what we
172:08 - did is when the control Flow came over
172:10 - here that is while calling the cell
172:12 - function basically this print statement
172:14 - was was executed so selling price it is
172:17 - equal to this self. Max price got
172:19 - printed over here which is 900 right now
172:22 - now guys let us do another thing what we
172:24 - will do is we will try to access this
172:26 - private attribute from outside of this
172:29 - class so over here we will call comp one
172:32 - once again followed by Dot and then we
172:34 - can call this private attribute that is
172:36 - the max price so as you can see this Max
172:38 - price is getting suggested by the vs
172:40 - code so we will call this Max price and
172:43 - what we will do is we will try try to
172:44 - assign another value that is 1,000 over
172:47 - here to this Max price and then again
172:49 - let us say we want to call this print
172:52 - statement so again we will call this
172:53 - sell method over here so I'll just copy
172:55 - this line of code and paste this over
172:57 - here let me just save this file now and
172:59 - try running this code so as you can see
173:01 - selling price 900 this is the statement
173:04 - that was printed by calling the first
173:06 - sell method and then the second time the
173:08 - sell method was called again the selling
173:10 - price was equal to 900 so guys why so
173:13 - that's because this Max price is the
173:15 - private attribute and we directly cannot
173:18 - access this attribute by using this
173:20 - object we need to have another method
173:23 - inside the computer class in order to
173:26 - assign another value to the private
173:28 - attribute and that is why we have this
173:30 - method that is the set max price along
173:33 - with the parameter price which it is
173:35 - going to take in order to replace the
173:37 - existing Max price over here so what we
173:40 - can do is we are going to call the comp
173:42 - one object once again followed by Dot
173:45 - and this time instead of directly
173:47 - accessing this Max price we are going to
173:50 - call this set max price over here so set
173:52 - max price and it is expecting two
173:54 - parameters the first parameter is the
173:56 - self which is going to be passed by
173:58 - default which is going to be the comp
174:00 - one object and then the second parameter
174:02 - is the price which we are going to pass
174:04 - to this method so again what we will do
174:07 - is simply we are going to provide this
174:09 - th000 price that we try to assign to the
174:11 - max price directly over here so set next
174:14 - price and then again let's say we want
174:16 - to print the selling price over here so
174:18 - again we are going to call the sell
174:20 - method once again so comp 1. sell so
174:23 - over here the only difference is we are
174:24 - calling the method that is the set max
174:27 - price and we are passing the value of
174:29 - the new Max price over here which is
174:31 - going to be passed to this price and
174:33 - then the max price value will be the
174:35 - updated price that we have just said so
174:37 - guys let me just save this file now and
174:39 - try running this code so as you can see
174:41 - selling price 900 and then selling price
174:43 - 900 once again and the third time that
174:46 - we tried by using the set max price over
174:48 - here it was 1,000 so this time it is
174:50 - selling price it is equal to 1,000 so
174:53 - guys by using this method in order to
174:56 - set the value of a private attribute we
174:58 - were successfully able to update the
175:01 - value of this private attribute and this
175:03 - is the main functionality which we call
175:05 - it as encapsulation as far as
175:07 - objectoriented programming in Python is
175:09 - concerned so guys let us run this code
175:11 - once again by a different value let's
175:13 - say the max price over here we set it to
175:15 - 2,000 so let me just save this file now
175:17 - and try running this code so this time
175:19 - the selling price is coming over here
175:21 - once again as 2,000 and guys this is the
175:23 - way in order to hide certain attributes
175:26 - of a class you can have them as the
175:28 - private attribute by prefixing and use
175:31 - the different methods in order to set
175:33 - their values by using the objects of
175:36 - that class multiple inheritance in
175:38 - Python Programming so guys previously we
175:40 - have seen the single inheritance but in
175:42 - this video we are going to check the
175:44 - multiple inheritance in Python so a
175:46 - class can be derived from more than one
175:49 - super class in Python basically this is
175:51 - called multiple inheritance so basically
175:54 - the derived class will be having the
175:55 - multiple super classes in this case so
175:58 - for example a class bad is derived from
176:01 - Super classes that is mammal and a
176:03 - winged animal so basically this mammal
176:06 - and winged animal will be treated as the
176:08 - parent classes and this bad class will
176:10 - be the subass or the child class which
176:13 - can be derived from both of these super
176:15 - classes over here so it makes sense
176:17 - because B is a mamal as well as it is a
176:19 - winged animal so let us check this with
176:21 - the help of the example code now in the
176:23 - vs code so over here first of all we
176:26 - will create a class that is called as
176:28 - maml over here and inside the ml what we
176:30 - will do is we will Define the function
176:32 - and we will simply say maml uncore info
176:36 - so this particular function it is going
176:38 - to take one parameter at itself which is
176:41 - the object itself and basically we are
176:43 - going to Simply print the statement that
176:45 - we are inside mammal function so as you
176:51 - can see we are simply printing we are
176:53 - inside mammal function in order to
176:55 - identify that the control flow has come
176:57 - over here inside the mammal info
176:59 - function and then again we will have
177:01 - another parent class over here that is
177:03 - winged animal so we say winged animal
177:06 - over here and this time what we will do
177:09 - is again we will have the function but
177:12 - over here we will say wing underscore
177:15 - info so this particular method belongs
177:17 - to the winged animal over here and then
177:19 - again it is going to take the parameter
177:21 - is the self and then again I'm simply
177:23 - going to copy this print statement over
177:26 - here and paste this inside the winged
177:28 - info and we will say we are inside
177:31 - winged animal function so we say we are
177:34 - inside winged animal function now guys
177:36 - we have created two classes over here
177:38 - which will be treated as the parent
177:40 - classes now we will be defining a third
177:42 - class that will be the child class class
177:44 - of both these classes so basically we
177:46 - will have the class that is called as B
177:48 - over here and how do we mention the
177:50 - multiple super classes whenever we are
177:53 - defining the sub classes over here so
177:55 - basically inside the parenthesis we will
177:57 - have both these classes separated by a
177:59 - comma so first of all we will have the
178:01 - mamal class over here followed by comma
178:04 - and then again we will have the winged
178:06 - animal class over here in the same way
178:08 - you can have any number of classes
178:10 - separated by commas over here in order
178:12 - to achieve multiple inheritance
178:14 - and then after this we will have the
178:16 - colon and then again we will have
178:18 - another method which will belong to this
178:20 - B Class over here so over here we will
178:23 - have the betore info method and then
178:26 - which will take the self as the
178:28 - parameter and then we have the colon
178:30 - over here again we will have the print
178:32 - statement we will say we are inside bad
178:34 - function so it says we are inside bad
178:36 - function now guys inside this bad class
178:39 - we have this bad info function and apart
178:42 - from this we also have this mamal INF
178:43 - info and winged info functions since
178:46 - both these functions are derived from
178:48 - these classes that is mammal and winged
178:50 - animal over here so we can access all
178:52 - these functions from the object that we
178:54 - create for the bad class so let us come
178:57 - out of these classes and what we will do
178:59 - is let's say I provide the object that
179:01 - is bad one it is equal to bad over here
179:04 - so we have created the object of this
179:06 - bad class in this case and then when we
179:09 - provide the bad one object followed by
179:11 - dot as you can see we are getting all
179:13 - the three functions as the suggestions
179:15 - by the vs code over here that's because
179:17 - all the three functions are accessible
179:19 - by this bad one object over here so
179:21 - first of all we will say B info and Then
179:23 - followed by open and close parenthesis
179:26 - and then again we will say b 1 dot let's
179:28 - call mamal info in this case so we have
179:31 - Mel info as well as the third function
179:33 - that is B one followed by Dot and then
179:36 - we have the winged info over here and
179:38 - then open and close parenthesis so all
179:41 - these three statements will be printed
179:42 - one at a time based based on the
179:44 - functions that is being called by the
179:45 - control flow so let me just save this
179:47 - file now and try running this code in
179:49 - order to confirm the same so as you can
179:51 - see first of all we have called the bad
179:53 - info so we are inside bad function is
179:55 - being displayed and then again we are
179:57 - inside mammal function is being
179:59 - displayed that's because mamal info is
180:01 - being called the second time and third
180:03 - function is being called that is winged
180:04 - info and we are getting we are inside
180:06 - winged animal function so guys in this
180:09 - way we have also achieved multiple
180:10 - inheritance over here in case the
180:12 - functions that you want to use a present
180:14 - in the multiple classes as you can see
180:16 - over here you can have multiple classes
180:19 - being inherited by the derived class
180:22 - which we also call it as a subass over
180:24 - here and this B Class is acting as a
180:26 - subass and both these classes that are
180:28 - mamal and winged animal are acting as
180:30 - the parent classes now guys let us move
180:33 - to another task over here what do you
180:34 - mean by Method resolution order in
180:37 - Python that is mro so if two super
180:40 - classes have the same method name and
180:42 - the derived class calls that method then
180:45 - python uses the mro to search for the
180:47 - right method to call so guys over here
180:49 - we have seen how multiple inheritance
180:52 - can be achieved but what if the method
180:55 - names in both the super classes that is
180:57 - in the memal class and the winged animal
180:59 - class are same so what we will do is
181:01 - instead of this memal info we will keep
181:03 - it as display over here and instead of
181:06 - winged info again we will call it as
181:08 - display so basically this time what is
181:10 - happening over here is both these
181:12 - classes that is anal class and winged
181:14 - animal classes are having the same
181:16 - method name that is display and what we
181:19 - are doing we are creating the subass
181:21 - that is B and inheriting both these
181:23 - classes that is mammal and winged animal
181:25 - over here and this time both these
181:28 - display methods are getting inherited by
181:30 - this bad function now which method will
181:32 - be called when we use the object of this
181:35 - bad method let us check that so
181:37 - basically I'll have to remove these
181:38 - lines of code since these functions are
181:40 - no longer present but instead of that
181:42 - what we will do is we will say B one
181:44 - followed by Dot and then we have another
181:47 - function that is display so we have only
181:49 - one function that's because the name of
181:51 - these functions are same in both the
181:53 - parent classes and Then followed by open
181:56 - and close parenthesis so guys over here
181:58 - inside the bad function we have the bat
182:00 - info which will be called by using the
182:02 - bat one object and then the next time
182:04 - what we are doing is we are using the
182:06 - bat one object in order to call the
182:08 - display method now which display method
182:10 - will be executed out of these two let us
182:13 - check that with the help of execution so
182:15 - I'll just save this file now and try
182:16 - running this code now so as you can see
182:19 - we are getting V are inside B function
182:21 - which is this statement that is getting
182:23 - printed that is obvious that's because
182:25 - we have called the bad info function
182:27 - over here and next time when we call the
182:29 - display method it is saying we are
182:32 - inside maml function so guys basically
182:34 - this print statement was executed which
182:36 - proves that the display method of the
182:38 - maml class is being called over here why
182:41 - so that's because when we are creating
182:43 - the child class the first parent class
182:45 - is being given the highest priority over
182:48 - here so first the control flow will
182:49 - check whether this display method is it
182:52 - present in the first parent class if not
182:54 - then it will go to the second parent
182:56 - class over here inside the mamal class
182:59 - it is finding that the display function
183:00 - is present and that is what is getting
183:02 - printed over here so it is the leftmost
183:05 - class that will be used in order to call
183:08 - the method which is present in multiple
183:10 - parent classes over here so what if we
183:13 - provide winged animal as the first class
183:15 - so what we will do is I'll just remove
183:16 - this mammal class from here on the left
183:18 - hand side we will provide winged animal
183:20 - and Then followed by comma and then on
183:22 - the right hand side we provide ml so
183:24 - over here again we have just changed the
183:27 - order in which the inheritance is being
183:29 - done over here both these classes are
183:31 - still the parent classes of this child
183:33 - class that is bed class now let us check
183:35 - which statement will be printed when we
183:37 - call the display method over here so let
183:39 - me just save this file now and try
183:40 - running this code as you can see we are
183:43 - getting we are inside winged animal
183:45 - function so guys basically this winged
183:47 - animal function that is display function
183:49 - was called and we are getting this
183:51 - statement that is we are inside winged
183:53 - animal function that's because this time
183:56 - we have provided winged animal as the
183:58 - leftmost class and the control flow
184:00 - found this particular display method
184:03 - inside the winged animal class over here
184:05 - which is the parent class of the bad
184:07 - class so guys this is very important as
184:09 - far as method resolution order is
184:11 - concerned the leftmost class is being
184:13 - given the highest priority as far as the
184:16 - same names of the methods are concerned
184:18 - so guys practice on your own so that on
184:20 - different inputs you get different
184:21 - outputs operator overloading in Python
184:24 - Programming so guys in Python we can
184:26 - change the way operators work for user
184:29 - defined types so for example the plus
184:32 - operator will perform arithmetic
184:34 - addition on two numbers in the same way
184:37 - it will merge the two list as well or
184:39 - else if we are dealing with the two
184:41 - strings then it can concatenate two
184:43 - strings strings so the same plus
184:44 - operator can perform multiple operations
184:47 - depending on the operants whether they
184:49 - are numbers or whether they are strings
184:51 - or list so this feature in Python that
184:54 - allows the same operator to have
184:56 - different meaning according to the
184:58 - context is called operator overloading
185:01 - so this we are going to check with the
185:02 - help of examples as well apart from this
185:05 - there are certain special functions in
185:07 - Python so basically the class functions
185:09 - that begin with the double underscore
185:11 - are called special functions in Python
185:14 - they are called double underscore
185:16 - functions because they have a double
185:18 - underscore prefix and suffix such as as
185:20 - you can see this init which can be
185:22 - treated as the Constructor of a class it
185:25 - is one function which starts and ends
185:27 - with the double underscore in the same
185:29 - way the plus operator can be overridden
185:32 - by using this double underscore followed
185:35 - by add and then double underscore again
185:37 - and then open and close parenthesis so
185:39 - guys let us check operator overloading
185:41 - implementation in action using using the
185:43 - vs code over here so we'll see the very
185:45 - basic examples first of all so let's say
185:47 - we have num one it is equal to 10 and
185:50 - then number two that is num two it is
185:53 - equal to 20 so if we simply print num 1
185:57 - plus num two over here so num 1 + num 2
186:01 - so basically it is 10 + 20 which is 30
186:03 - in this case so when we just save this
186:05 - file now and try running this code so as
186:08 - you can see we are getting the result as
186:10 - 30 but what if these variables are
186:12 - strings so instead of numbers let's say
186:14 - if we enclose them within the double
186:16 - Cotes this means that we have a string
186:19 - over here that is 1 Z that is 10 and
186:21 - then over here as well we have another
186:23 - string that is 20 so when we do num 1
186:26 - plus num 2 instead of 30 we will get the
186:29 - concatenation of this string which means
186:31 - 10 will be followed by 20 in this case
186:33 - when we try to print the statement so
186:35 - let me just save this file now and try
186:37 - running this code so as you can see we
186:38 - are getting 1020 so guys we have not
186:41 - changed anything over here the the
186:43 - operator is same and the operants are
186:45 - also same the only thing is we have
186:47 - changed the values to the string and
186:49 - that is what operator overloading means
186:51 - that is by using the same operator we
186:53 - can have the different results based on
186:55 - the operant values now guys let us check
186:58 - how operator overloading can be
186:59 - implemented when we are dealing with
187:01 - classes over here so let's say we have a
187:03 - class that is named as point over here
187:06 - and this class let's say we have a
187:08 - Constructor inside it so we have init
187:11 - method inside this so init method it
187:13 - will take one parameter that is self and
187:16 - what we will do is let's say it has two
187:17 - attributes over here so self dox so the
187:21 - point class it will have two attributes
187:23 - that is X and Y coordinates so over here
187:26 - let's say we provide the x value by
187:28 - using the parameter that we are getting
187:30 - so let's say we have X1 over here and
187:33 - let's say we have y1 over here so self.
187:36 - X it will be equal to X1 and then again
187:38 - we will have self do y it is equal to y1
187:42 - in this case so whenever we are creating
187:44 - the object by using the point class over
187:46 - here the Constructor that is in it
187:48 - method will be called along with the two
187:50 - points that we will be passing and those
187:52 - two points will be assigned the values
187:54 - to these variables that is X and Y over
187:57 - here now guys in order to override the
187:59 - two string method we also have another
188:01 - method that is double underscore and
188:03 - then Str Str so as you can see apart
188:05 - from this we have many other functions
188:07 - that can be used when we provide the
188:09 - double underscore so vs code is
188:11 - suggesting us the entire list of
188:13 - functions which we can use in our python
188:15 - code so over here we are going to use
188:17 - this s Str and then we are going to have
188:19 - our custom code inside this Str Str so
188:22 - what we are going to do is we are simply
188:24 - going to print the values of this X and
188:26 - Y so how do we do that we are going to
188:28 - use the formatting part and then inside
188:31 - this we are going to call the cell
188:32 - followed by Dot and then we have X and
188:35 - then again we have comma over here and
188:38 - then again we call the self.y so over
188:41 - here we are simply printing the X X and
188:43 - Y values which are separated by the
188:45 - comma over here and then guys let's say
188:46 - we want to override the plus operator
188:49 - over here so before having the function
188:51 - inside the class what I will do is first
188:53 - of all we will create the object so
188:55 - let's say P1 is the object name it is
188:58 - equal to point which is the class over
189:01 - here and what we do is we do 1A 2 that
189:04 - is X and Y values over here and then
189:06 - let's say we have another point that is
189:08 - P2 it is equal to point and then this
189:11 - time we are going to provide the X and Y
189:13 - coordinates as 2 and 3 over here and
189:16 - what we want to do is we want to print
189:18 - the sum of both these points that is P1
189:21 - plus P2 so guys in this case we are
189:23 - using this plus operator and then these
189:25 - are the operators that is P1 and P2 so
189:27 - how do we have the custom implementation
189:30 - of this plus operator over here which we
189:32 - will call it as the operator overloading
189:34 - as well so as we have seen over here we
189:37 - have something called as double
189:38 - underscore and then add and then double
189:40 - underscore so this represents the Plus
189:43 - operator as well so we can use this
189:45 - method inside the class in order to have
189:47 - our custom implementation of addition of
189:50 - both these points so over here we have
189:52 - DF followed by double underscore and
189:55 - then we have the add method over here
189:57 - followed by double underscore and then
189:59 - we have the open and close parenthesis
190:01 - and then inside the parenthesis we will
190:03 - provide the self as the parameter now
190:05 - guys apart from the self parameter
190:07 - basically when we do P1 + P2 it is
190:10 - simply P1 dot this particular function
190:13 - that is we are going to Define followed
190:16 - by this P2 which will be a parameter so
190:18 - we need to catch this as the second
190:20 - parameter over here so what we will do
190:22 - is after the self we will have another
190:24 - parameter and we will name it as other
190:26 - over here so what we can do is over here
190:28 - we can create another variable that is X
190:30 - it is equal to self do X over here plus
190:34 - we need to use another parameter that is
190:36 - other which represents the other point
190:38 - that is P2 in this case so over here we
190:41 - will say other Dot X in this case and
190:44 - then the same way we are going to have
190:46 - another variable that is y it is equal
190:48 - to self doy + other do y in this case
190:53 - and then guys what we have to do is
190:54 - simply we need to return the point of
190:57 - both these values that we have found
190:59 - that is X and Y so basically return
191:02 - point of X comma Y in this case so we
191:05 - have X comma y so guys this is the
191:07 - implementation of our addition operator
191:09 - we are doing the operator overloading in
191:12 - this case so basically P1 + P2 it is
191:15 - same as P1 followed by Dot and then the
191:18 - add function being called along with the
191:20 - parameter that is P2 so in this case
191:22 - this function will be called and it will
191:24 - return point of X comma Y and basically
191:27 - while returning this we are providing
191:29 - the print statement so behind the scenes
191:31 - this function will be called in order to
191:33 - print the statement so guys basically
191:35 - over here inside of the print statement
191:37 - we need to have the return statement
191:39 - over here so I'll just remove this part
191:41 - over here and we will say return
191:44 - followed by double codes and then inside
191:46 - this double codes we will be using the
191:48 - formatting so let's say we have zero and
191:50 - then comma and then let's say we have
191:51 - one followed by Dot and then we have
191:54 - format over here and inside this format
191:56 - we need to provide the x and y values so
191:58 - self.x and then comma and then we have
192:01 - self doy in this case so basically this
192:04 - is the way in which we are going to
192:06 - print the values that is of X and Y so
192:09 - guys let me just save this file now and
192:10 - try running this code so so as you can
192:13 - see we are getting the coordinates as 3
192:15 - and 5 this x and x values are getting
192:18 - added so 1 + 2 it is equal to 3 and then
192:21 - 2 + 3 it is equal to 5 so we are getting
192:23 - five over here so guys basically what we
192:26 - have done is if you see the main code
192:28 - over here we have just defined P1 and P2
192:31 - which are simply the points and if we
192:33 - were not having this implementation
192:35 - inside the class that is the string and
192:37 - the addition part then we won't be able
192:39 - to add both these points directly
192:42 - because by default this plus operator
192:44 - can only handle numbers or strings Or
192:46 - List over here but in order to handle
192:49 - the custom classes we need to define the
192:51 - custom functions as well inside those
192:53 - classes and according to our requirement
192:55 - we can have the code inside those custom
192:57 - functions guys we can also change the
192:59 - formatting over here in order to change
193:01 - the formatting we can say that X it is
193:03 - equal to this particular thing and then
193:06 - after comma we can have y it is equal to
193:09 - self.y part over here so let me just
193:11 - save this file now inter running this
193:13 - code so as you can see we have changed
193:15 - the formatting xit is equal to 3 and Y
193:17 - is equal to 5 so whatever format that
193:19 - you want to print in or whatever code
193:21 - you want to have inside this Str Str
193:23 - method you can have it accordingly based
193:25 - on your requirements so guys this is
193:27 - operator overloading for you with the
193:29 - same operator you can have multiple
193:32 - implementations and it can have
193:33 - different meanings as far as operant are
193:36 - concerned similarly we have other
193:38 - special functions and the other operator
193:40 - overloading functions as well as you can
193:42 - see we have this init which initializes
193:44 - the attributes of the object which we
193:46 - have already seen as far as class
193:48 - Constructors are concerned then we have
193:50 - Sr which returns a string representation
193:52 - of the object that is what we have
193:54 - implemented over here it returns a
193:56 - string implementation of the object that
193:58 - is point x comma Y and then we also have
194:01 - Len which Returns the length of the
194:03 - object then add which adds the two
194:05 - objects so over here we have implemented
194:08 - the add method which adds two objects
194:10 - over here which is P1 and P2 that is
194:13 - what we have achieved in this particular
194:15 - program apart from that we also have
194:17 - this call function which calls the
194:19 - objects of the class like a normal
194:21 - function guys apart from this we can
194:23 - also have other operator overloading
194:25 - functions as well for addition we have
194:27 - seen P1 + P2 which means P1 Dot and then
194:31 - underscore uncore add will be called in
194:33 - which case the parameter will be P2
194:35 - similarly we can have the subtraction
194:38 - multiplication the power of two objects
194:40 - and then we can have division as well
194:42 - and then we can have flow Division and
194:44 - many other mathematical operations can
194:47 - be achieved by using the operator
194:49 - overloading just how we have done in
194:51 - this program so we have come to the
194:53 - conclusion of the Python programming
194:54 - language hopefully you have got enough
194:56 - knowledge about the Python language and
194:58 - you should practice on your own so that
195:00 - on different inputs you get different
195:01 - outputs and that is how you are going to
195:03 - learn more about the Python language so
195:06 - that's it at this video I'll see you in
195:07 - the next video till then stay tuned