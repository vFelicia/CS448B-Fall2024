00:00 - so now we will see recursive functions
00:02 - in JavaScript so guys basically the
00:04 - recursion is the term that is used when
00:06 - the function calls itself from within
00:09 - its body so guys basically whenever we
00:11 - are going to make a function call from
00:13 - within its definition that is the
00:15 - function body then the term that is used
00:18 - is called recursion and we call it as
00:20 - recursive function so guys basically
00:22 - recursion can be very useful in order to
00:25 - complete some mathematical calculations
00:28 - and this we are going to check with the
00:29 - help of examp as well we are going to
00:31 - see how we can find the factorial of a
00:33 - number by using the recursive function
00:36 - in JavaScript to understand how we can
00:38 - use recursion in JavaScript in order to
00:41 - complete our task so guys basically this
00:44 - is the syntax as you can see previously
00:46 - we had seen how we can provide the
00:48 - function definition so over here we have
00:50 - the function keyword followed by the
00:52 - name of the function and then we can
00:54 - provide the optional parameters inside
00:57 - the open and close parenthesis over here
00:59 - and then guys after this inside the open
01:01 - and close curly braces we will have
01:04 - certain lines of code over here and then
01:06 - at some point within the function
01:08 - definition we are going to call this
01:10 - function with the help of the function
01:12 - name again and also pass those
01:14 - parameters that are being expected by
01:17 - the function over here so guys basically
01:19 - this is the simple syntax of the
01:20 - recursive function we are going to
01:23 - understand it in a better way by using
01:24 - the example in vs code so guys it is
01:27 - very important to note that there should
01:29 - be a breaking point to be defined within
01:32 - the function in order to stop the
01:34 - recursion or else a recursive function
01:36 - will execute itself indefinitely so guys
01:39 - let us check the recursive functions
01:41 - with the help of example in vs code over
01:43 - here so first of all we will provide the
01:46 - function keyword in this case and let's
01:48 - say we provide the name of the function
01:49 - as factorial because we are going to
01:51 - find the factorial of a number now guys
01:53 - how do we find the factorial of a number
01:56 - so basically let's say if you want to
01:58 - find the factorial of the number that is
02:00 - four in this case so basically the four
02:02 - number will be multiplied by the
02:04 - previous number that is three so we
02:06 - multiply it by three and then again we
02:08 - multiply this result by two over here
02:11 - which is the previous number that is 3 -
02:13 - 1 it is equal to 2 over here and then
02:15 - again in the end we multiply this result
02:17 - by one in this case so guys basically
02:20 - you can see that 24 is the result and
02:22 - this is the result of the factorial of
02:24 - the number four over here so guys
02:26 - similarly if you want to find the
02:28 - factorial of 10 then you have to
02:31 - consider 10 and then you need to
02:32 - multiply it by the number that is 10 - 1
02:35 - which is equal to 9 in this case and
02:37 - then multiplied by 8 and then so on you
02:39 - have to go in the reverse order and you
02:41 - have to reach the number that is one
02:43 - over here so guys basically this is the
02:46 - way that we find the factorial in
02:47 - mathematics so over here what we will do
02:50 - is simply we are going to accept one
02:52 - parameter over here that is number in
02:54 - this case and then guys inside the open
02:56 - and close parenthesis what we want to do
02:59 - is we need to to check whether this
03:00 - particular number is it equal to one so
03:03 - basically we provide the if condition
03:06 - and then inside the parenthesis we
03:07 - provide number variable and then we have
03:10 - to use the logical operator that is
03:12 - equal to equal to 1 in this case so guys
03:14 - basically the number will be checked
03:16 - whether is it equal to one right now if
03:19 - yes then we have to return the result
03:21 - that is one over here so guys basically
03:23 - we use the return statement in order to
03:26 - go back to the previous function call in
03:28 - this case so guys I'll make you
03:30 - understand how this particular line of
03:31 - code will work but in this case we are
03:34 - simply providing the break point that
03:36 - this is the last number after which you
03:38 - don't have to call the factorial
03:40 - function once again from the function
03:42 - definition of this particular factorial
03:44 - function so guys after this what we want
03:46 - to do is simply we can use the number
03:49 - that is provided as the parameter in
03:52 - this case so let's say if the number
03:54 - that is passed by the function call is
03:56 - four in this case so simply we have to
03:58 - provide the number that is four 4 and
04:00 - then we need to multiply it by the
04:02 - number that is three in this case so
04:04 - guys instead of providing this number
04:06 - that is three simply we are going to
04:08 - call this function that is factorial
04:09 - over here so in this case we provide the
04:12 - factorial and this time we need to
04:14 - provide the number Min - one expression
04:17 - so basically what exactly is happening
04:19 - over here is number is equal to 4 and
04:21 - then again we are calling this factorial
04:24 - function which is going to pass the
04:25 - number it is equal to three this time so
04:28 - guys again the control flow will will
04:29 - come over here inside the factorial
04:31 - function and then it will check whether
04:33 - number is equal to 1 no in this case so
04:36 - again it will go over here number is
04:38 - equal to 3 this time which will be
04:40 - multiplied by the factorial of number
04:42 - minus 1 so the parameter that will be
04:44 - passed will be equal to 2 over here so
04:46 - guys basically this is the expression
04:48 - that is going to be continuously
04:50 - executed after each call of the function
04:53 - factorial so guys over here we have to
04:55 - provide the return statement in this
04:57 - case so let us understand how this
05:00 - particular function will work with the
05:01 - help of example over here so guys what
05:03 - will happen in this case is when we
05:06 - provide factorial of the number that is
05:08 - four over here so basically we are
05:10 - calling this function with the name
05:12 - factorial in this case and we are
05:13 - providing the parameter that is four so
05:15 - let us understand how it works so during
05:18 - the first call the number will be equal
05:20 - to four over here and is number equal to
05:22 - 1 no in this case so the control flow
05:25 - will not return one in this case but it
05:27 - will come over here and it will check
05:28 - this particular expression that is
05:30 - number ultied factorial of number minus
05:33 - 1 so in this case what will happen is 4
05:36 - * factorial of number minus 1 which will
05:40 - be equal to 3 this time so basically
05:42 - this particular expression will be
05:44 - executed as you can see I have commented
05:47 - out this line of code so this is the
05:49 - expression that will be executed now
05:51 - again what will happen is let me just
05:53 - copy this line of code over here and let
05:55 - us expand this particular function
05:57 - called that is factorial of three now
05:59 - guys the control flow comes over here
06:01 - again in which case number will be equal
06:03 - to three now so is number equal to 1
06:05 - this time no in this case so again
06:08 - number multiplied by factorial of number
06:10 - minus 1 will be executed so instead of
06:12 - factorial of three we have to replace it
06:15 - by number multiplied by factorial of
06:17 - number Min - 1 when number is equal to
06:19 - three this time so we will replace the
06:21 - number by three so 3 - 1 it will be
06:24 - equal to two this time so again we will
06:26 - provide the number as two now let me
06:29 - just C copy this line of code once again
06:31 - over here and paste it in this case so
06:33 - again we will expand this particular
06:35 - section that is factorial of two so guys
06:38 - over here the control flow goes back
06:40 - again when number is equal to two this
06:42 - time so is number equal to 1 no in this
06:45 - case so again this particular expression
06:47 - will be executed so basically let me
06:50 - just copy this expression and paste it
06:52 - over here instead of factorial of two in
06:54 - which case the number is equal to two
06:56 - this time so we replace the number value
06:58 - by two and 2 - 1 it is equal to 1 this
07:01 - time so guys basically in the end
07:03 - factorial of one will be called so as
07:06 - you can see when the number is equal to
07:08 - 1 the return statement will help us in
07:10 - order to return the result that is one
07:12 - over here so simply we have to replace
07:15 - this particular factorial of one by one
07:17 - number so as you can see these are the
07:20 - numbers that will get multiplied and
07:21 - ultimately we will get the result which
07:24 - can be stored on the left hand side
07:26 - during the function call over here so
07:28 - guys basically this is the expression
07:30 - that is getting executed when we are
07:32 - providing the parameter for this
07:33 - factorial function as four this time so
07:36 - guys let me just include the result on
07:37 - the left hand side as well so that we
07:39 - can store the result of this particular
07:41 - function call and simply we can provide
07:44 - the console. log statement over here let
07:46 - me just calculate the factorial of 4
07:49 - once again over here so 4 * 3 * 2 * by 1
07:54 - and then when we press equal to as you
07:55 - can see 24 is the answer and that is
07:58 - what we must get when we print the value
08:00 - of the result variable in this case so
08:02 - guys simply we will say factorial result
08:06 - is and Then followed by dollar symbol
08:08 - and inside the open and close curly
08:10 - braces we will provide the variable name
08:13 - that is result in this case so let me
08:15 - just save this file now and try running
08:17 - this code so basically we are going to
08:19 - use the node command over here followed
08:21 - by the name of the Javascript file so as
08:23 - you can see factorial result is 24 and
08:26 - that is what we have caught using the
08:28 - calculator as well well what will be the
08:30 - result of factorial of five so guys
08:32 - basically when we provide factorial of
08:34 - five over here simply we need to
08:37 - multiply this result by five in this
08:39 - case because that is the number that is
08:41 - missing over here in this particular
08:43 - expression so when we multiply it by
08:45 - five we get the answer as 120 over here
08:48 - so let us check that as well when we
08:50 - save this file now and try running this
08:51 - code once again over here as you can see
08:54 - factorial result is 120 in this case so
08:57 - guys basically we are using the
08:58 - recursive call over here that is this
09:01 - particular factorial function is getting
09:03 - called from within its function body
09:06 - over here in order to complete certain
09:08 - mathematical expression guys we can
09:10 - provide any of the numbers over here so
09:12 - let's say when we provide the number 10
09:14 - it will provide us the bigger number is
09:15 - the result so let me just save this file
09:17 - now and try running this code once again
09:19 - over here as you can see factorial
09:21 - result is
09:23 - 36280 in this case when we provide
09:26 - another number let's say when we provide
09:28 - 15 in this case let me just run this
09:30 - code once again over here so as you can
09:32 - see this is the result in this case so
09:34 - guys what will be the result when we
09:36 - provide the factorial of three in this
09:38 - case comment in the comment section
09:40 - below what will be the output when we
09:42 - provide factorial of three let us see
09:44 - whether your answer is correct or not
09:46 - please make sure that you like this
09:47 - video so that it reaches to more people
09:50 - and subscribe to the channel so that you
09:51 - get the notifications on upcoming videos
09:53 - as well I'll see you in the next video
09:56 - in which we are going to talk about an
09:58 - exercise using the function in
09:59 - JavaScript so stay tuned