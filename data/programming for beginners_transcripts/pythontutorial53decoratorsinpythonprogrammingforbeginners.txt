00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to learn
00:03 - about decorators in Python Programming
00:06 - so guys a python decorator is a function
00:08 - that takes in a function as a argument
00:11 - and returns it by adding some
00:13 - functionality so basically we are going
00:15 - to define a function that will take
00:17 - another function as a parameter and it
00:19 - will return it with some added
00:21 - functionality and that function that we
00:24 - are going to create is called a python
00:25 - decorator so as you can see in this
00:27 - example we have something called as make
00:30 - pretty which is going to take another
00:31 - function as the parameter and inside
00:34 - this we are having the inner function
00:35 - over here which is going to Simply print
00:38 - I got decorated and then after that it
00:41 - is going to call that function which was
00:43 - passed as a parameter to this make
00:45 - pretty function and after this there is
00:47 - a return inner function which is going
00:49 - to be returned by this outer function so
00:51 - how can we call it so basically we have
00:53 - another function that is ordinary which
00:55 - is going to Simply print I am ordinary
00:57 - so basically we are going to call this
01:00 - make pretty function which is the outer
01:02 - function over here and we are going to
01:04 - pass this ordinary function that we have
01:06 - created over here so this ordinary
01:09 - function is going as the parameter to
01:11 - this make pretty function and the
01:13 - control flow is returning this inner
01:14 - function with the help of the statement
01:16 - so basically this variable will get the
01:19 - inner function over here and when we are
01:21 - going to call this decorated function
01:23 - variable along with the open and close
01:25 - parenthesis this particular inner
01:27 - function will be called so first of all
01:29 - this print statement will be called and
01:31 - then this ordinary function will be
01:33 - called so guys let us check this with
01:34 - the help of example as well so that you
01:36 - get the clear picture of what a python
01:38 - decorator means so basically first of
01:41 - all let's say we Define the function
01:43 - that is ordinary function over here and
01:46 - what we are going to do is we are simply
01:48 - going to print the statement that is I
01:51 - am ordinary so guys how do we call this
01:53 - function simply by using the name of
01:55 - this function we can call it so
01:57 - basically we are going to use the name
01:59 - of the function following by open and
02:00 - close parenthesis so let me just save
02:02 - this file now and try running this code
02:04 - so as you can see I am ordinary is
02:06 - getting displayed but what is the main
02:08 - aim of python decorators it is going to
02:11 - take this function as the parameter and
02:13 - return it with some additional
02:15 - functionality so let's say we have
02:17 - another function over here and the name
02:19 - of that function we will keep it as make
02:21 - pretty and then this thing is going to
02:24 - take another function as the parameter
02:26 - so let's say we provide the function as
02:29 - the variable name and then after this we
02:31 - have a colon and then inside this we are
02:33 - going to have another nested function
02:35 - which we call it as inner and this thing
02:37 - is not going to take any parameter and
02:40 - then after this simply we are going to
02:42 - print that I am decorated over here so I
02:46 - am decorated and then after this we are
02:49 - going to call this function which was
02:51 - passed as the parameter to the make
02:53 - pretty so we'll just call this function
02:55 - using the open and close parenthesis and
02:57 - then after this what we will do is this
02:59 - this makeup pretty will return the inner
03:02 - function over here so basically we are
03:05 - going to call the return inner over here
03:07 - so now whenever we are going to call
03:09 - this make a pretty function we have to
03:11 - assign it to the variable and that
03:13 - variable will be having this instance of
03:15 - the inner function so what we will do is
03:18 - instead of calling this ordinary
03:19 - function we will say decorated that is
03:22 - the variable name followed by equal to
03:24 - and we will call this makeup pretty
03:26 - function over here so I'll just copy
03:28 - this and paste this over here and with
03:30 - this makeup pretty what we are going to
03:32 - do is we are going to pass this ordinary
03:34 - function because it is expecting a
03:36 - function over here as the parameter so I
03:38 - am going to pass this ordinary we'll
03:40 - just copy and paste over here so guys
03:42 - basically this function is going to
03:44 - return another function that will be
03:46 - inner so this entire function will be
03:48 - returned and assigned to this decorated
03:50 - variable now we can call this decorated
03:52 - variable as a function in order to call
03:55 - the statements that are present inside
03:57 - this inner function so what we are going
03:59 - to do is simply we are going to call
04:01 - this decorator along with the open and
04:03 - close parenthesis over here so let me
04:05 - just save this file now and try running
04:07 - this code so as you can see instead of
04:09 - just IM ordinary we are getting I am
04:12 - decorated over here because this
04:13 - function is getting called so first of
04:15 - all this statement that is I am
04:17 - decorated is getting printed on the
04:19 - terminal after this we have this
04:21 - function call so what is this function
04:23 - called this is nothing but this is the
04:25 - ordinary function that is supposed to be
04:26 - called so this I am ordinary is getting
04:29 - printed as the second line so guys this
04:31 - is the way that we can use the python
04:33 - decorators in order to add some
04:35 - functionality to the existing functions
04:37 - we can use the python decorator which is
04:39 - another function and it is going to
04:41 - return another inner function over here
04:43 - as we have seen apart from this after
04:45 - calling this function we can also have
04:47 - some other statements such as I am
04:50 - already decorated so we can say I am
04:53 - already decorated and before this we can
04:56 - say I am being decorated
04:58 - so basically this is the process of
05:00 - getting decorated and then over here it
05:03 - will print I am ordinary and then again
05:05 - I am already decorated will get printed
05:07 - over here so let me just save this file
05:09 - once again and try running this code so
05:11 - as you can see these three statements
05:12 - are getting printed over here now guys
05:14 - apart from this there is another way in
05:16 - order to mention these decorators so add
05:19 - symbol with a decorator as you can see
05:21 - instead of assigning the function call
05:23 - to a variable that we have done just now
05:25 - over here we are assigning this function
05:28 - call to this particular variable that is
05:30 - decorated python provides a much more
05:32 - elegant way to achieve this
05:34 - functionality using the add symbol so
05:36 - over here we can also use the at the
05:38 - rate symbol in order to call this makeup
05:41 - pretty function so what we have to do is
05:43 - I'll just remove these lines of code so
05:45 - basically this lines of codes are not
05:47 - required and instead of that we can
05:49 - simply call the ordinary function over
05:52 - here but in order to get it decorated
05:54 - what we have to do is before this
05:56 - ordinary function we have to use at the
05:59 - rate symbol followed by The Decorator
06:01 - name that is this function name which is
06:03 - make pretty so over here we will say
06:06 - make pretty so guys in this way when we
06:08 - call this ordinary it is going to check
06:10 - that yes we are having The Decorator
06:12 - over here and this function will be
06:14 - called which will return these
06:16 - statements which we have already seen so
06:18 - let me just save this file now and try
06:19 - running this code so as you can see all
06:22 - these three statements are again getting
06:23 - printed over here so we have not called
06:25 - the make pretty directly but we have
06:27 - called the ordinary function which is
06:29 - the base function and for that we are
06:31 - having The Decorator that is make rating
06:33 - guys let us take another example as far
06:35 - as decorators are concerned with the
06:37 - help of numbers over here so what we are
06:39 - going to do is let's say we have the
06:41 - divide function so divide function takes
06:44 - two parameters that is X comma y it is
06:46 - simply going to divide X by y over here
06:49 - so we are going to have return x divided
06:53 - by Y in this case now guys let's say we
06:56 - call this function so basically we need
06:58 - to call this function function with the
06:59 - help of two numbers so let's say first
07:01 - we call 2 comma five and then let me
07:03 - just save this file now and try running
07:04 - this code so we are not getting any
07:06 - result that's because we are returning x
07:08 - divided by y instead of that let us
07:10 - print the operation so print x divided
07:13 - by y so let me just save this file now
07:15 - and try running this code as you can see
07:17 - we are getting the result as 0.4 but
07:20 - guys let's say I want to divide one more
07:22 - number so let's say we have divide 2
07:25 - comma 0. Now this time the denominator
07:27 - is 0 and we cannot divide any number by
07:30 - zero so let me just save this file now
07:31 - and try running this code so as you can
07:33 - see we are getting 0 division error that
07:35 - is division by 0 that is the exception
07:38 - that is occurring for this statement
07:40 - that is divide 2 comma 0 so guys let's
07:42 - say we want to handle this exception
07:44 - with the help of python decorator so
07:46 - what we will do is we will have another
07:47 - function over here which will act as a
07:49 - python decorator for this divide
07:51 - function and we will name this function
07:53 - as smart divide it is going to check
07:56 - whether the denominator is 0 or not and
07:58 - then then only it will divide the two
08:00 - numbers so over here it is going to take
08:03 - one parameter that is the function as
08:05 - the argument and then we are going to
08:07 - have colon and then inside this we are
08:10 - going to have the inner function over
08:11 - here now this inner function is also
08:13 - going to take two parameters since the
08:16 - original function that is divided we are
08:18 - calling it with two parameters over here
08:19 - so again inside the inner function we
08:22 - will have X comma Y and then after this
08:24 - simply we are going to have the print
08:26 - statement and we will say I am going to
08:30 - divide
08:31 - X and Y so in this case I am going to
08:35 - divide comma X and then comma and then
08:38 - we have end and then comma we have y in
08:41 - this case so basically we are just
08:42 - printing the statement that is I am
08:44 - going to divide X and Y and then after
08:46 - this we are going to check whether this
08:48 - value that is Y which is the denominator
08:51 - whether it is equal to 0 or not so we
08:53 - will say if y it is equal to 0 then we
08:57 - can simply print the statement that is
09:00 - denominator is 0.
09:04 - and then we say cannot divide so
09:08 - basically when the denominator is 0 we
09:10 - cannot divide and we have to return back
09:12 - so we will say return in this case so
09:15 - when Y is 0 then denominator is 0 cannot
09:18 - divide statement should get printed and
09:20 - the control flow should return back or
09:22 - else if Y is not 0 then we need to call
09:25 - this divide function over here which was
09:27 - passed as a parameter as you can see so
09:30 - over here we say return and then we say
09:33 - function and then we have to pass both
09:35 - these parameters that is X and Y in this
09:37 - case so we say x comma Y and then guys
09:41 - after this coming out of this inner
09:43 - function we have to return this inner
09:45 - function from the smarter divide so we
09:47 - say return in R so as you can see this
09:50 - is our python decorator function that
09:52 - will help us in order to check whether
09:54 - the denominator is 0 if it is 0 then it
09:57 - will print the statement that we cannot
09:58 - divide the two numbers if it is not 0
10:01 - then this particular function that is
10:03 - divided needs to be called now guys when
10:05 - we are calling this divide we also need
10:07 - to call the smart device so as we have
10:09 - seen with the at the rate operator
10:10 - before this function that is divide we
10:13 - have to provide at the rate and then we
10:15 - have to provide smart divide so when
10:17 - this divided function is being called
10:19 - the control flow will go over here and
10:21 - it will check that we have the python
10:23 - decorator in this case so the control
10:24 - flow will come over here and all the
10:27 - operations will be carried out as we
10:28 - have just discussed so guys let me just
10:30 - save this file now and try running this
10:32 - code so as you can see this time we are
10:34 - getting I am going to divide 2 and 5
10:37 - that's because the first time that we
10:38 - provided the numbers were 2 and 5 in
10:40 - this case so the answer was 0.4 and the
10:43 - next time is I am going to divide 2 and
10:46 - 0 the second statement which contains
10:48 - two and zero numbers as the X and Y
10:51 - values we are getting denominator is 0
10:53 - cannot divide so guys over here we have
10:56 - successfully used the python decorator
10:58 - in order to handle the exception that
11:00 - was occurring when we were dividing the
11:02 - two numbers where denominator was 0 in
11:05 - this case so guys practice on your own
11:06 - so that on different inputs you get
11:08 - different outputs please make sure that
11:10 - you like this video so that it reaches
11:11 - to more people and subscribe to this
11:13 - channel so that you get the
11:14 - notifications on upcoming videos as well
11:16 - the next video that we are going to talk
11:18 - about is property in Python Programming
11:21 - so stay tuned