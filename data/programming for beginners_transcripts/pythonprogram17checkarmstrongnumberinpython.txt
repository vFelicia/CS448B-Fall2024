00:00 - hey what's up guys welcome to another
00:02 - video in which we are going to write
00:03 - Python program to check the Armstrong
00:06 - number so guys basically the user will
00:08 - enter the number over here and we are
00:10 - going to check whether that positive
00:11 - integer is a Armstrong number or not so
00:14 - a number is an Armstrong number of the
00:17 - order n if the number that is ABCD and
00:20 - then if it is equal to a raise to n and
00:23 - then B raised to n c raised to n and so
00:25 - on the sum of all these numbers is equal
00:28 - to this particular number on reference
00:30 - height so guys for example in case of an
00:32 - Armstrong number of three digits the sum
00:35 - of cubes of each digit is equal to the
00:39 - number itself so basically if we take
00:40 - the number that is 153 the length of
00:43 - this number is three digits the cube of
00:46 - all these numbers will be added and then
00:48 - if the answer on the right hand side is
00:50 - 153 then this number is going to be the
00:52 - Armstrong number so guys we are going to
00:54 - implement this logic with the help of
00:56 - the Python program in vs code so guys
00:58 - over here the very first thing that we
01:00 - are supposed to do is take the number
01:02 - from the user so we say number it is
01:05 - equal to input function and then we will
01:07 - ask the user to enter the number and
01:10 - then guys over here user will enter the
01:12 - number now this number we need to
01:14 - convert it into the integer from string
01:17 - input so basically whatever data is
01:19 - provided by the user using this input
01:22 - function it is of the string data type
01:24 - we need to convert it into the integer
01:26 - so now we are having the number inside
01:28 - this number variable we need to find the
01:30 - length of this number so basically we
01:33 - are going to use this variable that is
01:35 - length it is equal to we will use the
01:37 - length function over here and we are
01:39 - going to convert this number to the
01:41 - string first and then we are going to
01:43 - provide this number inside the Str
01:46 - function so guys over here what we are
01:48 - doing is again we are converting this
01:49 - integer into the string and we are
01:51 - getting the length of the string using
01:53 - the Len function and the length will be
01:56 - stored inside this length variable guys
01:58 - this length is required in order to find
02:01 - the power of the individual digits for
02:03 - this number that we just got from the
02:05 - user so guys what will be the logic over
02:07 - here we are going to have another
02:09 - variable that is temp and we will store
02:11 - this number that is entered by the user
02:13 - inside the stamp variable and then we
02:15 - are going to have the while loop and
02:17 - inside the while loop we will have the
02:19 - condition whether this temp number if it
02:22 - is greater than 0 then go inside this
02:24 - while loop and then we are going to
02:26 - extract the digit so basically we are
02:28 - going to get the last digit of this
02:30 - number inside this digit variable it is
02:33 - equal to we will say the number that is
02:35 - entered by the user person 10. so guys
02:38 - over here what exactly we are doing is
02:40 - let's say if the entered number by the
02:42 - user is 153 so we are getting this last
02:45 - number that is 3 over here inside this
02:48 - digit by using the number person 10. now
02:50 - what we have to do with this digit is we
02:52 - have to find the power of this digit
02:55 - that is 3 raised to the number of digits
02:57 - inside this number that is entered by
02:59 - the user which is already present inside
03:02 - the length variable so what we will be
03:04 - doing is we will simply have the digit
03:07 - and then double multiplication over here
03:09 - will help us in order to get the result
03:11 - of Digit raised to the length variable
03:14 - over here so guys this is nothing but
03:16 - this will be 3 raised to the length
03:18 - which is 3 in this case if we are
03:19 - entering this number that is 153 and
03:22 - then guys what we have to do is we have
03:24 - to find the sum of all these digits so
03:26 - over here what we will be doing is we
03:28 - will have another variable that is sum
03:30 - initially the value of this sum it is
03:32 - equal to 0 and then over here while
03:34 - getting the digit raised to the length
03:36 - we will assign it to the sum variable
03:38 - and add all the numbers that we are
03:41 - getting by using this plus and then
03:43 - equal to operator now guys the last step
03:45 - is to reduce this number that is after
03:47 - getting this digit and getting this
03:49 - expression adding it into the sum
03:51 - variable now we need to get this number
03:53 - so how do we get this by reducing this
03:55 - 153 to 15 over here so we are going to
03:59 - just divide and number that is 10
04:01 - divided by 10 and then assign it to the
04:04 - variable temp again so over here what we
04:06 - are doing is we are just removing the
04:08 - last digit from here and 15 will be
04:10 - stored inside the temp variable and next
04:12 - time when the control flow comes back
04:14 - again over here temp is greater than 0
04:16 - yes it is since the value is 15 and then
04:19 - again we will get the digit variable X
04:21 - number person 10 over here now guys one
04:23 - change that we have to do is instead of
04:25 - this number which is having 153 SD value
04:28 - we need to use the temp variable over
04:30 - here since this is going to have the
04:32 - updated number from where we want to get
04:35 - the last digit and then guys in the end
04:37 - we are going to have the sum over here
04:39 - now what we can do is we have the
04:41 - original number that is entered by the
04:42 - user inside this variable that is number
04:44 - and we also have this sum variable which
04:47 - is very important so what we have to do
04:49 - is in the end we just need to compare
04:51 - both these variables at a sum if it is
04:53 - equal to number then entered number is
04:56 - the Armstrong number so over here we
04:58 - will print we will say no number is that
05:02 - is entered by the user and sum is and
05:06 - then open and close curly braces over
05:07 - here we will be displaying the sum that
05:09 - is computed inside the while loop so
05:12 - what we have to do is we have to use the
05:14 - dot format function and we will simply
05:16 - provide the number over here as the
05:18 - first parameter and sum over here is the
05:21 - second parameter guys what we will do is
05:23 - we will have the print statement outside
05:25 - of this condition that is sum is equal
05:27 - to number so basically we are going to
05:29 - print both that is number and sum as
05:31 - well and then if both of these numbers
05:32 - are equal then we will say enter number
05:35 - is Armstrong number so we will simply
05:37 - say Armstrong number and then again in
05:40 - the else part what we will do is we will
05:43 - have the else part and we will say not
05:45 - an Armstrong number over here so if both
05:48 - the numbers are equal then it is
05:50 - Armstrong number if both the numbers are
05:52 - not equal then it is not an Armstrong
05:54 - number so guys let me just save this
05:55 - file now and try running this code so as
05:58 - you can see the code is asking the user
05:59 - to enter the number let us provide the
06:02 - same number over here that is 153 so
06:04 - over here when we provide 153 AC number
06:07 - and press enter so we are getting some
06:09 - different sum over here that is
06:11 - 179.46 so guys there was a mistake over
06:14 - here while dividing the temp by 10 we
06:16 - need to use the double forward slashes
06:19 - over here in order to get the division
06:21 - operation correct so guys over here let
06:23 - me just save this file now once again
06:24 - and try running this code so while
06:26 - entering the number let us provide 153
06:29 - that is the same number when we press
06:31 - enter as you can see number is 153 and
06:34 - we get the sum as 153 and that is why it
06:36 - is an Armstrong number that's because
06:38 - both the number and the sum of the cubes
06:41 - of all the individual digits in these
06:43 - numbers is same guys let me just run
06:45 - this code once again there is another
06:47 - Armstrong number that is
06:49 - 1634 so let us provide that so we have
06:52 - one six three four over here when we
06:54 - press enter as you can see number is
06:57 - 1634 and the sum is also 160 3 4 which
07:00 - gives us the Armstrong number let us
07:03 - verify this in the calculator as well so
07:05 - what we have to do is we have to find
07:06 - the sum of all the individual digits
07:08 - raised to the 4 that is the length of
07:11 - this number so 1 raised to 4 plus 6
07:14 - raised to 4 plus 3 raised to 4 and then
07:19 - plus and then guys when we press enter
07:21 - over here as you can see we are getting
07:22 - 1 6 3 4 which is matching with this sum
07:25 - that is 1634 that we got after Computing
07:28 - the sum over here and guys that is the
07:30 - reason why since both the number and the
07:32 - sum is equal this is an Armstrong number
07:34 - let me just run this code once again we
07:36 - will provide a different number that is
07:39 - 1635 this time the last digit over here
07:42 - we are changing it to 5 over here
07:43 - instead of 4 so guys when we press enter
07:46 - as you can see number is 1635 but the
07:49 - sum is 2003 and since both these numbers
07:52 - are not matching it is not an Armstrong
07:54 - number so guys in this way we can easily
07:56 - find whether the entire number is the
07:58 - Armstrong number by by using this logic
08:01 - over here that we have just written
08:02 - using the Python program guys let us run
08:04 - this code once again over here and let's
08:06 - see whether the number that is 321 when
08:09 - you enter this number whether it is an
08:11 - Armstrong number take this as a homework
08:13 - for you practice on your own so that you
08:15 - come to know whether this number is an
08:17 - Armstrong number or not and comment in
08:19 - the comment section below whether this
08:21 - is an Armstrong number or not an
08:23 - Armstrong number let us see whether your
08:25 - answer is correct or not apart from
08:27 - practicing make sure that you like this
08:29 - video so that it reaches to more people
08:30 - and subscribe to this channel so that
08:32 - you get the notifications on upcoming
08:34 - videos as well the next video that we
08:36 - are going to talk about is Python
08:38 - program to display powers of 2 using for
08:40 - Loop so stay tuned