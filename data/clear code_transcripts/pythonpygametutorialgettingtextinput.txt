00:00 - hi everybody in this tutorial I'm going
00:02 - to show you how to create this it is a
00:05 - very simple text input for PI game and
00:07 - we can just type something in a box and
00:09 - we have to have the box selected to be
00:11 - able to type anything and if it's not
00:13 - selected I could be typing but nothing
00:15 - happens and yeah that's pretty much it
00:18 - getting text and PI game isn't all that
00:20 - difficult so it should be a pretty
00:21 - straightforward tutorial before we get
00:24 - into actual code let's talk about the
00:26 - logic of getting text input and to get
00:28 - any kind of text input you mostly have
00:31 - to follow the logic of just getting any
00:32 - kind of text and they have three major
00:35 - steps to it and the first step is to get
00:37 - a fund the second step is to use that
00:40 - phone to run the text on a new surface
00:42 - and then the final step is to use that
00:43 - new surface and put it on the main
00:45 - surface that the user sees in the end
00:47 - and we are going to follow this very
00:49 - logic but there's one addition to it
00:51 - that when we get to rendering the text
00:53 - we get input from the user from the
00:55 - event loop so whenever the user type
00:58 - something we capture it in a string and
00:59 - then this string is being rendered and
01:01 - that's really only to get basic text
01:04 - input so let's start with that one and
01:06 - before we get into this fully I have
01:08 - used most of the ideas in here from a
01:10 - tutorial by SCR X on Stack Overflow and
01:13 - this guy is amazing you have lots of
01:16 - really good explanations on basic PI
01:18 - game questions check out his page on
01:20 - Stack Overflow he has lots of really
01:22 - good stuff to learn to get better at
01:24 - game development in Python alright let's
01:26 - get into the actual code so here we have
01:28 - almost basic PI camp set up by itself
01:31 - this doesn't do anything because we're
01:33 - not rendering anything we are starting
01:34 - with the display surface which is 800 by
01:37 - 800 pixels we have our game loop all of
01:40 - this part and for now all we do is draw
01:42 - background and it's completely black so
01:45 - all we can see is a black background
01:46 - picture and to get all of the started
01:48 - for now let's just draw a basic piece of
01:51 - text the very first thing we need is a
01:53 - font and I'm going to call mine base
01:56 - font and to get this one all we need is
01:59 - PI game dot font font and make sure you
02:02 - get the capitalization right that this
02:05 - one here should be capital letters this
02:07 - one should not be
02:08 - and now we need two arguments the first
02:11 - one is the style of the font and we can
02:13 - just go with none so we go over the
02:15 - fault one and now I need the size of the
02:17 - text and I'm just gonna go with 32 it
02:20 - seems like a decent value so that's a
02:23 - starting point and next up we are going
02:26 - to be needing a basic piece of text that
02:28 - we actually want to render I'm going to
02:30 - call mine use a text and for now it's
02:34 - just going to be empty but later on we
02:36 - are going to use this string to add
02:38 - information into it so a bundle user
02:41 - presses a this one gets an A if these
02:43 - are present as this one gets an S but
02:45 - this one comes later so now we have to
02:47 - first start to create text let's go to
02:50 - the second one
02:51 - so in our game loop we need to render
02:53 - this text and this is going to happen on
02:55 - its own surface so I'm going to create a
02:57 - variable called text surface and this
03:01 - one is going to get PI games or render
03:04 - so we're taking this font and we run the
03:07 - text with it
03:08 - and the first thing we need is the text
03:11 - mode to render our case this is user
03:13 - text next up when you tell it if it's
03:16 - going to be anti aliased or not um I can
03:19 - just put that true but you could false
03:20 - in there it really doesn't matter and
03:22 - finally we need a color for the text and
03:25 - this has to be an RGB value and micah is
03:27 - i just going to go with white so 255 255
03:30 - and 255 so this is the second step now
03:33 - we have created text but it's on its own
03:35 - surface so if we were to run this
03:37 - nothing would happen and I get an error
03:40 - because the problem here is that bonis
03:43 - base so PI game knows what to render if
03:47 - you run this now now we can see that we
03:49 - can't see anything cool but we are
03:51 - getting much closer so next up we need
03:53 - screen doublet and this is the first
03:55 - step to actually put all of this on the
03:58 - actual surface and this happens of
04:00 - screen doublet and now we need the
04:02 - surface we want to put on it and a
04:04 - coordinate I'm just going to put it at
04:06 - zero and zero and if we run this now we
04:10 - still can't see anything
04:11 - but if we now type something in here
04:14 - hello now we can see text up here so we
04:19 - are able to draw text now and we just
04:21 - need to figure out how to get user input
04:23 - so let's work on that and let me get rid
04:26 - of this string for now and let's work on
04:29 - the input and to get input we need the
04:31 - event loop and for now audibly check is
04:33 - if the game was closed which is this
04:35 - line here and to get input we need to
04:38 - add another one we need if event dot
04:41 - type is equal to PI game dot key down so
04:49 - this one just checks as any button was
04:51 - pressed and inside of this if statement
04:54 - we can use this event to check which
04:57 - specific button was pressed and this
04:59 - happens with event dot unicode so this
05:04 - is the information of what specific
05:05 - button was pressed and I want you do is
05:08 - to add this to this use a text so all we
05:11 - need to do is user text plus equals
05:15 - event of Unicode and if you run this
05:18 - game now and I can type text perfectly
05:23 - fine and I can just keep on going and
05:24 - write what's long as I want this will
05:27 - never stop the one thing you want to be
05:28 - aware of that right now
05:29 - if you press ENTER nothing happens it
05:31 - just gives us a random character also if
05:34 - I press backspace the same happens
05:35 - because neither of these are unicode
05:38 - characters so pi game doesn't know how
05:40 - to render them and if you want multiple
05:42 - lines and pi game it is generally going
05:44 - to be difficult because pi game can only
05:46 - render single lines at one point so if
05:49 - you want multiple lines you need to code
05:50 - this yourself but all right so this is
05:53 - some basic input already now let's give
05:57 - it the ability to delete something so
05:59 - that we can use our backspace and this
06:02 - is also quite easy and all we want that
06:04 - if event dot key equals eye game not Kay
06:14 - backspace so for this line we just check
06:18 - for very specific key so now we look for
06:20 - is the backspace key pressed and this
06:23 - key here and this event unicode they are
06:25 - somewhat different but i do similar
06:27 - things think of it like this this one
06:29 - here is to get the actual information
06:30 - this one is to look for a specific once
06:34 - this backspace is pressed what we want
06:36 - is to use a text but we don't want to
06:39 - get all the characters we only want to
06:40 - get all the characters minus the last
06:42 - one so that we effectively delete the
06:44 - last one and this one is really easy to
06:46 - do with indexing and all we need is go
06:50 - from 0 to minus 1 so we go from the very
06:54 - first character to the one before the
06:56 - last and we could even get rid of the 0
06:59 - because Python then just assumes is
07:01 - going to be a 0 and if any other button
07:03 - was pressed so else
07:05 - then we just add whatever our character
07:08 - was pressed and if I run this now I can
07:12 - type test and if I press backspace that
07:15 - is gonna get deleted and that's pretty
07:17 - much it for a very basic setup to type
07:19 - text so if you get this for you already
07:21 - know how to write any text but obviously
07:26 - this isn't very flexible so next up
07:29 - we're going to put this into a box which
07:31 - is also quite easy because all we need
07:33 - to do is to create a rect and then when
07:35 - we render the text down here we don't
07:37 - run it a text at a specific coordinate
07:39 - instead we're running the text whatever
07:41 - this rectangle we created earlier
07:43 - happens to be so that whether we put the
07:45 - rectangle later on it's gonna be the
07:47 - same position where the text is so in
07:49 - this way the rectangular texts are
07:51 - always connected and to get that one
07:53 - done we first need to create a rectangle
07:55 - and I'm gonna combine import direct and
07:59 - to create a rectangle or record we just
08:02 - need PI games or
08:03 - rect and now you need a couple of
08:06 - variables the first one is the X and the
08:08 - y coordinates so I'm gonna put mine at
08:10 - 200 and 200 and next up we need a
08:13 - dimension of the rectangle and in my
08:16 - case I'm gonna go with 140 and 32 so the
08:20 - rectangle is 140 pixels wide and 32
08:22 - pixels high and to give our rectangular
08:24 - color I'm going to find a color by
08:26 - itself
08:27 - and I'm gonna call mine for now just
08:29 - color and you get a color we can I've
08:32 - use RGB values like down here or we
08:35 - could use what's called pi game dot
08:38 - color and now we can use quite a few
08:41 - different names to get a specific color
08:42 - and the one I want to use is called
08:44 - light sky-blue three it is a very light
08:48 - blue and there's a very long list online
08:51 - of Pi game on what colors you can use
08:52 - for this so now we have a rectangle but
08:55 - we wouldn't be able to see it we first
08:57 - have to draw it on the screen so let's
08:59 - do it and I'm gonna do it before the
09:01 - text and to draw this rectangle we need
09:04 - PI game toward draw dot rect now we need
09:09 - an argument on what surface to draw it
09:11 - on so we need to screen then we need
09:13 - what color to give it so I'm gonna stand
09:15 - up call it color and emanate the actual
09:18 - rectangle so import or right now we need
09:21 - one more variable and that's the border
09:23 - with which I'm going to put at two so if
09:26 - I run this now we get the surroundings
09:28 - of a rectangle and in PI game if you
09:32 - specify a border with this one then PI
09:34 - game only run as the border with if I
09:36 - remove this one we will get a fully
09:39 - drawn a rectangle just in case you're
09:41 - wondering I just want the outline
09:43 - because the content is supposed to be
09:44 - the text so now the problem is that we
09:47 - have a rectangle and when we type text
09:48 - they are in different positions and
09:50 - that's very easy to fix
09:52 - the only thing we need is that when we
09:54 - render this text we don't want to render
09:57 - it at position 0 0 we want to render it
10:00 - wherever the input erectus so we just
10:03 - put input rect and if I type this now is
10:06 - almost work so if I type the text now we
10:09 - are almost in the right position we just
10:10 - have to offset it by a few pixels and to
10:14 - get this one done all we need is input
10:17 - rect dot X and it's plus 5 pixels and
10:21 - then input rect dot Y also gets plus 5
10:26 - pixels so basically apples here is then
10:28 - we put the text on the main surface we
10:31 - first take the x position at 5 pixels
10:33 - and then we take the Y position of the
10:34 - rectangle also at 5 pixels
10:37 - and if we run this now and I distract
10:40 - text then this is perfectly in the
10:42 - middle it has one more problem though
10:44 - that if I keep on typing a text goes
10:46 - outside of the box so we have to fix
10:49 - that one next which fortunately is also
10:52 - very easy to do because we can control
10:54 - the width of this rectangle very easily
10:56 - and all we need to do is get the width
10:59 - of the text we render and then you start
11:01 - to influence the width of this rectangle
11:02 - so below the text and I get our input
11:07 - rect and to influence the width we just
11:09 - need W so our biffed is going to be the
11:14 - text surface and to get to without this
11:18 - one we need to get underscore width and
11:22 - this would already get us a kind of
11:25 - working example so if I type text now
11:28 - that's called this is lit best so this
11:33 - is somewhat working but the box cuts off
11:35 - too fast so we just need to add a few
11:38 - more pixels that's like 10 and now we
11:42 - start with 10 pixels and if we now type
11:44 - test this is a test this one already
11:47 - works much better and there's one more
11:50 - thing we can do because when we run this
11:51 - at the beginning this text box is really
11:54 - narrow so what I want to do is that at
11:56 - the beginning this text box is 200
11:58 - pixels wide and then when we add more
11:59 - text it gets wider and to get this
12:03 - functionality we just need to basic pipe
12:05 - method as called Max and Max only does
12:09 - one thing it picks the highest number of
12:11 - whatever is passed inside of it so right
12:13 - now we only have one argument whatever
12:15 - comes out of this one here but if we had
12:17 - a second one let's say 100 if you run
12:22 - this now we get a basic text box and
12:24 - what happens here is that when pygame
12:28 - looks for the width of this rectangle it
12:30 - looks at the max function and it sees
12:32 - these two values and the first one is a
12:34 - hundred and the segment is going to be
12:35 - 10 so it returns a hundred so our text
12:38 - box is 100 pixels wide but if we keep on
12:42 - writing in it then at some point the
12:44 - text surface is wider than 100 pixels
12:46 - and then this becomes the width of the
12:48 - rectangle so we have a reasonably
12:50 - working
12:51 - rectangle and that brings us to the last
12:53 - topic that what if you don't want to
12:55 - write in this topic so that's how you
12:56 - want to play outside of it and then you
12:58 - can press our buttons that say to move a
13:00 - main character so we need some kind of
13:02 - functionality to deselect this box which
13:05 - is also quite easy to do so back in our
13:07 - code
13:08 - the first way I'm going to do is add one
13:10 - let's say update our colors so I have a
13:12 - color that I'm going to talk active the
13:14 - one we had so far and then I'm going to
13:17 - add another color that I'm going to call
13:19 - passive so this is the color when the
13:22 - box is not selected and in this case I'm
13:24 - just gonna go with rate 15 which is a
13:27 - very plain gray color and then next up
13:29 - I'm gonna create a new color variable it
13:34 - then follows the activity and updates
13:35 - the color if the box is selected or not
13:37 - and for now it's gonna be color passive
13:40 - and then we need another variable that
13:43 - I'm gonna call active and by default it
13:45 - is false and this variable we are going
13:48 - to use later to check if the box is
13:50 - selected or not so we can only write in
13:52 - the box if this one is set to true and I
13:55 - only wanted to be true when we click
13:56 - into the box and if you click outside of
13:58 - the box it's set to false so then we
14:00 - couldn't write in it and the first one
14:03 - you to do is inside of this that this
14:06 - only works if active is true so if
14:11 - active equals true and all of this works
14:17 - if not it doesn't work so if you run the
14:20 - code now we couldn't be selecting it and
14:23 - we couldn't be writing nothing would
14:25 - happen and to get the behavior to make
14:28 - this actor I want to check if event dot
14:32 - type is equal to PI game mouse button
14:39 - down so this is when we make it click
14:42 - essentially and inside of this we want
14:45 - to check that when we click the button
14:46 - is this actually a click on the
14:49 - rectangle outside of it so basically
14:51 - checks a collision and that happens with
14:54 - if info direct George will like point
14:58 - and then event us so what happens here
15:02 - is then we click with the mouse
15:04 - we get an event and we can check the
15:07 - position of this event so this is giving
15:09 - us an X in the Y position and then we
15:11 - can check if these two positions are
15:13 - inside of the rectangle and if that is
15:16 - the case we want active to the group so
15:21 - if we run this now and we click on the
15:24 - box now we're able to type again and
15:26 - this works almost as usual the next step
15:30 - is to update the colors that if this is
15:31 - active and we go to the active color and
15:34 - this happens in the game loop and all I
15:37 - want is if active and color is going to
15:45 - be color active I think I called it and
15:49 - else color is equal to color passive
15:55 - don't forget up here or we can do this
15:57 - in a second actually for now let's try
15:59 - this so now we outside of it if I click
16:01 - on it it becomes blue I can write in it
16:04 - but what I forgot earlier is actually
16:06 - got side of it we cannot unselect it but
16:10 - this is very easy to add so one way back
16:12 - here when we check the collision that if
16:15 - this isn't the case else that active is
16:18 - back to false and this is pretty much
16:22 - it's now we outside of it
16:23 - if I click in it and I can write
16:25 - something if I now click outside of it
16:28 - it deselects it and if I type now
16:30 - nothing is happening and that is
16:32 - literally it I hope you enjoyed this
16:33 - tutorial and I'll see you around