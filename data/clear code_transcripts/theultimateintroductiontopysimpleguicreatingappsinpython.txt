00:00 - hello there in this tutorial we are
00:02 - going to create all the guise you can
00:03 - see on the screen right now by using pi
00:06 - simple gui let me go through them really
00:08 - quick
00:09 - we start with a converter app that is
00:11 - quite simple but covers all the
00:12 - fundamentals of the module then we
00:14 - create a calculator with better styling
00:16 - and this one can update the styling
00:18 - dynamically then we create a stopwatch
00:20 - this one has even more styling and next
00:22 - up we have a text editor and this one
00:24 - can save and open files
00:27 - next up we have a snake because why not
00:29 - and after that we combine python by gui
00:32 - with map.lib to create an app that
00:33 - includes a graph
00:35 - a basic image editor is next and this
00:37 - one uses pillow to manipulate images
00:40 - next up we create a basic music player
00:42 - that can change the volume and shows a
00:44 - progress bar and then we continue with
00:46 - web stuff by building a basic weather
00:48 - app that gets data from google weber
00:50 - and finally to finish the video we are
00:52 - going to use opencv to detect faces
00:55 - and that is it by the end of this
00:57 - tutorial you should have a fairly good
00:59 - understanding of pi simple gui and how
01:01 - to solve more or less any problem inside
01:03 - of it
01:04 - now before i start let's talk about pi
01:06 - simple gui in general all this module
01:09 - really is is a wrapper around other gui
01:11 - libraries and by default the base
01:14 - library is tkinter
01:16 - all this really means is that python
01:17 - begui runs tkinter internally but makes
01:20 - it much easier to access
01:22 - and python bagooy does make gui
01:24 - development really easy
01:26 - most programs we are going to build
01:28 - require only about 50 lines of code
01:31 - especially if you only want some basic
01:33 - gui and don't want to learn a whole
01:34 - library python bagooy is incredibly
01:37 - useful
01:38 - also if you're just starting with guise
01:40 - or programming in general i think python
01:42 - begui is something really useful because
01:44 - it is incredibly easy
01:47 - although there are two limitations you
01:49 - should be aware of number one is styling
01:52 - and while python begui has some options
01:55 - to make the gui look okay this is fairly
01:58 - limited so we are never going to create
02:01 - styling that looks as good as commercial
02:03 - apps
02:04 - the other limitation is scaling python
02:07 - by bagui is designed for small apps if
02:09 - you want to make something really
02:10 - complex with fancy layouts you probably
02:13 - want to look at other libraries
02:16 - i guess you could be pushing it quite a
02:17 - bit but you would eventually run into
02:19 - problems but that is basically all you
02:22 - need for the basics
02:24 - although we do have to install pi simple
02:26 - gui and this happens either in the
02:28 - powershell or on the terminal and all
02:30 - you need is pip install python per gui
02:32 - or pip3 install pi simple gui
02:36 - and that should be all you need
02:38 - now before we can start with the first
02:40 - project there is one fundamental concept
02:43 - that we have to cover and that is
02:46 - elements now elements in pi simple gui
02:50 - are the core of the entire framework so
02:53 - if you don't understand elements you
02:55 - don't understand pi simple gui
02:58 - essentially an element can be a text it
03:00 - can be an image it could be a slider it
03:02 - could be basically any kind of element
03:05 - that you see in any kind of program
03:08 - so in the most simple term any visible
03:10 - thing that you see is going to be an
03:12 - element and this is including the window
03:16 - so the general frame of our app that
03:18 - will contain all the other elements
03:21 - and essentially all we ever do in python
03:23 - by gui is combine different elements and
03:26 - use that to create a more complex
03:28 - program
03:29 - and in other frameworks an element would
03:32 - just be a widget
03:33 - i honestly have no idea what i chose a
03:35 - different name it's literally the same
03:37 - thing
03:39 - there are also elements that are not
03:40 - visible
03:42 - and those are mostly used for layout
03:44 - purposes for example there is a column
03:47 - element that places elements inside of a
03:49 - column should be fairly obvious
03:52 - so with that we can start working on our
03:54 - first program a converter and this one
03:58 - is going to look like this
04:01 - a really simple app we can type some
04:03 - numbers in here let's say 100
04:06 - then we can choose some units kilometer
04:08 - to mile kilogram to pound and seconds to
04:11 - minute
04:12 - and if i click on convert
04:14 - we get 100 seconds of 1.67 minutes
04:18 - and if i select different units
04:22 - we get different kinds of outputs
04:25 - and i am going to use all the basic
04:27 - concepts of python per gui to make this
04:29 - so already by the end of this part you
04:32 - will have a good understanding on how
04:33 - python page works in general
04:36 - but let's actually have a look
04:38 - how we can make this
04:40 - now here we are in a completely empty
04:43 - sheet of code and first of all i have to
04:46 - import pi simple gui and this happens
04:48 - with import pi
04:51 - simple
04:52 - gui
04:53 - and for this part it's really important
04:55 - to check out which letters have to be
04:58 - capitalized so the p the s and the gui
05:01 - all have to be capitalized and since
05:03 - this is kind of annoying to write we
05:06 - usually abbreviate this as sg which is
05:09 - much easier to write
05:11 - and now if you just want to test if this
05:13 - is working run the code
05:15 - if this is working you shouldn't see any
05:17 - kind of error which i don't which is a
05:19 - good start
05:20 - and now we already have to create our
05:24 - first element and that we create with
05:26 - sg.window
05:29 - and this is just going to create a
05:31 - window
05:33 - so this is pretty much always the
05:35 - starting point for any pi simple gui app
05:37 - and this one is going to need two
05:39 - arguments at the very least we need a
05:42 - title and we need a layout
05:45 - and the title is just going to be a
05:47 - string so in my case i want to name this
05:51 - a converter
05:53 - now for the layout we need something
05:55 - slightly more complex
05:58 - and let me put this in a separate
06:00 - variable that should make things a bit
06:02 - easier
06:03 - and let me give a bit of space so
06:06 - essentially for the layout we want a
06:09 - list that is going to contain other
06:11 - lists
06:14 - and let me add one list a second list
06:17 - and list number three and essentially
06:21 - what is going to happen is that each
06:23 - nested list so list one list two and
06:26 - list three
06:28 - each of those are going to be their own
06:30 - rows
06:31 - let me actually put them on separate
06:33 - lines
06:34 - that should illustrate the principle
06:36 - much better
06:38 - essentially we are creating a window and
06:40 - that is this yellow box for now the
06:42 - dimensions really don't matter
06:45 - how pyson begui creates layouts is by
06:47 - using these lists to figure out where
06:50 - the elements should be
06:52 - and basically what is going to happen is
06:55 - that each of these lists is going to be
06:57 - its own row so the first list here
07:00 - would correspond to
07:02 - the top row
07:04 - in this program the second list
07:07 - would be
07:08 - the second row
07:10 - and then the third list would be
07:12 - row number three
07:14 - and since our list has three lists
07:17 - inside our app is going to have three
07:18 - rows and that is going to determine the
07:20 - height of the window
07:22 - and now inside of each of these lists
07:25 - let me clean this one up a tiny bit to
07:28 - make things easier to see
07:30 - so we don't need these bits here
07:34 - essentially inside of each list we now
07:38 - have to place another element and let me
07:41 - add a couple of different elements the
07:44 - first one would be sg text and this one
07:47 - is a super simple text element that
07:50 - doesn't really do anything
07:51 - and this one only needs a single
07:53 - argument and that would just be a string
07:56 - with the text you want to display so
07:58 - let's call this one text
08:00 - another element we could place would be
08:03 - sg and button
08:06 - and button also needs a single argument
08:08 - which is the name of the button
08:10 - or the text on the button and in my case
08:13 - let's call this button
08:14 - and now on the third row
08:17 - we
08:18 - want to have let's say an input element
08:21 - which is called input and this one
08:22 - doesn't need any arguments
08:24 - and let me actually hide the drawings
08:26 - for now
08:27 - if i run the code now
08:29 - we can see that well we can't see
08:31 - anything
08:33 - and that is because we are going to need
08:35 - one more method before we can run all of
08:38 - this and that is called read
08:41 - so now if i run this
08:43 - you can see what we have just done i'm
08:45 - going to explain the read method in just
08:47 - a second but for now
08:50 - let me re-open the drawing i just did
08:54 - i guess here is best
08:57 - so here you can see
08:59 - we have one row with one element we have
09:03 - the second row
09:04 - and we have the third row
09:07 - so essentially all of these correspond
09:09 - with each other
09:11 - which i think makes a ton of sense it's
09:13 - a really simple way to organize a gui
09:17 - now the next question is
09:19 - what if you wanted to add another
09:21 - element on the same row and the answer
09:24 - here is you would just add another
09:26 - element inside of whatever nested list
09:29 - you're in
09:30 - so for example if i wanted to add a
09:32 - second element to the first row
09:34 - i would just add another element in here
09:37 - let's say one element we haven't seen
09:39 - yet that is called sg
09:42 - spin this one we are going to use in
09:44 - just a second actually
09:46 - and in here we need one list with a
09:50 - couple of strings
09:51 - so let's say item one
09:55 - and
09:56 - item two
09:58 - and now if we run this
10:00 - we can see the list selection box we
10:03 - have seen from the actual final program
10:05 - and that is essentially the system how
10:08 - you would create a layout in pi simple
10:11 - gui you basically create more lists and
10:14 - each list is going to be one row and
10:16 - then inside of each row you just add
10:18 - elements to create columns
10:20 - so essentially what we are doing in here
10:23 - for the layout is we are creating some
10:26 - sort of primitive table
10:29 - what you can see in here is that columns
10:31 - isn't really the perfect word because
10:33 - the columns for each row do not align so
10:36 - each row is independent just keep that
10:38 - in mind and later on we are going to
10:41 - learn about methods to for example span
10:44 - the entire width of the row with
10:46 - individual elements that is totally
10:48 - possible but for now i only care about
10:50 - the simple layout and this is a really
10:52 - good start
10:54 - and i guess i would really recommend you
10:56 - to practice this so let's do a challenge
11:00 - add to this layout another row and this
11:02 - row should contain two elements
11:05 - one that is a text that says hello and
11:07 - the other one should be a button that
11:09 - says test button or whatever you want to
11:11 - put in there it doesn't really matter
11:15 - all right now to add another row we have
11:19 - to add another list in here
11:21 - and i want to add first of all a piece
11:24 - of text
11:25 - so sg text and the test i think
11:29 - was supposed to be test but it really
11:31 - doesn't matter what's in here
11:34 - and besides that we have sg and button
11:38 - and this one is supposed to be called
11:40 - test
11:41 - button
11:43 - so now if we run this
11:44 - we can see another row with two more
11:47 - elements
11:49 - and we can press the button and ah right
11:52 - what i haven't mentioned yet is once
11:54 - we're pressing any kind of button
11:56 - the entire window disappears
11:59 - if you have tried this already don't
12:01 - worry this is normal for now what you
12:04 - really have to understand is this sort
12:05 - of layout here
12:07 - this is going to be essentially how we
12:09 - are going to create layouts for this
12:11 - entire video
12:13 - if i run this again we do have a window
12:15 - but if i click on any button like on
12:17 - this one the entire thing disappears and
12:20 - that's normal
12:21 - essentially what is happening
12:24 - is that we are executing the code from
12:26 - the top to bottom like in literally any
12:28 - kind of code and what python does on
12:31 - this line here
12:33 - is it waits for any kind of input and
12:36 - that is what this read method here does
12:39 - it basically reads the window and then
12:42 - looks for any kind of event or for any
12:44 - kind of returned value
12:46 - and as soon as we get anything returned
12:49 - python is going to return past this line
12:52 - and since we don't have anything after
12:54 - it the entire program is going to close
12:57 - so we can't see the app anymore
13:01 - and that is something
13:03 - we have to address
13:05 - and the way you address this is
13:08 - let me remove this read method here
13:10 - first
13:11 - and essentially what we have to do
13:14 - is to create a while
13:16 - true
13:17 - loop
13:18 - and only inside of this loop we want to
13:21 - call the read method
13:23 - now for that to work we have to get our
13:25 - window so i'm going to put the window
13:28 - inside of a variable
13:30 - and then
13:31 - we're going to call read on this window
13:34 - now this would work but do not run the
13:36 - code yet you would not be able to close
13:39 - your window which isn't ideal either
13:42 - and to close the window we need to
13:44 - understand two more concepts but for now
13:47 - let me implement then and then i'm going
13:49 - to explain what actually happened so
13:52 - essentially what window.read returns is
13:54 - an event and values
13:58 - and an event is the one we need to think
14:00 - about for now essentially events are
14:03 - things that are triggered by other
14:05 - elements like pressing on a button or
14:07 - closing the window
14:09 - and we have to add custom code to close
14:12 - the window which well is one line so
14:14 - essentially what we want to do is if
14:17 - event
14:18 - is equal to s g dot win underscore
14:22 - closed
14:23 - and if that is the case we want to break
14:26 - this while
14:28 - loop and after this while loop is over
14:32 - just to make sure we are closing the
14:34 - window i want to run window.close
14:39 - and now you can run the code
14:41 - and now i can press the button and
14:45 - everything is well it's not closing it's
14:47 - not exactly working but at the very
14:49 - least we get something
14:52 - so with that we have a basic setup for
14:55 - pi simple gui
14:57 - but now we have to talk about two core
15:00 - concepts of the entire framework we have
15:02 - to talk about events and we have to talk
15:04 - about values
15:06 - and let's start with events that's the
15:08 - more important part
15:10 - and in the most basic sense an event is
15:14 - triggered by a certain action and the
15:17 - one we have already seen is if we are
15:19 - closing the window so if we press the
15:21 - little x at the top of our window then
15:24 - we are calling the win closed event
15:27 - but essentially in pi simpagui
15:29 - every single element can trigger an
15:32 - event a good example here would be a
15:35 - button so if you click on any button an
15:38 - event is being triggered as well and the
15:41 - name of the event is going to be the
15:42 - name of the button you have pressed
15:45 - or rather the key of the button you
15:48 - don't give elements a name instead you
15:50 - give them a key
15:51 - but again this is just a different name
15:53 - for the same concept so a key
15:56 - essentially is a name for an element
15:58 - so for example in our case one of our
16:01 - buttons is called button
16:03 - and if we would press on that button we
16:05 - would trigger an event called button
16:08 - and i guess the best way to understand
16:10 - this is to actually try it
16:13 - and right now we have two buttons we
16:16 - have this button here that is called
16:18 - button right now and besides that we
16:21 - have another button
16:22 - that is called test button
16:24 - so let's run some code if this button
16:27 - here is pressed
16:28 - and to achieve that
16:30 - we have to check if event
16:33 - is equal to
16:35 - 10. literally all we're doing is we are
16:38 - using the same name here and that is how
16:41 - we identify the button
16:43 - and in here
16:45 - essentially let's run some basic code so
16:47 - button
16:48 - pressed if i run this code i can click
16:51 - on this button here and we get button
16:54 - pressed in the output
16:56 - if i click on the other button we don't
16:58 - get anything
16:59 - and since this also is a really
17:02 - important concept you should practice
17:04 - this one yourself
17:06 - try to call an event when this test
17:08 - button here is pressed and if that is
17:11 - the case print something else i don't
17:13 - know whatever you want
17:17 - to identify this button
17:18 - we have to look for the event test
17:21 - button
17:22 - and this is then going to be if event is
17:25 - equal to test button
17:28 - and if that is the case i want to print
17:30 - something
17:31 - else
17:32 - i can click on my button we get button
17:34 - pressed and i can click on test button
17:36 - and we get something else
17:38 - however now this system really isn't
17:42 - ideal because you might have a system
17:44 - where you want two buttons to have the
17:46 - same name
17:48 - let's actually try this if i
17:50 - name both of these buttons button let's
17:52 - see what happens so now if i click on
17:54 - the button we get
17:56 - well the first button gets this button
17:58 - pressed the second button doesn't work
18:00 - at all
18:02 - and on top of that what if you wanted to
18:04 - address other elements like this spin
18:06 - element or this input element neither of
18:09 - those really have a name right now
18:12 - we couldn't really address them if they
18:14 - have an event so we need a more general
18:16 - way to find and identify an element
18:19 - and for that
18:21 - each element has an argument we can pass
18:24 - in and that is going to be a keyword
18:26 - argument that is called key
18:28 - and key is just going to be another
18:31 - string we could call this one button1
18:34 - and then let me copy all of this
18:38 - and let's call this button2
18:40 - and now for the events down here
18:43 - we don't check for the name of the
18:45 - button
18:46 - instead we can check for
18:49 - the key of the button which is not
18:51 - visible to the user
18:53 - so we can name it whatever we want
18:55 - and then let's say for the other element
18:58 - this is button two
19:00 - now button one works and button two also
19:02 - works
19:04 - and this
19:05 - sort of system by using keys
19:07 - is what you see much more often
19:10 - essentially every single element you
19:12 - have in python per gui has the keyword
19:15 - parameter and that for some elements is
19:18 - going to become incredibly important and
19:21 - there is one convention in pyson begui
19:24 - that you can or cannot follow
19:27 - and that is
19:28 - that
19:29 - you usually
19:31 - name elements all in uppercase letters
19:35 - and then followed and preceded by a dash
19:38 - this is what you see most keys being
19:41 - called
19:42 - and i'm going to follow the system
19:44 - but you don't have to if you don't like
19:46 - it in my case i want to stick as close
19:49 - as i can to the
19:50 - documentation let me rename these
19:53 - elements here
19:56 - this is still going to work so we get
19:58 - button and something else
20:01 - now i guess there's one more thing that
20:04 - let's cover it right now right now this
20:06 - text element is entirely static so if i
20:09 - run the code i can click on my text but
20:12 - nothing is going to happen
20:14 - which essentially means that there's no
20:16 - event associated with this text but we
20:20 - can enable an event for pretty much any
20:24 - element and all we really need to do is
20:27 - add the keyword parameter enable events
20:31 - and set this to true
20:33 - and now if i give this text a key
20:36 - and let's call this one
20:37 - text
20:38 - now
20:39 - if i copy
20:41 - this event and change the event text to
20:45 - text
20:46 - i can print something else
20:49 - and let's call this text was
20:52 - rest
20:53 - and i click on the text
20:54 - we effectively turned the text into a
20:57 - button
20:58 - and essentially what we have done here
21:00 - is we have enabled events for one
21:03 - element that by default doesn't have
21:06 - events and this works for pretty much
21:08 - any other element as well
21:10 - if you check the documentation as soon
21:13 - as any element has this parameter you
21:15 - can make it run events to turn it
21:17 - effectively into a button
21:19 - and all right with that we have events
21:24 - so next up we have to talk about values
21:28 - and values are kind of similar to events
21:32 - except they return more information
21:35 - essentially in pi simple gui there are
21:37 - several elements that can contain values
21:40 - the one we have already seen is input
21:42 - and sgspin would also belong to this
21:45 - list
21:46 - and values are essentially there to
21:49 - access the information they have stored
21:51 - if we type something into input we want
21:54 - to have access to that information and
21:56 - this we get from values
21:58 - and basically what happens is that all
22:01 - the elements that can contain values
22:04 - are storing it in one central dictionary
22:07 - and this dictionary is called values
22:10 - and essentially what you do with this
22:11 - dictionary is that the name or the key
22:15 - of each element is going to be the key
22:17 - and then their content is going to be
22:19 - the value and that way you can access
22:22 - each value inside of this values
22:23 - dictionary
22:25 - and i guess there's one edge case where
22:28 - an element doesn't have a key but does
22:31 - have a value
22:32 - if that is the case then python pagoy is
22:35 - going to give it a key by default which
22:37 - is just a number starting from zero and
22:40 - going towards your last element
22:42 - and okay i think all of that is really
22:45 - hard to understand so let's actually
22:47 - visualize it here we are back in the
22:49 - code and let's say if i press on button
22:52 - one i don't want to print text i want to
22:56 - print these values here
22:59 - so i just want to print whatever values
23:02 - we get here
23:04 - and if i run the code now and i press on
23:06 - button we get a dictionary with two
23:10 - elements the first element says zero and
23:13 - item one the second element says one and
23:16 - an empty string
23:18 - and just to visualize what happens
23:21 - if i
23:22 - write something in this input element
23:25 - let's say the word raccoon
23:27 - and if i now press this button again
23:30 - now we get a 0 and item 1 and another
23:33 - key value pair that says one and raccoon
23:37 - and essentially what is happening here
23:39 - is that this is
23:42 - the first key value pair
23:44 - and this one doesn't have a name right
23:46 - now which is why pyson pegue gives it
23:49 - the key of zero and the value is the
23:51 - value that's currently being selected
23:54 - which is item number one right now
23:58 - and then the other element that we have
24:00 - is this input box here
24:03 - and this one also doesn't have a key so
24:05 - it gets the next highest number which is
24:07 - one and the content it has right now is
24:10 - raccoon
24:11 - this one here
24:13 - and all the other elements like text
24:16 - like button the other text and the other
24:18 - button
24:19 - do not appear in this list because they
24:21 - do not store values
24:23 - the only elements we have right now that
24:25 - store values are the spin box and the
24:28 - input element so only those two appear
24:31 - in this list
24:33 - i guess what we can do now
24:35 - is to give one of them a key let's say
24:38 - for the input element i want to give
24:41 - this a key that is called input
24:45 - and now if i run this again
24:48 - and in here let's write another random
24:51 - string red panda and if i now press on
24:54 - the button
24:55 - we can see
24:56 - now we have
24:58 - the input element with the associated
25:01 - value so this is this element here
25:04 - and that way you can access values
25:08 - essentially if you only wanted
25:11 - let's say the values from the input
25:13 - element
25:14 - you could just add a string after this
25:17 - with the key of the element you want to
25:20 - have
25:20 - and now if you run this again
25:22 - let's say kitten
25:24 - and i want to press this i am getting
25:27 - kitten so this is working just fine
25:30 - now there is one more concept that we
25:33 - need to make the converter work and that
25:36 - is
25:37 - updating elements essentially what that
25:40 - means
25:41 - is every element has an update method
25:45 - and this update method you can use to
25:47 - change the value that is being displayed
25:49 - for example you could change the text
25:51 - you could change the visibility
25:53 - and you could change a ton more values
25:56 - and this one is ultimately really simple
25:58 - let's have a look
26:00 - in my code let's say instead of printing
26:03 - the value i type into the input box
26:05 - i want to use this value to update the
26:10 - first text element this one here
26:12 - with the key text right now
26:14 - all i really have to do is to first get
26:17 - my window
26:18 - and this window i can use like a
26:21 - dictionary and then here i just have to
26:23 - look for a specific key of whatever
26:27 - element we want to address
26:29 - this text here is going to be this text
26:32 - which is essentially our first element
26:35 - on this element
26:37 - i want to call an update method
26:40 - and by default without any keyword
26:42 - arguments
26:43 - this is going to update the text now if
26:45 - i run this again
26:46 - i can write let's say another name in
26:48 - here if i now click the button
26:50 - we have updated the text information
26:53 - and this we can do as many times as we
26:56 - want
26:57 - we always get whatever text we type in
26:59 - here
27:00 - and this update method
27:02 - can do a lot of different things the
27:05 - other argument you could pass in here
27:08 - would be visible for example and if you
27:11 - set this to false
27:12 - if i now press the button the text
27:14 - disappears
27:17 - and with that we have the fundamentals
27:20 - of pi simple gui essentially all you
27:23 - need you first of all have to understand
27:25 - the different elements and how to place
27:26 - them in the layout
27:28 - next you need events and values and
27:31 - finally you need the update method
27:34 - and if you understand these three
27:36 - concepts you already understand about
27:39 - eighty percent of pi simple gui it
27:42 - really doesn't get that much more
27:43 - complex
27:45 - so what you are going to see for the
27:47 - rest of the tutorial is a refinement of
27:49 - these concepts
27:51 - we are mostly going to learn about more
27:53 - elements we are also going to learn
27:55 - about a few more tools for the layout
27:57 - and we are going to learn about more
27:58 - things you can put into the update
28:00 - method and i guess we're also going to
28:02 - learn how to style the app but all of
28:04 - these things are pretty small
28:07 - but all of these are going to be fairly
28:09 - small if you could follow along so far
28:12 - you are already able to make most of the
28:15 - apps that you could see in the
28:16 - introduction
28:18 - but all right let's actually make the
28:19 - converter
28:21 - here i am back in the code and the first
28:24 - thing i want to do
28:26 - is to remove all of the stuff we had so
28:29 - far so i can start with a clean ish
28:31 - sheet
28:33 - this
28:34 - would be the most simple pie simple gui
28:37 - app it's not really an app it's more
28:39 - like a skeleton of an app but at the
28:41 - very least we can see a window
28:44 - and i would really recommend you to try
28:47 - to implement the converter yourself if
28:50 - you have paid attention so far you
28:52 - should already be able to create the
28:54 - converter
28:57 - all right now first of all i have to
28:59 - create a layout and i want to have two
29:02 - rows the first one is going to be
29:05 - composed of an input element
29:08 - and besides that i want to have a spin
29:11 - element
29:13 - and
29:14 - the information for this spin element
29:16 - let me just copy it
29:18 - is going to be a list that looks like
29:20 - this so we have kilometer to mile
29:23 - kilogram to pound and seconds to minutes
29:27 - and now besides that on the second row i
29:30 - want to have a single text element
29:34 - that by default is going to say
29:37 - out
29:38 - put so now if i run out of this
29:42 - we already have some basic fields oh i
29:45 - actually forgot there's supposed to be a
29:46 - button in here so on the first row we
29:49 - also want sg button
29:51 - and let's say this one should say
29:53 - convert so now let's try this there we
29:55 - go now
29:56 - this is working
29:58 - now next up
30:00 - i want to give every single element a
30:02 - key so we can identify them a bit more
30:06 - easily every single one of them is going
30:09 - to get a key
30:10 - that is going to start and end with a
30:12 - dash
30:13 - the input i'm going to call
30:16 - input
30:17 - the spin element i am going to call
30:20 - units
30:21 - and the button i'm going to call
30:24 - convert
30:27 - and then the text element is going to be
30:30 - out
30:31 - put
30:32 - and i guess to make all of this easier
30:34 - to read
30:35 - let me add a few more rows here that
30:38 - is going to be better
30:40 - now we have all we need to create the
30:44 - app
30:45 - and first of all what i want to do is i
30:48 - want to check if the event
30:51 - has been
30:53 - convert
30:55 - which essentially means that we have
30:58 - called this
30:59 - button here
31:01 - and if that is the case i want to read
31:05 - out the value inside of my input element
31:08 - and let's store this in a separate value
31:11 - input value
31:13 - is going to be
31:16 - val use and in here i want to look at my
31:19 - input element
31:22 - let's print the input value
31:26 - i can press a number in here if i click
31:29 - on convert we are getting the number
31:31 - although right now we do have a problem
31:34 - i could also write random text in here
31:37 - and if i click on convert this one would
31:39 - also be used which i really don't want
31:42 - because we cannot convert words
31:45 - so we want to check if the input value
31:48 - is numeric
31:49 - and this you get with an if statement
31:51 - that if input value is numeric
31:56 - and if that is the case let's say for
31:58 - now we want to print whatever value we
32:01 - get
32:03 - i can type in a number this one is being
32:05 - printed but if i now
32:07 - type in a word this one is not being
32:10 - printed
32:11 - and what we want to check now let me run
32:14 - this again
32:15 - i now after i have some kind of number
32:18 - let's say 10
32:19 - and i press the button i want to check
32:21 - what unit is being selected and this i
32:24 - get from values
32:26 - and since this would be a couple of
32:28 - fairly simple if statement we can use
32:30 - the match system in python so i want to
32:33 - look at my values
32:36 - inside of my units
32:39 - and there are a couple of possible cases
32:42 - i can have the first case would be the
32:45 - string kilometer to mile
32:48 - and if that is the case let me add
32:50 - another variable in here
32:53 - i want to get my input value and
32:56 - multiply it with 0.06214
33:00 - [Music]
33:01 - and this should just be 0.6 not 0.06
33:05 - and all this number is for is to convert
33:08 - kilometers to miles that's all it does
33:11 - and now that we have that i want to
33:13 - create an output
33:15 - string
33:16 - and this literally is just going to be a
33:19 - simple f string
33:21 - where we get the input value
33:24 - and we say let's say
33:27 - something something kilometer r
33:30 - whatever output we get and miles
33:34 - and now this output string i want to use
33:39 - to display for this output here
33:42 - so at the end
33:44 - once this match is over
33:48 - i want to get my window
33:50 - i want to look at my output field
33:54 - and i want to update it
33:56 - and the text i want to add in here is
33:58 - going to be the output string
34:02 - and now if i run this let's say i'm
34:06 - going to type a 10 in here
34:08 - i click on convert and we are getting an
34:10 - error
34:11 - the problem is that this input value
34:14 - right now is a string and python cannot
34:16 - multiply a string with a number so we
34:19 - have to convert this value here to a
34:22 - floating point number and now this
34:25 - should be working let's run it again
34:27 - let me type a 10 in here
34:29 - we can convert this
34:31 - and we are getting a pretty long value
34:34 - we probably want to round a tiny bit
34:36 - here other than that this seems pretty
34:39 - good
34:40 - now all i want to do is to round
34:44 - this value
34:45 - with let's say two decimal points
34:49 - so if i run this again now let's add 10
34:51 - again
34:52 - and we get 6.21
34:54 - this is feeling significantly better
34:57 - now all we have to do is to cover these
35:01 - two other use cases as well and we
35:03 - should be done so what i'm going to do
35:06 - is to copy this case two times
35:11 - the second case is going to be
35:14 - kilogram two pound
35:16 - and the third one is going to be seconds
35:19 - to minutes
35:20 - and for kilogram to pound
35:23 - we want to multiply with a different
35:26 - value which is going to be 2.204
35:31 - and now we have to change kilometer to
35:33 - kilogram
35:34 - and miles to
35:37 - pounds
35:39 - and then finally for seconds to minutes
35:42 - all we need is to divide whatever number
35:45 - we have by 60.
35:47 - then the input value is going to be
35:49 - seconds and we are converting this to
35:53 - minutes
35:54 - and with that we are pretty much done
35:57 - let's try
35:58 - so let me add 60 in here
36:01 - now kilometer to mile
36:03 - is going to be 37
36:06 - kilogram to pound is going to be 132
36:10 - and
36:11 - seconds to minutes is going to be one so
36:14 - this is working really well
36:17 - i guess one last thing that i would like
36:19 - to do
36:20 - is that if the user doesn't add a number
36:23 - in here
36:24 - i want to print out a warning
36:27 - and if this else is true i want to get
36:31 - my output field
36:33 - and update the text to
36:36 - please enter a
36:38 - number if i run this again
36:41 - i can type in a word in here if i now
36:44 - click on convert we get please enter a
36:47 - number
36:49 - and with that we have our first app
36:52 - wasn't actually that hard
36:54 - the entire thing takes about 38 lines of
36:57 - code
36:58 - and we have a lot of empty space up here
37:01 - which is super nice to work with
37:04 - as a matter of fact we can actually use
37:06 - python by gui to create a one-line app
37:11 - which is something i haven't mentioned
37:12 - in the introduction but it's going to be
37:15 - another app we are going to create in
37:16 - here
37:18 - right now i only have python begui
37:20 - imported and what i can do is call
37:24 - sg.window
37:26 - and in here
37:28 - we can pass in let's say nothing for a
37:31 - title because we don't care about it for
37:32 - this one
37:33 - and now i can pass in
37:35 - two empty lists and read
37:39 - and if i now run this we are still going
37:42 - to get a window and this window you can
37:45 - use to display basically whatever you
37:46 - want so in here i could add for example
37:49 - sg input
37:51 - i could add let's say sg button
37:55 - and let's call this one okay
37:58 - and then sg let's say another button is
38:02 - going to be console and now if i run
38:05 - this
38:06 - we can see a pretty solid looking app
38:09 - written in a single line of code
38:12 - and even better what i can do
38:14 - i can wrap the entire thing
38:17 - inside
38:18 - of a print statement
38:20 - and now if i run this again
38:22 - i can type
38:23 - any kind of word in here
38:25 - if i click on ok it disappears
38:27 - but i do get the values returned
38:30 - and this is really powerful if you just
38:33 - want a really simple gui for like a
38:35 - warning or something in whatever program
38:37 - you have you literally only need a
38:40 - single line of code to make this work
38:42 - which is incredibly useful but alright
38:46 - this one is so simple it hardly counts
38:49 - let's implement the next proper program
38:52 - and that is going to be a calculator
38:55 - and this one is going to look like this
38:58 - so we have a normal working calculator
39:02 - nothing special although there's one
39:05 - interesting thing about this calculator
39:07 - that i can right click on the text and
39:10 - change the theme
39:11 - this is going to give me different
39:13 - themes i could be using with this
39:15 - calculator
39:17 - which really isn't all that difficult to
39:19 - implement i guess let's create this
39:21 - calculator
39:23 - alright so here we are in the program
39:26 - and i already have some basic skeleton
39:29 - if i run this code we can see a plain
39:32 - window that doesn't do anything right
39:34 - now
39:35 - and i guess for the calculator the very
39:38 - first thing that we are going to need is
39:40 - quite a lot of elements
39:43 - let me just go through what we are going
39:45 - to need
39:46 - this is going to be our entire window
39:49 - this one we already have it's this one
39:50 - here
39:52 - now at the top
39:54 - i want to have a text element
39:56 - then i want to have two buttons
40:00 - right below that and one is going to be
40:02 - enter the other is going to be clear
40:05 - and then below those buttons i want to
40:07 - have all of the operation keys so we
40:10 - have one row here for example
40:12 - and in there we would have 7 8 and 9
40:16 - and let's say divide this could be 4 5 6
40:20 - and multiplication then we have one more
40:23 - row this would be one two three and
40:25 - let's say minus
40:26 - and at the bottom
40:28 - i want to have one button with zero
40:31 - that is going to be a bit wider then i
40:33 - want to have a period
40:36 - and finally i want to have my plus
40:38 - button
40:40 - so that is going to be the layout we
40:42 - have to create
40:44 - and
40:45 - for now we just know how to place
40:48 - elements
40:49 - but we don't know how to make elements
40:51 - span the entire width of a row and
40:54 - that's a major thing we are going to
40:55 - learn in this section
40:57 - as a matter of fact this section is
40:59 - going to be massively about customizing
41:01 - and styling our gui but before we can
41:04 - start with that we will have to create
41:07 - all of the elements so as a challenge
41:10 - try to create this
41:13 - layout with the different elements
41:16 - and you should be creating about 18
41:18 - elements in total so try this one
41:20 - yourself
41:24 - i want to start by putting
41:26 - the individual lists inside of
41:28 - individual lines that makes it easier to
41:30 - read now first of all i want sg text and
41:34 - this one by default should be empty but
41:37 - let's say for now this could be output
41:40 - on the next row i want to have two
41:43 - buttons so sg button this one should be
41:46 - saying clear
41:49 - and then i want to have another button
41:52 - so sg button again and this one should
41:55 - be saying
41:56 - enter
41:58 - after i have that
42:00 - i want to have one more row and in here
42:02 - we need four buttons
42:04 - we start with the button for seven
42:07 - and then let me copy it
42:10 - we have the button for eight
42:14 - the button for nine
42:17 - and then we need a button for the
42:19 - operation and in my case this one is
42:22 - going to be multiplication so for now we
42:25 - are just going to have a string in here
42:28 - and now i want to copy this two times
42:31 - so
42:32 - the next row is going to be the button
42:34 - four five and six
42:36 - and i guess the row below is going to be
42:38 - one
42:39 - two and three
42:41 - now for the operation
42:43 - we also need division and we need minus
42:47 - now we are almost done i wanted to
42:49 - duplicate this line one more time
42:52 - and now on this row we only have three
42:54 - elements we have the button for zero
42:57 - we have a
42:59 - period
43:00 - and we have a plus all the way at the
43:02 - end
43:04 - so now let's run all of this and this is
43:07 - looking absolutely horrendous
43:10 - i guess we do have a layout but this
43:12 - really isn't something you would want to
43:13 - use it just looks terrible
43:16 - so this is something we have to work on
43:19 - and i guess this is bringing us to a
43:22 - really important topic in pi simple
43:24 - gui and that is how to customize
43:28 - elements and in here you essentially
43:31 - have a couple of different choices
43:34 - number one is you can set a theme and
43:37 - this one essentially influences the
43:39 - colored choices
43:40 - so if you want a different colored
43:41 - background different colors for the
43:43 - buttons that kind of thing
43:45 - and besides this one we have set options
43:49 - and this one is much more about the size
43:51 - of elements what font we have how much
43:53 - padding we have this sort of thing
43:56 - and finally for each individual element
43:59 - we also have a lot of customization
44:01 - options
44:02 - and that one kind of combines the two
44:04 - previous options
44:06 - so for example if we have a button we
44:08 - could change the color in the theme and
44:11 - we could change the size in the options
44:14 - but then we could also overwrite all of
44:16 - this inside of each individual element
44:19 - and that way you have a lot of
44:20 - flexibility
44:22 - but all right i guess let's implement
44:24 - all of this
44:25 - and let's go through them one by one
44:28 - now to set a specific theme you need to
44:31 - call s g dot theme
44:34 - and where you call this method here is
44:37 - really important for now i call it
44:40 - before the window and after the layout
44:42 - you will see in a second why that really
44:44 - matters
44:45 - and in here we only need one argument
44:47 - which is a string
44:49 - and the string should give us a name of
44:51 - a theme
44:52 - one theme for example would be dark
44:55 - and if i run this
44:57 - we can see we have a different
44:58 - background but each individual element
45:01 - still has the default styling the reason
45:04 - for that
45:05 - is that all of these elements were
45:07 - created before we are changing the theme
45:11 - so all of this gets the default styling
45:13 - then we are changing the theme then we
45:15 - are creating the window so only the
45:17 - window is being updated now to change
45:20 - that all you really have to do
45:22 - is call sg theme
45:24 - before you create any kind of element or
45:28 - at the very least before the element you
45:30 - want to style so now we have a much
45:33 - better looking app
45:35 - and in here you do have quite a few
45:38 - different styling options
45:39 - another one would be called gray gray
45:42 - ray
45:44 - and this one is like an old window
45:45 - styling now the question you might be
45:47 - having now is how can you tell which
45:50 - themes are available
45:52 - and the easiest choice to get this is to
45:55 - just type whatever like a random string
45:57 - in here
45:58 - if i run the code now pi simple gui is
46:01 - giving me a random
46:03 - beam and shows me all the available ones
46:07 - and the random one it has picked for us
46:09 - is dark brown 7
46:12 - and now if you want to pick one specific
46:14 - one in here you can just copy the string
46:17 - for example we could go with blue mono
46:20 - and let's see how that is going to look
46:23 - now this is well a more bluish font
46:27 - and for now
46:28 - the theme i would like to go with is
46:30 - called light gray one
46:33 - and if i run this we have a white
46:35 - background with some blue buttons but
46:37 - later on we are going to learn how to
46:39 - change the theme while the program is
46:41 - open but for now don't worry about it
46:44 - now you could also create your own theme
46:46 - but i'm not going to cover that because
46:47 - i think that's a bit more advanced but
46:50 - it really isn't that hard to do if you
46:52 - read the documentation
46:54 - next up we have sg.set underscore
46:58 - options
46:59 - and in here you can well set different
47:02 - options for the general feeling of the
47:04 - program
47:06 - a really important one in here would be
47:08 - the font
47:09 - and
47:10 - in the font you can basically set a font
47:13 - and a font size as part of one string
47:17 - so for example i think a font that
47:19 - everybody has is called calipri
47:23 - and for the font size
47:25 - let's say 40 so you can definitely tell
47:27 - what's going on if i run this now we
47:29 - have some giant text with a different
47:31 - font
47:32 - and you can set quite a few more things
47:35 - in here
47:36 - and here we have all the options that
47:40 - are available
47:41 - so the one we have just used if i can
47:44 - find it really quick
47:47 - is
47:48 - up here the font
47:50 - and well you could also change the
47:51 - background color
47:53 - input text color text color in general a
47:56 - lot of different things you could be
47:58 - working with
47:59 - and if you scroll down a tiny bit more
48:01 - you can see a bit more detail on all the
48:04 - individual options although i guess
48:08 - some information needs to be added here
48:11 - but that's not really that hard to add
48:14 - if you want to understand this just read
48:16 - for here and this tells you what you
48:18 - need to know what do i want to do in
48:21 - here first of all for my font i want to
48:24 - have the franklin font
48:26 - and my default font size should be
48:28 - something like 20. if i run this now
48:31 - we have
48:32 - the font may be a bit large let's say a
48:35 - default font of 14
48:37 - yeah this does feel better
48:40 - now there is another option i want to go
48:43 - for and that is button
48:46 - element underscore size
48:49 - for this one we need a tuple with the
48:51 - width and the height
48:53 - and importantly here this is not pixel
48:56 - information instead we use the size of
48:59 - characters so that a width of for
49:02 - example 6 and 3
49:05 - would be 6 characters wide and 3
49:07 - characters high
49:09 - it's going to take you some time to get
49:10 - used to this but you will get there
49:13 - if i run this we get something weird all
49:15 - of our buttons are much taller but not
49:18 - really wider
49:19 - and i'm not actually sure why this is
49:21 - happening it might be here that the
49:23 - buttons are constrained by the window
49:25 - itself
49:26 - and this is actually bringing us to the
49:28 - third way to customize elements and that
49:31 - is for each individual element in here
49:35 - we can set some custom parameters
49:37 - let's start with the 7 here
49:39 - and what i want to do here is set a size
49:43 - and the size for this button i want to
49:45 - set to six and three
49:48 - and now if i run this
49:50 - now the button for seven looks much
49:52 - nicer
49:53 - and essentially what i want to do is
49:56 - set a button underscore size
50:00 - and this one should be six and three
50:04 - and now for the size i want to have my
50:07 - button size
50:09 - and copy this
50:11 - to
50:12 - almost all of the elements that we have
50:18 - so we need those as well
50:21 - and if i go a bit further those need the
50:24 - button size as well
50:27 - and this plus and this period needed two
50:31 - now let's try this again
50:33 - and we are definitely making some
50:36 - progress
50:37 - so now most of our buttons look okay
50:40 - but we have a couple of outliers this
50:43 - zero here and the clear and enter button
50:45 - in particular look kind of bad
50:48 - and basically what i want to do
50:50 - is that i want to have this zero span
50:54 - two
50:55 - widths of a button
50:57 - for clear and enter
50:59 - clear should take the first two buttons
51:01 - and enter should take the other two
51:05 - so essentially what we want the buttons
51:07 - to do is to span the entire available
51:10 - width on their row and for that we have
51:14 - a fairly simple parameter
51:16 - and this one is called expand x let me
51:20 - type it for the zero expand x should be
51:23 - true and if i run this now
51:26 - this is looking significantly better
51:28 - and i want to do the same thing
51:31 - for my clear button and for my enter
51:34 - button so now if i run this
51:37 - this is looking like a proper gui
51:40 - and all of the buttons still work we are
51:42 - going to add functionality in just a bit
51:45 - there is one more thing that i want to
51:48 - work on
51:49 - and that is the output should be a bit
51:52 - better customized
51:54 - and in here first of all i want to set a
51:56 - custom font so font
51:59 - and this one i want to have franklin
52:02 - and it should be a font size of 26
52:06 - so if i run this now we have much bigger
52:08 - text
52:10 - but now i want this output to be on the
52:13 - right side of the gui
52:16 - and to achieve that we basically have
52:19 - two different ways of doing it
52:21 - first of all we could work with the
52:23 - alignment
52:24 - right now
52:25 - there is a box around this text that
52:28 - looks like this
52:30 - remember the element we have here
52:34 - is just a box that is always on the left
52:37 - side of the row and this box we could
52:40 - stretch out to cover the entire row
52:44 - and then inside of this new element we
52:47 - could tell the text to always be aligned
52:49 - to the center of the box
52:52 - this would be the first approach
52:54 - but there is also another approach that
52:57 - we could add another element to the left
53:00 - of the output text and tell this element
53:02 - to span as much space as it can
53:06 - and that way we will push output
53:08 - all the way to the right and i guess
53:10 - let's implement both approaches
53:12 - that is going to explain things quite
53:14 - well
53:16 - all right for the first approach
53:18 - there is one more argument we can use
53:21 - and that is called justification
53:23 - and by default this is left but i want
53:26 - to change this to center so we are
53:28 - centering the text if i run this now we
53:31 - can see that nothing has changed the
53:33 - reason being here that this output
53:36 - element only has a width that is about
53:38 - this wide
53:41 - inside of here it doesn't matter if the
53:43 - text is on the left in the center or to
53:45 - the right in terms of alignment
53:47 - because the box is only as wide as the
53:49 - text so where we align it is irrelevant
53:53 - but if we make the box wider
53:56 - which we would do
53:57 - by calling expand x
54:00 - and setting this to true
54:03 - now we have text in the center and i can
54:06 - set this now to right
54:08 - and the text would be on the right side
54:11 - the other approach we could take is let
54:14 - me duplicate this line and comment out
54:16 - the first one
54:18 - so if i didn't want to work with
54:19 - justification
54:21 - what i could also do is to add another
54:24 - element to the left of the text and the
54:26 - element we want to add here is called sg
54:29 - and push
54:31 - now if i run this
54:32 - we have the same result and essentially
54:35 - what happens now is that sg push is an
54:38 - invisible element that covers as much
54:41 - width as it can which in our case is
54:44 - this area here
54:46 - and we are going to see sg push later on
54:49 - but for now
54:50 - i am happy to stick
54:53 - by using the justification and expand x
54:57 - now finally there's one more thing that
54:59 - i would like to do and that is to add
55:01 - some padding and i think this could be a
55:03 - good challenge for you let me open up
55:06 - the documentation for the text element
55:09 - here you can see
55:11 - all the different parameters the text
55:13 - element has
55:14 - and what i want you guys to do is to set
55:17 - some padding for this text in my case i
55:20 - went with something like 10 for the
55:21 - horizontal axis and 20 for the vertical
55:23 - axis but you can set whatever you want
55:26 - so try this yourself
55:30 - alright the padding parameter is called
55:33 - pad and in here
55:35 - we need a tuple and the tuple needs the
55:39 - horizontal and the vertical padding
55:41 - now for the horizontal padding i want to
55:43 - go with 10 for the vertical i want to go
55:46 - with 20.
55:47 - and with that
55:48 - we have some more space between our
55:50 - output text and the rest of the buttons
55:53 - and i guess just to emphasize what's
55:55 - happening here
55:56 - let's set this to 200 and now we can
55:59 - really see what's going on
56:01 - and i guess now since we are still
56:03 - talking about styling we could talk
56:06 - about how to dynamically update this
56:09 - layout here to set a different theme and
56:12 - for that to work we need to make a
56:14 - couple of changes but let me generally
56:16 - talk about what we are going to do
56:19 - this window here
56:20 - we want to close when we choose a
56:23 - different theme and then recreate a new
56:25 - window with a new theme
56:27 - essentially what i want to do is to
56:29 - create a function let's call this one
56:32 - create
56:33 - window
56:34 - and when we create this
56:37 - the user should pass in a theme
56:41 - inside of this function
56:44 - we are
56:45 - doing all of this here so let me indent
56:48 - it all by one line
56:50 - for the theme
56:51 - we don't choose light gray one we just
56:54 - choose whatever theme was passed into
56:56 - this function now site options still
56:59 - works button size and layout are all
57:01 - still fine
57:02 - at the end
57:04 - i want to return sg window
57:08 - and now i can just copy
57:10 - the arguments we already have down here
57:14 - and this puts my entire window inside of
57:16 - one function
57:18 - what this allows me to do is call
57:21 - create window
57:22 - and the theme i had so far was called
57:24 - light
57:25 - gray
57:26 - one
57:27 - so now we should be seeing the same
57:29 - outcome and if i run this we do there's
57:32 - no change in terms of functionality so
57:34 - far
57:35 - but what i can do now is just pass in a
57:38 - different string in here let's say dark
57:41 - and now we get different kinds of
57:42 - windows
57:44 - so now what we want to implement is a
57:46 - menu where we can pick from different
57:48 - options and once we are clicking on
57:50 - these options we want to create a new
57:52 - window with a different theme
57:55 - and i guess for that we first of all
57:57 - have to implement a menu
57:59 - first of all i am going to need some
58:02 - options here so let me add a variable
58:05 - that i called theme menu
58:07 - and we need a specific format here we
58:10 - first need one string and that's
58:12 - basically the name of the menu let's
58:14 - call this one menu
58:16 - and for the second argument we need
58:19 - another list and this one should contain
58:22 - all of our options for this menu
58:24 - in my case that list is going to look
58:28 - like let me copy it
58:30 - it looks like this we have a list with
58:32 - light gray 1 dark dark gray 8 and random
58:37 - which means we would have four different
58:39 - options for this menu
58:41 - and i guess let me put all the arguments
58:43 - for a text element on separate lines so
58:46 - it's a bit easier to read
58:48 - this
58:49 - is much better
58:52 - essentially what i want to do is to add
58:54 - another argument in here and the
58:56 - argument i want is write underscore
58:59 - click underscore menu
59:01 - and in here i just want to add my theme
59:04 - menu
59:06 - and now if i run all of this again we
59:08 - can't really see a difference but if i
59:10 - right click on the text
59:12 - now we can see the menu
59:14 - and right now nothing is really
59:16 - happening if i click on any of the
59:17 - options
59:19 - essentially what is going to happen is
59:22 - that each of these elements are
59:24 - effectively a button so if we click on
59:26 - any of them an event with their name is
59:29 - going to be called
59:31 - if the event is in
59:33 - [Music]
59:35 - this
59:37 - list here
59:40 - so what i want to look for is if the
59:42 - event is in theme menu with the index 1
59:48 - which is just going to be another list
59:50 - with some strings
59:52 - and now if that is the case let's just
59:54 - print event and let's see what we get
59:58 - i can right click
60:00 - and if i click on light gray one we get
60:02 - light gray one we get dark dark gray
60:05 - eight and we get random
60:07 - we essentially just get a string
60:09 - returned
60:10 - and now all we really have to do
60:13 - is to close our current window which we
60:16 - do with window.close
60:19 - right now if i just clicked on any of
60:20 - this
60:22 - we would end the application
60:24 - but now what we can do is to just create
60:26 - a new window and this happens with
60:29 - create window and now we can just pass
60:31 - in the event we just got which is going
60:34 - to be a valid theme for another name
60:36 - and now
60:38 - if i try this again
60:39 - we get different themes and if i click
60:42 - on random
60:44 - essentially what is happening is that
60:46 - random isn't a valid name for theme so
60:48 - python begui is giving us a random theme
60:51 - as a consequence
60:54 - i guess a little bit of a hack but it
60:56 - well it does work for now
60:59 - and all right with that we have all of
61:02 - the styling at the layout so now we can
61:04 - actually start working on the calculator
61:06 - itself
61:07 - and let's just go through this one by
61:09 - one and let me minimize the theming so
61:12 - we have a bit more space
61:14 - first of all i want to check if any of
61:17 - the numbers were pressed so i want to
61:19 - check if the event is in
61:22 - and in here we need all the numbers from
61:24 - 0 to 9 and the period let me just copy
61:27 - it so i save me some writing
61:30 - if that is the case i want to print the
61:32 - event
61:33 - so now if i run this again i can click
61:36 - on the various button fields and i
61:39 - always get the right number
61:42 - now besides that i also want to check if
61:44 - the event is inside of the operator keys
61:48 - and this is just going to be another
61:50 - list of strings that is looking like
61:53 - this
61:54 - and if that is the case let's print the
61:57 - event for this one so now i also get
61:59 - multiplication division minus and plus
62:03 - the two other buttons that we have is if
62:05 - event is equal to enter
62:08 - and then i want to print the event again
62:11 - and finally the last button is if event
62:15 - is equal to clear
62:17 - and if that is the case let's print the
62:19 - event as well
62:20 - right so now let's try all of this we
62:23 - have clear we have enter and we have all
62:26 - of the other buttons
62:28 - so with that
62:30 - we can check for different inputs
62:33 - and now let's start working on the first
62:35 - problem so let me run this again and
62:38 - let's say i'm pressing 7 and 8.
62:41 - i can individually print these two
62:44 - numbers
62:45 - but what i actually want to do is to
62:47 - have the output 78 so how can i combine
62:51 - these two numbers into a single string
62:53 - and in my case
62:55 - what i have done let me close this
62:58 - i have created another list and this one
63:01 - i called current
63:03 - num
63:05 - and for now it's just an empty list
63:08 - and essentially what we are doing if we
63:10 - are pressing any button i want to get my
63:12 - current number and append whatever event
63:16 - we get any of these numbers or the
63:18 - period
63:19 - and this number i can turn into a string
63:22 - so let's call it num string
63:25 - and all i really need in here is a
63:28 - string and the join method and then here
63:31 - i want to pass in my current number
63:34 - so if i print this num string and run
63:37 - this again
63:38 - i can click on 7 and 8 and 5 and we
63:42 - always get a longer number so now we are
63:45 - making longer numbers all we have to do
63:47 - now is to actually change the text
63:49 - and for that to work i actually have to
63:51 - reopen my create window method
63:54 - because in here we have to set some keys
63:58 - most importantly the text is going to
64:00 - need a key
64:01 - and the key i gave it
64:04 - is just going to be text and if you
64:07 - wanted to be more thorough you could set
64:09 - keys for all the other elements as well
64:11 - but in my case we don't really need it
64:15 - so all right now what i want to do
64:18 - instead of just printing this string i
64:20 - want to get my window
64:22 - and i want to look at my
64:25 - text
64:26 - and in here i want to update whatever
64:29 - information we have with the num
64:31 - string
64:33 - and now let's try this again
64:35 - and i get some output
64:38 - this is
64:39 - already working really nicely
64:41 - we have to work on the operators
64:43 - and for those to work i have created
64:45 - another list and this i call full
64:48 - operation
64:49 - and this is also going to be a list
64:52 - and now
64:53 - whenever we press a button
64:55 - i want to get my full operation and
64:58 - depend what is currently in the current
65:01 - number
65:02 - and this should be appended as a string
65:04 - so let me copy it from
65:06 - the num string and i just want to append
65:09 - this number
65:10 - and then i also want to get my current
65:12 - number and empty whatever is in there
65:16 - finally i want to get my full operation
65:18 - and append the event any of these
65:21 - strings here
65:23 - and once we have done that let's just
65:26 - print what we get for full operation
65:29 - so now i can click on seven at eight
65:31 - and on a plus and now on a free and
65:35 - whatever numbers we have another plus
65:37 - let's say another minus i guess this one
65:39 - doesn't work perfectly but you get the
65:41 - idea
65:43 - we have a string we have an operator we
65:45 - have another string that is a number
65:47 - another operator and so on although
65:49 - there's one thing i forgot that after we
65:52 - click an operator i want to empty the
65:54 - text field
65:56 - so let me copy it from here and i just
65:59 - want to pass in an empty string for the
66:02 - output field and now all we have to do
66:05 - for the enter button
66:07 - is that
66:10 - i first of all want to get the full
66:12 - operation and append
66:15 - what is currently in my current number
66:18 - so let me copy it from there
66:21 - and in there why have we done this let's
66:24 - say we are pressing 78
66:27 - and then minus
66:28 - 10
66:30 - and now if i press enter i want this 10
66:33 - to be added to my full operation so if i
66:35 - click on enter something is happening
66:37 - and now what is making all of this work
66:40 - is the eval function it comes with
66:42 - python
66:43 - and all this really wants is a string
66:46 - with map operations inside so for
66:49 - example what we could pass inside of
66:51 - here is two plus two and obviously we
66:54 - have to print
66:56 - whatever we get
66:58 - so if i run this we are getting four
67:01 - python calculates this string for us
67:04 - this we can use and store it in a result
67:09 - and what we want to evaluate is our full
67:12 - operation although we do have to turn it
67:15 - into a string
67:17 - so essentially what i want to do
67:19 - is get a string
67:22 - and join
67:23 - my full operation into the string and
67:27 - now all i have to do is to get my window
67:30 - and the text element again
67:32 - update this and pass in the result
67:36 - if i type 5 multiplied by 6 i click on
67:39 - enter and we are getting the result this
67:41 - is working just fine
67:43 - besides that what we have to do is i
67:45 - want to empty
67:47 - full operation so if we click on
67:49 - anything else we're not getting some
67:51 - weird results
67:52 - and we are actually almost done the last
67:56 - thing we have to do
67:58 - is to implement functionality for the
68:00 - clear button and this i think could
68:02 - become a good challenge for you try to
68:04 - figure this one out for yourself if we
68:06 - are clicking on the clear button
68:08 - all the input disappears and we are
68:10 - essentially starting from scratch again
68:14 - current number
68:15 - set it to an empty list
68:17 - and i want to get my full operation
68:19 - and this one should also be an empty
68:21 - list
68:23 - and finally
68:24 - i want to get my window text let me copy
68:27 - it from here
68:28 - and set this to an empty string
68:31 - i can have any kind of operation in here
68:35 - and if i cleared we are starting from
68:37 - scratch
68:39 - and with that we are done oh i guess the
68:43 - one last thing i want to change is this
68:45 - output by default should be empty
68:48 - and that is happening inside of here let
68:52 - me empty it
68:53 - and now we are starting properly
68:56 - and with that we have a working
68:59 - calculator
69:00 - now obviously this isn't working
69:02 - perfectly yet and there are a few bugs
69:04 - but i'm not so concerned about that
69:06 - with that we have a calculator
69:10 - and with that let's start working on the
69:13 - stopwatch and the stopwatch is going to
69:16 - look something like this
69:18 - we have a fairly customized window and
69:21 - if i click on start we get a stopwatch i
69:24 - can also take a lab
69:26 - and we get information about the time
69:29 - and now if i click on stop we can reset
69:32 - the entire thing and start again
69:35 - and that's just about it it's not really
69:37 - complicated it's mostly about styling
69:39 - and a few more smaller things
69:42 - let's implement this thing
69:44 - here we have the basic skeleton setup
69:46 - again if i run all of this we can see
69:49 - the plane window
69:51 - first of all again
69:53 - we have to create a couple of elements
69:56 - let me put them over several lines
69:58 - and at the minimum we are going to need
70:00 - two rows one with the time and one with
70:03 - the buttons so sg text and in here let's
70:07 - say time for now but we're going to
70:10 - change this later quite a bit
70:12 - and besides that i want to have another
70:15 - row so another list and then here i want
70:17 - to have a button
70:19 - that is saying start
70:21 - and besides that i want to have another
70:24 - sg button
70:26 - that is going to say lab and if i run
70:29 - this now we have a super simple timer
70:32 - layout obviously doesn't look very good
70:35 - so we have to work quite a bit more in
70:37 - the customization here
70:40 - and first of all when we are creating
70:42 - this window i can pass in a few more
70:44 - arguments let me put all of this on
70:47 - separate lines as well
70:49 - and in here one argument we can pass in
70:52 - is the size
70:54 - and this one's a tuple with the width
70:56 - and the height and those are numbers in
70:58 - pixels so my case i want the window to
71:01 - be 300 by 300 pixels
71:05 - and now we have a much larger window
71:08 - what i can also set is no title bar
71:13 - and put this as true although do not run
71:17 - the app yet because you wouldn't be able
71:19 - to close it so in our case
71:22 - i want for now to use the start button
71:25 - to close the entire app
71:27 - which basically means if the event is
71:31 - in the list of sg closed
71:35 - or
71:36 - start
71:38 - so now if i run this we have a much
71:41 - cleaner looking setup and if i click on
71:43 - start we are closing the entire thing
71:46 - the window element has even more options
71:49 - you can play around with but in my case
71:51 - i'm happy with those
71:53 - besides that we can also use a theme to
71:55 - customize things a bit more
71:58 - all the way at the top i want to call sg
72:01 - theme
72:02 - and i want to pass in black in here
72:05 - and now if i run this we get a much
72:08 - better looking setup
72:09 - although now we do have a very obvious
72:12 - problem that
72:14 - this stuff here should be more in the
72:17 - center so i want this roughly to be here
72:20 - and for that we need a couple of things
72:24 - first of all
72:25 - in the element
72:27 - i can set what is called element
72:31 - underscore
72:32 - justification
72:34 - and in here the default is left
72:37 - if i set this to right
72:39 - we have all of our elements on the right
72:42 - and besides that
72:43 - we can add center
72:46 - and now all of this is in the center
72:49 - now how can we center all of this on the
72:51 - vertical axis and for that we need two
72:55 - more elements we have kind of already
72:57 - seen what to do
72:59 - so let me add another list and what i
73:02 - would like to add in here is s g and v
73:05 - push
73:06 - short for vertical push
73:08 - and what this element essentially does
73:11 - is it takes as much vertical space as it
73:13 - can
73:14 - until it finds another element
73:17 - so this we push here is this entire
73:20 - thing
73:22 - but now all of our elements are at the
73:24 - bottom which also doesn't help us very
73:27 - much
73:28 - so what we have to do now is copy this
73:31 - we push element again
73:32 - paste it at the end and now
73:35 - this is in the middle we have one v push
73:39 - element here
73:40 - and one v push element here and they are
73:44 - aware of the other elements so if
73:46 - there's something in the way they only
73:48 - push all the way up to here and from
73:51 - here to here
73:53 - there's one more thing that i would like
73:55 - to add and that is an x in the top right
73:58 - so roughly here that is closing the
74:00 - application
74:02 - and for that we are going to need an
74:04 - image
74:06 - or well we need an image and we need an
74:08 - image element
74:09 - and well let's just add it
74:12 - all the way at the top i want to add
74:14 - another row
74:15 - and what i want to pass in here is sg
74:18 - dot
74:19 - image
74:21 - and in here we just want to have a path
74:23 - to an image in my case in the same
74:26 - folder where my file is there's also an
74:28 - image
74:29 - if i open the folder we have stopwatch
74:32 - and we have cross
74:34 - and this cross i want to import all i
74:37 - need is cross dot
74:39 - p and g
74:42 - and if i run this now we can see the
74:44 - small cross all the way at the top
74:47 - the issue now is that this is centered
74:50 - in the middle whereas i want to have it
74:52 - in the top right
74:54 - and the way to fix that is well it could
74:57 - actually be a good challenge for you so
74:59 - try to place this image in the top right
75:02 - and see if you can figure this one out
75:08 - essentially all we have to do is sg and
75:12 - push
75:14 - and now
75:16 - the cross is in the top right
75:19 - i guess another thing that we could be
75:21 - doing
75:22 - is
75:23 - if this image has any kind of padding so
75:26 - pad and you could set this to zero
75:30 - and now we have removed a tiny bit of
75:32 - space i think
75:35 - now i actually want to use this image as
75:37 - a button and this could actually be a
75:39 - better challenge so turn this image into
75:42 - a button like we have done with the text
75:44 - a while back
75:46 - and this button should then close the
75:49 - entire window so see if you can figure
75:51 - this one out
75:54 - all we need is to first of all enable
75:57 - events and set this to true
76:00 - and besides that we also need a key
76:03 - and the key for this one i want to set
76:06 - as close
76:08 - and now i want to check if the event is
76:11 - in when closed or in
76:14 - close
76:17 - and now let's try this if i click on the
76:19 - x
76:20 - the window disappears
76:22 - so with that we have a reasonable setup
76:25 - one additional thing is the button color
76:28 - so these two buttons right now i want to
76:31 - customize a tiny bit more
76:34 - and i guess the text could also be
76:36 - customized let's start on the text
76:38 - actually
76:39 - and here the only thing i want to set is
76:41 - the font
76:42 - in my case i want to go with the font
76:45 - young
76:46 - 50.
76:47 - if i run this again
76:48 - now we have a much larger text
76:51 - although i think young as a font is not
76:55 - pre-installed on most computers
76:58 - you can get it from this website here it
77:00 - is 100 free you don't have to pay
77:02 - anything you can just download it and
77:04 - you're good to go
77:06 - but if you couldn't be asked literally
77:08 - any other font would work in here
77:11 - now besides that i also want to work on
77:13 - the buttons and in here i want to change
77:16 - two attributes the first one is the
77:18 - button
77:20 - color
77:21 - and in here we need a hexa decimal color
77:24 - value this one always starts with a
77:26 - hashtag
77:27 - and now we need the amount of red the
77:29 - amount of green and the amount of blue
77:32 - and each of those would be two values
77:35 - and the scaling here goes from zero to f
77:37 - so it's zero to nine and then we have a
77:40 - b c d e and f so f and f would be the
77:43 - highest value and 0 and 0 would be the
77:46 - lowest value if i just set f and f for
77:49 - red and 0 for everything else
77:52 - we would have a red button
77:54 - and we do this is looking nice and i
77:58 - want to do the same thing for the other
78:00 - button so we have a bit of consistency
78:05 - and now we have two red buttons
78:09 - and besides that i don't really like
78:12 - this slight bevel around the button so
78:15 - the white line in the top left
78:18 - and this you can get rid of
78:20 - by just setting the border
78:23 - with
78:25 - to zero
78:26 - and now if i run this again
78:28 - this thing disappeared and this i want
78:31 - to do for both buttons
78:33 - so let me paste it in here and this is
78:35 - looking significantly cleaner
78:37 - and now the last thing i want to work on
78:39 - is if i click on the button by default
78:42 - it's going to be black which well isn't
78:45 - ideal
78:46 - so what i want to do if we are pressing
78:48 - the button it should turn white
78:51 - and for that we need the button color
78:53 - again what we have to do
78:56 - is give this button color a tuple
78:59 - and in here let me copy this one
79:02 - and paste it in twice
79:04 - and now if i change the first one to all
79:07 - f's so this one would be a white color
79:10 - if i run this again
79:11 - and if i click on the button
79:13 - now we get a white background and we
79:15 - also get white text which is what i want
79:18 - that i can just copy this entire thing
79:20 - again and change the button color here
79:22 - as well
79:24 - and now if i run this
79:26 - we get
79:27 - some much nicer looking gui i guess this
79:29 - is getting a bit hard to read let's put
79:32 - all of this over several lines
79:34 - and that is much better let's start
79:38 - working on the actual timer
79:41 - and for that we are going to need
79:42 - another module and that is from time
79:46 - import time
79:48 - and all that time does is it shows us
79:51 - the current time
79:52 - or more specifically it shows us the
79:54 - seconds that have passed since 1970 i
79:57 - think it doesn't really matter what it
79:59 - is i'll show you in a second how it
80:00 - works let me minimize all the other
80:03 - elements so we have a bit more space
80:06 - although before we start actually
80:07 - working on this i want to give every
80:10 - element we work with a proper key so
80:12 - things are a bit cleaner now first of
80:16 - all for the text this one should have a
80:19 - key
80:19 - that i have called
80:22 - the
80:23 - time
80:25 - and don't forget the dashes there we go
80:28 - now the start button should have a key
80:31 - that i have called start stop because
80:35 - that's the function of the button that's
80:37 - going to come in just a second
80:39 - and finally
80:41 - we have the lab button and this one i
80:44 - just called lab
80:47 - now we can actually work with this so
80:49 - let me minimize them
80:52 - and now in my event loop i have to check
80:55 - for some events first of all i want to
80:58 - check if event
81:00 - is equal to start stop
81:03 - and if that is the case let me just
81:06 - print time and let's see what we get
81:10 - so if i click on start we get a very
81:13 - long number and if i click multiple
81:15 - times this number is increasing by a
81:18 - very small amount so i think these are
81:21 - the seconds since 1970
81:23 - and these are the milliseconds
81:26 - it is a very precise timer
81:29 - now the actual numbers we don't care
81:32 - about all we care about is the time we
81:34 - are pressing the button and then the
81:35 - time that has passed since then
81:38 - so i want to create another variable
81:41 - that i called start time
81:44 - and this by default is going to be zero
81:47 - and if i click on the start button
81:50 - this start time
81:51 - should be our current time
81:54 - and now that we're here i want to set
81:56 - the timer to active so i want to add
81:59 - another variable let's call it active by
82:01 - default this one is going to be false
82:04 - and once we are clicking on the start
82:06 - button
82:07 - i want to set active to true
82:12 - and now after this button i want to
82:14 - check if active
82:17 - and if that is the case
82:19 - i can get my elapsed time
82:22 - and this i get with my current time
82:25 - minus my start time
82:29 - time here is always the current time and
82:32 - start time is whenever we click the
82:35 - button
82:36 - now this number is going to show us a
82:38 - ton of milliseconds which i don't care
82:40 - about so i want to round this
82:43 - with one number after the decimal point
82:46 - i can get my window and the
82:50 - time i think i called it
82:53 - and i can update this to my elapsed time
82:57 - and if i run this now
82:59 - i can click on start and nothing is
83:01 - happening
83:03 - and if i click on start again we get 0
83:06 - and 0 but if i click on lab we get 1 1.9
83:09 - 2.6 and now it's increasing
83:12 - what is happening here
83:14 - and this is actually the problem we have
83:16 - seen very early on and it's this line
83:20 - here
83:21 - python by gui is waiting for anything in
83:25 - the app to happen
83:26 - so we only get past this read method if
83:30 - some kind of button is being pressed
83:32 - and in our case we can only press the
83:35 - start button so this one here
83:37 - or the lab button which we don't have in
83:39 - here right now
83:41 - now if we are clicking the start button
83:43 - we will set the start time to zero and
83:47 - then we are checking the elapsed time
83:49 - and then we are returning to this
83:51 - and not doing anything so we remain at
83:54 - zero and zero
83:55 - but if we are pressing the labs button
83:58 - then
83:59 - we don't call this event here so then we
84:03 - actually get a proper time so then this
84:05 - one is working
84:08 - but obviously we can't have a timer that
84:10 - only works if we press a button
84:12 - essentially what we want is that this
84:14 - read method here times out after a
84:17 - couple of milliseconds and for that
84:19 - purpose the read method literally has a
84:22 - timeout method
84:24 - and in here you can set the milliseconds
84:26 - after it should timeout in my case i
84:29 - want 10. so now if i run this again
84:32 - i can click on start and now we have a
84:34 - timer
84:38 - and i guess now let me run it again
84:42 - if i click on start and the timer is
84:45 - running but if i now click on start we
84:47 - are starting again from zero and if i
84:49 - click on lab not much is happening at
84:51 - all so we have to work on these two
84:53 - buttons
84:55 - all of that
84:56 - is going to happen inside of this while
84:59 - true loop
85:00 - in here first of all let's update the
85:02 - start and the lab button once we
85:04 - actually start the timer what i want to
85:06 - do is to get my window
85:08 - and i want to have my start stop button
85:13 - and i want to update the text to stop
85:17 - this scenario here let's say right now
85:19 - this is active
85:21 - and now i can copy this and i want to
85:24 - get my lab
85:25 - for this one
85:27 - i only want to make this button visible
85:30 - once the timer is active so now visible
85:34 - should be true and by default so when i
85:37 - create the layout
85:39 - this button here should be invisible
85:43 - i want to set visible to
85:45 - false
85:47 - and now if i run this
85:49 - we can only see the start button if i
85:51 - click on start we can see the lab button
85:52 - and now the start button became stop
85:55 - but if i click on stop well we start
85:58 - again but we don't really stop so we
86:00 - have to work on that one
86:03 - and essentially what that means if i
86:05 - click on this button
86:06 - i first want to check
86:09 - if active is true
86:11 - and if that is the case i want to do
86:14 - something for now it's going to be pass
86:16 - and if that is not the case i want to do
86:19 - something else so in the else statement
86:22 - for now i want to have this
86:24 - code here let me remove the comment it's
86:27 - going to be a bit confusing
86:29 - this code snippet here is going to be
86:31 - from
86:32 - start to
86:34 - active
86:36 - and this snippet here is going to be
86:39 - from active to let's call it stop
86:42 - and all i really want to do in here is
86:44 - set active to false
86:48 - and now i have to update the buttons
86:50 - themselves let me copy them from here
86:53 - i want to set my start stop button to
86:55 - reset
86:58 - and the lab button should become
87:00 - invisible again
87:02 - and let's run this now i can see a start
87:05 - button if i click on it now it's stop
87:07 - and lab and if i click on stop the timer
87:09 - actually stops and now our button says
87:11 - reset
87:12 - and if i click on reset we start again
87:15 - from zero although we do have to work
87:17 - with this a tiny bit more
87:19 - but for now this isn't all that bad
87:23 - there's one more thing that i would like
87:24 - to check for and that happens inside of
87:26 - this else statement
87:28 - so we already have from start to active
87:32 - besides that i also want to check from
87:35 - stop
87:36 - to
87:37 - reset
87:38 - let's say the scenario is my clock is
87:41 - active so we are in here and i click on
87:43 - stop
87:44 - now we are here that my button is
87:47 - stopped and we want to reset it right
87:49 - now this thing is happening here but i
87:51 - do want to have a bit more control
87:54 - and essentially what we have to do is
87:56 - figure out how to separate these
87:59 - different states
88:00 - and the easiest way to do that is to add
88:03 - another if statement if the start time
88:06 - is greater than 0
88:08 - we know we already used the timer once
88:12 - but if that is not the case so else
88:15 - then we are starting from scratch
88:18 - here we can add some code that we have a
88:21 - timer that we stopped and now we want to
88:23 - do something else
88:24 - and what i want to do in here is to
88:29 - close the entire window
88:32 - and then i want to window and create
88:36 - a new window that's going to be very
88:38 - similar compared to the function we
88:39 - created in the last video and then again
88:42 - i want to set the start time
88:45 - back to zero
88:46 - now
88:48 - we for now at least didn't necessarily
88:51 - need to close the window and create a
88:52 - whole new one
88:54 - but we are going to make some changes in
88:56 - just a second for the lab button that
88:58 - does necessitate this sort of change
89:00 - so we want to create a function that
89:03 - creates a whole new window let's do it
89:05 - all the way to the top
89:07 - all i really want in here is define
89:09 - create window there are no arguments we
89:12 - need
89:13 - and basically all i want
89:16 - is to indent all of this once paste it
89:18 - in here
89:20 - and then at the end of this
89:22 - i want to return
89:24 - this sg window
89:28 - so let me cut it all out paste it in
89:30 - here
89:31 - indent things properly
89:34 - and now window is going to be create
89:37 - window
89:38 - and let's try it still works i can click
89:41 - on start and now if i click on stop and
89:44 - reset we get a whole new window
89:47 - that way whatever we created earlier is
89:50 - going to disappear
89:52 - now there is one more thing that we need
89:55 - let me actually run it again and that is
89:57 - the lab button
89:59 - if i click on lab i want to have some
90:01 - text below the stopwatch that says what
90:04 - lab i'm currently on and what the time
90:06 - is
90:08 - and for that
90:09 - we need to learn about a new method that
90:12 - is kind of important
90:14 - and i think if we implement this
90:15 - straight away
90:17 - let me first check for if event
90:20 - is equal to
90:22 - lab
90:23 - and in here what i want to do i want to
90:26 - get my window and i want to extend
90:30 - the layout
90:32 - and basically what that means is that we
90:34 - are adding another element to our
90:36 - currently existing layout like some text
90:39 - for our current lab
90:42 - and in here
90:43 - we need a container and we need an
90:47 - element
90:49 - for now the container is going to be the
90:51 - window itself
90:53 - and the element we want is going to be
90:55 - sg.text
90:58 - let's just say test
91:00 - although if i run this
91:03 - and click on lab python by gui is going
91:05 - to complain that this text object is not
91:08 - iterable what it wants is to put all of
91:11 - this inside of a nested list
91:15 - and now let's try this again i can click
91:17 - on start i can click on lab and now we
91:20 - can see test
91:22 - and now this is where we are recreating
91:24 - the entire window so if i click on stop
91:27 - we still have all of these labs open but
91:30 - now if i click on reset they all
91:32 - disappear because we are creating a
91:34 - whole new window
91:35 - and this is what these lines here were
91:38 - for
91:39 - but now we have a problem that
91:42 - all of these text elements are not
91:44 - centered
91:45 - the reason is that when we are creating
91:48 - in our window this element justification
91:52 - it only works for the elements we
91:54 - already have so all of these
91:57 - but if we add any other element after
91:59 - that that element is going to have the
92:01 - default element justification which is
92:04 - going to be left and to fix this we are
92:07 - going to need another element
92:09 - and let me add it straight in here
92:11 - what we need is called sg
92:13 - column
92:16 - and this is an element you cannot
92:18 - actually see it just organizes other
92:20 - elements it essentially places them
92:23 - inside of a column
92:25 - and by default this one
92:28 - needs a nested list again
92:30 - what we could for example do
92:32 - is add sg text
92:34 - and this would be row one
92:37 - and now on the next list
92:41 - we could add another element let's say
92:43 - sg text again and row 2.
92:47 - so if i run the code now we can see two
92:49 - rows
92:51 - and those two text elements are inside
92:54 - of one
92:55 - element essentially the column here is
92:58 - justified to the center but the rows
93:00 - inside of it are just free-flowing
93:03 - and what we are going to do is we are
93:06 - going to add elements dynamically to
93:08 - this column
93:10 - while the app is running
93:12 - and for that it first of all needs to
93:14 - get a key
93:16 - and the key i want to give it is going
93:18 - to be
93:19 - let's call it
93:21 - labs
93:23 - so now all i want to do
93:25 - all the way at the bottom
93:26 - instead of the window
93:28 - i want to target my window
93:31 - and in here i want to have my
93:35 - labs
93:37 - and now i am just going to add some text
93:40 - to it but let's try this so if i click
93:42 - on start now i have my lab and now the
93:45 - lab is properly centered
93:48 - and the format i wanted here should look
93:50 - something like this i want my lab amount
93:53 - let's say a one then i want a divider
93:56 - and then i want the time so let's say
93:57 - 0.7 or whatever every time we add
94:00 - elements this should be one row with
94:03 - three different elements
94:05 - we have let's say a one for now then i
94:08 - want to add another element and that is
94:11 - going to be sg and v
94:14 - separator
94:15 - and that you're going to see in a second
94:17 - what this one does
94:19 - and after that i want to copy my text
94:21 - again
94:22 - and this one should just say the time
94:26 - if i run this now i click on start and
94:28 - lab and the v separator is just a
94:31 - straight line
94:32 - and now we have a lab on the left and a
94:34 - time on the right so we just have to
94:36 - make this a bit more flexible
94:39 - let's start with the actual lab number
94:42 - in here
94:45 - after we are creating the window
94:47 - i want to add another variable let's
94:49 - call it lab amount
94:52 - and by default this is going to be one
94:57 - and now
94:58 - when we are creating the text down here
95:00 - this is going to get the lab amount
95:03 - and after we are doing this lab amount
95:07 - plus equal 1.
95:09 - now if i run this again
95:11 - i can have lab amounts that update and
95:14 - this is working just fine
95:16 - and next up i need the proper current
95:20 - time
95:22 - and for that instead of adding the time
95:24 - in here i want to get my elapsed time
95:27 - and now
95:29 - i can run this again i can click on lab
95:32 - and we get the elapsed time
95:34 - i can click on stop and reset and we are
95:37 - back to the start
95:39 - i guess one more thing that we do have
95:40 - to do is in here
95:43 - when we are restarting the window
95:46 - i want to set the lab amount back to 1.
95:50 - and the final thing for this one when
95:52 - the app is starting it shouldn't say
95:54 - time it should just be empty
95:57 - so now i think we are done let's run
96:00 - this again we just have to start button
96:03 - if i click on it we get the time i can
96:05 - click on the lab this is working fine as
96:08 - well and if i stop we have the time
96:11 - i can click on reset and we're good to
96:13 - go cool so with that we have a stopwatch
96:17 - and next up let's create a text editor
96:20 - and this one is going to look something
96:22 - like this we have
96:24 - a menu where we can open save and exit
96:26 - we can check the word count and we can
96:29 - add smileys
96:30 - and then we have a big field where we
96:34 - can type in random words
96:37 - and this works over multiple lines as
96:40 - well
96:41 - and if you add a smiley let's say this
96:45 - one
96:45 - it well has a smiley a fairly simple
96:48 - text editor and the really interesting
96:50 - one about it is i can click on save and
96:54 - now i can save the file let's save it as
96:57 - test
96:58 - now what i can do is get rid of all of
97:00 - this and open a file and in here i have
97:04 - the test i just saved and if i open this
97:07 - one we have the text we just typed back
97:10 - so an actually working text editor
97:14 - and i guess you can also check the word
97:15 - count it's fairly straightforward
97:18 - let's implement it and here again we
97:22 - have our skeleton app if i run this we
97:25 - can see the basic thing we always get at
97:27 - the start
97:28 - and first of all in here
97:31 - i need to create a layout let me put it
97:33 - again on multiple lines so it's easier
97:35 - to read
97:36 - and in here we are going to see two more
97:39 - elements the first one is called sg and
97:42 - menu
97:43 - in here we need some kind of menu layout
97:46 - as an argument that is not how you spell
97:48 - that i'm going to create that in just a
97:50 - second but now let me add the other
97:52 - elements first
97:54 - besides that
97:55 - i want to have a simple sg and text
97:58 - element that by default is going to say
98:01 - untitled
98:04 - and let's capitalize it this later on is
98:07 - going to be the document name
98:09 - as a matter of fact let's give it a key
98:11 - straight away and let's call this one
98:14 - dog name
98:17 - and finally we need one more element and
98:20 - that is called sg
98:22 - multi
98:23 - line
98:24 - which is a multiline input element and
98:27 - for now let me comment out the menu so
98:30 - we don't get an error and if i run this
98:32 - we have some text element and we have
98:34 - some input element that we can type in
98:37 - now for the menu we are going to need
98:39 - another variable and this one i called
98:41 - menu layout
98:43 - and in here we need one list first of
98:47 - all
98:47 - and then inside of this list we need
98:50 - more nested lists each of those lists is
98:53 - going to be very similar compared to the
98:55 - right click menu we created earlier so
98:57 - we first of all need the name of the
98:59 - entire menu let's call this one file
99:02 - and the second element inside of the
99:04 - list
99:05 - should be another list and in here is
99:08 - the content of this file menu what i
99:12 - have put in here is going to be a list
99:15 - with
99:16 - these elements here we have open save a
99:19 - divider and exit
99:21 - now we have a menu at the top and we
99:24 - have file and if i click on it we have
99:26 - open save and exit with a divider
99:29 - between save and exit and this is what
99:31 - we get with three dashes
99:34 - now besides that i want to have a few
99:36 - more elements
99:38 - let me just copy them
99:40 - so we have tools and this one only has
99:43 - one sub menu it's called word count and
99:46 - add is going to have smileys now what is
99:49 - smileys and well smileys is going to be
99:52 - another variable smileys
99:55 - it's going to look like this
99:58 - and let me put it
100:00 - over a couple of lines so it's easier to
100:03 - read
100:05 - what we have in here is again one list
100:08 - but inside of this list we have a string
100:12 - then we have a list
100:13 - then we have another string another list
100:15 - another string and another list first
100:18 - string is always the title for the
100:21 - subsequent menu so happy is going to be
100:24 - a title for all of these elements set is
100:27 - going to be a title for all of these
100:28 - elements
100:30 - and if i run this it should make more
100:32 - sense so now tools we have word count
100:34 - but in add we have happy
100:37 - we have set and we have other
100:39 - this is what i think one of the
100:41 - limitations of pi simple gui that the
100:44 - entire framework
100:46 - really likes to have a list with a list
100:49 - inside and this list contains other
100:50 - lists it's more or less a russian
100:52 - nesting doll composed of different lists
100:55 - which can be very confusing to work with
100:58 - so i feel like all of this could be
101:00 - simplified quite a bit by using
101:02 - dictionaries if you work with this
101:04 - yourself be ready you have to create a
101:07 - lot of different lists
101:09 - now how can we work with these lists and
101:11 - here the same system applies that we
101:14 - have seen earlier each of these strings
101:16 - is going to be a button all we have to
101:18 - check for is the name for each of these
101:22 - word count should be the easiest so
101:25 - i want to check if event is going to be
101:29 - word
101:30 - count
101:31 - and if that is the case let's say print
101:33 - for now test
101:35 - we have tools i check word count and we
101:38 - get test
101:40 - for this to work properly especially for
101:42 - the smileys
101:43 - we ideally want a list with all of these
101:47 - buttons here so we don't care about
101:49 - happy set or other we just care about
101:51 - these lists here
101:54 - i created another list that i called
101:56 - smiley events
101:58 - and all this really does is i get
102:01 - smileys
102:03 - with the first index
102:05 - that is this one here
102:08 - and then i had smileys with the third
102:11 - index and smileys with the fifth index
102:16 - smiley's three is this list here
102:20 - and smiley's five is this list at the
102:23 - end
102:25 - i guess you could make this a bit more
102:26 - flexible but since this is such a simple
102:29 - app i didn't really care so much
102:31 - let me minimize these things because
102:34 - they are taking up a ton of space
102:37 - before we start i really want to set the
102:40 - styling of this thing to something that
102:41 - looks a little bit better and for that i
102:44 - just need sg theme
102:47 - and in here i want to have the theme
102:49 - gray gray and gray and if i run this we
102:52 - get a very gray theme
102:55 - i also want to change the styling of
102:57 - this multiline element
102:59 - no scroll bar and this should be true
103:03 - and besides that i want to give it a
103:05 - size
103:06 - which in my case should be 40 and 30.
103:10 - so if i run this one now we have a much
103:12 - bigger textbox
103:14 - while we are here let's give this one a
103:17 - key
103:18 - and i call this one text box
103:22 - so now we can minimize the layout and
103:24 - not worry about it anymore
103:26 - now i guess we can start working let's
103:29 - start working on the word count we
103:31 - already have that one
103:33 - and what i want to do in here is to show
103:35 - a pop-up with the amount of words and
103:37 - the amount of characters
103:39 - and for that to work we first of all
103:41 - need a pop-up and this we get very
103:44 - easily all we need is sg and pop-up we
103:48 - are literally creating a new element on
103:50 - the fly
103:51 - and this one only wants a string let's
103:54 - say pop-up in here
103:56 - and now if i run this and i click on
103:59 - word count we get pop-up and if i click
104:01 - on ok it disappears
104:04 - you will see in this part especially
104:06 - that python begui has a couple of
104:08 - elements that are only really supposed
104:10 - to be created for a short while and then
104:13 - they disappear when we are opening and
104:15 - saving files a very similar system is
104:17 - going to be in place
104:19 - but all i want to do in here is to
104:21 - display the amount of words we have and
104:23 - the amount of characters we have for
104:25 - that to work we first of all have to get
104:27 - our full
104:29 - text
104:30 - and the full text we again get from our
104:33 - values and in here i want to look at my
104:36 - text
104:37 - box
104:38 - i guess we haven't used values in quite
104:40 - a while but it's just what's being
104:43 - returned from all the elements that can
104:45 - contain values
104:47 - let's print whatever we get from the
104:49 - values
104:50 - i want to get the full text
104:53 - let's run this and let me type in
104:56 - something random over multiple
104:59 - lines
105:00 - and now if i click on tools and word
105:03 - count we get something random over
105:05 - multiple lines so we're just reading out
105:07 - the values here
105:09 - now how can i get the character count
105:12 - and the word count and let's put this
105:15 - over separate lines
105:17 - first of all i want to get my word count
105:20 - for this one i
105:22 - kind of have a problem let me illustrate
105:24 - so first of all obviously when i count
105:26 - the words i want to ignore all the
105:28 - spaces i want to get my full text and
105:31 - split this one
105:32 - and i want to split this wherever we
105:35 - have a space
105:36 - so now let's just print the word count
105:40 - so i can type something random in here
105:45 - and on my tools i get something random
105:48 - and then a line break and in here we
105:50 - have to get rid of the line break
105:53 - and the easiest way to avoid this is
105:56 - before we are splitting this string i
105:59 - want to run another method that is
106:01 - called replace
106:03 - and let me split it properly
106:05 - and essentially i want to replace a line
106:08 - break
106:10 - with an empty space
106:13 - and this empty space we are then going
106:15 - to get rid with this split line here so
106:18 - now let me try this again
106:20 - we have test one test two and line
106:24 - number three
106:26 - if i run this now
106:28 - all of the elements that are surrounded
106:30 - by spaces are well their own words and
106:33 - well this is looking really good what i
106:36 - want to do i want to rename this word
106:38 - count to clean
106:40 - text
106:42 - and my word count
106:44 - is going to be the length of this clean
106:48 - text
106:50 - and now what i can also do is to get my
106:53 - character count
106:54 - and this one i get with the length of an
106:58 - empty string with join and in here i
107:02 - want to add my clean text
107:05 - and now let's print the word count
107:09 - so i can add test one
107:12 - if i click on word count we get two
107:14 - words
107:16 - and if i instead add the
107:20 - character count in here and run this
107:22 - again so test two
107:24 - [Music]
107:25 - we get five characters this one is
107:27 - working just fine
107:29 - all i have to do now
107:31 - is to add an f string in here that
107:34 - starts with words
107:36 - and in this f string i have my word
107:38 - count
107:40 - afterwards i am adding a line break
107:43 - and then i am adding my characters
107:47 - and in here i am adding my character
107:50 - count
107:51 - so now let's try test number three as
107:54 - separate words
107:56 - and my word count we have two words and
107:58 - five characters and we are done with
108:01 - that we have covered the word count it
108:04 - wasn't actually that bad
108:07 - now next up we can start working on
108:09 - adding the smileys
108:11 - all we really want to do is first of all
108:14 - like we have done with the calculator is
108:16 - check if we have any kind of event that
108:19 - is inside of this list here
108:21 - what that means is if event in smiley
108:25 - events
108:27 - and if that is the case i want to print
108:29 - that event
108:31 - let's try this one now
108:32 - i can click on add let's say other and
108:35 - we get that other smiley
108:37 - and the logic in here is going to be
108:39 - fairly simple now we first of all are
108:41 - going to extract the text from our text
108:43 - box then we are going to add the string
108:45 - for the smiley to it and then we are
108:47 - going to set the text of the text box to
108:49 - our new text
108:51 - and try to implement this one yourself
108:53 - it really shouldn't be all that hard
108:57 - all we have to do is first of all i want
109:00 - to get the current text
109:03 - and this we get with values again and i
109:06 - want to have my
109:08 - text box
109:11 - and now let's print what we get so my
109:13 - current text
109:15 - let's run this so something something
109:17 - something
109:18 - and if i click on any kind of smiley we
109:20 - get the text we have
109:22 - but i don't just want the text we have
109:25 - i want to create a new text
109:28 - and this happens with my current text
109:31 - plus
109:32 - a space
109:33 - and then plus the event so the text of
109:36 - the smiley
109:38 - and finally all we have to do is to get
109:41 - the window and identify the text
109:46 - box element
109:48 - and update this one
109:50 - with the new text
109:52 - and now we are done i can write test
109:57 - something in here and i can add is that
110:00 - smiley and there we go we have a smiley
110:03 - i could add a happy smiley i could add a
110:05 - random smiley they'll work just fine
110:09 - now all we have to do let me add it here
110:13 - is to add if the event is equal to
110:17 - open
110:18 - and for now let me add a pass in here
110:20 - and besides that if the event is safe
110:25 - we want to save and open a file
110:29 - let's start with opening a file that one
110:32 - well they're both very easy but this one
110:34 - should be slightly easier
110:36 - first of all we need some kind of file
110:38 - explorer to find a file and this happens
110:41 - with sg.pop
110:43 - up and get underscore file and in here
110:48 - we are going to need at the very least a
110:50 - name in my case just open this fine now
110:53 - let's run this and if i click on file
110:55 - and open
110:56 - we get another dialog and in here i can
110:59 - browse and right now we are in the file
111:02 - folder i have shown in the introduction
111:05 - and what we have in here is one file
111:07 - called test and if i click on open
111:10 - it returns a path to that file as a
111:13 - string
111:14 - and really all i want to do is to save
111:16 - this as a file path and there's one more
111:21 - thing we can add in here and that is to
111:23 - add one argument that is called no
111:25 - window and that should be true
111:29 - because if we're doing that we are
111:31 - skipping this intermediary dialog so now
111:33 - we go straight to the file explorer and
111:36 - i can click on the file and now this is
111:37 - being returned to file path
111:40 - you probably always want window true to
111:43 - be the case i find this intermediary
111:45 - window kind of useless to be honest but
111:48 - it's entirely up to you now what we want
111:50 - to do if there is a file path
111:54 - then i want to import this file and for
111:57 - that to work we need another module and
112:00 - this one is called from path lib
112:03 - import
112:04 - path
112:06 - and this comes with python you should
112:08 - already have it
112:10 - and now what i want to do is i want to
112:12 - get my file
112:14 - and run path and use the file path here
112:18 - now what can we do with that file and if
112:22 - i print this you're going to see it in a
112:24 - second because this new file
112:27 - has one particular method that is called
112:29 - read.txt
112:32 - and this should be text now let's try
112:34 - this i click on file and open
112:36 - and the test
112:38 - and now we get the text from the file
112:40 - which is type in random words multiple
112:42 - lines and a smiley and this is literally
112:45 - just a string so all we have to do now
112:48 - is to get the window and the text box
112:54 - and update this
112:56 - to whatever we get from file dot read
112:59 - underscore text
113:01 - and we should be done with this one at
113:03 - least so now file and open
113:06 - test
113:07 - and there we go we have loaded a file
113:12 - i guess the next thing i would like to
113:13 - do is to change this untitled to the
113:17 - name of the file
113:19 - and for that let me copy this line here
113:22 - i now want to get my dog name
113:25 - and in here
113:27 - i want to get my file path and just
113:30 - print this one out so let's see what we
113:32 - get from this so file and open
113:36 - my test file
113:38 - and now i have the full string although
113:40 - that's a touch long and all i really
113:43 - want is this last bit here essentially
113:46 - what i have to do is to split this
113:48 - string wherever we have a slash so here
113:52 - and then pick the last element with the
113:54 - index negative one
113:56 - i want to split this string wherever we
113:59 - have a slash
114:01 - and from the resulting list i want to
114:03 - pick the element with the index minus
114:05 - one
114:07 - let's try this again now i want to open
114:09 - a file test
114:11 - and there we go now we have the actual
114:13 - text and the file name is test.txt
114:17 - that was pretty much it
114:20 - now for the last thing we have to be
114:22 - able to save this file as well
114:25 - and that is going to happen in pretty
114:28 - much the same way so let me open up the
114:31 - opening file dialog so we can compare
114:34 - the two
114:35 - first of all i want to get a file path
114:37 - again and this one again we get with sg
114:41 - and pop up get file
114:45 - now in here for the title i want to have
114:47 - save as
114:49 - and i also want no window to be true
114:52 - again
114:53 - now we have to pass in another argument
114:56 - in here and that is going to be save
114:58 - underscore s
115:00 - and that should be true
115:02 - and this essentially allows us to type
115:04 - in a file name when we have this popup
115:06 - open
115:08 - let me actually print what we get so
115:10 - print a file path and let's try this so
115:13 - now if i click on file and save
115:16 - i can type in here let's say another
115:20 - document
115:21 - if i now click on save
115:23 - we get printed out
115:25 - the whole path to the folder
115:28 - with another document so the text we
115:30 - have just typed out
115:32 - and this is almost what we need although
115:35 - what i want is to add something else to
115:39 - this file path and that is dot txt so we
115:43 - have a proper file ending and now that
115:46 - we have that i again want to create a
115:48 - file with path
115:50 - and in here i have to pass in the file
115:52 - path again
115:54 - and now this file class also has another
115:57 - method that is called write text
116:01 - and now we have to figure out what text
116:03 - we want to write which in our case is
116:05 - going to be the content so values of
116:09 - the text
116:10 - box
116:12 - we can also after we save update the
116:14 - name of the document
116:16 - and this line we could actually leave
116:19 - just as it is because file path is now
116:22 - this file path here
116:23 - let's try this so in here i want to
116:26 - write some random text
116:30 - over a few
116:32 - lines
116:34 - and now i want to save this
116:36 - let's save it as doc 1
116:39 - and save
116:41 - now we get doc1.txt
116:44 - and now i can delete all of this
116:46 - i can click open
116:48 - we have doc1 and if i click on open
116:51 - we get our text back
116:53 - so with that we have a fully functioning
116:57 - text editor
116:58 - that was literally it it's ultimately a
117:02 - really simple thing if you understand
117:03 - different pop-ups and how they interact
117:06 - this entire project is actually really
117:08 - simple
117:13 - and for the next tutorial we are going
117:15 - to be creating snake
117:17 - and this one is going to look like this
117:21 - we have a field without any buttons and
117:24 - i am using keyboard input to control the
117:26 - snake
117:27 - and other than that it's well it's snake
117:30 - it's not that complicated of an app
117:33 - i can just move around and my snake
117:36 - grows and if my snake moves outside of
117:40 - the window the entire thing ends
117:42 - and well let's implement all of this and
117:45 - here again we are in a very simple
117:48 - skeleton app
117:49 - and we have to start by creating a
117:51 - layout and for this one we only need a
117:54 - single element although i do want to put
117:57 - this one in a separate variable you will
117:59 - see in a second why that is the case
118:02 - but the one element we want is called
118:05 - sgraph
118:06 - and this is a canvas that we can draw on
118:09 - and to start this we need a couple of
118:12 - named arguments let me put this over
118:14 - multiple lines they are getting kind of
118:16 - long
118:17 - first of all we need a canvas size
118:21 - and for this one we need a tuple with
118:24 - width and height
118:26 - and since i want to reuse this number
118:28 - later on let me put it at the top i want
118:31 - to have some let's call it game
118:33 - constants
118:34 - and in here i want to have a field size
118:38 - in my case i went with 400
118:41 - and now the width and the height of my
118:44 - game is going to be the field size
118:47 - then next up
118:48 - we have to define the graph
118:51 - bottom
118:52 - left
118:54 - and this is going to be a tuple with x
118:57 - and y
118:59 - and besides that
119:01 - we have to define a graph top
119:04 - right
119:06 - and this also has to be a tuple with x
119:08 - and y values
119:10 - what is happening here
119:12 - is that this graph element is well
119:17 - this kind of square right now
119:19 - that is 400 by 400 pixels wide and high
119:24 - and for this thing we have to determine
119:27 - some kind of coordinate system so that
119:30 - we know where we are
119:32 - and what i want to do is to set the
119:34 - origin point down here and the top right
119:37 - to this point here
119:39 - which means that for my graph bottom
119:42 - left
119:42 - x should be zero and y should be zero
119:46 - and the graph top right
119:47 - should be the field size
119:50 - meaning that this point here should be a
119:53 - position 400 for x and also 400 for y
119:58 - which means y is also going to be field
120:01 - size
120:02 - and there's one more argument that i
120:04 - would like to pass in here and that is
120:07 - the background
120:08 - color
120:10 - which i just want to be black
120:12 - and with that we have our element and
120:15 - now this element i want to pass inside
120:18 - of the layout if i run all of this now
120:21 - we can see the field it doesn't show
120:23 - anything yet but
120:25 - that's going to come very soon
120:26 - although i guess one more thing that we
120:28 - can do
120:29 - i want to set a theme so sg theme
120:33 - and the theme i have set is just called
120:35 - green
120:36 - and let me add a bit of white space
120:38 - let's run this again and we have a green
120:41 - window
120:42 - all right now before we can work on the
120:45 - actual snake we need to get some kind of
120:48 - input and for this game there are no
120:50 - buttons we are only checking for
120:52 - keyboard input which is not that hard to
120:55 - do in pi simple gui all you have to do
120:58 - when the window is created
121:00 - you have to add return underscore
121:03 - keyboard
121:05 - underscore events
121:07 - ideally spell this correct as well
121:11 - and this should be set to true
121:14 - and now all we really need is to check
121:17 - for certain events so if event
121:20 - is a certain value and now in pi simple
121:23 - gui every single button has a specific
121:26 - keyword
121:27 - left for example is called left
121:30 - and 37
121:32 - and if that is the case let me just
121:35 - print left
121:37 - and if i run all of this now i can click
121:39 - on left and we get left
121:42 - and let me put those two on the same
121:43 - line because i want to copy this line
121:46 - three times
121:48 - and in here we have up this one has the
121:51 - number 38
121:53 - then we have right that is number 39
121:56 - and finally we have down
121:59 - and this is number 40.
122:02 - and let's change this to up
122:06 - right
122:08 - and
122:09 - down
122:11 - and let's run this again
122:13 - i have
122:16 - right down left and up isn't working
122:20 - because this should be
122:22 - up
122:24 - and now we have up right down and left
122:27 - so this way we can get all the different
122:29 - keyboard inputs
122:30 - and with that
122:32 - we have all we need to get started on
122:35 - creating the actual game
122:37 - and first of all what we have to work on
122:40 - is we have to create some kind of grid
122:43 - and for now let me explain what we are
122:46 - going to do
122:47 - this here is going to be our graph
122:51 - element so this thing here and inside of
122:54 - that we want to create some kind of grid
122:57 - that looks something like this
123:01 - and in this field
123:04 - we are essentially creating a table and
123:06 - in this table every single cell has a
123:08 - specific value for example the top left
123:12 - has the coordinate 0 and 0.
123:15 - and the one to the right of that has 1
123:17 - and 0
123:18 - meaning column or x value number 1 and
123:21 - row number 0.
123:23 - and let's say if we went to this cell
123:26 - here
123:27 - the value would be one and zero one and
123:31 - two
123:33 - and this is what we are going to create
123:36 - now we are not going to specifically
123:38 - create it in anything in terms of
123:41 - elements in pi simple gui we are just
123:44 - going to use some basic math to create
123:46 - this kind of grid
123:48 - now the first thing i want to know is
123:50 - how many cells i have in total in my
123:52 - case i want to have 10
123:55 - and from that information we can get the
123:57 - cell
123:58 - size
124:00 - and this is literally just the field
124:02 - size divided by the cell number
124:06 - meaning if our entire field is 400
124:08 - pixels wide and we have 10 cells in this
124:11 - width then each cell is going to be 40
124:13 - pixels wide
124:15 - and we can do the same for the height
124:17 - essentially our cell size right now is
124:19 - 40 by 40.
124:21 - and now we have to figure out how to
124:24 - draw anything in there
124:26 - let's get started by just placing the
124:29 - apple that's a nice and simple one
124:31 - and in here i need to get some way to
124:34 - store the position of my apple
124:37 - and this in my case is always going to
124:39 - be a tuple
124:41 - and for now let's go with something
124:42 - random like two and four
124:46 - and if i reopen the drawing
124:49 - this two and four
124:51 - is the same kind of position as this
124:53 - coordinate system here
124:55 - and what that means this here is the
124:58 - entire width of our canvas which is this
125:02 - graph element here
125:03 - we know this is starting at 0 and goes
125:06 - all the way to 400
125:09 - and this we have divided into 10
125:12 - fields or cells
125:14 - so we know we have one at 40
125:18 - another one at 80
125:20 - and another one at 120
125:22 - and so on we have quite a few more
125:24 - fields and now what we have to figure
125:26 - out is how to convert this to
125:29 - into a pixel information that we can
125:31 - place on this with and the logic here is
125:34 - actually fairly simple
125:36 - we know that if the apple position was
125:38 - zero
125:39 - we would be at position zero so here
125:42 - now if the position was one
125:45 - we know then we would want to be on this
125:47 - position here the 40.
125:49 - and this we get by multiplying the cell
125:53 - number with the cell size so this 40
125:55 - here would be 1 times 40.
125:59 - and now in our case for the apple this 2
126:02 - here
126:03 - is just going to be 2 times the cell
126:05 - size so 40
126:07 - and that would get us to 80. so this
126:10 - position here
126:12 - really all we ever have to do is to
126:14 - multiply either the x or the y position
126:17 - with the cell size and that is going to
126:19 - give us a pixel position and let's
126:22 - actually draw one element and see what
126:24 - we get
126:25 - now in my while loop i want to clean
126:28 - this one up a tiny bit so we have a bit
126:31 - more space this is feeling better
126:34 - and in here i just want to draw this
126:36 - apple position
126:38 - and to draw anything on this field we
126:41 - first of all have to identify it and
126:43 - that you would usually do with window
126:46 - and then you would add some kind of key
126:48 - in here
126:50 - in our case our field doesn't have a key
126:53 - but we have stored the element inside of
126:55 - a separate variable
126:57 - and that means we can just use the field
126:59 - variable and work with that one
127:02 - so in here i could for example call the
127:04 - update method
127:06 - but for this one we are actually not
127:08 - going to call the update method
127:10 - instead what we need is called draw
127:12 - rectangle
127:14 - and in here we need three bits of
127:16 - information we need a top left a bottom
127:20 - right
127:21 - and a color
127:23 - so what python by gui wants is we have
127:26 - to define some kind of a rectangle by
127:28 - the top left and the bottom right and
127:31 - let me add some random numbers in here
127:33 - for now
127:34 - i want my top left to be 100 and 100
127:39 - and again these are x and y values
127:42 - and for the bottom right
127:44 - let's pick the bottom right of the field
127:47 - which would be 400 and 0.
127:50 - and now we need a color let's go with
127:53 - red
127:54 - and
127:55 - we right now have to press something
127:57 - here to get to this line so again the
128:00 - read method we need to time out
128:03 - which we will have to do later anyway so
128:04 - let me add a timeout of 10 milliseconds
128:07 - here
128:08 - and if i run this we can see
128:11 - we have a rectangle
128:13 - which is red that's a good start
128:16 - and this top left position here has the
128:18 - value of 100 and 100 for x and y
128:23 - and this point down here
128:26 - is position 400 and 0.
128:31 - and the rectangle encompassed by these
128:33 - two points is the rectangle we are
128:36 - drawing
128:37 - which means we are just working with a
128:39 - pretty simple coordinate system
128:43 - and now all we have to figure out is how
128:45 - to convert this position here to
128:47 - something we can actually see on the
128:49 - window
128:50 - and this is going to be an exercise for
128:52 - you so try to convert this apple
128:55 - position to some pixel information we
128:57 - can actually see
129:01 - let me put this into two separate
129:02 - variables one i'm going to call top left
129:05 - and the other br for bottom right
129:08 - and then i'm going to pass the top
129:10 - left and here
129:12 - and the bottom right in the second one
129:16 - and the top left here is really easy all
129:19 - we need is the apple position we want to
129:23 - get the x value and we want to multiply
129:25 - it with the cell
129:27 - size
129:28 - and since we multi-tuple i'm going to
129:30 - add a second value that is apple
129:32 - position with 1
129:34 - and this one is also going to be
129:36 - multiplied with the cell
129:38 - size
129:39 - and let me draw all of this again
129:42 - here we have a coordinate system
129:44 - and
129:45 - randomly let's say we are here right now
129:48 - and that is our top left
129:51 - what we now have to figure out is some
129:53 - point that is here ish that is going to
129:56 - be the top right
129:58 - and now this point is actually really
130:01 - easy to get because we know from this
130:03 - point we want to get one cell size to
130:06 - the right and one cell size down
130:09 - basically all we have to do is get the
130:11 - coordinates for the top left and then
130:13 - add the cell size to both the x and the
130:15 - y portion inside of it
130:17 - and then we are done
130:19 - which means
130:21 - i want to get the top left
130:22 - 0
130:23 - and plus cell
130:26 - size
130:27 - and then we want to do the same thing
130:29 - for the y
130:31 - values as well
130:32 - so tl1 plus cell
130:35 - size
130:37 - and let's try this now there we go we
130:40 - have well one square
130:43 - if i now change this to let's say zero
130:47 - it's all the way on the left
130:49 - and if i change the four to a zero
130:51 - we are in the bottom left point
130:54 - with that we can place an apple
130:57 - now this logic i want to reuse quite
131:00 - often
131:01 - and as a consequence let me place all of
131:04 - this inside of a function and let's call
131:06 - it convert position
131:09 - to
131:10 - [Music]
131:11 - excel
131:13 - and all we have to pass in here is a
131:15 - cell
131:17 - and then
131:19 - let me copy all of this
131:21 - we are getting a top left and the bottom
131:23 - right and we are getting that from this
131:27 - cell
131:28 - and once we are done we are returning
131:30 - the top left and the bottom right
131:33 - so what i can do down here now is get my
131:36 - top left and my bottom right
131:39 - and call my convert function and then
131:42 - here pass the apple position and we get
131:44 - the same result
131:46 - and now we can minimize this and it's
131:48 - working really well
131:50 - and now that we have that let's actually
131:53 - create the snake that's going to be the
131:55 - center piece of the entire project and
131:57 - in here we are first going to create a
132:00 - snake body
132:02 - and the snake body is just going to be a
132:04 - list and by default there are a couple
132:07 - of values inside and by values i mean
132:10 - two bolts they look like this the first
132:13 - value is always the head of the snake
132:15 - and then to the left of that we have one
132:17 - body part and another body part
132:20 - basically our snake is just going to be
132:23 - a list with a couple of tuples that work
132:25 - exactly like the apple
132:27 - and besides that we also need directions
132:31 - and this is going to be a dictionary
132:34 - that looks like this
132:36 - in here for example we have left and if
132:38 - we have left we are going one cell to
132:41 - the left and zero cells up or down
132:44 - and if we have up we are moving zero
132:47 - cells left or right
132:48 - and we are moving one cell up
132:51 - and let's actually draw the snake or the
132:53 - snake body to be more precise this is
132:55 - going to happen in the while loop again
132:57 - and let's actually add a comment here to
133:00 - draw the snake and
133:03 - what is going to happen here is four
133:05 - part in snake body
133:08 - which means that we are going through
133:10 - these three tuples right now
133:12 - and for each of these tuples i want to
133:14 - get a top left and a bottom right
133:17 - and this i get with my convert position
133:20 - to pixel and i want to pass in the part
133:22 - in here
133:23 - and now that we have that i want to get
133:26 - my field again called the draw rectangle
133:29 - method pass in my top left my bottom
133:32 - right and for the color let's go with
133:34 - green
133:35 - and let's run this and we can see the
133:37 - snake although there's a problem right
133:39 - now that i want the head of the snake to
133:42 - be yellow and the rest of the body
133:45 - should be green and for that to work we
133:48 - have to figure out
133:50 - which one is the first element inside of
133:53 - this list
133:54 - and that we can get fairly easily all we
133:57 - need is the enumerated method
133:59 - and this one is going to return an index
134:02 - and then the content of this list here
134:05 - and now i can set a color that i
134:08 - actually want to use
134:10 - in here
134:12 - and the color is going to be
134:15 - yellow
134:17 - if
134:17 - the index is equal to zero and if that
134:21 - is not the case it should be green
134:25 - and now let's try this now the head of
134:27 - our snake is yellow
134:29 - now next up we have to move that snake
134:32 - and for that we need two parts
134:36 - first of all we need some kind of
134:37 - repeated timer and then we have to use
134:39 - that timer to move the snake in our
134:41 - direction
134:43 - and for the first part the timer we have
134:46 - already seen the time module and this i
134:48 - want to use again
134:50 - which means from time import time
134:53 - and now before we are starting the while
134:57 - loop i want to get the start time which
134:59 - is just going to be time
135:02 - and then inside of the while loop i want
135:05 - to get something like time since start
135:08 - and this would be my current time
135:11 - minus the start time and then i can add
135:14 - an if statement that if time since start
135:18 - is greater or equal than 0.5 so half a
135:22 - second
135:23 - and if that is the case
135:25 - i want to set my start time
135:28 - to my current time
135:31 - and then all of the drawing is going to
135:34 - happen inside of that if statement
135:37 - and now if i run out of this we can't
135:40 - really see a difference because all of
135:42 - this is drawn in the same position every
135:45 - single time which is not particularly
135:47 - helpful
135:48 - so we have to figure out how to move the
135:50 - snake
135:51 - and let me draw the logic here
135:53 - once again we have some kind of
135:55 - coordinate system
135:58 - with some cells inside of that let me
136:00 - draw a few more actually we're going to
136:02 - need a couple
136:04 - and right now our snake body occupies
136:07 - three of these cells
136:10 - and let's say my snake is in this cell
136:12 - in this cell and in this cell
136:14 - and on top of that i also have one of
136:17 - these directions
136:19 - for simplicity let's assume we have the
136:22 - up direction selected right now
136:24 - which means in our game we want to move
136:27 - the head of the snake up one cell
136:30 - and we want to move the last bit of the
136:32 - snake to this position here
136:34 - and how this logic is going to work
136:36 - is we first of all create a new head in
136:39 - this position and this position we get
136:43 - by getting the head
136:45 - and towards that we are going to add the
136:48 - direction
136:49 - and if i use the numbers in our project
136:51 - we know that the head of our snake is in
136:54 - position four and four
136:57 - and the direction we have right now is
137:00 - zero and one
137:02 - and if we add those together we get four
137:05 - and five
137:06 - which is
137:08 - this cell here
137:09 - and that cell is then going to be our
137:12 - new head
137:13 - but now the trick is
137:15 - we are not going to delete this previous
137:18 - cell this one stays exactly where it is
137:21 - what we are going to delete instead is
137:23 - this
137:24 - cell here at the end so this one gets
137:27 - deleted
137:29 - and now we are done we have our new
137:32 - snake we have a new head position and we
137:34 - get rid of the last element and the new
137:37 - last element is now in this position
137:39 - here
137:41 - and all of this let's do it first thing
137:44 - in this if statement
137:46 - i want to
137:47 - get a snake update
137:49 - and in here first of all i'm going to
137:52 - need a new head
137:54 - and the new head is just going to be an
137:56 - x and a y position
137:58 - and for the x position
138:00 - i want to get my snake body
138:02 - and i want to get the first element
138:05 - if i scroll up a tiny bit
138:07 - the first element would be this right
138:09 - now and we only care
138:12 - about the x part for now
138:14 - which means from this first tuple i want
138:16 - to get the first element
138:19 - and to that
138:20 - i want to add the first element of
138:23 - whatever direction tuple we have
138:25 - if this is again up we want to get this
138:29 - first element
138:30 - and this direction i'm going to store in
138:33 - just a second in another variable called
138:35 - direction
138:36 - and this is going to be one of these two
138:37 - builds and in here i just want to get
138:40 - the first element
138:41 - and now we have the x value
138:45 - i can copy all of this
138:46 - and for the y value
138:48 - all we need to do is to change this to
138:50 - one and for direction we also care about
138:53 - one
138:54 - and the next important thing is we need
138:57 - a direction
138:58 - and this we need
139:00 - right at the start so in here i want a
139:03 - direction
139:04 - and this we get by looking at our
139:06 - directions and then here we can pass in
139:08 - for example up
139:10 - now we have a new head what i now want
139:13 - to do is to get my snake body and insert
139:16 - this new head which means at index 0 i
139:19 - want to have my new head
139:21 - and then i want to get rid of the last
139:24 - element of the snake body which we get
139:26 - with snakebody.pop
139:28 - and now if i run this
139:30 - we have a moving snake but it's well the
139:34 - snake keeps on growing
139:36 - and the reason for that is not that the
139:38 - snake is actually getting longer the
139:40 - problem is that all of these elements
139:43 - here
139:44 - are being drawn once but then we never
139:46 - get rid of them essentially what happens
139:49 - is we are drawing one frame and then we
139:51 - are drawing another frame on top of it
139:53 - the second time this timer here runs
139:56 - and in our case we are never clearing
139:58 - this entire drawing we are essentially
140:00 - drawing on top of the previous frame
140:03 - which means we can still see the past
140:05 - body parts of the snake
140:07 - and that we can get rid of quite easily
140:10 - all we have to do before we draw
140:12 - anything
140:14 - i want to get my field again
140:18 - and i want to draw a rectangle
140:21 - and in here i want to go from position 0
140:23 - and 0
140:25 - to position
140:26 - field size and field size
140:30 - this is covering the entire field
140:33 - and this entire field i want to fill
140:35 - with a black color
140:37 - and now if i run this
140:39 - we have a moving snake
140:41 - and really all we are doing in here
140:44 - we are first positioning our elements
140:47 - with all of this code
140:49 - then we are drawing a black frame
140:52 - and now this apple drawing here should
140:54 - happen afterwards this is becoming
140:56 - important later on and really all that's
140:59 - happening in here is we are first
141:01 - getting some keyboard input
141:03 - then we are using that input to place
141:06 - certain elements
141:08 - then we are drawing a black field and
141:10 - then we are filling this black field
141:12 - with our elements and this is very
141:15 - simple game logic if you have ever used
141:17 - something like pie game this should be
141:20 - very familiar to you
141:22 - if you want to learn about pie game by
141:23 - the way i have made a really long
141:25 - tutorial on this as a matter of fact
141:27 - i've made tons of tutorials on pie game
141:32 - but well this is all we need for the
141:34 - basic game
141:35 - now all we have to figure out now is how
141:38 - to get the direction from the keyboard
141:40 - input
141:41 - and this is well let me just copy this
141:44 - line here
141:45 - and we are already getting keyboard
141:48 - input so now instead of printing the
141:50 - direction
141:51 - i want to set the direction and i guess
141:54 - i can copy paste all of this in here
141:57 - because all we need
141:59 - is left
142:01 - and we need right
142:03 - and then we need down
142:06 - and now if i run this
142:08 - i can control the snake
142:12 - this is working really really well
142:15 - obviously right now the snake has no
142:18 - collision with the apple whatsoever but
142:21 - let's work on that which means what i
142:24 - want to do is add another section in
142:27 - here and let's call this one apple
142:30 - snake
142:31 - collision
142:35 - and to check if these two are colliding
142:36 - all really need is to know if the upper
142:38 - position and the head of our snake are
142:41 - in the same cell
142:42 - so if my snake body and the first
142:45 - element
142:46 - is equal to my apple position
142:49 - and if that is the case
142:52 - i want to get a new apple position that
142:54 - we don't have yet
142:57 - and besides that i want to define
143:00 - another variable called apple eaton
143:02 - and set this to true so we know our
143:05 - snake has just eaten an apple
143:07 - that is information we need in here in
143:09 - just a second
143:11 - and i guess to have this variable ready
143:15 - for the apple here by default apple
143:18 - eaton is going to be false
143:21 - and now what we need is to figure out a
143:24 - new random apple position and this i
143:27 - want to do
143:28 - in a
143:29 - function
143:31 - let's call it place
143:32 - apple
143:34 - doesn't need any parameters
143:36 - and in here all i really want to do is
143:38 - to get an apple position
143:40 - and this is going to be a random x and a
143:44 - random y
143:47 - and since we now need random values we
143:49 - have to import from random import rand
143:53 - int
143:54 - and for these values
143:56 - i want to get a random integer that
143:59 - starts at zero and goes all the way to
144:01 - my cell number
144:03 - minus one
144:04 - because if we have ten cells the highest
144:07 - number here should be a nine
144:09 - and since our field is a perfect square
144:12 - i can just do the same thing again and
144:15 - with that we have a random x and a
144:17 - random y value
144:19 - but there is a problem with all of this
144:21 - right now and that is that this random
144:24 - position
144:25 - could happen exactly on the snake
144:27 - which would be kind of awkward i suppose
144:30 - so what i want to do is while the apple
144:33 - position
144:34 - is in the snake body
144:37 - and if that is the case or while that is
144:40 - the case
144:41 - i want to assign a new output position
144:44 - which basically means we are creating a
144:46 - new upper position we are checking if
144:48 - this apple position is inside of the
144:50 - snake body and as long as the upper
144:52 - position is inside of the snake body we
144:55 - are creating a new apple position
144:57 - and that way eventually we are getting
145:00 - an apple position that is on the field
145:02 - but not on the snake
145:04 - and now
145:05 - i can return the upper position
145:07 - [Music]
145:08 - and we are done as a matter of fact when
145:12 - we initially place the apple i want to
145:14 - run this function already
145:16 - and now
145:18 - when our snake has eaten the apple i
145:21 - want to place this apple again
145:24 - so let's try this now
145:27 - and we get an error because this should
145:30 - be rand int
145:31 - now if i run this our snake is moving
145:35 - and if my snake head touches the apple
145:39 - nothing is happening so something went
145:40 - wrong
145:42 - let's check the apple collision oh and i
145:45 - realized this shouldn't be apple it
145:47 - should be up the position
145:49 - now let's try it again
145:51 - and now this is working cool
145:53 - let's try it again and yeah this seems
145:56 - to be looking really good
145:58 - one last time and yeah this is working
146:02 - alrighty
146:03 - now what we have to do next is to
146:05 - actually grow our snake after we have
146:08 - eaten an apple and the logic for this
146:10 - one is actually remarkably simple
146:13 - because all we really need to do is
146:16 - if our snake has eaten apple we don't
146:19 - want to get rid of the last element
146:22 - and to understand how that works let me
146:24 - reopen the drawing and let me give some
146:26 - space
146:27 - what is happening in here is we are
146:29 - right now moving the head and then we're
146:31 - getting rid of the last element
146:34 - but really all i need to do if the snake
146:37 - has eaten i don't want to get rid of
146:40 - this last element and that means my
146:42 - snake is getting a new head so it is
146:44 - growing but we are not getting rid of
146:46 - the last element so we never lose the
146:49 - last bit
146:50 - and as a consequence we are getting a
146:52 - new hat so the snake is growing but
146:54 - we're not getting rid of the last bit so
146:56 - this snake isn't shrinking at the end
146:59 - and this we only want to do for one
147:00 - frame so
147:02 - well once we have that we have grown the
147:04 - snake
147:05 - which means all i need to do
147:09 - if not apple eaten
147:13 - then i want to get rid of the last
147:14 - element and once that is the case i want
147:17 - to set apple
147:19 - eaton
147:21 - back to false
147:22 - although this apple eaten should not be
147:24 - indented
147:26 - and now let's try this
147:28 - and we are eating an apple the snake is
147:31 - growing for one cell and this is working
147:36 - really well
147:37 - one last try we get one larger cell nice
147:41 - this is working indeed
147:42 - there is only one more thing that we are
147:45 - going to need
147:46 - and that is to check
147:49 - def
147:51 - meaning if our snake is going too far to
147:52 - the left too far to the right too far up
147:54 - or too far down
147:56 - and all i have to check in here is the
147:58 - head of my snake so snake body zero
148:01 - and for this snake for now i want to
148:03 - check the x part
148:05 - and in here all i really have to check
148:08 - if this is between zero
148:10 - and between my cell
148:13 - number -1
148:15 - and if that is the case we know we are
148:18 - inside of the field
148:20 - but if that is not the case i know we
148:23 - are outside of the field and now i can
148:27 - do the same thing
148:29 - for the y part let me put it on a second
148:32 - line
148:33 - so we want to check
148:35 - if the x part of the head is not on the
148:38 - field or if the white part is not on the
148:40 - field and that would check if our snake
148:43 - has left the window let's try and if
148:46 - either of those is the case i want to
148:48 - break the entire loop
148:50 - and end the game
148:52 - and there we go the game has ended
148:55 - now there's one more condition we have
148:57 - to add in here
148:59 - let me add another ore
149:01 - and that is if the head of the snake is
149:04 - inside of the body of the snake which we
149:06 - can also get very easily so snake body
149:09 - zero
149:10 - is in snake body
149:13 - from one to the end
149:16 - and now
149:18 - i guess i can just go in a different
149:20 - direction and it's going to end so i
149:21 - just pressed up while our snack was
149:23 - going downwards and that killed the
149:24 - snake
149:25 - i guess this is something that shouldn't
149:27 - be possible in the actual game but
149:28 - that's something you can implement
149:30 - yourself
149:31 - but well with that we have the entire
149:34 - game it took about 80 lines of code and
149:38 - really wasn't all that bad to implement
149:43 - and for the next part we are going to be
149:45 - creating a graph app that's the best
149:47 - name i could find
149:49 - essentially what we will make looks like
149:52 - this
149:54 - we have a table at the top and a graph
149:56 - at the bottom and in the middle we can
149:58 - add some numbers and let me add a few in
150:00 - here and then you see how it's going to
150:02 - work
150:03 - it doesn't really matter what i type in
150:05 - here as long as it is a number complete
150:09 - a table at the top and the graph at the
150:11 - bottom correspond to each other and that
150:13 - way collecting data should be fairly
150:15 - simple
150:16 - i guess especially if you're a scientist
150:18 - this could be super useful
150:20 - but in general what i want to focus on
150:22 - is the graph at the bottom
150:24 - and what we are going to do is to
150:27 - combine pi simple gui with matplotlib
150:30 - which is the default library in python
150:32 - to graph basically anything
150:35 - and since this one doesn't come with
150:37 - python by default we have to install it
150:40 - which means either in the powershell or
150:42 - in the terminal you have to type pip
150:44 - install matplotlib or pip3 install
150:47 - matplotlib
150:48 - and the rest should happen by itself
150:51 - and once we have that let's have a look
150:54 - at the code
150:56 - and here is what i have so far it is the
150:59 - skeleton app we have seen a million
151:01 - times by now
151:03 - as always let's start with the layout
151:05 - and i want to put this over multiple
151:08 - lines
151:09 - and on the first line we need a new
151:11 - layout and this one is called table
151:14 - and in here we need a couple of
151:17 - arguments first of all headings
151:20 - the argument you want to pass in here is
151:23 - a list
151:24 - and the list has to be as long as the
151:26 - amount of columns you want in my case
151:29 - that is 2
151:31 - meaning i have observation
151:33 - and i have what i called results
151:38 - and besides that
151:40 - we need values
151:43 - and values i later want to reuse so i'm
151:45 - going to put those in a separate
151:46 - variable let's call them table
151:49 - content
151:51 - and this is just an empty list for now
151:53 - which i want to pass in here
151:56 - and now we can run this and we get a
151:59 - very basic table
152:02 - although i do want to make some changes
152:04 - for the styling
152:06 - and that means i want to expand x and
152:09 - set that to true
152:11 - and i want to hide the vertical
152:17 - scroll
152:18 - and this should also be true
152:20 - and since this is getting quite long
152:22 - let's put it over multiple lines
152:26 - so it's a bit more readable
152:29 - that is feeling much better
152:32 - and for the final argument i want to
152:34 - give this table a key and let's just
152:37 - call it table
152:38 - we have our first row if i run all of
152:41 - this now i have a table that i can move
152:44 - around a tiny bit
152:46 - not particularly useful but
152:48 - you do you
152:50 - the other element i want to add is going
152:52 - to be well it's two elements actually i
152:55 - want to add an input element
152:57 - and this one needs a key
153:00 - so let's give it a key of
153:04 - input and this one i want to expand x
153:08 - and set to true
153:10 - and then besides this input element i
153:13 - also want sg button
153:16 - and this one is just to submit
153:18 - things
153:20 - i'm not going to give this one a key
153:22 - because we just have a submit button
153:25 - and if i run all of this now we have a
153:27 - table it doesn't really do anything yet
153:29 - but let's work on that
153:31 - or i guess the one thing we can do
153:34 - before we add functionality is to set a
153:37 - theme
153:38 - in my case i want to go with the theme
153:41 - dark teal six
153:45 - and this one looks like this
153:49 - what i first of all want to do is if we
153:52 - are clicking let me open the app if i
153:55 - type a number in here and click submit i
153:57 - want to add a value to this table
154:00 - and the format i want to have
154:02 - is that observation should be something
154:04 - like 1 2 3 4 5 and so on
154:08 - for each observation we get a result
154:11 - which is going to be the number down
154:13 - here
154:14 - for 1 this would be 32 for 2 would be
154:18 - any other number could be i don't know
154:20 - 10.
154:21 - so when we update the table i want to
154:24 - get
154:25 - a number pair
154:27 - and the table is basically designed to
154:29 - work with that
154:31 - let's first of all
154:32 - check for
154:34 - the
154:35 - submit button
154:37 - if that is the case i want to get a new
154:39 - value and this new value we get from
154:42 - values and in here i want to look at my
154:46 - input field
154:47 - which is this input field we have just
154:51 - created
154:52 - and now that we have that
154:54 - we want to check if this new value is
154:57 - numeric
154:58 - and now that we have that
155:01 - i want to get my window and the table
155:06 - and in here i want to run the update
155:09 - method
155:10 - and now to update the table
155:12 - we need a list that is going to contain
155:15 - other lists
155:16 - and for an example
155:18 - let's say we have 1 and 10 in one list
155:23 - then we have another list that says 10
155:25 - and 12
155:27 - and a third list with three and zero
155:31 - and before i run this this should be an
155:34 - equal sign
155:35 - let's run this now and if i click on
155:37 - submit
155:39 - and i type a number in the field and i
155:41 - click on submit now we have 1 2 3 and 10
155:44 - 12 and 2
155:46 - which are the numbers
155:48 - we have
155:49 - down here in the list we just created in
155:52 - here
155:53 - and then here again piscemba gui really
155:56 - likes to have a list that contains other
155:58 - lists it's a really recurrent theme for
156:00 - the entire framework
156:02 - what i want to do to make this
156:04 - interactive
156:05 - could actually be a really good
156:07 - challenge try to figure out how to make
156:09 - this entire thing interactive that when
156:12 - we are pressing the submit button
156:14 - then we are adding
156:16 - a new value to the table and the value
156:18 - we actually add comes from the input
156:21 - field so this field here
156:26 - i don't want to have values in here
156:28 - instead i want to pass in my table
156:30 - content and before we're updating the
156:33 - table
156:34 - i want to get my table content
156:38 - and append something
156:40 - and then here we need a list with two
156:42 - values
156:44 - we need the observation and we need the
156:47 - result
156:49 - the result is the easier part
156:51 - all i really want in here is the new
156:54 - value
156:56 - although this number
156:58 - i want to turn into a floating point
157:01 - number because right now it is a string
157:04 - which we couldn't really work with
157:06 - the observation is well it's not that
157:09 - much more difficult all we really care
157:11 - about is the length of the table content
157:16 - and to that value i want to add a 1.
157:20 - now why does this work and essentially
157:24 - think of it like this
157:25 - if our table content is a list that
157:29 - right now has zero entries it's
157:31 - completely empty if that is the case
157:34 - then the first value we want to add is
157:36 - going to be a one
157:37 - which essentially means we always want
157:39 - the length
157:40 - of the list
157:42 - plus one which is what i have done down
157:45 - here
157:47 - this should actually work let's try
157:51 - i can press a 1
157:53 - 123
157:55 - a longer number ah and we do have a
157:57 - problem here that after i click submit i
158:00 - am not emptying this field
158:03 - but the rest still works just fine
158:07 - and i guess now let me copy this line
158:10 - here i want to look at my input field
158:14 - and i want to
158:16 - empty this one
158:18 - and now let's try this again so i have a
158:20 - few more numbers
158:24 - and this seems to be working just fine
158:26 - and now we have to work on the actually
158:30 - interesting part in this and that is the
158:32 - graph at the end and first of all to add
158:35 - a graph we have to add another element
158:38 - and this is going to be an sg
158:40 - canvas
158:42 - and this one doesn't need any specific
158:44 - arguments but i do want to give it a key
158:46 - that i call canvas
158:49 - and if i run this now we cannot see any
158:52 - kind of difference because we have to
158:54 - give this canvas some kind of value
158:57 - and for that we need an actual graph and
159:01 - for that we need the graph which means
159:03 - we have to import two things
159:05 - first of all i want to import matte plot
159:09 - lip and besides that we need a longer
159:12 - line
159:13 - let me type it first and then explain we
159:15 - need from matte plot lip dot back ends
159:18 - dot back and underscore
159:21 - d k a g g i want to import
159:25 - bigger canvas
159:28 - b k
159:29 - a g g
159:31 - and pay close attention to the
159:33 - capitalization here
159:34 - the f the c the t and the a all have to
159:38 - be capitalized
159:40 - what does all of that mean matplotlib is
159:43 - the easy part that well it's a graphing
159:46 - module essentially
159:47 - and what we are doing in the second line
159:50 - is we are importing some backend
159:52 - functionality that connects matplotlib
159:55 - to tkinter and tkinter is the basis for
159:58 - pi simple gui
160:00 - and this is basically what we need to
160:02 - connect the two
160:04 - and let me add another section here that
160:06 - i call matte plot lip
160:09 - and first of all we have to create a
160:12 - figure which is usually called fig in
160:14 - maple lip and all this means we need
160:16 - maple lip dot figure dot figure with a
160:19 - capital letter
160:20 - and then we need a figure size
160:24 - and in my case i went with five and four
160:27 - now after that
160:29 - i need this figure and add a sub plot
160:34 - and this subplot needs three numbers in
160:36 - my case i go with one one and one
160:39 - and that is for the position of this
160:41 - subplot on this figure essentially how
160:44 - matlab lip works is that a figure is
160:48 - just an empty field so the figure we get
160:51 - here is just this yellow rectangle
160:54 - and then on this yellow rectangle we
160:57 - need to add subplots
160:59 - a subplot could be here could be here
161:02 - and each of those have their own
161:04 - coordinates and then inside of each
161:06 - subplot you add the actual graph meaning
161:09 - that one subplot could be a line graph
161:13 - another subplot could be a bar chart
161:16 - and then a third subplot could be a pi
161:20 - chart
161:22 - and this one one and one
161:24 - gives us
161:25 - basically a default position in here
161:28 - if you know maple little bit better this
161:30 - should be fairly simple
161:32 - and now on the subplot we want to create
161:34 - an actual graph and the easiest one here
161:37 - is called plot
161:38 - and for this one we want x and y values
161:42 - in my case i want this to be empty so
161:44 - i'm going to add empty lists here
161:47 - and now if i run this we cannot see any
161:50 - difference but there's no error which is
161:52 - at the very least something
161:54 - and essentially what we have done now is
161:57 - we have created a figure by itself what
161:59 - we now have to do is to connect this
162:01 - figure to this canvas here
162:06 - and for that we need three lines of code
162:09 - first of all we need to create a figure
162:12 - canvas
162:14 - agg
162:16 - and for that we need the figure canvas
162:19 - tkag
162:21 - and this one
162:23 - needs a figure so the figure we just
162:25 - created and then the element in pi
162:27 - simple gui which in my case is going to
162:29 - be window
162:31 - the canvas
162:33 - and on this we have to get tk
162:37 - canvas
162:39 - and once we have that i want to get my
162:41 - figure canvas agg
162:43 - for the draw method
162:46 - and finally i have to call it one more
162:48 - time
162:48 - get underscore tk and widget
162:53 - and call the pack method
162:56 - and now
162:58 - we have two windows that was not
163:01 - intended but at the very least we do
163:03 - have a graph but we do want to connect
163:06 - them
163:07 - and the reason is pi simple gu is
163:09 - actually giving me an error in some form
163:11 - that i forgot to finalize the window
163:14 - and the essential problem here is that
163:16 - we have a window
163:18 - and we are adding something to that
163:20 - window before we are calling the read
163:22 - method
163:23 - so we have to make sure that we set
163:25 - finalize to true
163:27 - and now let's try this again
163:29 - now this is working this is looking much
163:32 - better although obviously
163:34 - there's no connection between the table
163:36 - and the graph right now but we have
163:39 - something
163:40 - and to connect the two i want to create
163:42 - a function
163:44 - let's call it update figure
163:48 - in here i want to pass in some data now
163:51 - what we have to do in here is to first
163:53 - of all get the access
163:55 - and an axis is going to give us the
163:57 - subplot we have just been working with
164:00 - and pretty much what we want to do we
164:02 - want to get the access and pick the
164:05 - first element inside of that which is
164:07 - going to be our subplot
164:09 - and now we want to create a new plot and
164:12 - now this plot is going to need x and y
164:16 - values
164:17 - and some styling
164:19 - and for matplotlib here we can add
164:21 - something like r and dash
164:23 - which means that the graph is red and
164:25 - the points are connected by lines
164:28 - again here if you know more about
164:30 - map.lib this should be really easy to
164:32 - implement
164:34 - and now we need x values and we need y
164:38 - values
164:40 - and these values we are going to get
164:42 - from our data and our data is going to
164:44 - be the table content
164:47 - and in here i am going to use list
164:49 - comprehension and for the x values i
164:52 - basically want the first item inside of
164:55 - every nested list inside of the table
164:57 - content
164:59 - let me actually explain this by drawing
165:00 - that might make more sense this table
165:03 - content here is one long list with a few
165:06 - lists inside let me just draw three in
165:10 - there
165:12 - each of those lists has two values we
165:14 - have the observation let's call it o and
165:17 - we have the result we could for example
165:19 - have a one and a ten in here then we
165:22 - have two and twenty
165:24 - and three and i don't know 15.
165:28 - and what we want for the x values is
165:31 - this value this value and this value
165:35 - essentially what i want to do in my list
165:36 - comprehension is i for i in data
165:41 - and this i right now
165:43 - would be
165:44 - the entire list or the entire nested
165:47 - list to be more precise
165:49 - which is not what we want
165:52 - and to only get the first value i want
165:54 - to use indexing to get the first value
165:57 - and this is always going to give us the
165:59 - first element inside of each nested list
166:02 - next up we can work on the y values
166:07 - and
166:08 - we could basically copy the entire thing
166:11 - here
166:13 - paste it in and now this should be a one
166:17 - and just to have a cleaner graph i want
166:19 - to convert these y values to integers
166:24 - and that is purely to make the x and y
166:26 - labels on our figure a bit cleaner
166:28 - we are nearly done all we have to do is
166:31 - run these two lines here again
166:34 - inside of the function let me
166:36 - put it in here and now
166:40 - every time
166:41 - we are submitting a new value i want to
166:44 - update my figure and i want to pass in
166:47 - the table content
166:50 - and with that let's run it now
166:53 - it's not crashing let me add a number in
166:56 - here
166:57 - one value isn't going to create a line
166:59 - but the second value is doing just that
167:04 - and now i can add more and more values
167:08 - they keep on extending the graph
167:11 - and
167:13 - what i can do now for example if you're
167:15 - confused about this one
167:17 - if i add a different letter let's say
167:19 - green
167:21 - we get
167:23 - a different color green in this case
167:27 - and if i add a star in here
167:30 - we get
167:32 - with a few more values
167:35 - something like this
167:36 - where we don't have lines we have stars
167:39 - for each value pair
167:40 - but r and dash seem to be the best
167:42 - options
167:44 - and all right with that we have our
167:47 - graphing app so this is basically all
167:49 - you need to connect map.lib to pi simple
167:51 - gui
167:53 - for the next part we are going to make
167:55 - an image editor
167:57 - and that one is going to look like this
168:00 - when we start the program we get a
168:02 - dialog to select a file and i have a
168:05 - test image here if i open this one
168:08 - we get to this window and in here we can
168:11 - set a blur we can set a contrast
168:14 - and we can flip the image let me remove
168:17 - the blur a bit
168:18 - and we can change the contour or emboss
168:21 - it
168:22 - and all of that is working pretty
168:24 - straightforwardly
168:27 - and of course all of this can be saved
168:30 - and let's save it as test two
168:33 - and that's pretty much it
168:35 - now before we can start coding this we
168:37 - need to install something because by
168:39 - default we can't really alter images but
168:42 - for that python has the pillow library
168:44 - and this is what we are going to install
168:47 - so either in the powershell or on the
168:48 - terminal type pip install pillow or pip3
168:52 - install pillow but once we have that we
168:54 - can start with our code and here again i
168:58 - have the skeleton app and if i execute
169:01 - this we get the plain window that
169:03 - doesn't really do anything right now
169:06 - and as always let's start by creating
169:08 - the layout properly
169:10 - and this time we need a slightly more
169:12 - complex layout because we have two
169:14 - columns
169:16 - let me actually open the entire thing
169:17 - again to illustrate what we need later
169:19 - on and in here we have two main elements
169:23 - we have the control sliders on the left
169:26 - and we have an image on the right
169:29 - and this is a layout we cannot create in
169:32 - python bagooy by default so we need an
169:35 - extra element
169:36 - and essentially what i have done in here
169:39 - i have used columns this entire element
169:41 - here is one column
169:43 - and this element here is another column
169:47 - and that way we can place elements next
169:49 - to each other
169:51 - and i guess this is going to make more
169:52 - sense when we actually implement it
169:55 - but what i want to do
169:57 - is to create let's call it a control
170:00 - column
170:02 - and we also want to create an image
170:06 - column
170:08 - the image column is the easier one let's
170:10 - start with that one
170:11 - in here i just want to create a column
170:14 - and inside of this column we need a
170:17 - nested list
170:19 - and each nested list is going to be one
170:21 - row inside of this entire column
170:25 - you're going to see in a second how that
170:26 - works in more detail but for this one i
170:29 - only want a single element and that is
170:32 - sg image
170:34 - and in here we need an image path now
170:38 - later on we're going to get that image
170:39 - path from a pop-up
170:41 - but for now i just want to open test.png
170:44 - so we don't have to select the same
170:46 - thing every single time
170:47 - and this column we would now pass into
170:51 - this layout i want my image column
170:55 - and if i comment out the control panel
170:57 - and run this
170:58 - we get the image covering the entire
171:00 - window more or less
171:03 - but now what i can also do i can create
171:06 - a second column so sg column
171:09 - and in here
171:11 - we are going to get a more complex setup
171:14 - right now i have one list inside of this
171:16 - column and this is going to be the main
171:18 - container and inside of this main
171:21 - container
171:22 - let's do this over multiple lines
171:24 - i want to have individual rows and each
171:27 - row is going to be one list
171:30 - meaning the first list is going to be
171:31 - the first row
171:33 - and in here let's add sg button
171:36 - and let's just call it test
171:39 - and now what i can do in my layout i can
171:43 - add the control panel or the control
171:45 - column and run this
171:47 - and now we have two columns right next
171:49 - to each other
171:52 - now this we could have done with plain
171:54 - pie simple gui already we wouldn't need
171:56 - the columns for that
171:58 - but what we can do now
172:01 - is copy this entire row inside of the
172:04 - column
172:05 - and if i run this we have two rows on
172:07 - one side and then another column next to
172:10 - it
172:11 - and this way we are creating more
172:13 - complex layouts
172:15 - and i guess let's create the actual
172:18 - layout of the app and let's see how far
172:20 - we get
172:21 - for the actual layout i only want a
172:23 - single button and this one is save image
172:27 - and let's give them a key straight away
172:29 - so we don't have to do it later this one
172:31 - i want to call save
172:33 - but this is going to be the only button
172:36 - besides that i want checkboxes and those
172:39 - we haven't seen yet but you create them
172:42 - with a checkbox and then here you can
172:44 - give them a name
172:46 - let's start with flipx
172:49 - and then the key for this one
172:52 - should be
172:55 - flip x all in uppercase letters
172:59 - and if i run this
173:01 - we have a checkbox
173:03 - and essentially what this is going to
173:04 - return is a value that's either false or
173:07 - true if it's ticked that's just about it
173:10 - and this checkbox i want to copy
173:12 - and on the same row
173:15 - i want to get flip
173:17 - y
173:18 - and this one will have the key of flip y
173:21 - and now we have both of these elements
173:24 - right next to each other
173:25 - this is looking pretty good
173:27 - next up
173:29 - i want to duplicate this entire line
173:31 - because in here i want another checkbox
173:34 - and this one is called emboss and the
173:37 - key is emboss all uppercase
173:40 - and we want the other one i called
173:44 - contour
173:47 - and this one is going to get the contour
173:49 - key
173:50 - let's run this one now and we have a few
173:52 - more check boxes
173:54 - and now
173:56 - we need to create some sliders and those
173:58 - we also haven't seen yet but sliders are
174:01 - also really easily created you need sg
174:04 - slider
174:05 - and in here you have to determine a
174:08 - range
174:09 - and the range is the start and the end
174:11 - point we want a tuple and in my case i'm
174:13 - going to go from 0 to 10.
174:16 - let's try this one and we get a slider
174:18 - that goes from 0 to 10.
174:21 - obviously we want this one to be
174:22 - horizontal
174:24 - and that you also get quite easily
174:27 - all you need is the orientation
174:30 - and this one could either be h
174:33 - and this one would work
174:34 - or you could write horizontal in here
174:37 - and that would also work
174:40 - let's keep it at h so it's a bit more
174:42 - space efficient
174:43 - however there is one problem right now
174:47 - and that is that we don't have text for
174:49 - the slider a potential user wouldn't
174:52 - have any idea what to do with this
174:55 - and one thing that you could be doing is
174:57 - to add sg text next to it and call it i
175:01 - don't know slider doesn't really matter
175:05 - problem is this looks kind of ugly so i
175:08 - don't want to do that
175:10 - instead
175:13 - we are going to see another container
175:15 - element besides the column and this is
175:18 - called frame
175:19 - let me cut the entire slider out
175:22 - and what i want to do instead is create
175:24 - an sg frame element
175:27 - and this one needs two arguments it
175:30 - first of all needs a name let's call
175:32 - this one contrast
175:34 - and besides that it needs a layout
175:38 - and the layout again is a list with
175:40 - another list inside and in here we can
175:43 - insert the slider we just created
175:46 - and now if we run this
175:48 - we have a box around the element
175:51 - and we have some nice text at the top
175:54 - which is feeling significantly more
175:57 - professional
176:00 - and finally
176:01 - i can copy the entire line
176:03 - and the first item should be called blur
176:06 - and this slider remains the same
176:09 - and let's run this one now and there we
176:11 - go we have the entire layout
176:14 - i guess you could be adding a theme but
176:16 - do this in your own time i don't really
176:18 - mind so much although what i do mind is
176:21 - the sliders are also going to need a key
176:25 - because we are going to use those quite
176:27 - a bit
176:29 - and the first one i want to call blur
176:31 - the second one i want to call contrast
176:35 - and well with that we are pretty much
176:39 - done
176:41 - and let me minimize it so we
176:43 - have a bit more space to work with
176:46 - all right now we have to figure out how
176:48 - to use all of these elements to actually
176:50 - change the image
176:52 - and there are two steps we need to take
176:54 - here first of all we actually have to
176:56 - get the values from all of these
176:59 - elements
177:00 - and only once we have that we can use
177:02 - them to influence the image
177:04 - all that really means is i want to print
177:09 - all of the values
177:10 - and if i run this now we don't get
177:12 - anything because again we're not getting
177:15 - past this line here
177:17 - but that
177:19 - we can overcome by adding a time out
177:22 - and the timeout in my case is 50
177:24 - milliseconds
177:26 - let's try this one now and there we go
177:28 - we have all of the values in real time
177:31 - what i can do now is change the blur
177:33 - change the contrast change emboss change
177:36 - contour
177:38 - and flip y
177:39 - and we always get the value updated in
177:42 - real time
177:43 - and this is what we are going to use for
177:45 - the actual image
177:47 - and i want to paste all of this inside
177:50 - of a function to keep the code a bit
177:52 - cleaner and let's call it update image
177:56 - and this one is going to get
177:59 - a couple of parameters first of all i
178:02 - want the original image
178:04 - the reason here is some of the image
178:07 - changes we are going to make are
178:08 - destructible meaning once we apply them
178:11 - we can't go back so we essentially want
178:14 - to keep the original and then modify
178:16 - this original and that way we can always
178:18 - go back
178:20 - and besides that we want the blur we
178:22 - want the contrast we want emboss we want
178:25 - contour we want flip x and we want flip
178:29 - y
178:31 - inside of the while loop i want to call
178:34 - this function and pass in all of my
178:37 - values
178:39 - the original we're going to leave for
178:41 - now we'll cover that in just a second
178:43 - but after that i want to get my values
178:46 - and in here i want blur
178:50 - and now let's copy this a couple of
178:53 - times
178:54 - the second value is the contrast
178:57 - then we have an argument for the emboss
179:02 - next up we have an argument for
179:05 - contour
179:07 - and all of this should probably be on
179:10 - multiple lines to make it easier to read
179:18 - what we want next is a value for flip
179:22 - x
179:24 - and finally we want a value for flip
179:26 - y
179:28 - and we should be having six values in
179:30 - total
179:32 - but now to finish this we are going to
179:34 - need the original and what i mean here
179:37 - by original is the original image in
179:40 - such a way that we can work with it and
179:43 - for that we are going to need the pillow
179:45 - library
179:46 - and this one you import with pil
179:50 - although in my case i only want to
179:52 - import specific things so what i want
179:54 - from pil for now is import image
179:59 - in here the original
180:02 - we want to get with image and we want to
180:06 - open an image and i guess we can do this
180:09 - quite smartly all the way at the top
180:11 - before we run anything else i want to
180:14 - create an image path
180:16 - and for now the image path is just going
180:19 - to be this test png
180:22 - and this image path we later gonna get
180:25 - from a pop-up but for now it's just
180:28 - gonna be that one path
180:31 - now we have an image if i run all of
180:33 - this we well we get an error because
180:36 - there's nothing in the function but if
180:37 - adam pass
180:38 - we don't see any difference
180:41 - but what we have now is an original
180:44 - image
180:45 - and i guess what we can do
180:49 - is to print the original
180:53 - and if i do that what we get is um
180:57 - well
180:58 - it's an image file that doesn't really
181:00 - tell us all that much
181:02 - but this is something we can work with
181:05 - and what we are going to do to this one
181:07 - is apply filters to it
181:09 - and filters we also get from pillow we
181:12 - just have to import them with image
181:15 - filter
181:16 - all we have to do is image and i want to
181:19 - get the original
181:21 - and then apply a filter
181:23 - and in here i need an image filter and
181:27 - now we have a couple of options
181:29 - the one for the blur is called gaussian
181:33 - blur
181:34 - and this one wants a number by how much
181:36 - we want to blur which in our case is
181:39 - what we get from the parameters so this
181:42 - blur here
181:43 - and now if i run this
181:45 - we get no difference
181:48 - the reason is
181:50 - that right now in our image editor we
181:53 - have two images
181:54 - this one is one image here and the other
181:58 - image is this original here
182:00 - and those two
182:02 - are different images they do not connect
182:06 - whatsoever right now
182:07 - and what we are doing up here is to
182:10 - influence
182:11 - this image
182:13 - basically what we have is internally we
182:15 - have a blurred image but we can't see it
182:18 - because what we actually show is a
182:20 - different image
182:21 - this one here
182:23 - which means we have to update our gui to
182:25 - show the image
182:26 - and for that we have to do a couple of
182:29 - things
182:30 - now obviously first of all we have to
182:33 - get
182:34 - our image element which i called image
182:38 - and we want to update this
182:40 - but now
182:42 - what we basically need is the image data
182:46 - and the image data we don't have right
182:48 - now and you couldn't just set image here
182:51 - if i tried this we would get an error
182:54 - that oh i just realized i made a
182:56 - mistake that right now
182:59 - the image element does not have a key
183:02 - which is not ideal so let's give it the
183:05 - key
183:07 - image
183:09 - and now let's try this again we're still
183:11 - getting an error
183:12 - that the int object is not callable
183:15 - which means that we couldn't just pass
183:17 - an image inside of the data here
183:19 - we have to do something else
183:22 - and what we have to do is to convert
183:24 - this image here to something python can
183:26 - use
183:27 - and for that to work we need another
183:30 - library
183:31 - or at least a part of a library and what
183:35 - i want to do is from io import
183:38 - bytes io
183:41 - and bytes io converts an image to
183:44 - something we can use in terms of bytes
183:47 - essentially all i want to do is get what
183:50 - is called bio and then get
183:52 - bytes.io and that is for now all we need
183:56 - and now what i can do i can get my image
183:59 - and save it with the bio information
184:03 - and now i have to specify a format
184:06 - which in my case is going to be png
184:09 - and once i have that i can get my bio
184:13 - and get underscore value
184:16 - and there should not be an underscore in
184:18 - between
184:19 - and with this line we have converted the
184:22 - image to something pisces per gui can
184:24 - use
184:25 - if i run this now i can use the blur
184:28 - filter and we have blur
184:31 - i guess one day i'm going to do a proper
184:33 - introduction to the pillow library and
184:35 - then i explain all of this in more
184:36 - detail but for now this is all we need
184:41 - so next up
184:42 - i want to apply the contrast filter
184:47 - and for that we want to update the image
184:50 - variable again
184:51 - and this time we don't want to get the
184:53 - original instead we want to get this
184:56 - image so this image here
184:58 - because we want to make sure once we
185:00 - have applied blur and we apply contrast
185:02 - as well that those two stack on top of
185:04 - each other
185:05 - and now all i want is to apply a filter
185:09 - and in here again i need my image filter
185:12 - and what i need now is called unsharp
185:16 - mask
185:18 - and this one again needs an argument
185:20 - that defines how much contrast we want
185:23 - and if i run this now our blur is still
185:26 - working but now we also have contrast
185:31 - this works just fine
185:33 - and next up
185:35 - i want to check if emboss is the case so
185:39 - if we have clicked on this checkbox here
185:42 - and if that is the case i want to get my
185:45 - image again and i want to filter it
185:48 - with image filter and this one is called
185:51 - emboss
185:52 - all in uppercase letters
185:56 - so let's run it now i can click on
185:58 - emboss and we get the embossed image
186:02 - works just fine
186:04 - and next up i can check if contour is
186:08 - the case
186:10 - and if that is the case i again want to
186:12 - apply a filter to my image
186:16 - we need image filter and in here we need
186:19 - contour also all in uppercase letters
186:22 - let's try this one
186:24 - i click on contour and this one is
186:26 - working also with the other filters as
186:29 - well
186:30 - and now finally
186:33 - i want to check if flip x
186:36 - and if
186:38 - flip
186:39 - y
186:40 - and for this one we need something else
186:42 - from pillow and this one is called image
186:45 - ops
186:47 - and this one we use again we want the
186:49 - image variable and now we want image ops
186:54 - and i want to apply a mirror
186:57 - and in here we have to pass in the image
187:00 - and let me copy all of this and to flip
187:03 - the thing in the y direction we need
187:05 - flip
187:07 - and with that we should have all of our
187:10 - options
187:11 - so i can blur it i can apply contrast
187:15 - there's ambos there's contour there's
187:17 - flip y there's flip x
187:20 - and that is pretty much it this is
187:22 - looking really good
187:24 - finally we are going to need the ability
187:27 - to save this image
187:29 - and this is let me minimize this
187:32 - function here
187:33 - this is going to happen first of all by
187:35 - us getting a path to the place we want
187:37 - to save the file
187:39 - and this i think could be a good
187:40 - challenge for you i want you guys to
187:42 - create a popup file to get the location
187:45 - and the file name where we want to save
187:47 - the file try to figure this one out
187:49 - yourself
187:53 - all i want first of all is to get the
187:56 - event
187:57 - and we call this one save
188:00 - and in here i want to create a save path
188:03 - or file path doesn't really matter and
188:06 - to get this path we need sg pop up
188:10 - underscore get underscore file
188:13 - and let's call this one save
188:16 - and save as should be true and besides
188:20 - that no window
188:22 - should also be true
188:25 - and if i print the save path now
188:30 - let me run this i can click on save
188:32 - image
188:33 - and here we already have the two images
188:36 - so let me save this one as another
188:41 - although there is one problem and that
188:44 - is that we don't have a file ending from
188:47 - this to fix that i want to add dot png
188:52 - and now that we have that all we really
188:55 - have to do is call image and save and
188:58 - then here we need our save path
189:01 - and we have to tell
189:03 - hello that this is going to be a png
189:05 - image
189:07 - the one final problem we have is that
189:09 - this image is only available
189:12 - inside of this update image
189:15 - to fix that
189:16 - we have to call global and image
189:21 - and with that let's try and we get an
189:24 - error that this should be a plus
189:27 - now let's try it
189:29 - we still have our owl and let me apply
189:31 - some blur and save the image
189:34 - test free
189:37 - and
189:39 - and if i look at the folder
189:41 - it's going to look like this and we have
189:43 - test three so we could indeed save the
189:46 - file
189:47 - let's do this a bit more obviously and
189:49 - let's apply a few more filters so i want
189:51 - to blur this a lot of contrast i want to
189:54 - contours maybe a bit less blur
189:56 - there we go and let's flip x
189:59 - and flip y
190:02 - and save the image as test free i want
190:05 - to overwrite this
190:07 - and now in the folder
190:10 - we have
190:11 - the formatted image looks absolutely
190:13 - horrible but it certainly is working
190:16 - the final thing that we are going to
190:18 - need is when we open the image we don't
190:20 - want to open the test.png we instead
190:23 - want to open a random file specified by
190:25 - the user this we get with sg
190:29 - pop up get file again
190:31 - in here i want to open something
190:35 - and no window should also be
190:38 - true and if i run this now
190:41 - we first of all get a dialog i want to
190:43 - pick my test image
190:45 - i want to open it and now i can make
190:49 - changes to it
190:51 - and i guess let's try another image
190:54 - test three the one we have already
190:56 - worked with and this one well we can
190:58 - make further changes to it but at the
191:00 - very least we know it's working
191:03 - cool so with that we have the entire
191:06 - image editor
191:09 - alrighty welcome back in this part we're
191:12 - going to create a music player it looks
191:15 - like this and then here you can click on
191:17 - play
191:17 - [Music]
191:21 - and then you have music playing you can
191:24 - stop as well and besides that you can
191:27 - also set the volume so in here i can go
191:29 - between 100 and 0.
191:31 - i guess let me play all of this and
191:34 - change the volume
191:44 - it's a fairly simple music player but i
191:46 - think it gets the basics across now
191:49 - before we can create this one we need
191:51 - pygm for the music and this we have to
191:54 - install first of all and that is going
191:57 - to happen either in the powershell or in
191:59 - the terminal
192:00 - all you have to do is either type pip
192:02 - install pi game for windows or
192:06 - or mac you are going to need pip 3
192:10 - install pi game in my case i already
192:12 - installed it so i don't have to do it
192:14 - but if you don't have it you have to
192:16 - install it
192:17 - alright with that let's get started
192:20 - once again we have our basic python
192:22 - pegui setup if i execute what we have so
192:25 - far
192:26 - we get some very basic setup like this
192:29 - it doesn't do very much right now but
192:31 - it's a starting point now first of all i
192:34 - want to set a default style and this i
192:37 - want to do right at the start and the
192:39 - one i want to create is called sg theme
192:42 - and the name here is called reddit
192:45 - if i run this now you can't see much of
192:47 - a change but this is a fairly whitish
192:50 - theme
192:51 - now with that covered let's talk about
192:53 - the layout and the main thing we have to
192:55 - start here is we have tabs
192:59 - so if i show the app again there are a
193:01 - couple of things that we haven't seen
193:03 - yet most importantly
193:05 - we have tabs here we have play and we
193:08 - have volume besides that the other thing
193:11 - that is going to be new is we have a
193:13 - play and a pause button and both of
193:16 - these are image buttons
193:17 - which are kind of a pain to import but
193:20 - this is what we have to start working on
193:23 - but i guess let's get started by
193:24 - creating the two tabs
193:26 - inside of the layout we are going to
193:28 - need a new kind of element and this if i
193:31 - add a bit of white space here is called
193:33 - sg
193:34 - tab
193:36 - group
193:38 - and inside of this we have to create
193:40 - individual tabs those we create with
193:43 - sg.tab
193:45 - and each of these tab elements needs two
193:49 - arguments the first one is the name of
193:51 - the tab so for example the first one
193:54 - could be play and besides that we need a
193:57 - layout
193:59 - and these are going to be all of the
194:01 - elements that are inside of this tab
194:03 - which in my case i want to create
194:06 - a new variable that i call play lay
194:10 - out
194:11 - and this is going to be another list of
194:13 - lists that contain elements i'm going to
194:15 - create all of those in a second besides
194:18 - that i want to duplicate all of this
194:22 - and create another tab this one is
194:24 - called volume
194:26 - and in here we have the volume
194:30 - layout
194:31 - and with this
194:33 - we have some basic tabs although there's
194:35 - going to be one limitation although
194:38 - there is going to be a limitation
194:40 - and that is i have to put all of this
194:42 - into two levels of lists and this again
194:46 - is the kind of annoying thing about
194:48 - python per gui you need lists all the
194:50 - time basically what this tab group is
194:53 - expecting is a layout that looks kind of
194:55 - like the layout we always created where
194:57 - we have one list for the entire layout
195:00 - and then another list for each
195:01 - individual row inside of that layout and
195:04 - these are the same two lists we are
195:05 - creating here we are basically creating
195:08 - a whole new layout inside of the layout
195:10 - we already have
195:11 - i hope that makes sense
195:13 - all right now with that we have to
195:15 - create our play layout and we have to
195:17 - create our volume layout
195:20 - so let's get started and make sure you
195:22 - are doing all of this after the theme so
195:25 - the elements you create get the theming
195:27 - and let me start with the play layout
195:30 - and in here
195:32 - once more we need a list
195:35 - and this list has to contain other lists
195:38 - and for now just to get started let me
195:41 - just add a single word in here or well a
195:43 - single text to be more specific
195:45 - for the play layout i want sg text
195:49 - and then here
195:50 - let me just write song name doesn't
195:52 - really matter what it is for now we are
195:54 - going to change this anyway
195:55 - besides that i need another layout and
195:58 - this is going to be the volume layout
196:01 - in here again i need a list of lists and
196:04 - the main thing inside of the volume
196:06 - layout is going to be an sg slider
196:10 - and this one at the minimum is going to
196:12 - need one argument and that is the range
196:15 - and for this one we need a tuple with
196:17 - the min and the max value in my case the
196:20 - minimum value is zero the maximum value
196:23 - is 100
196:25 - and with all of that let's run this and
196:28 - see what we get there we go we have tabs
196:30 - we have play and we have volume
196:33 - looks absolutely horrible for now but
196:35 - it's something we can work with
196:38 - and if you're following along you are
196:40 - probably going to struggle with all of
196:42 - the lists here so definitely go for this
196:45 - quite slowly it can be very confusing
196:48 - but now that we have all of that we can
196:51 - finish up the layout and there are quite
196:53 - a few elements we have to include so
196:56 - let's go through it step by step and
196:58 - let's get started with the volume layout
197:00 - because this one is quite simple now
197:02 - first of all i want to customize the
197:05 - slider and for that we have a couple of
197:08 - different attributes we can pass in here
197:11 - one argument is the default value and
197:15 - this is just going to be an integer
197:16 - which in my case is going to be 100. if
197:19 - i run this now and go to volume we are
197:22 - starting at 100
197:25 - and this is going to be 100 of the
197:27 - volume
197:28 - besides that for the slider i do want to
197:30 - have an orientation
197:32 - and this one is going to be h short for
197:35 - horizontal
197:37 - and if i run this now we have a
197:39 - horizontal slider already looking much
197:41 - better
197:43 - finally i want to have a key and the key
197:46 - for this one is going to be let's call
197:49 - it volume
197:51 - although this is not going to have any
197:53 - kind of visible change so well don't
197:55 - really have to run it
197:56 - now finally there's one more thing that
197:58 - i do want to do and that is i want to
198:01 - have this slider always in the center of
198:04 - the tab and for that i need a couple
198:07 - more elements
198:08 - first of all i need s g
198:11 - b
198:12 - push
198:14 - before and after the slider and that way
198:17 - it's always in the vertical middle
198:19 - besides that
198:21 - i want to have s g
198:23 - dot push
198:25 - before and after the slider on the same
198:27 - row
198:29 - so let me copy it
198:31 - there we go
198:33 - and with these push elements this slider
198:36 - is always going to be in the center of
198:38 - the tab now right now this isn't going
198:40 - to be visible
198:42 - and i think i forgot a comma let's try
198:46 - this now there we go
198:47 - the problem is that this slider
198:51 - is already the largest element meaning
198:53 - it determines how big the tab group is
198:56 - going to be
198:57 - and because of that you can't really see
199:00 - the slider being pushed into the middle
199:02 - but once we have my element you will see
199:04 - what i mean
199:06 - so for now don't worry too much about it
199:08 - but we basically finished with the
199:10 - volume layout so i can minimize it and
199:13 - now we can start working on the play
199:15 - layout
199:16 - this one is getting quite a bit more
199:18 - complex because in here we actually see
199:21 - two more new elements let me run the
199:24 - finalized one again because i forgot one
199:26 - really important thing so here is the
199:29 - final app
199:30 - the two new elements we need are the
199:32 - image buttons and besides that we have
199:36 - this progress bar at the bottom now the
199:38 - progress bar is surprisingly easy but
199:41 - the buttons are kind of annoying because
199:43 - we have to import an image
199:45 - let's do it right now and then i can
199:47 - explain as we go along
199:49 - the buttons should be right below the
199:51 - text so i want to add another row in
199:54 - here
199:54 - and to create an image button you need s
199:57 - g
199:58 - dot
199:59 - button
200:01 - and for now so we can see something
200:03 - let's create simple text buttons that
200:06 - are called play
200:08 - and besides that i want to copy all of
200:10 - this
200:11 - and call this one pause
200:14 - if on all of this now
200:16 - we have play and pause although those
200:19 - are text buttons which i don't want
200:22 - as a consequence i want to get rid of
200:25 - the text here
200:27 - and i have to replace it for both
200:29 - buttons with an attribute called image
200:32 - data
200:33 - now the problem here is that we couldn't
200:36 - just import an image
200:38 - what both of these data attributes need
200:40 - is a base64 data string of the image and
200:44 - this we have to create by using a couple
200:47 - of different modules
200:49 - so let's go through it one by one first
200:51 - of all we have to import base 64.
200:54 - besides that we need from io
200:57 - import
200:59 - bytes
201:00 - io
201:02 - and finally
201:04 - we need from
201:05 - eil
201:07 - import
201:08 - image these two you should be familiar
201:11 - with from the image editor base64 is new
201:14 - it's basically a data thing that we need
201:17 - oh and i forgot in the beginning you
201:19 - also have to install pillow um sorry
201:21 - about that
201:22 - these three modules we need to import an
201:25 - image and convert the image to a base64
201:28 - data string
201:29 - and this i want to do in a separate
201:31 - function because we have to do it twice
201:33 - let me create a new function and let's
201:35 - call it base64
201:37 - image
201:39 - import
201:40 - and all we need in here is a path
201:44 - now first of all we have to import the
201:46 - image and this i want to store in the
201:48 - image this is going to be done with the
201:50 - pillow library all i need here is
201:53 - image.open and pass the path in here
201:56 - i guess while we are doing this
201:58 - let me just call
202:00 - base64 image import
202:03 - and inside of the folder
202:08 - besides the python file we have a pause
202:11 - and a play button image and then we have
202:14 - the music file and for now i just want
202:16 - to work with the play image and this is
202:18 - a png file so to import it all i need is
202:22 - a string with play dot png
202:26 - and for now let me comment out this line
202:29 - here with the buttons so we're not
202:30 - getting an error and now if i run this
202:33 - we are not getting an error that's a
202:35 - good sign but we can't see anything
202:37 - because inside of this function i'm not
202:39 - printing anything so what i want to do
202:41 - is to print the image
202:44 - now let's run this again and we can see
202:46 - we have a pillow image it doesn't tell
202:48 - us very much but it's a start
202:52 - now the image itself is completely
202:54 - irrelevant to us we have to convert it
202:57 - and this we need to do by creating a
203:00 - buffer so let me call it a buffer and
203:03 - this we get with bytes io and just
203:06 - calling it that's all you need
203:09 - the explanation here gets a bit more
203:10 - technical and it's not really what we
203:12 - need so i'm going to go over this a bit
203:14 - more quickly
203:16 - once we have this i want to save the
203:19 - image
203:20 - using the buffer
203:22 - and then i have to specify a format and
203:25 - the format in my case is going to be png
203:29 - with this we have an image available
203:31 - inside of our code and this image we now
203:35 - want to convert and this we do with the
203:37 - base64 module so we need base64
203:43 - and then dot b 64 encode
203:47 - after that we need buffer and then get
203:51 - val u
203:53 - all of this i want to store in a
203:54 - separate variable
203:56 - and let me actually print it to show
203:58 - what we get so
204:00 - b64 let me run it and we are getting a
204:04 - really long string that doesn't make any
204:06 - sense
204:08 - although to our computer this is
204:10 - something that is really helpful
204:12 - all i want to do from the function is to
204:14 - return b
204:16 - 64.
204:17 - once we have all of that
204:19 - i can uncomment all of this and now for
204:23 - the image data i can call my base 64
204:26 - image import
204:27 - and
204:28 - for the play button i want to have play
204:32 - dot
204:33 - eng and for the image data
204:36 - let me put it on a separate line because
204:38 - this is going to be very hard to read
204:40 - otherwise
204:42 - there we go
204:43 - i want to have the same function
204:45 - except now
204:47 - i want to have
204:48 - horse dot png
204:51 - and now if i run out of this
204:53 - we have the two buttons
204:55 - we still have to make some changes but
204:57 - at the very least it's a good start
205:00 - and well
205:02 - i do understand that this function here
205:04 - is really complicated and very technical
205:07 - and this is one of the slightly more
205:08 - annoying things in pisces in pagui
205:10 - importing an image is surprisingly
205:13 - difficult but well for our purposes we
205:16 - are done with this one so let me
205:17 - minimize it and never think about it
205:19 - again
205:20 - now besides that for both buttons i want
205:23 - to make two more changes the first one
205:25 - is i want to have a button color that is
205:28 - going to be white
205:30 - now if i run this the buttons already
205:32 - look better
205:34 - and besides that
205:36 - i want to have a border
205:39 - width
205:40 - of 0. that way we don't have a border
205:43 - and now if i run this we have the two
205:45 - buttons and this isn't looking bad at
205:47 - all
205:48 - and let me put the list ending here so
205:52 - this should make sense
205:54 - we have one row here we have another row
205:57 - with the buttons and finally we need one
206:00 - more main row and this is going to be
206:02 - the row with the progress bar and this
206:05 - we get with sg.pro
206:08 - res
206:10 - and by default this is going to need one
206:12 - argument the maximum length for now
206:15 - let's go with
206:17 - and now if i run this
206:20 - we have a very faint bar at the bottom
206:23 - it's really hard to see as a consequence
206:27 - let's change this by giving it a size
206:30 - and the size here let me go of 20 by 20.
206:33 - this is looking much better
206:35 - so for these numbers just play around to
206:38 - see what looks good
206:40 - we are nearly done
206:42 - the last thing i want to do is to add
206:45 - some proper spacing here because if i
206:47 - run out of this well you can already
206:50 - tell
206:51 - i want to have larger text and i want to
206:53 - have these elements here more in the
206:57 - middle
206:58 - of the entire music player
207:02 - which means i once again have to use a
207:04 - couple of v push and push elements
207:08 - all the way at the top i want to have a
207:10 - v push element
207:13 - this i want to duplicate and put it
207:15 - below the text and i want to duplicate
207:17 - it again
207:18 - and put it between the bottom row
207:21 - and the progress bar
207:23 - if i run out of this now
207:25 - we have a bit more spacing between the
207:26 - elements which i think looks much better
207:29 - besides that to get the text in the
207:31 - middle i want to use sg and push
207:36 - before and after the text element so let
207:39 - me duplicate it
207:41 - here we go
207:42 - now we have the song name in the middle
207:44 - and while we are here
207:47 - let me change the font of the music
207:49 - player to something like ariel
207:52 - 20 so it's a bit larger
207:55 - there we go this feels much better
207:58 - the same thing we now have to do to the
208:00 - buttons so for the buttons
208:03 - before the button i want to have sg push
208:06 - and after the final button i want to
208:08 - have another sg push that way
208:11 - i am getting an error because i forgot a
208:14 - comma now let's try this now we have the
208:16 - play and the pause button right in the
208:18 - middle
208:20 - what i found a tiny bit annoying here is
208:23 - that there was hardly any gap between
208:25 - the two buttons
208:27 - to fix that i did a tiny bit of a hack i
208:31 - guess you could call it
208:33 - what i did is between the two buttons i
208:36 - added sg text
208:39 - with
208:40 - an empty string
208:42 - and now if i run this
208:44 - once again i forgot the comma now if i
208:46 - run this we have a bit more spacing
208:48 - between the two buttons which i think
208:50 - looks better it's fairly subjective
208:52 - but alright with that we have the entire
208:55 - play layout
208:58 - the final thing that we need is we have
209:01 - to add some keys because i have to
209:03 - target the progress bar and both of the
209:06 - buttons
209:07 - and for that for the progress bar i want
209:10 - to have a key that i called
209:13 - row grass
209:15 - and for each of the buttons let me put
209:17 - it right here
209:20 - i have a key
209:22 - and for that
209:24 - let's call the play button play
209:27 - and the pause button pause
209:30 - let's try all of this to make sure i
209:32 - didn't make a mistake this is still
209:33 - feeling pretty good cool
209:35 - so with that we have our basic layout
209:39 - so i can minimize all of this
209:41 - and now we can actually start working on
209:43 - the functionality
209:45 - the very first thing that we are going
209:47 - to need here is a music file and this we
209:51 - are getting with an import so before we
209:54 - are doing any of this i want to create a
209:57 - file import
209:59 - let me add a bit of white space here and
210:01 - a comment with import song
210:05 - this we get by creating a path variable
210:09 - and i want to create sg pop
210:12 - up
210:14 - underscore get underscore file the same
210:16 - thing we have seen earlier in here we
210:18 - want to open a file
210:20 - and no
210:22 - underscore window should be true just in
210:25 - case you forgot let me print the path in
210:27 - terms of what we get and now if i run
210:30 - all of this the first thing we see is a
210:33 - file explorer and here we can see the
210:36 - folder i have all of my stuff in
210:38 - and the file i want to open is great
210:40 - boss which is a music file if i now
210:43 - click on open
210:45 - we have a path to this file
210:48 - and from this i am getting the name of
210:50 - the song
210:51 - in this case that is great boss
210:55 - although i have to clean this one up a
210:57 - tiny bit i have to get rid of all of
211:00 - this here and all of this so i only have
211:02 - great boss left
211:05 - this i want to do inside of a new
211:07 - variable let me call it song name
211:10 - and here i want to get my path and i
211:12 - want to split
211:14 - wherever we have a forward slash
211:17 - and from that i only want to get the
211:19 - last element
211:21 - and let me print the song name to see
211:24 - what we get and run all of this again
211:27 - now we get great boss.ogg
211:29 - now you could keep it like this but i do
211:32 - want to get rid of the ogg as well
211:36 - and for that i want to add another dot
211:38 - and split all of this again
211:41 - this time wherever we have a dot
211:44 - and now i want to have the first element
211:47 - or the one with the index zero
211:49 - with that i can run all of this again
211:51 - select great boss again and now we get
211:54 - great boss this is feeling much better
211:57 - and this song name
211:59 - i now want to use inside of the play
212:02 - layout or the song name
212:05 - there we go and now if i run this
212:08 - i can select great boss or any music
212:10 - file and now the name is going to be
212:13 - great boss
212:14 - cool so with that we have a song name
212:17 - problem is we don't have an actual song
212:20 - we just have a file path now for the
212:23 - actual song we are going to need pygame
212:25 - because python begui doesn't have music
212:28 - playing functionality in build that's
212:30 - actually kind of a rare thing in python
212:32 - in general very few modules can't play
212:35 - music it's a bit weird but in this case
212:38 - i want from pygame import mixer
212:42 - mixer is the pie game part that plays
212:44 - music
212:46 - and this we have to initiate so usually
212:49 - when you use pygame you have to run
212:51 - pygame.init for anything to work in this
212:54 - case we only want to initiate mixer so
212:57 - we want mixer.init
213:00 - if you are not running this mixer is not
213:02 - going to work this is a really important
213:04 - line
213:06 - and now that we have that i want to
213:08 - import the actual song
213:11 - and this we get with mixer dot sound
213:15 - and in here we need a path fortunately
213:18 - the path we already have it's this one
213:20 - up here so i can just copy it and paste
213:23 - it in here
213:24 - and i guess once we have done all of
213:26 - this let me print what we get
213:30 - so i can select great boss again
213:33 - and now we have a sound object at some
213:36 - point in memory
213:38 - which is really nice because this
213:41 - we can just play
213:42 - all we need is the song itself and then
213:46 - play
213:47 - if i run out of this again get my music
213:55 - and there we go we had some music
213:58 - although i don't want to play the song
214:01 - right when the program is starting so
214:03 - let me get rid of this for now
214:05 - and let me minimize the play layout as
214:07 - well so we have a bit more space to work
214:09 - with
214:10 - so now we do have a song we just have to
214:12 - figure out where to play it or rather
214:15 - when to play it
214:17 - and this is going to happen down here
214:20 - essentially i want to play the song when
214:23 - we are pressing the play button
214:25 - which we get inside of the play layout
214:28 - the button is called play
214:31 - which means in here i want to check
214:33 - if
214:34 - event is equal
214:37 - to
214:38 - play
214:40 - and if that is the case i want to get my
214:42 - song and play it
214:45 - and now let's try this again
214:47 - i want to import the same song and right
214:49 - now there shouldn't be any music but if
214:52 - i click on play
214:57 - we could hear some music i don't want to
214:59 - talk over the music because that makes
215:01 - me very difficult to hear but this is
215:03 - definitely working
215:05 - besides that i also want to have the
215:07 - ability to pause the music
215:09 - and this we get with if event is equal
215:13 - to
215:15 - pause i called this button
215:18 - and to pause music we need mixer dot
215:22 - pause unfortunately the song file itself
215:26 - doesn't have any pause functionality you
215:29 - have to target the entire mixer so if
215:31 - you play multiple music files they are
215:34 - all going to be paused but in our case
215:36 - that isn't really a problem
215:39 - so let's try
215:42 - once again i can select a file i can
215:44 - play it
215:48 - and i can also pause it
215:50 - the issue now is if i click on play
215:52 - again we are starting from the very
215:54 - beginning so let me try
216:00 - and you can see the problem that after i
216:02 - clicked on pause and play again we are
216:05 - starting from scratch which i don't want
216:07 - instead
216:08 - if the music is paused i want to resume
216:11 - it not play from the start
216:14 - and this we can also achieve quite
216:16 - easily
216:17 - because we can check if mixer dot get
216:21 - underscore busy
216:23 - don't forget to call it
216:24 - and this we want to check if it is false
216:28 - now this mixer dot get busy is a tiny
216:31 - bit weird you might assume from the name
216:33 - it checks if we are playing music or not
216:36 - and you wouldn't be wrong it basically
216:39 - does that the problem is once we started
216:42 - playing once this get busy is always
216:45 - going to be true
216:47 - which means if we haven't played yet
216:49 - this is really useful because if we
216:51 - haven't played anything we always want
216:53 - to start the song from scratch
216:55 - however if that is not the case we want
216:57 - to unpause the song
216:59 - meaning if we haven't played anything
217:01 - yet we always want to start the song
217:03 - from scratch but if we have already
217:05 - played something so else i just want to
217:08 - unpause the mixer
217:10 - which means i want mixer dot and pause
217:14 - and then we should just unpause the song
217:16 - like the method implies
217:18 - let's try all of this i can import the
217:20 - same file
217:22 - and now if i click on play
217:26 - we have music again and i can also stop
217:28 - it but now if i click on play again
217:32 - we are resuming and not starting from
217:34 - scratch again so this is working cool
217:38 - next up we can start working on the
217:40 - volume and this is actually very easy to
217:42 - implement
217:43 - it's going to work kind of like the
217:45 - sliders in the image editor so in my
217:48 - case i want to have the song and i want
217:50 - to set the volume
217:53 - and this is a pie game function in here
217:56 - for set volume we need a number between
217:58 - 0 and 1 with 1 being the full volume and
218:02 - 0 being the song being muted
218:05 - for this one i want to get all of my
218:08 - values and the values i want to target
218:11 - are the values from the volume
218:14 - slider
218:15 - so volume
218:17 - let's add the dashes as well so the
218:19 - volume slider is this slider here
218:23 - and inside of it we always target
218:25 - whatever value we currently have
218:26 - selected
218:28 - now for that to work there's one more
218:29 - thing that we do need and that is a time
218:33 - out inside of the read method
218:36 - let me set it to 1 this number should be
218:38 - very low and this is all we needed let's
218:42 - try this again now
218:44 - same file
218:45 - and let me play it
218:51 - if the volume is at zero you shouldn't
218:53 - hear any song but now if i increase it
218:55 - we should hear music again
218:56 - [Music]
219:04 - so alright with that we have our volume
219:08 - slider this one was actually really easy
219:10 - to implement
219:11 - finally the last thing we are going to
219:14 - need let me run all of this again
219:17 - i want to show the progress of the song
219:20 - in the progress bar down here
219:23 - now for that
219:24 - we need a separate timer because pygame
219:28 - has no functionality to check how far we
219:30 - are into the song
219:32 - which means we need another pie game
219:34 - module for time
219:36 - so all the way to top of the code
219:38 - besides mixer i also want to import time
219:43 - and time by itself also needs to be
219:45 - initiated although it's not an init
219:47 - method instead
219:49 - we have to create a clock
219:51 - and this we get with time dot
219:54 - lock
219:56 - if you don't have this clock object
219:58 - somewhere in your code pygame is not
220:01 - going to check the time so this is
220:03 - really important the code would still
220:05 - work even if you don't have it but time
220:07 - would always be zero so this is really
220:09 - important
220:10 - and besides that i need a couple more
220:14 - attributes or variables to be a bit more
220:16 - specific let me save them under a timer
220:19 - first of all i need the entire length of
220:22 - the song
220:23 - so song length
220:25 - and the length of the song i get with
220:27 - the song and this is this music file we
220:30 - have imported
220:32 - and now i want to get
220:35 - underscore
220:36 - length
220:37 - let me print what we get so song not
220:41 - song name i want to have song length
220:44 - let me run all of this again
220:46 - and we get the length of the song is 110
220:49 - seconds point something
220:52 - now this point something is a bit
220:54 - annoying which means i want to convert
220:57 - all of this to an integer
221:01 - but the seconds i do want to keep
221:03 - because they are very easy to work with
221:06 - and before we continue this song length
221:09 - we already have to use because inside of
221:12 - the play layout
221:14 - or the progress bar
221:16 - right now this is always going to be a
221:18 - hundred but the maximum length of the
221:21 - progress bar should be the length of the
221:23 - song which means i want to pass my song
221:25 - length in here
221:27 - if i run out of this you are not going
221:29 - to see a difference
221:30 - because we are setting the length of
221:32 - this bar separately
221:34 - with this size attribute here
221:38 - but well trust me it works
221:40 - besides that for the timer we're going
221:43 - to need three different variables the
221:45 - first one is time since start
221:48 - and this one is going to be zero
221:50 - then we need a pause amount
221:53 - this one is also going to be 0 and then
221:56 - we need a playing variable this by
221:59 - default is going to be false
222:01 - and let me explain how this is going to
222:03 - work
222:04 - basically as soon as we're starting the
222:06 - song so let me add here this is the
222:09 - starting point which is going to be zero
222:12 - and from this point we are going to
222:14 - check
222:15 - the time of how long the song is played
222:17 - and that number we are storing inside of
222:20 - time since start
222:23 - and this is only going to be updated if
222:26 - playing is true
222:28 - however now we do have a problem because
222:31 - this logic always checks the time since
222:34 - the start
222:35 - which means we are always starting this
222:37 - timer from the point zero and this is a
222:40 - problem because we could pause the song
222:43 - for example we could play the song until
222:45 - here then we pause for a while then we
222:48 - play again then we pause again and then
222:50 - we play again
222:53 - in the current setup we are always
222:55 - checking this entire distance and this
222:58 - is what we are storing inside of time
223:00 - since start
223:02 - which isn't really accurate because we
223:04 - well skipped some huge sections
223:07 - and for that we have the pause amount
223:11 - and this one is increasing the number
223:14 - whenever playing is false and at the end
223:17 - for the progress bar we're going to
223:19 - subtract this amount
223:22 - from the time being played
223:25 - and the amount here is the sum of these
223:28 - two individual pauses
223:31 - and that way we always have the correct
223:34 - progress inside of the song now the
223:36 - logic here is a tiny bit annoying and
223:38 - you definitely have to think about it
223:40 - but well it is what it is
223:43 - it sounds much worse than it actually is
223:46 - let's actually implement it
223:49 - inside of the while loop before i am
223:52 - doing anything else i want to check if
223:55 - playing is true
223:57 - and if that is the case i want to update
224:00 - my time since start
224:02 - and the time i get with time dot get
224:05 - underscore ticks
224:07 - and this playing should be true as soon
224:10 - as we are pressing the play button
224:12 - which means inside of here playing
224:15 - should be true as soon as we press play
224:19 - and if we are pressing pause
224:21 - then playing should be false
224:25 - with that we are getting some numbers
224:27 - and these numbers still inside of the if
224:29 - statement for playing we can target our
224:32 - progress bar this we get with window and
224:35 - in here i want to have my
224:38 - progress bar
224:40 - i think i called it progress let me
224:41 - double check yes
224:43 - we are checking this progress bar here
224:46 - and this progress we want to update and
224:49 - in here we need a number
224:52 - now technically you could add time since
224:56 - start but that wouldn't really work
224:59 - because pygame checks the time in
225:01 - milliseconds
225:02 - and we want to have a number here in
225:04 - seconds
225:06 - that is very easily converted all we
225:08 - have to do is to divide the milliseconds
225:10 - by 1000 and then we get seconds
225:13 - and let me use floor divide so we're
225:16 - getting integers
225:18 - and with that we should already have
225:20 - something that we can't see so let's
225:22 - play all of this
225:24 - let me select the file and now
225:31 - you can see we have something
225:35 - although
225:36 - if you pay close attention there were a
225:38 - couple of problems first of all when i
225:41 - started to play the music we started
225:44 - somewhere here we didn't start all the
225:46 - way on the left
225:48 - on top of that if i play the music again
225:52 - we are making a huge skip
225:54 - and the reason is what i explained
225:55 - earlier
225:56 - basically
225:58 - let me move it to the side
226:00 - this time send start always starts from
226:04 - the beginning so when we are starting
226:05 - the program but between me playing the
226:08 - program and starting the song there was
226:10 - a time difference and this is why the
226:12 - progress bar started with a slight
226:14 - offset
226:15 - and by the same logic if we are pausing
226:17 - the song and playing again we are again
226:20 - starting from the beginning of the
226:21 - program and that way if we start again
226:24 - we get some weird numbers but this we
226:26 - can account for quite easily all we have
226:28 - to do when we get our timestamp start i
226:32 - want to subtract the pause amount the
226:36 - number we created here
226:39 - and every time we are pausing so either
226:42 - here or in here
226:45 - i want to increase the pause amount or
226:47 - more specifically once we start playing
226:50 - or unpausing again i want to add these
226:52 - numbers
226:54 - and this is going to be the same for
226:56 - both of these lines
226:58 - as a consequence right below playing i
227:02 - want to add my pause amount plus equal
227:06 - time dot get underscore ticks don't
227:09 - forget to call it
227:10 - minus time
227:12 - since start
227:14 - and this is going to give us the
227:16 - difference between the last pause and
227:18 - our current time and this is what we
227:20 - want to remove from our current progress
227:24 - i hope that makes sense the timer does
227:25 - get a bit confusing
227:27 - but with all of that we are basically
227:30 - done
227:31 - so let me run out of this again raid
227:33 - boss
227:34 - and now
227:35 - the timer starts
227:38 - all the way on the left
227:40 - and if i pause
227:43 - and wait a few seconds and start again
227:48 - [Music]
227:52 - we are progressing quite nicely so with
227:55 - that we have created a music player
227:58 - wasn't actually so bad
228:00 - i guess in here you do have a couple of
228:02 - fairly complicated things or slightly
228:04 - more complicated things
228:07 - the timer in particular is going to take
228:09 - you some time to get your head around so
228:11 - if you really want to understand it
228:13 - definitely have a look at this in your
228:15 - own time
228:16 - besides that
228:17 - the function to import images is well
228:21 - very annoying and possibly gooey but
228:23 - this is going to work for any kind of
228:25 - image so you don't really have to change
228:27 - it all that much if you want to adopt it
228:29 - to your own logic
228:31 - now before we finish this part i
228:34 - realized i made one mistake
228:36 - and that happened down here
228:39 - because set volume expects values
228:41 - between 0 and 1 but the values inside of
228:44 - volume are between 0 and 100 which means
228:48 - we have to divide all of this by 100
228:51 - and that way we are getting a proper
228:53 - volume setup but with that we are done
228:57 - with all of this so now we have our
228:59 - music player for the next part we are
229:01 - going to create a weather app
229:04 - and this one is going to look like this
229:07 - we have a text field and in here we can
229:09 - type in any town or country let's say
229:12 - tokyo
229:13 - and we get the weather for tokyo it also
229:16 - works for entire countries let's say
229:18 - japan in this case
229:21 - and okay we get the same place but let's
229:24 - try another country usa
229:28 - we always get the capital of the country
229:30 - and the weather for the capital
229:33 - and let's try one more let's say paris
229:38 - and there we go this is working quite
229:40 - well
229:42 - and for this to work we are going to
229:45 - need one really important module and
229:47 - this one is called beautiful soup and
229:50 - what this module does is it scrapes the
229:52 - web which means it looks at a website
229:55 - and it takes information from that site
229:57 - and in our case we are going to use the
229:59 - google weather forecast to make all of
230:01 - this work
230:02 - but to get beautiful soup you need the
230:04 - powershell or the terminal
230:06 - and you have to type pip install
230:08 - beautiful soup 4 or pip 3 install
230:10 - beautiful soup 4. and with that let's
230:13 - have a look at the code and here once
230:15 - more i have the skeleton app that
230:18 - doesn't do anything right now well it
230:20 - does something but not very much for my
230:22 - layout i want something like this this
230:26 - here is my entire window
230:28 - and i want three major sections on the
230:32 - top
230:33 - we have the input element
230:35 - then on the left we have an image this
230:38 - could be a sun for example
230:40 - this is a horrible sun but you get the
230:43 - idea
230:44 - and then on the right side of that
230:47 - i want all of the weather information so
230:49 - here we have the name of the place we're
230:50 - looking at the temperature
230:53 - the current weather
230:54 - and the time i think as well
230:58 - doesn't really matter this is the
231:00 - overall setup i want to create
231:02 - and for that to work we need the column
231:05 - element again which i want to put in a
231:07 - separate variable
231:09 - let's call one the image column
231:12 - and sg and column and this i want to
231:16 - duplicate because in here i want to have
231:20 - an info column for the first row let me
231:23 - put this over multiple lines that's
231:25 - going to make things a bit easier to
231:27 - understand there we go for the first
231:29 - line i want sg input
231:32 - and i want an sg
231:34 - button
231:36 - and for the input here i want this to
231:39 - expand x and this should be true and
231:42 - let's give this one a key as well
231:45 - i guess input
231:47 - tends to work out quite well here
231:50 - and for the button i want something like
231:52 - enter or submit i guess enter works fine
231:55 - this would then be our first row and for
231:57 - the second row
231:58 - i want to have my
232:01 - image column
232:02 - and my info column
232:05 - and let's start with the info column
232:07 - that's going to be the longer one
232:10 - in here again we need a list that
232:12 - contains other lists and this one is
232:14 - going to contain quite a few different
232:16 - elements
232:18 - i guess the best way to work with this
232:20 - one is going to be to just copy the
232:22 - elements i want
232:24 - and paste them in here
232:26 - there we go
232:27 - we have three bits of text we have a
232:30 - text for the location the time and the
232:32 - temperature
232:33 - each of those have their own custom font
232:35 - and font size they all have a background
232:38 - color they all have the custom padding
232:41 - or these these and these
232:44 - then we have a text color and a
232:46 - justification and a visibility
232:48 - there's quite a lot of stuff in here
232:52 - and for the column things are going to
232:54 - be a touch easier
232:56 - because all i want to add in here is sg
232:59 - dot
233:00 - image
233:01 - and by default there's no image
233:04 - but i do want to give this one a key
233:07 - that is going to be
233:08 - image
233:10 - and i also want to give this one a
233:11 - background color
233:12 - that should just be plain white so ff ff
233:16 - and ff
233:18 - i think what i forgot is that this needs
233:20 - to be
233:21 - inside of another list
233:23 - let's try this one now
233:25 - and we can see that well we can't really
233:28 - see anything the reason for that is
233:30 - that all of these elements here are
233:33 - invisible so we have visible set to
233:35 - folds and i think that's a case for all
233:39 - of them right all of these elements are
233:42 - set to invisible so we can't see them
233:46 - and for the image we can't see it
233:48 - because we don't have an image yet that
233:50 - should also make sense
233:51 - and to make all of this work
233:54 - let's
233:56 - make all of this visible once we are
233:58 - pressing a button
234:00 - in my case this means if event is equal
234:03 - to i call this one enter
234:06 - and if that is the case
234:08 - i want to get my window
234:11 - and the first one is called location
234:16 - and let me copy this two times i also
234:18 - want to get my
234:20 - time and i want to get my temp
234:25 - and all of those i want to update
234:28 - and for now let's set visible
234:31 - to true that is important for all of
234:33 - them
234:34 - and besides that they all need to have
234:36 - some kind of string by default right now
234:39 - they have nothing
234:41 - and let's pass test in here just to see
234:43 - what we get
234:44 - and while we are here we can let me copy
234:48 - this one more time
234:49 - i want to set a random image so image i
234:52 - want to update
234:54 - and for the image there's something i
234:56 - haven't talked about yet and that is
234:59 - that inside of my folder
235:02 - we have another folder called symbols
235:04 - and then here we have various weather
235:07 - symbols
235:08 - and for now let's say i want to import
235:12 - snow looks quite good and to import that
235:14 - one
235:15 - i need a string
235:17 - then i want to go inside of the symbols
235:20 - folder and then here i want snow dot p
235:23 - and g
235:24 - and now if i run all of this and i click
235:27 - on enter
235:28 - now we have some sort of basic layout
235:31 - although doesn't look very good yet
235:34 - one way to improve all of this
235:37 - is to run
235:39 - sg.theme
235:40 - and the theme i want to go with is
235:42 - called reddit
235:44 - let's try this now this is already
235:46 - looking significantly better
235:48 - now let me click on enter
235:50 - and this is feeling much nicer
235:52 - the one customization thing i forgot was
235:55 - the enter button
235:57 - let's do this one right now
235:59 - this happens all the way up here
236:02 - and let's also set the border width
236:05 - to 0
236:07 - and now we have a nice flat button if i
236:09 - click on this now we pretty much have
236:12 - the basic layout that we are going to
236:14 - need
236:15 - the other thing i forgot is that for the
236:18 - location text the font color should be
236:21 - white
236:22 - and this i have done for my time so i
236:25 - can just copy text color from here
236:29 - and pass it
236:30 - up here
236:32 - let's try now and enter and this is
236:34 - feeling much nicer
236:36 - so with that we have the basic layout
236:41 - now what we have to figure out is how to
236:43 - get the information from a website
236:47 - to make the actual weber information
236:49 - work we need two modules first of all i
236:53 - want from bs4 which is beautiful soup
236:56 - for
236:57 - import beautiful soup
237:01 - and since this is very annoying to type
237:04 - i am going to abbreviate this as bs
237:07 - and besides that we want to import
237:09 - requests
237:11 - to use them i want to keep all of this
237:13 - inside of one function let's call this
237:16 - one get weather
237:18 - data
237:19 - and in here i want to pass in a location
237:22 - the very first thing we need in here is
237:24 - a url so from what website do we want to
237:28 - get our information
237:30 - and
237:31 - let me explain how the system is going
237:33 - to work here i have a browser open and
237:36 - what i want to look for is let's say the
237:38 - weather in london
237:41 - and now google is going to give me some
237:44 - predictions
237:45 - and this is the information i want to
237:47 - get
237:48 - but now i need to figure out how i get
237:51 - to this url here
237:53 - without being able to type into the
237:56 - search bar
237:57 - and the trick essentially is that for
237:59 - this url
238:01 - this part always stays the same all that
238:04 - really changes is the location
238:06 - afterwards and then all of this stuff
238:08 - here we could just ignore we will get to
238:11 - the same website
238:13 - which means i could replace this london
238:16 - with something like let's say boston
238:19 - i will get to boston i could add usa
238:24 - and i would always have the right google
238:26 - search
238:28 - which means i want to copy this string
238:30 - here and return to my code and now the
238:33 - url is going to be the string we just
238:36 - got and then i want to add the location
238:40 - and this should be an f string
238:44 - just to make sure here what we could do
238:47 - is run the replace method
238:49 - that if we have any kind of space in
238:51 - this word we want to replace or well
238:54 - remove that space for example if we type
238:57 - new york this should be spelled in one
239:00 - word since for a url we can't have any
239:03 - kind of space in there how we are going
239:05 - to use this weather data is after we're
239:08 - pressing enter
239:09 - we run get weather data and we are
239:12 - passing in the values
239:15 - of the
239:17 - input field let me actually print the
239:20 - url just so we can see this is working
239:23 - and we are getting an error
239:26 - i have to change these single quotes to
239:28 - double quotes otherwise python is
239:31 - getting confused
239:33 - now let's try this there we go
239:36 - let's say i want to type in here
239:39 - berlin we haven't used yet if i press
239:41 - enter we get plus berlin with a space
239:44 - this shouldn't be in there and this
239:46 - space happens because there's a space
239:48 - here
239:49 - let's try it again now
239:51 - uh paris
239:53 - there we go we have paris
239:55 - and if i type in new york
239:58 - i keep on misspelling new york
240:01 - we get new york and this is then always
240:03 - the string we want to look for
240:06 - and
240:06 - looking for a website first of all means
240:09 - we have to create a session and this
240:11 - happens with requests dot session
240:15 - and this is basically what we tell the
240:17 - website when we are approaching it
240:19 - and now we need session dot
240:22 - address
240:24 - and here we have to define a string that
240:26 - says user agent and for this one we need
240:29 - one longer string let me copy it
240:32 - actually
240:33 - it looks like this
240:35 - it's basically telling the website we
240:37 - are approaching what kind of browser we
240:39 - are
240:40 - it's very technical information i would
240:42 - recommend to just copy this bit here and
240:45 - now we want to use that information to
240:47 - get an html document and that we get
240:50 - with sessions.get
240:52 - and we want to pass in the url and this
240:55 - is now what we can use with beautiful
240:57 - soup
240:58 - and what we have to do is to create what
241:00 - is called a soup and this we get with bs
241:04 - and in here i want to pass in html dot
241:07 - text
241:08 - and now what i want to do is called an
241:10 - html
241:12 - parser
241:13 - and let me explain what this means here
241:15 - is the website we have just seen
241:18 - but what our computer sees is something
241:21 - like this this is the html code of the
241:24 - website and all of these elements
241:26 - combined create all of this
241:29 - and what we have just done in the code
241:31 - and what we have just done in the code
241:33 - is to copy this entire text and paste it
241:37 - in our code
241:38 - which means now we have to figure out
241:40 - what elements we are looking for
241:43 - and that is what beautiful soup is for
241:45 - and in our case we want to get a name we
241:48 - want to get a time we want to get the
241:51 - weather and we want to get the
241:53 - temperature and these bits of
241:55 - information you get with soup dot find
241:58 - and in here we are looking for specific
242:00 - elements in web development they're
242:02 - called a diff it's basically a container
242:05 - and that container is going to have
242:07 - attributes
242:09 - which is shortened here to attrs
242:12 - and to attribute we are looking for is
242:14 - called an id
242:16 - and id in html is supposed to identify
242:19 - one specific element
242:21 - and the id we care about is called wob
242:25 - location and now i want to get the text
242:29 - from that bit
242:31 - and just to see if this is working let
242:34 - me comment out all the other things and
242:36 - let me print the name
242:39 - if i run this now i can type in london
242:43 - and if i click on enter we wait for a
242:45 - second and we get london uk
242:48 - if i click on we didn't use rome yet
242:51 - we get rome metropolitan city of rome
242:54 - italy
242:55 - and that is the information we are
242:56 - getting from the google weather forecast
242:58 - and now i have to do the same thing for
243:01 - the other variables as well and let me
243:03 - just copy
243:05 - this
243:06 - line here a couple of times because this
243:08 - is going to repeat a fair bit
243:11 - now for the time we need wb and dts
243:15 - or the weather we need wob dc
243:20 - and for the temperature we need tm and
243:24 - now once we have all of that i want to
243:26 - return the name the time
243:28 - the weather and the temperature i can
243:32 - close this function because we are done
243:34 - with it
243:35 - actually let me open it one more time
243:37 - because i want to get all of these
243:39 - variables
243:41 - get them
243:43 - returned from the function
243:46 - so now i have all i need to update all
243:49 - of these values here
243:51 - for the location instead of test
243:54 - i want to have the name
243:55 - for the time
243:57 - i want to have the time for the
243:59 - temperature
244:00 - i want to have the temperature
244:03 - the image we are going to cover in just
244:05 - a second
244:06 - and let's try this now and let's say one
244:10 - place we haven't used yet i guess brazil
244:12 - we can try
244:14 - do we get an error
244:17 - okay
244:18 - inside of here
244:21 - the problem i have is that the weather
244:23 - and the temperature are not inside of
244:25 - divs they are inside of a span document
244:28 - and i'm not going to explain web
244:30 - development but span elements are
244:32 - basically other types of container so
244:34 - this is why we get confused here
244:36 - let's try it now brazil again
244:39 - and now
244:41 - we get
244:42 - sao paulo and brazil
244:44 - we have 27 degrees and we have the
244:47 - current time
244:49 - although i do want to make some updates
244:51 - for the time i only care about the date
244:54 - not the actual time
244:56 - as a consequence what i want to do is to
244:58 - split the time we get
245:00 - and split it wherever there is a space
245:04 - and from the list i want to get the
245:06 - first entry which is the day of the week
245:10 - let's use one we haven't used yet let's
245:12 - say russia
245:14 - and now we only have the day of the week
245:17 - and for the temperature i want to show
245:20 - the temperature with a degree symbol and
245:23 - then the weather in brackets afterwards
245:25 - for that i have to turn this thing into
245:28 - an f string
245:30 - so let me put some brackets around it at
245:33 - the quotation marks
245:35 - and now to get the degree symbol we need
245:39 - a unicode character and that one looks
245:42 - like
245:42 - this and now if we try this
245:45 - let's say beijing
245:48 - and if i try this
245:50 - we get 8 degrees
245:54 - and besides that i also want to show
245:57 - the current weather in brackets
246:00 - this should be inside of the string like
246:04 - this
246:05 - and let's try now
246:07 - let's go with london
246:10 - and now we can see 11 degrees and cloudy
246:13 - this one is working really well what we
246:15 - have to figure out is the image
246:19 - and this is going to be a bit more
246:21 - extensive
246:22 - and essentially here we have a bit of a
246:24 - problem so let me copy how i got the
246:27 - image for one weather condition
246:30 - and this is the weather condition for
246:31 - sun it looks like this it just needs to
246:34 - be formatted properly
246:37 - and here we go
246:38 - the problem here is for the weather we
246:40 - have a ton of different options so
246:42 - google weather knows something like 40
246:44 - different weather conditions and we have
246:46 - to account for literally all of them
246:49 - in my case if we have sun sunny clear
246:53 - clear with periodic clouds then i want
246:55 - to have the sun symbol
246:58 - besides that
246:59 - the other symbols i want to use let me
247:02 - just copy them in
247:03 - are going to look like this
247:06 - all we are looking for if the weather is
247:09 - in partly sunny mostly sunny all of the
247:12 - kind of sunny we get the part sun image
247:15 - if the weather is in rain chance of rain
247:17 - light rain showers and so on we have the
247:19 - rain symbol if weather isn't some kind
247:21 - of thunderstorm we get these
247:24 - if we have mist dust fog smoke all of
247:26 - these we have the fox symbol
247:28 - and if the weather is in any form of
247:30 - snow
247:31 - we get the snow image
247:34 - i hope this makes sense it's just very
247:36 - repetitive code there wasn't really a
247:38 - better way of doing this we just have to
247:40 - check for the different weather
247:41 - conditions that we get from google
247:43 - and i guess let's try this
247:45 - and what's a town we haven't looked for
247:48 - yet uh miami
247:51 - if i run this there we go we have sunny
247:54 - and that's one weather condition we
247:56 - could be having
247:58 - let's say what we get in iceland
248:01 - we get mostly cloudy also condition we
248:03 - have accounted for so all of this seems
248:06 - to be working just fine
248:08 - and i guess with that we are done with
248:10 - the weather app it wasn't actually that
248:12 - bad
248:14 - alright and with that we are doing the
248:17 - last program and that is going to be a
248:19 - face detector
248:20 - and this one is going to work like this
248:24 - here you can see me but more importantly
248:26 - you can see my face is being tracked so
248:29 - even if i move around
248:31 - the program knows where i am unless i
248:34 - move outside of the image
248:38 - and then it obviously doesn't know where
248:40 - i am anymore
248:41 - and more importantly at the bottom of
248:43 - the picture you can right now see people
248:45 - in picture one and this is well
248:48 - determined by the input so if there was
248:50 - another person in here this number would
248:52 - say two
248:54 - and well that's going to be the entire
248:55 - project it's going to be fairly
248:57 - straightforward
248:59 - and to make all of this work we are
249:01 - going to use the opencv library which is
249:04 - the python default for any kind of
249:06 - facial detection and this one you have
249:08 - to install so in the powershell or on
249:11 - the terminal you have to type pip
249:13 - install opencv python or pip3 install
249:17 - opencv python do not forget the dash
249:20 - python it is kind of important
249:22 - and with that out of the way
249:24 - let's have a look at our code and here
249:27 - one more time we have our skeleton app
249:30 - so this one doesn't really do anything
249:32 - right now
249:34 - and first of all we have to create a
249:37 - layout in my case i want to have two
249:40 - rows
249:41 - on the first row i want to just create
249:44 - an sg image there's no content for now
249:48 - but i do want to have a key which i'm
249:50 - going to call image
249:54 - and besides that i want to have sg and
249:57 - text
249:58 - and this one by default is going to say
250:00 - people in
250:02 - picture
250:03 - and let me spell this properly
250:05 - let's say we start with zero
250:07 - and this i also want to give a key
250:10 - let's call it text
250:13 - and i also want to justify this text and
250:16 - this one we are going to do with xband x
250:18 - and set it to true
250:20 - and
250:21 - justification
250:23 - should be c short for center
250:26 - and now if i run this we have some text
250:29 - we can't see the picture yet because
250:31 - well we don't have a picture
250:34 - and for that to work we need the opencv
250:36 - library and first of all we have to
250:39 - import it this happens with import cv2
250:43 - and now
250:45 - we have to let me add another section
250:48 - let's call it get video
250:52 - we have to do two things in here first
250:54 - of all we have to get the actual video
250:57 - stream
250:58 - and this we get with cv2 dot
251:01 - video capture
251:04 - and in here make sure the v and the c
251:06 - need to be uppercase letters
251:08 - and this is now going to need one
251:11 - argument and in my case that is going to
251:14 - be a zero and what we are looking for
251:16 - here is the type of input we have in
251:20 - most cases that is going to be a webcam
251:22 - which is a zero
251:24 - in my case i have a dslr which works
251:27 - slightly differently so sometimes opencv
251:30 - decides the input source is a one i am
251:32 - not sure why that changes but play
251:35 - around with different numbers it should
251:37 - be some single digit integer like 0 1 2
251:40 - 3 something like that
251:42 - but now that we have that we are going
251:44 - to need something else and that is
251:45 - called a face
251:47 - cascade
251:49 - and for that one we have to import
251:51 - something and here we have the project
251:54 - folder
251:55 - opencv gui is the actual file we are
251:57 - working in right now and then we have a
252:00 - file called har cascade frontal face
252:02 - default
252:03 - and this is basically the data we need
252:07 - to make image recognition work
252:09 - and this one is designed for faces there
252:12 - are quite a few other data sets that
252:13 - work for something else like recognizing
252:15 - animals or bodies or specific parts of a
252:18 - face like the eyes
252:20 - if you want to look for different things
252:22 - you have to look for different files
252:24 - online obviously i guess really quick
252:27 - this here is the opencv github page
252:30 - and in here you can find lots more of
252:32 - these cascade files you have to go to
252:35 - data and in there you have haar cascades
252:38 - and this is also where i got mine from i
252:40 - am using this one here right now and
252:43 - this one is frontal face default
252:45 - there is also i3 glasses there's one for
252:49 - cat faces there's one for the full body
252:52 - there's the left eye there's the lower
252:55 - body there's lots of different things in
252:57 - here
252:58 - here we are back in the code and i want
253:00 - to cv2 dot cascade
253:04 - classifier
253:06 - and in here now we need the file name
253:09 - let me just copy it it's quite a long
253:12 - one
253:13 - and when you're doing this yourself make
253:15 - sure to not forget the dot xml
253:18 - but right with that we have all we need
253:20 - to get started what we now have to do in
253:23 - the while loop
253:24 - we have to first of all get our video
253:28 - and read it
253:30 - and this is going to return two values
253:32 - the first one we just don't care about
253:35 - the second one is going to return a
253:37 - frame so one image of our current video
253:40 - feed this video feature specifically
253:43 - and what we are going to do is set this
253:46 - frame as this image on every single
253:49 - frame of this while loop here and for
253:52 - that to work we first have to do some
253:54 - conversion
253:55 - and remember earlier when we did the
253:58 - image editor in there we couldn't just
254:00 - use the image we had to convert it to
254:02 - some byte format and this we have to do
254:05 - as well here but let me add another
254:07 - section and let's call it update the
254:11 - image
254:12 - in here we need something like image
254:15 - bytes
254:16 - and this opencv can do by itself so we
254:19 - don't have to import anything else we
254:21 - need cv2 and the command we need is
254:24 - imminent code
254:25 - and the format we want is
254:27 - p and g
254:29 - in fact it should be dot png
254:32 - and then we want the picture information
254:34 - which is our frame
254:36 - and this is going to return a couple of
254:38 - things but we only care about the one
254:40 - with the index one
254:42 - and that information we want to convert
254:44 - to bytes
254:47 - and now we have the information so all i
254:50 - have to do
254:51 - is get my image element
254:54 - and then update it with the data from
254:58 - image bytes
255:00 - and now if i run this
255:03 - we can see nothing
255:05 - the reason here once again
255:08 - is when we are running this entire while
255:11 - loop
255:12 - our program doesn't go past this line
255:16 - here for the simple reason that python
255:18 - begui is waiting for some kind of input
255:21 - which we don't have so we never get past
255:25 - this line
255:26 - we can fix that really easily all we
255:28 - need is a timeout named argument which
255:31 - in my case i want to set to zero
255:35 - and now if i run this
255:36 - you can see me hello there
255:39 - let me move the window to the center of
255:41 - the screen
255:42 - and you can kind of tell that the video
255:45 - is really choppy and this seems to be
255:48 - some kind of problem with the
255:50 - interaction between pyson bagooy and
255:51 - opencv
255:53 - opencv by itself doesn't do that sort of
255:55 - thing
255:56 - so
255:57 - if i close this
255:59 - even with a timeout of 0 here there
256:01 - seems to be some kind of delay anyway
256:04 - which is making our video choppy if you
256:06 - just use opencv this shouldn't be the
256:09 - case
256:10 - now we have a video how can we get
256:13 - facial recognition and for that first of
256:16 - all we need our image as a grayscale
256:19 - because that turns out to be really
256:21 - useful for image detection i have no
256:23 - idea why that is the case but what we
256:25 - want is our image in gray and this we
256:29 - get with cv2 and cvt
256:33 - color
256:34 - and we need two arguments in here first
256:36 - of all we want our frame and besides
256:39 - that we need the color information which
256:42 - in my case is cv2 dot color underscore
256:46 - bgr
256:48 - to
256:49 - gray and this is now going to convert
256:51 - our image to black and white which we
256:53 - can actually use so when i convert the
256:56 - image down here
256:57 - instead of my frame i could insert gray
257:01 - if i run this now
257:02 - you can see me again except now i am
257:05 - black and white
257:07 - but everything else still works just
257:08 - fine but this is information we don't
257:12 - actually want to show we just want to
257:14 - use it
257:15 - so i am going to stick with my frame
257:17 - but now the actual magic
257:20 - we get
257:21 - i want to store this in the variable
257:23 - faces and i want face underscore cascade
257:27 - which is the file we have created
257:29 - earlier by importing this image here
257:32 - which is what we are using now
257:35 - and what i want to do here
257:37 - is
257:38 - run detect
257:40 - multi
257:42 - scale
257:44 - and in here we need our grayscale image
257:47 - and then we need a few more named
257:48 - arguments
257:49 - and i think it's best to put all of this
257:52 - on separate lines
257:53 - so it's a bit easier to see
257:55 - and let me just copy them in that i
257:58 - think is going to be the best way
258:00 - i have a scale factor min neighbors and
258:04 - min size and basically what these
258:08 - different named arguments you do is to
258:10 - determine how our facial recognition is
258:13 - going to work so they set the parameters
258:15 - to what counts as a phase
258:17 - i suppose the easiest one to explain
258:20 - would be min size
258:22 - this one determines the minimum size of
258:24 - a face if i added a really large number
258:26 - in here we would only recognize a phase
258:29 - if it is really large on the picture
258:31 - which isn't very likely
258:33 - and these other factors work in kind of
258:36 - similar ways if you don't get a face or
258:39 - you get too many faces then play around
258:41 - with these numbers and just see what you
258:42 - get
258:44 - now this is the face we actually need
258:47 - what i can do now
258:48 - is let me print faces
258:51 - let's run all of this again you can see
258:53 - me again and now in the bottom left
258:56 - you can see a list with one entry and
258:59 - this is the position of my face i guess
259:02 - the position and the width of my face
259:05 - if i move around you can see the numbers
259:07 - change
259:09 - in different ways
259:15 - and if i move outside of the window let
259:17 - me go all the way here
259:19 - now we have an empty list and if i come
259:22 - back in
259:23 - there are coordinates again
259:26 - and if there was more than one person
259:28 - this faces list would contain more than
259:30 - one list inside of it
259:32 - which means
259:34 - we can use the length of this list to
259:35 - determine how many people are inside of
259:38 - the window
259:39 - and let's do this all the way at the end
259:42 - let's call it update the text
259:45 - and in here i want to get my window
259:48 - the text
259:50 - and i want to update this one
259:53 - and let me copy the text from the top
259:58 - and i do want this to be an f string
260:02 - and now i need the information here for
260:05 - the amount of people and this could be a
260:07 - good challenge for you try to figure out
260:09 - from the faces list how many people are
260:12 - inside of the picture
260:16 - this one should be really easy we want
260:18 - our faces
260:20 - and from that we want the length
260:23 - meaning if there is one item inside of
260:26 - this list we have one person inside of
260:28 - the picture
260:29 - and now if i run this
260:32 - you can see
260:33 - in the bottom people in picture one and
260:36 - if i go outside of the picture
260:40 - it is going to be zero i suppose an
260:42 - easier way of doing this is to cover my
260:44 - face
260:45 - there you go
260:47 - it's working pretty good
260:49 - with that we are very nearly done the
260:53 - last thing i want to do
260:55 - is to draw the rectangles
261:00 - and how this one is going to work let me
261:02 - print the faces again
261:05 - and now if i run this again
261:07 - you can see me again and now in the
261:09 - bottom left we have four numbers the
261:12 - first one is x the second one is y and
261:15 - then we have the width and the height of
261:17 - my face or whatever opencv considers my
261:20 - face to be
261:22 - and these are numbers we can use to draw
261:25 - a rectangle
261:27 - but first of all we want to cycle
261:29 - through the list inside of faces
261:31 - and the most efficient way of doing this
261:34 - is for the tuple x y w and h
261:39 - in phases
261:41 - and what we want to do with that
261:43 - information is cv2 and draw a rectangle
261:47 - and in here we need four bits of
261:50 - information we need the image we want to
261:52 - draw on we need the top left the bottom
261:56 - right
261:56 - and we need a color oh and i forgot we
261:59 - need a line width but the line width is
262:01 - super easy let's just go with two
262:02 - doesn't really matter
262:04 - for the image we want to have the frame
262:07 - now we have to figure out the top left
262:09 - and the bottom right
262:10 - and this is going to be very similar
262:12 - compared to what we have done with the
262:13 - snake video so i guess this could also
262:16 - be a good challenge for you try to use
262:19 - these values here to figure out the top
262:21 - left and bottom right of the image
262:24 - i suppose the best way to understand
262:26 - this is if i draw
262:28 - all of this here is our entire video
262:31 - feed this video here
262:34 - and my face is here
262:36 - and the points we want to find is a
262:39 - point here
262:40 - and besides that
262:41 - this point here
262:43 - which is the bottom right and the upper
262:45 - point is the top left
262:48 - and the top left is the really easy one
262:50 - because all we need here is x and y
262:53 - those points we literally already know
262:56 - so this point is already
262:58 - covered the question now is how can we
263:02 - get to this point down here
263:05 - and the answer for that isn't that much
263:06 - more difficult pretty much all we have
263:09 - to do is go from our top left point and
263:12 - either move to the weft or down by the
263:16 - height of this rectangle
263:18 - and if we combine these two arrows we
263:20 - get the one arrow pointing to the bottom
263:22 - right
263:24 - and all that means in practice
263:26 - my top left is just going to be x and y
263:30 - and my bottom right
263:32 - is going to be i guess it's an x and y
263:35 - position as well but for the x position
263:37 - here i want my x for the top left plus
263:40 - the width and then for the y position i
263:43 - want the y position of my top left plus
263:45 - h
263:47 - and now we just have to set a color and
263:49 - for that one opencv wants a tuple with
263:52 - an rgb color value
263:55 - which means we need r g and b short for
263:58 - red green and blue
264:00 - in my case i went with zero amount of
264:02 - red zero amount of blue and the full
264:04 - amount of green which is 255
264:08 - which is going to give us a green
264:09 - rectangle
264:10 - if i run this now
264:14 - you can see me again but now i have
264:17 - the green rectangle around my face that
264:19 - keeps on following me
264:21 - really really well okay not perfectly
264:24 - well if i rotate my head
264:26 - sometimes it loses it by a tiny bit
264:30 - but it's mostly going quite well
264:34 - cool
264:35 - and with that we have finished the
264:37 - entire tutorial series that took forever
264:39 - to make so i hope you enjoyed it and
264:42 - i'll see you around