00:00 - hello there in this tutorial i will talk
00:02 - about how to fix bugs in pygame not
00:05 - literally any bug but how to approach
00:08 - debugging in pygame and there's one
00:10 - fundamental problem that you need to
00:12 - work around and that is that our code
00:15 - runs in a for loop that updates 60 times
00:17 - per second
00:18 - as a consequence if you try to use the
00:20 - print statement to figure out what
00:22 - happens in your code you get a huge
00:24 - amount of information that honestly
00:26 - isn't all that useful
00:28 - so we need to figure out something else
00:30 - and what i use is a function that
00:32 - displays basically any kind of
00:34 - information in the corner of the screen
00:36 - while our game is running and this
00:38 - function you can call basically anywhere
00:40 - in your code and you can call it
00:41 - multiple times and you can move it
00:43 - around basically as you want it really
00:45 - isn't all that fancy but it is really
00:48 - helpful to debug your code but well this
00:51 - really isn't going to be that long of a
00:53 - video so let's jump straight into the
00:55 - code and let's have a look at this
00:57 - here we are in some very simple pie game
01:00 - code if i run out of this
01:02 - we can see a static image with a cat the
01:04 - cat really isn't all that necessary i
01:06 - just bought it look cute
01:08 - and in here let me talk about the
01:10 - problem that we have if we wanted to
01:12 - find information about what's going on
01:15 - in the code for example let's say i want
01:18 - to know where my mouse position is right
01:20 - now
01:21 - what you could be doing is in the game
01:23 - loop use the print statement
01:25 - and what i want to print is pygame dot
01:27 - mouse dot get underscore pause
01:32 - and if i run out of this now
01:35 - we can indeed see the mouse position so
01:37 - if i scroll down i can't see my mouse
01:39 - position but the problem is this isn't
01:42 - all that helpful because i have to look
01:44 - in the console and i can't see this in
01:46 - real time so this is well kind of
01:49 - pointless
01:51 - at least in most cases
01:53 - so what i want to figure out is how to
01:55 - display this position in real time right
01:58 - on my window without having to use a ton
02:01 - of information in the console
02:03 - so let me get rid of all of this
02:06 - and instead what i usually do is i
02:08 - create a new file
02:10 - that i save in the same folder where my
02:12 - code is so in here i call this debug.pi
02:17 - and now we have to write a function that
02:19 - displays basically any kind of
02:21 - information in the top left corner of
02:23 - the window and that information
02:25 - basically depends on what we pass into
02:27 - this function
02:28 - and first of all we have to import
02:31 - pygame as always
02:33 - and now that we have imported pygame i
02:36 - also want to
02:37 - run pygame.init
02:40 - and the only reason why i am going to do
02:43 - that is because we have to create a font
02:45 - so the text style we want to use
02:48 - and this is done with pygame.font.font
02:52 - and now i need a font style and a font
02:55 - size
02:56 - the font size is the easier part i just
02:58 - go with 30.
03:00 - now for the font style i go with none so
03:03 - use the default font of pygame but you
03:05 - could basically pass anything you want
03:06 - in here
03:08 - and now we come to the actually
03:10 - important part
03:11 - and that is i want to create a function
03:13 - that i call debug
03:16 - and debug is going to need three
03:18 - different arguments
03:19 - the first one is going to be the
03:21 - information we want to pass into
03:23 - and then i want to give it an x and a y
03:25 - position
03:26 - and by default
03:29 - those are going to be 10.
03:32 - and 10.
03:33 - you see in a second why
03:36 - and now in here we first need a display
03:38 - surface and let me explain what that
03:40 - means i want to be able to run this
03:43 - function basically anywhere in my code
03:46 - in for example this debug process
03:48 - i want to just call
03:50 - debug in here and pass in the
03:52 - information
03:54 - now the problem is right now i do know
03:57 - what my display surface is and that is
04:00 - because this code here is really really
04:01 - simple
04:02 - but in more complex parts you might not
04:05 - know what the display surface is
04:07 - so
04:08 - this function here
04:10 - has to be able to find the display
04:11 - surface no matter where it is in our
04:13 - code
04:15 - and this we can actually get quite
04:16 - easily and to get the display surface we
04:19 - need pygame dot display dot get
04:22 - underscore surface
04:24 - and this is always going to give us the
04:26 - display surface
04:28 - and since we only ever have one display
04:30 - surface this is actually quite
04:32 - straightforward and now all i want to do
04:35 - is to save all of this in a separate
04:36 - variable let's call it display
04:39 - underscore surface
04:41 - and now all we have to do is to
04:44 - create some text
04:46 - then we want to
04:49 - create a rectangle with a position
04:53 - and finally we want to blit
04:55 - all of that
04:57 - and all of that should actually be quite
04:59 - straightforward and i guess let's go
05:02 - through it one by one
05:04 - and what i just realized
05:06 - i made a typo
05:08 - and i made another typo
05:10 - that looks better
05:12 - all right so i want first of all to get
05:14 - some text on a separate surface and
05:17 - let's call this one debug surface
05:20 - and in here all i want to do is to get
05:23 - my font and render that font
05:27 - and this needs now three bits of
05:29 - information we first need some text
05:32 - then we need empty alias and then we
05:34 - need a color
05:36 - now for anti-aliasing i want to go with
05:38 - true although what you pass in here
05:41 - really doesn't matter all that much
05:42 - since the player isn't going to see it
05:43 - anyway
05:45 - now for the color i am going to go with
05:47 - black
05:49 - but now we need something for the text
05:52 - and in here you could just pass in the
05:54 - info so what we pass in here as the
05:56 - argument
05:57 - but that might not always work because
05:59 - usually what you expect in here is
06:01 - probably some kind of number and render
06:04 - wants a string so we have to convert
06:07 - this info
06:08 - to a string
06:10 - which is well very easily done
06:13 - and now we have a surface with some text
06:17 - so that was actually quite simple now
06:20 - next up
06:21 - we have to create a rectangle
06:23 - and this i have called debug underscore
06:26 - rect
06:27 - and really all we are going to do here
06:29 - is use the debug surface and then get
06:33 - underscore rect
06:35 - and now i want to place the top left
06:38 - in the position where my x and my y is
06:42 - and the x and my y are up here so by
06:46 - default they are going to be 10
06:48 - but we can pass in specific arguments if
06:51 - we want something else i'm gonna show
06:52 - you in a second what that means
06:54 - but with that we have a surface and a
06:56 - rectangle so now all we have to do is
06:59 - get the display
07:02 - surface
07:03 - use blit
07:05 - and then the debug surface and the debug
07:08 - rectangle
07:10 - and now we should be good to go
07:13 - so what we can do now is to import this
07:15 - debug function
07:16 - in our main program
07:18 - so in here
07:19 - from
07:20 - debug
07:22 - import debug
07:25 - and now we can run this function
07:28 - down here
07:30 - and pass in literally any argument that
07:32 - we want so for now let me just pass in
07:36 - test
07:37 - and let's see what happens
07:39 - and now in the top left corner of the
07:40 - window you can see the word test
07:43 - and this isn't particularly useful right
07:45 - now
07:46 - but what i can do now
07:48 - is something like pygame dot mouse dot
07:51 - get
07:53 - underscore position
07:55 - and if i do this now
07:57 - now i can get the exact mouse position
07:59 - right on the window
08:01 - which is significantly better than what
08:03 - we had before so this is working really
08:06 - well
08:08 - and what is even more powerful because
08:10 - what you can do now
08:12 - is copy this
08:13 - and let's say we want to get some other
08:15 - information
08:17 - for example instead of get pause i want
08:19 - to get get
08:20 - pressed so what most buttons i'm
08:22 - pressing right now and by
08:24 - default this is not looking great
08:27 - because the information is on top of
08:28 - each other
08:29 - but we can fix that quite easily
08:32 - because what we can pass in here is the
08:34 - x and the y argument
08:37 - and in my case the x i'm still happy
08:40 - with but for the y
08:42 - i want to give this an offset of 40.
08:45 - and now if we run all of this
08:49 - you can see that we have well two bits
08:52 - of information that are quite useful
08:55 - so i know my mouse buttons and i know my
08:57 - mouse position
08:59 - and i guess what you can also do
09:01 - let me close this
09:02 - and let me go back to debug
09:05 - so most of the time
09:07 - you don't really touch the x-coordinate
09:11 - and it's much more common that you just
09:12 - want to place information on top of each
09:14 - other so this y
09:16 - you would use much more often
09:18 - so instead what i usually do
09:21 - is i put the y before the x
09:25 - and this allows me if i go back
09:28 - i can just pass in
09:30 - a 40
09:32 - and this 40
09:33 - would then be
09:35 - the y offset and since we don't specify
09:38 - anything for the x
09:40 - this one is still going to be 10.
09:43 - and as a consequence if i run this now
09:46 - we get some much nicer looking debugging
09:49 - text and this is working pretty good
09:53 - now i guess there are two more things i
09:55 - do want to cover
09:56 - and the first one is sometimes you want
09:59 - this text to follow your mouse
10:01 - and this you can also do very easily so
10:04 - let me copy all of this
10:06 - and for now i just want to place
10:10 - let's call it
10:12 - mouse
10:13 - and i want this mouse to follow my mouse
10:15 - cursor so i'm going to copy this get
10:18 - most position
10:20 - and place it in here
10:23 - and for now i want the y position of my
10:25 - mouse
10:27 - and my x position of the mouse
10:31 - and now if i run this
10:33 - now i have mouse following my mouse
10:35 - cursor which can be very useful if you
10:37 - want to know the specific pixel position
10:40 - so this is also something i use fairly
10:42 - often
10:43 - and the one thing that might be
10:44 - confusing here is that
10:47 - this
10:47 - and this is one and zero because this is
10:51 - the y position and this is the x
10:53 - position
10:54 - and the reason is that our first
10:55 - argument is the text and the second
10:57 - argument is the y position and the third
11:00 - argument is x
11:02 - so just keep that in mind
11:04 - but i guess for now we don't really need
11:05 - it all right now for the last thing
11:08 - maybe sometimes you have a game where
11:10 - you have a ton of black and also a ton
11:12 - of white and as a consequence just
11:15 - having some black text isn't
11:17 - particularly useful
11:18 - and what i do in this case is to create
11:21 - a black rectangle behind the text
11:23 - and this is added with literally one
11:26 - line of code
11:27 - because all we are going to need is
11:29 - pygame.draw.rectangle
11:33 - and in here we need a display surface or
11:35 - well any kind of surface then we need a
11:38 - color
11:39 - and then we need the rectangle and i
11:41 - guess for the background
11:44 - here i usually use black
11:47 - then for the surface i want my display
11:49 - surface and now for the rectangle
11:52 - we can just use this debug rectangle
11:55 - and well all we need is then the debug
11:57 - rectangle
11:59 - and now since we have some black
12:00 - background the text should be something
12:03 - else usually i go with white but i guess
12:05 - red would also work and now if i run all
12:08 - of this
12:09 - now we have some black background for
12:11 - our text which is still working just
12:14 - fine
12:16 - and that way even if you have some
12:18 - darker background you can see your
12:20 - debugging text really really well
12:22 - and well that was basically it so i hope
12:25 - that was helpful and i will see you
12:27 - around