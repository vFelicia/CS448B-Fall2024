00:00 - hello in this tutorial I will show you
00:02 - how to create a calculator with Python
00:04 - and PI QT 5 it's going to end up looking
00:07 - like this and will function like any
00:09 - basic calculator and the steps I will be
00:12 - going through happen at these times if
00:14 - you look for specific things as always
00:17 - if you want to use pi QT you need to
00:19 - install pi QT because it doesn't come
00:21 - along with PI even by default so I've
00:24 - earned the power shell on the terminal
00:26 - type pip install PI QT 5 and you should
00:30 - see the installation animation and if
00:32 - you can import PI QT 5 in the Python
00:35 - script without getting an error message
00:36 - you are ready to go
00:39 - let's establish the basics now before
00:43 - starting this project let's talk about
00:45 - gooeys our graphical user interfaces all
00:48 - that means is that when you use your
00:50 - computer you click on icons and buttons
00:52 - instead of typing text while python is a
00:55 - powerful language that can be used from
00:57 - exploring planets to running service to
00:59 - analyzing data very little of that needs
01:02 - a graphical user interface and as a
01:05 - consequence Pythian doesn't really have
01:08 - tools to display graphical elements like
01:10 - buttons or sliders for that we need
01:13 - additional libraries they are quite a
01:15 - few available for that you can find all
01:18 - of them in the Python documentation the
01:21 - default one is called TK inter which is
01:24 - short for TK interface
01:26 - and while this one is installed along
01:28 - with Pavin it is not a core part of the
01:31 - language in fact CK inter is not even
01:34 - made in Python but in the language
01:36 - called tcl/tk another important library
01:40 - is the Qt framework which was originally
01:42 - developed for C++ but it can be used in
01:46 - Python i've-i've-i've pie QT or of Pi
01:48 - site there's a bit of history why they
01:50 - are two modules for the same purpose but
01:52 - the two are really similar so it isn't
01:55 - something you need to worry about all
01:56 - that much
01:57 - and finally there's Kivi which is based
02:00 - on OpenGL this one is particularly good
02:03 - if you want to make a mobile app of
02:05 - Python which library you choose depends
02:08 - on quite a few factors and each has
02:10 - advantages and limitations I will use PI
02:13 - QT for this tutorial because it is nice
02:15 - and simple but with a little bit of
02:17 - tinkering you could create the same up
02:19 - with the other libraries as well
02:22 - and before I get into the logic of pie
02:24 - cutie I have to warn you that you need
02:27 - to have at least a basic understanding
02:28 - of object-oriented programming in Python
02:31 - otherwise nothing is going to make sense
02:34 - specifically you will need to know how
02:36 - to create an object from a class how to
02:38 - use self an inheritance of super but you
02:41 - won't need multiple inheritance or
02:43 - decorators at least for this tutorial
02:45 - and besides that you should also know
02:48 - about lambda functions
02:51 - with that out of the way let's talk
02:52 - about her pie cutie works essentially
02:55 - every pie cutie program is built on two
02:57 - objects one is called cue application
03:00 - the other is main window the one you
03:03 - will work the most with is the main
03:05 - window object because this one handles
03:07 - the graphical elements and the logic of
03:09 - the application itself cue application
03:12 - does all the stuff that happens under
03:13 - the hood like event handling and
03:16 - initializing the modules most of that is
03:18 - automatic though so you don't actually
03:20 - have to vary all that much about this
03:22 - part
03:24 - once those two are created you have a
03:26 - basic framework that you can add visual
03:28 - elements to and in PI Q T these are
03:31 - called widgets which it could be a
03:33 - button or a field it could also be a
03:35 - container that holds other elements
03:39 - for the purpose of this tutorial we all
03:41 - need some basic ones I will use one
03:44 - called cue push button which is a very
03:46 - simple button and perfect for a number
03:48 - and operator keys then I will use the
03:51 - widget called cue line edit which can be
03:54 - used to input and display text in the
03:56 - calculator this one is going to show the
03:58 - results and finally I will use Q widget
04:01 - which is basically just an empty
04:03 - container which is perfect to create
04:05 - structures on the application and that
04:07 - is everything we need to get started
04:09 - let's jump into the code with that
04:13 - first we need some imports we don't
04:15 - actually import all of pie cutie instead
04:18 - I will only import pie cutie 5 thought
04:20 - cutie widgets and I call it qtw I took
04:24 - the naming convention from Alan Moore's
04:26 - book mastering GUI programming in Python
04:29 - which is an excellent book that I would
04:31 - recommend if you want to learn more
04:33 - about pie cutie cutie widgets holds all
04:36 - the widgets and is enough since we are
04:38 - only going to make a simple app without
04:40 - much styling and with the import out of
04:43 - the way let's create the class that
04:45 - holds all the elements that will be
04:47 - shown to the user for that I will need
04:49 - to create a class that I would call main
04:51 - window and that inherits from cute ewq
04:55 - widget then I add dunder init and within
05:01 - that I was a called dunder init on the
05:03 - clouds we can heard from with super and
05:09 - after that I called self-control let me
05:13 - go through this and explain we start by
05:15 - creating a class in the usual way and
05:17 - this class will inherit from qwidget the
05:21 - main window class itself is what will
05:23 - hold all the visual elements and
05:24 - whatever it inherits from will be the
05:27 - base all the other elements will be
05:29 - placed upon in this case qwidget is just
05:32 - an empty container so we start with a
05:34 - completely empty window and next I
05:37 - initialize the attributes of the class
05:39 - we've done there in it and for now this
05:42 - will be empty except for the inheritance
05:44 - from the apparent class which is needed
05:46 - to make it function properly and after
05:49 - that they are self taught show which
05:51 - displays all the elements of the object
05:53 - created from the main window class right
05:56 - now it wouldn't show anything except an
05:58 - empty window because we haven't added
06:00 - any widget yet that will happen a little
06:02 - bit after the main window class I need
06:06 - the line AB equals Q jwq application
06:11 - and I pass in an empty list you could
06:14 - pass in more here for additional
06:15 - functionality but I just don't need it
06:18 - and well that creates the queue
06:20 - application that keeps track of all the
06:22 - stuff under the hood
06:24 - the two things left to do are to create
06:26 - an actual object from the class
06:28 - I call it MW and assign it a class main
06:31 - window and with that we have the two
06:34 - objects that maintain our application
06:36 - the one thing left to do is to add app
06:38 - dot X underscore which tells Python to
06:42 - run the application and the underscore
06:44 - is important to avoid some naming
06:45 - conflicts with Python and that is it if
06:48 - I run the code now you should be able to
06:51 - see an empty window it can be resized
06:53 - and closed but that is about it so let's
06:57 - add the graphical elements next to add a
07:00 - widget to the window all we need is to
07:02 - attach it to the class so effectively
07:04 - the attributes of the main window become
07:07 - the graphical elements for a really
07:09 - simple example how this works let's add
07:12 - a title in the init function of main
07:14 - window I add self dot set window title
07:17 - and insert a string calculator if I run
07:21 - the code now we get a title for the
07:24 - window and a similar pattern is used to
07:27 - add all the buttons and labels but
07:29 - there's one step in between and that is
07:31 - the layout you see the title can only go
07:35 - in one place so it doesn't need a layout
07:37 - but if I added a button peyote wouldn't
07:40 - know where to place it so it wouldn't
07:43 - show it at all instead the structure we
07:46 - need is this we have an empty container
07:48 - right now to that one I will add a
07:50 - layout and on this layout I will add the
07:53 - button and the labels there are a couple
07:56 - of different layout Styles some of the
07:58 - big ones are QV box layout and qh box
08:01 - layout the V and the age stands for
08:04 - vertical and horizontal respectively if
08:06 - I add one of these the widgets will be
08:09 - placed in a vertical or horizontal
08:10 - arrangement which wouldn't be used
08:12 - before a calculator instead I will
08:15 - mostly rely on what is called a cue grid
08:18 - layout which gives us a two dimensional
08:20 - grid that elements can be placed on
08:23 - the layout that I will be using for this
08:25 - project is going to look like this on
08:27 - the window I create a cue box layout
08:30 - that one will hold a container and
08:32 - inside of that container
08:34 - I had a cue grid layout and in this grid
08:37 - all the calculator elements will be
08:38 - placed now you might be asking why I
08:41 - don't just put a grid inside of the main
08:43 - window and that is a very good question
08:46 - basically it is just done to keep the
08:48 - code a bit more readable and lean I will
08:51 - come back to this one in a little bit
08:54 - so in the code I had self dot set layout
08:57 - and insert QT wqv box layout now we have
09:03 - a layout for the main window but we
09:05 - can't see it because it's just a layout
09:07 - let me just add a single button to
09:09 - illustrate I will add a variable bTW and
09:12 - one and assign a QT w r cube push button
09:15 - and it sort of strength test if I run
09:18 - the code now we can see that we can't
09:20 - see anything except that the window has
09:22 - become very small when we launch it to
09:25 - make the button visible we need to
09:27 - attach it to the layout first so in the
09:29 - code
09:30 - I had self-taught layout or add widget
09:32 - and into that I passed PT and one if I
09:38 - run the code now we can see the button
09:40 - we also get the little animation when we
09:42 - press it but nothing much happens yet
09:45 - that part will come in a little bit and
09:47 - just to reiterate what happened first I
09:51 - created a layout on the main window of
09:52 - QV box layout then I created a button
09:56 - widget called BTN one on the next line
09:59 - and this button was added to a layout of
10:01 - the main window and that is the basic
10:05 - way how to add widgets to the same
10:06 - window and it doesn't matter what widget
10:09 - you want to add they are all added in
10:11 - the same way so you could add a button
10:14 - or a text field or you could add a
10:16 - container that itself contains other
10:18 - elements that last part is what I will
10:21 - do actually essentially I will create
10:24 - another function and then that function
10:26 - all the buttons and labels will be
10:28 - generated and still within the function
10:30 - they will all be added inside of a
10:32 - container widget and then only this
10:35 - container will be added to the main
10:36 - window so back in the code I delete the
10:40 - two lines for the simple button and
10:42 - create a function inside of the class
10:43 - and call it keypad and insert self on
10:48 - the first line of keypad I add the
10:51 - variable container and assign a QT w dot
10:53 - Q widget this is going to be what holds
10:56 - all the other elements and on this
10:58 - container I set the layout to be a grid
11:00 - layout with container that said layout
11:03 - and I insert QT w the view grid layout
11:06 - and with that we created an empty
11:09 - container with grid layout that is part
11:11 - of the same object as the empty
11:13 - container with the vertical layout now I
11:15 - only need to create and add all the
11:17 - widgets to the first container and touch
11:20 - that one to the second one so let's add
11:23 - all the widgets now the widgets I want
11:25 - are the following I want the line that
11:27 - displays all the output then two buttons
11:30 - with result and clear and then the
11:32 - buttons from 0 to 9 and obviously the
11:35 - operator keys and all of that is going
11:37 - to involve quite a bit of typing because
11:39 - every single element needs to be added
11:41 - manually
11:42 - I already inserted all of the buttons so
11:45 - you don't have to watch me type for too
11:47 - long I started with the liner displays
11:49 - the text and put it in a variable called
11:51 - result under schofield and assign it QT
11:54 - w dot Q line edit without any arguments
11:58 - next I added the two buttons for
12:00 - entering and deleting the numbers both
12:02 - are just plain buttons and then I
12:05 - created the ten buttons with the numbers
12:07 - from zero to nine each of them is stored
12:10 - in their own variable and finally I
12:12 - needed the keys for the operators so
12:15 - button for plus minus multiplication and
12:17 - division
12:19 - and with that we have created the
12:21 - widgets but now we need to add them to
12:23 - the layout to achieve that let me
12:26 - explain how queue grid layout works
12:28 - essentially this kind of layout creates
12:31 - a grid automatically for you and that
12:33 - grid grows depending on how large it
12:35 - needs to be its top left field has the
12:38 - coordinates 0 and 0 and you just need to
12:41 - add fields by specifying the row and the
12:43 - column and as soon as you place an
12:45 - element the grid grows large enough to
12:47 - incorporate it and by default each
12:50 - element takes in one cell of the grid
12:52 - but you can specify elements to span
12:55 - over a number of cells and that covers
12:58 - the basics so in the code
13:00 - you still need add widget' and insert
13:02 - five arguments the first is to widget
13:04 - you want to place the second is the row
13:07 - and the third is to column and those are
13:09 - the arguments you absolutely need the
13:12 - final two are to specify how many cells
13:14 - the widget should occupy so the fourth
13:17 - element is for the number of rows or
13:19 - tags and the final one how many columns
13:21 - it occupies and with that one out of the
13:24 - way we get to even more typing because
13:26 - we need to add every single element we
13:28 - created earlier to this layout again I
13:31 - prepared this one to save some time so
13:34 - on Rosi row I have the result field that
13:37 - spends 4 columns so takes up the whole
13:39 - space of this row on row 1 I have the
13:43 - result in the Clear button that each
13:44 - take two columns from Row two to Row 4
13:48 - I always added three buttons followed by
13:51 - an operator button and on Row 5 I added
13:54 - the button for 0 that spends 3 columns
13:56 - and is followed by the final operator
13:58 - and to finish things off I just need to
14:02 - add self-taught layout or add widget'
14:04 - and insert container
14:07 - which adds the container with the
14:10 - buttons to the actual main window and
14:12 - all of that happens inside of a single
14:14 - method that is neat and tidy and that
14:17 - was the reason why it didn't just add
14:18 - the grid layouts straight to the main
14:20 - window and if I run the code now we can
14:24 - see all the buttons they don't do
14:25 - anything just yet and the styling is
14:27 - boring but it is a start although before
14:31 - I go to the next section I will change
14:33 - one small thing and that is to itself
14:36 - before the result field both when I
14:38 - create and also when I place it this is
14:41 - to attach the result field to the object
14:43 - itself and make it accessible from
14:45 - outside of the method essentially all of
14:48 - the buttons only exist inside of the
14:50 - keypad and method for now and we can't
14:53 - access them from the outside of this
14:55 - method and if that sounds super weird
14:57 - have a look at some of the tutorials on
15:00 - object oriented programming without that
15:02 - pie cutie is really inaccessible right
15:07 - now the styling is fairly bland though
15:09 - and if you scale the window things get
15:12 - even worse and sadly both styling and
15:15 - scaling at topics that easily require
15:17 - their own tutorial so I won't cover it
15:19 - in this video but we can do one quick
15:22 - thing to improve things a little bit
15:24 - there are default styles that we can
15:26 - apply the one way of right now is pretty
15:29 - ugly and the better one is called fusion
15:31 - to apply that one I need to go to the
15:34 - end of the code just before the
15:35 - execution and type a dot set style and
15:38 - insert qtw that style factory dot create
15:42 - and insert a string fusion here this
15:48 - tells the queue application to apply a
15:50 - certain style when it gets the widgets
15:52 - from the main window so if I run the
15:55 - code now things are looking a little bit
15:57 - better still not great and the scaling
15:59 - is weird as well but it's something
16:02 - let's make the calculator do stuff now
16:06 - right now you can type into the text
16:09 - field and click on the button but
16:11 - there's no reason to do that because
16:12 - they have no functionality and to add
16:15 - that I need to cover two important
16:17 - concepts signals and slots
16:21 - it's actually pretty simple every widget
16:23 - can emit a signal after a certain event
16:25 - so if a button is pressed it sends a
16:28 - signal to another widget and that widget
16:31 - ideally has a slot to receive that
16:33 - signal and that's the theory of how
16:35 - widgets communicate the only signal I
16:38 - will use is called clicked which is
16:40 - emitted when a button is pressed and
16:42 - every single button will be able to send
16:45 - that one I will also only have a single
16:48 - slot and that is for the text field to
16:50 - change its text depending on what button
16:52 - is pressed for a simple example here's
16:55 - the result button if I wanted to emit a
16:58 - signal when pressed I will need to emit
17:00 - an argument called clicked and what I
17:03 - assigned needs to be a function and to
17:05 - be clear here I assigned a function
17:07 - itself I do not call it so no brackets
17:10 - after it for simple things we could
17:13 - either create a function without
17:15 - parameters or use a lambda in case it
17:18 - didn't come across a lambda it is
17:19 - basically a one-time-use function
17:22 - without a name and it gets executed
17:24 - whenever you create it it's a really
17:26 - useful concept check it out if you've
17:27 - never seen it before
17:28 - but what if you wanted to execute a
17:31 - function with a parameter well you would
17:33 - just need to put the function with the
17:35 - arguments inside of a lambda function I
17:37 - will make use of that quite a bit
17:39 - actually let's do a simple example first
17:43 - before I jump into the logic of the
17:45 - calculator say I want to display the
17:48 - text test when I click on the result
17:50 - button so on that button I had clicked
17:53 - equals lambda and to target the result
17:55 - field and itself dot result field but
17:58 - set text and inserted text I want here
18:04 - so out a string test if I execute the
18:07 - code now and press the Enter button we
18:10 - can see the text test but obviously we
18:13 - need more sophisticated logic
18:18 - so I will need a few more methods and
18:21 - also insert arguments into them and that
18:23 - is why the result field got the self so
18:26 - and other methods can access it let's
18:28 - talk about the logic needed for the
18:30 - calculator it is a little bit more
18:32 - complex I start with a method on the
18:35 - number keys so whenever one is pressed
18:38 - Methodist's triggered with an argument I
18:40 - call it numb press for example when I
18:43 - press the button for numb press is cold
18:46 - with a four pass into it and I will have
18:48 - another method for the operators that
18:50 - have a called func press and insert the
18:53 - operator as an argument so it's fairly
18:55 - similar to the buttons that way I get
18:58 - the signals with the appropriate
18:59 - information in them my next problem is
19:02 - that I want to displayed in numbers as
19:04 - the buttons are pressed and get the
19:06 - resolved when the enter button is
19:08 - pressed let's work on the first problem
19:10 - the numbers appear in the result field
19:12 - when pressing the buttons and that they
19:14 - are properly separated when you press an
19:16 - operator key to achieve that I will
19:19 - create two lists one is called temp
19:21 - underscore nums
19:22 - and the other fin underscore numbs and
19:25 - the logic is going to evolve around
19:27 - these two in the simplest case only
19:31 - numbers are pressed and the operator
19:32 - keys haven't been touched in that case
19:35 - when a number key is pressed the
19:37 - associated number is stored in the temp
19:39 - num list as a string and when I press
19:42 - multiple buttons in sequence
19:44 - that sequence of numbers will be stored
19:46 - in that list all as a string so if I
19:49 - pressed 4 2 and 0 I would have a list
19:52 - with the strings 4 2 and 0 why are you
19:55 - strings will become clear in just a
19:57 - little bit but this step is finished by
20:00 - just joining all the elements together
20:01 - as a string and passing this as text
20:04 - into the result field so that covers
20:07 - just pressing the buttons now to the
20:09 - operators
20:11 - once an operator is pressed another
20:13 - method is called in that one all the
20:16 - values in the temp num list are joined
20:19 - together and the resulting string is
20:20 - stored in the fin num list and the fin
20:23 - num list also gets the operator that was
20:25 - clicked on the pendant as well to keep
20:28 - of the earlier example before 2 & 0 will
20:31 - become 420 and if I press plus the fin
20:35 - num list would have the strings 420 and
20:37 - plus also pressing any operator empties
20:41 - to temp num list and this function also
20:43 - changes the result field text to display
20:46 - the joined elements of the fin num list
20:48 - now we have a problem though after I
20:51 - pressed an operator I can see a number
20:53 - plus the operator but if I pressed
20:56 - another number I can only see a number
20:58 - that can be fixed by changing the method
21:01 - for pressing a button I just need to add
21:04 - an if statement that if there is
21:05 - something in the finem list displayed
21:08 - that before the content from the temp
21:10 - num list add if thin num is empty just
21:13 - as paid attempt number Ariel and with
21:16 - that logic we have the text display
21:18 - covered now we just need to do the
21:20 - calculation part and the main thing we
21:23 - have to figure out is how to make Python
21:25 - do the calculation we stored in the list
21:27 - luckily there's a function for that it's
21:30 - called eval and it evaluates a string so
21:34 - if I have a calculation inside of a
21:35 - string it gives me the result so when
21:38 - the enter button is pressed I turn all
21:41 - the content of the thin num list and
21:43 - whatever is left in the temp novelist
21:44 - into one big string evaluated and then
21:48 - at an equal sign and a result to the
21:50 - string and all of that gets displayed in
21:53 - the result field and the last thing now
21:56 - is to add a function for clearing if you
21:57 - made a typing mistake so the clear just
22:00 - erases whatever is in both lists and set
22:03 - the text in the result field to an empty
22:05 - string
22:07 - and that is the entire logic you need
22:08 - for a calculator
22:12 - let's implement all of this in the code
22:14 - now I start by adding a to list in the
22:17 - init method of the class so right after
22:20 - calling super both are empty for now
22:25 - next up we are back to some typing for
22:29 - every single button I need to add a
22:31 - signal again I type this part are ready
22:34 - to save some time both the result and
22:36 - the Clear button have their own method
22:38 - since neither has the parameter I just
22:40 - pass in the method without calling it
22:42 - then I have the number button they all
22:45 - have the same method but different
22:46 - arguments so I have lambda and insert a
22:49 - method with the argument here and the
22:51 - same logic applies to the operator
22:53 - buttons except that they have a
22:55 - different method now we just need to
22:57 - define those four methods and things are
23:00 - nearly done I start with num underscore
23:02 - press and the parameters are self and
23:05 - key number first I add the number from
23:12 - the button to the temp numbers list then
23:16 - I create a local variable of a called
23:18 - temp underscore string and assign it a
23:21 - joint string of the temp num list and if
23:27 - something exists inside of the finem
23:29 - list I want to print that as a string
23:32 - and if it doesn't then I just want to
23:34 - print a temp number list as a string to
23:36 - the result field and that finishes the
23:42 - num press method already now to the
23:44 - operators this one is called func under
23:47 - sculpt press and it takes himself and
23:49 - the operator as parameters in this
23:52 - function I had all the temp dump
23:54 - elements into a string and appended to
23:57 - the fin num list along with the operator
23:59 - that was pressed and then I emptied a
24:09 - temp number list and such a resolved
24:11 - field to whatever is in the kingdom list
24:13 - as a string obviously
24:18 - and to calculate the result field I work
24:23 - on the func underscore result method
24:24 - this one only takes self as the
24:26 - parameter it first takes in all the
24:29 - elements from both lists and turns it
24:31 - into one long string I will pass it into
24:37 - a variable of a called thin underscore
24:39 - string and then I create a variable I
24:41 - would call result underscore screen this
24:43 - one will get the result of the previous
24:45 - string so evolve thin string and on the
24:49 - next two lines add an equal sign and the
24:51 - result of the original string and then I
24:54 - display the result in the result field
24:58 - and to finish bangs all that is left is
25:03 - to work out the clear color method it
25:05 - only takes self its parameter and all
25:08 - that it does is to empty both lists and
25:10 - set the result field empty with the
25:12 - clear method and that is it if I run the
25:20 - code now I have a working calculator
25:23 - sadly it's really buggy if I had an
25:27 - empty field and press Enter the
25:29 - calculator would crash also if the last
25:32 - element in the string is an operator we
25:35 - also get a crash but these are mostly
25:37 - minor problems if you got this far I'm
25:40 - sure you can fix this yourself
25:43 - and it's true that it looks a little bit
25:45 - boring and that it's also quite buggy
25:47 - but you know the first step to being
25:49 - good at something is to be bad at
25:51 - something so if you work on the
25:53 - calculator and check out Alan Moore's
25:54 - book you can vastly improve it but
25:57 - that's it I hope you enjoyed this
25:59 - tutorial let me know in the comments if
26:01 - you have any question otherwise for next
26:04 - week I will show you how to make a fancy
26:05 - graph about the decline of the Simpsons
26:07 - I will see you then